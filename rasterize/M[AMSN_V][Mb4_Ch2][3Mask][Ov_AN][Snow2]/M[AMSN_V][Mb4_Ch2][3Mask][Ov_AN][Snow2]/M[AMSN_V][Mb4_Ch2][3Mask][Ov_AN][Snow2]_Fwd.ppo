#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_10;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_6;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_8;
layout(set = 0, binding = 13) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1214;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _219 = _218 * NORMAL.x;
    float _220 = _218 * NORMAL.y;
    float _221 = _218 * NORMAL.z;
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _233;
    float _234;
    float _235;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _233 = (-0.0) - _219;
        _234 = (-0.0) - _220;
        _235 = (-0.0) - _221;
    }
    else
    {
        _233 = _219;
        _234 = _220;
        _235 = _221;
    }
    vec4 _259 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _288 = cbMtdParam._m0[14u].w * texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w)).x;
    float _296 = ((cbMtdParam._m0[14u].x * (-1.39999997615814208984375)) * (((1.0 - _259.x) * 2.0) - _288)) + 1.0;
    float _3525 = isnan(0.0) ? _296 : (isnan(_296) ? 0.0 : max(_296, 0.0));
    float _297 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
    vec4 _309 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _326 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _328 = _326.x;
    float _329 = _326.y;
    float _330 = _326.z;
    float _337 = ((_309.x - _328) * _297) + _328;
    float _338 = ((_309.y - _329) * _297) + _329;
    float _339 = ((_309.z - _330) * _297) + _330;
    float _345 = (((((1.0 - _259.y) * 2.0) - _288) * (-1.39999997615814208984375)) * cbMtdParam._m0[15u].y) + 1.0;
    float _3536 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _346 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
    vec4 _358 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _369 = ((_358.x - _337) * _346) + _337;
    float _370 = ((_358.y - _338) * _346) + _338;
    float _371 = ((_358.z - _339) * _346) + _339;
    float _377 = (((((1.0 - _259.z) * 2.0) - _288) * (-1.39999997615814208984375)) * cbMtdParam._m0[15u].x) + 1.0;
    float _3547 = isnan(0.0) ? _377 : (isnan(_377) ? 0.0 : max(_377, 0.0));
    float _378 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
    vec4 _391 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _404 = ((_391.z - _371) * _378) + _371;
    float _407 = ((((_391.x - _369) * _378) + _369) * 2.0) + (-1.0);
    float _409 = ((((_391.y - _370) * _378) + _370) * 2.0) + (-1.0);
    float _410 = dot(vec2(_407, _409), vec2(_407, _409));
    float _3558 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _415 = sqrt(1.0 - (isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0))));
    float _416 = fma(_415, _233, 0.0);
    float _417 = fma(_415, _234, 0.0);
    float _418 = fma(_415, _235, 0.0);
    float _422 = inversesqrt(dot(vec3(_416, _417, _418), vec3(_416, _417, _418)));
    float _430 = cbMtdParam._m0[14u].y + dot(vec4(_422 * _416, _422 * _417, _422 * _418, 0.0), vec4(cbMtdParam._m0[15u].zw, cbMtdParam._m0[16u].x, 0.0));
    float _3569 = isnan(0.0) ? _430 : (isnan(_430) ? 0.0 : max(_430, 0.0));
    float _431 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
    vec4 _449 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _454 = _449.x * cbMtdParam._m0[10u].x;
    float _455 = _449.y * cbMtdParam._m0[10u].y;
    float _456 = _449.z * cbMtdParam._m0[10u].z;
    vec4 _474 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    float _488 = (((_474.x * cbMtdParam._m0[11u].x) - _454) * _297) + _454;
    float _489 = (((_474.y * cbMtdParam._m0[11u].y) - _455) * _297) + _455;
    float _490 = (((_474.z * cbMtdParam._m0[11u].z) - _456) * _297) + _456;
    vec4 _507 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _521 = (((_507.x * cbMtdParam._m0[12u].x) - _488) * _346) + _488;
    float _522 = (((_507.y * cbMtdParam._m0[12u].y) - _489) * _346) + _489;
    float _523 = (((_507.z * cbMtdParam._m0[12u].z) - _490) * _346) + _490;
    vec4 _541 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    vec4 _575 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _583 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * ((((_541.x * cbMtdParam._m0[13u].x) - _521) * _378) + _521)) * _575.x;
    float _586 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * ((((_541.y * cbMtdParam._m0[13u].y) - _522) * _378) + _522)) * _575.y;
    float _589 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * ((((_541.z * cbMtdParam._m0[13u].z) - _523) * _378) + _523)) * _575.z;
    vec4 _601 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _612 = ((_601.x - _583) * _431) + _583;
    float _613 = ((_601.y - _586) * _431) + _586;
    float _614 = ((_601.z - _589) * _431) + _589;
    vec4 _627 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _634 = (_627.x * 2.0) + (-1.0);
    float _635 = (_627.y * 2.0) + (-1.0);
    float _636 = dot(vec2(_634, _635), vec2(_634, _635));
    float _3580 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _644 = ((_627.z - _404) * _431) + _404;
    float _653 = ((sqrt(1.0 - (isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0)))) - _415) * _431) + _415;
    vec4 _667 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _677 = (((_634 - _407) * _431) + _407) + (((_667.x * 2.0) + (-1.0)) * cbMtdParam._m0[14u].z);
    float _678 = (((_635 - _409) * _431) + _409) + (((_667.y * 2.0) + (-1.0)) * cbMtdParam._m0[14u].z);
    float _681 = fma(_653, _233, fma(_678, _225 * TANGENT.x, (_211 * _203) * _677));
    float _684 = fma(_653, _234, fma(_678, _225 * TANGENT.y, (_211 * _204) * _677));
    float _687 = fma(_653, _235, fma(_678, _225 * TANGENT.z, (_211 * _205) * _677));
    float _691 = inversesqrt(dot(vec3(_681, _684, _687), vec3(_681, _684, _687)));
    float _692 = _691 * _681;
    float _693 = _691 * _684;
    float _694 = _691 * _687;
    float _3591 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _695 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
    float _3602 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _3613 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _3624 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _714 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _754 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _764 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _754);
    float _765 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _754);
    float _766 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _754);
    float _770 = inversesqrt(dot(vec3(_764, _765, _766), vec3(_764, _765, _766)));
    float _771 = _764 * _770;
    float _772 = _765 * _770;
    float _773 = _766 * _770;
    float _779 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _780 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _798 = fma(_694, cbSceneParam._m0[5u].z, fma(_693, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _692));
    float _801 = fma(_694, cbSceneParam._m0[6u].z, fma(_693, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _692));
    float _804 = fma(_694, cbSceneParam._m0[7u].z, fma(_693, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _692));
    uint _817 = uint(roundEven(NORMAL.w)) * 13u;
    uint _819 = (_817 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _825 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0)))) * cbInstanceData._m0[_819].x;
    float _826 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0)))) * cbInstanceData._m0[_819].y;
    float _827 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0)))) * cbInstanceData._m0[_819].z;
    float _3635 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _828 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
    float _3646 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _829 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
    float _3657 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _830 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
    vec4 _839 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _779, cbSceneParam._m0[86u].y * _780));
    float _842 = _839.x * TEXCOORD_4;
    float _843 = dot(vec3(_692, _693, _694), vec3(_771, _772, _773));
    float _846 = _843 * 2.0;
    float _850 = (_846 * _692) - _771;
    float _851 = (_846 * _693) - _772;
    float _852 = (_846 * _694) - _773;
    float _856 = abs(dot(vec3(_771, _772, _773), vec3(_692, _693, _694)));
    float _3668 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _858 = sqrt(_695);
    float _871 = exp2((_858 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_858 * 3.0));
    float _903 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _907 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _911 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1213;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _938 = fma(_911, cbModelParam._m0[26u].z, fma(_907, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _903));
        float _942 = fma(_911, cbModelParam._m0[27u].z, fma(_907, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _903));
        float _946 = fma(_911, cbModelParam._m0[28u].z, fma(_907, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _903));
        float _971 = _903 + _692;
        float _972 = _907 + _693;
        float _973 = _911 + _694;
        float _983 = fma(_973, cbModelParam._m0[26u].z, fma(_972, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _971)) - _938;
        float _984 = fma(_973, cbModelParam._m0[27u].z, fma(_972, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _971)) - _942;
        float _985 = fma(_973, cbModelParam._m0[28u].z, fma(_972, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _971)) - _946;
        float _989 = inversesqrt(dot(vec3(_983, _984, _985), vec3(_983, _984, _985)));
        float _1002 = ((_989 * _983) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_938 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1003 = ((_989 * _984) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_942 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1004 = ((_989 * _985) / cbModelParam._m0[34u].z) + ((((((_946 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1007 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1002, _1003, _1004), 0.0);
        vec4 _1014 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1002, _1003, _1004), 0.0);
        vec4 _1021 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1002, _1003, _1004), 0.0);
        vec4 _1028 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1002, _1003, _1004), 0.0);
        float _1041 = exp2((_1007.w + (-0.5)) * 20.0) * 2.0;
        float _1042 = _1041 * (_1007.x + (-0.5));
        float _1043 = _1041 * (_1007.y + (-0.5));
        float _1044 = _1041 * (_1007.z + (-0.5));
        float _1051 = exp2((_1014.w + (-0.5)) * 20.0) * 2.0;
        float _1052 = _1051 * (_1014.x + (-0.5));
        float _1053 = _1051 * (_1014.y + (-0.5));
        float _1054 = _1051 * (_1014.z + (-0.5));
        float _1061 = exp2((_1021.w + (-0.5)) * 20.0) * 2.0;
        float _1062 = _1061 * (_1021.x + (-0.5));
        float _1063 = _1061 * (_1021.y + (-0.5));
        float _1064 = _1061 * (_1021.z + (-0.5));
        float _1071 = exp2((_1028.w + (-0.5)) * 20.0) * 2.0;
        float _1072 = _1071 * (_1028.x + (-0.5));
        float _1073 = _1071 * (_1028.y + (-0.5));
        float _1074 = _1071 * (_1028.z + (-0.5));
        float _1075 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1076 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1077 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1078 = _1042 * 0.5;
        float _1079 = _1052 * 0.5;
        float _1080 = _1062 * 0.5;
        float _1081 = dot(vec3(_1078, _1079, _1080), vec3(_1078, _1079, _1080));
        float _1086 = (_1081 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1081);
        float _1095 = (dot(vec3(_692, _693, _694), vec3(_1086 * _1078, _1086 * _1079, _1086 * _1080)) + 1.0) * 0.5;
        float _3694 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1105 = sqrt(((_1079 * _1079) + (_1078 * _1078)) + (_1080 * _1080)) / (_1075 + 9.9999997473787516355514526367188e-06);
        float _3705 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
        float _1107 = _1106 * 2.0;
        float _1111 = (1.0 - _1106) / (_1106 + 1.0);
        float _3716 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _1121 = ((((1.0 - _1112) * (_1107 + 2.0)) * exp2(log2(isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0))) * (_1107 + 1.0))) + _1112) * _1075;
        float _1122 = _1043 * 0.5;
        float _1123 = _1053 * 0.5;
        float _1124 = _1063 * 0.5;
        float _1125 = dot(vec3(_1122, _1123, _1124), vec3(_1122, _1123, _1124));
        float _1130 = (_1125 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1125);
        float _1138 = (dot(vec3(_692, _693, _694), vec3(_1130 * _1122, _1130 * _1123, _1130 * _1124)) + 1.0) * 0.5;
        float _3727 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1147 = sqrt(((_1123 * _1123) + (_1122 * _1122)) + (_1124 * _1124)) / (_1076 + 9.9999997473787516355514526367188e-06);
        float _3738 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1148 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
        float _1149 = _1148 * 2.0;
        float _1153 = (1.0 - _1148) / (_1148 + 1.0);
        float _3749 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _1163 = ((((1.0 - _1154) * (_1149 + 2.0)) * exp2(log2(isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0))) * (_1149 + 1.0))) + _1154) * _1076;
        float _1164 = _1044 * 0.5;
        float _1165 = _1054 * 0.5;
        float _1166 = _1064 * 0.5;
        float _1167 = dot(vec3(_1164, _1165, _1166), vec3(_1164, _1165, _1166));
        float _1172 = (_1167 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1167);
        float _1180 = (dot(vec3(_692, _693, _694), vec3(_1172 * _1164, _1172 * _1165, _1172 * _1166)) + 1.0) * 0.5;
        float _3760 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1189 = sqrt(((_1165 * _1165) + (_1164 * _1164)) + (_1166 * _1166)) / (_1077 + 9.9999997473787516355514526367188e-06);
        float _3771 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
        float _1191 = _1190 * 2.0;
        float _1195 = (1.0 - _1190) / (_1190 + 1.0);
        float _3782 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1205 = ((((1.0 - _1196) * (_1191 + 2.0)) * exp2(log2(isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))) * (_1191 + 1.0))) + _1196) * _1077;
        _1213 = _1044;
        _1215 = _1043;
        _1216 = _1042;
        _1217 = _1054;
        _1218 = _1053;
        _1219 = _1052;
        _1220 = _1064;
        _1221 = _1063;
        _1222 = _1062;
        _1223 = _1077;
        _1224 = _1076;
        _1225 = _1075;
        _1226 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0)));
        _1227 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0)));
        _1228 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0)));
    }
    else
    {
        _1213 = _1214;
        _1215 = _1214;
        _1216 = _1214;
        _1217 = _1214;
        _1218 = _1214;
        _1219 = _1214;
        _1220 = _1214;
        _1221 = _1214;
        _1222 = _1214;
        _1223 = _1214;
        _1224 = _1214;
        _1225 = _1214;
        _1226 = 0.0;
        _1227 = 0.0;
        _1228 = 0.0;
    }
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1254 = fma(_911, cbModelParam._m0[30u].z, fma(_907, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _903));
        float _1258 = fma(_911, cbModelParam._m0[31u].z, fma(_907, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _903));
        float _1262 = fma(_911, cbModelParam._m0[32u].z, fma(_907, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _903));
        float _1285 = _903 + _692;
        float _1286 = _907 + _693;
        float _1287 = _911 + _694;
        float _1297 = fma(_1287, cbModelParam._m0[30u].z, fma(_1286, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1285)) - _1254;
        float _1298 = fma(_1287, cbModelParam._m0[31u].z, fma(_1286, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1285)) - _1258;
        float _1299 = fma(_1287, cbModelParam._m0[32u].z, fma(_1286, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1285)) - _1262;
        float _1303 = inversesqrt(dot(vec3(_1297, _1298, _1299), vec3(_1297, _1298, _1299)));
        float _1316 = ((_1303 * _1297) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1254 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1317 = ((_1303 * _1298) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1258 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1318 = ((_1303 * _1299) / cbModelParam._m0[35u].z) + ((((((_1262 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1320 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1316, _1317, _1318), 0.0);
        vec4 _1327 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1316, _1317, _1318), 0.0);
        vec4 _1334 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1316, _1317, _1318), 0.0);
        vec4 _1341 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1316, _1317, _1318), 0.0);
        float _1353 = exp2((_1320.w + (-0.5)) * 20.0) * 2.0;
        float _1354 = _1353 * (_1320.x + (-0.5));
        float _1355 = _1353 * (_1320.y + (-0.5));
        float _1356 = _1353 * (_1320.z + (-0.5));
        float _1363 = exp2((_1327.w + (-0.5)) * 20.0) * 2.0;
        float _1364 = _1363 * (_1327.x + (-0.5));
        float _1365 = _1363 * (_1327.y + (-0.5));
        float _1366 = _1363 * (_1327.z + (-0.5));
        float _1373 = exp2((_1334.w + (-0.5)) * 20.0) * 2.0;
        float _1374 = _1373 * (_1334.x + (-0.5));
        float _1375 = _1373 * (_1334.y + (-0.5));
        float _1376 = _1373 * (_1334.z + (-0.5));
        float _1383 = exp2((_1341.w + (-0.5)) * 20.0) * 2.0;
        float _1384 = _1383 * (_1341.x + (-0.5));
        float _1385 = _1383 * (_1341.y + (-0.5));
        float _1386 = _1383 * (_1341.z + (-0.5));
        float _1387 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1388 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1389 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1390 = _1354 * 0.5;
        float _1391 = _1364 * 0.5;
        float _1392 = _1374 * 0.5;
        float _1393 = dot(vec3(_1390, _1391, _1392), vec3(_1390, _1391, _1392));
        float _1398 = (_1393 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1393);
        float _1406 = (dot(vec3(_692, _693, _694), vec3(_1398 * _1390, _1398 * _1391, _1398 * _1392)) + 1.0) * 0.5;
        float _3823 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1415 = sqrt(((_1391 * _1391) + (_1390 * _1390)) + (_1392 * _1392)) / (_1387 + 9.9999997473787516355514526367188e-06);
        float _3834 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
        float _1417 = _1416 * 2.0;
        float _1421 = (1.0 - _1416) / (_1416 + 1.0);
        float _3845 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1431 = ((((1.0 - _1422) * (_1417 + 2.0)) * exp2(log2(isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))) * (_1417 + 1.0))) + _1422) * _1387;
        float _1432 = _1355 * 0.5;
        float _1433 = _1365 * 0.5;
        float _1434 = _1375 * 0.5;
        float _1435 = dot(vec3(_1432, _1433, _1434), vec3(_1432, _1433, _1434));
        float _1440 = (_1435 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1435);
        float _1448 = (dot(vec3(_692, _693, _694), vec3(_1440 * _1432, _1440 * _1433, _1440 * _1434)) + 1.0) * 0.5;
        float _3856 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1457 = sqrt(((_1433 * _1433) + (_1432 * _1432)) + (_1434 * _1434)) / (_1388 + 9.9999997473787516355514526367188e-06);
        float _3867 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
        float _1459 = _1458 * 2.0;
        float _1463 = (1.0 - _1458) / (_1458 + 1.0);
        float _3878 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1473 = ((((1.0 - _1464) * (_1459 + 2.0)) * exp2(log2(isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0))) * (_1459 + 1.0))) + _1464) * _1388;
        float _1474 = _1356 * 0.5;
        float _1475 = _1366 * 0.5;
        float _1476 = _1376 * 0.5;
        float _1477 = dot(vec3(_1474, _1475, _1476), vec3(_1474, _1475, _1476));
        float _1482 = (_1477 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1477);
        float _1490 = (dot(vec3(_692, _693, _694), vec3(_1482 * _1474, _1482 * _1475, _1482 * _1476)) + 1.0) * 0.5;
        float _3889 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1499 = sqrt(((_1475 * _1475) + (_1474 * _1474)) + (_1476 * _1476)) / (_1389 + 9.9999997473787516355514526367188e-06);
        float _3900 = isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0));
        float _1500 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
        float _1501 = _1500 * 2.0;
        float _1505 = (1.0 - _1500) / (_1500 + 1.0);
        float _3911 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
        float _1515 = ((((1.0 - _1506) * (_1501 + 2.0)) * exp2(log2(isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * (_1501 + 1.0))) + _1506) * _1389;
        _1523 = _1356;
        _1524 = _1355;
        _1525 = _1354;
        _1526 = _1366;
        _1527 = _1365;
        _1528 = _1364;
        _1529 = _1376;
        _1530 = _1375;
        _1531 = _1374;
        _1532 = _1389;
        _1533 = _1388;
        _1534 = _1387;
        _1535 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)));
        _1536 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)));
        _1537 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)));
    }
    else
    {
        _1523 = _1214;
        _1524 = _1214;
        _1525 = _1214;
        _1526 = _1214;
        _1527 = _1214;
        _1528 = _1214;
        _1529 = _1214;
        _1530 = _1214;
        _1531 = _1214;
        _1532 = _1214;
        _1533 = _1214;
        _1534 = _1214;
        _1535 = 0.0;
        _1536 = 0.0;
        _1537 = 0.0;
    }
    float _1547 = (cbModelParam._m0[1u].x * (_1535 - _1226)) + _1226;
    float _1548 = (cbModelParam._m0[1u].x * (_1536 - _1227)) + _1227;
    float _1549 = (cbModelParam._m0[1u].x * (_1537 - _1228)) + _1228;
    float _1570 = fma(_1549, cbSceneParam._m0[89u].z, fma(_1548, cbSceneParam._m0[89u].y, _1547 * cbSceneParam._m0[89u].x));
    float _1573 = fma(_1549, cbSceneParam._m0[90u].z, fma(_1548, cbSceneParam._m0[90u].y, _1547 * cbSceneParam._m0[90u].x));
    float _1576 = fma(_1549, cbSceneParam._m0[91u].z, fma(_1548, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1547));
    float _1591 = _850 * 0.5;
    float _1592 = _851 * 0.5;
    float _1593 = _852 * 0.5;
    float _1594 = dot(vec4(_1591, _1592, _1593, 1.0), vec4(_1525, _1528, _1531, _1534));
    float _1597 = dot(vec4(_1591, _1592, _1593, 1.0), vec4(_1524, _1527, _1530, _1533));
    float _1600 = dot(vec4(_1591, _1592, _1593, 1.0), vec4(_1523, _1526, _1529, _1532));
    float _1634;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1607 = dot(vec4(_1591, _1592, _1593, 1.0), vec4(_1213, _1217, _1220, _1223));
        float _1611 = dot(vec4(_1591, _1592, _1593, 1.0), vec4(_1215, _1218, _1221, _1224));
        float _1615 = dot(vec4(_1591, _1592, _1593, 1.0), vec4(_1216, _1219, _1222, _1225));
        float _1622 = dot(vec4(cbModelParam._m0[39u]), vec4(_1591, _1592, _1593, 1.0));
        _1634 = dot(vec3(isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0)), isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0)), isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1622) ? 0.0 : (isnan(0.0) ? _1622 : max(0.0, _1622))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1634 = 1.0;
    }
    float _1645;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1636 = dot(vec4(cbModelParam._m0[40u]), vec4(_1591, _1592, _1593, 1.0));
        _1645 = dot(vec3(isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0)), isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0)), isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1636) ? 0.0 : (isnan(0.0) ? _1636 : max(0.0, _1636))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1645 = 1.0;
    }
    float _1649 = (_1645 * cbModelParam._m0[1u].x) + (_1634 * (1.0 - cbModelParam._m0[1u].x));
    float _1659 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _695);
    float _1660 = isnan(_1659) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1659 : min(cbModelParam._m0[25u].z, _1659));
    float _1740;
    float _1742;
    float _1744;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1707 = fma(_911, cbModelParam._m0[13u].z, fma(_907, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _903)) + cbModelParam._m0[13u].w;
        float _1711 = fma(_911, cbModelParam._m0[14u].z, fma(_907, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _903)) + cbModelParam._m0[14u].w;
        float _1715 = fma(_911, cbModelParam._m0[15u].z, fma(_907, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _903)) + cbModelParam._m0[15u].w;
        float _1718 = fma(_852, cbModelParam._m0[13u].z, fma(_851, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _850));
        float _1721 = fma(_852, cbModelParam._m0[14u].z, fma(_851, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _850));
        float _1724 = fma(_852, cbModelParam._m0[15u].z, fma(_851, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _850));
        float _1752;
        if (_1718 > 0.0)
        {
            _1752 = abs((1.0 - _1707) / _1718);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1718 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1707 + 1.0) / _1718);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1752 = frontier_phi_16_14_ladder;
        }
        float _1956;
        if (_1721 > 0.0)
        {
            _1956 = abs((1.0 - _1711) / _1721);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1721 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1711 + 1.0) / _1721);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1956 = frontier_phi_25_21_ladder;
        }
        float _2199;
        if (_1724 > 0.0)
        {
            _2199 = abs((1.0 - _1715) / _1724);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1724 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1715 + 1.0) / _1724);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2199 = frontier_phi_37_32_ladder;
        }
        float _2201 = isnan(_1956) ? _1752 : (isnan(_1752) ? _1956 : min(_1752, _1956));
        float _2202 = isnan(_2199) ? _2201 : (isnan(_2201) ? _2199 : min(_2201, _2199));
        float _2206 = (_2202 * _1718) + _1707;
        float _2207 = (_2202 * _1721) + _1711;
        float _2208 = (_2202 * _1724) + _1715;
        float _2209 = _2202 * 9.9999997473787516355514526367188e-05;
        float _2211 = (-1.0) - _2209;
        float _2213 = _2209 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2208 > _2213) || ((_2208 < _2211) || ((_2207 > _2213) || ((_2207 < _2211) || ((_2206 < _2211) || (_2206 > _2213))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2332 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2208, cbModelParam._m0[9u].z, fma(_2207, cbModelParam._m0[9u].y, _2206 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2208, cbModelParam._m0[10u].z, fma(_2207, cbModelParam._m0[10u].y, _2206 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2208, cbModelParam._m0[11u].z, fma(_2207, cbModelParam._m0[11u].y, _2206 * cbModelParam._m0[11u].x))), _1660);
            frontier_phi_15_37_ladder = _2332.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2332.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2332.x * cbModelParam._m0[1u].y;
        }
        _1740 = frontier_phi_15_37_ladder_2;
        _1742 = frontier_phi_15_37_ladder_1;
        _1744 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1728 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_850, _851, _852), _1660);
        _1740 = _1728.x * cbModelParam._m0[1u].y;
        _1742 = _1728.y * cbModelParam._m0[1u].y;
        _1744 = _1728.z * cbModelParam._m0[1u].y;
    }
    float _1748 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _695);
    float _1749 = isnan(_1748) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1748 : min(cbModelParam._m0[25u].w, _1748));
    float _1842;
    float _1844;
    float _1846;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1806 = fma(_911, cbModelParam._m0[21u].z, fma(_907, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _903)) + cbModelParam._m0[21u].w;
        float _1810 = fma(_911, cbModelParam._m0[22u].z, fma(_907, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _903)) + cbModelParam._m0[22u].w;
        float _1814 = fma(_911, cbModelParam._m0[23u].z, fma(_907, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _903)) + cbModelParam._m0[23u].w;
        float _1817 = fma(_852, cbModelParam._m0[21u].z, fma(_851, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _850));
        float _1820 = fma(_852, cbModelParam._m0[22u].z, fma(_851, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _850));
        float _1823 = fma(_852, cbModelParam._m0[23u].z, fma(_851, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _850));
        float _1961;
        if (_1817 > 0.0)
        {
            _1961 = abs((1.0 - _1806) / _1817);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1817 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1806 + 1.0) / _1817);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1961 = frontier_phi_27_23_ladder;
        }
        float _2226;
        if (_1820 > 0.0)
        {
            _2226 = abs((1.0 - _1810) / _1820);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1820 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1810 + 1.0) / _1820);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2226 = frontier_phi_39_34_ladder;
        }
        float _2431;
        if (_1823 > 0.0)
        {
            _2431 = abs((1.0 - _1814) / _1823);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1823 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1814 + 1.0) / _1823);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2431 = frontier_phi_48_45_ladder;
        }
        float _2433 = isnan(_2226) ? _1961 : (isnan(_1961) ? _2226 : min(_1961, _2226));
        float _2434 = isnan(_2431) ? _2433 : (isnan(_2433) ? _2431 : min(_2433, _2431));
        float _2438 = (_2434 * _1817) + _1806;
        float _2439 = (_2434 * _1820) + _1810;
        float _2440 = (_2434 * _1823) + _1814;
        float _2441 = _2434 * 9.9999997473787516355514526367188e-05;
        float _2442 = (-1.0) - _2441;
        float _2444 = _2441 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2440 > _2444) || ((_2440 < _2442) || ((_2439 > _2444) || ((_2439 < _2442) || ((_2438 < _2442) || (_2438 > _2444))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2638 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2440, cbModelParam._m0[17u].z, fma(_2439, cbModelParam._m0[17u].y, _2438 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2440, cbModelParam._m0[18u].z, fma(_2439, cbModelParam._m0[18u].y, _2438 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2440, cbModelParam._m0[19u].z, fma(_2439, cbModelParam._m0[19u].y, _2438 * cbModelParam._m0[19u].x))), _1749);
            frontier_phi_24_48_ladder = _2638.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2638.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2638.x * cbModelParam._m0[1u].z;
        }
        _1842 = frontier_phi_24_48_ladder_2;
        _1844 = frontier_phi_24_48_ladder_1;
        _1846 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1826 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_850, _851, _852), _1749);
        _1842 = _1826.x * cbModelParam._m0[1u].z;
        _1844 = _1826.y * cbModelParam._m0[1u].z;
        _1846 = _1826.z * cbModelParam._m0[1u].z;
    }
    float _1858 = ((((1.0 - _871) * ((_858 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_871 * _858)) * _842;
    float _1859 = _1858 * ((cbModelParam._m0[1u].w * (_1842 - _1740)) + _1740);
    float _1860 = _1858 * ((cbModelParam._m0[1u].w * (_1844 - _1742)) + _1742);
    float _1861 = _1858 * ((cbModelParam._m0[1u].w * (_1846 - _1744)) + _1744);
    float _1864 = fma(_1861, cbSceneParam._m0[89u].z, fma(_1860, cbSceneParam._m0[89u].y, _1859 * cbSceneParam._m0[89u].x));
    float _1867 = fma(_1861, cbSceneParam._m0[90u].z, fma(_1860, cbSceneParam._m0[90u].y, _1859 * cbSceneParam._m0[90u].x));
    float _1870 = fma(_1861, cbSceneParam._m0[91u].z, fma(_1860, cbSceneParam._m0[91u].y, _1859 * cbSceneParam._m0[91u].x));
    uvec4 _1880 = floatBitsToUint(cbInstanceData._m0[_817 + 5u]);
    uint _1882 = _1880.x * 14u;
    uint _1883 = _1882 + 13u;
    float _1890 = _842 + (-1.0);
    float _1895 = (cbLight._m0[_1883].x * _1890) + 1.0;
    float _1896 = (cbLight._m0[_1883].y * _1890) + 1.0;
    float _1897 = (cbLight._m0[_1883].z * _1890) + 1.0;
    float _1898 = (cbLight._m0[_1883].w * _1890) + 1.0;
    uint _1899 = _1882 + 5u;
    float _1905 = isnan(1.0) ? _1896 : (isnan(_1896) ? 1.0 : min(_1896, 1.0));
    uint _1909 = _1882 + 4u;
    float _1915 = isnan(1.0) ? _1895 : (isnan(_1895) ? 1.0 : min(_1895, 1.0));
    uint _1919 = _1882 | 1u;
    float _1930 = dot(vec3(cbLight._m0[_1882].xyz), vec3(_692, _693, _694));
    float _1933 = dot(vec3(cbLight._m0[_1919].xyz), vec3(_692, _693, _694));
    float _4047 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
    float _4058 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
    float _1938 = (isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * 0.3183098733425140380859375;
    float _1940 = (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0))) * 0.3183098733425140380859375;
    float _1947 = ((cbLight._m0[_1899].x * _1905) * _1940) + ((cbLight._m0[_1909].x * _1915) * _1938);
    float _1948 = ((_1905 * cbLight._m0[_1899].y) * _1940) + ((_1915 * cbLight._m0[_1909].y) * _1938);
    float _1949 = ((_1905 * cbLight._m0[_1899].z) * _1940) + ((_1915 * cbLight._m0[_1909].z) * _1938);
    uvec4 _1953 = floatBitsToUint(cbLight._m0[_1882 + 12u]);
    bool _1955 = _1953.x == 0u;
    float _1966;
    float _1968;
    float _1970;
    if (_1955)
    {
        _1966 = _1947;
        _1968 = _1948;
        _1970 = _1949;
    }
    else
    {
        uint _1974 = _1882 + 6u;
        float _1990 = (dot(vec3(cbLight._m0[_1882 + 2u].xyz), vec3(_692, _693, _694)) * 0.5) + 0.5;
        float _1991 = _1990 * _1990;
        float _4069 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
        float _1992 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1993 = isnan(1.0) ? _1897 : (isnan(_1897) ? 1.0 : min(_1897, 1.0));
        _1966 = (((cbLight._m0[_1974].x * 0.3183098733425140380859375) * _1992) * _1993) + _1947;
        _1968 = (((cbLight._m0[_1974].y * 0.3183098733425140380859375) * _1992) * _1993) + _1948;
        _1970 = (((cbLight._m0[_1974].z * 0.3183098733425140380859375) * _1992) * _1993) + _1949;
    }
    bool _1973 = _1953.y == 0u;
    float _2011;
    float _2013;
    float _2015;
    if (_1973)
    {
        _2011 = _1966;
        _2013 = _1968;
        _2015 = _1970;
    }
    else
    {
        uint _2170 = _1882 + 7u;
        float _2186 = (dot(vec3(cbLight._m0[_1882 + 3u].xyz), vec3(_692, _693, _694)) * 0.5) + 0.5;
        float _2187 = _2186 * _2186;
        float _4085 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
        float _2188 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
        float _2189 = isnan(1.0) ? _1898 : (isnan(_1898) ? 1.0 : min(_1898, 1.0));
        _2011 = (((cbLight._m0[_2170].x * 0.3183098733425140380859375) * _2188) * _2189) + _1966;
        _2013 = (((cbLight._m0[_2170].y * 0.3183098733425140380859375) * _2188) * _2189) + _1968;
        _2015 = (((cbLight._m0[_2170].z * 0.3183098733425140380859375) * _2188) * _2189) + _1970;
    }
    uint _2018 = _1882 + 8u;
    float _2031 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1882].w)) * _695) * 0.949999988079071044921875);
    float _2032 = _2031 * _2031;
    float _2033 = cbLight._m0[_1882].x + _771;
    float _2034 = cbLight._m0[_1882].y + _772;
    float _2035 = cbLight._m0[_1882].z + _773;
    float _2039 = inversesqrt(dot(vec3(_2033, _2034, _2035), vec3(_2033, _2034, _2035)));
    float _2040 = _2039 * _2033;
    float _2041 = _2039 * _2034;
    float _2042 = _2039 * _2035;
    float _2043 = dot(vec3(_692, _693, _694), vec3(cbLight._m0[_1882].xyz));
    float _4101 = isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0));
    float _2046 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
    float _4112 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _2047 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
    float _2048 = dot(vec3(_692, _693, _694), vec3(_2040, _2041, _2042));
    float _4123 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
    float _2051 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
    float _2052 = dot(vec3(cbLight._m0[_1882].xyz), vec3(_2040, _2041, _2042));
    float _4134 = isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0));
    float _2056 = _2032 * _2032;
    float _2060 = ((_2051 * _2051) * (_2056 + (-1.0))) + 1.0;
    float _2071 = (exp2(log2(1.0 - (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2072 = 1.0 - _2032;
    float _2083 = (0.5 / (((_2047 * ((_2046 * _2072) + _2032)) + 9.9999999392252902907785028219223e-09) + (((_2047 * _2072) + _2032) * _2046))) * _2046;
    float _4145 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
    float _2085 = (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_2056 / ((_2060 * _2060) * 3.141590118408203125));
    uint _2096 = _1882 + 9u;
    float _2107 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1919].w)) * _695) * 0.949999988079071044921875);
    float _2108 = _2107 * _2107;
    float _2109 = cbLight._m0[_1919].x + _771;
    float _2110 = cbLight._m0[_1919].y + _772;
    float _2111 = cbLight._m0[_1919].z + _773;
    float _2115 = inversesqrt(dot(vec3(_2109, _2110, _2111), vec3(_2109, _2110, _2111)));
    float _2116 = _2115 * _2109;
    float _2117 = _2115 * _2110;
    float _2118 = _2115 * _2111;
    float _2119 = dot(vec3(_692, _693, _694), vec3(cbLight._m0[_1919].xyz));
    float _4156 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
    float _2122 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
    float _2123 = dot(vec3(_692, _693, _694), vec3(_2116, _2117, _2118));
    float _4167 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _2126 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
    float _2127 = dot(vec3(cbLight._m0[_1919].xyz), vec3(_2116, _2117, _2118));
    float _4178 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
    float _2131 = _2108 * _2108;
    float _2135 = ((_2126 * _2126) * (_2131 + (-1.0))) + 1.0;
    float _2144 = (exp2(log2(1.0 - (isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2145 = 1.0 - _2108;
    float _2155 = (0.5 / (((_2047 * ((_2122 * _2145) + _2108)) + 9.9999999392252902907785028219223e-09) + (((_2047 * _2145) + _2108) * _2122))) * _2122;
    float _4189 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _2157 = (isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0))) * (_2131 / ((_2135 * _2135) * 3.141590118408203125));
    float _2167 = (((_2144 * cbLight._m0[_2096].x) * _2157) * _1905) + (((_2071 * cbLight._m0[_2018].x) * _2085) * _1915);
    float _2168 = (((_2144 * cbLight._m0[_2096].y) * _2157) * _1905) + (((_2071 * cbLight._m0[_2018].y) * _2085) * _1915);
    float _2169 = (((_2144 * cbLight._m0[_2096].z) * _2157) * _1905) + (((_2071 * cbLight._m0[_2018].z) * _2085) * _1915);
    float _2231;
    float _2233;
    float _2235;
    if (_1955)
    {
        _2231 = _2167;
        _2233 = _2168;
        _2235 = _2169;
    }
    else
    {
        uint _2237 = _1882 + 2u;
        uint _2241 = _1882 + 10u;
        float _2255 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2237].w)) * _695) * 0.949999988079071044921875);
        float _2256 = _2255 * _2255;
        float _2257 = cbLight._m0[_2237].x + _771;
        float _2258 = cbLight._m0[_2237].y + _772;
        float _2259 = cbLight._m0[_2237].z + _773;
        float _2263 = inversesqrt(dot(vec3(_2257, _2258, _2259), vec3(_2257, _2258, _2259)));
        float _2264 = _2263 * _2257;
        float _2265 = _2263 * _2258;
        float _2266 = _2263 * _2259;
        float _2267 = dot(vec3(_692, _693, _694), vec3(cbLight._m0[_2237].xyz));
        float _4200 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
        float _2270 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _2271 = dot(vec3(_692, _693, _694), vec3(_2264, _2265, _2266));
        float _4211 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
        float _2274 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
        float _2275 = dot(vec3(cbLight._m0[_2237].xyz), vec3(_2264, _2265, _2266));
        float _4222 = isnan(0.0) ? _2275 : (isnan(_2275) ? 0.0 : max(_2275, 0.0));
        float _2279 = _2256 * _2256;
        float _2283 = ((_2274 * _2274) * (_2279 + (-1.0))) + 1.0;
        float _2292 = (exp2(log2(1.0 - (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2293 = 1.0 - _2256;
        float _2303 = (0.5 / (((_2047 * ((_2270 * _2293) + _2256)) + 9.9999999392252902907785028219223e-09) + (((_2047 * _2293) + _2256) * _2270))) * _2270;
        float _4233 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
        float _2305 = (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0))) * (_2279 / ((_2283 * _2283) * 3.141590118408203125));
        float _2306 = isnan(1.0) ? _1897 : (isnan(_1897) ? 1.0 : min(_1897, 1.0));
        _2231 = (((_2292 * cbLight._m0[_2241].x) * _2305) * _2306) + _2167;
        _2233 = (((_2292 * cbLight._m0[_2241].y) * _2305) * _2306) + _2168;
        _2235 = (((_2292 * cbLight._m0[_2241].z) * _2305) * _2306) + _2169;
    }
    float _2341;
    float _2343;
    float _2345;
    if (_1973)
    {
        _2341 = _2231;
        _2343 = _2233;
        _2345 = _2235;
    }
    else
    {
        uint _2352 = _1882 + 3u;
        uint _2356 = _1882 + 11u;
        float _2370 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2352].w)) * _695) * 0.949999988079071044921875);
        float _2371 = _2370 * _2370;
        float _2372 = cbLight._m0[_2352].x + _771;
        float _2373 = cbLight._m0[_2352].y + _772;
        float _2374 = cbLight._m0[_2352].z + _773;
        float _2378 = inversesqrt(dot(vec3(_2372, _2373, _2374), vec3(_2372, _2373, _2374)));
        float _2379 = _2378 * _2372;
        float _2380 = _2378 * _2373;
        float _2381 = _2378 * _2374;
        float _2382 = dot(vec3(_692, _693, _694), vec3(cbLight._m0[_2352].xyz));
        float _4249 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
        float _2385 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _2386 = dot(vec3(_692, _693, _694), vec3(_2379, _2380, _2381));
        float _4260 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
        float _2389 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
        float _2390 = dot(vec3(cbLight._m0[_2352].xyz), vec3(_2379, _2380, _2381));
        float _4271 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
        float _2394 = _2371 * _2371;
        float _2398 = ((_2389 * _2389) * (_2394 + (-1.0))) + 1.0;
        float _2407 = (exp2(log2(1.0 - (isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2408 = 1.0 - _2371;
        float _2418 = (0.5 / (((_2047 * ((_2385 * _2408) + _2371)) + 9.9999999392252902907785028219223e-09) + (((_2047 * _2408) + _2371) * _2385))) * _2385;
        float _4282 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
        float _2420 = (isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0))) * (_2394 / ((_2398 * _2398) * 3.141590118408203125));
        float _2421 = isnan(1.0) ? _1898 : (isnan(_1898) ? 1.0 : min(_1898, 1.0));
        _2341 = (((_2407 * cbLight._m0[_2356].x) * _2420) * _2421) + _2231;
        _2343 = (((_2407 * cbLight._m0[_2356].y) * _2420) * _2421) + _2233;
        _2345 = (((_2407 * cbLight._m0[_2356].z) * _2420) * _2421) + _2235;
    }
    float _2555;
    float _2557;
    float _2559;
    float _2561;
    float _2563;
    float _2565;
    if (_1880.y == 0u)
    {
        float _2496 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2497 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2496;
        float _2498 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2496;
        float _2499 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2496;
        uvec4 _2511 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2512 = _2511.x;
        uint _2523 = uint((float(_2511.y) * floor(float(uint(cbSceneParam._m0[85u].y * _780) / _2512))) + floor(float(uint(cbSceneParam._m0[85u].x * _779) / _2512)));
        float _2533 = (log2(_2499 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2534 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        uint _2537 = uint(isnan(14.0) ? _2534 : (isnan(_2534) ? 14.0 : min(_2534, 14.0)));
        uvec4 _2542 = texelFetch(g_lightClusterGridBuffer, int(((_2537 << 2u) + (_2523 << 6u)) >> 2u));
        uint _2543 = _2542.x;
        uint _2544 = _2511.z;
        float _2643;
        float _2645;
        float _2647;
        float _2649;
        float _2651;
        float _2653;
        if (((((1u << ((_2544 >> 4u) & 15u)) + 4294967295u) & _2543) == 0u) || ((_2544 & 240u) == 0u))
        {
            _2643 = 0.0;
            _2645 = 0.0;
            _2647 = 0.0;
            _2649 = 0.0;
            _2651 = 0.0;
            _2653 = 0.0;
        }
        else
        {
            float _2644;
            float _2646;
            float _2648;
            float _2650;
            float _2652;
            float _2654;
            float _2787 = 0.0;
            float _2788 = 0.0;
            float _2789 = 0.0;
            float _2790 = 0.0;
            float _2791 = 0.0;
            float _2792 = 0.0;
            uint _2793 = 0u;
            uint _2802;
            bool _2803;
            for (;;)
            {
                _2802 = texelFetch(g_lightClassification, int((((_2537 << 5u) + (_2523 << 9u)) + (_2793 << 2u)) >> 2u)).x;
                _2803 = _2802 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2803)
                {
                    frontier_phi_63_pred = _2792;
                    frontier_phi_63_pred_1 = _2791;
                    frontier_phi_63_pred_2 = _2790;
                    frontier_phi_63_pred_3 = _2789;
                    frontier_phi_63_pred_4 = _2788;
                    frontier_phi_63_pred_5 = _2787;
                }
                else
                {
                    float _2911;
                    float _2912;
                    float _2913;
                    float _2914;
                    float _2915;
                    float _2916;
                    uint _2917;
                    _2911 = _2787;
                    _2912 = _2788;
                    _2913 = _2789;
                    _2914 = _2790;
                    _2915 = _2791;
                    _2916 = _2792;
                    _2917 = _2802;
                    float _2843;
                    float _2844;
                    float _2845;
                    float _2846;
                    float _2847;
                    float _2848;
                    for (;;)
                    {
                        uint _2921 = uint(findLSB(_2917)) + (_2793 << 5u);
                        uint _2918 = (_2917 + 4294967295u) & _2917;
                        uint _2923 = _2921 * 48u;
                        vec4 _2937 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2923)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 3u)).x));
                        uint _2943 = (_2921 * 48u) + 4u;
                        vec4 _2956 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2943)).x, texelFetch(g_PointLightRenderingBuffer, int(_2943 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2943 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2943 + 3u)).x));
                        uint _2962 = (_2921 * 48u) + 8u;
                        vec3 _2973 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2962)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 2u)).x));
                        float _2977 = _2937.x - _2497;
                        float _2978 = _2937.y - _2498;
                        float _2979 = _2937.z - _2499;
                        float _2980 = dot(vec3(_2977, _2978, _2979), vec3(_2977, _2978, _2979));
                        float _2983 = inversesqrt(_2980);
                        float _2984 = _2983 * _2977;
                        float _2985 = _2983 * _2978;
                        float _2986 = _2983 * _2979;
                        float _2987 = dot(vec3(_798, _801, _804), vec3(_2984, _2985, _2986));
                        float _2992 = 1.0 - (_2980 * _2937.w);
                        float _4308 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
                        float _2993 = isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0));
                        float _2994 = sqrt(_2980) * _2956.w;
                        float _2997 = 1.39999997615814208984375 / (_2994 + 1.39999997615814208984375);
                        float _2998 = _2997 * _2997;
                        float _3001 = ((1.0 - _2998) * _2987) + _2998;
                        float _3004 = _2994 * _2994;
                        float _3008 = ((isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0))) * _2993) / ((_3004 * 0.699999988079071044921875) + 1.0);
                        float _3012 = (-0.0) - _2497;
                        float _3013 = (-0.0) - _2498;
                        float _3014 = (-0.0) - _2499;
                        float _3018 = inversesqrt(dot(vec3(_3012, _3013, _3014), vec3(_3012, _3013, _3014)));
                        float _3019 = _3018 * _3012;
                        float _3020 = _3018 * _3013;
                        float _3021 = _3018 * _3014;
                        float _3029 = exp2(log2(1.0 / ((_3004 * 3.5) + 5.0)) * 0.25);
                        float _3030 = 1.0 - _858;
                        float _3037 = sqrt(1.0 - ((1.0 - (_3030 * _3030)) * (1.0 - (_3029 * _3029))));
                        float _3038 = _3037 * _3037;
                        float _3039 = _3038 * _3038;
                        float _3040 = _3019 + _2984;
                        float _3041 = _3020 + _2985;
                        float _3042 = _3021 + _2986;
                        float _3046 = inversesqrt(dot(vec3(_3040, _3041, _3042), vec3(_3040, _3041, _3042)));
                        float _3050 = dot(vec3(_798, _801, _804), vec3(_3019, _3020, _3021));
                        float _4324 = isnan(0.0) ? _3050 : (isnan(_3050) ? 0.0 : max(_3050, 0.0));
                        float _3053 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
                        float _3054 = dot(vec3(_798, _801, _804), vec3(_3046 * _3040, _3046 * _3041, _3046 * _3042));
                        float _4335 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0));
                        float _3057 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
                        float _3061 = ((_3057 * _3057) * (_3039 + (-1.0))) + 1.0;
                        float _3062 = _2997 * _3038;
                        float _3063 = _3062 * _3062;
                        float _3066 = ((1.0 - _3063) * _2987) + _3063;
                        float _4346 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                        float _3067 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
                        float _3068 = 1.0 - _3038;
                        float _3078 = (0.5 / (((_3067 * ((_3053 * _3068) + _3038)) + 9.9999999392252902907785028219223e-09) + (((_3067 * _3068) + _3038) * _3053))) * _3067;
                        float _4357 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0));
                        float _3089 = (((_3039 * 3.1415927410125732421875) * (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0)))) / ((_3061 * _3061) * ((_3004 * 2.1991131305694580078125) + 3.141590118408203125))) * _2993;
                        _2846 = (_3008 * _2956.x) + _2914;
                        _2847 = (_3008 * _2956.y) + _2915;
                        _2848 = (_3008 * _2956.z) + _2916;
                        _2843 = (_3089 * _2973.x) + _2911;
                        _2844 = (_3089 * _2973.y) + _2912;
                        _2845 = (_3089 * _2973.z) + _2913;
                        if (_2918 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2911 = _2843;
                            _2912 = _2844;
                            _2913 = _2845;
                            _2914 = _2846;
                            _2915 = _2847;
                            _2916 = _2848;
                            _2917 = _2918;
                        }
                    }
                    frontier_phi_63_pred = _2848;
                    frontier_phi_63_pred_1 = _2847;
                    frontier_phi_63_pred_2 = _2846;
                    frontier_phi_63_pred_3 = _2845;
                    frontier_phi_63_pred_4 = _2844;
                    frontier_phi_63_pred_5 = _2843;
                }
                _2654 = frontier_phi_63_pred;
                _2652 = frontier_phi_63_pred_1;
                _2650 = frontier_phi_63_pred_2;
                _2648 = frontier_phi_63_pred_3;
                _2646 = frontier_phi_63_pred_4;
                _2644 = frontier_phi_63_pred_5;
                uint _2794 = _2793 + 1u;
                if (_2794 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2787 = _2644;
                    _2788 = _2646;
                    _2789 = _2648;
                    _2790 = _2650;
                    _2791 = _2652;
                    _2792 = _2654;
                    _2793 = _2794;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2643 = _2644;
            _2645 = _2646;
            _2647 = _2648;
            _2649 = _2650;
            _2651 = _2652;
            _2653 = _2654;
        }
        uvec4 _2657 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2658 = _2657.z;
        uint _2660 = (_2658 >> 8u) & 15u;
        float _2755;
        float _2757;
        float _2759;
        float _2761;
        float _2763;
        float _2765;
        if (((4294967295u << _2660) & _2543) == 0u)
        {
            _2755 = _2643;
            _2757 = _2645;
            _2759 = _2647;
            _2761 = _2649;
            _2763 = _2651;
            _2765 = _2653;
        }
        else
        {
            float _2780 = inversesqrt(dot(vec3(_2497, _2498, _2499), vec3(_2497, _2498, _2499)));
            float _2781 = _2780 * _2497;
            float _2782 = _2780 * _2498;
            float _2783 = _2780 * _2499;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2660 < ((_2658 >> 12u) & 15u))
            {
                float _2756;
                float _2758;
                float _2760;
                float _2762;
                float _2764;
                float _2766;
                float _2894 = _2643;
                float _2895 = _2645;
                float _2896 = _2647;
                float _2897 = _2649;
                float _2898 = _2651;
                float _2899 = _2653;
                uint _2900 = _2660;
                uint _2909;
                bool _2910;
                for (;;)
                {
                    _2909 = texelFetch(g_lightClassification, int((((_2537 << 5u) + (_2523 << 9u)) + (_2900 << 2u)) >> 2u)).x;
                    _2910 = _2909 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2910)
                    {
                        frontier_phi_69_pred = _2899;
                        frontier_phi_69_pred_1 = _2898;
                        frontier_phi_69_pred_2 = _2897;
                        frontier_phi_69_pred_3 = _2896;
                        frontier_phi_69_pred_4 = _2895;
                        frontier_phi_69_pred_5 = _2894;
                    }
                    else
                    {
                        float _3094;
                        float _3095;
                        float _3096;
                        float _3097;
                        float _3098;
                        float _3099;
                        float _3389;
                        float _3390;
                        float _3391;
                        float _3392;
                        float _3393;
                        float _3394;
                        float _3107 = _2894;
                        float _3108 = _2895;
                        float _3109 = _2896;
                        float _3110 = _2897;
                        float _3111 = _2898;
                        float _3112 = _2899;
                        uint _3113 = _2909;
                        uint _3114;
                        vec4 _3139;
                        float _3140;
                        vec4 _3155;
                        vec3 _3167;
                        vec4 _3182;
                        vec4 _3198;
                        float _3245;
                        bool _3246;
                        for (;;)
                        {
                            uint _3124 = ((_2900 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3113));
                            _3114 = (_3113 + 4294967295u) & _3113;
                            uint _3126 = _3124 * 40u;
                            _3139 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3126)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3126 + 3u)).x));
                            _3140 = _3139.w;
                            uint _3142 = (_3124 * 40u) + 4u;
                            _3155 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3142)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 3u)).x));
                            uint _3157 = (_3124 * 40u) + 8u;
                            _3167 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3157)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 2u)).x));
                            uint _3169 = (_3124 * 40u) + 16u;
                            _3182 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3169)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3169 + 3u)).x));
                            uint _3185 = (_3124 * 40u) + 20u;
                            _3198 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3185)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3185 + 3u)).x));
                            uint _3201 = (_3124 * 40u) + 24u;
                            vec4 _3214 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3201)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3201 + 3u)).x));
                            uint _3220 = (_3124 * 40u) + 28u;
                            vec4 _3233 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3220)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 3u)).x));
                            _3245 = fma(_2499, _3233.z, fma(_2498, _3233.y, _3233.x * _2497)) + _3233.w;
                            _3246 = !((fma(_2499, _3214.z, fma(_2498, _3214.y, _3214.x * _2497)) + _3214.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3246)
                            {
                                float _3273 = _3139.x - _2497;
                                float _3274 = _3139.y - _2498;
                                float _3275 = _3139.z - _2499;
                                float _3276 = dot(vec3(_3273, _3274, _3275), vec3(_3273, _3274, _3275));
                                float _3279 = inversesqrt(_3276);
                                float _3280 = _3279 * _3273;
                                float _3281 = _3279 * _3274;
                                float _3282 = _3279 * _3275;
                                float _3286 = 1.0 - (_3276 / (_3140 * _3140));
                                float _4368 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                                float _3287 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
                                float _3291 = sqrt(_3276) * _3155.w;
                                float _3293 = 1.39999997615814208984375 / (_3291 + 1.39999997615814208984375);
                                float _3294 = _3293 * _3293;
                                float _3297 = ((1.0 - _3294) * dot(vec3(_3280, _3281, _3282), vec3(_798, _801, _804))) + _3294;
                                float _3300 = _3291 * _3291;
                                float _3304 = (fma(_2499, _3182.z, fma(_2498, _3182.y, _3182.x * _2497)) + _3182.w) / _3245;
                                float _3305 = (fma(_2499, _3198.z, fma(_2498, _3198.y, _3198.x * _2497)) + _3198.w) / _3245;
                                float _3309 = 1.0 - dot(vec2(_3304, _3305), vec2(_3304, _3305));
                                float _4384 = isnan(0.0) ? _3309 : (isnan(_3309) ? 0.0 : max(_3309, 0.0));
                                float _3310 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
                                float _3311 = _3310 * (((isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0))) * _3287) / ((_3300 * 0.699999988079071044921875) + 1.0));
                                float _3323 = exp2(log2(1.0 / ((_3300 * 3.5) + 5.0)) * 0.25);
                                float _3324 = 1.0 - _858;
                                float _3331 = sqrt(1.0 - ((1.0 - (_3324 * _3324)) * (1.0 - (_3323 * _3323))));
                                float _3332 = _3331 * _3331;
                                float _3333 = _3332 * _3332;
                                float _3334 = _3280 - _2781;
                                float _3335 = _3281 - _2782;
                                float _3336 = _3282 - _2783;
                                float _3340 = inversesqrt(dot(vec3(_3334, _3335, _3336), vec3(_3334, _3335, _3336)));
                                float _3344 = dot(vec3(_798, _801, _804), vec3((-0.0) - _2781, (-0.0) - _2782, (-0.0) - _2783));
                                float _4395 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                                float _3347 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
                                float _3348 = dot(vec3(_798, _801, _804), vec3(_3340 * _3334, _3340 * _3335, _3340 * _3336));
                                float _4406 = isnan(0.0) ? _3348 : (isnan(_3348) ? 0.0 : max(_3348, 0.0));
                                float _3351 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
                                float _3355 = ((_3351 * _3351) * (_3333 + (-1.0))) + 1.0;
                                float _3356 = _3293 * _3332;
                                float _3357 = _3356 * _3356;
                                float _3363 = ((1.0 - _3357) * dot(vec3(_798, _801, _804), vec3(_3280, _3281, _3282))) + _3357;
                                float _4417 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0));
                                float _3364 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
                                float _3365 = 1.0 - _3332;
                                float _3375 = (0.5 / (((_3364 * ((_3347 * _3365) + _3332)) + 9.9999999392252902907785028219223e-09) + (((_3364 * _3365) + _3332) * _3347))) * _3364;
                                float _4428 = isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0));
                                float _3385 = (_3310 * _3287) * (((_3333 * 3.1415927410125732421875) * (isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0)))) / ((_3355 * _3355) * ((_3300 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3311 * _3155.z;
                                frontier_phi_75_pred_1 = _3311 * _3155.y;
                                frontier_phi_75_pred_2 = _3311 * _3155.x;
                                frontier_phi_75_pred_3 = _3385 * _3167.z;
                                frontier_phi_75_pred_4 = _3385 * _3167.y;
                                frontier_phi_75_pred_5 = _3385 * _3167.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3394 = frontier_phi_75_pred;
                            _3393 = frontier_phi_75_pred_1;
                            _3392 = frontier_phi_75_pred_2;
                            _3391 = frontier_phi_75_pred_3;
                            _3390 = frontier_phi_75_pred_4;
                            _3389 = frontier_phi_75_pred_5;
                            _3097 = _3392 + _3110;
                            _3098 = _3393 + _3111;
                            _3099 = _3394 + _3112;
                            _3094 = _3389 + _3107;
                            _3095 = _3390 + _3108;
                            _3096 = _3391 + _3109;
                            if (_3114 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3107 = _3094;
                                _3108 = _3095;
                                _3109 = _3096;
                                _3110 = _3097;
                                _3111 = _3098;
                                _3112 = _3099;
                                _3113 = _3114;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3099;
                        frontier_phi_69_pred_1 = _3098;
                        frontier_phi_69_pred_2 = _3097;
                        frontier_phi_69_pred_3 = _3096;
                        frontier_phi_69_pred_4 = _3095;
                        frontier_phi_69_pred_5 = _3094;
                    }
                    _2766 = frontier_phi_69_pred;
                    _2764 = frontier_phi_69_pred_1;
                    _2762 = frontier_phi_69_pred_2;
                    _2760 = frontier_phi_69_pred_3;
                    _2758 = frontier_phi_69_pred_4;
                    _2756 = frontier_phi_69_pred_5;
                    uint _2901 = _2900 + 1u;
                    if (_2901 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2894 = _2756;
                        _2895 = _2758;
                        _2896 = _2760;
                        _2897 = _2762;
                        _2898 = _2764;
                        _2899 = _2766;
                        _2900 = _2901;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2766;
                frontier_phi_57_58_ladder_1 = _2764;
                frontier_phi_57_58_ladder_2 = _2762;
                frontier_phi_57_58_ladder_3 = _2760;
                frontier_phi_57_58_ladder_4 = _2758;
                frontier_phi_57_58_ladder_5 = _2756;
            }
            else
            {
                frontier_phi_57_58_ladder = _2653;
                frontier_phi_57_58_ladder_1 = _2651;
                frontier_phi_57_58_ladder_2 = _2649;
                frontier_phi_57_58_ladder_3 = _2647;
                frontier_phi_57_58_ladder_4 = _2645;
                frontier_phi_57_58_ladder_5 = _2643;
            }
            _2755 = frontier_phi_57_58_ladder_5;
            _2757 = frontier_phi_57_58_ladder_4;
            _2759 = frontier_phi_57_58_ladder_3;
            _2761 = frontier_phi_57_58_ladder_2;
            _2763 = frontier_phi_57_58_ladder_1;
            _2765 = frontier_phi_57_58_ladder;
        }
        float _2770 = isnan(1.0) ? _842 : (isnan(_842) ? 1.0 : min(_842, 1.0));
        _2555 = (_2770 * _2761) + _2011;
        _2557 = (_2770 * _2763) + _2013;
        _2559 = (_2770 * _2765) + _2015;
        _2561 = ((_2755 * 0.039999999105930328369140625) * _2770) + _2341;
        _2563 = ((_2757 * 0.039999999105930328369140625) * _2770) + _2343;
        _2565 = ((_2759 * 0.039999999105930328369140625) * _2770) + _2345;
    }
    else
    {
        _2555 = _2011;
        _2557 = _2013;
        _2559 = _2015;
        _2561 = _2341;
        _2563 = _2343;
        _2565 = _2345;
    }
    float _4444 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _4455 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _4466 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    uint _2585 = _817 + 6u;
    float _2593 = _779 / cbSceneParam._m0[86u].x;
    float _2594 = _780 / cbSceneParam._m0[86u].y;
    vec4 _2608 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2593, _2594, (log2((isnan(cbSceneParam._m0[77u].w) ? _714 : (isnan(_714) ? cbSceneParam._m0[77u].w : min(_714, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2610 = _2608.x;
    float _2611 = _2608.y;
    float _2612 = _2608.z;
    float _2613 = _2608.w;
    float _2705;
    float _2707;
    float _2709;
    float _2711;
    if (_714 > cbSceneParam._m0[78u].w)
    {
        float _2668 = isnan(_714) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _714 : min(cbSceneParam._m0[80u].w, _714));
        float _2669 = _2668 / _714;
        float _2680 = _2669 * _764;
        float _2681 = _765 * _2669;
        float _2682 = (-0.0) - _2681;
        float _2683 = _2669 * _766;
        float _2685 = (cbSceneParam._m0[77u].w * _2682) / _2668;
        float _2686 = _2685 + cbSceneParam._m0[79u].w;
        float _2687 = cbSceneParam._m0[79u].w - _2681;
        float _2693 = sqrt(((_2680 * _2680) + (_2681 * _2681)) + (_2683 * _2683));
        float _2696 = (1.0 - (cbSceneParam._m0[77u].w / _2668)) * _2693;
        float _2701 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2703 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2856;
        if (abs((_2682 - _2685) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2856 = ((((_2686 > 0.0) ? exp2(_2701 * _2686) : (2.0 - exp2(_2703 * _2686))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2696;
        }
        else
        {
            float _2816 = 1.0 / cbSceneParam._m0[80u].x;
            float _2817 = isnan(_2687) ? _2686 : (isnan(_2686) ? _2687 : max(_2686, _2687));
            float _2818 = isnan(_2687) ? _2686 : (isnan(_2686) ? _2687 : min(_2686, _2687));
            float _2827 = isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : min(_2817, 0.0));
            float _2828 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : min(_2818, 0.0));
            _2856 = ((abs(_2693 / _2682) * cbSceneParam._m0[80u].y) * ((((_2827 - _2828) * 2.0) - ((exp2(_2701 * (isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0)))) - exp2(_2701 * (isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0))))) * _2816)) - ((exp2(_2703 * _2827) - exp2(_2703 * _2828)) * _2816))) + (_2696 * cbSceneParam._m0[80u].z);
        }
        vec4 _2858 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2593, _2594, 1.0), 0.0);
        float _2867 = exp2((_2856 * (-1.44269502162933349609375)) * (1.0 - _2858.w));
        float _2868 = log2(_2867);
        float _2884 = log2(_2613);
        _2705 = (exp2(_2884 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2868 * cbSceneParam._m0[78u].x)) * _2858.x) / cbSceneParam._m0[78u].x)) + _2610;
        _2707 = (exp2(_2884 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2868 * cbSceneParam._m0[78u].y)) * _2858.y) / cbSceneParam._m0[78u].y)) + _2611;
        _2709 = (exp2(_2884 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2868 * cbSceneParam._m0[78u].z)) * _2858.z) / cbSceneParam._m0[78u].z)) + _2612;
        _2711 = _2867 * _2613;
    }
    else
    {
        _2705 = _2610;
        _2707 = _2611;
        _2709 = _2612;
        _2711 = _2613;
    }
    float _2723 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2724 = _2723 == 3.0;
    float _2725 = log2(_2711);
    float _2732 = exp2(_2725 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0))) * (_2555 + ((isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0))) * _842))) + ((_2561 + ((isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0))) * _1649)) * cbPerFrame._m0[3u].x));
    float _2733 = exp2(_2725 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0))) * (_2557 + ((isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0))) * _842))) + ((_2563 + ((isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0))) * _1649)) * cbPerFrame._m0[3u].x));
    float _2734 = exp2(_2725 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0))) * (_2559 + ((isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0))) * _842))) + ((_2565 + ((isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0))) * _1649)) * cbPerFrame._m0[3u].x));
    float _2743 = (_2723 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2743 * (_2724 ? _2732 : (_2732 + (cbSceneParam._m0[72u].w * _2705)));
    SV_Target.y = _2743 * (_2724 ? _2733 : (_2733 + (cbSceneParam._m0[72u].w * _2707)));
    SV_Target.z = _2743 * (_2724 ? _2734 : (_2734 + (cbSceneParam._m0[72u].w * _2709)));
    SV_Target.w = cbInstanceData._m0[_2585].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2585].w;
}


