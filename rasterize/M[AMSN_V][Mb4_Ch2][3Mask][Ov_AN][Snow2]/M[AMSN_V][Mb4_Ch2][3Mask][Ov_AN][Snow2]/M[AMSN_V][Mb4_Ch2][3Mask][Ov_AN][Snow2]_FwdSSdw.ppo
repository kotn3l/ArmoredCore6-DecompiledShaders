#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_10;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_6;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_8;
layout(set = 0, binding = 13) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1216;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = _220 * NORMAL.x;
    float _222 = _220 * NORMAL.y;
    float _223 = _220 * NORMAL.z;
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _235;
    float _236;
    float _237;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _235 = (-0.0) - _221;
        _236 = (-0.0) - _222;
        _237 = (-0.0) - _223;
    }
    else
    {
        _235 = _221;
        _236 = _222;
        _237 = _223;
    }
    vec4 _261 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _290 = cbMtdParam._m0[14u].w * texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w)).x;
    float _298 = ((cbMtdParam._m0[14u].x * (-1.39999997615814208984375)) * (((1.0 - _261.x) * 2.0) - _290)) + 1.0;
    float _3551 = isnan(0.0) ? _298 : (isnan(_298) ? 0.0 : max(_298, 0.0));
    float _299 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
    vec4 _311 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _328 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _330 = _328.x;
    float _331 = _328.y;
    float _332 = _328.z;
    float _339 = ((_311.x - _330) * _299) + _330;
    float _340 = ((_311.y - _331) * _299) + _331;
    float _341 = ((_311.z - _332) * _299) + _332;
    float _347 = (((((1.0 - _261.y) * 2.0) - _290) * (-1.39999997615814208984375)) * cbMtdParam._m0[15u].y) + 1.0;
    float _3562 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _348 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
    vec4 _360 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _371 = ((_360.x - _339) * _348) + _339;
    float _372 = ((_360.y - _340) * _348) + _340;
    float _373 = ((_360.z - _341) * _348) + _341;
    float _379 = (((((1.0 - _261.z) * 2.0) - _290) * (-1.39999997615814208984375)) * cbMtdParam._m0[15u].x) + 1.0;
    float _3573 = isnan(0.0) ? _379 : (isnan(_379) ? 0.0 : max(_379, 0.0));
    float _380 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
    vec4 _393 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _406 = ((_393.z - _373) * _380) + _373;
    float _409 = ((((_393.x - _371) * _380) + _371) * 2.0) + (-1.0);
    float _411 = ((((_393.y - _372) * _380) + _372) * 2.0) + (-1.0);
    float _412 = dot(vec2(_409, _411), vec2(_409, _411));
    float _3584 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _417 = sqrt(1.0 - (isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0))));
    float _418 = fma(_417, _235, 0.0);
    float _419 = fma(_417, _236, 0.0);
    float _420 = fma(_417, _237, 0.0);
    float _424 = inversesqrt(dot(vec3(_418, _419, _420), vec3(_418, _419, _420)));
    float _432 = cbMtdParam._m0[14u].y + dot(vec4(_424 * _418, _424 * _419, _424 * _420, 0.0), vec4(cbMtdParam._m0[15u].zw, cbMtdParam._m0[16u].x, 0.0));
    float _3595 = isnan(0.0) ? _432 : (isnan(_432) ? 0.0 : max(_432, 0.0));
    float _433 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
    vec4 _451 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _456 = _451.x * cbMtdParam._m0[10u].x;
    float _457 = _451.y * cbMtdParam._m0[10u].y;
    float _458 = _451.z * cbMtdParam._m0[10u].z;
    vec4 _476 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    float _490 = (((_476.x * cbMtdParam._m0[11u].x) - _456) * _299) + _456;
    float _491 = (((_476.y * cbMtdParam._m0[11u].y) - _457) * _299) + _457;
    float _492 = (((_476.z * cbMtdParam._m0[11u].z) - _458) * _299) + _458;
    vec4 _509 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _523 = (((_509.x * cbMtdParam._m0[12u].x) - _490) * _348) + _490;
    float _524 = (((_509.y * cbMtdParam._m0[12u].y) - _491) * _348) + _491;
    float _525 = (((_509.z * cbMtdParam._m0[12u].z) - _492) * _348) + _492;
    vec4 _543 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    vec4 _577 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _585 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * ((((_543.x * cbMtdParam._m0[13u].x) - _523) * _380) + _523)) * _577.x;
    float _588 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * ((((_543.y * cbMtdParam._m0[13u].y) - _524) * _380) + _524)) * _577.y;
    float _591 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * ((((_543.z * cbMtdParam._m0[13u].z) - _525) * _380) + _525)) * _577.z;
    vec4 _603 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _614 = ((_603.x - _585) * _433) + _585;
    float _615 = ((_603.y - _588) * _433) + _588;
    float _616 = ((_603.z - _591) * _433) + _591;
    vec4 _629 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _636 = (_629.x * 2.0) + (-1.0);
    float _637 = (_629.y * 2.0) + (-1.0);
    float _638 = dot(vec2(_636, _637), vec2(_636, _637));
    float _3606 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _646 = ((_629.z - _406) * _433) + _406;
    float _655 = ((sqrt(1.0 - (isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0)))) - _417) * _433) + _417;
    vec4 _669 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _679 = (((_636 - _409) * _433) + _409) + (((_669.x * 2.0) + (-1.0)) * cbMtdParam._m0[14u].z);
    float _680 = (((_637 - _411) * _433) + _411) + (((_669.y * 2.0) + (-1.0)) * cbMtdParam._m0[14u].z);
    float _683 = fma(_655, _235, fma(_680, _227 * TANGENT.x, (_213 * _205) * _679));
    float _686 = fma(_655, _236, fma(_680, _227 * TANGENT.y, (_213 * _206) * _679));
    float _689 = fma(_655, _237, fma(_680, _227 * TANGENT.z, (_213 * _207) * _679));
    float _693 = inversesqrt(dot(vec3(_683, _686, _689), vec3(_683, _686, _689)));
    float _694 = _693 * _683;
    float _695 = _693 * _686;
    float _696 = _693 * _689;
    float _3617 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _697 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
    float _3628 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _3639 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _3650 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _716 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _756 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _766 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _756);
    float _767 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _756);
    float _768 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _756);
    float _772 = inversesqrt(dot(vec3(_766, _767, _768), vec3(_766, _767, _768)));
    float _773 = _766 * _772;
    float _774 = _767 * _772;
    float _775 = _768 * _772;
    float _781 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _782 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _800 = fma(_696, cbSceneParam._m0[5u].z, fma(_695, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _694));
    float _803 = fma(_696, cbSceneParam._m0[6u].z, fma(_695, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _694));
    float _806 = fma(_696, cbSceneParam._m0[7u].z, fma(_695, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _694));
    uint _819 = uint(roundEven(NORMAL.w)) * 13u;
    uint _821 = (_819 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _827 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0)))) * cbInstanceData._m0[_821].x;
    float _828 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0)))) * cbInstanceData._m0[_821].y;
    float _829 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0)))) * cbInstanceData._m0[_821].z;
    float _3661 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _830 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
    float _3672 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _831 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
    float _3683 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _832 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
    vec4 _841 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _781, cbSceneParam._m0[86u].y * _782));
    float _844 = _841.x * TEXCOORD_4;
    float _845 = dot(vec3(_694, _695, _696), vec3(_773, _774, _775));
    float _848 = _845 * 2.0;
    float _852 = (_848 * _694) - _773;
    float _853 = (_848 * _695) - _774;
    float _854 = (_848 * _696) - _775;
    float _858 = abs(dot(vec3(_773, _774, _775), vec3(_694, _695, _696)));
    float _3694 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _860 = sqrt(_697);
    float _873 = exp2((_860 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_860 * 3.0));
    float _905 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _909 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _913 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1215;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _940 = fma(_913, cbModelParam._m0[26u].z, fma(_909, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _905));
        float _944 = fma(_913, cbModelParam._m0[27u].z, fma(_909, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _905));
        float _948 = fma(_913, cbModelParam._m0[28u].z, fma(_909, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _905));
        float _973 = _905 + _694;
        float _974 = _909 + _695;
        float _975 = _913 + _696;
        float _985 = fma(_975, cbModelParam._m0[26u].z, fma(_974, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _973)) - _940;
        float _986 = fma(_975, cbModelParam._m0[27u].z, fma(_974, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _973)) - _944;
        float _987 = fma(_975, cbModelParam._m0[28u].z, fma(_974, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _973)) - _948;
        float _991 = inversesqrt(dot(vec3(_985, _986, _987), vec3(_985, _986, _987)));
        float _1004 = ((_991 * _985) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_940 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1005 = ((_991 * _986) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_944 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1006 = ((_991 * _987) / cbModelParam._m0[34u].z) + ((((((_948 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1009 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1004, _1005, _1006), 0.0);
        vec4 _1016 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1004, _1005, _1006), 0.0);
        vec4 _1023 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1004, _1005, _1006), 0.0);
        vec4 _1030 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1004, _1005, _1006), 0.0);
        float _1043 = exp2((_1009.w + (-0.5)) * 20.0) * 2.0;
        float _1044 = _1043 * (_1009.x + (-0.5));
        float _1045 = _1043 * (_1009.y + (-0.5));
        float _1046 = _1043 * (_1009.z + (-0.5));
        float _1053 = exp2((_1016.w + (-0.5)) * 20.0) * 2.0;
        float _1054 = _1053 * (_1016.x + (-0.5));
        float _1055 = _1053 * (_1016.y + (-0.5));
        float _1056 = _1053 * (_1016.z + (-0.5));
        float _1063 = exp2((_1023.w + (-0.5)) * 20.0) * 2.0;
        float _1064 = _1063 * (_1023.x + (-0.5));
        float _1065 = _1063 * (_1023.y + (-0.5));
        float _1066 = _1063 * (_1023.z + (-0.5));
        float _1073 = exp2((_1030.w + (-0.5)) * 20.0) * 2.0;
        float _1074 = _1073 * (_1030.x + (-0.5));
        float _1075 = _1073 * (_1030.y + (-0.5));
        float _1076 = _1073 * (_1030.z + (-0.5));
        float _1077 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1078 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1079 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1080 = _1044 * 0.5;
        float _1081 = _1054 * 0.5;
        float _1082 = _1064 * 0.5;
        float _1083 = dot(vec3(_1080, _1081, _1082), vec3(_1080, _1081, _1082));
        float _1088 = (_1083 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1083);
        float _1097 = (dot(vec3(_694, _695, _696), vec3(_1088 * _1080, _1088 * _1081, _1088 * _1082)) + 1.0) * 0.5;
        float _3720 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1107 = sqrt(((_1081 * _1081) + (_1080 * _1080)) + (_1082 * _1082)) / (_1077 + 9.9999997473787516355514526367188e-06);
        float _3731 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1109 = _1108 * 2.0;
        float _1113 = (1.0 - _1108) / (_1108 + 1.0);
        float _3742 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1123 = ((((1.0 - _1114) * (_1109 + 2.0)) * exp2(log2(isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * (_1109 + 1.0))) + _1114) * _1077;
        float _1124 = _1045 * 0.5;
        float _1125 = _1055 * 0.5;
        float _1126 = _1065 * 0.5;
        float _1127 = dot(vec3(_1124, _1125, _1126), vec3(_1124, _1125, _1126));
        float _1132 = (_1127 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1127);
        float _1140 = (dot(vec3(_694, _695, _696), vec3(_1132 * _1124, _1132 * _1125, _1132 * _1126)) + 1.0) * 0.5;
        float _3753 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1149 = sqrt(((_1125 * _1125) + (_1124 * _1124)) + (_1126 * _1126)) / (_1078 + 9.9999997473787516355514526367188e-06);
        float _3764 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
        float _1151 = _1150 * 2.0;
        float _1155 = (1.0 - _1150) / (_1150 + 1.0);
        float _3775 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _1165 = ((((1.0 - _1156) * (_1151 + 2.0)) * exp2(log2(isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) * (_1151 + 1.0))) + _1156) * _1078;
        float _1166 = _1046 * 0.5;
        float _1167 = _1056 * 0.5;
        float _1168 = _1066 * 0.5;
        float _1169 = dot(vec3(_1166, _1167, _1168), vec3(_1166, _1167, _1168));
        float _1174 = (_1169 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1169);
        float _1182 = (dot(vec3(_694, _695, _696), vec3(_1174 * _1166, _1174 * _1167, _1174 * _1168)) + 1.0) * 0.5;
        float _3786 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1191 = sqrt(((_1167 * _1167) + (_1166 * _1166)) + (_1168 * _1168)) / (_1079 + 9.9999997473787516355514526367188e-06);
        float _3797 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0));
        float _1193 = _1192 * 2.0;
        float _1197 = (1.0 - _1192) / (_1192 + 1.0);
        float _3808 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
        float _1207 = ((((1.0 - _1198) * (_1193 + 2.0)) * exp2(log2(isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0))) * (_1193 + 1.0))) + _1198) * _1079;
        _1215 = _1046;
        _1217 = _1045;
        _1218 = _1044;
        _1219 = _1056;
        _1220 = _1055;
        _1221 = _1054;
        _1222 = _1066;
        _1223 = _1065;
        _1224 = _1064;
        _1225 = _1079;
        _1226 = _1078;
        _1227 = _1077;
        _1228 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0)));
        _1229 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0)));
        _1230 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0)));
    }
    else
    {
        _1215 = _1216;
        _1217 = _1216;
        _1218 = _1216;
        _1219 = _1216;
        _1220 = _1216;
        _1221 = _1216;
        _1222 = _1216;
        _1223 = _1216;
        _1224 = _1216;
        _1225 = _1216;
        _1226 = _1216;
        _1227 = _1216;
        _1228 = 0.0;
        _1229 = 0.0;
        _1230 = 0.0;
    }
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1256 = fma(_913, cbModelParam._m0[30u].z, fma(_909, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _905));
        float _1260 = fma(_913, cbModelParam._m0[31u].z, fma(_909, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _905));
        float _1264 = fma(_913, cbModelParam._m0[32u].z, fma(_909, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _905));
        float _1287 = _905 + _694;
        float _1288 = _909 + _695;
        float _1289 = _913 + _696;
        float _1299 = fma(_1289, cbModelParam._m0[30u].z, fma(_1288, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1287)) - _1256;
        float _1300 = fma(_1289, cbModelParam._m0[31u].z, fma(_1288, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1287)) - _1260;
        float _1301 = fma(_1289, cbModelParam._m0[32u].z, fma(_1288, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1287)) - _1264;
        float _1305 = inversesqrt(dot(vec3(_1299, _1300, _1301), vec3(_1299, _1300, _1301)));
        float _1318 = ((_1305 * _1299) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1256 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1319 = ((_1305 * _1300) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1260 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1320 = ((_1305 * _1301) / cbModelParam._m0[35u].z) + ((((((_1264 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1322 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1318, _1319, _1320), 0.0);
        vec4 _1329 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1318, _1319, _1320), 0.0);
        vec4 _1336 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1318, _1319, _1320), 0.0);
        vec4 _1343 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1318, _1319, _1320), 0.0);
        float _1355 = exp2((_1322.w + (-0.5)) * 20.0) * 2.0;
        float _1356 = _1355 * (_1322.x + (-0.5));
        float _1357 = _1355 * (_1322.y + (-0.5));
        float _1358 = _1355 * (_1322.z + (-0.5));
        float _1365 = exp2((_1329.w + (-0.5)) * 20.0) * 2.0;
        float _1366 = _1365 * (_1329.x + (-0.5));
        float _1367 = _1365 * (_1329.y + (-0.5));
        float _1368 = _1365 * (_1329.z + (-0.5));
        float _1375 = exp2((_1336.w + (-0.5)) * 20.0) * 2.0;
        float _1376 = _1375 * (_1336.x + (-0.5));
        float _1377 = _1375 * (_1336.y + (-0.5));
        float _1378 = _1375 * (_1336.z + (-0.5));
        float _1385 = exp2((_1343.w + (-0.5)) * 20.0) * 2.0;
        float _1386 = _1385 * (_1343.x + (-0.5));
        float _1387 = _1385 * (_1343.y + (-0.5));
        float _1388 = _1385 * (_1343.z + (-0.5));
        float _1389 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1390 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1391 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1392 = _1356 * 0.5;
        float _1393 = _1366 * 0.5;
        float _1394 = _1376 * 0.5;
        float _1395 = dot(vec3(_1392, _1393, _1394), vec3(_1392, _1393, _1394));
        float _1400 = (_1395 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1395);
        float _1408 = (dot(vec3(_694, _695, _696), vec3(_1400 * _1392, _1400 * _1393, _1400 * _1394)) + 1.0) * 0.5;
        float _3849 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1417 = sqrt(((_1393 * _1393) + (_1392 * _1392)) + (_1394 * _1394)) / (_1389 + 9.9999997473787516355514526367188e-06);
        float _3860 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
        float _1419 = _1418 * 2.0;
        float _1423 = (1.0 - _1418) / (_1418 + 1.0);
        float _3871 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1433 = ((((1.0 - _1424) * (_1419 + 2.0)) * exp2(log2(isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * (_1419 + 1.0))) + _1424) * _1389;
        float _1434 = _1357 * 0.5;
        float _1435 = _1367 * 0.5;
        float _1436 = _1377 * 0.5;
        float _1437 = dot(vec3(_1434, _1435, _1436), vec3(_1434, _1435, _1436));
        float _1442 = (_1437 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1437);
        float _1450 = (dot(vec3(_694, _695, _696), vec3(_1442 * _1434, _1442 * _1435, _1442 * _1436)) + 1.0) * 0.5;
        float _3882 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1459 = sqrt(((_1435 * _1435) + (_1434 * _1434)) + (_1436 * _1436)) / (_1390 + 9.9999997473787516355514526367188e-06);
        float _3893 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
        float _1461 = _1460 * 2.0;
        float _1465 = (1.0 - _1460) / (_1460 + 1.0);
        float _3904 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1475 = ((((1.0 - _1466) * (_1461 + 2.0)) * exp2(log2(isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * (_1461 + 1.0))) + _1466) * _1390;
        float _1476 = _1358 * 0.5;
        float _1477 = _1368 * 0.5;
        float _1478 = _1378 * 0.5;
        float _1479 = dot(vec3(_1476, _1477, _1478), vec3(_1476, _1477, _1478));
        float _1484 = (_1479 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1479);
        float _1492 = (dot(vec3(_694, _695, _696), vec3(_1484 * _1476, _1484 * _1477, _1484 * _1478)) + 1.0) * 0.5;
        float _3915 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1501 = sqrt(((_1477 * _1477) + (_1476 * _1476)) + (_1478 * _1478)) / (_1391 + 9.9999997473787516355514526367188e-06);
        float _3926 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1502 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
        float _1503 = _1502 * 2.0;
        float _1507 = (1.0 - _1502) / (_1502 + 1.0);
        float _3937 = isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0));
        float _1508 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
        float _1517 = ((((1.0 - _1508) * (_1503 + 2.0)) * exp2(log2(isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0))) * (_1503 + 1.0))) + _1508) * _1391;
        _1525 = _1358;
        _1526 = _1357;
        _1527 = _1356;
        _1528 = _1368;
        _1529 = _1367;
        _1530 = _1366;
        _1531 = _1378;
        _1532 = _1377;
        _1533 = _1376;
        _1534 = _1391;
        _1535 = _1390;
        _1536 = _1389;
        _1537 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)));
        _1538 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)));
        _1539 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0)));
    }
    else
    {
        _1525 = _1216;
        _1526 = _1216;
        _1527 = _1216;
        _1528 = _1216;
        _1529 = _1216;
        _1530 = _1216;
        _1531 = _1216;
        _1532 = _1216;
        _1533 = _1216;
        _1534 = _1216;
        _1535 = _1216;
        _1536 = _1216;
        _1537 = 0.0;
        _1538 = 0.0;
        _1539 = 0.0;
    }
    float _1549 = (cbModelParam._m0[1u].x * (_1537 - _1228)) + _1228;
    float _1550 = (cbModelParam._m0[1u].x * (_1538 - _1229)) + _1229;
    float _1551 = (cbModelParam._m0[1u].x * (_1539 - _1230)) + _1230;
    float _1572 = fma(_1551, cbSceneParam._m0[89u].z, fma(_1550, cbSceneParam._m0[89u].y, _1549 * cbSceneParam._m0[89u].x));
    float _1575 = fma(_1551, cbSceneParam._m0[90u].z, fma(_1550, cbSceneParam._m0[90u].y, _1549 * cbSceneParam._m0[90u].x));
    float _1578 = fma(_1551, cbSceneParam._m0[91u].z, fma(_1550, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1549));
    float _1593 = _852 * 0.5;
    float _1594 = _853 * 0.5;
    float _1595 = _854 * 0.5;
    float _1596 = dot(vec4(_1593, _1594, _1595, 1.0), vec4(_1527, _1530, _1533, _1536));
    float _1599 = dot(vec4(_1593, _1594, _1595, 1.0), vec4(_1526, _1529, _1532, _1535));
    float _1602 = dot(vec4(_1593, _1594, _1595, 1.0), vec4(_1525, _1528, _1531, _1534));
    float _1636;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1609 = dot(vec4(_1593, _1594, _1595, 1.0), vec4(_1215, _1219, _1222, _1225));
        float _1613 = dot(vec4(_1593, _1594, _1595, 1.0), vec4(_1217, _1220, _1223, _1226));
        float _1617 = dot(vec4(_1593, _1594, _1595, 1.0), vec4(_1218, _1221, _1224, _1227));
        float _1624 = dot(vec4(cbModelParam._m0[39u]), vec4(_1593, _1594, _1595, 1.0));
        _1636 = dot(vec3(isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)), isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0)), isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1624) ? 0.0 : (isnan(0.0) ? _1624 : max(0.0, _1624))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1636 = 1.0;
    }
    float _1647;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1638 = dot(vec4(cbModelParam._m0[40u]), vec4(_1593, _1594, _1595, 1.0));
        _1647 = dot(vec3(isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0)), isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0)), isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1638) ? 0.0 : (isnan(0.0) ? _1638 : max(0.0, _1638))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1647 = 1.0;
    }
    float _1651 = (_1647 * cbModelParam._m0[1u].x) + (_1636 * (1.0 - cbModelParam._m0[1u].x));
    float _1661 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _697);
    float _1662 = isnan(_1661) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1661 : min(cbModelParam._m0[25u].z, _1661));
    float _1742;
    float _1744;
    float _1746;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1709 = fma(_913, cbModelParam._m0[13u].z, fma(_909, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _905)) + cbModelParam._m0[13u].w;
        float _1713 = fma(_913, cbModelParam._m0[14u].z, fma(_909, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _905)) + cbModelParam._m0[14u].w;
        float _1717 = fma(_913, cbModelParam._m0[15u].z, fma(_909, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _905)) + cbModelParam._m0[15u].w;
        float _1720 = fma(_854, cbModelParam._m0[13u].z, fma(_853, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _852));
        float _1723 = fma(_854, cbModelParam._m0[14u].z, fma(_853, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _852));
        float _1726 = fma(_854, cbModelParam._m0[15u].z, fma(_853, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _852));
        float _1754;
        if (_1720 > 0.0)
        {
            _1754 = abs((1.0 - _1709) / _1720);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1720 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1709 + 1.0) / _1720);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1754 = frontier_phi_16_14_ladder;
        }
        float _1979;
        if (_1723 > 0.0)
        {
            _1979 = abs((1.0 - _1713) / _1723);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1723 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1713 + 1.0) / _1723);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1979 = frontier_phi_25_21_ladder;
        }
        float _2225;
        if (_1726 > 0.0)
        {
            _2225 = abs((1.0 - _1717) / _1726);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1726 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1717 + 1.0) / _1726);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2225 = frontier_phi_37_32_ladder;
        }
        float _2227 = isnan(_1979) ? _1754 : (isnan(_1754) ? _1979 : min(_1754, _1979));
        float _2228 = isnan(_2225) ? _2227 : (isnan(_2227) ? _2225 : min(_2227, _2225));
        float _2232 = (_2228 * _1720) + _1709;
        float _2233 = (_2228 * _1723) + _1713;
        float _2234 = (_2228 * _1726) + _1717;
        float _2235 = _2228 * 9.9999997473787516355514526367188e-05;
        float _2237 = (-1.0) - _2235;
        float _2239 = _2235 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2234 > _2239) || ((_2234 < _2237) || ((_2233 > _2239) || ((_2233 < _2237) || ((_2232 < _2237) || (_2232 > _2239))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2358 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2234, cbModelParam._m0[9u].z, fma(_2233, cbModelParam._m0[9u].y, _2232 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2234, cbModelParam._m0[10u].z, fma(_2233, cbModelParam._m0[10u].y, _2232 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2234, cbModelParam._m0[11u].z, fma(_2233, cbModelParam._m0[11u].y, _2232 * cbModelParam._m0[11u].x))), _1662);
            frontier_phi_15_37_ladder = _2358.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2358.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2358.x * cbModelParam._m0[1u].y;
        }
        _1742 = frontier_phi_15_37_ladder_2;
        _1744 = frontier_phi_15_37_ladder_1;
        _1746 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1730 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_852, _853, _854), _1662);
        _1742 = _1730.x * cbModelParam._m0[1u].y;
        _1744 = _1730.y * cbModelParam._m0[1u].y;
        _1746 = _1730.z * cbModelParam._m0[1u].y;
    }
    float _1750 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _697);
    float _1751 = isnan(_1750) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1750 : min(cbModelParam._m0[25u].w, _1750));
    float _1844;
    float _1846;
    float _1848;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1808 = fma(_913, cbModelParam._m0[21u].z, fma(_909, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _905)) + cbModelParam._m0[21u].w;
        float _1812 = fma(_913, cbModelParam._m0[22u].z, fma(_909, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _905)) + cbModelParam._m0[22u].w;
        float _1816 = fma(_913, cbModelParam._m0[23u].z, fma(_909, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _905)) + cbModelParam._m0[23u].w;
        float _1819 = fma(_854, cbModelParam._m0[21u].z, fma(_853, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _852));
        float _1822 = fma(_854, cbModelParam._m0[22u].z, fma(_853, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _852));
        float _1825 = fma(_854, cbModelParam._m0[23u].z, fma(_853, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _852));
        float _1984;
        if (_1819 > 0.0)
        {
            _1984 = abs((1.0 - _1808) / _1819);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1819 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1808 + 1.0) / _1819);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1984 = frontier_phi_27_23_ladder;
        }
        float _2252;
        if (_1822 > 0.0)
        {
            _2252 = abs((1.0 - _1812) / _1822);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1822 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1812 + 1.0) / _1822);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2252 = frontier_phi_39_34_ladder;
        }
        float _2457;
        if (_1825 > 0.0)
        {
            _2457 = abs((1.0 - _1816) / _1825);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1825 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1816 + 1.0) / _1825);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2457 = frontier_phi_48_45_ladder;
        }
        float _2459 = isnan(_2252) ? _1984 : (isnan(_1984) ? _2252 : min(_1984, _2252));
        float _2460 = isnan(_2457) ? _2459 : (isnan(_2459) ? _2457 : min(_2459, _2457));
        float _2464 = (_2460 * _1819) + _1808;
        float _2465 = (_2460 * _1822) + _1812;
        float _2466 = (_2460 * _1825) + _1816;
        float _2467 = _2460 * 9.9999997473787516355514526367188e-05;
        float _2468 = (-1.0) - _2467;
        float _2470 = _2467 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2466 > _2470) || ((_2466 < _2468) || ((_2465 > _2470) || ((_2465 < _2468) || ((_2464 < _2468) || (_2464 > _2470))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2664 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2466, cbModelParam._m0[17u].z, fma(_2465, cbModelParam._m0[17u].y, _2464 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2466, cbModelParam._m0[18u].z, fma(_2465, cbModelParam._m0[18u].y, _2464 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2466, cbModelParam._m0[19u].z, fma(_2465, cbModelParam._m0[19u].y, _2464 * cbModelParam._m0[19u].x))), _1751);
            frontier_phi_24_48_ladder = _2664.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2664.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2664.x * cbModelParam._m0[1u].z;
        }
        _1844 = frontier_phi_24_48_ladder_2;
        _1846 = frontier_phi_24_48_ladder_1;
        _1848 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1828 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_852, _853, _854), _1751);
        _1844 = _1828.x * cbModelParam._m0[1u].z;
        _1846 = _1828.y * cbModelParam._m0[1u].z;
        _1848 = _1828.z * cbModelParam._m0[1u].z;
    }
    float _1860 = ((((1.0 - _873) * ((_860 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_873 * _860)) * _844;
    float _1861 = _1860 * ((cbModelParam._m0[1u].w * (_1844 - _1742)) + _1742);
    float _1862 = _1860 * ((cbModelParam._m0[1u].w * (_1846 - _1744)) + _1744);
    float _1863 = _1860 * ((cbModelParam._m0[1u].w * (_1848 - _1746)) + _1746);
    float _1866 = fma(_1863, cbSceneParam._m0[89u].z, fma(_1862, cbSceneParam._m0[89u].y, _1861 * cbSceneParam._m0[89u].x));
    float _1869 = fma(_1863, cbSceneParam._m0[90u].z, fma(_1862, cbSceneParam._m0[90u].y, _1861 * cbSceneParam._m0[90u].x));
    float _1872 = fma(_1863, cbSceneParam._m0[91u].z, fma(_1862, cbSceneParam._m0[91u].y, _1861 * cbSceneParam._m0[91u].x));
    vec4 _1880 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_781, _782));
    float _1882 = _1880.w;
    float _1894 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1882);
    float _1895 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1882);
    float _1896 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1882);
    uvec4 _1900 = floatBitsToUint(cbInstanceData._m0[_819 + 5u]);
    uint _1902 = _1900.x * 14u;
    uint _1903 = _1902 + 13u;
    float _1910 = _844 + (-1.0);
    float _1915 = (cbLight._m0[_1903].x * _1910) + 1.0;
    float _1916 = (cbLight._m0[_1903].y * _1910) + 1.0;
    float _1917 = (cbLight._m0[_1903].z * _1910) + 1.0;
    float _1918 = (cbLight._m0[_1903].w * _1910) + 1.0;
    uint _1919 = _1902 + 5u;
    float _1925 = isnan(1.0) ? _1916 : (isnan(_1916) ? 1.0 : min(_1916, 1.0));
    uint _1929 = _1902 + 4u;
    float _1938 = isnan(1.0) ? _1915 : (isnan(_1915) ? 1.0 : min(_1915, 1.0));
    uint _1942 = _1902 | 1u;
    float _1953 = dot(vec3(cbLight._m0[_1902].xyz), vec3(_694, _695, _696));
    float _1956 = dot(vec3(cbLight._m0[_1942].xyz), vec3(_694, _695, _696));
    float _4073 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
    float _4084 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
    float _1961 = (isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0))) * 0.3183098733425140380859375;
    float _1963 = (isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0))) * 0.3183098733425140380859375;
    float _1970 = ((cbLight._m0[_1919].x * _1925) * _1963) + (((cbLight._m0[_1929].x * _1894) * _1938) * _1961);
    float _1971 = ((_1925 * cbLight._m0[_1919].y) * _1963) + (((cbLight._m0[_1929].y * _1895) * _1938) * _1961);
    float _1972 = ((_1925 * cbLight._m0[_1919].z) * _1963) + (((cbLight._m0[_1929].z * _1896) * _1938) * _1961);
    uvec4 _1976 = floatBitsToUint(cbLight._m0[_1902 + 12u]);
    bool _1978 = _1976.x == 0u;
    float _1989;
    float _1991;
    float _1993;
    if (_1978)
    {
        _1989 = _1970;
        _1991 = _1971;
        _1993 = _1972;
    }
    else
    {
        uint _1997 = _1902 + 6u;
        float _2013 = (dot(vec3(cbLight._m0[_1902 + 2u].xyz), vec3(_694, _695, _696)) * 0.5) + 0.5;
        float _2014 = _2013 * _2013;
        float _4095 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
        float _2015 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
        float _2016 = isnan(1.0) ? _1917 : (isnan(_1917) ? 1.0 : min(_1917, 1.0));
        _1989 = (((cbLight._m0[_1997].x * 0.3183098733425140380859375) * _2015) * _2016) + _1970;
        _1991 = (((cbLight._m0[_1997].y * 0.3183098733425140380859375) * _2015) * _2016) + _1971;
        _1993 = (((cbLight._m0[_1997].z * 0.3183098733425140380859375) * _2015) * _2016) + _1972;
    }
    bool _1996 = _1976.y == 0u;
    float _2034;
    float _2036;
    float _2038;
    if (_1996)
    {
        _2034 = _1989;
        _2036 = _1991;
        _2038 = _1993;
    }
    else
    {
        uint _2196 = _1902 + 7u;
        float _2212 = (dot(vec3(cbLight._m0[_1902 + 3u].xyz), vec3(_694, _695, _696)) * 0.5) + 0.5;
        float _2213 = _2212 * _2212;
        float _4111 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
        float _2214 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _2215 = isnan(1.0) ? _1918 : (isnan(_1918) ? 1.0 : min(_1918, 1.0));
        _2034 = (((cbLight._m0[_2196].x * 0.3183098733425140380859375) * _2214) * _2215) + _1989;
        _2036 = (((cbLight._m0[_2196].y * 0.3183098733425140380859375) * _2214) * _2215) + _1991;
        _2038 = (((cbLight._m0[_2196].z * 0.3183098733425140380859375) * _2214) * _2215) + _1993;
    }
    uint _2041 = _1902 + 8u;
    float _2054 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1902].w)) * _697) * 0.949999988079071044921875);
    float _2055 = _2054 * _2054;
    float _2056 = cbLight._m0[_1902].x + _773;
    float _2057 = cbLight._m0[_1902].y + _774;
    float _2058 = cbLight._m0[_1902].z + _775;
    float _2062 = inversesqrt(dot(vec3(_2056, _2057, _2058), vec3(_2056, _2057, _2058)));
    float _2063 = _2062 * _2056;
    float _2064 = _2062 * _2057;
    float _2065 = _2062 * _2058;
    float _2066 = dot(vec3(_694, _695, _696), vec3(cbLight._m0[_1902].xyz));
    float _4127 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
    float _2069 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
    float _4138 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
    float _2070 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
    float _2071 = dot(vec3(_694, _695, _696), vec3(_2063, _2064, _2065));
    float _4149 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2074 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
    float _2075 = dot(vec3(cbLight._m0[_1902].xyz), vec3(_2063, _2064, _2065));
    float _4160 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
    float _2079 = _2055 * _2055;
    float _2083 = ((_2074 * _2074) * (_2079 + (-1.0))) + 1.0;
    float _2094 = (exp2(log2(1.0 - (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2095 = 1.0 - _2055;
    float _2106 = (0.5 / (((_2070 * ((_2069 * _2095) + _2055)) + 9.9999999392252902907785028219223e-09) + (((_2070 * _2095) + _2055) * _2069))) * _2069;
    float _4171 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    float _2108 = (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_2079 / ((_2083 * _2083) * 3.141590118408203125));
    uint _2122 = _1902 + 9u;
    float _2133 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1942].w)) * _697) * 0.949999988079071044921875);
    float _2134 = _2133 * _2133;
    float _2135 = cbLight._m0[_1942].x + _773;
    float _2136 = cbLight._m0[_1942].y + _774;
    float _2137 = cbLight._m0[_1942].z + _775;
    float _2141 = inversesqrt(dot(vec3(_2135, _2136, _2137), vec3(_2135, _2136, _2137)));
    float _2142 = _2141 * _2135;
    float _2143 = _2141 * _2136;
    float _2144 = _2141 * _2137;
    float _2145 = dot(vec3(_694, _695, _696), vec3(cbLight._m0[_1942].xyz));
    float _4182 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _2148 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
    float _2149 = dot(vec3(_694, _695, _696), vec3(_2142, _2143, _2144));
    float _4193 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2152 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
    float _2153 = dot(vec3(cbLight._m0[_1942].xyz), vec3(_2142, _2143, _2144));
    float _4204 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
    float _2157 = _2134 * _2134;
    float _2161 = ((_2152 * _2152) * (_2157 + (-1.0))) + 1.0;
    float _2170 = (exp2(log2(1.0 - (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2171 = 1.0 - _2134;
    float _2181 = (0.5 / (((_2070 * ((_2148 * _2171) + _2134)) + 9.9999999392252902907785028219223e-09) + (((_2070 * _2171) + _2134) * _2148))) * _2148;
    float _4215 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
    float _2183 = (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * (_2157 / ((_2161 * _2161) * 3.141590118408203125));
    float _2193 = (((_2170 * cbLight._m0[_2122].x) * _2183) * _1925) + ((((cbLight._m0[_2041].x * _1894) * _2094) * _2108) * _1938);
    float _2194 = (((_2170 * cbLight._m0[_2122].y) * _2183) * _1925) + ((((cbLight._m0[_2041].y * _1895) * _2094) * _2108) * _1938);
    float _2195 = (((_2170 * cbLight._m0[_2122].z) * _2183) * _1925) + ((((cbLight._m0[_2041].z * _1896) * _2094) * _2108) * _1938);
    float _2257;
    float _2259;
    float _2261;
    if (_1978)
    {
        _2257 = _2193;
        _2259 = _2194;
        _2261 = _2195;
    }
    else
    {
        uint _2263 = _1902 + 2u;
        uint _2267 = _1902 + 10u;
        float _2281 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2263].w)) * _697) * 0.949999988079071044921875);
        float _2282 = _2281 * _2281;
        float _2283 = cbLight._m0[_2263].x + _773;
        float _2284 = cbLight._m0[_2263].y + _774;
        float _2285 = cbLight._m0[_2263].z + _775;
        float _2289 = inversesqrt(dot(vec3(_2283, _2284, _2285), vec3(_2283, _2284, _2285)));
        float _2290 = _2289 * _2283;
        float _2291 = _2289 * _2284;
        float _2292 = _2289 * _2285;
        float _2293 = dot(vec3(_694, _695, _696), vec3(cbLight._m0[_2263].xyz));
        float _4226 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0));
        float _2296 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _2297 = dot(vec3(_694, _695, _696), vec3(_2290, _2291, _2292));
        float _4237 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
        float _2300 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
        float _2301 = dot(vec3(cbLight._m0[_2263].xyz), vec3(_2290, _2291, _2292));
        float _4248 = isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0));
        float _2305 = _2282 * _2282;
        float _2309 = ((_2300 * _2300) * (_2305 + (-1.0))) + 1.0;
        float _2318 = (exp2(log2(1.0 - (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2319 = 1.0 - _2282;
        float _2329 = (0.5 / (((_2070 * ((_2296 * _2319) + _2282)) + 9.9999999392252902907785028219223e-09) + (((_2070 * _2319) + _2282) * _2296))) * _2296;
        float _4259 = isnan(0.0) ? _2329 : (isnan(_2329) ? 0.0 : max(_2329, 0.0));
        float _2331 = (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))) * (_2305 / ((_2309 * _2309) * 3.141590118408203125));
        float _2332 = isnan(1.0) ? _1917 : (isnan(_1917) ? 1.0 : min(_1917, 1.0));
        _2257 = (((_2318 * cbLight._m0[_2267].x) * _2331) * _2332) + _2193;
        _2259 = (((_2318 * cbLight._m0[_2267].y) * _2331) * _2332) + _2194;
        _2261 = (((_2318 * cbLight._m0[_2267].z) * _2331) * _2332) + _2195;
    }
    float _2367;
    float _2369;
    float _2371;
    if (_1996)
    {
        _2367 = _2257;
        _2369 = _2259;
        _2371 = _2261;
    }
    else
    {
        uint _2378 = _1902 + 3u;
        uint _2382 = _1902 + 11u;
        float _2396 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2378].w)) * _697) * 0.949999988079071044921875);
        float _2397 = _2396 * _2396;
        float _2398 = cbLight._m0[_2378].x + _773;
        float _2399 = cbLight._m0[_2378].y + _774;
        float _2400 = cbLight._m0[_2378].z + _775;
        float _2404 = inversesqrt(dot(vec3(_2398, _2399, _2400), vec3(_2398, _2399, _2400)));
        float _2405 = _2404 * _2398;
        float _2406 = _2404 * _2399;
        float _2407 = _2404 * _2400;
        float _2408 = dot(vec3(_694, _695, _696), vec3(cbLight._m0[_2378].xyz));
        float _4275 = isnan(0.0) ? _2408 : (isnan(_2408) ? 0.0 : max(_2408, 0.0));
        float _2411 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _2412 = dot(vec3(_694, _695, _696), vec3(_2405, _2406, _2407));
        float _4286 = isnan(0.0) ? _2412 : (isnan(_2412) ? 0.0 : max(_2412, 0.0));
        float _2415 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _2416 = dot(vec3(cbLight._m0[_2378].xyz), vec3(_2405, _2406, _2407));
        float _4297 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0));
        float _2420 = _2397 * _2397;
        float _2424 = ((_2415 * _2415) * (_2420 + (-1.0))) + 1.0;
        float _2433 = (exp2(log2(1.0 - (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2434 = 1.0 - _2397;
        float _2444 = (0.5 / (((_2070 * ((_2411 * _2434) + _2397)) + 9.9999999392252902907785028219223e-09) + (((_2070 * _2434) + _2397) * _2411))) * _2411;
        float _4308 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
        float _2446 = (isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * (_2420 / ((_2424 * _2424) * 3.141590118408203125));
        float _2447 = isnan(1.0) ? _1918 : (isnan(_1918) ? 1.0 : min(_1918, 1.0));
        _2367 = (((_2433 * cbLight._m0[_2382].x) * _2446) * _2447) + _2257;
        _2369 = (((_2433 * cbLight._m0[_2382].y) * _2446) * _2447) + _2259;
        _2371 = (((_2433 * cbLight._m0[_2382].z) * _2446) * _2447) + _2261;
    }
    float _2581;
    float _2583;
    float _2585;
    float _2587;
    float _2589;
    float _2591;
    if (_1900.y == 0u)
    {
        float _2522 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2523 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2522;
        float _2524 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2522;
        float _2525 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2522;
        uvec4 _2537 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2538 = _2537.x;
        uint _2549 = uint((float(_2537.y) * floor(float(uint(cbSceneParam._m0[85u].y * _782) / _2538))) + floor(float(uint(cbSceneParam._m0[85u].x * _781) / _2538)));
        float _2559 = (log2(_2525 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2560 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
        uint _2563 = uint(isnan(14.0) ? _2560 : (isnan(_2560) ? 14.0 : min(_2560, 14.0)));
        uvec4 _2568 = texelFetch(g_lightClusterGridBuffer, int(((_2563 << 2u) + (_2549 << 6u)) >> 2u));
        uint _2569 = _2568.x;
        uint _2570 = _2537.z;
        float _2669;
        float _2671;
        float _2673;
        float _2675;
        float _2677;
        float _2679;
        if (((((1u << ((_2570 >> 4u) & 15u)) + 4294967295u) & _2569) == 0u) || ((_2570 & 240u) == 0u))
        {
            _2669 = 0.0;
            _2671 = 0.0;
            _2673 = 0.0;
            _2675 = 0.0;
            _2677 = 0.0;
            _2679 = 0.0;
        }
        else
        {
            float _2670;
            float _2672;
            float _2674;
            float _2676;
            float _2678;
            float _2680;
            float _2813 = 0.0;
            float _2814 = 0.0;
            float _2815 = 0.0;
            float _2816 = 0.0;
            float _2817 = 0.0;
            float _2818 = 0.0;
            uint _2819 = 0u;
            uint _2828;
            bool _2829;
            for (;;)
            {
                _2828 = texelFetch(g_lightClassification, int((((_2563 << 5u) + (_2549 << 9u)) + (_2819 << 2u)) >> 2u)).x;
                _2829 = _2828 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2829)
                {
                    frontier_phi_63_pred = _2818;
                    frontier_phi_63_pred_1 = _2817;
                    frontier_phi_63_pred_2 = _2816;
                    frontier_phi_63_pred_3 = _2815;
                    frontier_phi_63_pred_4 = _2814;
                    frontier_phi_63_pred_5 = _2813;
                }
                else
                {
                    float _2937;
                    float _2938;
                    float _2939;
                    float _2940;
                    float _2941;
                    float _2942;
                    uint _2943;
                    _2937 = _2813;
                    _2938 = _2814;
                    _2939 = _2815;
                    _2940 = _2816;
                    _2941 = _2817;
                    _2942 = _2818;
                    _2943 = _2828;
                    float _2869;
                    float _2870;
                    float _2871;
                    float _2872;
                    float _2873;
                    float _2874;
                    for (;;)
                    {
                        uint _2947 = uint(findLSB(_2943)) + (_2819 << 5u);
                        uint _2944 = (_2943 + 4294967295u) & _2943;
                        uint _2949 = _2947 * 48u;
                        vec4 _2963 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2949)).x, texelFetch(g_PointLightRenderingBuffer, int(_2949 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2949 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2949 + 3u)).x));
                        uint _2969 = (_2947 * 48u) + 4u;
                        vec4 _2982 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2969)).x, texelFetch(g_PointLightRenderingBuffer, int(_2969 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2969 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2969 + 3u)).x));
                        uint _2988 = (_2947 * 48u) + 8u;
                        vec3 _2999 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2988)).x, texelFetch(g_PointLightRenderingBuffer, int(_2988 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2988 + 2u)).x));
                        float _3003 = _2963.x - _2523;
                        float _3004 = _2963.y - _2524;
                        float _3005 = _2963.z - _2525;
                        float _3006 = dot(vec3(_3003, _3004, _3005), vec3(_3003, _3004, _3005));
                        float _3009 = inversesqrt(_3006);
                        float _3010 = _3009 * _3003;
                        float _3011 = _3009 * _3004;
                        float _3012 = _3009 * _3005;
                        float _3013 = dot(vec3(_800, _803, _806), vec3(_3010, _3011, _3012));
                        float _3018 = 1.0 - (_3006 * _2963.w);
                        float _4334 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
                        float _3019 = isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0));
                        float _3020 = sqrt(_3006) * _2982.w;
                        float _3023 = 1.39999997615814208984375 / (_3020 + 1.39999997615814208984375);
                        float _3024 = _3023 * _3023;
                        float _3027 = ((1.0 - _3024) * _3013) + _3024;
                        float _3030 = _3020 * _3020;
                        float _3034 = ((isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0))) * _3019) / ((_3030 * 0.699999988079071044921875) + 1.0);
                        float _3038 = (-0.0) - _2523;
                        float _3039 = (-0.0) - _2524;
                        float _3040 = (-0.0) - _2525;
                        float _3044 = inversesqrt(dot(vec3(_3038, _3039, _3040), vec3(_3038, _3039, _3040)));
                        float _3045 = _3044 * _3038;
                        float _3046 = _3044 * _3039;
                        float _3047 = _3044 * _3040;
                        float _3055 = exp2(log2(1.0 / ((_3030 * 3.5) + 5.0)) * 0.25);
                        float _3056 = 1.0 - _860;
                        float _3063 = sqrt(1.0 - ((1.0 - (_3056 * _3056)) * (1.0 - (_3055 * _3055))));
                        float _3064 = _3063 * _3063;
                        float _3065 = _3064 * _3064;
                        float _3066 = _3045 + _3010;
                        float _3067 = _3046 + _3011;
                        float _3068 = _3047 + _3012;
                        float _3072 = inversesqrt(dot(vec3(_3066, _3067, _3068), vec3(_3066, _3067, _3068)));
                        float _3076 = dot(vec3(_800, _803, _806), vec3(_3045, _3046, _3047));
                        float _4350 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
                        float _3079 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
                        float _3080 = dot(vec3(_800, _803, _806), vec3(_3072 * _3066, _3072 * _3067, _3072 * _3068));
                        float _4361 = isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0));
                        float _3083 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
                        float _3087 = ((_3083 * _3083) * (_3065 + (-1.0))) + 1.0;
                        float _3088 = _3023 * _3064;
                        float _3089 = _3088 * _3088;
                        float _3092 = ((1.0 - _3089) * _3013) + _3089;
                        float _4372 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                        float _3093 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
                        float _3094 = 1.0 - _3064;
                        float _3104 = (0.5 / (((_3093 * ((_3079 * _3094) + _3064)) + 9.9999999392252902907785028219223e-09) + (((_3093 * _3094) + _3064) * _3079))) * _3093;
                        float _4383 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                        float _3115 = (((_3065 * 3.1415927410125732421875) * (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0)))) / ((_3087 * _3087) * ((_3030 * 2.1991131305694580078125) + 3.141590118408203125))) * _3019;
                        _2872 = (_3034 * _2982.x) + _2940;
                        _2873 = (_3034 * _2982.y) + _2941;
                        _2874 = (_3034 * _2982.z) + _2942;
                        _2869 = (_3115 * _2999.x) + _2937;
                        _2870 = (_3115 * _2999.y) + _2938;
                        _2871 = (_3115 * _2999.z) + _2939;
                        if (_2944 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2937 = _2869;
                            _2938 = _2870;
                            _2939 = _2871;
                            _2940 = _2872;
                            _2941 = _2873;
                            _2942 = _2874;
                            _2943 = _2944;
                        }
                    }
                    frontier_phi_63_pred = _2874;
                    frontier_phi_63_pred_1 = _2873;
                    frontier_phi_63_pred_2 = _2872;
                    frontier_phi_63_pred_3 = _2871;
                    frontier_phi_63_pred_4 = _2870;
                    frontier_phi_63_pred_5 = _2869;
                }
                _2680 = frontier_phi_63_pred;
                _2678 = frontier_phi_63_pred_1;
                _2676 = frontier_phi_63_pred_2;
                _2674 = frontier_phi_63_pred_3;
                _2672 = frontier_phi_63_pred_4;
                _2670 = frontier_phi_63_pred_5;
                uint _2820 = _2819 + 1u;
                if (_2820 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2813 = _2670;
                    _2814 = _2672;
                    _2815 = _2674;
                    _2816 = _2676;
                    _2817 = _2678;
                    _2818 = _2680;
                    _2819 = _2820;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2669 = _2670;
            _2671 = _2672;
            _2673 = _2674;
            _2675 = _2676;
            _2677 = _2678;
            _2679 = _2680;
        }
        uvec4 _2683 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2684 = _2683.z;
        uint _2686 = (_2684 >> 8u) & 15u;
        float _2781;
        float _2783;
        float _2785;
        float _2787;
        float _2789;
        float _2791;
        if (((4294967295u << _2686) & _2569) == 0u)
        {
            _2781 = _2669;
            _2783 = _2671;
            _2785 = _2673;
            _2787 = _2675;
            _2789 = _2677;
            _2791 = _2679;
        }
        else
        {
            float _2806 = inversesqrt(dot(vec3(_2523, _2524, _2525), vec3(_2523, _2524, _2525)));
            float _2807 = _2806 * _2523;
            float _2808 = _2806 * _2524;
            float _2809 = _2806 * _2525;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2686 < ((_2684 >> 12u) & 15u))
            {
                float _2782;
                float _2784;
                float _2786;
                float _2788;
                float _2790;
                float _2792;
                float _2920 = _2669;
                float _2921 = _2671;
                float _2922 = _2673;
                float _2923 = _2675;
                float _2924 = _2677;
                float _2925 = _2679;
                uint _2926 = _2686;
                uint _2935;
                bool _2936;
                for (;;)
                {
                    _2935 = texelFetch(g_lightClassification, int((((_2563 << 5u) + (_2549 << 9u)) + (_2926 << 2u)) >> 2u)).x;
                    _2936 = _2935 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2936)
                    {
                        frontier_phi_69_pred = _2925;
                        frontier_phi_69_pred_1 = _2924;
                        frontier_phi_69_pred_2 = _2923;
                        frontier_phi_69_pred_3 = _2922;
                        frontier_phi_69_pred_4 = _2921;
                        frontier_phi_69_pred_5 = _2920;
                    }
                    else
                    {
                        float _3120;
                        float _3121;
                        float _3122;
                        float _3123;
                        float _3124;
                        float _3125;
                        float _3415;
                        float _3416;
                        float _3417;
                        float _3418;
                        float _3419;
                        float _3420;
                        float _3133 = _2920;
                        float _3134 = _2921;
                        float _3135 = _2922;
                        float _3136 = _2923;
                        float _3137 = _2924;
                        float _3138 = _2925;
                        uint _3139 = _2935;
                        uint _3140;
                        vec4 _3165;
                        float _3166;
                        vec4 _3181;
                        vec3 _3193;
                        vec4 _3208;
                        vec4 _3224;
                        float _3271;
                        bool _3272;
                        for (;;)
                        {
                            uint _3150 = ((_2926 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3139));
                            _3140 = (_3139 + 4294967295u) & _3139;
                            uint _3152 = _3150 * 40u;
                            _3165 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3152)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3152 + 3u)).x));
                            _3166 = _3165.w;
                            uint _3168 = (_3150 * 40u) + 4u;
                            _3181 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3168)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3168 + 3u)).x));
                            uint _3183 = (_3150 * 40u) + 8u;
                            _3193 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3183)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3183 + 2u)).x));
                            uint _3195 = (_3150 * 40u) + 16u;
                            _3208 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3195)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3195 + 3u)).x));
                            uint _3211 = (_3150 * 40u) + 20u;
                            _3224 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3211)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 3u)).x));
                            uint _3227 = (_3150 * 40u) + 24u;
                            vec4 _3240 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3227)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 3u)).x));
                            uint _3246 = (_3150 * 40u) + 28u;
                            vec4 _3259 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3246)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3246 + 3u)).x));
                            _3271 = fma(_2525, _3259.z, fma(_2524, _3259.y, _3259.x * _2523)) + _3259.w;
                            _3272 = !((fma(_2525, _3240.z, fma(_2524, _3240.y, _3240.x * _2523)) + _3240.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3272)
                            {
                                float _3299 = _3165.x - _2523;
                                float _3300 = _3165.y - _2524;
                                float _3301 = _3165.z - _2525;
                                float _3302 = dot(vec3(_3299, _3300, _3301), vec3(_3299, _3300, _3301));
                                float _3305 = inversesqrt(_3302);
                                float _3306 = _3305 * _3299;
                                float _3307 = _3305 * _3300;
                                float _3308 = _3305 * _3301;
                                float _3312 = 1.0 - (_3302 / (_3166 * _3166));
                                float _4394 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                                float _3313 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
                                float _3317 = sqrt(_3302) * _3181.w;
                                float _3319 = 1.39999997615814208984375 / (_3317 + 1.39999997615814208984375);
                                float _3320 = _3319 * _3319;
                                float _3323 = ((1.0 - _3320) * dot(vec3(_3306, _3307, _3308), vec3(_800, _803, _806))) + _3320;
                                float _3326 = _3317 * _3317;
                                float _3330 = (fma(_2525, _3208.z, fma(_2524, _3208.y, _3208.x * _2523)) + _3208.w) / _3271;
                                float _3331 = (fma(_2525, _3224.z, fma(_2524, _3224.y, _3224.x * _2523)) + _3224.w) / _3271;
                                float _3335 = 1.0 - dot(vec2(_3330, _3331), vec2(_3330, _3331));
                                float _4410 = isnan(0.0) ? _3335 : (isnan(_3335) ? 0.0 : max(_3335, 0.0));
                                float _3336 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
                                float _3337 = _3336 * (((isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0))) * _3313) / ((_3326 * 0.699999988079071044921875) + 1.0));
                                float _3349 = exp2(log2(1.0 / ((_3326 * 3.5) + 5.0)) * 0.25);
                                float _3350 = 1.0 - _860;
                                float _3357 = sqrt(1.0 - ((1.0 - (_3350 * _3350)) * (1.0 - (_3349 * _3349))));
                                float _3358 = _3357 * _3357;
                                float _3359 = _3358 * _3358;
                                float _3360 = _3306 - _2807;
                                float _3361 = _3307 - _2808;
                                float _3362 = _3308 - _2809;
                                float _3366 = inversesqrt(dot(vec3(_3360, _3361, _3362), vec3(_3360, _3361, _3362)));
                                float _3370 = dot(vec3(_800, _803, _806), vec3((-0.0) - _2807, (-0.0) - _2808, (-0.0) - _2809));
                                float _4421 = isnan(0.0) ? _3370 : (isnan(_3370) ? 0.0 : max(_3370, 0.0));
                                float _3373 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
                                float _3374 = dot(vec3(_800, _803, _806), vec3(_3366 * _3360, _3366 * _3361, _3366 * _3362));
                                float _4432 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                                float _3377 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
                                float _3381 = ((_3377 * _3377) * (_3359 + (-1.0))) + 1.0;
                                float _3382 = _3319 * _3358;
                                float _3383 = _3382 * _3382;
                                float _3389 = ((1.0 - _3383) * dot(vec3(_800, _803, _806), vec3(_3306, _3307, _3308))) + _3383;
                                float _4443 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                                float _3390 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
                                float _3391 = 1.0 - _3358;
                                float _3401 = (0.5 / (((_3390 * ((_3373 * _3391) + _3358)) + 9.9999999392252902907785028219223e-09) + (((_3390 * _3391) + _3358) * _3373))) * _3390;
                                float _4454 = isnan(0.0) ? _3401 : (isnan(_3401) ? 0.0 : max(_3401, 0.0));
                                float _3411 = (_3336 * _3313) * (((_3359 * 3.1415927410125732421875) * (isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0)))) / ((_3381 * _3381) * ((_3326 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3337 * _3181.z;
                                frontier_phi_75_pred_1 = _3337 * _3181.y;
                                frontier_phi_75_pred_2 = _3337 * _3181.x;
                                frontier_phi_75_pred_3 = _3411 * _3193.z;
                                frontier_phi_75_pred_4 = _3411 * _3193.y;
                                frontier_phi_75_pred_5 = _3411 * _3193.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3420 = frontier_phi_75_pred;
                            _3419 = frontier_phi_75_pred_1;
                            _3418 = frontier_phi_75_pred_2;
                            _3417 = frontier_phi_75_pred_3;
                            _3416 = frontier_phi_75_pred_4;
                            _3415 = frontier_phi_75_pred_5;
                            _3123 = _3418 + _3136;
                            _3124 = _3419 + _3137;
                            _3125 = _3420 + _3138;
                            _3120 = _3415 + _3133;
                            _3121 = _3416 + _3134;
                            _3122 = _3417 + _3135;
                            if (_3140 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3133 = _3120;
                                _3134 = _3121;
                                _3135 = _3122;
                                _3136 = _3123;
                                _3137 = _3124;
                                _3138 = _3125;
                                _3139 = _3140;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _3125;
                        frontier_phi_69_pred_1 = _3124;
                        frontier_phi_69_pred_2 = _3123;
                        frontier_phi_69_pred_3 = _3122;
                        frontier_phi_69_pred_4 = _3121;
                        frontier_phi_69_pred_5 = _3120;
                    }
                    _2792 = frontier_phi_69_pred;
                    _2790 = frontier_phi_69_pred_1;
                    _2788 = frontier_phi_69_pred_2;
                    _2786 = frontier_phi_69_pred_3;
                    _2784 = frontier_phi_69_pred_4;
                    _2782 = frontier_phi_69_pred_5;
                    uint _2927 = _2926 + 1u;
                    if (_2927 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2920 = _2782;
                        _2921 = _2784;
                        _2922 = _2786;
                        _2923 = _2788;
                        _2924 = _2790;
                        _2925 = _2792;
                        _2926 = _2927;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2792;
                frontier_phi_57_58_ladder_1 = _2790;
                frontier_phi_57_58_ladder_2 = _2788;
                frontier_phi_57_58_ladder_3 = _2786;
                frontier_phi_57_58_ladder_4 = _2784;
                frontier_phi_57_58_ladder_5 = _2782;
            }
            else
            {
                frontier_phi_57_58_ladder = _2679;
                frontier_phi_57_58_ladder_1 = _2677;
                frontier_phi_57_58_ladder_2 = _2675;
                frontier_phi_57_58_ladder_3 = _2673;
                frontier_phi_57_58_ladder_4 = _2671;
                frontier_phi_57_58_ladder_5 = _2669;
            }
            _2781 = frontier_phi_57_58_ladder_5;
            _2783 = frontier_phi_57_58_ladder_4;
            _2785 = frontier_phi_57_58_ladder_3;
            _2787 = frontier_phi_57_58_ladder_2;
            _2789 = frontier_phi_57_58_ladder_1;
            _2791 = frontier_phi_57_58_ladder;
        }
        float _2796 = isnan(1.0) ? _844 : (isnan(_844) ? 1.0 : min(_844, 1.0));
        _2581 = (_2796 * _2787) + _2034;
        _2583 = (_2796 * _2789) + _2036;
        _2585 = (_2796 * _2791) + _2038;
        _2587 = ((_2781 * 0.039999999105930328369140625) * _2796) + _2367;
        _2589 = ((_2783 * 0.039999999105930328369140625) * _2796) + _2369;
        _2591 = ((_2785 * 0.039999999105930328369140625) * _2796) + _2371;
    }
    else
    {
        _2581 = _2034;
        _2583 = _2036;
        _2585 = _2038;
        _2587 = _2367;
        _2589 = _2369;
        _2591 = _2371;
    }
    float _4470 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _4481 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _4492 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    uint _2611 = _819 + 6u;
    float _2619 = _781 / cbSceneParam._m0[86u].x;
    float _2620 = _782 / cbSceneParam._m0[86u].y;
    vec4 _2634 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2619, _2620, (log2((isnan(cbSceneParam._m0[77u].w) ? _716 : (isnan(_716) ? cbSceneParam._m0[77u].w : min(_716, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2636 = _2634.x;
    float _2637 = _2634.y;
    float _2638 = _2634.z;
    float _2639 = _2634.w;
    float _2731;
    float _2733;
    float _2735;
    float _2737;
    if (_716 > cbSceneParam._m0[78u].w)
    {
        float _2694 = isnan(_716) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _716 : min(cbSceneParam._m0[80u].w, _716));
        float _2695 = _2694 / _716;
        float _2706 = _2695 * _766;
        float _2707 = _767 * _2695;
        float _2708 = (-0.0) - _2707;
        float _2709 = _2695 * _768;
        float _2711 = (cbSceneParam._m0[77u].w * _2708) / _2694;
        float _2712 = _2711 + cbSceneParam._m0[79u].w;
        float _2713 = cbSceneParam._m0[79u].w - _2707;
        float _2719 = sqrt(((_2706 * _2706) + (_2707 * _2707)) + (_2709 * _2709));
        float _2722 = (1.0 - (cbSceneParam._m0[77u].w / _2694)) * _2719;
        float _2727 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2729 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2882;
        if (abs((_2708 - _2711) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2882 = ((((_2712 > 0.0) ? exp2(_2727 * _2712) : (2.0 - exp2(_2729 * _2712))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2722;
        }
        else
        {
            float _2842 = 1.0 / cbSceneParam._m0[80u].x;
            float _2843 = isnan(_2713) ? _2712 : (isnan(_2712) ? _2713 : max(_2712, _2713));
            float _2844 = isnan(_2713) ? _2712 : (isnan(_2712) ? _2713 : min(_2712, _2713));
            float _2853 = isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : min(_2843, 0.0));
            float _2854 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : min(_2844, 0.0));
            _2882 = ((abs(_2719 / _2708) * cbSceneParam._m0[80u].y) * ((((_2853 - _2854) * 2.0) - ((exp2(_2727 * (isnan(0.0) ? _2843 : (isnan(_2843) ? 0.0 : max(_2843, 0.0)))) - exp2(_2727 * (isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0))))) * _2842)) - ((exp2(_2729 * _2853) - exp2(_2729 * _2854)) * _2842))) + (_2722 * cbSceneParam._m0[80u].z);
        }
        vec4 _2884 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2619, _2620, 1.0), 0.0);
        float _2893 = exp2((_2882 * (-1.44269502162933349609375)) * (1.0 - _2884.w));
        float _2894 = log2(_2893);
        float _2910 = log2(_2639);
        _2731 = (exp2(_2910 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2894 * cbSceneParam._m0[78u].x)) * _2884.x) / cbSceneParam._m0[78u].x)) + _2636;
        _2733 = (exp2(_2910 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2894 * cbSceneParam._m0[78u].y)) * _2884.y) / cbSceneParam._m0[78u].y)) + _2637;
        _2735 = (exp2(_2910 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2894 * cbSceneParam._m0[78u].z)) * _2884.z) / cbSceneParam._m0[78u].z)) + _2638;
        _2737 = _2893 * _2639;
    }
    else
    {
        _2731 = _2636;
        _2733 = _2637;
        _2735 = _2638;
        _2737 = _2639;
    }
    float _2749 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2750 = _2749 == 3.0;
    float _2751 = log2(_2737);
    float _2758 = exp2(_2751 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0))) * (_2581 + ((isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0))) * _844))) + ((_2587 + ((isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0))) * _1651)) * cbPerFrame._m0[3u].x));
    float _2759 = exp2(_2751 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (_2583 + ((isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0))) * _844))) + ((_2589 + ((isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0))) * _1651)) * cbPerFrame._m0[3u].x));
    float _2760 = exp2(_2751 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0))) * (_2585 + ((isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0))) * _844))) + ((_2591 + ((isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0))) * _1651)) * cbPerFrame._m0[3u].x));
    float _2769 = (_2749 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2769 * (_2750 ? _2758 : (_2758 + (cbSceneParam._m0[72u].w * _2731)));
    SV_Target.y = _2769 * (_2750 ? _2759 : (_2759 + (cbSceneParam._m0[72u].w * _2733)));
    SV_Target.z = _2769 * (_2750 ? _2760 : (_2760 + (cbSceneParam._m0[72u].w * _2735)));
    SV_Target.w = cbInstanceData._m0[_2611].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2611].w;
}


