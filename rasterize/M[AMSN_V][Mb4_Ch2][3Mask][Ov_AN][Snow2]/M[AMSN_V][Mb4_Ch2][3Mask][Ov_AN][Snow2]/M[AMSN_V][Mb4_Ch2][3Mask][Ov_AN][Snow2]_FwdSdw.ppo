#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[17];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_10;
layout(set = 0, binding = 10) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_6;
layout(set = 0, binding = 11) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_7;
layout(set = 0, binding = 12) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_8;
layout(set = 0, binding = 13) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_3;
layout(set = 0, binding = 9) uniform texture2D M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in float TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1218;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = _222 * NORMAL.x;
    float _224 = _222 * NORMAL.y;
    float _225 = _222 * NORMAL.z;
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _237;
    float _238;
    float _239;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _237 = (-0.0) - _223;
        _238 = (-0.0) - _224;
        _239 = (-0.0) - _225;
    }
    else
    {
        _237 = _223;
        _238 = _224;
        _239 = _225;
    }
    vec4 _263 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w));
    float _292 = cbMtdParam._m0[14u].w * texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_7, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w)).x;
    float _300 = ((cbMtdParam._m0[14u].x * (-1.39999997615814208984375)) * (((1.0 - _263.x) * 2.0) - _292)) + 1.0;
    float _3812 = isnan(0.0) ? _300 : (isnan(_300) ? 0.0 : max(_300, 0.0));
    float _301 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
    vec4 _313 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _330 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_14, SS_BumpMap), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.z) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.w) + cbTextureTilingScale._m0[5u].w));
    float _332 = _330.x;
    float _333 = _330.y;
    float _334 = _330.z;
    float _341 = ((_313.x - _332) * _301) + _332;
    float _342 = ((_313.y - _333) * _301) + _333;
    float _343 = ((_313.z - _334) * _301) + _334;
    float _349 = (((((1.0 - _263.y) * 2.0) - _292) * (-1.39999997615814208984375)) * cbMtdParam._m0[15u].y) + 1.0;
    float _3823 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _350 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
    vec4 _362 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_10, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.z) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.w) + cbTextureTilingScale._m0[1u].w));
    float _373 = ((_362.x - _341) * _350) + _341;
    float _374 = ((_362.y - _342) * _350) + _342;
    float _375 = ((_362.z - _343) * _350) + _343;
    float _381 = (((((1.0 - _263.z) * 2.0) - _292) * (-1.39999997615814208984375)) * cbMtdParam._m0[15u].x) + 1.0;
    float _3834 = isnan(0.0) ? _381 : (isnan(_381) ? 0.0 : max(_381, 0.0));
    float _382 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
    vec4 _395 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _408 = ((_395.z - _375) * _382) + _375;
    float _411 = ((((_395.x - _373) * _382) + _373) * 2.0) + (-1.0);
    float _413 = ((((_395.y - _374) * _382) + _374) * 2.0) + (-1.0);
    float _414 = dot(vec2(_411, _413), vec2(_411, _413));
    float _3845 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _419 = sqrt(1.0 - (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0))));
    float _420 = fma(_419, _237, 0.0);
    float _421 = fma(_419, _238, 0.0);
    float _422 = fma(_419, _239, 0.0);
    float _426 = inversesqrt(dot(vec3(_420, _421, _422), vec3(_420, _421, _422)));
    float _434 = cbMtdParam._m0[14u].y + dot(vec4(_426 * _420, _426 * _421, _426 * _422, 0.0), vec4(cbMtdParam._m0[15u].zw, cbMtdParam._m0[16u].x, 0.0));
    float _3856 = isnan(0.0) ? _434 : (isnan(_434) ? 0.0 : max(_434, 0.0));
    float _435 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
    vec4 _453 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_15, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.z) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.w) + cbTextureTilingScale._m0[6u].w));
    float _458 = _453.x * cbMtdParam._m0[10u].x;
    float _459 = _453.y * cbMtdParam._m0[10u].y;
    float _460 = _453.z * cbMtdParam._m0[10u].z;
    vec4 _478 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.z) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.w) + cbTextureTilingScale._m0[4u].w));
    float _492 = (((_478.x * cbMtdParam._m0[11u].x) - _458) * _301) + _458;
    float _493 = (((_478.y * cbMtdParam._m0[11u].y) - _459) * _301) + _459;
    float _494 = (((_478.z * cbMtdParam._m0[11u].z) - _460) * _301) + _460;
    vec4 _511 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w));
    float _525 = (((_511.x * cbMtdParam._m0[12u].x) - _492) * _350) + _492;
    float _526 = (((_511.y * cbMtdParam._m0[12u].y) - _493) * _350) + _493;
    float _527 = (((_511.z * cbMtdParam._m0[12u].z) - _494) * _350) + _494;
    vec4 _545 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_9, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.z) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.w) + cbTextureTilingScale._m0[13u].w));
    vec4 _579 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _587 = ((cbMtdParam._m0[9u].x * 4.55000019073486328125) * ((((_545.x * cbMtdParam._m0[13u].x) - _525) * _382) + _525)) * _579.x;
    float _590 = ((cbMtdParam._m0[9u].y * 4.55000019073486328125) * ((((_545.y * cbMtdParam._m0[13u].y) - _526) * _382) + _526)) * _579.y;
    float _593 = ((cbMtdParam._m0[9u].z * 4.55000019073486328125) * ((((_545.z * cbMtdParam._m0[13u].z) - _527) * _382) + _527)) * _579.z;
    vec4 _605 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_5, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w));
    float _616 = ((_605.x - _587) * _435) + _587;
    float _617 = ((_605.y - _590) * _435) + _590;
    float _618 = ((_605.z - _593) * _435) + _593;
    vec4 _631 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w));
    float _638 = (_631.x * 2.0) + (-1.0);
    float _639 = (_631.y * 2.0) + (-1.0);
    float _640 = dot(vec2(_638, _639), vec2(_638, _639));
    float _3867 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _648 = ((_631.z - _408) * _435) + _408;
    float _657 = ((sqrt(1.0 - (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0)))) - _419) * _435) + _419;
    vec4 _671 = texture(sampler2D(M_AMSN_V_Mb4_Ch2_3Mask_Ov_AN_Snow2_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _681 = (((_638 - _411) * _435) + _411) + (((_671.x * 2.0) + (-1.0)) * cbMtdParam._m0[14u].z);
    float _682 = (((_639 - _413) * _435) + _413) + (((_671.y * 2.0) + (-1.0)) * cbMtdParam._m0[14u].z);
    float _685 = fma(_657, _237, fma(_682, _229 * TANGENT.x, (_215 * _207) * _681));
    float _688 = fma(_657, _238, fma(_682, _229 * TANGENT.y, (_215 * _208) * _681));
    float _691 = fma(_657, _239, fma(_682, _229 * TANGENT.z, (_215 * _209) * _681));
    float _695 = inversesqrt(dot(vec3(_685, _688, _691), vec3(_685, _688, _691)));
    float _696 = _695 * _685;
    float _697 = _695 * _688;
    float _698 = _695 * _691;
    float _3878 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _699 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
    float _3889 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _3900 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _3911 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _718 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _758 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _768 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _758);
    float _769 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _758);
    float _770 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _758);
    float _774 = inversesqrt(dot(vec3(_768, _769, _770), vec3(_768, _769, _770)));
    float _775 = _768 * _774;
    float _776 = _769 * _774;
    float _777 = _770 * _774;
    float _783 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _784 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _802 = fma(_698, cbSceneParam._m0[5u].z, fma(_697, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _696));
    float _805 = fma(_698, cbSceneParam._m0[6u].z, fma(_697, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _696));
    float _808 = fma(_698, cbSceneParam._m0[7u].z, fma(_697, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _696));
    uint _821 = uint(roundEven(NORMAL.w)) * 13u;
    uint _823 = (_821 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _829 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0)))) * cbInstanceData._m0[_823].x;
    float _830 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0)))) * cbInstanceData._m0[_823].y;
    float _831 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0)))) * cbInstanceData._m0[_823].z;
    float _3922 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _832 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
    float _3933 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _833 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
    float _3944 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _834 = isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0));
    vec4 _843 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _783, cbSceneParam._m0[86u].y * _784));
    float _846 = _843.x * TEXCOORD_4;
    float _847 = dot(vec3(_696, _697, _698), vec3(_775, _776, _777));
    float _850 = _847 * 2.0;
    float _854 = (_850 * _696) - _775;
    float _855 = (_850 * _697) - _776;
    float _856 = (_850 * _698) - _777;
    float _860 = abs(dot(vec3(_775, _776, _777), vec3(_696, _697, _698)));
    float _3955 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _862 = sqrt(_699);
    float _875 = exp2((_862 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_862 * 3.0));
    float _907 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _911 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _915 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1217;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _942 = fma(_915, cbModelParam._m0[26u].z, fma(_911, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _907));
        float _946 = fma(_915, cbModelParam._m0[27u].z, fma(_911, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _907));
        float _950 = fma(_915, cbModelParam._m0[28u].z, fma(_911, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _907));
        float _975 = _907 + _696;
        float _976 = _911 + _697;
        float _977 = _915 + _698;
        float _987 = fma(_977, cbModelParam._m0[26u].z, fma(_976, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _975)) - _942;
        float _988 = fma(_977, cbModelParam._m0[27u].z, fma(_976, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _975)) - _946;
        float _989 = fma(_977, cbModelParam._m0[28u].z, fma(_976, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _975)) - _950;
        float _993 = inversesqrt(dot(vec3(_987, _988, _989), vec3(_987, _988, _989)));
        float _1006 = ((_993 * _987) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_942 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1007 = ((_993 * _988) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_946 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1008 = ((_993 * _989) / cbModelParam._m0[34u].z) + ((((((_950 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        vec4 _1018 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        vec4 _1025 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        vec4 _1032 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1006, _1007, _1008), 0.0);
        float _1045 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1046 = _1045 * (_1011.x + (-0.5));
        float _1047 = _1045 * (_1011.y + (-0.5));
        float _1048 = _1045 * (_1011.z + (-0.5));
        float _1055 = exp2((_1018.w + (-0.5)) * 20.0) * 2.0;
        float _1056 = _1055 * (_1018.x + (-0.5));
        float _1057 = _1055 * (_1018.y + (-0.5));
        float _1058 = _1055 * (_1018.z + (-0.5));
        float _1065 = exp2((_1025.w + (-0.5)) * 20.0) * 2.0;
        float _1066 = _1065 * (_1025.x + (-0.5));
        float _1067 = _1065 * (_1025.y + (-0.5));
        float _1068 = _1065 * (_1025.z + (-0.5));
        float _1075 = exp2((_1032.w + (-0.5)) * 20.0) * 2.0;
        float _1076 = _1075 * (_1032.x + (-0.5));
        float _1077 = _1075 * (_1032.y + (-0.5));
        float _1078 = _1075 * (_1032.z + (-0.5));
        float _1079 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1080 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1081 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1082 = _1046 * 0.5;
        float _1083 = _1056 * 0.5;
        float _1084 = _1066 * 0.5;
        float _1085 = dot(vec3(_1082, _1083, _1084), vec3(_1082, _1083, _1084));
        float _1090 = (_1085 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1085);
        float _1099 = (dot(vec3(_696, _697, _698), vec3(_1090 * _1082, _1090 * _1083, _1090 * _1084)) + 1.0) * 0.5;
        float _3981 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1109 = sqrt(((_1083 * _1083) + (_1082 * _1082)) + (_1084 * _1084)) / (_1079 + 9.9999997473787516355514526367188e-06);
        float _3992 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1110 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _1111 = _1110 * 2.0;
        float _1115 = (1.0 - _1110) / (_1110 + 1.0);
        float _4003 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1125 = ((((1.0 - _1116) * (_1111 + 2.0)) * exp2(log2(isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * (_1111 + 1.0))) + _1116) * _1079;
        float _1126 = _1047 * 0.5;
        float _1127 = _1057 * 0.5;
        float _1128 = _1067 * 0.5;
        float _1129 = dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128));
        float _1134 = (_1129 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1129);
        float _1142 = (dot(vec3(_696, _697, _698), vec3(_1134 * _1126, _1134 * _1127, _1134 * _1128)) + 1.0) * 0.5;
        float _4014 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1151 = sqrt(((_1127 * _1127) + (_1126 * _1126)) + (_1128 * _1128)) / (_1080 + 9.9999997473787516355514526367188e-06);
        float _4025 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
        float _1153 = _1152 * 2.0;
        float _1157 = (1.0 - _1152) / (_1152 + 1.0);
        float _4036 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1167 = ((((1.0 - _1158) * (_1153 + 2.0)) * exp2(log2(isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0))) * (_1153 + 1.0))) + _1158) * _1080;
        float _1168 = _1048 * 0.5;
        float _1169 = _1058 * 0.5;
        float _1170 = _1068 * 0.5;
        float _1171 = dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170));
        float _1176 = (_1171 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1171);
        float _1184 = (dot(vec3(_696, _697, _698), vec3(_1176 * _1168, _1176 * _1169, _1176 * _1170)) + 1.0) * 0.5;
        float _4047 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1193 = sqrt(((_1169 * _1169) + (_1168 * _1168)) + (_1170 * _1170)) / (_1081 + 9.9999997473787516355514526367188e-06);
        float _4058 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
        float _1195 = _1194 * 2.0;
        float _1199 = (1.0 - _1194) / (_1194 + 1.0);
        float _4069 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
        float _1209 = ((((1.0 - _1200) * (_1195 + 2.0)) * exp2(log2(isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0))) * (_1195 + 1.0))) + _1200) * _1081;
        _1217 = _1048;
        _1219 = _1047;
        _1220 = _1046;
        _1221 = _1058;
        _1222 = _1057;
        _1223 = _1056;
        _1224 = _1068;
        _1225 = _1067;
        _1226 = _1066;
        _1227 = _1081;
        _1228 = _1080;
        _1229 = _1079;
        _1230 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0)));
        _1231 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0)));
        _1232 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0)));
    }
    else
    {
        _1217 = _1218;
        _1219 = _1218;
        _1220 = _1218;
        _1221 = _1218;
        _1222 = _1218;
        _1223 = _1218;
        _1224 = _1218;
        _1225 = _1218;
        _1226 = _1218;
        _1227 = _1218;
        _1228 = _1218;
        _1229 = _1218;
        _1230 = 0.0;
        _1231 = 0.0;
        _1232 = 0.0;
    }
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    float _1535;
    float _1536;
    float _1537;
    float _1538;
    float _1539;
    float _1540;
    float _1541;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1258 = fma(_915, cbModelParam._m0[30u].z, fma(_911, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _907));
        float _1262 = fma(_915, cbModelParam._m0[31u].z, fma(_911, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _907));
        float _1266 = fma(_915, cbModelParam._m0[32u].z, fma(_911, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _907));
        float _1289 = _907 + _696;
        float _1290 = _911 + _697;
        float _1291 = _915 + _698;
        float _1301 = fma(_1291, cbModelParam._m0[30u].z, fma(_1290, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1289)) - _1258;
        float _1302 = fma(_1291, cbModelParam._m0[31u].z, fma(_1290, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1289)) - _1262;
        float _1303 = fma(_1291, cbModelParam._m0[32u].z, fma(_1290, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1289)) - _1266;
        float _1307 = inversesqrt(dot(vec3(_1301, _1302, _1303), vec3(_1301, _1302, _1303)));
        float _1320 = ((_1307 * _1301) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1258 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1321 = ((_1307 * _1302) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1262 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1322 = ((_1307 * _1303) / cbModelParam._m0[35u].z) + ((((((_1266 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1324 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        vec4 _1331 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        vec4 _1338 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        vec4 _1345 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1320, _1321, _1322), 0.0);
        float _1357 = exp2((_1324.w + (-0.5)) * 20.0) * 2.0;
        float _1358 = _1357 * (_1324.x + (-0.5));
        float _1359 = _1357 * (_1324.y + (-0.5));
        float _1360 = _1357 * (_1324.z + (-0.5));
        float _1367 = exp2((_1331.w + (-0.5)) * 20.0) * 2.0;
        float _1368 = _1367 * (_1331.x + (-0.5));
        float _1369 = _1367 * (_1331.y + (-0.5));
        float _1370 = _1367 * (_1331.z + (-0.5));
        float _1377 = exp2((_1338.w + (-0.5)) * 20.0) * 2.0;
        float _1378 = _1377 * (_1338.x + (-0.5));
        float _1379 = _1377 * (_1338.y + (-0.5));
        float _1380 = _1377 * (_1338.z + (-0.5));
        float _1387 = exp2((_1345.w + (-0.5)) * 20.0) * 2.0;
        float _1388 = _1387 * (_1345.x + (-0.5));
        float _1389 = _1387 * (_1345.y + (-0.5));
        float _1390 = _1387 * (_1345.z + (-0.5));
        float _1391 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1392 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1393 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1394 = _1358 * 0.5;
        float _1395 = _1368 * 0.5;
        float _1396 = _1378 * 0.5;
        float _1397 = dot(vec3(_1394, _1395, _1396), vec3(_1394, _1395, _1396));
        float _1402 = (_1397 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1397);
        float _1410 = (dot(vec3(_696, _697, _698), vec3(_1402 * _1394, _1402 * _1395, _1402 * _1396)) + 1.0) * 0.5;
        float _4110 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1419 = sqrt(((_1395 * _1395) + (_1394 * _1394)) + (_1396 * _1396)) / (_1391 + 9.9999997473787516355514526367188e-06);
        float _4121 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1420 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
        float _1421 = _1420 * 2.0;
        float _1425 = (1.0 - _1420) / (_1420 + 1.0);
        float _4132 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1426 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1435 = ((((1.0 - _1426) * (_1421 + 2.0)) * exp2(log2(isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0))) * (_1421 + 1.0))) + _1426) * _1391;
        float _1436 = _1359 * 0.5;
        float _1437 = _1369 * 0.5;
        float _1438 = _1379 * 0.5;
        float _1439 = dot(vec3(_1436, _1437, _1438), vec3(_1436, _1437, _1438));
        float _1444 = (_1439 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1439);
        float _1452 = (dot(vec3(_696, _697, _698), vec3(_1444 * _1436, _1444 * _1437, _1444 * _1438)) + 1.0) * 0.5;
        float _4143 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1461 = sqrt(((_1437 * _1437) + (_1436 * _1436)) + (_1438 * _1438)) / (_1392 + 9.9999997473787516355514526367188e-06);
        float _4154 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1462 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
        float _1463 = _1462 * 2.0;
        float _1467 = (1.0 - _1462) / (_1462 + 1.0);
        float _4165 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1468 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1477 = ((((1.0 - _1468) * (_1463 + 2.0)) * exp2(log2(isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0))) * (_1463 + 1.0))) + _1468) * _1392;
        float _1478 = _1360 * 0.5;
        float _1479 = _1370 * 0.5;
        float _1480 = _1380 * 0.5;
        float _1481 = dot(vec3(_1478, _1479, _1480), vec3(_1478, _1479, _1480));
        float _1486 = (_1481 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1481);
        float _1494 = (dot(vec3(_696, _697, _698), vec3(_1486 * _1478, _1486 * _1479, _1486 * _1480)) + 1.0) * 0.5;
        float _4176 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1503 = sqrt(((_1479 * _1479) + (_1478 * _1478)) + (_1480 * _1480)) / (_1393 + 9.9999997473787516355514526367188e-06);
        float _4187 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1504 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
        float _1505 = _1504 * 2.0;
        float _1509 = (1.0 - _1504) / (_1504 + 1.0);
        float _4198 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1510 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
        float _1519 = ((((1.0 - _1510) * (_1505 + 2.0)) * exp2(log2(isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0))) * (_1505 + 1.0))) + _1510) * _1393;
        _1527 = _1360;
        _1528 = _1359;
        _1529 = _1358;
        _1530 = _1370;
        _1531 = _1369;
        _1532 = _1368;
        _1533 = _1380;
        _1534 = _1379;
        _1535 = _1378;
        _1536 = _1393;
        _1537 = _1392;
        _1538 = _1391;
        _1539 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)));
        _1540 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)));
        _1541 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)));
    }
    else
    {
        _1527 = _1218;
        _1528 = _1218;
        _1529 = _1218;
        _1530 = _1218;
        _1531 = _1218;
        _1532 = _1218;
        _1533 = _1218;
        _1534 = _1218;
        _1535 = _1218;
        _1536 = _1218;
        _1537 = _1218;
        _1538 = _1218;
        _1539 = 0.0;
        _1540 = 0.0;
        _1541 = 0.0;
    }
    float _1551 = (cbModelParam._m0[1u].x * (_1539 - _1230)) + _1230;
    float _1552 = (cbModelParam._m0[1u].x * (_1540 - _1231)) + _1231;
    float _1553 = (cbModelParam._m0[1u].x * (_1541 - _1232)) + _1232;
    float _1574 = fma(_1553, cbSceneParam._m0[89u].z, fma(_1552, cbSceneParam._m0[89u].y, _1551 * cbSceneParam._m0[89u].x));
    float _1577 = fma(_1553, cbSceneParam._m0[90u].z, fma(_1552, cbSceneParam._m0[90u].y, _1551 * cbSceneParam._m0[90u].x));
    float _1580 = fma(_1553, cbSceneParam._m0[91u].z, fma(_1552, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1551));
    float _1595 = _854 * 0.5;
    float _1596 = _855 * 0.5;
    float _1597 = _856 * 0.5;
    float _1598 = dot(vec4(_1595, _1596, _1597, 1.0), vec4(_1529, _1532, _1535, _1538));
    float _1601 = dot(vec4(_1595, _1596, _1597, 1.0), vec4(_1528, _1531, _1534, _1537));
    float _1604 = dot(vec4(_1595, _1596, _1597, 1.0), vec4(_1527, _1530, _1533, _1536));
    float _1638;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1611 = dot(vec4(_1595, _1596, _1597, 1.0), vec4(_1217, _1221, _1224, _1227));
        float _1615 = dot(vec4(_1595, _1596, _1597, 1.0), vec4(_1219, _1222, _1225, _1228));
        float _1619 = dot(vec4(_1595, _1596, _1597, 1.0), vec4(_1220, _1223, _1226, _1229));
        float _1626 = dot(vec4(cbModelParam._m0[39u]), vec4(_1595, _1596, _1597, 1.0));
        _1638 = dot(vec3(isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)), isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0)), isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1626) ? 0.0 : (isnan(0.0) ? _1626 : max(0.0, _1626))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1638 = 1.0;
    }
    float _1649;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1640 = dot(vec4(cbModelParam._m0[40u]), vec4(_1595, _1596, _1597, 1.0));
        _1649 = dot(vec3(isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)), isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0)), isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1640) ? 0.0 : (isnan(0.0) ? _1640 : max(0.0, _1640))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1649 = 1.0;
    }
    float _1653 = (_1649 * cbModelParam._m0[1u].x) + (_1638 * (1.0 - cbModelParam._m0[1u].x));
    float _1663 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _699);
    float _1664 = isnan(_1663) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1663 : min(cbModelParam._m0[25u].z, _1663));
    float _1744;
    float _1746;
    float _1748;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1711 = fma(_915, cbModelParam._m0[13u].z, fma(_911, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _907)) + cbModelParam._m0[13u].w;
        float _1715 = fma(_915, cbModelParam._m0[14u].z, fma(_911, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _907)) + cbModelParam._m0[14u].w;
        float _1719 = fma(_915, cbModelParam._m0[15u].z, fma(_911, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _907)) + cbModelParam._m0[15u].w;
        float _1722 = fma(_856, cbModelParam._m0[13u].z, fma(_855, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _854));
        float _1725 = fma(_856, cbModelParam._m0[14u].z, fma(_855, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _854));
        float _1728 = fma(_856, cbModelParam._m0[15u].z, fma(_855, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _854));
        float _1756;
        if (_1722 > 0.0)
        {
            _1756 = abs((1.0 - _1711) / _1722);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1722 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1711 + 1.0) / _1722);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1756 = frontier_phi_16_14_ladder;
        }
        float _1929;
        if (_1725 > 0.0)
        {
            _1929 = abs((1.0 - _1715) / _1725);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1725 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1715 + 1.0) / _1725);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1929 = frontier_phi_25_21_ladder;
        }
        float _2224;
        if (_1728 > 0.0)
        {
            _2224 = abs((1.0 - _1719) / _1728);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1728 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1719 + 1.0) / _1728);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2224 = frontier_phi_37_32_ladder;
        }
        float _2226 = isnan(_1929) ? _1756 : (isnan(_1756) ? _1929 : min(_1756, _1929));
        float _2227 = isnan(_2224) ? _2226 : (isnan(_2226) ? _2224 : min(_2226, _2224));
        float _2231 = (_2227 * _1722) + _1711;
        float _2232 = (_2227 * _1725) + _1715;
        float _2233 = (_2227 * _1728) + _1719;
        float _2234 = _2227 * 9.9999997473787516355514526367188e-05;
        float _2236 = (-1.0) - _2234;
        float _2238 = _2234 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_2233 > _2238) || ((_2233 < _2236) || ((_2232 > _2238) || ((_2232 < _2236) || ((_2231 < _2236) || (_2231 > _2238))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2378 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2233, cbModelParam._m0[9u].z, fma(_2232, cbModelParam._m0[9u].y, _2231 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2233, cbModelParam._m0[10u].z, fma(_2232, cbModelParam._m0[10u].y, _2231 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2233, cbModelParam._m0[11u].z, fma(_2232, cbModelParam._m0[11u].y, _2231 * cbModelParam._m0[11u].x))), _1664);
            frontier_phi_15_37_ladder = _2378.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2378.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2378.z * cbModelParam._m0[1u].y;
        }
        _1744 = frontier_phi_15_37_ladder_1;
        _1746 = frontier_phi_15_37_ladder;
        _1748 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1732 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_854, _855, _856), _1664);
        _1744 = _1732.x * cbModelParam._m0[1u].y;
        _1746 = _1732.y * cbModelParam._m0[1u].y;
        _1748 = _1732.z * cbModelParam._m0[1u].y;
    }
    float _1752 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _699);
    float _1753 = isnan(_1752) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1752 : min(cbModelParam._m0[25u].w, _1752));
    float _1846;
    float _1848;
    float _1850;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1810 = fma(_915, cbModelParam._m0[21u].z, fma(_911, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _907)) + cbModelParam._m0[21u].w;
        float _1814 = fma(_915, cbModelParam._m0[22u].z, fma(_911, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _907)) + cbModelParam._m0[22u].w;
        float _1818 = fma(_915, cbModelParam._m0[23u].z, fma(_911, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _907)) + cbModelParam._m0[23u].w;
        float _1821 = fma(_856, cbModelParam._m0[21u].z, fma(_855, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _854));
        float _1824 = fma(_856, cbModelParam._m0[22u].z, fma(_855, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _854));
        float _1827 = fma(_856, cbModelParam._m0[23u].z, fma(_855, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _854));
        float _1934;
        if (_1821 > 0.0)
        {
            _1934 = abs((1.0 - _1810) / _1821);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1821 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1810 + 1.0) / _1821);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1934 = frontier_phi_27_23_ladder;
        }
        float _2251;
        if (_1824 > 0.0)
        {
            _2251 = abs((1.0 - _1814) / _1824);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1824 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1814 + 1.0) / _1824);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _2251 = frontier_phi_39_34_ladder;
        }
        float _2578;
        if (_1827 > 0.0)
        {
            _2578 = abs((1.0 - _1818) / _1827);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1827 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1818 + 1.0) / _1827);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2578 = frontier_phi_49_46_ladder;
        }
        float _2580 = isnan(_2251) ? _1934 : (isnan(_1934) ? _2251 : min(_1934, _2251));
        float _2581 = isnan(_2578) ? _2580 : (isnan(_2580) ? _2578 : min(_2580, _2578));
        float _2585 = (_2581 * _1821) + _1810;
        float _2586 = (_2581 * _1824) + _1814;
        float _2587 = (_2581 * _1827) + _1818;
        float _2588 = _2581 * 9.9999997473787516355514526367188e-05;
        float _2589 = (-1.0) - _2588;
        float _2591 = _2588 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2587 > _2591) || ((_2587 < _2589) || ((_2586 > _2591) || ((_2586 < _2589) || ((_2585 < _2589) || (_2585 > _2591))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2705 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2587, cbModelParam._m0[17u].z, fma(_2586, cbModelParam._m0[17u].y, _2585 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2587, cbModelParam._m0[18u].z, fma(_2586, cbModelParam._m0[18u].y, _2585 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2587, cbModelParam._m0[19u].z, fma(_2586, cbModelParam._m0[19u].y, _2585 * cbModelParam._m0[19u].x))), _1753);
            frontier_phi_24_49_ladder = _2705.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2705.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2705.x * cbModelParam._m0[1u].z;
        }
        _1846 = frontier_phi_24_49_ladder_2;
        _1848 = frontier_phi_24_49_ladder_1;
        _1850 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1830 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_854, _855, _856), _1753);
        _1846 = _1830.x * cbModelParam._m0[1u].z;
        _1848 = _1830.y * cbModelParam._m0[1u].z;
        _1850 = _1830.z * cbModelParam._m0[1u].z;
    }
    float _1862 = ((((1.0 - _875) * ((_862 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_875 * _862)) * _846;
    float _1863 = _1862 * ((cbModelParam._m0[1u].w * (_1846 - _1744)) + _1744);
    float _1864 = _1862 * ((cbModelParam._m0[1u].w * (_1848 - _1746)) + _1746);
    float _1865 = _1862 * ((cbModelParam._m0[1u].w * (_1850 - _1748)) + _1748);
    float _1868 = fma(_1865, cbSceneParam._m0[89u].z, fma(_1864, cbSceneParam._m0[89u].y, _1863 * cbSceneParam._m0[89u].x));
    float _1871 = fma(_1865, cbSceneParam._m0[90u].z, fma(_1864, cbSceneParam._m0[90u].y, _1863 * cbSceneParam._m0[90u].x));
    float _1874 = fma(_1865, cbSceneParam._m0[91u].z, fma(_1864, cbSceneParam._m0[91u].y, _1863 * cbSceneParam._m0[91u].x));
    float _1908 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1912 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1916 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1920 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1921 = _1908 / _1920;
    float _1922 = _1912 / _1920;
    float _1923 = _1916 / _1920;
    float _2070;
    float _2071;
    float _2072;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1950 = ((uint(_1923 > cbSceneParam._m0[59u].y) + uint(_1923 > cbSceneParam._m0[59u].x)) + uint(_1923 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1951 = _1950 + 43u;
        uint _1959 = _1950 + 44u;
        uint _1967 = _1950 + 45u;
        uint _1975 = _1950 + 46u;
        float _1986 = fma(_1920, cbSceneParam._m0[_1951].w, fma(_1916, cbSceneParam._m0[_1951].z, fma(_1912, cbSceneParam._m0[_1951].y, _1908 * cbSceneParam._m0[_1951].x)));
        float _1990 = fma(_1920, cbSceneParam._m0[_1959].w, fma(_1916, cbSceneParam._m0[_1959].z, fma(_1912, cbSceneParam._m0[_1959].y, _1908 * cbSceneParam._m0[_1959].x)));
        float _1998 = fma(_1920, cbSceneParam._m0[_1975].w, fma(_1916, cbSceneParam._m0[_1975].z, fma(_1912, cbSceneParam._m0[_1975].y, _1908 * cbSceneParam._m0[_1975].x)));
        float _2003 = cbSceneParam._m0[33u].z * _1998;
        float _2005 = cbSceneParam._m0[33u].w * _1998;
        float _2008 = fma(_1920, cbSceneParam._m0[_1967].w, fma(_1916, cbSceneParam._m0[_1967].z, fma(_1912, cbSceneParam._m0[_1967].y, _1908 * cbSceneParam._m0[_1967].x))) / _1998;
        float _2056 = (cbSceneParam._m0[33u].x - sqrt(((_1922 * _1922) + (_1921 * _1921)) + (_1923 * _1923))) * cbSceneParam._m0[33u].y;
        float _4324 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
        float _2063 = (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2003 + _1986) / _1998, (_2005 + _1990) / _1998), _2008), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2005 + _1986) / _1998, (_1990 - _2003) / _1998), _2008), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1986 - _2003) / _1998, (_1990 - _2005) / _1998), _2008), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1986 - _2005) / _1998, (_2003 + _1990) / _1998), _2008), 0.0)).x), vec4(0.25)));
        _2070 = 1.0 - (_2063 * cbSceneParam._m0[34u].x);
        _2071 = 1.0 - (_2063 * cbSceneParam._m0[34u].y);
        _2072 = 1.0 - (_2063 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2070 = 1.0;
        _2071 = 1.0;
        _2072 = 1.0;
    }
    float _2136;
    float _2138;
    float _2140;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2124 = fma(_1920, cbSceneParam._m0[63u].w, fma(_1916, cbSceneParam._m0[63u].z, fma(_1912, cbSceneParam._m0[63u].y, _1908 * cbSceneParam._m0[63u].x)));
        float _2125 = fma(_1920, cbSceneParam._m0[60u].w, fma(_1916, cbSceneParam._m0[60u].z, fma(_1912, cbSceneParam._m0[60u].y, _1908 * cbSceneParam._m0[60u].x))) / _2124;
        float _2126 = fma(_1920, cbSceneParam._m0[61u].w, fma(_1916, cbSceneParam._m0[61u].z, fma(_1912, cbSceneParam._m0[61u].y, _1908 * cbSceneParam._m0[61u].x))) / _2124;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_2125 >= cbSceneParam._m0[64u].x) && (_2126 >= cbSceneParam._m0[64u].y)) && (_2125 <= cbSceneParam._m0[64u].z)) && (_2126 <= cbSceneParam._m0[64u].w))
        {
            float _2264 = fma(_1920, cbSceneParam._m0[62u].w, fma(_1916, cbSceneParam._m0[62u].z, fma(_1912, cbSceneParam._m0[62u].y, _1908 * cbSceneParam._m0[62u].x))) / _2124;
            float _2268 = isnan(cbSceneParam._m0[41u].w) ? _2264 : (isnan(_2264) ? cbSceneParam._m0[41u].w : max(_2264, cbSceneParam._m0[41u].w));
            float _2311 = (cbSceneParam._m0[33u].x - sqrt(((_1922 * _1922) + (_1921 * _1921)) + (_1923 * _1923))) * cbSceneParam._m0[33u].y;
            float _4340 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
            float _2318 = (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2125, cbSceneParam._m0[33u].w + _2126), _2268), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2125, _2126 - cbSceneParam._m0[33u].z), _2268), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2125 - cbSceneParam._m0[33u].z, _2126 - cbSceneParam._m0[33u].w), _2268), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2125 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2126), _2268), 0.0)).x), vec4(0.25)));
            float _2322 = 1.0 - (_2318 * cbSceneParam._m0[34u].x);
            float _2323 = 1.0 - (_2318 * cbSceneParam._m0[34u].y);
            float _2324 = 1.0 - (_2318 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2323) ? _2071 : (isnan(_2071) ? _2323 : min(_2071, _2323));
            frontier_phi_36_35_ladder_1 = isnan(_2324) ? _2072 : (isnan(_2072) ? _2324 : min(_2072, _2324));
            frontier_phi_36_35_ladder_2 = isnan(_2322) ? _2070 : (isnan(_2070) ? _2322 : min(_2070, _2322));
        }
        else
        {
            frontier_phi_36_35_ladder = _2071;
            frontier_phi_36_35_ladder_1 = _2072;
            frontier_phi_36_35_ladder_2 = _2070;
        }
        _2136 = frontier_phi_36_35_ladder_2;
        _2138 = frontier_phi_36_35_ladder;
        _2140 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _2136 = _2070;
        _2138 = _2071;
        _2140 = _2072;
    }
    uvec4 _2145 = floatBitsToUint(cbInstanceData._m0[_821 + 5u]);
    uint _2147 = _2145.x * 14u;
    uint _2148 = _2147 + 13u;
    float _2155 = _846 + (-1.0);
    float _2160 = (cbLight._m0[_2148].x * _2155) + 1.0;
    float _2161 = (cbLight._m0[_2148].y * _2155) + 1.0;
    float _2162 = (cbLight._m0[_2148].z * _2155) + 1.0;
    float _2163 = (cbLight._m0[_2148].w * _2155) + 1.0;
    uint _2164 = _2147 + 5u;
    float _2170 = isnan(1.0) ? _2161 : (isnan(_2161) ? 1.0 : min(_2161, 1.0));
    uint _2174 = _2147 + 4u;
    float _2183 = isnan(1.0) ? _2160 : (isnan(_2160) ? 1.0 : min(_2160, 1.0));
    uint _2187 = _2147 | 1u;
    float _2198 = dot(vec3(cbLight._m0[_2147].xyz), vec3(_696, _697, _698));
    float _2201 = dot(vec3(cbLight._m0[_2187].xyz), vec3(_696, _697, _698));
    float _4376 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
    float _4387 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
    float _2206 = (isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0))) * 0.3183098733425140380859375;
    float _2208 = (isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0))) * 0.3183098733425140380859375;
    float _2215 = ((cbLight._m0[_2164].x * _2170) * _2208) + (((cbLight._m0[_2174].x * _2136) * _2183) * _2206);
    float _2216 = ((_2170 * cbLight._m0[_2164].y) * _2208) + (((cbLight._m0[_2174].y * _2138) * _2183) * _2206);
    float _2217 = ((_2170 * cbLight._m0[_2164].z) * _2208) + (((cbLight._m0[_2174].z * _2140) * _2183) * _2206);
    uvec4 _2221 = floatBitsToUint(cbLight._m0[_2147 + 12u]);
    bool _2223 = _2221.x == 0u;
    float _2325;
    float _2327;
    float _2329;
    if (_2223)
    {
        _2325 = _2215;
        _2327 = _2216;
        _2329 = _2217;
    }
    else
    {
        uint _2333 = _2147 + 6u;
        float _2349 = (dot(vec3(cbLight._m0[_2147 + 2u].xyz), vec3(_696, _697, _698)) * 0.5) + 0.5;
        float _2350 = _2349 * _2349;
        float _4398 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
        float _2351 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
        float _2352 = isnan(1.0) ? _2162 : (isnan(_2162) ? 1.0 : min(_2162, 1.0));
        _2325 = (((cbLight._m0[_2333].x * 0.3183098733425140380859375) * _2351) * _2352) + _2215;
        _2327 = (((cbLight._m0[_2333].y * 0.3183098733425140380859375) * _2351) * _2352) + _2216;
        _2329 = (((cbLight._m0[_2333].z * 0.3183098733425140380859375) * _2351) * _2352) + _2217;
    }
    bool _2332 = _2221.y == 0u;
    float _2387;
    float _2389;
    float _2391;
    if (_2332)
    {
        _2387 = _2325;
        _2389 = _2327;
        _2391 = _2329;
    }
    else
    {
        uint _2549 = _2147 + 7u;
        float _2565 = (dot(vec3(cbLight._m0[_2147 + 3u].xyz), vec3(_696, _697, _698)) * 0.5) + 0.5;
        float _2566 = _2565 * _2565;
        float _4414 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
        float _2567 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
        float _2568 = isnan(1.0) ? _2163 : (isnan(_2163) ? 1.0 : min(_2163, 1.0));
        _2387 = (((cbLight._m0[_2549].x * 0.3183098733425140380859375) * _2567) * _2568) + _2325;
        _2389 = (((cbLight._m0[_2549].y * 0.3183098733425140380859375) * _2567) * _2568) + _2327;
        _2391 = (((cbLight._m0[_2549].z * 0.3183098733425140380859375) * _2567) * _2568) + _2329;
    }
    uint _2394 = _2147 + 8u;
    float _2407 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2147].w)) * _699) * 0.949999988079071044921875);
    float _2408 = _2407 * _2407;
    float _2409 = cbLight._m0[_2147].x + _775;
    float _2410 = cbLight._m0[_2147].y + _776;
    float _2411 = cbLight._m0[_2147].z + _777;
    float _2415 = inversesqrt(dot(vec3(_2409, _2410, _2411), vec3(_2409, _2410, _2411)));
    float _2416 = _2415 * _2409;
    float _2417 = _2415 * _2410;
    float _2418 = _2415 * _2411;
    float _2419 = dot(vec3(_696, _697, _698), vec3(cbLight._m0[_2147].xyz));
    float _4430 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0));
    float _2422 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
    float _4441 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _2423 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
    float _2424 = dot(vec3(_696, _697, _698), vec3(_2416, _2417, _2418));
    float _4452 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
    float _2427 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
    float _2428 = dot(vec3(cbLight._m0[_2147].xyz), vec3(_2416, _2417, _2418));
    float _4463 = isnan(0.0) ? _2428 : (isnan(_2428) ? 0.0 : max(_2428, 0.0));
    float _2432 = _2408 * _2408;
    float _2436 = ((_2427 * _2427) * (_2432 + (-1.0))) + 1.0;
    float _2447 = (exp2(log2(1.0 - (isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2448 = 1.0 - _2408;
    float _2459 = (0.5 / (((_2423 * ((_2422 * _2448) + _2408)) + 9.9999999392252902907785028219223e-09) + (((_2423 * _2448) + _2408) * _2422))) * _2422;
    float _4474 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
    float _2461 = (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * (_2432 / ((_2436 * _2436) * 3.141590118408203125));
    uint _2475 = _2147 + 9u;
    float _2486 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2187].w)) * _699) * 0.949999988079071044921875);
    float _2487 = _2486 * _2486;
    float _2488 = cbLight._m0[_2187].x + _775;
    float _2489 = cbLight._m0[_2187].y + _776;
    float _2490 = cbLight._m0[_2187].z + _777;
    float _2494 = inversesqrt(dot(vec3(_2488, _2489, _2490), vec3(_2488, _2489, _2490)));
    float _2495 = _2494 * _2488;
    float _2496 = _2494 * _2489;
    float _2497 = _2494 * _2490;
    float _2498 = dot(vec3(_696, _697, _698), vec3(cbLight._m0[_2187].xyz));
    float _4485 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
    float _2501 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
    float _2502 = dot(vec3(_696, _697, _698), vec3(_2495, _2496, _2497));
    float _4496 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
    float _2505 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
    float _2506 = dot(vec3(cbLight._m0[_2187].xyz), vec3(_2495, _2496, _2497));
    float _4507 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
    float _2510 = _2487 * _2487;
    float _2514 = ((_2505 * _2505) * (_2510 + (-1.0))) + 1.0;
    float _2523 = (exp2(log2(1.0 - (isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2524 = 1.0 - _2487;
    float _2534 = (0.5 / (((_2423 * ((_2501 * _2524) + _2487)) + 9.9999999392252902907785028219223e-09) + (((_2423 * _2524) + _2487) * _2501))) * _2501;
    float _4518 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
    float _2536 = (isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0))) * (_2510 / ((_2514 * _2514) * 3.141590118408203125));
    float _2546 = (((_2523 * cbLight._m0[_2475].x) * _2536) * _2170) + ((((cbLight._m0[_2394].x * _2136) * _2447) * _2461) * _2183);
    float _2547 = (((_2523 * cbLight._m0[_2475].y) * _2536) * _2170) + ((((cbLight._m0[_2394].y * _2138) * _2447) * _2461) * _2183);
    float _2548 = (((_2523 * cbLight._m0[_2475].z) * _2536) * _2170) + ((((cbLight._m0[_2394].z * _2140) * _2447) * _2461) * _2183);
    float _2604;
    float _2606;
    float _2608;
    if (_2223)
    {
        _2604 = _2546;
        _2606 = _2547;
        _2608 = _2548;
    }
    else
    {
        uint _2610 = _2147 + 2u;
        uint _2614 = _2147 + 10u;
        float _2628 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2610].w)) * _699) * 0.949999988079071044921875);
        float _2629 = _2628 * _2628;
        float _2630 = cbLight._m0[_2610].x + _775;
        float _2631 = cbLight._m0[_2610].y + _776;
        float _2632 = cbLight._m0[_2610].z + _777;
        float _2636 = inversesqrt(dot(vec3(_2630, _2631, _2632), vec3(_2630, _2631, _2632)));
        float _2637 = _2636 * _2630;
        float _2638 = _2636 * _2631;
        float _2639 = _2636 * _2632;
        float _2640 = dot(vec3(_696, _697, _698), vec3(cbLight._m0[_2610].xyz));
        float _4529 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
        float _2643 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
        float _2644 = dot(vec3(_696, _697, _698), vec3(_2637, _2638, _2639));
        float _4540 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
        float _2647 = isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0));
        float _2648 = dot(vec3(cbLight._m0[_2610].xyz), vec3(_2637, _2638, _2639));
        float _4551 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
        float _2652 = _2629 * _2629;
        float _2656 = ((_2647 * _2647) * (_2652 + (-1.0))) + 1.0;
        float _2665 = (exp2(log2(1.0 - (isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2666 = 1.0 - _2629;
        float _2676 = (0.5 / (((_2423 * ((_2643 * _2666) + _2629)) + 9.9999999392252902907785028219223e-09) + (((_2423 * _2666) + _2629) * _2643))) * _2643;
        float _4562 = isnan(0.0) ? _2676 : (isnan(_2676) ? 0.0 : max(_2676, 0.0));
        float _2678 = (isnan(1.0) ? _4562 : (isnan(_4562) ? 1.0 : min(_4562, 1.0))) * (_2652 / ((_2656 * _2656) * 3.141590118408203125));
        float _2679 = isnan(1.0) ? _2162 : (isnan(_2162) ? 1.0 : min(_2162, 1.0));
        _2604 = (((_2665 * cbLight._m0[_2614].x) * _2678) * _2679) + _2546;
        _2606 = (((_2665 * cbLight._m0[_2614].y) * _2678) * _2679) + _2547;
        _2608 = (((_2665 * cbLight._m0[_2614].z) * _2678) * _2679) + _2548;
    }
    float _2710;
    float _2712;
    float _2714;
    if (_2332)
    {
        _2710 = _2604;
        _2712 = _2606;
        _2714 = _2608;
    }
    else
    {
        uint _2721 = _2147 + 3u;
        uint _2725 = _2147 + 11u;
        float _2739 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2721].w)) * _699) * 0.949999988079071044921875);
        float _2740 = _2739 * _2739;
        float _2741 = cbLight._m0[_2721].x + _775;
        float _2742 = cbLight._m0[_2721].y + _776;
        float _2743 = cbLight._m0[_2721].z + _777;
        float _2747 = inversesqrt(dot(vec3(_2741, _2742, _2743), vec3(_2741, _2742, _2743)));
        float _2748 = _2747 * _2741;
        float _2749 = _2747 * _2742;
        float _2750 = _2747 * _2743;
        float _2751 = dot(vec3(_696, _697, _698), vec3(cbLight._m0[_2721].xyz));
        float _4578 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
        float _2754 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
        float _2755 = dot(vec3(_696, _697, _698), vec3(_2748, _2749, _2750));
        float _4589 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
        float _2758 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
        float _2759 = dot(vec3(cbLight._m0[_2721].xyz), vec3(_2748, _2749, _2750));
        float _4600 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
        float _2763 = _2740 * _2740;
        float _2767 = ((_2758 * _2758) * (_2763 + (-1.0))) + 1.0;
        float _2776 = (exp2(log2(1.0 - (isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
        float _2777 = 1.0 - _2740;
        float _2787 = (0.5 / (((_2423 * ((_2754 * _2777) + _2740)) + 9.9999999392252902907785028219223e-09) + (((_2423 * _2777) + _2740) * _2754))) * _2754;
        float _4611 = isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0));
        float _2789 = (isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0))) * (_2763 / ((_2767 * _2767) * 3.141590118408203125));
        float _2790 = isnan(1.0) ? _2163 : (isnan(_2163) ? 1.0 : min(_2163, 1.0));
        _2710 = (((_2776 * cbLight._m0[_2725].x) * _2789) * _2790) + _2604;
        _2712 = (((_2776 * cbLight._m0[_2725].y) * _2789) * _2790) + _2606;
        _2714 = (((_2776 * cbLight._m0[_2725].z) * _2789) * _2790) + _2608;
    }
    float _2855;
    float _2857;
    float _2859;
    float _2861;
    float _2863;
    float _2865;
    if (_2145.y == 0u)
    {
        uvec4 _2811 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2812 = _2811.x;
        uint _2823 = uint((float(_2811.y) * floor(float(uint(cbSceneParam._m0[85u].y * _784) / _2812))) + floor(float(uint(cbSceneParam._m0[85u].x * _783) / _2812)));
        float _2833 = (log2(_1923 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2834 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
        uint _2837 = uint(isnan(14.0) ? _2834 : (isnan(_2834) ? 14.0 : min(_2834, 14.0)));
        uvec4 _2842 = texelFetch(g_lightClusterGridBuffer, int(((_2837 << 2u) + (_2823 << 6u)) >> 2u));
        uint _2843 = _2842.x;
        uint _2844 = _2811.z;
        float _2922;
        float _2924;
        float _2926;
        float _2928;
        float _2930;
        float _2932;
        if (((((1u << ((_2844 >> 4u) & 15u)) + 4294967295u) & _2843) == 0u) || ((_2844 & 240u) == 0u))
        {
            _2922 = 0.0;
            _2924 = 0.0;
            _2926 = 0.0;
            _2928 = 0.0;
            _2930 = 0.0;
            _2932 = 0.0;
        }
        else
        {
            float _2923;
            float _2925;
            float _2927;
            float _2929;
            float _2931;
            float _2933;
            float _3066 = 0.0;
            float _3067 = 0.0;
            float _3068 = 0.0;
            float _3069 = 0.0;
            float _3070 = 0.0;
            float _3071 = 0.0;
            uint _3072 = 0u;
            uint _3081;
            bool _3082;
            for (;;)
            {
                _3081 = texelFetch(g_lightClassification, int((((_2837 << 5u) + (_2823 << 9u)) + (_3072 << 2u)) >> 2u)).x;
                _3082 = _3081 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3082)
                {
                    frontier_phi_68_pred = _3071;
                    frontier_phi_68_pred_1 = _3070;
                    frontier_phi_68_pred_2 = _3069;
                    frontier_phi_68_pred_3 = _3067;
                    frontier_phi_68_pred_4 = _3066;
                    frontier_phi_68_pred_5 = _3068;
                }
                else
                {
                    float _3190;
                    float _3191;
                    float _3192;
                    float _3193;
                    float _3194;
                    float _3195;
                    uint _3196;
                    _3190 = _3066;
                    _3191 = _3067;
                    _3192 = _3068;
                    _3193 = _3069;
                    _3194 = _3070;
                    _3195 = _3071;
                    _3196 = _3081;
                    float _3122;
                    float _3123;
                    float _3124;
                    float _3125;
                    float _3126;
                    float _3127;
                    for (;;)
                    {
                        uint _3200 = uint(findLSB(_3196)) + (_3072 << 5u);
                        uint _3197 = (_3196 + 4294967295u) & _3196;
                        uint _3202 = _3200 * 48u;
                        vec4 _3216 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3202)).x, texelFetch(g_PointLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3202 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3202 + 3u)).x));
                        uint _3222 = (_3200 * 48u) + 4u;
                        vec4 _3235 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3222)).x, texelFetch(g_PointLightRenderingBuffer, int(_3222 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3222 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3222 + 3u)).x));
                        uint _3241 = (_3200 * 48u) + 8u;
                        vec3 _3252 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3241)).x, texelFetch(g_PointLightRenderingBuffer, int(_3241 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3241 + 2u)).x));
                        float _3256 = _3216.x - _1921;
                        float _3257 = _3216.y - _1922;
                        float _3258 = _3216.z - _1923;
                        float _3259 = dot(vec3(_3256, _3257, _3258), vec3(_3256, _3257, _3258));
                        float _3262 = inversesqrt(_3259);
                        float _3263 = _3262 * _3256;
                        float _3264 = _3262 * _3257;
                        float _3265 = _3262 * _3258;
                        float _3266 = dot(vec3(_802, _805, _808), vec3(_3263, _3264, _3265));
                        float _3271 = 1.0 - (_3259 * _3216.w);
                        float _4637 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0));
                        float _3272 = isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0));
                        float _3273 = sqrt(_3259) * _3235.w;
                        float _3276 = 1.39999997615814208984375 / (_3273 + 1.39999997615814208984375);
                        float _3277 = _3276 * _3276;
                        float _3280 = ((1.0 - _3277) * _3266) + _3277;
                        float _3283 = _3273 * _3273;
                        float _3287 = ((isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0))) * _3272) / ((_3283 * 0.699999988079071044921875) + 1.0);
                        float _3291 = (-0.0) - _1921;
                        float _3292 = (-0.0) - _1922;
                        float _3293 = (-0.0) - _1923;
                        float _3297 = inversesqrt(dot(vec3(_3291, _3292, _3293), vec3(_3291, _3292, _3293)));
                        float _3298 = _3297 * _3291;
                        float _3299 = _3297 * _3292;
                        float _3300 = _3297 * _3293;
                        float _3307 = exp2(log2(1.0 / ((_3283 * 3.5) + 5.0)) * 0.25);
                        float _3308 = 1.0 - _862;
                        float _3315 = sqrt(1.0 - ((1.0 - (_3308 * _3308)) * (1.0 - (_3307 * _3307))));
                        float _3316 = _3315 * _3315;
                        float _3317 = _3316 * _3316;
                        float _3318 = _3298 + _3263;
                        float _3319 = _3299 + _3264;
                        float _3320 = _3300 + _3265;
                        float _3324 = inversesqrt(dot(vec3(_3318, _3319, _3320), vec3(_3318, _3319, _3320)));
                        float _3328 = dot(vec3(_802, _805, _808), vec3(_3298, _3299, _3300));
                        float _4653 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0));
                        float _3331 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
                        float _3332 = dot(vec3(_802, _805, _808), vec3(_3324 * _3318, _3324 * _3319, _3324 * _3320));
                        float _4664 = isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0));
                        float _3335 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
                        float _3339 = ((_3335 * _3335) * (_3317 + (-1.0))) + 1.0;
                        float _3340 = _3276 * _3316;
                        float _3341 = _3340 * _3340;
                        float _3344 = ((1.0 - _3341) * _3266) + _3341;
                        float _4675 = isnan(0.0) ? _3344 : (isnan(_3344) ? 0.0 : max(_3344, 0.0));
                        float _3345 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
                        float _3346 = 1.0 - _3316;
                        float _3356 = (0.5 / (((_3345 * ((_3331 * _3346) + _3316)) + 9.9999999392252902907785028219223e-09) + (((_3345 * _3346) + _3316) * _3331))) * _3345;
                        float _4686 = isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0));
                        float _3367 = (((_3317 * 3.1415927410125732421875) * (isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0)))) / ((_3339 * _3339) * ((_3283 * 2.1991131305694580078125) + 3.141590118408203125))) * _3272;
                        _3125 = (_3287 * _3235.x) + _3193;
                        _3126 = (_3287 * _3235.y) + _3194;
                        _3127 = (_3287 * _3235.z) + _3195;
                        _3122 = (_3367 * _3252.x) + _3190;
                        _3123 = (_3367 * _3252.y) + _3191;
                        _3124 = (_3367 * _3252.z) + _3192;
                        if (_3197 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3190 = _3122;
                            _3191 = _3123;
                            _3192 = _3124;
                            _3193 = _3125;
                            _3194 = _3126;
                            _3195 = _3127;
                            _3196 = _3197;
                        }
                    }
                    frontier_phi_68_pred = _3127;
                    frontier_phi_68_pred_1 = _3126;
                    frontier_phi_68_pred_2 = _3125;
                    frontier_phi_68_pred_3 = _3123;
                    frontier_phi_68_pred_4 = _3122;
                    frontier_phi_68_pred_5 = _3124;
                }
                _2933 = frontier_phi_68_pred;
                _2931 = frontier_phi_68_pred_1;
                _2929 = frontier_phi_68_pred_2;
                _2925 = frontier_phi_68_pred_3;
                _2923 = frontier_phi_68_pred_4;
                _2927 = frontier_phi_68_pred_5;
                uint _3073 = _3072 + 1u;
                if (_3073 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3066 = _2923;
                    _3067 = _2925;
                    _3068 = _2927;
                    _3069 = _2929;
                    _3070 = _2931;
                    _3071 = _2933;
                    _3072 = _3073;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2922 = _2923;
            _2924 = _2925;
            _2926 = _2927;
            _2928 = _2929;
            _2930 = _2931;
            _2932 = _2933;
        }
        uvec4 _2936 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2937 = _2936.z;
        uint _2939 = (_2937 >> 8u) & 15u;
        float _3034;
        float _3036;
        float _3038;
        float _3040;
        float _3042;
        float _3044;
        if (((4294967295u << _2939) & _2843) == 0u)
        {
            _3034 = _2922;
            _3036 = _2924;
            _3038 = _2926;
            _3040 = _2928;
            _3042 = _2930;
            _3044 = _2932;
        }
        else
        {
            float _3059 = inversesqrt(dot(vec3(_1921, _1922, _1923), vec3(_1921, _1922, _1923)));
            float _3060 = _3059 * _1921;
            float _3061 = _3059 * _1922;
            float _3062 = _3059 * _1923;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2939 < ((_2937 >> 12u) & 15u))
            {
                float _3035;
                float _3037;
                float _3039;
                float _3041;
                float _3043;
                float _3045;
                float _3173 = _2922;
                float _3174 = _2924;
                float _3175 = _2926;
                float _3176 = _2928;
                float _3177 = _2930;
                float _3178 = _2932;
                uint _3179 = _2939;
                uint _3188;
                bool _3189;
                for (;;)
                {
                    _3188 = texelFetch(g_lightClassification, int((((_2837 << 5u) + (_2823 << 9u)) + (_3179 << 2u)) >> 2u)).x;
                    _3189 = _3188 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_3189)
                    {
                        frontier_phi_74_pred = _3175;
                        frontier_phi_74_pred_1 = _3174;
                        frontier_phi_74_pred_2 = _3173;
                        frontier_phi_74_pred_3 = _3178;
                        frontier_phi_74_pred_4 = _3177;
                        frontier_phi_74_pred_5 = _3176;
                    }
                    else
                    {
                        float _3372;
                        float _3373;
                        float _3374;
                        float _3375;
                        float _3376;
                        float _3377;
                        float _3667;
                        float _3668;
                        float _3669;
                        float _3670;
                        float _3671;
                        float _3672;
                        float _3385 = _3173;
                        float _3386 = _3174;
                        float _3387 = _3175;
                        float _3388 = _3176;
                        float _3389 = _3177;
                        float _3390 = _3178;
                        uint _3391 = _3188;
                        uint _3392;
                        vec4 _3417;
                        float _3418;
                        vec4 _3433;
                        vec3 _3445;
                        vec4 _3460;
                        vec4 _3476;
                        float _3523;
                        bool _3524;
                        for (;;)
                        {
                            uint _3402 = ((_3179 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3391));
                            _3392 = (_3391 + 4294967295u) & _3391;
                            uint _3404 = _3402 * 40u;
                            _3417 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3404)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3404 + 3u)).x));
                            _3418 = _3417.w;
                            uint _3420 = (_3402 * 40u) + 4u;
                            _3433 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3420)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3420 + 3u)).x));
                            uint _3435 = (_3402 * 40u) + 8u;
                            _3445 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3435)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3435 + 2u)).x));
                            uint _3447 = (_3402 * 40u) + 16u;
                            _3460 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3447)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3447 + 3u)).x));
                            uint _3463 = (_3402 * 40u) + 20u;
                            _3476 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3463)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3463 + 3u)).x));
                            uint _3479 = (_3402 * 40u) + 24u;
                            vec4 _3492 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3479)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3479 + 3u)).x));
                            uint _3498 = (_3402 * 40u) + 28u;
                            vec4 _3511 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3498)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3498 + 3u)).x));
                            _3523 = fma(_1923, _3511.z, fma(_1922, _3511.y, _3511.x * _1921)) + _3511.w;
                            _3524 = !((fma(_1923, _3492.z, fma(_1922, _3492.y, _3492.x * _1921)) + _3492.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3524)
                            {
                                float _3551 = _3417.x - _1921;
                                float _3552 = _3417.y - _1922;
                                float _3553 = _3417.z - _1923;
                                float _3554 = dot(vec3(_3551, _3552, _3553), vec3(_3551, _3552, _3553));
                                float _3557 = inversesqrt(_3554);
                                float _3558 = _3557 * _3551;
                                float _3559 = _3557 * _3552;
                                float _3560 = _3557 * _3553;
                                float _3564 = 1.0 - (_3554 / (_3418 * _3418));
                                float _4697 = isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0));
                                float _3565 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
                                float _3569 = sqrt(_3554) * _3433.w;
                                float _3571 = 1.39999997615814208984375 / (_3569 + 1.39999997615814208984375);
                                float _3572 = _3571 * _3571;
                                float _3575 = ((1.0 - _3572) * dot(vec3(_3558, _3559, _3560), vec3(_802, _805, _808))) + _3572;
                                float _3578 = _3569 * _3569;
                                float _3582 = (fma(_1923, _3460.z, fma(_1922, _3460.y, _3460.x * _1921)) + _3460.w) / _3523;
                                float _3583 = (fma(_1923, _3476.z, fma(_1922, _3476.y, _3476.x * _1921)) + _3476.w) / _3523;
                                float _3587 = 1.0 - dot(vec2(_3582, _3583), vec2(_3582, _3583));
                                float _4713 = isnan(0.0) ? _3587 : (isnan(_3587) ? 0.0 : max(_3587, 0.0));
                                float _3588 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
                                float _3589 = _3588 * (((isnan(0.0) ? _3575 : (isnan(_3575) ? 0.0 : max(_3575, 0.0))) * _3565) / ((_3578 * 0.699999988079071044921875) + 1.0));
                                float _3601 = exp2(log2(1.0 / ((_3578 * 3.5) + 5.0)) * 0.25);
                                float _3602 = 1.0 - _862;
                                float _3609 = sqrt(1.0 - ((1.0 - (_3602 * _3602)) * (1.0 - (_3601 * _3601))));
                                float _3610 = _3609 * _3609;
                                float _3611 = _3610 * _3610;
                                float _3612 = _3558 - _3060;
                                float _3613 = _3559 - _3061;
                                float _3614 = _3560 - _3062;
                                float _3618 = inversesqrt(dot(vec3(_3612, _3613, _3614), vec3(_3612, _3613, _3614)));
                                float _3622 = dot(vec3(_802, _805, _808), vec3((-0.0) - _3060, (-0.0) - _3061, (-0.0) - _3062));
                                float _4724 = isnan(0.0) ? _3622 : (isnan(_3622) ? 0.0 : max(_3622, 0.0));
                                float _3625 = isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0));
                                float _3626 = dot(vec3(_802, _805, _808), vec3(_3618 * _3612, _3618 * _3613, _3618 * _3614));
                                float _4735 = isnan(0.0) ? _3626 : (isnan(_3626) ? 0.0 : max(_3626, 0.0));
                                float _3629 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
                                float _3633 = ((_3629 * _3629) * (_3611 + (-1.0))) + 1.0;
                                float _3634 = _3571 * _3610;
                                float _3635 = _3634 * _3634;
                                float _3641 = ((1.0 - _3635) * dot(vec3(_802, _805, _808), vec3(_3558, _3559, _3560))) + _3635;
                                float _4746 = isnan(0.0) ? _3641 : (isnan(_3641) ? 0.0 : max(_3641, 0.0));
                                float _3642 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
                                float _3643 = 1.0 - _3610;
                                float _3653 = (0.5 / (((_3642 * ((_3625 * _3643) + _3610)) + 9.9999999392252902907785028219223e-09) + (((_3642 * _3643) + _3610) * _3625))) * _3642;
                                float _4757 = isnan(0.0) ? _3653 : (isnan(_3653) ? 0.0 : max(_3653, 0.0));
                                float _3663 = (_3588 * _3565) * (((_3611 * 3.1415927410125732421875) * (isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0)))) / ((_3633 * _3633) * ((_3578 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3663 * _3445.z;
                                frontier_phi_80_pred_1 = _3663 * _3445.y;
                                frontier_phi_80_pred_2 = _3663 * _3445.x;
                                frontier_phi_80_pred_3 = _3589 * _3433.z;
                                frontier_phi_80_pred_4 = _3589 * _3433.y;
                                frontier_phi_80_pred_5 = _3589 * _3433.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3669 = frontier_phi_80_pred;
                            _3668 = frontier_phi_80_pred_1;
                            _3667 = frontier_phi_80_pred_2;
                            _3672 = frontier_phi_80_pred_3;
                            _3671 = frontier_phi_80_pred_4;
                            _3670 = frontier_phi_80_pred_5;
                            _3375 = _3670 + _3388;
                            _3376 = _3671 + _3389;
                            _3377 = _3672 + _3390;
                            _3372 = _3667 + _3385;
                            _3373 = _3668 + _3386;
                            _3374 = _3669 + _3387;
                            if (_3392 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3385 = _3372;
                                _3386 = _3373;
                                _3387 = _3374;
                                _3388 = _3375;
                                _3389 = _3376;
                                _3390 = _3377;
                                _3391 = _3392;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3374;
                        frontier_phi_74_pred_1 = _3373;
                        frontier_phi_74_pred_2 = _3372;
                        frontier_phi_74_pred_3 = _3377;
                        frontier_phi_74_pred_4 = _3376;
                        frontier_phi_74_pred_5 = _3375;
                    }
                    _3039 = frontier_phi_74_pred;
                    _3037 = frontier_phi_74_pred_1;
                    _3035 = frontier_phi_74_pred_2;
                    _3045 = frontier_phi_74_pred_3;
                    _3043 = frontier_phi_74_pred_4;
                    _3041 = frontier_phi_74_pred_5;
                    uint _3180 = _3179 + 1u;
                    if (_3180 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3173 = _3035;
                        _3174 = _3037;
                        _3175 = _3039;
                        _3176 = _3041;
                        _3177 = _3043;
                        _3178 = _3045;
                        _3179 = _3180;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _3043;
                frontier_phi_62_63_ladder_1 = _3041;
                frontier_phi_62_63_ladder_2 = _3039;
                frontier_phi_62_63_ladder_3 = _3045;
                frontier_phi_62_63_ladder_4 = _3037;
                frontier_phi_62_63_ladder_5 = _3035;
            }
            else
            {
                frontier_phi_62_63_ladder = _2930;
                frontier_phi_62_63_ladder_1 = _2928;
                frontier_phi_62_63_ladder_2 = _2926;
                frontier_phi_62_63_ladder_3 = _2932;
                frontier_phi_62_63_ladder_4 = _2924;
                frontier_phi_62_63_ladder_5 = _2922;
            }
            _3034 = frontier_phi_62_63_ladder_5;
            _3036 = frontier_phi_62_63_ladder_4;
            _3038 = frontier_phi_62_63_ladder_2;
            _3040 = frontier_phi_62_63_ladder_1;
            _3042 = frontier_phi_62_63_ladder;
            _3044 = frontier_phi_62_63_ladder_3;
        }
        float _3049 = isnan(1.0) ? _846 : (isnan(_846) ? 1.0 : min(_846, 1.0));
        _2855 = (_3049 * _3040) + _2387;
        _2857 = (_3049 * _3042) + _2389;
        _2859 = (_3049 * _3044) + _2391;
        _2861 = ((_3034 * 0.039999999105930328369140625) * _3049) + _2710;
        _2863 = ((_3036 * 0.039999999105930328369140625) * _3049) + _2712;
        _2865 = ((_3038 * 0.039999999105930328369140625) * _3049) + _2714;
    }
    else
    {
        _2855 = _2387;
        _2857 = _2389;
        _2859 = _2391;
        _2861 = _2710;
        _2863 = _2712;
        _2865 = _2714;
    }
    float _4773 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _4784 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _4795 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    uint _2885 = _821 + 6u;
    float _2893 = _783 / cbSceneParam._m0[86u].x;
    float _2894 = _784 / cbSceneParam._m0[86u].y;
    vec4 _2908 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2893, _2894, (log2((isnan(cbSceneParam._m0[77u].w) ? _718 : (isnan(_718) ? cbSceneParam._m0[77u].w : min(_718, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2910 = _2908.x;
    float _2911 = _2908.y;
    float _2912 = _2908.z;
    float _2913 = _2908.w;
    float _2984;
    float _2986;
    float _2988;
    float _2990;
    if (_718 > cbSceneParam._m0[78u].w)
    {
        float _2947 = isnan(_718) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _718 : min(cbSceneParam._m0[80u].w, _718));
        float _2948 = _2947 / _718;
        float _2959 = _2948 * _768;
        float _2960 = _769 * _2948;
        float _2961 = (-0.0) - _2960;
        float _2962 = _2948 * _770;
        float _2964 = (cbSceneParam._m0[77u].w * _2961) / _2947;
        float _2965 = _2964 + cbSceneParam._m0[79u].w;
        float _2966 = cbSceneParam._m0[79u].w - _2960;
        float _2972 = sqrt(((_2959 * _2959) + (_2960 * _2960)) + (_2962 * _2962));
        float _2975 = (1.0 - (cbSceneParam._m0[77u].w / _2947)) * _2972;
        float _2980 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2982 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3135;
        if (abs((_2961 - _2964) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3135 = ((((_2965 > 0.0) ? exp2(_2980 * _2965) : (2.0 - exp2(_2982 * _2965))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2975;
        }
        else
        {
            float _3095 = 1.0 / cbSceneParam._m0[80u].x;
            float _3096 = isnan(_2966) ? _2965 : (isnan(_2965) ? _2966 : max(_2965, _2966));
            float _3097 = isnan(_2966) ? _2965 : (isnan(_2965) ? _2966 : min(_2965, _2966));
            float _3106 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : min(_3096, 0.0));
            float _3107 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : min(_3097, 0.0));
            _3135 = ((abs(_2972 / _2961) * cbSceneParam._m0[80u].y) * ((((_3106 - _3107) * 2.0) - ((exp2(_2980 * (isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0)))) - exp2(_2980 * (isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0))))) * _3095)) - ((exp2(_2982 * _3106) - exp2(_2982 * _3107)) * _3095))) + (_2975 * cbSceneParam._m0[80u].z);
        }
        vec4 _3137 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2893, _2894, 1.0), 0.0);
        float _3146 = exp2((_3135 * (-1.44269502162933349609375)) * (1.0 - _3137.w));
        float _3147 = log2(_3146);
        float _3163 = log2(_2913);
        _2984 = (exp2(_3163 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3147 * cbSceneParam._m0[78u].x)) * _3137.x) / cbSceneParam._m0[78u].x)) + _2910;
        _2986 = (exp2(_3163 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3147 * cbSceneParam._m0[78u].y)) * _3137.y) / cbSceneParam._m0[78u].y)) + _2911;
        _2988 = (exp2(_3163 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3147 * cbSceneParam._m0[78u].z)) * _3137.z) / cbSceneParam._m0[78u].z)) + _2912;
        _2990 = _3146 * _2913;
    }
    else
    {
        _2984 = _2910;
        _2986 = _2911;
        _2988 = _2912;
        _2990 = _2913;
    }
    float _3002 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3003 = _3002 == 3.0;
    float _3004 = log2(_2990);
    float _3011 = exp2(_3004 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0))) * (_2855 + ((isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0))) * _846))) + ((_2861 + ((isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0))) * _1653)) * cbPerFrame._m0[3u].x));
    float _3012 = exp2(_3004 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0))) * (_2857 + ((isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0))) * _846))) + ((_2863 + ((isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0))) * _1653)) * cbPerFrame._m0[3u].x));
    float _3013 = exp2(_3004 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0))) * (_2859 + ((isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0))) * _846))) + ((_2865 + ((isnan(0.0) ? _1874 : (isnan(_1874) ? 0.0 : max(_1874, 0.0))) * _1653)) * cbPerFrame._m0[3u].x));
    float _3022 = (_3002 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3022 * (_3003 ? _3011 : (_3011 + (cbSceneParam._m0[72u].w * _2984)));
    SV_Target.y = _3022 * (_3003 ? _3012 : (_3012 + (cbSceneParam._m0[72u].w * _2986)));
    SV_Target.z = _3022 * (_3003 ? _3013 : (_3013 + (cbSceneParam._m0[72u].w * _2988)));
    SV_Target.w = cbInstanceData._m0[_2885].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2885].w;
}


