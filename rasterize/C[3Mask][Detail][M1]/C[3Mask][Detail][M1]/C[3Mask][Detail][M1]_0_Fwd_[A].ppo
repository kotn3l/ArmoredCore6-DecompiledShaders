#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_20;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1397;
float _3780;
float _3781;
float _3782;
float _3783;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _264 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _270 = _264.x * cbMtdParam._m0[10u].x;
    float _271 = _264.y * cbMtdParam._m0[10u].y;
    float _272 = _264.z * cbMtdParam._m0[10u].z;
    vec4 _290 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _340 = cbMtdParam._m0[18u].y * texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x;
    float _351 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].x * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].y * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _340)) + 1.0;
    float _3792 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _352 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
    float _359 = (_352 * ((_290.x * cbMtdParam._m0[11u].x) - _270)) + _270;
    float _360 = (_352 * ((_290.y * cbMtdParam._m0[11u].y) - _271)) + _271;
    float _361 = (_352 * ((_290.z * cbMtdParam._m0[11u].z) - _272)) + _272;
    vec4 _379 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _406 = ((cbMtdParam._m0[17u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _340)) + 1.0;
    float _3803 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _407 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
    float _414 = (_407 * ((_379.x * cbMtdParam._m0[12u].x) - _359)) + _359;
    float _415 = (_407 * ((_379.y * cbMtdParam._m0[12u].y) - _360)) + _360;
    float _416 = (_407 * ((_379.z * cbMtdParam._m0[12u].z) - _361)) + _361;
    vec4 _433 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _458 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[18u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[18u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _340)) + 1.0;
    float _3814 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _459 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
    vec4 _487 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _495 = ((((_459 * ((_433.x * cbMtdParam._m0[13u].x) - _414)) + _414) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _487.x;
    float _498 = ((((_459 * ((_433.y * cbMtdParam._m0[13u].y) - _415)) + _415) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _487.y;
    float _501 = ((((_459 * ((_433.z * cbMtdParam._m0[13u].z) - _416)) + _416) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _487.z;
    vec4 _521 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _550 = (TEXCOORD_5.x - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.z) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.w) + cbTextureTilingScale._m0[18u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].z + 1.0);
    float _3825 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _551 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
    float _558 = (_551 * ((_521.x * cbMtdParam._m0[14u].x) - _495)) + _495;
    float _559 = (_551 * ((_521.y * cbMtdParam._m0[14u].y) - _498)) + _498;
    float _560 = (_551 * ((_521.z * cbMtdParam._m0[14u].z) - _501)) + _501;
    vec4 _573 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _575 = _573.x;
    float _593 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _575) * _352) + _575;
    float _610 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _593) * _407) + _593;
    float _627 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _610) * _459) + _610;
    float _629 = _627 - (_627 * TEXCOORD_5.x);
    vec4 _642 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _664 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _666 = _664.x;
    float _667 = _664.y;
    float _670 = cbMtdParam._m0[17u].y * _664.z;
    vec4 _682 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _691 = (((cbMtdParam._m0[17u].x * _682.z) - _670) * _352) + _670;
    vec4 _704 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _716 = (((cbMtdParam._m0[16u].w * _704.z) - _691) * _407) + _691;
    vec4 _729 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _738 = (((cbMtdParam._m0[16u].z * _729.z) - _716) * _459) + _716;
    float _743 = ((cbMtdParam._m0[16u].x * TEXCOORD_5.x) * ((_642.z * cbMtdParam._m0[17u].z) - _738)) + _738;
    vec4 _756 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _768 = ((_682.x - _666) * _352) + _666;
    float _769 = ((_682.y - _667) * _352) + _667;
    float _774 = ((_704.x - _768) * _407) + _768;
    float _775 = ((_704.y - _769) * _407) + _769;
    float _784 = ((((_729.x - _774) * _459) + _774) * 2.0) + (-1.0);
    float _785 = ((((_729.y - _775) * _459) + _775) * 2.0) + (-1.0);
    float _786 = dot(vec2(_784, _785), vec2(_784, _785));
    float _3836 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _791 = sqrt(1.0 - (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))));
    float _801 = ((((_756.x * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _784) + ((((_642.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[15u].y);
    float _802 = ((((_756.y * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _785) + ((((_642.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[15u].y);
    float _805 = fma(_791, _234 * NORMAL.x, fma(_802, _241 * TANGENT.x, (_227 * _219) * _801));
    float _808 = fma(_791, _234 * NORMAL.y, fma(_802, _241 * TANGENT.y, (_227 * _220) * _801));
    float _811 = fma(_791, _234 * NORMAL.z, fma(_802, _241 * TANGENT.z, (_227 * _221) * _801));
    float _815 = inversesqrt(dot(vec3(_805, _808, _811), vec3(_805, _808, _811)));
    float _816 = _815 * _805;
    float _817 = _815 * _808;
    float _818 = _815 * _811;
    float _3847 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _819 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
    float _3858 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _3869 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _3880 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _3891 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _823 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
    float _839 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _879 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _889 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _879);
    float _890 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _879);
    float _891 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _879);
    float _895 = inversesqrt(dot(vec3(_889, _890, _891), vec3(_889, _890, _891)));
    float _896 = _889 * _895;
    float _897 = _890 * _895;
    float _898 = _891 * _895;
    vec4 _903 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _905 = _903.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1077 = sqrt(((_889 * _889) + (_890 * _890)) + (_891 * _891));
        float _1083 = (cbMatDynParam._m0[5u].x * _1077) + cbMatDynParam._m0[5u].y;
        float _3902 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1088 = (cbMatDynParam._m0[5u].z * _1077) + cbMatDynParam._m0[5u].w;
        float _3913 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))) - _1084)) + _1084) < ((_905 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _916 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _917 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _935 = fma(_818, cbSceneParam._m0[5u].z, fma(_817, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _816));
    float _938 = fma(_818, cbSceneParam._m0[6u].z, fma(_817, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _816));
    float _941 = fma(_818, cbSceneParam._m0[7u].z, fma(_817, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _816));
    uint _954 = uint(roundEven(NORMAL.w)) * 13u;
    uint _955 = _954 + 9u;
    uint _956 = _955 + uint(cbMatDynParam._m0[0u].w);
    float _962 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0)))) * cbInstanceData._m0[_956].x;
    float _963 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0)))) * cbInstanceData._m0[_956].y;
    float _964 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0)))) * cbInstanceData._m0[_956].z;
    float _3924 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _965 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _3935 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    float _966 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
    float _3946 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _967 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
    float _968 = 1.0 - _823;
    float _969 = _965 * _968;
    float _970 = _966 * _968;
    float _971 = _967 * _968;
    float _976 = (_965 + (-0.039999999105930328369140625)) * _823;
    float _977 = (_966 + (-0.039999999105930328369140625)) * _823;
    float _978 = (_967 + (-0.039999999105930328369140625)) * _823;
    float _979 = _976 + 0.039999999105930328369140625;
    float _981 = _977 + 0.039999999105930328369140625;
    float _982 = _978 + 0.039999999105930328369140625;
    vec4 _991 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _916, cbSceneParam._m0[86u].y * _917));
    float _994 = _991.x * TEXCOORD_5.w;
    float _995 = dot(vec3(_816, _817, _818), vec3(_896, _897, _898));
    float _998 = _995 * 2.0;
    float _1002 = (_998 * _816) - _896;
    float _1003 = (_998 * _817) - _897;
    float _1004 = (_998 * _818) - _898;
    float _1008 = abs(dot(vec3(_896, _897, _898), vec3(_816, _817, _818)));
    float _3957 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
    float _1010 = sqrt(_819);
    float _1023 = exp2((_1010 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1010 * 3.0));
    float _1029 = (1.0 - _1023) * ((_1010 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1030 = _1023 * _1010;
    float _1058 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1062 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1066 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1396;
    float _1398;
    float _1399;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1121 = fma(_1066, cbModelParam._m0[26u].z, fma(_1062, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1058));
        float _1125 = fma(_1066, cbModelParam._m0[27u].z, fma(_1062, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1058));
        float _1129 = fma(_1066, cbModelParam._m0[28u].z, fma(_1062, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1058));
        float _1154 = _1058 + _816;
        float _1155 = _1062 + _817;
        float _1156 = _1066 + _818;
        float _1166 = fma(_1156, cbModelParam._m0[26u].z, fma(_1155, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1154)) - _1121;
        float _1167 = fma(_1156, cbModelParam._m0[27u].z, fma(_1155, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1154)) - _1125;
        float _1168 = fma(_1156, cbModelParam._m0[28u].z, fma(_1155, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1154)) - _1129;
        float _1172 = inversesqrt(dot(vec3(_1166, _1167, _1168), vec3(_1166, _1167, _1168)));
        float _1185 = ((_1172 * _1166) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1121 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1186 = ((_1172 * _1167) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1125 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1187 = ((_1172 * _1168) / cbModelParam._m0[34u].z) + ((((((_1129 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1190 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1197 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1204 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        vec4 _1211 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1185, _1186, _1187), 0.0);
        float _1224 = exp2((_1190.w + (-0.5)) * 20.0) * 2.0;
        float _1225 = _1224 * (_1190.x + (-0.5));
        float _1226 = _1224 * (_1190.y + (-0.5));
        float _1227 = _1224 * (_1190.z + (-0.5));
        float _1234 = exp2((_1197.w + (-0.5)) * 20.0) * 2.0;
        float _1235 = _1234 * (_1197.x + (-0.5));
        float _1236 = _1234 * (_1197.y + (-0.5));
        float _1237 = _1234 * (_1197.z + (-0.5));
        float _1244 = exp2((_1204.w + (-0.5)) * 20.0) * 2.0;
        float _1245 = _1244 * (_1204.x + (-0.5));
        float _1246 = _1244 * (_1204.y + (-0.5));
        float _1247 = _1244 * (_1204.z + (-0.5));
        float _1254 = exp2((_1211.w + (-0.5)) * 20.0) * 2.0;
        float _1255 = _1254 * (_1211.x + (-0.5));
        float _1256 = _1254 * (_1211.y + (-0.5));
        float _1257 = _1254 * (_1211.z + (-0.5));
        float _1258 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1259 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1260 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1261 = _1225 * 0.5;
        float _1262 = _1235 * 0.5;
        float _1263 = _1245 * 0.5;
        float _1264 = dot(vec3(_1261, _1262, _1263), vec3(_1261, _1262, _1263));
        float _1269 = (_1264 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1264);
        float _1278 = (dot(vec3(_816, _817, _818), vec3(_1269 * _1261, _1269 * _1262, _1269 * _1263)) + 1.0) * 0.5;
        float _3983 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1288 = sqrt(((_1262 * _1262) + (_1261 * _1261)) + (_1263 * _1263)) / (_1258 + 9.9999997473787516355514526367188e-06);
        float _3994 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _1290 = _1289 * 2.0;
        float _1294 = (1.0 - _1289) / (_1289 + 1.0);
        float _4005 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1304 = ((((1.0 - _1295) * (_1290 + 2.0)) * exp2(log2(isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * (_1290 + 1.0))) + _1295) * _1258;
        float _1305 = _1226 * 0.5;
        float _1306 = _1236 * 0.5;
        float _1307 = _1246 * 0.5;
        float _1308 = dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307));
        float _1313 = (_1308 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1308);
        float _1321 = (dot(vec3(_816, _817, _818), vec3(_1313 * _1305, _1313 * _1306, _1313 * _1307)) + 1.0) * 0.5;
        float _4016 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1330 = sqrt(((_1306 * _1306) + (_1305 * _1305)) + (_1307 * _1307)) / (_1259 + 9.9999997473787516355514526367188e-06);
        float _4027 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1332 = _1331 * 2.0;
        float _1336 = (1.0 - _1331) / (_1331 + 1.0);
        float _4038 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1346 = ((((1.0 - _1337) * (_1332 + 2.0)) * exp2(log2(isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_1332 + 1.0))) + _1337) * _1259;
        float _1347 = _1227 * 0.5;
        float _1348 = _1237 * 0.5;
        float _1349 = _1247 * 0.5;
        float _1350 = dot(vec3(_1347, _1348, _1349), vec3(_1347, _1348, _1349));
        float _1355 = (_1350 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1350);
        float _1363 = (dot(vec3(_816, _817, _818), vec3(_1355 * _1347, _1355 * _1348, _1355 * _1349)) + 1.0) * 0.5;
        float _4049 = isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0));
        float _1372 = sqrt(((_1348 * _1348) + (_1347 * _1347)) + (_1349 * _1349)) / (_1260 + 9.9999997473787516355514526367188e-06);
        float _4060 = isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0));
        float _1373 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
        float _1374 = _1373 * 2.0;
        float _1378 = (1.0 - _1373) / (_1373 + 1.0);
        float _4071 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1388 = ((((1.0 - _1379) * (_1374 + 2.0)) * exp2(log2(isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) * (_1374 + 1.0))) + _1379) * _1260;
        _1396 = _1227;
        _1398 = _1226;
        _1399 = _1225;
        _1400 = _1237;
        _1401 = _1236;
        _1402 = _1235;
        _1403 = _1247;
        _1404 = _1246;
        _1405 = _1245;
        _1406 = _1260;
        _1407 = _1259;
        _1408 = _1258;
        _1409 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)));
        _1410 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)));
        _1411 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0)));
    }
    else
    {
        _1396 = _1397;
        _1398 = _1397;
        _1399 = _1397;
        _1400 = _1397;
        _1401 = _1397;
        _1402 = _1397;
        _1403 = _1397;
        _1404 = _1397;
        _1405 = _1397;
        _1406 = _1397;
        _1407 = _1397;
        _1408 = _1397;
        _1409 = 0.0;
        _1410 = 0.0;
        _1411 = 0.0;
    }
    float _1709;
    float _1710;
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1440 = fma(_1066, cbModelParam._m0[30u].z, fma(_1062, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1058));
        float _1444 = fma(_1066, cbModelParam._m0[31u].z, fma(_1062, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1058));
        float _1448 = fma(_1066, cbModelParam._m0[32u].z, fma(_1062, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1058));
        float _1471 = _1058 + _816;
        float _1472 = _1062 + _817;
        float _1473 = _1066 + _818;
        float _1483 = fma(_1473, cbModelParam._m0[30u].z, fma(_1472, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1471)) - _1440;
        float _1484 = fma(_1473, cbModelParam._m0[31u].z, fma(_1472, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1471)) - _1444;
        float _1485 = fma(_1473, cbModelParam._m0[32u].z, fma(_1472, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1471)) - _1448;
        float _1489 = inversesqrt(dot(vec3(_1483, _1484, _1485), vec3(_1483, _1484, _1485)));
        float _1502 = ((_1489 * _1483) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1440 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1503 = ((_1489 * _1484) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1444 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1504 = ((_1489 * _1485) / cbModelParam._m0[35u].z) + ((((((_1448 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1506 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1502, _1503, _1504), 0.0);
        vec4 _1513 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1502, _1503, _1504), 0.0);
        vec4 _1520 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1502, _1503, _1504), 0.0);
        vec4 _1527 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1502, _1503, _1504), 0.0);
        float _1539 = exp2((_1506.w + (-0.5)) * 20.0) * 2.0;
        float _1540 = _1539 * (_1506.x + (-0.5));
        float _1541 = _1539 * (_1506.y + (-0.5));
        float _1542 = _1539 * (_1506.z + (-0.5));
        float _1549 = exp2((_1513.w + (-0.5)) * 20.0) * 2.0;
        float _1550 = _1549 * (_1513.x + (-0.5));
        float _1551 = _1549 * (_1513.y + (-0.5));
        float _1552 = _1549 * (_1513.z + (-0.5));
        float _1559 = exp2((_1520.w + (-0.5)) * 20.0) * 2.0;
        float _1560 = _1559 * (_1520.x + (-0.5));
        float _1561 = _1559 * (_1520.y + (-0.5));
        float _1562 = _1559 * (_1520.z + (-0.5));
        float _1569 = exp2((_1527.w + (-0.5)) * 20.0) * 2.0;
        float _1570 = _1569 * (_1527.x + (-0.5));
        float _1571 = _1569 * (_1527.y + (-0.5));
        float _1572 = _1569 * (_1527.z + (-0.5));
        float _1573 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1574 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1575 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1576 = _1540 * 0.5;
        float _1577 = _1550 * 0.5;
        float _1578 = _1560 * 0.5;
        float _1579 = dot(vec3(_1576, _1577, _1578), vec3(_1576, _1577, _1578));
        float _1584 = (_1579 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1579);
        float _1592 = (dot(vec3(_816, _817, _818), vec3(_1584 * _1576, _1584 * _1577, _1584 * _1578)) + 1.0) * 0.5;
        float _4112 = isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0));
        float _1601 = sqrt(((_1577 * _1577) + (_1576 * _1576)) + (_1578 * _1578)) / (_1573 + 9.9999997473787516355514526367188e-06);
        float _4123 = isnan(0.0) ? _1601 : (isnan(_1601) ? 0.0 : max(_1601, 0.0));
        float _1602 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _1603 = _1602 * 2.0;
        float _1607 = (1.0 - _1602) / (_1602 + 1.0);
        float _4134 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1608 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1617 = ((((1.0 - _1608) * (_1603 + 2.0)) * exp2(log2(isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * (_1603 + 1.0))) + _1608) * _1573;
        float _1618 = _1541 * 0.5;
        float _1619 = _1551 * 0.5;
        float _1620 = _1561 * 0.5;
        float _1621 = dot(vec3(_1618, _1619, _1620), vec3(_1618, _1619, _1620));
        float _1626 = (_1621 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1621);
        float _1634 = (dot(vec3(_816, _817, _818), vec3(_1626 * _1618, _1626 * _1619, _1626 * _1620)) + 1.0) * 0.5;
        float _4145 = isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0));
        float _1643 = sqrt(((_1619 * _1619) + (_1618 * _1618)) + (_1620 * _1620)) / (_1574 + 9.9999997473787516355514526367188e-06);
        float _4156 = isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0));
        float _1644 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1645 = _1644 * 2.0;
        float _1649 = (1.0 - _1644) / (_1644 + 1.0);
        float _4167 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
        float _1650 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1659 = ((((1.0 - _1650) * (_1645 + 2.0)) * exp2(log2(isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_1645 + 1.0))) + _1650) * _1574;
        float _1660 = _1542 * 0.5;
        float _1661 = _1552 * 0.5;
        float _1662 = _1562 * 0.5;
        float _1663 = dot(vec3(_1660, _1661, _1662), vec3(_1660, _1661, _1662));
        float _1668 = (_1663 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1663);
        float _1676 = (dot(vec3(_816, _817, _818), vec3(_1668 * _1660, _1668 * _1661, _1668 * _1662)) + 1.0) * 0.5;
        float _4178 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
        float _1685 = sqrt(((_1661 * _1661) + (_1660 * _1660)) + (_1662 * _1662)) / (_1575 + 9.9999997473787516355514526367188e-06);
        float _4189 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
        float _1686 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1687 = _1686 * 2.0;
        float _1691 = (1.0 - _1686) / (_1686 + 1.0);
        float _4200 = isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0));
        float _1692 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
        float _1701 = ((((1.0 - _1692) * (_1687 + 2.0)) * exp2(log2(isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0))) * (_1687 + 1.0))) + _1692) * _1575;
        _1709 = _1542;
        _1710 = _1541;
        _1711 = _1540;
        _1712 = _1552;
        _1713 = _1551;
        _1714 = _1550;
        _1715 = _1562;
        _1716 = _1561;
        _1717 = _1560;
        _1718 = _1575;
        _1719 = _1574;
        _1720 = _1573;
        _1721 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)));
        _1722 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0)));
        _1723 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0)));
    }
    else
    {
        _1709 = _1397;
        _1710 = _1397;
        _1711 = _1397;
        _1712 = _1397;
        _1713 = _1397;
        _1714 = _1397;
        _1715 = _1397;
        _1716 = _1397;
        _1717 = _1397;
        _1718 = _1397;
        _1719 = _1397;
        _1720 = _1397;
        _1721 = 0.0;
        _1722 = 0.0;
        _1723 = 0.0;
    }
    float _1733 = (cbModelParam._m0[1u].x * (_1721 - _1409)) + _1409;
    float _1734 = (cbModelParam._m0[1u].x * (_1722 - _1410)) + _1410;
    float _1735 = (cbModelParam._m0[1u].x * (_1723 - _1411)) + _1411;
    float _1756 = fma(_1735, cbSceneParam._m0[89u].z, fma(_1734, cbSceneParam._m0[89u].y, _1733 * cbSceneParam._m0[89u].x));
    float _1759 = fma(_1735, cbSceneParam._m0[90u].z, fma(_1734, cbSceneParam._m0[90u].y, _1733 * cbSceneParam._m0[90u].x));
    float _1762 = fma(_1735, cbSceneParam._m0[91u].z, fma(_1734, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1733));
    float _1777 = _1002 * 0.5;
    float _1778 = _1003 * 0.5;
    float _1779 = _1004 * 0.5;
    float _1780 = dot(vec4(_1777, _1778, _1779, 1.0), vec4(_1711, _1714, _1717, _1720));
    float _1783 = dot(vec4(_1777, _1778, _1779, 1.0), vec4(_1710, _1713, _1716, _1719));
    float _1786 = dot(vec4(_1777, _1778, _1779, 1.0), vec4(_1709, _1712, _1715, _1718));
    float _1820;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1793 = dot(vec4(_1777, _1778, _1779, 1.0), vec4(_1396, _1400, _1403, _1406));
        float _1797 = dot(vec4(_1777, _1778, _1779, 1.0), vec4(_1398, _1401, _1404, _1407));
        float _1801 = dot(vec4(_1777, _1778, _1779, 1.0), vec4(_1399, _1402, _1405, _1408));
        float _1808 = dot(vec4(cbModelParam._m0[39u]), vec4(_1777, _1778, _1779, 1.0));
        _1820 = dot(vec3(isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0)), isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0)), isnan(0.0) ? _1793 : (isnan(_1793) ? 0.0 : max(_1793, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1808) ? 0.0 : (isnan(0.0) ? _1808 : max(0.0, _1808))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1820 = 1.0;
    }
    float _1831;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1822 = dot(vec4(cbModelParam._m0[40u]), vec4(_1777, _1778, _1779, 1.0));
        _1831 = dot(vec3(isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0)), isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0)), isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1822) ? 0.0 : (isnan(0.0) ? _1822 : max(0.0, _1822))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1831 = 1.0;
    }
    float _1835 = (_1831 * cbModelParam._m0[1u].x) + (_1820 * (1.0 - cbModelParam._m0[1u].x));
    float _1845 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _819);
    float _1846 = isnan(_1845) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1845 : min(cbModelParam._m0[25u].z, _1845));
    float _1926;
    float _1928;
    float _1930;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1893 = fma(_1066, cbModelParam._m0[13u].z, fma(_1062, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1058)) + cbModelParam._m0[13u].w;
        float _1897 = fma(_1066, cbModelParam._m0[14u].z, fma(_1062, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1058)) + cbModelParam._m0[14u].w;
        float _1901 = fma(_1066, cbModelParam._m0[15u].z, fma(_1062, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1058)) + cbModelParam._m0[15u].w;
        float _1904 = fma(_1004, cbModelParam._m0[13u].z, fma(_1003, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1002));
        float _1907 = fma(_1004, cbModelParam._m0[14u].z, fma(_1003, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1002));
        float _1910 = fma(_1004, cbModelParam._m0[15u].z, fma(_1003, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1002));
        float _1938;
        if (_1904 > 0.0)
        {
            _1938 = abs((1.0 - _1893) / _1904);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1904 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1893 + 1.0) / _1904);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1938 = frontier_phi_17_15_ladder;
        }
        float _2142;
        if (_1907 > 0.0)
        {
            _2142 = abs((1.0 - _1897) / _1907);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1907 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1897 + 1.0) / _1907);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2142 = frontier_phi_26_22_ladder;
        }
        float _2396;
        if (_1910 > 0.0)
        {
            _2396 = abs((1.0 - _1901) / _1910);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1910 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1901 + 1.0) / _1910);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2396 = frontier_phi_38_33_ladder;
        }
        float _2398 = isnan(_2142) ? _1938 : (isnan(_1938) ? _2142 : min(_1938, _2142));
        float _2399 = isnan(_2396) ? _2398 : (isnan(_2398) ? _2396 : min(_2398, _2396));
        float _2403 = (_2399 * _1904) + _1893;
        float _2404 = (_2399 * _1907) + _1897;
        float _2405 = (_2399 * _1910) + _1901;
        float _2406 = _2399 * 9.9999997473787516355514526367188e-05;
        float _2408 = (-1.0) - _2406;
        float _2410 = _2406 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2405 > _2410) || ((_2405 < _2408) || ((_2404 > _2410) || ((_2404 < _2408) || ((_2403 < _2408) || (_2403 > _2410))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2533 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2405, cbModelParam._m0[9u].z, fma(_2404, cbModelParam._m0[9u].y, _2403 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2405, cbModelParam._m0[10u].z, fma(_2404, cbModelParam._m0[10u].y, _2403 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2405, cbModelParam._m0[11u].z, fma(_2404, cbModelParam._m0[11u].y, _2403 * cbModelParam._m0[11u].x))), _1846);
            frontier_phi_16_38_ladder = _2533.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2533.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2533.x * cbModelParam._m0[1u].y;
        }
        _1926 = frontier_phi_16_38_ladder_2;
        _1928 = frontier_phi_16_38_ladder_1;
        _1930 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1914 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1002, _1003, _1004), _1846);
        _1926 = _1914.x * cbModelParam._m0[1u].y;
        _1928 = _1914.y * cbModelParam._m0[1u].y;
        _1930 = _1914.z * cbModelParam._m0[1u].y;
    }
    float _1934 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _819);
    float _1935 = isnan(_1934) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1934 : min(cbModelParam._m0[25u].w, _1934));
    float _2026;
    float _2028;
    float _2030;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1990 = fma(_1066, cbModelParam._m0[21u].z, fma(_1062, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1058)) + cbModelParam._m0[21u].w;
        float _1994 = fma(_1066, cbModelParam._m0[22u].z, fma(_1062, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1058)) + cbModelParam._m0[22u].w;
        float _1998 = fma(_1066, cbModelParam._m0[23u].z, fma(_1062, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1058)) + cbModelParam._m0[23u].w;
        float _2001 = fma(_1004, cbModelParam._m0[21u].z, fma(_1003, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1002));
        float _2004 = fma(_1004, cbModelParam._m0[22u].z, fma(_1003, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1002));
        float _2007 = fma(_1004, cbModelParam._m0[23u].z, fma(_1003, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1002));
        float _2147;
        if (_2001 > 0.0)
        {
            _2147 = abs((1.0 - _1990) / _2001);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2001 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1990 + 1.0) / _2001);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2147 = frontier_phi_28_24_ladder;
        }
        float _2423;
        if (_2004 > 0.0)
        {
            _2423 = abs((1.0 - _1994) / _2004);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2004 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1994 + 1.0) / _2004);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2423 = frontier_phi_40_35_ladder;
        }
        float _2636;
        if (_2007 > 0.0)
        {
            _2636 = abs((1.0 - _1998) / _2007);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2007 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1998 + 1.0) / _2007);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2636 = frontier_phi_49_46_ladder;
        }
        float _2638 = isnan(_2423) ? _2147 : (isnan(_2147) ? _2423 : min(_2147, _2423));
        float _2639 = isnan(_2636) ? _2638 : (isnan(_2638) ? _2636 : min(_2638, _2636));
        float _2643 = (_2639 * _2001) + _1990;
        float _2644 = (_2639 * _2004) + _1994;
        float _2645 = (_2639 * _2007) + _1998;
        float _2646 = _2639 * 9.9999997473787516355514526367188e-05;
        float _2647 = (-1.0) - _2646;
        float _2649 = _2646 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2645 > _2649) || ((_2645 < _2647) || ((_2644 > _2649) || ((_2644 < _2647) || ((_2643 < _2647) || (_2643 > _2649))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2844 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2645, cbModelParam._m0[17u].z, fma(_2644, cbModelParam._m0[17u].y, _2643 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2645, cbModelParam._m0[18u].z, fma(_2644, cbModelParam._m0[18u].y, _2643 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2645, cbModelParam._m0[19u].z, fma(_2644, cbModelParam._m0[19u].y, _2643 * cbModelParam._m0[19u].x))), _1935);
            frontier_phi_25_49_ladder = _2844.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2844.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2844.x * cbModelParam._m0[1u].z;
        }
        _2026 = frontier_phi_25_49_ladder_2;
        _2028 = frontier_phi_25_49_ladder_1;
        _2030 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2010 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1002, _1003, _1004), _1935);
        _2026 = _2010.x * cbModelParam._m0[1u].z;
        _2028 = _2010.y * cbModelParam._m0[1u].z;
        _2030 = _2010.z * cbModelParam._m0[1u].z;
    }
    float _2043 = (((_1029 * _979) + _1030) * _994) * ((cbModelParam._m0[1u].w * (_2026 - _1926)) + _1926);
    float _2045 = (((_1029 * _981) + _1030) * _994) * ((cbModelParam._m0[1u].w * (_2028 - _1928)) + _1928);
    float _2047 = (((_1029 * _982) + _1030) * _994) * ((cbModelParam._m0[1u].w * (_2030 - _1930)) + _1930);
    float _2050 = fma(_2047, cbSceneParam._m0[89u].z, fma(_2045, cbSceneParam._m0[89u].y, _2043 * cbSceneParam._m0[89u].x));
    float _2053 = fma(_2047, cbSceneParam._m0[90u].z, fma(_2045, cbSceneParam._m0[90u].y, _2043 * cbSceneParam._m0[90u].x));
    float _2056 = fma(_2047, cbSceneParam._m0[91u].z, fma(_2045, cbSceneParam._m0[91u].y, _2043 * cbSceneParam._m0[91u].x));
    uvec4 _2066 = floatBitsToUint(cbInstanceData._m0[_954 + 5u]);
    uint _2068 = _2066.x * 14u;
    uint _2069 = _2068 + 13u;
    float _2076 = _994 + (-1.0);
    float _2081 = (cbLight._m0[_2069].x * _2076) + 1.0;
    float _2082 = (cbLight._m0[_2069].y * _2076) + 1.0;
    float _2083 = (cbLight._m0[_2069].z * _2076) + 1.0;
    float _2084 = (cbLight._m0[_2069].w * _2076) + 1.0;
    uint _2085 = _2068 + 5u;
    float _2091 = isnan(1.0) ? _2082 : (isnan(_2082) ? 1.0 : min(_2082, 1.0));
    uint _2095 = _2068 + 4u;
    float _2101 = isnan(1.0) ? _2081 : (isnan(_2081) ? 1.0 : min(_2081, 1.0));
    uint _2105 = _2068 | 1u;
    float _2116 = dot(vec3(cbLight._m0[_2068].xyz), vec3(_816, _817, _818));
    float _2119 = dot(vec3(cbLight._m0[_2105].xyz), vec3(_816, _817, _818));
    float _4336 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
    float _4347 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0));
    float _2124 = (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * 0.3183098733425140380859375;
    float _2126 = (isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * 0.3183098733425140380859375;
    float _2133 = ((cbLight._m0[_2085].x * _2091) * _2126) + ((cbLight._m0[_2095].x * _2101) * _2124);
    float _2134 = ((_2091 * cbLight._m0[_2085].y) * _2126) + ((_2101 * cbLight._m0[_2095].y) * _2124);
    float _2135 = ((_2091 * cbLight._m0[_2085].z) * _2126) + ((_2101 * cbLight._m0[_2095].z) * _2124);
    uvec4 _2139 = floatBitsToUint(cbLight._m0[_2068 + 12u]);
    bool _2141 = _2139.x == 0u;
    float _2152;
    float _2154;
    float _2156;
    if (_2141)
    {
        _2152 = _2133;
        _2154 = _2134;
        _2156 = _2135;
    }
    else
    {
        uint _2160 = _2068 + 6u;
        float _2176 = (dot(vec3(cbLight._m0[_2068 + 2u].xyz), vec3(_816, _817, _818)) * 0.5) + 0.5;
        float _2177 = _2176 * _2176;
        float _4358 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
        float _2178 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _2179 = isnan(1.0) ? _2083 : (isnan(_2083) ? 1.0 : min(_2083, 1.0));
        _2152 = (((cbLight._m0[_2160].x * 0.3183098733425140380859375) * _2178) * _2179) + _2133;
        _2154 = (((cbLight._m0[_2160].y * 0.3183098733425140380859375) * _2178) * _2179) + _2134;
        _2156 = (((cbLight._m0[_2160].z * 0.3183098733425140380859375) * _2178) * _2179) + _2135;
    }
    bool _2159 = _2139.y == 0u;
    float _2197;
    float _2199;
    float _2201;
    if (_2159)
    {
        _2197 = _2152;
        _2199 = _2154;
        _2201 = _2156;
    }
    else
    {
        uint _2367 = _2068 + 7u;
        float _2383 = (dot(vec3(cbLight._m0[_2068 + 3u].xyz), vec3(_816, _817, _818)) * 0.5) + 0.5;
        float _2384 = _2383 * _2383;
        float _4374 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
        float _2385 = isnan(1.0) ? _4374 : (isnan(_4374) ? 1.0 : min(_4374, 1.0));
        float _2386 = isnan(1.0) ? _2084 : (isnan(_2084) ? 1.0 : min(_2084, 1.0));
        _2197 = (((cbLight._m0[_2367].x * 0.3183098733425140380859375) * _2385) * _2386) + _2152;
        _2199 = (((cbLight._m0[_2367].y * 0.3183098733425140380859375) * _2385) * _2386) + _2154;
        _2201 = (((cbLight._m0[_2367].z * 0.3183098733425140380859375) * _2385) * _2386) + _2156;
    }
    uint _2204 = _2068 + 8u;
    float _2217 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2068].w)) * _819) * 0.949999988079071044921875);
    float _2218 = _2217 * _2217;
    float _2219 = cbLight._m0[_2068].x + _896;
    float _2220 = cbLight._m0[_2068].y + _897;
    float _2221 = cbLight._m0[_2068].z + _898;
    float _2225 = inversesqrt(dot(vec3(_2219, _2220, _2221), vec3(_2219, _2220, _2221)));
    float _2226 = _2225 * _2219;
    float _2227 = _2225 * _2220;
    float _2228 = _2225 * _2221;
    float _2229 = dot(vec3(_816, _817, _818), vec3(cbLight._m0[_2068].xyz));
    float _4390 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
    float _2232 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
    float _4401 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
    float _2233 = isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0));
    float _2234 = dot(vec3(_816, _817, _818), vec3(_2226, _2227, _2228));
    float _4412 = isnan(0.0) ? _2234 : (isnan(_2234) ? 0.0 : max(_2234, 0.0));
    float _2237 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
    float _2238 = dot(vec3(cbLight._m0[_2068].xyz), vec3(_2226, _2227, _2228));
    float _4423 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _2242 = _2218 * _2218;
    float _2246 = ((_2237 * _2237) * (_2242 + (-1.0))) + 1.0;
    float _2254 = exp2(log2(1.0 - (isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0)))) * 5.0);
    float _2255 = 0.959999978542327880859375 - _976;
    float _2257 = 0.959999978542327880859375 - _977;
    float _2258 = 0.959999978542327880859375 - _978;
    float _2265 = 1.0 - _2218;
    float _2276 = (0.5 / (((_2233 * ((_2232 * _2265) + _2218)) + 9.9999999392252902907785028219223e-09) + (((_2233 * _2265) + _2218) * _2232))) * _2232;
    float _4434 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
    float _2278 = (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0))) * (_2242 / ((_2246 * _2246) * 3.141590118408203125));
    uint _2289 = _2068 + 9u;
    float _2300 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2105].w)) * _819) * 0.949999988079071044921875);
    float _2301 = _2300 * _2300;
    float _2302 = cbLight._m0[_2105].x + _896;
    float _2303 = cbLight._m0[_2105].y + _897;
    float _2304 = cbLight._m0[_2105].z + _898;
    float _2308 = inversesqrt(dot(vec3(_2302, _2303, _2304), vec3(_2302, _2303, _2304)));
    float _2309 = _2308 * _2302;
    float _2310 = _2308 * _2303;
    float _2311 = _2308 * _2304;
    float _2312 = dot(vec3(_816, _817, _818), vec3(cbLight._m0[_2105].xyz));
    float _4445 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _2315 = isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0));
    float _2316 = dot(vec3(_816, _817, _818), vec3(_2309, _2310, _2311));
    float _4456 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
    float _2319 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
    float _2320 = dot(vec3(cbLight._m0[_2105].xyz), vec3(_2309, _2310, _2311));
    float _4467 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0));
    float _2324 = _2301 * _2301;
    float _2328 = ((_2319 * _2319) * (_2324 + (-1.0))) + 1.0;
    float _2335 = exp2(log2(1.0 - (isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0)))) * 5.0);
    float _2342 = 1.0 - _2301;
    float _2352 = (0.5 / (((_2233 * ((_2315 * _2342) + _2301)) + 9.9999999392252902907785028219223e-09) + (((_2233 * _2342) + _2301) * _2315))) * _2315;
    float _4478 = isnan(0.0) ? _2352 : (isnan(_2352) ? 0.0 : max(_2352, 0.0));
    float _2354 = (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0))) * (_2324 / ((_2328 * _2328) * 3.141590118408203125));
    float _2364 = (((((_2335 * _2255) + _979) * cbLight._m0[_2289].x) * _2354) * _2091) + (((((_2254 * _2255) + _979) * cbLight._m0[_2204].x) * _2278) * _2101);
    float _2365 = (((((_2335 * _2257) + _981) * cbLight._m0[_2289].y) * _2354) * _2091) + (((((_2254 * _2257) + _981) * cbLight._m0[_2204].y) * _2278) * _2101);
    float _2366 = (((((_2335 * _2258) + _982) * cbLight._m0[_2289].z) * _2354) * _2091) + (((((_2254 * _2258) + _982) * cbLight._m0[_2204].z) * _2278) * _2101);
    float _2428;
    float _2430;
    float _2432;
    if (_2141)
    {
        _2428 = _2364;
        _2430 = _2365;
        _2432 = _2366;
    }
    else
    {
        uint _2434 = _2068 + 2u;
        uint _2438 = _2068 + 10u;
        float _2452 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2434].w)) * _819) * 0.949999988079071044921875);
        float _2453 = _2452 * _2452;
        float _2454 = cbLight._m0[_2434].x + _896;
        float _2455 = cbLight._m0[_2434].y + _897;
        float _2456 = cbLight._m0[_2434].z + _898;
        float _2460 = inversesqrt(dot(vec3(_2454, _2455, _2456), vec3(_2454, _2455, _2456)));
        float _2461 = _2460 * _2454;
        float _2462 = _2460 * _2455;
        float _2463 = _2460 * _2456;
        float _2464 = dot(vec3(_816, _817, _818), vec3(cbLight._m0[_2434].xyz));
        float _4489 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
        float _2467 = isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0));
        float _2468 = dot(vec3(_816, _817, _818), vec3(_2461, _2462, _2463));
        float _4500 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
        float _2471 = isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0));
        float _2472 = dot(vec3(cbLight._m0[_2434].xyz), vec3(_2461, _2462, _2463));
        float _4511 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
        float _2476 = _2453 * _2453;
        float _2480 = ((_2471 * _2471) * (_2476 + (-1.0))) + 1.0;
        float _2487 = exp2(log2(1.0 - (isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0)))) * 5.0);
        float _2494 = 1.0 - _2453;
        float _2504 = (0.5 / (((_2233 * ((_2467 * _2494) + _2453)) + 9.9999999392252902907785028219223e-09) + (((_2233 * _2494) + _2453) * _2467))) * _2467;
        float _4522 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
        float _2506 = (isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0))) * (_2476 / ((_2480 * _2480) * 3.141590118408203125));
        float _2507 = isnan(1.0) ? _2083 : (isnan(_2083) ? 1.0 : min(_2083, 1.0));
        _2428 = (((((_2487 * _2255) + _979) * cbLight._m0[_2438].x) * _2506) * _2507) + _2364;
        _2430 = (((((_2487 * _2257) + _981) * cbLight._m0[_2438].y) * _2506) * _2507) + _2365;
        _2432 = (((((_2487 * _2258) + _982) * cbLight._m0[_2438].z) * _2506) * _2507) + _2366;
    }
    float _2542;
    float _2544;
    float _2546;
    if (_2159)
    {
        _2542 = _2428;
        _2544 = _2430;
        _2546 = _2432;
    }
    else
    {
        uint _2553 = _2068 + 3u;
        uint _2557 = _2068 + 11u;
        float _2571 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2553].w)) * _819) * 0.949999988079071044921875);
        float _2572 = _2571 * _2571;
        float _2573 = cbLight._m0[_2553].x + _896;
        float _2574 = cbLight._m0[_2553].y + _897;
        float _2575 = cbLight._m0[_2553].z + _898;
        float _2579 = inversesqrt(dot(vec3(_2573, _2574, _2575), vec3(_2573, _2574, _2575)));
        float _2580 = _2579 * _2573;
        float _2581 = _2579 * _2574;
        float _2582 = _2579 * _2575;
        float _2583 = dot(vec3(_816, _817, _818), vec3(cbLight._m0[_2553].xyz));
        float _4538 = isnan(0.0) ? _2583 : (isnan(_2583) ? 0.0 : max(_2583, 0.0));
        float _2586 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
        float _2587 = dot(vec3(_816, _817, _818), vec3(_2580, _2581, _2582));
        float _4549 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
        float _2590 = isnan(1.0) ? _4549 : (isnan(_4549) ? 1.0 : min(_4549, 1.0));
        float _2591 = dot(vec3(cbLight._m0[_2553].xyz), vec3(_2580, _2581, _2582));
        float _4560 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
        float _2595 = _2572 * _2572;
        float _2599 = ((_2590 * _2590) * (_2595 + (-1.0))) + 1.0;
        float _2606 = exp2(log2(1.0 - (isnan(1.0) ? _4560 : (isnan(_4560) ? 1.0 : min(_4560, 1.0)))) * 5.0);
        float _2613 = 1.0 - _2572;
        float _2623 = (0.5 / (((_2233 * ((_2586 * _2613) + _2572)) + 9.9999999392252902907785028219223e-09) + (((_2233 * _2613) + _2572) * _2586))) * _2586;
        float _4571 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
        float _2625 = (isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0))) * (_2595 / ((_2599 * _2599) * 3.141590118408203125));
        float _2626 = isnan(1.0) ? _2084 : (isnan(_2084) ? 1.0 : min(_2084, 1.0));
        _2542 = (((((_2606 * _2255) + _979) * cbLight._m0[_2557].x) * _2625) * _2626) + _2428;
        _2544 = (((((_2606 * _2257) + _981) * cbLight._m0[_2557].y) * _2625) * _2626) + _2430;
        _2546 = (((((_2606 * _2258) + _982) * cbLight._m0[_2557].z) * _2625) * _2626) + _2432;
    }
    float _2761;
    float _2763;
    float _2765;
    float _2767;
    float _2769;
    float _2771;
    if (_2066.y == 0u)
    {
        float _2701 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2702 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2701;
        float _2703 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2701;
        float _2704 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2701;
        uvec4 _2716 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2717 = _2716.x;
        uint _2728 = uint((float(_2716.y) * floor(float(uint(cbSceneParam._m0[85u].y * _917) / _2717))) + floor(float(uint(cbSceneParam._m0[85u].x * _916) / _2717)));
        float _2738 = (log2(_2704 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2739 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
        uint _2742 = uint(isnan(14.0) ? _2739 : (isnan(_2739) ? 14.0 : min(_2739, 14.0)));
        uvec4 _2747 = texelFetch(g_lightClusterGridBuffer, int(((_2742 << 2u) + (_2728 << 6u)) >> 2u));
        uint _2748 = _2747.x;
        uint _2749 = _2716.z;
        float _2849;
        float _2851;
        float _2853;
        float _2855;
        float _2857;
        float _2859;
        if (((((1u << ((_2749 >> 4u) & 15u)) + 4294967295u) & _2748) == 0u) || ((_2749 & 240u) == 0u))
        {
            _2849 = 0.0;
            _2851 = 0.0;
            _2853 = 0.0;
            _2855 = 0.0;
            _2857 = 0.0;
            _2859 = 0.0;
        }
        else
        {
            float _2850;
            float _2852;
            float _2854;
            float _2856;
            float _2858;
            float _2860;
            float _3002 = 0.0;
            float _3003 = 0.0;
            float _3004 = 0.0;
            float _3005 = 0.0;
            float _3006 = 0.0;
            float _3007 = 0.0;
            uint _3008 = 0u;
            uint _3017;
            bool _3018;
            for (;;)
            {
                _3017 = texelFetch(g_lightClassification, int((((_2742 << 5u) + (_2728 << 9u)) + (_3008 << 2u)) >> 2u)).x;
                _3018 = _3017 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3018)
                {
                    frontier_phi_66_pred = _3002;
                    frontier_phi_66_pred_1 = _3007;
                    frontier_phi_66_pred_2 = _3006;
                    frontier_phi_66_pred_3 = _3005;
                    frontier_phi_66_pred_4 = _3004;
                    frontier_phi_66_pred_5 = _3003;
                }
                else
                {
                    float _3147;
                    float _3148;
                    float _3149;
                    float _3150;
                    float _3151;
                    float _3152;
                    uint _3153;
                    _3147 = _3002;
                    _3148 = _3003;
                    _3149 = _3004;
                    _3150 = _3005;
                    _3151 = _3006;
                    _3152 = _3007;
                    _3153 = _3017;
                    float _3074;
                    float _3075;
                    float _3076;
                    float _3077;
                    float _3078;
                    float _3079;
                    for (;;)
                    {
                        uint _3157 = uint(findLSB(_3153)) + (_3008 << 5u);
                        uint _3154 = (_3153 + 4294967295u) & _3153;
                        uint _3159 = _3157 * 48u;
                        vec4 _3173 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3159)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3159 + 3u)).x));
                        uint _3179 = (_3157 * 48u) + 4u;
                        vec4 _3192 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3179)).x, texelFetch(g_PointLightRenderingBuffer, int(_3179 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3179 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3179 + 3u)).x));
                        uint _3198 = (_3157 * 48u) + 8u;
                        vec3 _3209 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3198)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3198 + 2u)).x));
                        float _3213 = _3173.x - _2702;
                        float _3214 = _3173.y - _2703;
                        float _3215 = _3173.z - _2704;
                        float _3216 = dot(vec3(_3213, _3214, _3215), vec3(_3213, _3214, _3215));
                        float _3219 = inversesqrt(_3216);
                        float _3220 = _3219 * _3213;
                        float _3221 = _3219 * _3214;
                        float _3222 = _3219 * _3215;
                        float _3223 = dot(vec3(_935, _938, _941), vec3(_3220, _3221, _3222));
                        float _3228 = 1.0 - (_3216 * _3173.w);
                        float _4597 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                        float _3229 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
                        float _3230 = sqrt(_3216) * _3192.w;
                        float _3233 = 1.39999997615814208984375 / (_3230 + 1.39999997615814208984375);
                        float _3234 = _3233 * _3233;
                        float _3237 = ((1.0 - _3234) * _3223) + _3234;
                        float _3240 = _3230 * _3230;
                        float _3244 = ((isnan(0.0) ? _3237 : (isnan(_3237) ? 0.0 : max(_3237, 0.0))) * _3229) / ((_3240 * 0.699999988079071044921875) + 1.0);
                        float _3248 = (-0.0) - _2702;
                        float _3249 = (-0.0) - _2703;
                        float _3250 = (-0.0) - _2704;
                        float _3254 = inversesqrt(dot(vec3(_3248, _3249, _3250), vec3(_3248, _3249, _3250)));
                        float _3255 = _3254 * _3248;
                        float _3256 = _3254 * _3249;
                        float _3257 = _3254 * _3250;
                        float _3265 = exp2(log2(1.0 / ((_3240 * 3.5) + 5.0)) * 0.25);
                        float _3266 = 1.0 - _1010;
                        float _3273 = sqrt(1.0 - ((1.0 - (_3266 * _3266)) * (1.0 - (_3265 * _3265))));
                        float _3274 = _3273 * _3273;
                        float _3275 = _3274 * _3274;
                        float _3276 = _3255 + _3220;
                        float _3277 = _3256 + _3221;
                        float _3278 = _3257 + _3222;
                        float _3282 = inversesqrt(dot(vec3(_3276, _3277, _3278), vec3(_3276, _3277, _3278)));
                        float _3286 = dot(vec3(_935, _938, _941), vec3(_3255, _3256, _3257));
                        float _4613 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0));
                        float _3289 = isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0));
                        float _3290 = dot(vec3(_935, _938, _941), vec3(_3282 * _3276, _3282 * _3277, _3282 * _3278));
                        float _4624 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                        float _3293 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
                        float _3297 = ((_3293 * _3293) * (_3275 + (-1.0))) + 1.0;
                        float _3298 = _3233 * _3274;
                        float _3299 = _3298 * _3298;
                        float _3302 = ((1.0 - _3299) * _3223) + _3299;
                        float _4635 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                        float _3303 = isnan(1.0) ? _4635 : (isnan(_4635) ? 1.0 : min(_4635, 1.0));
                        float _3304 = 1.0 - _3274;
                        float _3314 = (0.5 / (((_3303 * ((_3289 * _3304) + _3274)) + 9.9999999392252902907785028219223e-09) + (((_3303 * _3304) + _3274) * _3289))) * _3303;
                        float _4646 = isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0));
                        float _3325 = (((_3275 * 3.1415927410125732421875) * (isnan(1.0) ? _4646 : (isnan(_4646) ? 1.0 : min(_4646, 1.0)))) / ((_3297 * _3297) * ((_3240 * 2.1991131305694580078125) + 3.141590118408203125))) * _3229;
                        _3077 = (_3244 * _3192.x) + _3150;
                        _3078 = (_3244 * _3192.y) + _3151;
                        _3079 = (_3244 * _3192.z) + _3152;
                        _3074 = (_3325 * _3209.x) + _3147;
                        _3075 = (_3325 * _3209.y) + _3148;
                        _3076 = (_3325 * _3209.z) + _3149;
                        if (_3154 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3147 = _3074;
                            _3148 = _3075;
                            _3149 = _3076;
                            _3150 = _3077;
                            _3151 = _3078;
                            _3152 = _3079;
                            _3153 = _3154;
                        }
                    }
                    frontier_phi_66_pred = _3074;
                    frontier_phi_66_pred_1 = _3079;
                    frontier_phi_66_pred_2 = _3078;
                    frontier_phi_66_pred_3 = _3077;
                    frontier_phi_66_pred_4 = _3076;
                    frontier_phi_66_pred_5 = _3075;
                }
                _2850 = frontier_phi_66_pred;
                _2860 = frontier_phi_66_pred_1;
                _2858 = frontier_phi_66_pred_2;
                _2856 = frontier_phi_66_pred_3;
                _2854 = frontier_phi_66_pred_4;
                _2852 = frontier_phi_66_pred_5;
                uint _3009 = _3008 + 1u;
                if (_3009 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3002 = _2850;
                    _3003 = _2852;
                    _3004 = _2854;
                    _3005 = _2856;
                    _3006 = _2858;
                    _3007 = _2860;
                    _3008 = _3009;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2849 = _2850;
            _2851 = _2852;
            _2853 = _2854;
            _2855 = _2856;
            _2857 = _2858;
            _2859 = _2860;
        }
        uvec4 _2863 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2864 = _2863.z;
        uint _2866 = (_2864 >> 8u) & 15u;
        float _2970;
        float _2972;
        float _2974;
        float _2976;
        float _2978;
        float _2980;
        if (((4294967295u << _2866) & _2748) == 0u)
        {
            _2970 = _2849;
            _2972 = _2851;
            _2974 = _2853;
            _2976 = _2855;
            _2978 = _2857;
            _2980 = _2859;
        }
        else
        {
            float _2995 = inversesqrt(dot(vec3(_2702, _2703, _2704), vec3(_2702, _2703, _2704)));
            float _2996 = _2995 * _2702;
            float _2997 = _2995 * _2703;
            float _2998 = _2995 * _2704;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2866 < ((_2864 >> 12u) & 15u))
            {
                float _2971;
                float _2973;
                float _2975;
                float _2977;
                float _2979;
                float _2981;
                float _3130 = _2849;
                float _3131 = _2851;
                float _3132 = _2853;
                float _3133 = _2855;
                float _3134 = _2857;
                float _3135 = _2859;
                uint _3136 = _2866;
                uint _3145;
                bool _3146;
                for (;;)
                {
                    _3145 = texelFetch(g_lightClassification, int((((_2742 << 5u) + (_2728 << 9u)) + (_3136 << 2u)) >> 2u)).x;
                    _3146 = _3145 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3146)
                    {
                        frontier_phi_77_pred = _3135;
                        frontier_phi_77_pred_1 = _3134;
                        frontier_phi_77_pred_2 = _3133;
                        frontier_phi_77_pred_3 = _3132;
                        frontier_phi_77_pred_4 = _3131;
                        frontier_phi_77_pred_5 = _3130;
                    }
                    else
                    {
                        float _3339;
                        float _3340;
                        float _3341;
                        float _3342;
                        float _3343;
                        float _3344;
                        float _3633;
                        float _3634;
                        float _3635;
                        float _3636;
                        float _3637;
                        float _3638;
                        float _3352 = _3130;
                        float _3353 = _3131;
                        float _3354 = _3132;
                        float _3355 = _3133;
                        float _3356 = _3134;
                        float _3357 = _3135;
                        uint _3358 = _3145;
                        uint _3359;
                        vec4 _3384;
                        float _3385;
                        vec4 _3400;
                        vec3 _3412;
                        vec4 _3427;
                        vec4 _3442;
                        float _3489;
                        bool _3490;
                        for (;;)
                        {
                            uint _3369 = ((_3136 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3358));
                            _3359 = (_3358 + 4294967295u) & _3358;
                            uint _3371 = _3369 * 40u;
                            _3384 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3371)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3371 + 3u)).x));
                            _3385 = _3384.w;
                            uint _3387 = (_3369 * 40u) + 4u;
                            _3400 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3387)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3387 + 3u)).x));
                            uint _3402 = (_3369 * 40u) + 8u;
                            _3412 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3402)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3402 + 2u)).x));
                            uint _3414 = (_3369 * 40u) + 16u;
                            _3427 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3414)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3414 + 3u)).x));
                            uint _3429 = (_3369 * 40u) + 20u;
                            _3442 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3429)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3429 + 3u)).x));
                            uint _3445 = (_3369 * 40u) + 24u;
                            vec4 _3458 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3445)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3445 + 3u)).x));
                            uint _3464 = (_3369 * 40u) + 28u;
                            vec4 _3477 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3464)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3464 + 3u)).x));
                            _3489 = fma(_2704, _3477.z, fma(_2703, _3477.y, _3477.x * _2702)) + _3477.w;
                            _3490 = !((fma(_2704, _3458.z, fma(_2703, _3458.y, _3458.x * _2702)) + _3458.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3490)
                            {
                                float _3517 = _3384.x - _2702;
                                float _3518 = _3384.y - _2703;
                                float _3519 = _3384.z - _2704;
                                float _3520 = dot(vec3(_3517, _3518, _3519), vec3(_3517, _3518, _3519));
                                float _3523 = inversesqrt(_3520);
                                float _3524 = _3523 * _3517;
                                float _3525 = _3523 * _3518;
                                float _3526 = _3523 * _3519;
                                float _3530 = 1.0 - (_3520 / (_3385 * _3385));
                                float _4657 = isnan(0.0) ? _3530 : (isnan(_3530) ? 0.0 : max(_3530, 0.0));
                                float _3531 = isnan(1.0) ? _4657 : (isnan(_4657) ? 1.0 : min(_4657, 1.0));
                                float _3535 = sqrt(_3520) * _3400.w;
                                float _3537 = 1.39999997615814208984375 / (_3535 + 1.39999997615814208984375);
                                float _3538 = _3537 * _3537;
                                float _3541 = ((1.0 - _3538) * dot(vec3(_3524, _3525, _3526), vec3(_935, _938, _941))) + _3538;
                                float _3544 = _3535 * _3535;
                                float _3548 = (fma(_2704, _3427.z, fma(_2703, _3427.y, _3427.x * _2702)) + _3427.w) / _3489;
                                float _3549 = (fma(_2704, _3442.z, fma(_2703, _3442.y, _3442.x * _2702)) + _3442.w) / _3489;
                                float _3553 = 1.0 - dot(vec2(_3548, _3549), vec2(_3548, _3549));
                                float _4673 = isnan(0.0) ? _3553 : (isnan(_3553) ? 0.0 : max(_3553, 0.0));
                                float _3554 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
                                float _3555 = _3554 * (((isnan(0.0) ? _3541 : (isnan(_3541) ? 0.0 : max(_3541, 0.0))) * _3531) / ((_3544 * 0.699999988079071044921875) + 1.0));
                                float _3567 = exp2(log2(1.0 / ((_3544 * 3.5) + 5.0)) * 0.25);
                                float _3568 = 1.0 - _1010;
                                float _3575 = sqrt(1.0 - ((1.0 - (_3568 * _3568)) * (1.0 - (_3567 * _3567))));
                                float _3576 = _3575 * _3575;
                                float _3577 = _3576 * _3576;
                                float _3578 = _3524 - _2996;
                                float _3579 = _3525 - _2997;
                                float _3580 = _3526 - _2998;
                                float _3584 = inversesqrt(dot(vec3(_3578, _3579, _3580), vec3(_3578, _3579, _3580)));
                                float _3588 = dot(vec3(_935, _938, _941), vec3((-0.0) - _2996, (-0.0) - _2997, (-0.0) - _2998));
                                float _4684 = isnan(0.0) ? _3588 : (isnan(_3588) ? 0.0 : max(_3588, 0.0));
                                float _3591 = isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0));
                                float _3592 = dot(vec3(_935, _938, _941), vec3(_3584 * _3578, _3584 * _3579, _3584 * _3580));
                                float _4695 = isnan(0.0) ? _3592 : (isnan(_3592) ? 0.0 : max(_3592, 0.0));
                                float _3595 = isnan(1.0) ? _4695 : (isnan(_4695) ? 1.0 : min(_4695, 1.0));
                                float _3599 = ((_3595 * _3595) * (_3577 + (-1.0))) + 1.0;
                                float _3600 = _3537 * _3576;
                                float _3601 = _3600 * _3600;
                                float _3607 = ((1.0 - _3601) * dot(vec3(_935, _938, _941), vec3(_3524, _3525, _3526))) + _3601;
                                float _4706 = isnan(0.0) ? _3607 : (isnan(_3607) ? 0.0 : max(_3607, 0.0));
                                float _3608 = isnan(1.0) ? _4706 : (isnan(_4706) ? 1.0 : min(_4706, 1.0));
                                float _3609 = 1.0 - _3576;
                                float _3619 = (0.5 / (((_3608 * ((_3591 * _3609) + _3576)) + 9.9999999392252902907785028219223e-09) + (((_3608 * _3609) + _3576) * _3591))) * _3608;
                                float _4717 = isnan(0.0) ? _3619 : (isnan(_3619) ? 0.0 : max(_3619, 0.0));
                                float _3629 = (_3554 * _3531) * (((_3577 * 3.1415927410125732421875) * (isnan(1.0) ? _4717 : (isnan(_4717) ? 1.0 : min(_4717, 1.0)))) / ((_3599 * _3599) * ((_3544 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3555 * _3400.y;
                                frontier_phi_83_pred_1 = _3555 * _3400.x;
                                frontier_phi_83_pred_2 = _3629 * _3412.z;
                                frontier_phi_83_pred_3 = _3629 * _3412.y;
                                frontier_phi_83_pred_4 = _3629 * _3412.x;
                                frontier_phi_83_pred_5 = _3555 * _3400.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3637 = frontier_phi_83_pred;
                            _3636 = frontier_phi_83_pred_1;
                            _3635 = frontier_phi_83_pred_2;
                            _3634 = frontier_phi_83_pred_3;
                            _3633 = frontier_phi_83_pred_4;
                            _3638 = frontier_phi_83_pred_5;
                            _3342 = _3636 + _3355;
                            _3343 = _3637 + _3356;
                            _3344 = _3638 + _3357;
                            _3339 = _3633 + _3352;
                            _3340 = _3634 + _3353;
                            _3341 = _3635 + _3354;
                            if (_3359 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3352 = _3339;
                                _3353 = _3340;
                                _3354 = _3341;
                                _3355 = _3342;
                                _3356 = _3343;
                                _3357 = _3344;
                                _3358 = _3359;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3344;
                        frontier_phi_77_pred_1 = _3343;
                        frontier_phi_77_pred_2 = _3342;
                        frontier_phi_77_pred_3 = _3341;
                        frontier_phi_77_pred_4 = _3340;
                        frontier_phi_77_pred_5 = _3339;
                    }
                    _2981 = frontier_phi_77_pred;
                    _2979 = frontier_phi_77_pred_1;
                    _2977 = frontier_phi_77_pred_2;
                    _2975 = frontier_phi_77_pred_3;
                    _2973 = frontier_phi_77_pred_4;
                    _2971 = frontier_phi_77_pred_5;
                    uint _3137 = _3136 + 1u;
                    if (_3137 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3130 = _2971;
                        _3131 = _2973;
                        _3132 = _2975;
                        _3133 = _2977;
                        _3134 = _2979;
                        _3135 = _2981;
                        _3136 = _3137;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2975;
                frontier_phi_58_59_ladder_1 = _2981;
                frontier_phi_58_59_ladder_2 = _2979;
                frontier_phi_58_59_ladder_3 = _2977;
                frontier_phi_58_59_ladder_4 = _2973;
                frontier_phi_58_59_ladder_5 = _2971;
            }
            else
            {
                frontier_phi_58_59_ladder = _2853;
                frontier_phi_58_59_ladder_1 = _2859;
                frontier_phi_58_59_ladder_2 = _2857;
                frontier_phi_58_59_ladder_3 = _2855;
                frontier_phi_58_59_ladder_4 = _2851;
                frontier_phi_58_59_ladder_5 = _2849;
            }
            _2970 = frontier_phi_58_59_ladder_5;
            _2972 = frontier_phi_58_59_ladder_4;
            _2974 = frontier_phi_58_59_ladder;
            _2976 = frontier_phi_58_59_ladder_3;
            _2978 = frontier_phi_58_59_ladder_2;
            _2980 = frontier_phi_58_59_ladder_1;
        }
        float _2985 = isnan(1.0) ? _994 : (isnan(_994) ? 1.0 : min(_994, 1.0));
        _2761 = (_2985 * _2976) + _2197;
        _2763 = (_2985 * _2978) + _2199;
        _2765 = (_2985 * _2980) + _2201;
        _2767 = ((_2970 * _979) * _2985) + _2542;
        _2769 = ((_2972 * _981) * _2985) + _2544;
        _2771 = ((_2974 * _982) * _2985) + _2546;
    }
    else
    {
        _2761 = _2197;
        _2763 = _2199;
        _2765 = _2201;
        _2767 = _2542;
        _2769 = _2544;
        _2771 = _2546;
    }
    float _4733 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _4744 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
    float _4755 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _2788 = ((isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0))) * (_2761 + ((isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0))) * _994))) + ((_2767 + ((isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0))) * _1835)) * cbPerFrame._m0[3u].x);
    float _2789 = ((isnan(1.0) ? _4744 : (isnan(_4744) ? 1.0 : min(_4744, 1.0))) * (_2763 + ((isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0))) * _994))) + ((_2769 + ((isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0))) * _1835)) * cbPerFrame._m0[3u].x);
    float _2790 = ((isnan(1.0) ? _4755 : (isnan(_4755) ? 1.0 : min(_4755, 1.0))) * (_2765 + ((isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0))) * _994))) + ((_2771 + ((isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0))) * _1835)) * cbPerFrame._m0[3u].x);
    uint _2791 = _954 + 6u;
    float _2799 = _916 / cbSceneParam._m0[86u].x;
    float _2800 = _917 / cbSceneParam._m0[86u].y;
    vec4 _2814 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2799, _2800, (log2((isnan(cbSceneParam._m0[77u].w) ? _839 : (isnan(_839) ? cbSceneParam._m0[77u].w : min(_839, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2816 = _2814.x;
    float _2817 = _2814.y;
    float _2818 = _2814.z;
    float _2819 = _2814.w;
    float _2912;
    float _2914;
    float _2916;
    float _2918;
    if (_839 > cbSceneParam._m0[78u].w)
    {
        float _2874 = isnan(_839) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _839 : min(cbSceneParam._m0[80u].w, _839));
        float _2875 = _2874 / _839;
        float _2886 = _2875 * _889;
        float _2887 = _890 * _2875;
        float _2888 = (-0.0) - _2887;
        float _2890 = _2875 * _891;
        float _2892 = (cbSceneParam._m0[77u].w * _2888) / _2874;
        float _2893 = _2892 + cbSceneParam._m0[79u].w;
        float _2894 = cbSceneParam._m0[79u].w - _2887;
        float _2900 = sqrt(((_2886 * _2886) + (_2887 * _2887)) + (_2890 * _2890));
        float _2903 = (1.0 - (cbSceneParam._m0[77u].w / _2874)) * _2900;
        float _2908 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2910 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3087;
        if (abs((_2888 - _2892) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3087 = ((((_2893 > 0.0) ? exp2(_2908 * _2893) : (2.0 - exp2(_2910 * _2893))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2903;
        }
        else
        {
            float _3031 = 1.0 / cbSceneParam._m0[80u].x;
            float _3032 = isnan(_2894) ? _2893 : (isnan(_2893) ? _2894 : max(_2893, _2894));
            float _3033 = isnan(_2894) ? _2893 : (isnan(_2893) ? _2894 : min(_2893, _2894));
            float _3042 = isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : min(_3032, 0.0));
            float _3043 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : min(_3033, 0.0));
            _3087 = ((abs(_2900 / _2888) * cbSceneParam._m0[80u].y) * ((((_3042 - _3043) * 2.0) - ((exp2(_2908 * (isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0)))) - exp2(_2908 * (isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0))))) * _3031)) - ((exp2(_2910 * _3042) - exp2(_2910 * _3043)) * _3031))) + (_2903 * cbSceneParam._m0[80u].z);
        }
        vec4 _3089 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2799, _2800, 1.0), 0.0);
        float _3098 = exp2((_3087 * (-1.44269502162933349609375)) * (1.0 - _3089.w));
        float _3099 = log2(_3098);
        float _3115 = log2(_2819);
        _2912 = (exp2(_3115 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3099 * cbSceneParam._m0[78u].x)) * _3089.x) / cbSceneParam._m0[78u].x)) + _2816;
        _2914 = (exp2(_3115 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3099 * cbSceneParam._m0[78u].y)) * _3089.y) / cbSceneParam._m0[78u].y)) + _2817;
        _2916 = (exp2(_3115 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3099 * cbSceneParam._m0[78u].z)) * _3089.z) / cbSceneParam._m0[78u].z)) + _2818;
        _2918 = _3098 * _2819;
    }
    else
    {
        _2912 = _2816;
        _2914 = _2817;
        _2916 = _2818;
        _2918 = _2819;
    }
    bool _3125;
    vec4 _2928;
    vec4 _2950;
    float _2952;
    float _2956;
    float _2957;
    float _2958;
    float _2959;
    bool _2969;
    for (;;)
    {
        _2928 = cbMatDynParam._m0[0u];
        float _2930 = roundEven(_2928.y);
        bool _2931 = _2930 == 3.0;
        float _2932 = log2(_2918);
        float _2939 = exp2(_2932 * cbSceneParam._m0[78u].x) * _2788;
        float _2940 = exp2(_2932 * cbSceneParam._m0[78u].y) * _2789;
        float _2941 = exp2(_2932 * cbSceneParam._m0[78u].z) * _2790;
        float _2948 = _905 + (-0.5);
        _2950 = cbMtdParam._m0[1u];
        _2952 = _2950.y * _2948;
        float _2955 = (_2930 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2956 = _2955 * (_2931 ? _2939 : (_2939 + (cbSceneParam._m0[72u].w * _2912)));
        _2957 = _2955 * (_2931 ? _2940 : (_2940 + (cbSceneParam._m0[72u].w * _2914)));
        _2958 = _2955 * (_2931 ? _2941 : (_2941 + (cbSceneParam._m0[72u].w * _2916)));
        _2959 = _2948 * 0.999000012874603271484375;
        _2969 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2969)
        {
            if ((cbInstanceData._m0[_954 + 7u].x + _2959) < 0.5)
            {
                _3125 = true;
                break;
            }
        }
        uint _3066 = _955 + uint(_2928.w);
        if ((cbInstanceData._m0[_3066].w < 1.0) && ((cbInstanceData._m0[_3066].w + _2959) < 0.5))
        {
            _3125 = true;
            break;
        }
        if ((_2952 + 1.0) < _2950.x)
        {
            _3125 = true;
            break;
        }
        _3125 = false;
        break;
    }
    float _3330;
    if (_3125)
    {
        discard_state = true;
        _3330 = 0.0;
    }
    else
    {
        _3330 = cbInstanceData._m0[_2791].w;
    }
    SV_Target.x = _2956;
    SV_Target.y = _2957;
    SV_Target.z = _2958;
    SV_Target.w = _3330;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2791].w;
    discard_exit();
}


