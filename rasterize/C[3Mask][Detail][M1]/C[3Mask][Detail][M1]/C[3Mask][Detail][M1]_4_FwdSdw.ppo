#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1249;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _250 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _256 = _250.x * cbMtdParam._m0[10u].x;
    float _257 = _250.y * cbMtdParam._m0[10u].y;
    float _258 = _250.z * cbMtdParam._m0[10u].z;
    vec4 _276 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _326 = cbMtdParam._m0[18u].y * texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x;
    float _337 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].x * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].y * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _326)) + 1.0;
    float _3861 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _338 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
    float _345 = (_338 * ((_276.x * cbMtdParam._m0[11u].x) - _256)) + _256;
    float _346 = (_338 * ((_276.y * cbMtdParam._m0[11u].y) - _257)) + _257;
    float _347 = (_338 * ((_276.z * cbMtdParam._m0[11u].z) - _258)) + _258;
    vec4 _365 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _392 = ((cbMtdParam._m0[17u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _326)) + 1.0;
    float _3872 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _393 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
    float _400 = (_393 * ((_365.x * cbMtdParam._m0[12u].x) - _345)) + _345;
    float _401 = (_393 * ((_365.y * cbMtdParam._m0[12u].y) - _346)) + _346;
    float _402 = (_393 * ((_365.z * cbMtdParam._m0[12u].z) - _347)) + _347;
    vec4 _419 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _444 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[18u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[18u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _326)) + 1.0;
    float _3883 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _445 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
    vec4 _473 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _481 = ((((_445 * ((_419.x * cbMtdParam._m0[13u].x) - _400)) + _400) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _473.x;
    float _484 = ((((_445 * ((_419.y * cbMtdParam._m0[13u].y) - _401)) + _401) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _473.y;
    float _487 = ((((_445 * ((_419.z * cbMtdParam._m0[13u].z) - _402)) + _402) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _473.z;
    vec4 _500 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _502 = _500.x;
    float _520 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _502) * _338) + _502;
    float _537 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _520) * _393) + _520;
    float _554 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _537) * _445) + _537;
    vec4 _567 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _569 = _567.x;
    float _570 = _567.y;
    float _573 = cbMtdParam._m0[17u].y * _567.z;
    vec4 _585 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _594 = (((cbMtdParam._m0[17u].x * _585.z) - _573) * _338) + _573;
    vec4 _607 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _619 = (((cbMtdParam._m0[16u].w * _607.z) - _594) * _393) + _594;
    vec4 _632 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _641 = (((cbMtdParam._m0[16u].z * _632.z) - _619) * _445) + _619;
    vec4 _654 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _667 = ((_585.x - _569) * _338) + _569;
    float _668 = ((_585.y - _570) * _338) + _570;
    float _673 = ((_607.x - _667) * _393) + _667;
    float _674 = ((_607.y - _668) * _393) + _668;
    float _683 = ((((_632.x - _673) * _445) + _673) * 2.0) + (-1.0);
    float _684 = ((((_632.y - _674) * _445) + _674) * 2.0) + (-1.0);
    float _685 = dot(vec2(_683, _684), vec2(_683, _684));
    float _3894 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _690 = sqrt(1.0 - (isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))));
    float _693 = (((_654.x * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _683;
    float _694 = (((_654.y * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _684;
    float _697 = fma(_690, _220 * NORMAL.x, fma(_694, _227 * TANGENT.x, (_213 * _205) * _693));
    float _700 = fma(_690, _220 * NORMAL.y, fma(_694, _227 * TANGENT.y, (_213 * _206) * _693));
    float _703 = fma(_690, _220 * NORMAL.z, fma(_694, _227 * TANGENT.z, (_213 * _207) * _693));
    float _707 = inversesqrt(dot(vec3(_697, _700, _703), vec3(_697, _700, _703)));
    float _708 = _707 * _697;
    float _709 = _707 * _700;
    float _710 = _707 * _703;
    float _3905 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _711 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
    float _3916 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _3927 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _3938 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _3949 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _715 = isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0));
    float _731 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _771 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _781 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _771);
    float _782 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _771);
    float _783 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _771);
    float _787 = inversesqrt(dot(vec3(_781, _782, _783), vec3(_781, _782, _783)));
    float _788 = _781 * _787;
    float _789 = _782 * _787;
    float _790 = _783 * _787;
    float _796 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _797 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _815 = fma(_710, cbSceneParam._m0[5u].z, fma(_709, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _708));
    float _818 = fma(_710, cbSceneParam._m0[6u].z, fma(_709, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _708));
    float _821 = fma(_710, cbSceneParam._m0[7u].z, fma(_709, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _708));
    uint _834 = uint(roundEven(NORMAL.w)) * 13u;
    uint _836 = (_834 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _842 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0)))) * cbInstanceData._m0[_836].x;
    float _843 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0)))) * cbInstanceData._m0[_836].y;
    float _844 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0)))) * cbInstanceData._m0[_836].z;
    float _3960 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _845 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
    float _3971 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
    float _846 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
    float _3982 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _847 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
    float _848 = 1.0 - _715;
    float _849 = _845 * _848;
    float _850 = _846 * _848;
    float _851 = _847 * _848;
    float _856 = (_845 + (-0.039999999105930328369140625)) * _715;
    float _857 = (_846 + (-0.039999999105930328369140625)) * _715;
    float _858 = (_847 + (-0.039999999105930328369140625)) * _715;
    float _859 = _856 + 0.039999999105930328369140625;
    float _861 = _857 + 0.039999999105930328369140625;
    float _862 = _858 + 0.039999999105930328369140625;
    vec4 _871 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _796, cbSceneParam._m0[86u].y * _797));
    float _874 = _871.x * TEXCOORD_5.w;
    float _875 = dot(vec3(_708, _709, _710), vec3(_788, _789, _790));
    float _878 = _875 * 2.0;
    float _882 = (_878 * _708) - _788;
    float _883 = (_878 * _709) - _789;
    float _884 = (_878 * _710) - _790;
    float _888 = abs(dot(vec3(_788, _789, _790), vec3(_708, _709, _710)));
    float _3993 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _890 = sqrt(_711);
    float _903 = exp2((_890 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_890 * 3.0));
    float _909 = (1.0 - _903) * ((_890 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _910 = _903 * _890;
    float _938 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _942 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _946 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1248;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _973 = fma(_946, cbModelParam._m0[26u].z, fma(_942, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _938));
        float _977 = fma(_946, cbModelParam._m0[27u].z, fma(_942, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _938));
        float _981 = fma(_946, cbModelParam._m0[28u].z, fma(_942, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _938));
        float _1006 = _938 + _708;
        float _1007 = _942 + _709;
        float _1008 = _946 + _710;
        float _1018 = fma(_1008, cbModelParam._m0[26u].z, fma(_1007, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1006)) - _973;
        float _1019 = fma(_1008, cbModelParam._m0[27u].z, fma(_1007, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1006)) - _977;
        float _1020 = fma(_1008, cbModelParam._m0[28u].z, fma(_1007, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1006)) - _981;
        float _1024 = inversesqrt(dot(vec3(_1018, _1019, _1020), vec3(_1018, _1019, _1020)));
        float _1037 = ((_1024 * _1018) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_973 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1038 = ((_1024 * _1019) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_977 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1039 = ((_1024 * _1020) / cbModelParam._m0[34u].z) + ((((((_981 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1037, _1038, _1039), 0.0);
        vec4 _1049 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1037, _1038, _1039), 0.0);
        vec4 _1056 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1037, _1038, _1039), 0.0);
        vec4 _1063 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1037, _1038, _1039), 0.0);
        float _1076 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1077 = _1076 * (_1042.x + (-0.5));
        float _1078 = _1076 * (_1042.y + (-0.5));
        float _1079 = _1076 * (_1042.z + (-0.5));
        float _1086 = exp2((_1049.w + (-0.5)) * 20.0) * 2.0;
        float _1087 = _1086 * (_1049.x + (-0.5));
        float _1088 = _1086 * (_1049.y + (-0.5));
        float _1089 = _1086 * (_1049.z + (-0.5));
        float _1096 = exp2((_1056.w + (-0.5)) * 20.0) * 2.0;
        float _1097 = _1096 * (_1056.x + (-0.5));
        float _1098 = _1096 * (_1056.y + (-0.5));
        float _1099 = _1096 * (_1056.z + (-0.5));
        float _1106 = exp2((_1063.w + (-0.5)) * 20.0) * 2.0;
        float _1107 = _1106 * (_1063.x + (-0.5));
        float _1108 = _1106 * (_1063.y + (-0.5));
        float _1109 = _1106 * (_1063.z + (-0.5));
        float _1110 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1111 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1112 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1113 = _1077 * 0.5;
        float _1114 = _1087 * 0.5;
        float _1115 = _1097 * 0.5;
        float _1116 = dot(vec3(_1113, _1114, _1115), vec3(_1113, _1114, _1115));
        float _1121 = (_1116 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1116);
        float _1130 = (dot(vec3(_708, _709, _710), vec3(_1121 * _1113, _1121 * _1114, _1121 * _1115)) + 1.0) * 0.5;
        float _4019 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1140 = sqrt(((_1114 * _1114) + (_1113 * _1113)) + (_1115 * _1115)) / (_1110 + 9.9999997473787516355514526367188e-06);
        float _4030 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0));
        float _1142 = _1141 * 2.0;
        float _1146 = (1.0 - _1141) / (_1141 + 1.0);
        float _4041 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1156 = ((((1.0 - _1147) * (_1142 + 2.0)) * exp2(log2(isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0))) * (_1142 + 1.0))) + _1147) * _1110;
        float _1157 = _1078 * 0.5;
        float _1158 = _1088 * 0.5;
        float _1159 = _1098 * 0.5;
        float _1160 = dot(vec3(_1157, _1158, _1159), vec3(_1157, _1158, _1159));
        float _1165 = (_1160 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1160);
        float _1173 = (dot(vec3(_708, _709, _710), vec3(_1165 * _1157, _1165 * _1158, _1165 * _1159)) + 1.0) * 0.5;
        float _4052 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1182 = sqrt(((_1158 * _1158) + (_1157 * _1157)) + (_1159 * _1159)) / (_1111 + 9.9999997473787516355514526367188e-06);
        float _4063 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1183 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
        float _1184 = _1183 * 2.0;
        float _1188 = (1.0 - _1183) / (_1183 + 1.0);
        float _4074 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1198 = ((((1.0 - _1189) * (_1184 + 2.0)) * exp2(log2(isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * (_1184 + 1.0))) + _1189) * _1111;
        float _1199 = _1079 * 0.5;
        float _1200 = _1089 * 0.5;
        float _1201 = _1099 * 0.5;
        float _1202 = dot(vec3(_1199, _1200, _1201), vec3(_1199, _1200, _1201));
        float _1207 = (_1202 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1202);
        float _1215 = (dot(vec3(_708, _709, _710), vec3(_1207 * _1199, _1207 * _1200, _1207 * _1201)) + 1.0) * 0.5;
        float _4085 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1224 = sqrt(((_1200 * _1200) + (_1199 * _1199)) + (_1201 * _1201)) / (_1112 + 9.9999997473787516355514526367188e-06);
        float _4096 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1225 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
        float _1226 = _1225 * 2.0;
        float _1230 = (1.0 - _1225) / (_1225 + 1.0);
        float _4107 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
        float _1240 = ((((1.0 - _1231) * (_1226 + 2.0)) * exp2(log2(isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0))) * (_1226 + 1.0))) + _1231) * _1112;
        _1248 = _1079;
        _1250 = _1078;
        _1251 = _1077;
        _1252 = _1089;
        _1253 = _1088;
        _1254 = _1087;
        _1255 = _1099;
        _1256 = _1098;
        _1257 = _1097;
        _1258 = _1112;
        _1259 = _1111;
        _1260 = _1110;
        _1261 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0)));
        _1262 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0)));
        _1263 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0)));
    }
    else
    {
        _1248 = _1249;
        _1250 = _1249;
        _1251 = _1249;
        _1252 = _1249;
        _1253 = _1249;
        _1254 = _1249;
        _1255 = _1249;
        _1256 = _1249;
        _1257 = _1249;
        _1258 = _1249;
        _1259 = _1249;
        _1260 = _1249;
        _1261 = 0.0;
        _1262 = 0.0;
        _1263 = 0.0;
    }
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1289 = fma(_946, cbModelParam._m0[30u].z, fma(_942, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _938));
        float _1293 = fma(_946, cbModelParam._m0[31u].z, fma(_942, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _938));
        float _1297 = fma(_946, cbModelParam._m0[32u].z, fma(_942, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _938));
        float _1320 = _938 + _708;
        float _1321 = _942 + _709;
        float _1322 = _946 + _710;
        float _1332 = fma(_1322, cbModelParam._m0[30u].z, fma(_1321, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1320)) - _1289;
        float _1333 = fma(_1322, cbModelParam._m0[31u].z, fma(_1321, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1320)) - _1293;
        float _1334 = fma(_1322, cbModelParam._m0[32u].z, fma(_1321, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1320)) - _1297;
        float _1338 = inversesqrt(dot(vec3(_1332, _1333, _1334), vec3(_1332, _1333, _1334)));
        float _1351 = ((_1338 * _1332) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1289 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1352 = ((_1338 * _1333) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1293 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1353 = ((_1338 * _1334) / cbModelParam._m0[35u].z) + ((((((_1297 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1355 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1351, _1352, _1353), 0.0);
        vec4 _1362 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1351, _1352, _1353), 0.0);
        vec4 _1369 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1351, _1352, _1353), 0.0);
        vec4 _1376 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1351, _1352, _1353), 0.0);
        float _1388 = exp2((_1355.w + (-0.5)) * 20.0) * 2.0;
        float _1389 = _1388 * (_1355.x + (-0.5));
        float _1390 = _1388 * (_1355.y + (-0.5));
        float _1391 = _1388 * (_1355.z + (-0.5));
        float _1398 = exp2((_1362.w + (-0.5)) * 20.0) * 2.0;
        float _1399 = _1398 * (_1362.x + (-0.5));
        float _1400 = _1398 * (_1362.y + (-0.5));
        float _1401 = _1398 * (_1362.z + (-0.5));
        float _1408 = exp2((_1369.w + (-0.5)) * 20.0) * 2.0;
        float _1409 = _1408 * (_1369.x + (-0.5));
        float _1410 = _1408 * (_1369.y + (-0.5));
        float _1411 = _1408 * (_1369.z + (-0.5));
        float _1418 = exp2((_1376.w + (-0.5)) * 20.0) * 2.0;
        float _1419 = _1418 * (_1376.x + (-0.5));
        float _1420 = _1418 * (_1376.y + (-0.5));
        float _1421 = _1418 * (_1376.z + (-0.5));
        float _1422 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1423 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1424 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1425 = _1389 * 0.5;
        float _1426 = _1399 * 0.5;
        float _1427 = _1409 * 0.5;
        float _1428 = dot(vec3(_1425, _1426, _1427), vec3(_1425, _1426, _1427));
        float _1433 = (_1428 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1428);
        float _1441 = (dot(vec3(_708, _709, _710), vec3(_1433 * _1425, _1433 * _1426, _1433 * _1427)) + 1.0) * 0.5;
        float _4148 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1450 = sqrt(((_1426 * _1426) + (_1425 * _1425)) + (_1427 * _1427)) / (_1422 + 9.9999997473787516355514526367188e-06);
        float _4159 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
        float _1452 = _1451 * 2.0;
        float _1456 = (1.0 - _1451) / (_1451 + 1.0);
        float _4170 = isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0));
        float _1457 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1466 = ((((1.0 - _1457) * (_1452 + 2.0)) * exp2(log2(isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0))) * (_1452 + 1.0))) + _1457) * _1422;
        float _1467 = _1390 * 0.5;
        float _1468 = _1400 * 0.5;
        float _1469 = _1410 * 0.5;
        float _1470 = dot(vec3(_1467, _1468, _1469), vec3(_1467, _1468, _1469));
        float _1475 = (_1470 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1470);
        float _1483 = (dot(vec3(_708, _709, _710), vec3(_1475 * _1467, _1475 * _1468, _1475 * _1469)) + 1.0) * 0.5;
        float _4181 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1492 = sqrt(((_1468 * _1468) + (_1467 * _1467)) + (_1469 * _1469)) / (_1423 + 9.9999997473787516355514526367188e-06);
        float _4192 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1493 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
        float _1494 = _1493 * 2.0;
        float _1498 = (1.0 - _1493) / (_1493 + 1.0);
        float _4203 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1508 = ((((1.0 - _1499) * (_1494 + 2.0)) * exp2(log2(isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_1494 + 1.0))) + _1499) * _1423;
        float _1509 = _1391 * 0.5;
        float _1510 = _1401 * 0.5;
        float _1511 = _1411 * 0.5;
        float _1512 = dot(vec3(_1509, _1510, _1511), vec3(_1509, _1510, _1511));
        float _1517 = (_1512 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1512);
        float _1525 = (dot(vec3(_708, _709, _710), vec3(_1517 * _1509, _1517 * _1510, _1517 * _1511)) + 1.0) * 0.5;
        float _4214 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1534 = sqrt(((_1510 * _1510) + (_1509 * _1509)) + (_1511 * _1511)) / (_1424 + 9.9999997473787516355514526367188e-06);
        float _4225 = isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0));
        float _1535 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
        float _1536 = _1535 * 2.0;
        float _1540 = (1.0 - _1535) / (_1535 + 1.0);
        float _4236 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
        float _1550 = ((((1.0 - _1541) * (_1536 + 2.0)) * exp2(log2(isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (_1536 + 1.0))) + _1541) * _1424;
        _1558 = _1391;
        _1559 = _1390;
        _1560 = _1389;
        _1561 = _1401;
        _1562 = _1400;
        _1563 = _1399;
        _1564 = _1411;
        _1565 = _1410;
        _1566 = _1409;
        _1567 = _1424;
        _1568 = _1423;
        _1569 = _1422;
        _1570 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0)));
        _1571 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0)));
        _1572 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0)));
    }
    else
    {
        _1558 = _1249;
        _1559 = _1249;
        _1560 = _1249;
        _1561 = _1249;
        _1562 = _1249;
        _1563 = _1249;
        _1564 = _1249;
        _1565 = _1249;
        _1566 = _1249;
        _1567 = _1249;
        _1568 = _1249;
        _1569 = _1249;
        _1570 = 0.0;
        _1571 = 0.0;
        _1572 = 0.0;
    }
    float _1582 = (cbModelParam._m0[1u].x * (_1570 - _1261)) + _1261;
    float _1583 = (cbModelParam._m0[1u].x * (_1571 - _1262)) + _1262;
    float _1584 = (cbModelParam._m0[1u].x * (_1572 - _1263)) + _1263;
    float _1605 = fma(_1584, cbSceneParam._m0[89u].z, fma(_1583, cbSceneParam._m0[89u].y, _1582 * cbSceneParam._m0[89u].x));
    float _1608 = fma(_1584, cbSceneParam._m0[90u].z, fma(_1583, cbSceneParam._m0[90u].y, _1582 * cbSceneParam._m0[90u].x));
    float _1611 = fma(_1584, cbSceneParam._m0[91u].z, fma(_1583, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1582));
    float _1626 = _882 * 0.5;
    float _1627 = _883 * 0.5;
    float _1628 = _884 * 0.5;
    float _1629 = dot(vec4(_1626, _1627, _1628, 1.0), vec4(_1560, _1563, _1566, _1569));
    float _1632 = dot(vec4(_1626, _1627, _1628, 1.0), vec4(_1559, _1562, _1565, _1568));
    float _1635 = dot(vec4(_1626, _1627, _1628, 1.0), vec4(_1558, _1561, _1564, _1567));
    float _1669;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1642 = dot(vec4(_1626, _1627, _1628, 1.0), vec4(_1248, _1252, _1255, _1258));
        float _1646 = dot(vec4(_1626, _1627, _1628, 1.0), vec4(_1250, _1253, _1256, _1259));
        float _1650 = dot(vec4(_1626, _1627, _1628, 1.0), vec4(_1251, _1254, _1257, _1260));
        float _1657 = dot(vec4(cbModelParam._m0[39u]), vec4(_1626, _1627, _1628, 1.0));
        _1669 = dot(vec3(isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0)), isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0)), isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1657) ? 0.0 : (isnan(0.0) ? _1657 : max(0.0, _1657))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1669 = 1.0;
    }
    float _1680;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1671 = dot(vec4(cbModelParam._m0[40u]), vec4(_1626, _1627, _1628, 1.0));
        _1680 = dot(vec3(isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0)), isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0)), isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1671) ? 0.0 : (isnan(0.0) ? _1671 : max(0.0, _1671))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1680 = 1.0;
    }
    float _1684 = (_1680 * cbModelParam._m0[1u].x) + (_1669 * (1.0 - cbModelParam._m0[1u].x));
    float _1694 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _711);
    float _1695 = isnan(_1694) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1694 : min(cbModelParam._m0[25u].z, _1694));
    float _1775;
    float _1777;
    float _1779;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1742 = fma(_946, cbModelParam._m0[13u].z, fma(_942, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _938)) + cbModelParam._m0[13u].w;
        float _1746 = fma(_946, cbModelParam._m0[14u].z, fma(_942, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _938)) + cbModelParam._m0[14u].w;
        float _1750 = fma(_946, cbModelParam._m0[15u].z, fma(_942, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _938)) + cbModelParam._m0[15u].w;
        float _1753 = fma(_884, cbModelParam._m0[13u].z, fma(_883, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _882));
        float _1756 = fma(_884, cbModelParam._m0[14u].z, fma(_883, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _882));
        float _1759 = fma(_884, cbModelParam._m0[15u].z, fma(_883, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _882));
        float _1787;
        if (_1753 > 0.0)
        {
            _1787 = abs((1.0 - _1742) / _1753);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1753 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1742 + 1.0) / _1753);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1787 = frontier_phi_14_12_ladder;
        }
        float _1960;
        if (_1756 > 0.0)
        {
            _1960 = abs((1.0 - _1746) / _1756);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1756 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1746 + 1.0) / _1756);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1960 = frontier_phi_23_19_ladder;
        }
        float _2255;
        if (_1759 > 0.0)
        {
            _2255 = abs((1.0 - _1750) / _1759);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1759 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1750 + 1.0) / _1759);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2255 = frontier_phi_35_30_ladder;
        }
        float _2257 = isnan(_1960) ? _1787 : (isnan(_1787) ? _1960 : min(_1787, _1960));
        float _2258 = isnan(_2255) ? _2257 : (isnan(_2257) ? _2255 : min(_2257, _2255));
        float _2262 = (_2258 * _1753) + _1742;
        float _2263 = (_2258 * _1756) + _1746;
        float _2264 = (_2258 * _1759) + _1750;
        float _2265 = _2258 * 9.9999997473787516355514526367188e-05;
        float _2267 = (-1.0) - _2265;
        float _2269 = _2265 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2264 > _2269) || ((_2264 < _2267) || ((_2263 > _2269) || ((_2263 < _2267) || ((_2262 < _2267) || (_2262 > _2269))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2409 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2264, cbModelParam._m0[9u].z, fma(_2263, cbModelParam._m0[9u].y, _2262 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2264, cbModelParam._m0[10u].z, fma(_2263, cbModelParam._m0[10u].y, _2262 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2264, cbModelParam._m0[11u].z, fma(_2263, cbModelParam._m0[11u].y, _2262 * cbModelParam._m0[11u].x))), _1695);
            frontier_phi_13_35_ladder = _2409.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2409.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2409.x * cbModelParam._m0[1u].y;
        }
        _1775 = frontier_phi_13_35_ladder_2;
        _1777 = frontier_phi_13_35_ladder_1;
        _1779 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1763 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_882, _883, _884), _1695);
        _1775 = _1763.x * cbModelParam._m0[1u].y;
        _1777 = _1763.y * cbModelParam._m0[1u].y;
        _1779 = _1763.z * cbModelParam._m0[1u].y;
    }
    float _1783 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _711);
    float _1784 = isnan(_1783) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1783 : min(cbModelParam._m0[25u].w, _1783));
    float _1875;
    float _1877;
    float _1879;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1839 = fma(_946, cbModelParam._m0[21u].z, fma(_942, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _938)) + cbModelParam._m0[21u].w;
        float _1843 = fma(_946, cbModelParam._m0[22u].z, fma(_942, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _938)) + cbModelParam._m0[22u].w;
        float _1847 = fma(_946, cbModelParam._m0[23u].z, fma(_942, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _938)) + cbModelParam._m0[23u].w;
        float _1850 = fma(_884, cbModelParam._m0[21u].z, fma(_883, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _882));
        float _1853 = fma(_884, cbModelParam._m0[22u].z, fma(_883, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _882));
        float _1856 = fma(_884, cbModelParam._m0[23u].z, fma(_883, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _882));
        float _1965;
        if (_1850 > 0.0)
        {
            _1965 = abs((1.0 - _1839) / _1850);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1850 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1839 + 1.0) / _1850);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1965 = frontier_phi_25_21_ladder;
        }
        float _2282;
        if (_1853 > 0.0)
        {
            _2282 = abs((1.0 - _1843) / _1853);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1853 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1843 + 1.0) / _1853);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2282 = frontier_phi_37_32_ladder;
        }
        float _2620;
        if (_1856 > 0.0)
        {
            _2620 = abs((1.0 - _1847) / _1856);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1856 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1847 + 1.0) / _1856);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2620 = frontier_phi_47_44_ladder;
        }
        float _2622 = isnan(_2282) ? _1965 : (isnan(_1965) ? _2282 : min(_1965, _2282));
        float _2623 = isnan(_2620) ? _2622 : (isnan(_2622) ? _2620 : min(_2622, _2620));
        float _2627 = (_2623 * _1850) + _1839;
        float _2628 = (_2623 * _1853) + _1843;
        float _2629 = (_2623 * _1856) + _1847;
        float _2630 = _2623 * 9.9999997473787516355514526367188e-05;
        float _2631 = (-1.0) - _2630;
        float _2633 = _2630 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2629 > _2633) || ((_2629 < _2631) || ((_2628 > _2633) || ((_2628 < _2631) || ((_2627 < _2631) || (_2627 > _2633))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2751 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2629, cbModelParam._m0[17u].z, fma(_2628, cbModelParam._m0[17u].y, _2627 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2629, cbModelParam._m0[18u].z, fma(_2628, cbModelParam._m0[18u].y, _2627 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2629, cbModelParam._m0[19u].z, fma(_2628, cbModelParam._m0[19u].y, _2627 * cbModelParam._m0[19u].x))), _1784);
            frontier_phi_22_47_ladder = _2751.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2751.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2751.x * cbModelParam._m0[1u].z;
        }
        _1875 = frontier_phi_22_47_ladder_2;
        _1877 = frontier_phi_22_47_ladder_1;
        _1879 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1859 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_882, _883, _884), _1784);
        _1875 = _1859.x * cbModelParam._m0[1u].z;
        _1877 = _1859.y * cbModelParam._m0[1u].z;
        _1879 = _1859.z * cbModelParam._m0[1u].z;
    }
    float _1892 = (((_909 * _859) + _910) * _874) * ((cbModelParam._m0[1u].w * (_1875 - _1775)) + _1775);
    float _1894 = (((_909 * _861) + _910) * _874) * ((cbModelParam._m0[1u].w * (_1877 - _1777)) + _1777);
    float _1896 = (((_909 * _862) + _910) * _874) * ((cbModelParam._m0[1u].w * (_1879 - _1779)) + _1779);
    float _1899 = fma(_1896, cbSceneParam._m0[89u].z, fma(_1894, cbSceneParam._m0[89u].y, _1892 * cbSceneParam._m0[89u].x));
    float _1902 = fma(_1896, cbSceneParam._m0[90u].z, fma(_1894, cbSceneParam._m0[90u].y, _1892 * cbSceneParam._m0[90u].x));
    float _1905 = fma(_1896, cbSceneParam._m0[91u].z, fma(_1894, cbSceneParam._m0[91u].y, _1892 * cbSceneParam._m0[91u].x));
    float _1939 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1943 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1947 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1951 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1952 = _1939 / _1951;
    float _1953 = _1943 / _1951;
    float _1954 = _1947 / _1951;
    float _2101;
    float _2102;
    float _2103;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1981 = ((uint(_1954 > cbSceneParam._m0[59u].y) + uint(_1954 > cbSceneParam._m0[59u].x)) + uint(_1954 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1982 = _1981 + 43u;
        uint _1990 = _1981 + 44u;
        uint _1998 = _1981 + 45u;
        uint _2006 = _1981 + 46u;
        float _2017 = fma(_1951, cbSceneParam._m0[_1982].w, fma(_1947, cbSceneParam._m0[_1982].z, fma(_1943, cbSceneParam._m0[_1982].y, _1939 * cbSceneParam._m0[_1982].x)));
        float _2021 = fma(_1951, cbSceneParam._m0[_1990].w, fma(_1947, cbSceneParam._m0[_1990].z, fma(_1943, cbSceneParam._m0[_1990].y, _1939 * cbSceneParam._m0[_1990].x)));
        float _2029 = fma(_1951, cbSceneParam._m0[_2006].w, fma(_1947, cbSceneParam._m0[_2006].z, fma(_1943, cbSceneParam._m0[_2006].y, _1939 * cbSceneParam._m0[_2006].x)));
        float _2034 = cbSceneParam._m0[33u].z * _2029;
        float _2036 = cbSceneParam._m0[33u].w * _2029;
        float _2039 = fma(_1951, cbSceneParam._m0[_1998].w, fma(_1947, cbSceneParam._m0[_1998].z, fma(_1943, cbSceneParam._m0[_1998].y, _1939 * cbSceneParam._m0[_1998].x))) / _2029;
        float _2087 = (cbSceneParam._m0[33u].x - sqrt(((_1953 * _1953) + (_1952 * _1952)) + (_1954 * _1954))) * cbSceneParam._m0[33u].y;
        float _4362 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
        float _2094 = (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2034 + _2017) / _2029, (_2036 + _2021) / _2029), _2039), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2036 + _2017) / _2029, (_2021 - _2034) / _2029), _2039), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2017 - _2034) / _2029, (_2021 - _2036) / _2029), _2039), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2017 - _2036) / _2029, (_2034 + _2021) / _2029), _2039), 0.0)).x), vec4(0.25)));
        _2101 = 1.0 - (_2094 * cbSceneParam._m0[34u].x);
        _2102 = 1.0 - (_2094 * cbSceneParam._m0[34u].y);
        _2103 = 1.0 - (_2094 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2101 = 1.0;
        _2102 = 1.0;
        _2103 = 1.0;
    }
    float _2167;
    float _2169;
    float _2171;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2155 = fma(_1951, cbSceneParam._m0[63u].w, fma(_1947, cbSceneParam._m0[63u].z, fma(_1943, cbSceneParam._m0[63u].y, _1939 * cbSceneParam._m0[63u].x)));
        float _2156 = fma(_1951, cbSceneParam._m0[60u].w, fma(_1947, cbSceneParam._m0[60u].z, fma(_1943, cbSceneParam._m0[60u].y, _1939 * cbSceneParam._m0[60u].x))) / _2155;
        float _2157 = fma(_1951, cbSceneParam._m0[61u].w, fma(_1947, cbSceneParam._m0[61u].z, fma(_1943, cbSceneParam._m0[61u].y, _1939 * cbSceneParam._m0[61u].x))) / _2155;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2156 >= cbSceneParam._m0[64u].x) && (_2157 >= cbSceneParam._m0[64u].y)) && (_2156 <= cbSceneParam._m0[64u].z)) && (_2157 <= cbSceneParam._m0[64u].w))
        {
            float _2295 = fma(_1951, cbSceneParam._m0[62u].w, fma(_1947, cbSceneParam._m0[62u].z, fma(_1943, cbSceneParam._m0[62u].y, _1939 * cbSceneParam._m0[62u].x))) / _2155;
            float _2299 = isnan(cbSceneParam._m0[41u].w) ? _2295 : (isnan(_2295) ? cbSceneParam._m0[41u].w : max(_2295, cbSceneParam._m0[41u].w));
            float _2342 = (cbSceneParam._m0[33u].x - sqrt(((_1953 * _1953) + (_1952 * _1952)) + (_1954 * _1954))) * cbSceneParam._m0[33u].y;
            float _4378 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
            float _2349 = (isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2156, cbSceneParam._m0[33u].w + _2157), _2299), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2156, _2157 - cbSceneParam._m0[33u].z), _2299), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2156 - cbSceneParam._m0[33u].z, _2157 - cbSceneParam._m0[33u].w), _2299), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2156 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2157), _2299), 0.0)).x), vec4(0.25)));
            float _2353 = 1.0 - (_2349 * cbSceneParam._m0[34u].x);
            float _2354 = 1.0 - (_2349 * cbSceneParam._m0[34u].y);
            float _2355 = 1.0 - (_2349 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2355) ? _2103 : (isnan(_2103) ? _2355 : min(_2103, _2355));
            frontier_phi_34_33_ladder_1 = isnan(_2354) ? _2102 : (isnan(_2102) ? _2354 : min(_2102, _2354));
            frontier_phi_34_33_ladder_2 = isnan(_2353) ? _2101 : (isnan(_2101) ? _2353 : min(_2101, _2353));
        }
        else
        {
            frontier_phi_34_33_ladder = _2103;
            frontier_phi_34_33_ladder_1 = _2102;
            frontier_phi_34_33_ladder_2 = _2101;
        }
        _2167 = frontier_phi_34_33_ladder_2;
        _2169 = frontier_phi_34_33_ladder_1;
        _2171 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2167 = _2101;
        _2169 = _2102;
        _2171 = _2103;
    }
    uvec4 _2176 = floatBitsToUint(cbInstanceData._m0[_834 + 5u]);
    uint _2178 = _2176.x * 14u;
    uint _2179 = _2178 + 13u;
    float _2186 = _874 + (-1.0);
    float _2191 = (cbLight._m0[_2179].x * _2186) + 1.0;
    float _2192 = (cbLight._m0[_2179].y * _2186) + 1.0;
    float _2193 = (cbLight._m0[_2179].z * _2186) + 1.0;
    float _2194 = (cbLight._m0[_2179].w * _2186) + 1.0;
    uint _2195 = _2178 + 5u;
    float _2201 = isnan(1.0) ? _2192 : (isnan(_2192) ? 1.0 : min(_2192, 1.0));
    uint _2205 = _2178 + 4u;
    float _2214 = isnan(1.0) ? _2191 : (isnan(_2191) ? 1.0 : min(_2191, 1.0));
    uint _2218 = _2178 | 1u;
    float _2229 = dot(vec3(cbLight._m0[_2178].xyz), vec3(_708, _709, _710));
    float _2232 = dot(vec3(cbLight._m0[_2218].xyz), vec3(_708, _709, _710));
    float _4414 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
    float _4425 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
    float _2237 = (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0))) * 0.3183098733425140380859375;
    float _2239 = (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))) * 0.3183098733425140380859375;
    float _2246 = ((cbLight._m0[_2195].x * _2201) * _2239) + (((cbLight._m0[_2205].x * _2167) * _2214) * _2237);
    float _2247 = ((_2201 * cbLight._m0[_2195].y) * _2239) + (((cbLight._m0[_2205].y * _2169) * _2214) * _2237);
    float _2248 = ((_2201 * cbLight._m0[_2195].z) * _2239) + (((cbLight._m0[_2205].z * _2171) * _2214) * _2237);
    uvec4 _2252 = floatBitsToUint(cbLight._m0[_2178 + 12u]);
    bool _2254 = _2252.x == 0u;
    float _2356;
    float _2358;
    float _2360;
    if (_2254)
    {
        _2356 = _2246;
        _2358 = _2247;
        _2360 = _2248;
    }
    else
    {
        uint _2364 = _2178 + 6u;
        float _2380 = (dot(vec3(cbLight._m0[_2178 + 2u].xyz), vec3(_708, _709, _710)) * 0.5) + 0.5;
        float _2381 = _2380 * _2380;
        float _4436 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
        float _2382 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
        float _2383 = isnan(1.0) ? _2193 : (isnan(_2193) ? 1.0 : min(_2193, 1.0));
        _2356 = (((cbLight._m0[_2364].x * 0.3183098733425140380859375) * _2382) * _2383) + _2246;
        _2358 = (((cbLight._m0[_2364].y * 0.3183098733425140380859375) * _2382) * _2383) + _2247;
        _2360 = (((cbLight._m0[_2364].z * 0.3183098733425140380859375) * _2382) * _2383) + _2248;
    }
    bool _2363 = _2252.y == 0u;
    float _2418;
    float _2420;
    float _2422;
    if (_2363)
    {
        _2418 = _2356;
        _2420 = _2358;
        _2422 = _2360;
    }
    else
    {
        uint _2591 = _2178 + 7u;
        float _2607 = (dot(vec3(cbLight._m0[_2178 + 3u].xyz), vec3(_708, _709, _710)) * 0.5) + 0.5;
        float _2608 = _2607 * _2607;
        float _4452 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
        float _2609 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
        float _2610 = isnan(1.0) ? _2194 : (isnan(_2194) ? 1.0 : min(_2194, 1.0));
        _2418 = (((cbLight._m0[_2591].x * 0.3183098733425140380859375) * _2609) * _2610) + _2356;
        _2420 = (((cbLight._m0[_2591].y * 0.3183098733425140380859375) * _2609) * _2610) + _2358;
        _2422 = (((cbLight._m0[_2591].z * 0.3183098733425140380859375) * _2609) * _2610) + _2360;
    }
    uint _2425 = _2178 + 8u;
    float _2438 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2178].w)) * _711) * 0.949999988079071044921875);
    float _2439 = _2438 * _2438;
    float _2440 = cbLight._m0[_2178].x + _788;
    float _2441 = cbLight._m0[_2178].y + _789;
    float _2442 = cbLight._m0[_2178].z + _790;
    float _2446 = inversesqrt(dot(vec3(_2440, _2441, _2442), vec3(_2440, _2441, _2442)));
    float _2447 = _2446 * _2440;
    float _2448 = _2446 * _2441;
    float _2449 = _2446 * _2442;
    float _2450 = dot(vec3(_708, _709, _710), vec3(cbLight._m0[_2178].xyz));
    float _4468 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
    float _2453 = isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0));
    float _4479 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _2454 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
    float _2455 = dot(vec3(_708, _709, _710), vec3(_2447, _2448, _2449));
    float _4490 = isnan(0.0) ? _2455 : (isnan(_2455) ? 0.0 : max(_2455, 0.0));
    float _2458 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
    float _2459 = dot(vec3(cbLight._m0[_2178].xyz), vec3(_2447, _2448, _2449));
    float _4501 = isnan(0.0) ? _2459 : (isnan(_2459) ? 0.0 : max(_2459, 0.0));
    float _2463 = _2439 * _2439;
    float _2467 = ((_2458 * _2458) * (_2463 + (-1.0))) + 1.0;
    float _2475 = exp2(log2(1.0 - (isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0)))) * 5.0);
    float _2476 = 0.959999978542327880859375 - _856;
    float _2478 = 0.959999978542327880859375 - _857;
    float _2479 = 0.959999978542327880859375 - _858;
    float _2486 = 1.0 - _2439;
    float _2497 = (0.5 / (((_2454 * ((_2453 * _2486) + _2439)) + 9.9999999392252902907785028219223e-09) + (((_2454 * _2486) + _2439) * _2453))) * _2453;
    float _4512 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
    float _2499 = (isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0))) * (_2463 / ((_2467 * _2467) * 3.141590118408203125));
    uint _2513 = _2178 + 9u;
    float _2524 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2218].w)) * _711) * 0.949999988079071044921875);
    float _2525 = _2524 * _2524;
    float _2526 = cbLight._m0[_2218].x + _788;
    float _2527 = cbLight._m0[_2218].y + _789;
    float _2528 = cbLight._m0[_2218].z + _790;
    float _2532 = inversesqrt(dot(vec3(_2526, _2527, _2528), vec3(_2526, _2527, _2528)));
    float _2533 = _2532 * _2526;
    float _2534 = _2532 * _2527;
    float _2535 = _2532 * _2528;
    float _2536 = dot(vec3(_708, _709, _710), vec3(cbLight._m0[_2218].xyz));
    float _4523 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
    float _2539 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
    float _2540 = dot(vec3(_708, _709, _710), vec3(_2533, _2534, _2535));
    float _4534 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
    float _2543 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
    float _2544 = dot(vec3(cbLight._m0[_2218].xyz), vec3(_2533, _2534, _2535));
    float _4545 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
    float _2548 = _2525 * _2525;
    float _2552 = ((_2543 * _2543) * (_2548 + (-1.0))) + 1.0;
    float _2559 = exp2(log2(1.0 - (isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0)))) * 5.0);
    float _2566 = 1.0 - _2525;
    float _2576 = (0.5 / (((_2454 * ((_2539 * _2566) + _2525)) + 9.9999999392252902907785028219223e-09) + (((_2454 * _2566) + _2525) * _2539))) * _2539;
    float _4556 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
    float _2578 = (isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0))) * (_2548 / ((_2552 * _2552) * 3.141590118408203125));
    float _2588 = (((((_2559 * _2476) + _859) * cbLight._m0[_2513].x) * _2578) * _2201) + ((((cbLight._m0[_2425].x * _2167) * ((_2475 * _2476) + _859)) * _2499) * _2214);
    float _2589 = (((((_2559 * _2478) + _861) * cbLight._m0[_2513].y) * _2578) * _2201) + ((((cbLight._m0[_2425].y * _2169) * ((_2475 * _2478) + _861)) * _2499) * _2214);
    float _2590 = (((((_2559 * _2479) + _862) * cbLight._m0[_2513].z) * _2578) * _2201) + ((((cbLight._m0[_2425].z * _2171) * ((_2475 * _2479) + _862)) * _2499) * _2214);
    float _2646;
    float _2648;
    float _2650;
    if (_2254)
    {
        _2646 = _2588;
        _2648 = _2589;
        _2650 = _2590;
    }
    else
    {
        uint _2652 = _2178 + 2u;
        uint _2656 = _2178 + 10u;
        float _2670 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2652].w)) * _711) * 0.949999988079071044921875);
        float _2671 = _2670 * _2670;
        float _2672 = cbLight._m0[_2652].x + _788;
        float _2673 = cbLight._m0[_2652].y + _789;
        float _2674 = cbLight._m0[_2652].z + _790;
        float _2678 = inversesqrt(dot(vec3(_2672, _2673, _2674), vec3(_2672, _2673, _2674)));
        float _2679 = _2678 * _2672;
        float _2680 = _2678 * _2673;
        float _2681 = _2678 * _2674;
        float _2682 = dot(vec3(_708, _709, _710), vec3(cbLight._m0[_2652].xyz));
        float _4567 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
        float _2685 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
        float _2686 = dot(vec3(_708, _709, _710), vec3(_2679, _2680, _2681));
        float _4578 = isnan(0.0) ? _2686 : (isnan(_2686) ? 0.0 : max(_2686, 0.0));
        float _2689 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
        float _2690 = dot(vec3(cbLight._m0[_2652].xyz), vec3(_2679, _2680, _2681));
        float _4589 = isnan(0.0) ? _2690 : (isnan(_2690) ? 0.0 : max(_2690, 0.0));
        float _2694 = _2671 * _2671;
        float _2698 = ((_2689 * _2689) * (_2694 + (-1.0))) + 1.0;
        float _2705 = exp2(log2(1.0 - (isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0)))) * 5.0);
        float _2712 = 1.0 - _2671;
        float _2722 = (0.5 / (((_2454 * ((_2685 * _2712) + _2671)) + 9.9999999392252902907785028219223e-09) + (((_2454 * _2712) + _2671) * _2685))) * _2685;
        float _4600 = isnan(0.0) ? _2722 : (isnan(_2722) ? 0.0 : max(_2722, 0.0));
        float _2724 = (isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0))) * (_2694 / ((_2698 * _2698) * 3.141590118408203125));
        float _2725 = isnan(1.0) ? _2193 : (isnan(_2193) ? 1.0 : min(_2193, 1.0));
        _2646 = (((((_2705 * _2476) + _859) * cbLight._m0[_2656].x) * _2724) * _2725) + _2588;
        _2648 = (((((_2705 * _2478) + _861) * cbLight._m0[_2656].y) * _2724) * _2725) + _2589;
        _2650 = (((((_2705 * _2479) + _862) * cbLight._m0[_2656].z) * _2724) * _2725) + _2590;
    }
    float _2756;
    float _2758;
    float _2760;
    if (_2363)
    {
        _2756 = _2646;
        _2758 = _2648;
        _2760 = _2650;
    }
    else
    {
        uint _2767 = _2178 + 3u;
        uint _2771 = _2178 + 11u;
        float _2785 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2767].w)) * _711) * 0.949999988079071044921875);
        float _2786 = _2785 * _2785;
        float _2787 = cbLight._m0[_2767].x + _788;
        float _2788 = cbLight._m0[_2767].y + _789;
        float _2789 = cbLight._m0[_2767].z + _790;
        float _2793 = inversesqrt(dot(vec3(_2787, _2788, _2789), vec3(_2787, _2788, _2789)));
        float _2794 = _2793 * _2787;
        float _2795 = _2793 * _2788;
        float _2796 = _2793 * _2789;
        float _2797 = dot(vec3(_708, _709, _710), vec3(cbLight._m0[_2767].xyz));
        float _4616 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
        float _2800 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
        float _2801 = dot(vec3(_708, _709, _710), vec3(_2794, _2795, _2796));
        float _4627 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
        float _2804 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
        float _2805 = dot(vec3(cbLight._m0[_2767].xyz), vec3(_2794, _2795, _2796));
        float _4638 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0));
        float _2809 = _2786 * _2786;
        float _2813 = ((_2804 * _2804) * (_2809 + (-1.0))) + 1.0;
        float _2820 = exp2(log2(1.0 - (isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0)))) * 5.0);
        float _2827 = 1.0 - _2786;
        float _2837 = (0.5 / (((_2454 * ((_2800 * _2827) + _2786)) + 9.9999999392252902907785028219223e-09) + (((_2454 * _2827) + _2786) * _2800))) * _2800;
        float _4649 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
        float _2839 = (isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0))) * (_2809 / ((_2813 * _2813) * 3.141590118408203125));
        float _2840 = isnan(1.0) ? _2194 : (isnan(_2194) ? 1.0 : min(_2194, 1.0));
        _2756 = (((((_2820 * _2476) + _859) * cbLight._m0[_2771].x) * _2839) * _2840) + _2646;
        _2758 = (((((_2820 * _2478) + _861) * cbLight._m0[_2771].y) * _2839) * _2840) + _2648;
        _2760 = (((((_2820 * _2479) + _862) * cbLight._m0[_2771].z) * _2839) * _2840) + _2650;
    }
    float _2906;
    float _2908;
    float _2910;
    float _2912;
    float _2914;
    float _2916;
    if (_2176.y == 0u)
    {
        uvec4 _2861 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2862 = _2861.x;
        uint _2873 = uint((float(_2861.y) * floor(float(uint(cbSceneParam._m0[85u].y * _797) / _2862))) + floor(float(uint(cbSceneParam._m0[85u].x * _796) / _2862)));
        float _2883 = (log2(_1954 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2884 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
        uint _2887 = uint(isnan(14.0) ? _2884 : (isnan(_2884) ? 14.0 : min(_2884, 14.0)));
        uvec4 _2892 = texelFetch(g_lightClusterGridBuffer, int(((_2887 << 2u) + (_2873 << 6u)) >> 2u));
        uint _2893 = _2892.x;
        uint _2894 = _2861.z;
        float _2973;
        float _2975;
        float _2977;
        float _2979;
        float _2981;
        float _2983;
        if (((((1u << ((_2894 >> 4u) & 15u)) + 4294967295u) & _2893) == 0u) || ((_2894 & 240u) == 0u))
        {
            _2973 = 0.0;
            _2975 = 0.0;
            _2977 = 0.0;
            _2979 = 0.0;
            _2981 = 0.0;
            _2983 = 0.0;
        }
        else
        {
            float _2974;
            float _2976;
            float _2978;
            float _2980;
            float _2982;
            float _2984;
            float _3118 = 0.0;
            float _3119 = 0.0;
            float _3120 = 0.0;
            float _3121 = 0.0;
            float _3122 = 0.0;
            float _3123 = 0.0;
            uint _3124 = 0u;
            uint _3133;
            bool _3134;
            for (;;)
            {
                _3133 = texelFetch(g_lightClassification, int((((_2887 << 5u) + (_2873 << 9u)) + (_3124 << 2u)) >> 2u)).x;
                _3134 = _3133 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3134)
                {
                    frontier_phi_66_pred = _3123;
                    frontier_phi_66_pred_1 = _3122;
                    frontier_phi_66_pred_2 = _3121;
                    frontier_phi_66_pred_3 = _3120;
                    frontier_phi_66_pred_4 = _3119;
                    frontier_phi_66_pred_5 = _3118;
                }
                else
                {
                    float _3242;
                    float _3243;
                    float _3244;
                    float _3245;
                    float _3246;
                    float _3247;
                    uint _3248;
                    _3242 = _3118;
                    _3243 = _3119;
                    _3244 = _3120;
                    _3245 = _3121;
                    _3246 = _3122;
                    _3247 = _3123;
                    _3248 = _3133;
                    float _3174;
                    float _3175;
                    float _3176;
                    float _3177;
                    float _3178;
                    float _3179;
                    for (;;)
                    {
                        uint _3252 = uint(findLSB(_3248)) + (_3124 << 5u);
                        uint _3249 = (_3248 + 4294967295u) & _3248;
                        uint _3254 = _3252 * 48u;
                        vec4 _3268 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3254)).x, texelFetch(g_PointLightRenderingBuffer, int(_3254 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3254 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3254 + 3u)).x));
                        uint _3274 = (_3252 * 48u) + 4u;
                        vec4 _3287 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3274)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3274 + 3u)).x));
                        uint _3293 = (_3252 * 48u) + 8u;
                        vec3 _3304 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3293)).x, texelFetch(g_PointLightRenderingBuffer, int(_3293 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3293 + 2u)).x));
                        float _3308 = _3268.x - _1952;
                        float _3309 = _3268.y - _1953;
                        float _3310 = _3268.z - _1954;
                        float _3311 = dot(vec3(_3308, _3309, _3310), vec3(_3308, _3309, _3310));
                        float _3314 = inversesqrt(_3311);
                        float _3315 = _3314 * _3308;
                        float _3316 = _3314 * _3309;
                        float _3317 = _3314 * _3310;
                        float _3318 = dot(vec3(_815, _818, _821), vec3(_3315, _3316, _3317));
                        float _3323 = 1.0 - (_3311 * _3268.w);
                        float _4675 = isnan(0.0) ? _3323 : (isnan(_3323) ? 0.0 : max(_3323, 0.0));
                        float _3324 = isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0));
                        float _3325 = sqrt(_3311) * _3287.w;
                        float _3328 = 1.39999997615814208984375 / (_3325 + 1.39999997615814208984375);
                        float _3329 = _3328 * _3328;
                        float _3332 = ((1.0 - _3329) * _3318) + _3329;
                        float _3335 = _3325 * _3325;
                        float _3339 = ((isnan(0.0) ? _3332 : (isnan(_3332) ? 0.0 : max(_3332, 0.0))) * _3324) / ((_3335 * 0.699999988079071044921875) + 1.0);
                        float _3343 = (-0.0) - _1952;
                        float _3344 = (-0.0) - _1953;
                        float _3345 = (-0.0) - _1954;
                        float _3349 = inversesqrt(dot(vec3(_3343, _3344, _3345), vec3(_3343, _3344, _3345)));
                        float _3350 = _3349 * _3343;
                        float _3351 = _3349 * _3344;
                        float _3352 = _3349 * _3345;
                        float _3359 = exp2(log2(1.0 / ((_3335 * 3.5) + 5.0)) * 0.25);
                        float _3360 = 1.0 - _890;
                        float _3367 = sqrt(1.0 - ((1.0 - (_3360 * _3360)) * (1.0 - (_3359 * _3359))));
                        float _3368 = _3367 * _3367;
                        float _3369 = _3368 * _3368;
                        float _3370 = _3350 + _3315;
                        float _3371 = _3351 + _3316;
                        float _3372 = _3352 + _3317;
                        float _3376 = inversesqrt(dot(vec3(_3370, _3371, _3372), vec3(_3370, _3371, _3372)));
                        float _3380 = dot(vec3(_815, _818, _821), vec3(_3350, _3351, _3352));
                        float _4691 = isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0));
                        float _3383 = isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0));
                        float _3384 = dot(vec3(_815, _818, _821), vec3(_3376 * _3370, _3376 * _3371, _3376 * _3372));
                        float _4702 = isnan(0.0) ? _3384 : (isnan(_3384) ? 0.0 : max(_3384, 0.0));
                        float _3387 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
                        float _3391 = ((_3387 * _3387) * (_3369 + (-1.0))) + 1.0;
                        float _3392 = _3328 * _3368;
                        float _3393 = _3392 * _3392;
                        float _3396 = ((1.0 - _3393) * _3318) + _3393;
                        float _4713 = isnan(0.0) ? _3396 : (isnan(_3396) ? 0.0 : max(_3396, 0.0));
                        float _3397 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
                        float _3398 = 1.0 - _3368;
                        float _3408 = (0.5 / (((_3397 * ((_3383 * _3398) + _3368)) + 9.9999999392252902907785028219223e-09) + (((_3397 * _3398) + _3368) * _3383))) * _3397;
                        float _4724 = isnan(0.0) ? _3408 : (isnan(_3408) ? 0.0 : max(_3408, 0.0));
                        float _3419 = (((_3369 * 3.1415927410125732421875) * (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0)))) / ((_3391 * _3391) * ((_3335 * 2.1991131305694580078125) + 3.141590118408203125))) * _3324;
                        _3177 = (_3339 * _3287.x) + _3245;
                        _3178 = (_3339 * _3287.y) + _3246;
                        _3179 = (_3339 * _3287.z) + _3247;
                        _3174 = (_3419 * _3304.x) + _3242;
                        _3175 = (_3419 * _3304.y) + _3243;
                        _3176 = (_3419 * _3304.z) + _3244;
                        if (_3249 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3242 = _3174;
                            _3243 = _3175;
                            _3244 = _3176;
                            _3245 = _3177;
                            _3246 = _3178;
                            _3247 = _3179;
                            _3248 = _3249;
                        }
                    }
                    frontier_phi_66_pred = _3179;
                    frontier_phi_66_pred_1 = _3178;
                    frontier_phi_66_pred_2 = _3177;
                    frontier_phi_66_pred_3 = _3176;
                    frontier_phi_66_pred_4 = _3175;
                    frontier_phi_66_pred_5 = _3174;
                }
                _2984 = frontier_phi_66_pred;
                _2982 = frontier_phi_66_pred_1;
                _2980 = frontier_phi_66_pred_2;
                _2978 = frontier_phi_66_pred_3;
                _2976 = frontier_phi_66_pred_4;
                _2974 = frontier_phi_66_pred_5;
                uint _3125 = _3124 + 1u;
                if (_3125 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3118 = _2974;
                    _3119 = _2976;
                    _3120 = _2978;
                    _3121 = _2980;
                    _3122 = _2982;
                    _3123 = _2984;
                    _3124 = _3125;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2973 = _2974;
            _2975 = _2976;
            _2977 = _2978;
            _2979 = _2980;
            _2981 = _2982;
            _2983 = _2984;
        }
        uvec4 _2987 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2988 = _2987.z;
        uint _2990 = (_2988 >> 8u) & 15u;
        float _3086;
        float _3088;
        float _3090;
        float _3092;
        float _3094;
        float _3096;
        if (((4294967295u << _2990) & _2893) == 0u)
        {
            _3086 = _2973;
            _3088 = _2975;
            _3090 = _2977;
            _3092 = _2979;
            _3094 = _2981;
            _3096 = _2983;
        }
        else
        {
            float _3111 = inversesqrt(dot(vec3(_1952, _1953, _1954), vec3(_1952, _1953, _1954)));
            float _3112 = _3111 * _1952;
            float _3113 = _3111 * _1953;
            float _3114 = _3111 * _1954;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2990 < ((_2988 >> 12u) & 15u))
            {
                float _3087;
                float _3089;
                float _3091;
                float _3093;
                float _3095;
                float _3097;
                float _3225 = _2973;
                float _3226 = _2975;
                float _3227 = _2977;
                float _3228 = _2979;
                float _3229 = _2981;
                float _3230 = _2983;
                uint _3231 = _2990;
                uint _3240;
                bool _3241;
                for (;;)
                {
                    _3240 = texelFetch(g_lightClassification, int((((_2887 << 5u) + (_2873 << 9u)) + (_3231 << 2u)) >> 2u)).x;
                    _3241 = _3240 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3241)
                    {
                        frontier_phi_72_pred = _3230;
                        frontier_phi_72_pred_1 = _3229;
                        frontier_phi_72_pred_2 = _3228;
                        frontier_phi_72_pred_3 = _3227;
                        frontier_phi_72_pred_4 = _3226;
                        frontier_phi_72_pred_5 = _3225;
                    }
                    else
                    {
                        float _3424;
                        float _3425;
                        float _3426;
                        float _3427;
                        float _3428;
                        float _3429;
                        float _3718;
                        float _3719;
                        float _3720;
                        float _3721;
                        float _3722;
                        float _3723;
                        float _3437 = _3225;
                        float _3438 = _3226;
                        float _3439 = _3227;
                        float _3440 = _3228;
                        float _3441 = _3229;
                        float _3442 = _3230;
                        uint _3443 = _3240;
                        uint _3444;
                        vec4 _3469;
                        float _3470;
                        vec4 _3485;
                        vec3 _3497;
                        vec4 _3512;
                        vec4 _3527;
                        float _3574;
                        bool _3575;
                        for (;;)
                        {
                            uint _3454 = ((_3231 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3443));
                            _3444 = (_3443 + 4294967295u) & _3443;
                            uint _3456 = _3454 * 40u;
                            _3469 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3456)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3456 + 3u)).x));
                            _3470 = _3469.w;
                            uint _3472 = (_3454 * 40u) + 4u;
                            _3485 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3472)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3472 + 3u)).x));
                            uint _3487 = (_3454 * 40u) + 8u;
                            _3497 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3487)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3487 + 2u)).x));
                            uint _3499 = (_3454 * 40u) + 16u;
                            _3512 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3499)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 3u)).x));
                            uint _3514 = (_3454 * 40u) + 20u;
                            _3527 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3514)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 3u)).x));
                            uint _3530 = (_3454 * 40u) + 24u;
                            vec4 _3543 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3530)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3530 + 3u)).x));
                            uint _3549 = (_3454 * 40u) + 28u;
                            vec4 _3562 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3549)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3549 + 3u)).x));
                            _3574 = fma(_1954, _3562.z, fma(_1953, _3562.y, _3562.x * _1952)) + _3562.w;
                            _3575 = !((fma(_1954, _3543.z, fma(_1953, _3543.y, _3543.x * _1952)) + _3543.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3575)
                            {
                                float _3602 = _3469.x - _1952;
                                float _3603 = _3469.y - _1953;
                                float _3604 = _3469.z - _1954;
                                float _3605 = dot(vec3(_3602, _3603, _3604), vec3(_3602, _3603, _3604));
                                float _3608 = inversesqrt(_3605);
                                float _3609 = _3608 * _3602;
                                float _3610 = _3608 * _3603;
                                float _3611 = _3608 * _3604;
                                float _3615 = 1.0 - (_3605 / (_3470 * _3470));
                                float _4735 = isnan(0.0) ? _3615 : (isnan(_3615) ? 0.0 : max(_3615, 0.0));
                                float _3616 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
                                float _3620 = sqrt(_3605) * _3485.w;
                                float _3622 = 1.39999997615814208984375 / (_3620 + 1.39999997615814208984375);
                                float _3623 = _3622 * _3622;
                                float _3626 = ((1.0 - _3623) * dot(vec3(_3609, _3610, _3611), vec3(_815, _818, _821))) + _3623;
                                float _3629 = _3620 * _3620;
                                float _3633 = (fma(_1954, _3512.z, fma(_1953, _3512.y, _3512.x * _1952)) + _3512.w) / _3574;
                                float _3634 = (fma(_1954, _3527.z, fma(_1953, _3527.y, _3527.x * _1952)) + _3527.w) / _3574;
                                float _3638 = 1.0 - dot(vec2(_3633, _3634), vec2(_3633, _3634));
                                float _4751 = isnan(0.0) ? _3638 : (isnan(_3638) ? 0.0 : max(_3638, 0.0));
                                float _3639 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
                                float _3640 = _3639 * (((isnan(0.0) ? _3626 : (isnan(_3626) ? 0.0 : max(_3626, 0.0))) * _3616) / ((_3629 * 0.699999988079071044921875) + 1.0));
                                float _3652 = exp2(log2(1.0 / ((_3629 * 3.5) + 5.0)) * 0.25);
                                float _3653 = 1.0 - _890;
                                float _3660 = sqrt(1.0 - ((1.0 - (_3653 * _3653)) * (1.0 - (_3652 * _3652))));
                                float _3661 = _3660 * _3660;
                                float _3662 = _3661 * _3661;
                                float _3663 = _3609 - _3112;
                                float _3664 = _3610 - _3113;
                                float _3665 = _3611 - _3114;
                                float _3669 = inversesqrt(dot(vec3(_3663, _3664, _3665), vec3(_3663, _3664, _3665)));
                                float _3673 = dot(vec3(_815, _818, _821), vec3((-0.0) - _3112, (-0.0) - _3113, (-0.0) - _3114));
                                float _4762 = isnan(0.0) ? _3673 : (isnan(_3673) ? 0.0 : max(_3673, 0.0));
                                float _3676 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
                                float _3677 = dot(vec3(_815, _818, _821), vec3(_3669 * _3663, _3669 * _3664, _3669 * _3665));
                                float _4773 = isnan(0.0) ? _3677 : (isnan(_3677) ? 0.0 : max(_3677, 0.0));
                                float _3680 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
                                float _3684 = ((_3680 * _3680) * (_3662 + (-1.0))) + 1.0;
                                float _3685 = _3622 * _3661;
                                float _3686 = _3685 * _3685;
                                float _3692 = ((1.0 - _3686) * dot(vec3(_815, _818, _821), vec3(_3609, _3610, _3611))) + _3686;
                                float _4784 = isnan(0.0) ? _3692 : (isnan(_3692) ? 0.0 : max(_3692, 0.0));
                                float _3693 = isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0));
                                float _3694 = 1.0 - _3661;
                                float _3704 = (0.5 / (((_3693 * ((_3676 * _3694) + _3661)) + 9.9999999392252902907785028219223e-09) + (((_3693 * _3694) + _3661) * _3676))) * _3693;
                                float _4795 = isnan(0.0) ? _3704 : (isnan(_3704) ? 0.0 : max(_3704, 0.0));
                                float _3714 = (_3639 * _3616) * (((_3662 * 3.1415927410125732421875) * (isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0)))) / ((_3684 * _3684) * ((_3629 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3640 * _3485.y;
                                frontier_phi_78_pred_1 = _3640 * _3485.x;
                                frontier_phi_78_pred_2 = _3714 * _3497.z;
                                frontier_phi_78_pred_3 = _3714 * _3497.y;
                                frontier_phi_78_pred_4 = _3714 * _3497.x;
                                frontier_phi_78_pred_5 = _3640 * _3485.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3722 = frontier_phi_78_pred;
                            _3721 = frontier_phi_78_pred_1;
                            _3720 = frontier_phi_78_pred_2;
                            _3719 = frontier_phi_78_pred_3;
                            _3718 = frontier_phi_78_pred_4;
                            _3723 = frontier_phi_78_pred_5;
                            _3427 = _3721 + _3440;
                            _3428 = _3722 + _3441;
                            _3429 = _3723 + _3442;
                            _3424 = _3718 + _3437;
                            _3425 = _3719 + _3438;
                            _3426 = _3720 + _3439;
                            if (_3444 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3437 = _3424;
                                _3438 = _3425;
                                _3439 = _3426;
                                _3440 = _3427;
                                _3441 = _3428;
                                _3442 = _3429;
                                _3443 = _3444;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3429;
                        frontier_phi_72_pred_1 = _3428;
                        frontier_phi_72_pred_2 = _3427;
                        frontier_phi_72_pred_3 = _3426;
                        frontier_phi_72_pred_4 = _3425;
                        frontier_phi_72_pred_5 = _3424;
                    }
                    _3097 = frontier_phi_72_pred;
                    _3095 = frontier_phi_72_pred_1;
                    _3093 = frontier_phi_72_pred_2;
                    _3091 = frontier_phi_72_pred_3;
                    _3089 = frontier_phi_72_pred_4;
                    _3087 = frontier_phi_72_pred_5;
                    uint _3232 = _3231 + 1u;
                    if (_3232 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3225 = _3087;
                        _3226 = _3089;
                        _3227 = _3091;
                        _3228 = _3093;
                        _3229 = _3095;
                        _3230 = _3097;
                        _3231 = _3232;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3097;
                frontier_phi_60_61_ladder_1 = _3095;
                frontier_phi_60_61_ladder_2 = _3091;
                frontier_phi_60_61_ladder_3 = _3089;
                frontier_phi_60_61_ladder_4 = _3087;
                frontier_phi_60_61_ladder_5 = _3093;
            }
            else
            {
                frontier_phi_60_61_ladder = _2983;
                frontier_phi_60_61_ladder_1 = _2981;
                frontier_phi_60_61_ladder_2 = _2977;
                frontier_phi_60_61_ladder_3 = _2975;
                frontier_phi_60_61_ladder_4 = _2973;
                frontier_phi_60_61_ladder_5 = _2979;
            }
            _3086 = frontier_phi_60_61_ladder_4;
            _3088 = frontier_phi_60_61_ladder_3;
            _3090 = frontier_phi_60_61_ladder_2;
            _3092 = frontier_phi_60_61_ladder_5;
            _3094 = frontier_phi_60_61_ladder_1;
            _3096 = frontier_phi_60_61_ladder;
        }
        float _3101 = isnan(1.0) ? _874 : (isnan(_874) ? 1.0 : min(_874, 1.0));
        _2906 = (_3101 * _3092) + _2418;
        _2908 = (_3101 * _3094) + _2420;
        _2910 = (_3101 * _3096) + _2422;
        _2912 = ((_3086 * _859) * _3101) + _2756;
        _2914 = ((_3088 * _861) * _3101) + _2758;
        _2916 = ((_3090 * _862) * _3101) + _2760;
    }
    else
    {
        _2906 = _2418;
        _2908 = _2420;
        _2910 = _2422;
        _2912 = _2756;
        _2914 = _2758;
        _2916 = _2760;
    }
    float _4811 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    float _4822 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _4833 = isnan(0.0) ? _851 : (isnan(_851) ? 0.0 : max(_851, 0.0));
    uint _2936 = _834 + 6u;
    float _2944 = _796 / cbSceneParam._m0[86u].x;
    float _2945 = _797 / cbSceneParam._m0[86u].y;
    vec4 _2959 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2944, _2945, (log2((isnan(cbSceneParam._m0[77u].w) ? _731 : (isnan(_731) ? cbSceneParam._m0[77u].w : min(_731, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2961 = _2959.x;
    float _2962 = _2959.y;
    float _2963 = _2959.z;
    float _2964 = _2959.w;
    float _3036;
    float _3038;
    float _3040;
    float _3042;
    if (_731 > cbSceneParam._m0[78u].w)
    {
        float _2998 = isnan(_731) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _731 : min(cbSceneParam._m0[80u].w, _731));
        float _2999 = _2998 / _731;
        float _3010 = _2999 * _781;
        float _3011 = _782 * _2999;
        float _3012 = (-0.0) - _3011;
        float _3014 = _2999 * _783;
        float _3016 = (cbSceneParam._m0[77u].w * _3012) / _2998;
        float _3017 = _3016 + cbSceneParam._m0[79u].w;
        float _3018 = cbSceneParam._m0[79u].w - _3011;
        float _3024 = sqrt(((_3010 * _3010) + (_3011 * _3011)) + (_3014 * _3014));
        float _3027 = (1.0 - (cbSceneParam._m0[77u].w / _2998)) * _3024;
        float _3032 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3034 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3187;
        if (abs((_3012 - _3016) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3187 = ((((_3017 > 0.0) ? exp2(_3032 * _3017) : (2.0 - exp2(_3034 * _3017))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3027;
        }
        else
        {
            float _3147 = 1.0 / cbSceneParam._m0[80u].x;
            float _3148 = isnan(_3018) ? _3017 : (isnan(_3017) ? _3018 : max(_3017, _3018));
            float _3149 = isnan(_3018) ? _3017 : (isnan(_3017) ? _3018 : min(_3017, _3018));
            float _3158 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : min(_3148, 0.0));
            float _3159 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : min(_3149, 0.0));
            _3187 = ((abs(_3024 / _3012) * cbSceneParam._m0[80u].y) * ((((_3158 - _3159) * 2.0) - ((exp2(_3032 * (isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0)))) - exp2(_3032 * (isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0))))) * _3147)) - ((exp2(_3034 * _3158) - exp2(_3034 * _3159)) * _3147))) + (_3027 * cbSceneParam._m0[80u].z);
        }
        vec4 _3189 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2944, _2945, 1.0), 0.0);
        float _3198 = exp2((_3187 * (-1.44269502162933349609375)) * (1.0 - _3189.w));
        float _3199 = log2(_3198);
        float _3215 = log2(_2964);
        _3036 = (exp2(_3215 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3199 * cbSceneParam._m0[78u].x)) * _3189.x) / cbSceneParam._m0[78u].x)) + _2961;
        _3038 = (exp2(_3215 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3199 * cbSceneParam._m0[78u].y)) * _3189.y) / cbSceneParam._m0[78u].y)) + _2962;
        _3040 = (exp2(_3215 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3199 * cbSceneParam._m0[78u].z)) * _3189.z) / cbSceneParam._m0[78u].z)) + _2963;
        _3042 = _3198 * _2964;
    }
    else
    {
        _3036 = _2961;
        _3038 = _2962;
        _3040 = _2963;
        _3042 = _2964;
    }
    float _3054 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3055 = _3054 == 3.0;
    float _3056 = log2(_3042);
    float _3063 = exp2(_3056 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0))) * (_2906 + ((isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0))) * _874))) + ((_2912 + ((isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0))) * _1684)) * cbPerFrame._m0[3u].x));
    float _3064 = exp2(_3056 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0))) * (_2908 + ((isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0))) * _874))) + ((_2914 + ((isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0))) * _1684)) * cbPerFrame._m0[3u].x));
    float _3065 = exp2(_3056 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0))) * (_2910 + ((isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0))) * _874))) + ((_2916 + ((isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0))) * _1684)) * cbPerFrame._m0[3u].x));
    float _3074 = (_3054 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3074 * (_3055 ? _3063 : (_3063 + (cbSceneParam._m0[72u].w * _3036)));
    SV_Target.y = _3074 * (_3055 ? _3064 : (_3064 + (cbSceneParam._m0[72u].w * _3038)));
    SV_Target.z = _3074 * (_3055 ? _3065 : (_3065 + (cbSceneParam._m0[72u].w * _3040)));
    SV_Target.w = cbInstanceData._m0[_2936].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2936].w;
}


