#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_20;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1323;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _262 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _268 = _262.x * cbMtdParam._m0[10u].x;
    float _269 = _262.y * cbMtdParam._m0[10u].y;
    float _270 = _262.z * cbMtdParam._m0[10u].z;
    vec4 _288 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _338 = cbMtdParam._m0[18u].y * texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x;
    float _349 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].x * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].y * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _338)) + 1.0;
    float _3936 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _350 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _357 = (_350 * ((_288.x * cbMtdParam._m0[11u].x) - _268)) + _268;
    float _358 = (_350 * ((_288.y * cbMtdParam._m0[11u].y) - _269)) + _269;
    float _359 = (_350 * ((_288.z * cbMtdParam._m0[11u].z) - _270)) + _270;
    vec4 _377 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _404 = ((cbMtdParam._m0[17u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _338)) + 1.0;
    float _3947 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _405 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
    float _412 = (_405 * ((_377.x * cbMtdParam._m0[12u].x) - _357)) + _357;
    float _413 = (_405 * ((_377.y * cbMtdParam._m0[12u].y) - _358)) + _358;
    float _414 = (_405 * ((_377.z * cbMtdParam._m0[12u].z) - _359)) + _359;
    vec4 _431 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _456 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[18u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[18u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _338)) + 1.0;
    float _3958 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _457 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
    float _464 = (_457 * ((_431.x * cbMtdParam._m0[13u].x) - _412)) + _412;
    float _465 = (_457 * ((_431.y * cbMtdParam._m0[13u].y) - _413)) + _413;
    float _466 = (_457 * ((_431.z * cbMtdParam._m0[13u].z) - _414)) + _414;
    vec4 _486 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _515 = (TEXCOORD_5.x - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.z) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.w) + cbTextureTilingScale._m0[18u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].z + 1.0);
    float _3969 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _516 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    float _523 = (_516 * ((_486.x * cbMtdParam._m0[14u].x) - _464)) + _464;
    float _524 = (_516 * ((_486.y * cbMtdParam._m0[14u].y) - _465)) + _465;
    float _525 = (_516 * ((_486.z * cbMtdParam._m0[14u].z) - _466)) + _466;
    vec4 _538 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _540 = _538.x;
    float _558 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _540) * _350) + _540;
    float _576 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _558) * _405) + _558;
    float _593 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _576) * _457) + _576;
    float _595 = _593 - (_593 * TEXCOORD_5.x);
    vec4 _608 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _630 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _632 = _630.x;
    float _633 = _630.y;
    float _636 = cbMtdParam._m0[17u].y * _630.z;
    vec4 _648 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _657 = (((cbMtdParam._m0[17u].x * _648.z) - _636) * _350) + _636;
    vec4 _670 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _682 = (((cbMtdParam._m0[16u].w * _670.z) - _657) * _405) + _657;
    vec4 _695 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _704 = (((cbMtdParam._m0[16u].z * _695.z) - _682) * _457) + _682;
    float _709 = ((cbMtdParam._m0[16u].x * TEXCOORD_5.x) * ((_608.z * cbMtdParam._m0[17u].z) - _704)) + _704;
    vec4 _722 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _734 = ((_648.x - _632) * _350) + _632;
    float _735 = ((_648.y - _633) * _350) + _633;
    float _740 = ((_670.x - _734) * _405) + _734;
    float _741 = ((_670.y - _735) * _405) + _735;
    float _750 = ((((_695.x - _740) * _457) + _740) * 2.0) + (-1.0);
    float _751 = ((((_695.y - _741) * _457) + _741) * 2.0) + (-1.0);
    float _752 = dot(vec2(_750, _751), vec2(_750, _751));
    float _3980 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _757 = sqrt(1.0 - (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))));
    float _767 = ((((_722.x * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _750) + ((((_608.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[15u].y);
    float _768 = ((((_722.y * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _751) + ((((_608.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[15u].y);
    float _771 = fma(_757, _232 * NORMAL.x, fma(_768, _239 * TANGENT.x, (_225 * _217) * _767));
    float _774 = fma(_757, _232 * NORMAL.y, fma(_768, _239 * TANGENT.y, (_225 * _218) * _767));
    float _777 = fma(_757, _232 * NORMAL.z, fma(_768, _239 * TANGENT.z, (_225 * _219) * _767));
    float _781 = inversesqrt(dot(vec3(_771, _774, _777), vec3(_771, _774, _777)));
    float _782 = _781 * _771;
    float _783 = _781 * _774;
    float _784 = _781 * _777;
    float _3991 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _785 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    float _4002 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _4013 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _4024 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _4035 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _789 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
    float _805 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _845 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _855 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _845);
    float _856 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _845);
    float _857 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _845);
    float _861 = inversesqrt(dot(vec3(_855, _856, _857), vec3(_855, _856, _857)));
    float _862 = _855 * _861;
    float _863 = _856 * _861;
    float _864 = _857 * _861;
    float _870 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _871 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _889 = fma(_784, cbSceneParam._m0[5u].z, fma(_783, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _782));
    float _892 = fma(_784, cbSceneParam._m0[6u].z, fma(_783, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _782));
    float _895 = fma(_784, cbSceneParam._m0[7u].z, fma(_783, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _782));
    uint _908 = uint(roundEven(NORMAL.w)) * 13u;
    uint _910 = (_908 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _916 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0)))) * cbInstanceData._m0[_910].x;
    float _917 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0)))) * cbInstanceData._m0[_910].y;
    float _918 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0)))) * cbInstanceData._m0[_910].z;
    float _4046 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _919 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    float _4057 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _920 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _4068 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    float _921 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    float _922 = 1.0 - _789;
    float _923 = _919 * _922;
    float _924 = _920 * _922;
    float _925 = _921 * _922;
    float _930 = (_919 + (-0.039999999105930328369140625)) * _789;
    float _931 = (_920 + (-0.039999999105930328369140625)) * _789;
    float _932 = (_921 + (-0.039999999105930328369140625)) * _789;
    float _933 = _930 + 0.039999999105930328369140625;
    float _935 = _931 + 0.039999999105930328369140625;
    float _936 = _932 + 0.039999999105930328369140625;
    vec4 _945 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _870, cbSceneParam._m0[86u].y * _871));
    float _948 = _945.x * TEXCOORD_5.w;
    float _949 = dot(vec3(_782, _783, _784), vec3(_862, _863, _864));
    float _952 = _949 * 2.0;
    float _956 = (_952 * _782) - _862;
    float _957 = (_952 * _783) - _863;
    float _958 = (_952 * _784) - _864;
    float _962 = abs(dot(vec3(_862, _863, _864), vec3(_782, _783, _784)));
    float _4079 = isnan(0.0) ? _962 : (isnan(_962) ? 0.0 : max(_962, 0.0));
    float _964 = sqrt(_785);
    float _977 = exp2((_964 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_964 * 3.0));
    float _983 = (1.0 - _977) * ((_964 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _984 = _977 * _964;
    float _1012 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1016 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1020 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1322;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1047 = fma(_1020, cbModelParam._m0[26u].z, fma(_1016, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1012));
        float _1051 = fma(_1020, cbModelParam._m0[27u].z, fma(_1016, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1012));
        float _1055 = fma(_1020, cbModelParam._m0[28u].z, fma(_1016, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1012));
        float _1080 = _1012 + _782;
        float _1081 = _1016 + _783;
        float _1082 = _1020 + _784;
        float _1092 = fma(_1082, cbModelParam._m0[26u].z, fma(_1081, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1080)) - _1047;
        float _1093 = fma(_1082, cbModelParam._m0[27u].z, fma(_1081, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1080)) - _1051;
        float _1094 = fma(_1082, cbModelParam._m0[28u].z, fma(_1081, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1080)) - _1055;
        float _1098 = inversesqrt(dot(vec3(_1092, _1093, _1094), vec3(_1092, _1093, _1094)));
        float _1111 = ((_1098 * _1092) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1047 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1112 = ((_1098 * _1093) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1051 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1113 = ((_1098 * _1094) / cbModelParam._m0[34u].z) + ((((((_1055 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1116 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1111, _1112, _1113), 0.0);
        vec4 _1123 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1111, _1112, _1113), 0.0);
        vec4 _1130 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1111, _1112, _1113), 0.0);
        vec4 _1137 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1111, _1112, _1113), 0.0);
        float _1150 = exp2((_1116.w + (-0.5)) * 20.0) * 2.0;
        float _1151 = _1150 * (_1116.x + (-0.5));
        float _1152 = _1150 * (_1116.y + (-0.5));
        float _1153 = _1150 * (_1116.z + (-0.5));
        float _1160 = exp2((_1123.w + (-0.5)) * 20.0) * 2.0;
        float _1161 = _1160 * (_1123.x + (-0.5));
        float _1162 = _1160 * (_1123.y + (-0.5));
        float _1163 = _1160 * (_1123.z + (-0.5));
        float _1170 = exp2((_1130.w + (-0.5)) * 20.0) * 2.0;
        float _1171 = _1170 * (_1130.x + (-0.5));
        float _1172 = _1170 * (_1130.y + (-0.5));
        float _1173 = _1170 * (_1130.z + (-0.5));
        float _1180 = exp2((_1137.w + (-0.5)) * 20.0) * 2.0;
        float _1181 = _1180 * (_1137.x + (-0.5));
        float _1182 = _1180 * (_1137.y + (-0.5));
        float _1183 = _1180 * (_1137.z + (-0.5));
        float _1184 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1185 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1186 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1187 = _1151 * 0.5;
        float _1188 = _1161 * 0.5;
        float _1189 = _1171 * 0.5;
        float _1190 = dot(vec3(_1187, _1188, _1189), vec3(_1187, _1188, _1189));
        float _1195 = (_1190 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1190);
        float _1204 = (dot(vec3(_782, _783, _784), vec3(_1195 * _1187, _1195 * _1188, _1195 * _1189)) + 1.0) * 0.5;
        float _4105 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1214 = sqrt(((_1188 * _1188) + (_1187 * _1187)) + (_1189 * _1189)) / (_1184 + 9.9999997473787516355514526367188e-06);
        float _4116 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1216 = _1215 * 2.0;
        float _1220 = (1.0 - _1215) / (_1215 + 1.0);
        float _4127 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1230 = ((((1.0 - _1221) * (_1216 + 2.0)) * exp2(log2(isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * (_1216 + 1.0))) + _1221) * _1184;
        float _1231 = _1152 * 0.5;
        float _1232 = _1162 * 0.5;
        float _1233 = _1172 * 0.5;
        float _1234 = dot(vec3(_1231, _1232, _1233), vec3(_1231, _1232, _1233));
        float _1239 = (_1234 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1234);
        float _1247 = (dot(vec3(_782, _783, _784), vec3(_1239 * _1231, _1239 * _1232, _1239 * _1233)) + 1.0) * 0.5;
        float _4138 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1256 = sqrt(((_1232 * _1232) + (_1231 * _1231)) + (_1233 * _1233)) / (_1185 + 9.9999997473787516355514526367188e-06);
        float _4149 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1258 = _1257 * 2.0;
        float _1262 = (1.0 - _1257) / (_1257 + 1.0);
        float _4160 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1272 = ((((1.0 - _1263) * (_1258 + 2.0)) * exp2(log2(isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_1258 + 1.0))) + _1263) * _1185;
        float _1273 = _1153 * 0.5;
        float _1274 = _1163 * 0.5;
        float _1275 = _1173 * 0.5;
        float _1276 = dot(vec3(_1273, _1274, _1275), vec3(_1273, _1274, _1275));
        float _1281 = (_1276 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1276);
        float _1289 = (dot(vec3(_782, _783, _784), vec3(_1281 * _1273, _1281 * _1274, _1281 * _1275)) + 1.0) * 0.5;
        float _4171 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1298 = sqrt(((_1274 * _1274) + (_1273 * _1273)) + (_1275 * _1275)) / (_1186 + 9.9999997473787516355514526367188e-06);
        float _4182 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1300 = _1299 * 2.0;
        float _1304 = (1.0 - _1299) / (_1299 + 1.0);
        float _4193 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1314 = ((((1.0 - _1305) * (_1300 + 2.0)) * exp2(log2(isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_1300 + 1.0))) + _1305) * _1186;
        _1322 = _1153;
        _1324 = _1152;
        _1325 = _1151;
        _1326 = _1163;
        _1327 = _1162;
        _1328 = _1161;
        _1329 = _1173;
        _1330 = _1172;
        _1331 = _1171;
        _1332 = _1186;
        _1333 = _1185;
        _1334 = _1184;
        _1335 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)));
        _1336 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0)));
        _1337 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)));
    }
    else
    {
        _1322 = _1323;
        _1324 = _1323;
        _1325 = _1323;
        _1326 = _1323;
        _1327 = _1323;
        _1328 = _1323;
        _1329 = _1323;
        _1330 = _1323;
        _1331 = _1323;
        _1332 = _1323;
        _1333 = _1323;
        _1334 = _1323;
        _1335 = 0.0;
        _1336 = 0.0;
        _1337 = 0.0;
    }
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    float _1646;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1363 = fma(_1020, cbModelParam._m0[30u].z, fma(_1016, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1012));
        float _1367 = fma(_1020, cbModelParam._m0[31u].z, fma(_1016, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1012));
        float _1371 = fma(_1020, cbModelParam._m0[32u].z, fma(_1016, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1012));
        float _1394 = _1012 + _782;
        float _1395 = _1016 + _783;
        float _1396 = _1020 + _784;
        float _1406 = fma(_1396, cbModelParam._m0[30u].z, fma(_1395, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1394)) - _1363;
        float _1407 = fma(_1396, cbModelParam._m0[31u].z, fma(_1395, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1394)) - _1367;
        float _1408 = fma(_1396, cbModelParam._m0[32u].z, fma(_1395, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1394)) - _1371;
        float _1412 = inversesqrt(dot(vec3(_1406, _1407, _1408), vec3(_1406, _1407, _1408)));
        float _1425 = ((_1412 * _1406) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1363 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1426 = ((_1412 * _1407) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1367 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1427 = ((_1412 * _1408) / cbModelParam._m0[35u].z) + ((((((_1371 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1429 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1425, _1426, _1427), 0.0);
        vec4 _1436 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1425, _1426, _1427), 0.0);
        vec4 _1443 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1425, _1426, _1427), 0.0);
        vec4 _1450 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1425, _1426, _1427), 0.0);
        float _1462 = exp2((_1429.w + (-0.5)) * 20.0) * 2.0;
        float _1463 = _1462 * (_1429.x + (-0.5));
        float _1464 = _1462 * (_1429.y + (-0.5));
        float _1465 = _1462 * (_1429.z + (-0.5));
        float _1472 = exp2((_1436.w + (-0.5)) * 20.0) * 2.0;
        float _1473 = _1472 * (_1436.x + (-0.5));
        float _1474 = _1472 * (_1436.y + (-0.5));
        float _1475 = _1472 * (_1436.z + (-0.5));
        float _1482 = exp2((_1443.w + (-0.5)) * 20.0) * 2.0;
        float _1483 = _1482 * (_1443.x + (-0.5));
        float _1484 = _1482 * (_1443.y + (-0.5));
        float _1485 = _1482 * (_1443.z + (-0.5));
        float _1492 = exp2((_1450.w + (-0.5)) * 20.0) * 2.0;
        float _1493 = _1492 * (_1450.x + (-0.5));
        float _1494 = _1492 * (_1450.y + (-0.5));
        float _1495 = _1492 * (_1450.z + (-0.5));
        float _1496 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1497 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1498 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1499 = _1463 * 0.5;
        float _1500 = _1473 * 0.5;
        float _1501 = _1483 * 0.5;
        float _1502 = dot(vec3(_1499, _1500, _1501), vec3(_1499, _1500, _1501));
        float _1507 = (_1502 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1502);
        float _1515 = (dot(vec3(_782, _783, _784), vec3(_1507 * _1499, _1507 * _1500, _1507 * _1501)) + 1.0) * 0.5;
        float _4234 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1524 = sqrt(((_1500 * _1500) + (_1499 * _1499)) + (_1501 * _1501)) / (_1496 + 9.9999997473787516355514526367188e-06);
        float _4245 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1525 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
        float _1526 = _1525 * 2.0;
        float _1530 = (1.0 - _1525) / (_1525 + 1.0);
        float _4256 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
        float _1531 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _1540 = ((((1.0 - _1531) * (_1526 + 2.0)) * exp2(log2(isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0))) * (_1526 + 1.0))) + _1531) * _1496;
        float _1541 = _1464 * 0.5;
        float _1542 = _1474 * 0.5;
        float _1543 = _1484 * 0.5;
        float _1544 = dot(vec3(_1541, _1542, _1543), vec3(_1541, _1542, _1543));
        float _1549 = (_1544 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1544);
        float _1557 = (dot(vec3(_782, _783, _784), vec3(_1549 * _1541, _1549 * _1542, _1549 * _1543)) + 1.0) * 0.5;
        float _4267 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1566 = sqrt(((_1542 * _1542) + (_1541 * _1541)) + (_1543 * _1543)) / (_1497 + 9.9999997473787516355514526367188e-06);
        float _4278 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1567 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _1568 = _1567 * 2.0;
        float _1572 = (1.0 - _1567) / (_1567 + 1.0);
        float _4289 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1573 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _1582 = ((((1.0 - _1573) * (_1568 + 2.0)) * exp2(log2(isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_1568 + 1.0))) + _1573) * _1497;
        float _1583 = _1465 * 0.5;
        float _1584 = _1475 * 0.5;
        float _1585 = _1485 * 0.5;
        float _1586 = dot(vec3(_1583, _1584, _1585), vec3(_1583, _1584, _1585));
        float _1591 = (_1586 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1586);
        float _1599 = (dot(vec3(_782, _783, _784), vec3(_1591 * _1583, _1591 * _1584, _1591 * _1585)) + 1.0) * 0.5;
        float _4300 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
        float _1608 = sqrt(((_1584 * _1584) + (_1583 * _1583)) + (_1585 * _1585)) / (_1498 + 9.9999997473787516355514526367188e-06);
        float _4311 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1609 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _1610 = _1609 * 2.0;
        float _1614 = (1.0 - _1609) / (_1609 + 1.0);
        float _4322 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        float _1615 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _1624 = ((((1.0 - _1615) * (_1610 + 2.0)) * exp2(log2(isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * (_1610 + 1.0))) + _1615) * _1498;
        _1632 = _1465;
        _1633 = _1464;
        _1634 = _1463;
        _1635 = _1475;
        _1636 = _1474;
        _1637 = _1473;
        _1638 = _1485;
        _1639 = _1484;
        _1640 = _1483;
        _1641 = _1498;
        _1642 = _1497;
        _1643 = _1496;
        _1644 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0)));
        _1645 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0)));
        _1646 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0)));
    }
    else
    {
        _1632 = _1323;
        _1633 = _1323;
        _1634 = _1323;
        _1635 = _1323;
        _1636 = _1323;
        _1637 = _1323;
        _1638 = _1323;
        _1639 = _1323;
        _1640 = _1323;
        _1641 = _1323;
        _1642 = _1323;
        _1643 = _1323;
        _1644 = 0.0;
        _1645 = 0.0;
        _1646 = 0.0;
    }
    float _1656 = (cbModelParam._m0[1u].x * (_1644 - _1335)) + _1335;
    float _1657 = (cbModelParam._m0[1u].x * (_1645 - _1336)) + _1336;
    float _1658 = (cbModelParam._m0[1u].x * (_1646 - _1337)) + _1337;
    float _1679 = fma(_1658, cbSceneParam._m0[89u].z, fma(_1657, cbSceneParam._m0[89u].y, _1656 * cbSceneParam._m0[89u].x));
    float _1682 = fma(_1658, cbSceneParam._m0[90u].z, fma(_1657, cbSceneParam._m0[90u].y, _1656 * cbSceneParam._m0[90u].x));
    float _1685 = fma(_1658, cbSceneParam._m0[91u].z, fma(_1657, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1656));
    float _1700 = _956 * 0.5;
    float _1701 = _957 * 0.5;
    float _1702 = _958 * 0.5;
    float _1703 = dot(vec4(_1700, _1701, _1702, 1.0), vec4(_1634, _1637, _1640, _1643));
    float _1706 = dot(vec4(_1700, _1701, _1702, 1.0), vec4(_1633, _1636, _1639, _1642));
    float _1709 = dot(vec4(_1700, _1701, _1702, 1.0), vec4(_1632, _1635, _1638, _1641));
    float _1743;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1716 = dot(vec4(_1700, _1701, _1702, 1.0), vec4(_1322, _1326, _1329, _1332));
        float _1720 = dot(vec4(_1700, _1701, _1702, 1.0), vec4(_1324, _1327, _1330, _1333));
        float _1724 = dot(vec4(_1700, _1701, _1702, 1.0), vec4(_1325, _1328, _1331, _1334));
        float _1731 = dot(vec4(cbModelParam._m0[39u]), vec4(_1700, _1701, _1702, 1.0));
        _1743 = dot(vec3(isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0)), isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0)), isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1731) ? 0.0 : (isnan(0.0) ? _1731 : max(0.0, _1731))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1743 = 1.0;
    }
    float _1754;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1745 = dot(vec4(cbModelParam._m0[40u]), vec4(_1700, _1701, _1702, 1.0));
        _1754 = dot(vec3(isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0)), isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0)), isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1745) ? 0.0 : (isnan(0.0) ? _1745 : max(0.0, _1745))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1754 = 1.0;
    }
    float _1758 = (_1754 * cbModelParam._m0[1u].x) + (_1743 * (1.0 - cbModelParam._m0[1u].x));
    float _1768 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _785);
    float _1769 = isnan(_1768) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1768 : min(cbModelParam._m0[25u].z, _1768));
    float _1849;
    float _1851;
    float _1853;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1816 = fma(_1020, cbModelParam._m0[13u].z, fma(_1016, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1012)) + cbModelParam._m0[13u].w;
        float _1820 = fma(_1020, cbModelParam._m0[14u].z, fma(_1016, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1012)) + cbModelParam._m0[14u].w;
        float _1824 = fma(_1020, cbModelParam._m0[15u].z, fma(_1016, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1012)) + cbModelParam._m0[15u].w;
        float _1827 = fma(_958, cbModelParam._m0[13u].z, fma(_957, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _956));
        float _1830 = fma(_958, cbModelParam._m0[14u].z, fma(_957, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _956));
        float _1833 = fma(_958, cbModelParam._m0[15u].z, fma(_957, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _956));
        float _1861;
        if (_1827 > 0.0)
        {
            _1861 = abs((1.0 - _1816) / _1827);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1827 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1816 + 1.0) / _1827);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1861 = frontier_phi_14_12_ladder;
        }
        float _2034;
        if (_1830 > 0.0)
        {
            _2034 = abs((1.0 - _1820) / _1830);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1830 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1820 + 1.0) / _1830);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2034 = frontier_phi_23_19_ladder;
        }
        float _2330;
        if (_1833 > 0.0)
        {
            _2330 = abs((1.0 - _1824) / _1833);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1833 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1824 + 1.0) / _1833);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2330 = frontier_phi_35_30_ladder;
        }
        float _2332 = isnan(_2034) ? _1861 : (isnan(_1861) ? _2034 : min(_1861, _2034));
        float _2333 = isnan(_2330) ? _2332 : (isnan(_2332) ? _2330 : min(_2332, _2330));
        float _2337 = (_2333 * _1827) + _1816;
        float _2338 = (_2333 * _1830) + _1820;
        float _2339 = (_2333 * _1833) + _1824;
        float _2340 = _2333 * 9.9999997473787516355514526367188e-05;
        float _2342 = (-1.0) - _2340;
        float _2344 = _2340 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2339 > _2344) || ((_2339 < _2342) || ((_2338 > _2344) || ((_2338 < _2342) || ((_2337 < _2342) || (_2337 > _2344))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2484 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2339, cbModelParam._m0[9u].z, fma(_2338, cbModelParam._m0[9u].y, _2337 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2339, cbModelParam._m0[10u].z, fma(_2338, cbModelParam._m0[10u].y, _2337 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2339, cbModelParam._m0[11u].z, fma(_2338, cbModelParam._m0[11u].y, _2337 * cbModelParam._m0[11u].x))), _1769);
            frontier_phi_13_35_ladder = _2484.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2484.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2484.x * cbModelParam._m0[1u].y;
        }
        _1849 = frontier_phi_13_35_ladder_2;
        _1851 = frontier_phi_13_35_ladder_1;
        _1853 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1837 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_956, _957, _958), _1769);
        _1849 = _1837.x * cbModelParam._m0[1u].y;
        _1851 = _1837.y * cbModelParam._m0[1u].y;
        _1853 = _1837.z * cbModelParam._m0[1u].y;
    }
    float _1857 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _785);
    float _1858 = isnan(_1857) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1857 : min(cbModelParam._m0[25u].w, _1857));
    float _1949;
    float _1951;
    float _1953;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1913 = fma(_1020, cbModelParam._m0[21u].z, fma(_1016, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1012)) + cbModelParam._m0[21u].w;
        float _1917 = fma(_1020, cbModelParam._m0[22u].z, fma(_1016, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1012)) + cbModelParam._m0[22u].w;
        float _1921 = fma(_1020, cbModelParam._m0[23u].z, fma(_1016, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1012)) + cbModelParam._m0[23u].w;
        float _1924 = fma(_958, cbModelParam._m0[21u].z, fma(_957, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _956));
        float _1927 = fma(_958, cbModelParam._m0[22u].z, fma(_957, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _956));
        float _1930 = fma(_958, cbModelParam._m0[23u].z, fma(_957, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _956));
        float _2039;
        if (_1924 > 0.0)
        {
            _2039 = abs((1.0 - _1913) / _1924);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1924 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1913 + 1.0) / _1924);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2039 = frontier_phi_25_21_ladder;
        }
        float _2357;
        if (_1927 > 0.0)
        {
            _2357 = abs((1.0 - _1917) / _1927);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1927 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1917 + 1.0) / _1927);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2357 = frontier_phi_37_32_ladder;
        }
        float _2695;
        if (_1930 > 0.0)
        {
            _2695 = abs((1.0 - _1921) / _1930);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1930 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1921 + 1.0) / _1930);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2695 = frontier_phi_47_44_ladder;
        }
        float _2697 = isnan(_2357) ? _2039 : (isnan(_2039) ? _2357 : min(_2039, _2357));
        float _2698 = isnan(_2695) ? _2697 : (isnan(_2697) ? _2695 : min(_2697, _2695));
        float _2702 = (_2698 * _1924) + _1913;
        float _2703 = (_2698 * _1927) + _1917;
        float _2704 = (_2698 * _1930) + _1921;
        float _2705 = _2698 * 9.9999997473787516355514526367188e-05;
        float _2706 = (-1.0) - _2705;
        float _2708 = _2705 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2704 > _2708) || ((_2704 < _2706) || ((_2703 > _2708) || ((_2703 < _2706) || ((_2702 < _2706) || (_2702 > _2708))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2826 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2704, cbModelParam._m0[17u].z, fma(_2703, cbModelParam._m0[17u].y, _2702 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2704, cbModelParam._m0[18u].z, fma(_2703, cbModelParam._m0[18u].y, _2702 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2704, cbModelParam._m0[19u].z, fma(_2703, cbModelParam._m0[19u].y, _2702 * cbModelParam._m0[19u].x))), _1858);
            frontier_phi_22_47_ladder = _2826.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2826.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2826.x * cbModelParam._m0[1u].z;
        }
        _1949 = frontier_phi_22_47_ladder_2;
        _1951 = frontier_phi_22_47_ladder_1;
        _1953 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1933 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_956, _957, _958), _1858);
        _1949 = _1933.x * cbModelParam._m0[1u].z;
        _1951 = _1933.y * cbModelParam._m0[1u].z;
        _1953 = _1933.z * cbModelParam._m0[1u].z;
    }
    float _1966 = (((_983 * _933) + _984) * _948) * ((cbModelParam._m0[1u].w * (_1949 - _1849)) + _1849);
    float _1968 = (((_983 * _935) + _984) * _948) * ((cbModelParam._m0[1u].w * (_1951 - _1851)) + _1851);
    float _1970 = (((_983 * _936) + _984) * _948) * ((cbModelParam._m0[1u].w * (_1953 - _1853)) + _1853);
    float _1973 = fma(_1970, cbSceneParam._m0[89u].z, fma(_1968, cbSceneParam._m0[89u].y, _1966 * cbSceneParam._m0[89u].x));
    float _1976 = fma(_1970, cbSceneParam._m0[90u].z, fma(_1968, cbSceneParam._m0[90u].y, _1966 * cbSceneParam._m0[90u].x));
    float _1979 = fma(_1970, cbSceneParam._m0[91u].z, fma(_1968, cbSceneParam._m0[91u].y, _1966 * cbSceneParam._m0[91u].x));
    float _2013 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2017 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2021 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2025 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2026 = _2013 / _2025;
    float _2027 = _2017 / _2025;
    float _2028 = _2021 / _2025;
    float _2175;
    float _2176;
    float _2177;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2055 = ((uint(_2028 > cbSceneParam._m0[59u].y) + uint(_2028 > cbSceneParam._m0[59u].x)) + uint(_2028 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2056 = _2055 + 43u;
        uint _2064 = _2055 + 44u;
        uint _2072 = _2055 + 45u;
        uint _2080 = _2055 + 46u;
        float _2091 = fma(_2025, cbSceneParam._m0[_2056].w, fma(_2021, cbSceneParam._m0[_2056].z, fma(_2017, cbSceneParam._m0[_2056].y, _2013 * cbSceneParam._m0[_2056].x)));
        float _2095 = fma(_2025, cbSceneParam._m0[_2064].w, fma(_2021, cbSceneParam._m0[_2064].z, fma(_2017, cbSceneParam._m0[_2064].y, _2013 * cbSceneParam._m0[_2064].x)));
        float _2103 = fma(_2025, cbSceneParam._m0[_2080].w, fma(_2021, cbSceneParam._m0[_2080].z, fma(_2017, cbSceneParam._m0[_2080].y, _2013 * cbSceneParam._m0[_2080].x)));
        float _2108 = cbSceneParam._m0[33u].z * _2103;
        float _2110 = cbSceneParam._m0[33u].w * _2103;
        float _2113 = fma(_2025, cbSceneParam._m0[_2072].w, fma(_2021, cbSceneParam._m0[_2072].z, fma(_2017, cbSceneParam._m0[_2072].y, _2013 * cbSceneParam._m0[_2072].x))) / _2103;
        float _2161 = (cbSceneParam._m0[33u].x - sqrt(((_2027 * _2027) + (_2026 * _2026)) + (_2028 * _2028))) * cbSceneParam._m0[33u].y;
        float _4448 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
        float _2168 = (isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2108 + _2091) / _2103, (_2110 + _2095) / _2103), _2113), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2110 + _2091) / _2103, (_2095 - _2108) / _2103), _2113), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2091 - _2108) / _2103, (_2095 - _2110) / _2103), _2113), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2091 - _2110) / _2103, (_2108 + _2095) / _2103), _2113), 0.0)).x), vec4(0.25)));
        _2175 = 1.0 - (_2168 * cbSceneParam._m0[34u].x);
        _2176 = 1.0 - (_2168 * cbSceneParam._m0[34u].y);
        _2177 = 1.0 - (_2168 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2175 = 1.0;
        _2176 = 1.0;
        _2177 = 1.0;
    }
    float _2241;
    float _2243;
    float _2245;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2229 = fma(_2025, cbSceneParam._m0[63u].w, fma(_2021, cbSceneParam._m0[63u].z, fma(_2017, cbSceneParam._m0[63u].y, _2013 * cbSceneParam._m0[63u].x)));
        float _2230 = fma(_2025, cbSceneParam._m0[60u].w, fma(_2021, cbSceneParam._m0[60u].z, fma(_2017, cbSceneParam._m0[60u].y, _2013 * cbSceneParam._m0[60u].x))) / _2229;
        float _2231 = fma(_2025, cbSceneParam._m0[61u].w, fma(_2021, cbSceneParam._m0[61u].z, fma(_2017, cbSceneParam._m0[61u].y, _2013 * cbSceneParam._m0[61u].x))) / _2229;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2230 >= cbSceneParam._m0[64u].x) && (_2231 >= cbSceneParam._m0[64u].y)) && (_2230 <= cbSceneParam._m0[64u].z)) && (_2231 <= cbSceneParam._m0[64u].w))
        {
            float _2370 = fma(_2025, cbSceneParam._m0[62u].w, fma(_2021, cbSceneParam._m0[62u].z, fma(_2017, cbSceneParam._m0[62u].y, _2013 * cbSceneParam._m0[62u].x))) / _2229;
            float _2374 = isnan(cbSceneParam._m0[41u].w) ? _2370 : (isnan(_2370) ? cbSceneParam._m0[41u].w : max(_2370, cbSceneParam._m0[41u].w));
            float _2417 = (cbSceneParam._m0[33u].x - sqrt(((_2027 * _2027) + (_2026 * _2026)) + (_2028 * _2028))) * cbSceneParam._m0[33u].y;
            float _4464 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
            float _2424 = (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2230, cbSceneParam._m0[33u].w + _2231), _2374), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2230, _2231 - cbSceneParam._m0[33u].z), _2374), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2230 - cbSceneParam._m0[33u].z, _2231 - cbSceneParam._m0[33u].w), _2374), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2230 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2231), _2374), 0.0)).x), vec4(0.25)));
            float _2428 = 1.0 - (_2424 * cbSceneParam._m0[34u].x);
            float _2429 = 1.0 - (_2424 * cbSceneParam._m0[34u].y);
            float _2430 = 1.0 - (_2424 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2430) ? _2177 : (isnan(_2177) ? _2430 : min(_2177, _2430));
            frontier_phi_34_33_ladder_1 = isnan(_2429) ? _2176 : (isnan(_2176) ? _2429 : min(_2176, _2429));
            frontier_phi_34_33_ladder_2 = isnan(_2428) ? _2175 : (isnan(_2175) ? _2428 : min(_2175, _2428));
        }
        else
        {
            frontier_phi_34_33_ladder = _2177;
            frontier_phi_34_33_ladder_1 = _2176;
            frontier_phi_34_33_ladder_2 = _2175;
        }
        _2241 = frontier_phi_34_33_ladder_2;
        _2243 = frontier_phi_34_33_ladder_1;
        _2245 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2241 = _2175;
        _2243 = _2176;
        _2245 = _2177;
    }
    uvec4 _2250 = floatBitsToUint(cbInstanceData._m0[_908 + 5u]);
    uint _2252 = _2250.x * 14u;
    uint _2253 = _2252 + 13u;
    float _2260 = _948 + (-1.0);
    float _2265 = (cbLight._m0[_2253].x * _2260) + 1.0;
    float _2266 = (cbLight._m0[_2253].y * _2260) + 1.0;
    float _2267 = (cbLight._m0[_2253].z * _2260) + 1.0;
    float _2268 = (cbLight._m0[_2253].w * _2260) + 1.0;
    uint _2269 = _2252 + 5u;
    float _2275 = isnan(1.0) ? _2266 : (isnan(_2266) ? 1.0 : min(_2266, 1.0));
    uint _2279 = _2252 + 4u;
    float _2289 = isnan(1.0) ? _2265 : (isnan(_2265) ? 1.0 : min(_2265, 1.0));
    uint _2293 = _2252 | 1u;
    float _2304 = dot(vec3(cbLight._m0[_2252].xyz), vec3(_782, _783, _784));
    float _2307 = dot(vec3(cbLight._m0[_2293].xyz), vec3(_782, _783, _784));
    float _4500 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
    float _4511 = isnan(0.0) ? _2307 : (isnan(_2307) ? 0.0 : max(_2307, 0.0));
    float _2312 = (isnan(1.0) ? _4500 : (isnan(_4500) ? 1.0 : min(_4500, 1.0))) * 0.3183098733425140380859375;
    float _2314 = (isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0))) * 0.3183098733425140380859375;
    float _2321 = ((cbLight._m0[_2269].x * _2275) * _2314) + (((cbLight._m0[_2279].x * _2241) * _2289) * _2312);
    float _2322 = ((_2275 * cbLight._m0[_2269].y) * _2314) + (((cbLight._m0[_2279].y * _2243) * _2289) * _2312);
    float _2323 = ((_2275 * cbLight._m0[_2269].z) * _2314) + (((cbLight._m0[_2279].z * _2245) * _2289) * _2312);
    uvec4 _2327 = floatBitsToUint(cbLight._m0[_2252 + 12u]);
    bool _2329 = _2327.x == 0u;
    float _2431;
    float _2433;
    float _2435;
    if (_2329)
    {
        _2431 = _2321;
        _2433 = _2322;
        _2435 = _2323;
    }
    else
    {
        uint _2439 = _2252 + 6u;
        float _2455 = (dot(vec3(cbLight._m0[_2252 + 2u].xyz), vec3(_782, _783, _784)) * 0.5) + 0.5;
        float _2456 = _2455 * _2455;
        float _4522 = isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0));
        float _2457 = isnan(1.0) ? _4522 : (isnan(_4522) ? 1.0 : min(_4522, 1.0));
        float _2458 = isnan(1.0) ? _2267 : (isnan(_2267) ? 1.0 : min(_2267, 1.0));
        _2431 = (((cbLight._m0[_2439].x * 0.3183098733425140380859375) * _2457) * _2458) + _2321;
        _2433 = (((cbLight._m0[_2439].y * 0.3183098733425140380859375) * _2457) * _2458) + _2322;
        _2435 = (((cbLight._m0[_2439].z * 0.3183098733425140380859375) * _2457) * _2458) + _2323;
    }
    bool _2438 = _2327.y == 0u;
    float _2493;
    float _2495;
    float _2497;
    if (_2438)
    {
        _2493 = _2431;
        _2495 = _2433;
        _2497 = _2435;
    }
    else
    {
        uint _2666 = _2252 + 7u;
        float _2682 = (dot(vec3(cbLight._m0[_2252 + 3u].xyz), vec3(_782, _783, _784)) * 0.5) + 0.5;
        float _2683 = _2682 * _2682;
        float _4538 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
        float _2684 = isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0));
        float _2685 = isnan(1.0) ? _2268 : (isnan(_2268) ? 1.0 : min(_2268, 1.0));
        _2493 = (((cbLight._m0[_2666].x * 0.3183098733425140380859375) * _2684) * _2685) + _2431;
        _2495 = (((cbLight._m0[_2666].y * 0.3183098733425140380859375) * _2684) * _2685) + _2433;
        _2497 = (((cbLight._m0[_2666].z * 0.3183098733425140380859375) * _2684) * _2685) + _2435;
    }
    uint _2500 = _2252 + 8u;
    float _2513 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2252].w)) * _785) * 0.949999988079071044921875);
    float _2514 = _2513 * _2513;
    float _2515 = cbLight._m0[_2252].x + _862;
    float _2516 = cbLight._m0[_2252].y + _863;
    float _2517 = cbLight._m0[_2252].z + _864;
    float _2521 = inversesqrt(dot(vec3(_2515, _2516, _2517), vec3(_2515, _2516, _2517)));
    float _2522 = _2521 * _2515;
    float _2523 = _2521 * _2516;
    float _2524 = _2521 * _2517;
    float _2525 = dot(vec3(_782, _783, _784), vec3(cbLight._m0[_2252].xyz));
    float _4554 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
    float _2528 = isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0));
    float _4565 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _2529 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
    float _2530 = dot(vec3(_782, _783, _784), vec3(_2522, _2523, _2524));
    float _4576 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
    float _2533 = isnan(1.0) ? _4576 : (isnan(_4576) ? 1.0 : min(_4576, 1.0));
    float _2534 = dot(vec3(cbLight._m0[_2252].xyz), vec3(_2522, _2523, _2524));
    float _4587 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
    float _2538 = _2514 * _2514;
    float _2542 = ((_2533 * _2533) * (_2538 + (-1.0))) + 1.0;
    float _2550 = exp2(log2(1.0 - (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0)))) * 5.0);
    float _2551 = 0.959999978542327880859375 - _930;
    float _2553 = 0.959999978542327880859375 - _931;
    float _2554 = 0.959999978542327880859375 - _932;
    float _2561 = 1.0 - _2514;
    float _2572 = (0.5 / (((_2529 * ((_2528 * _2561) + _2514)) + 9.9999999392252902907785028219223e-09) + (((_2529 * _2561) + _2514) * _2528))) * _2528;
    float _4598 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
    float _2574 = (isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0))) * (_2538 / ((_2542 * _2542) * 3.141590118408203125));
    uint _2588 = _2252 + 9u;
    float _2599 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2293].w)) * _785) * 0.949999988079071044921875);
    float _2600 = _2599 * _2599;
    float _2601 = cbLight._m0[_2293].x + _862;
    float _2602 = cbLight._m0[_2293].y + _863;
    float _2603 = cbLight._m0[_2293].z + _864;
    float _2607 = inversesqrt(dot(vec3(_2601, _2602, _2603), vec3(_2601, _2602, _2603)));
    float _2608 = _2607 * _2601;
    float _2609 = _2607 * _2602;
    float _2610 = _2607 * _2603;
    float _2611 = dot(vec3(_782, _783, _784), vec3(cbLight._m0[_2293].xyz));
    float _4609 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
    float _2614 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
    float _2615 = dot(vec3(_782, _783, _784), vec3(_2608, _2609, _2610));
    float _4620 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
    float _2618 = isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0));
    float _2619 = dot(vec3(cbLight._m0[_2293].xyz), vec3(_2608, _2609, _2610));
    float _4631 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
    float _2623 = _2600 * _2600;
    float _2627 = ((_2618 * _2618) * (_2623 + (-1.0))) + 1.0;
    float _2634 = exp2(log2(1.0 - (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0)))) * 5.0);
    float _2641 = 1.0 - _2600;
    float _2651 = (0.5 / (((_2529 * ((_2614 * _2641) + _2600)) + 9.9999999392252902907785028219223e-09) + (((_2529 * _2641) + _2600) * _2614))) * _2614;
    float _4642 = isnan(0.0) ? _2651 : (isnan(_2651) ? 0.0 : max(_2651, 0.0));
    float _2653 = (isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0))) * (_2623 / ((_2627 * _2627) * 3.141590118408203125));
    float _2663 = (((((_2634 * _2551) + _933) * cbLight._m0[_2588].x) * _2653) * _2275) + ((((cbLight._m0[_2500].x * _2241) * ((_2550 * _2551) + _933)) * _2574) * _2289);
    float _2664 = (((((_2634 * _2553) + _935) * cbLight._m0[_2588].y) * _2653) * _2275) + ((((cbLight._m0[_2500].y * _2243) * ((_2550 * _2553) + _935)) * _2574) * _2289);
    float _2665 = (((((_2634 * _2554) + _936) * cbLight._m0[_2588].z) * _2653) * _2275) + ((((cbLight._m0[_2500].z * _2245) * ((_2550 * _2554) + _936)) * _2574) * _2289);
    float _2721;
    float _2723;
    float _2725;
    if (_2329)
    {
        _2721 = _2663;
        _2723 = _2664;
        _2725 = _2665;
    }
    else
    {
        uint _2727 = _2252 + 2u;
        uint _2731 = _2252 + 10u;
        float _2745 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2727].w)) * _785) * 0.949999988079071044921875);
        float _2746 = _2745 * _2745;
        float _2747 = cbLight._m0[_2727].x + _862;
        float _2748 = cbLight._m0[_2727].y + _863;
        float _2749 = cbLight._m0[_2727].z + _864;
        float _2753 = inversesqrt(dot(vec3(_2747, _2748, _2749), vec3(_2747, _2748, _2749)));
        float _2754 = _2753 * _2747;
        float _2755 = _2753 * _2748;
        float _2756 = _2753 * _2749;
        float _2757 = dot(vec3(_782, _783, _784), vec3(cbLight._m0[_2727].xyz));
        float _4653 = isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0));
        float _2760 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
        float _2761 = dot(vec3(_782, _783, _784), vec3(_2754, _2755, _2756));
        float _4664 = isnan(0.0) ? _2761 : (isnan(_2761) ? 0.0 : max(_2761, 0.0));
        float _2764 = isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0));
        float _2765 = dot(vec3(cbLight._m0[_2727].xyz), vec3(_2754, _2755, _2756));
        float _4675 = isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0));
        float _2769 = _2746 * _2746;
        float _2773 = ((_2764 * _2764) * (_2769 + (-1.0))) + 1.0;
        float _2780 = exp2(log2(1.0 - (isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0)))) * 5.0);
        float _2787 = 1.0 - _2746;
        float _2797 = (0.5 / (((_2529 * ((_2760 * _2787) + _2746)) + 9.9999999392252902907785028219223e-09) + (((_2529 * _2787) + _2746) * _2760))) * _2760;
        float _4686 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
        float _2799 = (isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0))) * (_2769 / ((_2773 * _2773) * 3.141590118408203125));
        float _2800 = isnan(1.0) ? _2267 : (isnan(_2267) ? 1.0 : min(_2267, 1.0));
        _2721 = (((((_2780 * _2551) + _933) * cbLight._m0[_2731].x) * _2799) * _2800) + _2663;
        _2723 = (((((_2780 * _2553) + _935) * cbLight._m0[_2731].y) * _2799) * _2800) + _2664;
        _2725 = (((((_2780 * _2554) + _936) * cbLight._m0[_2731].z) * _2799) * _2800) + _2665;
    }
    float _2831;
    float _2833;
    float _2835;
    if (_2438)
    {
        _2831 = _2721;
        _2833 = _2723;
        _2835 = _2725;
    }
    else
    {
        uint _2842 = _2252 + 3u;
        uint _2846 = _2252 + 11u;
        float _2860 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2842].w)) * _785) * 0.949999988079071044921875);
        float _2861 = _2860 * _2860;
        float _2862 = cbLight._m0[_2842].x + _862;
        float _2863 = cbLight._m0[_2842].y + _863;
        float _2864 = cbLight._m0[_2842].z + _864;
        float _2868 = inversesqrt(dot(vec3(_2862, _2863, _2864), vec3(_2862, _2863, _2864)));
        float _2869 = _2868 * _2862;
        float _2870 = _2868 * _2863;
        float _2871 = _2868 * _2864;
        float _2872 = dot(vec3(_782, _783, _784), vec3(cbLight._m0[_2842].xyz));
        float _4702 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
        float _2875 = isnan(1.0) ? _4702 : (isnan(_4702) ? 1.0 : min(_4702, 1.0));
        float _2876 = dot(vec3(_782, _783, _784), vec3(_2869, _2870, _2871));
        float _4713 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
        float _2879 = isnan(1.0) ? _4713 : (isnan(_4713) ? 1.0 : min(_4713, 1.0));
        float _2880 = dot(vec3(cbLight._m0[_2842].xyz), vec3(_2869, _2870, _2871));
        float _4724 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0));
        float _2884 = _2861 * _2861;
        float _2888 = ((_2879 * _2879) * (_2884 + (-1.0))) + 1.0;
        float _2895 = exp2(log2(1.0 - (isnan(1.0) ? _4724 : (isnan(_4724) ? 1.0 : min(_4724, 1.0)))) * 5.0);
        float _2902 = 1.0 - _2861;
        float _2912 = (0.5 / (((_2529 * ((_2875 * _2902) + _2861)) + 9.9999999392252902907785028219223e-09) + (((_2529 * _2902) + _2861) * _2875))) * _2875;
        float _4735 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
        float _2914 = (isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0))) * (_2884 / ((_2888 * _2888) * 3.141590118408203125));
        float _2915 = isnan(1.0) ? _2268 : (isnan(_2268) ? 1.0 : min(_2268, 1.0));
        _2831 = (((((_2895 * _2551) + _933) * cbLight._m0[_2846].x) * _2914) * _2915) + _2721;
        _2833 = (((((_2895 * _2553) + _935) * cbLight._m0[_2846].y) * _2914) * _2915) + _2723;
        _2835 = (((((_2895 * _2554) + _936) * cbLight._m0[_2846].z) * _2914) * _2915) + _2725;
    }
    float _2981;
    float _2983;
    float _2985;
    float _2987;
    float _2989;
    float _2991;
    if (_2250.y == 0u)
    {
        uvec4 _2936 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2937 = _2936.x;
        uint _2948 = uint((float(_2936.y) * floor(float(uint(cbSceneParam._m0[85u].y * _871) / _2937))) + floor(float(uint(cbSceneParam._m0[85u].x * _870) / _2937)));
        float _2958 = (log2(_2028 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2959 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
        uint _2962 = uint(isnan(14.0) ? _2959 : (isnan(_2959) ? 14.0 : min(_2959, 14.0)));
        uvec4 _2967 = texelFetch(g_lightClusterGridBuffer, int(((_2962 << 2u) + (_2948 << 6u)) >> 2u));
        uint _2968 = _2967.x;
        uint _2969 = _2936.z;
        float _3048;
        float _3050;
        float _3052;
        float _3054;
        float _3056;
        float _3058;
        if (((((1u << ((_2969 >> 4u) & 15u)) + 4294967295u) & _2968) == 0u) || ((_2969 & 240u) == 0u))
        {
            _3048 = 0.0;
            _3050 = 0.0;
            _3052 = 0.0;
            _3054 = 0.0;
            _3056 = 0.0;
            _3058 = 0.0;
        }
        else
        {
            float _3049;
            float _3051;
            float _3053;
            float _3055;
            float _3057;
            float _3059;
            float _3193 = 0.0;
            float _3194 = 0.0;
            float _3195 = 0.0;
            float _3196 = 0.0;
            float _3197 = 0.0;
            float _3198 = 0.0;
            uint _3199 = 0u;
            uint _3208;
            bool _3209;
            for (;;)
            {
                _3208 = texelFetch(g_lightClassification, int((((_2962 << 5u) + (_2948 << 9u)) + (_3199 << 2u)) >> 2u)).x;
                _3209 = _3208 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3209)
                {
                    frontier_phi_66_pred = _3198;
                    frontier_phi_66_pred_1 = _3197;
                    frontier_phi_66_pred_2 = _3196;
                    frontier_phi_66_pred_3 = _3195;
                    frontier_phi_66_pred_4 = _3194;
                    frontier_phi_66_pred_5 = _3193;
                }
                else
                {
                    float _3317;
                    float _3318;
                    float _3319;
                    float _3320;
                    float _3321;
                    float _3322;
                    uint _3323;
                    _3317 = _3193;
                    _3318 = _3194;
                    _3319 = _3195;
                    _3320 = _3196;
                    _3321 = _3197;
                    _3322 = _3198;
                    _3323 = _3208;
                    float _3249;
                    float _3250;
                    float _3251;
                    float _3252;
                    float _3253;
                    float _3254;
                    for (;;)
                    {
                        uint _3327 = uint(findLSB(_3323)) + (_3199 << 5u);
                        uint _3324 = (_3323 + 4294967295u) & _3323;
                        uint _3329 = _3327 * 48u;
                        vec4 _3343 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3329)).x, texelFetch(g_PointLightRenderingBuffer, int(_3329 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3329 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3329 + 3u)).x));
                        uint _3349 = (_3327 * 48u) + 4u;
                        vec4 _3362 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3349)).x, texelFetch(g_PointLightRenderingBuffer, int(_3349 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3349 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3349 + 3u)).x));
                        uint _3368 = (_3327 * 48u) + 8u;
                        vec3 _3379 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3368)).x, texelFetch(g_PointLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3368 + 2u)).x));
                        float _3383 = _3343.x - _2026;
                        float _3384 = _3343.y - _2027;
                        float _3385 = _3343.z - _2028;
                        float _3386 = dot(vec3(_3383, _3384, _3385), vec3(_3383, _3384, _3385));
                        float _3389 = inversesqrt(_3386);
                        float _3390 = _3389 * _3383;
                        float _3391 = _3389 * _3384;
                        float _3392 = _3389 * _3385;
                        float _3393 = dot(vec3(_889, _892, _895), vec3(_3390, _3391, _3392));
                        float _3398 = 1.0 - (_3386 * _3343.w);
                        float _4761 = isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0));
                        float _3399 = isnan(1.0) ? _4761 : (isnan(_4761) ? 1.0 : min(_4761, 1.0));
                        float _3400 = sqrt(_3386) * _3362.w;
                        float _3403 = 1.39999997615814208984375 / (_3400 + 1.39999997615814208984375);
                        float _3404 = _3403 * _3403;
                        float _3407 = ((1.0 - _3404) * _3393) + _3404;
                        float _3410 = _3400 * _3400;
                        float _3414 = ((isnan(0.0) ? _3407 : (isnan(_3407) ? 0.0 : max(_3407, 0.0))) * _3399) / ((_3410 * 0.699999988079071044921875) + 1.0);
                        float _3418 = (-0.0) - _2026;
                        float _3419 = (-0.0) - _2027;
                        float _3420 = (-0.0) - _2028;
                        float _3424 = inversesqrt(dot(vec3(_3418, _3419, _3420), vec3(_3418, _3419, _3420)));
                        float _3425 = _3424 * _3418;
                        float _3426 = _3424 * _3419;
                        float _3427 = _3424 * _3420;
                        float _3434 = exp2(log2(1.0 / ((_3410 * 3.5) + 5.0)) * 0.25);
                        float _3435 = 1.0 - _964;
                        float _3442 = sqrt(1.0 - ((1.0 - (_3435 * _3435)) * (1.0 - (_3434 * _3434))));
                        float _3443 = _3442 * _3442;
                        float _3444 = _3443 * _3443;
                        float _3445 = _3425 + _3390;
                        float _3446 = _3426 + _3391;
                        float _3447 = _3427 + _3392;
                        float _3451 = inversesqrt(dot(vec3(_3445, _3446, _3447), vec3(_3445, _3446, _3447)));
                        float _3455 = dot(vec3(_889, _892, _895), vec3(_3425, _3426, _3427));
                        float _4777 = isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0));
                        float _3458 = isnan(1.0) ? _4777 : (isnan(_4777) ? 1.0 : min(_4777, 1.0));
                        float _3459 = dot(vec3(_889, _892, _895), vec3(_3451 * _3445, _3451 * _3446, _3451 * _3447));
                        float _4788 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                        float _3462 = isnan(1.0) ? _4788 : (isnan(_4788) ? 1.0 : min(_4788, 1.0));
                        float _3466 = ((_3462 * _3462) * (_3444 + (-1.0))) + 1.0;
                        float _3467 = _3403 * _3443;
                        float _3468 = _3467 * _3467;
                        float _3471 = ((1.0 - _3468) * _3393) + _3468;
                        float _4799 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                        float _3472 = isnan(1.0) ? _4799 : (isnan(_4799) ? 1.0 : min(_4799, 1.0));
                        float _3473 = 1.0 - _3443;
                        float _3483 = (0.5 / (((_3472 * ((_3458 * _3473) + _3443)) + 9.9999999392252902907785028219223e-09) + (((_3472 * _3473) + _3443) * _3458))) * _3472;
                        float _4810 = isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0));
                        float _3494 = (((_3444 * 3.1415927410125732421875) * (isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0)))) / ((_3466 * _3466) * ((_3410 * 2.1991131305694580078125) + 3.141590118408203125))) * _3399;
                        _3252 = (_3414 * _3362.x) + _3320;
                        _3253 = (_3414 * _3362.y) + _3321;
                        _3254 = (_3414 * _3362.z) + _3322;
                        _3249 = (_3494 * _3379.x) + _3317;
                        _3250 = (_3494 * _3379.y) + _3318;
                        _3251 = (_3494 * _3379.z) + _3319;
                        if (_3324 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3317 = _3249;
                            _3318 = _3250;
                            _3319 = _3251;
                            _3320 = _3252;
                            _3321 = _3253;
                            _3322 = _3254;
                            _3323 = _3324;
                        }
                    }
                    frontier_phi_66_pred = _3254;
                    frontier_phi_66_pred_1 = _3253;
                    frontier_phi_66_pred_2 = _3252;
                    frontier_phi_66_pred_3 = _3251;
                    frontier_phi_66_pred_4 = _3250;
                    frontier_phi_66_pred_5 = _3249;
                }
                _3059 = frontier_phi_66_pred;
                _3057 = frontier_phi_66_pred_1;
                _3055 = frontier_phi_66_pred_2;
                _3053 = frontier_phi_66_pred_3;
                _3051 = frontier_phi_66_pred_4;
                _3049 = frontier_phi_66_pred_5;
                uint _3200 = _3199 + 1u;
                if (_3200 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3193 = _3049;
                    _3194 = _3051;
                    _3195 = _3053;
                    _3196 = _3055;
                    _3197 = _3057;
                    _3198 = _3059;
                    _3199 = _3200;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3048 = _3049;
            _3050 = _3051;
            _3052 = _3053;
            _3054 = _3055;
            _3056 = _3057;
            _3058 = _3059;
        }
        uvec4 _3062 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3063 = _3062.z;
        uint _3065 = (_3063 >> 8u) & 15u;
        float _3161;
        float _3163;
        float _3165;
        float _3167;
        float _3169;
        float _3171;
        if (((4294967295u << _3065) & _2968) == 0u)
        {
            _3161 = _3048;
            _3163 = _3050;
            _3165 = _3052;
            _3167 = _3054;
            _3169 = _3056;
            _3171 = _3058;
        }
        else
        {
            float _3186 = inversesqrt(dot(vec3(_2026, _2027, _2028), vec3(_2026, _2027, _2028)));
            float _3187 = _3186 * _2026;
            float _3188 = _3186 * _2027;
            float _3189 = _3186 * _2028;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3065 < ((_3063 >> 12u) & 15u))
            {
                float _3162;
                float _3164;
                float _3166;
                float _3168;
                float _3170;
                float _3172;
                float _3300 = _3048;
                float _3301 = _3050;
                float _3302 = _3052;
                float _3303 = _3054;
                float _3304 = _3056;
                float _3305 = _3058;
                uint _3306 = _3065;
                uint _3315;
                bool _3316;
                for (;;)
                {
                    _3315 = texelFetch(g_lightClassification, int((((_2962 << 5u) + (_2948 << 9u)) + (_3306 << 2u)) >> 2u)).x;
                    _3316 = _3315 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3316)
                    {
                        frontier_phi_72_pred = _3305;
                        frontier_phi_72_pred_1 = _3304;
                        frontier_phi_72_pred_2 = _3303;
                        frontier_phi_72_pred_3 = _3302;
                        frontier_phi_72_pred_4 = _3301;
                        frontier_phi_72_pred_5 = _3300;
                    }
                    else
                    {
                        float _3499;
                        float _3500;
                        float _3501;
                        float _3502;
                        float _3503;
                        float _3504;
                        float _3793;
                        float _3794;
                        float _3795;
                        float _3796;
                        float _3797;
                        float _3798;
                        float _3512 = _3300;
                        float _3513 = _3301;
                        float _3514 = _3302;
                        float _3515 = _3303;
                        float _3516 = _3304;
                        float _3517 = _3305;
                        uint _3518 = _3315;
                        uint _3519;
                        vec4 _3544;
                        float _3545;
                        vec4 _3560;
                        vec3 _3572;
                        vec4 _3587;
                        vec4 _3602;
                        float _3649;
                        bool _3650;
                        for (;;)
                        {
                            uint _3529 = ((_3306 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3518));
                            _3519 = (_3518 + 4294967295u) & _3518;
                            uint _3531 = _3529 * 40u;
                            _3544 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3531)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3531 + 3u)).x));
                            _3545 = _3544.w;
                            uint _3547 = (_3529 * 40u) + 4u;
                            _3560 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3547)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 3u)).x));
                            uint _3562 = (_3529 * 40u) + 8u;
                            _3572 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3562)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3562 + 2u)).x));
                            uint _3574 = (_3529 * 40u) + 16u;
                            _3587 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3574)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 3u)).x));
                            uint _3589 = (_3529 * 40u) + 20u;
                            _3602 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3589)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3589 + 3u)).x));
                            uint _3605 = (_3529 * 40u) + 24u;
                            vec4 _3618 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3605)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3605 + 3u)).x));
                            uint _3624 = (_3529 * 40u) + 28u;
                            vec4 _3637 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3624)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3624 + 3u)).x));
                            _3649 = fma(_2028, _3637.z, fma(_2027, _3637.y, _3637.x * _2026)) + _3637.w;
                            _3650 = !((fma(_2028, _3618.z, fma(_2027, _3618.y, _3618.x * _2026)) + _3618.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3650)
                            {
                                float _3677 = _3544.x - _2026;
                                float _3678 = _3544.y - _2027;
                                float _3679 = _3544.z - _2028;
                                float _3680 = dot(vec3(_3677, _3678, _3679), vec3(_3677, _3678, _3679));
                                float _3683 = inversesqrt(_3680);
                                float _3684 = _3683 * _3677;
                                float _3685 = _3683 * _3678;
                                float _3686 = _3683 * _3679;
                                float _3690 = 1.0 - (_3680 / (_3545 * _3545));
                                float _4821 = isnan(0.0) ? _3690 : (isnan(_3690) ? 0.0 : max(_3690, 0.0));
                                float _3691 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
                                float _3695 = sqrt(_3680) * _3560.w;
                                float _3697 = 1.39999997615814208984375 / (_3695 + 1.39999997615814208984375);
                                float _3698 = _3697 * _3697;
                                float _3701 = ((1.0 - _3698) * dot(vec3(_3684, _3685, _3686), vec3(_889, _892, _895))) + _3698;
                                float _3704 = _3695 * _3695;
                                float _3708 = (fma(_2028, _3587.z, fma(_2027, _3587.y, _3587.x * _2026)) + _3587.w) / _3649;
                                float _3709 = (fma(_2028, _3602.z, fma(_2027, _3602.y, _3602.x * _2026)) + _3602.w) / _3649;
                                float _3713 = 1.0 - dot(vec2(_3708, _3709), vec2(_3708, _3709));
                                float _4837 = isnan(0.0) ? _3713 : (isnan(_3713) ? 0.0 : max(_3713, 0.0));
                                float _3714 = isnan(1.0) ? _4837 : (isnan(_4837) ? 1.0 : min(_4837, 1.0));
                                float _3715 = _3714 * (((isnan(0.0) ? _3701 : (isnan(_3701) ? 0.0 : max(_3701, 0.0))) * _3691) / ((_3704 * 0.699999988079071044921875) + 1.0));
                                float _3727 = exp2(log2(1.0 / ((_3704 * 3.5) + 5.0)) * 0.25);
                                float _3728 = 1.0 - _964;
                                float _3735 = sqrt(1.0 - ((1.0 - (_3728 * _3728)) * (1.0 - (_3727 * _3727))));
                                float _3736 = _3735 * _3735;
                                float _3737 = _3736 * _3736;
                                float _3738 = _3684 - _3187;
                                float _3739 = _3685 - _3188;
                                float _3740 = _3686 - _3189;
                                float _3744 = inversesqrt(dot(vec3(_3738, _3739, _3740), vec3(_3738, _3739, _3740)));
                                float _3748 = dot(vec3(_889, _892, _895), vec3((-0.0) - _3187, (-0.0) - _3188, (-0.0) - _3189));
                                float _4848 = isnan(0.0) ? _3748 : (isnan(_3748) ? 0.0 : max(_3748, 0.0));
                                float _3751 = isnan(1.0) ? _4848 : (isnan(_4848) ? 1.0 : min(_4848, 1.0));
                                float _3752 = dot(vec3(_889, _892, _895), vec3(_3744 * _3738, _3744 * _3739, _3744 * _3740));
                                float _4859 = isnan(0.0) ? _3752 : (isnan(_3752) ? 0.0 : max(_3752, 0.0));
                                float _3755 = isnan(1.0) ? _4859 : (isnan(_4859) ? 1.0 : min(_4859, 1.0));
                                float _3759 = ((_3755 * _3755) * (_3737 + (-1.0))) + 1.0;
                                float _3760 = _3697 * _3736;
                                float _3761 = _3760 * _3760;
                                float _3767 = ((1.0 - _3761) * dot(vec3(_889, _892, _895), vec3(_3684, _3685, _3686))) + _3761;
                                float _4870 = isnan(0.0) ? _3767 : (isnan(_3767) ? 0.0 : max(_3767, 0.0));
                                float _3768 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
                                float _3769 = 1.0 - _3736;
                                float _3779 = (0.5 / (((_3768 * ((_3751 * _3769) + _3736)) + 9.9999999392252902907785028219223e-09) + (((_3768 * _3769) + _3736) * _3751))) * _3768;
                                float _4881 = isnan(0.0) ? _3779 : (isnan(_3779) ? 0.0 : max(_3779, 0.0));
                                float _3789 = (_3714 * _3691) * (((_3737 * 3.1415927410125732421875) * (isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0)))) / ((_3759 * _3759) * ((_3704 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3715 * _3560.y;
                                frontier_phi_78_pred_1 = _3715 * _3560.x;
                                frontier_phi_78_pred_2 = _3789 * _3572.z;
                                frontier_phi_78_pred_3 = _3789 * _3572.y;
                                frontier_phi_78_pred_4 = _3789 * _3572.x;
                                frontier_phi_78_pred_5 = _3715 * _3560.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3797 = frontier_phi_78_pred;
                            _3796 = frontier_phi_78_pred_1;
                            _3795 = frontier_phi_78_pred_2;
                            _3794 = frontier_phi_78_pred_3;
                            _3793 = frontier_phi_78_pred_4;
                            _3798 = frontier_phi_78_pred_5;
                            _3502 = _3796 + _3515;
                            _3503 = _3797 + _3516;
                            _3504 = _3798 + _3517;
                            _3499 = _3793 + _3512;
                            _3500 = _3794 + _3513;
                            _3501 = _3795 + _3514;
                            if (_3519 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3512 = _3499;
                                _3513 = _3500;
                                _3514 = _3501;
                                _3515 = _3502;
                                _3516 = _3503;
                                _3517 = _3504;
                                _3518 = _3519;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3504;
                        frontier_phi_72_pred_1 = _3503;
                        frontier_phi_72_pred_2 = _3502;
                        frontier_phi_72_pred_3 = _3501;
                        frontier_phi_72_pred_4 = _3500;
                        frontier_phi_72_pred_5 = _3499;
                    }
                    _3172 = frontier_phi_72_pred;
                    _3170 = frontier_phi_72_pred_1;
                    _3168 = frontier_phi_72_pred_2;
                    _3166 = frontier_phi_72_pred_3;
                    _3164 = frontier_phi_72_pred_4;
                    _3162 = frontier_phi_72_pred_5;
                    uint _3307 = _3306 + 1u;
                    if (_3307 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3300 = _3162;
                        _3301 = _3164;
                        _3302 = _3166;
                        _3303 = _3168;
                        _3304 = _3170;
                        _3305 = _3172;
                        _3306 = _3307;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3172;
                frontier_phi_60_61_ladder_1 = _3170;
                frontier_phi_60_61_ladder_2 = _3166;
                frontier_phi_60_61_ladder_3 = _3164;
                frontier_phi_60_61_ladder_4 = _3162;
                frontier_phi_60_61_ladder_5 = _3168;
            }
            else
            {
                frontier_phi_60_61_ladder = _3058;
                frontier_phi_60_61_ladder_1 = _3056;
                frontier_phi_60_61_ladder_2 = _3052;
                frontier_phi_60_61_ladder_3 = _3050;
                frontier_phi_60_61_ladder_4 = _3048;
                frontier_phi_60_61_ladder_5 = _3054;
            }
            _3161 = frontier_phi_60_61_ladder_4;
            _3163 = frontier_phi_60_61_ladder_3;
            _3165 = frontier_phi_60_61_ladder_2;
            _3167 = frontier_phi_60_61_ladder_5;
            _3169 = frontier_phi_60_61_ladder_1;
            _3171 = frontier_phi_60_61_ladder;
        }
        float _3176 = isnan(1.0) ? _948 : (isnan(_948) ? 1.0 : min(_948, 1.0));
        _2981 = (_3176 * _3167) + _2493;
        _2983 = (_3176 * _3169) + _2495;
        _2985 = (_3176 * _3171) + _2497;
        _2987 = ((_3161 * _933) * _3176) + _2831;
        _2989 = ((_3163 * _935) * _3176) + _2833;
        _2991 = ((_3165 * _936) * _3176) + _2835;
    }
    else
    {
        _2981 = _2493;
        _2983 = _2495;
        _2985 = _2497;
        _2987 = _2831;
        _2989 = _2833;
        _2991 = _2835;
    }
    float _4897 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _4908 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
    float _4919 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
    uint _3011 = _908 + 6u;
    float _3019 = _870 / cbSceneParam._m0[86u].x;
    float _3020 = _871 / cbSceneParam._m0[86u].y;
    vec4 _3034 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3019, _3020, (log2((isnan(cbSceneParam._m0[77u].w) ? _805 : (isnan(_805) ? cbSceneParam._m0[77u].w : min(_805, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3036 = _3034.x;
    float _3037 = _3034.y;
    float _3038 = _3034.z;
    float _3039 = _3034.w;
    float _3111;
    float _3113;
    float _3115;
    float _3117;
    if (_805 > cbSceneParam._m0[78u].w)
    {
        float _3073 = isnan(_805) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _805 : min(cbSceneParam._m0[80u].w, _805));
        float _3074 = _3073 / _805;
        float _3085 = _3074 * _855;
        float _3086 = _856 * _3074;
        float _3087 = (-0.0) - _3086;
        float _3089 = _3074 * _857;
        float _3091 = (cbSceneParam._m0[77u].w * _3087) / _3073;
        float _3092 = _3091 + cbSceneParam._m0[79u].w;
        float _3093 = cbSceneParam._m0[79u].w - _3086;
        float _3099 = sqrt(((_3085 * _3085) + (_3086 * _3086)) + (_3089 * _3089));
        float _3102 = (1.0 - (cbSceneParam._m0[77u].w / _3073)) * _3099;
        float _3107 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3109 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3262;
        if (abs((_3087 - _3091) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3262 = ((((_3092 > 0.0) ? exp2(_3107 * _3092) : (2.0 - exp2(_3109 * _3092))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3102;
        }
        else
        {
            float _3222 = 1.0 / cbSceneParam._m0[80u].x;
            float _3223 = isnan(_3093) ? _3092 : (isnan(_3092) ? _3093 : max(_3092, _3093));
            float _3224 = isnan(_3093) ? _3092 : (isnan(_3092) ? _3093 : min(_3092, _3093));
            float _3233 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : min(_3223, 0.0));
            float _3234 = isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : min(_3224, 0.0));
            _3262 = ((abs(_3099 / _3087) * cbSceneParam._m0[80u].y) * ((((_3233 - _3234) * 2.0) - ((exp2(_3107 * (isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0)))) - exp2(_3107 * (isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0))))) * _3222)) - ((exp2(_3109 * _3233) - exp2(_3109 * _3234)) * _3222))) + (_3102 * cbSceneParam._m0[80u].z);
        }
        vec4 _3264 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3019, _3020, 1.0), 0.0);
        float _3273 = exp2((_3262 * (-1.44269502162933349609375)) * (1.0 - _3264.w));
        float _3274 = log2(_3273);
        float _3290 = log2(_3039);
        _3111 = (exp2(_3290 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3274 * cbSceneParam._m0[78u].x)) * _3264.x) / cbSceneParam._m0[78u].x)) + _3036;
        _3113 = (exp2(_3290 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3274 * cbSceneParam._m0[78u].y)) * _3264.y) / cbSceneParam._m0[78u].y)) + _3037;
        _3115 = (exp2(_3290 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3274 * cbSceneParam._m0[78u].z)) * _3264.z) / cbSceneParam._m0[78u].z)) + _3038;
        _3117 = _3273 * _3039;
    }
    else
    {
        _3111 = _3036;
        _3113 = _3037;
        _3115 = _3038;
        _3117 = _3039;
    }
    float _3129 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3130 = _3129 == 3.0;
    float _3131 = log2(_3117);
    float _3138 = exp2(_3131 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4897 : (isnan(_4897) ? 1.0 : min(_4897, 1.0))) * (_2981 + ((isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))) * _948))) + ((_2987 + ((isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0))) * _1758)) * cbPerFrame._m0[3u].x));
    float _3139 = exp2(_3131 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4908 : (isnan(_4908) ? 1.0 : min(_4908, 1.0))) * (_2983 + ((isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0))) * _948))) + ((_2989 + ((isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0))) * _1758)) * cbPerFrame._m0[3u].x));
    float _3140 = exp2(_3131 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4919 : (isnan(_4919) ? 1.0 : min(_4919, 1.0))) * (_2985 + ((isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0))) * _948))) + ((_2991 + ((isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0))) * _1758)) * cbPerFrame._m0[3u].x));
    float _3149 = (_3129 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3149 * (_3130 ? _3138 : (_3138 + (cbSceneParam._m0[72u].w * _3111)));
    SV_Target.y = _3149 * (_3130 ? _3139 : (_3139 + (cbSceneParam._m0[72u].w * _3113)));
    SV_Target.z = _3149 * (_3130 ? _3140 : (_3140 + (cbSceneParam._m0[72u].w * _3115)));
    SV_Target.w = cbInstanceData._m0[_3011].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3011].w;
}


