#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1294;
float _3960;
float _3961;
float _3962;
float _3963;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _209 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _210 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _211 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _217 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _224 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _231 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _254 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _260 = _254.x * cbMtdParam._m0[10u].x;
    float _261 = _254.y * cbMtdParam._m0[10u].y;
    float _262 = _254.z * cbMtdParam._m0[10u].z;
    vec4 _280 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _330 = cbMtdParam._m0[18u].y * texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x;
    float _341 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].x * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].y * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _330)) + 1.0;
    float _3972 = isnan(0.0) ? _341 : (isnan(_341) ? 0.0 : max(_341, 0.0));
    float _342 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
    float _349 = (_342 * ((_280.x * cbMtdParam._m0[11u].x) - _260)) + _260;
    float _350 = (_342 * ((_280.y * cbMtdParam._m0[11u].y) - _261)) + _261;
    float _351 = (_342 * ((_280.z * cbMtdParam._m0[11u].z) - _262)) + _262;
    vec4 _369 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _396 = ((cbMtdParam._m0[17u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _330)) + 1.0;
    float _3983 = isnan(0.0) ? _396 : (isnan(_396) ? 0.0 : max(_396, 0.0));
    float _397 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
    float _404 = (_397 * ((_369.x * cbMtdParam._m0[12u].x) - _349)) + _349;
    float _405 = (_397 * ((_369.y * cbMtdParam._m0[12u].y) - _350)) + _350;
    float _406 = (_397 * ((_369.z * cbMtdParam._m0[12u].z) - _351)) + _351;
    vec4 _423 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _448 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[18u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[18u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _330)) + 1.0;
    float _3994 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _449 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
    vec4 _477 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _485 = ((((_449 * ((_423.x * cbMtdParam._m0[13u].x) - _404)) + _404) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _477.x;
    float _488 = ((((_449 * ((_423.y * cbMtdParam._m0[13u].y) - _405)) + _405) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _477.y;
    float _491 = ((((_449 * ((_423.z * cbMtdParam._m0[13u].z) - _406)) + _406) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _477.z;
    vec4 _504 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _506 = _504.x;
    float _524 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _506) * _342) + _506;
    float _541 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _524) * _397) + _524;
    float _558 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _541) * _449) + _541;
    vec4 _571 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _573 = _571.x;
    float _574 = _571.y;
    float _577 = cbMtdParam._m0[17u].y * _571.z;
    vec4 _589 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _598 = (((cbMtdParam._m0[17u].x * _589.z) - _577) * _342) + _577;
    vec4 _611 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _623 = (((cbMtdParam._m0[16u].w * _611.z) - _598) * _397) + _598;
    vec4 _636 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _645 = (((cbMtdParam._m0[16u].z * _636.z) - _623) * _449) + _623;
    vec4 _658 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _671 = ((_589.x - _573) * _342) + _573;
    float _672 = ((_589.y - _574) * _342) + _574;
    float _677 = ((_611.x - _671) * _397) + _671;
    float _678 = ((_611.y - _672) * _397) + _672;
    float _687 = ((((_636.x - _677) * _449) + _677) * 2.0) + (-1.0);
    float _688 = ((((_636.y - _678) * _449) + _678) * 2.0) + (-1.0);
    float _689 = dot(vec2(_687, _688), vec2(_687, _688));
    float _4005 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
    float _694 = sqrt(1.0 - (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0))));
    float _697 = (((_658.x * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _687;
    float _698 = (((_658.y * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _688;
    float _701 = fma(_694, _224 * NORMAL.x, fma(_698, _231 * TANGENT.x, (_217 * _209) * _697));
    float _704 = fma(_694, _224 * NORMAL.y, fma(_698, _231 * TANGENT.y, (_217 * _210) * _697));
    float _707 = fma(_694, _224 * NORMAL.z, fma(_698, _231 * TANGENT.z, (_217 * _211) * _697));
    float _711 = inversesqrt(dot(vec3(_701, _704, _707), vec3(_701, _704, _707)));
    float _712 = _711 * _701;
    float _713 = _711 * _704;
    float _714 = _711 * _707;
    float _4016 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _715 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
    float _4027 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _4038 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _4049 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _4060 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _719 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _735 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _775 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _785 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _775);
    float _786 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _775);
    float _787 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _775);
    float _791 = inversesqrt(dot(vec3(_785, _786, _787), vec3(_785, _786, _787)));
    float _792 = _785 * _791;
    float _793 = _786 * _791;
    float _794 = _787 * _791;
    vec4 _799 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _801 = _799.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _973 = sqrt(((_785 * _785) + (_786 * _786)) + (_787 * _787));
        float _979 = (cbMatDynParam._m0[5u].x * _973) + cbMatDynParam._m0[5u].y;
        float _4071 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _984 = (cbMatDynParam._m0[5u].z * _973) + cbMatDynParam._m0[5u].w;
        float _4082 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) - _980)) + _980) < ((_801 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _812 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _813 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _831 = fma(_714, cbSceneParam._m0[5u].z, fma(_713, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _712));
    float _834 = fma(_714, cbSceneParam._m0[6u].z, fma(_713, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _712));
    float _837 = fma(_714, cbSceneParam._m0[7u].z, fma(_713, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _712));
    uint _850 = uint(roundEven(NORMAL.w)) * 13u;
    uint _851 = _850 + 9u;
    uint _852 = _851 + uint(cbMatDynParam._m0[0u].w);
    float _858 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0)))) * cbInstanceData._m0[_852].x;
    float _859 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0)))) * cbInstanceData._m0[_852].y;
    float _860 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0)))) * cbInstanceData._m0[_852].z;
    float _4093 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _861 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
    float _4104 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
    float _862 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
    float _4115 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
    float _863 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
    float _864 = 1.0 - _719;
    float _865 = _861 * _864;
    float _866 = _862 * _864;
    float _867 = _863 * _864;
    float _872 = (_861 + (-0.039999999105930328369140625)) * _719;
    float _873 = (_862 + (-0.039999999105930328369140625)) * _719;
    float _874 = (_863 + (-0.039999999105930328369140625)) * _719;
    float _875 = _872 + 0.039999999105930328369140625;
    float _877 = _873 + 0.039999999105930328369140625;
    float _878 = _874 + 0.039999999105930328369140625;
    vec4 _887 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _812, cbSceneParam._m0[86u].y * _813));
    float _890 = _887.x * TEXCOORD_5.w;
    float _891 = dot(vec3(_712, _713, _714), vec3(_792, _793, _794));
    float _894 = _891 * 2.0;
    float _898 = (_894 * _712) - _792;
    float _899 = (_894 * _713) - _793;
    float _900 = (_894 * _714) - _794;
    float _904 = abs(dot(vec3(_792, _793, _794), vec3(_712, _713, _714)));
    float _4126 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _906 = sqrt(_715);
    float _919 = exp2((_906 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_906 * 3.0));
    float _925 = (1.0 - _919) * ((_906 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _926 = _919 * _906;
    float _954 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _958 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _962 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1293;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1018 = fma(_962, cbModelParam._m0[26u].z, fma(_958, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _954));
        float _1022 = fma(_962, cbModelParam._m0[27u].z, fma(_958, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _954));
        float _1026 = fma(_962, cbModelParam._m0[28u].z, fma(_958, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _954));
        float _1051 = _954 + _712;
        float _1052 = _958 + _713;
        float _1053 = _962 + _714;
        float _1063 = fma(_1053, cbModelParam._m0[26u].z, fma(_1052, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1051)) - _1018;
        float _1064 = fma(_1053, cbModelParam._m0[27u].z, fma(_1052, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1051)) - _1022;
        float _1065 = fma(_1053, cbModelParam._m0[28u].z, fma(_1052, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1051)) - _1026;
        float _1069 = inversesqrt(dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065)));
        float _1082 = ((_1069 * _1063) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1018 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1083 = ((_1069 * _1064) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1022 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1084 = ((_1069 * _1065) / cbModelParam._m0[34u].z) + ((((((_1026 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1087 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        vec4 _1094 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        vec4 _1101 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        vec4 _1108 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        float _1121 = exp2((_1087.w + (-0.5)) * 20.0) * 2.0;
        float _1122 = _1121 * (_1087.x + (-0.5));
        float _1123 = _1121 * (_1087.y + (-0.5));
        float _1124 = _1121 * (_1087.z + (-0.5));
        float _1131 = exp2((_1094.w + (-0.5)) * 20.0) * 2.0;
        float _1132 = _1131 * (_1094.x + (-0.5));
        float _1133 = _1131 * (_1094.y + (-0.5));
        float _1134 = _1131 * (_1094.z + (-0.5));
        float _1141 = exp2((_1101.w + (-0.5)) * 20.0) * 2.0;
        float _1142 = _1141 * (_1101.x + (-0.5));
        float _1143 = _1141 * (_1101.y + (-0.5));
        float _1144 = _1141 * (_1101.z + (-0.5));
        float _1151 = exp2((_1108.w + (-0.5)) * 20.0) * 2.0;
        float _1152 = _1151 * (_1108.x + (-0.5));
        float _1153 = _1151 * (_1108.y + (-0.5));
        float _1154 = _1151 * (_1108.z + (-0.5));
        float _1155 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1156 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1157 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1158 = _1122 * 0.5;
        float _1159 = _1132 * 0.5;
        float _1160 = _1142 * 0.5;
        float _1161 = dot(vec3(_1158, _1159, _1160), vec3(_1158, _1159, _1160));
        float _1166 = (_1161 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1161);
        float _1175 = (dot(vec3(_712, _713, _714), vec3(_1166 * _1158, _1166 * _1159, _1166 * _1160)) + 1.0) * 0.5;
        float _4152 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1185 = sqrt(((_1159 * _1159) + (_1158 * _1158)) + (_1160 * _1160)) / (_1155 + 9.9999997473787516355514526367188e-06);
        float _4163 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _1187 = _1186 * 2.0;
        float _1191 = (1.0 - _1186) / (_1186 + 1.0);
        float _4174 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1201 = ((((1.0 - _1192) * (_1187 + 2.0)) * exp2(log2(isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_1187 + 1.0))) + _1192) * _1155;
        float _1202 = _1123 * 0.5;
        float _1203 = _1133 * 0.5;
        float _1204 = _1143 * 0.5;
        float _1205 = dot(vec3(_1202, _1203, _1204), vec3(_1202, _1203, _1204));
        float _1210 = (_1205 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1205);
        float _1218 = (dot(vec3(_712, _713, _714), vec3(_1210 * _1202, _1210 * _1203, _1210 * _1204)) + 1.0) * 0.5;
        float _4185 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1227 = sqrt(((_1203 * _1203) + (_1202 * _1202)) + (_1204 * _1204)) / (_1156 + 9.9999997473787516355514526367188e-06);
        float _4196 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1229 = _1228 * 2.0;
        float _1233 = (1.0 - _1228) / (_1228 + 1.0);
        float _4207 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _1243 = ((((1.0 - _1234) * (_1229 + 2.0)) * exp2(log2(isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (_1229 + 1.0))) + _1234) * _1156;
        float _1244 = _1124 * 0.5;
        float _1245 = _1134 * 0.5;
        float _1246 = _1144 * 0.5;
        float _1247 = dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246));
        float _1252 = (_1247 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1247);
        float _1260 = (dot(vec3(_712, _713, _714), vec3(_1252 * _1244, _1252 * _1245, _1252 * _1246)) + 1.0) * 0.5;
        float _4218 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1269 = sqrt(((_1245 * _1245) + (_1244 * _1244)) + (_1246 * _1246)) / (_1157 + 9.9999997473787516355514526367188e-06);
        float _4229 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0));
        float _1271 = _1270 * 2.0;
        float _1275 = (1.0 - _1270) / (_1270 + 1.0);
        float _4240 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _1285 = ((((1.0 - _1276) * (_1271 + 2.0)) * exp2(log2(isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * (_1271 + 1.0))) + _1276) * _1157;
        _1293 = _1124;
        _1295 = _1123;
        _1296 = _1122;
        _1297 = _1134;
        _1298 = _1133;
        _1299 = _1132;
        _1300 = _1144;
        _1301 = _1143;
        _1302 = _1142;
        _1303 = _1157;
        _1304 = _1156;
        _1305 = _1155;
        _1306 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0)));
        _1307 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0)));
        _1308 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0)));
    }
    else
    {
        _1293 = _1294;
        _1295 = _1294;
        _1296 = _1294;
        _1297 = _1294;
        _1298 = _1294;
        _1299 = _1294;
        _1300 = _1294;
        _1301 = _1294;
        _1302 = _1294;
        _1303 = _1294;
        _1304 = _1294;
        _1305 = _1294;
        _1306 = 0.0;
        _1307 = 0.0;
        _1308 = 0.0;
    }
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1337 = fma(_962, cbModelParam._m0[30u].z, fma(_958, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _954));
        float _1341 = fma(_962, cbModelParam._m0[31u].z, fma(_958, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _954));
        float _1345 = fma(_962, cbModelParam._m0[32u].z, fma(_958, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _954));
        float _1368 = _954 + _712;
        float _1369 = _958 + _713;
        float _1370 = _962 + _714;
        float _1380 = fma(_1370, cbModelParam._m0[30u].z, fma(_1369, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1368)) - _1337;
        float _1381 = fma(_1370, cbModelParam._m0[31u].z, fma(_1369, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1368)) - _1341;
        float _1382 = fma(_1370, cbModelParam._m0[32u].z, fma(_1369, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1368)) - _1345;
        float _1386 = inversesqrt(dot(vec3(_1380, _1381, _1382), vec3(_1380, _1381, _1382)));
        float _1399 = ((_1386 * _1380) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1337 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1400 = ((_1386 * _1381) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1341 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1401 = ((_1386 * _1382) / cbModelParam._m0[35u].z) + ((((((_1345 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1403 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1399, _1400, _1401), 0.0);
        vec4 _1410 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1399, _1400, _1401), 0.0);
        vec4 _1417 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1399, _1400, _1401), 0.0);
        vec4 _1424 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1399, _1400, _1401), 0.0);
        float _1436 = exp2((_1403.w + (-0.5)) * 20.0) * 2.0;
        float _1437 = _1436 * (_1403.x + (-0.5));
        float _1438 = _1436 * (_1403.y + (-0.5));
        float _1439 = _1436 * (_1403.z + (-0.5));
        float _1446 = exp2((_1410.w + (-0.5)) * 20.0) * 2.0;
        float _1447 = _1446 * (_1410.x + (-0.5));
        float _1448 = _1446 * (_1410.y + (-0.5));
        float _1449 = _1446 * (_1410.z + (-0.5));
        float _1456 = exp2((_1417.w + (-0.5)) * 20.0) * 2.0;
        float _1457 = _1456 * (_1417.x + (-0.5));
        float _1458 = _1456 * (_1417.y + (-0.5));
        float _1459 = _1456 * (_1417.z + (-0.5));
        float _1466 = exp2((_1424.w + (-0.5)) * 20.0) * 2.0;
        float _1467 = _1466 * (_1424.x + (-0.5));
        float _1468 = _1466 * (_1424.y + (-0.5));
        float _1469 = _1466 * (_1424.z + (-0.5));
        float _1470 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1471 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1472 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1473 = _1437 * 0.5;
        float _1474 = _1447 * 0.5;
        float _1475 = _1457 * 0.5;
        float _1476 = dot(vec3(_1473, _1474, _1475), vec3(_1473, _1474, _1475));
        float _1481 = (_1476 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1476);
        float _1489 = (dot(vec3(_712, _713, _714), vec3(_1481 * _1473, _1481 * _1474, _1481 * _1475)) + 1.0) * 0.5;
        float _4281 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1498 = sqrt(((_1474 * _1474) + (_1473 * _1473)) + (_1475 * _1475)) / (_1470 + 9.9999997473787516355514526367188e-06);
        float _4292 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _1500 = _1499 * 2.0;
        float _1504 = (1.0 - _1499) / (_1499 + 1.0);
        float _4303 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _1514 = ((((1.0 - _1505) * (_1500 + 2.0)) * exp2(log2(isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * (_1500 + 1.0))) + _1505) * _1470;
        float _1515 = _1438 * 0.5;
        float _1516 = _1448 * 0.5;
        float _1517 = _1458 * 0.5;
        float _1518 = dot(vec3(_1515, _1516, _1517), vec3(_1515, _1516, _1517));
        float _1523 = (_1518 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1518);
        float _1531 = (dot(vec3(_712, _713, _714), vec3(_1523 * _1515, _1523 * _1516, _1523 * _1517)) + 1.0) * 0.5;
        float _4314 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1540 = sqrt(((_1516 * _1516) + (_1515 * _1515)) + (_1517 * _1517)) / (_1471 + 9.9999997473787516355514526367188e-06);
        float _4325 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _1542 = _1541 * 2.0;
        float _1546 = (1.0 - _1541) / (_1541 + 1.0);
        float _4336 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _1556 = ((((1.0 - _1547) * (_1542 + 2.0)) * exp2(log2(isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) * (_1542 + 1.0))) + _1547) * _1471;
        float _1557 = _1439 * 0.5;
        float _1558 = _1449 * 0.5;
        float _1559 = _1459 * 0.5;
        float _1560 = dot(vec3(_1557, _1558, _1559), vec3(_1557, _1558, _1559));
        float _1565 = (_1560 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1560);
        float _1573 = (dot(vec3(_712, _713, _714), vec3(_1565 * _1557, _1565 * _1558, _1565 * _1559)) + 1.0) * 0.5;
        float _4347 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1582 = sqrt(((_1558 * _1558) + (_1557 * _1557)) + (_1559 * _1559)) / (_1472 + 9.9999997473787516355514526367188e-06);
        float _4358 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1583 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _1584 = _1583 * 2.0;
        float _1588 = (1.0 - _1583) / (_1583 + 1.0);
        float _4369 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _4369 : (isnan(_4369) ? 1.0 : min(_4369, 1.0));
        float _1598 = ((((1.0 - _1589) * (_1584 + 2.0)) * exp2(log2(isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0))) * (_1584 + 1.0))) + _1589) * _1472;
        _1606 = _1439;
        _1607 = _1438;
        _1608 = _1437;
        _1609 = _1449;
        _1610 = _1448;
        _1611 = _1447;
        _1612 = _1459;
        _1613 = _1458;
        _1614 = _1457;
        _1615 = _1472;
        _1616 = _1471;
        _1617 = _1470;
        _1618 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)));
        _1619 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)));
        _1620 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)));
    }
    else
    {
        _1606 = _1294;
        _1607 = _1294;
        _1608 = _1294;
        _1609 = _1294;
        _1610 = _1294;
        _1611 = _1294;
        _1612 = _1294;
        _1613 = _1294;
        _1614 = _1294;
        _1615 = _1294;
        _1616 = _1294;
        _1617 = _1294;
        _1618 = 0.0;
        _1619 = 0.0;
        _1620 = 0.0;
    }
    float _1630 = (cbModelParam._m0[1u].x * (_1618 - _1306)) + _1306;
    float _1631 = (cbModelParam._m0[1u].x * (_1619 - _1307)) + _1307;
    float _1632 = (cbModelParam._m0[1u].x * (_1620 - _1308)) + _1308;
    float _1653 = fma(_1632, cbSceneParam._m0[89u].z, fma(_1631, cbSceneParam._m0[89u].y, _1630 * cbSceneParam._m0[89u].x));
    float _1656 = fma(_1632, cbSceneParam._m0[90u].z, fma(_1631, cbSceneParam._m0[90u].y, _1630 * cbSceneParam._m0[90u].x));
    float _1659 = fma(_1632, cbSceneParam._m0[91u].z, fma(_1631, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1630));
    float _1674 = _898 * 0.5;
    float _1675 = _899 * 0.5;
    float _1676 = _900 * 0.5;
    float _1677 = dot(vec4(_1674, _1675, _1676, 1.0), vec4(_1608, _1611, _1614, _1617));
    float _1680 = dot(vec4(_1674, _1675, _1676, 1.0), vec4(_1607, _1610, _1613, _1616));
    float _1683 = dot(vec4(_1674, _1675, _1676, 1.0), vec4(_1606, _1609, _1612, _1615));
    float _1717;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1690 = dot(vec4(_1674, _1675, _1676, 1.0), vec4(_1293, _1297, _1300, _1303));
        float _1694 = dot(vec4(_1674, _1675, _1676, 1.0), vec4(_1295, _1298, _1301, _1304));
        float _1698 = dot(vec4(_1674, _1675, _1676, 1.0), vec4(_1296, _1299, _1302, _1305));
        float _1705 = dot(vec4(cbModelParam._m0[39u]), vec4(_1674, _1675, _1676, 1.0));
        _1717 = dot(vec3(isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0)), isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0)), isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1705) ? 0.0 : (isnan(0.0) ? _1705 : max(0.0, _1705))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1717 = 1.0;
    }
    float _1728;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1719 = dot(vec4(cbModelParam._m0[40u]), vec4(_1674, _1675, _1676, 1.0));
        _1728 = dot(vec3(isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)), isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0)), isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1719) ? 0.0 : (isnan(0.0) ? _1719 : max(0.0, _1719))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1728 = 1.0;
    }
    float _1732 = (_1728 * cbModelParam._m0[1u].x) + (_1717 * (1.0 - cbModelParam._m0[1u].x));
    float _1742 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _715);
    float _1743 = isnan(_1742) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1742 : min(cbModelParam._m0[25u].z, _1742));
    float _1823;
    float _1825;
    float _1827;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1790 = fma(_962, cbModelParam._m0[13u].z, fma(_958, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _954)) + cbModelParam._m0[13u].w;
        float _1794 = fma(_962, cbModelParam._m0[14u].z, fma(_958, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _954)) + cbModelParam._m0[14u].w;
        float _1798 = fma(_962, cbModelParam._m0[15u].z, fma(_958, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _954)) + cbModelParam._m0[15u].w;
        float _1801 = fma(_900, cbModelParam._m0[13u].z, fma(_899, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _898));
        float _1804 = fma(_900, cbModelParam._m0[14u].z, fma(_899, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _898));
        float _1807 = fma(_900, cbModelParam._m0[15u].z, fma(_899, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _898));
        float _1835;
        if (_1801 > 0.0)
        {
            _1835 = abs((1.0 - _1790) / _1801);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1801 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1790 + 1.0) / _1801);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1835 = frontier_phi_17_15_ladder;
        }
        float _2008;
        if (_1804 > 0.0)
        {
            _2008 = abs((1.0 - _1794) / _1804);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1804 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1794 + 1.0) / _1804);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2008 = frontier_phi_26_22_ladder;
        }
        float _2303;
        if (_1807 > 0.0)
        {
            _2303 = abs((1.0 - _1798) / _1807);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1807 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1798 + 1.0) / _1807);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2303 = frontier_phi_38_33_ladder;
        }
        float _2305 = isnan(_2008) ? _1835 : (isnan(_1835) ? _2008 : min(_1835, _2008));
        float _2306 = isnan(_2303) ? _2305 : (isnan(_2305) ? _2303 : min(_2305, _2303));
        float _2310 = (_2306 * _1801) + _1790;
        float _2311 = (_2306 * _1804) + _1794;
        float _2312 = (_2306 * _1807) + _1798;
        float _2313 = _2306 * 9.9999997473787516355514526367188e-05;
        float _2315 = (-1.0) - _2313;
        float _2317 = _2313 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2312 > _2317) || ((_2312 < _2315) || ((_2311 > _2317) || ((_2311 < _2315) || ((_2310 < _2315) || (_2310 > _2317))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2457 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2312, cbModelParam._m0[9u].z, fma(_2311, cbModelParam._m0[9u].y, _2310 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2312, cbModelParam._m0[10u].z, fma(_2311, cbModelParam._m0[10u].y, _2310 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2312, cbModelParam._m0[11u].z, fma(_2311, cbModelParam._m0[11u].y, _2310 * cbModelParam._m0[11u].x))), _1743);
            frontier_phi_16_38_ladder = _2457.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2457.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2457.x * cbModelParam._m0[1u].y;
        }
        _1823 = frontier_phi_16_38_ladder_2;
        _1825 = frontier_phi_16_38_ladder_1;
        _1827 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1811 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_898, _899, _900), _1743);
        _1823 = _1811.x * cbModelParam._m0[1u].y;
        _1825 = _1811.y * cbModelParam._m0[1u].y;
        _1827 = _1811.z * cbModelParam._m0[1u].y;
    }
    float _1831 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _715);
    float _1832 = isnan(_1831) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1831 : min(cbModelParam._m0[25u].w, _1831));
    float _1923;
    float _1925;
    float _1927;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1887 = fma(_962, cbModelParam._m0[21u].z, fma(_958, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _954)) + cbModelParam._m0[21u].w;
        float _1891 = fma(_962, cbModelParam._m0[22u].z, fma(_958, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _954)) + cbModelParam._m0[22u].w;
        float _1895 = fma(_962, cbModelParam._m0[23u].z, fma(_958, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _954)) + cbModelParam._m0[23u].w;
        float _1898 = fma(_900, cbModelParam._m0[21u].z, fma(_899, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _898));
        float _1901 = fma(_900, cbModelParam._m0[22u].z, fma(_899, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _898));
        float _1904 = fma(_900, cbModelParam._m0[23u].z, fma(_899, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _898));
        float _2013;
        if (_1898 > 0.0)
        {
            _2013 = abs((1.0 - _1887) / _1898);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1898 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1887 + 1.0) / _1898);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2013 = frontier_phi_28_24_ladder;
        }
        float _2330;
        if (_1901 > 0.0)
        {
            _2330 = abs((1.0 - _1891) / _1901);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1901 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1891 + 1.0) / _1901);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2330 = frontier_phi_40_35_ladder;
        }
        float _2668;
        if (_1904 > 0.0)
        {
            _2668 = abs((1.0 - _1895) / _1904);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1904 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1895 + 1.0) / _1904);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2668 = frontier_phi_50_47_ladder;
        }
        float _2670 = isnan(_2330) ? _2013 : (isnan(_2013) ? _2330 : min(_2013, _2330));
        float _2671 = isnan(_2668) ? _2670 : (isnan(_2670) ? _2668 : min(_2670, _2668));
        float _2675 = (_2671 * _1898) + _1887;
        float _2676 = (_2671 * _1901) + _1891;
        float _2677 = (_2671 * _1904) + _1895;
        float _2678 = _2671 * 9.9999997473787516355514526367188e-05;
        float _2679 = (-1.0) - _2678;
        float _2681 = _2678 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2677 > _2681) || ((_2677 < _2679) || ((_2676 > _2681) || ((_2676 < _2679) || ((_2675 < _2679) || (_2675 > _2681))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2799 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2677, cbModelParam._m0[17u].z, fma(_2676, cbModelParam._m0[17u].y, _2675 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2677, cbModelParam._m0[18u].z, fma(_2676, cbModelParam._m0[18u].y, _2675 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2677, cbModelParam._m0[19u].z, fma(_2676, cbModelParam._m0[19u].y, _2675 * cbModelParam._m0[19u].x))), _1832);
            frontier_phi_25_50_ladder = _2799.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2799.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2799.x * cbModelParam._m0[1u].z;
        }
        _1923 = frontier_phi_25_50_ladder_2;
        _1925 = frontier_phi_25_50_ladder_1;
        _1927 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1907 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_898, _899, _900), _1832);
        _1923 = _1907.x * cbModelParam._m0[1u].z;
        _1925 = _1907.y * cbModelParam._m0[1u].z;
        _1927 = _1907.z * cbModelParam._m0[1u].z;
    }
    float _1940 = (((_925 * _875) + _926) * _890) * ((cbModelParam._m0[1u].w * (_1923 - _1823)) + _1823);
    float _1942 = (((_925 * _877) + _926) * _890) * ((cbModelParam._m0[1u].w * (_1925 - _1825)) + _1825);
    float _1944 = (((_925 * _878) + _926) * _890) * ((cbModelParam._m0[1u].w * (_1927 - _1827)) + _1827);
    float _1947 = fma(_1944, cbSceneParam._m0[89u].z, fma(_1942, cbSceneParam._m0[89u].y, _1940 * cbSceneParam._m0[89u].x));
    float _1950 = fma(_1944, cbSceneParam._m0[90u].z, fma(_1942, cbSceneParam._m0[90u].y, _1940 * cbSceneParam._m0[90u].x));
    float _1953 = fma(_1944, cbSceneParam._m0[91u].z, fma(_1942, cbSceneParam._m0[91u].y, _1940 * cbSceneParam._m0[91u].x));
    float _1987 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1991 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1995 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1999 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2000 = _1987 / _1999;
    float _2001 = _1991 / _1999;
    float _2002 = _1995 / _1999;
    float _2149;
    float _2150;
    float _2151;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2029 = ((uint(_2002 > cbSceneParam._m0[59u].y) + uint(_2002 > cbSceneParam._m0[59u].x)) + uint(_2002 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2030 = _2029 + 43u;
        uint _2038 = _2029 + 44u;
        uint _2046 = _2029 + 45u;
        uint _2054 = _2029 + 46u;
        float _2065 = fma(_1999, cbSceneParam._m0[_2030].w, fma(_1995, cbSceneParam._m0[_2030].z, fma(_1991, cbSceneParam._m0[_2030].y, _1987 * cbSceneParam._m0[_2030].x)));
        float _2069 = fma(_1999, cbSceneParam._m0[_2038].w, fma(_1995, cbSceneParam._m0[_2038].z, fma(_1991, cbSceneParam._m0[_2038].y, _1987 * cbSceneParam._m0[_2038].x)));
        float _2077 = fma(_1999, cbSceneParam._m0[_2054].w, fma(_1995, cbSceneParam._m0[_2054].z, fma(_1991, cbSceneParam._m0[_2054].y, _1987 * cbSceneParam._m0[_2054].x)));
        float _2082 = cbSceneParam._m0[33u].z * _2077;
        float _2084 = cbSceneParam._m0[33u].w * _2077;
        float _2087 = fma(_1999, cbSceneParam._m0[_2046].w, fma(_1995, cbSceneParam._m0[_2046].z, fma(_1991, cbSceneParam._m0[_2046].y, _1987 * cbSceneParam._m0[_2046].x))) / _2077;
        float _2135 = (cbSceneParam._m0[33u].x - sqrt(((_2001 * _2001) + (_2000 * _2000)) + (_2002 * _2002))) * cbSceneParam._m0[33u].y;
        float _4495 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
        float _2142 = (isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2082 + _2065) / _2077, (_2084 + _2069) / _2077), _2087), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2084 + _2065) / _2077, (_2069 - _2082) / _2077), _2087), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2065 - _2082) / _2077, (_2069 - _2084) / _2077), _2087), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2065 - _2084) / _2077, (_2082 + _2069) / _2077), _2087), 0.0)).x), vec4(0.25)));
        _2149 = 1.0 - (_2142 * cbSceneParam._m0[34u].x);
        _2150 = 1.0 - (_2142 * cbSceneParam._m0[34u].y);
        _2151 = 1.0 - (_2142 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2149 = 1.0;
        _2150 = 1.0;
        _2151 = 1.0;
    }
    float _2215;
    float _2217;
    float _2219;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2203 = fma(_1999, cbSceneParam._m0[63u].w, fma(_1995, cbSceneParam._m0[63u].z, fma(_1991, cbSceneParam._m0[63u].y, _1987 * cbSceneParam._m0[63u].x)));
        float _2204 = fma(_1999, cbSceneParam._m0[60u].w, fma(_1995, cbSceneParam._m0[60u].z, fma(_1991, cbSceneParam._m0[60u].y, _1987 * cbSceneParam._m0[60u].x))) / _2203;
        float _2205 = fma(_1999, cbSceneParam._m0[61u].w, fma(_1995, cbSceneParam._m0[61u].z, fma(_1991, cbSceneParam._m0[61u].y, _1987 * cbSceneParam._m0[61u].x))) / _2203;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2204 >= cbSceneParam._m0[64u].x) && (_2205 >= cbSceneParam._m0[64u].y)) && (_2204 <= cbSceneParam._m0[64u].z)) && (_2205 <= cbSceneParam._m0[64u].w))
        {
            float _2343 = fma(_1999, cbSceneParam._m0[62u].w, fma(_1995, cbSceneParam._m0[62u].z, fma(_1991, cbSceneParam._m0[62u].y, _1987 * cbSceneParam._m0[62u].x))) / _2203;
            float _2347 = isnan(cbSceneParam._m0[41u].w) ? _2343 : (isnan(_2343) ? cbSceneParam._m0[41u].w : max(_2343, cbSceneParam._m0[41u].w));
            float _2390 = (cbSceneParam._m0[33u].x - sqrt(((_2001 * _2001) + (_2000 * _2000)) + (_2002 * _2002))) * cbSceneParam._m0[33u].y;
            float _4511 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
            float _2397 = (isnan(1.0) ? _4511 : (isnan(_4511) ? 1.0 : min(_4511, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2204, cbSceneParam._m0[33u].w + _2205), _2347), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2204, _2205 - cbSceneParam._m0[33u].z), _2347), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2204 - cbSceneParam._m0[33u].z, _2205 - cbSceneParam._m0[33u].w), _2347), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2204 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2205), _2347), 0.0)).x), vec4(0.25)));
            float _2401 = 1.0 - (_2397 * cbSceneParam._m0[34u].x);
            float _2402 = 1.0 - (_2397 * cbSceneParam._m0[34u].y);
            float _2403 = 1.0 - (_2397 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2403) ? _2151 : (isnan(_2151) ? _2403 : min(_2151, _2403));
            frontier_phi_37_36_ladder_1 = isnan(_2402) ? _2150 : (isnan(_2150) ? _2402 : min(_2150, _2402));
            frontier_phi_37_36_ladder_2 = isnan(_2401) ? _2149 : (isnan(_2149) ? _2401 : min(_2149, _2401));
        }
        else
        {
            frontier_phi_37_36_ladder = _2151;
            frontier_phi_37_36_ladder_1 = _2150;
            frontier_phi_37_36_ladder_2 = _2149;
        }
        _2215 = frontier_phi_37_36_ladder_2;
        _2217 = frontier_phi_37_36_ladder_1;
        _2219 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2215 = _2149;
        _2217 = _2150;
        _2219 = _2151;
    }
    uvec4 _2224 = floatBitsToUint(cbInstanceData._m0[_850 + 5u]);
    uint _2226 = _2224.x * 14u;
    uint _2227 = _2226 + 13u;
    float _2234 = _890 + (-1.0);
    float _2239 = (cbLight._m0[_2227].x * _2234) + 1.0;
    float _2240 = (cbLight._m0[_2227].y * _2234) + 1.0;
    float _2241 = (cbLight._m0[_2227].z * _2234) + 1.0;
    float _2242 = (cbLight._m0[_2227].w * _2234) + 1.0;
    uint _2243 = _2226 + 5u;
    float _2249 = isnan(1.0) ? _2240 : (isnan(_2240) ? 1.0 : min(_2240, 1.0));
    uint _2253 = _2226 + 4u;
    float _2262 = isnan(1.0) ? _2239 : (isnan(_2239) ? 1.0 : min(_2239, 1.0));
    uint _2266 = _2226 | 1u;
    float _2277 = dot(vec3(cbLight._m0[_2226].xyz), vec3(_712, _713, _714));
    float _2280 = dot(vec3(cbLight._m0[_2266].xyz), vec3(_712, _713, _714));
    float _4547 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
    float _4558 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
    float _2285 = (isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0))) * 0.3183098733425140380859375;
    float _2287 = (isnan(1.0) ? _4558 : (isnan(_4558) ? 1.0 : min(_4558, 1.0))) * 0.3183098733425140380859375;
    float _2294 = ((cbLight._m0[_2243].x * _2249) * _2287) + (((cbLight._m0[_2253].x * _2215) * _2262) * _2285);
    float _2295 = ((_2249 * cbLight._m0[_2243].y) * _2287) + (((cbLight._m0[_2253].y * _2217) * _2262) * _2285);
    float _2296 = ((_2249 * cbLight._m0[_2243].z) * _2287) + (((cbLight._m0[_2253].z * _2219) * _2262) * _2285);
    uvec4 _2300 = floatBitsToUint(cbLight._m0[_2226 + 12u]);
    bool _2302 = _2300.x == 0u;
    float _2404;
    float _2406;
    float _2408;
    if (_2302)
    {
        _2404 = _2294;
        _2406 = _2295;
        _2408 = _2296;
    }
    else
    {
        uint _2412 = _2226 + 6u;
        float _2428 = (dot(vec3(cbLight._m0[_2226 + 2u].xyz), vec3(_712, _713, _714)) * 0.5) + 0.5;
        float _2429 = _2428 * _2428;
        float _4569 = isnan(0.0) ? _2429 : (isnan(_2429) ? 0.0 : max(_2429, 0.0));
        float _2430 = isnan(1.0) ? _4569 : (isnan(_4569) ? 1.0 : min(_4569, 1.0));
        float _2431 = isnan(1.0) ? _2241 : (isnan(_2241) ? 1.0 : min(_2241, 1.0));
        _2404 = (((cbLight._m0[_2412].x * 0.3183098733425140380859375) * _2430) * _2431) + _2294;
        _2406 = (((cbLight._m0[_2412].y * 0.3183098733425140380859375) * _2430) * _2431) + _2295;
        _2408 = (((cbLight._m0[_2412].z * 0.3183098733425140380859375) * _2430) * _2431) + _2296;
    }
    bool _2411 = _2300.y == 0u;
    float _2466;
    float _2468;
    float _2470;
    if (_2411)
    {
        _2466 = _2404;
        _2468 = _2406;
        _2470 = _2408;
    }
    else
    {
        uint _2639 = _2226 + 7u;
        float _2655 = (dot(vec3(cbLight._m0[_2226 + 3u].xyz), vec3(_712, _713, _714)) * 0.5) + 0.5;
        float _2656 = _2655 * _2655;
        float _4585 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
        float _2657 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
        float _2658 = isnan(1.0) ? _2242 : (isnan(_2242) ? 1.0 : min(_2242, 1.0));
        _2466 = (((cbLight._m0[_2639].x * 0.3183098733425140380859375) * _2657) * _2658) + _2404;
        _2468 = (((cbLight._m0[_2639].y * 0.3183098733425140380859375) * _2657) * _2658) + _2406;
        _2470 = (((cbLight._m0[_2639].z * 0.3183098733425140380859375) * _2657) * _2658) + _2408;
    }
    uint _2473 = _2226 + 8u;
    float _2486 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2226].w)) * _715) * 0.949999988079071044921875);
    float _2487 = _2486 * _2486;
    float _2488 = cbLight._m0[_2226].x + _792;
    float _2489 = cbLight._m0[_2226].y + _793;
    float _2490 = cbLight._m0[_2226].z + _794;
    float _2494 = inversesqrt(dot(vec3(_2488, _2489, _2490), vec3(_2488, _2489, _2490)));
    float _2495 = _2494 * _2488;
    float _2496 = _2494 * _2489;
    float _2497 = _2494 * _2490;
    float _2498 = dot(vec3(_712, _713, _714), vec3(cbLight._m0[_2226].xyz));
    float _4601 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
    float _2501 = isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0));
    float _4612 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _2502 = isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0));
    float _2503 = dot(vec3(_712, _713, _714), vec3(_2495, _2496, _2497));
    float _4623 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
    float _2506 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
    float _2507 = dot(vec3(cbLight._m0[_2226].xyz), vec3(_2495, _2496, _2497));
    float _4634 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
    float _2511 = _2487 * _2487;
    float _2515 = ((_2506 * _2506) * (_2511 + (-1.0))) + 1.0;
    float _2523 = exp2(log2(1.0 - (isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0)))) * 5.0);
    float _2524 = 0.959999978542327880859375 - _872;
    float _2526 = 0.959999978542327880859375 - _873;
    float _2527 = 0.959999978542327880859375 - _874;
    float _2534 = 1.0 - _2487;
    float _2545 = (0.5 / (((_2502 * ((_2501 * _2534) + _2487)) + 9.9999999392252902907785028219223e-09) + (((_2502 * _2534) + _2487) * _2501))) * _2501;
    float _4645 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
    float _2547 = (isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0))) * (_2511 / ((_2515 * _2515) * 3.141590118408203125));
    uint _2561 = _2226 + 9u;
    float _2572 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2266].w)) * _715) * 0.949999988079071044921875);
    float _2573 = _2572 * _2572;
    float _2574 = cbLight._m0[_2266].x + _792;
    float _2575 = cbLight._m0[_2266].y + _793;
    float _2576 = cbLight._m0[_2266].z + _794;
    float _2580 = inversesqrt(dot(vec3(_2574, _2575, _2576), vec3(_2574, _2575, _2576)));
    float _2581 = _2580 * _2574;
    float _2582 = _2580 * _2575;
    float _2583 = _2580 * _2576;
    float _2584 = dot(vec3(_712, _713, _714), vec3(cbLight._m0[_2266].xyz));
    float _4656 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
    float _2587 = isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0));
    float _2588 = dot(vec3(_712, _713, _714), vec3(_2581, _2582, _2583));
    float _4667 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
    float _2591 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
    float _2592 = dot(vec3(cbLight._m0[_2266].xyz), vec3(_2581, _2582, _2583));
    float _4678 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
    float _2596 = _2573 * _2573;
    float _2600 = ((_2591 * _2591) * (_2596 + (-1.0))) + 1.0;
    float _2607 = exp2(log2(1.0 - (isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0)))) * 5.0);
    float _2614 = 1.0 - _2573;
    float _2624 = (0.5 / (((_2502 * ((_2587 * _2614) + _2573)) + 9.9999999392252902907785028219223e-09) + (((_2502 * _2614) + _2573) * _2587))) * _2587;
    float _4689 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
    float _2626 = (isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0))) * (_2596 / ((_2600 * _2600) * 3.141590118408203125));
    float _2636 = (((((_2607 * _2524) + _875) * cbLight._m0[_2561].x) * _2626) * _2249) + ((((cbLight._m0[_2473].x * _2215) * ((_2523 * _2524) + _875)) * _2547) * _2262);
    float _2637 = (((((_2607 * _2526) + _877) * cbLight._m0[_2561].y) * _2626) * _2249) + ((((cbLight._m0[_2473].y * _2217) * ((_2523 * _2526) + _877)) * _2547) * _2262);
    float _2638 = (((((_2607 * _2527) + _878) * cbLight._m0[_2561].z) * _2626) * _2249) + ((((cbLight._m0[_2473].z * _2219) * ((_2523 * _2527) + _878)) * _2547) * _2262);
    float _2694;
    float _2696;
    float _2698;
    if (_2302)
    {
        _2694 = _2636;
        _2696 = _2637;
        _2698 = _2638;
    }
    else
    {
        uint _2700 = _2226 + 2u;
        uint _2704 = _2226 + 10u;
        float _2718 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2700].w)) * _715) * 0.949999988079071044921875);
        float _2719 = _2718 * _2718;
        float _2720 = cbLight._m0[_2700].x + _792;
        float _2721 = cbLight._m0[_2700].y + _793;
        float _2722 = cbLight._m0[_2700].z + _794;
        float _2726 = inversesqrt(dot(vec3(_2720, _2721, _2722), vec3(_2720, _2721, _2722)));
        float _2727 = _2726 * _2720;
        float _2728 = _2726 * _2721;
        float _2729 = _2726 * _2722;
        float _2730 = dot(vec3(_712, _713, _714), vec3(cbLight._m0[_2700].xyz));
        float _4700 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
        float _2733 = isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0));
        float _2734 = dot(vec3(_712, _713, _714), vec3(_2727, _2728, _2729));
        float _4711 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
        float _2737 = isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0));
        float _2738 = dot(vec3(cbLight._m0[_2700].xyz), vec3(_2727, _2728, _2729));
        float _4722 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
        float _2742 = _2719 * _2719;
        float _2746 = ((_2737 * _2737) * (_2742 + (-1.0))) + 1.0;
        float _2753 = exp2(log2(1.0 - (isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0)))) * 5.0);
        float _2760 = 1.0 - _2719;
        float _2770 = (0.5 / (((_2502 * ((_2733 * _2760) + _2719)) + 9.9999999392252902907785028219223e-09) + (((_2502 * _2760) + _2719) * _2733))) * _2733;
        float _4733 = isnan(0.0) ? _2770 : (isnan(_2770) ? 0.0 : max(_2770, 0.0));
        float _2772 = (isnan(1.0) ? _4733 : (isnan(_4733) ? 1.0 : min(_4733, 1.0))) * (_2742 / ((_2746 * _2746) * 3.141590118408203125));
        float _2773 = isnan(1.0) ? _2241 : (isnan(_2241) ? 1.0 : min(_2241, 1.0));
        _2694 = (((((_2753 * _2524) + _875) * cbLight._m0[_2704].x) * _2772) * _2773) + _2636;
        _2696 = (((((_2753 * _2526) + _877) * cbLight._m0[_2704].y) * _2772) * _2773) + _2637;
        _2698 = (((((_2753 * _2527) + _878) * cbLight._m0[_2704].z) * _2772) * _2773) + _2638;
    }
    float _2804;
    float _2806;
    float _2808;
    if (_2411)
    {
        _2804 = _2694;
        _2806 = _2696;
        _2808 = _2698;
    }
    else
    {
        uint _2815 = _2226 + 3u;
        uint _2819 = _2226 + 11u;
        float _2833 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2815].w)) * _715) * 0.949999988079071044921875);
        float _2834 = _2833 * _2833;
        float _2835 = cbLight._m0[_2815].x + _792;
        float _2836 = cbLight._m0[_2815].y + _793;
        float _2837 = cbLight._m0[_2815].z + _794;
        float _2841 = inversesqrt(dot(vec3(_2835, _2836, _2837), vec3(_2835, _2836, _2837)));
        float _2842 = _2841 * _2835;
        float _2843 = _2841 * _2836;
        float _2844 = _2841 * _2837;
        float _2845 = dot(vec3(_712, _713, _714), vec3(cbLight._m0[_2815].xyz));
        float _4749 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
        float _2848 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
        float _2849 = dot(vec3(_712, _713, _714), vec3(_2842, _2843, _2844));
        float _4760 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
        float _2852 = isnan(1.0) ? _4760 : (isnan(_4760) ? 1.0 : min(_4760, 1.0));
        float _2853 = dot(vec3(cbLight._m0[_2815].xyz), vec3(_2842, _2843, _2844));
        float _4771 = isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0));
        float _2857 = _2834 * _2834;
        float _2861 = ((_2852 * _2852) * (_2857 + (-1.0))) + 1.0;
        float _2868 = exp2(log2(1.0 - (isnan(1.0) ? _4771 : (isnan(_4771) ? 1.0 : min(_4771, 1.0)))) * 5.0);
        float _2875 = 1.0 - _2834;
        float _2885 = (0.5 / (((_2502 * ((_2848 * _2875) + _2834)) + 9.9999999392252902907785028219223e-09) + (((_2502 * _2875) + _2834) * _2848))) * _2848;
        float _4782 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
        float _2887 = (isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0))) * (_2857 / ((_2861 * _2861) * 3.141590118408203125));
        float _2888 = isnan(1.0) ? _2242 : (isnan(_2242) ? 1.0 : min(_2242, 1.0));
        _2804 = (((((_2868 * _2524) + _875) * cbLight._m0[_2819].x) * _2887) * _2888) + _2694;
        _2806 = (((((_2868 * _2526) + _877) * cbLight._m0[_2819].y) * _2887) * _2888) + _2696;
        _2808 = (((((_2868 * _2527) + _878) * cbLight._m0[_2819].z) * _2887) * _2888) + _2698;
    }
    float _2954;
    float _2956;
    float _2958;
    float _2960;
    float _2962;
    float _2964;
    if (_2224.y == 0u)
    {
        uvec4 _2909 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2910 = _2909.x;
        uint _2921 = uint((float(_2909.y) * floor(float(uint(cbSceneParam._m0[85u].y * _813) / _2910))) + floor(float(uint(cbSceneParam._m0[85u].x * _812) / _2910)));
        float _2931 = (log2(_2002 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2932 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0));
        uint _2935 = uint(isnan(14.0) ? _2932 : (isnan(_2932) ? 14.0 : min(_2932, 14.0)));
        uvec4 _2940 = texelFetch(g_lightClusterGridBuffer, int(((_2935 << 2u) + (_2921 << 6u)) >> 2u));
        uint _2941 = _2940.x;
        uint _2942 = _2909.z;
        float _3021;
        float _3023;
        float _3025;
        float _3027;
        float _3029;
        float _3031;
        if (((((1u << ((_2942 >> 4u) & 15u)) + 4294967295u) & _2941) == 0u) || ((_2942 & 240u) == 0u))
        {
            _3021 = 0.0;
            _3023 = 0.0;
            _3025 = 0.0;
            _3027 = 0.0;
            _3029 = 0.0;
            _3031 = 0.0;
        }
        else
        {
            float _3022;
            float _3024;
            float _3026;
            float _3028;
            float _3030;
            float _3032;
            float _3174 = 0.0;
            float _3175 = 0.0;
            float _3176 = 0.0;
            float _3177 = 0.0;
            float _3178 = 0.0;
            float _3179 = 0.0;
            uint _3180 = 0u;
            uint _3189;
            bool _3190;
            for (;;)
            {
                _3189 = texelFetch(g_lightClassification, int((((_2935 << 5u) + (_2921 << 9u)) + (_3180 << 2u)) >> 2u)).x;
                _3190 = _3189 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3190)
                {
                    frontier_phi_71_pred = _3179;
                    frontier_phi_71_pred_1 = _3178;
                    frontier_phi_71_pred_2 = _3177;
                    frontier_phi_71_pred_3 = _3176;
                    frontier_phi_71_pred_4 = _3175;
                    frontier_phi_71_pred_5 = _3174;
                }
                else
                {
                    float _3319;
                    float _3320;
                    float _3321;
                    float _3322;
                    float _3323;
                    float _3324;
                    uint _3325;
                    _3319 = _3174;
                    _3320 = _3175;
                    _3321 = _3176;
                    _3322 = _3177;
                    _3323 = _3178;
                    _3324 = _3179;
                    _3325 = _3189;
                    float _3246;
                    float _3247;
                    float _3248;
                    float _3249;
                    float _3250;
                    float _3251;
                    for (;;)
                    {
                        uint _3329 = uint(findLSB(_3325)) + (_3180 << 5u);
                        uint _3326 = (_3325 + 4294967295u) & _3325;
                        uint _3331 = _3329 * 48u;
                        vec4 _3345 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3331)).x, texelFetch(g_PointLightRenderingBuffer, int(_3331 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3331 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3331 + 3u)).x));
                        uint _3351 = (_3329 * 48u) + 4u;
                        vec4 _3364 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3351)).x, texelFetch(g_PointLightRenderingBuffer, int(_3351 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3351 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3351 + 3u)).x));
                        uint _3370 = (_3329 * 48u) + 8u;
                        vec3 _3381 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3370)).x, texelFetch(g_PointLightRenderingBuffer, int(_3370 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3370 + 2u)).x));
                        float _3385 = _3345.x - _2000;
                        float _3386 = _3345.y - _2001;
                        float _3387 = _3345.z - _2002;
                        float _3388 = dot(vec3(_3385, _3386, _3387), vec3(_3385, _3386, _3387));
                        float _3391 = inversesqrt(_3388);
                        float _3392 = _3391 * _3385;
                        float _3393 = _3391 * _3386;
                        float _3394 = _3391 * _3387;
                        float _3395 = dot(vec3(_831, _834, _837), vec3(_3392, _3393, _3394));
                        float _3400 = 1.0 - (_3388 * _3345.w);
                        float _4808 = isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0));
                        float _3401 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
                        float _3402 = sqrt(_3388) * _3364.w;
                        float _3405 = 1.39999997615814208984375 / (_3402 + 1.39999997615814208984375);
                        float _3406 = _3405 * _3405;
                        float _3409 = ((1.0 - _3406) * _3395) + _3406;
                        float _3412 = _3402 * _3402;
                        float _3416 = ((isnan(0.0) ? _3409 : (isnan(_3409) ? 0.0 : max(_3409, 0.0))) * _3401) / ((_3412 * 0.699999988079071044921875) + 1.0);
                        float _3420 = (-0.0) - _2000;
                        float _3421 = (-0.0) - _2001;
                        float _3422 = (-0.0) - _2002;
                        float _3426 = inversesqrt(dot(vec3(_3420, _3421, _3422), vec3(_3420, _3421, _3422)));
                        float _3427 = _3426 * _3420;
                        float _3428 = _3426 * _3421;
                        float _3429 = _3426 * _3422;
                        float _3436 = exp2(log2(1.0 / ((_3412 * 3.5) + 5.0)) * 0.25);
                        float _3437 = 1.0 - _906;
                        float _3444 = sqrt(1.0 - ((1.0 - (_3437 * _3437)) * (1.0 - (_3436 * _3436))));
                        float _3445 = _3444 * _3444;
                        float _3446 = _3445 * _3445;
                        float _3447 = _3427 + _3392;
                        float _3448 = _3428 + _3393;
                        float _3449 = _3429 + _3394;
                        float _3453 = inversesqrt(dot(vec3(_3447, _3448, _3449), vec3(_3447, _3448, _3449)));
                        float _3457 = dot(vec3(_831, _834, _837), vec3(_3427, _3428, _3429));
                        float _4824 = isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0));
                        float _3460 = isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0));
                        float _3461 = dot(vec3(_831, _834, _837), vec3(_3453 * _3447, _3453 * _3448, _3453 * _3449));
                        float _4835 = isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0));
                        float _3464 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
                        float _3468 = ((_3464 * _3464) * (_3446 + (-1.0))) + 1.0;
                        float _3469 = _3405 * _3445;
                        float _3470 = _3469 * _3469;
                        float _3473 = ((1.0 - _3470) * _3395) + _3470;
                        float _4846 = isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0));
                        float _3474 = isnan(1.0) ? _4846 : (isnan(_4846) ? 1.0 : min(_4846, 1.0));
                        float _3475 = 1.0 - _3445;
                        float _3485 = (0.5 / (((_3474 * ((_3460 * _3475) + _3445)) + 9.9999999392252902907785028219223e-09) + (((_3474 * _3475) + _3445) * _3460))) * _3474;
                        float _4857 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                        float _3496 = (((_3446 * 3.1415927410125732421875) * (isnan(1.0) ? _4857 : (isnan(_4857) ? 1.0 : min(_4857, 1.0)))) / ((_3468 * _3468) * ((_3412 * 2.1991131305694580078125) + 3.141590118408203125))) * _3401;
                        _3249 = (_3416 * _3364.x) + _3322;
                        _3250 = (_3416 * _3364.y) + _3323;
                        _3251 = (_3416 * _3364.z) + _3324;
                        _3246 = (_3496 * _3381.x) + _3319;
                        _3247 = (_3496 * _3381.y) + _3320;
                        _3248 = (_3496 * _3381.z) + _3321;
                        if (_3326 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3319 = _3246;
                            _3320 = _3247;
                            _3321 = _3248;
                            _3322 = _3249;
                            _3323 = _3250;
                            _3324 = _3251;
                            _3325 = _3326;
                        }
                    }
                    frontier_phi_71_pred = _3251;
                    frontier_phi_71_pred_1 = _3250;
                    frontier_phi_71_pred_2 = _3249;
                    frontier_phi_71_pred_3 = _3248;
                    frontier_phi_71_pred_4 = _3247;
                    frontier_phi_71_pred_5 = _3246;
                }
                _3032 = frontier_phi_71_pred;
                _3030 = frontier_phi_71_pred_1;
                _3028 = frontier_phi_71_pred_2;
                _3026 = frontier_phi_71_pred_3;
                _3024 = frontier_phi_71_pred_4;
                _3022 = frontier_phi_71_pred_5;
                uint _3181 = _3180 + 1u;
                if (_3181 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3174 = _3022;
                    _3175 = _3024;
                    _3176 = _3026;
                    _3177 = _3028;
                    _3178 = _3030;
                    _3179 = _3032;
                    _3180 = _3181;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3021 = _3022;
            _3023 = _3024;
            _3025 = _3026;
            _3027 = _3028;
            _3029 = _3030;
            _3031 = _3032;
        }
        uvec4 _3035 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3036 = _3035.z;
        uint _3038 = (_3036 >> 8u) & 15u;
        float _3142;
        float _3144;
        float _3146;
        float _3148;
        float _3150;
        float _3152;
        if (((4294967295u << _3038) & _2941) == 0u)
        {
            _3142 = _3021;
            _3144 = _3023;
            _3146 = _3025;
            _3148 = _3027;
            _3150 = _3029;
            _3152 = _3031;
        }
        else
        {
            float _3167 = inversesqrt(dot(vec3(_2000, _2001, _2002), vec3(_2000, _2001, _2002)));
            float _3168 = _3167 * _2000;
            float _3169 = _3167 * _2001;
            float _3170 = _3167 * _2002;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3038 < ((_3036 >> 12u) & 15u))
            {
                float _3143;
                float _3145;
                float _3147;
                float _3149;
                float _3151;
                float _3153;
                float _3302 = _3021;
                float _3303 = _3023;
                float _3304 = _3025;
                float _3305 = _3027;
                float _3306 = _3029;
                float _3307 = _3031;
                uint _3308 = _3038;
                uint _3317;
                bool _3318;
                for (;;)
                {
                    _3317 = texelFetch(g_lightClassification, int((((_2935 << 5u) + (_2921 << 9u)) + (_3308 << 2u)) >> 2u)).x;
                    _3318 = _3317 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3318)
                    {
                        frontier_phi_82_pred = _3307;
                        frontier_phi_82_pred_1 = _3306;
                        frontier_phi_82_pred_2 = _3305;
                        frontier_phi_82_pred_3 = _3304;
                        frontier_phi_82_pred_4 = _3303;
                        frontier_phi_82_pred_5 = _3302;
                    }
                    else
                    {
                        float _3510;
                        float _3511;
                        float _3512;
                        float _3513;
                        float _3514;
                        float _3515;
                        float _3804;
                        float _3805;
                        float _3806;
                        float _3807;
                        float _3808;
                        float _3809;
                        float _3523 = _3302;
                        float _3524 = _3303;
                        float _3525 = _3304;
                        float _3526 = _3305;
                        float _3527 = _3306;
                        float _3528 = _3307;
                        uint _3529 = _3317;
                        uint _3530;
                        vec4 _3555;
                        float _3556;
                        vec4 _3571;
                        vec3 _3583;
                        vec4 _3598;
                        vec4 _3613;
                        float _3660;
                        bool _3661;
                        for (;;)
                        {
                            uint _3540 = ((_3308 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3529));
                            _3530 = (_3529 + 4294967295u) & _3529;
                            uint _3542 = _3540 * 40u;
                            _3555 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3542)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3542 + 3u)).x));
                            _3556 = _3555.w;
                            uint _3558 = (_3540 * 40u) + 4u;
                            _3571 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3558)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3558 + 3u)).x));
                            uint _3573 = (_3540 * 40u) + 8u;
                            _3583 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3573)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3573 + 2u)).x));
                            uint _3585 = (_3540 * 40u) + 16u;
                            _3598 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3585)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3585 + 3u)).x));
                            uint _3600 = (_3540 * 40u) + 20u;
                            _3613 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3600)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3600 + 3u)).x));
                            uint _3616 = (_3540 * 40u) + 24u;
                            vec4 _3629 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3616)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 3u)).x));
                            uint _3635 = (_3540 * 40u) + 28u;
                            vec4 _3648 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3635)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3635 + 3u)).x));
                            _3660 = fma(_2002, _3648.z, fma(_2001, _3648.y, _3648.x * _2000)) + _3648.w;
                            _3661 = !((fma(_2002, _3629.z, fma(_2001, _3629.y, _3629.x * _2000)) + _3629.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3661)
                            {
                                float _3688 = _3555.x - _2000;
                                float _3689 = _3555.y - _2001;
                                float _3690 = _3555.z - _2002;
                                float _3691 = dot(vec3(_3688, _3689, _3690), vec3(_3688, _3689, _3690));
                                float _3694 = inversesqrt(_3691);
                                float _3695 = _3694 * _3688;
                                float _3696 = _3694 * _3689;
                                float _3697 = _3694 * _3690;
                                float _3701 = 1.0 - (_3691 / (_3556 * _3556));
                                float _4868 = isnan(0.0) ? _3701 : (isnan(_3701) ? 0.0 : max(_3701, 0.0));
                                float _3702 = isnan(1.0) ? _4868 : (isnan(_4868) ? 1.0 : min(_4868, 1.0));
                                float _3706 = sqrt(_3691) * _3571.w;
                                float _3708 = 1.39999997615814208984375 / (_3706 + 1.39999997615814208984375);
                                float _3709 = _3708 * _3708;
                                float _3712 = ((1.0 - _3709) * dot(vec3(_3695, _3696, _3697), vec3(_831, _834, _837))) + _3709;
                                float _3715 = _3706 * _3706;
                                float _3719 = (fma(_2002, _3598.z, fma(_2001, _3598.y, _3598.x * _2000)) + _3598.w) / _3660;
                                float _3720 = (fma(_2002, _3613.z, fma(_2001, _3613.y, _3613.x * _2000)) + _3613.w) / _3660;
                                float _3724 = 1.0 - dot(vec2(_3719, _3720), vec2(_3719, _3720));
                                float _4884 = isnan(0.0) ? _3724 : (isnan(_3724) ? 0.0 : max(_3724, 0.0));
                                float _3725 = isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0));
                                float _3726 = _3725 * (((isnan(0.0) ? _3712 : (isnan(_3712) ? 0.0 : max(_3712, 0.0))) * _3702) / ((_3715 * 0.699999988079071044921875) + 1.0));
                                float _3738 = exp2(log2(1.0 / ((_3715 * 3.5) + 5.0)) * 0.25);
                                float _3739 = 1.0 - _906;
                                float _3746 = sqrt(1.0 - ((1.0 - (_3739 * _3739)) * (1.0 - (_3738 * _3738))));
                                float _3747 = _3746 * _3746;
                                float _3748 = _3747 * _3747;
                                float _3749 = _3695 - _3168;
                                float _3750 = _3696 - _3169;
                                float _3751 = _3697 - _3170;
                                float _3755 = inversesqrt(dot(vec3(_3749, _3750, _3751), vec3(_3749, _3750, _3751)));
                                float _3759 = dot(vec3(_831, _834, _837), vec3((-0.0) - _3168, (-0.0) - _3169, (-0.0) - _3170));
                                float _4895 = isnan(0.0) ? _3759 : (isnan(_3759) ? 0.0 : max(_3759, 0.0));
                                float _3762 = isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0));
                                float _3763 = dot(vec3(_831, _834, _837), vec3(_3755 * _3749, _3755 * _3750, _3755 * _3751));
                                float _4906 = isnan(0.0) ? _3763 : (isnan(_3763) ? 0.0 : max(_3763, 0.0));
                                float _3766 = isnan(1.0) ? _4906 : (isnan(_4906) ? 1.0 : min(_4906, 1.0));
                                float _3770 = ((_3766 * _3766) * (_3748 + (-1.0))) + 1.0;
                                float _3771 = _3708 * _3747;
                                float _3772 = _3771 * _3771;
                                float _3778 = ((1.0 - _3772) * dot(vec3(_831, _834, _837), vec3(_3695, _3696, _3697))) + _3772;
                                float _4917 = isnan(0.0) ? _3778 : (isnan(_3778) ? 0.0 : max(_3778, 0.0));
                                float _3779 = isnan(1.0) ? _4917 : (isnan(_4917) ? 1.0 : min(_4917, 1.0));
                                float _3780 = 1.0 - _3747;
                                float _3790 = (0.5 / (((_3779 * ((_3762 * _3780) + _3747)) + 9.9999999392252902907785028219223e-09) + (((_3779 * _3780) + _3747) * _3762))) * _3779;
                                float _4928 = isnan(0.0) ? _3790 : (isnan(_3790) ? 0.0 : max(_3790, 0.0));
                                float _3800 = (_3725 * _3702) * (((_3748 * 3.1415927410125732421875) * (isnan(1.0) ? _4928 : (isnan(_4928) ? 1.0 : min(_4928, 1.0)))) / ((_3770 * _3770) * ((_3715 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3726 * _3571.z;
                                frontier_phi_88_pred_1 = _3726 * _3571.y;
                                frontier_phi_88_pred_2 = _3726 * _3571.x;
                                frontier_phi_88_pred_3 = _3800 * _3583.z;
                                frontier_phi_88_pred_4 = _3800 * _3583.y;
                                frontier_phi_88_pred_5 = _3800 * _3583.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3809 = frontier_phi_88_pred;
                            _3808 = frontier_phi_88_pred_1;
                            _3807 = frontier_phi_88_pred_2;
                            _3806 = frontier_phi_88_pred_3;
                            _3805 = frontier_phi_88_pred_4;
                            _3804 = frontier_phi_88_pred_5;
                            _3513 = _3807 + _3526;
                            _3514 = _3808 + _3527;
                            _3515 = _3809 + _3528;
                            _3510 = _3804 + _3523;
                            _3511 = _3805 + _3524;
                            _3512 = _3806 + _3525;
                            if (_3530 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3523 = _3510;
                                _3524 = _3511;
                                _3525 = _3512;
                                _3526 = _3513;
                                _3527 = _3514;
                                _3528 = _3515;
                                _3529 = _3530;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3515;
                        frontier_phi_82_pred_1 = _3514;
                        frontier_phi_82_pred_2 = _3513;
                        frontier_phi_82_pred_3 = _3512;
                        frontier_phi_82_pred_4 = _3511;
                        frontier_phi_82_pred_5 = _3510;
                    }
                    _3153 = frontier_phi_82_pred;
                    _3151 = frontier_phi_82_pred_1;
                    _3149 = frontier_phi_82_pred_2;
                    _3147 = frontier_phi_82_pred_3;
                    _3145 = frontier_phi_82_pred_4;
                    _3143 = frontier_phi_82_pred_5;
                    uint _3309 = _3308 + 1u;
                    if (_3309 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3302 = _3143;
                        _3303 = _3145;
                        _3304 = _3147;
                        _3305 = _3149;
                        _3306 = _3151;
                        _3307 = _3153;
                        _3308 = _3309;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3149;
                frontier_phi_63_64_ladder_1 = _3153;
                frontier_phi_63_64_ladder_2 = _3151;
                frontier_phi_63_64_ladder_3 = _3147;
                frontier_phi_63_64_ladder_4 = _3145;
                frontier_phi_63_64_ladder_5 = _3143;
            }
            else
            {
                frontier_phi_63_64_ladder = _3027;
                frontier_phi_63_64_ladder_1 = _3031;
                frontier_phi_63_64_ladder_2 = _3029;
                frontier_phi_63_64_ladder_3 = _3025;
                frontier_phi_63_64_ladder_4 = _3023;
                frontier_phi_63_64_ladder_5 = _3021;
            }
            _3142 = frontier_phi_63_64_ladder_5;
            _3144 = frontier_phi_63_64_ladder_4;
            _3146 = frontier_phi_63_64_ladder_3;
            _3148 = frontier_phi_63_64_ladder;
            _3150 = frontier_phi_63_64_ladder_2;
            _3152 = frontier_phi_63_64_ladder_1;
        }
        float _3157 = isnan(1.0) ? _890 : (isnan(_890) ? 1.0 : min(_890, 1.0));
        _2954 = (_3157 * _3148) + _2466;
        _2956 = (_3157 * _3150) + _2468;
        _2958 = (_3157 * _3152) + _2470;
        _2960 = ((_3142 * _875) * _3157) + _2804;
        _2962 = ((_3144 * _877) * _3157) + _2806;
        _2964 = ((_3146 * _878) * _3157) + _2808;
    }
    else
    {
        _2954 = _2466;
        _2956 = _2468;
        _2958 = _2470;
        _2960 = _2804;
        _2962 = _2806;
        _2964 = _2808;
    }
    float _4944 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _4955 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
    float _4966 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
    float _2981 = ((isnan(1.0) ? _4944 : (isnan(_4944) ? 1.0 : min(_4944, 1.0))) * (_2954 + ((isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0))) * _890))) + ((_2960 + ((isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0))) * _1732)) * cbPerFrame._m0[3u].x);
    float _2982 = ((isnan(1.0) ? _4955 : (isnan(_4955) ? 1.0 : min(_4955, 1.0))) * (_2956 + ((isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0))) * _890))) + ((_2962 + ((isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0))) * _1732)) * cbPerFrame._m0[3u].x);
    float _2983 = ((isnan(1.0) ? _4966 : (isnan(_4966) ? 1.0 : min(_4966, 1.0))) * (_2958 + ((isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0))) * _890))) + ((_2964 + ((isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0))) * _1732)) * cbPerFrame._m0[3u].x);
    uint _2984 = _850 + 6u;
    float _2992 = _812 / cbSceneParam._m0[86u].x;
    float _2993 = _813 / cbSceneParam._m0[86u].y;
    vec4 _3007 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2992, _2993, (log2((isnan(cbSceneParam._m0[77u].w) ? _735 : (isnan(_735) ? cbSceneParam._m0[77u].w : min(_735, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3009 = _3007.x;
    float _3010 = _3007.y;
    float _3011 = _3007.z;
    float _3012 = _3007.w;
    float _3084;
    float _3086;
    float _3088;
    float _3090;
    if (_735 > cbSceneParam._m0[78u].w)
    {
        float _3046 = isnan(_735) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _735 : min(cbSceneParam._m0[80u].w, _735));
        float _3047 = _3046 / _735;
        float _3058 = _3047 * _785;
        float _3059 = _786 * _3047;
        float _3060 = (-0.0) - _3059;
        float _3062 = _3047 * _787;
        float _3064 = (cbSceneParam._m0[77u].w * _3060) / _3046;
        float _3065 = _3064 + cbSceneParam._m0[79u].w;
        float _3066 = cbSceneParam._m0[79u].w - _3059;
        float _3072 = sqrt(((_3058 * _3058) + (_3059 * _3059)) + (_3062 * _3062));
        float _3075 = (1.0 - (cbSceneParam._m0[77u].w / _3046)) * _3072;
        float _3080 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3082 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3259;
        if (abs((_3060 - _3064) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3259 = ((((_3065 > 0.0) ? exp2(_3080 * _3065) : (2.0 - exp2(_3082 * _3065))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3075;
        }
        else
        {
            float _3203 = 1.0 / cbSceneParam._m0[80u].x;
            float _3204 = isnan(_3066) ? _3065 : (isnan(_3065) ? _3066 : max(_3065, _3066));
            float _3205 = isnan(_3066) ? _3065 : (isnan(_3065) ? _3066 : min(_3065, _3066));
            float _3214 = isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : min(_3204, 0.0));
            float _3215 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : min(_3205, 0.0));
            _3259 = ((abs(_3072 / _3060) * cbSceneParam._m0[80u].y) * ((((_3214 - _3215) * 2.0) - ((exp2(_3080 * (isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0)))) - exp2(_3080 * (isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0))))) * _3203)) - ((exp2(_3082 * _3214) - exp2(_3082 * _3215)) * _3203))) + (_3075 * cbSceneParam._m0[80u].z);
        }
        vec4 _3261 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2992, _2993, 1.0), 0.0);
        float _3270 = exp2((_3259 * (-1.44269502162933349609375)) * (1.0 - _3261.w));
        float _3271 = log2(_3270);
        float _3287 = log2(_3012);
        _3084 = (exp2(_3287 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3271 * cbSceneParam._m0[78u].x)) * _3261.x) / cbSceneParam._m0[78u].x)) + _3009;
        _3086 = (exp2(_3287 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3271 * cbSceneParam._m0[78u].y)) * _3261.y) / cbSceneParam._m0[78u].y)) + _3010;
        _3088 = (exp2(_3287 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3271 * cbSceneParam._m0[78u].z)) * _3261.z) / cbSceneParam._m0[78u].z)) + _3011;
        _3090 = _3270 * _3012;
    }
    else
    {
        _3084 = _3009;
        _3086 = _3010;
        _3088 = _3011;
        _3090 = _3012;
    }
    bool _3297;
    vec4 _3100;
    vec4 _3122;
    float _3124;
    float _3128;
    float _3129;
    float _3130;
    float _3131;
    bool _3141;
    for (;;)
    {
        _3100 = cbMatDynParam._m0[0u];
        float _3102 = roundEven(_3100.y);
        bool _3103 = _3102 == 3.0;
        float _3104 = log2(_3090);
        float _3111 = exp2(_3104 * cbSceneParam._m0[78u].x) * _2981;
        float _3112 = exp2(_3104 * cbSceneParam._m0[78u].y) * _2982;
        float _3113 = exp2(_3104 * cbSceneParam._m0[78u].z) * _2983;
        float _3120 = _801 + (-0.5);
        _3122 = cbMtdParam._m0[1u];
        _3124 = _3122.y * _3120;
        float _3127 = (_3102 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3128 = _3127 * (_3103 ? _3111 : (_3111 + (cbSceneParam._m0[72u].w * _3084)));
        _3129 = _3127 * (_3103 ? _3112 : (_3112 + (cbSceneParam._m0[72u].w * _3086)));
        _3130 = _3127 * (_3103 ? _3113 : (_3113 + (cbSceneParam._m0[72u].w * _3088)));
        _3131 = _3120 * 0.999000012874603271484375;
        _3141 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3141)
        {
            if ((cbInstanceData._m0[_850 + 7u].x + _3131) < 0.5)
            {
                _3297 = true;
                break;
            }
        }
        uint _3238 = _851 + uint(_3100.w);
        if ((cbInstanceData._m0[_3238].w < 1.0) && ((cbInstanceData._m0[_3238].w + _3131) < 0.5))
        {
            _3297 = true;
            break;
        }
        if ((_3124 + 1.0) < _3122.x)
        {
            _3297 = true;
            break;
        }
        _3297 = false;
        break;
    }
    float _3501;
    if (_3297)
    {
        discard_state = true;
        _3501 = 0.0;
    }
    else
    {
        _3501 = cbInstanceData._m0[_2984].w;
    }
    SV_Target.x = _3128;
    SV_Target.y = _3129;
    SV_Target.z = _3130;
    SV_Target.w = _3501;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2984].w;
    discard_exit();
}


