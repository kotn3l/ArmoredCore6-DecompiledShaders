#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1230;
float _3614;
float _3615;
float _3616;
float _3617;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _246 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _252 = _246.x * cbMtdParam._m0[10u].x;
    float _253 = _246.y * cbMtdParam._m0[10u].y;
    float _254 = _246.z * cbMtdParam._m0[10u].z;
    vec4 _272 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _322 = cbMtdParam._m0[18u].y * texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x;
    float _333 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].x * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].y * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _322)) + 1.0;
    float _3626 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _334 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
    float _341 = (_334 * ((_272.x * cbMtdParam._m0[11u].x) - _252)) + _252;
    float _342 = (_334 * ((_272.y * cbMtdParam._m0[11u].y) - _253)) + _253;
    float _343 = (_334 * ((_272.z * cbMtdParam._m0[11u].z) - _254)) + _254;
    vec4 _361 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _388 = ((cbMtdParam._m0[17u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _322)) + 1.0;
    float _3637 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _389 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
    float _396 = (_389 * ((_361.x * cbMtdParam._m0[12u].x) - _341)) + _341;
    float _397 = (_389 * ((_361.y * cbMtdParam._m0[12u].y) - _342)) + _342;
    float _398 = (_389 * ((_361.z * cbMtdParam._m0[12u].z) - _343)) + _343;
    vec4 _415 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _440 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[18u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[18u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _322)) + 1.0;
    float _3648 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _441 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
    float _448 = (_441 * ((_415.x * cbMtdParam._m0[13u].x) - _396)) + _396;
    float _449 = (_441 * ((_415.y * cbMtdParam._m0[13u].y) - _397)) + _397;
    float _450 = (_441 * ((_415.z * cbMtdParam._m0[13u].z) - _398)) + _398;
    vec4 _463 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _465 = _463.x;
    float _483 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _465) * _334) + _465;
    float _501 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _483) * _389) + _483;
    float _518 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _501) * _441) + _501;
    vec4 _531 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _533 = _531.x;
    float _534 = _531.y;
    float _537 = cbMtdParam._m0[17u].y * _531.z;
    vec4 _549 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _558 = (((cbMtdParam._m0[17u].x * _549.z) - _537) * _334) + _537;
    vec4 _571 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _583 = (((cbMtdParam._m0[16u].w * _571.z) - _558) * _389) + _558;
    vec4 _596 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _605 = (((cbMtdParam._m0[16u].z * _596.z) - _583) * _441) + _583;
    float _610 = ((_549.x - _533) * _334) + _533;
    float _611 = ((_549.y - _534) * _334) + _534;
    float _616 = ((_571.x - _610) * _389) + _610;
    float _617 = ((_571.y - _611) * _389) + _611;
    float _626 = ((((_596.x - _616) * _441) + _616) * 2.0) + (-1.0);
    float _628 = ((((_596.y - _617) * _441) + _617) * 2.0) + (-1.0);
    float _629 = dot(vec2(_626, _628), vec2(_626, _628));
    float _3659 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _634 = sqrt(1.0 - (isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0))));
    float _637 = fma(_634, _216 * NORMAL.x, fma(_628, _223 * TANGENT.x, (_209 * _201) * _626));
    float _640 = fma(_634, _216 * NORMAL.y, fma(_628, _223 * TANGENT.y, (_209 * _202) * _626));
    float _643 = fma(_634, _216 * NORMAL.z, fma(_628, _223 * TANGENT.z, (_209 * _203) * _626));
    float _647 = inversesqrt(dot(vec3(_637, _640, _643), vec3(_637, _640, _643)));
    float _648 = _647 * _637;
    float _649 = _647 * _640;
    float _650 = _647 * _643;
    float _3670 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _651 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
    float _3681 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _3692 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _3703 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _3714 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _655 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
    float _671 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _711 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _721 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _711);
    float _722 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _711);
    float _723 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _711);
    float _727 = inversesqrt(dot(vec3(_721, _722, _723), vec3(_721, _722, _723)));
    float _728 = _721 * _727;
    float _729 = _722 * _727;
    float _730 = _723 * _727;
    vec4 _735 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _737 = _735.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _909 = sqrt(((_721 * _721) + (_722 * _722)) + (_723 * _723));
        float _915 = (cbMatDynParam._m0[5u].x * _909) + cbMatDynParam._m0[5u].y;
        float _3725 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _916 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _920 = (cbMatDynParam._m0[5u].z * _909) + cbMatDynParam._m0[5u].w;
        float _3736 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))) - _916)) + _916) < ((_737 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _748 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _749 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _767 = fma(_650, cbSceneParam._m0[5u].z, fma(_649, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _648));
    float _770 = fma(_650, cbSceneParam._m0[6u].z, fma(_649, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _648));
    float _773 = fma(_650, cbSceneParam._m0[7u].z, fma(_649, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _648));
    uint _786 = uint(roundEven(NORMAL.w)) * 13u;
    uint _787 = _786 + 9u;
    uint _788 = _787 + uint(cbMatDynParam._m0[0u].w);
    float _794 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0)))) * cbInstanceData._m0[_788].x;
    float _795 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0)))) * cbInstanceData._m0[_788].y;
    float _796 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0)))) * cbInstanceData._m0[_788].z;
    float _3747 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
    float _797 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
    float _3758 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _798 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
    float _3769 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
    float _799 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
    float _800 = 1.0 - _655;
    float _801 = _797 * _800;
    float _802 = _798 * _800;
    float _803 = _799 * _800;
    float _808 = (_797 + (-0.039999999105930328369140625)) * _655;
    float _809 = (_798 + (-0.039999999105930328369140625)) * _655;
    float _810 = (_799 + (-0.039999999105930328369140625)) * _655;
    float _811 = _808 + 0.039999999105930328369140625;
    float _813 = _809 + 0.039999999105930328369140625;
    float _814 = _810 + 0.039999999105930328369140625;
    vec4 _823 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _748, cbSceneParam._m0[86u].y * _749));
    float _826 = _823.x * TEXCOORD_5.w;
    float _827 = dot(vec3(_648, _649, _650), vec3(_728, _729, _730));
    float _830 = _827 * 2.0;
    float _834 = (_830 * _648) - _728;
    float _835 = (_830 * _649) - _729;
    float _836 = (_830 * _650) - _730;
    float _840 = abs(dot(vec3(_728, _729, _730), vec3(_648, _649, _650)));
    float _3780 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _842 = sqrt(_651);
    float _855 = exp2((_842 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_842 * 3.0));
    float _861 = (1.0 - _855) * ((_842 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _862 = _855 * _842;
    float _890 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _894 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _898 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1229;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _954 = fma(_898, cbModelParam._m0[26u].z, fma(_894, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _890));
        float _958 = fma(_898, cbModelParam._m0[27u].z, fma(_894, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _890));
        float _962 = fma(_898, cbModelParam._m0[28u].z, fma(_894, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _890));
        float _987 = _890 + _648;
        float _988 = _894 + _649;
        float _989 = _898 + _650;
        float _999 = fma(_989, cbModelParam._m0[26u].z, fma(_988, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _987)) - _954;
        float _1000 = fma(_989, cbModelParam._m0[27u].z, fma(_988, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _987)) - _958;
        float _1001 = fma(_989, cbModelParam._m0[28u].z, fma(_988, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _987)) - _962;
        float _1005 = inversesqrt(dot(vec3(_999, _1000, _1001), vec3(_999, _1000, _1001)));
        float _1018 = ((_1005 * _999) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_954 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1019 = ((_1005 * _1000) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_958 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1020 = ((_1005 * _1001) / cbModelParam._m0[34u].z) + ((((((_962 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1023 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1018, _1019, _1020), 0.0);
        vec4 _1030 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1018, _1019, _1020), 0.0);
        vec4 _1037 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1018, _1019, _1020), 0.0);
        vec4 _1044 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1018, _1019, _1020), 0.0);
        float _1057 = exp2((_1023.w + (-0.5)) * 20.0) * 2.0;
        float _1058 = _1057 * (_1023.x + (-0.5));
        float _1059 = _1057 * (_1023.y + (-0.5));
        float _1060 = _1057 * (_1023.z + (-0.5));
        float _1067 = exp2((_1030.w + (-0.5)) * 20.0) * 2.0;
        float _1068 = _1067 * (_1030.x + (-0.5));
        float _1069 = _1067 * (_1030.y + (-0.5));
        float _1070 = _1067 * (_1030.z + (-0.5));
        float _1077 = exp2((_1037.w + (-0.5)) * 20.0) * 2.0;
        float _1078 = _1077 * (_1037.x + (-0.5));
        float _1079 = _1077 * (_1037.y + (-0.5));
        float _1080 = _1077 * (_1037.z + (-0.5));
        float _1087 = exp2((_1044.w + (-0.5)) * 20.0) * 2.0;
        float _1088 = _1087 * (_1044.x + (-0.5));
        float _1089 = _1087 * (_1044.y + (-0.5));
        float _1090 = _1087 * (_1044.z + (-0.5));
        float _1091 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1092 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1093 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1094 = _1058 * 0.5;
        float _1095 = _1068 * 0.5;
        float _1096 = _1078 * 0.5;
        float _1097 = dot(vec3(_1094, _1095, _1096), vec3(_1094, _1095, _1096));
        float _1102 = (_1097 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1097);
        float _1111 = (dot(vec3(_648, _649, _650), vec3(_1102 * _1094, _1102 * _1095, _1102 * _1096)) + 1.0) * 0.5;
        float _3806 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1121 = sqrt(((_1095 * _1095) + (_1094 * _1094)) + (_1096 * _1096)) / (_1091 + 9.9999997473787516355514526367188e-06);
        float _3817 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1123 = _1122 * 2.0;
        float _1127 = (1.0 - _1122) / (_1122 + 1.0);
        float _3828 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
        float _1137 = ((((1.0 - _1128) * (_1123 + 2.0)) * exp2(log2(isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0))) * (_1123 + 1.0))) + _1128) * _1091;
        float _1138 = _1059 * 0.5;
        float _1139 = _1069 * 0.5;
        float _1140 = _1079 * 0.5;
        float _1141 = dot(vec3(_1138, _1139, _1140), vec3(_1138, _1139, _1140));
        float _1146 = (_1141 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1141);
        float _1154 = (dot(vec3(_648, _649, _650), vec3(_1146 * _1138, _1146 * _1139, _1146 * _1140)) + 1.0) * 0.5;
        float _3839 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1163 = sqrt(((_1139 * _1139) + (_1138 * _1138)) + (_1140 * _1140)) / (_1092 + 9.9999997473787516355514526367188e-06);
        float _3850 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1165 = _1164 * 2.0;
        float _1169 = (1.0 - _1164) / (_1164 + 1.0);
        float _3861 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
        float _1179 = ((((1.0 - _1170) * (_1165 + 2.0)) * exp2(log2(isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))) * (_1165 + 1.0))) + _1170) * _1092;
        float _1180 = _1060 * 0.5;
        float _1181 = _1070 * 0.5;
        float _1182 = _1080 * 0.5;
        float _1183 = dot(vec3(_1180, _1181, _1182), vec3(_1180, _1181, _1182));
        float _1188 = (_1183 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1183);
        float _1196 = (dot(vec3(_648, _649, _650), vec3(_1188 * _1180, _1188 * _1181, _1188 * _1182)) + 1.0) * 0.5;
        float _3872 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1205 = sqrt(((_1181 * _1181) + (_1180 * _1180)) + (_1182 * _1182)) / (_1093 + 9.9999997473787516355514526367188e-06);
        float _3883 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1207 = _1206 * 2.0;
        float _1211 = (1.0 - _1206) / (_1206 + 1.0);
        float _3894 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1221 = ((((1.0 - _1212) * (_1207 + 2.0)) * exp2(log2(isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * (_1207 + 1.0))) + _1212) * _1093;
        _1229 = _1060;
        _1231 = _1059;
        _1232 = _1058;
        _1233 = _1070;
        _1234 = _1069;
        _1235 = _1068;
        _1236 = _1080;
        _1237 = _1079;
        _1238 = _1078;
        _1239 = _1093;
        _1240 = _1092;
        _1241 = _1091;
        _1242 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0)));
        _1243 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0)));
        _1244 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0)));
    }
    else
    {
        _1229 = _1230;
        _1231 = _1230;
        _1232 = _1230;
        _1233 = _1230;
        _1234 = _1230;
        _1235 = _1230;
        _1236 = _1230;
        _1237 = _1230;
        _1238 = _1230;
        _1239 = _1230;
        _1240 = _1230;
        _1241 = _1230;
        _1242 = 0.0;
        _1243 = 0.0;
        _1244 = 0.0;
    }
    float _1542;
    float _1543;
    float _1544;
    float _1545;
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1273 = fma(_898, cbModelParam._m0[30u].z, fma(_894, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _890));
        float _1277 = fma(_898, cbModelParam._m0[31u].z, fma(_894, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _890));
        float _1281 = fma(_898, cbModelParam._m0[32u].z, fma(_894, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _890));
        float _1304 = _890 + _648;
        float _1305 = _894 + _649;
        float _1306 = _898 + _650;
        float _1316 = fma(_1306, cbModelParam._m0[30u].z, fma(_1305, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1304)) - _1273;
        float _1317 = fma(_1306, cbModelParam._m0[31u].z, fma(_1305, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1304)) - _1277;
        float _1318 = fma(_1306, cbModelParam._m0[32u].z, fma(_1305, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1304)) - _1281;
        float _1322 = inversesqrt(dot(vec3(_1316, _1317, _1318), vec3(_1316, _1317, _1318)));
        float _1335 = ((_1322 * _1316) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1273 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1336 = ((_1322 * _1317) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1277 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1337 = ((_1322 * _1318) / cbModelParam._m0[35u].z) + ((((((_1281 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1339 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1335, _1336, _1337), 0.0);
        vec4 _1346 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1335, _1336, _1337), 0.0);
        vec4 _1353 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1335, _1336, _1337), 0.0);
        vec4 _1360 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1335, _1336, _1337), 0.0);
        float _1372 = exp2((_1339.w + (-0.5)) * 20.0) * 2.0;
        float _1373 = _1372 * (_1339.x + (-0.5));
        float _1374 = _1372 * (_1339.y + (-0.5));
        float _1375 = _1372 * (_1339.z + (-0.5));
        float _1382 = exp2((_1346.w + (-0.5)) * 20.0) * 2.0;
        float _1383 = _1382 * (_1346.x + (-0.5));
        float _1384 = _1382 * (_1346.y + (-0.5));
        float _1385 = _1382 * (_1346.z + (-0.5));
        float _1392 = exp2((_1353.w + (-0.5)) * 20.0) * 2.0;
        float _1393 = _1392 * (_1353.x + (-0.5));
        float _1394 = _1392 * (_1353.y + (-0.5));
        float _1395 = _1392 * (_1353.z + (-0.5));
        float _1402 = exp2((_1360.w + (-0.5)) * 20.0) * 2.0;
        float _1403 = _1402 * (_1360.x + (-0.5));
        float _1404 = _1402 * (_1360.y + (-0.5));
        float _1405 = _1402 * (_1360.z + (-0.5));
        float _1406 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1407 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1408 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
        float _1409 = _1373 * 0.5;
        float _1410 = _1383 * 0.5;
        float _1411 = _1393 * 0.5;
        float _1412 = dot(vec3(_1409, _1410, _1411), vec3(_1409, _1410, _1411));
        float _1417 = (_1412 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1412);
        float _1425 = (dot(vec3(_648, _649, _650), vec3(_1417 * _1409, _1417 * _1410, _1417 * _1411)) + 1.0) * 0.5;
        float _3935 = isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0));
        float _1434 = sqrt(((_1410 * _1410) + (_1409 * _1409)) + (_1411 * _1411)) / (_1406 + 9.9999997473787516355514526367188e-06);
        float _3946 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1436 = _1435 * 2.0;
        float _1440 = (1.0 - _1435) / (_1435 + 1.0);
        float _3957 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1441 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
        float _1450 = ((((1.0 - _1441) * (_1436 + 2.0)) * exp2(log2(isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0))) * (_1436 + 1.0))) + _1441) * _1406;
        float _1451 = _1374 * 0.5;
        float _1452 = _1384 * 0.5;
        float _1453 = _1394 * 0.5;
        float _1454 = dot(vec3(_1451, _1452, _1453), vec3(_1451, _1452, _1453));
        float _1459 = (_1454 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1454);
        float _1467 = (dot(vec3(_648, _649, _650), vec3(_1459 * _1451, _1459 * _1452, _1459 * _1453)) + 1.0) * 0.5;
        float _3968 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1476 = sqrt(((_1452 * _1452) + (_1451 * _1451)) + (_1453 * _1453)) / (_1407 + 9.9999997473787516355514526367188e-06);
        float _3979 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1477 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1478 = _1477 * 2.0;
        float _1482 = (1.0 - _1477) / (_1477 + 1.0);
        float _3990 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1483 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
        float _1492 = ((((1.0 - _1483) * (_1478 + 2.0)) * exp2(log2(isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0))) * (_1478 + 1.0))) + _1483) * _1407;
        float _1493 = _1375 * 0.5;
        float _1494 = _1385 * 0.5;
        float _1495 = _1395 * 0.5;
        float _1496 = dot(vec3(_1493, _1494, _1495), vec3(_1493, _1494, _1495));
        float _1501 = (_1496 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1496);
        float _1509 = (dot(vec3(_648, _649, _650), vec3(_1501 * _1493, _1501 * _1494, _1501 * _1495)) + 1.0) * 0.5;
        float _4001 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
        float _1518 = sqrt(((_1494 * _1494) + (_1493 * _1493)) + (_1495 * _1495)) / (_1408 + 9.9999997473787516355514526367188e-06);
        float _4012 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1519 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1520 = _1519 * 2.0;
        float _1524 = (1.0 - _1519) / (_1519 + 1.0);
        float _4023 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1525 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
        float _1534 = ((((1.0 - _1525) * (_1520 + 2.0)) * exp2(log2(isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * (_1520 + 1.0))) + _1525) * _1408;
        _1542 = _1375;
        _1543 = _1374;
        _1544 = _1373;
        _1545 = _1385;
        _1546 = _1384;
        _1547 = _1383;
        _1548 = _1395;
        _1549 = _1394;
        _1550 = _1393;
        _1551 = _1408;
        _1552 = _1407;
        _1553 = _1406;
        _1554 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0)));
        _1555 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0)));
        _1556 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0)));
    }
    else
    {
        _1542 = _1230;
        _1543 = _1230;
        _1544 = _1230;
        _1545 = _1230;
        _1546 = _1230;
        _1547 = _1230;
        _1548 = _1230;
        _1549 = _1230;
        _1550 = _1230;
        _1551 = _1230;
        _1552 = _1230;
        _1553 = _1230;
        _1554 = 0.0;
        _1555 = 0.0;
        _1556 = 0.0;
    }
    float _1566 = (cbModelParam._m0[1u].x * (_1554 - _1242)) + _1242;
    float _1567 = (cbModelParam._m0[1u].x * (_1555 - _1243)) + _1243;
    float _1568 = (cbModelParam._m0[1u].x * (_1556 - _1244)) + _1244;
    float _1589 = fma(_1568, cbSceneParam._m0[89u].z, fma(_1567, cbSceneParam._m0[89u].y, _1566 * cbSceneParam._m0[89u].x));
    float _1592 = fma(_1568, cbSceneParam._m0[90u].z, fma(_1567, cbSceneParam._m0[90u].y, _1566 * cbSceneParam._m0[90u].x));
    float _1595 = fma(_1568, cbSceneParam._m0[91u].z, fma(_1567, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1566));
    float _1610 = _834 * 0.5;
    float _1611 = _835 * 0.5;
    float _1612 = _836 * 0.5;
    float _1613 = dot(vec4(_1610, _1611, _1612, 1.0), vec4(_1544, _1547, _1550, _1553));
    float _1616 = dot(vec4(_1610, _1611, _1612, 1.0), vec4(_1543, _1546, _1549, _1552));
    float _1619 = dot(vec4(_1610, _1611, _1612, 1.0), vec4(_1542, _1545, _1548, _1551));
    float _1653;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1626 = dot(vec4(_1610, _1611, _1612, 1.0), vec4(_1229, _1233, _1236, _1239));
        float _1630 = dot(vec4(_1610, _1611, _1612, 1.0), vec4(_1231, _1234, _1237, _1240));
        float _1634 = dot(vec4(_1610, _1611, _1612, 1.0), vec4(_1232, _1235, _1238, _1241));
        float _1641 = dot(vec4(cbModelParam._m0[39u]), vec4(_1610, _1611, _1612, 1.0));
        _1653 = dot(vec3(isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0)), isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0)), isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1641) ? 0.0 : (isnan(0.0) ? _1641 : max(0.0, _1641))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1653 = 1.0;
    }
    float _1664;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1655 = dot(vec4(cbModelParam._m0[40u]), vec4(_1610, _1611, _1612, 1.0));
        _1664 = dot(vec3(isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0)), isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0)), isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1655) ? 0.0 : (isnan(0.0) ? _1655 : max(0.0, _1655))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1664 = 1.0;
    }
    float _1668 = (_1664 * cbModelParam._m0[1u].x) + (_1653 * (1.0 - cbModelParam._m0[1u].x));
    float _1678 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _651);
    float _1679 = isnan(_1678) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1678 : min(cbModelParam._m0[25u].z, _1678));
    float _1759;
    float _1761;
    float _1763;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1726 = fma(_898, cbModelParam._m0[13u].z, fma(_894, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _890)) + cbModelParam._m0[13u].w;
        float _1730 = fma(_898, cbModelParam._m0[14u].z, fma(_894, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _890)) + cbModelParam._m0[14u].w;
        float _1734 = fma(_898, cbModelParam._m0[15u].z, fma(_894, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _890)) + cbModelParam._m0[15u].w;
        float _1737 = fma(_836, cbModelParam._m0[13u].z, fma(_835, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _834));
        float _1740 = fma(_836, cbModelParam._m0[14u].z, fma(_835, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _834));
        float _1743 = fma(_836, cbModelParam._m0[15u].z, fma(_835, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _834));
        float _1771;
        if (_1737 > 0.0)
        {
            _1771 = abs((1.0 - _1726) / _1737);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1737 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1726 + 1.0) / _1737);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1771 = frontier_phi_17_15_ladder;
        }
        float _1976;
        if (_1740 > 0.0)
        {
            _1976 = abs((1.0 - _1730) / _1740);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1740 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1730 + 1.0) / _1740);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1976 = frontier_phi_26_22_ladder;
        }
        float _2230;
        if (_1743 > 0.0)
        {
            _2230 = abs((1.0 - _1734) / _1743);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1743 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1734 + 1.0) / _1743);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2230 = frontier_phi_38_33_ladder;
        }
        float _2232 = isnan(_1976) ? _1771 : (isnan(_1771) ? _1976 : min(_1771, _1976));
        float _2233 = isnan(_2230) ? _2232 : (isnan(_2232) ? _2230 : min(_2232, _2230));
        float _2237 = (_2233 * _1737) + _1726;
        float _2238 = (_2233 * _1740) + _1730;
        float _2239 = (_2233 * _1743) + _1734;
        float _2240 = _2233 * 9.9999997473787516355514526367188e-05;
        float _2242 = (-1.0) - _2240;
        float _2244 = _2240 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2239 > _2244) || ((_2239 < _2242) || ((_2238 > _2244) || ((_2238 < _2242) || ((_2237 < _2242) || (_2237 > _2244))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2367 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2239, cbModelParam._m0[9u].z, fma(_2238, cbModelParam._m0[9u].y, _2237 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2239, cbModelParam._m0[10u].z, fma(_2238, cbModelParam._m0[10u].y, _2237 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2239, cbModelParam._m0[11u].z, fma(_2238, cbModelParam._m0[11u].y, _2237 * cbModelParam._m0[11u].x))), _1679);
            frontier_phi_16_38_ladder = _2367.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2367.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2367.x * cbModelParam._m0[1u].y;
        }
        _1759 = frontier_phi_16_38_ladder_2;
        _1761 = frontier_phi_16_38_ladder_1;
        _1763 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1747 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_834, _835, _836), _1679);
        _1759 = _1747.x * cbModelParam._m0[1u].y;
        _1761 = _1747.y * cbModelParam._m0[1u].y;
        _1763 = _1747.z * cbModelParam._m0[1u].y;
    }
    float _1767 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _651);
    float _1768 = isnan(_1767) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1767 : min(cbModelParam._m0[25u].w, _1767));
    float _1859;
    float _1861;
    float _1863;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1823 = fma(_898, cbModelParam._m0[21u].z, fma(_894, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _890)) + cbModelParam._m0[21u].w;
        float _1827 = fma(_898, cbModelParam._m0[22u].z, fma(_894, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _890)) + cbModelParam._m0[22u].w;
        float _1831 = fma(_898, cbModelParam._m0[23u].z, fma(_894, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _890)) + cbModelParam._m0[23u].w;
        float _1834 = fma(_836, cbModelParam._m0[21u].z, fma(_835, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _834));
        float _1837 = fma(_836, cbModelParam._m0[22u].z, fma(_835, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _834));
        float _1840 = fma(_836, cbModelParam._m0[23u].z, fma(_835, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _834));
        float _1981;
        if (_1834 > 0.0)
        {
            _1981 = abs((1.0 - _1823) / _1834);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1834 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1823 + 1.0) / _1834);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1981 = frontier_phi_28_24_ladder;
        }
        float _2257;
        if (_1837 > 0.0)
        {
            _2257 = abs((1.0 - _1827) / _1837);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1837 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1827 + 1.0) / _1837);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2257 = frontier_phi_40_35_ladder;
        }
        float _2470;
        if (_1840 > 0.0)
        {
            _2470 = abs((1.0 - _1831) / _1840);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1840 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1831 + 1.0) / _1840);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2470 = frontier_phi_49_46_ladder;
        }
        float _2472 = isnan(_2257) ? _1981 : (isnan(_1981) ? _2257 : min(_1981, _2257));
        float _2473 = isnan(_2470) ? _2472 : (isnan(_2472) ? _2470 : min(_2472, _2470));
        float _2477 = (_2473 * _1834) + _1823;
        float _2478 = (_2473 * _1837) + _1827;
        float _2479 = (_2473 * _1840) + _1831;
        float _2480 = _2473 * 9.9999997473787516355514526367188e-05;
        float _2481 = (-1.0) - _2480;
        float _2483 = _2480 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2479 > _2483) || ((_2479 < _2481) || ((_2478 > _2483) || ((_2478 < _2481) || ((_2477 < _2481) || (_2477 > _2483))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2678 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2479, cbModelParam._m0[17u].z, fma(_2478, cbModelParam._m0[17u].y, _2477 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2479, cbModelParam._m0[18u].z, fma(_2478, cbModelParam._m0[18u].y, _2477 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2479, cbModelParam._m0[19u].z, fma(_2478, cbModelParam._m0[19u].y, _2477 * cbModelParam._m0[19u].x))), _1768);
            frontier_phi_25_49_ladder = _2678.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2678.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2678.x * cbModelParam._m0[1u].z;
        }
        _1859 = frontier_phi_25_49_ladder_2;
        _1861 = frontier_phi_25_49_ladder_1;
        _1863 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1843 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_834, _835, _836), _1768);
        _1859 = _1843.x * cbModelParam._m0[1u].z;
        _1861 = _1843.y * cbModelParam._m0[1u].z;
        _1863 = _1843.z * cbModelParam._m0[1u].z;
    }
    float _1876 = (((_861 * _811) + _862) * _826) * ((cbModelParam._m0[1u].w * (_1859 - _1759)) + _1759);
    float _1878 = (((_861 * _813) + _862) * _826) * ((cbModelParam._m0[1u].w * (_1861 - _1761)) + _1761);
    float _1880 = (((_861 * _814) + _862) * _826) * ((cbModelParam._m0[1u].w * (_1863 - _1763)) + _1763);
    float _1883 = fma(_1880, cbSceneParam._m0[89u].z, fma(_1878, cbSceneParam._m0[89u].y, _1876 * cbSceneParam._m0[89u].x));
    float _1886 = fma(_1880, cbSceneParam._m0[90u].z, fma(_1878, cbSceneParam._m0[90u].y, _1876 * cbSceneParam._m0[90u].x));
    float _1889 = fma(_1880, cbSceneParam._m0[91u].z, fma(_1878, cbSceneParam._m0[91u].y, _1876 * cbSceneParam._m0[91u].x));
    uvec4 _1899 = floatBitsToUint(cbInstanceData._m0[_786 + 5u]);
    uint _1901 = _1899.x * 14u;
    uint _1902 = _1901 + 13u;
    float _1909 = _826 + (-1.0);
    float _1914 = (cbLight._m0[_1902].x * _1909) + 1.0;
    float _1915 = (cbLight._m0[_1902].y * _1909) + 1.0;
    float _1916 = (cbLight._m0[_1902].z * _1909) + 1.0;
    float _1917 = (cbLight._m0[_1902].w * _1909) + 1.0;
    uint _1918 = _1901 + 5u;
    float _1924 = isnan(1.0) ? _1915 : (isnan(_1915) ? 1.0 : min(_1915, 1.0));
    uint _1928 = _1901 + 4u;
    float _1935 = isnan(1.0) ? _1914 : (isnan(_1914) ? 1.0 : min(_1914, 1.0));
    uint _1939 = _1901 | 1u;
    float _1950 = dot(vec3(cbLight._m0[_1901].xyz), vec3(_648, _649, _650));
    float _1953 = dot(vec3(cbLight._m0[_1939].xyz), vec3(_648, _649, _650));
    float _4159 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
    float _4170 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
    float _1958 = (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * 0.3183098733425140380859375;
    float _1960 = (isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * 0.3183098733425140380859375;
    float _1967 = ((cbLight._m0[_1918].x * _1924) * _1960) + ((cbLight._m0[_1928].x * _1935) * _1958);
    float _1968 = ((_1924 * cbLight._m0[_1918].y) * _1960) + ((_1935 * cbLight._m0[_1928].y) * _1958);
    float _1969 = ((_1924 * cbLight._m0[_1918].z) * _1960) + ((_1935 * cbLight._m0[_1928].z) * _1958);
    uvec4 _1973 = floatBitsToUint(cbLight._m0[_1901 + 12u]);
    bool _1975 = _1973.x == 0u;
    float _1986;
    float _1988;
    float _1990;
    if (_1975)
    {
        _1986 = _1967;
        _1988 = _1968;
        _1990 = _1969;
    }
    else
    {
        uint _1994 = _1901 + 6u;
        float _2010 = (dot(vec3(cbLight._m0[_1901 + 2u].xyz), vec3(_648, _649, _650)) * 0.5) + 0.5;
        float _2011 = _2010 * _2010;
        float _4181 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
        float _2012 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _2013 = isnan(1.0) ? _1916 : (isnan(_1916) ? 1.0 : min(_1916, 1.0));
        _1986 = (((cbLight._m0[_1994].x * 0.3183098733425140380859375) * _2012) * _2013) + _1967;
        _1988 = (((cbLight._m0[_1994].y * 0.3183098733425140380859375) * _2012) * _2013) + _1968;
        _1990 = (((cbLight._m0[_1994].z * 0.3183098733425140380859375) * _2012) * _2013) + _1969;
    }
    bool _1993 = _1973.y == 0u;
    float _2031;
    float _2033;
    float _2035;
    if (_1993)
    {
        _2031 = _1986;
        _2033 = _1988;
        _2035 = _1990;
    }
    else
    {
        uint _2201 = _1901 + 7u;
        float _2217 = (dot(vec3(cbLight._m0[_1901 + 3u].xyz), vec3(_648, _649, _650)) * 0.5) + 0.5;
        float _2218 = _2217 * _2217;
        float _4197 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
        float _2219 = isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0));
        float _2220 = isnan(1.0) ? _1917 : (isnan(_1917) ? 1.0 : min(_1917, 1.0));
        _2031 = (((cbLight._m0[_2201].x * 0.3183098733425140380859375) * _2219) * _2220) + _1986;
        _2033 = (((cbLight._m0[_2201].y * 0.3183098733425140380859375) * _2219) * _2220) + _1988;
        _2035 = (((cbLight._m0[_2201].z * 0.3183098733425140380859375) * _2219) * _2220) + _1990;
    }
    uint _2038 = _1901 + 8u;
    float _2051 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1901].w)) * _651) * 0.949999988079071044921875);
    float _2052 = _2051 * _2051;
    float _2053 = cbLight._m0[_1901].x + _728;
    float _2054 = cbLight._m0[_1901].y + _729;
    float _2055 = cbLight._m0[_1901].z + _730;
    float _2059 = inversesqrt(dot(vec3(_2053, _2054, _2055), vec3(_2053, _2054, _2055)));
    float _2060 = _2059 * _2053;
    float _2061 = _2059 * _2054;
    float _2062 = _2059 * _2055;
    float _2063 = dot(vec3(_648, _649, _650), vec3(cbLight._m0[_1901].xyz));
    float _4213 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _2066 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
    float _4224 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
    float _2067 = isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0));
    float _2068 = dot(vec3(_648, _649, _650), vec3(_2060, _2061, _2062));
    float _4235 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2071 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
    float _2072 = dot(vec3(cbLight._m0[_1901].xyz), vec3(_2060, _2061, _2062));
    float _4246 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _2076 = _2052 * _2052;
    float _2080 = ((_2071 * _2071) * (_2076 + (-1.0))) + 1.0;
    float _2088 = exp2(log2(1.0 - (isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0)))) * 5.0);
    float _2089 = 0.959999978542327880859375 - _808;
    float _2091 = 0.959999978542327880859375 - _809;
    float _2092 = 0.959999978542327880859375 - _810;
    float _2099 = 1.0 - _2052;
    float _2110 = (0.5 / (((_2067 * ((_2066 * _2099) + _2052)) + 9.9999999392252902907785028219223e-09) + (((_2067 * _2099) + _2052) * _2066))) * _2066;
    float _4257 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _2112 = (isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0))) * (_2076 / ((_2080 * _2080) * 3.141590118408203125));
    uint _2123 = _1901 + 9u;
    float _2134 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1939].w)) * _651) * 0.949999988079071044921875);
    float _2135 = _2134 * _2134;
    float _2136 = cbLight._m0[_1939].x + _728;
    float _2137 = cbLight._m0[_1939].y + _729;
    float _2138 = cbLight._m0[_1939].z + _730;
    float _2142 = inversesqrt(dot(vec3(_2136, _2137, _2138), vec3(_2136, _2137, _2138)));
    float _2143 = _2142 * _2136;
    float _2144 = _2142 * _2137;
    float _2145 = _2142 * _2138;
    float _2146 = dot(vec3(_648, _649, _650), vec3(cbLight._m0[_1939].xyz));
    float _4268 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _2149 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
    float _2150 = dot(vec3(_648, _649, _650), vec3(_2143, _2144, _2145));
    float _4279 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2153 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
    float _2154 = dot(vec3(cbLight._m0[_1939].xyz), vec3(_2143, _2144, _2145));
    float _4290 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
    float _2158 = _2135 * _2135;
    float _2162 = ((_2153 * _2153) * (_2158 + (-1.0))) + 1.0;
    float _2169 = exp2(log2(1.0 - (isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0)))) * 5.0);
    float _2176 = 1.0 - _2135;
    float _2186 = (0.5 / (((_2067 * ((_2149 * _2176) + _2135)) + 9.9999999392252902907785028219223e-09) + (((_2067 * _2176) + _2135) * _2149))) * _2149;
    float _4301 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2188 = (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0))) * (_2158 / ((_2162 * _2162) * 3.141590118408203125));
    float _2198 = (((((_2169 * _2089) + _811) * cbLight._m0[_2123].x) * _2188) * _1924) + (((((_2088 * _2089) + _811) * cbLight._m0[_2038].x) * _2112) * _1935);
    float _2199 = (((((_2169 * _2091) + _813) * cbLight._m0[_2123].y) * _2188) * _1924) + (((((_2088 * _2091) + _813) * cbLight._m0[_2038].y) * _2112) * _1935);
    float _2200 = (((((_2169 * _2092) + _814) * cbLight._m0[_2123].z) * _2188) * _1924) + (((((_2088 * _2092) + _814) * cbLight._m0[_2038].z) * _2112) * _1935);
    float _2262;
    float _2264;
    float _2266;
    if (_1975)
    {
        _2262 = _2198;
        _2264 = _2199;
        _2266 = _2200;
    }
    else
    {
        uint _2268 = _1901 + 2u;
        uint _2272 = _1901 + 10u;
        float _2286 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2268].w)) * _651) * 0.949999988079071044921875);
        float _2287 = _2286 * _2286;
        float _2288 = cbLight._m0[_2268].x + _728;
        float _2289 = cbLight._m0[_2268].y + _729;
        float _2290 = cbLight._m0[_2268].z + _730;
        float _2294 = inversesqrt(dot(vec3(_2288, _2289, _2290), vec3(_2288, _2289, _2290)));
        float _2295 = _2294 * _2288;
        float _2296 = _2294 * _2289;
        float _2297 = _2294 * _2290;
        float _2298 = dot(vec3(_648, _649, _650), vec3(cbLight._m0[_2268].xyz));
        float _4312 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
        float _2301 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
        float _2302 = dot(vec3(_648, _649, _650), vec3(_2295, _2296, _2297));
        float _4323 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
        float _2305 = isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0));
        float _2306 = dot(vec3(cbLight._m0[_2268].xyz), vec3(_2295, _2296, _2297));
        float _4334 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
        float _2310 = _2287 * _2287;
        float _2314 = ((_2305 * _2305) * (_2310 + (-1.0))) + 1.0;
        float _2321 = exp2(log2(1.0 - (isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0)))) * 5.0);
        float _2328 = 1.0 - _2287;
        float _2338 = (0.5 / (((_2067 * ((_2301 * _2328) + _2287)) + 9.9999999392252902907785028219223e-09) + (((_2067 * _2328) + _2287) * _2301))) * _2301;
        float _4345 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
        float _2340 = (isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (_2310 / ((_2314 * _2314) * 3.141590118408203125));
        float _2341 = isnan(1.0) ? _1916 : (isnan(_1916) ? 1.0 : min(_1916, 1.0));
        _2262 = (((((_2321 * _2089) + _811) * cbLight._m0[_2272].x) * _2340) * _2341) + _2198;
        _2264 = (((((_2321 * _2091) + _813) * cbLight._m0[_2272].y) * _2340) * _2341) + _2199;
        _2266 = (((((_2321 * _2092) + _814) * cbLight._m0[_2272].z) * _2340) * _2341) + _2200;
    }
    float _2376;
    float _2378;
    float _2380;
    if (_1993)
    {
        _2376 = _2262;
        _2378 = _2264;
        _2380 = _2266;
    }
    else
    {
        uint _2387 = _1901 + 3u;
        uint _2391 = _1901 + 11u;
        float _2405 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2387].w)) * _651) * 0.949999988079071044921875);
        float _2406 = _2405 * _2405;
        float _2407 = cbLight._m0[_2387].x + _728;
        float _2408 = cbLight._m0[_2387].y + _729;
        float _2409 = cbLight._m0[_2387].z + _730;
        float _2413 = inversesqrt(dot(vec3(_2407, _2408, _2409), vec3(_2407, _2408, _2409)));
        float _2414 = _2413 * _2407;
        float _2415 = _2413 * _2408;
        float _2416 = _2413 * _2409;
        float _2417 = dot(vec3(_648, _649, _650), vec3(cbLight._m0[_2387].xyz));
        float _4361 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
        float _2420 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _2421 = dot(vec3(_648, _649, _650), vec3(_2414, _2415, _2416));
        float _4372 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
        float _2424 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
        float _2425 = dot(vec3(cbLight._m0[_2387].xyz), vec3(_2414, _2415, _2416));
        float _4383 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        float _2429 = _2406 * _2406;
        float _2433 = ((_2424 * _2424) * (_2429 + (-1.0))) + 1.0;
        float _2440 = exp2(log2(1.0 - (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0)))) * 5.0);
        float _2447 = 1.0 - _2406;
        float _2457 = (0.5 / (((_2067 * ((_2420 * _2447) + _2406)) + 9.9999999392252902907785028219223e-09) + (((_2067 * _2447) + _2406) * _2420))) * _2420;
        float _4394 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2459 = (isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0))) * (_2429 / ((_2433 * _2433) * 3.141590118408203125));
        float _2460 = isnan(1.0) ? _1917 : (isnan(_1917) ? 1.0 : min(_1917, 1.0));
        _2376 = (((((_2440 * _2089) + _811) * cbLight._m0[_2391].x) * _2459) * _2460) + _2262;
        _2378 = (((((_2440 * _2091) + _813) * cbLight._m0[_2391].y) * _2459) * _2460) + _2264;
        _2380 = (((((_2440 * _2092) + _814) * cbLight._m0[_2391].z) * _2459) * _2460) + _2266;
    }
    float _2595;
    float _2597;
    float _2599;
    float _2601;
    float _2603;
    float _2605;
    if (_1899.y == 0u)
    {
        float _2535 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2536 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2535;
        float _2537 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2535;
        float _2538 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2535;
        uvec4 _2550 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2551 = _2550.x;
        uint _2562 = uint((float(_2550.y) * floor(float(uint(cbSceneParam._m0[85u].y * _749) / _2551))) + floor(float(uint(cbSceneParam._m0[85u].x * _748) / _2551)));
        float _2572 = (log2(_2538 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2573 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
        uint _2576 = uint(isnan(14.0) ? _2573 : (isnan(_2573) ? 14.0 : min(_2573, 14.0)));
        uvec4 _2581 = texelFetch(g_lightClusterGridBuffer, int(((_2576 << 2u) + (_2562 << 6u)) >> 2u));
        uint _2582 = _2581.x;
        uint _2583 = _2550.z;
        float _2683;
        float _2685;
        float _2687;
        float _2689;
        float _2691;
        float _2693;
        if (((((1u << ((_2583 >> 4u) & 15u)) + 4294967295u) & _2582) == 0u) || ((_2583 & 240u) == 0u))
        {
            _2683 = 0.0;
            _2685 = 0.0;
            _2687 = 0.0;
            _2689 = 0.0;
            _2691 = 0.0;
            _2693 = 0.0;
        }
        else
        {
            float _2684;
            float _2686;
            float _2688;
            float _2690;
            float _2692;
            float _2694;
            float _2836 = 0.0;
            float _2837 = 0.0;
            float _2838 = 0.0;
            float _2839 = 0.0;
            float _2840 = 0.0;
            float _2841 = 0.0;
            uint _2842 = 0u;
            uint _2851;
            bool _2852;
            for (;;)
            {
                _2851 = texelFetch(g_lightClassification, int((((_2576 << 5u) + (_2562 << 9u)) + (_2842 << 2u)) >> 2u)).x;
                _2852 = _2851 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2852)
                {
                    frontier_phi_66_pred = _2836;
                    frontier_phi_66_pred_1 = _2841;
                    frontier_phi_66_pred_2 = _2840;
                    frontier_phi_66_pred_3 = _2839;
                    frontier_phi_66_pred_4 = _2838;
                    frontier_phi_66_pred_5 = _2837;
                }
                else
                {
                    float _2981;
                    float _2982;
                    float _2983;
                    float _2984;
                    float _2985;
                    float _2986;
                    uint _2987;
                    _2981 = _2836;
                    _2982 = _2837;
                    _2983 = _2838;
                    _2984 = _2839;
                    _2985 = _2840;
                    _2986 = _2841;
                    _2987 = _2851;
                    float _2908;
                    float _2909;
                    float _2910;
                    float _2911;
                    float _2912;
                    float _2913;
                    for (;;)
                    {
                        uint _2991 = uint(findLSB(_2987)) + (_2842 << 5u);
                        uint _2988 = (_2987 + 4294967295u) & _2987;
                        uint _2993 = _2991 * 48u;
                        vec4 _3007 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2993)).x, texelFetch(g_PointLightRenderingBuffer, int(_2993 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2993 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2993 + 3u)).x));
                        uint _3013 = (_2991 * 48u) + 4u;
                        vec4 _3026 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3013)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3013 + 3u)).x));
                        uint _3032 = (_2991 * 48u) + 8u;
                        vec3 _3043 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3032)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3032 + 2u)).x));
                        float _3047 = _3007.x - _2536;
                        float _3048 = _3007.y - _2537;
                        float _3049 = _3007.z - _2538;
                        float _3050 = dot(vec3(_3047, _3048, _3049), vec3(_3047, _3048, _3049));
                        float _3053 = inversesqrt(_3050);
                        float _3054 = _3053 * _3047;
                        float _3055 = _3053 * _3048;
                        float _3056 = _3053 * _3049;
                        float _3057 = dot(vec3(_767, _770, _773), vec3(_3054, _3055, _3056));
                        float _3062 = 1.0 - (_3050 * _3007.w);
                        float _4420 = isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0));
                        float _3063 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
                        float _3064 = sqrt(_3050) * _3026.w;
                        float _3067 = 1.39999997615814208984375 / (_3064 + 1.39999997615814208984375);
                        float _3068 = _3067 * _3067;
                        float _3071 = ((1.0 - _3068) * _3057) + _3068;
                        float _3074 = _3064 * _3064;
                        float _3078 = ((isnan(0.0) ? _3071 : (isnan(_3071) ? 0.0 : max(_3071, 0.0))) * _3063) / ((_3074 * 0.699999988079071044921875) + 1.0);
                        float _3082 = (-0.0) - _2536;
                        float _3083 = (-0.0) - _2537;
                        float _3084 = (-0.0) - _2538;
                        float _3088 = inversesqrt(dot(vec3(_3082, _3083, _3084), vec3(_3082, _3083, _3084)));
                        float _3089 = _3088 * _3082;
                        float _3090 = _3088 * _3083;
                        float _3091 = _3088 * _3084;
                        float _3099 = exp2(log2(1.0 / ((_3074 * 3.5) + 5.0)) * 0.25);
                        float _3100 = 1.0 - _842;
                        float _3107 = sqrt(1.0 - ((1.0 - (_3100 * _3100)) * (1.0 - (_3099 * _3099))));
                        float _3108 = _3107 * _3107;
                        float _3109 = _3108 * _3108;
                        float _3110 = _3089 + _3054;
                        float _3111 = _3090 + _3055;
                        float _3112 = _3091 + _3056;
                        float _3116 = inversesqrt(dot(vec3(_3110, _3111, _3112), vec3(_3110, _3111, _3112)));
                        float _3120 = dot(vec3(_767, _770, _773), vec3(_3089, _3090, _3091));
                        float _4436 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0));
                        float _3123 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
                        float _3124 = dot(vec3(_767, _770, _773), vec3(_3116 * _3110, _3116 * _3111, _3116 * _3112));
                        float _4447 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0));
                        float _3127 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
                        float _3131 = ((_3127 * _3127) * (_3109 + (-1.0))) + 1.0;
                        float _3132 = _3067 * _3108;
                        float _3133 = _3132 * _3132;
                        float _3136 = ((1.0 - _3133) * _3057) + _3133;
                        float _4458 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                        float _3137 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
                        float _3138 = 1.0 - _3108;
                        float _3148 = (0.5 / (((_3137 * ((_3123 * _3138) + _3108)) + 9.9999999392252902907785028219223e-09) + (((_3137 * _3138) + _3108) * _3123))) * _3137;
                        float _4469 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
                        float _3159 = (((_3109 * 3.1415927410125732421875) * (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0)))) / ((_3131 * _3131) * ((_3074 * 2.1991131305694580078125) + 3.141590118408203125))) * _3063;
                        _2911 = (_3078 * _3026.x) + _2984;
                        _2912 = (_3078 * _3026.y) + _2985;
                        _2913 = (_3078 * _3026.z) + _2986;
                        _2908 = (_3159 * _3043.x) + _2981;
                        _2909 = (_3159 * _3043.y) + _2982;
                        _2910 = (_3159 * _3043.z) + _2983;
                        if (_2988 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2981 = _2908;
                            _2982 = _2909;
                            _2983 = _2910;
                            _2984 = _2911;
                            _2985 = _2912;
                            _2986 = _2913;
                            _2987 = _2988;
                        }
                    }
                    frontier_phi_66_pred = _2908;
                    frontier_phi_66_pred_1 = _2913;
                    frontier_phi_66_pred_2 = _2912;
                    frontier_phi_66_pred_3 = _2911;
                    frontier_phi_66_pred_4 = _2910;
                    frontier_phi_66_pred_5 = _2909;
                }
                _2684 = frontier_phi_66_pred;
                _2694 = frontier_phi_66_pred_1;
                _2692 = frontier_phi_66_pred_2;
                _2690 = frontier_phi_66_pred_3;
                _2688 = frontier_phi_66_pred_4;
                _2686 = frontier_phi_66_pred_5;
                uint _2843 = _2842 + 1u;
                if (_2843 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2836 = _2684;
                    _2837 = _2686;
                    _2838 = _2688;
                    _2839 = _2690;
                    _2840 = _2692;
                    _2841 = _2694;
                    _2842 = _2843;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2683 = _2684;
            _2685 = _2686;
            _2687 = _2688;
            _2689 = _2690;
            _2691 = _2692;
            _2693 = _2694;
        }
        uvec4 _2697 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2698 = _2697.z;
        uint _2700 = (_2698 >> 8u) & 15u;
        float _2804;
        float _2806;
        float _2808;
        float _2810;
        float _2812;
        float _2814;
        if (((4294967295u << _2700) & _2582) == 0u)
        {
            _2804 = _2683;
            _2806 = _2685;
            _2808 = _2687;
            _2810 = _2689;
            _2812 = _2691;
            _2814 = _2693;
        }
        else
        {
            float _2829 = inversesqrt(dot(vec3(_2536, _2537, _2538), vec3(_2536, _2537, _2538)));
            float _2830 = _2829 * _2536;
            float _2831 = _2829 * _2537;
            float _2832 = _2829 * _2538;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2700 < ((_2698 >> 12u) & 15u))
            {
                float _2805;
                float _2807;
                float _2809;
                float _2811;
                float _2813;
                float _2815;
                float _2964 = _2683;
                float _2965 = _2685;
                float _2966 = _2687;
                float _2967 = _2689;
                float _2968 = _2691;
                float _2969 = _2693;
                uint _2970 = _2700;
                uint _2979;
                bool _2980;
                for (;;)
                {
                    _2979 = texelFetch(g_lightClassification, int((((_2576 << 5u) + (_2562 << 9u)) + (_2970 << 2u)) >> 2u)).x;
                    _2980 = _2979 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2980)
                    {
                        frontier_phi_77_pred = _2969;
                        frontier_phi_77_pred_1 = _2968;
                        frontier_phi_77_pred_2 = _2967;
                        frontier_phi_77_pred_3 = _2966;
                        frontier_phi_77_pred_4 = _2965;
                        frontier_phi_77_pred_5 = _2964;
                    }
                    else
                    {
                        float _3173;
                        float _3174;
                        float _3175;
                        float _3176;
                        float _3177;
                        float _3178;
                        float _3467;
                        float _3468;
                        float _3469;
                        float _3470;
                        float _3471;
                        float _3472;
                        float _3186 = _2964;
                        float _3187 = _2965;
                        float _3188 = _2966;
                        float _3189 = _2967;
                        float _3190 = _2968;
                        float _3191 = _2969;
                        uint _3192 = _2979;
                        uint _3193;
                        vec4 _3218;
                        float _3219;
                        vec4 _3234;
                        vec3 _3246;
                        vec4 _3261;
                        vec4 _3276;
                        float _3323;
                        bool _3324;
                        for (;;)
                        {
                            uint _3203 = ((_2970 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3192));
                            _3193 = (_3192 + 4294967295u) & _3192;
                            uint _3205 = _3203 * 40u;
                            _3218 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3205)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3205 + 3u)).x));
                            _3219 = _3218.w;
                            uint _3221 = (_3203 * 40u) + 4u;
                            _3234 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3221)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3221 + 3u)).x));
                            uint _3236 = (_3203 * 40u) + 8u;
                            _3246 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3236)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3236 + 2u)).x));
                            uint _3248 = (_3203 * 40u) + 16u;
                            _3261 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3248)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3248 + 3u)).x));
                            uint _3263 = (_3203 * 40u) + 20u;
                            _3276 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3263)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3263 + 3u)).x));
                            uint _3279 = (_3203 * 40u) + 24u;
                            vec4 _3292 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3279)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 3u)).x));
                            uint _3298 = (_3203 * 40u) + 28u;
                            vec4 _3311 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3298)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3298 + 3u)).x));
                            _3323 = fma(_2538, _3311.z, fma(_2537, _3311.y, _3311.x * _2536)) + _3311.w;
                            _3324 = !((fma(_2538, _3292.z, fma(_2537, _3292.y, _3292.x * _2536)) + _3292.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3324)
                            {
                                float _3351 = _3218.x - _2536;
                                float _3352 = _3218.y - _2537;
                                float _3353 = _3218.z - _2538;
                                float _3354 = dot(vec3(_3351, _3352, _3353), vec3(_3351, _3352, _3353));
                                float _3357 = inversesqrt(_3354);
                                float _3358 = _3357 * _3351;
                                float _3359 = _3357 * _3352;
                                float _3360 = _3357 * _3353;
                                float _3364 = 1.0 - (_3354 / (_3219 * _3219));
                                float _4480 = isnan(0.0) ? _3364 : (isnan(_3364) ? 0.0 : max(_3364, 0.0));
                                float _3365 = isnan(1.0) ? _4480 : (isnan(_4480) ? 1.0 : min(_4480, 1.0));
                                float _3369 = sqrt(_3354) * _3234.w;
                                float _3371 = 1.39999997615814208984375 / (_3369 + 1.39999997615814208984375);
                                float _3372 = _3371 * _3371;
                                float _3375 = ((1.0 - _3372) * dot(vec3(_3358, _3359, _3360), vec3(_767, _770, _773))) + _3372;
                                float _3378 = _3369 * _3369;
                                float _3382 = (fma(_2538, _3261.z, fma(_2537, _3261.y, _3261.x * _2536)) + _3261.w) / _3323;
                                float _3383 = (fma(_2538, _3276.z, fma(_2537, _3276.y, _3276.x * _2536)) + _3276.w) / _3323;
                                float _3387 = 1.0 - dot(vec2(_3382, _3383), vec2(_3382, _3383));
                                float _4496 = isnan(0.0) ? _3387 : (isnan(_3387) ? 0.0 : max(_3387, 0.0));
                                float _3388 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
                                float _3389 = _3388 * (((isnan(0.0) ? _3375 : (isnan(_3375) ? 0.0 : max(_3375, 0.0))) * _3365) / ((_3378 * 0.699999988079071044921875) + 1.0));
                                float _3401 = exp2(log2(1.0 / ((_3378 * 3.5) + 5.0)) * 0.25);
                                float _3402 = 1.0 - _842;
                                float _3409 = sqrt(1.0 - ((1.0 - (_3402 * _3402)) * (1.0 - (_3401 * _3401))));
                                float _3410 = _3409 * _3409;
                                float _3411 = _3410 * _3410;
                                float _3412 = _3358 - _2830;
                                float _3413 = _3359 - _2831;
                                float _3414 = _3360 - _2832;
                                float _3418 = inversesqrt(dot(vec3(_3412, _3413, _3414), vec3(_3412, _3413, _3414)));
                                float _3422 = dot(vec3(_767, _770, _773), vec3((-0.0) - _2830, (-0.0) - _2831, (-0.0) - _2832));
                                float _4507 = isnan(0.0) ? _3422 : (isnan(_3422) ? 0.0 : max(_3422, 0.0));
                                float _3425 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
                                float _3426 = dot(vec3(_767, _770, _773), vec3(_3418 * _3412, _3418 * _3413, _3418 * _3414));
                                float _4518 = isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0));
                                float _3429 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
                                float _3433 = ((_3429 * _3429) * (_3411 + (-1.0))) + 1.0;
                                float _3434 = _3371 * _3410;
                                float _3435 = _3434 * _3434;
                                float _3441 = ((1.0 - _3435) * dot(vec3(_767, _770, _773), vec3(_3358, _3359, _3360))) + _3435;
                                float _4529 = isnan(0.0) ? _3441 : (isnan(_3441) ? 0.0 : max(_3441, 0.0));
                                float _3442 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
                                float _3443 = 1.0 - _3410;
                                float _3453 = (0.5 / (((_3442 * ((_3425 * _3443) + _3410)) + 9.9999999392252902907785028219223e-09) + (((_3442 * _3443) + _3410) * _3425))) * _3442;
                                float _4540 = isnan(0.0) ? _3453 : (isnan(_3453) ? 0.0 : max(_3453, 0.0));
                                float _3463 = (_3388 * _3365) * (((_3411 * 3.1415927410125732421875) * (isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0)))) / ((_3433 * _3433) * ((_3378 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3389 * _3234.y;
                                frontier_phi_83_pred_1 = _3389 * _3234.x;
                                frontier_phi_83_pred_2 = _3463 * _3246.z;
                                frontier_phi_83_pred_3 = _3463 * _3246.y;
                                frontier_phi_83_pred_4 = _3463 * _3246.x;
                                frontier_phi_83_pred_5 = _3389 * _3234.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3471 = frontier_phi_83_pred;
                            _3470 = frontier_phi_83_pred_1;
                            _3469 = frontier_phi_83_pred_2;
                            _3468 = frontier_phi_83_pred_3;
                            _3467 = frontier_phi_83_pred_4;
                            _3472 = frontier_phi_83_pred_5;
                            _3176 = _3470 + _3189;
                            _3177 = _3471 + _3190;
                            _3178 = _3472 + _3191;
                            _3173 = _3467 + _3186;
                            _3174 = _3468 + _3187;
                            _3175 = _3469 + _3188;
                            if (_3193 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3186 = _3173;
                                _3187 = _3174;
                                _3188 = _3175;
                                _3189 = _3176;
                                _3190 = _3177;
                                _3191 = _3178;
                                _3192 = _3193;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3178;
                        frontier_phi_77_pred_1 = _3177;
                        frontier_phi_77_pred_2 = _3176;
                        frontier_phi_77_pred_3 = _3175;
                        frontier_phi_77_pred_4 = _3174;
                        frontier_phi_77_pred_5 = _3173;
                    }
                    _2815 = frontier_phi_77_pred;
                    _2813 = frontier_phi_77_pred_1;
                    _2811 = frontier_phi_77_pred_2;
                    _2809 = frontier_phi_77_pred_3;
                    _2807 = frontier_phi_77_pred_4;
                    _2805 = frontier_phi_77_pred_5;
                    uint _2971 = _2970 + 1u;
                    if (_2971 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2964 = _2805;
                        _2965 = _2807;
                        _2966 = _2809;
                        _2967 = _2811;
                        _2968 = _2813;
                        _2969 = _2815;
                        _2970 = _2971;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2809;
                frontier_phi_58_59_ladder_1 = _2815;
                frontier_phi_58_59_ladder_2 = _2813;
                frontier_phi_58_59_ladder_3 = _2811;
                frontier_phi_58_59_ladder_4 = _2807;
                frontier_phi_58_59_ladder_5 = _2805;
            }
            else
            {
                frontier_phi_58_59_ladder = _2687;
                frontier_phi_58_59_ladder_1 = _2693;
                frontier_phi_58_59_ladder_2 = _2691;
                frontier_phi_58_59_ladder_3 = _2689;
                frontier_phi_58_59_ladder_4 = _2685;
                frontier_phi_58_59_ladder_5 = _2683;
            }
            _2804 = frontier_phi_58_59_ladder_5;
            _2806 = frontier_phi_58_59_ladder_4;
            _2808 = frontier_phi_58_59_ladder;
            _2810 = frontier_phi_58_59_ladder_3;
            _2812 = frontier_phi_58_59_ladder_2;
            _2814 = frontier_phi_58_59_ladder_1;
        }
        float _2819 = isnan(1.0) ? _826 : (isnan(_826) ? 1.0 : min(_826, 1.0));
        _2595 = (_2819 * _2810) + _2031;
        _2597 = (_2819 * _2812) + _2033;
        _2599 = (_2819 * _2814) + _2035;
        _2601 = ((_2804 * _811) * _2819) + _2376;
        _2603 = ((_2806 * _813) * _2819) + _2378;
        _2605 = ((_2808 * _814) * _2819) + _2380;
    }
    else
    {
        _2595 = _2031;
        _2597 = _2033;
        _2599 = _2035;
        _2601 = _2376;
        _2603 = _2378;
        _2605 = _2380;
    }
    float _4556 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
    float _4567 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    float _4578 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
    float _2622 = ((isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0))) * (_2595 + ((isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0))) * _826))) + ((_2601 + ((isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0))) * _1668)) * cbPerFrame._m0[3u].x);
    float _2623 = ((isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0))) * (_2597 + ((isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0))) * _826))) + ((_2603 + ((isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0))) * _1668)) * cbPerFrame._m0[3u].x);
    float _2624 = ((isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0))) * (_2599 + ((isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0))) * _826))) + ((_2605 + ((isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0))) * _1668)) * cbPerFrame._m0[3u].x);
    uint _2625 = _786 + 6u;
    float _2633 = _748 / cbSceneParam._m0[86u].x;
    float _2634 = _749 / cbSceneParam._m0[86u].y;
    vec4 _2648 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2633, _2634, (log2((isnan(cbSceneParam._m0[77u].w) ? _671 : (isnan(_671) ? cbSceneParam._m0[77u].w : min(_671, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2650 = _2648.x;
    float _2651 = _2648.y;
    float _2652 = _2648.z;
    float _2653 = _2648.w;
    float _2746;
    float _2748;
    float _2750;
    float _2752;
    if (_671 > cbSceneParam._m0[78u].w)
    {
        float _2708 = isnan(_671) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _671 : min(cbSceneParam._m0[80u].w, _671));
        float _2709 = _2708 / _671;
        float _2720 = _2709 * _721;
        float _2721 = _722 * _2709;
        float _2722 = (-0.0) - _2721;
        float _2724 = _2709 * _723;
        float _2726 = (cbSceneParam._m0[77u].w * _2722) / _2708;
        float _2727 = _2726 + cbSceneParam._m0[79u].w;
        float _2728 = cbSceneParam._m0[79u].w - _2721;
        float _2734 = sqrt(((_2720 * _2720) + (_2721 * _2721)) + (_2724 * _2724));
        float _2737 = (1.0 - (cbSceneParam._m0[77u].w / _2708)) * _2734;
        float _2742 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2744 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2921;
        if (abs((_2722 - _2726) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2921 = ((((_2727 > 0.0) ? exp2(_2742 * _2727) : (2.0 - exp2(_2744 * _2727))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2737;
        }
        else
        {
            float _2865 = 1.0 / cbSceneParam._m0[80u].x;
            float _2866 = isnan(_2728) ? _2727 : (isnan(_2727) ? _2728 : max(_2727, _2728));
            float _2867 = isnan(_2728) ? _2727 : (isnan(_2727) ? _2728 : min(_2727, _2728));
            float _2876 = isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : min(_2866, 0.0));
            float _2877 = isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : min(_2867, 0.0));
            _2921 = ((abs(_2734 / _2722) * cbSceneParam._m0[80u].y) * ((((_2876 - _2877) * 2.0) - ((exp2(_2742 * (isnan(0.0) ? _2866 : (isnan(_2866) ? 0.0 : max(_2866, 0.0)))) - exp2(_2742 * (isnan(0.0) ? _2867 : (isnan(_2867) ? 0.0 : max(_2867, 0.0))))) * _2865)) - ((exp2(_2744 * _2876) - exp2(_2744 * _2877)) * _2865))) + (_2737 * cbSceneParam._m0[80u].z);
        }
        vec4 _2923 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2633, _2634, 1.0), 0.0);
        float _2932 = exp2((_2921 * (-1.44269502162933349609375)) * (1.0 - _2923.w));
        float _2933 = log2(_2932);
        float _2949 = log2(_2653);
        _2746 = (exp2(_2949 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2933 * cbSceneParam._m0[78u].x)) * _2923.x) / cbSceneParam._m0[78u].x)) + _2650;
        _2748 = (exp2(_2949 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2933 * cbSceneParam._m0[78u].y)) * _2923.y) / cbSceneParam._m0[78u].y)) + _2651;
        _2750 = (exp2(_2949 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2933 * cbSceneParam._m0[78u].z)) * _2923.z) / cbSceneParam._m0[78u].z)) + _2652;
        _2752 = _2932 * _2653;
    }
    else
    {
        _2746 = _2650;
        _2748 = _2651;
        _2750 = _2652;
        _2752 = _2653;
    }
    bool _2959;
    vec4 _2762;
    vec4 _2784;
    float _2786;
    float _2790;
    float _2791;
    float _2792;
    float _2793;
    bool _2803;
    for (;;)
    {
        _2762 = cbMatDynParam._m0[0u];
        float _2764 = roundEven(_2762.y);
        bool _2765 = _2764 == 3.0;
        float _2766 = log2(_2752);
        float _2773 = exp2(_2766 * cbSceneParam._m0[78u].x) * _2622;
        float _2774 = exp2(_2766 * cbSceneParam._m0[78u].y) * _2623;
        float _2775 = exp2(_2766 * cbSceneParam._m0[78u].z) * _2624;
        float _2782 = _737 + (-0.5);
        _2784 = cbMtdParam._m0[1u];
        _2786 = _2784.y * _2782;
        float _2789 = (_2764 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2790 = _2789 * (_2765 ? _2773 : (_2773 + (cbSceneParam._m0[72u].w * _2746)));
        _2791 = _2789 * (_2765 ? _2774 : (_2774 + (cbSceneParam._m0[72u].w * _2748)));
        _2792 = _2789 * (_2765 ? _2775 : (_2775 + (cbSceneParam._m0[72u].w * _2750)));
        _2793 = _2782 * 0.999000012874603271484375;
        _2803 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2803)
        {
            if ((cbInstanceData._m0[_786 + 7u].x + _2793) < 0.5)
            {
                _2959 = true;
                break;
            }
        }
        uint _2900 = _787 + uint(_2762.w);
        if ((cbInstanceData._m0[_2900].w < 1.0) && ((cbInstanceData._m0[_2900].w + _2793) < 0.5))
        {
            _2959 = true;
            break;
        }
        if ((_2786 + 1.0) < _2784.x)
        {
            _2959 = true;
            break;
        }
        _2959 = false;
        break;
    }
    float _3164;
    if (_2959)
    {
        discard_state = true;
        _3164 = 0.0;
    }
    else
    {
        _3164 = cbInstanceData._m0[_2625].w;
    }
    SV_Target.x = _2790;
    SV_Target.y = _2791;
    SV_Target.z = _2792;
    SV_Target.w = _3164;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2625].w;
    discard_exit();
}


