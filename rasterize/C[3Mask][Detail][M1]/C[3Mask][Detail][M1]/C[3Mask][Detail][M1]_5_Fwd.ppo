#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1211;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _199 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _200 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _201 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_199, _200, _201), vec3(_199, _200, _201)));
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _244 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _250 = _244.x * cbMtdParam._m0[10u].x;
    float _251 = _244.y * cbMtdParam._m0[10u].y;
    float _252 = _244.z * cbMtdParam._m0[10u].z;
    vec4 _270 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _320 = cbMtdParam._m0[18u].y * texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x;
    float _331 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].x * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].y * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _320)) + 1.0;
    float _3541 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _332 = isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0));
    float _339 = (_332 * ((_270.x * cbMtdParam._m0[11u].x) - _250)) + _250;
    float _340 = (_332 * ((_270.y * cbMtdParam._m0[11u].y) - _251)) + _251;
    float _341 = (_332 * ((_270.z * cbMtdParam._m0[11u].z) - _252)) + _252;
    vec4 _359 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _386 = ((cbMtdParam._m0[17u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _320)) + 1.0;
    float _3552 = isnan(0.0) ? _386 : (isnan(_386) ? 0.0 : max(_386, 0.0));
    float _387 = isnan(1.0) ? _3552 : (isnan(_3552) ? 1.0 : min(_3552, 1.0));
    float _394 = (_387 * ((_359.x * cbMtdParam._m0[12u].x) - _339)) + _339;
    float _395 = (_387 * ((_359.y * cbMtdParam._m0[12u].y) - _340)) + _340;
    float _396 = (_387 * ((_359.z * cbMtdParam._m0[12u].z) - _341)) + _341;
    vec4 _413 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _438 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[18u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[18u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _320)) + 1.0;
    float _3563 = isnan(0.0) ? _438 : (isnan(_438) ? 0.0 : max(_438, 0.0));
    float _439 = isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0));
    float _446 = (_439 * ((_413.x * cbMtdParam._m0[13u].x) - _394)) + _394;
    float _447 = (_439 * ((_413.y * cbMtdParam._m0[13u].y) - _395)) + _395;
    float _448 = (_439 * ((_413.z * cbMtdParam._m0[13u].z) - _396)) + _396;
    vec4 _461 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _463 = _461.x;
    float _481 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _463) * _332) + _463;
    float _499 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _481) * _387) + _481;
    float _516 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _499) * _439) + _499;
    vec4 _529 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _531 = _529.x;
    float _532 = _529.y;
    float _535 = cbMtdParam._m0[17u].y * _529.z;
    vec4 _547 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _556 = (((cbMtdParam._m0[17u].x * _547.z) - _535) * _332) + _535;
    vec4 _569 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _581 = (((cbMtdParam._m0[16u].w * _569.z) - _556) * _387) + _556;
    vec4 _594 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _603 = (((cbMtdParam._m0[16u].z * _594.z) - _581) * _439) + _581;
    vec4 _616 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _629 = ((_547.x - _531) * _332) + _531;
    float _630 = ((_547.y - _532) * _332) + _532;
    float _635 = ((_569.x - _629) * _387) + _629;
    float _636 = ((_569.y - _630) * _387) + _630;
    float _645 = ((((_594.x - _635) * _439) + _635) * 2.0) + (-1.0);
    float _646 = ((((_594.y - _636) * _439) + _636) * 2.0) + (-1.0);
    float _647 = dot(vec2(_645, _646), vec2(_645, _646));
    float _3574 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _652 = sqrt(1.0 - (isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0))));
    float _655 = (((_616.x * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _645;
    float _656 = (((_616.y * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _646;
    float _659 = fma(_652, _214 * NORMAL.x, fma(_656, _221 * TANGENT.x, (_207 * _199) * _655));
    float _662 = fma(_652, _214 * NORMAL.y, fma(_656, _221 * TANGENT.y, (_207 * _200) * _655));
    float _665 = fma(_652, _214 * NORMAL.z, fma(_656, _221 * TANGENT.z, (_207 * _201) * _655));
    float _669 = inversesqrt(dot(vec3(_659, _662, _665), vec3(_659, _662, _665)));
    float _670 = _669 * _659;
    float _671 = _669 * _662;
    float _672 = _669 * _665;
    float _3585 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _673 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
    float _3596 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _3607 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _3618 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _3629 = isnan(0.0) ? _516 : (isnan(_516) ? 0.0 : max(_516, 0.0));
    float _677 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
    float _693 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _733 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _743 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _733);
    float _744 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _733);
    float _745 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _733);
    float _749 = inversesqrt(dot(vec3(_743, _744, _745), vec3(_743, _744, _745)));
    float _750 = _743 * _749;
    float _751 = _744 * _749;
    float _752 = _745 * _749;
    float _758 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _759 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _777 = fma(_672, cbSceneParam._m0[5u].z, fma(_671, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _670));
    float _780 = fma(_672, cbSceneParam._m0[6u].z, fma(_671, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _670));
    float _783 = fma(_672, cbSceneParam._m0[7u].z, fma(_671, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _670));
    uint _796 = uint(roundEven(NORMAL.w)) * 13u;
    uint _798 = (_796 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _804 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0)))) * cbInstanceData._m0[_798].x;
    float _805 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0)))) * cbInstanceData._m0[_798].y;
    float _806 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0)))) * cbInstanceData._m0[_798].z;
    float _3640 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
    float _807 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
    float _3651 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _808 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
    float _3662 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _809 = isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0));
    float _810 = 1.0 - _677;
    float _811 = _807 * _810;
    float _812 = _808 * _810;
    float _813 = _809 * _810;
    float _818 = (_807 + (-0.039999999105930328369140625)) * _677;
    float _819 = (_808 + (-0.039999999105930328369140625)) * _677;
    float _820 = (_809 + (-0.039999999105930328369140625)) * _677;
    float _821 = _818 + 0.039999999105930328369140625;
    float _823 = _819 + 0.039999999105930328369140625;
    float _824 = _820 + 0.039999999105930328369140625;
    vec4 _833 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _758, cbSceneParam._m0[86u].y * _759));
    float _836 = _833.x * TEXCOORD_5.w;
    float _837 = dot(vec3(_670, _671, _672), vec3(_750, _751, _752));
    float _840 = _837 * 2.0;
    float _844 = (_840 * _670) - _750;
    float _845 = (_840 * _671) - _751;
    float _846 = (_840 * _672) - _752;
    float _850 = abs(dot(vec3(_750, _751, _752), vec3(_670, _671, _672)));
    float _3673 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
    float _852 = sqrt(_673);
    float _865 = exp2((_852 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_852 * 3.0));
    float _871 = (1.0 - _865) * ((_852 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _872 = _865 * _852;
    float _900 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _904 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _908 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1210;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    float _1219;
    float _1220;
    float _1221;
    float _1222;
    float _1223;
    float _1224;
    float _1225;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _935 = fma(_908, cbModelParam._m0[26u].z, fma(_904, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _900));
        float _939 = fma(_908, cbModelParam._m0[27u].z, fma(_904, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _900));
        float _943 = fma(_908, cbModelParam._m0[28u].z, fma(_904, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _900));
        float _968 = _900 + _670;
        float _969 = _904 + _671;
        float _970 = _908 + _672;
        float _980 = fma(_970, cbModelParam._m0[26u].z, fma(_969, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _968)) - _935;
        float _981 = fma(_970, cbModelParam._m0[27u].z, fma(_969, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _968)) - _939;
        float _982 = fma(_970, cbModelParam._m0[28u].z, fma(_969, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _968)) - _943;
        float _986 = inversesqrt(dot(vec3(_980, _981, _982), vec3(_980, _981, _982)));
        float _999 = ((_986 * _980) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_935 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1000 = ((_986 * _981) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_939 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1001 = ((_986 * _982) / cbModelParam._m0[34u].z) + ((((((_943 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1004 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_999, _1000, _1001), 0.0);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_999, _1000, _1001), 0.0);
        vec4 _1018 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_999, _1000, _1001), 0.0);
        vec4 _1025 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_999, _1000, _1001), 0.0);
        float _1038 = exp2((_1004.w + (-0.5)) * 20.0) * 2.0;
        float _1039 = _1038 * (_1004.x + (-0.5));
        float _1040 = _1038 * (_1004.y + (-0.5));
        float _1041 = _1038 * (_1004.z + (-0.5));
        float _1048 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1049 = _1048 * (_1011.x + (-0.5));
        float _1050 = _1048 * (_1011.y + (-0.5));
        float _1051 = _1048 * (_1011.z + (-0.5));
        float _1058 = exp2((_1018.w + (-0.5)) * 20.0) * 2.0;
        float _1059 = _1058 * (_1018.x + (-0.5));
        float _1060 = _1058 * (_1018.y + (-0.5));
        float _1061 = _1058 * (_1018.z + (-0.5));
        float _1068 = exp2((_1025.w + (-0.5)) * 20.0) * 2.0;
        float _1069 = _1068 * (_1025.x + (-0.5));
        float _1070 = _1068 * (_1025.y + (-0.5));
        float _1071 = _1068 * (_1025.z + (-0.5));
        float _1072 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1073 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1074 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1075 = _1039 * 0.5;
        float _1076 = _1049 * 0.5;
        float _1077 = _1059 * 0.5;
        float _1078 = dot(vec3(_1075, _1076, _1077), vec3(_1075, _1076, _1077));
        float _1083 = (_1078 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1078);
        float _1092 = (dot(vec3(_670, _671, _672), vec3(_1083 * _1075, _1083 * _1076, _1083 * _1077)) + 1.0) * 0.5;
        float _3699 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1102 = sqrt(((_1076 * _1076) + (_1075 * _1075)) + (_1077 * _1077)) / (_1072 + 9.9999997473787516355514526367188e-06);
        float _3710 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _1104 = _1103 * 2.0;
        float _1108 = (1.0 - _1103) / (_1103 + 1.0);
        float _3721 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _1118 = ((((1.0 - _1109) * (_1104 + 2.0)) * exp2(log2(isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0))) * (_1104 + 1.0))) + _1109) * _1072;
        float _1119 = _1040 * 0.5;
        float _1120 = _1050 * 0.5;
        float _1121 = _1060 * 0.5;
        float _1122 = dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121));
        float _1127 = (_1122 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1122);
        float _1135 = (dot(vec3(_670, _671, _672), vec3(_1127 * _1119, _1127 * _1120, _1127 * _1121)) + 1.0) * 0.5;
        float _3732 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1144 = sqrt(((_1120 * _1120) + (_1119 * _1119)) + (_1121 * _1121)) / (_1073 + 9.9999997473787516355514526367188e-06);
        float _3743 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _1146 = _1145 * 2.0;
        float _1150 = (1.0 - _1145) / (_1145 + 1.0);
        float _3754 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1160 = ((((1.0 - _1151) * (_1146 + 2.0)) * exp2(log2(isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * (_1146 + 1.0))) + _1151) * _1073;
        float _1161 = _1041 * 0.5;
        float _1162 = _1051 * 0.5;
        float _1163 = _1061 * 0.5;
        float _1164 = dot(vec3(_1161, _1162, _1163), vec3(_1161, _1162, _1163));
        float _1169 = (_1164 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1164);
        float _1177 = (dot(vec3(_670, _671, _672), vec3(_1169 * _1161, _1169 * _1162, _1169 * _1163)) + 1.0) * 0.5;
        float _3765 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1186 = sqrt(((_1162 * _1162) + (_1161 * _1161)) + (_1163 * _1163)) / (_1074 + 9.9999997473787516355514526367188e-06);
        float _3776 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _1188 = _1187 * 2.0;
        float _1192 = (1.0 - _1187) / (_1187 + 1.0);
        float _3787 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1202 = ((((1.0 - _1193) * (_1188 + 2.0)) * exp2(log2(isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))) * (_1188 + 1.0))) + _1193) * _1074;
        _1210 = _1041;
        _1212 = _1040;
        _1213 = _1039;
        _1214 = _1051;
        _1215 = _1050;
        _1216 = _1049;
        _1217 = _1061;
        _1218 = _1060;
        _1219 = _1059;
        _1220 = _1074;
        _1221 = _1073;
        _1222 = _1072;
        _1223 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0)));
        _1224 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0)));
        _1225 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0)));
    }
    else
    {
        _1210 = _1211;
        _1212 = _1211;
        _1213 = _1211;
        _1214 = _1211;
        _1215 = _1211;
        _1216 = _1211;
        _1217 = _1211;
        _1218 = _1211;
        _1219 = _1211;
        _1220 = _1211;
        _1221 = _1211;
        _1222 = _1211;
        _1223 = 0.0;
        _1224 = 0.0;
        _1225 = 0.0;
    }
    float _1520;
    float _1521;
    float _1522;
    float _1523;
    float _1524;
    float _1525;
    float _1526;
    float _1527;
    float _1528;
    float _1529;
    float _1530;
    float _1531;
    float _1532;
    float _1533;
    float _1534;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1251 = fma(_908, cbModelParam._m0[30u].z, fma(_904, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _900));
        float _1255 = fma(_908, cbModelParam._m0[31u].z, fma(_904, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _900));
        float _1259 = fma(_908, cbModelParam._m0[32u].z, fma(_904, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _900));
        float _1282 = _900 + _670;
        float _1283 = _904 + _671;
        float _1284 = _908 + _672;
        float _1294 = fma(_1284, cbModelParam._m0[30u].z, fma(_1283, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1282)) - _1251;
        float _1295 = fma(_1284, cbModelParam._m0[31u].z, fma(_1283, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1282)) - _1255;
        float _1296 = fma(_1284, cbModelParam._m0[32u].z, fma(_1283, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1282)) - _1259;
        float _1300 = inversesqrt(dot(vec3(_1294, _1295, _1296), vec3(_1294, _1295, _1296)));
        float _1313 = ((_1300 * _1294) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1251 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1314 = ((_1300 * _1295) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1255 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1315 = ((_1300 * _1296) / cbModelParam._m0[35u].z) + ((((((_1259 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1317 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1313, _1314, _1315), 0.0);
        vec4 _1324 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1313, _1314, _1315), 0.0);
        vec4 _1331 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1313, _1314, _1315), 0.0);
        vec4 _1338 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1313, _1314, _1315), 0.0);
        float _1350 = exp2((_1317.w + (-0.5)) * 20.0) * 2.0;
        float _1351 = _1350 * (_1317.x + (-0.5));
        float _1352 = _1350 * (_1317.y + (-0.5));
        float _1353 = _1350 * (_1317.z + (-0.5));
        float _1360 = exp2((_1324.w + (-0.5)) * 20.0) * 2.0;
        float _1361 = _1360 * (_1324.x + (-0.5));
        float _1362 = _1360 * (_1324.y + (-0.5));
        float _1363 = _1360 * (_1324.z + (-0.5));
        float _1370 = exp2((_1331.w + (-0.5)) * 20.0) * 2.0;
        float _1371 = _1370 * (_1331.x + (-0.5));
        float _1372 = _1370 * (_1331.y + (-0.5));
        float _1373 = _1370 * (_1331.z + (-0.5));
        float _1380 = exp2((_1338.w + (-0.5)) * 20.0) * 2.0;
        float _1381 = _1380 * (_1338.x + (-0.5));
        float _1382 = _1380 * (_1338.y + (-0.5));
        float _1383 = _1380 * (_1338.z + (-0.5));
        float _1384 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1385 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1386 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1387 = _1351 * 0.5;
        float _1388 = _1361 * 0.5;
        float _1389 = _1371 * 0.5;
        float _1390 = dot(vec3(_1387, _1388, _1389), vec3(_1387, _1388, _1389));
        float _1395 = (_1390 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1390);
        float _1403 = (dot(vec3(_670, _671, _672), vec3(_1395 * _1387, _1395 * _1388, _1395 * _1389)) + 1.0) * 0.5;
        float _3828 = isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0));
        float _1412 = sqrt(((_1388 * _1388) + (_1387 * _1387)) + (_1389 * _1389)) / (_1384 + 9.9999997473787516355514526367188e-06);
        float _3839 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
        float _1414 = _1413 * 2.0;
        float _1418 = (1.0 - _1413) / (_1413 + 1.0);
        float _3850 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1419 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
        float _1428 = ((((1.0 - _1419) * (_1414 + 2.0)) * exp2(log2(isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * (_1414 + 1.0))) + _1419) * _1384;
        float _1429 = _1352 * 0.5;
        float _1430 = _1362 * 0.5;
        float _1431 = _1372 * 0.5;
        float _1432 = dot(vec3(_1429, _1430, _1431), vec3(_1429, _1430, _1431));
        float _1437 = (_1432 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1432);
        float _1445 = (dot(vec3(_670, _671, _672), vec3(_1437 * _1429, _1437 * _1430, _1437 * _1431)) + 1.0) * 0.5;
        float _3861 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
        float _1454 = sqrt(((_1430 * _1430) + (_1429 * _1429)) + (_1431 * _1431)) / (_1385 + 9.9999997473787516355514526367188e-06);
        float _3872 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1455 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
        float _1456 = _1455 * 2.0;
        float _1460 = (1.0 - _1455) / (_1455 + 1.0);
        float _3883 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1470 = ((((1.0 - _1461) * (_1456 + 2.0)) * exp2(log2(isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0))) * (_1456 + 1.0))) + _1461) * _1385;
        float _1471 = _1353 * 0.5;
        float _1472 = _1363 * 0.5;
        float _1473 = _1373 * 0.5;
        float _1474 = dot(vec3(_1471, _1472, _1473), vec3(_1471, _1472, _1473));
        float _1479 = (_1474 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1474);
        float _1487 = (dot(vec3(_670, _671, _672), vec3(_1479 * _1471, _1479 * _1472, _1479 * _1473)) + 1.0) * 0.5;
        float _3894 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1496 = sqrt(((_1472 * _1472) + (_1471 * _1471)) + (_1473 * _1473)) / (_1386 + 9.9999997473787516355514526367188e-06);
        float _3905 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1497 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1498 = _1497 * 2.0;
        float _1502 = (1.0 - _1497) / (_1497 + 1.0);
        float _3916 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1503 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
        float _1512 = ((((1.0 - _1503) * (_1498 + 2.0)) * exp2(log2(isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) * (_1498 + 1.0))) + _1503) * _1386;
        _1520 = _1353;
        _1521 = _1352;
        _1522 = _1351;
        _1523 = _1363;
        _1524 = _1362;
        _1525 = _1361;
        _1526 = _1373;
        _1527 = _1372;
        _1528 = _1371;
        _1529 = _1386;
        _1530 = _1385;
        _1531 = _1384;
        _1532 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)));
        _1533 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0)));
        _1534 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0)));
    }
    else
    {
        _1520 = _1211;
        _1521 = _1211;
        _1522 = _1211;
        _1523 = _1211;
        _1524 = _1211;
        _1525 = _1211;
        _1526 = _1211;
        _1527 = _1211;
        _1528 = _1211;
        _1529 = _1211;
        _1530 = _1211;
        _1531 = _1211;
        _1532 = 0.0;
        _1533 = 0.0;
        _1534 = 0.0;
    }
    float _1544 = (cbModelParam._m0[1u].x * (_1532 - _1223)) + _1223;
    float _1545 = (cbModelParam._m0[1u].x * (_1533 - _1224)) + _1224;
    float _1546 = (cbModelParam._m0[1u].x * (_1534 - _1225)) + _1225;
    float _1567 = fma(_1546, cbSceneParam._m0[89u].z, fma(_1545, cbSceneParam._m0[89u].y, _1544 * cbSceneParam._m0[89u].x));
    float _1570 = fma(_1546, cbSceneParam._m0[90u].z, fma(_1545, cbSceneParam._m0[90u].y, _1544 * cbSceneParam._m0[90u].x));
    float _1573 = fma(_1546, cbSceneParam._m0[91u].z, fma(_1545, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1544));
    float _1588 = _844 * 0.5;
    float _1589 = _845 * 0.5;
    float _1590 = _846 * 0.5;
    float _1591 = dot(vec4(_1588, _1589, _1590, 1.0), vec4(_1522, _1525, _1528, _1531));
    float _1594 = dot(vec4(_1588, _1589, _1590, 1.0), vec4(_1521, _1524, _1527, _1530));
    float _1597 = dot(vec4(_1588, _1589, _1590, 1.0), vec4(_1520, _1523, _1526, _1529));
    float _1631;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1604 = dot(vec4(_1588, _1589, _1590, 1.0), vec4(_1210, _1214, _1217, _1220));
        float _1608 = dot(vec4(_1588, _1589, _1590, 1.0), vec4(_1212, _1215, _1218, _1221));
        float _1612 = dot(vec4(_1588, _1589, _1590, 1.0), vec4(_1213, _1216, _1219, _1222));
        float _1619 = dot(vec4(cbModelParam._m0[39u]), vec4(_1588, _1589, _1590, 1.0));
        _1631 = dot(vec3(isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0)), isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0)), isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1619) ? 0.0 : (isnan(0.0) ? _1619 : max(0.0, _1619))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1631 = 1.0;
    }
    float _1642;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1633 = dot(vec4(cbModelParam._m0[40u]), vec4(_1588, _1589, _1590, 1.0));
        _1642 = dot(vec3(isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0)), isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0)), isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1633) ? 0.0 : (isnan(0.0) ? _1633 : max(0.0, _1633))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1642 = 1.0;
    }
    float _1646 = (_1642 * cbModelParam._m0[1u].x) + (_1631 * (1.0 - cbModelParam._m0[1u].x));
    float _1656 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _673);
    float _1657 = isnan(_1656) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1656 : min(cbModelParam._m0[25u].z, _1656));
    float _1737;
    float _1739;
    float _1741;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1704 = fma(_908, cbModelParam._m0[13u].z, fma(_904, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _900)) + cbModelParam._m0[13u].w;
        float _1708 = fma(_908, cbModelParam._m0[14u].z, fma(_904, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _900)) + cbModelParam._m0[14u].w;
        float _1712 = fma(_908, cbModelParam._m0[15u].z, fma(_904, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _900)) + cbModelParam._m0[15u].w;
        float _1715 = fma(_846, cbModelParam._m0[13u].z, fma(_845, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _844));
        float _1718 = fma(_846, cbModelParam._m0[14u].z, fma(_845, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _844));
        float _1721 = fma(_846, cbModelParam._m0[15u].z, fma(_845, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _844));
        float _1749;
        if (_1715 > 0.0)
        {
            _1749 = abs((1.0 - _1704) / _1715);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1715 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1704 + 1.0) / _1715);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1749 = frontier_phi_14_12_ladder;
        }
        float _1954;
        if (_1718 > 0.0)
        {
            _1954 = abs((1.0 - _1708) / _1718);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1718 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1708 + 1.0) / _1718);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1954 = frontier_phi_23_19_ladder;
        }
        float _2208;
        if (_1721 > 0.0)
        {
            _2208 = abs((1.0 - _1712) / _1721);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1721 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1712 + 1.0) / _1721);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2208 = frontier_phi_35_30_ladder;
        }
        float _2210 = isnan(_1954) ? _1749 : (isnan(_1749) ? _1954 : min(_1749, _1954));
        float _2211 = isnan(_2208) ? _2210 : (isnan(_2210) ? _2208 : min(_2210, _2208));
        float _2215 = (_2211 * _1715) + _1704;
        float _2216 = (_2211 * _1718) + _1708;
        float _2217 = (_2211 * _1721) + _1712;
        float _2218 = _2211 * 9.9999997473787516355514526367188e-05;
        float _2220 = (-1.0) - _2218;
        float _2222 = _2218 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2217 > _2222) || ((_2217 < _2220) || ((_2216 > _2222) || ((_2216 < _2220) || ((_2215 < _2220) || (_2215 > _2222))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2345 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2217, cbModelParam._m0[9u].z, fma(_2216, cbModelParam._m0[9u].y, _2215 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2217, cbModelParam._m0[10u].z, fma(_2216, cbModelParam._m0[10u].y, _2215 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2217, cbModelParam._m0[11u].z, fma(_2216, cbModelParam._m0[11u].y, _2215 * cbModelParam._m0[11u].x))), _1657);
            frontier_phi_13_35_ladder = _2345.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2345.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2345.x * cbModelParam._m0[1u].y;
        }
        _1737 = frontier_phi_13_35_ladder_2;
        _1739 = frontier_phi_13_35_ladder_1;
        _1741 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1725 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_844, _845, _846), _1657);
        _1737 = _1725.x * cbModelParam._m0[1u].y;
        _1739 = _1725.y * cbModelParam._m0[1u].y;
        _1741 = _1725.z * cbModelParam._m0[1u].y;
    }
    float _1745 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _673);
    float _1746 = isnan(_1745) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1745 : min(cbModelParam._m0[25u].w, _1745));
    float _1837;
    float _1839;
    float _1841;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1801 = fma(_908, cbModelParam._m0[21u].z, fma(_904, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _900)) + cbModelParam._m0[21u].w;
        float _1805 = fma(_908, cbModelParam._m0[22u].z, fma(_904, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _900)) + cbModelParam._m0[22u].w;
        float _1809 = fma(_908, cbModelParam._m0[23u].z, fma(_904, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _900)) + cbModelParam._m0[23u].w;
        float _1812 = fma(_846, cbModelParam._m0[21u].z, fma(_845, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _844));
        float _1815 = fma(_846, cbModelParam._m0[22u].z, fma(_845, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _844));
        float _1818 = fma(_846, cbModelParam._m0[23u].z, fma(_845, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _844));
        float _1959;
        if (_1812 > 0.0)
        {
            _1959 = abs((1.0 - _1801) / _1812);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1812 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1801 + 1.0) / _1812);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1959 = frontier_phi_25_21_ladder;
        }
        float _2235;
        if (_1815 > 0.0)
        {
            _2235 = abs((1.0 - _1805) / _1815);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1815 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1805 + 1.0) / _1815);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2235 = frontier_phi_37_32_ladder;
        }
        float _2448;
        if (_1818 > 0.0)
        {
            _2448 = abs((1.0 - _1809) / _1818);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1818 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1809 + 1.0) / _1818);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2448 = frontier_phi_46_43_ladder;
        }
        float _2450 = isnan(_2235) ? _1959 : (isnan(_1959) ? _2235 : min(_1959, _2235));
        float _2451 = isnan(_2448) ? _2450 : (isnan(_2450) ? _2448 : min(_2450, _2448));
        float _2455 = (_2451 * _1812) + _1801;
        float _2456 = (_2451 * _1815) + _1805;
        float _2457 = (_2451 * _1818) + _1809;
        float _2458 = _2451 * 9.9999997473787516355514526367188e-05;
        float _2459 = (-1.0) - _2458;
        float _2461 = _2458 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2457 > _2461) || ((_2457 < _2459) || ((_2456 > _2461) || ((_2456 < _2459) || ((_2455 < _2459) || (_2455 > _2461))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2656 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2457, cbModelParam._m0[17u].z, fma(_2456, cbModelParam._m0[17u].y, _2455 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2457, cbModelParam._m0[18u].z, fma(_2456, cbModelParam._m0[18u].y, _2455 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2457, cbModelParam._m0[19u].z, fma(_2456, cbModelParam._m0[19u].y, _2455 * cbModelParam._m0[19u].x))), _1746);
            frontier_phi_22_46_ladder = _2656.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2656.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2656.x * cbModelParam._m0[1u].z;
        }
        _1837 = frontier_phi_22_46_ladder_2;
        _1839 = frontier_phi_22_46_ladder_1;
        _1841 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1821 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_844, _845, _846), _1746);
        _1837 = _1821.x * cbModelParam._m0[1u].z;
        _1839 = _1821.y * cbModelParam._m0[1u].z;
        _1841 = _1821.z * cbModelParam._m0[1u].z;
    }
    float _1854 = (((_871 * _821) + _872) * _836) * ((cbModelParam._m0[1u].w * (_1837 - _1737)) + _1737);
    float _1856 = (((_871 * _823) + _872) * _836) * ((cbModelParam._m0[1u].w * (_1839 - _1739)) + _1739);
    float _1858 = (((_871 * _824) + _872) * _836) * ((cbModelParam._m0[1u].w * (_1841 - _1741)) + _1741);
    float _1861 = fma(_1858, cbSceneParam._m0[89u].z, fma(_1856, cbSceneParam._m0[89u].y, _1854 * cbSceneParam._m0[89u].x));
    float _1864 = fma(_1858, cbSceneParam._m0[90u].z, fma(_1856, cbSceneParam._m0[90u].y, _1854 * cbSceneParam._m0[90u].x));
    float _1867 = fma(_1858, cbSceneParam._m0[91u].z, fma(_1856, cbSceneParam._m0[91u].y, _1854 * cbSceneParam._m0[91u].x));
    uvec4 _1877 = floatBitsToUint(cbInstanceData._m0[_796 + 5u]);
    uint _1879 = _1877.x * 14u;
    uint _1880 = _1879 + 13u;
    float _1887 = _836 + (-1.0);
    float _1892 = (cbLight._m0[_1880].x * _1887) + 1.0;
    float _1893 = (cbLight._m0[_1880].y * _1887) + 1.0;
    float _1894 = (cbLight._m0[_1880].z * _1887) + 1.0;
    float _1895 = (cbLight._m0[_1880].w * _1887) + 1.0;
    uint _1896 = _1879 + 5u;
    float _1902 = isnan(1.0) ? _1893 : (isnan(_1893) ? 1.0 : min(_1893, 1.0));
    uint _1906 = _1879 + 4u;
    float _1913 = isnan(1.0) ? _1892 : (isnan(_1892) ? 1.0 : min(_1892, 1.0));
    uint _1917 = _1879 | 1u;
    float _1928 = dot(vec3(cbLight._m0[_1879].xyz), vec3(_670, _671, _672));
    float _1931 = dot(vec3(cbLight._m0[_1917].xyz), vec3(_670, _671, _672));
    float _4052 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
    float _4063 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
    float _1936 = (isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0))) * 0.3183098733425140380859375;
    float _1938 = (isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0))) * 0.3183098733425140380859375;
    float _1945 = ((cbLight._m0[_1896].x * _1902) * _1938) + ((cbLight._m0[_1906].x * _1913) * _1936);
    float _1946 = ((_1902 * cbLight._m0[_1896].y) * _1938) + ((_1913 * cbLight._m0[_1906].y) * _1936);
    float _1947 = ((_1902 * cbLight._m0[_1896].z) * _1938) + ((_1913 * cbLight._m0[_1906].z) * _1936);
    uvec4 _1951 = floatBitsToUint(cbLight._m0[_1879 + 12u]);
    bool _1953 = _1951.x == 0u;
    float _1964;
    float _1966;
    float _1968;
    if (_1953)
    {
        _1964 = _1945;
        _1966 = _1946;
        _1968 = _1947;
    }
    else
    {
        uint _1972 = _1879 + 6u;
        float _1988 = (dot(vec3(cbLight._m0[_1879 + 2u].xyz), vec3(_670, _671, _672)) * 0.5) + 0.5;
        float _1989 = _1988 * _1988;
        float _4074 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
        float _1990 = isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0));
        float _1991 = isnan(1.0) ? _1894 : (isnan(_1894) ? 1.0 : min(_1894, 1.0));
        _1964 = (((cbLight._m0[_1972].x * 0.3183098733425140380859375) * _1990) * _1991) + _1945;
        _1966 = (((cbLight._m0[_1972].y * 0.3183098733425140380859375) * _1990) * _1991) + _1946;
        _1968 = (((cbLight._m0[_1972].z * 0.3183098733425140380859375) * _1990) * _1991) + _1947;
    }
    bool _1971 = _1951.y == 0u;
    float _2009;
    float _2011;
    float _2013;
    if (_1971)
    {
        _2009 = _1964;
        _2011 = _1966;
        _2013 = _1968;
    }
    else
    {
        uint _2179 = _1879 + 7u;
        float _2195 = (dot(vec3(cbLight._m0[_1879 + 3u].xyz), vec3(_670, _671, _672)) * 0.5) + 0.5;
        float _2196 = _2195 * _2195;
        float _4090 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
        float _2197 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _2198 = isnan(1.0) ? _1895 : (isnan(_1895) ? 1.0 : min(_1895, 1.0));
        _2009 = (((cbLight._m0[_2179].x * 0.3183098733425140380859375) * _2197) * _2198) + _1964;
        _2011 = (((cbLight._m0[_2179].y * 0.3183098733425140380859375) * _2197) * _2198) + _1966;
        _2013 = (((cbLight._m0[_2179].z * 0.3183098733425140380859375) * _2197) * _2198) + _1968;
    }
    uint _2016 = _1879 + 8u;
    float _2029 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1879].w)) * _673) * 0.949999988079071044921875);
    float _2030 = _2029 * _2029;
    float _2031 = cbLight._m0[_1879].x + _750;
    float _2032 = cbLight._m0[_1879].y + _751;
    float _2033 = cbLight._m0[_1879].z + _752;
    float _2037 = inversesqrt(dot(vec3(_2031, _2032, _2033), vec3(_2031, _2032, _2033)));
    float _2038 = _2037 * _2031;
    float _2039 = _2037 * _2032;
    float _2040 = _2037 * _2033;
    float _2041 = dot(vec3(_670, _671, _672), vec3(cbLight._m0[_1879].xyz));
    float _4106 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
    float _2044 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _4117 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
    float _2045 = isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0));
    float _2046 = dot(vec3(_670, _671, _672), vec3(_2038, _2039, _2040));
    float _4128 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
    float _2049 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
    float _2050 = dot(vec3(cbLight._m0[_1879].xyz), vec3(_2038, _2039, _2040));
    float _4139 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2054 = _2030 * _2030;
    float _2058 = ((_2049 * _2049) * (_2054 + (-1.0))) + 1.0;
    float _2066 = exp2(log2(1.0 - (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0)))) * 5.0);
    float _2067 = 0.959999978542327880859375 - _818;
    float _2069 = 0.959999978542327880859375 - _819;
    float _2070 = 0.959999978542327880859375 - _820;
    float _2077 = 1.0 - _2030;
    float _2088 = (0.5 / (((_2045 * ((_2044 * _2077) + _2030)) + 9.9999999392252902907785028219223e-09) + (((_2045 * _2077) + _2030) * _2044))) * _2044;
    float _4150 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2090 = (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0))) * (_2054 / ((_2058 * _2058) * 3.141590118408203125));
    uint _2101 = _1879 + 9u;
    float _2112 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1917].w)) * _673) * 0.949999988079071044921875);
    float _2113 = _2112 * _2112;
    float _2114 = cbLight._m0[_1917].x + _750;
    float _2115 = cbLight._m0[_1917].y + _751;
    float _2116 = cbLight._m0[_1917].z + _752;
    float _2120 = inversesqrt(dot(vec3(_2114, _2115, _2116), vec3(_2114, _2115, _2116)));
    float _2121 = _2120 * _2114;
    float _2122 = _2120 * _2115;
    float _2123 = _2120 * _2116;
    float _2124 = dot(vec3(_670, _671, _672), vec3(cbLight._m0[_1917].xyz));
    float _4161 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _2127 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
    float _2128 = dot(vec3(_670, _671, _672), vec3(_2121, _2122, _2123));
    float _4172 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
    float _2131 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
    float _2132 = dot(vec3(cbLight._m0[_1917].xyz), vec3(_2121, _2122, _2123));
    float _4183 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _2136 = _2113 * _2113;
    float _2140 = ((_2131 * _2131) * (_2136 + (-1.0))) + 1.0;
    float _2147 = exp2(log2(1.0 - (isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0)))) * 5.0);
    float _2154 = 1.0 - _2113;
    float _2164 = (0.5 / (((_2045 * ((_2127 * _2154) + _2113)) + 9.9999999392252902907785028219223e-09) + (((_2045 * _2154) + _2113) * _2127))) * _2127;
    float _4194 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
    float _2166 = (isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0))) * (_2136 / ((_2140 * _2140) * 3.141590118408203125));
    float _2176 = (((((_2147 * _2067) + _821) * cbLight._m0[_2101].x) * _2166) * _1902) + (((((_2066 * _2067) + _821) * cbLight._m0[_2016].x) * _2090) * _1913);
    float _2177 = (((((_2147 * _2069) + _823) * cbLight._m0[_2101].y) * _2166) * _1902) + (((((_2066 * _2069) + _823) * cbLight._m0[_2016].y) * _2090) * _1913);
    float _2178 = (((((_2147 * _2070) + _824) * cbLight._m0[_2101].z) * _2166) * _1902) + (((((_2066 * _2070) + _824) * cbLight._m0[_2016].z) * _2090) * _1913);
    float _2240;
    float _2242;
    float _2244;
    if (_1953)
    {
        _2240 = _2176;
        _2242 = _2177;
        _2244 = _2178;
    }
    else
    {
        uint _2246 = _1879 + 2u;
        uint _2250 = _1879 + 10u;
        float _2264 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2246].w)) * _673) * 0.949999988079071044921875);
        float _2265 = _2264 * _2264;
        float _2266 = cbLight._m0[_2246].x + _750;
        float _2267 = cbLight._m0[_2246].y + _751;
        float _2268 = cbLight._m0[_2246].z + _752;
        float _2272 = inversesqrt(dot(vec3(_2266, _2267, _2268), vec3(_2266, _2267, _2268)));
        float _2273 = _2272 * _2266;
        float _2274 = _2272 * _2267;
        float _2275 = _2272 * _2268;
        float _2276 = dot(vec3(_670, _671, _672), vec3(cbLight._m0[_2246].xyz));
        float _4205 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
        float _2279 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
        float _2280 = dot(vec3(_670, _671, _672), vec3(_2273, _2274, _2275));
        float _4216 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
        float _2283 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
        float _2284 = dot(vec3(cbLight._m0[_2246].xyz), vec3(_2273, _2274, _2275));
        float _4227 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
        float _2288 = _2265 * _2265;
        float _2292 = ((_2283 * _2283) * (_2288 + (-1.0))) + 1.0;
        float _2299 = exp2(log2(1.0 - (isnan(1.0) ? _4227 : (isnan(_4227) ? 1.0 : min(_4227, 1.0)))) * 5.0);
        float _2306 = 1.0 - _2265;
        float _2316 = (0.5 / (((_2045 * ((_2279 * _2306) + _2265)) + 9.9999999392252902907785028219223e-09) + (((_2045 * _2306) + _2265) * _2279))) * _2279;
        float _4238 = isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0));
        float _2318 = (isnan(1.0) ? _4238 : (isnan(_4238) ? 1.0 : min(_4238, 1.0))) * (_2288 / ((_2292 * _2292) * 3.141590118408203125));
        float _2319 = isnan(1.0) ? _1894 : (isnan(_1894) ? 1.0 : min(_1894, 1.0));
        _2240 = (((((_2299 * _2067) + _821) * cbLight._m0[_2250].x) * _2318) * _2319) + _2176;
        _2242 = (((((_2299 * _2069) + _823) * cbLight._m0[_2250].y) * _2318) * _2319) + _2177;
        _2244 = (((((_2299 * _2070) + _824) * cbLight._m0[_2250].z) * _2318) * _2319) + _2178;
    }
    float _2354;
    float _2356;
    float _2358;
    if (_1971)
    {
        _2354 = _2240;
        _2356 = _2242;
        _2358 = _2244;
    }
    else
    {
        uint _2365 = _1879 + 3u;
        uint _2369 = _1879 + 11u;
        float _2383 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2365].w)) * _673) * 0.949999988079071044921875);
        float _2384 = _2383 * _2383;
        float _2385 = cbLight._m0[_2365].x + _750;
        float _2386 = cbLight._m0[_2365].y + _751;
        float _2387 = cbLight._m0[_2365].z + _752;
        float _2391 = inversesqrt(dot(vec3(_2385, _2386, _2387), vec3(_2385, _2386, _2387)));
        float _2392 = _2391 * _2385;
        float _2393 = _2391 * _2386;
        float _2394 = _2391 * _2387;
        float _2395 = dot(vec3(_670, _671, _672), vec3(cbLight._m0[_2365].xyz));
        float _4254 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
        float _2398 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
        float _2399 = dot(vec3(_670, _671, _672), vec3(_2392, _2393, _2394));
        float _4265 = isnan(0.0) ? _2399 : (isnan(_2399) ? 0.0 : max(_2399, 0.0));
        float _2402 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
        float _2403 = dot(vec3(cbLight._m0[_2365].xyz), vec3(_2392, _2393, _2394));
        float _4276 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
        float _2407 = _2384 * _2384;
        float _2411 = ((_2402 * _2402) * (_2407 + (-1.0))) + 1.0;
        float _2418 = exp2(log2(1.0 - (isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0)))) * 5.0);
        float _2425 = 1.0 - _2384;
        float _2435 = (0.5 / (((_2045 * ((_2398 * _2425) + _2384)) + 9.9999999392252902907785028219223e-09) + (((_2045 * _2425) + _2384) * _2398))) * _2398;
        float _4287 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
        float _2437 = (isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0))) * (_2407 / ((_2411 * _2411) * 3.141590118408203125));
        float _2438 = isnan(1.0) ? _1895 : (isnan(_1895) ? 1.0 : min(_1895, 1.0));
        _2354 = (((((_2418 * _2067) + _821) * cbLight._m0[_2369].x) * _2437) * _2438) + _2240;
        _2356 = (((((_2418 * _2069) + _823) * cbLight._m0[_2369].y) * _2437) * _2438) + _2242;
        _2358 = (((((_2418 * _2070) + _824) * cbLight._m0[_2369].z) * _2437) * _2438) + _2244;
    }
    float _2573;
    float _2575;
    float _2577;
    float _2579;
    float _2581;
    float _2583;
    if (_1877.y == 0u)
    {
        float _2513 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2514 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2513;
        float _2515 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2513;
        float _2516 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2513;
        uvec4 _2528 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2529 = _2528.x;
        uint _2540 = uint((float(_2528.y) * floor(float(uint(cbSceneParam._m0[85u].y * _759) / _2529))) + floor(float(uint(cbSceneParam._m0[85u].x * _758) / _2529)));
        float _2550 = (log2(_2516 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2551 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
        uint _2554 = uint(isnan(14.0) ? _2551 : (isnan(_2551) ? 14.0 : min(_2551, 14.0)));
        uvec4 _2559 = texelFetch(g_lightClusterGridBuffer, int(((_2554 << 2u) + (_2540 << 6u)) >> 2u));
        uint _2560 = _2559.x;
        uint _2561 = _2528.z;
        float _2661;
        float _2663;
        float _2665;
        float _2667;
        float _2669;
        float _2671;
        if (((((1u << ((_2561 >> 4u) & 15u)) + 4294967295u) & _2560) == 0u) || ((_2561 & 240u) == 0u))
        {
            _2661 = 0.0;
            _2663 = 0.0;
            _2665 = 0.0;
            _2667 = 0.0;
            _2669 = 0.0;
            _2671 = 0.0;
        }
        else
        {
            float _2662;
            float _2664;
            float _2666;
            float _2668;
            float _2670;
            float _2672;
            float _2806 = 0.0;
            float _2807 = 0.0;
            float _2808 = 0.0;
            float _2809 = 0.0;
            float _2810 = 0.0;
            float _2811 = 0.0;
            uint _2812 = 0u;
            uint _2821;
            bool _2822;
            for (;;)
            {
                _2821 = texelFetch(g_lightClassification, int((((_2554 << 5u) + (_2540 << 9u)) + (_2812 << 2u)) >> 2u)).x;
                _2822 = _2821 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2822)
                {
                    frontier_phi_61_pred = _2806;
                    frontier_phi_61_pred_1 = _2811;
                    frontier_phi_61_pred_2 = _2810;
                    frontier_phi_61_pred_3 = _2809;
                    frontier_phi_61_pred_4 = _2808;
                    frontier_phi_61_pred_5 = _2807;
                }
                else
                {
                    float _2930;
                    float _2931;
                    float _2932;
                    float _2933;
                    float _2934;
                    float _2935;
                    uint _2936;
                    _2930 = _2806;
                    _2931 = _2807;
                    _2932 = _2808;
                    _2933 = _2809;
                    _2934 = _2810;
                    _2935 = _2811;
                    _2936 = _2821;
                    float _2862;
                    float _2863;
                    float _2864;
                    float _2865;
                    float _2866;
                    float _2867;
                    for (;;)
                    {
                        uint _2940 = uint(findLSB(_2936)) + (_2812 << 5u);
                        uint _2937 = (_2936 + 4294967295u) & _2936;
                        uint _2942 = _2940 * 48u;
                        vec4 _2956 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2942)).x, texelFetch(g_PointLightRenderingBuffer, int(_2942 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2942 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2942 + 3u)).x));
                        uint _2962 = (_2940 * 48u) + 4u;
                        vec4 _2975 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2962)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 3u)).x));
                        uint _2981 = (_2940 * 48u) + 8u;
                        vec3 _2992 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2981)).x, texelFetch(g_PointLightRenderingBuffer, int(_2981 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2981 + 2u)).x));
                        float _2996 = _2956.x - _2514;
                        float _2997 = _2956.y - _2515;
                        float _2998 = _2956.z - _2516;
                        float _2999 = dot(vec3(_2996, _2997, _2998), vec3(_2996, _2997, _2998));
                        float _3002 = inversesqrt(_2999);
                        float _3003 = _3002 * _2996;
                        float _3004 = _3002 * _2997;
                        float _3005 = _3002 * _2998;
                        float _3006 = dot(vec3(_777, _780, _783), vec3(_3003, _3004, _3005));
                        float _3011 = 1.0 - (_2999 * _2956.w);
                        float _4313 = isnan(0.0) ? _3011 : (isnan(_3011) ? 0.0 : max(_3011, 0.0));
                        float _3012 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
                        float _3013 = sqrt(_2999) * _2975.w;
                        float _3016 = 1.39999997615814208984375 / (_3013 + 1.39999997615814208984375);
                        float _3017 = _3016 * _3016;
                        float _3020 = ((1.0 - _3017) * _3006) + _3017;
                        float _3023 = _3013 * _3013;
                        float _3027 = ((isnan(0.0) ? _3020 : (isnan(_3020) ? 0.0 : max(_3020, 0.0))) * _3012) / ((_3023 * 0.699999988079071044921875) + 1.0);
                        float _3031 = (-0.0) - _2514;
                        float _3032 = (-0.0) - _2515;
                        float _3033 = (-0.0) - _2516;
                        float _3037 = inversesqrt(dot(vec3(_3031, _3032, _3033), vec3(_3031, _3032, _3033)));
                        float _3038 = _3037 * _3031;
                        float _3039 = _3037 * _3032;
                        float _3040 = _3037 * _3033;
                        float _3048 = exp2(log2(1.0 / ((_3023 * 3.5) + 5.0)) * 0.25);
                        float _3049 = 1.0 - _852;
                        float _3056 = sqrt(1.0 - ((1.0 - (_3049 * _3049)) * (1.0 - (_3048 * _3048))));
                        float _3057 = _3056 * _3056;
                        float _3058 = _3057 * _3057;
                        float _3059 = _3038 + _3003;
                        float _3060 = _3039 + _3004;
                        float _3061 = _3040 + _3005;
                        float _3065 = inversesqrt(dot(vec3(_3059, _3060, _3061), vec3(_3059, _3060, _3061)));
                        float _3069 = dot(vec3(_777, _780, _783), vec3(_3038, _3039, _3040));
                        float _4329 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
                        float _3072 = isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0));
                        float _3073 = dot(vec3(_777, _780, _783), vec3(_3065 * _3059, _3065 * _3060, _3065 * _3061));
                        float _4340 = isnan(0.0) ? _3073 : (isnan(_3073) ? 0.0 : max(_3073, 0.0));
                        float _3076 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
                        float _3080 = ((_3076 * _3076) * (_3058 + (-1.0))) + 1.0;
                        float _3081 = _3016 * _3057;
                        float _3082 = _3081 * _3081;
                        float _3085 = ((1.0 - _3082) * _3006) + _3082;
                        float _4351 = isnan(0.0) ? _3085 : (isnan(_3085) ? 0.0 : max(_3085, 0.0));
                        float _3086 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
                        float _3087 = 1.0 - _3057;
                        float _3097 = (0.5 / (((_3086 * ((_3072 * _3087) + _3057)) + 9.9999999392252902907785028219223e-09) + (((_3086 * _3087) + _3057) * _3072))) * _3086;
                        float _4362 = isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0));
                        float _3108 = (((_3058 * 3.1415927410125732421875) * (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0)))) / ((_3080 * _3080) * ((_3023 * 2.1991131305694580078125) + 3.141590118408203125))) * _3012;
                        _2865 = (_3027 * _2975.x) + _2933;
                        _2866 = (_3027 * _2975.y) + _2934;
                        _2867 = (_3027 * _2975.z) + _2935;
                        _2862 = (_3108 * _2992.x) + _2930;
                        _2863 = (_3108 * _2992.y) + _2931;
                        _2864 = (_3108 * _2992.z) + _2932;
                        if (_2937 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2930 = _2862;
                            _2931 = _2863;
                            _2932 = _2864;
                            _2933 = _2865;
                            _2934 = _2866;
                            _2935 = _2867;
                            _2936 = _2937;
                        }
                    }
                    frontier_phi_61_pred = _2862;
                    frontier_phi_61_pred_1 = _2867;
                    frontier_phi_61_pred_2 = _2866;
                    frontier_phi_61_pred_3 = _2865;
                    frontier_phi_61_pred_4 = _2864;
                    frontier_phi_61_pred_5 = _2863;
                }
                _2662 = frontier_phi_61_pred;
                _2672 = frontier_phi_61_pred_1;
                _2670 = frontier_phi_61_pred_2;
                _2668 = frontier_phi_61_pred_3;
                _2666 = frontier_phi_61_pred_4;
                _2664 = frontier_phi_61_pred_5;
                uint _2813 = _2812 + 1u;
                if (_2813 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2806 = _2662;
                    _2807 = _2664;
                    _2808 = _2666;
                    _2809 = _2668;
                    _2810 = _2670;
                    _2811 = _2672;
                    _2812 = _2813;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2661 = _2662;
            _2663 = _2664;
            _2665 = _2666;
            _2667 = _2668;
            _2669 = _2670;
            _2671 = _2672;
        }
        uvec4 _2675 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2676 = _2675.z;
        uint _2678 = (_2676 >> 8u) & 15u;
        float _2774;
        float _2776;
        float _2778;
        float _2780;
        float _2782;
        float _2784;
        if (((4294967295u << _2678) & _2560) == 0u)
        {
            _2774 = _2661;
            _2776 = _2663;
            _2778 = _2665;
            _2780 = _2667;
            _2782 = _2669;
            _2784 = _2671;
        }
        else
        {
            float _2799 = inversesqrt(dot(vec3(_2514, _2515, _2516), vec3(_2514, _2515, _2516)));
            float _2800 = _2799 * _2514;
            float _2801 = _2799 * _2515;
            float _2802 = _2799 * _2516;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2678 < ((_2676 >> 12u) & 15u))
            {
                float _2775;
                float _2777;
                float _2779;
                float _2781;
                float _2783;
                float _2785;
                float _2913 = _2661;
                float _2914 = _2663;
                float _2915 = _2665;
                float _2916 = _2667;
                float _2917 = _2669;
                float _2918 = _2671;
                uint _2919 = _2678;
                uint _2928;
                bool _2929;
                for (;;)
                {
                    _2928 = texelFetch(g_lightClassification, int((((_2554 << 5u) + (_2540 << 9u)) + (_2919 << 2u)) >> 2u)).x;
                    _2929 = _2928 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2929)
                    {
                        frontier_phi_67_pred = _2916;
                        frontier_phi_67_pred_1 = _2917;
                        frontier_phi_67_pred_2 = _2918;
                        frontier_phi_67_pred_3 = _2915;
                        frontier_phi_67_pred_4 = _2914;
                        frontier_phi_67_pred_5 = _2913;
                    }
                    else
                    {
                        float _3113;
                        float _3114;
                        float _3115;
                        float _3116;
                        float _3117;
                        float _3118;
                        float _3407;
                        float _3408;
                        float _3409;
                        float _3410;
                        float _3411;
                        float _3412;
                        float _3126 = _2913;
                        float _3127 = _2914;
                        float _3128 = _2915;
                        float _3129 = _2916;
                        float _3130 = _2917;
                        float _3131 = _2918;
                        uint _3132 = _2928;
                        uint _3133;
                        vec4 _3158;
                        float _3159;
                        vec4 _3174;
                        vec3 _3186;
                        vec4 _3201;
                        vec4 _3216;
                        float _3263;
                        bool _3264;
                        for (;;)
                        {
                            uint _3143 = ((_2919 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3132));
                            _3133 = (_3132 + 4294967295u) & _3132;
                            uint _3145 = _3143 * 40u;
                            _3158 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3145)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 3u)).x));
                            _3159 = _3158.w;
                            uint _3161 = (_3143 * 40u) + 4u;
                            _3174 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3161)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3161 + 3u)).x));
                            uint _3176 = (_3143 * 40u) + 8u;
                            _3186 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3176)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3176 + 2u)).x));
                            uint _3188 = (_3143 * 40u) + 16u;
                            _3201 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3188)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3188 + 3u)).x));
                            uint _3203 = (_3143 * 40u) + 20u;
                            _3216 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3203)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3203 + 3u)).x));
                            uint _3219 = (_3143 * 40u) + 24u;
                            vec4 _3232 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3219)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3219 + 3u)).x));
                            uint _3238 = (_3143 * 40u) + 28u;
                            vec4 _3251 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3238)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3238 + 3u)).x));
                            _3263 = fma(_2516, _3251.z, fma(_2515, _3251.y, _3251.x * _2514)) + _3251.w;
                            _3264 = !((fma(_2516, _3232.z, fma(_2515, _3232.y, _3232.x * _2514)) + _3232.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3264)
                            {
                                float _3291 = _3158.x - _2514;
                                float _3292 = _3158.y - _2515;
                                float _3293 = _3158.z - _2516;
                                float _3294 = dot(vec3(_3291, _3292, _3293), vec3(_3291, _3292, _3293));
                                float _3297 = inversesqrt(_3294);
                                float _3298 = _3297 * _3291;
                                float _3299 = _3297 * _3292;
                                float _3300 = _3297 * _3293;
                                float _3304 = 1.0 - (_3294 / (_3159 * _3159));
                                float _4373 = isnan(0.0) ? _3304 : (isnan(_3304) ? 0.0 : max(_3304, 0.0));
                                float _3305 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
                                float _3309 = sqrt(_3294) * _3174.w;
                                float _3311 = 1.39999997615814208984375 / (_3309 + 1.39999997615814208984375);
                                float _3312 = _3311 * _3311;
                                float _3315 = ((1.0 - _3312) * dot(vec3(_3298, _3299, _3300), vec3(_777, _780, _783))) + _3312;
                                float _3318 = _3309 * _3309;
                                float _3322 = (fma(_2516, _3201.z, fma(_2515, _3201.y, _3201.x * _2514)) + _3201.w) / _3263;
                                float _3323 = (fma(_2516, _3216.z, fma(_2515, _3216.y, _3216.x * _2514)) + _3216.w) / _3263;
                                float _3327 = 1.0 - dot(vec2(_3322, _3323), vec2(_3322, _3323));
                                float _4389 = isnan(0.0) ? _3327 : (isnan(_3327) ? 0.0 : max(_3327, 0.0));
                                float _3328 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
                                float _3329 = _3328 * (((isnan(0.0) ? _3315 : (isnan(_3315) ? 0.0 : max(_3315, 0.0))) * _3305) / ((_3318 * 0.699999988079071044921875) + 1.0));
                                float _3341 = exp2(log2(1.0 / ((_3318 * 3.5) + 5.0)) * 0.25);
                                float _3342 = 1.0 - _852;
                                float _3349 = sqrt(1.0 - ((1.0 - (_3342 * _3342)) * (1.0 - (_3341 * _3341))));
                                float _3350 = _3349 * _3349;
                                float _3351 = _3350 * _3350;
                                float _3352 = _3298 - _2800;
                                float _3353 = _3299 - _2801;
                                float _3354 = _3300 - _2802;
                                float _3358 = inversesqrt(dot(vec3(_3352, _3353, _3354), vec3(_3352, _3353, _3354)));
                                float _3362 = dot(vec3(_777, _780, _783), vec3((-0.0) - _2800, (-0.0) - _2801, (-0.0) - _2802));
                                float _4400 = isnan(0.0) ? _3362 : (isnan(_3362) ? 0.0 : max(_3362, 0.0));
                                float _3365 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
                                float _3366 = dot(vec3(_777, _780, _783), vec3(_3358 * _3352, _3358 * _3353, _3358 * _3354));
                                float _4411 = isnan(0.0) ? _3366 : (isnan(_3366) ? 0.0 : max(_3366, 0.0));
                                float _3369 = isnan(1.0) ? _4411 : (isnan(_4411) ? 1.0 : min(_4411, 1.0));
                                float _3373 = ((_3369 * _3369) * (_3351 + (-1.0))) + 1.0;
                                float _3374 = _3311 * _3350;
                                float _3375 = _3374 * _3374;
                                float _3381 = ((1.0 - _3375) * dot(vec3(_777, _780, _783), vec3(_3298, _3299, _3300))) + _3375;
                                float _4422 = isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0));
                                float _3382 = isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0));
                                float _3383 = 1.0 - _3350;
                                float _3393 = (0.5 / (((_3382 * ((_3365 * _3383) + _3350)) + 9.9999999392252902907785028219223e-09) + (((_3382 * _3383) + _3350) * _3365))) * _3382;
                                float _4433 = isnan(0.0) ? _3393 : (isnan(_3393) ? 0.0 : max(_3393, 0.0));
                                float _3403 = (_3328 * _3305) * (((_3351 * 3.1415927410125732421875) * (isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0)))) / ((_3373 * _3373) * ((_3318 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3403 * _3186.x;
                                frontier_phi_73_pred_1 = _3403 * _3186.y;
                                frontier_phi_73_pred_2 = _3329 * _3174.z;
                                frontier_phi_73_pred_3 = _3329 * _3174.y;
                                frontier_phi_73_pred_4 = _3329 * _3174.x;
                                frontier_phi_73_pred_5 = _3403 * _3186.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3407 = frontier_phi_73_pred;
                            _3408 = frontier_phi_73_pred_1;
                            _3412 = frontier_phi_73_pred_2;
                            _3411 = frontier_phi_73_pred_3;
                            _3410 = frontier_phi_73_pred_4;
                            _3409 = frontier_phi_73_pred_5;
                            _3116 = _3410 + _3129;
                            _3117 = _3411 + _3130;
                            _3118 = _3412 + _3131;
                            _3113 = _3407 + _3126;
                            _3114 = _3408 + _3127;
                            _3115 = _3409 + _3128;
                            if (_3133 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3126 = _3113;
                                _3127 = _3114;
                                _3128 = _3115;
                                _3129 = _3116;
                                _3130 = _3117;
                                _3131 = _3118;
                                _3132 = _3133;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3116;
                        frontier_phi_67_pred_1 = _3117;
                        frontier_phi_67_pred_2 = _3118;
                        frontier_phi_67_pred_3 = _3115;
                        frontier_phi_67_pred_4 = _3114;
                        frontier_phi_67_pred_5 = _3113;
                    }
                    _2781 = frontier_phi_67_pred;
                    _2783 = frontier_phi_67_pred_1;
                    _2785 = frontier_phi_67_pred_2;
                    _2779 = frontier_phi_67_pred_3;
                    _2777 = frontier_phi_67_pred_4;
                    _2775 = frontier_phi_67_pred_5;
                    uint _2920 = _2919 + 1u;
                    if (_2920 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2913 = _2775;
                        _2914 = _2777;
                        _2915 = _2779;
                        _2916 = _2781;
                        _2917 = _2783;
                        _2918 = _2785;
                        _2919 = _2920;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2783;
                frontier_phi_55_56_ladder_1 = _2785;
                frontier_phi_55_56_ladder_2 = _2781;
                frontier_phi_55_56_ladder_3 = _2779;
                frontier_phi_55_56_ladder_4 = _2777;
                frontier_phi_55_56_ladder_5 = _2775;
            }
            else
            {
                frontier_phi_55_56_ladder = _2669;
                frontier_phi_55_56_ladder_1 = _2671;
                frontier_phi_55_56_ladder_2 = _2667;
                frontier_phi_55_56_ladder_3 = _2665;
                frontier_phi_55_56_ladder_4 = _2663;
                frontier_phi_55_56_ladder_5 = _2661;
            }
            _2774 = frontier_phi_55_56_ladder_5;
            _2776 = frontier_phi_55_56_ladder_4;
            _2778 = frontier_phi_55_56_ladder_3;
            _2780 = frontier_phi_55_56_ladder_2;
            _2782 = frontier_phi_55_56_ladder;
            _2784 = frontier_phi_55_56_ladder_1;
        }
        float _2789 = isnan(1.0) ? _836 : (isnan(_836) ? 1.0 : min(_836, 1.0));
        _2573 = (_2789 * _2780) + _2009;
        _2575 = (_2789 * _2782) + _2011;
        _2577 = (_2789 * _2784) + _2013;
        _2579 = ((_2774 * _821) * _2789) + _2354;
        _2581 = ((_2776 * _823) * _2789) + _2356;
        _2583 = ((_2778 * _824) * _2789) + _2358;
    }
    else
    {
        _2573 = _2009;
        _2575 = _2011;
        _2577 = _2013;
        _2579 = _2354;
        _2581 = _2356;
        _2583 = _2358;
    }
    float _4449 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
    float _4460 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
    float _4471 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
    uint _2603 = _796 + 6u;
    float _2611 = _758 / cbSceneParam._m0[86u].x;
    float _2612 = _759 / cbSceneParam._m0[86u].y;
    vec4 _2626 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2611, _2612, (log2((isnan(cbSceneParam._m0[77u].w) ? _693 : (isnan(_693) ? cbSceneParam._m0[77u].w : min(_693, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2628 = _2626.x;
    float _2629 = _2626.y;
    float _2630 = _2626.z;
    float _2631 = _2626.w;
    float _2724;
    float _2726;
    float _2728;
    float _2730;
    if (_693 > cbSceneParam._m0[78u].w)
    {
        float _2686 = isnan(_693) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _693 : min(cbSceneParam._m0[80u].w, _693));
        float _2687 = _2686 / _693;
        float _2698 = _2687 * _743;
        float _2699 = _744 * _2687;
        float _2700 = (-0.0) - _2699;
        float _2702 = _2687 * _745;
        float _2704 = (cbSceneParam._m0[77u].w * _2700) / _2686;
        float _2705 = _2704 + cbSceneParam._m0[79u].w;
        float _2706 = cbSceneParam._m0[79u].w - _2699;
        float _2712 = sqrt(((_2698 * _2698) + (_2699 * _2699)) + (_2702 * _2702));
        float _2715 = (1.0 - (cbSceneParam._m0[77u].w / _2686)) * _2712;
        float _2720 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2722 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2875;
        if (abs((_2700 - _2704) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2875 = ((((_2705 > 0.0) ? exp2(_2720 * _2705) : (2.0 - exp2(_2722 * _2705))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2715;
        }
        else
        {
            float _2835 = 1.0 / cbSceneParam._m0[80u].x;
            float _2836 = isnan(_2706) ? _2705 : (isnan(_2705) ? _2706 : max(_2705, _2706));
            float _2837 = isnan(_2706) ? _2705 : (isnan(_2705) ? _2706 : min(_2705, _2706));
            float _2846 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : min(_2836, 0.0));
            float _2847 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : min(_2837, 0.0));
            _2875 = ((abs(_2712 / _2700) * cbSceneParam._m0[80u].y) * ((((_2846 - _2847) * 2.0) - ((exp2(_2720 * (isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0)))) - exp2(_2720 * (isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0))))) * _2835)) - ((exp2(_2722 * _2846) - exp2(_2722 * _2847)) * _2835))) + (_2715 * cbSceneParam._m0[80u].z);
        }
        vec4 _2877 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2611, _2612, 1.0), 0.0);
        float _2886 = exp2((_2875 * (-1.44269502162933349609375)) * (1.0 - _2877.w));
        float _2887 = log2(_2886);
        float _2903 = log2(_2631);
        _2724 = (exp2(_2903 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2887 * cbSceneParam._m0[78u].x)) * _2877.x) / cbSceneParam._m0[78u].x)) + _2628;
        _2726 = (exp2(_2903 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2887 * cbSceneParam._m0[78u].y)) * _2877.y) / cbSceneParam._m0[78u].y)) + _2629;
        _2728 = (exp2(_2903 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2887 * cbSceneParam._m0[78u].z)) * _2877.z) / cbSceneParam._m0[78u].z)) + _2630;
        _2730 = _2886 * _2631;
    }
    else
    {
        _2724 = _2628;
        _2726 = _2629;
        _2728 = _2630;
        _2730 = _2631;
    }
    float _2742 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2743 = _2742 == 3.0;
    float _2744 = log2(_2730);
    float _2751 = exp2(_2744 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0))) * (_2573 + ((isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))) * _836))) + ((_2579 + ((isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0))) * _1646)) * cbPerFrame._m0[3u].x));
    float _2752 = exp2(_2744 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0))) * (_2575 + ((isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0))) * _836))) + ((_2581 + ((isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0))) * _1646)) * cbPerFrame._m0[3u].x));
    float _2753 = exp2(_2744 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (_2577 + ((isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0))) * _836))) + ((_2583 + ((isnan(0.0) ? _1867 : (isnan(_1867) ? 0.0 : max(_1867, 0.0))) * _1646)) * cbPerFrame._m0[3u].x));
    float _2762 = (_2742 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2762 * (_2743 ? _2751 : (_2751 + (cbSceneParam._m0[72u].w * _2724)));
    SV_Target.y = _2762 * (_2743 ? _2752 : (_2752 + (cbSceneParam._m0[72u].w * _2726)));
    SV_Target.z = _2762 * (_2743 ? _2753 : (_2753 + (cbSceneParam._m0[72u].w * _2728)));
    SV_Target.w = cbInstanceData._m0[_2603].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2603].w;
}


