#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_20;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1321;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _260 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _266 = _260.x * cbMtdParam._m0[10u].x;
    float _267 = _260.y * cbMtdParam._m0[10u].y;
    float _268 = _260.z * cbMtdParam._m0[10u].z;
    vec4 _286 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _336 = cbMtdParam._m0[18u].y * texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x;
    float _347 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].x * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].y * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _336)) + 1.0;
    float _3675 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _348 = isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0));
    float _355 = (_348 * ((_286.x * cbMtdParam._m0[11u].x) - _266)) + _266;
    float _356 = (_348 * ((_286.y * cbMtdParam._m0[11u].y) - _267)) + _267;
    float _357 = (_348 * ((_286.z * cbMtdParam._m0[11u].z) - _268)) + _268;
    vec4 _375 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _402 = ((cbMtdParam._m0[17u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _336)) + 1.0;
    float _3686 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _403 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
    float _410 = (_403 * ((_375.x * cbMtdParam._m0[12u].x) - _355)) + _355;
    float _411 = (_403 * ((_375.y * cbMtdParam._m0[12u].y) - _356)) + _356;
    float _412 = (_403 * ((_375.z * cbMtdParam._m0[12u].z) - _357)) + _357;
    vec4 _429 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _454 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[18u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[18u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _336)) + 1.0;
    float _3697 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _455 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
    float _462 = (_455 * ((_429.x * cbMtdParam._m0[13u].x) - _410)) + _410;
    float _463 = (_455 * ((_429.y * cbMtdParam._m0[13u].y) - _411)) + _411;
    float _464 = (_455 * ((_429.z * cbMtdParam._m0[13u].z) - _412)) + _412;
    vec4 _484 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _513 = (TEXCOORD_5.x - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.z) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.w) + cbTextureTilingScale._m0[18u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].z + 1.0);
    float _3708 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _514 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
    float _521 = (_514 * ((_484.x * cbMtdParam._m0[14u].x) - _462)) + _462;
    float _522 = (_514 * ((_484.y * cbMtdParam._m0[14u].y) - _463)) + _463;
    float _523 = (_514 * ((_484.z * cbMtdParam._m0[14u].z) - _464)) + _464;
    vec4 _536 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _538 = _536.x;
    float _556 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _538) * _348) + _538;
    float _574 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _556) * _403) + _556;
    float _591 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _574) * _455) + _574;
    float _593 = _591 - (_591 * TEXCOORD_5.x);
    vec4 _606 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _628 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _630 = _628.x;
    float _631 = _628.y;
    float _634 = cbMtdParam._m0[17u].y * _628.z;
    vec4 _646 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _655 = (((cbMtdParam._m0[17u].x * _646.z) - _634) * _348) + _634;
    vec4 _668 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _680 = (((cbMtdParam._m0[16u].w * _668.z) - _655) * _403) + _655;
    vec4 _693 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _702 = (((cbMtdParam._m0[16u].z * _693.z) - _680) * _455) + _680;
    float _707 = ((cbMtdParam._m0[16u].x * TEXCOORD_5.x) * ((_606.z * cbMtdParam._m0[17u].z) - _702)) + _702;
    vec4 _720 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _732 = ((_646.x - _630) * _348) + _630;
    float _733 = ((_646.y - _631) * _348) + _631;
    float _738 = ((_668.x - _732) * _403) + _732;
    float _739 = ((_668.y - _733) * _403) + _733;
    float _748 = ((((_693.x - _738) * _455) + _738) * 2.0) + (-1.0);
    float _749 = ((((_693.y - _739) * _455) + _739) * 2.0) + (-1.0);
    float _750 = dot(vec2(_748, _749), vec2(_748, _749));
    float _3719 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _755 = sqrt(1.0 - (isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0))));
    float _765 = ((((_720.x * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _748) + ((((_606.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[15u].y);
    float _766 = ((((_720.y * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _749) + ((((_606.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[15u].y);
    float _769 = fma(_755, _230 * NORMAL.x, fma(_766, _237 * TANGENT.x, (_223 * _215) * _765));
    float _772 = fma(_755, _230 * NORMAL.y, fma(_766, _237 * TANGENT.y, (_223 * _216) * _765));
    float _775 = fma(_755, _230 * NORMAL.z, fma(_766, _237 * TANGENT.z, (_223 * _217) * _765));
    float _779 = inversesqrt(dot(vec3(_769, _772, _775), vec3(_769, _772, _775)));
    float _780 = _779 * _769;
    float _781 = _779 * _772;
    float _782 = _779 * _775;
    float _3730 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _783 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
    float _3741 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _3752 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _3763 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _3774 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _787 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
    float _803 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _843 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _853 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _843);
    float _854 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _843);
    float _855 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _843);
    float _859 = inversesqrt(dot(vec3(_853, _854, _855), vec3(_853, _854, _855)));
    float _860 = _853 * _859;
    float _861 = _854 * _859;
    float _862 = _855 * _859;
    float _868 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _869 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _887 = fma(_782, cbSceneParam._m0[5u].z, fma(_781, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _780));
    float _890 = fma(_782, cbSceneParam._m0[6u].z, fma(_781, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _780));
    float _893 = fma(_782, cbSceneParam._m0[7u].z, fma(_781, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _780));
    uint _906 = uint(roundEven(NORMAL.w)) * 13u;
    uint _908 = (_906 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _914 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0)))) * cbInstanceData._m0[_908].x;
    float _915 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0)))) * cbInstanceData._m0[_908].y;
    float _916 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0)))) * cbInstanceData._m0[_908].z;
    float _3785 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _917 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
    float _3796 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _918 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    float _3807 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
    float _919 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
    float _920 = 1.0 - _787;
    float _921 = _917 * _920;
    float _922 = _918 * _920;
    float _923 = _919 * _920;
    float _928 = (_917 + (-0.039999999105930328369140625)) * _787;
    float _929 = (_918 + (-0.039999999105930328369140625)) * _787;
    float _930 = (_919 + (-0.039999999105930328369140625)) * _787;
    float _931 = _928 + 0.039999999105930328369140625;
    float _933 = _929 + 0.039999999105930328369140625;
    float _934 = _930 + 0.039999999105930328369140625;
    vec4 _943 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _868, cbSceneParam._m0[86u].y * _869));
    float _946 = _943.x * TEXCOORD_5.w;
    float _947 = dot(vec3(_780, _781, _782), vec3(_860, _861, _862));
    float _950 = _947 * 2.0;
    float _954 = (_950 * _780) - _860;
    float _955 = (_950 * _781) - _861;
    float _956 = (_950 * _782) - _862;
    float _960 = abs(dot(vec3(_860, _861, _862), vec3(_780, _781, _782)));
    float _3818 = isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0));
    float _962 = sqrt(_783);
    float _975 = exp2((_962 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_962 * 3.0));
    float _981 = (1.0 - _975) * ((_962 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _982 = _975 * _962;
    float _1010 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1014 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1018 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1320;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1045 = fma(_1018, cbModelParam._m0[26u].z, fma(_1014, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1010));
        float _1049 = fma(_1018, cbModelParam._m0[27u].z, fma(_1014, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1010));
        float _1053 = fma(_1018, cbModelParam._m0[28u].z, fma(_1014, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1010));
        float _1078 = _1010 + _780;
        float _1079 = _1014 + _781;
        float _1080 = _1018 + _782;
        float _1090 = fma(_1080, cbModelParam._m0[26u].z, fma(_1079, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1078)) - _1045;
        float _1091 = fma(_1080, cbModelParam._m0[27u].z, fma(_1079, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1078)) - _1049;
        float _1092 = fma(_1080, cbModelParam._m0[28u].z, fma(_1079, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1078)) - _1053;
        float _1096 = inversesqrt(dot(vec3(_1090, _1091, _1092), vec3(_1090, _1091, _1092)));
        float _1109 = ((_1096 * _1090) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1045 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1110 = ((_1096 * _1091) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1049 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1111 = ((_1096 * _1092) / cbModelParam._m0[34u].z) + ((((((_1053 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1114 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        vec4 _1121 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        vec4 _1128 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        vec4 _1135 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1109, _1110, _1111), 0.0);
        float _1148 = exp2((_1114.w + (-0.5)) * 20.0) * 2.0;
        float _1149 = _1148 * (_1114.x + (-0.5));
        float _1150 = _1148 * (_1114.y + (-0.5));
        float _1151 = _1148 * (_1114.z + (-0.5));
        float _1158 = exp2((_1121.w + (-0.5)) * 20.0) * 2.0;
        float _1159 = _1158 * (_1121.x + (-0.5));
        float _1160 = _1158 * (_1121.y + (-0.5));
        float _1161 = _1158 * (_1121.z + (-0.5));
        float _1168 = exp2((_1128.w + (-0.5)) * 20.0) * 2.0;
        float _1169 = _1168 * (_1128.x + (-0.5));
        float _1170 = _1168 * (_1128.y + (-0.5));
        float _1171 = _1168 * (_1128.z + (-0.5));
        float _1178 = exp2((_1135.w + (-0.5)) * 20.0) * 2.0;
        float _1179 = _1178 * (_1135.x + (-0.5));
        float _1180 = _1178 * (_1135.y + (-0.5));
        float _1181 = _1178 * (_1135.z + (-0.5));
        float _1182 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1183 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1184 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1185 = _1149 * 0.5;
        float _1186 = _1159 * 0.5;
        float _1187 = _1169 * 0.5;
        float _1188 = dot(vec3(_1185, _1186, _1187), vec3(_1185, _1186, _1187));
        float _1193 = (_1188 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1188);
        float _1202 = (dot(vec3(_780, _781, _782), vec3(_1193 * _1185, _1193 * _1186, _1193 * _1187)) + 1.0) * 0.5;
        float _3844 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1212 = sqrt(((_1186 * _1186) + (_1185 * _1185)) + (_1187 * _1187)) / (_1182 + 9.9999997473787516355514526367188e-06);
        float _3855 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
        float _1214 = _1213 * 2.0;
        float _1218 = (1.0 - _1213) / (_1213 + 1.0);
        float _3866 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
        float _1228 = ((((1.0 - _1219) * (_1214 + 2.0)) * exp2(log2(isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0))) * (_1214 + 1.0))) + _1219) * _1182;
        float _1229 = _1150 * 0.5;
        float _1230 = _1160 * 0.5;
        float _1231 = _1170 * 0.5;
        float _1232 = dot(vec3(_1229, _1230, _1231), vec3(_1229, _1230, _1231));
        float _1237 = (_1232 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1232);
        float _1245 = (dot(vec3(_780, _781, _782), vec3(_1237 * _1229, _1237 * _1230, _1237 * _1231)) + 1.0) * 0.5;
        float _3877 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1254 = sqrt(((_1230 * _1230) + (_1229 * _1229)) + (_1231 * _1231)) / (_1183 + 9.9999997473787516355514526367188e-06);
        float _3888 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1256 = _1255 * 2.0;
        float _1260 = (1.0 - _1255) / (_1255 + 1.0);
        float _3899 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1270 = ((((1.0 - _1261) * (_1256 + 2.0)) * exp2(log2(isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * (_1256 + 1.0))) + _1261) * _1183;
        float _1271 = _1151 * 0.5;
        float _1272 = _1161 * 0.5;
        float _1273 = _1171 * 0.5;
        float _1274 = dot(vec3(_1271, _1272, _1273), vec3(_1271, _1272, _1273));
        float _1279 = (_1274 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1274);
        float _1287 = (dot(vec3(_780, _781, _782), vec3(_1279 * _1271, _1279 * _1272, _1279 * _1273)) + 1.0) * 0.5;
        float _3910 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1296 = sqrt(((_1272 * _1272) + (_1271 * _1271)) + (_1273 * _1273)) / (_1184 + 9.9999997473787516355514526367188e-06);
        float _3921 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1298 = _1297 * 2.0;
        float _1302 = (1.0 - _1297) / (_1297 + 1.0);
        float _3932 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1312 = ((((1.0 - _1303) * (_1298 + 2.0)) * exp2(log2(isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))) * (_1298 + 1.0))) + _1303) * _1184;
        _1320 = _1151;
        _1322 = _1150;
        _1323 = _1149;
        _1324 = _1161;
        _1325 = _1160;
        _1326 = _1159;
        _1327 = _1171;
        _1328 = _1170;
        _1329 = _1169;
        _1330 = _1184;
        _1331 = _1183;
        _1332 = _1182;
        _1333 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)));
        _1334 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0)));
        _1335 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)));
    }
    else
    {
        _1320 = _1321;
        _1322 = _1321;
        _1323 = _1321;
        _1324 = _1321;
        _1325 = _1321;
        _1326 = _1321;
        _1327 = _1321;
        _1328 = _1321;
        _1329 = _1321;
        _1330 = _1321;
        _1331 = _1321;
        _1332 = _1321;
        _1333 = 0.0;
        _1334 = 0.0;
        _1335 = 0.0;
    }
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1361 = fma(_1018, cbModelParam._m0[30u].z, fma(_1014, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1010));
        float _1365 = fma(_1018, cbModelParam._m0[31u].z, fma(_1014, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1010));
        float _1369 = fma(_1018, cbModelParam._m0[32u].z, fma(_1014, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1010));
        float _1392 = _1010 + _780;
        float _1393 = _1014 + _781;
        float _1394 = _1018 + _782;
        float _1404 = fma(_1394, cbModelParam._m0[30u].z, fma(_1393, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1392)) - _1361;
        float _1405 = fma(_1394, cbModelParam._m0[31u].z, fma(_1393, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1392)) - _1365;
        float _1406 = fma(_1394, cbModelParam._m0[32u].z, fma(_1393, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1392)) - _1369;
        float _1410 = inversesqrt(dot(vec3(_1404, _1405, _1406), vec3(_1404, _1405, _1406)));
        float _1423 = ((_1410 * _1404) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1361 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1424 = ((_1410 * _1405) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1365 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1425 = ((_1410 * _1406) / cbModelParam._m0[35u].z) + ((((((_1369 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1427 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1423, _1424, _1425), 0.0);
        vec4 _1434 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1423, _1424, _1425), 0.0);
        vec4 _1441 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1423, _1424, _1425), 0.0);
        vec4 _1448 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1423, _1424, _1425), 0.0);
        float _1460 = exp2((_1427.w + (-0.5)) * 20.0) * 2.0;
        float _1461 = _1460 * (_1427.x + (-0.5));
        float _1462 = _1460 * (_1427.y + (-0.5));
        float _1463 = _1460 * (_1427.z + (-0.5));
        float _1470 = exp2((_1434.w + (-0.5)) * 20.0) * 2.0;
        float _1471 = _1470 * (_1434.x + (-0.5));
        float _1472 = _1470 * (_1434.y + (-0.5));
        float _1473 = _1470 * (_1434.z + (-0.5));
        float _1480 = exp2((_1441.w + (-0.5)) * 20.0) * 2.0;
        float _1481 = _1480 * (_1441.x + (-0.5));
        float _1482 = _1480 * (_1441.y + (-0.5));
        float _1483 = _1480 * (_1441.z + (-0.5));
        float _1490 = exp2((_1448.w + (-0.5)) * 20.0) * 2.0;
        float _1491 = _1490 * (_1448.x + (-0.5));
        float _1492 = _1490 * (_1448.y + (-0.5));
        float _1493 = _1490 * (_1448.z + (-0.5));
        float _1494 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1495 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1496 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1497 = _1461 * 0.5;
        float _1498 = _1471 * 0.5;
        float _1499 = _1481 * 0.5;
        float _1500 = dot(vec3(_1497, _1498, _1499), vec3(_1497, _1498, _1499));
        float _1505 = (_1500 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1500);
        float _1513 = (dot(vec3(_780, _781, _782), vec3(_1505 * _1497, _1505 * _1498, _1505 * _1499)) + 1.0) * 0.5;
        float _3973 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1522 = sqrt(((_1498 * _1498) + (_1497 * _1497)) + (_1499 * _1499)) / (_1494 + 9.9999997473787516355514526367188e-06);
        float _3984 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1523 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
        float _1524 = _1523 * 2.0;
        float _1528 = (1.0 - _1523) / (_1523 + 1.0);
        float _3995 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
        float _1538 = ((((1.0 - _1529) * (_1524 + 2.0)) * exp2(log2(isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * (_1524 + 1.0))) + _1529) * _1494;
        float _1539 = _1462 * 0.5;
        float _1540 = _1472 * 0.5;
        float _1541 = _1482 * 0.5;
        float _1542 = dot(vec3(_1539, _1540, _1541), vec3(_1539, _1540, _1541));
        float _1547 = (_1542 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1542);
        float _1555 = (dot(vec3(_780, _781, _782), vec3(_1547 * _1539, _1547 * _1540, _1547 * _1541)) + 1.0) * 0.5;
        float _4006 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1564 = sqrt(((_1540 * _1540) + (_1539 * _1539)) + (_1541 * _1541)) / (_1495 + 9.9999997473787516355514526367188e-06);
        float _4017 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1565 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1566 = _1565 * 2.0;
        float _1570 = (1.0 - _1565) / (_1565 + 1.0);
        float _4028 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1571 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1580 = ((((1.0 - _1571) * (_1566 + 2.0)) * exp2(log2(isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_1566 + 1.0))) + _1571) * _1495;
        float _1581 = _1463 * 0.5;
        float _1582 = _1473 * 0.5;
        float _1583 = _1483 * 0.5;
        float _1584 = dot(vec3(_1581, _1582, _1583), vec3(_1581, _1582, _1583));
        float _1589 = (_1584 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1584);
        float _1597 = (dot(vec3(_780, _781, _782), vec3(_1589 * _1581, _1589 * _1582, _1589 * _1583)) + 1.0) * 0.5;
        float _4039 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
        float _1606 = sqrt(((_1582 * _1582) + (_1581 * _1581)) + (_1583 * _1583)) / (_1496 + 9.9999997473787516355514526367188e-06);
        float _4050 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1607 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1608 = _1607 * 2.0;
        float _1612 = (1.0 - _1607) / (_1607 + 1.0);
        float _4061 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1613 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _1622 = ((((1.0 - _1613) * (_1608 + 2.0)) * exp2(log2(isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * (_1608 + 1.0))) + _1613) * _1496;
        _1630 = _1463;
        _1631 = _1462;
        _1632 = _1461;
        _1633 = _1473;
        _1634 = _1472;
        _1635 = _1471;
        _1636 = _1483;
        _1637 = _1482;
        _1638 = _1481;
        _1639 = _1496;
        _1640 = _1495;
        _1641 = _1494;
        _1642 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0)));
        _1643 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0)));
        _1644 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0)));
    }
    else
    {
        _1630 = _1321;
        _1631 = _1321;
        _1632 = _1321;
        _1633 = _1321;
        _1634 = _1321;
        _1635 = _1321;
        _1636 = _1321;
        _1637 = _1321;
        _1638 = _1321;
        _1639 = _1321;
        _1640 = _1321;
        _1641 = _1321;
        _1642 = 0.0;
        _1643 = 0.0;
        _1644 = 0.0;
    }
    float _1654 = (cbModelParam._m0[1u].x * (_1642 - _1333)) + _1333;
    float _1655 = (cbModelParam._m0[1u].x * (_1643 - _1334)) + _1334;
    float _1656 = (cbModelParam._m0[1u].x * (_1644 - _1335)) + _1335;
    float _1677 = fma(_1656, cbSceneParam._m0[89u].z, fma(_1655, cbSceneParam._m0[89u].y, _1654 * cbSceneParam._m0[89u].x));
    float _1680 = fma(_1656, cbSceneParam._m0[90u].z, fma(_1655, cbSceneParam._m0[90u].y, _1654 * cbSceneParam._m0[90u].x));
    float _1683 = fma(_1656, cbSceneParam._m0[91u].z, fma(_1655, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1654));
    float _1698 = _954 * 0.5;
    float _1699 = _955 * 0.5;
    float _1700 = _956 * 0.5;
    float _1701 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1632, _1635, _1638, _1641));
    float _1704 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1631, _1634, _1637, _1640));
    float _1707 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1630, _1633, _1636, _1639));
    float _1741;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1714 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1320, _1324, _1327, _1330));
        float _1718 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1322, _1325, _1328, _1331));
        float _1722 = dot(vec4(_1698, _1699, _1700, 1.0), vec4(_1323, _1326, _1329, _1332));
        float _1729 = dot(vec4(cbModelParam._m0[39u]), vec4(_1698, _1699, _1700, 1.0));
        _1741 = dot(vec3(isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0)), isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0)), isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1729) ? 0.0 : (isnan(0.0) ? _1729 : max(0.0, _1729))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1741 = 1.0;
    }
    float _1752;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1743 = dot(vec4(cbModelParam._m0[40u]), vec4(_1698, _1699, _1700, 1.0));
        _1752 = dot(vec3(isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0)), isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0)), isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1743) ? 0.0 : (isnan(0.0) ? _1743 : max(0.0, _1743))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1752 = 1.0;
    }
    float _1756 = (_1752 * cbModelParam._m0[1u].x) + (_1741 * (1.0 - cbModelParam._m0[1u].x));
    float _1766 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _783);
    float _1767 = isnan(_1766) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1766 : min(cbModelParam._m0[25u].z, _1766));
    float _1847;
    float _1849;
    float _1851;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1814 = fma(_1018, cbModelParam._m0[13u].z, fma(_1014, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1010)) + cbModelParam._m0[13u].w;
        float _1818 = fma(_1018, cbModelParam._m0[14u].z, fma(_1014, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1010)) + cbModelParam._m0[14u].w;
        float _1822 = fma(_1018, cbModelParam._m0[15u].z, fma(_1014, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1010)) + cbModelParam._m0[15u].w;
        float _1825 = fma(_956, cbModelParam._m0[13u].z, fma(_955, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _954));
        float _1828 = fma(_956, cbModelParam._m0[14u].z, fma(_955, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _954));
        float _1831 = fma(_956, cbModelParam._m0[15u].z, fma(_955, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _954));
        float _1859;
        if (_1825 > 0.0)
        {
            _1859 = abs((1.0 - _1814) / _1825);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1825 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1814 + 1.0) / _1825);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1859 = frontier_phi_14_12_ladder;
        }
        float _2085;
        if (_1828 > 0.0)
        {
            _2085 = abs((1.0 - _1818) / _1828);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1828 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1818 + 1.0) / _1828);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2085 = frontier_phi_23_19_ladder;
        }
        float _2342;
        if (_1831 > 0.0)
        {
            _2342 = abs((1.0 - _1822) / _1831);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1831 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1822 + 1.0) / _1831);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2342 = frontier_phi_35_30_ladder;
        }
        float _2344 = isnan(_2085) ? _1859 : (isnan(_1859) ? _2085 : min(_1859, _2085));
        float _2345 = isnan(_2342) ? _2344 : (isnan(_2344) ? _2342 : min(_2344, _2342));
        float _2349 = (_2345 * _1825) + _1814;
        float _2350 = (_2345 * _1828) + _1818;
        float _2351 = (_2345 * _1831) + _1822;
        float _2352 = _2345 * 9.9999997473787516355514526367188e-05;
        float _2354 = (-1.0) - _2352;
        float _2356 = _2352 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2351 > _2356) || ((_2351 < _2354) || ((_2350 > _2356) || ((_2350 < _2354) || ((_2349 < _2354) || (_2349 > _2356))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2479 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2351, cbModelParam._m0[9u].z, fma(_2350, cbModelParam._m0[9u].y, _2349 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2351, cbModelParam._m0[10u].z, fma(_2350, cbModelParam._m0[10u].y, _2349 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2351, cbModelParam._m0[11u].z, fma(_2350, cbModelParam._m0[11u].y, _2349 * cbModelParam._m0[11u].x))), _1767);
            frontier_phi_13_35_ladder = _2479.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2479.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2479.x * cbModelParam._m0[1u].y;
        }
        _1847 = frontier_phi_13_35_ladder_2;
        _1849 = frontier_phi_13_35_ladder_1;
        _1851 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1835 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_954, _955, _956), _1767);
        _1847 = _1835.x * cbModelParam._m0[1u].y;
        _1849 = _1835.y * cbModelParam._m0[1u].y;
        _1851 = _1835.z * cbModelParam._m0[1u].y;
    }
    float _1855 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _783);
    float _1856 = isnan(_1855) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1855 : min(cbModelParam._m0[25u].w, _1855));
    float _1947;
    float _1949;
    float _1951;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1911 = fma(_1018, cbModelParam._m0[21u].z, fma(_1014, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1010)) + cbModelParam._m0[21u].w;
        float _1915 = fma(_1018, cbModelParam._m0[22u].z, fma(_1014, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1010)) + cbModelParam._m0[22u].w;
        float _1919 = fma(_1018, cbModelParam._m0[23u].z, fma(_1014, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1010)) + cbModelParam._m0[23u].w;
        float _1922 = fma(_956, cbModelParam._m0[21u].z, fma(_955, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _954));
        float _1925 = fma(_956, cbModelParam._m0[22u].z, fma(_955, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _954));
        float _1928 = fma(_956, cbModelParam._m0[23u].z, fma(_955, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _954));
        float _2090;
        if (_1922 > 0.0)
        {
            _2090 = abs((1.0 - _1911) / _1922);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1922 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1911 + 1.0) / _1922);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2090 = frontier_phi_25_21_ladder;
        }
        float _2369;
        if (_1925 > 0.0)
        {
            _2369 = abs((1.0 - _1915) / _1925);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1925 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1915 + 1.0) / _1925);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2369 = frontier_phi_37_32_ladder;
        }
        float _2582;
        if (_1928 > 0.0)
        {
            _2582 = abs((1.0 - _1919) / _1928);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1928 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1919 + 1.0) / _1928);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2582 = frontier_phi_46_43_ladder;
        }
        float _2584 = isnan(_2369) ? _2090 : (isnan(_2090) ? _2369 : min(_2090, _2369));
        float _2585 = isnan(_2582) ? _2584 : (isnan(_2584) ? _2582 : min(_2584, _2582));
        float _2589 = (_2585 * _1922) + _1911;
        float _2590 = (_2585 * _1925) + _1915;
        float _2591 = (_2585 * _1928) + _1919;
        float _2592 = _2585 * 9.9999997473787516355514526367188e-05;
        float _2593 = (-1.0) - _2592;
        float _2595 = _2592 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2591 > _2595) || ((_2591 < _2593) || ((_2590 > _2595) || ((_2590 < _2593) || ((_2589 < _2593) || (_2589 > _2595))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2790 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2591, cbModelParam._m0[17u].z, fma(_2590, cbModelParam._m0[17u].y, _2589 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2591, cbModelParam._m0[18u].z, fma(_2590, cbModelParam._m0[18u].y, _2589 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2591, cbModelParam._m0[19u].z, fma(_2590, cbModelParam._m0[19u].y, _2589 * cbModelParam._m0[19u].x))), _1856);
            frontier_phi_22_46_ladder = _2790.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2790.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2790.x * cbModelParam._m0[1u].z;
        }
        _1947 = frontier_phi_22_46_ladder_2;
        _1949 = frontier_phi_22_46_ladder_1;
        _1951 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1931 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_954, _955, _956), _1856);
        _1947 = _1931.x * cbModelParam._m0[1u].z;
        _1949 = _1931.y * cbModelParam._m0[1u].z;
        _1951 = _1931.z * cbModelParam._m0[1u].z;
    }
    float _1964 = (((_981 * _931) + _982) * _946) * ((cbModelParam._m0[1u].w * (_1947 - _1847)) + _1847);
    float _1966 = (((_981 * _933) + _982) * _946) * ((cbModelParam._m0[1u].w * (_1949 - _1849)) + _1849);
    float _1968 = (((_981 * _934) + _982) * _946) * ((cbModelParam._m0[1u].w * (_1951 - _1851)) + _1851);
    float _1971 = fma(_1968, cbSceneParam._m0[89u].z, fma(_1966, cbSceneParam._m0[89u].y, _1964 * cbSceneParam._m0[89u].x));
    float _1974 = fma(_1968, cbSceneParam._m0[90u].z, fma(_1966, cbSceneParam._m0[90u].y, _1964 * cbSceneParam._m0[90u].x));
    float _1977 = fma(_1968, cbSceneParam._m0[91u].z, fma(_1966, cbSceneParam._m0[91u].y, _1964 * cbSceneParam._m0[91u].x));
    vec4 _1985 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_868, _869));
    float _1987 = _1985.w;
    float _1999 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1987);
    float _2000 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1987);
    float _2001 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1987);
    uvec4 _2005 = floatBitsToUint(cbInstanceData._m0[_906 + 5u]);
    uint _2007 = _2005.x * 14u;
    uint _2008 = _2007 + 13u;
    float _2015 = _946 + (-1.0);
    float _2020 = (cbLight._m0[_2008].x * _2015) + 1.0;
    float _2021 = (cbLight._m0[_2008].y * _2015) + 1.0;
    float _2022 = (cbLight._m0[_2008].z * _2015) + 1.0;
    float _2023 = (cbLight._m0[_2008].w * _2015) + 1.0;
    uint _2024 = _2007 + 5u;
    float _2030 = isnan(1.0) ? _2021 : (isnan(_2021) ? 1.0 : min(_2021, 1.0));
    uint _2034 = _2007 + 4u;
    float _2044 = isnan(1.0) ? _2020 : (isnan(_2020) ? 1.0 : min(_2020, 1.0));
    uint _2048 = _2007 | 1u;
    float _2059 = dot(vec3(cbLight._m0[_2007].xyz), vec3(_780, _781, _782));
    float _2062 = dot(vec3(cbLight._m0[_2048].xyz), vec3(_780, _781, _782));
    float _4197 = isnan(0.0) ? _2059 : (isnan(_2059) ? 0.0 : max(_2059, 0.0));
    float _4208 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
    float _2067 = (isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * 0.3183098733425140380859375;
    float _2069 = (isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * 0.3183098733425140380859375;
    float _2076 = ((cbLight._m0[_2024].x * _2030) * _2069) + (((cbLight._m0[_2034].x * _1999) * _2044) * _2067);
    float _2077 = ((_2030 * cbLight._m0[_2024].y) * _2069) + (((cbLight._m0[_2034].y * _2000) * _2044) * _2067);
    float _2078 = ((_2030 * cbLight._m0[_2024].z) * _2069) + (((cbLight._m0[_2034].z * _2001) * _2044) * _2067);
    uvec4 _2082 = floatBitsToUint(cbLight._m0[_2007 + 12u]);
    bool _2084 = _2082.x == 0u;
    float _2095;
    float _2097;
    float _2099;
    if (_2084)
    {
        _2095 = _2076;
        _2097 = _2077;
        _2099 = _2078;
    }
    else
    {
        uint _2103 = _2007 + 6u;
        float _2119 = (dot(vec3(cbLight._m0[_2007 + 2u].xyz), vec3(_780, _781, _782)) * 0.5) + 0.5;
        float _2120 = _2119 * _2119;
        float _4219 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
        float _2121 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _2122 = isnan(1.0) ? _2022 : (isnan(_2022) ? 1.0 : min(_2022, 1.0));
        _2095 = (((cbLight._m0[_2103].x * 0.3183098733425140380859375) * _2121) * _2122) + _2076;
        _2097 = (((cbLight._m0[_2103].y * 0.3183098733425140380859375) * _2121) * _2122) + _2077;
        _2099 = (((cbLight._m0[_2103].z * 0.3183098733425140380859375) * _2121) * _2122) + _2078;
    }
    bool _2102 = _2082.y == 0u;
    float _2140;
    float _2142;
    float _2144;
    if (_2102)
    {
        _2140 = _2095;
        _2142 = _2097;
        _2144 = _2099;
    }
    else
    {
        uint _2313 = _2007 + 7u;
        float _2329 = (dot(vec3(cbLight._m0[_2007 + 3u].xyz), vec3(_780, _781, _782)) * 0.5) + 0.5;
        float _2330 = _2329 * _2329;
        float _4235 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
        float _2331 = isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0));
        float _2332 = isnan(1.0) ? _2023 : (isnan(_2023) ? 1.0 : min(_2023, 1.0));
        _2140 = (((cbLight._m0[_2313].x * 0.3183098733425140380859375) * _2331) * _2332) + _2095;
        _2142 = (((cbLight._m0[_2313].y * 0.3183098733425140380859375) * _2331) * _2332) + _2097;
        _2144 = (((cbLight._m0[_2313].z * 0.3183098733425140380859375) * _2331) * _2332) + _2099;
    }
    uint _2147 = _2007 + 8u;
    float _2160 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2007].w)) * _783) * 0.949999988079071044921875);
    float _2161 = _2160 * _2160;
    float _2162 = cbLight._m0[_2007].x + _860;
    float _2163 = cbLight._m0[_2007].y + _861;
    float _2164 = cbLight._m0[_2007].z + _862;
    float _2168 = inversesqrt(dot(vec3(_2162, _2163, _2164), vec3(_2162, _2163, _2164)));
    float _2169 = _2168 * _2162;
    float _2170 = _2168 * _2163;
    float _2171 = _2168 * _2164;
    float _2172 = dot(vec3(_780, _781, _782), vec3(cbLight._m0[_2007].xyz));
    float _4251 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
    float _2175 = isnan(1.0) ? _4251 : (isnan(_4251) ? 1.0 : min(_4251, 1.0));
    float _4262 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _2176 = isnan(1.0) ? _4262 : (isnan(_4262) ? 1.0 : min(_4262, 1.0));
    float _2177 = dot(vec3(_780, _781, _782), vec3(_2169, _2170, _2171));
    float _4273 = isnan(0.0) ? _2177 : (isnan(_2177) ? 0.0 : max(_2177, 0.0));
    float _2180 = isnan(1.0) ? _4273 : (isnan(_4273) ? 1.0 : min(_4273, 1.0));
    float _2181 = dot(vec3(cbLight._m0[_2007].xyz), vec3(_2169, _2170, _2171));
    float _4284 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
    float _2185 = _2161 * _2161;
    float _2189 = ((_2180 * _2180) * (_2185 + (-1.0))) + 1.0;
    float _2197 = exp2(log2(1.0 - (isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0)))) * 5.0);
    float _2198 = 0.959999978542327880859375 - _928;
    float _2200 = 0.959999978542327880859375 - _929;
    float _2201 = 0.959999978542327880859375 - _930;
    float _2208 = 1.0 - _2161;
    float _2219 = (0.5 / (((_2176 * ((_2175 * _2208) + _2161)) + 9.9999999392252902907785028219223e-09) + (((_2176 * _2208) + _2161) * _2175))) * _2175;
    float _4295 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _2221 = (isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0))) * (_2185 / ((_2189 * _2189) * 3.141590118408203125));
    uint _2235 = _2007 + 9u;
    float _2246 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2048].w)) * _783) * 0.949999988079071044921875);
    float _2247 = _2246 * _2246;
    float _2248 = cbLight._m0[_2048].x + _860;
    float _2249 = cbLight._m0[_2048].y + _861;
    float _2250 = cbLight._m0[_2048].z + _862;
    float _2254 = inversesqrt(dot(vec3(_2248, _2249, _2250), vec3(_2248, _2249, _2250)));
    float _2255 = _2254 * _2248;
    float _2256 = _2254 * _2249;
    float _2257 = _2254 * _2250;
    float _2258 = dot(vec3(_780, _781, _782), vec3(cbLight._m0[_2048].xyz));
    float _4306 = isnan(0.0) ? _2258 : (isnan(_2258) ? 0.0 : max(_2258, 0.0));
    float _2261 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
    float _2262 = dot(vec3(_780, _781, _782), vec3(_2255, _2256, _2257));
    float _4317 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0));
    float _2265 = isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0));
    float _2266 = dot(vec3(cbLight._m0[_2048].xyz), vec3(_2255, _2256, _2257));
    float _4328 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
    float _2270 = _2247 * _2247;
    float _2274 = ((_2265 * _2265) * (_2270 + (-1.0))) + 1.0;
    float _2281 = exp2(log2(1.0 - (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0)))) * 5.0);
    float _2288 = 1.0 - _2247;
    float _2298 = (0.5 / (((_2176 * ((_2261 * _2288) + _2247)) + 9.9999999392252902907785028219223e-09) + (((_2176 * _2288) + _2247) * _2261))) * _2261;
    float _4339 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
    float _2300 = (isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0))) * (_2270 / ((_2274 * _2274) * 3.141590118408203125));
    float _2310 = (((((_2281 * _2198) + _931) * cbLight._m0[_2235].x) * _2300) * _2030) + ((((cbLight._m0[_2147].x * _1999) * ((_2197 * _2198) + _931)) * _2221) * _2044);
    float _2311 = (((((_2281 * _2200) + _933) * cbLight._m0[_2235].y) * _2300) * _2030) + ((((cbLight._m0[_2147].y * _2000) * ((_2197 * _2200) + _933)) * _2221) * _2044);
    float _2312 = (((((_2281 * _2201) + _934) * cbLight._m0[_2235].z) * _2300) * _2030) + ((((cbLight._m0[_2147].z * _2001) * ((_2197 * _2201) + _934)) * _2221) * _2044);
    float _2374;
    float _2376;
    float _2378;
    if (_2084)
    {
        _2374 = _2310;
        _2376 = _2311;
        _2378 = _2312;
    }
    else
    {
        uint _2380 = _2007 + 2u;
        uint _2384 = _2007 + 10u;
        float _2398 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2380].w)) * _783) * 0.949999988079071044921875);
        float _2399 = _2398 * _2398;
        float _2400 = cbLight._m0[_2380].x + _860;
        float _2401 = cbLight._m0[_2380].y + _861;
        float _2402 = cbLight._m0[_2380].z + _862;
        float _2406 = inversesqrt(dot(vec3(_2400, _2401, _2402), vec3(_2400, _2401, _2402)));
        float _2407 = _2406 * _2400;
        float _2408 = _2406 * _2401;
        float _2409 = _2406 * _2402;
        float _2410 = dot(vec3(_780, _781, _782), vec3(cbLight._m0[_2380].xyz));
        float _4350 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
        float _2413 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
        float _2414 = dot(vec3(_780, _781, _782), vec3(_2407, _2408, _2409));
        float _4361 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
        float _2417 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
        float _2418 = dot(vec3(cbLight._m0[_2380].xyz), vec3(_2407, _2408, _2409));
        float _4372 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
        float _2422 = _2399 * _2399;
        float _2426 = ((_2417 * _2417) * (_2422 + (-1.0))) + 1.0;
        float _2433 = exp2(log2(1.0 - (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0)))) * 5.0);
        float _2440 = 1.0 - _2399;
        float _2450 = (0.5 / (((_2176 * ((_2413 * _2440) + _2399)) + 9.9999999392252902907785028219223e-09) + (((_2176 * _2440) + _2399) * _2413))) * _2413;
        float _4383 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
        float _2452 = (isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0))) * (_2422 / ((_2426 * _2426) * 3.141590118408203125));
        float _2453 = isnan(1.0) ? _2022 : (isnan(_2022) ? 1.0 : min(_2022, 1.0));
        _2374 = (((((_2433 * _2198) + _931) * cbLight._m0[_2384].x) * _2452) * _2453) + _2310;
        _2376 = (((((_2433 * _2200) + _933) * cbLight._m0[_2384].y) * _2452) * _2453) + _2311;
        _2378 = (((((_2433 * _2201) + _934) * cbLight._m0[_2384].z) * _2452) * _2453) + _2312;
    }
    float _2488;
    float _2490;
    float _2492;
    if (_2102)
    {
        _2488 = _2374;
        _2490 = _2376;
        _2492 = _2378;
    }
    else
    {
        uint _2499 = _2007 + 3u;
        uint _2503 = _2007 + 11u;
        float _2517 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2499].w)) * _783) * 0.949999988079071044921875);
        float _2518 = _2517 * _2517;
        float _2519 = cbLight._m0[_2499].x + _860;
        float _2520 = cbLight._m0[_2499].y + _861;
        float _2521 = cbLight._m0[_2499].z + _862;
        float _2525 = inversesqrt(dot(vec3(_2519, _2520, _2521), vec3(_2519, _2520, _2521)));
        float _2526 = _2525 * _2519;
        float _2527 = _2525 * _2520;
        float _2528 = _2525 * _2521;
        float _2529 = dot(vec3(_780, _781, _782), vec3(cbLight._m0[_2499].xyz));
        float _4399 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
        float _2532 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
        float _2533 = dot(vec3(_780, _781, _782), vec3(_2526, _2527, _2528));
        float _4410 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2536 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _2537 = dot(vec3(cbLight._m0[_2499].xyz), vec3(_2526, _2527, _2528));
        float _4421 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
        float _2541 = _2518 * _2518;
        float _2545 = ((_2536 * _2536) * (_2541 + (-1.0))) + 1.0;
        float _2552 = exp2(log2(1.0 - (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0)))) * 5.0);
        float _2559 = 1.0 - _2518;
        float _2569 = (0.5 / (((_2176 * ((_2532 * _2559) + _2518)) + 9.9999999392252902907785028219223e-09) + (((_2176 * _2559) + _2518) * _2532))) * _2532;
        float _4432 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
        float _2571 = (isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * (_2541 / ((_2545 * _2545) * 3.141590118408203125));
        float _2572 = isnan(1.0) ? _2023 : (isnan(_2023) ? 1.0 : min(_2023, 1.0));
        _2488 = (((((_2552 * _2198) + _931) * cbLight._m0[_2503].x) * _2571) * _2572) + _2374;
        _2490 = (((((_2552 * _2200) + _933) * cbLight._m0[_2503].y) * _2571) * _2572) + _2376;
        _2492 = (((((_2552 * _2201) + _934) * cbLight._m0[_2503].z) * _2571) * _2572) + _2378;
    }
    float _2707;
    float _2709;
    float _2711;
    float _2713;
    float _2715;
    float _2717;
    if (_2005.y == 0u)
    {
        float _2647 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2648 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2647;
        float _2649 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2647;
        float _2650 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2647;
        uvec4 _2662 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2663 = _2662.x;
        uint _2674 = uint((float(_2662.y) * floor(float(uint(cbSceneParam._m0[85u].y * _869) / _2663))) + floor(float(uint(cbSceneParam._m0[85u].x * _868) / _2663)));
        float _2684 = (log2(_2650 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2685 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
        uint _2688 = uint(isnan(14.0) ? _2685 : (isnan(_2685) ? 14.0 : min(_2685, 14.0)));
        uvec4 _2693 = texelFetch(g_lightClusterGridBuffer, int(((_2688 << 2u) + (_2674 << 6u)) >> 2u));
        uint _2694 = _2693.x;
        uint _2695 = _2662.z;
        float _2795;
        float _2797;
        float _2799;
        float _2801;
        float _2803;
        float _2805;
        if (((((1u << ((_2695 >> 4u) & 15u)) + 4294967295u) & _2694) == 0u) || ((_2695 & 240u) == 0u))
        {
            _2795 = 0.0;
            _2797 = 0.0;
            _2799 = 0.0;
            _2801 = 0.0;
            _2803 = 0.0;
            _2805 = 0.0;
        }
        else
        {
            float _2796;
            float _2798;
            float _2800;
            float _2802;
            float _2804;
            float _2806;
            float _2940 = 0.0;
            float _2941 = 0.0;
            float _2942 = 0.0;
            float _2943 = 0.0;
            float _2944 = 0.0;
            float _2945 = 0.0;
            uint _2946 = 0u;
            uint _2955;
            bool _2956;
            for (;;)
            {
                _2955 = texelFetch(g_lightClassification, int((((_2688 << 5u) + (_2674 << 9u)) + (_2946 << 2u)) >> 2u)).x;
                _2956 = _2955 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2956)
                {
                    frontier_phi_61_pred = _2940;
                    frontier_phi_61_pred_1 = _2945;
                    frontier_phi_61_pred_2 = _2944;
                    frontier_phi_61_pred_3 = _2943;
                    frontier_phi_61_pred_4 = _2942;
                    frontier_phi_61_pred_5 = _2941;
                }
                else
                {
                    float _3064;
                    float _3065;
                    float _3066;
                    float _3067;
                    float _3068;
                    float _3069;
                    uint _3070;
                    _3064 = _2940;
                    _3065 = _2941;
                    _3066 = _2942;
                    _3067 = _2943;
                    _3068 = _2944;
                    _3069 = _2945;
                    _3070 = _2955;
                    float _2996;
                    float _2997;
                    float _2998;
                    float _2999;
                    float _3000;
                    float _3001;
                    for (;;)
                    {
                        uint _3074 = uint(findLSB(_3070)) + (_2946 << 5u);
                        uint _3071 = (_3070 + 4294967295u) & _3070;
                        uint _3076 = _3074 * 48u;
                        vec4 _3090 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3076)).x, texelFetch(g_PointLightRenderingBuffer, int(_3076 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3076 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3076 + 3u)).x));
                        uint _3096 = (_3074 * 48u) + 4u;
                        vec4 _3109 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3096)).x, texelFetch(g_PointLightRenderingBuffer, int(_3096 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3096 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3096 + 3u)).x));
                        uint _3115 = (_3074 * 48u) + 8u;
                        vec3 _3126 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3115)).x, texelFetch(g_PointLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3115 + 2u)).x));
                        float _3130 = _3090.x - _2648;
                        float _3131 = _3090.y - _2649;
                        float _3132 = _3090.z - _2650;
                        float _3133 = dot(vec3(_3130, _3131, _3132), vec3(_3130, _3131, _3132));
                        float _3136 = inversesqrt(_3133);
                        float _3137 = _3136 * _3130;
                        float _3138 = _3136 * _3131;
                        float _3139 = _3136 * _3132;
                        float _3140 = dot(vec3(_887, _890, _893), vec3(_3137, _3138, _3139));
                        float _3145 = 1.0 - (_3133 * _3090.w);
                        float _4458 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0));
                        float _3146 = isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0));
                        float _3147 = sqrt(_3133) * _3109.w;
                        float _3150 = 1.39999997615814208984375 / (_3147 + 1.39999997615814208984375);
                        float _3151 = _3150 * _3150;
                        float _3154 = ((1.0 - _3151) * _3140) + _3151;
                        float _3157 = _3147 * _3147;
                        float _3161 = ((isnan(0.0) ? _3154 : (isnan(_3154) ? 0.0 : max(_3154, 0.0))) * _3146) / ((_3157 * 0.699999988079071044921875) + 1.0);
                        float _3165 = (-0.0) - _2648;
                        float _3166 = (-0.0) - _2649;
                        float _3167 = (-0.0) - _2650;
                        float _3171 = inversesqrt(dot(vec3(_3165, _3166, _3167), vec3(_3165, _3166, _3167)));
                        float _3172 = _3171 * _3165;
                        float _3173 = _3171 * _3166;
                        float _3174 = _3171 * _3167;
                        float _3182 = exp2(log2(1.0 / ((_3157 * 3.5) + 5.0)) * 0.25);
                        float _3183 = 1.0 - _962;
                        float _3190 = sqrt(1.0 - ((1.0 - (_3183 * _3183)) * (1.0 - (_3182 * _3182))));
                        float _3191 = _3190 * _3190;
                        float _3192 = _3191 * _3191;
                        float _3193 = _3172 + _3137;
                        float _3194 = _3173 + _3138;
                        float _3195 = _3174 + _3139;
                        float _3199 = inversesqrt(dot(vec3(_3193, _3194, _3195), vec3(_3193, _3194, _3195)));
                        float _3203 = dot(vec3(_887, _890, _893), vec3(_3172, _3173, _3174));
                        float _4474 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0));
                        float _3206 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
                        float _3207 = dot(vec3(_887, _890, _893), vec3(_3199 * _3193, _3199 * _3194, _3199 * _3195));
                        float _4485 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                        float _3210 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
                        float _3214 = ((_3210 * _3210) * (_3192 + (-1.0))) + 1.0;
                        float _3215 = _3150 * _3191;
                        float _3216 = _3215 * _3215;
                        float _3219 = ((1.0 - _3216) * _3140) + _3216;
                        float _4496 = isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0));
                        float _3220 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
                        float _3221 = 1.0 - _3191;
                        float _3231 = (0.5 / (((_3220 * ((_3206 * _3221) + _3191)) + 9.9999999392252902907785028219223e-09) + (((_3220 * _3221) + _3191) * _3206))) * _3220;
                        float _4507 = isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0));
                        float _3242 = (((_3192 * 3.1415927410125732421875) * (isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0)))) / ((_3214 * _3214) * ((_3157 * 2.1991131305694580078125) + 3.141590118408203125))) * _3146;
                        _2999 = (_3161 * _3109.x) + _3067;
                        _3000 = (_3161 * _3109.y) + _3068;
                        _3001 = (_3161 * _3109.z) + _3069;
                        _2996 = (_3242 * _3126.x) + _3064;
                        _2997 = (_3242 * _3126.y) + _3065;
                        _2998 = (_3242 * _3126.z) + _3066;
                        if (_3071 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3064 = _2996;
                            _3065 = _2997;
                            _3066 = _2998;
                            _3067 = _2999;
                            _3068 = _3000;
                            _3069 = _3001;
                            _3070 = _3071;
                        }
                    }
                    frontier_phi_61_pred = _2996;
                    frontier_phi_61_pred_1 = _3001;
                    frontier_phi_61_pred_2 = _3000;
                    frontier_phi_61_pred_3 = _2999;
                    frontier_phi_61_pred_4 = _2998;
                    frontier_phi_61_pred_5 = _2997;
                }
                _2796 = frontier_phi_61_pred;
                _2806 = frontier_phi_61_pred_1;
                _2804 = frontier_phi_61_pred_2;
                _2802 = frontier_phi_61_pred_3;
                _2800 = frontier_phi_61_pred_4;
                _2798 = frontier_phi_61_pred_5;
                uint _2947 = _2946 + 1u;
                if (_2947 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2940 = _2796;
                    _2941 = _2798;
                    _2942 = _2800;
                    _2943 = _2802;
                    _2944 = _2804;
                    _2945 = _2806;
                    _2946 = _2947;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2795 = _2796;
            _2797 = _2798;
            _2799 = _2800;
            _2801 = _2802;
            _2803 = _2804;
            _2805 = _2806;
        }
        uvec4 _2809 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2810 = _2809.z;
        uint _2812 = (_2810 >> 8u) & 15u;
        float _2908;
        float _2910;
        float _2912;
        float _2914;
        float _2916;
        float _2918;
        if (((4294967295u << _2812) & _2694) == 0u)
        {
            _2908 = _2795;
            _2910 = _2797;
            _2912 = _2799;
            _2914 = _2801;
            _2916 = _2803;
            _2918 = _2805;
        }
        else
        {
            float _2933 = inversesqrt(dot(vec3(_2648, _2649, _2650), vec3(_2648, _2649, _2650)));
            float _2934 = _2933 * _2648;
            float _2935 = _2933 * _2649;
            float _2936 = _2933 * _2650;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2812 < ((_2810 >> 12u) & 15u))
            {
                float _2909;
                float _2911;
                float _2913;
                float _2915;
                float _2917;
                float _2919;
                float _3047 = _2795;
                float _3048 = _2797;
                float _3049 = _2799;
                float _3050 = _2801;
                float _3051 = _2803;
                float _3052 = _2805;
                uint _3053 = _2812;
                uint _3062;
                bool _3063;
                for (;;)
                {
                    _3062 = texelFetch(g_lightClassification, int((((_2688 << 5u) + (_2674 << 9u)) + (_3053 << 2u)) >> 2u)).x;
                    _3063 = _3062 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3063)
                    {
                        frontier_phi_67_pred = _3050;
                        frontier_phi_67_pred_1 = _3051;
                        frontier_phi_67_pred_2 = _3052;
                        frontier_phi_67_pred_3 = _3049;
                        frontier_phi_67_pred_4 = _3048;
                        frontier_phi_67_pred_5 = _3047;
                    }
                    else
                    {
                        float _3247;
                        float _3248;
                        float _3249;
                        float _3250;
                        float _3251;
                        float _3252;
                        float _3541;
                        float _3542;
                        float _3543;
                        float _3544;
                        float _3545;
                        float _3546;
                        float _3260 = _3047;
                        float _3261 = _3048;
                        float _3262 = _3049;
                        float _3263 = _3050;
                        float _3264 = _3051;
                        float _3265 = _3052;
                        uint _3266 = _3062;
                        uint _3267;
                        vec4 _3292;
                        float _3293;
                        vec4 _3308;
                        vec3 _3320;
                        vec4 _3335;
                        vec4 _3350;
                        float _3397;
                        bool _3398;
                        for (;;)
                        {
                            uint _3277 = ((_3053 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3266));
                            _3267 = (_3266 + 4294967295u) & _3266;
                            uint _3279 = _3277 * 40u;
                            _3292 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3279)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3279 + 3u)).x));
                            _3293 = _3292.w;
                            uint _3295 = (_3277 * 40u) + 4u;
                            _3308 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3295)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 3u)).x));
                            uint _3310 = (_3277 * 40u) + 8u;
                            _3320 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3310)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3310 + 2u)).x));
                            uint _3322 = (_3277 * 40u) + 16u;
                            _3335 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3322)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 3u)).x));
                            uint _3337 = (_3277 * 40u) + 20u;
                            _3350 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3337)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3337 + 3u)).x));
                            uint _3353 = (_3277 * 40u) + 24u;
                            vec4 _3366 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3353)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3353 + 3u)).x));
                            uint _3372 = (_3277 * 40u) + 28u;
                            vec4 _3385 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3372)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3372 + 3u)).x));
                            _3397 = fma(_2650, _3385.z, fma(_2649, _3385.y, _3385.x * _2648)) + _3385.w;
                            _3398 = !((fma(_2650, _3366.z, fma(_2649, _3366.y, _3366.x * _2648)) + _3366.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3398)
                            {
                                float _3425 = _3292.x - _2648;
                                float _3426 = _3292.y - _2649;
                                float _3427 = _3292.z - _2650;
                                float _3428 = dot(vec3(_3425, _3426, _3427), vec3(_3425, _3426, _3427));
                                float _3431 = inversesqrt(_3428);
                                float _3432 = _3431 * _3425;
                                float _3433 = _3431 * _3426;
                                float _3434 = _3431 * _3427;
                                float _3438 = 1.0 - (_3428 / (_3293 * _3293));
                                float _4518 = isnan(0.0) ? _3438 : (isnan(_3438) ? 0.0 : max(_3438, 0.0));
                                float _3439 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
                                float _3443 = sqrt(_3428) * _3308.w;
                                float _3445 = 1.39999997615814208984375 / (_3443 + 1.39999997615814208984375);
                                float _3446 = _3445 * _3445;
                                float _3449 = ((1.0 - _3446) * dot(vec3(_3432, _3433, _3434), vec3(_887, _890, _893))) + _3446;
                                float _3452 = _3443 * _3443;
                                float _3456 = (fma(_2650, _3335.z, fma(_2649, _3335.y, _3335.x * _2648)) + _3335.w) / _3397;
                                float _3457 = (fma(_2650, _3350.z, fma(_2649, _3350.y, _3350.x * _2648)) + _3350.w) / _3397;
                                float _3461 = 1.0 - dot(vec2(_3456, _3457), vec2(_3456, _3457));
                                float _4534 = isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0));
                                float _3462 = isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0));
                                float _3463 = _3462 * (((isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0))) * _3439) / ((_3452 * 0.699999988079071044921875) + 1.0));
                                float _3475 = exp2(log2(1.0 / ((_3452 * 3.5) + 5.0)) * 0.25);
                                float _3476 = 1.0 - _962;
                                float _3483 = sqrt(1.0 - ((1.0 - (_3476 * _3476)) * (1.0 - (_3475 * _3475))));
                                float _3484 = _3483 * _3483;
                                float _3485 = _3484 * _3484;
                                float _3486 = _3432 - _2934;
                                float _3487 = _3433 - _2935;
                                float _3488 = _3434 - _2936;
                                float _3492 = inversesqrt(dot(vec3(_3486, _3487, _3488), vec3(_3486, _3487, _3488)));
                                float _3496 = dot(vec3(_887, _890, _893), vec3((-0.0) - _2934, (-0.0) - _2935, (-0.0) - _2936));
                                float _4545 = isnan(0.0) ? _3496 : (isnan(_3496) ? 0.0 : max(_3496, 0.0));
                                float _3499 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
                                float _3500 = dot(vec3(_887, _890, _893), vec3(_3492 * _3486, _3492 * _3487, _3492 * _3488));
                                float _4556 = isnan(0.0) ? _3500 : (isnan(_3500) ? 0.0 : max(_3500, 0.0));
                                float _3503 = isnan(1.0) ? _4556 : (isnan(_4556) ? 1.0 : min(_4556, 1.0));
                                float _3507 = ((_3503 * _3503) * (_3485 + (-1.0))) + 1.0;
                                float _3508 = _3445 * _3484;
                                float _3509 = _3508 * _3508;
                                float _3515 = ((1.0 - _3509) * dot(vec3(_887, _890, _893), vec3(_3432, _3433, _3434))) + _3509;
                                float _4567 = isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0));
                                float _3516 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
                                float _3517 = 1.0 - _3484;
                                float _3527 = (0.5 / (((_3516 * ((_3499 * _3517) + _3484)) + 9.9999999392252902907785028219223e-09) + (((_3516 * _3517) + _3484) * _3499))) * _3516;
                                float _4578 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                                float _3537 = (_3462 * _3439) * (((_3485 * 3.1415927410125732421875) * (isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0)))) / ((_3507 * _3507) * ((_3452 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3537 * _3320.x;
                                frontier_phi_73_pred_1 = _3537 * _3320.y;
                                frontier_phi_73_pred_2 = _3463 * _3308.z;
                                frontier_phi_73_pred_3 = _3463 * _3308.y;
                                frontier_phi_73_pred_4 = _3463 * _3308.x;
                                frontier_phi_73_pred_5 = _3537 * _3320.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3541 = frontier_phi_73_pred;
                            _3542 = frontier_phi_73_pred_1;
                            _3546 = frontier_phi_73_pred_2;
                            _3545 = frontier_phi_73_pred_3;
                            _3544 = frontier_phi_73_pred_4;
                            _3543 = frontier_phi_73_pred_5;
                            _3250 = _3544 + _3263;
                            _3251 = _3545 + _3264;
                            _3252 = _3546 + _3265;
                            _3247 = _3541 + _3260;
                            _3248 = _3542 + _3261;
                            _3249 = _3543 + _3262;
                            if (_3267 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3260 = _3247;
                                _3261 = _3248;
                                _3262 = _3249;
                                _3263 = _3250;
                                _3264 = _3251;
                                _3265 = _3252;
                                _3266 = _3267;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3250;
                        frontier_phi_67_pred_1 = _3251;
                        frontier_phi_67_pred_2 = _3252;
                        frontier_phi_67_pred_3 = _3249;
                        frontier_phi_67_pred_4 = _3248;
                        frontier_phi_67_pred_5 = _3247;
                    }
                    _2915 = frontier_phi_67_pred;
                    _2917 = frontier_phi_67_pred_1;
                    _2919 = frontier_phi_67_pred_2;
                    _2913 = frontier_phi_67_pred_3;
                    _2911 = frontier_phi_67_pred_4;
                    _2909 = frontier_phi_67_pred_5;
                    uint _3054 = _3053 + 1u;
                    if (_3054 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3047 = _2909;
                        _3048 = _2911;
                        _3049 = _2913;
                        _3050 = _2915;
                        _3051 = _2917;
                        _3052 = _2919;
                        _3053 = _3054;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2917;
                frontier_phi_55_56_ladder_1 = _2919;
                frontier_phi_55_56_ladder_2 = _2915;
                frontier_phi_55_56_ladder_3 = _2913;
                frontier_phi_55_56_ladder_4 = _2911;
                frontier_phi_55_56_ladder_5 = _2909;
            }
            else
            {
                frontier_phi_55_56_ladder = _2803;
                frontier_phi_55_56_ladder_1 = _2805;
                frontier_phi_55_56_ladder_2 = _2801;
                frontier_phi_55_56_ladder_3 = _2799;
                frontier_phi_55_56_ladder_4 = _2797;
                frontier_phi_55_56_ladder_5 = _2795;
            }
            _2908 = frontier_phi_55_56_ladder_5;
            _2910 = frontier_phi_55_56_ladder_4;
            _2912 = frontier_phi_55_56_ladder_3;
            _2914 = frontier_phi_55_56_ladder_2;
            _2916 = frontier_phi_55_56_ladder;
            _2918 = frontier_phi_55_56_ladder_1;
        }
        float _2923 = isnan(1.0) ? _946 : (isnan(_946) ? 1.0 : min(_946, 1.0));
        _2707 = (_2923 * _2914) + _2140;
        _2709 = (_2923 * _2916) + _2142;
        _2711 = (_2923 * _2918) + _2144;
        _2713 = ((_2908 * _931) * _2923) + _2488;
        _2715 = ((_2910 * _933) * _2923) + _2490;
        _2717 = ((_2912 * _934) * _2923) + _2492;
    }
    else
    {
        _2707 = _2140;
        _2709 = _2142;
        _2711 = _2144;
        _2713 = _2488;
        _2715 = _2490;
        _2717 = _2492;
    }
    float _4594 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _4605 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
    float _4616 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    uint _2737 = _906 + 6u;
    float _2745 = _868 / cbSceneParam._m0[86u].x;
    float _2746 = _869 / cbSceneParam._m0[86u].y;
    vec4 _2760 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2745, _2746, (log2((isnan(cbSceneParam._m0[77u].w) ? _803 : (isnan(_803) ? cbSceneParam._m0[77u].w : min(_803, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2762 = _2760.x;
    float _2763 = _2760.y;
    float _2764 = _2760.z;
    float _2765 = _2760.w;
    float _2858;
    float _2860;
    float _2862;
    float _2864;
    if (_803 > cbSceneParam._m0[78u].w)
    {
        float _2820 = isnan(_803) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _803 : min(cbSceneParam._m0[80u].w, _803));
        float _2821 = _2820 / _803;
        float _2832 = _2821 * _853;
        float _2833 = _854 * _2821;
        float _2834 = (-0.0) - _2833;
        float _2836 = _2821 * _855;
        float _2838 = (cbSceneParam._m0[77u].w * _2834) / _2820;
        float _2839 = _2838 + cbSceneParam._m0[79u].w;
        float _2840 = cbSceneParam._m0[79u].w - _2833;
        float _2846 = sqrt(((_2832 * _2832) + (_2833 * _2833)) + (_2836 * _2836));
        float _2849 = (1.0 - (cbSceneParam._m0[77u].w / _2820)) * _2846;
        float _2854 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2856 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3009;
        if (abs((_2834 - _2838) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3009 = ((((_2839 > 0.0) ? exp2(_2854 * _2839) : (2.0 - exp2(_2856 * _2839))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2849;
        }
        else
        {
            float _2969 = 1.0 / cbSceneParam._m0[80u].x;
            float _2970 = isnan(_2840) ? _2839 : (isnan(_2839) ? _2840 : max(_2839, _2840));
            float _2971 = isnan(_2840) ? _2839 : (isnan(_2839) ? _2840 : min(_2839, _2840));
            float _2980 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : min(_2970, 0.0));
            float _2981 = isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : min(_2971, 0.0));
            _3009 = ((abs(_2846 / _2834) * cbSceneParam._m0[80u].y) * ((((_2980 - _2981) * 2.0) - ((exp2(_2854 * (isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0)))) - exp2(_2854 * (isnan(0.0) ? _2971 : (isnan(_2971) ? 0.0 : max(_2971, 0.0))))) * _2969)) - ((exp2(_2856 * _2980) - exp2(_2856 * _2981)) * _2969))) + (_2849 * cbSceneParam._m0[80u].z);
        }
        vec4 _3011 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2745, _2746, 1.0), 0.0);
        float _3020 = exp2((_3009 * (-1.44269502162933349609375)) * (1.0 - _3011.w));
        float _3021 = log2(_3020);
        float _3037 = log2(_2765);
        _2858 = (exp2(_3037 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3021 * cbSceneParam._m0[78u].x)) * _3011.x) / cbSceneParam._m0[78u].x)) + _2762;
        _2860 = (exp2(_3037 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3021 * cbSceneParam._m0[78u].y)) * _3011.y) / cbSceneParam._m0[78u].y)) + _2763;
        _2862 = (exp2(_3037 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3021 * cbSceneParam._m0[78u].z)) * _3011.z) / cbSceneParam._m0[78u].z)) + _2764;
        _2864 = _3020 * _2765;
    }
    else
    {
        _2858 = _2762;
        _2860 = _2763;
        _2862 = _2764;
        _2864 = _2765;
    }
    float _2876 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2877 = _2876 == 3.0;
    float _2878 = log2(_2864);
    float _2885 = exp2(_2878 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0))) * (_2707 + ((isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0))) * _946))) + ((_2713 + ((isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0))) * _1756)) * cbPerFrame._m0[3u].x));
    float _2886 = exp2(_2878 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0))) * (_2709 + ((isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0))) * _946))) + ((_2715 + ((isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0))) * _1756)) * cbPerFrame._m0[3u].x));
    float _2887 = exp2(_2878 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0))) * (_2711 + ((isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0))) * _946))) + ((_2717 + ((isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0))) * _1756)) * cbPerFrame._m0[3u].x));
    float _2896 = (_2876 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2896 * (_2877 ? _2885 : (_2885 + (cbSceneParam._m0[72u].w * _2858)));
    SV_Target.y = _2896 * (_2877 ? _2886 : (_2886 + (cbSceneParam._m0[72u].w * _2860)));
    SV_Target.z = _2896 * (_2877 ? _2887 : (_2887 + (cbSceneParam._m0[72u].w * _2862)));
    SV_Target.w = cbInstanceData._m0[_2737].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2737].w;
}


