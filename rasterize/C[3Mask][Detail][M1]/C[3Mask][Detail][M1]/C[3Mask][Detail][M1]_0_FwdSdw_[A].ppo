#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_20;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1401;
float _4067;
float _4068;
float _4069;
float _4070;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _223 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _224 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _225 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _231 = inversesqrt(dot(vec3(_223, _224, _225), vec3(_223, _224, _225)));
    float _238 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _245 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _268 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _274 = _268.x * cbMtdParam._m0[10u].x;
    float _275 = _268.y * cbMtdParam._m0[10u].y;
    float _276 = _268.z * cbMtdParam._m0[10u].z;
    vec4 _294 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _344 = cbMtdParam._m0[18u].y * texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x;
    float _355 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].x * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].y * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _344)) + 1.0;
    float _4079 = isnan(0.0) ? _355 : (isnan(_355) ? 0.0 : max(_355, 0.0));
    float _356 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
    float _363 = (_356 * ((_294.x * cbMtdParam._m0[11u].x) - _274)) + _274;
    float _364 = (_356 * ((_294.y * cbMtdParam._m0[11u].y) - _275)) + _275;
    float _365 = (_356 * ((_294.z * cbMtdParam._m0[11u].z) - _276)) + _276;
    vec4 _383 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _410 = ((cbMtdParam._m0[17u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _344)) + 1.0;
    float _4090 = isnan(0.0) ? _410 : (isnan(_410) ? 0.0 : max(_410, 0.0));
    float _411 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
    float _418 = (_411 * ((_383.x * cbMtdParam._m0[12u].x) - _363)) + _363;
    float _419 = (_411 * ((_383.y * cbMtdParam._m0[12u].y) - _364)) + _364;
    float _420 = (_411 * ((_383.z * cbMtdParam._m0[12u].z) - _365)) + _365;
    vec4 _437 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _462 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[18u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[18u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _344)) + 1.0;
    float _4101 = isnan(0.0) ? _462 : (isnan(_462) ? 0.0 : max(_462, 0.0));
    float _463 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
    vec4 _491 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _499 = ((((_463 * ((_437.x * cbMtdParam._m0[13u].x) - _418)) + _418) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _491.x;
    float _502 = ((((_463 * ((_437.y * cbMtdParam._m0[13u].y) - _419)) + _419) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _491.y;
    float _505 = ((((_463 * ((_437.z * cbMtdParam._m0[13u].z) - _420)) + _420) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _491.z;
    vec4 _525 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _554 = (TEXCOORD_5.x - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.z) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.w) + cbTextureTilingScale._m0[18u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].z + 1.0);
    float _4112 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _555 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
    float _562 = (_555 * ((_525.x * cbMtdParam._m0[14u].x) - _499)) + _499;
    float _563 = (_555 * ((_525.y * cbMtdParam._m0[14u].y) - _502)) + _502;
    float _564 = (_555 * ((_525.z * cbMtdParam._m0[14u].z) - _505)) + _505;
    vec4 _577 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _579 = _577.x;
    float _597 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _579) * _356) + _579;
    float _614 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _597) * _411) + _597;
    float _631 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _614) * _463) + _614;
    float _633 = _631 - (_631 * TEXCOORD_5.x);
    vec4 _646 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _668 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _670 = _668.x;
    float _671 = _668.y;
    float _674 = cbMtdParam._m0[17u].y * _668.z;
    vec4 _686 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _695 = (((cbMtdParam._m0[17u].x * _686.z) - _674) * _356) + _674;
    vec4 _708 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _720 = (((cbMtdParam._m0[16u].w * _708.z) - _695) * _411) + _695;
    vec4 _733 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _742 = (((cbMtdParam._m0[16u].z * _733.z) - _720) * _463) + _720;
    float _747 = ((cbMtdParam._m0[16u].x * TEXCOORD_5.x) * ((_646.z * cbMtdParam._m0[17u].z) - _742)) + _742;
    vec4 _760 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _772 = ((_686.x - _670) * _356) + _670;
    float _773 = ((_686.y - _671) * _356) + _671;
    float _778 = ((_708.x - _772) * _411) + _772;
    float _779 = ((_708.y - _773) * _411) + _773;
    float _788 = ((((_733.x - _778) * _463) + _778) * 2.0) + (-1.0);
    float _789 = ((((_733.y - _779) * _463) + _779) * 2.0) + (-1.0);
    float _790 = dot(vec2(_788, _789), vec2(_788, _789));
    float _4123 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _795 = sqrt(1.0 - (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0))));
    float _805 = ((((_760.x * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _788) + ((((_646.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[15u].y);
    float _806 = ((((_760.y * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _789) + ((((_646.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[15u].y);
    float _809 = fma(_795, _238 * NORMAL.x, fma(_806, _245 * TANGENT.x, (_231 * _223) * _805));
    float _812 = fma(_795, _238 * NORMAL.y, fma(_806, _245 * TANGENT.y, (_231 * _224) * _805));
    float _815 = fma(_795, _238 * NORMAL.z, fma(_806, _245 * TANGENT.z, (_231 * _225) * _805));
    float _819 = inversesqrt(dot(vec3(_809, _812, _815), vec3(_809, _812, _815)));
    float _820 = _819 * _809;
    float _821 = _819 * _812;
    float _822 = _819 * _815;
    float _4134 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _823 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
    float _4145 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _4156 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _4167 = isnan(0.0) ? _564 : (isnan(_564) ? 0.0 : max(_564, 0.0));
    float _4178 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _827 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
    float _843 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _883 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _893 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _883);
    float _894 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _883);
    float _895 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _883);
    float _899 = inversesqrt(dot(vec3(_893, _894, _895), vec3(_893, _894, _895)));
    float _900 = _893 * _899;
    float _901 = _894 * _899;
    float _902 = _895 * _899;
    vec4 _907 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _909 = _907.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1081 = sqrt(((_893 * _893) + (_894 * _894)) + (_895 * _895));
        float _1087 = (cbMatDynParam._m0[5u].x * _1081) + cbMatDynParam._m0[5u].y;
        float _4189 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
        float _1092 = (cbMatDynParam._m0[5u].z * _1081) + cbMatDynParam._m0[5u].w;
        float _4200 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0))) - _1088)) + _1088) < ((_909 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _920 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _921 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _939 = fma(_822, cbSceneParam._m0[5u].z, fma(_821, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _820));
    float _942 = fma(_822, cbSceneParam._m0[6u].z, fma(_821, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _820));
    float _945 = fma(_822, cbSceneParam._m0[7u].z, fma(_821, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _820));
    uint _958 = uint(roundEven(NORMAL.w)) * 13u;
    uint _959 = _958 + 9u;
    uint _960 = _959 + uint(cbMatDynParam._m0[0u].w);
    float _966 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0)))) * cbInstanceData._m0[_960].x;
    float _967 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0)))) * cbInstanceData._m0[_960].y;
    float _968 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0)))) * cbInstanceData._m0[_960].z;
    float _4211 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _969 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
    float _4222 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
    float _970 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
    float _4233 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
    float _971 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
    float _972 = 1.0 - _827;
    float _973 = _969 * _972;
    float _974 = _970 * _972;
    float _975 = _971 * _972;
    float _980 = (_969 + (-0.039999999105930328369140625)) * _827;
    float _981 = (_970 + (-0.039999999105930328369140625)) * _827;
    float _982 = (_971 + (-0.039999999105930328369140625)) * _827;
    float _983 = _980 + 0.039999999105930328369140625;
    float _985 = _981 + 0.039999999105930328369140625;
    float _986 = _982 + 0.039999999105930328369140625;
    vec4 _995 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _920, cbSceneParam._m0[86u].y * _921));
    float _998 = _995.x * TEXCOORD_5.w;
    float _999 = dot(vec3(_820, _821, _822), vec3(_900, _901, _902));
    float _1002 = _999 * 2.0;
    float _1006 = (_1002 * _820) - _900;
    float _1007 = (_1002 * _821) - _901;
    float _1008 = (_1002 * _822) - _902;
    float _1012 = abs(dot(vec3(_900, _901, _902), vec3(_820, _821, _822)));
    float _4244 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
    float _1014 = sqrt(_823);
    float _1027 = exp2((_1014 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1014 * 3.0));
    float _1033 = (1.0 - _1027) * ((_1014 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1034 = _1027 * _1014;
    float _1062 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1066 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1070 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1400;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1125 = fma(_1070, cbModelParam._m0[26u].z, fma(_1066, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1062));
        float _1129 = fma(_1070, cbModelParam._m0[27u].z, fma(_1066, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1062));
        float _1133 = fma(_1070, cbModelParam._m0[28u].z, fma(_1066, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1062));
        float _1158 = _1062 + _820;
        float _1159 = _1066 + _821;
        float _1160 = _1070 + _822;
        float _1170 = fma(_1160, cbModelParam._m0[26u].z, fma(_1159, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1158)) - _1125;
        float _1171 = fma(_1160, cbModelParam._m0[27u].z, fma(_1159, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1158)) - _1129;
        float _1172 = fma(_1160, cbModelParam._m0[28u].z, fma(_1159, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1158)) - _1133;
        float _1176 = inversesqrt(dot(vec3(_1170, _1171, _1172), vec3(_1170, _1171, _1172)));
        float _1189 = ((_1176 * _1170) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1125 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1190 = ((_1176 * _1171) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1129 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1191 = ((_1176 * _1172) / cbModelParam._m0[34u].z) + ((((((_1133 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1194 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        vec4 _1201 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        vec4 _1208 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        vec4 _1215 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1189, _1190, _1191), 0.0);
        float _1228 = exp2((_1194.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1194.x + (-0.5));
        float _1230 = _1228 * (_1194.y + (-0.5));
        float _1231 = _1228 * (_1194.z + (-0.5));
        float _1238 = exp2((_1201.w + (-0.5)) * 20.0) * 2.0;
        float _1239 = _1238 * (_1201.x + (-0.5));
        float _1240 = _1238 * (_1201.y + (-0.5));
        float _1241 = _1238 * (_1201.z + (-0.5));
        float _1248 = exp2((_1208.w + (-0.5)) * 20.0) * 2.0;
        float _1249 = _1248 * (_1208.x + (-0.5));
        float _1250 = _1248 * (_1208.y + (-0.5));
        float _1251 = _1248 * (_1208.z + (-0.5));
        float _1258 = exp2((_1215.w + (-0.5)) * 20.0) * 2.0;
        float _1259 = _1258 * (_1215.x + (-0.5));
        float _1260 = _1258 * (_1215.y + (-0.5));
        float _1261 = _1258 * (_1215.z + (-0.5));
        float _1262 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1263 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1264 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1265 = _1229 * 0.5;
        float _1266 = _1239 * 0.5;
        float _1267 = _1249 * 0.5;
        float _1268 = dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267));
        float _1273 = (_1268 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1268);
        float _1282 = (dot(vec3(_820, _821, _822), vec3(_1273 * _1265, _1273 * _1266, _1273 * _1267)) + 1.0) * 0.5;
        float _4270 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1292 = sqrt(((_1266 * _1266) + (_1265 * _1265)) + (_1267 * _1267)) / (_1262 + 9.9999997473787516355514526367188e-06);
        float _4281 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _1294 = _1293 * 2.0;
        float _1298 = (1.0 - _1293) / (_1293 + 1.0);
        float _4292 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _1308 = ((((1.0 - _1299) * (_1294 + 2.0)) * exp2(log2(isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * (_1294 + 1.0))) + _1299) * _1262;
        float _1309 = _1230 * 0.5;
        float _1310 = _1240 * 0.5;
        float _1311 = _1250 * 0.5;
        float _1312 = dot(vec3(_1309, _1310, _1311), vec3(_1309, _1310, _1311));
        float _1317 = (_1312 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1312);
        float _1325 = (dot(vec3(_820, _821, _822), vec3(_1317 * _1309, _1317 * _1310, _1317 * _1311)) + 1.0) * 0.5;
        float _4303 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1334 = sqrt(((_1310 * _1310) + (_1309 * _1309)) + (_1311 * _1311)) / (_1263 + 9.9999997473787516355514526367188e-06);
        float _4314 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _1336 = _1335 * 2.0;
        float _1340 = (1.0 - _1335) / (_1335 + 1.0);
        float _4325 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _1350 = ((((1.0 - _1341) * (_1336 + 2.0)) * exp2(log2(isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * (_1336 + 1.0))) + _1341) * _1263;
        float _1351 = _1231 * 0.5;
        float _1352 = _1241 * 0.5;
        float _1353 = _1251 * 0.5;
        float _1354 = dot(vec3(_1351, _1352, _1353), vec3(_1351, _1352, _1353));
        float _1359 = (_1354 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1354);
        float _1367 = (dot(vec3(_820, _821, _822), vec3(_1359 * _1351, _1359 * _1352, _1359 * _1353)) + 1.0) * 0.5;
        float _4336 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1376 = sqrt(((_1352 * _1352) + (_1351 * _1351)) + (_1353 * _1353)) / (_1264 + 9.9999997473787516355514526367188e-06);
        float _4347 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1377 = isnan(1.0) ? _4347 : (isnan(_4347) ? 1.0 : min(_4347, 1.0));
        float _1378 = _1377 * 2.0;
        float _1382 = (1.0 - _1377) / (_1377 + 1.0);
        float _4358 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _4358 : (isnan(_4358) ? 1.0 : min(_4358, 1.0));
        float _1392 = ((((1.0 - _1383) * (_1378 + 2.0)) * exp2(log2(isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * (_1378 + 1.0))) + _1383) * _1264;
        _1400 = _1231;
        _1402 = _1230;
        _1403 = _1229;
        _1404 = _1241;
        _1405 = _1240;
        _1406 = _1239;
        _1407 = _1251;
        _1408 = _1250;
        _1409 = _1249;
        _1410 = _1264;
        _1411 = _1263;
        _1412 = _1262;
        _1413 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)));
        _1414 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0)));
        _1415 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0)));
    }
    else
    {
        _1400 = _1401;
        _1402 = _1401;
        _1403 = _1401;
        _1404 = _1401;
        _1405 = _1401;
        _1406 = _1401;
        _1407 = _1401;
        _1408 = _1401;
        _1409 = _1401;
        _1410 = _1401;
        _1411 = _1401;
        _1412 = _1401;
        _1413 = 0.0;
        _1414 = 0.0;
        _1415 = 0.0;
    }
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    float _1726;
    float _1727;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1444 = fma(_1070, cbModelParam._m0[30u].z, fma(_1066, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1062));
        float _1448 = fma(_1070, cbModelParam._m0[31u].z, fma(_1066, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1062));
        float _1452 = fma(_1070, cbModelParam._m0[32u].z, fma(_1066, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1062));
        float _1475 = _1062 + _820;
        float _1476 = _1066 + _821;
        float _1477 = _1070 + _822;
        float _1487 = fma(_1477, cbModelParam._m0[30u].z, fma(_1476, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1475)) - _1444;
        float _1488 = fma(_1477, cbModelParam._m0[31u].z, fma(_1476, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1475)) - _1448;
        float _1489 = fma(_1477, cbModelParam._m0[32u].z, fma(_1476, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1475)) - _1452;
        float _1493 = inversesqrt(dot(vec3(_1487, _1488, _1489), vec3(_1487, _1488, _1489)));
        float _1506 = ((_1493 * _1487) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1444 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1507 = ((_1493 * _1488) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1448 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1508 = ((_1493 * _1489) / cbModelParam._m0[35u].z) + ((((((_1452 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1510 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1506, _1507, _1508), 0.0);
        vec4 _1517 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1506, _1507, _1508), 0.0);
        vec4 _1524 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1506, _1507, _1508), 0.0);
        vec4 _1531 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1506, _1507, _1508), 0.0);
        float _1543 = exp2((_1510.w + (-0.5)) * 20.0) * 2.0;
        float _1544 = _1543 * (_1510.x + (-0.5));
        float _1545 = _1543 * (_1510.y + (-0.5));
        float _1546 = _1543 * (_1510.z + (-0.5));
        float _1553 = exp2((_1517.w + (-0.5)) * 20.0) * 2.0;
        float _1554 = _1553 * (_1517.x + (-0.5));
        float _1555 = _1553 * (_1517.y + (-0.5));
        float _1556 = _1553 * (_1517.z + (-0.5));
        float _1563 = exp2((_1524.w + (-0.5)) * 20.0) * 2.0;
        float _1564 = _1563 * (_1524.x + (-0.5));
        float _1565 = _1563 * (_1524.y + (-0.5));
        float _1566 = _1563 * (_1524.z + (-0.5));
        float _1573 = exp2((_1531.w + (-0.5)) * 20.0) * 2.0;
        float _1574 = _1573 * (_1531.x + (-0.5));
        float _1575 = _1573 * (_1531.y + (-0.5));
        float _1576 = _1573 * (_1531.z + (-0.5));
        float _1577 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1578 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1579 = isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0));
        float _1580 = _1544 * 0.5;
        float _1581 = _1554 * 0.5;
        float _1582 = _1564 * 0.5;
        float _1583 = dot(vec3(_1580, _1581, _1582), vec3(_1580, _1581, _1582));
        float _1588 = (_1583 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1583);
        float _1596 = (dot(vec3(_820, _821, _822), vec3(_1588 * _1580, _1588 * _1581, _1588 * _1582)) + 1.0) * 0.5;
        float _4399 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1605 = sqrt(((_1581 * _1581) + (_1580 * _1580)) + (_1582 * _1582)) / (_1577 + 9.9999997473787516355514526367188e-06);
        float _4410 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1606 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _1607 = _1606 * 2.0;
        float _1611 = (1.0 - _1606) / (_1606 + 1.0);
        float _4421 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1612 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
        float _1621 = ((((1.0 - _1612) * (_1607 + 2.0)) * exp2(log2(isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (_1607 + 1.0))) + _1612) * _1577;
        float _1622 = _1545 * 0.5;
        float _1623 = _1555 * 0.5;
        float _1624 = _1565 * 0.5;
        float _1625 = dot(vec3(_1622, _1623, _1624), vec3(_1622, _1623, _1624));
        float _1630 = (_1625 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1625);
        float _1638 = (dot(vec3(_820, _821, _822), vec3(_1630 * _1622, _1630 * _1623, _1630 * _1624)) + 1.0) * 0.5;
        float _4432 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1647 = sqrt(((_1623 * _1623) + (_1622 * _1622)) + (_1624 * _1624)) / (_1578 + 9.9999997473787516355514526367188e-06);
        float _4443 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
        float _1648 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
        float _1649 = _1648 * 2.0;
        float _1653 = (1.0 - _1648) / (_1648 + 1.0);
        float _4454 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1654 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _1663 = ((((1.0 - _1654) * (_1649 + 2.0)) * exp2(log2(isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * (_1649 + 1.0))) + _1654) * _1578;
        float _1664 = _1546 * 0.5;
        float _1665 = _1556 * 0.5;
        float _1666 = _1566 * 0.5;
        float _1667 = dot(vec3(_1664, _1665, _1666), vec3(_1664, _1665, _1666));
        float _1672 = (_1667 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1667);
        float _1680 = (dot(vec3(_820, _821, _822), vec3(_1672 * _1664, _1672 * _1665, _1672 * _1666)) + 1.0) * 0.5;
        float _4465 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
        float _1689 = sqrt(((_1665 * _1665) + (_1664 * _1664)) + (_1666 * _1666)) / (_1579 + 9.9999997473787516355514526367188e-06);
        float _4476 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
        float _1690 = isnan(1.0) ? _4476 : (isnan(_4476) ? 1.0 : min(_4476, 1.0));
        float _1691 = _1690 * 2.0;
        float _1695 = (1.0 - _1690) / (_1690 + 1.0);
        float _4487 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
        float _1696 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
        float _1705 = ((((1.0 - _1696) * (_1691 + 2.0)) * exp2(log2(isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (_1691 + 1.0))) + _1696) * _1579;
        _1713 = _1546;
        _1714 = _1545;
        _1715 = _1544;
        _1716 = _1556;
        _1717 = _1555;
        _1718 = _1554;
        _1719 = _1566;
        _1720 = _1565;
        _1721 = _1564;
        _1722 = _1579;
        _1723 = _1578;
        _1724 = _1577;
        _1725 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0)));
        _1726 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0)));
        _1727 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0)));
    }
    else
    {
        _1713 = _1401;
        _1714 = _1401;
        _1715 = _1401;
        _1716 = _1401;
        _1717 = _1401;
        _1718 = _1401;
        _1719 = _1401;
        _1720 = _1401;
        _1721 = _1401;
        _1722 = _1401;
        _1723 = _1401;
        _1724 = _1401;
        _1725 = 0.0;
        _1726 = 0.0;
        _1727 = 0.0;
    }
    float _1737 = (cbModelParam._m0[1u].x * (_1725 - _1413)) + _1413;
    float _1738 = (cbModelParam._m0[1u].x * (_1726 - _1414)) + _1414;
    float _1739 = (cbModelParam._m0[1u].x * (_1727 - _1415)) + _1415;
    float _1760 = fma(_1739, cbSceneParam._m0[89u].z, fma(_1738, cbSceneParam._m0[89u].y, _1737 * cbSceneParam._m0[89u].x));
    float _1763 = fma(_1739, cbSceneParam._m0[90u].z, fma(_1738, cbSceneParam._m0[90u].y, _1737 * cbSceneParam._m0[90u].x));
    float _1766 = fma(_1739, cbSceneParam._m0[91u].z, fma(_1738, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1737));
    float _1781 = _1006 * 0.5;
    float _1782 = _1007 * 0.5;
    float _1783 = _1008 * 0.5;
    float _1784 = dot(vec4(_1781, _1782, _1783, 1.0), vec4(_1715, _1718, _1721, _1724));
    float _1787 = dot(vec4(_1781, _1782, _1783, 1.0), vec4(_1714, _1717, _1720, _1723));
    float _1790 = dot(vec4(_1781, _1782, _1783, 1.0), vec4(_1713, _1716, _1719, _1722));
    float _1824;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1797 = dot(vec4(_1781, _1782, _1783, 1.0), vec4(_1400, _1404, _1407, _1410));
        float _1801 = dot(vec4(_1781, _1782, _1783, 1.0), vec4(_1402, _1405, _1408, _1411));
        float _1805 = dot(vec4(_1781, _1782, _1783, 1.0), vec4(_1403, _1406, _1409, _1412));
        float _1812 = dot(vec4(cbModelParam._m0[39u]), vec4(_1781, _1782, _1783, 1.0));
        _1824 = dot(vec3(isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0)), isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0)), isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1812) ? 0.0 : (isnan(0.0) ? _1812 : max(0.0, _1812))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1824 = 1.0;
    }
    float _1835;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1826 = dot(vec4(cbModelParam._m0[40u]), vec4(_1781, _1782, _1783, 1.0));
        _1835 = dot(vec3(isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0)), isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0)), isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1826) ? 0.0 : (isnan(0.0) ? _1826 : max(0.0, _1826))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1835 = 1.0;
    }
    float _1839 = (_1835 * cbModelParam._m0[1u].x) + (_1824 * (1.0 - cbModelParam._m0[1u].x));
    float _1849 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _823);
    float _1850 = isnan(_1849) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1849 : min(cbModelParam._m0[25u].z, _1849));
    float _1930;
    float _1932;
    float _1934;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1897 = fma(_1070, cbModelParam._m0[13u].z, fma(_1066, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1062)) + cbModelParam._m0[13u].w;
        float _1901 = fma(_1070, cbModelParam._m0[14u].z, fma(_1066, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1062)) + cbModelParam._m0[14u].w;
        float _1905 = fma(_1070, cbModelParam._m0[15u].z, fma(_1066, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1062)) + cbModelParam._m0[15u].w;
        float _1908 = fma(_1008, cbModelParam._m0[13u].z, fma(_1007, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1006));
        float _1911 = fma(_1008, cbModelParam._m0[14u].z, fma(_1007, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1006));
        float _1914 = fma(_1008, cbModelParam._m0[15u].z, fma(_1007, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1006));
        float _1942;
        if (_1908 > 0.0)
        {
            _1942 = abs((1.0 - _1897) / _1908);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1908 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1897 + 1.0) / _1908);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1942 = frontier_phi_17_15_ladder;
        }
        float _2115;
        if (_1911 > 0.0)
        {
            _2115 = abs((1.0 - _1901) / _1911);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1911 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1901 + 1.0) / _1911);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2115 = frontier_phi_26_22_ladder;
        }
        float _2410;
        if (_1914 > 0.0)
        {
            _2410 = abs((1.0 - _1905) / _1914);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1914 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1905 + 1.0) / _1914);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2410 = frontier_phi_38_33_ladder;
        }
        float _2412 = isnan(_2115) ? _1942 : (isnan(_1942) ? _2115 : min(_1942, _2115));
        float _2413 = isnan(_2410) ? _2412 : (isnan(_2412) ? _2410 : min(_2412, _2410));
        float _2417 = (_2413 * _1908) + _1897;
        float _2418 = (_2413 * _1911) + _1901;
        float _2419 = (_2413 * _1914) + _1905;
        float _2420 = _2413 * 9.9999997473787516355514526367188e-05;
        float _2422 = (-1.0) - _2420;
        float _2424 = _2420 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2419 > _2424) || ((_2419 < _2422) || ((_2418 > _2424) || ((_2418 < _2422) || ((_2417 < _2422) || (_2417 > _2424))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2564 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2419, cbModelParam._m0[9u].z, fma(_2418, cbModelParam._m0[9u].y, _2417 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2419, cbModelParam._m0[10u].z, fma(_2418, cbModelParam._m0[10u].y, _2417 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2419, cbModelParam._m0[11u].z, fma(_2418, cbModelParam._m0[11u].y, _2417 * cbModelParam._m0[11u].x))), _1850);
            frontier_phi_16_38_ladder = _2564.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2564.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2564.x * cbModelParam._m0[1u].y;
        }
        _1930 = frontier_phi_16_38_ladder_2;
        _1932 = frontier_phi_16_38_ladder_1;
        _1934 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1918 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1006, _1007, _1008), _1850);
        _1930 = _1918.x * cbModelParam._m0[1u].y;
        _1932 = _1918.y * cbModelParam._m0[1u].y;
        _1934 = _1918.z * cbModelParam._m0[1u].y;
    }
    float _1938 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _823);
    float _1939 = isnan(_1938) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1938 : min(cbModelParam._m0[25u].w, _1938));
    float _2030;
    float _2032;
    float _2034;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1994 = fma(_1070, cbModelParam._m0[21u].z, fma(_1066, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1062)) + cbModelParam._m0[21u].w;
        float _1998 = fma(_1070, cbModelParam._m0[22u].z, fma(_1066, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1062)) + cbModelParam._m0[22u].w;
        float _2002 = fma(_1070, cbModelParam._m0[23u].z, fma(_1066, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1062)) + cbModelParam._m0[23u].w;
        float _2005 = fma(_1008, cbModelParam._m0[21u].z, fma(_1007, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1006));
        float _2008 = fma(_1008, cbModelParam._m0[22u].z, fma(_1007, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1006));
        float _2011 = fma(_1008, cbModelParam._m0[23u].z, fma(_1007, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1006));
        float _2120;
        if (_2005 > 0.0)
        {
            _2120 = abs((1.0 - _1994) / _2005);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2005 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1994 + 1.0) / _2005);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2120 = frontier_phi_28_24_ladder;
        }
        float _2437;
        if (_2008 > 0.0)
        {
            _2437 = abs((1.0 - _1998) / _2008);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2008 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1998 + 1.0) / _2008);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2437 = frontier_phi_40_35_ladder;
        }
        float _2775;
        if (_2011 > 0.0)
        {
            _2775 = abs((1.0 - _2002) / _2011);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_2011 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_2002 + 1.0) / _2011);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2775 = frontier_phi_50_47_ladder;
        }
        float _2777 = isnan(_2437) ? _2120 : (isnan(_2120) ? _2437 : min(_2120, _2437));
        float _2778 = isnan(_2775) ? _2777 : (isnan(_2777) ? _2775 : min(_2777, _2775));
        float _2782 = (_2778 * _2005) + _1994;
        float _2783 = (_2778 * _2008) + _1998;
        float _2784 = (_2778 * _2011) + _2002;
        float _2785 = _2778 * 9.9999997473787516355514526367188e-05;
        float _2786 = (-1.0) - _2785;
        float _2788 = _2785 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2784 > _2788) || ((_2784 < _2786) || ((_2783 > _2788) || ((_2783 < _2786) || ((_2782 < _2786) || (_2782 > _2788))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2906 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2784, cbModelParam._m0[17u].z, fma(_2783, cbModelParam._m0[17u].y, _2782 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2784, cbModelParam._m0[18u].z, fma(_2783, cbModelParam._m0[18u].y, _2782 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2784, cbModelParam._m0[19u].z, fma(_2783, cbModelParam._m0[19u].y, _2782 * cbModelParam._m0[19u].x))), _1939);
            frontier_phi_25_50_ladder = _2906.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2906.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2906.x * cbModelParam._m0[1u].z;
        }
        _2030 = frontier_phi_25_50_ladder_2;
        _2032 = frontier_phi_25_50_ladder_1;
        _2034 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _2014 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1006, _1007, _1008), _1939);
        _2030 = _2014.x * cbModelParam._m0[1u].z;
        _2032 = _2014.y * cbModelParam._m0[1u].z;
        _2034 = _2014.z * cbModelParam._m0[1u].z;
    }
    float _2047 = (((_1033 * _983) + _1034) * _998) * ((cbModelParam._m0[1u].w * (_2030 - _1930)) + _1930);
    float _2049 = (((_1033 * _985) + _1034) * _998) * ((cbModelParam._m0[1u].w * (_2032 - _1932)) + _1932);
    float _2051 = (((_1033 * _986) + _1034) * _998) * ((cbModelParam._m0[1u].w * (_2034 - _1934)) + _1934);
    float _2054 = fma(_2051, cbSceneParam._m0[89u].z, fma(_2049, cbSceneParam._m0[89u].y, _2047 * cbSceneParam._m0[89u].x));
    float _2057 = fma(_2051, cbSceneParam._m0[90u].z, fma(_2049, cbSceneParam._m0[90u].y, _2047 * cbSceneParam._m0[90u].x));
    float _2060 = fma(_2051, cbSceneParam._m0[91u].z, fma(_2049, cbSceneParam._m0[91u].y, _2047 * cbSceneParam._m0[91u].x));
    float _2094 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2098 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2102 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2106 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2107 = _2094 / _2106;
    float _2108 = _2098 / _2106;
    float _2109 = _2102 / _2106;
    float _2256;
    float _2257;
    float _2258;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2136 = ((uint(_2109 > cbSceneParam._m0[59u].y) + uint(_2109 > cbSceneParam._m0[59u].x)) + uint(_2109 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2137 = _2136 + 43u;
        uint _2145 = _2136 + 44u;
        uint _2153 = _2136 + 45u;
        uint _2161 = _2136 + 46u;
        float _2172 = fma(_2106, cbSceneParam._m0[_2137].w, fma(_2102, cbSceneParam._m0[_2137].z, fma(_2098, cbSceneParam._m0[_2137].y, _2094 * cbSceneParam._m0[_2137].x)));
        float _2176 = fma(_2106, cbSceneParam._m0[_2145].w, fma(_2102, cbSceneParam._m0[_2145].z, fma(_2098, cbSceneParam._m0[_2145].y, _2094 * cbSceneParam._m0[_2145].x)));
        float _2184 = fma(_2106, cbSceneParam._m0[_2161].w, fma(_2102, cbSceneParam._m0[_2161].z, fma(_2098, cbSceneParam._m0[_2161].y, _2094 * cbSceneParam._m0[_2161].x)));
        float _2189 = cbSceneParam._m0[33u].z * _2184;
        float _2191 = cbSceneParam._m0[33u].w * _2184;
        float _2194 = fma(_2106, cbSceneParam._m0[_2153].w, fma(_2102, cbSceneParam._m0[_2153].z, fma(_2098, cbSceneParam._m0[_2153].y, _2094 * cbSceneParam._m0[_2153].x))) / _2184;
        float _2242 = (cbSceneParam._m0[33u].x - sqrt(((_2108 * _2108) + (_2107 * _2107)) + (_2109 * _2109))) * cbSceneParam._m0[33u].y;
        float _4613 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
        float _2249 = (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2189 + _2172) / _2184, (_2191 + _2176) / _2184), _2194), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2191 + _2172) / _2184, (_2176 - _2189) / _2184), _2194), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2172 - _2189) / _2184, (_2176 - _2191) / _2184), _2194), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2172 - _2191) / _2184, (_2189 + _2176) / _2184), _2194), 0.0)).x), vec4(0.25)));
        _2256 = 1.0 - (_2249 * cbSceneParam._m0[34u].x);
        _2257 = 1.0 - (_2249 * cbSceneParam._m0[34u].y);
        _2258 = 1.0 - (_2249 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2256 = 1.0;
        _2257 = 1.0;
        _2258 = 1.0;
    }
    float _2322;
    float _2324;
    float _2326;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2310 = fma(_2106, cbSceneParam._m0[63u].w, fma(_2102, cbSceneParam._m0[63u].z, fma(_2098, cbSceneParam._m0[63u].y, _2094 * cbSceneParam._m0[63u].x)));
        float _2311 = fma(_2106, cbSceneParam._m0[60u].w, fma(_2102, cbSceneParam._m0[60u].z, fma(_2098, cbSceneParam._m0[60u].y, _2094 * cbSceneParam._m0[60u].x))) / _2310;
        float _2312 = fma(_2106, cbSceneParam._m0[61u].w, fma(_2102, cbSceneParam._m0[61u].z, fma(_2098, cbSceneParam._m0[61u].y, _2094 * cbSceneParam._m0[61u].x))) / _2310;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2311 >= cbSceneParam._m0[64u].x) && (_2312 >= cbSceneParam._m0[64u].y)) && (_2311 <= cbSceneParam._m0[64u].z)) && (_2312 <= cbSceneParam._m0[64u].w))
        {
            float _2450 = fma(_2106, cbSceneParam._m0[62u].w, fma(_2102, cbSceneParam._m0[62u].z, fma(_2098, cbSceneParam._m0[62u].y, _2094 * cbSceneParam._m0[62u].x))) / _2310;
            float _2454 = isnan(cbSceneParam._m0[41u].w) ? _2450 : (isnan(_2450) ? cbSceneParam._m0[41u].w : max(_2450, cbSceneParam._m0[41u].w));
            float _2497 = (cbSceneParam._m0[33u].x - sqrt(((_2108 * _2108) + (_2107 * _2107)) + (_2109 * _2109))) * cbSceneParam._m0[33u].y;
            float _4629 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
            float _2504 = (isnan(1.0) ? _4629 : (isnan(_4629) ? 1.0 : min(_4629, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2311, cbSceneParam._m0[33u].w + _2312), _2454), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2311, _2312 - cbSceneParam._m0[33u].z), _2454), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2311 - cbSceneParam._m0[33u].z, _2312 - cbSceneParam._m0[33u].w), _2454), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2311 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2312), _2454), 0.0)).x), vec4(0.25)));
            float _2508 = 1.0 - (_2504 * cbSceneParam._m0[34u].x);
            float _2509 = 1.0 - (_2504 * cbSceneParam._m0[34u].y);
            float _2510 = 1.0 - (_2504 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2510) ? _2258 : (isnan(_2258) ? _2510 : min(_2258, _2510));
            frontier_phi_37_36_ladder_1 = isnan(_2509) ? _2257 : (isnan(_2257) ? _2509 : min(_2257, _2509));
            frontier_phi_37_36_ladder_2 = isnan(_2508) ? _2256 : (isnan(_2256) ? _2508 : min(_2256, _2508));
        }
        else
        {
            frontier_phi_37_36_ladder = _2258;
            frontier_phi_37_36_ladder_1 = _2257;
            frontier_phi_37_36_ladder_2 = _2256;
        }
        _2322 = frontier_phi_37_36_ladder_2;
        _2324 = frontier_phi_37_36_ladder_1;
        _2326 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2322 = _2256;
        _2324 = _2257;
        _2326 = _2258;
    }
    uvec4 _2331 = floatBitsToUint(cbInstanceData._m0[_958 + 5u]);
    uint _2333 = _2331.x * 14u;
    uint _2334 = _2333 + 13u;
    float _2341 = _998 + (-1.0);
    float _2346 = (cbLight._m0[_2334].x * _2341) + 1.0;
    float _2347 = (cbLight._m0[_2334].y * _2341) + 1.0;
    float _2348 = (cbLight._m0[_2334].z * _2341) + 1.0;
    float _2349 = (cbLight._m0[_2334].w * _2341) + 1.0;
    uint _2350 = _2333 + 5u;
    float _2356 = isnan(1.0) ? _2347 : (isnan(_2347) ? 1.0 : min(_2347, 1.0));
    uint _2360 = _2333 + 4u;
    float _2369 = isnan(1.0) ? _2346 : (isnan(_2346) ? 1.0 : min(_2346, 1.0));
    uint _2373 = _2333 | 1u;
    float _2384 = dot(vec3(cbLight._m0[_2333].xyz), vec3(_820, _821, _822));
    float _2387 = dot(vec3(cbLight._m0[_2373].xyz), vec3(_820, _821, _822));
    float _4665 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
    float _4676 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
    float _2392 = (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0))) * 0.3183098733425140380859375;
    float _2394 = (isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0))) * 0.3183098733425140380859375;
    float _2401 = ((cbLight._m0[_2350].x * _2356) * _2394) + (((cbLight._m0[_2360].x * _2322) * _2369) * _2392);
    float _2402 = ((_2356 * cbLight._m0[_2350].y) * _2394) + (((cbLight._m0[_2360].y * _2324) * _2369) * _2392);
    float _2403 = ((_2356 * cbLight._m0[_2350].z) * _2394) + (((cbLight._m0[_2360].z * _2326) * _2369) * _2392);
    uvec4 _2407 = floatBitsToUint(cbLight._m0[_2333 + 12u]);
    bool _2409 = _2407.x == 0u;
    float _2511;
    float _2513;
    float _2515;
    if (_2409)
    {
        _2511 = _2401;
        _2513 = _2402;
        _2515 = _2403;
    }
    else
    {
        uint _2519 = _2333 + 6u;
        float _2535 = (dot(vec3(cbLight._m0[_2333 + 2u].xyz), vec3(_820, _821, _822)) * 0.5) + 0.5;
        float _2536 = _2535 * _2535;
        float _4687 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
        float _2537 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
        float _2538 = isnan(1.0) ? _2348 : (isnan(_2348) ? 1.0 : min(_2348, 1.0));
        _2511 = (((cbLight._m0[_2519].x * 0.3183098733425140380859375) * _2537) * _2538) + _2401;
        _2513 = (((cbLight._m0[_2519].y * 0.3183098733425140380859375) * _2537) * _2538) + _2402;
        _2515 = (((cbLight._m0[_2519].z * 0.3183098733425140380859375) * _2537) * _2538) + _2403;
    }
    bool _2518 = _2407.y == 0u;
    float _2573;
    float _2575;
    float _2577;
    if (_2518)
    {
        _2573 = _2511;
        _2575 = _2513;
        _2577 = _2515;
    }
    else
    {
        uint _2746 = _2333 + 7u;
        float _2762 = (dot(vec3(cbLight._m0[_2333 + 3u].xyz), vec3(_820, _821, _822)) * 0.5) + 0.5;
        float _2763 = _2762 * _2762;
        float _4703 = isnan(0.0) ? _2763 : (isnan(_2763) ? 0.0 : max(_2763, 0.0));
        float _2764 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
        float _2765 = isnan(1.0) ? _2349 : (isnan(_2349) ? 1.0 : min(_2349, 1.0));
        _2573 = (((cbLight._m0[_2746].x * 0.3183098733425140380859375) * _2764) * _2765) + _2511;
        _2575 = (((cbLight._m0[_2746].y * 0.3183098733425140380859375) * _2764) * _2765) + _2513;
        _2577 = (((cbLight._m0[_2746].z * 0.3183098733425140380859375) * _2764) * _2765) + _2515;
    }
    uint _2580 = _2333 + 8u;
    float _2593 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2333].w)) * _823) * 0.949999988079071044921875);
    float _2594 = _2593 * _2593;
    float _2595 = cbLight._m0[_2333].x + _900;
    float _2596 = cbLight._m0[_2333].y + _901;
    float _2597 = cbLight._m0[_2333].z + _902;
    float _2601 = inversesqrt(dot(vec3(_2595, _2596, _2597), vec3(_2595, _2596, _2597)));
    float _2602 = _2601 * _2595;
    float _2603 = _2601 * _2596;
    float _2604 = _2601 * _2597;
    float _2605 = dot(vec3(_820, _821, _822), vec3(cbLight._m0[_2333].xyz));
    float _4719 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
    float _2608 = isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0));
    float _4730 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
    float _2609 = isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0));
    float _2610 = dot(vec3(_820, _821, _822), vec3(_2602, _2603, _2604));
    float _4741 = isnan(0.0) ? _2610 : (isnan(_2610) ? 0.0 : max(_2610, 0.0));
    float _2613 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
    float _2614 = dot(vec3(cbLight._m0[_2333].xyz), vec3(_2602, _2603, _2604));
    float _4752 = isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0));
    float _2618 = _2594 * _2594;
    float _2622 = ((_2613 * _2613) * (_2618 + (-1.0))) + 1.0;
    float _2630 = exp2(log2(1.0 - (isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0)))) * 5.0);
    float _2631 = 0.959999978542327880859375 - _980;
    float _2633 = 0.959999978542327880859375 - _981;
    float _2634 = 0.959999978542327880859375 - _982;
    float _2641 = 1.0 - _2594;
    float _2652 = (0.5 / (((_2609 * ((_2608 * _2641) + _2594)) + 9.9999999392252902907785028219223e-09) + (((_2609 * _2641) + _2594) * _2608))) * _2608;
    float _4763 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
    float _2654 = (isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0))) * (_2618 / ((_2622 * _2622) * 3.141590118408203125));
    uint _2668 = _2333 + 9u;
    float _2679 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2373].w)) * _823) * 0.949999988079071044921875);
    float _2680 = _2679 * _2679;
    float _2681 = cbLight._m0[_2373].x + _900;
    float _2682 = cbLight._m0[_2373].y + _901;
    float _2683 = cbLight._m0[_2373].z + _902;
    float _2687 = inversesqrt(dot(vec3(_2681, _2682, _2683), vec3(_2681, _2682, _2683)));
    float _2688 = _2687 * _2681;
    float _2689 = _2687 * _2682;
    float _2690 = _2687 * _2683;
    float _2691 = dot(vec3(_820, _821, _822), vec3(cbLight._m0[_2373].xyz));
    float _4774 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
    float _2694 = isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0));
    float _2695 = dot(vec3(_820, _821, _822), vec3(_2688, _2689, _2690));
    float _4785 = isnan(0.0) ? _2695 : (isnan(_2695) ? 0.0 : max(_2695, 0.0));
    float _2698 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
    float _2699 = dot(vec3(cbLight._m0[_2373].xyz), vec3(_2688, _2689, _2690));
    float _4796 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
    float _2703 = _2680 * _2680;
    float _2707 = ((_2698 * _2698) * (_2703 + (-1.0))) + 1.0;
    float _2714 = exp2(log2(1.0 - (isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0)))) * 5.0);
    float _2721 = 1.0 - _2680;
    float _2731 = (0.5 / (((_2609 * ((_2694 * _2721) + _2680)) + 9.9999999392252902907785028219223e-09) + (((_2609 * _2721) + _2680) * _2694))) * _2694;
    float _4807 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
    float _2733 = (isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0))) * (_2703 / ((_2707 * _2707) * 3.141590118408203125));
    float _2743 = (((((_2714 * _2631) + _983) * cbLight._m0[_2668].x) * _2733) * _2356) + ((((cbLight._m0[_2580].x * _2322) * ((_2630 * _2631) + _983)) * _2654) * _2369);
    float _2744 = (((((_2714 * _2633) + _985) * cbLight._m0[_2668].y) * _2733) * _2356) + ((((cbLight._m0[_2580].y * _2324) * ((_2630 * _2633) + _985)) * _2654) * _2369);
    float _2745 = (((((_2714 * _2634) + _986) * cbLight._m0[_2668].z) * _2733) * _2356) + ((((cbLight._m0[_2580].z * _2326) * ((_2630 * _2634) + _986)) * _2654) * _2369);
    float _2801;
    float _2803;
    float _2805;
    if (_2409)
    {
        _2801 = _2743;
        _2803 = _2744;
        _2805 = _2745;
    }
    else
    {
        uint _2807 = _2333 + 2u;
        uint _2811 = _2333 + 10u;
        float _2825 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2807].w)) * _823) * 0.949999988079071044921875);
        float _2826 = _2825 * _2825;
        float _2827 = cbLight._m0[_2807].x + _900;
        float _2828 = cbLight._m0[_2807].y + _901;
        float _2829 = cbLight._m0[_2807].z + _902;
        float _2833 = inversesqrt(dot(vec3(_2827, _2828, _2829), vec3(_2827, _2828, _2829)));
        float _2834 = _2833 * _2827;
        float _2835 = _2833 * _2828;
        float _2836 = _2833 * _2829;
        float _2837 = dot(vec3(_820, _821, _822), vec3(cbLight._m0[_2807].xyz));
        float _4818 = isnan(0.0) ? _2837 : (isnan(_2837) ? 0.0 : max(_2837, 0.0));
        float _2840 = isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0));
        float _2841 = dot(vec3(_820, _821, _822), vec3(_2834, _2835, _2836));
        float _4829 = isnan(0.0) ? _2841 : (isnan(_2841) ? 0.0 : max(_2841, 0.0));
        float _2844 = isnan(1.0) ? _4829 : (isnan(_4829) ? 1.0 : min(_4829, 1.0));
        float _2845 = dot(vec3(cbLight._m0[_2807].xyz), vec3(_2834, _2835, _2836));
        float _4840 = isnan(0.0) ? _2845 : (isnan(_2845) ? 0.0 : max(_2845, 0.0));
        float _2849 = _2826 * _2826;
        float _2853 = ((_2844 * _2844) * (_2849 + (-1.0))) + 1.0;
        float _2860 = exp2(log2(1.0 - (isnan(1.0) ? _4840 : (isnan(_4840) ? 1.0 : min(_4840, 1.0)))) * 5.0);
        float _2867 = 1.0 - _2826;
        float _2877 = (0.5 / (((_2609 * ((_2840 * _2867) + _2826)) + 9.9999999392252902907785028219223e-09) + (((_2609 * _2867) + _2826) * _2840))) * _2840;
        float _4851 = isnan(0.0) ? _2877 : (isnan(_2877) ? 0.0 : max(_2877, 0.0));
        float _2879 = (isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0))) * (_2849 / ((_2853 * _2853) * 3.141590118408203125));
        float _2880 = isnan(1.0) ? _2348 : (isnan(_2348) ? 1.0 : min(_2348, 1.0));
        _2801 = (((((_2860 * _2631) + _983) * cbLight._m0[_2811].x) * _2879) * _2880) + _2743;
        _2803 = (((((_2860 * _2633) + _985) * cbLight._m0[_2811].y) * _2879) * _2880) + _2744;
        _2805 = (((((_2860 * _2634) + _986) * cbLight._m0[_2811].z) * _2879) * _2880) + _2745;
    }
    float _2911;
    float _2913;
    float _2915;
    if (_2518)
    {
        _2911 = _2801;
        _2913 = _2803;
        _2915 = _2805;
    }
    else
    {
        uint _2922 = _2333 + 3u;
        uint _2926 = _2333 + 11u;
        float _2940 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2922].w)) * _823) * 0.949999988079071044921875);
        float _2941 = _2940 * _2940;
        float _2942 = cbLight._m0[_2922].x + _900;
        float _2943 = cbLight._m0[_2922].y + _901;
        float _2944 = cbLight._m0[_2922].z + _902;
        float _2948 = inversesqrt(dot(vec3(_2942, _2943, _2944), vec3(_2942, _2943, _2944)));
        float _2949 = _2948 * _2942;
        float _2950 = _2948 * _2943;
        float _2951 = _2948 * _2944;
        float _2952 = dot(vec3(_820, _821, _822), vec3(cbLight._m0[_2922].xyz));
        float _4867 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0));
        float _2955 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
        float _2956 = dot(vec3(_820, _821, _822), vec3(_2949, _2950, _2951));
        float _4878 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
        float _2959 = isnan(1.0) ? _4878 : (isnan(_4878) ? 1.0 : min(_4878, 1.0));
        float _2960 = dot(vec3(cbLight._m0[_2922].xyz), vec3(_2949, _2950, _2951));
        float _4889 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
        float _2964 = _2941 * _2941;
        float _2968 = ((_2959 * _2959) * (_2964 + (-1.0))) + 1.0;
        float _2975 = exp2(log2(1.0 - (isnan(1.0) ? _4889 : (isnan(_4889) ? 1.0 : min(_4889, 1.0)))) * 5.0);
        float _2982 = 1.0 - _2941;
        float _2992 = (0.5 / (((_2609 * ((_2955 * _2982) + _2941)) + 9.9999999392252902907785028219223e-09) + (((_2609 * _2982) + _2941) * _2955))) * _2955;
        float _4900 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
        float _2994 = (isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0))) * (_2964 / ((_2968 * _2968) * 3.141590118408203125));
        float _2995 = isnan(1.0) ? _2349 : (isnan(_2349) ? 1.0 : min(_2349, 1.0));
        _2911 = (((((_2975 * _2631) + _983) * cbLight._m0[_2926].x) * _2994) * _2995) + _2801;
        _2913 = (((((_2975 * _2633) + _985) * cbLight._m0[_2926].y) * _2994) * _2995) + _2803;
        _2915 = (((((_2975 * _2634) + _986) * cbLight._m0[_2926].z) * _2994) * _2995) + _2805;
    }
    float _3061;
    float _3063;
    float _3065;
    float _3067;
    float _3069;
    float _3071;
    if (_2331.y == 0u)
    {
        uvec4 _3016 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3017 = _3016.x;
        uint _3028 = uint((float(_3016.y) * floor(float(uint(cbSceneParam._m0[85u].y * _921) / _3017))) + floor(float(uint(cbSceneParam._m0[85u].x * _920) / _3017)));
        float _3038 = (log2(_2109 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3039 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
        uint _3042 = uint(isnan(14.0) ? _3039 : (isnan(_3039) ? 14.0 : min(_3039, 14.0)));
        uvec4 _3047 = texelFetch(g_lightClusterGridBuffer, int(((_3042 << 2u) + (_3028 << 6u)) >> 2u));
        uint _3048 = _3047.x;
        uint _3049 = _3016.z;
        float _3128;
        float _3130;
        float _3132;
        float _3134;
        float _3136;
        float _3138;
        if (((((1u << ((_3049 >> 4u) & 15u)) + 4294967295u) & _3048) == 0u) || ((_3049 & 240u) == 0u))
        {
            _3128 = 0.0;
            _3130 = 0.0;
            _3132 = 0.0;
            _3134 = 0.0;
            _3136 = 0.0;
            _3138 = 0.0;
        }
        else
        {
            float _3129;
            float _3131;
            float _3133;
            float _3135;
            float _3137;
            float _3139;
            float _3281 = 0.0;
            float _3282 = 0.0;
            float _3283 = 0.0;
            float _3284 = 0.0;
            float _3285 = 0.0;
            float _3286 = 0.0;
            uint _3287 = 0u;
            uint _3296;
            bool _3297;
            for (;;)
            {
                _3296 = texelFetch(g_lightClassification, int((((_3042 << 5u) + (_3028 << 9u)) + (_3287 << 2u)) >> 2u)).x;
                _3297 = _3296 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3297)
                {
                    frontier_phi_71_pred = _3286;
                    frontier_phi_71_pred_1 = _3285;
                    frontier_phi_71_pred_2 = _3284;
                    frontier_phi_71_pred_3 = _3283;
                    frontier_phi_71_pred_4 = _3282;
                    frontier_phi_71_pred_5 = _3281;
                }
                else
                {
                    float _3426;
                    float _3427;
                    float _3428;
                    float _3429;
                    float _3430;
                    float _3431;
                    uint _3432;
                    _3426 = _3281;
                    _3427 = _3282;
                    _3428 = _3283;
                    _3429 = _3284;
                    _3430 = _3285;
                    _3431 = _3286;
                    _3432 = _3296;
                    float _3353;
                    float _3354;
                    float _3355;
                    float _3356;
                    float _3357;
                    float _3358;
                    for (;;)
                    {
                        uint _3436 = uint(findLSB(_3432)) + (_3287 << 5u);
                        uint _3433 = (_3432 + 4294967295u) & _3432;
                        uint _3438 = _3436 * 48u;
                        vec4 _3452 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3438)).x, texelFetch(g_PointLightRenderingBuffer, int(_3438 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3438 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3438 + 3u)).x));
                        uint _3458 = (_3436 * 48u) + 4u;
                        vec4 _3471 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3458)).x, texelFetch(g_PointLightRenderingBuffer, int(_3458 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3458 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3458 + 3u)).x));
                        uint _3477 = (_3436 * 48u) + 8u;
                        vec3 _3488 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3477)).x, texelFetch(g_PointLightRenderingBuffer, int(_3477 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3477 + 2u)).x));
                        float _3492 = _3452.x - _2107;
                        float _3493 = _3452.y - _2108;
                        float _3494 = _3452.z - _2109;
                        float _3495 = dot(vec3(_3492, _3493, _3494), vec3(_3492, _3493, _3494));
                        float _3498 = inversesqrt(_3495);
                        float _3499 = _3498 * _3492;
                        float _3500 = _3498 * _3493;
                        float _3501 = _3498 * _3494;
                        float _3502 = dot(vec3(_939, _942, _945), vec3(_3499, _3500, _3501));
                        float _3507 = 1.0 - (_3495 * _3452.w);
                        float _4926 = isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0));
                        float _3508 = isnan(1.0) ? _4926 : (isnan(_4926) ? 1.0 : min(_4926, 1.0));
                        float _3509 = sqrt(_3495) * _3471.w;
                        float _3512 = 1.39999997615814208984375 / (_3509 + 1.39999997615814208984375);
                        float _3513 = _3512 * _3512;
                        float _3516 = ((1.0 - _3513) * _3502) + _3513;
                        float _3519 = _3509 * _3509;
                        float _3523 = ((isnan(0.0) ? _3516 : (isnan(_3516) ? 0.0 : max(_3516, 0.0))) * _3508) / ((_3519 * 0.699999988079071044921875) + 1.0);
                        float _3527 = (-0.0) - _2107;
                        float _3528 = (-0.0) - _2108;
                        float _3529 = (-0.0) - _2109;
                        float _3533 = inversesqrt(dot(vec3(_3527, _3528, _3529), vec3(_3527, _3528, _3529)));
                        float _3534 = _3533 * _3527;
                        float _3535 = _3533 * _3528;
                        float _3536 = _3533 * _3529;
                        float _3543 = exp2(log2(1.0 / ((_3519 * 3.5) + 5.0)) * 0.25);
                        float _3544 = 1.0 - _1014;
                        float _3551 = sqrt(1.0 - ((1.0 - (_3544 * _3544)) * (1.0 - (_3543 * _3543))));
                        float _3552 = _3551 * _3551;
                        float _3553 = _3552 * _3552;
                        float _3554 = _3534 + _3499;
                        float _3555 = _3535 + _3500;
                        float _3556 = _3536 + _3501;
                        float _3560 = inversesqrt(dot(vec3(_3554, _3555, _3556), vec3(_3554, _3555, _3556)));
                        float _3564 = dot(vec3(_939, _942, _945), vec3(_3534, _3535, _3536));
                        float _4942 = isnan(0.0) ? _3564 : (isnan(_3564) ? 0.0 : max(_3564, 0.0));
                        float _3567 = isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0));
                        float _3568 = dot(vec3(_939, _942, _945), vec3(_3560 * _3554, _3560 * _3555, _3560 * _3556));
                        float _4953 = isnan(0.0) ? _3568 : (isnan(_3568) ? 0.0 : max(_3568, 0.0));
                        float _3571 = isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0));
                        float _3575 = ((_3571 * _3571) * (_3553 + (-1.0))) + 1.0;
                        float _3576 = _3512 * _3552;
                        float _3577 = _3576 * _3576;
                        float _3580 = ((1.0 - _3577) * _3502) + _3577;
                        float _4964 = isnan(0.0) ? _3580 : (isnan(_3580) ? 0.0 : max(_3580, 0.0));
                        float _3581 = isnan(1.0) ? _4964 : (isnan(_4964) ? 1.0 : min(_4964, 1.0));
                        float _3582 = 1.0 - _3552;
                        float _3592 = (0.5 / (((_3581 * ((_3567 * _3582) + _3552)) + 9.9999999392252902907785028219223e-09) + (((_3581 * _3582) + _3552) * _3567))) * _3581;
                        float _4975 = isnan(0.0) ? _3592 : (isnan(_3592) ? 0.0 : max(_3592, 0.0));
                        float _3603 = (((_3553 * 3.1415927410125732421875) * (isnan(1.0) ? _4975 : (isnan(_4975) ? 1.0 : min(_4975, 1.0)))) / ((_3575 * _3575) * ((_3519 * 2.1991131305694580078125) + 3.141590118408203125))) * _3508;
                        _3356 = (_3523 * _3471.x) + _3429;
                        _3357 = (_3523 * _3471.y) + _3430;
                        _3358 = (_3523 * _3471.z) + _3431;
                        _3353 = (_3603 * _3488.x) + _3426;
                        _3354 = (_3603 * _3488.y) + _3427;
                        _3355 = (_3603 * _3488.z) + _3428;
                        if (_3433 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3426 = _3353;
                            _3427 = _3354;
                            _3428 = _3355;
                            _3429 = _3356;
                            _3430 = _3357;
                            _3431 = _3358;
                            _3432 = _3433;
                        }
                    }
                    frontier_phi_71_pred = _3358;
                    frontier_phi_71_pred_1 = _3357;
                    frontier_phi_71_pred_2 = _3356;
                    frontier_phi_71_pred_3 = _3355;
                    frontier_phi_71_pred_4 = _3354;
                    frontier_phi_71_pred_5 = _3353;
                }
                _3139 = frontier_phi_71_pred;
                _3137 = frontier_phi_71_pred_1;
                _3135 = frontier_phi_71_pred_2;
                _3133 = frontier_phi_71_pred_3;
                _3131 = frontier_phi_71_pred_4;
                _3129 = frontier_phi_71_pred_5;
                uint _3288 = _3287 + 1u;
                if (_3288 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3281 = _3129;
                    _3282 = _3131;
                    _3283 = _3133;
                    _3284 = _3135;
                    _3285 = _3137;
                    _3286 = _3139;
                    _3287 = _3288;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3128 = _3129;
            _3130 = _3131;
            _3132 = _3133;
            _3134 = _3135;
            _3136 = _3137;
            _3138 = _3139;
        }
        uvec4 _3142 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3143 = _3142.z;
        uint _3145 = (_3143 >> 8u) & 15u;
        float _3249;
        float _3251;
        float _3253;
        float _3255;
        float _3257;
        float _3259;
        if (((4294967295u << _3145) & _3048) == 0u)
        {
            _3249 = _3128;
            _3251 = _3130;
            _3253 = _3132;
            _3255 = _3134;
            _3257 = _3136;
            _3259 = _3138;
        }
        else
        {
            float _3274 = inversesqrt(dot(vec3(_2107, _2108, _2109), vec3(_2107, _2108, _2109)));
            float _3275 = _3274 * _2107;
            float _3276 = _3274 * _2108;
            float _3277 = _3274 * _2109;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3145 < ((_3143 >> 12u) & 15u))
            {
                float _3250;
                float _3252;
                float _3254;
                float _3256;
                float _3258;
                float _3260;
                float _3409 = _3128;
                float _3410 = _3130;
                float _3411 = _3132;
                float _3412 = _3134;
                float _3413 = _3136;
                float _3414 = _3138;
                uint _3415 = _3145;
                uint _3424;
                bool _3425;
                for (;;)
                {
                    _3424 = texelFetch(g_lightClassification, int((((_3042 << 5u) + (_3028 << 9u)) + (_3415 << 2u)) >> 2u)).x;
                    _3425 = _3424 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3425)
                    {
                        frontier_phi_82_pred = _3414;
                        frontier_phi_82_pred_1 = _3413;
                        frontier_phi_82_pred_2 = _3412;
                        frontier_phi_82_pred_3 = _3411;
                        frontier_phi_82_pred_4 = _3410;
                        frontier_phi_82_pred_5 = _3409;
                    }
                    else
                    {
                        float _3617;
                        float _3618;
                        float _3619;
                        float _3620;
                        float _3621;
                        float _3622;
                        float _3911;
                        float _3912;
                        float _3913;
                        float _3914;
                        float _3915;
                        float _3916;
                        float _3630 = _3409;
                        float _3631 = _3410;
                        float _3632 = _3411;
                        float _3633 = _3412;
                        float _3634 = _3413;
                        float _3635 = _3414;
                        uint _3636 = _3424;
                        uint _3637;
                        vec4 _3662;
                        float _3663;
                        vec4 _3678;
                        vec3 _3690;
                        vec4 _3705;
                        vec4 _3720;
                        float _3767;
                        bool _3768;
                        for (;;)
                        {
                            uint _3647 = ((_3415 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3636));
                            _3637 = (_3636 + 4294967295u) & _3636;
                            uint _3649 = _3647 * 40u;
                            _3662 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3649)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3649 + 3u)).x));
                            _3663 = _3662.w;
                            uint _3665 = (_3647 * 40u) + 4u;
                            _3678 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3665)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3665 + 3u)).x));
                            uint _3680 = (_3647 * 40u) + 8u;
                            _3690 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3680)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3680 + 2u)).x));
                            uint _3692 = (_3647 * 40u) + 16u;
                            _3705 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3692)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3692 + 3u)).x));
                            uint _3707 = (_3647 * 40u) + 20u;
                            _3720 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3707)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3707 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3707 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3707 + 3u)).x));
                            uint _3723 = (_3647 * 40u) + 24u;
                            vec4 _3736 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3723)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3723 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3723 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3723 + 3u)).x));
                            uint _3742 = (_3647 * 40u) + 28u;
                            vec4 _3755 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3742)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3742 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3742 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3742 + 3u)).x));
                            _3767 = fma(_2109, _3755.z, fma(_2108, _3755.y, _3755.x * _2107)) + _3755.w;
                            _3768 = !((fma(_2109, _3736.z, fma(_2108, _3736.y, _3736.x * _2107)) + _3736.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3768)
                            {
                                float _3795 = _3662.x - _2107;
                                float _3796 = _3662.y - _2108;
                                float _3797 = _3662.z - _2109;
                                float _3798 = dot(vec3(_3795, _3796, _3797), vec3(_3795, _3796, _3797));
                                float _3801 = inversesqrt(_3798);
                                float _3802 = _3801 * _3795;
                                float _3803 = _3801 * _3796;
                                float _3804 = _3801 * _3797;
                                float _3808 = 1.0 - (_3798 / (_3663 * _3663));
                                float _4986 = isnan(0.0) ? _3808 : (isnan(_3808) ? 0.0 : max(_3808, 0.0));
                                float _3809 = isnan(1.0) ? _4986 : (isnan(_4986) ? 1.0 : min(_4986, 1.0));
                                float _3813 = sqrt(_3798) * _3678.w;
                                float _3815 = 1.39999997615814208984375 / (_3813 + 1.39999997615814208984375);
                                float _3816 = _3815 * _3815;
                                float _3819 = ((1.0 - _3816) * dot(vec3(_3802, _3803, _3804), vec3(_939, _942, _945))) + _3816;
                                float _3822 = _3813 * _3813;
                                float _3826 = (fma(_2109, _3705.z, fma(_2108, _3705.y, _3705.x * _2107)) + _3705.w) / _3767;
                                float _3827 = (fma(_2109, _3720.z, fma(_2108, _3720.y, _3720.x * _2107)) + _3720.w) / _3767;
                                float _3831 = 1.0 - dot(vec2(_3826, _3827), vec2(_3826, _3827));
                                float _5002 = isnan(0.0) ? _3831 : (isnan(_3831) ? 0.0 : max(_3831, 0.0));
                                float _3832 = isnan(1.0) ? _5002 : (isnan(_5002) ? 1.0 : min(_5002, 1.0));
                                float _3833 = _3832 * (((isnan(0.0) ? _3819 : (isnan(_3819) ? 0.0 : max(_3819, 0.0))) * _3809) / ((_3822 * 0.699999988079071044921875) + 1.0));
                                float _3845 = exp2(log2(1.0 / ((_3822 * 3.5) + 5.0)) * 0.25);
                                float _3846 = 1.0 - _1014;
                                float _3853 = sqrt(1.0 - ((1.0 - (_3846 * _3846)) * (1.0 - (_3845 * _3845))));
                                float _3854 = _3853 * _3853;
                                float _3855 = _3854 * _3854;
                                float _3856 = _3802 - _3275;
                                float _3857 = _3803 - _3276;
                                float _3858 = _3804 - _3277;
                                float _3862 = inversesqrt(dot(vec3(_3856, _3857, _3858), vec3(_3856, _3857, _3858)));
                                float _3866 = dot(vec3(_939, _942, _945), vec3((-0.0) - _3275, (-0.0) - _3276, (-0.0) - _3277));
                                float _5013 = isnan(0.0) ? _3866 : (isnan(_3866) ? 0.0 : max(_3866, 0.0));
                                float _3869 = isnan(1.0) ? _5013 : (isnan(_5013) ? 1.0 : min(_5013, 1.0));
                                float _3870 = dot(vec3(_939, _942, _945), vec3(_3862 * _3856, _3862 * _3857, _3862 * _3858));
                                float _5024 = isnan(0.0) ? _3870 : (isnan(_3870) ? 0.0 : max(_3870, 0.0));
                                float _3873 = isnan(1.0) ? _5024 : (isnan(_5024) ? 1.0 : min(_5024, 1.0));
                                float _3877 = ((_3873 * _3873) * (_3855 + (-1.0))) + 1.0;
                                float _3878 = _3815 * _3854;
                                float _3879 = _3878 * _3878;
                                float _3885 = ((1.0 - _3879) * dot(vec3(_939, _942, _945), vec3(_3802, _3803, _3804))) + _3879;
                                float _5035 = isnan(0.0) ? _3885 : (isnan(_3885) ? 0.0 : max(_3885, 0.0));
                                float _3886 = isnan(1.0) ? _5035 : (isnan(_5035) ? 1.0 : min(_5035, 1.0));
                                float _3887 = 1.0 - _3854;
                                float _3897 = (0.5 / (((_3886 * ((_3869 * _3887) + _3854)) + 9.9999999392252902907785028219223e-09) + (((_3886 * _3887) + _3854) * _3869))) * _3886;
                                float _5046 = isnan(0.0) ? _3897 : (isnan(_3897) ? 0.0 : max(_3897, 0.0));
                                float _3907 = (_3832 * _3809) * (((_3855 * 3.1415927410125732421875) * (isnan(1.0) ? _5046 : (isnan(_5046) ? 1.0 : min(_5046, 1.0)))) / ((_3877 * _3877) * ((_3822 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3833 * _3678.z;
                                frontier_phi_88_pred_1 = _3833 * _3678.y;
                                frontier_phi_88_pred_2 = _3833 * _3678.x;
                                frontier_phi_88_pred_3 = _3907 * _3690.z;
                                frontier_phi_88_pred_4 = _3907 * _3690.y;
                                frontier_phi_88_pred_5 = _3907 * _3690.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3916 = frontier_phi_88_pred;
                            _3915 = frontier_phi_88_pred_1;
                            _3914 = frontier_phi_88_pred_2;
                            _3913 = frontier_phi_88_pred_3;
                            _3912 = frontier_phi_88_pred_4;
                            _3911 = frontier_phi_88_pred_5;
                            _3620 = _3914 + _3633;
                            _3621 = _3915 + _3634;
                            _3622 = _3916 + _3635;
                            _3617 = _3911 + _3630;
                            _3618 = _3912 + _3631;
                            _3619 = _3913 + _3632;
                            if (_3637 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3630 = _3617;
                                _3631 = _3618;
                                _3632 = _3619;
                                _3633 = _3620;
                                _3634 = _3621;
                                _3635 = _3622;
                                _3636 = _3637;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3622;
                        frontier_phi_82_pred_1 = _3621;
                        frontier_phi_82_pred_2 = _3620;
                        frontier_phi_82_pred_3 = _3619;
                        frontier_phi_82_pred_4 = _3618;
                        frontier_phi_82_pred_5 = _3617;
                    }
                    _3260 = frontier_phi_82_pred;
                    _3258 = frontier_phi_82_pred_1;
                    _3256 = frontier_phi_82_pred_2;
                    _3254 = frontier_phi_82_pred_3;
                    _3252 = frontier_phi_82_pred_4;
                    _3250 = frontier_phi_82_pred_5;
                    uint _3416 = _3415 + 1u;
                    if (_3416 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3409 = _3250;
                        _3410 = _3252;
                        _3411 = _3254;
                        _3412 = _3256;
                        _3413 = _3258;
                        _3414 = _3260;
                        _3415 = _3416;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3256;
                frontier_phi_63_64_ladder_1 = _3260;
                frontier_phi_63_64_ladder_2 = _3258;
                frontier_phi_63_64_ladder_3 = _3254;
                frontier_phi_63_64_ladder_4 = _3252;
                frontier_phi_63_64_ladder_5 = _3250;
            }
            else
            {
                frontier_phi_63_64_ladder = _3134;
                frontier_phi_63_64_ladder_1 = _3138;
                frontier_phi_63_64_ladder_2 = _3136;
                frontier_phi_63_64_ladder_3 = _3132;
                frontier_phi_63_64_ladder_4 = _3130;
                frontier_phi_63_64_ladder_5 = _3128;
            }
            _3249 = frontier_phi_63_64_ladder_5;
            _3251 = frontier_phi_63_64_ladder_4;
            _3253 = frontier_phi_63_64_ladder_3;
            _3255 = frontier_phi_63_64_ladder;
            _3257 = frontier_phi_63_64_ladder_2;
            _3259 = frontier_phi_63_64_ladder_1;
        }
        float _3264 = isnan(1.0) ? _998 : (isnan(_998) ? 1.0 : min(_998, 1.0));
        _3061 = (_3264 * _3255) + _2573;
        _3063 = (_3264 * _3257) + _2575;
        _3065 = (_3264 * _3259) + _2577;
        _3067 = ((_3249 * _983) * _3264) + _2911;
        _3069 = ((_3251 * _985) * _3264) + _2913;
        _3071 = ((_3253 * _986) * _3264) + _2915;
    }
    else
    {
        _3061 = _2573;
        _3063 = _2575;
        _3065 = _2577;
        _3067 = _2911;
        _3069 = _2913;
        _3071 = _2915;
    }
    float _5062 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _5073 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _5084 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
    float _3088 = ((isnan(1.0) ? _5062 : (isnan(_5062) ? 1.0 : min(_5062, 1.0))) * (_3061 + ((isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))) * _998))) + ((_3067 + ((isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0))) * _1839)) * cbPerFrame._m0[3u].x);
    float _3089 = ((isnan(1.0) ? _5073 : (isnan(_5073) ? 1.0 : min(_5073, 1.0))) * (_3063 + ((isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))) * _998))) + ((_3069 + ((isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0))) * _1839)) * cbPerFrame._m0[3u].x);
    float _3090 = ((isnan(1.0) ? _5084 : (isnan(_5084) ? 1.0 : min(_5084, 1.0))) * (_3065 + ((isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))) * _998))) + ((_3071 + ((isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0))) * _1839)) * cbPerFrame._m0[3u].x);
    uint _3091 = _958 + 6u;
    float _3099 = _920 / cbSceneParam._m0[86u].x;
    float _3100 = _921 / cbSceneParam._m0[86u].y;
    vec4 _3114 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3099, _3100, (log2((isnan(cbSceneParam._m0[77u].w) ? _843 : (isnan(_843) ? cbSceneParam._m0[77u].w : min(_843, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3116 = _3114.x;
    float _3117 = _3114.y;
    float _3118 = _3114.z;
    float _3119 = _3114.w;
    float _3191;
    float _3193;
    float _3195;
    float _3197;
    if (_843 > cbSceneParam._m0[78u].w)
    {
        float _3153 = isnan(_843) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _843 : min(cbSceneParam._m0[80u].w, _843));
        float _3154 = _3153 / _843;
        float _3165 = _3154 * _893;
        float _3166 = _894 * _3154;
        float _3167 = (-0.0) - _3166;
        float _3169 = _3154 * _895;
        float _3171 = (cbSceneParam._m0[77u].w * _3167) / _3153;
        float _3172 = _3171 + cbSceneParam._m0[79u].w;
        float _3173 = cbSceneParam._m0[79u].w - _3166;
        float _3179 = sqrt(((_3165 * _3165) + (_3166 * _3166)) + (_3169 * _3169));
        float _3182 = (1.0 - (cbSceneParam._m0[77u].w / _3153)) * _3179;
        float _3187 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3189 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3366;
        if (abs((_3167 - _3171) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3366 = ((((_3172 > 0.0) ? exp2(_3187 * _3172) : (2.0 - exp2(_3189 * _3172))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3182;
        }
        else
        {
            float _3310 = 1.0 / cbSceneParam._m0[80u].x;
            float _3311 = isnan(_3173) ? _3172 : (isnan(_3172) ? _3173 : max(_3172, _3173));
            float _3312 = isnan(_3173) ? _3172 : (isnan(_3172) ? _3173 : min(_3172, _3173));
            float _3321 = isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : min(_3311, 0.0));
            float _3322 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : min(_3312, 0.0));
            _3366 = ((abs(_3179 / _3167) * cbSceneParam._m0[80u].y) * ((((_3321 - _3322) * 2.0) - ((exp2(_3187 * (isnan(0.0) ? _3311 : (isnan(_3311) ? 0.0 : max(_3311, 0.0)))) - exp2(_3187 * (isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0))))) * _3310)) - ((exp2(_3189 * _3321) - exp2(_3189 * _3322)) * _3310))) + (_3182 * cbSceneParam._m0[80u].z);
        }
        vec4 _3368 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3099, _3100, 1.0), 0.0);
        float _3377 = exp2((_3366 * (-1.44269502162933349609375)) * (1.0 - _3368.w));
        float _3378 = log2(_3377);
        float _3394 = log2(_3119);
        _3191 = (exp2(_3394 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3378 * cbSceneParam._m0[78u].x)) * _3368.x) / cbSceneParam._m0[78u].x)) + _3116;
        _3193 = (exp2(_3394 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3378 * cbSceneParam._m0[78u].y)) * _3368.y) / cbSceneParam._m0[78u].y)) + _3117;
        _3195 = (exp2(_3394 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3378 * cbSceneParam._m0[78u].z)) * _3368.z) / cbSceneParam._m0[78u].z)) + _3118;
        _3197 = _3377 * _3119;
    }
    else
    {
        _3191 = _3116;
        _3193 = _3117;
        _3195 = _3118;
        _3197 = _3119;
    }
    bool _3404;
    vec4 _3207;
    vec4 _3229;
    float _3231;
    float _3235;
    float _3236;
    float _3237;
    float _3238;
    bool _3248;
    for (;;)
    {
        _3207 = cbMatDynParam._m0[0u];
        float _3209 = roundEven(_3207.y);
        bool _3210 = _3209 == 3.0;
        float _3211 = log2(_3197);
        float _3218 = exp2(_3211 * cbSceneParam._m0[78u].x) * _3088;
        float _3219 = exp2(_3211 * cbSceneParam._m0[78u].y) * _3089;
        float _3220 = exp2(_3211 * cbSceneParam._m0[78u].z) * _3090;
        float _3227 = _909 + (-0.5);
        _3229 = cbMtdParam._m0[1u];
        _3231 = _3229.y * _3227;
        float _3234 = (_3209 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3235 = _3234 * (_3210 ? _3218 : (_3218 + (cbSceneParam._m0[72u].w * _3191)));
        _3236 = _3234 * (_3210 ? _3219 : (_3219 + (cbSceneParam._m0[72u].w * _3193)));
        _3237 = _3234 * (_3210 ? _3220 : (_3220 + (cbSceneParam._m0[72u].w * _3195)));
        _3238 = _3227 * 0.999000012874603271484375;
        _3248 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3248)
        {
            if ((cbInstanceData._m0[_958 + 7u].x + _3238) < 0.5)
            {
                _3404 = true;
                break;
            }
        }
        uint _3345 = _959 + uint(_3207.w);
        if ((cbInstanceData._m0[_3345].w < 1.0) && ((cbInstanceData._m0[_3345].w + _3238) < 0.5))
        {
            _3404 = true;
            break;
        }
        if ((_3231 + 1.0) < _3229.x)
        {
            _3404 = true;
            break;
        }
        _3404 = false;
        break;
    }
    float _3608;
    if (_3404)
    {
        discard_state = true;
        _3608 = 0.0;
    }
    else
    {
        _3608 = cbInstanceData._m0[_3091].w;
    }
    SV_Target.x = _3235;
    SV_Target.y = _3236;
    SV_Target.z = _3237;
    SV_Target.w = _3608;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3091].w;
    discard_exit();
}


