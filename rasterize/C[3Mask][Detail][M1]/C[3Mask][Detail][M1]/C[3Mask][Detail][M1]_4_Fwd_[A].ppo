#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1290;
float _3673;
float _3674;
float _3675;
float _3676;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _250 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _256 = _250.x * cbMtdParam._m0[10u].x;
    float _257 = _250.y * cbMtdParam._m0[10u].y;
    float _258 = _250.z * cbMtdParam._m0[10u].z;
    vec4 _276 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _326 = cbMtdParam._m0[18u].y * texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x;
    float _337 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].x * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].y * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _326)) + 1.0;
    float _3685 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _338 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
    float _345 = (_338 * ((_276.x * cbMtdParam._m0[11u].x) - _256)) + _256;
    float _346 = (_338 * ((_276.y * cbMtdParam._m0[11u].y) - _257)) + _257;
    float _347 = (_338 * ((_276.z * cbMtdParam._m0[11u].z) - _258)) + _258;
    vec4 _365 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _392 = ((cbMtdParam._m0[17u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _326)) + 1.0;
    float _3696 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _393 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
    float _400 = (_393 * ((_365.x * cbMtdParam._m0[12u].x) - _345)) + _345;
    float _401 = (_393 * ((_365.y * cbMtdParam._m0[12u].y) - _346)) + _346;
    float _402 = (_393 * ((_365.z * cbMtdParam._m0[12u].z) - _347)) + _347;
    vec4 _419 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _444 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[18u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[18u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _326)) + 1.0;
    float _3707 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _445 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
    vec4 _473 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _481 = ((((_445 * ((_419.x * cbMtdParam._m0[13u].x) - _400)) + _400) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _473.x;
    float _484 = ((((_445 * ((_419.y * cbMtdParam._m0[13u].y) - _401)) + _401) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _473.y;
    float _487 = ((((_445 * ((_419.z * cbMtdParam._m0[13u].z) - _402)) + _402) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _473.z;
    vec4 _500 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _502 = _500.x;
    float _520 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _502) * _338) + _502;
    float _537 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _520) * _393) + _520;
    float _554 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _537) * _445) + _537;
    vec4 _567 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _569 = _567.x;
    float _570 = _567.y;
    float _573 = cbMtdParam._m0[17u].y * _567.z;
    vec4 _585 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _594 = (((cbMtdParam._m0[17u].x * _585.z) - _573) * _338) + _573;
    vec4 _607 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _619 = (((cbMtdParam._m0[16u].w * _607.z) - _594) * _393) + _594;
    vec4 _632 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _641 = (((cbMtdParam._m0[16u].z * _632.z) - _619) * _445) + _619;
    vec4 _654 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _667 = ((_585.x - _569) * _338) + _569;
    float _668 = ((_585.y - _570) * _338) + _570;
    float _673 = ((_607.x - _667) * _393) + _667;
    float _674 = ((_607.y - _668) * _393) + _668;
    float _683 = ((((_632.x - _673) * _445) + _673) * 2.0) + (-1.0);
    float _684 = ((((_632.y - _674) * _445) + _674) * 2.0) + (-1.0);
    float _685 = dot(vec2(_683, _684), vec2(_683, _684));
    float _3718 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
    float _690 = sqrt(1.0 - (isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))));
    float _693 = (((_654.x * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _683;
    float _694 = (((_654.y * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _684;
    float _697 = fma(_690, _220 * NORMAL.x, fma(_694, _227 * TANGENT.x, (_213 * _205) * _693));
    float _700 = fma(_690, _220 * NORMAL.y, fma(_694, _227 * TANGENT.y, (_213 * _206) * _693));
    float _703 = fma(_690, _220 * NORMAL.z, fma(_694, _227 * TANGENT.z, (_213 * _207) * _693));
    float _707 = inversesqrt(dot(vec3(_697, _700, _703), vec3(_697, _700, _703)));
    float _708 = _707 * _697;
    float _709 = _707 * _700;
    float _710 = _707 * _703;
    float _3729 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
    float _711 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
    float _3740 = isnan(0.0) ? _481 : (isnan(_481) ? 0.0 : max(_481, 0.0));
    float _3751 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _3762 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _3773 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _715 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
    float _731 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _771 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _781 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _771);
    float _782 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _771);
    float _783 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _771);
    float _787 = inversesqrt(dot(vec3(_781, _782, _783), vec3(_781, _782, _783)));
    float _788 = _781 * _787;
    float _789 = _782 * _787;
    float _790 = _783 * _787;
    vec4 _795 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _797 = _795.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _969 = sqrt(((_781 * _781) + (_782 * _782)) + (_783 * _783));
        float _975 = (cbMatDynParam._m0[5u].x * _969) + cbMatDynParam._m0[5u].y;
        float _3784 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
        float _980 = (cbMatDynParam._m0[5u].z * _969) + cbMatDynParam._m0[5u].w;
        float _3795 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) - _976)) + _976) < ((_797 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _808 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _809 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _827 = fma(_710, cbSceneParam._m0[5u].z, fma(_709, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _708));
    float _830 = fma(_710, cbSceneParam._m0[6u].z, fma(_709, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _708));
    float _833 = fma(_710, cbSceneParam._m0[7u].z, fma(_709, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _708));
    uint _846 = uint(roundEven(NORMAL.w)) * 13u;
    uint _847 = _846 + 9u;
    uint _848 = _847 + uint(cbMatDynParam._m0[0u].w);
    float _854 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0)))) * cbInstanceData._m0[_848].x;
    float _855 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0)))) * cbInstanceData._m0[_848].y;
    float _856 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0)))) * cbInstanceData._m0[_848].z;
    float _3806 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
    float _857 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
    float _3817 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _858 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    float _3828 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _859 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
    float _860 = 1.0 - _715;
    float _861 = _857 * _860;
    float _862 = _858 * _860;
    float _863 = _859 * _860;
    float _868 = (_857 + (-0.039999999105930328369140625)) * _715;
    float _869 = (_858 + (-0.039999999105930328369140625)) * _715;
    float _870 = (_859 + (-0.039999999105930328369140625)) * _715;
    float _871 = _868 + 0.039999999105930328369140625;
    float _873 = _869 + 0.039999999105930328369140625;
    float _874 = _870 + 0.039999999105930328369140625;
    vec4 _883 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _808, cbSceneParam._m0[86u].y * _809));
    float _886 = _883.x * TEXCOORD_5.w;
    float _887 = dot(vec3(_708, _709, _710), vec3(_788, _789, _790));
    float _890 = _887 * 2.0;
    float _894 = (_890 * _708) - _788;
    float _895 = (_890 * _709) - _789;
    float _896 = (_890 * _710) - _790;
    float _900 = abs(dot(vec3(_788, _789, _790), vec3(_708, _709, _710)));
    float _3839 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _902 = sqrt(_711);
    float _915 = exp2((_902 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_902 * 3.0));
    float _921 = (1.0 - _915) * ((_902 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _922 = _915 * _902;
    float _950 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _954 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _958 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1289;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1014 = fma(_958, cbModelParam._m0[26u].z, fma(_954, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _950));
        float _1018 = fma(_958, cbModelParam._m0[27u].z, fma(_954, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _950));
        float _1022 = fma(_958, cbModelParam._m0[28u].z, fma(_954, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _950));
        float _1047 = _950 + _708;
        float _1048 = _954 + _709;
        float _1049 = _958 + _710;
        float _1059 = fma(_1049, cbModelParam._m0[26u].z, fma(_1048, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1047)) - _1014;
        float _1060 = fma(_1049, cbModelParam._m0[27u].z, fma(_1048, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1047)) - _1018;
        float _1061 = fma(_1049, cbModelParam._m0[28u].z, fma(_1048, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1047)) - _1022;
        float _1065 = inversesqrt(dot(vec3(_1059, _1060, _1061), vec3(_1059, _1060, _1061)));
        float _1078 = ((_1065 * _1059) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1014 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1079 = ((_1065 * _1060) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1018 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1080 = ((_1065 * _1061) / cbModelParam._m0[34u].z) + ((((((_1022 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1083 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        vec4 _1097 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        vec4 _1104 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        float _1117 = exp2((_1083.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1083.x + (-0.5));
        float _1119 = _1117 * (_1083.y + (-0.5));
        float _1120 = _1117 * (_1083.z + (-0.5));
        float _1127 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1090.x + (-0.5));
        float _1129 = _1127 * (_1090.y + (-0.5));
        float _1130 = _1127 * (_1090.z + (-0.5));
        float _1137 = exp2((_1097.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1097.x + (-0.5));
        float _1139 = _1137 * (_1097.y + (-0.5));
        float _1140 = _1137 * (_1097.z + (-0.5));
        float _1147 = exp2((_1104.w + (-0.5)) * 20.0) * 2.0;
        float _1148 = _1147 * (_1104.x + (-0.5));
        float _1149 = _1147 * (_1104.y + (-0.5));
        float _1150 = _1147 * (_1104.z + (-0.5));
        float _1151 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1152 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1153 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1154 = _1118 * 0.5;
        float _1155 = _1128 * 0.5;
        float _1156 = _1138 * 0.5;
        float _1157 = dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156));
        float _1162 = (_1157 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1157);
        float _1171 = (dot(vec3(_708, _709, _710), vec3(_1162 * _1154, _1162 * _1155, _1162 * _1156)) + 1.0) * 0.5;
        float _3865 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1181 = sqrt(((_1155 * _1155) + (_1154 * _1154)) + (_1156 * _1156)) / (_1151 + 9.9999997473787516355514526367188e-06);
        float _3876 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1183 = _1182 * 2.0;
        float _1187 = (1.0 - _1182) / (_1182 + 1.0);
        float _3887 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _1197 = ((((1.0 - _1188) * (_1183 + 2.0)) * exp2(log2(isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * (_1183 + 1.0))) + _1188) * _1151;
        float _1198 = _1119 * 0.5;
        float _1199 = _1129 * 0.5;
        float _1200 = _1139 * 0.5;
        float _1201 = dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200));
        float _1206 = (_1201 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1201);
        float _1214 = (dot(vec3(_708, _709, _710), vec3(_1206 * _1198, _1206 * _1199, _1206 * _1200)) + 1.0) * 0.5;
        float _3898 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1223 = sqrt(((_1199 * _1199) + (_1198 * _1198)) + (_1200 * _1200)) / (_1152 + 9.9999997473787516355514526367188e-06);
        float _3909 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1225 = _1224 * 2.0;
        float _1229 = (1.0 - _1224) / (_1224 + 1.0);
        float _3920 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1239 = ((((1.0 - _1230) * (_1225 + 2.0)) * exp2(log2(isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) * (_1225 + 1.0))) + _1230) * _1152;
        float _1240 = _1120 * 0.5;
        float _1241 = _1130 * 0.5;
        float _1242 = _1140 * 0.5;
        float _1243 = dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242));
        float _1248 = (_1243 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1243);
        float _1256 = (dot(vec3(_708, _709, _710), vec3(_1248 * _1240, _1248 * _1241, _1248 * _1242)) + 1.0) * 0.5;
        float _3931 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1265 = sqrt(((_1241 * _1241) + (_1240 * _1240)) + (_1242 * _1242)) / (_1153 + 9.9999997473787516355514526367188e-06);
        float _3942 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1267 = _1266 * 2.0;
        float _1271 = (1.0 - _1266) / (_1266 + 1.0);
        float _3953 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
        float _1281 = ((((1.0 - _1272) * (_1267 + 2.0)) * exp2(log2(isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * (_1267 + 1.0))) + _1272) * _1153;
        _1289 = _1120;
        _1291 = _1119;
        _1292 = _1118;
        _1293 = _1130;
        _1294 = _1129;
        _1295 = _1128;
        _1296 = _1140;
        _1297 = _1139;
        _1298 = _1138;
        _1299 = _1153;
        _1300 = _1152;
        _1301 = _1151;
        _1302 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)));
        _1303 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)));
        _1304 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)));
    }
    else
    {
        _1289 = _1290;
        _1291 = _1290;
        _1292 = _1290;
        _1293 = _1290;
        _1294 = _1290;
        _1295 = _1290;
        _1296 = _1290;
        _1297 = _1290;
        _1298 = _1290;
        _1299 = _1290;
        _1300 = _1290;
        _1301 = _1290;
        _1302 = 0.0;
        _1303 = 0.0;
        _1304 = 0.0;
    }
    float _1602;
    float _1603;
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1333 = fma(_958, cbModelParam._m0[30u].z, fma(_954, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _950));
        float _1337 = fma(_958, cbModelParam._m0[31u].z, fma(_954, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _950));
        float _1341 = fma(_958, cbModelParam._m0[32u].z, fma(_954, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _950));
        float _1364 = _950 + _708;
        float _1365 = _954 + _709;
        float _1366 = _958 + _710;
        float _1376 = fma(_1366, cbModelParam._m0[30u].z, fma(_1365, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1364)) - _1333;
        float _1377 = fma(_1366, cbModelParam._m0[31u].z, fma(_1365, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1364)) - _1337;
        float _1378 = fma(_1366, cbModelParam._m0[32u].z, fma(_1365, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1364)) - _1341;
        float _1382 = inversesqrt(dot(vec3(_1376, _1377, _1378), vec3(_1376, _1377, _1378)));
        float _1395 = ((_1382 * _1376) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1333 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1396 = ((_1382 * _1377) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1337 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1397 = ((_1382 * _1378) / cbModelParam._m0[35u].z) + ((((((_1341 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1399 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        vec4 _1406 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        vec4 _1413 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        vec4 _1420 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1395, _1396, _1397), 0.0);
        float _1432 = exp2((_1399.w + (-0.5)) * 20.0) * 2.0;
        float _1433 = _1432 * (_1399.x + (-0.5));
        float _1434 = _1432 * (_1399.y + (-0.5));
        float _1435 = _1432 * (_1399.z + (-0.5));
        float _1442 = exp2((_1406.w + (-0.5)) * 20.0) * 2.0;
        float _1443 = _1442 * (_1406.x + (-0.5));
        float _1444 = _1442 * (_1406.y + (-0.5));
        float _1445 = _1442 * (_1406.z + (-0.5));
        float _1452 = exp2((_1413.w + (-0.5)) * 20.0) * 2.0;
        float _1453 = _1452 * (_1413.x + (-0.5));
        float _1454 = _1452 * (_1413.y + (-0.5));
        float _1455 = _1452 * (_1413.z + (-0.5));
        float _1462 = exp2((_1420.w + (-0.5)) * 20.0) * 2.0;
        float _1463 = _1462 * (_1420.x + (-0.5));
        float _1464 = _1462 * (_1420.y + (-0.5));
        float _1465 = _1462 * (_1420.z + (-0.5));
        float _1466 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1467 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1468 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1469 = _1433 * 0.5;
        float _1470 = _1443 * 0.5;
        float _1471 = _1453 * 0.5;
        float _1472 = dot(vec3(_1469, _1470, _1471), vec3(_1469, _1470, _1471));
        float _1477 = (_1472 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1472);
        float _1485 = (dot(vec3(_708, _709, _710), vec3(_1477 * _1469, _1477 * _1470, _1477 * _1471)) + 1.0) * 0.5;
        float _3994 = isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0));
        float _1494 = sqrt(((_1470 * _1470) + (_1469 * _1469)) + (_1471 * _1471)) / (_1466 + 9.9999997473787516355514526367188e-06);
        float _4005 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1495 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1496 = _1495 * 2.0;
        float _1500 = (1.0 - _1495) / (_1495 + 1.0);
        float _4016 = isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0));
        float _1501 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
        float _1510 = ((((1.0 - _1501) * (_1496 + 2.0)) * exp2(log2(isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0))) * (_1496 + 1.0))) + _1501) * _1466;
        float _1511 = _1434 * 0.5;
        float _1512 = _1444 * 0.5;
        float _1513 = _1454 * 0.5;
        float _1514 = dot(vec3(_1511, _1512, _1513), vec3(_1511, _1512, _1513));
        float _1519 = (_1514 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1514);
        float _1527 = (dot(vec3(_708, _709, _710), vec3(_1519 * _1511, _1519 * _1512, _1519 * _1513)) + 1.0) * 0.5;
        float _4027 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1536 = sqrt(((_1512 * _1512) + (_1511 * _1511)) + (_1513 * _1513)) / (_1467 + 9.9999997473787516355514526367188e-06);
        float _4038 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1537 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1538 = _1537 * 2.0;
        float _1542 = (1.0 - _1537) / (_1537 + 1.0);
        float _4049 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1543 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
        float _1552 = ((((1.0 - _1543) * (_1538 + 2.0)) * exp2(log2(isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * (_1538 + 1.0))) + _1543) * _1467;
        float _1553 = _1435 * 0.5;
        float _1554 = _1445 * 0.5;
        float _1555 = _1455 * 0.5;
        float _1556 = dot(vec3(_1553, _1554, _1555), vec3(_1553, _1554, _1555));
        float _1561 = (_1556 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1556);
        float _1569 = (dot(vec3(_708, _709, _710), vec3(_1561 * _1553, _1561 * _1554, _1561 * _1555)) + 1.0) * 0.5;
        float _4060 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1578 = sqrt(((_1554 * _1554) + (_1553 * _1553)) + (_1555 * _1555)) / (_1468 + 9.9999997473787516355514526367188e-06);
        float _4071 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1579 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
        float _1580 = _1579 * 2.0;
        float _1584 = (1.0 - _1579) / (_1579 + 1.0);
        float _4082 = isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0));
        float _1585 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
        float _1594 = ((((1.0 - _1585) * (_1580 + 2.0)) * exp2(log2(isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0))) * (_1580 + 1.0))) + _1585) * _1468;
        _1602 = _1435;
        _1603 = _1434;
        _1604 = _1433;
        _1605 = _1445;
        _1606 = _1444;
        _1607 = _1443;
        _1608 = _1455;
        _1609 = _1454;
        _1610 = _1453;
        _1611 = _1468;
        _1612 = _1467;
        _1613 = _1466;
        _1614 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)));
        _1615 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)));
        _1616 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0)));
    }
    else
    {
        _1602 = _1290;
        _1603 = _1290;
        _1604 = _1290;
        _1605 = _1290;
        _1606 = _1290;
        _1607 = _1290;
        _1608 = _1290;
        _1609 = _1290;
        _1610 = _1290;
        _1611 = _1290;
        _1612 = _1290;
        _1613 = _1290;
        _1614 = 0.0;
        _1615 = 0.0;
        _1616 = 0.0;
    }
    float _1626 = (cbModelParam._m0[1u].x * (_1614 - _1302)) + _1302;
    float _1627 = (cbModelParam._m0[1u].x * (_1615 - _1303)) + _1303;
    float _1628 = (cbModelParam._m0[1u].x * (_1616 - _1304)) + _1304;
    float _1649 = fma(_1628, cbSceneParam._m0[89u].z, fma(_1627, cbSceneParam._m0[89u].y, _1626 * cbSceneParam._m0[89u].x));
    float _1652 = fma(_1628, cbSceneParam._m0[90u].z, fma(_1627, cbSceneParam._m0[90u].y, _1626 * cbSceneParam._m0[90u].x));
    float _1655 = fma(_1628, cbSceneParam._m0[91u].z, fma(_1627, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1626));
    float _1670 = _894 * 0.5;
    float _1671 = _895 * 0.5;
    float _1672 = _896 * 0.5;
    float _1673 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1604, _1607, _1610, _1613));
    float _1676 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1603, _1606, _1609, _1612));
    float _1679 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1602, _1605, _1608, _1611));
    float _1713;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1686 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1289, _1293, _1296, _1299));
        float _1690 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1291, _1294, _1297, _1300));
        float _1694 = dot(vec4(_1670, _1671, _1672, 1.0), vec4(_1292, _1295, _1298, _1301));
        float _1701 = dot(vec4(cbModelParam._m0[39u]), vec4(_1670, _1671, _1672, 1.0));
        _1713 = dot(vec3(isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0)), isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0)), isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1701) ? 0.0 : (isnan(0.0) ? _1701 : max(0.0, _1701))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1713 = 1.0;
    }
    float _1724;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1715 = dot(vec4(cbModelParam._m0[40u]), vec4(_1670, _1671, _1672, 1.0));
        _1724 = dot(vec3(isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)), isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0)), isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1715) ? 0.0 : (isnan(0.0) ? _1715 : max(0.0, _1715))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1724 = 1.0;
    }
    float _1728 = (_1724 * cbModelParam._m0[1u].x) + (_1713 * (1.0 - cbModelParam._m0[1u].x));
    float _1738 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _711);
    float _1739 = isnan(_1738) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1738 : min(cbModelParam._m0[25u].z, _1738));
    float _1819;
    float _1821;
    float _1823;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1786 = fma(_958, cbModelParam._m0[13u].z, fma(_954, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _950)) + cbModelParam._m0[13u].w;
        float _1790 = fma(_958, cbModelParam._m0[14u].z, fma(_954, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _950)) + cbModelParam._m0[14u].w;
        float _1794 = fma(_958, cbModelParam._m0[15u].z, fma(_954, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _950)) + cbModelParam._m0[15u].w;
        float _1797 = fma(_896, cbModelParam._m0[13u].z, fma(_895, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _894));
        float _1800 = fma(_896, cbModelParam._m0[14u].z, fma(_895, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _894));
        float _1803 = fma(_896, cbModelParam._m0[15u].z, fma(_895, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _894));
        float _1831;
        if (_1797 > 0.0)
        {
            _1831 = abs((1.0 - _1786) / _1797);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1797 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1786 + 1.0) / _1797);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1831 = frontier_phi_17_15_ladder;
        }
        float _2035;
        if (_1800 > 0.0)
        {
            _2035 = abs((1.0 - _1790) / _1800);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1800 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1790 + 1.0) / _1800);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2035 = frontier_phi_26_22_ladder;
        }
        float _2289;
        if (_1803 > 0.0)
        {
            _2289 = abs((1.0 - _1794) / _1803);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1803 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1794 + 1.0) / _1803);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2289 = frontier_phi_38_33_ladder;
        }
        float _2291 = isnan(_2035) ? _1831 : (isnan(_1831) ? _2035 : min(_1831, _2035));
        float _2292 = isnan(_2289) ? _2291 : (isnan(_2291) ? _2289 : min(_2291, _2289));
        float _2296 = (_2292 * _1797) + _1786;
        float _2297 = (_2292 * _1800) + _1790;
        float _2298 = (_2292 * _1803) + _1794;
        float _2299 = _2292 * 9.9999997473787516355514526367188e-05;
        float _2301 = (-1.0) - _2299;
        float _2303 = _2299 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2298 > _2303) || ((_2298 < _2301) || ((_2297 > _2303) || ((_2297 < _2301) || ((_2296 < _2301) || (_2296 > _2303))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2426 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2298, cbModelParam._m0[9u].z, fma(_2297, cbModelParam._m0[9u].y, _2296 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2298, cbModelParam._m0[10u].z, fma(_2297, cbModelParam._m0[10u].y, _2296 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2298, cbModelParam._m0[11u].z, fma(_2297, cbModelParam._m0[11u].y, _2296 * cbModelParam._m0[11u].x))), _1739);
            frontier_phi_16_38_ladder = _2426.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2426.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2426.x * cbModelParam._m0[1u].y;
        }
        _1819 = frontier_phi_16_38_ladder_2;
        _1821 = frontier_phi_16_38_ladder_1;
        _1823 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1807 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_894, _895, _896), _1739);
        _1819 = _1807.x * cbModelParam._m0[1u].y;
        _1821 = _1807.y * cbModelParam._m0[1u].y;
        _1823 = _1807.z * cbModelParam._m0[1u].y;
    }
    float _1827 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _711);
    float _1828 = isnan(_1827) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1827 : min(cbModelParam._m0[25u].w, _1827));
    float _1919;
    float _1921;
    float _1923;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1883 = fma(_958, cbModelParam._m0[21u].z, fma(_954, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _950)) + cbModelParam._m0[21u].w;
        float _1887 = fma(_958, cbModelParam._m0[22u].z, fma(_954, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _950)) + cbModelParam._m0[22u].w;
        float _1891 = fma(_958, cbModelParam._m0[23u].z, fma(_954, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _950)) + cbModelParam._m0[23u].w;
        float _1894 = fma(_896, cbModelParam._m0[21u].z, fma(_895, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _894));
        float _1897 = fma(_896, cbModelParam._m0[22u].z, fma(_895, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _894));
        float _1900 = fma(_896, cbModelParam._m0[23u].z, fma(_895, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _894));
        float _2040;
        if (_1894 > 0.0)
        {
            _2040 = abs((1.0 - _1883) / _1894);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1894 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1883 + 1.0) / _1894);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2040 = frontier_phi_28_24_ladder;
        }
        float _2316;
        if (_1897 > 0.0)
        {
            _2316 = abs((1.0 - _1887) / _1897);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1897 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1887 + 1.0) / _1897);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2316 = frontier_phi_40_35_ladder;
        }
        float _2529;
        if (_1900 > 0.0)
        {
            _2529 = abs((1.0 - _1891) / _1900);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1900 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1891 + 1.0) / _1900);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2529 = frontier_phi_49_46_ladder;
        }
        float _2531 = isnan(_2316) ? _2040 : (isnan(_2040) ? _2316 : min(_2040, _2316));
        float _2532 = isnan(_2529) ? _2531 : (isnan(_2531) ? _2529 : min(_2531, _2529));
        float _2536 = (_2532 * _1894) + _1883;
        float _2537 = (_2532 * _1897) + _1887;
        float _2538 = (_2532 * _1900) + _1891;
        float _2539 = _2532 * 9.9999997473787516355514526367188e-05;
        float _2540 = (-1.0) - _2539;
        float _2542 = _2539 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2538 > _2542) || ((_2538 < _2540) || ((_2537 > _2542) || ((_2537 < _2540) || ((_2536 < _2540) || (_2536 > _2542))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2737 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2538, cbModelParam._m0[17u].z, fma(_2537, cbModelParam._m0[17u].y, _2536 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2538, cbModelParam._m0[18u].z, fma(_2537, cbModelParam._m0[18u].y, _2536 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2538, cbModelParam._m0[19u].z, fma(_2537, cbModelParam._m0[19u].y, _2536 * cbModelParam._m0[19u].x))), _1828);
            frontier_phi_25_49_ladder = _2737.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2737.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2737.x * cbModelParam._m0[1u].z;
        }
        _1919 = frontier_phi_25_49_ladder_2;
        _1921 = frontier_phi_25_49_ladder_1;
        _1923 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1903 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_894, _895, _896), _1828);
        _1919 = _1903.x * cbModelParam._m0[1u].z;
        _1921 = _1903.y * cbModelParam._m0[1u].z;
        _1923 = _1903.z * cbModelParam._m0[1u].z;
    }
    float _1936 = (((_921 * _871) + _922) * _886) * ((cbModelParam._m0[1u].w * (_1919 - _1819)) + _1819);
    float _1938 = (((_921 * _873) + _922) * _886) * ((cbModelParam._m0[1u].w * (_1921 - _1821)) + _1821);
    float _1940 = (((_921 * _874) + _922) * _886) * ((cbModelParam._m0[1u].w * (_1923 - _1823)) + _1823);
    float _1943 = fma(_1940, cbSceneParam._m0[89u].z, fma(_1938, cbSceneParam._m0[89u].y, _1936 * cbSceneParam._m0[89u].x));
    float _1946 = fma(_1940, cbSceneParam._m0[90u].z, fma(_1938, cbSceneParam._m0[90u].y, _1936 * cbSceneParam._m0[90u].x));
    float _1949 = fma(_1940, cbSceneParam._m0[91u].z, fma(_1938, cbSceneParam._m0[91u].y, _1936 * cbSceneParam._m0[91u].x));
    uvec4 _1959 = floatBitsToUint(cbInstanceData._m0[_846 + 5u]);
    uint _1961 = _1959.x * 14u;
    uint _1962 = _1961 + 13u;
    float _1969 = _886 + (-1.0);
    float _1974 = (cbLight._m0[_1962].x * _1969) + 1.0;
    float _1975 = (cbLight._m0[_1962].y * _1969) + 1.0;
    float _1976 = (cbLight._m0[_1962].z * _1969) + 1.0;
    float _1977 = (cbLight._m0[_1962].w * _1969) + 1.0;
    uint _1978 = _1961 + 5u;
    float _1984 = isnan(1.0) ? _1975 : (isnan(_1975) ? 1.0 : min(_1975, 1.0));
    uint _1988 = _1961 + 4u;
    float _1994 = isnan(1.0) ? _1974 : (isnan(_1974) ? 1.0 : min(_1974, 1.0));
    uint _1998 = _1961 | 1u;
    float _2009 = dot(vec3(cbLight._m0[_1961].xyz), vec3(_708, _709, _710));
    float _2012 = dot(vec3(cbLight._m0[_1998].xyz), vec3(_708, _709, _710));
    float _4218 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
    float _4229 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
    float _2017 = (isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * 0.3183098733425140380859375;
    float _2019 = (isnan(1.0) ? _4229 : (isnan(_4229) ? 1.0 : min(_4229, 1.0))) * 0.3183098733425140380859375;
    float _2026 = ((cbLight._m0[_1978].x * _1984) * _2019) + ((cbLight._m0[_1988].x * _1994) * _2017);
    float _2027 = ((_1984 * cbLight._m0[_1978].y) * _2019) + ((_1994 * cbLight._m0[_1988].y) * _2017);
    float _2028 = ((_1984 * cbLight._m0[_1978].z) * _2019) + ((_1994 * cbLight._m0[_1988].z) * _2017);
    uvec4 _2032 = floatBitsToUint(cbLight._m0[_1961 + 12u]);
    bool _2034 = _2032.x == 0u;
    float _2045;
    float _2047;
    float _2049;
    if (_2034)
    {
        _2045 = _2026;
        _2047 = _2027;
        _2049 = _2028;
    }
    else
    {
        uint _2053 = _1961 + 6u;
        float _2069 = (dot(vec3(cbLight._m0[_1961 + 2u].xyz), vec3(_708, _709, _710)) * 0.5) + 0.5;
        float _2070 = _2069 * _2069;
        float _4240 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
        float _2071 = isnan(1.0) ? _4240 : (isnan(_4240) ? 1.0 : min(_4240, 1.0));
        float _2072 = isnan(1.0) ? _1976 : (isnan(_1976) ? 1.0 : min(_1976, 1.0));
        _2045 = (((cbLight._m0[_2053].x * 0.3183098733425140380859375) * _2071) * _2072) + _2026;
        _2047 = (((cbLight._m0[_2053].y * 0.3183098733425140380859375) * _2071) * _2072) + _2027;
        _2049 = (((cbLight._m0[_2053].z * 0.3183098733425140380859375) * _2071) * _2072) + _2028;
    }
    bool _2052 = _2032.y == 0u;
    float _2090;
    float _2092;
    float _2094;
    if (_2052)
    {
        _2090 = _2045;
        _2092 = _2047;
        _2094 = _2049;
    }
    else
    {
        uint _2260 = _1961 + 7u;
        float _2276 = (dot(vec3(cbLight._m0[_1961 + 3u].xyz), vec3(_708, _709, _710)) * 0.5) + 0.5;
        float _2277 = _2276 * _2276;
        float _4256 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0));
        float _2278 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
        float _2279 = isnan(1.0) ? _1977 : (isnan(_1977) ? 1.0 : min(_1977, 1.0));
        _2090 = (((cbLight._m0[_2260].x * 0.3183098733425140380859375) * _2278) * _2279) + _2045;
        _2092 = (((cbLight._m0[_2260].y * 0.3183098733425140380859375) * _2278) * _2279) + _2047;
        _2094 = (((cbLight._m0[_2260].z * 0.3183098733425140380859375) * _2278) * _2279) + _2049;
    }
    uint _2097 = _1961 + 8u;
    float _2110 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1961].w)) * _711) * 0.949999988079071044921875);
    float _2111 = _2110 * _2110;
    float _2112 = cbLight._m0[_1961].x + _788;
    float _2113 = cbLight._m0[_1961].y + _789;
    float _2114 = cbLight._m0[_1961].z + _790;
    float _2118 = inversesqrt(dot(vec3(_2112, _2113, _2114), vec3(_2112, _2113, _2114)));
    float _2119 = _2118 * _2112;
    float _2120 = _2118 * _2113;
    float _2121 = _2118 * _2114;
    float _2122 = dot(vec3(_708, _709, _710), vec3(cbLight._m0[_1961].xyz));
    float _4272 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
    float _2125 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
    float _4283 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _2126 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
    float _2127 = dot(vec3(_708, _709, _710), vec3(_2119, _2120, _2121));
    float _4294 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
    float _2130 = isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0));
    float _2131 = dot(vec3(cbLight._m0[_1961].xyz), vec3(_2119, _2120, _2121));
    float _4305 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
    float _2135 = _2111 * _2111;
    float _2139 = ((_2130 * _2130) * (_2135 + (-1.0))) + 1.0;
    float _2147 = exp2(log2(1.0 - (isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0)))) * 5.0);
    float _2148 = 0.959999978542327880859375 - _868;
    float _2150 = 0.959999978542327880859375 - _869;
    float _2151 = 0.959999978542327880859375 - _870;
    float _2158 = 1.0 - _2111;
    float _2169 = (0.5 / (((_2126 * ((_2125 * _2158) + _2111)) + 9.9999999392252902907785028219223e-09) + (((_2126 * _2158) + _2111) * _2125))) * _2125;
    float _4316 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
    float _2171 = (isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_2135 / ((_2139 * _2139) * 3.141590118408203125));
    uint _2182 = _1961 + 9u;
    float _2193 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1998].w)) * _711) * 0.949999988079071044921875);
    float _2194 = _2193 * _2193;
    float _2195 = cbLight._m0[_1998].x + _788;
    float _2196 = cbLight._m0[_1998].y + _789;
    float _2197 = cbLight._m0[_1998].z + _790;
    float _2201 = inversesqrt(dot(vec3(_2195, _2196, _2197), vec3(_2195, _2196, _2197)));
    float _2202 = _2201 * _2195;
    float _2203 = _2201 * _2196;
    float _2204 = _2201 * _2197;
    float _2205 = dot(vec3(_708, _709, _710), vec3(cbLight._m0[_1998].xyz));
    float _4327 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _2208 = isnan(1.0) ? _4327 : (isnan(_4327) ? 1.0 : min(_4327, 1.0));
    float _2209 = dot(vec3(_708, _709, _710), vec3(_2202, _2203, _2204));
    float _4338 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _2212 = isnan(1.0) ? _4338 : (isnan(_4338) ? 1.0 : min(_4338, 1.0));
    float _2213 = dot(vec3(cbLight._m0[_1998].xyz), vec3(_2202, _2203, _2204));
    float _4349 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
    float _2217 = _2194 * _2194;
    float _2221 = ((_2212 * _2212) * (_2217 + (-1.0))) + 1.0;
    float _2228 = exp2(log2(1.0 - (isnan(1.0) ? _4349 : (isnan(_4349) ? 1.0 : min(_4349, 1.0)))) * 5.0);
    float _2235 = 1.0 - _2194;
    float _2245 = (0.5 / (((_2126 * ((_2208 * _2235) + _2194)) + 9.9999999392252902907785028219223e-09) + (((_2126 * _2235) + _2194) * _2208))) * _2208;
    float _4360 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
    float _2247 = (isnan(1.0) ? _4360 : (isnan(_4360) ? 1.0 : min(_4360, 1.0))) * (_2217 / ((_2221 * _2221) * 3.141590118408203125));
    float _2257 = (((((_2228 * _2148) + _871) * cbLight._m0[_2182].x) * _2247) * _1984) + (((((_2147 * _2148) + _871) * cbLight._m0[_2097].x) * _2171) * _1994);
    float _2258 = (((((_2228 * _2150) + _873) * cbLight._m0[_2182].y) * _2247) * _1984) + (((((_2147 * _2150) + _873) * cbLight._m0[_2097].y) * _2171) * _1994);
    float _2259 = (((((_2228 * _2151) + _874) * cbLight._m0[_2182].z) * _2247) * _1984) + (((((_2147 * _2151) + _874) * cbLight._m0[_2097].z) * _2171) * _1994);
    float _2321;
    float _2323;
    float _2325;
    if (_2034)
    {
        _2321 = _2257;
        _2323 = _2258;
        _2325 = _2259;
    }
    else
    {
        uint _2327 = _1961 + 2u;
        uint _2331 = _1961 + 10u;
        float _2345 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2327].w)) * _711) * 0.949999988079071044921875);
        float _2346 = _2345 * _2345;
        float _2347 = cbLight._m0[_2327].x + _788;
        float _2348 = cbLight._m0[_2327].y + _789;
        float _2349 = cbLight._m0[_2327].z + _790;
        float _2353 = inversesqrt(dot(vec3(_2347, _2348, _2349), vec3(_2347, _2348, _2349)));
        float _2354 = _2353 * _2347;
        float _2355 = _2353 * _2348;
        float _2356 = _2353 * _2349;
        float _2357 = dot(vec3(_708, _709, _710), vec3(cbLight._m0[_2327].xyz));
        float _4371 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
        float _2360 = isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0));
        float _2361 = dot(vec3(_708, _709, _710), vec3(_2354, _2355, _2356));
        float _4382 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
        float _2364 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _2365 = dot(vec3(cbLight._m0[_2327].xyz), vec3(_2354, _2355, _2356));
        float _4393 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
        float _2369 = _2346 * _2346;
        float _2373 = ((_2364 * _2364) * (_2369 + (-1.0))) + 1.0;
        float _2380 = exp2(log2(1.0 - (isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0)))) * 5.0);
        float _2387 = 1.0 - _2346;
        float _2397 = (0.5 / (((_2126 * ((_2360 * _2387) + _2346)) + 9.9999999392252902907785028219223e-09) + (((_2126 * _2387) + _2346) * _2360))) * _2360;
        float _4404 = isnan(0.0) ? _2397 : (isnan(_2397) ? 0.0 : max(_2397, 0.0));
        float _2399 = (isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * (_2369 / ((_2373 * _2373) * 3.141590118408203125));
        float _2400 = isnan(1.0) ? _1976 : (isnan(_1976) ? 1.0 : min(_1976, 1.0));
        _2321 = (((((_2380 * _2148) + _871) * cbLight._m0[_2331].x) * _2399) * _2400) + _2257;
        _2323 = (((((_2380 * _2150) + _873) * cbLight._m0[_2331].y) * _2399) * _2400) + _2258;
        _2325 = (((((_2380 * _2151) + _874) * cbLight._m0[_2331].z) * _2399) * _2400) + _2259;
    }
    float _2435;
    float _2437;
    float _2439;
    if (_2052)
    {
        _2435 = _2321;
        _2437 = _2323;
        _2439 = _2325;
    }
    else
    {
        uint _2446 = _1961 + 3u;
        uint _2450 = _1961 + 11u;
        float _2464 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2446].w)) * _711) * 0.949999988079071044921875);
        float _2465 = _2464 * _2464;
        float _2466 = cbLight._m0[_2446].x + _788;
        float _2467 = cbLight._m0[_2446].y + _789;
        float _2468 = cbLight._m0[_2446].z + _790;
        float _2472 = inversesqrt(dot(vec3(_2466, _2467, _2468), vec3(_2466, _2467, _2468)));
        float _2473 = _2472 * _2466;
        float _2474 = _2472 * _2467;
        float _2475 = _2472 * _2468;
        float _2476 = dot(vec3(_708, _709, _710), vec3(cbLight._m0[_2446].xyz));
        float _4420 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
        float _2479 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
        float _2480 = dot(vec3(_708, _709, _710), vec3(_2473, _2474, _2475));
        float _4431 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
        float _2483 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
        float _2484 = dot(vec3(cbLight._m0[_2446].xyz), vec3(_2473, _2474, _2475));
        float _4442 = isnan(0.0) ? _2484 : (isnan(_2484) ? 0.0 : max(_2484, 0.0));
        float _2488 = _2465 * _2465;
        float _2492 = ((_2483 * _2483) * (_2488 + (-1.0))) + 1.0;
        float _2499 = exp2(log2(1.0 - (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0)))) * 5.0);
        float _2506 = 1.0 - _2465;
        float _2516 = (0.5 / (((_2126 * ((_2479 * _2506) + _2465)) + 9.9999999392252902907785028219223e-09) + (((_2126 * _2506) + _2465) * _2479))) * _2479;
        float _4453 = isnan(0.0) ? _2516 : (isnan(_2516) ? 0.0 : max(_2516, 0.0));
        float _2518 = (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * (_2488 / ((_2492 * _2492) * 3.141590118408203125));
        float _2519 = isnan(1.0) ? _1977 : (isnan(_1977) ? 1.0 : min(_1977, 1.0));
        _2435 = (((((_2499 * _2148) + _871) * cbLight._m0[_2450].x) * _2518) * _2519) + _2321;
        _2437 = (((((_2499 * _2150) + _873) * cbLight._m0[_2450].y) * _2518) * _2519) + _2323;
        _2439 = (((((_2499 * _2151) + _874) * cbLight._m0[_2450].z) * _2518) * _2519) + _2325;
    }
    float _2654;
    float _2656;
    float _2658;
    float _2660;
    float _2662;
    float _2664;
    if (_1959.y == 0u)
    {
        float _2594 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2595 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2594;
        float _2596 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2594;
        float _2597 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2594;
        uvec4 _2609 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2610 = _2609.x;
        uint _2621 = uint((float(_2609.y) * floor(float(uint(cbSceneParam._m0[85u].y * _809) / _2610))) + floor(float(uint(cbSceneParam._m0[85u].x * _808) / _2610)));
        float _2631 = (log2(_2597 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2632 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
        uint _2635 = uint(isnan(14.0) ? _2632 : (isnan(_2632) ? 14.0 : min(_2632, 14.0)));
        uvec4 _2640 = texelFetch(g_lightClusterGridBuffer, int(((_2635 << 2u) + (_2621 << 6u)) >> 2u));
        uint _2641 = _2640.x;
        uint _2642 = _2609.z;
        float _2742;
        float _2744;
        float _2746;
        float _2748;
        float _2750;
        float _2752;
        if (((((1u << ((_2642 >> 4u) & 15u)) + 4294967295u) & _2641) == 0u) || ((_2642 & 240u) == 0u))
        {
            _2742 = 0.0;
            _2744 = 0.0;
            _2746 = 0.0;
            _2748 = 0.0;
            _2750 = 0.0;
            _2752 = 0.0;
        }
        else
        {
            float _2743;
            float _2745;
            float _2747;
            float _2749;
            float _2751;
            float _2753;
            float _2895 = 0.0;
            float _2896 = 0.0;
            float _2897 = 0.0;
            float _2898 = 0.0;
            float _2899 = 0.0;
            float _2900 = 0.0;
            uint _2901 = 0u;
            uint _2910;
            bool _2911;
            for (;;)
            {
                _2910 = texelFetch(g_lightClassification, int((((_2635 << 5u) + (_2621 << 9u)) + (_2901 << 2u)) >> 2u)).x;
                _2911 = _2910 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2911)
                {
                    frontier_phi_66_pred = _2895;
                    frontier_phi_66_pred_1 = _2900;
                    frontier_phi_66_pred_2 = _2899;
                    frontier_phi_66_pred_3 = _2898;
                    frontier_phi_66_pred_4 = _2897;
                    frontier_phi_66_pred_5 = _2896;
                }
                else
                {
                    float _3040;
                    float _3041;
                    float _3042;
                    float _3043;
                    float _3044;
                    float _3045;
                    uint _3046;
                    _3040 = _2895;
                    _3041 = _2896;
                    _3042 = _2897;
                    _3043 = _2898;
                    _3044 = _2899;
                    _3045 = _2900;
                    _3046 = _2910;
                    float _2967;
                    float _2968;
                    float _2969;
                    float _2970;
                    float _2971;
                    float _2972;
                    for (;;)
                    {
                        uint _3050 = uint(findLSB(_3046)) + (_2901 << 5u);
                        uint _3047 = (_3046 + 4294967295u) & _3046;
                        uint _3052 = _3050 * 48u;
                        vec4 _3066 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3052)).x, texelFetch(g_PointLightRenderingBuffer, int(_3052 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3052 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3052 + 3u)).x));
                        uint _3072 = (_3050 * 48u) + 4u;
                        vec4 _3085 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3072)).x, texelFetch(g_PointLightRenderingBuffer, int(_3072 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3072 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3072 + 3u)).x));
                        uint _3091 = (_3050 * 48u) + 8u;
                        vec3 _3102 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3091)).x, texelFetch(g_PointLightRenderingBuffer, int(_3091 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3091 + 2u)).x));
                        float _3106 = _3066.x - _2595;
                        float _3107 = _3066.y - _2596;
                        float _3108 = _3066.z - _2597;
                        float _3109 = dot(vec3(_3106, _3107, _3108), vec3(_3106, _3107, _3108));
                        float _3112 = inversesqrt(_3109);
                        float _3113 = _3112 * _3106;
                        float _3114 = _3112 * _3107;
                        float _3115 = _3112 * _3108;
                        float _3116 = dot(vec3(_827, _830, _833), vec3(_3113, _3114, _3115));
                        float _3121 = 1.0 - (_3109 * _3066.w);
                        float _4479 = isnan(0.0) ? _3121 : (isnan(_3121) ? 0.0 : max(_3121, 0.0));
                        float _3122 = isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0));
                        float _3123 = sqrt(_3109) * _3085.w;
                        float _3126 = 1.39999997615814208984375 / (_3123 + 1.39999997615814208984375);
                        float _3127 = _3126 * _3126;
                        float _3130 = ((1.0 - _3127) * _3116) + _3127;
                        float _3133 = _3123 * _3123;
                        float _3137 = ((isnan(0.0) ? _3130 : (isnan(_3130) ? 0.0 : max(_3130, 0.0))) * _3122) / ((_3133 * 0.699999988079071044921875) + 1.0);
                        float _3141 = (-0.0) - _2595;
                        float _3142 = (-0.0) - _2596;
                        float _3143 = (-0.0) - _2597;
                        float _3147 = inversesqrt(dot(vec3(_3141, _3142, _3143), vec3(_3141, _3142, _3143)));
                        float _3148 = _3147 * _3141;
                        float _3149 = _3147 * _3142;
                        float _3150 = _3147 * _3143;
                        float _3158 = exp2(log2(1.0 / ((_3133 * 3.5) + 5.0)) * 0.25);
                        float _3159 = 1.0 - _902;
                        float _3166 = sqrt(1.0 - ((1.0 - (_3159 * _3159)) * (1.0 - (_3158 * _3158))));
                        float _3167 = _3166 * _3166;
                        float _3168 = _3167 * _3167;
                        float _3169 = _3148 + _3113;
                        float _3170 = _3149 + _3114;
                        float _3171 = _3150 + _3115;
                        float _3175 = inversesqrt(dot(vec3(_3169, _3170, _3171), vec3(_3169, _3170, _3171)));
                        float _3179 = dot(vec3(_827, _830, _833), vec3(_3148, _3149, _3150));
                        float _4495 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0));
                        float _3182 = isnan(1.0) ? _4495 : (isnan(_4495) ? 1.0 : min(_4495, 1.0));
                        float _3183 = dot(vec3(_827, _830, _833), vec3(_3175 * _3169, _3175 * _3170, _3175 * _3171));
                        float _4506 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0));
                        float _3186 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
                        float _3190 = ((_3186 * _3186) * (_3168 + (-1.0))) + 1.0;
                        float _3191 = _3126 * _3167;
                        float _3192 = _3191 * _3191;
                        float _3195 = ((1.0 - _3192) * _3116) + _3192;
                        float _4517 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                        float _3196 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
                        float _3197 = 1.0 - _3167;
                        float _3207 = (0.5 / (((_3196 * ((_3182 * _3197) + _3167)) + 9.9999999392252902907785028219223e-09) + (((_3196 * _3197) + _3167) * _3182))) * _3196;
                        float _4528 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                        float _3218 = (((_3168 * 3.1415927410125732421875) * (isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0)))) / ((_3190 * _3190) * ((_3133 * 2.1991131305694580078125) + 3.141590118408203125))) * _3122;
                        _2970 = (_3137 * _3085.x) + _3043;
                        _2971 = (_3137 * _3085.y) + _3044;
                        _2972 = (_3137 * _3085.z) + _3045;
                        _2967 = (_3218 * _3102.x) + _3040;
                        _2968 = (_3218 * _3102.y) + _3041;
                        _2969 = (_3218 * _3102.z) + _3042;
                        if (_3047 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3040 = _2967;
                            _3041 = _2968;
                            _3042 = _2969;
                            _3043 = _2970;
                            _3044 = _2971;
                            _3045 = _2972;
                            _3046 = _3047;
                        }
                    }
                    frontier_phi_66_pred = _2967;
                    frontier_phi_66_pred_1 = _2972;
                    frontier_phi_66_pred_2 = _2971;
                    frontier_phi_66_pred_3 = _2970;
                    frontier_phi_66_pred_4 = _2969;
                    frontier_phi_66_pred_5 = _2968;
                }
                _2743 = frontier_phi_66_pred;
                _2753 = frontier_phi_66_pred_1;
                _2751 = frontier_phi_66_pred_2;
                _2749 = frontier_phi_66_pred_3;
                _2747 = frontier_phi_66_pred_4;
                _2745 = frontier_phi_66_pred_5;
                uint _2902 = _2901 + 1u;
                if (_2902 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2895 = _2743;
                    _2896 = _2745;
                    _2897 = _2747;
                    _2898 = _2749;
                    _2899 = _2751;
                    _2900 = _2753;
                    _2901 = _2902;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2742 = _2743;
            _2744 = _2745;
            _2746 = _2747;
            _2748 = _2749;
            _2750 = _2751;
            _2752 = _2753;
        }
        uvec4 _2756 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2757 = _2756.z;
        uint _2759 = (_2757 >> 8u) & 15u;
        float _2863;
        float _2865;
        float _2867;
        float _2869;
        float _2871;
        float _2873;
        if (((4294967295u << _2759) & _2641) == 0u)
        {
            _2863 = _2742;
            _2865 = _2744;
            _2867 = _2746;
            _2869 = _2748;
            _2871 = _2750;
            _2873 = _2752;
        }
        else
        {
            float _2888 = inversesqrt(dot(vec3(_2595, _2596, _2597), vec3(_2595, _2596, _2597)));
            float _2889 = _2888 * _2595;
            float _2890 = _2888 * _2596;
            float _2891 = _2888 * _2597;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2759 < ((_2757 >> 12u) & 15u))
            {
                float _2864;
                float _2866;
                float _2868;
                float _2870;
                float _2872;
                float _2874;
                float _3023 = _2742;
                float _3024 = _2744;
                float _3025 = _2746;
                float _3026 = _2748;
                float _3027 = _2750;
                float _3028 = _2752;
                uint _3029 = _2759;
                uint _3038;
                bool _3039;
                for (;;)
                {
                    _3038 = texelFetch(g_lightClassification, int((((_2635 << 5u) + (_2621 << 9u)) + (_3029 << 2u)) >> 2u)).x;
                    _3039 = _3038 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3039)
                    {
                        frontier_phi_77_pred = _3028;
                        frontier_phi_77_pred_1 = _3027;
                        frontier_phi_77_pred_2 = _3026;
                        frontier_phi_77_pred_3 = _3025;
                        frontier_phi_77_pred_4 = _3024;
                        frontier_phi_77_pred_5 = _3023;
                    }
                    else
                    {
                        float _3232;
                        float _3233;
                        float _3234;
                        float _3235;
                        float _3236;
                        float _3237;
                        float _3526;
                        float _3527;
                        float _3528;
                        float _3529;
                        float _3530;
                        float _3531;
                        float _3245 = _3023;
                        float _3246 = _3024;
                        float _3247 = _3025;
                        float _3248 = _3026;
                        float _3249 = _3027;
                        float _3250 = _3028;
                        uint _3251 = _3038;
                        uint _3252;
                        vec4 _3277;
                        float _3278;
                        vec4 _3293;
                        vec3 _3305;
                        vec4 _3320;
                        vec4 _3335;
                        float _3382;
                        bool _3383;
                        for (;;)
                        {
                            uint _3262 = ((_3029 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3251));
                            _3252 = (_3251 + 4294967295u) & _3251;
                            uint _3264 = _3262 * 40u;
                            _3277 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3264)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3264 + 3u)).x));
                            _3278 = _3277.w;
                            uint _3280 = (_3262 * 40u) + 4u;
                            _3293 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3280)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3280 + 3u)).x));
                            uint _3295 = (_3262 * 40u) + 8u;
                            _3305 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3295)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3295 + 2u)).x));
                            uint _3307 = (_3262 * 40u) + 16u;
                            _3320 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3307)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3307 + 3u)).x));
                            uint _3322 = (_3262 * 40u) + 20u;
                            _3335 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3322)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3322 + 3u)).x));
                            uint _3338 = (_3262 * 40u) + 24u;
                            vec4 _3351 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3338)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 3u)).x));
                            uint _3357 = (_3262 * 40u) + 28u;
                            vec4 _3370 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3357)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3357 + 3u)).x));
                            _3382 = fma(_2597, _3370.z, fma(_2596, _3370.y, _3370.x * _2595)) + _3370.w;
                            _3383 = !((fma(_2597, _3351.z, fma(_2596, _3351.y, _3351.x * _2595)) + _3351.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3383)
                            {
                                float _3410 = _3277.x - _2595;
                                float _3411 = _3277.y - _2596;
                                float _3412 = _3277.z - _2597;
                                float _3413 = dot(vec3(_3410, _3411, _3412), vec3(_3410, _3411, _3412));
                                float _3416 = inversesqrt(_3413);
                                float _3417 = _3416 * _3410;
                                float _3418 = _3416 * _3411;
                                float _3419 = _3416 * _3412;
                                float _3423 = 1.0 - (_3413 / (_3278 * _3278));
                                float _4539 = isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0));
                                float _3424 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
                                float _3428 = sqrt(_3413) * _3293.w;
                                float _3430 = 1.39999997615814208984375 / (_3428 + 1.39999997615814208984375);
                                float _3431 = _3430 * _3430;
                                float _3434 = ((1.0 - _3431) * dot(vec3(_3417, _3418, _3419), vec3(_827, _830, _833))) + _3431;
                                float _3437 = _3428 * _3428;
                                float _3441 = (fma(_2597, _3320.z, fma(_2596, _3320.y, _3320.x * _2595)) + _3320.w) / _3382;
                                float _3442 = (fma(_2597, _3335.z, fma(_2596, _3335.y, _3335.x * _2595)) + _3335.w) / _3382;
                                float _3446 = 1.0 - dot(vec2(_3441, _3442), vec2(_3441, _3442));
                                float _4555 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                                float _3447 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
                                float _3448 = _3447 * (((isnan(0.0) ? _3434 : (isnan(_3434) ? 0.0 : max(_3434, 0.0))) * _3424) / ((_3437 * 0.699999988079071044921875) + 1.0));
                                float _3460 = exp2(log2(1.0 / ((_3437 * 3.5) + 5.0)) * 0.25);
                                float _3461 = 1.0 - _902;
                                float _3468 = sqrt(1.0 - ((1.0 - (_3461 * _3461)) * (1.0 - (_3460 * _3460))));
                                float _3469 = _3468 * _3468;
                                float _3470 = _3469 * _3469;
                                float _3471 = _3417 - _2889;
                                float _3472 = _3418 - _2890;
                                float _3473 = _3419 - _2891;
                                float _3477 = inversesqrt(dot(vec3(_3471, _3472, _3473), vec3(_3471, _3472, _3473)));
                                float _3481 = dot(vec3(_827, _830, _833), vec3((-0.0) - _2889, (-0.0) - _2890, (-0.0) - _2891));
                                float _4566 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0));
                                float _3484 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
                                float _3485 = dot(vec3(_827, _830, _833), vec3(_3477 * _3471, _3477 * _3472, _3477 * _3473));
                                float _4577 = isnan(0.0) ? _3485 : (isnan(_3485) ? 0.0 : max(_3485, 0.0));
                                float _3488 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
                                float _3492 = ((_3488 * _3488) * (_3470 + (-1.0))) + 1.0;
                                float _3493 = _3430 * _3469;
                                float _3494 = _3493 * _3493;
                                float _3500 = ((1.0 - _3494) * dot(vec3(_827, _830, _833), vec3(_3417, _3418, _3419))) + _3494;
                                float _4588 = isnan(0.0) ? _3500 : (isnan(_3500) ? 0.0 : max(_3500, 0.0));
                                float _3501 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
                                float _3502 = 1.0 - _3469;
                                float _3512 = (0.5 / (((_3501 * ((_3484 * _3502) + _3469)) + 9.9999999392252902907785028219223e-09) + (((_3501 * _3502) + _3469) * _3484))) * _3501;
                                float _4599 = isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0));
                                float _3522 = (_3447 * _3424) * (((_3470 * 3.1415927410125732421875) * (isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0)))) / ((_3492 * _3492) * ((_3437 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3448 * _3293.y;
                                frontier_phi_83_pred_1 = _3448 * _3293.x;
                                frontier_phi_83_pred_2 = _3522 * _3305.z;
                                frontier_phi_83_pred_3 = _3522 * _3305.y;
                                frontier_phi_83_pred_4 = _3522 * _3305.x;
                                frontier_phi_83_pred_5 = _3448 * _3293.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3530 = frontier_phi_83_pred;
                            _3529 = frontier_phi_83_pred_1;
                            _3528 = frontier_phi_83_pred_2;
                            _3527 = frontier_phi_83_pred_3;
                            _3526 = frontier_phi_83_pred_4;
                            _3531 = frontier_phi_83_pred_5;
                            _3235 = _3529 + _3248;
                            _3236 = _3530 + _3249;
                            _3237 = _3531 + _3250;
                            _3232 = _3526 + _3245;
                            _3233 = _3527 + _3246;
                            _3234 = _3528 + _3247;
                            if (_3252 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3245 = _3232;
                                _3246 = _3233;
                                _3247 = _3234;
                                _3248 = _3235;
                                _3249 = _3236;
                                _3250 = _3237;
                                _3251 = _3252;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3237;
                        frontier_phi_77_pred_1 = _3236;
                        frontier_phi_77_pred_2 = _3235;
                        frontier_phi_77_pred_3 = _3234;
                        frontier_phi_77_pred_4 = _3233;
                        frontier_phi_77_pred_5 = _3232;
                    }
                    _2874 = frontier_phi_77_pred;
                    _2872 = frontier_phi_77_pred_1;
                    _2870 = frontier_phi_77_pred_2;
                    _2868 = frontier_phi_77_pred_3;
                    _2866 = frontier_phi_77_pred_4;
                    _2864 = frontier_phi_77_pred_5;
                    uint _3030 = _3029 + 1u;
                    if (_3030 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3023 = _2864;
                        _3024 = _2866;
                        _3025 = _2868;
                        _3026 = _2870;
                        _3027 = _2872;
                        _3028 = _2874;
                        _3029 = _3030;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2868;
                frontier_phi_58_59_ladder_1 = _2874;
                frontier_phi_58_59_ladder_2 = _2872;
                frontier_phi_58_59_ladder_3 = _2870;
                frontier_phi_58_59_ladder_4 = _2866;
                frontier_phi_58_59_ladder_5 = _2864;
            }
            else
            {
                frontier_phi_58_59_ladder = _2746;
                frontier_phi_58_59_ladder_1 = _2752;
                frontier_phi_58_59_ladder_2 = _2750;
                frontier_phi_58_59_ladder_3 = _2748;
                frontier_phi_58_59_ladder_4 = _2744;
                frontier_phi_58_59_ladder_5 = _2742;
            }
            _2863 = frontier_phi_58_59_ladder_5;
            _2865 = frontier_phi_58_59_ladder_4;
            _2867 = frontier_phi_58_59_ladder;
            _2869 = frontier_phi_58_59_ladder_3;
            _2871 = frontier_phi_58_59_ladder_2;
            _2873 = frontier_phi_58_59_ladder_1;
        }
        float _2878 = isnan(1.0) ? _886 : (isnan(_886) ? 1.0 : min(_886, 1.0));
        _2654 = (_2878 * _2869) + _2090;
        _2656 = (_2878 * _2871) + _2092;
        _2658 = (_2878 * _2873) + _2094;
        _2660 = ((_2863 * _871) * _2878) + _2435;
        _2662 = ((_2865 * _873) * _2878) + _2437;
        _2664 = ((_2867 * _874) * _2878) + _2439;
    }
    else
    {
        _2654 = _2090;
        _2656 = _2092;
        _2658 = _2094;
        _2660 = _2435;
        _2662 = _2437;
        _2664 = _2439;
    }
    float _4615 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
    float _4626 = isnan(0.0) ? _862 : (isnan(_862) ? 0.0 : max(_862, 0.0));
    float _4637 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _2681 = ((isnan(1.0) ? _4615 : (isnan(_4615) ? 1.0 : min(_4615, 1.0))) * (_2654 + ((isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0))) * _886))) + ((_2660 + ((isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0))) * _1728)) * cbPerFrame._m0[3u].x);
    float _2682 = ((isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0))) * (_2656 + ((isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))) * _886))) + ((_2662 + ((isnan(0.0) ? _1946 : (isnan(_1946) ? 0.0 : max(_1946, 0.0))) * _1728)) * cbPerFrame._m0[3u].x);
    float _2683 = ((isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * (_2658 + ((isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))) * _886))) + ((_2664 + ((isnan(0.0) ? _1949 : (isnan(_1949) ? 0.0 : max(_1949, 0.0))) * _1728)) * cbPerFrame._m0[3u].x);
    uint _2684 = _846 + 6u;
    float _2692 = _808 / cbSceneParam._m0[86u].x;
    float _2693 = _809 / cbSceneParam._m0[86u].y;
    vec4 _2707 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2692, _2693, (log2((isnan(cbSceneParam._m0[77u].w) ? _731 : (isnan(_731) ? cbSceneParam._m0[77u].w : min(_731, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2709 = _2707.x;
    float _2710 = _2707.y;
    float _2711 = _2707.z;
    float _2712 = _2707.w;
    float _2805;
    float _2807;
    float _2809;
    float _2811;
    if (_731 > cbSceneParam._m0[78u].w)
    {
        float _2767 = isnan(_731) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _731 : min(cbSceneParam._m0[80u].w, _731));
        float _2768 = _2767 / _731;
        float _2779 = _2768 * _781;
        float _2780 = _782 * _2768;
        float _2781 = (-0.0) - _2780;
        float _2783 = _2768 * _783;
        float _2785 = (cbSceneParam._m0[77u].w * _2781) / _2767;
        float _2786 = _2785 + cbSceneParam._m0[79u].w;
        float _2787 = cbSceneParam._m0[79u].w - _2780;
        float _2793 = sqrt(((_2779 * _2779) + (_2780 * _2780)) + (_2783 * _2783));
        float _2796 = (1.0 - (cbSceneParam._m0[77u].w / _2767)) * _2793;
        float _2801 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2803 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2980;
        if (abs((_2781 - _2785) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2980 = ((((_2786 > 0.0) ? exp2(_2801 * _2786) : (2.0 - exp2(_2803 * _2786))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2796;
        }
        else
        {
            float _2924 = 1.0 / cbSceneParam._m0[80u].x;
            float _2925 = isnan(_2787) ? _2786 : (isnan(_2786) ? _2787 : max(_2786, _2787));
            float _2926 = isnan(_2787) ? _2786 : (isnan(_2786) ? _2787 : min(_2786, _2787));
            float _2935 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : min(_2925, 0.0));
            float _2936 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : min(_2926, 0.0));
            _2980 = ((abs(_2793 / _2781) * cbSceneParam._m0[80u].y) * ((((_2935 - _2936) * 2.0) - ((exp2(_2801 * (isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0)))) - exp2(_2801 * (isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0))))) * _2924)) - ((exp2(_2803 * _2935) - exp2(_2803 * _2936)) * _2924))) + (_2796 * cbSceneParam._m0[80u].z);
        }
        vec4 _2982 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2692, _2693, 1.0), 0.0);
        float _2991 = exp2((_2980 * (-1.44269502162933349609375)) * (1.0 - _2982.w));
        float _2992 = log2(_2991);
        float _3008 = log2(_2712);
        _2805 = (exp2(_3008 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2992 * cbSceneParam._m0[78u].x)) * _2982.x) / cbSceneParam._m0[78u].x)) + _2709;
        _2807 = (exp2(_3008 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2992 * cbSceneParam._m0[78u].y)) * _2982.y) / cbSceneParam._m0[78u].y)) + _2710;
        _2809 = (exp2(_3008 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2992 * cbSceneParam._m0[78u].z)) * _2982.z) / cbSceneParam._m0[78u].z)) + _2711;
        _2811 = _2991 * _2712;
    }
    else
    {
        _2805 = _2709;
        _2807 = _2710;
        _2809 = _2711;
        _2811 = _2712;
    }
    bool _3018;
    vec4 _2821;
    vec4 _2843;
    float _2845;
    float _2849;
    float _2850;
    float _2851;
    float _2852;
    bool _2862;
    for (;;)
    {
        _2821 = cbMatDynParam._m0[0u];
        float _2823 = roundEven(_2821.y);
        bool _2824 = _2823 == 3.0;
        float _2825 = log2(_2811);
        float _2832 = exp2(_2825 * cbSceneParam._m0[78u].x) * _2681;
        float _2833 = exp2(_2825 * cbSceneParam._m0[78u].y) * _2682;
        float _2834 = exp2(_2825 * cbSceneParam._m0[78u].z) * _2683;
        float _2841 = _797 + (-0.5);
        _2843 = cbMtdParam._m0[1u];
        _2845 = _2843.y * _2841;
        float _2848 = (_2823 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2849 = _2848 * (_2824 ? _2832 : (_2832 + (cbSceneParam._m0[72u].w * _2805)));
        _2850 = _2848 * (_2824 ? _2833 : (_2833 + (cbSceneParam._m0[72u].w * _2807)));
        _2851 = _2848 * (_2824 ? _2834 : (_2834 + (cbSceneParam._m0[72u].w * _2809)));
        _2852 = _2841 * 0.999000012874603271484375;
        _2862 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2862)
        {
            if ((cbInstanceData._m0[_846 + 7u].x + _2852) < 0.5)
            {
                _3018 = true;
                break;
            }
        }
        uint _2959 = _847 + uint(_2821.w);
        if ((cbInstanceData._m0[_2959].w < 1.0) && ((cbInstanceData._m0[_2959].w + _2852) < 0.5))
        {
            _3018 = true;
            break;
        }
        if ((_2845 + 1.0) < _2843.x)
        {
            _3018 = true;
            break;
        }
        _3018 = false;
        break;
    }
    float _3223;
    if (_3018)
    {
        discard_state = true;
        _3223 = 0.0;
    }
    else
    {
        _3223 = cbInstanceData._m0[_2684].w;
    }
    SV_Target.x = _2849;
    SV_Target.y = _2850;
    SV_Target.z = _2851;
    SV_Target.w = _3223;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2684].w;
    discard_exit();
}


