#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1268;
float _3934;
float _3935;
float _3936;
float _3937;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _252 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _258 = _252.x * cbMtdParam._m0[10u].x;
    float _259 = _252.y * cbMtdParam._m0[10u].y;
    float _260 = _252.z * cbMtdParam._m0[10u].z;
    vec4 _278 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _328 = cbMtdParam._m0[18u].y * texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x;
    float _339 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].x * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].y * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _328)) + 1.0;
    float _3946 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _340 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
    float _347 = (_340 * ((_278.x * cbMtdParam._m0[11u].x) - _258)) + _258;
    float _348 = (_340 * ((_278.y * cbMtdParam._m0[11u].y) - _259)) + _259;
    float _349 = (_340 * ((_278.z * cbMtdParam._m0[11u].z) - _260)) + _260;
    vec4 _367 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _394 = ((cbMtdParam._m0[17u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _328)) + 1.0;
    float _3957 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _395 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
    float _402 = (_395 * ((_367.x * cbMtdParam._m0[12u].x) - _347)) + _347;
    float _403 = (_395 * ((_367.y * cbMtdParam._m0[12u].y) - _348)) + _348;
    float _404 = (_395 * ((_367.z * cbMtdParam._m0[12u].z) - _349)) + _349;
    vec4 _421 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _446 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[18u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[18u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _328)) + 1.0;
    float _3968 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _447 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
    vec4 _475 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _483 = ((((_447 * ((_421.x * cbMtdParam._m0[13u].x) - _402)) + _402) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _475.x;
    float _486 = ((((_447 * ((_421.y * cbMtdParam._m0[13u].y) - _403)) + _403) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _475.y;
    float _489 = ((((_447 * ((_421.z * cbMtdParam._m0[13u].z) - _404)) + _404) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _475.z;
    vec4 _502 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _504 = _502.x;
    float _522 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _504) * _340) + _504;
    float _539 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _522) * _395) + _522;
    float _556 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _539) * _447) + _539;
    vec4 _569 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _571 = _569.x;
    float _572 = _569.y;
    float _575 = cbMtdParam._m0[17u].y * _569.z;
    vec4 _587 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _596 = (((cbMtdParam._m0[17u].x * _587.z) - _575) * _340) + _575;
    vec4 _609 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _621 = (((cbMtdParam._m0[16u].w * _609.z) - _596) * _395) + _596;
    vec4 _634 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _643 = (((cbMtdParam._m0[16u].z * _634.z) - _621) * _447) + _621;
    float _648 = ((_587.x - _571) * _340) + _571;
    float _649 = ((_587.y - _572) * _340) + _572;
    float _654 = ((_609.x - _648) * _395) + _648;
    float _655 = ((_609.y - _649) * _395) + _649;
    float _664 = ((((_634.x - _654) * _447) + _654) * 2.0) + (-1.0);
    float _666 = ((((_634.y - _655) * _447) + _655) * 2.0) + (-1.0);
    float _667 = dot(vec2(_664, _666), vec2(_664, _666));
    float _3979 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
    float _672 = sqrt(1.0 - (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0))));
    float _675 = fma(_672, _222 * NORMAL.x, fma(_666, _229 * TANGENT.x, (_215 * _207) * _664));
    float _678 = fma(_672, _222 * NORMAL.y, fma(_666, _229 * TANGENT.y, (_215 * _208) * _664));
    float _681 = fma(_672, _222 * NORMAL.z, fma(_666, _229 * TANGENT.z, (_215 * _209) * _664));
    float _685 = inversesqrt(dot(vec3(_675, _678, _681), vec3(_675, _678, _681)));
    float _686 = _685 * _675;
    float _687 = _685 * _678;
    float _688 = _685 * _681;
    float _3990 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _689 = isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0));
    float _4001 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _4012 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _4023 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _4034 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _693 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
    float _709 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _749 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _759 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _749);
    float _760 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _749);
    float _761 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _749);
    float _765 = inversesqrt(dot(vec3(_759, _760, _761), vec3(_759, _760, _761)));
    float _766 = _759 * _765;
    float _767 = _760 * _765;
    float _768 = _761 * _765;
    vec4 _773 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _775 = _773.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _947 = sqrt(((_759 * _759) + (_760 * _760)) + (_761 * _761));
        float _953 = (cbMatDynParam._m0[5u].x * _947) + cbMatDynParam._m0[5u].y;
        float _4045 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _954 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _958 = (cbMatDynParam._m0[5u].z * _947) + cbMatDynParam._m0[5u].w;
        float _4056 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) - _954)) + _954) < ((_775 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _786 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _787 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _805 = fma(_688, cbSceneParam._m0[5u].z, fma(_687, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _686));
    float _808 = fma(_688, cbSceneParam._m0[6u].z, fma(_687, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _686));
    float _811 = fma(_688, cbSceneParam._m0[7u].z, fma(_687, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _686));
    uint _824 = uint(roundEven(NORMAL.w)) * 13u;
    uint _825 = _824 + 9u;
    uint _826 = _825 + uint(cbMatDynParam._m0[0u].w);
    float _832 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0)))) * cbInstanceData._m0[_826].x;
    float _833 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0)))) * cbInstanceData._m0[_826].y;
    float _834 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0)))) * cbInstanceData._m0[_826].z;
    float _4067 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _835 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _4078 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _836 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _4089 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
    float _837 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _838 = 1.0 - _693;
    float _839 = _835 * _838;
    float _840 = _836 * _838;
    float _841 = _837 * _838;
    float _846 = (_835 + (-0.039999999105930328369140625)) * _693;
    float _847 = (_836 + (-0.039999999105930328369140625)) * _693;
    float _848 = (_837 + (-0.039999999105930328369140625)) * _693;
    float _849 = _846 + 0.039999999105930328369140625;
    float _851 = _847 + 0.039999999105930328369140625;
    float _852 = _848 + 0.039999999105930328369140625;
    vec4 _861 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _786, cbSceneParam._m0[86u].y * _787));
    float _864 = _861.x * TEXCOORD_5.w;
    float _865 = dot(vec3(_686, _687, _688), vec3(_766, _767, _768));
    float _868 = _865 * 2.0;
    float _872 = (_868 * _686) - _766;
    float _873 = (_868 * _687) - _767;
    float _874 = (_868 * _688) - _768;
    float _878 = abs(dot(vec3(_766, _767, _768), vec3(_686, _687, _688)));
    float _4100 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _880 = sqrt(_689);
    float _893 = exp2((_880 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_880 * 3.0));
    float _899 = (1.0 - _893) * ((_880 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _900 = _893 * _880;
    float _928 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _932 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _936 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1267;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _992 = fma(_936, cbModelParam._m0[26u].z, fma(_932, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _928));
        float _996 = fma(_936, cbModelParam._m0[27u].z, fma(_932, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _928));
        float _1000 = fma(_936, cbModelParam._m0[28u].z, fma(_932, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _928));
        float _1025 = _928 + _686;
        float _1026 = _932 + _687;
        float _1027 = _936 + _688;
        float _1037 = fma(_1027, cbModelParam._m0[26u].z, fma(_1026, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1025)) - _992;
        float _1038 = fma(_1027, cbModelParam._m0[27u].z, fma(_1026, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1025)) - _996;
        float _1039 = fma(_1027, cbModelParam._m0[28u].z, fma(_1026, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1025)) - _1000;
        float _1043 = inversesqrt(dot(vec3(_1037, _1038, _1039), vec3(_1037, _1038, _1039)));
        float _1056 = ((_1043 * _1037) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_992 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1057 = ((_1043 * _1038) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_996 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1058 = ((_1043 * _1039) / cbModelParam._m0[34u].z) + ((((((_1000 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1061 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1056, _1057, _1058), 0.0);
        vec4 _1068 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1056, _1057, _1058), 0.0);
        vec4 _1075 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1056, _1057, _1058), 0.0);
        vec4 _1082 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1056, _1057, _1058), 0.0);
        float _1095 = exp2((_1061.w + (-0.5)) * 20.0) * 2.0;
        float _1096 = _1095 * (_1061.x + (-0.5));
        float _1097 = _1095 * (_1061.y + (-0.5));
        float _1098 = _1095 * (_1061.z + (-0.5));
        float _1105 = exp2((_1068.w + (-0.5)) * 20.0) * 2.0;
        float _1106 = _1105 * (_1068.x + (-0.5));
        float _1107 = _1105 * (_1068.y + (-0.5));
        float _1108 = _1105 * (_1068.z + (-0.5));
        float _1115 = exp2((_1075.w + (-0.5)) * 20.0) * 2.0;
        float _1116 = _1115 * (_1075.x + (-0.5));
        float _1117 = _1115 * (_1075.y + (-0.5));
        float _1118 = _1115 * (_1075.z + (-0.5));
        float _1125 = exp2((_1082.w + (-0.5)) * 20.0) * 2.0;
        float _1126 = _1125 * (_1082.x + (-0.5));
        float _1127 = _1125 * (_1082.y + (-0.5));
        float _1128 = _1125 * (_1082.z + (-0.5));
        float _1129 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1130 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1131 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1132 = _1096 * 0.5;
        float _1133 = _1106 * 0.5;
        float _1134 = _1116 * 0.5;
        float _1135 = dot(vec3(_1132, _1133, _1134), vec3(_1132, _1133, _1134));
        float _1140 = (_1135 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1135);
        float _1149 = (dot(vec3(_686, _687, _688), vec3(_1140 * _1132, _1140 * _1133, _1140 * _1134)) + 1.0) * 0.5;
        float _4126 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1159 = sqrt(((_1133 * _1133) + (_1132 * _1132)) + (_1134 * _1134)) / (_1129 + 9.9999997473787516355514526367188e-06);
        float _4137 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1161 = _1160 * 2.0;
        float _1165 = (1.0 - _1160) / (_1160 + 1.0);
        float _4148 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1166 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _1175 = ((((1.0 - _1166) * (_1161 + 2.0)) * exp2(log2(isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * (_1161 + 1.0))) + _1166) * _1129;
        float _1176 = _1097 * 0.5;
        float _1177 = _1107 * 0.5;
        float _1178 = _1117 * 0.5;
        float _1179 = dot(vec3(_1176, _1177, _1178), vec3(_1176, _1177, _1178));
        float _1184 = (_1179 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1179);
        float _1192 = (dot(vec3(_686, _687, _688), vec3(_1184 * _1176, _1184 * _1177, _1184 * _1178)) + 1.0) * 0.5;
        float _4159 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1201 = sqrt(((_1177 * _1177) + (_1176 * _1176)) + (_1178 * _1178)) / (_1130 + 9.9999997473787516355514526367188e-06);
        float _4170 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1202 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1203 = _1202 * 2.0;
        float _1207 = (1.0 - _1202) / (_1202 + 1.0);
        float _4181 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1208 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1217 = ((((1.0 - _1208) * (_1203 + 2.0)) * exp2(log2(isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (_1203 + 1.0))) + _1208) * _1130;
        float _1218 = _1098 * 0.5;
        float _1219 = _1108 * 0.5;
        float _1220 = _1118 * 0.5;
        float _1221 = dot(vec3(_1218, _1219, _1220), vec3(_1218, _1219, _1220));
        float _1226 = (_1221 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1221);
        float _1234 = (dot(vec3(_686, _687, _688), vec3(_1226 * _1218, _1226 * _1219, _1226 * _1220)) + 1.0) * 0.5;
        float _4192 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1243 = sqrt(((_1219 * _1219) + (_1218 * _1218)) + (_1220 * _1220)) / (_1131 + 9.9999997473787516355514526367188e-06);
        float _4203 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
        float _1245 = _1244 * 2.0;
        float _1249 = (1.0 - _1244) / (_1244 + 1.0);
        float _4214 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1250 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
        float _1259 = ((((1.0 - _1250) * (_1245 + 2.0)) * exp2(log2(isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (_1245 + 1.0))) + _1250) * _1131;
        _1267 = _1098;
        _1269 = _1097;
        _1270 = _1096;
        _1271 = _1108;
        _1272 = _1107;
        _1273 = _1106;
        _1274 = _1118;
        _1275 = _1117;
        _1276 = _1116;
        _1277 = _1131;
        _1278 = _1130;
        _1279 = _1129;
        _1280 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0)));
        _1281 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0)));
        _1282 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0)));
    }
    else
    {
        _1267 = _1268;
        _1269 = _1268;
        _1270 = _1268;
        _1271 = _1268;
        _1272 = _1268;
        _1273 = _1268;
        _1274 = _1268;
        _1275 = _1268;
        _1276 = _1268;
        _1277 = _1268;
        _1278 = _1268;
        _1279 = _1268;
        _1280 = 0.0;
        _1281 = 0.0;
        _1282 = 0.0;
    }
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1311 = fma(_936, cbModelParam._m0[30u].z, fma(_932, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _928));
        float _1315 = fma(_936, cbModelParam._m0[31u].z, fma(_932, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _928));
        float _1319 = fma(_936, cbModelParam._m0[32u].z, fma(_932, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _928));
        float _1342 = _928 + _686;
        float _1343 = _932 + _687;
        float _1344 = _936 + _688;
        float _1354 = fma(_1344, cbModelParam._m0[30u].z, fma(_1343, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1342)) - _1311;
        float _1355 = fma(_1344, cbModelParam._m0[31u].z, fma(_1343, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1342)) - _1315;
        float _1356 = fma(_1344, cbModelParam._m0[32u].z, fma(_1343, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1342)) - _1319;
        float _1360 = inversesqrt(dot(vec3(_1354, _1355, _1356), vec3(_1354, _1355, _1356)));
        float _1373 = ((_1360 * _1354) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1311 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1374 = ((_1360 * _1355) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1315 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1375 = ((_1360 * _1356) / cbModelParam._m0[35u].z) + ((((((_1319 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1377 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1373, _1374, _1375), 0.0);
        vec4 _1384 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1373, _1374, _1375), 0.0);
        vec4 _1391 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1373, _1374, _1375), 0.0);
        vec4 _1398 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1373, _1374, _1375), 0.0);
        float _1410 = exp2((_1377.w + (-0.5)) * 20.0) * 2.0;
        float _1411 = _1410 * (_1377.x + (-0.5));
        float _1412 = _1410 * (_1377.y + (-0.5));
        float _1413 = _1410 * (_1377.z + (-0.5));
        float _1420 = exp2((_1384.w + (-0.5)) * 20.0) * 2.0;
        float _1421 = _1420 * (_1384.x + (-0.5));
        float _1422 = _1420 * (_1384.y + (-0.5));
        float _1423 = _1420 * (_1384.z + (-0.5));
        float _1430 = exp2((_1391.w + (-0.5)) * 20.0) * 2.0;
        float _1431 = _1430 * (_1391.x + (-0.5));
        float _1432 = _1430 * (_1391.y + (-0.5));
        float _1433 = _1430 * (_1391.z + (-0.5));
        float _1440 = exp2((_1398.w + (-0.5)) * 20.0) * 2.0;
        float _1441 = _1440 * (_1398.x + (-0.5));
        float _1442 = _1440 * (_1398.y + (-0.5));
        float _1443 = _1440 * (_1398.z + (-0.5));
        float _1444 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1445 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1446 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1447 = _1411 * 0.5;
        float _1448 = _1421 * 0.5;
        float _1449 = _1431 * 0.5;
        float _1450 = dot(vec3(_1447, _1448, _1449), vec3(_1447, _1448, _1449));
        float _1455 = (_1450 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1450);
        float _1463 = (dot(vec3(_686, _687, _688), vec3(_1455 * _1447, _1455 * _1448, _1455 * _1449)) + 1.0) * 0.5;
        float _4255 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1472 = sqrt(((_1448 * _1448) + (_1447 * _1447)) + (_1449 * _1449)) / (_1444 + 9.9999997473787516355514526367188e-06);
        float _4266 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1473 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _1474 = _1473 * 2.0;
        float _1478 = (1.0 - _1473) / (_1473 + 1.0);
        float _4277 = isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0));
        float _1479 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _1488 = ((((1.0 - _1479) * (_1474 + 2.0)) * exp2(log2(isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (_1474 + 1.0))) + _1479) * _1444;
        float _1489 = _1412 * 0.5;
        float _1490 = _1422 * 0.5;
        float _1491 = _1432 * 0.5;
        float _1492 = dot(vec3(_1489, _1490, _1491), vec3(_1489, _1490, _1491));
        float _1497 = (_1492 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1492);
        float _1505 = (dot(vec3(_686, _687, _688), vec3(_1497 * _1489, _1497 * _1490, _1497 * _1491)) + 1.0) * 0.5;
        float _4288 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1514 = sqrt(((_1490 * _1490) + (_1489 * _1489)) + (_1491 * _1491)) / (_1445 + 9.9999997473787516355514526367188e-06);
        float _4299 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1515 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _1516 = _1515 * 2.0;
        float _1520 = (1.0 - _1515) / (_1515 + 1.0);
        float _4310 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1521 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _1530 = ((((1.0 - _1521) * (_1516 + 2.0)) * exp2(log2(isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_1516 + 1.0))) + _1521) * _1445;
        float _1531 = _1413 * 0.5;
        float _1532 = _1423 * 0.5;
        float _1533 = _1433 * 0.5;
        float _1534 = dot(vec3(_1531, _1532, _1533), vec3(_1531, _1532, _1533));
        float _1539 = (_1534 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1534);
        float _1547 = (dot(vec3(_686, _687, _688), vec3(_1539 * _1531, _1539 * _1532, _1539 * _1533)) + 1.0) * 0.5;
        float _4321 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1556 = sqrt(((_1532 * _1532) + (_1531 * _1531)) + (_1533 * _1533)) / (_1446 + 9.9999997473787516355514526367188e-06);
        float _4332 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1557 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _1558 = _1557 * 2.0;
        float _1562 = (1.0 - _1557) / (_1557 + 1.0);
        float _4343 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1563 = isnan(1.0) ? _4343 : (isnan(_4343) ? 1.0 : min(_4343, 1.0));
        float _1572 = ((((1.0 - _1563) * (_1558 + 2.0)) * exp2(log2(isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * (_1558 + 1.0))) + _1563) * _1446;
        _1580 = _1413;
        _1581 = _1412;
        _1582 = _1411;
        _1583 = _1423;
        _1584 = _1422;
        _1585 = _1421;
        _1586 = _1433;
        _1587 = _1432;
        _1588 = _1431;
        _1589 = _1446;
        _1590 = _1445;
        _1591 = _1444;
        _1592 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)));
        _1593 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0)));
        _1594 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0)));
    }
    else
    {
        _1580 = _1268;
        _1581 = _1268;
        _1582 = _1268;
        _1583 = _1268;
        _1584 = _1268;
        _1585 = _1268;
        _1586 = _1268;
        _1587 = _1268;
        _1588 = _1268;
        _1589 = _1268;
        _1590 = _1268;
        _1591 = _1268;
        _1592 = 0.0;
        _1593 = 0.0;
        _1594 = 0.0;
    }
    float _1604 = (cbModelParam._m0[1u].x * (_1592 - _1280)) + _1280;
    float _1605 = (cbModelParam._m0[1u].x * (_1593 - _1281)) + _1281;
    float _1606 = (cbModelParam._m0[1u].x * (_1594 - _1282)) + _1282;
    float _1627 = fma(_1606, cbSceneParam._m0[89u].z, fma(_1605, cbSceneParam._m0[89u].y, _1604 * cbSceneParam._m0[89u].x));
    float _1630 = fma(_1606, cbSceneParam._m0[90u].z, fma(_1605, cbSceneParam._m0[90u].y, _1604 * cbSceneParam._m0[90u].x));
    float _1633 = fma(_1606, cbSceneParam._m0[91u].z, fma(_1605, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1604));
    float _1648 = _872 * 0.5;
    float _1649 = _873 * 0.5;
    float _1650 = _874 * 0.5;
    float _1651 = dot(vec4(_1648, _1649, _1650, 1.0), vec4(_1582, _1585, _1588, _1591));
    float _1654 = dot(vec4(_1648, _1649, _1650, 1.0), vec4(_1581, _1584, _1587, _1590));
    float _1657 = dot(vec4(_1648, _1649, _1650, 1.0), vec4(_1580, _1583, _1586, _1589));
    float _1691;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1664 = dot(vec4(_1648, _1649, _1650, 1.0), vec4(_1267, _1271, _1274, _1277));
        float _1668 = dot(vec4(_1648, _1649, _1650, 1.0), vec4(_1269, _1272, _1275, _1278));
        float _1672 = dot(vec4(_1648, _1649, _1650, 1.0), vec4(_1270, _1273, _1276, _1279));
        float _1679 = dot(vec4(cbModelParam._m0[39u]), vec4(_1648, _1649, _1650, 1.0));
        _1691 = dot(vec3(isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0)), isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0)), isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1679) ? 0.0 : (isnan(0.0) ? _1679 : max(0.0, _1679))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1691 = 1.0;
    }
    float _1702;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1693 = dot(vec4(cbModelParam._m0[40u]), vec4(_1648, _1649, _1650, 1.0));
        _1702 = dot(vec3(isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0)), isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0)), isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1693) ? 0.0 : (isnan(0.0) ? _1693 : max(0.0, _1693))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1702 = 1.0;
    }
    float _1706 = (_1702 * cbModelParam._m0[1u].x) + (_1691 * (1.0 - cbModelParam._m0[1u].x));
    float _1716 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _689);
    float _1717 = isnan(_1716) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1716 : min(cbModelParam._m0[25u].z, _1716));
    float _1797;
    float _1799;
    float _1801;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1764 = fma(_936, cbModelParam._m0[13u].z, fma(_932, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _928)) + cbModelParam._m0[13u].w;
        float _1768 = fma(_936, cbModelParam._m0[14u].z, fma(_932, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _928)) + cbModelParam._m0[14u].w;
        float _1772 = fma(_936, cbModelParam._m0[15u].z, fma(_932, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _928)) + cbModelParam._m0[15u].w;
        float _1775 = fma(_874, cbModelParam._m0[13u].z, fma(_873, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _872));
        float _1778 = fma(_874, cbModelParam._m0[14u].z, fma(_873, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _872));
        float _1781 = fma(_874, cbModelParam._m0[15u].z, fma(_873, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _872));
        float _1809;
        if (_1775 > 0.0)
        {
            _1809 = abs((1.0 - _1764) / _1775);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1775 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1764 + 1.0) / _1775);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1809 = frontier_phi_17_15_ladder;
        }
        float _1982;
        if (_1778 > 0.0)
        {
            _1982 = abs((1.0 - _1768) / _1778);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1778 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1768 + 1.0) / _1778);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1982 = frontier_phi_26_22_ladder;
        }
        float _2277;
        if (_1781 > 0.0)
        {
            _2277 = abs((1.0 - _1772) / _1781);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1781 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1772 + 1.0) / _1781);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2277 = frontier_phi_38_33_ladder;
        }
        float _2279 = isnan(_1982) ? _1809 : (isnan(_1809) ? _1982 : min(_1809, _1982));
        float _2280 = isnan(_2277) ? _2279 : (isnan(_2279) ? _2277 : min(_2279, _2277));
        float _2284 = (_2280 * _1775) + _1764;
        float _2285 = (_2280 * _1778) + _1768;
        float _2286 = (_2280 * _1781) + _1772;
        float _2287 = _2280 * 9.9999997473787516355514526367188e-05;
        float _2289 = (-1.0) - _2287;
        float _2291 = _2287 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2286 > _2291) || ((_2286 < _2289) || ((_2285 > _2291) || ((_2285 < _2289) || ((_2284 < _2289) || (_2284 > _2291))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2431 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2286, cbModelParam._m0[9u].z, fma(_2285, cbModelParam._m0[9u].y, _2284 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2286, cbModelParam._m0[10u].z, fma(_2285, cbModelParam._m0[10u].y, _2284 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2286, cbModelParam._m0[11u].z, fma(_2285, cbModelParam._m0[11u].y, _2284 * cbModelParam._m0[11u].x))), _1717);
            frontier_phi_16_38_ladder = _2431.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2431.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2431.x * cbModelParam._m0[1u].y;
        }
        _1797 = frontier_phi_16_38_ladder_2;
        _1799 = frontier_phi_16_38_ladder_1;
        _1801 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1785 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_872, _873, _874), _1717);
        _1797 = _1785.x * cbModelParam._m0[1u].y;
        _1799 = _1785.y * cbModelParam._m0[1u].y;
        _1801 = _1785.z * cbModelParam._m0[1u].y;
    }
    float _1805 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _689);
    float _1806 = isnan(_1805) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1805 : min(cbModelParam._m0[25u].w, _1805));
    float _1897;
    float _1899;
    float _1901;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1861 = fma(_936, cbModelParam._m0[21u].z, fma(_932, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _928)) + cbModelParam._m0[21u].w;
        float _1865 = fma(_936, cbModelParam._m0[22u].z, fma(_932, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _928)) + cbModelParam._m0[22u].w;
        float _1869 = fma(_936, cbModelParam._m0[23u].z, fma(_932, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _928)) + cbModelParam._m0[23u].w;
        float _1872 = fma(_874, cbModelParam._m0[21u].z, fma(_873, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _872));
        float _1875 = fma(_874, cbModelParam._m0[22u].z, fma(_873, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _872));
        float _1878 = fma(_874, cbModelParam._m0[23u].z, fma(_873, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _872));
        float _1987;
        if (_1872 > 0.0)
        {
            _1987 = abs((1.0 - _1861) / _1872);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1872 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1861 + 1.0) / _1872);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1987 = frontier_phi_28_24_ladder;
        }
        float _2304;
        if (_1875 > 0.0)
        {
            _2304 = abs((1.0 - _1865) / _1875);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1875 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1865 + 1.0) / _1875);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2304 = frontier_phi_40_35_ladder;
        }
        float _2642;
        if (_1878 > 0.0)
        {
            _2642 = abs((1.0 - _1869) / _1878);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1878 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1869 + 1.0) / _1878);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2642 = frontier_phi_50_47_ladder;
        }
        float _2644 = isnan(_2304) ? _1987 : (isnan(_1987) ? _2304 : min(_1987, _2304));
        float _2645 = isnan(_2642) ? _2644 : (isnan(_2644) ? _2642 : min(_2644, _2642));
        float _2649 = (_2645 * _1872) + _1861;
        float _2650 = (_2645 * _1875) + _1865;
        float _2651 = (_2645 * _1878) + _1869;
        float _2652 = _2645 * 9.9999997473787516355514526367188e-05;
        float _2653 = (-1.0) - _2652;
        float _2655 = _2652 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2651 > _2655) || ((_2651 < _2653) || ((_2650 > _2655) || ((_2650 < _2653) || ((_2649 < _2653) || (_2649 > _2655))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2773 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2651, cbModelParam._m0[17u].z, fma(_2650, cbModelParam._m0[17u].y, _2649 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2651, cbModelParam._m0[18u].z, fma(_2650, cbModelParam._m0[18u].y, _2649 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2651, cbModelParam._m0[19u].z, fma(_2650, cbModelParam._m0[19u].y, _2649 * cbModelParam._m0[19u].x))), _1806);
            frontier_phi_25_50_ladder = _2773.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2773.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2773.x * cbModelParam._m0[1u].z;
        }
        _1897 = frontier_phi_25_50_ladder_2;
        _1899 = frontier_phi_25_50_ladder_1;
        _1901 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1881 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_872, _873, _874), _1806);
        _1897 = _1881.x * cbModelParam._m0[1u].z;
        _1899 = _1881.y * cbModelParam._m0[1u].z;
        _1901 = _1881.z * cbModelParam._m0[1u].z;
    }
    float _1914 = (((_899 * _849) + _900) * _864) * ((cbModelParam._m0[1u].w * (_1897 - _1797)) + _1797);
    float _1916 = (((_899 * _851) + _900) * _864) * ((cbModelParam._m0[1u].w * (_1899 - _1799)) + _1799);
    float _1918 = (((_899 * _852) + _900) * _864) * ((cbModelParam._m0[1u].w * (_1901 - _1801)) + _1801);
    float _1921 = fma(_1918, cbSceneParam._m0[89u].z, fma(_1916, cbSceneParam._m0[89u].y, _1914 * cbSceneParam._m0[89u].x));
    float _1924 = fma(_1918, cbSceneParam._m0[90u].z, fma(_1916, cbSceneParam._m0[90u].y, _1914 * cbSceneParam._m0[90u].x));
    float _1927 = fma(_1918, cbSceneParam._m0[91u].z, fma(_1916, cbSceneParam._m0[91u].y, _1914 * cbSceneParam._m0[91u].x));
    float _1961 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1965 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1969 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1973 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1974 = _1961 / _1973;
    float _1975 = _1965 / _1973;
    float _1976 = _1969 / _1973;
    float _2123;
    float _2124;
    float _2125;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2003 = ((uint(_1976 > cbSceneParam._m0[59u].y) + uint(_1976 > cbSceneParam._m0[59u].x)) + uint(_1976 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2004 = _2003 + 43u;
        uint _2012 = _2003 + 44u;
        uint _2020 = _2003 + 45u;
        uint _2028 = _2003 + 46u;
        float _2039 = fma(_1973, cbSceneParam._m0[_2004].w, fma(_1969, cbSceneParam._m0[_2004].z, fma(_1965, cbSceneParam._m0[_2004].y, _1961 * cbSceneParam._m0[_2004].x)));
        float _2043 = fma(_1973, cbSceneParam._m0[_2012].w, fma(_1969, cbSceneParam._m0[_2012].z, fma(_1965, cbSceneParam._m0[_2012].y, _1961 * cbSceneParam._m0[_2012].x)));
        float _2051 = fma(_1973, cbSceneParam._m0[_2028].w, fma(_1969, cbSceneParam._m0[_2028].z, fma(_1965, cbSceneParam._m0[_2028].y, _1961 * cbSceneParam._m0[_2028].x)));
        float _2056 = cbSceneParam._m0[33u].z * _2051;
        float _2058 = cbSceneParam._m0[33u].w * _2051;
        float _2061 = fma(_1973, cbSceneParam._m0[_2020].w, fma(_1969, cbSceneParam._m0[_2020].z, fma(_1965, cbSceneParam._m0[_2020].y, _1961 * cbSceneParam._m0[_2020].x))) / _2051;
        float _2109 = (cbSceneParam._m0[33u].x - sqrt(((_1975 * _1975) + (_1974 * _1974)) + (_1976 * _1976))) * cbSceneParam._m0[33u].y;
        float _4469 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
        float _2116 = (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2056 + _2039) / _2051, (_2058 + _2043) / _2051), _2061), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2058 + _2039) / _2051, (_2043 - _2056) / _2051), _2061), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2039 - _2056) / _2051, (_2043 - _2058) / _2051), _2061), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2039 - _2058) / _2051, (_2056 + _2043) / _2051), _2061), 0.0)).x), vec4(0.25)));
        _2123 = 1.0 - (_2116 * cbSceneParam._m0[34u].x);
        _2124 = 1.0 - (_2116 * cbSceneParam._m0[34u].y);
        _2125 = 1.0 - (_2116 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2123 = 1.0;
        _2124 = 1.0;
        _2125 = 1.0;
    }
    float _2189;
    float _2191;
    float _2193;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2177 = fma(_1973, cbSceneParam._m0[63u].w, fma(_1969, cbSceneParam._m0[63u].z, fma(_1965, cbSceneParam._m0[63u].y, _1961 * cbSceneParam._m0[63u].x)));
        float _2178 = fma(_1973, cbSceneParam._m0[60u].w, fma(_1969, cbSceneParam._m0[60u].z, fma(_1965, cbSceneParam._m0[60u].y, _1961 * cbSceneParam._m0[60u].x))) / _2177;
        float _2179 = fma(_1973, cbSceneParam._m0[61u].w, fma(_1969, cbSceneParam._m0[61u].z, fma(_1965, cbSceneParam._m0[61u].y, _1961 * cbSceneParam._m0[61u].x))) / _2177;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2178 >= cbSceneParam._m0[64u].x) && (_2179 >= cbSceneParam._m0[64u].y)) && (_2178 <= cbSceneParam._m0[64u].z)) && (_2179 <= cbSceneParam._m0[64u].w))
        {
            float _2317 = fma(_1973, cbSceneParam._m0[62u].w, fma(_1969, cbSceneParam._m0[62u].z, fma(_1965, cbSceneParam._m0[62u].y, _1961 * cbSceneParam._m0[62u].x))) / _2177;
            float _2321 = isnan(cbSceneParam._m0[41u].w) ? _2317 : (isnan(_2317) ? cbSceneParam._m0[41u].w : max(_2317, cbSceneParam._m0[41u].w));
            float _2364 = (cbSceneParam._m0[33u].x - sqrt(((_1975 * _1975) + (_1974 * _1974)) + (_1976 * _1976))) * cbSceneParam._m0[33u].y;
            float _4485 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
            float _2371 = (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2178, cbSceneParam._m0[33u].w + _2179), _2321), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2178, _2179 - cbSceneParam._m0[33u].z), _2321), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2178 - cbSceneParam._m0[33u].z, _2179 - cbSceneParam._m0[33u].w), _2321), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2178 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2179), _2321), 0.0)).x), vec4(0.25)));
            float _2375 = 1.0 - (_2371 * cbSceneParam._m0[34u].x);
            float _2376 = 1.0 - (_2371 * cbSceneParam._m0[34u].y);
            float _2377 = 1.0 - (_2371 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2377) ? _2125 : (isnan(_2125) ? _2377 : min(_2125, _2377));
            frontier_phi_37_36_ladder_1 = isnan(_2376) ? _2124 : (isnan(_2124) ? _2376 : min(_2124, _2376));
            frontier_phi_37_36_ladder_2 = isnan(_2375) ? _2123 : (isnan(_2123) ? _2375 : min(_2123, _2375));
        }
        else
        {
            frontier_phi_37_36_ladder = _2125;
            frontier_phi_37_36_ladder_1 = _2124;
            frontier_phi_37_36_ladder_2 = _2123;
        }
        _2189 = frontier_phi_37_36_ladder_2;
        _2191 = frontier_phi_37_36_ladder_1;
        _2193 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2189 = _2123;
        _2191 = _2124;
        _2193 = _2125;
    }
    uvec4 _2198 = floatBitsToUint(cbInstanceData._m0[_824 + 5u]);
    uint _2200 = _2198.x * 14u;
    uint _2201 = _2200 + 13u;
    float _2208 = _864 + (-1.0);
    float _2213 = (cbLight._m0[_2201].x * _2208) + 1.0;
    float _2214 = (cbLight._m0[_2201].y * _2208) + 1.0;
    float _2215 = (cbLight._m0[_2201].z * _2208) + 1.0;
    float _2216 = (cbLight._m0[_2201].w * _2208) + 1.0;
    uint _2217 = _2200 + 5u;
    float _2223 = isnan(1.0) ? _2214 : (isnan(_2214) ? 1.0 : min(_2214, 1.0));
    uint _2227 = _2200 + 4u;
    float _2236 = isnan(1.0) ? _2213 : (isnan(_2213) ? 1.0 : min(_2213, 1.0));
    uint _2240 = _2200 | 1u;
    float _2251 = dot(vec3(cbLight._m0[_2200].xyz), vec3(_686, _687, _688));
    float _2254 = dot(vec3(cbLight._m0[_2240].xyz), vec3(_686, _687, _688));
    float _4521 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
    float _4532 = isnan(0.0) ? _2254 : (isnan(_2254) ? 0.0 : max(_2254, 0.0));
    float _2259 = (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0))) * 0.3183098733425140380859375;
    float _2261 = (isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0))) * 0.3183098733425140380859375;
    float _2268 = ((cbLight._m0[_2217].x * _2223) * _2261) + (((cbLight._m0[_2227].x * _2189) * _2236) * _2259);
    float _2269 = ((_2223 * cbLight._m0[_2217].y) * _2261) + (((cbLight._m0[_2227].y * _2191) * _2236) * _2259);
    float _2270 = ((_2223 * cbLight._m0[_2217].z) * _2261) + (((cbLight._m0[_2227].z * _2193) * _2236) * _2259);
    uvec4 _2274 = floatBitsToUint(cbLight._m0[_2200 + 12u]);
    bool _2276 = _2274.x == 0u;
    float _2378;
    float _2380;
    float _2382;
    if (_2276)
    {
        _2378 = _2268;
        _2380 = _2269;
        _2382 = _2270;
    }
    else
    {
        uint _2386 = _2200 + 6u;
        float _2402 = (dot(vec3(cbLight._m0[_2200 + 2u].xyz), vec3(_686, _687, _688)) * 0.5) + 0.5;
        float _2403 = _2402 * _2402;
        float _4543 = isnan(0.0) ? _2403 : (isnan(_2403) ? 0.0 : max(_2403, 0.0));
        float _2404 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
        float _2405 = isnan(1.0) ? _2215 : (isnan(_2215) ? 1.0 : min(_2215, 1.0));
        _2378 = (((cbLight._m0[_2386].x * 0.3183098733425140380859375) * _2404) * _2405) + _2268;
        _2380 = (((cbLight._m0[_2386].y * 0.3183098733425140380859375) * _2404) * _2405) + _2269;
        _2382 = (((cbLight._m0[_2386].z * 0.3183098733425140380859375) * _2404) * _2405) + _2270;
    }
    bool _2385 = _2274.y == 0u;
    float _2440;
    float _2442;
    float _2444;
    if (_2385)
    {
        _2440 = _2378;
        _2442 = _2380;
        _2444 = _2382;
    }
    else
    {
        uint _2613 = _2200 + 7u;
        float _2629 = (dot(vec3(cbLight._m0[_2200 + 3u].xyz), vec3(_686, _687, _688)) * 0.5) + 0.5;
        float _2630 = _2629 * _2629;
        float _4559 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0));
        float _2631 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
        float _2632 = isnan(1.0) ? _2216 : (isnan(_2216) ? 1.0 : min(_2216, 1.0));
        _2440 = (((cbLight._m0[_2613].x * 0.3183098733425140380859375) * _2631) * _2632) + _2378;
        _2442 = (((cbLight._m0[_2613].y * 0.3183098733425140380859375) * _2631) * _2632) + _2380;
        _2444 = (((cbLight._m0[_2613].z * 0.3183098733425140380859375) * _2631) * _2632) + _2382;
    }
    uint _2447 = _2200 + 8u;
    float _2460 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2200].w)) * _689) * 0.949999988079071044921875);
    float _2461 = _2460 * _2460;
    float _2462 = cbLight._m0[_2200].x + _766;
    float _2463 = cbLight._m0[_2200].y + _767;
    float _2464 = cbLight._m0[_2200].z + _768;
    float _2468 = inversesqrt(dot(vec3(_2462, _2463, _2464), vec3(_2462, _2463, _2464)));
    float _2469 = _2468 * _2462;
    float _2470 = _2468 * _2463;
    float _2471 = _2468 * _2464;
    float _2472 = dot(vec3(_686, _687, _688), vec3(cbLight._m0[_2200].xyz));
    float _4575 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
    float _2475 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
    float _4586 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _2476 = isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0));
    float _2477 = dot(vec3(_686, _687, _688), vec3(_2469, _2470, _2471));
    float _4597 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
    float _2480 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
    float _2481 = dot(vec3(cbLight._m0[_2200].xyz), vec3(_2469, _2470, _2471));
    float _4608 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
    float _2485 = _2461 * _2461;
    float _2489 = ((_2480 * _2480) * (_2485 + (-1.0))) + 1.0;
    float _2497 = exp2(log2(1.0 - (isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0)))) * 5.0);
    float _2498 = 0.959999978542327880859375 - _846;
    float _2500 = 0.959999978542327880859375 - _847;
    float _2501 = 0.959999978542327880859375 - _848;
    float _2508 = 1.0 - _2461;
    float _2519 = (0.5 / (((_2476 * ((_2475 * _2508) + _2461)) + 9.9999999392252902907785028219223e-09) + (((_2476 * _2508) + _2461) * _2475))) * _2475;
    float _4619 = isnan(0.0) ? _2519 : (isnan(_2519) ? 0.0 : max(_2519, 0.0));
    float _2521 = (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0))) * (_2485 / ((_2489 * _2489) * 3.141590118408203125));
    uint _2535 = _2200 + 9u;
    float _2546 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2240].w)) * _689) * 0.949999988079071044921875);
    float _2547 = _2546 * _2546;
    float _2548 = cbLight._m0[_2240].x + _766;
    float _2549 = cbLight._m0[_2240].y + _767;
    float _2550 = cbLight._m0[_2240].z + _768;
    float _2554 = inversesqrt(dot(vec3(_2548, _2549, _2550), vec3(_2548, _2549, _2550)));
    float _2555 = _2554 * _2548;
    float _2556 = _2554 * _2549;
    float _2557 = _2554 * _2550;
    float _2558 = dot(vec3(_686, _687, _688), vec3(cbLight._m0[_2240].xyz));
    float _4630 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
    float _2561 = isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0));
    float _2562 = dot(vec3(_686, _687, _688), vec3(_2555, _2556, _2557));
    float _4641 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
    float _2565 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
    float _2566 = dot(vec3(cbLight._m0[_2240].xyz), vec3(_2555, _2556, _2557));
    float _4652 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
    float _2570 = _2547 * _2547;
    float _2574 = ((_2565 * _2565) * (_2570 + (-1.0))) + 1.0;
    float _2581 = exp2(log2(1.0 - (isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0)))) * 5.0);
    float _2588 = 1.0 - _2547;
    float _2598 = (0.5 / (((_2476 * ((_2561 * _2588) + _2547)) + 9.9999999392252902907785028219223e-09) + (((_2476 * _2588) + _2547) * _2561))) * _2561;
    float _4663 = isnan(0.0) ? _2598 : (isnan(_2598) ? 0.0 : max(_2598, 0.0));
    float _2600 = (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0))) * (_2570 / ((_2574 * _2574) * 3.141590118408203125));
    float _2610 = (((((_2581 * _2498) + _849) * cbLight._m0[_2535].x) * _2600) * _2223) + ((((cbLight._m0[_2447].x * _2189) * ((_2497 * _2498) + _849)) * _2521) * _2236);
    float _2611 = (((((_2581 * _2500) + _851) * cbLight._m0[_2535].y) * _2600) * _2223) + ((((cbLight._m0[_2447].y * _2191) * ((_2497 * _2500) + _851)) * _2521) * _2236);
    float _2612 = (((((_2581 * _2501) + _852) * cbLight._m0[_2535].z) * _2600) * _2223) + ((((cbLight._m0[_2447].z * _2193) * ((_2497 * _2501) + _852)) * _2521) * _2236);
    float _2668;
    float _2670;
    float _2672;
    if (_2276)
    {
        _2668 = _2610;
        _2670 = _2611;
        _2672 = _2612;
    }
    else
    {
        uint _2674 = _2200 + 2u;
        uint _2678 = _2200 + 10u;
        float _2692 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2674].w)) * _689) * 0.949999988079071044921875);
        float _2693 = _2692 * _2692;
        float _2694 = cbLight._m0[_2674].x + _766;
        float _2695 = cbLight._m0[_2674].y + _767;
        float _2696 = cbLight._m0[_2674].z + _768;
        float _2700 = inversesqrt(dot(vec3(_2694, _2695, _2696), vec3(_2694, _2695, _2696)));
        float _2701 = _2700 * _2694;
        float _2702 = _2700 * _2695;
        float _2703 = _2700 * _2696;
        float _2704 = dot(vec3(_686, _687, _688), vec3(cbLight._m0[_2674].xyz));
        float _4674 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
        float _2707 = isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0));
        float _2708 = dot(vec3(_686, _687, _688), vec3(_2701, _2702, _2703));
        float _4685 = isnan(0.0) ? _2708 : (isnan(_2708) ? 0.0 : max(_2708, 0.0));
        float _2711 = isnan(1.0) ? _4685 : (isnan(_4685) ? 1.0 : min(_4685, 1.0));
        float _2712 = dot(vec3(cbLight._m0[_2674].xyz), vec3(_2701, _2702, _2703));
        float _4696 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
        float _2716 = _2693 * _2693;
        float _2720 = ((_2711 * _2711) * (_2716 + (-1.0))) + 1.0;
        float _2727 = exp2(log2(1.0 - (isnan(1.0) ? _4696 : (isnan(_4696) ? 1.0 : min(_4696, 1.0)))) * 5.0);
        float _2734 = 1.0 - _2693;
        float _2744 = (0.5 / (((_2476 * ((_2707 * _2734) + _2693)) + 9.9999999392252902907785028219223e-09) + (((_2476 * _2734) + _2693) * _2707))) * _2707;
        float _4707 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
        float _2746 = (isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0))) * (_2716 / ((_2720 * _2720) * 3.141590118408203125));
        float _2747 = isnan(1.0) ? _2215 : (isnan(_2215) ? 1.0 : min(_2215, 1.0));
        _2668 = (((((_2727 * _2498) + _849) * cbLight._m0[_2678].x) * _2746) * _2747) + _2610;
        _2670 = (((((_2727 * _2500) + _851) * cbLight._m0[_2678].y) * _2746) * _2747) + _2611;
        _2672 = (((((_2727 * _2501) + _852) * cbLight._m0[_2678].z) * _2746) * _2747) + _2612;
    }
    float _2778;
    float _2780;
    float _2782;
    if (_2385)
    {
        _2778 = _2668;
        _2780 = _2670;
        _2782 = _2672;
    }
    else
    {
        uint _2789 = _2200 + 3u;
        uint _2793 = _2200 + 11u;
        float _2807 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2789].w)) * _689) * 0.949999988079071044921875);
        float _2808 = _2807 * _2807;
        float _2809 = cbLight._m0[_2789].x + _766;
        float _2810 = cbLight._m0[_2789].y + _767;
        float _2811 = cbLight._m0[_2789].z + _768;
        float _2815 = inversesqrt(dot(vec3(_2809, _2810, _2811), vec3(_2809, _2810, _2811)));
        float _2816 = _2815 * _2809;
        float _2817 = _2815 * _2810;
        float _2818 = _2815 * _2811;
        float _2819 = dot(vec3(_686, _687, _688), vec3(cbLight._m0[_2789].xyz));
        float _4723 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
        float _2822 = isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0));
        float _2823 = dot(vec3(_686, _687, _688), vec3(_2816, _2817, _2818));
        float _4734 = isnan(0.0) ? _2823 : (isnan(_2823) ? 0.0 : max(_2823, 0.0));
        float _2826 = isnan(1.0) ? _4734 : (isnan(_4734) ? 1.0 : min(_4734, 1.0));
        float _2827 = dot(vec3(cbLight._m0[_2789].xyz), vec3(_2816, _2817, _2818));
        float _4745 = isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0));
        float _2831 = _2808 * _2808;
        float _2835 = ((_2826 * _2826) * (_2831 + (-1.0))) + 1.0;
        float _2842 = exp2(log2(1.0 - (isnan(1.0) ? _4745 : (isnan(_4745) ? 1.0 : min(_4745, 1.0)))) * 5.0);
        float _2849 = 1.0 - _2808;
        float _2859 = (0.5 / (((_2476 * ((_2822 * _2849) + _2808)) + 9.9999999392252902907785028219223e-09) + (((_2476 * _2849) + _2808) * _2822))) * _2822;
        float _4756 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
        float _2861 = (isnan(1.0) ? _4756 : (isnan(_4756) ? 1.0 : min(_4756, 1.0))) * (_2831 / ((_2835 * _2835) * 3.141590118408203125));
        float _2862 = isnan(1.0) ? _2216 : (isnan(_2216) ? 1.0 : min(_2216, 1.0));
        _2778 = (((((_2842 * _2498) + _849) * cbLight._m0[_2793].x) * _2861) * _2862) + _2668;
        _2780 = (((((_2842 * _2500) + _851) * cbLight._m0[_2793].y) * _2861) * _2862) + _2670;
        _2782 = (((((_2842 * _2501) + _852) * cbLight._m0[_2793].z) * _2861) * _2862) + _2672;
    }
    float _2928;
    float _2930;
    float _2932;
    float _2934;
    float _2936;
    float _2938;
    if (_2198.y == 0u)
    {
        uvec4 _2883 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2884 = _2883.x;
        uint _2895 = uint((float(_2883.y) * floor(float(uint(cbSceneParam._m0[85u].y * _787) / _2884))) + floor(float(uint(cbSceneParam._m0[85u].x * _786) / _2884)));
        float _2905 = (log2(_1976 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2906 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0));
        uint _2909 = uint(isnan(14.0) ? _2906 : (isnan(_2906) ? 14.0 : min(_2906, 14.0)));
        uvec4 _2914 = texelFetch(g_lightClusterGridBuffer, int(((_2909 << 2u) + (_2895 << 6u)) >> 2u));
        uint _2915 = _2914.x;
        uint _2916 = _2883.z;
        float _2995;
        float _2997;
        float _2999;
        float _3001;
        float _3003;
        float _3005;
        if (((((1u << ((_2916 >> 4u) & 15u)) + 4294967295u) & _2915) == 0u) || ((_2916 & 240u) == 0u))
        {
            _2995 = 0.0;
            _2997 = 0.0;
            _2999 = 0.0;
            _3001 = 0.0;
            _3003 = 0.0;
            _3005 = 0.0;
        }
        else
        {
            float _2996;
            float _2998;
            float _3000;
            float _3002;
            float _3004;
            float _3006;
            float _3148 = 0.0;
            float _3149 = 0.0;
            float _3150 = 0.0;
            float _3151 = 0.0;
            float _3152 = 0.0;
            float _3153 = 0.0;
            uint _3154 = 0u;
            uint _3163;
            bool _3164;
            for (;;)
            {
                _3163 = texelFetch(g_lightClassification, int((((_2909 << 5u) + (_2895 << 9u)) + (_3154 << 2u)) >> 2u)).x;
                _3164 = _3163 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3164)
                {
                    frontier_phi_71_pred = _3153;
                    frontier_phi_71_pred_1 = _3152;
                    frontier_phi_71_pred_2 = _3151;
                    frontier_phi_71_pred_3 = _3150;
                    frontier_phi_71_pred_4 = _3149;
                    frontier_phi_71_pred_5 = _3148;
                }
                else
                {
                    float _3293;
                    float _3294;
                    float _3295;
                    float _3296;
                    float _3297;
                    float _3298;
                    uint _3299;
                    _3293 = _3148;
                    _3294 = _3149;
                    _3295 = _3150;
                    _3296 = _3151;
                    _3297 = _3152;
                    _3298 = _3153;
                    _3299 = _3163;
                    float _3220;
                    float _3221;
                    float _3222;
                    float _3223;
                    float _3224;
                    float _3225;
                    for (;;)
                    {
                        uint _3303 = uint(findLSB(_3299)) + (_3154 << 5u);
                        uint _3300 = (_3299 + 4294967295u) & _3299;
                        uint _3305 = _3303 * 48u;
                        vec4 _3319 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3305)).x, texelFetch(g_PointLightRenderingBuffer, int(_3305 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3305 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3305 + 3u)).x));
                        uint _3325 = (_3303 * 48u) + 4u;
                        vec4 _3338 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3325)).x, texelFetch(g_PointLightRenderingBuffer, int(_3325 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3325 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3325 + 3u)).x));
                        uint _3344 = (_3303 * 48u) + 8u;
                        vec3 _3355 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3344)).x, texelFetch(g_PointLightRenderingBuffer, int(_3344 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3344 + 2u)).x));
                        float _3359 = _3319.x - _1974;
                        float _3360 = _3319.y - _1975;
                        float _3361 = _3319.z - _1976;
                        float _3362 = dot(vec3(_3359, _3360, _3361), vec3(_3359, _3360, _3361));
                        float _3365 = inversesqrt(_3362);
                        float _3366 = _3365 * _3359;
                        float _3367 = _3365 * _3360;
                        float _3368 = _3365 * _3361;
                        float _3369 = dot(vec3(_805, _808, _811), vec3(_3366, _3367, _3368));
                        float _3374 = 1.0 - (_3362 * _3319.w);
                        float _4782 = isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0));
                        float _3375 = isnan(1.0) ? _4782 : (isnan(_4782) ? 1.0 : min(_4782, 1.0));
                        float _3376 = sqrt(_3362) * _3338.w;
                        float _3379 = 1.39999997615814208984375 / (_3376 + 1.39999997615814208984375);
                        float _3380 = _3379 * _3379;
                        float _3383 = ((1.0 - _3380) * _3369) + _3380;
                        float _3386 = _3376 * _3376;
                        float _3390 = ((isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0))) * _3375) / ((_3386 * 0.699999988079071044921875) + 1.0);
                        float _3394 = (-0.0) - _1974;
                        float _3395 = (-0.0) - _1975;
                        float _3396 = (-0.0) - _1976;
                        float _3400 = inversesqrt(dot(vec3(_3394, _3395, _3396), vec3(_3394, _3395, _3396)));
                        float _3401 = _3400 * _3394;
                        float _3402 = _3400 * _3395;
                        float _3403 = _3400 * _3396;
                        float _3410 = exp2(log2(1.0 / ((_3386 * 3.5) + 5.0)) * 0.25);
                        float _3411 = 1.0 - _880;
                        float _3418 = sqrt(1.0 - ((1.0 - (_3411 * _3411)) * (1.0 - (_3410 * _3410))));
                        float _3419 = _3418 * _3418;
                        float _3420 = _3419 * _3419;
                        float _3421 = _3401 + _3366;
                        float _3422 = _3402 + _3367;
                        float _3423 = _3403 + _3368;
                        float _3427 = inversesqrt(dot(vec3(_3421, _3422, _3423), vec3(_3421, _3422, _3423)));
                        float _3431 = dot(vec3(_805, _808, _811), vec3(_3401, _3402, _3403));
                        float _4798 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0));
                        float _3434 = isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0));
                        float _3435 = dot(vec3(_805, _808, _811), vec3(_3427 * _3421, _3427 * _3422, _3427 * _3423));
                        float _4809 = isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0));
                        float _3438 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
                        float _3442 = ((_3438 * _3438) * (_3420 + (-1.0))) + 1.0;
                        float _3443 = _3379 * _3419;
                        float _3444 = _3443 * _3443;
                        float _3447 = ((1.0 - _3444) * _3369) + _3444;
                        float _4820 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                        float _3448 = isnan(1.0) ? _4820 : (isnan(_4820) ? 1.0 : min(_4820, 1.0));
                        float _3449 = 1.0 - _3419;
                        float _3459 = (0.5 / (((_3448 * ((_3434 * _3449) + _3419)) + 9.9999999392252902907785028219223e-09) + (((_3448 * _3449) + _3419) * _3434))) * _3448;
                        float _4831 = isnan(0.0) ? _3459 : (isnan(_3459) ? 0.0 : max(_3459, 0.0));
                        float _3470 = (((_3420 * 3.1415927410125732421875) * (isnan(1.0) ? _4831 : (isnan(_4831) ? 1.0 : min(_4831, 1.0)))) / ((_3442 * _3442) * ((_3386 * 2.1991131305694580078125) + 3.141590118408203125))) * _3375;
                        _3223 = (_3390 * _3338.x) + _3296;
                        _3224 = (_3390 * _3338.y) + _3297;
                        _3225 = (_3390 * _3338.z) + _3298;
                        _3220 = (_3470 * _3355.x) + _3293;
                        _3221 = (_3470 * _3355.y) + _3294;
                        _3222 = (_3470 * _3355.z) + _3295;
                        if (_3300 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3293 = _3220;
                            _3294 = _3221;
                            _3295 = _3222;
                            _3296 = _3223;
                            _3297 = _3224;
                            _3298 = _3225;
                            _3299 = _3300;
                        }
                    }
                    frontier_phi_71_pred = _3225;
                    frontier_phi_71_pred_1 = _3224;
                    frontier_phi_71_pred_2 = _3223;
                    frontier_phi_71_pred_3 = _3222;
                    frontier_phi_71_pred_4 = _3221;
                    frontier_phi_71_pred_5 = _3220;
                }
                _3006 = frontier_phi_71_pred;
                _3004 = frontier_phi_71_pred_1;
                _3002 = frontier_phi_71_pred_2;
                _3000 = frontier_phi_71_pred_3;
                _2998 = frontier_phi_71_pred_4;
                _2996 = frontier_phi_71_pred_5;
                uint _3155 = _3154 + 1u;
                if (_3155 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3148 = _2996;
                    _3149 = _2998;
                    _3150 = _3000;
                    _3151 = _3002;
                    _3152 = _3004;
                    _3153 = _3006;
                    _3154 = _3155;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2995 = _2996;
            _2997 = _2998;
            _2999 = _3000;
            _3001 = _3002;
            _3003 = _3004;
            _3005 = _3006;
        }
        uvec4 _3009 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3010 = _3009.z;
        uint _3012 = (_3010 >> 8u) & 15u;
        float _3116;
        float _3118;
        float _3120;
        float _3122;
        float _3124;
        float _3126;
        if (((4294967295u << _3012) & _2915) == 0u)
        {
            _3116 = _2995;
            _3118 = _2997;
            _3120 = _2999;
            _3122 = _3001;
            _3124 = _3003;
            _3126 = _3005;
        }
        else
        {
            float _3141 = inversesqrt(dot(vec3(_1974, _1975, _1976), vec3(_1974, _1975, _1976)));
            float _3142 = _3141 * _1974;
            float _3143 = _3141 * _1975;
            float _3144 = _3141 * _1976;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3012 < ((_3010 >> 12u) & 15u))
            {
                float _3117;
                float _3119;
                float _3121;
                float _3123;
                float _3125;
                float _3127;
                float _3276 = _2995;
                float _3277 = _2997;
                float _3278 = _2999;
                float _3279 = _3001;
                float _3280 = _3003;
                float _3281 = _3005;
                uint _3282 = _3012;
                uint _3291;
                bool _3292;
                for (;;)
                {
                    _3291 = texelFetch(g_lightClassification, int((((_2909 << 5u) + (_2895 << 9u)) + (_3282 << 2u)) >> 2u)).x;
                    _3292 = _3291 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3292)
                    {
                        frontier_phi_82_pred = _3281;
                        frontier_phi_82_pred_1 = _3280;
                        frontier_phi_82_pred_2 = _3279;
                        frontier_phi_82_pred_3 = _3278;
                        frontier_phi_82_pred_4 = _3277;
                        frontier_phi_82_pred_5 = _3276;
                    }
                    else
                    {
                        float _3484;
                        float _3485;
                        float _3486;
                        float _3487;
                        float _3488;
                        float _3489;
                        float _3778;
                        float _3779;
                        float _3780;
                        float _3781;
                        float _3782;
                        float _3783;
                        float _3497 = _3276;
                        float _3498 = _3277;
                        float _3499 = _3278;
                        float _3500 = _3279;
                        float _3501 = _3280;
                        float _3502 = _3281;
                        uint _3503 = _3291;
                        uint _3504;
                        vec4 _3529;
                        float _3530;
                        vec4 _3545;
                        vec3 _3557;
                        vec4 _3572;
                        vec4 _3587;
                        float _3634;
                        bool _3635;
                        for (;;)
                        {
                            uint _3514 = ((_3282 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3503));
                            _3504 = (_3503 + 4294967295u) & _3503;
                            uint _3516 = _3514 * 40u;
                            _3529 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3516)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3516 + 3u)).x));
                            _3530 = _3529.w;
                            uint _3532 = (_3514 * 40u) + 4u;
                            _3545 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3532)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3532 + 3u)).x));
                            uint _3547 = (_3514 * 40u) + 8u;
                            _3557 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3547)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3547 + 2u)).x));
                            uint _3559 = (_3514 * 40u) + 16u;
                            _3572 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3559)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3559 + 3u)).x));
                            uint _3574 = (_3514 * 40u) + 20u;
                            _3587 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3574)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3574 + 3u)).x));
                            uint _3590 = (_3514 * 40u) + 24u;
                            vec4 _3603 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3590)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 3u)).x));
                            uint _3609 = (_3514 * 40u) + 28u;
                            vec4 _3622 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3609)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3609 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3609 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3609 + 3u)).x));
                            _3634 = fma(_1976, _3622.z, fma(_1975, _3622.y, _3622.x * _1974)) + _3622.w;
                            _3635 = !((fma(_1976, _3603.z, fma(_1975, _3603.y, _3603.x * _1974)) + _3603.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3635)
                            {
                                float _3662 = _3529.x - _1974;
                                float _3663 = _3529.y - _1975;
                                float _3664 = _3529.z - _1976;
                                float _3665 = dot(vec3(_3662, _3663, _3664), vec3(_3662, _3663, _3664));
                                float _3668 = inversesqrt(_3665);
                                float _3669 = _3668 * _3662;
                                float _3670 = _3668 * _3663;
                                float _3671 = _3668 * _3664;
                                float _3675 = 1.0 - (_3665 / (_3530 * _3530));
                                float _4842 = isnan(0.0) ? _3675 : (isnan(_3675) ? 0.0 : max(_3675, 0.0));
                                float _3676 = isnan(1.0) ? _4842 : (isnan(_4842) ? 1.0 : min(_4842, 1.0));
                                float _3680 = sqrt(_3665) * _3545.w;
                                float _3682 = 1.39999997615814208984375 / (_3680 + 1.39999997615814208984375);
                                float _3683 = _3682 * _3682;
                                float _3686 = ((1.0 - _3683) * dot(vec3(_3669, _3670, _3671), vec3(_805, _808, _811))) + _3683;
                                float _3689 = _3680 * _3680;
                                float _3693 = (fma(_1976, _3572.z, fma(_1975, _3572.y, _3572.x * _1974)) + _3572.w) / _3634;
                                float _3694 = (fma(_1976, _3587.z, fma(_1975, _3587.y, _3587.x * _1974)) + _3587.w) / _3634;
                                float _3698 = 1.0 - dot(vec2(_3693, _3694), vec2(_3693, _3694));
                                float _4858 = isnan(0.0) ? _3698 : (isnan(_3698) ? 0.0 : max(_3698, 0.0));
                                float _3699 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
                                float _3700 = _3699 * (((isnan(0.0) ? _3686 : (isnan(_3686) ? 0.0 : max(_3686, 0.0))) * _3676) / ((_3689 * 0.699999988079071044921875) + 1.0));
                                float _3712 = exp2(log2(1.0 / ((_3689 * 3.5) + 5.0)) * 0.25);
                                float _3713 = 1.0 - _880;
                                float _3720 = sqrt(1.0 - ((1.0 - (_3713 * _3713)) * (1.0 - (_3712 * _3712))));
                                float _3721 = _3720 * _3720;
                                float _3722 = _3721 * _3721;
                                float _3723 = _3669 - _3142;
                                float _3724 = _3670 - _3143;
                                float _3725 = _3671 - _3144;
                                float _3729 = inversesqrt(dot(vec3(_3723, _3724, _3725), vec3(_3723, _3724, _3725)));
                                float _3733 = dot(vec3(_805, _808, _811), vec3((-0.0) - _3142, (-0.0) - _3143, (-0.0) - _3144));
                                float _4869 = isnan(0.0) ? _3733 : (isnan(_3733) ? 0.0 : max(_3733, 0.0));
                                float _3736 = isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0));
                                float _3737 = dot(vec3(_805, _808, _811), vec3(_3729 * _3723, _3729 * _3724, _3729 * _3725));
                                float _4880 = isnan(0.0) ? _3737 : (isnan(_3737) ? 0.0 : max(_3737, 0.0));
                                float _3740 = isnan(1.0) ? _4880 : (isnan(_4880) ? 1.0 : min(_4880, 1.0));
                                float _3744 = ((_3740 * _3740) * (_3722 + (-1.0))) + 1.0;
                                float _3745 = _3682 * _3721;
                                float _3746 = _3745 * _3745;
                                float _3752 = ((1.0 - _3746) * dot(vec3(_805, _808, _811), vec3(_3669, _3670, _3671))) + _3746;
                                float _4891 = isnan(0.0) ? _3752 : (isnan(_3752) ? 0.0 : max(_3752, 0.0));
                                float _3753 = isnan(1.0) ? _4891 : (isnan(_4891) ? 1.0 : min(_4891, 1.0));
                                float _3754 = 1.0 - _3721;
                                float _3764 = (0.5 / (((_3753 * ((_3736 * _3754) + _3721)) + 9.9999999392252902907785028219223e-09) + (((_3753 * _3754) + _3721) * _3736))) * _3753;
                                float _4902 = isnan(0.0) ? _3764 : (isnan(_3764) ? 0.0 : max(_3764, 0.0));
                                float _3774 = (_3699 * _3676) * (((_3722 * 3.1415927410125732421875) * (isnan(1.0) ? _4902 : (isnan(_4902) ? 1.0 : min(_4902, 1.0)))) / ((_3744 * _3744) * ((_3689 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3700 * _3545.z;
                                frontier_phi_88_pred_1 = _3700 * _3545.y;
                                frontier_phi_88_pred_2 = _3700 * _3545.x;
                                frontier_phi_88_pred_3 = _3774 * _3557.z;
                                frontier_phi_88_pred_4 = _3774 * _3557.y;
                                frontier_phi_88_pred_5 = _3774 * _3557.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3783 = frontier_phi_88_pred;
                            _3782 = frontier_phi_88_pred_1;
                            _3781 = frontier_phi_88_pred_2;
                            _3780 = frontier_phi_88_pred_3;
                            _3779 = frontier_phi_88_pred_4;
                            _3778 = frontier_phi_88_pred_5;
                            _3487 = _3781 + _3500;
                            _3488 = _3782 + _3501;
                            _3489 = _3783 + _3502;
                            _3484 = _3778 + _3497;
                            _3485 = _3779 + _3498;
                            _3486 = _3780 + _3499;
                            if (_3504 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3497 = _3484;
                                _3498 = _3485;
                                _3499 = _3486;
                                _3500 = _3487;
                                _3501 = _3488;
                                _3502 = _3489;
                                _3503 = _3504;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3489;
                        frontier_phi_82_pred_1 = _3488;
                        frontier_phi_82_pred_2 = _3487;
                        frontier_phi_82_pred_3 = _3486;
                        frontier_phi_82_pred_4 = _3485;
                        frontier_phi_82_pred_5 = _3484;
                    }
                    _3127 = frontier_phi_82_pred;
                    _3125 = frontier_phi_82_pred_1;
                    _3123 = frontier_phi_82_pred_2;
                    _3121 = frontier_phi_82_pred_3;
                    _3119 = frontier_phi_82_pred_4;
                    _3117 = frontier_phi_82_pred_5;
                    uint _3283 = _3282 + 1u;
                    if (_3283 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3276 = _3117;
                        _3277 = _3119;
                        _3278 = _3121;
                        _3279 = _3123;
                        _3280 = _3125;
                        _3281 = _3127;
                        _3282 = _3283;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3123;
                frontier_phi_63_64_ladder_1 = _3127;
                frontier_phi_63_64_ladder_2 = _3125;
                frontier_phi_63_64_ladder_3 = _3121;
                frontier_phi_63_64_ladder_4 = _3119;
                frontier_phi_63_64_ladder_5 = _3117;
            }
            else
            {
                frontier_phi_63_64_ladder = _3001;
                frontier_phi_63_64_ladder_1 = _3005;
                frontier_phi_63_64_ladder_2 = _3003;
                frontier_phi_63_64_ladder_3 = _2999;
                frontier_phi_63_64_ladder_4 = _2997;
                frontier_phi_63_64_ladder_5 = _2995;
            }
            _3116 = frontier_phi_63_64_ladder_5;
            _3118 = frontier_phi_63_64_ladder_4;
            _3120 = frontier_phi_63_64_ladder_3;
            _3122 = frontier_phi_63_64_ladder;
            _3124 = frontier_phi_63_64_ladder_2;
            _3126 = frontier_phi_63_64_ladder_1;
        }
        float _3131 = isnan(1.0) ? _864 : (isnan(_864) ? 1.0 : min(_864, 1.0));
        _2928 = (_3131 * _3122) + _2440;
        _2930 = (_3131 * _3124) + _2442;
        _2932 = (_3131 * _3126) + _2444;
        _2934 = ((_3116 * _849) * _3131) + _2778;
        _2936 = ((_3118 * _851) * _3131) + _2780;
        _2938 = ((_3120 * _852) * _3131) + _2782;
    }
    else
    {
        _2928 = _2440;
        _2930 = _2442;
        _2932 = _2444;
        _2934 = _2778;
        _2936 = _2780;
        _2938 = _2782;
    }
    float _4918 = isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0));
    float _4929 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _4940 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _2955 = ((isnan(1.0) ? _4918 : (isnan(_4918) ? 1.0 : min(_4918, 1.0))) * (_2928 + ((isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0))) * _864))) + ((_2934 + ((isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0))) * _1706)) * cbPerFrame._m0[3u].x);
    float _2956 = ((isnan(1.0) ? _4929 : (isnan(_4929) ? 1.0 : min(_4929, 1.0))) * (_2930 + ((isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0))) * _864))) + ((_2936 + ((isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0))) * _1706)) * cbPerFrame._m0[3u].x);
    float _2957 = ((isnan(1.0) ? _4940 : (isnan(_4940) ? 1.0 : min(_4940, 1.0))) * (_2932 + ((isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0))) * _864))) + ((_2938 + ((isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0))) * _1706)) * cbPerFrame._m0[3u].x);
    uint _2958 = _824 + 6u;
    float _2966 = _786 / cbSceneParam._m0[86u].x;
    float _2967 = _787 / cbSceneParam._m0[86u].y;
    vec4 _2981 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2966, _2967, (log2((isnan(cbSceneParam._m0[77u].w) ? _709 : (isnan(_709) ? cbSceneParam._m0[77u].w : min(_709, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2983 = _2981.x;
    float _2984 = _2981.y;
    float _2985 = _2981.z;
    float _2986 = _2981.w;
    float _3058;
    float _3060;
    float _3062;
    float _3064;
    if (_709 > cbSceneParam._m0[78u].w)
    {
        float _3020 = isnan(_709) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _709 : min(cbSceneParam._m0[80u].w, _709));
        float _3021 = _3020 / _709;
        float _3032 = _3021 * _759;
        float _3033 = _760 * _3021;
        float _3034 = (-0.0) - _3033;
        float _3036 = _3021 * _761;
        float _3038 = (cbSceneParam._m0[77u].w * _3034) / _3020;
        float _3039 = _3038 + cbSceneParam._m0[79u].w;
        float _3040 = cbSceneParam._m0[79u].w - _3033;
        float _3046 = sqrt(((_3032 * _3032) + (_3033 * _3033)) + (_3036 * _3036));
        float _3049 = (1.0 - (cbSceneParam._m0[77u].w / _3020)) * _3046;
        float _3054 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3056 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3233;
        if (abs((_3034 - _3038) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3233 = ((((_3039 > 0.0) ? exp2(_3054 * _3039) : (2.0 - exp2(_3056 * _3039))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3049;
        }
        else
        {
            float _3177 = 1.0 / cbSceneParam._m0[80u].x;
            float _3178 = isnan(_3040) ? _3039 : (isnan(_3039) ? _3040 : max(_3039, _3040));
            float _3179 = isnan(_3040) ? _3039 : (isnan(_3039) ? _3040 : min(_3039, _3040));
            float _3188 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : min(_3178, 0.0));
            float _3189 = isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : min(_3179, 0.0));
            _3233 = ((abs(_3046 / _3034) * cbSceneParam._m0[80u].y) * ((((_3188 - _3189) * 2.0) - ((exp2(_3054 * (isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0)))) - exp2(_3054 * (isnan(0.0) ? _3179 : (isnan(_3179) ? 0.0 : max(_3179, 0.0))))) * _3177)) - ((exp2(_3056 * _3188) - exp2(_3056 * _3189)) * _3177))) + (_3049 * cbSceneParam._m0[80u].z);
        }
        vec4 _3235 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2966, _2967, 1.0), 0.0);
        float _3244 = exp2((_3233 * (-1.44269502162933349609375)) * (1.0 - _3235.w));
        float _3245 = log2(_3244);
        float _3261 = log2(_2986);
        _3058 = (exp2(_3261 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3245 * cbSceneParam._m0[78u].x)) * _3235.x) / cbSceneParam._m0[78u].x)) + _2983;
        _3060 = (exp2(_3261 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3245 * cbSceneParam._m0[78u].y)) * _3235.y) / cbSceneParam._m0[78u].y)) + _2984;
        _3062 = (exp2(_3261 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3245 * cbSceneParam._m0[78u].z)) * _3235.z) / cbSceneParam._m0[78u].z)) + _2985;
        _3064 = _3244 * _2986;
    }
    else
    {
        _3058 = _2983;
        _3060 = _2984;
        _3062 = _2985;
        _3064 = _2986;
    }
    bool _3271;
    vec4 _3074;
    vec4 _3096;
    float _3098;
    float _3102;
    float _3103;
    float _3104;
    float _3105;
    bool _3115;
    for (;;)
    {
        _3074 = cbMatDynParam._m0[0u];
        float _3076 = roundEven(_3074.y);
        bool _3077 = _3076 == 3.0;
        float _3078 = log2(_3064);
        float _3085 = exp2(_3078 * cbSceneParam._m0[78u].x) * _2955;
        float _3086 = exp2(_3078 * cbSceneParam._m0[78u].y) * _2956;
        float _3087 = exp2(_3078 * cbSceneParam._m0[78u].z) * _2957;
        float _3094 = _775 + (-0.5);
        _3096 = cbMtdParam._m0[1u];
        _3098 = _3096.y * _3094;
        float _3101 = (_3076 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3102 = _3101 * (_3077 ? _3085 : (_3085 + (cbSceneParam._m0[72u].w * _3058)));
        _3103 = _3101 * (_3077 ? _3086 : (_3086 + (cbSceneParam._m0[72u].w * _3060)));
        _3104 = _3101 * (_3077 ? _3087 : (_3087 + (cbSceneParam._m0[72u].w * _3062)));
        _3105 = _3094 * 0.999000012874603271484375;
        _3115 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3115)
        {
            if ((cbInstanceData._m0[_824 + 7u].x + _3105) < 0.5)
            {
                _3271 = true;
                break;
            }
        }
        uint _3212 = _825 + uint(_3074.w);
        if ((cbInstanceData._m0[_3212].w < 1.0) && ((cbInstanceData._m0[_3212].w + _3105) < 0.5))
        {
            _3271 = true;
            break;
        }
        if ((_3098 + 1.0) < _3096.x)
        {
            _3271 = true;
            break;
        }
        _3271 = false;
        break;
    }
    float _3475;
    if (_3271)
    {
        discard_state = true;
        _3475 = 0.0;
    }
    else
    {
        _3475 = cbInstanceData._m0[_2958].w;
    }
    SV_Target.x = _3102;
    SV_Target.y = _3103;
    SV_Target.z = _3104;
    SV_Target.w = _3475;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2958].w;
    discard_exit();
}


