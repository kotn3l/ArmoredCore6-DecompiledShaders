#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_20;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1319;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _213 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _214 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _215 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _221 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _228 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _235 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _258 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _264 = _258.x * cbMtdParam._m0[10u].x;
    float _265 = _258.y * cbMtdParam._m0[10u].y;
    float _266 = _258.z * cbMtdParam._m0[10u].z;
    vec4 _284 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _334 = cbMtdParam._m0[18u].y * texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x;
    float _345 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].x * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].y * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _334)) + 1.0;
    float _3649 = isnan(0.0) ? _345 : (isnan(_345) ? 0.0 : max(_345, 0.0));
    float _346 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
    float _353 = (_346 * ((_284.x * cbMtdParam._m0[11u].x) - _264)) + _264;
    float _354 = (_346 * ((_284.y * cbMtdParam._m0[11u].y) - _265)) + _265;
    float _355 = (_346 * ((_284.z * cbMtdParam._m0[11u].z) - _266)) + _266;
    vec4 _373 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _400 = ((cbMtdParam._m0[17u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _334)) + 1.0;
    float _3660 = isnan(0.0) ? _400 : (isnan(_400) ? 0.0 : max(_400, 0.0));
    float _401 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
    float _408 = (_401 * ((_373.x * cbMtdParam._m0[12u].x) - _353)) + _353;
    float _409 = (_401 * ((_373.y * cbMtdParam._m0[12u].y) - _354)) + _354;
    float _410 = (_401 * ((_373.z * cbMtdParam._m0[12u].z) - _355)) + _355;
    vec4 _427 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _452 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[18u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[18u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _334)) + 1.0;
    float _3671 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _453 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
    float _460 = (_453 * ((_427.x * cbMtdParam._m0[13u].x) - _408)) + _408;
    float _461 = (_453 * ((_427.y * cbMtdParam._m0[13u].y) - _409)) + _409;
    float _462 = (_453 * ((_427.z * cbMtdParam._m0[13u].z) - _410)) + _410;
    vec4 _482 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _511 = (TEXCOORD_5.x - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.z) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.w) + cbTextureTilingScale._m0[18u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].z + 1.0);
    float _3682 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _512 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
    float _519 = (_512 * ((_482.x * cbMtdParam._m0[14u].x) - _460)) + _460;
    float _520 = (_512 * ((_482.y * cbMtdParam._m0[14u].y) - _461)) + _461;
    float _521 = (_512 * ((_482.z * cbMtdParam._m0[14u].z) - _462)) + _462;
    vec4 _534 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _536 = _534.x;
    float _554 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _536) * _346) + _536;
    float _572 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _554) * _401) + _554;
    float _589 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _572) * _453) + _572;
    float _591 = _589 - (_589 * TEXCOORD_5.x);
    vec4 _604 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _626 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _628 = _626.x;
    float _629 = _626.y;
    float _632 = cbMtdParam._m0[17u].y * _626.z;
    vec4 _644 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _653 = (((cbMtdParam._m0[17u].x * _644.z) - _632) * _346) + _632;
    vec4 _666 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _678 = (((cbMtdParam._m0[16u].w * _666.z) - _653) * _401) + _653;
    vec4 _691 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _700 = (((cbMtdParam._m0[16u].z * _691.z) - _678) * _453) + _678;
    float _705 = ((cbMtdParam._m0[16u].x * TEXCOORD_5.x) * ((_604.z * cbMtdParam._m0[17u].z) - _700)) + _700;
    vec4 _718 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _730 = ((_644.x - _628) * _346) + _628;
    float _731 = ((_644.y - _629) * _346) + _629;
    float _736 = ((_666.x - _730) * _401) + _730;
    float _737 = ((_666.y - _731) * _401) + _731;
    float _746 = ((((_691.x - _736) * _453) + _736) * 2.0) + (-1.0);
    float _747 = ((((_691.y - _737) * _453) + _737) * 2.0) + (-1.0);
    float _748 = dot(vec2(_746, _747), vec2(_746, _747));
    float _3693 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _753 = sqrt(1.0 - (isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0))));
    float _763 = ((((_718.x * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _746) + ((((_604.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[15u].y);
    float _764 = ((((_718.y * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _747) + ((((_604.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[15u].y);
    float _767 = fma(_753, _228 * NORMAL.x, fma(_764, _235 * TANGENT.x, (_221 * _213) * _763));
    float _770 = fma(_753, _228 * NORMAL.y, fma(_764, _235 * TANGENT.y, (_221 * _214) * _763));
    float _773 = fma(_753, _228 * NORMAL.z, fma(_764, _235 * TANGENT.z, (_221 * _215) * _763));
    float _777 = inversesqrt(dot(vec3(_767, _770, _773), vec3(_767, _770, _773)));
    float _778 = _777 * _767;
    float _779 = _777 * _770;
    float _780 = _777 * _773;
    float _3704 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _781 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
    float _3715 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _3726 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _3737 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _3748 = isnan(0.0) ? _591 : (isnan(_591) ? 0.0 : max(_591, 0.0));
    float _785 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
    float _801 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _841 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _851 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _841);
    float _852 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _841);
    float _853 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _841);
    float _857 = inversesqrt(dot(vec3(_851, _852, _853), vec3(_851, _852, _853)));
    float _858 = _851 * _857;
    float _859 = _852 * _857;
    float _860 = _853 * _857;
    float _866 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _867 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _885 = fma(_780, cbSceneParam._m0[5u].z, fma(_779, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _778));
    float _888 = fma(_780, cbSceneParam._m0[6u].z, fma(_779, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _778));
    float _891 = fma(_780, cbSceneParam._m0[7u].z, fma(_779, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _778));
    uint _904 = uint(roundEven(NORMAL.w)) * 13u;
    uint _906 = (_904 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _912 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0)))) * cbInstanceData._m0[_906].x;
    float _913 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0)))) * cbInstanceData._m0[_906].y;
    float _914 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0)))) * cbInstanceData._m0[_906].z;
    float _3759 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
    float _915 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
    float _3770 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _916 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
    float _3781 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _917 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
    float _918 = 1.0 - _785;
    float _919 = _915 * _918;
    float _920 = _916 * _918;
    float _921 = _917 * _918;
    float _926 = (_915 + (-0.039999999105930328369140625)) * _785;
    float _927 = (_916 + (-0.039999999105930328369140625)) * _785;
    float _928 = (_917 + (-0.039999999105930328369140625)) * _785;
    float _929 = _926 + 0.039999999105930328369140625;
    float _931 = _927 + 0.039999999105930328369140625;
    float _932 = _928 + 0.039999999105930328369140625;
    vec4 _941 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _866, cbSceneParam._m0[86u].y * _867));
    float _944 = _941.x * TEXCOORD_5.w;
    float _945 = dot(vec3(_778, _779, _780), vec3(_858, _859, _860));
    float _948 = _945 * 2.0;
    float _952 = (_948 * _778) - _858;
    float _953 = (_948 * _779) - _859;
    float _954 = (_948 * _780) - _860;
    float _958 = abs(dot(vec3(_858, _859, _860), vec3(_778, _779, _780)));
    float _3792 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _960 = sqrt(_781);
    float _973 = exp2((_960 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_960 * 3.0));
    float _979 = (1.0 - _973) * ((_960 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _980 = _973 * _960;
    float _1008 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1012 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1016 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1318;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1043 = fma(_1016, cbModelParam._m0[26u].z, fma(_1012, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1008));
        float _1047 = fma(_1016, cbModelParam._m0[27u].z, fma(_1012, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1008));
        float _1051 = fma(_1016, cbModelParam._m0[28u].z, fma(_1012, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1008));
        float _1076 = _1008 + _778;
        float _1077 = _1012 + _779;
        float _1078 = _1016 + _780;
        float _1088 = fma(_1078, cbModelParam._m0[26u].z, fma(_1077, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1076)) - _1043;
        float _1089 = fma(_1078, cbModelParam._m0[27u].z, fma(_1077, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1076)) - _1047;
        float _1090 = fma(_1078, cbModelParam._m0[28u].z, fma(_1077, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1076)) - _1051;
        float _1094 = inversesqrt(dot(vec3(_1088, _1089, _1090), vec3(_1088, _1089, _1090)));
        float _1107 = ((_1094 * _1088) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1043 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1108 = ((_1094 * _1089) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1047 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1109 = ((_1094 * _1090) / cbModelParam._m0[34u].z) + ((((((_1051 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1112 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        float _1146 = exp2((_1112.w + (-0.5)) * 20.0) * 2.0;
        float _1147 = _1146 * (_1112.x + (-0.5));
        float _1148 = _1146 * (_1112.y + (-0.5));
        float _1149 = _1146 * (_1112.z + (-0.5));
        float _1156 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1119.x + (-0.5));
        float _1158 = _1156 * (_1119.y + (-0.5));
        float _1159 = _1156 * (_1119.z + (-0.5));
        float _1166 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1126.x + (-0.5));
        float _1168 = _1166 * (_1126.y + (-0.5));
        float _1169 = _1166 * (_1126.z + (-0.5));
        float _1176 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1133.x + (-0.5));
        float _1178 = _1176 * (_1133.y + (-0.5));
        float _1179 = _1176 * (_1133.z + (-0.5));
        float _1180 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1181 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1182 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1183 = _1147 * 0.5;
        float _1184 = _1157 * 0.5;
        float _1185 = _1167 * 0.5;
        float _1186 = dot(vec3(_1183, _1184, _1185), vec3(_1183, _1184, _1185));
        float _1191 = (_1186 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1186);
        float _1200 = (dot(vec3(_778, _779, _780), vec3(_1191 * _1183, _1191 * _1184, _1191 * _1185)) + 1.0) * 0.5;
        float _3818 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1210 = sqrt(((_1184 * _1184) + (_1183 * _1183)) + (_1185 * _1185)) / (_1180 + 9.9999997473787516355514526367188e-06);
        float _3829 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
        float _1212 = _1211 * 2.0;
        float _1216 = (1.0 - _1211) / (_1211 + 1.0);
        float _3840 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
        float _1226 = ((((1.0 - _1217) * (_1212 + 2.0)) * exp2(log2(isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0))) * (_1212 + 1.0))) + _1217) * _1180;
        float _1227 = _1148 * 0.5;
        float _1228 = _1158 * 0.5;
        float _1229 = _1168 * 0.5;
        float _1230 = dot(vec3(_1227, _1228, _1229), vec3(_1227, _1228, _1229));
        float _1235 = (_1230 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1230);
        float _1243 = (dot(vec3(_778, _779, _780), vec3(_1235 * _1227, _1235 * _1228, _1235 * _1229)) + 1.0) * 0.5;
        float _3851 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1252 = sqrt(((_1228 * _1228) + (_1227 * _1227)) + (_1229 * _1229)) / (_1181 + 9.9999997473787516355514526367188e-06);
        float _3862 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _1254 = _1253 * 2.0;
        float _1258 = (1.0 - _1253) / (_1253 + 1.0);
        float _3873 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1268 = ((((1.0 - _1259) * (_1254 + 2.0)) * exp2(log2(isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0))) * (_1254 + 1.0))) + _1259) * _1181;
        float _1269 = _1149 * 0.5;
        float _1270 = _1159 * 0.5;
        float _1271 = _1169 * 0.5;
        float _1272 = dot(vec3(_1269, _1270, _1271), vec3(_1269, _1270, _1271));
        float _1277 = (_1272 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1272);
        float _1285 = (dot(vec3(_778, _779, _780), vec3(_1277 * _1269, _1277 * _1270, _1277 * _1271)) + 1.0) * 0.5;
        float _3884 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1294 = sqrt(((_1270 * _1270) + (_1269 * _1269)) + (_1271 * _1271)) / (_1182 + 9.9999997473787516355514526367188e-06);
        float _3895 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1296 = _1295 * 2.0;
        float _1300 = (1.0 - _1295) / (_1295 + 1.0);
        float _3906 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1310 = ((((1.0 - _1301) * (_1296 + 2.0)) * exp2(log2(isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * (_1296 + 1.0))) + _1301) * _1182;
        _1318 = _1149;
        _1320 = _1148;
        _1321 = _1147;
        _1322 = _1159;
        _1323 = _1158;
        _1324 = _1157;
        _1325 = _1169;
        _1326 = _1168;
        _1327 = _1167;
        _1328 = _1182;
        _1329 = _1181;
        _1330 = _1180;
        _1331 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0)));
        _1332 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)));
        _1333 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)));
    }
    else
    {
        _1318 = _1319;
        _1320 = _1319;
        _1321 = _1319;
        _1322 = _1319;
        _1323 = _1319;
        _1324 = _1319;
        _1325 = _1319;
        _1326 = _1319;
        _1327 = _1319;
        _1328 = _1319;
        _1329 = _1319;
        _1330 = _1319;
        _1331 = 0.0;
        _1332 = 0.0;
        _1333 = 0.0;
    }
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1359 = fma(_1016, cbModelParam._m0[30u].z, fma(_1012, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1008));
        float _1363 = fma(_1016, cbModelParam._m0[31u].z, fma(_1012, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1008));
        float _1367 = fma(_1016, cbModelParam._m0[32u].z, fma(_1012, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1008));
        float _1390 = _1008 + _778;
        float _1391 = _1012 + _779;
        float _1392 = _1016 + _780;
        float _1402 = fma(_1392, cbModelParam._m0[30u].z, fma(_1391, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1390)) - _1359;
        float _1403 = fma(_1392, cbModelParam._m0[31u].z, fma(_1391, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1390)) - _1363;
        float _1404 = fma(_1392, cbModelParam._m0[32u].z, fma(_1391, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1390)) - _1367;
        float _1408 = inversesqrt(dot(vec3(_1402, _1403, _1404), vec3(_1402, _1403, _1404)));
        float _1421 = ((_1408 * _1402) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1359 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1422 = ((_1408 * _1403) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1363 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1423 = ((_1408 * _1404) / cbModelParam._m0[35u].z) + ((((((_1367 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1425 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1421, _1422, _1423), 0.0);
        vec4 _1432 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1421, _1422, _1423), 0.0);
        vec4 _1439 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1421, _1422, _1423), 0.0);
        vec4 _1446 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1421, _1422, _1423), 0.0);
        float _1458 = exp2((_1425.w + (-0.5)) * 20.0) * 2.0;
        float _1459 = _1458 * (_1425.x + (-0.5));
        float _1460 = _1458 * (_1425.y + (-0.5));
        float _1461 = _1458 * (_1425.z + (-0.5));
        float _1468 = exp2((_1432.w + (-0.5)) * 20.0) * 2.0;
        float _1469 = _1468 * (_1432.x + (-0.5));
        float _1470 = _1468 * (_1432.y + (-0.5));
        float _1471 = _1468 * (_1432.z + (-0.5));
        float _1478 = exp2((_1439.w + (-0.5)) * 20.0) * 2.0;
        float _1479 = _1478 * (_1439.x + (-0.5));
        float _1480 = _1478 * (_1439.y + (-0.5));
        float _1481 = _1478 * (_1439.z + (-0.5));
        float _1488 = exp2((_1446.w + (-0.5)) * 20.0) * 2.0;
        float _1489 = _1488 * (_1446.x + (-0.5));
        float _1490 = _1488 * (_1446.y + (-0.5));
        float _1491 = _1488 * (_1446.z + (-0.5));
        float _1492 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1493 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1494 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1495 = _1459 * 0.5;
        float _1496 = _1469 * 0.5;
        float _1497 = _1479 * 0.5;
        float _1498 = dot(vec3(_1495, _1496, _1497), vec3(_1495, _1496, _1497));
        float _1503 = (_1498 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1498);
        float _1511 = (dot(vec3(_778, _779, _780), vec3(_1503 * _1495, _1503 * _1496, _1503 * _1497)) + 1.0) * 0.5;
        float _3947 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1520 = sqrt(((_1496 * _1496) + (_1495 * _1495)) + (_1497 * _1497)) / (_1492 + 9.9999997473787516355514526367188e-06);
        float _3958 = isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0));
        float _1521 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
        float _1522 = _1521 * 2.0;
        float _1526 = (1.0 - _1521) / (_1521 + 1.0);
        float _3969 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1527 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
        float _1536 = ((((1.0 - _1527) * (_1522 + 2.0)) * exp2(log2(isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0))) * (_1522 + 1.0))) + _1527) * _1492;
        float _1537 = _1460 * 0.5;
        float _1538 = _1470 * 0.5;
        float _1539 = _1480 * 0.5;
        float _1540 = dot(vec3(_1537, _1538, _1539), vec3(_1537, _1538, _1539));
        float _1545 = (_1540 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1540);
        float _1553 = (dot(vec3(_778, _779, _780), vec3(_1545 * _1537, _1545 * _1538, _1545 * _1539)) + 1.0) * 0.5;
        float _3980 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1562 = sqrt(((_1538 * _1538) + (_1537 * _1537)) + (_1539 * _1539)) / (_1493 + 9.9999997473787516355514526367188e-06);
        float _3991 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1563 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _1564 = _1563 * 2.0;
        float _1568 = (1.0 - _1563) / (_1563 + 1.0);
        float _4002 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
        float _1569 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1578 = ((((1.0 - _1569) * (_1564 + 2.0)) * exp2(log2(isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * (_1564 + 1.0))) + _1569) * _1493;
        float _1579 = _1461 * 0.5;
        float _1580 = _1471 * 0.5;
        float _1581 = _1481 * 0.5;
        float _1582 = dot(vec3(_1579, _1580, _1581), vec3(_1579, _1580, _1581));
        float _1587 = (_1582 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1582);
        float _1595 = (dot(vec3(_778, _779, _780), vec3(_1587 * _1579, _1587 * _1580, _1587 * _1581)) + 1.0) * 0.5;
        float _4013 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1604 = sqrt(((_1580 * _1580) + (_1579 * _1579)) + (_1581 * _1581)) / (_1494 + 9.9999997473787516355514526367188e-06);
        float _4024 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1605 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _1606 = _1605 * 2.0;
        float _1610 = (1.0 - _1605) / (_1605 + 1.0);
        float _4035 = isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0));
        float _1611 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1620 = ((((1.0 - _1611) * (_1606 + 2.0)) * exp2(log2(isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * (_1606 + 1.0))) + _1611) * _1494;
        _1628 = _1461;
        _1629 = _1460;
        _1630 = _1459;
        _1631 = _1471;
        _1632 = _1470;
        _1633 = _1469;
        _1634 = _1481;
        _1635 = _1480;
        _1636 = _1479;
        _1637 = _1494;
        _1638 = _1493;
        _1639 = _1492;
        _1640 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0)));
        _1641 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0)));
        _1642 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0)));
    }
    else
    {
        _1628 = _1319;
        _1629 = _1319;
        _1630 = _1319;
        _1631 = _1319;
        _1632 = _1319;
        _1633 = _1319;
        _1634 = _1319;
        _1635 = _1319;
        _1636 = _1319;
        _1637 = _1319;
        _1638 = _1319;
        _1639 = _1319;
        _1640 = 0.0;
        _1641 = 0.0;
        _1642 = 0.0;
    }
    float _1652 = (cbModelParam._m0[1u].x * (_1640 - _1331)) + _1331;
    float _1653 = (cbModelParam._m0[1u].x * (_1641 - _1332)) + _1332;
    float _1654 = (cbModelParam._m0[1u].x * (_1642 - _1333)) + _1333;
    float _1675 = fma(_1654, cbSceneParam._m0[89u].z, fma(_1653, cbSceneParam._m0[89u].y, _1652 * cbSceneParam._m0[89u].x));
    float _1678 = fma(_1654, cbSceneParam._m0[90u].z, fma(_1653, cbSceneParam._m0[90u].y, _1652 * cbSceneParam._m0[90u].x));
    float _1681 = fma(_1654, cbSceneParam._m0[91u].z, fma(_1653, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1652));
    float _1696 = _952 * 0.5;
    float _1697 = _953 * 0.5;
    float _1698 = _954 * 0.5;
    float _1699 = dot(vec4(_1696, _1697, _1698, 1.0), vec4(_1630, _1633, _1636, _1639));
    float _1702 = dot(vec4(_1696, _1697, _1698, 1.0), vec4(_1629, _1632, _1635, _1638));
    float _1705 = dot(vec4(_1696, _1697, _1698, 1.0), vec4(_1628, _1631, _1634, _1637));
    float _1739;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1712 = dot(vec4(_1696, _1697, _1698, 1.0), vec4(_1318, _1322, _1325, _1328));
        float _1716 = dot(vec4(_1696, _1697, _1698, 1.0), vec4(_1320, _1323, _1326, _1329));
        float _1720 = dot(vec4(_1696, _1697, _1698, 1.0), vec4(_1321, _1324, _1327, _1330));
        float _1727 = dot(vec4(cbModelParam._m0[39u]), vec4(_1696, _1697, _1698, 1.0));
        _1739 = dot(vec3(isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0)), isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0)), isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1727) ? 0.0 : (isnan(0.0) ? _1727 : max(0.0, _1727))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1739 = 1.0;
    }
    float _1750;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1741 = dot(vec4(cbModelParam._m0[40u]), vec4(_1696, _1697, _1698, 1.0));
        _1750 = dot(vec3(isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0)), isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0)), isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1741) ? 0.0 : (isnan(0.0) ? _1741 : max(0.0, _1741))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1750 = 1.0;
    }
    float _1754 = (_1750 * cbModelParam._m0[1u].x) + (_1739 * (1.0 - cbModelParam._m0[1u].x));
    float _1764 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _781);
    float _1765 = isnan(_1764) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1764 : min(cbModelParam._m0[25u].z, _1764));
    float _1845;
    float _1847;
    float _1849;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1812 = fma(_1016, cbModelParam._m0[13u].z, fma(_1012, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1008)) + cbModelParam._m0[13u].w;
        float _1816 = fma(_1016, cbModelParam._m0[14u].z, fma(_1012, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1008)) + cbModelParam._m0[14u].w;
        float _1820 = fma(_1016, cbModelParam._m0[15u].z, fma(_1012, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1008)) + cbModelParam._m0[15u].w;
        float _1823 = fma(_954, cbModelParam._m0[13u].z, fma(_953, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _952));
        float _1826 = fma(_954, cbModelParam._m0[14u].z, fma(_953, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _952));
        float _1829 = fma(_954, cbModelParam._m0[15u].z, fma(_953, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _952));
        float _1857;
        if (_1823 > 0.0)
        {
            _1857 = abs((1.0 - _1812) / _1823);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1823 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1812 + 1.0) / _1823);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1857 = frontier_phi_14_12_ladder;
        }
        float _2062;
        if (_1826 > 0.0)
        {
            _2062 = abs((1.0 - _1816) / _1826);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1826 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1816 + 1.0) / _1826);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2062 = frontier_phi_23_19_ladder;
        }
        float _2316;
        if (_1829 > 0.0)
        {
            _2316 = abs((1.0 - _1820) / _1829);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1829 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1820 + 1.0) / _1829);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2316 = frontier_phi_35_30_ladder;
        }
        float _2318 = isnan(_2062) ? _1857 : (isnan(_1857) ? _2062 : min(_1857, _2062));
        float _2319 = isnan(_2316) ? _2318 : (isnan(_2318) ? _2316 : min(_2318, _2316));
        float _2323 = (_2319 * _1823) + _1812;
        float _2324 = (_2319 * _1826) + _1816;
        float _2325 = (_2319 * _1829) + _1820;
        float _2326 = _2319 * 9.9999997473787516355514526367188e-05;
        float _2328 = (-1.0) - _2326;
        float _2330 = _2326 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2325 > _2330) || ((_2325 < _2328) || ((_2324 > _2330) || ((_2324 < _2328) || ((_2323 < _2328) || (_2323 > _2330))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2453 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2325, cbModelParam._m0[9u].z, fma(_2324, cbModelParam._m0[9u].y, _2323 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2325, cbModelParam._m0[10u].z, fma(_2324, cbModelParam._m0[10u].y, _2323 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2325, cbModelParam._m0[11u].z, fma(_2324, cbModelParam._m0[11u].y, _2323 * cbModelParam._m0[11u].x))), _1765);
            frontier_phi_13_35_ladder = _2453.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2453.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2453.x * cbModelParam._m0[1u].y;
        }
        _1845 = frontier_phi_13_35_ladder_2;
        _1847 = frontier_phi_13_35_ladder_1;
        _1849 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1833 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_952, _953, _954), _1765);
        _1845 = _1833.x * cbModelParam._m0[1u].y;
        _1847 = _1833.y * cbModelParam._m0[1u].y;
        _1849 = _1833.z * cbModelParam._m0[1u].y;
    }
    float _1853 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _781);
    float _1854 = isnan(_1853) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1853 : min(cbModelParam._m0[25u].w, _1853));
    float _1945;
    float _1947;
    float _1949;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1909 = fma(_1016, cbModelParam._m0[21u].z, fma(_1012, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1008)) + cbModelParam._m0[21u].w;
        float _1913 = fma(_1016, cbModelParam._m0[22u].z, fma(_1012, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1008)) + cbModelParam._m0[22u].w;
        float _1917 = fma(_1016, cbModelParam._m0[23u].z, fma(_1012, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1008)) + cbModelParam._m0[23u].w;
        float _1920 = fma(_954, cbModelParam._m0[21u].z, fma(_953, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _952));
        float _1923 = fma(_954, cbModelParam._m0[22u].z, fma(_953, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _952));
        float _1926 = fma(_954, cbModelParam._m0[23u].z, fma(_953, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _952));
        float _2067;
        if (_1920 > 0.0)
        {
            _2067 = abs((1.0 - _1909) / _1920);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1920 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1909 + 1.0) / _1920);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2067 = frontier_phi_25_21_ladder;
        }
        float _2343;
        if (_1923 > 0.0)
        {
            _2343 = abs((1.0 - _1913) / _1923);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1923 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1913 + 1.0) / _1923);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2343 = frontier_phi_37_32_ladder;
        }
        float _2556;
        if (_1926 > 0.0)
        {
            _2556 = abs((1.0 - _1917) / _1926);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1926 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1917 + 1.0) / _1926);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2556 = frontier_phi_46_43_ladder;
        }
        float _2558 = isnan(_2343) ? _2067 : (isnan(_2067) ? _2343 : min(_2067, _2343));
        float _2559 = isnan(_2556) ? _2558 : (isnan(_2558) ? _2556 : min(_2558, _2556));
        float _2563 = (_2559 * _1920) + _1909;
        float _2564 = (_2559 * _1923) + _1913;
        float _2565 = (_2559 * _1926) + _1917;
        float _2566 = _2559 * 9.9999997473787516355514526367188e-05;
        float _2567 = (-1.0) - _2566;
        float _2569 = _2566 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2565 > _2569) || ((_2565 < _2567) || ((_2564 > _2569) || ((_2564 < _2567) || ((_2563 < _2567) || (_2563 > _2569))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2764 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2565, cbModelParam._m0[17u].z, fma(_2564, cbModelParam._m0[17u].y, _2563 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2565, cbModelParam._m0[18u].z, fma(_2564, cbModelParam._m0[18u].y, _2563 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2565, cbModelParam._m0[19u].z, fma(_2564, cbModelParam._m0[19u].y, _2563 * cbModelParam._m0[19u].x))), _1854);
            frontier_phi_22_46_ladder = _2764.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2764.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2764.x * cbModelParam._m0[1u].z;
        }
        _1945 = frontier_phi_22_46_ladder_2;
        _1947 = frontier_phi_22_46_ladder_1;
        _1949 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1929 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_952, _953, _954), _1854);
        _1945 = _1929.x * cbModelParam._m0[1u].z;
        _1947 = _1929.y * cbModelParam._m0[1u].z;
        _1949 = _1929.z * cbModelParam._m0[1u].z;
    }
    float _1962 = (((_979 * _929) + _980) * _944) * ((cbModelParam._m0[1u].w * (_1945 - _1845)) + _1845);
    float _1964 = (((_979 * _931) + _980) * _944) * ((cbModelParam._m0[1u].w * (_1947 - _1847)) + _1847);
    float _1966 = (((_979 * _932) + _980) * _944) * ((cbModelParam._m0[1u].w * (_1949 - _1849)) + _1849);
    float _1969 = fma(_1966, cbSceneParam._m0[89u].z, fma(_1964, cbSceneParam._m0[89u].y, _1962 * cbSceneParam._m0[89u].x));
    float _1972 = fma(_1966, cbSceneParam._m0[90u].z, fma(_1964, cbSceneParam._m0[90u].y, _1962 * cbSceneParam._m0[90u].x));
    float _1975 = fma(_1966, cbSceneParam._m0[91u].z, fma(_1964, cbSceneParam._m0[91u].y, _1962 * cbSceneParam._m0[91u].x));
    uvec4 _1985 = floatBitsToUint(cbInstanceData._m0[_904 + 5u]);
    uint _1987 = _1985.x * 14u;
    uint _1988 = _1987 + 13u;
    float _1995 = _944 + (-1.0);
    float _2000 = (cbLight._m0[_1988].x * _1995) + 1.0;
    float _2001 = (cbLight._m0[_1988].y * _1995) + 1.0;
    float _2002 = (cbLight._m0[_1988].z * _1995) + 1.0;
    float _2003 = (cbLight._m0[_1988].w * _1995) + 1.0;
    uint _2004 = _1987 + 5u;
    float _2010 = isnan(1.0) ? _2001 : (isnan(_2001) ? 1.0 : min(_2001, 1.0));
    uint _2014 = _1987 + 4u;
    float _2021 = isnan(1.0) ? _2000 : (isnan(_2000) ? 1.0 : min(_2000, 1.0));
    uint _2025 = _1987 | 1u;
    float _2036 = dot(vec3(cbLight._m0[_1987].xyz), vec3(_778, _779, _780));
    float _2039 = dot(vec3(cbLight._m0[_2025].xyz), vec3(_778, _779, _780));
    float _4171 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _4182 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
    float _2044 = (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * 0.3183098733425140380859375;
    float _2046 = (isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0))) * 0.3183098733425140380859375;
    float _2053 = ((cbLight._m0[_2004].x * _2010) * _2046) + ((cbLight._m0[_2014].x * _2021) * _2044);
    float _2054 = ((_2010 * cbLight._m0[_2004].y) * _2046) + ((_2021 * cbLight._m0[_2014].y) * _2044);
    float _2055 = ((_2010 * cbLight._m0[_2004].z) * _2046) + ((_2021 * cbLight._m0[_2014].z) * _2044);
    uvec4 _2059 = floatBitsToUint(cbLight._m0[_1987 + 12u]);
    bool _2061 = _2059.x == 0u;
    float _2072;
    float _2074;
    float _2076;
    if (_2061)
    {
        _2072 = _2053;
        _2074 = _2054;
        _2076 = _2055;
    }
    else
    {
        uint _2080 = _1987 + 6u;
        float _2096 = (dot(vec3(cbLight._m0[_1987 + 2u].xyz), vec3(_778, _779, _780)) * 0.5) + 0.5;
        float _2097 = _2096 * _2096;
        float _4193 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
        float _2098 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _2099 = isnan(1.0) ? _2002 : (isnan(_2002) ? 1.0 : min(_2002, 1.0));
        _2072 = (((cbLight._m0[_2080].x * 0.3183098733425140380859375) * _2098) * _2099) + _2053;
        _2074 = (((cbLight._m0[_2080].y * 0.3183098733425140380859375) * _2098) * _2099) + _2054;
        _2076 = (((cbLight._m0[_2080].z * 0.3183098733425140380859375) * _2098) * _2099) + _2055;
    }
    bool _2079 = _2059.y == 0u;
    float _2117;
    float _2119;
    float _2121;
    if (_2079)
    {
        _2117 = _2072;
        _2119 = _2074;
        _2121 = _2076;
    }
    else
    {
        uint _2287 = _1987 + 7u;
        float _2303 = (dot(vec3(cbLight._m0[_1987 + 3u].xyz), vec3(_778, _779, _780)) * 0.5) + 0.5;
        float _2304 = _2303 * _2303;
        float _4209 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0));
        float _2305 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
        float _2306 = isnan(1.0) ? _2003 : (isnan(_2003) ? 1.0 : min(_2003, 1.0));
        _2117 = (((cbLight._m0[_2287].x * 0.3183098733425140380859375) * _2305) * _2306) + _2072;
        _2119 = (((cbLight._m0[_2287].y * 0.3183098733425140380859375) * _2305) * _2306) + _2074;
        _2121 = (((cbLight._m0[_2287].z * 0.3183098733425140380859375) * _2305) * _2306) + _2076;
    }
    uint _2124 = _1987 + 8u;
    float _2137 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1987].w)) * _781) * 0.949999988079071044921875);
    float _2138 = _2137 * _2137;
    float _2139 = cbLight._m0[_1987].x + _858;
    float _2140 = cbLight._m0[_1987].y + _859;
    float _2141 = cbLight._m0[_1987].z + _860;
    float _2145 = inversesqrt(dot(vec3(_2139, _2140, _2141), vec3(_2139, _2140, _2141)));
    float _2146 = _2145 * _2139;
    float _2147 = _2145 * _2140;
    float _2148 = _2145 * _2141;
    float _2149 = dot(vec3(_778, _779, _780), vec3(cbLight._m0[_1987].xyz));
    float _4225 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
    float _2152 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
    float _4236 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _2153 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
    float _2154 = dot(vec3(_778, _779, _780), vec3(_2146, _2147, _2148));
    float _4247 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
    float _2157 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
    float _2158 = dot(vec3(cbLight._m0[_1987].xyz), vec3(_2146, _2147, _2148));
    float _4258 = isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0));
    float _2162 = _2138 * _2138;
    float _2166 = ((_2157 * _2157) * (_2162 + (-1.0))) + 1.0;
    float _2174 = exp2(log2(1.0 - (isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0)))) * 5.0);
    float _2175 = 0.959999978542327880859375 - _926;
    float _2177 = 0.959999978542327880859375 - _927;
    float _2178 = 0.959999978542327880859375 - _928;
    float _2185 = 1.0 - _2138;
    float _2196 = (0.5 / (((_2153 * ((_2152 * _2185) + _2138)) + 9.9999999392252902907785028219223e-09) + (((_2153 * _2185) + _2138) * _2152))) * _2152;
    float _4269 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
    float _2198 = (isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0))) * (_2162 / ((_2166 * _2166) * 3.141590118408203125));
    uint _2209 = _1987 + 9u;
    float _2220 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2025].w)) * _781) * 0.949999988079071044921875);
    float _2221 = _2220 * _2220;
    float _2222 = cbLight._m0[_2025].x + _858;
    float _2223 = cbLight._m0[_2025].y + _859;
    float _2224 = cbLight._m0[_2025].z + _860;
    float _2228 = inversesqrt(dot(vec3(_2222, _2223, _2224), vec3(_2222, _2223, _2224)));
    float _2229 = _2228 * _2222;
    float _2230 = _2228 * _2223;
    float _2231 = _2228 * _2224;
    float _2232 = dot(vec3(_778, _779, _780), vec3(cbLight._m0[_2025].xyz));
    float _4280 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
    float _2235 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
    float _2236 = dot(vec3(_778, _779, _780), vec3(_2229, _2230, _2231));
    float _4291 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
    float _2239 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
    float _2240 = dot(vec3(cbLight._m0[_2025].xyz), vec3(_2229, _2230, _2231));
    float _4302 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
    float _2244 = _2221 * _2221;
    float _2248 = ((_2239 * _2239) * (_2244 + (-1.0))) + 1.0;
    float _2255 = exp2(log2(1.0 - (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0)))) * 5.0);
    float _2262 = 1.0 - _2221;
    float _2272 = (0.5 / (((_2153 * ((_2235 * _2262) + _2221)) + 9.9999999392252902907785028219223e-09) + (((_2153 * _2262) + _2221) * _2235))) * _2235;
    float _4313 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
    float _2274 = (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0))) * (_2244 / ((_2248 * _2248) * 3.141590118408203125));
    float _2284 = (((((_2255 * _2175) + _929) * cbLight._m0[_2209].x) * _2274) * _2010) + (((((_2174 * _2175) + _929) * cbLight._m0[_2124].x) * _2198) * _2021);
    float _2285 = (((((_2255 * _2177) + _931) * cbLight._m0[_2209].y) * _2274) * _2010) + (((((_2174 * _2177) + _931) * cbLight._m0[_2124].y) * _2198) * _2021);
    float _2286 = (((((_2255 * _2178) + _932) * cbLight._m0[_2209].z) * _2274) * _2010) + (((((_2174 * _2178) + _932) * cbLight._m0[_2124].z) * _2198) * _2021);
    float _2348;
    float _2350;
    float _2352;
    if (_2061)
    {
        _2348 = _2284;
        _2350 = _2285;
        _2352 = _2286;
    }
    else
    {
        uint _2354 = _1987 + 2u;
        uint _2358 = _1987 + 10u;
        float _2372 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2354].w)) * _781) * 0.949999988079071044921875);
        float _2373 = _2372 * _2372;
        float _2374 = cbLight._m0[_2354].x + _858;
        float _2375 = cbLight._m0[_2354].y + _859;
        float _2376 = cbLight._m0[_2354].z + _860;
        float _2380 = inversesqrt(dot(vec3(_2374, _2375, _2376), vec3(_2374, _2375, _2376)));
        float _2381 = _2380 * _2374;
        float _2382 = _2380 * _2375;
        float _2383 = _2380 * _2376;
        float _2384 = dot(vec3(_778, _779, _780), vec3(cbLight._m0[_2354].xyz));
        float _4324 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
        float _2387 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _2388 = dot(vec3(_778, _779, _780), vec3(_2381, _2382, _2383));
        float _4335 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
        float _2391 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
        float _2392 = dot(vec3(cbLight._m0[_2354].xyz), vec3(_2381, _2382, _2383));
        float _4346 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
        float _2396 = _2373 * _2373;
        float _2400 = ((_2391 * _2391) * (_2396 + (-1.0))) + 1.0;
        float _2407 = exp2(log2(1.0 - (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0)))) * 5.0);
        float _2414 = 1.0 - _2373;
        float _2424 = (0.5 / (((_2153 * ((_2387 * _2414) + _2373)) + 9.9999999392252902907785028219223e-09) + (((_2153 * _2414) + _2373) * _2387))) * _2387;
        float _4357 = isnan(0.0) ? _2424 : (isnan(_2424) ? 0.0 : max(_2424, 0.0));
        float _2426 = (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0))) * (_2396 / ((_2400 * _2400) * 3.141590118408203125));
        float _2427 = isnan(1.0) ? _2002 : (isnan(_2002) ? 1.0 : min(_2002, 1.0));
        _2348 = (((((_2407 * _2175) + _929) * cbLight._m0[_2358].x) * _2426) * _2427) + _2284;
        _2350 = (((((_2407 * _2177) + _931) * cbLight._m0[_2358].y) * _2426) * _2427) + _2285;
        _2352 = (((((_2407 * _2178) + _932) * cbLight._m0[_2358].z) * _2426) * _2427) + _2286;
    }
    float _2462;
    float _2464;
    float _2466;
    if (_2079)
    {
        _2462 = _2348;
        _2464 = _2350;
        _2466 = _2352;
    }
    else
    {
        uint _2473 = _1987 + 3u;
        uint _2477 = _1987 + 11u;
        float _2491 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2473].w)) * _781) * 0.949999988079071044921875);
        float _2492 = _2491 * _2491;
        float _2493 = cbLight._m0[_2473].x + _858;
        float _2494 = cbLight._m0[_2473].y + _859;
        float _2495 = cbLight._m0[_2473].z + _860;
        float _2499 = inversesqrt(dot(vec3(_2493, _2494, _2495), vec3(_2493, _2494, _2495)));
        float _2500 = _2499 * _2493;
        float _2501 = _2499 * _2494;
        float _2502 = _2499 * _2495;
        float _2503 = dot(vec3(_778, _779, _780), vec3(cbLight._m0[_2473].xyz));
        float _4373 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
        float _2506 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
        float _2507 = dot(vec3(_778, _779, _780), vec3(_2500, _2501, _2502));
        float _4384 = isnan(0.0) ? _2507 : (isnan(_2507) ? 0.0 : max(_2507, 0.0));
        float _2510 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _2511 = dot(vec3(cbLight._m0[_2473].xyz), vec3(_2500, _2501, _2502));
        float _4395 = isnan(0.0) ? _2511 : (isnan(_2511) ? 0.0 : max(_2511, 0.0));
        float _2515 = _2492 * _2492;
        float _2519 = ((_2510 * _2510) * (_2515 + (-1.0))) + 1.0;
        float _2526 = exp2(log2(1.0 - (isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0)))) * 5.0);
        float _2533 = 1.0 - _2492;
        float _2543 = (0.5 / (((_2153 * ((_2506 * _2533) + _2492)) + 9.9999999392252902907785028219223e-09) + (((_2153 * _2533) + _2492) * _2506))) * _2506;
        float _4406 = isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0));
        float _2545 = (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0))) * (_2515 / ((_2519 * _2519) * 3.141590118408203125));
        float _2546 = isnan(1.0) ? _2003 : (isnan(_2003) ? 1.0 : min(_2003, 1.0));
        _2462 = (((((_2526 * _2175) + _929) * cbLight._m0[_2477].x) * _2545) * _2546) + _2348;
        _2464 = (((((_2526 * _2177) + _931) * cbLight._m0[_2477].y) * _2545) * _2546) + _2350;
        _2466 = (((((_2526 * _2178) + _932) * cbLight._m0[_2477].z) * _2545) * _2546) + _2352;
    }
    float _2681;
    float _2683;
    float _2685;
    float _2687;
    float _2689;
    float _2691;
    if (_1985.y == 0u)
    {
        float _2621 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2622 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2621;
        float _2623 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2621;
        float _2624 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2621;
        uvec4 _2636 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2637 = _2636.x;
        uint _2648 = uint((float(_2636.y) * floor(float(uint(cbSceneParam._m0[85u].y * _867) / _2637))) + floor(float(uint(cbSceneParam._m0[85u].x * _866) / _2637)));
        float _2658 = (log2(_2624 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2659 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
        uint _2662 = uint(isnan(14.0) ? _2659 : (isnan(_2659) ? 14.0 : min(_2659, 14.0)));
        uvec4 _2667 = texelFetch(g_lightClusterGridBuffer, int(((_2662 << 2u) + (_2648 << 6u)) >> 2u));
        uint _2668 = _2667.x;
        uint _2669 = _2636.z;
        float _2769;
        float _2771;
        float _2773;
        float _2775;
        float _2777;
        float _2779;
        if (((((1u << ((_2669 >> 4u) & 15u)) + 4294967295u) & _2668) == 0u) || ((_2669 & 240u) == 0u))
        {
            _2769 = 0.0;
            _2771 = 0.0;
            _2773 = 0.0;
            _2775 = 0.0;
            _2777 = 0.0;
            _2779 = 0.0;
        }
        else
        {
            float _2770;
            float _2772;
            float _2774;
            float _2776;
            float _2778;
            float _2780;
            float _2914 = 0.0;
            float _2915 = 0.0;
            float _2916 = 0.0;
            float _2917 = 0.0;
            float _2918 = 0.0;
            float _2919 = 0.0;
            uint _2920 = 0u;
            uint _2929;
            bool _2930;
            for (;;)
            {
                _2929 = texelFetch(g_lightClassification, int((((_2662 << 5u) + (_2648 << 9u)) + (_2920 << 2u)) >> 2u)).x;
                _2930 = _2929 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2930)
                {
                    frontier_phi_61_pred = _2914;
                    frontier_phi_61_pred_1 = _2919;
                    frontier_phi_61_pred_2 = _2918;
                    frontier_phi_61_pred_3 = _2917;
                    frontier_phi_61_pred_4 = _2916;
                    frontier_phi_61_pred_5 = _2915;
                }
                else
                {
                    float _3038;
                    float _3039;
                    float _3040;
                    float _3041;
                    float _3042;
                    float _3043;
                    uint _3044;
                    _3038 = _2914;
                    _3039 = _2915;
                    _3040 = _2916;
                    _3041 = _2917;
                    _3042 = _2918;
                    _3043 = _2919;
                    _3044 = _2929;
                    float _2970;
                    float _2971;
                    float _2972;
                    float _2973;
                    float _2974;
                    float _2975;
                    for (;;)
                    {
                        uint _3048 = uint(findLSB(_3044)) + (_2920 << 5u);
                        uint _3045 = (_3044 + 4294967295u) & _3044;
                        uint _3050 = _3048 * 48u;
                        vec4 _3064 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3050)).x, texelFetch(g_PointLightRenderingBuffer, int(_3050 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3050 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3050 + 3u)).x));
                        uint _3070 = (_3048 * 48u) + 4u;
                        vec4 _3083 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3070)).x, texelFetch(g_PointLightRenderingBuffer, int(_3070 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3070 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3070 + 3u)).x));
                        uint _3089 = (_3048 * 48u) + 8u;
                        vec3 _3100 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3089)).x, texelFetch(g_PointLightRenderingBuffer, int(_3089 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3089 + 2u)).x));
                        float _3104 = _3064.x - _2622;
                        float _3105 = _3064.y - _2623;
                        float _3106 = _3064.z - _2624;
                        float _3107 = dot(vec3(_3104, _3105, _3106), vec3(_3104, _3105, _3106));
                        float _3110 = inversesqrt(_3107);
                        float _3111 = _3110 * _3104;
                        float _3112 = _3110 * _3105;
                        float _3113 = _3110 * _3106;
                        float _3114 = dot(vec3(_885, _888, _891), vec3(_3111, _3112, _3113));
                        float _3119 = 1.0 - (_3107 * _3064.w);
                        float _4432 = isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0));
                        float _3120 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
                        float _3121 = sqrt(_3107) * _3083.w;
                        float _3124 = 1.39999997615814208984375 / (_3121 + 1.39999997615814208984375);
                        float _3125 = _3124 * _3124;
                        float _3128 = ((1.0 - _3125) * _3114) + _3125;
                        float _3131 = _3121 * _3121;
                        float _3135 = ((isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0))) * _3120) / ((_3131 * 0.699999988079071044921875) + 1.0);
                        float _3139 = (-0.0) - _2622;
                        float _3140 = (-0.0) - _2623;
                        float _3141 = (-0.0) - _2624;
                        float _3145 = inversesqrt(dot(vec3(_3139, _3140, _3141), vec3(_3139, _3140, _3141)));
                        float _3146 = _3145 * _3139;
                        float _3147 = _3145 * _3140;
                        float _3148 = _3145 * _3141;
                        float _3156 = exp2(log2(1.0 / ((_3131 * 3.5) + 5.0)) * 0.25);
                        float _3157 = 1.0 - _960;
                        float _3164 = sqrt(1.0 - ((1.0 - (_3157 * _3157)) * (1.0 - (_3156 * _3156))));
                        float _3165 = _3164 * _3164;
                        float _3166 = _3165 * _3165;
                        float _3167 = _3146 + _3111;
                        float _3168 = _3147 + _3112;
                        float _3169 = _3148 + _3113;
                        float _3173 = inversesqrt(dot(vec3(_3167, _3168, _3169), vec3(_3167, _3168, _3169)));
                        float _3177 = dot(vec3(_885, _888, _891), vec3(_3146, _3147, _3148));
                        float _4448 = isnan(0.0) ? _3177 : (isnan(_3177) ? 0.0 : max(_3177, 0.0));
                        float _3180 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
                        float _3181 = dot(vec3(_885, _888, _891), vec3(_3173 * _3167, _3173 * _3168, _3173 * _3169));
                        float _4459 = isnan(0.0) ? _3181 : (isnan(_3181) ? 0.0 : max(_3181, 0.0));
                        float _3184 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
                        float _3188 = ((_3184 * _3184) * (_3166 + (-1.0))) + 1.0;
                        float _3189 = _3124 * _3165;
                        float _3190 = _3189 * _3189;
                        float _3193 = ((1.0 - _3190) * _3114) + _3190;
                        float _4470 = isnan(0.0) ? _3193 : (isnan(_3193) ? 0.0 : max(_3193, 0.0));
                        float _3194 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
                        float _3195 = 1.0 - _3165;
                        float _3205 = (0.5 / (((_3194 * ((_3180 * _3195) + _3165)) + 9.9999999392252902907785028219223e-09) + (((_3194 * _3195) + _3165) * _3180))) * _3194;
                        float _4481 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                        float _3216 = (((_3166 * 3.1415927410125732421875) * (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0)))) / ((_3188 * _3188) * ((_3131 * 2.1991131305694580078125) + 3.141590118408203125))) * _3120;
                        _2973 = (_3135 * _3083.x) + _3041;
                        _2974 = (_3135 * _3083.y) + _3042;
                        _2975 = (_3135 * _3083.z) + _3043;
                        _2970 = (_3216 * _3100.x) + _3038;
                        _2971 = (_3216 * _3100.y) + _3039;
                        _2972 = (_3216 * _3100.z) + _3040;
                        if (_3045 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3038 = _2970;
                            _3039 = _2971;
                            _3040 = _2972;
                            _3041 = _2973;
                            _3042 = _2974;
                            _3043 = _2975;
                            _3044 = _3045;
                        }
                    }
                    frontier_phi_61_pred = _2970;
                    frontier_phi_61_pred_1 = _2975;
                    frontier_phi_61_pred_2 = _2974;
                    frontier_phi_61_pred_3 = _2973;
                    frontier_phi_61_pred_4 = _2972;
                    frontier_phi_61_pred_5 = _2971;
                }
                _2770 = frontier_phi_61_pred;
                _2780 = frontier_phi_61_pred_1;
                _2778 = frontier_phi_61_pred_2;
                _2776 = frontier_phi_61_pred_3;
                _2774 = frontier_phi_61_pred_4;
                _2772 = frontier_phi_61_pred_5;
                uint _2921 = _2920 + 1u;
                if (_2921 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2914 = _2770;
                    _2915 = _2772;
                    _2916 = _2774;
                    _2917 = _2776;
                    _2918 = _2778;
                    _2919 = _2780;
                    _2920 = _2921;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2769 = _2770;
            _2771 = _2772;
            _2773 = _2774;
            _2775 = _2776;
            _2777 = _2778;
            _2779 = _2780;
        }
        uvec4 _2783 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2784 = _2783.z;
        uint _2786 = (_2784 >> 8u) & 15u;
        float _2882;
        float _2884;
        float _2886;
        float _2888;
        float _2890;
        float _2892;
        if (((4294967295u << _2786) & _2668) == 0u)
        {
            _2882 = _2769;
            _2884 = _2771;
            _2886 = _2773;
            _2888 = _2775;
            _2890 = _2777;
            _2892 = _2779;
        }
        else
        {
            float _2907 = inversesqrt(dot(vec3(_2622, _2623, _2624), vec3(_2622, _2623, _2624)));
            float _2908 = _2907 * _2622;
            float _2909 = _2907 * _2623;
            float _2910 = _2907 * _2624;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2786 < ((_2784 >> 12u) & 15u))
            {
                float _2883;
                float _2885;
                float _2887;
                float _2889;
                float _2891;
                float _2893;
                float _3021 = _2769;
                float _3022 = _2771;
                float _3023 = _2773;
                float _3024 = _2775;
                float _3025 = _2777;
                float _3026 = _2779;
                uint _3027 = _2786;
                uint _3036;
                bool _3037;
                for (;;)
                {
                    _3036 = texelFetch(g_lightClassification, int((((_2662 << 5u) + (_2648 << 9u)) + (_3027 << 2u)) >> 2u)).x;
                    _3037 = _3036 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3037)
                    {
                        frontier_phi_67_pred = _3024;
                        frontier_phi_67_pred_1 = _3025;
                        frontier_phi_67_pred_2 = _3026;
                        frontier_phi_67_pred_3 = _3023;
                        frontier_phi_67_pred_4 = _3022;
                        frontier_phi_67_pred_5 = _3021;
                    }
                    else
                    {
                        float _3221;
                        float _3222;
                        float _3223;
                        float _3224;
                        float _3225;
                        float _3226;
                        float _3515;
                        float _3516;
                        float _3517;
                        float _3518;
                        float _3519;
                        float _3520;
                        float _3234 = _3021;
                        float _3235 = _3022;
                        float _3236 = _3023;
                        float _3237 = _3024;
                        float _3238 = _3025;
                        float _3239 = _3026;
                        uint _3240 = _3036;
                        uint _3241;
                        vec4 _3266;
                        float _3267;
                        vec4 _3282;
                        vec3 _3294;
                        vec4 _3309;
                        vec4 _3324;
                        float _3371;
                        bool _3372;
                        for (;;)
                        {
                            uint _3251 = ((_3027 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3240));
                            _3241 = (_3240 + 4294967295u) & _3240;
                            uint _3253 = _3251 * 40u;
                            _3266 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3253)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3253 + 3u)).x));
                            _3267 = _3266.w;
                            uint _3269 = (_3251 * 40u) + 4u;
                            _3282 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3269)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 3u)).x));
                            uint _3284 = (_3251 * 40u) + 8u;
                            _3294 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3284)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 2u)).x));
                            uint _3296 = (_3251 * 40u) + 16u;
                            _3309 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3296)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3296 + 3u)).x));
                            uint _3311 = (_3251 * 40u) + 20u;
                            _3324 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3311)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3311 + 3u)).x));
                            uint _3327 = (_3251 * 40u) + 24u;
                            vec4 _3340 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3327)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3327 + 3u)).x));
                            uint _3346 = (_3251 * 40u) + 28u;
                            vec4 _3359 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3346)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3346 + 3u)).x));
                            _3371 = fma(_2624, _3359.z, fma(_2623, _3359.y, _3359.x * _2622)) + _3359.w;
                            _3372 = !((fma(_2624, _3340.z, fma(_2623, _3340.y, _3340.x * _2622)) + _3340.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3372)
                            {
                                float _3399 = _3266.x - _2622;
                                float _3400 = _3266.y - _2623;
                                float _3401 = _3266.z - _2624;
                                float _3402 = dot(vec3(_3399, _3400, _3401), vec3(_3399, _3400, _3401));
                                float _3405 = inversesqrt(_3402);
                                float _3406 = _3405 * _3399;
                                float _3407 = _3405 * _3400;
                                float _3408 = _3405 * _3401;
                                float _3412 = 1.0 - (_3402 / (_3267 * _3267));
                                float _4492 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                                float _3413 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
                                float _3417 = sqrt(_3402) * _3282.w;
                                float _3419 = 1.39999997615814208984375 / (_3417 + 1.39999997615814208984375);
                                float _3420 = _3419 * _3419;
                                float _3423 = ((1.0 - _3420) * dot(vec3(_3406, _3407, _3408), vec3(_885, _888, _891))) + _3420;
                                float _3426 = _3417 * _3417;
                                float _3430 = (fma(_2624, _3309.z, fma(_2623, _3309.y, _3309.x * _2622)) + _3309.w) / _3371;
                                float _3431 = (fma(_2624, _3324.z, fma(_2623, _3324.y, _3324.x * _2622)) + _3324.w) / _3371;
                                float _3435 = 1.0 - dot(vec2(_3430, _3431), vec2(_3430, _3431));
                                float _4508 = isnan(0.0) ? _3435 : (isnan(_3435) ? 0.0 : max(_3435, 0.0));
                                float _3436 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
                                float _3437 = _3436 * (((isnan(0.0) ? _3423 : (isnan(_3423) ? 0.0 : max(_3423, 0.0))) * _3413) / ((_3426 * 0.699999988079071044921875) + 1.0));
                                float _3449 = exp2(log2(1.0 / ((_3426 * 3.5) + 5.0)) * 0.25);
                                float _3450 = 1.0 - _960;
                                float _3457 = sqrt(1.0 - ((1.0 - (_3450 * _3450)) * (1.0 - (_3449 * _3449))));
                                float _3458 = _3457 * _3457;
                                float _3459 = _3458 * _3458;
                                float _3460 = _3406 - _2908;
                                float _3461 = _3407 - _2909;
                                float _3462 = _3408 - _2910;
                                float _3466 = inversesqrt(dot(vec3(_3460, _3461, _3462), vec3(_3460, _3461, _3462)));
                                float _3470 = dot(vec3(_885, _888, _891), vec3((-0.0) - _2908, (-0.0) - _2909, (-0.0) - _2910));
                                float _4519 = isnan(0.0) ? _3470 : (isnan(_3470) ? 0.0 : max(_3470, 0.0));
                                float _3473 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
                                float _3474 = dot(vec3(_885, _888, _891), vec3(_3466 * _3460, _3466 * _3461, _3466 * _3462));
                                float _4530 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0));
                                float _3477 = isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0));
                                float _3481 = ((_3477 * _3477) * (_3459 + (-1.0))) + 1.0;
                                float _3482 = _3419 * _3458;
                                float _3483 = _3482 * _3482;
                                float _3489 = ((1.0 - _3483) * dot(vec3(_885, _888, _891), vec3(_3406, _3407, _3408))) + _3483;
                                float _4541 = isnan(0.0) ? _3489 : (isnan(_3489) ? 0.0 : max(_3489, 0.0));
                                float _3490 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
                                float _3491 = 1.0 - _3458;
                                float _3501 = (0.5 / (((_3490 * ((_3473 * _3491) + _3458)) + 9.9999999392252902907785028219223e-09) + (((_3490 * _3491) + _3458) * _3473))) * _3490;
                                float _4552 = isnan(0.0) ? _3501 : (isnan(_3501) ? 0.0 : max(_3501, 0.0));
                                float _3511 = (_3436 * _3413) * (((_3459 * 3.1415927410125732421875) * (isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0)))) / ((_3481 * _3481) * ((_3426 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3511 * _3294.x;
                                frontier_phi_73_pred_1 = _3511 * _3294.y;
                                frontier_phi_73_pred_2 = _3437 * _3282.z;
                                frontier_phi_73_pred_3 = _3437 * _3282.y;
                                frontier_phi_73_pred_4 = _3437 * _3282.x;
                                frontier_phi_73_pred_5 = _3511 * _3294.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3515 = frontier_phi_73_pred;
                            _3516 = frontier_phi_73_pred_1;
                            _3520 = frontier_phi_73_pred_2;
                            _3519 = frontier_phi_73_pred_3;
                            _3518 = frontier_phi_73_pred_4;
                            _3517 = frontier_phi_73_pred_5;
                            _3224 = _3518 + _3237;
                            _3225 = _3519 + _3238;
                            _3226 = _3520 + _3239;
                            _3221 = _3515 + _3234;
                            _3222 = _3516 + _3235;
                            _3223 = _3517 + _3236;
                            if (_3241 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3234 = _3221;
                                _3235 = _3222;
                                _3236 = _3223;
                                _3237 = _3224;
                                _3238 = _3225;
                                _3239 = _3226;
                                _3240 = _3241;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3224;
                        frontier_phi_67_pred_1 = _3225;
                        frontier_phi_67_pred_2 = _3226;
                        frontier_phi_67_pred_3 = _3223;
                        frontier_phi_67_pred_4 = _3222;
                        frontier_phi_67_pred_5 = _3221;
                    }
                    _2889 = frontier_phi_67_pred;
                    _2891 = frontier_phi_67_pred_1;
                    _2893 = frontier_phi_67_pred_2;
                    _2887 = frontier_phi_67_pred_3;
                    _2885 = frontier_phi_67_pred_4;
                    _2883 = frontier_phi_67_pred_5;
                    uint _3028 = _3027 + 1u;
                    if (_3028 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3021 = _2883;
                        _3022 = _2885;
                        _3023 = _2887;
                        _3024 = _2889;
                        _3025 = _2891;
                        _3026 = _2893;
                        _3027 = _3028;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2891;
                frontier_phi_55_56_ladder_1 = _2893;
                frontier_phi_55_56_ladder_2 = _2889;
                frontier_phi_55_56_ladder_3 = _2887;
                frontier_phi_55_56_ladder_4 = _2885;
                frontier_phi_55_56_ladder_5 = _2883;
            }
            else
            {
                frontier_phi_55_56_ladder = _2777;
                frontier_phi_55_56_ladder_1 = _2779;
                frontier_phi_55_56_ladder_2 = _2775;
                frontier_phi_55_56_ladder_3 = _2773;
                frontier_phi_55_56_ladder_4 = _2771;
                frontier_phi_55_56_ladder_5 = _2769;
            }
            _2882 = frontier_phi_55_56_ladder_5;
            _2884 = frontier_phi_55_56_ladder_4;
            _2886 = frontier_phi_55_56_ladder_3;
            _2888 = frontier_phi_55_56_ladder_2;
            _2890 = frontier_phi_55_56_ladder;
            _2892 = frontier_phi_55_56_ladder_1;
        }
        float _2897 = isnan(1.0) ? _944 : (isnan(_944) ? 1.0 : min(_944, 1.0));
        _2681 = (_2897 * _2888) + _2117;
        _2683 = (_2897 * _2890) + _2119;
        _2685 = (_2897 * _2892) + _2121;
        _2687 = ((_2882 * _929) * _2897) + _2462;
        _2689 = ((_2884 * _931) * _2897) + _2464;
        _2691 = ((_2886 * _932) * _2897) + _2466;
    }
    else
    {
        _2681 = _2117;
        _2683 = _2119;
        _2685 = _2121;
        _2687 = _2462;
        _2689 = _2464;
        _2691 = _2466;
    }
    float _4568 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _4579 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
    float _4590 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    uint _2711 = _904 + 6u;
    float _2719 = _866 / cbSceneParam._m0[86u].x;
    float _2720 = _867 / cbSceneParam._m0[86u].y;
    vec4 _2734 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2719, _2720, (log2((isnan(cbSceneParam._m0[77u].w) ? _801 : (isnan(_801) ? cbSceneParam._m0[77u].w : min(_801, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2736 = _2734.x;
    float _2737 = _2734.y;
    float _2738 = _2734.z;
    float _2739 = _2734.w;
    float _2832;
    float _2834;
    float _2836;
    float _2838;
    if (_801 > cbSceneParam._m0[78u].w)
    {
        float _2794 = isnan(_801) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _801 : min(cbSceneParam._m0[80u].w, _801));
        float _2795 = _2794 / _801;
        float _2806 = _2795 * _851;
        float _2807 = _852 * _2795;
        float _2808 = (-0.0) - _2807;
        float _2810 = _2795 * _853;
        float _2812 = (cbSceneParam._m0[77u].w * _2808) / _2794;
        float _2813 = _2812 + cbSceneParam._m0[79u].w;
        float _2814 = cbSceneParam._m0[79u].w - _2807;
        float _2820 = sqrt(((_2806 * _2806) + (_2807 * _2807)) + (_2810 * _2810));
        float _2823 = (1.0 - (cbSceneParam._m0[77u].w / _2794)) * _2820;
        float _2828 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2830 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2983;
        if (abs((_2808 - _2812) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2983 = ((((_2813 > 0.0) ? exp2(_2828 * _2813) : (2.0 - exp2(_2830 * _2813))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2823;
        }
        else
        {
            float _2943 = 1.0 / cbSceneParam._m0[80u].x;
            float _2944 = isnan(_2814) ? _2813 : (isnan(_2813) ? _2814 : max(_2813, _2814));
            float _2945 = isnan(_2814) ? _2813 : (isnan(_2813) ? _2814 : min(_2813, _2814));
            float _2954 = isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : min(_2944, 0.0));
            float _2955 = isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : min(_2945, 0.0));
            _2983 = ((abs(_2820 / _2808) * cbSceneParam._m0[80u].y) * ((((_2954 - _2955) * 2.0) - ((exp2(_2828 * (isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0)))) - exp2(_2828 * (isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0))))) * _2943)) - ((exp2(_2830 * _2954) - exp2(_2830 * _2955)) * _2943))) + (_2823 * cbSceneParam._m0[80u].z);
        }
        vec4 _2985 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2719, _2720, 1.0), 0.0);
        float _2994 = exp2((_2983 * (-1.44269502162933349609375)) * (1.0 - _2985.w));
        float _2995 = log2(_2994);
        float _3011 = log2(_2739);
        _2832 = (exp2(_3011 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2995 * cbSceneParam._m0[78u].x)) * _2985.x) / cbSceneParam._m0[78u].x)) + _2736;
        _2834 = (exp2(_3011 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2995 * cbSceneParam._m0[78u].y)) * _2985.y) / cbSceneParam._m0[78u].y)) + _2737;
        _2836 = (exp2(_3011 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2995 * cbSceneParam._m0[78u].z)) * _2985.z) / cbSceneParam._m0[78u].z)) + _2738;
        _2838 = _2994 * _2739;
    }
    else
    {
        _2832 = _2736;
        _2834 = _2737;
        _2836 = _2738;
        _2838 = _2739;
    }
    float _2850 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2851 = _2850 == 3.0;
    float _2852 = log2(_2838);
    float _2859 = exp2(_2852 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0))) * (_2681 + ((isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0))) * _944))) + ((_2687 + ((isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0))) * _1754)) * cbPerFrame._m0[3u].x));
    float _2860 = exp2(_2852 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0))) * (_2683 + ((isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0))) * _944))) + ((_2689 + ((isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0))) * _1754)) * cbPerFrame._m0[3u].x));
    float _2861 = exp2(_2852 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0))) * (_2685 + ((isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0))) * _944))) + ((_2691 + ((isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0))) * _1754)) * cbPerFrame._m0[3u].x));
    float _2870 = (_2850 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2870 * (_2851 ? _2859 : (_2859 + (cbSceneParam._m0[72u].w * _2832)));
    SV_Target.y = _2870 * (_2851 ? _2860 : (_2860 + (cbSceneParam._m0[72u].w * _2834)));
    SV_Target.z = _2870 * (_2851 ? _2861 : (_2861 + (cbSceneParam._m0[72u].w * _2836)));
    SV_Target.w = cbInstanceData._m0[_2711].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2711].w;
}


