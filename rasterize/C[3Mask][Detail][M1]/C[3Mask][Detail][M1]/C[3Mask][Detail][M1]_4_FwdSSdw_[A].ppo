#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1292;
float _3699;
float _3700;
float _3701;
float _3702;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _252 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _258 = _252.x * cbMtdParam._m0[10u].x;
    float _259 = _252.y * cbMtdParam._m0[10u].y;
    float _260 = _252.z * cbMtdParam._m0[10u].z;
    vec4 _278 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _328 = cbMtdParam._m0[18u].y * texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x;
    float _339 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].x * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].y * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _328)) + 1.0;
    float _3711 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _340 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
    float _347 = (_340 * ((_278.x * cbMtdParam._m0[11u].x) - _258)) + _258;
    float _348 = (_340 * ((_278.y * cbMtdParam._m0[11u].y) - _259)) + _259;
    float _349 = (_340 * ((_278.z * cbMtdParam._m0[11u].z) - _260)) + _260;
    vec4 _367 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _394 = ((cbMtdParam._m0[17u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _328)) + 1.0;
    float _3722 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _395 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
    float _402 = (_395 * ((_367.x * cbMtdParam._m0[12u].x) - _347)) + _347;
    float _403 = (_395 * ((_367.y * cbMtdParam._m0[12u].y) - _348)) + _348;
    float _404 = (_395 * ((_367.z * cbMtdParam._m0[12u].z) - _349)) + _349;
    vec4 _421 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _446 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[18u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[18u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _328)) + 1.0;
    float _3733 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _447 = isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0));
    vec4 _475 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _483 = ((((_447 * ((_421.x * cbMtdParam._m0[13u].x) - _402)) + _402) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _475.x;
    float _486 = ((((_447 * ((_421.y * cbMtdParam._m0[13u].y) - _403)) + _403) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _475.y;
    float _489 = ((((_447 * ((_421.z * cbMtdParam._m0[13u].z) - _404)) + _404) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _475.z;
    vec4 _502 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _504 = _502.x;
    float _522 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _504) * _340) + _504;
    float _539 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _522) * _395) + _522;
    float _556 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _539) * _447) + _539;
    vec4 _569 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _571 = _569.x;
    float _572 = _569.y;
    float _575 = cbMtdParam._m0[17u].y * _569.z;
    vec4 _587 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _596 = (((cbMtdParam._m0[17u].x * _587.z) - _575) * _340) + _575;
    vec4 _609 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _621 = (((cbMtdParam._m0[16u].w * _609.z) - _596) * _395) + _596;
    vec4 _634 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _643 = (((cbMtdParam._m0[16u].z * _634.z) - _621) * _447) + _621;
    vec4 _656 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _669 = ((_587.x - _571) * _340) + _571;
    float _670 = ((_587.y - _572) * _340) + _572;
    float _675 = ((_609.x - _669) * _395) + _669;
    float _676 = ((_609.y - _670) * _395) + _670;
    float _685 = ((((_634.x - _675) * _447) + _675) * 2.0) + (-1.0);
    float _686 = ((((_634.y - _676) * _447) + _676) * 2.0) + (-1.0);
    float _687 = dot(vec2(_685, _686), vec2(_685, _686));
    float _3744 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
    float _692 = sqrt(1.0 - (isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0))));
    float _695 = (((_656.x * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _685;
    float _696 = (((_656.y * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _686;
    float _699 = fma(_692, _222 * NORMAL.x, fma(_696, _229 * TANGENT.x, (_215 * _207) * _695));
    float _702 = fma(_692, _222 * NORMAL.y, fma(_696, _229 * TANGENT.y, (_215 * _208) * _695));
    float _705 = fma(_692, _222 * NORMAL.z, fma(_696, _229 * TANGENT.z, (_215 * _209) * _695));
    float _709 = inversesqrt(dot(vec3(_699, _702, _705), vec3(_699, _702, _705)));
    float _710 = _709 * _699;
    float _711 = _709 * _702;
    float _712 = _709 * _705;
    float _3755 = isnan(0.0) ? _643 : (isnan(_643) ? 0.0 : max(_643, 0.0));
    float _713 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
    float _3766 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _3777 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _3788 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _3799 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _717 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
    float _733 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _773 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _783 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _773);
    float _784 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _773);
    float _785 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _773);
    float _789 = inversesqrt(dot(vec3(_783, _784, _785), vec3(_783, _784, _785)));
    float _790 = _783 * _789;
    float _791 = _784 * _789;
    float _792 = _785 * _789;
    vec4 _797 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _799 = _797.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _971 = sqrt(((_783 * _783) + (_784 * _784)) + (_785 * _785));
        float _977 = (cbMatDynParam._m0[5u].x * _971) + cbMatDynParam._m0[5u].y;
        float _3810 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _982 = (cbMatDynParam._m0[5u].z * _971) + cbMatDynParam._m0[5u].w;
        float _3821 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) - _978)) + _978) < ((_799 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _810 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _811 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _829 = fma(_712, cbSceneParam._m0[5u].z, fma(_711, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _710));
    float _832 = fma(_712, cbSceneParam._m0[6u].z, fma(_711, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _710));
    float _835 = fma(_712, cbSceneParam._m0[7u].z, fma(_711, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _710));
    uint _848 = uint(roundEven(NORMAL.w)) * 13u;
    uint _849 = _848 + 9u;
    uint _850 = _849 + uint(cbMatDynParam._m0[0u].w);
    float _856 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0)))) * cbInstanceData._m0[_850].x;
    float _857 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0)))) * cbInstanceData._m0[_850].y;
    float _858 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0)))) * cbInstanceData._m0[_850].z;
    float _3832 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
    float _859 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
    float _3843 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _860 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
    float _3854 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
    float _861 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
    float _862 = 1.0 - _717;
    float _863 = _859 * _862;
    float _864 = _860 * _862;
    float _865 = _861 * _862;
    float _870 = (_859 + (-0.039999999105930328369140625)) * _717;
    float _871 = (_860 + (-0.039999999105930328369140625)) * _717;
    float _872 = (_861 + (-0.039999999105930328369140625)) * _717;
    float _873 = _870 + 0.039999999105930328369140625;
    float _875 = _871 + 0.039999999105930328369140625;
    float _876 = _872 + 0.039999999105930328369140625;
    vec4 _885 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _810, cbSceneParam._m0[86u].y * _811));
    float _888 = _885.x * TEXCOORD_5.w;
    float _889 = dot(vec3(_710, _711, _712), vec3(_790, _791, _792));
    float _892 = _889 * 2.0;
    float _896 = (_892 * _710) - _790;
    float _897 = (_892 * _711) - _791;
    float _898 = (_892 * _712) - _792;
    float _902 = abs(dot(vec3(_790, _791, _792), vec3(_710, _711, _712)));
    float _3865 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _904 = sqrt(_713);
    float _917 = exp2((_904 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_904 * 3.0));
    float _923 = (1.0 - _917) * ((_904 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _924 = _917 * _904;
    float _952 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _956 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _960 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1291;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1016 = fma(_960, cbModelParam._m0[26u].z, fma(_956, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _952));
        float _1020 = fma(_960, cbModelParam._m0[27u].z, fma(_956, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _952));
        float _1024 = fma(_960, cbModelParam._m0[28u].z, fma(_956, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _952));
        float _1049 = _952 + _710;
        float _1050 = _956 + _711;
        float _1051 = _960 + _712;
        float _1061 = fma(_1051, cbModelParam._m0[26u].z, fma(_1050, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1049)) - _1016;
        float _1062 = fma(_1051, cbModelParam._m0[27u].z, fma(_1050, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1049)) - _1020;
        float _1063 = fma(_1051, cbModelParam._m0[28u].z, fma(_1050, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1049)) - _1024;
        float _1067 = inversesqrt(dot(vec3(_1061, _1062, _1063), vec3(_1061, _1062, _1063)));
        float _1080 = ((_1067 * _1061) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1016 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1081 = ((_1067 * _1062) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1020 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1082 = ((_1067 * _1063) / cbModelParam._m0[34u].z) + ((((((_1024 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1085 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1080, _1081, _1082), 0.0);
        vec4 _1092 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1080, _1081, _1082), 0.0);
        vec4 _1099 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1080, _1081, _1082), 0.0);
        vec4 _1106 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1080, _1081, _1082), 0.0);
        float _1119 = exp2((_1085.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1085.x + (-0.5));
        float _1121 = _1119 * (_1085.y + (-0.5));
        float _1122 = _1119 * (_1085.z + (-0.5));
        float _1129 = exp2((_1092.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1092.x + (-0.5));
        float _1131 = _1129 * (_1092.y + (-0.5));
        float _1132 = _1129 * (_1092.z + (-0.5));
        float _1139 = exp2((_1099.w + (-0.5)) * 20.0) * 2.0;
        float _1140 = _1139 * (_1099.x + (-0.5));
        float _1141 = _1139 * (_1099.y + (-0.5));
        float _1142 = _1139 * (_1099.z + (-0.5));
        float _1149 = exp2((_1106.w + (-0.5)) * 20.0) * 2.0;
        float _1150 = _1149 * (_1106.x + (-0.5));
        float _1151 = _1149 * (_1106.y + (-0.5));
        float _1152 = _1149 * (_1106.z + (-0.5));
        float _1153 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1154 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1155 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1156 = _1120 * 0.5;
        float _1157 = _1130 * 0.5;
        float _1158 = _1140 * 0.5;
        float _1159 = dot(vec3(_1156, _1157, _1158), vec3(_1156, _1157, _1158));
        float _1164 = (_1159 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1159);
        float _1173 = (dot(vec3(_710, _711, _712), vec3(_1164 * _1156, _1164 * _1157, _1164 * _1158)) + 1.0) * 0.5;
        float _3891 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1183 = sqrt(((_1157 * _1157) + (_1156 * _1156)) + (_1158 * _1158)) / (_1153 + 9.9999997473787516355514526367188e-06);
        float _3902 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1185 = _1184 * 2.0;
        float _1189 = (1.0 - _1184) / (_1184 + 1.0);
        float _3913 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1199 = ((((1.0 - _1190) * (_1185 + 2.0)) * exp2(log2(isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * (_1185 + 1.0))) + _1190) * _1153;
        float _1200 = _1121 * 0.5;
        float _1201 = _1131 * 0.5;
        float _1202 = _1141 * 0.5;
        float _1203 = dot(vec3(_1200, _1201, _1202), vec3(_1200, _1201, _1202));
        float _1208 = (_1203 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1203);
        float _1216 = (dot(vec3(_710, _711, _712), vec3(_1208 * _1200, _1208 * _1201, _1208 * _1202)) + 1.0) * 0.5;
        float _3924 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1225 = sqrt(((_1201 * _1201) + (_1200 * _1200)) + (_1202 * _1202)) / (_1154 + 9.9999997473787516355514526367188e-06);
        float _3935 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1227 = _1226 * 2.0;
        float _1231 = (1.0 - _1226) / (_1226 + 1.0);
        float _3946 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1241 = ((((1.0 - _1232) * (_1227 + 2.0)) * exp2(log2(isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * (_1227 + 1.0))) + _1232) * _1154;
        float _1242 = _1122 * 0.5;
        float _1243 = _1132 * 0.5;
        float _1244 = _1142 * 0.5;
        float _1245 = dot(vec3(_1242, _1243, _1244), vec3(_1242, _1243, _1244));
        float _1250 = (_1245 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1245);
        float _1258 = (dot(vec3(_710, _711, _712), vec3(_1250 * _1242, _1250 * _1243, _1250 * _1244)) + 1.0) * 0.5;
        float _3957 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1267 = sqrt(((_1243 * _1243) + (_1242 * _1242)) + (_1244 * _1244)) / (_1155 + 9.9999997473787516355514526367188e-06);
        float _3968 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1269 = _1268 * 2.0;
        float _1273 = (1.0 - _1268) / (_1268 + 1.0);
        float _3979 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1283 = ((((1.0 - _1274) * (_1269 + 2.0)) * exp2(log2(isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * (_1269 + 1.0))) + _1274) * _1155;
        _1291 = _1122;
        _1293 = _1121;
        _1294 = _1120;
        _1295 = _1132;
        _1296 = _1131;
        _1297 = _1130;
        _1298 = _1142;
        _1299 = _1141;
        _1300 = _1140;
        _1301 = _1155;
        _1302 = _1154;
        _1303 = _1153;
        _1304 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0)));
        _1305 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0)));
        _1306 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)));
    }
    else
    {
        _1291 = _1292;
        _1293 = _1292;
        _1294 = _1292;
        _1295 = _1292;
        _1296 = _1292;
        _1297 = _1292;
        _1298 = _1292;
        _1299 = _1292;
        _1300 = _1292;
        _1301 = _1292;
        _1302 = _1292;
        _1303 = _1292;
        _1304 = 0.0;
        _1305 = 0.0;
        _1306 = 0.0;
    }
    float _1604;
    float _1605;
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1335 = fma(_960, cbModelParam._m0[30u].z, fma(_956, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _952));
        float _1339 = fma(_960, cbModelParam._m0[31u].z, fma(_956, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _952));
        float _1343 = fma(_960, cbModelParam._m0[32u].z, fma(_956, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _952));
        float _1366 = _952 + _710;
        float _1367 = _956 + _711;
        float _1368 = _960 + _712;
        float _1378 = fma(_1368, cbModelParam._m0[30u].z, fma(_1367, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1366)) - _1335;
        float _1379 = fma(_1368, cbModelParam._m0[31u].z, fma(_1367, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1366)) - _1339;
        float _1380 = fma(_1368, cbModelParam._m0[32u].z, fma(_1367, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1366)) - _1343;
        float _1384 = inversesqrt(dot(vec3(_1378, _1379, _1380), vec3(_1378, _1379, _1380)));
        float _1397 = ((_1384 * _1378) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1335 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1398 = ((_1384 * _1379) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1339 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1399 = ((_1384 * _1380) / cbModelParam._m0[35u].z) + ((((((_1343 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1401 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1397, _1398, _1399), 0.0);
        vec4 _1408 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1397, _1398, _1399), 0.0);
        vec4 _1415 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1397, _1398, _1399), 0.0);
        vec4 _1422 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1397, _1398, _1399), 0.0);
        float _1434 = exp2((_1401.w + (-0.5)) * 20.0) * 2.0;
        float _1435 = _1434 * (_1401.x + (-0.5));
        float _1436 = _1434 * (_1401.y + (-0.5));
        float _1437 = _1434 * (_1401.z + (-0.5));
        float _1444 = exp2((_1408.w + (-0.5)) * 20.0) * 2.0;
        float _1445 = _1444 * (_1408.x + (-0.5));
        float _1446 = _1444 * (_1408.y + (-0.5));
        float _1447 = _1444 * (_1408.z + (-0.5));
        float _1454 = exp2((_1415.w + (-0.5)) * 20.0) * 2.0;
        float _1455 = _1454 * (_1415.x + (-0.5));
        float _1456 = _1454 * (_1415.y + (-0.5));
        float _1457 = _1454 * (_1415.z + (-0.5));
        float _1464 = exp2((_1422.w + (-0.5)) * 20.0) * 2.0;
        float _1465 = _1464 * (_1422.x + (-0.5));
        float _1466 = _1464 * (_1422.y + (-0.5));
        float _1467 = _1464 * (_1422.z + (-0.5));
        float _1468 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1469 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1470 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1471 = _1435 * 0.5;
        float _1472 = _1445 * 0.5;
        float _1473 = _1455 * 0.5;
        float _1474 = dot(vec3(_1471, _1472, _1473), vec3(_1471, _1472, _1473));
        float _1479 = (_1474 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1474);
        float _1487 = (dot(vec3(_710, _711, _712), vec3(_1479 * _1471, _1479 * _1472, _1479 * _1473)) + 1.0) * 0.5;
        float _4020 = isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0));
        float _1496 = sqrt(((_1472 * _1472) + (_1471 * _1471)) + (_1473 * _1473)) / (_1468 + 9.9999997473787516355514526367188e-06);
        float _4031 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1497 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1498 = _1497 * 2.0;
        float _1502 = (1.0 - _1497) / (_1497 + 1.0);
        float _4042 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1503 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _1512 = ((((1.0 - _1503) * (_1498 + 2.0)) * exp2(log2(isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * (_1498 + 1.0))) + _1503) * _1468;
        float _1513 = _1436 * 0.5;
        float _1514 = _1446 * 0.5;
        float _1515 = _1456 * 0.5;
        float _1516 = dot(vec3(_1513, _1514, _1515), vec3(_1513, _1514, _1515));
        float _1521 = (_1516 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1516);
        float _1529 = (dot(vec3(_710, _711, _712), vec3(_1521 * _1513, _1521 * _1514, _1521 * _1515)) + 1.0) * 0.5;
        float _4053 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1538 = sqrt(((_1514 * _1514) + (_1513 * _1513)) + (_1515 * _1515)) / (_1469 + 9.9999997473787516355514526367188e-06);
        float _4064 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1539 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1540 = _1539 * 2.0;
        float _1544 = (1.0 - _1539) / (_1539 + 1.0);
        float _4075 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1545 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _1554 = ((((1.0 - _1545) * (_1540 + 2.0)) * exp2(log2(isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * (_1540 + 1.0))) + _1545) * _1469;
        float _1555 = _1437 * 0.5;
        float _1556 = _1447 * 0.5;
        float _1557 = _1457 * 0.5;
        float _1558 = dot(vec3(_1555, _1556, _1557), vec3(_1555, _1556, _1557));
        float _1563 = (_1558 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1558);
        float _1571 = (dot(vec3(_710, _711, _712), vec3(_1563 * _1555, _1563 * _1556, _1563 * _1557)) + 1.0) * 0.5;
        float _4086 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1580 = sqrt(((_1556 * _1556) + (_1555 * _1555)) + (_1557 * _1557)) / (_1470 + 9.9999997473787516355514526367188e-06);
        float _4097 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1581 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _1582 = _1581 * 2.0;
        float _1586 = (1.0 - _1581) / (_1581 + 1.0);
        float _4108 = isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0));
        float _1587 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _1596 = ((((1.0 - _1587) * (_1582 + 2.0)) * exp2(log2(isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * (_1582 + 1.0))) + _1587) * _1470;
        _1604 = _1437;
        _1605 = _1436;
        _1606 = _1435;
        _1607 = _1447;
        _1608 = _1446;
        _1609 = _1445;
        _1610 = _1457;
        _1611 = _1456;
        _1612 = _1455;
        _1613 = _1470;
        _1614 = _1469;
        _1615 = _1468;
        _1616 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0)));
        _1617 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)));
        _1618 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0)));
    }
    else
    {
        _1604 = _1292;
        _1605 = _1292;
        _1606 = _1292;
        _1607 = _1292;
        _1608 = _1292;
        _1609 = _1292;
        _1610 = _1292;
        _1611 = _1292;
        _1612 = _1292;
        _1613 = _1292;
        _1614 = _1292;
        _1615 = _1292;
        _1616 = 0.0;
        _1617 = 0.0;
        _1618 = 0.0;
    }
    float _1628 = (cbModelParam._m0[1u].x * (_1616 - _1304)) + _1304;
    float _1629 = (cbModelParam._m0[1u].x * (_1617 - _1305)) + _1305;
    float _1630 = (cbModelParam._m0[1u].x * (_1618 - _1306)) + _1306;
    float _1651 = fma(_1630, cbSceneParam._m0[89u].z, fma(_1629, cbSceneParam._m0[89u].y, _1628 * cbSceneParam._m0[89u].x));
    float _1654 = fma(_1630, cbSceneParam._m0[90u].z, fma(_1629, cbSceneParam._m0[90u].y, _1628 * cbSceneParam._m0[90u].x));
    float _1657 = fma(_1630, cbSceneParam._m0[91u].z, fma(_1629, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1628));
    float _1672 = _896 * 0.5;
    float _1673 = _897 * 0.5;
    float _1674 = _898 * 0.5;
    float _1675 = dot(vec4(_1672, _1673, _1674, 1.0), vec4(_1606, _1609, _1612, _1615));
    float _1678 = dot(vec4(_1672, _1673, _1674, 1.0), vec4(_1605, _1608, _1611, _1614));
    float _1681 = dot(vec4(_1672, _1673, _1674, 1.0), vec4(_1604, _1607, _1610, _1613));
    float _1715;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1688 = dot(vec4(_1672, _1673, _1674, 1.0), vec4(_1291, _1295, _1298, _1301));
        float _1692 = dot(vec4(_1672, _1673, _1674, 1.0), vec4(_1293, _1296, _1299, _1302));
        float _1696 = dot(vec4(_1672, _1673, _1674, 1.0), vec4(_1294, _1297, _1300, _1303));
        float _1703 = dot(vec4(cbModelParam._m0[39u]), vec4(_1672, _1673, _1674, 1.0));
        _1715 = dot(vec3(isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0)), isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0)), isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1703) ? 0.0 : (isnan(0.0) ? _1703 : max(0.0, _1703))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1715 = 1.0;
    }
    float _1726;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1717 = dot(vec4(cbModelParam._m0[40u]), vec4(_1672, _1673, _1674, 1.0));
        _1726 = dot(vec3(isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0)), isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0)), isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1717) ? 0.0 : (isnan(0.0) ? _1717 : max(0.0, _1717))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1726 = 1.0;
    }
    float _1730 = (_1726 * cbModelParam._m0[1u].x) + (_1715 * (1.0 - cbModelParam._m0[1u].x));
    float _1740 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _713);
    float _1741 = isnan(_1740) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1740 : min(cbModelParam._m0[25u].z, _1740));
    float _1821;
    float _1823;
    float _1825;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1788 = fma(_960, cbModelParam._m0[13u].z, fma(_956, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _952)) + cbModelParam._m0[13u].w;
        float _1792 = fma(_960, cbModelParam._m0[14u].z, fma(_956, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _952)) + cbModelParam._m0[14u].w;
        float _1796 = fma(_960, cbModelParam._m0[15u].z, fma(_956, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _952)) + cbModelParam._m0[15u].w;
        float _1799 = fma(_898, cbModelParam._m0[13u].z, fma(_897, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _896));
        float _1802 = fma(_898, cbModelParam._m0[14u].z, fma(_897, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _896));
        float _1805 = fma(_898, cbModelParam._m0[15u].z, fma(_897, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _896));
        float _1833;
        if (_1799 > 0.0)
        {
            _1833 = abs((1.0 - _1788) / _1799);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1799 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1788 + 1.0) / _1799);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1833 = frontier_phi_17_15_ladder;
        }
        float _2058;
        if (_1802 > 0.0)
        {
            _2058 = abs((1.0 - _1792) / _1802);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1802 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1792 + 1.0) / _1802);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2058 = frontier_phi_26_22_ladder;
        }
        float _2315;
        if (_1805 > 0.0)
        {
            _2315 = abs((1.0 - _1796) / _1805);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1805 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1796 + 1.0) / _1805);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2315 = frontier_phi_38_33_ladder;
        }
        float _2317 = isnan(_2058) ? _1833 : (isnan(_1833) ? _2058 : min(_1833, _2058));
        float _2318 = isnan(_2315) ? _2317 : (isnan(_2317) ? _2315 : min(_2317, _2315));
        float _2322 = (_2318 * _1799) + _1788;
        float _2323 = (_2318 * _1802) + _1792;
        float _2324 = (_2318 * _1805) + _1796;
        float _2325 = _2318 * 9.9999997473787516355514526367188e-05;
        float _2327 = (-1.0) - _2325;
        float _2329 = _2325 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2324 > _2329) || ((_2324 < _2327) || ((_2323 > _2329) || ((_2323 < _2327) || ((_2322 < _2327) || (_2322 > _2329))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2452 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2324, cbModelParam._m0[9u].z, fma(_2323, cbModelParam._m0[9u].y, _2322 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2324, cbModelParam._m0[10u].z, fma(_2323, cbModelParam._m0[10u].y, _2322 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2324, cbModelParam._m0[11u].z, fma(_2323, cbModelParam._m0[11u].y, _2322 * cbModelParam._m0[11u].x))), _1741);
            frontier_phi_16_38_ladder = _2452.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2452.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2452.x * cbModelParam._m0[1u].y;
        }
        _1821 = frontier_phi_16_38_ladder_2;
        _1823 = frontier_phi_16_38_ladder_1;
        _1825 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1809 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_896, _897, _898), _1741);
        _1821 = _1809.x * cbModelParam._m0[1u].y;
        _1823 = _1809.y * cbModelParam._m0[1u].y;
        _1825 = _1809.z * cbModelParam._m0[1u].y;
    }
    float _1829 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _713);
    float _1830 = isnan(_1829) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1829 : min(cbModelParam._m0[25u].w, _1829));
    float _1921;
    float _1923;
    float _1925;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1885 = fma(_960, cbModelParam._m0[21u].z, fma(_956, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _952)) + cbModelParam._m0[21u].w;
        float _1889 = fma(_960, cbModelParam._m0[22u].z, fma(_956, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _952)) + cbModelParam._m0[22u].w;
        float _1893 = fma(_960, cbModelParam._m0[23u].z, fma(_956, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _952)) + cbModelParam._m0[23u].w;
        float _1896 = fma(_898, cbModelParam._m0[21u].z, fma(_897, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _896));
        float _1899 = fma(_898, cbModelParam._m0[22u].z, fma(_897, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _896));
        float _1902 = fma(_898, cbModelParam._m0[23u].z, fma(_897, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _896));
        float _2063;
        if (_1896 > 0.0)
        {
            _2063 = abs((1.0 - _1885) / _1896);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1896 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1885 + 1.0) / _1896);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2063 = frontier_phi_28_24_ladder;
        }
        float _2342;
        if (_1899 > 0.0)
        {
            _2342 = abs((1.0 - _1889) / _1899);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1899 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1889 + 1.0) / _1899);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2342 = frontier_phi_40_35_ladder;
        }
        float _2555;
        if (_1902 > 0.0)
        {
            _2555 = abs((1.0 - _1893) / _1902);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1902 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1893 + 1.0) / _1902);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2555 = frontier_phi_49_46_ladder;
        }
        float _2557 = isnan(_2342) ? _2063 : (isnan(_2063) ? _2342 : min(_2063, _2342));
        float _2558 = isnan(_2555) ? _2557 : (isnan(_2557) ? _2555 : min(_2557, _2555));
        float _2562 = (_2558 * _1896) + _1885;
        float _2563 = (_2558 * _1899) + _1889;
        float _2564 = (_2558 * _1902) + _1893;
        float _2565 = _2558 * 9.9999997473787516355514526367188e-05;
        float _2566 = (-1.0) - _2565;
        float _2568 = _2565 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2564 > _2568) || ((_2564 < _2566) || ((_2563 > _2568) || ((_2563 < _2566) || ((_2562 < _2566) || (_2562 > _2568))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2763 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2564, cbModelParam._m0[17u].z, fma(_2563, cbModelParam._m0[17u].y, _2562 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2564, cbModelParam._m0[18u].z, fma(_2563, cbModelParam._m0[18u].y, _2562 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2564, cbModelParam._m0[19u].z, fma(_2563, cbModelParam._m0[19u].y, _2562 * cbModelParam._m0[19u].x))), _1830);
            frontier_phi_25_49_ladder = _2763.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2763.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2763.x * cbModelParam._m0[1u].z;
        }
        _1921 = frontier_phi_25_49_ladder_2;
        _1923 = frontier_phi_25_49_ladder_1;
        _1925 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1905 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_896, _897, _898), _1830);
        _1921 = _1905.x * cbModelParam._m0[1u].z;
        _1923 = _1905.y * cbModelParam._m0[1u].z;
        _1925 = _1905.z * cbModelParam._m0[1u].z;
    }
    float _1938 = (((_923 * _873) + _924) * _888) * ((cbModelParam._m0[1u].w * (_1921 - _1821)) + _1821);
    float _1940 = (((_923 * _875) + _924) * _888) * ((cbModelParam._m0[1u].w * (_1923 - _1823)) + _1823);
    float _1942 = (((_923 * _876) + _924) * _888) * ((cbModelParam._m0[1u].w * (_1925 - _1825)) + _1825);
    float _1945 = fma(_1942, cbSceneParam._m0[89u].z, fma(_1940, cbSceneParam._m0[89u].y, _1938 * cbSceneParam._m0[89u].x));
    float _1948 = fma(_1942, cbSceneParam._m0[90u].z, fma(_1940, cbSceneParam._m0[90u].y, _1938 * cbSceneParam._m0[90u].x));
    float _1951 = fma(_1942, cbSceneParam._m0[91u].z, fma(_1940, cbSceneParam._m0[91u].y, _1938 * cbSceneParam._m0[91u].x));
    vec4 _1959 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_810, _811));
    float _1961 = _1959.w;
    float _1973 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1961);
    float _1974 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1961);
    float _1975 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1961);
    uvec4 _1979 = floatBitsToUint(cbInstanceData._m0[_848 + 5u]);
    uint _1981 = _1979.x * 14u;
    uint _1982 = _1981 + 13u;
    float _1989 = _888 + (-1.0);
    float _1994 = (cbLight._m0[_1982].x * _1989) + 1.0;
    float _1995 = (cbLight._m0[_1982].y * _1989) + 1.0;
    float _1996 = (cbLight._m0[_1982].z * _1989) + 1.0;
    float _1997 = (cbLight._m0[_1982].w * _1989) + 1.0;
    uint _1998 = _1981 + 5u;
    float _2004 = isnan(1.0) ? _1995 : (isnan(_1995) ? 1.0 : min(_1995, 1.0));
    uint _2008 = _1981 + 4u;
    float _2017 = isnan(1.0) ? _1994 : (isnan(_1994) ? 1.0 : min(_1994, 1.0));
    uint _2021 = _1981 | 1u;
    float _2032 = dot(vec3(cbLight._m0[_1981].xyz), vec3(_710, _711, _712));
    float _2035 = dot(vec3(cbLight._m0[_2021].xyz), vec3(_710, _711, _712));
    float _4244 = isnan(0.0) ? _2032 : (isnan(_2032) ? 0.0 : max(_2032, 0.0));
    float _4255 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
    float _2040 = (isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * 0.3183098733425140380859375;
    float _2042 = (isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * 0.3183098733425140380859375;
    float _2049 = ((cbLight._m0[_1998].x * _2004) * _2042) + (((cbLight._m0[_2008].x * _1973) * _2017) * _2040);
    float _2050 = ((_2004 * cbLight._m0[_1998].y) * _2042) + (((cbLight._m0[_2008].y * _1974) * _2017) * _2040);
    float _2051 = ((_2004 * cbLight._m0[_1998].z) * _2042) + (((cbLight._m0[_2008].z * _1975) * _2017) * _2040);
    uvec4 _2055 = floatBitsToUint(cbLight._m0[_1981 + 12u]);
    bool _2057 = _2055.x == 0u;
    float _2068;
    float _2070;
    float _2072;
    if (_2057)
    {
        _2068 = _2049;
        _2070 = _2050;
        _2072 = _2051;
    }
    else
    {
        uint _2076 = _1981 + 6u;
        float _2092 = (dot(vec3(cbLight._m0[_1981 + 2u].xyz), vec3(_710, _711, _712)) * 0.5) + 0.5;
        float _2093 = _2092 * _2092;
        float _4266 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
        float _2094 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _2095 = isnan(1.0) ? _1996 : (isnan(_1996) ? 1.0 : min(_1996, 1.0));
        _2068 = (((cbLight._m0[_2076].x * 0.3183098733425140380859375) * _2094) * _2095) + _2049;
        _2070 = (((cbLight._m0[_2076].y * 0.3183098733425140380859375) * _2094) * _2095) + _2050;
        _2072 = (((cbLight._m0[_2076].z * 0.3183098733425140380859375) * _2094) * _2095) + _2051;
    }
    bool _2075 = _2055.y == 0u;
    float _2113;
    float _2115;
    float _2117;
    if (_2075)
    {
        _2113 = _2068;
        _2115 = _2070;
        _2117 = _2072;
    }
    else
    {
        uint _2286 = _1981 + 7u;
        float _2302 = (dot(vec3(cbLight._m0[_1981 + 3u].xyz), vec3(_710, _711, _712)) * 0.5) + 0.5;
        float _2303 = _2302 * _2302;
        float _4282 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
        float _2304 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
        float _2305 = isnan(1.0) ? _1997 : (isnan(_1997) ? 1.0 : min(_1997, 1.0));
        _2113 = (((cbLight._m0[_2286].x * 0.3183098733425140380859375) * _2304) * _2305) + _2068;
        _2115 = (((cbLight._m0[_2286].y * 0.3183098733425140380859375) * _2304) * _2305) + _2070;
        _2117 = (((cbLight._m0[_2286].z * 0.3183098733425140380859375) * _2304) * _2305) + _2072;
    }
    uint _2120 = _1981 + 8u;
    float _2133 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1981].w)) * _713) * 0.949999988079071044921875);
    float _2134 = _2133 * _2133;
    float _2135 = cbLight._m0[_1981].x + _790;
    float _2136 = cbLight._m0[_1981].y + _791;
    float _2137 = cbLight._m0[_1981].z + _792;
    float _2141 = inversesqrt(dot(vec3(_2135, _2136, _2137), vec3(_2135, _2136, _2137)));
    float _2142 = _2141 * _2135;
    float _2143 = _2141 * _2136;
    float _2144 = _2141 * _2137;
    float _2145 = dot(vec3(_710, _711, _712), vec3(cbLight._m0[_1981].xyz));
    float _4298 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
    float _2148 = isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0));
    float _4309 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _2149 = isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0));
    float _2150 = dot(vec3(_710, _711, _712), vec3(_2142, _2143, _2144));
    float _4320 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2153 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
    float _2154 = dot(vec3(cbLight._m0[_1981].xyz), vec3(_2142, _2143, _2144));
    float _4331 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
    float _2158 = _2134 * _2134;
    float _2162 = ((_2153 * _2153) * (_2158 + (-1.0))) + 1.0;
    float _2170 = exp2(log2(1.0 - (isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0)))) * 5.0);
    float _2171 = 0.959999978542327880859375 - _870;
    float _2173 = 0.959999978542327880859375 - _871;
    float _2174 = 0.959999978542327880859375 - _872;
    float _2181 = 1.0 - _2134;
    float _2192 = (0.5 / (((_2149 * ((_2148 * _2181) + _2134)) + 9.9999999392252902907785028219223e-09) + (((_2149 * _2181) + _2134) * _2148))) * _2148;
    float _4342 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0));
    float _2194 = (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (_2158 / ((_2162 * _2162) * 3.141590118408203125));
    uint _2208 = _1981 + 9u;
    float _2219 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2021].w)) * _713) * 0.949999988079071044921875);
    float _2220 = _2219 * _2219;
    float _2221 = cbLight._m0[_2021].x + _790;
    float _2222 = cbLight._m0[_2021].y + _791;
    float _2223 = cbLight._m0[_2021].z + _792;
    float _2227 = inversesqrt(dot(vec3(_2221, _2222, _2223), vec3(_2221, _2222, _2223)));
    float _2228 = _2227 * _2221;
    float _2229 = _2227 * _2222;
    float _2230 = _2227 * _2223;
    float _2231 = dot(vec3(_710, _711, _712), vec3(cbLight._m0[_2021].xyz));
    float _4353 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _2234 = isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0));
    float _2235 = dot(vec3(_710, _711, _712), vec3(_2228, _2229, _2230));
    float _4364 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
    float _2238 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
    float _2239 = dot(vec3(cbLight._m0[_2021].xyz), vec3(_2228, _2229, _2230));
    float _4375 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
    float _2243 = _2220 * _2220;
    float _2247 = ((_2238 * _2238) * (_2243 + (-1.0))) + 1.0;
    float _2254 = exp2(log2(1.0 - (isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0)))) * 5.0);
    float _2261 = 1.0 - _2220;
    float _2271 = (0.5 / (((_2149 * ((_2234 * _2261) + _2220)) + 9.9999999392252902907785028219223e-09) + (((_2149 * _2261) + _2220) * _2234))) * _2234;
    float _4386 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
    float _2273 = (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0))) * (_2243 / ((_2247 * _2247) * 3.141590118408203125));
    float _2283 = (((((_2254 * _2171) + _873) * cbLight._m0[_2208].x) * _2273) * _2004) + ((((cbLight._m0[_2120].x * _1973) * ((_2170 * _2171) + _873)) * _2194) * _2017);
    float _2284 = (((((_2254 * _2173) + _875) * cbLight._m0[_2208].y) * _2273) * _2004) + ((((cbLight._m0[_2120].y * _1974) * ((_2170 * _2173) + _875)) * _2194) * _2017);
    float _2285 = (((((_2254 * _2174) + _876) * cbLight._m0[_2208].z) * _2273) * _2004) + ((((cbLight._m0[_2120].z * _1975) * ((_2170 * _2174) + _876)) * _2194) * _2017);
    float _2347;
    float _2349;
    float _2351;
    if (_2057)
    {
        _2347 = _2283;
        _2349 = _2284;
        _2351 = _2285;
    }
    else
    {
        uint _2353 = _1981 + 2u;
        uint _2357 = _1981 + 10u;
        float _2371 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2353].w)) * _713) * 0.949999988079071044921875);
        float _2372 = _2371 * _2371;
        float _2373 = cbLight._m0[_2353].x + _790;
        float _2374 = cbLight._m0[_2353].y + _791;
        float _2375 = cbLight._m0[_2353].z + _792;
        float _2379 = inversesqrt(dot(vec3(_2373, _2374, _2375), vec3(_2373, _2374, _2375)));
        float _2380 = _2379 * _2373;
        float _2381 = _2379 * _2374;
        float _2382 = _2379 * _2375;
        float _2383 = dot(vec3(_710, _711, _712), vec3(cbLight._m0[_2353].xyz));
        float _4397 = isnan(0.0) ? _2383 : (isnan(_2383) ? 0.0 : max(_2383, 0.0));
        float _2386 = isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0));
        float _2387 = dot(vec3(_710, _711, _712), vec3(_2380, _2381, _2382));
        float _4408 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
        float _2390 = isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0));
        float _2391 = dot(vec3(cbLight._m0[_2353].xyz), vec3(_2380, _2381, _2382));
        float _4419 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
        float _2395 = _2372 * _2372;
        float _2399 = ((_2390 * _2390) * (_2395 + (-1.0))) + 1.0;
        float _2406 = exp2(log2(1.0 - (isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0)))) * 5.0);
        float _2413 = 1.0 - _2372;
        float _2423 = (0.5 / (((_2149 * ((_2386 * _2413) + _2372)) + 9.9999999392252902907785028219223e-09) + (((_2149 * _2413) + _2372) * _2386))) * _2386;
        float _4430 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
        float _2425 = (isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0))) * (_2395 / ((_2399 * _2399) * 3.141590118408203125));
        float _2426 = isnan(1.0) ? _1996 : (isnan(_1996) ? 1.0 : min(_1996, 1.0));
        _2347 = (((((_2406 * _2171) + _873) * cbLight._m0[_2357].x) * _2425) * _2426) + _2283;
        _2349 = (((((_2406 * _2173) + _875) * cbLight._m0[_2357].y) * _2425) * _2426) + _2284;
        _2351 = (((((_2406 * _2174) + _876) * cbLight._m0[_2357].z) * _2425) * _2426) + _2285;
    }
    float _2461;
    float _2463;
    float _2465;
    if (_2075)
    {
        _2461 = _2347;
        _2463 = _2349;
        _2465 = _2351;
    }
    else
    {
        uint _2472 = _1981 + 3u;
        uint _2476 = _1981 + 11u;
        float _2490 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2472].w)) * _713) * 0.949999988079071044921875);
        float _2491 = _2490 * _2490;
        float _2492 = cbLight._m0[_2472].x + _790;
        float _2493 = cbLight._m0[_2472].y + _791;
        float _2494 = cbLight._m0[_2472].z + _792;
        float _2498 = inversesqrt(dot(vec3(_2492, _2493, _2494), vec3(_2492, _2493, _2494)));
        float _2499 = _2498 * _2492;
        float _2500 = _2498 * _2493;
        float _2501 = _2498 * _2494;
        float _2502 = dot(vec3(_710, _711, _712), vec3(cbLight._m0[_2472].xyz));
        float _4446 = isnan(0.0) ? _2502 : (isnan(_2502) ? 0.0 : max(_2502, 0.0));
        float _2505 = isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0));
        float _2506 = dot(vec3(_710, _711, _712), vec3(_2499, _2500, _2501));
        float _4457 = isnan(0.0) ? _2506 : (isnan(_2506) ? 0.0 : max(_2506, 0.0));
        float _2509 = isnan(1.0) ? _4457 : (isnan(_4457) ? 1.0 : min(_4457, 1.0));
        float _2510 = dot(vec3(cbLight._m0[_2472].xyz), vec3(_2499, _2500, _2501));
        float _4468 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
        float _2514 = _2491 * _2491;
        float _2518 = ((_2509 * _2509) * (_2514 + (-1.0))) + 1.0;
        float _2525 = exp2(log2(1.0 - (isnan(1.0) ? _4468 : (isnan(_4468) ? 1.0 : min(_4468, 1.0)))) * 5.0);
        float _2532 = 1.0 - _2491;
        float _2542 = (0.5 / (((_2149 * ((_2505 * _2532) + _2491)) + 9.9999999392252902907785028219223e-09) + (((_2149 * _2532) + _2491) * _2505))) * _2505;
        float _4479 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
        float _2544 = (isnan(1.0) ? _4479 : (isnan(_4479) ? 1.0 : min(_4479, 1.0))) * (_2514 / ((_2518 * _2518) * 3.141590118408203125));
        float _2545 = isnan(1.0) ? _1997 : (isnan(_1997) ? 1.0 : min(_1997, 1.0));
        _2461 = (((((_2525 * _2171) + _873) * cbLight._m0[_2476].x) * _2544) * _2545) + _2347;
        _2463 = (((((_2525 * _2173) + _875) * cbLight._m0[_2476].y) * _2544) * _2545) + _2349;
        _2465 = (((((_2525 * _2174) + _876) * cbLight._m0[_2476].z) * _2544) * _2545) + _2351;
    }
    float _2680;
    float _2682;
    float _2684;
    float _2686;
    float _2688;
    float _2690;
    if (_1979.y == 0u)
    {
        float _2620 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2621 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2620;
        float _2622 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2620;
        float _2623 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2620;
        uvec4 _2635 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2636 = _2635.x;
        uint _2647 = uint((float(_2635.y) * floor(float(uint(cbSceneParam._m0[85u].y * _811) / _2636))) + floor(float(uint(cbSceneParam._m0[85u].x * _810) / _2636)));
        float _2657 = (log2(_2623 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2658 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
        uint _2661 = uint(isnan(14.0) ? _2658 : (isnan(_2658) ? 14.0 : min(_2658, 14.0)));
        uvec4 _2666 = texelFetch(g_lightClusterGridBuffer, int(((_2661 << 2u) + (_2647 << 6u)) >> 2u));
        uint _2667 = _2666.x;
        uint _2668 = _2635.z;
        float _2768;
        float _2770;
        float _2772;
        float _2774;
        float _2776;
        float _2778;
        if (((((1u << ((_2668 >> 4u) & 15u)) + 4294967295u) & _2667) == 0u) || ((_2668 & 240u) == 0u))
        {
            _2768 = 0.0;
            _2770 = 0.0;
            _2772 = 0.0;
            _2774 = 0.0;
            _2776 = 0.0;
            _2778 = 0.0;
        }
        else
        {
            float _2769;
            float _2771;
            float _2773;
            float _2775;
            float _2777;
            float _2779;
            float _2921 = 0.0;
            float _2922 = 0.0;
            float _2923 = 0.0;
            float _2924 = 0.0;
            float _2925 = 0.0;
            float _2926 = 0.0;
            uint _2927 = 0u;
            uint _2936;
            bool _2937;
            for (;;)
            {
                _2936 = texelFetch(g_lightClassification, int((((_2661 << 5u) + (_2647 << 9u)) + (_2927 << 2u)) >> 2u)).x;
                _2937 = _2936 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2937)
                {
                    frontier_phi_66_pred = _2921;
                    frontier_phi_66_pred_1 = _2926;
                    frontier_phi_66_pred_2 = _2925;
                    frontier_phi_66_pred_3 = _2924;
                    frontier_phi_66_pred_4 = _2923;
                    frontier_phi_66_pred_5 = _2922;
                }
                else
                {
                    float _3066;
                    float _3067;
                    float _3068;
                    float _3069;
                    float _3070;
                    float _3071;
                    uint _3072;
                    _3066 = _2921;
                    _3067 = _2922;
                    _3068 = _2923;
                    _3069 = _2924;
                    _3070 = _2925;
                    _3071 = _2926;
                    _3072 = _2936;
                    float _2993;
                    float _2994;
                    float _2995;
                    float _2996;
                    float _2997;
                    float _2998;
                    for (;;)
                    {
                        uint _3076 = uint(findLSB(_3072)) + (_2927 << 5u);
                        uint _3073 = (_3072 + 4294967295u) & _3072;
                        uint _3078 = _3076 * 48u;
                        vec4 _3092 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3078)).x, texelFetch(g_PointLightRenderingBuffer, int(_3078 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3078 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3078 + 3u)).x));
                        uint _3098 = (_3076 * 48u) + 4u;
                        vec4 _3111 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3098)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3098 + 3u)).x));
                        uint _3117 = (_3076 * 48u) + 8u;
                        vec3 _3128 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3117)).x, texelFetch(g_PointLightRenderingBuffer, int(_3117 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3117 + 2u)).x));
                        float _3132 = _3092.x - _2621;
                        float _3133 = _3092.y - _2622;
                        float _3134 = _3092.z - _2623;
                        float _3135 = dot(vec3(_3132, _3133, _3134), vec3(_3132, _3133, _3134));
                        float _3138 = inversesqrt(_3135);
                        float _3139 = _3138 * _3132;
                        float _3140 = _3138 * _3133;
                        float _3141 = _3138 * _3134;
                        float _3142 = dot(vec3(_829, _832, _835), vec3(_3139, _3140, _3141));
                        float _3147 = 1.0 - (_3135 * _3092.w);
                        float _4505 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
                        float _3148 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
                        float _3149 = sqrt(_3135) * _3111.w;
                        float _3152 = 1.39999997615814208984375 / (_3149 + 1.39999997615814208984375);
                        float _3153 = _3152 * _3152;
                        float _3156 = ((1.0 - _3153) * _3142) + _3153;
                        float _3159 = _3149 * _3149;
                        float _3163 = ((isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0))) * _3148) / ((_3159 * 0.699999988079071044921875) + 1.0);
                        float _3167 = (-0.0) - _2621;
                        float _3168 = (-0.0) - _2622;
                        float _3169 = (-0.0) - _2623;
                        float _3173 = inversesqrt(dot(vec3(_3167, _3168, _3169), vec3(_3167, _3168, _3169)));
                        float _3174 = _3173 * _3167;
                        float _3175 = _3173 * _3168;
                        float _3176 = _3173 * _3169;
                        float _3184 = exp2(log2(1.0 / ((_3159 * 3.5) + 5.0)) * 0.25);
                        float _3185 = 1.0 - _904;
                        float _3192 = sqrt(1.0 - ((1.0 - (_3185 * _3185)) * (1.0 - (_3184 * _3184))));
                        float _3193 = _3192 * _3192;
                        float _3194 = _3193 * _3193;
                        float _3195 = _3174 + _3139;
                        float _3196 = _3175 + _3140;
                        float _3197 = _3176 + _3141;
                        float _3201 = inversesqrt(dot(vec3(_3195, _3196, _3197), vec3(_3195, _3196, _3197)));
                        float _3205 = dot(vec3(_829, _832, _835), vec3(_3174, _3175, _3176));
                        float _4521 = isnan(0.0) ? _3205 : (isnan(_3205) ? 0.0 : max(_3205, 0.0));
                        float _3208 = isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0));
                        float _3209 = dot(vec3(_829, _832, _835), vec3(_3201 * _3195, _3201 * _3196, _3201 * _3197));
                        float _4532 = isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0));
                        float _3212 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
                        float _3216 = ((_3212 * _3212) * (_3194 + (-1.0))) + 1.0;
                        float _3217 = _3152 * _3193;
                        float _3218 = _3217 * _3217;
                        float _3221 = ((1.0 - _3218) * _3142) + _3218;
                        float _4543 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0));
                        float _3222 = isnan(1.0) ? _4543 : (isnan(_4543) ? 1.0 : min(_4543, 1.0));
                        float _3223 = 1.0 - _3193;
                        float _3233 = (0.5 / (((_3222 * ((_3208 * _3223) + _3193)) + 9.9999999392252902907785028219223e-09) + (((_3222 * _3223) + _3193) * _3208))) * _3222;
                        float _4554 = isnan(0.0) ? _3233 : (isnan(_3233) ? 0.0 : max(_3233, 0.0));
                        float _3244 = (((_3194 * 3.1415927410125732421875) * (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0)))) / ((_3216 * _3216) * ((_3159 * 2.1991131305694580078125) + 3.141590118408203125))) * _3148;
                        _2996 = (_3163 * _3111.x) + _3069;
                        _2997 = (_3163 * _3111.y) + _3070;
                        _2998 = (_3163 * _3111.z) + _3071;
                        _2993 = (_3244 * _3128.x) + _3066;
                        _2994 = (_3244 * _3128.y) + _3067;
                        _2995 = (_3244 * _3128.z) + _3068;
                        if (_3073 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3066 = _2993;
                            _3067 = _2994;
                            _3068 = _2995;
                            _3069 = _2996;
                            _3070 = _2997;
                            _3071 = _2998;
                            _3072 = _3073;
                        }
                    }
                    frontier_phi_66_pred = _2993;
                    frontier_phi_66_pred_1 = _2998;
                    frontier_phi_66_pred_2 = _2997;
                    frontier_phi_66_pred_3 = _2996;
                    frontier_phi_66_pred_4 = _2995;
                    frontier_phi_66_pred_5 = _2994;
                }
                _2769 = frontier_phi_66_pred;
                _2779 = frontier_phi_66_pred_1;
                _2777 = frontier_phi_66_pred_2;
                _2775 = frontier_phi_66_pred_3;
                _2773 = frontier_phi_66_pred_4;
                _2771 = frontier_phi_66_pred_5;
                uint _2928 = _2927 + 1u;
                if (_2928 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2921 = _2769;
                    _2922 = _2771;
                    _2923 = _2773;
                    _2924 = _2775;
                    _2925 = _2777;
                    _2926 = _2779;
                    _2927 = _2928;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2768 = _2769;
            _2770 = _2771;
            _2772 = _2773;
            _2774 = _2775;
            _2776 = _2777;
            _2778 = _2779;
        }
        uvec4 _2782 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2783 = _2782.z;
        uint _2785 = (_2783 >> 8u) & 15u;
        float _2889;
        float _2891;
        float _2893;
        float _2895;
        float _2897;
        float _2899;
        if (((4294967295u << _2785) & _2667) == 0u)
        {
            _2889 = _2768;
            _2891 = _2770;
            _2893 = _2772;
            _2895 = _2774;
            _2897 = _2776;
            _2899 = _2778;
        }
        else
        {
            float _2914 = inversesqrt(dot(vec3(_2621, _2622, _2623), vec3(_2621, _2622, _2623)));
            float _2915 = _2914 * _2621;
            float _2916 = _2914 * _2622;
            float _2917 = _2914 * _2623;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2785 < ((_2783 >> 12u) & 15u))
            {
                float _2890;
                float _2892;
                float _2894;
                float _2896;
                float _2898;
                float _2900;
                float _3049 = _2768;
                float _3050 = _2770;
                float _3051 = _2772;
                float _3052 = _2774;
                float _3053 = _2776;
                float _3054 = _2778;
                uint _3055 = _2785;
                uint _3064;
                bool _3065;
                for (;;)
                {
                    _3064 = texelFetch(g_lightClassification, int((((_2661 << 5u) + (_2647 << 9u)) + (_3055 << 2u)) >> 2u)).x;
                    _3065 = _3064 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3065)
                    {
                        frontier_phi_77_pred = _3054;
                        frontier_phi_77_pred_1 = _3053;
                        frontier_phi_77_pred_2 = _3052;
                        frontier_phi_77_pred_3 = _3051;
                        frontier_phi_77_pred_4 = _3050;
                        frontier_phi_77_pred_5 = _3049;
                    }
                    else
                    {
                        float _3258;
                        float _3259;
                        float _3260;
                        float _3261;
                        float _3262;
                        float _3263;
                        float _3552;
                        float _3553;
                        float _3554;
                        float _3555;
                        float _3556;
                        float _3557;
                        float _3271 = _3049;
                        float _3272 = _3050;
                        float _3273 = _3051;
                        float _3274 = _3052;
                        float _3275 = _3053;
                        float _3276 = _3054;
                        uint _3277 = _3064;
                        uint _3278;
                        vec4 _3303;
                        float _3304;
                        vec4 _3319;
                        vec3 _3331;
                        vec4 _3346;
                        vec4 _3361;
                        float _3408;
                        bool _3409;
                        for (;;)
                        {
                            uint _3288 = ((_3055 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3277));
                            _3278 = (_3277 + 4294967295u) & _3277;
                            uint _3290 = _3288 * 40u;
                            _3303 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3290)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3290 + 3u)).x));
                            _3304 = _3303.w;
                            uint _3306 = (_3288 * 40u) + 4u;
                            _3319 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3306)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3306 + 3u)).x));
                            uint _3321 = (_3288 * 40u) + 8u;
                            _3331 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3321)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3321 + 2u)).x));
                            uint _3333 = (_3288 * 40u) + 16u;
                            _3346 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3333)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3333 + 3u)).x));
                            uint _3348 = (_3288 * 40u) + 20u;
                            _3361 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3348)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3348 + 3u)).x));
                            uint _3364 = (_3288 * 40u) + 24u;
                            vec4 _3377 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3364)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 3u)).x));
                            uint _3383 = (_3288 * 40u) + 28u;
                            vec4 _3396 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3383)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3383 + 3u)).x));
                            _3408 = fma(_2623, _3396.z, fma(_2622, _3396.y, _3396.x * _2621)) + _3396.w;
                            _3409 = !((fma(_2623, _3377.z, fma(_2622, _3377.y, _3377.x * _2621)) + _3377.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3409)
                            {
                                float _3436 = _3303.x - _2621;
                                float _3437 = _3303.y - _2622;
                                float _3438 = _3303.z - _2623;
                                float _3439 = dot(vec3(_3436, _3437, _3438), vec3(_3436, _3437, _3438));
                                float _3442 = inversesqrt(_3439);
                                float _3443 = _3442 * _3436;
                                float _3444 = _3442 * _3437;
                                float _3445 = _3442 * _3438;
                                float _3449 = 1.0 - (_3439 / (_3304 * _3304));
                                float _4565 = isnan(0.0) ? _3449 : (isnan(_3449) ? 0.0 : max(_3449, 0.0));
                                float _3450 = isnan(1.0) ? _4565 : (isnan(_4565) ? 1.0 : min(_4565, 1.0));
                                float _3454 = sqrt(_3439) * _3319.w;
                                float _3456 = 1.39999997615814208984375 / (_3454 + 1.39999997615814208984375);
                                float _3457 = _3456 * _3456;
                                float _3460 = ((1.0 - _3457) * dot(vec3(_3443, _3444, _3445), vec3(_829, _832, _835))) + _3457;
                                float _3463 = _3454 * _3454;
                                float _3467 = (fma(_2623, _3346.z, fma(_2622, _3346.y, _3346.x * _2621)) + _3346.w) / _3408;
                                float _3468 = (fma(_2623, _3361.z, fma(_2622, _3361.y, _3361.x * _2621)) + _3361.w) / _3408;
                                float _3472 = 1.0 - dot(vec2(_3467, _3468), vec2(_3467, _3468));
                                float _4581 = isnan(0.0) ? _3472 : (isnan(_3472) ? 0.0 : max(_3472, 0.0));
                                float _3473 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
                                float _3474 = _3473 * (((isnan(0.0) ? _3460 : (isnan(_3460) ? 0.0 : max(_3460, 0.0))) * _3450) / ((_3463 * 0.699999988079071044921875) + 1.0));
                                float _3486 = exp2(log2(1.0 / ((_3463 * 3.5) + 5.0)) * 0.25);
                                float _3487 = 1.0 - _904;
                                float _3494 = sqrt(1.0 - ((1.0 - (_3487 * _3487)) * (1.0 - (_3486 * _3486))));
                                float _3495 = _3494 * _3494;
                                float _3496 = _3495 * _3495;
                                float _3497 = _3443 - _2915;
                                float _3498 = _3444 - _2916;
                                float _3499 = _3445 - _2917;
                                float _3503 = inversesqrt(dot(vec3(_3497, _3498, _3499), vec3(_3497, _3498, _3499)));
                                float _3507 = dot(vec3(_829, _832, _835), vec3((-0.0) - _2915, (-0.0) - _2916, (-0.0) - _2917));
                                float _4592 = isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0));
                                float _3510 = isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0));
                                float _3511 = dot(vec3(_829, _832, _835), vec3(_3503 * _3497, _3503 * _3498, _3503 * _3499));
                                float _4603 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                                float _3514 = isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0));
                                float _3518 = ((_3514 * _3514) * (_3496 + (-1.0))) + 1.0;
                                float _3519 = _3456 * _3495;
                                float _3520 = _3519 * _3519;
                                float _3526 = ((1.0 - _3520) * dot(vec3(_829, _832, _835), vec3(_3443, _3444, _3445))) + _3520;
                                float _4614 = isnan(0.0) ? _3526 : (isnan(_3526) ? 0.0 : max(_3526, 0.0));
                                float _3527 = isnan(1.0) ? _4614 : (isnan(_4614) ? 1.0 : min(_4614, 1.0));
                                float _3528 = 1.0 - _3495;
                                float _3538 = (0.5 / (((_3527 * ((_3510 * _3528) + _3495)) + 9.9999999392252902907785028219223e-09) + (((_3527 * _3528) + _3495) * _3510))) * _3527;
                                float _4625 = isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0));
                                float _3548 = (_3473 * _3450) * (((_3496 * 3.1415927410125732421875) * (isnan(1.0) ? _4625 : (isnan(_4625) ? 1.0 : min(_4625, 1.0)))) / ((_3518 * _3518) * ((_3463 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3474 * _3319.y;
                                frontier_phi_83_pred_1 = _3474 * _3319.x;
                                frontier_phi_83_pred_2 = _3548 * _3331.z;
                                frontier_phi_83_pred_3 = _3548 * _3331.y;
                                frontier_phi_83_pred_4 = _3548 * _3331.x;
                                frontier_phi_83_pred_5 = _3474 * _3319.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3556 = frontier_phi_83_pred;
                            _3555 = frontier_phi_83_pred_1;
                            _3554 = frontier_phi_83_pred_2;
                            _3553 = frontier_phi_83_pred_3;
                            _3552 = frontier_phi_83_pred_4;
                            _3557 = frontier_phi_83_pred_5;
                            _3261 = _3555 + _3274;
                            _3262 = _3556 + _3275;
                            _3263 = _3557 + _3276;
                            _3258 = _3552 + _3271;
                            _3259 = _3553 + _3272;
                            _3260 = _3554 + _3273;
                            if (_3278 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3271 = _3258;
                                _3272 = _3259;
                                _3273 = _3260;
                                _3274 = _3261;
                                _3275 = _3262;
                                _3276 = _3263;
                                _3277 = _3278;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3263;
                        frontier_phi_77_pred_1 = _3262;
                        frontier_phi_77_pred_2 = _3261;
                        frontier_phi_77_pred_3 = _3260;
                        frontier_phi_77_pred_4 = _3259;
                        frontier_phi_77_pred_5 = _3258;
                    }
                    _2900 = frontier_phi_77_pred;
                    _2898 = frontier_phi_77_pred_1;
                    _2896 = frontier_phi_77_pred_2;
                    _2894 = frontier_phi_77_pred_3;
                    _2892 = frontier_phi_77_pred_4;
                    _2890 = frontier_phi_77_pred_5;
                    uint _3056 = _3055 + 1u;
                    if (_3056 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3049 = _2890;
                        _3050 = _2892;
                        _3051 = _2894;
                        _3052 = _2896;
                        _3053 = _2898;
                        _3054 = _2900;
                        _3055 = _3056;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2894;
                frontier_phi_58_59_ladder_1 = _2900;
                frontier_phi_58_59_ladder_2 = _2898;
                frontier_phi_58_59_ladder_3 = _2896;
                frontier_phi_58_59_ladder_4 = _2892;
                frontier_phi_58_59_ladder_5 = _2890;
            }
            else
            {
                frontier_phi_58_59_ladder = _2772;
                frontier_phi_58_59_ladder_1 = _2778;
                frontier_phi_58_59_ladder_2 = _2776;
                frontier_phi_58_59_ladder_3 = _2774;
                frontier_phi_58_59_ladder_4 = _2770;
                frontier_phi_58_59_ladder_5 = _2768;
            }
            _2889 = frontier_phi_58_59_ladder_5;
            _2891 = frontier_phi_58_59_ladder_4;
            _2893 = frontier_phi_58_59_ladder;
            _2895 = frontier_phi_58_59_ladder_3;
            _2897 = frontier_phi_58_59_ladder_2;
            _2899 = frontier_phi_58_59_ladder_1;
        }
        float _2904 = isnan(1.0) ? _888 : (isnan(_888) ? 1.0 : min(_888, 1.0));
        _2680 = (_2904 * _2895) + _2113;
        _2682 = (_2904 * _2897) + _2115;
        _2684 = (_2904 * _2899) + _2117;
        _2686 = ((_2889 * _873) * _2904) + _2461;
        _2688 = ((_2891 * _875) * _2904) + _2463;
        _2690 = ((_2893 * _876) * _2904) + _2465;
    }
    else
    {
        _2680 = _2113;
        _2682 = _2115;
        _2684 = _2117;
        _2686 = _2461;
        _2688 = _2463;
        _2690 = _2465;
    }
    float _4641 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
    float _4652 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
    float _4663 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
    float _2707 = ((isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0))) * (_2680 + ((isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0))) * _888))) + ((_2686 + ((isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0))) * _1730)) * cbPerFrame._m0[3u].x);
    float _2708 = ((isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0))) * (_2682 + ((isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0))) * _888))) + ((_2688 + ((isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0))) * _1730)) * cbPerFrame._m0[3u].x);
    float _2709 = ((isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0))) * (_2684 + ((isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0))) * _888))) + ((_2690 + ((isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0))) * _1730)) * cbPerFrame._m0[3u].x);
    uint _2710 = _848 + 6u;
    float _2718 = _810 / cbSceneParam._m0[86u].x;
    float _2719 = _811 / cbSceneParam._m0[86u].y;
    vec4 _2733 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2718, _2719, (log2((isnan(cbSceneParam._m0[77u].w) ? _733 : (isnan(_733) ? cbSceneParam._m0[77u].w : min(_733, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2735 = _2733.x;
    float _2736 = _2733.y;
    float _2737 = _2733.z;
    float _2738 = _2733.w;
    float _2831;
    float _2833;
    float _2835;
    float _2837;
    if (_733 > cbSceneParam._m0[78u].w)
    {
        float _2793 = isnan(_733) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _733 : min(cbSceneParam._m0[80u].w, _733));
        float _2794 = _2793 / _733;
        float _2805 = _2794 * _783;
        float _2806 = _784 * _2794;
        float _2807 = (-0.0) - _2806;
        float _2809 = _2794 * _785;
        float _2811 = (cbSceneParam._m0[77u].w * _2807) / _2793;
        float _2812 = _2811 + cbSceneParam._m0[79u].w;
        float _2813 = cbSceneParam._m0[79u].w - _2806;
        float _2819 = sqrt(((_2805 * _2805) + (_2806 * _2806)) + (_2809 * _2809));
        float _2822 = (1.0 - (cbSceneParam._m0[77u].w / _2793)) * _2819;
        float _2827 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2829 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3006;
        if (abs((_2807 - _2811) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3006 = ((((_2812 > 0.0) ? exp2(_2827 * _2812) : (2.0 - exp2(_2829 * _2812))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2822;
        }
        else
        {
            float _2950 = 1.0 / cbSceneParam._m0[80u].x;
            float _2951 = isnan(_2813) ? _2812 : (isnan(_2812) ? _2813 : max(_2812, _2813));
            float _2952 = isnan(_2813) ? _2812 : (isnan(_2812) ? _2813 : min(_2812, _2813));
            float _2961 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : min(_2951, 0.0));
            float _2962 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : min(_2952, 0.0));
            _3006 = ((abs(_2819 / _2807) * cbSceneParam._m0[80u].y) * ((((_2961 - _2962) * 2.0) - ((exp2(_2827 * (isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0)))) - exp2(_2827 * (isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0))))) * _2950)) - ((exp2(_2829 * _2961) - exp2(_2829 * _2962)) * _2950))) + (_2822 * cbSceneParam._m0[80u].z);
        }
        vec4 _3008 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2718, _2719, 1.0), 0.0);
        float _3017 = exp2((_3006 * (-1.44269502162933349609375)) * (1.0 - _3008.w));
        float _3018 = log2(_3017);
        float _3034 = log2(_2738);
        _2831 = (exp2(_3034 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3018 * cbSceneParam._m0[78u].x)) * _3008.x) / cbSceneParam._m0[78u].x)) + _2735;
        _2833 = (exp2(_3034 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3018 * cbSceneParam._m0[78u].y)) * _3008.y) / cbSceneParam._m0[78u].y)) + _2736;
        _2835 = (exp2(_3034 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3018 * cbSceneParam._m0[78u].z)) * _3008.z) / cbSceneParam._m0[78u].z)) + _2737;
        _2837 = _3017 * _2738;
    }
    else
    {
        _2831 = _2735;
        _2833 = _2736;
        _2835 = _2737;
        _2837 = _2738;
    }
    bool _3044;
    vec4 _2847;
    vec4 _2869;
    float _2871;
    float _2875;
    float _2876;
    float _2877;
    float _2878;
    bool _2888;
    for (;;)
    {
        _2847 = cbMatDynParam._m0[0u];
        float _2849 = roundEven(_2847.y);
        bool _2850 = _2849 == 3.0;
        float _2851 = log2(_2837);
        float _2858 = exp2(_2851 * cbSceneParam._m0[78u].x) * _2707;
        float _2859 = exp2(_2851 * cbSceneParam._m0[78u].y) * _2708;
        float _2860 = exp2(_2851 * cbSceneParam._m0[78u].z) * _2709;
        float _2867 = _799 + (-0.5);
        _2869 = cbMtdParam._m0[1u];
        _2871 = _2869.y * _2867;
        float _2874 = (_2849 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2875 = _2874 * (_2850 ? _2858 : (_2858 + (cbSceneParam._m0[72u].w * _2831)));
        _2876 = _2874 * (_2850 ? _2859 : (_2859 + (cbSceneParam._m0[72u].w * _2833)));
        _2877 = _2874 * (_2850 ? _2860 : (_2860 + (cbSceneParam._m0[72u].w * _2835)));
        _2878 = _2867 * 0.999000012874603271484375;
        _2888 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2888)
        {
            if ((cbInstanceData._m0[_848 + 7u].x + _2878) < 0.5)
            {
                _3044 = true;
                break;
            }
        }
        uint _2985 = _849 + uint(_2847.w);
        if ((cbInstanceData._m0[_2985].w < 1.0) && ((cbInstanceData._m0[_2985].w + _2878) < 0.5))
        {
            _3044 = true;
            break;
        }
        if ((_2871 + 1.0) < _2869.x)
        {
            _3044 = true;
            break;
        }
        _3044 = false;
        break;
    }
    float _3249;
    if (_3044)
    {
        discard_state = true;
        _3249 = 0.0;
    }
    else
    {
        _3249 = cbInstanceData._m0[_2710].w;
    }
    SV_Target.x = _2875;
    SV_Target.y = _2876;
    SV_Target.z = _2877;
    SV_Target.w = _3249;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2710].w;
    discard_exit();
}


