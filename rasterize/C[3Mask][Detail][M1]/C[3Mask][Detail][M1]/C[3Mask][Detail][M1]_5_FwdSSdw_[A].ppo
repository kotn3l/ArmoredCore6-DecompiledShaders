#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1258;
float _3666;
float _3667;
float _3668;
float _3669;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _250 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _256 = _250.x * cbMtdParam._m0[10u].x;
    float _257 = _250.y * cbMtdParam._m0[10u].y;
    float _258 = _250.z * cbMtdParam._m0[10u].z;
    vec4 _276 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _326 = cbMtdParam._m0[18u].y * texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x;
    float _337 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].x * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].y * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _326)) + 1.0;
    float _3678 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _338 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
    float _345 = (_338 * ((_276.x * cbMtdParam._m0[11u].x) - _256)) + _256;
    float _346 = (_338 * ((_276.y * cbMtdParam._m0[11u].y) - _257)) + _257;
    float _347 = (_338 * ((_276.z * cbMtdParam._m0[11u].z) - _258)) + _258;
    vec4 _365 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _392 = ((cbMtdParam._m0[17u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _326)) + 1.0;
    float _3689 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _393 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
    float _400 = (_393 * ((_365.x * cbMtdParam._m0[12u].x) - _345)) + _345;
    float _401 = (_393 * ((_365.y * cbMtdParam._m0[12u].y) - _346)) + _346;
    float _402 = (_393 * ((_365.z * cbMtdParam._m0[12u].z) - _347)) + _347;
    vec4 _419 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _444 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[18u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[18u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _326)) + 1.0;
    float _3700 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _445 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
    float _452 = (_445 * ((_419.x * cbMtdParam._m0[13u].x) - _400)) + _400;
    float _453 = (_445 * ((_419.y * cbMtdParam._m0[13u].y) - _401)) + _401;
    float _454 = (_445 * ((_419.z * cbMtdParam._m0[13u].z) - _402)) + _402;
    vec4 _467 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _469 = _467.x;
    float _487 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _469) * _338) + _469;
    float _505 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _487) * _393) + _487;
    float _522 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _505) * _445) + _505;
    vec4 _535 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _537 = _535.x;
    float _538 = _535.y;
    float _541 = cbMtdParam._m0[17u].y * _535.z;
    vec4 _553 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _562 = (((cbMtdParam._m0[17u].x * _553.z) - _541) * _338) + _541;
    vec4 _575 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _587 = (((cbMtdParam._m0[16u].w * _575.z) - _562) * _393) + _562;
    vec4 _600 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _609 = (((cbMtdParam._m0[16u].z * _600.z) - _587) * _445) + _587;
    vec4 _622 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _635 = ((_553.x - _537) * _338) + _537;
    float _636 = ((_553.y - _538) * _338) + _538;
    float _641 = ((_575.x - _635) * _393) + _635;
    float _642 = ((_575.y - _636) * _393) + _636;
    float _651 = ((((_600.x - _641) * _445) + _641) * 2.0) + (-1.0);
    float _652 = ((((_600.y - _642) * _445) + _642) * 2.0) + (-1.0);
    float _653 = dot(vec2(_651, _652), vec2(_651, _652));
    float _3711 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
    float _658 = sqrt(1.0 - (isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0))));
    float _661 = (((_622.x * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _651;
    float _662 = (((_622.y * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _652;
    float _665 = fma(_658, _220 * NORMAL.x, fma(_662, _227 * TANGENT.x, (_213 * _205) * _661));
    float _668 = fma(_658, _220 * NORMAL.y, fma(_662, _227 * TANGENT.y, (_213 * _206) * _661));
    float _671 = fma(_658, _220 * NORMAL.z, fma(_662, _227 * TANGENT.z, (_213 * _207) * _661));
    float _675 = inversesqrt(dot(vec3(_665, _668, _671), vec3(_665, _668, _671)));
    float _676 = _675 * _665;
    float _677 = _675 * _668;
    float _678 = _675 * _671;
    float _3722 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _679 = isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0));
    float _3733 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _3744 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _3755 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _3766 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _683 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
    float _699 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _739 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _749 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _739);
    float _750 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _739);
    float _751 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _739);
    float _755 = inversesqrt(dot(vec3(_749, _750, _751), vec3(_749, _750, _751)));
    float _756 = _749 * _755;
    float _757 = _750 * _755;
    float _758 = _751 * _755;
    vec4 _763 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _765 = _763.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _937 = sqrt(((_749 * _749) + (_750 * _750)) + (_751 * _751));
        float _943 = (cbMatDynParam._m0[5u].x * _937) + cbMatDynParam._m0[5u].y;
        float _3777 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _944 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _948 = (cbMatDynParam._m0[5u].z * _937) + cbMatDynParam._m0[5u].w;
        float _3788 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))) - _944)) + _944) < ((_765 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _776 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _777 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _795 = fma(_678, cbSceneParam._m0[5u].z, fma(_677, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _676));
    float _798 = fma(_678, cbSceneParam._m0[6u].z, fma(_677, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _676));
    float _801 = fma(_678, cbSceneParam._m0[7u].z, fma(_677, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _676));
    uint _814 = uint(roundEven(NORMAL.w)) * 13u;
    uint _815 = _814 + 9u;
    uint _816 = _815 + uint(cbMatDynParam._m0[0u].w);
    float _822 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0)))) * cbInstanceData._m0[_816].x;
    float _823 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0)))) * cbInstanceData._m0[_816].y;
    float _824 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0)))) * cbInstanceData._m0[_816].z;
    float _3799 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
    float _825 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
    float _3810 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
    float _826 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
    float _3821 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _827 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
    float _828 = 1.0 - _683;
    float _829 = _825 * _828;
    float _830 = _826 * _828;
    float _831 = _827 * _828;
    float _836 = (_825 + (-0.039999999105930328369140625)) * _683;
    float _837 = (_826 + (-0.039999999105930328369140625)) * _683;
    float _838 = (_827 + (-0.039999999105930328369140625)) * _683;
    float _839 = _836 + 0.039999999105930328369140625;
    float _841 = _837 + 0.039999999105930328369140625;
    float _842 = _838 + 0.039999999105930328369140625;
    vec4 _851 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _776, cbSceneParam._m0[86u].y * _777));
    float _854 = _851.x * TEXCOORD_5.w;
    float _855 = dot(vec3(_676, _677, _678), vec3(_756, _757, _758));
    float _858 = _855 * 2.0;
    float _862 = (_858 * _676) - _756;
    float _863 = (_858 * _677) - _757;
    float _864 = (_858 * _678) - _758;
    float _868 = abs(dot(vec3(_756, _757, _758), vec3(_676, _677, _678)));
    float _3832 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
    float _870 = sqrt(_679);
    float _883 = exp2((_870 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_870 * 3.0));
    float _889 = (1.0 - _883) * ((_870 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _890 = _883 * _870;
    float _918 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _922 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _926 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1257;
    float _1259;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _982 = fma(_926, cbModelParam._m0[26u].z, fma(_922, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _918));
        float _986 = fma(_926, cbModelParam._m0[27u].z, fma(_922, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _918));
        float _990 = fma(_926, cbModelParam._m0[28u].z, fma(_922, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _918));
        float _1015 = _918 + _676;
        float _1016 = _922 + _677;
        float _1017 = _926 + _678;
        float _1027 = fma(_1017, cbModelParam._m0[26u].z, fma(_1016, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1015)) - _982;
        float _1028 = fma(_1017, cbModelParam._m0[27u].z, fma(_1016, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1015)) - _986;
        float _1029 = fma(_1017, cbModelParam._m0[28u].z, fma(_1016, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1015)) - _990;
        float _1033 = inversesqrt(dot(vec3(_1027, _1028, _1029), vec3(_1027, _1028, _1029)));
        float _1046 = ((_1033 * _1027) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_982 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1047 = ((_1033 * _1028) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_986 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1048 = ((_1033 * _1029) / cbModelParam._m0[34u].z) + ((((((_990 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1051 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1046, _1047, _1048), 0.0);
        vec4 _1058 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1046, _1047, _1048), 0.0);
        vec4 _1065 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1046, _1047, _1048), 0.0);
        vec4 _1072 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1046, _1047, _1048), 0.0);
        float _1085 = exp2((_1051.w + (-0.5)) * 20.0) * 2.0;
        float _1086 = _1085 * (_1051.x + (-0.5));
        float _1087 = _1085 * (_1051.y + (-0.5));
        float _1088 = _1085 * (_1051.z + (-0.5));
        float _1095 = exp2((_1058.w + (-0.5)) * 20.0) * 2.0;
        float _1096 = _1095 * (_1058.x + (-0.5));
        float _1097 = _1095 * (_1058.y + (-0.5));
        float _1098 = _1095 * (_1058.z + (-0.5));
        float _1105 = exp2((_1065.w + (-0.5)) * 20.0) * 2.0;
        float _1106 = _1105 * (_1065.x + (-0.5));
        float _1107 = _1105 * (_1065.y + (-0.5));
        float _1108 = _1105 * (_1065.z + (-0.5));
        float _1115 = exp2((_1072.w + (-0.5)) * 20.0) * 2.0;
        float _1116 = _1115 * (_1072.x + (-0.5));
        float _1117 = _1115 * (_1072.y + (-0.5));
        float _1118 = _1115 * (_1072.z + (-0.5));
        float _1119 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1120 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1121 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1122 = _1086 * 0.5;
        float _1123 = _1096 * 0.5;
        float _1124 = _1106 * 0.5;
        float _1125 = dot(vec3(_1122, _1123, _1124), vec3(_1122, _1123, _1124));
        float _1130 = (_1125 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1125);
        float _1139 = (dot(vec3(_676, _677, _678), vec3(_1130 * _1122, _1130 * _1123, _1130 * _1124)) + 1.0) * 0.5;
        float _3858 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1149 = sqrt(((_1123 * _1123) + (_1122 * _1122)) + (_1124 * _1124)) / (_1119 + 9.9999997473787516355514526367188e-06);
        float _3869 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1150 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1151 = _1150 * 2.0;
        float _1155 = (1.0 - _1150) / (_1150 + 1.0);
        float _3880 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
        float _1165 = ((((1.0 - _1156) * (_1151 + 2.0)) * exp2(log2(isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * (_1151 + 1.0))) + _1156) * _1119;
        float _1166 = _1087 * 0.5;
        float _1167 = _1097 * 0.5;
        float _1168 = _1107 * 0.5;
        float _1169 = dot(vec3(_1166, _1167, _1168), vec3(_1166, _1167, _1168));
        float _1174 = (_1169 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1169);
        float _1182 = (dot(vec3(_676, _677, _678), vec3(_1174 * _1166, _1174 * _1167, _1174 * _1168)) + 1.0) * 0.5;
        float _3891 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1191 = sqrt(((_1167 * _1167) + (_1166 * _1166)) + (_1168 * _1168)) / (_1120 + 9.9999997473787516355514526367188e-06);
        float _3902 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
        float _1193 = _1192 * 2.0;
        float _1197 = (1.0 - _1192) / (_1192 + 1.0);
        float _3913 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
        float _1207 = ((((1.0 - _1198) * (_1193 + 2.0)) * exp2(log2(isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * (_1193 + 1.0))) + _1198) * _1120;
        float _1208 = _1088 * 0.5;
        float _1209 = _1098 * 0.5;
        float _1210 = _1108 * 0.5;
        float _1211 = dot(vec3(_1208, _1209, _1210), vec3(_1208, _1209, _1210));
        float _1216 = (_1211 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1211);
        float _1224 = (dot(vec3(_676, _677, _678), vec3(_1216 * _1208, _1216 * _1209, _1216 * _1210)) + 1.0) * 0.5;
        float _3924 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1233 = sqrt(((_1209 * _1209) + (_1208 * _1208)) + (_1210 * _1210)) / (_1121 + 9.9999997473787516355514526367188e-06);
        float _3935 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1235 = _1234 * 2.0;
        float _1239 = (1.0 - _1234) / (_1234 + 1.0);
        float _3946 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0));
        float _1249 = ((((1.0 - _1240) * (_1235 + 2.0)) * exp2(log2(isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * (_1235 + 1.0))) + _1240) * _1121;
        _1257 = _1088;
        _1259 = _1087;
        _1260 = _1086;
        _1261 = _1098;
        _1262 = _1097;
        _1263 = _1096;
        _1264 = _1108;
        _1265 = _1107;
        _1266 = _1106;
        _1267 = _1121;
        _1268 = _1120;
        _1269 = _1119;
        _1270 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0)));
        _1271 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0)));
        _1272 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)));
    }
    else
    {
        _1257 = _1258;
        _1259 = _1258;
        _1260 = _1258;
        _1261 = _1258;
        _1262 = _1258;
        _1263 = _1258;
        _1264 = _1258;
        _1265 = _1258;
        _1266 = _1258;
        _1267 = _1258;
        _1268 = _1258;
        _1269 = _1258;
        _1270 = 0.0;
        _1271 = 0.0;
        _1272 = 0.0;
    }
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1301 = fma(_926, cbModelParam._m0[30u].z, fma(_922, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _918));
        float _1305 = fma(_926, cbModelParam._m0[31u].z, fma(_922, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _918));
        float _1309 = fma(_926, cbModelParam._m0[32u].z, fma(_922, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _918));
        float _1332 = _918 + _676;
        float _1333 = _922 + _677;
        float _1334 = _926 + _678;
        float _1344 = fma(_1334, cbModelParam._m0[30u].z, fma(_1333, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1332)) - _1301;
        float _1345 = fma(_1334, cbModelParam._m0[31u].z, fma(_1333, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1332)) - _1305;
        float _1346 = fma(_1334, cbModelParam._m0[32u].z, fma(_1333, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1332)) - _1309;
        float _1350 = inversesqrt(dot(vec3(_1344, _1345, _1346), vec3(_1344, _1345, _1346)));
        float _1363 = ((_1350 * _1344) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1301 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1364 = ((_1350 * _1345) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1305 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1365 = ((_1350 * _1346) / cbModelParam._m0[35u].z) + ((((((_1309 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1367 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1363, _1364, _1365), 0.0);
        vec4 _1374 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1363, _1364, _1365), 0.0);
        vec4 _1381 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1363, _1364, _1365), 0.0);
        vec4 _1388 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1363, _1364, _1365), 0.0);
        float _1400 = exp2((_1367.w + (-0.5)) * 20.0) * 2.0;
        float _1401 = _1400 * (_1367.x + (-0.5));
        float _1402 = _1400 * (_1367.y + (-0.5));
        float _1403 = _1400 * (_1367.z + (-0.5));
        float _1410 = exp2((_1374.w + (-0.5)) * 20.0) * 2.0;
        float _1411 = _1410 * (_1374.x + (-0.5));
        float _1412 = _1410 * (_1374.y + (-0.5));
        float _1413 = _1410 * (_1374.z + (-0.5));
        float _1420 = exp2((_1381.w + (-0.5)) * 20.0) * 2.0;
        float _1421 = _1420 * (_1381.x + (-0.5));
        float _1422 = _1420 * (_1381.y + (-0.5));
        float _1423 = _1420 * (_1381.z + (-0.5));
        float _1430 = exp2((_1388.w + (-0.5)) * 20.0) * 2.0;
        float _1431 = _1430 * (_1388.x + (-0.5));
        float _1432 = _1430 * (_1388.y + (-0.5));
        float _1433 = _1430 * (_1388.z + (-0.5));
        float _1434 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1435 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1436 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1437 = _1401 * 0.5;
        float _1438 = _1411 * 0.5;
        float _1439 = _1421 * 0.5;
        float _1440 = dot(vec3(_1437, _1438, _1439), vec3(_1437, _1438, _1439));
        float _1445 = (_1440 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1440);
        float _1453 = (dot(vec3(_676, _677, _678), vec3(_1445 * _1437, _1445 * _1438, _1445 * _1439)) + 1.0) * 0.5;
        float _3987 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
        float _1462 = sqrt(((_1438 * _1438) + (_1437 * _1437)) + (_1439 * _1439)) / (_1434 + 9.9999997473787516355514526367188e-06);
        float _3998 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1463 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1464 = _1463 * 2.0;
        float _1468 = (1.0 - _1463) / (_1463 + 1.0);
        float _4009 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
        float _1478 = ((((1.0 - _1469) * (_1464 + 2.0)) * exp2(log2(isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * (_1464 + 1.0))) + _1469) * _1434;
        float _1479 = _1402 * 0.5;
        float _1480 = _1412 * 0.5;
        float _1481 = _1422 * 0.5;
        float _1482 = dot(vec3(_1479, _1480, _1481), vec3(_1479, _1480, _1481));
        float _1487 = (_1482 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1482);
        float _1495 = (dot(vec3(_676, _677, _678), vec3(_1487 * _1479, _1487 * _1480, _1487 * _1481)) + 1.0) * 0.5;
        float _4020 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1504 = sqrt(((_1480 * _1480) + (_1479 * _1479)) + (_1481 * _1481)) / (_1435 + 9.9999997473787516355514526367188e-06);
        float _4031 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1506 = _1505 * 2.0;
        float _1510 = (1.0 - _1505) / (_1505 + 1.0);
        float _4042 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
        float _1520 = ((((1.0 - _1511) * (_1506 + 2.0)) * exp2(log2(isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0))) * (_1506 + 1.0))) + _1511) * _1435;
        float _1521 = _1403 * 0.5;
        float _1522 = _1413 * 0.5;
        float _1523 = _1423 * 0.5;
        float _1524 = dot(vec3(_1521, _1522, _1523), vec3(_1521, _1522, _1523));
        float _1529 = (_1524 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1524);
        float _1537 = (dot(vec3(_676, _677, _678), vec3(_1529 * _1521, _1529 * _1522, _1529 * _1523)) + 1.0) * 0.5;
        float _4053 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1546 = sqrt(((_1522 * _1522) + (_1521 * _1521)) + (_1523 * _1523)) / (_1436 + 9.9999997473787516355514526367188e-06);
        float _4064 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1548 = _1547 * 2.0;
        float _1552 = (1.0 - _1547) / (_1547 + 1.0);
        float _4075 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1553 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
        float _1562 = ((((1.0 - _1553) * (_1548 + 2.0)) * exp2(log2(isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * (_1548 + 1.0))) + _1553) * _1436;
        _1570 = _1403;
        _1571 = _1402;
        _1572 = _1401;
        _1573 = _1413;
        _1574 = _1412;
        _1575 = _1411;
        _1576 = _1423;
        _1577 = _1422;
        _1578 = _1421;
        _1579 = _1436;
        _1580 = _1435;
        _1581 = _1434;
        _1582 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)));
        _1583 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0)));
        _1584 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0)));
    }
    else
    {
        _1570 = _1258;
        _1571 = _1258;
        _1572 = _1258;
        _1573 = _1258;
        _1574 = _1258;
        _1575 = _1258;
        _1576 = _1258;
        _1577 = _1258;
        _1578 = _1258;
        _1579 = _1258;
        _1580 = _1258;
        _1581 = _1258;
        _1582 = 0.0;
        _1583 = 0.0;
        _1584 = 0.0;
    }
    float _1594 = (cbModelParam._m0[1u].x * (_1582 - _1270)) + _1270;
    float _1595 = (cbModelParam._m0[1u].x * (_1583 - _1271)) + _1271;
    float _1596 = (cbModelParam._m0[1u].x * (_1584 - _1272)) + _1272;
    float _1617 = fma(_1596, cbSceneParam._m0[89u].z, fma(_1595, cbSceneParam._m0[89u].y, _1594 * cbSceneParam._m0[89u].x));
    float _1620 = fma(_1596, cbSceneParam._m0[90u].z, fma(_1595, cbSceneParam._m0[90u].y, _1594 * cbSceneParam._m0[90u].x));
    float _1623 = fma(_1596, cbSceneParam._m0[91u].z, fma(_1595, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1594));
    float _1638 = _862 * 0.5;
    float _1639 = _863 * 0.5;
    float _1640 = _864 * 0.5;
    float _1641 = dot(vec4(_1638, _1639, _1640, 1.0), vec4(_1572, _1575, _1578, _1581));
    float _1644 = dot(vec4(_1638, _1639, _1640, 1.0), vec4(_1571, _1574, _1577, _1580));
    float _1647 = dot(vec4(_1638, _1639, _1640, 1.0), vec4(_1570, _1573, _1576, _1579));
    float _1681;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1654 = dot(vec4(_1638, _1639, _1640, 1.0), vec4(_1257, _1261, _1264, _1267));
        float _1658 = dot(vec4(_1638, _1639, _1640, 1.0), vec4(_1259, _1262, _1265, _1268));
        float _1662 = dot(vec4(_1638, _1639, _1640, 1.0), vec4(_1260, _1263, _1266, _1269));
        float _1669 = dot(vec4(cbModelParam._m0[39u]), vec4(_1638, _1639, _1640, 1.0));
        _1681 = dot(vec3(isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0)), isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0)), isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1669) ? 0.0 : (isnan(0.0) ? _1669 : max(0.0, _1669))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1681 = 1.0;
    }
    float _1692;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1683 = dot(vec4(cbModelParam._m0[40u]), vec4(_1638, _1639, _1640, 1.0));
        _1692 = dot(vec3(isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0)), isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0)), isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1683) ? 0.0 : (isnan(0.0) ? _1683 : max(0.0, _1683))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1692 = 1.0;
    }
    float _1696 = (_1692 * cbModelParam._m0[1u].x) + (_1681 * (1.0 - cbModelParam._m0[1u].x));
    float _1706 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _679);
    float _1707 = isnan(_1706) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1706 : min(cbModelParam._m0[25u].z, _1706));
    float _1787;
    float _1789;
    float _1791;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1754 = fma(_926, cbModelParam._m0[13u].z, fma(_922, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _918)) + cbModelParam._m0[13u].w;
        float _1758 = fma(_926, cbModelParam._m0[14u].z, fma(_922, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _918)) + cbModelParam._m0[14u].w;
        float _1762 = fma(_926, cbModelParam._m0[15u].z, fma(_922, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _918)) + cbModelParam._m0[15u].w;
        float _1765 = fma(_864, cbModelParam._m0[13u].z, fma(_863, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _862));
        float _1768 = fma(_864, cbModelParam._m0[14u].z, fma(_863, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _862));
        float _1771 = fma(_864, cbModelParam._m0[15u].z, fma(_863, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _862));
        float _1799;
        if (_1765 > 0.0)
        {
            _1799 = abs((1.0 - _1754) / _1765);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1765 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1754 + 1.0) / _1765);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1799 = frontier_phi_17_15_ladder;
        }
        float _2025;
        if (_1768 > 0.0)
        {
            _2025 = abs((1.0 - _1758) / _1768);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1768 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1758 + 1.0) / _1768);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2025 = frontier_phi_26_22_ladder;
        }
        float _2282;
        if (_1771 > 0.0)
        {
            _2282 = abs((1.0 - _1762) / _1771);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1771 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1762 + 1.0) / _1771);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2282 = frontier_phi_38_33_ladder;
        }
        float _2284 = isnan(_2025) ? _1799 : (isnan(_1799) ? _2025 : min(_1799, _2025));
        float _2285 = isnan(_2282) ? _2284 : (isnan(_2284) ? _2282 : min(_2284, _2282));
        float _2289 = (_2285 * _1765) + _1754;
        float _2290 = (_2285 * _1768) + _1758;
        float _2291 = (_2285 * _1771) + _1762;
        float _2292 = _2285 * 9.9999997473787516355514526367188e-05;
        float _2294 = (-1.0) - _2292;
        float _2296 = _2292 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2291 > _2296) || ((_2291 < _2294) || ((_2290 > _2296) || ((_2290 < _2294) || ((_2289 < _2294) || (_2289 > _2296))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2419 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2291, cbModelParam._m0[9u].z, fma(_2290, cbModelParam._m0[9u].y, _2289 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2291, cbModelParam._m0[10u].z, fma(_2290, cbModelParam._m0[10u].y, _2289 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2291, cbModelParam._m0[11u].z, fma(_2290, cbModelParam._m0[11u].y, _2289 * cbModelParam._m0[11u].x))), _1707);
            frontier_phi_16_38_ladder = _2419.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2419.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2419.x * cbModelParam._m0[1u].y;
        }
        _1787 = frontier_phi_16_38_ladder_2;
        _1789 = frontier_phi_16_38_ladder_1;
        _1791 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1775 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_862, _863, _864), _1707);
        _1787 = _1775.x * cbModelParam._m0[1u].y;
        _1789 = _1775.y * cbModelParam._m0[1u].y;
        _1791 = _1775.z * cbModelParam._m0[1u].y;
    }
    float _1795 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _679);
    float _1796 = isnan(_1795) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1795 : min(cbModelParam._m0[25u].w, _1795));
    float _1887;
    float _1889;
    float _1891;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1851 = fma(_926, cbModelParam._m0[21u].z, fma(_922, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _918)) + cbModelParam._m0[21u].w;
        float _1855 = fma(_926, cbModelParam._m0[22u].z, fma(_922, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _918)) + cbModelParam._m0[22u].w;
        float _1859 = fma(_926, cbModelParam._m0[23u].z, fma(_922, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _918)) + cbModelParam._m0[23u].w;
        float _1862 = fma(_864, cbModelParam._m0[21u].z, fma(_863, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _862));
        float _1865 = fma(_864, cbModelParam._m0[22u].z, fma(_863, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _862));
        float _1868 = fma(_864, cbModelParam._m0[23u].z, fma(_863, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _862));
        float _2030;
        if (_1862 > 0.0)
        {
            _2030 = abs((1.0 - _1851) / _1862);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1862 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1851 + 1.0) / _1862);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2030 = frontier_phi_28_24_ladder;
        }
        float _2309;
        if (_1865 > 0.0)
        {
            _2309 = abs((1.0 - _1855) / _1865);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1865 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1855 + 1.0) / _1865);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2309 = frontier_phi_40_35_ladder;
        }
        float _2522;
        if (_1868 > 0.0)
        {
            _2522 = abs((1.0 - _1859) / _1868);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1868 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1859 + 1.0) / _1868);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2522 = frontier_phi_49_46_ladder;
        }
        float _2524 = isnan(_2309) ? _2030 : (isnan(_2030) ? _2309 : min(_2030, _2309));
        float _2525 = isnan(_2522) ? _2524 : (isnan(_2524) ? _2522 : min(_2524, _2522));
        float _2529 = (_2525 * _1862) + _1851;
        float _2530 = (_2525 * _1865) + _1855;
        float _2531 = (_2525 * _1868) + _1859;
        float _2532 = _2525 * 9.9999997473787516355514526367188e-05;
        float _2533 = (-1.0) - _2532;
        float _2535 = _2532 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2531 > _2535) || ((_2531 < _2533) || ((_2530 > _2535) || ((_2530 < _2533) || ((_2529 < _2533) || (_2529 > _2535))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2730 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2531, cbModelParam._m0[17u].z, fma(_2530, cbModelParam._m0[17u].y, _2529 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2531, cbModelParam._m0[18u].z, fma(_2530, cbModelParam._m0[18u].y, _2529 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2531, cbModelParam._m0[19u].z, fma(_2530, cbModelParam._m0[19u].y, _2529 * cbModelParam._m0[19u].x))), _1796);
            frontier_phi_25_49_ladder = _2730.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2730.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2730.x * cbModelParam._m0[1u].z;
        }
        _1887 = frontier_phi_25_49_ladder_2;
        _1889 = frontier_phi_25_49_ladder_1;
        _1891 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1871 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_862, _863, _864), _1796);
        _1887 = _1871.x * cbModelParam._m0[1u].z;
        _1889 = _1871.y * cbModelParam._m0[1u].z;
        _1891 = _1871.z * cbModelParam._m0[1u].z;
    }
    float _1904 = (((_889 * _839) + _890) * _854) * ((cbModelParam._m0[1u].w * (_1887 - _1787)) + _1787);
    float _1906 = (((_889 * _841) + _890) * _854) * ((cbModelParam._m0[1u].w * (_1889 - _1789)) + _1789);
    float _1908 = (((_889 * _842) + _890) * _854) * ((cbModelParam._m0[1u].w * (_1891 - _1791)) + _1791);
    float _1911 = fma(_1908, cbSceneParam._m0[89u].z, fma(_1906, cbSceneParam._m0[89u].y, _1904 * cbSceneParam._m0[89u].x));
    float _1914 = fma(_1908, cbSceneParam._m0[90u].z, fma(_1906, cbSceneParam._m0[90u].y, _1904 * cbSceneParam._m0[90u].x));
    float _1917 = fma(_1908, cbSceneParam._m0[91u].z, fma(_1906, cbSceneParam._m0[91u].y, _1904 * cbSceneParam._m0[91u].x));
    vec4 _1925 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_776, _777));
    float _1927 = _1925.w;
    float _1939 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1927);
    float _1940 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1927);
    float _1941 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1927);
    uvec4 _1945 = floatBitsToUint(cbInstanceData._m0[_814 + 5u]);
    uint _1947 = _1945.x * 14u;
    uint _1948 = _1947 + 13u;
    float _1955 = _854 + (-1.0);
    float _1960 = (cbLight._m0[_1948].x * _1955) + 1.0;
    float _1961 = (cbLight._m0[_1948].y * _1955) + 1.0;
    float _1962 = (cbLight._m0[_1948].z * _1955) + 1.0;
    float _1963 = (cbLight._m0[_1948].w * _1955) + 1.0;
    uint _1964 = _1947 + 5u;
    float _1970 = isnan(1.0) ? _1961 : (isnan(_1961) ? 1.0 : min(_1961, 1.0));
    uint _1974 = _1947 + 4u;
    float _1984 = isnan(1.0) ? _1960 : (isnan(_1960) ? 1.0 : min(_1960, 1.0));
    uint _1988 = _1947 | 1u;
    float _1999 = dot(vec3(cbLight._m0[_1947].xyz), vec3(_676, _677, _678));
    float _2002 = dot(vec3(cbLight._m0[_1988].xyz), vec3(_676, _677, _678));
    float _4211 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
    float _4222 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2007 = (isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * 0.3183098733425140380859375;
    float _2009 = (isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0))) * 0.3183098733425140380859375;
    float _2016 = ((cbLight._m0[_1964].x * _1970) * _2009) + (((cbLight._m0[_1974].x * _1939) * _1984) * _2007);
    float _2017 = ((_1970 * cbLight._m0[_1964].y) * _2009) + (((cbLight._m0[_1974].y * _1940) * _1984) * _2007);
    float _2018 = ((_1970 * cbLight._m0[_1964].z) * _2009) + (((cbLight._m0[_1974].z * _1941) * _1984) * _2007);
    uvec4 _2022 = floatBitsToUint(cbLight._m0[_1947 + 12u]);
    bool _2024 = _2022.x == 0u;
    float _2035;
    float _2037;
    float _2039;
    if (_2024)
    {
        _2035 = _2016;
        _2037 = _2017;
        _2039 = _2018;
    }
    else
    {
        uint _2043 = _1947 + 6u;
        float _2059 = (dot(vec3(cbLight._m0[_1947 + 2u].xyz), vec3(_676, _677, _678)) * 0.5) + 0.5;
        float _2060 = _2059 * _2059;
        float _4233 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
        float _2061 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _2062 = isnan(1.0) ? _1962 : (isnan(_1962) ? 1.0 : min(_1962, 1.0));
        _2035 = (((cbLight._m0[_2043].x * 0.3183098733425140380859375) * _2061) * _2062) + _2016;
        _2037 = (((cbLight._m0[_2043].y * 0.3183098733425140380859375) * _2061) * _2062) + _2017;
        _2039 = (((cbLight._m0[_2043].z * 0.3183098733425140380859375) * _2061) * _2062) + _2018;
    }
    bool _2042 = _2022.y == 0u;
    float _2080;
    float _2082;
    float _2084;
    if (_2042)
    {
        _2080 = _2035;
        _2082 = _2037;
        _2084 = _2039;
    }
    else
    {
        uint _2253 = _1947 + 7u;
        float _2269 = (dot(vec3(cbLight._m0[_1947 + 3u].xyz), vec3(_676, _677, _678)) * 0.5) + 0.5;
        float _2270 = _2269 * _2269;
        float _4249 = isnan(0.0) ? _2270 : (isnan(_2270) ? 0.0 : max(_2270, 0.0));
        float _2271 = isnan(1.0) ? _4249 : (isnan(_4249) ? 1.0 : min(_4249, 1.0));
        float _2272 = isnan(1.0) ? _1963 : (isnan(_1963) ? 1.0 : min(_1963, 1.0));
        _2080 = (((cbLight._m0[_2253].x * 0.3183098733425140380859375) * _2271) * _2272) + _2035;
        _2082 = (((cbLight._m0[_2253].y * 0.3183098733425140380859375) * _2271) * _2272) + _2037;
        _2084 = (((cbLight._m0[_2253].z * 0.3183098733425140380859375) * _2271) * _2272) + _2039;
    }
    uint _2087 = _1947 + 8u;
    float _2100 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1947].w)) * _679) * 0.949999988079071044921875);
    float _2101 = _2100 * _2100;
    float _2102 = cbLight._m0[_1947].x + _756;
    float _2103 = cbLight._m0[_1947].y + _757;
    float _2104 = cbLight._m0[_1947].z + _758;
    float _2108 = inversesqrt(dot(vec3(_2102, _2103, _2104), vec3(_2102, _2103, _2104)));
    float _2109 = _2108 * _2102;
    float _2110 = _2108 * _2103;
    float _2111 = _2108 * _2104;
    float _2112 = dot(vec3(_676, _677, _678), vec3(cbLight._m0[_1947].xyz));
    float _4265 = isnan(0.0) ? _2112 : (isnan(_2112) ? 0.0 : max(_2112, 0.0));
    float _2115 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
    float _4276 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
    float _2116 = isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0));
    float _2117 = dot(vec3(_676, _677, _678), vec3(_2109, _2110, _2111));
    float _4287 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
    float _2120 = isnan(1.0) ? _4287 : (isnan(_4287) ? 1.0 : min(_4287, 1.0));
    float _2121 = dot(vec3(cbLight._m0[_1947].xyz), vec3(_2109, _2110, _2111));
    float _4298 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
    float _2125 = _2101 * _2101;
    float _2129 = ((_2120 * _2120) * (_2125 + (-1.0))) + 1.0;
    float _2137 = exp2(log2(1.0 - (isnan(1.0) ? _4298 : (isnan(_4298) ? 1.0 : min(_4298, 1.0)))) * 5.0);
    float _2138 = 0.959999978542327880859375 - _836;
    float _2140 = 0.959999978542327880859375 - _837;
    float _2141 = 0.959999978542327880859375 - _838;
    float _2148 = 1.0 - _2101;
    float _2159 = (0.5 / (((_2116 * ((_2115 * _2148) + _2101)) + 9.9999999392252902907785028219223e-09) + (((_2116 * _2148) + _2101) * _2115))) * _2115;
    float _4309 = isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0));
    float _2161 = (isnan(1.0) ? _4309 : (isnan(_4309) ? 1.0 : min(_4309, 1.0))) * (_2125 / ((_2129 * _2129) * 3.141590118408203125));
    uint _2175 = _1947 + 9u;
    float _2186 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1988].w)) * _679) * 0.949999988079071044921875);
    float _2187 = _2186 * _2186;
    float _2188 = cbLight._m0[_1988].x + _756;
    float _2189 = cbLight._m0[_1988].y + _757;
    float _2190 = cbLight._m0[_1988].z + _758;
    float _2194 = inversesqrt(dot(vec3(_2188, _2189, _2190), vec3(_2188, _2189, _2190)));
    float _2195 = _2194 * _2188;
    float _2196 = _2194 * _2189;
    float _2197 = _2194 * _2190;
    float _2198 = dot(vec3(_676, _677, _678), vec3(cbLight._m0[_1988].xyz));
    float _4320 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
    float _2201 = isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0));
    float _2202 = dot(vec3(_676, _677, _678), vec3(_2195, _2196, _2197));
    float _4331 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
    float _2205 = isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0));
    float _2206 = dot(vec3(cbLight._m0[_1988].xyz), vec3(_2195, _2196, _2197));
    float _4342 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
    float _2210 = _2187 * _2187;
    float _2214 = ((_2205 * _2205) * (_2210 + (-1.0))) + 1.0;
    float _2221 = exp2(log2(1.0 - (isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0)))) * 5.0);
    float _2228 = 1.0 - _2187;
    float _2238 = (0.5 / (((_2116 * ((_2201 * _2228) + _2187)) + 9.9999999392252902907785028219223e-09) + (((_2116 * _2228) + _2187) * _2201))) * _2201;
    float _4353 = isnan(0.0) ? _2238 : (isnan(_2238) ? 0.0 : max(_2238, 0.0));
    float _2240 = (isnan(1.0) ? _4353 : (isnan(_4353) ? 1.0 : min(_4353, 1.0))) * (_2210 / ((_2214 * _2214) * 3.141590118408203125));
    float _2250 = (((((_2221 * _2138) + _839) * cbLight._m0[_2175].x) * _2240) * _1970) + ((((cbLight._m0[_2087].x * _1939) * ((_2137 * _2138) + _839)) * _2161) * _1984);
    float _2251 = (((((_2221 * _2140) + _841) * cbLight._m0[_2175].y) * _2240) * _1970) + ((((cbLight._m0[_2087].y * _1940) * ((_2137 * _2140) + _841)) * _2161) * _1984);
    float _2252 = (((((_2221 * _2141) + _842) * cbLight._m0[_2175].z) * _2240) * _1970) + ((((cbLight._m0[_2087].z * _1941) * ((_2137 * _2141) + _842)) * _2161) * _1984);
    float _2314;
    float _2316;
    float _2318;
    if (_2024)
    {
        _2314 = _2250;
        _2316 = _2251;
        _2318 = _2252;
    }
    else
    {
        uint _2320 = _1947 + 2u;
        uint _2324 = _1947 + 10u;
        float _2338 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2320].w)) * _679) * 0.949999988079071044921875);
        float _2339 = _2338 * _2338;
        float _2340 = cbLight._m0[_2320].x + _756;
        float _2341 = cbLight._m0[_2320].y + _757;
        float _2342 = cbLight._m0[_2320].z + _758;
        float _2346 = inversesqrt(dot(vec3(_2340, _2341, _2342), vec3(_2340, _2341, _2342)));
        float _2347 = _2346 * _2340;
        float _2348 = _2346 * _2341;
        float _2349 = _2346 * _2342;
        float _2350 = dot(vec3(_676, _677, _678), vec3(cbLight._m0[_2320].xyz));
        float _4364 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
        float _2353 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
        float _2354 = dot(vec3(_676, _677, _678), vec3(_2347, _2348, _2349));
        float _4375 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
        float _2357 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
        float _2358 = dot(vec3(cbLight._m0[_2320].xyz), vec3(_2347, _2348, _2349));
        float _4386 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
        float _2362 = _2339 * _2339;
        float _2366 = ((_2357 * _2357) * (_2362 + (-1.0))) + 1.0;
        float _2373 = exp2(log2(1.0 - (isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0)))) * 5.0);
        float _2380 = 1.0 - _2339;
        float _2390 = (0.5 / (((_2116 * ((_2353 * _2380) + _2339)) + 9.9999999392252902907785028219223e-09) + (((_2116 * _2380) + _2339) * _2353))) * _2353;
        float _4397 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
        float _2392 = (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0))) * (_2362 / ((_2366 * _2366) * 3.141590118408203125));
        float _2393 = isnan(1.0) ? _1962 : (isnan(_1962) ? 1.0 : min(_1962, 1.0));
        _2314 = (((((_2373 * _2138) + _839) * cbLight._m0[_2324].x) * _2392) * _2393) + _2250;
        _2316 = (((((_2373 * _2140) + _841) * cbLight._m0[_2324].y) * _2392) * _2393) + _2251;
        _2318 = (((((_2373 * _2141) + _842) * cbLight._m0[_2324].z) * _2392) * _2393) + _2252;
    }
    float _2428;
    float _2430;
    float _2432;
    if (_2042)
    {
        _2428 = _2314;
        _2430 = _2316;
        _2432 = _2318;
    }
    else
    {
        uint _2439 = _1947 + 3u;
        uint _2443 = _1947 + 11u;
        float _2457 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2439].w)) * _679) * 0.949999988079071044921875);
        float _2458 = _2457 * _2457;
        float _2459 = cbLight._m0[_2439].x + _756;
        float _2460 = cbLight._m0[_2439].y + _757;
        float _2461 = cbLight._m0[_2439].z + _758;
        float _2465 = inversesqrt(dot(vec3(_2459, _2460, _2461), vec3(_2459, _2460, _2461)));
        float _2466 = _2465 * _2459;
        float _2467 = _2465 * _2460;
        float _2468 = _2465 * _2461;
        float _2469 = dot(vec3(_676, _677, _678), vec3(cbLight._m0[_2439].xyz));
        float _4413 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0));
        float _2472 = isnan(1.0) ? _4413 : (isnan(_4413) ? 1.0 : min(_4413, 1.0));
        float _2473 = dot(vec3(_676, _677, _678), vec3(_2466, _2467, _2468));
        float _4424 = isnan(0.0) ? _2473 : (isnan(_2473) ? 0.0 : max(_2473, 0.0));
        float _2476 = isnan(1.0) ? _4424 : (isnan(_4424) ? 1.0 : min(_4424, 1.0));
        float _2477 = dot(vec3(cbLight._m0[_2439].xyz), vec3(_2466, _2467, _2468));
        float _4435 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
        float _2481 = _2458 * _2458;
        float _2485 = ((_2476 * _2476) * (_2481 + (-1.0))) + 1.0;
        float _2492 = exp2(log2(1.0 - (isnan(1.0) ? _4435 : (isnan(_4435) ? 1.0 : min(_4435, 1.0)))) * 5.0);
        float _2499 = 1.0 - _2458;
        float _2509 = (0.5 / (((_2116 * ((_2472 * _2499) + _2458)) + 9.9999999392252902907785028219223e-09) + (((_2116 * _2499) + _2458) * _2472))) * _2472;
        float _4446 = isnan(0.0) ? _2509 : (isnan(_2509) ? 0.0 : max(_2509, 0.0));
        float _2511 = (isnan(1.0) ? _4446 : (isnan(_4446) ? 1.0 : min(_4446, 1.0))) * (_2481 / ((_2485 * _2485) * 3.141590118408203125));
        float _2512 = isnan(1.0) ? _1963 : (isnan(_1963) ? 1.0 : min(_1963, 1.0));
        _2428 = (((((_2492 * _2138) + _839) * cbLight._m0[_2443].x) * _2511) * _2512) + _2314;
        _2430 = (((((_2492 * _2140) + _841) * cbLight._m0[_2443].y) * _2511) * _2512) + _2316;
        _2432 = (((((_2492 * _2141) + _842) * cbLight._m0[_2443].z) * _2511) * _2512) + _2318;
    }
    float _2647;
    float _2649;
    float _2651;
    float _2653;
    float _2655;
    float _2657;
    if (_1945.y == 0u)
    {
        float _2587 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2588 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2587;
        float _2589 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2587;
        float _2590 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2587;
        uvec4 _2602 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2603 = _2602.x;
        uint _2614 = uint((float(_2602.y) * floor(float(uint(cbSceneParam._m0[85u].y * _777) / _2603))) + floor(float(uint(cbSceneParam._m0[85u].x * _776) / _2603)));
        float _2624 = (log2(_2590 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2625 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0));
        uint _2628 = uint(isnan(14.0) ? _2625 : (isnan(_2625) ? 14.0 : min(_2625, 14.0)));
        uvec4 _2633 = texelFetch(g_lightClusterGridBuffer, int(((_2628 << 2u) + (_2614 << 6u)) >> 2u));
        uint _2634 = _2633.x;
        uint _2635 = _2602.z;
        float _2735;
        float _2737;
        float _2739;
        float _2741;
        float _2743;
        float _2745;
        if (((((1u << ((_2635 >> 4u) & 15u)) + 4294967295u) & _2634) == 0u) || ((_2635 & 240u) == 0u))
        {
            _2735 = 0.0;
            _2737 = 0.0;
            _2739 = 0.0;
            _2741 = 0.0;
            _2743 = 0.0;
            _2745 = 0.0;
        }
        else
        {
            float _2736;
            float _2738;
            float _2740;
            float _2742;
            float _2744;
            float _2746;
            float _2888 = 0.0;
            float _2889 = 0.0;
            float _2890 = 0.0;
            float _2891 = 0.0;
            float _2892 = 0.0;
            float _2893 = 0.0;
            uint _2894 = 0u;
            uint _2903;
            bool _2904;
            for (;;)
            {
                _2903 = texelFetch(g_lightClassification, int((((_2628 << 5u) + (_2614 << 9u)) + (_2894 << 2u)) >> 2u)).x;
                _2904 = _2903 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2904)
                {
                    frontier_phi_66_pred = _2888;
                    frontier_phi_66_pred_1 = _2893;
                    frontier_phi_66_pred_2 = _2892;
                    frontier_phi_66_pred_3 = _2891;
                    frontier_phi_66_pred_4 = _2890;
                    frontier_phi_66_pred_5 = _2889;
                }
                else
                {
                    float _3033;
                    float _3034;
                    float _3035;
                    float _3036;
                    float _3037;
                    float _3038;
                    uint _3039;
                    _3033 = _2888;
                    _3034 = _2889;
                    _3035 = _2890;
                    _3036 = _2891;
                    _3037 = _2892;
                    _3038 = _2893;
                    _3039 = _2903;
                    float _2960;
                    float _2961;
                    float _2962;
                    float _2963;
                    float _2964;
                    float _2965;
                    for (;;)
                    {
                        uint _3043 = uint(findLSB(_3039)) + (_2894 << 5u);
                        uint _3040 = (_3039 + 4294967295u) & _3039;
                        uint _3045 = _3043 * 48u;
                        vec4 _3059 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3045)).x, texelFetch(g_PointLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3045 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3045 + 3u)).x));
                        uint _3065 = (_3043 * 48u) + 4u;
                        vec4 _3078 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3065)).x, texelFetch(g_PointLightRenderingBuffer, int(_3065 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3065 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3065 + 3u)).x));
                        uint _3084 = (_3043 * 48u) + 8u;
                        vec3 _3095 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3084)).x, texelFetch(g_PointLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3084 + 2u)).x));
                        float _3099 = _3059.x - _2588;
                        float _3100 = _3059.y - _2589;
                        float _3101 = _3059.z - _2590;
                        float _3102 = dot(vec3(_3099, _3100, _3101), vec3(_3099, _3100, _3101));
                        float _3105 = inversesqrt(_3102);
                        float _3106 = _3105 * _3099;
                        float _3107 = _3105 * _3100;
                        float _3108 = _3105 * _3101;
                        float _3109 = dot(vec3(_795, _798, _801), vec3(_3106, _3107, _3108));
                        float _3114 = 1.0 - (_3102 * _3059.w);
                        float _4472 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0));
                        float _3115 = isnan(1.0) ? _4472 : (isnan(_4472) ? 1.0 : min(_4472, 1.0));
                        float _3116 = sqrt(_3102) * _3078.w;
                        float _3119 = 1.39999997615814208984375 / (_3116 + 1.39999997615814208984375);
                        float _3120 = _3119 * _3119;
                        float _3123 = ((1.0 - _3120) * _3109) + _3120;
                        float _3126 = _3116 * _3116;
                        float _3130 = ((isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0))) * _3115) / ((_3126 * 0.699999988079071044921875) + 1.0);
                        float _3134 = (-0.0) - _2588;
                        float _3135 = (-0.0) - _2589;
                        float _3136 = (-0.0) - _2590;
                        float _3140 = inversesqrt(dot(vec3(_3134, _3135, _3136), vec3(_3134, _3135, _3136)));
                        float _3141 = _3140 * _3134;
                        float _3142 = _3140 * _3135;
                        float _3143 = _3140 * _3136;
                        float _3151 = exp2(log2(1.0 / ((_3126 * 3.5) + 5.0)) * 0.25);
                        float _3152 = 1.0 - _870;
                        float _3159 = sqrt(1.0 - ((1.0 - (_3152 * _3152)) * (1.0 - (_3151 * _3151))));
                        float _3160 = _3159 * _3159;
                        float _3161 = _3160 * _3160;
                        float _3162 = _3141 + _3106;
                        float _3163 = _3142 + _3107;
                        float _3164 = _3143 + _3108;
                        float _3168 = inversesqrt(dot(vec3(_3162, _3163, _3164), vec3(_3162, _3163, _3164)));
                        float _3172 = dot(vec3(_795, _798, _801), vec3(_3141, _3142, _3143));
                        float _4488 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
                        float _3175 = isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0));
                        float _3176 = dot(vec3(_795, _798, _801), vec3(_3168 * _3162, _3168 * _3163, _3168 * _3164));
                        float _4499 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                        float _3179 = isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0));
                        float _3183 = ((_3179 * _3179) * (_3161 + (-1.0))) + 1.0;
                        float _3184 = _3119 * _3160;
                        float _3185 = _3184 * _3184;
                        float _3188 = ((1.0 - _3185) * _3109) + _3185;
                        float _4510 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                        float _3189 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
                        float _3190 = 1.0 - _3160;
                        float _3200 = (0.5 / (((_3189 * ((_3175 * _3190) + _3160)) + 9.9999999392252902907785028219223e-09) + (((_3189 * _3190) + _3160) * _3175))) * _3189;
                        float _4521 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
                        float _3211 = (((_3161 * 3.1415927410125732421875) * (isnan(1.0) ? _4521 : (isnan(_4521) ? 1.0 : min(_4521, 1.0)))) / ((_3183 * _3183) * ((_3126 * 2.1991131305694580078125) + 3.141590118408203125))) * _3115;
                        _2963 = (_3130 * _3078.x) + _3036;
                        _2964 = (_3130 * _3078.y) + _3037;
                        _2965 = (_3130 * _3078.z) + _3038;
                        _2960 = (_3211 * _3095.x) + _3033;
                        _2961 = (_3211 * _3095.y) + _3034;
                        _2962 = (_3211 * _3095.z) + _3035;
                        if (_3040 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3033 = _2960;
                            _3034 = _2961;
                            _3035 = _2962;
                            _3036 = _2963;
                            _3037 = _2964;
                            _3038 = _2965;
                            _3039 = _3040;
                        }
                    }
                    frontier_phi_66_pred = _2960;
                    frontier_phi_66_pred_1 = _2965;
                    frontier_phi_66_pred_2 = _2964;
                    frontier_phi_66_pred_3 = _2963;
                    frontier_phi_66_pred_4 = _2962;
                    frontier_phi_66_pred_5 = _2961;
                }
                _2736 = frontier_phi_66_pred;
                _2746 = frontier_phi_66_pred_1;
                _2744 = frontier_phi_66_pred_2;
                _2742 = frontier_phi_66_pred_3;
                _2740 = frontier_phi_66_pred_4;
                _2738 = frontier_phi_66_pred_5;
                uint _2895 = _2894 + 1u;
                if (_2895 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2888 = _2736;
                    _2889 = _2738;
                    _2890 = _2740;
                    _2891 = _2742;
                    _2892 = _2744;
                    _2893 = _2746;
                    _2894 = _2895;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2735 = _2736;
            _2737 = _2738;
            _2739 = _2740;
            _2741 = _2742;
            _2743 = _2744;
            _2745 = _2746;
        }
        uvec4 _2749 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2750 = _2749.z;
        uint _2752 = (_2750 >> 8u) & 15u;
        float _2856;
        float _2858;
        float _2860;
        float _2862;
        float _2864;
        float _2866;
        if (((4294967295u << _2752) & _2634) == 0u)
        {
            _2856 = _2735;
            _2858 = _2737;
            _2860 = _2739;
            _2862 = _2741;
            _2864 = _2743;
            _2866 = _2745;
        }
        else
        {
            float _2881 = inversesqrt(dot(vec3(_2588, _2589, _2590), vec3(_2588, _2589, _2590)));
            float _2882 = _2881 * _2588;
            float _2883 = _2881 * _2589;
            float _2884 = _2881 * _2590;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2752 < ((_2750 >> 12u) & 15u))
            {
                float _2857;
                float _2859;
                float _2861;
                float _2863;
                float _2865;
                float _2867;
                float _3016 = _2735;
                float _3017 = _2737;
                float _3018 = _2739;
                float _3019 = _2741;
                float _3020 = _2743;
                float _3021 = _2745;
                uint _3022 = _2752;
                uint _3031;
                bool _3032;
                for (;;)
                {
                    _3031 = texelFetch(g_lightClassification, int((((_2628 << 5u) + (_2614 << 9u)) + (_3022 << 2u)) >> 2u)).x;
                    _3032 = _3031 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3032)
                    {
                        frontier_phi_77_pred = _3021;
                        frontier_phi_77_pred_1 = _3020;
                        frontier_phi_77_pred_2 = _3019;
                        frontier_phi_77_pred_3 = _3018;
                        frontier_phi_77_pred_4 = _3017;
                        frontier_phi_77_pred_5 = _3016;
                    }
                    else
                    {
                        float _3225;
                        float _3226;
                        float _3227;
                        float _3228;
                        float _3229;
                        float _3230;
                        float _3519;
                        float _3520;
                        float _3521;
                        float _3522;
                        float _3523;
                        float _3524;
                        float _3238 = _3016;
                        float _3239 = _3017;
                        float _3240 = _3018;
                        float _3241 = _3019;
                        float _3242 = _3020;
                        float _3243 = _3021;
                        uint _3244 = _3031;
                        uint _3245;
                        vec4 _3270;
                        float _3271;
                        vec4 _3286;
                        vec3 _3298;
                        vec4 _3313;
                        vec4 _3328;
                        float _3375;
                        bool _3376;
                        for (;;)
                        {
                            uint _3255 = ((_3022 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3244));
                            _3245 = (_3244 + 4294967295u) & _3244;
                            uint _3257 = _3255 * 40u;
                            _3270 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3257)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3257 + 3u)).x));
                            _3271 = _3270.w;
                            uint _3273 = (_3255 * 40u) + 4u;
                            _3286 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3273)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3273 + 3u)).x));
                            uint _3288 = (_3255 * 40u) + 8u;
                            _3298 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3288)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 2u)).x));
                            uint _3300 = (_3255 * 40u) + 16u;
                            _3313 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3300)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3300 + 3u)).x));
                            uint _3315 = (_3255 * 40u) + 20u;
                            _3328 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3315)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3315 + 3u)).x));
                            uint _3331 = (_3255 * 40u) + 24u;
                            vec4 _3344 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3331)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3331 + 3u)).x));
                            uint _3350 = (_3255 * 40u) + 28u;
                            vec4 _3363 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3350)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 3u)).x));
                            _3375 = fma(_2590, _3363.z, fma(_2589, _3363.y, _3363.x * _2588)) + _3363.w;
                            _3376 = !((fma(_2590, _3344.z, fma(_2589, _3344.y, _3344.x * _2588)) + _3344.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3376)
                            {
                                float _3403 = _3270.x - _2588;
                                float _3404 = _3270.y - _2589;
                                float _3405 = _3270.z - _2590;
                                float _3406 = dot(vec3(_3403, _3404, _3405), vec3(_3403, _3404, _3405));
                                float _3409 = inversesqrt(_3406);
                                float _3410 = _3409 * _3403;
                                float _3411 = _3409 * _3404;
                                float _3412 = _3409 * _3405;
                                float _3416 = 1.0 - (_3406 / (_3271 * _3271));
                                float _4532 = isnan(0.0) ? _3416 : (isnan(_3416) ? 0.0 : max(_3416, 0.0));
                                float _3417 = isnan(1.0) ? _4532 : (isnan(_4532) ? 1.0 : min(_4532, 1.0));
                                float _3421 = sqrt(_3406) * _3286.w;
                                float _3423 = 1.39999997615814208984375 / (_3421 + 1.39999997615814208984375);
                                float _3424 = _3423 * _3423;
                                float _3427 = ((1.0 - _3424) * dot(vec3(_3410, _3411, _3412), vec3(_795, _798, _801))) + _3424;
                                float _3430 = _3421 * _3421;
                                float _3434 = (fma(_2590, _3313.z, fma(_2589, _3313.y, _3313.x * _2588)) + _3313.w) / _3375;
                                float _3435 = (fma(_2590, _3328.z, fma(_2589, _3328.y, _3328.x * _2588)) + _3328.w) / _3375;
                                float _3439 = 1.0 - dot(vec2(_3434, _3435), vec2(_3434, _3435));
                                float _4548 = isnan(0.0) ? _3439 : (isnan(_3439) ? 0.0 : max(_3439, 0.0));
                                float _3440 = isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0));
                                float _3441 = _3440 * (((isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0))) * _3417) / ((_3430 * 0.699999988079071044921875) + 1.0));
                                float _3453 = exp2(log2(1.0 / ((_3430 * 3.5) + 5.0)) * 0.25);
                                float _3454 = 1.0 - _870;
                                float _3461 = sqrt(1.0 - ((1.0 - (_3454 * _3454)) * (1.0 - (_3453 * _3453))));
                                float _3462 = _3461 * _3461;
                                float _3463 = _3462 * _3462;
                                float _3464 = _3410 - _2882;
                                float _3465 = _3411 - _2883;
                                float _3466 = _3412 - _2884;
                                float _3470 = inversesqrt(dot(vec3(_3464, _3465, _3466), vec3(_3464, _3465, _3466)));
                                float _3474 = dot(vec3(_795, _798, _801), vec3((-0.0) - _2882, (-0.0) - _2883, (-0.0) - _2884));
                                float _4559 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0));
                                float _3477 = isnan(1.0) ? _4559 : (isnan(_4559) ? 1.0 : min(_4559, 1.0));
                                float _3478 = dot(vec3(_795, _798, _801), vec3(_3470 * _3464, _3470 * _3465, _3470 * _3466));
                                float _4570 = isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0));
                                float _3481 = isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0));
                                float _3485 = ((_3481 * _3481) * (_3463 + (-1.0))) + 1.0;
                                float _3486 = _3423 * _3462;
                                float _3487 = _3486 * _3486;
                                float _3493 = ((1.0 - _3487) * dot(vec3(_795, _798, _801), vec3(_3410, _3411, _3412))) + _3487;
                                float _4581 = isnan(0.0) ? _3493 : (isnan(_3493) ? 0.0 : max(_3493, 0.0));
                                float _3494 = isnan(1.0) ? _4581 : (isnan(_4581) ? 1.0 : min(_4581, 1.0));
                                float _3495 = 1.0 - _3462;
                                float _3505 = (0.5 / (((_3494 * ((_3477 * _3495) + _3462)) + 9.9999999392252902907785028219223e-09) + (((_3494 * _3495) + _3462) * _3477))) * _3494;
                                float _4592 = isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0));
                                float _3515 = (_3440 * _3417) * (((_3463 * 3.1415927410125732421875) * (isnan(1.0) ? _4592 : (isnan(_4592) ? 1.0 : min(_4592, 1.0)))) / ((_3485 * _3485) * ((_3430 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3441 * _3286.y;
                                frontier_phi_83_pred_1 = _3441 * _3286.x;
                                frontier_phi_83_pred_2 = _3515 * _3298.z;
                                frontier_phi_83_pred_3 = _3515 * _3298.y;
                                frontier_phi_83_pred_4 = _3515 * _3298.x;
                                frontier_phi_83_pred_5 = _3441 * _3286.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3523 = frontier_phi_83_pred;
                            _3522 = frontier_phi_83_pred_1;
                            _3521 = frontier_phi_83_pred_2;
                            _3520 = frontier_phi_83_pred_3;
                            _3519 = frontier_phi_83_pred_4;
                            _3524 = frontier_phi_83_pred_5;
                            _3228 = _3522 + _3241;
                            _3229 = _3523 + _3242;
                            _3230 = _3524 + _3243;
                            _3225 = _3519 + _3238;
                            _3226 = _3520 + _3239;
                            _3227 = _3521 + _3240;
                            if (_3245 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3238 = _3225;
                                _3239 = _3226;
                                _3240 = _3227;
                                _3241 = _3228;
                                _3242 = _3229;
                                _3243 = _3230;
                                _3244 = _3245;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3230;
                        frontier_phi_77_pred_1 = _3229;
                        frontier_phi_77_pred_2 = _3228;
                        frontier_phi_77_pred_3 = _3227;
                        frontier_phi_77_pred_4 = _3226;
                        frontier_phi_77_pred_5 = _3225;
                    }
                    _2867 = frontier_phi_77_pred;
                    _2865 = frontier_phi_77_pred_1;
                    _2863 = frontier_phi_77_pred_2;
                    _2861 = frontier_phi_77_pred_3;
                    _2859 = frontier_phi_77_pred_4;
                    _2857 = frontier_phi_77_pred_5;
                    uint _3023 = _3022 + 1u;
                    if (_3023 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3016 = _2857;
                        _3017 = _2859;
                        _3018 = _2861;
                        _3019 = _2863;
                        _3020 = _2865;
                        _3021 = _2867;
                        _3022 = _3023;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2861;
                frontier_phi_58_59_ladder_1 = _2867;
                frontier_phi_58_59_ladder_2 = _2865;
                frontier_phi_58_59_ladder_3 = _2863;
                frontier_phi_58_59_ladder_4 = _2859;
                frontier_phi_58_59_ladder_5 = _2857;
            }
            else
            {
                frontier_phi_58_59_ladder = _2739;
                frontier_phi_58_59_ladder_1 = _2745;
                frontier_phi_58_59_ladder_2 = _2743;
                frontier_phi_58_59_ladder_3 = _2741;
                frontier_phi_58_59_ladder_4 = _2737;
                frontier_phi_58_59_ladder_5 = _2735;
            }
            _2856 = frontier_phi_58_59_ladder_5;
            _2858 = frontier_phi_58_59_ladder_4;
            _2860 = frontier_phi_58_59_ladder;
            _2862 = frontier_phi_58_59_ladder_3;
            _2864 = frontier_phi_58_59_ladder_2;
            _2866 = frontier_phi_58_59_ladder_1;
        }
        float _2871 = isnan(1.0) ? _854 : (isnan(_854) ? 1.0 : min(_854, 1.0));
        _2647 = (_2871 * _2862) + _2080;
        _2649 = (_2871 * _2864) + _2082;
        _2651 = (_2871 * _2866) + _2084;
        _2653 = ((_2856 * _839) * _2871) + _2428;
        _2655 = ((_2858 * _841) * _2871) + _2430;
        _2657 = ((_2860 * _842) * _2871) + _2432;
    }
    else
    {
        _2647 = _2080;
        _2649 = _2082;
        _2651 = _2084;
        _2653 = _2428;
        _2655 = _2430;
        _2657 = _2432;
    }
    float _4608 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
    float _4619 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
    float _4630 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _2674 = ((isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0))) * (_2647 + ((isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0))) * _854))) + ((_2653 + ((isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0))) * _1696)) * cbPerFrame._m0[3u].x);
    float _2675 = ((isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0))) * (_2649 + ((isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0))) * _854))) + ((_2655 + ((isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0))) * _1696)) * cbPerFrame._m0[3u].x);
    float _2676 = ((isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0))) * (_2651 + ((isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0))) * _854))) + ((_2657 + ((isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0))) * _1696)) * cbPerFrame._m0[3u].x);
    uint _2677 = _814 + 6u;
    float _2685 = _776 / cbSceneParam._m0[86u].x;
    float _2686 = _777 / cbSceneParam._m0[86u].y;
    vec4 _2700 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2685, _2686, (log2((isnan(cbSceneParam._m0[77u].w) ? _699 : (isnan(_699) ? cbSceneParam._m0[77u].w : min(_699, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2702 = _2700.x;
    float _2703 = _2700.y;
    float _2704 = _2700.z;
    float _2705 = _2700.w;
    float _2798;
    float _2800;
    float _2802;
    float _2804;
    if (_699 > cbSceneParam._m0[78u].w)
    {
        float _2760 = isnan(_699) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _699 : min(cbSceneParam._m0[80u].w, _699));
        float _2761 = _2760 / _699;
        float _2772 = _2761 * _749;
        float _2773 = _750 * _2761;
        float _2774 = (-0.0) - _2773;
        float _2776 = _2761 * _751;
        float _2778 = (cbSceneParam._m0[77u].w * _2774) / _2760;
        float _2779 = _2778 + cbSceneParam._m0[79u].w;
        float _2780 = cbSceneParam._m0[79u].w - _2773;
        float _2786 = sqrt(((_2772 * _2772) + (_2773 * _2773)) + (_2776 * _2776));
        float _2789 = (1.0 - (cbSceneParam._m0[77u].w / _2760)) * _2786;
        float _2794 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2796 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2973;
        if (abs((_2774 - _2778) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2973 = ((((_2779 > 0.0) ? exp2(_2794 * _2779) : (2.0 - exp2(_2796 * _2779))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2789;
        }
        else
        {
            float _2917 = 1.0 / cbSceneParam._m0[80u].x;
            float _2918 = isnan(_2780) ? _2779 : (isnan(_2779) ? _2780 : max(_2779, _2780));
            float _2919 = isnan(_2780) ? _2779 : (isnan(_2779) ? _2780 : min(_2779, _2780));
            float _2928 = isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : min(_2918, 0.0));
            float _2929 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : min(_2919, 0.0));
            _2973 = ((abs(_2786 / _2774) * cbSceneParam._m0[80u].y) * ((((_2928 - _2929) * 2.0) - ((exp2(_2794 * (isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0)))) - exp2(_2794 * (isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0))))) * _2917)) - ((exp2(_2796 * _2928) - exp2(_2796 * _2929)) * _2917))) + (_2789 * cbSceneParam._m0[80u].z);
        }
        vec4 _2975 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2685, _2686, 1.0), 0.0);
        float _2984 = exp2((_2973 * (-1.44269502162933349609375)) * (1.0 - _2975.w));
        float _2985 = log2(_2984);
        float _3001 = log2(_2705);
        _2798 = (exp2(_3001 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2985 * cbSceneParam._m0[78u].x)) * _2975.x) / cbSceneParam._m0[78u].x)) + _2702;
        _2800 = (exp2(_3001 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2985 * cbSceneParam._m0[78u].y)) * _2975.y) / cbSceneParam._m0[78u].y)) + _2703;
        _2802 = (exp2(_3001 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2985 * cbSceneParam._m0[78u].z)) * _2975.z) / cbSceneParam._m0[78u].z)) + _2704;
        _2804 = _2984 * _2705;
    }
    else
    {
        _2798 = _2702;
        _2800 = _2703;
        _2802 = _2704;
        _2804 = _2705;
    }
    bool _3011;
    vec4 _2814;
    vec4 _2836;
    float _2838;
    float _2842;
    float _2843;
    float _2844;
    float _2845;
    bool _2855;
    for (;;)
    {
        _2814 = cbMatDynParam._m0[0u];
        float _2816 = roundEven(_2814.y);
        bool _2817 = _2816 == 3.0;
        float _2818 = log2(_2804);
        float _2825 = exp2(_2818 * cbSceneParam._m0[78u].x) * _2674;
        float _2826 = exp2(_2818 * cbSceneParam._m0[78u].y) * _2675;
        float _2827 = exp2(_2818 * cbSceneParam._m0[78u].z) * _2676;
        float _2834 = _765 + (-0.5);
        _2836 = cbMtdParam._m0[1u];
        _2838 = _2836.y * _2834;
        float _2841 = (_2816 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2842 = _2841 * (_2817 ? _2825 : (_2825 + (cbSceneParam._m0[72u].w * _2798)));
        _2843 = _2841 * (_2817 ? _2826 : (_2826 + (cbSceneParam._m0[72u].w * _2800)));
        _2844 = _2841 * (_2817 ? _2827 : (_2827 + (cbSceneParam._m0[72u].w * _2802)));
        _2845 = _2834 * 0.999000012874603271484375;
        _2855 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2855)
        {
            if ((cbInstanceData._m0[_814 + 7u].x + _2845) < 0.5)
            {
                _3011 = true;
                break;
            }
        }
        uint _2952 = _815 + uint(_2814.w);
        if ((cbInstanceData._m0[_2952].w < 1.0) && ((cbInstanceData._m0[_2952].w + _2845) < 0.5))
        {
            _3011 = true;
            break;
        }
        if ((_2838 + 1.0) < _2836.x)
        {
            _3011 = true;
            break;
        }
        _3011 = false;
        break;
    }
    float _3216;
    if (_3011)
    {
        discard_state = true;
        _3216 = 0.0;
    }
    else
    {
        _3216 = cbInstanceData._m0[_2677].w;
    }
    SV_Target.x = _2842;
    SV_Target.y = _2843;
    SV_Target.z = _2844;
    SV_Target.w = _3216;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2677].w;
    discard_exit();
}


