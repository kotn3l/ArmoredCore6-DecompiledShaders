#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_20;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1341;
float _4008;
float _4009;
float _4010;
float _4011;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _264 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _270 = _264.x * cbMtdParam._m0[10u].x;
    float _271 = _264.y * cbMtdParam._m0[10u].y;
    float _272 = _264.z * cbMtdParam._m0[10u].z;
    vec4 _290 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _340 = cbMtdParam._m0[18u].y * texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x;
    float _351 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].x * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].y * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _340)) + 1.0;
    float _4020 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _352 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
    float _359 = (_352 * ((_290.x * cbMtdParam._m0[11u].x) - _270)) + _270;
    float _360 = (_352 * ((_290.y * cbMtdParam._m0[11u].y) - _271)) + _271;
    float _361 = (_352 * ((_290.z * cbMtdParam._m0[11u].z) - _272)) + _272;
    vec4 _379 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _406 = ((cbMtdParam._m0[17u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _340)) + 1.0;
    float _4031 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _407 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    float _414 = (_407 * ((_379.x * cbMtdParam._m0[12u].x) - _359)) + _359;
    float _415 = (_407 * ((_379.y * cbMtdParam._m0[12u].y) - _360)) + _360;
    float _416 = (_407 * ((_379.z * cbMtdParam._m0[12u].z) - _361)) + _361;
    vec4 _433 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _458 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[18u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[18u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _340)) + 1.0;
    float _4042 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _459 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    float _466 = (_459 * ((_433.x * cbMtdParam._m0[13u].x) - _414)) + _414;
    float _467 = (_459 * ((_433.y * cbMtdParam._m0[13u].y) - _415)) + _415;
    float _468 = (_459 * ((_433.z * cbMtdParam._m0[13u].z) - _416)) + _416;
    vec4 _488 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _517 = (TEXCOORD_5.x - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.z) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.w) + cbTextureTilingScale._m0[18u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].z + 1.0);
    float _4053 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _518 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
    float _525 = (_518 * ((_488.x * cbMtdParam._m0[14u].x) - _466)) + _466;
    float _526 = (_518 * ((_488.y * cbMtdParam._m0[14u].y) - _467)) + _467;
    float _527 = (_518 * ((_488.z * cbMtdParam._m0[14u].z) - _468)) + _468;
    vec4 _540 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _542 = _540.x;
    float _560 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _542) * _352) + _542;
    float _578 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _560) * _407) + _560;
    float _595 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _578) * _459) + _578;
    float _597 = _595 - (_595 * TEXCOORD_5.x);
    vec4 _610 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _632 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _634 = _632.x;
    float _635 = _632.y;
    float _638 = cbMtdParam._m0[17u].y * _632.z;
    vec4 _650 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _659 = (((cbMtdParam._m0[17u].x * _650.z) - _638) * _352) + _638;
    vec4 _672 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _684 = (((cbMtdParam._m0[16u].w * _672.z) - _659) * _407) + _659;
    vec4 _697 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _706 = (((cbMtdParam._m0[16u].z * _697.z) - _684) * _459) + _684;
    float _711 = ((cbMtdParam._m0[16u].x * TEXCOORD_5.x) * ((_610.z * cbMtdParam._m0[17u].z) - _706)) + _706;
    float _716 = ((_650.x - _634) * _352) + _634;
    float _717 = ((_650.y - _635) * _352) + _635;
    float _722 = ((_672.x - _716) * _407) + _716;
    float _723 = ((_672.y - _717) * _407) + _717;
    float _732 = ((((_697.x - _722) * _459) + _722) * 2.0) + (-1.0);
    float _733 = ((((_697.y - _723) * _459) + _723) * 2.0) + (-1.0);
    float _734 = dot(vec2(_732, _733), vec2(_732, _733));
    float _4064 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _739 = sqrt(1.0 - (isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0))));
    float _745 = ((((_610.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[15u].y) + _732;
    float _746 = ((((_610.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[15u].y) + _733;
    float _749 = fma(_739, _234 * NORMAL.x, fma(_746, _241 * TANGENT.x, (_227 * _219) * _745));
    float _752 = fma(_739, _234 * NORMAL.y, fma(_746, _241 * TANGENT.y, (_227 * _220) * _745));
    float _755 = fma(_739, _234 * NORMAL.z, fma(_746, _241 * TANGENT.z, (_227 * _221) * _745));
    float _759 = inversesqrt(dot(vec3(_749, _752, _755), vec3(_749, _752, _755)));
    float _760 = _759 * _749;
    float _761 = _759 * _752;
    float _762 = _759 * _755;
    float _4075 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _763 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    float _4086 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _4097 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _4108 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _4119 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _767 = isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0));
    float _783 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _823 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _833 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _823);
    float _834 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _823);
    float _835 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _823);
    float _839 = inversesqrt(dot(vec3(_833, _834, _835), vec3(_833, _834, _835)));
    float _840 = _833 * _839;
    float _841 = _834 * _839;
    float _842 = _835 * _839;
    vec4 _847 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _849 = _847.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1021 = sqrt(((_833 * _833) + (_834 * _834)) + (_835 * _835));
        float _1027 = (cbMatDynParam._m0[5u].x * _1021) + cbMatDynParam._m0[5u].y;
        float _4130 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _1032 = (cbMatDynParam._m0[5u].z * _1021) + cbMatDynParam._m0[5u].w;
        float _4141 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) - _1028)) + _1028) < ((_849 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _860 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _861 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _879 = fma(_762, cbSceneParam._m0[5u].z, fma(_761, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _760));
    float _882 = fma(_762, cbSceneParam._m0[6u].z, fma(_761, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _760));
    float _885 = fma(_762, cbSceneParam._m0[7u].z, fma(_761, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _760));
    uint _898 = uint(roundEven(NORMAL.w)) * 13u;
    uint _899 = _898 + 9u;
    uint _900 = _899 + uint(cbMatDynParam._m0[0u].w);
    float _906 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0)))) * cbInstanceData._m0[_900].x;
    float _907 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0)))) * cbInstanceData._m0[_900].y;
    float _908 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0)))) * cbInstanceData._m0[_900].z;
    float _4152 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _909 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
    float _4163 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _910 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
    float _4174 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _911 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
    float _912 = 1.0 - _767;
    float _913 = _909 * _912;
    float _914 = _910 * _912;
    float _915 = _911 * _912;
    float _920 = (_909 + (-0.039999999105930328369140625)) * _767;
    float _921 = (_910 + (-0.039999999105930328369140625)) * _767;
    float _922 = (_911 + (-0.039999999105930328369140625)) * _767;
    float _923 = _920 + 0.039999999105930328369140625;
    float _925 = _921 + 0.039999999105930328369140625;
    float _926 = _922 + 0.039999999105930328369140625;
    vec4 _935 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _860, cbSceneParam._m0[86u].y * _861));
    float _938 = _935.x * TEXCOORD_5.w;
    float _939 = dot(vec3(_760, _761, _762), vec3(_840, _841, _842));
    float _942 = _939 * 2.0;
    float _946 = (_942 * _760) - _840;
    float _947 = (_942 * _761) - _841;
    float _948 = (_942 * _762) - _842;
    float _952 = abs(dot(vec3(_840, _841, _842), vec3(_760, _761, _762)));
    float _4185 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _954 = sqrt(_763);
    float _967 = exp2((_954 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_954 * 3.0));
    float _973 = (1.0 - _967) * ((_954 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _974 = _967 * _954;
    float _1002 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1006 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1010 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1340;
    float _1342;
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1065 = fma(_1010, cbModelParam._m0[26u].z, fma(_1006, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1002));
        float _1069 = fma(_1010, cbModelParam._m0[27u].z, fma(_1006, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1002));
        float _1073 = fma(_1010, cbModelParam._m0[28u].z, fma(_1006, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1002));
        float _1098 = _1002 + _760;
        float _1099 = _1006 + _761;
        float _1100 = _1010 + _762;
        float _1110 = fma(_1100, cbModelParam._m0[26u].z, fma(_1099, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1098)) - _1065;
        float _1111 = fma(_1100, cbModelParam._m0[27u].z, fma(_1099, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1098)) - _1069;
        float _1112 = fma(_1100, cbModelParam._m0[28u].z, fma(_1099, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1098)) - _1073;
        float _1116 = inversesqrt(dot(vec3(_1110, _1111, _1112), vec3(_1110, _1111, _1112)));
        float _1129 = ((_1116 * _1110) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1065 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1130 = ((_1116 * _1111) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1069 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1131 = ((_1116 * _1112) / cbModelParam._m0[34u].z) + ((((((_1073 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1134 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1129, _1130, _1131), 0.0);
        vec4 _1141 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1129, _1130, _1131), 0.0);
        vec4 _1148 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1129, _1130, _1131), 0.0);
        vec4 _1155 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1129, _1130, _1131), 0.0);
        float _1168 = exp2((_1134.w + (-0.5)) * 20.0) * 2.0;
        float _1169 = _1168 * (_1134.x + (-0.5));
        float _1170 = _1168 * (_1134.y + (-0.5));
        float _1171 = _1168 * (_1134.z + (-0.5));
        float _1178 = exp2((_1141.w + (-0.5)) * 20.0) * 2.0;
        float _1179 = _1178 * (_1141.x + (-0.5));
        float _1180 = _1178 * (_1141.y + (-0.5));
        float _1181 = _1178 * (_1141.z + (-0.5));
        float _1188 = exp2((_1148.w + (-0.5)) * 20.0) * 2.0;
        float _1189 = _1188 * (_1148.x + (-0.5));
        float _1190 = _1188 * (_1148.y + (-0.5));
        float _1191 = _1188 * (_1148.z + (-0.5));
        float _1198 = exp2((_1155.w + (-0.5)) * 20.0) * 2.0;
        float _1199 = _1198 * (_1155.x + (-0.5));
        float _1200 = _1198 * (_1155.y + (-0.5));
        float _1201 = _1198 * (_1155.z + (-0.5));
        float _1202 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1203 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1204 = isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0));
        float _1205 = _1169 * 0.5;
        float _1206 = _1179 * 0.5;
        float _1207 = _1189 * 0.5;
        float _1208 = dot(vec3(_1205, _1206, _1207), vec3(_1205, _1206, _1207));
        float _1213 = (_1208 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1208);
        float _1222 = (dot(vec3(_760, _761, _762), vec3(_1213 * _1205, _1213 * _1206, _1213 * _1207)) + 1.0) * 0.5;
        float _4211 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1232 = sqrt(((_1206 * _1206) + (_1205 * _1205)) + (_1207 * _1207)) / (_1202 + 9.9999997473787516355514526367188e-06);
        float _4222 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1233 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
        float _1234 = _1233 * 2.0;
        float _1238 = (1.0 - _1233) / (_1233 + 1.0);
        float _4233 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _1248 = ((((1.0 - _1239) * (_1234 + 2.0)) * exp2(log2(isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * (_1234 + 1.0))) + _1239) * _1202;
        float _1249 = _1170 * 0.5;
        float _1250 = _1180 * 0.5;
        float _1251 = _1190 * 0.5;
        float _1252 = dot(vec3(_1249, _1250, _1251), vec3(_1249, _1250, _1251));
        float _1257 = (_1252 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1252);
        float _1265 = (dot(vec3(_760, _761, _762), vec3(_1257 * _1249, _1257 * _1250, _1257 * _1251)) + 1.0) * 0.5;
        float _4244 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1274 = sqrt(((_1250 * _1250) + (_1249 * _1249)) + (_1251 * _1251)) / (_1203 + 9.9999997473787516355514526367188e-06);
        float _4255 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1275 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _1276 = _1275 * 2.0;
        float _1280 = (1.0 - _1275) / (_1275 + 1.0);
        float _4266 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1281 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _1290 = ((((1.0 - _1281) * (_1276 + 2.0)) * exp2(log2(isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * (_1276 + 1.0))) + _1281) * _1203;
        float _1291 = _1171 * 0.5;
        float _1292 = _1181 * 0.5;
        float _1293 = _1191 * 0.5;
        float _1294 = dot(vec3(_1291, _1292, _1293), vec3(_1291, _1292, _1293));
        float _1299 = (_1294 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1294);
        float _1307 = (dot(vec3(_760, _761, _762), vec3(_1299 * _1291, _1299 * _1292, _1299 * _1293)) + 1.0) * 0.5;
        float _4277 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1316 = sqrt(((_1292 * _1292) + (_1291 * _1291)) + (_1293 * _1293)) / (_1204 + 9.9999997473787516355514526367188e-06);
        float _4288 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _1318 = _1317 * 2.0;
        float _1322 = (1.0 - _1317) / (_1317 + 1.0);
        float _4299 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _1332 = ((((1.0 - _1323) * (_1318 + 2.0)) * exp2(log2(isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * (_1318 + 1.0))) + _1323) * _1204;
        _1340 = _1171;
        _1342 = _1170;
        _1343 = _1169;
        _1344 = _1181;
        _1345 = _1180;
        _1346 = _1179;
        _1347 = _1191;
        _1348 = _1190;
        _1349 = _1189;
        _1350 = _1204;
        _1351 = _1203;
        _1352 = _1202;
        _1353 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)));
        _1354 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0)));
        _1355 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)));
    }
    else
    {
        _1340 = _1341;
        _1342 = _1341;
        _1343 = _1341;
        _1344 = _1341;
        _1345 = _1341;
        _1346 = _1341;
        _1347 = _1341;
        _1348 = _1341;
        _1349 = _1341;
        _1350 = _1341;
        _1351 = _1341;
        _1352 = _1341;
        _1353 = 0.0;
        _1354 = 0.0;
        _1355 = 0.0;
    }
    float _1653;
    float _1654;
    float _1655;
    float _1656;
    float _1657;
    float _1658;
    float _1659;
    float _1660;
    float _1661;
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1384 = fma(_1010, cbModelParam._m0[30u].z, fma(_1006, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1002));
        float _1388 = fma(_1010, cbModelParam._m0[31u].z, fma(_1006, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1002));
        float _1392 = fma(_1010, cbModelParam._m0[32u].z, fma(_1006, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1002));
        float _1415 = _1002 + _760;
        float _1416 = _1006 + _761;
        float _1417 = _1010 + _762;
        float _1427 = fma(_1417, cbModelParam._m0[30u].z, fma(_1416, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1415)) - _1384;
        float _1428 = fma(_1417, cbModelParam._m0[31u].z, fma(_1416, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1415)) - _1388;
        float _1429 = fma(_1417, cbModelParam._m0[32u].z, fma(_1416, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1415)) - _1392;
        float _1433 = inversesqrt(dot(vec3(_1427, _1428, _1429), vec3(_1427, _1428, _1429)));
        float _1446 = ((_1433 * _1427) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1384 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1447 = ((_1433 * _1428) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1388 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1448 = ((_1433 * _1429) / cbModelParam._m0[35u].z) + ((((((_1392 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1450 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1446, _1447, _1448), 0.0);
        vec4 _1457 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1446, _1447, _1448), 0.0);
        vec4 _1464 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1446, _1447, _1448), 0.0);
        vec4 _1471 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1446, _1447, _1448), 0.0);
        float _1483 = exp2((_1450.w + (-0.5)) * 20.0) * 2.0;
        float _1484 = _1483 * (_1450.x + (-0.5));
        float _1485 = _1483 * (_1450.y + (-0.5));
        float _1486 = _1483 * (_1450.z + (-0.5));
        float _1493 = exp2((_1457.w + (-0.5)) * 20.0) * 2.0;
        float _1494 = _1493 * (_1457.x + (-0.5));
        float _1495 = _1493 * (_1457.y + (-0.5));
        float _1496 = _1493 * (_1457.z + (-0.5));
        float _1503 = exp2((_1464.w + (-0.5)) * 20.0) * 2.0;
        float _1504 = _1503 * (_1464.x + (-0.5));
        float _1505 = _1503 * (_1464.y + (-0.5));
        float _1506 = _1503 * (_1464.z + (-0.5));
        float _1513 = exp2((_1471.w + (-0.5)) * 20.0) * 2.0;
        float _1514 = _1513 * (_1471.x + (-0.5));
        float _1515 = _1513 * (_1471.y + (-0.5));
        float _1516 = _1513 * (_1471.z + (-0.5));
        float _1517 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1518 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1519 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1520 = _1484 * 0.5;
        float _1521 = _1494 * 0.5;
        float _1522 = _1504 * 0.5;
        float _1523 = dot(vec3(_1520, _1521, _1522), vec3(_1520, _1521, _1522));
        float _1528 = (_1523 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1523);
        float _1536 = (dot(vec3(_760, _761, _762), vec3(_1528 * _1520, _1528 * _1521, _1528 * _1522)) + 1.0) * 0.5;
        float _4340 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1545 = sqrt(((_1521 * _1521) + (_1520 * _1520)) + (_1522 * _1522)) / (_1517 + 9.9999997473787516355514526367188e-06);
        float _4351 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1546 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _1547 = _1546 * 2.0;
        float _1551 = (1.0 - _1546) / (_1546 + 1.0);
        float _4362 = isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0));
        float _1552 = isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0));
        float _1561 = ((((1.0 - _1552) * (_1547 + 2.0)) * exp2(log2(isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * (_1547 + 1.0))) + _1552) * _1517;
        float _1562 = _1485 * 0.5;
        float _1563 = _1495 * 0.5;
        float _1564 = _1505 * 0.5;
        float _1565 = dot(vec3(_1562, _1563, _1564), vec3(_1562, _1563, _1564));
        float _1570 = (_1565 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1565);
        float _1578 = (dot(vec3(_760, _761, _762), vec3(_1570 * _1562, _1570 * _1563, _1570 * _1564)) + 1.0) * 0.5;
        float _4373 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
        float _1587 = sqrt(((_1563 * _1563) + (_1562 * _1562)) + (_1564 * _1564)) / (_1518 + 9.9999997473787516355514526367188e-06);
        float _4384 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1588 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _1589 = _1588 * 2.0;
        float _1593 = (1.0 - _1588) / (_1588 + 1.0);
        float _4395 = isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0));
        float _1594 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
        float _1603 = ((((1.0 - _1594) * (_1589 + 2.0)) * exp2(log2(isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * (_1589 + 1.0))) + _1594) * _1518;
        float _1604 = _1486 * 0.5;
        float _1605 = _1496 * 0.5;
        float _1606 = _1506 * 0.5;
        float _1607 = dot(vec3(_1604, _1605, _1606), vec3(_1604, _1605, _1606));
        float _1612 = (_1607 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1607);
        float _1620 = (dot(vec3(_760, _761, _762), vec3(_1612 * _1604, _1612 * _1605, _1612 * _1606)) + 1.0) * 0.5;
        float _4406 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
        float _1629 = sqrt(((_1605 * _1605) + (_1604 * _1604)) + (_1606 * _1606)) / (_1519 + 9.9999997473787516355514526367188e-06);
        float _4417 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1630 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
        float _1631 = _1630 * 2.0;
        float _1635 = (1.0 - _1630) / (_1630 + 1.0);
        float _4428 = isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0));
        float _1636 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _1645 = ((((1.0 - _1636) * (_1631 + 2.0)) * exp2(log2(isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0))) * (_1631 + 1.0))) + _1636) * _1519;
        _1653 = _1486;
        _1654 = _1485;
        _1655 = _1484;
        _1656 = _1496;
        _1657 = _1495;
        _1658 = _1494;
        _1659 = _1506;
        _1660 = _1505;
        _1661 = _1504;
        _1662 = _1519;
        _1663 = _1518;
        _1664 = _1517;
        _1665 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0)));
        _1666 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0)));
        _1667 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0)));
    }
    else
    {
        _1653 = _1341;
        _1654 = _1341;
        _1655 = _1341;
        _1656 = _1341;
        _1657 = _1341;
        _1658 = _1341;
        _1659 = _1341;
        _1660 = _1341;
        _1661 = _1341;
        _1662 = _1341;
        _1663 = _1341;
        _1664 = _1341;
        _1665 = 0.0;
        _1666 = 0.0;
        _1667 = 0.0;
    }
    float _1677 = (cbModelParam._m0[1u].x * (_1665 - _1353)) + _1353;
    float _1678 = (cbModelParam._m0[1u].x * (_1666 - _1354)) + _1354;
    float _1679 = (cbModelParam._m0[1u].x * (_1667 - _1355)) + _1355;
    float _1700 = fma(_1679, cbSceneParam._m0[89u].z, fma(_1678, cbSceneParam._m0[89u].y, _1677 * cbSceneParam._m0[89u].x));
    float _1703 = fma(_1679, cbSceneParam._m0[90u].z, fma(_1678, cbSceneParam._m0[90u].y, _1677 * cbSceneParam._m0[90u].x));
    float _1706 = fma(_1679, cbSceneParam._m0[91u].z, fma(_1678, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1677));
    float _1721 = _946 * 0.5;
    float _1722 = _947 * 0.5;
    float _1723 = _948 * 0.5;
    float _1724 = dot(vec4(_1721, _1722, _1723, 1.0), vec4(_1655, _1658, _1661, _1664));
    float _1727 = dot(vec4(_1721, _1722, _1723, 1.0), vec4(_1654, _1657, _1660, _1663));
    float _1730 = dot(vec4(_1721, _1722, _1723, 1.0), vec4(_1653, _1656, _1659, _1662));
    float _1764;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1737 = dot(vec4(_1721, _1722, _1723, 1.0), vec4(_1340, _1344, _1347, _1350));
        float _1741 = dot(vec4(_1721, _1722, _1723, 1.0), vec4(_1342, _1345, _1348, _1351));
        float _1745 = dot(vec4(_1721, _1722, _1723, 1.0), vec4(_1343, _1346, _1349, _1352));
        float _1752 = dot(vec4(cbModelParam._m0[39u]), vec4(_1721, _1722, _1723, 1.0));
        _1764 = dot(vec3(isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0)), isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0)), isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1752) ? 0.0 : (isnan(0.0) ? _1752 : max(0.0, _1752))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1764 = 1.0;
    }
    float _1775;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1766 = dot(vec4(cbModelParam._m0[40u]), vec4(_1721, _1722, _1723, 1.0));
        _1775 = dot(vec3(isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0)), isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0)), isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1766) ? 0.0 : (isnan(0.0) ? _1766 : max(0.0, _1766))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1775 = 1.0;
    }
    float _1779 = (_1775 * cbModelParam._m0[1u].x) + (_1764 * (1.0 - cbModelParam._m0[1u].x));
    float _1789 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _763);
    float _1790 = isnan(_1789) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1789 : min(cbModelParam._m0[25u].z, _1789));
    float _1870;
    float _1872;
    float _1874;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1837 = fma(_1010, cbModelParam._m0[13u].z, fma(_1006, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1002)) + cbModelParam._m0[13u].w;
        float _1841 = fma(_1010, cbModelParam._m0[14u].z, fma(_1006, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1002)) + cbModelParam._m0[14u].w;
        float _1845 = fma(_1010, cbModelParam._m0[15u].z, fma(_1006, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1002)) + cbModelParam._m0[15u].w;
        float _1848 = fma(_948, cbModelParam._m0[13u].z, fma(_947, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _946));
        float _1851 = fma(_948, cbModelParam._m0[14u].z, fma(_947, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _946));
        float _1854 = fma(_948, cbModelParam._m0[15u].z, fma(_947, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _946));
        float _1882;
        if (_1848 > 0.0)
        {
            _1882 = abs((1.0 - _1837) / _1848);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1848 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1837 + 1.0) / _1848);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1882 = frontier_phi_17_15_ladder;
        }
        float _2055;
        if (_1851 > 0.0)
        {
            _2055 = abs((1.0 - _1841) / _1851);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1851 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1841 + 1.0) / _1851);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2055 = frontier_phi_26_22_ladder;
        }
        float _2351;
        if (_1854 > 0.0)
        {
            _2351 = abs((1.0 - _1845) / _1854);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1854 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1845 + 1.0) / _1854);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2351 = frontier_phi_38_33_ladder;
        }
        float _2353 = isnan(_2055) ? _1882 : (isnan(_1882) ? _2055 : min(_1882, _2055));
        float _2354 = isnan(_2351) ? _2353 : (isnan(_2353) ? _2351 : min(_2353, _2351));
        float _2358 = (_2354 * _1848) + _1837;
        float _2359 = (_2354 * _1851) + _1841;
        float _2360 = (_2354 * _1854) + _1845;
        float _2361 = _2354 * 9.9999997473787516355514526367188e-05;
        float _2363 = (-1.0) - _2361;
        float _2365 = _2361 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2360 > _2365) || ((_2360 < _2363) || ((_2359 > _2365) || ((_2359 < _2363) || ((_2358 < _2363) || (_2358 > _2365))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2505 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2360, cbModelParam._m0[9u].z, fma(_2359, cbModelParam._m0[9u].y, _2358 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2360, cbModelParam._m0[10u].z, fma(_2359, cbModelParam._m0[10u].y, _2358 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2360, cbModelParam._m0[11u].z, fma(_2359, cbModelParam._m0[11u].y, _2358 * cbModelParam._m0[11u].x))), _1790);
            frontier_phi_16_38_ladder = _2505.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2505.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2505.x * cbModelParam._m0[1u].y;
        }
        _1870 = frontier_phi_16_38_ladder_2;
        _1872 = frontier_phi_16_38_ladder_1;
        _1874 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1858 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_946, _947, _948), _1790);
        _1870 = _1858.x * cbModelParam._m0[1u].y;
        _1872 = _1858.y * cbModelParam._m0[1u].y;
        _1874 = _1858.z * cbModelParam._m0[1u].y;
    }
    float _1878 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _763);
    float _1879 = isnan(_1878) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1878 : min(cbModelParam._m0[25u].w, _1878));
    float _1970;
    float _1972;
    float _1974;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1934 = fma(_1010, cbModelParam._m0[21u].z, fma(_1006, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1002)) + cbModelParam._m0[21u].w;
        float _1938 = fma(_1010, cbModelParam._m0[22u].z, fma(_1006, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1002)) + cbModelParam._m0[22u].w;
        float _1942 = fma(_1010, cbModelParam._m0[23u].z, fma(_1006, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1002)) + cbModelParam._m0[23u].w;
        float _1945 = fma(_948, cbModelParam._m0[21u].z, fma(_947, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _946));
        float _1948 = fma(_948, cbModelParam._m0[22u].z, fma(_947, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _946));
        float _1951 = fma(_948, cbModelParam._m0[23u].z, fma(_947, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _946));
        float _2060;
        if (_1945 > 0.0)
        {
            _2060 = abs((1.0 - _1934) / _1945);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1945 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1934 + 1.0) / _1945);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2060 = frontier_phi_28_24_ladder;
        }
        float _2378;
        if (_1948 > 0.0)
        {
            _2378 = abs((1.0 - _1938) / _1948);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1948 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1938 + 1.0) / _1948);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2378 = frontier_phi_40_35_ladder;
        }
        float _2716;
        if (_1951 > 0.0)
        {
            _2716 = abs((1.0 - _1942) / _1951);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1951 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1942 + 1.0) / _1951);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2716 = frontier_phi_50_47_ladder;
        }
        float _2718 = isnan(_2378) ? _2060 : (isnan(_2060) ? _2378 : min(_2060, _2378));
        float _2719 = isnan(_2716) ? _2718 : (isnan(_2718) ? _2716 : min(_2718, _2716));
        float _2723 = (_2719 * _1945) + _1934;
        float _2724 = (_2719 * _1948) + _1938;
        float _2725 = (_2719 * _1951) + _1942;
        float _2726 = _2719 * 9.9999997473787516355514526367188e-05;
        float _2727 = (-1.0) - _2726;
        float _2729 = _2726 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2725 > _2729) || ((_2725 < _2727) || ((_2724 > _2729) || ((_2724 < _2727) || ((_2723 < _2727) || (_2723 > _2729))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2847 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2725, cbModelParam._m0[17u].z, fma(_2724, cbModelParam._m0[17u].y, _2723 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2725, cbModelParam._m0[18u].z, fma(_2724, cbModelParam._m0[18u].y, _2723 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2725, cbModelParam._m0[19u].z, fma(_2724, cbModelParam._m0[19u].y, _2723 * cbModelParam._m0[19u].x))), _1879);
            frontier_phi_25_50_ladder = _2847.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2847.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2847.x * cbModelParam._m0[1u].z;
        }
        _1970 = frontier_phi_25_50_ladder_2;
        _1972 = frontier_phi_25_50_ladder_1;
        _1974 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1954 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_946, _947, _948), _1879);
        _1970 = _1954.x * cbModelParam._m0[1u].z;
        _1972 = _1954.y * cbModelParam._m0[1u].z;
        _1974 = _1954.z * cbModelParam._m0[1u].z;
    }
    float _1987 = (((_973 * _923) + _974) * _938) * ((cbModelParam._m0[1u].w * (_1970 - _1870)) + _1870);
    float _1989 = (((_973 * _925) + _974) * _938) * ((cbModelParam._m0[1u].w * (_1972 - _1872)) + _1872);
    float _1991 = (((_973 * _926) + _974) * _938) * ((cbModelParam._m0[1u].w * (_1974 - _1874)) + _1874);
    float _1994 = fma(_1991, cbSceneParam._m0[89u].z, fma(_1989, cbSceneParam._m0[89u].y, _1987 * cbSceneParam._m0[89u].x));
    float _1997 = fma(_1991, cbSceneParam._m0[90u].z, fma(_1989, cbSceneParam._m0[90u].y, _1987 * cbSceneParam._m0[90u].x));
    float _2000 = fma(_1991, cbSceneParam._m0[91u].z, fma(_1989, cbSceneParam._m0[91u].y, _1987 * cbSceneParam._m0[91u].x));
    float _2034 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2038 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2042 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2046 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2047 = _2034 / _2046;
    float _2048 = _2038 / _2046;
    float _2049 = _2042 / _2046;
    float _2196;
    float _2197;
    float _2198;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2076 = ((uint(_2049 > cbSceneParam._m0[59u].y) + uint(_2049 > cbSceneParam._m0[59u].x)) + uint(_2049 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2077 = _2076 + 43u;
        uint _2085 = _2076 + 44u;
        uint _2093 = _2076 + 45u;
        uint _2101 = _2076 + 46u;
        float _2112 = fma(_2046, cbSceneParam._m0[_2077].w, fma(_2042, cbSceneParam._m0[_2077].z, fma(_2038, cbSceneParam._m0[_2077].y, _2034 * cbSceneParam._m0[_2077].x)));
        float _2116 = fma(_2046, cbSceneParam._m0[_2085].w, fma(_2042, cbSceneParam._m0[_2085].z, fma(_2038, cbSceneParam._m0[_2085].y, _2034 * cbSceneParam._m0[_2085].x)));
        float _2124 = fma(_2046, cbSceneParam._m0[_2101].w, fma(_2042, cbSceneParam._m0[_2101].z, fma(_2038, cbSceneParam._m0[_2101].y, _2034 * cbSceneParam._m0[_2101].x)));
        float _2129 = cbSceneParam._m0[33u].z * _2124;
        float _2131 = cbSceneParam._m0[33u].w * _2124;
        float _2134 = fma(_2046, cbSceneParam._m0[_2093].w, fma(_2042, cbSceneParam._m0[_2093].z, fma(_2038, cbSceneParam._m0[_2093].y, _2034 * cbSceneParam._m0[_2093].x))) / _2124;
        float _2182 = (cbSceneParam._m0[33u].x - sqrt(((_2048 * _2048) + (_2047 * _2047)) + (_2049 * _2049))) * cbSceneParam._m0[33u].y;
        float _4554 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
        float _2189 = (isnan(1.0) ? _4554 : (isnan(_4554) ? 1.0 : min(_4554, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2129 + _2112) / _2124, (_2131 + _2116) / _2124), _2134), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2131 + _2112) / _2124, (_2116 - _2129) / _2124), _2134), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2112 - _2129) / _2124, (_2116 - _2131) / _2124), _2134), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2112 - _2131) / _2124, (_2129 + _2116) / _2124), _2134), 0.0)).x), vec4(0.25)));
        _2196 = 1.0 - (_2189 * cbSceneParam._m0[34u].x);
        _2197 = 1.0 - (_2189 * cbSceneParam._m0[34u].y);
        _2198 = 1.0 - (_2189 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2196 = 1.0;
        _2197 = 1.0;
        _2198 = 1.0;
    }
    float _2262;
    float _2264;
    float _2266;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2250 = fma(_2046, cbSceneParam._m0[63u].w, fma(_2042, cbSceneParam._m0[63u].z, fma(_2038, cbSceneParam._m0[63u].y, _2034 * cbSceneParam._m0[63u].x)));
        float _2251 = fma(_2046, cbSceneParam._m0[60u].w, fma(_2042, cbSceneParam._m0[60u].z, fma(_2038, cbSceneParam._m0[60u].y, _2034 * cbSceneParam._m0[60u].x))) / _2250;
        float _2252 = fma(_2046, cbSceneParam._m0[61u].w, fma(_2042, cbSceneParam._m0[61u].z, fma(_2038, cbSceneParam._m0[61u].y, _2034 * cbSceneParam._m0[61u].x))) / _2250;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2251 >= cbSceneParam._m0[64u].x) && (_2252 >= cbSceneParam._m0[64u].y)) && (_2251 <= cbSceneParam._m0[64u].z)) && (_2252 <= cbSceneParam._m0[64u].w))
        {
            float _2391 = fma(_2046, cbSceneParam._m0[62u].w, fma(_2042, cbSceneParam._m0[62u].z, fma(_2038, cbSceneParam._m0[62u].y, _2034 * cbSceneParam._m0[62u].x))) / _2250;
            float _2395 = isnan(cbSceneParam._m0[41u].w) ? _2391 : (isnan(_2391) ? cbSceneParam._m0[41u].w : max(_2391, cbSceneParam._m0[41u].w));
            float _2438 = (cbSceneParam._m0[33u].x - sqrt(((_2048 * _2048) + (_2047 * _2047)) + (_2049 * _2049))) * cbSceneParam._m0[33u].y;
            float _4570 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
            float _2445 = (isnan(1.0) ? _4570 : (isnan(_4570) ? 1.0 : min(_4570, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2251, cbSceneParam._m0[33u].w + _2252), _2395), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2251, _2252 - cbSceneParam._m0[33u].z), _2395), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2251 - cbSceneParam._m0[33u].z, _2252 - cbSceneParam._m0[33u].w), _2395), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2251 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2252), _2395), 0.0)).x), vec4(0.25)));
            float _2449 = 1.0 - (_2445 * cbSceneParam._m0[34u].x);
            float _2450 = 1.0 - (_2445 * cbSceneParam._m0[34u].y);
            float _2451 = 1.0 - (_2445 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2451) ? _2198 : (isnan(_2198) ? _2451 : min(_2198, _2451));
            frontier_phi_37_36_ladder_1 = isnan(_2450) ? _2197 : (isnan(_2197) ? _2450 : min(_2197, _2450));
            frontier_phi_37_36_ladder_2 = isnan(_2449) ? _2196 : (isnan(_2196) ? _2449 : min(_2196, _2449));
        }
        else
        {
            frontier_phi_37_36_ladder = _2198;
            frontier_phi_37_36_ladder_1 = _2197;
            frontier_phi_37_36_ladder_2 = _2196;
        }
        _2262 = frontier_phi_37_36_ladder_2;
        _2264 = frontier_phi_37_36_ladder_1;
        _2266 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2262 = _2196;
        _2264 = _2197;
        _2266 = _2198;
    }
    uvec4 _2271 = floatBitsToUint(cbInstanceData._m0[_898 + 5u]);
    uint _2273 = _2271.x * 14u;
    uint _2274 = _2273 + 13u;
    float _2281 = _938 + (-1.0);
    float _2286 = (cbLight._m0[_2274].x * _2281) + 1.0;
    float _2287 = (cbLight._m0[_2274].y * _2281) + 1.0;
    float _2288 = (cbLight._m0[_2274].z * _2281) + 1.0;
    float _2289 = (cbLight._m0[_2274].w * _2281) + 1.0;
    uint _2290 = _2273 + 5u;
    float _2296 = isnan(1.0) ? _2287 : (isnan(_2287) ? 1.0 : min(_2287, 1.0));
    uint _2300 = _2273 + 4u;
    float _2310 = isnan(1.0) ? _2286 : (isnan(_2286) ? 1.0 : min(_2286, 1.0));
    uint _2314 = _2273 | 1u;
    float _2325 = dot(vec3(cbLight._m0[_2273].xyz), vec3(_760, _761, _762));
    float _2328 = dot(vec3(cbLight._m0[_2314].xyz), vec3(_760, _761, _762));
    float _4606 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
    float _4617 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
    float _2333 = (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0))) * 0.3183098733425140380859375;
    float _2335 = (isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0))) * 0.3183098733425140380859375;
    float _2342 = ((cbLight._m0[_2290].x * _2296) * _2335) + (((cbLight._m0[_2300].x * _2262) * _2310) * _2333);
    float _2343 = ((_2296 * cbLight._m0[_2290].y) * _2335) + (((cbLight._m0[_2300].y * _2264) * _2310) * _2333);
    float _2344 = ((_2296 * cbLight._m0[_2290].z) * _2335) + (((cbLight._m0[_2300].z * _2266) * _2310) * _2333);
    uvec4 _2348 = floatBitsToUint(cbLight._m0[_2273 + 12u]);
    bool _2350 = _2348.x == 0u;
    float _2452;
    float _2454;
    float _2456;
    if (_2350)
    {
        _2452 = _2342;
        _2454 = _2343;
        _2456 = _2344;
    }
    else
    {
        uint _2460 = _2273 + 6u;
        float _2476 = (dot(vec3(cbLight._m0[_2273 + 2u].xyz), vec3(_760, _761, _762)) * 0.5) + 0.5;
        float _2477 = _2476 * _2476;
        float _4628 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
        float _2478 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
        float _2479 = isnan(1.0) ? _2288 : (isnan(_2288) ? 1.0 : min(_2288, 1.0));
        _2452 = (((cbLight._m0[_2460].x * 0.3183098733425140380859375) * _2478) * _2479) + _2342;
        _2454 = (((cbLight._m0[_2460].y * 0.3183098733425140380859375) * _2478) * _2479) + _2343;
        _2456 = (((cbLight._m0[_2460].z * 0.3183098733425140380859375) * _2478) * _2479) + _2344;
    }
    bool _2459 = _2348.y == 0u;
    float _2514;
    float _2516;
    float _2518;
    if (_2459)
    {
        _2514 = _2452;
        _2516 = _2454;
        _2518 = _2456;
    }
    else
    {
        uint _2687 = _2273 + 7u;
        float _2703 = (dot(vec3(cbLight._m0[_2273 + 3u].xyz), vec3(_760, _761, _762)) * 0.5) + 0.5;
        float _2704 = _2703 * _2703;
        float _4644 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
        float _2705 = isnan(1.0) ? _4644 : (isnan(_4644) ? 1.0 : min(_4644, 1.0));
        float _2706 = isnan(1.0) ? _2289 : (isnan(_2289) ? 1.0 : min(_2289, 1.0));
        _2514 = (((cbLight._m0[_2687].x * 0.3183098733425140380859375) * _2705) * _2706) + _2452;
        _2516 = (((cbLight._m0[_2687].y * 0.3183098733425140380859375) * _2705) * _2706) + _2454;
        _2518 = (((cbLight._m0[_2687].z * 0.3183098733425140380859375) * _2705) * _2706) + _2456;
    }
    uint _2521 = _2273 + 8u;
    float _2534 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2273].w)) * _763) * 0.949999988079071044921875);
    float _2535 = _2534 * _2534;
    float _2536 = cbLight._m0[_2273].x + _840;
    float _2537 = cbLight._m0[_2273].y + _841;
    float _2538 = cbLight._m0[_2273].z + _842;
    float _2542 = inversesqrt(dot(vec3(_2536, _2537, _2538), vec3(_2536, _2537, _2538)));
    float _2543 = _2542 * _2536;
    float _2544 = _2542 * _2537;
    float _2545 = _2542 * _2538;
    float _2546 = dot(vec3(_760, _761, _762), vec3(cbLight._m0[_2273].xyz));
    float _4660 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
    float _2549 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
    float _4671 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _2550 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
    float _2551 = dot(vec3(_760, _761, _762), vec3(_2543, _2544, _2545));
    float _4682 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
    float _2554 = isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0));
    float _2555 = dot(vec3(cbLight._m0[_2273].xyz), vec3(_2543, _2544, _2545));
    float _4693 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
    float _2559 = _2535 * _2535;
    float _2563 = ((_2554 * _2554) * (_2559 + (-1.0))) + 1.0;
    float _2571 = exp2(log2(1.0 - (isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0)))) * 5.0);
    float _2572 = 0.959999978542327880859375 - _920;
    float _2574 = 0.959999978542327880859375 - _921;
    float _2575 = 0.959999978542327880859375 - _922;
    float _2582 = 1.0 - _2535;
    float _2593 = (0.5 / (((_2550 * ((_2549 * _2582) + _2535)) + 9.9999999392252902907785028219223e-09) + (((_2550 * _2582) + _2535) * _2549))) * _2549;
    float _4704 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
    float _2595 = (isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0))) * (_2559 / ((_2563 * _2563) * 3.141590118408203125));
    uint _2609 = _2273 + 9u;
    float _2620 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2314].w)) * _763) * 0.949999988079071044921875);
    float _2621 = _2620 * _2620;
    float _2622 = cbLight._m0[_2314].x + _840;
    float _2623 = cbLight._m0[_2314].y + _841;
    float _2624 = cbLight._m0[_2314].z + _842;
    float _2628 = inversesqrt(dot(vec3(_2622, _2623, _2624), vec3(_2622, _2623, _2624)));
    float _2629 = _2628 * _2622;
    float _2630 = _2628 * _2623;
    float _2631 = _2628 * _2624;
    float _2632 = dot(vec3(_760, _761, _762), vec3(cbLight._m0[_2314].xyz));
    float _4715 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
    float _2635 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
    float _2636 = dot(vec3(_760, _761, _762), vec3(_2629, _2630, _2631));
    float _4726 = isnan(0.0) ? _2636 : (isnan(_2636) ? 0.0 : max(_2636, 0.0));
    float _2639 = isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0));
    float _2640 = dot(vec3(cbLight._m0[_2314].xyz), vec3(_2629, _2630, _2631));
    float _4737 = isnan(0.0) ? _2640 : (isnan(_2640) ? 0.0 : max(_2640, 0.0));
    float _2644 = _2621 * _2621;
    float _2648 = ((_2639 * _2639) * (_2644 + (-1.0))) + 1.0;
    float _2655 = exp2(log2(1.0 - (isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0)))) * 5.0);
    float _2662 = 1.0 - _2621;
    float _2672 = (0.5 / (((_2550 * ((_2635 * _2662) + _2621)) + 9.9999999392252902907785028219223e-09) + (((_2550 * _2662) + _2621) * _2635))) * _2635;
    float _4748 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
    float _2674 = (isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0))) * (_2644 / ((_2648 * _2648) * 3.141590118408203125));
    float _2684 = (((((_2655 * _2572) + _923) * cbLight._m0[_2609].x) * _2674) * _2296) + ((((cbLight._m0[_2521].x * _2262) * ((_2571 * _2572) + _923)) * _2595) * _2310);
    float _2685 = (((((_2655 * _2574) + _925) * cbLight._m0[_2609].y) * _2674) * _2296) + ((((cbLight._m0[_2521].y * _2264) * ((_2571 * _2574) + _925)) * _2595) * _2310);
    float _2686 = (((((_2655 * _2575) + _926) * cbLight._m0[_2609].z) * _2674) * _2296) + ((((cbLight._m0[_2521].z * _2266) * ((_2571 * _2575) + _926)) * _2595) * _2310);
    float _2742;
    float _2744;
    float _2746;
    if (_2350)
    {
        _2742 = _2684;
        _2744 = _2685;
        _2746 = _2686;
    }
    else
    {
        uint _2748 = _2273 + 2u;
        uint _2752 = _2273 + 10u;
        float _2766 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2748].w)) * _763) * 0.949999988079071044921875);
        float _2767 = _2766 * _2766;
        float _2768 = cbLight._m0[_2748].x + _840;
        float _2769 = cbLight._m0[_2748].y + _841;
        float _2770 = cbLight._m0[_2748].z + _842;
        float _2774 = inversesqrt(dot(vec3(_2768, _2769, _2770), vec3(_2768, _2769, _2770)));
        float _2775 = _2774 * _2768;
        float _2776 = _2774 * _2769;
        float _2777 = _2774 * _2770;
        float _2778 = dot(vec3(_760, _761, _762), vec3(cbLight._m0[_2748].xyz));
        float _4759 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
        float _2781 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
        float _2782 = dot(vec3(_760, _761, _762), vec3(_2775, _2776, _2777));
        float _4770 = isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0));
        float _2785 = isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0));
        float _2786 = dot(vec3(cbLight._m0[_2748].xyz), vec3(_2775, _2776, _2777));
        float _4781 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
        float _2790 = _2767 * _2767;
        float _2794 = ((_2785 * _2785) * (_2790 + (-1.0))) + 1.0;
        float _2801 = exp2(log2(1.0 - (isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0)))) * 5.0);
        float _2808 = 1.0 - _2767;
        float _2818 = (0.5 / (((_2550 * ((_2781 * _2808) + _2767)) + 9.9999999392252902907785028219223e-09) + (((_2550 * _2808) + _2767) * _2781))) * _2781;
        float _4792 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
        float _2820 = (isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0))) * (_2790 / ((_2794 * _2794) * 3.141590118408203125));
        float _2821 = isnan(1.0) ? _2288 : (isnan(_2288) ? 1.0 : min(_2288, 1.0));
        _2742 = (((((_2801 * _2572) + _923) * cbLight._m0[_2752].x) * _2820) * _2821) + _2684;
        _2744 = (((((_2801 * _2574) + _925) * cbLight._m0[_2752].y) * _2820) * _2821) + _2685;
        _2746 = (((((_2801 * _2575) + _926) * cbLight._m0[_2752].z) * _2820) * _2821) + _2686;
    }
    float _2852;
    float _2854;
    float _2856;
    if (_2459)
    {
        _2852 = _2742;
        _2854 = _2744;
        _2856 = _2746;
    }
    else
    {
        uint _2863 = _2273 + 3u;
        uint _2867 = _2273 + 11u;
        float _2881 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2863].w)) * _763) * 0.949999988079071044921875);
        float _2882 = _2881 * _2881;
        float _2883 = cbLight._m0[_2863].x + _840;
        float _2884 = cbLight._m0[_2863].y + _841;
        float _2885 = cbLight._m0[_2863].z + _842;
        float _2889 = inversesqrt(dot(vec3(_2883, _2884, _2885), vec3(_2883, _2884, _2885)));
        float _2890 = _2889 * _2883;
        float _2891 = _2889 * _2884;
        float _2892 = _2889 * _2885;
        float _2893 = dot(vec3(_760, _761, _762), vec3(cbLight._m0[_2863].xyz));
        float _4808 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0));
        float _2896 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
        float _2897 = dot(vec3(_760, _761, _762), vec3(_2890, _2891, _2892));
        float _4819 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0));
        float _2900 = isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0));
        float _2901 = dot(vec3(cbLight._m0[_2863].xyz), vec3(_2890, _2891, _2892));
        float _4830 = isnan(0.0) ? _2901 : (isnan(_2901) ? 0.0 : max(_2901, 0.0));
        float _2905 = _2882 * _2882;
        float _2909 = ((_2900 * _2900) * (_2905 + (-1.0))) + 1.0;
        float _2916 = exp2(log2(1.0 - (isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0)))) * 5.0);
        float _2923 = 1.0 - _2882;
        float _2933 = (0.5 / (((_2550 * ((_2896 * _2923) + _2882)) + 9.9999999392252902907785028219223e-09) + (((_2550 * _2923) + _2882) * _2896))) * _2896;
        float _4841 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
        float _2935 = (isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0))) * (_2905 / ((_2909 * _2909) * 3.141590118408203125));
        float _2936 = isnan(1.0) ? _2289 : (isnan(_2289) ? 1.0 : min(_2289, 1.0));
        _2852 = (((((_2916 * _2572) + _923) * cbLight._m0[_2867].x) * _2935) * _2936) + _2742;
        _2854 = (((((_2916 * _2574) + _925) * cbLight._m0[_2867].y) * _2935) * _2936) + _2744;
        _2856 = (((((_2916 * _2575) + _926) * cbLight._m0[_2867].z) * _2935) * _2936) + _2746;
    }
    float _3002;
    float _3004;
    float _3006;
    float _3008;
    float _3010;
    float _3012;
    if (_2271.y == 0u)
    {
        uvec4 _2957 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2958 = _2957.x;
        uint _2969 = uint((float(_2957.y) * floor(float(uint(cbSceneParam._m0[85u].y * _861) / _2958))) + floor(float(uint(cbSceneParam._m0[85u].x * _860) / _2958)));
        float _2979 = (log2(_2049 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2980 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0));
        uint _2983 = uint(isnan(14.0) ? _2980 : (isnan(_2980) ? 14.0 : min(_2980, 14.0)));
        uvec4 _2988 = texelFetch(g_lightClusterGridBuffer, int(((_2983 << 2u) + (_2969 << 6u)) >> 2u));
        uint _2989 = _2988.x;
        uint _2990 = _2957.z;
        float _3069;
        float _3071;
        float _3073;
        float _3075;
        float _3077;
        float _3079;
        if (((((1u << ((_2990 >> 4u) & 15u)) + 4294967295u) & _2989) == 0u) || ((_2990 & 240u) == 0u))
        {
            _3069 = 0.0;
            _3071 = 0.0;
            _3073 = 0.0;
            _3075 = 0.0;
            _3077 = 0.0;
            _3079 = 0.0;
        }
        else
        {
            float _3070;
            float _3072;
            float _3074;
            float _3076;
            float _3078;
            float _3080;
            float _3222 = 0.0;
            float _3223 = 0.0;
            float _3224 = 0.0;
            float _3225 = 0.0;
            float _3226 = 0.0;
            float _3227 = 0.0;
            uint _3228 = 0u;
            uint _3237;
            bool _3238;
            for (;;)
            {
                _3237 = texelFetch(g_lightClassification, int((((_2983 << 5u) + (_2969 << 9u)) + (_3228 << 2u)) >> 2u)).x;
                _3238 = _3237 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3238)
                {
                    frontier_phi_71_pred = _3227;
                    frontier_phi_71_pred_1 = _3226;
                    frontier_phi_71_pred_2 = _3225;
                    frontier_phi_71_pred_3 = _3224;
                    frontier_phi_71_pred_4 = _3223;
                    frontier_phi_71_pred_5 = _3222;
                }
                else
                {
                    float _3367;
                    float _3368;
                    float _3369;
                    float _3370;
                    float _3371;
                    float _3372;
                    uint _3373;
                    _3367 = _3222;
                    _3368 = _3223;
                    _3369 = _3224;
                    _3370 = _3225;
                    _3371 = _3226;
                    _3372 = _3227;
                    _3373 = _3237;
                    float _3294;
                    float _3295;
                    float _3296;
                    float _3297;
                    float _3298;
                    float _3299;
                    for (;;)
                    {
                        uint _3377 = uint(findLSB(_3373)) + (_3228 << 5u);
                        uint _3374 = (_3373 + 4294967295u) & _3373;
                        uint _3379 = _3377 * 48u;
                        vec4 _3393 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3379)).x, texelFetch(g_PointLightRenderingBuffer, int(_3379 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3379 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3379 + 3u)).x));
                        uint _3399 = (_3377 * 48u) + 4u;
                        vec4 _3412 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3399)).x, texelFetch(g_PointLightRenderingBuffer, int(_3399 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3399 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3399 + 3u)).x));
                        uint _3418 = (_3377 * 48u) + 8u;
                        vec3 _3429 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3418)).x, texelFetch(g_PointLightRenderingBuffer, int(_3418 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3418 + 2u)).x));
                        float _3433 = _3393.x - _2047;
                        float _3434 = _3393.y - _2048;
                        float _3435 = _3393.z - _2049;
                        float _3436 = dot(vec3(_3433, _3434, _3435), vec3(_3433, _3434, _3435));
                        float _3439 = inversesqrt(_3436);
                        float _3440 = _3439 * _3433;
                        float _3441 = _3439 * _3434;
                        float _3442 = _3439 * _3435;
                        float _3443 = dot(vec3(_879, _882, _885), vec3(_3440, _3441, _3442));
                        float _3448 = 1.0 - (_3436 * _3393.w);
                        float _4867 = isnan(0.0) ? _3448 : (isnan(_3448) ? 0.0 : max(_3448, 0.0));
                        float _3449 = isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0));
                        float _3450 = sqrt(_3436) * _3412.w;
                        float _3453 = 1.39999997615814208984375 / (_3450 + 1.39999997615814208984375);
                        float _3454 = _3453 * _3453;
                        float _3457 = ((1.0 - _3454) * _3443) + _3454;
                        float _3460 = _3450 * _3450;
                        float _3464 = ((isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0))) * _3449) / ((_3460 * 0.699999988079071044921875) + 1.0);
                        float _3468 = (-0.0) - _2047;
                        float _3469 = (-0.0) - _2048;
                        float _3470 = (-0.0) - _2049;
                        float _3474 = inversesqrt(dot(vec3(_3468, _3469, _3470), vec3(_3468, _3469, _3470)));
                        float _3475 = _3474 * _3468;
                        float _3476 = _3474 * _3469;
                        float _3477 = _3474 * _3470;
                        float _3484 = exp2(log2(1.0 / ((_3460 * 3.5) + 5.0)) * 0.25);
                        float _3485 = 1.0 - _954;
                        float _3492 = sqrt(1.0 - ((1.0 - (_3485 * _3485)) * (1.0 - (_3484 * _3484))));
                        float _3493 = _3492 * _3492;
                        float _3494 = _3493 * _3493;
                        float _3495 = _3475 + _3440;
                        float _3496 = _3476 + _3441;
                        float _3497 = _3477 + _3442;
                        float _3501 = inversesqrt(dot(vec3(_3495, _3496, _3497), vec3(_3495, _3496, _3497)));
                        float _3505 = dot(vec3(_879, _882, _885), vec3(_3475, _3476, _3477));
                        float _4883 = isnan(0.0) ? _3505 : (isnan(_3505) ? 0.0 : max(_3505, 0.0));
                        float _3508 = isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0));
                        float _3509 = dot(vec3(_879, _882, _885), vec3(_3501 * _3495, _3501 * _3496, _3501 * _3497));
                        float _4894 = isnan(0.0) ? _3509 : (isnan(_3509) ? 0.0 : max(_3509, 0.0));
                        float _3512 = isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0));
                        float _3516 = ((_3512 * _3512) * (_3494 + (-1.0))) + 1.0;
                        float _3517 = _3453 * _3493;
                        float _3518 = _3517 * _3517;
                        float _3521 = ((1.0 - _3518) * _3443) + _3518;
                        float _4905 = isnan(0.0) ? _3521 : (isnan(_3521) ? 0.0 : max(_3521, 0.0));
                        float _3522 = isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0));
                        float _3523 = 1.0 - _3493;
                        float _3533 = (0.5 / (((_3522 * ((_3508 * _3523) + _3493)) + 9.9999999392252902907785028219223e-09) + (((_3522 * _3523) + _3493) * _3508))) * _3522;
                        float _4916 = isnan(0.0) ? _3533 : (isnan(_3533) ? 0.0 : max(_3533, 0.0));
                        float _3544 = (((_3494 * 3.1415927410125732421875) * (isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0)))) / ((_3516 * _3516) * ((_3460 * 2.1991131305694580078125) + 3.141590118408203125))) * _3449;
                        _3297 = (_3464 * _3412.x) + _3370;
                        _3298 = (_3464 * _3412.y) + _3371;
                        _3299 = (_3464 * _3412.z) + _3372;
                        _3294 = (_3544 * _3429.x) + _3367;
                        _3295 = (_3544 * _3429.y) + _3368;
                        _3296 = (_3544 * _3429.z) + _3369;
                        if (_3374 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3367 = _3294;
                            _3368 = _3295;
                            _3369 = _3296;
                            _3370 = _3297;
                            _3371 = _3298;
                            _3372 = _3299;
                            _3373 = _3374;
                        }
                    }
                    frontier_phi_71_pred = _3299;
                    frontier_phi_71_pred_1 = _3298;
                    frontier_phi_71_pred_2 = _3297;
                    frontier_phi_71_pred_3 = _3296;
                    frontier_phi_71_pred_4 = _3295;
                    frontier_phi_71_pred_5 = _3294;
                }
                _3080 = frontier_phi_71_pred;
                _3078 = frontier_phi_71_pred_1;
                _3076 = frontier_phi_71_pred_2;
                _3074 = frontier_phi_71_pred_3;
                _3072 = frontier_phi_71_pred_4;
                _3070 = frontier_phi_71_pred_5;
                uint _3229 = _3228 + 1u;
                if (_3229 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3222 = _3070;
                    _3223 = _3072;
                    _3224 = _3074;
                    _3225 = _3076;
                    _3226 = _3078;
                    _3227 = _3080;
                    _3228 = _3229;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3069 = _3070;
            _3071 = _3072;
            _3073 = _3074;
            _3075 = _3076;
            _3077 = _3078;
            _3079 = _3080;
        }
        uvec4 _3083 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3084 = _3083.z;
        uint _3086 = (_3084 >> 8u) & 15u;
        float _3190;
        float _3192;
        float _3194;
        float _3196;
        float _3198;
        float _3200;
        if (((4294967295u << _3086) & _2989) == 0u)
        {
            _3190 = _3069;
            _3192 = _3071;
            _3194 = _3073;
            _3196 = _3075;
            _3198 = _3077;
            _3200 = _3079;
        }
        else
        {
            float _3215 = inversesqrt(dot(vec3(_2047, _2048, _2049), vec3(_2047, _2048, _2049)));
            float _3216 = _3215 * _2047;
            float _3217 = _3215 * _2048;
            float _3218 = _3215 * _2049;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3086 < ((_3084 >> 12u) & 15u))
            {
                float _3191;
                float _3193;
                float _3195;
                float _3197;
                float _3199;
                float _3201;
                float _3350 = _3069;
                float _3351 = _3071;
                float _3352 = _3073;
                float _3353 = _3075;
                float _3354 = _3077;
                float _3355 = _3079;
                uint _3356 = _3086;
                uint _3365;
                bool _3366;
                for (;;)
                {
                    _3365 = texelFetch(g_lightClassification, int((((_2983 << 5u) + (_2969 << 9u)) + (_3356 << 2u)) >> 2u)).x;
                    _3366 = _3365 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3366)
                    {
                        frontier_phi_82_pred = _3355;
                        frontier_phi_82_pred_1 = _3354;
                        frontier_phi_82_pred_2 = _3353;
                        frontier_phi_82_pred_3 = _3352;
                        frontier_phi_82_pred_4 = _3351;
                        frontier_phi_82_pred_5 = _3350;
                    }
                    else
                    {
                        float _3558;
                        float _3559;
                        float _3560;
                        float _3561;
                        float _3562;
                        float _3563;
                        float _3852;
                        float _3853;
                        float _3854;
                        float _3855;
                        float _3856;
                        float _3857;
                        float _3571 = _3350;
                        float _3572 = _3351;
                        float _3573 = _3352;
                        float _3574 = _3353;
                        float _3575 = _3354;
                        float _3576 = _3355;
                        uint _3577 = _3365;
                        uint _3578;
                        vec4 _3603;
                        float _3604;
                        vec4 _3619;
                        vec3 _3631;
                        vec4 _3646;
                        vec4 _3661;
                        float _3708;
                        bool _3709;
                        for (;;)
                        {
                            uint _3588 = ((_3356 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3577));
                            _3578 = (_3577 + 4294967295u) & _3577;
                            uint _3590 = _3588 * 40u;
                            _3603 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3590)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3590 + 3u)).x));
                            _3604 = _3603.w;
                            uint _3606 = (_3588 * 40u) + 4u;
                            _3619 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3606)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3606 + 3u)).x));
                            uint _3621 = (_3588 * 40u) + 8u;
                            _3631 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3621)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3621 + 2u)).x));
                            uint _3633 = (_3588 * 40u) + 16u;
                            _3646 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3633)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3633 + 3u)).x));
                            uint _3648 = (_3588 * 40u) + 20u;
                            _3661 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3648)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3648 + 3u)).x));
                            uint _3664 = (_3588 * 40u) + 24u;
                            vec4 _3677 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3664)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3664 + 3u)).x));
                            uint _3683 = (_3588 * 40u) + 28u;
                            vec4 _3696 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3683)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3683 + 3u)).x));
                            _3708 = fma(_2049, _3696.z, fma(_2048, _3696.y, _3696.x * _2047)) + _3696.w;
                            _3709 = !((fma(_2049, _3677.z, fma(_2048, _3677.y, _3677.x * _2047)) + _3677.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3709)
                            {
                                float _3736 = _3603.x - _2047;
                                float _3737 = _3603.y - _2048;
                                float _3738 = _3603.z - _2049;
                                float _3739 = dot(vec3(_3736, _3737, _3738), vec3(_3736, _3737, _3738));
                                float _3742 = inversesqrt(_3739);
                                float _3743 = _3742 * _3736;
                                float _3744 = _3742 * _3737;
                                float _3745 = _3742 * _3738;
                                float _3749 = 1.0 - (_3739 / (_3604 * _3604));
                                float _4927 = isnan(0.0) ? _3749 : (isnan(_3749) ? 0.0 : max(_3749, 0.0));
                                float _3750 = isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0));
                                float _3754 = sqrt(_3739) * _3619.w;
                                float _3756 = 1.39999997615814208984375 / (_3754 + 1.39999997615814208984375);
                                float _3757 = _3756 * _3756;
                                float _3760 = ((1.0 - _3757) * dot(vec3(_3743, _3744, _3745), vec3(_879, _882, _885))) + _3757;
                                float _3763 = _3754 * _3754;
                                float _3767 = (fma(_2049, _3646.z, fma(_2048, _3646.y, _3646.x * _2047)) + _3646.w) / _3708;
                                float _3768 = (fma(_2049, _3661.z, fma(_2048, _3661.y, _3661.x * _2047)) + _3661.w) / _3708;
                                float _3772 = 1.0 - dot(vec2(_3767, _3768), vec2(_3767, _3768));
                                float _4943 = isnan(0.0) ? _3772 : (isnan(_3772) ? 0.0 : max(_3772, 0.0));
                                float _3773 = isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0));
                                float _3774 = _3773 * (((isnan(0.0) ? _3760 : (isnan(_3760) ? 0.0 : max(_3760, 0.0))) * _3750) / ((_3763 * 0.699999988079071044921875) + 1.0));
                                float _3786 = exp2(log2(1.0 / ((_3763 * 3.5) + 5.0)) * 0.25);
                                float _3787 = 1.0 - _954;
                                float _3794 = sqrt(1.0 - ((1.0 - (_3787 * _3787)) * (1.0 - (_3786 * _3786))));
                                float _3795 = _3794 * _3794;
                                float _3796 = _3795 * _3795;
                                float _3797 = _3743 - _3216;
                                float _3798 = _3744 - _3217;
                                float _3799 = _3745 - _3218;
                                float _3803 = inversesqrt(dot(vec3(_3797, _3798, _3799), vec3(_3797, _3798, _3799)));
                                float _3807 = dot(vec3(_879, _882, _885), vec3((-0.0) - _3216, (-0.0) - _3217, (-0.0) - _3218));
                                float _4954 = isnan(0.0) ? _3807 : (isnan(_3807) ? 0.0 : max(_3807, 0.0));
                                float _3810 = isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0));
                                float _3811 = dot(vec3(_879, _882, _885), vec3(_3803 * _3797, _3803 * _3798, _3803 * _3799));
                                float _4965 = isnan(0.0) ? _3811 : (isnan(_3811) ? 0.0 : max(_3811, 0.0));
                                float _3814 = isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0));
                                float _3818 = ((_3814 * _3814) * (_3796 + (-1.0))) + 1.0;
                                float _3819 = _3756 * _3795;
                                float _3820 = _3819 * _3819;
                                float _3826 = ((1.0 - _3820) * dot(vec3(_879, _882, _885), vec3(_3743, _3744, _3745))) + _3820;
                                float _4976 = isnan(0.0) ? _3826 : (isnan(_3826) ? 0.0 : max(_3826, 0.0));
                                float _3827 = isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0));
                                float _3828 = 1.0 - _3795;
                                float _3838 = (0.5 / (((_3827 * ((_3810 * _3828) + _3795)) + 9.9999999392252902907785028219223e-09) + (((_3827 * _3828) + _3795) * _3810))) * _3827;
                                float _4987 = isnan(0.0) ? _3838 : (isnan(_3838) ? 0.0 : max(_3838, 0.0));
                                float _3848 = (_3773 * _3750) * (((_3796 * 3.1415927410125732421875) * (isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0)))) / ((_3818 * _3818) * ((_3763 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3774 * _3619.z;
                                frontier_phi_88_pred_1 = _3774 * _3619.y;
                                frontier_phi_88_pred_2 = _3774 * _3619.x;
                                frontier_phi_88_pred_3 = _3848 * _3631.z;
                                frontier_phi_88_pred_4 = _3848 * _3631.y;
                                frontier_phi_88_pred_5 = _3848 * _3631.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3857 = frontier_phi_88_pred;
                            _3856 = frontier_phi_88_pred_1;
                            _3855 = frontier_phi_88_pred_2;
                            _3854 = frontier_phi_88_pred_3;
                            _3853 = frontier_phi_88_pred_4;
                            _3852 = frontier_phi_88_pred_5;
                            _3561 = _3855 + _3574;
                            _3562 = _3856 + _3575;
                            _3563 = _3857 + _3576;
                            _3558 = _3852 + _3571;
                            _3559 = _3853 + _3572;
                            _3560 = _3854 + _3573;
                            if (_3578 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3571 = _3558;
                                _3572 = _3559;
                                _3573 = _3560;
                                _3574 = _3561;
                                _3575 = _3562;
                                _3576 = _3563;
                                _3577 = _3578;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3563;
                        frontier_phi_82_pred_1 = _3562;
                        frontier_phi_82_pred_2 = _3561;
                        frontier_phi_82_pred_3 = _3560;
                        frontier_phi_82_pred_4 = _3559;
                        frontier_phi_82_pred_5 = _3558;
                    }
                    _3201 = frontier_phi_82_pred;
                    _3199 = frontier_phi_82_pred_1;
                    _3197 = frontier_phi_82_pred_2;
                    _3195 = frontier_phi_82_pred_3;
                    _3193 = frontier_phi_82_pred_4;
                    _3191 = frontier_phi_82_pred_5;
                    uint _3357 = _3356 + 1u;
                    if (_3357 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3350 = _3191;
                        _3351 = _3193;
                        _3352 = _3195;
                        _3353 = _3197;
                        _3354 = _3199;
                        _3355 = _3201;
                        _3356 = _3357;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3197;
                frontier_phi_63_64_ladder_1 = _3201;
                frontier_phi_63_64_ladder_2 = _3199;
                frontier_phi_63_64_ladder_3 = _3195;
                frontier_phi_63_64_ladder_4 = _3193;
                frontier_phi_63_64_ladder_5 = _3191;
            }
            else
            {
                frontier_phi_63_64_ladder = _3075;
                frontier_phi_63_64_ladder_1 = _3079;
                frontier_phi_63_64_ladder_2 = _3077;
                frontier_phi_63_64_ladder_3 = _3073;
                frontier_phi_63_64_ladder_4 = _3071;
                frontier_phi_63_64_ladder_5 = _3069;
            }
            _3190 = frontier_phi_63_64_ladder_5;
            _3192 = frontier_phi_63_64_ladder_4;
            _3194 = frontier_phi_63_64_ladder_3;
            _3196 = frontier_phi_63_64_ladder;
            _3198 = frontier_phi_63_64_ladder_2;
            _3200 = frontier_phi_63_64_ladder_1;
        }
        float _3205 = isnan(1.0) ? _938 : (isnan(_938) ? 1.0 : min(_938, 1.0));
        _3002 = (_3205 * _3196) + _2514;
        _3004 = (_3205 * _3198) + _2516;
        _3006 = (_3205 * _3200) + _2518;
        _3008 = ((_3190 * _923) * _3205) + _2852;
        _3010 = ((_3192 * _925) * _3205) + _2854;
        _3012 = ((_3194 * _926) * _3205) + _2856;
    }
    else
    {
        _3002 = _2514;
        _3004 = _2516;
        _3006 = _2518;
        _3008 = _2852;
        _3010 = _2854;
        _3012 = _2856;
    }
    float _5003 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _5014 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
    float _5025 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _3029 = ((isnan(1.0) ? _5003 : (isnan(_5003) ? 1.0 : min(_5003, 1.0))) * (_3002 + ((isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))) * _938))) + ((_3008 + ((isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0))) * _1779)) * cbPerFrame._m0[3u].x);
    float _3030 = ((isnan(1.0) ? _5014 : (isnan(_5014) ? 1.0 : min(_5014, 1.0))) * (_3004 + ((isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0))) * _938))) + ((_3010 + ((isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0))) * _1779)) * cbPerFrame._m0[3u].x);
    float _3031 = ((isnan(1.0) ? _5025 : (isnan(_5025) ? 1.0 : min(_5025, 1.0))) * (_3006 + ((isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0))) * _938))) + ((_3012 + ((isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0))) * _1779)) * cbPerFrame._m0[3u].x);
    uint _3032 = _898 + 6u;
    float _3040 = _860 / cbSceneParam._m0[86u].x;
    float _3041 = _861 / cbSceneParam._m0[86u].y;
    vec4 _3055 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3040, _3041, (log2((isnan(cbSceneParam._m0[77u].w) ? _783 : (isnan(_783) ? cbSceneParam._m0[77u].w : min(_783, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3057 = _3055.x;
    float _3058 = _3055.y;
    float _3059 = _3055.z;
    float _3060 = _3055.w;
    float _3132;
    float _3134;
    float _3136;
    float _3138;
    if (_783 > cbSceneParam._m0[78u].w)
    {
        float _3094 = isnan(_783) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _783 : min(cbSceneParam._m0[80u].w, _783));
        float _3095 = _3094 / _783;
        float _3106 = _3095 * _833;
        float _3107 = _834 * _3095;
        float _3108 = (-0.0) - _3107;
        float _3110 = _3095 * _835;
        float _3112 = (cbSceneParam._m0[77u].w * _3108) / _3094;
        float _3113 = _3112 + cbSceneParam._m0[79u].w;
        float _3114 = cbSceneParam._m0[79u].w - _3107;
        float _3120 = sqrt(((_3106 * _3106) + (_3107 * _3107)) + (_3110 * _3110));
        float _3123 = (1.0 - (cbSceneParam._m0[77u].w / _3094)) * _3120;
        float _3128 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3130 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3307;
        if (abs((_3108 - _3112) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3307 = ((((_3113 > 0.0) ? exp2(_3128 * _3113) : (2.0 - exp2(_3130 * _3113))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3123;
        }
        else
        {
            float _3251 = 1.0 / cbSceneParam._m0[80u].x;
            float _3252 = isnan(_3114) ? _3113 : (isnan(_3113) ? _3114 : max(_3113, _3114));
            float _3253 = isnan(_3114) ? _3113 : (isnan(_3113) ? _3114 : min(_3113, _3114));
            float _3262 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : min(_3252, 0.0));
            float _3263 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : min(_3253, 0.0));
            _3307 = ((abs(_3120 / _3108) * cbSceneParam._m0[80u].y) * ((((_3262 - _3263) * 2.0) - ((exp2(_3128 * (isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0)))) - exp2(_3128 * (isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0))))) * _3251)) - ((exp2(_3130 * _3262) - exp2(_3130 * _3263)) * _3251))) + (_3123 * cbSceneParam._m0[80u].z);
        }
        vec4 _3309 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3040, _3041, 1.0), 0.0);
        float _3318 = exp2((_3307 * (-1.44269502162933349609375)) * (1.0 - _3309.w));
        float _3319 = log2(_3318);
        float _3335 = log2(_3060);
        _3132 = (exp2(_3335 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3319 * cbSceneParam._m0[78u].x)) * _3309.x) / cbSceneParam._m0[78u].x)) + _3057;
        _3134 = (exp2(_3335 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3319 * cbSceneParam._m0[78u].y)) * _3309.y) / cbSceneParam._m0[78u].y)) + _3058;
        _3136 = (exp2(_3335 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3319 * cbSceneParam._m0[78u].z)) * _3309.z) / cbSceneParam._m0[78u].z)) + _3059;
        _3138 = _3318 * _3060;
    }
    else
    {
        _3132 = _3057;
        _3134 = _3058;
        _3136 = _3059;
        _3138 = _3060;
    }
    bool _3345;
    vec4 _3148;
    vec4 _3170;
    float _3172;
    float _3176;
    float _3177;
    float _3178;
    float _3179;
    bool _3189;
    for (;;)
    {
        _3148 = cbMatDynParam._m0[0u];
        float _3150 = roundEven(_3148.y);
        bool _3151 = _3150 == 3.0;
        float _3152 = log2(_3138);
        float _3159 = exp2(_3152 * cbSceneParam._m0[78u].x) * _3029;
        float _3160 = exp2(_3152 * cbSceneParam._m0[78u].y) * _3030;
        float _3161 = exp2(_3152 * cbSceneParam._m0[78u].z) * _3031;
        float _3168 = _849 + (-0.5);
        _3170 = cbMtdParam._m0[1u];
        _3172 = _3170.y * _3168;
        float _3175 = (_3150 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3176 = _3175 * (_3151 ? _3159 : (_3159 + (cbSceneParam._m0[72u].w * _3132)));
        _3177 = _3175 * (_3151 ? _3160 : (_3160 + (cbSceneParam._m0[72u].w * _3134)));
        _3178 = _3175 * (_3151 ? _3161 : (_3161 + (cbSceneParam._m0[72u].w * _3136)));
        _3179 = _3168 * 0.999000012874603271484375;
        _3189 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3189)
        {
            if ((cbInstanceData._m0[_898 + 7u].x + _3179) < 0.5)
            {
                _3345 = true;
                break;
            }
        }
        uint _3286 = _899 + uint(_3148.w);
        if ((cbInstanceData._m0[_3286].w < 1.0) && ((cbInstanceData._m0[_3286].w + _3179) < 0.5))
        {
            _3345 = true;
            break;
        }
        if ((_3172 + 1.0) < _3170.x)
        {
            _3345 = true;
            break;
        }
        _3345 = false;
        break;
    }
    float _3549;
    if (_3345)
    {
        discard_state = true;
        _3549 = 0.0;
    }
    else
    {
        _3549 = cbInstanceData._m0[_3032].w;
    }
    SV_Target.x = _3176;
    SV_Target.y = _3177;
    SV_Target.z = _3178;
    SV_Target.w = _3549;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3032].w;
    discard_exit();
}


