#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_20;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1297;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _260 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _266 = _260.x * cbMtdParam._m0[10u].x;
    float _267 = _260.y * cbMtdParam._m0[10u].y;
    float _268 = _260.z * cbMtdParam._m0[10u].z;
    vec4 _286 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _336 = cbMtdParam._m0[18u].y * texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x;
    float _347 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].x * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].y * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _336)) + 1.0;
    float _3910 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _348 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _355 = (_348 * ((_286.x * cbMtdParam._m0[11u].x) - _266)) + _266;
    float _356 = (_348 * ((_286.y * cbMtdParam._m0[11u].y) - _267)) + _267;
    float _357 = (_348 * ((_286.z * cbMtdParam._m0[11u].z) - _268)) + _268;
    vec4 _375 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _402 = ((cbMtdParam._m0[17u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _336)) + 1.0;
    float _3921 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _403 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
    float _410 = (_403 * ((_375.x * cbMtdParam._m0[12u].x) - _355)) + _355;
    float _411 = (_403 * ((_375.y * cbMtdParam._m0[12u].y) - _356)) + _356;
    float _412 = (_403 * ((_375.z * cbMtdParam._m0[12u].z) - _357)) + _357;
    vec4 _429 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _454 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[18u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[18u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _336)) + 1.0;
    float _3932 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _455 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
    float _462 = (_455 * ((_429.x * cbMtdParam._m0[13u].x) - _410)) + _410;
    float _463 = (_455 * ((_429.y * cbMtdParam._m0[13u].y) - _411)) + _411;
    float _464 = (_455 * ((_429.z * cbMtdParam._m0[13u].z) - _412)) + _412;
    vec4 _484 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _513 = (TEXCOORD_5.x - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.z) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.w) + cbTextureTilingScale._m0[18u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].z + 1.0);
    float _3943 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _514 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
    float _521 = (_514 * ((_484.x * cbMtdParam._m0[14u].x) - _462)) + _462;
    float _522 = (_514 * ((_484.y * cbMtdParam._m0[14u].y) - _463)) + _463;
    float _523 = (_514 * ((_484.z * cbMtdParam._m0[14u].z) - _464)) + _464;
    vec4 _536 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _538 = _536.x;
    float _556 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _538) * _348) + _538;
    float _574 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _556) * _403) + _556;
    float _591 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _574) * _455) + _574;
    float _593 = _591 - (_591 * TEXCOORD_5.x);
    vec4 _606 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _628 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _630 = _628.x;
    float _631 = _628.y;
    float _634 = cbMtdParam._m0[17u].y * _628.z;
    vec4 _646 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _655 = (((cbMtdParam._m0[17u].x * _646.z) - _634) * _348) + _634;
    vec4 _668 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _680 = (((cbMtdParam._m0[16u].w * _668.z) - _655) * _403) + _655;
    vec4 _693 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _702 = (((cbMtdParam._m0[16u].z * _693.z) - _680) * _455) + _680;
    float _707 = ((cbMtdParam._m0[16u].x * TEXCOORD_5.x) * ((_606.z * cbMtdParam._m0[17u].z) - _702)) + _702;
    float _712 = ((_646.x - _630) * _348) + _630;
    float _713 = ((_646.y - _631) * _348) + _631;
    float _718 = ((_668.x - _712) * _403) + _712;
    float _719 = ((_668.y - _713) * _403) + _713;
    float _728 = ((((_693.x - _718) * _455) + _718) * 2.0) + (-1.0);
    float _729 = ((((_693.y - _719) * _455) + _719) * 2.0) + (-1.0);
    float _730 = dot(vec2(_728, _729), vec2(_728, _729));
    float _3954 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _735 = sqrt(1.0 - (isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))));
    float _741 = ((((_606.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[15u].y) + _728;
    float _742 = ((((_606.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[15u].y) + _729;
    float _745 = fma(_735, _230 * NORMAL.x, fma(_742, _237 * TANGENT.x, (_223 * _215) * _741));
    float _748 = fma(_735, _230 * NORMAL.y, fma(_742, _237 * TANGENT.y, (_223 * _216) * _741));
    float _751 = fma(_735, _230 * NORMAL.z, fma(_742, _237 * TANGENT.z, (_223 * _217) * _741));
    float _755 = inversesqrt(dot(vec3(_745, _748, _751), vec3(_745, _748, _751)));
    float _756 = _755 * _745;
    float _757 = _755 * _748;
    float _758 = _755 * _751;
    float _3965 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _759 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
    float _3976 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _3987 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _3998 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _4009 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _763 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
    float _779 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _819 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _829 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _819);
    float _830 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _819);
    float _831 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _819);
    float _835 = inversesqrt(dot(vec3(_829, _830, _831), vec3(_829, _830, _831)));
    float _836 = _829 * _835;
    float _837 = _830 * _835;
    float _838 = _831 * _835;
    float _844 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _845 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _863 = fma(_758, cbSceneParam._m0[5u].z, fma(_757, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _756));
    float _866 = fma(_758, cbSceneParam._m0[6u].z, fma(_757, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _756));
    float _869 = fma(_758, cbSceneParam._m0[7u].z, fma(_757, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _756));
    uint _882 = uint(roundEven(NORMAL.w)) * 13u;
    uint _884 = (_882 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _890 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0)))) * cbInstanceData._m0[_884].x;
    float _891 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0)))) * cbInstanceData._m0[_884].y;
    float _892 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0)))) * cbInstanceData._m0[_884].z;
    float _4020 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _893 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
    float _4031 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _894 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
    float _4042 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _895 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
    float _896 = 1.0 - _763;
    float _897 = _893 * _896;
    float _898 = _894 * _896;
    float _899 = _895 * _896;
    float _904 = (_893 + (-0.039999999105930328369140625)) * _763;
    float _905 = (_894 + (-0.039999999105930328369140625)) * _763;
    float _906 = (_895 + (-0.039999999105930328369140625)) * _763;
    float _907 = _904 + 0.039999999105930328369140625;
    float _909 = _905 + 0.039999999105930328369140625;
    float _910 = _906 + 0.039999999105930328369140625;
    vec4 _919 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _844, cbSceneParam._m0[86u].y * _845));
    float _922 = _919.x * TEXCOORD_5.w;
    float _923 = dot(vec3(_756, _757, _758), vec3(_836, _837, _838));
    float _926 = _923 * 2.0;
    float _930 = (_926 * _756) - _836;
    float _931 = (_926 * _757) - _837;
    float _932 = (_926 * _758) - _838;
    float _936 = abs(dot(vec3(_836, _837, _838), vec3(_756, _757, _758)));
    float _4053 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _938 = sqrt(_759);
    float _951 = exp2((_938 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_938 * 3.0));
    float _957 = (1.0 - _951) * ((_938 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _958 = _951 * _938;
    float _986 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _990 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _994 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1296;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1021 = fma(_994, cbModelParam._m0[26u].z, fma(_990, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _986));
        float _1025 = fma(_994, cbModelParam._m0[27u].z, fma(_990, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _986));
        float _1029 = fma(_994, cbModelParam._m0[28u].z, fma(_990, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _986));
        float _1054 = _986 + _756;
        float _1055 = _990 + _757;
        float _1056 = _994 + _758;
        float _1066 = fma(_1056, cbModelParam._m0[26u].z, fma(_1055, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1054)) - _1021;
        float _1067 = fma(_1056, cbModelParam._m0[27u].z, fma(_1055, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1054)) - _1025;
        float _1068 = fma(_1056, cbModelParam._m0[28u].z, fma(_1055, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1054)) - _1029;
        float _1072 = inversesqrt(dot(vec3(_1066, _1067, _1068), vec3(_1066, _1067, _1068)));
        float _1085 = ((_1072 * _1066) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1021 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1086 = ((_1072 * _1067) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1025 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1087 = ((_1072 * _1068) / cbModelParam._m0[34u].z) + ((((((_1029 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1090 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1085, _1086, _1087), 0.0);
        vec4 _1097 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1085, _1086, _1087), 0.0);
        vec4 _1104 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1085, _1086, _1087), 0.0);
        vec4 _1111 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1085, _1086, _1087), 0.0);
        float _1124 = exp2((_1090.w + (-0.5)) * 20.0) * 2.0;
        float _1125 = _1124 * (_1090.x + (-0.5));
        float _1126 = _1124 * (_1090.y + (-0.5));
        float _1127 = _1124 * (_1090.z + (-0.5));
        float _1134 = exp2((_1097.w + (-0.5)) * 20.0) * 2.0;
        float _1135 = _1134 * (_1097.x + (-0.5));
        float _1136 = _1134 * (_1097.y + (-0.5));
        float _1137 = _1134 * (_1097.z + (-0.5));
        float _1144 = exp2((_1104.w + (-0.5)) * 20.0) * 2.0;
        float _1145 = _1144 * (_1104.x + (-0.5));
        float _1146 = _1144 * (_1104.y + (-0.5));
        float _1147 = _1144 * (_1104.z + (-0.5));
        float _1154 = exp2((_1111.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = _1154 * (_1111.x + (-0.5));
        float _1156 = _1154 * (_1111.y + (-0.5));
        float _1157 = _1154 * (_1111.z + (-0.5));
        float _1158 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1159 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1160 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1161 = _1125 * 0.5;
        float _1162 = _1135 * 0.5;
        float _1163 = _1145 * 0.5;
        float _1164 = dot(vec3(_1161, _1162, _1163), vec3(_1161, _1162, _1163));
        float _1169 = (_1164 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1164);
        float _1178 = (dot(vec3(_756, _757, _758), vec3(_1169 * _1161, _1169 * _1162, _1169 * _1163)) + 1.0) * 0.5;
        float _4079 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1188 = sqrt(((_1162 * _1162) + (_1161 * _1161)) + (_1163 * _1163)) / (_1158 + 9.9999997473787516355514526367188e-06);
        float _4090 = isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0));
        float _1189 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _1190 = _1189 * 2.0;
        float _1194 = (1.0 - _1189) / (_1189 + 1.0);
        float _4101 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1195 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1204 = ((((1.0 - _1195) * (_1190 + 2.0)) * exp2(log2(isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * (_1190 + 1.0))) + _1195) * _1158;
        float _1205 = _1126 * 0.5;
        float _1206 = _1136 * 0.5;
        float _1207 = _1146 * 0.5;
        float _1208 = dot(vec3(_1205, _1206, _1207), vec3(_1205, _1206, _1207));
        float _1213 = (_1208 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1208);
        float _1221 = (dot(vec3(_756, _757, _758), vec3(_1213 * _1205, _1213 * _1206, _1213 * _1207)) + 1.0) * 0.5;
        float _4112 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1230 = sqrt(((_1206 * _1206) + (_1205 * _1205)) + (_1207 * _1207)) / (_1159 + 9.9999997473787516355514526367188e-06);
        float _4123 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1231 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _1232 = _1231 * 2.0;
        float _1236 = (1.0 - _1231) / (_1231 + 1.0);
        float _4134 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1237 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1246 = ((((1.0 - _1237) * (_1232 + 2.0)) * exp2(log2(isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * (_1232 + 1.0))) + _1237) * _1159;
        float _1247 = _1127 * 0.5;
        float _1248 = _1137 * 0.5;
        float _1249 = _1147 * 0.5;
        float _1250 = dot(vec3(_1247, _1248, _1249), vec3(_1247, _1248, _1249));
        float _1255 = (_1250 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1250);
        float _1263 = (dot(vec3(_756, _757, _758), vec3(_1255 * _1247, _1255 * _1248, _1255 * _1249)) + 1.0) * 0.5;
        float _4145 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1272 = sqrt(((_1248 * _1248) + (_1247 * _1247)) + (_1249 * _1249)) / (_1160 + 9.9999997473787516355514526367188e-06);
        float _4156 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1274 = _1273 * 2.0;
        float _1278 = (1.0 - _1273) / (_1273 + 1.0);
        float _4167 = isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0));
        float _1279 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1288 = ((((1.0 - _1279) * (_1274 + 2.0)) * exp2(log2(isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_1274 + 1.0))) + _1279) * _1160;
        _1296 = _1127;
        _1298 = _1126;
        _1299 = _1125;
        _1300 = _1137;
        _1301 = _1136;
        _1302 = _1135;
        _1303 = _1147;
        _1304 = _1146;
        _1305 = _1145;
        _1306 = _1160;
        _1307 = _1159;
        _1308 = _1158;
        _1309 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0)));
        _1310 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0)));
        _1311 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0)));
    }
    else
    {
        _1296 = _1297;
        _1298 = _1297;
        _1299 = _1297;
        _1300 = _1297;
        _1301 = _1297;
        _1302 = _1297;
        _1303 = _1297;
        _1304 = _1297;
        _1305 = _1297;
        _1306 = _1297;
        _1307 = _1297;
        _1308 = _1297;
        _1309 = 0.0;
        _1310 = 0.0;
        _1311 = 0.0;
    }
    float _1606;
    float _1607;
    float _1608;
    float _1609;
    float _1610;
    float _1611;
    float _1612;
    float _1613;
    float _1614;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1337 = fma(_994, cbModelParam._m0[30u].z, fma(_990, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _986));
        float _1341 = fma(_994, cbModelParam._m0[31u].z, fma(_990, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _986));
        float _1345 = fma(_994, cbModelParam._m0[32u].z, fma(_990, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _986));
        float _1368 = _986 + _756;
        float _1369 = _990 + _757;
        float _1370 = _994 + _758;
        float _1380 = fma(_1370, cbModelParam._m0[30u].z, fma(_1369, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1368)) - _1337;
        float _1381 = fma(_1370, cbModelParam._m0[31u].z, fma(_1369, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1368)) - _1341;
        float _1382 = fma(_1370, cbModelParam._m0[32u].z, fma(_1369, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1368)) - _1345;
        float _1386 = inversesqrt(dot(vec3(_1380, _1381, _1382), vec3(_1380, _1381, _1382)));
        float _1399 = ((_1386 * _1380) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1337 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1400 = ((_1386 * _1381) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1341 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1401 = ((_1386 * _1382) / cbModelParam._m0[35u].z) + ((((((_1345 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1403 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1399, _1400, _1401), 0.0);
        vec4 _1410 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1399, _1400, _1401), 0.0);
        vec4 _1417 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1399, _1400, _1401), 0.0);
        vec4 _1424 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1399, _1400, _1401), 0.0);
        float _1436 = exp2((_1403.w + (-0.5)) * 20.0) * 2.0;
        float _1437 = _1436 * (_1403.x + (-0.5));
        float _1438 = _1436 * (_1403.y + (-0.5));
        float _1439 = _1436 * (_1403.z + (-0.5));
        float _1446 = exp2((_1410.w + (-0.5)) * 20.0) * 2.0;
        float _1447 = _1446 * (_1410.x + (-0.5));
        float _1448 = _1446 * (_1410.y + (-0.5));
        float _1449 = _1446 * (_1410.z + (-0.5));
        float _1456 = exp2((_1417.w + (-0.5)) * 20.0) * 2.0;
        float _1457 = _1456 * (_1417.x + (-0.5));
        float _1458 = _1456 * (_1417.y + (-0.5));
        float _1459 = _1456 * (_1417.z + (-0.5));
        float _1466 = exp2((_1424.w + (-0.5)) * 20.0) * 2.0;
        float _1467 = _1466 * (_1424.x + (-0.5));
        float _1468 = _1466 * (_1424.y + (-0.5));
        float _1469 = _1466 * (_1424.z + (-0.5));
        float _1470 = isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0));
        float _1471 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1472 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
        float _1473 = _1437 * 0.5;
        float _1474 = _1447 * 0.5;
        float _1475 = _1457 * 0.5;
        float _1476 = dot(vec3(_1473, _1474, _1475), vec3(_1473, _1474, _1475));
        float _1481 = (_1476 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1476);
        float _1489 = (dot(vec3(_756, _757, _758), vec3(_1481 * _1473, _1481 * _1474, _1481 * _1475)) + 1.0) * 0.5;
        float _4208 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1498 = sqrt(((_1474 * _1474) + (_1473 * _1473)) + (_1475 * _1475)) / (_1470 + 9.9999997473787516355514526367188e-06);
        float _4219 = isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0));
        float _1499 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
        float _1500 = _1499 * 2.0;
        float _1504 = (1.0 - _1499) / (_1499 + 1.0);
        float _4230 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1505 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
        float _1514 = ((((1.0 - _1505) * (_1500 + 2.0)) * exp2(log2(isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0))) * (_1500 + 1.0))) + _1505) * _1470;
        float _1515 = _1438 * 0.5;
        float _1516 = _1448 * 0.5;
        float _1517 = _1458 * 0.5;
        float _1518 = dot(vec3(_1515, _1516, _1517), vec3(_1515, _1516, _1517));
        float _1523 = (_1518 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1518);
        float _1531 = (dot(vec3(_756, _757, _758), vec3(_1523 * _1515, _1523 * _1516, _1523 * _1517)) + 1.0) * 0.5;
        float _4241 = isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0));
        float _1540 = sqrt(((_1516 * _1516) + (_1515 * _1515)) + (_1517 * _1517)) / (_1471 + 9.9999997473787516355514526367188e-06);
        float _4252 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1541 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _1542 = _1541 * 2.0;
        float _1546 = (1.0 - _1541) / (_1541 + 1.0);
        float _4263 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1547 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
        float _1556 = ((((1.0 - _1547) * (_1542 + 2.0)) * exp2(log2(isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * (_1542 + 1.0))) + _1547) * _1471;
        float _1557 = _1439 * 0.5;
        float _1558 = _1449 * 0.5;
        float _1559 = _1459 * 0.5;
        float _1560 = dot(vec3(_1557, _1558, _1559), vec3(_1557, _1558, _1559));
        float _1565 = (_1560 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1560);
        float _1573 = (dot(vec3(_756, _757, _758), vec3(_1565 * _1557, _1565 * _1558, _1565 * _1559)) + 1.0) * 0.5;
        float _4274 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1582 = sqrt(((_1558 * _1558) + (_1557 * _1557)) + (_1559 * _1559)) / (_1472 + 9.9999997473787516355514526367188e-06);
        float _4285 = isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0));
        float _1583 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
        float _1584 = _1583 * 2.0;
        float _1588 = (1.0 - _1583) / (_1583 + 1.0);
        float _4296 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
        float _1589 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
        float _1598 = ((((1.0 - _1589) * (_1584 + 2.0)) * exp2(log2(isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * (_1584 + 1.0))) + _1589) * _1472;
        _1606 = _1439;
        _1607 = _1438;
        _1608 = _1437;
        _1609 = _1449;
        _1610 = _1448;
        _1611 = _1447;
        _1612 = _1459;
        _1613 = _1458;
        _1614 = _1457;
        _1615 = _1472;
        _1616 = _1471;
        _1617 = _1470;
        _1618 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)));
        _1619 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)));
        _1620 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0)));
    }
    else
    {
        _1606 = _1297;
        _1607 = _1297;
        _1608 = _1297;
        _1609 = _1297;
        _1610 = _1297;
        _1611 = _1297;
        _1612 = _1297;
        _1613 = _1297;
        _1614 = _1297;
        _1615 = _1297;
        _1616 = _1297;
        _1617 = _1297;
        _1618 = 0.0;
        _1619 = 0.0;
        _1620 = 0.0;
    }
    float _1630 = (cbModelParam._m0[1u].x * (_1618 - _1309)) + _1309;
    float _1631 = (cbModelParam._m0[1u].x * (_1619 - _1310)) + _1310;
    float _1632 = (cbModelParam._m0[1u].x * (_1620 - _1311)) + _1311;
    float _1653 = fma(_1632, cbSceneParam._m0[89u].z, fma(_1631, cbSceneParam._m0[89u].y, _1630 * cbSceneParam._m0[89u].x));
    float _1656 = fma(_1632, cbSceneParam._m0[90u].z, fma(_1631, cbSceneParam._m0[90u].y, _1630 * cbSceneParam._m0[90u].x));
    float _1659 = fma(_1632, cbSceneParam._m0[91u].z, fma(_1631, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1630));
    float _1674 = _930 * 0.5;
    float _1675 = _931 * 0.5;
    float _1676 = _932 * 0.5;
    float _1677 = dot(vec4(_1674, _1675, _1676, 1.0), vec4(_1608, _1611, _1614, _1617));
    float _1680 = dot(vec4(_1674, _1675, _1676, 1.0), vec4(_1607, _1610, _1613, _1616));
    float _1683 = dot(vec4(_1674, _1675, _1676, 1.0), vec4(_1606, _1609, _1612, _1615));
    float _1717;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1690 = dot(vec4(_1674, _1675, _1676, 1.0), vec4(_1296, _1300, _1303, _1306));
        float _1694 = dot(vec4(_1674, _1675, _1676, 1.0), vec4(_1298, _1301, _1304, _1307));
        float _1698 = dot(vec4(_1674, _1675, _1676, 1.0), vec4(_1299, _1302, _1305, _1308));
        float _1705 = dot(vec4(cbModelParam._m0[39u]), vec4(_1674, _1675, _1676, 1.0));
        _1717 = dot(vec3(isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0)), isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0)), isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1705) ? 0.0 : (isnan(0.0) ? _1705 : max(0.0, _1705))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1717 = 1.0;
    }
    float _1728;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1719 = dot(vec4(cbModelParam._m0[40u]), vec4(_1674, _1675, _1676, 1.0));
        _1728 = dot(vec3(isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)), isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0)), isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1719) ? 0.0 : (isnan(0.0) ? _1719 : max(0.0, _1719))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1728 = 1.0;
    }
    float _1732 = (_1728 * cbModelParam._m0[1u].x) + (_1717 * (1.0 - cbModelParam._m0[1u].x));
    float _1742 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _759);
    float _1743 = isnan(_1742) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1742 : min(cbModelParam._m0[25u].z, _1742));
    float _1823;
    float _1825;
    float _1827;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1790 = fma(_994, cbModelParam._m0[13u].z, fma(_990, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _986)) + cbModelParam._m0[13u].w;
        float _1794 = fma(_994, cbModelParam._m0[14u].z, fma(_990, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _986)) + cbModelParam._m0[14u].w;
        float _1798 = fma(_994, cbModelParam._m0[15u].z, fma(_990, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _986)) + cbModelParam._m0[15u].w;
        float _1801 = fma(_932, cbModelParam._m0[13u].z, fma(_931, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _930));
        float _1804 = fma(_932, cbModelParam._m0[14u].z, fma(_931, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _930));
        float _1807 = fma(_932, cbModelParam._m0[15u].z, fma(_931, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _930));
        float _1835;
        if (_1801 > 0.0)
        {
            _1835 = abs((1.0 - _1790) / _1801);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1801 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1790 + 1.0) / _1801);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1835 = frontier_phi_14_12_ladder;
        }
        float _2008;
        if (_1804 > 0.0)
        {
            _2008 = abs((1.0 - _1794) / _1804);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1804 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1794 + 1.0) / _1804);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2008 = frontier_phi_23_19_ladder;
        }
        float _2304;
        if (_1807 > 0.0)
        {
            _2304 = abs((1.0 - _1798) / _1807);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1807 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1798 + 1.0) / _1807);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2304 = frontier_phi_35_30_ladder;
        }
        float _2306 = isnan(_2008) ? _1835 : (isnan(_1835) ? _2008 : min(_1835, _2008));
        float _2307 = isnan(_2304) ? _2306 : (isnan(_2306) ? _2304 : min(_2306, _2304));
        float _2311 = (_2307 * _1801) + _1790;
        float _2312 = (_2307 * _1804) + _1794;
        float _2313 = (_2307 * _1807) + _1798;
        float _2314 = _2307 * 9.9999997473787516355514526367188e-05;
        float _2316 = (-1.0) - _2314;
        float _2318 = _2314 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2313 > _2318) || ((_2313 < _2316) || ((_2312 > _2318) || ((_2312 < _2316) || ((_2311 < _2316) || (_2311 > _2318))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2458 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2313, cbModelParam._m0[9u].z, fma(_2312, cbModelParam._m0[9u].y, _2311 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2313, cbModelParam._m0[10u].z, fma(_2312, cbModelParam._m0[10u].y, _2311 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2313, cbModelParam._m0[11u].z, fma(_2312, cbModelParam._m0[11u].y, _2311 * cbModelParam._m0[11u].x))), _1743);
            frontier_phi_13_35_ladder = _2458.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2458.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2458.x * cbModelParam._m0[1u].y;
        }
        _1823 = frontier_phi_13_35_ladder_2;
        _1825 = frontier_phi_13_35_ladder_1;
        _1827 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1811 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_930, _931, _932), _1743);
        _1823 = _1811.x * cbModelParam._m0[1u].y;
        _1825 = _1811.y * cbModelParam._m0[1u].y;
        _1827 = _1811.z * cbModelParam._m0[1u].y;
    }
    float _1831 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _759);
    float _1832 = isnan(_1831) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1831 : min(cbModelParam._m0[25u].w, _1831));
    float _1923;
    float _1925;
    float _1927;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1887 = fma(_994, cbModelParam._m0[21u].z, fma(_990, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _986)) + cbModelParam._m0[21u].w;
        float _1891 = fma(_994, cbModelParam._m0[22u].z, fma(_990, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _986)) + cbModelParam._m0[22u].w;
        float _1895 = fma(_994, cbModelParam._m0[23u].z, fma(_990, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _986)) + cbModelParam._m0[23u].w;
        float _1898 = fma(_932, cbModelParam._m0[21u].z, fma(_931, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _930));
        float _1901 = fma(_932, cbModelParam._m0[22u].z, fma(_931, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _930));
        float _1904 = fma(_932, cbModelParam._m0[23u].z, fma(_931, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _930));
        float _2013;
        if (_1898 > 0.0)
        {
            _2013 = abs((1.0 - _1887) / _1898);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1898 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1887 + 1.0) / _1898);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2013 = frontier_phi_25_21_ladder;
        }
        float _2331;
        if (_1901 > 0.0)
        {
            _2331 = abs((1.0 - _1891) / _1901);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1901 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1891 + 1.0) / _1901);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2331 = frontier_phi_37_32_ladder;
        }
        float _2669;
        if (_1904 > 0.0)
        {
            _2669 = abs((1.0 - _1895) / _1904);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1904 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1895 + 1.0) / _1904);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2669 = frontier_phi_47_44_ladder;
        }
        float _2671 = isnan(_2331) ? _2013 : (isnan(_2013) ? _2331 : min(_2013, _2331));
        float _2672 = isnan(_2669) ? _2671 : (isnan(_2671) ? _2669 : min(_2671, _2669));
        float _2676 = (_2672 * _1898) + _1887;
        float _2677 = (_2672 * _1901) + _1891;
        float _2678 = (_2672 * _1904) + _1895;
        float _2679 = _2672 * 9.9999997473787516355514526367188e-05;
        float _2680 = (-1.0) - _2679;
        float _2682 = _2679 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2678 > _2682) || ((_2678 < _2680) || ((_2677 > _2682) || ((_2677 < _2680) || ((_2676 < _2680) || (_2676 > _2682))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2800 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2678, cbModelParam._m0[17u].z, fma(_2677, cbModelParam._m0[17u].y, _2676 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2678, cbModelParam._m0[18u].z, fma(_2677, cbModelParam._m0[18u].y, _2676 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2678, cbModelParam._m0[19u].z, fma(_2677, cbModelParam._m0[19u].y, _2676 * cbModelParam._m0[19u].x))), _1832);
            frontier_phi_22_47_ladder = _2800.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2800.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2800.x * cbModelParam._m0[1u].z;
        }
        _1923 = frontier_phi_22_47_ladder_2;
        _1925 = frontier_phi_22_47_ladder_1;
        _1927 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1907 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_930, _931, _932), _1832);
        _1923 = _1907.x * cbModelParam._m0[1u].z;
        _1925 = _1907.y * cbModelParam._m0[1u].z;
        _1927 = _1907.z * cbModelParam._m0[1u].z;
    }
    float _1940 = (((_957 * _907) + _958) * _922) * ((cbModelParam._m0[1u].w * (_1923 - _1823)) + _1823);
    float _1942 = (((_957 * _909) + _958) * _922) * ((cbModelParam._m0[1u].w * (_1925 - _1825)) + _1825);
    float _1944 = (((_957 * _910) + _958) * _922) * ((cbModelParam._m0[1u].w * (_1927 - _1827)) + _1827);
    float _1947 = fma(_1944, cbSceneParam._m0[89u].z, fma(_1942, cbSceneParam._m0[89u].y, _1940 * cbSceneParam._m0[89u].x));
    float _1950 = fma(_1944, cbSceneParam._m0[90u].z, fma(_1942, cbSceneParam._m0[90u].y, _1940 * cbSceneParam._m0[90u].x));
    float _1953 = fma(_1944, cbSceneParam._m0[91u].z, fma(_1942, cbSceneParam._m0[91u].y, _1940 * cbSceneParam._m0[91u].x));
    float _1987 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1991 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1995 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1999 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2000 = _1987 / _1999;
    float _2001 = _1991 / _1999;
    float _2002 = _1995 / _1999;
    float _2149;
    float _2150;
    float _2151;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2029 = ((uint(_2002 > cbSceneParam._m0[59u].y) + uint(_2002 > cbSceneParam._m0[59u].x)) + uint(_2002 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2030 = _2029 + 43u;
        uint _2038 = _2029 + 44u;
        uint _2046 = _2029 + 45u;
        uint _2054 = _2029 + 46u;
        float _2065 = fma(_1999, cbSceneParam._m0[_2030].w, fma(_1995, cbSceneParam._m0[_2030].z, fma(_1991, cbSceneParam._m0[_2030].y, _1987 * cbSceneParam._m0[_2030].x)));
        float _2069 = fma(_1999, cbSceneParam._m0[_2038].w, fma(_1995, cbSceneParam._m0[_2038].z, fma(_1991, cbSceneParam._m0[_2038].y, _1987 * cbSceneParam._m0[_2038].x)));
        float _2077 = fma(_1999, cbSceneParam._m0[_2054].w, fma(_1995, cbSceneParam._m0[_2054].z, fma(_1991, cbSceneParam._m0[_2054].y, _1987 * cbSceneParam._m0[_2054].x)));
        float _2082 = cbSceneParam._m0[33u].z * _2077;
        float _2084 = cbSceneParam._m0[33u].w * _2077;
        float _2087 = fma(_1999, cbSceneParam._m0[_2046].w, fma(_1995, cbSceneParam._m0[_2046].z, fma(_1991, cbSceneParam._m0[_2046].y, _1987 * cbSceneParam._m0[_2046].x))) / _2077;
        float _2135 = (cbSceneParam._m0[33u].x - sqrt(((_2001 * _2001) + (_2000 * _2000)) + (_2002 * _2002))) * cbSceneParam._m0[33u].y;
        float _4422 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
        float _2142 = (isnan(1.0) ? _4422 : (isnan(_4422) ? 1.0 : min(_4422, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2082 + _2065) / _2077, (_2084 + _2069) / _2077), _2087), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2084 + _2065) / _2077, (_2069 - _2082) / _2077), _2087), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2065 - _2082) / _2077, (_2069 - _2084) / _2077), _2087), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2065 - _2084) / _2077, (_2082 + _2069) / _2077), _2087), 0.0)).x), vec4(0.25)));
        _2149 = 1.0 - (_2142 * cbSceneParam._m0[34u].x);
        _2150 = 1.0 - (_2142 * cbSceneParam._m0[34u].y);
        _2151 = 1.0 - (_2142 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2149 = 1.0;
        _2150 = 1.0;
        _2151 = 1.0;
    }
    float _2215;
    float _2217;
    float _2219;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2203 = fma(_1999, cbSceneParam._m0[63u].w, fma(_1995, cbSceneParam._m0[63u].z, fma(_1991, cbSceneParam._m0[63u].y, _1987 * cbSceneParam._m0[63u].x)));
        float _2204 = fma(_1999, cbSceneParam._m0[60u].w, fma(_1995, cbSceneParam._m0[60u].z, fma(_1991, cbSceneParam._m0[60u].y, _1987 * cbSceneParam._m0[60u].x))) / _2203;
        float _2205 = fma(_1999, cbSceneParam._m0[61u].w, fma(_1995, cbSceneParam._m0[61u].z, fma(_1991, cbSceneParam._m0[61u].y, _1987 * cbSceneParam._m0[61u].x))) / _2203;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2204 >= cbSceneParam._m0[64u].x) && (_2205 >= cbSceneParam._m0[64u].y)) && (_2204 <= cbSceneParam._m0[64u].z)) && (_2205 <= cbSceneParam._m0[64u].w))
        {
            float _2344 = fma(_1999, cbSceneParam._m0[62u].w, fma(_1995, cbSceneParam._m0[62u].z, fma(_1991, cbSceneParam._m0[62u].y, _1987 * cbSceneParam._m0[62u].x))) / _2203;
            float _2348 = isnan(cbSceneParam._m0[41u].w) ? _2344 : (isnan(_2344) ? cbSceneParam._m0[41u].w : max(_2344, cbSceneParam._m0[41u].w));
            float _2391 = (cbSceneParam._m0[33u].x - sqrt(((_2001 * _2001) + (_2000 * _2000)) + (_2002 * _2002))) * cbSceneParam._m0[33u].y;
            float _4438 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
            float _2398 = (isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2204, cbSceneParam._m0[33u].w + _2205), _2348), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2204, _2205 - cbSceneParam._m0[33u].z), _2348), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2204 - cbSceneParam._m0[33u].z, _2205 - cbSceneParam._m0[33u].w), _2348), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2204 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2205), _2348), 0.0)).x), vec4(0.25)));
            float _2402 = 1.0 - (_2398 * cbSceneParam._m0[34u].x);
            float _2403 = 1.0 - (_2398 * cbSceneParam._m0[34u].y);
            float _2404 = 1.0 - (_2398 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2404) ? _2151 : (isnan(_2151) ? _2404 : min(_2151, _2404));
            frontier_phi_34_33_ladder_1 = isnan(_2403) ? _2150 : (isnan(_2150) ? _2403 : min(_2150, _2403));
            frontier_phi_34_33_ladder_2 = isnan(_2402) ? _2149 : (isnan(_2149) ? _2402 : min(_2149, _2402));
        }
        else
        {
            frontier_phi_34_33_ladder = _2151;
            frontier_phi_34_33_ladder_1 = _2150;
            frontier_phi_34_33_ladder_2 = _2149;
        }
        _2215 = frontier_phi_34_33_ladder_2;
        _2217 = frontier_phi_34_33_ladder_1;
        _2219 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2215 = _2149;
        _2217 = _2150;
        _2219 = _2151;
    }
    uvec4 _2224 = floatBitsToUint(cbInstanceData._m0[_882 + 5u]);
    uint _2226 = _2224.x * 14u;
    uint _2227 = _2226 + 13u;
    float _2234 = _922 + (-1.0);
    float _2239 = (cbLight._m0[_2227].x * _2234) + 1.0;
    float _2240 = (cbLight._m0[_2227].y * _2234) + 1.0;
    float _2241 = (cbLight._m0[_2227].z * _2234) + 1.0;
    float _2242 = (cbLight._m0[_2227].w * _2234) + 1.0;
    uint _2243 = _2226 + 5u;
    float _2249 = isnan(1.0) ? _2240 : (isnan(_2240) ? 1.0 : min(_2240, 1.0));
    uint _2253 = _2226 + 4u;
    float _2263 = isnan(1.0) ? _2239 : (isnan(_2239) ? 1.0 : min(_2239, 1.0));
    uint _2267 = _2226 | 1u;
    float _2278 = dot(vec3(cbLight._m0[_2226].xyz), vec3(_756, _757, _758));
    float _2281 = dot(vec3(cbLight._m0[_2267].xyz), vec3(_756, _757, _758));
    float _4474 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
    float _4485 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _2286 = (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0))) * 0.3183098733425140380859375;
    float _2288 = (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0))) * 0.3183098733425140380859375;
    float _2295 = ((cbLight._m0[_2243].x * _2249) * _2288) + (((cbLight._m0[_2253].x * _2215) * _2263) * _2286);
    float _2296 = ((_2249 * cbLight._m0[_2243].y) * _2288) + (((cbLight._m0[_2253].y * _2217) * _2263) * _2286);
    float _2297 = ((_2249 * cbLight._m0[_2243].z) * _2288) + (((cbLight._m0[_2253].z * _2219) * _2263) * _2286);
    uvec4 _2301 = floatBitsToUint(cbLight._m0[_2226 + 12u]);
    bool _2303 = _2301.x == 0u;
    float _2405;
    float _2407;
    float _2409;
    if (_2303)
    {
        _2405 = _2295;
        _2407 = _2296;
        _2409 = _2297;
    }
    else
    {
        uint _2413 = _2226 + 6u;
        float _2429 = (dot(vec3(cbLight._m0[_2226 + 2u].xyz), vec3(_756, _757, _758)) * 0.5) + 0.5;
        float _2430 = _2429 * _2429;
        float _4496 = isnan(0.0) ? _2430 : (isnan(_2430) ? 0.0 : max(_2430, 0.0));
        float _2431 = isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0));
        float _2432 = isnan(1.0) ? _2241 : (isnan(_2241) ? 1.0 : min(_2241, 1.0));
        _2405 = (((cbLight._m0[_2413].x * 0.3183098733425140380859375) * _2431) * _2432) + _2295;
        _2407 = (((cbLight._m0[_2413].y * 0.3183098733425140380859375) * _2431) * _2432) + _2296;
        _2409 = (((cbLight._m0[_2413].z * 0.3183098733425140380859375) * _2431) * _2432) + _2297;
    }
    bool _2412 = _2301.y == 0u;
    float _2467;
    float _2469;
    float _2471;
    if (_2412)
    {
        _2467 = _2405;
        _2469 = _2407;
        _2471 = _2409;
    }
    else
    {
        uint _2640 = _2226 + 7u;
        float _2656 = (dot(vec3(cbLight._m0[_2226 + 3u].xyz), vec3(_756, _757, _758)) * 0.5) + 0.5;
        float _2657 = _2656 * _2656;
        float _4512 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
        float _2658 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
        float _2659 = isnan(1.0) ? _2242 : (isnan(_2242) ? 1.0 : min(_2242, 1.0));
        _2467 = (((cbLight._m0[_2640].x * 0.3183098733425140380859375) * _2658) * _2659) + _2405;
        _2469 = (((cbLight._m0[_2640].y * 0.3183098733425140380859375) * _2658) * _2659) + _2407;
        _2471 = (((cbLight._m0[_2640].z * 0.3183098733425140380859375) * _2658) * _2659) + _2409;
    }
    uint _2474 = _2226 + 8u;
    float _2487 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2226].w)) * _759) * 0.949999988079071044921875);
    float _2488 = _2487 * _2487;
    float _2489 = cbLight._m0[_2226].x + _836;
    float _2490 = cbLight._m0[_2226].y + _837;
    float _2491 = cbLight._m0[_2226].z + _838;
    float _2495 = inversesqrt(dot(vec3(_2489, _2490, _2491), vec3(_2489, _2490, _2491)));
    float _2496 = _2495 * _2489;
    float _2497 = _2495 * _2490;
    float _2498 = _2495 * _2491;
    float _2499 = dot(vec3(_756, _757, _758), vec3(cbLight._m0[_2226].xyz));
    float _4528 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
    float _2502 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
    float _4539 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _2503 = isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0));
    float _2504 = dot(vec3(_756, _757, _758), vec3(_2496, _2497, _2498));
    float _4550 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
    float _2507 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
    float _2508 = dot(vec3(cbLight._m0[_2226].xyz), vec3(_2496, _2497, _2498));
    float _4561 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
    float _2512 = _2488 * _2488;
    float _2516 = ((_2507 * _2507) * (_2512 + (-1.0))) + 1.0;
    float _2524 = exp2(log2(1.0 - (isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0)))) * 5.0);
    float _2525 = 0.959999978542327880859375 - _904;
    float _2527 = 0.959999978542327880859375 - _905;
    float _2528 = 0.959999978542327880859375 - _906;
    float _2535 = 1.0 - _2488;
    float _2546 = (0.5 / (((_2503 * ((_2502 * _2535) + _2488)) + 9.9999999392252902907785028219223e-09) + (((_2503 * _2535) + _2488) * _2502))) * _2502;
    float _4572 = isnan(0.0) ? _2546 : (isnan(_2546) ? 0.0 : max(_2546, 0.0));
    float _2548 = (isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0))) * (_2512 / ((_2516 * _2516) * 3.141590118408203125));
    uint _2562 = _2226 + 9u;
    float _2573 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2267].w)) * _759) * 0.949999988079071044921875);
    float _2574 = _2573 * _2573;
    float _2575 = cbLight._m0[_2267].x + _836;
    float _2576 = cbLight._m0[_2267].y + _837;
    float _2577 = cbLight._m0[_2267].z + _838;
    float _2581 = inversesqrt(dot(vec3(_2575, _2576, _2577), vec3(_2575, _2576, _2577)));
    float _2582 = _2581 * _2575;
    float _2583 = _2581 * _2576;
    float _2584 = _2581 * _2577;
    float _2585 = dot(vec3(_756, _757, _758), vec3(cbLight._m0[_2267].xyz));
    float _4583 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
    float _2588 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
    float _2589 = dot(vec3(_756, _757, _758), vec3(_2582, _2583, _2584));
    float _4594 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
    float _2592 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
    float _2593 = dot(vec3(cbLight._m0[_2267].xyz), vec3(_2582, _2583, _2584));
    float _4605 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
    float _2597 = _2574 * _2574;
    float _2601 = ((_2592 * _2592) * (_2597 + (-1.0))) + 1.0;
    float _2608 = exp2(log2(1.0 - (isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0)))) * 5.0);
    float _2615 = 1.0 - _2574;
    float _2625 = (0.5 / (((_2503 * ((_2588 * _2615) + _2574)) + 9.9999999392252902907785028219223e-09) + (((_2503 * _2615) + _2574) * _2588))) * _2588;
    float _4616 = isnan(0.0) ? _2625 : (isnan(_2625) ? 0.0 : max(_2625, 0.0));
    float _2627 = (isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0))) * (_2597 / ((_2601 * _2601) * 3.141590118408203125));
    float _2637 = (((((_2608 * _2525) + _907) * cbLight._m0[_2562].x) * _2627) * _2249) + ((((cbLight._m0[_2474].x * _2215) * ((_2524 * _2525) + _907)) * _2548) * _2263);
    float _2638 = (((((_2608 * _2527) + _909) * cbLight._m0[_2562].y) * _2627) * _2249) + ((((cbLight._m0[_2474].y * _2217) * ((_2524 * _2527) + _909)) * _2548) * _2263);
    float _2639 = (((((_2608 * _2528) + _910) * cbLight._m0[_2562].z) * _2627) * _2249) + ((((cbLight._m0[_2474].z * _2219) * ((_2524 * _2528) + _910)) * _2548) * _2263);
    float _2695;
    float _2697;
    float _2699;
    if (_2303)
    {
        _2695 = _2637;
        _2697 = _2638;
        _2699 = _2639;
    }
    else
    {
        uint _2701 = _2226 + 2u;
        uint _2705 = _2226 + 10u;
        float _2719 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2701].w)) * _759) * 0.949999988079071044921875);
        float _2720 = _2719 * _2719;
        float _2721 = cbLight._m0[_2701].x + _836;
        float _2722 = cbLight._m0[_2701].y + _837;
        float _2723 = cbLight._m0[_2701].z + _838;
        float _2727 = inversesqrt(dot(vec3(_2721, _2722, _2723), vec3(_2721, _2722, _2723)));
        float _2728 = _2727 * _2721;
        float _2729 = _2727 * _2722;
        float _2730 = _2727 * _2723;
        float _2731 = dot(vec3(_756, _757, _758), vec3(cbLight._m0[_2701].xyz));
        float _4627 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
        float _2734 = isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0));
        float _2735 = dot(vec3(_756, _757, _758), vec3(_2728, _2729, _2730));
        float _4638 = isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0));
        float _2738 = isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0));
        float _2739 = dot(vec3(cbLight._m0[_2701].xyz), vec3(_2728, _2729, _2730));
        float _4649 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
        float _2743 = _2720 * _2720;
        float _2747 = ((_2738 * _2738) * (_2743 + (-1.0))) + 1.0;
        float _2754 = exp2(log2(1.0 - (isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0)))) * 5.0);
        float _2761 = 1.0 - _2720;
        float _2771 = (0.5 / (((_2503 * ((_2734 * _2761) + _2720)) + 9.9999999392252902907785028219223e-09) + (((_2503 * _2761) + _2720) * _2734))) * _2734;
        float _4660 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
        float _2773 = (isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0))) * (_2743 / ((_2747 * _2747) * 3.141590118408203125));
        float _2774 = isnan(1.0) ? _2241 : (isnan(_2241) ? 1.0 : min(_2241, 1.0));
        _2695 = (((((_2754 * _2525) + _907) * cbLight._m0[_2705].x) * _2773) * _2774) + _2637;
        _2697 = (((((_2754 * _2527) + _909) * cbLight._m0[_2705].y) * _2773) * _2774) + _2638;
        _2699 = (((((_2754 * _2528) + _910) * cbLight._m0[_2705].z) * _2773) * _2774) + _2639;
    }
    float _2805;
    float _2807;
    float _2809;
    if (_2412)
    {
        _2805 = _2695;
        _2807 = _2697;
        _2809 = _2699;
    }
    else
    {
        uint _2816 = _2226 + 3u;
        uint _2820 = _2226 + 11u;
        float _2834 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2816].w)) * _759) * 0.949999988079071044921875);
        float _2835 = _2834 * _2834;
        float _2836 = cbLight._m0[_2816].x + _836;
        float _2837 = cbLight._m0[_2816].y + _837;
        float _2838 = cbLight._m0[_2816].z + _838;
        float _2842 = inversesqrt(dot(vec3(_2836, _2837, _2838), vec3(_2836, _2837, _2838)));
        float _2843 = _2842 * _2836;
        float _2844 = _2842 * _2837;
        float _2845 = _2842 * _2838;
        float _2846 = dot(vec3(_756, _757, _758), vec3(cbLight._m0[_2816].xyz));
        float _4676 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
        float _2849 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
        float _2850 = dot(vec3(_756, _757, _758), vec3(_2843, _2844, _2845));
        float _4687 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
        float _2853 = isnan(1.0) ? _4687 : (isnan(_4687) ? 1.0 : min(_4687, 1.0));
        float _2854 = dot(vec3(cbLight._m0[_2816].xyz), vec3(_2843, _2844, _2845));
        float _4698 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
        float _2858 = _2835 * _2835;
        float _2862 = ((_2853 * _2853) * (_2858 + (-1.0))) + 1.0;
        float _2869 = exp2(log2(1.0 - (isnan(1.0) ? _4698 : (isnan(_4698) ? 1.0 : min(_4698, 1.0)))) * 5.0);
        float _2876 = 1.0 - _2835;
        float _2886 = (0.5 / (((_2503 * ((_2849 * _2876) + _2835)) + 9.9999999392252902907785028219223e-09) + (((_2503 * _2876) + _2835) * _2849))) * _2849;
        float _4709 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
        float _2888 = (isnan(1.0) ? _4709 : (isnan(_4709) ? 1.0 : min(_4709, 1.0))) * (_2858 / ((_2862 * _2862) * 3.141590118408203125));
        float _2889 = isnan(1.0) ? _2242 : (isnan(_2242) ? 1.0 : min(_2242, 1.0));
        _2805 = (((((_2869 * _2525) + _907) * cbLight._m0[_2820].x) * _2888) * _2889) + _2695;
        _2807 = (((((_2869 * _2527) + _909) * cbLight._m0[_2820].y) * _2888) * _2889) + _2697;
        _2809 = (((((_2869 * _2528) + _910) * cbLight._m0[_2820].z) * _2888) * _2889) + _2699;
    }
    float _2955;
    float _2957;
    float _2959;
    float _2961;
    float _2963;
    float _2965;
    if (_2224.y == 0u)
    {
        uvec4 _2910 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2911 = _2910.x;
        uint _2922 = uint((float(_2910.y) * floor(float(uint(cbSceneParam._m0[85u].y * _845) / _2911))) + floor(float(uint(cbSceneParam._m0[85u].x * _844) / _2911)));
        float _2932 = (log2(_2002 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2933 = isnan(0.0) ? _2932 : (isnan(_2932) ? 0.0 : max(_2932, 0.0));
        uint _2936 = uint(isnan(14.0) ? _2933 : (isnan(_2933) ? 14.0 : min(_2933, 14.0)));
        uvec4 _2941 = texelFetch(g_lightClusterGridBuffer, int(((_2936 << 2u) + (_2922 << 6u)) >> 2u));
        uint _2942 = _2941.x;
        uint _2943 = _2910.z;
        float _3022;
        float _3024;
        float _3026;
        float _3028;
        float _3030;
        float _3032;
        if (((((1u << ((_2943 >> 4u) & 15u)) + 4294967295u) & _2942) == 0u) || ((_2943 & 240u) == 0u))
        {
            _3022 = 0.0;
            _3024 = 0.0;
            _3026 = 0.0;
            _3028 = 0.0;
            _3030 = 0.0;
            _3032 = 0.0;
        }
        else
        {
            float _3023;
            float _3025;
            float _3027;
            float _3029;
            float _3031;
            float _3033;
            float _3167 = 0.0;
            float _3168 = 0.0;
            float _3169 = 0.0;
            float _3170 = 0.0;
            float _3171 = 0.0;
            float _3172 = 0.0;
            uint _3173 = 0u;
            uint _3182;
            bool _3183;
            for (;;)
            {
                _3182 = texelFetch(g_lightClassification, int((((_2936 << 5u) + (_2922 << 9u)) + (_3173 << 2u)) >> 2u)).x;
                _3183 = _3182 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3183)
                {
                    frontier_phi_66_pred = _3172;
                    frontier_phi_66_pred_1 = _3171;
                    frontier_phi_66_pred_2 = _3170;
                    frontier_phi_66_pred_3 = _3169;
                    frontier_phi_66_pred_4 = _3168;
                    frontier_phi_66_pred_5 = _3167;
                }
                else
                {
                    float _3291;
                    float _3292;
                    float _3293;
                    float _3294;
                    float _3295;
                    float _3296;
                    uint _3297;
                    _3291 = _3167;
                    _3292 = _3168;
                    _3293 = _3169;
                    _3294 = _3170;
                    _3295 = _3171;
                    _3296 = _3172;
                    _3297 = _3182;
                    float _3223;
                    float _3224;
                    float _3225;
                    float _3226;
                    float _3227;
                    float _3228;
                    for (;;)
                    {
                        uint _3301 = uint(findLSB(_3297)) + (_3173 << 5u);
                        uint _3298 = (_3297 + 4294967295u) & _3297;
                        uint _3303 = _3301 * 48u;
                        vec4 _3317 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3303)).x, texelFetch(g_PointLightRenderingBuffer, int(_3303 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3303 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3303 + 3u)).x));
                        uint _3323 = (_3301 * 48u) + 4u;
                        vec4 _3336 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3323)).x, texelFetch(g_PointLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3323 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3323 + 3u)).x));
                        uint _3342 = (_3301 * 48u) + 8u;
                        vec3 _3353 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3342)).x, texelFetch(g_PointLightRenderingBuffer, int(_3342 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3342 + 2u)).x));
                        float _3357 = _3317.x - _2000;
                        float _3358 = _3317.y - _2001;
                        float _3359 = _3317.z - _2002;
                        float _3360 = dot(vec3(_3357, _3358, _3359), vec3(_3357, _3358, _3359));
                        float _3363 = inversesqrt(_3360);
                        float _3364 = _3363 * _3357;
                        float _3365 = _3363 * _3358;
                        float _3366 = _3363 * _3359;
                        float _3367 = dot(vec3(_863, _866, _869), vec3(_3364, _3365, _3366));
                        float _3372 = 1.0 - (_3360 * _3317.w);
                        float _4735 = isnan(0.0) ? _3372 : (isnan(_3372) ? 0.0 : max(_3372, 0.0));
                        float _3373 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
                        float _3374 = sqrt(_3360) * _3336.w;
                        float _3377 = 1.39999997615814208984375 / (_3374 + 1.39999997615814208984375);
                        float _3378 = _3377 * _3377;
                        float _3381 = ((1.0 - _3378) * _3367) + _3378;
                        float _3384 = _3374 * _3374;
                        float _3388 = ((isnan(0.0) ? _3381 : (isnan(_3381) ? 0.0 : max(_3381, 0.0))) * _3373) / ((_3384 * 0.699999988079071044921875) + 1.0);
                        float _3392 = (-0.0) - _2000;
                        float _3393 = (-0.0) - _2001;
                        float _3394 = (-0.0) - _2002;
                        float _3398 = inversesqrt(dot(vec3(_3392, _3393, _3394), vec3(_3392, _3393, _3394)));
                        float _3399 = _3398 * _3392;
                        float _3400 = _3398 * _3393;
                        float _3401 = _3398 * _3394;
                        float _3408 = exp2(log2(1.0 / ((_3384 * 3.5) + 5.0)) * 0.25);
                        float _3409 = 1.0 - _938;
                        float _3416 = sqrt(1.0 - ((1.0 - (_3409 * _3409)) * (1.0 - (_3408 * _3408))));
                        float _3417 = _3416 * _3416;
                        float _3418 = _3417 * _3417;
                        float _3419 = _3399 + _3364;
                        float _3420 = _3400 + _3365;
                        float _3421 = _3401 + _3366;
                        float _3425 = inversesqrt(dot(vec3(_3419, _3420, _3421), vec3(_3419, _3420, _3421)));
                        float _3429 = dot(vec3(_863, _866, _869), vec3(_3399, _3400, _3401));
                        float _4751 = isnan(0.0) ? _3429 : (isnan(_3429) ? 0.0 : max(_3429, 0.0));
                        float _3432 = isnan(1.0) ? _4751 : (isnan(_4751) ? 1.0 : min(_4751, 1.0));
                        float _3433 = dot(vec3(_863, _866, _869), vec3(_3425 * _3419, _3425 * _3420, _3425 * _3421));
                        float _4762 = isnan(0.0) ? _3433 : (isnan(_3433) ? 0.0 : max(_3433, 0.0));
                        float _3436 = isnan(1.0) ? _4762 : (isnan(_4762) ? 1.0 : min(_4762, 1.0));
                        float _3440 = ((_3436 * _3436) * (_3418 + (-1.0))) + 1.0;
                        float _3441 = _3377 * _3417;
                        float _3442 = _3441 * _3441;
                        float _3445 = ((1.0 - _3442) * _3367) + _3442;
                        float _4773 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0));
                        float _3446 = isnan(1.0) ? _4773 : (isnan(_4773) ? 1.0 : min(_4773, 1.0));
                        float _3447 = 1.0 - _3417;
                        float _3457 = (0.5 / (((_3446 * ((_3432 * _3447) + _3417)) + 9.9999999392252902907785028219223e-09) + (((_3446 * _3447) + _3417) * _3432))) * _3446;
                        float _4784 = isnan(0.0) ? _3457 : (isnan(_3457) ? 0.0 : max(_3457, 0.0));
                        float _3468 = (((_3418 * 3.1415927410125732421875) * (isnan(1.0) ? _4784 : (isnan(_4784) ? 1.0 : min(_4784, 1.0)))) / ((_3440 * _3440) * ((_3384 * 2.1991131305694580078125) + 3.141590118408203125))) * _3373;
                        _3226 = (_3388 * _3336.x) + _3294;
                        _3227 = (_3388 * _3336.y) + _3295;
                        _3228 = (_3388 * _3336.z) + _3296;
                        _3223 = (_3468 * _3353.x) + _3291;
                        _3224 = (_3468 * _3353.y) + _3292;
                        _3225 = (_3468 * _3353.z) + _3293;
                        if (_3298 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3291 = _3223;
                            _3292 = _3224;
                            _3293 = _3225;
                            _3294 = _3226;
                            _3295 = _3227;
                            _3296 = _3228;
                            _3297 = _3298;
                        }
                    }
                    frontier_phi_66_pred = _3228;
                    frontier_phi_66_pred_1 = _3227;
                    frontier_phi_66_pred_2 = _3226;
                    frontier_phi_66_pred_3 = _3225;
                    frontier_phi_66_pred_4 = _3224;
                    frontier_phi_66_pred_5 = _3223;
                }
                _3033 = frontier_phi_66_pred;
                _3031 = frontier_phi_66_pred_1;
                _3029 = frontier_phi_66_pred_2;
                _3027 = frontier_phi_66_pred_3;
                _3025 = frontier_phi_66_pred_4;
                _3023 = frontier_phi_66_pred_5;
                uint _3174 = _3173 + 1u;
                if (_3174 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3167 = _3023;
                    _3168 = _3025;
                    _3169 = _3027;
                    _3170 = _3029;
                    _3171 = _3031;
                    _3172 = _3033;
                    _3173 = _3174;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3022 = _3023;
            _3024 = _3025;
            _3026 = _3027;
            _3028 = _3029;
            _3030 = _3031;
            _3032 = _3033;
        }
        uvec4 _3036 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3037 = _3036.z;
        uint _3039 = (_3037 >> 8u) & 15u;
        float _3135;
        float _3137;
        float _3139;
        float _3141;
        float _3143;
        float _3145;
        if (((4294967295u << _3039) & _2942) == 0u)
        {
            _3135 = _3022;
            _3137 = _3024;
            _3139 = _3026;
            _3141 = _3028;
            _3143 = _3030;
            _3145 = _3032;
        }
        else
        {
            float _3160 = inversesqrt(dot(vec3(_2000, _2001, _2002), vec3(_2000, _2001, _2002)));
            float _3161 = _3160 * _2000;
            float _3162 = _3160 * _2001;
            float _3163 = _3160 * _2002;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3039 < ((_3037 >> 12u) & 15u))
            {
                float _3136;
                float _3138;
                float _3140;
                float _3142;
                float _3144;
                float _3146;
                float _3274 = _3022;
                float _3275 = _3024;
                float _3276 = _3026;
                float _3277 = _3028;
                float _3278 = _3030;
                float _3279 = _3032;
                uint _3280 = _3039;
                uint _3289;
                bool _3290;
                for (;;)
                {
                    _3289 = texelFetch(g_lightClassification, int((((_2936 << 5u) + (_2922 << 9u)) + (_3280 << 2u)) >> 2u)).x;
                    _3290 = _3289 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3290)
                    {
                        frontier_phi_72_pred = _3279;
                        frontier_phi_72_pred_1 = _3278;
                        frontier_phi_72_pred_2 = _3277;
                        frontier_phi_72_pred_3 = _3276;
                        frontier_phi_72_pred_4 = _3275;
                        frontier_phi_72_pred_5 = _3274;
                    }
                    else
                    {
                        float _3473;
                        float _3474;
                        float _3475;
                        float _3476;
                        float _3477;
                        float _3478;
                        float _3767;
                        float _3768;
                        float _3769;
                        float _3770;
                        float _3771;
                        float _3772;
                        float _3486 = _3274;
                        float _3487 = _3275;
                        float _3488 = _3276;
                        float _3489 = _3277;
                        float _3490 = _3278;
                        float _3491 = _3279;
                        uint _3492 = _3289;
                        uint _3493;
                        vec4 _3518;
                        float _3519;
                        vec4 _3534;
                        vec3 _3546;
                        vec4 _3561;
                        vec4 _3576;
                        float _3623;
                        bool _3624;
                        for (;;)
                        {
                            uint _3503 = ((_3280 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3492));
                            _3493 = (_3492 + 4294967295u) & _3492;
                            uint _3505 = _3503 * 40u;
                            _3518 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3505)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3505 + 3u)).x));
                            _3519 = _3518.w;
                            uint _3521 = (_3503 * 40u) + 4u;
                            _3534 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3521)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3521 + 3u)).x));
                            uint _3536 = (_3503 * 40u) + 8u;
                            _3546 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3536)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3536 + 2u)).x));
                            uint _3548 = (_3503 * 40u) + 16u;
                            _3561 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3548)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3548 + 3u)).x));
                            uint _3563 = (_3503 * 40u) + 20u;
                            _3576 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3563)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3563 + 3u)).x));
                            uint _3579 = (_3503 * 40u) + 24u;
                            vec4 _3592 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3579)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3579 + 3u)).x));
                            uint _3598 = (_3503 * 40u) + 28u;
                            vec4 _3611 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3598)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3598 + 3u)).x));
                            _3623 = fma(_2002, _3611.z, fma(_2001, _3611.y, _3611.x * _2000)) + _3611.w;
                            _3624 = !((fma(_2002, _3592.z, fma(_2001, _3592.y, _3592.x * _2000)) + _3592.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3624)
                            {
                                float _3651 = _3518.x - _2000;
                                float _3652 = _3518.y - _2001;
                                float _3653 = _3518.z - _2002;
                                float _3654 = dot(vec3(_3651, _3652, _3653), vec3(_3651, _3652, _3653));
                                float _3657 = inversesqrt(_3654);
                                float _3658 = _3657 * _3651;
                                float _3659 = _3657 * _3652;
                                float _3660 = _3657 * _3653;
                                float _3664 = 1.0 - (_3654 / (_3519 * _3519));
                                float _4795 = isnan(0.0) ? _3664 : (isnan(_3664) ? 0.0 : max(_3664, 0.0));
                                float _3665 = isnan(1.0) ? _4795 : (isnan(_4795) ? 1.0 : min(_4795, 1.0));
                                float _3669 = sqrt(_3654) * _3534.w;
                                float _3671 = 1.39999997615814208984375 / (_3669 + 1.39999997615814208984375);
                                float _3672 = _3671 * _3671;
                                float _3675 = ((1.0 - _3672) * dot(vec3(_3658, _3659, _3660), vec3(_863, _866, _869))) + _3672;
                                float _3678 = _3669 * _3669;
                                float _3682 = (fma(_2002, _3561.z, fma(_2001, _3561.y, _3561.x * _2000)) + _3561.w) / _3623;
                                float _3683 = (fma(_2002, _3576.z, fma(_2001, _3576.y, _3576.x * _2000)) + _3576.w) / _3623;
                                float _3687 = 1.0 - dot(vec2(_3682, _3683), vec2(_3682, _3683));
                                float _4811 = isnan(0.0) ? _3687 : (isnan(_3687) ? 0.0 : max(_3687, 0.0));
                                float _3688 = isnan(1.0) ? _4811 : (isnan(_4811) ? 1.0 : min(_4811, 1.0));
                                float _3689 = _3688 * (((isnan(0.0) ? _3675 : (isnan(_3675) ? 0.0 : max(_3675, 0.0))) * _3665) / ((_3678 * 0.699999988079071044921875) + 1.0));
                                float _3701 = exp2(log2(1.0 / ((_3678 * 3.5) + 5.0)) * 0.25);
                                float _3702 = 1.0 - _938;
                                float _3709 = sqrt(1.0 - ((1.0 - (_3702 * _3702)) * (1.0 - (_3701 * _3701))));
                                float _3710 = _3709 * _3709;
                                float _3711 = _3710 * _3710;
                                float _3712 = _3658 - _3161;
                                float _3713 = _3659 - _3162;
                                float _3714 = _3660 - _3163;
                                float _3718 = inversesqrt(dot(vec3(_3712, _3713, _3714), vec3(_3712, _3713, _3714)));
                                float _3722 = dot(vec3(_863, _866, _869), vec3((-0.0) - _3161, (-0.0) - _3162, (-0.0) - _3163));
                                float _4822 = isnan(0.0) ? _3722 : (isnan(_3722) ? 0.0 : max(_3722, 0.0));
                                float _3725 = isnan(1.0) ? _4822 : (isnan(_4822) ? 1.0 : min(_4822, 1.0));
                                float _3726 = dot(vec3(_863, _866, _869), vec3(_3718 * _3712, _3718 * _3713, _3718 * _3714));
                                float _4833 = isnan(0.0) ? _3726 : (isnan(_3726) ? 0.0 : max(_3726, 0.0));
                                float _3729 = isnan(1.0) ? _4833 : (isnan(_4833) ? 1.0 : min(_4833, 1.0));
                                float _3733 = ((_3729 * _3729) * (_3711 + (-1.0))) + 1.0;
                                float _3734 = _3671 * _3710;
                                float _3735 = _3734 * _3734;
                                float _3741 = ((1.0 - _3735) * dot(vec3(_863, _866, _869), vec3(_3658, _3659, _3660))) + _3735;
                                float _4844 = isnan(0.0) ? _3741 : (isnan(_3741) ? 0.0 : max(_3741, 0.0));
                                float _3742 = isnan(1.0) ? _4844 : (isnan(_4844) ? 1.0 : min(_4844, 1.0));
                                float _3743 = 1.0 - _3710;
                                float _3753 = (0.5 / (((_3742 * ((_3725 * _3743) + _3710)) + 9.9999999392252902907785028219223e-09) + (((_3742 * _3743) + _3710) * _3725))) * _3742;
                                float _4855 = isnan(0.0) ? _3753 : (isnan(_3753) ? 0.0 : max(_3753, 0.0));
                                float _3763 = (_3688 * _3665) * (((_3711 * 3.1415927410125732421875) * (isnan(1.0) ? _4855 : (isnan(_4855) ? 1.0 : min(_4855, 1.0)))) / ((_3733 * _3733) * ((_3678 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3689 * _3534.y;
                                frontier_phi_78_pred_1 = _3689 * _3534.x;
                                frontier_phi_78_pred_2 = _3763 * _3546.z;
                                frontier_phi_78_pred_3 = _3763 * _3546.y;
                                frontier_phi_78_pred_4 = _3763 * _3546.x;
                                frontier_phi_78_pred_5 = _3689 * _3534.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3771 = frontier_phi_78_pred;
                            _3770 = frontier_phi_78_pred_1;
                            _3769 = frontier_phi_78_pred_2;
                            _3768 = frontier_phi_78_pred_3;
                            _3767 = frontier_phi_78_pred_4;
                            _3772 = frontier_phi_78_pred_5;
                            _3476 = _3770 + _3489;
                            _3477 = _3771 + _3490;
                            _3478 = _3772 + _3491;
                            _3473 = _3767 + _3486;
                            _3474 = _3768 + _3487;
                            _3475 = _3769 + _3488;
                            if (_3493 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3486 = _3473;
                                _3487 = _3474;
                                _3488 = _3475;
                                _3489 = _3476;
                                _3490 = _3477;
                                _3491 = _3478;
                                _3492 = _3493;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3478;
                        frontier_phi_72_pred_1 = _3477;
                        frontier_phi_72_pred_2 = _3476;
                        frontier_phi_72_pred_3 = _3475;
                        frontier_phi_72_pred_4 = _3474;
                        frontier_phi_72_pred_5 = _3473;
                    }
                    _3146 = frontier_phi_72_pred;
                    _3144 = frontier_phi_72_pred_1;
                    _3142 = frontier_phi_72_pred_2;
                    _3140 = frontier_phi_72_pred_3;
                    _3138 = frontier_phi_72_pred_4;
                    _3136 = frontier_phi_72_pred_5;
                    uint _3281 = _3280 + 1u;
                    if (_3281 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3274 = _3136;
                        _3275 = _3138;
                        _3276 = _3140;
                        _3277 = _3142;
                        _3278 = _3144;
                        _3279 = _3146;
                        _3280 = _3281;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3146;
                frontier_phi_60_61_ladder_1 = _3144;
                frontier_phi_60_61_ladder_2 = _3140;
                frontier_phi_60_61_ladder_3 = _3138;
                frontier_phi_60_61_ladder_4 = _3136;
                frontier_phi_60_61_ladder_5 = _3142;
            }
            else
            {
                frontier_phi_60_61_ladder = _3032;
                frontier_phi_60_61_ladder_1 = _3030;
                frontier_phi_60_61_ladder_2 = _3026;
                frontier_phi_60_61_ladder_3 = _3024;
                frontier_phi_60_61_ladder_4 = _3022;
                frontier_phi_60_61_ladder_5 = _3028;
            }
            _3135 = frontier_phi_60_61_ladder_4;
            _3137 = frontier_phi_60_61_ladder_3;
            _3139 = frontier_phi_60_61_ladder_2;
            _3141 = frontier_phi_60_61_ladder_5;
            _3143 = frontier_phi_60_61_ladder_1;
            _3145 = frontier_phi_60_61_ladder;
        }
        float _3150 = isnan(1.0) ? _922 : (isnan(_922) ? 1.0 : min(_922, 1.0));
        _2955 = (_3150 * _3141) + _2467;
        _2957 = (_3150 * _3143) + _2469;
        _2959 = (_3150 * _3145) + _2471;
        _2961 = ((_3135 * _907) * _3150) + _2805;
        _2963 = ((_3137 * _909) * _3150) + _2807;
        _2965 = ((_3139 * _910) * _3150) + _2809;
    }
    else
    {
        _2955 = _2467;
        _2957 = _2469;
        _2959 = _2471;
        _2961 = _2805;
        _2963 = _2807;
        _2965 = _2809;
    }
    float _4871 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _4882 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
    float _4893 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    uint _2985 = _882 + 6u;
    float _2993 = _844 / cbSceneParam._m0[86u].x;
    float _2994 = _845 / cbSceneParam._m0[86u].y;
    vec4 _3008 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2993, _2994, (log2((isnan(cbSceneParam._m0[77u].w) ? _779 : (isnan(_779) ? cbSceneParam._m0[77u].w : min(_779, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3010 = _3008.x;
    float _3011 = _3008.y;
    float _3012 = _3008.z;
    float _3013 = _3008.w;
    float _3085;
    float _3087;
    float _3089;
    float _3091;
    if (_779 > cbSceneParam._m0[78u].w)
    {
        float _3047 = isnan(_779) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _779 : min(cbSceneParam._m0[80u].w, _779));
        float _3048 = _3047 / _779;
        float _3059 = _3048 * _829;
        float _3060 = _830 * _3048;
        float _3061 = (-0.0) - _3060;
        float _3063 = _3048 * _831;
        float _3065 = (cbSceneParam._m0[77u].w * _3061) / _3047;
        float _3066 = _3065 + cbSceneParam._m0[79u].w;
        float _3067 = cbSceneParam._m0[79u].w - _3060;
        float _3073 = sqrt(((_3059 * _3059) + (_3060 * _3060)) + (_3063 * _3063));
        float _3076 = (1.0 - (cbSceneParam._m0[77u].w / _3047)) * _3073;
        float _3081 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3083 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3236;
        if (abs((_3061 - _3065) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3236 = ((((_3066 > 0.0) ? exp2(_3081 * _3066) : (2.0 - exp2(_3083 * _3066))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3076;
        }
        else
        {
            float _3196 = 1.0 / cbSceneParam._m0[80u].x;
            float _3197 = isnan(_3067) ? _3066 : (isnan(_3066) ? _3067 : max(_3066, _3067));
            float _3198 = isnan(_3067) ? _3066 : (isnan(_3066) ? _3067 : min(_3066, _3067));
            float _3207 = isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : min(_3197, 0.0));
            float _3208 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : min(_3198, 0.0));
            _3236 = ((abs(_3073 / _3061) * cbSceneParam._m0[80u].y) * ((((_3207 - _3208) * 2.0) - ((exp2(_3081 * (isnan(0.0) ? _3197 : (isnan(_3197) ? 0.0 : max(_3197, 0.0)))) - exp2(_3081 * (isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0))))) * _3196)) - ((exp2(_3083 * _3207) - exp2(_3083 * _3208)) * _3196))) + (_3076 * cbSceneParam._m0[80u].z);
        }
        vec4 _3238 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2993, _2994, 1.0), 0.0);
        float _3247 = exp2((_3236 * (-1.44269502162933349609375)) * (1.0 - _3238.w));
        float _3248 = log2(_3247);
        float _3264 = log2(_3013);
        _3085 = (exp2(_3264 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3248 * cbSceneParam._m0[78u].x)) * _3238.x) / cbSceneParam._m0[78u].x)) + _3010;
        _3087 = (exp2(_3264 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3248 * cbSceneParam._m0[78u].y)) * _3238.y) / cbSceneParam._m0[78u].y)) + _3011;
        _3089 = (exp2(_3264 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3248 * cbSceneParam._m0[78u].z)) * _3238.z) / cbSceneParam._m0[78u].z)) + _3012;
        _3091 = _3247 * _3013;
    }
    else
    {
        _3085 = _3010;
        _3087 = _3011;
        _3089 = _3012;
        _3091 = _3013;
    }
    float _3103 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3104 = _3103 == 3.0;
    float _3105 = log2(_3091);
    float _3112 = exp2(_3105 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4871 : (isnan(_4871) ? 1.0 : min(_4871, 1.0))) * (_2955 + ((isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0))) * _922))) + ((_2961 + ((isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0))) * _1732)) * cbPerFrame._m0[3u].x));
    float _3113 = exp2(_3105 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4882 : (isnan(_4882) ? 1.0 : min(_4882, 1.0))) * (_2957 + ((isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0))) * _922))) + ((_2963 + ((isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0))) * _1732)) * cbPerFrame._m0[3u].x));
    float _3114 = exp2(_3105 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0))) * (_2959 + ((isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0))) * _922))) + ((_2965 + ((isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0))) * _1732)) * cbPerFrame._m0[3u].x));
    float _3123 = (_3103 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3123 * (_3104 ? _3112 : (_3112 + (cbSceneParam._m0[72u].w * _3085)));
    SV_Target.y = _3123 * (_3104 ? _3113 : (_3113 + (cbSceneParam._m0[72u].w * _3087)));
    SV_Target.z = _3123 * (_3104 ? _3114 : (_3114 + (cbSceneParam._m0[72u].w * _3089)));
    SV_Target.w = cbInstanceData._m0[_2985].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2985].w;
}


