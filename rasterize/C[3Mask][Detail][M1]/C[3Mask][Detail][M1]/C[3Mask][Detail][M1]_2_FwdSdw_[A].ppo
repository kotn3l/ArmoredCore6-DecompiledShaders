#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_20;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1375;
float _4041;
float _4042;
float _4043;
float _4044;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _266 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _272 = _266.x * cbMtdParam._m0[10u].x;
    float _273 = _266.y * cbMtdParam._m0[10u].y;
    float _274 = _266.z * cbMtdParam._m0[10u].z;
    vec4 _292 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _342 = cbMtdParam._m0[18u].y * texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x;
    float _353 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].x * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].y * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _342)) + 1.0;
    float _4053 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _354 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
    float _361 = (_354 * ((_292.x * cbMtdParam._m0[11u].x) - _272)) + _272;
    float _362 = (_354 * ((_292.y * cbMtdParam._m0[11u].y) - _273)) + _273;
    float _363 = (_354 * ((_292.z * cbMtdParam._m0[11u].z) - _274)) + _274;
    vec4 _381 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _408 = ((cbMtdParam._m0[17u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _342)) + 1.0;
    float _4064 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _409 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
    float _416 = (_409 * ((_381.x * cbMtdParam._m0[12u].x) - _361)) + _361;
    float _417 = (_409 * ((_381.y * cbMtdParam._m0[12u].y) - _362)) + _362;
    float _418 = (_409 * ((_381.z * cbMtdParam._m0[12u].z) - _363)) + _363;
    vec4 _435 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _460 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[18u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[18u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _342)) + 1.0;
    float _4075 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _461 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
    vec4 _489 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _497 = ((((_461 * ((_435.x * cbMtdParam._m0[13u].x) - _416)) + _416) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _489.x;
    float _500 = ((((_461 * ((_435.y * cbMtdParam._m0[13u].y) - _417)) + _417) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _489.y;
    float _503 = ((((_461 * ((_435.z * cbMtdParam._m0[13u].z) - _418)) + _418) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _489.z;
    vec4 _523 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _552 = (TEXCOORD_5.x - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.z) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.w) + cbTextureTilingScale._m0[18u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].z + 1.0);
    float _4086 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _553 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
    float _560 = (_553 * ((_523.x * cbMtdParam._m0[14u].x) - _497)) + _497;
    float _561 = (_553 * ((_523.y * cbMtdParam._m0[14u].y) - _500)) + _500;
    float _562 = (_553 * ((_523.z * cbMtdParam._m0[14u].z) - _503)) + _503;
    vec4 _575 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _577 = _575.x;
    float _595 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _577) * _354) + _577;
    float _612 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _595) * _409) + _595;
    float _629 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _612) * _461) + _612;
    float _631 = _629 - (_629 * TEXCOORD_5.x);
    vec4 _644 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _666 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _668 = _666.x;
    float _669 = _666.y;
    float _672 = cbMtdParam._m0[17u].y * _666.z;
    vec4 _684 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _693 = (((cbMtdParam._m0[17u].x * _684.z) - _672) * _354) + _672;
    vec4 _706 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _718 = (((cbMtdParam._m0[16u].w * _706.z) - _693) * _409) + _693;
    vec4 _731 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _740 = (((cbMtdParam._m0[16u].z * _731.z) - _718) * _461) + _718;
    float _745 = ((cbMtdParam._m0[16u].x * TEXCOORD_5.x) * ((_644.z * cbMtdParam._m0[17u].z) - _740)) + _740;
    float _750 = ((_684.x - _668) * _354) + _668;
    float _751 = ((_684.y - _669) * _354) + _669;
    float _756 = ((_706.x - _750) * _409) + _750;
    float _757 = ((_706.y - _751) * _409) + _751;
    float _766 = ((((_731.x - _756) * _461) + _756) * 2.0) + (-1.0);
    float _767 = ((((_731.y - _757) * _461) + _757) * 2.0) + (-1.0);
    float _768 = dot(vec2(_766, _767), vec2(_766, _767));
    float _4097 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _773 = sqrt(1.0 - (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))));
    float _779 = ((((_644.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[15u].y) + _766;
    float _780 = ((((_644.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[15u].y) + _767;
    float _783 = fma(_773, _236 * NORMAL.x, fma(_780, _243 * TANGENT.x, (_229 * _221) * _779));
    float _786 = fma(_773, _236 * NORMAL.y, fma(_780, _243 * TANGENT.y, (_229 * _222) * _779));
    float _789 = fma(_773, _236 * NORMAL.z, fma(_780, _243 * TANGENT.z, (_229 * _223) * _779));
    float _793 = inversesqrt(dot(vec3(_783, _786, _789), vec3(_783, _786, _789)));
    float _794 = _793 * _783;
    float _795 = _793 * _786;
    float _796 = _793 * _789;
    float _4108 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _797 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
    float _4119 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _4130 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _4141 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _4152 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _801 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
    float _817 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _857 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _867 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _857);
    float _868 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _857);
    float _869 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _857);
    float _873 = inversesqrt(dot(vec3(_867, _868, _869), vec3(_867, _868, _869)));
    float _874 = _867 * _873;
    float _875 = _868 * _873;
    float _876 = _869 * _873;
    vec4 _881 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _883 = _881.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1055 = sqrt(((_867 * _867) + (_868 * _868)) + (_869 * _869));
        float _1061 = (cbMatDynParam._m0[5u].x * _1055) + cbMatDynParam._m0[5u].y;
        float _4163 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1062 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _1066 = (cbMatDynParam._m0[5u].z * _1055) + cbMatDynParam._m0[5u].w;
        float _4174 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) - _1062)) + _1062) < ((_883 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _894 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _895 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _913 = fma(_796, cbSceneParam._m0[5u].z, fma(_795, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _794));
    float _916 = fma(_796, cbSceneParam._m0[6u].z, fma(_795, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _794));
    float _919 = fma(_796, cbSceneParam._m0[7u].z, fma(_795, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _794));
    uint _932 = uint(roundEven(NORMAL.w)) * 13u;
    uint _933 = _932 + 9u;
    uint _934 = _933 + uint(cbMatDynParam._m0[0u].w);
    float _940 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0)))) * cbInstanceData._m0[_934].x;
    float _941 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0)))) * cbInstanceData._m0[_934].y;
    float _942 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0)))) * cbInstanceData._m0[_934].z;
    float _4185 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _943 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
    float _4196 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _944 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
    float _4207 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
    float _945 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
    float _946 = 1.0 - _801;
    float _947 = _943 * _946;
    float _948 = _944 * _946;
    float _949 = _945 * _946;
    float _954 = (_943 + (-0.039999999105930328369140625)) * _801;
    float _955 = (_944 + (-0.039999999105930328369140625)) * _801;
    float _956 = (_945 + (-0.039999999105930328369140625)) * _801;
    float _957 = _954 + 0.039999999105930328369140625;
    float _959 = _955 + 0.039999999105930328369140625;
    float _960 = _956 + 0.039999999105930328369140625;
    vec4 _969 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _894, cbSceneParam._m0[86u].y * _895));
    float _972 = _969.x * TEXCOORD_5.w;
    float _973 = dot(vec3(_794, _795, _796), vec3(_874, _875, _876));
    float _976 = _973 * 2.0;
    float _980 = (_976 * _794) - _874;
    float _981 = (_976 * _795) - _875;
    float _982 = (_976 * _796) - _876;
    float _986 = abs(dot(vec3(_874, _875, _876), vec3(_794, _795, _796)));
    float _4218 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
    float _988 = sqrt(_797);
    float _1001 = exp2((_988 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_988 * 3.0));
    float _1007 = (1.0 - _1001) * ((_988 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1008 = _1001 * _988;
    float _1036 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1040 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1044 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1374;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    float _1387;
    float _1388;
    float _1389;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1099 = fma(_1044, cbModelParam._m0[26u].z, fma(_1040, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1036));
        float _1103 = fma(_1044, cbModelParam._m0[27u].z, fma(_1040, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1036));
        float _1107 = fma(_1044, cbModelParam._m0[28u].z, fma(_1040, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1036));
        float _1132 = _1036 + _794;
        float _1133 = _1040 + _795;
        float _1134 = _1044 + _796;
        float _1144 = fma(_1134, cbModelParam._m0[26u].z, fma(_1133, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1132)) - _1099;
        float _1145 = fma(_1134, cbModelParam._m0[27u].z, fma(_1133, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1132)) - _1103;
        float _1146 = fma(_1134, cbModelParam._m0[28u].z, fma(_1133, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1132)) - _1107;
        float _1150 = inversesqrt(dot(vec3(_1144, _1145, _1146), vec3(_1144, _1145, _1146)));
        float _1163 = ((_1150 * _1144) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1099 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1164 = ((_1150 * _1145) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1103 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1165 = ((_1150 * _1146) / cbModelParam._m0[34u].z) + ((((((_1107 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1168 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1175 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1182 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1189 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        float _1202 = exp2((_1168.w + (-0.5)) * 20.0) * 2.0;
        float _1203 = _1202 * (_1168.x + (-0.5));
        float _1204 = _1202 * (_1168.y + (-0.5));
        float _1205 = _1202 * (_1168.z + (-0.5));
        float _1212 = exp2((_1175.w + (-0.5)) * 20.0) * 2.0;
        float _1213 = _1212 * (_1175.x + (-0.5));
        float _1214 = _1212 * (_1175.y + (-0.5));
        float _1215 = _1212 * (_1175.z + (-0.5));
        float _1222 = exp2((_1182.w + (-0.5)) * 20.0) * 2.0;
        float _1223 = _1222 * (_1182.x + (-0.5));
        float _1224 = _1222 * (_1182.y + (-0.5));
        float _1225 = _1222 * (_1182.z + (-0.5));
        float _1232 = exp2((_1189.w + (-0.5)) * 20.0) * 2.0;
        float _1233 = _1232 * (_1189.x + (-0.5));
        float _1234 = _1232 * (_1189.y + (-0.5));
        float _1235 = _1232 * (_1189.z + (-0.5));
        float _1236 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1237 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1238 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1239 = _1203 * 0.5;
        float _1240 = _1213 * 0.5;
        float _1241 = _1223 * 0.5;
        float _1242 = dot(vec3(_1239, _1240, _1241), vec3(_1239, _1240, _1241));
        float _1247 = (_1242 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1242);
        float _1256 = (dot(vec3(_794, _795, _796), vec3(_1247 * _1239, _1247 * _1240, _1247 * _1241)) + 1.0) * 0.5;
        float _4244 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1266 = sqrt(((_1240 * _1240) + (_1239 * _1239)) + (_1241 * _1241)) / (_1236 + 9.9999997473787516355514526367188e-06);
        float _4255 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0));
        float _1268 = _1267 * 2.0;
        float _1272 = (1.0 - _1267) / (_1267 + 1.0);
        float _4266 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1273 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _1282 = ((((1.0 - _1273) * (_1268 + 2.0)) * exp2(log2(isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0))) * (_1268 + 1.0))) + _1273) * _1236;
        float _1283 = _1204 * 0.5;
        float _1284 = _1214 * 0.5;
        float _1285 = _1224 * 0.5;
        float _1286 = dot(vec3(_1283, _1284, _1285), vec3(_1283, _1284, _1285));
        float _1291 = (_1286 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1286);
        float _1299 = (dot(vec3(_794, _795, _796), vec3(_1291 * _1283, _1291 * _1284, _1291 * _1285)) + 1.0) * 0.5;
        float _4277 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1308 = sqrt(((_1284 * _1284) + (_1283 * _1283)) + (_1285 * _1285)) / (_1237 + 9.9999997473787516355514526367188e-06);
        float _4288 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0));
        float _1310 = _1309 * 2.0;
        float _1314 = (1.0 - _1309) / (_1309 + 1.0);
        float _4299 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _1324 = ((((1.0 - _1315) * (_1310 + 2.0)) * exp2(log2(isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0))) * (_1310 + 1.0))) + _1315) * _1237;
        float _1325 = _1205 * 0.5;
        float _1326 = _1215 * 0.5;
        float _1327 = _1225 * 0.5;
        float _1328 = dot(vec3(_1325, _1326, _1327), vec3(_1325, _1326, _1327));
        float _1333 = (_1328 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1328);
        float _1341 = (dot(vec3(_794, _795, _796), vec3(_1333 * _1325, _1333 * _1326, _1333 * _1327)) + 1.0) * 0.5;
        float _4310 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1350 = sqrt(((_1326 * _1326) + (_1325 * _1325)) + (_1327 * _1327)) / (_1238 + 9.9999997473787516355514526367188e-06);
        float _4321 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0));
        float _1352 = _1351 * 2.0;
        float _1356 = (1.0 - _1351) / (_1351 + 1.0);
        float _4332 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _1366 = ((((1.0 - _1357) * (_1352 + 2.0)) * exp2(log2(isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (_1352 + 1.0))) + _1357) * _1238;
        _1374 = _1205;
        _1376 = _1204;
        _1377 = _1203;
        _1378 = _1215;
        _1379 = _1214;
        _1380 = _1213;
        _1381 = _1225;
        _1382 = _1224;
        _1383 = _1223;
        _1384 = _1238;
        _1385 = _1237;
        _1386 = _1236;
        _1387 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0)));
        _1388 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1324 : (isnan(_1324) ? 0.0 : max(_1324, 0.0)));
        _1389 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0)));
    }
    else
    {
        _1374 = _1375;
        _1376 = _1375;
        _1377 = _1375;
        _1378 = _1375;
        _1379 = _1375;
        _1380 = _1375;
        _1381 = _1375;
        _1382 = _1375;
        _1383 = _1375;
        _1384 = _1375;
        _1385 = _1375;
        _1386 = _1375;
        _1387 = 0.0;
        _1388 = 0.0;
        _1389 = 0.0;
    }
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    float _1698;
    float _1699;
    float _1700;
    float _1701;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1418 = fma(_1044, cbModelParam._m0[30u].z, fma(_1040, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1036));
        float _1422 = fma(_1044, cbModelParam._m0[31u].z, fma(_1040, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1036));
        float _1426 = fma(_1044, cbModelParam._m0[32u].z, fma(_1040, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1036));
        float _1449 = _1036 + _794;
        float _1450 = _1040 + _795;
        float _1451 = _1044 + _796;
        float _1461 = fma(_1451, cbModelParam._m0[30u].z, fma(_1450, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1449)) - _1418;
        float _1462 = fma(_1451, cbModelParam._m0[31u].z, fma(_1450, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1449)) - _1422;
        float _1463 = fma(_1451, cbModelParam._m0[32u].z, fma(_1450, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1449)) - _1426;
        float _1467 = inversesqrt(dot(vec3(_1461, _1462, _1463), vec3(_1461, _1462, _1463)));
        float _1480 = ((_1467 * _1461) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1418 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1481 = ((_1467 * _1462) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1422 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1482 = ((_1467 * _1463) / cbModelParam._m0[35u].z) + ((((((_1426 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1484 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1480, _1481, _1482), 0.0);
        vec4 _1491 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1480, _1481, _1482), 0.0);
        vec4 _1498 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1480, _1481, _1482), 0.0);
        vec4 _1505 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1480, _1481, _1482), 0.0);
        float _1517 = exp2((_1484.w + (-0.5)) * 20.0) * 2.0;
        float _1518 = _1517 * (_1484.x + (-0.5));
        float _1519 = _1517 * (_1484.y + (-0.5));
        float _1520 = _1517 * (_1484.z + (-0.5));
        float _1527 = exp2((_1491.w + (-0.5)) * 20.0) * 2.0;
        float _1528 = _1527 * (_1491.x + (-0.5));
        float _1529 = _1527 * (_1491.y + (-0.5));
        float _1530 = _1527 * (_1491.z + (-0.5));
        float _1537 = exp2((_1498.w + (-0.5)) * 20.0) * 2.0;
        float _1538 = _1537 * (_1498.x + (-0.5));
        float _1539 = _1537 * (_1498.y + (-0.5));
        float _1540 = _1537 * (_1498.z + (-0.5));
        float _1547 = exp2((_1505.w + (-0.5)) * 20.0) * 2.0;
        float _1548 = _1547 * (_1505.x + (-0.5));
        float _1549 = _1547 * (_1505.y + (-0.5));
        float _1550 = _1547 * (_1505.z + (-0.5));
        float _1551 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1552 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1553 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1554 = _1518 * 0.5;
        float _1555 = _1528 * 0.5;
        float _1556 = _1538 * 0.5;
        float _1557 = dot(vec3(_1554, _1555, _1556), vec3(_1554, _1555, _1556));
        float _1562 = (_1557 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1557);
        float _1570 = (dot(vec3(_794, _795, _796), vec3(_1562 * _1554, _1562 * _1555, _1562 * _1556)) + 1.0) * 0.5;
        float _4373 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
        float _1579 = sqrt(((_1555 * _1555) + (_1554 * _1554)) + (_1556 * _1556)) / (_1551 + 9.9999997473787516355514526367188e-06);
        float _4384 = isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0));
        float _1580 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _1581 = _1580 * 2.0;
        float _1585 = (1.0 - _1580) / (_1580 + 1.0);
        float _4395 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1586 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
        float _1595 = ((((1.0 - _1586) * (_1581 + 2.0)) * exp2(log2(isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * (_1581 + 1.0))) + _1586) * _1551;
        float _1596 = _1519 * 0.5;
        float _1597 = _1529 * 0.5;
        float _1598 = _1539 * 0.5;
        float _1599 = dot(vec3(_1596, _1597, _1598), vec3(_1596, _1597, _1598));
        float _1604 = (_1599 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1599);
        float _1612 = (dot(vec3(_794, _795, _796), vec3(_1604 * _1596, _1604 * _1597, _1604 * _1598)) + 1.0) * 0.5;
        float _4406 = isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0));
        float _1621 = sqrt(((_1597 * _1597) + (_1596 * _1596)) + (_1598 * _1598)) / (_1552 + 9.9999997473787516355514526367188e-06);
        float _4417 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
        float _1622 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
        float _1623 = _1622 * 2.0;
        float _1627 = (1.0 - _1622) / (_1622 + 1.0);
        float _4428 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
        float _1628 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _1637 = ((((1.0 - _1628) * (_1623 + 2.0)) * exp2(log2(isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0))) * (_1623 + 1.0))) + _1628) * _1552;
        float _1638 = _1520 * 0.5;
        float _1639 = _1530 * 0.5;
        float _1640 = _1540 * 0.5;
        float _1641 = dot(vec3(_1638, _1639, _1640), vec3(_1638, _1639, _1640));
        float _1646 = (_1641 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1641);
        float _1654 = (dot(vec3(_794, _795, _796), vec3(_1646 * _1638, _1646 * _1639, _1646 * _1640)) + 1.0) * 0.5;
        float _4439 = isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0));
        float _1663 = sqrt(((_1639 * _1639) + (_1638 * _1638)) + (_1640 * _1640)) / (_1553 + 9.9999997473787516355514526367188e-06);
        float _4450 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
        float _1664 = isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0));
        float _1665 = _1664 * 2.0;
        float _1669 = (1.0 - _1664) / (_1664 + 1.0);
        float _4461 = isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0));
        float _1670 = isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0));
        float _1679 = ((((1.0 - _1670) * (_1665 + 2.0)) * exp2(log2(isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * (_1665 + 1.0))) + _1670) * _1553;
        _1687 = _1520;
        _1688 = _1519;
        _1689 = _1518;
        _1690 = _1530;
        _1691 = _1529;
        _1692 = _1528;
        _1693 = _1540;
        _1694 = _1539;
        _1695 = _1538;
        _1696 = _1553;
        _1697 = _1552;
        _1698 = _1551;
        _1699 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0)));
        _1700 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0)));
        _1701 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0)));
    }
    else
    {
        _1687 = _1375;
        _1688 = _1375;
        _1689 = _1375;
        _1690 = _1375;
        _1691 = _1375;
        _1692 = _1375;
        _1693 = _1375;
        _1694 = _1375;
        _1695 = _1375;
        _1696 = _1375;
        _1697 = _1375;
        _1698 = _1375;
        _1699 = 0.0;
        _1700 = 0.0;
        _1701 = 0.0;
    }
    float _1711 = (cbModelParam._m0[1u].x * (_1699 - _1387)) + _1387;
    float _1712 = (cbModelParam._m0[1u].x * (_1700 - _1388)) + _1388;
    float _1713 = (cbModelParam._m0[1u].x * (_1701 - _1389)) + _1389;
    float _1734 = fma(_1713, cbSceneParam._m0[89u].z, fma(_1712, cbSceneParam._m0[89u].y, _1711 * cbSceneParam._m0[89u].x));
    float _1737 = fma(_1713, cbSceneParam._m0[90u].z, fma(_1712, cbSceneParam._m0[90u].y, _1711 * cbSceneParam._m0[90u].x));
    float _1740 = fma(_1713, cbSceneParam._m0[91u].z, fma(_1712, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1711));
    float _1755 = _980 * 0.5;
    float _1756 = _981 * 0.5;
    float _1757 = _982 * 0.5;
    float _1758 = dot(vec4(_1755, _1756, _1757, 1.0), vec4(_1689, _1692, _1695, _1698));
    float _1761 = dot(vec4(_1755, _1756, _1757, 1.0), vec4(_1688, _1691, _1694, _1697));
    float _1764 = dot(vec4(_1755, _1756, _1757, 1.0), vec4(_1687, _1690, _1693, _1696));
    float _1798;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1771 = dot(vec4(_1755, _1756, _1757, 1.0), vec4(_1374, _1378, _1381, _1384));
        float _1775 = dot(vec4(_1755, _1756, _1757, 1.0), vec4(_1376, _1379, _1382, _1385));
        float _1779 = dot(vec4(_1755, _1756, _1757, 1.0), vec4(_1377, _1380, _1383, _1386));
        float _1786 = dot(vec4(cbModelParam._m0[39u]), vec4(_1755, _1756, _1757, 1.0));
        _1798 = dot(vec3(isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0)), isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0)), isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1786) ? 0.0 : (isnan(0.0) ? _1786 : max(0.0, _1786))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1798 = 1.0;
    }
    float _1809;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1800 = dot(vec4(cbModelParam._m0[40u]), vec4(_1755, _1756, _1757, 1.0));
        _1809 = dot(vec3(isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0)), isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0)), isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1800) ? 0.0 : (isnan(0.0) ? _1800 : max(0.0, _1800))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1809 = 1.0;
    }
    float _1813 = (_1809 * cbModelParam._m0[1u].x) + (_1798 * (1.0 - cbModelParam._m0[1u].x));
    float _1823 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _797);
    float _1824 = isnan(_1823) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1823 : min(cbModelParam._m0[25u].z, _1823));
    float _1904;
    float _1906;
    float _1908;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1871 = fma(_1044, cbModelParam._m0[13u].z, fma(_1040, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1036)) + cbModelParam._m0[13u].w;
        float _1875 = fma(_1044, cbModelParam._m0[14u].z, fma(_1040, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1036)) + cbModelParam._m0[14u].w;
        float _1879 = fma(_1044, cbModelParam._m0[15u].z, fma(_1040, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1036)) + cbModelParam._m0[15u].w;
        float _1882 = fma(_982, cbModelParam._m0[13u].z, fma(_981, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _980));
        float _1885 = fma(_982, cbModelParam._m0[14u].z, fma(_981, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _980));
        float _1888 = fma(_982, cbModelParam._m0[15u].z, fma(_981, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _980));
        float _1916;
        if (_1882 > 0.0)
        {
            _1916 = abs((1.0 - _1871) / _1882);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1882 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1871 + 1.0) / _1882);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1916 = frontier_phi_17_15_ladder;
        }
        float _2089;
        if (_1885 > 0.0)
        {
            _2089 = abs((1.0 - _1875) / _1885);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1885 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1875 + 1.0) / _1885);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2089 = frontier_phi_26_22_ladder;
        }
        float _2384;
        if (_1888 > 0.0)
        {
            _2384 = abs((1.0 - _1879) / _1888);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1888 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1879 + 1.0) / _1888);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2384 = frontier_phi_38_33_ladder;
        }
        float _2386 = isnan(_2089) ? _1916 : (isnan(_1916) ? _2089 : min(_1916, _2089));
        float _2387 = isnan(_2384) ? _2386 : (isnan(_2386) ? _2384 : min(_2386, _2384));
        float _2391 = (_2387 * _1882) + _1871;
        float _2392 = (_2387 * _1885) + _1875;
        float _2393 = (_2387 * _1888) + _1879;
        float _2394 = _2387 * 9.9999997473787516355514526367188e-05;
        float _2396 = (-1.0) - _2394;
        float _2398 = _2394 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2393 > _2398) || ((_2393 < _2396) || ((_2392 > _2398) || ((_2392 < _2396) || ((_2391 < _2396) || (_2391 > _2398))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2538 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2393, cbModelParam._m0[9u].z, fma(_2392, cbModelParam._m0[9u].y, _2391 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2393, cbModelParam._m0[10u].z, fma(_2392, cbModelParam._m0[10u].y, _2391 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2393, cbModelParam._m0[11u].z, fma(_2392, cbModelParam._m0[11u].y, _2391 * cbModelParam._m0[11u].x))), _1824);
            frontier_phi_16_38_ladder = _2538.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2538.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2538.x * cbModelParam._m0[1u].y;
        }
        _1904 = frontier_phi_16_38_ladder_2;
        _1906 = frontier_phi_16_38_ladder_1;
        _1908 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1892 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_980, _981, _982), _1824);
        _1904 = _1892.x * cbModelParam._m0[1u].y;
        _1906 = _1892.y * cbModelParam._m0[1u].y;
        _1908 = _1892.z * cbModelParam._m0[1u].y;
    }
    float _1912 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _797);
    float _1913 = isnan(_1912) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1912 : min(cbModelParam._m0[25u].w, _1912));
    float _2004;
    float _2006;
    float _2008;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1968 = fma(_1044, cbModelParam._m0[21u].z, fma(_1040, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1036)) + cbModelParam._m0[21u].w;
        float _1972 = fma(_1044, cbModelParam._m0[22u].z, fma(_1040, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1036)) + cbModelParam._m0[22u].w;
        float _1976 = fma(_1044, cbModelParam._m0[23u].z, fma(_1040, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1036)) + cbModelParam._m0[23u].w;
        float _1979 = fma(_982, cbModelParam._m0[21u].z, fma(_981, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _980));
        float _1982 = fma(_982, cbModelParam._m0[22u].z, fma(_981, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _980));
        float _1985 = fma(_982, cbModelParam._m0[23u].z, fma(_981, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _980));
        float _2094;
        if (_1979 > 0.0)
        {
            _2094 = abs((1.0 - _1968) / _1979);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1979 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1968 + 1.0) / _1979);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2094 = frontier_phi_28_24_ladder;
        }
        float _2411;
        if (_1982 > 0.0)
        {
            _2411 = abs((1.0 - _1972) / _1982);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1982 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1972 + 1.0) / _1982);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2411 = frontier_phi_40_35_ladder;
        }
        float _2749;
        if (_1985 > 0.0)
        {
            _2749 = abs((1.0 - _1976) / _1985);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1985 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1976 + 1.0) / _1985);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2749 = frontier_phi_50_47_ladder;
        }
        float _2751 = isnan(_2411) ? _2094 : (isnan(_2094) ? _2411 : min(_2094, _2411));
        float _2752 = isnan(_2749) ? _2751 : (isnan(_2751) ? _2749 : min(_2751, _2749));
        float _2756 = (_2752 * _1979) + _1968;
        float _2757 = (_2752 * _1982) + _1972;
        float _2758 = (_2752 * _1985) + _1976;
        float _2759 = _2752 * 9.9999997473787516355514526367188e-05;
        float _2760 = (-1.0) - _2759;
        float _2762 = _2759 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2758 > _2762) || ((_2758 < _2760) || ((_2757 > _2762) || ((_2757 < _2760) || ((_2756 < _2760) || (_2756 > _2762))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2880 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2758, cbModelParam._m0[17u].z, fma(_2757, cbModelParam._m0[17u].y, _2756 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2758, cbModelParam._m0[18u].z, fma(_2757, cbModelParam._m0[18u].y, _2756 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2758, cbModelParam._m0[19u].z, fma(_2757, cbModelParam._m0[19u].y, _2756 * cbModelParam._m0[19u].x))), _1913);
            frontier_phi_25_50_ladder = _2880.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2880.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2880.x * cbModelParam._m0[1u].z;
        }
        _2004 = frontier_phi_25_50_ladder_2;
        _2006 = frontier_phi_25_50_ladder_1;
        _2008 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1988 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_980, _981, _982), _1913);
        _2004 = _1988.x * cbModelParam._m0[1u].z;
        _2006 = _1988.y * cbModelParam._m0[1u].z;
        _2008 = _1988.z * cbModelParam._m0[1u].z;
    }
    float _2021 = (((_1007 * _957) + _1008) * _972) * ((cbModelParam._m0[1u].w * (_2004 - _1904)) + _1904);
    float _2023 = (((_1007 * _959) + _1008) * _972) * ((cbModelParam._m0[1u].w * (_2006 - _1906)) + _1906);
    float _2025 = (((_1007 * _960) + _1008) * _972) * ((cbModelParam._m0[1u].w * (_2008 - _1908)) + _1908);
    float _2028 = fma(_2025, cbSceneParam._m0[89u].z, fma(_2023, cbSceneParam._m0[89u].y, _2021 * cbSceneParam._m0[89u].x));
    float _2031 = fma(_2025, cbSceneParam._m0[90u].z, fma(_2023, cbSceneParam._m0[90u].y, _2021 * cbSceneParam._m0[90u].x));
    float _2034 = fma(_2025, cbSceneParam._m0[91u].z, fma(_2023, cbSceneParam._m0[91u].y, _2021 * cbSceneParam._m0[91u].x));
    float _2068 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2072 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2076 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2080 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2081 = _2068 / _2080;
    float _2082 = _2072 / _2080;
    float _2083 = _2076 / _2080;
    float _2230;
    float _2231;
    float _2232;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2110 = ((uint(_2083 > cbSceneParam._m0[59u].y) + uint(_2083 > cbSceneParam._m0[59u].x)) + uint(_2083 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2111 = _2110 + 43u;
        uint _2119 = _2110 + 44u;
        uint _2127 = _2110 + 45u;
        uint _2135 = _2110 + 46u;
        float _2146 = fma(_2080, cbSceneParam._m0[_2111].w, fma(_2076, cbSceneParam._m0[_2111].z, fma(_2072, cbSceneParam._m0[_2111].y, _2068 * cbSceneParam._m0[_2111].x)));
        float _2150 = fma(_2080, cbSceneParam._m0[_2119].w, fma(_2076, cbSceneParam._m0[_2119].z, fma(_2072, cbSceneParam._m0[_2119].y, _2068 * cbSceneParam._m0[_2119].x)));
        float _2158 = fma(_2080, cbSceneParam._m0[_2135].w, fma(_2076, cbSceneParam._m0[_2135].z, fma(_2072, cbSceneParam._m0[_2135].y, _2068 * cbSceneParam._m0[_2135].x)));
        float _2163 = cbSceneParam._m0[33u].z * _2158;
        float _2165 = cbSceneParam._m0[33u].w * _2158;
        float _2168 = fma(_2080, cbSceneParam._m0[_2127].w, fma(_2076, cbSceneParam._m0[_2127].z, fma(_2072, cbSceneParam._m0[_2127].y, _2068 * cbSceneParam._m0[_2127].x))) / _2158;
        float _2216 = (cbSceneParam._m0[33u].x - sqrt(((_2082 * _2082) + (_2081 * _2081)) + (_2083 * _2083))) * cbSceneParam._m0[33u].y;
        float _4587 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
        float _2223 = (isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2163 + _2146) / _2158, (_2165 + _2150) / _2158), _2168), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2165 + _2146) / _2158, (_2150 - _2163) / _2158), _2168), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2146 - _2163) / _2158, (_2150 - _2165) / _2158), _2168), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2146 - _2165) / _2158, (_2163 + _2150) / _2158), _2168), 0.0)).x), vec4(0.25)));
        _2230 = 1.0 - (_2223 * cbSceneParam._m0[34u].x);
        _2231 = 1.0 - (_2223 * cbSceneParam._m0[34u].y);
        _2232 = 1.0 - (_2223 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2230 = 1.0;
        _2231 = 1.0;
        _2232 = 1.0;
    }
    float _2296;
    float _2298;
    float _2300;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2284 = fma(_2080, cbSceneParam._m0[63u].w, fma(_2076, cbSceneParam._m0[63u].z, fma(_2072, cbSceneParam._m0[63u].y, _2068 * cbSceneParam._m0[63u].x)));
        float _2285 = fma(_2080, cbSceneParam._m0[60u].w, fma(_2076, cbSceneParam._m0[60u].z, fma(_2072, cbSceneParam._m0[60u].y, _2068 * cbSceneParam._m0[60u].x))) / _2284;
        float _2286 = fma(_2080, cbSceneParam._m0[61u].w, fma(_2076, cbSceneParam._m0[61u].z, fma(_2072, cbSceneParam._m0[61u].y, _2068 * cbSceneParam._m0[61u].x))) / _2284;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2285 >= cbSceneParam._m0[64u].x) && (_2286 >= cbSceneParam._m0[64u].y)) && (_2285 <= cbSceneParam._m0[64u].z)) && (_2286 <= cbSceneParam._m0[64u].w))
        {
            float _2424 = fma(_2080, cbSceneParam._m0[62u].w, fma(_2076, cbSceneParam._m0[62u].z, fma(_2072, cbSceneParam._m0[62u].y, _2068 * cbSceneParam._m0[62u].x))) / _2284;
            float _2428 = isnan(cbSceneParam._m0[41u].w) ? _2424 : (isnan(_2424) ? cbSceneParam._m0[41u].w : max(_2424, cbSceneParam._m0[41u].w));
            float _2471 = (cbSceneParam._m0[33u].x - sqrt(((_2082 * _2082) + (_2081 * _2081)) + (_2083 * _2083))) * cbSceneParam._m0[33u].y;
            float _4603 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
            float _2478 = (isnan(1.0) ? _4603 : (isnan(_4603) ? 1.0 : min(_4603, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2285, cbSceneParam._m0[33u].w + _2286), _2428), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2285, _2286 - cbSceneParam._m0[33u].z), _2428), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2285 - cbSceneParam._m0[33u].z, _2286 - cbSceneParam._m0[33u].w), _2428), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2285 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2286), _2428), 0.0)).x), vec4(0.25)));
            float _2482 = 1.0 - (_2478 * cbSceneParam._m0[34u].x);
            float _2483 = 1.0 - (_2478 * cbSceneParam._m0[34u].y);
            float _2484 = 1.0 - (_2478 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2484) ? _2232 : (isnan(_2232) ? _2484 : min(_2232, _2484));
            frontier_phi_37_36_ladder_1 = isnan(_2483) ? _2231 : (isnan(_2231) ? _2483 : min(_2231, _2483));
            frontier_phi_37_36_ladder_2 = isnan(_2482) ? _2230 : (isnan(_2230) ? _2482 : min(_2230, _2482));
        }
        else
        {
            frontier_phi_37_36_ladder = _2232;
            frontier_phi_37_36_ladder_1 = _2231;
            frontier_phi_37_36_ladder_2 = _2230;
        }
        _2296 = frontier_phi_37_36_ladder_2;
        _2298 = frontier_phi_37_36_ladder_1;
        _2300 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2296 = _2230;
        _2298 = _2231;
        _2300 = _2232;
    }
    uvec4 _2305 = floatBitsToUint(cbInstanceData._m0[_932 + 5u]);
    uint _2307 = _2305.x * 14u;
    uint _2308 = _2307 + 13u;
    float _2315 = _972 + (-1.0);
    float _2320 = (cbLight._m0[_2308].x * _2315) + 1.0;
    float _2321 = (cbLight._m0[_2308].y * _2315) + 1.0;
    float _2322 = (cbLight._m0[_2308].z * _2315) + 1.0;
    float _2323 = (cbLight._m0[_2308].w * _2315) + 1.0;
    uint _2324 = _2307 + 5u;
    float _2330 = isnan(1.0) ? _2321 : (isnan(_2321) ? 1.0 : min(_2321, 1.0));
    uint _2334 = _2307 + 4u;
    float _2343 = isnan(1.0) ? _2320 : (isnan(_2320) ? 1.0 : min(_2320, 1.0));
    uint _2347 = _2307 | 1u;
    float _2358 = dot(vec3(cbLight._m0[_2307].xyz), vec3(_794, _795, _796));
    float _2361 = dot(vec3(cbLight._m0[_2347].xyz), vec3(_794, _795, _796));
    float _4639 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
    float _4650 = isnan(0.0) ? _2361 : (isnan(_2361) ? 0.0 : max(_2361, 0.0));
    float _2366 = (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0))) * 0.3183098733425140380859375;
    float _2368 = (isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0))) * 0.3183098733425140380859375;
    float _2375 = ((cbLight._m0[_2324].x * _2330) * _2368) + (((cbLight._m0[_2334].x * _2296) * _2343) * _2366);
    float _2376 = ((_2330 * cbLight._m0[_2324].y) * _2368) + (((cbLight._m0[_2334].y * _2298) * _2343) * _2366);
    float _2377 = ((_2330 * cbLight._m0[_2324].z) * _2368) + (((cbLight._m0[_2334].z * _2300) * _2343) * _2366);
    uvec4 _2381 = floatBitsToUint(cbLight._m0[_2307 + 12u]);
    bool _2383 = _2381.x == 0u;
    float _2485;
    float _2487;
    float _2489;
    if (_2383)
    {
        _2485 = _2375;
        _2487 = _2376;
        _2489 = _2377;
    }
    else
    {
        uint _2493 = _2307 + 6u;
        float _2509 = (dot(vec3(cbLight._m0[_2307 + 2u].xyz), vec3(_794, _795, _796)) * 0.5) + 0.5;
        float _2510 = _2509 * _2509;
        float _4661 = isnan(0.0) ? _2510 : (isnan(_2510) ? 0.0 : max(_2510, 0.0));
        float _2511 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
        float _2512 = isnan(1.0) ? _2322 : (isnan(_2322) ? 1.0 : min(_2322, 1.0));
        _2485 = (((cbLight._m0[_2493].x * 0.3183098733425140380859375) * _2511) * _2512) + _2375;
        _2487 = (((cbLight._m0[_2493].y * 0.3183098733425140380859375) * _2511) * _2512) + _2376;
        _2489 = (((cbLight._m0[_2493].z * 0.3183098733425140380859375) * _2511) * _2512) + _2377;
    }
    bool _2492 = _2381.y == 0u;
    float _2547;
    float _2549;
    float _2551;
    if (_2492)
    {
        _2547 = _2485;
        _2549 = _2487;
        _2551 = _2489;
    }
    else
    {
        uint _2720 = _2307 + 7u;
        float _2736 = (dot(vec3(cbLight._m0[_2307 + 3u].xyz), vec3(_794, _795, _796)) * 0.5) + 0.5;
        float _2737 = _2736 * _2736;
        float _4677 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
        float _2738 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
        float _2739 = isnan(1.0) ? _2323 : (isnan(_2323) ? 1.0 : min(_2323, 1.0));
        _2547 = (((cbLight._m0[_2720].x * 0.3183098733425140380859375) * _2738) * _2739) + _2485;
        _2549 = (((cbLight._m0[_2720].y * 0.3183098733425140380859375) * _2738) * _2739) + _2487;
        _2551 = (((cbLight._m0[_2720].z * 0.3183098733425140380859375) * _2738) * _2739) + _2489;
    }
    uint _2554 = _2307 + 8u;
    float _2567 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2307].w)) * _797) * 0.949999988079071044921875);
    float _2568 = _2567 * _2567;
    float _2569 = cbLight._m0[_2307].x + _874;
    float _2570 = cbLight._m0[_2307].y + _875;
    float _2571 = cbLight._m0[_2307].z + _876;
    float _2575 = inversesqrt(dot(vec3(_2569, _2570, _2571), vec3(_2569, _2570, _2571)));
    float _2576 = _2575 * _2569;
    float _2577 = _2575 * _2570;
    float _2578 = _2575 * _2571;
    float _2579 = dot(vec3(_794, _795, _796), vec3(cbLight._m0[_2307].xyz));
    float _4693 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
    float _2582 = isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0));
    float _4704 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _2583 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
    float _2584 = dot(vec3(_794, _795, _796), vec3(_2576, _2577, _2578));
    float _4715 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
    float _2587 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
    float _2588 = dot(vec3(cbLight._m0[_2307].xyz), vec3(_2576, _2577, _2578));
    float _4726 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
    float _2592 = _2568 * _2568;
    float _2596 = ((_2587 * _2587) * (_2592 + (-1.0))) + 1.0;
    float _2604 = exp2(log2(1.0 - (isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0)))) * 5.0);
    float _2605 = 0.959999978542327880859375 - _954;
    float _2607 = 0.959999978542327880859375 - _955;
    float _2608 = 0.959999978542327880859375 - _956;
    float _2615 = 1.0 - _2568;
    float _2626 = (0.5 / (((_2583 * ((_2582 * _2615) + _2568)) + 9.9999999392252902907785028219223e-09) + (((_2583 * _2615) + _2568) * _2582))) * _2582;
    float _4737 = isnan(0.0) ? _2626 : (isnan(_2626) ? 0.0 : max(_2626, 0.0));
    float _2628 = (isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0))) * (_2592 / ((_2596 * _2596) * 3.141590118408203125));
    uint _2642 = _2307 + 9u;
    float _2653 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2347].w)) * _797) * 0.949999988079071044921875);
    float _2654 = _2653 * _2653;
    float _2655 = cbLight._m0[_2347].x + _874;
    float _2656 = cbLight._m0[_2347].y + _875;
    float _2657 = cbLight._m0[_2347].z + _876;
    float _2661 = inversesqrt(dot(vec3(_2655, _2656, _2657), vec3(_2655, _2656, _2657)));
    float _2662 = _2661 * _2655;
    float _2663 = _2661 * _2656;
    float _2664 = _2661 * _2657;
    float _2665 = dot(vec3(_794, _795, _796), vec3(cbLight._m0[_2347].xyz));
    float _4748 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
    float _2668 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
    float _2669 = dot(vec3(_794, _795, _796), vec3(_2662, _2663, _2664));
    float _4759 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
    float _2672 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
    float _2673 = dot(vec3(cbLight._m0[_2347].xyz), vec3(_2662, _2663, _2664));
    float _4770 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
    float _2677 = _2654 * _2654;
    float _2681 = ((_2672 * _2672) * (_2677 + (-1.0))) + 1.0;
    float _2688 = exp2(log2(1.0 - (isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0)))) * 5.0);
    float _2695 = 1.0 - _2654;
    float _2705 = (0.5 / (((_2583 * ((_2668 * _2695) + _2654)) + 9.9999999392252902907785028219223e-09) + (((_2583 * _2695) + _2654) * _2668))) * _2668;
    float _4781 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
    float _2707 = (isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0))) * (_2677 / ((_2681 * _2681) * 3.141590118408203125));
    float _2717 = (((((_2688 * _2605) + _957) * cbLight._m0[_2642].x) * _2707) * _2330) + ((((cbLight._m0[_2554].x * _2296) * ((_2604 * _2605) + _957)) * _2628) * _2343);
    float _2718 = (((((_2688 * _2607) + _959) * cbLight._m0[_2642].y) * _2707) * _2330) + ((((cbLight._m0[_2554].y * _2298) * ((_2604 * _2607) + _959)) * _2628) * _2343);
    float _2719 = (((((_2688 * _2608) + _960) * cbLight._m0[_2642].z) * _2707) * _2330) + ((((cbLight._m0[_2554].z * _2300) * ((_2604 * _2608) + _960)) * _2628) * _2343);
    float _2775;
    float _2777;
    float _2779;
    if (_2383)
    {
        _2775 = _2717;
        _2777 = _2718;
        _2779 = _2719;
    }
    else
    {
        uint _2781 = _2307 + 2u;
        uint _2785 = _2307 + 10u;
        float _2799 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2781].w)) * _797) * 0.949999988079071044921875);
        float _2800 = _2799 * _2799;
        float _2801 = cbLight._m0[_2781].x + _874;
        float _2802 = cbLight._m0[_2781].y + _875;
        float _2803 = cbLight._m0[_2781].z + _876;
        float _2807 = inversesqrt(dot(vec3(_2801, _2802, _2803), vec3(_2801, _2802, _2803)));
        float _2808 = _2807 * _2801;
        float _2809 = _2807 * _2802;
        float _2810 = _2807 * _2803;
        float _2811 = dot(vec3(_794, _795, _796), vec3(cbLight._m0[_2781].xyz));
        float _4792 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
        float _2814 = isnan(1.0) ? _4792 : (isnan(_4792) ? 1.0 : min(_4792, 1.0));
        float _2815 = dot(vec3(_794, _795, _796), vec3(_2808, _2809, _2810));
        float _4803 = isnan(0.0) ? _2815 : (isnan(_2815) ? 0.0 : max(_2815, 0.0));
        float _2818 = isnan(1.0) ? _4803 : (isnan(_4803) ? 1.0 : min(_4803, 1.0));
        float _2819 = dot(vec3(cbLight._m0[_2781].xyz), vec3(_2808, _2809, _2810));
        float _4814 = isnan(0.0) ? _2819 : (isnan(_2819) ? 0.0 : max(_2819, 0.0));
        float _2823 = _2800 * _2800;
        float _2827 = ((_2818 * _2818) * (_2823 + (-1.0))) + 1.0;
        float _2834 = exp2(log2(1.0 - (isnan(1.0) ? _4814 : (isnan(_4814) ? 1.0 : min(_4814, 1.0)))) * 5.0);
        float _2841 = 1.0 - _2800;
        float _2851 = (0.5 / (((_2583 * ((_2814 * _2841) + _2800)) + 9.9999999392252902907785028219223e-09) + (((_2583 * _2841) + _2800) * _2814))) * _2814;
        float _4825 = isnan(0.0) ? _2851 : (isnan(_2851) ? 0.0 : max(_2851, 0.0));
        float _2853 = (isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0))) * (_2823 / ((_2827 * _2827) * 3.141590118408203125));
        float _2854 = isnan(1.0) ? _2322 : (isnan(_2322) ? 1.0 : min(_2322, 1.0));
        _2775 = (((((_2834 * _2605) + _957) * cbLight._m0[_2785].x) * _2853) * _2854) + _2717;
        _2777 = (((((_2834 * _2607) + _959) * cbLight._m0[_2785].y) * _2853) * _2854) + _2718;
        _2779 = (((((_2834 * _2608) + _960) * cbLight._m0[_2785].z) * _2853) * _2854) + _2719;
    }
    float _2885;
    float _2887;
    float _2889;
    if (_2492)
    {
        _2885 = _2775;
        _2887 = _2777;
        _2889 = _2779;
    }
    else
    {
        uint _2896 = _2307 + 3u;
        uint _2900 = _2307 + 11u;
        float _2914 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2896].w)) * _797) * 0.949999988079071044921875);
        float _2915 = _2914 * _2914;
        float _2916 = cbLight._m0[_2896].x + _874;
        float _2917 = cbLight._m0[_2896].y + _875;
        float _2918 = cbLight._m0[_2896].z + _876;
        float _2922 = inversesqrt(dot(vec3(_2916, _2917, _2918), vec3(_2916, _2917, _2918)));
        float _2923 = _2922 * _2916;
        float _2924 = _2922 * _2917;
        float _2925 = _2922 * _2918;
        float _2926 = dot(vec3(_794, _795, _796), vec3(cbLight._m0[_2896].xyz));
        float _4841 = isnan(0.0) ? _2926 : (isnan(_2926) ? 0.0 : max(_2926, 0.0));
        float _2929 = isnan(1.0) ? _4841 : (isnan(_4841) ? 1.0 : min(_4841, 1.0));
        float _2930 = dot(vec3(_794, _795, _796), vec3(_2923, _2924, _2925));
        float _4852 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
        float _2933 = isnan(1.0) ? _4852 : (isnan(_4852) ? 1.0 : min(_4852, 1.0));
        float _2934 = dot(vec3(cbLight._m0[_2896].xyz), vec3(_2923, _2924, _2925));
        float _4863 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
        float _2938 = _2915 * _2915;
        float _2942 = ((_2933 * _2933) * (_2938 + (-1.0))) + 1.0;
        float _2949 = exp2(log2(1.0 - (isnan(1.0) ? _4863 : (isnan(_4863) ? 1.0 : min(_4863, 1.0)))) * 5.0);
        float _2956 = 1.0 - _2915;
        float _2966 = (0.5 / (((_2583 * ((_2929 * _2956) + _2915)) + 9.9999999392252902907785028219223e-09) + (((_2583 * _2956) + _2915) * _2929))) * _2929;
        float _4874 = isnan(0.0) ? _2966 : (isnan(_2966) ? 0.0 : max(_2966, 0.0));
        float _2968 = (isnan(1.0) ? _4874 : (isnan(_4874) ? 1.0 : min(_4874, 1.0))) * (_2938 / ((_2942 * _2942) * 3.141590118408203125));
        float _2969 = isnan(1.0) ? _2323 : (isnan(_2323) ? 1.0 : min(_2323, 1.0));
        _2885 = (((((_2949 * _2605) + _957) * cbLight._m0[_2900].x) * _2968) * _2969) + _2775;
        _2887 = (((((_2949 * _2607) + _959) * cbLight._m0[_2900].y) * _2968) * _2969) + _2777;
        _2889 = (((((_2949 * _2608) + _960) * cbLight._m0[_2900].z) * _2968) * _2969) + _2779;
    }
    float _3035;
    float _3037;
    float _3039;
    float _3041;
    float _3043;
    float _3045;
    if (_2305.y == 0u)
    {
        uvec4 _2990 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2991 = _2990.x;
        uint _3002 = uint((float(_2990.y) * floor(float(uint(cbSceneParam._m0[85u].y * _895) / _2991))) + floor(float(uint(cbSceneParam._m0[85u].x * _894) / _2991)));
        float _3012 = (log2(_2083 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3013 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
        uint _3016 = uint(isnan(14.0) ? _3013 : (isnan(_3013) ? 14.0 : min(_3013, 14.0)));
        uvec4 _3021 = texelFetch(g_lightClusterGridBuffer, int(((_3016 << 2u) + (_3002 << 6u)) >> 2u));
        uint _3022 = _3021.x;
        uint _3023 = _2990.z;
        float _3102;
        float _3104;
        float _3106;
        float _3108;
        float _3110;
        float _3112;
        if (((((1u << ((_3023 >> 4u) & 15u)) + 4294967295u) & _3022) == 0u) || ((_3023 & 240u) == 0u))
        {
            _3102 = 0.0;
            _3104 = 0.0;
            _3106 = 0.0;
            _3108 = 0.0;
            _3110 = 0.0;
            _3112 = 0.0;
        }
        else
        {
            float _3103;
            float _3105;
            float _3107;
            float _3109;
            float _3111;
            float _3113;
            float _3255 = 0.0;
            float _3256 = 0.0;
            float _3257 = 0.0;
            float _3258 = 0.0;
            float _3259 = 0.0;
            float _3260 = 0.0;
            uint _3261 = 0u;
            uint _3270;
            bool _3271;
            for (;;)
            {
                _3270 = texelFetch(g_lightClassification, int((((_3016 << 5u) + (_3002 << 9u)) + (_3261 << 2u)) >> 2u)).x;
                _3271 = _3270 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3271)
                {
                    frontier_phi_71_pred = _3260;
                    frontier_phi_71_pred_1 = _3259;
                    frontier_phi_71_pred_2 = _3258;
                    frontier_phi_71_pred_3 = _3257;
                    frontier_phi_71_pred_4 = _3256;
                    frontier_phi_71_pred_5 = _3255;
                }
                else
                {
                    float _3400;
                    float _3401;
                    float _3402;
                    float _3403;
                    float _3404;
                    float _3405;
                    uint _3406;
                    _3400 = _3255;
                    _3401 = _3256;
                    _3402 = _3257;
                    _3403 = _3258;
                    _3404 = _3259;
                    _3405 = _3260;
                    _3406 = _3270;
                    float _3327;
                    float _3328;
                    float _3329;
                    float _3330;
                    float _3331;
                    float _3332;
                    for (;;)
                    {
                        uint _3410 = uint(findLSB(_3406)) + (_3261 << 5u);
                        uint _3407 = (_3406 + 4294967295u) & _3406;
                        uint _3412 = _3410 * 48u;
                        vec4 _3426 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3412)).x, texelFetch(g_PointLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3412 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3412 + 3u)).x));
                        uint _3432 = (_3410 * 48u) + 4u;
                        vec4 _3445 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3432)).x, texelFetch(g_PointLightRenderingBuffer, int(_3432 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3432 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3432 + 3u)).x));
                        uint _3451 = (_3410 * 48u) + 8u;
                        vec3 _3462 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3451)).x, texelFetch(g_PointLightRenderingBuffer, int(_3451 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3451 + 2u)).x));
                        float _3466 = _3426.x - _2081;
                        float _3467 = _3426.y - _2082;
                        float _3468 = _3426.z - _2083;
                        float _3469 = dot(vec3(_3466, _3467, _3468), vec3(_3466, _3467, _3468));
                        float _3472 = inversesqrt(_3469);
                        float _3473 = _3472 * _3466;
                        float _3474 = _3472 * _3467;
                        float _3475 = _3472 * _3468;
                        float _3476 = dot(vec3(_913, _916, _919), vec3(_3473, _3474, _3475));
                        float _3481 = 1.0 - (_3469 * _3426.w);
                        float _4900 = isnan(0.0) ? _3481 : (isnan(_3481) ? 0.0 : max(_3481, 0.0));
                        float _3482 = isnan(1.0) ? _4900 : (isnan(_4900) ? 1.0 : min(_4900, 1.0));
                        float _3483 = sqrt(_3469) * _3445.w;
                        float _3486 = 1.39999997615814208984375 / (_3483 + 1.39999997615814208984375);
                        float _3487 = _3486 * _3486;
                        float _3490 = ((1.0 - _3487) * _3476) + _3487;
                        float _3493 = _3483 * _3483;
                        float _3497 = ((isnan(0.0) ? _3490 : (isnan(_3490) ? 0.0 : max(_3490, 0.0))) * _3482) / ((_3493 * 0.699999988079071044921875) + 1.0);
                        float _3501 = (-0.0) - _2081;
                        float _3502 = (-0.0) - _2082;
                        float _3503 = (-0.0) - _2083;
                        float _3507 = inversesqrt(dot(vec3(_3501, _3502, _3503), vec3(_3501, _3502, _3503)));
                        float _3508 = _3507 * _3501;
                        float _3509 = _3507 * _3502;
                        float _3510 = _3507 * _3503;
                        float _3517 = exp2(log2(1.0 / ((_3493 * 3.5) + 5.0)) * 0.25);
                        float _3518 = 1.0 - _988;
                        float _3525 = sqrt(1.0 - ((1.0 - (_3518 * _3518)) * (1.0 - (_3517 * _3517))));
                        float _3526 = _3525 * _3525;
                        float _3527 = _3526 * _3526;
                        float _3528 = _3508 + _3473;
                        float _3529 = _3509 + _3474;
                        float _3530 = _3510 + _3475;
                        float _3534 = inversesqrt(dot(vec3(_3528, _3529, _3530), vec3(_3528, _3529, _3530)));
                        float _3538 = dot(vec3(_913, _916, _919), vec3(_3508, _3509, _3510));
                        float _4916 = isnan(0.0) ? _3538 : (isnan(_3538) ? 0.0 : max(_3538, 0.0));
                        float _3541 = isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0));
                        float _3542 = dot(vec3(_913, _916, _919), vec3(_3534 * _3528, _3534 * _3529, _3534 * _3530));
                        float _4927 = isnan(0.0) ? _3542 : (isnan(_3542) ? 0.0 : max(_3542, 0.0));
                        float _3545 = isnan(1.0) ? _4927 : (isnan(_4927) ? 1.0 : min(_4927, 1.0));
                        float _3549 = ((_3545 * _3545) * (_3527 + (-1.0))) + 1.0;
                        float _3550 = _3486 * _3526;
                        float _3551 = _3550 * _3550;
                        float _3554 = ((1.0 - _3551) * _3476) + _3551;
                        float _4938 = isnan(0.0) ? _3554 : (isnan(_3554) ? 0.0 : max(_3554, 0.0));
                        float _3555 = isnan(1.0) ? _4938 : (isnan(_4938) ? 1.0 : min(_4938, 1.0));
                        float _3556 = 1.0 - _3526;
                        float _3566 = (0.5 / (((_3555 * ((_3541 * _3556) + _3526)) + 9.9999999392252902907785028219223e-09) + (((_3555 * _3556) + _3526) * _3541))) * _3555;
                        float _4949 = isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0));
                        float _3577 = (((_3527 * 3.1415927410125732421875) * (isnan(1.0) ? _4949 : (isnan(_4949) ? 1.0 : min(_4949, 1.0)))) / ((_3549 * _3549) * ((_3493 * 2.1991131305694580078125) + 3.141590118408203125))) * _3482;
                        _3330 = (_3497 * _3445.x) + _3403;
                        _3331 = (_3497 * _3445.y) + _3404;
                        _3332 = (_3497 * _3445.z) + _3405;
                        _3327 = (_3577 * _3462.x) + _3400;
                        _3328 = (_3577 * _3462.y) + _3401;
                        _3329 = (_3577 * _3462.z) + _3402;
                        if (_3407 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3400 = _3327;
                            _3401 = _3328;
                            _3402 = _3329;
                            _3403 = _3330;
                            _3404 = _3331;
                            _3405 = _3332;
                            _3406 = _3407;
                        }
                    }
                    frontier_phi_71_pred = _3332;
                    frontier_phi_71_pred_1 = _3331;
                    frontier_phi_71_pred_2 = _3330;
                    frontier_phi_71_pred_3 = _3329;
                    frontier_phi_71_pred_4 = _3328;
                    frontier_phi_71_pred_5 = _3327;
                }
                _3113 = frontier_phi_71_pred;
                _3111 = frontier_phi_71_pred_1;
                _3109 = frontier_phi_71_pred_2;
                _3107 = frontier_phi_71_pred_3;
                _3105 = frontier_phi_71_pred_4;
                _3103 = frontier_phi_71_pred_5;
                uint _3262 = _3261 + 1u;
                if (_3262 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3255 = _3103;
                    _3256 = _3105;
                    _3257 = _3107;
                    _3258 = _3109;
                    _3259 = _3111;
                    _3260 = _3113;
                    _3261 = _3262;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3102 = _3103;
            _3104 = _3105;
            _3106 = _3107;
            _3108 = _3109;
            _3110 = _3111;
            _3112 = _3113;
        }
        uvec4 _3116 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3117 = _3116.z;
        uint _3119 = (_3117 >> 8u) & 15u;
        float _3223;
        float _3225;
        float _3227;
        float _3229;
        float _3231;
        float _3233;
        if (((4294967295u << _3119) & _3022) == 0u)
        {
            _3223 = _3102;
            _3225 = _3104;
            _3227 = _3106;
            _3229 = _3108;
            _3231 = _3110;
            _3233 = _3112;
        }
        else
        {
            float _3248 = inversesqrt(dot(vec3(_2081, _2082, _2083), vec3(_2081, _2082, _2083)));
            float _3249 = _3248 * _2081;
            float _3250 = _3248 * _2082;
            float _3251 = _3248 * _2083;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3119 < ((_3117 >> 12u) & 15u))
            {
                float _3224;
                float _3226;
                float _3228;
                float _3230;
                float _3232;
                float _3234;
                float _3383 = _3102;
                float _3384 = _3104;
                float _3385 = _3106;
                float _3386 = _3108;
                float _3387 = _3110;
                float _3388 = _3112;
                uint _3389 = _3119;
                uint _3398;
                bool _3399;
                for (;;)
                {
                    _3398 = texelFetch(g_lightClassification, int((((_3016 << 5u) + (_3002 << 9u)) + (_3389 << 2u)) >> 2u)).x;
                    _3399 = _3398 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3399)
                    {
                        frontier_phi_82_pred = _3388;
                        frontier_phi_82_pred_1 = _3387;
                        frontier_phi_82_pred_2 = _3386;
                        frontier_phi_82_pred_3 = _3385;
                        frontier_phi_82_pred_4 = _3384;
                        frontier_phi_82_pred_5 = _3383;
                    }
                    else
                    {
                        float _3591;
                        float _3592;
                        float _3593;
                        float _3594;
                        float _3595;
                        float _3596;
                        float _3885;
                        float _3886;
                        float _3887;
                        float _3888;
                        float _3889;
                        float _3890;
                        float _3604 = _3383;
                        float _3605 = _3384;
                        float _3606 = _3385;
                        float _3607 = _3386;
                        float _3608 = _3387;
                        float _3609 = _3388;
                        uint _3610 = _3398;
                        uint _3611;
                        vec4 _3636;
                        float _3637;
                        vec4 _3652;
                        vec3 _3664;
                        vec4 _3679;
                        vec4 _3694;
                        float _3741;
                        bool _3742;
                        for (;;)
                        {
                            uint _3621 = ((_3389 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3610));
                            _3611 = (_3610 + 4294967295u) & _3610;
                            uint _3623 = _3621 * 40u;
                            _3636 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3623)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 3u)).x));
                            _3637 = _3636.w;
                            uint _3639 = (_3621 * 40u) + 4u;
                            _3652 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3639)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3639 + 3u)).x));
                            uint _3654 = (_3621 * 40u) + 8u;
                            _3664 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3654)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3654 + 2u)).x));
                            uint _3666 = (_3621 * 40u) + 16u;
                            _3679 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3666)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3666 + 3u)).x));
                            uint _3681 = (_3621 * 40u) + 20u;
                            _3694 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3681)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3681 + 3u)).x));
                            uint _3697 = (_3621 * 40u) + 24u;
                            vec4 _3710 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3697)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3697 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3697 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3697 + 3u)).x));
                            uint _3716 = (_3621 * 40u) + 28u;
                            vec4 _3729 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3716)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3716 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3716 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3716 + 3u)).x));
                            _3741 = fma(_2083, _3729.z, fma(_2082, _3729.y, _3729.x * _2081)) + _3729.w;
                            _3742 = !((fma(_2083, _3710.z, fma(_2082, _3710.y, _3710.x * _2081)) + _3710.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3742)
                            {
                                float _3769 = _3636.x - _2081;
                                float _3770 = _3636.y - _2082;
                                float _3771 = _3636.z - _2083;
                                float _3772 = dot(vec3(_3769, _3770, _3771), vec3(_3769, _3770, _3771));
                                float _3775 = inversesqrt(_3772);
                                float _3776 = _3775 * _3769;
                                float _3777 = _3775 * _3770;
                                float _3778 = _3775 * _3771;
                                float _3782 = 1.0 - (_3772 / (_3637 * _3637));
                                float _4960 = isnan(0.0) ? _3782 : (isnan(_3782) ? 0.0 : max(_3782, 0.0));
                                float _3783 = isnan(1.0) ? _4960 : (isnan(_4960) ? 1.0 : min(_4960, 1.0));
                                float _3787 = sqrt(_3772) * _3652.w;
                                float _3789 = 1.39999997615814208984375 / (_3787 + 1.39999997615814208984375);
                                float _3790 = _3789 * _3789;
                                float _3793 = ((1.0 - _3790) * dot(vec3(_3776, _3777, _3778), vec3(_913, _916, _919))) + _3790;
                                float _3796 = _3787 * _3787;
                                float _3800 = (fma(_2083, _3679.z, fma(_2082, _3679.y, _3679.x * _2081)) + _3679.w) / _3741;
                                float _3801 = (fma(_2083, _3694.z, fma(_2082, _3694.y, _3694.x * _2081)) + _3694.w) / _3741;
                                float _3805 = 1.0 - dot(vec2(_3800, _3801), vec2(_3800, _3801));
                                float _4976 = isnan(0.0) ? _3805 : (isnan(_3805) ? 0.0 : max(_3805, 0.0));
                                float _3806 = isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0));
                                float _3807 = _3806 * (((isnan(0.0) ? _3793 : (isnan(_3793) ? 0.0 : max(_3793, 0.0))) * _3783) / ((_3796 * 0.699999988079071044921875) + 1.0));
                                float _3819 = exp2(log2(1.0 / ((_3796 * 3.5) + 5.0)) * 0.25);
                                float _3820 = 1.0 - _988;
                                float _3827 = sqrt(1.0 - ((1.0 - (_3820 * _3820)) * (1.0 - (_3819 * _3819))));
                                float _3828 = _3827 * _3827;
                                float _3829 = _3828 * _3828;
                                float _3830 = _3776 - _3249;
                                float _3831 = _3777 - _3250;
                                float _3832 = _3778 - _3251;
                                float _3836 = inversesqrt(dot(vec3(_3830, _3831, _3832), vec3(_3830, _3831, _3832)));
                                float _3840 = dot(vec3(_913, _916, _919), vec3((-0.0) - _3249, (-0.0) - _3250, (-0.0) - _3251));
                                float _4987 = isnan(0.0) ? _3840 : (isnan(_3840) ? 0.0 : max(_3840, 0.0));
                                float _3843 = isnan(1.0) ? _4987 : (isnan(_4987) ? 1.0 : min(_4987, 1.0));
                                float _3844 = dot(vec3(_913, _916, _919), vec3(_3836 * _3830, _3836 * _3831, _3836 * _3832));
                                float _4998 = isnan(0.0) ? _3844 : (isnan(_3844) ? 0.0 : max(_3844, 0.0));
                                float _3847 = isnan(1.0) ? _4998 : (isnan(_4998) ? 1.0 : min(_4998, 1.0));
                                float _3851 = ((_3847 * _3847) * (_3829 + (-1.0))) + 1.0;
                                float _3852 = _3789 * _3828;
                                float _3853 = _3852 * _3852;
                                float _3859 = ((1.0 - _3853) * dot(vec3(_913, _916, _919), vec3(_3776, _3777, _3778))) + _3853;
                                float _5009 = isnan(0.0) ? _3859 : (isnan(_3859) ? 0.0 : max(_3859, 0.0));
                                float _3860 = isnan(1.0) ? _5009 : (isnan(_5009) ? 1.0 : min(_5009, 1.0));
                                float _3861 = 1.0 - _3828;
                                float _3871 = (0.5 / (((_3860 * ((_3843 * _3861) + _3828)) + 9.9999999392252902907785028219223e-09) + (((_3860 * _3861) + _3828) * _3843))) * _3860;
                                float _5020 = isnan(0.0) ? _3871 : (isnan(_3871) ? 0.0 : max(_3871, 0.0));
                                float _3881 = (_3806 * _3783) * (((_3829 * 3.1415927410125732421875) * (isnan(1.0) ? _5020 : (isnan(_5020) ? 1.0 : min(_5020, 1.0)))) / ((_3851 * _3851) * ((_3796 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3807 * _3652.z;
                                frontier_phi_88_pred_1 = _3807 * _3652.y;
                                frontier_phi_88_pred_2 = _3807 * _3652.x;
                                frontier_phi_88_pred_3 = _3881 * _3664.z;
                                frontier_phi_88_pred_4 = _3881 * _3664.y;
                                frontier_phi_88_pred_5 = _3881 * _3664.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3890 = frontier_phi_88_pred;
                            _3889 = frontier_phi_88_pred_1;
                            _3888 = frontier_phi_88_pred_2;
                            _3887 = frontier_phi_88_pred_3;
                            _3886 = frontier_phi_88_pred_4;
                            _3885 = frontier_phi_88_pred_5;
                            _3594 = _3888 + _3607;
                            _3595 = _3889 + _3608;
                            _3596 = _3890 + _3609;
                            _3591 = _3885 + _3604;
                            _3592 = _3886 + _3605;
                            _3593 = _3887 + _3606;
                            if (_3611 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3604 = _3591;
                                _3605 = _3592;
                                _3606 = _3593;
                                _3607 = _3594;
                                _3608 = _3595;
                                _3609 = _3596;
                                _3610 = _3611;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3596;
                        frontier_phi_82_pred_1 = _3595;
                        frontier_phi_82_pred_2 = _3594;
                        frontier_phi_82_pred_3 = _3593;
                        frontier_phi_82_pred_4 = _3592;
                        frontier_phi_82_pred_5 = _3591;
                    }
                    _3234 = frontier_phi_82_pred;
                    _3232 = frontier_phi_82_pred_1;
                    _3230 = frontier_phi_82_pred_2;
                    _3228 = frontier_phi_82_pred_3;
                    _3226 = frontier_phi_82_pred_4;
                    _3224 = frontier_phi_82_pred_5;
                    uint _3390 = _3389 + 1u;
                    if (_3390 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3383 = _3224;
                        _3384 = _3226;
                        _3385 = _3228;
                        _3386 = _3230;
                        _3387 = _3232;
                        _3388 = _3234;
                        _3389 = _3390;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3230;
                frontier_phi_63_64_ladder_1 = _3234;
                frontier_phi_63_64_ladder_2 = _3232;
                frontier_phi_63_64_ladder_3 = _3228;
                frontier_phi_63_64_ladder_4 = _3226;
                frontier_phi_63_64_ladder_5 = _3224;
            }
            else
            {
                frontier_phi_63_64_ladder = _3108;
                frontier_phi_63_64_ladder_1 = _3112;
                frontier_phi_63_64_ladder_2 = _3110;
                frontier_phi_63_64_ladder_3 = _3106;
                frontier_phi_63_64_ladder_4 = _3104;
                frontier_phi_63_64_ladder_5 = _3102;
            }
            _3223 = frontier_phi_63_64_ladder_5;
            _3225 = frontier_phi_63_64_ladder_4;
            _3227 = frontier_phi_63_64_ladder_3;
            _3229 = frontier_phi_63_64_ladder;
            _3231 = frontier_phi_63_64_ladder_2;
            _3233 = frontier_phi_63_64_ladder_1;
        }
        float _3238 = isnan(1.0) ? _972 : (isnan(_972) ? 1.0 : min(_972, 1.0));
        _3035 = (_3238 * _3229) + _2547;
        _3037 = (_3238 * _3231) + _2549;
        _3039 = (_3238 * _3233) + _2551;
        _3041 = ((_3223 * _957) * _3238) + _2885;
        _3043 = ((_3225 * _959) * _3238) + _2887;
        _3045 = ((_3227 * _960) * _3238) + _2889;
    }
    else
    {
        _3035 = _2547;
        _3037 = _2549;
        _3039 = _2551;
        _3041 = _2885;
        _3043 = _2887;
        _3045 = _2889;
    }
    float _5036 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _5047 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _5058 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _3062 = ((isnan(1.0) ? _5036 : (isnan(_5036) ? 1.0 : min(_5036, 1.0))) * (_3035 + ((isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0))) * _972))) + ((_3041 + ((isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0))) * _1813)) * cbPerFrame._m0[3u].x);
    float _3063 = ((isnan(1.0) ? _5047 : (isnan(_5047) ? 1.0 : min(_5047, 1.0))) * (_3037 + ((isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0))) * _972))) + ((_3043 + ((isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0))) * _1813)) * cbPerFrame._m0[3u].x);
    float _3064 = ((isnan(1.0) ? _5058 : (isnan(_5058) ? 1.0 : min(_5058, 1.0))) * (_3039 + ((isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0))) * _972))) + ((_3045 + ((isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0))) * _1813)) * cbPerFrame._m0[3u].x);
    uint _3065 = _932 + 6u;
    float _3073 = _894 / cbSceneParam._m0[86u].x;
    float _3074 = _895 / cbSceneParam._m0[86u].y;
    vec4 _3088 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3073, _3074, (log2((isnan(cbSceneParam._m0[77u].w) ? _817 : (isnan(_817) ? cbSceneParam._m0[77u].w : min(_817, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3090 = _3088.x;
    float _3091 = _3088.y;
    float _3092 = _3088.z;
    float _3093 = _3088.w;
    float _3165;
    float _3167;
    float _3169;
    float _3171;
    if (_817 > cbSceneParam._m0[78u].w)
    {
        float _3127 = isnan(_817) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _817 : min(cbSceneParam._m0[80u].w, _817));
        float _3128 = _3127 / _817;
        float _3139 = _3128 * _867;
        float _3140 = _868 * _3128;
        float _3141 = (-0.0) - _3140;
        float _3143 = _3128 * _869;
        float _3145 = (cbSceneParam._m0[77u].w * _3141) / _3127;
        float _3146 = _3145 + cbSceneParam._m0[79u].w;
        float _3147 = cbSceneParam._m0[79u].w - _3140;
        float _3153 = sqrt(((_3139 * _3139) + (_3140 * _3140)) + (_3143 * _3143));
        float _3156 = (1.0 - (cbSceneParam._m0[77u].w / _3127)) * _3153;
        float _3161 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3163 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3340;
        if (abs((_3141 - _3145) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3340 = ((((_3146 > 0.0) ? exp2(_3161 * _3146) : (2.0 - exp2(_3163 * _3146))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3156;
        }
        else
        {
            float _3284 = 1.0 / cbSceneParam._m0[80u].x;
            float _3285 = isnan(_3147) ? _3146 : (isnan(_3146) ? _3147 : max(_3146, _3147));
            float _3286 = isnan(_3147) ? _3146 : (isnan(_3146) ? _3147 : min(_3146, _3147));
            float _3295 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : min(_3285, 0.0));
            float _3296 = isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : min(_3286, 0.0));
            _3340 = ((abs(_3153 / _3141) * cbSceneParam._m0[80u].y) * ((((_3295 - _3296) * 2.0) - ((exp2(_3161 * (isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0)))) - exp2(_3161 * (isnan(0.0) ? _3286 : (isnan(_3286) ? 0.0 : max(_3286, 0.0))))) * _3284)) - ((exp2(_3163 * _3295) - exp2(_3163 * _3296)) * _3284))) + (_3156 * cbSceneParam._m0[80u].z);
        }
        vec4 _3342 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3073, _3074, 1.0), 0.0);
        float _3351 = exp2((_3340 * (-1.44269502162933349609375)) * (1.0 - _3342.w));
        float _3352 = log2(_3351);
        float _3368 = log2(_3093);
        _3165 = (exp2(_3368 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3352 * cbSceneParam._m0[78u].x)) * _3342.x) / cbSceneParam._m0[78u].x)) + _3090;
        _3167 = (exp2(_3368 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3352 * cbSceneParam._m0[78u].y)) * _3342.y) / cbSceneParam._m0[78u].y)) + _3091;
        _3169 = (exp2(_3368 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3352 * cbSceneParam._m0[78u].z)) * _3342.z) / cbSceneParam._m0[78u].z)) + _3092;
        _3171 = _3351 * _3093;
    }
    else
    {
        _3165 = _3090;
        _3167 = _3091;
        _3169 = _3092;
        _3171 = _3093;
    }
    bool _3378;
    vec4 _3181;
    vec4 _3203;
    float _3205;
    float _3209;
    float _3210;
    float _3211;
    float _3212;
    bool _3222;
    for (;;)
    {
        _3181 = cbMatDynParam._m0[0u];
        float _3183 = roundEven(_3181.y);
        bool _3184 = _3183 == 3.0;
        float _3185 = log2(_3171);
        float _3192 = exp2(_3185 * cbSceneParam._m0[78u].x) * _3062;
        float _3193 = exp2(_3185 * cbSceneParam._m0[78u].y) * _3063;
        float _3194 = exp2(_3185 * cbSceneParam._m0[78u].z) * _3064;
        float _3201 = _883 + (-0.5);
        _3203 = cbMtdParam._m0[1u];
        _3205 = _3203.y * _3201;
        float _3208 = (_3183 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3209 = _3208 * (_3184 ? _3192 : (_3192 + (cbSceneParam._m0[72u].w * _3165)));
        _3210 = _3208 * (_3184 ? _3193 : (_3193 + (cbSceneParam._m0[72u].w * _3167)));
        _3211 = _3208 * (_3184 ? _3194 : (_3194 + (cbSceneParam._m0[72u].w * _3169)));
        _3212 = _3201 * 0.999000012874603271484375;
        _3222 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3222)
        {
            if ((cbInstanceData._m0[_932 + 7u].x + _3212) < 0.5)
            {
                _3378 = true;
                break;
            }
        }
        uint _3319 = _933 + uint(_3181.w);
        if ((cbInstanceData._m0[_3319].w < 1.0) && ((cbInstanceData._m0[_3319].w + _3212) < 0.5))
        {
            _3378 = true;
            break;
        }
        if ((_3205 + 1.0) < _3203.x)
        {
            _3378 = true;
            break;
        }
        _3378 = false;
        break;
    }
    float _3582;
    if (_3378)
    {
        discard_state = true;
        _3582 = 0.0;
    }
    else
    {
        _3582 = cbInstanceData._m0[_3065].w;
    }
    SV_Target.x = _3209;
    SV_Target.y = _3210;
    SV_Target.z = _3211;
    SV_Target.w = _3582;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3065].w;
    discard_exit();
}


