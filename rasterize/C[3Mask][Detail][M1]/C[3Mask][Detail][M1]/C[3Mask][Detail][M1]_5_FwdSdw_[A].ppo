#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1260;
float _3927;
float _3928;
float _3929;
float _3930;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _207 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _208 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _209 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _215 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _222 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _229 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _252 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _258 = _252.x * cbMtdParam._m0[10u].x;
    float _259 = _252.y * cbMtdParam._m0[10u].y;
    float _260 = _252.z * cbMtdParam._m0[10u].z;
    vec4 _278 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _328 = cbMtdParam._m0[18u].y * texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x;
    float _339 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].x * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].y * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _328)) + 1.0;
    float _3939 = isnan(0.0) ? _339 : (isnan(_339) ? 0.0 : max(_339, 0.0));
    float _340 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _347 = (_340 * ((_278.x * cbMtdParam._m0[11u].x) - _258)) + _258;
    float _348 = (_340 * ((_278.y * cbMtdParam._m0[11u].y) - _259)) + _259;
    float _349 = (_340 * ((_278.z * cbMtdParam._m0[11u].z) - _260)) + _260;
    vec4 _367 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _394 = ((cbMtdParam._m0[17u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _328)) + 1.0;
    float _3950 = isnan(0.0) ? _394 : (isnan(_394) ? 0.0 : max(_394, 0.0));
    float _395 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _402 = (_395 * ((_367.x * cbMtdParam._m0[12u].x) - _347)) + _347;
    float _403 = (_395 * ((_367.y * cbMtdParam._m0[12u].y) - _348)) + _348;
    float _404 = (_395 * ((_367.z * cbMtdParam._m0[12u].z) - _349)) + _349;
    vec4 _421 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _446 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[18u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[18u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _328)) + 1.0;
    float _3961 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _447 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
    float _454 = (_447 * ((_421.x * cbMtdParam._m0[13u].x) - _402)) + _402;
    float _455 = (_447 * ((_421.y * cbMtdParam._m0[13u].y) - _403)) + _403;
    float _456 = (_447 * ((_421.z * cbMtdParam._m0[13u].z) - _404)) + _404;
    vec4 _469 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _471 = _469.x;
    float _489 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _471) * _340) + _471;
    float _507 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _489) * _395) + _489;
    float _524 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _507) * _447) + _507;
    vec4 _537 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _539 = _537.x;
    float _540 = _537.y;
    float _543 = cbMtdParam._m0[17u].y * _537.z;
    vec4 _555 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _564 = (((cbMtdParam._m0[17u].x * _555.z) - _543) * _340) + _543;
    vec4 _577 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _589 = (((cbMtdParam._m0[16u].w * _577.z) - _564) * _395) + _564;
    vec4 _602 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _611 = (((cbMtdParam._m0[16u].z * _602.z) - _589) * _447) + _589;
    vec4 _624 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _637 = ((_555.x - _539) * _340) + _539;
    float _638 = ((_555.y - _540) * _340) + _540;
    float _643 = ((_577.x - _637) * _395) + _637;
    float _644 = ((_577.y - _638) * _395) + _638;
    float _653 = ((((_602.x - _643) * _447) + _643) * 2.0) + (-1.0);
    float _654 = ((((_602.y - _644) * _447) + _644) * 2.0) + (-1.0);
    float _655 = dot(vec2(_653, _654), vec2(_653, _654));
    float _3972 = isnan(0.0) ? _655 : (isnan(_655) ? 0.0 : max(_655, 0.0));
    float _660 = sqrt(1.0 - (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0))));
    float _663 = (((_624.x * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _653;
    float _664 = (((_624.y * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _654;
    float _667 = fma(_660, _222 * NORMAL.x, fma(_664, _229 * TANGENT.x, (_215 * _207) * _663));
    float _670 = fma(_660, _222 * NORMAL.y, fma(_664, _229 * TANGENT.y, (_215 * _208) * _663));
    float _673 = fma(_660, _222 * NORMAL.z, fma(_664, _229 * TANGENT.z, (_215 * _209) * _663));
    float _677 = inversesqrt(dot(vec3(_667, _670, _673), vec3(_667, _670, _673)));
    float _678 = _677 * _667;
    float _679 = _677 * _670;
    float _680 = _677 * _673;
    float _3983 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _681 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
    float _3994 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _4005 = isnan(0.0) ? _455 : (isnan(_455) ? 0.0 : max(_455, 0.0));
    float _4016 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _4027 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _685 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
    float _701 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _741 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _751 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _741);
    float _752 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _741);
    float _753 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _741);
    float _757 = inversesqrt(dot(vec3(_751, _752, _753), vec3(_751, _752, _753)));
    float _758 = _751 * _757;
    float _759 = _752 * _757;
    float _760 = _753 * _757;
    vec4 _765 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _767 = _765.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _939 = sqrt(((_751 * _751) + (_752 * _752)) + (_753 * _753));
        float _945 = (cbMatDynParam._m0[5u].x * _939) + cbMatDynParam._m0[5u].y;
        float _4038 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
        float _946 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _950 = (cbMatDynParam._m0[5u].z * _939) + cbMatDynParam._m0[5u].w;
        float _4049 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0))) - _946)) + _946) < ((_767 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _778 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _779 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _797 = fma(_680, cbSceneParam._m0[5u].z, fma(_679, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _678));
    float _800 = fma(_680, cbSceneParam._m0[6u].z, fma(_679, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _678));
    float _803 = fma(_680, cbSceneParam._m0[7u].z, fma(_679, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _678));
    uint _816 = uint(roundEven(NORMAL.w)) * 13u;
    uint _817 = _816 + 9u;
    uint _818 = _817 + uint(cbMatDynParam._m0[0u].w);
    float _824 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0)))) * cbInstanceData._m0[_818].x;
    float _825 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0)))) * cbInstanceData._m0[_818].y;
    float _826 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0)))) * cbInstanceData._m0[_818].z;
    float _4060 = isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0));
    float _827 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _4071 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
    float _828 = isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0));
    float _4082 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
    float _829 = isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0));
    float _830 = 1.0 - _685;
    float _831 = _827 * _830;
    float _832 = _828 * _830;
    float _833 = _829 * _830;
    float _838 = (_827 + (-0.039999999105930328369140625)) * _685;
    float _839 = (_828 + (-0.039999999105930328369140625)) * _685;
    float _840 = (_829 + (-0.039999999105930328369140625)) * _685;
    float _841 = _838 + 0.039999999105930328369140625;
    float _843 = _839 + 0.039999999105930328369140625;
    float _844 = _840 + 0.039999999105930328369140625;
    vec4 _853 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _778, cbSceneParam._m0[86u].y * _779));
    float _856 = _853.x * TEXCOORD_5.w;
    float _857 = dot(vec3(_678, _679, _680), vec3(_758, _759, _760));
    float _860 = _857 * 2.0;
    float _864 = (_860 * _678) - _758;
    float _865 = (_860 * _679) - _759;
    float _866 = (_860 * _680) - _760;
    float _870 = abs(dot(vec3(_758, _759, _760), vec3(_678, _679, _680)));
    float _4093 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
    float _872 = sqrt(_681);
    float _885 = exp2((_872 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_872 * 3.0));
    float _891 = (1.0 - _885) * ((_872 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _892 = _885 * _872;
    float _920 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _924 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _928 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1259;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _984 = fma(_928, cbModelParam._m0[26u].z, fma(_924, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _920));
        float _988 = fma(_928, cbModelParam._m0[27u].z, fma(_924, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _920));
        float _992 = fma(_928, cbModelParam._m0[28u].z, fma(_924, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _920));
        float _1017 = _920 + _678;
        float _1018 = _924 + _679;
        float _1019 = _928 + _680;
        float _1029 = fma(_1019, cbModelParam._m0[26u].z, fma(_1018, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1017)) - _984;
        float _1030 = fma(_1019, cbModelParam._m0[27u].z, fma(_1018, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1017)) - _988;
        float _1031 = fma(_1019, cbModelParam._m0[28u].z, fma(_1018, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1017)) - _992;
        float _1035 = inversesqrt(dot(vec3(_1029, _1030, _1031), vec3(_1029, _1030, _1031)));
        float _1048 = ((_1035 * _1029) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_984 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1049 = ((_1035 * _1030) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_988 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1050 = ((_1035 * _1031) / cbModelParam._m0[34u].z) + ((((((_992 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1053 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        vec4 _1060 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        vec4 _1067 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        vec4 _1074 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1048, _1049, _1050), 0.0);
        float _1087 = exp2((_1053.w + (-0.5)) * 20.0) * 2.0;
        float _1088 = _1087 * (_1053.x + (-0.5));
        float _1089 = _1087 * (_1053.y + (-0.5));
        float _1090 = _1087 * (_1053.z + (-0.5));
        float _1097 = exp2((_1060.w + (-0.5)) * 20.0) * 2.0;
        float _1098 = _1097 * (_1060.x + (-0.5));
        float _1099 = _1097 * (_1060.y + (-0.5));
        float _1100 = _1097 * (_1060.z + (-0.5));
        float _1107 = exp2((_1067.w + (-0.5)) * 20.0) * 2.0;
        float _1108 = _1107 * (_1067.x + (-0.5));
        float _1109 = _1107 * (_1067.y + (-0.5));
        float _1110 = _1107 * (_1067.z + (-0.5));
        float _1117 = exp2((_1074.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1074.x + (-0.5));
        float _1119 = _1117 * (_1074.y + (-0.5));
        float _1120 = _1117 * (_1074.z + (-0.5));
        float _1121 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1122 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1123 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1124 = _1088 * 0.5;
        float _1125 = _1098 * 0.5;
        float _1126 = _1108 * 0.5;
        float _1127 = dot(vec3(_1124, _1125, _1126), vec3(_1124, _1125, _1126));
        float _1132 = (_1127 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1127);
        float _1141 = (dot(vec3(_678, _679, _680), vec3(_1132 * _1124, _1132 * _1125, _1132 * _1126)) + 1.0) * 0.5;
        float _4119 = isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0));
        float _1151 = sqrt(((_1125 * _1125) + (_1124 * _1124)) + (_1126 * _1126)) / (_1121 + 9.9999997473787516355514526367188e-06);
        float _4130 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1152 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _1153 = _1152 * 2.0;
        float _1157 = (1.0 - _1152) / (_1152 + 1.0);
        float _4141 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _1167 = ((((1.0 - _1158) * (_1153 + 2.0)) * exp2(log2(isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * (_1153 + 1.0))) + _1158) * _1121;
        float _1168 = _1089 * 0.5;
        float _1169 = _1099 * 0.5;
        float _1170 = _1109 * 0.5;
        float _1171 = dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170));
        float _1176 = (_1171 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1171);
        float _1184 = (dot(vec3(_678, _679, _680), vec3(_1176 * _1168, _1176 * _1169, _1176 * _1170)) + 1.0) * 0.5;
        float _4152 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1193 = sqrt(((_1169 * _1169) + (_1168 * _1168)) + (_1170 * _1170)) / (_1122 + 9.9999997473787516355514526367188e-06);
        float _4163 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _1195 = _1194 * 2.0;
        float _1199 = (1.0 - _1194) / (_1194 + 1.0);
        float _4174 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1209 = ((((1.0 - _1200) * (_1195 + 2.0)) * exp2(log2(isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_1195 + 1.0))) + _1200) * _1122;
        float _1210 = _1090 * 0.5;
        float _1211 = _1100 * 0.5;
        float _1212 = _1110 * 0.5;
        float _1213 = dot(vec3(_1210, _1211, _1212), vec3(_1210, _1211, _1212));
        float _1218 = (_1213 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1213);
        float _1226 = (dot(vec3(_678, _679, _680), vec3(_1218 * _1210, _1218 * _1211, _1218 * _1212)) + 1.0) * 0.5;
        float _4185 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1235 = sqrt(((_1211 * _1211) + (_1210 * _1210)) + (_1212 * _1212)) / (_1123 + 9.9999997473787516355514526367188e-06);
        float _4196 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
        float _1237 = _1236 * 2.0;
        float _1241 = (1.0 - _1236) / (_1236 + 1.0);
        float _4207 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
        float _1251 = ((((1.0 - _1242) * (_1237 + 2.0)) * exp2(log2(isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (_1237 + 1.0))) + _1242) * _1123;
        _1259 = _1090;
        _1261 = _1089;
        _1262 = _1088;
        _1263 = _1100;
        _1264 = _1099;
        _1265 = _1098;
        _1266 = _1110;
        _1267 = _1109;
        _1268 = _1108;
        _1269 = _1123;
        _1270 = _1122;
        _1271 = _1121;
        _1272 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0)));
        _1273 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0)));
        _1274 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)));
    }
    else
    {
        _1259 = _1260;
        _1261 = _1260;
        _1262 = _1260;
        _1263 = _1260;
        _1264 = _1260;
        _1265 = _1260;
        _1266 = _1260;
        _1267 = _1260;
        _1268 = _1260;
        _1269 = _1260;
        _1270 = _1260;
        _1271 = _1260;
        _1272 = 0.0;
        _1273 = 0.0;
        _1274 = 0.0;
    }
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1303 = fma(_928, cbModelParam._m0[30u].z, fma(_924, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _920));
        float _1307 = fma(_928, cbModelParam._m0[31u].z, fma(_924, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _920));
        float _1311 = fma(_928, cbModelParam._m0[32u].z, fma(_924, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _920));
        float _1334 = _920 + _678;
        float _1335 = _924 + _679;
        float _1336 = _928 + _680;
        float _1346 = fma(_1336, cbModelParam._m0[30u].z, fma(_1335, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1334)) - _1303;
        float _1347 = fma(_1336, cbModelParam._m0[31u].z, fma(_1335, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1334)) - _1307;
        float _1348 = fma(_1336, cbModelParam._m0[32u].z, fma(_1335, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1334)) - _1311;
        float _1352 = inversesqrt(dot(vec3(_1346, _1347, _1348), vec3(_1346, _1347, _1348)));
        float _1365 = ((_1352 * _1346) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1303 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1366 = ((_1352 * _1347) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1307 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1367 = ((_1352 * _1348) / cbModelParam._m0[35u].z) + ((((((_1311 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1369 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1365, _1366, _1367), 0.0);
        vec4 _1376 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1365, _1366, _1367), 0.0);
        vec4 _1383 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1365, _1366, _1367), 0.0);
        vec4 _1390 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1365, _1366, _1367), 0.0);
        float _1402 = exp2((_1369.w + (-0.5)) * 20.0) * 2.0;
        float _1403 = _1402 * (_1369.x + (-0.5));
        float _1404 = _1402 * (_1369.y + (-0.5));
        float _1405 = _1402 * (_1369.z + (-0.5));
        float _1412 = exp2((_1376.w + (-0.5)) * 20.0) * 2.0;
        float _1413 = _1412 * (_1376.x + (-0.5));
        float _1414 = _1412 * (_1376.y + (-0.5));
        float _1415 = _1412 * (_1376.z + (-0.5));
        float _1422 = exp2((_1383.w + (-0.5)) * 20.0) * 2.0;
        float _1423 = _1422 * (_1383.x + (-0.5));
        float _1424 = _1422 * (_1383.y + (-0.5));
        float _1425 = _1422 * (_1383.z + (-0.5));
        float _1432 = exp2((_1390.w + (-0.5)) * 20.0) * 2.0;
        float _1433 = _1432 * (_1390.x + (-0.5));
        float _1434 = _1432 * (_1390.y + (-0.5));
        float _1435 = _1432 * (_1390.z + (-0.5));
        float _1436 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1437 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1438 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1439 = _1403 * 0.5;
        float _1440 = _1413 * 0.5;
        float _1441 = _1423 * 0.5;
        float _1442 = dot(vec3(_1439, _1440, _1441), vec3(_1439, _1440, _1441));
        float _1447 = (_1442 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1442);
        float _1455 = (dot(vec3(_678, _679, _680), vec3(_1447 * _1439, _1447 * _1440, _1447 * _1441)) + 1.0) * 0.5;
        float _4248 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1464 = sqrt(((_1440 * _1440) + (_1439 * _1439)) + (_1441 * _1441)) / (_1436 + 9.9999997473787516355514526367188e-06);
        float _4259 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _1466 = _1465 * 2.0;
        float _1470 = (1.0 - _1465) / (_1465 + 1.0);
        float _4270 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1471 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
        float _1480 = ((((1.0 - _1471) * (_1466 + 2.0)) * exp2(log2(isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0))) * (_1466 + 1.0))) + _1471) * _1436;
        float _1481 = _1404 * 0.5;
        float _1482 = _1414 * 0.5;
        float _1483 = _1424 * 0.5;
        float _1484 = dot(vec3(_1481, _1482, _1483), vec3(_1481, _1482, _1483));
        float _1489 = (_1484 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1484);
        float _1497 = (dot(vec3(_678, _679, _680), vec3(_1489 * _1481, _1489 * _1482, _1489 * _1483)) + 1.0) * 0.5;
        float _4281 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1506 = sqrt(((_1482 * _1482) + (_1481 * _1481)) + (_1483 * _1483)) / (_1437 + 9.9999997473787516355514526367188e-06);
        float _4292 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _1508 = _1507 * 2.0;
        float _1512 = (1.0 - _1507) / (_1507 + 1.0);
        float _4303 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1513 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
        float _1522 = ((((1.0 - _1513) * (_1508 + 2.0)) * exp2(log2(isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0))) * (_1508 + 1.0))) + _1513) * _1437;
        float _1523 = _1405 * 0.5;
        float _1524 = _1415 * 0.5;
        float _1525 = _1425 * 0.5;
        float _1526 = dot(vec3(_1523, _1524, _1525), vec3(_1523, _1524, _1525));
        float _1531 = (_1526 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1526);
        float _1539 = (dot(vec3(_678, _679, _680), vec3(_1531 * _1523, _1531 * _1524, _1531 * _1525)) + 1.0) * 0.5;
        float _4314 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1548 = sqrt(((_1524 * _1524) + (_1523 * _1523)) + (_1525 * _1525)) / (_1438 + 9.9999997473787516355514526367188e-06);
        float _4325 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _1550 = _1549 * 2.0;
        float _1554 = (1.0 - _1549) / (_1549 + 1.0);
        float _4336 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1555 = isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0));
        float _1564 = ((((1.0 - _1555) * (_1550 + 2.0)) * exp2(log2(isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) * (_1550 + 1.0))) + _1555) * _1438;
        _1572 = _1405;
        _1573 = _1404;
        _1574 = _1403;
        _1575 = _1415;
        _1576 = _1414;
        _1577 = _1413;
        _1578 = _1425;
        _1579 = _1424;
        _1580 = _1423;
        _1581 = _1438;
        _1582 = _1437;
        _1583 = _1436;
        _1584 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0)));
        _1585 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0)));
        _1586 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0)));
    }
    else
    {
        _1572 = _1260;
        _1573 = _1260;
        _1574 = _1260;
        _1575 = _1260;
        _1576 = _1260;
        _1577 = _1260;
        _1578 = _1260;
        _1579 = _1260;
        _1580 = _1260;
        _1581 = _1260;
        _1582 = _1260;
        _1583 = _1260;
        _1584 = 0.0;
        _1585 = 0.0;
        _1586 = 0.0;
    }
    float _1596 = (cbModelParam._m0[1u].x * (_1584 - _1272)) + _1272;
    float _1597 = (cbModelParam._m0[1u].x * (_1585 - _1273)) + _1273;
    float _1598 = (cbModelParam._m0[1u].x * (_1586 - _1274)) + _1274;
    float _1619 = fma(_1598, cbSceneParam._m0[89u].z, fma(_1597, cbSceneParam._m0[89u].y, _1596 * cbSceneParam._m0[89u].x));
    float _1622 = fma(_1598, cbSceneParam._m0[90u].z, fma(_1597, cbSceneParam._m0[90u].y, _1596 * cbSceneParam._m0[90u].x));
    float _1625 = fma(_1598, cbSceneParam._m0[91u].z, fma(_1597, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1596));
    float _1640 = _864 * 0.5;
    float _1641 = _865 * 0.5;
    float _1642 = _866 * 0.5;
    float _1643 = dot(vec4(_1640, _1641, _1642, 1.0), vec4(_1574, _1577, _1580, _1583));
    float _1646 = dot(vec4(_1640, _1641, _1642, 1.0), vec4(_1573, _1576, _1579, _1582));
    float _1649 = dot(vec4(_1640, _1641, _1642, 1.0), vec4(_1572, _1575, _1578, _1581));
    float _1683;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1656 = dot(vec4(_1640, _1641, _1642, 1.0), vec4(_1259, _1263, _1266, _1269));
        float _1660 = dot(vec4(_1640, _1641, _1642, 1.0), vec4(_1261, _1264, _1267, _1270));
        float _1664 = dot(vec4(_1640, _1641, _1642, 1.0), vec4(_1262, _1265, _1268, _1271));
        float _1671 = dot(vec4(cbModelParam._m0[39u]), vec4(_1640, _1641, _1642, 1.0));
        _1683 = dot(vec3(isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0)), isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0)), isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1671) ? 0.0 : (isnan(0.0) ? _1671 : max(0.0, _1671))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1683 = 1.0;
    }
    float _1694;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1685 = dot(vec4(cbModelParam._m0[40u]), vec4(_1640, _1641, _1642, 1.0));
        _1694 = dot(vec3(isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0)), isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0)), isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1685) ? 0.0 : (isnan(0.0) ? _1685 : max(0.0, _1685))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1694 = 1.0;
    }
    float _1698 = (_1694 * cbModelParam._m0[1u].x) + (_1683 * (1.0 - cbModelParam._m0[1u].x));
    float _1708 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _681);
    float _1709 = isnan(_1708) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1708 : min(cbModelParam._m0[25u].z, _1708));
    float _1789;
    float _1791;
    float _1793;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1756 = fma(_928, cbModelParam._m0[13u].z, fma(_924, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _920)) + cbModelParam._m0[13u].w;
        float _1760 = fma(_928, cbModelParam._m0[14u].z, fma(_924, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _920)) + cbModelParam._m0[14u].w;
        float _1764 = fma(_928, cbModelParam._m0[15u].z, fma(_924, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _920)) + cbModelParam._m0[15u].w;
        float _1767 = fma(_866, cbModelParam._m0[13u].z, fma(_865, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _864));
        float _1770 = fma(_866, cbModelParam._m0[14u].z, fma(_865, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _864));
        float _1773 = fma(_866, cbModelParam._m0[15u].z, fma(_865, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _864));
        float _1801;
        if (_1767 > 0.0)
        {
            _1801 = abs((1.0 - _1756) / _1767);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1767 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1756 + 1.0) / _1767);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1801 = frontier_phi_17_15_ladder;
        }
        float _1974;
        if (_1770 > 0.0)
        {
            _1974 = abs((1.0 - _1760) / _1770);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1770 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1760 + 1.0) / _1770);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1974 = frontier_phi_26_22_ladder;
        }
        float _2270;
        if (_1773 > 0.0)
        {
            _2270 = abs((1.0 - _1764) / _1773);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1773 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1764 + 1.0) / _1773);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2270 = frontier_phi_38_33_ladder;
        }
        float _2272 = isnan(_1974) ? _1801 : (isnan(_1801) ? _1974 : min(_1801, _1974));
        float _2273 = isnan(_2270) ? _2272 : (isnan(_2272) ? _2270 : min(_2272, _2270));
        float _2277 = (_2273 * _1767) + _1756;
        float _2278 = (_2273 * _1770) + _1760;
        float _2279 = (_2273 * _1773) + _1764;
        float _2280 = _2273 * 9.9999997473787516355514526367188e-05;
        float _2282 = (-1.0) - _2280;
        float _2284 = _2280 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2279 > _2284) || ((_2279 < _2282) || ((_2278 > _2284) || ((_2278 < _2282) || ((_2277 < _2282) || (_2277 > _2284))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2424 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2279, cbModelParam._m0[9u].z, fma(_2278, cbModelParam._m0[9u].y, _2277 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2279, cbModelParam._m0[10u].z, fma(_2278, cbModelParam._m0[10u].y, _2277 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2279, cbModelParam._m0[11u].z, fma(_2278, cbModelParam._m0[11u].y, _2277 * cbModelParam._m0[11u].x))), _1709);
            frontier_phi_16_38_ladder = _2424.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2424.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2424.x * cbModelParam._m0[1u].y;
        }
        _1789 = frontier_phi_16_38_ladder_2;
        _1791 = frontier_phi_16_38_ladder_1;
        _1793 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1777 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_864, _865, _866), _1709);
        _1789 = _1777.x * cbModelParam._m0[1u].y;
        _1791 = _1777.y * cbModelParam._m0[1u].y;
        _1793 = _1777.z * cbModelParam._m0[1u].y;
    }
    float _1797 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _681);
    float _1798 = isnan(_1797) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1797 : min(cbModelParam._m0[25u].w, _1797));
    float _1889;
    float _1891;
    float _1893;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1853 = fma(_928, cbModelParam._m0[21u].z, fma(_924, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _920)) + cbModelParam._m0[21u].w;
        float _1857 = fma(_928, cbModelParam._m0[22u].z, fma(_924, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _920)) + cbModelParam._m0[22u].w;
        float _1861 = fma(_928, cbModelParam._m0[23u].z, fma(_924, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _920)) + cbModelParam._m0[23u].w;
        float _1864 = fma(_866, cbModelParam._m0[21u].z, fma(_865, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _864));
        float _1867 = fma(_866, cbModelParam._m0[22u].z, fma(_865, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _864));
        float _1870 = fma(_866, cbModelParam._m0[23u].z, fma(_865, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _864));
        float _1979;
        if (_1864 > 0.0)
        {
            _1979 = abs((1.0 - _1853) / _1864);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1864 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1853 + 1.0) / _1864);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1979 = frontier_phi_28_24_ladder;
        }
        float _2297;
        if (_1867 > 0.0)
        {
            _2297 = abs((1.0 - _1857) / _1867);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1867 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1857 + 1.0) / _1867);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2297 = frontier_phi_40_35_ladder;
        }
        float _2635;
        if (_1870 > 0.0)
        {
            _2635 = abs((1.0 - _1861) / _1870);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1870 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1861 + 1.0) / _1870);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2635 = frontier_phi_50_47_ladder;
        }
        float _2637 = isnan(_2297) ? _1979 : (isnan(_1979) ? _2297 : min(_1979, _2297));
        float _2638 = isnan(_2635) ? _2637 : (isnan(_2637) ? _2635 : min(_2637, _2635));
        float _2642 = (_2638 * _1864) + _1853;
        float _2643 = (_2638 * _1867) + _1857;
        float _2644 = (_2638 * _1870) + _1861;
        float _2645 = _2638 * 9.9999997473787516355514526367188e-05;
        float _2646 = (-1.0) - _2645;
        float _2648 = _2645 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2644 > _2648) || ((_2644 < _2646) || ((_2643 > _2648) || ((_2643 < _2646) || ((_2642 < _2646) || (_2642 > _2648))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2766 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2644, cbModelParam._m0[17u].z, fma(_2643, cbModelParam._m0[17u].y, _2642 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2644, cbModelParam._m0[18u].z, fma(_2643, cbModelParam._m0[18u].y, _2642 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2644, cbModelParam._m0[19u].z, fma(_2643, cbModelParam._m0[19u].y, _2642 * cbModelParam._m0[19u].x))), _1798);
            frontier_phi_25_50_ladder = _2766.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2766.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2766.x * cbModelParam._m0[1u].z;
        }
        _1889 = frontier_phi_25_50_ladder_2;
        _1891 = frontier_phi_25_50_ladder_1;
        _1893 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1873 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_864, _865, _866), _1798);
        _1889 = _1873.x * cbModelParam._m0[1u].z;
        _1891 = _1873.y * cbModelParam._m0[1u].z;
        _1893 = _1873.z * cbModelParam._m0[1u].z;
    }
    float _1906 = (((_891 * _841) + _892) * _856) * ((cbModelParam._m0[1u].w * (_1889 - _1789)) + _1789);
    float _1908 = (((_891 * _843) + _892) * _856) * ((cbModelParam._m0[1u].w * (_1891 - _1791)) + _1791);
    float _1910 = (((_891 * _844) + _892) * _856) * ((cbModelParam._m0[1u].w * (_1893 - _1793)) + _1793);
    float _1913 = fma(_1910, cbSceneParam._m0[89u].z, fma(_1908, cbSceneParam._m0[89u].y, _1906 * cbSceneParam._m0[89u].x));
    float _1916 = fma(_1910, cbSceneParam._m0[90u].z, fma(_1908, cbSceneParam._m0[90u].y, _1906 * cbSceneParam._m0[90u].x));
    float _1919 = fma(_1910, cbSceneParam._m0[91u].z, fma(_1908, cbSceneParam._m0[91u].y, _1906 * cbSceneParam._m0[91u].x));
    float _1953 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1957 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1961 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1965 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1966 = _1953 / _1965;
    float _1967 = _1957 / _1965;
    float _1968 = _1961 / _1965;
    float _2115;
    float _2116;
    float _2117;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1995 = ((uint(_1968 > cbSceneParam._m0[59u].y) + uint(_1968 > cbSceneParam._m0[59u].x)) + uint(_1968 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1996 = _1995 + 43u;
        uint _2004 = _1995 + 44u;
        uint _2012 = _1995 + 45u;
        uint _2020 = _1995 + 46u;
        float _2031 = fma(_1965, cbSceneParam._m0[_1996].w, fma(_1961, cbSceneParam._m0[_1996].z, fma(_1957, cbSceneParam._m0[_1996].y, _1953 * cbSceneParam._m0[_1996].x)));
        float _2035 = fma(_1965, cbSceneParam._m0[_2004].w, fma(_1961, cbSceneParam._m0[_2004].z, fma(_1957, cbSceneParam._m0[_2004].y, _1953 * cbSceneParam._m0[_2004].x)));
        float _2043 = fma(_1965, cbSceneParam._m0[_2020].w, fma(_1961, cbSceneParam._m0[_2020].z, fma(_1957, cbSceneParam._m0[_2020].y, _1953 * cbSceneParam._m0[_2020].x)));
        float _2048 = cbSceneParam._m0[33u].z * _2043;
        float _2050 = cbSceneParam._m0[33u].w * _2043;
        float _2053 = fma(_1965, cbSceneParam._m0[_2012].w, fma(_1961, cbSceneParam._m0[_2012].z, fma(_1957, cbSceneParam._m0[_2012].y, _1953 * cbSceneParam._m0[_2012].x))) / _2043;
        float _2101 = (cbSceneParam._m0[33u].x - sqrt(((_1967 * _1967) + (_1966 * _1966)) + (_1968 * _1968))) * cbSceneParam._m0[33u].y;
        float _4462 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
        float _2108 = (isnan(1.0) ? _4462 : (isnan(_4462) ? 1.0 : min(_4462, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2048 + _2031) / _2043, (_2050 + _2035) / _2043), _2053), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2050 + _2031) / _2043, (_2035 - _2048) / _2043), _2053), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2031 - _2048) / _2043, (_2035 - _2050) / _2043), _2053), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2031 - _2050) / _2043, (_2048 + _2035) / _2043), _2053), 0.0)).x), vec4(0.25)));
        _2115 = 1.0 - (_2108 * cbSceneParam._m0[34u].x);
        _2116 = 1.0 - (_2108 * cbSceneParam._m0[34u].y);
        _2117 = 1.0 - (_2108 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2115 = 1.0;
        _2116 = 1.0;
        _2117 = 1.0;
    }
    float _2181;
    float _2183;
    float _2185;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2169 = fma(_1965, cbSceneParam._m0[63u].w, fma(_1961, cbSceneParam._m0[63u].z, fma(_1957, cbSceneParam._m0[63u].y, _1953 * cbSceneParam._m0[63u].x)));
        float _2170 = fma(_1965, cbSceneParam._m0[60u].w, fma(_1961, cbSceneParam._m0[60u].z, fma(_1957, cbSceneParam._m0[60u].y, _1953 * cbSceneParam._m0[60u].x))) / _2169;
        float _2171 = fma(_1965, cbSceneParam._m0[61u].w, fma(_1961, cbSceneParam._m0[61u].z, fma(_1957, cbSceneParam._m0[61u].y, _1953 * cbSceneParam._m0[61u].x))) / _2169;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2170 >= cbSceneParam._m0[64u].x) && (_2171 >= cbSceneParam._m0[64u].y)) && (_2170 <= cbSceneParam._m0[64u].z)) && (_2171 <= cbSceneParam._m0[64u].w))
        {
            float _2310 = fma(_1965, cbSceneParam._m0[62u].w, fma(_1961, cbSceneParam._m0[62u].z, fma(_1957, cbSceneParam._m0[62u].y, _1953 * cbSceneParam._m0[62u].x))) / _2169;
            float _2314 = isnan(cbSceneParam._m0[41u].w) ? _2310 : (isnan(_2310) ? cbSceneParam._m0[41u].w : max(_2310, cbSceneParam._m0[41u].w));
            float _2357 = (cbSceneParam._m0[33u].x - sqrt(((_1967 * _1967) + (_1966 * _1966)) + (_1968 * _1968))) * cbSceneParam._m0[33u].y;
            float _4478 = isnan(0.0) ? _2357 : (isnan(_2357) ? 0.0 : max(_2357, 0.0));
            float _2364 = (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2170, cbSceneParam._m0[33u].w + _2171), _2314), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2170, _2171 - cbSceneParam._m0[33u].z), _2314), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2170 - cbSceneParam._m0[33u].z, _2171 - cbSceneParam._m0[33u].w), _2314), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2170 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2171), _2314), 0.0)).x), vec4(0.25)));
            float _2368 = 1.0 - (_2364 * cbSceneParam._m0[34u].x);
            float _2369 = 1.0 - (_2364 * cbSceneParam._m0[34u].y);
            float _2370 = 1.0 - (_2364 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2370) ? _2117 : (isnan(_2117) ? _2370 : min(_2117, _2370));
            frontier_phi_37_36_ladder_1 = isnan(_2369) ? _2116 : (isnan(_2116) ? _2369 : min(_2116, _2369));
            frontier_phi_37_36_ladder_2 = isnan(_2368) ? _2115 : (isnan(_2115) ? _2368 : min(_2115, _2368));
        }
        else
        {
            frontier_phi_37_36_ladder = _2117;
            frontier_phi_37_36_ladder_1 = _2116;
            frontier_phi_37_36_ladder_2 = _2115;
        }
        _2181 = frontier_phi_37_36_ladder_2;
        _2183 = frontier_phi_37_36_ladder_1;
        _2185 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2181 = _2115;
        _2183 = _2116;
        _2185 = _2117;
    }
    uvec4 _2190 = floatBitsToUint(cbInstanceData._m0[_816 + 5u]);
    uint _2192 = _2190.x * 14u;
    uint _2193 = _2192 + 13u;
    float _2200 = _856 + (-1.0);
    float _2205 = (cbLight._m0[_2193].x * _2200) + 1.0;
    float _2206 = (cbLight._m0[_2193].y * _2200) + 1.0;
    float _2207 = (cbLight._m0[_2193].z * _2200) + 1.0;
    float _2208 = (cbLight._m0[_2193].w * _2200) + 1.0;
    uint _2209 = _2192 + 5u;
    float _2215 = isnan(1.0) ? _2206 : (isnan(_2206) ? 1.0 : min(_2206, 1.0));
    uint _2219 = _2192 + 4u;
    float _2229 = isnan(1.0) ? _2205 : (isnan(_2205) ? 1.0 : min(_2205, 1.0));
    uint _2233 = _2192 | 1u;
    float _2244 = dot(vec3(cbLight._m0[_2192].xyz), vec3(_678, _679, _680));
    float _2247 = dot(vec3(cbLight._m0[_2233].xyz), vec3(_678, _679, _680));
    float _4514 = isnan(0.0) ? _2244 : (isnan(_2244) ? 0.0 : max(_2244, 0.0));
    float _4525 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
    float _2252 = (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0))) * 0.3183098733425140380859375;
    float _2254 = (isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0))) * 0.3183098733425140380859375;
    float _2261 = ((cbLight._m0[_2209].x * _2215) * _2254) + (((cbLight._m0[_2219].x * _2181) * _2229) * _2252);
    float _2262 = ((_2215 * cbLight._m0[_2209].y) * _2254) + (((cbLight._m0[_2219].y * _2183) * _2229) * _2252);
    float _2263 = ((_2215 * cbLight._m0[_2209].z) * _2254) + (((cbLight._m0[_2219].z * _2185) * _2229) * _2252);
    uvec4 _2267 = floatBitsToUint(cbLight._m0[_2192 + 12u]);
    bool _2269 = _2267.x == 0u;
    float _2371;
    float _2373;
    float _2375;
    if (_2269)
    {
        _2371 = _2261;
        _2373 = _2262;
        _2375 = _2263;
    }
    else
    {
        uint _2379 = _2192 + 6u;
        float _2395 = (dot(vec3(cbLight._m0[_2192 + 2u].xyz), vec3(_678, _679, _680)) * 0.5) + 0.5;
        float _2396 = _2395 * _2395;
        float _4536 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
        float _2397 = isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0));
        float _2398 = isnan(1.0) ? _2207 : (isnan(_2207) ? 1.0 : min(_2207, 1.0));
        _2371 = (((cbLight._m0[_2379].x * 0.3183098733425140380859375) * _2397) * _2398) + _2261;
        _2373 = (((cbLight._m0[_2379].y * 0.3183098733425140380859375) * _2397) * _2398) + _2262;
        _2375 = (((cbLight._m0[_2379].z * 0.3183098733425140380859375) * _2397) * _2398) + _2263;
    }
    bool _2378 = _2267.y == 0u;
    float _2433;
    float _2435;
    float _2437;
    if (_2378)
    {
        _2433 = _2371;
        _2435 = _2373;
        _2437 = _2375;
    }
    else
    {
        uint _2606 = _2192 + 7u;
        float _2622 = (dot(vec3(cbLight._m0[_2192 + 3u].xyz), vec3(_678, _679, _680)) * 0.5) + 0.5;
        float _2623 = _2622 * _2622;
        float _4552 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
        float _2624 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
        float _2625 = isnan(1.0) ? _2208 : (isnan(_2208) ? 1.0 : min(_2208, 1.0));
        _2433 = (((cbLight._m0[_2606].x * 0.3183098733425140380859375) * _2624) * _2625) + _2371;
        _2435 = (((cbLight._m0[_2606].y * 0.3183098733425140380859375) * _2624) * _2625) + _2373;
        _2437 = (((cbLight._m0[_2606].z * 0.3183098733425140380859375) * _2624) * _2625) + _2375;
    }
    uint _2440 = _2192 + 8u;
    float _2453 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2192].w)) * _681) * 0.949999988079071044921875);
    float _2454 = _2453 * _2453;
    float _2455 = cbLight._m0[_2192].x + _758;
    float _2456 = cbLight._m0[_2192].y + _759;
    float _2457 = cbLight._m0[_2192].z + _760;
    float _2461 = inversesqrt(dot(vec3(_2455, _2456, _2457), vec3(_2455, _2456, _2457)));
    float _2462 = _2461 * _2455;
    float _2463 = _2461 * _2456;
    float _2464 = _2461 * _2457;
    float _2465 = dot(vec3(_678, _679, _680), vec3(cbLight._m0[_2192].xyz));
    float _4568 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
    float _2468 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
    float _4579 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
    float _2469 = isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0));
    float _2470 = dot(vec3(_678, _679, _680), vec3(_2462, _2463, _2464));
    float _4590 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
    float _2473 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
    float _2474 = dot(vec3(cbLight._m0[_2192].xyz), vec3(_2462, _2463, _2464));
    float _4601 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0));
    float _2478 = _2454 * _2454;
    float _2482 = ((_2473 * _2473) * (_2478 + (-1.0))) + 1.0;
    float _2490 = exp2(log2(1.0 - (isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0)))) * 5.0);
    float _2491 = 0.959999978542327880859375 - _838;
    float _2493 = 0.959999978542327880859375 - _839;
    float _2494 = 0.959999978542327880859375 - _840;
    float _2501 = 1.0 - _2454;
    float _2512 = (0.5 / (((_2469 * ((_2468 * _2501) + _2454)) + 9.9999999392252902907785028219223e-09) + (((_2469 * _2501) + _2454) * _2468))) * _2468;
    float _4612 = isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0));
    float _2514 = (isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0))) * (_2478 / ((_2482 * _2482) * 3.141590118408203125));
    uint _2528 = _2192 + 9u;
    float _2539 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2233].w)) * _681) * 0.949999988079071044921875);
    float _2540 = _2539 * _2539;
    float _2541 = cbLight._m0[_2233].x + _758;
    float _2542 = cbLight._m0[_2233].y + _759;
    float _2543 = cbLight._m0[_2233].z + _760;
    float _2547 = inversesqrt(dot(vec3(_2541, _2542, _2543), vec3(_2541, _2542, _2543)));
    float _2548 = _2547 * _2541;
    float _2549 = _2547 * _2542;
    float _2550 = _2547 * _2543;
    float _2551 = dot(vec3(_678, _679, _680), vec3(cbLight._m0[_2233].xyz));
    float _4623 = isnan(0.0) ? _2551 : (isnan(_2551) ? 0.0 : max(_2551, 0.0));
    float _2554 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
    float _2555 = dot(vec3(_678, _679, _680), vec3(_2548, _2549, _2550));
    float _4634 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0));
    float _2558 = isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0));
    float _2559 = dot(vec3(cbLight._m0[_2233].xyz), vec3(_2548, _2549, _2550));
    float _4645 = isnan(0.0) ? _2559 : (isnan(_2559) ? 0.0 : max(_2559, 0.0));
    float _2563 = _2540 * _2540;
    float _2567 = ((_2558 * _2558) * (_2563 + (-1.0))) + 1.0;
    float _2574 = exp2(log2(1.0 - (isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0)))) * 5.0);
    float _2581 = 1.0 - _2540;
    float _2591 = (0.5 / (((_2469 * ((_2554 * _2581) + _2540)) + 9.9999999392252902907785028219223e-09) + (((_2469 * _2581) + _2540) * _2554))) * _2554;
    float _4656 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
    float _2593 = (isnan(1.0) ? _4656 : (isnan(_4656) ? 1.0 : min(_4656, 1.0))) * (_2563 / ((_2567 * _2567) * 3.141590118408203125));
    float _2603 = (((((_2574 * _2491) + _841) * cbLight._m0[_2528].x) * _2593) * _2215) + ((((cbLight._m0[_2440].x * _2181) * ((_2490 * _2491) + _841)) * _2514) * _2229);
    float _2604 = (((((_2574 * _2493) + _843) * cbLight._m0[_2528].y) * _2593) * _2215) + ((((cbLight._m0[_2440].y * _2183) * ((_2490 * _2493) + _843)) * _2514) * _2229);
    float _2605 = (((((_2574 * _2494) + _844) * cbLight._m0[_2528].z) * _2593) * _2215) + ((((cbLight._m0[_2440].z * _2185) * ((_2490 * _2494) + _844)) * _2514) * _2229);
    float _2661;
    float _2663;
    float _2665;
    if (_2269)
    {
        _2661 = _2603;
        _2663 = _2604;
        _2665 = _2605;
    }
    else
    {
        uint _2667 = _2192 + 2u;
        uint _2671 = _2192 + 10u;
        float _2685 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2667].w)) * _681) * 0.949999988079071044921875);
        float _2686 = _2685 * _2685;
        float _2687 = cbLight._m0[_2667].x + _758;
        float _2688 = cbLight._m0[_2667].y + _759;
        float _2689 = cbLight._m0[_2667].z + _760;
        float _2693 = inversesqrt(dot(vec3(_2687, _2688, _2689), vec3(_2687, _2688, _2689)));
        float _2694 = _2693 * _2687;
        float _2695 = _2693 * _2688;
        float _2696 = _2693 * _2689;
        float _2697 = dot(vec3(_678, _679, _680), vec3(cbLight._m0[_2667].xyz));
        float _4667 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
        float _2700 = isnan(1.0) ? _4667 : (isnan(_4667) ? 1.0 : min(_4667, 1.0));
        float _2701 = dot(vec3(_678, _679, _680), vec3(_2694, _2695, _2696));
        float _4678 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
        float _2704 = isnan(1.0) ? _4678 : (isnan(_4678) ? 1.0 : min(_4678, 1.0));
        float _2705 = dot(vec3(cbLight._m0[_2667].xyz), vec3(_2694, _2695, _2696));
        float _4689 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
        float _2709 = _2686 * _2686;
        float _2713 = ((_2704 * _2704) * (_2709 + (-1.0))) + 1.0;
        float _2720 = exp2(log2(1.0 - (isnan(1.0) ? _4689 : (isnan(_4689) ? 1.0 : min(_4689, 1.0)))) * 5.0);
        float _2727 = 1.0 - _2686;
        float _2737 = (0.5 / (((_2469 * ((_2700 * _2727) + _2686)) + 9.9999999392252902907785028219223e-09) + (((_2469 * _2727) + _2686) * _2700))) * _2700;
        float _4700 = isnan(0.0) ? _2737 : (isnan(_2737) ? 0.0 : max(_2737, 0.0));
        float _2739 = (isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0))) * (_2709 / ((_2713 * _2713) * 3.141590118408203125));
        float _2740 = isnan(1.0) ? _2207 : (isnan(_2207) ? 1.0 : min(_2207, 1.0));
        _2661 = (((((_2720 * _2491) + _841) * cbLight._m0[_2671].x) * _2739) * _2740) + _2603;
        _2663 = (((((_2720 * _2493) + _843) * cbLight._m0[_2671].y) * _2739) * _2740) + _2604;
        _2665 = (((((_2720 * _2494) + _844) * cbLight._m0[_2671].z) * _2739) * _2740) + _2605;
    }
    float _2771;
    float _2773;
    float _2775;
    if (_2378)
    {
        _2771 = _2661;
        _2773 = _2663;
        _2775 = _2665;
    }
    else
    {
        uint _2782 = _2192 + 3u;
        uint _2786 = _2192 + 11u;
        float _2800 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2782].w)) * _681) * 0.949999988079071044921875);
        float _2801 = _2800 * _2800;
        float _2802 = cbLight._m0[_2782].x + _758;
        float _2803 = cbLight._m0[_2782].y + _759;
        float _2804 = cbLight._m0[_2782].z + _760;
        float _2808 = inversesqrt(dot(vec3(_2802, _2803, _2804), vec3(_2802, _2803, _2804)));
        float _2809 = _2808 * _2802;
        float _2810 = _2808 * _2803;
        float _2811 = _2808 * _2804;
        float _2812 = dot(vec3(_678, _679, _680), vec3(cbLight._m0[_2782].xyz));
        float _4716 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
        float _2815 = isnan(1.0) ? _4716 : (isnan(_4716) ? 1.0 : min(_4716, 1.0));
        float _2816 = dot(vec3(_678, _679, _680), vec3(_2809, _2810, _2811));
        float _4727 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
        float _2819 = isnan(1.0) ? _4727 : (isnan(_4727) ? 1.0 : min(_4727, 1.0));
        float _2820 = dot(vec3(cbLight._m0[_2782].xyz), vec3(_2809, _2810, _2811));
        float _4738 = isnan(0.0) ? _2820 : (isnan(_2820) ? 0.0 : max(_2820, 0.0));
        float _2824 = _2801 * _2801;
        float _2828 = ((_2819 * _2819) * (_2824 + (-1.0))) + 1.0;
        float _2835 = exp2(log2(1.0 - (isnan(1.0) ? _4738 : (isnan(_4738) ? 1.0 : min(_4738, 1.0)))) * 5.0);
        float _2842 = 1.0 - _2801;
        float _2852 = (0.5 / (((_2469 * ((_2815 * _2842) + _2801)) + 9.9999999392252902907785028219223e-09) + (((_2469 * _2842) + _2801) * _2815))) * _2815;
        float _4749 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
        float _2854 = (isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0))) * (_2824 / ((_2828 * _2828) * 3.141590118408203125));
        float _2855 = isnan(1.0) ? _2208 : (isnan(_2208) ? 1.0 : min(_2208, 1.0));
        _2771 = (((((_2835 * _2491) + _841) * cbLight._m0[_2786].x) * _2854) * _2855) + _2661;
        _2773 = (((((_2835 * _2493) + _843) * cbLight._m0[_2786].y) * _2854) * _2855) + _2663;
        _2775 = (((((_2835 * _2494) + _844) * cbLight._m0[_2786].z) * _2854) * _2855) + _2665;
    }
    float _2921;
    float _2923;
    float _2925;
    float _2927;
    float _2929;
    float _2931;
    if (_2190.y == 0u)
    {
        uvec4 _2876 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2877 = _2876.x;
        uint _2888 = uint((float(_2876.y) * floor(float(uint(cbSceneParam._m0[85u].y * _779) / _2877))) + floor(float(uint(cbSceneParam._m0[85u].x * _778) / _2877)));
        float _2898 = (log2(_1968 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2899 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
        uint _2902 = uint(isnan(14.0) ? _2899 : (isnan(_2899) ? 14.0 : min(_2899, 14.0)));
        uvec4 _2907 = texelFetch(g_lightClusterGridBuffer, int(((_2902 << 2u) + (_2888 << 6u)) >> 2u));
        uint _2908 = _2907.x;
        uint _2909 = _2876.z;
        float _2988;
        float _2990;
        float _2992;
        float _2994;
        float _2996;
        float _2998;
        if (((((1u << ((_2909 >> 4u) & 15u)) + 4294967295u) & _2908) == 0u) || ((_2909 & 240u) == 0u))
        {
            _2988 = 0.0;
            _2990 = 0.0;
            _2992 = 0.0;
            _2994 = 0.0;
            _2996 = 0.0;
            _2998 = 0.0;
        }
        else
        {
            float _2989;
            float _2991;
            float _2993;
            float _2995;
            float _2997;
            float _2999;
            float _3141 = 0.0;
            float _3142 = 0.0;
            float _3143 = 0.0;
            float _3144 = 0.0;
            float _3145 = 0.0;
            float _3146 = 0.0;
            uint _3147 = 0u;
            uint _3156;
            bool _3157;
            for (;;)
            {
                _3156 = texelFetch(g_lightClassification, int((((_2902 << 5u) + (_2888 << 9u)) + (_3147 << 2u)) >> 2u)).x;
                _3157 = _3156 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3157)
                {
                    frontier_phi_71_pred = _3146;
                    frontier_phi_71_pred_1 = _3145;
                    frontier_phi_71_pred_2 = _3144;
                    frontier_phi_71_pred_3 = _3143;
                    frontier_phi_71_pred_4 = _3142;
                    frontier_phi_71_pred_5 = _3141;
                }
                else
                {
                    float _3286;
                    float _3287;
                    float _3288;
                    float _3289;
                    float _3290;
                    float _3291;
                    uint _3292;
                    _3286 = _3141;
                    _3287 = _3142;
                    _3288 = _3143;
                    _3289 = _3144;
                    _3290 = _3145;
                    _3291 = _3146;
                    _3292 = _3156;
                    float _3213;
                    float _3214;
                    float _3215;
                    float _3216;
                    float _3217;
                    float _3218;
                    for (;;)
                    {
                        uint _3296 = uint(findLSB(_3292)) + (_3147 << 5u);
                        uint _3293 = (_3292 + 4294967295u) & _3292;
                        uint _3298 = _3296 * 48u;
                        vec4 _3312 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3298)).x, texelFetch(g_PointLightRenderingBuffer, int(_3298 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3298 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3298 + 3u)).x));
                        uint _3318 = (_3296 * 48u) + 4u;
                        vec4 _3331 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3318)).x, texelFetch(g_PointLightRenderingBuffer, int(_3318 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3318 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3318 + 3u)).x));
                        uint _3337 = (_3296 * 48u) + 8u;
                        vec3 _3348 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3337)).x, texelFetch(g_PointLightRenderingBuffer, int(_3337 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3337 + 2u)).x));
                        float _3352 = _3312.x - _1966;
                        float _3353 = _3312.y - _1967;
                        float _3354 = _3312.z - _1968;
                        float _3355 = dot(vec3(_3352, _3353, _3354), vec3(_3352, _3353, _3354));
                        float _3358 = inversesqrt(_3355);
                        float _3359 = _3358 * _3352;
                        float _3360 = _3358 * _3353;
                        float _3361 = _3358 * _3354;
                        float _3362 = dot(vec3(_797, _800, _803), vec3(_3359, _3360, _3361));
                        float _3367 = 1.0 - (_3355 * _3312.w);
                        float _4775 = isnan(0.0) ? _3367 : (isnan(_3367) ? 0.0 : max(_3367, 0.0));
                        float _3368 = isnan(1.0) ? _4775 : (isnan(_4775) ? 1.0 : min(_4775, 1.0));
                        float _3369 = sqrt(_3355) * _3331.w;
                        float _3372 = 1.39999997615814208984375 / (_3369 + 1.39999997615814208984375);
                        float _3373 = _3372 * _3372;
                        float _3376 = ((1.0 - _3373) * _3362) + _3373;
                        float _3379 = _3369 * _3369;
                        float _3383 = ((isnan(0.0) ? _3376 : (isnan(_3376) ? 0.0 : max(_3376, 0.0))) * _3368) / ((_3379 * 0.699999988079071044921875) + 1.0);
                        float _3387 = (-0.0) - _1966;
                        float _3388 = (-0.0) - _1967;
                        float _3389 = (-0.0) - _1968;
                        float _3393 = inversesqrt(dot(vec3(_3387, _3388, _3389), vec3(_3387, _3388, _3389)));
                        float _3394 = _3393 * _3387;
                        float _3395 = _3393 * _3388;
                        float _3396 = _3393 * _3389;
                        float _3403 = exp2(log2(1.0 / ((_3379 * 3.5) + 5.0)) * 0.25);
                        float _3404 = 1.0 - _872;
                        float _3411 = sqrt(1.0 - ((1.0 - (_3404 * _3404)) * (1.0 - (_3403 * _3403))));
                        float _3412 = _3411 * _3411;
                        float _3413 = _3412 * _3412;
                        float _3414 = _3394 + _3359;
                        float _3415 = _3395 + _3360;
                        float _3416 = _3396 + _3361;
                        float _3420 = inversesqrt(dot(vec3(_3414, _3415, _3416), vec3(_3414, _3415, _3416)));
                        float _3424 = dot(vec3(_797, _800, _803), vec3(_3394, _3395, _3396));
                        float _4791 = isnan(0.0) ? _3424 : (isnan(_3424) ? 0.0 : max(_3424, 0.0));
                        float _3427 = isnan(1.0) ? _4791 : (isnan(_4791) ? 1.0 : min(_4791, 1.0));
                        float _3428 = dot(vec3(_797, _800, _803), vec3(_3420 * _3414, _3420 * _3415, _3420 * _3416));
                        float _4802 = isnan(0.0) ? _3428 : (isnan(_3428) ? 0.0 : max(_3428, 0.0));
                        float _3431 = isnan(1.0) ? _4802 : (isnan(_4802) ? 1.0 : min(_4802, 1.0));
                        float _3435 = ((_3431 * _3431) * (_3413 + (-1.0))) + 1.0;
                        float _3436 = _3372 * _3412;
                        float _3437 = _3436 * _3436;
                        float _3440 = ((1.0 - _3437) * _3362) + _3437;
                        float _4813 = isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0));
                        float _3441 = isnan(1.0) ? _4813 : (isnan(_4813) ? 1.0 : min(_4813, 1.0));
                        float _3442 = 1.0 - _3412;
                        float _3452 = (0.5 / (((_3441 * ((_3427 * _3442) + _3412)) + 9.9999999392252902907785028219223e-09) + (((_3441 * _3442) + _3412) * _3427))) * _3441;
                        float _4824 = isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0));
                        float _3463 = (((_3413 * 3.1415927410125732421875) * (isnan(1.0) ? _4824 : (isnan(_4824) ? 1.0 : min(_4824, 1.0)))) / ((_3435 * _3435) * ((_3379 * 2.1991131305694580078125) + 3.141590118408203125))) * _3368;
                        _3216 = (_3383 * _3331.x) + _3289;
                        _3217 = (_3383 * _3331.y) + _3290;
                        _3218 = (_3383 * _3331.z) + _3291;
                        _3213 = (_3463 * _3348.x) + _3286;
                        _3214 = (_3463 * _3348.y) + _3287;
                        _3215 = (_3463 * _3348.z) + _3288;
                        if (_3293 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3286 = _3213;
                            _3287 = _3214;
                            _3288 = _3215;
                            _3289 = _3216;
                            _3290 = _3217;
                            _3291 = _3218;
                            _3292 = _3293;
                        }
                    }
                    frontier_phi_71_pred = _3218;
                    frontier_phi_71_pred_1 = _3217;
                    frontier_phi_71_pred_2 = _3216;
                    frontier_phi_71_pred_3 = _3215;
                    frontier_phi_71_pred_4 = _3214;
                    frontier_phi_71_pred_5 = _3213;
                }
                _2999 = frontier_phi_71_pred;
                _2997 = frontier_phi_71_pred_1;
                _2995 = frontier_phi_71_pred_2;
                _2993 = frontier_phi_71_pred_3;
                _2991 = frontier_phi_71_pred_4;
                _2989 = frontier_phi_71_pred_5;
                uint _3148 = _3147 + 1u;
                if (_3148 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3141 = _2989;
                    _3142 = _2991;
                    _3143 = _2993;
                    _3144 = _2995;
                    _3145 = _2997;
                    _3146 = _2999;
                    _3147 = _3148;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2988 = _2989;
            _2990 = _2991;
            _2992 = _2993;
            _2994 = _2995;
            _2996 = _2997;
            _2998 = _2999;
        }
        uvec4 _3002 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3003 = _3002.z;
        uint _3005 = (_3003 >> 8u) & 15u;
        float _3109;
        float _3111;
        float _3113;
        float _3115;
        float _3117;
        float _3119;
        if (((4294967295u << _3005) & _2908) == 0u)
        {
            _3109 = _2988;
            _3111 = _2990;
            _3113 = _2992;
            _3115 = _2994;
            _3117 = _2996;
            _3119 = _2998;
        }
        else
        {
            float _3134 = inversesqrt(dot(vec3(_1966, _1967, _1968), vec3(_1966, _1967, _1968)));
            float _3135 = _3134 * _1966;
            float _3136 = _3134 * _1967;
            float _3137 = _3134 * _1968;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3005 < ((_3003 >> 12u) & 15u))
            {
                float _3110;
                float _3112;
                float _3114;
                float _3116;
                float _3118;
                float _3120;
                float _3269 = _2988;
                float _3270 = _2990;
                float _3271 = _2992;
                float _3272 = _2994;
                float _3273 = _2996;
                float _3274 = _2998;
                uint _3275 = _3005;
                uint _3284;
                bool _3285;
                for (;;)
                {
                    _3284 = texelFetch(g_lightClassification, int((((_2902 << 5u) + (_2888 << 9u)) + (_3275 << 2u)) >> 2u)).x;
                    _3285 = _3284 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3285)
                    {
                        frontier_phi_82_pred = _3274;
                        frontier_phi_82_pred_1 = _3273;
                        frontier_phi_82_pred_2 = _3272;
                        frontier_phi_82_pred_3 = _3271;
                        frontier_phi_82_pred_4 = _3270;
                        frontier_phi_82_pred_5 = _3269;
                    }
                    else
                    {
                        float _3477;
                        float _3478;
                        float _3479;
                        float _3480;
                        float _3481;
                        float _3482;
                        float _3771;
                        float _3772;
                        float _3773;
                        float _3774;
                        float _3775;
                        float _3776;
                        float _3490 = _3269;
                        float _3491 = _3270;
                        float _3492 = _3271;
                        float _3493 = _3272;
                        float _3494 = _3273;
                        float _3495 = _3274;
                        uint _3496 = _3284;
                        uint _3497;
                        vec4 _3522;
                        float _3523;
                        vec4 _3538;
                        vec3 _3550;
                        vec4 _3565;
                        vec4 _3580;
                        float _3627;
                        bool _3628;
                        for (;;)
                        {
                            uint _3507 = ((_3275 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3496));
                            _3497 = (_3496 + 4294967295u) & _3496;
                            uint _3509 = _3507 * 40u;
                            _3522 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3509)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3509 + 3u)).x));
                            _3523 = _3522.w;
                            uint _3525 = (_3507 * 40u) + 4u;
                            _3538 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3525)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3525 + 3u)).x));
                            uint _3540 = (_3507 * 40u) + 8u;
                            _3550 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3540)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3540 + 2u)).x));
                            uint _3552 = (_3507 * 40u) + 16u;
                            _3565 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3552)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3552 + 3u)).x));
                            uint _3567 = (_3507 * 40u) + 20u;
                            _3580 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3567)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3567 + 3u)).x));
                            uint _3583 = (_3507 * 40u) + 24u;
                            vec4 _3596 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3583)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3583 + 3u)).x));
                            uint _3602 = (_3507 * 40u) + 28u;
                            vec4 _3615 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3602)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3602 + 3u)).x));
                            _3627 = fma(_1968, _3615.z, fma(_1967, _3615.y, _3615.x * _1966)) + _3615.w;
                            _3628 = !((fma(_1968, _3596.z, fma(_1967, _3596.y, _3596.x * _1966)) + _3596.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3628)
                            {
                                float _3655 = _3522.x - _1966;
                                float _3656 = _3522.y - _1967;
                                float _3657 = _3522.z - _1968;
                                float _3658 = dot(vec3(_3655, _3656, _3657), vec3(_3655, _3656, _3657));
                                float _3661 = inversesqrt(_3658);
                                float _3662 = _3661 * _3655;
                                float _3663 = _3661 * _3656;
                                float _3664 = _3661 * _3657;
                                float _3668 = 1.0 - (_3658 / (_3523 * _3523));
                                float _4835 = isnan(0.0) ? _3668 : (isnan(_3668) ? 0.0 : max(_3668, 0.0));
                                float _3669 = isnan(1.0) ? _4835 : (isnan(_4835) ? 1.0 : min(_4835, 1.0));
                                float _3673 = sqrt(_3658) * _3538.w;
                                float _3675 = 1.39999997615814208984375 / (_3673 + 1.39999997615814208984375);
                                float _3676 = _3675 * _3675;
                                float _3679 = ((1.0 - _3676) * dot(vec3(_3662, _3663, _3664), vec3(_797, _800, _803))) + _3676;
                                float _3682 = _3673 * _3673;
                                float _3686 = (fma(_1968, _3565.z, fma(_1967, _3565.y, _3565.x * _1966)) + _3565.w) / _3627;
                                float _3687 = (fma(_1968, _3580.z, fma(_1967, _3580.y, _3580.x * _1966)) + _3580.w) / _3627;
                                float _3691 = 1.0 - dot(vec2(_3686, _3687), vec2(_3686, _3687));
                                float _4851 = isnan(0.0) ? _3691 : (isnan(_3691) ? 0.0 : max(_3691, 0.0));
                                float _3692 = isnan(1.0) ? _4851 : (isnan(_4851) ? 1.0 : min(_4851, 1.0));
                                float _3693 = _3692 * (((isnan(0.0) ? _3679 : (isnan(_3679) ? 0.0 : max(_3679, 0.0))) * _3669) / ((_3682 * 0.699999988079071044921875) + 1.0));
                                float _3705 = exp2(log2(1.0 / ((_3682 * 3.5) + 5.0)) * 0.25);
                                float _3706 = 1.0 - _872;
                                float _3713 = sqrt(1.0 - ((1.0 - (_3706 * _3706)) * (1.0 - (_3705 * _3705))));
                                float _3714 = _3713 * _3713;
                                float _3715 = _3714 * _3714;
                                float _3716 = _3662 - _3135;
                                float _3717 = _3663 - _3136;
                                float _3718 = _3664 - _3137;
                                float _3722 = inversesqrt(dot(vec3(_3716, _3717, _3718), vec3(_3716, _3717, _3718)));
                                float _3726 = dot(vec3(_797, _800, _803), vec3((-0.0) - _3135, (-0.0) - _3136, (-0.0) - _3137));
                                float _4862 = isnan(0.0) ? _3726 : (isnan(_3726) ? 0.0 : max(_3726, 0.0));
                                float _3729 = isnan(1.0) ? _4862 : (isnan(_4862) ? 1.0 : min(_4862, 1.0));
                                float _3730 = dot(vec3(_797, _800, _803), vec3(_3722 * _3716, _3722 * _3717, _3722 * _3718));
                                float _4873 = isnan(0.0) ? _3730 : (isnan(_3730) ? 0.0 : max(_3730, 0.0));
                                float _3733 = isnan(1.0) ? _4873 : (isnan(_4873) ? 1.0 : min(_4873, 1.0));
                                float _3737 = ((_3733 * _3733) * (_3715 + (-1.0))) + 1.0;
                                float _3738 = _3675 * _3714;
                                float _3739 = _3738 * _3738;
                                float _3745 = ((1.0 - _3739) * dot(vec3(_797, _800, _803), vec3(_3662, _3663, _3664))) + _3739;
                                float _4884 = isnan(0.0) ? _3745 : (isnan(_3745) ? 0.0 : max(_3745, 0.0));
                                float _3746 = isnan(1.0) ? _4884 : (isnan(_4884) ? 1.0 : min(_4884, 1.0));
                                float _3747 = 1.0 - _3714;
                                float _3757 = (0.5 / (((_3746 * ((_3729 * _3747) + _3714)) + 9.9999999392252902907785028219223e-09) + (((_3746 * _3747) + _3714) * _3729))) * _3746;
                                float _4895 = isnan(0.0) ? _3757 : (isnan(_3757) ? 0.0 : max(_3757, 0.0));
                                float _3767 = (_3692 * _3669) * (((_3715 * 3.1415927410125732421875) * (isnan(1.0) ? _4895 : (isnan(_4895) ? 1.0 : min(_4895, 1.0)))) / ((_3737 * _3737) * ((_3682 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3693 * _3538.z;
                                frontier_phi_88_pred_1 = _3693 * _3538.y;
                                frontier_phi_88_pred_2 = _3693 * _3538.x;
                                frontier_phi_88_pred_3 = _3767 * _3550.z;
                                frontier_phi_88_pred_4 = _3767 * _3550.y;
                                frontier_phi_88_pred_5 = _3767 * _3550.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3776 = frontier_phi_88_pred;
                            _3775 = frontier_phi_88_pred_1;
                            _3774 = frontier_phi_88_pred_2;
                            _3773 = frontier_phi_88_pred_3;
                            _3772 = frontier_phi_88_pred_4;
                            _3771 = frontier_phi_88_pred_5;
                            _3480 = _3774 + _3493;
                            _3481 = _3775 + _3494;
                            _3482 = _3776 + _3495;
                            _3477 = _3771 + _3490;
                            _3478 = _3772 + _3491;
                            _3479 = _3773 + _3492;
                            if (_3497 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3490 = _3477;
                                _3491 = _3478;
                                _3492 = _3479;
                                _3493 = _3480;
                                _3494 = _3481;
                                _3495 = _3482;
                                _3496 = _3497;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3482;
                        frontier_phi_82_pred_1 = _3481;
                        frontier_phi_82_pred_2 = _3480;
                        frontier_phi_82_pred_3 = _3479;
                        frontier_phi_82_pred_4 = _3478;
                        frontier_phi_82_pred_5 = _3477;
                    }
                    _3120 = frontier_phi_82_pred;
                    _3118 = frontier_phi_82_pred_1;
                    _3116 = frontier_phi_82_pred_2;
                    _3114 = frontier_phi_82_pred_3;
                    _3112 = frontier_phi_82_pred_4;
                    _3110 = frontier_phi_82_pred_5;
                    uint _3276 = _3275 + 1u;
                    if (_3276 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3269 = _3110;
                        _3270 = _3112;
                        _3271 = _3114;
                        _3272 = _3116;
                        _3273 = _3118;
                        _3274 = _3120;
                        _3275 = _3276;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3116;
                frontier_phi_63_64_ladder_1 = _3120;
                frontier_phi_63_64_ladder_2 = _3118;
                frontier_phi_63_64_ladder_3 = _3114;
                frontier_phi_63_64_ladder_4 = _3112;
                frontier_phi_63_64_ladder_5 = _3110;
            }
            else
            {
                frontier_phi_63_64_ladder = _2994;
                frontier_phi_63_64_ladder_1 = _2998;
                frontier_phi_63_64_ladder_2 = _2996;
                frontier_phi_63_64_ladder_3 = _2992;
                frontier_phi_63_64_ladder_4 = _2990;
                frontier_phi_63_64_ladder_5 = _2988;
            }
            _3109 = frontier_phi_63_64_ladder_5;
            _3111 = frontier_phi_63_64_ladder_4;
            _3113 = frontier_phi_63_64_ladder_3;
            _3115 = frontier_phi_63_64_ladder;
            _3117 = frontier_phi_63_64_ladder_2;
            _3119 = frontier_phi_63_64_ladder_1;
        }
        float _3124 = isnan(1.0) ? _856 : (isnan(_856) ? 1.0 : min(_856, 1.0));
        _2921 = (_3124 * _3115) + _2433;
        _2923 = (_3124 * _3117) + _2435;
        _2925 = (_3124 * _3119) + _2437;
        _2927 = ((_3109 * _841) * _3124) + _2771;
        _2929 = ((_3111 * _843) * _3124) + _2773;
        _2931 = ((_3113 * _844) * _3124) + _2775;
    }
    else
    {
        _2921 = _2433;
        _2923 = _2435;
        _2925 = _2437;
        _2927 = _2771;
        _2929 = _2773;
        _2931 = _2775;
    }
    float _4911 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _4922 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
    float _4933 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
    float _2948 = ((isnan(1.0) ? _4911 : (isnan(_4911) ? 1.0 : min(_4911, 1.0))) * (_2921 + ((isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0))) * _856))) + ((_2927 + ((isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0))) * _1698)) * cbPerFrame._m0[3u].x);
    float _2949 = ((isnan(1.0) ? _4922 : (isnan(_4922) ? 1.0 : min(_4922, 1.0))) * (_2923 + ((isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0))) * _856))) + ((_2929 + ((isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0))) * _1698)) * cbPerFrame._m0[3u].x);
    float _2950 = ((isnan(1.0) ? _4933 : (isnan(_4933) ? 1.0 : min(_4933, 1.0))) * (_2925 + ((isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0))) * _856))) + ((_2931 + ((isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0))) * _1698)) * cbPerFrame._m0[3u].x);
    uint _2951 = _816 + 6u;
    float _2959 = _778 / cbSceneParam._m0[86u].x;
    float _2960 = _779 / cbSceneParam._m0[86u].y;
    vec4 _2974 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2959, _2960, (log2((isnan(cbSceneParam._m0[77u].w) ? _701 : (isnan(_701) ? cbSceneParam._m0[77u].w : min(_701, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2976 = _2974.x;
    float _2977 = _2974.y;
    float _2978 = _2974.z;
    float _2979 = _2974.w;
    float _3051;
    float _3053;
    float _3055;
    float _3057;
    if (_701 > cbSceneParam._m0[78u].w)
    {
        float _3013 = isnan(_701) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _701 : min(cbSceneParam._m0[80u].w, _701));
        float _3014 = _3013 / _701;
        float _3025 = _3014 * _751;
        float _3026 = _752 * _3014;
        float _3027 = (-0.0) - _3026;
        float _3029 = _3014 * _753;
        float _3031 = (cbSceneParam._m0[77u].w * _3027) / _3013;
        float _3032 = _3031 + cbSceneParam._m0[79u].w;
        float _3033 = cbSceneParam._m0[79u].w - _3026;
        float _3039 = sqrt(((_3025 * _3025) + (_3026 * _3026)) + (_3029 * _3029));
        float _3042 = (1.0 - (cbSceneParam._m0[77u].w / _3013)) * _3039;
        float _3047 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3049 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3226;
        if (abs((_3027 - _3031) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3226 = ((((_3032 > 0.0) ? exp2(_3047 * _3032) : (2.0 - exp2(_3049 * _3032))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3042;
        }
        else
        {
            float _3170 = 1.0 / cbSceneParam._m0[80u].x;
            float _3171 = isnan(_3033) ? _3032 : (isnan(_3032) ? _3033 : max(_3032, _3033));
            float _3172 = isnan(_3033) ? _3032 : (isnan(_3032) ? _3033 : min(_3032, _3033));
            float _3181 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : min(_3171, 0.0));
            float _3182 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : min(_3172, 0.0));
            _3226 = ((abs(_3039 / _3027) * cbSceneParam._m0[80u].y) * ((((_3181 - _3182) * 2.0) - ((exp2(_3047 * (isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0)))) - exp2(_3047 * (isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0))))) * _3170)) - ((exp2(_3049 * _3181) - exp2(_3049 * _3182)) * _3170))) + (_3042 * cbSceneParam._m0[80u].z);
        }
        vec4 _3228 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2959, _2960, 1.0), 0.0);
        float _3237 = exp2((_3226 * (-1.44269502162933349609375)) * (1.0 - _3228.w));
        float _3238 = log2(_3237);
        float _3254 = log2(_2979);
        _3051 = (exp2(_3254 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3238 * cbSceneParam._m0[78u].x)) * _3228.x) / cbSceneParam._m0[78u].x)) + _2976;
        _3053 = (exp2(_3254 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3238 * cbSceneParam._m0[78u].y)) * _3228.y) / cbSceneParam._m0[78u].y)) + _2977;
        _3055 = (exp2(_3254 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3238 * cbSceneParam._m0[78u].z)) * _3228.z) / cbSceneParam._m0[78u].z)) + _2978;
        _3057 = _3237 * _2979;
    }
    else
    {
        _3051 = _2976;
        _3053 = _2977;
        _3055 = _2978;
        _3057 = _2979;
    }
    bool _3264;
    vec4 _3067;
    vec4 _3089;
    float _3091;
    float _3095;
    float _3096;
    float _3097;
    float _3098;
    bool _3108;
    for (;;)
    {
        _3067 = cbMatDynParam._m0[0u];
        float _3069 = roundEven(_3067.y);
        bool _3070 = _3069 == 3.0;
        float _3071 = log2(_3057);
        float _3078 = exp2(_3071 * cbSceneParam._m0[78u].x) * _2948;
        float _3079 = exp2(_3071 * cbSceneParam._m0[78u].y) * _2949;
        float _3080 = exp2(_3071 * cbSceneParam._m0[78u].z) * _2950;
        float _3087 = _767 + (-0.5);
        _3089 = cbMtdParam._m0[1u];
        _3091 = _3089.y * _3087;
        float _3094 = (_3069 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3095 = _3094 * (_3070 ? _3078 : (_3078 + (cbSceneParam._m0[72u].w * _3051)));
        _3096 = _3094 * (_3070 ? _3079 : (_3079 + (cbSceneParam._m0[72u].w * _3053)));
        _3097 = _3094 * (_3070 ? _3080 : (_3080 + (cbSceneParam._m0[72u].w * _3055)));
        _3098 = _3087 * 0.999000012874603271484375;
        _3108 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3108)
        {
            if ((cbInstanceData._m0[_816 + 7u].x + _3098) < 0.5)
            {
                _3264 = true;
                break;
            }
        }
        uint _3205 = _817 + uint(_3067.w);
        if ((cbInstanceData._m0[_3205].w < 1.0) && ((cbInstanceData._m0[_3205].w + _3098) < 0.5))
        {
            _3264 = true;
            break;
        }
        if ((_3091 + 1.0) < _3089.x)
        {
            _3264 = true;
            break;
        }
        _3264 = false;
        break;
    }
    float _3468;
    if (_3264)
    {
        discard_state = true;
        _3468 = 0.0;
    }
    else
    {
        _3468 = cbInstanceData._m0[_2951].w;
    }
    SV_Target.x = _3095;
    SV_Target.y = _3096;
    SV_Target.z = _3097;
    SV_Target.w = _3468;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2951].w;
    discard_exit();
}


