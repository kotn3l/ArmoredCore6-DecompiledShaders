#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_20;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1363;
float _3747;
float _3748;
float _3749;
float _3750;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _262 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _268 = _262.x * cbMtdParam._m0[10u].x;
    float _269 = _262.y * cbMtdParam._m0[10u].y;
    float _270 = _262.z * cbMtdParam._m0[10u].z;
    vec4 _288 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _338 = cbMtdParam._m0[18u].y * texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x;
    float _349 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].x * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].y * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _338)) + 1.0;
    float _3759 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _350 = isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0));
    float _357 = (_350 * ((_288.x * cbMtdParam._m0[11u].x) - _268)) + _268;
    float _358 = (_350 * ((_288.y * cbMtdParam._m0[11u].y) - _269)) + _269;
    float _359 = (_350 * ((_288.z * cbMtdParam._m0[11u].z) - _270)) + _270;
    vec4 _377 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _404 = ((cbMtdParam._m0[17u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _338)) + 1.0;
    float _3770 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _405 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
    float _412 = (_405 * ((_377.x * cbMtdParam._m0[12u].x) - _357)) + _357;
    float _413 = (_405 * ((_377.y * cbMtdParam._m0[12u].y) - _358)) + _358;
    float _414 = (_405 * ((_377.z * cbMtdParam._m0[12u].z) - _359)) + _359;
    vec4 _431 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _456 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[18u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[18u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _338)) + 1.0;
    float _3781 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _457 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
    float _464 = (_457 * ((_431.x * cbMtdParam._m0[13u].x) - _412)) + _412;
    float _465 = (_457 * ((_431.y * cbMtdParam._m0[13u].y) - _413)) + _413;
    float _466 = (_457 * ((_431.z * cbMtdParam._m0[13u].z) - _414)) + _414;
    vec4 _486 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _515 = (TEXCOORD_5.x - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.z) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.w) + cbTextureTilingScale._m0[18u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].z + 1.0);
    float _3792 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _516 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
    float _523 = (_516 * ((_486.x * cbMtdParam._m0[14u].x) - _464)) + _464;
    float _524 = (_516 * ((_486.y * cbMtdParam._m0[14u].y) - _465)) + _465;
    float _525 = (_516 * ((_486.z * cbMtdParam._m0[14u].z) - _466)) + _466;
    vec4 _538 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _540 = _538.x;
    float _558 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _540) * _350) + _540;
    float _576 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _558) * _405) + _558;
    float _593 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _576) * _457) + _576;
    float _595 = _593 - (_593 * TEXCOORD_5.x);
    vec4 _608 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _630 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _632 = _630.x;
    float _633 = _630.y;
    float _636 = cbMtdParam._m0[17u].y * _630.z;
    vec4 _648 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _657 = (((cbMtdParam._m0[17u].x * _648.z) - _636) * _350) + _636;
    vec4 _670 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _682 = (((cbMtdParam._m0[16u].w * _670.z) - _657) * _405) + _657;
    vec4 _695 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _704 = (((cbMtdParam._m0[16u].z * _695.z) - _682) * _457) + _682;
    float _709 = ((cbMtdParam._m0[16u].x * TEXCOORD_5.x) * ((_608.z * cbMtdParam._m0[17u].z) - _704)) + _704;
    vec4 _722 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _734 = ((_648.x - _632) * _350) + _632;
    float _735 = ((_648.y - _633) * _350) + _633;
    float _740 = ((_670.x - _734) * _405) + _734;
    float _741 = ((_670.y - _735) * _405) + _735;
    float _750 = ((((_695.x - _740) * _457) + _740) * 2.0) + (-1.0);
    float _751 = ((((_695.y - _741) * _457) + _741) * 2.0) + (-1.0);
    float _752 = dot(vec2(_750, _751), vec2(_750, _751));
    float _3803 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _757 = sqrt(1.0 - (isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0))));
    float _767 = ((((_722.x * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _750) + ((((_608.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[15u].y);
    float _768 = ((((_722.y * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _751) + ((((_608.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[15u].y);
    float _771 = fma(_757, _232 * NORMAL.x, fma(_768, _239 * TANGENT.x, (_225 * _217) * _767));
    float _774 = fma(_757, _232 * NORMAL.y, fma(_768, _239 * TANGENT.y, (_225 * _218) * _767));
    float _777 = fma(_757, _232 * NORMAL.z, fma(_768, _239 * TANGENT.z, (_225 * _219) * _767));
    float _781 = inversesqrt(dot(vec3(_771, _774, _777), vec3(_771, _774, _777)));
    float _782 = _781 * _771;
    float _783 = _781 * _774;
    float _784 = _781 * _777;
    float _3814 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _785 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
    float _3825 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _3836 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _3847 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _3858 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _789 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
    float _805 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _845 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _855 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _845);
    float _856 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _845);
    float _857 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _845);
    float _861 = inversesqrt(dot(vec3(_855, _856, _857), vec3(_855, _856, _857)));
    float _862 = _855 * _861;
    float _863 = _856 * _861;
    float _864 = _857 * _861;
    vec4 _869 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _871 = _869.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1043 = sqrt(((_855 * _855) + (_856 * _856)) + (_857 * _857));
        float _1049 = (cbMatDynParam._m0[5u].x * _1043) + cbMatDynParam._m0[5u].y;
        float _3869 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
        float _1054 = (cbMatDynParam._m0[5u].z * _1043) + cbMatDynParam._m0[5u].w;
        float _3880 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0))) - _1050)) + _1050) < ((_871 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _882 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _883 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _901 = fma(_784, cbSceneParam._m0[5u].z, fma(_783, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _782));
    float _904 = fma(_784, cbSceneParam._m0[6u].z, fma(_783, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _782));
    float _907 = fma(_784, cbSceneParam._m0[7u].z, fma(_783, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _782));
    uint _920 = uint(roundEven(NORMAL.w)) * 13u;
    uint _921 = _920 + 9u;
    uint _922 = _921 + uint(cbMatDynParam._m0[0u].w);
    float _928 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0)))) * cbInstanceData._m0[_922].x;
    float _929 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0)))) * cbInstanceData._m0[_922].y;
    float _930 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0)))) * cbInstanceData._m0[_922].z;
    float _3891 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
    float _931 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
    float _3902 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
    float _932 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
    float _3913 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _933 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
    float _934 = 1.0 - _789;
    float _935 = _931 * _934;
    float _936 = _932 * _934;
    float _937 = _933 * _934;
    float _942 = (_931 + (-0.039999999105930328369140625)) * _789;
    float _943 = (_932 + (-0.039999999105930328369140625)) * _789;
    float _944 = (_933 + (-0.039999999105930328369140625)) * _789;
    float _945 = _942 + 0.039999999105930328369140625;
    float _947 = _943 + 0.039999999105930328369140625;
    float _948 = _944 + 0.039999999105930328369140625;
    vec4 _957 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _882, cbSceneParam._m0[86u].y * _883));
    float _960 = _957.x * TEXCOORD_5.w;
    float _961 = dot(vec3(_782, _783, _784), vec3(_862, _863, _864));
    float _964 = _961 * 2.0;
    float _968 = (_964 * _782) - _862;
    float _969 = (_964 * _783) - _863;
    float _970 = (_964 * _784) - _864;
    float _974 = abs(dot(vec3(_862, _863, _864), vec3(_782, _783, _784)));
    float _3924 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
    float _976 = sqrt(_785);
    float _989 = exp2((_976 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_976 * 3.0));
    float _995 = (1.0 - _989) * ((_976 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _996 = _989 * _976;
    float _1024 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1028 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1032 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1362;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1087 = fma(_1032, cbModelParam._m0[26u].z, fma(_1028, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1024));
        float _1091 = fma(_1032, cbModelParam._m0[27u].z, fma(_1028, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1024));
        float _1095 = fma(_1032, cbModelParam._m0[28u].z, fma(_1028, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1024));
        float _1120 = _1024 + _782;
        float _1121 = _1028 + _783;
        float _1122 = _1032 + _784;
        float _1132 = fma(_1122, cbModelParam._m0[26u].z, fma(_1121, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1120)) - _1087;
        float _1133 = fma(_1122, cbModelParam._m0[27u].z, fma(_1121, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1120)) - _1091;
        float _1134 = fma(_1122, cbModelParam._m0[28u].z, fma(_1121, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1120)) - _1095;
        float _1138 = inversesqrt(dot(vec3(_1132, _1133, _1134), vec3(_1132, _1133, _1134)));
        float _1151 = ((_1138 * _1132) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1087 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1152 = ((_1138 * _1133) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1091 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1153 = ((_1138 * _1134) / cbModelParam._m0[34u].z) + ((((((_1095 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        vec4 _1170 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        vec4 _1177 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        float _1190 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1191 = _1190 * (_1156.x + (-0.5));
        float _1192 = _1190 * (_1156.y + (-0.5));
        float _1193 = _1190 * (_1156.z + (-0.5));
        float _1200 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1201 = _1200 * (_1163.x + (-0.5));
        float _1202 = _1200 * (_1163.y + (-0.5));
        float _1203 = _1200 * (_1163.z + (-0.5));
        float _1210 = exp2((_1170.w + (-0.5)) * 20.0) * 2.0;
        float _1211 = _1210 * (_1170.x + (-0.5));
        float _1212 = _1210 * (_1170.y + (-0.5));
        float _1213 = _1210 * (_1170.z + (-0.5));
        float _1220 = exp2((_1177.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1177.x + (-0.5));
        float _1222 = _1220 * (_1177.y + (-0.5));
        float _1223 = _1220 * (_1177.z + (-0.5));
        float _1224 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1225 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1226 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1227 = _1191 * 0.5;
        float _1228 = _1201 * 0.5;
        float _1229 = _1211 * 0.5;
        float _1230 = dot(vec3(_1227, _1228, _1229), vec3(_1227, _1228, _1229));
        float _1235 = (_1230 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1230);
        float _1244 = (dot(vec3(_782, _783, _784), vec3(_1235 * _1227, _1235 * _1228, _1235 * _1229)) + 1.0) * 0.5;
        float _3950 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1254 = sqrt(((_1228 * _1228) + (_1227 * _1227)) + (_1229 * _1229)) / (_1224 + 9.9999997473787516355514526367188e-06);
        float _3961 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _1256 = _1255 * 2.0;
        float _1260 = (1.0 - _1255) / (_1255 + 1.0);
        float _3972 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
        float _1270 = ((((1.0 - _1261) * (_1256 + 2.0)) * exp2(log2(isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * (_1256 + 1.0))) + _1261) * _1224;
        float _1271 = _1192 * 0.5;
        float _1272 = _1202 * 0.5;
        float _1273 = _1212 * 0.5;
        float _1274 = dot(vec3(_1271, _1272, _1273), vec3(_1271, _1272, _1273));
        float _1279 = (_1274 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1274);
        float _1287 = (dot(vec3(_782, _783, _784), vec3(_1279 * _1271, _1279 * _1272, _1279 * _1273)) + 1.0) * 0.5;
        float _3983 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1296 = sqrt(((_1272 * _1272) + (_1271 * _1271)) + (_1273 * _1273)) / (_1225 + 9.9999997473787516355514526367188e-06);
        float _3994 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
        float _1298 = _1297 * 2.0;
        float _1302 = (1.0 - _1297) / (_1297 + 1.0);
        float _4005 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
        float _1312 = ((((1.0 - _1303) * (_1298 + 2.0)) * exp2(log2(isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * (_1298 + 1.0))) + _1303) * _1225;
        float _1313 = _1193 * 0.5;
        float _1314 = _1203 * 0.5;
        float _1315 = _1213 * 0.5;
        float _1316 = dot(vec3(_1313, _1314, _1315), vec3(_1313, _1314, _1315));
        float _1321 = (_1316 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1316);
        float _1329 = (dot(vec3(_782, _783, _784), vec3(_1321 * _1313, _1321 * _1314, _1321 * _1315)) + 1.0) * 0.5;
        float _4016 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1338 = sqrt(((_1314 * _1314) + (_1313 * _1313)) + (_1315 * _1315)) / (_1226 + 9.9999997473787516355514526367188e-06);
        float _4027 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
        float _1340 = _1339 * 2.0;
        float _1344 = (1.0 - _1339) / (_1339 + 1.0);
        float _4038 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
        float _1354 = ((((1.0 - _1345) * (_1340 + 2.0)) * exp2(log2(isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * (_1340 + 1.0))) + _1345) * _1226;
        _1362 = _1193;
        _1364 = _1192;
        _1365 = _1191;
        _1366 = _1203;
        _1367 = _1202;
        _1368 = _1201;
        _1369 = _1213;
        _1370 = _1212;
        _1371 = _1211;
        _1372 = _1226;
        _1373 = _1225;
        _1374 = _1224;
        _1375 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0)));
        _1376 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)));
        _1377 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)));
    }
    else
    {
        _1362 = _1363;
        _1364 = _1363;
        _1365 = _1363;
        _1366 = _1363;
        _1367 = _1363;
        _1368 = _1363;
        _1369 = _1363;
        _1370 = _1363;
        _1371 = _1363;
        _1372 = _1363;
        _1373 = _1363;
        _1374 = _1363;
        _1375 = 0.0;
        _1376 = 0.0;
        _1377 = 0.0;
    }
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1406 = fma(_1032, cbModelParam._m0[30u].z, fma(_1028, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1024));
        float _1410 = fma(_1032, cbModelParam._m0[31u].z, fma(_1028, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1024));
        float _1414 = fma(_1032, cbModelParam._m0[32u].z, fma(_1028, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1024));
        float _1437 = _1024 + _782;
        float _1438 = _1028 + _783;
        float _1439 = _1032 + _784;
        float _1449 = fma(_1439, cbModelParam._m0[30u].z, fma(_1438, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1437)) - _1406;
        float _1450 = fma(_1439, cbModelParam._m0[31u].z, fma(_1438, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1437)) - _1410;
        float _1451 = fma(_1439, cbModelParam._m0[32u].z, fma(_1438, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1437)) - _1414;
        float _1455 = inversesqrt(dot(vec3(_1449, _1450, _1451), vec3(_1449, _1450, _1451)));
        float _1468 = ((_1455 * _1449) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1406 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1469 = ((_1455 * _1450) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1410 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1470 = ((_1455 * _1451) / cbModelParam._m0[35u].z) + ((((((_1414 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1472 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1468, _1469, _1470), 0.0);
        vec4 _1479 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1468, _1469, _1470), 0.0);
        vec4 _1486 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1468, _1469, _1470), 0.0);
        vec4 _1493 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1468, _1469, _1470), 0.0);
        float _1505 = exp2((_1472.w + (-0.5)) * 20.0) * 2.0;
        float _1506 = _1505 * (_1472.x + (-0.5));
        float _1507 = _1505 * (_1472.y + (-0.5));
        float _1508 = _1505 * (_1472.z + (-0.5));
        float _1515 = exp2((_1479.w + (-0.5)) * 20.0) * 2.0;
        float _1516 = _1515 * (_1479.x + (-0.5));
        float _1517 = _1515 * (_1479.y + (-0.5));
        float _1518 = _1515 * (_1479.z + (-0.5));
        float _1525 = exp2((_1486.w + (-0.5)) * 20.0) * 2.0;
        float _1526 = _1525 * (_1486.x + (-0.5));
        float _1527 = _1525 * (_1486.y + (-0.5));
        float _1528 = _1525 * (_1486.z + (-0.5));
        float _1535 = exp2((_1493.w + (-0.5)) * 20.0) * 2.0;
        float _1536 = _1535 * (_1493.x + (-0.5));
        float _1537 = _1535 * (_1493.y + (-0.5));
        float _1538 = _1535 * (_1493.z + (-0.5));
        float _1539 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
        float _1540 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
        float _1541 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1542 = _1506 * 0.5;
        float _1543 = _1516 * 0.5;
        float _1544 = _1526 * 0.5;
        float _1545 = dot(vec3(_1542, _1543, _1544), vec3(_1542, _1543, _1544));
        float _1550 = (_1545 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1545);
        float _1558 = (dot(vec3(_782, _783, _784), vec3(_1550 * _1542, _1550 * _1543, _1550 * _1544)) + 1.0) * 0.5;
        float _4079 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1567 = sqrt(((_1543 * _1543) + (_1542 * _1542)) + (_1544 * _1544)) / (_1539 + 9.9999997473787516355514526367188e-06);
        float _4090 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1568 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
        float _1569 = _1568 * 2.0;
        float _1573 = (1.0 - _1568) / (_1568 + 1.0);
        float _4101 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1574 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
        float _1583 = ((((1.0 - _1574) * (_1569 + 2.0)) * exp2(log2(isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0))) * (_1569 + 1.0))) + _1574) * _1539;
        float _1584 = _1507 * 0.5;
        float _1585 = _1517 * 0.5;
        float _1586 = _1527 * 0.5;
        float _1587 = dot(vec3(_1584, _1585, _1586), vec3(_1584, _1585, _1586));
        float _1592 = (_1587 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1587);
        float _1600 = (dot(vec3(_782, _783, _784), vec3(_1592 * _1584, _1592 * _1585, _1592 * _1586)) + 1.0) * 0.5;
        float _4112 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1609 = sqrt(((_1585 * _1585) + (_1584 * _1584)) + (_1586 * _1586)) / (_1540 + 9.9999997473787516355514526367188e-06);
        float _4123 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1610 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
        float _1611 = _1610 * 2.0;
        float _1615 = (1.0 - _1610) / (_1610 + 1.0);
        float _4134 = isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0));
        float _1616 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
        float _1625 = ((((1.0 - _1616) * (_1611 + 2.0)) * exp2(log2(isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * (_1611 + 1.0))) + _1616) * _1540;
        float _1626 = _1508 * 0.5;
        float _1627 = _1518 * 0.5;
        float _1628 = _1528 * 0.5;
        float _1629 = dot(vec3(_1626, _1627, _1628), vec3(_1626, _1627, _1628));
        float _1634 = (_1629 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1629);
        float _1642 = (dot(vec3(_782, _783, _784), vec3(_1634 * _1626, _1634 * _1627, _1634 * _1628)) + 1.0) * 0.5;
        float _4145 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1651 = sqrt(((_1627 * _1627) + (_1626 * _1626)) + (_1628 * _1628)) / (_1541 + 9.9999997473787516355514526367188e-06);
        float _4156 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1652 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1653 = _1652 * 2.0;
        float _1657 = (1.0 - _1652) / (_1652 + 1.0);
        float _4167 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
        float _1658 = isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0));
        float _1667 = ((((1.0 - _1658) * (_1653 + 2.0)) * exp2(log2(isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_1653 + 1.0))) + _1658) * _1541;
        _1675 = _1508;
        _1676 = _1507;
        _1677 = _1506;
        _1678 = _1518;
        _1679 = _1517;
        _1680 = _1516;
        _1681 = _1528;
        _1682 = _1527;
        _1683 = _1526;
        _1684 = _1541;
        _1685 = _1540;
        _1686 = _1539;
        _1687 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0)));
        _1688 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0)));
        _1689 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0)));
    }
    else
    {
        _1675 = _1363;
        _1676 = _1363;
        _1677 = _1363;
        _1678 = _1363;
        _1679 = _1363;
        _1680 = _1363;
        _1681 = _1363;
        _1682 = _1363;
        _1683 = _1363;
        _1684 = _1363;
        _1685 = _1363;
        _1686 = _1363;
        _1687 = 0.0;
        _1688 = 0.0;
        _1689 = 0.0;
    }
    float _1699 = (cbModelParam._m0[1u].x * (_1687 - _1375)) + _1375;
    float _1700 = (cbModelParam._m0[1u].x * (_1688 - _1376)) + _1376;
    float _1701 = (cbModelParam._m0[1u].x * (_1689 - _1377)) + _1377;
    float _1722 = fma(_1701, cbSceneParam._m0[89u].z, fma(_1700, cbSceneParam._m0[89u].y, _1699 * cbSceneParam._m0[89u].x));
    float _1725 = fma(_1701, cbSceneParam._m0[90u].z, fma(_1700, cbSceneParam._m0[90u].y, _1699 * cbSceneParam._m0[90u].x));
    float _1728 = fma(_1701, cbSceneParam._m0[91u].z, fma(_1700, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1699));
    float _1743 = _968 * 0.5;
    float _1744 = _969 * 0.5;
    float _1745 = _970 * 0.5;
    float _1746 = dot(vec4(_1743, _1744, _1745, 1.0), vec4(_1677, _1680, _1683, _1686));
    float _1749 = dot(vec4(_1743, _1744, _1745, 1.0), vec4(_1676, _1679, _1682, _1685));
    float _1752 = dot(vec4(_1743, _1744, _1745, 1.0), vec4(_1675, _1678, _1681, _1684));
    float _1786;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1759 = dot(vec4(_1743, _1744, _1745, 1.0), vec4(_1362, _1366, _1369, _1372));
        float _1763 = dot(vec4(_1743, _1744, _1745, 1.0), vec4(_1364, _1367, _1370, _1373));
        float _1767 = dot(vec4(_1743, _1744, _1745, 1.0), vec4(_1365, _1368, _1371, _1374));
        float _1774 = dot(vec4(cbModelParam._m0[39u]), vec4(_1743, _1744, _1745, 1.0));
        _1786 = dot(vec3(isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0)), isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0)), isnan(0.0) ? _1759 : (isnan(_1759) ? 0.0 : max(_1759, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1774) ? 0.0 : (isnan(0.0) ? _1774 : max(0.0, _1774))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1786 = 1.0;
    }
    float _1797;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1788 = dot(vec4(cbModelParam._m0[40u]), vec4(_1743, _1744, _1745, 1.0));
        _1797 = dot(vec3(isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0)), isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0)), isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1788) ? 0.0 : (isnan(0.0) ? _1788 : max(0.0, _1788))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1797 = 1.0;
    }
    float _1801 = (_1797 * cbModelParam._m0[1u].x) + (_1786 * (1.0 - cbModelParam._m0[1u].x));
    float _1811 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _785);
    float _1812 = isnan(_1811) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1811 : min(cbModelParam._m0[25u].z, _1811));
    float _1892;
    float _1894;
    float _1896;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1859 = fma(_1032, cbModelParam._m0[13u].z, fma(_1028, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1024)) + cbModelParam._m0[13u].w;
        float _1863 = fma(_1032, cbModelParam._m0[14u].z, fma(_1028, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1024)) + cbModelParam._m0[14u].w;
        float _1867 = fma(_1032, cbModelParam._m0[15u].z, fma(_1028, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1024)) + cbModelParam._m0[15u].w;
        float _1870 = fma(_970, cbModelParam._m0[13u].z, fma(_969, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _968));
        float _1873 = fma(_970, cbModelParam._m0[14u].z, fma(_969, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _968));
        float _1876 = fma(_970, cbModelParam._m0[15u].z, fma(_969, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _968));
        float _1904;
        if (_1870 > 0.0)
        {
            _1904 = abs((1.0 - _1859) / _1870);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1870 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1859 + 1.0) / _1870);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1904 = frontier_phi_17_15_ladder;
        }
        float _2109;
        if (_1873 > 0.0)
        {
            _2109 = abs((1.0 - _1863) / _1873);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1873 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1863 + 1.0) / _1873);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2109 = frontier_phi_26_22_ladder;
        }
        float _2363;
        if (_1876 > 0.0)
        {
            _2363 = abs((1.0 - _1867) / _1876);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1876 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1867 + 1.0) / _1876);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2363 = frontier_phi_38_33_ladder;
        }
        float _2365 = isnan(_2109) ? _1904 : (isnan(_1904) ? _2109 : min(_1904, _2109));
        float _2366 = isnan(_2363) ? _2365 : (isnan(_2365) ? _2363 : min(_2365, _2363));
        float _2370 = (_2366 * _1870) + _1859;
        float _2371 = (_2366 * _1873) + _1863;
        float _2372 = (_2366 * _1876) + _1867;
        float _2373 = _2366 * 9.9999997473787516355514526367188e-05;
        float _2375 = (-1.0) - _2373;
        float _2377 = _2373 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2372 > _2377) || ((_2372 < _2375) || ((_2371 > _2377) || ((_2371 < _2375) || ((_2370 < _2375) || (_2370 > _2377))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2500 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2372, cbModelParam._m0[9u].z, fma(_2371, cbModelParam._m0[9u].y, _2370 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2372, cbModelParam._m0[10u].z, fma(_2371, cbModelParam._m0[10u].y, _2370 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2372, cbModelParam._m0[11u].z, fma(_2371, cbModelParam._m0[11u].y, _2370 * cbModelParam._m0[11u].x))), _1812);
            frontier_phi_16_38_ladder = _2500.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2500.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2500.x * cbModelParam._m0[1u].y;
        }
        _1892 = frontier_phi_16_38_ladder_2;
        _1894 = frontier_phi_16_38_ladder_1;
        _1896 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1880 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_968, _969, _970), _1812);
        _1892 = _1880.x * cbModelParam._m0[1u].y;
        _1894 = _1880.y * cbModelParam._m0[1u].y;
        _1896 = _1880.z * cbModelParam._m0[1u].y;
    }
    float _1900 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _785);
    float _1901 = isnan(_1900) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1900 : min(cbModelParam._m0[25u].w, _1900));
    float _1992;
    float _1994;
    float _1996;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1956 = fma(_1032, cbModelParam._m0[21u].z, fma(_1028, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1024)) + cbModelParam._m0[21u].w;
        float _1960 = fma(_1032, cbModelParam._m0[22u].z, fma(_1028, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1024)) + cbModelParam._m0[22u].w;
        float _1964 = fma(_1032, cbModelParam._m0[23u].z, fma(_1028, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1024)) + cbModelParam._m0[23u].w;
        float _1967 = fma(_970, cbModelParam._m0[21u].z, fma(_969, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _968));
        float _1970 = fma(_970, cbModelParam._m0[22u].z, fma(_969, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _968));
        float _1973 = fma(_970, cbModelParam._m0[23u].z, fma(_969, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _968));
        float _2114;
        if (_1967 > 0.0)
        {
            _2114 = abs((1.0 - _1956) / _1967);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1967 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1956 + 1.0) / _1967);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2114 = frontier_phi_28_24_ladder;
        }
        float _2390;
        if (_1970 > 0.0)
        {
            _2390 = abs((1.0 - _1960) / _1970);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1970 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1960 + 1.0) / _1970);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2390 = frontier_phi_40_35_ladder;
        }
        float _2603;
        if (_1973 > 0.0)
        {
            _2603 = abs((1.0 - _1964) / _1973);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1973 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1964 + 1.0) / _1973);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2603 = frontier_phi_49_46_ladder;
        }
        float _2605 = isnan(_2390) ? _2114 : (isnan(_2114) ? _2390 : min(_2114, _2390));
        float _2606 = isnan(_2603) ? _2605 : (isnan(_2605) ? _2603 : min(_2605, _2603));
        float _2610 = (_2606 * _1967) + _1956;
        float _2611 = (_2606 * _1970) + _1960;
        float _2612 = (_2606 * _1973) + _1964;
        float _2613 = _2606 * 9.9999997473787516355514526367188e-05;
        float _2614 = (-1.0) - _2613;
        float _2616 = _2613 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2612 > _2616) || ((_2612 < _2614) || ((_2611 > _2616) || ((_2611 < _2614) || ((_2610 < _2614) || (_2610 > _2616))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2811 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2612, cbModelParam._m0[17u].z, fma(_2611, cbModelParam._m0[17u].y, _2610 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2612, cbModelParam._m0[18u].z, fma(_2611, cbModelParam._m0[18u].y, _2610 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2612, cbModelParam._m0[19u].z, fma(_2611, cbModelParam._m0[19u].y, _2610 * cbModelParam._m0[19u].x))), _1901);
            frontier_phi_25_49_ladder = _2811.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2811.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2811.x * cbModelParam._m0[1u].z;
        }
        _1992 = frontier_phi_25_49_ladder_2;
        _1994 = frontier_phi_25_49_ladder_1;
        _1996 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1976 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_968, _969, _970), _1901);
        _1992 = _1976.x * cbModelParam._m0[1u].z;
        _1994 = _1976.y * cbModelParam._m0[1u].z;
        _1996 = _1976.z * cbModelParam._m0[1u].z;
    }
    float _2009 = (((_995 * _945) + _996) * _960) * ((cbModelParam._m0[1u].w * (_1992 - _1892)) + _1892);
    float _2011 = (((_995 * _947) + _996) * _960) * ((cbModelParam._m0[1u].w * (_1994 - _1894)) + _1894);
    float _2013 = (((_995 * _948) + _996) * _960) * ((cbModelParam._m0[1u].w * (_1996 - _1896)) + _1896);
    float _2016 = fma(_2013, cbSceneParam._m0[89u].z, fma(_2011, cbSceneParam._m0[89u].y, _2009 * cbSceneParam._m0[89u].x));
    float _2019 = fma(_2013, cbSceneParam._m0[90u].z, fma(_2011, cbSceneParam._m0[90u].y, _2009 * cbSceneParam._m0[90u].x));
    float _2022 = fma(_2013, cbSceneParam._m0[91u].z, fma(_2011, cbSceneParam._m0[91u].y, _2009 * cbSceneParam._m0[91u].x));
    uvec4 _2032 = floatBitsToUint(cbInstanceData._m0[_920 + 5u]);
    uint _2034 = _2032.x * 14u;
    uint _2035 = _2034 + 13u;
    float _2042 = _960 + (-1.0);
    float _2047 = (cbLight._m0[_2035].x * _2042) + 1.0;
    float _2048 = (cbLight._m0[_2035].y * _2042) + 1.0;
    float _2049 = (cbLight._m0[_2035].z * _2042) + 1.0;
    float _2050 = (cbLight._m0[_2035].w * _2042) + 1.0;
    uint _2051 = _2034 + 5u;
    float _2057 = isnan(1.0) ? _2048 : (isnan(_2048) ? 1.0 : min(_2048, 1.0));
    uint _2061 = _2034 + 4u;
    float _2068 = isnan(1.0) ? _2047 : (isnan(_2047) ? 1.0 : min(_2047, 1.0));
    uint _2072 = _2034 | 1u;
    float _2083 = dot(vec3(cbLight._m0[_2034].xyz), vec3(_782, _783, _784));
    float _2086 = dot(vec3(cbLight._m0[_2072].xyz), vec3(_782, _783, _784));
    float _4303 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
    float _4314 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
    float _2091 = (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * 0.3183098733425140380859375;
    float _2093 = (isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) * 0.3183098733425140380859375;
    float _2100 = ((cbLight._m0[_2051].x * _2057) * _2093) + ((cbLight._m0[_2061].x * _2068) * _2091);
    float _2101 = ((_2057 * cbLight._m0[_2051].y) * _2093) + ((_2068 * cbLight._m0[_2061].y) * _2091);
    float _2102 = ((_2057 * cbLight._m0[_2051].z) * _2093) + ((_2068 * cbLight._m0[_2061].z) * _2091);
    uvec4 _2106 = floatBitsToUint(cbLight._m0[_2034 + 12u]);
    bool _2108 = _2106.x == 0u;
    float _2119;
    float _2121;
    float _2123;
    if (_2108)
    {
        _2119 = _2100;
        _2121 = _2101;
        _2123 = _2102;
    }
    else
    {
        uint _2127 = _2034 + 6u;
        float _2143 = (dot(vec3(cbLight._m0[_2034 + 2u].xyz), vec3(_782, _783, _784)) * 0.5) + 0.5;
        float _2144 = _2143 * _2143;
        float _4325 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
        float _2145 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _2146 = isnan(1.0) ? _2049 : (isnan(_2049) ? 1.0 : min(_2049, 1.0));
        _2119 = (((cbLight._m0[_2127].x * 0.3183098733425140380859375) * _2145) * _2146) + _2100;
        _2121 = (((cbLight._m0[_2127].y * 0.3183098733425140380859375) * _2145) * _2146) + _2101;
        _2123 = (((cbLight._m0[_2127].z * 0.3183098733425140380859375) * _2145) * _2146) + _2102;
    }
    bool _2126 = _2106.y == 0u;
    float _2164;
    float _2166;
    float _2168;
    if (_2126)
    {
        _2164 = _2119;
        _2166 = _2121;
        _2168 = _2123;
    }
    else
    {
        uint _2334 = _2034 + 7u;
        float _2350 = (dot(vec3(cbLight._m0[_2034 + 3u].xyz), vec3(_782, _783, _784)) * 0.5) + 0.5;
        float _2351 = _2350 * _2350;
        float _4341 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
        float _2352 = isnan(1.0) ? _4341 : (isnan(_4341) ? 1.0 : min(_4341, 1.0));
        float _2353 = isnan(1.0) ? _2050 : (isnan(_2050) ? 1.0 : min(_2050, 1.0));
        _2164 = (((cbLight._m0[_2334].x * 0.3183098733425140380859375) * _2352) * _2353) + _2119;
        _2166 = (((cbLight._m0[_2334].y * 0.3183098733425140380859375) * _2352) * _2353) + _2121;
        _2168 = (((cbLight._m0[_2334].z * 0.3183098733425140380859375) * _2352) * _2353) + _2123;
    }
    uint _2171 = _2034 + 8u;
    float _2184 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2034].w)) * _785) * 0.949999988079071044921875);
    float _2185 = _2184 * _2184;
    float _2186 = cbLight._m0[_2034].x + _862;
    float _2187 = cbLight._m0[_2034].y + _863;
    float _2188 = cbLight._m0[_2034].z + _864;
    float _2192 = inversesqrt(dot(vec3(_2186, _2187, _2188), vec3(_2186, _2187, _2188)));
    float _2193 = _2192 * _2186;
    float _2194 = _2192 * _2187;
    float _2195 = _2192 * _2188;
    float _2196 = dot(vec3(_782, _783, _784), vec3(cbLight._m0[_2034].xyz));
    float _4357 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
    float _2199 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
    float _4368 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
    float _2200 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
    float _2201 = dot(vec3(_782, _783, _784), vec3(_2193, _2194, _2195));
    float _4379 = isnan(0.0) ? _2201 : (isnan(_2201) ? 0.0 : max(_2201, 0.0));
    float _2204 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
    float _2205 = dot(vec3(cbLight._m0[_2034].xyz), vec3(_2193, _2194, _2195));
    float _4390 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _2209 = _2185 * _2185;
    float _2213 = ((_2204 * _2204) * (_2209 + (-1.0))) + 1.0;
    float _2221 = exp2(log2(1.0 - (isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0)))) * 5.0);
    float _2222 = 0.959999978542327880859375 - _942;
    float _2224 = 0.959999978542327880859375 - _943;
    float _2225 = 0.959999978542327880859375 - _944;
    float _2232 = 1.0 - _2185;
    float _2243 = (0.5 / (((_2200 * ((_2199 * _2232) + _2185)) + 9.9999999392252902907785028219223e-09) + (((_2200 * _2232) + _2185) * _2199))) * _2199;
    float _4401 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2245 = (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0))) * (_2209 / ((_2213 * _2213) * 3.141590118408203125));
    uint _2256 = _2034 + 9u;
    float _2267 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2072].w)) * _785) * 0.949999988079071044921875);
    float _2268 = _2267 * _2267;
    float _2269 = cbLight._m0[_2072].x + _862;
    float _2270 = cbLight._m0[_2072].y + _863;
    float _2271 = cbLight._m0[_2072].z + _864;
    float _2275 = inversesqrt(dot(vec3(_2269, _2270, _2271), vec3(_2269, _2270, _2271)));
    float _2276 = _2275 * _2269;
    float _2277 = _2275 * _2270;
    float _2278 = _2275 * _2271;
    float _2279 = dot(vec3(_782, _783, _784), vec3(cbLight._m0[_2072].xyz));
    float _4412 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
    float _2282 = isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0));
    float _2283 = dot(vec3(_782, _783, _784), vec3(_2276, _2277, _2278));
    float _4423 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
    float _2286 = isnan(1.0) ? _4423 : (isnan(_4423) ? 1.0 : min(_4423, 1.0));
    float _2287 = dot(vec3(cbLight._m0[_2072].xyz), vec3(_2276, _2277, _2278));
    float _4434 = isnan(0.0) ? _2287 : (isnan(_2287) ? 0.0 : max(_2287, 0.0));
    float _2291 = _2268 * _2268;
    float _2295 = ((_2286 * _2286) * (_2291 + (-1.0))) + 1.0;
    float _2302 = exp2(log2(1.0 - (isnan(1.0) ? _4434 : (isnan(_4434) ? 1.0 : min(_4434, 1.0)))) * 5.0);
    float _2309 = 1.0 - _2268;
    float _2319 = (0.5 / (((_2200 * ((_2282 * _2309) + _2268)) + 9.9999999392252902907785028219223e-09) + (((_2200 * _2309) + _2268) * _2282))) * _2282;
    float _4445 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
    float _2321 = (isnan(1.0) ? _4445 : (isnan(_4445) ? 1.0 : min(_4445, 1.0))) * (_2291 / ((_2295 * _2295) * 3.141590118408203125));
    float _2331 = (((((_2302 * _2222) + _945) * cbLight._m0[_2256].x) * _2321) * _2057) + (((((_2221 * _2222) + _945) * cbLight._m0[_2171].x) * _2245) * _2068);
    float _2332 = (((((_2302 * _2224) + _947) * cbLight._m0[_2256].y) * _2321) * _2057) + (((((_2221 * _2224) + _947) * cbLight._m0[_2171].y) * _2245) * _2068);
    float _2333 = (((((_2302 * _2225) + _948) * cbLight._m0[_2256].z) * _2321) * _2057) + (((((_2221 * _2225) + _948) * cbLight._m0[_2171].z) * _2245) * _2068);
    float _2395;
    float _2397;
    float _2399;
    if (_2108)
    {
        _2395 = _2331;
        _2397 = _2332;
        _2399 = _2333;
    }
    else
    {
        uint _2401 = _2034 + 2u;
        uint _2405 = _2034 + 10u;
        float _2419 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2401].w)) * _785) * 0.949999988079071044921875);
        float _2420 = _2419 * _2419;
        float _2421 = cbLight._m0[_2401].x + _862;
        float _2422 = cbLight._m0[_2401].y + _863;
        float _2423 = cbLight._m0[_2401].z + _864;
        float _2427 = inversesqrt(dot(vec3(_2421, _2422, _2423), vec3(_2421, _2422, _2423)));
        float _2428 = _2427 * _2421;
        float _2429 = _2427 * _2422;
        float _2430 = _2427 * _2423;
        float _2431 = dot(vec3(_782, _783, _784), vec3(cbLight._m0[_2401].xyz));
        float _4456 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
        float _2434 = isnan(1.0) ? _4456 : (isnan(_4456) ? 1.0 : min(_4456, 1.0));
        float _2435 = dot(vec3(_782, _783, _784), vec3(_2428, _2429, _2430));
        float _4467 = isnan(0.0) ? _2435 : (isnan(_2435) ? 0.0 : max(_2435, 0.0));
        float _2438 = isnan(1.0) ? _4467 : (isnan(_4467) ? 1.0 : min(_4467, 1.0));
        float _2439 = dot(vec3(cbLight._m0[_2401].xyz), vec3(_2428, _2429, _2430));
        float _4478 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
        float _2443 = _2420 * _2420;
        float _2447 = ((_2438 * _2438) * (_2443 + (-1.0))) + 1.0;
        float _2454 = exp2(log2(1.0 - (isnan(1.0) ? _4478 : (isnan(_4478) ? 1.0 : min(_4478, 1.0)))) * 5.0);
        float _2461 = 1.0 - _2420;
        float _2471 = (0.5 / (((_2200 * ((_2434 * _2461) + _2420)) + 9.9999999392252902907785028219223e-09) + (((_2200 * _2461) + _2420) * _2434))) * _2434;
        float _4489 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
        float _2473 = (isnan(1.0) ? _4489 : (isnan(_4489) ? 1.0 : min(_4489, 1.0))) * (_2443 / ((_2447 * _2447) * 3.141590118408203125));
        float _2474 = isnan(1.0) ? _2049 : (isnan(_2049) ? 1.0 : min(_2049, 1.0));
        _2395 = (((((_2454 * _2222) + _945) * cbLight._m0[_2405].x) * _2473) * _2474) + _2331;
        _2397 = (((((_2454 * _2224) + _947) * cbLight._m0[_2405].y) * _2473) * _2474) + _2332;
        _2399 = (((((_2454 * _2225) + _948) * cbLight._m0[_2405].z) * _2473) * _2474) + _2333;
    }
    float _2509;
    float _2511;
    float _2513;
    if (_2126)
    {
        _2509 = _2395;
        _2511 = _2397;
        _2513 = _2399;
    }
    else
    {
        uint _2520 = _2034 + 3u;
        uint _2524 = _2034 + 11u;
        float _2538 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2520].w)) * _785) * 0.949999988079071044921875);
        float _2539 = _2538 * _2538;
        float _2540 = cbLight._m0[_2520].x + _862;
        float _2541 = cbLight._m0[_2520].y + _863;
        float _2542 = cbLight._m0[_2520].z + _864;
        float _2546 = inversesqrt(dot(vec3(_2540, _2541, _2542), vec3(_2540, _2541, _2542)));
        float _2547 = _2546 * _2540;
        float _2548 = _2546 * _2541;
        float _2549 = _2546 * _2542;
        float _2550 = dot(vec3(_782, _783, _784), vec3(cbLight._m0[_2520].xyz));
        float _4505 = isnan(0.0) ? _2550 : (isnan(_2550) ? 0.0 : max(_2550, 0.0));
        float _2553 = isnan(1.0) ? _4505 : (isnan(_4505) ? 1.0 : min(_4505, 1.0));
        float _2554 = dot(vec3(_782, _783, _784), vec3(_2547, _2548, _2549));
        float _4516 = isnan(0.0) ? _2554 : (isnan(_2554) ? 0.0 : max(_2554, 0.0));
        float _2557 = isnan(1.0) ? _4516 : (isnan(_4516) ? 1.0 : min(_4516, 1.0));
        float _2558 = dot(vec3(cbLight._m0[_2520].xyz), vec3(_2547, _2548, _2549));
        float _4527 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
        float _2562 = _2539 * _2539;
        float _2566 = ((_2557 * _2557) * (_2562 + (-1.0))) + 1.0;
        float _2573 = exp2(log2(1.0 - (isnan(1.0) ? _4527 : (isnan(_4527) ? 1.0 : min(_4527, 1.0)))) * 5.0);
        float _2580 = 1.0 - _2539;
        float _2590 = (0.5 / (((_2200 * ((_2553 * _2580) + _2539)) + 9.9999999392252902907785028219223e-09) + (((_2200 * _2580) + _2539) * _2553))) * _2553;
        float _4538 = isnan(0.0) ? _2590 : (isnan(_2590) ? 0.0 : max(_2590, 0.0));
        float _2592 = (isnan(1.0) ? _4538 : (isnan(_4538) ? 1.0 : min(_4538, 1.0))) * (_2562 / ((_2566 * _2566) * 3.141590118408203125));
        float _2593 = isnan(1.0) ? _2050 : (isnan(_2050) ? 1.0 : min(_2050, 1.0));
        _2509 = (((((_2573 * _2222) + _945) * cbLight._m0[_2524].x) * _2592) * _2593) + _2395;
        _2511 = (((((_2573 * _2224) + _947) * cbLight._m0[_2524].y) * _2592) * _2593) + _2397;
        _2513 = (((((_2573 * _2225) + _948) * cbLight._m0[_2524].z) * _2592) * _2593) + _2399;
    }
    float _2728;
    float _2730;
    float _2732;
    float _2734;
    float _2736;
    float _2738;
    if (_2032.y == 0u)
    {
        float _2668 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2669 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2668;
        float _2670 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2668;
        float _2671 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2668;
        uvec4 _2683 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2684 = _2683.x;
        uint _2695 = uint((float(_2683.y) * floor(float(uint(cbSceneParam._m0[85u].y * _883) / _2684))) + floor(float(uint(cbSceneParam._m0[85u].x * _882) / _2684)));
        float _2705 = (log2(_2671 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2706 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
        uint _2709 = uint(isnan(14.0) ? _2706 : (isnan(_2706) ? 14.0 : min(_2706, 14.0)));
        uvec4 _2714 = texelFetch(g_lightClusterGridBuffer, int(((_2709 << 2u) + (_2695 << 6u)) >> 2u));
        uint _2715 = _2714.x;
        uint _2716 = _2683.z;
        float _2816;
        float _2818;
        float _2820;
        float _2822;
        float _2824;
        float _2826;
        if (((((1u << ((_2716 >> 4u) & 15u)) + 4294967295u) & _2715) == 0u) || ((_2716 & 240u) == 0u))
        {
            _2816 = 0.0;
            _2818 = 0.0;
            _2820 = 0.0;
            _2822 = 0.0;
            _2824 = 0.0;
            _2826 = 0.0;
        }
        else
        {
            float _2817;
            float _2819;
            float _2821;
            float _2823;
            float _2825;
            float _2827;
            float _2969 = 0.0;
            float _2970 = 0.0;
            float _2971 = 0.0;
            float _2972 = 0.0;
            float _2973 = 0.0;
            float _2974 = 0.0;
            uint _2975 = 0u;
            uint _2984;
            bool _2985;
            for (;;)
            {
                _2984 = texelFetch(g_lightClassification, int((((_2709 << 5u) + (_2695 << 9u)) + (_2975 << 2u)) >> 2u)).x;
                _2985 = _2984 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2985)
                {
                    frontier_phi_66_pred = _2969;
                    frontier_phi_66_pred_1 = _2974;
                    frontier_phi_66_pred_2 = _2973;
                    frontier_phi_66_pred_3 = _2972;
                    frontier_phi_66_pred_4 = _2971;
                    frontier_phi_66_pred_5 = _2970;
                }
                else
                {
                    float _3114;
                    float _3115;
                    float _3116;
                    float _3117;
                    float _3118;
                    float _3119;
                    uint _3120;
                    _3114 = _2969;
                    _3115 = _2970;
                    _3116 = _2971;
                    _3117 = _2972;
                    _3118 = _2973;
                    _3119 = _2974;
                    _3120 = _2984;
                    float _3041;
                    float _3042;
                    float _3043;
                    float _3044;
                    float _3045;
                    float _3046;
                    for (;;)
                    {
                        uint _3124 = uint(findLSB(_3120)) + (_2975 << 5u);
                        uint _3121 = (_3120 + 4294967295u) & _3120;
                        uint _3126 = _3124 * 48u;
                        vec4 _3140 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3126)).x, texelFetch(g_PointLightRenderingBuffer, int(_3126 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3126 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3126 + 3u)).x));
                        uint _3146 = (_3124 * 48u) + 4u;
                        vec4 _3159 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3146)).x, texelFetch(g_PointLightRenderingBuffer, int(_3146 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3146 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3146 + 3u)).x));
                        uint _3165 = (_3124 * 48u) + 8u;
                        vec3 _3176 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3165)).x, texelFetch(g_PointLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3165 + 2u)).x));
                        float _3180 = _3140.x - _2669;
                        float _3181 = _3140.y - _2670;
                        float _3182 = _3140.z - _2671;
                        float _3183 = dot(vec3(_3180, _3181, _3182), vec3(_3180, _3181, _3182));
                        float _3186 = inversesqrt(_3183);
                        float _3187 = _3186 * _3180;
                        float _3188 = _3186 * _3181;
                        float _3189 = _3186 * _3182;
                        float _3190 = dot(vec3(_901, _904, _907), vec3(_3187, _3188, _3189));
                        float _3195 = 1.0 - (_3183 * _3140.w);
                        float _4564 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                        float _3196 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
                        float _3197 = sqrt(_3183) * _3159.w;
                        float _3200 = 1.39999997615814208984375 / (_3197 + 1.39999997615814208984375);
                        float _3201 = _3200 * _3200;
                        float _3204 = ((1.0 - _3201) * _3190) + _3201;
                        float _3207 = _3197 * _3197;
                        float _3211 = ((isnan(0.0) ? _3204 : (isnan(_3204) ? 0.0 : max(_3204, 0.0))) * _3196) / ((_3207 * 0.699999988079071044921875) + 1.0);
                        float _3215 = (-0.0) - _2669;
                        float _3216 = (-0.0) - _2670;
                        float _3217 = (-0.0) - _2671;
                        float _3221 = inversesqrt(dot(vec3(_3215, _3216, _3217), vec3(_3215, _3216, _3217)));
                        float _3222 = _3221 * _3215;
                        float _3223 = _3221 * _3216;
                        float _3224 = _3221 * _3217;
                        float _3232 = exp2(log2(1.0 / ((_3207 * 3.5) + 5.0)) * 0.25);
                        float _3233 = 1.0 - _976;
                        float _3240 = sqrt(1.0 - ((1.0 - (_3233 * _3233)) * (1.0 - (_3232 * _3232))));
                        float _3241 = _3240 * _3240;
                        float _3242 = _3241 * _3241;
                        float _3243 = _3222 + _3187;
                        float _3244 = _3223 + _3188;
                        float _3245 = _3224 + _3189;
                        float _3249 = inversesqrt(dot(vec3(_3243, _3244, _3245), vec3(_3243, _3244, _3245)));
                        float _3253 = dot(vec3(_901, _904, _907), vec3(_3222, _3223, _3224));
                        float _4580 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                        float _3256 = isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0));
                        float _3257 = dot(vec3(_901, _904, _907), vec3(_3249 * _3243, _3249 * _3244, _3249 * _3245));
                        float _4591 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0));
                        float _3260 = isnan(1.0) ? _4591 : (isnan(_4591) ? 1.0 : min(_4591, 1.0));
                        float _3264 = ((_3260 * _3260) * (_3242 + (-1.0))) + 1.0;
                        float _3265 = _3200 * _3241;
                        float _3266 = _3265 * _3265;
                        float _3269 = ((1.0 - _3266) * _3190) + _3266;
                        float _4602 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                        float _3270 = isnan(1.0) ? _4602 : (isnan(_4602) ? 1.0 : min(_4602, 1.0));
                        float _3271 = 1.0 - _3241;
                        float _3281 = (0.5 / (((_3270 * ((_3256 * _3271) + _3241)) + 9.9999999392252902907785028219223e-09) + (((_3270 * _3271) + _3241) * _3256))) * _3270;
                        float _4613 = isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0));
                        float _3292 = (((_3242 * 3.1415927410125732421875) * (isnan(1.0) ? _4613 : (isnan(_4613) ? 1.0 : min(_4613, 1.0)))) / ((_3264 * _3264) * ((_3207 * 2.1991131305694580078125) + 3.141590118408203125))) * _3196;
                        _3044 = (_3211 * _3159.x) + _3117;
                        _3045 = (_3211 * _3159.y) + _3118;
                        _3046 = (_3211 * _3159.z) + _3119;
                        _3041 = (_3292 * _3176.x) + _3114;
                        _3042 = (_3292 * _3176.y) + _3115;
                        _3043 = (_3292 * _3176.z) + _3116;
                        if (_3121 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3114 = _3041;
                            _3115 = _3042;
                            _3116 = _3043;
                            _3117 = _3044;
                            _3118 = _3045;
                            _3119 = _3046;
                            _3120 = _3121;
                        }
                    }
                    frontier_phi_66_pred = _3041;
                    frontier_phi_66_pred_1 = _3046;
                    frontier_phi_66_pred_2 = _3045;
                    frontier_phi_66_pred_3 = _3044;
                    frontier_phi_66_pred_4 = _3043;
                    frontier_phi_66_pred_5 = _3042;
                }
                _2817 = frontier_phi_66_pred;
                _2827 = frontier_phi_66_pred_1;
                _2825 = frontier_phi_66_pred_2;
                _2823 = frontier_phi_66_pred_3;
                _2821 = frontier_phi_66_pred_4;
                _2819 = frontier_phi_66_pred_5;
                uint _2976 = _2975 + 1u;
                if (_2976 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2969 = _2817;
                    _2970 = _2819;
                    _2971 = _2821;
                    _2972 = _2823;
                    _2973 = _2825;
                    _2974 = _2827;
                    _2975 = _2976;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2816 = _2817;
            _2818 = _2819;
            _2820 = _2821;
            _2822 = _2823;
            _2824 = _2825;
            _2826 = _2827;
        }
        uvec4 _2830 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2831 = _2830.z;
        uint _2833 = (_2831 >> 8u) & 15u;
        float _2937;
        float _2939;
        float _2941;
        float _2943;
        float _2945;
        float _2947;
        if (((4294967295u << _2833) & _2715) == 0u)
        {
            _2937 = _2816;
            _2939 = _2818;
            _2941 = _2820;
            _2943 = _2822;
            _2945 = _2824;
            _2947 = _2826;
        }
        else
        {
            float _2962 = inversesqrt(dot(vec3(_2669, _2670, _2671), vec3(_2669, _2670, _2671)));
            float _2963 = _2962 * _2669;
            float _2964 = _2962 * _2670;
            float _2965 = _2962 * _2671;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2833 < ((_2831 >> 12u) & 15u))
            {
                float _2938;
                float _2940;
                float _2942;
                float _2944;
                float _2946;
                float _2948;
                float _3097 = _2816;
                float _3098 = _2818;
                float _3099 = _2820;
                float _3100 = _2822;
                float _3101 = _2824;
                float _3102 = _2826;
                uint _3103 = _2833;
                uint _3112;
                bool _3113;
                for (;;)
                {
                    _3112 = texelFetch(g_lightClassification, int((((_2709 << 5u) + (_2695 << 9u)) + (_3103 << 2u)) >> 2u)).x;
                    _3113 = _3112 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3113)
                    {
                        frontier_phi_77_pred = _3102;
                        frontier_phi_77_pred_1 = _3101;
                        frontier_phi_77_pred_2 = _3100;
                        frontier_phi_77_pred_3 = _3099;
                        frontier_phi_77_pred_4 = _3098;
                        frontier_phi_77_pred_5 = _3097;
                    }
                    else
                    {
                        float _3306;
                        float _3307;
                        float _3308;
                        float _3309;
                        float _3310;
                        float _3311;
                        float _3600;
                        float _3601;
                        float _3602;
                        float _3603;
                        float _3604;
                        float _3605;
                        float _3319 = _3097;
                        float _3320 = _3098;
                        float _3321 = _3099;
                        float _3322 = _3100;
                        float _3323 = _3101;
                        float _3324 = _3102;
                        uint _3325 = _3112;
                        uint _3326;
                        vec4 _3351;
                        float _3352;
                        vec4 _3367;
                        vec3 _3379;
                        vec4 _3394;
                        vec4 _3409;
                        float _3456;
                        bool _3457;
                        for (;;)
                        {
                            uint _3336 = ((_3103 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3325));
                            _3326 = (_3325 + 4294967295u) & _3325;
                            uint _3338 = _3336 * 40u;
                            _3351 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3338)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3338 + 3u)).x));
                            _3352 = _3351.w;
                            uint _3354 = (_3336 * 40u) + 4u;
                            _3367 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3354)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3354 + 3u)).x));
                            uint _3369 = (_3336 * 40u) + 8u;
                            _3379 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3369)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3369 + 2u)).x));
                            uint _3381 = (_3336 * 40u) + 16u;
                            _3394 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3381)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3381 + 3u)).x));
                            uint _3396 = (_3336 * 40u) + 20u;
                            _3409 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3396)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3396 + 3u)).x));
                            uint _3412 = (_3336 * 40u) + 24u;
                            vec4 _3425 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3412)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3412 + 3u)).x));
                            uint _3431 = (_3336 * 40u) + 28u;
                            vec4 _3444 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3431)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3431 + 3u)).x));
                            _3456 = fma(_2671, _3444.z, fma(_2670, _3444.y, _3444.x * _2669)) + _3444.w;
                            _3457 = !((fma(_2671, _3425.z, fma(_2670, _3425.y, _3425.x * _2669)) + _3425.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3457)
                            {
                                float _3484 = _3351.x - _2669;
                                float _3485 = _3351.y - _2670;
                                float _3486 = _3351.z - _2671;
                                float _3487 = dot(vec3(_3484, _3485, _3486), vec3(_3484, _3485, _3486));
                                float _3490 = inversesqrt(_3487);
                                float _3491 = _3490 * _3484;
                                float _3492 = _3490 * _3485;
                                float _3493 = _3490 * _3486;
                                float _3497 = 1.0 - (_3487 / (_3352 * _3352));
                                float _4624 = isnan(0.0) ? _3497 : (isnan(_3497) ? 0.0 : max(_3497, 0.0));
                                float _3498 = isnan(1.0) ? _4624 : (isnan(_4624) ? 1.0 : min(_4624, 1.0));
                                float _3502 = sqrt(_3487) * _3367.w;
                                float _3504 = 1.39999997615814208984375 / (_3502 + 1.39999997615814208984375);
                                float _3505 = _3504 * _3504;
                                float _3508 = ((1.0 - _3505) * dot(vec3(_3491, _3492, _3493), vec3(_901, _904, _907))) + _3505;
                                float _3511 = _3502 * _3502;
                                float _3515 = (fma(_2671, _3394.z, fma(_2670, _3394.y, _3394.x * _2669)) + _3394.w) / _3456;
                                float _3516 = (fma(_2671, _3409.z, fma(_2670, _3409.y, _3409.x * _2669)) + _3409.w) / _3456;
                                float _3520 = 1.0 - dot(vec2(_3515, _3516), vec2(_3515, _3516));
                                float _4640 = isnan(0.0) ? _3520 : (isnan(_3520) ? 0.0 : max(_3520, 0.0));
                                float _3521 = isnan(1.0) ? _4640 : (isnan(_4640) ? 1.0 : min(_4640, 1.0));
                                float _3522 = _3521 * (((isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0))) * _3498) / ((_3511 * 0.699999988079071044921875) + 1.0));
                                float _3534 = exp2(log2(1.0 / ((_3511 * 3.5) + 5.0)) * 0.25);
                                float _3535 = 1.0 - _976;
                                float _3542 = sqrt(1.0 - ((1.0 - (_3535 * _3535)) * (1.0 - (_3534 * _3534))));
                                float _3543 = _3542 * _3542;
                                float _3544 = _3543 * _3543;
                                float _3545 = _3491 - _2963;
                                float _3546 = _3492 - _2964;
                                float _3547 = _3493 - _2965;
                                float _3551 = inversesqrt(dot(vec3(_3545, _3546, _3547), vec3(_3545, _3546, _3547)));
                                float _3555 = dot(vec3(_901, _904, _907), vec3((-0.0) - _2963, (-0.0) - _2964, (-0.0) - _2965));
                                float _4651 = isnan(0.0) ? _3555 : (isnan(_3555) ? 0.0 : max(_3555, 0.0));
                                float _3558 = isnan(1.0) ? _4651 : (isnan(_4651) ? 1.0 : min(_4651, 1.0));
                                float _3559 = dot(vec3(_901, _904, _907), vec3(_3551 * _3545, _3551 * _3546, _3551 * _3547));
                                float _4662 = isnan(0.0) ? _3559 : (isnan(_3559) ? 0.0 : max(_3559, 0.0));
                                float _3562 = isnan(1.0) ? _4662 : (isnan(_4662) ? 1.0 : min(_4662, 1.0));
                                float _3566 = ((_3562 * _3562) * (_3544 + (-1.0))) + 1.0;
                                float _3567 = _3504 * _3543;
                                float _3568 = _3567 * _3567;
                                float _3574 = ((1.0 - _3568) * dot(vec3(_901, _904, _907), vec3(_3491, _3492, _3493))) + _3568;
                                float _4673 = isnan(0.0) ? _3574 : (isnan(_3574) ? 0.0 : max(_3574, 0.0));
                                float _3575 = isnan(1.0) ? _4673 : (isnan(_4673) ? 1.0 : min(_4673, 1.0));
                                float _3576 = 1.0 - _3543;
                                float _3586 = (0.5 / (((_3575 * ((_3558 * _3576) + _3543)) + 9.9999999392252902907785028219223e-09) + (((_3575 * _3576) + _3543) * _3558))) * _3575;
                                float _4684 = isnan(0.0) ? _3586 : (isnan(_3586) ? 0.0 : max(_3586, 0.0));
                                float _3596 = (_3521 * _3498) * (((_3544 * 3.1415927410125732421875) * (isnan(1.0) ? _4684 : (isnan(_4684) ? 1.0 : min(_4684, 1.0)))) / ((_3566 * _3566) * ((_3511 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3522 * _3367.y;
                                frontier_phi_83_pred_1 = _3522 * _3367.x;
                                frontier_phi_83_pred_2 = _3596 * _3379.z;
                                frontier_phi_83_pred_3 = _3596 * _3379.y;
                                frontier_phi_83_pred_4 = _3596 * _3379.x;
                                frontier_phi_83_pred_5 = _3522 * _3367.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3604 = frontier_phi_83_pred;
                            _3603 = frontier_phi_83_pred_1;
                            _3602 = frontier_phi_83_pred_2;
                            _3601 = frontier_phi_83_pred_3;
                            _3600 = frontier_phi_83_pred_4;
                            _3605 = frontier_phi_83_pred_5;
                            _3309 = _3603 + _3322;
                            _3310 = _3604 + _3323;
                            _3311 = _3605 + _3324;
                            _3306 = _3600 + _3319;
                            _3307 = _3601 + _3320;
                            _3308 = _3602 + _3321;
                            if (_3326 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3319 = _3306;
                                _3320 = _3307;
                                _3321 = _3308;
                                _3322 = _3309;
                                _3323 = _3310;
                                _3324 = _3311;
                                _3325 = _3326;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3311;
                        frontier_phi_77_pred_1 = _3310;
                        frontier_phi_77_pred_2 = _3309;
                        frontier_phi_77_pred_3 = _3308;
                        frontier_phi_77_pred_4 = _3307;
                        frontier_phi_77_pred_5 = _3306;
                    }
                    _2948 = frontier_phi_77_pred;
                    _2946 = frontier_phi_77_pred_1;
                    _2944 = frontier_phi_77_pred_2;
                    _2942 = frontier_phi_77_pred_3;
                    _2940 = frontier_phi_77_pred_4;
                    _2938 = frontier_phi_77_pred_5;
                    uint _3104 = _3103 + 1u;
                    if (_3104 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3097 = _2938;
                        _3098 = _2940;
                        _3099 = _2942;
                        _3100 = _2944;
                        _3101 = _2946;
                        _3102 = _2948;
                        _3103 = _3104;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2942;
                frontier_phi_58_59_ladder_1 = _2948;
                frontier_phi_58_59_ladder_2 = _2946;
                frontier_phi_58_59_ladder_3 = _2944;
                frontier_phi_58_59_ladder_4 = _2940;
                frontier_phi_58_59_ladder_5 = _2938;
            }
            else
            {
                frontier_phi_58_59_ladder = _2820;
                frontier_phi_58_59_ladder_1 = _2826;
                frontier_phi_58_59_ladder_2 = _2824;
                frontier_phi_58_59_ladder_3 = _2822;
                frontier_phi_58_59_ladder_4 = _2818;
                frontier_phi_58_59_ladder_5 = _2816;
            }
            _2937 = frontier_phi_58_59_ladder_5;
            _2939 = frontier_phi_58_59_ladder_4;
            _2941 = frontier_phi_58_59_ladder;
            _2943 = frontier_phi_58_59_ladder_3;
            _2945 = frontier_phi_58_59_ladder_2;
            _2947 = frontier_phi_58_59_ladder_1;
        }
        float _2952 = isnan(1.0) ? _960 : (isnan(_960) ? 1.0 : min(_960, 1.0));
        _2728 = (_2952 * _2943) + _2164;
        _2730 = (_2952 * _2945) + _2166;
        _2732 = (_2952 * _2947) + _2168;
        _2734 = ((_2937 * _945) * _2952) + _2509;
        _2736 = ((_2939 * _947) * _2952) + _2511;
        _2738 = ((_2941 * _948) * _2952) + _2513;
    }
    else
    {
        _2728 = _2164;
        _2730 = _2166;
        _2732 = _2168;
        _2734 = _2509;
        _2736 = _2511;
        _2738 = _2513;
    }
    float _4700 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
    float _4711 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _4722 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _2755 = ((isnan(1.0) ? _4700 : (isnan(_4700) ? 1.0 : min(_4700, 1.0))) * (_2728 + ((isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0))) * _960))) + ((_2734 + ((isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0))) * _1801)) * cbPerFrame._m0[3u].x);
    float _2756 = ((isnan(1.0) ? _4711 : (isnan(_4711) ? 1.0 : min(_4711, 1.0))) * (_2730 + ((isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0))) * _960))) + ((_2736 + ((isnan(0.0) ? _2019 : (isnan(_2019) ? 0.0 : max(_2019, 0.0))) * _1801)) * cbPerFrame._m0[3u].x);
    float _2757 = ((isnan(1.0) ? _4722 : (isnan(_4722) ? 1.0 : min(_4722, 1.0))) * (_2732 + ((isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0))) * _960))) + ((_2738 + ((isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0))) * _1801)) * cbPerFrame._m0[3u].x);
    uint _2758 = _920 + 6u;
    float _2766 = _882 / cbSceneParam._m0[86u].x;
    float _2767 = _883 / cbSceneParam._m0[86u].y;
    vec4 _2781 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2766, _2767, (log2((isnan(cbSceneParam._m0[77u].w) ? _805 : (isnan(_805) ? cbSceneParam._m0[77u].w : min(_805, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2783 = _2781.x;
    float _2784 = _2781.y;
    float _2785 = _2781.z;
    float _2786 = _2781.w;
    float _2879;
    float _2881;
    float _2883;
    float _2885;
    if (_805 > cbSceneParam._m0[78u].w)
    {
        float _2841 = isnan(_805) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _805 : min(cbSceneParam._m0[80u].w, _805));
        float _2842 = _2841 / _805;
        float _2853 = _2842 * _855;
        float _2854 = _856 * _2842;
        float _2855 = (-0.0) - _2854;
        float _2857 = _2842 * _857;
        float _2859 = (cbSceneParam._m0[77u].w * _2855) / _2841;
        float _2860 = _2859 + cbSceneParam._m0[79u].w;
        float _2861 = cbSceneParam._m0[79u].w - _2854;
        float _2867 = sqrt(((_2853 * _2853) + (_2854 * _2854)) + (_2857 * _2857));
        float _2870 = (1.0 - (cbSceneParam._m0[77u].w / _2841)) * _2867;
        float _2875 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2877 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3054;
        if (abs((_2855 - _2859) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3054 = ((((_2860 > 0.0) ? exp2(_2875 * _2860) : (2.0 - exp2(_2877 * _2860))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2870;
        }
        else
        {
            float _2998 = 1.0 / cbSceneParam._m0[80u].x;
            float _2999 = isnan(_2861) ? _2860 : (isnan(_2860) ? _2861 : max(_2860, _2861));
            float _3000 = isnan(_2861) ? _2860 : (isnan(_2860) ? _2861 : min(_2860, _2861));
            float _3009 = isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : min(_2999, 0.0));
            float _3010 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : min(_3000, 0.0));
            _3054 = ((abs(_2867 / _2855) * cbSceneParam._m0[80u].y) * ((((_3009 - _3010) * 2.0) - ((exp2(_2875 * (isnan(0.0) ? _2999 : (isnan(_2999) ? 0.0 : max(_2999, 0.0)))) - exp2(_2875 * (isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0))))) * _2998)) - ((exp2(_2877 * _3009) - exp2(_2877 * _3010)) * _2998))) + (_2870 * cbSceneParam._m0[80u].z);
        }
        vec4 _3056 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2766, _2767, 1.0), 0.0);
        float _3065 = exp2((_3054 * (-1.44269502162933349609375)) * (1.0 - _3056.w));
        float _3066 = log2(_3065);
        float _3082 = log2(_2786);
        _2879 = (exp2(_3082 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3066 * cbSceneParam._m0[78u].x)) * _3056.x) / cbSceneParam._m0[78u].x)) + _2783;
        _2881 = (exp2(_3082 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3066 * cbSceneParam._m0[78u].y)) * _3056.y) / cbSceneParam._m0[78u].y)) + _2784;
        _2883 = (exp2(_3082 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3066 * cbSceneParam._m0[78u].z)) * _3056.z) / cbSceneParam._m0[78u].z)) + _2785;
        _2885 = _3065 * _2786;
    }
    else
    {
        _2879 = _2783;
        _2881 = _2784;
        _2883 = _2785;
        _2885 = _2786;
    }
    bool _3092;
    vec4 _2895;
    vec4 _2917;
    float _2919;
    float _2923;
    float _2924;
    float _2925;
    float _2926;
    bool _2936;
    for (;;)
    {
        _2895 = cbMatDynParam._m0[0u];
        float _2897 = roundEven(_2895.y);
        bool _2898 = _2897 == 3.0;
        float _2899 = log2(_2885);
        float _2906 = exp2(_2899 * cbSceneParam._m0[78u].x) * _2755;
        float _2907 = exp2(_2899 * cbSceneParam._m0[78u].y) * _2756;
        float _2908 = exp2(_2899 * cbSceneParam._m0[78u].z) * _2757;
        float _2915 = _871 + (-0.5);
        _2917 = cbMtdParam._m0[1u];
        _2919 = _2917.y * _2915;
        float _2922 = (_2897 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2923 = _2922 * (_2898 ? _2906 : (_2906 + (cbSceneParam._m0[72u].w * _2879)));
        _2924 = _2922 * (_2898 ? _2907 : (_2907 + (cbSceneParam._m0[72u].w * _2881)));
        _2925 = _2922 * (_2898 ? _2908 : (_2908 + (cbSceneParam._m0[72u].w * _2883)));
        _2926 = _2915 * 0.999000012874603271484375;
        _2936 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2936)
        {
            if ((cbInstanceData._m0[_920 + 7u].x + _2926) < 0.5)
            {
                _3092 = true;
                break;
            }
        }
        uint _3033 = _921 + uint(_2895.w);
        if ((cbInstanceData._m0[_3033].w < 1.0) && ((cbInstanceData._m0[_3033].w + _2926) < 0.5))
        {
            _3092 = true;
            break;
        }
        if ((_2919 + 1.0) < _2917.x)
        {
            _3092 = true;
            break;
        }
        _3092 = false;
        break;
    }
    float _3297;
    if (_3092)
    {
        discard_state = true;
        _3297 = 0.0;
    }
    else
    {
        _3297 = cbInstanceData._m0[_2758].w;
    }
    SV_Target.x = _2923;
    SV_Target.y = _2924;
    SV_Target.z = _2925;
    SV_Target.w = _3297;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2758].w;
    discard_exit();
}


