#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1234;
float _3901;
float _3902;
float _3903;
float _3904;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _205 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _206 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _207 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _213 = inversesqrt(dot(vec3(_205, _206, _207), vec3(_205, _206, _207)));
    float _220 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _227 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _250 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _256 = _250.x * cbMtdParam._m0[10u].x;
    float _257 = _250.y * cbMtdParam._m0[10u].y;
    float _258 = _250.z * cbMtdParam._m0[10u].z;
    vec4 _276 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _326 = cbMtdParam._m0[18u].y * texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x;
    float _337 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].x * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].y * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _326)) + 1.0;
    float _3913 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _338 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
    float _345 = (_338 * ((_276.x * cbMtdParam._m0[11u].x) - _256)) + _256;
    float _346 = (_338 * ((_276.y * cbMtdParam._m0[11u].y) - _257)) + _257;
    float _347 = (_338 * ((_276.z * cbMtdParam._m0[11u].z) - _258)) + _258;
    vec4 _365 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _392 = ((cbMtdParam._m0[17u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _326)) + 1.0;
    float _3924 = isnan(0.0) ? _392 : (isnan(_392) ? 0.0 : max(_392, 0.0));
    float _393 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _400 = (_393 * ((_365.x * cbMtdParam._m0[12u].x) - _345)) + _345;
    float _401 = (_393 * ((_365.y * cbMtdParam._m0[12u].y) - _346)) + _346;
    float _402 = (_393 * ((_365.z * cbMtdParam._m0[12u].z) - _347)) + _347;
    vec4 _419 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _444 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[18u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[18u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _326)) + 1.0;
    float _3935 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _445 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
    float _452 = (_445 * ((_419.x * cbMtdParam._m0[13u].x) - _400)) + _400;
    float _453 = (_445 * ((_419.y * cbMtdParam._m0[13u].y) - _401)) + _401;
    float _454 = (_445 * ((_419.z * cbMtdParam._m0[13u].z) - _402)) + _402;
    vec4 _467 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _469 = _467.x;
    float _487 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _469) * _338) + _469;
    float _505 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _487) * _393) + _487;
    float _522 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _505) * _445) + _505;
    vec4 _535 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _537 = _535.x;
    float _538 = _535.y;
    float _541 = cbMtdParam._m0[17u].y * _535.z;
    vec4 _553 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _562 = (((cbMtdParam._m0[17u].x * _553.z) - _541) * _338) + _541;
    vec4 _575 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _587 = (((cbMtdParam._m0[16u].w * _575.z) - _562) * _393) + _562;
    vec4 _600 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _609 = (((cbMtdParam._m0[16u].z * _600.z) - _587) * _445) + _587;
    float _614 = ((_553.x - _537) * _338) + _537;
    float _615 = ((_553.y - _538) * _338) + _538;
    float _620 = ((_575.x - _614) * _393) + _614;
    float _621 = ((_575.y - _615) * _393) + _615;
    float _630 = ((((_600.x - _620) * _445) + _620) * 2.0) + (-1.0);
    float _632 = ((((_600.y - _621) * _445) + _621) * 2.0) + (-1.0);
    float _633 = dot(vec2(_630, _632), vec2(_630, _632));
    float _3946 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _638 = sqrt(1.0 - (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0))));
    float _641 = fma(_638, _220 * NORMAL.x, fma(_632, _227 * TANGENT.x, (_213 * _205) * _630));
    float _644 = fma(_638, _220 * NORMAL.y, fma(_632, _227 * TANGENT.y, (_213 * _206) * _630));
    float _647 = fma(_638, _220 * NORMAL.z, fma(_632, _227 * TANGENT.z, (_213 * _207) * _630));
    float _651 = inversesqrt(dot(vec3(_641, _644, _647), vec3(_641, _644, _647)));
    float _652 = _651 * _641;
    float _653 = _651 * _644;
    float _654 = _651 * _647;
    float _3957 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _655 = isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0));
    float _3968 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _3979 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    float _3990 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _4001 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _659 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
    float _675 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _715 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _725 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _715);
    float _726 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _715);
    float _727 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _715);
    float _731 = inversesqrt(dot(vec3(_725, _726, _727), vec3(_725, _726, _727)));
    float _732 = _725 * _731;
    float _733 = _726 * _731;
    float _734 = _727 * _731;
    vec4 _739 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _741 = _739.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _913 = sqrt(((_725 * _725) + (_726 * _726)) + (_727 * _727));
        float _919 = (cbMatDynParam._m0[5u].x * _913) + cbMatDynParam._m0[5u].y;
        float _4012 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _920 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _924 = (cbMatDynParam._m0[5u].z * _913) + cbMatDynParam._m0[5u].w;
        float _4023 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) - _920)) + _920) < ((_741 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _752 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _753 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _771 = fma(_654, cbSceneParam._m0[5u].z, fma(_653, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _652));
    float _774 = fma(_654, cbSceneParam._m0[6u].z, fma(_653, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _652));
    float _777 = fma(_654, cbSceneParam._m0[7u].z, fma(_653, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _652));
    uint _790 = uint(roundEven(NORMAL.w)) * 13u;
    uint _791 = _790 + 9u;
    uint _792 = _791 + uint(cbMatDynParam._m0[0u].w);
    float _798 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0)))) * cbInstanceData._m0[_792].x;
    float _799 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0)))) * cbInstanceData._m0[_792].y;
    float _800 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0)))) * cbInstanceData._m0[_792].z;
    float _4034 = isnan(0.0) ? _798 : (isnan(_798) ? 0.0 : max(_798, 0.0));
    float _801 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
    float _4045 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
    float _802 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
    float _4056 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    float _803 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    float _804 = 1.0 - _659;
    float _805 = _801 * _804;
    float _806 = _802 * _804;
    float _807 = _803 * _804;
    float _812 = (_801 + (-0.039999999105930328369140625)) * _659;
    float _813 = (_802 + (-0.039999999105930328369140625)) * _659;
    float _814 = (_803 + (-0.039999999105930328369140625)) * _659;
    float _815 = _812 + 0.039999999105930328369140625;
    float _817 = _813 + 0.039999999105930328369140625;
    float _818 = _814 + 0.039999999105930328369140625;
    vec4 _827 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _752, cbSceneParam._m0[86u].y * _753));
    float _830 = _827.x * TEXCOORD_5.w;
    float _831 = dot(vec3(_652, _653, _654), vec3(_732, _733, _734));
    float _834 = _831 * 2.0;
    float _838 = (_834 * _652) - _732;
    float _839 = (_834 * _653) - _733;
    float _840 = (_834 * _654) - _734;
    float _844 = abs(dot(vec3(_732, _733, _734), vec3(_652, _653, _654)));
    float _4067 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
    float _846 = sqrt(_655);
    float _859 = exp2((_846 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_846 * 3.0));
    float _865 = (1.0 - _859) * ((_846 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _866 = _859 * _846;
    float _894 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _898 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _902 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1233;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _958 = fma(_902, cbModelParam._m0[26u].z, fma(_898, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _894));
        float _962 = fma(_902, cbModelParam._m0[27u].z, fma(_898, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _894));
        float _966 = fma(_902, cbModelParam._m0[28u].z, fma(_898, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _894));
        float _991 = _894 + _652;
        float _992 = _898 + _653;
        float _993 = _902 + _654;
        float _1003 = fma(_993, cbModelParam._m0[26u].z, fma(_992, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _991)) - _958;
        float _1004 = fma(_993, cbModelParam._m0[27u].z, fma(_992, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _991)) - _962;
        float _1005 = fma(_993, cbModelParam._m0[28u].z, fma(_992, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _991)) - _966;
        float _1009 = inversesqrt(dot(vec3(_1003, _1004, _1005), vec3(_1003, _1004, _1005)));
        float _1022 = ((_1009 * _1003) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_958 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1023 = ((_1009 * _1004) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_962 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1024 = ((_1009 * _1005) / cbModelParam._m0[34u].z) + ((((((_966 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1027 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1022, _1023, _1024), 0.0);
        vec4 _1034 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1022, _1023, _1024), 0.0);
        vec4 _1041 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1022, _1023, _1024), 0.0);
        vec4 _1048 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1022, _1023, _1024), 0.0);
        float _1061 = exp2((_1027.w + (-0.5)) * 20.0) * 2.0;
        float _1062 = _1061 * (_1027.x + (-0.5));
        float _1063 = _1061 * (_1027.y + (-0.5));
        float _1064 = _1061 * (_1027.z + (-0.5));
        float _1071 = exp2((_1034.w + (-0.5)) * 20.0) * 2.0;
        float _1072 = _1071 * (_1034.x + (-0.5));
        float _1073 = _1071 * (_1034.y + (-0.5));
        float _1074 = _1071 * (_1034.z + (-0.5));
        float _1081 = exp2((_1041.w + (-0.5)) * 20.0) * 2.0;
        float _1082 = _1081 * (_1041.x + (-0.5));
        float _1083 = _1081 * (_1041.y + (-0.5));
        float _1084 = _1081 * (_1041.z + (-0.5));
        float _1091 = exp2((_1048.w + (-0.5)) * 20.0) * 2.0;
        float _1092 = _1091 * (_1048.x + (-0.5));
        float _1093 = _1091 * (_1048.y + (-0.5));
        float _1094 = _1091 * (_1048.z + (-0.5));
        float _1095 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1096 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1097 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1098 = _1062 * 0.5;
        float _1099 = _1072 * 0.5;
        float _1100 = _1082 * 0.5;
        float _1101 = dot(vec3(_1098, _1099, _1100), vec3(_1098, _1099, _1100));
        float _1106 = (_1101 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1101);
        float _1115 = (dot(vec3(_652, _653, _654), vec3(_1106 * _1098, _1106 * _1099, _1106 * _1100)) + 1.0) * 0.5;
        float _4093 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1125 = sqrt(((_1099 * _1099) + (_1098 * _1098)) + (_1100 * _1100)) / (_1095 + 9.9999997473787516355514526367188e-06);
        float _4104 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _1127 = _1126 * 2.0;
        float _1131 = (1.0 - _1126) / (_1126 + 1.0);
        float _4115 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _1141 = ((((1.0 - _1132) * (_1127 + 2.0)) * exp2(log2(isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * (_1127 + 1.0))) + _1132) * _1095;
        float _1142 = _1063 * 0.5;
        float _1143 = _1073 * 0.5;
        float _1144 = _1083 * 0.5;
        float _1145 = dot(vec3(_1142, _1143, _1144), vec3(_1142, _1143, _1144));
        float _1150 = (_1145 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1145);
        float _1158 = (dot(vec3(_652, _653, _654), vec3(_1150 * _1142, _1150 * _1143, _1150 * _1144)) + 1.0) * 0.5;
        float _4126 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1167 = sqrt(((_1143 * _1143) + (_1142 * _1142)) + (_1144 * _1144)) / (_1096 + 9.9999997473787516355514526367188e-06);
        float _4137 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1169 = _1168 * 2.0;
        float _1173 = (1.0 - _1168) / (_1168 + 1.0);
        float _4148 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _1183 = ((((1.0 - _1174) * (_1169 + 2.0)) * exp2(log2(isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * (_1169 + 1.0))) + _1174) * _1096;
        float _1184 = _1064 * 0.5;
        float _1185 = _1074 * 0.5;
        float _1186 = _1084 * 0.5;
        float _1187 = dot(vec3(_1184, _1185, _1186), vec3(_1184, _1185, _1186));
        float _1192 = (_1187 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1187);
        float _1200 = (dot(vec3(_652, _653, _654), vec3(_1192 * _1184, _1192 * _1185, _1192 * _1186)) + 1.0) * 0.5;
        float _4159 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1209 = sqrt(((_1185 * _1185) + (_1184 * _1184)) + (_1186 * _1186)) / (_1097 + 9.9999997473787516355514526367188e-06);
        float _4170 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1211 = _1210 * 2.0;
        float _1215 = (1.0 - _1210) / (_1210 + 1.0);
        float _4181 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1225 = ((((1.0 - _1216) * (_1211 + 2.0)) * exp2(log2(isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (_1211 + 1.0))) + _1216) * _1097;
        _1233 = _1064;
        _1235 = _1063;
        _1236 = _1062;
        _1237 = _1074;
        _1238 = _1073;
        _1239 = _1072;
        _1240 = _1084;
        _1241 = _1083;
        _1242 = _1082;
        _1243 = _1097;
        _1244 = _1096;
        _1245 = _1095;
        _1246 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0)));
        _1247 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)));
        _1248 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0)));
    }
    else
    {
        _1233 = _1234;
        _1235 = _1234;
        _1236 = _1234;
        _1237 = _1234;
        _1238 = _1234;
        _1239 = _1234;
        _1240 = _1234;
        _1241 = _1234;
        _1242 = _1234;
        _1243 = _1234;
        _1244 = _1234;
        _1245 = _1234;
        _1246 = 0.0;
        _1247 = 0.0;
        _1248 = 0.0;
    }
    float _1546;
    float _1547;
    float _1548;
    float _1549;
    float _1550;
    float _1551;
    float _1552;
    float _1553;
    float _1554;
    float _1555;
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1277 = fma(_902, cbModelParam._m0[30u].z, fma(_898, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _894));
        float _1281 = fma(_902, cbModelParam._m0[31u].z, fma(_898, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _894));
        float _1285 = fma(_902, cbModelParam._m0[32u].z, fma(_898, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _894));
        float _1308 = _894 + _652;
        float _1309 = _898 + _653;
        float _1310 = _902 + _654;
        float _1320 = fma(_1310, cbModelParam._m0[30u].z, fma(_1309, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1308)) - _1277;
        float _1321 = fma(_1310, cbModelParam._m0[31u].z, fma(_1309, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1308)) - _1281;
        float _1322 = fma(_1310, cbModelParam._m0[32u].z, fma(_1309, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1308)) - _1285;
        float _1326 = inversesqrt(dot(vec3(_1320, _1321, _1322), vec3(_1320, _1321, _1322)));
        float _1339 = ((_1326 * _1320) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1277 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1340 = ((_1326 * _1321) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1281 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1341 = ((_1326 * _1322) / cbModelParam._m0[35u].z) + ((((((_1285 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1343 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1339, _1340, _1341), 0.0);
        vec4 _1350 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1339, _1340, _1341), 0.0);
        vec4 _1357 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1339, _1340, _1341), 0.0);
        vec4 _1364 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1339, _1340, _1341), 0.0);
        float _1376 = exp2((_1343.w + (-0.5)) * 20.0) * 2.0;
        float _1377 = _1376 * (_1343.x + (-0.5));
        float _1378 = _1376 * (_1343.y + (-0.5));
        float _1379 = _1376 * (_1343.z + (-0.5));
        float _1386 = exp2((_1350.w + (-0.5)) * 20.0) * 2.0;
        float _1387 = _1386 * (_1350.x + (-0.5));
        float _1388 = _1386 * (_1350.y + (-0.5));
        float _1389 = _1386 * (_1350.z + (-0.5));
        float _1396 = exp2((_1357.w + (-0.5)) * 20.0) * 2.0;
        float _1397 = _1396 * (_1357.x + (-0.5));
        float _1398 = _1396 * (_1357.y + (-0.5));
        float _1399 = _1396 * (_1357.z + (-0.5));
        float _1406 = exp2((_1364.w + (-0.5)) * 20.0) * 2.0;
        float _1407 = _1406 * (_1364.x + (-0.5));
        float _1408 = _1406 * (_1364.y + (-0.5));
        float _1409 = _1406 * (_1364.z + (-0.5));
        float _1410 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
        float _1411 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1412 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1413 = _1377 * 0.5;
        float _1414 = _1387 * 0.5;
        float _1415 = _1397 * 0.5;
        float _1416 = dot(vec3(_1413, _1414, _1415), vec3(_1413, _1414, _1415));
        float _1421 = (_1416 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1416);
        float _1429 = (dot(vec3(_652, _653, _654), vec3(_1421 * _1413, _1421 * _1414, _1421 * _1415)) + 1.0) * 0.5;
        float _4222 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1438 = sqrt(((_1414 * _1414) + (_1413 * _1413)) + (_1415 * _1415)) / (_1410 + 9.9999997473787516355514526367188e-06);
        float _4233 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0));
        float _1440 = _1439 * 2.0;
        float _1444 = (1.0 - _1439) / (_1439 + 1.0);
        float _4244 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
        float _1454 = ((((1.0 - _1445) * (_1440 + 2.0)) * exp2(log2(isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0))) * (_1440 + 1.0))) + _1445) * _1410;
        float _1455 = _1378 * 0.5;
        float _1456 = _1388 * 0.5;
        float _1457 = _1398 * 0.5;
        float _1458 = dot(vec3(_1455, _1456, _1457), vec3(_1455, _1456, _1457));
        float _1463 = (_1458 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1458);
        float _1471 = (dot(vec3(_652, _653, _654), vec3(_1463 * _1455, _1463 * _1456, _1463 * _1457)) + 1.0) * 0.5;
        float _4255 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1480 = sqrt(((_1456 * _1456) + (_1455 * _1455)) + (_1457 * _1457)) / (_1411 + 9.9999997473787516355514526367188e-06);
        float _4266 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1481 = isnan(1.0) ? _4266 : (isnan(_4266) ? 1.0 : min(_4266, 1.0));
        float _1482 = _1481 * 2.0;
        float _1486 = (1.0 - _1481) / (_1481 + 1.0);
        float _4277 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        float _1487 = isnan(1.0) ? _4277 : (isnan(_4277) ? 1.0 : min(_4277, 1.0));
        float _1496 = ((((1.0 - _1487) * (_1482 + 2.0)) * exp2(log2(isnan(1.0) ? _4255 : (isnan(_4255) ? 1.0 : min(_4255, 1.0))) * (_1482 + 1.0))) + _1487) * _1411;
        float _1497 = _1379 * 0.5;
        float _1498 = _1389 * 0.5;
        float _1499 = _1399 * 0.5;
        float _1500 = dot(vec3(_1497, _1498, _1499), vec3(_1497, _1498, _1499));
        float _1505 = (_1500 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1500);
        float _1513 = (dot(vec3(_652, _653, _654), vec3(_1505 * _1497, _1505 * _1498, _1505 * _1499)) + 1.0) * 0.5;
        float _4288 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1522 = sqrt(((_1498 * _1498) + (_1497 * _1497)) + (_1499 * _1499)) / (_1412 + 9.9999997473787516355514526367188e-06);
        float _4299 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1523 = isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0));
        float _1524 = _1523 * 2.0;
        float _1528 = (1.0 - _1523) / (_1523 + 1.0);
        float _4310 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1529 = isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0));
        float _1538 = ((((1.0 - _1529) * (_1524 + 2.0)) * exp2(log2(isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_1524 + 1.0))) + _1529) * _1412;
        _1546 = _1379;
        _1547 = _1378;
        _1548 = _1377;
        _1549 = _1389;
        _1550 = _1388;
        _1551 = _1387;
        _1552 = _1399;
        _1553 = _1398;
        _1554 = _1397;
        _1555 = _1412;
        _1556 = _1411;
        _1557 = _1410;
        _1558 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0)));
        _1559 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0)));
        _1560 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0)));
    }
    else
    {
        _1546 = _1234;
        _1547 = _1234;
        _1548 = _1234;
        _1549 = _1234;
        _1550 = _1234;
        _1551 = _1234;
        _1552 = _1234;
        _1553 = _1234;
        _1554 = _1234;
        _1555 = _1234;
        _1556 = _1234;
        _1557 = _1234;
        _1558 = 0.0;
        _1559 = 0.0;
        _1560 = 0.0;
    }
    float _1570 = (cbModelParam._m0[1u].x * (_1558 - _1246)) + _1246;
    float _1571 = (cbModelParam._m0[1u].x * (_1559 - _1247)) + _1247;
    float _1572 = (cbModelParam._m0[1u].x * (_1560 - _1248)) + _1248;
    float _1593 = fma(_1572, cbSceneParam._m0[89u].z, fma(_1571, cbSceneParam._m0[89u].y, _1570 * cbSceneParam._m0[89u].x));
    float _1596 = fma(_1572, cbSceneParam._m0[90u].z, fma(_1571, cbSceneParam._m0[90u].y, _1570 * cbSceneParam._m0[90u].x));
    float _1599 = fma(_1572, cbSceneParam._m0[91u].z, fma(_1571, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1570));
    float _1614 = _838 * 0.5;
    float _1615 = _839 * 0.5;
    float _1616 = _840 * 0.5;
    float _1617 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1548, _1551, _1554, _1557));
    float _1620 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1547, _1550, _1553, _1556));
    float _1623 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1546, _1549, _1552, _1555));
    float _1657;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1630 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1233, _1237, _1240, _1243));
        float _1634 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1235, _1238, _1241, _1244));
        float _1638 = dot(vec4(_1614, _1615, _1616, 1.0), vec4(_1236, _1239, _1242, _1245));
        float _1645 = dot(vec4(cbModelParam._m0[39u]), vec4(_1614, _1615, _1616, 1.0));
        _1657 = dot(vec3(isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0)), isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0)), isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1645) ? 0.0 : (isnan(0.0) ? _1645 : max(0.0, _1645))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1657 = 1.0;
    }
    float _1668;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1659 = dot(vec4(cbModelParam._m0[40u]), vec4(_1614, _1615, _1616, 1.0));
        _1668 = dot(vec3(isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)), isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0)), isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1659) ? 0.0 : (isnan(0.0) ? _1659 : max(0.0, _1659))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1668 = 1.0;
    }
    float _1672 = (_1668 * cbModelParam._m0[1u].x) + (_1657 * (1.0 - cbModelParam._m0[1u].x));
    float _1682 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _655);
    float _1683 = isnan(_1682) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1682 : min(cbModelParam._m0[25u].z, _1682));
    float _1763;
    float _1765;
    float _1767;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1730 = fma(_902, cbModelParam._m0[13u].z, fma(_898, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _894)) + cbModelParam._m0[13u].w;
        float _1734 = fma(_902, cbModelParam._m0[14u].z, fma(_898, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _894)) + cbModelParam._m0[14u].w;
        float _1738 = fma(_902, cbModelParam._m0[15u].z, fma(_898, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _894)) + cbModelParam._m0[15u].w;
        float _1741 = fma(_840, cbModelParam._m0[13u].z, fma(_839, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _838));
        float _1744 = fma(_840, cbModelParam._m0[14u].z, fma(_839, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _838));
        float _1747 = fma(_840, cbModelParam._m0[15u].z, fma(_839, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _838));
        float _1775;
        if (_1741 > 0.0)
        {
            _1775 = abs((1.0 - _1730) / _1741);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1741 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1730 + 1.0) / _1741);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1775 = frontier_phi_17_15_ladder;
        }
        float _1948;
        if (_1744 > 0.0)
        {
            _1948 = abs((1.0 - _1734) / _1744);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1744 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1734 + 1.0) / _1744);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _1948 = frontier_phi_26_22_ladder;
        }
        float _2244;
        if (_1747 > 0.0)
        {
            _2244 = abs((1.0 - _1738) / _1747);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1747 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1738 + 1.0) / _1747);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2244 = frontier_phi_38_33_ladder;
        }
        float _2246 = isnan(_1948) ? _1775 : (isnan(_1775) ? _1948 : min(_1775, _1948));
        float _2247 = isnan(_2244) ? _2246 : (isnan(_2246) ? _2244 : min(_2246, _2244));
        float _2251 = (_2247 * _1741) + _1730;
        float _2252 = (_2247 * _1744) + _1734;
        float _2253 = (_2247 * _1747) + _1738;
        float _2254 = _2247 * 9.9999997473787516355514526367188e-05;
        float _2256 = (-1.0) - _2254;
        float _2258 = _2254 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2253 > _2258) || ((_2253 < _2256) || ((_2252 > _2258) || ((_2252 < _2256) || ((_2251 < _2256) || (_2251 > _2258))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2398 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2253, cbModelParam._m0[9u].z, fma(_2252, cbModelParam._m0[9u].y, _2251 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2253, cbModelParam._m0[10u].z, fma(_2252, cbModelParam._m0[10u].y, _2251 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2253, cbModelParam._m0[11u].z, fma(_2252, cbModelParam._m0[11u].y, _2251 * cbModelParam._m0[11u].x))), _1683);
            frontier_phi_16_38_ladder = _2398.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2398.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2398.x * cbModelParam._m0[1u].y;
        }
        _1763 = frontier_phi_16_38_ladder_2;
        _1765 = frontier_phi_16_38_ladder_1;
        _1767 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1751 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_838, _839, _840), _1683);
        _1763 = _1751.x * cbModelParam._m0[1u].y;
        _1765 = _1751.y * cbModelParam._m0[1u].y;
        _1767 = _1751.z * cbModelParam._m0[1u].y;
    }
    float _1771 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _655);
    float _1772 = isnan(_1771) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1771 : min(cbModelParam._m0[25u].w, _1771));
    float _1863;
    float _1865;
    float _1867;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1827 = fma(_902, cbModelParam._m0[21u].z, fma(_898, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _894)) + cbModelParam._m0[21u].w;
        float _1831 = fma(_902, cbModelParam._m0[22u].z, fma(_898, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _894)) + cbModelParam._m0[22u].w;
        float _1835 = fma(_902, cbModelParam._m0[23u].z, fma(_898, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _894)) + cbModelParam._m0[23u].w;
        float _1838 = fma(_840, cbModelParam._m0[21u].z, fma(_839, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _838));
        float _1841 = fma(_840, cbModelParam._m0[22u].z, fma(_839, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _838));
        float _1844 = fma(_840, cbModelParam._m0[23u].z, fma(_839, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _838));
        float _1953;
        if (_1838 > 0.0)
        {
            _1953 = abs((1.0 - _1827) / _1838);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1838 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1827 + 1.0) / _1838);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1953 = frontier_phi_28_24_ladder;
        }
        float _2271;
        if (_1841 > 0.0)
        {
            _2271 = abs((1.0 - _1831) / _1841);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1841 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1831 + 1.0) / _1841);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2271 = frontier_phi_40_35_ladder;
        }
        float _2609;
        if (_1844 > 0.0)
        {
            _2609 = abs((1.0 - _1835) / _1844);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1844 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1835 + 1.0) / _1844);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2609 = frontier_phi_50_47_ladder;
        }
        float _2611 = isnan(_2271) ? _1953 : (isnan(_1953) ? _2271 : min(_1953, _2271));
        float _2612 = isnan(_2609) ? _2611 : (isnan(_2611) ? _2609 : min(_2611, _2609));
        float _2616 = (_2612 * _1838) + _1827;
        float _2617 = (_2612 * _1841) + _1831;
        float _2618 = (_2612 * _1844) + _1835;
        float _2619 = _2612 * 9.9999997473787516355514526367188e-05;
        float _2620 = (-1.0) - _2619;
        float _2622 = _2619 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2618 > _2622) || ((_2618 < _2620) || ((_2617 > _2622) || ((_2617 < _2620) || ((_2616 < _2620) || (_2616 > _2622))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2740 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2618, cbModelParam._m0[17u].z, fma(_2617, cbModelParam._m0[17u].y, _2616 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2618, cbModelParam._m0[18u].z, fma(_2617, cbModelParam._m0[18u].y, _2616 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2618, cbModelParam._m0[19u].z, fma(_2617, cbModelParam._m0[19u].y, _2616 * cbModelParam._m0[19u].x))), _1772);
            frontier_phi_25_50_ladder = _2740.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2740.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2740.x * cbModelParam._m0[1u].z;
        }
        _1863 = frontier_phi_25_50_ladder_2;
        _1865 = frontier_phi_25_50_ladder_1;
        _1867 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1847 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_838, _839, _840), _1772);
        _1863 = _1847.x * cbModelParam._m0[1u].z;
        _1865 = _1847.y * cbModelParam._m0[1u].z;
        _1867 = _1847.z * cbModelParam._m0[1u].z;
    }
    float _1880 = (((_865 * _815) + _866) * _830) * ((cbModelParam._m0[1u].w * (_1863 - _1763)) + _1763);
    float _1882 = (((_865 * _817) + _866) * _830) * ((cbModelParam._m0[1u].w * (_1865 - _1765)) + _1765);
    float _1884 = (((_865 * _818) + _866) * _830) * ((cbModelParam._m0[1u].w * (_1867 - _1767)) + _1767);
    float _1887 = fma(_1884, cbSceneParam._m0[89u].z, fma(_1882, cbSceneParam._m0[89u].y, _1880 * cbSceneParam._m0[89u].x));
    float _1890 = fma(_1884, cbSceneParam._m0[90u].z, fma(_1882, cbSceneParam._m0[90u].y, _1880 * cbSceneParam._m0[90u].x));
    float _1893 = fma(_1884, cbSceneParam._m0[91u].z, fma(_1882, cbSceneParam._m0[91u].y, _1880 * cbSceneParam._m0[91u].x));
    float _1927 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1931 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1935 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1939 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1940 = _1927 / _1939;
    float _1941 = _1931 / _1939;
    float _1942 = _1935 / _1939;
    float _2089;
    float _2090;
    float _2091;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1969 = ((uint(_1942 > cbSceneParam._m0[59u].y) + uint(_1942 > cbSceneParam._m0[59u].x)) + uint(_1942 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1970 = _1969 + 43u;
        uint _1978 = _1969 + 44u;
        uint _1986 = _1969 + 45u;
        uint _1994 = _1969 + 46u;
        float _2005 = fma(_1939, cbSceneParam._m0[_1970].w, fma(_1935, cbSceneParam._m0[_1970].z, fma(_1931, cbSceneParam._m0[_1970].y, _1927 * cbSceneParam._m0[_1970].x)));
        float _2009 = fma(_1939, cbSceneParam._m0[_1978].w, fma(_1935, cbSceneParam._m0[_1978].z, fma(_1931, cbSceneParam._m0[_1978].y, _1927 * cbSceneParam._m0[_1978].x)));
        float _2017 = fma(_1939, cbSceneParam._m0[_1994].w, fma(_1935, cbSceneParam._m0[_1994].z, fma(_1931, cbSceneParam._m0[_1994].y, _1927 * cbSceneParam._m0[_1994].x)));
        float _2022 = cbSceneParam._m0[33u].z * _2017;
        float _2024 = cbSceneParam._m0[33u].w * _2017;
        float _2027 = fma(_1939, cbSceneParam._m0[_1986].w, fma(_1935, cbSceneParam._m0[_1986].z, fma(_1931, cbSceneParam._m0[_1986].y, _1927 * cbSceneParam._m0[_1986].x))) / _2017;
        float _2075 = (cbSceneParam._m0[33u].x - sqrt(((_1941 * _1941) + (_1940 * _1940)) + (_1942 * _1942))) * cbSceneParam._m0[33u].y;
        float _4436 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
        float _2082 = (isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2022 + _2005) / _2017, (_2024 + _2009) / _2017), _2027), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2024 + _2005) / _2017, (_2009 - _2022) / _2017), _2027), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2005 - _2022) / _2017, (_2009 - _2024) / _2017), _2027), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2005 - _2024) / _2017, (_2022 + _2009) / _2017), _2027), 0.0)).x), vec4(0.25)));
        _2089 = 1.0 - (_2082 * cbSceneParam._m0[34u].x);
        _2090 = 1.0 - (_2082 * cbSceneParam._m0[34u].y);
        _2091 = 1.0 - (_2082 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2089 = 1.0;
        _2090 = 1.0;
        _2091 = 1.0;
    }
    float _2155;
    float _2157;
    float _2159;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2143 = fma(_1939, cbSceneParam._m0[63u].w, fma(_1935, cbSceneParam._m0[63u].z, fma(_1931, cbSceneParam._m0[63u].y, _1927 * cbSceneParam._m0[63u].x)));
        float _2144 = fma(_1939, cbSceneParam._m0[60u].w, fma(_1935, cbSceneParam._m0[60u].z, fma(_1931, cbSceneParam._m0[60u].y, _1927 * cbSceneParam._m0[60u].x))) / _2143;
        float _2145 = fma(_1939, cbSceneParam._m0[61u].w, fma(_1935, cbSceneParam._m0[61u].z, fma(_1931, cbSceneParam._m0[61u].y, _1927 * cbSceneParam._m0[61u].x))) / _2143;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2144 >= cbSceneParam._m0[64u].x) && (_2145 >= cbSceneParam._m0[64u].y)) && (_2144 <= cbSceneParam._m0[64u].z)) && (_2145 <= cbSceneParam._m0[64u].w))
        {
            float _2284 = fma(_1939, cbSceneParam._m0[62u].w, fma(_1935, cbSceneParam._m0[62u].z, fma(_1931, cbSceneParam._m0[62u].y, _1927 * cbSceneParam._m0[62u].x))) / _2143;
            float _2288 = isnan(cbSceneParam._m0[41u].w) ? _2284 : (isnan(_2284) ? cbSceneParam._m0[41u].w : max(_2284, cbSceneParam._m0[41u].w));
            float _2331 = (cbSceneParam._m0[33u].x - sqrt(((_1941 * _1941) + (_1940 * _1940)) + (_1942 * _1942))) * cbSceneParam._m0[33u].y;
            float _4452 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
            float _2338 = (isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2144, cbSceneParam._m0[33u].w + _2145), _2288), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2144, _2145 - cbSceneParam._m0[33u].z), _2288), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2144 - cbSceneParam._m0[33u].z, _2145 - cbSceneParam._m0[33u].w), _2288), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2144 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2145), _2288), 0.0)).x), vec4(0.25)));
            float _2342 = 1.0 - (_2338 * cbSceneParam._m0[34u].x);
            float _2343 = 1.0 - (_2338 * cbSceneParam._m0[34u].y);
            float _2344 = 1.0 - (_2338 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2344) ? _2091 : (isnan(_2091) ? _2344 : min(_2091, _2344));
            frontier_phi_37_36_ladder_1 = isnan(_2343) ? _2090 : (isnan(_2090) ? _2343 : min(_2090, _2343));
            frontier_phi_37_36_ladder_2 = isnan(_2342) ? _2089 : (isnan(_2089) ? _2342 : min(_2089, _2342));
        }
        else
        {
            frontier_phi_37_36_ladder = _2091;
            frontier_phi_37_36_ladder_1 = _2090;
            frontier_phi_37_36_ladder_2 = _2089;
        }
        _2155 = frontier_phi_37_36_ladder_2;
        _2157 = frontier_phi_37_36_ladder_1;
        _2159 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2155 = _2089;
        _2157 = _2090;
        _2159 = _2091;
    }
    uvec4 _2164 = floatBitsToUint(cbInstanceData._m0[_790 + 5u]);
    uint _2166 = _2164.x * 14u;
    uint _2167 = _2166 + 13u;
    float _2174 = _830 + (-1.0);
    float _2179 = (cbLight._m0[_2167].x * _2174) + 1.0;
    float _2180 = (cbLight._m0[_2167].y * _2174) + 1.0;
    float _2181 = (cbLight._m0[_2167].z * _2174) + 1.0;
    float _2182 = (cbLight._m0[_2167].w * _2174) + 1.0;
    uint _2183 = _2166 + 5u;
    float _2189 = isnan(1.0) ? _2180 : (isnan(_2180) ? 1.0 : min(_2180, 1.0));
    uint _2193 = _2166 + 4u;
    float _2203 = isnan(1.0) ? _2179 : (isnan(_2179) ? 1.0 : min(_2179, 1.0));
    uint _2207 = _2166 | 1u;
    float _2218 = dot(vec3(cbLight._m0[_2166].xyz), vec3(_652, _653, _654));
    float _2221 = dot(vec3(cbLight._m0[_2207].xyz), vec3(_652, _653, _654));
    float _4488 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
    float _4499 = isnan(0.0) ? _2221 : (isnan(_2221) ? 0.0 : max(_2221, 0.0));
    float _2226 = (isnan(1.0) ? _4488 : (isnan(_4488) ? 1.0 : min(_4488, 1.0))) * 0.3183098733425140380859375;
    float _2228 = (isnan(1.0) ? _4499 : (isnan(_4499) ? 1.0 : min(_4499, 1.0))) * 0.3183098733425140380859375;
    float _2235 = ((cbLight._m0[_2183].x * _2189) * _2228) + (((cbLight._m0[_2193].x * _2155) * _2203) * _2226);
    float _2236 = ((_2189 * cbLight._m0[_2183].y) * _2228) + (((cbLight._m0[_2193].y * _2157) * _2203) * _2226);
    float _2237 = ((_2189 * cbLight._m0[_2183].z) * _2228) + (((cbLight._m0[_2193].z * _2159) * _2203) * _2226);
    uvec4 _2241 = floatBitsToUint(cbLight._m0[_2166 + 12u]);
    bool _2243 = _2241.x == 0u;
    float _2345;
    float _2347;
    float _2349;
    if (_2243)
    {
        _2345 = _2235;
        _2347 = _2236;
        _2349 = _2237;
    }
    else
    {
        uint _2353 = _2166 + 6u;
        float _2369 = (dot(vec3(cbLight._m0[_2166 + 2u].xyz), vec3(_652, _653, _654)) * 0.5) + 0.5;
        float _2370 = _2369 * _2369;
        float _4510 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
        float _2371 = isnan(1.0) ? _4510 : (isnan(_4510) ? 1.0 : min(_4510, 1.0));
        float _2372 = isnan(1.0) ? _2181 : (isnan(_2181) ? 1.0 : min(_2181, 1.0));
        _2345 = (((cbLight._m0[_2353].x * 0.3183098733425140380859375) * _2371) * _2372) + _2235;
        _2347 = (((cbLight._m0[_2353].y * 0.3183098733425140380859375) * _2371) * _2372) + _2236;
        _2349 = (((cbLight._m0[_2353].z * 0.3183098733425140380859375) * _2371) * _2372) + _2237;
    }
    bool _2352 = _2241.y == 0u;
    float _2407;
    float _2409;
    float _2411;
    if (_2352)
    {
        _2407 = _2345;
        _2409 = _2347;
        _2411 = _2349;
    }
    else
    {
        uint _2580 = _2166 + 7u;
        float _2596 = (dot(vec3(cbLight._m0[_2166 + 3u].xyz), vec3(_652, _653, _654)) * 0.5) + 0.5;
        float _2597 = _2596 * _2596;
        float _4526 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
        float _2598 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
        float _2599 = isnan(1.0) ? _2182 : (isnan(_2182) ? 1.0 : min(_2182, 1.0));
        _2407 = (((cbLight._m0[_2580].x * 0.3183098733425140380859375) * _2598) * _2599) + _2345;
        _2409 = (((cbLight._m0[_2580].y * 0.3183098733425140380859375) * _2598) * _2599) + _2347;
        _2411 = (((cbLight._m0[_2580].z * 0.3183098733425140380859375) * _2598) * _2599) + _2349;
    }
    uint _2414 = _2166 + 8u;
    float _2427 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2166].w)) * _655) * 0.949999988079071044921875);
    float _2428 = _2427 * _2427;
    float _2429 = cbLight._m0[_2166].x + _732;
    float _2430 = cbLight._m0[_2166].y + _733;
    float _2431 = cbLight._m0[_2166].z + _734;
    float _2435 = inversesqrt(dot(vec3(_2429, _2430, _2431), vec3(_2429, _2430, _2431)));
    float _2436 = _2435 * _2429;
    float _2437 = _2435 * _2430;
    float _2438 = _2435 * _2431;
    float _2439 = dot(vec3(_652, _653, _654), vec3(cbLight._m0[_2166].xyz));
    float _4542 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0));
    float _2442 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
    float _4553 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
    float _2443 = isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0));
    float _2444 = dot(vec3(_652, _653, _654), vec3(_2436, _2437, _2438));
    float _4564 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0));
    float _2447 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
    float _2448 = dot(vec3(cbLight._m0[_2166].xyz), vec3(_2436, _2437, _2438));
    float _4575 = isnan(0.0) ? _2448 : (isnan(_2448) ? 0.0 : max(_2448, 0.0));
    float _2452 = _2428 * _2428;
    float _2456 = ((_2447 * _2447) * (_2452 + (-1.0))) + 1.0;
    float _2464 = exp2(log2(1.0 - (isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0)))) * 5.0);
    float _2465 = 0.959999978542327880859375 - _812;
    float _2467 = 0.959999978542327880859375 - _813;
    float _2468 = 0.959999978542327880859375 - _814;
    float _2475 = 1.0 - _2428;
    float _2486 = (0.5 / (((_2443 * ((_2442 * _2475) + _2428)) + 9.9999999392252902907785028219223e-09) + (((_2443 * _2475) + _2428) * _2442))) * _2442;
    float _4586 = isnan(0.0) ? _2486 : (isnan(_2486) ? 0.0 : max(_2486, 0.0));
    float _2488 = (isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0))) * (_2452 / ((_2456 * _2456) * 3.141590118408203125));
    uint _2502 = _2166 + 9u;
    float _2513 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2207].w)) * _655) * 0.949999988079071044921875);
    float _2514 = _2513 * _2513;
    float _2515 = cbLight._m0[_2207].x + _732;
    float _2516 = cbLight._m0[_2207].y + _733;
    float _2517 = cbLight._m0[_2207].z + _734;
    float _2521 = inversesqrt(dot(vec3(_2515, _2516, _2517), vec3(_2515, _2516, _2517)));
    float _2522 = _2521 * _2515;
    float _2523 = _2521 * _2516;
    float _2524 = _2521 * _2517;
    float _2525 = dot(vec3(_652, _653, _654), vec3(cbLight._m0[_2207].xyz));
    float _4597 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
    float _2528 = isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0));
    float _2529 = dot(vec3(_652, _653, _654), vec3(_2522, _2523, _2524));
    float _4608 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
    float _2532 = isnan(1.0) ? _4608 : (isnan(_4608) ? 1.0 : min(_4608, 1.0));
    float _2533 = dot(vec3(cbLight._m0[_2207].xyz), vec3(_2522, _2523, _2524));
    float _4619 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
    float _2537 = _2514 * _2514;
    float _2541 = ((_2532 * _2532) * (_2537 + (-1.0))) + 1.0;
    float _2548 = exp2(log2(1.0 - (isnan(1.0) ? _4619 : (isnan(_4619) ? 1.0 : min(_4619, 1.0)))) * 5.0);
    float _2555 = 1.0 - _2514;
    float _2565 = (0.5 / (((_2443 * ((_2528 * _2555) + _2514)) + 9.9999999392252902907785028219223e-09) + (((_2443 * _2555) + _2514) * _2528))) * _2528;
    float _4630 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
    float _2567 = (isnan(1.0) ? _4630 : (isnan(_4630) ? 1.0 : min(_4630, 1.0))) * (_2537 / ((_2541 * _2541) * 3.141590118408203125));
    float _2577 = (((((_2548 * _2465) + _815) * cbLight._m0[_2502].x) * _2567) * _2189) + ((((cbLight._m0[_2414].x * _2155) * ((_2464 * _2465) + _815)) * _2488) * _2203);
    float _2578 = (((((_2548 * _2467) + _817) * cbLight._m0[_2502].y) * _2567) * _2189) + ((((cbLight._m0[_2414].y * _2157) * ((_2464 * _2467) + _817)) * _2488) * _2203);
    float _2579 = (((((_2548 * _2468) + _818) * cbLight._m0[_2502].z) * _2567) * _2189) + ((((cbLight._m0[_2414].z * _2159) * ((_2464 * _2468) + _818)) * _2488) * _2203);
    float _2635;
    float _2637;
    float _2639;
    if (_2243)
    {
        _2635 = _2577;
        _2637 = _2578;
        _2639 = _2579;
    }
    else
    {
        uint _2641 = _2166 + 2u;
        uint _2645 = _2166 + 10u;
        float _2659 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2641].w)) * _655) * 0.949999988079071044921875);
        float _2660 = _2659 * _2659;
        float _2661 = cbLight._m0[_2641].x + _732;
        float _2662 = cbLight._m0[_2641].y + _733;
        float _2663 = cbLight._m0[_2641].z + _734;
        float _2667 = inversesqrt(dot(vec3(_2661, _2662, _2663), vec3(_2661, _2662, _2663)));
        float _2668 = _2667 * _2661;
        float _2669 = _2667 * _2662;
        float _2670 = _2667 * _2663;
        float _2671 = dot(vec3(_652, _653, _654), vec3(cbLight._m0[_2641].xyz));
        float _4641 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
        float _2674 = isnan(1.0) ? _4641 : (isnan(_4641) ? 1.0 : min(_4641, 1.0));
        float _2675 = dot(vec3(_652, _653, _654), vec3(_2668, _2669, _2670));
        float _4652 = isnan(0.0) ? _2675 : (isnan(_2675) ? 0.0 : max(_2675, 0.0));
        float _2678 = isnan(1.0) ? _4652 : (isnan(_4652) ? 1.0 : min(_4652, 1.0));
        float _2679 = dot(vec3(cbLight._m0[_2641].xyz), vec3(_2668, _2669, _2670));
        float _4663 = isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0));
        float _2683 = _2660 * _2660;
        float _2687 = ((_2678 * _2678) * (_2683 + (-1.0))) + 1.0;
        float _2694 = exp2(log2(1.0 - (isnan(1.0) ? _4663 : (isnan(_4663) ? 1.0 : min(_4663, 1.0)))) * 5.0);
        float _2701 = 1.0 - _2660;
        float _2711 = (0.5 / (((_2443 * ((_2674 * _2701) + _2660)) + 9.9999999392252902907785028219223e-09) + (((_2443 * _2701) + _2660) * _2674))) * _2674;
        float _4674 = isnan(0.0) ? _2711 : (isnan(_2711) ? 0.0 : max(_2711, 0.0));
        float _2713 = (isnan(1.0) ? _4674 : (isnan(_4674) ? 1.0 : min(_4674, 1.0))) * (_2683 / ((_2687 * _2687) * 3.141590118408203125));
        float _2714 = isnan(1.0) ? _2181 : (isnan(_2181) ? 1.0 : min(_2181, 1.0));
        _2635 = (((((_2694 * _2465) + _815) * cbLight._m0[_2645].x) * _2713) * _2714) + _2577;
        _2637 = (((((_2694 * _2467) + _817) * cbLight._m0[_2645].y) * _2713) * _2714) + _2578;
        _2639 = (((((_2694 * _2468) + _818) * cbLight._m0[_2645].z) * _2713) * _2714) + _2579;
    }
    float _2745;
    float _2747;
    float _2749;
    if (_2352)
    {
        _2745 = _2635;
        _2747 = _2637;
        _2749 = _2639;
    }
    else
    {
        uint _2756 = _2166 + 3u;
        uint _2760 = _2166 + 11u;
        float _2774 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2756].w)) * _655) * 0.949999988079071044921875);
        float _2775 = _2774 * _2774;
        float _2776 = cbLight._m0[_2756].x + _732;
        float _2777 = cbLight._m0[_2756].y + _733;
        float _2778 = cbLight._m0[_2756].z + _734;
        float _2782 = inversesqrt(dot(vec3(_2776, _2777, _2778), vec3(_2776, _2777, _2778)));
        float _2783 = _2782 * _2776;
        float _2784 = _2782 * _2777;
        float _2785 = _2782 * _2778;
        float _2786 = dot(vec3(_652, _653, _654), vec3(cbLight._m0[_2756].xyz));
        float _4690 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
        float _2789 = isnan(1.0) ? _4690 : (isnan(_4690) ? 1.0 : min(_4690, 1.0));
        float _2790 = dot(vec3(_652, _653, _654), vec3(_2783, _2784, _2785));
        float _4701 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
        float _2793 = isnan(1.0) ? _4701 : (isnan(_4701) ? 1.0 : min(_4701, 1.0));
        float _2794 = dot(vec3(cbLight._m0[_2756].xyz), vec3(_2783, _2784, _2785));
        float _4712 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
        float _2798 = _2775 * _2775;
        float _2802 = ((_2793 * _2793) * (_2798 + (-1.0))) + 1.0;
        float _2809 = exp2(log2(1.0 - (isnan(1.0) ? _4712 : (isnan(_4712) ? 1.0 : min(_4712, 1.0)))) * 5.0);
        float _2816 = 1.0 - _2775;
        float _2826 = (0.5 / (((_2443 * ((_2789 * _2816) + _2775)) + 9.9999999392252902907785028219223e-09) + (((_2443 * _2816) + _2775) * _2789))) * _2789;
        float _4723 = isnan(0.0) ? _2826 : (isnan(_2826) ? 0.0 : max(_2826, 0.0));
        float _2828 = (isnan(1.0) ? _4723 : (isnan(_4723) ? 1.0 : min(_4723, 1.0))) * (_2798 / ((_2802 * _2802) * 3.141590118408203125));
        float _2829 = isnan(1.0) ? _2182 : (isnan(_2182) ? 1.0 : min(_2182, 1.0));
        _2745 = (((((_2809 * _2465) + _815) * cbLight._m0[_2760].x) * _2828) * _2829) + _2635;
        _2747 = (((((_2809 * _2467) + _817) * cbLight._m0[_2760].y) * _2828) * _2829) + _2637;
        _2749 = (((((_2809 * _2468) + _818) * cbLight._m0[_2760].z) * _2828) * _2829) + _2639;
    }
    float _2895;
    float _2897;
    float _2899;
    float _2901;
    float _2903;
    float _2905;
    if (_2164.y == 0u)
    {
        uvec4 _2850 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2851 = _2850.x;
        uint _2862 = uint((float(_2850.y) * floor(float(uint(cbSceneParam._m0[85u].y * _753) / _2851))) + floor(float(uint(cbSceneParam._m0[85u].x * _752) / _2851)));
        float _2872 = (log2(_1942 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2873 = isnan(0.0) ? _2872 : (isnan(_2872) ? 0.0 : max(_2872, 0.0));
        uint _2876 = uint(isnan(14.0) ? _2873 : (isnan(_2873) ? 14.0 : min(_2873, 14.0)));
        uvec4 _2881 = texelFetch(g_lightClusterGridBuffer, int(((_2876 << 2u) + (_2862 << 6u)) >> 2u));
        uint _2882 = _2881.x;
        uint _2883 = _2850.z;
        float _2962;
        float _2964;
        float _2966;
        float _2968;
        float _2970;
        float _2972;
        if (((((1u << ((_2883 >> 4u) & 15u)) + 4294967295u) & _2882) == 0u) || ((_2883 & 240u) == 0u))
        {
            _2962 = 0.0;
            _2964 = 0.0;
            _2966 = 0.0;
            _2968 = 0.0;
            _2970 = 0.0;
            _2972 = 0.0;
        }
        else
        {
            float _2963;
            float _2965;
            float _2967;
            float _2969;
            float _2971;
            float _2973;
            float _3115 = 0.0;
            float _3116 = 0.0;
            float _3117 = 0.0;
            float _3118 = 0.0;
            float _3119 = 0.0;
            float _3120 = 0.0;
            uint _3121 = 0u;
            uint _3130;
            bool _3131;
            for (;;)
            {
                _3130 = texelFetch(g_lightClassification, int((((_2876 << 5u) + (_2862 << 9u)) + (_3121 << 2u)) >> 2u)).x;
                _3131 = _3130 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3131)
                {
                    frontier_phi_71_pred = _3120;
                    frontier_phi_71_pred_1 = _3119;
                    frontier_phi_71_pred_2 = _3118;
                    frontier_phi_71_pred_3 = _3117;
                    frontier_phi_71_pred_4 = _3116;
                    frontier_phi_71_pred_5 = _3115;
                }
                else
                {
                    float _3260;
                    float _3261;
                    float _3262;
                    float _3263;
                    float _3264;
                    float _3265;
                    uint _3266;
                    _3260 = _3115;
                    _3261 = _3116;
                    _3262 = _3117;
                    _3263 = _3118;
                    _3264 = _3119;
                    _3265 = _3120;
                    _3266 = _3130;
                    float _3187;
                    float _3188;
                    float _3189;
                    float _3190;
                    float _3191;
                    float _3192;
                    for (;;)
                    {
                        uint _3270 = uint(findLSB(_3266)) + (_3121 << 5u);
                        uint _3267 = (_3266 + 4294967295u) & _3266;
                        uint _3272 = _3270 * 48u;
                        vec4 _3286 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3272)).x, texelFetch(g_PointLightRenderingBuffer, int(_3272 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3272 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3272 + 3u)).x));
                        uint _3292 = (_3270 * 48u) + 4u;
                        vec4 _3305 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3292)).x, texelFetch(g_PointLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3292 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3292 + 3u)).x));
                        uint _3311 = (_3270 * 48u) + 8u;
                        vec3 _3322 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3311)).x, texelFetch(g_PointLightRenderingBuffer, int(_3311 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3311 + 2u)).x));
                        float _3326 = _3286.x - _1940;
                        float _3327 = _3286.y - _1941;
                        float _3328 = _3286.z - _1942;
                        float _3329 = dot(vec3(_3326, _3327, _3328), vec3(_3326, _3327, _3328));
                        float _3332 = inversesqrt(_3329);
                        float _3333 = _3332 * _3326;
                        float _3334 = _3332 * _3327;
                        float _3335 = _3332 * _3328;
                        float _3336 = dot(vec3(_771, _774, _777), vec3(_3333, _3334, _3335));
                        float _3341 = 1.0 - (_3329 * _3286.w);
                        float _4749 = isnan(0.0) ? _3341 : (isnan(_3341) ? 0.0 : max(_3341, 0.0));
                        float _3342 = isnan(1.0) ? _4749 : (isnan(_4749) ? 1.0 : min(_4749, 1.0));
                        float _3343 = sqrt(_3329) * _3305.w;
                        float _3346 = 1.39999997615814208984375 / (_3343 + 1.39999997615814208984375);
                        float _3347 = _3346 * _3346;
                        float _3350 = ((1.0 - _3347) * _3336) + _3347;
                        float _3353 = _3343 * _3343;
                        float _3357 = ((isnan(0.0) ? _3350 : (isnan(_3350) ? 0.0 : max(_3350, 0.0))) * _3342) / ((_3353 * 0.699999988079071044921875) + 1.0);
                        float _3361 = (-0.0) - _1940;
                        float _3362 = (-0.0) - _1941;
                        float _3363 = (-0.0) - _1942;
                        float _3367 = inversesqrt(dot(vec3(_3361, _3362, _3363), vec3(_3361, _3362, _3363)));
                        float _3368 = _3367 * _3361;
                        float _3369 = _3367 * _3362;
                        float _3370 = _3367 * _3363;
                        float _3377 = exp2(log2(1.0 / ((_3353 * 3.5) + 5.0)) * 0.25);
                        float _3378 = 1.0 - _846;
                        float _3385 = sqrt(1.0 - ((1.0 - (_3378 * _3378)) * (1.0 - (_3377 * _3377))));
                        float _3386 = _3385 * _3385;
                        float _3387 = _3386 * _3386;
                        float _3388 = _3368 + _3333;
                        float _3389 = _3369 + _3334;
                        float _3390 = _3370 + _3335;
                        float _3394 = inversesqrt(dot(vec3(_3388, _3389, _3390), vec3(_3388, _3389, _3390)));
                        float _3398 = dot(vec3(_771, _774, _777), vec3(_3368, _3369, _3370));
                        float _4765 = isnan(0.0) ? _3398 : (isnan(_3398) ? 0.0 : max(_3398, 0.0));
                        float _3401 = isnan(1.0) ? _4765 : (isnan(_4765) ? 1.0 : min(_4765, 1.0));
                        float _3402 = dot(vec3(_771, _774, _777), vec3(_3394 * _3388, _3394 * _3389, _3394 * _3390));
                        float _4776 = isnan(0.0) ? _3402 : (isnan(_3402) ? 0.0 : max(_3402, 0.0));
                        float _3405 = isnan(1.0) ? _4776 : (isnan(_4776) ? 1.0 : min(_4776, 1.0));
                        float _3409 = ((_3405 * _3405) * (_3387 + (-1.0))) + 1.0;
                        float _3410 = _3346 * _3386;
                        float _3411 = _3410 * _3410;
                        float _3414 = ((1.0 - _3411) * _3336) + _3411;
                        float _4787 = isnan(0.0) ? _3414 : (isnan(_3414) ? 0.0 : max(_3414, 0.0));
                        float _3415 = isnan(1.0) ? _4787 : (isnan(_4787) ? 1.0 : min(_4787, 1.0));
                        float _3416 = 1.0 - _3386;
                        float _3426 = (0.5 / (((_3415 * ((_3401 * _3416) + _3386)) + 9.9999999392252902907785028219223e-09) + (((_3415 * _3416) + _3386) * _3401))) * _3415;
                        float _4798 = isnan(0.0) ? _3426 : (isnan(_3426) ? 0.0 : max(_3426, 0.0));
                        float _3437 = (((_3387 * 3.1415927410125732421875) * (isnan(1.0) ? _4798 : (isnan(_4798) ? 1.0 : min(_4798, 1.0)))) / ((_3409 * _3409) * ((_3353 * 2.1991131305694580078125) + 3.141590118408203125))) * _3342;
                        _3190 = (_3357 * _3305.x) + _3263;
                        _3191 = (_3357 * _3305.y) + _3264;
                        _3192 = (_3357 * _3305.z) + _3265;
                        _3187 = (_3437 * _3322.x) + _3260;
                        _3188 = (_3437 * _3322.y) + _3261;
                        _3189 = (_3437 * _3322.z) + _3262;
                        if (_3267 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3260 = _3187;
                            _3261 = _3188;
                            _3262 = _3189;
                            _3263 = _3190;
                            _3264 = _3191;
                            _3265 = _3192;
                            _3266 = _3267;
                        }
                    }
                    frontier_phi_71_pred = _3192;
                    frontier_phi_71_pred_1 = _3191;
                    frontier_phi_71_pred_2 = _3190;
                    frontier_phi_71_pred_3 = _3189;
                    frontier_phi_71_pred_4 = _3188;
                    frontier_phi_71_pred_5 = _3187;
                }
                _2973 = frontier_phi_71_pred;
                _2971 = frontier_phi_71_pred_1;
                _2969 = frontier_phi_71_pred_2;
                _2967 = frontier_phi_71_pred_3;
                _2965 = frontier_phi_71_pred_4;
                _2963 = frontier_phi_71_pred_5;
                uint _3122 = _3121 + 1u;
                if (_3122 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3115 = _2963;
                    _3116 = _2965;
                    _3117 = _2967;
                    _3118 = _2969;
                    _3119 = _2971;
                    _3120 = _2973;
                    _3121 = _3122;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2962 = _2963;
            _2964 = _2965;
            _2966 = _2967;
            _2968 = _2969;
            _2970 = _2971;
            _2972 = _2973;
        }
        uvec4 _2976 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2977 = _2976.z;
        uint _2979 = (_2977 >> 8u) & 15u;
        float _3083;
        float _3085;
        float _3087;
        float _3089;
        float _3091;
        float _3093;
        if (((4294967295u << _2979) & _2882) == 0u)
        {
            _3083 = _2962;
            _3085 = _2964;
            _3087 = _2966;
            _3089 = _2968;
            _3091 = _2970;
            _3093 = _2972;
        }
        else
        {
            float _3108 = inversesqrt(dot(vec3(_1940, _1941, _1942), vec3(_1940, _1941, _1942)));
            float _3109 = _3108 * _1940;
            float _3110 = _3108 * _1941;
            float _3111 = _3108 * _1942;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2979 < ((_2977 >> 12u) & 15u))
            {
                float _3084;
                float _3086;
                float _3088;
                float _3090;
                float _3092;
                float _3094;
                float _3243 = _2962;
                float _3244 = _2964;
                float _3245 = _2966;
                float _3246 = _2968;
                float _3247 = _2970;
                float _3248 = _2972;
                uint _3249 = _2979;
                uint _3258;
                bool _3259;
                for (;;)
                {
                    _3258 = texelFetch(g_lightClassification, int((((_2876 << 5u) + (_2862 << 9u)) + (_3249 << 2u)) >> 2u)).x;
                    _3259 = _3258 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3259)
                    {
                        frontier_phi_82_pred = _3248;
                        frontier_phi_82_pred_1 = _3247;
                        frontier_phi_82_pred_2 = _3246;
                        frontier_phi_82_pred_3 = _3245;
                        frontier_phi_82_pred_4 = _3244;
                        frontier_phi_82_pred_5 = _3243;
                    }
                    else
                    {
                        float _3451;
                        float _3452;
                        float _3453;
                        float _3454;
                        float _3455;
                        float _3456;
                        float _3745;
                        float _3746;
                        float _3747;
                        float _3748;
                        float _3749;
                        float _3750;
                        float _3464 = _3243;
                        float _3465 = _3244;
                        float _3466 = _3245;
                        float _3467 = _3246;
                        float _3468 = _3247;
                        float _3469 = _3248;
                        uint _3470 = _3258;
                        uint _3471;
                        vec4 _3496;
                        float _3497;
                        vec4 _3512;
                        vec3 _3524;
                        vec4 _3539;
                        vec4 _3554;
                        float _3601;
                        bool _3602;
                        for (;;)
                        {
                            uint _3481 = ((_3249 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3470));
                            _3471 = (_3470 + 4294967295u) & _3470;
                            uint _3483 = _3481 * 40u;
                            _3496 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3483)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3483 + 3u)).x));
                            _3497 = _3496.w;
                            uint _3499 = (_3481 * 40u) + 4u;
                            _3512 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3499)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3499 + 3u)).x));
                            uint _3514 = (_3481 * 40u) + 8u;
                            _3524 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3514)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3514 + 2u)).x));
                            uint _3526 = (_3481 * 40u) + 16u;
                            _3539 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3526)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3526 + 3u)).x));
                            uint _3541 = (_3481 * 40u) + 20u;
                            _3554 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3541)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3541 + 3u)).x));
                            uint _3557 = (_3481 * 40u) + 24u;
                            vec4 _3570 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3557)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3557 + 3u)).x));
                            uint _3576 = (_3481 * 40u) + 28u;
                            vec4 _3589 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3576)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3576 + 3u)).x));
                            _3601 = fma(_1942, _3589.z, fma(_1941, _3589.y, _3589.x * _1940)) + _3589.w;
                            _3602 = !((fma(_1942, _3570.z, fma(_1941, _3570.y, _3570.x * _1940)) + _3570.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3602)
                            {
                                float _3629 = _3496.x - _1940;
                                float _3630 = _3496.y - _1941;
                                float _3631 = _3496.z - _1942;
                                float _3632 = dot(vec3(_3629, _3630, _3631), vec3(_3629, _3630, _3631));
                                float _3635 = inversesqrt(_3632);
                                float _3636 = _3635 * _3629;
                                float _3637 = _3635 * _3630;
                                float _3638 = _3635 * _3631;
                                float _3642 = 1.0 - (_3632 / (_3497 * _3497));
                                float _4809 = isnan(0.0) ? _3642 : (isnan(_3642) ? 0.0 : max(_3642, 0.0));
                                float _3643 = isnan(1.0) ? _4809 : (isnan(_4809) ? 1.0 : min(_4809, 1.0));
                                float _3647 = sqrt(_3632) * _3512.w;
                                float _3649 = 1.39999997615814208984375 / (_3647 + 1.39999997615814208984375);
                                float _3650 = _3649 * _3649;
                                float _3653 = ((1.0 - _3650) * dot(vec3(_3636, _3637, _3638), vec3(_771, _774, _777))) + _3650;
                                float _3656 = _3647 * _3647;
                                float _3660 = (fma(_1942, _3539.z, fma(_1941, _3539.y, _3539.x * _1940)) + _3539.w) / _3601;
                                float _3661 = (fma(_1942, _3554.z, fma(_1941, _3554.y, _3554.x * _1940)) + _3554.w) / _3601;
                                float _3665 = 1.0 - dot(vec2(_3660, _3661), vec2(_3660, _3661));
                                float _4825 = isnan(0.0) ? _3665 : (isnan(_3665) ? 0.0 : max(_3665, 0.0));
                                float _3666 = isnan(1.0) ? _4825 : (isnan(_4825) ? 1.0 : min(_4825, 1.0));
                                float _3667 = _3666 * (((isnan(0.0) ? _3653 : (isnan(_3653) ? 0.0 : max(_3653, 0.0))) * _3643) / ((_3656 * 0.699999988079071044921875) + 1.0));
                                float _3679 = exp2(log2(1.0 / ((_3656 * 3.5) + 5.0)) * 0.25);
                                float _3680 = 1.0 - _846;
                                float _3687 = sqrt(1.0 - ((1.0 - (_3680 * _3680)) * (1.0 - (_3679 * _3679))));
                                float _3688 = _3687 * _3687;
                                float _3689 = _3688 * _3688;
                                float _3690 = _3636 - _3109;
                                float _3691 = _3637 - _3110;
                                float _3692 = _3638 - _3111;
                                float _3696 = inversesqrt(dot(vec3(_3690, _3691, _3692), vec3(_3690, _3691, _3692)));
                                float _3700 = dot(vec3(_771, _774, _777), vec3((-0.0) - _3109, (-0.0) - _3110, (-0.0) - _3111));
                                float _4836 = isnan(0.0) ? _3700 : (isnan(_3700) ? 0.0 : max(_3700, 0.0));
                                float _3703 = isnan(1.0) ? _4836 : (isnan(_4836) ? 1.0 : min(_4836, 1.0));
                                float _3704 = dot(vec3(_771, _774, _777), vec3(_3696 * _3690, _3696 * _3691, _3696 * _3692));
                                float _4847 = isnan(0.0) ? _3704 : (isnan(_3704) ? 0.0 : max(_3704, 0.0));
                                float _3707 = isnan(1.0) ? _4847 : (isnan(_4847) ? 1.0 : min(_4847, 1.0));
                                float _3711 = ((_3707 * _3707) * (_3689 + (-1.0))) + 1.0;
                                float _3712 = _3649 * _3688;
                                float _3713 = _3712 * _3712;
                                float _3719 = ((1.0 - _3713) * dot(vec3(_771, _774, _777), vec3(_3636, _3637, _3638))) + _3713;
                                float _4858 = isnan(0.0) ? _3719 : (isnan(_3719) ? 0.0 : max(_3719, 0.0));
                                float _3720 = isnan(1.0) ? _4858 : (isnan(_4858) ? 1.0 : min(_4858, 1.0));
                                float _3721 = 1.0 - _3688;
                                float _3731 = (0.5 / (((_3720 * ((_3703 * _3721) + _3688)) + 9.9999999392252902907785028219223e-09) + (((_3720 * _3721) + _3688) * _3703))) * _3720;
                                float _4869 = isnan(0.0) ? _3731 : (isnan(_3731) ? 0.0 : max(_3731, 0.0));
                                float _3741 = (_3666 * _3643) * (((_3689 * 3.1415927410125732421875) * (isnan(1.0) ? _4869 : (isnan(_4869) ? 1.0 : min(_4869, 1.0)))) / ((_3711 * _3711) * ((_3656 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3667 * _3512.z;
                                frontier_phi_88_pred_1 = _3667 * _3512.y;
                                frontier_phi_88_pred_2 = _3667 * _3512.x;
                                frontier_phi_88_pred_3 = _3741 * _3524.z;
                                frontier_phi_88_pred_4 = _3741 * _3524.y;
                                frontier_phi_88_pred_5 = _3741 * _3524.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3750 = frontier_phi_88_pred;
                            _3749 = frontier_phi_88_pred_1;
                            _3748 = frontier_phi_88_pred_2;
                            _3747 = frontier_phi_88_pred_3;
                            _3746 = frontier_phi_88_pred_4;
                            _3745 = frontier_phi_88_pred_5;
                            _3454 = _3748 + _3467;
                            _3455 = _3749 + _3468;
                            _3456 = _3750 + _3469;
                            _3451 = _3745 + _3464;
                            _3452 = _3746 + _3465;
                            _3453 = _3747 + _3466;
                            if (_3471 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3464 = _3451;
                                _3465 = _3452;
                                _3466 = _3453;
                                _3467 = _3454;
                                _3468 = _3455;
                                _3469 = _3456;
                                _3470 = _3471;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3456;
                        frontier_phi_82_pred_1 = _3455;
                        frontier_phi_82_pred_2 = _3454;
                        frontier_phi_82_pred_3 = _3453;
                        frontier_phi_82_pred_4 = _3452;
                        frontier_phi_82_pred_5 = _3451;
                    }
                    _3094 = frontier_phi_82_pred;
                    _3092 = frontier_phi_82_pred_1;
                    _3090 = frontier_phi_82_pred_2;
                    _3088 = frontier_phi_82_pred_3;
                    _3086 = frontier_phi_82_pred_4;
                    _3084 = frontier_phi_82_pred_5;
                    uint _3250 = _3249 + 1u;
                    if (_3250 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3243 = _3084;
                        _3244 = _3086;
                        _3245 = _3088;
                        _3246 = _3090;
                        _3247 = _3092;
                        _3248 = _3094;
                        _3249 = _3250;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3090;
                frontier_phi_63_64_ladder_1 = _3094;
                frontier_phi_63_64_ladder_2 = _3092;
                frontier_phi_63_64_ladder_3 = _3088;
                frontier_phi_63_64_ladder_4 = _3086;
                frontier_phi_63_64_ladder_5 = _3084;
            }
            else
            {
                frontier_phi_63_64_ladder = _2968;
                frontier_phi_63_64_ladder_1 = _2972;
                frontier_phi_63_64_ladder_2 = _2970;
                frontier_phi_63_64_ladder_3 = _2966;
                frontier_phi_63_64_ladder_4 = _2964;
                frontier_phi_63_64_ladder_5 = _2962;
            }
            _3083 = frontier_phi_63_64_ladder_5;
            _3085 = frontier_phi_63_64_ladder_4;
            _3087 = frontier_phi_63_64_ladder_3;
            _3089 = frontier_phi_63_64_ladder;
            _3091 = frontier_phi_63_64_ladder_2;
            _3093 = frontier_phi_63_64_ladder_1;
        }
        float _3098 = isnan(1.0) ? _830 : (isnan(_830) ? 1.0 : min(_830, 1.0));
        _2895 = (_3098 * _3089) + _2407;
        _2897 = (_3098 * _3091) + _2409;
        _2899 = (_3098 * _3093) + _2411;
        _2901 = ((_3083 * _815) * _3098) + _2745;
        _2903 = ((_3085 * _817) * _3098) + _2747;
        _2905 = ((_3087 * _818) * _3098) + _2749;
    }
    else
    {
        _2895 = _2407;
        _2897 = _2409;
        _2899 = _2411;
        _2901 = _2745;
        _2903 = _2747;
        _2905 = _2749;
    }
    float _4885 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
    float _4896 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
    float _4907 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
    float _2922 = ((isnan(1.0) ? _4885 : (isnan(_4885) ? 1.0 : min(_4885, 1.0))) * (_2895 + ((isnan(0.0) ? _1593 : (isnan(_1593) ? 0.0 : max(_1593, 0.0))) * _830))) + ((_2901 + ((isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0))) * _1672)) * cbPerFrame._m0[3u].x);
    float _2923 = ((isnan(1.0) ? _4896 : (isnan(_4896) ? 1.0 : min(_4896, 1.0))) * (_2897 + ((isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0))) * _830))) + ((_2903 + ((isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0))) * _1672)) * cbPerFrame._m0[3u].x);
    float _2924 = ((isnan(1.0) ? _4907 : (isnan(_4907) ? 1.0 : min(_4907, 1.0))) * (_2899 + ((isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0))) * _830))) + ((_2905 + ((isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0))) * _1672)) * cbPerFrame._m0[3u].x);
    uint _2925 = _790 + 6u;
    float _2933 = _752 / cbSceneParam._m0[86u].x;
    float _2934 = _753 / cbSceneParam._m0[86u].y;
    vec4 _2948 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2933, _2934, (log2((isnan(cbSceneParam._m0[77u].w) ? _675 : (isnan(_675) ? cbSceneParam._m0[77u].w : min(_675, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2950 = _2948.x;
    float _2951 = _2948.y;
    float _2952 = _2948.z;
    float _2953 = _2948.w;
    float _3025;
    float _3027;
    float _3029;
    float _3031;
    if (_675 > cbSceneParam._m0[78u].w)
    {
        float _2987 = isnan(_675) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _675 : min(cbSceneParam._m0[80u].w, _675));
        float _2988 = _2987 / _675;
        float _2999 = _2988 * _725;
        float _3000 = _726 * _2988;
        float _3001 = (-0.0) - _3000;
        float _3003 = _2988 * _727;
        float _3005 = (cbSceneParam._m0[77u].w * _3001) / _2987;
        float _3006 = _3005 + cbSceneParam._m0[79u].w;
        float _3007 = cbSceneParam._m0[79u].w - _3000;
        float _3013 = sqrt(((_2999 * _2999) + (_3000 * _3000)) + (_3003 * _3003));
        float _3016 = (1.0 - (cbSceneParam._m0[77u].w / _2987)) * _3013;
        float _3021 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3023 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3200;
        if (abs((_3001 - _3005) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3200 = ((((_3006 > 0.0) ? exp2(_3021 * _3006) : (2.0 - exp2(_3023 * _3006))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3016;
        }
        else
        {
            float _3144 = 1.0 / cbSceneParam._m0[80u].x;
            float _3145 = isnan(_3007) ? _3006 : (isnan(_3006) ? _3007 : max(_3006, _3007));
            float _3146 = isnan(_3007) ? _3006 : (isnan(_3006) ? _3007 : min(_3006, _3007));
            float _3155 = isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : min(_3145, 0.0));
            float _3156 = isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : min(_3146, 0.0));
            _3200 = ((abs(_3013 / _3001) * cbSceneParam._m0[80u].y) * ((((_3155 - _3156) * 2.0) - ((exp2(_3021 * (isnan(0.0) ? _3145 : (isnan(_3145) ? 0.0 : max(_3145, 0.0)))) - exp2(_3021 * (isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0))))) * _3144)) - ((exp2(_3023 * _3155) - exp2(_3023 * _3156)) * _3144))) + (_3016 * cbSceneParam._m0[80u].z);
        }
        vec4 _3202 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2933, _2934, 1.0), 0.0);
        float _3211 = exp2((_3200 * (-1.44269502162933349609375)) * (1.0 - _3202.w));
        float _3212 = log2(_3211);
        float _3228 = log2(_2953);
        _3025 = (exp2(_3228 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3212 * cbSceneParam._m0[78u].x)) * _3202.x) / cbSceneParam._m0[78u].x)) + _2950;
        _3027 = (exp2(_3228 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3212 * cbSceneParam._m0[78u].y)) * _3202.y) / cbSceneParam._m0[78u].y)) + _2951;
        _3029 = (exp2(_3228 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3212 * cbSceneParam._m0[78u].z)) * _3202.z) / cbSceneParam._m0[78u].z)) + _2952;
        _3031 = _3211 * _2953;
    }
    else
    {
        _3025 = _2950;
        _3027 = _2951;
        _3029 = _2952;
        _3031 = _2953;
    }
    bool _3238;
    vec4 _3041;
    vec4 _3063;
    float _3065;
    float _3069;
    float _3070;
    float _3071;
    float _3072;
    bool _3082;
    for (;;)
    {
        _3041 = cbMatDynParam._m0[0u];
        float _3043 = roundEven(_3041.y);
        bool _3044 = _3043 == 3.0;
        float _3045 = log2(_3031);
        float _3052 = exp2(_3045 * cbSceneParam._m0[78u].x) * _2922;
        float _3053 = exp2(_3045 * cbSceneParam._m0[78u].y) * _2923;
        float _3054 = exp2(_3045 * cbSceneParam._m0[78u].z) * _2924;
        float _3061 = _741 + (-0.5);
        _3063 = cbMtdParam._m0[1u];
        _3065 = _3063.y * _3061;
        float _3068 = (_3043 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3069 = _3068 * (_3044 ? _3052 : (_3052 + (cbSceneParam._m0[72u].w * _3025)));
        _3070 = _3068 * (_3044 ? _3053 : (_3053 + (cbSceneParam._m0[72u].w * _3027)));
        _3071 = _3068 * (_3044 ? _3054 : (_3054 + (cbSceneParam._m0[72u].w * _3029)));
        _3072 = _3061 * 0.999000012874603271484375;
        _3082 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3082)
        {
            if ((cbInstanceData._m0[_790 + 7u].x + _3072) < 0.5)
            {
                _3238 = true;
                break;
            }
        }
        uint _3179 = _791 + uint(_3041.w);
        if ((cbInstanceData._m0[_3179].w < 1.0) && ((cbInstanceData._m0[_3179].w + _3072) < 0.5))
        {
            _3238 = true;
            break;
        }
        if ((_3065 + 1.0) < _3063.x)
        {
            _3238 = true;
            break;
        }
        _3238 = false;
        break;
    }
    float _3442;
    if (_3238)
    {
        discard_state = true;
        _3442 = 0.0;
    }
    else
    {
        _3442 = cbInstanceData._m0[_2925].w;
    }
    SV_Target.x = _3069;
    SV_Target.y = _3070;
    SV_Target.z = _3071;
    SV_Target.w = _3442;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2925].w;
    discard_exit();
}


