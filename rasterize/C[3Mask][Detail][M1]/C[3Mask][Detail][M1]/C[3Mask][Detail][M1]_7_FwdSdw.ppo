#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1189;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _201 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _202 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _203 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_201, _202, _203), vec3(_201, _202, _203)));
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _246 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _252 = _246.x * cbMtdParam._m0[10u].x;
    float _253 = _246.y * cbMtdParam._m0[10u].y;
    float _254 = _246.z * cbMtdParam._m0[10u].z;
    vec4 _272 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _322 = cbMtdParam._m0[18u].y * texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x;
    float _333 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].x * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].y * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _322)) + 1.0;
    float _3802 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _334 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
    float _341 = (_334 * ((_272.x * cbMtdParam._m0[11u].x) - _252)) + _252;
    float _342 = (_334 * ((_272.y * cbMtdParam._m0[11u].y) - _253)) + _253;
    float _343 = (_334 * ((_272.z * cbMtdParam._m0[11u].z) - _254)) + _254;
    vec4 _361 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _388 = ((cbMtdParam._m0[17u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _322)) + 1.0;
    float _3813 = isnan(0.0) ? _388 : (isnan(_388) ? 0.0 : max(_388, 0.0));
    float _389 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
    float _396 = (_389 * ((_361.x * cbMtdParam._m0[12u].x) - _341)) + _341;
    float _397 = (_389 * ((_361.y * cbMtdParam._m0[12u].y) - _342)) + _342;
    float _398 = (_389 * ((_361.z * cbMtdParam._m0[12u].z) - _343)) + _343;
    vec4 _415 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _440 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[18u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[18u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _322)) + 1.0;
    float _3824 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _441 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
    float _448 = (_441 * ((_415.x * cbMtdParam._m0[13u].x) - _396)) + _396;
    float _449 = (_441 * ((_415.y * cbMtdParam._m0[13u].y) - _397)) + _397;
    float _450 = (_441 * ((_415.z * cbMtdParam._m0[13u].z) - _398)) + _398;
    vec4 _463 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _465 = _463.x;
    float _483 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _465) * _334) + _465;
    float _501 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _483) * _389) + _483;
    float _518 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _501) * _441) + _501;
    vec4 _531 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _533 = _531.x;
    float _534 = _531.y;
    float _537 = cbMtdParam._m0[17u].y * _531.z;
    vec4 _549 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _558 = (((cbMtdParam._m0[17u].x * _549.z) - _537) * _334) + _537;
    vec4 _571 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _583 = (((cbMtdParam._m0[16u].w * _571.z) - _558) * _389) + _558;
    vec4 _596 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _605 = (((cbMtdParam._m0[16u].z * _596.z) - _583) * _441) + _583;
    float _610 = ((_549.x - _533) * _334) + _533;
    float _611 = ((_549.y - _534) * _334) + _534;
    float _616 = ((_571.x - _610) * _389) + _610;
    float _617 = ((_571.y - _611) * _389) + _611;
    float _626 = ((((_596.x - _616) * _441) + _616) * 2.0) + (-1.0);
    float _628 = ((((_596.y - _617) * _441) + _617) * 2.0) + (-1.0);
    float _629 = dot(vec2(_626, _628), vec2(_626, _628));
    float _3835 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _634 = sqrt(1.0 - (isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))));
    float _637 = fma(_634, _216 * NORMAL.x, fma(_628, _223 * TANGENT.x, (_209 * _201) * _626));
    float _640 = fma(_634, _216 * NORMAL.y, fma(_628, _223 * TANGENT.y, (_209 * _202) * _626));
    float _643 = fma(_634, _216 * NORMAL.z, fma(_628, _223 * TANGENT.z, (_209 * _203) * _626));
    float _647 = inversesqrt(dot(vec3(_637, _640, _643), vec3(_637, _640, _643)));
    float _648 = _647 * _637;
    float _649 = _647 * _640;
    float _650 = _647 * _643;
    float _3846 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _651 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
    float _3857 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _3868 = isnan(0.0) ? _449 : (isnan(_449) ? 0.0 : max(_449, 0.0));
    float _3879 = isnan(0.0) ? _450 : (isnan(_450) ? 0.0 : max(_450, 0.0));
    float _3890 = isnan(0.0) ? _518 : (isnan(_518) ? 0.0 : max(_518, 0.0));
    float _655 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
    float _671 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _711 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _721 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _711);
    float _722 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _711);
    float _723 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _711);
    float _727 = inversesqrt(dot(vec3(_721, _722, _723), vec3(_721, _722, _723)));
    float _728 = _721 * _727;
    float _729 = _722 * _727;
    float _730 = _723 * _727;
    float _736 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _737 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _755 = fma(_650, cbSceneParam._m0[5u].z, fma(_649, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _648));
    float _758 = fma(_650, cbSceneParam._m0[6u].z, fma(_649, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _648));
    float _761 = fma(_650, cbSceneParam._m0[7u].z, fma(_649, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _648));
    uint _774 = uint(roundEven(NORMAL.w)) * 13u;
    uint _776 = (_774 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _782 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0)))) * cbInstanceData._m0[_776].x;
    float _783 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0)))) * cbInstanceData._m0[_776].y;
    float _784 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0)))) * cbInstanceData._m0[_776].z;
    float _3901 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _785 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
    float _3912 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _786 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
    float _3923 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _787 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
    float _788 = 1.0 - _655;
    float _789 = _785 * _788;
    float _790 = _786 * _788;
    float _791 = _787 * _788;
    float _796 = (_785 + (-0.039999999105930328369140625)) * _655;
    float _797 = (_786 + (-0.039999999105930328369140625)) * _655;
    float _798 = (_787 + (-0.039999999105930328369140625)) * _655;
    float _799 = _796 + 0.039999999105930328369140625;
    float _801 = _797 + 0.039999999105930328369140625;
    float _802 = _798 + 0.039999999105930328369140625;
    vec4 _811 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _736, cbSceneParam._m0[86u].y * _737));
    float _814 = _811.x * TEXCOORD_5.w;
    float _815 = dot(vec3(_648, _649, _650), vec3(_728, _729, _730));
    float _818 = _815 * 2.0;
    float _822 = (_818 * _648) - _728;
    float _823 = (_818 * _649) - _729;
    float _824 = (_818 * _650) - _730;
    float _828 = abs(dot(vec3(_728, _729, _730), vec3(_648, _649, _650)));
    float _3934 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
    float _830 = sqrt(_651);
    float _843 = exp2((_830 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_830 * 3.0));
    float _849 = (1.0 - _843) * ((_830 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _850 = _843 * _830;
    float _878 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _882 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _886 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1188;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _913 = fma(_886, cbModelParam._m0[26u].z, fma(_882, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _878));
        float _917 = fma(_886, cbModelParam._m0[27u].z, fma(_882, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _878));
        float _921 = fma(_886, cbModelParam._m0[28u].z, fma(_882, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _878));
        float _946 = _878 + _648;
        float _947 = _882 + _649;
        float _948 = _886 + _650;
        float _958 = fma(_948, cbModelParam._m0[26u].z, fma(_947, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _946)) - _913;
        float _959 = fma(_948, cbModelParam._m0[27u].z, fma(_947, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _946)) - _917;
        float _960 = fma(_948, cbModelParam._m0[28u].z, fma(_947, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _946)) - _921;
        float _964 = inversesqrt(dot(vec3(_958, _959, _960), vec3(_958, _959, _960)));
        float _977 = ((_964 * _958) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_913 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _978 = ((_964 * _959) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_917 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _979 = ((_964 * _960) / cbModelParam._m0[34u].z) + ((((((_921 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_977, _978, _979), 0.0);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_977, _978, _979), 0.0);
        vec4 _996 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_977, _978, _979), 0.0);
        vec4 _1003 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_977, _978, _979), 0.0);
        float _1016 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_982.x + (-0.5));
        float _1018 = _1016 * (_982.y + (-0.5));
        float _1019 = _1016 * (_982.z + (-0.5));
        float _1026 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1027 = _1026 * (_989.x + (-0.5));
        float _1028 = _1026 * (_989.y + (-0.5));
        float _1029 = _1026 * (_989.z + (-0.5));
        float _1036 = exp2((_996.w + (-0.5)) * 20.0) * 2.0;
        float _1037 = _1036 * (_996.x + (-0.5));
        float _1038 = _1036 * (_996.y + (-0.5));
        float _1039 = _1036 * (_996.z + (-0.5));
        float _1046 = exp2((_1003.w + (-0.5)) * 20.0) * 2.0;
        float _1047 = _1046 * (_1003.x + (-0.5));
        float _1048 = _1046 * (_1003.y + (-0.5));
        float _1049 = _1046 * (_1003.z + (-0.5));
        float _1050 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1051 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1052 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1053 = _1017 * 0.5;
        float _1054 = _1027 * 0.5;
        float _1055 = _1037 * 0.5;
        float _1056 = dot(vec3(_1053, _1054, _1055), vec3(_1053, _1054, _1055));
        float _1061 = (_1056 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1056);
        float _1070 = (dot(vec3(_648, _649, _650), vec3(_1061 * _1053, _1061 * _1054, _1061 * _1055)) + 1.0) * 0.5;
        float _3960 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1080 = sqrt(((_1054 * _1054) + (_1053 * _1053)) + (_1055 * _1055)) / (_1050 + 9.9999997473787516355514526367188e-06);
        float _3971 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1081 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1082 = _1081 * 2.0;
        float _1086 = (1.0 - _1081) / (_1081 + 1.0);
        float _3982 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1087 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1096 = ((((1.0 - _1087) * (_1082 + 2.0)) * exp2(log2(isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * (_1082 + 1.0))) + _1087) * _1050;
        float _1097 = _1018 * 0.5;
        float _1098 = _1028 * 0.5;
        float _1099 = _1038 * 0.5;
        float _1100 = dot(vec3(_1097, _1098, _1099), vec3(_1097, _1098, _1099));
        float _1105 = (_1100 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1100);
        float _1113 = (dot(vec3(_648, _649, _650), vec3(_1105 * _1097, _1105 * _1098, _1105 * _1099)) + 1.0) * 0.5;
        float _3993 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1122 = sqrt(((_1098 * _1098) + (_1097 * _1097)) + (_1099 * _1099)) / (_1051 + 9.9999997473787516355514526367188e-06);
        float _4004 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1124 = _1123 * 2.0;
        float _1128 = (1.0 - _1123) / (_1123 + 1.0);
        float _4015 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1129 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1138 = ((((1.0 - _1129) * (_1124 + 2.0)) * exp2(log2(isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * (_1124 + 1.0))) + _1129) * _1051;
        float _1139 = _1019 * 0.5;
        float _1140 = _1029 * 0.5;
        float _1141 = _1039 * 0.5;
        float _1142 = dot(vec3(_1139, _1140, _1141), vec3(_1139, _1140, _1141));
        float _1147 = (_1142 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1142);
        float _1155 = (dot(vec3(_648, _649, _650), vec3(_1147 * _1139, _1147 * _1140, _1147 * _1141)) + 1.0) * 0.5;
        float _4026 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1164 = sqrt(((_1140 * _1140) + (_1139 * _1139)) + (_1141 * _1141)) / (_1052 + 9.9999997473787516355514526367188e-06);
        float _4037 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1166 = _1165 * 2.0;
        float _1170 = (1.0 - _1165) / (_1165 + 1.0);
        float _4048 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1171 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1180 = ((((1.0 - _1171) * (_1166 + 2.0)) * exp2(log2(isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * (_1166 + 1.0))) + _1171) * _1052;
        _1188 = _1019;
        _1190 = _1018;
        _1191 = _1017;
        _1192 = _1029;
        _1193 = _1028;
        _1194 = _1027;
        _1195 = _1039;
        _1196 = _1038;
        _1197 = _1037;
        _1198 = _1052;
        _1199 = _1051;
        _1200 = _1050;
        _1201 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0)));
        _1202 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0)));
        _1203 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0)));
    }
    else
    {
        _1188 = _1189;
        _1190 = _1189;
        _1191 = _1189;
        _1192 = _1189;
        _1193 = _1189;
        _1194 = _1189;
        _1195 = _1189;
        _1196 = _1189;
        _1197 = _1189;
        _1198 = _1189;
        _1199 = _1189;
        _1200 = _1189;
        _1201 = 0.0;
        _1202 = 0.0;
        _1203 = 0.0;
    }
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    float _1509;
    float _1510;
    float _1511;
    float _1512;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1229 = fma(_886, cbModelParam._m0[30u].z, fma(_882, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _878));
        float _1233 = fma(_886, cbModelParam._m0[31u].z, fma(_882, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _878));
        float _1237 = fma(_886, cbModelParam._m0[32u].z, fma(_882, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _878));
        float _1260 = _878 + _648;
        float _1261 = _882 + _649;
        float _1262 = _886 + _650;
        float _1272 = fma(_1262, cbModelParam._m0[30u].z, fma(_1261, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1260)) - _1229;
        float _1273 = fma(_1262, cbModelParam._m0[31u].z, fma(_1261, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1260)) - _1233;
        float _1274 = fma(_1262, cbModelParam._m0[32u].z, fma(_1261, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1260)) - _1237;
        float _1278 = inversesqrt(dot(vec3(_1272, _1273, _1274), vec3(_1272, _1273, _1274)));
        float _1291 = ((_1278 * _1272) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1229 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1292 = ((_1278 * _1273) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1233 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1293 = ((_1278 * _1274) / cbModelParam._m0[35u].z) + ((((((_1237 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1295 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1291, _1292, _1293), 0.0);
        vec4 _1302 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1291, _1292, _1293), 0.0);
        vec4 _1309 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1291, _1292, _1293), 0.0);
        vec4 _1316 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1291, _1292, _1293), 0.0);
        float _1328 = exp2((_1295.w + (-0.5)) * 20.0) * 2.0;
        float _1329 = _1328 * (_1295.x + (-0.5));
        float _1330 = _1328 * (_1295.y + (-0.5));
        float _1331 = _1328 * (_1295.z + (-0.5));
        float _1338 = exp2((_1302.w + (-0.5)) * 20.0) * 2.0;
        float _1339 = _1338 * (_1302.x + (-0.5));
        float _1340 = _1338 * (_1302.y + (-0.5));
        float _1341 = _1338 * (_1302.z + (-0.5));
        float _1348 = exp2((_1309.w + (-0.5)) * 20.0) * 2.0;
        float _1349 = _1348 * (_1309.x + (-0.5));
        float _1350 = _1348 * (_1309.y + (-0.5));
        float _1351 = _1348 * (_1309.z + (-0.5));
        float _1358 = exp2((_1316.w + (-0.5)) * 20.0) * 2.0;
        float _1359 = _1358 * (_1316.x + (-0.5));
        float _1360 = _1358 * (_1316.y + (-0.5));
        float _1361 = _1358 * (_1316.z + (-0.5));
        float _1362 = isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0));
        float _1363 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1364 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
        float _1365 = _1329 * 0.5;
        float _1366 = _1339 * 0.5;
        float _1367 = _1349 * 0.5;
        float _1368 = dot(vec3(_1365, _1366, _1367), vec3(_1365, _1366, _1367));
        float _1373 = (_1368 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1368);
        float _1381 = (dot(vec3(_648, _649, _650), vec3(_1373 * _1365, _1373 * _1366, _1373 * _1367)) + 1.0) * 0.5;
        float _4089 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1390 = sqrt(((_1366 * _1366) + (_1365 * _1365)) + (_1367 * _1367)) / (_1362 + 9.9999997473787516355514526367188e-06);
        float _4100 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
        float _1392 = _1391 * 2.0;
        float _1396 = (1.0 - _1391) / (_1391 + 1.0);
        float _4111 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
        float _1406 = ((((1.0 - _1397) * (_1392 + 2.0)) * exp2(log2(isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * (_1392 + 1.0))) + _1397) * _1362;
        float _1407 = _1330 * 0.5;
        float _1408 = _1340 * 0.5;
        float _1409 = _1350 * 0.5;
        float _1410 = dot(vec3(_1407, _1408, _1409), vec3(_1407, _1408, _1409));
        float _1415 = (_1410 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1410);
        float _1423 = (dot(vec3(_648, _649, _650), vec3(_1415 * _1407, _1415 * _1408, _1415 * _1409)) + 1.0) * 0.5;
        float _4122 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1432 = sqrt(((_1408 * _1408) + (_1407 * _1407)) + (_1409 * _1409)) / (_1363 + 9.9999997473787516355514526367188e-06);
        float _4133 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _1434 = _1433 * 2.0;
        float _1438 = (1.0 - _1433) / (_1433 + 1.0);
        float _4144 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        float _1439 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _1448 = ((((1.0 - _1439) * (_1434 + 2.0)) * exp2(log2(isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_1434 + 1.0))) + _1439) * _1363;
        float _1449 = _1331 * 0.5;
        float _1450 = _1341 * 0.5;
        float _1451 = _1351 * 0.5;
        float _1452 = dot(vec3(_1449, _1450, _1451), vec3(_1449, _1450, _1451));
        float _1457 = (_1452 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1452);
        float _1465 = (dot(vec3(_648, _649, _650), vec3(_1457 * _1449, _1457 * _1450, _1457 * _1451)) + 1.0) * 0.5;
        float _4155 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1474 = sqrt(((_1450 * _1450) + (_1449 * _1449)) + (_1451 * _1451)) / (_1364 + 9.9999997473787516355514526367188e-06);
        float _4166 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0));
        float _1476 = _1475 * 2.0;
        float _1480 = (1.0 - _1475) / (_1475 + 1.0);
        float _4177 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1481 = isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0));
        float _1490 = ((((1.0 - _1481) * (_1476 + 2.0)) * exp2(log2(isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0))) * (_1476 + 1.0))) + _1481) * _1364;
        _1498 = _1331;
        _1499 = _1330;
        _1500 = _1329;
        _1501 = _1341;
        _1502 = _1340;
        _1503 = _1339;
        _1504 = _1351;
        _1505 = _1350;
        _1506 = _1349;
        _1507 = _1364;
        _1508 = _1363;
        _1509 = _1362;
        _1510 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0)));
        _1511 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)));
        _1512 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)));
    }
    else
    {
        _1498 = _1189;
        _1499 = _1189;
        _1500 = _1189;
        _1501 = _1189;
        _1502 = _1189;
        _1503 = _1189;
        _1504 = _1189;
        _1505 = _1189;
        _1506 = _1189;
        _1507 = _1189;
        _1508 = _1189;
        _1509 = _1189;
        _1510 = 0.0;
        _1511 = 0.0;
        _1512 = 0.0;
    }
    float _1522 = (cbModelParam._m0[1u].x * (_1510 - _1201)) + _1201;
    float _1523 = (cbModelParam._m0[1u].x * (_1511 - _1202)) + _1202;
    float _1524 = (cbModelParam._m0[1u].x * (_1512 - _1203)) + _1203;
    float _1545 = fma(_1524, cbSceneParam._m0[89u].z, fma(_1523, cbSceneParam._m0[89u].y, _1522 * cbSceneParam._m0[89u].x));
    float _1548 = fma(_1524, cbSceneParam._m0[90u].z, fma(_1523, cbSceneParam._m0[90u].y, _1522 * cbSceneParam._m0[90u].x));
    float _1551 = fma(_1524, cbSceneParam._m0[91u].z, fma(_1523, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1522));
    float _1566 = _822 * 0.5;
    float _1567 = _823 * 0.5;
    float _1568 = _824 * 0.5;
    float _1569 = dot(vec4(_1566, _1567, _1568, 1.0), vec4(_1500, _1503, _1506, _1509));
    float _1572 = dot(vec4(_1566, _1567, _1568, 1.0), vec4(_1499, _1502, _1505, _1508));
    float _1575 = dot(vec4(_1566, _1567, _1568, 1.0), vec4(_1498, _1501, _1504, _1507));
    float _1609;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1582 = dot(vec4(_1566, _1567, _1568, 1.0), vec4(_1188, _1192, _1195, _1198));
        float _1586 = dot(vec4(_1566, _1567, _1568, 1.0), vec4(_1190, _1193, _1196, _1199));
        float _1590 = dot(vec4(_1566, _1567, _1568, 1.0), vec4(_1191, _1194, _1197, _1200));
        float _1597 = dot(vec4(cbModelParam._m0[39u]), vec4(_1566, _1567, _1568, 1.0));
        _1609 = dot(vec3(isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0)), isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0)), isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1597) ? 0.0 : (isnan(0.0) ? _1597 : max(0.0, _1597))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1609 = 1.0;
    }
    float _1620;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1611 = dot(vec4(cbModelParam._m0[40u]), vec4(_1566, _1567, _1568, 1.0));
        _1620 = dot(vec3(isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)), isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0)), isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1611) ? 0.0 : (isnan(0.0) ? _1611 : max(0.0, _1611))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1620 = 1.0;
    }
    float _1624 = (_1620 * cbModelParam._m0[1u].x) + (_1609 * (1.0 - cbModelParam._m0[1u].x));
    float _1634 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _651);
    float _1635 = isnan(_1634) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1634 : min(cbModelParam._m0[25u].z, _1634));
    float _1715;
    float _1717;
    float _1719;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1682 = fma(_886, cbModelParam._m0[13u].z, fma(_882, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _878)) + cbModelParam._m0[13u].w;
        float _1686 = fma(_886, cbModelParam._m0[14u].z, fma(_882, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _878)) + cbModelParam._m0[14u].w;
        float _1690 = fma(_886, cbModelParam._m0[15u].z, fma(_882, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _878)) + cbModelParam._m0[15u].w;
        float _1693 = fma(_824, cbModelParam._m0[13u].z, fma(_823, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _822));
        float _1696 = fma(_824, cbModelParam._m0[14u].z, fma(_823, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _822));
        float _1699 = fma(_824, cbModelParam._m0[15u].z, fma(_823, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _822));
        float _1727;
        if (_1693 > 0.0)
        {
            _1727 = abs((1.0 - _1682) / _1693);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1693 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1682 + 1.0) / _1693);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1727 = frontier_phi_14_12_ladder;
        }
        float _1900;
        if (_1696 > 0.0)
        {
            _1900 = abs((1.0 - _1686) / _1696);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1696 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1686 + 1.0) / _1696);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _1900 = frontier_phi_23_19_ladder;
        }
        float _2196;
        if (_1699 > 0.0)
        {
            _2196 = abs((1.0 - _1690) / _1699);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1699 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1690 + 1.0) / _1699);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2196 = frontier_phi_35_30_ladder;
        }
        float _2198 = isnan(_1900) ? _1727 : (isnan(_1727) ? _1900 : min(_1727, _1900));
        float _2199 = isnan(_2196) ? _2198 : (isnan(_2198) ? _2196 : min(_2198, _2196));
        float _2203 = (_2199 * _1693) + _1682;
        float _2204 = (_2199 * _1696) + _1686;
        float _2205 = (_2199 * _1699) + _1690;
        float _2206 = _2199 * 9.9999997473787516355514526367188e-05;
        float _2208 = (-1.0) - _2206;
        float _2210 = _2206 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2205 > _2210) || ((_2205 < _2208) || ((_2204 > _2210) || ((_2204 < _2208) || ((_2203 < _2208) || (_2203 > _2210))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2350 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2205, cbModelParam._m0[9u].z, fma(_2204, cbModelParam._m0[9u].y, _2203 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2205, cbModelParam._m0[10u].z, fma(_2204, cbModelParam._m0[10u].y, _2203 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2205, cbModelParam._m0[11u].z, fma(_2204, cbModelParam._m0[11u].y, _2203 * cbModelParam._m0[11u].x))), _1635);
            frontier_phi_13_35_ladder = _2350.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2350.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2350.x * cbModelParam._m0[1u].y;
        }
        _1715 = frontier_phi_13_35_ladder_2;
        _1717 = frontier_phi_13_35_ladder_1;
        _1719 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1703 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_822, _823, _824), _1635);
        _1715 = _1703.x * cbModelParam._m0[1u].y;
        _1717 = _1703.y * cbModelParam._m0[1u].y;
        _1719 = _1703.z * cbModelParam._m0[1u].y;
    }
    float _1723 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _651);
    float _1724 = isnan(_1723) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1723 : min(cbModelParam._m0[25u].w, _1723));
    float _1815;
    float _1817;
    float _1819;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1779 = fma(_886, cbModelParam._m0[21u].z, fma(_882, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _878)) + cbModelParam._m0[21u].w;
        float _1783 = fma(_886, cbModelParam._m0[22u].z, fma(_882, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _878)) + cbModelParam._m0[22u].w;
        float _1787 = fma(_886, cbModelParam._m0[23u].z, fma(_882, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _878)) + cbModelParam._m0[23u].w;
        float _1790 = fma(_824, cbModelParam._m0[21u].z, fma(_823, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _822));
        float _1793 = fma(_824, cbModelParam._m0[22u].z, fma(_823, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _822));
        float _1796 = fma(_824, cbModelParam._m0[23u].z, fma(_823, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _822));
        float _1905;
        if (_1790 > 0.0)
        {
            _1905 = abs((1.0 - _1779) / _1790);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1790 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1779 + 1.0) / _1790);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1905 = frontier_phi_25_21_ladder;
        }
        float _2223;
        if (_1793 > 0.0)
        {
            _2223 = abs((1.0 - _1783) / _1793);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1793 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1783 + 1.0) / _1793);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2223 = frontier_phi_37_32_ladder;
        }
        float _2561;
        if (_1796 > 0.0)
        {
            _2561 = abs((1.0 - _1787) / _1796);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1796 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1787 + 1.0) / _1796);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2561 = frontier_phi_47_44_ladder;
        }
        float _2563 = isnan(_2223) ? _1905 : (isnan(_1905) ? _2223 : min(_1905, _2223));
        float _2564 = isnan(_2561) ? _2563 : (isnan(_2563) ? _2561 : min(_2563, _2561));
        float _2568 = (_2564 * _1790) + _1779;
        float _2569 = (_2564 * _1793) + _1783;
        float _2570 = (_2564 * _1796) + _1787;
        float _2571 = _2564 * 9.9999997473787516355514526367188e-05;
        float _2572 = (-1.0) - _2571;
        float _2574 = _2571 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2570 > _2574) || ((_2570 < _2572) || ((_2569 > _2574) || ((_2569 < _2572) || ((_2568 < _2572) || (_2568 > _2574))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2692 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2570, cbModelParam._m0[17u].z, fma(_2569, cbModelParam._m0[17u].y, _2568 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2570, cbModelParam._m0[18u].z, fma(_2569, cbModelParam._m0[18u].y, _2568 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2570, cbModelParam._m0[19u].z, fma(_2569, cbModelParam._m0[19u].y, _2568 * cbModelParam._m0[19u].x))), _1724);
            frontier_phi_22_47_ladder = _2692.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2692.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2692.x * cbModelParam._m0[1u].z;
        }
        _1815 = frontier_phi_22_47_ladder_2;
        _1817 = frontier_phi_22_47_ladder_1;
        _1819 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1799 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_822, _823, _824), _1724);
        _1815 = _1799.x * cbModelParam._m0[1u].z;
        _1817 = _1799.y * cbModelParam._m0[1u].z;
        _1819 = _1799.z * cbModelParam._m0[1u].z;
    }
    float _1832 = (((_849 * _799) + _850) * _814) * ((cbModelParam._m0[1u].w * (_1815 - _1715)) + _1715);
    float _1834 = (((_849 * _801) + _850) * _814) * ((cbModelParam._m0[1u].w * (_1817 - _1717)) + _1717);
    float _1836 = (((_849 * _802) + _850) * _814) * ((cbModelParam._m0[1u].w * (_1819 - _1719)) + _1719);
    float _1839 = fma(_1836, cbSceneParam._m0[89u].z, fma(_1834, cbSceneParam._m0[89u].y, _1832 * cbSceneParam._m0[89u].x));
    float _1842 = fma(_1836, cbSceneParam._m0[90u].z, fma(_1834, cbSceneParam._m0[90u].y, _1832 * cbSceneParam._m0[90u].x));
    float _1845 = fma(_1836, cbSceneParam._m0[91u].z, fma(_1834, cbSceneParam._m0[91u].y, _1832 * cbSceneParam._m0[91u].x));
    float _1879 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1883 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1887 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1891 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1892 = _1879 / _1891;
    float _1893 = _1883 / _1891;
    float _1894 = _1887 / _1891;
    float _2041;
    float _2042;
    float _2043;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1921 = ((uint(_1894 > cbSceneParam._m0[59u].y) + uint(_1894 > cbSceneParam._m0[59u].x)) + uint(_1894 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1922 = _1921 + 43u;
        uint _1930 = _1921 + 44u;
        uint _1938 = _1921 + 45u;
        uint _1946 = _1921 + 46u;
        float _1957 = fma(_1891, cbSceneParam._m0[_1922].w, fma(_1887, cbSceneParam._m0[_1922].z, fma(_1883, cbSceneParam._m0[_1922].y, _1879 * cbSceneParam._m0[_1922].x)));
        float _1961 = fma(_1891, cbSceneParam._m0[_1930].w, fma(_1887, cbSceneParam._m0[_1930].z, fma(_1883, cbSceneParam._m0[_1930].y, _1879 * cbSceneParam._m0[_1930].x)));
        float _1969 = fma(_1891, cbSceneParam._m0[_1946].w, fma(_1887, cbSceneParam._m0[_1946].z, fma(_1883, cbSceneParam._m0[_1946].y, _1879 * cbSceneParam._m0[_1946].x)));
        float _1974 = cbSceneParam._m0[33u].z * _1969;
        float _1976 = cbSceneParam._m0[33u].w * _1969;
        float _1979 = fma(_1891, cbSceneParam._m0[_1938].w, fma(_1887, cbSceneParam._m0[_1938].z, fma(_1883, cbSceneParam._m0[_1938].y, _1879 * cbSceneParam._m0[_1938].x))) / _1969;
        float _2027 = (cbSceneParam._m0[33u].x - sqrt(((_1893 * _1893) + (_1892 * _1892)) + (_1894 * _1894))) * cbSceneParam._m0[33u].y;
        float _4303 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
        float _2034 = (isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1974 + _1957) / _1969, (_1976 + _1961) / _1969), _1979), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1976 + _1957) / _1969, (_1961 - _1974) / _1969), _1979), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1957 - _1974) / _1969, (_1961 - _1976) / _1969), _1979), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1957 - _1976) / _1969, (_1974 + _1961) / _1969), _1979), 0.0)).x), vec4(0.25)));
        _2041 = 1.0 - (_2034 * cbSceneParam._m0[34u].x);
        _2042 = 1.0 - (_2034 * cbSceneParam._m0[34u].y);
        _2043 = 1.0 - (_2034 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2041 = 1.0;
        _2042 = 1.0;
        _2043 = 1.0;
    }
    float _2107;
    float _2109;
    float _2111;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2095 = fma(_1891, cbSceneParam._m0[63u].w, fma(_1887, cbSceneParam._m0[63u].z, fma(_1883, cbSceneParam._m0[63u].y, _1879 * cbSceneParam._m0[63u].x)));
        float _2096 = fma(_1891, cbSceneParam._m0[60u].w, fma(_1887, cbSceneParam._m0[60u].z, fma(_1883, cbSceneParam._m0[60u].y, _1879 * cbSceneParam._m0[60u].x))) / _2095;
        float _2097 = fma(_1891, cbSceneParam._m0[61u].w, fma(_1887, cbSceneParam._m0[61u].z, fma(_1883, cbSceneParam._m0[61u].y, _1879 * cbSceneParam._m0[61u].x))) / _2095;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2096 >= cbSceneParam._m0[64u].x) && (_2097 >= cbSceneParam._m0[64u].y)) && (_2096 <= cbSceneParam._m0[64u].z)) && (_2097 <= cbSceneParam._m0[64u].w))
        {
            float _2236 = fma(_1891, cbSceneParam._m0[62u].w, fma(_1887, cbSceneParam._m0[62u].z, fma(_1883, cbSceneParam._m0[62u].y, _1879 * cbSceneParam._m0[62u].x))) / _2095;
            float _2240 = isnan(cbSceneParam._m0[41u].w) ? _2236 : (isnan(_2236) ? cbSceneParam._m0[41u].w : max(_2236, cbSceneParam._m0[41u].w));
            float _2283 = (cbSceneParam._m0[33u].x - sqrt(((_1893 * _1893) + (_1892 * _1892)) + (_1894 * _1894))) * cbSceneParam._m0[33u].y;
            float _4319 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0));
            float _2290 = (isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2096, cbSceneParam._m0[33u].w + _2097), _2240), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2096, _2097 - cbSceneParam._m0[33u].z), _2240), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2096 - cbSceneParam._m0[33u].z, _2097 - cbSceneParam._m0[33u].w), _2240), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2096 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2097), _2240), 0.0)).x), vec4(0.25)));
            float _2294 = 1.0 - (_2290 * cbSceneParam._m0[34u].x);
            float _2295 = 1.0 - (_2290 * cbSceneParam._m0[34u].y);
            float _2296 = 1.0 - (_2290 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2296) ? _2043 : (isnan(_2043) ? _2296 : min(_2043, _2296));
            frontier_phi_34_33_ladder_1 = isnan(_2295) ? _2042 : (isnan(_2042) ? _2295 : min(_2042, _2295));
            frontier_phi_34_33_ladder_2 = isnan(_2294) ? _2041 : (isnan(_2041) ? _2294 : min(_2041, _2294));
        }
        else
        {
            frontier_phi_34_33_ladder = _2043;
            frontier_phi_34_33_ladder_1 = _2042;
            frontier_phi_34_33_ladder_2 = _2041;
        }
        _2107 = frontier_phi_34_33_ladder_2;
        _2109 = frontier_phi_34_33_ladder_1;
        _2111 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2107 = _2041;
        _2109 = _2042;
        _2111 = _2043;
    }
    uvec4 _2116 = floatBitsToUint(cbInstanceData._m0[_774 + 5u]);
    uint _2118 = _2116.x * 14u;
    uint _2119 = _2118 + 13u;
    float _2126 = _814 + (-1.0);
    float _2131 = (cbLight._m0[_2119].x * _2126) + 1.0;
    float _2132 = (cbLight._m0[_2119].y * _2126) + 1.0;
    float _2133 = (cbLight._m0[_2119].z * _2126) + 1.0;
    float _2134 = (cbLight._m0[_2119].w * _2126) + 1.0;
    uint _2135 = _2118 + 5u;
    float _2141 = isnan(1.0) ? _2132 : (isnan(_2132) ? 1.0 : min(_2132, 1.0));
    uint _2145 = _2118 + 4u;
    float _2155 = isnan(1.0) ? _2131 : (isnan(_2131) ? 1.0 : min(_2131, 1.0));
    uint _2159 = _2118 | 1u;
    float _2170 = dot(vec3(cbLight._m0[_2118].xyz), vec3(_648, _649, _650));
    float _2173 = dot(vec3(cbLight._m0[_2159].xyz), vec3(_648, _649, _650));
    float _4355 = isnan(0.0) ? _2170 : (isnan(_2170) ? 0.0 : max(_2170, 0.0));
    float _4366 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
    float _2178 = (isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0))) * 0.3183098733425140380859375;
    float _2180 = (isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * 0.3183098733425140380859375;
    float _2187 = ((cbLight._m0[_2135].x * _2141) * _2180) + (((cbLight._m0[_2145].x * _2107) * _2155) * _2178);
    float _2188 = ((_2141 * cbLight._m0[_2135].y) * _2180) + (((cbLight._m0[_2145].y * _2109) * _2155) * _2178);
    float _2189 = ((_2141 * cbLight._m0[_2135].z) * _2180) + (((cbLight._m0[_2145].z * _2111) * _2155) * _2178);
    uvec4 _2193 = floatBitsToUint(cbLight._m0[_2118 + 12u]);
    bool _2195 = _2193.x == 0u;
    float _2297;
    float _2299;
    float _2301;
    if (_2195)
    {
        _2297 = _2187;
        _2299 = _2188;
        _2301 = _2189;
    }
    else
    {
        uint _2305 = _2118 + 6u;
        float _2321 = (dot(vec3(cbLight._m0[_2118 + 2u].xyz), vec3(_648, _649, _650)) * 0.5) + 0.5;
        float _2322 = _2321 * _2321;
        float _4377 = isnan(0.0) ? _2322 : (isnan(_2322) ? 0.0 : max(_2322, 0.0));
        float _2323 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _2324 = isnan(1.0) ? _2133 : (isnan(_2133) ? 1.0 : min(_2133, 1.0));
        _2297 = (((cbLight._m0[_2305].x * 0.3183098733425140380859375) * _2323) * _2324) + _2187;
        _2299 = (((cbLight._m0[_2305].y * 0.3183098733425140380859375) * _2323) * _2324) + _2188;
        _2301 = (((cbLight._m0[_2305].z * 0.3183098733425140380859375) * _2323) * _2324) + _2189;
    }
    bool _2304 = _2193.y == 0u;
    float _2359;
    float _2361;
    float _2363;
    if (_2304)
    {
        _2359 = _2297;
        _2361 = _2299;
        _2363 = _2301;
    }
    else
    {
        uint _2532 = _2118 + 7u;
        float _2548 = (dot(vec3(cbLight._m0[_2118 + 3u].xyz), vec3(_648, _649, _650)) * 0.5) + 0.5;
        float _2549 = _2548 * _2548;
        float _4393 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
        float _2550 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
        float _2551 = isnan(1.0) ? _2134 : (isnan(_2134) ? 1.0 : min(_2134, 1.0));
        _2359 = (((cbLight._m0[_2532].x * 0.3183098733425140380859375) * _2550) * _2551) + _2297;
        _2361 = (((cbLight._m0[_2532].y * 0.3183098733425140380859375) * _2550) * _2551) + _2299;
        _2363 = (((cbLight._m0[_2532].z * 0.3183098733425140380859375) * _2550) * _2551) + _2301;
    }
    uint _2366 = _2118 + 8u;
    float _2379 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2118].w)) * _651) * 0.949999988079071044921875);
    float _2380 = _2379 * _2379;
    float _2381 = cbLight._m0[_2118].x + _728;
    float _2382 = cbLight._m0[_2118].y + _729;
    float _2383 = cbLight._m0[_2118].z + _730;
    float _2387 = inversesqrt(dot(vec3(_2381, _2382, _2383), vec3(_2381, _2382, _2383)));
    float _2388 = _2387 * _2381;
    float _2389 = _2387 * _2382;
    float _2390 = _2387 * _2383;
    float _2391 = dot(vec3(_648, _649, _650), vec3(cbLight._m0[_2118].xyz));
    float _4409 = isnan(0.0) ? _2391 : (isnan(_2391) ? 0.0 : max(_2391, 0.0));
    float _2394 = isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0));
    float _4420 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
    float _2395 = isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0));
    float _2396 = dot(vec3(_648, _649, _650), vec3(_2388, _2389, _2390));
    float _4431 = isnan(0.0) ? _2396 : (isnan(_2396) ? 0.0 : max(_2396, 0.0));
    float _2399 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
    float _2400 = dot(vec3(cbLight._m0[_2118].xyz), vec3(_2388, _2389, _2390));
    float _4442 = isnan(0.0) ? _2400 : (isnan(_2400) ? 0.0 : max(_2400, 0.0));
    float _2404 = _2380 * _2380;
    float _2408 = ((_2399 * _2399) * (_2404 + (-1.0))) + 1.0;
    float _2416 = exp2(log2(1.0 - (isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0)))) * 5.0);
    float _2417 = 0.959999978542327880859375 - _796;
    float _2419 = 0.959999978542327880859375 - _797;
    float _2420 = 0.959999978542327880859375 - _798;
    float _2427 = 1.0 - _2380;
    float _2438 = (0.5 / (((_2395 * ((_2394 * _2427) + _2380)) + 9.9999999392252902907785028219223e-09) + (((_2395 * _2427) + _2380) * _2394))) * _2394;
    float _4453 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2440 = (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0))) * (_2404 / ((_2408 * _2408) * 3.141590118408203125));
    uint _2454 = _2118 + 9u;
    float _2465 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2159].w)) * _651) * 0.949999988079071044921875);
    float _2466 = _2465 * _2465;
    float _2467 = cbLight._m0[_2159].x + _728;
    float _2468 = cbLight._m0[_2159].y + _729;
    float _2469 = cbLight._m0[_2159].z + _730;
    float _2473 = inversesqrt(dot(vec3(_2467, _2468, _2469), vec3(_2467, _2468, _2469)));
    float _2474 = _2473 * _2467;
    float _2475 = _2473 * _2468;
    float _2476 = _2473 * _2469;
    float _2477 = dot(vec3(_648, _649, _650), vec3(cbLight._m0[_2159].xyz));
    float _4464 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0));
    float _2480 = isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0));
    float _2481 = dot(vec3(_648, _649, _650), vec3(_2474, _2475, _2476));
    float _4475 = isnan(0.0) ? _2481 : (isnan(_2481) ? 0.0 : max(_2481, 0.0));
    float _2484 = isnan(1.0) ? _4475 : (isnan(_4475) ? 1.0 : min(_4475, 1.0));
    float _2485 = dot(vec3(cbLight._m0[_2159].xyz), vec3(_2474, _2475, _2476));
    float _4486 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
    float _2489 = _2466 * _2466;
    float _2493 = ((_2484 * _2484) * (_2489 + (-1.0))) + 1.0;
    float _2500 = exp2(log2(1.0 - (isnan(1.0) ? _4486 : (isnan(_4486) ? 1.0 : min(_4486, 1.0)))) * 5.0);
    float _2507 = 1.0 - _2466;
    float _2517 = (0.5 / (((_2395 * ((_2480 * _2507) + _2466)) + 9.9999999392252902907785028219223e-09) + (((_2395 * _2507) + _2466) * _2480))) * _2480;
    float _4497 = isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0));
    float _2519 = (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0))) * (_2489 / ((_2493 * _2493) * 3.141590118408203125));
    float _2529 = (((((_2500 * _2417) + _799) * cbLight._m0[_2454].x) * _2519) * _2141) + ((((cbLight._m0[_2366].x * _2107) * ((_2416 * _2417) + _799)) * _2440) * _2155);
    float _2530 = (((((_2500 * _2419) + _801) * cbLight._m0[_2454].y) * _2519) * _2141) + ((((cbLight._m0[_2366].y * _2109) * ((_2416 * _2419) + _801)) * _2440) * _2155);
    float _2531 = (((((_2500 * _2420) + _802) * cbLight._m0[_2454].z) * _2519) * _2141) + ((((cbLight._m0[_2366].z * _2111) * ((_2416 * _2420) + _802)) * _2440) * _2155);
    float _2587;
    float _2589;
    float _2591;
    if (_2195)
    {
        _2587 = _2529;
        _2589 = _2530;
        _2591 = _2531;
    }
    else
    {
        uint _2593 = _2118 + 2u;
        uint _2597 = _2118 + 10u;
        float _2611 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2593].w)) * _651) * 0.949999988079071044921875);
        float _2612 = _2611 * _2611;
        float _2613 = cbLight._m0[_2593].x + _728;
        float _2614 = cbLight._m0[_2593].y + _729;
        float _2615 = cbLight._m0[_2593].z + _730;
        float _2619 = inversesqrt(dot(vec3(_2613, _2614, _2615), vec3(_2613, _2614, _2615)));
        float _2620 = _2619 * _2613;
        float _2621 = _2619 * _2614;
        float _2622 = _2619 * _2615;
        float _2623 = dot(vec3(_648, _649, _650), vec3(cbLight._m0[_2593].xyz));
        float _4508 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
        float _2626 = isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0));
        float _2627 = dot(vec3(_648, _649, _650), vec3(_2620, _2621, _2622));
        float _4519 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
        float _2630 = isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0));
        float _2631 = dot(vec3(cbLight._m0[_2593].xyz), vec3(_2620, _2621, _2622));
        float _4530 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
        float _2635 = _2612 * _2612;
        float _2639 = ((_2630 * _2630) * (_2635 + (-1.0))) + 1.0;
        float _2646 = exp2(log2(1.0 - (isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0)))) * 5.0);
        float _2653 = 1.0 - _2612;
        float _2663 = (0.5 / (((_2395 * ((_2626 * _2653) + _2612)) + 9.9999999392252902907785028219223e-09) + (((_2395 * _2653) + _2612) * _2626))) * _2626;
        float _4541 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0));
        float _2665 = (isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0))) * (_2635 / ((_2639 * _2639) * 3.141590118408203125));
        float _2666 = isnan(1.0) ? _2133 : (isnan(_2133) ? 1.0 : min(_2133, 1.0));
        _2587 = (((((_2646 * _2417) + _799) * cbLight._m0[_2597].x) * _2665) * _2666) + _2529;
        _2589 = (((((_2646 * _2419) + _801) * cbLight._m0[_2597].y) * _2665) * _2666) + _2530;
        _2591 = (((((_2646 * _2420) + _802) * cbLight._m0[_2597].z) * _2665) * _2666) + _2531;
    }
    float _2697;
    float _2699;
    float _2701;
    if (_2304)
    {
        _2697 = _2587;
        _2699 = _2589;
        _2701 = _2591;
    }
    else
    {
        uint _2708 = _2118 + 3u;
        uint _2712 = _2118 + 11u;
        float _2726 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2708].w)) * _651) * 0.949999988079071044921875);
        float _2727 = _2726 * _2726;
        float _2728 = cbLight._m0[_2708].x + _728;
        float _2729 = cbLight._m0[_2708].y + _729;
        float _2730 = cbLight._m0[_2708].z + _730;
        float _2734 = inversesqrt(dot(vec3(_2728, _2729, _2730), vec3(_2728, _2729, _2730)));
        float _2735 = _2734 * _2728;
        float _2736 = _2734 * _2729;
        float _2737 = _2734 * _2730;
        float _2738 = dot(vec3(_648, _649, _650), vec3(cbLight._m0[_2708].xyz));
        float _4557 = isnan(0.0) ? _2738 : (isnan(_2738) ? 0.0 : max(_2738, 0.0));
        float _2741 = isnan(1.0) ? _4557 : (isnan(_4557) ? 1.0 : min(_4557, 1.0));
        float _2742 = dot(vec3(_648, _649, _650), vec3(_2735, _2736, _2737));
        float _4568 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
        float _2745 = isnan(1.0) ? _4568 : (isnan(_4568) ? 1.0 : min(_4568, 1.0));
        float _2746 = dot(vec3(cbLight._m0[_2708].xyz), vec3(_2735, _2736, _2737));
        float _4579 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
        float _2750 = _2727 * _2727;
        float _2754 = ((_2745 * _2745) * (_2750 + (-1.0))) + 1.0;
        float _2761 = exp2(log2(1.0 - (isnan(1.0) ? _4579 : (isnan(_4579) ? 1.0 : min(_4579, 1.0)))) * 5.0);
        float _2768 = 1.0 - _2727;
        float _2778 = (0.5 / (((_2395 * ((_2741 * _2768) + _2727)) + 9.9999999392252902907785028219223e-09) + (((_2395 * _2768) + _2727) * _2741))) * _2741;
        float _4590 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
        float _2780 = (isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0))) * (_2750 / ((_2754 * _2754) * 3.141590118408203125));
        float _2781 = isnan(1.0) ? _2134 : (isnan(_2134) ? 1.0 : min(_2134, 1.0));
        _2697 = (((((_2761 * _2417) + _799) * cbLight._m0[_2712].x) * _2780) * _2781) + _2587;
        _2699 = (((((_2761 * _2419) + _801) * cbLight._m0[_2712].y) * _2780) * _2781) + _2589;
        _2701 = (((((_2761 * _2420) + _802) * cbLight._m0[_2712].z) * _2780) * _2781) + _2591;
    }
    float _2847;
    float _2849;
    float _2851;
    float _2853;
    float _2855;
    float _2857;
    if (_2116.y == 0u)
    {
        uvec4 _2802 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2803 = _2802.x;
        uint _2814 = uint((float(_2802.y) * floor(float(uint(cbSceneParam._m0[85u].y * _737) / _2803))) + floor(float(uint(cbSceneParam._m0[85u].x * _736) / _2803)));
        float _2824 = (log2(_1894 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2825 = isnan(0.0) ? _2824 : (isnan(_2824) ? 0.0 : max(_2824, 0.0));
        uint _2828 = uint(isnan(14.0) ? _2825 : (isnan(_2825) ? 14.0 : min(_2825, 14.0)));
        uvec4 _2833 = texelFetch(g_lightClusterGridBuffer, int(((_2828 << 2u) + (_2814 << 6u)) >> 2u));
        uint _2834 = _2833.x;
        uint _2835 = _2802.z;
        float _2914;
        float _2916;
        float _2918;
        float _2920;
        float _2922;
        float _2924;
        if (((((1u << ((_2835 >> 4u) & 15u)) + 4294967295u) & _2834) == 0u) || ((_2835 & 240u) == 0u))
        {
            _2914 = 0.0;
            _2916 = 0.0;
            _2918 = 0.0;
            _2920 = 0.0;
            _2922 = 0.0;
            _2924 = 0.0;
        }
        else
        {
            float _2915;
            float _2917;
            float _2919;
            float _2921;
            float _2923;
            float _2925;
            float _3059 = 0.0;
            float _3060 = 0.0;
            float _3061 = 0.0;
            float _3062 = 0.0;
            float _3063 = 0.0;
            float _3064 = 0.0;
            uint _3065 = 0u;
            uint _3074;
            bool _3075;
            for (;;)
            {
                _3074 = texelFetch(g_lightClassification, int((((_2828 << 5u) + (_2814 << 9u)) + (_3065 << 2u)) >> 2u)).x;
                _3075 = _3074 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3075)
                {
                    frontier_phi_66_pred = _3064;
                    frontier_phi_66_pred_1 = _3063;
                    frontier_phi_66_pred_2 = _3062;
                    frontier_phi_66_pred_3 = _3061;
                    frontier_phi_66_pred_4 = _3060;
                    frontier_phi_66_pred_5 = _3059;
                }
                else
                {
                    float _3183;
                    float _3184;
                    float _3185;
                    float _3186;
                    float _3187;
                    float _3188;
                    uint _3189;
                    _3183 = _3059;
                    _3184 = _3060;
                    _3185 = _3061;
                    _3186 = _3062;
                    _3187 = _3063;
                    _3188 = _3064;
                    _3189 = _3074;
                    float _3115;
                    float _3116;
                    float _3117;
                    float _3118;
                    float _3119;
                    float _3120;
                    for (;;)
                    {
                        uint _3193 = uint(findLSB(_3189)) + (_3065 << 5u);
                        uint _3190 = (_3189 + 4294967295u) & _3189;
                        uint _3195 = _3193 * 48u;
                        vec4 _3209 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3195)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3195 + 3u)).x));
                        uint _3215 = (_3193 * 48u) + 4u;
                        vec4 _3228 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3215)).x, texelFetch(g_PointLightRenderingBuffer, int(_3215 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3215 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3215 + 3u)).x));
                        uint _3234 = (_3193 * 48u) + 8u;
                        vec3 _3245 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3234)).x, texelFetch(g_PointLightRenderingBuffer, int(_3234 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3234 + 2u)).x));
                        float _3249 = _3209.x - _1892;
                        float _3250 = _3209.y - _1893;
                        float _3251 = _3209.z - _1894;
                        float _3252 = dot(vec3(_3249, _3250, _3251), vec3(_3249, _3250, _3251));
                        float _3255 = inversesqrt(_3252);
                        float _3256 = _3255 * _3249;
                        float _3257 = _3255 * _3250;
                        float _3258 = _3255 * _3251;
                        float _3259 = dot(vec3(_755, _758, _761), vec3(_3256, _3257, _3258));
                        float _3264 = 1.0 - (_3252 * _3209.w);
                        float _4616 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
                        float _3265 = isnan(1.0) ? _4616 : (isnan(_4616) ? 1.0 : min(_4616, 1.0));
                        float _3266 = sqrt(_3252) * _3228.w;
                        float _3269 = 1.39999997615814208984375 / (_3266 + 1.39999997615814208984375);
                        float _3270 = _3269 * _3269;
                        float _3273 = ((1.0 - _3270) * _3259) + _3270;
                        float _3276 = _3266 * _3266;
                        float _3280 = ((isnan(0.0) ? _3273 : (isnan(_3273) ? 0.0 : max(_3273, 0.0))) * _3265) / ((_3276 * 0.699999988079071044921875) + 1.0);
                        float _3284 = (-0.0) - _1892;
                        float _3285 = (-0.0) - _1893;
                        float _3286 = (-0.0) - _1894;
                        float _3290 = inversesqrt(dot(vec3(_3284, _3285, _3286), vec3(_3284, _3285, _3286)));
                        float _3291 = _3290 * _3284;
                        float _3292 = _3290 * _3285;
                        float _3293 = _3290 * _3286;
                        float _3300 = exp2(log2(1.0 / ((_3276 * 3.5) + 5.0)) * 0.25);
                        float _3301 = 1.0 - _830;
                        float _3308 = sqrt(1.0 - ((1.0 - (_3301 * _3301)) * (1.0 - (_3300 * _3300))));
                        float _3309 = _3308 * _3308;
                        float _3310 = _3309 * _3309;
                        float _3311 = _3291 + _3256;
                        float _3312 = _3292 + _3257;
                        float _3313 = _3293 + _3258;
                        float _3317 = inversesqrt(dot(vec3(_3311, _3312, _3313), vec3(_3311, _3312, _3313)));
                        float _3321 = dot(vec3(_755, _758, _761), vec3(_3291, _3292, _3293));
                        float _4632 = isnan(0.0) ? _3321 : (isnan(_3321) ? 0.0 : max(_3321, 0.0));
                        float _3324 = isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0));
                        float _3325 = dot(vec3(_755, _758, _761), vec3(_3317 * _3311, _3317 * _3312, _3317 * _3313));
                        float _4643 = isnan(0.0) ? _3325 : (isnan(_3325) ? 0.0 : max(_3325, 0.0));
                        float _3328 = isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0));
                        float _3332 = ((_3328 * _3328) * (_3310 + (-1.0))) + 1.0;
                        float _3333 = _3269 * _3309;
                        float _3334 = _3333 * _3333;
                        float _3337 = ((1.0 - _3334) * _3259) + _3334;
                        float _4654 = isnan(0.0) ? _3337 : (isnan(_3337) ? 0.0 : max(_3337, 0.0));
                        float _3338 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
                        float _3339 = 1.0 - _3309;
                        float _3349 = (0.5 / (((_3338 * ((_3324 * _3339) + _3309)) + 9.9999999392252902907785028219223e-09) + (((_3338 * _3339) + _3309) * _3324))) * _3338;
                        float _4665 = isnan(0.0) ? _3349 : (isnan(_3349) ? 0.0 : max(_3349, 0.0));
                        float _3360 = (((_3310 * 3.1415927410125732421875) * (isnan(1.0) ? _4665 : (isnan(_4665) ? 1.0 : min(_4665, 1.0)))) / ((_3332 * _3332) * ((_3276 * 2.1991131305694580078125) + 3.141590118408203125))) * _3265;
                        _3118 = (_3280 * _3228.x) + _3186;
                        _3119 = (_3280 * _3228.y) + _3187;
                        _3120 = (_3280 * _3228.z) + _3188;
                        _3115 = (_3360 * _3245.x) + _3183;
                        _3116 = (_3360 * _3245.y) + _3184;
                        _3117 = (_3360 * _3245.z) + _3185;
                        if (_3190 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3183 = _3115;
                            _3184 = _3116;
                            _3185 = _3117;
                            _3186 = _3118;
                            _3187 = _3119;
                            _3188 = _3120;
                            _3189 = _3190;
                        }
                    }
                    frontier_phi_66_pred = _3120;
                    frontier_phi_66_pred_1 = _3119;
                    frontier_phi_66_pred_2 = _3118;
                    frontier_phi_66_pred_3 = _3117;
                    frontier_phi_66_pred_4 = _3116;
                    frontier_phi_66_pred_5 = _3115;
                }
                _2925 = frontier_phi_66_pred;
                _2923 = frontier_phi_66_pred_1;
                _2921 = frontier_phi_66_pred_2;
                _2919 = frontier_phi_66_pred_3;
                _2917 = frontier_phi_66_pred_4;
                _2915 = frontier_phi_66_pred_5;
                uint _3066 = _3065 + 1u;
                if (_3066 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3059 = _2915;
                    _3060 = _2917;
                    _3061 = _2919;
                    _3062 = _2921;
                    _3063 = _2923;
                    _3064 = _2925;
                    _3065 = _3066;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2914 = _2915;
            _2916 = _2917;
            _2918 = _2919;
            _2920 = _2921;
            _2922 = _2923;
            _2924 = _2925;
        }
        uvec4 _2928 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2929 = _2928.z;
        uint _2931 = (_2929 >> 8u) & 15u;
        float _3027;
        float _3029;
        float _3031;
        float _3033;
        float _3035;
        float _3037;
        if (((4294967295u << _2931) & _2834) == 0u)
        {
            _3027 = _2914;
            _3029 = _2916;
            _3031 = _2918;
            _3033 = _2920;
            _3035 = _2922;
            _3037 = _2924;
        }
        else
        {
            float _3052 = inversesqrt(dot(vec3(_1892, _1893, _1894), vec3(_1892, _1893, _1894)));
            float _3053 = _3052 * _1892;
            float _3054 = _3052 * _1893;
            float _3055 = _3052 * _1894;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2931 < ((_2929 >> 12u) & 15u))
            {
                float _3028;
                float _3030;
                float _3032;
                float _3034;
                float _3036;
                float _3038;
                float _3166 = _2914;
                float _3167 = _2916;
                float _3168 = _2918;
                float _3169 = _2920;
                float _3170 = _2922;
                float _3171 = _2924;
                uint _3172 = _2931;
                uint _3181;
                bool _3182;
                for (;;)
                {
                    _3181 = texelFetch(g_lightClassification, int((((_2828 << 5u) + (_2814 << 9u)) + (_3172 << 2u)) >> 2u)).x;
                    _3182 = _3181 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3182)
                    {
                        frontier_phi_72_pred = _3171;
                        frontier_phi_72_pred_1 = _3170;
                        frontier_phi_72_pred_2 = _3169;
                        frontier_phi_72_pred_3 = _3168;
                        frontier_phi_72_pred_4 = _3167;
                        frontier_phi_72_pred_5 = _3166;
                    }
                    else
                    {
                        float _3365;
                        float _3366;
                        float _3367;
                        float _3368;
                        float _3369;
                        float _3370;
                        float _3659;
                        float _3660;
                        float _3661;
                        float _3662;
                        float _3663;
                        float _3664;
                        float _3378 = _3166;
                        float _3379 = _3167;
                        float _3380 = _3168;
                        float _3381 = _3169;
                        float _3382 = _3170;
                        float _3383 = _3171;
                        uint _3384 = _3181;
                        uint _3385;
                        vec4 _3410;
                        float _3411;
                        vec4 _3426;
                        vec3 _3438;
                        vec4 _3453;
                        vec4 _3468;
                        float _3515;
                        bool _3516;
                        for (;;)
                        {
                            uint _3395 = ((_3172 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3384));
                            _3385 = (_3384 + 4294967295u) & _3384;
                            uint _3397 = _3395 * 40u;
                            _3410 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3397)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 3u)).x));
                            _3411 = _3410.w;
                            uint _3413 = (_3395 * 40u) + 4u;
                            _3426 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3413)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 3u)).x));
                            uint _3428 = (_3395 * 40u) + 8u;
                            _3438 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3428)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 2u)).x));
                            uint _3440 = (_3395 * 40u) + 16u;
                            _3453 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3440)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 3u)).x));
                            uint _3455 = (_3395 * 40u) + 20u;
                            _3468 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3455)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 3u)).x));
                            uint _3471 = (_3395 * 40u) + 24u;
                            vec4 _3484 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3471)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 3u)).x));
                            uint _3490 = (_3395 * 40u) + 28u;
                            vec4 _3503 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3490)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 3u)).x));
                            _3515 = fma(_1894, _3503.z, fma(_1893, _3503.y, _3503.x * _1892)) + _3503.w;
                            _3516 = !((fma(_1894, _3484.z, fma(_1893, _3484.y, _3484.x * _1892)) + _3484.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3516)
                            {
                                float _3543 = _3410.x - _1892;
                                float _3544 = _3410.y - _1893;
                                float _3545 = _3410.z - _1894;
                                float _3546 = dot(vec3(_3543, _3544, _3545), vec3(_3543, _3544, _3545));
                                float _3549 = inversesqrt(_3546);
                                float _3550 = _3549 * _3543;
                                float _3551 = _3549 * _3544;
                                float _3552 = _3549 * _3545;
                                float _3556 = 1.0 - (_3546 / (_3411 * _3411));
                                float _4676 = isnan(0.0) ? _3556 : (isnan(_3556) ? 0.0 : max(_3556, 0.0));
                                float _3557 = isnan(1.0) ? _4676 : (isnan(_4676) ? 1.0 : min(_4676, 1.0));
                                float _3561 = sqrt(_3546) * _3426.w;
                                float _3563 = 1.39999997615814208984375 / (_3561 + 1.39999997615814208984375);
                                float _3564 = _3563 * _3563;
                                float _3567 = ((1.0 - _3564) * dot(vec3(_3550, _3551, _3552), vec3(_755, _758, _761))) + _3564;
                                float _3570 = _3561 * _3561;
                                float _3574 = (fma(_1894, _3453.z, fma(_1893, _3453.y, _3453.x * _1892)) + _3453.w) / _3515;
                                float _3575 = (fma(_1894, _3468.z, fma(_1893, _3468.y, _3468.x * _1892)) + _3468.w) / _3515;
                                float _3579 = 1.0 - dot(vec2(_3574, _3575), vec2(_3574, _3575));
                                float _4692 = isnan(0.0) ? _3579 : (isnan(_3579) ? 0.0 : max(_3579, 0.0));
                                float _3580 = isnan(1.0) ? _4692 : (isnan(_4692) ? 1.0 : min(_4692, 1.0));
                                float _3581 = _3580 * (((isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0))) * _3557) / ((_3570 * 0.699999988079071044921875) + 1.0));
                                float _3593 = exp2(log2(1.0 / ((_3570 * 3.5) + 5.0)) * 0.25);
                                float _3594 = 1.0 - _830;
                                float _3601 = sqrt(1.0 - ((1.0 - (_3594 * _3594)) * (1.0 - (_3593 * _3593))));
                                float _3602 = _3601 * _3601;
                                float _3603 = _3602 * _3602;
                                float _3604 = _3550 - _3053;
                                float _3605 = _3551 - _3054;
                                float _3606 = _3552 - _3055;
                                float _3610 = inversesqrt(dot(vec3(_3604, _3605, _3606), vec3(_3604, _3605, _3606)));
                                float _3614 = dot(vec3(_755, _758, _761), vec3((-0.0) - _3053, (-0.0) - _3054, (-0.0) - _3055));
                                float _4703 = isnan(0.0) ? _3614 : (isnan(_3614) ? 0.0 : max(_3614, 0.0));
                                float _3617 = isnan(1.0) ? _4703 : (isnan(_4703) ? 1.0 : min(_4703, 1.0));
                                float _3618 = dot(vec3(_755, _758, _761), vec3(_3610 * _3604, _3610 * _3605, _3610 * _3606));
                                float _4714 = isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0));
                                float _3621 = isnan(1.0) ? _4714 : (isnan(_4714) ? 1.0 : min(_4714, 1.0));
                                float _3625 = ((_3621 * _3621) * (_3603 + (-1.0))) + 1.0;
                                float _3626 = _3563 * _3602;
                                float _3627 = _3626 * _3626;
                                float _3633 = ((1.0 - _3627) * dot(vec3(_755, _758, _761), vec3(_3550, _3551, _3552))) + _3627;
                                float _4725 = isnan(0.0) ? _3633 : (isnan(_3633) ? 0.0 : max(_3633, 0.0));
                                float _3634 = isnan(1.0) ? _4725 : (isnan(_4725) ? 1.0 : min(_4725, 1.0));
                                float _3635 = 1.0 - _3602;
                                float _3645 = (0.5 / (((_3634 * ((_3617 * _3635) + _3602)) + 9.9999999392252902907785028219223e-09) + (((_3634 * _3635) + _3602) * _3617))) * _3634;
                                float _4736 = isnan(0.0) ? _3645 : (isnan(_3645) ? 0.0 : max(_3645, 0.0));
                                float _3655 = (_3580 * _3557) * (((_3603 * 3.1415927410125732421875) * (isnan(1.0) ? _4736 : (isnan(_4736) ? 1.0 : min(_4736, 1.0)))) / ((_3625 * _3625) * ((_3570 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3581 * _3426.y;
                                frontier_phi_78_pred_1 = _3581 * _3426.x;
                                frontier_phi_78_pred_2 = _3655 * _3438.z;
                                frontier_phi_78_pred_3 = _3655 * _3438.y;
                                frontier_phi_78_pred_4 = _3655 * _3438.x;
                                frontier_phi_78_pred_5 = _3581 * _3426.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3663 = frontier_phi_78_pred;
                            _3662 = frontier_phi_78_pred_1;
                            _3661 = frontier_phi_78_pred_2;
                            _3660 = frontier_phi_78_pred_3;
                            _3659 = frontier_phi_78_pred_4;
                            _3664 = frontier_phi_78_pred_5;
                            _3368 = _3662 + _3381;
                            _3369 = _3663 + _3382;
                            _3370 = _3664 + _3383;
                            _3365 = _3659 + _3378;
                            _3366 = _3660 + _3379;
                            _3367 = _3661 + _3380;
                            if (_3385 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3378 = _3365;
                                _3379 = _3366;
                                _3380 = _3367;
                                _3381 = _3368;
                                _3382 = _3369;
                                _3383 = _3370;
                                _3384 = _3385;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3370;
                        frontier_phi_72_pred_1 = _3369;
                        frontier_phi_72_pred_2 = _3368;
                        frontier_phi_72_pred_3 = _3367;
                        frontier_phi_72_pred_4 = _3366;
                        frontier_phi_72_pred_5 = _3365;
                    }
                    _3038 = frontier_phi_72_pred;
                    _3036 = frontier_phi_72_pred_1;
                    _3034 = frontier_phi_72_pred_2;
                    _3032 = frontier_phi_72_pred_3;
                    _3030 = frontier_phi_72_pred_4;
                    _3028 = frontier_phi_72_pred_5;
                    uint _3173 = _3172 + 1u;
                    if (_3173 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3166 = _3028;
                        _3167 = _3030;
                        _3168 = _3032;
                        _3169 = _3034;
                        _3170 = _3036;
                        _3171 = _3038;
                        _3172 = _3173;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3038;
                frontier_phi_60_61_ladder_1 = _3036;
                frontier_phi_60_61_ladder_2 = _3032;
                frontier_phi_60_61_ladder_3 = _3030;
                frontier_phi_60_61_ladder_4 = _3028;
                frontier_phi_60_61_ladder_5 = _3034;
            }
            else
            {
                frontier_phi_60_61_ladder = _2924;
                frontier_phi_60_61_ladder_1 = _2922;
                frontier_phi_60_61_ladder_2 = _2918;
                frontier_phi_60_61_ladder_3 = _2916;
                frontier_phi_60_61_ladder_4 = _2914;
                frontier_phi_60_61_ladder_5 = _2920;
            }
            _3027 = frontier_phi_60_61_ladder_4;
            _3029 = frontier_phi_60_61_ladder_3;
            _3031 = frontier_phi_60_61_ladder_2;
            _3033 = frontier_phi_60_61_ladder_5;
            _3035 = frontier_phi_60_61_ladder_1;
            _3037 = frontier_phi_60_61_ladder;
        }
        float _3042 = isnan(1.0) ? _814 : (isnan(_814) ? 1.0 : min(_814, 1.0));
        _2847 = (_3042 * _3033) + _2359;
        _2849 = (_3042 * _3035) + _2361;
        _2851 = (_3042 * _3037) + _2363;
        _2853 = ((_3027 * _799) * _3042) + _2697;
        _2855 = ((_3029 * _801) * _3042) + _2699;
        _2857 = ((_3031 * _802) * _3042) + _2701;
    }
    else
    {
        _2847 = _2359;
        _2849 = _2361;
        _2851 = _2363;
        _2853 = _2697;
        _2855 = _2699;
        _2857 = _2701;
    }
    float _4752 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    float _4763 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
    float _4774 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    uint _2877 = _774 + 6u;
    float _2885 = _736 / cbSceneParam._m0[86u].x;
    float _2886 = _737 / cbSceneParam._m0[86u].y;
    vec4 _2900 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2885, _2886, (log2((isnan(cbSceneParam._m0[77u].w) ? _671 : (isnan(_671) ? cbSceneParam._m0[77u].w : min(_671, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2902 = _2900.x;
    float _2903 = _2900.y;
    float _2904 = _2900.z;
    float _2905 = _2900.w;
    float _2977;
    float _2979;
    float _2981;
    float _2983;
    if (_671 > cbSceneParam._m0[78u].w)
    {
        float _2939 = isnan(_671) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _671 : min(cbSceneParam._m0[80u].w, _671));
        float _2940 = _2939 / _671;
        float _2951 = _2940 * _721;
        float _2952 = _722 * _2940;
        float _2953 = (-0.0) - _2952;
        float _2955 = _2940 * _723;
        float _2957 = (cbSceneParam._m0[77u].w * _2953) / _2939;
        float _2958 = _2957 + cbSceneParam._m0[79u].w;
        float _2959 = cbSceneParam._m0[79u].w - _2952;
        float _2965 = sqrt(((_2951 * _2951) + (_2952 * _2952)) + (_2955 * _2955));
        float _2968 = (1.0 - (cbSceneParam._m0[77u].w / _2939)) * _2965;
        float _2973 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2975 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3128;
        if (abs((_2953 - _2957) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3128 = ((((_2958 > 0.0) ? exp2(_2973 * _2958) : (2.0 - exp2(_2975 * _2958))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2968;
        }
        else
        {
            float _3088 = 1.0 / cbSceneParam._m0[80u].x;
            float _3089 = isnan(_2959) ? _2958 : (isnan(_2958) ? _2959 : max(_2958, _2959));
            float _3090 = isnan(_2959) ? _2958 : (isnan(_2958) ? _2959 : min(_2958, _2959));
            float _3099 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : min(_3089, 0.0));
            float _3100 = isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : min(_3090, 0.0));
            _3128 = ((abs(_2965 / _2953) * cbSceneParam._m0[80u].y) * ((((_3099 - _3100) * 2.0) - ((exp2(_2973 * (isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0)))) - exp2(_2973 * (isnan(0.0) ? _3090 : (isnan(_3090) ? 0.0 : max(_3090, 0.0))))) * _3088)) - ((exp2(_2975 * _3099) - exp2(_2975 * _3100)) * _3088))) + (_2968 * cbSceneParam._m0[80u].z);
        }
        vec4 _3130 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2885, _2886, 1.0), 0.0);
        float _3139 = exp2((_3128 * (-1.44269502162933349609375)) * (1.0 - _3130.w));
        float _3140 = log2(_3139);
        float _3156 = log2(_2905);
        _2977 = (exp2(_3156 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3140 * cbSceneParam._m0[78u].x)) * _3130.x) / cbSceneParam._m0[78u].x)) + _2902;
        _2979 = (exp2(_3156 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3140 * cbSceneParam._m0[78u].y)) * _3130.y) / cbSceneParam._m0[78u].y)) + _2903;
        _2981 = (exp2(_3156 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3140 * cbSceneParam._m0[78u].z)) * _3130.z) / cbSceneParam._m0[78u].z)) + _2904;
        _2983 = _3139 * _2905;
    }
    else
    {
        _2977 = _2902;
        _2979 = _2903;
        _2981 = _2904;
        _2983 = _2905;
    }
    float _2995 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2996 = _2995 == 3.0;
    float _2997 = log2(_2983);
    float _3004 = exp2(_2997 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0))) * (_2847 + ((isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0))) * _814))) + ((_2853 + ((isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0))) * _1624)) * cbPerFrame._m0[3u].x));
    float _3005 = exp2(_2997 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0))) * (_2849 + ((isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0))) * _814))) + ((_2855 + ((isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0))) * _1624)) * cbPerFrame._m0[3u].x));
    float _3006 = exp2(_2997 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0))) * (_2851 + ((isnan(0.0) ? _1551 : (isnan(_1551) ? 0.0 : max(_1551, 0.0))) * _814))) + ((_2857 + ((isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0))) * _1624)) * cbPerFrame._m0[3u].x));
    float _3015 = (_2995 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3015 * (_2996 ? _3004 : (_3004 + (cbSceneParam._m0[72u].w * _2977)));
    SV_Target.y = _3015 * (_2996 ? _3005 : (_3005 + (cbSceneParam._m0[72u].w * _2979)));
    SV_Target.z = _3015 * (_2996 ? _3006 : (_3006 + (cbSceneParam._m0[72u].w * _2981)));
    SV_Target.w = cbInstanceData._m0[_2877].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2877].w;
}


