#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1247;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _203 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _204 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _205 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _211 = inversesqrt(dot(vec3(_203, _204, _205), vec3(_203, _204, _205)));
    float _218 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _225 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _248 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _254 = _248.x * cbMtdParam._m0[10u].x;
    float _255 = _248.y * cbMtdParam._m0[10u].y;
    float _256 = _248.z * cbMtdParam._m0[10u].z;
    vec4 _274 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _324 = cbMtdParam._m0[18u].y * texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x;
    float _335 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].x * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].y * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _324)) + 1.0;
    float _3600 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _336 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
    float _343 = (_336 * ((_274.x * cbMtdParam._m0[11u].x) - _254)) + _254;
    float _344 = (_336 * ((_274.y * cbMtdParam._m0[11u].y) - _255)) + _255;
    float _345 = (_336 * ((_274.z * cbMtdParam._m0[11u].z) - _256)) + _256;
    vec4 _363 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _390 = ((cbMtdParam._m0[17u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _324)) + 1.0;
    float _3611 = isnan(0.0) ? _390 : (isnan(_390) ? 0.0 : max(_390, 0.0));
    float _391 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
    float _398 = (_391 * ((_363.x * cbMtdParam._m0[12u].x) - _343)) + _343;
    float _399 = (_391 * ((_363.y * cbMtdParam._m0[12u].y) - _344)) + _344;
    float _400 = (_391 * ((_363.z * cbMtdParam._m0[12u].z) - _345)) + _345;
    vec4 _417 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _442 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[18u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[18u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _324)) + 1.0;
    float _3622 = isnan(0.0) ? _442 : (isnan(_442) ? 0.0 : max(_442, 0.0));
    float _443 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
    vec4 _471 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _479 = ((((_443 * ((_417.x * cbMtdParam._m0[13u].x) - _398)) + _398) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _471.x;
    float _482 = ((((_443 * ((_417.y * cbMtdParam._m0[13u].y) - _399)) + _399) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _471.y;
    float _485 = ((((_443 * ((_417.z * cbMtdParam._m0[13u].z) - _400)) + _400) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _471.z;
    vec4 _498 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _500 = _498.x;
    float _518 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _500) * _336) + _500;
    float _535 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _518) * _391) + _518;
    float _552 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _535) * _443) + _535;
    vec4 _565 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _567 = _565.x;
    float _568 = _565.y;
    float _571 = cbMtdParam._m0[17u].y * _565.z;
    vec4 _583 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _592 = (((cbMtdParam._m0[17u].x * _583.z) - _571) * _336) + _571;
    vec4 _605 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _617 = (((cbMtdParam._m0[16u].w * _605.z) - _592) * _391) + _592;
    vec4 _630 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _639 = (((cbMtdParam._m0[16u].z * _630.z) - _617) * _443) + _617;
    vec4 _652 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _665 = ((_583.x - _567) * _336) + _567;
    float _666 = ((_583.y - _568) * _336) + _568;
    float _671 = ((_605.x - _665) * _391) + _665;
    float _672 = ((_605.y - _666) * _391) + _666;
    float _681 = ((((_630.x - _671) * _443) + _671) * 2.0) + (-1.0);
    float _682 = ((((_630.y - _672) * _443) + _672) * 2.0) + (-1.0);
    float _683 = dot(vec2(_681, _682), vec2(_681, _682));
    float _3633 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
    float _688 = sqrt(1.0 - (isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))));
    float _691 = (((_652.x * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _681;
    float _692 = (((_652.y * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _682;
    float _695 = fma(_688, _218 * NORMAL.x, fma(_692, _225 * TANGENT.x, (_211 * _203) * _691));
    float _698 = fma(_688, _218 * NORMAL.y, fma(_692, _225 * TANGENT.y, (_211 * _204) * _691));
    float _701 = fma(_688, _218 * NORMAL.z, fma(_692, _225 * TANGENT.z, (_211 * _205) * _691));
    float _705 = inversesqrt(dot(vec3(_695, _698, _701), vec3(_695, _698, _701)));
    float _706 = _705 * _695;
    float _707 = _705 * _698;
    float _708 = _705 * _701;
    float _3644 = isnan(0.0) ? _639 : (isnan(_639) ? 0.0 : max(_639, 0.0));
    float _709 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
    float _3655 = isnan(0.0) ? _479 : (isnan(_479) ? 0.0 : max(_479, 0.0));
    float _3666 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _3677 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _3688 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _713 = isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0));
    float _729 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _769 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _779 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _769);
    float _780 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _769);
    float _781 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _769);
    float _785 = inversesqrt(dot(vec3(_779, _780, _781), vec3(_779, _780, _781)));
    float _786 = _779 * _785;
    float _787 = _780 * _785;
    float _788 = _781 * _785;
    float _794 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _795 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _813 = fma(_708, cbSceneParam._m0[5u].z, fma(_707, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _706));
    float _816 = fma(_708, cbSceneParam._m0[6u].z, fma(_707, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _706));
    float _819 = fma(_708, cbSceneParam._m0[7u].z, fma(_707, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _706));
    uint _832 = uint(roundEven(NORMAL.w)) * 13u;
    uint _834 = (_832 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _840 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0)))) * cbInstanceData._m0[_834].x;
    float _841 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0)))) * cbInstanceData._m0[_834].y;
    float _842 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0)))) * cbInstanceData._m0[_834].z;
    float _3699 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
    float _843 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
    float _3710 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
    float _844 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
    float _3721 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
    float _845 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
    float _846 = 1.0 - _713;
    float _847 = _843 * _846;
    float _848 = _844 * _846;
    float _849 = _845 * _846;
    float _854 = (_843 + (-0.039999999105930328369140625)) * _713;
    float _855 = (_844 + (-0.039999999105930328369140625)) * _713;
    float _856 = (_845 + (-0.039999999105930328369140625)) * _713;
    float _857 = _854 + 0.039999999105930328369140625;
    float _859 = _855 + 0.039999999105930328369140625;
    float _860 = _856 + 0.039999999105930328369140625;
    vec4 _869 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _794, cbSceneParam._m0[86u].y * _795));
    float _872 = _869.x * TEXCOORD_5.w;
    float _873 = dot(vec3(_706, _707, _708), vec3(_786, _787, _788));
    float _876 = _873 * 2.0;
    float _880 = (_876 * _706) - _786;
    float _881 = (_876 * _707) - _787;
    float _882 = (_876 * _708) - _788;
    float _886 = abs(dot(vec3(_786, _787, _788), vec3(_706, _707, _708)));
    float _3732 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _888 = sqrt(_709);
    float _901 = exp2((_888 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_888 * 3.0));
    float _907 = (1.0 - _901) * ((_888 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _908 = _901 * _888;
    float _936 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _940 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _944 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1246;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    float _1256;
    float _1257;
    float _1258;
    float _1259;
    float _1260;
    float _1261;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _971 = fma(_944, cbModelParam._m0[26u].z, fma(_940, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _936));
        float _975 = fma(_944, cbModelParam._m0[27u].z, fma(_940, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _936));
        float _979 = fma(_944, cbModelParam._m0[28u].z, fma(_940, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _936));
        float _1004 = _936 + _706;
        float _1005 = _940 + _707;
        float _1006 = _944 + _708;
        float _1016 = fma(_1006, cbModelParam._m0[26u].z, fma(_1005, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1004)) - _971;
        float _1017 = fma(_1006, cbModelParam._m0[27u].z, fma(_1005, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1004)) - _975;
        float _1018 = fma(_1006, cbModelParam._m0[28u].z, fma(_1005, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1004)) - _979;
        float _1022 = inversesqrt(dot(vec3(_1016, _1017, _1018), vec3(_1016, _1017, _1018)));
        float _1035 = ((_1022 * _1016) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_971 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1036 = ((_1022 * _1017) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_975 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1037 = ((_1022 * _1018) / cbModelParam._m0[34u].z) + ((((((_979 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1040 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        vec4 _1047 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        vec4 _1054 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        vec4 _1061 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1035, _1036, _1037), 0.0);
        float _1074 = exp2((_1040.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = _1074 * (_1040.x + (-0.5));
        float _1076 = _1074 * (_1040.y + (-0.5));
        float _1077 = _1074 * (_1040.z + (-0.5));
        float _1084 = exp2((_1047.w + (-0.5)) * 20.0) * 2.0;
        float _1085 = _1084 * (_1047.x + (-0.5));
        float _1086 = _1084 * (_1047.y + (-0.5));
        float _1087 = _1084 * (_1047.z + (-0.5));
        float _1094 = exp2((_1054.w + (-0.5)) * 20.0) * 2.0;
        float _1095 = _1094 * (_1054.x + (-0.5));
        float _1096 = _1094 * (_1054.y + (-0.5));
        float _1097 = _1094 * (_1054.z + (-0.5));
        float _1104 = exp2((_1061.w + (-0.5)) * 20.0) * 2.0;
        float _1105 = _1104 * (_1061.x + (-0.5));
        float _1106 = _1104 * (_1061.y + (-0.5));
        float _1107 = _1104 * (_1061.z + (-0.5));
        float _1108 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1109 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1110 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1111 = _1075 * 0.5;
        float _1112 = _1085 * 0.5;
        float _1113 = _1095 * 0.5;
        float _1114 = dot(vec3(_1111, _1112, _1113), vec3(_1111, _1112, _1113));
        float _1119 = (_1114 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1114);
        float _1128 = (dot(vec3(_706, _707, _708), vec3(_1119 * _1111, _1119 * _1112, _1119 * _1113)) + 1.0) * 0.5;
        float _3758 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1138 = sqrt(((_1112 * _1112) + (_1111 * _1111)) + (_1113 * _1113)) / (_1108 + 9.9999997473787516355514526367188e-06);
        float _3769 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1140 = _1139 * 2.0;
        float _1144 = (1.0 - _1139) / (_1139 + 1.0);
        float _3780 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1154 = ((((1.0 - _1145) * (_1140 + 2.0)) * exp2(log2(isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * (_1140 + 1.0))) + _1145) * _1108;
        float _1155 = _1076 * 0.5;
        float _1156 = _1086 * 0.5;
        float _1157 = _1096 * 0.5;
        float _1158 = dot(vec3(_1155, _1156, _1157), vec3(_1155, _1156, _1157));
        float _1163 = (_1158 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1158);
        float _1171 = (dot(vec3(_706, _707, _708), vec3(_1163 * _1155, _1163 * _1156, _1163 * _1157)) + 1.0) * 0.5;
        float _3791 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1180 = sqrt(((_1156 * _1156) + (_1155 * _1155)) + (_1157 * _1157)) / (_1109 + 9.9999997473787516355514526367188e-06);
        float _3802 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1182 = _1181 * 2.0;
        float _1186 = (1.0 - _1181) / (_1181 + 1.0);
        float _3813 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _1196 = ((((1.0 - _1187) * (_1182 + 2.0)) * exp2(log2(isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) * (_1182 + 1.0))) + _1187) * _1109;
        float _1197 = _1077 * 0.5;
        float _1198 = _1087 * 0.5;
        float _1199 = _1097 * 0.5;
        float _1200 = dot(vec3(_1197, _1198, _1199), vec3(_1197, _1198, _1199));
        float _1205 = (_1200 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1200);
        float _1213 = (dot(vec3(_706, _707, _708), vec3(_1205 * _1197, _1205 * _1198, _1205 * _1199)) + 1.0) * 0.5;
        float _3824 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1222 = sqrt(((_1198 * _1198) + (_1197 * _1197)) + (_1199 * _1199)) / (_1110 + 9.9999997473787516355514526367188e-06);
        float _3835 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0));
        float _1224 = _1223 * 2.0;
        float _1228 = (1.0 - _1223) / (_1223 + 1.0);
        float _3846 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1229 = isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0));
        float _1238 = ((((1.0 - _1229) * (_1224 + 2.0)) * exp2(log2(isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))) * (_1224 + 1.0))) + _1229) * _1110;
        _1246 = _1077;
        _1248 = _1076;
        _1249 = _1075;
        _1250 = _1087;
        _1251 = _1086;
        _1252 = _1085;
        _1253 = _1097;
        _1254 = _1096;
        _1255 = _1095;
        _1256 = _1110;
        _1257 = _1109;
        _1258 = _1108;
        _1259 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0)));
        _1260 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0)));
        _1261 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0)));
    }
    else
    {
        _1246 = _1247;
        _1248 = _1247;
        _1249 = _1247;
        _1250 = _1247;
        _1251 = _1247;
        _1252 = _1247;
        _1253 = _1247;
        _1254 = _1247;
        _1255 = _1247;
        _1256 = _1247;
        _1257 = _1247;
        _1258 = _1247;
        _1259 = 0.0;
        _1260 = 0.0;
        _1261 = 0.0;
    }
    float _1556;
    float _1557;
    float _1558;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    float _1563;
    float _1564;
    float _1565;
    float _1566;
    float _1567;
    float _1568;
    float _1569;
    float _1570;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1287 = fma(_944, cbModelParam._m0[30u].z, fma(_940, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _936));
        float _1291 = fma(_944, cbModelParam._m0[31u].z, fma(_940, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _936));
        float _1295 = fma(_944, cbModelParam._m0[32u].z, fma(_940, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _936));
        float _1318 = _936 + _706;
        float _1319 = _940 + _707;
        float _1320 = _944 + _708;
        float _1330 = fma(_1320, cbModelParam._m0[30u].z, fma(_1319, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1318)) - _1287;
        float _1331 = fma(_1320, cbModelParam._m0[31u].z, fma(_1319, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1318)) - _1291;
        float _1332 = fma(_1320, cbModelParam._m0[32u].z, fma(_1319, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1318)) - _1295;
        float _1336 = inversesqrt(dot(vec3(_1330, _1331, _1332), vec3(_1330, _1331, _1332)));
        float _1349 = ((_1336 * _1330) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1287 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1350 = ((_1336 * _1331) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1291 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1351 = ((_1336 * _1332) / cbModelParam._m0[35u].z) + ((((((_1295 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1353 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1349, _1350, _1351), 0.0);
        vec4 _1360 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1349, _1350, _1351), 0.0);
        vec4 _1367 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1349, _1350, _1351), 0.0);
        vec4 _1374 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1349, _1350, _1351), 0.0);
        float _1386 = exp2((_1353.w + (-0.5)) * 20.0) * 2.0;
        float _1387 = _1386 * (_1353.x + (-0.5));
        float _1388 = _1386 * (_1353.y + (-0.5));
        float _1389 = _1386 * (_1353.z + (-0.5));
        float _1396 = exp2((_1360.w + (-0.5)) * 20.0) * 2.0;
        float _1397 = _1396 * (_1360.x + (-0.5));
        float _1398 = _1396 * (_1360.y + (-0.5));
        float _1399 = _1396 * (_1360.z + (-0.5));
        float _1406 = exp2((_1367.w + (-0.5)) * 20.0) * 2.0;
        float _1407 = _1406 * (_1367.x + (-0.5));
        float _1408 = _1406 * (_1367.y + (-0.5));
        float _1409 = _1406 * (_1367.z + (-0.5));
        float _1416 = exp2((_1374.w + (-0.5)) * 20.0) * 2.0;
        float _1417 = _1416 * (_1374.x + (-0.5));
        float _1418 = _1416 * (_1374.y + (-0.5));
        float _1419 = _1416 * (_1374.z + (-0.5));
        float _1420 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1421 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1422 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1423 = _1387 * 0.5;
        float _1424 = _1397 * 0.5;
        float _1425 = _1407 * 0.5;
        float _1426 = dot(vec3(_1423, _1424, _1425), vec3(_1423, _1424, _1425));
        float _1431 = (_1426 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1426);
        float _1439 = (dot(vec3(_706, _707, _708), vec3(_1431 * _1423, _1431 * _1424, _1431 * _1425)) + 1.0) * 0.5;
        float _3887 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1448 = sqrt(((_1424 * _1424) + (_1423 * _1423)) + (_1425 * _1425)) / (_1420 + 9.9999997473787516355514526367188e-06);
        float _3898 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1449 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
        float _1450 = _1449 * 2.0;
        float _1454 = (1.0 - _1449) / (_1449 + 1.0);
        float _3909 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1455 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1464 = ((((1.0 - _1455) * (_1450 + 2.0)) * exp2(log2(isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) * (_1450 + 1.0))) + _1455) * _1420;
        float _1465 = _1388 * 0.5;
        float _1466 = _1398 * 0.5;
        float _1467 = _1408 * 0.5;
        float _1468 = dot(vec3(_1465, _1466, _1467), vec3(_1465, _1466, _1467));
        float _1473 = (_1468 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1468);
        float _1481 = (dot(vec3(_706, _707, _708), vec3(_1473 * _1465, _1473 * _1466, _1473 * _1467)) + 1.0) * 0.5;
        float _3920 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1490 = sqrt(((_1466 * _1466) + (_1465 * _1465)) + (_1467 * _1467)) / (_1421 + 9.9999997473787516355514526367188e-06);
        float _3931 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1491 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1492 = _1491 * 2.0;
        float _1496 = (1.0 - _1491) / (_1491 + 1.0);
        float _3942 = isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0));
        float _1497 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1506 = ((((1.0 - _1497) * (_1492 + 2.0)) * exp2(log2(isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * (_1492 + 1.0))) + _1497) * _1421;
        float _1507 = _1389 * 0.5;
        float _1508 = _1399 * 0.5;
        float _1509 = _1409 * 0.5;
        float _1510 = dot(vec3(_1507, _1508, _1509), vec3(_1507, _1508, _1509));
        float _1515 = (_1510 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1510);
        float _1523 = (dot(vec3(_706, _707, _708), vec3(_1515 * _1507, _1515 * _1508, _1515 * _1509)) + 1.0) * 0.5;
        float _3953 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1532 = sqrt(((_1508 * _1508) + (_1507 * _1507)) + (_1509 * _1509)) / (_1422 + 9.9999997473787516355514526367188e-06);
        float _3964 = isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0));
        float _1533 = isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0));
        float _1534 = _1533 * 2.0;
        float _1538 = (1.0 - _1533) / (_1533 + 1.0);
        float _3975 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1539 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1548 = ((((1.0 - _1539) * (_1534 + 2.0)) * exp2(log2(isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0))) * (_1534 + 1.0))) + _1539) * _1422;
        _1556 = _1389;
        _1557 = _1388;
        _1558 = _1387;
        _1559 = _1399;
        _1560 = _1398;
        _1561 = _1397;
        _1562 = _1409;
        _1563 = _1408;
        _1564 = _1407;
        _1565 = _1422;
        _1566 = _1421;
        _1567 = _1420;
        _1568 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0)));
        _1569 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0)));
        _1570 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0)));
    }
    else
    {
        _1556 = _1247;
        _1557 = _1247;
        _1558 = _1247;
        _1559 = _1247;
        _1560 = _1247;
        _1561 = _1247;
        _1562 = _1247;
        _1563 = _1247;
        _1564 = _1247;
        _1565 = _1247;
        _1566 = _1247;
        _1567 = _1247;
        _1568 = 0.0;
        _1569 = 0.0;
        _1570 = 0.0;
    }
    float _1580 = (cbModelParam._m0[1u].x * (_1568 - _1259)) + _1259;
    float _1581 = (cbModelParam._m0[1u].x * (_1569 - _1260)) + _1260;
    float _1582 = (cbModelParam._m0[1u].x * (_1570 - _1261)) + _1261;
    float _1603 = fma(_1582, cbSceneParam._m0[89u].z, fma(_1581, cbSceneParam._m0[89u].y, _1580 * cbSceneParam._m0[89u].x));
    float _1606 = fma(_1582, cbSceneParam._m0[90u].z, fma(_1581, cbSceneParam._m0[90u].y, _1580 * cbSceneParam._m0[90u].x));
    float _1609 = fma(_1582, cbSceneParam._m0[91u].z, fma(_1581, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1580));
    float _1624 = _880 * 0.5;
    float _1625 = _881 * 0.5;
    float _1626 = _882 * 0.5;
    float _1627 = dot(vec4(_1624, _1625, _1626, 1.0), vec4(_1558, _1561, _1564, _1567));
    float _1630 = dot(vec4(_1624, _1625, _1626, 1.0), vec4(_1557, _1560, _1563, _1566));
    float _1633 = dot(vec4(_1624, _1625, _1626, 1.0), vec4(_1556, _1559, _1562, _1565));
    float _1667;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1640 = dot(vec4(_1624, _1625, _1626, 1.0), vec4(_1246, _1250, _1253, _1256));
        float _1644 = dot(vec4(_1624, _1625, _1626, 1.0), vec4(_1248, _1251, _1254, _1257));
        float _1648 = dot(vec4(_1624, _1625, _1626, 1.0), vec4(_1249, _1252, _1255, _1258));
        float _1655 = dot(vec4(cbModelParam._m0[39u]), vec4(_1624, _1625, _1626, 1.0));
        _1667 = dot(vec3(isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0)), isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0)), isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1655) ? 0.0 : (isnan(0.0) ? _1655 : max(0.0, _1655))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1667 = 1.0;
    }
    float _1678;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1669 = dot(vec4(cbModelParam._m0[40u]), vec4(_1624, _1625, _1626, 1.0));
        _1678 = dot(vec3(isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0)), isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0)), isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1669) ? 0.0 : (isnan(0.0) ? _1669 : max(0.0, _1669))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1678 = 1.0;
    }
    float _1682 = (_1678 * cbModelParam._m0[1u].x) + (_1667 * (1.0 - cbModelParam._m0[1u].x));
    float _1692 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _709);
    float _1693 = isnan(_1692) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1692 : min(cbModelParam._m0[25u].z, _1692));
    float _1773;
    float _1775;
    float _1777;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1740 = fma(_944, cbModelParam._m0[13u].z, fma(_940, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _936)) + cbModelParam._m0[13u].w;
        float _1744 = fma(_944, cbModelParam._m0[14u].z, fma(_940, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _936)) + cbModelParam._m0[14u].w;
        float _1748 = fma(_944, cbModelParam._m0[15u].z, fma(_940, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _936)) + cbModelParam._m0[15u].w;
        float _1751 = fma(_882, cbModelParam._m0[13u].z, fma(_881, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _880));
        float _1754 = fma(_882, cbModelParam._m0[14u].z, fma(_881, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _880));
        float _1757 = fma(_882, cbModelParam._m0[15u].z, fma(_881, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _880));
        float _1785;
        if (_1751 > 0.0)
        {
            _1785 = abs((1.0 - _1740) / _1751);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1751 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1740 + 1.0) / _1751);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1785 = frontier_phi_14_12_ladder;
        }
        float _2010;
        if (_1754 > 0.0)
        {
            _2010 = abs((1.0 - _1744) / _1754);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1754 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1744 + 1.0) / _1754);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2010 = frontier_phi_23_19_ladder;
        }
        float _2267;
        if (_1757 > 0.0)
        {
            _2267 = abs((1.0 - _1748) / _1757);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1757 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1748 + 1.0) / _1757);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2267 = frontier_phi_35_30_ladder;
        }
        float _2269 = isnan(_2010) ? _1785 : (isnan(_1785) ? _2010 : min(_1785, _2010));
        float _2270 = isnan(_2267) ? _2269 : (isnan(_2269) ? _2267 : min(_2269, _2267));
        float _2274 = (_2270 * _1751) + _1740;
        float _2275 = (_2270 * _1754) + _1744;
        float _2276 = (_2270 * _1757) + _1748;
        float _2277 = _2270 * 9.9999997473787516355514526367188e-05;
        float _2279 = (-1.0) - _2277;
        float _2281 = _2277 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2276 > _2281) || ((_2276 < _2279) || ((_2275 > _2281) || ((_2275 < _2279) || ((_2274 < _2279) || (_2274 > _2281))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2404 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2276, cbModelParam._m0[9u].z, fma(_2275, cbModelParam._m0[9u].y, _2274 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2276, cbModelParam._m0[10u].z, fma(_2275, cbModelParam._m0[10u].y, _2274 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2276, cbModelParam._m0[11u].z, fma(_2275, cbModelParam._m0[11u].y, _2274 * cbModelParam._m0[11u].x))), _1693);
            frontier_phi_13_35_ladder = _2404.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2404.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2404.x * cbModelParam._m0[1u].y;
        }
        _1773 = frontier_phi_13_35_ladder_2;
        _1775 = frontier_phi_13_35_ladder_1;
        _1777 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1761 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_880, _881, _882), _1693);
        _1773 = _1761.x * cbModelParam._m0[1u].y;
        _1775 = _1761.y * cbModelParam._m0[1u].y;
        _1777 = _1761.z * cbModelParam._m0[1u].y;
    }
    float _1781 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _709);
    float _1782 = isnan(_1781) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1781 : min(cbModelParam._m0[25u].w, _1781));
    float _1873;
    float _1875;
    float _1877;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1837 = fma(_944, cbModelParam._m0[21u].z, fma(_940, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _936)) + cbModelParam._m0[21u].w;
        float _1841 = fma(_944, cbModelParam._m0[22u].z, fma(_940, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _936)) + cbModelParam._m0[22u].w;
        float _1845 = fma(_944, cbModelParam._m0[23u].z, fma(_940, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _936)) + cbModelParam._m0[23u].w;
        float _1848 = fma(_882, cbModelParam._m0[21u].z, fma(_881, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _880));
        float _1851 = fma(_882, cbModelParam._m0[22u].z, fma(_881, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _880));
        float _1854 = fma(_882, cbModelParam._m0[23u].z, fma(_881, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _880));
        float _2015;
        if (_1848 > 0.0)
        {
            _2015 = abs((1.0 - _1837) / _1848);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1848 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1837 + 1.0) / _1848);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2015 = frontier_phi_25_21_ladder;
        }
        float _2294;
        if (_1851 > 0.0)
        {
            _2294 = abs((1.0 - _1841) / _1851);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1851 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1841 + 1.0) / _1851);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2294 = frontier_phi_37_32_ladder;
        }
        float _2507;
        if (_1854 > 0.0)
        {
            _2507 = abs((1.0 - _1845) / _1854);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1854 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1845 + 1.0) / _1854);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2507 = frontier_phi_46_43_ladder;
        }
        float _2509 = isnan(_2294) ? _2015 : (isnan(_2015) ? _2294 : min(_2015, _2294));
        float _2510 = isnan(_2507) ? _2509 : (isnan(_2509) ? _2507 : min(_2509, _2507));
        float _2514 = (_2510 * _1848) + _1837;
        float _2515 = (_2510 * _1851) + _1841;
        float _2516 = (_2510 * _1854) + _1845;
        float _2517 = _2510 * 9.9999997473787516355514526367188e-05;
        float _2518 = (-1.0) - _2517;
        float _2520 = _2517 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2516 > _2520) || ((_2516 < _2518) || ((_2515 > _2520) || ((_2515 < _2518) || ((_2514 < _2518) || (_2514 > _2520))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2715 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2516, cbModelParam._m0[17u].z, fma(_2515, cbModelParam._m0[17u].y, _2514 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2516, cbModelParam._m0[18u].z, fma(_2515, cbModelParam._m0[18u].y, _2514 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2516, cbModelParam._m0[19u].z, fma(_2515, cbModelParam._m0[19u].y, _2514 * cbModelParam._m0[19u].x))), _1782);
            frontier_phi_22_46_ladder = _2715.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2715.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2715.x * cbModelParam._m0[1u].z;
        }
        _1873 = frontier_phi_22_46_ladder_2;
        _1875 = frontier_phi_22_46_ladder_1;
        _1877 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1857 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_880, _881, _882), _1782);
        _1873 = _1857.x * cbModelParam._m0[1u].z;
        _1875 = _1857.y * cbModelParam._m0[1u].z;
        _1877 = _1857.z * cbModelParam._m0[1u].z;
    }
    float _1890 = (((_907 * _857) + _908) * _872) * ((cbModelParam._m0[1u].w * (_1873 - _1773)) + _1773);
    float _1892 = (((_907 * _859) + _908) * _872) * ((cbModelParam._m0[1u].w * (_1875 - _1775)) + _1775);
    float _1894 = (((_907 * _860) + _908) * _872) * ((cbModelParam._m0[1u].w * (_1877 - _1777)) + _1777);
    float _1897 = fma(_1894, cbSceneParam._m0[89u].z, fma(_1892, cbSceneParam._m0[89u].y, _1890 * cbSceneParam._m0[89u].x));
    float _1900 = fma(_1894, cbSceneParam._m0[90u].z, fma(_1892, cbSceneParam._m0[90u].y, _1890 * cbSceneParam._m0[90u].x));
    float _1903 = fma(_1894, cbSceneParam._m0[91u].z, fma(_1892, cbSceneParam._m0[91u].y, _1890 * cbSceneParam._m0[91u].x));
    vec4 _1911 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_794, _795));
    float _1913 = _1911.w;
    float _1925 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1913);
    float _1926 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1913);
    float _1927 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1913);
    uvec4 _1931 = floatBitsToUint(cbInstanceData._m0[_832 + 5u]);
    uint _1933 = _1931.x * 14u;
    uint _1934 = _1933 + 13u;
    float _1941 = _872 + (-1.0);
    float _1946 = (cbLight._m0[_1934].x * _1941) + 1.0;
    float _1947 = (cbLight._m0[_1934].y * _1941) + 1.0;
    float _1948 = (cbLight._m0[_1934].z * _1941) + 1.0;
    float _1949 = (cbLight._m0[_1934].w * _1941) + 1.0;
    uint _1950 = _1933 + 5u;
    float _1956 = isnan(1.0) ? _1947 : (isnan(_1947) ? 1.0 : min(_1947, 1.0));
    uint _1960 = _1933 + 4u;
    float _1969 = isnan(1.0) ? _1946 : (isnan(_1946) ? 1.0 : min(_1946, 1.0));
    uint _1973 = _1933 | 1u;
    float _1984 = dot(vec3(cbLight._m0[_1933].xyz), vec3(_706, _707, _708));
    float _1987 = dot(vec3(cbLight._m0[_1973].xyz), vec3(_706, _707, _708));
    float _4111 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _4122 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
    float _1992 = (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * 0.3183098733425140380859375;
    float _1994 = (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * 0.3183098733425140380859375;
    float _2001 = ((cbLight._m0[_1950].x * _1956) * _1994) + (((cbLight._m0[_1960].x * _1925) * _1969) * _1992);
    float _2002 = ((_1956 * cbLight._m0[_1950].y) * _1994) + (((cbLight._m0[_1960].y * _1926) * _1969) * _1992);
    float _2003 = ((_1956 * cbLight._m0[_1950].z) * _1994) + (((cbLight._m0[_1960].z * _1927) * _1969) * _1992);
    uvec4 _2007 = floatBitsToUint(cbLight._m0[_1933 + 12u]);
    bool _2009 = _2007.x == 0u;
    float _2020;
    float _2022;
    float _2024;
    if (_2009)
    {
        _2020 = _2001;
        _2022 = _2002;
        _2024 = _2003;
    }
    else
    {
        uint _2028 = _1933 + 6u;
        float _2044 = (dot(vec3(cbLight._m0[_1933 + 2u].xyz), vec3(_706, _707, _708)) * 0.5) + 0.5;
        float _2045 = _2044 * _2044;
        float _4133 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
        float _2046 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
        float _2047 = isnan(1.0) ? _1948 : (isnan(_1948) ? 1.0 : min(_1948, 1.0));
        _2020 = (((cbLight._m0[_2028].x * 0.3183098733425140380859375) * _2046) * _2047) + _2001;
        _2022 = (((cbLight._m0[_2028].y * 0.3183098733425140380859375) * _2046) * _2047) + _2002;
        _2024 = (((cbLight._m0[_2028].z * 0.3183098733425140380859375) * _2046) * _2047) + _2003;
    }
    bool _2027 = _2007.y == 0u;
    float _2065;
    float _2067;
    float _2069;
    if (_2027)
    {
        _2065 = _2020;
        _2067 = _2022;
        _2069 = _2024;
    }
    else
    {
        uint _2238 = _1933 + 7u;
        float _2254 = (dot(vec3(cbLight._m0[_1933 + 3u].xyz), vec3(_706, _707, _708)) * 0.5) + 0.5;
        float _2255 = _2254 * _2254;
        float _4149 = isnan(0.0) ? _2255 : (isnan(_2255) ? 0.0 : max(_2255, 0.0));
        float _2256 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _2257 = isnan(1.0) ? _1949 : (isnan(_1949) ? 1.0 : min(_1949, 1.0));
        _2065 = (((cbLight._m0[_2238].x * 0.3183098733425140380859375) * _2256) * _2257) + _2020;
        _2067 = (((cbLight._m0[_2238].y * 0.3183098733425140380859375) * _2256) * _2257) + _2022;
        _2069 = (((cbLight._m0[_2238].z * 0.3183098733425140380859375) * _2256) * _2257) + _2024;
    }
    uint _2072 = _1933 + 8u;
    float _2085 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1933].w)) * _709) * 0.949999988079071044921875);
    float _2086 = _2085 * _2085;
    float _2087 = cbLight._m0[_1933].x + _786;
    float _2088 = cbLight._m0[_1933].y + _787;
    float _2089 = cbLight._m0[_1933].z + _788;
    float _2093 = inversesqrt(dot(vec3(_2087, _2088, _2089), vec3(_2087, _2088, _2089)));
    float _2094 = _2093 * _2087;
    float _2095 = _2093 * _2088;
    float _2096 = _2093 * _2089;
    float _2097 = dot(vec3(_706, _707, _708), vec3(cbLight._m0[_1933].xyz));
    float _4165 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2100 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
    float _4176 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _2101 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
    float _2102 = dot(vec3(_706, _707, _708), vec3(_2094, _2095, _2096));
    float _4187 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
    float _2105 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
    float _2106 = dot(vec3(cbLight._m0[_1933].xyz), vec3(_2094, _2095, _2096));
    float _4198 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    float _2110 = _2086 * _2086;
    float _2114 = ((_2105 * _2105) * (_2110 + (-1.0))) + 1.0;
    float _2122 = exp2(log2(1.0 - (isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0)))) * 5.0);
    float _2123 = 0.959999978542327880859375 - _854;
    float _2125 = 0.959999978542327880859375 - _855;
    float _2126 = 0.959999978542327880859375 - _856;
    float _2133 = 1.0 - _2086;
    float _2144 = (0.5 / (((_2101 * ((_2100 * _2133) + _2086)) + 9.9999999392252902907785028219223e-09) + (((_2101 * _2133) + _2086) * _2100))) * _2100;
    float _4209 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2146 = (isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_2110 / ((_2114 * _2114) * 3.141590118408203125));
    uint _2160 = _1933 + 9u;
    float _2171 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1973].w)) * _709) * 0.949999988079071044921875);
    float _2172 = _2171 * _2171;
    float _2173 = cbLight._m0[_1973].x + _786;
    float _2174 = cbLight._m0[_1973].y + _787;
    float _2175 = cbLight._m0[_1973].z + _788;
    float _2179 = inversesqrt(dot(vec3(_2173, _2174, _2175), vec3(_2173, _2174, _2175)));
    float _2180 = _2179 * _2173;
    float _2181 = _2179 * _2174;
    float _2182 = _2179 * _2175;
    float _2183 = dot(vec3(_706, _707, _708), vec3(cbLight._m0[_1973].xyz));
    float _4220 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
    float _2186 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
    float _2187 = dot(vec3(_706, _707, _708), vec3(_2180, _2181, _2182));
    float _4231 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
    float _2190 = isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0));
    float _2191 = dot(vec3(cbLight._m0[_1973].xyz), vec3(_2180, _2181, _2182));
    float _4242 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2195 = _2172 * _2172;
    float _2199 = ((_2190 * _2190) * (_2195 + (-1.0))) + 1.0;
    float _2206 = exp2(log2(1.0 - (isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0)))) * 5.0);
    float _2213 = 1.0 - _2172;
    float _2223 = (0.5 / (((_2101 * ((_2186 * _2213) + _2172)) + 9.9999999392252902907785028219223e-09) + (((_2101 * _2213) + _2172) * _2186))) * _2186;
    float _4253 = isnan(0.0) ? _2223 : (isnan(_2223) ? 0.0 : max(_2223, 0.0));
    float _2225 = (isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0))) * (_2195 / ((_2199 * _2199) * 3.141590118408203125));
    float _2235 = (((((_2206 * _2123) + _857) * cbLight._m0[_2160].x) * _2225) * _1956) + ((((cbLight._m0[_2072].x * _1925) * ((_2122 * _2123) + _857)) * _2146) * _1969);
    float _2236 = (((((_2206 * _2125) + _859) * cbLight._m0[_2160].y) * _2225) * _1956) + ((((cbLight._m0[_2072].y * _1926) * ((_2122 * _2125) + _859)) * _2146) * _1969);
    float _2237 = (((((_2206 * _2126) + _860) * cbLight._m0[_2160].z) * _2225) * _1956) + ((((cbLight._m0[_2072].z * _1927) * ((_2122 * _2126) + _860)) * _2146) * _1969);
    float _2299;
    float _2301;
    float _2303;
    if (_2009)
    {
        _2299 = _2235;
        _2301 = _2236;
        _2303 = _2237;
    }
    else
    {
        uint _2305 = _1933 + 2u;
        uint _2309 = _1933 + 10u;
        float _2323 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2305].w)) * _709) * 0.949999988079071044921875);
        float _2324 = _2323 * _2323;
        float _2325 = cbLight._m0[_2305].x + _786;
        float _2326 = cbLight._m0[_2305].y + _787;
        float _2327 = cbLight._m0[_2305].z + _788;
        float _2331 = inversesqrt(dot(vec3(_2325, _2326, _2327), vec3(_2325, _2326, _2327)));
        float _2332 = _2331 * _2325;
        float _2333 = _2331 * _2326;
        float _2334 = _2331 * _2327;
        float _2335 = dot(vec3(_706, _707, _708), vec3(cbLight._m0[_2305].xyz));
        float _4264 = isnan(0.0) ? _2335 : (isnan(_2335) ? 0.0 : max(_2335, 0.0));
        float _2338 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _2339 = dot(vec3(_706, _707, _708), vec3(_2332, _2333, _2334));
        float _4275 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
        float _2342 = isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0));
        float _2343 = dot(vec3(cbLight._m0[_2305].xyz), vec3(_2332, _2333, _2334));
        float _4286 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
        float _2347 = _2324 * _2324;
        float _2351 = ((_2342 * _2342) * (_2347 + (-1.0))) + 1.0;
        float _2358 = exp2(log2(1.0 - (isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0)))) * 5.0);
        float _2365 = 1.0 - _2324;
        float _2375 = (0.5 / (((_2101 * ((_2338 * _2365) + _2324)) + 9.9999999392252902907785028219223e-09) + (((_2101 * _2365) + _2324) * _2338))) * _2338;
        float _4297 = isnan(0.0) ? _2375 : (isnan(_2375) ? 0.0 : max(_2375, 0.0));
        float _2377 = (isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0))) * (_2347 / ((_2351 * _2351) * 3.141590118408203125));
        float _2378 = isnan(1.0) ? _1948 : (isnan(_1948) ? 1.0 : min(_1948, 1.0));
        _2299 = (((((_2358 * _2123) + _857) * cbLight._m0[_2309].x) * _2377) * _2378) + _2235;
        _2301 = (((((_2358 * _2125) + _859) * cbLight._m0[_2309].y) * _2377) * _2378) + _2236;
        _2303 = (((((_2358 * _2126) + _860) * cbLight._m0[_2309].z) * _2377) * _2378) + _2237;
    }
    float _2413;
    float _2415;
    float _2417;
    if (_2027)
    {
        _2413 = _2299;
        _2415 = _2301;
        _2417 = _2303;
    }
    else
    {
        uint _2424 = _1933 + 3u;
        uint _2428 = _1933 + 11u;
        float _2442 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2424].w)) * _709) * 0.949999988079071044921875);
        float _2443 = _2442 * _2442;
        float _2444 = cbLight._m0[_2424].x + _786;
        float _2445 = cbLight._m0[_2424].y + _787;
        float _2446 = cbLight._m0[_2424].z + _788;
        float _2450 = inversesqrt(dot(vec3(_2444, _2445, _2446), vec3(_2444, _2445, _2446)));
        float _2451 = _2450 * _2444;
        float _2452 = _2450 * _2445;
        float _2453 = _2450 * _2446;
        float _2454 = dot(vec3(_706, _707, _708), vec3(cbLight._m0[_2424].xyz));
        float _4313 = isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0));
        float _2457 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
        float _2458 = dot(vec3(_706, _707, _708), vec3(_2451, _2452, _2453));
        float _4324 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
        float _2461 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
        float _2462 = dot(vec3(cbLight._m0[_2424].xyz), vec3(_2451, _2452, _2453));
        float _4335 = isnan(0.0) ? _2462 : (isnan(_2462) ? 0.0 : max(_2462, 0.0));
        float _2466 = _2443 * _2443;
        float _2470 = ((_2461 * _2461) * (_2466 + (-1.0))) + 1.0;
        float _2477 = exp2(log2(1.0 - (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0)))) * 5.0);
        float _2484 = 1.0 - _2443;
        float _2494 = (0.5 / (((_2101 * ((_2457 * _2484) + _2443)) + 9.9999999392252902907785028219223e-09) + (((_2101 * _2484) + _2443) * _2457))) * _2457;
        float _4346 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
        float _2496 = (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * (_2466 / ((_2470 * _2470) * 3.141590118408203125));
        float _2497 = isnan(1.0) ? _1949 : (isnan(_1949) ? 1.0 : min(_1949, 1.0));
        _2413 = (((((_2477 * _2123) + _857) * cbLight._m0[_2428].x) * _2496) * _2497) + _2299;
        _2415 = (((((_2477 * _2125) + _859) * cbLight._m0[_2428].y) * _2496) * _2497) + _2301;
        _2417 = (((((_2477 * _2126) + _860) * cbLight._m0[_2428].z) * _2496) * _2497) + _2303;
    }
    float _2632;
    float _2634;
    float _2636;
    float _2638;
    float _2640;
    float _2642;
    if (_1931.y == 0u)
    {
        float _2572 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2573 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2572;
        float _2574 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2572;
        float _2575 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2572;
        uvec4 _2587 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2588 = _2587.x;
        uint _2599 = uint((float(_2587.y) * floor(float(uint(cbSceneParam._m0[85u].y * _795) / _2588))) + floor(float(uint(cbSceneParam._m0[85u].x * _794) / _2588)));
        float _2609 = (log2(_2575 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2610 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
        uint _2613 = uint(isnan(14.0) ? _2610 : (isnan(_2610) ? 14.0 : min(_2610, 14.0)));
        uvec4 _2618 = texelFetch(g_lightClusterGridBuffer, int(((_2613 << 2u) + (_2599 << 6u)) >> 2u));
        uint _2619 = _2618.x;
        uint _2620 = _2587.z;
        float _2720;
        float _2722;
        float _2724;
        float _2726;
        float _2728;
        float _2730;
        if (((((1u << ((_2620 >> 4u) & 15u)) + 4294967295u) & _2619) == 0u) || ((_2620 & 240u) == 0u))
        {
            _2720 = 0.0;
            _2722 = 0.0;
            _2724 = 0.0;
            _2726 = 0.0;
            _2728 = 0.0;
            _2730 = 0.0;
        }
        else
        {
            float _2721;
            float _2723;
            float _2725;
            float _2727;
            float _2729;
            float _2731;
            float _2865 = 0.0;
            float _2866 = 0.0;
            float _2867 = 0.0;
            float _2868 = 0.0;
            float _2869 = 0.0;
            float _2870 = 0.0;
            uint _2871 = 0u;
            uint _2880;
            bool _2881;
            for (;;)
            {
                _2880 = texelFetch(g_lightClassification, int((((_2613 << 5u) + (_2599 << 9u)) + (_2871 << 2u)) >> 2u)).x;
                _2881 = _2880 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2881)
                {
                    frontier_phi_61_pred = _2865;
                    frontier_phi_61_pred_1 = _2870;
                    frontier_phi_61_pred_2 = _2869;
                    frontier_phi_61_pred_3 = _2868;
                    frontier_phi_61_pred_4 = _2867;
                    frontier_phi_61_pred_5 = _2866;
                }
                else
                {
                    float _2989;
                    float _2990;
                    float _2991;
                    float _2992;
                    float _2993;
                    float _2994;
                    uint _2995;
                    _2989 = _2865;
                    _2990 = _2866;
                    _2991 = _2867;
                    _2992 = _2868;
                    _2993 = _2869;
                    _2994 = _2870;
                    _2995 = _2880;
                    float _2921;
                    float _2922;
                    float _2923;
                    float _2924;
                    float _2925;
                    float _2926;
                    for (;;)
                    {
                        uint _2999 = uint(findLSB(_2995)) + (_2871 << 5u);
                        uint _2996 = (_2995 + 4294967295u) & _2995;
                        uint _3001 = _2999 * 48u;
                        vec4 _3015 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3001)).x, texelFetch(g_PointLightRenderingBuffer, int(_3001 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3001 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3001 + 3u)).x));
                        uint _3021 = (_2999 * 48u) + 4u;
                        vec4 _3034 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3021)).x, texelFetch(g_PointLightRenderingBuffer, int(_3021 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3021 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3021 + 3u)).x));
                        uint _3040 = (_2999 * 48u) + 8u;
                        vec3 _3051 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3040)).x, texelFetch(g_PointLightRenderingBuffer, int(_3040 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3040 + 2u)).x));
                        float _3055 = _3015.x - _2573;
                        float _3056 = _3015.y - _2574;
                        float _3057 = _3015.z - _2575;
                        float _3058 = dot(vec3(_3055, _3056, _3057), vec3(_3055, _3056, _3057));
                        float _3061 = inversesqrt(_3058);
                        float _3062 = _3061 * _3055;
                        float _3063 = _3061 * _3056;
                        float _3064 = _3061 * _3057;
                        float _3065 = dot(vec3(_813, _816, _819), vec3(_3062, _3063, _3064));
                        float _3070 = 1.0 - (_3058 * _3015.w);
                        float _4372 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
                        float _3071 = isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0));
                        float _3072 = sqrt(_3058) * _3034.w;
                        float _3075 = 1.39999997615814208984375 / (_3072 + 1.39999997615814208984375);
                        float _3076 = _3075 * _3075;
                        float _3079 = ((1.0 - _3076) * _3065) + _3076;
                        float _3082 = _3072 * _3072;
                        float _3086 = ((isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0))) * _3071) / ((_3082 * 0.699999988079071044921875) + 1.0);
                        float _3090 = (-0.0) - _2573;
                        float _3091 = (-0.0) - _2574;
                        float _3092 = (-0.0) - _2575;
                        float _3096 = inversesqrt(dot(vec3(_3090, _3091, _3092), vec3(_3090, _3091, _3092)));
                        float _3097 = _3096 * _3090;
                        float _3098 = _3096 * _3091;
                        float _3099 = _3096 * _3092;
                        float _3107 = exp2(log2(1.0 / ((_3082 * 3.5) + 5.0)) * 0.25);
                        float _3108 = 1.0 - _888;
                        float _3115 = sqrt(1.0 - ((1.0 - (_3108 * _3108)) * (1.0 - (_3107 * _3107))));
                        float _3116 = _3115 * _3115;
                        float _3117 = _3116 * _3116;
                        float _3118 = _3097 + _3062;
                        float _3119 = _3098 + _3063;
                        float _3120 = _3099 + _3064;
                        float _3124 = inversesqrt(dot(vec3(_3118, _3119, _3120), vec3(_3118, _3119, _3120)));
                        float _3128 = dot(vec3(_813, _816, _819), vec3(_3097, _3098, _3099));
                        float _4388 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
                        float _3131 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
                        float _3132 = dot(vec3(_813, _816, _819), vec3(_3124 * _3118, _3124 * _3119, _3124 * _3120));
                        float _4399 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0));
                        float _3135 = isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0));
                        float _3139 = ((_3135 * _3135) * (_3117 + (-1.0))) + 1.0;
                        float _3140 = _3075 * _3116;
                        float _3141 = _3140 * _3140;
                        float _3144 = ((1.0 - _3141) * _3065) + _3141;
                        float _4410 = isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0));
                        float _3145 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
                        float _3146 = 1.0 - _3116;
                        float _3156 = (0.5 / (((_3145 * ((_3131 * _3146) + _3116)) + 9.9999999392252902907785028219223e-09) + (((_3145 * _3146) + _3116) * _3131))) * _3145;
                        float _4421 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
                        float _3167 = (((_3117 * 3.1415927410125732421875) * (isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0)))) / ((_3139 * _3139) * ((_3082 * 2.1991131305694580078125) + 3.141590118408203125))) * _3071;
                        _2924 = (_3086 * _3034.x) + _2992;
                        _2925 = (_3086 * _3034.y) + _2993;
                        _2926 = (_3086 * _3034.z) + _2994;
                        _2921 = (_3167 * _3051.x) + _2989;
                        _2922 = (_3167 * _3051.y) + _2990;
                        _2923 = (_3167 * _3051.z) + _2991;
                        if (_2996 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2989 = _2921;
                            _2990 = _2922;
                            _2991 = _2923;
                            _2992 = _2924;
                            _2993 = _2925;
                            _2994 = _2926;
                            _2995 = _2996;
                        }
                    }
                    frontier_phi_61_pred = _2921;
                    frontier_phi_61_pred_1 = _2926;
                    frontier_phi_61_pred_2 = _2925;
                    frontier_phi_61_pred_3 = _2924;
                    frontier_phi_61_pred_4 = _2923;
                    frontier_phi_61_pred_5 = _2922;
                }
                _2721 = frontier_phi_61_pred;
                _2731 = frontier_phi_61_pred_1;
                _2729 = frontier_phi_61_pred_2;
                _2727 = frontier_phi_61_pred_3;
                _2725 = frontier_phi_61_pred_4;
                _2723 = frontier_phi_61_pred_5;
                uint _2872 = _2871 + 1u;
                if (_2872 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2865 = _2721;
                    _2866 = _2723;
                    _2867 = _2725;
                    _2868 = _2727;
                    _2869 = _2729;
                    _2870 = _2731;
                    _2871 = _2872;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2720 = _2721;
            _2722 = _2723;
            _2724 = _2725;
            _2726 = _2727;
            _2728 = _2729;
            _2730 = _2731;
        }
        uvec4 _2734 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2735 = _2734.z;
        uint _2737 = (_2735 >> 8u) & 15u;
        float _2833;
        float _2835;
        float _2837;
        float _2839;
        float _2841;
        float _2843;
        if (((4294967295u << _2737) & _2619) == 0u)
        {
            _2833 = _2720;
            _2835 = _2722;
            _2837 = _2724;
            _2839 = _2726;
            _2841 = _2728;
            _2843 = _2730;
        }
        else
        {
            float _2858 = inversesqrt(dot(vec3(_2573, _2574, _2575), vec3(_2573, _2574, _2575)));
            float _2859 = _2858 * _2573;
            float _2860 = _2858 * _2574;
            float _2861 = _2858 * _2575;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2737 < ((_2735 >> 12u) & 15u))
            {
                float _2834;
                float _2836;
                float _2838;
                float _2840;
                float _2842;
                float _2844;
                float _2972 = _2720;
                float _2973 = _2722;
                float _2974 = _2724;
                float _2975 = _2726;
                float _2976 = _2728;
                float _2977 = _2730;
                uint _2978 = _2737;
                uint _2987;
                bool _2988;
                for (;;)
                {
                    _2987 = texelFetch(g_lightClassification, int((((_2613 << 5u) + (_2599 << 9u)) + (_2978 << 2u)) >> 2u)).x;
                    _2988 = _2987 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2988)
                    {
                        frontier_phi_67_pred = _2975;
                        frontier_phi_67_pred_1 = _2976;
                        frontier_phi_67_pred_2 = _2977;
                        frontier_phi_67_pred_3 = _2974;
                        frontier_phi_67_pred_4 = _2973;
                        frontier_phi_67_pred_5 = _2972;
                    }
                    else
                    {
                        float _3172;
                        float _3173;
                        float _3174;
                        float _3175;
                        float _3176;
                        float _3177;
                        float _3466;
                        float _3467;
                        float _3468;
                        float _3469;
                        float _3470;
                        float _3471;
                        float _3185 = _2972;
                        float _3186 = _2973;
                        float _3187 = _2974;
                        float _3188 = _2975;
                        float _3189 = _2976;
                        float _3190 = _2977;
                        uint _3191 = _2987;
                        uint _3192;
                        vec4 _3217;
                        float _3218;
                        vec4 _3233;
                        vec3 _3245;
                        vec4 _3260;
                        vec4 _3275;
                        float _3322;
                        bool _3323;
                        for (;;)
                        {
                            uint _3202 = ((_2978 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3191));
                            _3192 = (_3191 + 4294967295u) & _3191;
                            uint _3204 = _3202 * 40u;
                            _3217 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3204)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3204 + 3u)).x));
                            _3218 = _3217.w;
                            uint _3220 = (_3202 * 40u) + 4u;
                            _3233 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3220)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3220 + 3u)).x));
                            uint _3235 = (_3202 * 40u) + 8u;
                            _3245 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3235)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3235 + 2u)).x));
                            uint _3247 = (_3202 * 40u) + 16u;
                            _3260 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3247)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3247 + 3u)).x));
                            uint _3262 = (_3202 * 40u) + 20u;
                            _3275 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3262)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3262 + 3u)).x));
                            uint _3278 = (_3202 * 40u) + 24u;
                            vec4 _3291 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3278)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3278 + 3u)).x));
                            uint _3297 = (_3202 * 40u) + 28u;
                            vec4 _3310 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3297)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 3u)).x));
                            _3322 = fma(_2575, _3310.z, fma(_2574, _3310.y, _3310.x * _2573)) + _3310.w;
                            _3323 = !((fma(_2575, _3291.z, fma(_2574, _3291.y, _3291.x * _2573)) + _3291.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3323)
                            {
                                float _3350 = _3217.x - _2573;
                                float _3351 = _3217.y - _2574;
                                float _3352 = _3217.z - _2575;
                                float _3353 = dot(vec3(_3350, _3351, _3352), vec3(_3350, _3351, _3352));
                                float _3356 = inversesqrt(_3353);
                                float _3357 = _3356 * _3350;
                                float _3358 = _3356 * _3351;
                                float _3359 = _3356 * _3352;
                                float _3363 = 1.0 - (_3353 / (_3218 * _3218));
                                float _4432 = isnan(0.0) ? _3363 : (isnan(_3363) ? 0.0 : max(_3363, 0.0));
                                float _3364 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
                                float _3368 = sqrt(_3353) * _3233.w;
                                float _3370 = 1.39999997615814208984375 / (_3368 + 1.39999997615814208984375);
                                float _3371 = _3370 * _3370;
                                float _3374 = ((1.0 - _3371) * dot(vec3(_3357, _3358, _3359), vec3(_813, _816, _819))) + _3371;
                                float _3377 = _3368 * _3368;
                                float _3381 = (fma(_2575, _3260.z, fma(_2574, _3260.y, _3260.x * _2573)) + _3260.w) / _3322;
                                float _3382 = (fma(_2575, _3275.z, fma(_2574, _3275.y, _3275.x * _2573)) + _3275.w) / _3322;
                                float _3386 = 1.0 - dot(vec2(_3381, _3382), vec2(_3381, _3382));
                                float _4448 = isnan(0.0) ? _3386 : (isnan(_3386) ? 0.0 : max(_3386, 0.0));
                                float _3387 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
                                float _3388 = _3387 * (((isnan(0.0) ? _3374 : (isnan(_3374) ? 0.0 : max(_3374, 0.0))) * _3364) / ((_3377 * 0.699999988079071044921875) + 1.0));
                                float _3400 = exp2(log2(1.0 / ((_3377 * 3.5) + 5.0)) * 0.25);
                                float _3401 = 1.0 - _888;
                                float _3408 = sqrt(1.0 - ((1.0 - (_3401 * _3401)) * (1.0 - (_3400 * _3400))));
                                float _3409 = _3408 * _3408;
                                float _3410 = _3409 * _3409;
                                float _3411 = _3357 - _2859;
                                float _3412 = _3358 - _2860;
                                float _3413 = _3359 - _2861;
                                float _3417 = inversesqrt(dot(vec3(_3411, _3412, _3413), vec3(_3411, _3412, _3413)));
                                float _3421 = dot(vec3(_813, _816, _819), vec3((-0.0) - _2859, (-0.0) - _2860, (-0.0) - _2861));
                                float _4459 = isnan(0.0) ? _3421 : (isnan(_3421) ? 0.0 : max(_3421, 0.0));
                                float _3424 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
                                float _3425 = dot(vec3(_813, _816, _819), vec3(_3417 * _3411, _3417 * _3412, _3417 * _3413));
                                float _4470 = isnan(0.0) ? _3425 : (isnan(_3425) ? 0.0 : max(_3425, 0.0));
                                float _3428 = isnan(1.0) ? _4470 : (isnan(_4470) ? 1.0 : min(_4470, 1.0));
                                float _3432 = ((_3428 * _3428) * (_3410 + (-1.0))) + 1.0;
                                float _3433 = _3370 * _3409;
                                float _3434 = _3433 * _3433;
                                float _3440 = ((1.0 - _3434) * dot(vec3(_813, _816, _819), vec3(_3357, _3358, _3359))) + _3434;
                                float _4481 = isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0));
                                float _3441 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
                                float _3442 = 1.0 - _3409;
                                float _3452 = (0.5 / (((_3441 * ((_3424 * _3442) + _3409)) + 9.9999999392252902907785028219223e-09) + (((_3441 * _3442) + _3409) * _3424))) * _3441;
                                float _4492 = isnan(0.0) ? _3452 : (isnan(_3452) ? 0.0 : max(_3452, 0.0));
                                float _3462 = (_3387 * _3364) * (((_3410 * 3.1415927410125732421875) * (isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0)))) / ((_3432 * _3432) * ((_3377 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3462 * _3245.x;
                                frontier_phi_73_pred_1 = _3462 * _3245.y;
                                frontier_phi_73_pred_2 = _3388 * _3233.z;
                                frontier_phi_73_pred_3 = _3388 * _3233.y;
                                frontier_phi_73_pred_4 = _3388 * _3233.x;
                                frontier_phi_73_pred_5 = _3462 * _3245.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3466 = frontier_phi_73_pred;
                            _3467 = frontier_phi_73_pred_1;
                            _3471 = frontier_phi_73_pred_2;
                            _3470 = frontier_phi_73_pred_3;
                            _3469 = frontier_phi_73_pred_4;
                            _3468 = frontier_phi_73_pred_5;
                            _3175 = _3469 + _3188;
                            _3176 = _3470 + _3189;
                            _3177 = _3471 + _3190;
                            _3172 = _3466 + _3185;
                            _3173 = _3467 + _3186;
                            _3174 = _3468 + _3187;
                            if (_3192 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3185 = _3172;
                                _3186 = _3173;
                                _3187 = _3174;
                                _3188 = _3175;
                                _3189 = _3176;
                                _3190 = _3177;
                                _3191 = _3192;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3175;
                        frontier_phi_67_pred_1 = _3176;
                        frontier_phi_67_pred_2 = _3177;
                        frontier_phi_67_pred_3 = _3174;
                        frontier_phi_67_pred_4 = _3173;
                        frontier_phi_67_pred_5 = _3172;
                    }
                    _2840 = frontier_phi_67_pred;
                    _2842 = frontier_phi_67_pred_1;
                    _2844 = frontier_phi_67_pred_2;
                    _2838 = frontier_phi_67_pred_3;
                    _2836 = frontier_phi_67_pred_4;
                    _2834 = frontier_phi_67_pred_5;
                    uint _2979 = _2978 + 1u;
                    if (_2979 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2972 = _2834;
                        _2973 = _2836;
                        _2974 = _2838;
                        _2975 = _2840;
                        _2976 = _2842;
                        _2977 = _2844;
                        _2978 = _2979;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2842;
                frontier_phi_55_56_ladder_1 = _2844;
                frontier_phi_55_56_ladder_2 = _2840;
                frontier_phi_55_56_ladder_3 = _2838;
                frontier_phi_55_56_ladder_4 = _2836;
                frontier_phi_55_56_ladder_5 = _2834;
            }
            else
            {
                frontier_phi_55_56_ladder = _2728;
                frontier_phi_55_56_ladder_1 = _2730;
                frontier_phi_55_56_ladder_2 = _2726;
                frontier_phi_55_56_ladder_3 = _2724;
                frontier_phi_55_56_ladder_4 = _2722;
                frontier_phi_55_56_ladder_5 = _2720;
            }
            _2833 = frontier_phi_55_56_ladder_5;
            _2835 = frontier_phi_55_56_ladder_4;
            _2837 = frontier_phi_55_56_ladder_3;
            _2839 = frontier_phi_55_56_ladder_2;
            _2841 = frontier_phi_55_56_ladder;
            _2843 = frontier_phi_55_56_ladder_1;
        }
        float _2848 = isnan(1.0) ? _872 : (isnan(_872) ? 1.0 : min(_872, 1.0));
        _2632 = (_2848 * _2839) + _2065;
        _2634 = (_2848 * _2841) + _2067;
        _2636 = (_2848 * _2843) + _2069;
        _2638 = ((_2833 * _857) * _2848) + _2413;
        _2640 = ((_2835 * _859) * _2848) + _2415;
        _2642 = ((_2837 * _860) * _2848) + _2417;
    }
    else
    {
        _2632 = _2065;
        _2634 = _2067;
        _2636 = _2069;
        _2638 = _2413;
        _2640 = _2415;
        _2642 = _2417;
    }
    float _4508 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
    float _4519 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
    float _4530 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
    uint _2662 = _832 + 6u;
    float _2670 = _794 / cbSceneParam._m0[86u].x;
    float _2671 = _795 / cbSceneParam._m0[86u].y;
    vec4 _2685 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2670, _2671, (log2((isnan(cbSceneParam._m0[77u].w) ? _729 : (isnan(_729) ? cbSceneParam._m0[77u].w : min(_729, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2687 = _2685.x;
    float _2688 = _2685.y;
    float _2689 = _2685.z;
    float _2690 = _2685.w;
    float _2783;
    float _2785;
    float _2787;
    float _2789;
    if (_729 > cbSceneParam._m0[78u].w)
    {
        float _2745 = isnan(_729) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _729 : min(cbSceneParam._m0[80u].w, _729));
        float _2746 = _2745 / _729;
        float _2757 = _2746 * _779;
        float _2758 = _780 * _2746;
        float _2759 = (-0.0) - _2758;
        float _2761 = _2746 * _781;
        float _2763 = (cbSceneParam._m0[77u].w * _2759) / _2745;
        float _2764 = _2763 + cbSceneParam._m0[79u].w;
        float _2765 = cbSceneParam._m0[79u].w - _2758;
        float _2771 = sqrt(((_2757 * _2757) + (_2758 * _2758)) + (_2761 * _2761));
        float _2774 = (1.0 - (cbSceneParam._m0[77u].w / _2745)) * _2771;
        float _2779 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2781 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2934;
        if (abs((_2759 - _2763) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2934 = ((((_2764 > 0.0) ? exp2(_2779 * _2764) : (2.0 - exp2(_2781 * _2764))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2774;
        }
        else
        {
            float _2894 = 1.0 / cbSceneParam._m0[80u].x;
            float _2895 = isnan(_2765) ? _2764 : (isnan(_2764) ? _2765 : max(_2764, _2765));
            float _2896 = isnan(_2765) ? _2764 : (isnan(_2764) ? _2765 : min(_2764, _2765));
            float _2905 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : min(_2895, 0.0));
            float _2906 = isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : min(_2896, 0.0));
            _2934 = ((abs(_2771 / _2759) * cbSceneParam._m0[80u].y) * ((((_2905 - _2906) * 2.0) - ((exp2(_2779 * (isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0)))) - exp2(_2779 * (isnan(0.0) ? _2896 : (isnan(_2896) ? 0.0 : max(_2896, 0.0))))) * _2894)) - ((exp2(_2781 * _2905) - exp2(_2781 * _2906)) * _2894))) + (_2774 * cbSceneParam._m0[80u].z);
        }
        vec4 _2936 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2670, _2671, 1.0), 0.0);
        float _2945 = exp2((_2934 * (-1.44269502162933349609375)) * (1.0 - _2936.w));
        float _2946 = log2(_2945);
        float _2962 = log2(_2690);
        _2783 = (exp2(_2962 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2946 * cbSceneParam._m0[78u].x)) * _2936.x) / cbSceneParam._m0[78u].x)) + _2687;
        _2785 = (exp2(_2962 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2946 * cbSceneParam._m0[78u].y)) * _2936.y) / cbSceneParam._m0[78u].y)) + _2688;
        _2787 = (exp2(_2962 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2946 * cbSceneParam._m0[78u].z)) * _2936.z) / cbSceneParam._m0[78u].z)) + _2689;
        _2789 = _2945 * _2690;
    }
    else
    {
        _2783 = _2687;
        _2785 = _2688;
        _2787 = _2689;
        _2789 = _2690;
    }
    float _2801 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2802 = _2801 == 3.0;
    float _2803 = log2(_2789);
    float _2810 = exp2(_2803 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4508 : (isnan(_4508) ? 1.0 : min(_4508, 1.0))) * (_2632 + ((isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0))) * _872))) + ((_2638 + ((isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0))) * _1682)) * cbPerFrame._m0[3u].x));
    float _2811 = exp2(_2803 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4519 : (isnan(_4519) ? 1.0 : min(_4519, 1.0))) * (_2634 + ((isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0))) * _872))) + ((_2640 + ((isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0))) * _1682)) * cbPerFrame._m0[3u].x));
    float _2812 = exp2(_2803 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4530 : (isnan(_4530) ? 1.0 : min(_4530, 1.0))) * (_2636 + ((isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0))) * _872))) + ((_2642 + ((isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0))) * _1682)) * cbPerFrame._m0[3u].x));
    float _2821 = (_2801 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2821 * (_2802 ? _2810 : (_2810 + (cbSceneParam._m0[72u].w * _2783)));
    SV_Target.y = _2821 * (_2802 ? _2811 : (_2811 + (cbSceneParam._m0[72u].w * _2785)));
    SV_Target.z = _2821 * (_2802 ? _2812 : (_2812 + (cbSceneParam._m0[72u].w * _2787)));
    SV_Target.w = cbInstanceData._m0[_2662].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2662].w;
}


