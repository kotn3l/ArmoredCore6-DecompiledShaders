#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_20;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1371;
float _3754;
float _3755;
float _3756;
float _3757;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _262 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _268 = _262.x * cbMtdParam._m0[10u].x;
    float _269 = _262.y * cbMtdParam._m0[10u].y;
    float _270 = _262.z * cbMtdParam._m0[10u].z;
    vec4 _288 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _338 = cbMtdParam._m0[18u].y * texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x;
    float _349 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].x * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].y * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _338)) + 1.0;
    float _3766 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _350 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
    float _357 = (_350 * ((_288.x * cbMtdParam._m0[11u].x) - _268)) + _268;
    float _358 = (_350 * ((_288.y * cbMtdParam._m0[11u].y) - _269)) + _269;
    float _359 = (_350 * ((_288.z * cbMtdParam._m0[11u].z) - _270)) + _270;
    vec4 _377 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _404 = ((cbMtdParam._m0[17u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _338)) + 1.0;
    float _3777 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _405 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
    float _412 = (_405 * ((_377.x * cbMtdParam._m0[12u].x) - _357)) + _357;
    float _413 = (_405 * ((_377.y * cbMtdParam._m0[12u].y) - _358)) + _358;
    float _414 = (_405 * ((_377.z * cbMtdParam._m0[12u].z) - _359)) + _359;
    vec4 _431 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _456 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[18u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[18u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _338)) + 1.0;
    float _3788 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _457 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
    vec4 _485 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _493 = ((((_457 * ((_431.x * cbMtdParam._m0[13u].x) - _412)) + _412) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _485.x;
    float _496 = ((((_457 * ((_431.y * cbMtdParam._m0[13u].y) - _413)) + _413) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _485.y;
    float _499 = ((((_457 * ((_431.z * cbMtdParam._m0[13u].z) - _414)) + _414) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _485.z;
    vec4 _519 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _548 = (TEXCOORD_5.x - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.z) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.w) + cbTextureTilingScale._m0[18u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].z + 1.0);
    float _3799 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _549 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
    float _556 = (_549 * ((_519.x * cbMtdParam._m0[14u].x) - _493)) + _493;
    float _557 = (_549 * ((_519.y * cbMtdParam._m0[14u].y) - _496)) + _496;
    float _558 = (_549 * ((_519.z * cbMtdParam._m0[14u].z) - _499)) + _499;
    vec4 _571 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _573 = _571.x;
    float _591 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _573) * _350) + _573;
    float _608 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _591) * _405) + _591;
    float _625 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _608) * _457) + _608;
    float _627 = _625 - (_625 * TEXCOORD_5.x);
    vec4 _640 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _662 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _664 = _662.x;
    float _665 = _662.y;
    float _668 = cbMtdParam._m0[17u].y * _662.z;
    vec4 _680 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _689 = (((cbMtdParam._m0[17u].x * _680.z) - _668) * _350) + _668;
    vec4 _702 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _714 = (((cbMtdParam._m0[16u].w * _702.z) - _689) * _405) + _689;
    vec4 _727 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _736 = (((cbMtdParam._m0[16u].z * _727.z) - _714) * _457) + _714;
    float _741 = ((cbMtdParam._m0[16u].x * TEXCOORD_5.x) * ((_640.z * cbMtdParam._m0[17u].z) - _736)) + _736;
    float _746 = ((_680.x - _664) * _350) + _664;
    float _747 = ((_680.y - _665) * _350) + _665;
    float _752 = ((_702.x - _746) * _405) + _746;
    float _753 = ((_702.y - _747) * _405) + _747;
    float _762 = ((((_727.x - _752) * _457) + _752) * 2.0) + (-1.0);
    float _763 = ((((_727.y - _753) * _457) + _753) * 2.0) + (-1.0);
    float _764 = dot(vec2(_762, _763), vec2(_762, _763));
    float _3810 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _769 = sqrt(1.0 - (isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0))));
    float _775 = ((((_640.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[15u].y) + _762;
    float _776 = ((((_640.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[15u].y) + _763;
    float _779 = fma(_769, _232 * NORMAL.x, fma(_776, _239 * TANGENT.x, (_225 * _217) * _775));
    float _782 = fma(_769, _232 * NORMAL.y, fma(_776, _239 * TANGENT.y, (_225 * _218) * _775));
    float _785 = fma(_769, _232 * NORMAL.z, fma(_776, _239 * TANGENT.z, (_225 * _219) * _775));
    float _789 = inversesqrt(dot(vec3(_779, _782, _785), vec3(_779, _782, _785)));
    float _790 = _789 * _779;
    float _791 = _789 * _782;
    float _792 = _789 * _785;
    float _3821 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _793 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
    float _3832 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _3843 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _3854 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _3865 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _797 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
    float _813 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _853 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _863 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _853);
    float _864 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _853);
    float _865 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _853);
    float _869 = inversesqrt(dot(vec3(_863, _864, _865), vec3(_863, _864, _865)));
    float _870 = _863 * _869;
    float _871 = _864 * _869;
    float _872 = _865 * _869;
    vec4 _877 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _879 = _877.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1051 = sqrt(((_863 * _863) + (_864 * _864)) + (_865 * _865));
        float _1057 = (cbMatDynParam._m0[5u].x * _1051) + cbMatDynParam._m0[5u].y;
        float _3876 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1062 = (cbMatDynParam._m0[5u].z * _1051) + cbMatDynParam._m0[5u].w;
        float _3887 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0))) - _1058)) + _1058) < ((_879 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _890 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _891 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _909 = fma(_792, cbSceneParam._m0[5u].z, fma(_791, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _790));
    float _912 = fma(_792, cbSceneParam._m0[6u].z, fma(_791, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _790));
    float _915 = fma(_792, cbSceneParam._m0[7u].z, fma(_791, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _790));
    uint _928 = uint(roundEven(NORMAL.w)) * 13u;
    uint _929 = _928 + 9u;
    uint _930 = _929 + uint(cbMatDynParam._m0[0u].w);
    float _936 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0)))) * cbInstanceData._m0[_930].x;
    float _937 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0)))) * cbInstanceData._m0[_930].y;
    float _938 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0)))) * cbInstanceData._m0[_930].z;
    float _3898 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
    float _939 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
    float _3909 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _940 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
    float _3920 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _941 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
    float _942 = 1.0 - _797;
    float _943 = _939 * _942;
    float _944 = _940 * _942;
    float _945 = _941 * _942;
    float _950 = (_939 + (-0.039999999105930328369140625)) * _797;
    float _951 = (_940 + (-0.039999999105930328369140625)) * _797;
    float _952 = (_941 + (-0.039999999105930328369140625)) * _797;
    float _953 = _950 + 0.039999999105930328369140625;
    float _955 = _951 + 0.039999999105930328369140625;
    float _956 = _952 + 0.039999999105930328369140625;
    vec4 _965 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _890, cbSceneParam._m0[86u].y * _891));
    float _968 = _965.x * TEXCOORD_5.w;
    float _969 = dot(vec3(_790, _791, _792), vec3(_870, _871, _872));
    float _972 = _969 * 2.0;
    float _976 = (_972 * _790) - _870;
    float _977 = (_972 * _791) - _871;
    float _978 = (_972 * _792) - _872;
    float _982 = abs(dot(vec3(_870, _871, _872), vec3(_790, _791, _792)));
    float _3931 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
    float _984 = sqrt(_793);
    float _997 = exp2((_984 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_984 * 3.0));
    float _1003 = (1.0 - _997) * ((_984 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1004 = _997 * _984;
    float _1032 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1036 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1040 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1370;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1095 = fma(_1040, cbModelParam._m0[26u].z, fma(_1036, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1032));
        float _1099 = fma(_1040, cbModelParam._m0[27u].z, fma(_1036, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1032));
        float _1103 = fma(_1040, cbModelParam._m0[28u].z, fma(_1036, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1032));
        float _1128 = _1032 + _790;
        float _1129 = _1036 + _791;
        float _1130 = _1040 + _792;
        float _1140 = fma(_1130, cbModelParam._m0[26u].z, fma(_1129, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1128)) - _1095;
        float _1141 = fma(_1130, cbModelParam._m0[27u].z, fma(_1129, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1128)) - _1099;
        float _1142 = fma(_1130, cbModelParam._m0[28u].z, fma(_1129, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1128)) - _1103;
        float _1146 = inversesqrt(dot(vec3(_1140, _1141, _1142), vec3(_1140, _1141, _1142)));
        float _1159 = ((_1146 * _1140) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1095 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1160 = ((_1146 * _1141) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1099 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1161 = ((_1146 * _1142) / cbModelParam._m0[34u].z) + ((((((_1103 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1164 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        vec4 _1171 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        vec4 _1178 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        vec4 _1185 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1159, _1160, _1161), 0.0);
        float _1198 = exp2((_1164.w + (-0.5)) * 20.0) * 2.0;
        float _1199 = _1198 * (_1164.x + (-0.5));
        float _1200 = _1198 * (_1164.y + (-0.5));
        float _1201 = _1198 * (_1164.z + (-0.5));
        float _1208 = exp2((_1171.w + (-0.5)) * 20.0) * 2.0;
        float _1209 = _1208 * (_1171.x + (-0.5));
        float _1210 = _1208 * (_1171.y + (-0.5));
        float _1211 = _1208 * (_1171.z + (-0.5));
        float _1218 = exp2((_1178.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1178.x + (-0.5));
        float _1220 = _1218 * (_1178.y + (-0.5));
        float _1221 = _1218 * (_1178.z + (-0.5));
        float _1228 = exp2((_1185.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1185.x + (-0.5));
        float _1230 = _1228 * (_1185.y + (-0.5));
        float _1231 = _1228 * (_1185.z + (-0.5));
        float _1232 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1233 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1234 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1235 = _1199 * 0.5;
        float _1236 = _1209 * 0.5;
        float _1237 = _1219 * 0.5;
        float _1238 = dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237));
        float _1243 = (_1238 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1238);
        float _1252 = (dot(vec3(_790, _791, _792), vec3(_1243 * _1235, _1243 * _1236, _1243 * _1237)) + 1.0) * 0.5;
        float _3957 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1262 = sqrt(((_1236 * _1236) + (_1235 * _1235)) + (_1237 * _1237)) / (_1232 + 9.9999997473787516355514526367188e-06);
        float _3968 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _3968 : (isnan(_3968) ? 1.0 : min(_3968, 1.0));
        float _1264 = _1263 * 2.0;
        float _1268 = (1.0 - _1263) / (_1263 + 1.0);
        float _3979 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _3979 : (isnan(_3979) ? 1.0 : min(_3979, 1.0));
        float _1278 = ((((1.0 - _1269) * (_1264 + 2.0)) * exp2(log2(isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * (_1264 + 1.0))) + _1269) * _1232;
        float _1279 = _1200 * 0.5;
        float _1280 = _1210 * 0.5;
        float _1281 = _1220 * 0.5;
        float _1282 = dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281));
        float _1287 = (_1282 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1282);
        float _1295 = (dot(vec3(_790, _791, _792), vec3(_1287 * _1279, _1287 * _1280, _1287 * _1281)) + 1.0) * 0.5;
        float _3990 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1304 = sqrt(((_1280 * _1280) + (_1279 * _1279)) + (_1281 * _1281)) / (_1233 + 9.9999997473787516355514526367188e-06);
        float _4001 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0));
        float _1306 = _1305 * 2.0;
        float _1310 = (1.0 - _1305) / (_1305 + 1.0);
        float _4012 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0));
        float _1320 = ((((1.0 - _1311) * (_1306 + 2.0)) * exp2(log2(isnan(1.0) ? _3990 : (isnan(_3990) ? 1.0 : min(_3990, 1.0))) * (_1306 + 1.0))) + _1311) * _1233;
        float _1321 = _1201 * 0.5;
        float _1322 = _1211 * 0.5;
        float _1323 = _1221 * 0.5;
        float _1324 = dot(vec3(_1321, _1322, _1323), vec3(_1321, _1322, _1323));
        float _1329 = (_1324 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1324);
        float _1337 = (dot(vec3(_790, _791, _792), vec3(_1329 * _1321, _1329 * _1322, _1329 * _1323)) + 1.0) * 0.5;
        float _4023 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1346 = sqrt(((_1322 * _1322) + (_1321 * _1321)) + (_1323 * _1323)) / (_1234 + 9.9999997473787516355514526367188e-06);
        float _4034 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
        float _1348 = _1347 * 2.0;
        float _1352 = (1.0 - _1347) / (_1347 + 1.0);
        float _4045 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
        float _1362 = ((((1.0 - _1353) * (_1348 + 2.0)) * exp2(log2(isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * (_1348 + 1.0))) + _1353) * _1234;
        _1370 = _1201;
        _1372 = _1200;
        _1373 = _1199;
        _1374 = _1211;
        _1375 = _1210;
        _1376 = _1209;
        _1377 = _1221;
        _1378 = _1220;
        _1379 = _1219;
        _1380 = _1234;
        _1381 = _1233;
        _1382 = _1232;
        _1383 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)));
        _1384 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)));
        _1385 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)));
    }
    else
    {
        _1370 = _1371;
        _1372 = _1371;
        _1373 = _1371;
        _1374 = _1371;
        _1375 = _1371;
        _1376 = _1371;
        _1377 = _1371;
        _1378 = _1371;
        _1379 = _1371;
        _1380 = _1371;
        _1381 = _1371;
        _1382 = _1371;
        _1383 = 0.0;
        _1384 = 0.0;
        _1385 = 0.0;
    }
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    float _1694;
    float _1695;
    float _1696;
    float _1697;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1414 = fma(_1040, cbModelParam._m0[30u].z, fma(_1036, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1032));
        float _1418 = fma(_1040, cbModelParam._m0[31u].z, fma(_1036, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1032));
        float _1422 = fma(_1040, cbModelParam._m0[32u].z, fma(_1036, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1032));
        float _1445 = _1032 + _790;
        float _1446 = _1036 + _791;
        float _1447 = _1040 + _792;
        float _1457 = fma(_1447, cbModelParam._m0[30u].z, fma(_1446, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1445)) - _1414;
        float _1458 = fma(_1447, cbModelParam._m0[31u].z, fma(_1446, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1445)) - _1418;
        float _1459 = fma(_1447, cbModelParam._m0[32u].z, fma(_1446, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1445)) - _1422;
        float _1463 = inversesqrt(dot(vec3(_1457, _1458, _1459), vec3(_1457, _1458, _1459)));
        float _1476 = ((_1463 * _1457) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1414 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1477 = ((_1463 * _1458) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1418 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1478 = ((_1463 * _1459) / cbModelParam._m0[35u].z) + ((((((_1422 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1480 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1476, _1477, _1478), 0.0);
        vec4 _1487 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1476, _1477, _1478), 0.0);
        vec4 _1494 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1476, _1477, _1478), 0.0);
        vec4 _1501 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1476, _1477, _1478), 0.0);
        float _1513 = exp2((_1480.w + (-0.5)) * 20.0) * 2.0;
        float _1514 = _1513 * (_1480.x + (-0.5));
        float _1515 = _1513 * (_1480.y + (-0.5));
        float _1516 = _1513 * (_1480.z + (-0.5));
        float _1523 = exp2((_1487.w + (-0.5)) * 20.0) * 2.0;
        float _1524 = _1523 * (_1487.x + (-0.5));
        float _1525 = _1523 * (_1487.y + (-0.5));
        float _1526 = _1523 * (_1487.z + (-0.5));
        float _1533 = exp2((_1494.w + (-0.5)) * 20.0) * 2.0;
        float _1534 = _1533 * (_1494.x + (-0.5));
        float _1535 = _1533 * (_1494.y + (-0.5));
        float _1536 = _1533 * (_1494.z + (-0.5));
        float _1543 = exp2((_1501.w + (-0.5)) * 20.0) * 2.0;
        float _1544 = _1543 * (_1501.x + (-0.5));
        float _1545 = _1543 * (_1501.y + (-0.5));
        float _1546 = _1543 * (_1501.z + (-0.5));
        float _1547 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1548 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1549 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1550 = _1514 * 0.5;
        float _1551 = _1524 * 0.5;
        float _1552 = _1534 * 0.5;
        float _1553 = dot(vec3(_1550, _1551, _1552), vec3(_1550, _1551, _1552));
        float _1558 = (_1553 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1553);
        float _1566 = (dot(vec3(_790, _791, _792), vec3(_1558 * _1550, _1558 * _1551, _1558 * _1552)) + 1.0) * 0.5;
        float _4086 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        float _1575 = sqrt(((_1551 * _1551) + (_1550 * _1550)) + (_1552 * _1552)) / (_1547 + 9.9999997473787516355514526367188e-06);
        float _4097 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1576 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _1577 = _1576 * 2.0;
        float _1581 = (1.0 - _1576) / (_1576 + 1.0);
        float _4108 = isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0));
        float _1582 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
        float _1591 = ((((1.0 - _1582) * (_1577 + 2.0)) * exp2(log2(isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0))) * (_1577 + 1.0))) + _1582) * _1547;
        float _1592 = _1515 * 0.5;
        float _1593 = _1525 * 0.5;
        float _1594 = _1535 * 0.5;
        float _1595 = dot(vec3(_1592, _1593, _1594), vec3(_1592, _1593, _1594));
        float _1600 = (_1595 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1595);
        float _1608 = (dot(vec3(_790, _791, _792), vec3(_1600 * _1592, _1600 * _1593, _1600 * _1594)) + 1.0) * 0.5;
        float _4119 = isnan(0.0) ? _1608 : (isnan(_1608) ? 0.0 : max(_1608, 0.0));
        float _1617 = sqrt(((_1593 * _1593) + (_1592 * _1592)) + (_1594 * _1594)) / (_1548 + 9.9999997473787516355514526367188e-06);
        float _4130 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1618 = isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0));
        float _1619 = _1618 * 2.0;
        float _1623 = (1.0 - _1618) / (_1618 + 1.0);
        float _4141 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
        float _1624 = isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0));
        float _1633 = ((((1.0 - _1624) * (_1619 + 2.0)) * exp2(log2(isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * (_1619 + 1.0))) + _1624) * _1548;
        float _1634 = _1516 * 0.5;
        float _1635 = _1526 * 0.5;
        float _1636 = _1536 * 0.5;
        float _1637 = dot(vec3(_1634, _1635, _1636), vec3(_1634, _1635, _1636));
        float _1642 = (_1637 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1637);
        float _1650 = (dot(vec3(_790, _791, _792), vec3(_1642 * _1634, _1642 * _1635, _1642 * _1636)) + 1.0) * 0.5;
        float _4152 = isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0));
        float _1659 = sqrt(((_1635 * _1635) + (_1634 * _1634)) + (_1636 * _1636)) / (_1549 + 9.9999997473787516355514526367188e-06);
        float _4163 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1660 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
        float _1661 = _1660 * 2.0;
        float _1665 = (1.0 - _1660) / (_1660 + 1.0);
        float _4174 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
        float _1666 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
        float _1675 = ((((1.0 - _1666) * (_1661 + 2.0)) * exp2(log2(isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_1661 + 1.0))) + _1666) * _1549;
        _1683 = _1516;
        _1684 = _1515;
        _1685 = _1514;
        _1686 = _1526;
        _1687 = _1525;
        _1688 = _1524;
        _1689 = _1536;
        _1690 = _1535;
        _1691 = _1534;
        _1692 = _1549;
        _1693 = _1548;
        _1694 = _1547;
        _1695 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0)));
        _1696 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0)));
        _1697 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0)));
    }
    else
    {
        _1683 = _1371;
        _1684 = _1371;
        _1685 = _1371;
        _1686 = _1371;
        _1687 = _1371;
        _1688 = _1371;
        _1689 = _1371;
        _1690 = _1371;
        _1691 = _1371;
        _1692 = _1371;
        _1693 = _1371;
        _1694 = _1371;
        _1695 = 0.0;
        _1696 = 0.0;
        _1697 = 0.0;
    }
    float _1707 = (cbModelParam._m0[1u].x * (_1695 - _1383)) + _1383;
    float _1708 = (cbModelParam._m0[1u].x * (_1696 - _1384)) + _1384;
    float _1709 = (cbModelParam._m0[1u].x * (_1697 - _1385)) + _1385;
    float _1730 = fma(_1709, cbSceneParam._m0[89u].z, fma(_1708, cbSceneParam._m0[89u].y, _1707 * cbSceneParam._m0[89u].x));
    float _1733 = fma(_1709, cbSceneParam._m0[90u].z, fma(_1708, cbSceneParam._m0[90u].y, _1707 * cbSceneParam._m0[90u].x));
    float _1736 = fma(_1709, cbSceneParam._m0[91u].z, fma(_1708, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1707));
    float _1751 = _976 * 0.5;
    float _1752 = _977 * 0.5;
    float _1753 = _978 * 0.5;
    float _1754 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1685, _1688, _1691, _1694));
    float _1757 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1684, _1687, _1690, _1693));
    float _1760 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1683, _1686, _1689, _1692));
    float _1794;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1767 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1370, _1374, _1377, _1380));
        float _1771 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1372, _1375, _1378, _1381));
        float _1775 = dot(vec4(_1751, _1752, _1753, 1.0), vec4(_1373, _1376, _1379, _1382));
        float _1782 = dot(vec4(cbModelParam._m0[39u]), vec4(_1751, _1752, _1753, 1.0));
        _1794 = dot(vec3(isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0)), isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0)), isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1782) ? 0.0 : (isnan(0.0) ? _1782 : max(0.0, _1782))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1794 = 1.0;
    }
    float _1805;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1796 = dot(vec4(cbModelParam._m0[40u]), vec4(_1751, _1752, _1753, 1.0));
        _1805 = dot(vec3(isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0)), isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0)), isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1796) ? 0.0 : (isnan(0.0) ? _1796 : max(0.0, _1796))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1805 = 1.0;
    }
    float _1809 = (_1805 * cbModelParam._m0[1u].x) + (_1794 * (1.0 - cbModelParam._m0[1u].x));
    float _1819 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _793);
    float _1820 = isnan(_1819) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1819 : min(cbModelParam._m0[25u].z, _1819));
    float _1900;
    float _1902;
    float _1904;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1867 = fma(_1040, cbModelParam._m0[13u].z, fma(_1036, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1032)) + cbModelParam._m0[13u].w;
        float _1871 = fma(_1040, cbModelParam._m0[14u].z, fma(_1036, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1032)) + cbModelParam._m0[14u].w;
        float _1875 = fma(_1040, cbModelParam._m0[15u].z, fma(_1036, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1032)) + cbModelParam._m0[15u].w;
        float _1878 = fma(_978, cbModelParam._m0[13u].z, fma(_977, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _976));
        float _1881 = fma(_978, cbModelParam._m0[14u].z, fma(_977, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _976));
        float _1884 = fma(_978, cbModelParam._m0[15u].z, fma(_977, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _976));
        float _1912;
        if (_1878 > 0.0)
        {
            _1912 = abs((1.0 - _1867) / _1878);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1878 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1867 + 1.0) / _1878);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1912 = frontier_phi_17_15_ladder;
        }
        float _2116;
        if (_1881 > 0.0)
        {
            _2116 = abs((1.0 - _1871) / _1881);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1881 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1871 + 1.0) / _1881);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2116 = frontier_phi_26_22_ladder;
        }
        float _2370;
        if (_1884 > 0.0)
        {
            _2370 = abs((1.0 - _1875) / _1884);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1884 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1875 + 1.0) / _1884);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2370 = frontier_phi_38_33_ladder;
        }
        float _2372 = isnan(_2116) ? _1912 : (isnan(_1912) ? _2116 : min(_1912, _2116));
        float _2373 = isnan(_2370) ? _2372 : (isnan(_2372) ? _2370 : min(_2372, _2370));
        float _2377 = (_2373 * _1878) + _1867;
        float _2378 = (_2373 * _1881) + _1871;
        float _2379 = (_2373 * _1884) + _1875;
        float _2380 = _2373 * 9.9999997473787516355514526367188e-05;
        float _2382 = (-1.0) - _2380;
        float _2384 = _2380 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2379 > _2384) || ((_2379 < _2382) || ((_2378 > _2384) || ((_2378 < _2382) || ((_2377 < _2382) || (_2377 > _2384))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2507 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2379, cbModelParam._m0[9u].z, fma(_2378, cbModelParam._m0[9u].y, _2377 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2379, cbModelParam._m0[10u].z, fma(_2378, cbModelParam._m0[10u].y, _2377 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2379, cbModelParam._m0[11u].z, fma(_2378, cbModelParam._m0[11u].y, _2377 * cbModelParam._m0[11u].x))), _1820);
            frontier_phi_16_38_ladder = _2507.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2507.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2507.x * cbModelParam._m0[1u].y;
        }
        _1900 = frontier_phi_16_38_ladder_2;
        _1902 = frontier_phi_16_38_ladder_1;
        _1904 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1888 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_976, _977, _978), _1820);
        _1900 = _1888.x * cbModelParam._m0[1u].y;
        _1902 = _1888.y * cbModelParam._m0[1u].y;
        _1904 = _1888.z * cbModelParam._m0[1u].y;
    }
    float _1908 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _793);
    float _1909 = isnan(_1908) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1908 : min(cbModelParam._m0[25u].w, _1908));
    float _2000;
    float _2002;
    float _2004;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1964 = fma(_1040, cbModelParam._m0[21u].z, fma(_1036, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1032)) + cbModelParam._m0[21u].w;
        float _1968 = fma(_1040, cbModelParam._m0[22u].z, fma(_1036, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1032)) + cbModelParam._m0[22u].w;
        float _1972 = fma(_1040, cbModelParam._m0[23u].z, fma(_1036, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1032)) + cbModelParam._m0[23u].w;
        float _1975 = fma(_978, cbModelParam._m0[21u].z, fma(_977, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _976));
        float _1978 = fma(_978, cbModelParam._m0[22u].z, fma(_977, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _976));
        float _1981 = fma(_978, cbModelParam._m0[23u].z, fma(_977, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _976));
        float _2121;
        if (_1975 > 0.0)
        {
            _2121 = abs((1.0 - _1964) / _1975);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1975 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1964 + 1.0) / _1975);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2121 = frontier_phi_28_24_ladder;
        }
        float _2397;
        if (_1978 > 0.0)
        {
            _2397 = abs((1.0 - _1968) / _1978);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1978 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1968 + 1.0) / _1978);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2397 = frontier_phi_40_35_ladder;
        }
        float _2610;
        if (_1981 > 0.0)
        {
            _2610 = abs((1.0 - _1972) / _1981);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1981 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1972 + 1.0) / _1981);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2610 = frontier_phi_49_46_ladder;
        }
        float _2612 = isnan(_2397) ? _2121 : (isnan(_2121) ? _2397 : min(_2121, _2397));
        float _2613 = isnan(_2610) ? _2612 : (isnan(_2612) ? _2610 : min(_2612, _2610));
        float _2617 = (_2613 * _1975) + _1964;
        float _2618 = (_2613 * _1978) + _1968;
        float _2619 = (_2613 * _1981) + _1972;
        float _2620 = _2613 * 9.9999997473787516355514526367188e-05;
        float _2621 = (-1.0) - _2620;
        float _2623 = _2620 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2619 > _2623) || ((_2619 < _2621) || ((_2618 > _2623) || ((_2618 < _2621) || ((_2617 < _2621) || (_2617 > _2623))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2818 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2619, cbModelParam._m0[17u].z, fma(_2618, cbModelParam._m0[17u].y, _2617 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2619, cbModelParam._m0[18u].z, fma(_2618, cbModelParam._m0[18u].y, _2617 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2619, cbModelParam._m0[19u].z, fma(_2618, cbModelParam._m0[19u].y, _2617 * cbModelParam._m0[19u].x))), _1909);
            frontier_phi_25_49_ladder = _2818.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2818.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2818.x * cbModelParam._m0[1u].z;
        }
        _2000 = frontier_phi_25_49_ladder_2;
        _2002 = frontier_phi_25_49_ladder_1;
        _2004 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1984 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_976, _977, _978), _1909);
        _2000 = _1984.x * cbModelParam._m0[1u].z;
        _2002 = _1984.y * cbModelParam._m0[1u].z;
        _2004 = _1984.z * cbModelParam._m0[1u].z;
    }
    float _2017 = (((_1003 * _953) + _1004) * _968) * ((cbModelParam._m0[1u].w * (_2000 - _1900)) + _1900);
    float _2019 = (((_1003 * _955) + _1004) * _968) * ((cbModelParam._m0[1u].w * (_2002 - _1902)) + _1902);
    float _2021 = (((_1003 * _956) + _1004) * _968) * ((cbModelParam._m0[1u].w * (_2004 - _1904)) + _1904);
    float _2024 = fma(_2021, cbSceneParam._m0[89u].z, fma(_2019, cbSceneParam._m0[89u].y, _2017 * cbSceneParam._m0[89u].x));
    float _2027 = fma(_2021, cbSceneParam._m0[90u].z, fma(_2019, cbSceneParam._m0[90u].y, _2017 * cbSceneParam._m0[90u].x));
    float _2030 = fma(_2021, cbSceneParam._m0[91u].z, fma(_2019, cbSceneParam._m0[91u].y, _2017 * cbSceneParam._m0[91u].x));
    uvec4 _2040 = floatBitsToUint(cbInstanceData._m0[_928 + 5u]);
    uint _2042 = _2040.x * 14u;
    uint _2043 = _2042 + 13u;
    float _2050 = _968 + (-1.0);
    float _2055 = (cbLight._m0[_2043].x * _2050) + 1.0;
    float _2056 = (cbLight._m0[_2043].y * _2050) + 1.0;
    float _2057 = (cbLight._m0[_2043].z * _2050) + 1.0;
    float _2058 = (cbLight._m0[_2043].w * _2050) + 1.0;
    uint _2059 = _2042 + 5u;
    float _2065 = isnan(1.0) ? _2056 : (isnan(_2056) ? 1.0 : min(_2056, 1.0));
    uint _2069 = _2042 + 4u;
    float _2075 = isnan(1.0) ? _2055 : (isnan(_2055) ? 1.0 : min(_2055, 1.0));
    uint _2079 = _2042 | 1u;
    float _2090 = dot(vec3(cbLight._m0[_2042].xyz), vec3(_790, _791, _792));
    float _2093 = dot(vec3(cbLight._m0[_2079].xyz), vec3(_790, _791, _792));
    float _4310 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _4321 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _2098 = (isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * 0.3183098733425140380859375;
    float _2100 = (isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * 0.3183098733425140380859375;
    float _2107 = ((cbLight._m0[_2059].x * _2065) * _2100) + ((cbLight._m0[_2069].x * _2075) * _2098);
    float _2108 = ((_2065 * cbLight._m0[_2059].y) * _2100) + ((_2075 * cbLight._m0[_2069].y) * _2098);
    float _2109 = ((_2065 * cbLight._m0[_2059].z) * _2100) + ((_2075 * cbLight._m0[_2069].z) * _2098);
    uvec4 _2113 = floatBitsToUint(cbLight._m0[_2042 + 12u]);
    bool _2115 = _2113.x == 0u;
    float _2126;
    float _2128;
    float _2130;
    if (_2115)
    {
        _2126 = _2107;
        _2128 = _2108;
        _2130 = _2109;
    }
    else
    {
        uint _2134 = _2042 + 6u;
        float _2150 = (dot(vec3(cbLight._m0[_2042 + 2u].xyz), vec3(_790, _791, _792)) * 0.5) + 0.5;
        float _2151 = _2150 * _2150;
        float _4332 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
        float _2152 = isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0));
        float _2153 = isnan(1.0) ? _2057 : (isnan(_2057) ? 1.0 : min(_2057, 1.0));
        _2126 = (((cbLight._m0[_2134].x * 0.3183098733425140380859375) * _2152) * _2153) + _2107;
        _2128 = (((cbLight._m0[_2134].y * 0.3183098733425140380859375) * _2152) * _2153) + _2108;
        _2130 = (((cbLight._m0[_2134].z * 0.3183098733425140380859375) * _2152) * _2153) + _2109;
    }
    bool _2133 = _2113.y == 0u;
    float _2171;
    float _2173;
    float _2175;
    if (_2133)
    {
        _2171 = _2126;
        _2173 = _2128;
        _2175 = _2130;
    }
    else
    {
        uint _2341 = _2042 + 7u;
        float _2357 = (dot(vec3(cbLight._m0[_2042 + 3u].xyz), vec3(_790, _791, _792)) * 0.5) + 0.5;
        float _2358 = _2357 * _2357;
        float _4348 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
        float _2359 = isnan(1.0) ? _4348 : (isnan(_4348) ? 1.0 : min(_4348, 1.0));
        float _2360 = isnan(1.0) ? _2058 : (isnan(_2058) ? 1.0 : min(_2058, 1.0));
        _2171 = (((cbLight._m0[_2341].x * 0.3183098733425140380859375) * _2359) * _2360) + _2126;
        _2173 = (((cbLight._m0[_2341].y * 0.3183098733425140380859375) * _2359) * _2360) + _2128;
        _2175 = (((cbLight._m0[_2341].z * 0.3183098733425140380859375) * _2359) * _2360) + _2130;
    }
    uint _2178 = _2042 + 8u;
    float _2191 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2042].w)) * _793) * 0.949999988079071044921875);
    float _2192 = _2191 * _2191;
    float _2193 = cbLight._m0[_2042].x + _870;
    float _2194 = cbLight._m0[_2042].y + _871;
    float _2195 = cbLight._m0[_2042].z + _872;
    float _2199 = inversesqrt(dot(vec3(_2193, _2194, _2195), vec3(_2193, _2194, _2195)));
    float _2200 = _2199 * _2193;
    float _2201 = _2199 * _2194;
    float _2202 = _2199 * _2195;
    float _2203 = dot(vec3(_790, _791, _792), vec3(cbLight._m0[_2042].xyz));
    float _4364 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
    float _2206 = isnan(1.0) ? _4364 : (isnan(_4364) ? 1.0 : min(_4364, 1.0));
    float _4375 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
    float _2207 = isnan(1.0) ? _4375 : (isnan(_4375) ? 1.0 : min(_4375, 1.0));
    float _2208 = dot(vec3(_790, _791, _792), vec3(_2200, _2201, _2202));
    float _4386 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2211 = isnan(1.0) ? _4386 : (isnan(_4386) ? 1.0 : min(_4386, 1.0));
    float _2212 = dot(vec3(cbLight._m0[_2042].xyz), vec3(_2200, _2201, _2202));
    float _4397 = isnan(0.0) ? _2212 : (isnan(_2212) ? 0.0 : max(_2212, 0.0));
    float _2216 = _2192 * _2192;
    float _2220 = ((_2211 * _2211) * (_2216 + (-1.0))) + 1.0;
    float _2228 = exp2(log2(1.0 - (isnan(1.0) ? _4397 : (isnan(_4397) ? 1.0 : min(_4397, 1.0)))) * 5.0);
    float _2229 = 0.959999978542327880859375 - _950;
    float _2231 = 0.959999978542327880859375 - _951;
    float _2232 = 0.959999978542327880859375 - _952;
    float _2239 = 1.0 - _2192;
    float _2250 = (0.5 / (((_2207 * ((_2206 * _2239) + _2192)) + 9.9999999392252902907785028219223e-09) + (((_2207 * _2239) + _2192) * _2206))) * _2206;
    float _4408 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
    float _2252 = (isnan(1.0) ? _4408 : (isnan(_4408) ? 1.0 : min(_4408, 1.0))) * (_2216 / ((_2220 * _2220) * 3.141590118408203125));
    uint _2263 = _2042 + 9u;
    float _2274 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2079].w)) * _793) * 0.949999988079071044921875);
    float _2275 = _2274 * _2274;
    float _2276 = cbLight._m0[_2079].x + _870;
    float _2277 = cbLight._m0[_2079].y + _871;
    float _2278 = cbLight._m0[_2079].z + _872;
    float _2282 = inversesqrt(dot(vec3(_2276, _2277, _2278), vec3(_2276, _2277, _2278)));
    float _2283 = _2282 * _2276;
    float _2284 = _2282 * _2277;
    float _2285 = _2282 * _2278;
    float _2286 = dot(vec3(_790, _791, _792), vec3(cbLight._m0[_2079].xyz));
    float _4419 = isnan(0.0) ? _2286 : (isnan(_2286) ? 0.0 : max(_2286, 0.0));
    float _2289 = isnan(1.0) ? _4419 : (isnan(_4419) ? 1.0 : min(_4419, 1.0));
    float _2290 = dot(vec3(_790, _791, _792), vec3(_2283, _2284, _2285));
    float _4430 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
    float _2293 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
    float _2294 = dot(vec3(cbLight._m0[_2079].xyz), vec3(_2283, _2284, _2285));
    float _4441 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
    float _2298 = _2275 * _2275;
    float _2302 = ((_2293 * _2293) * (_2298 + (-1.0))) + 1.0;
    float _2309 = exp2(log2(1.0 - (isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0)))) * 5.0);
    float _2316 = 1.0 - _2275;
    float _2326 = (0.5 / (((_2207 * ((_2289 * _2316) + _2275)) + 9.9999999392252902907785028219223e-09) + (((_2207 * _2316) + _2275) * _2289))) * _2289;
    float _4452 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
    float _2328 = (isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0))) * (_2298 / ((_2302 * _2302) * 3.141590118408203125));
    float _2338 = (((((_2309 * _2229) + _953) * cbLight._m0[_2263].x) * _2328) * _2065) + (((((_2228 * _2229) + _953) * cbLight._m0[_2178].x) * _2252) * _2075);
    float _2339 = (((((_2309 * _2231) + _955) * cbLight._m0[_2263].y) * _2328) * _2065) + (((((_2228 * _2231) + _955) * cbLight._m0[_2178].y) * _2252) * _2075);
    float _2340 = (((((_2309 * _2232) + _956) * cbLight._m0[_2263].z) * _2328) * _2065) + (((((_2228 * _2232) + _956) * cbLight._m0[_2178].z) * _2252) * _2075);
    float _2402;
    float _2404;
    float _2406;
    if (_2115)
    {
        _2402 = _2338;
        _2404 = _2339;
        _2406 = _2340;
    }
    else
    {
        uint _2408 = _2042 + 2u;
        uint _2412 = _2042 + 10u;
        float _2426 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2408].w)) * _793) * 0.949999988079071044921875);
        float _2427 = _2426 * _2426;
        float _2428 = cbLight._m0[_2408].x + _870;
        float _2429 = cbLight._m0[_2408].y + _871;
        float _2430 = cbLight._m0[_2408].z + _872;
        float _2434 = inversesqrt(dot(vec3(_2428, _2429, _2430), vec3(_2428, _2429, _2430)));
        float _2435 = _2434 * _2428;
        float _2436 = _2434 * _2429;
        float _2437 = _2434 * _2430;
        float _2438 = dot(vec3(_790, _791, _792), vec3(cbLight._m0[_2408].xyz));
        float _4463 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
        float _2441 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
        float _2442 = dot(vec3(_790, _791, _792), vec3(_2435, _2436, _2437));
        float _4474 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
        float _2445 = isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0));
        float _2446 = dot(vec3(cbLight._m0[_2408].xyz), vec3(_2435, _2436, _2437));
        float _4485 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0));
        float _2450 = _2427 * _2427;
        float _2454 = ((_2445 * _2445) * (_2450 + (-1.0))) + 1.0;
        float _2461 = exp2(log2(1.0 - (isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0)))) * 5.0);
        float _2468 = 1.0 - _2427;
        float _2478 = (0.5 / (((_2207 * ((_2441 * _2468) + _2427)) + 9.9999999392252902907785028219223e-09) + (((_2207 * _2468) + _2427) * _2441))) * _2441;
        float _4496 = isnan(0.0) ? _2478 : (isnan(_2478) ? 0.0 : max(_2478, 0.0));
        float _2480 = (isnan(1.0) ? _4496 : (isnan(_4496) ? 1.0 : min(_4496, 1.0))) * (_2450 / ((_2454 * _2454) * 3.141590118408203125));
        float _2481 = isnan(1.0) ? _2057 : (isnan(_2057) ? 1.0 : min(_2057, 1.0));
        _2402 = (((((_2461 * _2229) + _953) * cbLight._m0[_2412].x) * _2480) * _2481) + _2338;
        _2404 = (((((_2461 * _2231) + _955) * cbLight._m0[_2412].y) * _2480) * _2481) + _2339;
        _2406 = (((((_2461 * _2232) + _956) * cbLight._m0[_2412].z) * _2480) * _2481) + _2340;
    }
    float _2516;
    float _2518;
    float _2520;
    if (_2133)
    {
        _2516 = _2402;
        _2518 = _2404;
        _2520 = _2406;
    }
    else
    {
        uint _2527 = _2042 + 3u;
        uint _2531 = _2042 + 11u;
        float _2545 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2527].w)) * _793) * 0.949999988079071044921875);
        float _2546 = _2545 * _2545;
        float _2547 = cbLight._m0[_2527].x + _870;
        float _2548 = cbLight._m0[_2527].y + _871;
        float _2549 = cbLight._m0[_2527].z + _872;
        float _2553 = inversesqrt(dot(vec3(_2547, _2548, _2549), vec3(_2547, _2548, _2549)));
        float _2554 = _2553 * _2547;
        float _2555 = _2553 * _2548;
        float _2556 = _2553 * _2549;
        float _2557 = dot(vec3(_790, _791, _792), vec3(cbLight._m0[_2527].xyz));
        float _4512 = isnan(0.0) ? _2557 : (isnan(_2557) ? 0.0 : max(_2557, 0.0));
        float _2560 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
        float _2561 = dot(vec3(_790, _791, _792), vec3(_2554, _2555, _2556));
        float _4523 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
        float _2564 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
        float _2565 = dot(vec3(cbLight._m0[_2527].xyz), vec3(_2554, _2555, _2556));
        float _4534 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
        float _2569 = _2546 * _2546;
        float _2573 = ((_2564 * _2564) * (_2569 + (-1.0))) + 1.0;
        float _2580 = exp2(log2(1.0 - (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0)))) * 5.0);
        float _2587 = 1.0 - _2546;
        float _2597 = (0.5 / (((_2207 * ((_2560 * _2587) + _2546)) + 9.9999999392252902907785028219223e-09) + (((_2207 * _2587) + _2546) * _2560))) * _2560;
        float _4545 = isnan(0.0) ? _2597 : (isnan(_2597) ? 0.0 : max(_2597, 0.0));
        float _2599 = (isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0))) * (_2569 / ((_2573 * _2573) * 3.141590118408203125));
        float _2600 = isnan(1.0) ? _2058 : (isnan(_2058) ? 1.0 : min(_2058, 1.0));
        _2516 = (((((_2580 * _2229) + _953) * cbLight._m0[_2531].x) * _2599) * _2600) + _2402;
        _2518 = (((((_2580 * _2231) + _955) * cbLight._m0[_2531].y) * _2599) * _2600) + _2404;
        _2520 = (((((_2580 * _2232) + _956) * cbLight._m0[_2531].z) * _2599) * _2600) + _2406;
    }
    float _2735;
    float _2737;
    float _2739;
    float _2741;
    float _2743;
    float _2745;
    if (_2040.y == 0u)
    {
        float _2675 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2676 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2675;
        float _2677 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2675;
        float _2678 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2675;
        uvec4 _2690 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2691 = _2690.x;
        uint _2702 = uint((float(_2690.y) * floor(float(uint(cbSceneParam._m0[85u].y * _891) / _2691))) + floor(float(uint(cbSceneParam._m0[85u].x * _890) / _2691)));
        float _2712 = (log2(_2678 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2713 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
        uint _2716 = uint(isnan(14.0) ? _2713 : (isnan(_2713) ? 14.0 : min(_2713, 14.0)));
        uvec4 _2721 = texelFetch(g_lightClusterGridBuffer, int(((_2716 << 2u) + (_2702 << 6u)) >> 2u));
        uint _2722 = _2721.x;
        uint _2723 = _2690.z;
        float _2823;
        float _2825;
        float _2827;
        float _2829;
        float _2831;
        float _2833;
        if (((((1u << ((_2723 >> 4u) & 15u)) + 4294967295u) & _2722) == 0u) || ((_2723 & 240u) == 0u))
        {
            _2823 = 0.0;
            _2825 = 0.0;
            _2827 = 0.0;
            _2829 = 0.0;
            _2831 = 0.0;
            _2833 = 0.0;
        }
        else
        {
            float _2824;
            float _2826;
            float _2828;
            float _2830;
            float _2832;
            float _2834;
            float _2976 = 0.0;
            float _2977 = 0.0;
            float _2978 = 0.0;
            float _2979 = 0.0;
            float _2980 = 0.0;
            float _2981 = 0.0;
            uint _2982 = 0u;
            uint _2991;
            bool _2992;
            for (;;)
            {
                _2991 = texelFetch(g_lightClassification, int((((_2716 << 5u) + (_2702 << 9u)) + (_2982 << 2u)) >> 2u)).x;
                _2992 = _2991 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2992)
                {
                    frontier_phi_66_pred = _2976;
                    frontier_phi_66_pred_1 = _2981;
                    frontier_phi_66_pred_2 = _2980;
                    frontier_phi_66_pred_3 = _2979;
                    frontier_phi_66_pred_4 = _2978;
                    frontier_phi_66_pred_5 = _2977;
                }
                else
                {
                    float _3121;
                    float _3122;
                    float _3123;
                    float _3124;
                    float _3125;
                    float _3126;
                    uint _3127;
                    _3121 = _2976;
                    _3122 = _2977;
                    _3123 = _2978;
                    _3124 = _2979;
                    _3125 = _2980;
                    _3126 = _2981;
                    _3127 = _2991;
                    float _3048;
                    float _3049;
                    float _3050;
                    float _3051;
                    float _3052;
                    float _3053;
                    for (;;)
                    {
                        uint _3131 = uint(findLSB(_3127)) + (_2982 << 5u);
                        uint _3128 = (_3127 + 4294967295u) & _3127;
                        uint _3133 = _3131 * 48u;
                        vec4 _3147 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3133)).x, texelFetch(g_PointLightRenderingBuffer, int(_3133 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3133 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3133 + 3u)).x));
                        uint _3153 = (_3131 * 48u) + 4u;
                        vec4 _3166 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3153)).x, texelFetch(g_PointLightRenderingBuffer, int(_3153 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3153 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3153 + 3u)).x));
                        uint _3172 = (_3131 * 48u) + 8u;
                        vec3 _3183 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3172)).x, texelFetch(g_PointLightRenderingBuffer, int(_3172 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3172 + 2u)).x));
                        float _3187 = _3147.x - _2676;
                        float _3188 = _3147.y - _2677;
                        float _3189 = _3147.z - _2678;
                        float _3190 = dot(vec3(_3187, _3188, _3189), vec3(_3187, _3188, _3189));
                        float _3193 = inversesqrt(_3190);
                        float _3194 = _3193 * _3187;
                        float _3195 = _3193 * _3188;
                        float _3196 = _3193 * _3189;
                        float _3197 = dot(vec3(_909, _912, _915), vec3(_3194, _3195, _3196));
                        float _3202 = 1.0 - (_3190 * _3147.w);
                        float _4571 = isnan(0.0) ? _3202 : (isnan(_3202) ? 0.0 : max(_3202, 0.0));
                        float _3203 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
                        float _3204 = sqrt(_3190) * _3166.w;
                        float _3207 = 1.39999997615814208984375 / (_3204 + 1.39999997615814208984375);
                        float _3208 = _3207 * _3207;
                        float _3211 = ((1.0 - _3208) * _3197) + _3208;
                        float _3214 = _3204 * _3204;
                        float _3218 = ((isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0))) * _3203) / ((_3214 * 0.699999988079071044921875) + 1.0);
                        float _3222 = (-0.0) - _2676;
                        float _3223 = (-0.0) - _2677;
                        float _3224 = (-0.0) - _2678;
                        float _3228 = inversesqrt(dot(vec3(_3222, _3223, _3224), vec3(_3222, _3223, _3224)));
                        float _3229 = _3228 * _3222;
                        float _3230 = _3228 * _3223;
                        float _3231 = _3228 * _3224;
                        float _3239 = exp2(log2(1.0 / ((_3214 * 3.5) + 5.0)) * 0.25);
                        float _3240 = 1.0 - _984;
                        float _3247 = sqrt(1.0 - ((1.0 - (_3240 * _3240)) * (1.0 - (_3239 * _3239))));
                        float _3248 = _3247 * _3247;
                        float _3249 = _3248 * _3248;
                        float _3250 = _3229 + _3194;
                        float _3251 = _3230 + _3195;
                        float _3252 = _3231 + _3196;
                        float _3256 = inversesqrt(dot(vec3(_3250, _3251, _3252), vec3(_3250, _3251, _3252)));
                        float _3260 = dot(vec3(_909, _912, _915), vec3(_3229, _3230, _3231));
                        float _4587 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0));
                        float _3263 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
                        float _3264 = dot(vec3(_909, _912, _915), vec3(_3256 * _3250, _3256 * _3251, _3256 * _3252));
                        float _4598 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
                        float _3267 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
                        float _3271 = ((_3267 * _3267) * (_3249 + (-1.0))) + 1.0;
                        float _3272 = _3207 * _3248;
                        float _3273 = _3272 * _3272;
                        float _3276 = ((1.0 - _3273) * _3197) + _3273;
                        float _4609 = isnan(0.0) ? _3276 : (isnan(_3276) ? 0.0 : max(_3276, 0.0));
                        float _3277 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
                        float _3278 = 1.0 - _3248;
                        float _3288 = (0.5 / (((_3277 * ((_3263 * _3278) + _3248)) + 9.9999999392252902907785028219223e-09) + (((_3277 * _3278) + _3248) * _3263))) * _3277;
                        float _4620 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                        float _3299 = (((_3249 * 3.1415927410125732421875) * (isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0)))) / ((_3271 * _3271) * ((_3214 * 2.1991131305694580078125) + 3.141590118408203125))) * _3203;
                        _3051 = (_3218 * _3166.x) + _3124;
                        _3052 = (_3218 * _3166.y) + _3125;
                        _3053 = (_3218 * _3166.z) + _3126;
                        _3048 = (_3299 * _3183.x) + _3121;
                        _3049 = (_3299 * _3183.y) + _3122;
                        _3050 = (_3299 * _3183.z) + _3123;
                        if (_3128 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3121 = _3048;
                            _3122 = _3049;
                            _3123 = _3050;
                            _3124 = _3051;
                            _3125 = _3052;
                            _3126 = _3053;
                            _3127 = _3128;
                        }
                    }
                    frontier_phi_66_pred = _3048;
                    frontier_phi_66_pred_1 = _3053;
                    frontier_phi_66_pred_2 = _3052;
                    frontier_phi_66_pred_3 = _3051;
                    frontier_phi_66_pred_4 = _3050;
                    frontier_phi_66_pred_5 = _3049;
                }
                _2824 = frontier_phi_66_pred;
                _2834 = frontier_phi_66_pred_1;
                _2832 = frontier_phi_66_pred_2;
                _2830 = frontier_phi_66_pred_3;
                _2828 = frontier_phi_66_pred_4;
                _2826 = frontier_phi_66_pred_5;
                uint _2983 = _2982 + 1u;
                if (_2983 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2976 = _2824;
                    _2977 = _2826;
                    _2978 = _2828;
                    _2979 = _2830;
                    _2980 = _2832;
                    _2981 = _2834;
                    _2982 = _2983;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2823 = _2824;
            _2825 = _2826;
            _2827 = _2828;
            _2829 = _2830;
            _2831 = _2832;
            _2833 = _2834;
        }
        uvec4 _2837 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2838 = _2837.z;
        uint _2840 = (_2838 >> 8u) & 15u;
        float _2944;
        float _2946;
        float _2948;
        float _2950;
        float _2952;
        float _2954;
        if (((4294967295u << _2840) & _2722) == 0u)
        {
            _2944 = _2823;
            _2946 = _2825;
            _2948 = _2827;
            _2950 = _2829;
            _2952 = _2831;
            _2954 = _2833;
        }
        else
        {
            float _2969 = inversesqrt(dot(vec3(_2676, _2677, _2678), vec3(_2676, _2677, _2678)));
            float _2970 = _2969 * _2676;
            float _2971 = _2969 * _2677;
            float _2972 = _2969 * _2678;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2840 < ((_2838 >> 12u) & 15u))
            {
                float _2945;
                float _2947;
                float _2949;
                float _2951;
                float _2953;
                float _2955;
                float _3104 = _2823;
                float _3105 = _2825;
                float _3106 = _2827;
                float _3107 = _2829;
                float _3108 = _2831;
                float _3109 = _2833;
                uint _3110 = _2840;
                uint _3119;
                bool _3120;
                for (;;)
                {
                    _3119 = texelFetch(g_lightClassification, int((((_2716 << 5u) + (_2702 << 9u)) + (_3110 << 2u)) >> 2u)).x;
                    _3120 = _3119 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3120)
                    {
                        frontier_phi_77_pred = _3109;
                        frontier_phi_77_pred_1 = _3108;
                        frontier_phi_77_pred_2 = _3107;
                        frontier_phi_77_pred_3 = _3106;
                        frontier_phi_77_pred_4 = _3105;
                        frontier_phi_77_pred_5 = _3104;
                    }
                    else
                    {
                        float _3313;
                        float _3314;
                        float _3315;
                        float _3316;
                        float _3317;
                        float _3318;
                        float _3607;
                        float _3608;
                        float _3609;
                        float _3610;
                        float _3611;
                        float _3612;
                        float _3326 = _3104;
                        float _3327 = _3105;
                        float _3328 = _3106;
                        float _3329 = _3107;
                        float _3330 = _3108;
                        float _3331 = _3109;
                        uint _3332 = _3119;
                        uint _3333;
                        vec4 _3358;
                        float _3359;
                        vec4 _3374;
                        vec3 _3386;
                        vec4 _3401;
                        vec4 _3416;
                        float _3463;
                        bool _3464;
                        for (;;)
                        {
                            uint _3343 = ((_3110 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3332));
                            _3333 = (_3332 + 4294967295u) & _3332;
                            uint _3345 = _3343 * 40u;
                            _3358 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3345)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3345 + 3u)).x));
                            _3359 = _3358.w;
                            uint _3361 = (_3343 * 40u) + 4u;
                            _3374 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3361)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3361 + 3u)).x));
                            uint _3376 = (_3343 * 40u) + 8u;
                            _3386 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3376)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3376 + 2u)).x));
                            uint _3388 = (_3343 * 40u) + 16u;
                            _3401 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3388)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3388 + 3u)).x));
                            uint _3403 = (_3343 * 40u) + 20u;
                            _3416 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3403)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3403 + 3u)).x));
                            uint _3419 = (_3343 * 40u) + 24u;
                            vec4 _3432 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3419)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3419 + 3u)).x));
                            uint _3438 = (_3343 * 40u) + 28u;
                            vec4 _3451 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3438)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 3u)).x));
                            _3463 = fma(_2678, _3451.z, fma(_2677, _3451.y, _3451.x * _2676)) + _3451.w;
                            _3464 = !((fma(_2678, _3432.z, fma(_2677, _3432.y, _3432.x * _2676)) + _3432.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3464)
                            {
                                float _3491 = _3358.x - _2676;
                                float _3492 = _3358.y - _2677;
                                float _3493 = _3358.z - _2678;
                                float _3494 = dot(vec3(_3491, _3492, _3493), vec3(_3491, _3492, _3493));
                                float _3497 = inversesqrt(_3494);
                                float _3498 = _3497 * _3491;
                                float _3499 = _3497 * _3492;
                                float _3500 = _3497 * _3493;
                                float _3504 = 1.0 - (_3494 / (_3359 * _3359));
                                float _4631 = isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : max(_3504, 0.0));
                                float _3505 = isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0));
                                float _3509 = sqrt(_3494) * _3374.w;
                                float _3511 = 1.39999997615814208984375 / (_3509 + 1.39999997615814208984375);
                                float _3512 = _3511 * _3511;
                                float _3515 = ((1.0 - _3512) * dot(vec3(_3498, _3499, _3500), vec3(_909, _912, _915))) + _3512;
                                float _3518 = _3509 * _3509;
                                float _3522 = (fma(_2678, _3401.z, fma(_2677, _3401.y, _3401.x * _2676)) + _3401.w) / _3463;
                                float _3523 = (fma(_2678, _3416.z, fma(_2677, _3416.y, _3416.x * _2676)) + _3416.w) / _3463;
                                float _3527 = 1.0 - dot(vec2(_3522, _3523), vec2(_3522, _3523));
                                float _4647 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                                float _3528 = isnan(1.0) ? _4647 : (isnan(_4647) ? 1.0 : min(_4647, 1.0));
                                float _3529 = _3528 * (((isnan(0.0) ? _3515 : (isnan(_3515) ? 0.0 : max(_3515, 0.0))) * _3505) / ((_3518 * 0.699999988079071044921875) + 1.0));
                                float _3541 = exp2(log2(1.0 / ((_3518 * 3.5) + 5.0)) * 0.25);
                                float _3542 = 1.0 - _984;
                                float _3549 = sqrt(1.0 - ((1.0 - (_3542 * _3542)) * (1.0 - (_3541 * _3541))));
                                float _3550 = _3549 * _3549;
                                float _3551 = _3550 * _3550;
                                float _3552 = _3498 - _2970;
                                float _3553 = _3499 - _2971;
                                float _3554 = _3500 - _2972;
                                float _3558 = inversesqrt(dot(vec3(_3552, _3553, _3554), vec3(_3552, _3553, _3554)));
                                float _3562 = dot(vec3(_909, _912, _915), vec3((-0.0) - _2970, (-0.0) - _2971, (-0.0) - _2972));
                                float _4658 = isnan(0.0) ? _3562 : (isnan(_3562) ? 0.0 : max(_3562, 0.0));
                                float _3565 = isnan(1.0) ? _4658 : (isnan(_4658) ? 1.0 : min(_4658, 1.0));
                                float _3566 = dot(vec3(_909, _912, _915), vec3(_3558 * _3552, _3558 * _3553, _3558 * _3554));
                                float _4669 = isnan(0.0) ? _3566 : (isnan(_3566) ? 0.0 : max(_3566, 0.0));
                                float _3569 = isnan(1.0) ? _4669 : (isnan(_4669) ? 1.0 : min(_4669, 1.0));
                                float _3573 = ((_3569 * _3569) * (_3551 + (-1.0))) + 1.0;
                                float _3574 = _3511 * _3550;
                                float _3575 = _3574 * _3574;
                                float _3581 = ((1.0 - _3575) * dot(vec3(_909, _912, _915), vec3(_3498, _3499, _3500))) + _3575;
                                float _4680 = isnan(0.0) ? _3581 : (isnan(_3581) ? 0.0 : max(_3581, 0.0));
                                float _3582 = isnan(1.0) ? _4680 : (isnan(_4680) ? 1.0 : min(_4680, 1.0));
                                float _3583 = 1.0 - _3550;
                                float _3593 = (0.5 / (((_3582 * ((_3565 * _3583) + _3550)) + 9.9999999392252902907785028219223e-09) + (((_3582 * _3583) + _3550) * _3565))) * _3582;
                                float _4691 = isnan(0.0) ? _3593 : (isnan(_3593) ? 0.0 : max(_3593, 0.0));
                                float _3603 = (_3528 * _3505) * (((_3551 * 3.1415927410125732421875) * (isnan(1.0) ? _4691 : (isnan(_4691) ? 1.0 : min(_4691, 1.0)))) / ((_3573 * _3573) * ((_3518 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3529 * _3374.y;
                                frontier_phi_83_pred_1 = _3529 * _3374.x;
                                frontier_phi_83_pred_2 = _3603 * _3386.z;
                                frontier_phi_83_pred_3 = _3603 * _3386.y;
                                frontier_phi_83_pred_4 = _3603 * _3386.x;
                                frontier_phi_83_pred_5 = _3529 * _3374.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3611 = frontier_phi_83_pred;
                            _3610 = frontier_phi_83_pred_1;
                            _3609 = frontier_phi_83_pred_2;
                            _3608 = frontier_phi_83_pred_3;
                            _3607 = frontier_phi_83_pred_4;
                            _3612 = frontier_phi_83_pred_5;
                            _3316 = _3610 + _3329;
                            _3317 = _3611 + _3330;
                            _3318 = _3612 + _3331;
                            _3313 = _3607 + _3326;
                            _3314 = _3608 + _3327;
                            _3315 = _3609 + _3328;
                            if (_3333 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3326 = _3313;
                                _3327 = _3314;
                                _3328 = _3315;
                                _3329 = _3316;
                                _3330 = _3317;
                                _3331 = _3318;
                                _3332 = _3333;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3318;
                        frontier_phi_77_pred_1 = _3317;
                        frontier_phi_77_pred_2 = _3316;
                        frontier_phi_77_pred_3 = _3315;
                        frontier_phi_77_pred_4 = _3314;
                        frontier_phi_77_pred_5 = _3313;
                    }
                    _2955 = frontier_phi_77_pred;
                    _2953 = frontier_phi_77_pred_1;
                    _2951 = frontier_phi_77_pred_2;
                    _2949 = frontier_phi_77_pred_3;
                    _2947 = frontier_phi_77_pred_4;
                    _2945 = frontier_phi_77_pred_5;
                    uint _3111 = _3110 + 1u;
                    if (_3111 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3104 = _2945;
                        _3105 = _2947;
                        _3106 = _2949;
                        _3107 = _2951;
                        _3108 = _2953;
                        _3109 = _2955;
                        _3110 = _3111;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2949;
                frontier_phi_58_59_ladder_1 = _2955;
                frontier_phi_58_59_ladder_2 = _2953;
                frontier_phi_58_59_ladder_3 = _2951;
                frontier_phi_58_59_ladder_4 = _2947;
                frontier_phi_58_59_ladder_5 = _2945;
            }
            else
            {
                frontier_phi_58_59_ladder = _2827;
                frontier_phi_58_59_ladder_1 = _2833;
                frontier_phi_58_59_ladder_2 = _2831;
                frontier_phi_58_59_ladder_3 = _2829;
                frontier_phi_58_59_ladder_4 = _2825;
                frontier_phi_58_59_ladder_5 = _2823;
            }
            _2944 = frontier_phi_58_59_ladder_5;
            _2946 = frontier_phi_58_59_ladder_4;
            _2948 = frontier_phi_58_59_ladder;
            _2950 = frontier_phi_58_59_ladder_3;
            _2952 = frontier_phi_58_59_ladder_2;
            _2954 = frontier_phi_58_59_ladder_1;
        }
        float _2959 = isnan(1.0) ? _968 : (isnan(_968) ? 1.0 : min(_968, 1.0));
        _2735 = (_2959 * _2950) + _2171;
        _2737 = (_2959 * _2952) + _2173;
        _2739 = (_2959 * _2954) + _2175;
        _2741 = ((_2944 * _953) * _2959) + _2516;
        _2743 = ((_2946 * _955) * _2959) + _2518;
        _2745 = ((_2948 * _956) * _2959) + _2520;
    }
    else
    {
        _2735 = _2171;
        _2737 = _2173;
        _2739 = _2175;
        _2741 = _2516;
        _2743 = _2518;
        _2745 = _2520;
    }
    float _4707 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
    float _4718 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
    float _4729 = isnan(0.0) ? _945 : (isnan(_945) ? 0.0 : max(_945, 0.0));
    float _2762 = ((isnan(1.0) ? _4707 : (isnan(_4707) ? 1.0 : min(_4707, 1.0))) * (_2735 + ((isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0))) * _968))) + ((_2741 + ((isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0))) * _1809)) * cbPerFrame._m0[3u].x);
    float _2763 = ((isnan(1.0) ? _4718 : (isnan(_4718) ? 1.0 : min(_4718, 1.0))) * (_2737 + ((isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0))) * _968))) + ((_2743 + ((isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0))) * _1809)) * cbPerFrame._m0[3u].x);
    float _2764 = ((isnan(1.0) ? _4729 : (isnan(_4729) ? 1.0 : min(_4729, 1.0))) * (_2739 + ((isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0))) * _968))) + ((_2745 + ((isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0))) * _1809)) * cbPerFrame._m0[3u].x);
    uint _2765 = _928 + 6u;
    float _2773 = _890 / cbSceneParam._m0[86u].x;
    float _2774 = _891 / cbSceneParam._m0[86u].y;
    vec4 _2788 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2773, _2774, (log2((isnan(cbSceneParam._m0[77u].w) ? _813 : (isnan(_813) ? cbSceneParam._m0[77u].w : min(_813, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2790 = _2788.x;
    float _2791 = _2788.y;
    float _2792 = _2788.z;
    float _2793 = _2788.w;
    float _2886;
    float _2888;
    float _2890;
    float _2892;
    if (_813 > cbSceneParam._m0[78u].w)
    {
        float _2848 = isnan(_813) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _813 : min(cbSceneParam._m0[80u].w, _813));
        float _2849 = _2848 / _813;
        float _2860 = _2849 * _863;
        float _2861 = _864 * _2849;
        float _2862 = (-0.0) - _2861;
        float _2864 = _2849 * _865;
        float _2866 = (cbSceneParam._m0[77u].w * _2862) / _2848;
        float _2867 = _2866 + cbSceneParam._m0[79u].w;
        float _2868 = cbSceneParam._m0[79u].w - _2861;
        float _2874 = sqrt(((_2860 * _2860) + (_2861 * _2861)) + (_2864 * _2864));
        float _2877 = (1.0 - (cbSceneParam._m0[77u].w / _2848)) * _2874;
        float _2882 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2884 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3061;
        if (abs((_2862 - _2866) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3061 = ((((_2867 > 0.0) ? exp2(_2882 * _2867) : (2.0 - exp2(_2884 * _2867))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2877;
        }
        else
        {
            float _3005 = 1.0 / cbSceneParam._m0[80u].x;
            float _3006 = isnan(_2868) ? _2867 : (isnan(_2867) ? _2868 : max(_2867, _2868));
            float _3007 = isnan(_2868) ? _2867 : (isnan(_2867) ? _2868 : min(_2867, _2868));
            float _3016 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : min(_3006, 0.0));
            float _3017 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : min(_3007, 0.0));
            _3061 = ((abs(_2874 / _2862) * cbSceneParam._m0[80u].y) * ((((_3016 - _3017) * 2.0) - ((exp2(_2882 * (isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0)))) - exp2(_2882 * (isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0))))) * _3005)) - ((exp2(_2884 * _3016) - exp2(_2884 * _3017)) * _3005))) + (_2877 * cbSceneParam._m0[80u].z);
        }
        vec4 _3063 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2773, _2774, 1.0), 0.0);
        float _3072 = exp2((_3061 * (-1.44269502162933349609375)) * (1.0 - _3063.w));
        float _3073 = log2(_3072);
        float _3089 = log2(_2793);
        _2886 = (exp2(_3089 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3073 * cbSceneParam._m0[78u].x)) * _3063.x) / cbSceneParam._m0[78u].x)) + _2790;
        _2888 = (exp2(_3089 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3073 * cbSceneParam._m0[78u].y)) * _3063.y) / cbSceneParam._m0[78u].y)) + _2791;
        _2890 = (exp2(_3089 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3073 * cbSceneParam._m0[78u].z)) * _3063.z) / cbSceneParam._m0[78u].z)) + _2792;
        _2892 = _3072 * _2793;
    }
    else
    {
        _2886 = _2790;
        _2888 = _2791;
        _2890 = _2792;
        _2892 = _2793;
    }
    bool _3099;
    vec4 _2902;
    vec4 _2924;
    float _2926;
    float _2930;
    float _2931;
    float _2932;
    float _2933;
    bool _2943;
    for (;;)
    {
        _2902 = cbMatDynParam._m0[0u];
        float _2904 = roundEven(_2902.y);
        bool _2905 = _2904 == 3.0;
        float _2906 = log2(_2892);
        float _2913 = exp2(_2906 * cbSceneParam._m0[78u].x) * _2762;
        float _2914 = exp2(_2906 * cbSceneParam._m0[78u].y) * _2763;
        float _2915 = exp2(_2906 * cbSceneParam._m0[78u].z) * _2764;
        float _2922 = _879 + (-0.5);
        _2924 = cbMtdParam._m0[1u];
        _2926 = _2924.y * _2922;
        float _2929 = (_2904 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2930 = _2929 * (_2905 ? _2913 : (_2913 + (cbSceneParam._m0[72u].w * _2886)));
        _2931 = _2929 * (_2905 ? _2914 : (_2914 + (cbSceneParam._m0[72u].w * _2888)));
        _2932 = _2929 * (_2905 ? _2915 : (_2915 + (cbSceneParam._m0[72u].w * _2890)));
        _2933 = _2922 * 0.999000012874603271484375;
        _2943 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2943)
        {
            if ((cbInstanceData._m0[_928 + 7u].x + _2933) < 0.5)
            {
                _3099 = true;
                break;
            }
        }
        uint _3040 = _929 + uint(_2902.w);
        if ((cbInstanceData._m0[_3040].w < 1.0) && ((cbInstanceData._m0[_3040].w + _2933) < 0.5))
        {
            _3099 = true;
            break;
        }
        if ((_2926 + 1.0) < _2924.x)
        {
            _3099 = true;
            break;
        }
        _3099 = false;
        break;
    }
    float _3304;
    if (_3099)
    {
        discard_state = true;
        _3304 = 0.0;
    }
    else
    {
        _3304 = cbInstanceData._m0[_2765].w;
    }
    SV_Target.x = _2930;
    SV_Target.y = _2931;
    SV_Target.z = _2932;
    SV_Target.w = _3304;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2765].w;
    discard_exit();
}


