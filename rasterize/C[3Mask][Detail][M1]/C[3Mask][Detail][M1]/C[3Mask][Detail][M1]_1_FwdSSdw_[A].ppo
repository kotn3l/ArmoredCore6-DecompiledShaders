#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_20;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1365;
float _3773;
float _3774;
float _3775;
float _3776;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _264 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _270 = _264.x * cbMtdParam._m0[10u].x;
    float _271 = _264.y * cbMtdParam._m0[10u].y;
    float _272 = _264.z * cbMtdParam._m0[10u].z;
    vec4 _290 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _340 = cbMtdParam._m0[18u].y * texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x;
    float _351 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].x * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].y * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _340)) + 1.0;
    float _3785 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _352 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
    float _359 = (_352 * ((_290.x * cbMtdParam._m0[11u].x) - _270)) + _270;
    float _360 = (_352 * ((_290.y * cbMtdParam._m0[11u].y) - _271)) + _271;
    float _361 = (_352 * ((_290.z * cbMtdParam._m0[11u].z) - _272)) + _272;
    vec4 _379 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _406 = ((cbMtdParam._m0[17u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _340)) + 1.0;
    float _3796 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _407 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    float _414 = (_407 * ((_379.x * cbMtdParam._m0[12u].x) - _359)) + _359;
    float _415 = (_407 * ((_379.y * cbMtdParam._m0[12u].y) - _360)) + _360;
    float _416 = (_407 * ((_379.z * cbMtdParam._m0[12u].z) - _361)) + _361;
    vec4 _433 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _458 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[18u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[18u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _340)) + 1.0;
    float _3807 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _459 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
    float _466 = (_459 * ((_433.x * cbMtdParam._m0[13u].x) - _414)) + _414;
    float _467 = (_459 * ((_433.y * cbMtdParam._m0[13u].y) - _415)) + _415;
    float _468 = (_459 * ((_433.z * cbMtdParam._m0[13u].z) - _416)) + _416;
    vec4 _488 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _517 = (TEXCOORD_5.x - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.z) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.w) + cbTextureTilingScale._m0[18u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].z + 1.0);
    float _3818 = isnan(0.0) ? _517 : (isnan(_517) ? 0.0 : max(_517, 0.0));
    float _518 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
    float _525 = (_518 * ((_488.x * cbMtdParam._m0[14u].x) - _466)) + _466;
    float _526 = (_518 * ((_488.y * cbMtdParam._m0[14u].y) - _467)) + _467;
    float _527 = (_518 * ((_488.z * cbMtdParam._m0[14u].z) - _468)) + _468;
    vec4 _540 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _542 = _540.x;
    float _560 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _542) * _352) + _542;
    float _578 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _560) * _407) + _560;
    float _595 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _578) * _459) + _578;
    float _597 = _595 - (_595 * TEXCOORD_5.x);
    vec4 _610 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _632 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _634 = _632.x;
    float _635 = _632.y;
    float _638 = cbMtdParam._m0[17u].y * _632.z;
    vec4 _650 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _659 = (((cbMtdParam._m0[17u].x * _650.z) - _638) * _352) + _638;
    vec4 _672 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _684 = (((cbMtdParam._m0[16u].w * _672.z) - _659) * _407) + _659;
    vec4 _697 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _706 = (((cbMtdParam._m0[16u].z * _697.z) - _684) * _459) + _684;
    float _711 = ((cbMtdParam._m0[16u].x * TEXCOORD_5.x) * ((_610.z * cbMtdParam._m0[17u].z) - _706)) + _706;
    vec4 _724 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _736 = ((_650.x - _634) * _352) + _634;
    float _737 = ((_650.y - _635) * _352) + _635;
    float _742 = ((_672.x - _736) * _407) + _736;
    float _743 = ((_672.y - _737) * _407) + _737;
    float _752 = ((((_697.x - _742) * _459) + _742) * 2.0) + (-1.0);
    float _753 = ((((_697.y - _743) * _459) + _743) * 2.0) + (-1.0);
    float _754 = dot(vec2(_752, _753), vec2(_752, _753));
    float _3829 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _759 = sqrt(1.0 - (isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))));
    float _769 = ((((_724.x * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _752) + ((((_610.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[15u].y);
    float _770 = ((((_724.y * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _753) + ((((_610.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[15u].y);
    float _773 = fma(_759, _234 * NORMAL.x, fma(_770, _241 * TANGENT.x, (_227 * _219) * _769));
    float _776 = fma(_759, _234 * NORMAL.y, fma(_770, _241 * TANGENT.y, (_227 * _220) * _769));
    float _779 = fma(_759, _234 * NORMAL.z, fma(_770, _241 * TANGENT.z, (_227 * _221) * _769));
    float _783 = inversesqrt(dot(vec3(_773, _776, _779), vec3(_773, _776, _779)));
    float _784 = _783 * _773;
    float _785 = _783 * _776;
    float _786 = _783 * _779;
    float _3840 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _787 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
    float _3851 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _3862 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _3873 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _3884 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _791 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    float _807 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _847 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _857 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _847);
    float _858 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _847);
    float _859 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _847);
    float _863 = inversesqrt(dot(vec3(_857, _858, _859), vec3(_857, _858, _859)));
    float _864 = _857 * _863;
    float _865 = _858 * _863;
    float _866 = _859 * _863;
    vec4 _871 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _873 = _871.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1045 = sqrt(((_857 * _857) + (_858 * _858)) + (_859 * _859));
        float _1051 = (cbMatDynParam._m0[5u].x * _1045) + cbMatDynParam._m0[5u].y;
        float _3895 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1056 = (cbMatDynParam._m0[5u].z * _1045) + cbMatDynParam._m0[5u].w;
        float _3906 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))) - _1052)) + _1052) < ((_873 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _884 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _885 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _903 = fma(_786, cbSceneParam._m0[5u].z, fma(_785, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _784));
    float _906 = fma(_786, cbSceneParam._m0[6u].z, fma(_785, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _784));
    float _909 = fma(_786, cbSceneParam._m0[7u].z, fma(_785, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _784));
    uint _922 = uint(roundEven(NORMAL.w)) * 13u;
    uint _923 = _922 + 9u;
    uint _924 = _923 + uint(cbMatDynParam._m0[0u].w);
    float _930 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0)))) * cbInstanceData._m0[_924].x;
    float _931 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0)))) * cbInstanceData._m0[_924].y;
    float _932 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0)))) * cbInstanceData._m0[_924].z;
    float _3917 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _933 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    float _3928 = isnan(0.0) ? _931 : (isnan(_931) ? 0.0 : max(_931, 0.0));
    float _934 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
    float _3939 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _935 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _936 = 1.0 - _791;
    float _937 = _933 * _936;
    float _938 = _934 * _936;
    float _939 = _935 * _936;
    float _944 = (_933 + (-0.039999999105930328369140625)) * _791;
    float _945 = (_934 + (-0.039999999105930328369140625)) * _791;
    float _946 = (_935 + (-0.039999999105930328369140625)) * _791;
    float _947 = _944 + 0.039999999105930328369140625;
    float _949 = _945 + 0.039999999105930328369140625;
    float _950 = _946 + 0.039999999105930328369140625;
    vec4 _959 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _884, cbSceneParam._m0[86u].y * _885));
    float _962 = _959.x * TEXCOORD_5.w;
    float _963 = dot(vec3(_784, _785, _786), vec3(_864, _865, _866));
    float _966 = _963 * 2.0;
    float _970 = (_966 * _784) - _864;
    float _971 = (_966 * _785) - _865;
    float _972 = (_966 * _786) - _866;
    float _976 = abs(dot(vec3(_864, _865, _866), vec3(_784, _785, _786)));
    float _3950 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
    float _978 = sqrt(_787);
    float _991 = exp2((_978 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_978 * 3.0));
    float _997 = (1.0 - _991) * ((_978 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _998 = _991 * _978;
    float _1026 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1030 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1034 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1364;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1089 = fma(_1034, cbModelParam._m0[26u].z, fma(_1030, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1026));
        float _1093 = fma(_1034, cbModelParam._m0[27u].z, fma(_1030, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1026));
        float _1097 = fma(_1034, cbModelParam._m0[28u].z, fma(_1030, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1026));
        float _1122 = _1026 + _784;
        float _1123 = _1030 + _785;
        float _1124 = _1034 + _786;
        float _1134 = fma(_1124, cbModelParam._m0[26u].z, fma(_1123, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1122)) - _1089;
        float _1135 = fma(_1124, cbModelParam._m0[27u].z, fma(_1123, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1122)) - _1093;
        float _1136 = fma(_1124, cbModelParam._m0[28u].z, fma(_1123, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1122)) - _1097;
        float _1140 = inversesqrt(dot(vec3(_1134, _1135, _1136), vec3(_1134, _1135, _1136)));
        float _1153 = ((_1140 * _1134) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1089 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1154 = ((_1140 * _1135) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1093 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1155 = ((_1140 * _1136) / cbModelParam._m0[34u].z) + ((((((_1097 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1153, _1154, _1155), 0.0);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1153, _1154, _1155), 0.0);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1153, _1154, _1155), 0.0);
        vec4 _1179 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1153, _1154, _1155), 0.0);
        float _1192 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1193 = _1192 * (_1158.x + (-0.5));
        float _1194 = _1192 * (_1158.y + (-0.5));
        float _1195 = _1192 * (_1158.z + (-0.5));
        float _1202 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1203 = _1202 * (_1165.x + (-0.5));
        float _1204 = _1202 * (_1165.y + (-0.5));
        float _1205 = _1202 * (_1165.z + (-0.5));
        float _1212 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1213 = _1212 * (_1172.x + (-0.5));
        float _1214 = _1212 * (_1172.y + (-0.5));
        float _1215 = _1212 * (_1172.z + (-0.5));
        float _1222 = exp2((_1179.w + (-0.5)) * 20.0) * 2.0;
        float _1223 = _1222 * (_1179.x + (-0.5));
        float _1224 = _1222 * (_1179.y + (-0.5));
        float _1225 = _1222 * (_1179.z + (-0.5));
        float _1226 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1227 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1228 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1229 = _1193 * 0.5;
        float _1230 = _1203 * 0.5;
        float _1231 = _1213 * 0.5;
        float _1232 = dot(vec3(_1229, _1230, _1231), vec3(_1229, _1230, _1231));
        float _1237 = (_1232 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1232);
        float _1246 = (dot(vec3(_784, _785, _786), vec3(_1237 * _1229, _1237 * _1230, _1237 * _1231)) + 1.0) * 0.5;
        float _3976 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1256 = sqrt(((_1230 * _1230) + (_1229 * _1229)) + (_1231 * _1231)) / (_1226 + 9.9999997473787516355514526367188e-06);
        float _3987 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0));
        float _1258 = _1257 * 2.0;
        float _1262 = (1.0 - _1257) / (_1257 + 1.0);
        float _3998 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
        float _1272 = ((((1.0 - _1263) * (_1258 + 2.0)) * exp2(log2(isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * (_1258 + 1.0))) + _1263) * _1226;
        float _1273 = _1194 * 0.5;
        float _1274 = _1204 * 0.5;
        float _1275 = _1214 * 0.5;
        float _1276 = dot(vec3(_1273, _1274, _1275), vec3(_1273, _1274, _1275));
        float _1281 = (_1276 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1276);
        float _1289 = (dot(vec3(_784, _785, _786), vec3(_1281 * _1273, _1281 * _1274, _1281 * _1275)) + 1.0) * 0.5;
        float _4009 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1298 = sqrt(((_1274 * _1274) + (_1273 * _1273)) + (_1275 * _1275)) / (_1227 + 9.9999997473787516355514526367188e-06);
        float _4020 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _1300 = _1299 * 2.0;
        float _1304 = (1.0 - _1299) / (_1299 + 1.0);
        float _4031 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1314 = ((((1.0 - _1305) * (_1300 + 2.0)) * exp2(log2(isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * (_1300 + 1.0))) + _1305) * _1227;
        float _1315 = _1195 * 0.5;
        float _1316 = _1205 * 0.5;
        float _1317 = _1215 * 0.5;
        float _1318 = dot(vec3(_1315, _1316, _1317), vec3(_1315, _1316, _1317));
        float _1323 = (_1318 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1318);
        float _1331 = (dot(vec3(_784, _785, _786), vec3(_1323 * _1315, _1323 * _1316, _1323 * _1317)) + 1.0) * 0.5;
        float _4042 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1340 = sqrt(((_1316 * _1316) + (_1315 * _1315)) + (_1317 * _1317)) / (_1228 + 9.9999997473787516355514526367188e-06);
        float _4053 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _1342 = _1341 * 2.0;
        float _1346 = (1.0 - _1341) / (_1341 + 1.0);
        float _4064 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1356 = ((((1.0 - _1347) * (_1342 + 2.0)) * exp2(log2(isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * (_1342 + 1.0))) + _1347) * _1228;
        _1364 = _1195;
        _1366 = _1194;
        _1367 = _1193;
        _1368 = _1205;
        _1369 = _1204;
        _1370 = _1203;
        _1371 = _1215;
        _1372 = _1214;
        _1373 = _1213;
        _1374 = _1228;
        _1375 = _1227;
        _1376 = _1226;
        _1377 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0)));
        _1378 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)));
        _1379 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)));
    }
    else
    {
        _1364 = _1365;
        _1366 = _1365;
        _1367 = _1365;
        _1368 = _1365;
        _1369 = _1365;
        _1370 = _1365;
        _1371 = _1365;
        _1372 = _1365;
        _1373 = _1365;
        _1374 = _1365;
        _1375 = _1365;
        _1376 = _1365;
        _1377 = 0.0;
        _1378 = 0.0;
        _1379 = 0.0;
    }
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1408 = fma(_1034, cbModelParam._m0[30u].z, fma(_1030, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1026));
        float _1412 = fma(_1034, cbModelParam._m0[31u].z, fma(_1030, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1026));
        float _1416 = fma(_1034, cbModelParam._m0[32u].z, fma(_1030, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1026));
        float _1439 = _1026 + _784;
        float _1440 = _1030 + _785;
        float _1441 = _1034 + _786;
        float _1451 = fma(_1441, cbModelParam._m0[30u].z, fma(_1440, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1439)) - _1408;
        float _1452 = fma(_1441, cbModelParam._m0[31u].z, fma(_1440, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1439)) - _1412;
        float _1453 = fma(_1441, cbModelParam._m0[32u].z, fma(_1440, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1439)) - _1416;
        float _1457 = inversesqrt(dot(vec3(_1451, _1452, _1453), vec3(_1451, _1452, _1453)));
        float _1470 = ((_1457 * _1451) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1408 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1471 = ((_1457 * _1452) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1412 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1472 = ((_1457 * _1453) / cbModelParam._m0[35u].z) + ((((((_1416 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1474 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1470, _1471, _1472), 0.0);
        vec4 _1481 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1470, _1471, _1472), 0.0);
        vec4 _1488 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1470, _1471, _1472), 0.0);
        vec4 _1495 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1470, _1471, _1472), 0.0);
        float _1507 = exp2((_1474.w + (-0.5)) * 20.0) * 2.0;
        float _1508 = _1507 * (_1474.x + (-0.5));
        float _1509 = _1507 * (_1474.y + (-0.5));
        float _1510 = _1507 * (_1474.z + (-0.5));
        float _1517 = exp2((_1481.w + (-0.5)) * 20.0) * 2.0;
        float _1518 = _1517 * (_1481.x + (-0.5));
        float _1519 = _1517 * (_1481.y + (-0.5));
        float _1520 = _1517 * (_1481.z + (-0.5));
        float _1527 = exp2((_1488.w + (-0.5)) * 20.0) * 2.0;
        float _1528 = _1527 * (_1488.x + (-0.5));
        float _1529 = _1527 * (_1488.y + (-0.5));
        float _1530 = _1527 * (_1488.z + (-0.5));
        float _1537 = exp2((_1495.w + (-0.5)) * 20.0) * 2.0;
        float _1538 = _1537 * (_1495.x + (-0.5));
        float _1539 = _1537 * (_1495.y + (-0.5));
        float _1540 = _1537 * (_1495.z + (-0.5));
        float _1541 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1542 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1543 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1544 = _1508 * 0.5;
        float _1545 = _1518 * 0.5;
        float _1546 = _1528 * 0.5;
        float _1547 = dot(vec3(_1544, _1545, _1546), vec3(_1544, _1545, _1546));
        float _1552 = (_1547 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1547);
        float _1560 = (dot(vec3(_784, _785, _786), vec3(_1552 * _1544, _1552 * _1545, _1552 * _1546)) + 1.0) * 0.5;
        float _4105 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1569 = sqrt(((_1545 * _1545) + (_1544 * _1544)) + (_1546 * _1546)) / (_1541 + 9.9999997473787516355514526367188e-06);
        float _4116 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1570 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
        float _1571 = _1570 * 2.0;
        float _1575 = (1.0 - _1570) / (_1570 + 1.0);
        float _4127 = isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0));
        float _1576 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
        float _1585 = ((((1.0 - _1576) * (_1571 + 2.0)) * exp2(log2(isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0))) * (_1571 + 1.0))) + _1576) * _1541;
        float _1586 = _1509 * 0.5;
        float _1587 = _1519 * 0.5;
        float _1588 = _1529 * 0.5;
        float _1589 = dot(vec3(_1586, _1587, _1588), vec3(_1586, _1587, _1588));
        float _1594 = (_1589 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1589);
        float _1602 = (dot(vec3(_784, _785, _786), vec3(_1594 * _1586, _1594 * _1587, _1594 * _1588)) + 1.0) * 0.5;
        float _4138 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1611 = sqrt(((_1587 * _1587) + (_1586 * _1586)) + (_1588 * _1588)) / (_1542 + 9.9999997473787516355514526367188e-06);
        float _4149 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1612 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1613 = _1612 * 2.0;
        float _1617 = (1.0 - _1612) / (_1612 + 1.0);
        float _4160 = isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0));
        float _1618 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1627 = ((((1.0 - _1618) * (_1613 + 2.0)) * exp2(log2(isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_1613 + 1.0))) + _1618) * _1542;
        float _1628 = _1510 * 0.5;
        float _1629 = _1520 * 0.5;
        float _1630 = _1530 * 0.5;
        float _1631 = dot(vec3(_1628, _1629, _1630), vec3(_1628, _1629, _1630));
        float _1636 = (_1631 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1631);
        float _1644 = (dot(vec3(_784, _785, _786), vec3(_1636 * _1628, _1636 * _1629, _1636 * _1630)) + 1.0) * 0.5;
        float _4171 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1653 = sqrt(((_1629 * _1629) + (_1628 * _1628)) + (_1630 * _1630)) / (_1543 + 9.9999997473787516355514526367188e-06);
        float _4182 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0));
        float _1654 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1655 = _1654 * 2.0;
        float _1659 = (1.0 - _1654) / (_1654 + 1.0);
        float _4193 = isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0));
        float _1660 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1669 = ((((1.0 - _1660) * (_1655 + 2.0)) * exp2(log2(isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_1655 + 1.0))) + _1660) * _1543;
        _1677 = _1510;
        _1678 = _1509;
        _1679 = _1508;
        _1680 = _1520;
        _1681 = _1519;
        _1682 = _1518;
        _1683 = _1530;
        _1684 = _1529;
        _1685 = _1528;
        _1686 = _1543;
        _1687 = _1542;
        _1688 = _1541;
        _1689 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0)));
        _1690 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0)));
        _1691 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0)));
    }
    else
    {
        _1677 = _1365;
        _1678 = _1365;
        _1679 = _1365;
        _1680 = _1365;
        _1681 = _1365;
        _1682 = _1365;
        _1683 = _1365;
        _1684 = _1365;
        _1685 = _1365;
        _1686 = _1365;
        _1687 = _1365;
        _1688 = _1365;
        _1689 = 0.0;
        _1690 = 0.0;
        _1691 = 0.0;
    }
    float _1701 = (cbModelParam._m0[1u].x * (_1689 - _1377)) + _1377;
    float _1702 = (cbModelParam._m0[1u].x * (_1690 - _1378)) + _1378;
    float _1703 = (cbModelParam._m0[1u].x * (_1691 - _1379)) + _1379;
    float _1724 = fma(_1703, cbSceneParam._m0[89u].z, fma(_1702, cbSceneParam._m0[89u].y, _1701 * cbSceneParam._m0[89u].x));
    float _1727 = fma(_1703, cbSceneParam._m0[90u].z, fma(_1702, cbSceneParam._m0[90u].y, _1701 * cbSceneParam._m0[90u].x));
    float _1730 = fma(_1703, cbSceneParam._m0[91u].z, fma(_1702, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1701));
    float _1745 = _970 * 0.5;
    float _1746 = _971 * 0.5;
    float _1747 = _972 * 0.5;
    float _1748 = dot(vec4(_1745, _1746, _1747, 1.0), vec4(_1679, _1682, _1685, _1688));
    float _1751 = dot(vec4(_1745, _1746, _1747, 1.0), vec4(_1678, _1681, _1684, _1687));
    float _1754 = dot(vec4(_1745, _1746, _1747, 1.0), vec4(_1677, _1680, _1683, _1686));
    float _1788;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1761 = dot(vec4(_1745, _1746, _1747, 1.0), vec4(_1364, _1368, _1371, _1374));
        float _1765 = dot(vec4(_1745, _1746, _1747, 1.0), vec4(_1366, _1369, _1372, _1375));
        float _1769 = dot(vec4(_1745, _1746, _1747, 1.0), vec4(_1367, _1370, _1373, _1376));
        float _1776 = dot(vec4(cbModelParam._m0[39u]), vec4(_1745, _1746, _1747, 1.0));
        _1788 = dot(vec3(isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0)), isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0)), isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1776) ? 0.0 : (isnan(0.0) ? _1776 : max(0.0, _1776))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1788 = 1.0;
    }
    float _1799;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1790 = dot(vec4(cbModelParam._m0[40u]), vec4(_1745, _1746, _1747, 1.0));
        _1799 = dot(vec3(isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0)), isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0)), isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1790) ? 0.0 : (isnan(0.0) ? _1790 : max(0.0, _1790))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1799 = 1.0;
    }
    float _1803 = (_1799 * cbModelParam._m0[1u].x) + (_1788 * (1.0 - cbModelParam._m0[1u].x));
    float _1813 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _787);
    float _1814 = isnan(_1813) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1813 : min(cbModelParam._m0[25u].z, _1813));
    float _1894;
    float _1896;
    float _1898;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1861 = fma(_1034, cbModelParam._m0[13u].z, fma(_1030, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1026)) + cbModelParam._m0[13u].w;
        float _1865 = fma(_1034, cbModelParam._m0[14u].z, fma(_1030, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1026)) + cbModelParam._m0[14u].w;
        float _1869 = fma(_1034, cbModelParam._m0[15u].z, fma(_1030, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1026)) + cbModelParam._m0[15u].w;
        float _1872 = fma(_972, cbModelParam._m0[13u].z, fma(_971, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _970));
        float _1875 = fma(_972, cbModelParam._m0[14u].z, fma(_971, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _970));
        float _1878 = fma(_972, cbModelParam._m0[15u].z, fma(_971, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _970));
        float _1906;
        if (_1872 > 0.0)
        {
            _1906 = abs((1.0 - _1861) / _1872);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1872 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1861 + 1.0) / _1872);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1906 = frontier_phi_17_15_ladder;
        }
        float _2132;
        if (_1875 > 0.0)
        {
            _2132 = abs((1.0 - _1865) / _1875);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1875 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1865 + 1.0) / _1875);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2132 = frontier_phi_26_22_ladder;
        }
        float _2389;
        if (_1878 > 0.0)
        {
            _2389 = abs((1.0 - _1869) / _1878);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1878 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1869 + 1.0) / _1878);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2389 = frontier_phi_38_33_ladder;
        }
        float _2391 = isnan(_2132) ? _1906 : (isnan(_1906) ? _2132 : min(_1906, _2132));
        float _2392 = isnan(_2389) ? _2391 : (isnan(_2391) ? _2389 : min(_2391, _2389));
        float _2396 = (_2392 * _1872) + _1861;
        float _2397 = (_2392 * _1875) + _1865;
        float _2398 = (_2392 * _1878) + _1869;
        float _2399 = _2392 * 9.9999997473787516355514526367188e-05;
        float _2401 = (-1.0) - _2399;
        float _2403 = _2399 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2398 > _2403) || ((_2398 < _2401) || ((_2397 > _2403) || ((_2397 < _2401) || ((_2396 < _2401) || (_2396 > _2403))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2526 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2398, cbModelParam._m0[9u].z, fma(_2397, cbModelParam._m0[9u].y, _2396 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2398, cbModelParam._m0[10u].z, fma(_2397, cbModelParam._m0[10u].y, _2396 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2398, cbModelParam._m0[11u].z, fma(_2397, cbModelParam._m0[11u].y, _2396 * cbModelParam._m0[11u].x))), _1814);
            frontier_phi_16_38_ladder = _2526.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2526.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2526.x * cbModelParam._m0[1u].y;
        }
        _1894 = frontier_phi_16_38_ladder_2;
        _1896 = frontier_phi_16_38_ladder_1;
        _1898 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1882 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_970, _971, _972), _1814);
        _1894 = _1882.x * cbModelParam._m0[1u].y;
        _1896 = _1882.y * cbModelParam._m0[1u].y;
        _1898 = _1882.z * cbModelParam._m0[1u].y;
    }
    float _1902 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _787);
    float _1903 = isnan(_1902) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1902 : min(cbModelParam._m0[25u].w, _1902));
    float _1994;
    float _1996;
    float _1998;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1958 = fma(_1034, cbModelParam._m0[21u].z, fma(_1030, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1026)) + cbModelParam._m0[21u].w;
        float _1962 = fma(_1034, cbModelParam._m0[22u].z, fma(_1030, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1026)) + cbModelParam._m0[22u].w;
        float _1966 = fma(_1034, cbModelParam._m0[23u].z, fma(_1030, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1026)) + cbModelParam._m0[23u].w;
        float _1969 = fma(_972, cbModelParam._m0[21u].z, fma(_971, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _970));
        float _1972 = fma(_972, cbModelParam._m0[22u].z, fma(_971, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _970));
        float _1975 = fma(_972, cbModelParam._m0[23u].z, fma(_971, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _970));
        float _2137;
        if (_1969 > 0.0)
        {
            _2137 = abs((1.0 - _1958) / _1969);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1969 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1958 + 1.0) / _1969);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2137 = frontier_phi_28_24_ladder;
        }
        float _2416;
        if (_1972 > 0.0)
        {
            _2416 = abs((1.0 - _1962) / _1972);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1972 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1962 + 1.0) / _1972);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2416 = frontier_phi_40_35_ladder;
        }
        float _2629;
        if (_1975 > 0.0)
        {
            _2629 = abs((1.0 - _1966) / _1975);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1975 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1966 + 1.0) / _1975);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2629 = frontier_phi_49_46_ladder;
        }
        float _2631 = isnan(_2416) ? _2137 : (isnan(_2137) ? _2416 : min(_2137, _2416));
        float _2632 = isnan(_2629) ? _2631 : (isnan(_2631) ? _2629 : min(_2631, _2629));
        float _2636 = (_2632 * _1969) + _1958;
        float _2637 = (_2632 * _1972) + _1962;
        float _2638 = (_2632 * _1975) + _1966;
        float _2639 = _2632 * 9.9999997473787516355514526367188e-05;
        float _2640 = (-1.0) - _2639;
        float _2642 = _2639 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2638 > _2642) || ((_2638 < _2640) || ((_2637 > _2642) || ((_2637 < _2640) || ((_2636 < _2640) || (_2636 > _2642))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2837 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2638, cbModelParam._m0[17u].z, fma(_2637, cbModelParam._m0[17u].y, _2636 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2638, cbModelParam._m0[18u].z, fma(_2637, cbModelParam._m0[18u].y, _2636 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2638, cbModelParam._m0[19u].z, fma(_2637, cbModelParam._m0[19u].y, _2636 * cbModelParam._m0[19u].x))), _1903);
            frontier_phi_25_49_ladder = _2837.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2837.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2837.x * cbModelParam._m0[1u].z;
        }
        _1994 = frontier_phi_25_49_ladder_2;
        _1996 = frontier_phi_25_49_ladder_1;
        _1998 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1978 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_970, _971, _972), _1903);
        _1994 = _1978.x * cbModelParam._m0[1u].z;
        _1996 = _1978.y * cbModelParam._m0[1u].z;
        _1998 = _1978.z * cbModelParam._m0[1u].z;
    }
    float _2011 = (((_997 * _947) + _998) * _962) * ((cbModelParam._m0[1u].w * (_1994 - _1894)) + _1894);
    float _2013 = (((_997 * _949) + _998) * _962) * ((cbModelParam._m0[1u].w * (_1996 - _1896)) + _1896);
    float _2015 = (((_997 * _950) + _998) * _962) * ((cbModelParam._m0[1u].w * (_1998 - _1898)) + _1898);
    float _2018 = fma(_2015, cbSceneParam._m0[89u].z, fma(_2013, cbSceneParam._m0[89u].y, _2011 * cbSceneParam._m0[89u].x));
    float _2021 = fma(_2015, cbSceneParam._m0[90u].z, fma(_2013, cbSceneParam._m0[90u].y, _2011 * cbSceneParam._m0[90u].x));
    float _2024 = fma(_2015, cbSceneParam._m0[91u].z, fma(_2013, cbSceneParam._m0[91u].y, _2011 * cbSceneParam._m0[91u].x));
    vec4 _2032 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_884, _885));
    float _2034 = _2032.w;
    float _2046 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2034);
    float _2047 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2034);
    float _2048 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2034);
    uvec4 _2052 = floatBitsToUint(cbInstanceData._m0[_922 + 5u]);
    uint _2054 = _2052.x * 14u;
    uint _2055 = _2054 + 13u;
    float _2062 = _962 + (-1.0);
    float _2067 = (cbLight._m0[_2055].x * _2062) + 1.0;
    float _2068 = (cbLight._m0[_2055].y * _2062) + 1.0;
    float _2069 = (cbLight._m0[_2055].z * _2062) + 1.0;
    float _2070 = (cbLight._m0[_2055].w * _2062) + 1.0;
    uint _2071 = _2054 + 5u;
    float _2077 = isnan(1.0) ? _2068 : (isnan(_2068) ? 1.0 : min(_2068, 1.0));
    uint _2081 = _2054 + 4u;
    float _2091 = isnan(1.0) ? _2067 : (isnan(_2067) ? 1.0 : min(_2067, 1.0));
    uint _2095 = _2054 | 1u;
    float _2106 = dot(vec3(cbLight._m0[_2054].xyz), vec3(_784, _785, _786));
    float _2109 = dot(vec3(cbLight._m0[_2095].xyz), vec3(_784, _785, _786));
    float _4329 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    float _4340 = isnan(0.0) ? _2109 : (isnan(_2109) ? 0.0 : max(_2109, 0.0));
    float _2114 = (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * 0.3183098733425140380859375;
    float _2116 = (isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * 0.3183098733425140380859375;
    float _2123 = ((cbLight._m0[_2071].x * _2077) * _2116) + (((cbLight._m0[_2081].x * _2046) * _2091) * _2114);
    float _2124 = ((_2077 * cbLight._m0[_2071].y) * _2116) + (((cbLight._m0[_2081].y * _2047) * _2091) * _2114);
    float _2125 = ((_2077 * cbLight._m0[_2071].z) * _2116) + (((cbLight._m0[_2081].z * _2048) * _2091) * _2114);
    uvec4 _2129 = floatBitsToUint(cbLight._m0[_2054 + 12u]);
    bool _2131 = _2129.x == 0u;
    float _2142;
    float _2144;
    float _2146;
    if (_2131)
    {
        _2142 = _2123;
        _2144 = _2124;
        _2146 = _2125;
    }
    else
    {
        uint _2150 = _2054 + 6u;
        float _2166 = (dot(vec3(cbLight._m0[_2054 + 2u].xyz), vec3(_784, _785, _786)) * 0.5) + 0.5;
        float _2167 = _2166 * _2166;
        float _4351 = isnan(0.0) ? _2167 : (isnan(_2167) ? 0.0 : max(_2167, 0.0));
        float _2168 = isnan(1.0) ? _4351 : (isnan(_4351) ? 1.0 : min(_4351, 1.0));
        float _2169 = isnan(1.0) ? _2069 : (isnan(_2069) ? 1.0 : min(_2069, 1.0));
        _2142 = (((cbLight._m0[_2150].x * 0.3183098733425140380859375) * _2168) * _2169) + _2123;
        _2144 = (((cbLight._m0[_2150].y * 0.3183098733425140380859375) * _2168) * _2169) + _2124;
        _2146 = (((cbLight._m0[_2150].z * 0.3183098733425140380859375) * _2168) * _2169) + _2125;
    }
    bool _2149 = _2129.y == 0u;
    float _2187;
    float _2189;
    float _2191;
    if (_2149)
    {
        _2187 = _2142;
        _2189 = _2144;
        _2191 = _2146;
    }
    else
    {
        uint _2360 = _2054 + 7u;
        float _2376 = (dot(vec3(cbLight._m0[_2054 + 3u].xyz), vec3(_784, _785, _786)) * 0.5) + 0.5;
        float _2377 = _2376 * _2376;
        float _4367 = isnan(0.0) ? _2377 : (isnan(_2377) ? 0.0 : max(_2377, 0.0));
        float _2378 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
        float _2379 = isnan(1.0) ? _2070 : (isnan(_2070) ? 1.0 : min(_2070, 1.0));
        _2187 = (((cbLight._m0[_2360].x * 0.3183098733425140380859375) * _2378) * _2379) + _2142;
        _2189 = (((cbLight._m0[_2360].y * 0.3183098733425140380859375) * _2378) * _2379) + _2144;
        _2191 = (((cbLight._m0[_2360].z * 0.3183098733425140380859375) * _2378) * _2379) + _2146;
    }
    uint _2194 = _2054 + 8u;
    float _2207 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2054].w)) * _787) * 0.949999988079071044921875);
    float _2208 = _2207 * _2207;
    float _2209 = cbLight._m0[_2054].x + _864;
    float _2210 = cbLight._m0[_2054].y + _865;
    float _2211 = cbLight._m0[_2054].z + _866;
    float _2215 = inversesqrt(dot(vec3(_2209, _2210, _2211), vec3(_2209, _2210, _2211)));
    float _2216 = _2215 * _2209;
    float _2217 = _2215 * _2210;
    float _2218 = _2215 * _2211;
    float _2219 = dot(vec3(_784, _785, _786), vec3(cbLight._m0[_2054].xyz));
    float _4383 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _2222 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
    float _4394 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
    float _2223 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
    float _2224 = dot(vec3(_784, _785, _786), vec3(_2216, _2217, _2218));
    float _4405 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
    float _2227 = isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0));
    float _2228 = dot(vec3(cbLight._m0[_2054].xyz), vec3(_2216, _2217, _2218));
    float _4416 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
    float _2232 = _2208 * _2208;
    float _2236 = ((_2227 * _2227) * (_2232 + (-1.0))) + 1.0;
    float _2244 = exp2(log2(1.0 - (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0)))) * 5.0);
    float _2245 = 0.959999978542327880859375 - _944;
    float _2247 = 0.959999978542327880859375 - _945;
    float _2248 = 0.959999978542327880859375 - _946;
    float _2255 = 1.0 - _2208;
    float _2266 = (0.5 / (((_2223 * ((_2222 * _2255) + _2208)) + 9.9999999392252902907785028219223e-09) + (((_2223 * _2255) + _2208) * _2222))) * _2222;
    float _4427 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
    float _2268 = (isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * (_2232 / ((_2236 * _2236) * 3.141590118408203125));
    uint _2282 = _2054 + 9u;
    float _2293 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2095].w)) * _787) * 0.949999988079071044921875);
    float _2294 = _2293 * _2293;
    float _2295 = cbLight._m0[_2095].x + _864;
    float _2296 = cbLight._m0[_2095].y + _865;
    float _2297 = cbLight._m0[_2095].z + _866;
    float _2301 = inversesqrt(dot(vec3(_2295, _2296, _2297), vec3(_2295, _2296, _2297)));
    float _2302 = _2301 * _2295;
    float _2303 = _2301 * _2296;
    float _2304 = _2301 * _2297;
    float _2305 = dot(vec3(_784, _785, _786), vec3(cbLight._m0[_2095].xyz));
    float _4438 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2308 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
    float _2309 = dot(vec3(_784, _785, _786), vec3(_2302, _2303, _2304));
    float _4449 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0));
    float _2312 = isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0));
    float _2313 = dot(vec3(cbLight._m0[_2095].xyz), vec3(_2302, _2303, _2304));
    float _4460 = isnan(0.0) ? _2313 : (isnan(_2313) ? 0.0 : max(_2313, 0.0));
    float _2317 = _2294 * _2294;
    float _2321 = ((_2312 * _2312) * (_2317 + (-1.0))) + 1.0;
    float _2328 = exp2(log2(1.0 - (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0)))) * 5.0);
    float _2335 = 1.0 - _2294;
    float _2345 = (0.5 / (((_2223 * ((_2308 * _2335) + _2294)) + 9.9999999392252902907785028219223e-09) + (((_2223 * _2335) + _2294) * _2308))) * _2308;
    float _4471 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
    float _2347 = (isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0))) * (_2317 / ((_2321 * _2321) * 3.141590118408203125));
    float _2357 = (((((_2328 * _2245) + _947) * cbLight._m0[_2282].x) * _2347) * _2077) + ((((cbLight._m0[_2194].x * _2046) * ((_2244 * _2245) + _947)) * _2268) * _2091);
    float _2358 = (((((_2328 * _2247) + _949) * cbLight._m0[_2282].y) * _2347) * _2077) + ((((cbLight._m0[_2194].y * _2047) * ((_2244 * _2247) + _949)) * _2268) * _2091);
    float _2359 = (((((_2328 * _2248) + _950) * cbLight._m0[_2282].z) * _2347) * _2077) + ((((cbLight._m0[_2194].z * _2048) * ((_2244 * _2248) + _950)) * _2268) * _2091);
    float _2421;
    float _2423;
    float _2425;
    if (_2131)
    {
        _2421 = _2357;
        _2423 = _2358;
        _2425 = _2359;
    }
    else
    {
        uint _2427 = _2054 + 2u;
        uint _2431 = _2054 + 10u;
        float _2445 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2427].w)) * _787) * 0.949999988079071044921875);
        float _2446 = _2445 * _2445;
        float _2447 = cbLight._m0[_2427].x + _864;
        float _2448 = cbLight._m0[_2427].y + _865;
        float _2449 = cbLight._m0[_2427].z + _866;
        float _2453 = inversesqrt(dot(vec3(_2447, _2448, _2449), vec3(_2447, _2448, _2449)));
        float _2454 = _2453 * _2447;
        float _2455 = _2453 * _2448;
        float _2456 = _2453 * _2449;
        float _2457 = dot(vec3(_784, _785, _786), vec3(cbLight._m0[_2427].xyz));
        float _4482 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2460 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
        float _2461 = dot(vec3(_784, _785, _786), vec3(_2454, _2455, _2456));
        float _4493 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
        float _2464 = isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0));
        float _2465 = dot(vec3(cbLight._m0[_2427].xyz), vec3(_2454, _2455, _2456));
        float _4504 = isnan(0.0) ? _2465 : (isnan(_2465) ? 0.0 : max(_2465, 0.0));
        float _2469 = _2446 * _2446;
        float _2473 = ((_2464 * _2464) * (_2469 + (-1.0))) + 1.0;
        float _2480 = exp2(log2(1.0 - (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0)))) * 5.0);
        float _2487 = 1.0 - _2446;
        float _2497 = (0.5 / (((_2223 * ((_2460 * _2487) + _2446)) + 9.9999999392252902907785028219223e-09) + (((_2223 * _2487) + _2446) * _2460))) * _2460;
        float _4515 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
        float _2499 = (isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0))) * (_2469 / ((_2473 * _2473) * 3.141590118408203125));
        float _2500 = isnan(1.0) ? _2069 : (isnan(_2069) ? 1.0 : min(_2069, 1.0));
        _2421 = (((((_2480 * _2245) + _947) * cbLight._m0[_2431].x) * _2499) * _2500) + _2357;
        _2423 = (((((_2480 * _2247) + _949) * cbLight._m0[_2431].y) * _2499) * _2500) + _2358;
        _2425 = (((((_2480 * _2248) + _950) * cbLight._m0[_2431].z) * _2499) * _2500) + _2359;
    }
    float _2535;
    float _2537;
    float _2539;
    if (_2149)
    {
        _2535 = _2421;
        _2537 = _2423;
        _2539 = _2425;
    }
    else
    {
        uint _2546 = _2054 + 3u;
        uint _2550 = _2054 + 11u;
        float _2564 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2546].w)) * _787) * 0.949999988079071044921875);
        float _2565 = _2564 * _2564;
        float _2566 = cbLight._m0[_2546].x + _864;
        float _2567 = cbLight._m0[_2546].y + _865;
        float _2568 = cbLight._m0[_2546].z + _866;
        float _2572 = inversesqrt(dot(vec3(_2566, _2567, _2568), vec3(_2566, _2567, _2568)));
        float _2573 = _2572 * _2566;
        float _2574 = _2572 * _2567;
        float _2575 = _2572 * _2568;
        float _2576 = dot(vec3(_784, _785, _786), vec3(cbLight._m0[_2546].xyz));
        float _4531 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        float _2579 = isnan(1.0) ? _4531 : (isnan(_4531) ? 1.0 : min(_4531, 1.0));
        float _2580 = dot(vec3(_784, _785, _786), vec3(_2573, _2574, _2575));
        float _4542 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
        float _2583 = isnan(1.0) ? _4542 : (isnan(_4542) ? 1.0 : min(_4542, 1.0));
        float _2584 = dot(vec3(cbLight._m0[_2546].xyz), vec3(_2573, _2574, _2575));
        float _4553 = isnan(0.0) ? _2584 : (isnan(_2584) ? 0.0 : max(_2584, 0.0));
        float _2588 = _2565 * _2565;
        float _2592 = ((_2583 * _2583) * (_2588 + (-1.0))) + 1.0;
        float _2599 = exp2(log2(1.0 - (isnan(1.0) ? _4553 : (isnan(_4553) ? 1.0 : min(_4553, 1.0)))) * 5.0);
        float _2606 = 1.0 - _2565;
        float _2616 = (0.5 / (((_2223 * ((_2579 * _2606) + _2565)) + 9.9999999392252902907785028219223e-09) + (((_2223 * _2606) + _2565) * _2579))) * _2579;
        float _4564 = isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0));
        float _2618 = (isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0))) * (_2588 / ((_2592 * _2592) * 3.141590118408203125));
        float _2619 = isnan(1.0) ? _2070 : (isnan(_2070) ? 1.0 : min(_2070, 1.0));
        _2535 = (((((_2599 * _2245) + _947) * cbLight._m0[_2550].x) * _2618) * _2619) + _2421;
        _2537 = (((((_2599 * _2247) + _949) * cbLight._m0[_2550].y) * _2618) * _2619) + _2423;
        _2539 = (((((_2599 * _2248) + _950) * cbLight._m0[_2550].z) * _2618) * _2619) + _2425;
    }
    float _2754;
    float _2756;
    float _2758;
    float _2760;
    float _2762;
    float _2764;
    if (_2052.y == 0u)
    {
        float _2694 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2695 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2694;
        float _2696 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2694;
        float _2697 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2694;
        uvec4 _2709 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2710 = _2709.x;
        uint _2721 = uint((float(_2709.y) * floor(float(uint(cbSceneParam._m0[85u].y * _885) / _2710))) + floor(float(uint(cbSceneParam._m0[85u].x * _884) / _2710)));
        float _2731 = (log2(_2697 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2732 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
        uint _2735 = uint(isnan(14.0) ? _2732 : (isnan(_2732) ? 14.0 : min(_2732, 14.0)));
        uvec4 _2740 = texelFetch(g_lightClusterGridBuffer, int(((_2735 << 2u) + (_2721 << 6u)) >> 2u));
        uint _2741 = _2740.x;
        uint _2742 = _2709.z;
        float _2842;
        float _2844;
        float _2846;
        float _2848;
        float _2850;
        float _2852;
        if (((((1u << ((_2742 >> 4u) & 15u)) + 4294967295u) & _2741) == 0u) || ((_2742 & 240u) == 0u))
        {
            _2842 = 0.0;
            _2844 = 0.0;
            _2846 = 0.0;
            _2848 = 0.0;
            _2850 = 0.0;
            _2852 = 0.0;
        }
        else
        {
            float _2843;
            float _2845;
            float _2847;
            float _2849;
            float _2851;
            float _2853;
            float _2995 = 0.0;
            float _2996 = 0.0;
            float _2997 = 0.0;
            float _2998 = 0.0;
            float _2999 = 0.0;
            float _3000 = 0.0;
            uint _3001 = 0u;
            uint _3010;
            bool _3011;
            for (;;)
            {
                _3010 = texelFetch(g_lightClassification, int((((_2735 << 5u) + (_2721 << 9u)) + (_3001 << 2u)) >> 2u)).x;
                _3011 = _3010 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3011)
                {
                    frontier_phi_66_pred = _2995;
                    frontier_phi_66_pred_1 = _3000;
                    frontier_phi_66_pred_2 = _2999;
                    frontier_phi_66_pred_3 = _2998;
                    frontier_phi_66_pred_4 = _2997;
                    frontier_phi_66_pred_5 = _2996;
                }
                else
                {
                    float _3140;
                    float _3141;
                    float _3142;
                    float _3143;
                    float _3144;
                    float _3145;
                    uint _3146;
                    _3140 = _2995;
                    _3141 = _2996;
                    _3142 = _2997;
                    _3143 = _2998;
                    _3144 = _2999;
                    _3145 = _3000;
                    _3146 = _3010;
                    float _3067;
                    float _3068;
                    float _3069;
                    float _3070;
                    float _3071;
                    float _3072;
                    for (;;)
                    {
                        uint _3150 = uint(findLSB(_3146)) + (_3001 << 5u);
                        uint _3147 = (_3146 + 4294967295u) & _3146;
                        uint _3152 = _3150 * 48u;
                        vec4 _3166 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3152)).x, texelFetch(g_PointLightRenderingBuffer, int(_3152 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3152 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3152 + 3u)).x));
                        uint _3172 = (_3150 * 48u) + 4u;
                        vec4 _3185 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3172)).x, texelFetch(g_PointLightRenderingBuffer, int(_3172 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3172 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3172 + 3u)).x));
                        uint _3191 = (_3150 * 48u) + 8u;
                        vec3 _3202 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3191)).x, texelFetch(g_PointLightRenderingBuffer, int(_3191 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3191 + 2u)).x));
                        float _3206 = _3166.x - _2695;
                        float _3207 = _3166.y - _2696;
                        float _3208 = _3166.z - _2697;
                        float _3209 = dot(vec3(_3206, _3207, _3208), vec3(_3206, _3207, _3208));
                        float _3212 = inversesqrt(_3209);
                        float _3213 = _3212 * _3206;
                        float _3214 = _3212 * _3207;
                        float _3215 = _3212 * _3208;
                        float _3216 = dot(vec3(_903, _906, _909), vec3(_3213, _3214, _3215));
                        float _3221 = 1.0 - (_3209 * _3166.w);
                        float _4590 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0));
                        float _3222 = isnan(1.0) ? _4590 : (isnan(_4590) ? 1.0 : min(_4590, 1.0));
                        float _3223 = sqrt(_3209) * _3185.w;
                        float _3226 = 1.39999997615814208984375 / (_3223 + 1.39999997615814208984375);
                        float _3227 = _3226 * _3226;
                        float _3230 = ((1.0 - _3227) * _3216) + _3227;
                        float _3233 = _3223 * _3223;
                        float _3237 = ((isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0))) * _3222) / ((_3233 * 0.699999988079071044921875) + 1.0);
                        float _3241 = (-0.0) - _2695;
                        float _3242 = (-0.0) - _2696;
                        float _3243 = (-0.0) - _2697;
                        float _3247 = inversesqrt(dot(vec3(_3241, _3242, _3243), vec3(_3241, _3242, _3243)));
                        float _3248 = _3247 * _3241;
                        float _3249 = _3247 * _3242;
                        float _3250 = _3247 * _3243;
                        float _3258 = exp2(log2(1.0 / ((_3233 * 3.5) + 5.0)) * 0.25);
                        float _3259 = 1.0 - _978;
                        float _3266 = sqrt(1.0 - ((1.0 - (_3259 * _3259)) * (1.0 - (_3258 * _3258))));
                        float _3267 = _3266 * _3266;
                        float _3268 = _3267 * _3267;
                        float _3269 = _3248 + _3213;
                        float _3270 = _3249 + _3214;
                        float _3271 = _3250 + _3215;
                        float _3275 = inversesqrt(dot(vec3(_3269, _3270, _3271), vec3(_3269, _3270, _3271)));
                        float _3279 = dot(vec3(_903, _906, _909), vec3(_3248, _3249, _3250));
                        float _4606 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0));
                        float _3282 = isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0));
                        float _3283 = dot(vec3(_903, _906, _909), vec3(_3275 * _3269, _3275 * _3270, _3275 * _3271));
                        float _4617 = isnan(0.0) ? _3283 : (isnan(_3283) ? 0.0 : max(_3283, 0.0));
                        float _3286 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
                        float _3290 = ((_3286 * _3286) * (_3268 + (-1.0))) + 1.0;
                        float _3291 = _3226 * _3267;
                        float _3292 = _3291 * _3291;
                        float _3295 = ((1.0 - _3292) * _3216) + _3292;
                        float _4628 = isnan(0.0) ? _3295 : (isnan(_3295) ? 0.0 : max(_3295, 0.0));
                        float _3296 = isnan(1.0) ? _4628 : (isnan(_4628) ? 1.0 : min(_4628, 1.0));
                        float _3297 = 1.0 - _3267;
                        float _3307 = (0.5 / (((_3296 * ((_3282 * _3297) + _3267)) + 9.9999999392252902907785028219223e-09) + (((_3296 * _3297) + _3267) * _3282))) * _3296;
                        float _4639 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                        float _3318 = (((_3268 * 3.1415927410125732421875) * (isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0)))) / ((_3290 * _3290) * ((_3233 * 2.1991131305694580078125) + 3.141590118408203125))) * _3222;
                        _3070 = (_3237 * _3185.x) + _3143;
                        _3071 = (_3237 * _3185.y) + _3144;
                        _3072 = (_3237 * _3185.z) + _3145;
                        _3067 = (_3318 * _3202.x) + _3140;
                        _3068 = (_3318 * _3202.y) + _3141;
                        _3069 = (_3318 * _3202.z) + _3142;
                        if (_3147 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3140 = _3067;
                            _3141 = _3068;
                            _3142 = _3069;
                            _3143 = _3070;
                            _3144 = _3071;
                            _3145 = _3072;
                            _3146 = _3147;
                        }
                    }
                    frontier_phi_66_pred = _3067;
                    frontier_phi_66_pred_1 = _3072;
                    frontier_phi_66_pred_2 = _3071;
                    frontier_phi_66_pred_3 = _3070;
                    frontier_phi_66_pred_4 = _3069;
                    frontier_phi_66_pred_5 = _3068;
                }
                _2843 = frontier_phi_66_pred;
                _2853 = frontier_phi_66_pred_1;
                _2851 = frontier_phi_66_pred_2;
                _2849 = frontier_phi_66_pred_3;
                _2847 = frontier_phi_66_pred_4;
                _2845 = frontier_phi_66_pred_5;
                uint _3002 = _3001 + 1u;
                if (_3002 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2995 = _2843;
                    _2996 = _2845;
                    _2997 = _2847;
                    _2998 = _2849;
                    _2999 = _2851;
                    _3000 = _2853;
                    _3001 = _3002;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2842 = _2843;
            _2844 = _2845;
            _2846 = _2847;
            _2848 = _2849;
            _2850 = _2851;
            _2852 = _2853;
        }
        uvec4 _2856 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2857 = _2856.z;
        uint _2859 = (_2857 >> 8u) & 15u;
        float _2963;
        float _2965;
        float _2967;
        float _2969;
        float _2971;
        float _2973;
        if (((4294967295u << _2859) & _2741) == 0u)
        {
            _2963 = _2842;
            _2965 = _2844;
            _2967 = _2846;
            _2969 = _2848;
            _2971 = _2850;
            _2973 = _2852;
        }
        else
        {
            float _2988 = inversesqrt(dot(vec3(_2695, _2696, _2697), vec3(_2695, _2696, _2697)));
            float _2989 = _2988 * _2695;
            float _2990 = _2988 * _2696;
            float _2991 = _2988 * _2697;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2859 < ((_2857 >> 12u) & 15u))
            {
                float _2964;
                float _2966;
                float _2968;
                float _2970;
                float _2972;
                float _2974;
                float _3123 = _2842;
                float _3124 = _2844;
                float _3125 = _2846;
                float _3126 = _2848;
                float _3127 = _2850;
                float _3128 = _2852;
                uint _3129 = _2859;
                uint _3138;
                bool _3139;
                for (;;)
                {
                    _3138 = texelFetch(g_lightClassification, int((((_2735 << 5u) + (_2721 << 9u)) + (_3129 << 2u)) >> 2u)).x;
                    _3139 = _3138 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3139)
                    {
                        frontier_phi_77_pred = _3128;
                        frontier_phi_77_pred_1 = _3127;
                        frontier_phi_77_pred_2 = _3126;
                        frontier_phi_77_pred_3 = _3125;
                        frontier_phi_77_pred_4 = _3124;
                        frontier_phi_77_pred_5 = _3123;
                    }
                    else
                    {
                        float _3332;
                        float _3333;
                        float _3334;
                        float _3335;
                        float _3336;
                        float _3337;
                        float _3626;
                        float _3627;
                        float _3628;
                        float _3629;
                        float _3630;
                        float _3631;
                        float _3345 = _3123;
                        float _3346 = _3124;
                        float _3347 = _3125;
                        float _3348 = _3126;
                        float _3349 = _3127;
                        float _3350 = _3128;
                        uint _3351 = _3138;
                        uint _3352;
                        vec4 _3377;
                        float _3378;
                        vec4 _3393;
                        vec3 _3405;
                        vec4 _3420;
                        vec4 _3435;
                        float _3482;
                        bool _3483;
                        for (;;)
                        {
                            uint _3362 = ((_3129 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3351));
                            _3352 = (_3351 + 4294967295u) & _3351;
                            uint _3364 = _3362 * 40u;
                            _3377 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3364)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3364 + 3u)).x));
                            _3378 = _3377.w;
                            uint _3380 = (_3362 * 40u) + 4u;
                            _3393 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3380)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3380 + 3u)).x));
                            uint _3395 = (_3362 * 40u) + 8u;
                            _3405 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3395)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3395 + 2u)).x));
                            uint _3407 = (_3362 * 40u) + 16u;
                            _3420 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3407)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3407 + 3u)).x));
                            uint _3422 = (_3362 * 40u) + 20u;
                            _3435 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3422)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3422 + 3u)).x));
                            uint _3438 = (_3362 * 40u) + 24u;
                            vec4 _3451 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3438)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3438 + 3u)).x));
                            uint _3457 = (_3362 * 40u) + 28u;
                            vec4 _3470 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3457)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3457 + 3u)).x));
                            _3482 = fma(_2697, _3470.z, fma(_2696, _3470.y, _3470.x * _2695)) + _3470.w;
                            _3483 = !((fma(_2697, _3451.z, fma(_2696, _3451.y, _3451.x * _2695)) + _3451.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3483)
                            {
                                float _3510 = _3377.x - _2695;
                                float _3511 = _3377.y - _2696;
                                float _3512 = _3377.z - _2697;
                                float _3513 = dot(vec3(_3510, _3511, _3512), vec3(_3510, _3511, _3512));
                                float _3516 = inversesqrt(_3513);
                                float _3517 = _3516 * _3510;
                                float _3518 = _3516 * _3511;
                                float _3519 = _3516 * _3512;
                                float _3523 = 1.0 - (_3513 / (_3378 * _3378));
                                float _4650 = isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0));
                                float _3524 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
                                float _3528 = sqrt(_3513) * _3393.w;
                                float _3530 = 1.39999997615814208984375 / (_3528 + 1.39999997615814208984375);
                                float _3531 = _3530 * _3530;
                                float _3534 = ((1.0 - _3531) * dot(vec3(_3517, _3518, _3519), vec3(_903, _906, _909))) + _3531;
                                float _3537 = _3528 * _3528;
                                float _3541 = (fma(_2697, _3420.z, fma(_2696, _3420.y, _3420.x * _2695)) + _3420.w) / _3482;
                                float _3542 = (fma(_2697, _3435.z, fma(_2696, _3435.y, _3435.x * _2695)) + _3435.w) / _3482;
                                float _3546 = 1.0 - dot(vec2(_3541, _3542), vec2(_3541, _3542));
                                float _4666 = isnan(0.0) ? _3546 : (isnan(_3546) ? 0.0 : max(_3546, 0.0));
                                float _3547 = isnan(1.0) ? _4666 : (isnan(_4666) ? 1.0 : min(_4666, 1.0));
                                float _3548 = _3547 * (((isnan(0.0) ? _3534 : (isnan(_3534) ? 0.0 : max(_3534, 0.0))) * _3524) / ((_3537 * 0.699999988079071044921875) + 1.0));
                                float _3560 = exp2(log2(1.0 / ((_3537 * 3.5) + 5.0)) * 0.25);
                                float _3561 = 1.0 - _978;
                                float _3568 = sqrt(1.0 - ((1.0 - (_3561 * _3561)) * (1.0 - (_3560 * _3560))));
                                float _3569 = _3568 * _3568;
                                float _3570 = _3569 * _3569;
                                float _3571 = _3517 - _2989;
                                float _3572 = _3518 - _2990;
                                float _3573 = _3519 - _2991;
                                float _3577 = inversesqrt(dot(vec3(_3571, _3572, _3573), vec3(_3571, _3572, _3573)));
                                float _3581 = dot(vec3(_903, _906, _909), vec3((-0.0) - _2989, (-0.0) - _2990, (-0.0) - _2991));
                                float _4677 = isnan(0.0) ? _3581 : (isnan(_3581) ? 0.0 : max(_3581, 0.0));
                                float _3584 = isnan(1.0) ? _4677 : (isnan(_4677) ? 1.0 : min(_4677, 1.0));
                                float _3585 = dot(vec3(_903, _906, _909), vec3(_3577 * _3571, _3577 * _3572, _3577 * _3573));
                                float _4688 = isnan(0.0) ? _3585 : (isnan(_3585) ? 0.0 : max(_3585, 0.0));
                                float _3588 = isnan(1.0) ? _4688 : (isnan(_4688) ? 1.0 : min(_4688, 1.0));
                                float _3592 = ((_3588 * _3588) * (_3570 + (-1.0))) + 1.0;
                                float _3593 = _3530 * _3569;
                                float _3594 = _3593 * _3593;
                                float _3600 = ((1.0 - _3594) * dot(vec3(_903, _906, _909), vec3(_3517, _3518, _3519))) + _3594;
                                float _4699 = isnan(0.0) ? _3600 : (isnan(_3600) ? 0.0 : max(_3600, 0.0));
                                float _3601 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
                                float _3602 = 1.0 - _3569;
                                float _3612 = (0.5 / (((_3601 * ((_3584 * _3602) + _3569)) + 9.9999999392252902907785028219223e-09) + (((_3601 * _3602) + _3569) * _3584))) * _3601;
                                float _4710 = isnan(0.0) ? _3612 : (isnan(_3612) ? 0.0 : max(_3612, 0.0));
                                float _3622 = (_3547 * _3524) * (((_3570 * 3.1415927410125732421875) * (isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0)))) / ((_3592 * _3592) * ((_3537 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3548 * _3393.y;
                                frontier_phi_83_pred_1 = _3548 * _3393.x;
                                frontier_phi_83_pred_2 = _3622 * _3405.z;
                                frontier_phi_83_pred_3 = _3622 * _3405.y;
                                frontier_phi_83_pred_4 = _3622 * _3405.x;
                                frontier_phi_83_pred_5 = _3548 * _3393.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3630 = frontier_phi_83_pred;
                            _3629 = frontier_phi_83_pred_1;
                            _3628 = frontier_phi_83_pred_2;
                            _3627 = frontier_phi_83_pred_3;
                            _3626 = frontier_phi_83_pred_4;
                            _3631 = frontier_phi_83_pred_5;
                            _3335 = _3629 + _3348;
                            _3336 = _3630 + _3349;
                            _3337 = _3631 + _3350;
                            _3332 = _3626 + _3345;
                            _3333 = _3627 + _3346;
                            _3334 = _3628 + _3347;
                            if (_3352 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3345 = _3332;
                                _3346 = _3333;
                                _3347 = _3334;
                                _3348 = _3335;
                                _3349 = _3336;
                                _3350 = _3337;
                                _3351 = _3352;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3337;
                        frontier_phi_77_pred_1 = _3336;
                        frontier_phi_77_pred_2 = _3335;
                        frontier_phi_77_pred_3 = _3334;
                        frontier_phi_77_pred_4 = _3333;
                        frontier_phi_77_pred_5 = _3332;
                    }
                    _2974 = frontier_phi_77_pred;
                    _2972 = frontier_phi_77_pred_1;
                    _2970 = frontier_phi_77_pred_2;
                    _2968 = frontier_phi_77_pred_3;
                    _2966 = frontier_phi_77_pred_4;
                    _2964 = frontier_phi_77_pred_5;
                    uint _3130 = _3129 + 1u;
                    if (_3130 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3123 = _2964;
                        _3124 = _2966;
                        _3125 = _2968;
                        _3126 = _2970;
                        _3127 = _2972;
                        _3128 = _2974;
                        _3129 = _3130;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _2968;
                frontier_phi_58_59_ladder_1 = _2974;
                frontier_phi_58_59_ladder_2 = _2972;
                frontier_phi_58_59_ladder_3 = _2970;
                frontier_phi_58_59_ladder_4 = _2966;
                frontier_phi_58_59_ladder_5 = _2964;
            }
            else
            {
                frontier_phi_58_59_ladder = _2846;
                frontier_phi_58_59_ladder_1 = _2852;
                frontier_phi_58_59_ladder_2 = _2850;
                frontier_phi_58_59_ladder_3 = _2848;
                frontier_phi_58_59_ladder_4 = _2844;
                frontier_phi_58_59_ladder_5 = _2842;
            }
            _2963 = frontier_phi_58_59_ladder_5;
            _2965 = frontier_phi_58_59_ladder_4;
            _2967 = frontier_phi_58_59_ladder;
            _2969 = frontier_phi_58_59_ladder_3;
            _2971 = frontier_phi_58_59_ladder_2;
            _2973 = frontier_phi_58_59_ladder_1;
        }
        float _2978 = isnan(1.0) ? _962 : (isnan(_962) ? 1.0 : min(_962, 1.0));
        _2754 = (_2978 * _2969) + _2187;
        _2756 = (_2978 * _2971) + _2189;
        _2758 = (_2978 * _2973) + _2191;
        _2760 = ((_2963 * _947) * _2978) + _2535;
        _2762 = ((_2965 * _949) * _2978) + _2537;
        _2764 = ((_2967 * _950) * _2978) + _2539;
    }
    else
    {
        _2754 = _2187;
        _2756 = _2189;
        _2758 = _2191;
        _2760 = _2535;
        _2762 = _2537;
        _2764 = _2539;
    }
    float _4726 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
    float _4737 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
    float _4748 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _2781 = ((isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0))) * (_2754 + ((isnan(0.0) ? _1724 : (isnan(_1724) ? 0.0 : max(_1724, 0.0))) * _962))) + ((_2760 + ((isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0))) * _1803)) * cbPerFrame._m0[3u].x);
    float _2782 = ((isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0))) * (_2756 + ((isnan(0.0) ? _1727 : (isnan(_1727) ? 0.0 : max(_1727, 0.0))) * _962))) + ((_2762 + ((isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0))) * _1803)) * cbPerFrame._m0[3u].x);
    float _2783 = ((isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0))) * (_2758 + ((isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0))) * _962))) + ((_2764 + ((isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0))) * _1803)) * cbPerFrame._m0[3u].x);
    uint _2784 = _922 + 6u;
    float _2792 = _884 / cbSceneParam._m0[86u].x;
    float _2793 = _885 / cbSceneParam._m0[86u].y;
    vec4 _2807 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2792, _2793, (log2((isnan(cbSceneParam._m0[77u].w) ? _807 : (isnan(_807) ? cbSceneParam._m0[77u].w : min(_807, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2809 = _2807.x;
    float _2810 = _2807.y;
    float _2811 = _2807.z;
    float _2812 = _2807.w;
    float _2905;
    float _2907;
    float _2909;
    float _2911;
    if (_807 > cbSceneParam._m0[78u].w)
    {
        float _2867 = isnan(_807) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _807 : min(cbSceneParam._m0[80u].w, _807));
        float _2868 = _2867 / _807;
        float _2879 = _2868 * _857;
        float _2880 = _858 * _2868;
        float _2881 = (-0.0) - _2880;
        float _2883 = _2868 * _859;
        float _2885 = (cbSceneParam._m0[77u].w * _2881) / _2867;
        float _2886 = _2885 + cbSceneParam._m0[79u].w;
        float _2887 = cbSceneParam._m0[79u].w - _2880;
        float _2893 = sqrt(((_2879 * _2879) + (_2880 * _2880)) + (_2883 * _2883));
        float _2896 = (1.0 - (cbSceneParam._m0[77u].w / _2867)) * _2893;
        float _2901 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2903 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3080;
        if (abs((_2881 - _2885) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3080 = ((((_2886 > 0.0) ? exp2(_2901 * _2886) : (2.0 - exp2(_2903 * _2886))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2896;
        }
        else
        {
            float _3024 = 1.0 / cbSceneParam._m0[80u].x;
            float _3025 = isnan(_2887) ? _2886 : (isnan(_2886) ? _2887 : max(_2886, _2887));
            float _3026 = isnan(_2887) ? _2886 : (isnan(_2886) ? _2887 : min(_2886, _2887));
            float _3035 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : min(_3025, 0.0));
            float _3036 = isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : min(_3026, 0.0));
            _3080 = ((abs(_2893 / _2881) * cbSceneParam._m0[80u].y) * ((((_3035 - _3036) * 2.0) - ((exp2(_2901 * (isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0)))) - exp2(_2901 * (isnan(0.0) ? _3026 : (isnan(_3026) ? 0.0 : max(_3026, 0.0))))) * _3024)) - ((exp2(_2903 * _3035) - exp2(_2903 * _3036)) * _3024))) + (_2896 * cbSceneParam._m0[80u].z);
        }
        vec4 _3082 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2792, _2793, 1.0), 0.0);
        float _3091 = exp2((_3080 * (-1.44269502162933349609375)) * (1.0 - _3082.w));
        float _3092 = log2(_3091);
        float _3108 = log2(_2812);
        _2905 = (exp2(_3108 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3092 * cbSceneParam._m0[78u].x)) * _3082.x) / cbSceneParam._m0[78u].x)) + _2809;
        _2907 = (exp2(_3108 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3092 * cbSceneParam._m0[78u].y)) * _3082.y) / cbSceneParam._m0[78u].y)) + _2810;
        _2909 = (exp2(_3108 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3092 * cbSceneParam._m0[78u].z)) * _3082.z) / cbSceneParam._m0[78u].z)) + _2811;
        _2911 = _3091 * _2812;
    }
    else
    {
        _2905 = _2809;
        _2907 = _2810;
        _2909 = _2811;
        _2911 = _2812;
    }
    bool _3118;
    vec4 _2921;
    vec4 _2943;
    float _2945;
    float _2949;
    float _2950;
    float _2951;
    float _2952;
    bool _2962;
    for (;;)
    {
        _2921 = cbMatDynParam._m0[0u];
        float _2923 = roundEven(_2921.y);
        bool _2924 = _2923 == 3.0;
        float _2925 = log2(_2911);
        float _2932 = exp2(_2925 * cbSceneParam._m0[78u].x) * _2781;
        float _2933 = exp2(_2925 * cbSceneParam._m0[78u].y) * _2782;
        float _2934 = exp2(_2925 * cbSceneParam._m0[78u].z) * _2783;
        float _2941 = _873 + (-0.5);
        _2943 = cbMtdParam._m0[1u];
        _2945 = _2943.y * _2941;
        float _2948 = (_2923 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2949 = _2948 * (_2924 ? _2932 : (_2932 + (cbSceneParam._m0[72u].w * _2905)));
        _2950 = _2948 * (_2924 ? _2933 : (_2933 + (cbSceneParam._m0[72u].w * _2907)));
        _2951 = _2948 * (_2924 ? _2934 : (_2934 + (cbSceneParam._m0[72u].w * _2909)));
        _2952 = _2941 * 0.999000012874603271484375;
        _2962 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2962)
        {
            if ((cbInstanceData._m0[_922 + 7u].x + _2952) < 0.5)
            {
                _3118 = true;
                break;
            }
        }
        uint _3059 = _923 + uint(_2921.w);
        if ((cbInstanceData._m0[_3059].w < 1.0) && ((cbInstanceData._m0[_3059].w + _2952) < 0.5))
        {
            _3118 = true;
            break;
        }
        if ((_2945 + 1.0) < _2943.x)
        {
            _3118 = true;
            break;
        }
        _3118 = false;
        break;
    }
    float _3323;
    if (_3118)
    {
        discard_state = true;
        _3323 = 0.0;
    }
    else
    {
        _3323 = cbInstanceData._m0[_2784].w;
    }
    SV_Target.x = _2949;
    SV_Target.y = _2950;
    SV_Target.z = _2951;
    SV_Target.w = _3323;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2784].w;
    discard_exit();
}


