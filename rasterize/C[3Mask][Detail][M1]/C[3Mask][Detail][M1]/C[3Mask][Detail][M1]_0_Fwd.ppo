#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_20;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1353;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _215 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _216 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _217 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _223 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _230 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _237 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _260 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _266 = _260.x * cbMtdParam._m0[10u].x;
    float _267 = _260.y * cbMtdParam._m0[10u].y;
    float _268 = _260.z * cbMtdParam._m0[10u].z;
    vec4 _286 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _336 = cbMtdParam._m0[18u].y * texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x;
    float _347 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].x * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].y * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _336)) + 1.0;
    float _3682 = isnan(0.0) ? _347 : (isnan(_347) ? 0.0 : max(_347, 0.0));
    float _348 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
    float _355 = (_348 * ((_286.x * cbMtdParam._m0[11u].x) - _266)) + _266;
    float _356 = (_348 * ((_286.y * cbMtdParam._m0[11u].y) - _267)) + _267;
    float _357 = (_348 * ((_286.z * cbMtdParam._m0[11u].z) - _268)) + _268;
    vec4 _375 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _402 = ((cbMtdParam._m0[17u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _336)) + 1.0;
    float _3693 = isnan(0.0) ? _402 : (isnan(_402) ? 0.0 : max(_402, 0.0));
    float _403 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
    float _410 = (_403 * ((_375.x * cbMtdParam._m0[12u].x) - _355)) + _355;
    float _411 = (_403 * ((_375.y * cbMtdParam._m0[12u].y) - _356)) + _356;
    float _412 = (_403 * ((_375.z * cbMtdParam._m0[12u].z) - _357)) + _357;
    vec4 _429 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _454 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[18u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[18u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _336)) + 1.0;
    float _3704 = isnan(0.0) ? _454 : (isnan(_454) ? 0.0 : max(_454, 0.0));
    float _455 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
    vec4 _483 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _491 = ((((_455 * ((_429.x * cbMtdParam._m0[13u].x) - _410)) + _410) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _483.x;
    float _494 = ((((_455 * ((_429.y * cbMtdParam._m0[13u].y) - _411)) + _411) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _483.y;
    float _497 = ((((_455 * ((_429.z * cbMtdParam._m0[13u].z) - _412)) + _412) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _483.z;
    vec4 _517 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _546 = (TEXCOORD_5.x - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.z) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.w) + cbTextureTilingScale._m0[18u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].z + 1.0);
    float _3715 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _547 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
    float _554 = (_547 * ((_517.x * cbMtdParam._m0[14u].x) - _491)) + _491;
    float _555 = (_547 * ((_517.y * cbMtdParam._m0[14u].y) - _494)) + _494;
    float _556 = (_547 * ((_517.z * cbMtdParam._m0[14u].z) - _497)) + _497;
    vec4 _569 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _571 = _569.x;
    float _589 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _571) * _348) + _571;
    float _606 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _589) * _403) + _589;
    float _623 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _606) * _455) + _606;
    float _625 = _623 - (_623 * TEXCOORD_5.x);
    vec4 _638 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _660 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _662 = _660.x;
    float _663 = _660.y;
    float _666 = cbMtdParam._m0[17u].y * _660.z;
    vec4 _678 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _687 = (((cbMtdParam._m0[17u].x * _678.z) - _666) * _348) + _666;
    vec4 _700 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _712 = (((cbMtdParam._m0[16u].w * _700.z) - _687) * _403) + _687;
    vec4 _725 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _734 = (((cbMtdParam._m0[16u].z * _725.z) - _712) * _455) + _712;
    float _739 = ((cbMtdParam._m0[16u].x * TEXCOORD_5.x) * ((_638.z * cbMtdParam._m0[17u].z) - _734)) + _734;
    vec4 _752 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _764 = ((_678.x - _662) * _348) + _662;
    float _765 = ((_678.y - _663) * _348) + _663;
    float _770 = ((_700.x - _764) * _403) + _764;
    float _771 = ((_700.y - _765) * _403) + _765;
    float _780 = ((((_725.x - _770) * _455) + _770) * 2.0) + (-1.0);
    float _781 = ((((_725.y - _771) * _455) + _771) * 2.0) + (-1.0);
    float _782 = dot(vec2(_780, _781), vec2(_780, _781));
    float _3726 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _787 = sqrt(1.0 - (isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0))));
    float _797 = ((((_752.x * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _780) + ((((_638.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[15u].y);
    float _798 = ((((_752.y * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _781) + ((((_638.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[15u].y);
    float _801 = fma(_787, _230 * NORMAL.x, fma(_798, _237 * TANGENT.x, (_223 * _215) * _797));
    float _804 = fma(_787, _230 * NORMAL.y, fma(_798, _237 * TANGENT.y, (_223 * _216) * _797));
    float _807 = fma(_787, _230 * NORMAL.z, fma(_798, _237 * TANGENT.z, (_223 * _217) * _797));
    float _811 = inversesqrt(dot(vec3(_801, _804, _807), vec3(_801, _804, _807)));
    float _812 = _811 * _801;
    float _813 = _811 * _804;
    float _814 = _811 * _807;
    float _3737 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _815 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
    float _3748 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _3759 = isnan(0.0) ? _555 : (isnan(_555) ? 0.0 : max(_555, 0.0));
    float _3770 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _3781 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _819 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
    float _835 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _875 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _885 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _875);
    float _886 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _875);
    float _887 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _875);
    float _891 = inversesqrt(dot(vec3(_885, _886, _887), vec3(_885, _886, _887)));
    float _892 = _885 * _891;
    float _893 = _886 * _891;
    float _894 = _887 * _891;
    float _900 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _901 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _919 = fma(_814, cbSceneParam._m0[5u].z, fma(_813, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _812));
    float _922 = fma(_814, cbSceneParam._m0[6u].z, fma(_813, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _812));
    float _925 = fma(_814, cbSceneParam._m0[7u].z, fma(_813, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _812));
    uint _938 = uint(roundEven(NORMAL.w)) * 13u;
    uint _940 = (_938 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _946 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0)))) * cbInstanceData._m0[_940].x;
    float _947 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0)))) * cbInstanceData._m0[_940].y;
    float _948 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0)))) * cbInstanceData._m0[_940].z;
    float _3792 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
    float _949 = isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0));
    float _3803 = isnan(0.0) ? _947 : (isnan(_947) ? 0.0 : max(_947, 0.0));
    float _950 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
    float _3814 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _951 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
    float _952 = 1.0 - _819;
    float _953 = _949 * _952;
    float _954 = _950 * _952;
    float _955 = _951 * _952;
    float _960 = (_949 + (-0.039999999105930328369140625)) * _819;
    float _961 = (_950 + (-0.039999999105930328369140625)) * _819;
    float _962 = (_951 + (-0.039999999105930328369140625)) * _819;
    float _963 = _960 + 0.039999999105930328369140625;
    float _965 = _961 + 0.039999999105930328369140625;
    float _966 = _962 + 0.039999999105930328369140625;
    vec4 _975 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _900, cbSceneParam._m0[86u].y * _901));
    float _978 = _975.x * TEXCOORD_5.w;
    float _979 = dot(vec3(_812, _813, _814), vec3(_892, _893, _894));
    float _982 = _979 * 2.0;
    float _986 = (_982 * _812) - _892;
    float _987 = (_982 * _813) - _893;
    float _988 = (_982 * _814) - _894;
    float _992 = abs(dot(vec3(_892, _893, _894), vec3(_812, _813, _814)));
    float _3825 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
    float _994 = sqrt(_815);
    float _1007 = exp2((_994 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_994 * 3.0));
    float _1013 = (1.0 - _1007) * ((_994 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1014 = _1007 * _994;
    float _1042 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1046 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1050 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1352;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1077 = fma(_1050, cbModelParam._m0[26u].z, fma(_1046, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1042));
        float _1081 = fma(_1050, cbModelParam._m0[27u].z, fma(_1046, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1042));
        float _1085 = fma(_1050, cbModelParam._m0[28u].z, fma(_1046, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1042));
        float _1110 = _1042 + _812;
        float _1111 = _1046 + _813;
        float _1112 = _1050 + _814;
        float _1122 = fma(_1112, cbModelParam._m0[26u].z, fma(_1111, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1110)) - _1077;
        float _1123 = fma(_1112, cbModelParam._m0[27u].z, fma(_1111, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1110)) - _1081;
        float _1124 = fma(_1112, cbModelParam._m0[28u].z, fma(_1111, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1110)) - _1085;
        float _1128 = inversesqrt(dot(vec3(_1122, _1123, _1124), vec3(_1122, _1123, _1124)));
        float _1141 = ((_1128 * _1122) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1077 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1142 = ((_1128 * _1123) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1081 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1143 = ((_1128 * _1124) / cbModelParam._m0[34u].z) + ((((((_1085 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1146 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1141, _1142, _1143), 0.0);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1141, _1142, _1143), 0.0);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1141, _1142, _1143), 0.0);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1141, _1142, _1143), 0.0);
        float _1180 = exp2((_1146.w + (-0.5)) * 20.0) * 2.0;
        float _1181 = _1180 * (_1146.x + (-0.5));
        float _1182 = _1180 * (_1146.y + (-0.5));
        float _1183 = _1180 * (_1146.z + (-0.5));
        float _1190 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1191 = _1190 * (_1153.x + (-0.5));
        float _1192 = _1190 * (_1153.y + (-0.5));
        float _1193 = _1190 * (_1153.z + (-0.5));
        float _1200 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1201 = _1200 * (_1160.x + (-0.5));
        float _1202 = _1200 * (_1160.y + (-0.5));
        float _1203 = _1200 * (_1160.z + (-0.5));
        float _1210 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1211 = _1210 * (_1167.x + (-0.5));
        float _1212 = _1210 * (_1167.y + (-0.5));
        float _1213 = _1210 * (_1167.z + (-0.5));
        float _1214 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1215 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1216 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1217 = _1181 * 0.5;
        float _1218 = _1191 * 0.5;
        float _1219 = _1201 * 0.5;
        float _1220 = dot(vec3(_1217, _1218, _1219), vec3(_1217, _1218, _1219));
        float _1225 = (_1220 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1220);
        float _1234 = (dot(vec3(_812, _813, _814), vec3(_1225 * _1217, _1225 * _1218, _1225 * _1219)) + 1.0) * 0.5;
        float _3851 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1244 = sqrt(((_1218 * _1218) + (_1217 * _1217)) + (_1219 * _1219)) / (_1214 + 9.9999997473787516355514526367188e-06);
        float _3862 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
        float _1246 = _1245 * 2.0;
        float _1250 = (1.0 - _1245) / (_1245 + 1.0);
        float _3873 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
        float _1260 = ((((1.0 - _1251) * (_1246 + 2.0)) * exp2(log2(isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0))) * (_1246 + 1.0))) + _1251) * _1214;
        float _1261 = _1182 * 0.5;
        float _1262 = _1192 * 0.5;
        float _1263 = _1202 * 0.5;
        float _1264 = dot(vec3(_1261, _1262, _1263), vec3(_1261, _1262, _1263));
        float _1269 = (_1264 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1264);
        float _1277 = (dot(vec3(_812, _813, _814), vec3(_1269 * _1261, _1269 * _1262, _1269 * _1263)) + 1.0) * 0.5;
        float _3884 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1286 = sqrt(((_1262 * _1262) + (_1261 * _1261)) + (_1263 * _1263)) / (_1215 + 9.9999997473787516355514526367188e-06);
        float _3895 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
        float _1288 = _1287 * 2.0;
        float _1292 = (1.0 - _1287) / (_1287 + 1.0);
        float _3906 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
        float _1302 = ((((1.0 - _1293) * (_1288 + 2.0)) * exp2(log2(isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * (_1288 + 1.0))) + _1293) * _1215;
        float _1303 = _1183 * 0.5;
        float _1304 = _1193 * 0.5;
        float _1305 = _1203 * 0.5;
        float _1306 = dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305));
        float _1311 = (_1306 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1306);
        float _1319 = (dot(vec3(_812, _813, _814), vec3(_1311 * _1303, _1311 * _1304, _1311 * _1305)) + 1.0) * 0.5;
        float _3917 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1328 = sqrt(((_1304 * _1304) + (_1303 * _1303)) + (_1305 * _1305)) / (_1216 + 9.9999997473787516355514526367188e-06);
        float _3928 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1329 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1330 = _1329 * 2.0;
        float _1334 = (1.0 - _1329) / (_1329 + 1.0);
        float _3939 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
        float _1344 = ((((1.0 - _1335) * (_1330 + 2.0)) * exp2(log2(isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * (_1330 + 1.0))) + _1335) * _1216;
        _1352 = _1183;
        _1354 = _1182;
        _1355 = _1181;
        _1356 = _1193;
        _1357 = _1192;
        _1358 = _1191;
        _1359 = _1203;
        _1360 = _1202;
        _1361 = _1201;
        _1362 = _1216;
        _1363 = _1215;
        _1364 = _1214;
        _1365 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)));
        _1366 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)));
        _1367 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0)));
    }
    else
    {
        _1352 = _1353;
        _1354 = _1353;
        _1355 = _1353;
        _1356 = _1353;
        _1357 = _1353;
        _1358 = _1353;
        _1359 = _1353;
        _1360 = _1353;
        _1361 = _1353;
        _1362 = _1353;
        _1363 = _1353;
        _1364 = _1353;
        _1365 = 0.0;
        _1366 = 0.0;
        _1367 = 0.0;
    }
    float _1662;
    float _1663;
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1393 = fma(_1050, cbModelParam._m0[30u].z, fma(_1046, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1042));
        float _1397 = fma(_1050, cbModelParam._m0[31u].z, fma(_1046, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1042));
        float _1401 = fma(_1050, cbModelParam._m0[32u].z, fma(_1046, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1042));
        float _1424 = _1042 + _812;
        float _1425 = _1046 + _813;
        float _1426 = _1050 + _814;
        float _1436 = fma(_1426, cbModelParam._m0[30u].z, fma(_1425, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1424)) - _1393;
        float _1437 = fma(_1426, cbModelParam._m0[31u].z, fma(_1425, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1424)) - _1397;
        float _1438 = fma(_1426, cbModelParam._m0[32u].z, fma(_1425, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1424)) - _1401;
        float _1442 = inversesqrt(dot(vec3(_1436, _1437, _1438), vec3(_1436, _1437, _1438)));
        float _1455 = ((_1442 * _1436) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1393 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1456 = ((_1442 * _1437) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1397 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1457 = ((_1442 * _1438) / cbModelParam._m0[35u].z) + ((((((_1401 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1459 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1455, _1456, _1457), 0.0);
        vec4 _1466 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1455, _1456, _1457), 0.0);
        vec4 _1473 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1455, _1456, _1457), 0.0);
        vec4 _1480 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1455, _1456, _1457), 0.0);
        float _1492 = exp2((_1459.w + (-0.5)) * 20.0) * 2.0;
        float _1493 = _1492 * (_1459.x + (-0.5));
        float _1494 = _1492 * (_1459.y + (-0.5));
        float _1495 = _1492 * (_1459.z + (-0.5));
        float _1502 = exp2((_1466.w + (-0.5)) * 20.0) * 2.0;
        float _1503 = _1502 * (_1466.x + (-0.5));
        float _1504 = _1502 * (_1466.y + (-0.5));
        float _1505 = _1502 * (_1466.z + (-0.5));
        float _1512 = exp2((_1473.w + (-0.5)) * 20.0) * 2.0;
        float _1513 = _1512 * (_1473.x + (-0.5));
        float _1514 = _1512 * (_1473.y + (-0.5));
        float _1515 = _1512 * (_1473.z + (-0.5));
        float _1522 = exp2((_1480.w + (-0.5)) * 20.0) * 2.0;
        float _1523 = _1522 * (_1480.x + (-0.5));
        float _1524 = _1522 * (_1480.y + (-0.5));
        float _1525 = _1522 * (_1480.z + (-0.5));
        float _1526 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1527 = isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0));
        float _1528 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1529 = _1493 * 0.5;
        float _1530 = _1503 * 0.5;
        float _1531 = _1513 * 0.5;
        float _1532 = dot(vec3(_1529, _1530, _1531), vec3(_1529, _1530, _1531));
        float _1537 = (_1532 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1532);
        float _1545 = (dot(vec3(_812, _813, _814), vec3(_1537 * _1529, _1537 * _1530, _1537 * _1531)) + 1.0) * 0.5;
        float _3980 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1554 = sqrt(((_1530 * _1530) + (_1529 * _1529)) + (_1531 * _1531)) / (_1526 + 9.9999997473787516355514526367188e-06);
        float _3991 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1555 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _1556 = _1555 * 2.0;
        float _1560 = (1.0 - _1555) / (_1555 + 1.0);
        float _4002 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1561 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
        float _1570 = ((((1.0 - _1561) * (_1556 + 2.0)) * exp2(log2(isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * (_1556 + 1.0))) + _1561) * _1526;
        float _1571 = _1494 * 0.5;
        float _1572 = _1504 * 0.5;
        float _1573 = _1514 * 0.5;
        float _1574 = dot(vec3(_1571, _1572, _1573), vec3(_1571, _1572, _1573));
        float _1579 = (_1574 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1574);
        float _1587 = (dot(vec3(_812, _813, _814), vec3(_1579 * _1571, _1579 * _1572, _1579 * _1573)) + 1.0) * 0.5;
        float _4013 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1596 = sqrt(((_1572 * _1572) + (_1571 * _1571)) + (_1573 * _1573)) / (_1527 + 9.9999997473787516355514526367188e-06);
        float _4024 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1597 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
        float _1598 = _1597 * 2.0;
        float _1602 = (1.0 - _1597) / (_1597 + 1.0);
        float _4035 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1603 = isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0));
        float _1612 = ((((1.0 - _1603) * (_1598 + 2.0)) * exp2(log2(isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * (_1598 + 1.0))) + _1603) * _1527;
        float _1613 = _1495 * 0.5;
        float _1614 = _1505 * 0.5;
        float _1615 = _1515 * 0.5;
        float _1616 = dot(vec3(_1613, _1614, _1615), vec3(_1613, _1614, _1615));
        float _1621 = (_1616 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1616);
        float _1629 = (dot(vec3(_812, _813, _814), vec3(_1621 * _1613, _1621 * _1614, _1621 * _1615)) + 1.0) * 0.5;
        float _4046 = isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0));
        float _1638 = sqrt(((_1614 * _1614) + (_1613 * _1613)) + (_1615 * _1615)) / (_1528 + 9.9999997473787516355514526367188e-06);
        float _4057 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1639 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
        float _1640 = _1639 * 2.0;
        float _1644 = (1.0 - _1639) / (_1639 + 1.0);
        float _4068 = isnan(0.0) ? _1644 : (isnan(_1644) ? 0.0 : max(_1644, 0.0));
        float _1645 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
        float _1654 = ((((1.0 - _1645) * (_1640 + 2.0)) * exp2(log2(isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0))) * (_1640 + 1.0))) + _1645) * _1528;
        _1662 = _1495;
        _1663 = _1494;
        _1664 = _1493;
        _1665 = _1505;
        _1666 = _1504;
        _1667 = _1503;
        _1668 = _1515;
        _1669 = _1514;
        _1670 = _1513;
        _1671 = _1528;
        _1672 = _1527;
        _1673 = _1526;
        _1674 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0)));
        _1675 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0)));
        _1676 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0)));
    }
    else
    {
        _1662 = _1353;
        _1663 = _1353;
        _1664 = _1353;
        _1665 = _1353;
        _1666 = _1353;
        _1667 = _1353;
        _1668 = _1353;
        _1669 = _1353;
        _1670 = _1353;
        _1671 = _1353;
        _1672 = _1353;
        _1673 = _1353;
        _1674 = 0.0;
        _1675 = 0.0;
        _1676 = 0.0;
    }
    float _1686 = (cbModelParam._m0[1u].x * (_1674 - _1365)) + _1365;
    float _1687 = (cbModelParam._m0[1u].x * (_1675 - _1366)) + _1366;
    float _1688 = (cbModelParam._m0[1u].x * (_1676 - _1367)) + _1367;
    float _1709 = fma(_1688, cbSceneParam._m0[89u].z, fma(_1687, cbSceneParam._m0[89u].y, _1686 * cbSceneParam._m0[89u].x));
    float _1712 = fma(_1688, cbSceneParam._m0[90u].z, fma(_1687, cbSceneParam._m0[90u].y, _1686 * cbSceneParam._m0[90u].x));
    float _1715 = fma(_1688, cbSceneParam._m0[91u].z, fma(_1687, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1686));
    float _1730 = _986 * 0.5;
    float _1731 = _987 * 0.5;
    float _1732 = _988 * 0.5;
    float _1733 = dot(vec4(_1730, _1731, _1732, 1.0), vec4(_1664, _1667, _1670, _1673));
    float _1736 = dot(vec4(_1730, _1731, _1732, 1.0), vec4(_1663, _1666, _1669, _1672));
    float _1739 = dot(vec4(_1730, _1731, _1732, 1.0), vec4(_1662, _1665, _1668, _1671));
    float _1773;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1746 = dot(vec4(_1730, _1731, _1732, 1.0), vec4(_1352, _1356, _1359, _1362));
        float _1750 = dot(vec4(_1730, _1731, _1732, 1.0), vec4(_1354, _1357, _1360, _1363));
        float _1754 = dot(vec4(_1730, _1731, _1732, 1.0), vec4(_1355, _1358, _1361, _1364));
        float _1761 = dot(vec4(cbModelParam._m0[39u]), vec4(_1730, _1731, _1732, 1.0));
        _1773 = dot(vec3(isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0)), isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0)), isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1761) ? 0.0 : (isnan(0.0) ? _1761 : max(0.0, _1761))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1773 = 1.0;
    }
    float _1784;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1775 = dot(vec4(cbModelParam._m0[40u]), vec4(_1730, _1731, _1732, 1.0));
        _1784 = dot(vec3(isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0)), isnan(0.0) ? _1736 : (isnan(_1736) ? 0.0 : max(_1736, 0.0)), isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1775) ? 0.0 : (isnan(0.0) ? _1775 : max(0.0, _1775))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1784 = 1.0;
    }
    float _1788 = (_1784 * cbModelParam._m0[1u].x) + (_1773 * (1.0 - cbModelParam._m0[1u].x));
    float _1798 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _815);
    float _1799 = isnan(_1798) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1798 : min(cbModelParam._m0[25u].z, _1798));
    float _1879;
    float _1881;
    float _1883;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1846 = fma(_1050, cbModelParam._m0[13u].z, fma(_1046, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1042)) + cbModelParam._m0[13u].w;
        float _1850 = fma(_1050, cbModelParam._m0[14u].z, fma(_1046, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1042)) + cbModelParam._m0[14u].w;
        float _1854 = fma(_1050, cbModelParam._m0[15u].z, fma(_1046, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1042)) + cbModelParam._m0[15u].w;
        float _1857 = fma(_988, cbModelParam._m0[13u].z, fma(_987, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _986));
        float _1860 = fma(_988, cbModelParam._m0[14u].z, fma(_987, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _986));
        float _1863 = fma(_988, cbModelParam._m0[15u].z, fma(_987, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _986));
        float _1891;
        if (_1857 > 0.0)
        {
            _1891 = abs((1.0 - _1846) / _1857);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1857 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1846 + 1.0) / _1857);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1891 = frontier_phi_14_12_ladder;
        }
        float _2095;
        if (_1860 > 0.0)
        {
            _2095 = abs((1.0 - _1850) / _1860);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1860 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1850 + 1.0) / _1860);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2095 = frontier_phi_23_19_ladder;
        }
        float _2349;
        if (_1863 > 0.0)
        {
            _2349 = abs((1.0 - _1854) / _1863);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1863 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1854 + 1.0) / _1863);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2349 = frontier_phi_35_30_ladder;
        }
        float _2351 = isnan(_2095) ? _1891 : (isnan(_1891) ? _2095 : min(_1891, _2095));
        float _2352 = isnan(_2349) ? _2351 : (isnan(_2351) ? _2349 : min(_2351, _2349));
        float _2356 = (_2352 * _1857) + _1846;
        float _2357 = (_2352 * _1860) + _1850;
        float _2358 = (_2352 * _1863) + _1854;
        float _2359 = _2352 * 9.9999997473787516355514526367188e-05;
        float _2361 = (-1.0) - _2359;
        float _2363 = _2359 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2358 > _2363) || ((_2358 < _2361) || ((_2357 > _2363) || ((_2357 < _2361) || ((_2356 < _2361) || (_2356 > _2363))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2486 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2358, cbModelParam._m0[9u].z, fma(_2357, cbModelParam._m0[9u].y, _2356 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2358, cbModelParam._m0[10u].z, fma(_2357, cbModelParam._m0[10u].y, _2356 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2358, cbModelParam._m0[11u].z, fma(_2357, cbModelParam._m0[11u].y, _2356 * cbModelParam._m0[11u].x))), _1799);
            frontier_phi_13_35_ladder = _2486.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2486.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2486.x * cbModelParam._m0[1u].y;
        }
        _1879 = frontier_phi_13_35_ladder_2;
        _1881 = frontier_phi_13_35_ladder_1;
        _1883 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1867 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_986, _987, _988), _1799);
        _1879 = _1867.x * cbModelParam._m0[1u].y;
        _1881 = _1867.y * cbModelParam._m0[1u].y;
        _1883 = _1867.z * cbModelParam._m0[1u].y;
    }
    float _1887 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _815);
    float _1888 = isnan(_1887) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1887 : min(cbModelParam._m0[25u].w, _1887));
    float _1979;
    float _1981;
    float _1983;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1943 = fma(_1050, cbModelParam._m0[21u].z, fma(_1046, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1042)) + cbModelParam._m0[21u].w;
        float _1947 = fma(_1050, cbModelParam._m0[22u].z, fma(_1046, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1042)) + cbModelParam._m0[22u].w;
        float _1951 = fma(_1050, cbModelParam._m0[23u].z, fma(_1046, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1042)) + cbModelParam._m0[23u].w;
        float _1954 = fma(_988, cbModelParam._m0[21u].z, fma(_987, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _986));
        float _1957 = fma(_988, cbModelParam._m0[22u].z, fma(_987, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _986));
        float _1960 = fma(_988, cbModelParam._m0[23u].z, fma(_987, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _986));
        float _2100;
        if (_1954 > 0.0)
        {
            _2100 = abs((1.0 - _1943) / _1954);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1954 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1943 + 1.0) / _1954);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2100 = frontier_phi_25_21_ladder;
        }
        float _2376;
        if (_1957 > 0.0)
        {
            _2376 = abs((1.0 - _1947) / _1957);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1957 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1947 + 1.0) / _1957);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2376 = frontier_phi_37_32_ladder;
        }
        float _2589;
        if (_1960 > 0.0)
        {
            _2589 = abs((1.0 - _1951) / _1960);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1960 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1951 + 1.0) / _1960);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2589 = frontier_phi_46_43_ladder;
        }
        float _2591 = isnan(_2376) ? _2100 : (isnan(_2100) ? _2376 : min(_2100, _2376));
        float _2592 = isnan(_2589) ? _2591 : (isnan(_2591) ? _2589 : min(_2591, _2589));
        float _2596 = (_2592 * _1954) + _1943;
        float _2597 = (_2592 * _1957) + _1947;
        float _2598 = (_2592 * _1960) + _1951;
        float _2599 = _2592 * 9.9999997473787516355514526367188e-05;
        float _2600 = (-1.0) - _2599;
        float _2602 = _2599 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2598 > _2602) || ((_2598 < _2600) || ((_2597 > _2602) || ((_2597 < _2600) || ((_2596 < _2600) || (_2596 > _2602))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2797 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2598, cbModelParam._m0[17u].z, fma(_2597, cbModelParam._m0[17u].y, _2596 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2598, cbModelParam._m0[18u].z, fma(_2597, cbModelParam._m0[18u].y, _2596 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2598, cbModelParam._m0[19u].z, fma(_2597, cbModelParam._m0[19u].y, _2596 * cbModelParam._m0[19u].x))), _1888);
            frontier_phi_22_46_ladder = _2797.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2797.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2797.x * cbModelParam._m0[1u].z;
        }
        _1979 = frontier_phi_22_46_ladder_2;
        _1981 = frontier_phi_22_46_ladder_1;
        _1983 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1963 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_986, _987, _988), _1888);
        _1979 = _1963.x * cbModelParam._m0[1u].z;
        _1981 = _1963.y * cbModelParam._m0[1u].z;
        _1983 = _1963.z * cbModelParam._m0[1u].z;
    }
    float _1996 = (((_1013 * _963) + _1014) * _978) * ((cbModelParam._m0[1u].w * (_1979 - _1879)) + _1879);
    float _1998 = (((_1013 * _965) + _1014) * _978) * ((cbModelParam._m0[1u].w * (_1981 - _1881)) + _1881);
    float _2000 = (((_1013 * _966) + _1014) * _978) * ((cbModelParam._m0[1u].w * (_1983 - _1883)) + _1883);
    float _2003 = fma(_2000, cbSceneParam._m0[89u].z, fma(_1998, cbSceneParam._m0[89u].y, _1996 * cbSceneParam._m0[89u].x));
    float _2006 = fma(_2000, cbSceneParam._m0[90u].z, fma(_1998, cbSceneParam._m0[90u].y, _1996 * cbSceneParam._m0[90u].x));
    float _2009 = fma(_2000, cbSceneParam._m0[91u].z, fma(_1998, cbSceneParam._m0[91u].y, _1996 * cbSceneParam._m0[91u].x));
    uvec4 _2019 = floatBitsToUint(cbInstanceData._m0[_938 + 5u]);
    uint _2021 = _2019.x * 14u;
    uint _2022 = _2021 + 13u;
    float _2029 = _978 + (-1.0);
    float _2034 = (cbLight._m0[_2022].x * _2029) + 1.0;
    float _2035 = (cbLight._m0[_2022].y * _2029) + 1.0;
    float _2036 = (cbLight._m0[_2022].z * _2029) + 1.0;
    float _2037 = (cbLight._m0[_2022].w * _2029) + 1.0;
    uint _2038 = _2021 + 5u;
    float _2044 = isnan(1.0) ? _2035 : (isnan(_2035) ? 1.0 : min(_2035, 1.0));
    uint _2048 = _2021 + 4u;
    float _2054 = isnan(1.0) ? _2034 : (isnan(_2034) ? 1.0 : min(_2034, 1.0));
    uint _2058 = _2021 | 1u;
    float _2069 = dot(vec3(cbLight._m0[_2021].xyz), vec3(_812, _813, _814));
    float _2072 = dot(vec3(cbLight._m0[_2058].xyz), vec3(_812, _813, _814));
    float _4204 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
    float _4215 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _2077 = (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) * 0.3183098733425140380859375;
    float _2079 = (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * 0.3183098733425140380859375;
    float _2086 = ((cbLight._m0[_2038].x * _2044) * _2079) + ((cbLight._m0[_2048].x * _2054) * _2077);
    float _2087 = ((_2044 * cbLight._m0[_2038].y) * _2079) + ((_2054 * cbLight._m0[_2048].y) * _2077);
    float _2088 = ((_2044 * cbLight._m0[_2038].z) * _2079) + ((_2054 * cbLight._m0[_2048].z) * _2077);
    uvec4 _2092 = floatBitsToUint(cbLight._m0[_2021 + 12u]);
    bool _2094 = _2092.x == 0u;
    float _2105;
    float _2107;
    float _2109;
    if (_2094)
    {
        _2105 = _2086;
        _2107 = _2087;
        _2109 = _2088;
    }
    else
    {
        uint _2113 = _2021 + 6u;
        float _2129 = (dot(vec3(cbLight._m0[_2021 + 2u].xyz), vec3(_812, _813, _814)) * 0.5) + 0.5;
        float _2130 = _2129 * _2129;
        float _4226 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
        float _2131 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _2132 = isnan(1.0) ? _2036 : (isnan(_2036) ? 1.0 : min(_2036, 1.0));
        _2105 = (((cbLight._m0[_2113].x * 0.3183098733425140380859375) * _2131) * _2132) + _2086;
        _2107 = (((cbLight._m0[_2113].y * 0.3183098733425140380859375) * _2131) * _2132) + _2087;
        _2109 = (((cbLight._m0[_2113].z * 0.3183098733425140380859375) * _2131) * _2132) + _2088;
    }
    bool _2112 = _2092.y == 0u;
    float _2150;
    float _2152;
    float _2154;
    if (_2112)
    {
        _2150 = _2105;
        _2152 = _2107;
        _2154 = _2109;
    }
    else
    {
        uint _2320 = _2021 + 7u;
        float _2336 = (dot(vec3(cbLight._m0[_2021 + 3u].xyz), vec3(_812, _813, _814)) * 0.5) + 0.5;
        float _2337 = _2336 * _2336;
        float _4242 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
        float _2338 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
        float _2339 = isnan(1.0) ? _2037 : (isnan(_2037) ? 1.0 : min(_2037, 1.0));
        _2150 = (((cbLight._m0[_2320].x * 0.3183098733425140380859375) * _2338) * _2339) + _2105;
        _2152 = (((cbLight._m0[_2320].y * 0.3183098733425140380859375) * _2338) * _2339) + _2107;
        _2154 = (((cbLight._m0[_2320].z * 0.3183098733425140380859375) * _2338) * _2339) + _2109;
    }
    uint _2157 = _2021 + 8u;
    float _2170 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2021].w)) * _815) * 0.949999988079071044921875);
    float _2171 = _2170 * _2170;
    float _2172 = cbLight._m0[_2021].x + _892;
    float _2173 = cbLight._m0[_2021].y + _893;
    float _2174 = cbLight._m0[_2021].z + _894;
    float _2178 = inversesqrt(dot(vec3(_2172, _2173, _2174), vec3(_2172, _2173, _2174)));
    float _2179 = _2178 * _2172;
    float _2180 = _2178 * _2173;
    float _2181 = _2178 * _2174;
    float _2182 = dot(vec3(_812, _813, _814), vec3(cbLight._m0[_2021].xyz));
    float _4258 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2185 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
    float _4269 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
    float _2186 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
    float _2187 = dot(vec3(_812, _813, _814), vec3(_2179, _2180, _2181));
    float _4280 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
    float _2190 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
    float _2191 = dot(vec3(cbLight._m0[_2021].xyz), vec3(_2179, _2180, _2181));
    float _4291 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2195 = _2171 * _2171;
    float _2199 = ((_2190 * _2190) * (_2195 + (-1.0))) + 1.0;
    float _2207 = exp2(log2(1.0 - (isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0)))) * 5.0);
    float _2208 = 0.959999978542327880859375 - _960;
    float _2210 = 0.959999978542327880859375 - _961;
    float _2211 = 0.959999978542327880859375 - _962;
    float _2218 = 1.0 - _2171;
    float _2229 = (0.5 / (((_2186 * ((_2185 * _2218) + _2171)) + 9.9999999392252902907785028219223e-09) + (((_2186 * _2218) + _2171) * _2185))) * _2185;
    float _4302 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
    float _2231 = (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * (_2195 / ((_2199 * _2199) * 3.141590118408203125));
    uint _2242 = _2021 + 9u;
    float _2253 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2058].w)) * _815) * 0.949999988079071044921875);
    float _2254 = _2253 * _2253;
    float _2255 = cbLight._m0[_2058].x + _892;
    float _2256 = cbLight._m0[_2058].y + _893;
    float _2257 = cbLight._m0[_2058].z + _894;
    float _2261 = inversesqrt(dot(vec3(_2255, _2256, _2257), vec3(_2255, _2256, _2257)));
    float _2262 = _2261 * _2255;
    float _2263 = _2261 * _2256;
    float _2264 = _2261 * _2257;
    float _2265 = dot(vec3(_812, _813, _814), vec3(cbLight._m0[_2058].xyz));
    float _4313 = isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0));
    float _2268 = isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0));
    float _2269 = dot(vec3(_812, _813, _814), vec3(_2262, _2263, _2264));
    float _4324 = isnan(0.0) ? _2269 : (isnan(_2269) ? 0.0 : max(_2269, 0.0));
    float _2272 = isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0));
    float _2273 = dot(vec3(cbLight._m0[_2058].xyz), vec3(_2262, _2263, _2264));
    float _4335 = isnan(0.0) ? _2273 : (isnan(_2273) ? 0.0 : max(_2273, 0.0));
    float _2277 = _2254 * _2254;
    float _2281 = ((_2272 * _2272) * (_2277 + (-1.0))) + 1.0;
    float _2288 = exp2(log2(1.0 - (isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0)))) * 5.0);
    float _2295 = 1.0 - _2254;
    float _2305 = (0.5 / (((_2186 * ((_2268 * _2295) + _2254)) + 9.9999999392252902907785028219223e-09) + (((_2186 * _2295) + _2254) * _2268))) * _2268;
    float _4346 = isnan(0.0) ? _2305 : (isnan(_2305) ? 0.0 : max(_2305, 0.0));
    float _2307 = (isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0))) * (_2277 / ((_2281 * _2281) * 3.141590118408203125));
    float _2317 = (((((_2288 * _2208) + _963) * cbLight._m0[_2242].x) * _2307) * _2044) + (((((_2207 * _2208) + _963) * cbLight._m0[_2157].x) * _2231) * _2054);
    float _2318 = (((((_2288 * _2210) + _965) * cbLight._m0[_2242].y) * _2307) * _2044) + (((((_2207 * _2210) + _965) * cbLight._m0[_2157].y) * _2231) * _2054);
    float _2319 = (((((_2288 * _2211) + _966) * cbLight._m0[_2242].z) * _2307) * _2044) + (((((_2207 * _2211) + _966) * cbLight._m0[_2157].z) * _2231) * _2054);
    float _2381;
    float _2383;
    float _2385;
    if (_2094)
    {
        _2381 = _2317;
        _2383 = _2318;
        _2385 = _2319;
    }
    else
    {
        uint _2387 = _2021 + 2u;
        uint _2391 = _2021 + 10u;
        float _2405 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2387].w)) * _815) * 0.949999988079071044921875);
        float _2406 = _2405 * _2405;
        float _2407 = cbLight._m0[_2387].x + _892;
        float _2408 = cbLight._m0[_2387].y + _893;
        float _2409 = cbLight._m0[_2387].z + _894;
        float _2413 = inversesqrt(dot(vec3(_2407, _2408, _2409), vec3(_2407, _2408, _2409)));
        float _2414 = _2413 * _2407;
        float _2415 = _2413 * _2408;
        float _2416 = _2413 * _2409;
        float _2417 = dot(vec3(_812, _813, _814), vec3(cbLight._m0[_2387].xyz));
        float _4357 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
        float _2420 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
        float _2421 = dot(vec3(_812, _813, _814), vec3(_2414, _2415, _2416));
        float _4368 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
        float _2424 = isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0));
        float _2425 = dot(vec3(cbLight._m0[_2387].xyz), vec3(_2414, _2415, _2416));
        float _4379 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        float _2429 = _2406 * _2406;
        float _2433 = ((_2424 * _2424) * (_2429 + (-1.0))) + 1.0;
        float _2440 = exp2(log2(1.0 - (isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0)))) * 5.0);
        float _2447 = 1.0 - _2406;
        float _2457 = (0.5 / (((_2186 * ((_2420 * _2447) + _2406)) + 9.9999999392252902907785028219223e-09) + (((_2186 * _2447) + _2406) * _2420))) * _2420;
        float _4390 = isnan(0.0) ? _2457 : (isnan(_2457) ? 0.0 : max(_2457, 0.0));
        float _2459 = (isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0))) * (_2429 / ((_2433 * _2433) * 3.141590118408203125));
        float _2460 = isnan(1.0) ? _2036 : (isnan(_2036) ? 1.0 : min(_2036, 1.0));
        _2381 = (((((_2440 * _2208) + _963) * cbLight._m0[_2391].x) * _2459) * _2460) + _2317;
        _2383 = (((((_2440 * _2210) + _965) * cbLight._m0[_2391].y) * _2459) * _2460) + _2318;
        _2385 = (((((_2440 * _2211) + _966) * cbLight._m0[_2391].z) * _2459) * _2460) + _2319;
    }
    float _2495;
    float _2497;
    float _2499;
    if (_2112)
    {
        _2495 = _2381;
        _2497 = _2383;
        _2499 = _2385;
    }
    else
    {
        uint _2506 = _2021 + 3u;
        uint _2510 = _2021 + 11u;
        float _2524 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2506].w)) * _815) * 0.949999988079071044921875);
        float _2525 = _2524 * _2524;
        float _2526 = cbLight._m0[_2506].x + _892;
        float _2527 = cbLight._m0[_2506].y + _893;
        float _2528 = cbLight._m0[_2506].z + _894;
        float _2532 = inversesqrt(dot(vec3(_2526, _2527, _2528), vec3(_2526, _2527, _2528)));
        float _2533 = _2532 * _2526;
        float _2534 = _2532 * _2527;
        float _2535 = _2532 * _2528;
        float _2536 = dot(vec3(_812, _813, _814), vec3(cbLight._m0[_2506].xyz));
        float _4406 = isnan(0.0) ? _2536 : (isnan(_2536) ? 0.0 : max(_2536, 0.0));
        float _2539 = isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0));
        float _2540 = dot(vec3(_812, _813, _814), vec3(_2533, _2534, _2535));
        float _4417 = isnan(0.0) ? _2540 : (isnan(_2540) ? 0.0 : max(_2540, 0.0));
        float _2543 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
        float _2544 = dot(vec3(cbLight._m0[_2506].xyz), vec3(_2533, _2534, _2535));
        float _4428 = isnan(0.0) ? _2544 : (isnan(_2544) ? 0.0 : max(_2544, 0.0));
        float _2548 = _2525 * _2525;
        float _2552 = ((_2543 * _2543) * (_2548 + (-1.0))) + 1.0;
        float _2559 = exp2(log2(1.0 - (isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0)))) * 5.0);
        float _2566 = 1.0 - _2525;
        float _2576 = (0.5 / (((_2186 * ((_2539 * _2566) + _2525)) + 9.9999999392252902907785028219223e-09) + (((_2186 * _2566) + _2525) * _2539))) * _2539;
        float _4439 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
        float _2578 = (isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0))) * (_2548 / ((_2552 * _2552) * 3.141590118408203125));
        float _2579 = isnan(1.0) ? _2037 : (isnan(_2037) ? 1.0 : min(_2037, 1.0));
        _2495 = (((((_2559 * _2208) + _963) * cbLight._m0[_2510].x) * _2578) * _2579) + _2381;
        _2497 = (((((_2559 * _2210) + _965) * cbLight._m0[_2510].y) * _2578) * _2579) + _2383;
        _2499 = (((((_2559 * _2211) + _966) * cbLight._m0[_2510].z) * _2578) * _2579) + _2385;
    }
    float _2714;
    float _2716;
    float _2718;
    float _2720;
    float _2722;
    float _2724;
    if (_2019.y == 0u)
    {
        float _2654 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2655 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2654;
        float _2656 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2654;
        float _2657 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2654;
        uvec4 _2669 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2670 = _2669.x;
        uint _2681 = uint((float(_2669.y) * floor(float(uint(cbSceneParam._m0[85u].y * _901) / _2670))) + floor(float(uint(cbSceneParam._m0[85u].x * _900) / _2670)));
        float _2691 = (log2(_2657 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2692 = isnan(0.0) ? _2691 : (isnan(_2691) ? 0.0 : max(_2691, 0.0));
        uint _2695 = uint(isnan(14.0) ? _2692 : (isnan(_2692) ? 14.0 : min(_2692, 14.0)));
        uvec4 _2700 = texelFetch(g_lightClusterGridBuffer, int(((_2695 << 2u) + (_2681 << 6u)) >> 2u));
        uint _2701 = _2700.x;
        uint _2702 = _2669.z;
        float _2802;
        float _2804;
        float _2806;
        float _2808;
        float _2810;
        float _2812;
        if (((((1u << ((_2702 >> 4u) & 15u)) + 4294967295u) & _2701) == 0u) || ((_2702 & 240u) == 0u))
        {
            _2802 = 0.0;
            _2804 = 0.0;
            _2806 = 0.0;
            _2808 = 0.0;
            _2810 = 0.0;
            _2812 = 0.0;
        }
        else
        {
            float _2803;
            float _2805;
            float _2807;
            float _2809;
            float _2811;
            float _2813;
            float _2947 = 0.0;
            float _2948 = 0.0;
            float _2949 = 0.0;
            float _2950 = 0.0;
            float _2951 = 0.0;
            float _2952 = 0.0;
            uint _2953 = 0u;
            uint _2962;
            bool _2963;
            for (;;)
            {
                _2962 = texelFetch(g_lightClassification, int((((_2695 << 5u) + (_2681 << 9u)) + (_2953 << 2u)) >> 2u)).x;
                _2963 = _2962 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2963)
                {
                    frontier_phi_61_pred = _2947;
                    frontier_phi_61_pred_1 = _2952;
                    frontier_phi_61_pred_2 = _2951;
                    frontier_phi_61_pred_3 = _2950;
                    frontier_phi_61_pred_4 = _2949;
                    frontier_phi_61_pred_5 = _2948;
                }
                else
                {
                    float _3071;
                    float _3072;
                    float _3073;
                    float _3074;
                    float _3075;
                    float _3076;
                    uint _3077;
                    _3071 = _2947;
                    _3072 = _2948;
                    _3073 = _2949;
                    _3074 = _2950;
                    _3075 = _2951;
                    _3076 = _2952;
                    _3077 = _2962;
                    float _3003;
                    float _3004;
                    float _3005;
                    float _3006;
                    float _3007;
                    float _3008;
                    for (;;)
                    {
                        uint _3081 = uint(findLSB(_3077)) + (_2953 << 5u);
                        uint _3078 = (_3077 + 4294967295u) & _3077;
                        uint _3083 = _3081 * 48u;
                        vec4 _3097 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3083)).x, texelFetch(g_PointLightRenderingBuffer, int(_3083 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3083 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3083 + 3u)).x));
                        uint _3103 = (_3081 * 48u) + 4u;
                        vec4 _3116 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3103)).x, texelFetch(g_PointLightRenderingBuffer, int(_3103 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3103 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3103 + 3u)).x));
                        uint _3122 = (_3081 * 48u) + 8u;
                        vec3 _3133 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3122)).x, texelFetch(g_PointLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3122 + 2u)).x));
                        float _3137 = _3097.x - _2655;
                        float _3138 = _3097.y - _2656;
                        float _3139 = _3097.z - _2657;
                        float _3140 = dot(vec3(_3137, _3138, _3139), vec3(_3137, _3138, _3139));
                        float _3143 = inversesqrt(_3140);
                        float _3144 = _3143 * _3137;
                        float _3145 = _3143 * _3138;
                        float _3146 = _3143 * _3139;
                        float _3147 = dot(vec3(_919, _922, _925), vec3(_3144, _3145, _3146));
                        float _3152 = 1.0 - (_3140 * _3097.w);
                        float _4465 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
                        float _3153 = isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0));
                        float _3154 = sqrt(_3140) * _3116.w;
                        float _3157 = 1.39999997615814208984375 / (_3154 + 1.39999997615814208984375);
                        float _3158 = _3157 * _3157;
                        float _3161 = ((1.0 - _3158) * _3147) + _3158;
                        float _3164 = _3154 * _3154;
                        float _3168 = ((isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0))) * _3153) / ((_3164 * 0.699999988079071044921875) + 1.0);
                        float _3172 = (-0.0) - _2655;
                        float _3173 = (-0.0) - _2656;
                        float _3174 = (-0.0) - _2657;
                        float _3178 = inversesqrt(dot(vec3(_3172, _3173, _3174), vec3(_3172, _3173, _3174)));
                        float _3179 = _3178 * _3172;
                        float _3180 = _3178 * _3173;
                        float _3181 = _3178 * _3174;
                        float _3189 = exp2(log2(1.0 / ((_3164 * 3.5) + 5.0)) * 0.25);
                        float _3190 = 1.0 - _994;
                        float _3197 = sqrt(1.0 - ((1.0 - (_3190 * _3190)) * (1.0 - (_3189 * _3189))));
                        float _3198 = _3197 * _3197;
                        float _3199 = _3198 * _3198;
                        float _3200 = _3179 + _3144;
                        float _3201 = _3180 + _3145;
                        float _3202 = _3181 + _3146;
                        float _3206 = inversesqrt(dot(vec3(_3200, _3201, _3202), vec3(_3200, _3201, _3202)));
                        float _3210 = dot(vec3(_919, _922, _925), vec3(_3179, _3180, _3181));
                        float _4481 = isnan(0.0) ? _3210 : (isnan(_3210) ? 0.0 : max(_3210, 0.0));
                        float _3213 = isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0));
                        float _3214 = dot(vec3(_919, _922, _925), vec3(_3206 * _3200, _3206 * _3201, _3206 * _3202));
                        float _4492 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                        float _3217 = isnan(1.0) ? _4492 : (isnan(_4492) ? 1.0 : min(_4492, 1.0));
                        float _3221 = ((_3217 * _3217) * (_3199 + (-1.0))) + 1.0;
                        float _3222 = _3157 * _3198;
                        float _3223 = _3222 * _3222;
                        float _3226 = ((1.0 - _3223) * _3147) + _3223;
                        float _4503 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                        float _3227 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
                        float _3228 = 1.0 - _3198;
                        float _3238 = (0.5 / (((_3227 * ((_3213 * _3228) + _3198)) + 9.9999999392252902907785028219223e-09) + (((_3227 * _3228) + _3198) * _3213))) * _3227;
                        float _4514 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                        float _3249 = (((_3199 * 3.1415927410125732421875) * (isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0)))) / ((_3221 * _3221) * ((_3164 * 2.1991131305694580078125) + 3.141590118408203125))) * _3153;
                        _3006 = (_3168 * _3116.x) + _3074;
                        _3007 = (_3168 * _3116.y) + _3075;
                        _3008 = (_3168 * _3116.z) + _3076;
                        _3003 = (_3249 * _3133.x) + _3071;
                        _3004 = (_3249 * _3133.y) + _3072;
                        _3005 = (_3249 * _3133.z) + _3073;
                        if (_3078 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3071 = _3003;
                            _3072 = _3004;
                            _3073 = _3005;
                            _3074 = _3006;
                            _3075 = _3007;
                            _3076 = _3008;
                            _3077 = _3078;
                        }
                    }
                    frontier_phi_61_pred = _3003;
                    frontier_phi_61_pred_1 = _3008;
                    frontier_phi_61_pred_2 = _3007;
                    frontier_phi_61_pred_3 = _3006;
                    frontier_phi_61_pred_4 = _3005;
                    frontier_phi_61_pred_5 = _3004;
                }
                _2803 = frontier_phi_61_pred;
                _2813 = frontier_phi_61_pred_1;
                _2811 = frontier_phi_61_pred_2;
                _2809 = frontier_phi_61_pred_3;
                _2807 = frontier_phi_61_pred_4;
                _2805 = frontier_phi_61_pred_5;
                uint _2954 = _2953 + 1u;
                if (_2954 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2947 = _2803;
                    _2948 = _2805;
                    _2949 = _2807;
                    _2950 = _2809;
                    _2951 = _2811;
                    _2952 = _2813;
                    _2953 = _2954;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2802 = _2803;
            _2804 = _2805;
            _2806 = _2807;
            _2808 = _2809;
            _2810 = _2811;
            _2812 = _2813;
        }
        uvec4 _2816 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2817 = _2816.z;
        uint _2819 = (_2817 >> 8u) & 15u;
        float _2915;
        float _2917;
        float _2919;
        float _2921;
        float _2923;
        float _2925;
        if (((4294967295u << _2819) & _2701) == 0u)
        {
            _2915 = _2802;
            _2917 = _2804;
            _2919 = _2806;
            _2921 = _2808;
            _2923 = _2810;
            _2925 = _2812;
        }
        else
        {
            float _2940 = inversesqrt(dot(vec3(_2655, _2656, _2657), vec3(_2655, _2656, _2657)));
            float _2941 = _2940 * _2655;
            float _2942 = _2940 * _2656;
            float _2943 = _2940 * _2657;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2819 < ((_2817 >> 12u) & 15u))
            {
                float _2916;
                float _2918;
                float _2920;
                float _2922;
                float _2924;
                float _2926;
                float _3054 = _2802;
                float _3055 = _2804;
                float _3056 = _2806;
                float _3057 = _2808;
                float _3058 = _2810;
                float _3059 = _2812;
                uint _3060 = _2819;
                uint _3069;
                bool _3070;
                for (;;)
                {
                    _3069 = texelFetch(g_lightClassification, int((((_2695 << 5u) + (_2681 << 9u)) + (_3060 << 2u)) >> 2u)).x;
                    _3070 = _3069 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3070)
                    {
                        frontier_phi_67_pred = _3057;
                        frontier_phi_67_pred_1 = _3058;
                        frontier_phi_67_pred_2 = _3059;
                        frontier_phi_67_pred_3 = _3056;
                        frontier_phi_67_pred_4 = _3055;
                        frontier_phi_67_pred_5 = _3054;
                    }
                    else
                    {
                        float _3254;
                        float _3255;
                        float _3256;
                        float _3257;
                        float _3258;
                        float _3259;
                        float _3548;
                        float _3549;
                        float _3550;
                        float _3551;
                        float _3552;
                        float _3553;
                        float _3267 = _3054;
                        float _3268 = _3055;
                        float _3269 = _3056;
                        float _3270 = _3057;
                        float _3271 = _3058;
                        float _3272 = _3059;
                        uint _3273 = _3069;
                        uint _3274;
                        vec4 _3299;
                        float _3300;
                        vec4 _3315;
                        vec3 _3327;
                        vec4 _3342;
                        vec4 _3357;
                        float _3404;
                        bool _3405;
                        for (;;)
                        {
                            uint _3284 = ((_3060 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3273));
                            _3274 = (_3273 + 4294967295u) & _3273;
                            uint _3286 = _3284 * 40u;
                            _3299 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3286)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3286 + 3u)).x));
                            _3300 = _3299.w;
                            uint _3302 = (_3284 * 40u) + 4u;
                            _3315 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3302)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3302 + 3u)).x));
                            uint _3317 = (_3284 * 40u) + 8u;
                            _3327 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3317)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3317 + 2u)).x));
                            uint _3329 = (_3284 * 40u) + 16u;
                            _3342 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3329)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3329 + 3u)).x));
                            uint _3344 = (_3284 * 40u) + 20u;
                            _3357 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3344)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3344 + 3u)).x));
                            uint _3360 = (_3284 * 40u) + 24u;
                            vec4 _3373 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3360)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3360 + 3u)).x));
                            uint _3379 = (_3284 * 40u) + 28u;
                            vec4 _3392 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3379)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3379 + 3u)).x));
                            _3404 = fma(_2657, _3392.z, fma(_2656, _3392.y, _3392.x * _2655)) + _3392.w;
                            _3405 = !((fma(_2657, _3373.z, fma(_2656, _3373.y, _3373.x * _2655)) + _3373.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3405)
                            {
                                float _3432 = _3299.x - _2655;
                                float _3433 = _3299.y - _2656;
                                float _3434 = _3299.z - _2657;
                                float _3435 = dot(vec3(_3432, _3433, _3434), vec3(_3432, _3433, _3434));
                                float _3438 = inversesqrt(_3435);
                                float _3439 = _3438 * _3432;
                                float _3440 = _3438 * _3433;
                                float _3441 = _3438 * _3434;
                                float _3445 = 1.0 - (_3435 / (_3300 * _3300));
                                float _4525 = isnan(0.0) ? _3445 : (isnan(_3445) ? 0.0 : max(_3445, 0.0));
                                float _3446 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
                                float _3450 = sqrt(_3435) * _3315.w;
                                float _3452 = 1.39999997615814208984375 / (_3450 + 1.39999997615814208984375);
                                float _3453 = _3452 * _3452;
                                float _3456 = ((1.0 - _3453) * dot(vec3(_3439, _3440, _3441), vec3(_919, _922, _925))) + _3453;
                                float _3459 = _3450 * _3450;
                                float _3463 = (fma(_2657, _3342.z, fma(_2656, _3342.y, _3342.x * _2655)) + _3342.w) / _3404;
                                float _3464 = (fma(_2657, _3357.z, fma(_2656, _3357.y, _3357.x * _2655)) + _3357.w) / _3404;
                                float _3468 = 1.0 - dot(vec2(_3463, _3464), vec2(_3463, _3464));
                                float _4541 = isnan(0.0) ? _3468 : (isnan(_3468) ? 0.0 : max(_3468, 0.0));
                                float _3469 = isnan(1.0) ? _4541 : (isnan(_4541) ? 1.0 : min(_4541, 1.0));
                                float _3470 = _3469 * (((isnan(0.0) ? _3456 : (isnan(_3456) ? 0.0 : max(_3456, 0.0))) * _3446) / ((_3459 * 0.699999988079071044921875) + 1.0));
                                float _3482 = exp2(log2(1.0 / ((_3459 * 3.5) + 5.0)) * 0.25);
                                float _3483 = 1.0 - _994;
                                float _3490 = sqrt(1.0 - ((1.0 - (_3483 * _3483)) * (1.0 - (_3482 * _3482))));
                                float _3491 = _3490 * _3490;
                                float _3492 = _3491 * _3491;
                                float _3493 = _3439 - _2941;
                                float _3494 = _3440 - _2942;
                                float _3495 = _3441 - _2943;
                                float _3499 = inversesqrt(dot(vec3(_3493, _3494, _3495), vec3(_3493, _3494, _3495)));
                                float _3503 = dot(vec3(_919, _922, _925), vec3((-0.0) - _2941, (-0.0) - _2942, (-0.0) - _2943));
                                float _4552 = isnan(0.0) ? _3503 : (isnan(_3503) ? 0.0 : max(_3503, 0.0));
                                float _3506 = isnan(1.0) ? _4552 : (isnan(_4552) ? 1.0 : min(_4552, 1.0));
                                float _3507 = dot(vec3(_919, _922, _925), vec3(_3499 * _3493, _3499 * _3494, _3499 * _3495));
                                float _4563 = isnan(0.0) ? _3507 : (isnan(_3507) ? 0.0 : max(_3507, 0.0));
                                float _3510 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
                                float _3514 = ((_3510 * _3510) * (_3492 + (-1.0))) + 1.0;
                                float _3515 = _3452 * _3491;
                                float _3516 = _3515 * _3515;
                                float _3522 = ((1.0 - _3516) * dot(vec3(_919, _922, _925), vec3(_3439, _3440, _3441))) + _3516;
                                float _4574 = isnan(0.0) ? _3522 : (isnan(_3522) ? 0.0 : max(_3522, 0.0));
                                float _3523 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
                                float _3524 = 1.0 - _3491;
                                float _3534 = (0.5 / (((_3523 * ((_3506 * _3524) + _3491)) + 9.9999999392252902907785028219223e-09) + (((_3523 * _3524) + _3491) * _3506))) * _3523;
                                float _4585 = isnan(0.0) ? _3534 : (isnan(_3534) ? 0.0 : max(_3534, 0.0));
                                float _3544 = (_3469 * _3446) * (((_3492 * 3.1415927410125732421875) * (isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0)))) / ((_3514 * _3514) * ((_3459 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3544 * _3327.x;
                                frontier_phi_73_pred_1 = _3544 * _3327.y;
                                frontier_phi_73_pred_2 = _3470 * _3315.z;
                                frontier_phi_73_pred_3 = _3470 * _3315.y;
                                frontier_phi_73_pred_4 = _3470 * _3315.x;
                                frontier_phi_73_pred_5 = _3544 * _3327.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3548 = frontier_phi_73_pred;
                            _3549 = frontier_phi_73_pred_1;
                            _3553 = frontier_phi_73_pred_2;
                            _3552 = frontier_phi_73_pred_3;
                            _3551 = frontier_phi_73_pred_4;
                            _3550 = frontier_phi_73_pred_5;
                            _3257 = _3551 + _3270;
                            _3258 = _3552 + _3271;
                            _3259 = _3553 + _3272;
                            _3254 = _3548 + _3267;
                            _3255 = _3549 + _3268;
                            _3256 = _3550 + _3269;
                            if (_3274 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3267 = _3254;
                                _3268 = _3255;
                                _3269 = _3256;
                                _3270 = _3257;
                                _3271 = _3258;
                                _3272 = _3259;
                                _3273 = _3274;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3257;
                        frontier_phi_67_pred_1 = _3258;
                        frontier_phi_67_pred_2 = _3259;
                        frontier_phi_67_pred_3 = _3256;
                        frontier_phi_67_pred_4 = _3255;
                        frontier_phi_67_pred_5 = _3254;
                    }
                    _2922 = frontier_phi_67_pred;
                    _2924 = frontier_phi_67_pred_1;
                    _2926 = frontier_phi_67_pred_2;
                    _2920 = frontier_phi_67_pred_3;
                    _2918 = frontier_phi_67_pred_4;
                    _2916 = frontier_phi_67_pred_5;
                    uint _3061 = _3060 + 1u;
                    if (_3061 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3054 = _2916;
                        _3055 = _2918;
                        _3056 = _2920;
                        _3057 = _2922;
                        _3058 = _2924;
                        _3059 = _2926;
                        _3060 = _3061;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2924;
                frontier_phi_55_56_ladder_1 = _2926;
                frontier_phi_55_56_ladder_2 = _2922;
                frontier_phi_55_56_ladder_3 = _2920;
                frontier_phi_55_56_ladder_4 = _2918;
                frontier_phi_55_56_ladder_5 = _2916;
            }
            else
            {
                frontier_phi_55_56_ladder = _2810;
                frontier_phi_55_56_ladder_1 = _2812;
                frontier_phi_55_56_ladder_2 = _2808;
                frontier_phi_55_56_ladder_3 = _2806;
                frontier_phi_55_56_ladder_4 = _2804;
                frontier_phi_55_56_ladder_5 = _2802;
            }
            _2915 = frontier_phi_55_56_ladder_5;
            _2917 = frontier_phi_55_56_ladder_4;
            _2919 = frontier_phi_55_56_ladder_3;
            _2921 = frontier_phi_55_56_ladder_2;
            _2923 = frontier_phi_55_56_ladder;
            _2925 = frontier_phi_55_56_ladder_1;
        }
        float _2930 = isnan(1.0) ? _978 : (isnan(_978) ? 1.0 : min(_978, 1.0));
        _2714 = (_2930 * _2921) + _2150;
        _2716 = (_2930 * _2923) + _2152;
        _2718 = (_2930 * _2925) + _2154;
        _2720 = ((_2915 * _963) * _2930) + _2495;
        _2722 = ((_2917 * _965) * _2930) + _2497;
        _2724 = ((_2919 * _966) * _2930) + _2499;
    }
    else
    {
        _2714 = _2150;
        _2716 = _2152;
        _2718 = _2154;
        _2720 = _2495;
        _2722 = _2497;
        _2724 = _2499;
    }
    float _4601 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
    float _4612 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
    float _4623 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    uint _2744 = _938 + 6u;
    float _2752 = _900 / cbSceneParam._m0[86u].x;
    float _2753 = _901 / cbSceneParam._m0[86u].y;
    vec4 _2767 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2752, _2753, (log2((isnan(cbSceneParam._m0[77u].w) ? _835 : (isnan(_835) ? cbSceneParam._m0[77u].w : min(_835, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2769 = _2767.x;
    float _2770 = _2767.y;
    float _2771 = _2767.z;
    float _2772 = _2767.w;
    float _2865;
    float _2867;
    float _2869;
    float _2871;
    if (_835 > cbSceneParam._m0[78u].w)
    {
        float _2827 = isnan(_835) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _835 : min(cbSceneParam._m0[80u].w, _835));
        float _2828 = _2827 / _835;
        float _2839 = _2828 * _885;
        float _2840 = _886 * _2828;
        float _2841 = (-0.0) - _2840;
        float _2843 = _2828 * _887;
        float _2845 = (cbSceneParam._m0[77u].w * _2841) / _2827;
        float _2846 = _2845 + cbSceneParam._m0[79u].w;
        float _2847 = cbSceneParam._m0[79u].w - _2840;
        float _2853 = sqrt(((_2839 * _2839) + (_2840 * _2840)) + (_2843 * _2843));
        float _2856 = (1.0 - (cbSceneParam._m0[77u].w / _2827)) * _2853;
        float _2861 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2863 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3016;
        if (abs((_2841 - _2845) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3016 = ((((_2846 > 0.0) ? exp2(_2861 * _2846) : (2.0 - exp2(_2863 * _2846))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2856;
        }
        else
        {
            float _2976 = 1.0 / cbSceneParam._m0[80u].x;
            float _2977 = isnan(_2847) ? _2846 : (isnan(_2846) ? _2847 : max(_2846, _2847));
            float _2978 = isnan(_2847) ? _2846 : (isnan(_2846) ? _2847 : min(_2846, _2847));
            float _2987 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : min(_2977, 0.0));
            float _2988 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : min(_2978, 0.0));
            _3016 = ((abs(_2853 / _2841) * cbSceneParam._m0[80u].y) * ((((_2987 - _2988) * 2.0) - ((exp2(_2861 * (isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0)))) - exp2(_2861 * (isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0))))) * _2976)) - ((exp2(_2863 * _2987) - exp2(_2863 * _2988)) * _2976))) + (_2856 * cbSceneParam._m0[80u].z);
        }
        vec4 _3018 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2752, _2753, 1.0), 0.0);
        float _3027 = exp2((_3016 * (-1.44269502162933349609375)) * (1.0 - _3018.w));
        float _3028 = log2(_3027);
        float _3044 = log2(_2772);
        _2865 = (exp2(_3044 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3028 * cbSceneParam._m0[78u].x)) * _3018.x) / cbSceneParam._m0[78u].x)) + _2769;
        _2867 = (exp2(_3044 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3028 * cbSceneParam._m0[78u].y)) * _3018.y) / cbSceneParam._m0[78u].y)) + _2770;
        _2869 = (exp2(_3044 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3028 * cbSceneParam._m0[78u].z)) * _3018.z) / cbSceneParam._m0[78u].z)) + _2771;
        _2871 = _3027 * _2772;
    }
    else
    {
        _2865 = _2769;
        _2867 = _2770;
        _2869 = _2771;
        _2871 = _2772;
    }
    float _2883 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2884 = _2883 == 3.0;
    float _2885 = log2(_2871);
    float _2892 = exp2(_2885 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4601 : (isnan(_4601) ? 1.0 : min(_4601, 1.0))) * (_2714 + ((isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0))) * _978))) + ((_2720 + ((isnan(0.0) ? _2003 : (isnan(_2003) ? 0.0 : max(_2003, 0.0))) * _1788)) * cbPerFrame._m0[3u].x));
    float _2893 = exp2(_2885 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4612 : (isnan(_4612) ? 1.0 : min(_4612, 1.0))) * (_2716 + ((isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0))) * _978))) + ((_2722 + ((isnan(0.0) ? _2006 : (isnan(_2006) ? 0.0 : max(_2006, 0.0))) * _1788)) * cbPerFrame._m0[3u].x));
    float _2894 = exp2(_2885 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0))) * (_2718 + ((isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0))) * _978))) + ((_2724 + ((isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0))) * _1788)) * cbPerFrame._m0[3u].x));
    float _2903 = (_2883 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2903 * (_2884 ? _2892 : (_2892 + (cbSceneParam._m0[72u].w * _2865)));
    SV_Target.y = _2903 * (_2884 ? _2893 : (_2893 + (cbSceneParam._m0[72u].w * _2867)));
    SV_Target.z = _2903 * (_2884 ? _2894 : (_2894 + (cbSceneParam._m0[72u].w * _2869)));
    SV_Target.w = cbInstanceData._m0[_2744].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2744].w;
}


