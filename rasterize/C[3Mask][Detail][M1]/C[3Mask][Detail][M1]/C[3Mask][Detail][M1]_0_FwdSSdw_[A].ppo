#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_20;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1399;
float _3806;
float _3807;
float _3808;
float _3809;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _266 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _272 = _266.x * cbMtdParam._m0[10u].x;
    float _273 = _266.y * cbMtdParam._m0[10u].y;
    float _274 = _266.z * cbMtdParam._m0[10u].z;
    vec4 _292 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _342 = cbMtdParam._m0[18u].y * texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x;
    float _353 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].x * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].y * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _342)) + 1.0;
    float _3818 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _354 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
    float _361 = (_354 * ((_292.x * cbMtdParam._m0[11u].x) - _272)) + _272;
    float _362 = (_354 * ((_292.y * cbMtdParam._m0[11u].y) - _273)) + _273;
    float _363 = (_354 * ((_292.z * cbMtdParam._m0[11u].z) - _274)) + _274;
    vec4 _381 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _408 = ((cbMtdParam._m0[17u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _342)) + 1.0;
    float _3829 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _409 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
    float _416 = (_409 * ((_381.x * cbMtdParam._m0[12u].x) - _361)) + _361;
    float _417 = (_409 * ((_381.y * cbMtdParam._m0[12u].y) - _362)) + _362;
    float _418 = (_409 * ((_381.z * cbMtdParam._m0[12u].z) - _363)) + _363;
    vec4 _435 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _460 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[18u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[18u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _342)) + 1.0;
    float _3840 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _461 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
    vec4 _489 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _497 = ((((_461 * ((_435.x * cbMtdParam._m0[13u].x) - _416)) + _416) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _489.x;
    float _500 = ((((_461 * ((_435.y * cbMtdParam._m0[13u].y) - _417)) + _417) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _489.y;
    float _503 = ((((_461 * ((_435.z * cbMtdParam._m0[13u].z) - _418)) + _418) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _489.z;
    vec4 _523 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _552 = (TEXCOORD_5.x - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.z) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.w) + cbTextureTilingScale._m0[18u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].z + 1.0);
    float _3851 = isnan(0.0) ? _552 : (isnan(_552) ? 0.0 : max(_552, 0.0));
    float _553 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
    float _560 = (_553 * ((_523.x * cbMtdParam._m0[14u].x) - _497)) + _497;
    float _561 = (_553 * ((_523.y * cbMtdParam._m0[14u].y) - _500)) + _500;
    float _562 = (_553 * ((_523.z * cbMtdParam._m0[14u].z) - _503)) + _503;
    vec4 _575 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _577 = _575.x;
    float _595 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _577) * _354) + _577;
    float _612 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _595) * _409) + _595;
    float _629 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _612) * _461) + _612;
    float _631 = _629 - (_629 * TEXCOORD_5.x);
    vec4 _644 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _666 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _668 = _666.x;
    float _669 = _666.y;
    float _672 = cbMtdParam._m0[17u].y * _666.z;
    vec4 _684 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _693 = (((cbMtdParam._m0[17u].x * _684.z) - _672) * _354) + _672;
    vec4 _706 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _718 = (((cbMtdParam._m0[16u].w * _706.z) - _693) * _409) + _693;
    vec4 _731 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _740 = (((cbMtdParam._m0[16u].z * _731.z) - _718) * _461) + _718;
    float _745 = ((cbMtdParam._m0[16u].x * TEXCOORD_5.x) * ((_644.z * cbMtdParam._m0[17u].z) - _740)) + _740;
    vec4 _758 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _770 = ((_684.x - _668) * _354) + _668;
    float _771 = ((_684.y - _669) * _354) + _669;
    float _776 = ((_706.x - _770) * _409) + _770;
    float _777 = ((_706.y - _771) * _409) + _771;
    float _786 = ((((_731.x - _776) * _461) + _776) * 2.0) + (-1.0);
    float _787 = ((((_731.y - _777) * _461) + _777) * 2.0) + (-1.0);
    float _788 = dot(vec2(_786, _787), vec2(_786, _787));
    float _3862 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _793 = sqrt(1.0 - (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))));
    float _803 = ((((_758.x * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _786) + ((((_644.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[15u].y);
    float _804 = ((((_758.y * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _787) + ((((_644.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[15u].y);
    float _807 = fma(_793, _236 * NORMAL.x, fma(_804, _243 * TANGENT.x, (_229 * _221) * _803));
    float _810 = fma(_793, _236 * NORMAL.y, fma(_804, _243 * TANGENT.y, (_229 * _222) * _803));
    float _813 = fma(_793, _236 * NORMAL.z, fma(_804, _243 * TANGENT.z, (_229 * _223) * _803));
    float _817 = inversesqrt(dot(vec3(_807, _810, _813), vec3(_807, _810, _813)));
    float _818 = _817 * _807;
    float _819 = _817 * _810;
    float _820 = _817 * _813;
    float _3873 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _821 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
    float _3884 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _3895 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _3906 = isnan(0.0) ? _562 : (isnan(_562) ? 0.0 : max(_562, 0.0));
    float _3917 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _825 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    float _841 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _881 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _891 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _881);
    float _892 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _881);
    float _893 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _881);
    float _897 = inversesqrt(dot(vec3(_891, _892, _893), vec3(_891, _892, _893)));
    float _898 = _891 * _897;
    float _899 = _892 * _897;
    float _900 = _893 * _897;
    vec4 _905 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _907 = _905.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1079 = sqrt(((_891 * _891) + (_892 * _892)) + (_893 * _893));
        float _1085 = (cbMatDynParam._m0[5u].x * _1079) + cbMatDynParam._m0[5u].y;
        float _3928 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _1090 = (cbMatDynParam._m0[5u].z * _1079) + cbMatDynParam._m0[5u].w;
        float _3939 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0))) - _1086)) + _1086) < ((_907 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _918 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _919 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _937 = fma(_820, cbSceneParam._m0[5u].z, fma(_819, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _818));
    float _940 = fma(_820, cbSceneParam._m0[6u].z, fma(_819, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _818));
    float _943 = fma(_820, cbSceneParam._m0[7u].z, fma(_819, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _818));
    uint _956 = uint(roundEven(NORMAL.w)) * 13u;
    uint _957 = _956 + 9u;
    uint _958 = _957 + uint(cbMatDynParam._m0[0u].w);
    float _964 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0)))) * cbInstanceData._m0[_958].x;
    float _965 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0)))) * cbInstanceData._m0[_958].y;
    float _966 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0)))) * cbInstanceData._m0[_958].z;
    float _3950 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
    float _967 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _3961 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _968 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
    float _3972 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
    float _969 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
    float _970 = 1.0 - _825;
    float _971 = _967 * _970;
    float _972 = _968 * _970;
    float _973 = _969 * _970;
    float _978 = (_967 + (-0.039999999105930328369140625)) * _825;
    float _979 = (_968 + (-0.039999999105930328369140625)) * _825;
    float _980 = (_969 + (-0.039999999105930328369140625)) * _825;
    float _981 = _978 + 0.039999999105930328369140625;
    float _983 = _979 + 0.039999999105930328369140625;
    float _984 = _980 + 0.039999999105930328369140625;
    vec4 _993 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _918, cbSceneParam._m0[86u].y * _919));
    float _996 = _993.x * TEXCOORD_5.w;
    float _997 = dot(vec3(_818, _819, _820), vec3(_898, _899, _900));
    float _1000 = _997 * 2.0;
    float _1004 = (_1000 * _818) - _898;
    float _1005 = (_1000 * _819) - _899;
    float _1006 = (_1000 * _820) - _900;
    float _1010 = abs(dot(vec3(_898, _899, _900), vec3(_818, _819, _820)));
    float _3983 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
    float _1012 = sqrt(_821);
    float _1025 = exp2((_1012 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1012 * 3.0));
    float _1031 = (1.0 - _1025) * ((_1012 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1032 = _1025 * _1012;
    float _1060 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1064 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1068 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1398;
    float _1400;
    float _1401;
    float _1402;
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1123 = fma(_1068, cbModelParam._m0[26u].z, fma(_1064, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1060));
        float _1127 = fma(_1068, cbModelParam._m0[27u].z, fma(_1064, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1060));
        float _1131 = fma(_1068, cbModelParam._m0[28u].z, fma(_1064, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1060));
        float _1156 = _1060 + _818;
        float _1157 = _1064 + _819;
        float _1158 = _1068 + _820;
        float _1168 = fma(_1158, cbModelParam._m0[26u].z, fma(_1157, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1156)) - _1123;
        float _1169 = fma(_1158, cbModelParam._m0[27u].z, fma(_1157, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1156)) - _1127;
        float _1170 = fma(_1158, cbModelParam._m0[28u].z, fma(_1157, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1156)) - _1131;
        float _1174 = inversesqrt(dot(vec3(_1168, _1169, _1170), vec3(_1168, _1169, _1170)));
        float _1187 = ((_1174 * _1168) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1123 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1188 = ((_1174 * _1169) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1127 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1189 = ((_1174 * _1170) / cbModelParam._m0[34u].z) + ((((((_1131 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1192 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        vec4 _1199 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        vec4 _1206 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        vec4 _1213 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1187, _1188, _1189), 0.0);
        float _1226 = exp2((_1192.w + (-0.5)) * 20.0) * 2.0;
        float _1227 = _1226 * (_1192.x + (-0.5));
        float _1228 = _1226 * (_1192.y + (-0.5));
        float _1229 = _1226 * (_1192.z + (-0.5));
        float _1236 = exp2((_1199.w + (-0.5)) * 20.0) * 2.0;
        float _1237 = _1236 * (_1199.x + (-0.5));
        float _1238 = _1236 * (_1199.y + (-0.5));
        float _1239 = _1236 * (_1199.z + (-0.5));
        float _1246 = exp2((_1206.w + (-0.5)) * 20.0) * 2.0;
        float _1247 = _1246 * (_1206.x + (-0.5));
        float _1248 = _1246 * (_1206.y + (-0.5));
        float _1249 = _1246 * (_1206.z + (-0.5));
        float _1256 = exp2((_1213.w + (-0.5)) * 20.0) * 2.0;
        float _1257 = _1256 * (_1213.x + (-0.5));
        float _1258 = _1256 * (_1213.y + (-0.5));
        float _1259 = _1256 * (_1213.z + (-0.5));
        float _1260 = isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0));
        float _1261 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1262 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
        float _1263 = _1227 * 0.5;
        float _1264 = _1237 * 0.5;
        float _1265 = _1247 * 0.5;
        float _1266 = dot(vec3(_1263, _1264, _1265), vec3(_1263, _1264, _1265));
        float _1271 = (_1266 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1266);
        float _1280 = (dot(vec3(_818, _819, _820), vec3(_1271 * _1263, _1271 * _1264, _1271 * _1265)) + 1.0) * 0.5;
        float _4009 = isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0));
        float _1290 = sqrt(((_1264 * _1264) + (_1263 * _1263)) + (_1265 * _1265)) / (_1260 + 9.9999997473787516355514526367188e-06);
        float _4020 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
        float _1292 = _1291 * 2.0;
        float _1296 = (1.0 - _1291) / (_1291 + 1.0);
        float _4031 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
        float _1306 = ((((1.0 - _1297) * (_1292 + 2.0)) * exp2(log2(isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0))) * (_1292 + 1.0))) + _1297) * _1260;
        float _1307 = _1228 * 0.5;
        float _1308 = _1238 * 0.5;
        float _1309 = _1248 * 0.5;
        float _1310 = dot(vec3(_1307, _1308, _1309), vec3(_1307, _1308, _1309));
        float _1315 = (_1310 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1310);
        float _1323 = (dot(vec3(_818, _819, _820), vec3(_1315 * _1307, _1315 * _1308, _1315 * _1309)) + 1.0) * 0.5;
        float _4042 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1332 = sqrt(((_1308 * _1308) + (_1307 * _1307)) + (_1309 * _1309)) / (_1261 + 9.9999997473787516355514526367188e-06);
        float _4053 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
        float _1334 = _1333 * 2.0;
        float _1338 = (1.0 - _1333) / (_1333 + 1.0);
        float _4064 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
        float _1348 = ((((1.0 - _1339) * (_1334 + 2.0)) * exp2(log2(isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0))) * (_1334 + 1.0))) + _1339) * _1261;
        float _1349 = _1229 * 0.5;
        float _1350 = _1239 * 0.5;
        float _1351 = _1249 * 0.5;
        float _1352 = dot(vec3(_1349, _1350, _1351), vec3(_1349, _1350, _1351));
        float _1357 = (_1352 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1352);
        float _1365 = (dot(vec3(_818, _819, _820), vec3(_1357 * _1349, _1357 * _1350, _1357 * _1351)) + 1.0) * 0.5;
        float _4075 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
        float _1374 = sqrt(((_1350 * _1350) + (_1349 * _1349)) + (_1351 * _1351)) / (_1262 + 9.9999997473787516355514526367188e-06);
        float _4086 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1375 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
        float _1376 = _1375 * 2.0;
        float _1380 = (1.0 - _1375) / (_1375 + 1.0);
        float _4097 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
        float _1390 = ((((1.0 - _1381) * (_1376 + 2.0)) * exp2(log2(isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0))) * (_1376 + 1.0))) + _1381) * _1262;
        _1398 = _1229;
        _1400 = _1228;
        _1401 = _1227;
        _1402 = _1239;
        _1403 = _1238;
        _1404 = _1237;
        _1405 = _1249;
        _1406 = _1248;
        _1407 = _1247;
        _1408 = _1262;
        _1409 = _1261;
        _1410 = _1260;
        _1411 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)));
        _1412 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)));
        _1413 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0)));
    }
    else
    {
        _1398 = _1399;
        _1400 = _1399;
        _1401 = _1399;
        _1402 = _1399;
        _1403 = _1399;
        _1404 = _1399;
        _1405 = _1399;
        _1406 = _1399;
        _1407 = _1399;
        _1408 = _1399;
        _1409 = _1399;
        _1410 = _1399;
        _1411 = 0.0;
        _1412 = 0.0;
        _1413 = 0.0;
    }
    float _1711;
    float _1712;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    float _1717;
    float _1718;
    float _1719;
    float _1720;
    float _1721;
    float _1722;
    float _1723;
    float _1724;
    float _1725;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1442 = fma(_1068, cbModelParam._m0[30u].z, fma(_1064, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1060));
        float _1446 = fma(_1068, cbModelParam._m0[31u].z, fma(_1064, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1060));
        float _1450 = fma(_1068, cbModelParam._m0[32u].z, fma(_1064, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1060));
        float _1473 = _1060 + _818;
        float _1474 = _1064 + _819;
        float _1475 = _1068 + _820;
        float _1485 = fma(_1475, cbModelParam._m0[30u].z, fma(_1474, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1473)) - _1442;
        float _1486 = fma(_1475, cbModelParam._m0[31u].z, fma(_1474, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1473)) - _1446;
        float _1487 = fma(_1475, cbModelParam._m0[32u].z, fma(_1474, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1473)) - _1450;
        float _1491 = inversesqrt(dot(vec3(_1485, _1486, _1487), vec3(_1485, _1486, _1487)));
        float _1504 = ((_1491 * _1485) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1442 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1505 = ((_1491 * _1486) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1446 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1506 = ((_1491 * _1487) / cbModelParam._m0[35u].z) + ((((((_1450 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1508 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1504, _1505, _1506), 0.0);
        vec4 _1515 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1504, _1505, _1506), 0.0);
        vec4 _1522 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1504, _1505, _1506), 0.0);
        vec4 _1529 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1504, _1505, _1506), 0.0);
        float _1541 = exp2((_1508.w + (-0.5)) * 20.0) * 2.0;
        float _1542 = _1541 * (_1508.x + (-0.5));
        float _1543 = _1541 * (_1508.y + (-0.5));
        float _1544 = _1541 * (_1508.z + (-0.5));
        float _1551 = exp2((_1515.w + (-0.5)) * 20.0) * 2.0;
        float _1552 = _1551 * (_1515.x + (-0.5));
        float _1553 = _1551 * (_1515.y + (-0.5));
        float _1554 = _1551 * (_1515.z + (-0.5));
        float _1561 = exp2((_1522.w + (-0.5)) * 20.0) * 2.0;
        float _1562 = _1561 * (_1522.x + (-0.5));
        float _1563 = _1561 * (_1522.y + (-0.5));
        float _1564 = _1561 * (_1522.z + (-0.5));
        float _1571 = exp2((_1529.w + (-0.5)) * 20.0) * 2.0;
        float _1572 = _1571 * (_1529.x + (-0.5));
        float _1573 = _1571 * (_1529.y + (-0.5));
        float _1574 = _1571 * (_1529.z + (-0.5));
        float _1575 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
        float _1576 = isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0));
        float _1577 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
        float _1578 = _1542 * 0.5;
        float _1579 = _1552 * 0.5;
        float _1580 = _1562 * 0.5;
        float _1581 = dot(vec3(_1578, _1579, _1580), vec3(_1578, _1579, _1580));
        float _1586 = (_1581 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1581);
        float _1594 = (dot(vec3(_818, _819, _820), vec3(_1586 * _1578, _1586 * _1579, _1586 * _1580)) + 1.0) * 0.5;
        float _4138 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1603 = sqrt(((_1579 * _1579) + (_1578 * _1578)) + (_1580 * _1580)) / (_1575 + 9.9999997473787516355514526367188e-06);
        float _4149 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1604 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1605 = _1604 * 2.0;
        float _1609 = (1.0 - _1604) / (_1604 + 1.0);
        float _4160 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1610 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1619 = ((((1.0 - _1610) * (_1605 + 2.0)) * exp2(log2(isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_1605 + 1.0))) + _1610) * _1575;
        float _1620 = _1543 * 0.5;
        float _1621 = _1553 * 0.5;
        float _1622 = _1563 * 0.5;
        float _1623 = dot(vec3(_1620, _1621, _1622), vec3(_1620, _1621, _1622));
        float _1628 = (_1623 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1623);
        float _1636 = (dot(vec3(_818, _819, _820), vec3(_1628 * _1620, _1628 * _1621, _1628 * _1622)) + 1.0) * 0.5;
        float _4171 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
        float _1645 = sqrt(((_1621 * _1621) + (_1620 * _1620)) + (_1622 * _1622)) / (_1576 + 9.9999997473787516355514526367188e-06);
        float _4182 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
        float _1646 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1647 = _1646 * 2.0;
        float _1651 = (1.0 - _1646) / (_1646 + 1.0);
        float _4193 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
        float _1652 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1661 = ((((1.0 - _1652) * (_1647 + 2.0)) * exp2(log2(isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_1647 + 1.0))) + _1652) * _1576;
        float _1662 = _1544 * 0.5;
        float _1663 = _1554 * 0.5;
        float _1664 = _1564 * 0.5;
        float _1665 = dot(vec3(_1662, _1663, _1664), vec3(_1662, _1663, _1664));
        float _1670 = (_1665 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1665);
        float _1678 = (dot(vec3(_818, _819, _820), vec3(_1670 * _1662, _1670 * _1663, _1670 * _1664)) + 1.0) * 0.5;
        float _4204 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1687 = sqrt(((_1663 * _1663) + (_1662 * _1662)) + (_1664 * _1664)) / (_1577 + 9.9999997473787516355514526367188e-06);
        float _4215 = isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0));
        float _1688 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _1689 = _1688 * 2.0;
        float _1693 = (1.0 - _1688) / (_1688 + 1.0);
        float _4226 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
        float _1694 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _1703 = ((((1.0 - _1694) * (_1689 + 2.0)) * exp2(log2(isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) * (_1689 + 1.0))) + _1694) * _1577;
        _1711 = _1544;
        _1712 = _1543;
        _1713 = _1542;
        _1714 = _1554;
        _1715 = _1553;
        _1716 = _1552;
        _1717 = _1564;
        _1718 = _1563;
        _1719 = _1562;
        _1720 = _1577;
        _1721 = _1576;
        _1722 = _1575;
        _1723 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)));
        _1724 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0)));
        _1725 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0)));
    }
    else
    {
        _1711 = _1399;
        _1712 = _1399;
        _1713 = _1399;
        _1714 = _1399;
        _1715 = _1399;
        _1716 = _1399;
        _1717 = _1399;
        _1718 = _1399;
        _1719 = _1399;
        _1720 = _1399;
        _1721 = _1399;
        _1722 = _1399;
        _1723 = 0.0;
        _1724 = 0.0;
        _1725 = 0.0;
    }
    float _1735 = (cbModelParam._m0[1u].x * (_1723 - _1411)) + _1411;
    float _1736 = (cbModelParam._m0[1u].x * (_1724 - _1412)) + _1412;
    float _1737 = (cbModelParam._m0[1u].x * (_1725 - _1413)) + _1413;
    float _1758 = fma(_1737, cbSceneParam._m0[89u].z, fma(_1736, cbSceneParam._m0[89u].y, _1735 * cbSceneParam._m0[89u].x));
    float _1761 = fma(_1737, cbSceneParam._m0[90u].z, fma(_1736, cbSceneParam._m0[90u].y, _1735 * cbSceneParam._m0[90u].x));
    float _1764 = fma(_1737, cbSceneParam._m0[91u].z, fma(_1736, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1735));
    float _1779 = _1004 * 0.5;
    float _1780 = _1005 * 0.5;
    float _1781 = _1006 * 0.5;
    float _1782 = dot(vec4(_1779, _1780, _1781, 1.0), vec4(_1713, _1716, _1719, _1722));
    float _1785 = dot(vec4(_1779, _1780, _1781, 1.0), vec4(_1712, _1715, _1718, _1721));
    float _1788 = dot(vec4(_1779, _1780, _1781, 1.0), vec4(_1711, _1714, _1717, _1720));
    float _1822;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1795 = dot(vec4(_1779, _1780, _1781, 1.0), vec4(_1398, _1402, _1405, _1408));
        float _1799 = dot(vec4(_1779, _1780, _1781, 1.0), vec4(_1400, _1403, _1406, _1409));
        float _1803 = dot(vec4(_1779, _1780, _1781, 1.0), vec4(_1401, _1404, _1407, _1410));
        float _1810 = dot(vec4(cbModelParam._m0[39u]), vec4(_1779, _1780, _1781, 1.0));
        _1822 = dot(vec3(isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0)), isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0)), isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1810) ? 0.0 : (isnan(0.0) ? _1810 : max(0.0, _1810))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1822 = 1.0;
    }
    float _1833;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1824 = dot(vec4(cbModelParam._m0[40u]), vec4(_1779, _1780, _1781, 1.0));
        _1833 = dot(vec3(isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0)), isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0)), isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1824) ? 0.0 : (isnan(0.0) ? _1824 : max(0.0, _1824))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1833 = 1.0;
    }
    float _1837 = (_1833 * cbModelParam._m0[1u].x) + (_1822 * (1.0 - cbModelParam._m0[1u].x));
    float _1847 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _821);
    float _1848 = isnan(_1847) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1847 : min(cbModelParam._m0[25u].z, _1847));
    float _1928;
    float _1930;
    float _1932;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1895 = fma(_1068, cbModelParam._m0[13u].z, fma(_1064, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1060)) + cbModelParam._m0[13u].w;
        float _1899 = fma(_1068, cbModelParam._m0[14u].z, fma(_1064, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1060)) + cbModelParam._m0[14u].w;
        float _1903 = fma(_1068, cbModelParam._m0[15u].z, fma(_1064, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1060)) + cbModelParam._m0[15u].w;
        float _1906 = fma(_1006, cbModelParam._m0[13u].z, fma(_1005, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1004));
        float _1909 = fma(_1006, cbModelParam._m0[14u].z, fma(_1005, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1004));
        float _1912 = fma(_1006, cbModelParam._m0[15u].z, fma(_1005, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1004));
        float _1940;
        if (_1906 > 0.0)
        {
            _1940 = abs((1.0 - _1895) / _1906);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1906 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1895 + 1.0) / _1906);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1940 = frontier_phi_17_15_ladder;
        }
        float _2165;
        if (_1909 > 0.0)
        {
            _2165 = abs((1.0 - _1899) / _1909);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1909 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1899 + 1.0) / _1909);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2165 = frontier_phi_26_22_ladder;
        }
        float _2422;
        if (_1912 > 0.0)
        {
            _2422 = abs((1.0 - _1903) / _1912);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1912 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1903 + 1.0) / _1912);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2422 = frontier_phi_38_33_ladder;
        }
        float _2424 = isnan(_2165) ? _1940 : (isnan(_1940) ? _2165 : min(_1940, _2165));
        float _2425 = isnan(_2422) ? _2424 : (isnan(_2424) ? _2422 : min(_2424, _2422));
        float _2429 = (_2425 * _1906) + _1895;
        float _2430 = (_2425 * _1909) + _1899;
        float _2431 = (_2425 * _1912) + _1903;
        float _2432 = _2425 * 9.9999997473787516355514526367188e-05;
        float _2434 = (-1.0) - _2432;
        float _2436 = _2432 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2431 > _2436) || ((_2431 < _2434) || ((_2430 > _2436) || ((_2430 < _2434) || ((_2429 < _2434) || (_2429 > _2436))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2559 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2431, cbModelParam._m0[9u].z, fma(_2430, cbModelParam._m0[9u].y, _2429 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2431, cbModelParam._m0[10u].z, fma(_2430, cbModelParam._m0[10u].y, _2429 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2431, cbModelParam._m0[11u].z, fma(_2430, cbModelParam._m0[11u].y, _2429 * cbModelParam._m0[11u].x))), _1848);
            frontier_phi_16_38_ladder = _2559.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2559.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2559.x * cbModelParam._m0[1u].y;
        }
        _1928 = frontier_phi_16_38_ladder_2;
        _1930 = frontier_phi_16_38_ladder_1;
        _1932 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1916 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1004, _1005, _1006), _1848);
        _1928 = _1916.x * cbModelParam._m0[1u].y;
        _1930 = _1916.y * cbModelParam._m0[1u].y;
        _1932 = _1916.z * cbModelParam._m0[1u].y;
    }
    float _1936 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _821);
    float _1937 = isnan(_1936) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1936 : min(cbModelParam._m0[25u].w, _1936));
    float _2028;
    float _2030;
    float _2032;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1992 = fma(_1068, cbModelParam._m0[21u].z, fma(_1064, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1060)) + cbModelParam._m0[21u].w;
        float _1996 = fma(_1068, cbModelParam._m0[22u].z, fma(_1064, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1060)) + cbModelParam._m0[22u].w;
        float _2000 = fma(_1068, cbModelParam._m0[23u].z, fma(_1064, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1060)) + cbModelParam._m0[23u].w;
        float _2003 = fma(_1006, cbModelParam._m0[21u].z, fma(_1005, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1004));
        float _2006 = fma(_1006, cbModelParam._m0[22u].z, fma(_1005, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1004));
        float _2009 = fma(_1006, cbModelParam._m0[23u].z, fma(_1005, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1004));
        float _2170;
        if (_2003 > 0.0)
        {
            _2170 = abs((1.0 - _1992) / _2003);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2003 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1992 + 1.0) / _2003);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2170 = frontier_phi_28_24_ladder;
        }
        float _2449;
        if (_2006 > 0.0)
        {
            _2449 = abs((1.0 - _1996) / _2006);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2006 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1996 + 1.0) / _2006);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2449 = frontier_phi_40_35_ladder;
        }
        float _2662;
        if (_2009 > 0.0)
        {
            _2662 = abs((1.0 - _2000) / _2009);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_2009 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_2000 + 1.0) / _2009);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2662 = frontier_phi_49_46_ladder;
        }
        float _2664 = isnan(_2449) ? _2170 : (isnan(_2170) ? _2449 : min(_2170, _2449));
        float _2665 = isnan(_2662) ? _2664 : (isnan(_2664) ? _2662 : min(_2664, _2662));
        float _2669 = (_2665 * _2003) + _1992;
        float _2670 = (_2665 * _2006) + _1996;
        float _2671 = (_2665 * _2009) + _2000;
        float _2672 = _2665 * 9.9999997473787516355514526367188e-05;
        float _2673 = (-1.0) - _2672;
        float _2675 = _2672 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2671 > _2675) || ((_2671 < _2673) || ((_2670 > _2675) || ((_2670 < _2673) || ((_2669 < _2673) || (_2669 > _2675))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2870 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2671, cbModelParam._m0[17u].z, fma(_2670, cbModelParam._m0[17u].y, _2669 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2671, cbModelParam._m0[18u].z, fma(_2670, cbModelParam._m0[18u].y, _2669 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2671, cbModelParam._m0[19u].z, fma(_2670, cbModelParam._m0[19u].y, _2669 * cbModelParam._m0[19u].x))), _1937);
            frontier_phi_25_49_ladder = _2870.z * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_1 = _2870.y * cbModelParam._m0[1u].z;
            frontier_phi_25_49_ladder_2 = _2870.x * cbModelParam._m0[1u].z;
        }
        _2028 = frontier_phi_25_49_ladder_2;
        _2030 = frontier_phi_25_49_ladder_1;
        _2032 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _2012 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1004, _1005, _1006), _1937);
        _2028 = _2012.x * cbModelParam._m0[1u].z;
        _2030 = _2012.y * cbModelParam._m0[1u].z;
        _2032 = _2012.z * cbModelParam._m0[1u].z;
    }
    float _2045 = (((_1031 * _981) + _1032) * _996) * ((cbModelParam._m0[1u].w * (_2028 - _1928)) + _1928);
    float _2047 = (((_1031 * _983) + _1032) * _996) * ((cbModelParam._m0[1u].w * (_2030 - _1930)) + _1930);
    float _2049 = (((_1031 * _984) + _1032) * _996) * ((cbModelParam._m0[1u].w * (_2032 - _1932)) + _1932);
    float _2052 = fma(_2049, cbSceneParam._m0[89u].z, fma(_2047, cbSceneParam._m0[89u].y, _2045 * cbSceneParam._m0[89u].x));
    float _2055 = fma(_2049, cbSceneParam._m0[90u].z, fma(_2047, cbSceneParam._m0[90u].y, _2045 * cbSceneParam._m0[90u].x));
    float _2058 = fma(_2049, cbSceneParam._m0[91u].z, fma(_2047, cbSceneParam._m0[91u].y, _2045 * cbSceneParam._m0[91u].x));
    vec4 _2066 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_918, _919));
    float _2068 = _2066.w;
    float _2080 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2068);
    float _2081 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2068);
    float _2082 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2068);
    uvec4 _2086 = floatBitsToUint(cbInstanceData._m0[_956 + 5u]);
    uint _2088 = _2086.x * 14u;
    uint _2089 = _2088 + 13u;
    float _2096 = _996 + (-1.0);
    float _2101 = (cbLight._m0[_2089].x * _2096) + 1.0;
    float _2102 = (cbLight._m0[_2089].y * _2096) + 1.0;
    float _2103 = (cbLight._m0[_2089].z * _2096) + 1.0;
    float _2104 = (cbLight._m0[_2089].w * _2096) + 1.0;
    uint _2105 = _2088 + 5u;
    float _2111 = isnan(1.0) ? _2102 : (isnan(_2102) ? 1.0 : min(_2102, 1.0));
    uint _2115 = _2088 + 4u;
    float _2124 = isnan(1.0) ? _2101 : (isnan(_2101) ? 1.0 : min(_2101, 1.0));
    uint _2128 = _2088 | 1u;
    float _2139 = dot(vec3(cbLight._m0[_2088].xyz), vec3(_818, _819, _820));
    float _2142 = dot(vec3(cbLight._m0[_2128].xyz), vec3(_818, _819, _820));
    float _4362 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
    float _4373 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
    float _2147 = (isnan(1.0) ? _4362 : (isnan(_4362) ? 1.0 : min(_4362, 1.0))) * 0.3183098733425140380859375;
    float _2149 = (isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0))) * 0.3183098733425140380859375;
    float _2156 = ((cbLight._m0[_2105].x * _2111) * _2149) + (((cbLight._m0[_2115].x * _2080) * _2124) * _2147);
    float _2157 = ((_2111 * cbLight._m0[_2105].y) * _2149) + (((cbLight._m0[_2115].y * _2081) * _2124) * _2147);
    float _2158 = ((_2111 * cbLight._m0[_2105].z) * _2149) + (((cbLight._m0[_2115].z * _2082) * _2124) * _2147);
    uvec4 _2162 = floatBitsToUint(cbLight._m0[_2088 + 12u]);
    bool _2164 = _2162.x == 0u;
    float _2175;
    float _2177;
    float _2179;
    if (_2164)
    {
        _2175 = _2156;
        _2177 = _2157;
        _2179 = _2158;
    }
    else
    {
        uint _2183 = _2088 + 6u;
        float _2199 = (dot(vec3(cbLight._m0[_2088 + 2u].xyz), vec3(_818, _819, _820)) * 0.5) + 0.5;
        float _2200 = _2199 * _2199;
        float _4384 = isnan(0.0) ? _2200 : (isnan(_2200) ? 0.0 : max(_2200, 0.0));
        float _2201 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
        float _2202 = isnan(1.0) ? _2103 : (isnan(_2103) ? 1.0 : min(_2103, 1.0));
        _2175 = (((cbLight._m0[_2183].x * 0.3183098733425140380859375) * _2201) * _2202) + _2156;
        _2177 = (((cbLight._m0[_2183].y * 0.3183098733425140380859375) * _2201) * _2202) + _2157;
        _2179 = (((cbLight._m0[_2183].z * 0.3183098733425140380859375) * _2201) * _2202) + _2158;
    }
    bool _2182 = _2162.y == 0u;
    float _2220;
    float _2222;
    float _2224;
    if (_2182)
    {
        _2220 = _2175;
        _2222 = _2177;
        _2224 = _2179;
    }
    else
    {
        uint _2393 = _2088 + 7u;
        float _2409 = (dot(vec3(cbLight._m0[_2088 + 3u].xyz), vec3(_818, _819, _820)) * 0.5) + 0.5;
        float _2410 = _2409 * _2409;
        float _4400 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
        float _2411 = isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0));
        float _2412 = isnan(1.0) ? _2104 : (isnan(_2104) ? 1.0 : min(_2104, 1.0));
        _2220 = (((cbLight._m0[_2393].x * 0.3183098733425140380859375) * _2411) * _2412) + _2175;
        _2222 = (((cbLight._m0[_2393].y * 0.3183098733425140380859375) * _2411) * _2412) + _2177;
        _2224 = (((cbLight._m0[_2393].z * 0.3183098733425140380859375) * _2411) * _2412) + _2179;
    }
    uint _2227 = _2088 + 8u;
    float _2240 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2088].w)) * _821) * 0.949999988079071044921875);
    float _2241 = _2240 * _2240;
    float _2242 = cbLight._m0[_2088].x + _898;
    float _2243 = cbLight._m0[_2088].y + _899;
    float _2244 = cbLight._m0[_2088].z + _900;
    float _2248 = inversesqrt(dot(vec3(_2242, _2243, _2244), vec3(_2242, _2243, _2244)));
    float _2249 = _2248 * _2242;
    float _2250 = _2248 * _2243;
    float _2251 = _2248 * _2244;
    float _2252 = dot(vec3(_818, _819, _820), vec3(cbLight._m0[_2088].xyz));
    float _4416 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2255 = isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0));
    float _4427 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
    float _2256 = isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0));
    float _2257 = dot(vec3(_818, _819, _820), vec3(_2249, _2250, _2251));
    float _4438 = isnan(0.0) ? _2257 : (isnan(_2257) ? 0.0 : max(_2257, 0.0));
    float _2260 = isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0));
    float _2261 = dot(vec3(cbLight._m0[_2088].xyz), vec3(_2249, _2250, _2251));
    float _4449 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
    float _2265 = _2241 * _2241;
    float _2269 = ((_2260 * _2260) * (_2265 + (-1.0))) + 1.0;
    float _2277 = exp2(log2(1.0 - (isnan(1.0) ? _4449 : (isnan(_4449) ? 1.0 : min(_4449, 1.0)))) * 5.0);
    float _2278 = 0.959999978542327880859375 - _978;
    float _2280 = 0.959999978542327880859375 - _979;
    float _2281 = 0.959999978542327880859375 - _980;
    float _2288 = 1.0 - _2241;
    float _2299 = (0.5 / (((_2256 * ((_2255 * _2288) + _2241)) + 9.9999999392252902907785028219223e-09) + (((_2256 * _2288) + _2241) * _2255))) * _2255;
    float _4460 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _2301 = (isnan(1.0) ? _4460 : (isnan(_4460) ? 1.0 : min(_4460, 1.0))) * (_2265 / ((_2269 * _2269) * 3.141590118408203125));
    uint _2315 = _2088 + 9u;
    float _2326 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2128].w)) * _821) * 0.949999988079071044921875);
    float _2327 = _2326 * _2326;
    float _2328 = cbLight._m0[_2128].x + _898;
    float _2329 = cbLight._m0[_2128].y + _899;
    float _2330 = cbLight._m0[_2128].z + _900;
    float _2334 = inversesqrt(dot(vec3(_2328, _2329, _2330), vec3(_2328, _2329, _2330)));
    float _2335 = _2334 * _2328;
    float _2336 = _2334 * _2329;
    float _2337 = _2334 * _2330;
    float _2338 = dot(vec3(_818, _819, _820), vec3(cbLight._m0[_2128].xyz));
    float _4471 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2341 = isnan(1.0) ? _4471 : (isnan(_4471) ? 1.0 : min(_4471, 1.0));
    float _2342 = dot(vec3(_818, _819, _820), vec3(_2335, _2336, _2337));
    float _4482 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
    float _2345 = isnan(1.0) ? _4482 : (isnan(_4482) ? 1.0 : min(_4482, 1.0));
    float _2346 = dot(vec3(cbLight._m0[_2128].xyz), vec3(_2335, _2336, _2337));
    float _4493 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
    float _2350 = _2327 * _2327;
    float _2354 = ((_2345 * _2345) * (_2350 + (-1.0))) + 1.0;
    float _2361 = exp2(log2(1.0 - (isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0)))) * 5.0);
    float _2368 = 1.0 - _2327;
    float _2378 = (0.5 / (((_2256 * ((_2341 * _2368) + _2327)) + 9.9999999392252902907785028219223e-09) + (((_2256 * _2368) + _2327) * _2341))) * _2341;
    float _4504 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
    float _2380 = (isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * (_2350 / ((_2354 * _2354) * 3.141590118408203125));
    float _2390 = (((((_2361 * _2278) + _981) * cbLight._m0[_2315].x) * _2380) * _2111) + ((((cbLight._m0[_2227].x * _2080) * ((_2277 * _2278) + _981)) * _2301) * _2124);
    float _2391 = (((((_2361 * _2280) + _983) * cbLight._m0[_2315].y) * _2380) * _2111) + ((((cbLight._m0[_2227].y * _2081) * ((_2277 * _2280) + _983)) * _2301) * _2124);
    float _2392 = (((((_2361 * _2281) + _984) * cbLight._m0[_2315].z) * _2380) * _2111) + ((((cbLight._m0[_2227].z * _2082) * ((_2277 * _2281) + _984)) * _2301) * _2124);
    float _2454;
    float _2456;
    float _2458;
    if (_2164)
    {
        _2454 = _2390;
        _2456 = _2391;
        _2458 = _2392;
    }
    else
    {
        uint _2460 = _2088 + 2u;
        uint _2464 = _2088 + 10u;
        float _2478 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2460].w)) * _821) * 0.949999988079071044921875);
        float _2479 = _2478 * _2478;
        float _2480 = cbLight._m0[_2460].x + _898;
        float _2481 = cbLight._m0[_2460].y + _899;
        float _2482 = cbLight._m0[_2460].z + _900;
        float _2486 = inversesqrt(dot(vec3(_2480, _2481, _2482), vec3(_2480, _2481, _2482)));
        float _2487 = _2486 * _2480;
        float _2488 = _2486 * _2481;
        float _2489 = _2486 * _2482;
        float _2490 = dot(vec3(_818, _819, _820), vec3(cbLight._m0[_2460].xyz));
        float _4515 = isnan(0.0) ? _2490 : (isnan(_2490) ? 0.0 : max(_2490, 0.0));
        float _2493 = isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0));
        float _2494 = dot(vec3(_818, _819, _820), vec3(_2487, _2488, _2489));
        float _4526 = isnan(0.0) ? _2494 : (isnan(_2494) ? 0.0 : max(_2494, 0.0));
        float _2497 = isnan(1.0) ? _4526 : (isnan(_4526) ? 1.0 : min(_4526, 1.0));
        float _2498 = dot(vec3(cbLight._m0[_2460].xyz), vec3(_2487, _2488, _2489));
        float _4537 = isnan(0.0) ? _2498 : (isnan(_2498) ? 0.0 : max(_2498, 0.0));
        float _2502 = _2479 * _2479;
        float _2506 = ((_2497 * _2497) * (_2502 + (-1.0))) + 1.0;
        float _2513 = exp2(log2(1.0 - (isnan(1.0) ? _4537 : (isnan(_4537) ? 1.0 : min(_4537, 1.0)))) * 5.0);
        float _2520 = 1.0 - _2479;
        float _2530 = (0.5 / (((_2256 * ((_2493 * _2520) + _2479)) + 9.9999999392252902907785028219223e-09) + (((_2256 * _2520) + _2479) * _2493))) * _2493;
        float _4548 = isnan(0.0) ? _2530 : (isnan(_2530) ? 0.0 : max(_2530, 0.0));
        float _2532 = (isnan(1.0) ? _4548 : (isnan(_4548) ? 1.0 : min(_4548, 1.0))) * (_2502 / ((_2506 * _2506) * 3.141590118408203125));
        float _2533 = isnan(1.0) ? _2103 : (isnan(_2103) ? 1.0 : min(_2103, 1.0));
        _2454 = (((((_2513 * _2278) + _981) * cbLight._m0[_2464].x) * _2532) * _2533) + _2390;
        _2456 = (((((_2513 * _2280) + _983) * cbLight._m0[_2464].y) * _2532) * _2533) + _2391;
        _2458 = (((((_2513 * _2281) + _984) * cbLight._m0[_2464].z) * _2532) * _2533) + _2392;
    }
    float _2568;
    float _2570;
    float _2572;
    if (_2182)
    {
        _2568 = _2454;
        _2570 = _2456;
        _2572 = _2458;
    }
    else
    {
        uint _2579 = _2088 + 3u;
        uint _2583 = _2088 + 11u;
        float _2597 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2579].w)) * _821) * 0.949999988079071044921875);
        float _2598 = _2597 * _2597;
        float _2599 = cbLight._m0[_2579].x + _898;
        float _2600 = cbLight._m0[_2579].y + _899;
        float _2601 = cbLight._m0[_2579].z + _900;
        float _2605 = inversesqrt(dot(vec3(_2599, _2600, _2601), vec3(_2599, _2600, _2601)));
        float _2606 = _2605 * _2599;
        float _2607 = _2605 * _2600;
        float _2608 = _2605 * _2601;
        float _2609 = dot(vec3(_818, _819, _820), vec3(cbLight._m0[_2579].xyz));
        float _4564 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
        float _2612 = isnan(1.0) ? _4564 : (isnan(_4564) ? 1.0 : min(_4564, 1.0));
        float _2613 = dot(vec3(_818, _819, _820), vec3(_2606, _2607, _2608));
        float _4575 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
        float _2616 = isnan(1.0) ? _4575 : (isnan(_4575) ? 1.0 : min(_4575, 1.0));
        float _2617 = dot(vec3(cbLight._m0[_2579].xyz), vec3(_2606, _2607, _2608));
        float _4586 = isnan(0.0) ? _2617 : (isnan(_2617) ? 0.0 : max(_2617, 0.0));
        float _2621 = _2598 * _2598;
        float _2625 = ((_2616 * _2616) * (_2621 + (-1.0))) + 1.0;
        float _2632 = exp2(log2(1.0 - (isnan(1.0) ? _4586 : (isnan(_4586) ? 1.0 : min(_4586, 1.0)))) * 5.0);
        float _2639 = 1.0 - _2598;
        float _2649 = (0.5 / (((_2256 * ((_2612 * _2639) + _2598)) + 9.9999999392252902907785028219223e-09) + (((_2256 * _2639) + _2598) * _2612))) * _2612;
        float _4597 = isnan(0.0) ? _2649 : (isnan(_2649) ? 0.0 : max(_2649, 0.0));
        float _2651 = (isnan(1.0) ? _4597 : (isnan(_4597) ? 1.0 : min(_4597, 1.0))) * (_2621 / ((_2625 * _2625) * 3.141590118408203125));
        float _2652 = isnan(1.0) ? _2104 : (isnan(_2104) ? 1.0 : min(_2104, 1.0));
        _2568 = (((((_2632 * _2278) + _981) * cbLight._m0[_2583].x) * _2651) * _2652) + _2454;
        _2570 = (((((_2632 * _2280) + _983) * cbLight._m0[_2583].y) * _2651) * _2652) + _2456;
        _2572 = (((((_2632 * _2281) + _984) * cbLight._m0[_2583].z) * _2651) * _2652) + _2458;
    }
    float _2787;
    float _2789;
    float _2791;
    float _2793;
    float _2795;
    float _2797;
    if (_2086.y == 0u)
    {
        float _2727 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2728 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2727;
        float _2729 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2727;
        float _2730 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2727;
        uvec4 _2742 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2743 = _2742.x;
        uint _2754 = uint((float(_2742.y) * floor(float(uint(cbSceneParam._m0[85u].y * _919) / _2743))) + floor(float(uint(cbSceneParam._m0[85u].x * _918) / _2743)));
        float _2764 = (log2(_2730 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2765 = isnan(0.0) ? _2764 : (isnan(_2764) ? 0.0 : max(_2764, 0.0));
        uint _2768 = uint(isnan(14.0) ? _2765 : (isnan(_2765) ? 14.0 : min(_2765, 14.0)));
        uvec4 _2773 = texelFetch(g_lightClusterGridBuffer, int(((_2768 << 2u) + (_2754 << 6u)) >> 2u));
        uint _2774 = _2773.x;
        uint _2775 = _2742.z;
        float _2875;
        float _2877;
        float _2879;
        float _2881;
        float _2883;
        float _2885;
        if (((((1u << ((_2775 >> 4u) & 15u)) + 4294967295u) & _2774) == 0u) || ((_2775 & 240u) == 0u))
        {
            _2875 = 0.0;
            _2877 = 0.0;
            _2879 = 0.0;
            _2881 = 0.0;
            _2883 = 0.0;
            _2885 = 0.0;
        }
        else
        {
            float _2876;
            float _2878;
            float _2880;
            float _2882;
            float _2884;
            float _2886;
            float _3028 = 0.0;
            float _3029 = 0.0;
            float _3030 = 0.0;
            float _3031 = 0.0;
            float _3032 = 0.0;
            float _3033 = 0.0;
            uint _3034 = 0u;
            uint _3043;
            bool _3044;
            for (;;)
            {
                _3043 = texelFetch(g_lightClassification, int((((_2768 << 5u) + (_2754 << 9u)) + (_3034 << 2u)) >> 2u)).x;
                _3044 = _3043 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3044)
                {
                    frontier_phi_66_pred = _3028;
                    frontier_phi_66_pred_1 = _3033;
                    frontier_phi_66_pred_2 = _3032;
                    frontier_phi_66_pred_3 = _3031;
                    frontier_phi_66_pred_4 = _3030;
                    frontier_phi_66_pred_5 = _3029;
                }
                else
                {
                    float _3173;
                    float _3174;
                    float _3175;
                    float _3176;
                    float _3177;
                    float _3178;
                    uint _3179;
                    _3173 = _3028;
                    _3174 = _3029;
                    _3175 = _3030;
                    _3176 = _3031;
                    _3177 = _3032;
                    _3178 = _3033;
                    _3179 = _3043;
                    float _3100;
                    float _3101;
                    float _3102;
                    float _3103;
                    float _3104;
                    float _3105;
                    for (;;)
                    {
                        uint _3183 = uint(findLSB(_3179)) + (_3034 << 5u);
                        uint _3180 = (_3179 + 4294967295u) & _3179;
                        uint _3185 = _3183 * 48u;
                        vec4 _3199 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3185)).x, texelFetch(g_PointLightRenderingBuffer, int(_3185 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3185 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3185 + 3u)).x));
                        uint _3205 = (_3183 * 48u) + 4u;
                        vec4 _3218 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3205)).x, texelFetch(g_PointLightRenderingBuffer, int(_3205 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3205 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3205 + 3u)).x));
                        uint _3224 = (_3183 * 48u) + 8u;
                        vec3 _3235 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3224)).x, texelFetch(g_PointLightRenderingBuffer, int(_3224 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3224 + 2u)).x));
                        float _3239 = _3199.x - _2728;
                        float _3240 = _3199.y - _2729;
                        float _3241 = _3199.z - _2730;
                        float _3242 = dot(vec3(_3239, _3240, _3241), vec3(_3239, _3240, _3241));
                        float _3245 = inversesqrt(_3242);
                        float _3246 = _3245 * _3239;
                        float _3247 = _3245 * _3240;
                        float _3248 = _3245 * _3241;
                        float _3249 = dot(vec3(_937, _940, _943), vec3(_3246, _3247, _3248));
                        float _3254 = 1.0 - (_3242 * _3199.w);
                        float _4623 = isnan(0.0) ? _3254 : (isnan(_3254) ? 0.0 : max(_3254, 0.0));
                        float _3255 = isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0));
                        float _3256 = sqrt(_3242) * _3218.w;
                        float _3259 = 1.39999997615814208984375 / (_3256 + 1.39999997615814208984375);
                        float _3260 = _3259 * _3259;
                        float _3263 = ((1.0 - _3260) * _3249) + _3260;
                        float _3266 = _3256 * _3256;
                        float _3270 = ((isnan(0.0) ? _3263 : (isnan(_3263) ? 0.0 : max(_3263, 0.0))) * _3255) / ((_3266 * 0.699999988079071044921875) + 1.0);
                        float _3274 = (-0.0) - _2728;
                        float _3275 = (-0.0) - _2729;
                        float _3276 = (-0.0) - _2730;
                        float _3280 = inversesqrt(dot(vec3(_3274, _3275, _3276), vec3(_3274, _3275, _3276)));
                        float _3281 = _3280 * _3274;
                        float _3282 = _3280 * _3275;
                        float _3283 = _3280 * _3276;
                        float _3291 = exp2(log2(1.0 / ((_3266 * 3.5) + 5.0)) * 0.25);
                        float _3292 = 1.0 - _1012;
                        float _3299 = sqrt(1.0 - ((1.0 - (_3292 * _3292)) * (1.0 - (_3291 * _3291))));
                        float _3300 = _3299 * _3299;
                        float _3301 = _3300 * _3300;
                        float _3302 = _3281 + _3246;
                        float _3303 = _3282 + _3247;
                        float _3304 = _3283 + _3248;
                        float _3308 = inversesqrt(dot(vec3(_3302, _3303, _3304), vec3(_3302, _3303, _3304)));
                        float _3312 = dot(vec3(_937, _940, _943), vec3(_3281, _3282, _3283));
                        float _4639 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                        float _3315 = isnan(1.0) ? _4639 : (isnan(_4639) ? 1.0 : min(_4639, 1.0));
                        float _3316 = dot(vec3(_937, _940, _943), vec3(_3308 * _3302, _3308 * _3303, _3308 * _3304));
                        float _4650 = isnan(0.0) ? _3316 : (isnan(_3316) ? 0.0 : max(_3316, 0.0));
                        float _3319 = isnan(1.0) ? _4650 : (isnan(_4650) ? 1.0 : min(_4650, 1.0));
                        float _3323 = ((_3319 * _3319) * (_3301 + (-1.0))) + 1.0;
                        float _3324 = _3259 * _3300;
                        float _3325 = _3324 * _3324;
                        float _3328 = ((1.0 - _3325) * _3249) + _3325;
                        float _4661 = isnan(0.0) ? _3328 : (isnan(_3328) ? 0.0 : max(_3328, 0.0));
                        float _3329 = isnan(1.0) ? _4661 : (isnan(_4661) ? 1.0 : min(_4661, 1.0));
                        float _3330 = 1.0 - _3300;
                        float _3340 = (0.5 / (((_3329 * ((_3315 * _3330) + _3300)) + 9.9999999392252902907785028219223e-09) + (((_3329 * _3330) + _3300) * _3315))) * _3329;
                        float _4672 = isnan(0.0) ? _3340 : (isnan(_3340) ? 0.0 : max(_3340, 0.0));
                        float _3351 = (((_3301 * 3.1415927410125732421875) * (isnan(1.0) ? _4672 : (isnan(_4672) ? 1.0 : min(_4672, 1.0)))) / ((_3323 * _3323) * ((_3266 * 2.1991131305694580078125) + 3.141590118408203125))) * _3255;
                        _3103 = (_3270 * _3218.x) + _3176;
                        _3104 = (_3270 * _3218.y) + _3177;
                        _3105 = (_3270 * _3218.z) + _3178;
                        _3100 = (_3351 * _3235.x) + _3173;
                        _3101 = (_3351 * _3235.y) + _3174;
                        _3102 = (_3351 * _3235.z) + _3175;
                        if (_3180 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3173 = _3100;
                            _3174 = _3101;
                            _3175 = _3102;
                            _3176 = _3103;
                            _3177 = _3104;
                            _3178 = _3105;
                            _3179 = _3180;
                        }
                    }
                    frontier_phi_66_pred = _3100;
                    frontier_phi_66_pred_1 = _3105;
                    frontier_phi_66_pred_2 = _3104;
                    frontier_phi_66_pred_3 = _3103;
                    frontier_phi_66_pred_4 = _3102;
                    frontier_phi_66_pred_5 = _3101;
                }
                _2876 = frontier_phi_66_pred;
                _2886 = frontier_phi_66_pred_1;
                _2884 = frontier_phi_66_pred_2;
                _2882 = frontier_phi_66_pred_3;
                _2880 = frontier_phi_66_pred_4;
                _2878 = frontier_phi_66_pred_5;
                uint _3035 = _3034 + 1u;
                if (_3035 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3028 = _2876;
                    _3029 = _2878;
                    _3030 = _2880;
                    _3031 = _2882;
                    _3032 = _2884;
                    _3033 = _2886;
                    _3034 = _3035;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2875 = _2876;
            _2877 = _2878;
            _2879 = _2880;
            _2881 = _2882;
            _2883 = _2884;
            _2885 = _2886;
        }
        uvec4 _2889 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2890 = _2889.z;
        uint _2892 = (_2890 >> 8u) & 15u;
        float _2996;
        float _2998;
        float _3000;
        float _3002;
        float _3004;
        float _3006;
        if (((4294967295u << _2892) & _2774) == 0u)
        {
            _2996 = _2875;
            _2998 = _2877;
            _3000 = _2879;
            _3002 = _2881;
            _3004 = _2883;
            _3006 = _2885;
        }
        else
        {
            float _3021 = inversesqrt(dot(vec3(_2728, _2729, _2730), vec3(_2728, _2729, _2730)));
            float _3022 = _3021 * _2728;
            float _3023 = _3021 * _2729;
            float _3024 = _3021 * _2730;
            float frontier_phi_58_59_ladder;
            float frontier_phi_58_59_ladder_1;
            float frontier_phi_58_59_ladder_2;
            float frontier_phi_58_59_ladder_3;
            float frontier_phi_58_59_ladder_4;
            float frontier_phi_58_59_ladder_5;
            if (_2892 < ((_2890 >> 12u) & 15u))
            {
                float _2997;
                float _2999;
                float _3001;
                float _3003;
                float _3005;
                float _3007;
                float _3156 = _2875;
                float _3157 = _2877;
                float _3158 = _2879;
                float _3159 = _2881;
                float _3160 = _2883;
                float _3161 = _2885;
                uint _3162 = _2892;
                uint _3171;
                bool _3172;
                for (;;)
                {
                    _3171 = texelFetch(g_lightClassification, int((((_2768 << 5u) + (_2754 << 9u)) + (_3162 << 2u)) >> 2u)).x;
                    _3172 = _3171 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_3172)
                    {
                        frontier_phi_77_pred = _3161;
                        frontier_phi_77_pred_1 = _3160;
                        frontier_phi_77_pred_2 = _3159;
                        frontier_phi_77_pred_3 = _3158;
                        frontier_phi_77_pred_4 = _3157;
                        frontier_phi_77_pred_5 = _3156;
                    }
                    else
                    {
                        float _3365;
                        float _3366;
                        float _3367;
                        float _3368;
                        float _3369;
                        float _3370;
                        float _3659;
                        float _3660;
                        float _3661;
                        float _3662;
                        float _3663;
                        float _3664;
                        float _3378 = _3156;
                        float _3379 = _3157;
                        float _3380 = _3158;
                        float _3381 = _3159;
                        float _3382 = _3160;
                        float _3383 = _3161;
                        uint _3384 = _3171;
                        uint _3385;
                        vec4 _3410;
                        float _3411;
                        vec4 _3426;
                        vec3 _3438;
                        vec4 _3453;
                        vec4 _3468;
                        float _3515;
                        bool _3516;
                        for (;;)
                        {
                            uint _3395 = ((_3162 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3384));
                            _3385 = (_3384 + 4294967295u) & _3384;
                            uint _3397 = _3395 * 40u;
                            _3410 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3397)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3397 + 3u)).x));
                            _3411 = _3410.w;
                            uint _3413 = (_3395 * 40u) + 4u;
                            _3426 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3413)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3413 + 3u)).x));
                            uint _3428 = (_3395 * 40u) + 8u;
                            _3438 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3428)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3428 + 2u)).x));
                            uint _3440 = (_3395 * 40u) + 16u;
                            _3453 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3440)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3440 + 3u)).x));
                            uint _3455 = (_3395 * 40u) + 20u;
                            _3468 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3455)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3455 + 3u)).x));
                            uint _3471 = (_3395 * 40u) + 24u;
                            vec4 _3484 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3471)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3471 + 3u)).x));
                            uint _3490 = (_3395 * 40u) + 28u;
                            vec4 _3503 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3490)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3490 + 3u)).x));
                            _3515 = fma(_2730, _3503.z, fma(_2729, _3503.y, _3503.x * _2728)) + _3503.w;
                            _3516 = !((fma(_2730, _3484.z, fma(_2729, _3484.y, _3484.x * _2728)) + _3484.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_3516)
                            {
                                float _3543 = _3410.x - _2728;
                                float _3544 = _3410.y - _2729;
                                float _3545 = _3410.z - _2730;
                                float _3546 = dot(vec3(_3543, _3544, _3545), vec3(_3543, _3544, _3545));
                                float _3549 = inversesqrt(_3546);
                                float _3550 = _3549 * _3543;
                                float _3551 = _3549 * _3544;
                                float _3552 = _3549 * _3545;
                                float _3556 = 1.0 - (_3546 / (_3411 * _3411));
                                float _4683 = isnan(0.0) ? _3556 : (isnan(_3556) ? 0.0 : max(_3556, 0.0));
                                float _3557 = isnan(1.0) ? _4683 : (isnan(_4683) ? 1.0 : min(_4683, 1.0));
                                float _3561 = sqrt(_3546) * _3426.w;
                                float _3563 = 1.39999997615814208984375 / (_3561 + 1.39999997615814208984375);
                                float _3564 = _3563 * _3563;
                                float _3567 = ((1.0 - _3564) * dot(vec3(_3550, _3551, _3552), vec3(_937, _940, _943))) + _3564;
                                float _3570 = _3561 * _3561;
                                float _3574 = (fma(_2730, _3453.z, fma(_2729, _3453.y, _3453.x * _2728)) + _3453.w) / _3515;
                                float _3575 = (fma(_2730, _3468.z, fma(_2729, _3468.y, _3468.x * _2728)) + _3468.w) / _3515;
                                float _3579 = 1.0 - dot(vec2(_3574, _3575), vec2(_3574, _3575));
                                float _4699 = isnan(0.0) ? _3579 : (isnan(_3579) ? 0.0 : max(_3579, 0.0));
                                float _3580 = isnan(1.0) ? _4699 : (isnan(_4699) ? 1.0 : min(_4699, 1.0));
                                float _3581 = _3580 * (((isnan(0.0) ? _3567 : (isnan(_3567) ? 0.0 : max(_3567, 0.0))) * _3557) / ((_3570 * 0.699999988079071044921875) + 1.0));
                                float _3593 = exp2(log2(1.0 / ((_3570 * 3.5) + 5.0)) * 0.25);
                                float _3594 = 1.0 - _1012;
                                float _3601 = sqrt(1.0 - ((1.0 - (_3594 * _3594)) * (1.0 - (_3593 * _3593))));
                                float _3602 = _3601 * _3601;
                                float _3603 = _3602 * _3602;
                                float _3604 = _3550 - _3022;
                                float _3605 = _3551 - _3023;
                                float _3606 = _3552 - _3024;
                                float _3610 = inversesqrt(dot(vec3(_3604, _3605, _3606), vec3(_3604, _3605, _3606)));
                                float _3614 = dot(vec3(_937, _940, _943), vec3((-0.0) - _3022, (-0.0) - _3023, (-0.0) - _3024));
                                float _4710 = isnan(0.0) ? _3614 : (isnan(_3614) ? 0.0 : max(_3614, 0.0));
                                float _3617 = isnan(1.0) ? _4710 : (isnan(_4710) ? 1.0 : min(_4710, 1.0));
                                float _3618 = dot(vec3(_937, _940, _943), vec3(_3610 * _3604, _3610 * _3605, _3610 * _3606));
                                float _4721 = isnan(0.0) ? _3618 : (isnan(_3618) ? 0.0 : max(_3618, 0.0));
                                float _3621 = isnan(1.0) ? _4721 : (isnan(_4721) ? 1.0 : min(_4721, 1.0));
                                float _3625 = ((_3621 * _3621) * (_3603 + (-1.0))) + 1.0;
                                float _3626 = _3563 * _3602;
                                float _3627 = _3626 * _3626;
                                float _3633 = ((1.0 - _3627) * dot(vec3(_937, _940, _943), vec3(_3550, _3551, _3552))) + _3627;
                                float _4732 = isnan(0.0) ? _3633 : (isnan(_3633) ? 0.0 : max(_3633, 0.0));
                                float _3634 = isnan(1.0) ? _4732 : (isnan(_4732) ? 1.0 : min(_4732, 1.0));
                                float _3635 = 1.0 - _3602;
                                float _3645 = (0.5 / (((_3634 * ((_3617 * _3635) + _3602)) + 9.9999999392252902907785028219223e-09) + (((_3634 * _3635) + _3602) * _3617))) * _3634;
                                float _4743 = isnan(0.0) ? _3645 : (isnan(_3645) ? 0.0 : max(_3645, 0.0));
                                float _3655 = (_3580 * _3557) * (((_3603 * 3.1415927410125732421875) * (isnan(1.0) ? _4743 : (isnan(_4743) ? 1.0 : min(_4743, 1.0)))) / ((_3625 * _3625) * ((_3570 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _3581 * _3426.y;
                                frontier_phi_83_pred_1 = _3581 * _3426.x;
                                frontier_phi_83_pred_2 = _3655 * _3438.z;
                                frontier_phi_83_pred_3 = _3655 * _3438.y;
                                frontier_phi_83_pred_4 = _3655 * _3438.x;
                                frontier_phi_83_pred_5 = _3581 * _3426.z;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3663 = frontier_phi_83_pred;
                            _3662 = frontier_phi_83_pred_1;
                            _3661 = frontier_phi_83_pred_2;
                            _3660 = frontier_phi_83_pred_3;
                            _3659 = frontier_phi_83_pred_4;
                            _3664 = frontier_phi_83_pred_5;
                            _3368 = _3662 + _3381;
                            _3369 = _3663 + _3382;
                            _3370 = _3664 + _3383;
                            _3365 = _3659 + _3378;
                            _3366 = _3660 + _3379;
                            _3367 = _3661 + _3380;
                            if (_3385 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3378 = _3365;
                                _3379 = _3366;
                                _3380 = _3367;
                                _3381 = _3368;
                                _3382 = _3369;
                                _3383 = _3370;
                                _3384 = _3385;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _3370;
                        frontier_phi_77_pred_1 = _3369;
                        frontier_phi_77_pred_2 = _3368;
                        frontier_phi_77_pred_3 = _3367;
                        frontier_phi_77_pred_4 = _3366;
                        frontier_phi_77_pred_5 = _3365;
                    }
                    _3007 = frontier_phi_77_pred;
                    _3005 = frontier_phi_77_pred_1;
                    _3003 = frontier_phi_77_pred_2;
                    _3001 = frontier_phi_77_pred_3;
                    _2999 = frontier_phi_77_pred_4;
                    _2997 = frontier_phi_77_pred_5;
                    uint _3163 = _3162 + 1u;
                    if (_3163 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3156 = _2997;
                        _3157 = _2999;
                        _3158 = _3001;
                        _3159 = _3003;
                        _3160 = _3005;
                        _3161 = _3007;
                        _3162 = _3163;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_58_59_ladder = _3001;
                frontier_phi_58_59_ladder_1 = _3007;
                frontier_phi_58_59_ladder_2 = _3005;
                frontier_phi_58_59_ladder_3 = _3003;
                frontier_phi_58_59_ladder_4 = _2999;
                frontier_phi_58_59_ladder_5 = _2997;
            }
            else
            {
                frontier_phi_58_59_ladder = _2879;
                frontier_phi_58_59_ladder_1 = _2885;
                frontier_phi_58_59_ladder_2 = _2883;
                frontier_phi_58_59_ladder_3 = _2881;
                frontier_phi_58_59_ladder_4 = _2877;
                frontier_phi_58_59_ladder_5 = _2875;
            }
            _2996 = frontier_phi_58_59_ladder_5;
            _2998 = frontier_phi_58_59_ladder_4;
            _3000 = frontier_phi_58_59_ladder;
            _3002 = frontier_phi_58_59_ladder_3;
            _3004 = frontier_phi_58_59_ladder_2;
            _3006 = frontier_phi_58_59_ladder_1;
        }
        float _3011 = isnan(1.0) ? _996 : (isnan(_996) ? 1.0 : min(_996, 1.0));
        _2787 = (_3011 * _3002) + _2220;
        _2789 = (_3011 * _3004) + _2222;
        _2791 = (_3011 * _3006) + _2224;
        _2793 = ((_2996 * _981) * _3011) + _2568;
        _2795 = ((_2998 * _983) * _3011) + _2570;
        _2797 = ((_3000 * _984) * _3011) + _2572;
    }
    else
    {
        _2787 = _2220;
        _2789 = _2222;
        _2791 = _2224;
        _2793 = _2568;
        _2795 = _2570;
        _2797 = _2572;
    }
    float _4759 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
    float _4770 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
    float _4781 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
    float _2814 = ((isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0))) * (_2787 + ((isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))) * _996))) + ((_2793 + ((isnan(0.0) ? _2052 : (isnan(_2052) ? 0.0 : max(_2052, 0.0))) * _1837)) * cbPerFrame._m0[3u].x);
    float _2815 = ((isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0))) * (_2789 + ((isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0))) * _996))) + ((_2795 + ((isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0))) * _1837)) * cbPerFrame._m0[3u].x);
    float _2816 = ((isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0))) * (_2791 + ((isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0))) * _996))) + ((_2797 + ((isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0))) * _1837)) * cbPerFrame._m0[3u].x);
    uint _2817 = _956 + 6u;
    float _2825 = _918 / cbSceneParam._m0[86u].x;
    float _2826 = _919 / cbSceneParam._m0[86u].y;
    vec4 _2840 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2825, _2826, (log2((isnan(cbSceneParam._m0[77u].w) ? _841 : (isnan(_841) ? cbSceneParam._m0[77u].w : min(_841, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2842 = _2840.x;
    float _2843 = _2840.y;
    float _2844 = _2840.z;
    float _2845 = _2840.w;
    float _2938;
    float _2940;
    float _2942;
    float _2944;
    if (_841 > cbSceneParam._m0[78u].w)
    {
        float _2900 = isnan(_841) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _841 : min(cbSceneParam._m0[80u].w, _841));
        float _2901 = _2900 / _841;
        float _2912 = _2901 * _891;
        float _2913 = _892 * _2901;
        float _2914 = (-0.0) - _2913;
        float _2916 = _2901 * _893;
        float _2918 = (cbSceneParam._m0[77u].w * _2914) / _2900;
        float _2919 = _2918 + cbSceneParam._m0[79u].w;
        float _2920 = cbSceneParam._m0[79u].w - _2913;
        float _2926 = sqrt(((_2912 * _2912) + (_2913 * _2913)) + (_2916 * _2916));
        float _2929 = (1.0 - (cbSceneParam._m0[77u].w / _2900)) * _2926;
        float _2934 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2936 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3113;
        if (abs((_2914 - _2918) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3113 = ((((_2919 > 0.0) ? exp2(_2934 * _2919) : (2.0 - exp2(_2936 * _2919))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2929;
        }
        else
        {
            float _3057 = 1.0 / cbSceneParam._m0[80u].x;
            float _3058 = isnan(_2920) ? _2919 : (isnan(_2919) ? _2920 : max(_2919, _2920));
            float _3059 = isnan(_2920) ? _2919 : (isnan(_2919) ? _2920 : min(_2919, _2920));
            float _3068 = isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : min(_3058, 0.0));
            float _3069 = isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : min(_3059, 0.0));
            _3113 = ((abs(_2926 / _2914) * cbSceneParam._m0[80u].y) * ((((_3068 - _3069) * 2.0) - ((exp2(_2934 * (isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0)))) - exp2(_2934 * (isnan(0.0) ? _3059 : (isnan(_3059) ? 0.0 : max(_3059, 0.0))))) * _3057)) - ((exp2(_2936 * _3068) - exp2(_2936 * _3069)) * _3057))) + (_2929 * cbSceneParam._m0[80u].z);
        }
        vec4 _3115 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2825, _2826, 1.0), 0.0);
        float _3124 = exp2((_3113 * (-1.44269502162933349609375)) * (1.0 - _3115.w));
        float _3125 = log2(_3124);
        float _3141 = log2(_2845);
        _2938 = (exp2(_3141 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3125 * cbSceneParam._m0[78u].x)) * _3115.x) / cbSceneParam._m0[78u].x)) + _2842;
        _2940 = (exp2(_3141 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3125 * cbSceneParam._m0[78u].y)) * _3115.y) / cbSceneParam._m0[78u].y)) + _2843;
        _2942 = (exp2(_3141 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3125 * cbSceneParam._m0[78u].z)) * _3115.z) / cbSceneParam._m0[78u].z)) + _2844;
        _2944 = _3124 * _2845;
    }
    else
    {
        _2938 = _2842;
        _2940 = _2843;
        _2942 = _2844;
        _2944 = _2845;
    }
    bool _3151;
    vec4 _2954;
    vec4 _2976;
    float _2978;
    float _2982;
    float _2983;
    float _2984;
    float _2985;
    bool _2995;
    for (;;)
    {
        _2954 = cbMatDynParam._m0[0u];
        float _2956 = roundEven(_2954.y);
        bool _2957 = _2956 == 3.0;
        float _2958 = log2(_2944);
        float _2965 = exp2(_2958 * cbSceneParam._m0[78u].x) * _2814;
        float _2966 = exp2(_2958 * cbSceneParam._m0[78u].y) * _2815;
        float _2967 = exp2(_2958 * cbSceneParam._m0[78u].z) * _2816;
        float _2974 = _907 + (-0.5);
        _2976 = cbMtdParam._m0[1u];
        _2978 = _2976.y * _2974;
        float _2981 = (_2956 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2982 = _2981 * (_2957 ? _2965 : (_2965 + (cbSceneParam._m0[72u].w * _2938)));
        _2983 = _2981 * (_2957 ? _2966 : (_2966 + (cbSceneParam._m0[72u].w * _2940)));
        _2984 = _2981 * (_2957 ? _2967 : (_2967 + (cbSceneParam._m0[72u].w * _2942)));
        _2985 = _2974 * 0.999000012874603271484375;
        _2995 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2995)
        {
            if ((cbInstanceData._m0[_956 + 7u].x + _2985) < 0.5)
            {
                _3151 = true;
                break;
            }
        }
        uint _3092 = _957 + uint(_2954.w);
        if ((cbInstanceData._m0[_3092].w < 1.0) && ((cbInstanceData._m0[_3092].w + _2985) < 0.5))
        {
            _3151 = true;
            break;
        }
        if ((_2978 + 1.0) < _2976.x)
        {
            _3151 = true;
            break;
        }
        _3151 = false;
        break;
    }
    float _3356;
    if (_3151)
    {
        discard_state = true;
        _3356 = 0.0;
    }
    else
    {
        _3356 = cbInstanceData._m0[_2817].w;
    }
    SV_Target.x = _2982;
    SV_Target.y = _2983;
    SV_Target.z = _2984;
    SV_Target.w = _3356;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2817].w;
    discard_exit();
}


