#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_20;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1355;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _217 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _218 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _219 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _225 = inversesqrt(dot(vec3(_217, _218, _219), vec3(_217, _218, _219)));
    float _232 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _239 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _262 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _268 = _262.x * cbMtdParam._m0[10u].x;
    float _269 = _262.y * cbMtdParam._m0[10u].y;
    float _270 = _262.z * cbMtdParam._m0[10u].z;
    vec4 _288 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _338 = cbMtdParam._m0[18u].y * texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x;
    float _349 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].x * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].y * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _338)) + 1.0;
    float _3708 = isnan(0.0) ? _349 : (isnan(_349) ? 0.0 : max(_349, 0.0));
    float _350 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
    float _357 = (_350 * ((_288.x * cbMtdParam._m0[11u].x) - _268)) + _268;
    float _358 = (_350 * ((_288.y * cbMtdParam._m0[11u].y) - _269)) + _269;
    float _359 = (_350 * ((_288.z * cbMtdParam._m0[11u].z) - _270)) + _270;
    vec4 _377 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _404 = ((cbMtdParam._m0[17u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _338)) + 1.0;
    float _3719 = isnan(0.0) ? _404 : (isnan(_404) ? 0.0 : max(_404, 0.0));
    float _405 = isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0));
    float _412 = (_405 * ((_377.x * cbMtdParam._m0[12u].x) - _357)) + _357;
    float _413 = (_405 * ((_377.y * cbMtdParam._m0[12u].y) - _358)) + _358;
    float _414 = (_405 * ((_377.z * cbMtdParam._m0[12u].z) - _359)) + _359;
    vec4 _431 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _456 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[18u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[18u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _338)) + 1.0;
    float _3730 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _457 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
    vec4 _485 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _493 = ((((_457 * ((_431.x * cbMtdParam._m0[13u].x) - _412)) + _412) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _485.x;
    float _496 = ((((_457 * ((_431.y * cbMtdParam._m0[13u].y) - _413)) + _413) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _485.y;
    float _499 = ((((_457 * ((_431.z * cbMtdParam._m0[13u].z) - _414)) + _414) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _485.z;
    vec4 _519 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _548 = (TEXCOORD_5.x - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.z) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.w) + cbTextureTilingScale._m0[18u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].z + 1.0);
    float _3741 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _549 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
    float _556 = (_549 * ((_519.x * cbMtdParam._m0[14u].x) - _493)) + _493;
    float _557 = (_549 * ((_519.y * cbMtdParam._m0[14u].y) - _496)) + _496;
    float _558 = (_549 * ((_519.z * cbMtdParam._m0[14u].z) - _499)) + _499;
    vec4 _571 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _573 = _571.x;
    float _591 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _573) * _350) + _573;
    float _608 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _591) * _405) + _591;
    float _625 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _608) * _457) + _608;
    float _627 = _625 - (_625 * TEXCOORD_5.x);
    vec4 _640 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _662 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _664 = _662.x;
    float _665 = _662.y;
    float _668 = cbMtdParam._m0[17u].y * _662.z;
    vec4 _680 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _689 = (((cbMtdParam._m0[17u].x * _680.z) - _668) * _350) + _668;
    vec4 _702 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _714 = (((cbMtdParam._m0[16u].w * _702.z) - _689) * _405) + _689;
    vec4 _727 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _736 = (((cbMtdParam._m0[16u].z * _727.z) - _714) * _457) + _714;
    float _741 = ((cbMtdParam._m0[16u].x * TEXCOORD_5.x) * ((_640.z * cbMtdParam._m0[17u].z) - _736)) + _736;
    vec4 _754 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _766 = ((_680.x - _664) * _350) + _664;
    float _767 = ((_680.y - _665) * _350) + _665;
    float _772 = ((_702.x - _766) * _405) + _766;
    float _773 = ((_702.y - _767) * _405) + _767;
    float _782 = ((((_727.x - _772) * _457) + _772) * 2.0) + (-1.0);
    float _783 = ((((_727.y - _773) * _457) + _773) * 2.0) + (-1.0);
    float _784 = dot(vec2(_782, _783), vec2(_782, _783));
    float _3752 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _789 = sqrt(1.0 - (isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0))));
    float _799 = ((((_754.x * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _782) + ((((_640.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[15u].y);
    float _800 = ((((_754.y * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _783) + ((((_640.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[15u].y);
    float _803 = fma(_789, _232 * NORMAL.x, fma(_800, _239 * TANGENT.x, (_225 * _217) * _799));
    float _806 = fma(_789, _232 * NORMAL.y, fma(_800, _239 * TANGENT.y, (_225 * _218) * _799));
    float _809 = fma(_789, _232 * NORMAL.z, fma(_800, _239 * TANGENT.z, (_225 * _219) * _799));
    float _813 = inversesqrt(dot(vec3(_803, _806, _809), vec3(_803, _806, _809)));
    float _814 = _813 * _803;
    float _815 = _813 * _806;
    float _816 = _813 * _809;
    float _3763 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _817 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
    float _3774 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _3785 = isnan(0.0) ? _557 : (isnan(_557) ? 0.0 : max(_557, 0.0));
    float _3796 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _3807 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _821 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
    float _837 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _877 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _887 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _877);
    float _888 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _877);
    float _889 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _877);
    float _893 = inversesqrt(dot(vec3(_887, _888, _889), vec3(_887, _888, _889)));
    float _894 = _887 * _893;
    float _895 = _888 * _893;
    float _896 = _889 * _893;
    float _902 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _903 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _921 = fma(_816, cbSceneParam._m0[5u].z, fma(_815, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _814));
    float _924 = fma(_816, cbSceneParam._m0[6u].z, fma(_815, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _814));
    float _927 = fma(_816, cbSceneParam._m0[7u].z, fma(_815, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _814));
    uint _940 = uint(roundEven(NORMAL.w)) * 13u;
    uint _942 = (_940 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _948 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0)))) * cbInstanceData._m0[_942].x;
    float _949 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0)))) * cbInstanceData._m0[_942].y;
    float _950 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0)))) * cbInstanceData._m0[_942].z;
    float _3818 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
    float _951 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
    float _3829 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
    float _952 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
    float _3840 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _953 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
    float _954 = 1.0 - _821;
    float _955 = _951 * _954;
    float _956 = _952 * _954;
    float _957 = _953 * _954;
    float _962 = (_951 + (-0.039999999105930328369140625)) * _821;
    float _963 = (_952 + (-0.039999999105930328369140625)) * _821;
    float _964 = (_953 + (-0.039999999105930328369140625)) * _821;
    float _965 = _962 + 0.039999999105930328369140625;
    float _967 = _963 + 0.039999999105930328369140625;
    float _968 = _964 + 0.039999999105930328369140625;
    vec4 _977 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _902, cbSceneParam._m0[86u].y * _903));
    float _980 = _977.x * TEXCOORD_5.w;
    float _981 = dot(vec3(_814, _815, _816), vec3(_894, _895, _896));
    float _984 = _981 * 2.0;
    float _988 = (_984 * _814) - _894;
    float _989 = (_984 * _815) - _895;
    float _990 = (_984 * _816) - _896;
    float _994 = abs(dot(vec3(_894, _895, _896), vec3(_814, _815, _816)));
    float _3851 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
    float _996 = sqrt(_817);
    float _1009 = exp2((_996 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_996 * 3.0));
    float _1015 = (1.0 - _1009) * ((_996 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1016 = _1009 * _996;
    float _1044 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1048 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1052 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1354;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1079 = fma(_1052, cbModelParam._m0[26u].z, fma(_1048, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1044));
        float _1083 = fma(_1052, cbModelParam._m0[27u].z, fma(_1048, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1044));
        float _1087 = fma(_1052, cbModelParam._m0[28u].z, fma(_1048, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1044));
        float _1112 = _1044 + _814;
        float _1113 = _1048 + _815;
        float _1114 = _1052 + _816;
        float _1124 = fma(_1114, cbModelParam._m0[26u].z, fma(_1113, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1112)) - _1079;
        float _1125 = fma(_1114, cbModelParam._m0[27u].z, fma(_1113, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1112)) - _1083;
        float _1126 = fma(_1114, cbModelParam._m0[28u].z, fma(_1113, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1112)) - _1087;
        float _1130 = inversesqrt(dot(vec3(_1124, _1125, _1126), vec3(_1124, _1125, _1126)));
        float _1143 = ((_1130 * _1124) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1079 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1144 = ((_1130 * _1125) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1083 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1145 = ((_1130 * _1126) / cbModelParam._m0[34u].z) + ((((((_1087 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1148 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1143, _1144, _1145), 0.0);
        vec4 _1155 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1143, _1144, _1145), 0.0);
        vec4 _1162 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1143, _1144, _1145), 0.0);
        vec4 _1169 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1143, _1144, _1145), 0.0);
        float _1182 = exp2((_1148.w + (-0.5)) * 20.0) * 2.0;
        float _1183 = _1182 * (_1148.x + (-0.5));
        float _1184 = _1182 * (_1148.y + (-0.5));
        float _1185 = _1182 * (_1148.z + (-0.5));
        float _1192 = exp2((_1155.w + (-0.5)) * 20.0) * 2.0;
        float _1193 = _1192 * (_1155.x + (-0.5));
        float _1194 = _1192 * (_1155.y + (-0.5));
        float _1195 = _1192 * (_1155.z + (-0.5));
        float _1202 = exp2((_1162.w + (-0.5)) * 20.0) * 2.0;
        float _1203 = _1202 * (_1162.x + (-0.5));
        float _1204 = _1202 * (_1162.y + (-0.5));
        float _1205 = _1202 * (_1162.z + (-0.5));
        float _1212 = exp2((_1169.w + (-0.5)) * 20.0) * 2.0;
        float _1213 = _1212 * (_1169.x + (-0.5));
        float _1214 = _1212 * (_1169.y + (-0.5));
        float _1215 = _1212 * (_1169.z + (-0.5));
        float _1216 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1217 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1218 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1219 = _1183 * 0.5;
        float _1220 = _1193 * 0.5;
        float _1221 = _1203 * 0.5;
        float _1222 = dot(vec3(_1219, _1220, _1221), vec3(_1219, _1220, _1221));
        float _1227 = (_1222 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1222);
        float _1236 = (dot(vec3(_814, _815, _816), vec3(_1227 * _1219, _1227 * _1220, _1227 * _1221)) + 1.0) * 0.5;
        float _3877 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1246 = sqrt(((_1220 * _1220) + (_1219 * _1219)) + (_1221 * _1221)) / (_1216 + 9.9999997473787516355514526367188e-06);
        float _3888 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
        float _1248 = _1247 * 2.0;
        float _1252 = (1.0 - _1247) / (_1247 + 1.0);
        float _3899 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
        float _1262 = ((((1.0 - _1253) * (_1248 + 2.0)) * exp2(log2(isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0))) * (_1248 + 1.0))) + _1253) * _1216;
        float _1263 = _1184 * 0.5;
        float _1264 = _1194 * 0.5;
        float _1265 = _1204 * 0.5;
        float _1266 = dot(vec3(_1263, _1264, _1265), vec3(_1263, _1264, _1265));
        float _1271 = (_1266 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1266);
        float _1279 = (dot(vec3(_814, _815, _816), vec3(_1271 * _1263, _1271 * _1264, _1271 * _1265)) + 1.0) * 0.5;
        float _3910 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1288 = sqrt(((_1264 * _1264) + (_1263 * _1263)) + (_1265 * _1265)) / (_1217 + 9.9999997473787516355514526367188e-06);
        float _3921 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
        float _1290 = _1289 * 2.0;
        float _1294 = (1.0 - _1289) / (_1289 + 1.0);
        float _3932 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
        float _1304 = ((((1.0 - _1295) * (_1290 + 2.0)) * exp2(log2(isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0))) * (_1290 + 1.0))) + _1295) * _1217;
        float _1305 = _1185 * 0.5;
        float _1306 = _1195 * 0.5;
        float _1307 = _1205 * 0.5;
        float _1308 = dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307));
        float _1313 = (_1308 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1308);
        float _1321 = (dot(vec3(_814, _815, _816), vec3(_1313 * _1305, _1313 * _1306, _1313 * _1307)) + 1.0) * 0.5;
        float _3943 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1330 = sqrt(((_1306 * _1306) + (_1305 * _1305)) + (_1307 * _1307)) / (_1218 + 9.9999997473787516355514526367188e-06);
        float _3954 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _1332 = _1331 * 2.0;
        float _1336 = (1.0 - _1331) / (_1331 + 1.0);
        float _3965 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0));
        float _1346 = ((((1.0 - _1337) * (_1332 + 2.0)) * exp2(log2(isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0))) * (_1332 + 1.0))) + _1337) * _1218;
        _1354 = _1185;
        _1356 = _1184;
        _1357 = _1183;
        _1358 = _1195;
        _1359 = _1194;
        _1360 = _1193;
        _1361 = _1205;
        _1362 = _1204;
        _1363 = _1203;
        _1364 = _1218;
        _1365 = _1217;
        _1366 = _1216;
        _1367 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)));
        _1368 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)));
        _1369 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)));
    }
    else
    {
        _1354 = _1355;
        _1356 = _1355;
        _1357 = _1355;
        _1358 = _1355;
        _1359 = _1355;
        _1360 = _1355;
        _1361 = _1355;
        _1362 = _1355;
        _1363 = _1355;
        _1364 = _1355;
        _1365 = _1355;
        _1366 = _1355;
        _1367 = 0.0;
        _1368 = 0.0;
        _1369 = 0.0;
    }
    float _1664;
    float _1665;
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1395 = fma(_1052, cbModelParam._m0[30u].z, fma(_1048, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1044));
        float _1399 = fma(_1052, cbModelParam._m0[31u].z, fma(_1048, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1044));
        float _1403 = fma(_1052, cbModelParam._m0[32u].z, fma(_1048, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1044));
        float _1426 = _1044 + _814;
        float _1427 = _1048 + _815;
        float _1428 = _1052 + _816;
        float _1438 = fma(_1428, cbModelParam._m0[30u].z, fma(_1427, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1426)) - _1395;
        float _1439 = fma(_1428, cbModelParam._m0[31u].z, fma(_1427, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1426)) - _1399;
        float _1440 = fma(_1428, cbModelParam._m0[32u].z, fma(_1427, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1426)) - _1403;
        float _1444 = inversesqrt(dot(vec3(_1438, _1439, _1440), vec3(_1438, _1439, _1440)));
        float _1457 = ((_1444 * _1438) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1395 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1458 = ((_1444 * _1439) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1399 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1459 = ((_1444 * _1440) / cbModelParam._m0[35u].z) + ((((((_1403 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1461 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1457, _1458, _1459), 0.0);
        vec4 _1468 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1457, _1458, _1459), 0.0);
        vec4 _1475 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1457, _1458, _1459), 0.0);
        vec4 _1482 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1457, _1458, _1459), 0.0);
        float _1494 = exp2((_1461.w + (-0.5)) * 20.0) * 2.0;
        float _1495 = _1494 * (_1461.x + (-0.5));
        float _1496 = _1494 * (_1461.y + (-0.5));
        float _1497 = _1494 * (_1461.z + (-0.5));
        float _1504 = exp2((_1468.w + (-0.5)) * 20.0) * 2.0;
        float _1505 = _1504 * (_1468.x + (-0.5));
        float _1506 = _1504 * (_1468.y + (-0.5));
        float _1507 = _1504 * (_1468.z + (-0.5));
        float _1514 = exp2((_1475.w + (-0.5)) * 20.0) * 2.0;
        float _1515 = _1514 * (_1475.x + (-0.5));
        float _1516 = _1514 * (_1475.y + (-0.5));
        float _1517 = _1514 * (_1475.z + (-0.5));
        float _1524 = exp2((_1482.w + (-0.5)) * 20.0) * 2.0;
        float _1525 = _1524 * (_1482.x + (-0.5));
        float _1526 = _1524 * (_1482.y + (-0.5));
        float _1527 = _1524 * (_1482.z + (-0.5));
        float _1528 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1529 = isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0));
        float _1530 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1531 = _1495 * 0.5;
        float _1532 = _1505 * 0.5;
        float _1533 = _1515 * 0.5;
        float _1534 = dot(vec3(_1531, _1532, _1533), vec3(_1531, _1532, _1533));
        float _1539 = (_1534 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1534);
        float _1547 = (dot(vec3(_814, _815, _816), vec3(_1539 * _1531, _1539 * _1532, _1539 * _1533)) + 1.0) * 0.5;
        float _4006 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1556 = sqrt(((_1532 * _1532) + (_1531 * _1531)) + (_1533 * _1533)) / (_1528 + 9.9999997473787516355514526367188e-06);
        float _4017 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1557 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
        float _1558 = _1557 * 2.0;
        float _1562 = (1.0 - _1557) / (_1557 + 1.0);
        float _4028 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1563 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
        float _1572 = ((((1.0 - _1563) * (_1558 + 2.0)) * exp2(log2(isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * (_1558 + 1.0))) + _1563) * _1528;
        float _1573 = _1496 * 0.5;
        float _1574 = _1506 * 0.5;
        float _1575 = _1516 * 0.5;
        float _1576 = dot(vec3(_1573, _1574, _1575), vec3(_1573, _1574, _1575));
        float _1581 = (_1576 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1576);
        float _1589 = (dot(vec3(_814, _815, _816), vec3(_1581 * _1573, _1581 * _1574, _1581 * _1575)) + 1.0) * 0.5;
        float _4039 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1598 = sqrt(((_1574 * _1574) + (_1573 * _1573)) + (_1575 * _1575)) / (_1529 + 9.9999997473787516355514526367188e-06);
        float _4050 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1599 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _1600 = _1599 * 2.0;
        float _1604 = (1.0 - _1599) / (_1599 + 1.0);
        float _4061 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1605 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _1614 = ((((1.0 - _1605) * (_1600 + 2.0)) * exp2(log2(isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * (_1600 + 1.0))) + _1605) * _1529;
        float _1615 = _1497 * 0.5;
        float _1616 = _1507 * 0.5;
        float _1617 = _1517 * 0.5;
        float _1618 = dot(vec3(_1615, _1616, _1617), vec3(_1615, _1616, _1617));
        float _1623 = (_1618 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1618);
        float _1631 = (dot(vec3(_814, _815, _816), vec3(_1623 * _1615, _1623 * _1616, _1623 * _1617)) + 1.0) * 0.5;
        float _4072 = isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0));
        float _1640 = sqrt(((_1616 * _1616) + (_1615 * _1615)) + (_1617 * _1617)) / (_1530 + 9.9999997473787516355514526367188e-06);
        float _4083 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
        float _1641 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
        float _1642 = _1641 * 2.0;
        float _1646 = (1.0 - _1641) / (_1641 + 1.0);
        float _4094 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1647 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
        float _1656 = ((((1.0 - _1647) * (_1642 + 2.0)) * exp2(log2(isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0))) * (_1642 + 1.0))) + _1647) * _1530;
        _1664 = _1497;
        _1665 = _1496;
        _1666 = _1495;
        _1667 = _1507;
        _1668 = _1506;
        _1669 = _1505;
        _1670 = _1517;
        _1671 = _1516;
        _1672 = _1515;
        _1673 = _1530;
        _1674 = _1529;
        _1675 = _1528;
        _1676 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0)));
        _1677 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0)));
        _1678 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0)));
    }
    else
    {
        _1664 = _1355;
        _1665 = _1355;
        _1666 = _1355;
        _1667 = _1355;
        _1668 = _1355;
        _1669 = _1355;
        _1670 = _1355;
        _1671 = _1355;
        _1672 = _1355;
        _1673 = _1355;
        _1674 = _1355;
        _1675 = _1355;
        _1676 = 0.0;
        _1677 = 0.0;
        _1678 = 0.0;
    }
    float _1688 = (cbModelParam._m0[1u].x * (_1676 - _1367)) + _1367;
    float _1689 = (cbModelParam._m0[1u].x * (_1677 - _1368)) + _1368;
    float _1690 = (cbModelParam._m0[1u].x * (_1678 - _1369)) + _1369;
    float _1711 = fma(_1690, cbSceneParam._m0[89u].z, fma(_1689, cbSceneParam._m0[89u].y, _1688 * cbSceneParam._m0[89u].x));
    float _1714 = fma(_1690, cbSceneParam._m0[90u].z, fma(_1689, cbSceneParam._m0[90u].y, _1688 * cbSceneParam._m0[90u].x));
    float _1717 = fma(_1690, cbSceneParam._m0[91u].z, fma(_1689, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1688));
    float _1732 = _988 * 0.5;
    float _1733 = _989 * 0.5;
    float _1734 = _990 * 0.5;
    float _1735 = dot(vec4(_1732, _1733, _1734, 1.0), vec4(_1666, _1669, _1672, _1675));
    float _1738 = dot(vec4(_1732, _1733, _1734, 1.0), vec4(_1665, _1668, _1671, _1674));
    float _1741 = dot(vec4(_1732, _1733, _1734, 1.0), vec4(_1664, _1667, _1670, _1673));
    float _1775;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1748 = dot(vec4(_1732, _1733, _1734, 1.0), vec4(_1354, _1358, _1361, _1364));
        float _1752 = dot(vec4(_1732, _1733, _1734, 1.0), vec4(_1356, _1359, _1362, _1365));
        float _1756 = dot(vec4(_1732, _1733, _1734, 1.0), vec4(_1357, _1360, _1363, _1366));
        float _1763 = dot(vec4(cbModelParam._m0[39u]), vec4(_1732, _1733, _1734, 1.0));
        _1775 = dot(vec3(isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0)), isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0)), isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1763) ? 0.0 : (isnan(0.0) ? _1763 : max(0.0, _1763))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1775 = 1.0;
    }
    float _1786;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1777 = dot(vec4(cbModelParam._m0[40u]), vec4(_1732, _1733, _1734, 1.0));
        _1786 = dot(vec3(isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0)), isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0)), isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1777) ? 0.0 : (isnan(0.0) ? _1777 : max(0.0, _1777))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1786 = 1.0;
    }
    float _1790 = (_1786 * cbModelParam._m0[1u].x) + (_1775 * (1.0 - cbModelParam._m0[1u].x));
    float _1800 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _817);
    float _1801 = isnan(_1800) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1800 : min(cbModelParam._m0[25u].z, _1800));
    float _1881;
    float _1883;
    float _1885;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1848 = fma(_1052, cbModelParam._m0[13u].z, fma(_1048, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1044)) + cbModelParam._m0[13u].w;
        float _1852 = fma(_1052, cbModelParam._m0[14u].z, fma(_1048, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1044)) + cbModelParam._m0[14u].w;
        float _1856 = fma(_1052, cbModelParam._m0[15u].z, fma(_1048, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1044)) + cbModelParam._m0[15u].w;
        float _1859 = fma(_990, cbModelParam._m0[13u].z, fma(_989, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _988));
        float _1862 = fma(_990, cbModelParam._m0[14u].z, fma(_989, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _988));
        float _1865 = fma(_990, cbModelParam._m0[15u].z, fma(_989, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _988));
        float _1893;
        if (_1859 > 0.0)
        {
            _1893 = abs((1.0 - _1848) / _1859);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1859 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1848 + 1.0) / _1859);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1893 = frontier_phi_14_12_ladder;
        }
        float _2118;
        if (_1862 > 0.0)
        {
            _2118 = abs((1.0 - _1852) / _1862);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1862 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1852 + 1.0) / _1862);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2118 = frontier_phi_23_19_ladder;
        }
        float _2375;
        if (_1865 > 0.0)
        {
            _2375 = abs((1.0 - _1856) / _1865);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1865 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1856 + 1.0) / _1865);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2375 = frontier_phi_35_30_ladder;
        }
        float _2377 = isnan(_2118) ? _1893 : (isnan(_1893) ? _2118 : min(_1893, _2118));
        float _2378 = isnan(_2375) ? _2377 : (isnan(_2377) ? _2375 : min(_2377, _2375));
        float _2382 = (_2378 * _1859) + _1848;
        float _2383 = (_2378 * _1862) + _1852;
        float _2384 = (_2378 * _1865) + _1856;
        float _2385 = _2378 * 9.9999997473787516355514526367188e-05;
        float _2387 = (-1.0) - _2385;
        float _2389 = _2385 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2384 > _2389) || ((_2384 < _2387) || ((_2383 > _2389) || ((_2383 < _2387) || ((_2382 < _2387) || (_2382 > _2389))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2512 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2384, cbModelParam._m0[9u].z, fma(_2383, cbModelParam._m0[9u].y, _2382 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2384, cbModelParam._m0[10u].z, fma(_2383, cbModelParam._m0[10u].y, _2382 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2384, cbModelParam._m0[11u].z, fma(_2383, cbModelParam._m0[11u].y, _2382 * cbModelParam._m0[11u].x))), _1801);
            frontier_phi_13_35_ladder = _2512.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2512.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2512.x * cbModelParam._m0[1u].y;
        }
        _1881 = frontier_phi_13_35_ladder_2;
        _1883 = frontier_phi_13_35_ladder_1;
        _1885 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1869 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_988, _989, _990), _1801);
        _1881 = _1869.x * cbModelParam._m0[1u].y;
        _1883 = _1869.y * cbModelParam._m0[1u].y;
        _1885 = _1869.z * cbModelParam._m0[1u].y;
    }
    float _1889 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _817);
    float _1890 = isnan(_1889) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1889 : min(cbModelParam._m0[25u].w, _1889));
    float _1981;
    float _1983;
    float _1985;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1945 = fma(_1052, cbModelParam._m0[21u].z, fma(_1048, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1044)) + cbModelParam._m0[21u].w;
        float _1949 = fma(_1052, cbModelParam._m0[22u].z, fma(_1048, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1044)) + cbModelParam._m0[22u].w;
        float _1953 = fma(_1052, cbModelParam._m0[23u].z, fma(_1048, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1044)) + cbModelParam._m0[23u].w;
        float _1956 = fma(_990, cbModelParam._m0[21u].z, fma(_989, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _988));
        float _1959 = fma(_990, cbModelParam._m0[22u].z, fma(_989, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _988));
        float _1962 = fma(_990, cbModelParam._m0[23u].z, fma(_989, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _988));
        float _2123;
        if (_1956 > 0.0)
        {
            _2123 = abs((1.0 - _1945) / _1956);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1956 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1945 + 1.0) / _1956);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2123 = frontier_phi_25_21_ladder;
        }
        float _2402;
        if (_1959 > 0.0)
        {
            _2402 = abs((1.0 - _1949) / _1959);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1959 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1949 + 1.0) / _1959);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2402 = frontier_phi_37_32_ladder;
        }
        float _2615;
        if (_1962 > 0.0)
        {
            _2615 = abs((1.0 - _1953) / _1962);
        }
        else
        {
            float frontier_phi_46_43_ladder;
            if (_1962 < 0.0)
            {
                frontier_phi_46_43_ladder = abs((_1953 + 1.0) / _1962);
            }
            else
            {
                frontier_phi_46_43_ladder = 5000.0;
            }
            _2615 = frontier_phi_46_43_ladder;
        }
        float _2617 = isnan(_2402) ? _2123 : (isnan(_2123) ? _2402 : min(_2123, _2402));
        float _2618 = isnan(_2615) ? _2617 : (isnan(_2617) ? _2615 : min(_2617, _2615));
        float _2622 = (_2618 * _1956) + _1945;
        float _2623 = (_2618 * _1959) + _1949;
        float _2624 = (_2618 * _1962) + _1953;
        float _2625 = _2618 * 9.9999997473787516355514526367188e-05;
        float _2626 = (-1.0) - _2625;
        float _2628 = _2625 + 1.0;
        float frontier_phi_22_46_ladder;
        float frontier_phi_22_46_ladder_1;
        float frontier_phi_22_46_ladder_2;
        if ((_2624 > _2628) || ((_2624 < _2626) || ((_2623 > _2628) || ((_2623 < _2626) || ((_2622 < _2626) || (_2622 > _2628))))))
        {
            frontier_phi_22_46_ladder = 0.0;
            frontier_phi_22_46_ladder_1 = 0.0;
            frontier_phi_22_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2823 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2624, cbModelParam._m0[17u].z, fma(_2623, cbModelParam._m0[17u].y, _2622 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2624, cbModelParam._m0[18u].z, fma(_2623, cbModelParam._m0[18u].y, _2622 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2624, cbModelParam._m0[19u].z, fma(_2623, cbModelParam._m0[19u].y, _2622 * cbModelParam._m0[19u].x))), _1890);
            frontier_phi_22_46_ladder = _2823.z * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_1 = _2823.y * cbModelParam._m0[1u].z;
            frontier_phi_22_46_ladder_2 = _2823.x * cbModelParam._m0[1u].z;
        }
        _1981 = frontier_phi_22_46_ladder_2;
        _1983 = frontier_phi_22_46_ladder_1;
        _1985 = frontier_phi_22_46_ladder;
    }
    else
    {
        vec4 _1965 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_988, _989, _990), _1890);
        _1981 = _1965.x * cbModelParam._m0[1u].z;
        _1983 = _1965.y * cbModelParam._m0[1u].z;
        _1985 = _1965.z * cbModelParam._m0[1u].z;
    }
    float _1998 = (((_1015 * _965) + _1016) * _980) * ((cbModelParam._m0[1u].w * (_1981 - _1881)) + _1881);
    float _2000 = (((_1015 * _967) + _1016) * _980) * ((cbModelParam._m0[1u].w * (_1983 - _1883)) + _1883);
    float _2002 = (((_1015 * _968) + _1016) * _980) * ((cbModelParam._m0[1u].w * (_1985 - _1885)) + _1885);
    float _2005 = fma(_2002, cbSceneParam._m0[89u].z, fma(_2000, cbSceneParam._m0[89u].y, _1998 * cbSceneParam._m0[89u].x));
    float _2008 = fma(_2002, cbSceneParam._m0[90u].z, fma(_2000, cbSceneParam._m0[90u].y, _1998 * cbSceneParam._m0[90u].x));
    float _2011 = fma(_2002, cbSceneParam._m0[91u].z, fma(_2000, cbSceneParam._m0[91u].y, _1998 * cbSceneParam._m0[91u].x));
    vec4 _2019 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_902, _903));
    float _2021 = _2019.w;
    float _2033 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _2021);
    float _2034 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _2021);
    float _2035 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _2021);
    uvec4 _2039 = floatBitsToUint(cbInstanceData._m0[_940 + 5u]);
    uint _2041 = _2039.x * 14u;
    uint _2042 = _2041 + 13u;
    float _2049 = _980 + (-1.0);
    float _2054 = (cbLight._m0[_2042].x * _2049) + 1.0;
    float _2055 = (cbLight._m0[_2042].y * _2049) + 1.0;
    float _2056 = (cbLight._m0[_2042].z * _2049) + 1.0;
    float _2057 = (cbLight._m0[_2042].w * _2049) + 1.0;
    uint _2058 = _2041 + 5u;
    float _2064 = isnan(1.0) ? _2055 : (isnan(_2055) ? 1.0 : min(_2055, 1.0));
    uint _2068 = _2041 + 4u;
    float _2077 = isnan(1.0) ? _2054 : (isnan(_2054) ? 1.0 : min(_2054, 1.0));
    uint _2081 = _2041 | 1u;
    float _2092 = dot(vec3(cbLight._m0[_2041].xyz), vec3(_814, _815, _816));
    float _2095 = dot(vec3(cbLight._m0[_2081].xyz), vec3(_814, _815, _816));
    float _4230 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _4241 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _2100 = (isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0))) * 0.3183098733425140380859375;
    float _2102 = (isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0))) * 0.3183098733425140380859375;
    float _2109 = ((cbLight._m0[_2058].x * _2064) * _2102) + (((cbLight._m0[_2068].x * _2033) * _2077) * _2100);
    float _2110 = ((_2064 * cbLight._m0[_2058].y) * _2102) + (((cbLight._m0[_2068].y * _2034) * _2077) * _2100);
    float _2111 = ((_2064 * cbLight._m0[_2058].z) * _2102) + (((cbLight._m0[_2068].z * _2035) * _2077) * _2100);
    uvec4 _2115 = floatBitsToUint(cbLight._m0[_2041 + 12u]);
    bool _2117 = _2115.x == 0u;
    float _2128;
    float _2130;
    float _2132;
    if (_2117)
    {
        _2128 = _2109;
        _2130 = _2110;
        _2132 = _2111;
    }
    else
    {
        uint _2136 = _2041 + 6u;
        float _2152 = (dot(vec3(cbLight._m0[_2041 + 2u].xyz), vec3(_814, _815, _816)) * 0.5) + 0.5;
        float _2153 = _2152 * _2152;
        float _4252 = isnan(0.0) ? _2153 : (isnan(_2153) ? 0.0 : max(_2153, 0.0));
        float _2154 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
        float _2155 = isnan(1.0) ? _2056 : (isnan(_2056) ? 1.0 : min(_2056, 1.0));
        _2128 = (((cbLight._m0[_2136].x * 0.3183098733425140380859375) * _2154) * _2155) + _2109;
        _2130 = (((cbLight._m0[_2136].y * 0.3183098733425140380859375) * _2154) * _2155) + _2110;
        _2132 = (((cbLight._m0[_2136].z * 0.3183098733425140380859375) * _2154) * _2155) + _2111;
    }
    bool _2135 = _2115.y == 0u;
    float _2173;
    float _2175;
    float _2177;
    if (_2135)
    {
        _2173 = _2128;
        _2175 = _2130;
        _2177 = _2132;
    }
    else
    {
        uint _2346 = _2041 + 7u;
        float _2362 = (dot(vec3(cbLight._m0[_2041 + 3u].xyz), vec3(_814, _815, _816)) * 0.5) + 0.5;
        float _2363 = _2362 * _2362;
        float _4268 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
        float _2364 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
        float _2365 = isnan(1.0) ? _2057 : (isnan(_2057) ? 1.0 : min(_2057, 1.0));
        _2173 = (((cbLight._m0[_2346].x * 0.3183098733425140380859375) * _2364) * _2365) + _2128;
        _2175 = (((cbLight._m0[_2346].y * 0.3183098733425140380859375) * _2364) * _2365) + _2130;
        _2177 = (((cbLight._m0[_2346].z * 0.3183098733425140380859375) * _2364) * _2365) + _2132;
    }
    uint _2180 = _2041 + 8u;
    float _2193 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2041].w)) * _817) * 0.949999988079071044921875);
    float _2194 = _2193 * _2193;
    float _2195 = cbLight._m0[_2041].x + _894;
    float _2196 = cbLight._m0[_2041].y + _895;
    float _2197 = cbLight._m0[_2041].z + _896;
    float _2201 = inversesqrt(dot(vec3(_2195, _2196, _2197), vec3(_2195, _2196, _2197)));
    float _2202 = _2201 * _2195;
    float _2203 = _2201 * _2196;
    float _2204 = _2201 * _2197;
    float _2205 = dot(vec3(_814, _815, _816), vec3(cbLight._m0[_2041].xyz));
    float _4284 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _2208 = isnan(1.0) ? _4284 : (isnan(_4284) ? 1.0 : min(_4284, 1.0));
    float _4295 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
    float _2209 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
    float _2210 = dot(vec3(_814, _815, _816), vec3(_2202, _2203, _2204));
    float _4306 = isnan(0.0) ? _2210 : (isnan(_2210) ? 0.0 : max(_2210, 0.0));
    float _2213 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
    float _2214 = dot(vec3(cbLight._m0[_2041].xyz), vec3(_2202, _2203, _2204));
    float _4317 = isnan(0.0) ? _2214 : (isnan(_2214) ? 0.0 : max(_2214, 0.0));
    float _2218 = _2194 * _2194;
    float _2222 = ((_2213 * _2213) * (_2218 + (-1.0))) + 1.0;
    float _2230 = exp2(log2(1.0 - (isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0)))) * 5.0);
    float _2231 = 0.959999978542327880859375 - _962;
    float _2233 = 0.959999978542327880859375 - _963;
    float _2234 = 0.959999978542327880859375 - _964;
    float _2241 = 1.0 - _2194;
    float _2252 = (0.5 / (((_2209 * ((_2208 * _2241) + _2194)) + 9.9999999392252902907785028219223e-09) + (((_2209 * _2241) + _2194) * _2208))) * _2208;
    float _4328 = isnan(0.0) ? _2252 : (isnan(_2252) ? 0.0 : max(_2252, 0.0));
    float _2254 = (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * (_2218 / ((_2222 * _2222) * 3.141590118408203125));
    uint _2268 = _2041 + 9u;
    float _2279 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2081].w)) * _817) * 0.949999988079071044921875);
    float _2280 = _2279 * _2279;
    float _2281 = cbLight._m0[_2081].x + _894;
    float _2282 = cbLight._m0[_2081].y + _895;
    float _2283 = cbLight._m0[_2081].z + _896;
    float _2287 = inversesqrt(dot(vec3(_2281, _2282, _2283), vec3(_2281, _2282, _2283)));
    float _2288 = _2287 * _2281;
    float _2289 = _2287 * _2282;
    float _2290 = _2287 * _2283;
    float _2291 = dot(vec3(_814, _815, _816), vec3(cbLight._m0[_2081].xyz));
    float _4339 = isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0));
    float _2294 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
    float _2295 = dot(vec3(_814, _815, _816), vec3(_2288, _2289, _2290));
    float _4350 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _2298 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
    float _2299 = dot(vec3(cbLight._m0[_2081].xyz), vec3(_2288, _2289, _2290));
    float _4361 = isnan(0.0) ? _2299 : (isnan(_2299) ? 0.0 : max(_2299, 0.0));
    float _2303 = _2280 * _2280;
    float _2307 = ((_2298 * _2298) * (_2303 + (-1.0))) + 1.0;
    float _2314 = exp2(log2(1.0 - (isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0)))) * 5.0);
    float _2321 = 1.0 - _2280;
    float _2331 = (0.5 / (((_2209 * ((_2294 * _2321) + _2280)) + 9.9999999392252902907785028219223e-09) + (((_2209 * _2321) + _2280) * _2294))) * _2294;
    float _4372 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
    float _2333 = (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0))) * (_2303 / ((_2307 * _2307) * 3.141590118408203125));
    float _2343 = (((((_2314 * _2231) + _965) * cbLight._m0[_2268].x) * _2333) * _2064) + ((((cbLight._m0[_2180].x * _2033) * ((_2230 * _2231) + _965)) * _2254) * _2077);
    float _2344 = (((((_2314 * _2233) + _967) * cbLight._m0[_2268].y) * _2333) * _2064) + ((((cbLight._m0[_2180].y * _2034) * ((_2230 * _2233) + _967)) * _2254) * _2077);
    float _2345 = (((((_2314 * _2234) + _968) * cbLight._m0[_2268].z) * _2333) * _2064) + ((((cbLight._m0[_2180].z * _2035) * ((_2230 * _2234) + _968)) * _2254) * _2077);
    float _2407;
    float _2409;
    float _2411;
    if (_2117)
    {
        _2407 = _2343;
        _2409 = _2344;
        _2411 = _2345;
    }
    else
    {
        uint _2413 = _2041 + 2u;
        uint _2417 = _2041 + 10u;
        float _2431 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2413].w)) * _817) * 0.949999988079071044921875);
        float _2432 = _2431 * _2431;
        float _2433 = cbLight._m0[_2413].x + _894;
        float _2434 = cbLight._m0[_2413].y + _895;
        float _2435 = cbLight._m0[_2413].z + _896;
        float _2439 = inversesqrt(dot(vec3(_2433, _2434, _2435), vec3(_2433, _2434, _2435)));
        float _2440 = _2439 * _2433;
        float _2441 = _2439 * _2434;
        float _2442 = _2439 * _2435;
        float _2443 = dot(vec3(_814, _815, _816), vec3(cbLight._m0[_2413].xyz));
        float _4383 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
        float _2446 = isnan(1.0) ? _4383 : (isnan(_4383) ? 1.0 : min(_4383, 1.0));
        float _2447 = dot(vec3(_814, _815, _816), vec3(_2440, _2441, _2442));
        float _4394 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
        float _2450 = isnan(1.0) ? _4394 : (isnan(_4394) ? 1.0 : min(_4394, 1.0));
        float _2451 = dot(vec3(cbLight._m0[_2413].xyz), vec3(_2440, _2441, _2442));
        float _4405 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
        float _2455 = _2432 * _2432;
        float _2459 = ((_2450 * _2450) * (_2455 + (-1.0))) + 1.0;
        float _2466 = exp2(log2(1.0 - (isnan(1.0) ? _4405 : (isnan(_4405) ? 1.0 : min(_4405, 1.0)))) * 5.0);
        float _2473 = 1.0 - _2432;
        float _2483 = (0.5 / (((_2209 * ((_2446 * _2473) + _2432)) + 9.9999999392252902907785028219223e-09) + (((_2209 * _2473) + _2432) * _2446))) * _2446;
        float _4416 = isnan(0.0) ? _2483 : (isnan(_2483) ? 0.0 : max(_2483, 0.0));
        float _2485 = (isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * (_2455 / ((_2459 * _2459) * 3.141590118408203125));
        float _2486 = isnan(1.0) ? _2056 : (isnan(_2056) ? 1.0 : min(_2056, 1.0));
        _2407 = (((((_2466 * _2231) + _965) * cbLight._m0[_2417].x) * _2485) * _2486) + _2343;
        _2409 = (((((_2466 * _2233) + _967) * cbLight._m0[_2417].y) * _2485) * _2486) + _2344;
        _2411 = (((((_2466 * _2234) + _968) * cbLight._m0[_2417].z) * _2485) * _2486) + _2345;
    }
    float _2521;
    float _2523;
    float _2525;
    if (_2135)
    {
        _2521 = _2407;
        _2523 = _2409;
        _2525 = _2411;
    }
    else
    {
        uint _2532 = _2041 + 3u;
        uint _2536 = _2041 + 11u;
        float _2550 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2532].w)) * _817) * 0.949999988079071044921875);
        float _2551 = _2550 * _2550;
        float _2552 = cbLight._m0[_2532].x + _894;
        float _2553 = cbLight._m0[_2532].y + _895;
        float _2554 = cbLight._m0[_2532].z + _896;
        float _2558 = inversesqrt(dot(vec3(_2552, _2553, _2554), vec3(_2552, _2553, _2554)));
        float _2559 = _2558 * _2552;
        float _2560 = _2558 * _2553;
        float _2561 = _2558 * _2554;
        float _2562 = dot(vec3(_814, _815, _816), vec3(cbLight._m0[_2532].xyz));
        float _4432 = isnan(0.0) ? _2562 : (isnan(_2562) ? 0.0 : max(_2562, 0.0));
        float _2565 = isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0));
        float _2566 = dot(vec3(_814, _815, _816), vec3(_2559, _2560, _2561));
        float _4443 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
        float _2569 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
        float _2570 = dot(vec3(cbLight._m0[_2532].xyz), vec3(_2559, _2560, _2561));
        float _4454 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
        float _2574 = _2551 * _2551;
        float _2578 = ((_2569 * _2569) * (_2574 + (-1.0))) + 1.0;
        float _2585 = exp2(log2(1.0 - (isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0)))) * 5.0);
        float _2592 = 1.0 - _2551;
        float _2602 = (0.5 / (((_2209 * ((_2565 * _2592) + _2551)) + 9.9999999392252902907785028219223e-09) + (((_2209 * _2592) + _2551) * _2565))) * _2565;
        float _4465 = isnan(0.0) ? _2602 : (isnan(_2602) ? 0.0 : max(_2602, 0.0));
        float _2604 = (isnan(1.0) ? _4465 : (isnan(_4465) ? 1.0 : min(_4465, 1.0))) * (_2574 / ((_2578 * _2578) * 3.141590118408203125));
        float _2605 = isnan(1.0) ? _2057 : (isnan(_2057) ? 1.0 : min(_2057, 1.0));
        _2521 = (((((_2585 * _2231) + _965) * cbLight._m0[_2536].x) * _2604) * _2605) + _2407;
        _2523 = (((((_2585 * _2233) + _967) * cbLight._m0[_2536].y) * _2604) * _2605) + _2409;
        _2525 = (((((_2585 * _2234) + _968) * cbLight._m0[_2536].z) * _2604) * _2605) + _2411;
    }
    float _2740;
    float _2742;
    float _2744;
    float _2746;
    float _2748;
    float _2750;
    if (_2039.y == 0u)
    {
        float _2680 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2681 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2680;
        float _2682 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2680;
        float _2683 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2680;
        uvec4 _2695 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2696 = _2695.x;
        uint _2707 = uint((float(_2695.y) * floor(float(uint(cbSceneParam._m0[85u].y * _903) / _2696))) + floor(float(uint(cbSceneParam._m0[85u].x * _902) / _2696)));
        float _2717 = (log2(_2683 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2718 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
        uint _2721 = uint(isnan(14.0) ? _2718 : (isnan(_2718) ? 14.0 : min(_2718, 14.0)));
        uvec4 _2726 = texelFetch(g_lightClusterGridBuffer, int(((_2721 << 2u) + (_2707 << 6u)) >> 2u));
        uint _2727 = _2726.x;
        uint _2728 = _2695.z;
        float _2828;
        float _2830;
        float _2832;
        float _2834;
        float _2836;
        float _2838;
        if (((((1u << ((_2728 >> 4u) & 15u)) + 4294967295u) & _2727) == 0u) || ((_2728 & 240u) == 0u))
        {
            _2828 = 0.0;
            _2830 = 0.0;
            _2832 = 0.0;
            _2834 = 0.0;
            _2836 = 0.0;
            _2838 = 0.0;
        }
        else
        {
            float _2829;
            float _2831;
            float _2833;
            float _2835;
            float _2837;
            float _2839;
            float _2973 = 0.0;
            float _2974 = 0.0;
            float _2975 = 0.0;
            float _2976 = 0.0;
            float _2977 = 0.0;
            float _2978 = 0.0;
            uint _2979 = 0u;
            uint _2988;
            bool _2989;
            for (;;)
            {
                _2988 = texelFetch(g_lightClassification, int((((_2721 << 5u) + (_2707 << 9u)) + (_2979 << 2u)) >> 2u)).x;
                _2989 = _2988 == 0u;
                float frontier_phi_61_pred;
                float frontier_phi_61_pred_1;
                float frontier_phi_61_pred_2;
                float frontier_phi_61_pred_3;
                float frontier_phi_61_pred_4;
                float frontier_phi_61_pred_5;
                if (_2989)
                {
                    frontier_phi_61_pred = _2973;
                    frontier_phi_61_pred_1 = _2978;
                    frontier_phi_61_pred_2 = _2977;
                    frontier_phi_61_pred_3 = _2976;
                    frontier_phi_61_pred_4 = _2975;
                    frontier_phi_61_pred_5 = _2974;
                }
                else
                {
                    float _3097;
                    float _3098;
                    float _3099;
                    float _3100;
                    float _3101;
                    float _3102;
                    uint _3103;
                    _3097 = _2973;
                    _3098 = _2974;
                    _3099 = _2975;
                    _3100 = _2976;
                    _3101 = _2977;
                    _3102 = _2978;
                    _3103 = _2988;
                    float _3029;
                    float _3030;
                    float _3031;
                    float _3032;
                    float _3033;
                    float _3034;
                    for (;;)
                    {
                        uint _3107 = uint(findLSB(_3103)) + (_2979 << 5u);
                        uint _3104 = (_3103 + 4294967295u) & _3103;
                        uint _3109 = _3107 * 48u;
                        vec4 _3123 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3109)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3109 + 3u)).x));
                        uint _3129 = (_3107 * 48u) + 4u;
                        vec4 _3142 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3129)).x, texelFetch(g_PointLightRenderingBuffer, int(_3129 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3129 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3129 + 3u)).x));
                        uint _3148 = (_3107 * 48u) + 8u;
                        vec3 _3159 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3148)).x, texelFetch(g_PointLightRenderingBuffer, int(_3148 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3148 + 2u)).x));
                        float _3163 = _3123.x - _2681;
                        float _3164 = _3123.y - _2682;
                        float _3165 = _3123.z - _2683;
                        float _3166 = dot(vec3(_3163, _3164, _3165), vec3(_3163, _3164, _3165));
                        float _3169 = inversesqrt(_3166);
                        float _3170 = _3169 * _3163;
                        float _3171 = _3169 * _3164;
                        float _3172 = _3169 * _3165;
                        float _3173 = dot(vec3(_921, _924, _927), vec3(_3170, _3171, _3172));
                        float _3178 = 1.0 - (_3166 * _3123.w);
                        float _4491 = isnan(0.0) ? _3178 : (isnan(_3178) ? 0.0 : max(_3178, 0.0));
                        float _3179 = isnan(1.0) ? _4491 : (isnan(_4491) ? 1.0 : min(_4491, 1.0));
                        float _3180 = sqrt(_3166) * _3142.w;
                        float _3183 = 1.39999997615814208984375 / (_3180 + 1.39999997615814208984375);
                        float _3184 = _3183 * _3183;
                        float _3187 = ((1.0 - _3184) * _3173) + _3184;
                        float _3190 = _3180 * _3180;
                        float _3194 = ((isnan(0.0) ? _3187 : (isnan(_3187) ? 0.0 : max(_3187, 0.0))) * _3179) / ((_3190 * 0.699999988079071044921875) + 1.0);
                        float _3198 = (-0.0) - _2681;
                        float _3199 = (-0.0) - _2682;
                        float _3200 = (-0.0) - _2683;
                        float _3204 = inversesqrt(dot(vec3(_3198, _3199, _3200), vec3(_3198, _3199, _3200)));
                        float _3205 = _3204 * _3198;
                        float _3206 = _3204 * _3199;
                        float _3207 = _3204 * _3200;
                        float _3215 = exp2(log2(1.0 / ((_3190 * 3.5) + 5.0)) * 0.25);
                        float _3216 = 1.0 - _996;
                        float _3223 = sqrt(1.0 - ((1.0 - (_3216 * _3216)) * (1.0 - (_3215 * _3215))));
                        float _3224 = _3223 * _3223;
                        float _3225 = _3224 * _3224;
                        float _3226 = _3205 + _3170;
                        float _3227 = _3206 + _3171;
                        float _3228 = _3207 + _3172;
                        float _3232 = inversesqrt(dot(vec3(_3226, _3227, _3228), vec3(_3226, _3227, _3228)));
                        float _3236 = dot(vec3(_921, _924, _927), vec3(_3205, _3206, _3207));
                        float _4507 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0));
                        float _3239 = isnan(1.0) ? _4507 : (isnan(_4507) ? 1.0 : min(_4507, 1.0));
                        float _3240 = dot(vec3(_921, _924, _927), vec3(_3232 * _3226, _3232 * _3227, _3232 * _3228));
                        float _4518 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                        float _3243 = isnan(1.0) ? _4518 : (isnan(_4518) ? 1.0 : min(_4518, 1.0));
                        float _3247 = ((_3243 * _3243) * (_3225 + (-1.0))) + 1.0;
                        float _3248 = _3183 * _3224;
                        float _3249 = _3248 * _3248;
                        float _3252 = ((1.0 - _3249) * _3173) + _3249;
                        float _4529 = isnan(0.0) ? _3252 : (isnan(_3252) ? 0.0 : max(_3252, 0.0));
                        float _3253 = isnan(1.0) ? _4529 : (isnan(_4529) ? 1.0 : min(_4529, 1.0));
                        float _3254 = 1.0 - _3224;
                        float _3264 = (0.5 / (((_3253 * ((_3239 * _3254) + _3224)) + 9.9999999392252902907785028219223e-09) + (((_3253 * _3254) + _3224) * _3239))) * _3253;
                        float _4540 = isnan(0.0) ? _3264 : (isnan(_3264) ? 0.0 : max(_3264, 0.0));
                        float _3275 = (((_3225 * 3.1415927410125732421875) * (isnan(1.0) ? _4540 : (isnan(_4540) ? 1.0 : min(_4540, 1.0)))) / ((_3247 * _3247) * ((_3190 * 2.1991131305694580078125) + 3.141590118408203125))) * _3179;
                        _3032 = (_3194 * _3142.x) + _3100;
                        _3033 = (_3194 * _3142.y) + _3101;
                        _3034 = (_3194 * _3142.z) + _3102;
                        _3029 = (_3275 * _3159.x) + _3097;
                        _3030 = (_3275 * _3159.y) + _3098;
                        _3031 = (_3275 * _3159.z) + _3099;
                        if (_3104 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3097 = _3029;
                            _3098 = _3030;
                            _3099 = _3031;
                            _3100 = _3032;
                            _3101 = _3033;
                            _3102 = _3034;
                            _3103 = _3104;
                        }
                    }
                    frontier_phi_61_pred = _3029;
                    frontier_phi_61_pred_1 = _3034;
                    frontier_phi_61_pred_2 = _3033;
                    frontier_phi_61_pred_3 = _3032;
                    frontier_phi_61_pred_4 = _3031;
                    frontier_phi_61_pred_5 = _3030;
                }
                _2829 = frontier_phi_61_pred;
                _2839 = frontier_phi_61_pred_1;
                _2837 = frontier_phi_61_pred_2;
                _2835 = frontier_phi_61_pred_3;
                _2833 = frontier_phi_61_pred_4;
                _2831 = frontier_phi_61_pred_5;
                uint _2980 = _2979 + 1u;
                if (_2980 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2973 = _2829;
                    _2974 = _2831;
                    _2975 = _2833;
                    _2976 = _2835;
                    _2977 = _2837;
                    _2978 = _2839;
                    _2979 = _2980;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2828 = _2829;
            _2830 = _2831;
            _2832 = _2833;
            _2834 = _2835;
            _2836 = _2837;
            _2838 = _2839;
        }
        uvec4 _2842 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2843 = _2842.z;
        uint _2845 = (_2843 >> 8u) & 15u;
        float _2941;
        float _2943;
        float _2945;
        float _2947;
        float _2949;
        float _2951;
        if (((4294967295u << _2845) & _2727) == 0u)
        {
            _2941 = _2828;
            _2943 = _2830;
            _2945 = _2832;
            _2947 = _2834;
            _2949 = _2836;
            _2951 = _2838;
        }
        else
        {
            float _2966 = inversesqrt(dot(vec3(_2681, _2682, _2683), vec3(_2681, _2682, _2683)));
            float _2967 = _2966 * _2681;
            float _2968 = _2966 * _2682;
            float _2969 = _2966 * _2683;
            float frontier_phi_55_56_ladder;
            float frontier_phi_55_56_ladder_1;
            float frontier_phi_55_56_ladder_2;
            float frontier_phi_55_56_ladder_3;
            float frontier_phi_55_56_ladder_4;
            float frontier_phi_55_56_ladder_5;
            if (_2845 < ((_2843 >> 12u) & 15u))
            {
                float _2942;
                float _2944;
                float _2946;
                float _2948;
                float _2950;
                float _2952;
                float _3080 = _2828;
                float _3081 = _2830;
                float _3082 = _2832;
                float _3083 = _2834;
                float _3084 = _2836;
                float _3085 = _2838;
                uint _3086 = _2845;
                uint _3095;
                bool _3096;
                for (;;)
                {
                    _3095 = texelFetch(g_lightClassification, int((((_2721 << 5u) + (_2707 << 9u)) + (_3086 << 2u)) >> 2u)).x;
                    _3096 = _3095 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_3096)
                    {
                        frontier_phi_67_pred = _3083;
                        frontier_phi_67_pred_1 = _3084;
                        frontier_phi_67_pred_2 = _3085;
                        frontier_phi_67_pred_3 = _3082;
                        frontier_phi_67_pred_4 = _3081;
                        frontier_phi_67_pred_5 = _3080;
                    }
                    else
                    {
                        float _3280;
                        float _3281;
                        float _3282;
                        float _3283;
                        float _3284;
                        float _3285;
                        float _3574;
                        float _3575;
                        float _3576;
                        float _3577;
                        float _3578;
                        float _3579;
                        float _3293 = _3080;
                        float _3294 = _3081;
                        float _3295 = _3082;
                        float _3296 = _3083;
                        float _3297 = _3084;
                        float _3298 = _3085;
                        uint _3299 = _3095;
                        uint _3300;
                        vec4 _3325;
                        float _3326;
                        vec4 _3341;
                        vec3 _3353;
                        vec4 _3368;
                        vec4 _3383;
                        float _3430;
                        bool _3431;
                        for (;;)
                        {
                            uint _3310 = ((_3086 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3299));
                            _3300 = (_3299 + 4294967295u) & _3299;
                            uint _3312 = _3310 * 40u;
                            _3325 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3312)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3312 + 3u)).x));
                            _3326 = _3325.w;
                            uint _3328 = (_3310 * 40u) + 4u;
                            _3341 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3328)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 3u)).x));
                            uint _3343 = (_3310 * 40u) + 8u;
                            _3353 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3343)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3343 + 2u)).x));
                            uint _3355 = (_3310 * 40u) + 16u;
                            _3368 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3355)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 3u)).x));
                            uint _3370 = (_3310 * 40u) + 20u;
                            _3383 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3370)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 3u)).x));
                            uint _3386 = (_3310 * 40u) + 24u;
                            vec4 _3399 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3386)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3386 + 3u)).x));
                            uint _3405 = (_3310 * 40u) + 28u;
                            vec4 _3418 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3405)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3405 + 3u)).x));
                            _3430 = fma(_2683, _3418.z, fma(_2682, _3418.y, _3418.x * _2681)) + _3418.w;
                            _3431 = !((fma(_2683, _3399.z, fma(_2682, _3399.y, _3399.x * _2681)) + _3399.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_3431)
                            {
                                float _3458 = _3325.x - _2681;
                                float _3459 = _3325.y - _2682;
                                float _3460 = _3325.z - _2683;
                                float _3461 = dot(vec3(_3458, _3459, _3460), vec3(_3458, _3459, _3460));
                                float _3464 = inversesqrt(_3461);
                                float _3465 = _3464 * _3458;
                                float _3466 = _3464 * _3459;
                                float _3467 = _3464 * _3460;
                                float _3471 = 1.0 - (_3461 / (_3326 * _3326));
                                float _4551 = isnan(0.0) ? _3471 : (isnan(_3471) ? 0.0 : max(_3471, 0.0));
                                float _3472 = isnan(1.0) ? _4551 : (isnan(_4551) ? 1.0 : min(_4551, 1.0));
                                float _3476 = sqrt(_3461) * _3341.w;
                                float _3478 = 1.39999997615814208984375 / (_3476 + 1.39999997615814208984375);
                                float _3479 = _3478 * _3478;
                                float _3482 = ((1.0 - _3479) * dot(vec3(_3465, _3466, _3467), vec3(_921, _924, _927))) + _3479;
                                float _3485 = _3476 * _3476;
                                float _3489 = (fma(_2683, _3368.z, fma(_2682, _3368.y, _3368.x * _2681)) + _3368.w) / _3430;
                                float _3490 = (fma(_2683, _3383.z, fma(_2682, _3383.y, _3383.x * _2681)) + _3383.w) / _3430;
                                float _3494 = 1.0 - dot(vec2(_3489, _3490), vec2(_3489, _3490));
                                float _4567 = isnan(0.0) ? _3494 : (isnan(_3494) ? 0.0 : max(_3494, 0.0));
                                float _3495 = isnan(1.0) ? _4567 : (isnan(_4567) ? 1.0 : min(_4567, 1.0));
                                float _3496 = _3495 * (((isnan(0.0) ? _3482 : (isnan(_3482) ? 0.0 : max(_3482, 0.0))) * _3472) / ((_3485 * 0.699999988079071044921875) + 1.0));
                                float _3508 = exp2(log2(1.0 / ((_3485 * 3.5) + 5.0)) * 0.25);
                                float _3509 = 1.0 - _996;
                                float _3516 = sqrt(1.0 - ((1.0 - (_3509 * _3509)) * (1.0 - (_3508 * _3508))));
                                float _3517 = _3516 * _3516;
                                float _3518 = _3517 * _3517;
                                float _3519 = _3465 - _2967;
                                float _3520 = _3466 - _2968;
                                float _3521 = _3467 - _2969;
                                float _3525 = inversesqrt(dot(vec3(_3519, _3520, _3521), vec3(_3519, _3520, _3521)));
                                float _3529 = dot(vec3(_921, _924, _927), vec3((-0.0) - _2967, (-0.0) - _2968, (-0.0) - _2969));
                                float _4578 = isnan(0.0) ? _3529 : (isnan(_3529) ? 0.0 : max(_3529, 0.0));
                                float _3532 = isnan(1.0) ? _4578 : (isnan(_4578) ? 1.0 : min(_4578, 1.0));
                                float _3533 = dot(vec3(_921, _924, _927), vec3(_3525 * _3519, _3525 * _3520, _3525 * _3521));
                                float _4589 = isnan(0.0) ? _3533 : (isnan(_3533) ? 0.0 : max(_3533, 0.0));
                                float _3536 = isnan(1.0) ? _4589 : (isnan(_4589) ? 1.0 : min(_4589, 1.0));
                                float _3540 = ((_3536 * _3536) * (_3518 + (-1.0))) + 1.0;
                                float _3541 = _3478 * _3517;
                                float _3542 = _3541 * _3541;
                                float _3548 = ((1.0 - _3542) * dot(vec3(_921, _924, _927), vec3(_3465, _3466, _3467))) + _3542;
                                float _4600 = isnan(0.0) ? _3548 : (isnan(_3548) ? 0.0 : max(_3548, 0.0));
                                float _3549 = isnan(1.0) ? _4600 : (isnan(_4600) ? 1.0 : min(_4600, 1.0));
                                float _3550 = 1.0 - _3517;
                                float _3560 = (0.5 / (((_3549 * ((_3532 * _3550) + _3517)) + 9.9999999392252902907785028219223e-09) + (((_3549 * _3550) + _3517) * _3532))) * _3549;
                                float _4611 = isnan(0.0) ? _3560 : (isnan(_3560) ? 0.0 : max(_3560, 0.0));
                                float _3570 = (_3495 * _3472) * (((_3518 * 3.1415927410125732421875) * (isnan(1.0) ? _4611 : (isnan(_4611) ? 1.0 : min(_4611, 1.0)))) / ((_3540 * _3540) * ((_3485 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _3570 * _3353.x;
                                frontier_phi_73_pred_1 = _3570 * _3353.y;
                                frontier_phi_73_pred_2 = _3496 * _3341.z;
                                frontier_phi_73_pred_3 = _3496 * _3341.y;
                                frontier_phi_73_pred_4 = _3496 * _3341.x;
                                frontier_phi_73_pred_5 = _3570 * _3353.z;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _3574 = frontier_phi_73_pred;
                            _3575 = frontier_phi_73_pred_1;
                            _3579 = frontier_phi_73_pred_2;
                            _3578 = frontier_phi_73_pred_3;
                            _3577 = frontier_phi_73_pred_4;
                            _3576 = frontier_phi_73_pred_5;
                            _3283 = _3577 + _3296;
                            _3284 = _3578 + _3297;
                            _3285 = _3579 + _3298;
                            _3280 = _3574 + _3293;
                            _3281 = _3575 + _3294;
                            _3282 = _3576 + _3295;
                            if (_3300 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3293 = _3280;
                                _3294 = _3281;
                                _3295 = _3282;
                                _3296 = _3283;
                                _3297 = _3284;
                                _3298 = _3285;
                                _3299 = _3300;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _3283;
                        frontier_phi_67_pred_1 = _3284;
                        frontier_phi_67_pred_2 = _3285;
                        frontier_phi_67_pred_3 = _3282;
                        frontier_phi_67_pred_4 = _3281;
                        frontier_phi_67_pred_5 = _3280;
                    }
                    _2948 = frontier_phi_67_pred;
                    _2950 = frontier_phi_67_pred_1;
                    _2952 = frontier_phi_67_pred_2;
                    _2946 = frontier_phi_67_pred_3;
                    _2944 = frontier_phi_67_pred_4;
                    _2942 = frontier_phi_67_pred_5;
                    uint _3087 = _3086 + 1u;
                    if (_3087 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3080 = _2942;
                        _3081 = _2944;
                        _3082 = _2946;
                        _3083 = _2948;
                        _3084 = _2950;
                        _3085 = _2952;
                        _3086 = _3087;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_55_56_ladder = _2950;
                frontier_phi_55_56_ladder_1 = _2952;
                frontier_phi_55_56_ladder_2 = _2948;
                frontier_phi_55_56_ladder_3 = _2946;
                frontier_phi_55_56_ladder_4 = _2944;
                frontier_phi_55_56_ladder_5 = _2942;
            }
            else
            {
                frontier_phi_55_56_ladder = _2836;
                frontier_phi_55_56_ladder_1 = _2838;
                frontier_phi_55_56_ladder_2 = _2834;
                frontier_phi_55_56_ladder_3 = _2832;
                frontier_phi_55_56_ladder_4 = _2830;
                frontier_phi_55_56_ladder_5 = _2828;
            }
            _2941 = frontier_phi_55_56_ladder_5;
            _2943 = frontier_phi_55_56_ladder_4;
            _2945 = frontier_phi_55_56_ladder_3;
            _2947 = frontier_phi_55_56_ladder_2;
            _2949 = frontier_phi_55_56_ladder;
            _2951 = frontier_phi_55_56_ladder_1;
        }
        float _2956 = isnan(1.0) ? _980 : (isnan(_980) ? 1.0 : min(_980, 1.0));
        _2740 = (_2956 * _2947) + _2173;
        _2742 = (_2956 * _2949) + _2175;
        _2744 = (_2956 * _2951) + _2177;
        _2746 = ((_2941 * _965) * _2956) + _2521;
        _2748 = ((_2943 * _967) * _2956) + _2523;
        _2750 = ((_2945 * _968) * _2956) + _2525;
    }
    else
    {
        _2740 = _2173;
        _2742 = _2175;
        _2744 = _2177;
        _2746 = _2521;
        _2748 = _2523;
        _2750 = _2525;
    }
    float _4627 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
    float _4638 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
    float _4649 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    uint _2770 = _940 + 6u;
    float _2778 = _902 / cbSceneParam._m0[86u].x;
    float _2779 = _903 / cbSceneParam._m0[86u].y;
    vec4 _2793 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2778, _2779, (log2((isnan(cbSceneParam._m0[77u].w) ? _837 : (isnan(_837) ? cbSceneParam._m0[77u].w : min(_837, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2795 = _2793.x;
    float _2796 = _2793.y;
    float _2797 = _2793.z;
    float _2798 = _2793.w;
    float _2891;
    float _2893;
    float _2895;
    float _2897;
    if (_837 > cbSceneParam._m0[78u].w)
    {
        float _2853 = isnan(_837) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _837 : min(cbSceneParam._m0[80u].w, _837));
        float _2854 = _2853 / _837;
        float _2865 = _2854 * _887;
        float _2866 = _888 * _2854;
        float _2867 = (-0.0) - _2866;
        float _2869 = _2854 * _889;
        float _2871 = (cbSceneParam._m0[77u].w * _2867) / _2853;
        float _2872 = _2871 + cbSceneParam._m0[79u].w;
        float _2873 = cbSceneParam._m0[79u].w - _2866;
        float _2879 = sqrt(((_2865 * _2865) + (_2866 * _2866)) + (_2869 * _2869));
        float _2882 = (1.0 - (cbSceneParam._m0[77u].w / _2853)) * _2879;
        float _2887 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2889 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3042;
        if (abs((_2867 - _2871) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3042 = ((((_2872 > 0.0) ? exp2(_2887 * _2872) : (2.0 - exp2(_2889 * _2872))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2882;
        }
        else
        {
            float _3002 = 1.0 / cbSceneParam._m0[80u].x;
            float _3003 = isnan(_2873) ? _2872 : (isnan(_2872) ? _2873 : max(_2872, _2873));
            float _3004 = isnan(_2873) ? _2872 : (isnan(_2872) ? _2873 : min(_2872, _2873));
            float _3013 = isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : min(_3003, 0.0));
            float _3014 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : min(_3004, 0.0));
            _3042 = ((abs(_2879 / _2867) * cbSceneParam._m0[80u].y) * ((((_3013 - _3014) * 2.0) - ((exp2(_2887 * (isnan(0.0) ? _3003 : (isnan(_3003) ? 0.0 : max(_3003, 0.0)))) - exp2(_2887 * (isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0))))) * _3002)) - ((exp2(_2889 * _3013) - exp2(_2889 * _3014)) * _3002))) + (_2882 * cbSceneParam._m0[80u].z);
        }
        vec4 _3044 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2778, _2779, 1.0), 0.0);
        float _3053 = exp2((_3042 * (-1.44269502162933349609375)) * (1.0 - _3044.w));
        float _3054 = log2(_3053);
        float _3070 = log2(_2798);
        _2891 = (exp2(_3070 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3054 * cbSceneParam._m0[78u].x)) * _3044.x) / cbSceneParam._m0[78u].x)) + _2795;
        _2893 = (exp2(_3070 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3054 * cbSceneParam._m0[78u].y)) * _3044.y) / cbSceneParam._m0[78u].y)) + _2796;
        _2895 = (exp2(_3070 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3054 * cbSceneParam._m0[78u].z)) * _3044.z) / cbSceneParam._m0[78u].z)) + _2797;
        _2897 = _3053 * _2798;
    }
    else
    {
        _2891 = _2795;
        _2893 = _2796;
        _2895 = _2797;
        _2897 = _2798;
    }
    float _2909 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2910 = _2909 == 3.0;
    float _2911 = log2(_2897);
    float _2918 = exp2(_2911 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4627 : (isnan(_4627) ? 1.0 : min(_4627, 1.0))) * (_2740 + ((isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0))) * _980))) + ((_2746 + ((isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0))) * _1790)) * cbPerFrame._m0[3u].x));
    float _2919 = exp2(_2911 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4638 : (isnan(_4638) ? 1.0 : min(_4638, 1.0))) * (_2742 + ((isnan(0.0) ? _1714 : (isnan(_1714) ? 0.0 : max(_1714, 0.0))) * _980))) + ((_2748 + ((isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0))) * _1790)) * cbPerFrame._m0[3u].x));
    float _2920 = exp2(_2911 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0))) * (_2744 + ((isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0))) * _980))) + ((_2750 + ((isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0))) * _1790)) * cbPerFrame._m0[3u].x));
    float _2929 = (_2909 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2929 * (_2910 ? _2918 : (_2918 + (cbSceneParam._m0[72u].w * _2891)));
    SV_Target.y = _2929 * (_2910 ? _2919 : (_2919 + (cbSceneParam._m0[72u].w * _2893)));
    SV_Target.z = _2929 * (_2910 ? _2920 : (_2920 + (cbSceneParam._m0[72u].w * _2895)));
    SV_Target.w = cbInstanceData._m0[_2770].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2770].w;
}


