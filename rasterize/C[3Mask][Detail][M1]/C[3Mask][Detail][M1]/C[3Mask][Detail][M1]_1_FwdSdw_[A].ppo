#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_20;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1367;
float _4034;
float _4035;
float _4036;
float _4037;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _221 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _222 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _223 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _229 = inversesqrt(dot(vec3(_221, _222, _223), vec3(_221, _222, _223)));
    float _236 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _243 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _266 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _272 = _266.x * cbMtdParam._m0[10u].x;
    float _273 = _266.y * cbMtdParam._m0[10u].y;
    float _274 = _266.z * cbMtdParam._m0[10u].z;
    vec4 _292 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _342 = cbMtdParam._m0[18u].y * texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x;
    float _353 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].x * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].y * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _342)) + 1.0;
    float _4046 = isnan(0.0) ? _353 : (isnan(_353) ? 0.0 : max(_353, 0.0));
    float _354 = isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0));
    float _361 = (_354 * ((_292.x * cbMtdParam._m0[11u].x) - _272)) + _272;
    float _362 = (_354 * ((_292.y * cbMtdParam._m0[11u].y) - _273)) + _273;
    float _363 = (_354 * ((_292.z * cbMtdParam._m0[11u].z) - _274)) + _274;
    vec4 _381 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _408 = ((cbMtdParam._m0[17u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _342)) + 1.0;
    float _4057 = isnan(0.0) ? _408 : (isnan(_408) ? 0.0 : max(_408, 0.0));
    float _409 = isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0));
    float _416 = (_409 * ((_381.x * cbMtdParam._m0[12u].x) - _361)) + _361;
    float _417 = (_409 * ((_381.y * cbMtdParam._m0[12u].y) - _362)) + _362;
    float _418 = (_409 * ((_381.z * cbMtdParam._m0[12u].z) - _363)) + _363;
    vec4 _435 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _460 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[18u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[18u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _342)) + 1.0;
    float _4068 = isnan(0.0) ? _460 : (isnan(_460) ? 0.0 : max(_460, 0.0));
    float _461 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    float _468 = (_461 * ((_435.x * cbMtdParam._m0[13u].x) - _416)) + _416;
    float _469 = (_461 * ((_435.y * cbMtdParam._m0[13u].y) - _417)) + _417;
    float _470 = (_461 * ((_435.z * cbMtdParam._m0[13u].z) - _418)) + _418;
    vec4 _490 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _519 = (TEXCOORD_5.x - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.z) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.w) + cbTextureTilingScale._m0[18u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].z + 1.0);
    float _4079 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
    float _520 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
    float _527 = (_520 * ((_490.x * cbMtdParam._m0[14u].x) - _468)) + _468;
    float _528 = (_520 * ((_490.y * cbMtdParam._m0[14u].y) - _469)) + _469;
    float _529 = (_520 * ((_490.z * cbMtdParam._m0[14u].z) - _470)) + _470;
    vec4 _542 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _544 = _542.x;
    float _562 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _544) * _354) + _544;
    float _580 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _562) * _409) + _562;
    float _597 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _580) * _461) + _580;
    float _599 = _597 - (_597 * TEXCOORD_5.x);
    vec4 _612 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _634 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _636 = _634.x;
    float _637 = _634.y;
    float _640 = cbMtdParam._m0[17u].y * _634.z;
    vec4 _652 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _661 = (((cbMtdParam._m0[17u].x * _652.z) - _640) * _354) + _640;
    vec4 _674 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _686 = (((cbMtdParam._m0[16u].w * _674.z) - _661) * _409) + _661;
    vec4 _699 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _708 = (((cbMtdParam._m0[16u].z * _699.z) - _686) * _461) + _686;
    float _713 = ((cbMtdParam._m0[16u].x * TEXCOORD_5.x) * ((_612.z * cbMtdParam._m0[17u].z) - _708)) + _708;
    vec4 _726 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _738 = ((_652.x - _636) * _354) + _636;
    float _739 = ((_652.y - _637) * _354) + _637;
    float _744 = ((_674.x - _738) * _409) + _738;
    float _745 = ((_674.y - _739) * _409) + _739;
    float _754 = ((((_699.x - _744) * _461) + _744) * 2.0) + (-1.0);
    float _755 = ((((_699.y - _745) * _461) + _745) * 2.0) + (-1.0);
    float _756 = dot(vec2(_754, _755), vec2(_754, _755));
    float _4090 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _761 = sqrt(1.0 - (isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0))));
    float _771 = ((((_726.x * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _754) + ((((_612.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[15u].y);
    float _772 = ((((_726.y * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _755) + ((((_612.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[15u].y);
    float _775 = fma(_761, _236 * NORMAL.x, fma(_772, _243 * TANGENT.x, (_229 * _221) * _771));
    float _778 = fma(_761, _236 * NORMAL.y, fma(_772, _243 * TANGENT.y, (_229 * _222) * _771));
    float _781 = fma(_761, _236 * NORMAL.z, fma(_772, _243 * TANGENT.z, (_229 * _223) * _771));
    float _785 = inversesqrt(dot(vec3(_775, _778, _781), vec3(_775, _778, _781)));
    float _786 = _785 * _775;
    float _787 = _785 * _778;
    float _788 = _785 * _781;
    float _4101 = isnan(0.0) ? _713 : (isnan(_713) ? 0.0 : max(_713, 0.0));
    float _789 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
    float _4112 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _4123 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _4134 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _4145 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _793 = isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0));
    float _809 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _849 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _859 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _849);
    float _860 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _849);
    float _861 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _849);
    float _865 = inversesqrt(dot(vec3(_859, _860, _861), vec3(_859, _860, _861)));
    float _866 = _859 * _865;
    float _867 = _860 * _865;
    float _868 = _861 * _865;
    vec4 _873 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _875 = _873.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1047 = sqrt(((_859 * _859) + (_860 * _860)) + (_861 * _861));
        float _1053 = (cbMatDynParam._m0[5u].x * _1047) + cbMatDynParam._m0[5u].y;
        float _4156 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
        float _1058 = (cbMatDynParam._m0[5u].z * _1047) + cbMatDynParam._m0[5u].w;
        float _4167 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) - _1054)) + _1054) < ((_875 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _886 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _887 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _905 = fma(_788, cbSceneParam._m0[5u].z, fma(_787, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _786));
    float _908 = fma(_788, cbSceneParam._m0[6u].z, fma(_787, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _786));
    float _911 = fma(_788, cbSceneParam._m0[7u].z, fma(_787, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _786));
    uint _924 = uint(roundEven(NORMAL.w)) * 13u;
    uint _925 = _924 + 9u;
    uint _926 = _925 + uint(cbMatDynParam._m0[0u].w);
    float _932 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0)))) * cbInstanceData._m0[_926].x;
    float _933 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0)))) * cbInstanceData._m0[_926].y;
    float _934 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0)))) * cbInstanceData._m0[_926].z;
    float _4178 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _935 = isnan(1.0) ? _4178 : (isnan(_4178) ? 1.0 : min(_4178, 1.0));
    float _4189 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
    float _936 = isnan(1.0) ? _4189 : (isnan(_4189) ? 1.0 : min(_4189, 1.0));
    float _4200 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _937 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
    float _938 = 1.0 - _793;
    float _939 = _935 * _938;
    float _940 = _936 * _938;
    float _941 = _937 * _938;
    float _946 = (_935 + (-0.039999999105930328369140625)) * _793;
    float _947 = (_936 + (-0.039999999105930328369140625)) * _793;
    float _948 = (_937 + (-0.039999999105930328369140625)) * _793;
    float _949 = _946 + 0.039999999105930328369140625;
    float _951 = _947 + 0.039999999105930328369140625;
    float _952 = _948 + 0.039999999105930328369140625;
    vec4 _961 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _886, cbSceneParam._m0[86u].y * _887));
    float _964 = _961.x * TEXCOORD_5.w;
    float _965 = dot(vec3(_786, _787, _788), vec3(_866, _867, _868));
    float _968 = _965 * 2.0;
    float _972 = (_968 * _786) - _866;
    float _973 = (_968 * _787) - _867;
    float _974 = (_968 * _788) - _868;
    float _978 = abs(dot(vec3(_866, _867, _868), vec3(_786, _787, _788)));
    float _4211 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
    float _980 = sqrt(_789);
    float _993 = exp2((_980 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_980 * 3.0));
    float _999 = (1.0 - _993) * ((_980 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1000 = _993 * _980;
    float _1028 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1032 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1036 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1366;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1091 = fma(_1036, cbModelParam._m0[26u].z, fma(_1032, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1028));
        float _1095 = fma(_1036, cbModelParam._m0[27u].z, fma(_1032, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1028));
        float _1099 = fma(_1036, cbModelParam._m0[28u].z, fma(_1032, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1028));
        float _1124 = _1028 + _786;
        float _1125 = _1032 + _787;
        float _1126 = _1036 + _788;
        float _1136 = fma(_1126, cbModelParam._m0[26u].z, fma(_1125, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1124)) - _1091;
        float _1137 = fma(_1126, cbModelParam._m0[27u].z, fma(_1125, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1124)) - _1095;
        float _1138 = fma(_1126, cbModelParam._m0[28u].z, fma(_1125, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1124)) - _1099;
        float _1142 = inversesqrt(dot(vec3(_1136, _1137, _1138), vec3(_1136, _1137, _1138)));
        float _1155 = ((_1142 * _1136) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1091 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1156 = ((_1142 * _1137) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1095 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1157 = ((_1142 * _1138) / cbModelParam._m0[34u].z) + ((((((_1099 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1155, _1156, _1157), 0.0);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1155, _1156, _1157), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1155, _1156, _1157), 0.0);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1155, _1156, _1157), 0.0);
        float _1194 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1160.x + (-0.5));
        float _1196 = _1194 * (_1160.y + (-0.5));
        float _1197 = _1194 * (_1160.z + (-0.5));
        float _1204 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1167.x + (-0.5));
        float _1206 = _1204 * (_1167.y + (-0.5));
        float _1207 = _1204 * (_1167.z + (-0.5));
        float _1214 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1174.x + (-0.5));
        float _1216 = _1214 * (_1174.y + (-0.5));
        float _1217 = _1214 * (_1174.z + (-0.5));
        float _1224 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1225 = _1224 * (_1181.x + (-0.5));
        float _1226 = _1224 * (_1181.y + (-0.5));
        float _1227 = _1224 * (_1181.z + (-0.5));
        float _1228 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1229 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1230 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1231 = _1195 * 0.5;
        float _1232 = _1205 * 0.5;
        float _1233 = _1215 * 0.5;
        float _1234 = dot(vec3(_1231, _1232, _1233), vec3(_1231, _1232, _1233));
        float _1239 = (_1234 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1234);
        float _1248 = (dot(vec3(_786, _787, _788), vec3(_1239 * _1231, _1239 * _1232, _1239 * _1233)) + 1.0) * 0.5;
        float _4237 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1258 = sqrt(((_1232 * _1232) + (_1231 * _1231)) + (_1233 * _1233)) / (_1228 + 9.9999997473787516355514526367188e-06);
        float _4248 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _1260 = _1259 * 2.0;
        float _1264 = (1.0 - _1259) / (_1259 + 1.0);
        float _4259 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
        float _1274 = ((((1.0 - _1265) * (_1260 + 2.0)) * exp2(log2(isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * (_1260 + 1.0))) + _1265) * _1228;
        float _1275 = _1196 * 0.5;
        float _1276 = _1206 * 0.5;
        float _1277 = _1216 * 0.5;
        float _1278 = dot(vec3(_1275, _1276, _1277), vec3(_1275, _1276, _1277));
        float _1283 = (_1278 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1278);
        float _1291 = (dot(vec3(_786, _787, _788), vec3(_1283 * _1275, _1283 * _1276, _1283 * _1277)) + 1.0) * 0.5;
        float _4270 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1300 = sqrt(((_1276 * _1276) + (_1275 * _1275)) + (_1277 * _1277)) / (_1229 + 9.9999997473787516355514526367188e-06);
        float _4281 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0));
        float _1302 = _1301 * 2.0;
        float _1306 = (1.0 - _1301) / (_1301 + 1.0);
        float _4292 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0));
        float _1316 = ((((1.0 - _1307) * (_1302 + 2.0)) * exp2(log2(isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0))) * (_1302 + 1.0))) + _1307) * _1229;
        float _1317 = _1197 * 0.5;
        float _1318 = _1207 * 0.5;
        float _1319 = _1217 * 0.5;
        float _1320 = dot(vec3(_1317, _1318, _1319), vec3(_1317, _1318, _1319));
        float _1325 = (_1320 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1320);
        float _1333 = (dot(vec3(_786, _787, _788), vec3(_1325 * _1317, _1325 * _1318, _1325 * _1319)) + 1.0) * 0.5;
        float _4303 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1342 = sqrt(((_1318 * _1318) + (_1317 * _1317)) + (_1319 * _1319)) / (_1230 + 9.9999997473787516355514526367188e-06);
        float _4314 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
        float _1344 = _1343 * 2.0;
        float _1348 = (1.0 - _1343) / (_1343 + 1.0);
        float _4325 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0));
        float _1358 = ((((1.0 - _1349) * (_1344 + 2.0)) * exp2(log2(isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * (_1344 + 1.0))) + _1349) * _1230;
        _1366 = _1197;
        _1368 = _1196;
        _1369 = _1195;
        _1370 = _1207;
        _1371 = _1206;
        _1372 = _1205;
        _1373 = _1217;
        _1374 = _1216;
        _1375 = _1215;
        _1376 = _1230;
        _1377 = _1229;
        _1378 = _1228;
        _1379 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0)));
        _1380 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)));
        _1381 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)));
    }
    else
    {
        _1366 = _1367;
        _1368 = _1367;
        _1369 = _1367;
        _1370 = _1367;
        _1371 = _1367;
        _1372 = _1367;
        _1373 = _1367;
        _1374 = _1367;
        _1375 = _1367;
        _1376 = _1367;
        _1377 = _1367;
        _1378 = _1367;
        _1379 = 0.0;
        _1380 = 0.0;
        _1381 = 0.0;
    }
    float _1679;
    float _1680;
    float _1681;
    float _1682;
    float _1683;
    float _1684;
    float _1685;
    float _1686;
    float _1687;
    float _1688;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    float _1693;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1410 = fma(_1036, cbModelParam._m0[30u].z, fma(_1032, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1028));
        float _1414 = fma(_1036, cbModelParam._m0[31u].z, fma(_1032, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1028));
        float _1418 = fma(_1036, cbModelParam._m0[32u].z, fma(_1032, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1028));
        float _1441 = _1028 + _786;
        float _1442 = _1032 + _787;
        float _1443 = _1036 + _788;
        float _1453 = fma(_1443, cbModelParam._m0[30u].z, fma(_1442, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1441)) - _1410;
        float _1454 = fma(_1443, cbModelParam._m0[31u].z, fma(_1442, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1441)) - _1414;
        float _1455 = fma(_1443, cbModelParam._m0[32u].z, fma(_1442, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1441)) - _1418;
        float _1459 = inversesqrt(dot(vec3(_1453, _1454, _1455), vec3(_1453, _1454, _1455)));
        float _1472 = ((_1459 * _1453) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1410 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1473 = ((_1459 * _1454) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1414 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1474 = ((_1459 * _1455) / cbModelParam._m0[35u].z) + ((((((_1418 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1476 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1472, _1473, _1474), 0.0);
        vec4 _1483 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1472, _1473, _1474), 0.0);
        vec4 _1490 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1472, _1473, _1474), 0.0);
        vec4 _1497 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1472, _1473, _1474), 0.0);
        float _1509 = exp2((_1476.w + (-0.5)) * 20.0) * 2.0;
        float _1510 = _1509 * (_1476.x + (-0.5));
        float _1511 = _1509 * (_1476.y + (-0.5));
        float _1512 = _1509 * (_1476.z + (-0.5));
        float _1519 = exp2((_1483.w + (-0.5)) * 20.0) * 2.0;
        float _1520 = _1519 * (_1483.x + (-0.5));
        float _1521 = _1519 * (_1483.y + (-0.5));
        float _1522 = _1519 * (_1483.z + (-0.5));
        float _1529 = exp2((_1490.w + (-0.5)) * 20.0) * 2.0;
        float _1530 = _1529 * (_1490.x + (-0.5));
        float _1531 = _1529 * (_1490.y + (-0.5));
        float _1532 = _1529 * (_1490.z + (-0.5));
        float _1539 = exp2((_1497.w + (-0.5)) * 20.0) * 2.0;
        float _1540 = _1539 * (_1497.x + (-0.5));
        float _1541 = _1539 * (_1497.y + (-0.5));
        float _1542 = _1539 * (_1497.z + (-0.5));
        float _1543 = isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0));
        float _1544 = isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0));
        float _1545 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
        float _1546 = _1510 * 0.5;
        float _1547 = _1520 * 0.5;
        float _1548 = _1530 * 0.5;
        float _1549 = dot(vec3(_1546, _1547, _1548), vec3(_1546, _1547, _1548));
        float _1554 = (_1549 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1549);
        float _1562 = (dot(vec3(_786, _787, _788), vec3(_1554 * _1546, _1554 * _1547, _1554 * _1548)) + 1.0) * 0.5;
        float _4366 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
        float _1571 = sqrt(((_1547 * _1547) + (_1546 * _1546)) + (_1548 * _1548)) / (_1543 + 9.9999997473787516355514526367188e-06);
        float _4377 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1572 = isnan(1.0) ? _4377 : (isnan(_4377) ? 1.0 : min(_4377, 1.0));
        float _1573 = _1572 * 2.0;
        float _1577 = (1.0 - _1572) / (_1572 + 1.0);
        float _4388 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
        float _1578 = isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0));
        float _1587 = ((((1.0 - _1578) * (_1573 + 2.0)) * exp2(log2(isnan(1.0) ? _4366 : (isnan(_4366) ? 1.0 : min(_4366, 1.0))) * (_1573 + 1.0))) + _1578) * _1543;
        float _1588 = _1511 * 0.5;
        float _1589 = _1521 * 0.5;
        float _1590 = _1531 * 0.5;
        float _1591 = dot(vec3(_1588, _1589, _1590), vec3(_1588, _1589, _1590));
        float _1596 = (_1591 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1591);
        float _1604 = (dot(vec3(_786, _787, _788), vec3(_1596 * _1588, _1596 * _1589, _1596 * _1590)) + 1.0) * 0.5;
        float _4399 = isnan(0.0) ? _1604 : (isnan(_1604) ? 0.0 : max(_1604, 0.0));
        float _1613 = sqrt(((_1589 * _1589) + (_1588 * _1588)) + (_1590 * _1590)) / (_1544 + 9.9999997473787516355514526367188e-06);
        float _4410 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1614 = isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0));
        float _1615 = _1614 * 2.0;
        float _1619 = (1.0 - _1614) / (_1614 + 1.0);
        float _4421 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
        float _1620 = isnan(1.0) ? _4421 : (isnan(_4421) ? 1.0 : min(_4421, 1.0));
        float _1629 = ((((1.0 - _1620) * (_1615 + 2.0)) * exp2(log2(isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (_1615 + 1.0))) + _1620) * _1544;
        float _1630 = _1512 * 0.5;
        float _1631 = _1522 * 0.5;
        float _1632 = _1532 * 0.5;
        float _1633 = dot(vec3(_1630, _1631, _1632), vec3(_1630, _1631, _1632));
        float _1638 = (_1633 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1633);
        float _1646 = (dot(vec3(_786, _787, _788), vec3(_1638 * _1630, _1638 * _1631, _1638 * _1632)) + 1.0) * 0.5;
        float _4432 = isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0));
        float _1655 = sqrt(((_1631 * _1631) + (_1630 * _1630)) + (_1632 * _1632)) / (_1545 + 9.9999997473787516355514526367188e-06);
        float _4443 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
        float _1656 = isnan(1.0) ? _4443 : (isnan(_4443) ? 1.0 : min(_4443, 1.0));
        float _1657 = _1656 * 2.0;
        float _1661 = (1.0 - _1656) / (_1656 + 1.0);
        float _4454 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1662 = isnan(1.0) ? _4454 : (isnan(_4454) ? 1.0 : min(_4454, 1.0));
        float _1671 = ((((1.0 - _1662) * (_1657 + 2.0)) * exp2(log2(isnan(1.0) ? _4432 : (isnan(_4432) ? 1.0 : min(_4432, 1.0))) * (_1657 + 1.0))) + _1662) * _1545;
        _1679 = _1512;
        _1680 = _1511;
        _1681 = _1510;
        _1682 = _1522;
        _1683 = _1521;
        _1684 = _1520;
        _1685 = _1532;
        _1686 = _1531;
        _1687 = _1530;
        _1688 = _1545;
        _1689 = _1544;
        _1690 = _1543;
        _1691 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0)));
        _1692 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0)));
        _1693 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0)));
    }
    else
    {
        _1679 = _1367;
        _1680 = _1367;
        _1681 = _1367;
        _1682 = _1367;
        _1683 = _1367;
        _1684 = _1367;
        _1685 = _1367;
        _1686 = _1367;
        _1687 = _1367;
        _1688 = _1367;
        _1689 = _1367;
        _1690 = _1367;
        _1691 = 0.0;
        _1692 = 0.0;
        _1693 = 0.0;
    }
    float _1703 = (cbModelParam._m0[1u].x * (_1691 - _1379)) + _1379;
    float _1704 = (cbModelParam._m0[1u].x * (_1692 - _1380)) + _1380;
    float _1705 = (cbModelParam._m0[1u].x * (_1693 - _1381)) + _1381;
    float _1726 = fma(_1705, cbSceneParam._m0[89u].z, fma(_1704, cbSceneParam._m0[89u].y, _1703 * cbSceneParam._m0[89u].x));
    float _1729 = fma(_1705, cbSceneParam._m0[90u].z, fma(_1704, cbSceneParam._m0[90u].y, _1703 * cbSceneParam._m0[90u].x));
    float _1732 = fma(_1705, cbSceneParam._m0[91u].z, fma(_1704, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1703));
    float _1747 = _972 * 0.5;
    float _1748 = _973 * 0.5;
    float _1749 = _974 * 0.5;
    float _1750 = dot(vec4(_1747, _1748, _1749, 1.0), vec4(_1681, _1684, _1687, _1690));
    float _1753 = dot(vec4(_1747, _1748, _1749, 1.0), vec4(_1680, _1683, _1686, _1689));
    float _1756 = dot(vec4(_1747, _1748, _1749, 1.0), vec4(_1679, _1682, _1685, _1688));
    float _1790;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1763 = dot(vec4(_1747, _1748, _1749, 1.0), vec4(_1366, _1370, _1373, _1376));
        float _1767 = dot(vec4(_1747, _1748, _1749, 1.0), vec4(_1368, _1371, _1374, _1377));
        float _1771 = dot(vec4(_1747, _1748, _1749, 1.0), vec4(_1369, _1372, _1375, _1378));
        float _1778 = dot(vec4(cbModelParam._m0[39u]), vec4(_1747, _1748, _1749, 1.0));
        _1790 = dot(vec3(isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0)), isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0)), isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1778) ? 0.0 : (isnan(0.0) ? _1778 : max(0.0, _1778))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1790 = 1.0;
    }
    float _1801;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1792 = dot(vec4(cbModelParam._m0[40u]), vec4(_1747, _1748, _1749, 1.0));
        _1801 = dot(vec3(isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0)), isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0)), isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1792) ? 0.0 : (isnan(0.0) ? _1792 : max(0.0, _1792))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1801 = 1.0;
    }
    float _1805 = (_1801 * cbModelParam._m0[1u].x) + (_1790 * (1.0 - cbModelParam._m0[1u].x));
    float _1815 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _789);
    float _1816 = isnan(_1815) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1815 : min(cbModelParam._m0[25u].z, _1815));
    float _1896;
    float _1898;
    float _1900;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1863 = fma(_1036, cbModelParam._m0[13u].z, fma(_1032, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1028)) + cbModelParam._m0[13u].w;
        float _1867 = fma(_1036, cbModelParam._m0[14u].z, fma(_1032, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1028)) + cbModelParam._m0[14u].w;
        float _1871 = fma(_1036, cbModelParam._m0[15u].z, fma(_1032, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1028)) + cbModelParam._m0[15u].w;
        float _1874 = fma(_974, cbModelParam._m0[13u].z, fma(_973, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _972));
        float _1877 = fma(_974, cbModelParam._m0[14u].z, fma(_973, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _972));
        float _1880 = fma(_974, cbModelParam._m0[15u].z, fma(_973, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _972));
        float _1908;
        if (_1874 > 0.0)
        {
            _1908 = abs((1.0 - _1863) / _1874);
        }
        else
        {
            float frontier_phi_17_15_ladder;
            if (_1874 < 0.0)
            {
                frontier_phi_17_15_ladder = abs((_1863 + 1.0) / _1874);
            }
            else
            {
                frontier_phi_17_15_ladder = 5000.0;
            }
            _1908 = frontier_phi_17_15_ladder;
        }
        float _2081;
        if (_1877 > 0.0)
        {
            _2081 = abs((1.0 - _1867) / _1877);
        }
        else
        {
            float frontier_phi_26_22_ladder;
            if (_1877 < 0.0)
            {
                frontier_phi_26_22_ladder = abs((_1867 + 1.0) / _1877);
            }
            else
            {
                frontier_phi_26_22_ladder = 5000.0;
            }
            _2081 = frontier_phi_26_22_ladder;
        }
        float _2377;
        if (_1880 > 0.0)
        {
            _2377 = abs((1.0 - _1871) / _1880);
        }
        else
        {
            float frontier_phi_38_33_ladder;
            if (_1880 < 0.0)
            {
                frontier_phi_38_33_ladder = abs((_1871 + 1.0) / _1880);
            }
            else
            {
                frontier_phi_38_33_ladder = 5000.0;
            }
            _2377 = frontier_phi_38_33_ladder;
        }
        float _2379 = isnan(_2081) ? _1908 : (isnan(_1908) ? _2081 : min(_1908, _2081));
        float _2380 = isnan(_2377) ? _2379 : (isnan(_2379) ? _2377 : min(_2379, _2377));
        float _2384 = (_2380 * _1874) + _1863;
        float _2385 = (_2380 * _1877) + _1867;
        float _2386 = (_2380 * _1880) + _1871;
        float _2387 = _2380 * 9.9999997473787516355514526367188e-05;
        float _2389 = (-1.0) - _2387;
        float _2391 = _2387 + 1.0;
        float frontier_phi_16_38_ladder;
        float frontier_phi_16_38_ladder_1;
        float frontier_phi_16_38_ladder_2;
        if ((_2386 > _2391) || ((_2386 < _2389) || ((_2385 > _2391) || ((_2385 < _2389) || ((_2384 < _2389) || (_2384 > _2391))))))
        {
            frontier_phi_16_38_ladder = 0.0;
            frontier_phi_16_38_ladder_1 = 0.0;
            frontier_phi_16_38_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2531 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2386, cbModelParam._m0[9u].z, fma(_2385, cbModelParam._m0[9u].y, _2384 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2386, cbModelParam._m0[10u].z, fma(_2385, cbModelParam._m0[10u].y, _2384 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2386, cbModelParam._m0[11u].z, fma(_2385, cbModelParam._m0[11u].y, _2384 * cbModelParam._m0[11u].x))), _1816);
            frontier_phi_16_38_ladder = _2531.z * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_1 = _2531.y * cbModelParam._m0[1u].y;
            frontier_phi_16_38_ladder_2 = _2531.x * cbModelParam._m0[1u].y;
        }
        _1896 = frontier_phi_16_38_ladder_2;
        _1898 = frontier_phi_16_38_ladder_1;
        _1900 = frontier_phi_16_38_ladder;
    }
    else
    {
        vec4 _1884 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_972, _973, _974), _1816);
        _1896 = _1884.x * cbModelParam._m0[1u].y;
        _1898 = _1884.y * cbModelParam._m0[1u].y;
        _1900 = _1884.z * cbModelParam._m0[1u].y;
    }
    float _1904 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _789);
    float _1905 = isnan(_1904) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1904 : min(cbModelParam._m0[25u].w, _1904));
    float _1996;
    float _1998;
    float _2000;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1960 = fma(_1036, cbModelParam._m0[21u].z, fma(_1032, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1028)) + cbModelParam._m0[21u].w;
        float _1964 = fma(_1036, cbModelParam._m0[22u].z, fma(_1032, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1028)) + cbModelParam._m0[22u].w;
        float _1968 = fma(_1036, cbModelParam._m0[23u].z, fma(_1032, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1028)) + cbModelParam._m0[23u].w;
        float _1971 = fma(_974, cbModelParam._m0[21u].z, fma(_973, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _972));
        float _1974 = fma(_974, cbModelParam._m0[22u].z, fma(_973, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _972));
        float _1977 = fma(_974, cbModelParam._m0[23u].z, fma(_973, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _972));
        float _2086;
        if (_1971 > 0.0)
        {
            _2086 = abs((1.0 - _1960) / _1971);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1971 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1960 + 1.0) / _1971);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2086 = frontier_phi_28_24_ladder;
        }
        float _2404;
        if (_1974 > 0.0)
        {
            _2404 = abs((1.0 - _1964) / _1974);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1974 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1964 + 1.0) / _1974);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2404 = frontier_phi_40_35_ladder;
        }
        float _2742;
        if (_1977 > 0.0)
        {
            _2742 = abs((1.0 - _1968) / _1977);
        }
        else
        {
            float frontier_phi_50_47_ladder;
            if (_1977 < 0.0)
            {
                frontier_phi_50_47_ladder = abs((_1968 + 1.0) / _1977);
            }
            else
            {
                frontier_phi_50_47_ladder = 5000.0;
            }
            _2742 = frontier_phi_50_47_ladder;
        }
        float _2744 = isnan(_2404) ? _2086 : (isnan(_2086) ? _2404 : min(_2086, _2404));
        float _2745 = isnan(_2742) ? _2744 : (isnan(_2744) ? _2742 : min(_2744, _2742));
        float _2749 = (_2745 * _1971) + _1960;
        float _2750 = (_2745 * _1974) + _1964;
        float _2751 = (_2745 * _1977) + _1968;
        float _2752 = _2745 * 9.9999997473787516355514526367188e-05;
        float _2753 = (-1.0) - _2752;
        float _2755 = _2752 + 1.0;
        float frontier_phi_25_50_ladder;
        float frontier_phi_25_50_ladder_1;
        float frontier_phi_25_50_ladder_2;
        if ((_2751 > _2755) || ((_2751 < _2753) || ((_2750 > _2755) || ((_2750 < _2753) || ((_2749 < _2753) || (_2749 > _2755))))))
        {
            frontier_phi_25_50_ladder = 0.0;
            frontier_phi_25_50_ladder_1 = 0.0;
            frontier_phi_25_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2873 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2751, cbModelParam._m0[17u].z, fma(_2750, cbModelParam._m0[17u].y, _2749 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2751, cbModelParam._m0[18u].z, fma(_2750, cbModelParam._m0[18u].y, _2749 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2751, cbModelParam._m0[19u].z, fma(_2750, cbModelParam._m0[19u].y, _2749 * cbModelParam._m0[19u].x))), _1905);
            frontier_phi_25_50_ladder = _2873.z * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_1 = _2873.y * cbModelParam._m0[1u].z;
            frontier_phi_25_50_ladder_2 = _2873.x * cbModelParam._m0[1u].z;
        }
        _1996 = frontier_phi_25_50_ladder_2;
        _1998 = frontier_phi_25_50_ladder_1;
        _2000 = frontier_phi_25_50_ladder;
    }
    else
    {
        vec4 _1980 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_972, _973, _974), _1905);
        _1996 = _1980.x * cbModelParam._m0[1u].z;
        _1998 = _1980.y * cbModelParam._m0[1u].z;
        _2000 = _1980.z * cbModelParam._m0[1u].z;
    }
    float _2013 = (((_999 * _949) + _1000) * _964) * ((cbModelParam._m0[1u].w * (_1996 - _1896)) + _1896);
    float _2015 = (((_999 * _951) + _1000) * _964) * ((cbModelParam._m0[1u].w * (_1998 - _1898)) + _1898);
    float _2017 = (((_999 * _952) + _1000) * _964) * ((cbModelParam._m0[1u].w * (_2000 - _1900)) + _1900);
    float _2020 = fma(_2017, cbSceneParam._m0[89u].z, fma(_2015, cbSceneParam._m0[89u].y, _2013 * cbSceneParam._m0[89u].x));
    float _2023 = fma(_2017, cbSceneParam._m0[90u].z, fma(_2015, cbSceneParam._m0[90u].y, _2013 * cbSceneParam._m0[90u].x));
    float _2026 = fma(_2017, cbSceneParam._m0[91u].z, fma(_2015, cbSceneParam._m0[91u].y, _2013 * cbSceneParam._m0[91u].x));
    float _2060 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2064 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2068 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2072 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2073 = _2060 / _2072;
    float _2074 = _2064 / _2072;
    float _2075 = _2068 / _2072;
    float _2222;
    float _2223;
    float _2224;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2102 = ((uint(_2075 > cbSceneParam._m0[59u].y) + uint(_2075 > cbSceneParam._m0[59u].x)) + uint(_2075 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2103 = _2102 + 43u;
        uint _2111 = _2102 + 44u;
        uint _2119 = _2102 + 45u;
        uint _2127 = _2102 + 46u;
        float _2138 = fma(_2072, cbSceneParam._m0[_2103].w, fma(_2068, cbSceneParam._m0[_2103].z, fma(_2064, cbSceneParam._m0[_2103].y, _2060 * cbSceneParam._m0[_2103].x)));
        float _2142 = fma(_2072, cbSceneParam._m0[_2111].w, fma(_2068, cbSceneParam._m0[_2111].z, fma(_2064, cbSceneParam._m0[_2111].y, _2060 * cbSceneParam._m0[_2111].x)));
        float _2150 = fma(_2072, cbSceneParam._m0[_2127].w, fma(_2068, cbSceneParam._m0[_2127].z, fma(_2064, cbSceneParam._m0[_2127].y, _2060 * cbSceneParam._m0[_2127].x)));
        float _2155 = cbSceneParam._m0[33u].z * _2150;
        float _2157 = cbSceneParam._m0[33u].w * _2150;
        float _2160 = fma(_2072, cbSceneParam._m0[_2119].w, fma(_2068, cbSceneParam._m0[_2119].z, fma(_2064, cbSceneParam._m0[_2119].y, _2060 * cbSceneParam._m0[_2119].x))) / _2150;
        float _2208 = (cbSceneParam._m0[33u].x - sqrt(((_2074 * _2074) + (_2073 * _2073)) + (_2075 * _2075))) * cbSceneParam._m0[33u].y;
        float _4580 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
        float _2215 = (isnan(1.0) ? _4580 : (isnan(_4580) ? 1.0 : min(_4580, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2155 + _2138) / _2150, (_2157 + _2142) / _2150), _2160), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2157 + _2138) / _2150, (_2142 - _2155) / _2150), _2160), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2138 - _2155) / _2150, (_2142 - _2157) / _2150), _2160), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2138 - _2157) / _2150, (_2155 + _2142) / _2150), _2160), 0.0)).x), vec4(0.25)));
        _2222 = 1.0 - (_2215 * cbSceneParam._m0[34u].x);
        _2223 = 1.0 - (_2215 * cbSceneParam._m0[34u].y);
        _2224 = 1.0 - (_2215 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2222 = 1.0;
        _2223 = 1.0;
        _2224 = 1.0;
    }
    float _2288;
    float _2290;
    float _2292;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2276 = fma(_2072, cbSceneParam._m0[63u].w, fma(_2068, cbSceneParam._m0[63u].z, fma(_2064, cbSceneParam._m0[63u].y, _2060 * cbSceneParam._m0[63u].x)));
        float _2277 = fma(_2072, cbSceneParam._m0[60u].w, fma(_2068, cbSceneParam._m0[60u].z, fma(_2064, cbSceneParam._m0[60u].y, _2060 * cbSceneParam._m0[60u].x))) / _2276;
        float _2278 = fma(_2072, cbSceneParam._m0[61u].w, fma(_2068, cbSceneParam._m0[61u].z, fma(_2064, cbSceneParam._m0[61u].y, _2060 * cbSceneParam._m0[61u].x))) / _2276;
        float frontier_phi_37_36_ladder;
        float frontier_phi_37_36_ladder_1;
        float frontier_phi_37_36_ladder_2;
        if ((((_2277 >= cbSceneParam._m0[64u].x) && (_2278 >= cbSceneParam._m0[64u].y)) && (_2277 <= cbSceneParam._m0[64u].z)) && (_2278 <= cbSceneParam._m0[64u].w))
        {
            float _2417 = fma(_2072, cbSceneParam._m0[62u].w, fma(_2068, cbSceneParam._m0[62u].z, fma(_2064, cbSceneParam._m0[62u].y, _2060 * cbSceneParam._m0[62u].x))) / _2276;
            float _2421 = isnan(cbSceneParam._m0[41u].w) ? _2417 : (isnan(_2417) ? cbSceneParam._m0[41u].w : max(_2417, cbSceneParam._m0[41u].w));
            float _2464 = (cbSceneParam._m0[33u].x - sqrt(((_2074 * _2074) + (_2073 * _2073)) + (_2075 * _2075))) * cbSceneParam._m0[33u].y;
            float _4596 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
            float _2471 = (isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2277, cbSceneParam._m0[33u].w + _2278), _2421), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2277, _2278 - cbSceneParam._m0[33u].z), _2421), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2277 - cbSceneParam._m0[33u].z, _2278 - cbSceneParam._m0[33u].w), _2421), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2277 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2278), _2421), 0.0)).x), vec4(0.25)));
            float _2475 = 1.0 - (_2471 * cbSceneParam._m0[34u].x);
            float _2476 = 1.0 - (_2471 * cbSceneParam._m0[34u].y);
            float _2477 = 1.0 - (_2471 * cbSceneParam._m0[34u].z);
            frontier_phi_37_36_ladder = isnan(_2477) ? _2224 : (isnan(_2224) ? _2477 : min(_2224, _2477));
            frontier_phi_37_36_ladder_1 = isnan(_2476) ? _2223 : (isnan(_2223) ? _2476 : min(_2223, _2476));
            frontier_phi_37_36_ladder_2 = isnan(_2475) ? _2222 : (isnan(_2222) ? _2475 : min(_2222, _2475));
        }
        else
        {
            frontier_phi_37_36_ladder = _2224;
            frontier_phi_37_36_ladder_1 = _2223;
            frontier_phi_37_36_ladder_2 = _2222;
        }
        _2288 = frontier_phi_37_36_ladder_2;
        _2290 = frontier_phi_37_36_ladder_1;
        _2292 = frontier_phi_37_36_ladder;
    }
    else
    {
        _2288 = _2222;
        _2290 = _2223;
        _2292 = _2224;
    }
    uvec4 _2297 = floatBitsToUint(cbInstanceData._m0[_924 + 5u]);
    uint _2299 = _2297.x * 14u;
    uint _2300 = _2299 + 13u;
    float _2307 = _964 + (-1.0);
    float _2312 = (cbLight._m0[_2300].x * _2307) + 1.0;
    float _2313 = (cbLight._m0[_2300].y * _2307) + 1.0;
    float _2314 = (cbLight._m0[_2300].z * _2307) + 1.0;
    float _2315 = (cbLight._m0[_2300].w * _2307) + 1.0;
    uint _2316 = _2299 + 5u;
    float _2322 = isnan(1.0) ? _2313 : (isnan(_2313) ? 1.0 : min(_2313, 1.0));
    uint _2326 = _2299 + 4u;
    float _2336 = isnan(1.0) ? _2312 : (isnan(_2312) ? 1.0 : min(_2312, 1.0));
    uint _2340 = _2299 | 1u;
    float _2351 = dot(vec3(cbLight._m0[_2299].xyz), vec3(_786, _787, _788));
    float _2354 = dot(vec3(cbLight._m0[_2340].xyz), vec3(_786, _787, _788));
    float _4632 = isnan(0.0) ? _2351 : (isnan(_2351) ? 0.0 : max(_2351, 0.0));
    float _4643 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
    float _2359 = (isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0))) * 0.3183098733425140380859375;
    float _2361 = (isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0))) * 0.3183098733425140380859375;
    float _2368 = ((cbLight._m0[_2316].x * _2322) * _2361) + (((cbLight._m0[_2326].x * _2288) * _2336) * _2359);
    float _2369 = ((_2322 * cbLight._m0[_2316].y) * _2361) + (((cbLight._m0[_2326].y * _2290) * _2336) * _2359);
    float _2370 = ((_2322 * cbLight._m0[_2316].z) * _2361) + (((cbLight._m0[_2326].z * _2292) * _2336) * _2359);
    uvec4 _2374 = floatBitsToUint(cbLight._m0[_2299 + 12u]);
    bool _2376 = _2374.x == 0u;
    float _2478;
    float _2480;
    float _2482;
    if (_2376)
    {
        _2478 = _2368;
        _2480 = _2369;
        _2482 = _2370;
    }
    else
    {
        uint _2486 = _2299 + 6u;
        float _2502 = (dot(vec3(cbLight._m0[_2299 + 2u].xyz), vec3(_786, _787, _788)) * 0.5) + 0.5;
        float _2503 = _2502 * _2502;
        float _4654 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
        float _2504 = isnan(1.0) ? _4654 : (isnan(_4654) ? 1.0 : min(_4654, 1.0));
        float _2505 = isnan(1.0) ? _2314 : (isnan(_2314) ? 1.0 : min(_2314, 1.0));
        _2478 = (((cbLight._m0[_2486].x * 0.3183098733425140380859375) * _2504) * _2505) + _2368;
        _2480 = (((cbLight._m0[_2486].y * 0.3183098733425140380859375) * _2504) * _2505) + _2369;
        _2482 = (((cbLight._m0[_2486].z * 0.3183098733425140380859375) * _2504) * _2505) + _2370;
    }
    bool _2485 = _2374.y == 0u;
    float _2540;
    float _2542;
    float _2544;
    if (_2485)
    {
        _2540 = _2478;
        _2542 = _2480;
        _2544 = _2482;
    }
    else
    {
        uint _2713 = _2299 + 7u;
        float _2729 = (dot(vec3(cbLight._m0[_2299 + 3u].xyz), vec3(_786, _787, _788)) * 0.5) + 0.5;
        float _2730 = _2729 * _2729;
        float _4670 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
        float _2731 = isnan(1.0) ? _4670 : (isnan(_4670) ? 1.0 : min(_4670, 1.0));
        float _2732 = isnan(1.0) ? _2315 : (isnan(_2315) ? 1.0 : min(_2315, 1.0));
        _2540 = (((cbLight._m0[_2713].x * 0.3183098733425140380859375) * _2731) * _2732) + _2478;
        _2542 = (((cbLight._m0[_2713].y * 0.3183098733425140380859375) * _2731) * _2732) + _2480;
        _2544 = (((cbLight._m0[_2713].z * 0.3183098733425140380859375) * _2731) * _2732) + _2482;
    }
    uint _2547 = _2299 + 8u;
    float _2560 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2299].w)) * _789) * 0.949999988079071044921875);
    float _2561 = _2560 * _2560;
    float _2562 = cbLight._m0[_2299].x + _866;
    float _2563 = cbLight._m0[_2299].y + _867;
    float _2564 = cbLight._m0[_2299].z + _868;
    float _2568 = inversesqrt(dot(vec3(_2562, _2563, _2564), vec3(_2562, _2563, _2564)));
    float _2569 = _2568 * _2562;
    float _2570 = _2568 * _2563;
    float _2571 = _2568 * _2564;
    float _2572 = dot(vec3(_786, _787, _788), vec3(cbLight._m0[_2299].xyz));
    float _4686 = isnan(0.0) ? _2572 : (isnan(_2572) ? 0.0 : max(_2572, 0.0));
    float _2575 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
    float _4697 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
    float _2576 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
    float _2577 = dot(vec3(_786, _787, _788), vec3(_2569, _2570, _2571));
    float _4708 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
    float _2580 = isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0));
    float _2581 = dot(vec3(cbLight._m0[_2299].xyz), vec3(_2569, _2570, _2571));
    float _4719 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0));
    float _2585 = _2561 * _2561;
    float _2589 = ((_2580 * _2580) * (_2585 + (-1.0))) + 1.0;
    float _2597 = exp2(log2(1.0 - (isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0)))) * 5.0);
    float _2598 = 0.959999978542327880859375 - _946;
    float _2600 = 0.959999978542327880859375 - _947;
    float _2601 = 0.959999978542327880859375 - _948;
    float _2608 = 1.0 - _2561;
    float _2619 = (0.5 / (((_2576 * ((_2575 * _2608) + _2561)) + 9.9999999392252902907785028219223e-09) + (((_2576 * _2608) + _2561) * _2575))) * _2575;
    float _4730 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
    float _2621 = (isnan(1.0) ? _4730 : (isnan(_4730) ? 1.0 : min(_4730, 1.0))) * (_2585 / ((_2589 * _2589) * 3.141590118408203125));
    uint _2635 = _2299 + 9u;
    float _2646 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2340].w)) * _789) * 0.949999988079071044921875);
    float _2647 = _2646 * _2646;
    float _2648 = cbLight._m0[_2340].x + _866;
    float _2649 = cbLight._m0[_2340].y + _867;
    float _2650 = cbLight._m0[_2340].z + _868;
    float _2654 = inversesqrt(dot(vec3(_2648, _2649, _2650), vec3(_2648, _2649, _2650)));
    float _2655 = _2654 * _2648;
    float _2656 = _2654 * _2649;
    float _2657 = _2654 * _2650;
    float _2658 = dot(vec3(_786, _787, _788), vec3(cbLight._m0[_2340].xyz));
    float _4741 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
    float _2661 = isnan(1.0) ? _4741 : (isnan(_4741) ? 1.0 : min(_4741, 1.0));
    float _2662 = dot(vec3(_786, _787, _788), vec3(_2655, _2656, _2657));
    float _4752 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
    float _2665 = isnan(1.0) ? _4752 : (isnan(_4752) ? 1.0 : min(_4752, 1.0));
    float _2666 = dot(vec3(cbLight._m0[_2340].xyz), vec3(_2655, _2656, _2657));
    float _4763 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
    float _2670 = _2647 * _2647;
    float _2674 = ((_2665 * _2665) * (_2670 + (-1.0))) + 1.0;
    float _2681 = exp2(log2(1.0 - (isnan(1.0) ? _4763 : (isnan(_4763) ? 1.0 : min(_4763, 1.0)))) * 5.0);
    float _2688 = 1.0 - _2647;
    float _2698 = (0.5 / (((_2576 * ((_2661 * _2688) + _2647)) + 9.9999999392252902907785028219223e-09) + (((_2576 * _2688) + _2647) * _2661))) * _2661;
    float _4774 = isnan(0.0) ? _2698 : (isnan(_2698) ? 0.0 : max(_2698, 0.0));
    float _2700 = (isnan(1.0) ? _4774 : (isnan(_4774) ? 1.0 : min(_4774, 1.0))) * (_2670 / ((_2674 * _2674) * 3.141590118408203125));
    float _2710 = (((((_2681 * _2598) + _949) * cbLight._m0[_2635].x) * _2700) * _2322) + ((((cbLight._m0[_2547].x * _2288) * ((_2597 * _2598) + _949)) * _2621) * _2336);
    float _2711 = (((((_2681 * _2600) + _951) * cbLight._m0[_2635].y) * _2700) * _2322) + ((((cbLight._m0[_2547].y * _2290) * ((_2597 * _2600) + _951)) * _2621) * _2336);
    float _2712 = (((((_2681 * _2601) + _952) * cbLight._m0[_2635].z) * _2700) * _2322) + ((((cbLight._m0[_2547].z * _2292) * ((_2597 * _2601) + _952)) * _2621) * _2336);
    float _2768;
    float _2770;
    float _2772;
    if (_2376)
    {
        _2768 = _2710;
        _2770 = _2711;
        _2772 = _2712;
    }
    else
    {
        uint _2774 = _2299 + 2u;
        uint _2778 = _2299 + 10u;
        float _2792 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2774].w)) * _789) * 0.949999988079071044921875);
        float _2793 = _2792 * _2792;
        float _2794 = cbLight._m0[_2774].x + _866;
        float _2795 = cbLight._m0[_2774].y + _867;
        float _2796 = cbLight._m0[_2774].z + _868;
        float _2800 = inversesqrt(dot(vec3(_2794, _2795, _2796), vec3(_2794, _2795, _2796)));
        float _2801 = _2800 * _2794;
        float _2802 = _2800 * _2795;
        float _2803 = _2800 * _2796;
        float _2804 = dot(vec3(_786, _787, _788), vec3(cbLight._m0[_2774].xyz));
        float _4785 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
        float _2807 = isnan(1.0) ? _4785 : (isnan(_4785) ? 1.0 : min(_4785, 1.0));
        float _2808 = dot(vec3(_786, _787, _788), vec3(_2801, _2802, _2803));
        float _4796 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
        float _2811 = isnan(1.0) ? _4796 : (isnan(_4796) ? 1.0 : min(_4796, 1.0));
        float _2812 = dot(vec3(cbLight._m0[_2774].xyz), vec3(_2801, _2802, _2803));
        float _4807 = isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0));
        float _2816 = _2793 * _2793;
        float _2820 = ((_2811 * _2811) * (_2816 + (-1.0))) + 1.0;
        float _2827 = exp2(log2(1.0 - (isnan(1.0) ? _4807 : (isnan(_4807) ? 1.0 : min(_4807, 1.0)))) * 5.0);
        float _2834 = 1.0 - _2793;
        float _2844 = (0.5 / (((_2576 * ((_2807 * _2834) + _2793)) + 9.9999999392252902907785028219223e-09) + (((_2576 * _2834) + _2793) * _2807))) * _2807;
        float _4818 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
        float _2846 = (isnan(1.0) ? _4818 : (isnan(_4818) ? 1.0 : min(_4818, 1.0))) * (_2816 / ((_2820 * _2820) * 3.141590118408203125));
        float _2847 = isnan(1.0) ? _2314 : (isnan(_2314) ? 1.0 : min(_2314, 1.0));
        _2768 = (((((_2827 * _2598) + _949) * cbLight._m0[_2778].x) * _2846) * _2847) + _2710;
        _2770 = (((((_2827 * _2600) + _951) * cbLight._m0[_2778].y) * _2846) * _2847) + _2711;
        _2772 = (((((_2827 * _2601) + _952) * cbLight._m0[_2778].z) * _2846) * _2847) + _2712;
    }
    float _2878;
    float _2880;
    float _2882;
    if (_2485)
    {
        _2878 = _2768;
        _2880 = _2770;
        _2882 = _2772;
    }
    else
    {
        uint _2889 = _2299 + 3u;
        uint _2893 = _2299 + 11u;
        float _2907 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2889].w)) * _789) * 0.949999988079071044921875);
        float _2908 = _2907 * _2907;
        float _2909 = cbLight._m0[_2889].x + _866;
        float _2910 = cbLight._m0[_2889].y + _867;
        float _2911 = cbLight._m0[_2889].z + _868;
        float _2915 = inversesqrt(dot(vec3(_2909, _2910, _2911), vec3(_2909, _2910, _2911)));
        float _2916 = _2915 * _2909;
        float _2917 = _2915 * _2910;
        float _2918 = _2915 * _2911;
        float _2919 = dot(vec3(_786, _787, _788), vec3(cbLight._m0[_2889].xyz));
        float _4834 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0));
        float _2922 = isnan(1.0) ? _4834 : (isnan(_4834) ? 1.0 : min(_4834, 1.0));
        float _2923 = dot(vec3(_786, _787, _788), vec3(_2916, _2917, _2918));
        float _4845 = isnan(0.0) ? _2923 : (isnan(_2923) ? 0.0 : max(_2923, 0.0));
        float _2926 = isnan(1.0) ? _4845 : (isnan(_4845) ? 1.0 : min(_4845, 1.0));
        float _2927 = dot(vec3(cbLight._m0[_2889].xyz), vec3(_2916, _2917, _2918));
        float _4856 = isnan(0.0) ? _2927 : (isnan(_2927) ? 0.0 : max(_2927, 0.0));
        float _2931 = _2908 * _2908;
        float _2935 = ((_2926 * _2926) * (_2931 + (-1.0))) + 1.0;
        float _2942 = exp2(log2(1.0 - (isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0)))) * 5.0);
        float _2949 = 1.0 - _2908;
        float _2959 = (0.5 / (((_2576 * ((_2922 * _2949) + _2908)) + 9.9999999392252902907785028219223e-09) + (((_2576 * _2949) + _2908) * _2922))) * _2922;
        float _4867 = isnan(0.0) ? _2959 : (isnan(_2959) ? 0.0 : max(_2959, 0.0));
        float _2961 = (isnan(1.0) ? _4867 : (isnan(_4867) ? 1.0 : min(_4867, 1.0))) * (_2931 / ((_2935 * _2935) * 3.141590118408203125));
        float _2962 = isnan(1.0) ? _2315 : (isnan(_2315) ? 1.0 : min(_2315, 1.0));
        _2878 = (((((_2942 * _2598) + _949) * cbLight._m0[_2893].x) * _2961) * _2962) + _2768;
        _2880 = (((((_2942 * _2600) + _951) * cbLight._m0[_2893].y) * _2961) * _2962) + _2770;
        _2882 = (((((_2942 * _2601) + _952) * cbLight._m0[_2893].z) * _2961) * _2962) + _2772;
    }
    float _3028;
    float _3030;
    float _3032;
    float _3034;
    float _3036;
    float _3038;
    if (_2297.y == 0u)
    {
        uvec4 _2983 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2984 = _2983.x;
        uint _2995 = uint((float(_2983.y) * floor(float(uint(cbSceneParam._m0[85u].y * _887) / _2984))) + floor(float(uint(cbSceneParam._m0[85u].x * _886) / _2984)));
        float _3005 = (log2(_2075 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _3006 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0));
        uint _3009 = uint(isnan(14.0) ? _3006 : (isnan(_3006) ? 14.0 : min(_3006, 14.0)));
        uvec4 _3014 = texelFetch(g_lightClusterGridBuffer, int(((_3009 << 2u) + (_2995 << 6u)) >> 2u));
        uint _3015 = _3014.x;
        uint _3016 = _2983.z;
        float _3095;
        float _3097;
        float _3099;
        float _3101;
        float _3103;
        float _3105;
        if (((((1u << ((_3016 >> 4u) & 15u)) + 4294967295u) & _3015) == 0u) || ((_3016 & 240u) == 0u))
        {
            _3095 = 0.0;
            _3097 = 0.0;
            _3099 = 0.0;
            _3101 = 0.0;
            _3103 = 0.0;
            _3105 = 0.0;
        }
        else
        {
            float _3096;
            float _3098;
            float _3100;
            float _3102;
            float _3104;
            float _3106;
            float _3248 = 0.0;
            float _3249 = 0.0;
            float _3250 = 0.0;
            float _3251 = 0.0;
            float _3252 = 0.0;
            float _3253 = 0.0;
            uint _3254 = 0u;
            uint _3263;
            bool _3264;
            for (;;)
            {
                _3263 = texelFetch(g_lightClassification, int((((_3009 << 5u) + (_2995 << 9u)) + (_3254 << 2u)) >> 2u)).x;
                _3264 = _3263 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_3264)
                {
                    frontier_phi_71_pred = _3253;
                    frontier_phi_71_pred_1 = _3252;
                    frontier_phi_71_pred_2 = _3251;
                    frontier_phi_71_pred_3 = _3250;
                    frontier_phi_71_pred_4 = _3249;
                    frontier_phi_71_pred_5 = _3248;
                }
                else
                {
                    float _3393;
                    float _3394;
                    float _3395;
                    float _3396;
                    float _3397;
                    float _3398;
                    uint _3399;
                    _3393 = _3248;
                    _3394 = _3249;
                    _3395 = _3250;
                    _3396 = _3251;
                    _3397 = _3252;
                    _3398 = _3253;
                    _3399 = _3263;
                    float _3320;
                    float _3321;
                    float _3322;
                    float _3323;
                    float _3324;
                    float _3325;
                    for (;;)
                    {
                        uint _3403 = uint(findLSB(_3399)) + (_3254 << 5u);
                        uint _3400 = (_3399 + 4294967295u) & _3399;
                        uint _3405 = _3403 * 48u;
                        vec4 _3419 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3405)).x, texelFetch(g_PointLightRenderingBuffer, int(_3405 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3405 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3405 + 3u)).x));
                        uint _3425 = (_3403 * 48u) + 4u;
                        vec4 _3438 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3425)).x, texelFetch(g_PointLightRenderingBuffer, int(_3425 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3425 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3425 + 3u)).x));
                        uint _3444 = (_3403 * 48u) + 8u;
                        vec3 _3455 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3444)).x, texelFetch(g_PointLightRenderingBuffer, int(_3444 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3444 + 2u)).x));
                        float _3459 = _3419.x - _2073;
                        float _3460 = _3419.y - _2074;
                        float _3461 = _3419.z - _2075;
                        float _3462 = dot(vec3(_3459, _3460, _3461), vec3(_3459, _3460, _3461));
                        float _3465 = inversesqrt(_3462);
                        float _3466 = _3465 * _3459;
                        float _3467 = _3465 * _3460;
                        float _3468 = _3465 * _3461;
                        float _3469 = dot(vec3(_905, _908, _911), vec3(_3466, _3467, _3468));
                        float _3474 = 1.0 - (_3462 * _3419.w);
                        float _4893 = isnan(0.0) ? _3474 : (isnan(_3474) ? 0.0 : max(_3474, 0.0));
                        float _3475 = isnan(1.0) ? _4893 : (isnan(_4893) ? 1.0 : min(_4893, 1.0));
                        float _3476 = sqrt(_3462) * _3438.w;
                        float _3479 = 1.39999997615814208984375 / (_3476 + 1.39999997615814208984375);
                        float _3480 = _3479 * _3479;
                        float _3483 = ((1.0 - _3480) * _3469) + _3480;
                        float _3486 = _3476 * _3476;
                        float _3490 = ((isnan(0.0) ? _3483 : (isnan(_3483) ? 0.0 : max(_3483, 0.0))) * _3475) / ((_3486 * 0.699999988079071044921875) + 1.0);
                        float _3494 = (-0.0) - _2073;
                        float _3495 = (-0.0) - _2074;
                        float _3496 = (-0.0) - _2075;
                        float _3500 = inversesqrt(dot(vec3(_3494, _3495, _3496), vec3(_3494, _3495, _3496)));
                        float _3501 = _3500 * _3494;
                        float _3502 = _3500 * _3495;
                        float _3503 = _3500 * _3496;
                        float _3510 = exp2(log2(1.0 / ((_3486 * 3.5) + 5.0)) * 0.25);
                        float _3511 = 1.0 - _980;
                        float _3518 = sqrt(1.0 - ((1.0 - (_3511 * _3511)) * (1.0 - (_3510 * _3510))));
                        float _3519 = _3518 * _3518;
                        float _3520 = _3519 * _3519;
                        float _3521 = _3501 + _3466;
                        float _3522 = _3502 + _3467;
                        float _3523 = _3503 + _3468;
                        float _3527 = inversesqrt(dot(vec3(_3521, _3522, _3523), vec3(_3521, _3522, _3523)));
                        float _3531 = dot(vec3(_905, _908, _911), vec3(_3501, _3502, _3503));
                        float _4909 = isnan(0.0) ? _3531 : (isnan(_3531) ? 0.0 : max(_3531, 0.0));
                        float _3534 = isnan(1.0) ? _4909 : (isnan(_4909) ? 1.0 : min(_4909, 1.0));
                        float _3535 = dot(vec3(_905, _908, _911), vec3(_3527 * _3521, _3527 * _3522, _3527 * _3523));
                        float _4920 = isnan(0.0) ? _3535 : (isnan(_3535) ? 0.0 : max(_3535, 0.0));
                        float _3538 = isnan(1.0) ? _4920 : (isnan(_4920) ? 1.0 : min(_4920, 1.0));
                        float _3542 = ((_3538 * _3538) * (_3520 + (-1.0))) + 1.0;
                        float _3543 = _3479 * _3519;
                        float _3544 = _3543 * _3543;
                        float _3547 = ((1.0 - _3544) * _3469) + _3544;
                        float _4931 = isnan(0.0) ? _3547 : (isnan(_3547) ? 0.0 : max(_3547, 0.0));
                        float _3548 = isnan(1.0) ? _4931 : (isnan(_4931) ? 1.0 : min(_4931, 1.0));
                        float _3549 = 1.0 - _3519;
                        float _3559 = (0.5 / (((_3548 * ((_3534 * _3549) + _3519)) + 9.9999999392252902907785028219223e-09) + (((_3548 * _3549) + _3519) * _3534))) * _3548;
                        float _4942 = isnan(0.0) ? _3559 : (isnan(_3559) ? 0.0 : max(_3559, 0.0));
                        float _3570 = (((_3520 * 3.1415927410125732421875) * (isnan(1.0) ? _4942 : (isnan(_4942) ? 1.0 : min(_4942, 1.0)))) / ((_3542 * _3542) * ((_3486 * 2.1991131305694580078125) + 3.141590118408203125))) * _3475;
                        _3323 = (_3490 * _3438.x) + _3396;
                        _3324 = (_3490 * _3438.y) + _3397;
                        _3325 = (_3490 * _3438.z) + _3398;
                        _3320 = (_3570 * _3455.x) + _3393;
                        _3321 = (_3570 * _3455.y) + _3394;
                        _3322 = (_3570 * _3455.z) + _3395;
                        if (_3400 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3393 = _3320;
                            _3394 = _3321;
                            _3395 = _3322;
                            _3396 = _3323;
                            _3397 = _3324;
                            _3398 = _3325;
                            _3399 = _3400;
                        }
                    }
                    frontier_phi_71_pred = _3325;
                    frontier_phi_71_pred_1 = _3324;
                    frontier_phi_71_pred_2 = _3323;
                    frontier_phi_71_pred_3 = _3322;
                    frontier_phi_71_pred_4 = _3321;
                    frontier_phi_71_pred_5 = _3320;
                }
                _3106 = frontier_phi_71_pred;
                _3104 = frontier_phi_71_pred_1;
                _3102 = frontier_phi_71_pred_2;
                _3100 = frontier_phi_71_pred_3;
                _3098 = frontier_phi_71_pred_4;
                _3096 = frontier_phi_71_pred_5;
                uint _3255 = _3254 + 1u;
                if (_3255 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3248 = _3096;
                    _3249 = _3098;
                    _3250 = _3100;
                    _3251 = _3102;
                    _3252 = _3104;
                    _3253 = _3106;
                    _3254 = _3255;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3095 = _3096;
            _3097 = _3098;
            _3099 = _3100;
            _3101 = _3102;
            _3103 = _3104;
            _3105 = _3106;
        }
        uvec4 _3109 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3110 = _3109.z;
        uint _3112 = (_3110 >> 8u) & 15u;
        float _3216;
        float _3218;
        float _3220;
        float _3222;
        float _3224;
        float _3226;
        if (((4294967295u << _3112) & _3015) == 0u)
        {
            _3216 = _3095;
            _3218 = _3097;
            _3220 = _3099;
            _3222 = _3101;
            _3224 = _3103;
            _3226 = _3105;
        }
        else
        {
            float _3241 = inversesqrt(dot(vec3(_2073, _2074, _2075), vec3(_2073, _2074, _2075)));
            float _3242 = _3241 * _2073;
            float _3243 = _3241 * _2074;
            float _3244 = _3241 * _2075;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_3112 < ((_3110 >> 12u) & 15u))
            {
                float _3217;
                float _3219;
                float _3221;
                float _3223;
                float _3225;
                float _3227;
                float _3376 = _3095;
                float _3377 = _3097;
                float _3378 = _3099;
                float _3379 = _3101;
                float _3380 = _3103;
                float _3381 = _3105;
                uint _3382 = _3112;
                uint _3391;
                bool _3392;
                for (;;)
                {
                    _3391 = texelFetch(g_lightClassification, int((((_3009 << 5u) + (_2995 << 9u)) + (_3382 << 2u)) >> 2u)).x;
                    _3392 = _3391 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_3392)
                    {
                        frontier_phi_82_pred = _3381;
                        frontier_phi_82_pred_1 = _3380;
                        frontier_phi_82_pred_2 = _3379;
                        frontier_phi_82_pred_3 = _3378;
                        frontier_phi_82_pred_4 = _3377;
                        frontier_phi_82_pred_5 = _3376;
                    }
                    else
                    {
                        float _3584;
                        float _3585;
                        float _3586;
                        float _3587;
                        float _3588;
                        float _3589;
                        float _3878;
                        float _3879;
                        float _3880;
                        float _3881;
                        float _3882;
                        float _3883;
                        float _3597 = _3376;
                        float _3598 = _3377;
                        float _3599 = _3378;
                        float _3600 = _3379;
                        float _3601 = _3380;
                        float _3602 = _3381;
                        uint _3603 = _3391;
                        uint _3604;
                        vec4 _3629;
                        float _3630;
                        vec4 _3645;
                        vec3 _3657;
                        vec4 _3672;
                        vec4 _3687;
                        float _3734;
                        bool _3735;
                        for (;;)
                        {
                            uint _3614 = ((_3382 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3603));
                            _3604 = (_3603 + 4294967295u) & _3603;
                            uint _3616 = _3614 * 40u;
                            _3629 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3616)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3616 + 3u)).x));
                            _3630 = _3629.w;
                            uint _3632 = (_3614 * 40u) + 4u;
                            _3645 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3632)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3632 + 3u)).x));
                            uint _3647 = (_3614 * 40u) + 8u;
                            _3657 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3647)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3647 + 2u)).x));
                            uint _3659 = (_3614 * 40u) + 16u;
                            _3672 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3659)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3659 + 3u)).x));
                            uint _3674 = (_3614 * 40u) + 20u;
                            _3687 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3674)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3674 + 3u)).x));
                            uint _3690 = (_3614 * 40u) + 24u;
                            vec4 _3703 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3690)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3690 + 3u)).x));
                            uint _3709 = (_3614 * 40u) + 28u;
                            vec4 _3722 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3709)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3709 + 3u)).x));
                            _3734 = fma(_2075, _3722.z, fma(_2074, _3722.y, _3722.x * _2073)) + _3722.w;
                            _3735 = !((fma(_2075, _3703.z, fma(_2074, _3703.y, _3703.x * _2073)) + _3703.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3735)
                            {
                                float _3762 = _3629.x - _2073;
                                float _3763 = _3629.y - _2074;
                                float _3764 = _3629.z - _2075;
                                float _3765 = dot(vec3(_3762, _3763, _3764), vec3(_3762, _3763, _3764));
                                float _3768 = inversesqrt(_3765);
                                float _3769 = _3768 * _3762;
                                float _3770 = _3768 * _3763;
                                float _3771 = _3768 * _3764;
                                float _3775 = 1.0 - (_3765 / (_3630 * _3630));
                                float _4953 = isnan(0.0) ? _3775 : (isnan(_3775) ? 0.0 : max(_3775, 0.0));
                                float _3776 = isnan(1.0) ? _4953 : (isnan(_4953) ? 1.0 : min(_4953, 1.0));
                                float _3780 = sqrt(_3765) * _3645.w;
                                float _3782 = 1.39999997615814208984375 / (_3780 + 1.39999997615814208984375);
                                float _3783 = _3782 * _3782;
                                float _3786 = ((1.0 - _3783) * dot(vec3(_3769, _3770, _3771), vec3(_905, _908, _911))) + _3783;
                                float _3789 = _3780 * _3780;
                                float _3793 = (fma(_2075, _3672.z, fma(_2074, _3672.y, _3672.x * _2073)) + _3672.w) / _3734;
                                float _3794 = (fma(_2075, _3687.z, fma(_2074, _3687.y, _3687.x * _2073)) + _3687.w) / _3734;
                                float _3798 = 1.0 - dot(vec2(_3793, _3794), vec2(_3793, _3794));
                                float _4969 = isnan(0.0) ? _3798 : (isnan(_3798) ? 0.0 : max(_3798, 0.0));
                                float _3799 = isnan(1.0) ? _4969 : (isnan(_4969) ? 1.0 : min(_4969, 1.0));
                                float _3800 = _3799 * (((isnan(0.0) ? _3786 : (isnan(_3786) ? 0.0 : max(_3786, 0.0))) * _3776) / ((_3789 * 0.699999988079071044921875) + 1.0));
                                float _3812 = exp2(log2(1.0 / ((_3789 * 3.5) + 5.0)) * 0.25);
                                float _3813 = 1.0 - _980;
                                float _3820 = sqrt(1.0 - ((1.0 - (_3813 * _3813)) * (1.0 - (_3812 * _3812))));
                                float _3821 = _3820 * _3820;
                                float _3822 = _3821 * _3821;
                                float _3823 = _3769 - _3242;
                                float _3824 = _3770 - _3243;
                                float _3825 = _3771 - _3244;
                                float _3829 = inversesqrt(dot(vec3(_3823, _3824, _3825), vec3(_3823, _3824, _3825)));
                                float _3833 = dot(vec3(_905, _908, _911), vec3((-0.0) - _3242, (-0.0) - _3243, (-0.0) - _3244));
                                float _4980 = isnan(0.0) ? _3833 : (isnan(_3833) ? 0.0 : max(_3833, 0.0));
                                float _3836 = isnan(1.0) ? _4980 : (isnan(_4980) ? 1.0 : min(_4980, 1.0));
                                float _3837 = dot(vec3(_905, _908, _911), vec3(_3829 * _3823, _3829 * _3824, _3829 * _3825));
                                float _4991 = isnan(0.0) ? _3837 : (isnan(_3837) ? 0.0 : max(_3837, 0.0));
                                float _3840 = isnan(1.0) ? _4991 : (isnan(_4991) ? 1.0 : min(_4991, 1.0));
                                float _3844 = ((_3840 * _3840) * (_3822 + (-1.0))) + 1.0;
                                float _3845 = _3782 * _3821;
                                float _3846 = _3845 * _3845;
                                float _3852 = ((1.0 - _3846) * dot(vec3(_905, _908, _911), vec3(_3769, _3770, _3771))) + _3846;
                                float _5002 = isnan(0.0) ? _3852 : (isnan(_3852) ? 0.0 : max(_3852, 0.0));
                                float _3853 = isnan(1.0) ? _5002 : (isnan(_5002) ? 1.0 : min(_5002, 1.0));
                                float _3854 = 1.0 - _3821;
                                float _3864 = (0.5 / (((_3853 * ((_3836 * _3854) + _3821)) + 9.9999999392252902907785028219223e-09) + (((_3853 * _3854) + _3821) * _3836))) * _3853;
                                float _5013 = isnan(0.0) ? _3864 : (isnan(_3864) ? 0.0 : max(_3864, 0.0));
                                float _3874 = (_3799 * _3776) * (((_3822 * 3.1415927410125732421875) * (isnan(1.0) ? _5013 : (isnan(_5013) ? 1.0 : min(_5013, 1.0)))) / ((_3844 * _3844) * ((_3789 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3800 * _3645.z;
                                frontier_phi_88_pred_1 = _3800 * _3645.y;
                                frontier_phi_88_pred_2 = _3800 * _3645.x;
                                frontier_phi_88_pred_3 = _3874 * _3657.z;
                                frontier_phi_88_pred_4 = _3874 * _3657.y;
                                frontier_phi_88_pred_5 = _3874 * _3657.x;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3883 = frontier_phi_88_pred;
                            _3882 = frontier_phi_88_pred_1;
                            _3881 = frontier_phi_88_pred_2;
                            _3880 = frontier_phi_88_pred_3;
                            _3879 = frontier_phi_88_pred_4;
                            _3878 = frontier_phi_88_pred_5;
                            _3587 = _3881 + _3600;
                            _3588 = _3882 + _3601;
                            _3589 = _3883 + _3602;
                            _3584 = _3878 + _3597;
                            _3585 = _3879 + _3598;
                            _3586 = _3880 + _3599;
                            if (_3604 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3597 = _3584;
                                _3598 = _3585;
                                _3599 = _3586;
                                _3600 = _3587;
                                _3601 = _3588;
                                _3602 = _3589;
                                _3603 = _3604;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _3589;
                        frontier_phi_82_pred_1 = _3588;
                        frontier_phi_82_pred_2 = _3587;
                        frontier_phi_82_pred_3 = _3586;
                        frontier_phi_82_pred_4 = _3585;
                        frontier_phi_82_pred_5 = _3584;
                    }
                    _3227 = frontier_phi_82_pred;
                    _3225 = frontier_phi_82_pred_1;
                    _3223 = frontier_phi_82_pred_2;
                    _3221 = frontier_phi_82_pred_3;
                    _3219 = frontier_phi_82_pred_4;
                    _3217 = frontier_phi_82_pred_5;
                    uint _3383 = _3382 + 1u;
                    if (_3383 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3376 = _3217;
                        _3377 = _3219;
                        _3378 = _3221;
                        _3379 = _3223;
                        _3380 = _3225;
                        _3381 = _3227;
                        _3382 = _3383;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _3223;
                frontier_phi_63_64_ladder_1 = _3227;
                frontier_phi_63_64_ladder_2 = _3225;
                frontier_phi_63_64_ladder_3 = _3221;
                frontier_phi_63_64_ladder_4 = _3219;
                frontier_phi_63_64_ladder_5 = _3217;
            }
            else
            {
                frontier_phi_63_64_ladder = _3101;
                frontier_phi_63_64_ladder_1 = _3105;
                frontier_phi_63_64_ladder_2 = _3103;
                frontier_phi_63_64_ladder_3 = _3099;
                frontier_phi_63_64_ladder_4 = _3097;
                frontier_phi_63_64_ladder_5 = _3095;
            }
            _3216 = frontier_phi_63_64_ladder_5;
            _3218 = frontier_phi_63_64_ladder_4;
            _3220 = frontier_phi_63_64_ladder_3;
            _3222 = frontier_phi_63_64_ladder;
            _3224 = frontier_phi_63_64_ladder_2;
            _3226 = frontier_phi_63_64_ladder_1;
        }
        float _3231 = isnan(1.0) ? _964 : (isnan(_964) ? 1.0 : min(_964, 1.0));
        _3028 = (_3231 * _3222) + _2540;
        _3030 = (_3231 * _3224) + _2542;
        _3032 = (_3231 * _3226) + _2544;
        _3034 = ((_3216 * _949) * _3231) + _2878;
        _3036 = ((_3218 * _951) * _3231) + _2880;
        _3038 = ((_3220 * _952) * _3231) + _2882;
    }
    else
    {
        _3028 = _2540;
        _3030 = _2542;
        _3032 = _2544;
        _3034 = _2878;
        _3036 = _2880;
        _3038 = _2882;
    }
    float _5029 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
    float _5040 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
    float _5051 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
    float _3055 = ((isnan(1.0) ? _5029 : (isnan(_5029) ? 1.0 : min(_5029, 1.0))) * (_3028 + ((isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))) * _964))) + ((_3034 + ((isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0))) * _1805)) * cbPerFrame._m0[3u].x);
    float _3056 = ((isnan(1.0) ? _5040 : (isnan(_5040) ? 1.0 : min(_5040, 1.0))) * (_3030 + ((isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0))) * _964))) + ((_3036 + ((isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0))) * _1805)) * cbPerFrame._m0[3u].x);
    float _3057 = ((isnan(1.0) ? _5051 : (isnan(_5051) ? 1.0 : min(_5051, 1.0))) * (_3032 + ((isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0))) * _964))) + ((_3038 + ((isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0))) * _1805)) * cbPerFrame._m0[3u].x);
    uint _3058 = _924 + 6u;
    float _3066 = _886 / cbSceneParam._m0[86u].x;
    float _3067 = _887 / cbSceneParam._m0[86u].y;
    vec4 _3081 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3066, _3067, (log2((isnan(cbSceneParam._m0[77u].w) ? _809 : (isnan(_809) ? cbSceneParam._m0[77u].w : min(_809, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3083 = _3081.x;
    float _3084 = _3081.y;
    float _3085 = _3081.z;
    float _3086 = _3081.w;
    float _3158;
    float _3160;
    float _3162;
    float _3164;
    if (_809 > cbSceneParam._m0[78u].w)
    {
        float _3120 = isnan(_809) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _809 : min(cbSceneParam._m0[80u].w, _809));
        float _3121 = _3120 / _809;
        float _3132 = _3121 * _859;
        float _3133 = _860 * _3121;
        float _3134 = (-0.0) - _3133;
        float _3136 = _3121 * _861;
        float _3138 = (cbSceneParam._m0[77u].w * _3134) / _3120;
        float _3139 = _3138 + cbSceneParam._m0[79u].w;
        float _3140 = cbSceneParam._m0[79u].w - _3133;
        float _3146 = sqrt(((_3132 * _3132) + (_3133 * _3133)) + (_3136 * _3136));
        float _3149 = (1.0 - (cbSceneParam._m0[77u].w / _3120)) * _3146;
        float _3154 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3156 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3333;
        if (abs((_3134 - _3138) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3333 = ((((_3139 > 0.0) ? exp2(_3154 * _3139) : (2.0 - exp2(_3156 * _3139))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3149;
        }
        else
        {
            float _3277 = 1.0 / cbSceneParam._m0[80u].x;
            float _3278 = isnan(_3140) ? _3139 : (isnan(_3139) ? _3140 : max(_3139, _3140));
            float _3279 = isnan(_3140) ? _3139 : (isnan(_3139) ? _3140 : min(_3139, _3140));
            float _3288 = isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : min(_3278, 0.0));
            float _3289 = isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : min(_3279, 0.0));
            _3333 = ((abs(_3146 / _3134) * cbSceneParam._m0[80u].y) * ((((_3288 - _3289) * 2.0) - ((exp2(_3154 * (isnan(0.0) ? _3278 : (isnan(_3278) ? 0.0 : max(_3278, 0.0)))) - exp2(_3154 * (isnan(0.0) ? _3279 : (isnan(_3279) ? 0.0 : max(_3279, 0.0))))) * _3277)) - ((exp2(_3156 * _3288) - exp2(_3156 * _3289)) * _3277))) + (_3149 * cbSceneParam._m0[80u].z);
        }
        vec4 _3335 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3066, _3067, 1.0), 0.0);
        float _3344 = exp2((_3333 * (-1.44269502162933349609375)) * (1.0 - _3335.w));
        float _3345 = log2(_3344);
        float _3361 = log2(_3086);
        _3158 = (exp2(_3361 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3345 * cbSceneParam._m0[78u].x)) * _3335.x) / cbSceneParam._m0[78u].x)) + _3083;
        _3160 = (exp2(_3361 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3345 * cbSceneParam._m0[78u].y)) * _3335.y) / cbSceneParam._m0[78u].y)) + _3084;
        _3162 = (exp2(_3361 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3345 * cbSceneParam._m0[78u].z)) * _3335.z) / cbSceneParam._m0[78u].z)) + _3085;
        _3164 = _3344 * _3086;
    }
    else
    {
        _3158 = _3083;
        _3160 = _3084;
        _3162 = _3085;
        _3164 = _3086;
    }
    bool _3371;
    vec4 _3174;
    vec4 _3196;
    float _3198;
    float _3202;
    float _3203;
    float _3204;
    float _3205;
    bool _3215;
    for (;;)
    {
        _3174 = cbMatDynParam._m0[0u];
        float _3176 = roundEven(_3174.y);
        bool _3177 = _3176 == 3.0;
        float _3178 = log2(_3164);
        float _3185 = exp2(_3178 * cbSceneParam._m0[78u].x) * _3055;
        float _3186 = exp2(_3178 * cbSceneParam._m0[78u].y) * _3056;
        float _3187 = exp2(_3178 * cbSceneParam._m0[78u].z) * _3057;
        float _3194 = _875 + (-0.5);
        _3196 = cbMtdParam._m0[1u];
        _3198 = _3196.y * _3194;
        float _3201 = (_3176 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3202 = _3201 * (_3177 ? _3185 : (_3185 + (cbSceneParam._m0[72u].w * _3158)));
        _3203 = _3201 * (_3177 ? _3186 : (_3186 + (cbSceneParam._m0[72u].w * _3160)));
        _3204 = _3201 * (_3177 ? _3187 : (_3187 + (cbSceneParam._m0[72u].w * _3162)));
        _3205 = _3194 * 0.999000012874603271484375;
        _3215 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3215)
        {
            if ((cbInstanceData._m0[_924 + 7u].x + _3205) < 0.5)
            {
                _3371 = true;
                break;
            }
        }
        uint _3312 = _925 + uint(_3174.w);
        if ((cbInstanceData._m0[_3312].w < 1.0) && ((cbInstanceData._m0[_3312].w + _3205) < 0.5))
        {
            _3371 = true;
            break;
        }
        if ((_3198 + 1.0) < _3196.x)
        {
            _3371 = true;
            break;
        }
        _3371 = false;
        break;
    }
    float _3575;
    if (_3371)
    {
        discard_state = true;
        _3575 = 0.0;
    }
    else
    {
        _3575 = cbInstanceData._m0[_3058].w;
    }
    SV_Target.x = _3202;
    SV_Target.y = _3203;
    SV_Target.z = _3204;
    SV_Target.w = _3575;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3058].w;
    discard_exit();
}


