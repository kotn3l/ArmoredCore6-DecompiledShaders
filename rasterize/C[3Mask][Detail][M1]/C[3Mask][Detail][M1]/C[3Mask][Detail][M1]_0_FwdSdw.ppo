#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[20];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_19;
layout(set = 0, binding = 11) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 12) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_20;
layout(set = 0, binding = 13) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_3;
layout(set = 0, binding = 14) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_5;
layout(set = 0, binding = 15) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_6;
layout(set = 0, binding = 16) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_7;
layout(set = 0, binding = 17) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_8;
layout(set = 0, binding = 18) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_11;
layout(set = 0, binding = 3) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_12;
layout(set = 0, binding = 4) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_13;
layout(set = 0, binding = 5) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_14;
layout(set = 0, binding = 6) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_15;
layout(set = 0, binding = 7) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_16;
layout(set = 0, binding = 8) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_17;
layout(set = 0, binding = 9) uniform texture2D C_3Mask_Detail_M1_snp_0_Texture2D_18;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TEXCOORD;
layout(location = 5) in vec4 TEXCOORD_5;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1357;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _219 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _220 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _221 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _227 = inversesqrt(dot(vec3(_219, _220, _221), vec3(_219, _220, _221)));
    float _234 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _241 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _264 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _270 = _264.x * cbMtdParam._m0[10u].x;
    float _271 = _264.y * cbMtdParam._m0[10u].y;
    float _272 = _264.z * cbMtdParam._m0[10u].z;
    vec4 _290 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _340 = cbMtdParam._m0[18u].y * texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_3, SS_WrapLinear), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD.x) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD.y) + cbTextureTilingScale._m0[13u].w)).x;
    float _351 = ((cbMtdParam._m0[15u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].x * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].y * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).x) * 2.0) - _340)) + 1.0;
    float _3969 = isnan(0.0) ? _351 : (isnan(_351) ? 0.0 : max(_351, 0.0));
    float _352 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    float _359 = (_352 * ((_290.x * cbMtdParam._m0[11u].x) - _270)) + _270;
    float _360 = (_352 * ((_290.y * cbMtdParam._m0[11u].y) - _271)) + _271;
    float _361 = (_352 * ((_290.z * cbMtdParam._m0[11u].z) - _272)) + _272;
    vec4 _379 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_8, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[17u].x * TEXCOORD.x) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD.y) + cbTextureTilingScale._m0[17u].w));
    float _406 = ((cbMtdParam._m0[17u].w * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[19u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[19u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).y) * 2.0) - _340)) + 1.0;
    float _3980 = isnan(0.0) ? _406 : (isnan(_406) ? 0.0 : max(_406, 0.0));
    float _407 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _414 = (_407 * ((_379.x * cbMtdParam._m0[12u].x) - _359)) + _359;
    float _415 = (_407 * ((_379.y * cbMtdParam._m0[12u].y) - _360)) + _360;
    float _416 = (_407 * ((_379.z * cbMtdParam._m0[12u].z) - _361)) + _361;
    vec4 _433 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_11, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _458 = ((cbMtdParam._m0[18u].x * (-1.39999997615814208984375)) * (((1.0 - texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_0, SS_WrapLinear), vec2(((cbMtdParam._m0[18u].z * TEXCOORD.x) * cbTextureTilingScale._m0[0u].x) + cbTextureTilingScale._m0[0u].z, ((cbMtdParam._m0[18u].w * TEXCOORD.y) * cbTextureTilingScale._m0[0u].y) + cbTextureTilingScale._m0[0u].w)).z) * 2.0) - _340)) + 1.0;
    float _3991 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _459 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
    vec4 _487 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_13, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _495 = ((((_459 * ((_433.x * cbMtdParam._m0[13u].x) - _414)) + _414) * 4.55000019073486328125) * cbMtdParam._m0[9u].x) * _487.x;
    float _498 = ((((_459 * ((_433.y * cbMtdParam._m0[13u].y) - _415)) + _415) * 4.55000019073486328125) * cbMtdParam._m0[9u].y) * _487.y;
    float _501 = ((((_459 * ((_433.z * cbMtdParam._m0[13u].z) - _416)) + _416) * 4.55000019073486328125) * cbMtdParam._m0[9u].z) * _487.z;
    vec4 _521 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_20, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD.z) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD.w) + cbTextureTilingScale._m0[12u].w));
    float _550 = (TEXCOORD_5.x - ((cbMtdParam._m0[15u].w * (1.0 - TEXCOORD_5.x)) * (texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[18u].x * TEXCOORD.z) + cbTextureTilingScale._m0[18u].z, (cbTextureTilingScale._m0[18u].y * TEXCOORD.w) + cbTextureTilingScale._m0[18u].w)).x + 0.00999999977648258209228515625))) * (cbMtdParam._m0[15u].z + 1.0);
    float _4002 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _551 = isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0));
    float _558 = (_551 * ((_521.x * cbMtdParam._m0[14u].x) - _495)) + _495;
    float _559 = (_551 * ((_521.y * cbMtdParam._m0[14u].y) - _498)) + _498;
    float _560 = (_551 * ((_521.z * cbMtdParam._m0[14u].z) - _501)) + _501;
    vec4 _573 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD.x) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD.y) + cbTextureTilingScale._m0[5u].w));
    float _575 = _573.x;
    float _593 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_17, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD.x) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD.y) + cbTextureTilingScale._m0[8u].w)).x - _575) * _352) + _575;
    float _610 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD.x) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD.y) + cbTextureTilingScale._m0[9u].w)).x - _593) * _407) + _593;
    float _627 = ((texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_19, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD.x) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD.y) + cbTextureTilingScale._m0[10u].w)).x - _610) * _459) + _610;
    float _629 = _627 - (_627 * TEXCOORD_5.x);
    vec4 _642 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_12, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.z) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.w) + cbTextureTilingScale._m0[3u].w));
    vec4 _664 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_5, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD.x) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD.y) + cbTextureTilingScale._m0[14u].w));
    float _666 = _664.x;
    float _667 = _664.y;
    float _670 = cbMtdParam._m0[17u].y * _664.z;
    vec4 _682 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD.x) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD.y) + cbTextureTilingScale._m0[15u].w));
    float _691 = (((cbMtdParam._m0[17u].x * _682.z) - _670) * _352) + _670;
    vec4 _704 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_15, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _716 = (((cbMtdParam._m0[16u].w * _704.z) - _691) * _407) + _691;
    vec4 _729 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD.x) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD.y) + cbTextureTilingScale._m0[7u].w));
    float _738 = (((cbMtdParam._m0[16u].z * _729.z) - _716) * _459) + _716;
    float _743 = ((cbMtdParam._m0[16u].x * TEXCOORD_5.x) * ((_642.z * cbMtdParam._m0[17u].z) - _738)) + _738;
    vec4 _756 = texture(sampler2D(C_3Mask_Detail_M1_snp_0_Texture2D_7, SS_BumpMap), vec2((cbTextureTilingScale._m0[16u].x * TEXCOORD.x) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD.y) + cbTextureTilingScale._m0[16u].w));
    float _768 = ((_682.x - _666) * _352) + _666;
    float _769 = ((_682.y - _667) * _352) + _667;
    float _774 = ((_704.x - _768) * _407) + _768;
    float _775 = ((_704.y - _769) * _407) + _769;
    float _784 = ((((_729.x - _774) * _459) + _774) * 2.0) + (-1.0);
    float _785 = ((((_729.y - _775) * _459) + _775) * 2.0) + (-1.0);
    float _786 = dot(vec2(_784, _785), vec2(_784, _785));
    float _4013 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _791 = sqrt(1.0 - (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))));
    float _801 = ((((_756.x * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _784) + ((((_642.x * 2.0) + (-1.0)) * TEXCOORD_5.x) * cbMtdParam._m0[15u].y);
    float _802 = ((((_756.y * 2.0) + (-1.0)) * cbMtdParam._m0[16u].y) + _785) + ((((_642.y * 2.0) + (-1.0)) * TEXCOORD_5.y) * cbMtdParam._m0[15u].y);
    float _805 = fma(_791, _234 * NORMAL.x, fma(_802, _241 * TANGENT.x, (_227 * _219) * _801));
    float _808 = fma(_791, _234 * NORMAL.y, fma(_802, _241 * TANGENT.y, (_227 * _220) * _801));
    float _811 = fma(_791, _234 * NORMAL.z, fma(_802, _241 * TANGENT.z, (_227 * _221) * _801));
    float _815 = inversesqrt(dot(vec3(_805, _808, _811), vec3(_805, _808, _811)));
    float _816 = _815 * _805;
    float _817 = _815 * _808;
    float _818 = _815 * _811;
    float _4024 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _819 = isnan(1.0) ? _4024 : (isnan(_4024) ? 1.0 : min(_4024, 1.0));
    float _4035 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _4046 = isnan(0.0) ? _559 : (isnan(_559) ? 0.0 : max(_559, 0.0));
    float _4057 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
    float _4068 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _823 = isnan(1.0) ? _4068 : (isnan(_4068) ? 1.0 : min(_4068, 1.0));
    float _839 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _879 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _889 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _879);
    float _890 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _879);
    float _891 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _879);
    float _895 = inversesqrt(dot(vec3(_889, _890, _891), vec3(_889, _890, _891)));
    float _896 = _889 * _895;
    float _897 = _890 * _895;
    float _898 = _891 * _895;
    float _904 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _905 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _923 = fma(_818, cbSceneParam._m0[5u].z, fma(_817, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _816));
    float _926 = fma(_818, cbSceneParam._m0[6u].z, fma(_817, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _816));
    float _929 = fma(_818, cbSceneParam._m0[7u].z, fma(_817, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _816));
    uint _942 = uint(roundEven(NORMAL.w)) * 13u;
    uint _944 = (_942 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _950 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4035 : (isnan(_4035) ? 1.0 : min(_4035, 1.0)))) * cbInstanceData._m0[_944].x;
    float _951 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4046 : (isnan(_4046) ? 1.0 : min(_4046, 1.0)))) * cbInstanceData._m0[_944].y;
    float _952 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0)))) * cbInstanceData._m0[_944].z;
    float _4079 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _953 = isnan(1.0) ? _4079 : (isnan(_4079) ? 1.0 : min(_4079, 1.0));
    float _4090 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
    float _954 = isnan(1.0) ? _4090 : (isnan(_4090) ? 1.0 : min(_4090, 1.0));
    float _4101 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
    float _955 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
    float _956 = 1.0 - _823;
    float _957 = _953 * _956;
    float _958 = _954 * _956;
    float _959 = _955 * _956;
    float _964 = (_953 + (-0.039999999105930328369140625)) * _823;
    float _965 = (_954 + (-0.039999999105930328369140625)) * _823;
    float _966 = (_955 + (-0.039999999105930328369140625)) * _823;
    float _967 = _964 + 0.039999999105930328369140625;
    float _969 = _965 + 0.039999999105930328369140625;
    float _970 = _966 + 0.039999999105930328369140625;
    vec4 _979 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _904, cbSceneParam._m0[86u].y * _905));
    float _982 = _979.x * TEXCOORD_5.w;
    float _983 = dot(vec3(_816, _817, _818), vec3(_896, _897, _898));
    float _986 = _983 * 2.0;
    float _990 = (_986 * _816) - _896;
    float _991 = (_986 * _817) - _897;
    float _992 = (_986 * _818) - _898;
    float _996 = abs(dot(vec3(_896, _897, _898), vec3(_816, _817, _818)));
    float _4112 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
    float _998 = sqrt(_819);
    float _1011 = exp2((_998 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_998 * 3.0));
    float _1017 = (1.0 - _1011) * ((_998 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1018 = _1011 * _998;
    float _1046 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1050 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1054 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1356;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1081 = fma(_1054, cbModelParam._m0[26u].z, fma(_1050, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1046));
        float _1085 = fma(_1054, cbModelParam._m0[27u].z, fma(_1050, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1046));
        float _1089 = fma(_1054, cbModelParam._m0[28u].z, fma(_1050, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1046));
        float _1114 = _1046 + _816;
        float _1115 = _1050 + _817;
        float _1116 = _1054 + _818;
        float _1126 = fma(_1116, cbModelParam._m0[26u].z, fma(_1115, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1114)) - _1081;
        float _1127 = fma(_1116, cbModelParam._m0[27u].z, fma(_1115, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1114)) - _1085;
        float _1128 = fma(_1116, cbModelParam._m0[28u].z, fma(_1115, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1114)) - _1089;
        float _1132 = inversesqrt(dot(vec3(_1126, _1127, _1128), vec3(_1126, _1127, _1128)));
        float _1145 = ((_1132 * _1126) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1081 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1146 = ((_1132 * _1127) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1085 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1147 = ((_1132 * _1128) / cbModelParam._m0[34u].z) + ((((((_1089 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1150 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1157 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1164 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        vec4 _1171 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1145, _1146, _1147), 0.0);
        float _1184 = exp2((_1150.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1150.x + (-0.5));
        float _1186 = _1184 * (_1150.y + (-0.5));
        float _1187 = _1184 * (_1150.z + (-0.5));
        float _1194 = exp2((_1157.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1157.x + (-0.5));
        float _1196 = _1194 * (_1157.y + (-0.5));
        float _1197 = _1194 * (_1157.z + (-0.5));
        float _1204 = exp2((_1164.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1164.x + (-0.5));
        float _1206 = _1204 * (_1164.y + (-0.5));
        float _1207 = _1204 * (_1164.z + (-0.5));
        float _1214 = exp2((_1171.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1171.x + (-0.5));
        float _1216 = _1214 * (_1171.y + (-0.5));
        float _1217 = _1214 * (_1171.z + (-0.5));
        float _1218 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1219 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = _1185 * 0.5;
        float _1222 = _1195 * 0.5;
        float _1223 = _1205 * 0.5;
        float _1224 = dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223));
        float _1229 = (_1224 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1224);
        float _1238 = (dot(vec3(_816, _817, _818), vec3(_1229 * _1221, _1229 * _1222, _1229 * _1223)) + 1.0) * 0.5;
        float _4138 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1248 = sqrt(((_1222 * _1222) + (_1221 * _1221)) + (_1223 * _1223)) / (_1218 + 9.9999997473787516355514526367188e-06);
        float _4149 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
        float _1250 = _1249 * 2.0;
        float _1254 = (1.0 - _1249) / (_1249 + 1.0);
        float _4160 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
        float _1264 = ((((1.0 - _1255) * (_1250 + 2.0)) * exp2(log2(isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0))) * (_1250 + 1.0))) + _1255) * _1218;
        float _1265 = _1186 * 0.5;
        float _1266 = _1196 * 0.5;
        float _1267 = _1206 * 0.5;
        float _1268 = dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267));
        float _1273 = (_1268 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1268);
        float _1281 = (dot(vec3(_816, _817, _818), vec3(_1273 * _1265, _1273 * _1266, _1273 * _1267)) + 1.0) * 0.5;
        float _4171 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1290 = sqrt(((_1266 * _1266) + (_1265 * _1265)) + (_1267 * _1267)) / (_1219 + 9.9999997473787516355514526367188e-06);
        float _4182 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
        float _1292 = _1291 * 2.0;
        float _1296 = (1.0 - _1291) / (_1291 + 1.0);
        float _4193 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _1306 = ((((1.0 - _1297) * (_1292 + 2.0)) * exp2(log2(isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0))) * (_1292 + 1.0))) + _1297) * _1219;
        float _1307 = _1187 * 0.5;
        float _1308 = _1197 * 0.5;
        float _1309 = _1207 * 0.5;
        float _1310 = dot(vec3(_1307, _1308, _1309), vec3(_1307, _1308, _1309));
        float _1315 = (_1310 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1310);
        float _1323 = (dot(vec3(_816, _817, _818), vec3(_1315 * _1307, _1315 * _1308, _1315 * _1309)) + 1.0) * 0.5;
        float _4204 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1332 = sqrt(((_1308 * _1308) + (_1307 * _1307)) + (_1309 * _1309)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _4215 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0));
        float _1334 = _1333 * 2.0;
        float _1338 = (1.0 - _1333) / (_1333 + 1.0);
        float _4226 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
        float _1348 = ((((1.0 - _1339) * (_1334 + 2.0)) * exp2(log2(isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0))) * (_1334 + 1.0))) + _1339) * _1220;
        _1356 = _1187;
        _1358 = _1186;
        _1359 = _1185;
        _1360 = _1197;
        _1361 = _1196;
        _1362 = _1195;
        _1363 = _1207;
        _1364 = _1206;
        _1365 = _1205;
        _1366 = _1220;
        _1367 = _1219;
        _1368 = _1218;
        _1369 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)));
        _1370 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)));
        _1371 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)));
    }
    else
    {
        _1356 = _1357;
        _1358 = _1357;
        _1359 = _1357;
        _1360 = _1357;
        _1361 = _1357;
        _1362 = _1357;
        _1363 = _1357;
        _1364 = _1357;
        _1365 = _1357;
        _1366 = _1357;
        _1367 = _1357;
        _1368 = _1357;
        _1369 = 0.0;
        _1370 = 0.0;
        _1371 = 0.0;
    }
    float _1666;
    float _1667;
    float _1668;
    float _1669;
    float _1670;
    float _1671;
    float _1672;
    float _1673;
    float _1674;
    float _1675;
    float _1676;
    float _1677;
    float _1678;
    float _1679;
    float _1680;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1397 = fma(_1054, cbModelParam._m0[30u].z, fma(_1050, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1046));
        float _1401 = fma(_1054, cbModelParam._m0[31u].z, fma(_1050, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1046));
        float _1405 = fma(_1054, cbModelParam._m0[32u].z, fma(_1050, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1046));
        float _1428 = _1046 + _816;
        float _1429 = _1050 + _817;
        float _1430 = _1054 + _818;
        float _1440 = fma(_1430, cbModelParam._m0[30u].z, fma(_1429, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1428)) - _1397;
        float _1441 = fma(_1430, cbModelParam._m0[31u].z, fma(_1429, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1428)) - _1401;
        float _1442 = fma(_1430, cbModelParam._m0[32u].z, fma(_1429, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1428)) - _1405;
        float _1446 = inversesqrt(dot(vec3(_1440, _1441, _1442), vec3(_1440, _1441, _1442)));
        float _1459 = ((_1446 * _1440) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1397 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1460 = ((_1446 * _1441) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1401 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1461 = ((_1446 * _1442) / cbModelParam._m0[35u].z) + ((((((_1405 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1463 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1459, _1460, _1461), 0.0);
        vec4 _1470 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1459, _1460, _1461), 0.0);
        vec4 _1477 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1459, _1460, _1461), 0.0);
        vec4 _1484 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1459, _1460, _1461), 0.0);
        float _1496 = exp2((_1463.w + (-0.5)) * 20.0) * 2.0;
        float _1497 = _1496 * (_1463.x + (-0.5));
        float _1498 = _1496 * (_1463.y + (-0.5));
        float _1499 = _1496 * (_1463.z + (-0.5));
        float _1506 = exp2((_1470.w + (-0.5)) * 20.0) * 2.0;
        float _1507 = _1506 * (_1470.x + (-0.5));
        float _1508 = _1506 * (_1470.y + (-0.5));
        float _1509 = _1506 * (_1470.z + (-0.5));
        float _1516 = exp2((_1477.w + (-0.5)) * 20.0) * 2.0;
        float _1517 = _1516 * (_1477.x + (-0.5));
        float _1518 = _1516 * (_1477.y + (-0.5));
        float _1519 = _1516 * (_1477.z + (-0.5));
        float _1526 = exp2((_1484.w + (-0.5)) * 20.0) * 2.0;
        float _1527 = _1526 * (_1484.x + (-0.5));
        float _1528 = _1526 * (_1484.y + (-0.5));
        float _1529 = _1526 * (_1484.z + (-0.5));
        float _1530 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1531 = isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0));
        float _1532 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1533 = _1497 * 0.5;
        float _1534 = _1507 * 0.5;
        float _1535 = _1517 * 0.5;
        float _1536 = dot(vec3(_1533, _1534, _1535), vec3(_1533, _1534, _1535));
        float _1541 = (_1536 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1536);
        float _1549 = (dot(vec3(_816, _817, _818), vec3(_1541 * _1533, _1541 * _1534, _1541 * _1535)) + 1.0) * 0.5;
        float _4267 = isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0));
        float _1558 = sqrt(((_1534 * _1534) + (_1533 * _1533)) + (_1535 * _1535)) / (_1530 + 9.9999997473787516355514526367188e-06);
        float _4278 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1559 = isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0));
        float _1560 = _1559 * 2.0;
        float _1564 = (1.0 - _1559) / (_1559 + 1.0);
        float _4289 = isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0));
        float _1565 = isnan(1.0) ? _4289 : (isnan(_4289) ? 1.0 : min(_4289, 1.0));
        float _1574 = ((((1.0 - _1565) * (_1560 + 2.0)) * exp2(log2(isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0))) * (_1560 + 1.0))) + _1565) * _1530;
        float _1575 = _1498 * 0.5;
        float _1576 = _1508 * 0.5;
        float _1577 = _1518 * 0.5;
        float _1578 = dot(vec3(_1575, _1576, _1577), vec3(_1575, _1576, _1577));
        float _1583 = (_1578 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1578);
        float _1591 = (dot(vec3(_816, _817, _818), vec3(_1583 * _1575, _1583 * _1576, _1583 * _1577)) + 1.0) * 0.5;
        float _4300 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
        float _1600 = sqrt(((_1576 * _1576) + (_1575 * _1575)) + (_1577 * _1577)) / (_1531 + 9.9999997473787516355514526367188e-06);
        float _4311 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1601 = isnan(1.0) ? _4311 : (isnan(_4311) ? 1.0 : min(_4311, 1.0));
        float _1602 = _1601 * 2.0;
        float _1606 = (1.0 - _1601) / (_1601 + 1.0);
        float _4322 = isnan(0.0) ? _1606 : (isnan(_1606) ? 0.0 : max(_1606, 0.0));
        float _1607 = isnan(1.0) ? _4322 : (isnan(_4322) ? 1.0 : min(_4322, 1.0));
        float _1616 = ((((1.0 - _1607) * (_1602 + 2.0)) * exp2(log2(isnan(1.0) ? _4300 : (isnan(_4300) ? 1.0 : min(_4300, 1.0))) * (_1602 + 1.0))) + _1607) * _1531;
        float _1617 = _1499 * 0.5;
        float _1618 = _1509 * 0.5;
        float _1619 = _1519 * 0.5;
        float _1620 = dot(vec3(_1617, _1618, _1619), vec3(_1617, _1618, _1619));
        float _1625 = (_1620 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1620);
        float _1633 = (dot(vec3(_816, _817, _818), vec3(_1625 * _1617, _1625 * _1618, _1625 * _1619)) + 1.0) * 0.5;
        float _4333 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
        float _1642 = sqrt(((_1618 * _1618) + (_1617 * _1617)) + (_1619 * _1619)) / (_1532 + 9.9999997473787516355514526367188e-06);
        float _4344 = isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0));
        float _1643 = isnan(1.0) ? _4344 : (isnan(_4344) ? 1.0 : min(_4344, 1.0));
        float _1644 = _1643 * 2.0;
        float _1648 = (1.0 - _1643) / (_1643 + 1.0);
        float _4355 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
        float _1649 = isnan(1.0) ? _4355 : (isnan(_4355) ? 1.0 : min(_4355, 1.0));
        float _1658 = ((((1.0 - _1649) * (_1644 + 2.0)) * exp2(log2(isnan(1.0) ? _4333 : (isnan(_4333) ? 1.0 : min(_4333, 1.0))) * (_1644 + 1.0))) + _1649) * _1532;
        _1666 = _1499;
        _1667 = _1498;
        _1668 = _1497;
        _1669 = _1509;
        _1670 = _1508;
        _1671 = _1507;
        _1672 = _1519;
        _1673 = _1518;
        _1674 = _1517;
        _1675 = _1532;
        _1676 = _1531;
        _1677 = _1530;
        _1678 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0)));
        _1679 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0)));
        _1680 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0)));
    }
    else
    {
        _1666 = _1357;
        _1667 = _1357;
        _1668 = _1357;
        _1669 = _1357;
        _1670 = _1357;
        _1671 = _1357;
        _1672 = _1357;
        _1673 = _1357;
        _1674 = _1357;
        _1675 = _1357;
        _1676 = _1357;
        _1677 = _1357;
        _1678 = 0.0;
        _1679 = 0.0;
        _1680 = 0.0;
    }
    float _1690 = (cbModelParam._m0[1u].x * (_1678 - _1369)) + _1369;
    float _1691 = (cbModelParam._m0[1u].x * (_1679 - _1370)) + _1370;
    float _1692 = (cbModelParam._m0[1u].x * (_1680 - _1371)) + _1371;
    float _1713 = fma(_1692, cbSceneParam._m0[89u].z, fma(_1691, cbSceneParam._m0[89u].y, _1690 * cbSceneParam._m0[89u].x));
    float _1716 = fma(_1692, cbSceneParam._m0[90u].z, fma(_1691, cbSceneParam._m0[90u].y, _1690 * cbSceneParam._m0[90u].x));
    float _1719 = fma(_1692, cbSceneParam._m0[91u].z, fma(_1691, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1690));
    float _1734 = _990 * 0.5;
    float _1735 = _991 * 0.5;
    float _1736 = _992 * 0.5;
    float _1737 = dot(vec4(_1734, _1735, _1736, 1.0), vec4(_1668, _1671, _1674, _1677));
    float _1740 = dot(vec4(_1734, _1735, _1736, 1.0), vec4(_1667, _1670, _1673, _1676));
    float _1743 = dot(vec4(_1734, _1735, _1736, 1.0), vec4(_1666, _1669, _1672, _1675));
    float _1777;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1750 = dot(vec4(_1734, _1735, _1736, 1.0), vec4(_1356, _1360, _1363, _1366));
        float _1754 = dot(vec4(_1734, _1735, _1736, 1.0), vec4(_1358, _1361, _1364, _1367));
        float _1758 = dot(vec4(_1734, _1735, _1736, 1.0), vec4(_1359, _1362, _1365, _1368));
        float _1765 = dot(vec4(cbModelParam._m0[39u]), vec4(_1734, _1735, _1736, 1.0));
        _1777 = dot(vec3(isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0)), isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0)), isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1765) ? 0.0 : (isnan(0.0) ? _1765 : max(0.0, _1765))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1777 = 1.0;
    }
    float _1788;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1779 = dot(vec4(cbModelParam._m0[40u]), vec4(_1734, _1735, _1736, 1.0));
        _1788 = dot(vec3(isnan(0.0) ? _1737 : (isnan(_1737) ? 0.0 : max(_1737, 0.0)), isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0)), isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1779) ? 0.0 : (isnan(0.0) ? _1779 : max(0.0, _1779))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1788 = 1.0;
    }
    float _1792 = (_1788 * cbModelParam._m0[1u].x) + (_1777 * (1.0 - cbModelParam._m0[1u].x));
    float _1802 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _819);
    float _1803 = isnan(_1802) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1802 : min(cbModelParam._m0[25u].z, _1802));
    float _1883;
    float _1885;
    float _1887;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1850 = fma(_1054, cbModelParam._m0[13u].z, fma(_1050, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1046)) + cbModelParam._m0[13u].w;
        float _1854 = fma(_1054, cbModelParam._m0[14u].z, fma(_1050, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1046)) + cbModelParam._m0[14u].w;
        float _1858 = fma(_1054, cbModelParam._m0[15u].z, fma(_1050, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1046)) + cbModelParam._m0[15u].w;
        float _1861 = fma(_992, cbModelParam._m0[13u].z, fma(_991, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _990));
        float _1864 = fma(_992, cbModelParam._m0[14u].z, fma(_991, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _990));
        float _1867 = fma(_992, cbModelParam._m0[15u].z, fma(_991, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _990));
        float _1895;
        if (_1861 > 0.0)
        {
            _1895 = abs((1.0 - _1850) / _1861);
        }
        else
        {
            float frontier_phi_14_12_ladder;
            if (_1861 < 0.0)
            {
                frontier_phi_14_12_ladder = abs((_1850 + 1.0) / _1861);
            }
            else
            {
                frontier_phi_14_12_ladder = 5000.0;
            }
            _1895 = frontier_phi_14_12_ladder;
        }
        float _2068;
        if (_1864 > 0.0)
        {
            _2068 = abs((1.0 - _1854) / _1864);
        }
        else
        {
            float frontier_phi_23_19_ladder;
            if (_1864 < 0.0)
            {
                frontier_phi_23_19_ladder = abs((_1854 + 1.0) / _1864);
            }
            else
            {
                frontier_phi_23_19_ladder = 5000.0;
            }
            _2068 = frontier_phi_23_19_ladder;
        }
        float _2363;
        if (_1867 > 0.0)
        {
            _2363 = abs((1.0 - _1858) / _1867);
        }
        else
        {
            float frontier_phi_35_30_ladder;
            if (_1867 < 0.0)
            {
                frontier_phi_35_30_ladder = abs((_1858 + 1.0) / _1867);
            }
            else
            {
                frontier_phi_35_30_ladder = 5000.0;
            }
            _2363 = frontier_phi_35_30_ladder;
        }
        float _2365 = isnan(_2068) ? _1895 : (isnan(_1895) ? _2068 : min(_1895, _2068));
        float _2366 = isnan(_2363) ? _2365 : (isnan(_2365) ? _2363 : min(_2365, _2363));
        float _2370 = (_2366 * _1861) + _1850;
        float _2371 = (_2366 * _1864) + _1854;
        float _2372 = (_2366 * _1867) + _1858;
        float _2373 = _2366 * 9.9999997473787516355514526367188e-05;
        float _2375 = (-1.0) - _2373;
        float _2377 = _2373 + 1.0;
        float frontier_phi_13_35_ladder;
        float frontier_phi_13_35_ladder_1;
        float frontier_phi_13_35_ladder_2;
        if ((_2372 > _2377) || ((_2372 < _2375) || ((_2371 > _2377) || ((_2371 < _2375) || ((_2370 < _2375) || (_2370 > _2377))))))
        {
            frontier_phi_13_35_ladder = 0.0;
            frontier_phi_13_35_ladder_1 = 0.0;
            frontier_phi_13_35_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2517 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2372, cbModelParam._m0[9u].z, fma(_2371, cbModelParam._m0[9u].y, _2370 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2372, cbModelParam._m0[10u].z, fma(_2371, cbModelParam._m0[10u].y, _2370 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2372, cbModelParam._m0[11u].z, fma(_2371, cbModelParam._m0[11u].y, _2370 * cbModelParam._m0[11u].x))), _1803);
            frontier_phi_13_35_ladder = _2517.z * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_1 = _2517.y * cbModelParam._m0[1u].y;
            frontier_phi_13_35_ladder_2 = _2517.x * cbModelParam._m0[1u].y;
        }
        _1883 = frontier_phi_13_35_ladder_2;
        _1885 = frontier_phi_13_35_ladder_1;
        _1887 = frontier_phi_13_35_ladder;
    }
    else
    {
        vec4 _1871 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_990, _991, _992), _1803);
        _1883 = _1871.x * cbModelParam._m0[1u].y;
        _1885 = _1871.y * cbModelParam._m0[1u].y;
        _1887 = _1871.z * cbModelParam._m0[1u].y;
    }
    float _1891 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _819);
    float _1892 = isnan(_1891) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1891 : min(cbModelParam._m0[25u].w, _1891));
    float _1983;
    float _1985;
    float _1987;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1947 = fma(_1054, cbModelParam._m0[21u].z, fma(_1050, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1046)) + cbModelParam._m0[21u].w;
        float _1951 = fma(_1054, cbModelParam._m0[22u].z, fma(_1050, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1046)) + cbModelParam._m0[22u].w;
        float _1955 = fma(_1054, cbModelParam._m0[23u].z, fma(_1050, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1046)) + cbModelParam._m0[23u].w;
        float _1958 = fma(_992, cbModelParam._m0[21u].z, fma(_991, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _990));
        float _1961 = fma(_992, cbModelParam._m0[22u].z, fma(_991, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _990));
        float _1964 = fma(_992, cbModelParam._m0[23u].z, fma(_991, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _990));
        float _2073;
        if (_1958 > 0.0)
        {
            _2073 = abs((1.0 - _1947) / _1958);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1958 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1947 + 1.0) / _1958);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _2073 = frontier_phi_25_21_ladder;
        }
        float _2390;
        if (_1961 > 0.0)
        {
            _2390 = abs((1.0 - _1951) / _1961);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1961 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1951 + 1.0) / _1961);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _2390 = frontier_phi_37_32_ladder;
        }
        float _2728;
        if (_1964 > 0.0)
        {
            _2728 = abs((1.0 - _1955) / _1964);
        }
        else
        {
            float frontier_phi_47_44_ladder;
            if (_1964 < 0.0)
            {
                frontier_phi_47_44_ladder = abs((_1955 + 1.0) / _1964);
            }
            else
            {
                frontier_phi_47_44_ladder = 5000.0;
            }
            _2728 = frontier_phi_47_44_ladder;
        }
        float _2730 = isnan(_2390) ? _2073 : (isnan(_2073) ? _2390 : min(_2073, _2390));
        float _2731 = isnan(_2728) ? _2730 : (isnan(_2730) ? _2728 : min(_2730, _2728));
        float _2735 = (_2731 * _1958) + _1947;
        float _2736 = (_2731 * _1961) + _1951;
        float _2737 = (_2731 * _1964) + _1955;
        float _2738 = _2731 * 9.9999997473787516355514526367188e-05;
        float _2739 = (-1.0) - _2738;
        float _2741 = _2738 + 1.0;
        float frontier_phi_22_47_ladder;
        float frontier_phi_22_47_ladder_1;
        float frontier_phi_22_47_ladder_2;
        if ((_2737 > _2741) || ((_2737 < _2739) || ((_2736 > _2741) || ((_2736 < _2739) || ((_2735 < _2739) || (_2735 > _2741))))))
        {
            frontier_phi_22_47_ladder = 0.0;
            frontier_phi_22_47_ladder_1 = 0.0;
            frontier_phi_22_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2859 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2737, cbModelParam._m0[17u].z, fma(_2736, cbModelParam._m0[17u].y, _2735 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2737, cbModelParam._m0[18u].z, fma(_2736, cbModelParam._m0[18u].y, _2735 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2737, cbModelParam._m0[19u].z, fma(_2736, cbModelParam._m0[19u].y, _2735 * cbModelParam._m0[19u].x))), _1892);
            frontier_phi_22_47_ladder = _2859.z * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_1 = _2859.y * cbModelParam._m0[1u].z;
            frontier_phi_22_47_ladder_2 = _2859.x * cbModelParam._m0[1u].z;
        }
        _1983 = frontier_phi_22_47_ladder_2;
        _1985 = frontier_phi_22_47_ladder_1;
        _1987 = frontier_phi_22_47_ladder;
    }
    else
    {
        vec4 _1967 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_990, _991, _992), _1892);
        _1983 = _1967.x * cbModelParam._m0[1u].z;
        _1985 = _1967.y * cbModelParam._m0[1u].z;
        _1987 = _1967.z * cbModelParam._m0[1u].z;
    }
    float _2000 = (((_1017 * _967) + _1018) * _982) * ((cbModelParam._m0[1u].w * (_1983 - _1883)) + _1883);
    float _2002 = (((_1017 * _969) + _1018) * _982) * ((cbModelParam._m0[1u].w * (_1985 - _1885)) + _1885);
    float _2004 = (((_1017 * _970) + _1018) * _982) * ((cbModelParam._m0[1u].w * (_1987 - _1887)) + _1887);
    float _2007 = fma(_2004, cbSceneParam._m0[89u].z, fma(_2002, cbSceneParam._m0[89u].y, _2000 * cbSceneParam._m0[89u].x));
    float _2010 = fma(_2004, cbSceneParam._m0[90u].z, fma(_2002, cbSceneParam._m0[90u].y, _2000 * cbSceneParam._m0[90u].x));
    float _2013 = fma(_2004, cbSceneParam._m0[91u].z, fma(_2002, cbSceneParam._m0[91u].y, _2000 * cbSceneParam._m0[91u].x));
    float _2047 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2051 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2055 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2059 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2060 = _2047 / _2059;
    float _2061 = _2051 / _2059;
    float _2062 = _2055 / _2059;
    float _2209;
    float _2210;
    float _2211;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2089 = ((uint(_2062 > cbSceneParam._m0[59u].y) + uint(_2062 > cbSceneParam._m0[59u].x)) + uint(_2062 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2090 = _2089 + 43u;
        uint _2098 = _2089 + 44u;
        uint _2106 = _2089 + 45u;
        uint _2114 = _2089 + 46u;
        float _2125 = fma(_2059, cbSceneParam._m0[_2090].w, fma(_2055, cbSceneParam._m0[_2090].z, fma(_2051, cbSceneParam._m0[_2090].y, _2047 * cbSceneParam._m0[_2090].x)));
        float _2129 = fma(_2059, cbSceneParam._m0[_2098].w, fma(_2055, cbSceneParam._m0[_2098].z, fma(_2051, cbSceneParam._m0[_2098].y, _2047 * cbSceneParam._m0[_2098].x)));
        float _2137 = fma(_2059, cbSceneParam._m0[_2114].w, fma(_2055, cbSceneParam._m0[_2114].z, fma(_2051, cbSceneParam._m0[_2114].y, _2047 * cbSceneParam._m0[_2114].x)));
        float _2142 = cbSceneParam._m0[33u].z * _2137;
        float _2144 = cbSceneParam._m0[33u].w * _2137;
        float _2147 = fma(_2059, cbSceneParam._m0[_2106].w, fma(_2055, cbSceneParam._m0[_2106].z, fma(_2051, cbSceneParam._m0[_2106].y, _2047 * cbSceneParam._m0[_2106].x))) / _2137;
        float _2195 = (cbSceneParam._m0[33u].x - sqrt(((_2061 * _2061) + (_2060 * _2060)) + (_2062 * _2062))) * cbSceneParam._m0[33u].y;
        float _4481 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
        float _2202 = (isnan(1.0) ? _4481 : (isnan(_4481) ? 1.0 : min(_4481, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2142 + _2125) / _2137, (_2144 + _2129) / _2137), _2147), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2144 + _2125) / _2137, (_2129 - _2142) / _2137), _2147), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2125 - _2142) / _2137, (_2129 - _2144) / _2137), _2147), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2125 - _2144) / _2137, (_2142 + _2129) / _2137), _2147), 0.0)).x), vec4(0.25)));
        _2209 = 1.0 - (_2202 * cbSceneParam._m0[34u].x);
        _2210 = 1.0 - (_2202 * cbSceneParam._m0[34u].y);
        _2211 = 1.0 - (_2202 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2209 = 1.0;
        _2210 = 1.0;
        _2211 = 1.0;
    }
    float _2275;
    float _2277;
    float _2279;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2263 = fma(_2059, cbSceneParam._m0[63u].w, fma(_2055, cbSceneParam._m0[63u].z, fma(_2051, cbSceneParam._m0[63u].y, _2047 * cbSceneParam._m0[63u].x)));
        float _2264 = fma(_2059, cbSceneParam._m0[60u].w, fma(_2055, cbSceneParam._m0[60u].z, fma(_2051, cbSceneParam._m0[60u].y, _2047 * cbSceneParam._m0[60u].x))) / _2263;
        float _2265 = fma(_2059, cbSceneParam._m0[61u].w, fma(_2055, cbSceneParam._m0[61u].z, fma(_2051, cbSceneParam._m0[61u].y, _2047 * cbSceneParam._m0[61u].x))) / _2263;
        float frontier_phi_34_33_ladder;
        float frontier_phi_34_33_ladder_1;
        float frontier_phi_34_33_ladder_2;
        if ((((_2264 >= cbSceneParam._m0[64u].x) && (_2265 >= cbSceneParam._m0[64u].y)) && (_2264 <= cbSceneParam._m0[64u].z)) && (_2265 <= cbSceneParam._m0[64u].w))
        {
            float _2403 = fma(_2059, cbSceneParam._m0[62u].w, fma(_2055, cbSceneParam._m0[62u].z, fma(_2051, cbSceneParam._m0[62u].y, _2047 * cbSceneParam._m0[62u].x))) / _2263;
            float _2407 = isnan(cbSceneParam._m0[41u].w) ? _2403 : (isnan(_2403) ? cbSceneParam._m0[41u].w : max(_2403, cbSceneParam._m0[41u].w));
            float _2450 = (cbSceneParam._m0[33u].x - sqrt(((_2061 * _2061) + (_2060 * _2060)) + (_2062 * _2062))) * cbSceneParam._m0[33u].y;
            float _4497 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
            float _2457 = (isnan(1.0) ? _4497 : (isnan(_4497) ? 1.0 : min(_4497, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2264, cbSceneParam._m0[33u].w + _2265), _2407), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2264, _2265 - cbSceneParam._m0[33u].z), _2407), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2264 - cbSceneParam._m0[33u].z, _2265 - cbSceneParam._m0[33u].w), _2407), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2264 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2265), _2407), 0.0)).x), vec4(0.25)));
            float _2461 = 1.0 - (_2457 * cbSceneParam._m0[34u].x);
            float _2462 = 1.0 - (_2457 * cbSceneParam._m0[34u].y);
            float _2463 = 1.0 - (_2457 * cbSceneParam._m0[34u].z);
            frontier_phi_34_33_ladder = isnan(_2463) ? _2211 : (isnan(_2211) ? _2463 : min(_2211, _2463));
            frontier_phi_34_33_ladder_1 = isnan(_2462) ? _2210 : (isnan(_2210) ? _2462 : min(_2210, _2462));
            frontier_phi_34_33_ladder_2 = isnan(_2461) ? _2209 : (isnan(_2209) ? _2461 : min(_2209, _2461));
        }
        else
        {
            frontier_phi_34_33_ladder = _2211;
            frontier_phi_34_33_ladder_1 = _2210;
            frontier_phi_34_33_ladder_2 = _2209;
        }
        _2275 = frontier_phi_34_33_ladder_2;
        _2277 = frontier_phi_34_33_ladder_1;
        _2279 = frontier_phi_34_33_ladder;
    }
    else
    {
        _2275 = _2209;
        _2277 = _2210;
        _2279 = _2211;
    }
    uvec4 _2284 = floatBitsToUint(cbInstanceData._m0[_942 + 5u]);
    uint _2286 = _2284.x * 14u;
    uint _2287 = _2286 + 13u;
    float _2294 = _982 + (-1.0);
    float _2299 = (cbLight._m0[_2287].x * _2294) + 1.0;
    float _2300 = (cbLight._m0[_2287].y * _2294) + 1.0;
    float _2301 = (cbLight._m0[_2287].z * _2294) + 1.0;
    float _2302 = (cbLight._m0[_2287].w * _2294) + 1.0;
    uint _2303 = _2286 + 5u;
    float _2309 = isnan(1.0) ? _2300 : (isnan(_2300) ? 1.0 : min(_2300, 1.0));
    uint _2313 = _2286 + 4u;
    float _2322 = isnan(1.0) ? _2299 : (isnan(_2299) ? 1.0 : min(_2299, 1.0));
    uint _2326 = _2286 | 1u;
    float _2337 = dot(vec3(cbLight._m0[_2286].xyz), vec3(_816, _817, _818));
    float _2340 = dot(vec3(cbLight._m0[_2326].xyz), vec3(_816, _817, _818));
    float _4533 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
    float _4544 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
    float _2345 = (isnan(1.0) ? _4533 : (isnan(_4533) ? 1.0 : min(_4533, 1.0))) * 0.3183098733425140380859375;
    float _2347 = (isnan(1.0) ? _4544 : (isnan(_4544) ? 1.0 : min(_4544, 1.0))) * 0.3183098733425140380859375;
    float _2354 = ((cbLight._m0[_2303].x * _2309) * _2347) + (((cbLight._m0[_2313].x * _2275) * _2322) * _2345);
    float _2355 = ((_2309 * cbLight._m0[_2303].y) * _2347) + (((cbLight._m0[_2313].y * _2277) * _2322) * _2345);
    float _2356 = ((_2309 * cbLight._m0[_2303].z) * _2347) + (((cbLight._m0[_2313].z * _2279) * _2322) * _2345);
    uvec4 _2360 = floatBitsToUint(cbLight._m0[_2286 + 12u]);
    bool _2362 = _2360.x == 0u;
    float _2464;
    float _2466;
    float _2468;
    if (_2362)
    {
        _2464 = _2354;
        _2466 = _2355;
        _2468 = _2356;
    }
    else
    {
        uint _2472 = _2286 + 6u;
        float _2488 = (dot(vec3(cbLight._m0[_2286 + 2u].xyz), vec3(_816, _817, _818)) * 0.5) + 0.5;
        float _2489 = _2488 * _2488;
        float _4555 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        float _2490 = isnan(1.0) ? _4555 : (isnan(_4555) ? 1.0 : min(_4555, 1.0));
        float _2491 = isnan(1.0) ? _2301 : (isnan(_2301) ? 1.0 : min(_2301, 1.0));
        _2464 = (((cbLight._m0[_2472].x * 0.3183098733425140380859375) * _2490) * _2491) + _2354;
        _2466 = (((cbLight._m0[_2472].y * 0.3183098733425140380859375) * _2490) * _2491) + _2355;
        _2468 = (((cbLight._m0[_2472].z * 0.3183098733425140380859375) * _2490) * _2491) + _2356;
    }
    bool _2471 = _2360.y == 0u;
    float _2526;
    float _2528;
    float _2530;
    if (_2471)
    {
        _2526 = _2464;
        _2528 = _2466;
        _2530 = _2468;
    }
    else
    {
        uint _2699 = _2286 + 7u;
        float _2715 = (dot(vec3(cbLight._m0[_2286 + 3u].xyz), vec3(_816, _817, _818)) * 0.5) + 0.5;
        float _2716 = _2715 * _2715;
        float _4571 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
        float _2717 = isnan(1.0) ? _4571 : (isnan(_4571) ? 1.0 : min(_4571, 1.0));
        float _2718 = isnan(1.0) ? _2302 : (isnan(_2302) ? 1.0 : min(_2302, 1.0));
        _2526 = (((cbLight._m0[_2699].x * 0.3183098733425140380859375) * _2717) * _2718) + _2464;
        _2528 = (((cbLight._m0[_2699].y * 0.3183098733425140380859375) * _2717) * _2718) + _2466;
        _2530 = (((cbLight._m0[_2699].z * 0.3183098733425140380859375) * _2717) * _2718) + _2468;
    }
    uint _2533 = _2286 + 8u;
    float _2546 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2286].w)) * _819) * 0.949999988079071044921875);
    float _2547 = _2546 * _2546;
    float _2548 = cbLight._m0[_2286].x + _896;
    float _2549 = cbLight._m0[_2286].y + _897;
    float _2550 = cbLight._m0[_2286].z + _898;
    float _2554 = inversesqrt(dot(vec3(_2548, _2549, _2550), vec3(_2548, _2549, _2550)));
    float _2555 = _2554 * _2548;
    float _2556 = _2554 * _2549;
    float _2557 = _2554 * _2550;
    float _2558 = dot(vec3(_816, _817, _818), vec3(cbLight._m0[_2286].xyz));
    float _4587 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
    float _2561 = isnan(1.0) ? _4587 : (isnan(_4587) ? 1.0 : min(_4587, 1.0));
    float _4598 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
    float _2562 = isnan(1.0) ? _4598 : (isnan(_4598) ? 1.0 : min(_4598, 1.0));
    float _2563 = dot(vec3(_816, _817, _818), vec3(_2555, _2556, _2557));
    float _4609 = isnan(0.0) ? _2563 : (isnan(_2563) ? 0.0 : max(_2563, 0.0));
    float _2566 = isnan(1.0) ? _4609 : (isnan(_4609) ? 1.0 : min(_4609, 1.0));
    float _2567 = dot(vec3(cbLight._m0[_2286].xyz), vec3(_2555, _2556, _2557));
    float _4620 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0));
    float _2571 = _2547 * _2547;
    float _2575 = ((_2566 * _2566) * (_2571 + (-1.0))) + 1.0;
    float _2583 = exp2(log2(1.0 - (isnan(1.0) ? _4620 : (isnan(_4620) ? 1.0 : min(_4620, 1.0)))) * 5.0);
    float _2584 = 0.959999978542327880859375 - _964;
    float _2586 = 0.959999978542327880859375 - _965;
    float _2587 = 0.959999978542327880859375 - _966;
    float _2594 = 1.0 - _2547;
    float _2605 = (0.5 / (((_2562 * ((_2561 * _2594) + _2547)) + 9.9999999392252902907785028219223e-09) + (((_2562 * _2594) + _2547) * _2561))) * _2561;
    float _4631 = isnan(0.0) ? _2605 : (isnan(_2605) ? 0.0 : max(_2605, 0.0));
    float _2607 = (isnan(1.0) ? _4631 : (isnan(_4631) ? 1.0 : min(_4631, 1.0))) * (_2571 / ((_2575 * _2575) * 3.141590118408203125));
    uint _2621 = _2286 + 9u;
    float _2632 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2326].w)) * _819) * 0.949999988079071044921875);
    float _2633 = _2632 * _2632;
    float _2634 = cbLight._m0[_2326].x + _896;
    float _2635 = cbLight._m0[_2326].y + _897;
    float _2636 = cbLight._m0[_2326].z + _898;
    float _2640 = inversesqrt(dot(vec3(_2634, _2635, _2636), vec3(_2634, _2635, _2636)));
    float _2641 = _2640 * _2634;
    float _2642 = _2640 * _2635;
    float _2643 = _2640 * _2636;
    float _2644 = dot(vec3(_816, _817, _818), vec3(cbLight._m0[_2326].xyz));
    float _4642 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
    float _2647 = isnan(1.0) ? _4642 : (isnan(_4642) ? 1.0 : min(_4642, 1.0));
    float _2648 = dot(vec3(_816, _817, _818), vec3(_2641, _2642, _2643));
    float _4653 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
    float _2651 = isnan(1.0) ? _4653 : (isnan(_4653) ? 1.0 : min(_4653, 1.0));
    float _2652 = dot(vec3(cbLight._m0[_2326].xyz), vec3(_2641, _2642, _2643));
    float _4664 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
    float _2656 = _2633 * _2633;
    float _2660 = ((_2651 * _2651) * (_2656 + (-1.0))) + 1.0;
    float _2667 = exp2(log2(1.0 - (isnan(1.0) ? _4664 : (isnan(_4664) ? 1.0 : min(_4664, 1.0)))) * 5.0);
    float _2674 = 1.0 - _2633;
    float _2684 = (0.5 / (((_2562 * ((_2647 * _2674) + _2633)) + 9.9999999392252902907785028219223e-09) + (((_2562 * _2674) + _2633) * _2647))) * _2647;
    float _4675 = isnan(0.0) ? _2684 : (isnan(_2684) ? 0.0 : max(_2684, 0.0));
    float _2686 = (isnan(1.0) ? _4675 : (isnan(_4675) ? 1.0 : min(_4675, 1.0))) * (_2656 / ((_2660 * _2660) * 3.141590118408203125));
    float _2696 = (((((_2667 * _2584) + _967) * cbLight._m0[_2621].x) * _2686) * _2309) + ((((cbLight._m0[_2533].x * _2275) * ((_2583 * _2584) + _967)) * _2607) * _2322);
    float _2697 = (((((_2667 * _2586) + _969) * cbLight._m0[_2621].y) * _2686) * _2309) + ((((cbLight._m0[_2533].y * _2277) * ((_2583 * _2586) + _969)) * _2607) * _2322);
    float _2698 = (((((_2667 * _2587) + _970) * cbLight._m0[_2621].z) * _2686) * _2309) + ((((cbLight._m0[_2533].z * _2279) * ((_2583 * _2587) + _970)) * _2607) * _2322);
    float _2754;
    float _2756;
    float _2758;
    if (_2362)
    {
        _2754 = _2696;
        _2756 = _2697;
        _2758 = _2698;
    }
    else
    {
        uint _2760 = _2286 + 2u;
        uint _2764 = _2286 + 10u;
        float _2778 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2760].w)) * _819) * 0.949999988079071044921875);
        float _2779 = _2778 * _2778;
        float _2780 = cbLight._m0[_2760].x + _896;
        float _2781 = cbLight._m0[_2760].y + _897;
        float _2782 = cbLight._m0[_2760].z + _898;
        float _2786 = inversesqrt(dot(vec3(_2780, _2781, _2782), vec3(_2780, _2781, _2782)));
        float _2787 = _2786 * _2780;
        float _2788 = _2786 * _2781;
        float _2789 = _2786 * _2782;
        float _2790 = dot(vec3(_816, _817, _818), vec3(cbLight._m0[_2760].xyz));
        float _4686 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
        float _2793 = isnan(1.0) ? _4686 : (isnan(_4686) ? 1.0 : min(_4686, 1.0));
        float _2794 = dot(vec3(_816, _817, _818), vec3(_2787, _2788, _2789));
        float _4697 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
        float _2797 = isnan(1.0) ? _4697 : (isnan(_4697) ? 1.0 : min(_4697, 1.0));
        float _2798 = dot(vec3(cbLight._m0[_2760].xyz), vec3(_2787, _2788, _2789));
        float _4708 = isnan(0.0) ? _2798 : (isnan(_2798) ? 0.0 : max(_2798, 0.0));
        float _2802 = _2779 * _2779;
        float _2806 = ((_2797 * _2797) * (_2802 + (-1.0))) + 1.0;
        float _2813 = exp2(log2(1.0 - (isnan(1.0) ? _4708 : (isnan(_4708) ? 1.0 : min(_4708, 1.0)))) * 5.0);
        float _2820 = 1.0 - _2779;
        float _2830 = (0.5 / (((_2562 * ((_2793 * _2820) + _2779)) + 9.9999999392252902907785028219223e-09) + (((_2562 * _2820) + _2779) * _2793))) * _2793;
        float _4719 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
        float _2832 = (isnan(1.0) ? _4719 : (isnan(_4719) ? 1.0 : min(_4719, 1.0))) * (_2802 / ((_2806 * _2806) * 3.141590118408203125));
        float _2833 = isnan(1.0) ? _2301 : (isnan(_2301) ? 1.0 : min(_2301, 1.0));
        _2754 = (((((_2813 * _2584) + _967) * cbLight._m0[_2764].x) * _2832) * _2833) + _2696;
        _2756 = (((((_2813 * _2586) + _969) * cbLight._m0[_2764].y) * _2832) * _2833) + _2697;
        _2758 = (((((_2813 * _2587) + _970) * cbLight._m0[_2764].z) * _2832) * _2833) + _2698;
    }
    float _2864;
    float _2866;
    float _2868;
    if (_2471)
    {
        _2864 = _2754;
        _2866 = _2756;
        _2868 = _2758;
    }
    else
    {
        uint _2875 = _2286 + 3u;
        uint _2879 = _2286 + 11u;
        float _2893 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2875].w)) * _819) * 0.949999988079071044921875);
        float _2894 = _2893 * _2893;
        float _2895 = cbLight._m0[_2875].x + _896;
        float _2896 = cbLight._m0[_2875].y + _897;
        float _2897 = cbLight._m0[_2875].z + _898;
        float _2901 = inversesqrt(dot(vec3(_2895, _2896, _2897), vec3(_2895, _2896, _2897)));
        float _2902 = _2901 * _2895;
        float _2903 = _2901 * _2896;
        float _2904 = _2901 * _2897;
        float _2905 = dot(vec3(_816, _817, _818), vec3(cbLight._m0[_2875].xyz));
        float _4735 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0));
        float _2908 = isnan(1.0) ? _4735 : (isnan(_4735) ? 1.0 : min(_4735, 1.0));
        float _2909 = dot(vec3(_816, _817, _818), vec3(_2902, _2903, _2904));
        float _4746 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
        float _2912 = isnan(1.0) ? _4746 : (isnan(_4746) ? 1.0 : min(_4746, 1.0));
        float _2913 = dot(vec3(cbLight._m0[_2875].xyz), vec3(_2902, _2903, _2904));
        float _4757 = isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0));
        float _2917 = _2894 * _2894;
        float _2921 = ((_2912 * _2912) * (_2917 + (-1.0))) + 1.0;
        float _2928 = exp2(log2(1.0 - (isnan(1.0) ? _4757 : (isnan(_4757) ? 1.0 : min(_4757, 1.0)))) * 5.0);
        float _2935 = 1.0 - _2894;
        float _2945 = (0.5 / (((_2562 * ((_2908 * _2935) + _2894)) + 9.9999999392252902907785028219223e-09) + (((_2562 * _2935) + _2894) * _2908))) * _2908;
        float _4768 = isnan(0.0) ? _2945 : (isnan(_2945) ? 0.0 : max(_2945, 0.0));
        float _2947 = (isnan(1.0) ? _4768 : (isnan(_4768) ? 1.0 : min(_4768, 1.0))) * (_2917 / ((_2921 * _2921) * 3.141590118408203125));
        float _2948 = isnan(1.0) ? _2302 : (isnan(_2302) ? 1.0 : min(_2302, 1.0));
        _2864 = (((((_2928 * _2584) + _967) * cbLight._m0[_2879].x) * _2947) * _2948) + _2754;
        _2866 = (((((_2928 * _2586) + _969) * cbLight._m0[_2879].y) * _2947) * _2948) + _2756;
        _2868 = (((((_2928 * _2587) + _970) * cbLight._m0[_2879].z) * _2947) * _2948) + _2758;
    }
    float _3014;
    float _3016;
    float _3018;
    float _3020;
    float _3022;
    float _3024;
    if (_2284.y == 0u)
    {
        uvec4 _2969 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2970 = _2969.x;
        uint _2981 = uint((float(_2969.y) * floor(float(uint(cbSceneParam._m0[85u].y * _905) / _2970))) + floor(float(uint(cbSceneParam._m0[85u].x * _904) / _2970)));
        float _2991 = (log2(_2062 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2992 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
        uint _2995 = uint(isnan(14.0) ? _2992 : (isnan(_2992) ? 14.0 : min(_2992, 14.0)));
        uvec4 _3000 = texelFetch(g_lightClusterGridBuffer, int(((_2995 << 2u) + (_2981 << 6u)) >> 2u));
        uint _3001 = _3000.x;
        uint _3002 = _2969.z;
        float _3081;
        float _3083;
        float _3085;
        float _3087;
        float _3089;
        float _3091;
        if (((((1u << ((_3002 >> 4u) & 15u)) + 4294967295u) & _3001) == 0u) || ((_3002 & 240u) == 0u))
        {
            _3081 = 0.0;
            _3083 = 0.0;
            _3085 = 0.0;
            _3087 = 0.0;
            _3089 = 0.0;
            _3091 = 0.0;
        }
        else
        {
            float _3082;
            float _3084;
            float _3086;
            float _3088;
            float _3090;
            float _3092;
            float _3226 = 0.0;
            float _3227 = 0.0;
            float _3228 = 0.0;
            float _3229 = 0.0;
            float _3230 = 0.0;
            float _3231 = 0.0;
            uint _3232 = 0u;
            uint _3241;
            bool _3242;
            for (;;)
            {
                _3241 = texelFetch(g_lightClassification, int((((_2995 << 5u) + (_2981 << 9u)) + (_3232 << 2u)) >> 2u)).x;
                _3242 = _3241 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_3242)
                {
                    frontier_phi_66_pred = _3231;
                    frontier_phi_66_pred_1 = _3230;
                    frontier_phi_66_pred_2 = _3229;
                    frontier_phi_66_pred_3 = _3228;
                    frontier_phi_66_pred_4 = _3227;
                    frontier_phi_66_pred_5 = _3226;
                }
                else
                {
                    float _3350;
                    float _3351;
                    float _3352;
                    float _3353;
                    float _3354;
                    float _3355;
                    uint _3356;
                    _3350 = _3226;
                    _3351 = _3227;
                    _3352 = _3228;
                    _3353 = _3229;
                    _3354 = _3230;
                    _3355 = _3231;
                    _3356 = _3241;
                    float _3282;
                    float _3283;
                    float _3284;
                    float _3285;
                    float _3286;
                    float _3287;
                    for (;;)
                    {
                        uint _3360 = uint(findLSB(_3356)) + (_3232 << 5u);
                        uint _3357 = (_3356 + 4294967295u) & _3356;
                        uint _3362 = _3360 * 48u;
                        vec4 _3376 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3362)).x, texelFetch(g_PointLightRenderingBuffer, int(_3362 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3362 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3362 + 3u)).x));
                        uint _3382 = (_3360 * 48u) + 4u;
                        vec4 _3395 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3382)).x, texelFetch(g_PointLightRenderingBuffer, int(_3382 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3382 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3382 + 3u)).x));
                        uint _3401 = (_3360 * 48u) + 8u;
                        vec3 _3412 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3401)).x, texelFetch(g_PointLightRenderingBuffer, int(_3401 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3401 + 2u)).x));
                        float _3416 = _3376.x - _2060;
                        float _3417 = _3376.y - _2061;
                        float _3418 = _3376.z - _2062;
                        float _3419 = dot(vec3(_3416, _3417, _3418), vec3(_3416, _3417, _3418));
                        float _3422 = inversesqrt(_3419);
                        float _3423 = _3422 * _3416;
                        float _3424 = _3422 * _3417;
                        float _3425 = _3422 * _3418;
                        float _3426 = dot(vec3(_923, _926, _929), vec3(_3423, _3424, _3425));
                        float _3431 = 1.0 - (_3419 * _3376.w);
                        float _4794 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0));
                        float _3432 = isnan(1.0) ? _4794 : (isnan(_4794) ? 1.0 : min(_4794, 1.0));
                        float _3433 = sqrt(_3419) * _3395.w;
                        float _3436 = 1.39999997615814208984375 / (_3433 + 1.39999997615814208984375);
                        float _3437 = _3436 * _3436;
                        float _3440 = ((1.0 - _3437) * _3426) + _3437;
                        float _3443 = _3433 * _3433;
                        float _3447 = ((isnan(0.0) ? _3440 : (isnan(_3440) ? 0.0 : max(_3440, 0.0))) * _3432) / ((_3443 * 0.699999988079071044921875) + 1.0);
                        float _3451 = (-0.0) - _2060;
                        float _3452 = (-0.0) - _2061;
                        float _3453 = (-0.0) - _2062;
                        float _3457 = inversesqrt(dot(vec3(_3451, _3452, _3453), vec3(_3451, _3452, _3453)));
                        float _3458 = _3457 * _3451;
                        float _3459 = _3457 * _3452;
                        float _3460 = _3457 * _3453;
                        float _3467 = exp2(log2(1.0 / ((_3443 * 3.5) + 5.0)) * 0.25);
                        float _3468 = 1.0 - _998;
                        float _3475 = sqrt(1.0 - ((1.0 - (_3468 * _3468)) * (1.0 - (_3467 * _3467))));
                        float _3476 = _3475 * _3475;
                        float _3477 = _3476 * _3476;
                        float _3478 = _3458 + _3423;
                        float _3479 = _3459 + _3424;
                        float _3480 = _3460 + _3425;
                        float _3484 = inversesqrt(dot(vec3(_3478, _3479, _3480), vec3(_3478, _3479, _3480)));
                        float _3488 = dot(vec3(_923, _926, _929), vec3(_3458, _3459, _3460));
                        float _4810 = isnan(0.0) ? _3488 : (isnan(_3488) ? 0.0 : max(_3488, 0.0));
                        float _3491 = isnan(1.0) ? _4810 : (isnan(_4810) ? 1.0 : min(_4810, 1.0));
                        float _3492 = dot(vec3(_923, _926, _929), vec3(_3484 * _3478, _3484 * _3479, _3484 * _3480));
                        float _4821 = isnan(0.0) ? _3492 : (isnan(_3492) ? 0.0 : max(_3492, 0.0));
                        float _3495 = isnan(1.0) ? _4821 : (isnan(_4821) ? 1.0 : min(_4821, 1.0));
                        float _3499 = ((_3495 * _3495) * (_3477 + (-1.0))) + 1.0;
                        float _3500 = _3436 * _3476;
                        float _3501 = _3500 * _3500;
                        float _3504 = ((1.0 - _3501) * _3426) + _3501;
                        float _4832 = isnan(0.0) ? _3504 : (isnan(_3504) ? 0.0 : max(_3504, 0.0));
                        float _3505 = isnan(1.0) ? _4832 : (isnan(_4832) ? 1.0 : min(_4832, 1.0));
                        float _3506 = 1.0 - _3476;
                        float _3516 = (0.5 / (((_3505 * ((_3491 * _3506) + _3476)) + 9.9999999392252902907785028219223e-09) + (((_3505 * _3506) + _3476) * _3491))) * _3505;
                        float _4843 = isnan(0.0) ? _3516 : (isnan(_3516) ? 0.0 : max(_3516, 0.0));
                        float _3527 = (((_3477 * 3.1415927410125732421875) * (isnan(1.0) ? _4843 : (isnan(_4843) ? 1.0 : min(_4843, 1.0)))) / ((_3499 * _3499) * ((_3443 * 2.1991131305694580078125) + 3.141590118408203125))) * _3432;
                        _3285 = (_3447 * _3395.x) + _3353;
                        _3286 = (_3447 * _3395.y) + _3354;
                        _3287 = (_3447 * _3395.z) + _3355;
                        _3282 = (_3527 * _3412.x) + _3350;
                        _3283 = (_3527 * _3412.y) + _3351;
                        _3284 = (_3527 * _3412.z) + _3352;
                        if (_3357 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3350 = _3282;
                            _3351 = _3283;
                            _3352 = _3284;
                            _3353 = _3285;
                            _3354 = _3286;
                            _3355 = _3287;
                            _3356 = _3357;
                        }
                    }
                    frontier_phi_66_pred = _3287;
                    frontier_phi_66_pred_1 = _3286;
                    frontier_phi_66_pred_2 = _3285;
                    frontier_phi_66_pred_3 = _3284;
                    frontier_phi_66_pred_4 = _3283;
                    frontier_phi_66_pred_5 = _3282;
                }
                _3092 = frontier_phi_66_pred;
                _3090 = frontier_phi_66_pred_1;
                _3088 = frontier_phi_66_pred_2;
                _3086 = frontier_phi_66_pred_3;
                _3084 = frontier_phi_66_pred_4;
                _3082 = frontier_phi_66_pred_5;
                uint _3233 = _3232 + 1u;
                if (_3233 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3226 = _3082;
                    _3227 = _3084;
                    _3228 = _3086;
                    _3229 = _3088;
                    _3230 = _3090;
                    _3231 = _3092;
                    _3232 = _3233;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3081 = _3082;
            _3083 = _3084;
            _3085 = _3086;
            _3087 = _3088;
            _3089 = _3090;
            _3091 = _3092;
        }
        uvec4 _3095 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3096 = _3095.z;
        uint _3098 = (_3096 >> 8u) & 15u;
        float _3194;
        float _3196;
        float _3198;
        float _3200;
        float _3202;
        float _3204;
        if (((4294967295u << _3098) & _3001) == 0u)
        {
            _3194 = _3081;
            _3196 = _3083;
            _3198 = _3085;
            _3200 = _3087;
            _3202 = _3089;
            _3204 = _3091;
        }
        else
        {
            float _3219 = inversesqrt(dot(vec3(_2060, _2061, _2062), vec3(_2060, _2061, _2062)));
            float _3220 = _3219 * _2060;
            float _3221 = _3219 * _2061;
            float _3222 = _3219 * _2062;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3098 < ((_3096 >> 12u) & 15u))
            {
                float _3195;
                float _3197;
                float _3199;
                float _3201;
                float _3203;
                float _3205;
                float _3333 = _3081;
                float _3334 = _3083;
                float _3335 = _3085;
                float _3336 = _3087;
                float _3337 = _3089;
                float _3338 = _3091;
                uint _3339 = _3098;
                uint _3348;
                bool _3349;
                for (;;)
                {
                    _3348 = texelFetch(g_lightClassification, int((((_2995 << 5u) + (_2981 << 9u)) + (_3339 << 2u)) >> 2u)).x;
                    _3349 = _3348 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_3349)
                    {
                        frontier_phi_72_pred = _3338;
                        frontier_phi_72_pred_1 = _3337;
                        frontier_phi_72_pred_2 = _3336;
                        frontier_phi_72_pred_3 = _3335;
                        frontier_phi_72_pred_4 = _3334;
                        frontier_phi_72_pred_5 = _3333;
                    }
                    else
                    {
                        float _3532;
                        float _3533;
                        float _3534;
                        float _3535;
                        float _3536;
                        float _3537;
                        float _3826;
                        float _3827;
                        float _3828;
                        float _3829;
                        float _3830;
                        float _3831;
                        float _3545 = _3333;
                        float _3546 = _3334;
                        float _3547 = _3335;
                        float _3548 = _3336;
                        float _3549 = _3337;
                        float _3550 = _3338;
                        uint _3551 = _3348;
                        uint _3552;
                        vec4 _3577;
                        float _3578;
                        vec4 _3593;
                        vec3 _3605;
                        vec4 _3620;
                        vec4 _3635;
                        float _3682;
                        bool _3683;
                        for (;;)
                        {
                            uint _3562 = ((_3339 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3551));
                            _3552 = (_3551 + 4294967295u) & _3551;
                            uint _3564 = _3562 * 40u;
                            _3577 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3564)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3564 + 3u)).x));
                            _3578 = _3577.w;
                            uint _3580 = (_3562 * 40u) + 4u;
                            _3593 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3580)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 3u)).x));
                            uint _3595 = (_3562 * 40u) + 8u;
                            _3605 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3595)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3595 + 2u)).x));
                            uint _3607 = (_3562 * 40u) + 16u;
                            _3620 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3607)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3607 + 3u)).x));
                            uint _3622 = (_3562 * 40u) + 20u;
                            _3635 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3622)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3622 + 3u)).x));
                            uint _3638 = (_3562 * 40u) + 24u;
                            vec4 _3651 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3638)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 3u)).x));
                            uint _3657 = (_3562 * 40u) + 28u;
                            vec4 _3670 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3657)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3657 + 3u)).x));
                            _3682 = fma(_2062, _3670.z, fma(_2061, _3670.y, _3670.x * _2060)) + _3670.w;
                            _3683 = !((fma(_2062, _3651.z, fma(_2061, _3651.y, _3651.x * _2060)) + _3651.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3683)
                            {
                                float _3710 = _3577.x - _2060;
                                float _3711 = _3577.y - _2061;
                                float _3712 = _3577.z - _2062;
                                float _3713 = dot(vec3(_3710, _3711, _3712), vec3(_3710, _3711, _3712));
                                float _3716 = inversesqrt(_3713);
                                float _3717 = _3716 * _3710;
                                float _3718 = _3716 * _3711;
                                float _3719 = _3716 * _3712;
                                float _3723 = 1.0 - (_3713 / (_3578 * _3578));
                                float _4854 = isnan(0.0) ? _3723 : (isnan(_3723) ? 0.0 : max(_3723, 0.0));
                                float _3724 = isnan(1.0) ? _4854 : (isnan(_4854) ? 1.0 : min(_4854, 1.0));
                                float _3728 = sqrt(_3713) * _3593.w;
                                float _3730 = 1.39999997615814208984375 / (_3728 + 1.39999997615814208984375);
                                float _3731 = _3730 * _3730;
                                float _3734 = ((1.0 - _3731) * dot(vec3(_3717, _3718, _3719), vec3(_923, _926, _929))) + _3731;
                                float _3737 = _3728 * _3728;
                                float _3741 = (fma(_2062, _3620.z, fma(_2061, _3620.y, _3620.x * _2060)) + _3620.w) / _3682;
                                float _3742 = (fma(_2062, _3635.z, fma(_2061, _3635.y, _3635.x * _2060)) + _3635.w) / _3682;
                                float _3746 = 1.0 - dot(vec2(_3741, _3742), vec2(_3741, _3742));
                                float _4870 = isnan(0.0) ? _3746 : (isnan(_3746) ? 0.0 : max(_3746, 0.0));
                                float _3747 = isnan(1.0) ? _4870 : (isnan(_4870) ? 1.0 : min(_4870, 1.0));
                                float _3748 = _3747 * (((isnan(0.0) ? _3734 : (isnan(_3734) ? 0.0 : max(_3734, 0.0))) * _3724) / ((_3737 * 0.699999988079071044921875) + 1.0));
                                float _3760 = exp2(log2(1.0 / ((_3737 * 3.5) + 5.0)) * 0.25);
                                float _3761 = 1.0 - _998;
                                float _3768 = sqrt(1.0 - ((1.0 - (_3761 * _3761)) * (1.0 - (_3760 * _3760))));
                                float _3769 = _3768 * _3768;
                                float _3770 = _3769 * _3769;
                                float _3771 = _3717 - _3220;
                                float _3772 = _3718 - _3221;
                                float _3773 = _3719 - _3222;
                                float _3777 = inversesqrt(dot(vec3(_3771, _3772, _3773), vec3(_3771, _3772, _3773)));
                                float _3781 = dot(vec3(_923, _926, _929), vec3((-0.0) - _3220, (-0.0) - _3221, (-0.0) - _3222));
                                float _4881 = isnan(0.0) ? _3781 : (isnan(_3781) ? 0.0 : max(_3781, 0.0));
                                float _3784 = isnan(1.0) ? _4881 : (isnan(_4881) ? 1.0 : min(_4881, 1.0));
                                float _3785 = dot(vec3(_923, _926, _929), vec3(_3777 * _3771, _3777 * _3772, _3777 * _3773));
                                float _4892 = isnan(0.0) ? _3785 : (isnan(_3785) ? 0.0 : max(_3785, 0.0));
                                float _3788 = isnan(1.0) ? _4892 : (isnan(_4892) ? 1.0 : min(_4892, 1.0));
                                float _3792 = ((_3788 * _3788) * (_3770 + (-1.0))) + 1.0;
                                float _3793 = _3730 * _3769;
                                float _3794 = _3793 * _3793;
                                float _3800 = ((1.0 - _3794) * dot(vec3(_923, _926, _929), vec3(_3717, _3718, _3719))) + _3794;
                                float _4903 = isnan(0.0) ? _3800 : (isnan(_3800) ? 0.0 : max(_3800, 0.0));
                                float _3801 = isnan(1.0) ? _4903 : (isnan(_4903) ? 1.0 : min(_4903, 1.0));
                                float _3802 = 1.0 - _3769;
                                float _3812 = (0.5 / (((_3801 * ((_3784 * _3802) + _3769)) + 9.9999999392252902907785028219223e-09) + (((_3801 * _3802) + _3769) * _3784))) * _3801;
                                float _4914 = isnan(0.0) ? _3812 : (isnan(_3812) ? 0.0 : max(_3812, 0.0));
                                float _3822 = (_3747 * _3724) * (((_3770 * 3.1415927410125732421875) * (isnan(1.0) ? _4914 : (isnan(_4914) ? 1.0 : min(_4914, 1.0)))) / ((_3792 * _3792) * ((_3737 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3748 * _3593.y;
                                frontier_phi_78_pred_1 = _3748 * _3593.x;
                                frontier_phi_78_pred_2 = _3822 * _3605.z;
                                frontier_phi_78_pred_3 = _3822 * _3605.y;
                                frontier_phi_78_pred_4 = _3822 * _3605.x;
                                frontier_phi_78_pred_5 = _3748 * _3593.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3830 = frontier_phi_78_pred;
                            _3829 = frontier_phi_78_pred_1;
                            _3828 = frontier_phi_78_pred_2;
                            _3827 = frontier_phi_78_pred_3;
                            _3826 = frontier_phi_78_pred_4;
                            _3831 = frontier_phi_78_pred_5;
                            _3535 = _3829 + _3548;
                            _3536 = _3830 + _3549;
                            _3537 = _3831 + _3550;
                            _3532 = _3826 + _3545;
                            _3533 = _3827 + _3546;
                            _3534 = _3828 + _3547;
                            if (_3552 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3545 = _3532;
                                _3546 = _3533;
                                _3547 = _3534;
                                _3548 = _3535;
                                _3549 = _3536;
                                _3550 = _3537;
                                _3551 = _3552;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _3537;
                        frontier_phi_72_pred_1 = _3536;
                        frontier_phi_72_pred_2 = _3535;
                        frontier_phi_72_pred_3 = _3534;
                        frontier_phi_72_pred_4 = _3533;
                        frontier_phi_72_pred_5 = _3532;
                    }
                    _3205 = frontier_phi_72_pred;
                    _3203 = frontier_phi_72_pred_1;
                    _3201 = frontier_phi_72_pred_2;
                    _3199 = frontier_phi_72_pred_3;
                    _3197 = frontier_phi_72_pred_4;
                    _3195 = frontier_phi_72_pred_5;
                    uint _3340 = _3339 + 1u;
                    if (_3340 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3333 = _3195;
                        _3334 = _3197;
                        _3335 = _3199;
                        _3336 = _3201;
                        _3337 = _3203;
                        _3338 = _3205;
                        _3339 = _3340;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3205;
                frontier_phi_60_61_ladder_1 = _3203;
                frontier_phi_60_61_ladder_2 = _3199;
                frontier_phi_60_61_ladder_3 = _3197;
                frontier_phi_60_61_ladder_4 = _3195;
                frontier_phi_60_61_ladder_5 = _3201;
            }
            else
            {
                frontier_phi_60_61_ladder = _3091;
                frontier_phi_60_61_ladder_1 = _3089;
                frontier_phi_60_61_ladder_2 = _3085;
                frontier_phi_60_61_ladder_3 = _3083;
                frontier_phi_60_61_ladder_4 = _3081;
                frontier_phi_60_61_ladder_5 = _3087;
            }
            _3194 = frontier_phi_60_61_ladder_4;
            _3196 = frontier_phi_60_61_ladder_3;
            _3198 = frontier_phi_60_61_ladder_2;
            _3200 = frontier_phi_60_61_ladder_5;
            _3202 = frontier_phi_60_61_ladder_1;
            _3204 = frontier_phi_60_61_ladder;
        }
        float _3209 = isnan(1.0) ? _982 : (isnan(_982) ? 1.0 : min(_982, 1.0));
        _3014 = (_3209 * _3200) + _2526;
        _3016 = (_3209 * _3202) + _2528;
        _3018 = (_3209 * _3204) + _2530;
        _3020 = ((_3194 * _967) * _3209) + _2864;
        _3022 = ((_3196 * _969) * _3209) + _2866;
        _3024 = ((_3198 * _970) * _3209) + _2868;
    }
    else
    {
        _3014 = _2526;
        _3016 = _2528;
        _3018 = _2530;
        _3020 = _2864;
        _3022 = _2866;
        _3024 = _2868;
    }
    float _4930 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
    float _4941 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
    float _4952 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
    uint _3044 = _942 + 6u;
    float _3052 = _904 / cbSceneParam._m0[86u].x;
    float _3053 = _905 / cbSceneParam._m0[86u].y;
    vec4 _3067 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3052, _3053, (log2((isnan(cbSceneParam._m0[77u].w) ? _839 : (isnan(_839) ? cbSceneParam._m0[77u].w : min(_839, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3069 = _3067.x;
    float _3070 = _3067.y;
    float _3071 = _3067.z;
    float _3072 = _3067.w;
    float _3144;
    float _3146;
    float _3148;
    float _3150;
    if (_839 > cbSceneParam._m0[78u].w)
    {
        float _3106 = isnan(_839) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _839 : min(cbSceneParam._m0[80u].w, _839));
        float _3107 = _3106 / _839;
        float _3118 = _3107 * _889;
        float _3119 = _890 * _3107;
        float _3120 = (-0.0) - _3119;
        float _3122 = _3107 * _891;
        float _3124 = (cbSceneParam._m0[77u].w * _3120) / _3106;
        float _3125 = _3124 + cbSceneParam._m0[79u].w;
        float _3126 = cbSceneParam._m0[79u].w - _3119;
        float _3132 = sqrt(((_3118 * _3118) + (_3119 * _3119)) + (_3122 * _3122));
        float _3135 = (1.0 - (cbSceneParam._m0[77u].w / _3106)) * _3132;
        float _3140 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3142 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3295;
        if (abs((_3120 - _3124) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3295 = ((((_3125 > 0.0) ? exp2(_3140 * _3125) : (2.0 - exp2(_3142 * _3125))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3135;
        }
        else
        {
            float _3255 = 1.0 / cbSceneParam._m0[80u].x;
            float _3256 = isnan(_3126) ? _3125 : (isnan(_3125) ? _3126 : max(_3125, _3126));
            float _3257 = isnan(_3126) ? _3125 : (isnan(_3125) ? _3126 : min(_3125, _3126));
            float _3266 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : min(_3256, 0.0));
            float _3267 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : min(_3257, 0.0));
            _3295 = ((abs(_3132 / _3120) * cbSceneParam._m0[80u].y) * ((((_3266 - _3267) * 2.0) - ((exp2(_3140 * (isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0)))) - exp2(_3140 * (isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0))))) * _3255)) - ((exp2(_3142 * _3266) - exp2(_3142 * _3267)) * _3255))) + (_3135 * cbSceneParam._m0[80u].z);
        }
        vec4 _3297 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3052, _3053, 1.0), 0.0);
        float _3306 = exp2((_3295 * (-1.44269502162933349609375)) * (1.0 - _3297.w));
        float _3307 = log2(_3306);
        float _3323 = log2(_3072);
        _3144 = (exp2(_3323 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3307 * cbSceneParam._m0[78u].x)) * _3297.x) / cbSceneParam._m0[78u].x)) + _3069;
        _3146 = (exp2(_3323 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3307 * cbSceneParam._m0[78u].y)) * _3297.y) / cbSceneParam._m0[78u].y)) + _3070;
        _3148 = (exp2(_3323 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3307 * cbSceneParam._m0[78u].z)) * _3297.z) / cbSceneParam._m0[78u].z)) + _3071;
        _3150 = _3306 * _3072;
    }
    else
    {
        _3144 = _3069;
        _3146 = _3070;
        _3148 = _3071;
        _3150 = _3072;
    }
    float _3162 = roundEven(cbMatDynParam._m0[0u].y);
    bool _3163 = _3162 == 3.0;
    float _3164 = log2(_3150);
    float _3171 = exp2(_3164 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4930 : (isnan(_4930) ? 1.0 : min(_4930, 1.0))) * (_3014 + ((isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0))) * _982))) + ((_3020 + ((isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0))) * _1792)) * cbPerFrame._m0[3u].x));
    float _3172 = exp2(_3164 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4941 : (isnan(_4941) ? 1.0 : min(_4941, 1.0))) * (_3016 + ((isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0))) * _982))) + ((_3022 + ((isnan(0.0) ? _2010 : (isnan(_2010) ? 0.0 : max(_2010, 0.0))) * _1792)) * cbPerFrame._m0[3u].x));
    float _3173 = exp2(_3164 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4952 : (isnan(_4952) ? 1.0 : min(_4952, 1.0))) * (_3018 + ((isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0))) * _982))) + ((_3024 + ((isnan(0.0) ? _2013 : (isnan(_2013) ? 0.0 : max(_2013, 0.0))) * _1792)) * cbPerFrame._m0[3u].x));
    float _3182 = (_3162 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _3182 * (_3163 ? _3171 : (_3171 + (cbSceneParam._m0[72u].w * _3144)));
    SV_Target.y = _3182 * (_3163 ? _3172 : (_3172 + (cbSceneParam._m0[72u].w * _3146)));
    SV_Target.z = _3182 * (_3163 ? _3173 : (_3173 + (cbSceneParam._m0[72u].w * _3148)));
    SV_Target.w = cbInstanceData._m0[_3044].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3044].w;
}


