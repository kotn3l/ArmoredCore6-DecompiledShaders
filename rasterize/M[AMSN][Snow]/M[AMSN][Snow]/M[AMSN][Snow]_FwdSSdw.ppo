#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _930;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _194 = _193 * _186;
    float _195 = _193 * _187;
    float _196 = _193 * _188;
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208 = _207 * TANGENT.x;
    float _209 = _207 * TANGENT.y;
    float _210 = _207 * TANGENT.z;
    float _215;
    float _216;
    float _217;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _215 = (-0.0) - _201;
        _216 = (-0.0) - _202;
        _217 = (-0.0) - _203;
    }
    else
    {
        _215 = _201;
        _216 = _202;
        _217 = _203;
    }
    vec4 _236 = texture(sampler2D(M_AMSN_Snow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _241 = _236.z;
    float _245 = (_236.x * 2.0) + (-1.0);
    float _247 = (_236.y * 2.0) + (-1.0);
    float _248 = dot(vec2(_245, _247), vec2(_245, _247));
    float _3290 = isnan(0.0) ? _248 : (isnan(_248) ? 0.0 : max(_248, 0.0));
    float _254 = sqrt(1.0 - (isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0))));
    float _257 = fma(_254, _215, fma(_247, _208, _245 * _194));
    float _260 = fma(_254, _216, fma(_247, _209, _245 * _195));
    float _263 = fma(_254, _217, fma(_247, _210, _245 * _196));
    float _272 = exp2(log2(inversesqrt(dot(vec3(_257, _260, _263), vec3(_257, _260, _263))) * _260) * cbMtdParam._m0[9u].x) * cbMtdParam._m0[9u].y;
    float _3301 = isnan(0.0) ? _272 : (isnan(_272) ? 0.0 : max(_272, 0.0));
    float _273 = isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0));
    vec4 _285 = texture(sampler2D(M_AMSN_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _301 = texture(sampler2D(M_AMSN_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _303 = _301.x;
    float _304 = _301.y;
    float _305 = _301.z;
    float _312 = ((_285.x - _303) * _273) + _303;
    float _313 = ((_285.y - _304) * _273) + _304;
    float _314 = ((_285.z - _305) * _273) + _305;
    vec4 _327 = texture(sampler2D(M_AMSN_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _329 = _327.x;
    float _331 = _329 - (_329 * _273);
    vec4 _343 = texture(sampler2D(M_AMSN_Snow_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _350 = (_343.x * 2.0) + (-1.0);
    float _351 = (_343.y * 2.0) + (-1.0);
    float _352 = dot(vec2(_350, _351), vec2(_350, _351));
    float _3312 = isnan(0.0) ? _352 : (isnan(_352) ? 0.0 : max(_352, 0.0));
    float _360 = ((_343.z - _241) * _273) + _241;
    float _367 = ((_350 - _245) * _273) + _245;
    float _368 = ((_351 - _247) * _273) + _247;
    float _369 = ((sqrt(1.0 - (isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0)))) - _254) * _273) + _254;
    float _372 = fma(_369, _215, fma(_368, _208, _367 * _194));
    float _375 = fma(_369, _216, fma(_368, _209, _367 * _195));
    float _378 = fma(_369, _217, fma(_368, _210, _367 * _196));
    float _382 = inversesqrt(dot(vec3(_372, _375, _378), vec3(_372, _375, _378)));
    float _383 = _382 * _372;
    float _384 = _382 * _375;
    float _385 = _382 * _378;
    float _3323 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _386 = isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0));
    float _3334 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _3345 = isnan(0.0) ? _313 : (isnan(_313) ? 0.0 : max(_313, 0.0));
    float _3356 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _3367 = isnan(0.0) ? _331 : (isnan(_331) ? 0.0 : max(_331, 0.0));
    float _390 = isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0));
    float _406 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _448 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _458 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _448);
    float _459 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _448);
    float _460 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _448);
    float _464 = inversesqrt(dot(vec3(_458, _459, _460), vec3(_458, _459, _460)));
    float _465 = _458 * _464;
    float _466 = _459 * _464;
    float _467 = _460 * _464;
    float _473 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _474 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _495 = fma(_385, cbSceneParam._m0[5u].z, fma(_384, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _383));
    float _498 = fma(_385, cbSceneParam._m0[6u].z, fma(_384, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _383));
    float _501 = fma(_385, cbSceneParam._m0[7u].z, fma(_384, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _383));
    uint _514 = uint(roundEven(NORMAL.w)) * 13u;
    uint _517 = (_514 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _523 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0)))) * cbInstanceData._m0[_517].x;
    float _524 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0)))) * cbInstanceData._m0[_517].y;
    float _525 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0)))) * cbInstanceData._m0[_517].z;
    float _3378 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _526 = isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0));
    float _3389 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _527 = isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0));
    float _3400 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _528 = isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0));
    float _529 = 1.0 - _390;
    float _530 = _526 * _529;
    float _531 = _527 * _529;
    float _532 = _528 * _529;
    float _537 = (_526 + (-0.039999999105930328369140625)) * _390;
    float _538 = (_527 + (-0.039999999105930328369140625)) * _390;
    float _539 = (_528 + (-0.039999999105930328369140625)) * _390;
    float _540 = _537 + 0.039999999105930328369140625;
    float _542 = _538 + 0.039999999105930328369140625;
    float _543 = _539 + 0.039999999105930328369140625;
    vec4 _552 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _473, cbSceneParam._m0[86u].y * _474));
    float _555 = _552.x * TEXCOORD.z;
    float _556 = dot(vec3(_383, _384, _385), vec3(_465, _466, _467));
    float _559 = _556 * 2.0;
    float _563 = (_559 * _383) - _465;
    float _564 = (_559 * _384) - _466;
    float _565 = (_559 * _385) - _467;
    float _569 = abs(dot(vec3(_465, _466, _467), vec3(_383, _384, _385)));
    float _3411 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _571 = sqrt(_386);
    float _584 = exp2((_571 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_571 * 3.0));
    float _590 = (1.0 - _584) * ((_571 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _591 = _584 * _571;
    float _619 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _623 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _627 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _929;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _654 = fma(_627, cbModelParam._m0[26u].z, fma(_623, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _619));
        float _658 = fma(_627, cbModelParam._m0[27u].z, fma(_623, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _619));
        float _662 = fma(_627, cbModelParam._m0[28u].z, fma(_623, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _619));
        float _687 = _619 + _383;
        float _688 = _623 + _384;
        float _689 = _627 + _385;
        float _699 = fma(_689, cbModelParam._m0[26u].z, fma(_688, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _687)) - _654;
        float _700 = fma(_689, cbModelParam._m0[27u].z, fma(_688, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _687)) - _658;
        float _701 = fma(_689, cbModelParam._m0[28u].z, fma(_688, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _687)) - _662;
        float _705 = inversesqrt(dot(vec3(_699, _700, _701), vec3(_699, _700, _701)));
        float _718 = ((_705 * _699) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_654 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _719 = ((_705 * _700) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_658 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _720 = ((_705 * _701) / cbModelParam._m0[34u].z) + ((((((_662 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _723 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_718, _719, _720), 0.0);
        vec4 _730 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_718, _719, _720), 0.0);
        vec4 _737 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_718, _719, _720), 0.0);
        vec4 _744 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_718, _719, _720), 0.0);
        float _757 = exp2((_723.w + (-0.5)) * 20.0) * 2.0;
        float _758 = _757 * (_723.x + (-0.5));
        float _759 = _757 * (_723.y + (-0.5));
        float _760 = _757 * (_723.z + (-0.5));
        float _767 = exp2((_730.w + (-0.5)) * 20.0) * 2.0;
        float _768 = _767 * (_730.x + (-0.5));
        float _769 = _767 * (_730.y + (-0.5));
        float _770 = _767 * (_730.z + (-0.5));
        float _777 = exp2((_737.w + (-0.5)) * 20.0) * 2.0;
        float _778 = _777 * (_737.x + (-0.5));
        float _779 = _777 * (_737.y + (-0.5));
        float _780 = _777 * (_737.z + (-0.5));
        float _787 = exp2((_744.w + (-0.5)) * 20.0) * 2.0;
        float _788 = _787 * (_744.x + (-0.5));
        float _789 = _787 * (_744.y + (-0.5));
        float _790 = _787 * (_744.z + (-0.5));
        float _791 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _792 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _793 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _794 = _758 * 0.5;
        float _795 = _768 * 0.5;
        float _796 = _778 * 0.5;
        float _797 = dot(vec3(_794, _795, _796), vec3(_794, _795, _796));
        float _802 = (_797 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_797);
        float _811 = (dot(vec3(_383, _384, _385), vec3(_802 * _794, _802 * _795, _802 * _796)) + 1.0) * 0.5;
        float _3437 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _821 = sqrt(((_795 * _795) + (_794 * _794)) + (_796 * _796)) / (_791 + 9.9999997473787516355514526367188e-06);
        float _3448 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _822 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
        float _823 = _822 * 2.0;
        float _827 = (1.0 - _822) / (_822 + 1.0);
        float _3459 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _828 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
        float _837 = ((((1.0 - _828) * (_823 + 2.0)) * exp2(log2(isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0))) * (_823 + 1.0))) + _828) * _791;
        float _838 = _759 * 0.5;
        float _839 = _769 * 0.5;
        float _840 = _779 * 0.5;
        float _841 = dot(vec3(_838, _839, _840), vec3(_838, _839, _840));
        float _846 = (_841 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_841);
        float _854 = (dot(vec3(_383, _384, _385), vec3(_846 * _838, _846 * _839, _846 * _840)) + 1.0) * 0.5;
        float _3470 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _863 = sqrt(((_839 * _839) + (_838 * _838)) + (_840 * _840)) / (_792 + 9.9999997473787516355514526367188e-06);
        float _3481 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        float _864 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
        float _865 = _864 * 2.0;
        float _869 = (1.0 - _864) / (_864 + 1.0);
        float _3492 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _870 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
        float _879 = ((((1.0 - _870) * (_865 + 2.0)) * exp2(log2(isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0))) * (_865 + 1.0))) + _870) * _792;
        float _880 = _760 * 0.5;
        float _881 = _770 * 0.5;
        float _882 = _780 * 0.5;
        float _883 = dot(vec3(_880, _881, _882), vec3(_880, _881, _882));
        float _888 = (_883 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_883);
        float _896 = (dot(vec3(_383, _384, _385), vec3(_888 * _880, _888 * _881, _888 * _882)) + 1.0) * 0.5;
        float _3503 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _905 = sqrt(((_881 * _881) + (_880 * _880)) + (_882 * _882)) / (_793 + 9.9999997473787516355514526367188e-06);
        float _3514 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _906 = isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0));
        float _907 = _906 * 2.0;
        float _911 = (1.0 - _906) / (_906 + 1.0);
        float _3525 = isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0));
        float _912 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
        float _921 = ((((1.0 - _912) * (_907 + 2.0)) * exp2(log2(isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0))) * (_907 + 1.0))) + _912) * _793;
        _929 = _760;
        _931 = _759;
        _932 = _758;
        _933 = _770;
        _934 = _769;
        _935 = _768;
        _936 = _780;
        _937 = _779;
        _938 = _778;
        _939 = _793;
        _940 = _792;
        _941 = _791;
        _942 = cbModelParam._m0[36u].z * (isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0)));
        _943 = cbModelParam._m0[36u].z * (isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0)));
        _944 = cbModelParam._m0[36u].z * (isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0)));
    }
    else
    {
        _929 = _930;
        _931 = _930;
        _932 = _930;
        _933 = _930;
        _934 = _930;
        _935 = _930;
        _936 = _930;
        _937 = _930;
        _938 = _930;
        _939 = _930;
        _940 = _930;
        _941 = _930;
        _942 = 0.0;
        _943 = 0.0;
        _944 = 0.0;
    }
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _970 = fma(_627, cbModelParam._m0[30u].z, fma(_623, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _619));
        float _974 = fma(_627, cbModelParam._m0[31u].z, fma(_623, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _619));
        float _978 = fma(_627, cbModelParam._m0[32u].z, fma(_623, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _619));
        float _1001 = _619 + _383;
        float _1002 = _623 + _384;
        float _1003 = _627 + _385;
        float _1013 = fma(_1003, cbModelParam._m0[30u].z, fma(_1002, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1001)) - _970;
        float _1014 = fma(_1003, cbModelParam._m0[31u].z, fma(_1002, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1001)) - _974;
        float _1015 = fma(_1003, cbModelParam._m0[32u].z, fma(_1002, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1001)) - _978;
        float _1019 = inversesqrt(dot(vec3(_1013, _1014, _1015), vec3(_1013, _1014, _1015)));
        float _1032 = ((_1019 * _1013) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_970 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1033 = ((_1019 * _1014) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_974 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1034 = ((_1019 * _1015) / cbModelParam._m0[35u].z) + ((((((_978 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1036 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1032, _1033, _1034), 0.0);
        vec4 _1043 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1032, _1033, _1034), 0.0);
        vec4 _1050 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1032, _1033, _1034), 0.0);
        vec4 _1057 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1032, _1033, _1034), 0.0);
        float _1069 = exp2((_1036.w + (-0.5)) * 20.0) * 2.0;
        float _1070 = _1069 * (_1036.x + (-0.5));
        float _1071 = _1069 * (_1036.y + (-0.5));
        float _1072 = _1069 * (_1036.z + (-0.5));
        float _1079 = exp2((_1043.w + (-0.5)) * 20.0) * 2.0;
        float _1080 = _1079 * (_1043.x + (-0.5));
        float _1081 = _1079 * (_1043.y + (-0.5));
        float _1082 = _1079 * (_1043.z + (-0.5));
        float _1089 = exp2((_1050.w + (-0.5)) * 20.0) * 2.0;
        float _1090 = _1089 * (_1050.x + (-0.5));
        float _1091 = _1089 * (_1050.y + (-0.5));
        float _1092 = _1089 * (_1050.z + (-0.5));
        float _1099 = exp2((_1057.w + (-0.5)) * 20.0) * 2.0;
        float _1100 = _1099 * (_1057.x + (-0.5));
        float _1101 = _1099 * (_1057.y + (-0.5));
        float _1102 = _1099 * (_1057.z + (-0.5));
        float _1103 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1104 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1105 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1106 = _1070 * 0.5;
        float _1107 = _1080 * 0.5;
        float _1108 = _1090 * 0.5;
        float _1109 = dot(vec3(_1106, _1107, _1108), vec3(_1106, _1107, _1108));
        float _1114 = (_1109 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1109);
        float _1122 = (dot(vec3(_383, _384, _385), vec3(_1114 * _1106, _1114 * _1107, _1114 * _1108)) + 1.0) * 0.5;
        float _3566 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1131 = sqrt(((_1107 * _1107) + (_1106 * _1106)) + (_1108 * _1108)) / (_1103 + 9.9999997473787516355514526367188e-06);
        float _3577 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
        float _1133 = _1132 * 2.0;
        float _1137 = (1.0 - _1132) / (_1132 + 1.0);
        float _3588 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
        float _1147 = ((((1.0 - _1138) * (_1133 + 2.0)) * exp2(log2(isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0))) * (_1133 + 1.0))) + _1138) * _1103;
        float _1148 = _1071 * 0.5;
        float _1149 = _1081 * 0.5;
        float _1150 = _1091 * 0.5;
        float _1151 = dot(vec3(_1148, _1149, _1150), vec3(_1148, _1149, _1150));
        float _1156 = (_1151 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1151);
        float _1164 = (dot(vec3(_383, _384, _385), vec3(_1156 * _1148, _1156 * _1149, _1156 * _1150)) + 1.0) * 0.5;
        float _3599 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1173 = sqrt(((_1149 * _1149) + (_1148 * _1148)) + (_1150 * _1150)) / (_1104 + 9.9999997473787516355514526367188e-06);
        float _3610 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0));
        float _1175 = _1174 * 2.0;
        float _1179 = (1.0 - _1174) / (_1174 + 1.0);
        float _3621 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
        float _1189 = ((((1.0 - _1180) * (_1175 + 2.0)) * exp2(log2(isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0))) * (_1175 + 1.0))) + _1180) * _1104;
        float _1190 = _1072 * 0.5;
        float _1191 = _1082 * 0.5;
        float _1192 = _1092 * 0.5;
        float _1193 = dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192));
        float _1198 = (_1193 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1193);
        float _1206 = (dot(vec3(_383, _384, _385), vec3(_1198 * _1190, _1198 * _1191, _1198 * _1192)) + 1.0) * 0.5;
        float _3632 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1215 = sqrt(((_1191 * _1191) + (_1190 * _1190)) + (_1192 * _1192)) / (_1105 + 9.9999997473787516355514526367188e-06);
        float _3643 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
        float _1217 = _1216 * 2.0;
        float _1221 = (1.0 - _1216) / (_1216 + 1.0);
        float _3654 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
        float _1231 = ((((1.0 - _1222) * (_1217 + 2.0)) * exp2(log2(isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0))) * (_1217 + 1.0))) + _1222) * _1105;
        _1239 = _1072;
        _1240 = _1071;
        _1241 = _1070;
        _1242 = _1082;
        _1243 = _1081;
        _1244 = _1080;
        _1245 = _1092;
        _1246 = _1091;
        _1247 = _1090;
        _1248 = _1105;
        _1249 = _1104;
        _1250 = _1103;
        _1251 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0)));
        _1252 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0)));
        _1253 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)));
    }
    else
    {
        _1239 = _930;
        _1240 = _930;
        _1241 = _930;
        _1242 = _930;
        _1243 = _930;
        _1244 = _930;
        _1245 = _930;
        _1246 = _930;
        _1247 = _930;
        _1248 = _930;
        _1249 = _930;
        _1250 = _930;
        _1251 = 0.0;
        _1252 = 0.0;
        _1253 = 0.0;
    }
    float _1263 = (cbModelParam._m0[1u].x * (_1251 - _942)) + _942;
    float _1264 = (cbModelParam._m0[1u].x * (_1252 - _943)) + _943;
    float _1265 = (cbModelParam._m0[1u].x * (_1253 - _944)) + _944;
    float _1286 = fma(_1265, cbSceneParam._m0[89u].z, fma(_1264, cbSceneParam._m0[89u].y, _1263 * cbSceneParam._m0[89u].x));
    float _1289 = fma(_1265, cbSceneParam._m0[90u].z, fma(_1264, cbSceneParam._m0[90u].y, _1263 * cbSceneParam._m0[90u].x));
    float _1292 = fma(_1265, cbSceneParam._m0[91u].z, fma(_1264, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1263));
    float _1307 = _563 * 0.5;
    float _1308 = _564 * 0.5;
    float _1309 = _565 * 0.5;
    float _1310 = dot(vec4(_1307, _1308, _1309, 1.0), vec4(_1241, _1244, _1247, _1250));
    float _1313 = dot(vec4(_1307, _1308, _1309, 1.0), vec4(_1240, _1243, _1246, _1249));
    float _1316 = dot(vec4(_1307, _1308, _1309, 1.0), vec4(_1239, _1242, _1245, _1248));
    float _1350;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1323 = dot(vec4(_1307, _1308, _1309, 1.0), vec4(_929, _933, _936, _939));
        float _1327 = dot(vec4(_1307, _1308, _1309, 1.0), vec4(_931, _934, _937, _940));
        float _1331 = dot(vec4(_1307, _1308, _1309, 1.0), vec4(_932, _935, _938, _941));
        float _1338 = dot(vec4(cbModelParam._m0[39u]), vec4(_1307, _1308, _1309, 1.0));
        _1350 = dot(vec3(isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)), isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)), isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1338) ? 0.0 : (isnan(0.0) ? _1338 : max(0.0, _1338))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1350 = 1.0;
    }
    float _1361;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1352 = dot(vec4(cbModelParam._m0[40u]), vec4(_1307, _1308, _1309, 1.0));
        _1361 = dot(vec3(isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)), isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0)), isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1352) ? 0.0 : (isnan(0.0) ? _1352 : max(0.0, _1352))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1361 = 1.0;
    }
    float _1365 = (_1361 * cbModelParam._m0[1u].x) + (_1350 * (1.0 - cbModelParam._m0[1u].x));
    float _1375 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _386);
    float _1376 = isnan(_1375) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1375 : min(cbModelParam._m0[25u].z, _1375));
    float _1458;
    float _1460;
    float _1462;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1425 = fma(_627, cbModelParam._m0[13u].z, fma(_623, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _619)) + cbModelParam._m0[13u].w;
        float _1429 = fma(_627, cbModelParam._m0[14u].z, fma(_623, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _619)) + cbModelParam._m0[14u].w;
        float _1433 = fma(_627, cbModelParam._m0[15u].z, fma(_623, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _619)) + cbModelParam._m0[15u].w;
        float _1436 = fma(_565, cbModelParam._m0[13u].z, fma(_564, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _563));
        float _1439 = fma(_565, cbModelParam._m0[14u].z, fma(_564, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _563));
        float _1442 = fma(_565, cbModelParam._m0[15u].z, fma(_564, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _563));
        float _1470;
        if (_1436 > 0.0)
        {
            _1470 = abs((1.0 - _1425) / _1436);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1436 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1425 + 1.0) / _1436);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1470 = frontier_phi_16_14_ladder;
        }
        float _1698;
        if (_1439 > 0.0)
        {
            _1698 = abs((1.0 - _1429) / _1439);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1439 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1429 + 1.0) / _1439);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1698 = frontier_phi_25_21_ladder;
        }
        float _1955;
        if (_1442 > 0.0)
        {
            _1955 = abs((1.0 - _1433) / _1442);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1442 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1433 + 1.0) / _1442);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1955 = frontier_phi_37_32_ladder;
        }
        float _1957 = isnan(_1698) ? _1470 : (isnan(_1470) ? _1698 : min(_1470, _1698));
        float _1958 = isnan(_1955) ? _1957 : (isnan(_1957) ? _1955 : min(_1957, _1955));
        float _1962 = (_1958 * _1436) + _1425;
        float _1963 = (_1958 * _1439) + _1429;
        float _1964 = (_1958 * _1442) + _1433;
        float _1965 = _1958 * 9.9999997473787516355514526367188e-05;
        float _1967 = (-1.0) - _1965;
        float _1969 = _1965 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1964 > _1969) || ((_1964 < _1967) || ((_1963 > _1969) || ((_1963 < _1967) || ((_1962 < _1967) || (_1962 > _1969))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2092 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1964, cbModelParam._m0[9u].z, fma(_1963, cbModelParam._m0[9u].y, _1962 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1964, cbModelParam._m0[10u].z, fma(_1963, cbModelParam._m0[10u].y, _1962 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1964, cbModelParam._m0[11u].z, fma(_1963, cbModelParam._m0[11u].y, _1962 * cbModelParam._m0[11u].x))), _1376);
            frontier_phi_15_37_ladder = _2092.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2092.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2092.x * cbModelParam._m0[1u].y;
        }
        _1458 = frontier_phi_15_37_ladder_2;
        _1460 = frontier_phi_15_37_ladder_1;
        _1462 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1446 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_563, _564, _565), _1376);
        _1458 = _1446.x * cbModelParam._m0[1u].y;
        _1460 = _1446.y * cbModelParam._m0[1u].y;
        _1462 = _1446.z * cbModelParam._m0[1u].y;
    }
    float _1466 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _386);
    float _1467 = isnan(_1466) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1466 : min(cbModelParam._m0[25u].w, _1466));
    float _1560;
    float _1562;
    float _1564;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1524 = fma(_627, cbModelParam._m0[21u].z, fma(_623, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _619)) + cbModelParam._m0[21u].w;
        float _1528 = fma(_627, cbModelParam._m0[22u].z, fma(_623, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _619)) + cbModelParam._m0[22u].w;
        float _1532 = fma(_627, cbModelParam._m0[23u].z, fma(_623, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _619)) + cbModelParam._m0[23u].w;
        float _1535 = fma(_565, cbModelParam._m0[21u].z, fma(_564, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _563));
        float _1538 = fma(_565, cbModelParam._m0[22u].z, fma(_564, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _563));
        float _1541 = fma(_565, cbModelParam._m0[23u].z, fma(_564, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _563));
        float _1703;
        if (_1535 > 0.0)
        {
            _1703 = abs((1.0 - _1524) / _1535);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1535 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1524 + 1.0) / _1535);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1703 = frontier_phi_27_23_ladder;
        }
        float _1982;
        if (_1538 > 0.0)
        {
            _1982 = abs((1.0 - _1528) / _1538);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1538 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1528 + 1.0) / _1538);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1982 = frontier_phi_39_34_ladder;
        }
        float _2195;
        if (_1541 > 0.0)
        {
            _2195 = abs((1.0 - _1532) / _1541);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1541 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1532 + 1.0) / _1541);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2195 = frontier_phi_48_45_ladder;
        }
        float _2197 = isnan(_1982) ? _1703 : (isnan(_1703) ? _1982 : min(_1703, _1982));
        float _2198 = isnan(_2195) ? _2197 : (isnan(_2197) ? _2195 : min(_2197, _2195));
        float _2202 = (_2198 * _1535) + _1524;
        float _2203 = (_2198 * _1538) + _1528;
        float _2204 = (_2198 * _1541) + _1532;
        float _2205 = _2198 * 9.9999997473787516355514526367188e-05;
        float _2206 = (-1.0) - _2205;
        float _2208 = _2205 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2204 > _2208) || ((_2204 < _2206) || ((_2203 > _2208) || ((_2203 < _2206) || ((_2202 < _2206) || (_2202 > _2208))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2402 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2204, cbModelParam._m0[17u].z, fma(_2203, cbModelParam._m0[17u].y, _2202 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2204, cbModelParam._m0[18u].z, fma(_2203, cbModelParam._m0[18u].y, _2202 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2204, cbModelParam._m0[19u].z, fma(_2203, cbModelParam._m0[19u].y, _2202 * cbModelParam._m0[19u].x))), _1467);
            frontier_phi_24_48_ladder = _2402.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2402.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2402.x * cbModelParam._m0[1u].z;
        }
        _1560 = frontier_phi_24_48_ladder_2;
        _1562 = frontier_phi_24_48_ladder_1;
        _1564 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1544 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_563, _564, _565), _1467);
        _1560 = _1544.x * cbModelParam._m0[1u].z;
        _1562 = _1544.y * cbModelParam._m0[1u].z;
        _1564 = _1544.z * cbModelParam._m0[1u].z;
    }
    float _1577 = (((_590 * _540) + _591) * _555) * ((cbModelParam._m0[1u].w * (_1560 - _1458)) + _1458);
    float _1579 = (((_590 * _542) + _591) * _555) * ((cbModelParam._m0[1u].w * (_1562 - _1460)) + _1460);
    float _1581 = (((_590 * _543) + _591) * _555) * ((cbModelParam._m0[1u].w * (_1564 - _1462)) + _1462);
    float _1584 = fma(_1581, cbSceneParam._m0[89u].z, fma(_1579, cbSceneParam._m0[89u].y, _1577 * cbSceneParam._m0[89u].x));
    float _1587 = fma(_1581, cbSceneParam._m0[90u].z, fma(_1579, cbSceneParam._m0[90u].y, _1577 * cbSceneParam._m0[90u].x));
    float _1590 = fma(_1581, cbSceneParam._m0[91u].z, fma(_1579, cbSceneParam._m0[91u].y, _1577 * cbSceneParam._m0[91u].x));
    vec4 _1598 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_473, _474));
    float _1600 = _1598.w;
    float _1612 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1600);
    float _1613 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1600);
    float _1614 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1600);
    uvec4 _1618 = floatBitsToUint(cbInstanceData._m0[_514 + 5u]);
    uint _1620 = _1618.x * 14u;
    uint _1621 = _1620 + 13u;
    float _1628 = _555 + (-1.0);
    float _1633 = (cbLight._m0[_1621].x * _1628) + 1.0;
    float _1634 = (cbLight._m0[_1621].y * _1628) + 1.0;
    float _1635 = (cbLight._m0[_1621].z * _1628) + 1.0;
    float _1636 = (cbLight._m0[_1621].w * _1628) + 1.0;
    uint _1637 = _1620 + 5u;
    float _1643 = isnan(1.0) ? _1634 : (isnan(_1634) ? 1.0 : min(_1634, 1.0));
    uint _1647 = _1620 + 4u;
    float _1656 = isnan(1.0) ? _1633 : (isnan(_1633) ? 1.0 : min(_1633, 1.0));
    uint _1660 = _1620 | 1u;
    float _1671 = dot(vec3(cbLight._m0[_1620].xyz), vec3(_383, _384, _385));
    float _1674 = dot(vec3(cbLight._m0[_1660].xyz), vec3(_383, _384, _385));
    float _3790 = isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0));
    float _3801 = isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0));
    float _1679 = (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0))) * 0.3183098733425140380859375;
    float _1681 = (isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) * 0.3183098733425140380859375;
    float _1688 = ((cbLight._m0[_1637].x * _1643) * _1681) + (((cbLight._m0[_1647].x * _1612) * _1656) * _1679);
    float _1689 = ((_1643 * cbLight._m0[_1637].y) * _1681) + (((cbLight._m0[_1647].y * _1613) * _1656) * _1679);
    float _1690 = ((_1643 * cbLight._m0[_1637].z) * _1681) + (((cbLight._m0[_1647].z * _1614) * _1656) * _1679);
    uvec4 _1695 = floatBitsToUint(cbLight._m0[_1620 + 12u]);
    bool _1697 = _1695.x == 0u;
    float _1708;
    float _1710;
    float _1712;
    if (_1697)
    {
        _1708 = _1688;
        _1710 = _1689;
        _1712 = _1690;
    }
    else
    {
        uint _1716 = _1620 + 6u;
        float _1732 = (dot(vec3(cbLight._m0[_1620 + 2u].xyz), vec3(_383, _384, _385)) * 0.5) + 0.5;
        float _1733 = _1732 * _1732;
        float _3812 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0));
        float _1734 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _1735 = isnan(1.0) ? _1635 : (isnan(_1635) ? 1.0 : min(_1635, 1.0));
        _1708 = (((cbLight._m0[_1716].x * 0.3183098733425140380859375) * _1734) * _1735) + _1688;
        _1710 = (((cbLight._m0[_1716].y * 0.3183098733425140380859375) * _1734) * _1735) + _1689;
        _1712 = (((cbLight._m0[_1716].z * 0.3183098733425140380859375) * _1734) * _1735) + _1690;
    }
    bool _1715 = _1695.y == 0u;
    float _1753;
    float _1755;
    float _1757;
    if (_1715)
    {
        _1753 = _1708;
        _1755 = _1710;
        _1757 = _1712;
    }
    else
    {
        uint _1926 = _1620 + 7u;
        float _1942 = (dot(vec3(cbLight._m0[_1620 + 3u].xyz), vec3(_383, _384, _385)) * 0.5) + 0.5;
        float _1943 = _1942 * _1942;
        float _3828 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
        float _1944 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
        float _1945 = isnan(1.0) ? _1636 : (isnan(_1636) ? 1.0 : min(_1636, 1.0));
        _1753 = (((cbLight._m0[_1926].x * 0.3183098733425140380859375) * _1944) * _1945) + _1708;
        _1755 = (((cbLight._m0[_1926].y * 0.3183098733425140380859375) * _1944) * _1945) + _1710;
        _1757 = (((cbLight._m0[_1926].z * 0.3183098733425140380859375) * _1944) * _1945) + _1712;
    }
    uint _1760 = _1620 + 8u;
    float _1773 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1620].w)) * _386) * 0.949999988079071044921875);
    float _1774 = _1773 * _1773;
    float _1775 = cbLight._m0[_1620].x + _465;
    float _1776 = cbLight._m0[_1620].y + _466;
    float _1777 = cbLight._m0[_1620].z + _467;
    float _1781 = inversesqrt(dot(vec3(_1775, _1776, _1777), vec3(_1775, _1776, _1777)));
    float _1782 = _1781 * _1775;
    float _1783 = _1781 * _1776;
    float _1784 = _1781 * _1777;
    float _1785 = dot(vec3(_383, _384, _385), vec3(cbLight._m0[_1620].xyz));
    float _3844 = isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0));
    float _1788 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
    float _3855 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
    float _1789 = isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0));
    float _1790 = dot(vec3(_383, _384, _385), vec3(_1782, _1783, _1784));
    float _3866 = isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0));
    float _1793 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
    float _1794 = dot(vec3(cbLight._m0[_1620].xyz), vec3(_1782, _1783, _1784));
    float _3877 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
    float _1798 = _1774 * _1774;
    float _1802 = ((_1793 * _1793) * (_1798 + (-1.0))) + 1.0;
    float _1810 = exp2(log2(1.0 - (isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0)))) * 5.0);
    float _1811 = 0.959999978542327880859375 - _537;
    float _1813 = 0.959999978542327880859375 - _538;
    float _1814 = 0.959999978542327880859375 - _539;
    float _1821 = 1.0 - _1774;
    float _1832 = (0.5 / (((_1789 * ((_1788 * _1821) + _1774)) + 9.9999999392252902907785028219223e-09) + (((_1789 * _1821) + _1774) * _1788))) * _1788;
    float _3888 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
    float _1834 = (isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0))) * (_1798 / ((_1802 * _1802) * 3.141590118408203125));
    uint _1848 = _1620 + 9u;
    float _1859 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1660].w)) * _386) * 0.949999988079071044921875);
    float _1860 = _1859 * _1859;
    float _1861 = cbLight._m0[_1660].x + _465;
    float _1862 = cbLight._m0[_1660].y + _466;
    float _1863 = cbLight._m0[_1660].z + _467;
    float _1867 = inversesqrt(dot(vec3(_1861, _1862, _1863), vec3(_1861, _1862, _1863)));
    float _1868 = _1867 * _1861;
    float _1869 = _1867 * _1862;
    float _1870 = _1867 * _1863;
    float _1871 = dot(vec3(_383, _384, _385), vec3(cbLight._m0[_1660].xyz));
    float _3899 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
    float _1874 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
    float _1875 = dot(vec3(_383, _384, _385), vec3(_1868, _1869, _1870));
    float _3910 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
    float _1878 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
    float _1879 = dot(vec3(cbLight._m0[_1660].xyz), vec3(_1868, _1869, _1870));
    float _3921 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
    float _1883 = _1860 * _1860;
    float _1887 = ((_1878 * _1878) * (_1883 + (-1.0))) + 1.0;
    float _1894 = exp2(log2(1.0 - (isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0)))) * 5.0);
    float _1901 = 1.0 - _1860;
    float _1911 = (0.5 / (((_1789 * ((_1874 * _1901) + _1860)) + 9.9999999392252902907785028219223e-09) + (((_1789 * _1901) + _1860) * _1874))) * _1874;
    float _3932 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
    float _1913 = (isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0))) * (_1883 / ((_1887 * _1887) * 3.141590118408203125));
    float _1923 = (((((_1894 * _1811) + _540) * cbLight._m0[_1848].x) * _1913) * _1643) + ((((cbLight._m0[_1760].x * _1612) * ((_1810 * _1811) + _540)) * _1834) * _1656);
    float _1924 = (((((_1894 * _1813) + _542) * cbLight._m0[_1848].y) * _1913) * _1643) + ((((cbLight._m0[_1760].y * _1613) * ((_1810 * _1813) + _542)) * _1834) * _1656);
    float _1925 = (((((_1894 * _1814) + _543) * cbLight._m0[_1848].z) * _1913) * _1643) + ((((cbLight._m0[_1760].z * _1614) * ((_1810 * _1814) + _543)) * _1834) * _1656);
    float _1987;
    float _1989;
    float _1991;
    if (_1697)
    {
        _1987 = _1923;
        _1989 = _1924;
        _1991 = _1925;
    }
    else
    {
        uint _1993 = _1620 + 2u;
        uint _1997 = _1620 + 10u;
        float _2011 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1993].w)) * _386) * 0.949999988079071044921875);
        float _2012 = _2011 * _2011;
        float _2013 = cbLight._m0[_1993].x + _465;
        float _2014 = cbLight._m0[_1993].y + _466;
        float _2015 = cbLight._m0[_1993].z + _467;
        float _2019 = inversesqrt(dot(vec3(_2013, _2014, _2015), vec3(_2013, _2014, _2015)));
        float _2020 = _2019 * _2013;
        float _2021 = _2019 * _2014;
        float _2022 = _2019 * _2015;
        float _2023 = dot(vec3(_383, _384, _385), vec3(cbLight._m0[_1993].xyz));
        float _3943 = isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0));
        float _2026 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
        float _2027 = dot(vec3(_383, _384, _385), vec3(_2020, _2021, _2022));
        float _3954 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
        float _2030 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
        float _2031 = dot(vec3(cbLight._m0[_1993].xyz), vec3(_2020, _2021, _2022));
        float _3965 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
        float _2035 = _2012 * _2012;
        float _2039 = ((_2030 * _2030) * (_2035 + (-1.0))) + 1.0;
        float _2046 = exp2(log2(1.0 - (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0)))) * 5.0);
        float _2053 = 1.0 - _2012;
        float _2063 = (0.5 / (((_1789 * ((_2026 * _2053) + _2012)) + 9.9999999392252902907785028219223e-09) + (((_1789 * _2053) + _2012) * _2026))) * _2026;
        float _3976 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
        float _2065 = (isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * (_2035 / ((_2039 * _2039) * 3.141590118408203125));
        float _2066 = isnan(1.0) ? _1635 : (isnan(_1635) ? 1.0 : min(_1635, 1.0));
        _1987 = (((((_2046 * _1811) + _540) * cbLight._m0[_1997].x) * _2065) * _2066) + _1923;
        _1989 = (((((_2046 * _1813) + _542) * cbLight._m0[_1997].y) * _2065) * _2066) + _1924;
        _1991 = (((((_2046 * _1814) + _543) * cbLight._m0[_1997].z) * _2065) * _2066) + _1925;
    }
    float _2101;
    float _2103;
    float _2105;
    if (_1715)
    {
        _2101 = _1987;
        _2103 = _1989;
        _2105 = _1991;
    }
    else
    {
        uint _2112 = _1620 + 3u;
        uint _2116 = _1620 + 11u;
        float _2130 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2112].w)) * _386) * 0.949999988079071044921875);
        float _2131 = _2130 * _2130;
        float _2132 = cbLight._m0[_2112].x + _465;
        float _2133 = cbLight._m0[_2112].y + _466;
        float _2134 = cbLight._m0[_2112].z + _467;
        float _2138 = inversesqrt(dot(vec3(_2132, _2133, _2134), vec3(_2132, _2133, _2134)));
        float _2139 = _2138 * _2132;
        float _2140 = _2138 * _2133;
        float _2141 = _2138 * _2134;
        float _2142 = dot(vec3(_383, _384, _385), vec3(cbLight._m0[_2112].xyz));
        float _3992 = isnan(0.0) ? _2142 : (isnan(_2142) ? 0.0 : max(_2142, 0.0));
        float _2145 = isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0));
        float _2146 = dot(vec3(_383, _384, _385), vec3(_2139, _2140, _2141));
        float _4003 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
        float _2149 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _2150 = dot(vec3(cbLight._m0[_2112].xyz), vec3(_2139, _2140, _2141));
        float _4014 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
        float _2154 = _2131 * _2131;
        float _2158 = ((_2149 * _2149) * (_2154 + (-1.0))) + 1.0;
        float _2165 = exp2(log2(1.0 - (isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0)))) * 5.0);
        float _2172 = 1.0 - _2131;
        float _2182 = (0.5 / (((_1789 * ((_2145 * _2172) + _2131)) + 9.9999999392252902907785028219223e-09) + (((_1789 * _2172) + _2131) * _2145))) * _2145;
        float _4025 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
        float _2184 = (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * (_2154 / ((_2158 * _2158) * 3.141590118408203125));
        float _2185 = isnan(1.0) ? _1636 : (isnan(_1636) ? 1.0 : min(_1636, 1.0));
        _2101 = (((((_2165 * _1811) + _540) * cbLight._m0[_2116].x) * _2184) * _2185) + _1987;
        _2103 = (((((_2165 * _1813) + _542) * cbLight._m0[_2116].y) * _2184) * _2185) + _1989;
        _2105 = (((((_2165 * _1814) + _543) * cbLight._m0[_2116].z) * _2184) * _2185) + _1991;
    }
    float _2319;
    float _2321;
    float _2323;
    float _2325;
    float _2327;
    float _2329;
    if (_1618.y == 0u)
    {
        float _2260 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2261 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2260;
        float _2262 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2260;
        float _2263 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2260;
        uvec4 _2275 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2276 = _2275.x;
        uint _2287 = uint((float(_2275.y) * floor(float(uint(cbSceneParam._m0[85u].y * _474) / _2276))) + floor(float(uint(cbSceneParam._m0[85u].x * _473) / _2276)));
        float _2297 = (log2(_2263 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2298 = isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0));
        uint _2301 = uint(isnan(14.0) ? _2298 : (isnan(_2298) ? 14.0 : min(_2298, 14.0)));
        uvec4 _2306 = texelFetch(g_lightClusterGridBuffer, int(((_2301 << 2u) + (_2287 << 6u)) >> 2u));
        uint _2307 = _2306.x;
        uint _2308 = _2275.z;
        float _2407;
        float _2409;
        float _2411;
        float _2413;
        float _2415;
        float _2417;
        if (((((1u << ((_2308 >> 4u) & 15u)) + 4294967295u) & _2307) == 0u) || ((_2308 & 240u) == 0u))
        {
            _2407 = 0.0;
            _2409 = 0.0;
            _2411 = 0.0;
            _2413 = 0.0;
            _2415 = 0.0;
            _2417 = 0.0;
        }
        else
        {
            float _2408;
            float _2410;
            float _2412;
            float _2414;
            float _2416;
            float _2418;
            float _2551 = 0.0;
            float _2552 = 0.0;
            float _2553 = 0.0;
            float _2554 = 0.0;
            float _2555 = 0.0;
            float _2556 = 0.0;
            uint _2557 = 0u;
            uint _2566;
            bool _2567;
            for (;;)
            {
                _2566 = texelFetch(g_lightClassification, int((((_2301 << 5u) + (_2287 << 9u)) + (_2557 << 2u)) >> 2u)).x;
                _2567 = _2566 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2567)
                {
                    frontier_phi_63_pred = _2556;
                    frontier_phi_63_pred_1 = _2555;
                    frontier_phi_63_pred_2 = _2554;
                    frontier_phi_63_pred_3 = _2553;
                    frontier_phi_63_pred_4 = _2552;
                    frontier_phi_63_pred_5 = _2551;
                }
                else
                {
                    float _2675;
                    float _2676;
                    float _2677;
                    float _2678;
                    float _2679;
                    float _2680;
                    uint _2681;
                    _2675 = _2551;
                    _2676 = _2552;
                    _2677 = _2553;
                    _2678 = _2554;
                    _2679 = _2555;
                    _2680 = _2556;
                    _2681 = _2566;
                    float _2607;
                    float _2608;
                    float _2609;
                    float _2610;
                    float _2611;
                    float _2612;
                    for (;;)
                    {
                        uint _2685 = uint(findLSB(_2681)) + (_2557 << 5u);
                        uint _2682 = (_2681 + 4294967295u) & _2681;
                        uint _2687 = _2685 * 48u;
                        vec4 _2701 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2687)).x, texelFetch(g_PointLightRenderingBuffer, int(_2687 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2687 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2687 + 3u)).x));
                        uint _2707 = (_2685 * 48u) + 4u;
                        vec4 _2720 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2707)).x, texelFetch(g_PointLightRenderingBuffer, int(_2707 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2707 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2707 + 3u)).x));
                        uint _2726 = (_2685 * 48u) + 8u;
                        vec3 _2737 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2726)).x, texelFetch(g_PointLightRenderingBuffer, int(_2726 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2726 + 2u)).x));
                        float _2741 = _2701.x - _2261;
                        float _2742 = _2701.y - _2262;
                        float _2743 = _2701.z - _2263;
                        float _2744 = dot(vec3(_2741, _2742, _2743), vec3(_2741, _2742, _2743));
                        float _2747 = inversesqrt(_2744);
                        float _2748 = _2747 * _2741;
                        float _2749 = _2747 * _2742;
                        float _2750 = _2747 * _2743;
                        float _2751 = dot(vec3(_495, _498, _501), vec3(_2748, _2749, _2750));
                        float _2756 = 1.0 - (_2744 * _2701.w);
                        float _4051 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
                        float _2757 = isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0));
                        float _2758 = sqrt(_2744) * _2720.w;
                        float _2761 = 1.39999997615814208984375 / (_2758 + 1.39999997615814208984375);
                        float _2762 = _2761 * _2761;
                        float _2765 = ((1.0 - _2762) * _2751) + _2762;
                        float _2768 = _2758 * _2758;
                        float _2772 = ((isnan(0.0) ? _2765 : (isnan(_2765) ? 0.0 : max(_2765, 0.0))) * _2757) / ((_2768 * 0.699999988079071044921875) + 1.0);
                        float _2776 = (-0.0) - _2261;
                        float _2777 = (-0.0) - _2262;
                        float _2778 = (-0.0) - _2263;
                        float _2782 = inversesqrt(dot(vec3(_2776, _2777, _2778), vec3(_2776, _2777, _2778)));
                        float _2783 = _2782 * _2776;
                        float _2784 = _2782 * _2777;
                        float _2785 = _2782 * _2778;
                        float _2793 = exp2(log2(1.0 / ((_2768 * 3.5) + 5.0)) * 0.25);
                        float _2794 = 1.0 - _571;
                        float _2801 = sqrt(1.0 - ((1.0 - (_2794 * _2794)) * (1.0 - (_2793 * _2793))));
                        float _2802 = _2801 * _2801;
                        float _2803 = _2802 * _2802;
                        float _2804 = _2783 + _2748;
                        float _2805 = _2784 + _2749;
                        float _2806 = _2785 + _2750;
                        float _2810 = inversesqrt(dot(vec3(_2804, _2805, _2806), vec3(_2804, _2805, _2806)));
                        float _2814 = dot(vec3(_495, _498, _501), vec3(_2783, _2784, _2785));
                        float _4067 = isnan(0.0) ? _2814 : (isnan(_2814) ? 0.0 : max(_2814, 0.0));
                        float _2817 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
                        float _2818 = dot(vec3(_495, _498, _501), vec3(_2810 * _2804, _2810 * _2805, _2810 * _2806));
                        float _4078 = isnan(0.0) ? _2818 : (isnan(_2818) ? 0.0 : max(_2818, 0.0));
                        float _2821 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
                        float _2825 = ((_2821 * _2821) * (_2803 + (-1.0))) + 1.0;
                        float _2826 = _2761 * _2802;
                        float _2827 = _2826 * _2826;
                        float _2830 = ((1.0 - _2827) * _2751) + _2827;
                        float _4089 = isnan(0.0) ? _2830 : (isnan(_2830) ? 0.0 : max(_2830, 0.0));
                        float _2831 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
                        float _2832 = 1.0 - _2802;
                        float _2842 = (0.5 / (((_2831 * ((_2817 * _2832) + _2802)) + 9.9999999392252902907785028219223e-09) + (((_2831 * _2832) + _2802) * _2817))) * _2831;
                        float _4100 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
                        float _2853 = (((_2803 * 3.1415927410125732421875) * (isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0)))) / ((_2825 * _2825) * ((_2768 * 2.1991131305694580078125) + 3.141590118408203125))) * _2757;
                        _2610 = (_2772 * _2720.x) + _2678;
                        _2611 = (_2772 * _2720.y) + _2679;
                        _2612 = (_2772 * _2720.z) + _2680;
                        _2607 = (_2853 * _2737.x) + _2675;
                        _2608 = (_2853 * _2737.y) + _2676;
                        _2609 = (_2853 * _2737.z) + _2677;
                        if (_2682 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2675 = _2607;
                            _2676 = _2608;
                            _2677 = _2609;
                            _2678 = _2610;
                            _2679 = _2611;
                            _2680 = _2612;
                            _2681 = _2682;
                        }
                    }
                    frontier_phi_63_pred = _2612;
                    frontier_phi_63_pred_1 = _2611;
                    frontier_phi_63_pred_2 = _2610;
                    frontier_phi_63_pred_3 = _2609;
                    frontier_phi_63_pred_4 = _2608;
                    frontier_phi_63_pred_5 = _2607;
                }
                _2418 = frontier_phi_63_pred;
                _2416 = frontier_phi_63_pred_1;
                _2414 = frontier_phi_63_pred_2;
                _2412 = frontier_phi_63_pred_3;
                _2410 = frontier_phi_63_pred_4;
                _2408 = frontier_phi_63_pred_5;
                uint _2558 = _2557 + 1u;
                if (_2558 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2551 = _2408;
                    _2552 = _2410;
                    _2553 = _2412;
                    _2554 = _2414;
                    _2555 = _2416;
                    _2556 = _2418;
                    _2557 = _2558;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2407 = _2408;
            _2409 = _2410;
            _2411 = _2412;
            _2413 = _2414;
            _2415 = _2416;
            _2417 = _2418;
        }
        uvec4 _2421 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2422 = _2421.z;
        uint _2424 = (_2422 >> 8u) & 15u;
        float _2519;
        float _2521;
        float _2523;
        float _2525;
        float _2527;
        float _2529;
        if (((4294967295u << _2424) & _2307) == 0u)
        {
            _2519 = _2407;
            _2521 = _2409;
            _2523 = _2411;
            _2525 = _2413;
            _2527 = _2415;
            _2529 = _2417;
        }
        else
        {
            float _2544 = inversesqrt(dot(vec3(_2261, _2262, _2263), vec3(_2261, _2262, _2263)));
            float _2545 = _2544 * _2261;
            float _2546 = _2544 * _2262;
            float _2547 = _2544 * _2263;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2424 < ((_2422 >> 12u) & 15u))
            {
                float _2520;
                float _2522;
                float _2524;
                float _2526;
                float _2528;
                float _2530;
                float _2658 = _2407;
                float _2659 = _2409;
                float _2660 = _2411;
                float _2661 = _2413;
                float _2662 = _2415;
                float _2663 = _2417;
                uint _2664 = _2424;
                uint _2673;
                bool _2674;
                for (;;)
                {
                    _2673 = texelFetch(g_lightClassification, int((((_2301 << 5u) + (_2287 << 9u)) + (_2664 << 2u)) >> 2u)).x;
                    _2674 = _2673 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2674)
                    {
                        frontier_phi_69_pred = _2663;
                        frontier_phi_69_pred_1 = _2662;
                        frontier_phi_69_pred_2 = _2661;
                        frontier_phi_69_pred_3 = _2660;
                        frontier_phi_69_pred_4 = _2659;
                        frontier_phi_69_pred_5 = _2658;
                    }
                    else
                    {
                        float _2858;
                        float _2859;
                        float _2860;
                        float _2861;
                        float _2862;
                        float _2863;
                        float _3154;
                        float _3155;
                        float _3156;
                        float _3157;
                        float _3158;
                        float _3159;
                        float _2871 = _2658;
                        float _2872 = _2659;
                        float _2873 = _2660;
                        float _2874 = _2661;
                        float _2875 = _2662;
                        float _2876 = _2663;
                        uint _2877 = _2673;
                        uint _2878;
                        vec4 _2903;
                        float _2904;
                        vec4 _2919;
                        vec3 _2931;
                        vec4 _2947;
                        vec4 _2963;
                        float _3010;
                        bool _3011;
                        for (;;)
                        {
                            uint _2888 = ((_2664 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2877));
                            _2878 = (_2877 + 4294967295u) & _2877;
                            uint _2890 = _2888 * 40u;
                            _2903 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2890)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 3u)).x));
                            _2904 = _2903.w;
                            uint _2906 = (_2888 * 40u) + 4u;
                            _2919 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2906)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 3u)).x));
                            uint _2921 = (_2888 * 40u) + 8u;
                            _2931 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2921)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 2u)).x));
                            uint _2934 = (_2888 * 40u) + 16u;
                            _2947 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2934)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2934 + 3u)).x));
                            uint _2950 = (_2888 * 40u) + 20u;
                            _2963 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2950)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 3u)).x));
                            uint _2966 = (_2888 * 40u) + 24u;
                            vec4 _2979 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2966)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 3u)).x));
                            uint _2985 = (_2888 * 40u) + 28u;
                            vec4 _2998 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2985)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 3u)).x));
                            _3010 = fma(_2263, _2998.z, fma(_2262, _2998.y, _2998.x * _2261)) + _2998.w;
                            _3011 = !((fma(_2263, _2979.z, fma(_2262, _2979.y, _2979.x * _2261)) + _2979.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_3011)
                            {
                                float _3038 = _2903.x - _2261;
                                float _3039 = _2903.y - _2262;
                                float _3040 = _2903.z - _2263;
                                float _3041 = dot(vec3(_3038, _3039, _3040), vec3(_3038, _3039, _3040));
                                float _3044 = inversesqrt(_3041);
                                float _3045 = _3044 * _3038;
                                float _3046 = _3044 * _3039;
                                float _3047 = _3044 * _3040;
                                float _3051 = 1.0 - (_3041 / (_2904 * _2904));
                                float _4111 = isnan(0.0) ? _3051 : (isnan(_3051) ? 0.0 : max(_3051, 0.0));
                                float _3052 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
                                float _3056 = sqrt(_3041) * _2919.w;
                                float _3058 = 1.39999997615814208984375 / (_3056 + 1.39999997615814208984375);
                                float _3059 = _3058 * _3058;
                                float _3062 = ((1.0 - _3059) * dot(vec3(_3045, _3046, _3047), vec3(_495, _498, _501))) + _3059;
                                float _3065 = _3056 * _3056;
                                float _3069 = (fma(_2263, _2947.z, fma(_2262, _2947.y, _2947.x * _2261)) + _2947.w) / _3010;
                                float _3070 = (fma(_2263, _2963.z, fma(_2262, _2963.y, _2963.x * _2261)) + _2963.w) / _3010;
                                float _3074 = 1.0 - dot(vec2(_3069, _3070), vec2(_3069, _3070));
                                float _4127 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0));
                                float _3075 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
                                float _3076 = _3075 * (((isnan(0.0) ? _3062 : (isnan(_3062) ? 0.0 : max(_3062, 0.0))) * _3052) / ((_3065 * 0.699999988079071044921875) + 1.0));
                                float _3088 = exp2(log2(1.0 / ((_3065 * 3.5) + 5.0)) * 0.25);
                                float _3089 = 1.0 - _571;
                                float _3096 = sqrt(1.0 - ((1.0 - (_3089 * _3089)) * (1.0 - (_3088 * _3088))));
                                float _3097 = _3096 * _3096;
                                float _3098 = _3097 * _3097;
                                float _3099 = _3045 - _2545;
                                float _3100 = _3046 - _2546;
                                float _3101 = _3047 - _2547;
                                float _3105 = inversesqrt(dot(vec3(_3099, _3100, _3101), vec3(_3099, _3100, _3101)));
                                float _3109 = dot(vec3(_495, _498, _501), vec3((-0.0) - _2545, (-0.0) - _2546, (-0.0) - _2547));
                                float _4138 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
                                float _3112 = isnan(1.0) ? _4138 : (isnan(_4138) ? 1.0 : min(_4138, 1.0));
                                float _3113 = dot(vec3(_495, _498, _501), vec3(_3105 * _3099, _3105 * _3100, _3105 * _3101));
                                float _4149 = isnan(0.0) ? _3113 : (isnan(_3113) ? 0.0 : max(_3113, 0.0));
                                float _3116 = isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0));
                                float _3120 = ((_3116 * _3116) * (_3098 + (-1.0))) + 1.0;
                                float _3121 = _3058 * _3097;
                                float _3122 = _3121 * _3121;
                                float _3128 = ((1.0 - _3122) * dot(vec3(_495, _498, _501), vec3(_3045, _3046, _3047))) + _3122;
                                float _4160 = isnan(0.0) ? _3128 : (isnan(_3128) ? 0.0 : max(_3128, 0.0));
                                float _3129 = isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0));
                                float _3130 = 1.0 - _3097;
                                float _3140 = (0.5 / (((_3129 * ((_3112 * _3130) + _3097)) + 9.9999999392252902907785028219223e-09) + (((_3129 * _3130) + _3097) * _3112))) * _3129;
                                float _4171 = isnan(0.0) ? _3140 : (isnan(_3140) ? 0.0 : max(_3140, 0.0));
                                float _3150 = (_3075 * _3052) * (((_3098 * 3.1415927410125732421875) * (isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0)))) / ((_3120 * _3120) * ((_3065 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3076 * _2919.z;
                                frontier_phi_75_pred_1 = _3076 * _2919.y;
                                frontier_phi_75_pred_2 = _3076 * _2919.x;
                                frontier_phi_75_pred_3 = _3150 * _2931.z;
                                frontier_phi_75_pred_4 = _3150 * _2931.y;
                                frontier_phi_75_pred_5 = _3150 * _2931.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3159 = frontier_phi_75_pred;
                            _3158 = frontier_phi_75_pred_1;
                            _3157 = frontier_phi_75_pred_2;
                            _3156 = frontier_phi_75_pred_3;
                            _3155 = frontier_phi_75_pred_4;
                            _3154 = frontier_phi_75_pred_5;
                            _2861 = _3157 + _2874;
                            _2862 = _3158 + _2875;
                            _2863 = _3159 + _2876;
                            _2858 = _3154 + _2871;
                            _2859 = _3155 + _2872;
                            _2860 = _3156 + _2873;
                            if (_2878 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2871 = _2858;
                                _2872 = _2859;
                                _2873 = _2860;
                                _2874 = _2861;
                                _2875 = _2862;
                                _2876 = _2863;
                                _2877 = _2878;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2863;
                        frontier_phi_69_pred_1 = _2862;
                        frontier_phi_69_pred_2 = _2861;
                        frontier_phi_69_pred_3 = _2860;
                        frontier_phi_69_pred_4 = _2859;
                        frontier_phi_69_pred_5 = _2858;
                    }
                    _2530 = frontier_phi_69_pred;
                    _2528 = frontier_phi_69_pred_1;
                    _2526 = frontier_phi_69_pred_2;
                    _2524 = frontier_phi_69_pred_3;
                    _2522 = frontier_phi_69_pred_4;
                    _2520 = frontier_phi_69_pred_5;
                    uint _2665 = _2664 + 1u;
                    if (_2665 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2658 = _2520;
                        _2659 = _2522;
                        _2660 = _2524;
                        _2661 = _2526;
                        _2662 = _2528;
                        _2663 = _2530;
                        _2664 = _2665;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2530;
                frontier_phi_57_58_ladder_1 = _2528;
                frontier_phi_57_58_ladder_2 = _2526;
                frontier_phi_57_58_ladder_3 = _2524;
                frontier_phi_57_58_ladder_4 = _2522;
                frontier_phi_57_58_ladder_5 = _2520;
            }
            else
            {
                frontier_phi_57_58_ladder = _2417;
                frontier_phi_57_58_ladder_1 = _2415;
                frontier_phi_57_58_ladder_2 = _2413;
                frontier_phi_57_58_ladder_3 = _2411;
                frontier_phi_57_58_ladder_4 = _2409;
                frontier_phi_57_58_ladder_5 = _2407;
            }
            _2519 = frontier_phi_57_58_ladder_5;
            _2521 = frontier_phi_57_58_ladder_4;
            _2523 = frontier_phi_57_58_ladder_3;
            _2525 = frontier_phi_57_58_ladder_2;
            _2527 = frontier_phi_57_58_ladder_1;
            _2529 = frontier_phi_57_58_ladder;
        }
        float _2534 = isnan(1.0) ? _555 : (isnan(_555) ? 1.0 : min(_555, 1.0));
        _2319 = (_2534 * _2525) + _1753;
        _2321 = (_2534 * _2527) + _1755;
        _2323 = (_2534 * _2529) + _1757;
        _2325 = ((_2519 * _540) * _2534) + _2101;
        _2327 = ((_2521 * _542) * _2534) + _2103;
        _2329 = ((_2523 * _543) * _2534) + _2105;
    }
    else
    {
        _2319 = _1753;
        _2321 = _1755;
        _2323 = _1757;
        _2325 = _2101;
        _2327 = _2103;
        _2329 = _2105;
    }
    float _4187 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _4198 = isnan(0.0) ? _531 : (isnan(_531) ? 0.0 : max(_531, 0.0));
    float _4209 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    uint _2349 = _514 + 6u;
    float _2357 = _473 / cbSceneParam._m0[86u].x;
    float _2358 = _474 / cbSceneParam._m0[86u].y;
    vec4 _2372 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2357, _2358, (log2((isnan(cbSceneParam._m0[77u].w) ? _406 : (isnan(_406) ? cbSceneParam._m0[77u].w : min(_406, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2374 = _2372.x;
    float _2375 = _2372.y;
    float _2376 = _2372.z;
    float _2377 = _2372.w;
    float _2469;
    float _2471;
    float _2473;
    float _2475;
    if (_406 > cbSceneParam._m0[78u].w)
    {
        float _2432 = isnan(_406) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _406 : min(cbSceneParam._m0[80u].w, _406));
        float _2433 = _2432 / _406;
        float _2444 = _2433 * _458;
        float _2445 = _459 * _2433;
        float _2446 = (-0.0) - _2445;
        float _2447 = _2433 * _460;
        float _2449 = (cbSceneParam._m0[77u].w * _2446) / _2432;
        float _2450 = _2449 + cbSceneParam._m0[79u].w;
        float _2451 = cbSceneParam._m0[79u].w - _2445;
        float _2457 = sqrt(((_2444 * _2444) + (_2445 * _2445)) + (_2447 * _2447));
        float _2460 = (1.0 - (cbSceneParam._m0[77u].w / _2432)) * _2457;
        float _2465 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2467 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2620;
        if (abs((_2446 - _2449) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2620 = ((((_2450 > 0.0) ? exp2(_2465 * _2450) : (2.0 - exp2(_2467 * _2450))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2460;
        }
        else
        {
            float _2580 = 1.0 / cbSceneParam._m0[80u].x;
            float _2581 = isnan(_2451) ? _2450 : (isnan(_2450) ? _2451 : max(_2450, _2451));
            float _2582 = isnan(_2451) ? _2450 : (isnan(_2450) ? _2451 : min(_2450, _2451));
            float _2591 = isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : min(_2581, 0.0));
            float _2592 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : min(_2582, 0.0));
            _2620 = ((abs(_2457 / _2446) * cbSceneParam._m0[80u].y) * ((((_2591 - _2592) * 2.0) - ((exp2(_2465 * (isnan(0.0) ? _2581 : (isnan(_2581) ? 0.0 : max(_2581, 0.0)))) - exp2(_2465 * (isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0))))) * _2580)) - ((exp2(_2467 * _2591) - exp2(_2467 * _2592)) * _2580))) + (_2460 * cbSceneParam._m0[80u].z);
        }
        vec4 _2622 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2357, _2358, 1.0), 0.0);
        float _2631 = exp2((_2620 * (-1.44269502162933349609375)) * (1.0 - _2622.w));
        float _2632 = log2(_2631);
        float _2648 = log2(_2377);
        _2469 = (exp2(_2648 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2632 * cbSceneParam._m0[78u].x)) * _2622.x) / cbSceneParam._m0[78u].x)) + _2374;
        _2471 = (exp2(_2648 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2632 * cbSceneParam._m0[78u].y)) * _2622.y) / cbSceneParam._m0[78u].y)) + _2375;
        _2473 = (exp2(_2648 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2632 * cbSceneParam._m0[78u].z)) * _2622.z) / cbSceneParam._m0[78u].z)) + _2376;
        _2475 = _2631 * _2377;
    }
    else
    {
        _2469 = _2374;
        _2471 = _2375;
        _2473 = _2376;
        _2475 = _2377;
    }
    float _2487 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2488 = _2487 == 3.0;
    float _2489 = log2(_2475);
    float _2496 = exp2(_2489 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0))) * (_2319 + ((isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0))) * _555))) + ((_2325 + ((isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0))) * _1365)) * cbPerFrame._m0[3u].x));
    float _2497 = exp2(_2489 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0))) * (_2321 + ((isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0))) * _555))) + ((_2327 + ((isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0))) * _1365)) * cbPerFrame._m0[3u].x));
    float _2498 = exp2(_2489 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0))) * (_2323 + ((isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0))) * _555))) + ((_2329 + ((isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0))) * _1365)) * cbPerFrame._m0[3u].x));
    float _2507 = (_2487 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2507 * (_2488 ? _2496 : (_2496 + (cbSceneParam._m0[72u].w * _2469)));
    SV_Target.y = _2507 * (_2488 ? _2497 : (_2497 + (cbSceneParam._m0[72u].w * _2471)));
    SV_Target.z = _2507 * (_2488 ? _2498 : (_2498 + (cbSceneParam._m0[72u].w * _2473)));
    SV_Target.w = cbInstanceData._m0[_2349].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2349].w;
}


