#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _928;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _213;
    float _214;
    float _215;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
    }
    else
    {
        _213 = _199;
        _214 = _200;
        _215 = _201;
    }
    vec4 _234 = texture(sampler2D(M_AMSN_Snow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _239 = _234.z;
    float _243 = (_234.x * 2.0) + (-1.0);
    float _245 = (_234.y * 2.0) + (-1.0);
    float _246 = dot(vec2(_243, _245), vec2(_243, _245));
    float _3264 = isnan(0.0) ? _246 : (isnan(_246) ? 0.0 : max(_246, 0.0));
    float _252 = sqrt(1.0 - (isnan(1.0) ? _3264 : (isnan(_3264) ? 1.0 : min(_3264, 1.0))));
    float _255 = fma(_252, _213, fma(_245, _206, _243 * _192));
    float _258 = fma(_252, _214, fma(_245, _207, _243 * _193));
    float _261 = fma(_252, _215, fma(_245, _208, _243 * _194));
    float _270 = exp2(log2(inversesqrt(dot(vec3(_255, _258, _261), vec3(_255, _258, _261))) * _258) * cbMtdParam._m0[9u].x) * cbMtdParam._m0[9u].y;
    float _3275 = isnan(0.0) ? _270 : (isnan(_270) ? 0.0 : max(_270, 0.0));
    float _271 = isnan(1.0) ? _3275 : (isnan(_3275) ? 1.0 : min(_3275, 1.0));
    vec4 _283 = texture(sampler2D(M_AMSN_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _299 = texture(sampler2D(M_AMSN_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _301 = _299.x;
    float _302 = _299.y;
    float _303 = _299.z;
    float _310 = ((_283.x - _301) * _271) + _301;
    float _311 = ((_283.y - _302) * _271) + _302;
    float _312 = ((_283.z - _303) * _271) + _303;
    vec4 _325 = texture(sampler2D(M_AMSN_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _327 = _325.x;
    float _329 = _327 - (_327 * _271);
    vec4 _341 = texture(sampler2D(M_AMSN_Snow_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _348 = (_341.x * 2.0) + (-1.0);
    float _349 = (_341.y * 2.0) + (-1.0);
    float _350 = dot(vec2(_348, _349), vec2(_348, _349));
    float _3286 = isnan(0.0) ? _350 : (isnan(_350) ? 0.0 : max(_350, 0.0));
    float _358 = ((_341.z - _239) * _271) + _239;
    float _365 = ((_348 - _243) * _271) + _243;
    float _366 = ((_349 - _245) * _271) + _245;
    float _367 = ((sqrt(1.0 - (isnan(1.0) ? _3286 : (isnan(_3286) ? 1.0 : min(_3286, 1.0)))) - _252) * _271) + _252;
    float _370 = fma(_367, _213, fma(_366, _206, _365 * _192));
    float _373 = fma(_367, _214, fma(_366, _207, _365 * _193));
    float _376 = fma(_367, _215, fma(_366, _208, _365 * _194));
    float _380 = inversesqrt(dot(vec3(_370, _373, _376), vec3(_370, _373, _376)));
    float _381 = _380 * _370;
    float _382 = _380 * _373;
    float _383 = _380 * _376;
    float _3297 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _384 = isnan(1.0) ? _3297 : (isnan(_3297) ? 1.0 : min(_3297, 1.0));
    float _3308 = isnan(0.0) ? _310 : (isnan(_310) ? 0.0 : max(_310, 0.0));
    float _3319 = isnan(0.0) ? _311 : (isnan(_311) ? 0.0 : max(_311, 0.0));
    float _3330 = isnan(0.0) ? _312 : (isnan(_312) ? 0.0 : max(_312, 0.0));
    float _3341 = isnan(0.0) ? _329 : (isnan(_329) ? 0.0 : max(_329, 0.0));
    float _388 = isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0));
    float _404 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _446 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _456 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _446);
    float _457 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _446);
    float _458 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _446);
    float _462 = inversesqrt(dot(vec3(_456, _457, _458), vec3(_456, _457, _458)));
    float _463 = _456 * _462;
    float _464 = _457 * _462;
    float _465 = _458 * _462;
    float _471 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _472 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _493 = fma(_383, cbSceneParam._m0[5u].z, fma(_382, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _381));
    float _496 = fma(_383, cbSceneParam._m0[6u].z, fma(_382, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _381));
    float _499 = fma(_383, cbSceneParam._m0[7u].z, fma(_382, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _381));
    uint _512 = uint(roundEven(NORMAL.w)) * 13u;
    uint _515 = (_512 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _521 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0)))) * cbInstanceData._m0[_515].x;
    float _522 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0)))) * cbInstanceData._m0[_515].y;
    float _523 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0)))) * cbInstanceData._m0[_515].z;
    float _3352 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
    float _524 = isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0));
    float _3363 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _525 = isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0));
    float _3374 = isnan(0.0) ? _523 : (isnan(_523) ? 0.0 : max(_523, 0.0));
    float _526 = isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0));
    float _527 = 1.0 - _388;
    float _528 = _524 * _527;
    float _529 = _525 * _527;
    float _530 = _526 * _527;
    float _535 = (_524 + (-0.039999999105930328369140625)) * _388;
    float _536 = (_525 + (-0.039999999105930328369140625)) * _388;
    float _537 = (_526 + (-0.039999999105930328369140625)) * _388;
    float _538 = _535 + 0.039999999105930328369140625;
    float _540 = _536 + 0.039999999105930328369140625;
    float _541 = _537 + 0.039999999105930328369140625;
    vec4 _550 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _471, cbSceneParam._m0[86u].y * _472));
    float _553 = _550.x * TEXCOORD.z;
    float _554 = dot(vec3(_381, _382, _383), vec3(_463, _464, _465));
    float _557 = _554 * 2.0;
    float _561 = (_557 * _381) - _463;
    float _562 = (_557 * _382) - _464;
    float _563 = (_557 * _383) - _465;
    float _567 = abs(dot(vec3(_463, _464, _465), vec3(_381, _382, _383)));
    float _3385 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _569 = sqrt(_384);
    float _582 = exp2((_569 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_569 * 3.0));
    float _588 = (1.0 - _582) * ((_569 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _589 = _582 * _569;
    float _617 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _621 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _625 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _927;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    float _940;
    float _941;
    float _942;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _652 = fma(_625, cbModelParam._m0[26u].z, fma(_621, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _617));
        float _656 = fma(_625, cbModelParam._m0[27u].z, fma(_621, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _617));
        float _660 = fma(_625, cbModelParam._m0[28u].z, fma(_621, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _617));
        float _685 = _617 + _381;
        float _686 = _621 + _382;
        float _687 = _625 + _383;
        float _697 = fma(_687, cbModelParam._m0[26u].z, fma(_686, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _685)) - _652;
        float _698 = fma(_687, cbModelParam._m0[27u].z, fma(_686, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _685)) - _656;
        float _699 = fma(_687, cbModelParam._m0[28u].z, fma(_686, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _685)) - _660;
        float _703 = inversesqrt(dot(vec3(_697, _698, _699), vec3(_697, _698, _699)));
        float _716 = ((_703 * _697) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_652 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _717 = ((_703 * _698) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_656 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _718 = ((_703 * _699) / cbModelParam._m0[34u].z) + ((((((_660 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _721 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_716, _717, _718), 0.0);
        vec4 _728 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_716, _717, _718), 0.0);
        vec4 _735 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_716, _717, _718), 0.0);
        vec4 _742 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_716, _717, _718), 0.0);
        float _755 = exp2((_721.w + (-0.5)) * 20.0) * 2.0;
        float _756 = _755 * (_721.x + (-0.5));
        float _757 = _755 * (_721.y + (-0.5));
        float _758 = _755 * (_721.z + (-0.5));
        float _765 = exp2((_728.w + (-0.5)) * 20.0) * 2.0;
        float _766 = _765 * (_728.x + (-0.5));
        float _767 = _765 * (_728.y + (-0.5));
        float _768 = _765 * (_728.z + (-0.5));
        float _775 = exp2((_735.w + (-0.5)) * 20.0) * 2.0;
        float _776 = _775 * (_735.x + (-0.5));
        float _777 = _775 * (_735.y + (-0.5));
        float _778 = _775 * (_735.z + (-0.5));
        float _785 = exp2((_742.w + (-0.5)) * 20.0) * 2.0;
        float _786 = _785 * (_742.x + (-0.5));
        float _787 = _785 * (_742.y + (-0.5));
        float _788 = _785 * (_742.z + (-0.5));
        float _789 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _790 = isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0));
        float _791 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
        float _792 = _756 * 0.5;
        float _793 = _766 * 0.5;
        float _794 = _776 * 0.5;
        float _795 = dot(vec3(_792, _793, _794), vec3(_792, _793, _794));
        float _800 = (_795 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_795);
        float _809 = (dot(vec3(_381, _382, _383), vec3(_800 * _792, _800 * _793, _800 * _794)) + 1.0) * 0.5;
        float _3411 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        float _819 = sqrt(((_793 * _793) + (_792 * _792)) + (_794 * _794)) / (_789 + 9.9999997473787516355514526367188e-06);
        float _3422 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _820 = isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0));
        float _821 = _820 * 2.0;
        float _825 = (1.0 - _820) / (_820 + 1.0);
        float _3433 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _826 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
        float _835 = ((((1.0 - _826) * (_821 + 2.0)) * exp2(log2(isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0))) * (_821 + 1.0))) + _826) * _789;
        float _836 = _757 * 0.5;
        float _837 = _767 * 0.5;
        float _838 = _777 * 0.5;
        float _839 = dot(vec3(_836, _837, _838), vec3(_836, _837, _838));
        float _844 = (_839 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_839);
        float _852 = (dot(vec3(_381, _382, _383), vec3(_844 * _836, _844 * _837, _844 * _838)) + 1.0) * 0.5;
        float _3444 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _861 = sqrt(((_837 * _837) + (_836 * _836)) + (_838 * _838)) / (_790 + 9.9999997473787516355514526367188e-06);
        float _3455 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _862 = isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0));
        float _863 = _862 * 2.0;
        float _867 = (1.0 - _862) / (_862 + 1.0);
        float _3466 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _868 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
        float _877 = ((((1.0 - _868) * (_863 + 2.0)) * exp2(log2(isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0))) * (_863 + 1.0))) + _868) * _790;
        float _878 = _758 * 0.5;
        float _879 = _768 * 0.5;
        float _880 = _778 * 0.5;
        float _881 = dot(vec3(_878, _879, _880), vec3(_878, _879, _880));
        float _886 = (_881 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_881);
        float _894 = (dot(vec3(_381, _382, _383), vec3(_886 * _878, _886 * _879, _886 * _880)) + 1.0) * 0.5;
        float _3477 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _903 = sqrt(((_879 * _879) + (_878 * _878)) + (_880 * _880)) / (_791 + 9.9999997473787516355514526367188e-06);
        float _3488 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _904 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
        float _905 = _904 * 2.0;
        float _909 = (1.0 - _904) / (_904 + 1.0);
        float _3499 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _910 = isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0));
        float _919 = ((((1.0 - _910) * (_905 + 2.0)) * exp2(log2(isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0))) * (_905 + 1.0))) + _910) * _791;
        _927 = _758;
        _929 = _757;
        _930 = _756;
        _931 = _768;
        _932 = _767;
        _933 = _766;
        _934 = _778;
        _935 = _777;
        _936 = _776;
        _937 = _791;
        _938 = _790;
        _939 = _789;
        _940 = cbModelParam._m0[36u].z * (isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0)));
        _941 = cbModelParam._m0[36u].z * (isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0)));
        _942 = cbModelParam._m0[36u].z * (isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0)));
    }
    else
    {
        _927 = _928;
        _929 = _928;
        _930 = _928;
        _931 = _928;
        _932 = _928;
        _933 = _928;
        _934 = _928;
        _935 = _928;
        _936 = _928;
        _937 = _928;
        _938 = _928;
        _939 = _928;
        _940 = 0.0;
        _941 = 0.0;
        _942 = 0.0;
    }
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _968 = fma(_625, cbModelParam._m0[30u].z, fma(_621, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _617));
        float _972 = fma(_625, cbModelParam._m0[31u].z, fma(_621, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _617));
        float _976 = fma(_625, cbModelParam._m0[32u].z, fma(_621, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _617));
        float _999 = _617 + _381;
        float _1000 = _621 + _382;
        float _1001 = _625 + _383;
        float _1011 = fma(_1001, cbModelParam._m0[30u].z, fma(_1000, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _999)) - _968;
        float _1012 = fma(_1001, cbModelParam._m0[31u].z, fma(_1000, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _999)) - _972;
        float _1013 = fma(_1001, cbModelParam._m0[32u].z, fma(_1000, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _999)) - _976;
        float _1017 = inversesqrt(dot(vec3(_1011, _1012, _1013), vec3(_1011, _1012, _1013)));
        float _1030 = ((_1017 * _1011) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_968 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1031 = ((_1017 * _1012) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_972 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1032 = ((_1017 * _1013) / cbModelParam._m0[35u].z) + ((((((_976 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1034 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1030, _1031, _1032), 0.0);
        vec4 _1041 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1030, _1031, _1032), 0.0);
        vec4 _1048 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1030, _1031, _1032), 0.0);
        vec4 _1055 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1030, _1031, _1032), 0.0);
        float _1067 = exp2((_1034.w + (-0.5)) * 20.0) * 2.0;
        float _1068 = _1067 * (_1034.x + (-0.5));
        float _1069 = _1067 * (_1034.y + (-0.5));
        float _1070 = _1067 * (_1034.z + (-0.5));
        float _1077 = exp2((_1041.w + (-0.5)) * 20.0) * 2.0;
        float _1078 = _1077 * (_1041.x + (-0.5));
        float _1079 = _1077 * (_1041.y + (-0.5));
        float _1080 = _1077 * (_1041.z + (-0.5));
        float _1087 = exp2((_1048.w + (-0.5)) * 20.0) * 2.0;
        float _1088 = _1087 * (_1048.x + (-0.5));
        float _1089 = _1087 * (_1048.y + (-0.5));
        float _1090 = _1087 * (_1048.z + (-0.5));
        float _1097 = exp2((_1055.w + (-0.5)) * 20.0) * 2.0;
        float _1098 = _1097 * (_1055.x + (-0.5));
        float _1099 = _1097 * (_1055.y + (-0.5));
        float _1100 = _1097 * (_1055.z + (-0.5));
        float _1101 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1102 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1103 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1104 = _1068 * 0.5;
        float _1105 = _1078 * 0.5;
        float _1106 = _1088 * 0.5;
        float _1107 = dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106));
        float _1112 = (_1107 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1107);
        float _1120 = (dot(vec3(_381, _382, _383), vec3(_1112 * _1104, _1112 * _1105, _1112 * _1106)) + 1.0) * 0.5;
        float _3540 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1129 = sqrt(((_1105 * _1105) + (_1104 * _1104)) + (_1106 * _1106)) / (_1101 + 9.9999997473787516355514526367188e-06);
        float _3551 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
        float _1131 = _1130 * 2.0;
        float _1135 = (1.0 - _1130) / (_1130 + 1.0);
        float _3562 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
        float _1145 = ((((1.0 - _1136) * (_1131 + 2.0)) * exp2(log2(isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0))) * (_1131 + 1.0))) + _1136) * _1101;
        float _1146 = _1069 * 0.5;
        float _1147 = _1079 * 0.5;
        float _1148 = _1089 * 0.5;
        float _1149 = dot(vec3(_1146, _1147, _1148), vec3(_1146, _1147, _1148));
        float _1154 = (_1149 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1149);
        float _1162 = (dot(vec3(_381, _382, _383), vec3(_1154 * _1146, _1154 * _1147, _1154 * _1148)) + 1.0) * 0.5;
        float _3573 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1171 = sqrt(((_1147 * _1147) + (_1146 * _1146)) + (_1148 * _1148)) / (_1102 + 9.9999997473787516355514526367188e-06);
        float _3584 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
        float _1173 = _1172 * 2.0;
        float _1177 = (1.0 - _1172) / (_1172 + 1.0);
        float _3595 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
        float _1187 = ((((1.0 - _1178) * (_1173 + 2.0)) * exp2(log2(isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0))) * (_1173 + 1.0))) + _1178) * _1102;
        float _1188 = _1070 * 0.5;
        float _1189 = _1080 * 0.5;
        float _1190 = _1090 * 0.5;
        float _1191 = dot(vec3(_1188, _1189, _1190), vec3(_1188, _1189, _1190));
        float _1196 = (_1191 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1191);
        float _1204 = (dot(vec3(_381, _382, _383), vec3(_1196 * _1188, _1196 * _1189, _1196 * _1190)) + 1.0) * 0.5;
        float _3606 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1213 = sqrt(((_1189 * _1189) + (_1188 * _1188)) + (_1190 * _1190)) / (_1103 + 9.9999997473787516355514526367188e-06);
        float _3617 = isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0));
        float _1214 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
        float _1215 = _1214 * 2.0;
        float _1219 = (1.0 - _1214) / (_1214 + 1.0);
        float _3628 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
        float _1229 = ((((1.0 - _1220) * (_1215 + 2.0)) * exp2(log2(isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0))) * (_1215 + 1.0))) + _1220) * _1103;
        _1237 = _1070;
        _1238 = _1069;
        _1239 = _1068;
        _1240 = _1080;
        _1241 = _1079;
        _1242 = _1078;
        _1243 = _1090;
        _1244 = _1089;
        _1245 = _1088;
        _1246 = _1103;
        _1247 = _1102;
        _1248 = _1101;
        _1249 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0)));
        _1250 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0)));
        _1251 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0)));
    }
    else
    {
        _1237 = _928;
        _1238 = _928;
        _1239 = _928;
        _1240 = _928;
        _1241 = _928;
        _1242 = _928;
        _1243 = _928;
        _1244 = _928;
        _1245 = _928;
        _1246 = _928;
        _1247 = _928;
        _1248 = _928;
        _1249 = 0.0;
        _1250 = 0.0;
        _1251 = 0.0;
    }
    float _1261 = (cbModelParam._m0[1u].x * (_1249 - _940)) + _940;
    float _1262 = (cbModelParam._m0[1u].x * (_1250 - _941)) + _941;
    float _1263 = (cbModelParam._m0[1u].x * (_1251 - _942)) + _942;
    float _1284 = fma(_1263, cbSceneParam._m0[89u].z, fma(_1262, cbSceneParam._m0[89u].y, _1261 * cbSceneParam._m0[89u].x));
    float _1287 = fma(_1263, cbSceneParam._m0[90u].z, fma(_1262, cbSceneParam._m0[90u].y, _1261 * cbSceneParam._m0[90u].x));
    float _1290 = fma(_1263, cbSceneParam._m0[91u].z, fma(_1262, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1261));
    float _1305 = _561 * 0.5;
    float _1306 = _562 * 0.5;
    float _1307 = _563 * 0.5;
    float _1308 = dot(vec4(_1305, _1306, _1307, 1.0), vec4(_1239, _1242, _1245, _1248));
    float _1311 = dot(vec4(_1305, _1306, _1307, 1.0), vec4(_1238, _1241, _1244, _1247));
    float _1314 = dot(vec4(_1305, _1306, _1307, 1.0), vec4(_1237, _1240, _1243, _1246));
    float _1348;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1321 = dot(vec4(_1305, _1306, _1307, 1.0), vec4(_927, _931, _934, _937));
        float _1325 = dot(vec4(_1305, _1306, _1307, 1.0), vec4(_929, _932, _935, _938));
        float _1329 = dot(vec4(_1305, _1306, _1307, 1.0), vec4(_930, _933, _936, _939));
        float _1336 = dot(vec4(cbModelParam._m0[39u]), vec4(_1305, _1306, _1307, 1.0));
        _1348 = dot(vec3(isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)), isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0)), isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1336) ? 0.0 : (isnan(0.0) ? _1336 : max(0.0, _1336))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1348 = 1.0;
    }
    float _1359;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1350 = dot(vec4(cbModelParam._m0[40u]), vec4(_1305, _1306, _1307, 1.0));
        _1359 = dot(vec3(isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)), isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0)), isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1350) ? 0.0 : (isnan(0.0) ? _1350 : max(0.0, _1350))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1359 = 1.0;
    }
    float _1363 = (_1359 * cbModelParam._m0[1u].x) + (_1348 * (1.0 - cbModelParam._m0[1u].x));
    float _1373 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _384);
    float _1374 = isnan(_1373) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1373 : min(cbModelParam._m0[25u].z, _1373));
    float _1456;
    float _1458;
    float _1460;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1423 = fma(_625, cbModelParam._m0[13u].z, fma(_621, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _617)) + cbModelParam._m0[13u].w;
        float _1427 = fma(_625, cbModelParam._m0[14u].z, fma(_621, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _617)) + cbModelParam._m0[14u].w;
        float _1431 = fma(_625, cbModelParam._m0[15u].z, fma(_621, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _617)) + cbModelParam._m0[15u].w;
        float _1434 = fma(_563, cbModelParam._m0[13u].z, fma(_562, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _561));
        float _1437 = fma(_563, cbModelParam._m0[14u].z, fma(_562, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _561));
        float _1440 = fma(_563, cbModelParam._m0[15u].z, fma(_562, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _561));
        float _1468;
        if (_1434 > 0.0)
        {
            _1468 = abs((1.0 - _1423) / _1434);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1434 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1423 + 1.0) / _1434);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1468 = frontier_phi_16_14_ladder;
        }
        float _1675;
        if (_1437 > 0.0)
        {
            _1675 = abs((1.0 - _1427) / _1437);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1437 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1427 + 1.0) / _1437);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1675 = frontier_phi_25_21_ladder;
        }
        float _1929;
        if (_1440 > 0.0)
        {
            _1929 = abs((1.0 - _1431) / _1440);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1440 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1431 + 1.0) / _1440);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1929 = frontier_phi_37_32_ladder;
        }
        float _1931 = isnan(_1675) ? _1468 : (isnan(_1468) ? _1675 : min(_1468, _1675));
        float _1932 = isnan(_1929) ? _1931 : (isnan(_1931) ? _1929 : min(_1931, _1929));
        float _1936 = (_1932 * _1434) + _1423;
        float _1937 = (_1932 * _1437) + _1427;
        float _1938 = (_1932 * _1440) + _1431;
        float _1939 = _1932 * 9.9999997473787516355514526367188e-05;
        float _1941 = (-1.0) - _1939;
        float _1943 = _1939 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1938 > _1943) || ((_1938 < _1941) || ((_1937 > _1943) || ((_1937 < _1941) || ((_1936 < _1941) || (_1936 > _1943))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2066 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1938, cbModelParam._m0[9u].z, fma(_1937, cbModelParam._m0[9u].y, _1936 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1938, cbModelParam._m0[10u].z, fma(_1937, cbModelParam._m0[10u].y, _1936 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1938, cbModelParam._m0[11u].z, fma(_1937, cbModelParam._m0[11u].y, _1936 * cbModelParam._m0[11u].x))), _1374);
            frontier_phi_15_37_ladder = _2066.z * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2066.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2066.x * cbModelParam._m0[1u].y;
        }
        _1456 = frontier_phi_15_37_ladder_2;
        _1458 = frontier_phi_15_37_ladder_1;
        _1460 = frontier_phi_15_37_ladder;
    }
    else
    {
        vec4 _1444 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_561, _562, _563), _1374);
        _1456 = _1444.x * cbModelParam._m0[1u].y;
        _1458 = _1444.y * cbModelParam._m0[1u].y;
        _1460 = _1444.z * cbModelParam._m0[1u].y;
    }
    float _1464 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _384);
    float _1465 = isnan(_1464) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1464 : min(cbModelParam._m0[25u].w, _1464));
    float _1558;
    float _1560;
    float _1562;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1522 = fma(_625, cbModelParam._m0[21u].z, fma(_621, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _617)) + cbModelParam._m0[21u].w;
        float _1526 = fma(_625, cbModelParam._m0[22u].z, fma(_621, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _617)) + cbModelParam._m0[22u].w;
        float _1530 = fma(_625, cbModelParam._m0[23u].z, fma(_621, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _617)) + cbModelParam._m0[23u].w;
        float _1533 = fma(_563, cbModelParam._m0[21u].z, fma(_562, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _561));
        float _1536 = fma(_563, cbModelParam._m0[22u].z, fma(_562, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _561));
        float _1539 = fma(_563, cbModelParam._m0[23u].z, fma(_562, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _561));
        float _1680;
        if (_1533 > 0.0)
        {
            _1680 = abs((1.0 - _1522) / _1533);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1533 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1522 + 1.0) / _1533);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1680 = frontier_phi_27_23_ladder;
        }
        float _1956;
        if (_1536 > 0.0)
        {
            _1956 = abs((1.0 - _1526) / _1536);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1536 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1526 + 1.0) / _1536);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1956 = frontier_phi_39_34_ladder;
        }
        float _2169;
        if (_1539 > 0.0)
        {
            _2169 = abs((1.0 - _1530) / _1539);
        }
        else
        {
            float frontier_phi_48_45_ladder;
            if (_1539 < 0.0)
            {
                frontier_phi_48_45_ladder = abs((_1530 + 1.0) / _1539);
            }
            else
            {
                frontier_phi_48_45_ladder = 5000.0;
            }
            _2169 = frontier_phi_48_45_ladder;
        }
        float _2171 = isnan(_1956) ? _1680 : (isnan(_1680) ? _1956 : min(_1680, _1956));
        float _2172 = isnan(_2169) ? _2171 : (isnan(_2171) ? _2169 : min(_2171, _2169));
        float _2176 = (_2172 * _1533) + _1522;
        float _2177 = (_2172 * _1536) + _1526;
        float _2178 = (_2172 * _1539) + _1530;
        float _2179 = _2172 * 9.9999997473787516355514526367188e-05;
        float _2180 = (-1.0) - _2179;
        float _2182 = _2179 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2178 > _2182) || ((_2178 < _2180) || ((_2177 > _2182) || ((_2177 < _2180) || ((_2176 < _2180) || (_2176 > _2182))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2376 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2178, cbModelParam._m0[17u].z, fma(_2177, cbModelParam._m0[17u].y, _2176 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2178, cbModelParam._m0[18u].z, fma(_2177, cbModelParam._m0[18u].y, _2176 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2178, cbModelParam._m0[19u].z, fma(_2177, cbModelParam._m0[19u].y, _2176 * cbModelParam._m0[19u].x))), _1465);
            frontier_phi_24_48_ladder = _2376.z * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_1 = _2376.y * cbModelParam._m0[1u].z;
            frontier_phi_24_48_ladder_2 = _2376.x * cbModelParam._m0[1u].z;
        }
        _1558 = frontier_phi_24_48_ladder_2;
        _1560 = frontier_phi_24_48_ladder_1;
        _1562 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1542 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_561, _562, _563), _1465);
        _1558 = _1542.x * cbModelParam._m0[1u].z;
        _1560 = _1542.y * cbModelParam._m0[1u].z;
        _1562 = _1542.z * cbModelParam._m0[1u].z;
    }
    float _1575 = (((_588 * _538) + _589) * _553) * ((cbModelParam._m0[1u].w * (_1558 - _1456)) + _1456);
    float _1577 = (((_588 * _540) + _589) * _553) * ((cbModelParam._m0[1u].w * (_1560 - _1458)) + _1458);
    float _1579 = (((_588 * _541) + _589) * _553) * ((cbModelParam._m0[1u].w * (_1562 - _1460)) + _1460);
    float _1582 = fma(_1579, cbSceneParam._m0[89u].z, fma(_1577, cbSceneParam._m0[89u].y, _1575 * cbSceneParam._m0[89u].x));
    float _1585 = fma(_1579, cbSceneParam._m0[90u].z, fma(_1577, cbSceneParam._m0[90u].y, _1575 * cbSceneParam._m0[90u].x));
    float _1588 = fma(_1579, cbSceneParam._m0[91u].z, fma(_1577, cbSceneParam._m0[91u].y, _1575 * cbSceneParam._m0[91u].x));
    uvec4 _1598 = floatBitsToUint(cbInstanceData._m0[_512 + 5u]);
    uint _1600 = _1598.x * 14u;
    uint _1601 = _1600 + 13u;
    float _1608 = _553 + (-1.0);
    float _1613 = (cbLight._m0[_1601].x * _1608) + 1.0;
    float _1614 = (cbLight._m0[_1601].y * _1608) + 1.0;
    float _1615 = (cbLight._m0[_1601].z * _1608) + 1.0;
    float _1616 = (cbLight._m0[_1601].w * _1608) + 1.0;
    uint _1617 = _1600 + 5u;
    float _1623 = isnan(1.0) ? _1614 : (isnan(_1614) ? 1.0 : min(_1614, 1.0));
    uint _1627 = _1600 + 4u;
    float _1633 = isnan(1.0) ? _1613 : (isnan(_1613) ? 1.0 : min(_1613, 1.0));
    uint _1637 = _1600 | 1u;
    float _1648 = dot(vec3(cbLight._m0[_1600].xyz), vec3(_381, _382, _383));
    float _1651 = dot(vec3(cbLight._m0[_1637].xyz), vec3(_381, _382, _383));
    float _3764 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
    float _3775 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
    float _1656 = (isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0))) * 0.3183098733425140380859375;
    float _1658 = (isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0))) * 0.3183098733425140380859375;
    float _1665 = ((cbLight._m0[_1617].x * _1623) * _1658) + ((cbLight._m0[_1627].x * _1633) * _1656);
    float _1666 = ((_1623 * cbLight._m0[_1617].y) * _1658) + ((_1633 * cbLight._m0[_1627].y) * _1656);
    float _1667 = ((_1623 * cbLight._m0[_1617].z) * _1658) + ((_1633 * cbLight._m0[_1627].z) * _1656);
    uvec4 _1672 = floatBitsToUint(cbLight._m0[_1600 + 12u]);
    bool _1674 = _1672.x == 0u;
    float _1685;
    float _1687;
    float _1689;
    if (_1674)
    {
        _1685 = _1665;
        _1687 = _1666;
        _1689 = _1667;
    }
    else
    {
        uint _1693 = _1600 + 6u;
        float _1709 = (dot(vec3(cbLight._m0[_1600 + 2u].xyz), vec3(_381, _382, _383)) * 0.5) + 0.5;
        float _1710 = _1709 * _1709;
        float _3786 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0));
        float _1711 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _1712 = isnan(1.0) ? _1615 : (isnan(_1615) ? 1.0 : min(_1615, 1.0));
        _1685 = (((cbLight._m0[_1693].x * 0.3183098733425140380859375) * _1711) * _1712) + _1665;
        _1687 = (((cbLight._m0[_1693].y * 0.3183098733425140380859375) * _1711) * _1712) + _1666;
        _1689 = (((cbLight._m0[_1693].z * 0.3183098733425140380859375) * _1711) * _1712) + _1667;
    }
    bool _1692 = _1672.y == 0u;
    float _1730;
    float _1732;
    float _1734;
    if (_1692)
    {
        _1730 = _1685;
        _1732 = _1687;
        _1734 = _1689;
    }
    else
    {
        uint _1900 = _1600 + 7u;
        float _1916 = (dot(vec3(cbLight._m0[_1600 + 3u].xyz), vec3(_381, _382, _383)) * 0.5) + 0.5;
        float _1917 = _1916 * _1916;
        float _3802 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
        float _1918 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1919 = isnan(1.0) ? _1616 : (isnan(_1616) ? 1.0 : min(_1616, 1.0));
        _1730 = (((cbLight._m0[_1900].x * 0.3183098733425140380859375) * _1918) * _1919) + _1685;
        _1732 = (((cbLight._m0[_1900].y * 0.3183098733425140380859375) * _1918) * _1919) + _1687;
        _1734 = (((cbLight._m0[_1900].z * 0.3183098733425140380859375) * _1918) * _1919) + _1689;
    }
    uint _1737 = _1600 + 8u;
    float _1750 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1600].w)) * _384) * 0.949999988079071044921875);
    float _1751 = _1750 * _1750;
    float _1752 = cbLight._m0[_1600].x + _463;
    float _1753 = cbLight._m0[_1600].y + _464;
    float _1754 = cbLight._m0[_1600].z + _465;
    float _1758 = inversesqrt(dot(vec3(_1752, _1753, _1754), vec3(_1752, _1753, _1754)));
    float _1759 = _1758 * _1752;
    float _1760 = _1758 * _1753;
    float _1761 = _1758 * _1754;
    float _1762 = dot(vec3(_381, _382, _383), vec3(cbLight._m0[_1600].xyz));
    float _3818 = isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0));
    float _1765 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
    float _3829 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
    float _1766 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
    float _1767 = dot(vec3(_381, _382, _383), vec3(_1759, _1760, _1761));
    float _3840 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
    float _1770 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
    float _1771 = dot(vec3(cbLight._m0[_1600].xyz), vec3(_1759, _1760, _1761));
    float _3851 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
    float _1775 = _1751 * _1751;
    float _1779 = ((_1770 * _1770) * (_1775 + (-1.0))) + 1.0;
    float _1787 = exp2(log2(1.0 - (isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0)))) * 5.0);
    float _1788 = 0.959999978542327880859375 - _535;
    float _1790 = 0.959999978542327880859375 - _536;
    float _1791 = 0.959999978542327880859375 - _537;
    float _1798 = 1.0 - _1751;
    float _1809 = (0.5 / (((_1766 * ((_1765 * _1798) + _1751)) + 9.9999999392252902907785028219223e-09) + (((_1766 * _1798) + _1751) * _1765))) * _1765;
    float _3862 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
    float _1811 = (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * (_1775 / ((_1779 * _1779) * 3.141590118408203125));
    uint _1822 = _1600 + 9u;
    float _1833 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1637].w)) * _384) * 0.949999988079071044921875);
    float _1834 = _1833 * _1833;
    float _1835 = cbLight._m0[_1637].x + _463;
    float _1836 = cbLight._m0[_1637].y + _464;
    float _1837 = cbLight._m0[_1637].z + _465;
    float _1841 = inversesqrt(dot(vec3(_1835, _1836, _1837), vec3(_1835, _1836, _1837)));
    float _1842 = _1841 * _1835;
    float _1843 = _1841 * _1836;
    float _1844 = _1841 * _1837;
    float _1845 = dot(vec3(_381, _382, _383), vec3(cbLight._m0[_1637].xyz));
    float _3873 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
    float _1848 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
    float _1849 = dot(vec3(_381, _382, _383), vec3(_1842, _1843, _1844));
    float _3884 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
    float _1852 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    float _1853 = dot(vec3(cbLight._m0[_1637].xyz), vec3(_1842, _1843, _1844));
    float _3895 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
    float _1857 = _1834 * _1834;
    float _1861 = ((_1852 * _1852) * (_1857 + (-1.0))) + 1.0;
    float _1868 = exp2(log2(1.0 - (isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0)))) * 5.0);
    float _1875 = 1.0 - _1834;
    float _1885 = (0.5 / (((_1766 * ((_1848 * _1875) + _1834)) + 9.9999999392252902907785028219223e-09) + (((_1766 * _1875) + _1834) * _1848))) * _1848;
    float _3906 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
    float _1887 = (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0))) * (_1857 / ((_1861 * _1861) * 3.141590118408203125));
    float _1897 = (((((_1868 * _1788) + _538) * cbLight._m0[_1822].x) * _1887) * _1623) + (((((_1787 * _1788) + _538) * cbLight._m0[_1737].x) * _1811) * _1633);
    float _1898 = (((((_1868 * _1790) + _540) * cbLight._m0[_1822].y) * _1887) * _1623) + (((((_1787 * _1790) + _540) * cbLight._m0[_1737].y) * _1811) * _1633);
    float _1899 = (((((_1868 * _1791) + _541) * cbLight._m0[_1822].z) * _1887) * _1623) + (((((_1787 * _1791) + _541) * cbLight._m0[_1737].z) * _1811) * _1633);
    float _1961;
    float _1963;
    float _1965;
    if (_1674)
    {
        _1961 = _1897;
        _1963 = _1898;
        _1965 = _1899;
    }
    else
    {
        uint _1967 = _1600 + 2u;
        uint _1971 = _1600 + 10u;
        float _1985 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1967].w)) * _384) * 0.949999988079071044921875);
        float _1986 = _1985 * _1985;
        float _1987 = cbLight._m0[_1967].x + _463;
        float _1988 = cbLight._m0[_1967].y + _464;
        float _1989 = cbLight._m0[_1967].z + _465;
        float _1993 = inversesqrt(dot(vec3(_1987, _1988, _1989), vec3(_1987, _1988, _1989)));
        float _1994 = _1993 * _1987;
        float _1995 = _1993 * _1988;
        float _1996 = _1993 * _1989;
        float _1997 = dot(vec3(_381, _382, _383), vec3(cbLight._m0[_1967].xyz));
        float _3917 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
        float _2000 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
        float _2001 = dot(vec3(_381, _382, _383), vec3(_1994, _1995, _1996));
        float _3928 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
        float _2004 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
        float _2005 = dot(vec3(cbLight._m0[_1967].xyz), vec3(_1994, _1995, _1996));
        float _3939 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
        float _2009 = _1986 * _1986;
        float _2013 = ((_2004 * _2004) * (_2009 + (-1.0))) + 1.0;
        float _2020 = exp2(log2(1.0 - (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0)))) * 5.0);
        float _2027 = 1.0 - _1986;
        float _2037 = (0.5 / (((_1766 * ((_2000 * _2027) + _1986)) + 9.9999999392252902907785028219223e-09) + (((_1766 * _2027) + _1986) * _2000))) * _2000;
        float _3950 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
        float _2039 = (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * (_2009 / ((_2013 * _2013) * 3.141590118408203125));
        float _2040 = isnan(1.0) ? _1615 : (isnan(_1615) ? 1.0 : min(_1615, 1.0));
        _1961 = (((((_2020 * _1788) + _538) * cbLight._m0[_1971].x) * _2039) * _2040) + _1897;
        _1963 = (((((_2020 * _1790) + _540) * cbLight._m0[_1971].y) * _2039) * _2040) + _1898;
        _1965 = (((((_2020 * _1791) + _541) * cbLight._m0[_1971].z) * _2039) * _2040) + _1899;
    }
    float _2075;
    float _2077;
    float _2079;
    if (_1692)
    {
        _2075 = _1961;
        _2077 = _1963;
        _2079 = _1965;
    }
    else
    {
        uint _2086 = _1600 + 3u;
        uint _2090 = _1600 + 11u;
        float _2104 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2086].w)) * _384) * 0.949999988079071044921875);
        float _2105 = _2104 * _2104;
        float _2106 = cbLight._m0[_2086].x + _463;
        float _2107 = cbLight._m0[_2086].y + _464;
        float _2108 = cbLight._m0[_2086].z + _465;
        float _2112 = inversesqrt(dot(vec3(_2106, _2107, _2108), vec3(_2106, _2107, _2108)));
        float _2113 = _2112 * _2106;
        float _2114 = _2112 * _2107;
        float _2115 = _2112 * _2108;
        float _2116 = dot(vec3(_381, _382, _383), vec3(cbLight._m0[_2086].xyz));
        float _3966 = isnan(0.0) ? _2116 : (isnan(_2116) ? 0.0 : max(_2116, 0.0));
        float _2119 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
        float _2120 = dot(vec3(_381, _382, _383), vec3(_2113, _2114, _2115));
        float _3977 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
        float _2123 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
        float _2124 = dot(vec3(cbLight._m0[_2086].xyz), vec3(_2113, _2114, _2115));
        float _3988 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
        float _2128 = _2105 * _2105;
        float _2132 = ((_2123 * _2123) * (_2128 + (-1.0))) + 1.0;
        float _2139 = exp2(log2(1.0 - (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0)))) * 5.0);
        float _2146 = 1.0 - _2105;
        float _2156 = (0.5 / (((_1766 * ((_2119 * _2146) + _2105)) + 9.9999999392252902907785028219223e-09) + (((_1766 * _2146) + _2105) * _2119))) * _2119;
        float _3999 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
        float _2158 = (isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0))) * (_2128 / ((_2132 * _2132) * 3.141590118408203125));
        float _2159 = isnan(1.0) ? _1616 : (isnan(_1616) ? 1.0 : min(_1616, 1.0));
        _2075 = (((((_2139 * _1788) + _538) * cbLight._m0[_2090].x) * _2158) * _2159) + _1961;
        _2077 = (((((_2139 * _1790) + _540) * cbLight._m0[_2090].y) * _2158) * _2159) + _1963;
        _2079 = (((((_2139 * _1791) + _541) * cbLight._m0[_2090].z) * _2158) * _2159) + _1965;
    }
    float _2293;
    float _2295;
    float _2297;
    float _2299;
    float _2301;
    float _2303;
    if (_1598.y == 0u)
    {
        float _2234 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2235 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2234;
        float _2236 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2234;
        float _2237 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2234;
        uvec4 _2249 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2250 = _2249.x;
        uint _2261 = uint((float(_2249.y) * floor(float(uint(cbSceneParam._m0[85u].y * _472) / _2250))) + floor(float(uint(cbSceneParam._m0[85u].x * _471) / _2250)));
        float _2271 = (log2(_2237 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2272 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
        uint _2275 = uint(isnan(14.0) ? _2272 : (isnan(_2272) ? 14.0 : min(_2272, 14.0)));
        uvec4 _2280 = texelFetch(g_lightClusterGridBuffer, int(((_2275 << 2u) + (_2261 << 6u)) >> 2u));
        uint _2281 = _2280.x;
        uint _2282 = _2249.z;
        float _2381;
        float _2383;
        float _2385;
        float _2387;
        float _2389;
        float _2391;
        if (((((1u << ((_2282 >> 4u) & 15u)) + 4294967295u) & _2281) == 0u) || ((_2282 & 240u) == 0u))
        {
            _2381 = 0.0;
            _2383 = 0.0;
            _2385 = 0.0;
            _2387 = 0.0;
            _2389 = 0.0;
            _2391 = 0.0;
        }
        else
        {
            float _2382;
            float _2384;
            float _2386;
            float _2388;
            float _2390;
            float _2392;
            float _2525 = 0.0;
            float _2526 = 0.0;
            float _2527 = 0.0;
            float _2528 = 0.0;
            float _2529 = 0.0;
            float _2530 = 0.0;
            uint _2531 = 0u;
            uint _2540;
            bool _2541;
            for (;;)
            {
                _2540 = texelFetch(g_lightClassification, int((((_2275 << 5u) + (_2261 << 9u)) + (_2531 << 2u)) >> 2u)).x;
                _2541 = _2540 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2541)
                {
                    frontier_phi_63_pred = _2530;
                    frontier_phi_63_pred_1 = _2529;
                    frontier_phi_63_pred_2 = _2528;
                    frontier_phi_63_pred_3 = _2527;
                    frontier_phi_63_pred_4 = _2526;
                    frontier_phi_63_pred_5 = _2525;
                }
                else
                {
                    float _2649;
                    float _2650;
                    float _2651;
                    float _2652;
                    float _2653;
                    float _2654;
                    uint _2655;
                    _2649 = _2525;
                    _2650 = _2526;
                    _2651 = _2527;
                    _2652 = _2528;
                    _2653 = _2529;
                    _2654 = _2530;
                    _2655 = _2540;
                    float _2581;
                    float _2582;
                    float _2583;
                    float _2584;
                    float _2585;
                    float _2586;
                    for (;;)
                    {
                        uint _2659 = uint(findLSB(_2655)) + (_2531 << 5u);
                        uint _2656 = (_2655 + 4294967295u) & _2655;
                        uint _2661 = _2659 * 48u;
                        vec4 _2675 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2661)).x, texelFetch(g_PointLightRenderingBuffer, int(_2661 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2661 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2661 + 3u)).x));
                        uint _2681 = (_2659 * 48u) + 4u;
                        vec4 _2694 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2681)).x, texelFetch(g_PointLightRenderingBuffer, int(_2681 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2681 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2681 + 3u)).x));
                        uint _2700 = (_2659 * 48u) + 8u;
                        vec3 _2711 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2700)).x, texelFetch(g_PointLightRenderingBuffer, int(_2700 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2700 + 2u)).x));
                        float _2715 = _2675.x - _2235;
                        float _2716 = _2675.y - _2236;
                        float _2717 = _2675.z - _2237;
                        float _2718 = dot(vec3(_2715, _2716, _2717), vec3(_2715, _2716, _2717));
                        float _2721 = inversesqrt(_2718);
                        float _2722 = _2721 * _2715;
                        float _2723 = _2721 * _2716;
                        float _2724 = _2721 * _2717;
                        float _2725 = dot(vec3(_493, _496, _499), vec3(_2722, _2723, _2724));
                        float _2730 = 1.0 - (_2718 * _2675.w);
                        float _4025 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
                        float _2731 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
                        float _2732 = sqrt(_2718) * _2694.w;
                        float _2735 = 1.39999997615814208984375 / (_2732 + 1.39999997615814208984375);
                        float _2736 = _2735 * _2735;
                        float _2739 = ((1.0 - _2736) * _2725) + _2736;
                        float _2742 = _2732 * _2732;
                        float _2746 = ((isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0))) * _2731) / ((_2742 * 0.699999988079071044921875) + 1.0);
                        float _2750 = (-0.0) - _2235;
                        float _2751 = (-0.0) - _2236;
                        float _2752 = (-0.0) - _2237;
                        float _2756 = inversesqrt(dot(vec3(_2750, _2751, _2752), vec3(_2750, _2751, _2752)));
                        float _2757 = _2756 * _2750;
                        float _2758 = _2756 * _2751;
                        float _2759 = _2756 * _2752;
                        float _2767 = exp2(log2(1.0 / ((_2742 * 3.5) + 5.0)) * 0.25);
                        float _2768 = 1.0 - _569;
                        float _2775 = sqrt(1.0 - ((1.0 - (_2768 * _2768)) * (1.0 - (_2767 * _2767))));
                        float _2776 = _2775 * _2775;
                        float _2777 = _2776 * _2776;
                        float _2778 = _2757 + _2722;
                        float _2779 = _2758 + _2723;
                        float _2780 = _2759 + _2724;
                        float _2784 = inversesqrt(dot(vec3(_2778, _2779, _2780), vec3(_2778, _2779, _2780)));
                        float _2788 = dot(vec3(_493, _496, _499), vec3(_2757, _2758, _2759));
                        float _4041 = isnan(0.0) ? _2788 : (isnan(_2788) ? 0.0 : max(_2788, 0.0));
                        float _2791 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
                        float _2792 = dot(vec3(_493, _496, _499), vec3(_2784 * _2778, _2784 * _2779, _2784 * _2780));
                        float _4052 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
                        float _2795 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
                        float _2799 = ((_2795 * _2795) * (_2777 + (-1.0))) + 1.0;
                        float _2800 = _2735 * _2776;
                        float _2801 = _2800 * _2800;
                        float _2804 = ((1.0 - _2801) * _2725) + _2801;
                        float _4063 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
                        float _2805 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
                        float _2806 = 1.0 - _2776;
                        float _2816 = (0.5 / (((_2805 * ((_2791 * _2806) + _2776)) + 9.9999999392252902907785028219223e-09) + (((_2805 * _2806) + _2776) * _2791))) * _2805;
                        float _4074 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
                        float _2827 = (((_2777 * 3.1415927410125732421875) * (isnan(1.0) ? _4074 : (isnan(_4074) ? 1.0 : min(_4074, 1.0)))) / ((_2799 * _2799) * ((_2742 * 2.1991131305694580078125) + 3.141590118408203125))) * _2731;
                        _2584 = (_2746 * _2694.x) + _2652;
                        _2585 = (_2746 * _2694.y) + _2653;
                        _2586 = (_2746 * _2694.z) + _2654;
                        _2581 = (_2827 * _2711.x) + _2649;
                        _2582 = (_2827 * _2711.y) + _2650;
                        _2583 = (_2827 * _2711.z) + _2651;
                        if (_2656 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2649 = _2581;
                            _2650 = _2582;
                            _2651 = _2583;
                            _2652 = _2584;
                            _2653 = _2585;
                            _2654 = _2586;
                            _2655 = _2656;
                        }
                    }
                    frontier_phi_63_pred = _2586;
                    frontier_phi_63_pred_1 = _2585;
                    frontier_phi_63_pred_2 = _2584;
                    frontier_phi_63_pred_3 = _2583;
                    frontier_phi_63_pred_4 = _2582;
                    frontier_phi_63_pred_5 = _2581;
                }
                _2392 = frontier_phi_63_pred;
                _2390 = frontier_phi_63_pred_1;
                _2388 = frontier_phi_63_pred_2;
                _2386 = frontier_phi_63_pred_3;
                _2384 = frontier_phi_63_pred_4;
                _2382 = frontier_phi_63_pred_5;
                uint _2532 = _2531 + 1u;
                if (_2532 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2525 = _2382;
                    _2526 = _2384;
                    _2527 = _2386;
                    _2528 = _2388;
                    _2529 = _2390;
                    _2530 = _2392;
                    _2531 = _2532;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2381 = _2382;
            _2383 = _2384;
            _2385 = _2386;
            _2387 = _2388;
            _2389 = _2390;
            _2391 = _2392;
        }
        uvec4 _2395 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2396 = _2395.z;
        uint _2398 = (_2396 >> 8u) & 15u;
        float _2493;
        float _2495;
        float _2497;
        float _2499;
        float _2501;
        float _2503;
        if (((4294967295u << _2398) & _2281) == 0u)
        {
            _2493 = _2381;
            _2495 = _2383;
            _2497 = _2385;
            _2499 = _2387;
            _2501 = _2389;
            _2503 = _2391;
        }
        else
        {
            float _2518 = inversesqrt(dot(vec3(_2235, _2236, _2237), vec3(_2235, _2236, _2237)));
            float _2519 = _2518 * _2235;
            float _2520 = _2518 * _2236;
            float _2521 = _2518 * _2237;
            float frontier_phi_57_58_ladder;
            float frontier_phi_57_58_ladder_1;
            float frontier_phi_57_58_ladder_2;
            float frontier_phi_57_58_ladder_3;
            float frontier_phi_57_58_ladder_4;
            float frontier_phi_57_58_ladder_5;
            if (_2398 < ((_2396 >> 12u) & 15u))
            {
                float _2494;
                float _2496;
                float _2498;
                float _2500;
                float _2502;
                float _2504;
                float _2632 = _2381;
                float _2633 = _2383;
                float _2634 = _2385;
                float _2635 = _2387;
                float _2636 = _2389;
                float _2637 = _2391;
                uint _2638 = _2398;
                uint _2647;
                bool _2648;
                for (;;)
                {
                    _2647 = texelFetch(g_lightClassification, int((((_2275 << 5u) + (_2261 << 9u)) + (_2638 << 2u)) >> 2u)).x;
                    _2648 = _2647 == 0u;
                    float frontier_phi_69_pred;
                    float frontier_phi_69_pred_1;
                    float frontier_phi_69_pred_2;
                    float frontier_phi_69_pred_3;
                    float frontier_phi_69_pred_4;
                    float frontier_phi_69_pred_5;
                    if (_2648)
                    {
                        frontier_phi_69_pred = _2637;
                        frontier_phi_69_pred_1 = _2636;
                        frontier_phi_69_pred_2 = _2635;
                        frontier_phi_69_pred_3 = _2634;
                        frontier_phi_69_pred_4 = _2633;
                        frontier_phi_69_pred_5 = _2632;
                    }
                    else
                    {
                        float _2832;
                        float _2833;
                        float _2834;
                        float _2835;
                        float _2836;
                        float _2837;
                        float _3128;
                        float _3129;
                        float _3130;
                        float _3131;
                        float _3132;
                        float _3133;
                        float _2845 = _2632;
                        float _2846 = _2633;
                        float _2847 = _2634;
                        float _2848 = _2635;
                        float _2849 = _2636;
                        float _2850 = _2637;
                        uint _2851 = _2647;
                        uint _2852;
                        vec4 _2877;
                        float _2878;
                        vec4 _2893;
                        vec3 _2905;
                        vec4 _2921;
                        vec4 _2937;
                        float _2984;
                        bool _2985;
                        for (;;)
                        {
                            uint _2862 = ((_2638 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2851));
                            _2852 = (_2851 + 4294967295u) & _2851;
                            uint _2864 = _2862 * 40u;
                            _2877 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2864)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 3u)).x));
                            _2878 = _2877.w;
                            uint _2880 = (_2862 * 40u) + 4u;
                            _2893 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2880)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 3u)).x));
                            uint _2895 = (_2862 * 40u) + 8u;
                            _2905 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2895)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2895 + 2u)).x));
                            uint _2908 = (_2862 * 40u) + 16u;
                            _2921 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2908)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2908 + 3u)).x));
                            uint _2924 = (_2862 * 40u) + 20u;
                            _2937 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2924)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2924 + 3u)).x));
                            uint _2940 = (_2862 * 40u) + 24u;
                            vec4 _2953 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2940)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2940 + 3u)).x));
                            uint _2959 = (_2862 * 40u) + 28u;
                            vec4 _2972 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2959)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 3u)).x));
                            _2984 = fma(_2237, _2972.z, fma(_2236, _2972.y, _2972.x * _2235)) + _2972.w;
                            _2985 = !((fma(_2237, _2953.z, fma(_2236, _2953.y, _2953.x * _2235)) + _2953.w) <= 0.0);
                            float frontier_phi_75_pred;
                            float frontier_phi_75_pred_1;
                            float frontier_phi_75_pred_2;
                            float frontier_phi_75_pred_3;
                            float frontier_phi_75_pred_4;
                            float frontier_phi_75_pred_5;
                            if (_2985)
                            {
                                float _3012 = _2877.x - _2235;
                                float _3013 = _2877.y - _2236;
                                float _3014 = _2877.z - _2237;
                                float _3015 = dot(vec3(_3012, _3013, _3014), vec3(_3012, _3013, _3014));
                                float _3018 = inversesqrt(_3015);
                                float _3019 = _3018 * _3012;
                                float _3020 = _3018 * _3013;
                                float _3021 = _3018 * _3014;
                                float _3025 = 1.0 - (_3015 / (_2878 * _2878));
                                float _4085 = isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0));
                                float _3026 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
                                float _3030 = sqrt(_3015) * _2893.w;
                                float _3032 = 1.39999997615814208984375 / (_3030 + 1.39999997615814208984375);
                                float _3033 = _3032 * _3032;
                                float _3036 = ((1.0 - _3033) * dot(vec3(_3019, _3020, _3021), vec3(_493, _496, _499))) + _3033;
                                float _3039 = _3030 * _3030;
                                float _3043 = (fma(_2237, _2921.z, fma(_2236, _2921.y, _2921.x * _2235)) + _2921.w) / _2984;
                                float _3044 = (fma(_2237, _2937.z, fma(_2236, _2937.y, _2937.x * _2235)) + _2937.w) / _2984;
                                float _3048 = 1.0 - dot(vec2(_3043, _3044), vec2(_3043, _3044));
                                float _4101 = isnan(0.0) ? _3048 : (isnan(_3048) ? 0.0 : max(_3048, 0.0));
                                float _3049 = isnan(1.0) ? _4101 : (isnan(_4101) ? 1.0 : min(_4101, 1.0));
                                float _3050 = _3049 * (((isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0))) * _3026) / ((_3039 * 0.699999988079071044921875) + 1.0));
                                float _3062 = exp2(log2(1.0 / ((_3039 * 3.5) + 5.0)) * 0.25);
                                float _3063 = 1.0 - _569;
                                float _3070 = sqrt(1.0 - ((1.0 - (_3063 * _3063)) * (1.0 - (_3062 * _3062))));
                                float _3071 = _3070 * _3070;
                                float _3072 = _3071 * _3071;
                                float _3073 = _3019 - _2519;
                                float _3074 = _3020 - _2520;
                                float _3075 = _3021 - _2521;
                                float _3079 = inversesqrt(dot(vec3(_3073, _3074, _3075), vec3(_3073, _3074, _3075)));
                                float _3083 = dot(vec3(_493, _496, _499), vec3((-0.0) - _2519, (-0.0) - _2520, (-0.0) - _2521));
                                float _4112 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
                                float _3086 = isnan(1.0) ? _4112 : (isnan(_4112) ? 1.0 : min(_4112, 1.0));
                                float _3087 = dot(vec3(_493, _496, _499), vec3(_3079 * _3073, _3079 * _3074, _3079 * _3075));
                                float _4123 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
                                float _3090 = isnan(1.0) ? _4123 : (isnan(_4123) ? 1.0 : min(_4123, 1.0));
                                float _3094 = ((_3090 * _3090) * (_3072 + (-1.0))) + 1.0;
                                float _3095 = _3032 * _3071;
                                float _3096 = _3095 * _3095;
                                float _3102 = ((1.0 - _3096) * dot(vec3(_493, _496, _499), vec3(_3019, _3020, _3021))) + _3096;
                                float _4134 = isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0));
                                float _3103 = isnan(1.0) ? _4134 : (isnan(_4134) ? 1.0 : min(_4134, 1.0));
                                float _3104 = 1.0 - _3071;
                                float _3114 = (0.5 / (((_3103 * ((_3086 * _3104) + _3071)) + 9.9999999392252902907785028219223e-09) + (((_3103 * _3104) + _3071) * _3086))) * _3103;
                                float _4145 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0));
                                float _3124 = (_3049 * _3026) * (((_3072 * 3.1415927410125732421875) * (isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0)))) / ((_3094 * _3094) * ((_3039 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_75_pred = _3050 * _2893.z;
                                frontier_phi_75_pred_1 = _3050 * _2893.y;
                                frontier_phi_75_pred_2 = _3050 * _2893.x;
                                frontier_phi_75_pred_3 = _3124 * _2905.z;
                                frontier_phi_75_pred_4 = _3124 * _2905.y;
                                frontier_phi_75_pred_5 = _3124 * _2905.x;
                            }
                            else
                            {
                                frontier_phi_75_pred = 0.0;
                                frontier_phi_75_pred_1 = 0.0;
                                frontier_phi_75_pred_2 = 0.0;
                                frontier_phi_75_pred_3 = 0.0;
                                frontier_phi_75_pred_4 = 0.0;
                                frontier_phi_75_pred_5 = 0.0;
                            }
                            _3133 = frontier_phi_75_pred;
                            _3132 = frontier_phi_75_pred_1;
                            _3131 = frontier_phi_75_pred_2;
                            _3130 = frontier_phi_75_pred_3;
                            _3129 = frontier_phi_75_pred_4;
                            _3128 = frontier_phi_75_pred_5;
                            _2835 = _3131 + _2848;
                            _2836 = _3132 + _2849;
                            _2837 = _3133 + _2850;
                            _2832 = _3128 + _2845;
                            _2833 = _3129 + _2846;
                            _2834 = _3130 + _2847;
                            if (_2852 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2845 = _2832;
                                _2846 = _2833;
                                _2847 = _2834;
                                _2848 = _2835;
                                _2849 = _2836;
                                _2850 = _2837;
                                _2851 = _2852;
                                continue;
                            }
                        }
                        frontier_phi_69_pred = _2837;
                        frontier_phi_69_pred_1 = _2836;
                        frontier_phi_69_pred_2 = _2835;
                        frontier_phi_69_pred_3 = _2834;
                        frontier_phi_69_pred_4 = _2833;
                        frontier_phi_69_pred_5 = _2832;
                    }
                    _2504 = frontier_phi_69_pred;
                    _2502 = frontier_phi_69_pred_1;
                    _2500 = frontier_phi_69_pred_2;
                    _2498 = frontier_phi_69_pred_3;
                    _2496 = frontier_phi_69_pred_4;
                    _2494 = frontier_phi_69_pred_5;
                    uint _2639 = _2638 + 1u;
                    if (_2639 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2632 = _2494;
                        _2633 = _2496;
                        _2634 = _2498;
                        _2635 = _2500;
                        _2636 = _2502;
                        _2637 = _2504;
                        _2638 = _2639;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_57_58_ladder = _2504;
                frontier_phi_57_58_ladder_1 = _2502;
                frontier_phi_57_58_ladder_2 = _2500;
                frontier_phi_57_58_ladder_3 = _2498;
                frontier_phi_57_58_ladder_4 = _2496;
                frontier_phi_57_58_ladder_5 = _2494;
            }
            else
            {
                frontier_phi_57_58_ladder = _2391;
                frontier_phi_57_58_ladder_1 = _2389;
                frontier_phi_57_58_ladder_2 = _2387;
                frontier_phi_57_58_ladder_3 = _2385;
                frontier_phi_57_58_ladder_4 = _2383;
                frontier_phi_57_58_ladder_5 = _2381;
            }
            _2493 = frontier_phi_57_58_ladder_5;
            _2495 = frontier_phi_57_58_ladder_4;
            _2497 = frontier_phi_57_58_ladder_3;
            _2499 = frontier_phi_57_58_ladder_2;
            _2501 = frontier_phi_57_58_ladder_1;
            _2503 = frontier_phi_57_58_ladder;
        }
        float _2508 = isnan(1.0) ? _553 : (isnan(_553) ? 1.0 : min(_553, 1.0));
        _2293 = (_2508 * _2499) + _1730;
        _2295 = (_2508 * _2501) + _1732;
        _2297 = (_2508 * _2503) + _1734;
        _2299 = ((_2493 * _538) * _2508) + _2075;
        _2301 = ((_2495 * _540) * _2508) + _2077;
        _2303 = ((_2497 * _541) * _2508) + _2079;
    }
    else
    {
        _2293 = _1730;
        _2295 = _1732;
        _2297 = _1734;
        _2299 = _2075;
        _2301 = _2077;
        _2303 = _2079;
    }
    float _4161 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _4172 = isnan(0.0) ? _529 : (isnan(_529) ? 0.0 : max(_529, 0.0));
    float _4183 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    uint _2323 = _512 + 6u;
    float _2331 = _471 / cbSceneParam._m0[86u].x;
    float _2332 = _472 / cbSceneParam._m0[86u].y;
    vec4 _2346 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2331, _2332, (log2((isnan(cbSceneParam._m0[77u].w) ? _404 : (isnan(_404) ? cbSceneParam._m0[77u].w : min(_404, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2348 = _2346.x;
    float _2349 = _2346.y;
    float _2350 = _2346.z;
    float _2351 = _2346.w;
    float _2443;
    float _2445;
    float _2447;
    float _2449;
    if (_404 > cbSceneParam._m0[78u].w)
    {
        float _2406 = isnan(_404) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _404 : min(cbSceneParam._m0[80u].w, _404));
        float _2407 = _2406 / _404;
        float _2418 = _2407 * _456;
        float _2419 = _457 * _2407;
        float _2420 = (-0.0) - _2419;
        float _2421 = _2407 * _458;
        float _2423 = (cbSceneParam._m0[77u].w * _2420) / _2406;
        float _2424 = _2423 + cbSceneParam._m0[79u].w;
        float _2425 = cbSceneParam._m0[79u].w - _2419;
        float _2431 = sqrt(((_2418 * _2418) + (_2419 * _2419)) + (_2421 * _2421));
        float _2434 = (1.0 - (cbSceneParam._m0[77u].w / _2406)) * _2431;
        float _2439 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2441 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2594;
        if (abs((_2420 - _2423) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2594 = ((((_2424 > 0.0) ? exp2(_2439 * _2424) : (2.0 - exp2(_2441 * _2424))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2434;
        }
        else
        {
            float _2554 = 1.0 / cbSceneParam._m0[80u].x;
            float _2555 = isnan(_2425) ? _2424 : (isnan(_2424) ? _2425 : max(_2424, _2425));
            float _2556 = isnan(_2425) ? _2424 : (isnan(_2424) ? _2425 : min(_2424, _2425));
            float _2565 = isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : min(_2555, 0.0));
            float _2566 = isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : min(_2556, 0.0));
            _2594 = ((abs(_2431 / _2420) * cbSceneParam._m0[80u].y) * ((((_2565 - _2566) * 2.0) - ((exp2(_2439 * (isnan(0.0) ? _2555 : (isnan(_2555) ? 0.0 : max(_2555, 0.0)))) - exp2(_2439 * (isnan(0.0) ? _2556 : (isnan(_2556) ? 0.0 : max(_2556, 0.0))))) * _2554)) - ((exp2(_2441 * _2565) - exp2(_2441 * _2566)) * _2554))) + (_2434 * cbSceneParam._m0[80u].z);
        }
        vec4 _2596 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2331, _2332, 1.0), 0.0);
        float _2605 = exp2((_2594 * (-1.44269502162933349609375)) * (1.0 - _2596.w));
        float _2606 = log2(_2605);
        float _2622 = log2(_2351);
        _2443 = (exp2(_2622 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2606 * cbSceneParam._m0[78u].x)) * _2596.x) / cbSceneParam._m0[78u].x)) + _2348;
        _2445 = (exp2(_2622 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2606 * cbSceneParam._m0[78u].y)) * _2596.y) / cbSceneParam._m0[78u].y)) + _2349;
        _2447 = (exp2(_2622 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2606 * cbSceneParam._m0[78u].z)) * _2596.z) / cbSceneParam._m0[78u].z)) + _2350;
        _2449 = _2605 * _2351;
    }
    else
    {
        _2443 = _2348;
        _2445 = _2349;
        _2447 = _2350;
        _2449 = _2351;
    }
    float _2461 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2462 = _2461 == 3.0;
    float _2463 = log2(_2449);
    float _2470 = exp2(_2463 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_2293 + ((isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0))) * _553))) + ((_2299 + ((isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0))) * _1363)) * cbPerFrame._m0[3u].x));
    float _2471 = exp2(_2463 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) * (_2295 + ((isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0))) * _553))) + ((_2301 + ((isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0))) * _1363)) * cbPerFrame._m0[3u].x));
    float _2472 = exp2(_2463 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0))) * (_2297 + ((isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0))) * _553))) + ((_2303 + ((isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0))) * _1363)) * cbPerFrame._m0[3u].x));
    float _2481 = (_2461 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2481 * (_2462 ? _2470 : (_2470 + (cbSceneParam._m0[72u].w * _2443)));
    SV_Target.y = _2481 * (_2462 ? _2471 : (_2471 + (cbSceneParam._m0[72u].w * _2445)));
    SV_Target.z = _2481 * (_2462 ? _2472 : (_2472 + (cbSceneParam._m0[72u].w * _2447)));
    SV_Target.w = cbInstanceData._m0[_2323].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2323].w;
}


