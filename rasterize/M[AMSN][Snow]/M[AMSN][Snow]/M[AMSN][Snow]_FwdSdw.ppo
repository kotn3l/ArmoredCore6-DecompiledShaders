#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _932;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _196 = _195 * _188;
    float _197 = _195 * _189;
    float _198 = _195 * _190;
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210 = _209 * TANGENT.x;
    float _211 = _209 * TANGENT.y;
    float _212 = _209 * TANGENT.z;
    float _217;
    float _218;
    float _219;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
    }
    else
    {
        _217 = _203;
        _218 = _204;
        _219 = _205;
    }
    vec4 _238 = texture(sampler2D(M_AMSN_Snow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _243 = _238.z;
    float _247 = (_238.x * 2.0) + (-1.0);
    float _249 = (_238.y * 2.0) + (-1.0);
    float _250 = dot(vec2(_247, _249), vec2(_247, _249));
    float _3551 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _256 = sqrt(1.0 - (isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))));
    float _259 = fma(_256, _217, fma(_249, _210, _247 * _196));
    float _262 = fma(_256, _218, fma(_249, _211, _247 * _197));
    float _265 = fma(_256, _219, fma(_249, _212, _247 * _198));
    float _274 = exp2(log2(inversesqrt(dot(vec3(_259, _262, _265), vec3(_259, _262, _265))) * _262) * cbMtdParam._m0[9u].x) * cbMtdParam._m0[9u].y;
    float _3562 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _275 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
    vec4 _287 = texture(sampler2D(M_AMSN_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _303 = texture(sampler2D(M_AMSN_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _305 = _303.x;
    float _306 = _303.y;
    float _307 = _303.z;
    float _314 = ((_287.x - _305) * _275) + _305;
    float _315 = ((_287.y - _306) * _275) + _306;
    float _316 = ((_287.z - _307) * _275) + _307;
    vec4 _329 = texture(sampler2D(M_AMSN_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _331 = _329.x;
    float _333 = _331 - (_331 * _275);
    vec4 _345 = texture(sampler2D(M_AMSN_Snow_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _352 = (_345.x * 2.0) + (-1.0);
    float _353 = (_345.y * 2.0) + (-1.0);
    float _354 = dot(vec2(_352, _353), vec2(_352, _353));
    float _3573 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _362 = ((_345.z - _243) * _275) + _243;
    float _369 = ((_352 - _247) * _275) + _247;
    float _370 = ((_353 - _249) * _275) + _249;
    float _371 = ((sqrt(1.0 - (isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0)))) - _256) * _275) + _256;
    float _374 = fma(_371, _217, fma(_370, _210, _369 * _196));
    float _377 = fma(_371, _218, fma(_370, _211, _369 * _197));
    float _380 = fma(_371, _219, fma(_370, _212, _369 * _198));
    float _384 = inversesqrt(dot(vec3(_374, _377, _380), vec3(_374, _377, _380)));
    float _385 = _384 * _374;
    float _386 = _384 * _377;
    float _387 = _384 * _380;
    float _3584 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _388 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
    float _3595 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _3606 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _3617 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _3628 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _392 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
    float _408 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _450 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _460 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _450);
    float _461 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _450);
    float _462 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _450);
    float _466 = inversesqrt(dot(vec3(_460, _461, _462), vec3(_460, _461, _462)));
    float _467 = _460 * _466;
    float _468 = _461 * _466;
    float _469 = _462 * _466;
    float _475 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _476 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _497 = fma(_387, cbSceneParam._m0[5u].z, fma(_386, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _385));
    float _500 = fma(_387, cbSceneParam._m0[6u].z, fma(_386, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _385));
    float _503 = fma(_387, cbSceneParam._m0[7u].z, fma(_386, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _385));
    uint _516 = uint(roundEven(NORMAL.w)) * 13u;
    uint _519 = (_516 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _525 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0)))) * cbInstanceData._m0[_519].x;
    float _526 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0)))) * cbInstanceData._m0[_519].y;
    float _527 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0)))) * cbInstanceData._m0[_519].z;
    float _3639 = isnan(0.0) ? _525 : (isnan(_525) ? 0.0 : max(_525, 0.0));
    float _528 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
    float _3650 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _529 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
    float _3661 = isnan(0.0) ? _527 : (isnan(_527) ? 0.0 : max(_527, 0.0));
    float _530 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
    float _531 = 1.0 - _392;
    float _532 = _528 * _531;
    float _533 = _529 * _531;
    float _534 = _530 * _531;
    float _539 = (_528 + (-0.039999999105930328369140625)) * _392;
    float _540 = (_529 + (-0.039999999105930328369140625)) * _392;
    float _541 = (_530 + (-0.039999999105930328369140625)) * _392;
    float _542 = _539 + 0.039999999105930328369140625;
    float _544 = _540 + 0.039999999105930328369140625;
    float _545 = _541 + 0.039999999105930328369140625;
    vec4 _554 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _475, cbSceneParam._m0[86u].y * _476));
    float _557 = _554.x * TEXCOORD.z;
    float _558 = dot(vec3(_385, _386, _387), vec3(_467, _468, _469));
    float _561 = _558 * 2.0;
    float _565 = (_561 * _385) - _467;
    float _566 = (_561 * _386) - _468;
    float _567 = (_561 * _387) - _469;
    float _571 = abs(dot(vec3(_467, _468, _469), vec3(_385, _386, _387)));
    float _3672 = isnan(0.0) ? _571 : (isnan(_571) ? 0.0 : max(_571, 0.0));
    float _573 = sqrt(_388);
    float _586 = exp2((_573 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_573 * 3.0));
    float _592 = (1.0 - _586) * ((_573 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _593 = _586 * _573;
    float _621 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _625 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _629 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _931;
    float _933;
    float _934;
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _656 = fma(_629, cbModelParam._m0[26u].z, fma(_625, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _621));
        float _660 = fma(_629, cbModelParam._m0[27u].z, fma(_625, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _621));
        float _664 = fma(_629, cbModelParam._m0[28u].z, fma(_625, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _621));
        float _689 = _621 + _385;
        float _690 = _625 + _386;
        float _691 = _629 + _387;
        float _701 = fma(_691, cbModelParam._m0[26u].z, fma(_690, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _689)) - _656;
        float _702 = fma(_691, cbModelParam._m0[27u].z, fma(_690, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _689)) - _660;
        float _703 = fma(_691, cbModelParam._m0[28u].z, fma(_690, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _689)) - _664;
        float _707 = inversesqrt(dot(vec3(_701, _702, _703), vec3(_701, _702, _703)));
        float _720 = ((_707 * _701) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_656 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _721 = ((_707 * _702) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_660 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _722 = ((_707 * _703) / cbModelParam._m0[34u].z) + ((((((_664 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _725 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_720, _721, _722), 0.0);
        vec4 _732 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_720, _721, _722), 0.0);
        vec4 _739 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_720, _721, _722), 0.0);
        vec4 _746 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_720, _721, _722), 0.0);
        float _759 = exp2((_725.w + (-0.5)) * 20.0) * 2.0;
        float _760 = _759 * (_725.x + (-0.5));
        float _761 = _759 * (_725.y + (-0.5));
        float _762 = _759 * (_725.z + (-0.5));
        float _769 = exp2((_732.w + (-0.5)) * 20.0) * 2.0;
        float _770 = _769 * (_732.x + (-0.5));
        float _771 = _769 * (_732.y + (-0.5));
        float _772 = _769 * (_732.z + (-0.5));
        float _779 = exp2((_739.w + (-0.5)) * 20.0) * 2.0;
        float _780 = _779 * (_739.x + (-0.5));
        float _781 = _779 * (_739.y + (-0.5));
        float _782 = _779 * (_739.z + (-0.5));
        float _789 = exp2((_746.w + (-0.5)) * 20.0) * 2.0;
        float _790 = _789 * (_746.x + (-0.5));
        float _791 = _789 * (_746.y + (-0.5));
        float _792 = _789 * (_746.z + (-0.5));
        float _793 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _794 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        float _795 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        float _796 = _760 * 0.5;
        float _797 = _770 * 0.5;
        float _798 = _780 * 0.5;
        float _799 = dot(vec3(_796, _797, _798), vec3(_796, _797, _798));
        float _804 = (_799 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_799);
        float _813 = (dot(vec3(_385, _386, _387), vec3(_804 * _796, _804 * _797, _804 * _798)) + 1.0) * 0.5;
        float _3698 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _823 = sqrt(((_797 * _797) + (_796 * _796)) + (_798 * _798)) / (_793 + 9.9999997473787516355514526367188e-06);
        float _3709 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _824 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _825 = _824 * 2.0;
        float _829 = (1.0 - _824) / (_824 + 1.0);
        float _3720 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _830 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _839 = ((((1.0 - _830) * (_825 + 2.0)) * exp2(log2(isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))) * (_825 + 1.0))) + _830) * _793;
        float _840 = _761 * 0.5;
        float _841 = _771 * 0.5;
        float _842 = _781 * 0.5;
        float _843 = dot(vec3(_840, _841, _842), vec3(_840, _841, _842));
        float _848 = (_843 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_843);
        float _856 = (dot(vec3(_385, _386, _387), vec3(_848 * _840, _848 * _841, _848 * _842)) + 1.0) * 0.5;
        float _3731 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _865 = sqrt(((_841 * _841) + (_840 * _840)) + (_842 * _842)) / (_794 + 9.9999997473787516355514526367188e-06);
        float _3742 = isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0));
        float _866 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _867 = _866 * 2.0;
        float _871 = (1.0 - _866) / (_866 + 1.0);
        float _3753 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _872 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _881 = ((((1.0 - _872) * (_867 + 2.0)) * exp2(log2(isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * (_867 + 1.0))) + _872) * _794;
        float _882 = _762 * 0.5;
        float _883 = _772 * 0.5;
        float _884 = _782 * 0.5;
        float _885 = dot(vec3(_882, _883, _884), vec3(_882, _883, _884));
        float _890 = (_885 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_885);
        float _898 = (dot(vec3(_385, _386, _387), vec3(_890 * _882, _890 * _883, _890 * _884)) + 1.0) * 0.5;
        float _3764 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _907 = sqrt(((_883 * _883) + (_882 * _882)) + (_884 * _884)) / (_795 + 9.9999997473787516355514526367188e-06);
        float _3775 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _908 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _909 = _908 * 2.0;
        float _913 = (1.0 - _908) / (_908 + 1.0);
        float _3786 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _914 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _923 = ((((1.0 - _914) * (_909 + 2.0)) * exp2(log2(isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0))) * (_909 + 1.0))) + _914) * _795;
        _931 = _762;
        _933 = _761;
        _934 = _760;
        _935 = _772;
        _936 = _771;
        _937 = _770;
        _938 = _782;
        _939 = _781;
        _940 = _780;
        _941 = _795;
        _942 = _794;
        _943 = _793;
        _944 = cbModelParam._m0[36u].z * (isnan(0.0) ? _839 : (isnan(_839) ? 0.0 : max(_839, 0.0)));
        _945 = cbModelParam._m0[36u].z * (isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0)));
        _946 = cbModelParam._m0[36u].z * (isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0)));
    }
    else
    {
        _931 = _932;
        _933 = _932;
        _934 = _932;
        _935 = _932;
        _936 = _932;
        _937 = _932;
        _938 = _932;
        _939 = _932;
        _940 = _932;
        _941 = _932;
        _942 = _932;
        _943 = _932;
        _944 = 0.0;
        _945 = 0.0;
        _946 = 0.0;
    }
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _972 = fma(_629, cbModelParam._m0[30u].z, fma(_625, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _621));
        float _976 = fma(_629, cbModelParam._m0[31u].z, fma(_625, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _621));
        float _980 = fma(_629, cbModelParam._m0[32u].z, fma(_625, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _621));
        float _1003 = _621 + _385;
        float _1004 = _625 + _386;
        float _1005 = _629 + _387;
        float _1015 = fma(_1005, cbModelParam._m0[30u].z, fma(_1004, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1003)) - _972;
        float _1016 = fma(_1005, cbModelParam._m0[31u].z, fma(_1004, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1003)) - _976;
        float _1017 = fma(_1005, cbModelParam._m0[32u].z, fma(_1004, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1003)) - _980;
        float _1021 = inversesqrt(dot(vec3(_1015, _1016, _1017), vec3(_1015, _1016, _1017)));
        float _1034 = ((_1021 * _1015) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_972 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1035 = ((_1021 * _1016) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_976 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1036 = ((_1021 * _1017) / cbModelParam._m0[35u].z) + ((((((_980 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1038 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1034, _1035, _1036), 0.0);
        vec4 _1045 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1034, _1035, _1036), 0.0);
        vec4 _1052 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1034, _1035, _1036), 0.0);
        vec4 _1059 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1034, _1035, _1036), 0.0);
        float _1071 = exp2((_1038.w + (-0.5)) * 20.0) * 2.0;
        float _1072 = _1071 * (_1038.x + (-0.5));
        float _1073 = _1071 * (_1038.y + (-0.5));
        float _1074 = _1071 * (_1038.z + (-0.5));
        float _1081 = exp2((_1045.w + (-0.5)) * 20.0) * 2.0;
        float _1082 = _1081 * (_1045.x + (-0.5));
        float _1083 = _1081 * (_1045.y + (-0.5));
        float _1084 = _1081 * (_1045.z + (-0.5));
        float _1091 = exp2((_1052.w + (-0.5)) * 20.0) * 2.0;
        float _1092 = _1091 * (_1052.x + (-0.5));
        float _1093 = _1091 * (_1052.y + (-0.5));
        float _1094 = _1091 * (_1052.z + (-0.5));
        float _1101 = exp2((_1059.w + (-0.5)) * 20.0) * 2.0;
        float _1102 = _1101 * (_1059.x + (-0.5));
        float _1103 = _1101 * (_1059.y + (-0.5));
        float _1104 = _1101 * (_1059.z + (-0.5));
        float _1105 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1106 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1107 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1108 = _1072 * 0.5;
        float _1109 = _1082 * 0.5;
        float _1110 = _1092 * 0.5;
        float _1111 = dot(vec3(_1108, _1109, _1110), vec3(_1108, _1109, _1110));
        float _1116 = (_1111 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1111);
        float _1124 = (dot(vec3(_385, _386, _387), vec3(_1116 * _1108, _1116 * _1109, _1116 * _1110)) + 1.0) * 0.5;
        float _3827 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1133 = sqrt(((_1109 * _1109) + (_1108 * _1108)) + (_1110 * _1110)) / (_1105 + 9.9999997473787516355514526367188e-06);
        float _3838 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1135 = _1134 * 2.0;
        float _1139 = (1.0 - _1134) / (_1134 + 1.0);
        float _3849 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1149 = ((((1.0 - _1140) * (_1135 + 2.0)) * exp2(log2(isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) * (_1135 + 1.0))) + _1140) * _1105;
        float _1150 = _1073 * 0.5;
        float _1151 = _1083 * 0.5;
        float _1152 = _1093 * 0.5;
        float _1153 = dot(vec3(_1150, _1151, _1152), vec3(_1150, _1151, _1152));
        float _1158 = (_1153 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1153);
        float _1166 = (dot(vec3(_385, _386, _387), vec3(_1158 * _1150, _1158 * _1151, _1158 * _1152)) + 1.0) * 0.5;
        float _3860 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1175 = sqrt(((_1151 * _1151) + (_1150 * _1150)) + (_1152 * _1152)) / (_1106 + 9.9999997473787516355514526367188e-06);
        float _3871 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1177 = _1176 * 2.0;
        float _1181 = (1.0 - _1176) / (_1176 + 1.0);
        float _3882 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1191 = ((((1.0 - _1182) * (_1177 + 2.0)) * exp2(log2(isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * (_1177 + 1.0))) + _1182) * _1106;
        float _1192 = _1074 * 0.5;
        float _1193 = _1084 * 0.5;
        float _1194 = _1094 * 0.5;
        float _1195 = dot(vec3(_1192, _1193, _1194), vec3(_1192, _1193, _1194));
        float _1200 = (_1195 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1195);
        float _1208 = (dot(vec3(_385, _386, _387), vec3(_1200 * _1192, _1200 * _1193, _1200 * _1194)) + 1.0) * 0.5;
        float _3893 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1217 = sqrt(((_1193 * _1193) + (_1192 * _1192)) + (_1194 * _1194)) / (_1107 + 9.9999997473787516355514526367188e-06);
        float _3904 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1219 = _1218 * 2.0;
        float _1223 = (1.0 - _1218) / (_1218 + 1.0);
        float _3915 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1233 = ((((1.0 - _1224) * (_1219 + 2.0)) * exp2(log2(isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) * (_1219 + 1.0))) + _1224) * _1107;
        _1241 = _1074;
        _1242 = _1073;
        _1243 = _1072;
        _1244 = _1084;
        _1245 = _1083;
        _1246 = _1082;
        _1247 = _1094;
        _1248 = _1093;
        _1249 = _1092;
        _1250 = _1107;
        _1251 = _1106;
        _1252 = _1105;
        _1253 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0)));
        _1254 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0)));
        _1255 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)));
    }
    else
    {
        _1241 = _932;
        _1242 = _932;
        _1243 = _932;
        _1244 = _932;
        _1245 = _932;
        _1246 = _932;
        _1247 = _932;
        _1248 = _932;
        _1249 = _932;
        _1250 = _932;
        _1251 = _932;
        _1252 = _932;
        _1253 = 0.0;
        _1254 = 0.0;
        _1255 = 0.0;
    }
    float _1265 = (cbModelParam._m0[1u].x * (_1253 - _944)) + _944;
    float _1266 = (cbModelParam._m0[1u].x * (_1254 - _945)) + _945;
    float _1267 = (cbModelParam._m0[1u].x * (_1255 - _946)) + _946;
    float _1288 = fma(_1267, cbSceneParam._m0[89u].z, fma(_1266, cbSceneParam._m0[89u].y, _1265 * cbSceneParam._m0[89u].x));
    float _1291 = fma(_1267, cbSceneParam._m0[90u].z, fma(_1266, cbSceneParam._m0[90u].y, _1265 * cbSceneParam._m0[90u].x));
    float _1294 = fma(_1267, cbSceneParam._m0[91u].z, fma(_1266, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1265));
    float _1309 = _565 * 0.5;
    float _1310 = _566 * 0.5;
    float _1311 = _567 * 0.5;
    float _1312 = dot(vec4(_1309, _1310, _1311, 1.0), vec4(_1243, _1246, _1249, _1252));
    float _1315 = dot(vec4(_1309, _1310, _1311, 1.0), vec4(_1242, _1245, _1248, _1251));
    float _1318 = dot(vec4(_1309, _1310, _1311, 1.0), vec4(_1241, _1244, _1247, _1250));
    float _1352;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1325 = dot(vec4(_1309, _1310, _1311, 1.0), vec4(_931, _935, _938, _941));
        float _1329 = dot(vec4(_1309, _1310, _1311, 1.0), vec4(_933, _936, _939, _942));
        float _1333 = dot(vec4(_1309, _1310, _1311, 1.0), vec4(_934, _937, _940, _943));
        float _1340 = dot(vec4(cbModelParam._m0[39u]), vec4(_1309, _1310, _1311, 1.0));
        _1352 = dot(vec3(isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)), isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)), isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1340) ? 0.0 : (isnan(0.0) ? _1340 : max(0.0, _1340))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1352 = 1.0;
    }
    float _1363;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1354 = dot(vec4(cbModelParam._m0[40u]), vec4(_1309, _1310, _1311, 1.0));
        _1363 = dot(vec3(isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)), isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0)), isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1354) ? 0.0 : (isnan(0.0) ? _1354 : max(0.0, _1354))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1363 = 1.0;
    }
    float _1367 = (_1363 * cbModelParam._m0[1u].x) + (_1352 * (1.0 - cbModelParam._m0[1u].x));
    float _1377 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _388);
    float _1378 = isnan(_1377) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1377 : min(cbModelParam._m0[25u].z, _1377));
    float _1460;
    float _1462;
    float _1464;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1427 = fma(_629, cbModelParam._m0[13u].z, fma(_625, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _621)) + cbModelParam._m0[13u].w;
        float _1431 = fma(_629, cbModelParam._m0[14u].z, fma(_625, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _621)) + cbModelParam._m0[14u].w;
        float _1435 = fma(_629, cbModelParam._m0[15u].z, fma(_625, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _621)) + cbModelParam._m0[15u].w;
        float _1438 = fma(_567, cbModelParam._m0[13u].z, fma(_566, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _565));
        float _1441 = fma(_567, cbModelParam._m0[14u].z, fma(_566, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _565));
        float _1444 = fma(_567, cbModelParam._m0[15u].z, fma(_566, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _565));
        float _1472;
        if (_1438 > 0.0)
        {
            _1472 = abs((1.0 - _1427) / _1438);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1438 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1427 + 1.0) / _1438);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1472 = frontier_phi_16_14_ladder;
        }
        float _1648;
        if (_1441 > 0.0)
        {
            _1648 = abs((1.0 - _1431) / _1441);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1441 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1431 + 1.0) / _1441);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1648 = frontier_phi_25_21_ladder;
        }
        float _1943;
        if (_1444 > 0.0)
        {
            _1943 = abs((1.0 - _1435) / _1444);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1444 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1435 + 1.0) / _1444);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1943 = frontier_phi_37_32_ladder;
        }
        float _1945 = isnan(_1648) ? _1472 : (isnan(_1472) ? _1648 : min(_1472, _1648));
        float _1946 = isnan(_1943) ? _1945 : (isnan(_1945) ? _1943 : min(_1945, _1943));
        float _1950 = (_1946 * _1438) + _1427;
        float _1951 = (_1946 * _1441) + _1431;
        float _1952 = (_1946 * _1444) + _1435;
        float _1953 = _1946 * 9.9999997473787516355514526367188e-05;
        float _1955 = (-1.0) - _1953;
        float _1957 = _1953 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1952 > _1957) || ((_1952 < _1955) || ((_1951 > _1957) || ((_1951 < _1955) || ((_1950 < _1955) || (_1950 > _1957))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2097 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1952, cbModelParam._m0[9u].z, fma(_1951, cbModelParam._m0[9u].y, _1950 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1952, cbModelParam._m0[10u].z, fma(_1951, cbModelParam._m0[10u].y, _1950 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1952, cbModelParam._m0[11u].z, fma(_1951, cbModelParam._m0[11u].y, _1950 * cbModelParam._m0[11u].x))), _1378);
            frontier_phi_15_37_ladder = _2097.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2097.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2097.z * cbModelParam._m0[1u].y;
        }
        _1460 = frontier_phi_15_37_ladder_1;
        _1462 = frontier_phi_15_37_ladder;
        _1464 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1448 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_565, _566, _567), _1378);
        _1460 = _1448.x * cbModelParam._m0[1u].y;
        _1462 = _1448.y * cbModelParam._m0[1u].y;
        _1464 = _1448.z * cbModelParam._m0[1u].y;
    }
    float _1468 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _388);
    float _1469 = isnan(_1468) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1468 : min(cbModelParam._m0[25u].w, _1468));
    float _1562;
    float _1564;
    float _1566;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1526 = fma(_629, cbModelParam._m0[21u].z, fma(_625, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _621)) + cbModelParam._m0[21u].w;
        float _1530 = fma(_629, cbModelParam._m0[22u].z, fma(_625, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _621)) + cbModelParam._m0[22u].w;
        float _1534 = fma(_629, cbModelParam._m0[23u].z, fma(_625, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _621)) + cbModelParam._m0[23u].w;
        float _1537 = fma(_567, cbModelParam._m0[21u].z, fma(_566, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _565));
        float _1540 = fma(_567, cbModelParam._m0[22u].z, fma(_566, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _565));
        float _1543 = fma(_567, cbModelParam._m0[23u].z, fma(_566, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _565));
        float _1653;
        if (_1537 > 0.0)
        {
            _1653 = abs((1.0 - _1526) / _1537);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1537 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1526 + 1.0) / _1537);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1653 = frontier_phi_27_23_ladder;
        }
        float _1970;
        if (_1540 > 0.0)
        {
            _1970 = abs((1.0 - _1530) / _1540);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1540 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1530 + 1.0) / _1540);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1970 = frontier_phi_39_34_ladder;
        }
        float _2308;
        if (_1543 > 0.0)
        {
            _2308 = abs((1.0 - _1534) / _1543);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1543 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1534 + 1.0) / _1543);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2308 = frontier_phi_49_46_ladder;
        }
        float _2310 = isnan(_1970) ? _1653 : (isnan(_1653) ? _1970 : min(_1653, _1970));
        float _2311 = isnan(_2308) ? _2310 : (isnan(_2310) ? _2308 : min(_2310, _2308));
        float _2315 = (_2311 * _1537) + _1526;
        float _2316 = (_2311 * _1540) + _1530;
        float _2317 = (_2311 * _1543) + _1534;
        float _2318 = _2311 * 9.9999997473787516355514526367188e-05;
        float _2319 = (-1.0) - _2318;
        float _2321 = _2318 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2317 > _2321) || ((_2317 < _2319) || ((_2316 > _2321) || ((_2316 < _2319) || ((_2315 < _2319) || (_2315 > _2321))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2439 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2317, cbModelParam._m0[17u].z, fma(_2316, cbModelParam._m0[17u].y, _2315 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2317, cbModelParam._m0[18u].z, fma(_2316, cbModelParam._m0[18u].y, _2315 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2317, cbModelParam._m0[19u].z, fma(_2316, cbModelParam._m0[19u].y, _2315 * cbModelParam._m0[19u].x))), _1469);
            frontier_phi_24_49_ladder = _2439.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2439.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2439.x * cbModelParam._m0[1u].z;
        }
        _1562 = frontier_phi_24_49_ladder_2;
        _1564 = frontier_phi_24_49_ladder_1;
        _1566 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1546 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_565, _566, _567), _1469);
        _1562 = _1546.x * cbModelParam._m0[1u].z;
        _1564 = _1546.y * cbModelParam._m0[1u].z;
        _1566 = _1546.z * cbModelParam._m0[1u].z;
    }
    float _1579 = (((_592 * _542) + _593) * _557) * ((cbModelParam._m0[1u].w * (_1562 - _1460)) + _1460);
    float _1581 = (((_592 * _544) + _593) * _557) * ((cbModelParam._m0[1u].w * (_1564 - _1462)) + _1462);
    float _1583 = (((_592 * _545) + _593) * _557) * ((cbModelParam._m0[1u].w * (_1566 - _1464)) + _1464);
    float _1586 = fma(_1583, cbSceneParam._m0[89u].z, fma(_1581, cbSceneParam._m0[89u].y, _1579 * cbSceneParam._m0[89u].x));
    float _1589 = fma(_1583, cbSceneParam._m0[90u].z, fma(_1581, cbSceneParam._m0[90u].y, _1579 * cbSceneParam._m0[90u].x));
    float _1592 = fma(_1583, cbSceneParam._m0[91u].z, fma(_1581, cbSceneParam._m0[91u].y, _1579 * cbSceneParam._m0[91u].x));
    float _1627 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1631 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1635 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1639 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1640 = _1627 / _1639;
    float _1641 = _1631 / _1639;
    float _1642 = _1635 / _1639;
    float _1789;
    float _1790;
    float _1791;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1669 = ((uint(_1642 > cbSceneParam._m0[59u].y) + uint(_1642 > cbSceneParam._m0[59u].x)) + uint(_1642 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1670 = _1669 + 43u;
        uint _1678 = _1669 + 44u;
        uint _1686 = _1669 + 45u;
        uint _1694 = _1669 + 46u;
        float _1705 = fma(_1639, cbSceneParam._m0[_1670].w, fma(_1635, cbSceneParam._m0[_1670].z, fma(_1631, cbSceneParam._m0[_1670].y, _1627 * cbSceneParam._m0[_1670].x)));
        float _1709 = fma(_1639, cbSceneParam._m0[_1678].w, fma(_1635, cbSceneParam._m0[_1678].z, fma(_1631, cbSceneParam._m0[_1678].y, _1627 * cbSceneParam._m0[_1678].x)));
        float _1717 = fma(_1639, cbSceneParam._m0[_1694].w, fma(_1635, cbSceneParam._m0[_1694].z, fma(_1631, cbSceneParam._m0[_1694].y, _1627 * cbSceneParam._m0[_1694].x)));
        float _1722 = cbSceneParam._m0[33u].z * _1717;
        float _1724 = cbSceneParam._m0[33u].w * _1717;
        float _1727 = fma(_1639, cbSceneParam._m0[_1686].w, fma(_1635, cbSceneParam._m0[_1686].z, fma(_1631, cbSceneParam._m0[_1686].y, _1627 * cbSceneParam._m0[_1686].x))) / _1717;
        float _1775 = (cbSceneParam._m0[33u].x - sqrt(((_1641 * _1641) + (_1640 * _1640)) + (_1642 * _1642))) * cbSceneParam._m0[33u].y;
        float _4041 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
        float _1782 = (isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1722 + _1705) / _1717, (_1724 + _1709) / _1717), _1727), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1724 + _1705) / _1717, (_1709 - _1722) / _1717), _1727), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1705 - _1722) / _1717, (_1709 - _1724) / _1717), _1727), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1705 - _1724) / _1717, (_1722 + _1709) / _1717), _1727), 0.0)).x), vec4(0.25)));
        _1789 = 1.0 - (_1782 * cbSceneParam._m0[34u].x);
        _1790 = 1.0 - (_1782 * cbSceneParam._m0[34u].y);
        _1791 = 1.0 - (_1782 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1789 = 1.0;
        _1790 = 1.0;
        _1791 = 1.0;
    }
    float _1855;
    float _1857;
    float _1859;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1843 = fma(_1639, cbSceneParam._m0[63u].w, fma(_1635, cbSceneParam._m0[63u].z, fma(_1631, cbSceneParam._m0[63u].y, _1627 * cbSceneParam._m0[63u].x)));
        float _1844 = fma(_1639, cbSceneParam._m0[60u].w, fma(_1635, cbSceneParam._m0[60u].z, fma(_1631, cbSceneParam._m0[60u].y, _1627 * cbSceneParam._m0[60u].x))) / _1843;
        float _1845 = fma(_1639, cbSceneParam._m0[61u].w, fma(_1635, cbSceneParam._m0[61u].z, fma(_1631, cbSceneParam._m0[61u].y, _1627 * cbSceneParam._m0[61u].x))) / _1843;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1844 >= cbSceneParam._m0[64u].x) && (_1845 >= cbSceneParam._m0[64u].y)) && (_1844 <= cbSceneParam._m0[64u].z)) && (_1845 <= cbSceneParam._m0[64u].w))
        {
            float _1983 = fma(_1639, cbSceneParam._m0[62u].w, fma(_1635, cbSceneParam._m0[62u].z, fma(_1631, cbSceneParam._m0[62u].y, _1627 * cbSceneParam._m0[62u].x))) / _1843;
            float _1987 = isnan(cbSceneParam._m0[41u].w) ? _1983 : (isnan(_1983) ? cbSceneParam._m0[41u].w : max(_1983, cbSceneParam._m0[41u].w));
            float _2030 = (cbSceneParam._m0[33u].x - sqrt(((_1641 * _1641) + (_1640 * _1640)) + (_1642 * _1642))) * cbSceneParam._m0[33u].y;
            float _4057 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
            float _2037 = (isnan(1.0) ? _4057 : (isnan(_4057) ? 1.0 : min(_4057, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1844, cbSceneParam._m0[33u].w + _1845), _1987), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1844, _1845 - cbSceneParam._m0[33u].z), _1987), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1844 - cbSceneParam._m0[33u].z, _1845 - cbSceneParam._m0[33u].w), _1987), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1844 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1845), _1987), 0.0)).x), vec4(0.25)));
            float _2041 = 1.0 - (_2037 * cbSceneParam._m0[34u].x);
            float _2042 = 1.0 - (_2037 * cbSceneParam._m0[34u].y);
            float _2043 = 1.0 - (_2037 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_2042) ? _1790 : (isnan(_1790) ? _2042 : min(_1790, _2042));
            frontier_phi_36_35_ladder_1 = isnan(_2043) ? _1791 : (isnan(_1791) ? _2043 : min(_1791, _2043));
            frontier_phi_36_35_ladder_2 = isnan(_2041) ? _1789 : (isnan(_1789) ? _2041 : min(_1789, _2041));
        }
        else
        {
            frontier_phi_36_35_ladder = _1790;
            frontier_phi_36_35_ladder_1 = _1791;
            frontier_phi_36_35_ladder_2 = _1789;
        }
        _1855 = frontier_phi_36_35_ladder_2;
        _1857 = frontier_phi_36_35_ladder;
        _1859 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1855 = _1789;
        _1857 = _1790;
        _1859 = _1791;
    }
    uvec4 _1864 = floatBitsToUint(cbInstanceData._m0[_516 + 5u]);
    uint _1866 = _1864.x * 14u;
    uint _1867 = _1866 + 13u;
    float _1874 = _557 + (-1.0);
    float _1879 = (cbLight._m0[_1867].x * _1874) + 1.0;
    float _1880 = (cbLight._m0[_1867].y * _1874) + 1.0;
    float _1881 = (cbLight._m0[_1867].z * _1874) + 1.0;
    float _1882 = (cbLight._m0[_1867].w * _1874) + 1.0;
    uint _1883 = _1866 + 5u;
    float _1889 = isnan(1.0) ? _1880 : (isnan(_1880) ? 1.0 : min(_1880, 1.0));
    uint _1893 = _1866 + 4u;
    float _1902 = isnan(1.0) ? _1879 : (isnan(_1879) ? 1.0 : min(_1879, 1.0));
    uint _1906 = _1866 | 1u;
    float _1917 = dot(vec3(cbLight._m0[_1866].xyz), vec3(_385, _386, _387));
    float _1920 = dot(vec3(cbLight._m0[_1906].xyz), vec3(_385, _386, _387));
    float _4093 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
    float _4104 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
    float _1925 = (isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * 0.3183098733425140380859375;
    float _1927 = (isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0))) * 0.3183098733425140380859375;
    float _1934 = ((cbLight._m0[_1883].x * _1889) * _1927) + (((cbLight._m0[_1893].x * _1855) * _1902) * _1925);
    float _1935 = ((_1889 * cbLight._m0[_1883].y) * _1927) + (((cbLight._m0[_1893].y * _1857) * _1902) * _1925);
    float _1936 = ((_1889 * cbLight._m0[_1883].z) * _1927) + (((cbLight._m0[_1893].z * _1859) * _1902) * _1925);
    uvec4 _1940 = floatBitsToUint(cbLight._m0[_1866 + 12u]);
    bool _1942 = _1940.x == 0u;
    float _2044;
    float _2046;
    float _2048;
    if (_1942)
    {
        _2044 = _1934;
        _2046 = _1935;
        _2048 = _1936;
    }
    else
    {
        uint _2052 = _1866 + 6u;
        float _2068 = (dot(vec3(cbLight._m0[_1866 + 2u].xyz), vec3(_385, _386, _387)) * 0.5) + 0.5;
        float _2069 = _2068 * _2068;
        float _4115 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
        float _2070 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _2071 = isnan(1.0) ? _1881 : (isnan(_1881) ? 1.0 : min(_1881, 1.0));
        _2044 = (((cbLight._m0[_2052].x * 0.3183098733425140380859375) * _2070) * _2071) + _1934;
        _2046 = (((cbLight._m0[_2052].y * 0.3183098733425140380859375) * _2070) * _2071) + _1935;
        _2048 = (((cbLight._m0[_2052].z * 0.3183098733425140380859375) * _2070) * _2071) + _1936;
    }
    bool _2051 = _1940.y == 0u;
    float _2106;
    float _2108;
    float _2110;
    if (_2051)
    {
        _2106 = _2044;
        _2108 = _2046;
        _2110 = _2048;
    }
    else
    {
        uint _2279 = _1866 + 7u;
        float _2295 = (dot(vec3(cbLight._m0[_1866 + 3u].xyz), vec3(_385, _386, _387)) * 0.5) + 0.5;
        float _2296 = _2295 * _2295;
        float _4131 = isnan(0.0) ? _2296 : (isnan(_2296) ? 0.0 : max(_2296, 0.0));
        float _2297 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
        float _2298 = isnan(1.0) ? _1882 : (isnan(_1882) ? 1.0 : min(_1882, 1.0));
        _2106 = (((cbLight._m0[_2279].x * 0.3183098733425140380859375) * _2297) * _2298) + _2044;
        _2108 = (((cbLight._m0[_2279].y * 0.3183098733425140380859375) * _2297) * _2298) + _2046;
        _2110 = (((cbLight._m0[_2279].z * 0.3183098733425140380859375) * _2297) * _2298) + _2048;
    }
    uint _2113 = _1866 + 8u;
    float _2126 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1866].w)) * _388) * 0.949999988079071044921875);
    float _2127 = _2126 * _2126;
    float _2128 = cbLight._m0[_1866].x + _467;
    float _2129 = cbLight._m0[_1866].y + _468;
    float _2130 = cbLight._m0[_1866].z + _469;
    float _2134 = inversesqrt(dot(vec3(_2128, _2129, _2130), vec3(_2128, _2129, _2130)));
    float _2135 = _2134 * _2128;
    float _2136 = _2134 * _2129;
    float _2137 = _2134 * _2130;
    float _2138 = dot(vec3(_385, _386, _387), vec3(cbLight._m0[_1866].xyz));
    float _4147 = isnan(0.0) ? _2138 : (isnan(_2138) ? 0.0 : max(_2138, 0.0));
    float _2141 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
    float _4158 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
    float _2142 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
    float _2143 = dot(vec3(_385, _386, _387), vec3(_2135, _2136, _2137));
    float _4169 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
    float _2146 = isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0));
    float _2147 = dot(vec3(cbLight._m0[_1866].xyz), vec3(_2135, _2136, _2137));
    float _4180 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2151 = _2127 * _2127;
    float _2155 = ((_2146 * _2146) * (_2151 + (-1.0))) + 1.0;
    float _2163 = exp2(log2(1.0 - (isnan(1.0) ? _4180 : (isnan(_4180) ? 1.0 : min(_4180, 1.0)))) * 5.0);
    float _2164 = 0.959999978542327880859375 - _539;
    float _2166 = 0.959999978542327880859375 - _540;
    float _2167 = 0.959999978542327880859375 - _541;
    float _2174 = 1.0 - _2127;
    float _2185 = (0.5 / (((_2142 * ((_2141 * _2174) + _2127)) + 9.9999999392252902907785028219223e-09) + (((_2142 * _2174) + _2127) * _2141))) * _2141;
    float _4191 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
    float _2187 = (isnan(1.0) ? _4191 : (isnan(_4191) ? 1.0 : min(_4191, 1.0))) * (_2151 / ((_2155 * _2155) * 3.141590118408203125));
    uint _2201 = _1866 + 9u;
    float _2212 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1906].w)) * _388) * 0.949999988079071044921875);
    float _2213 = _2212 * _2212;
    float _2214 = cbLight._m0[_1906].x + _467;
    float _2215 = cbLight._m0[_1906].y + _468;
    float _2216 = cbLight._m0[_1906].z + _469;
    float _2220 = inversesqrt(dot(vec3(_2214, _2215, _2216), vec3(_2214, _2215, _2216)));
    float _2221 = _2220 * _2214;
    float _2222 = _2220 * _2215;
    float _2223 = _2220 * _2216;
    float _2224 = dot(vec3(_385, _386, _387), vec3(cbLight._m0[_1906].xyz));
    float _4202 = isnan(0.0) ? _2224 : (isnan(_2224) ? 0.0 : max(_2224, 0.0));
    float _2227 = isnan(1.0) ? _4202 : (isnan(_4202) ? 1.0 : min(_4202, 1.0));
    float _2228 = dot(vec3(_385, _386, _387), vec3(_2221, _2222, _2223));
    float _4213 = isnan(0.0) ? _2228 : (isnan(_2228) ? 0.0 : max(_2228, 0.0));
    float _2231 = isnan(1.0) ? _4213 : (isnan(_4213) ? 1.0 : min(_4213, 1.0));
    float _2232 = dot(vec3(cbLight._m0[_1906].xyz), vec3(_2221, _2222, _2223));
    float _4224 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
    float _2236 = _2213 * _2213;
    float _2240 = ((_2231 * _2231) * (_2236 + (-1.0))) + 1.0;
    float _2247 = exp2(log2(1.0 - (isnan(1.0) ? _4224 : (isnan(_4224) ? 1.0 : min(_4224, 1.0)))) * 5.0);
    float _2254 = 1.0 - _2213;
    float _2264 = (0.5 / (((_2142 * ((_2227 * _2254) + _2213)) + 9.9999999392252902907785028219223e-09) + (((_2142 * _2254) + _2213) * _2227))) * _2227;
    float _4235 = isnan(0.0) ? _2264 : (isnan(_2264) ? 0.0 : max(_2264, 0.0));
    float _2266 = (isnan(1.0) ? _4235 : (isnan(_4235) ? 1.0 : min(_4235, 1.0))) * (_2236 / ((_2240 * _2240) * 3.141590118408203125));
    float _2276 = (((((_2247 * _2164) + _542) * cbLight._m0[_2201].x) * _2266) * _1889) + ((((cbLight._m0[_2113].x * _1855) * ((_2163 * _2164) + _542)) * _2187) * _1902);
    float _2277 = (((((_2247 * _2166) + _544) * cbLight._m0[_2201].y) * _2266) * _1889) + ((((cbLight._m0[_2113].y * _1857) * ((_2163 * _2166) + _544)) * _2187) * _1902);
    float _2278 = (((((_2247 * _2167) + _545) * cbLight._m0[_2201].z) * _2266) * _1889) + ((((cbLight._m0[_2113].z * _1859) * ((_2163 * _2167) + _545)) * _2187) * _1902);
    float _2334;
    float _2336;
    float _2338;
    if (_1942)
    {
        _2334 = _2276;
        _2336 = _2277;
        _2338 = _2278;
    }
    else
    {
        uint _2340 = _1866 + 2u;
        uint _2344 = _1866 + 10u;
        float _2358 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2340].w)) * _388) * 0.949999988079071044921875);
        float _2359 = _2358 * _2358;
        float _2360 = cbLight._m0[_2340].x + _467;
        float _2361 = cbLight._m0[_2340].y + _468;
        float _2362 = cbLight._m0[_2340].z + _469;
        float _2366 = inversesqrt(dot(vec3(_2360, _2361, _2362), vec3(_2360, _2361, _2362)));
        float _2367 = _2366 * _2360;
        float _2368 = _2366 * _2361;
        float _2369 = _2366 * _2362;
        float _2370 = dot(vec3(_385, _386, _387), vec3(cbLight._m0[_2340].xyz));
        float _4246 = isnan(0.0) ? _2370 : (isnan(_2370) ? 0.0 : max(_2370, 0.0));
        float _2373 = isnan(1.0) ? _4246 : (isnan(_4246) ? 1.0 : min(_4246, 1.0));
        float _2374 = dot(vec3(_385, _386, _387), vec3(_2367, _2368, _2369));
        float _4257 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
        float _2377 = isnan(1.0) ? _4257 : (isnan(_4257) ? 1.0 : min(_4257, 1.0));
        float _2378 = dot(vec3(cbLight._m0[_2340].xyz), vec3(_2367, _2368, _2369));
        float _4268 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
        float _2382 = _2359 * _2359;
        float _2386 = ((_2377 * _2377) * (_2382 + (-1.0))) + 1.0;
        float _2393 = exp2(log2(1.0 - (isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0)))) * 5.0);
        float _2400 = 1.0 - _2359;
        float _2410 = (0.5 / (((_2142 * ((_2373 * _2400) + _2359)) + 9.9999999392252902907785028219223e-09) + (((_2142 * _2400) + _2359) * _2373))) * _2373;
        float _4279 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
        float _2412 = (isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_2382 / ((_2386 * _2386) * 3.141590118408203125));
        float _2413 = isnan(1.0) ? _1881 : (isnan(_1881) ? 1.0 : min(_1881, 1.0));
        _2334 = (((((_2393 * _2164) + _542) * cbLight._m0[_2344].x) * _2412) * _2413) + _2276;
        _2336 = (((((_2393 * _2166) + _544) * cbLight._m0[_2344].y) * _2412) * _2413) + _2277;
        _2338 = (((((_2393 * _2167) + _545) * cbLight._m0[_2344].z) * _2412) * _2413) + _2278;
    }
    float _2444;
    float _2446;
    float _2448;
    if (_2051)
    {
        _2444 = _2334;
        _2446 = _2336;
        _2448 = _2338;
    }
    else
    {
        uint _2455 = _1866 + 3u;
        uint _2459 = _1866 + 11u;
        float _2473 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2455].w)) * _388) * 0.949999988079071044921875);
        float _2474 = _2473 * _2473;
        float _2475 = cbLight._m0[_2455].x + _467;
        float _2476 = cbLight._m0[_2455].y + _468;
        float _2477 = cbLight._m0[_2455].z + _469;
        float _2481 = inversesqrt(dot(vec3(_2475, _2476, _2477), vec3(_2475, _2476, _2477)));
        float _2482 = _2481 * _2475;
        float _2483 = _2481 * _2476;
        float _2484 = _2481 * _2477;
        float _2485 = dot(vec3(_385, _386, _387), vec3(cbLight._m0[_2455].xyz));
        float _4295 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
        float _2488 = isnan(1.0) ? _4295 : (isnan(_4295) ? 1.0 : min(_4295, 1.0));
        float _2489 = dot(vec3(_385, _386, _387), vec3(_2482, _2483, _2484));
        float _4306 = isnan(0.0) ? _2489 : (isnan(_2489) ? 0.0 : max(_2489, 0.0));
        float _2492 = isnan(1.0) ? _4306 : (isnan(_4306) ? 1.0 : min(_4306, 1.0));
        float _2493 = dot(vec3(cbLight._m0[_2455].xyz), vec3(_2482, _2483, _2484));
        float _4317 = isnan(0.0) ? _2493 : (isnan(_2493) ? 0.0 : max(_2493, 0.0));
        float _2497 = _2474 * _2474;
        float _2501 = ((_2492 * _2492) * (_2497 + (-1.0))) + 1.0;
        float _2508 = exp2(log2(1.0 - (isnan(1.0) ? _4317 : (isnan(_4317) ? 1.0 : min(_4317, 1.0)))) * 5.0);
        float _2515 = 1.0 - _2474;
        float _2525 = (0.5 / (((_2142 * ((_2488 * _2515) + _2474)) + 9.9999999392252902907785028219223e-09) + (((_2142 * _2515) + _2474) * _2488))) * _2488;
        float _4328 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
        float _2527 = (isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0))) * (_2497 / ((_2501 * _2501) * 3.141590118408203125));
        float _2528 = isnan(1.0) ? _1882 : (isnan(_1882) ? 1.0 : min(_1882, 1.0));
        _2444 = (((((_2508 * _2164) + _542) * cbLight._m0[_2459].x) * _2527) * _2528) + _2334;
        _2446 = (((((_2508 * _2166) + _544) * cbLight._m0[_2459].y) * _2527) * _2528) + _2336;
        _2448 = (((((_2508 * _2167) + _545) * cbLight._m0[_2459].z) * _2527) * _2528) + _2338;
    }
    float _2593;
    float _2595;
    float _2597;
    float _2599;
    float _2601;
    float _2603;
    if (_1864.y == 0u)
    {
        uvec4 _2549 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2550 = _2549.x;
        uint _2561 = uint((float(_2549.y) * floor(float(uint(cbSceneParam._m0[85u].y * _476) / _2550))) + floor(float(uint(cbSceneParam._m0[85u].x * _475) / _2550)));
        float _2571 = (log2(_1642 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2572 = isnan(0.0) ? _2571 : (isnan(_2571) ? 0.0 : max(_2571, 0.0));
        uint _2575 = uint(isnan(14.0) ? _2572 : (isnan(_2572) ? 14.0 : min(_2572, 14.0)));
        uvec4 _2580 = texelFetch(g_lightClusterGridBuffer, int(((_2575 << 2u) + (_2561 << 6u)) >> 2u));
        uint _2581 = _2580.x;
        uint _2582 = _2549.z;
        float _2660;
        float _2662;
        float _2664;
        float _2666;
        float _2668;
        float _2670;
        if (((((1u << ((_2582 >> 4u) & 15u)) + 4294967295u) & _2581) == 0u) || ((_2582 & 240u) == 0u))
        {
            _2660 = 0.0;
            _2662 = 0.0;
            _2664 = 0.0;
            _2666 = 0.0;
            _2668 = 0.0;
            _2670 = 0.0;
        }
        else
        {
            float _2661;
            float _2663;
            float _2665;
            float _2667;
            float _2669;
            float _2671;
            float _2804 = 0.0;
            float _2805 = 0.0;
            float _2806 = 0.0;
            float _2807 = 0.0;
            float _2808 = 0.0;
            float _2809 = 0.0;
            uint _2810 = 0u;
            uint _2819;
            bool _2820;
            for (;;)
            {
                _2819 = texelFetch(g_lightClassification, int((((_2575 << 5u) + (_2561 << 9u)) + (_2810 << 2u)) >> 2u)).x;
                _2820 = _2819 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2820)
                {
                    frontier_phi_68_pred = _2809;
                    frontier_phi_68_pred_1 = _2808;
                    frontier_phi_68_pred_2 = _2807;
                    frontier_phi_68_pred_3 = _2805;
                    frontier_phi_68_pred_4 = _2804;
                    frontier_phi_68_pred_5 = _2806;
                }
                else
                {
                    float _2928;
                    float _2929;
                    float _2930;
                    float _2931;
                    float _2932;
                    float _2933;
                    uint _2934;
                    _2928 = _2804;
                    _2929 = _2805;
                    _2930 = _2806;
                    _2931 = _2807;
                    _2932 = _2808;
                    _2933 = _2809;
                    _2934 = _2819;
                    float _2860;
                    float _2861;
                    float _2862;
                    float _2863;
                    float _2864;
                    float _2865;
                    for (;;)
                    {
                        uint _2938 = uint(findLSB(_2934)) + (_2810 << 5u);
                        uint _2935 = (_2934 + 4294967295u) & _2934;
                        uint _2940 = _2938 * 48u;
                        vec4 _2954 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2940)).x, texelFetch(g_PointLightRenderingBuffer, int(_2940 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2940 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2940 + 3u)).x));
                        uint _2960 = (_2938 * 48u) + 4u;
                        vec4 _2973 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2960)).x, texelFetch(g_PointLightRenderingBuffer, int(_2960 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2960 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2960 + 3u)).x));
                        uint _2979 = (_2938 * 48u) + 8u;
                        vec3 _2990 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2979)).x, texelFetch(g_PointLightRenderingBuffer, int(_2979 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2979 + 2u)).x));
                        float _2994 = _2954.x - _1640;
                        float _2995 = _2954.y - _1641;
                        float _2996 = _2954.z - _1642;
                        float _2997 = dot(vec3(_2994, _2995, _2996), vec3(_2994, _2995, _2996));
                        float _3000 = inversesqrt(_2997);
                        float _3001 = _3000 * _2994;
                        float _3002 = _3000 * _2995;
                        float _3003 = _3000 * _2996;
                        float _3004 = dot(vec3(_497, _500, _503), vec3(_3001, _3002, _3003));
                        float _3009 = 1.0 - (_2997 * _2954.w);
                        float _4354 = isnan(0.0) ? _3009 : (isnan(_3009) ? 0.0 : max(_3009, 0.0));
                        float _3010 = isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0));
                        float _3011 = sqrt(_2997) * _2973.w;
                        float _3014 = 1.39999997615814208984375 / (_3011 + 1.39999997615814208984375);
                        float _3015 = _3014 * _3014;
                        float _3018 = ((1.0 - _3015) * _3004) + _3015;
                        float _3021 = _3011 * _3011;
                        float _3025 = ((isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0))) * _3010) / ((_3021 * 0.699999988079071044921875) + 1.0);
                        float _3029 = (-0.0) - _1640;
                        float _3030 = (-0.0) - _1641;
                        float _3031 = (-0.0) - _1642;
                        float _3035 = inversesqrt(dot(vec3(_3029, _3030, _3031), vec3(_3029, _3030, _3031)));
                        float _3036 = _3035 * _3029;
                        float _3037 = _3035 * _3030;
                        float _3038 = _3035 * _3031;
                        float _3045 = exp2(log2(1.0 / ((_3021 * 3.5) + 5.0)) * 0.25);
                        float _3046 = 1.0 - _573;
                        float _3053 = sqrt(1.0 - ((1.0 - (_3046 * _3046)) * (1.0 - (_3045 * _3045))));
                        float _3054 = _3053 * _3053;
                        float _3055 = _3054 * _3054;
                        float _3056 = _3036 + _3001;
                        float _3057 = _3037 + _3002;
                        float _3058 = _3038 + _3003;
                        float _3062 = inversesqrt(dot(vec3(_3056, _3057, _3058), vec3(_3056, _3057, _3058)));
                        float _3066 = dot(vec3(_497, _500, _503), vec3(_3036, _3037, _3038));
                        float _4370 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                        float _3069 = isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0));
                        float _3070 = dot(vec3(_497, _500, _503), vec3(_3062 * _3056, _3062 * _3057, _3062 * _3058));
                        float _4381 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
                        float _3073 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
                        float _3077 = ((_3073 * _3073) * (_3055 + (-1.0))) + 1.0;
                        float _3078 = _3014 * _3054;
                        float _3079 = _3078 * _3078;
                        float _3082 = ((1.0 - _3079) * _3004) + _3079;
                        float _4392 = isnan(0.0) ? _3082 : (isnan(_3082) ? 0.0 : max(_3082, 0.0));
                        float _3083 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
                        float _3084 = 1.0 - _3054;
                        float _3094 = (0.5 / (((_3083 * ((_3069 * _3084) + _3054)) + 9.9999999392252902907785028219223e-09) + (((_3083 * _3084) + _3054) * _3069))) * _3083;
                        float _4403 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
                        float _3105 = (((_3055 * 3.1415927410125732421875) * (isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0)))) / ((_3077 * _3077) * ((_3021 * 2.1991131305694580078125) + 3.141590118408203125))) * _3010;
                        _2863 = (_3025 * _2973.x) + _2931;
                        _2864 = (_3025 * _2973.y) + _2932;
                        _2865 = (_3025 * _2973.z) + _2933;
                        _2860 = (_3105 * _2990.x) + _2928;
                        _2861 = (_3105 * _2990.y) + _2929;
                        _2862 = (_3105 * _2990.z) + _2930;
                        if (_2935 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2928 = _2860;
                            _2929 = _2861;
                            _2930 = _2862;
                            _2931 = _2863;
                            _2932 = _2864;
                            _2933 = _2865;
                            _2934 = _2935;
                        }
                    }
                    frontier_phi_68_pred = _2865;
                    frontier_phi_68_pred_1 = _2864;
                    frontier_phi_68_pred_2 = _2863;
                    frontier_phi_68_pred_3 = _2861;
                    frontier_phi_68_pred_4 = _2860;
                    frontier_phi_68_pred_5 = _2862;
                }
                _2671 = frontier_phi_68_pred;
                _2669 = frontier_phi_68_pred_1;
                _2667 = frontier_phi_68_pred_2;
                _2663 = frontier_phi_68_pred_3;
                _2661 = frontier_phi_68_pred_4;
                _2665 = frontier_phi_68_pred_5;
                uint _2811 = _2810 + 1u;
                if (_2811 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2804 = _2661;
                    _2805 = _2663;
                    _2806 = _2665;
                    _2807 = _2667;
                    _2808 = _2669;
                    _2809 = _2671;
                    _2810 = _2811;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2660 = _2661;
            _2662 = _2663;
            _2664 = _2665;
            _2666 = _2667;
            _2668 = _2669;
            _2670 = _2671;
        }
        uvec4 _2674 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2675 = _2674.z;
        uint _2677 = (_2675 >> 8u) & 15u;
        float _2772;
        float _2774;
        float _2776;
        float _2778;
        float _2780;
        float _2782;
        if (((4294967295u << _2677) & _2581) == 0u)
        {
            _2772 = _2660;
            _2774 = _2662;
            _2776 = _2664;
            _2778 = _2666;
            _2780 = _2668;
            _2782 = _2670;
        }
        else
        {
            float _2797 = inversesqrt(dot(vec3(_1640, _1641, _1642), vec3(_1640, _1641, _1642)));
            float _2798 = _2797 * _1640;
            float _2799 = _2797 * _1641;
            float _2800 = _2797 * _1642;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2677 < ((_2675 >> 12u) & 15u))
            {
                float _2773;
                float _2775;
                float _2777;
                float _2779;
                float _2781;
                float _2783;
                float _2911 = _2660;
                float _2912 = _2662;
                float _2913 = _2664;
                float _2914 = _2666;
                float _2915 = _2668;
                float _2916 = _2670;
                uint _2917 = _2677;
                uint _2926;
                bool _2927;
                for (;;)
                {
                    _2926 = texelFetch(g_lightClassification, int((((_2575 << 5u) + (_2561 << 9u)) + (_2917 << 2u)) >> 2u)).x;
                    _2927 = _2926 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2927)
                    {
                        frontier_phi_74_pred = _2913;
                        frontier_phi_74_pred_1 = _2912;
                        frontier_phi_74_pred_2 = _2911;
                        frontier_phi_74_pred_3 = _2916;
                        frontier_phi_74_pred_4 = _2915;
                        frontier_phi_74_pred_5 = _2914;
                    }
                    else
                    {
                        float _3110;
                        float _3111;
                        float _3112;
                        float _3113;
                        float _3114;
                        float _3115;
                        float _3406;
                        float _3407;
                        float _3408;
                        float _3409;
                        float _3410;
                        float _3411;
                        float _3123 = _2911;
                        float _3124 = _2912;
                        float _3125 = _2913;
                        float _3126 = _2914;
                        float _3127 = _2915;
                        float _3128 = _2916;
                        uint _3129 = _2926;
                        uint _3130;
                        vec4 _3155;
                        float _3156;
                        vec4 _3171;
                        vec3 _3183;
                        vec4 _3199;
                        vec4 _3215;
                        float _3262;
                        bool _3263;
                        for (;;)
                        {
                            uint _3140 = ((_2917 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3129));
                            _3130 = (_3129 + 4294967295u) & _3129;
                            uint _3142 = _3140 * 40u;
                            _3155 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3142)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 3u)).x));
                            _3156 = _3155.w;
                            uint _3158 = (_3140 * 40u) + 4u;
                            _3171 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3158)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3158 + 3u)).x));
                            uint _3173 = (_3140 * 40u) + 8u;
                            _3183 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3173)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3173 + 2u)).x));
                            uint _3186 = (_3140 * 40u) + 16u;
                            _3199 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3186)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3186 + 3u)).x));
                            uint _3202 = (_3140 * 40u) + 20u;
                            _3215 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3202)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3202 + 3u)).x));
                            uint _3218 = (_3140 * 40u) + 24u;
                            vec4 _3231 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3218)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3218 + 3u)).x));
                            uint _3237 = (_3140 * 40u) + 28u;
                            vec4 _3250 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3237)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3237 + 3u)).x));
                            _3262 = fma(_1642, _3250.z, fma(_1641, _3250.y, _3250.x * _1640)) + _3250.w;
                            _3263 = !((fma(_1642, _3231.z, fma(_1641, _3231.y, _3231.x * _1640)) + _3231.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3263)
                            {
                                float _3290 = _3155.x - _1640;
                                float _3291 = _3155.y - _1641;
                                float _3292 = _3155.z - _1642;
                                float _3293 = dot(vec3(_3290, _3291, _3292), vec3(_3290, _3291, _3292));
                                float _3296 = inversesqrt(_3293);
                                float _3297 = _3296 * _3290;
                                float _3298 = _3296 * _3291;
                                float _3299 = _3296 * _3292;
                                float _3303 = 1.0 - (_3293 / (_3156 * _3156));
                                float _4414 = isnan(0.0) ? _3303 : (isnan(_3303) ? 0.0 : max(_3303, 0.0));
                                float _3304 = isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0));
                                float _3308 = sqrt(_3293) * _3171.w;
                                float _3310 = 1.39999997615814208984375 / (_3308 + 1.39999997615814208984375);
                                float _3311 = _3310 * _3310;
                                float _3314 = ((1.0 - _3311) * dot(vec3(_3297, _3298, _3299), vec3(_497, _500, _503))) + _3311;
                                float _3317 = _3308 * _3308;
                                float _3321 = (fma(_1642, _3199.z, fma(_1641, _3199.y, _3199.x * _1640)) + _3199.w) / _3262;
                                float _3322 = (fma(_1642, _3215.z, fma(_1641, _3215.y, _3215.x * _1640)) + _3215.w) / _3262;
                                float _3326 = 1.0 - dot(vec2(_3321, _3322), vec2(_3321, _3322));
                                float _4430 = isnan(0.0) ? _3326 : (isnan(_3326) ? 0.0 : max(_3326, 0.0));
                                float _3327 = isnan(1.0) ? _4430 : (isnan(_4430) ? 1.0 : min(_4430, 1.0));
                                float _3328 = _3327 * (((isnan(0.0) ? _3314 : (isnan(_3314) ? 0.0 : max(_3314, 0.0))) * _3304) / ((_3317 * 0.699999988079071044921875) + 1.0));
                                float _3340 = exp2(log2(1.0 / ((_3317 * 3.5) + 5.0)) * 0.25);
                                float _3341 = 1.0 - _573;
                                float _3348 = sqrt(1.0 - ((1.0 - (_3341 * _3341)) * (1.0 - (_3340 * _3340))));
                                float _3349 = _3348 * _3348;
                                float _3350 = _3349 * _3349;
                                float _3351 = _3297 - _2798;
                                float _3352 = _3298 - _2799;
                                float _3353 = _3299 - _2800;
                                float _3357 = inversesqrt(dot(vec3(_3351, _3352, _3353), vec3(_3351, _3352, _3353)));
                                float _3361 = dot(vec3(_497, _500, _503), vec3((-0.0) - _2798, (-0.0) - _2799, (-0.0) - _2800));
                                float _4441 = isnan(0.0) ? _3361 : (isnan(_3361) ? 0.0 : max(_3361, 0.0));
                                float _3364 = isnan(1.0) ? _4441 : (isnan(_4441) ? 1.0 : min(_4441, 1.0));
                                float _3365 = dot(vec3(_497, _500, _503), vec3(_3357 * _3351, _3357 * _3352, _3357 * _3353));
                                float _4452 = isnan(0.0) ? _3365 : (isnan(_3365) ? 0.0 : max(_3365, 0.0));
                                float _3368 = isnan(1.0) ? _4452 : (isnan(_4452) ? 1.0 : min(_4452, 1.0));
                                float _3372 = ((_3368 * _3368) * (_3350 + (-1.0))) + 1.0;
                                float _3373 = _3310 * _3349;
                                float _3374 = _3373 * _3373;
                                float _3380 = ((1.0 - _3374) * dot(vec3(_497, _500, _503), vec3(_3297, _3298, _3299))) + _3374;
                                float _4463 = isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0));
                                float _3381 = isnan(1.0) ? _4463 : (isnan(_4463) ? 1.0 : min(_4463, 1.0));
                                float _3382 = 1.0 - _3349;
                                float _3392 = (0.5 / (((_3381 * ((_3364 * _3382) + _3349)) + 9.9999999392252902907785028219223e-09) + (((_3381 * _3382) + _3349) * _3364))) * _3381;
                                float _4474 = isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0));
                                float _3402 = (_3327 * _3304) * (((_3350 * 3.1415927410125732421875) * (isnan(1.0) ? _4474 : (isnan(_4474) ? 1.0 : min(_4474, 1.0)))) / ((_3372 * _3372) * ((_3317 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3402 * _3183.z;
                                frontier_phi_80_pred_1 = _3402 * _3183.y;
                                frontier_phi_80_pred_2 = _3402 * _3183.x;
                                frontier_phi_80_pred_3 = _3328 * _3171.z;
                                frontier_phi_80_pred_4 = _3328 * _3171.y;
                                frontier_phi_80_pred_5 = _3328 * _3171.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3408 = frontier_phi_80_pred;
                            _3407 = frontier_phi_80_pred_1;
                            _3406 = frontier_phi_80_pred_2;
                            _3411 = frontier_phi_80_pred_3;
                            _3410 = frontier_phi_80_pred_4;
                            _3409 = frontier_phi_80_pred_5;
                            _3113 = _3409 + _3126;
                            _3114 = _3410 + _3127;
                            _3115 = _3411 + _3128;
                            _3110 = _3406 + _3123;
                            _3111 = _3407 + _3124;
                            _3112 = _3408 + _3125;
                            if (_3130 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3123 = _3110;
                                _3124 = _3111;
                                _3125 = _3112;
                                _3126 = _3113;
                                _3127 = _3114;
                                _3128 = _3115;
                                _3129 = _3130;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3112;
                        frontier_phi_74_pred_1 = _3111;
                        frontier_phi_74_pred_2 = _3110;
                        frontier_phi_74_pred_3 = _3115;
                        frontier_phi_74_pred_4 = _3114;
                        frontier_phi_74_pred_5 = _3113;
                    }
                    _2777 = frontier_phi_74_pred;
                    _2775 = frontier_phi_74_pred_1;
                    _2773 = frontier_phi_74_pred_2;
                    _2783 = frontier_phi_74_pred_3;
                    _2781 = frontier_phi_74_pred_4;
                    _2779 = frontier_phi_74_pred_5;
                    uint _2918 = _2917 + 1u;
                    if (_2918 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2911 = _2773;
                        _2912 = _2775;
                        _2913 = _2777;
                        _2914 = _2779;
                        _2915 = _2781;
                        _2916 = _2783;
                        _2917 = _2918;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2781;
                frontier_phi_62_63_ladder_1 = _2779;
                frontier_phi_62_63_ladder_2 = _2777;
                frontier_phi_62_63_ladder_3 = _2783;
                frontier_phi_62_63_ladder_4 = _2775;
                frontier_phi_62_63_ladder_5 = _2773;
            }
            else
            {
                frontier_phi_62_63_ladder = _2668;
                frontier_phi_62_63_ladder_1 = _2666;
                frontier_phi_62_63_ladder_2 = _2664;
                frontier_phi_62_63_ladder_3 = _2670;
                frontier_phi_62_63_ladder_4 = _2662;
                frontier_phi_62_63_ladder_5 = _2660;
            }
            _2772 = frontier_phi_62_63_ladder_5;
            _2774 = frontier_phi_62_63_ladder_4;
            _2776 = frontier_phi_62_63_ladder_2;
            _2778 = frontier_phi_62_63_ladder_1;
            _2780 = frontier_phi_62_63_ladder;
            _2782 = frontier_phi_62_63_ladder_3;
        }
        float _2787 = isnan(1.0) ? _557 : (isnan(_557) ? 1.0 : min(_557, 1.0));
        _2593 = (_2787 * _2778) + _2106;
        _2595 = (_2787 * _2780) + _2108;
        _2597 = (_2787 * _2782) + _2110;
        _2599 = ((_2772 * _542) * _2787) + _2444;
        _2601 = ((_2774 * _544) * _2787) + _2446;
        _2603 = ((_2776 * _545) * _2787) + _2448;
    }
    else
    {
        _2593 = _2106;
        _2595 = _2108;
        _2597 = _2110;
        _2599 = _2444;
        _2601 = _2446;
        _2603 = _2448;
    }
    float _4490 = isnan(0.0) ? _532 : (isnan(_532) ? 0.0 : max(_532, 0.0));
    float _4501 = isnan(0.0) ? _533 : (isnan(_533) ? 0.0 : max(_533, 0.0));
    float _4512 = isnan(0.0) ? _534 : (isnan(_534) ? 0.0 : max(_534, 0.0));
    uint _2623 = _516 + 6u;
    float _2631 = _475 / cbSceneParam._m0[86u].x;
    float _2632 = _476 / cbSceneParam._m0[86u].y;
    vec4 _2646 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2631, _2632, (log2((isnan(cbSceneParam._m0[77u].w) ? _408 : (isnan(_408) ? cbSceneParam._m0[77u].w : min(_408, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2648 = _2646.x;
    float _2649 = _2646.y;
    float _2650 = _2646.z;
    float _2651 = _2646.w;
    float _2722;
    float _2724;
    float _2726;
    float _2728;
    if (_408 > cbSceneParam._m0[78u].w)
    {
        float _2685 = isnan(_408) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _408 : min(cbSceneParam._m0[80u].w, _408));
        float _2686 = _2685 / _408;
        float _2697 = _2686 * _460;
        float _2698 = _461 * _2686;
        float _2699 = (-0.0) - _2698;
        float _2700 = _2686 * _462;
        float _2702 = (cbSceneParam._m0[77u].w * _2699) / _2685;
        float _2703 = _2702 + cbSceneParam._m0[79u].w;
        float _2704 = cbSceneParam._m0[79u].w - _2698;
        float _2710 = sqrt(((_2697 * _2697) + (_2698 * _2698)) + (_2700 * _2700));
        float _2713 = (1.0 - (cbSceneParam._m0[77u].w / _2685)) * _2710;
        float _2718 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2720 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2873;
        if (abs((_2699 - _2702) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2873 = ((((_2703 > 0.0) ? exp2(_2718 * _2703) : (2.0 - exp2(_2720 * _2703))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2713;
        }
        else
        {
            float _2833 = 1.0 / cbSceneParam._m0[80u].x;
            float _2834 = isnan(_2704) ? _2703 : (isnan(_2703) ? _2704 : max(_2703, _2704));
            float _2835 = isnan(_2704) ? _2703 : (isnan(_2703) ? _2704 : min(_2703, _2704));
            float _2844 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : min(_2834, 0.0));
            float _2845 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : min(_2835, 0.0));
            _2873 = ((abs(_2710 / _2699) * cbSceneParam._m0[80u].y) * ((((_2844 - _2845) * 2.0) - ((exp2(_2718 * (isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0)))) - exp2(_2718 * (isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0))))) * _2833)) - ((exp2(_2720 * _2844) - exp2(_2720 * _2845)) * _2833))) + (_2713 * cbSceneParam._m0[80u].z);
        }
        vec4 _2875 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2631, _2632, 1.0), 0.0);
        float _2884 = exp2((_2873 * (-1.44269502162933349609375)) * (1.0 - _2875.w));
        float _2885 = log2(_2884);
        float _2901 = log2(_2651);
        _2722 = (exp2(_2901 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2885 * cbSceneParam._m0[78u].x)) * _2875.x) / cbSceneParam._m0[78u].x)) + _2648;
        _2724 = (exp2(_2901 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2885 * cbSceneParam._m0[78u].y)) * _2875.y) / cbSceneParam._m0[78u].y)) + _2649;
        _2726 = (exp2(_2901 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2885 * cbSceneParam._m0[78u].z)) * _2875.z) / cbSceneParam._m0[78u].z)) + _2650;
        _2728 = _2884 * _2651;
    }
    else
    {
        _2722 = _2648;
        _2724 = _2649;
        _2726 = _2650;
        _2728 = _2651;
    }
    float _2740 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2741 = _2740 == 3.0;
    float _2742 = log2(_2728);
    float _2749 = exp2(_2742 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0))) * (_2593 + ((isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0))) * _557))) + ((_2599 + ((isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0))) * _1367)) * cbPerFrame._m0[3u].x));
    float _2750 = exp2(_2742 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0))) * (_2595 + ((isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0))) * _557))) + ((_2601 + ((isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0))) * _1367)) * cbPerFrame._m0[3u].x));
    float _2751 = exp2(_2742 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0))) * (_2597 + ((isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0))) * _557))) + ((_2603 + ((isnan(0.0) ? _1592 : (isnan(_1592) ? 0.0 : max(_1592, 0.0))) * _1367)) * cbPerFrame._m0[3u].x));
    float _2760 = (_2740 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2760 * (_2741 ? _2749 : (_2749 + (cbSceneParam._m0[72u].w * _2722)));
    SV_Target.y = _2760 * (_2741 ? _2750 : (_2750 + (cbSceneParam._m0[72u].w * _2724)));
    SV_Target.z = _2760 * (_2741 ? _2751 : (_2751 + (cbSceneParam._m0[72u].w * _2726)));
    SV_Target.w = cbInstanceData._m0[_2623].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2623].w;
}


