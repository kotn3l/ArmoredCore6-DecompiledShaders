#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _973;
float _3363;
float _3364;
float _3365;
float _3366;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _196 = _195 * _188;
    float _197 = _195 * _189;
    float _198 = _195 * _190;
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210 = _209 * TANGENT.x;
    float _211 = _209 * TANGENT.y;
    float _212 = _209 * TANGENT.z;
    float _217;
    float _218;
    float _219;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _217 = (-0.0) - _203;
        _218 = (-0.0) - _204;
        _219 = (-0.0) - _205;
    }
    else
    {
        _217 = _203;
        _218 = _204;
        _219 = _205;
    }
    vec4 _238 = texture(sampler2D(M_AMSN_Snow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _243 = _238.z;
    float _247 = (_238.x * 2.0) + (-1.0);
    float _249 = (_238.y * 2.0) + (-1.0);
    float _250 = dot(vec2(_247, _249), vec2(_247, _249));
    float _3375 = isnan(0.0) ? _250 : (isnan(_250) ? 0.0 : max(_250, 0.0));
    float _256 = sqrt(1.0 - (isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0))));
    float _259 = fma(_256, _217, fma(_249, _210, _247 * _196));
    float _262 = fma(_256, _218, fma(_249, _211, _247 * _197));
    float _265 = fma(_256, _219, fma(_249, _212, _247 * _198));
    float _274 = exp2(log2(inversesqrt(dot(vec3(_259, _262, _265), vec3(_259, _262, _265))) * _262) * cbMtdParam._m0[9u].x) * cbMtdParam._m0[9u].y;
    float _3386 = isnan(0.0) ? _274 : (isnan(_274) ? 0.0 : max(_274, 0.0));
    float _275 = isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0));
    vec4 _287 = texture(sampler2D(M_AMSN_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _303 = texture(sampler2D(M_AMSN_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _305 = _303.x;
    float _306 = _303.y;
    float _307 = _303.z;
    float _314 = ((_287.x - _305) * _275) + _305;
    float _315 = ((_287.y - _306) * _275) + _306;
    float _316 = ((_287.z - _307) * _275) + _307;
    vec4 _329 = texture(sampler2D(M_AMSN_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _331 = _329.x;
    float _333 = _331 - (_331 * _275);
    vec4 _345 = texture(sampler2D(M_AMSN_Snow_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _352 = (_345.x * 2.0) + (-1.0);
    float _353 = (_345.y * 2.0) + (-1.0);
    float _354 = dot(vec2(_352, _353), vec2(_352, _353));
    float _3397 = isnan(0.0) ? _354 : (isnan(_354) ? 0.0 : max(_354, 0.0));
    float _362 = ((_345.z - _243) * _275) + _243;
    float _369 = ((_352 - _247) * _275) + _247;
    float _370 = ((_353 - _249) * _275) + _249;
    float _371 = ((sqrt(1.0 - (isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0)))) - _256) * _275) + _256;
    float _374 = fma(_371, _217, fma(_370, _210, _369 * _196));
    float _377 = fma(_371, _218, fma(_370, _211, _369 * _197));
    float _380 = fma(_371, _219, fma(_370, _212, _369 * _198));
    float _384 = inversesqrt(dot(vec3(_374, _377, _380), vec3(_374, _377, _380)));
    float _385 = _384 * _374;
    float _386 = _384 * _377;
    float _387 = _384 * _380;
    float _3408 = isnan(0.0) ? _362 : (isnan(_362) ? 0.0 : max(_362, 0.0));
    float _388 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
    float _3419 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _3430 = isnan(0.0) ? _315 : (isnan(_315) ? 0.0 : max(_315, 0.0));
    float _3441 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _3452 = isnan(0.0) ? _333 : (isnan(_333) ? 0.0 : max(_333, 0.0));
    float _392 = isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0));
    float _408 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _450 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _460 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _450);
    float _461 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _450);
    float _462 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _450);
    float _466 = inversesqrt(dot(vec3(_460, _461, _462), vec3(_460, _461, _462)));
    float _467 = _460 * _466;
    float _468 = _461 * _466;
    float _469 = _462 * _466;
    vec4 _474 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _476 = _474.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _652 = sqrt(((_460 * _460) + (_461 * _461)) + (_462 * _462));
        float _658 = (cbMatDynParam._m0[5u].x * _652) + cbMatDynParam._m0[5u].y;
        float _3463 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
        float _659 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
        float _663 = (cbMatDynParam._m0[5u].z * _652) + cbMatDynParam._m0[5u].w;
        float _3474 = isnan(0.0) ? _663 : (isnan(_663) ? 0.0 : max(_663, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0))) - _659)) + _659) < ((_476 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _488 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _489 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _509 = fma(_387, cbSceneParam._m0[5u].z, fma(_386, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _385));
    float _512 = fma(_387, cbSceneParam._m0[6u].z, fma(_386, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _385));
    float _515 = fma(_387, cbSceneParam._m0[7u].z, fma(_386, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _385));
    uint _528 = uint(roundEven(NORMAL.w)) * 13u;
    uint _530 = _528 + 9u;
    uint _531 = _530 + uint(cbMatDynParam._m0[0u].w);
    float _537 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0)))) * cbInstanceData._m0[_531].x;
    float _538 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0)))) * cbInstanceData._m0[_531].y;
    float _539 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0)))) * cbInstanceData._m0[_531].z;
    float _3485 = isnan(0.0) ? _537 : (isnan(_537) ? 0.0 : max(_537, 0.0));
    float _540 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
    float _3496 = isnan(0.0) ? _538 : (isnan(_538) ? 0.0 : max(_538, 0.0));
    float _541 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
    float _3507 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _542 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
    float _543 = 1.0 - _392;
    float _544 = _540 * _543;
    float _545 = _541 * _543;
    float _546 = _542 * _543;
    float _551 = (_540 + (-0.039999999105930328369140625)) * _392;
    float _552 = (_541 + (-0.039999999105930328369140625)) * _392;
    float _553 = (_542 + (-0.039999999105930328369140625)) * _392;
    float _554 = _551 + 0.039999999105930328369140625;
    float _556 = _552 + 0.039999999105930328369140625;
    float _557 = _553 + 0.039999999105930328369140625;
    vec4 _566 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _488, cbSceneParam._m0[86u].y * _489));
    float _569 = _566.x * TEXCOORD.z;
    float _570 = dot(vec3(_385, _386, _387), vec3(_467, _468, _469));
    float _573 = _570 * 2.0;
    float _577 = (_573 * _385) - _467;
    float _578 = (_573 * _386) - _468;
    float _579 = (_573 * _387) - _469;
    float _583 = abs(dot(vec3(_467, _468, _469), vec3(_385, _386, _387)));
    float _3518 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _585 = sqrt(_388);
    float _598 = exp2((_585 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_585 * 3.0));
    float _604 = (1.0 - _598) * ((_585 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _605 = _598 * _585;
    float _633 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _637 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _641 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _972;
    float _974;
    float _975;
    float _976;
    float _977;
    float _978;
    float _979;
    float _980;
    float _981;
    float _982;
    float _983;
    float _984;
    float _985;
    float _986;
    float _987;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _697 = fma(_641, cbModelParam._m0[26u].z, fma(_637, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _633));
        float _701 = fma(_641, cbModelParam._m0[27u].z, fma(_637, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _633));
        float _705 = fma(_641, cbModelParam._m0[28u].z, fma(_637, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _633));
        float _730 = _633 + _385;
        float _731 = _637 + _386;
        float _732 = _641 + _387;
        float _742 = fma(_732, cbModelParam._m0[26u].z, fma(_731, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _730)) - _697;
        float _743 = fma(_732, cbModelParam._m0[27u].z, fma(_731, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _730)) - _701;
        float _744 = fma(_732, cbModelParam._m0[28u].z, fma(_731, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _730)) - _705;
        float _748 = inversesqrt(dot(vec3(_742, _743, _744), vec3(_742, _743, _744)));
        float _761 = ((_748 * _742) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_697 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _762 = ((_748 * _743) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_701 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _763 = ((_748 * _744) / cbModelParam._m0[34u].z) + ((((((_705 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _766 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_761, _762, _763), 0.0);
        vec4 _773 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_761, _762, _763), 0.0);
        vec4 _780 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_761, _762, _763), 0.0);
        vec4 _787 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_761, _762, _763), 0.0);
        float _800 = exp2((_766.w + (-0.5)) * 20.0) * 2.0;
        float _801 = _800 * (_766.x + (-0.5));
        float _802 = _800 * (_766.y + (-0.5));
        float _803 = _800 * (_766.z + (-0.5));
        float _810 = exp2((_773.w + (-0.5)) * 20.0) * 2.0;
        float _811 = _810 * (_773.x + (-0.5));
        float _812 = _810 * (_773.y + (-0.5));
        float _813 = _810 * (_773.z + (-0.5));
        float _820 = exp2((_780.w + (-0.5)) * 20.0) * 2.0;
        float _821 = _820 * (_780.x + (-0.5));
        float _822 = _820 * (_780.y + (-0.5));
        float _823 = _820 * (_780.z + (-0.5));
        float _830 = exp2((_787.w + (-0.5)) * 20.0) * 2.0;
        float _831 = _830 * (_787.x + (-0.5));
        float _832 = _830 * (_787.y + (-0.5));
        float _833 = _830 * (_787.z + (-0.5));
        float _834 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _835 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _836 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _837 = _801 * 0.5;
        float _838 = _811 * 0.5;
        float _839 = _821 * 0.5;
        float _840 = dot(vec3(_837, _838, _839), vec3(_837, _838, _839));
        float _845 = (_840 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_840);
        float _854 = (dot(vec3(_385, _386, _387), vec3(_845 * _837, _845 * _838, _845 * _839)) + 1.0) * 0.5;
        float _3544 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _864 = sqrt(((_838 * _838) + (_837 * _837)) + (_839 * _839)) / (_834 + 9.9999997473787516355514526367188e-06);
        float _3555 = isnan(0.0) ? _864 : (isnan(_864) ? 0.0 : max(_864, 0.0));
        float _865 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
        float _866 = _865 * 2.0;
        float _870 = (1.0 - _865) / (_865 + 1.0);
        float _3566 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        float _871 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _880 = ((((1.0 - _871) * (_866 + 2.0)) * exp2(log2(isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0))) * (_866 + 1.0))) + _871) * _834;
        float _881 = _802 * 0.5;
        float _882 = _812 * 0.5;
        float _883 = _822 * 0.5;
        float _884 = dot(vec3(_881, _882, _883), vec3(_881, _882, _883));
        float _889 = (_884 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_884);
        float _897 = (dot(vec3(_385, _386, _387), vec3(_889 * _881, _889 * _882, _889 * _883)) + 1.0) * 0.5;
        float _3577 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _906 = sqrt(((_882 * _882) + (_881 * _881)) + (_883 * _883)) / (_835 + 9.9999997473787516355514526367188e-06);
        float _3588 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _907 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
        float _908 = _907 * 2.0;
        float _912 = (1.0 - _907) / (_907 + 1.0);
        float _3599 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _913 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _922 = ((((1.0 - _913) * (_908 + 2.0)) * exp2(log2(isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))) * (_908 + 1.0))) + _913) * _835;
        float _923 = _803 * 0.5;
        float _924 = _813 * 0.5;
        float _925 = _823 * 0.5;
        float _926 = dot(vec3(_923, _924, _925), vec3(_923, _924, _925));
        float _931 = (_926 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_926);
        float _939 = (dot(vec3(_385, _386, _387), vec3(_931 * _923, _931 * _924, _931 * _925)) + 1.0) * 0.5;
        float _3610 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _948 = sqrt(((_924 * _924) + (_923 * _923)) + (_925 * _925)) / (_836 + 9.9999997473787516355514526367188e-06);
        float _3621 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _949 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
        float _950 = _949 * 2.0;
        float _954 = (1.0 - _949) / (_949 + 1.0);
        float _3632 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _955 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _964 = ((((1.0 - _955) * (_950 + 2.0)) * exp2(log2(isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0))) * (_950 + 1.0))) + _955) * _836;
        _972 = _803;
        _974 = _802;
        _975 = _801;
        _976 = _813;
        _977 = _812;
        _978 = _811;
        _979 = _823;
        _980 = _822;
        _981 = _821;
        _982 = _836;
        _983 = _835;
        _984 = _834;
        _985 = cbModelParam._m0[36u].z * (isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0)));
        _986 = cbModelParam._m0[36u].z * (isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0)));
        _987 = cbModelParam._m0[36u].z * (isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0)));
    }
    else
    {
        _972 = _973;
        _974 = _973;
        _975 = _973;
        _976 = _973;
        _977 = _973;
        _978 = _973;
        _979 = _973;
        _980 = _973;
        _981 = _973;
        _982 = _973;
        _983 = _973;
        _984 = _973;
        _985 = 0.0;
        _986 = 0.0;
        _987 = 0.0;
    }
    float _1285;
    float _1286;
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1016 = fma(_641, cbModelParam._m0[30u].z, fma(_637, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _633));
        float _1020 = fma(_641, cbModelParam._m0[31u].z, fma(_637, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _633));
        float _1024 = fma(_641, cbModelParam._m0[32u].z, fma(_637, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _633));
        float _1047 = _633 + _385;
        float _1048 = _637 + _386;
        float _1049 = _641 + _387;
        float _1059 = fma(_1049, cbModelParam._m0[30u].z, fma(_1048, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1047)) - _1016;
        float _1060 = fma(_1049, cbModelParam._m0[31u].z, fma(_1048, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1047)) - _1020;
        float _1061 = fma(_1049, cbModelParam._m0[32u].z, fma(_1048, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1047)) - _1024;
        float _1065 = inversesqrt(dot(vec3(_1059, _1060, _1061), vec3(_1059, _1060, _1061)));
        float _1078 = ((_1065 * _1059) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1016 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1079 = ((_1065 * _1060) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1020 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1080 = ((_1065 * _1061) / cbModelParam._m0[35u].z) + ((((((_1024 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1082 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        vec4 _1089 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        vec4 _1096 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        vec4 _1103 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1078, _1079, _1080), 0.0);
        float _1115 = exp2((_1082.w + (-0.5)) * 20.0) * 2.0;
        float _1116 = _1115 * (_1082.x + (-0.5));
        float _1117 = _1115 * (_1082.y + (-0.5));
        float _1118 = _1115 * (_1082.z + (-0.5));
        float _1125 = exp2((_1089.w + (-0.5)) * 20.0) * 2.0;
        float _1126 = _1125 * (_1089.x + (-0.5));
        float _1127 = _1125 * (_1089.y + (-0.5));
        float _1128 = _1125 * (_1089.z + (-0.5));
        float _1135 = exp2((_1096.w + (-0.5)) * 20.0) * 2.0;
        float _1136 = _1135 * (_1096.x + (-0.5));
        float _1137 = _1135 * (_1096.y + (-0.5));
        float _1138 = _1135 * (_1096.z + (-0.5));
        float _1145 = exp2((_1103.w + (-0.5)) * 20.0) * 2.0;
        float _1146 = _1145 * (_1103.x + (-0.5));
        float _1147 = _1145 * (_1103.y + (-0.5));
        float _1148 = _1145 * (_1103.z + (-0.5));
        float _1149 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1150 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
        float _1151 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1152 = _1116 * 0.5;
        float _1153 = _1126 * 0.5;
        float _1154 = _1136 * 0.5;
        float _1155 = dot(vec3(_1152, _1153, _1154), vec3(_1152, _1153, _1154));
        float _1160 = (_1155 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1155);
        float _1168 = (dot(vec3(_385, _386, _387), vec3(_1160 * _1152, _1160 * _1153, _1160 * _1154)) + 1.0) * 0.5;
        float _3673 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1177 = sqrt(((_1153 * _1153) + (_1152 * _1152)) + (_1154 * _1154)) / (_1149 + 9.9999997473787516355514526367188e-06);
        float _3684 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _1179 = _1178 * 2.0;
        float _1183 = (1.0 - _1178) / (_1178 + 1.0);
        float _3695 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1184 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _1193 = ((((1.0 - _1184) * (_1179 + 2.0)) * exp2(log2(isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0))) * (_1179 + 1.0))) + _1184) * _1149;
        float _1194 = _1117 * 0.5;
        float _1195 = _1127 * 0.5;
        float _1196 = _1137 * 0.5;
        float _1197 = dot(vec3(_1194, _1195, _1196), vec3(_1194, _1195, _1196));
        float _1202 = (_1197 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1197);
        float _1210 = (dot(vec3(_385, _386, _387), vec3(_1202 * _1194, _1202 * _1195, _1202 * _1196)) + 1.0) * 0.5;
        float _3706 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1219 = sqrt(((_1195 * _1195) + (_1194 * _1194)) + (_1196 * _1196)) / (_1150 + 9.9999997473787516355514526367188e-06);
        float _3717 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1220 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
        float _1221 = _1220 * 2.0;
        float _1225 = (1.0 - _1220) / (_1220 + 1.0);
        float _3728 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1226 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _1235 = ((((1.0 - _1226) * (_1221 + 2.0)) * exp2(log2(isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))) * (_1221 + 1.0))) + _1226) * _1150;
        float _1236 = _1118 * 0.5;
        float _1237 = _1128 * 0.5;
        float _1238 = _1138 * 0.5;
        float _1239 = dot(vec3(_1236, _1237, _1238), vec3(_1236, _1237, _1238));
        float _1244 = (_1239 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1239);
        float _1252 = (dot(vec3(_385, _386, _387), vec3(_1244 * _1236, _1244 * _1237, _1244 * _1238)) + 1.0) * 0.5;
        float _3739 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1261 = sqrt(((_1237 * _1237) + (_1236 * _1236)) + (_1238 * _1238)) / (_1151 + 9.9999997473787516355514526367188e-06);
        float _3750 = isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0));
        float _1262 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _1263 = _1262 * 2.0;
        float _1267 = (1.0 - _1262) / (_1262 + 1.0);
        float _3761 = isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0));
        float _1268 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _1277 = ((((1.0 - _1268) * (_1263 + 2.0)) * exp2(log2(isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))) * (_1263 + 1.0))) + _1268) * _1151;
        _1285 = _1118;
        _1286 = _1117;
        _1287 = _1116;
        _1288 = _1128;
        _1289 = _1127;
        _1290 = _1126;
        _1291 = _1138;
        _1292 = _1137;
        _1293 = _1136;
        _1294 = _1151;
        _1295 = _1150;
        _1296 = _1149;
        _1297 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0)));
        _1298 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0)));
        _1299 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0)));
    }
    else
    {
        _1285 = _973;
        _1286 = _973;
        _1287 = _973;
        _1288 = _973;
        _1289 = _973;
        _1290 = _973;
        _1291 = _973;
        _1292 = _973;
        _1293 = _973;
        _1294 = _973;
        _1295 = _973;
        _1296 = _973;
        _1297 = 0.0;
        _1298 = 0.0;
        _1299 = 0.0;
    }
    float _1309 = (cbModelParam._m0[1u].x * (_1297 - _985)) + _985;
    float _1310 = (cbModelParam._m0[1u].x * (_1298 - _986)) + _986;
    float _1311 = (cbModelParam._m0[1u].x * (_1299 - _987)) + _987;
    float _1332 = fma(_1311, cbSceneParam._m0[89u].z, fma(_1310, cbSceneParam._m0[89u].y, _1309 * cbSceneParam._m0[89u].x));
    float _1335 = fma(_1311, cbSceneParam._m0[90u].z, fma(_1310, cbSceneParam._m0[90u].y, _1309 * cbSceneParam._m0[90u].x));
    float _1338 = fma(_1311, cbSceneParam._m0[91u].z, fma(_1310, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1309));
    float _1353 = _577 * 0.5;
    float _1354 = _578 * 0.5;
    float _1355 = _579 * 0.5;
    float _1356 = dot(vec4(_1353, _1354, _1355, 1.0), vec4(_1287, _1290, _1293, _1296));
    float _1359 = dot(vec4(_1353, _1354, _1355, 1.0), vec4(_1286, _1289, _1292, _1295));
    float _1362 = dot(vec4(_1353, _1354, _1355, 1.0), vec4(_1285, _1288, _1291, _1294));
    float _1396;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1369 = dot(vec4(_1353, _1354, _1355, 1.0), vec4(_972, _976, _979, _982));
        float _1373 = dot(vec4(_1353, _1354, _1355, 1.0), vec4(_974, _977, _980, _983));
        float _1377 = dot(vec4(_1353, _1354, _1355, 1.0), vec4(_975, _978, _981, _984));
        float _1384 = dot(vec4(cbModelParam._m0[39u]), vec4(_1353, _1354, _1355, 1.0));
        _1396 = dot(vec3(isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)), isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0)), isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1384) ? 0.0 : (isnan(0.0) ? _1384 : max(0.0, _1384))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1396 = 1.0;
    }
    float _1407;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1398 = dot(vec4(cbModelParam._m0[40u]), vec4(_1353, _1354, _1355, 1.0));
        _1407 = dot(vec3(isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)), isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)), isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1398) ? 0.0 : (isnan(0.0) ? _1398 : max(0.0, _1398))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1407 = 1.0;
    }
    float _1411 = (_1407 * cbModelParam._m0[1u].x) + (_1396 * (1.0 - cbModelParam._m0[1u].x));
    float _1421 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _388);
    float _1422 = isnan(_1421) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1421 : min(cbModelParam._m0[25u].z, _1421));
    float _1504;
    float _1506;
    float _1508;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1471 = fma(_641, cbModelParam._m0[13u].z, fma(_637, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _633)) + cbModelParam._m0[13u].w;
        float _1475 = fma(_641, cbModelParam._m0[14u].z, fma(_637, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _633)) + cbModelParam._m0[14u].w;
        float _1479 = fma(_641, cbModelParam._m0[15u].z, fma(_637, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _633)) + cbModelParam._m0[15u].w;
        float _1482 = fma(_579, cbModelParam._m0[13u].z, fma(_578, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _577));
        float _1485 = fma(_579, cbModelParam._m0[14u].z, fma(_578, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _577));
        float _1488 = fma(_579, cbModelParam._m0[15u].z, fma(_578, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _577));
        float _1516;
        if (_1482 > 0.0)
        {
            _1516 = abs((1.0 - _1471) / _1482);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1482 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1471 + 1.0) / _1482);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1516 = frontier_phi_19_17_ladder;
        }
        float _1723;
        if (_1485 > 0.0)
        {
            _1723 = abs((1.0 - _1475) / _1485);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1485 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1475 + 1.0) / _1485);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1723 = frontier_phi_28_24_ladder;
        }
        float _1977;
        if (_1488 > 0.0)
        {
            _1977 = abs((1.0 - _1479) / _1488);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1488 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1479 + 1.0) / _1488);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1977 = frontier_phi_40_35_ladder;
        }
        float _1979 = isnan(_1723) ? _1516 : (isnan(_1516) ? _1723 : min(_1516, _1723));
        float _1980 = isnan(_1977) ? _1979 : (isnan(_1979) ? _1977 : min(_1979, _1977));
        float _1984 = (_1980 * _1482) + _1471;
        float _1985 = (_1980 * _1485) + _1475;
        float _1986 = (_1980 * _1488) + _1479;
        float _1987 = _1980 * 9.9999997473787516355514526367188e-05;
        float _1989 = (-1.0) - _1987;
        float _1991 = _1987 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1986 > _1991) || ((_1986 < _1989) || ((_1985 > _1991) || ((_1985 < _1989) || ((_1984 < _1989) || (_1984 > _1991))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2114 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1986, cbModelParam._m0[9u].z, fma(_1985, cbModelParam._m0[9u].y, _1984 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1986, cbModelParam._m0[10u].z, fma(_1985, cbModelParam._m0[10u].y, _1984 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1986, cbModelParam._m0[11u].z, fma(_1985, cbModelParam._m0[11u].y, _1984 * cbModelParam._m0[11u].x))), _1422);
            frontier_phi_18_40_ladder = _2114.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2114.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2114.x * cbModelParam._m0[1u].y;
        }
        _1504 = frontier_phi_18_40_ladder_2;
        _1506 = frontier_phi_18_40_ladder_1;
        _1508 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1492 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_577, _578, _579), _1422);
        _1504 = _1492.x * cbModelParam._m0[1u].y;
        _1506 = _1492.y * cbModelParam._m0[1u].y;
        _1508 = _1492.z * cbModelParam._m0[1u].y;
    }
    float _1512 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _388);
    float _1513 = isnan(_1512) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1512 : min(cbModelParam._m0[25u].w, _1512));
    float _1606;
    float _1608;
    float _1610;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1570 = fma(_641, cbModelParam._m0[21u].z, fma(_637, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _633)) + cbModelParam._m0[21u].w;
        float _1574 = fma(_641, cbModelParam._m0[22u].z, fma(_637, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _633)) + cbModelParam._m0[22u].w;
        float _1578 = fma(_641, cbModelParam._m0[23u].z, fma(_637, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _633)) + cbModelParam._m0[23u].w;
        float _1581 = fma(_579, cbModelParam._m0[21u].z, fma(_578, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _577));
        float _1584 = fma(_579, cbModelParam._m0[22u].z, fma(_578, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _577));
        float _1587 = fma(_579, cbModelParam._m0[23u].z, fma(_578, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _577));
        float _1728;
        if (_1581 > 0.0)
        {
            _1728 = abs((1.0 - _1570) / _1581);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1581 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1570 + 1.0) / _1581);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1728 = frontier_phi_30_26_ladder;
        }
        float _2004;
        if (_1584 > 0.0)
        {
            _2004 = abs((1.0 - _1574) / _1584);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1584 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1574 + 1.0) / _1584);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2004 = frontier_phi_42_37_ladder;
        }
        float _2217;
        if (_1587 > 0.0)
        {
            _2217 = abs((1.0 - _1578) / _1587);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1587 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1578 + 1.0) / _1587);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2217 = frontier_phi_51_48_ladder;
        }
        float _2219 = isnan(_2004) ? _1728 : (isnan(_1728) ? _2004 : min(_1728, _2004));
        float _2220 = isnan(_2217) ? _2219 : (isnan(_2219) ? _2217 : min(_2219, _2217));
        float _2224 = (_2220 * _1581) + _1570;
        float _2225 = (_2220 * _1584) + _1574;
        float _2226 = (_2220 * _1587) + _1578;
        float _2227 = _2220 * 9.9999997473787516355514526367188e-05;
        float _2228 = (-1.0) - _2227;
        float _2230 = _2227 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2226 > _2230) || ((_2226 < _2228) || ((_2225 > _2230) || ((_2225 < _2228) || ((_2224 < _2228) || (_2224 > _2230))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2424 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2226, cbModelParam._m0[17u].z, fma(_2225, cbModelParam._m0[17u].y, _2224 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2226, cbModelParam._m0[18u].z, fma(_2225, cbModelParam._m0[18u].y, _2224 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2226, cbModelParam._m0[19u].z, fma(_2225, cbModelParam._m0[19u].y, _2224 * cbModelParam._m0[19u].x))), _1513);
            frontier_phi_27_51_ladder = _2424.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2424.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2424.x * cbModelParam._m0[1u].z;
        }
        _1606 = frontier_phi_27_51_ladder_2;
        _1608 = frontier_phi_27_51_ladder_1;
        _1610 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1590 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_577, _578, _579), _1513);
        _1606 = _1590.x * cbModelParam._m0[1u].z;
        _1608 = _1590.y * cbModelParam._m0[1u].z;
        _1610 = _1590.z * cbModelParam._m0[1u].z;
    }
    float _1623 = (((_604 * _554) + _605) * _569) * ((cbModelParam._m0[1u].w * (_1606 - _1504)) + _1504);
    float _1625 = (((_604 * _556) + _605) * _569) * ((cbModelParam._m0[1u].w * (_1608 - _1506)) + _1506);
    float _1627 = (((_604 * _557) + _605) * _569) * ((cbModelParam._m0[1u].w * (_1610 - _1508)) + _1508);
    float _1630 = fma(_1627, cbSceneParam._m0[89u].z, fma(_1625, cbSceneParam._m0[89u].y, _1623 * cbSceneParam._m0[89u].x));
    float _1633 = fma(_1627, cbSceneParam._m0[90u].z, fma(_1625, cbSceneParam._m0[90u].y, _1623 * cbSceneParam._m0[90u].x));
    float _1636 = fma(_1627, cbSceneParam._m0[91u].z, fma(_1625, cbSceneParam._m0[91u].y, _1623 * cbSceneParam._m0[91u].x));
    uvec4 _1646 = floatBitsToUint(cbInstanceData._m0[_528 + 5u]);
    uint _1648 = _1646.x * 14u;
    uint _1649 = _1648 + 13u;
    float _1656 = _569 + (-1.0);
    float _1661 = (cbLight._m0[_1649].x * _1656) + 1.0;
    float _1662 = (cbLight._m0[_1649].y * _1656) + 1.0;
    float _1663 = (cbLight._m0[_1649].z * _1656) + 1.0;
    float _1664 = (cbLight._m0[_1649].w * _1656) + 1.0;
    uint _1665 = _1648 + 5u;
    float _1671 = isnan(1.0) ? _1662 : (isnan(_1662) ? 1.0 : min(_1662, 1.0));
    uint _1675 = _1648 + 4u;
    float _1681 = isnan(1.0) ? _1661 : (isnan(_1661) ? 1.0 : min(_1661, 1.0));
    uint _1685 = _1648 | 1u;
    float _1696 = dot(vec3(cbLight._m0[_1648].xyz), vec3(_385, _386, _387));
    float _1699 = dot(vec3(cbLight._m0[_1685].xyz), vec3(_385, _386, _387));
    float _3897 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
    float _3908 = isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0));
    float _1704 = (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * 0.3183098733425140380859375;
    float _1706 = (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * 0.3183098733425140380859375;
    float _1713 = ((cbLight._m0[_1665].x * _1671) * _1706) + ((cbLight._m0[_1675].x * _1681) * _1704);
    float _1714 = ((_1671 * cbLight._m0[_1665].y) * _1706) + ((_1681 * cbLight._m0[_1675].y) * _1704);
    float _1715 = ((_1671 * cbLight._m0[_1665].z) * _1706) + ((_1681 * cbLight._m0[_1675].z) * _1704);
    uvec4 _1720 = floatBitsToUint(cbLight._m0[_1648 + 12u]);
    bool _1722 = _1720.x == 0u;
    float _1733;
    float _1735;
    float _1737;
    if (_1722)
    {
        _1733 = _1713;
        _1735 = _1714;
        _1737 = _1715;
    }
    else
    {
        uint _1741 = _1648 + 6u;
        float _1757 = (dot(vec3(cbLight._m0[_1648 + 2u].xyz), vec3(_385, _386, _387)) * 0.5) + 0.5;
        float _1758 = _1757 * _1757;
        float _3919 = isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0));
        float _1759 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1760 = isnan(1.0) ? _1663 : (isnan(_1663) ? 1.0 : min(_1663, 1.0));
        _1733 = (((cbLight._m0[_1741].x * 0.3183098733425140380859375) * _1759) * _1760) + _1713;
        _1735 = (((cbLight._m0[_1741].y * 0.3183098733425140380859375) * _1759) * _1760) + _1714;
        _1737 = (((cbLight._m0[_1741].z * 0.3183098733425140380859375) * _1759) * _1760) + _1715;
    }
    bool _1740 = _1720.y == 0u;
    float _1778;
    float _1780;
    float _1782;
    if (_1740)
    {
        _1778 = _1733;
        _1780 = _1735;
        _1782 = _1737;
    }
    else
    {
        uint _1948 = _1648 + 7u;
        float _1964 = (dot(vec3(cbLight._m0[_1648 + 3u].xyz), vec3(_385, _386, _387)) * 0.5) + 0.5;
        float _1965 = _1964 * _1964;
        float _3935 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
        float _1966 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
        float _1967 = isnan(1.0) ? _1664 : (isnan(_1664) ? 1.0 : min(_1664, 1.0));
        _1778 = (((cbLight._m0[_1948].x * 0.3183098733425140380859375) * _1966) * _1967) + _1733;
        _1780 = (((cbLight._m0[_1948].y * 0.3183098733425140380859375) * _1966) * _1967) + _1735;
        _1782 = (((cbLight._m0[_1948].z * 0.3183098733425140380859375) * _1966) * _1967) + _1737;
    }
    uint _1785 = _1648 + 8u;
    float _1798 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1648].w)) * _388) * 0.949999988079071044921875);
    float _1799 = _1798 * _1798;
    float _1800 = cbLight._m0[_1648].x + _467;
    float _1801 = cbLight._m0[_1648].y + _468;
    float _1802 = cbLight._m0[_1648].z + _469;
    float _1806 = inversesqrt(dot(vec3(_1800, _1801, _1802), vec3(_1800, _1801, _1802)));
    float _1807 = _1806 * _1800;
    float _1808 = _1806 * _1801;
    float _1809 = _1806 * _1802;
    float _1810 = dot(vec3(_385, _386, _387), vec3(cbLight._m0[_1648].xyz));
    float _3951 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
    float _1813 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _3962 = isnan(0.0) ? _570 : (isnan(_570) ? 0.0 : max(_570, 0.0));
    float _1814 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    float _1815 = dot(vec3(_385, _386, _387), vec3(_1807, _1808, _1809));
    float _3973 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
    float _1818 = isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0));
    float _1819 = dot(vec3(cbLight._m0[_1648].xyz), vec3(_1807, _1808, _1809));
    float _3984 = isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0));
    float _1823 = _1799 * _1799;
    float _1827 = ((_1818 * _1818) * (_1823 + (-1.0))) + 1.0;
    float _1835 = exp2(log2(1.0 - (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0)))) * 5.0);
    float _1836 = 0.959999978542327880859375 - _551;
    float _1838 = 0.959999978542327880859375 - _552;
    float _1839 = 0.959999978542327880859375 - _553;
    float _1846 = 1.0 - _1799;
    float _1857 = (0.5 / (((_1814 * ((_1813 * _1846) + _1799)) + 9.9999999392252902907785028219223e-09) + (((_1814 * _1846) + _1799) * _1813))) * _1813;
    float _3995 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _1859 = (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0))) * (_1823 / ((_1827 * _1827) * 3.141590118408203125));
    uint _1870 = _1648 + 9u;
    float _1881 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1685].w)) * _388) * 0.949999988079071044921875);
    float _1882 = _1881 * _1881;
    float _1883 = cbLight._m0[_1685].x + _467;
    float _1884 = cbLight._m0[_1685].y + _468;
    float _1885 = cbLight._m0[_1685].z + _469;
    float _1889 = inversesqrt(dot(vec3(_1883, _1884, _1885), vec3(_1883, _1884, _1885)));
    float _1890 = _1889 * _1883;
    float _1891 = _1889 * _1884;
    float _1892 = _1889 * _1885;
    float _1893 = dot(vec3(_385, _386, _387), vec3(cbLight._m0[_1685].xyz));
    float _4006 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
    float _1896 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
    float _1897 = dot(vec3(_385, _386, _387), vec3(_1890, _1891, _1892));
    float _4017 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
    float _1900 = isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0));
    float _1901 = dot(vec3(cbLight._m0[_1685].xyz), vec3(_1890, _1891, _1892));
    float _4028 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1905 = _1882 * _1882;
    float _1909 = ((_1900 * _1900) * (_1905 + (-1.0))) + 1.0;
    float _1916 = exp2(log2(1.0 - (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0)))) * 5.0);
    float _1923 = 1.0 - _1882;
    float _1933 = (0.5 / (((_1814 * ((_1896 * _1923) + _1882)) + 9.9999999392252902907785028219223e-09) + (((_1814 * _1923) + _1882) * _1896))) * _1896;
    float _4039 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
    float _1935 = (isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0))) * (_1905 / ((_1909 * _1909) * 3.141590118408203125));
    float _1945 = (((((_1916 * _1836) + _554) * cbLight._m0[_1870].x) * _1935) * _1671) + (((((_1835 * _1836) + _554) * cbLight._m0[_1785].x) * _1859) * _1681);
    float _1946 = (((((_1916 * _1838) + _556) * cbLight._m0[_1870].y) * _1935) * _1671) + (((((_1835 * _1838) + _556) * cbLight._m0[_1785].y) * _1859) * _1681);
    float _1947 = (((((_1916 * _1839) + _557) * cbLight._m0[_1870].z) * _1935) * _1671) + (((((_1835 * _1839) + _557) * cbLight._m0[_1785].z) * _1859) * _1681);
    float _2009;
    float _2011;
    float _2013;
    if (_1722)
    {
        _2009 = _1945;
        _2011 = _1946;
        _2013 = _1947;
    }
    else
    {
        uint _2015 = _1648 + 2u;
        uint _2019 = _1648 + 10u;
        float _2033 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2015].w)) * _388) * 0.949999988079071044921875);
        float _2034 = _2033 * _2033;
        float _2035 = cbLight._m0[_2015].x + _467;
        float _2036 = cbLight._m0[_2015].y + _468;
        float _2037 = cbLight._m0[_2015].z + _469;
        float _2041 = inversesqrt(dot(vec3(_2035, _2036, _2037), vec3(_2035, _2036, _2037)));
        float _2042 = _2041 * _2035;
        float _2043 = _2041 * _2036;
        float _2044 = _2041 * _2037;
        float _2045 = dot(vec3(_385, _386, _387), vec3(cbLight._m0[_2015].xyz));
        float _4050 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
        float _2048 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
        float _2049 = dot(vec3(_385, _386, _387), vec3(_2042, _2043, _2044));
        float _4061 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
        float _2052 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
        float _2053 = dot(vec3(cbLight._m0[_2015].xyz), vec3(_2042, _2043, _2044));
        float _4072 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0));
        float _2057 = _2034 * _2034;
        float _2061 = ((_2052 * _2052) * (_2057 + (-1.0))) + 1.0;
        float _2068 = exp2(log2(1.0 - (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0)))) * 5.0);
        float _2075 = 1.0 - _2034;
        float _2085 = (0.5 / (((_1814 * ((_2048 * _2075) + _2034)) + 9.9999999392252902907785028219223e-09) + (((_1814 * _2075) + _2034) * _2048))) * _2048;
        float _4083 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
        float _2087 = (isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0))) * (_2057 / ((_2061 * _2061) * 3.141590118408203125));
        float _2088 = isnan(1.0) ? _1663 : (isnan(_1663) ? 1.0 : min(_1663, 1.0));
        _2009 = (((((_2068 * _1836) + _554) * cbLight._m0[_2019].x) * _2087) * _2088) + _1945;
        _2011 = (((((_2068 * _1838) + _556) * cbLight._m0[_2019].y) * _2087) * _2088) + _1946;
        _2013 = (((((_2068 * _1839) + _557) * cbLight._m0[_2019].z) * _2087) * _2088) + _1947;
    }
    float _2123;
    float _2125;
    float _2127;
    if (_1740)
    {
        _2123 = _2009;
        _2125 = _2011;
        _2127 = _2013;
    }
    else
    {
        uint _2134 = _1648 + 3u;
        uint _2138 = _1648 + 11u;
        float _2152 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2134].w)) * _388) * 0.949999988079071044921875);
        float _2153 = _2152 * _2152;
        float _2154 = cbLight._m0[_2134].x + _467;
        float _2155 = cbLight._m0[_2134].y + _468;
        float _2156 = cbLight._m0[_2134].z + _469;
        float _2160 = inversesqrt(dot(vec3(_2154, _2155, _2156), vec3(_2154, _2155, _2156)));
        float _2161 = _2160 * _2154;
        float _2162 = _2160 * _2155;
        float _2163 = _2160 * _2156;
        float _2164 = dot(vec3(_385, _386, _387), vec3(cbLight._m0[_2134].xyz));
        float _4099 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0));
        float _2167 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _2168 = dot(vec3(_385, _386, _387), vec3(_2161, _2162, _2163));
        float _4110 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
        float _2171 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _2172 = dot(vec3(cbLight._m0[_2134].xyz), vec3(_2161, _2162, _2163));
        float _4121 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
        float _2176 = _2153 * _2153;
        float _2180 = ((_2171 * _2171) * (_2176 + (-1.0))) + 1.0;
        float _2187 = exp2(log2(1.0 - (isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0)))) * 5.0);
        float _2194 = 1.0 - _2153;
        float _2204 = (0.5 / (((_1814 * ((_2167 * _2194) + _2153)) + 9.9999999392252902907785028219223e-09) + (((_1814 * _2194) + _2153) * _2167))) * _2167;
        float _4132 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
        float _2206 = (isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0))) * (_2176 / ((_2180 * _2180) * 3.141590118408203125));
        float _2207 = isnan(1.0) ? _1664 : (isnan(_1664) ? 1.0 : min(_1664, 1.0));
        _2123 = (((((_2187 * _1836) + _554) * cbLight._m0[_2138].x) * _2206) * _2207) + _2009;
        _2125 = (((((_2187 * _1838) + _556) * cbLight._m0[_2138].y) * _2206) * _2207) + _2011;
        _2127 = (((((_2187 * _1839) + _557) * cbLight._m0[_2138].z) * _2206) * _2207) + _2013;
    }
    float _2341;
    float _2343;
    float _2345;
    float _2347;
    float _2349;
    float _2351;
    if (_1646.y == 0u)
    {
        float _2282 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2283 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2282;
        float _2284 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2282;
        float _2285 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2282;
        uvec4 _2297 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2298 = _2297.x;
        uint _2309 = uint((float(_2297.y) * floor(float(uint(cbSceneParam._m0[85u].y * _489) / _2298))) + floor(float(uint(cbSceneParam._m0[85u].x * _488) / _2298)));
        float _2319 = (log2(_2285 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2320 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
        uint _2323 = uint(isnan(14.0) ? _2320 : (isnan(_2320) ? 14.0 : min(_2320, 14.0)));
        uvec4 _2328 = texelFetch(g_lightClusterGridBuffer, int(((_2323 << 2u) + (_2309 << 6u)) >> 2u));
        uint _2329 = _2328.x;
        uint _2330 = _2297.z;
        float _2429;
        float _2431;
        float _2433;
        float _2435;
        float _2437;
        float _2439;
        if (((((1u << ((_2330 >> 4u) & 15u)) + 4294967295u) & _2329) == 0u) || ((_2330 & 240u) == 0u))
        {
            _2429 = 0.0;
            _2431 = 0.0;
            _2433 = 0.0;
            _2435 = 0.0;
            _2437 = 0.0;
            _2439 = 0.0;
        }
        else
        {
            float _2430;
            float _2432;
            float _2434;
            float _2436;
            float _2438;
            float _2440;
            float _2581 = 0.0;
            float _2582 = 0.0;
            float _2583 = 0.0;
            float _2584 = 0.0;
            float _2585 = 0.0;
            float _2586 = 0.0;
            uint _2587 = 0u;
            uint _2596;
            bool _2597;
            for (;;)
            {
                _2596 = texelFetch(g_lightClassification, int((((_2323 << 5u) + (_2309 << 9u)) + (_2587 << 2u)) >> 2u)).x;
                _2597 = _2596 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2597)
                {
                    frontier_phi_68_pred = _2583;
                    frontier_phi_68_pred_1 = _2586;
                    frontier_phi_68_pred_2 = _2585;
                    frontier_phi_68_pred_3 = _2584;
                    frontier_phi_68_pred_4 = _2582;
                    frontier_phi_68_pred_5 = _2581;
                }
                else
                {
                    float _2726;
                    float _2727;
                    float _2728;
                    float _2729;
                    float _2730;
                    float _2731;
                    uint _2732;
                    _2726 = _2581;
                    _2727 = _2582;
                    _2728 = _2583;
                    _2729 = _2584;
                    _2730 = _2585;
                    _2731 = _2586;
                    _2732 = _2596;
                    float _2653;
                    float _2654;
                    float _2655;
                    float _2656;
                    float _2657;
                    float _2658;
                    for (;;)
                    {
                        uint _2736 = uint(findLSB(_2732)) + (_2587 << 5u);
                        uint _2733 = (_2732 + 4294967295u) & _2732;
                        uint _2738 = _2736 * 48u;
                        vec4 _2752 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2738)).x, texelFetch(g_PointLightRenderingBuffer, int(_2738 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2738 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2738 + 3u)).x));
                        uint _2758 = (_2736 * 48u) + 4u;
                        vec4 _2771 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2758)).x, texelFetch(g_PointLightRenderingBuffer, int(_2758 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2758 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2758 + 3u)).x));
                        uint _2777 = (_2736 * 48u) + 8u;
                        vec3 _2788 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2777)).x, texelFetch(g_PointLightRenderingBuffer, int(_2777 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2777 + 2u)).x));
                        float _2792 = _2752.x - _2283;
                        float _2793 = _2752.y - _2284;
                        float _2794 = _2752.z - _2285;
                        float _2795 = dot(vec3(_2792, _2793, _2794), vec3(_2792, _2793, _2794));
                        float _2798 = inversesqrt(_2795);
                        float _2799 = _2798 * _2792;
                        float _2800 = _2798 * _2793;
                        float _2801 = _2798 * _2794;
                        float _2802 = dot(vec3(_509, _512, _515), vec3(_2799, _2800, _2801));
                        float _2807 = 1.0 - (_2795 * _2752.w);
                        float _4158 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
                        float _2808 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
                        float _2809 = sqrt(_2795) * _2771.w;
                        float _2812 = 1.39999997615814208984375 / (_2809 + 1.39999997615814208984375);
                        float _2813 = _2812 * _2812;
                        float _2816 = ((1.0 - _2813) * _2802) + _2813;
                        float _2819 = _2809 * _2809;
                        float _2823 = ((isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0))) * _2808) / ((_2819 * 0.699999988079071044921875) + 1.0);
                        float _2827 = (-0.0) - _2283;
                        float _2828 = (-0.0) - _2284;
                        float _2829 = (-0.0) - _2285;
                        float _2833 = inversesqrt(dot(vec3(_2827, _2828, _2829), vec3(_2827, _2828, _2829)));
                        float _2834 = _2833 * _2827;
                        float _2835 = _2833 * _2828;
                        float _2836 = _2833 * _2829;
                        float _2844 = exp2(log2(1.0 / ((_2819 * 3.5) + 5.0)) * 0.25);
                        float _2845 = 1.0 - _585;
                        float _2852 = sqrt(1.0 - ((1.0 - (_2845 * _2845)) * (1.0 - (_2844 * _2844))));
                        float _2853 = _2852 * _2852;
                        float _2854 = _2853 * _2853;
                        float _2855 = _2834 + _2799;
                        float _2856 = _2835 + _2800;
                        float _2857 = _2836 + _2801;
                        float _2861 = inversesqrt(dot(vec3(_2855, _2856, _2857), vec3(_2855, _2856, _2857)));
                        float _2865 = dot(vec3(_509, _512, _515), vec3(_2834, _2835, _2836));
                        float _4174 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
                        float _2868 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
                        float _2869 = dot(vec3(_509, _512, _515), vec3(_2861 * _2855, _2861 * _2856, _2861 * _2857));
                        float _4185 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
                        float _2872 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
                        float _2876 = ((_2872 * _2872) * (_2854 + (-1.0))) + 1.0;
                        float _2877 = _2812 * _2853;
                        float _2878 = _2877 * _2877;
                        float _2881 = ((1.0 - _2878) * _2802) + _2878;
                        float _4196 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
                        float _2882 = isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0));
                        float _2883 = 1.0 - _2853;
                        float _2893 = (0.5 / (((_2882 * ((_2868 * _2883) + _2853)) + 9.9999999392252902907785028219223e-09) + (((_2882 * _2883) + _2853) * _2868))) * _2882;
                        float _4207 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0));
                        float _2904 = (((_2854 * 3.1415927410125732421875) * (isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0)))) / ((_2876 * _2876) * ((_2819 * 2.1991131305694580078125) + 3.141590118408203125))) * _2808;
                        _2656 = (_2823 * _2771.x) + _2729;
                        _2657 = (_2823 * _2771.y) + _2730;
                        _2658 = (_2823 * _2771.z) + _2731;
                        _2653 = (_2904 * _2788.x) + _2726;
                        _2654 = (_2904 * _2788.y) + _2727;
                        _2655 = (_2904 * _2788.z) + _2728;
                        if (_2733 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2726 = _2653;
                            _2727 = _2654;
                            _2728 = _2655;
                            _2729 = _2656;
                            _2730 = _2657;
                            _2731 = _2658;
                            _2732 = _2733;
                        }
                    }
                    frontier_phi_68_pred = _2655;
                    frontier_phi_68_pred_1 = _2658;
                    frontier_phi_68_pred_2 = _2657;
                    frontier_phi_68_pred_3 = _2656;
                    frontier_phi_68_pred_4 = _2654;
                    frontier_phi_68_pred_5 = _2653;
                }
                _2434 = frontier_phi_68_pred;
                _2440 = frontier_phi_68_pred_1;
                _2438 = frontier_phi_68_pred_2;
                _2436 = frontier_phi_68_pred_3;
                _2432 = frontier_phi_68_pred_4;
                _2430 = frontier_phi_68_pred_5;
                uint _2588 = _2587 + 1u;
                if (_2588 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2581 = _2430;
                    _2582 = _2432;
                    _2583 = _2434;
                    _2584 = _2436;
                    _2585 = _2438;
                    _2586 = _2440;
                    _2587 = _2588;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2429 = _2430;
            _2431 = _2432;
            _2433 = _2434;
            _2435 = _2436;
            _2437 = _2438;
            _2439 = _2440;
        }
        uvec4 _2443 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2444 = _2443.z;
        uint _2446 = (_2444 >> 8u) & 15u;
        float _2549;
        float _2551;
        float _2553;
        float _2555;
        float _2557;
        float _2559;
        if (((4294967295u << _2446) & _2329) == 0u)
        {
            _2549 = _2429;
            _2551 = _2431;
            _2553 = _2433;
            _2555 = _2435;
            _2557 = _2437;
            _2559 = _2439;
        }
        else
        {
            float _2574 = inversesqrt(dot(vec3(_2283, _2284, _2285), vec3(_2283, _2284, _2285)));
            float _2575 = _2574 * _2283;
            float _2576 = _2574 * _2284;
            float _2577 = _2574 * _2285;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2446 < ((_2444 >> 12u) & 15u))
            {
                float _2550;
                float _2552;
                float _2554;
                float _2556;
                float _2558;
                float _2560;
                float _2709 = _2429;
                float _2710 = _2431;
                float _2711 = _2433;
                float _2712 = _2435;
                float _2713 = _2437;
                float _2714 = _2439;
                uint _2715 = _2446;
                uint _2724;
                bool _2725;
                for (;;)
                {
                    _2724 = texelFetch(g_lightClassification, int((((_2323 << 5u) + (_2309 << 9u)) + (_2715 << 2u)) >> 2u)).x;
                    _2725 = _2724 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2725)
                    {
                        frontier_phi_79_pred = _2714;
                        frontier_phi_79_pred_1 = _2713;
                        frontier_phi_79_pred_2 = _2712;
                        frontier_phi_79_pred_3 = _2711;
                        frontier_phi_79_pred_4 = _2710;
                        frontier_phi_79_pred_5 = _2709;
                    }
                    else
                    {
                        float _2918;
                        float _2919;
                        float _2920;
                        float _2921;
                        float _2922;
                        float _2923;
                        float _3214;
                        float _3215;
                        float _3216;
                        float _3217;
                        float _3218;
                        float _3219;
                        float _2931 = _2709;
                        float _2932 = _2710;
                        float _2933 = _2711;
                        float _2934 = _2712;
                        float _2935 = _2713;
                        float _2936 = _2714;
                        uint _2937 = _2724;
                        uint _2938;
                        vec4 _2963;
                        float _2964;
                        vec4 _2979;
                        vec3 _2991;
                        vec4 _3007;
                        vec4 _3023;
                        float _3070;
                        bool _3071;
                        for (;;)
                        {
                            uint _2948 = ((_2715 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2937));
                            _2938 = (_2937 + 4294967295u) & _2937;
                            uint _2950 = _2948 * 40u;
                            _2963 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2950)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 3u)).x));
                            _2964 = _2963.w;
                            uint _2966 = (_2948 * 40u) + 4u;
                            _2979 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2966)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2966 + 3u)).x));
                            uint _2981 = (_2948 * 40u) + 8u;
                            _2991 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2981)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 2u)).x));
                            uint _2994 = (_2948 * 40u) + 16u;
                            _3007 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2994)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 3u)).x));
                            uint _3010 = (_2948 * 40u) + 20u;
                            _3023 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3010)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3010 + 3u)).x));
                            uint _3026 = (_2948 * 40u) + 24u;
                            vec4 _3039 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3026)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3026 + 3u)).x));
                            uint _3045 = (_2948 * 40u) + 28u;
                            vec4 _3058 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3045)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 3u)).x));
                            _3070 = fma(_2285, _3058.z, fma(_2284, _3058.y, _3058.x * _2283)) + _3058.w;
                            _3071 = !((fma(_2285, _3039.z, fma(_2284, _3039.y, _3039.x * _2283)) + _3039.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3071)
                            {
                                float _3098 = _2963.x - _2283;
                                float _3099 = _2963.y - _2284;
                                float _3100 = _2963.z - _2285;
                                float _3101 = dot(vec3(_3098, _3099, _3100), vec3(_3098, _3099, _3100));
                                float _3104 = inversesqrt(_3101);
                                float _3105 = _3104 * _3098;
                                float _3106 = _3104 * _3099;
                                float _3107 = _3104 * _3100;
                                float _3111 = 1.0 - (_3101 / (_2964 * _2964));
                                float _4218 = isnan(0.0) ? _3111 : (isnan(_3111) ? 0.0 : max(_3111, 0.0));
                                float _3112 = isnan(1.0) ? _4218 : (isnan(_4218) ? 1.0 : min(_4218, 1.0));
                                float _3116 = sqrt(_3101) * _2979.w;
                                float _3118 = 1.39999997615814208984375 / (_3116 + 1.39999997615814208984375);
                                float _3119 = _3118 * _3118;
                                float _3122 = ((1.0 - _3119) * dot(vec3(_3105, _3106, _3107), vec3(_509, _512, _515))) + _3119;
                                float _3125 = _3116 * _3116;
                                float _3129 = (fma(_2285, _3007.z, fma(_2284, _3007.y, _3007.x * _2283)) + _3007.w) / _3070;
                                float _3130 = (fma(_2285, _3023.z, fma(_2284, _3023.y, _3023.x * _2283)) + _3023.w) / _3070;
                                float _3134 = 1.0 - dot(vec2(_3129, _3130), vec2(_3129, _3130));
                                float _4234 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                                float _3135 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
                                float _3136 = _3135 * (((isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0))) * _3112) / ((_3125 * 0.699999988079071044921875) + 1.0));
                                float _3148 = exp2(log2(1.0 / ((_3125 * 3.5) + 5.0)) * 0.25);
                                float _3149 = 1.0 - _585;
                                float _3156 = sqrt(1.0 - ((1.0 - (_3149 * _3149)) * (1.0 - (_3148 * _3148))));
                                float _3157 = _3156 * _3156;
                                float _3158 = _3157 * _3157;
                                float _3159 = _3105 - _2575;
                                float _3160 = _3106 - _2576;
                                float _3161 = _3107 - _2577;
                                float _3165 = inversesqrt(dot(vec3(_3159, _3160, _3161), vec3(_3159, _3160, _3161)));
                                float _3169 = dot(vec3(_509, _512, _515), vec3((-0.0) - _2575, (-0.0) - _2576, (-0.0) - _2577));
                                float _4245 = isnan(0.0) ? _3169 : (isnan(_3169) ? 0.0 : max(_3169, 0.0));
                                float _3172 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
                                float _3173 = dot(vec3(_509, _512, _515), vec3(_3165 * _3159, _3165 * _3160, _3165 * _3161));
                                float _4256 = isnan(0.0) ? _3173 : (isnan(_3173) ? 0.0 : max(_3173, 0.0));
                                float _3176 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
                                float _3180 = ((_3176 * _3176) * (_3158 + (-1.0))) + 1.0;
                                float _3181 = _3118 * _3157;
                                float _3182 = _3181 * _3181;
                                float _3188 = ((1.0 - _3182) * dot(vec3(_509, _512, _515), vec3(_3105, _3106, _3107))) + _3182;
                                float _4267 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                                float _3189 = isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0));
                                float _3190 = 1.0 - _3157;
                                float _3200 = (0.5 / (((_3189 * ((_3172 * _3190) + _3157)) + 9.9999999392252902907785028219223e-09) + (((_3189 * _3190) + _3157) * _3172))) * _3189;
                                float _4278 = isnan(0.0) ? _3200 : (isnan(_3200) ? 0.0 : max(_3200, 0.0));
                                float _3210 = (_3135 * _3112) * (((_3158 * 3.1415927410125732421875) * (isnan(1.0) ? _4278 : (isnan(_4278) ? 1.0 : min(_4278, 1.0)))) / ((_3180 * _3180) * ((_3125 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3136 * _2979.z;
                                frontier_phi_85_pred_1 = _3136 * _2979.y;
                                frontier_phi_85_pred_2 = _3136 * _2979.x;
                                frontier_phi_85_pred_3 = _3210 * _2991.z;
                                frontier_phi_85_pred_4 = _3210 * _2991.y;
                                frontier_phi_85_pred_5 = _3210 * _2991.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3219 = frontier_phi_85_pred;
                            _3218 = frontier_phi_85_pred_1;
                            _3217 = frontier_phi_85_pred_2;
                            _3216 = frontier_phi_85_pred_3;
                            _3215 = frontier_phi_85_pred_4;
                            _3214 = frontier_phi_85_pred_5;
                            _2921 = _3217 + _2934;
                            _2922 = _3218 + _2935;
                            _2923 = _3219 + _2936;
                            _2918 = _3214 + _2931;
                            _2919 = _3215 + _2932;
                            _2920 = _3216 + _2933;
                            if (_2938 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2931 = _2918;
                                _2932 = _2919;
                                _2933 = _2920;
                                _2934 = _2921;
                                _2935 = _2922;
                                _2936 = _2923;
                                _2937 = _2938;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2923;
                        frontier_phi_79_pred_1 = _2922;
                        frontier_phi_79_pred_2 = _2921;
                        frontier_phi_79_pred_3 = _2920;
                        frontier_phi_79_pred_4 = _2919;
                        frontier_phi_79_pred_5 = _2918;
                    }
                    _2560 = frontier_phi_79_pred;
                    _2558 = frontier_phi_79_pred_1;
                    _2556 = frontier_phi_79_pred_2;
                    _2554 = frontier_phi_79_pred_3;
                    _2552 = frontier_phi_79_pred_4;
                    _2550 = frontier_phi_79_pred_5;
                    uint _2716 = _2715 + 1u;
                    if (_2716 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2709 = _2550;
                        _2710 = _2552;
                        _2711 = _2554;
                        _2712 = _2556;
                        _2713 = _2558;
                        _2714 = _2560;
                        _2715 = _2716;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2556;
                frontier_phi_60_61_ladder_1 = _2560;
                frontier_phi_60_61_ladder_2 = _2558;
                frontier_phi_60_61_ladder_3 = _2554;
                frontier_phi_60_61_ladder_4 = _2552;
                frontier_phi_60_61_ladder_5 = _2550;
            }
            else
            {
                frontier_phi_60_61_ladder = _2435;
                frontier_phi_60_61_ladder_1 = _2439;
                frontier_phi_60_61_ladder_2 = _2437;
                frontier_phi_60_61_ladder_3 = _2433;
                frontier_phi_60_61_ladder_4 = _2431;
                frontier_phi_60_61_ladder_5 = _2429;
            }
            _2549 = frontier_phi_60_61_ladder_5;
            _2551 = frontier_phi_60_61_ladder_4;
            _2553 = frontier_phi_60_61_ladder_3;
            _2555 = frontier_phi_60_61_ladder;
            _2557 = frontier_phi_60_61_ladder_2;
            _2559 = frontier_phi_60_61_ladder_1;
        }
        float _2564 = isnan(1.0) ? _569 : (isnan(_569) ? 1.0 : min(_569, 1.0));
        _2341 = (_2564 * _2555) + _1778;
        _2343 = (_2564 * _2557) + _1780;
        _2345 = (_2564 * _2559) + _1782;
        _2347 = ((_2549 * _554) * _2564) + _2123;
        _2349 = ((_2551 * _556) * _2564) + _2125;
        _2351 = ((_2553 * _557) * _2564) + _2127;
    }
    else
    {
        _2341 = _1778;
        _2343 = _1780;
        _2345 = _1782;
        _2347 = _2123;
        _2349 = _2125;
        _2351 = _2127;
    }
    float _4294 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _4305 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _4316 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _2368 = ((isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * (_2341 + ((isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0))) * _569))) + ((_2347 + ((isnan(0.0) ? _1630 : (isnan(_1630) ? 0.0 : max(_1630, 0.0))) * _1411)) * cbPerFrame._m0[3u].x);
    float _2369 = ((isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_2343 + ((isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0))) * _569))) + ((_2349 + ((isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0))) * _1411)) * cbPerFrame._m0[3u].x);
    float _2370 = ((isnan(1.0) ? _4316 : (isnan(_4316) ? 1.0 : min(_4316, 1.0))) * (_2345 + ((isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0))) * _569))) + ((_2351 + ((isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0))) * _1411)) * cbPerFrame._m0[3u].x);
    uint _2371 = _528 + 6u;
    float _2379 = _488 / cbSceneParam._m0[86u].x;
    float _2380 = _489 / cbSceneParam._m0[86u].y;
    vec4 _2394 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2379, _2380, (log2((isnan(cbSceneParam._m0[77u].w) ? _408 : (isnan(_408) ? cbSceneParam._m0[77u].w : min(_408, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2396 = _2394.x;
    float _2397 = _2394.y;
    float _2398 = _2394.z;
    float _2399 = _2394.w;
    float _2491;
    float _2493;
    float _2495;
    float _2497;
    if (_408 > cbSceneParam._m0[78u].w)
    {
        float _2454 = isnan(_408) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _408 : min(cbSceneParam._m0[80u].w, _408));
        float _2455 = _2454 / _408;
        float _2466 = _2455 * _460;
        float _2467 = _461 * _2455;
        float _2468 = (-0.0) - _2467;
        float _2469 = _2455 * _462;
        float _2471 = (cbSceneParam._m0[77u].w * _2468) / _2454;
        float _2472 = _2471 + cbSceneParam._m0[79u].w;
        float _2473 = cbSceneParam._m0[79u].w - _2467;
        float _2479 = sqrt(((_2466 * _2466) + (_2467 * _2467)) + (_2469 * _2469));
        float _2482 = (1.0 - (cbSceneParam._m0[77u].w / _2454)) * _2479;
        float _2487 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2489 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2666;
        if (abs((_2468 - _2471) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2666 = ((((_2472 > 0.0) ? exp2(_2487 * _2472) : (2.0 - exp2(_2489 * _2472))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2482;
        }
        else
        {
            float _2610 = 1.0 / cbSceneParam._m0[80u].x;
            float _2611 = isnan(_2473) ? _2472 : (isnan(_2472) ? _2473 : max(_2472, _2473));
            float _2612 = isnan(_2473) ? _2472 : (isnan(_2472) ? _2473 : min(_2472, _2473));
            float _2621 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : min(_2611, 0.0));
            float _2622 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : min(_2612, 0.0));
            _2666 = ((abs(_2479 / _2468) * cbSceneParam._m0[80u].y) * ((((_2621 - _2622) * 2.0) - ((exp2(_2487 * (isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0)))) - exp2(_2487 * (isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0))))) * _2610)) - ((exp2(_2489 * _2621) - exp2(_2489 * _2622)) * _2610))) + (_2482 * cbSceneParam._m0[80u].z);
        }
        vec4 _2668 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2379, _2380, 1.0), 0.0);
        float _2677 = exp2((_2666 * (-1.44269502162933349609375)) * (1.0 - _2668.w));
        float _2678 = log2(_2677);
        float _2694 = log2(_2399);
        _2491 = (exp2(_2694 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2678 * cbSceneParam._m0[78u].x)) * _2668.x) / cbSceneParam._m0[78u].x)) + _2396;
        _2493 = (exp2(_2694 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2678 * cbSceneParam._m0[78u].y)) * _2668.y) / cbSceneParam._m0[78u].y)) + _2397;
        _2495 = (exp2(_2694 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2678 * cbSceneParam._m0[78u].z)) * _2668.z) / cbSceneParam._m0[78u].z)) + _2398;
        _2497 = _2677 * _2399;
    }
    else
    {
        _2491 = _2396;
        _2493 = _2397;
        _2495 = _2398;
        _2497 = _2399;
    }
    bool _2704;
    vec4 _2507;
    vec4 _2529;
    float _2531;
    float _2535;
    float _2536;
    float _2537;
    float _2538;
    bool _2548;
    for (;;)
    {
        _2507 = cbMatDynParam._m0[0u];
        float _2509 = roundEven(_2507.y);
        bool _2510 = _2509 == 3.0;
        float _2511 = log2(_2497);
        float _2518 = exp2(_2511 * cbSceneParam._m0[78u].x) * _2368;
        float _2519 = exp2(_2511 * cbSceneParam._m0[78u].y) * _2369;
        float _2520 = exp2(_2511 * cbSceneParam._m0[78u].z) * _2370;
        float _2527 = _476 + (-0.5);
        _2529 = cbMtdParam._m0[1u];
        _2531 = _2529.y * _2527;
        float _2534 = (_2509 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2535 = _2534 * (_2510 ? _2518 : (_2518 + (cbSceneParam._m0[72u].w * _2491)));
        _2536 = _2534 * (_2510 ? _2519 : (_2519 + (cbSceneParam._m0[72u].w * _2493)));
        _2537 = _2534 * (_2510 ? _2520 : (_2520 + (cbSceneParam._m0[72u].w * _2495)));
        _2538 = _2527 * 0.999000012874603271484375;
        _2548 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2548)
        {
            if ((cbInstanceData._m0[_528 + 7u].x + _2538) < 0.5)
            {
                _2704 = true;
                break;
            }
        }
        uint _2645 = _530 + uint(_2507.w);
        if ((cbInstanceData._m0[_2645].w < 1.0) && ((cbInstanceData._m0[_2645].w + _2538) < 0.5))
        {
            _2704 = true;
            break;
        }
        if ((_2531 + 1.0) < _2529.x)
        {
            _2704 = true;
            break;
        }
        _2704 = false;
        break;
    }
    float _2909;
    if (_2704)
    {
        discard_state = true;
        _2909 = 0.0;
    }
    else
    {
        _2909 = cbInstanceData._m0[_2371].w;
    }
    SV_Target.x = _2535;
    SV_Target.y = _2536;
    SV_Target.z = _2537;
    SV_Target.w = _2909;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2371].w;
    discard_exit();
}


