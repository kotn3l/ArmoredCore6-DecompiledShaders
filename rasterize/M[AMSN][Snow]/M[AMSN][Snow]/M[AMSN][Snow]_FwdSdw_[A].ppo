#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _977;
float _3650;
float _3651;
float _3652;
float _3653;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _200 = _199 * _192;
    float _201 = _199 * _193;
    float _202 = _199 * _194;
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = _206 * NORMAL.x;
    float _208 = _206 * NORMAL.y;
    float _209 = _206 * NORMAL.z;
    float _213 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _214 = _213 * TANGENT.x;
    float _215 = _213 * TANGENT.y;
    float _216 = _213 * TANGENT.z;
    float _221;
    float _222;
    float _223;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _221 = (-0.0) - _207;
        _222 = (-0.0) - _208;
        _223 = (-0.0) - _209;
    }
    else
    {
        _221 = _207;
        _222 = _208;
        _223 = _209;
    }
    vec4 _242 = texture(sampler2D(M_AMSN_Snow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _247 = _242.z;
    float _251 = (_242.x * 2.0) + (-1.0);
    float _253 = (_242.y * 2.0) + (-1.0);
    float _254 = dot(vec2(_251, _253), vec2(_251, _253));
    float _3662 = isnan(0.0) ? _254 : (isnan(_254) ? 0.0 : max(_254, 0.0));
    float _260 = sqrt(1.0 - (isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))));
    float _263 = fma(_260, _221, fma(_253, _214, _251 * _200));
    float _266 = fma(_260, _222, fma(_253, _215, _251 * _201));
    float _269 = fma(_260, _223, fma(_253, _216, _251 * _202));
    float _278 = exp2(log2(inversesqrt(dot(vec3(_263, _266, _269), vec3(_263, _266, _269))) * _266) * cbMtdParam._m0[9u].x) * cbMtdParam._m0[9u].y;
    float _3673 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _279 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
    vec4 _291 = texture(sampler2D(M_AMSN_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _307 = texture(sampler2D(M_AMSN_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _309 = _307.x;
    float _310 = _307.y;
    float _311 = _307.z;
    float _318 = ((_291.x - _309) * _279) + _309;
    float _319 = ((_291.y - _310) * _279) + _310;
    float _320 = ((_291.z - _311) * _279) + _311;
    vec4 _333 = texture(sampler2D(M_AMSN_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _335 = _333.x;
    float _337 = _335 - (_335 * _279);
    vec4 _349 = texture(sampler2D(M_AMSN_Snow_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _356 = (_349.x * 2.0) + (-1.0);
    float _357 = (_349.y * 2.0) + (-1.0);
    float _358 = dot(vec2(_356, _357), vec2(_356, _357));
    float _3684 = isnan(0.0) ? _358 : (isnan(_358) ? 0.0 : max(_358, 0.0));
    float _366 = ((_349.z - _247) * _279) + _247;
    float _373 = ((_356 - _251) * _279) + _251;
    float _374 = ((_357 - _253) * _279) + _253;
    float _375 = ((sqrt(1.0 - (isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0)))) - _260) * _279) + _260;
    float _378 = fma(_375, _221, fma(_374, _214, _373 * _200));
    float _381 = fma(_375, _222, fma(_374, _215, _373 * _201));
    float _384 = fma(_375, _223, fma(_374, _216, _373 * _202));
    float _388 = inversesqrt(dot(vec3(_378, _381, _384), vec3(_378, _381, _384)));
    float _389 = _388 * _378;
    float _390 = _388 * _381;
    float _391 = _388 * _384;
    float _3695 = isnan(0.0) ? _366 : (isnan(_366) ? 0.0 : max(_366, 0.0));
    float _392 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
    float _3706 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _3717 = isnan(0.0) ? _319 : (isnan(_319) ? 0.0 : max(_319, 0.0));
    float _3728 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _3739 = isnan(0.0) ? _337 : (isnan(_337) ? 0.0 : max(_337, 0.0));
    float _396 = isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0));
    float _412 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _454 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _464 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _454);
    float _465 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _454);
    float _466 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _454);
    float _470 = inversesqrt(dot(vec3(_464, _465, _466), vec3(_464, _465, _466)));
    float _471 = _464 * _470;
    float _472 = _465 * _470;
    float _473 = _466 * _470;
    vec4 _478 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _480 = _478.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _656 = sqrt(((_464 * _464) + (_465 * _465)) + (_466 * _466));
        float _662 = (cbMatDynParam._m0[5u].x * _656) + cbMatDynParam._m0[5u].y;
        float _3750 = isnan(0.0) ? _662 : (isnan(_662) ? 0.0 : max(_662, 0.0));
        float _663 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _667 = (cbMatDynParam._m0[5u].z * _656) + cbMatDynParam._m0[5u].w;
        float _3761 = isnan(0.0) ? _667 : (isnan(_667) ? 0.0 : max(_667, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0))) - _663)) + _663) < ((_480 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _492 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _493 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _513 = fma(_391, cbSceneParam._m0[5u].z, fma(_390, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _389));
    float _516 = fma(_391, cbSceneParam._m0[6u].z, fma(_390, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _389));
    float _519 = fma(_391, cbSceneParam._m0[7u].z, fma(_390, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _389));
    uint _532 = uint(roundEven(NORMAL.w)) * 13u;
    uint _534 = _532 + 9u;
    uint _535 = _534 + uint(cbMatDynParam._m0[0u].w);
    float _541 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0)))) * cbInstanceData._m0[_535].x;
    float _542 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0)))) * cbInstanceData._m0[_535].y;
    float _543 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0)))) * cbInstanceData._m0[_535].z;
    float _3772 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _544 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
    float _3783 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _545 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _3794 = isnan(0.0) ? _543 : (isnan(_543) ? 0.0 : max(_543, 0.0));
    float _546 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    float _547 = 1.0 - _396;
    float _548 = _544 * _547;
    float _549 = _545 * _547;
    float _550 = _546 * _547;
    float _555 = (_544 + (-0.039999999105930328369140625)) * _396;
    float _556 = (_545 + (-0.039999999105930328369140625)) * _396;
    float _557 = (_546 + (-0.039999999105930328369140625)) * _396;
    float _558 = _555 + 0.039999999105930328369140625;
    float _560 = _556 + 0.039999999105930328369140625;
    float _561 = _557 + 0.039999999105930328369140625;
    vec4 _570 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _492, cbSceneParam._m0[86u].y * _493));
    float _573 = _570.x * TEXCOORD.z;
    float _574 = dot(vec3(_389, _390, _391), vec3(_471, _472, _473));
    float _577 = _574 * 2.0;
    float _581 = (_577 * _389) - _471;
    float _582 = (_577 * _390) - _472;
    float _583 = (_577 * _391) - _473;
    float _587 = abs(dot(vec3(_471, _472, _473), vec3(_389, _390, _391)));
    float _3805 = isnan(0.0) ? _587 : (isnan(_587) ? 0.0 : max(_587, 0.0));
    float _589 = sqrt(_392);
    float _602 = exp2((_589 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_589 * 3.0));
    float _608 = (1.0 - _602) * ((_589 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _609 = _602 * _589;
    float _637 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _641 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _645 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _976;
    float _978;
    float _979;
    float _980;
    float _981;
    float _982;
    float _983;
    float _984;
    float _985;
    float _986;
    float _987;
    float _988;
    float _989;
    float _990;
    float _991;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _701 = fma(_645, cbModelParam._m0[26u].z, fma(_641, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _637));
        float _705 = fma(_645, cbModelParam._m0[27u].z, fma(_641, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _637));
        float _709 = fma(_645, cbModelParam._m0[28u].z, fma(_641, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _637));
        float _734 = _637 + _389;
        float _735 = _641 + _390;
        float _736 = _645 + _391;
        float _746 = fma(_736, cbModelParam._m0[26u].z, fma(_735, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _734)) - _701;
        float _747 = fma(_736, cbModelParam._m0[27u].z, fma(_735, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _734)) - _705;
        float _748 = fma(_736, cbModelParam._m0[28u].z, fma(_735, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _734)) - _709;
        float _752 = inversesqrt(dot(vec3(_746, _747, _748), vec3(_746, _747, _748)));
        float _765 = ((_752 * _746) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_701 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _766 = ((_752 * _747) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_705 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _767 = ((_752 * _748) / cbModelParam._m0[34u].z) + ((((((_709 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _770 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_765, _766, _767), 0.0);
        vec4 _777 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_765, _766, _767), 0.0);
        vec4 _784 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_765, _766, _767), 0.0);
        vec4 _791 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_765, _766, _767), 0.0);
        float _804 = exp2((_770.w + (-0.5)) * 20.0) * 2.0;
        float _805 = _804 * (_770.x + (-0.5));
        float _806 = _804 * (_770.y + (-0.5));
        float _807 = _804 * (_770.z + (-0.5));
        float _814 = exp2((_777.w + (-0.5)) * 20.0) * 2.0;
        float _815 = _814 * (_777.x + (-0.5));
        float _816 = _814 * (_777.y + (-0.5));
        float _817 = _814 * (_777.z + (-0.5));
        float _824 = exp2((_784.w + (-0.5)) * 20.0) * 2.0;
        float _825 = _824 * (_784.x + (-0.5));
        float _826 = _824 * (_784.y + (-0.5));
        float _827 = _824 * (_784.z + (-0.5));
        float _834 = exp2((_791.w + (-0.5)) * 20.0) * 2.0;
        float _835 = _834 * (_791.x + (-0.5));
        float _836 = _834 * (_791.y + (-0.5));
        float _837 = _834 * (_791.z + (-0.5));
        float _838 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _839 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _840 = isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0));
        float _841 = _805 * 0.5;
        float _842 = _815 * 0.5;
        float _843 = _825 * 0.5;
        float _844 = dot(vec3(_841, _842, _843), vec3(_841, _842, _843));
        float _849 = (_844 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_844);
        float _858 = (dot(vec3(_389, _390, _391), vec3(_849 * _841, _849 * _842, _849 * _843)) + 1.0) * 0.5;
        float _3831 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _868 = sqrt(((_842 * _842) + (_841 * _841)) + (_843 * _843)) / (_838 + 9.9999997473787516355514526367188e-06);
        float _3842 = isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0));
        float _869 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _870 = _869 * 2.0;
        float _874 = (1.0 - _869) / (_869 + 1.0);
        float _3853 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        float _875 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _884 = ((((1.0 - _875) * (_870 + 2.0)) * exp2(log2(isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * (_870 + 1.0))) + _875) * _838;
        float _885 = _806 * 0.5;
        float _886 = _816 * 0.5;
        float _887 = _826 * 0.5;
        float _888 = dot(vec3(_885, _886, _887), vec3(_885, _886, _887));
        float _893 = (_888 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_888);
        float _901 = (dot(vec3(_389, _390, _391), vec3(_893 * _885, _893 * _886, _893 * _887)) + 1.0) * 0.5;
        float _3864 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _910 = sqrt(((_886 * _886) + (_885 * _885)) + (_887 * _887)) / (_839 + 9.9999997473787516355514526367188e-06);
        float _3875 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _911 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _912 = _911 * 2.0;
        float _916 = (1.0 - _911) / (_911 + 1.0);
        float _3886 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _917 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _926 = ((((1.0 - _917) * (_912 + 2.0)) * exp2(log2(isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * (_912 + 1.0))) + _917) * _839;
        float _927 = _807 * 0.5;
        float _928 = _817 * 0.5;
        float _929 = _827 * 0.5;
        float _930 = dot(vec3(_927, _928, _929), vec3(_927, _928, _929));
        float _935 = (_930 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_930);
        float _943 = (dot(vec3(_389, _390, _391), vec3(_935 * _927, _935 * _928, _935 * _929)) + 1.0) * 0.5;
        float _3897 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _952 = sqrt(((_928 * _928) + (_927 * _927)) + (_929 * _929)) / (_840 + 9.9999997473787516355514526367188e-06);
        float _3908 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _953 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _954 = _953 * 2.0;
        float _958 = (1.0 - _953) / (_953 + 1.0);
        float _3919 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _959 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _968 = ((((1.0 - _959) * (_954 + 2.0)) * exp2(log2(isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * (_954 + 1.0))) + _959) * _840;
        _976 = _807;
        _978 = _806;
        _979 = _805;
        _980 = _817;
        _981 = _816;
        _982 = _815;
        _983 = _827;
        _984 = _826;
        _985 = _825;
        _986 = _840;
        _987 = _839;
        _988 = _838;
        _989 = cbModelParam._m0[36u].z * (isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0)));
        _990 = cbModelParam._m0[36u].z * (isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0)));
        _991 = cbModelParam._m0[36u].z * (isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0)));
    }
    else
    {
        _976 = _977;
        _978 = _977;
        _979 = _977;
        _980 = _977;
        _981 = _977;
        _982 = _977;
        _983 = _977;
        _984 = _977;
        _985 = _977;
        _986 = _977;
        _987 = _977;
        _988 = _977;
        _989 = 0.0;
        _990 = 0.0;
        _991 = 0.0;
    }
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1020 = fma(_645, cbModelParam._m0[30u].z, fma(_641, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _637));
        float _1024 = fma(_645, cbModelParam._m0[31u].z, fma(_641, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _637));
        float _1028 = fma(_645, cbModelParam._m0[32u].z, fma(_641, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _637));
        float _1051 = _637 + _389;
        float _1052 = _641 + _390;
        float _1053 = _645 + _391;
        float _1063 = fma(_1053, cbModelParam._m0[30u].z, fma(_1052, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1051)) - _1020;
        float _1064 = fma(_1053, cbModelParam._m0[31u].z, fma(_1052, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1051)) - _1024;
        float _1065 = fma(_1053, cbModelParam._m0[32u].z, fma(_1052, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1051)) - _1028;
        float _1069 = inversesqrt(dot(vec3(_1063, _1064, _1065), vec3(_1063, _1064, _1065)));
        float _1082 = ((_1069 * _1063) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1020 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1083 = ((_1069 * _1064) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1024 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1084 = ((_1069 * _1065) / cbModelParam._m0[35u].z) + ((((((_1028 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1086 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        vec4 _1093 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        vec4 _1100 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        vec4 _1107 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1082, _1083, _1084), 0.0);
        float _1119 = exp2((_1086.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1086.x + (-0.5));
        float _1121 = _1119 * (_1086.y + (-0.5));
        float _1122 = _1119 * (_1086.z + (-0.5));
        float _1129 = exp2((_1093.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1093.x + (-0.5));
        float _1131 = _1129 * (_1093.y + (-0.5));
        float _1132 = _1129 * (_1093.z + (-0.5));
        float _1139 = exp2((_1100.w + (-0.5)) * 20.0) * 2.0;
        float _1140 = _1139 * (_1100.x + (-0.5));
        float _1141 = _1139 * (_1100.y + (-0.5));
        float _1142 = _1139 * (_1100.z + (-0.5));
        float _1149 = exp2((_1107.w + (-0.5)) * 20.0) * 2.0;
        float _1150 = _1149 * (_1107.x + (-0.5));
        float _1151 = _1149 * (_1107.y + (-0.5));
        float _1152 = _1149 * (_1107.z + (-0.5));
        float _1153 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1154 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1155 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1156 = _1120 * 0.5;
        float _1157 = _1130 * 0.5;
        float _1158 = _1140 * 0.5;
        float _1159 = dot(vec3(_1156, _1157, _1158), vec3(_1156, _1157, _1158));
        float _1164 = (_1159 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1159);
        float _1172 = (dot(vec3(_389, _390, _391), vec3(_1164 * _1156, _1164 * _1157, _1164 * _1158)) + 1.0) * 0.5;
        float _3960 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1181 = sqrt(((_1157 * _1157) + (_1156 * _1156)) + (_1158 * _1158)) / (_1153 + 9.9999997473787516355514526367188e-06);
        float _3971 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1183 = _1182 * 2.0;
        float _1187 = (1.0 - _1182) / (_1182 + 1.0);
        float _3982 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1197 = ((((1.0 - _1188) * (_1183 + 2.0)) * exp2(log2(isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * (_1183 + 1.0))) + _1188) * _1153;
        float _1198 = _1121 * 0.5;
        float _1199 = _1131 * 0.5;
        float _1200 = _1141 * 0.5;
        float _1201 = dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200));
        float _1206 = (_1201 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1201);
        float _1214 = (dot(vec3(_389, _390, _391), vec3(_1206 * _1198, _1206 * _1199, _1206 * _1200)) + 1.0) * 0.5;
        float _3993 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1223 = sqrt(((_1199 * _1199) + (_1198 * _1198)) + (_1200 * _1200)) / (_1154 + 9.9999997473787516355514526367188e-06);
        float _4004 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1225 = _1224 * 2.0;
        float _1229 = (1.0 - _1224) / (_1224 + 1.0);
        float _4015 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1239 = ((((1.0 - _1230) * (_1225 + 2.0)) * exp2(log2(isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * (_1225 + 1.0))) + _1230) * _1154;
        float _1240 = _1122 * 0.5;
        float _1241 = _1132 * 0.5;
        float _1242 = _1142 * 0.5;
        float _1243 = dot(vec3(_1240, _1241, _1242), vec3(_1240, _1241, _1242));
        float _1248 = (_1243 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1243);
        float _1256 = (dot(vec3(_389, _390, _391), vec3(_1248 * _1240, _1248 * _1241, _1248 * _1242)) + 1.0) * 0.5;
        float _4026 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1265 = sqrt(((_1241 * _1241) + (_1240 * _1240)) + (_1242 * _1242)) / (_1155 + 9.9999997473787516355514526367188e-06);
        float _4037 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1266 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1267 = _1266 * 2.0;
        float _1271 = (1.0 - _1266) / (_1266 + 1.0);
        float _4048 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1281 = ((((1.0 - _1272) * (_1267 + 2.0)) * exp2(log2(isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * (_1267 + 1.0))) + _1272) * _1155;
        _1289 = _1122;
        _1290 = _1121;
        _1291 = _1120;
        _1292 = _1132;
        _1293 = _1131;
        _1294 = _1130;
        _1295 = _1142;
        _1296 = _1141;
        _1297 = _1140;
        _1298 = _1155;
        _1299 = _1154;
        _1300 = _1153;
        _1301 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)));
        _1302 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0)));
        _1303 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0)));
    }
    else
    {
        _1289 = _977;
        _1290 = _977;
        _1291 = _977;
        _1292 = _977;
        _1293 = _977;
        _1294 = _977;
        _1295 = _977;
        _1296 = _977;
        _1297 = _977;
        _1298 = _977;
        _1299 = _977;
        _1300 = _977;
        _1301 = 0.0;
        _1302 = 0.0;
        _1303 = 0.0;
    }
    float _1313 = (cbModelParam._m0[1u].x * (_1301 - _989)) + _989;
    float _1314 = (cbModelParam._m0[1u].x * (_1302 - _990)) + _990;
    float _1315 = (cbModelParam._m0[1u].x * (_1303 - _991)) + _991;
    float _1336 = fma(_1315, cbSceneParam._m0[89u].z, fma(_1314, cbSceneParam._m0[89u].y, _1313 * cbSceneParam._m0[89u].x));
    float _1339 = fma(_1315, cbSceneParam._m0[90u].z, fma(_1314, cbSceneParam._m0[90u].y, _1313 * cbSceneParam._m0[90u].x));
    float _1342 = fma(_1315, cbSceneParam._m0[91u].z, fma(_1314, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1313));
    float _1357 = _581 * 0.5;
    float _1358 = _582 * 0.5;
    float _1359 = _583 * 0.5;
    float _1360 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_1291, _1294, _1297, _1300));
    float _1363 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_1290, _1293, _1296, _1299));
    float _1366 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_1289, _1292, _1295, _1298));
    float _1400;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1373 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_976, _980, _983, _986));
        float _1377 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_978, _981, _984, _987));
        float _1381 = dot(vec4(_1357, _1358, _1359, 1.0), vec4(_979, _982, _985, _988));
        float _1388 = dot(vec4(cbModelParam._m0[39u]), vec4(_1357, _1358, _1359, 1.0));
        _1400 = dot(vec3(isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)), isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)), isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1388) ? 0.0 : (isnan(0.0) ? _1388 : max(0.0, _1388))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1400 = 1.0;
    }
    float _1411;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1402 = dot(vec4(cbModelParam._m0[40u]), vec4(_1357, _1358, _1359, 1.0));
        _1411 = dot(vec3(isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)), isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0)), isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1402) ? 0.0 : (isnan(0.0) ? _1402 : max(0.0, _1402))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1411 = 1.0;
    }
    float _1415 = (_1411 * cbModelParam._m0[1u].x) + (_1400 * (1.0 - cbModelParam._m0[1u].x));
    float _1425 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _392);
    float _1426 = isnan(_1425) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1425 : min(cbModelParam._m0[25u].z, _1425));
    float _1508;
    float _1510;
    float _1512;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1475 = fma(_645, cbModelParam._m0[13u].z, fma(_641, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _637)) + cbModelParam._m0[13u].w;
        float _1479 = fma(_645, cbModelParam._m0[14u].z, fma(_641, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _637)) + cbModelParam._m0[14u].w;
        float _1483 = fma(_645, cbModelParam._m0[15u].z, fma(_641, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _637)) + cbModelParam._m0[15u].w;
        float _1486 = fma(_583, cbModelParam._m0[13u].z, fma(_582, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _581));
        float _1489 = fma(_583, cbModelParam._m0[14u].z, fma(_582, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _581));
        float _1492 = fma(_583, cbModelParam._m0[15u].z, fma(_582, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _581));
        float _1520;
        if (_1486 > 0.0)
        {
            _1520 = abs((1.0 - _1475) / _1486);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1486 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1475 + 1.0) / _1486);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1520 = frontier_phi_19_17_ladder;
        }
        float _1696;
        if (_1489 > 0.0)
        {
            _1696 = abs((1.0 - _1479) / _1489);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1489 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1479 + 1.0) / _1489);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1696 = frontier_phi_28_24_ladder;
        }
        float _1991;
        if (_1492 > 0.0)
        {
            _1991 = abs((1.0 - _1483) / _1492);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1492 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1483 + 1.0) / _1492);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1991 = frontier_phi_40_35_ladder;
        }
        float _1993 = isnan(_1696) ? _1520 : (isnan(_1520) ? _1696 : min(_1520, _1696));
        float _1994 = isnan(_1991) ? _1993 : (isnan(_1993) ? _1991 : min(_1993, _1991));
        float _1998 = (_1994 * _1486) + _1475;
        float _1999 = (_1994 * _1489) + _1479;
        float _2000 = (_1994 * _1492) + _1483;
        float _2001 = _1994 * 9.9999997473787516355514526367188e-05;
        float _2003 = (-1.0) - _2001;
        float _2005 = _2001 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2000 > _2005) || ((_2000 < _2003) || ((_1999 > _2005) || ((_1999 < _2003) || ((_1998 < _2003) || (_1998 > _2005))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2145 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2000, cbModelParam._m0[9u].z, fma(_1999, cbModelParam._m0[9u].y, _1998 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2000, cbModelParam._m0[10u].z, fma(_1999, cbModelParam._m0[10u].y, _1998 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2000, cbModelParam._m0[11u].z, fma(_1999, cbModelParam._m0[11u].y, _1998 * cbModelParam._m0[11u].x))), _1426);
            frontier_phi_18_40_ladder = _2145.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2145.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2145.x * cbModelParam._m0[1u].y;
        }
        _1508 = frontier_phi_18_40_ladder_2;
        _1510 = frontier_phi_18_40_ladder_1;
        _1512 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1496 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_581, _582, _583), _1426);
        _1508 = _1496.x * cbModelParam._m0[1u].y;
        _1510 = _1496.y * cbModelParam._m0[1u].y;
        _1512 = _1496.z * cbModelParam._m0[1u].y;
    }
    float _1516 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _392);
    float _1517 = isnan(_1516) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1516 : min(cbModelParam._m0[25u].w, _1516));
    float _1610;
    float _1612;
    float _1614;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1574 = fma(_645, cbModelParam._m0[21u].z, fma(_641, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _637)) + cbModelParam._m0[21u].w;
        float _1578 = fma(_645, cbModelParam._m0[22u].z, fma(_641, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _637)) + cbModelParam._m0[22u].w;
        float _1582 = fma(_645, cbModelParam._m0[23u].z, fma(_641, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _637)) + cbModelParam._m0[23u].w;
        float _1585 = fma(_583, cbModelParam._m0[21u].z, fma(_582, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _581));
        float _1588 = fma(_583, cbModelParam._m0[22u].z, fma(_582, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _581));
        float _1591 = fma(_583, cbModelParam._m0[23u].z, fma(_582, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _581));
        float _1701;
        if (_1585 > 0.0)
        {
            _1701 = abs((1.0 - _1574) / _1585);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1585 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1574 + 1.0) / _1585);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1701 = frontier_phi_30_26_ladder;
        }
        float _2018;
        if (_1588 > 0.0)
        {
            _2018 = abs((1.0 - _1578) / _1588);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1588 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1578 + 1.0) / _1588);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2018 = frontier_phi_42_37_ladder;
        }
        float _2356;
        if (_1591 > 0.0)
        {
            _2356 = abs((1.0 - _1582) / _1591);
        }
        else
        {
            float frontier_phi_52_49_ladder;
            if (_1591 < 0.0)
            {
                frontier_phi_52_49_ladder = abs((_1582 + 1.0) / _1591);
            }
            else
            {
                frontier_phi_52_49_ladder = 5000.0;
            }
            _2356 = frontier_phi_52_49_ladder;
        }
        float _2358 = isnan(_2018) ? _1701 : (isnan(_1701) ? _2018 : min(_1701, _2018));
        float _2359 = isnan(_2356) ? _2358 : (isnan(_2358) ? _2356 : min(_2358, _2356));
        float _2363 = (_2359 * _1585) + _1574;
        float _2364 = (_2359 * _1588) + _1578;
        float _2365 = (_2359 * _1591) + _1582;
        float _2366 = _2359 * 9.9999997473787516355514526367188e-05;
        float _2367 = (-1.0) - _2366;
        float _2369 = _2366 + 1.0;
        float frontier_phi_27_52_ladder;
        float frontier_phi_27_52_ladder_1;
        float frontier_phi_27_52_ladder_2;
        if ((_2365 > _2369) || ((_2365 < _2367) || ((_2364 > _2369) || ((_2364 < _2367) || ((_2363 < _2367) || (_2363 > _2369))))))
        {
            frontier_phi_27_52_ladder = 0.0;
            frontier_phi_27_52_ladder_1 = 0.0;
            frontier_phi_27_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2487 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2365, cbModelParam._m0[17u].z, fma(_2364, cbModelParam._m0[17u].y, _2363 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2365, cbModelParam._m0[18u].z, fma(_2364, cbModelParam._m0[18u].y, _2363 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2365, cbModelParam._m0[19u].z, fma(_2364, cbModelParam._m0[19u].y, _2363 * cbModelParam._m0[19u].x))), _1517);
            frontier_phi_27_52_ladder = _2487.z * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_1 = _2487.y * cbModelParam._m0[1u].z;
            frontier_phi_27_52_ladder_2 = _2487.x * cbModelParam._m0[1u].z;
        }
        _1610 = frontier_phi_27_52_ladder_2;
        _1612 = frontier_phi_27_52_ladder_1;
        _1614 = frontier_phi_27_52_ladder;
    }
    else
    {
        vec4 _1594 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_581, _582, _583), _1517);
        _1610 = _1594.x * cbModelParam._m0[1u].z;
        _1612 = _1594.y * cbModelParam._m0[1u].z;
        _1614 = _1594.z * cbModelParam._m0[1u].z;
    }
    float _1627 = (((_608 * _558) + _609) * _573) * ((cbModelParam._m0[1u].w * (_1610 - _1508)) + _1508);
    float _1629 = (((_608 * _560) + _609) * _573) * ((cbModelParam._m0[1u].w * (_1612 - _1510)) + _1510);
    float _1631 = (((_608 * _561) + _609) * _573) * ((cbModelParam._m0[1u].w * (_1614 - _1512)) + _1512);
    float _1634 = fma(_1631, cbSceneParam._m0[89u].z, fma(_1629, cbSceneParam._m0[89u].y, _1627 * cbSceneParam._m0[89u].x));
    float _1637 = fma(_1631, cbSceneParam._m0[90u].z, fma(_1629, cbSceneParam._m0[90u].y, _1627 * cbSceneParam._m0[90u].x));
    float _1640 = fma(_1631, cbSceneParam._m0[91u].z, fma(_1629, cbSceneParam._m0[91u].y, _1627 * cbSceneParam._m0[91u].x));
    float _1675 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1679 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1683 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1687 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1688 = _1675 / _1687;
    float _1689 = _1679 / _1687;
    float _1690 = _1683 / _1687;
    float _1837;
    float _1838;
    float _1839;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1717 = ((uint(_1690 > cbSceneParam._m0[59u].y) + uint(_1690 > cbSceneParam._m0[59u].x)) + uint(_1690 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1718 = _1717 + 43u;
        uint _1726 = _1717 + 44u;
        uint _1734 = _1717 + 45u;
        uint _1742 = _1717 + 46u;
        float _1753 = fma(_1687, cbSceneParam._m0[_1718].w, fma(_1683, cbSceneParam._m0[_1718].z, fma(_1679, cbSceneParam._m0[_1718].y, _1675 * cbSceneParam._m0[_1718].x)));
        float _1757 = fma(_1687, cbSceneParam._m0[_1726].w, fma(_1683, cbSceneParam._m0[_1726].z, fma(_1679, cbSceneParam._m0[_1726].y, _1675 * cbSceneParam._m0[_1726].x)));
        float _1765 = fma(_1687, cbSceneParam._m0[_1742].w, fma(_1683, cbSceneParam._m0[_1742].z, fma(_1679, cbSceneParam._m0[_1742].y, _1675 * cbSceneParam._m0[_1742].x)));
        float _1770 = cbSceneParam._m0[33u].z * _1765;
        float _1772 = cbSceneParam._m0[33u].w * _1765;
        float _1775 = fma(_1687, cbSceneParam._m0[_1734].w, fma(_1683, cbSceneParam._m0[_1734].z, fma(_1679, cbSceneParam._m0[_1734].y, _1675 * cbSceneParam._m0[_1734].x))) / _1765;
        float _1823 = (cbSceneParam._m0[33u].x - sqrt(((_1689 * _1689) + (_1688 * _1688)) + (_1690 * _1690))) * cbSceneParam._m0[33u].y;
        float _4174 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
        float _1830 = (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1770 + _1753) / _1765, (_1772 + _1757) / _1765), _1775), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1772 + _1753) / _1765, (_1757 - _1770) / _1765), _1775), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1753 - _1770) / _1765, (_1757 - _1772) / _1765), _1775), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1753 - _1772) / _1765, (_1770 + _1757) / _1765), _1775), 0.0)).x), vec4(0.25)));
        _1837 = 1.0 - (_1830 * cbSceneParam._m0[34u].x);
        _1838 = 1.0 - (_1830 * cbSceneParam._m0[34u].y);
        _1839 = 1.0 - (_1830 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1837 = 1.0;
        _1838 = 1.0;
        _1839 = 1.0;
    }
    float _1903;
    float _1905;
    float _1907;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1891 = fma(_1687, cbSceneParam._m0[63u].w, fma(_1683, cbSceneParam._m0[63u].z, fma(_1679, cbSceneParam._m0[63u].y, _1675 * cbSceneParam._m0[63u].x)));
        float _1892 = fma(_1687, cbSceneParam._m0[60u].w, fma(_1683, cbSceneParam._m0[60u].z, fma(_1679, cbSceneParam._m0[60u].y, _1675 * cbSceneParam._m0[60u].x))) / _1891;
        float _1893 = fma(_1687, cbSceneParam._m0[61u].w, fma(_1683, cbSceneParam._m0[61u].z, fma(_1679, cbSceneParam._m0[61u].y, _1675 * cbSceneParam._m0[61u].x))) / _1891;
        float frontier_phi_39_38_ladder;
        float frontier_phi_39_38_ladder_1;
        float frontier_phi_39_38_ladder_2;
        if ((((_1892 >= cbSceneParam._m0[64u].x) && (_1893 >= cbSceneParam._m0[64u].y)) && (_1892 <= cbSceneParam._m0[64u].z)) && (_1893 <= cbSceneParam._m0[64u].w))
        {
            float _2031 = fma(_1687, cbSceneParam._m0[62u].w, fma(_1683, cbSceneParam._m0[62u].z, fma(_1679, cbSceneParam._m0[62u].y, _1675 * cbSceneParam._m0[62u].x))) / _1891;
            float _2035 = isnan(cbSceneParam._m0[41u].w) ? _2031 : (isnan(_2031) ? cbSceneParam._m0[41u].w : max(_2031, cbSceneParam._m0[41u].w));
            float _2078 = (cbSceneParam._m0[33u].x - sqrt(((_1689 * _1689) + (_1688 * _1688)) + (_1690 * _1690))) * cbSceneParam._m0[33u].y;
            float _4190 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
            float _2085 = (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1892, cbSceneParam._m0[33u].w + _1893), _2035), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1892, _1893 - cbSceneParam._m0[33u].z), _2035), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1892 - cbSceneParam._m0[33u].z, _1893 - cbSceneParam._m0[33u].w), _2035), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1892 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1893), _2035), 0.0)).x), vec4(0.25)));
            float _2089 = 1.0 - (_2085 * cbSceneParam._m0[34u].x);
            float _2090 = 1.0 - (_2085 * cbSceneParam._m0[34u].y);
            float _2091 = 1.0 - (_2085 * cbSceneParam._m0[34u].z);
            frontier_phi_39_38_ladder = isnan(_2090) ? _1838 : (isnan(_1838) ? _2090 : min(_1838, _2090));
            frontier_phi_39_38_ladder_1 = isnan(_2089) ? _1837 : (isnan(_1837) ? _2089 : min(_1837, _2089));
            frontier_phi_39_38_ladder_2 = isnan(_2091) ? _1839 : (isnan(_1839) ? _2091 : min(_1839, _2091));
        }
        else
        {
            frontier_phi_39_38_ladder = _1838;
            frontier_phi_39_38_ladder_1 = _1837;
            frontier_phi_39_38_ladder_2 = _1839;
        }
        _1903 = frontier_phi_39_38_ladder_1;
        _1905 = frontier_phi_39_38_ladder;
        _1907 = frontier_phi_39_38_ladder_2;
    }
    else
    {
        _1903 = _1837;
        _1905 = _1838;
        _1907 = _1839;
    }
    uvec4 _1912 = floatBitsToUint(cbInstanceData._m0[_532 + 5u]);
    uint _1914 = _1912.x * 14u;
    uint _1915 = _1914 + 13u;
    float _1922 = _573 + (-1.0);
    float _1927 = (cbLight._m0[_1915].x * _1922) + 1.0;
    float _1928 = (cbLight._m0[_1915].y * _1922) + 1.0;
    float _1929 = (cbLight._m0[_1915].z * _1922) + 1.0;
    float _1930 = (cbLight._m0[_1915].w * _1922) + 1.0;
    uint _1931 = _1914 + 5u;
    float _1937 = isnan(1.0) ? _1928 : (isnan(_1928) ? 1.0 : min(_1928, 1.0));
    uint _1941 = _1914 + 4u;
    float _1950 = isnan(1.0) ? _1927 : (isnan(_1927) ? 1.0 : min(_1927, 1.0));
    uint _1954 = _1914 | 1u;
    float _1965 = dot(vec3(cbLight._m0[_1914].xyz), vec3(_389, _390, _391));
    float _1968 = dot(vec3(cbLight._m0[_1954].xyz), vec3(_389, _390, _391));
    float _4226 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
    float _4237 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
    float _1973 = (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * 0.3183098733425140380859375;
    float _1975 = (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * 0.3183098733425140380859375;
    float _1982 = ((cbLight._m0[_1931].x * _1937) * _1975) + (((cbLight._m0[_1941].x * _1903) * _1950) * _1973);
    float _1983 = ((_1937 * cbLight._m0[_1931].y) * _1975) + (((cbLight._m0[_1941].y * _1905) * _1950) * _1973);
    float _1984 = ((_1937 * cbLight._m0[_1931].z) * _1975) + (((cbLight._m0[_1941].z * _1907) * _1950) * _1973);
    uvec4 _1988 = floatBitsToUint(cbLight._m0[_1914 + 12u]);
    bool _1990 = _1988.x == 0u;
    float _2092;
    float _2094;
    float _2096;
    if (_1990)
    {
        _2092 = _1982;
        _2094 = _1983;
        _2096 = _1984;
    }
    else
    {
        uint _2100 = _1914 + 6u;
        float _2116 = (dot(vec3(cbLight._m0[_1914 + 2u].xyz), vec3(_389, _390, _391)) * 0.5) + 0.5;
        float _2117 = _2116 * _2116;
        float _4248 = isnan(0.0) ? _2117 : (isnan(_2117) ? 0.0 : max(_2117, 0.0));
        float _2118 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
        float _2119 = isnan(1.0) ? _1929 : (isnan(_1929) ? 1.0 : min(_1929, 1.0));
        _2092 = (((cbLight._m0[_2100].x * 0.3183098733425140380859375) * _2118) * _2119) + _1982;
        _2094 = (((cbLight._m0[_2100].y * 0.3183098733425140380859375) * _2118) * _2119) + _1983;
        _2096 = (((cbLight._m0[_2100].z * 0.3183098733425140380859375) * _2118) * _2119) + _1984;
    }
    bool _2099 = _1988.y == 0u;
    float _2154;
    float _2156;
    float _2158;
    if (_2099)
    {
        _2154 = _2092;
        _2156 = _2094;
        _2158 = _2096;
    }
    else
    {
        uint _2327 = _1914 + 7u;
        float _2343 = (dot(vec3(cbLight._m0[_1914 + 3u].xyz), vec3(_389, _390, _391)) * 0.5) + 0.5;
        float _2344 = _2343 * _2343;
        float _4264 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
        float _2345 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _2346 = isnan(1.0) ? _1930 : (isnan(_1930) ? 1.0 : min(_1930, 1.0));
        _2154 = (((cbLight._m0[_2327].x * 0.3183098733425140380859375) * _2345) * _2346) + _2092;
        _2156 = (((cbLight._m0[_2327].y * 0.3183098733425140380859375) * _2345) * _2346) + _2094;
        _2158 = (((cbLight._m0[_2327].z * 0.3183098733425140380859375) * _2345) * _2346) + _2096;
    }
    uint _2161 = _1914 + 8u;
    float _2174 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1914].w)) * _392) * 0.949999988079071044921875);
    float _2175 = _2174 * _2174;
    float _2176 = cbLight._m0[_1914].x + _471;
    float _2177 = cbLight._m0[_1914].y + _472;
    float _2178 = cbLight._m0[_1914].z + _473;
    float _2182 = inversesqrt(dot(vec3(_2176, _2177, _2178), vec3(_2176, _2177, _2178)));
    float _2183 = _2182 * _2176;
    float _2184 = _2182 * _2177;
    float _2185 = _2182 * _2178;
    float _2186 = dot(vec3(_389, _390, _391), vec3(cbLight._m0[_1914].xyz));
    float _4280 = isnan(0.0) ? _2186 : (isnan(_2186) ? 0.0 : max(_2186, 0.0));
    float _2189 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
    float _4291 = isnan(0.0) ? _574 : (isnan(_574) ? 0.0 : max(_574, 0.0));
    float _2190 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
    float _2191 = dot(vec3(_389, _390, _391), vec3(_2183, _2184, _2185));
    float _4302 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0));
    float _2194 = isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0));
    float _2195 = dot(vec3(cbLight._m0[_1914].xyz), vec3(_2183, _2184, _2185));
    float _4313 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
    float _2199 = _2175 * _2175;
    float _2203 = ((_2194 * _2194) * (_2199 + (-1.0))) + 1.0;
    float _2211 = exp2(log2(1.0 - (isnan(1.0) ? _4313 : (isnan(_4313) ? 1.0 : min(_4313, 1.0)))) * 5.0);
    float _2212 = 0.959999978542327880859375 - _555;
    float _2214 = 0.959999978542327880859375 - _556;
    float _2215 = 0.959999978542327880859375 - _557;
    float _2222 = 1.0 - _2175;
    float _2233 = (0.5 / (((_2190 * ((_2189 * _2222) + _2175)) + 9.9999999392252902907785028219223e-09) + (((_2190 * _2222) + _2175) * _2189))) * _2189;
    float _4324 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
    float _2235 = (isnan(1.0) ? _4324 : (isnan(_4324) ? 1.0 : min(_4324, 1.0))) * (_2199 / ((_2203 * _2203) * 3.141590118408203125));
    uint _2249 = _1914 + 9u;
    float _2260 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1954].w)) * _392) * 0.949999988079071044921875);
    float _2261 = _2260 * _2260;
    float _2262 = cbLight._m0[_1954].x + _471;
    float _2263 = cbLight._m0[_1954].y + _472;
    float _2264 = cbLight._m0[_1954].z + _473;
    float _2268 = inversesqrt(dot(vec3(_2262, _2263, _2264), vec3(_2262, _2263, _2264)));
    float _2269 = _2268 * _2262;
    float _2270 = _2268 * _2263;
    float _2271 = _2268 * _2264;
    float _2272 = dot(vec3(_389, _390, _391), vec3(cbLight._m0[_1954].xyz));
    float _4335 = isnan(0.0) ? _2272 : (isnan(_2272) ? 0.0 : max(_2272, 0.0));
    float _2275 = isnan(1.0) ? _4335 : (isnan(_4335) ? 1.0 : min(_4335, 1.0));
    float _2276 = dot(vec3(_389, _390, _391), vec3(_2269, _2270, _2271));
    float _4346 = isnan(0.0) ? _2276 : (isnan(_2276) ? 0.0 : max(_2276, 0.0));
    float _2279 = isnan(1.0) ? _4346 : (isnan(_4346) ? 1.0 : min(_4346, 1.0));
    float _2280 = dot(vec3(cbLight._m0[_1954].xyz), vec3(_2269, _2270, _2271));
    float _4357 = isnan(0.0) ? _2280 : (isnan(_2280) ? 0.0 : max(_2280, 0.0));
    float _2284 = _2261 * _2261;
    float _2288 = ((_2279 * _2279) * (_2284 + (-1.0))) + 1.0;
    float _2295 = exp2(log2(1.0 - (isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0)))) * 5.0);
    float _2302 = 1.0 - _2261;
    float _2312 = (0.5 / (((_2190 * ((_2275 * _2302) + _2261)) + 9.9999999392252902907785028219223e-09) + (((_2190 * _2302) + _2261) * _2275))) * _2275;
    float _4368 = isnan(0.0) ? _2312 : (isnan(_2312) ? 0.0 : max(_2312, 0.0));
    float _2314 = (isnan(1.0) ? _4368 : (isnan(_4368) ? 1.0 : min(_4368, 1.0))) * (_2284 / ((_2288 * _2288) * 3.141590118408203125));
    float _2324 = (((((_2295 * _2212) + _558) * cbLight._m0[_2249].x) * _2314) * _1937) + ((((cbLight._m0[_2161].x * _1903) * ((_2211 * _2212) + _558)) * _2235) * _1950);
    float _2325 = (((((_2295 * _2214) + _560) * cbLight._m0[_2249].y) * _2314) * _1937) + ((((cbLight._m0[_2161].y * _1905) * ((_2211 * _2214) + _560)) * _2235) * _1950);
    float _2326 = (((((_2295 * _2215) + _561) * cbLight._m0[_2249].z) * _2314) * _1937) + ((((cbLight._m0[_2161].z * _1907) * ((_2211 * _2215) + _561)) * _2235) * _1950);
    float _2382;
    float _2384;
    float _2386;
    if (_1990)
    {
        _2382 = _2324;
        _2384 = _2325;
        _2386 = _2326;
    }
    else
    {
        uint _2388 = _1914 + 2u;
        uint _2392 = _1914 + 10u;
        float _2406 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2388].w)) * _392) * 0.949999988079071044921875);
        float _2407 = _2406 * _2406;
        float _2408 = cbLight._m0[_2388].x + _471;
        float _2409 = cbLight._m0[_2388].y + _472;
        float _2410 = cbLight._m0[_2388].z + _473;
        float _2414 = inversesqrt(dot(vec3(_2408, _2409, _2410), vec3(_2408, _2409, _2410)));
        float _2415 = _2414 * _2408;
        float _2416 = _2414 * _2409;
        float _2417 = _2414 * _2410;
        float _2418 = dot(vec3(_389, _390, _391), vec3(cbLight._m0[_2388].xyz));
        float _4379 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
        float _2421 = isnan(1.0) ? _4379 : (isnan(_4379) ? 1.0 : min(_4379, 1.0));
        float _2422 = dot(vec3(_389, _390, _391), vec3(_2415, _2416, _2417));
        float _4390 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
        float _2425 = isnan(1.0) ? _4390 : (isnan(_4390) ? 1.0 : min(_4390, 1.0));
        float _2426 = dot(vec3(cbLight._m0[_2388].xyz), vec3(_2415, _2416, _2417));
        float _4401 = isnan(0.0) ? _2426 : (isnan(_2426) ? 0.0 : max(_2426, 0.0));
        float _2430 = _2407 * _2407;
        float _2434 = ((_2425 * _2425) * (_2430 + (-1.0))) + 1.0;
        float _2441 = exp2(log2(1.0 - (isnan(1.0) ? _4401 : (isnan(_4401) ? 1.0 : min(_4401, 1.0)))) * 5.0);
        float _2448 = 1.0 - _2407;
        float _2458 = (0.5 / (((_2190 * ((_2421 * _2448) + _2407)) + 9.9999999392252902907785028219223e-09) + (((_2190 * _2448) + _2407) * _2421))) * _2421;
        float _4412 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
        float _2460 = (isnan(1.0) ? _4412 : (isnan(_4412) ? 1.0 : min(_4412, 1.0))) * (_2430 / ((_2434 * _2434) * 3.141590118408203125));
        float _2461 = isnan(1.0) ? _1929 : (isnan(_1929) ? 1.0 : min(_1929, 1.0));
        _2382 = (((((_2441 * _2212) + _558) * cbLight._m0[_2392].x) * _2460) * _2461) + _2324;
        _2384 = (((((_2441 * _2214) + _560) * cbLight._m0[_2392].y) * _2460) * _2461) + _2325;
        _2386 = (((((_2441 * _2215) + _561) * cbLight._m0[_2392].z) * _2460) * _2461) + _2326;
    }
    float _2492;
    float _2494;
    float _2496;
    if (_2099)
    {
        _2492 = _2382;
        _2494 = _2384;
        _2496 = _2386;
    }
    else
    {
        uint _2503 = _1914 + 3u;
        uint _2507 = _1914 + 11u;
        float _2521 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2503].w)) * _392) * 0.949999988079071044921875);
        float _2522 = _2521 * _2521;
        float _2523 = cbLight._m0[_2503].x + _471;
        float _2524 = cbLight._m0[_2503].y + _472;
        float _2525 = cbLight._m0[_2503].z + _473;
        float _2529 = inversesqrt(dot(vec3(_2523, _2524, _2525), vec3(_2523, _2524, _2525)));
        float _2530 = _2529 * _2523;
        float _2531 = _2529 * _2524;
        float _2532 = _2529 * _2525;
        float _2533 = dot(vec3(_389, _390, _391), vec3(cbLight._m0[_2503].xyz));
        float _4428 = isnan(0.0) ? _2533 : (isnan(_2533) ? 0.0 : max(_2533, 0.0));
        float _2536 = isnan(1.0) ? _4428 : (isnan(_4428) ? 1.0 : min(_4428, 1.0));
        float _2537 = dot(vec3(_389, _390, _391), vec3(_2530, _2531, _2532));
        float _4439 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
        float _2540 = isnan(1.0) ? _4439 : (isnan(_4439) ? 1.0 : min(_4439, 1.0));
        float _2541 = dot(vec3(cbLight._m0[_2503].xyz), vec3(_2530, _2531, _2532));
        float _4450 = isnan(0.0) ? _2541 : (isnan(_2541) ? 0.0 : max(_2541, 0.0));
        float _2545 = _2522 * _2522;
        float _2549 = ((_2540 * _2540) * (_2545 + (-1.0))) + 1.0;
        float _2556 = exp2(log2(1.0 - (isnan(1.0) ? _4450 : (isnan(_4450) ? 1.0 : min(_4450, 1.0)))) * 5.0);
        float _2563 = 1.0 - _2522;
        float _2573 = (0.5 / (((_2190 * ((_2536 * _2563) + _2522)) + 9.9999999392252902907785028219223e-09) + (((_2190 * _2563) + _2522) * _2536))) * _2536;
        float _4461 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0));
        float _2575 = (isnan(1.0) ? _4461 : (isnan(_4461) ? 1.0 : min(_4461, 1.0))) * (_2545 / ((_2549 * _2549) * 3.141590118408203125));
        float _2576 = isnan(1.0) ? _1930 : (isnan(_1930) ? 1.0 : min(_1930, 1.0));
        _2492 = (((((_2556 * _2212) + _558) * cbLight._m0[_2507].x) * _2575) * _2576) + _2382;
        _2494 = (((((_2556 * _2214) + _560) * cbLight._m0[_2507].y) * _2575) * _2576) + _2384;
        _2496 = (((((_2556 * _2215) + _561) * cbLight._m0[_2507].z) * _2575) * _2576) + _2386;
    }
    float _2641;
    float _2643;
    float _2645;
    float _2647;
    float _2649;
    float _2651;
    if (_1912.y == 0u)
    {
        uvec4 _2597 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2598 = _2597.x;
        uint _2609 = uint((float(_2597.y) * floor(float(uint(cbSceneParam._m0[85u].y * _493) / _2598))) + floor(float(uint(cbSceneParam._m0[85u].x * _492) / _2598)));
        float _2619 = (log2(_1690 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2620 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
        uint _2623 = uint(isnan(14.0) ? _2620 : (isnan(_2620) ? 14.0 : min(_2620, 14.0)));
        uvec4 _2628 = texelFetch(g_lightClusterGridBuffer, int(((_2623 << 2u) + (_2609 << 6u)) >> 2u));
        uint _2629 = _2628.x;
        uint _2630 = _2597.z;
        float _2708;
        float _2710;
        float _2712;
        float _2714;
        float _2716;
        float _2718;
        if (((((1u << ((_2630 >> 4u) & 15u)) + 4294967295u) & _2629) == 0u) || ((_2630 & 240u) == 0u))
        {
            _2708 = 0.0;
            _2710 = 0.0;
            _2712 = 0.0;
            _2714 = 0.0;
            _2716 = 0.0;
            _2718 = 0.0;
        }
        else
        {
            float _2709;
            float _2711;
            float _2713;
            float _2715;
            float _2717;
            float _2719;
            float _2860 = 0.0;
            float _2861 = 0.0;
            float _2862 = 0.0;
            float _2863 = 0.0;
            float _2864 = 0.0;
            float _2865 = 0.0;
            uint _2866 = 0u;
            uint _2875;
            bool _2876;
            for (;;)
            {
                _2875 = texelFetch(g_lightClassification, int((((_2623 << 5u) + (_2609 << 9u)) + (_2866 << 2u)) >> 2u)).x;
                _2876 = _2875 == 0u;
                float frontier_phi_73_pred;
                float frontier_phi_73_pred_1;
                float frontier_phi_73_pred_2;
                float frontier_phi_73_pred_3;
                float frontier_phi_73_pred_4;
                float frontier_phi_73_pred_5;
                if (_2876)
                {
                    frontier_phi_73_pred = _2865;
                    frontier_phi_73_pred_1 = _2864;
                    frontier_phi_73_pred_2 = _2863;
                    frontier_phi_73_pred_3 = _2862;
                    frontier_phi_73_pred_4 = _2861;
                    frontier_phi_73_pred_5 = _2860;
                }
                else
                {
                    float _3005;
                    float _3006;
                    float _3007;
                    float _3008;
                    float _3009;
                    float _3010;
                    uint _3011;
                    _3005 = _2860;
                    _3006 = _2861;
                    _3007 = _2862;
                    _3008 = _2863;
                    _3009 = _2864;
                    _3010 = _2865;
                    _3011 = _2875;
                    float _2932;
                    float _2933;
                    float _2934;
                    float _2935;
                    float _2936;
                    float _2937;
                    for (;;)
                    {
                        uint _3015 = uint(findLSB(_3011)) + (_2866 << 5u);
                        uint _3012 = (_3011 + 4294967295u) & _3011;
                        uint _3017 = _3015 * 48u;
                        vec4 _3031 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3017)).x, texelFetch(g_PointLightRenderingBuffer, int(_3017 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3017 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3017 + 3u)).x));
                        uint _3037 = (_3015 * 48u) + 4u;
                        vec4 _3050 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3037)).x, texelFetch(g_PointLightRenderingBuffer, int(_3037 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3037 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3037 + 3u)).x));
                        uint _3056 = (_3015 * 48u) + 8u;
                        vec3 _3067 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3056)).x, texelFetch(g_PointLightRenderingBuffer, int(_3056 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3056 + 2u)).x));
                        float _3071 = _3031.x - _1688;
                        float _3072 = _3031.y - _1689;
                        float _3073 = _3031.z - _1690;
                        float _3074 = dot(vec3(_3071, _3072, _3073), vec3(_3071, _3072, _3073));
                        float _3077 = inversesqrt(_3074);
                        float _3078 = _3077 * _3071;
                        float _3079 = _3077 * _3072;
                        float _3080 = _3077 * _3073;
                        float _3081 = dot(vec3(_513, _516, _519), vec3(_3078, _3079, _3080));
                        float _3086 = 1.0 - (_3074 * _3031.w);
                        float _4487 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0));
                        float _3087 = isnan(1.0) ? _4487 : (isnan(_4487) ? 1.0 : min(_4487, 1.0));
                        float _3088 = sqrt(_3074) * _3050.w;
                        float _3091 = 1.39999997615814208984375 / (_3088 + 1.39999997615814208984375);
                        float _3092 = _3091 * _3091;
                        float _3095 = ((1.0 - _3092) * _3081) + _3092;
                        float _3098 = _3088 * _3088;
                        float _3102 = ((isnan(0.0) ? _3095 : (isnan(_3095) ? 0.0 : max(_3095, 0.0))) * _3087) / ((_3098 * 0.699999988079071044921875) + 1.0);
                        float _3106 = (-0.0) - _1688;
                        float _3107 = (-0.0) - _1689;
                        float _3108 = (-0.0) - _1690;
                        float _3112 = inversesqrt(dot(vec3(_3106, _3107, _3108), vec3(_3106, _3107, _3108)));
                        float _3113 = _3112 * _3106;
                        float _3114 = _3112 * _3107;
                        float _3115 = _3112 * _3108;
                        float _3122 = exp2(log2(1.0 / ((_3098 * 3.5) + 5.0)) * 0.25);
                        float _3123 = 1.0 - _589;
                        float _3130 = sqrt(1.0 - ((1.0 - (_3123 * _3123)) * (1.0 - (_3122 * _3122))));
                        float _3131 = _3130 * _3130;
                        float _3132 = _3131 * _3131;
                        float _3133 = _3113 + _3078;
                        float _3134 = _3114 + _3079;
                        float _3135 = _3115 + _3080;
                        float _3139 = inversesqrt(dot(vec3(_3133, _3134, _3135), vec3(_3133, _3134, _3135)));
                        float _3143 = dot(vec3(_513, _516, _519), vec3(_3113, _3114, _3115));
                        float _4503 = isnan(0.0) ? _3143 : (isnan(_3143) ? 0.0 : max(_3143, 0.0));
                        float _3146 = isnan(1.0) ? _4503 : (isnan(_4503) ? 1.0 : min(_4503, 1.0));
                        float _3147 = dot(vec3(_513, _516, _519), vec3(_3139 * _3133, _3139 * _3134, _3139 * _3135));
                        float _4514 = isnan(0.0) ? _3147 : (isnan(_3147) ? 0.0 : max(_3147, 0.0));
                        float _3150 = isnan(1.0) ? _4514 : (isnan(_4514) ? 1.0 : min(_4514, 1.0));
                        float _3154 = ((_3150 * _3150) * (_3132 + (-1.0))) + 1.0;
                        float _3155 = _3091 * _3131;
                        float _3156 = _3155 * _3155;
                        float _3159 = ((1.0 - _3156) * _3081) + _3156;
                        float _4525 = isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0));
                        float _3160 = isnan(1.0) ? _4525 : (isnan(_4525) ? 1.0 : min(_4525, 1.0));
                        float _3161 = 1.0 - _3131;
                        float _3171 = (0.5 / (((_3160 * ((_3146 * _3161) + _3131)) + 9.9999999392252902907785028219223e-09) + (((_3160 * _3161) + _3131) * _3146))) * _3160;
                        float _4536 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                        float _3182 = (((_3132 * 3.1415927410125732421875) * (isnan(1.0) ? _4536 : (isnan(_4536) ? 1.0 : min(_4536, 1.0)))) / ((_3154 * _3154) * ((_3098 * 2.1991131305694580078125) + 3.141590118408203125))) * _3087;
                        _2935 = (_3102 * _3050.x) + _3008;
                        _2936 = (_3102 * _3050.y) + _3009;
                        _2937 = (_3102 * _3050.z) + _3010;
                        _2932 = (_3182 * _3067.x) + _3005;
                        _2933 = (_3182 * _3067.y) + _3006;
                        _2934 = (_3182 * _3067.z) + _3007;
                        if (_3012 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3005 = _2932;
                            _3006 = _2933;
                            _3007 = _2934;
                            _3008 = _2935;
                            _3009 = _2936;
                            _3010 = _2937;
                            _3011 = _3012;
                        }
                    }
                    frontier_phi_73_pred = _2937;
                    frontier_phi_73_pred_1 = _2936;
                    frontier_phi_73_pred_2 = _2935;
                    frontier_phi_73_pred_3 = _2934;
                    frontier_phi_73_pred_4 = _2933;
                    frontier_phi_73_pred_5 = _2932;
                }
                _2719 = frontier_phi_73_pred;
                _2717 = frontier_phi_73_pred_1;
                _2715 = frontier_phi_73_pred_2;
                _2713 = frontier_phi_73_pred_3;
                _2711 = frontier_phi_73_pred_4;
                _2709 = frontier_phi_73_pred_5;
                uint _2867 = _2866 + 1u;
                if (_2867 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2860 = _2709;
                    _2861 = _2711;
                    _2862 = _2713;
                    _2863 = _2715;
                    _2864 = _2717;
                    _2865 = _2719;
                    _2866 = _2867;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2708 = _2709;
            _2710 = _2711;
            _2712 = _2713;
            _2714 = _2715;
            _2716 = _2717;
            _2718 = _2719;
        }
        uvec4 _2722 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2723 = _2722.z;
        uint _2725 = (_2723 >> 8u) & 15u;
        float _2828;
        float _2830;
        float _2832;
        float _2834;
        float _2836;
        float _2838;
        if (((4294967295u << _2725) & _2629) == 0u)
        {
            _2828 = _2708;
            _2830 = _2710;
            _2832 = _2712;
            _2834 = _2714;
            _2836 = _2716;
            _2838 = _2718;
        }
        else
        {
            float _2853 = inversesqrt(dot(vec3(_1688, _1689, _1690), vec3(_1688, _1689, _1690)));
            float _2854 = _2853 * _1688;
            float _2855 = _2853 * _1689;
            float _2856 = _2853 * _1690;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2725 < ((_2723 >> 12u) & 15u))
            {
                float _2829;
                float _2831;
                float _2833;
                float _2835;
                float _2837;
                float _2839;
                float _2988 = _2708;
                float _2989 = _2710;
                float _2990 = _2712;
                float _2991 = _2714;
                float _2992 = _2716;
                float _2993 = _2718;
                uint _2994 = _2725;
                uint _3003;
                bool _3004;
                for (;;)
                {
                    _3003 = texelFetch(g_lightClassification, int((((_2623 << 5u) + (_2609 << 9u)) + (_2994 << 2u)) >> 2u)).x;
                    _3004 = _3003 == 0u;
                    float frontier_phi_84_pred;
                    float frontier_phi_84_pred_1;
                    float frontier_phi_84_pred_2;
                    float frontier_phi_84_pred_3;
                    float frontier_phi_84_pred_4;
                    float frontier_phi_84_pred_5;
                    if (_3004)
                    {
                        frontier_phi_84_pred = _2992;
                        frontier_phi_84_pred_1 = _2991;
                        frontier_phi_84_pred_2 = _2990;
                        frontier_phi_84_pred_3 = _2989;
                        frontier_phi_84_pred_4 = _2988;
                        frontier_phi_84_pred_5 = _2993;
                    }
                    else
                    {
                        float _3196;
                        float _3197;
                        float _3198;
                        float _3199;
                        float _3200;
                        float _3201;
                        float _3492;
                        float _3493;
                        float _3494;
                        float _3495;
                        float _3496;
                        float _3497;
                        float _3209 = _2988;
                        float _3210 = _2989;
                        float _3211 = _2990;
                        float _3212 = _2991;
                        float _3213 = _2992;
                        float _3214 = _2993;
                        uint _3215 = _3003;
                        uint _3216;
                        vec4 _3241;
                        float _3242;
                        vec4 _3257;
                        vec3 _3269;
                        vec4 _3285;
                        vec4 _3301;
                        float _3348;
                        bool _3349;
                        for (;;)
                        {
                            uint _3226 = ((_2994 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3215));
                            _3216 = (_3215 + 4294967295u) & _3215;
                            uint _3228 = _3226 * 40u;
                            _3241 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3228)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 3u)).x));
                            _3242 = _3241.w;
                            uint _3244 = (_3226 * 40u) + 4u;
                            _3257 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3244)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3244 + 3u)).x));
                            uint _3259 = (_3226 * 40u) + 8u;
                            _3269 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3259)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3259 + 2u)).x));
                            uint _3272 = (_3226 * 40u) + 16u;
                            _3285 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3272)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3272 + 3u)).x));
                            uint _3288 = (_3226 * 40u) + 20u;
                            _3301 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3288)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3288 + 3u)).x));
                            uint _3304 = (_3226 * 40u) + 24u;
                            vec4 _3317 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3304)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3304 + 3u)).x));
                            uint _3323 = (_3226 * 40u) + 28u;
                            vec4 _3336 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3323)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 3u)).x));
                            _3348 = fma(_1690, _3336.z, fma(_1689, _3336.y, _3336.x * _1688)) + _3336.w;
                            _3349 = !((fma(_1690, _3317.z, fma(_1689, _3317.y, _3317.x * _1688)) + _3317.w) <= 0.0);
                            float frontier_phi_90_pred;
                            float frontier_phi_90_pred_1;
                            float frontier_phi_90_pred_2;
                            float frontier_phi_90_pred_3;
                            float frontier_phi_90_pred_4;
                            float frontier_phi_90_pred_5;
                            if (_3349)
                            {
                                float _3376 = _3241.x - _1688;
                                float _3377 = _3241.y - _1689;
                                float _3378 = _3241.z - _1690;
                                float _3379 = dot(vec3(_3376, _3377, _3378), vec3(_3376, _3377, _3378));
                                float _3382 = inversesqrt(_3379);
                                float _3383 = _3382 * _3376;
                                float _3384 = _3382 * _3377;
                                float _3385 = _3382 * _3378;
                                float _3389 = 1.0 - (_3379 / (_3242 * _3242));
                                float _4547 = isnan(0.0) ? _3389 : (isnan(_3389) ? 0.0 : max(_3389, 0.0));
                                float _3390 = isnan(1.0) ? _4547 : (isnan(_4547) ? 1.0 : min(_4547, 1.0));
                                float _3394 = sqrt(_3379) * _3257.w;
                                float _3396 = 1.39999997615814208984375 / (_3394 + 1.39999997615814208984375);
                                float _3397 = _3396 * _3396;
                                float _3400 = ((1.0 - _3397) * dot(vec3(_3383, _3384, _3385), vec3(_513, _516, _519))) + _3397;
                                float _3403 = _3394 * _3394;
                                float _3407 = (fma(_1690, _3285.z, fma(_1689, _3285.y, _3285.x * _1688)) + _3285.w) / _3348;
                                float _3408 = (fma(_1690, _3301.z, fma(_1689, _3301.y, _3301.x * _1688)) + _3301.w) / _3348;
                                float _3412 = 1.0 - dot(vec2(_3407, _3408), vec2(_3407, _3408));
                                float _4563 = isnan(0.0) ? _3412 : (isnan(_3412) ? 0.0 : max(_3412, 0.0));
                                float _3413 = isnan(1.0) ? _4563 : (isnan(_4563) ? 1.0 : min(_4563, 1.0));
                                float _3414 = _3413 * (((isnan(0.0) ? _3400 : (isnan(_3400) ? 0.0 : max(_3400, 0.0))) * _3390) / ((_3403 * 0.699999988079071044921875) + 1.0));
                                float _3426 = exp2(log2(1.0 / ((_3403 * 3.5) + 5.0)) * 0.25);
                                float _3427 = 1.0 - _589;
                                float _3434 = sqrt(1.0 - ((1.0 - (_3427 * _3427)) * (1.0 - (_3426 * _3426))));
                                float _3435 = _3434 * _3434;
                                float _3436 = _3435 * _3435;
                                float _3437 = _3383 - _2854;
                                float _3438 = _3384 - _2855;
                                float _3439 = _3385 - _2856;
                                float _3443 = inversesqrt(dot(vec3(_3437, _3438, _3439), vec3(_3437, _3438, _3439)));
                                float _3447 = dot(vec3(_513, _516, _519), vec3((-0.0) - _2854, (-0.0) - _2855, (-0.0) - _2856));
                                float _4574 = isnan(0.0) ? _3447 : (isnan(_3447) ? 0.0 : max(_3447, 0.0));
                                float _3450 = isnan(1.0) ? _4574 : (isnan(_4574) ? 1.0 : min(_4574, 1.0));
                                float _3451 = dot(vec3(_513, _516, _519), vec3(_3443 * _3437, _3443 * _3438, _3443 * _3439));
                                float _4585 = isnan(0.0) ? _3451 : (isnan(_3451) ? 0.0 : max(_3451, 0.0));
                                float _3454 = isnan(1.0) ? _4585 : (isnan(_4585) ? 1.0 : min(_4585, 1.0));
                                float _3458 = ((_3454 * _3454) * (_3436 + (-1.0))) + 1.0;
                                float _3459 = _3396 * _3435;
                                float _3460 = _3459 * _3459;
                                float _3466 = ((1.0 - _3460) * dot(vec3(_513, _516, _519), vec3(_3383, _3384, _3385))) + _3460;
                                float _4596 = isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0));
                                float _3467 = isnan(1.0) ? _4596 : (isnan(_4596) ? 1.0 : min(_4596, 1.0));
                                float _3468 = 1.0 - _3435;
                                float _3478 = (0.5 / (((_3467 * ((_3450 * _3468) + _3435)) + 9.9999999392252902907785028219223e-09) + (((_3467 * _3468) + _3435) * _3450))) * _3467;
                                float _4607 = isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0));
                                float _3488 = (_3413 * _3390) * (((_3436 * 3.1415927410125732421875) * (isnan(1.0) ? _4607 : (isnan(_4607) ? 1.0 : min(_4607, 1.0)))) / ((_3458 * _3458) * ((_3403 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_90_pred = _3414 * _3257.y;
                                frontier_phi_90_pred_1 = _3414 * _3257.x;
                                frontier_phi_90_pred_2 = _3488 * _3269.z;
                                frontier_phi_90_pred_3 = _3488 * _3269.y;
                                frontier_phi_90_pred_4 = _3488 * _3269.x;
                                frontier_phi_90_pred_5 = _3414 * _3257.z;
                            }
                            else
                            {
                                frontier_phi_90_pred = 0.0;
                                frontier_phi_90_pred_1 = 0.0;
                                frontier_phi_90_pred_2 = 0.0;
                                frontier_phi_90_pred_3 = 0.0;
                                frontier_phi_90_pred_4 = 0.0;
                                frontier_phi_90_pred_5 = 0.0;
                            }
                            _3496 = frontier_phi_90_pred;
                            _3495 = frontier_phi_90_pred_1;
                            _3494 = frontier_phi_90_pred_2;
                            _3493 = frontier_phi_90_pred_3;
                            _3492 = frontier_phi_90_pred_4;
                            _3497 = frontier_phi_90_pred_5;
                            _3199 = _3495 + _3212;
                            _3200 = _3496 + _3213;
                            _3201 = _3497 + _3214;
                            _3196 = _3492 + _3209;
                            _3197 = _3493 + _3210;
                            _3198 = _3494 + _3211;
                            if (_3216 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3209 = _3196;
                                _3210 = _3197;
                                _3211 = _3198;
                                _3212 = _3199;
                                _3213 = _3200;
                                _3214 = _3201;
                                _3215 = _3216;
                                continue;
                            }
                        }
                        frontier_phi_84_pred = _3200;
                        frontier_phi_84_pred_1 = _3199;
                        frontier_phi_84_pred_2 = _3198;
                        frontier_phi_84_pred_3 = _3197;
                        frontier_phi_84_pred_4 = _3196;
                        frontier_phi_84_pred_5 = _3201;
                    }
                    _2837 = frontier_phi_84_pred;
                    _2835 = frontier_phi_84_pred_1;
                    _2833 = frontier_phi_84_pred_2;
                    _2831 = frontier_phi_84_pred_3;
                    _2829 = frontier_phi_84_pred_4;
                    _2839 = frontier_phi_84_pred_5;
                    uint _2995 = _2994 + 1u;
                    if (_2995 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2988 = _2829;
                        _2989 = _2831;
                        _2990 = _2833;
                        _2991 = _2835;
                        _2992 = _2837;
                        _2993 = _2839;
                        _2994 = _2995;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2839;
                frontier_phi_65_66_ladder_1 = _2835;
                frontier_phi_65_66_ladder_2 = _2837;
                frontier_phi_65_66_ladder_3 = _2831;
                frontier_phi_65_66_ladder_4 = _2829;
                frontier_phi_65_66_ladder_5 = _2833;
            }
            else
            {
                frontier_phi_65_66_ladder = _2718;
                frontier_phi_65_66_ladder_1 = _2714;
                frontier_phi_65_66_ladder_2 = _2716;
                frontier_phi_65_66_ladder_3 = _2710;
                frontier_phi_65_66_ladder_4 = _2708;
                frontier_phi_65_66_ladder_5 = _2712;
            }
            _2828 = frontier_phi_65_66_ladder_4;
            _2830 = frontier_phi_65_66_ladder_3;
            _2832 = frontier_phi_65_66_ladder_5;
            _2834 = frontier_phi_65_66_ladder_1;
            _2836 = frontier_phi_65_66_ladder_2;
            _2838 = frontier_phi_65_66_ladder;
        }
        float _2843 = isnan(1.0) ? _573 : (isnan(_573) ? 1.0 : min(_573, 1.0));
        _2641 = (_2843 * _2834) + _2154;
        _2643 = (_2843 * _2836) + _2156;
        _2645 = (_2843 * _2838) + _2158;
        _2647 = ((_2828 * _558) * _2843) + _2492;
        _2649 = ((_2830 * _560) * _2843) + _2494;
        _2651 = ((_2832 * _561) * _2843) + _2496;
    }
    else
    {
        _2641 = _2154;
        _2643 = _2156;
        _2645 = _2158;
        _2647 = _2492;
        _2649 = _2494;
        _2651 = _2496;
    }
    float _4623 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _4634 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
    float _4645 = isnan(0.0) ? _550 : (isnan(_550) ? 0.0 : max(_550, 0.0));
    float _2668 = ((isnan(1.0) ? _4623 : (isnan(_4623) ? 1.0 : min(_4623, 1.0))) * (_2641 + ((isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0))) * _573))) + ((_2647 + ((isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0))) * _1415)) * cbPerFrame._m0[3u].x);
    float _2669 = ((isnan(1.0) ? _4634 : (isnan(_4634) ? 1.0 : min(_4634, 1.0))) * (_2643 + ((isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0))) * _573))) + ((_2649 + ((isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0))) * _1415)) * cbPerFrame._m0[3u].x);
    float _2670 = ((isnan(1.0) ? _4645 : (isnan(_4645) ? 1.0 : min(_4645, 1.0))) * (_2645 + ((isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0))) * _573))) + ((_2651 + ((isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0))) * _1415)) * cbPerFrame._m0[3u].x);
    uint _2671 = _532 + 6u;
    float _2679 = _492 / cbSceneParam._m0[86u].x;
    float _2680 = _493 / cbSceneParam._m0[86u].y;
    vec4 _2694 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2679, _2680, (log2((isnan(cbSceneParam._m0[77u].w) ? _412 : (isnan(_412) ? cbSceneParam._m0[77u].w : min(_412, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2696 = _2694.x;
    float _2697 = _2694.y;
    float _2698 = _2694.z;
    float _2699 = _2694.w;
    float _2770;
    float _2772;
    float _2774;
    float _2776;
    if (_412 > cbSceneParam._m0[78u].w)
    {
        float _2733 = isnan(_412) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _412 : min(cbSceneParam._m0[80u].w, _412));
        float _2734 = _2733 / _412;
        float _2745 = _2734 * _464;
        float _2746 = _465 * _2734;
        float _2747 = (-0.0) - _2746;
        float _2748 = _2734 * _466;
        float _2750 = (cbSceneParam._m0[77u].w * _2747) / _2733;
        float _2751 = _2750 + cbSceneParam._m0[79u].w;
        float _2752 = cbSceneParam._m0[79u].w - _2746;
        float _2758 = sqrt(((_2745 * _2745) + (_2746 * _2746)) + (_2748 * _2748));
        float _2761 = (1.0 - (cbSceneParam._m0[77u].w / _2733)) * _2758;
        float _2766 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2768 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2945;
        if (abs((_2747 - _2750) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2945 = ((((_2751 > 0.0) ? exp2(_2766 * _2751) : (2.0 - exp2(_2768 * _2751))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2761;
        }
        else
        {
            float _2889 = 1.0 / cbSceneParam._m0[80u].x;
            float _2890 = isnan(_2752) ? _2751 : (isnan(_2751) ? _2752 : max(_2751, _2752));
            float _2891 = isnan(_2752) ? _2751 : (isnan(_2751) ? _2752 : min(_2751, _2752));
            float _2900 = isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : min(_2890, 0.0));
            float _2901 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : min(_2891, 0.0));
            _2945 = ((abs(_2758 / _2747) * cbSceneParam._m0[80u].y) * ((((_2900 - _2901) * 2.0) - ((exp2(_2766 * (isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0)))) - exp2(_2766 * (isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0))))) * _2889)) - ((exp2(_2768 * _2900) - exp2(_2768 * _2901)) * _2889))) + (_2761 * cbSceneParam._m0[80u].z);
        }
        vec4 _2947 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2679, _2680, 1.0), 0.0);
        float _2956 = exp2((_2945 * (-1.44269502162933349609375)) * (1.0 - _2947.w));
        float _2957 = log2(_2956);
        float _2973 = log2(_2699);
        _2770 = (exp2(_2973 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2957 * cbSceneParam._m0[78u].x)) * _2947.x) / cbSceneParam._m0[78u].x)) + _2696;
        _2772 = (exp2(_2973 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2957 * cbSceneParam._m0[78u].y)) * _2947.y) / cbSceneParam._m0[78u].y)) + _2697;
        _2774 = (exp2(_2973 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2957 * cbSceneParam._m0[78u].z)) * _2947.z) / cbSceneParam._m0[78u].z)) + _2698;
        _2776 = _2956 * _2699;
    }
    else
    {
        _2770 = _2696;
        _2772 = _2697;
        _2774 = _2698;
        _2776 = _2699;
    }
    bool _2983;
    vec4 _2786;
    vec4 _2808;
    float _2810;
    float _2814;
    float _2815;
    float _2816;
    float _2817;
    bool _2827;
    for (;;)
    {
        _2786 = cbMatDynParam._m0[0u];
        float _2788 = roundEven(_2786.y);
        bool _2789 = _2788 == 3.0;
        float _2790 = log2(_2776);
        float _2797 = exp2(_2790 * cbSceneParam._m0[78u].x) * _2668;
        float _2798 = exp2(_2790 * cbSceneParam._m0[78u].y) * _2669;
        float _2799 = exp2(_2790 * cbSceneParam._m0[78u].z) * _2670;
        float _2806 = _480 + (-0.5);
        _2808 = cbMtdParam._m0[1u];
        _2810 = _2808.y * _2806;
        float _2813 = (_2788 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2814 = _2813 * (_2789 ? _2797 : (_2797 + (cbSceneParam._m0[72u].w * _2770)));
        _2815 = _2813 * (_2789 ? _2798 : (_2798 + (cbSceneParam._m0[72u].w * _2772)));
        _2816 = _2813 * (_2789 ? _2799 : (_2799 + (cbSceneParam._m0[72u].w * _2774)));
        _2817 = _2806 * 0.999000012874603271484375;
        _2827 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2827)
        {
            if ((cbInstanceData._m0[_532 + 7u].x + _2817) < 0.5)
            {
                _2983 = true;
                break;
            }
        }
        uint _2924 = _534 + uint(_2786.w);
        if ((cbInstanceData._m0[_2924].w < 1.0) && ((cbInstanceData._m0[_2924].w + _2817) < 0.5))
        {
            _2983 = true;
            break;
        }
        if ((_2810 + 1.0) < _2808.x)
        {
            _2983 = true;
            break;
        }
        _2983 = false;
        break;
    }
    float _3187;
    if (_2983)
    {
        discard_state = true;
        _3187 = 0.0;
    }
    else
    {
        _3187 = cbInstanceData._m0[_2671].w;
    }
    SV_Target.x = _2814;
    SV_Target.y = _2815;
    SV_Target.z = _2816;
    SV_Target.w = _3187;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2671].w;
    discard_exit();
}


