#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[10];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_Snow_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_Snow_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_Snow_snp_0_Texture2D_2;
layout(set = 0, binding = 3) uniform texture2D M_AMSN_Snow_snp_0_Texture2D_3;
layout(set = 0, binding = 4) uniform texture2D M_AMSN_Snow_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _975;
float _3389;
float _3390;
float _3391;
float _3392;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _198 = _197 * _190;
    float _199 = _197 * _191;
    float _200 = _197 * _192;
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = _204 * NORMAL.x;
    float _206 = _204 * NORMAL.y;
    float _207 = _204 * NORMAL.z;
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _212 = _211 * TANGENT.x;
    float _213 = _211 * TANGENT.y;
    float _214 = _211 * TANGENT.z;
    float _219;
    float _220;
    float _221;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _219 = (-0.0) - _205;
        _220 = (-0.0) - _206;
        _221 = (-0.0) - _207;
    }
    else
    {
        _219 = _205;
        _220 = _206;
        _221 = _207;
    }
    vec4 _240 = texture(sampler2D(M_AMSN_Snow_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _245 = _240.z;
    float _249 = (_240.x * 2.0) + (-1.0);
    float _251 = (_240.y * 2.0) + (-1.0);
    float _252 = dot(vec2(_249, _251), vec2(_249, _251));
    float _3401 = isnan(0.0) ? _252 : (isnan(_252) ? 0.0 : max(_252, 0.0));
    float _258 = sqrt(1.0 - (isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0))));
    float _261 = fma(_258, _219, fma(_251, _212, _249 * _198));
    float _264 = fma(_258, _220, fma(_251, _213, _249 * _199));
    float _267 = fma(_258, _221, fma(_251, _214, _249 * _200));
    float _276 = exp2(log2(inversesqrt(dot(vec3(_261, _264, _267), vec3(_261, _264, _267))) * _264) * cbMtdParam._m0[9u].x) * cbMtdParam._m0[9u].y;
    float _3412 = isnan(0.0) ? _276 : (isnan(_276) ? 0.0 : max(_276, 0.0));
    float _277 = isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0));
    vec4 _289 = texture(sampler2D(M_AMSN_Snow_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    vec4 _305 = texture(sampler2D(M_AMSN_Snow_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _307 = _305.x;
    float _308 = _305.y;
    float _309 = _305.z;
    float _316 = ((_289.x - _307) * _277) + _307;
    float _317 = ((_289.y - _308) * _277) + _308;
    float _318 = ((_289.z - _309) * _277) + _309;
    vec4 _331 = texture(sampler2D(M_AMSN_Snow_snp_0_Texture2D_4, SS_WrapLinear), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _333 = _331.x;
    float _335 = _333 - (_333 * _277);
    vec4 _347 = texture(sampler2D(M_AMSN_Snow_snp_0_Texture2D_3, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD.y) + cbTextureTilingScale._m0[3u].w));
    float _354 = (_347.x * 2.0) + (-1.0);
    float _355 = (_347.y * 2.0) + (-1.0);
    float _356 = dot(vec2(_354, _355), vec2(_354, _355));
    float _3423 = isnan(0.0) ? _356 : (isnan(_356) ? 0.0 : max(_356, 0.0));
    float _364 = ((_347.z - _245) * _277) + _245;
    float _371 = ((_354 - _249) * _277) + _249;
    float _372 = ((_355 - _251) * _277) + _251;
    float _373 = ((sqrt(1.0 - (isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0)))) - _258) * _277) + _258;
    float _376 = fma(_373, _219, fma(_372, _212, _371 * _198));
    float _379 = fma(_373, _220, fma(_372, _213, _371 * _199));
    float _382 = fma(_373, _221, fma(_372, _214, _371 * _200));
    float _386 = inversesqrt(dot(vec3(_376, _379, _382), vec3(_376, _379, _382)));
    float _387 = _386 * _376;
    float _388 = _386 * _379;
    float _389 = _386 * _382;
    float _3434 = isnan(0.0) ? _364 : (isnan(_364) ? 0.0 : max(_364, 0.0));
    float _390 = isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0));
    float _3445 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _3456 = isnan(0.0) ? _317 : (isnan(_317) ? 0.0 : max(_317, 0.0));
    float _3467 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _3478 = isnan(0.0) ? _335 : (isnan(_335) ? 0.0 : max(_335, 0.0));
    float _394 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
    float _410 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _452 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _462 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _452);
    float _463 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _452);
    float _464 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _452);
    float _468 = inversesqrt(dot(vec3(_462, _463, _464), vec3(_462, _463, _464)));
    float _469 = _462 * _468;
    float _470 = _463 * _468;
    float _471 = _464 * _468;
    vec4 _476 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _478 = _476.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _654 = sqrt(((_462 * _462) + (_463 * _463)) + (_464 * _464));
        float _660 = (cbMatDynParam._m0[5u].x * _654) + cbMatDynParam._m0[5u].y;
        float _3489 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
        float _661 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
        float _665 = (cbMatDynParam._m0[5u].z * _654) + cbMatDynParam._m0[5u].w;
        float _3500 = isnan(0.0) ? _665 : (isnan(_665) ? 0.0 : max(_665, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0))) - _661)) + _661) < ((_478 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _490 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _491 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _511 = fma(_389, cbSceneParam._m0[5u].z, fma(_388, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _387));
    float _514 = fma(_389, cbSceneParam._m0[6u].z, fma(_388, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _387));
    float _517 = fma(_389, cbSceneParam._m0[7u].z, fma(_388, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _387));
    uint _530 = uint(roundEven(NORMAL.w)) * 13u;
    uint _532 = _530 + 9u;
    uint _533 = _532 + uint(cbMatDynParam._m0[0u].w);
    float _539 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0)))) * cbInstanceData._m0[_533].x;
    float _540 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0)))) * cbInstanceData._m0[_533].y;
    float _541 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0)))) * cbInstanceData._m0[_533].z;
    float _3511 = isnan(0.0) ? _539 : (isnan(_539) ? 0.0 : max(_539, 0.0));
    float _542 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
    float _3522 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _543 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
    float _3533 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _544 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
    float _545 = 1.0 - _394;
    float _546 = _542 * _545;
    float _547 = _543 * _545;
    float _548 = _544 * _545;
    float _553 = (_542 + (-0.039999999105930328369140625)) * _394;
    float _554 = (_543 + (-0.039999999105930328369140625)) * _394;
    float _555 = (_544 + (-0.039999999105930328369140625)) * _394;
    float _556 = _553 + 0.039999999105930328369140625;
    float _558 = _554 + 0.039999999105930328369140625;
    float _559 = _555 + 0.039999999105930328369140625;
    vec4 _568 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _490, cbSceneParam._m0[86u].y * _491));
    float _571 = _568.x * TEXCOORD.z;
    float _572 = dot(vec3(_387, _388, _389), vec3(_469, _470, _471));
    float _575 = _572 * 2.0;
    float _579 = (_575 * _387) - _469;
    float _580 = (_575 * _388) - _470;
    float _581 = (_575 * _389) - _471;
    float _585 = abs(dot(vec3(_469, _470, _471), vec3(_387, _388, _389)));
    float _3544 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _587 = sqrt(_390);
    float _600 = exp2((_587 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_587 * 3.0));
    float _606 = (1.0 - _600) * ((_587 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _607 = _600 * _587;
    float _635 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _639 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _643 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _974;
    float _976;
    float _977;
    float _978;
    float _979;
    float _980;
    float _981;
    float _982;
    float _983;
    float _984;
    float _985;
    float _986;
    float _987;
    float _988;
    float _989;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _699 = fma(_643, cbModelParam._m0[26u].z, fma(_639, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _635));
        float _703 = fma(_643, cbModelParam._m0[27u].z, fma(_639, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _635));
        float _707 = fma(_643, cbModelParam._m0[28u].z, fma(_639, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _635));
        float _732 = _635 + _387;
        float _733 = _639 + _388;
        float _734 = _643 + _389;
        float _744 = fma(_734, cbModelParam._m0[26u].z, fma(_733, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _732)) - _699;
        float _745 = fma(_734, cbModelParam._m0[27u].z, fma(_733, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _732)) - _703;
        float _746 = fma(_734, cbModelParam._m0[28u].z, fma(_733, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _732)) - _707;
        float _750 = inversesqrt(dot(vec3(_744, _745, _746), vec3(_744, _745, _746)));
        float _763 = ((_750 * _744) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_699 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _764 = ((_750 * _745) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_703 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _765 = ((_750 * _746) / cbModelParam._m0[34u].z) + ((((((_707 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _768 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_763, _764, _765), 0.0);
        vec4 _775 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_763, _764, _765), 0.0);
        vec4 _782 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_763, _764, _765), 0.0);
        vec4 _789 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_763, _764, _765), 0.0);
        float _802 = exp2((_768.w + (-0.5)) * 20.0) * 2.0;
        float _803 = _802 * (_768.x + (-0.5));
        float _804 = _802 * (_768.y + (-0.5));
        float _805 = _802 * (_768.z + (-0.5));
        float _812 = exp2((_775.w + (-0.5)) * 20.0) * 2.0;
        float _813 = _812 * (_775.x + (-0.5));
        float _814 = _812 * (_775.y + (-0.5));
        float _815 = _812 * (_775.z + (-0.5));
        float _822 = exp2((_782.w + (-0.5)) * 20.0) * 2.0;
        float _823 = _822 * (_782.x + (-0.5));
        float _824 = _822 * (_782.y + (-0.5));
        float _825 = _822 * (_782.z + (-0.5));
        float _832 = exp2((_789.w + (-0.5)) * 20.0) * 2.0;
        float _833 = _832 * (_789.x + (-0.5));
        float _834 = _832 * (_789.y + (-0.5));
        float _835 = _832 * (_789.z + (-0.5));
        float _836 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        float _837 = isnan(0.0) ? _834 : (isnan(_834) ? 0.0 : max(_834, 0.0));
        float _838 = isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0));
        float _839 = _803 * 0.5;
        float _840 = _813 * 0.5;
        float _841 = _823 * 0.5;
        float _842 = dot(vec3(_839, _840, _841), vec3(_839, _840, _841));
        float _847 = (_842 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_842);
        float _856 = (dot(vec3(_387, _388, _389), vec3(_847 * _839, _847 * _840, _847 * _841)) + 1.0) * 0.5;
        float _3570 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _866 = sqrt(((_840 * _840) + (_839 * _839)) + (_841 * _841)) / (_836 + 9.9999997473787516355514526367188e-06);
        float _3581 = isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0));
        float _867 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
        float _868 = _867 * 2.0;
        float _872 = (1.0 - _867) / (_867 + 1.0);
        float _3592 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        float _873 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
        float _882 = ((((1.0 - _873) * (_868 + 2.0)) * exp2(log2(isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0))) * (_868 + 1.0))) + _873) * _836;
        float _883 = _804 * 0.5;
        float _884 = _814 * 0.5;
        float _885 = _824 * 0.5;
        float _886 = dot(vec3(_883, _884, _885), vec3(_883, _884, _885));
        float _891 = (_886 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_886);
        float _899 = (dot(vec3(_387, _388, _389), vec3(_891 * _883, _891 * _884, _891 * _885)) + 1.0) * 0.5;
        float _3603 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
        float _908 = sqrt(((_884 * _884) + (_883 * _883)) + (_885 * _885)) / (_837 + 9.9999997473787516355514526367188e-06);
        float _3614 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _909 = isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0));
        float _910 = _909 * 2.0;
        float _914 = (1.0 - _909) / (_909 + 1.0);
        float _3625 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _915 = isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0));
        float _924 = ((((1.0 - _915) * (_910 + 2.0)) * exp2(log2(isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0))) * (_910 + 1.0))) + _915) * _837;
        float _925 = _805 * 0.5;
        float _926 = _815 * 0.5;
        float _927 = _825 * 0.5;
        float _928 = dot(vec3(_925, _926, _927), vec3(_925, _926, _927));
        float _933 = (_928 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_928);
        float _941 = (dot(vec3(_387, _388, _389), vec3(_933 * _925, _933 * _926, _933 * _927)) + 1.0) * 0.5;
        float _3636 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _950 = sqrt(((_926 * _926) + (_925 * _925)) + (_927 * _927)) / (_838 + 9.9999997473787516355514526367188e-06);
        float _3647 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _951 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
        float _952 = _951 * 2.0;
        float _956 = (1.0 - _951) / (_951 + 1.0);
        float _3658 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _957 = isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0));
        float _966 = ((((1.0 - _957) * (_952 + 2.0)) * exp2(log2(isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0))) * (_952 + 1.0))) + _957) * _838;
        _974 = _805;
        _976 = _804;
        _977 = _803;
        _978 = _815;
        _979 = _814;
        _980 = _813;
        _981 = _825;
        _982 = _824;
        _983 = _823;
        _984 = _838;
        _985 = _837;
        _986 = _836;
        _987 = cbModelParam._m0[36u].z * (isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0)));
        _988 = cbModelParam._m0[36u].z * (isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0)));
        _989 = cbModelParam._m0[36u].z * (isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0)));
    }
    else
    {
        _974 = _975;
        _976 = _975;
        _977 = _975;
        _978 = _975;
        _979 = _975;
        _980 = _975;
        _981 = _975;
        _982 = _975;
        _983 = _975;
        _984 = _975;
        _985 = _975;
        _986 = _975;
        _987 = 0.0;
        _988 = 0.0;
        _989 = 0.0;
    }
    float _1287;
    float _1288;
    float _1289;
    float _1290;
    float _1291;
    float _1292;
    float _1293;
    float _1294;
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1018 = fma(_643, cbModelParam._m0[30u].z, fma(_639, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _635));
        float _1022 = fma(_643, cbModelParam._m0[31u].z, fma(_639, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _635));
        float _1026 = fma(_643, cbModelParam._m0[32u].z, fma(_639, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _635));
        float _1049 = _635 + _387;
        float _1050 = _639 + _388;
        float _1051 = _643 + _389;
        float _1061 = fma(_1051, cbModelParam._m0[30u].z, fma(_1050, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1049)) - _1018;
        float _1062 = fma(_1051, cbModelParam._m0[31u].z, fma(_1050, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1049)) - _1022;
        float _1063 = fma(_1051, cbModelParam._m0[32u].z, fma(_1050, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1049)) - _1026;
        float _1067 = inversesqrt(dot(vec3(_1061, _1062, _1063), vec3(_1061, _1062, _1063)));
        float _1080 = ((_1067 * _1061) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1018 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1081 = ((_1067 * _1062) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1022 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1082 = ((_1067 * _1063) / cbModelParam._m0[35u].z) + ((((((_1026 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1080, _1081, _1082), 0.0);
        vec4 _1091 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1080, _1081, _1082), 0.0);
        vec4 _1098 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1080, _1081, _1082), 0.0);
        vec4 _1105 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1080, _1081, _1082), 0.0);
        float _1117 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1084.x + (-0.5));
        float _1119 = _1117 * (_1084.y + (-0.5));
        float _1120 = _1117 * (_1084.z + (-0.5));
        float _1127 = exp2((_1091.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1091.x + (-0.5));
        float _1129 = _1127 * (_1091.y + (-0.5));
        float _1130 = _1127 * (_1091.z + (-0.5));
        float _1137 = exp2((_1098.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1098.x + (-0.5));
        float _1139 = _1137 * (_1098.y + (-0.5));
        float _1140 = _1137 * (_1098.z + (-0.5));
        float _1147 = exp2((_1105.w + (-0.5)) * 20.0) * 2.0;
        float _1148 = _1147 * (_1105.x + (-0.5));
        float _1149 = _1147 * (_1105.y + (-0.5));
        float _1150 = _1147 * (_1105.z + (-0.5));
        float _1151 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1152 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1153 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1154 = _1118 * 0.5;
        float _1155 = _1128 * 0.5;
        float _1156 = _1138 * 0.5;
        float _1157 = dot(vec3(_1154, _1155, _1156), vec3(_1154, _1155, _1156));
        float _1162 = (_1157 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1157);
        float _1170 = (dot(vec3(_387, _388, _389), vec3(_1162 * _1154, _1162 * _1155, _1162 * _1156)) + 1.0) * 0.5;
        float _3699 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1179 = sqrt(((_1155 * _1155) + (_1154 * _1154)) + (_1156 * _1156)) / (_1151 + 9.9999997473787516355514526367188e-06);
        float _3710 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _1181 = _1180 * 2.0;
        float _1185 = (1.0 - _1180) / (_1180 + 1.0);
        float _3721 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1186 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
        float _1195 = ((((1.0 - _1186) * (_1181 + 2.0)) * exp2(log2(isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0))) * (_1181 + 1.0))) + _1186) * _1151;
        float _1196 = _1119 * 0.5;
        float _1197 = _1129 * 0.5;
        float _1198 = _1139 * 0.5;
        float _1199 = dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198));
        float _1204 = (_1199 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1199);
        float _1212 = (dot(vec3(_387, _388, _389), vec3(_1204 * _1196, _1204 * _1197, _1204 * _1198)) + 1.0) * 0.5;
        float _3732 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1221 = sqrt(((_1197 * _1197) + (_1196 * _1196)) + (_1198 * _1198)) / (_1152 + 9.9999997473787516355514526367188e-06);
        float _3743 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _3743 : (isnan(_3743) ? 1.0 : min(_3743, 1.0));
        float _1223 = _1222 * 2.0;
        float _1227 = (1.0 - _1222) / (_1222 + 1.0);
        float _3754 = isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0));
        float _1228 = isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0));
        float _1237 = ((((1.0 - _1228) * (_1223 + 2.0)) * exp2(log2(isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * (_1223 + 1.0))) + _1228) * _1152;
        float _1238 = _1120 * 0.5;
        float _1239 = _1130 * 0.5;
        float _1240 = _1140 * 0.5;
        float _1241 = dot(vec3(_1238, _1239, _1240), vec3(_1238, _1239, _1240));
        float _1246 = (_1241 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1241);
        float _1254 = (dot(vec3(_387, _388, _389), vec3(_1246 * _1238, _1246 * _1239, _1246 * _1240)) + 1.0) * 0.5;
        float _3765 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1263 = sqrt(((_1239 * _1239) + (_1238 * _1238)) + (_1240 * _1240)) / (_1153 + 9.9999997473787516355514526367188e-06);
        float _3776 = isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0));
        float _1264 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _1265 = _1264 * 2.0;
        float _1269 = (1.0 - _1264) / (_1264 + 1.0);
        float _3787 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1270 = isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0));
        float _1279 = ((((1.0 - _1270) * (_1265 + 2.0)) * exp2(log2(isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0))) * (_1265 + 1.0))) + _1270) * _1153;
        _1287 = _1120;
        _1288 = _1119;
        _1289 = _1118;
        _1290 = _1130;
        _1291 = _1129;
        _1292 = _1128;
        _1293 = _1140;
        _1294 = _1139;
        _1295 = _1138;
        _1296 = _1153;
        _1297 = _1152;
        _1298 = _1151;
        _1299 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0)));
        _1300 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0)));
        _1301 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)));
    }
    else
    {
        _1287 = _975;
        _1288 = _975;
        _1289 = _975;
        _1290 = _975;
        _1291 = _975;
        _1292 = _975;
        _1293 = _975;
        _1294 = _975;
        _1295 = _975;
        _1296 = _975;
        _1297 = _975;
        _1298 = _975;
        _1299 = 0.0;
        _1300 = 0.0;
        _1301 = 0.0;
    }
    float _1311 = (cbModelParam._m0[1u].x * (_1299 - _987)) + _987;
    float _1312 = (cbModelParam._m0[1u].x * (_1300 - _988)) + _988;
    float _1313 = (cbModelParam._m0[1u].x * (_1301 - _989)) + _989;
    float _1334 = fma(_1313, cbSceneParam._m0[89u].z, fma(_1312, cbSceneParam._m0[89u].y, _1311 * cbSceneParam._m0[89u].x));
    float _1337 = fma(_1313, cbSceneParam._m0[90u].z, fma(_1312, cbSceneParam._m0[90u].y, _1311 * cbSceneParam._m0[90u].x));
    float _1340 = fma(_1313, cbSceneParam._m0[91u].z, fma(_1312, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1311));
    float _1355 = _579 * 0.5;
    float _1356 = _580 * 0.5;
    float _1357 = _581 * 0.5;
    float _1358 = dot(vec4(_1355, _1356, _1357, 1.0), vec4(_1289, _1292, _1295, _1298));
    float _1361 = dot(vec4(_1355, _1356, _1357, 1.0), vec4(_1288, _1291, _1294, _1297));
    float _1364 = dot(vec4(_1355, _1356, _1357, 1.0), vec4(_1287, _1290, _1293, _1296));
    float _1398;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1371 = dot(vec4(_1355, _1356, _1357, 1.0), vec4(_974, _978, _981, _984));
        float _1375 = dot(vec4(_1355, _1356, _1357, 1.0), vec4(_976, _979, _982, _985));
        float _1379 = dot(vec4(_1355, _1356, _1357, 1.0), vec4(_977, _980, _983, _986));
        float _1386 = dot(vec4(cbModelParam._m0[39u]), vec4(_1355, _1356, _1357, 1.0));
        _1398 = dot(vec3(isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)), isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0)), isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1386) ? 0.0 : (isnan(0.0) ? _1386 : max(0.0, _1386))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1398 = 1.0;
    }
    float _1409;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1400 = dot(vec4(cbModelParam._m0[40u]), vec4(_1355, _1356, _1357, 1.0));
        _1409 = dot(vec3(isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)), isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0)), isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1400) ? 0.0 : (isnan(0.0) ? _1400 : max(0.0, _1400))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1409 = 1.0;
    }
    float _1413 = (_1409 * cbModelParam._m0[1u].x) + (_1398 * (1.0 - cbModelParam._m0[1u].x));
    float _1423 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _390);
    float _1424 = isnan(_1423) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1423 : min(cbModelParam._m0[25u].z, _1423));
    float _1506;
    float _1508;
    float _1510;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1473 = fma(_643, cbModelParam._m0[13u].z, fma(_639, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _635)) + cbModelParam._m0[13u].w;
        float _1477 = fma(_643, cbModelParam._m0[14u].z, fma(_639, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _635)) + cbModelParam._m0[14u].w;
        float _1481 = fma(_643, cbModelParam._m0[15u].z, fma(_639, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _635)) + cbModelParam._m0[15u].w;
        float _1484 = fma(_581, cbModelParam._m0[13u].z, fma(_580, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _579));
        float _1487 = fma(_581, cbModelParam._m0[14u].z, fma(_580, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _579));
        float _1490 = fma(_581, cbModelParam._m0[15u].z, fma(_580, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _579));
        float _1518;
        if (_1484 > 0.0)
        {
            _1518 = abs((1.0 - _1473) / _1484);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1484 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1473 + 1.0) / _1484);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1518 = frontier_phi_19_17_ladder;
        }
        float _1746;
        if (_1487 > 0.0)
        {
            _1746 = abs((1.0 - _1477) / _1487);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1487 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1477 + 1.0) / _1487);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1746 = frontier_phi_28_24_ladder;
        }
        float _2003;
        if (_1490 > 0.0)
        {
            _2003 = abs((1.0 - _1481) / _1490);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1490 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1481 + 1.0) / _1490);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2003 = frontier_phi_40_35_ladder;
        }
        float _2005 = isnan(_1746) ? _1518 : (isnan(_1518) ? _1746 : min(_1518, _1746));
        float _2006 = isnan(_2003) ? _2005 : (isnan(_2005) ? _2003 : min(_2005, _2003));
        float _2010 = (_2006 * _1484) + _1473;
        float _2011 = (_2006 * _1487) + _1477;
        float _2012 = (_2006 * _1490) + _1481;
        float _2013 = _2006 * 9.9999997473787516355514526367188e-05;
        float _2015 = (-1.0) - _2013;
        float _2017 = _2013 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2012 > _2017) || ((_2012 < _2015) || ((_2011 > _2017) || ((_2011 < _2015) || ((_2010 < _2015) || (_2010 > _2017))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2140 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2012, cbModelParam._m0[9u].z, fma(_2011, cbModelParam._m0[9u].y, _2010 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2012, cbModelParam._m0[10u].z, fma(_2011, cbModelParam._m0[10u].y, _2010 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2012, cbModelParam._m0[11u].z, fma(_2011, cbModelParam._m0[11u].y, _2010 * cbModelParam._m0[11u].x))), _1424);
            frontier_phi_18_40_ladder = _2140.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2140.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2140.x * cbModelParam._m0[1u].y;
        }
        _1506 = frontier_phi_18_40_ladder_2;
        _1508 = frontier_phi_18_40_ladder_1;
        _1510 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1494 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_579, _580, _581), _1424);
        _1506 = _1494.x * cbModelParam._m0[1u].y;
        _1508 = _1494.y * cbModelParam._m0[1u].y;
        _1510 = _1494.z * cbModelParam._m0[1u].y;
    }
    float _1514 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _390);
    float _1515 = isnan(_1514) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1514 : min(cbModelParam._m0[25u].w, _1514));
    float _1608;
    float _1610;
    float _1612;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1572 = fma(_643, cbModelParam._m0[21u].z, fma(_639, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _635)) + cbModelParam._m0[21u].w;
        float _1576 = fma(_643, cbModelParam._m0[22u].z, fma(_639, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _635)) + cbModelParam._m0[22u].w;
        float _1580 = fma(_643, cbModelParam._m0[23u].z, fma(_639, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _635)) + cbModelParam._m0[23u].w;
        float _1583 = fma(_581, cbModelParam._m0[21u].z, fma(_580, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _579));
        float _1586 = fma(_581, cbModelParam._m0[22u].z, fma(_580, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _579));
        float _1589 = fma(_581, cbModelParam._m0[23u].z, fma(_580, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _579));
        float _1751;
        if (_1583 > 0.0)
        {
            _1751 = abs((1.0 - _1572) / _1583);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1583 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1572 + 1.0) / _1583);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1751 = frontier_phi_30_26_ladder;
        }
        float _2030;
        if (_1586 > 0.0)
        {
            _2030 = abs((1.0 - _1576) / _1586);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1586 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1576 + 1.0) / _1586);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2030 = frontier_phi_42_37_ladder;
        }
        float _2243;
        if (_1589 > 0.0)
        {
            _2243 = abs((1.0 - _1580) / _1589);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1589 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1580 + 1.0) / _1589);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2243 = frontier_phi_51_48_ladder;
        }
        float _2245 = isnan(_2030) ? _1751 : (isnan(_1751) ? _2030 : min(_1751, _2030));
        float _2246 = isnan(_2243) ? _2245 : (isnan(_2245) ? _2243 : min(_2245, _2243));
        float _2250 = (_2246 * _1583) + _1572;
        float _2251 = (_2246 * _1586) + _1576;
        float _2252 = (_2246 * _1589) + _1580;
        float _2253 = _2246 * 9.9999997473787516355514526367188e-05;
        float _2254 = (-1.0) - _2253;
        float _2256 = _2253 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2252 > _2256) || ((_2252 < _2254) || ((_2251 > _2256) || ((_2251 < _2254) || ((_2250 < _2254) || (_2250 > _2256))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2450 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2252, cbModelParam._m0[17u].z, fma(_2251, cbModelParam._m0[17u].y, _2250 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2252, cbModelParam._m0[18u].z, fma(_2251, cbModelParam._m0[18u].y, _2250 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2252, cbModelParam._m0[19u].z, fma(_2251, cbModelParam._m0[19u].y, _2250 * cbModelParam._m0[19u].x))), _1515);
            frontier_phi_27_51_ladder = _2450.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2450.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2450.x * cbModelParam._m0[1u].z;
        }
        _1608 = frontier_phi_27_51_ladder_2;
        _1610 = frontier_phi_27_51_ladder_1;
        _1612 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1592 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_579, _580, _581), _1515);
        _1608 = _1592.x * cbModelParam._m0[1u].z;
        _1610 = _1592.y * cbModelParam._m0[1u].z;
        _1612 = _1592.z * cbModelParam._m0[1u].z;
    }
    float _1625 = (((_606 * _556) + _607) * _571) * ((cbModelParam._m0[1u].w * (_1608 - _1506)) + _1506);
    float _1627 = (((_606 * _558) + _607) * _571) * ((cbModelParam._m0[1u].w * (_1610 - _1508)) + _1508);
    float _1629 = (((_606 * _559) + _607) * _571) * ((cbModelParam._m0[1u].w * (_1612 - _1510)) + _1510);
    float _1632 = fma(_1629, cbSceneParam._m0[89u].z, fma(_1627, cbSceneParam._m0[89u].y, _1625 * cbSceneParam._m0[89u].x));
    float _1635 = fma(_1629, cbSceneParam._m0[90u].z, fma(_1627, cbSceneParam._m0[90u].y, _1625 * cbSceneParam._m0[90u].x));
    float _1638 = fma(_1629, cbSceneParam._m0[91u].z, fma(_1627, cbSceneParam._m0[91u].y, _1625 * cbSceneParam._m0[91u].x));
    vec4 _1646 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_490, _491));
    float _1648 = _1646.w;
    float _1660 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1648);
    float _1661 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1648);
    float _1662 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1648);
    uvec4 _1666 = floatBitsToUint(cbInstanceData._m0[_530 + 5u]);
    uint _1668 = _1666.x * 14u;
    uint _1669 = _1668 + 13u;
    float _1676 = _571 + (-1.0);
    float _1681 = (cbLight._m0[_1669].x * _1676) + 1.0;
    float _1682 = (cbLight._m0[_1669].y * _1676) + 1.0;
    float _1683 = (cbLight._m0[_1669].z * _1676) + 1.0;
    float _1684 = (cbLight._m0[_1669].w * _1676) + 1.0;
    uint _1685 = _1668 + 5u;
    float _1691 = isnan(1.0) ? _1682 : (isnan(_1682) ? 1.0 : min(_1682, 1.0));
    uint _1695 = _1668 + 4u;
    float _1704 = isnan(1.0) ? _1681 : (isnan(_1681) ? 1.0 : min(_1681, 1.0));
    uint _1708 = _1668 | 1u;
    float _1719 = dot(vec3(cbLight._m0[_1668].xyz), vec3(_387, _388, _389));
    float _1722 = dot(vec3(cbLight._m0[_1708].xyz), vec3(_387, _388, _389));
    float _3923 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
    float _3934 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
    float _1727 = (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0))) * 0.3183098733425140380859375;
    float _1729 = (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * 0.3183098733425140380859375;
    float _1736 = ((cbLight._m0[_1685].x * _1691) * _1729) + (((cbLight._m0[_1695].x * _1660) * _1704) * _1727);
    float _1737 = ((_1691 * cbLight._m0[_1685].y) * _1729) + (((cbLight._m0[_1695].y * _1661) * _1704) * _1727);
    float _1738 = ((_1691 * cbLight._m0[_1685].z) * _1729) + (((cbLight._m0[_1695].z * _1662) * _1704) * _1727);
    uvec4 _1743 = floatBitsToUint(cbLight._m0[_1668 + 12u]);
    bool _1745 = _1743.x == 0u;
    float _1756;
    float _1758;
    float _1760;
    if (_1745)
    {
        _1756 = _1736;
        _1758 = _1737;
        _1760 = _1738;
    }
    else
    {
        uint _1764 = _1668 + 6u;
        float _1780 = (dot(vec3(cbLight._m0[_1668 + 2u].xyz), vec3(_387, _388, _389)) * 0.5) + 0.5;
        float _1781 = _1780 * _1780;
        float _3945 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
        float _1782 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
        float _1783 = isnan(1.0) ? _1683 : (isnan(_1683) ? 1.0 : min(_1683, 1.0));
        _1756 = (((cbLight._m0[_1764].x * 0.3183098733425140380859375) * _1782) * _1783) + _1736;
        _1758 = (((cbLight._m0[_1764].y * 0.3183098733425140380859375) * _1782) * _1783) + _1737;
        _1760 = (((cbLight._m0[_1764].z * 0.3183098733425140380859375) * _1782) * _1783) + _1738;
    }
    bool _1763 = _1743.y == 0u;
    float _1801;
    float _1803;
    float _1805;
    if (_1763)
    {
        _1801 = _1756;
        _1803 = _1758;
        _1805 = _1760;
    }
    else
    {
        uint _1974 = _1668 + 7u;
        float _1990 = (dot(vec3(cbLight._m0[_1668 + 3u].xyz), vec3(_387, _388, _389)) * 0.5) + 0.5;
        float _1991 = _1990 * _1990;
        float _3961 = isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0));
        float _1992 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
        float _1993 = isnan(1.0) ? _1684 : (isnan(_1684) ? 1.0 : min(_1684, 1.0));
        _1801 = (((cbLight._m0[_1974].x * 0.3183098733425140380859375) * _1992) * _1993) + _1756;
        _1803 = (((cbLight._m0[_1974].y * 0.3183098733425140380859375) * _1992) * _1993) + _1758;
        _1805 = (((cbLight._m0[_1974].z * 0.3183098733425140380859375) * _1992) * _1993) + _1760;
    }
    uint _1808 = _1668 + 8u;
    float _1821 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1668].w)) * _390) * 0.949999988079071044921875);
    float _1822 = _1821 * _1821;
    float _1823 = cbLight._m0[_1668].x + _469;
    float _1824 = cbLight._m0[_1668].y + _470;
    float _1825 = cbLight._m0[_1668].z + _471;
    float _1829 = inversesqrt(dot(vec3(_1823, _1824, _1825), vec3(_1823, _1824, _1825)));
    float _1830 = _1829 * _1823;
    float _1831 = _1829 * _1824;
    float _1832 = _1829 * _1825;
    float _1833 = dot(vec3(_387, _388, _389), vec3(cbLight._m0[_1668].xyz));
    float _3977 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
    float _1836 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
    float _3988 = isnan(0.0) ? _572 : (isnan(_572) ? 0.0 : max(_572, 0.0));
    float _1837 = isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0));
    float _1838 = dot(vec3(_387, _388, _389), vec3(_1830, _1831, _1832));
    float _3999 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
    float _1841 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
    float _1842 = dot(vec3(cbLight._m0[_1668].xyz), vec3(_1830, _1831, _1832));
    float _4010 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
    float _1846 = _1822 * _1822;
    float _1850 = ((_1841 * _1841) * (_1846 + (-1.0))) + 1.0;
    float _1858 = exp2(log2(1.0 - (isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0)))) * 5.0);
    float _1859 = 0.959999978542327880859375 - _553;
    float _1861 = 0.959999978542327880859375 - _554;
    float _1862 = 0.959999978542327880859375 - _555;
    float _1869 = 1.0 - _1822;
    float _1880 = (0.5 / (((_1837 * ((_1836 * _1869) + _1822)) + 9.9999999392252902907785028219223e-09) + (((_1837 * _1869) + _1822) * _1836))) * _1836;
    float _4021 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
    float _1882 = (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * (_1846 / ((_1850 * _1850) * 3.141590118408203125));
    uint _1896 = _1668 + 9u;
    float _1907 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1708].w)) * _390) * 0.949999988079071044921875);
    float _1908 = _1907 * _1907;
    float _1909 = cbLight._m0[_1708].x + _469;
    float _1910 = cbLight._m0[_1708].y + _470;
    float _1911 = cbLight._m0[_1708].z + _471;
    float _1915 = inversesqrt(dot(vec3(_1909, _1910, _1911), vec3(_1909, _1910, _1911)));
    float _1916 = _1915 * _1909;
    float _1917 = _1915 * _1910;
    float _1918 = _1915 * _1911;
    float _1919 = dot(vec3(_387, _388, _389), vec3(cbLight._m0[_1708].xyz));
    float _4032 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
    float _1922 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
    float _1923 = dot(vec3(_387, _388, _389), vec3(_1916, _1917, _1918));
    float _4043 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
    float _1926 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
    float _1927 = dot(vec3(cbLight._m0[_1708].xyz), vec3(_1916, _1917, _1918));
    float _4054 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
    float _1931 = _1908 * _1908;
    float _1935 = ((_1926 * _1926) * (_1931 + (-1.0))) + 1.0;
    float _1942 = exp2(log2(1.0 - (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0)))) * 5.0);
    float _1949 = 1.0 - _1908;
    float _1959 = (0.5 / (((_1837 * ((_1922 * _1949) + _1908)) + 9.9999999392252902907785028219223e-09) + (((_1837 * _1949) + _1908) * _1922))) * _1922;
    float _4065 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
    float _1961 = (isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * (_1931 / ((_1935 * _1935) * 3.141590118408203125));
    float _1971 = (((((_1942 * _1859) + _556) * cbLight._m0[_1896].x) * _1961) * _1691) + ((((cbLight._m0[_1808].x * _1660) * ((_1858 * _1859) + _556)) * _1882) * _1704);
    float _1972 = (((((_1942 * _1861) + _558) * cbLight._m0[_1896].y) * _1961) * _1691) + ((((cbLight._m0[_1808].y * _1661) * ((_1858 * _1861) + _558)) * _1882) * _1704);
    float _1973 = (((((_1942 * _1862) + _559) * cbLight._m0[_1896].z) * _1961) * _1691) + ((((cbLight._m0[_1808].z * _1662) * ((_1858 * _1862) + _559)) * _1882) * _1704);
    float _2035;
    float _2037;
    float _2039;
    if (_1745)
    {
        _2035 = _1971;
        _2037 = _1972;
        _2039 = _1973;
    }
    else
    {
        uint _2041 = _1668 + 2u;
        uint _2045 = _1668 + 10u;
        float _2059 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2041].w)) * _390) * 0.949999988079071044921875);
        float _2060 = _2059 * _2059;
        float _2061 = cbLight._m0[_2041].x + _469;
        float _2062 = cbLight._m0[_2041].y + _470;
        float _2063 = cbLight._m0[_2041].z + _471;
        float _2067 = inversesqrt(dot(vec3(_2061, _2062, _2063), vec3(_2061, _2062, _2063)));
        float _2068 = _2067 * _2061;
        float _2069 = _2067 * _2062;
        float _2070 = _2067 * _2063;
        float _2071 = dot(vec3(_387, _388, _389), vec3(cbLight._m0[_2041].xyz));
        float _4076 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
        float _2074 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
        float _2075 = dot(vec3(_387, _388, _389), vec3(_2068, _2069, _2070));
        float _4087 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
        float _2078 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
        float _2079 = dot(vec3(cbLight._m0[_2041].xyz), vec3(_2068, _2069, _2070));
        float _4098 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
        float _2083 = _2060 * _2060;
        float _2087 = ((_2078 * _2078) * (_2083 + (-1.0))) + 1.0;
        float _2094 = exp2(log2(1.0 - (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0)))) * 5.0);
        float _2101 = 1.0 - _2060;
        float _2111 = (0.5 / (((_1837 * ((_2074 * _2101) + _2060)) + 9.9999999392252902907785028219223e-09) + (((_1837 * _2101) + _2060) * _2074))) * _2074;
        float _4109 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
        float _2113 = (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * (_2083 / ((_2087 * _2087) * 3.141590118408203125));
        float _2114 = isnan(1.0) ? _1683 : (isnan(_1683) ? 1.0 : min(_1683, 1.0));
        _2035 = (((((_2094 * _1859) + _556) * cbLight._m0[_2045].x) * _2113) * _2114) + _1971;
        _2037 = (((((_2094 * _1861) + _558) * cbLight._m0[_2045].y) * _2113) * _2114) + _1972;
        _2039 = (((((_2094 * _1862) + _559) * cbLight._m0[_2045].z) * _2113) * _2114) + _1973;
    }
    float _2149;
    float _2151;
    float _2153;
    if (_1763)
    {
        _2149 = _2035;
        _2151 = _2037;
        _2153 = _2039;
    }
    else
    {
        uint _2160 = _1668 + 3u;
        uint _2164 = _1668 + 11u;
        float _2178 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2160].w)) * _390) * 0.949999988079071044921875);
        float _2179 = _2178 * _2178;
        float _2180 = cbLight._m0[_2160].x + _469;
        float _2181 = cbLight._m0[_2160].y + _470;
        float _2182 = cbLight._m0[_2160].z + _471;
        float _2186 = inversesqrt(dot(vec3(_2180, _2181, _2182), vec3(_2180, _2181, _2182)));
        float _2187 = _2186 * _2180;
        float _2188 = _2186 * _2181;
        float _2189 = _2186 * _2182;
        float _2190 = dot(vec3(_387, _388, _389), vec3(cbLight._m0[_2160].xyz));
        float _4125 = isnan(0.0) ? _2190 : (isnan(_2190) ? 0.0 : max(_2190, 0.0));
        float _2193 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
        float _2194 = dot(vec3(_387, _388, _389), vec3(_2187, _2188, _2189));
        float _4136 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
        float _2197 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
        float _2198 = dot(vec3(cbLight._m0[_2160].xyz), vec3(_2187, _2188, _2189));
        float _4147 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
        float _2202 = _2179 * _2179;
        float _2206 = ((_2197 * _2197) * (_2202 + (-1.0))) + 1.0;
        float _2213 = exp2(log2(1.0 - (isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0)))) * 5.0);
        float _2220 = 1.0 - _2179;
        float _2230 = (0.5 / (((_1837 * ((_2193 * _2220) + _2179)) + 9.9999999392252902907785028219223e-09) + (((_1837 * _2220) + _2179) * _2193))) * _2193;
        float _4158 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
        float _2232 = (isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0))) * (_2202 / ((_2206 * _2206) * 3.141590118408203125));
        float _2233 = isnan(1.0) ? _1684 : (isnan(_1684) ? 1.0 : min(_1684, 1.0));
        _2149 = (((((_2213 * _1859) + _556) * cbLight._m0[_2164].x) * _2232) * _2233) + _2035;
        _2151 = (((((_2213 * _1861) + _558) * cbLight._m0[_2164].y) * _2232) * _2233) + _2037;
        _2153 = (((((_2213 * _1862) + _559) * cbLight._m0[_2164].z) * _2232) * _2233) + _2039;
    }
    float _2367;
    float _2369;
    float _2371;
    float _2373;
    float _2375;
    float _2377;
    if (_1666.y == 0u)
    {
        float _2308 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2309 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2308;
        float _2310 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2308;
        float _2311 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2308;
        uvec4 _2323 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2324 = _2323.x;
        uint _2335 = uint((float(_2323.y) * floor(float(uint(cbSceneParam._m0[85u].y * _491) / _2324))) + floor(float(uint(cbSceneParam._m0[85u].x * _490) / _2324)));
        float _2345 = (log2(_2311 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2346 = isnan(0.0) ? _2345 : (isnan(_2345) ? 0.0 : max(_2345, 0.0));
        uint _2349 = uint(isnan(14.0) ? _2346 : (isnan(_2346) ? 14.0 : min(_2346, 14.0)));
        uvec4 _2354 = texelFetch(g_lightClusterGridBuffer, int(((_2349 << 2u) + (_2335 << 6u)) >> 2u));
        uint _2355 = _2354.x;
        uint _2356 = _2323.z;
        float _2455;
        float _2457;
        float _2459;
        float _2461;
        float _2463;
        float _2465;
        if (((((1u << ((_2356 >> 4u) & 15u)) + 4294967295u) & _2355) == 0u) || ((_2356 & 240u) == 0u))
        {
            _2455 = 0.0;
            _2457 = 0.0;
            _2459 = 0.0;
            _2461 = 0.0;
            _2463 = 0.0;
            _2465 = 0.0;
        }
        else
        {
            float _2456;
            float _2458;
            float _2460;
            float _2462;
            float _2464;
            float _2466;
            float _2607 = 0.0;
            float _2608 = 0.0;
            float _2609 = 0.0;
            float _2610 = 0.0;
            float _2611 = 0.0;
            float _2612 = 0.0;
            uint _2613 = 0u;
            uint _2622;
            bool _2623;
            for (;;)
            {
                _2622 = texelFetch(g_lightClassification, int((((_2349 << 5u) + (_2335 << 9u)) + (_2613 << 2u)) >> 2u)).x;
                _2623 = _2622 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2623)
                {
                    frontier_phi_68_pred = _2609;
                    frontier_phi_68_pred_1 = _2612;
                    frontier_phi_68_pred_2 = _2611;
                    frontier_phi_68_pred_3 = _2610;
                    frontier_phi_68_pred_4 = _2608;
                    frontier_phi_68_pred_5 = _2607;
                }
                else
                {
                    float _2752;
                    float _2753;
                    float _2754;
                    float _2755;
                    float _2756;
                    float _2757;
                    uint _2758;
                    _2752 = _2607;
                    _2753 = _2608;
                    _2754 = _2609;
                    _2755 = _2610;
                    _2756 = _2611;
                    _2757 = _2612;
                    _2758 = _2622;
                    float _2679;
                    float _2680;
                    float _2681;
                    float _2682;
                    float _2683;
                    float _2684;
                    for (;;)
                    {
                        uint _2762 = uint(findLSB(_2758)) + (_2613 << 5u);
                        uint _2759 = (_2758 + 4294967295u) & _2758;
                        uint _2764 = _2762 * 48u;
                        vec4 _2778 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2764)).x, texelFetch(g_PointLightRenderingBuffer, int(_2764 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2764 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2764 + 3u)).x));
                        uint _2784 = (_2762 * 48u) + 4u;
                        vec4 _2797 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2784)).x, texelFetch(g_PointLightRenderingBuffer, int(_2784 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2784 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2784 + 3u)).x));
                        uint _2803 = (_2762 * 48u) + 8u;
                        vec3 _2814 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2803)).x, texelFetch(g_PointLightRenderingBuffer, int(_2803 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2803 + 2u)).x));
                        float _2818 = _2778.x - _2309;
                        float _2819 = _2778.y - _2310;
                        float _2820 = _2778.z - _2311;
                        float _2821 = dot(vec3(_2818, _2819, _2820), vec3(_2818, _2819, _2820));
                        float _2824 = inversesqrt(_2821);
                        float _2825 = _2824 * _2818;
                        float _2826 = _2824 * _2819;
                        float _2827 = _2824 * _2820;
                        float _2828 = dot(vec3(_511, _514, _517), vec3(_2825, _2826, _2827));
                        float _2833 = 1.0 - (_2821 * _2778.w);
                        float _4184 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
                        float _2834 = isnan(1.0) ? _4184 : (isnan(_4184) ? 1.0 : min(_4184, 1.0));
                        float _2835 = sqrt(_2821) * _2797.w;
                        float _2838 = 1.39999997615814208984375 / (_2835 + 1.39999997615814208984375);
                        float _2839 = _2838 * _2838;
                        float _2842 = ((1.0 - _2839) * _2828) + _2839;
                        float _2845 = _2835 * _2835;
                        float _2849 = ((isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0))) * _2834) / ((_2845 * 0.699999988079071044921875) + 1.0);
                        float _2853 = (-0.0) - _2309;
                        float _2854 = (-0.0) - _2310;
                        float _2855 = (-0.0) - _2311;
                        float _2859 = inversesqrt(dot(vec3(_2853, _2854, _2855), vec3(_2853, _2854, _2855)));
                        float _2860 = _2859 * _2853;
                        float _2861 = _2859 * _2854;
                        float _2862 = _2859 * _2855;
                        float _2870 = exp2(log2(1.0 / ((_2845 * 3.5) + 5.0)) * 0.25);
                        float _2871 = 1.0 - _587;
                        float _2878 = sqrt(1.0 - ((1.0 - (_2871 * _2871)) * (1.0 - (_2870 * _2870))));
                        float _2879 = _2878 * _2878;
                        float _2880 = _2879 * _2879;
                        float _2881 = _2860 + _2825;
                        float _2882 = _2861 + _2826;
                        float _2883 = _2862 + _2827;
                        float _2887 = inversesqrt(dot(vec3(_2881, _2882, _2883), vec3(_2881, _2882, _2883)));
                        float _2891 = dot(vec3(_511, _514, _517), vec3(_2860, _2861, _2862));
                        float _4200 = isnan(0.0) ? _2891 : (isnan(_2891) ? 0.0 : max(_2891, 0.0));
                        float _2894 = isnan(1.0) ? _4200 : (isnan(_4200) ? 1.0 : min(_4200, 1.0));
                        float _2895 = dot(vec3(_511, _514, _517), vec3(_2887 * _2881, _2887 * _2882, _2887 * _2883));
                        float _4211 = isnan(0.0) ? _2895 : (isnan(_2895) ? 0.0 : max(_2895, 0.0));
                        float _2898 = isnan(1.0) ? _4211 : (isnan(_4211) ? 1.0 : min(_4211, 1.0));
                        float _2902 = ((_2898 * _2898) * (_2880 + (-1.0))) + 1.0;
                        float _2903 = _2838 * _2879;
                        float _2904 = _2903 * _2903;
                        float _2907 = ((1.0 - _2904) * _2828) + _2904;
                        float _4222 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0));
                        float _2908 = isnan(1.0) ? _4222 : (isnan(_4222) ? 1.0 : min(_4222, 1.0));
                        float _2909 = 1.0 - _2879;
                        float _2919 = (0.5 / (((_2908 * ((_2894 * _2909) + _2879)) + 9.9999999392252902907785028219223e-09) + (((_2908 * _2909) + _2879) * _2894))) * _2908;
                        float _4233 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0));
                        float _2930 = (((_2880 * 3.1415927410125732421875) * (isnan(1.0) ? _4233 : (isnan(_4233) ? 1.0 : min(_4233, 1.0)))) / ((_2902 * _2902) * ((_2845 * 2.1991131305694580078125) + 3.141590118408203125))) * _2834;
                        _2682 = (_2849 * _2797.x) + _2755;
                        _2683 = (_2849 * _2797.y) + _2756;
                        _2684 = (_2849 * _2797.z) + _2757;
                        _2679 = (_2930 * _2814.x) + _2752;
                        _2680 = (_2930 * _2814.y) + _2753;
                        _2681 = (_2930 * _2814.z) + _2754;
                        if (_2759 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2752 = _2679;
                            _2753 = _2680;
                            _2754 = _2681;
                            _2755 = _2682;
                            _2756 = _2683;
                            _2757 = _2684;
                            _2758 = _2759;
                        }
                    }
                    frontier_phi_68_pred = _2681;
                    frontier_phi_68_pred_1 = _2684;
                    frontier_phi_68_pred_2 = _2683;
                    frontier_phi_68_pred_3 = _2682;
                    frontier_phi_68_pred_4 = _2680;
                    frontier_phi_68_pred_5 = _2679;
                }
                _2460 = frontier_phi_68_pred;
                _2466 = frontier_phi_68_pred_1;
                _2464 = frontier_phi_68_pred_2;
                _2462 = frontier_phi_68_pred_3;
                _2458 = frontier_phi_68_pred_4;
                _2456 = frontier_phi_68_pred_5;
                uint _2614 = _2613 + 1u;
                if (_2614 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2607 = _2456;
                    _2608 = _2458;
                    _2609 = _2460;
                    _2610 = _2462;
                    _2611 = _2464;
                    _2612 = _2466;
                    _2613 = _2614;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2455 = _2456;
            _2457 = _2458;
            _2459 = _2460;
            _2461 = _2462;
            _2463 = _2464;
            _2465 = _2466;
        }
        uvec4 _2469 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2470 = _2469.z;
        uint _2472 = (_2470 >> 8u) & 15u;
        float _2575;
        float _2577;
        float _2579;
        float _2581;
        float _2583;
        float _2585;
        if (((4294967295u << _2472) & _2355) == 0u)
        {
            _2575 = _2455;
            _2577 = _2457;
            _2579 = _2459;
            _2581 = _2461;
            _2583 = _2463;
            _2585 = _2465;
        }
        else
        {
            float _2600 = inversesqrt(dot(vec3(_2309, _2310, _2311), vec3(_2309, _2310, _2311)));
            float _2601 = _2600 * _2309;
            float _2602 = _2600 * _2310;
            float _2603 = _2600 * _2311;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2472 < ((_2470 >> 12u) & 15u))
            {
                float _2576;
                float _2578;
                float _2580;
                float _2582;
                float _2584;
                float _2586;
                float _2735 = _2455;
                float _2736 = _2457;
                float _2737 = _2459;
                float _2738 = _2461;
                float _2739 = _2463;
                float _2740 = _2465;
                uint _2741 = _2472;
                uint _2750;
                bool _2751;
                for (;;)
                {
                    _2750 = texelFetch(g_lightClassification, int((((_2349 << 5u) + (_2335 << 9u)) + (_2741 << 2u)) >> 2u)).x;
                    _2751 = _2750 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2751)
                    {
                        frontier_phi_79_pred = _2740;
                        frontier_phi_79_pred_1 = _2739;
                        frontier_phi_79_pred_2 = _2738;
                        frontier_phi_79_pred_3 = _2737;
                        frontier_phi_79_pred_4 = _2736;
                        frontier_phi_79_pred_5 = _2735;
                    }
                    else
                    {
                        float _2944;
                        float _2945;
                        float _2946;
                        float _2947;
                        float _2948;
                        float _2949;
                        float _3240;
                        float _3241;
                        float _3242;
                        float _3243;
                        float _3244;
                        float _3245;
                        float _2957 = _2735;
                        float _2958 = _2736;
                        float _2959 = _2737;
                        float _2960 = _2738;
                        float _2961 = _2739;
                        float _2962 = _2740;
                        uint _2963 = _2750;
                        uint _2964;
                        vec4 _2989;
                        float _2990;
                        vec4 _3005;
                        vec3 _3017;
                        vec4 _3033;
                        vec4 _3049;
                        float _3096;
                        bool _3097;
                        for (;;)
                        {
                            uint _2974 = ((_2741 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2963));
                            _2964 = (_2963 + 4294967295u) & _2963;
                            uint _2976 = _2974 * 40u;
                            _2989 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2976)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 3u)).x));
                            _2990 = _2989.w;
                            uint _2992 = (_2974 * 40u) + 4u;
                            _3005 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2992)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2992 + 3u)).x));
                            uint _3007 = (_2974 * 40u) + 8u;
                            _3017 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3007)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3007 + 2u)).x));
                            uint _3020 = (_2974 * 40u) + 16u;
                            _3033 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3020)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 3u)).x));
                            uint _3036 = (_2974 * 40u) + 20u;
                            _3049 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3036)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3036 + 3u)).x));
                            uint _3052 = (_2974 * 40u) + 24u;
                            vec4 _3065 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3052)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3052 + 3u)).x));
                            uint _3071 = (_2974 * 40u) + 28u;
                            vec4 _3084 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3071)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 3u)).x));
                            _3096 = fma(_2311, _3084.z, fma(_2310, _3084.y, _3084.x * _2309)) + _3084.w;
                            _3097 = !((fma(_2311, _3065.z, fma(_2310, _3065.y, _3065.x * _2309)) + _3065.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3097)
                            {
                                float _3124 = _2989.x - _2309;
                                float _3125 = _2989.y - _2310;
                                float _3126 = _2989.z - _2311;
                                float _3127 = dot(vec3(_3124, _3125, _3126), vec3(_3124, _3125, _3126));
                                float _3130 = inversesqrt(_3127);
                                float _3131 = _3130 * _3124;
                                float _3132 = _3130 * _3125;
                                float _3133 = _3130 * _3126;
                                float _3137 = 1.0 - (_3127 / (_2990 * _2990));
                                float _4244 = isnan(0.0) ? _3137 : (isnan(_3137) ? 0.0 : max(_3137, 0.0));
                                float _3138 = isnan(1.0) ? _4244 : (isnan(_4244) ? 1.0 : min(_4244, 1.0));
                                float _3142 = sqrt(_3127) * _3005.w;
                                float _3144 = 1.39999997615814208984375 / (_3142 + 1.39999997615814208984375);
                                float _3145 = _3144 * _3144;
                                float _3148 = ((1.0 - _3145) * dot(vec3(_3131, _3132, _3133), vec3(_511, _514, _517))) + _3145;
                                float _3151 = _3142 * _3142;
                                float _3155 = (fma(_2311, _3033.z, fma(_2310, _3033.y, _3033.x * _2309)) + _3033.w) / _3096;
                                float _3156 = (fma(_2311, _3049.z, fma(_2310, _3049.y, _3049.x * _2309)) + _3049.w) / _3096;
                                float _3160 = 1.0 - dot(vec2(_3155, _3156), vec2(_3155, _3156));
                                float _4260 = isnan(0.0) ? _3160 : (isnan(_3160) ? 0.0 : max(_3160, 0.0));
                                float _3161 = isnan(1.0) ? _4260 : (isnan(_4260) ? 1.0 : min(_4260, 1.0));
                                float _3162 = _3161 * (((isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0))) * _3138) / ((_3151 * 0.699999988079071044921875) + 1.0));
                                float _3174 = exp2(log2(1.0 / ((_3151 * 3.5) + 5.0)) * 0.25);
                                float _3175 = 1.0 - _587;
                                float _3182 = sqrt(1.0 - ((1.0 - (_3175 * _3175)) * (1.0 - (_3174 * _3174))));
                                float _3183 = _3182 * _3182;
                                float _3184 = _3183 * _3183;
                                float _3185 = _3131 - _2601;
                                float _3186 = _3132 - _2602;
                                float _3187 = _3133 - _2603;
                                float _3191 = inversesqrt(dot(vec3(_3185, _3186, _3187), vec3(_3185, _3186, _3187)));
                                float _3195 = dot(vec3(_511, _514, _517), vec3((-0.0) - _2601, (-0.0) - _2602, (-0.0) - _2603));
                                float _4271 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                                float _3198 = isnan(1.0) ? _4271 : (isnan(_4271) ? 1.0 : min(_4271, 1.0));
                                float _3199 = dot(vec3(_511, _514, _517), vec3(_3191 * _3185, _3191 * _3186, _3191 * _3187));
                                float _4282 = isnan(0.0) ? _3199 : (isnan(_3199) ? 0.0 : max(_3199, 0.0));
                                float _3202 = isnan(1.0) ? _4282 : (isnan(_4282) ? 1.0 : min(_4282, 1.0));
                                float _3206 = ((_3202 * _3202) * (_3184 + (-1.0))) + 1.0;
                                float _3207 = _3144 * _3183;
                                float _3208 = _3207 * _3207;
                                float _3214 = ((1.0 - _3208) * dot(vec3(_511, _514, _517), vec3(_3131, _3132, _3133))) + _3208;
                                float _4293 = isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0));
                                float _3215 = isnan(1.0) ? _4293 : (isnan(_4293) ? 1.0 : min(_4293, 1.0));
                                float _3216 = 1.0 - _3183;
                                float _3226 = (0.5 / (((_3215 * ((_3198 * _3216) + _3183)) + 9.9999999392252902907785028219223e-09) + (((_3215 * _3216) + _3183) * _3198))) * _3215;
                                float _4304 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                                float _3236 = (_3161 * _3138) * (((_3184 * 3.1415927410125732421875) * (isnan(1.0) ? _4304 : (isnan(_4304) ? 1.0 : min(_4304, 1.0)))) / ((_3206 * _3206) * ((_3151 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3162 * _3005.z;
                                frontier_phi_85_pred_1 = _3162 * _3005.y;
                                frontier_phi_85_pred_2 = _3162 * _3005.x;
                                frontier_phi_85_pred_3 = _3236 * _3017.z;
                                frontier_phi_85_pred_4 = _3236 * _3017.y;
                                frontier_phi_85_pred_5 = _3236 * _3017.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3245 = frontier_phi_85_pred;
                            _3244 = frontier_phi_85_pred_1;
                            _3243 = frontier_phi_85_pred_2;
                            _3242 = frontier_phi_85_pred_3;
                            _3241 = frontier_phi_85_pred_4;
                            _3240 = frontier_phi_85_pred_5;
                            _2947 = _3243 + _2960;
                            _2948 = _3244 + _2961;
                            _2949 = _3245 + _2962;
                            _2944 = _3240 + _2957;
                            _2945 = _3241 + _2958;
                            _2946 = _3242 + _2959;
                            if (_2964 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2957 = _2944;
                                _2958 = _2945;
                                _2959 = _2946;
                                _2960 = _2947;
                                _2961 = _2948;
                                _2962 = _2949;
                                _2963 = _2964;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2949;
                        frontier_phi_79_pred_1 = _2948;
                        frontier_phi_79_pred_2 = _2947;
                        frontier_phi_79_pred_3 = _2946;
                        frontier_phi_79_pred_4 = _2945;
                        frontier_phi_79_pred_5 = _2944;
                    }
                    _2586 = frontier_phi_79_pred;
                    _2584 = frontier_phi_79_pred_1;
                    _2582 = frontier_phi_79_pred_2;
                    _2580 = frontier_phi_79_pred_3;
                    _2578 = frontier_phi_79_pred_4;
                    _2576 = frontier_phi_79_pred_5;
                    uint _2742 = _2741 + 1u;
                    if (_2742 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2735 = _2576;
                        _2736 = _2578;
                        _2737 = _2580;
                        _2738 = _2582;
                        _2739 = _2584;
                        _2740 = _2586;
                        _2741 = _2742;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2582;
                frontier_phi_60_61_ladder_1 = _2586;
                frontier_phi_60_61_ladder_2 = _2584;
                frontier_phi_60_61_ladder_3 = _2580;
                frontier_phi_60_61_ladder_4 = _2578;
                frontier_phi_60_61_ladder_5 = _2576;
            }
            else
            {
                frontier_phi_60_61_ladder = _2461;
                frontier_phi_60_61_ladder_1 = _2465;
                frontier_phi_60_61_ladder_2 = _2463;
                frontier_phi_60_61_ladder_3 = _2459;
                frontier_phi_60_61_ladder_4 = _2457;
                frontier_phi_60_61_ladder_5 = _2455;
            }
            _2575 = frontier_phi_60_61_ladder_5;
            _2577 = frontier_phi_60_61_ladder_4;
            _2579 = frontier_phi_60_61_ladder_3;
            _2581 = frontier_phi_60_61_ladder;
            _2583 = frontier_phi_60_61_ladder_2;
            _2585 = frontier_phi_60_61_ladder_1;
        }
        float _2590 = isnan(1.0) ? _571 : (isnan(_571) ? 1.0 : min(_571, 1.0));
        _2367 = (_2590 * _2581) + _1801;
        _2369 = (_2590 * _2583) + _1803;
        _2371 = (_2590 * _2585) + _1805;
        _2373 = ((_2575 * _556) * _2590) + _2149;
        _2375 = ((_2577 * _558) * _2590) + _2151;
        _2377 = ((_2579 * _559) * _2590) + _2153;
    }
    else
    {
        _2367 = _1801;
        _2369 = _1803;
        _2371 = _1805;
        _2373 = _2149;
        _2375 = _2151;
        _2377 = _2153;
    }
    float _4320 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _4331 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _4342 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _2394 = ((isnan(1.0) ? _4320 : (isnan(_4320) ? 1.0 : min(_4320, 1.0))) * (_2367 + ((isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0))) * _571))) + ((_2373 + ((isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))) * _1413)) * cbPerFrame._m0[3u].x);
    float _2395 = ((isnan(1.0) ? _4331 : (isnan(_4331) ? 1.0 : min(_4331, 1.0))) * (_2369 + ((isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0))) * _571))) + ((_2375 + ((isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0))) * _1413)) * cbPerFrame._m0[3u].x);
    float _2396 = ((isnan(1.0) ? _4342 : (isnan(_4342) ? 1.0 : min(_4342, 1.0))) * (_2371 + ((isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0))) * _571))) + ((_2377 + ((isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0))) * _1413)) * cbPerFrame._m0[3u].x);
    uint _2397 = _530 + 6u;
    float _2405 = _490 / cbSceneParam._m0[86u].x;
    float _2406 = _491 / cbSceneParam._m0[86u].y;
    vec4 _2420 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2405, _2406, (log2((isnan(cbSceneParam._m0[77u].w) ? _410 : (isnan(_410) ? cbSceneParam._m0[77u].w : min(_410, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2422 = _2420.x;
    float _2423 = _2420.y;
    float _2424 = _2420.z;
    float _2425 = _2420.w;
    float _2517;
    float _2519;
    float _2521;
    float _2523;
    if (_410 > cbSceneParam._m0[78u].w)
    {
        float _2480 = isnan(_410) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _410 : min(cbSceneParam._m0[80u].w, _410));
        float _2481 = _2480 / _410;
        float _2492 = _2481 * _462;
        float _2493 = _463 * _2481;
        float _2494 = (-0.0) - _2493;
        float _2495 = _2481 * _464;
        float _2497 = (cbSceneParam._m0[77u].w * _2494) / _2480;
        float _2498 = _2497 + cbSceneParam._m0[79u].w;
        float _2499 = cbSceneParam._m0[79u].w - _2493;
        float _2505 = sqrt(((_2492 * _2492) + (_2493 * _2493)) + (_2495 * _2495));
        float _2508 = (1.0 - (cbSceneParam._m0[77u].w / _2480)) * _2505;
        float _2513 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2515 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2692;
        if (abs((_2494 - _2497) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2692 = ((((_2498 > 0.0) ? exp2(_2513 * _2498) : (2.0 - exp2(_2515 * _2498))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2508;
        }
        else
        {
            float _2636 = 1.0 / cbSceneParam._m0[80u].x;
            float _2637 = isnan(_2499) ? _2498 : (isnan(_2498) ? _2499 : max(_2498, _2499));
            float _2638 = isnan(_2499) ? _2498 : (isnan(_2498) ? _2499 : min(_2498, _2499));
            float _2647 = isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : min(_2637, 0.0));
            float _2648 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : min(_2638, 0.0));
            _2692 = ((abs(_2505 / _2494) * cbSceneParam._m0[80u].y) * ((((_2647 - _2648) * 2.0) - ((exp2(_2513 * (isnan(0.0) ? _2637 : (isnan(_2637) ? 0.0 : max(_2637, 0.0)))) - exp2(_2513 * (isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0))))) * _2636)) - ((exp2(_2515 * _2647) - exp2(_2515 * _2648)) * _2636))) + (_2508 * cbSceneParam._m0[80u].z);
        }
        vec4 _2694 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2405, _2406, 1.0), 0.0);
        float _2703 = exp2((_2692 * (-1.44269502162933349609375)) * (1.0 - _2694.w));
        float _2704 = log2(_2703);
        float _2720 = log2(_2425);
        _2517 = (exp2(_2720 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2704 * cbSceneParam._m0[78u].x)) * _2694.x) / cbSceneParam._m0[78u].x)) + _2422;
        _2519 = (exp2(_2720 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2704 * cbSceneParam._m0[78u].y)) * _2694.y) / cbSceneParam._m0[78u].y)) + _2423;
        _2521 = (exp2(_2720 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2704 * cbSceneParam._m0[78u].z)) * _2694.z) / cbSceneParam._m0[78u].z)) + _2424;
        _2523 = _2703 * _2425;
    }
    else
    {
        _2517 = _2422;
        _2519 = _2423;
        _2521 = _2424;
        _2523 = _2425;
    }
    bool _2730;
    vec4 _2533;
    vec4 _2555;
    float _2557;
    float _2561;
    float _2562;
    float _2563;
    float _2564;
    bool _2574;
    for (;;)
    {
        _2533 = cbMatDynParam._m0[0u];
        float _2535 = roundEven(_2533.y);
        bool _2536 = _2535 == 3.0;
        float _2537 = log2(_2523);
        float _2544 = exp2(_2537 * cbSceneParam._m0[78u].x) * _2394;
        float _2545 = exp2(_2537 * cbSceneParam._m0[78u].y) * _2395;
        float _2546 = exp2(_2537 * cbSceneParam._m0[78u].z) * _2396;
        float _2553 = _478 + (-0.5);
        _2555 = cbMtdParam._m0[1u];
        _2557 = _2555.y * _2553;
        float _2560 = (_2535 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2561 = _2560 * (_2536 ? _2544 : (_2544 + (cbSceneParam._m0[72u].w * _2517)));
        _2562 = _2560 * (_2536 ? _2545 : (_2545 + (cbSceneParam._m0[72u].w * _2519)));
        _2563 = _2560 * (_2536 ? _2546 : (_2546 + (cbSceneParam._m0[72u].w * _2521)));
        _2564 = _2553 * 0.999000012874603271484375;
        _2574 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2574)
        {
            if ((cbInstanceData._m0[_530 + 7u].x + _2564) < 0.5)
            {
                _2730 = true;
                break;
            }
        }
        uint _2671 = _532 + uint(_2533.w);
        if ((cbInstanceData._m0[_2671].w < 1.0) && ((cbInstanceData._m0[_2671].w + _2564) < 0.5))
        {
            _2730 = true;
            break;
        }
        if ((_2557 + 1.0) < _2555.x)
        {
            _2730 = true;
            break;
        }
        _2730 = false;
        break;
    }
    float _2935;
    if (_2730)
    {
        discard_state = true;
        _2935 = 0.0;
    }
    else
    {
        _2935 = cbInstanceData._m0[_2397].w;
    }
    SV_Target.x = _2561;
    SV_Target.y = _2562;
    SV_Target.z = _2563;
    SV_Target.w = _2935;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2397].w;
    discard_exit();
}


