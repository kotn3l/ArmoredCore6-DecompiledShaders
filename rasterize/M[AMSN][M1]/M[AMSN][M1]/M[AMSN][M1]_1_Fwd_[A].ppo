#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _875;
float _3266;
float _3267;
float _3268;
float _3269;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _211;
    float _212;
    float _213;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _211 = (-0.0) - _197;
        _212 = (-0.0) - _198;
        _213 = (-0.0) - _199;
    }
    else
    {
        _211 = _197;
        _212 = _198;
        _213 = _199;
    }
    vec4 _233 = texture(sampler2D(M_AMSN_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _239 = _233.x * cbMtdParam._m0[9u].x;
    float _240 = _233.y * cbMtdParam._m0[9u].y;
    float _241 = _233.z * cbMtdParam._m0[9u].z;
    vec4 _257 = texture(sampler2D(M_AMSN_M1_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _261 = _257.z;
    float _265 = (_257.x * 2.0) + (-1.0);
    float _267 = (_257.y * 2.0) + (-1.0);
    float _268 = dot(vec2(_265, _267), vec2(_265, _267));
    float _3278 = isnan(0.0) ? _268 : (isnan(_268) ? 0.0 : max(_268, 0.0));
    float _274 = sqrt(1.0 - (isnan(1.0) ? _3278 : (isnan(_3278) ? 1.0 : min(_3278, 1.0))));
    float _277 = fma(_274, _211, fma(_267, _203 * TANGENT.x, (_189 * _182) * _265));
    float _280 = fma(_274, _212, fma(_267, _203 * TANGENT.y, (_189 * _183) * _265));
    float _283 = fma(_274, _213, fma(_267, _203 * TANGENT.z, (_189 * _184) * _265));
    float _287 = inversesqrt(dot(vec3(_277, _280, _283), vec3(_277, _280, _283)));
    float _288 = _287 * _277;
    float _289 = _287 * _280;
    float _290 = _287 * _283;
    float _3289 = isnan(0.0) ? _261 : (isnan(_261) ? 0.0 : max(_261, 0.0));
    float _291 = isnan(1.0) ? _3289 : (isnan(_3289) ? 1.0 : min(_3289, 1.0));
    float _3300 = isnan(0.0) ? _239 : (isnan(_239) ? 0.0 : max(_239, 0.0));
    float _3311 = isnan(0.0) ? _240 : (isnan(_240) ? 0.0 : max(_240, 0.0));
    float _3322 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3333 = isnan(0.0) ? cbMtdParam._m0[10u].x : (isnan(cbMtdParam._m0[10u].x) ? 0.0 : max(cbMtdParam._m0[10u].x, 0.0));
    float _295 = isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0));
    float _311 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _352 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _362 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _352);
    float _363 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _352);
    float _364 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _352);
    float _368 = inversesqrt(dot(vec3(_362, _363, _364), vec3(_362, _363, _364)));
    float _369 = _362 * _368;
    float _370 = _363 * _368;
    float _371 = _364 * _368;
    vec4 _376 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _378 = _376.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _554 = sqrt(((_362 * _362) + (_363 * _363)) + (_364 * _364));
        float _560 = (cbMatDynParam._m0[5u].x * _554) + cbMatDynParam._m0[5u].y;
        float _3344 = isnan(0.0) ? _560 : (isnan(_560) ? 0.0 : max(_560, 0.0));
        float _561 = isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0));
        float _565 = (cbMatDynParam._m0[5u].z * _554) + cbMatDynParam._m0[5u].w;
        float _3355 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0))) - _561)) + _561) < ((_378 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _390 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _391 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _411 = fma(_290, cbSceneParam._m0[5u].z, fma(_289, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _288));
    float _414 = fma(_290, cbSceneParam._m0[6u].z, fma(_289, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _288));
    float _417 = fma(_290, cbSceneParam._m0[7u].z, fma(_289, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _288));
    uint _430 = uint(roundEven(NORMAL.w)) * 13u;
    uint _432 = _430 + 9u;
    uint _433 = _432 + uint(cbMatDynParam._m0[0u].w);
    float _439 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0)))) * cbInstanceData._m0[_433].x;
    float _440 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0)))) * cbInstanceData._m0[_433].y;
    float _441 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0)))) * cbInstanceData._m0[_433].z;
    float _3366 = isnan(0.0) ? _439 : (isnan(_439) ? 0.0 : max(_439, 0.0));
    float _442 = isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0));
    float _3377 = isnan(0.0) ? _440 : (isnan(_440) ? 0.0 : max(_440, 0.0));
    float _443 = isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0));
    float _3388 = isnan(0.0) ? _441 : (isnan(_441) ? 0.0 : max(_441, 0.0));
    float _444 = isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0));
    float _445 = 1.0 - _295;
    float _446 = _442 * _445;
    float _447 = _443 * _445;
    float _448 = _444 * _445;
    float _453 = (_442 + (-0.039999999105930328369140625)) * _295;
    float _454 = (_443 + (-0.039999999105930328369140625)) * _295;
    float _455 = (_444 + (-0.039999999105930328369140625)) * _295;
    float _456 = _453 + 0.039999999105930328369140625;
    float _458 = _454 + 0.039999999105930328369140625;
    float _459 = _455 + 0.039999999105930328369140625;
    vec4 _468 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _390, cbSceneParam._m0[86u].y * _391));
    float _471 = _468.x * TEXCOORD.z;
    float _472 = dot(vec3(_288, _289, _290), vec3(_369, _370, _371));
    float _475 = _472 * 2.0;
    float _479 = (_475 * _288) - _369;
    float _480 = (_475 * _289) - _370;
    float _481 = (_475 * _290) - _371;
    float _485 = abs(dot(vec3(_369, _370, _371), vec3(_288, _289, _290)));
    float _3399 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _487 = sqrt(_291);
    float _500 = exp2((_487 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_487 * 3.0));
    float _506 = (1.0 - _500) * ((_487 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _507 = _500 * _487;
    float _535 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _539 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _543 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _874;
    float _876;
    float _877;
    float _878;
    float _879;
    float _880;
    float _881;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _599 = fma(_543, cbModelParam._m0[26u].z, fma(_539, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _535));
        float _603 = fma(_543, cbModelParam._m0[27u].z, fma(_539, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _535));
        float _607 = fma(_543, cbModelParam._m0[28u].z, fma(_539, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _535));
        float _632 = _535 + _288;
        float _633 = _539 + _289;
        float _634 = _543 + _290;
        float _644 = fma(_634, cbModelParam._m0[26u].z, fma(_633, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _632)) - _599;
        float _645 = fma(_634, cbModelParam._m0[27u].z, fma(_633, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _632)) - _603;
        float _646 = fma(_634, cbModelParam._m0[28u].z, fma(_633, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _632)) - _607;
        float _650 = inversesqrt(dot(vec3(_644, _645, _646), vec3(_644, _645, _646)));
        float _663 = ((_650 * _644) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_599 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _664 = ((_650 * _645) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_603 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _665 = ((_650 * _646) / cbModelParam._m0[34u].z) + ((((((_607 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _668 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_663, _664, _665), 0.0);
        vec4 _675 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_663, _664, _665), 0.0);
        vec4 _682 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_663, _664, _665), 0.0);
        vec4 _689 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_663, _664, _665), 0.0);
        float _702 = exp2((_668.w + (-0.5)) * 20.0) * 2.0;
        float _703 = _702 * (_668.x + (-0.5));
        float _704 = _702 * (_668.y + (-0.5));
        float _705 = _702 * (_668.z + (-0.5));
        float _712 = exp2((_675.w + (-0.5)) * 20.0) * 2.0;
        float _713 = _712 * (_675.x + (-0.5));
        float _714 = _712 * (_675.y + (-0.5));
        float _715 = _712 * (_675.z + (-0.5));
        float _722 = exp2((_682.w + (-0.5)) * 20.0) * 2.0;
        float _723 = _722 * (_682.x + (-0.5));
        float _724 = _722 * (_682.y + (-0.5));
        float _725 = _722 * (_682.z + (-0.5));
        float _732 = exp2((_689.w + (-0.5)) * 20.0) * 2.0;
        float _733 = _732 * (_689.x + (-0.5));
        float _734 = _732 * (_689.y + (-0.5));
        float _735 = _732 * (_689.z + (-0.5));
        float _736 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
        float _737 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
        float _738 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        float _739 = _703 * 0.5;
        float _740 = _713 * 0.5;
        float _741 = _723 * 0.5;
        float _742 = dot(vec3(_739, _740, _741), vec3(_739, _740, _741));
        float _747 = (_742 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_742);
        float _756 = (dot(vec3(_288, _289, _290), vec3(_747 * _739, _747 * _740, _747 * _741)) + 1.0) * 0.5;
        float _3425 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        float _766 = sqrt(((_740 * _740) + (_739 * _739)) + (_741 * _741)) / (_736 + 9.9999997473787516355514526367188e-06);
        float _3436 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _767 = isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0));
        float _768 = _767 * 2.0;
        float _772 = (1.0 - _767) / (_767 + 1.0);
        float _3447 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _773 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
        float _782 = ((((1.0 - _773) * (_768 + 2.0)) * exp2(log2(isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0))) * (_768 + 1.0))) + _773) * _736;
        float _783 = _704 * 0.5;
        float _784 = _714 * 0.5;
        float _785 = _724 * 0.5;
        float _786 = dot(vec3(_783, _784, _785), vec3(_783, _784, _785));
        float _791 = (_786 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_786);
        float _799 = (dot(vec3(_288, _289, _290), vec3(_791 * _783, _791 * _784, _791 * _785)) + 1.0) * 0.5;
        float _3458 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
        float _808 = sqrt(((_784 * _784) + (_783 * _783)) + (_785 * _785)) / (_737 + 9.9999997473787516355514526367188e-06);
        float _3469 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _809 = isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0));
        float _810 = _809 * 2.0;
        float _814 = (1.0 - _809) / (_809 + 1.0);
        float _3480 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _815 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
        float _824 = ((((1.0 - _815) * (_810 + 2.0)) * exp2(log2(isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0))) * (_810 + 1.0))) + _815) * _737;
        float _825 = _705 * 0.5;
        float _826 = _715 * 0.5;
        float _827 = _725 * 0.5;
        float _828 = dot(vec3(_825, _826, _827), vec3(_825, _826, _827));
        float _833 = (_828 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_828);
        float _841 = (dot(vec3(_288, _289, _290), vec3(_833 * _825, _833 * _826, _833 * _827)) + 1.0) * 0.5;
        float _3491 = isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0));
        float _850 = sqrt(((_826 * _826) + (_825 * _825)) + (_827 * _827)) / (_738 + 9.9999997473787516355514526367188e-06);
        float _3502 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _851 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
        float _852 = _851 * 2.0;
        float _856 = (1.0 - _851) / (_851 + 1.0);
        float _3513 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _857 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
        float _866 = ((((1.0 - _857) * (_852 + 2.0)) * exp2(log2(isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0))) * (_852 + 1.0))) + _857) * _738;
        _874 = _705;
        _876 = _704;
        _877 = _703;
        _878 = _715;
        _879 = _714;
        _880 = _713;
        _881 = _725;
        _882 = _724;
        _883 = _723;
        _884 = _738;
        _885 = _737;
        _886 = _736;
        _887 = cbModelParam._m0[36u].z * (isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0)));
        _888 = cbModelParam._m0[36u].z * (isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0)));
        _889 = cbModelParam._m0[36u].z * (isnan(0.0) ? _866 : (isnan(_866) ? 0.0 : max(_866, 0.0)));
    }
    else
    {
        _874 = _875;
        _876 = _875;
        _877 = _875;
        _878 = _875;
        _879 = _875;
        _880 = _875;
        _881 = _875;
        _882 = _875;
        _883 = _875;
        _884 = _875;
        _885 = _875;
        _886 = _875;
        _887 = 0.0;
        _888 = 0.0;
        _889 = 0.0;
    }
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _918 = fma(_543, cbModelParam._m0[30u].z, fma(_539, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _535));
        float _922 = fma(_543, cbModelParam._m0[31u].z, fma(_539, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _535));
        float _926 = fma(_543, cbModelParam._m0[32u].z, fma(_539, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _535));
        float _949 = _535 + _288;
        float _950 = _539 + _289;
        float _951 = _543 + _290;
        float _961 = fma(_951, cbModelParam._m0[30u].z, fma(_950, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _949)) - _918;
        float _962 = fma(_951, cbModelParam._m0[31u].z, fma(_950, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _949)) - _922;
        float _963 = fma(_951, cbModelParam._m0[32u].z, fma(_950, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _949)) - _926;
        float _967 = inversesqrt(dot(vec3(_961, _962, _963), vec3(_961, _962, _963)));
        float _980 = ((_967 * _961) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_918 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _981 = ((_967 * _962) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_922 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _982 = ((_967 * _963) / cbModelParam._m0[35u].z) + ((((((_926 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _984 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_980, _981, _982), 0.0);
        vec4 _991 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_980, _981, _982), 0.0);
        vec4 _998 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_980, _981, _982), 0.0);
        vec4 _1005 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_980, _981, _982), 0.0);
        float _1017 = exp2((_984.w + (-0.5)) * 20.0) * 2.0;
        float _1018 = _1017 * (_984.x + (-0.5));
        float _1019 = _1017 * (_984.y + (-0.5));
        float _1020 = _1017 * (_984.z + (-0.5));
        float _1027 = exp2((_991.w + (-0.5)) * 20.0) * 2.0;
        float _1028 = _1027 * (_991.x + (-0.5));
        float _1029 = _1027 * (_991.y + (-0.5));
        float _1030 = _1027 * (_991.z + (-0.5));
        float _1037 = exp2((_998.w + (-0.5)) * 20.0) * 2.0;
        float _1038 = _1037 * (_998.x + (-0.5));
        float _1039 = _1037 * (_998.y + (-0.5));
        float _1040 = _1037 * (_998.z + (-0.5));
        float _1047 = exp2((_1005.w + (-0.5)) * 20.0) * 2.0;
        float _1048 = _1047 * (_1005.x + (-0.5));
        float _1049 = _1047 * (_1005.y + (-0.5));
        float _1050 = _1047 * (_1005.z + (-0.5));
        float _1051 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1052 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1053 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1054 = _1018 * 0.5;
        float _1055 = _1028 * 0.5;
        float _1056 = _1038 * 0.5;
        float _1057 = dot(vec3(_1054, _1055, _1056), vec3(_1054, _1055, _1056));
        float _1062 = (_1057 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1057);
        float _1070 = (dot(vec3(_288, _289, _290), vec3(_1062 * _1054, _1062 * _1055, _1062 * _1056)) + 1.0) * 0.5;
        float _3554 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1079 = sqrt(((_1055 * _1055) + (_1054 * _1054)) + (_1056 * _1056)) / (_1051 + 9.9999997473787516355514526367188e-06);
        float _3565 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
        float _1081 = _1080 * 2.0;
        float _1085 = (1.0 - _1080) / (_1080 + 1.0);
        float _3576 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
        float _1095 = ((((1.0 - _1086) * (_1081 + 2.0)) * exp2(log2(isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0))) * (_1081 + 1.0))) + _1086) * _1051;
        float _1096 = _1019 * 0.5;
        float _1097 = _1029 * 0.5;
        float _1098 = _1039 * 0.5;
        float _1099 = dot(vec3(_1096, _1097, _1098), vec3(_1096, _1097, _1098));
        float _1104 = (_1099 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1099);
        float _1112 = (dot(vec3(_288, _289, _290), vec3(_1104 * _1096, _1104 * _1097, _1104 * _1098)) + 1.0) * 0.5;
        float _3587 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1121 = sqrt(((_1097 * _1097) + (_1096 * _1096)) + (_1098 * _1098)) / (_1052 + 9.9999997473787516355514526367188e-06);
        float _3598 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
        float _1123 = _1122 * 2.0;
        float _1127 = (1.0 - _1122) / (_1122 + 1.0);
        float _3609 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1128 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
        float _1137 = ((((1.0 - _1128) * (_1123 + 2.0)) * exp2(log2(isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0))) * (_1123 + 1.0))) + _1128) * _1052;
        float _1138 = _1020 * 0.5;
        float _1139 = _1030 * 0.5;
        float _1140 = _1040 * 0.5;
        float _1141 = dot(vec3(_1138, _1139, _1140), vec3(_1138, _1139, _1140));
        float _1146 = (_1141 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1141);
        float _1154 = (dot(vec3(_288, _289, _290), vec3(_1146 * _1138, _1146 * _1139, _1146 * _1140)) + 1.0) * 0.5;
        float _3620 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1163 = sqrt(((_1139 * _1139) + (_1138 * _1138)) + (_1140 * _1140)) / (_1053 + 9.9999997473787516355514526367188e-06);
        float _3631 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0));
        float _1165 = _1164 * 2.0;
        float _1169 = (1.0 - _1164) / (_1164 + 1.0);
        float _3642 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
        float _1179 = ((((1.0 - _1170) * (_1165 + 2.0)) * exp2(log2(isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0))) * (_1165 + 1.0))) + _1170) * _1053;
        _1187 = _1020;
        _1188 = _1019;
        _1189 = _1018;
        _1190 = _1030;
        _1191 = _1029;
        _1192 = _1028;
        _1193 = _1040;
        _1194 = _1039;
        _1195 = _1038;
        _1196 = _1053;
        _1197 = _1052;
        _1198 = _1051;
        _1199 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0)));
        _1200 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0)));
        _1201 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0)));
    }
    else
    {
        _1187 = _875;
        _1188 = _875;
        _1189 = _875;
        _1190 = _875;
        _1191 = _875;
        _1192 = _875;
        _1193 = _875;
        _1194 = _875;
        _1195 = _875;
        _1196 = _875;
        _1197 = _875;
        _1198 = _875;
        _1199 = 0.0;
        _1200 = 0.0;
        _1201 = 0.0;
    }
    float _1211 = (cbModelParam._m0[1u].x * (_1199 - _887)) + _887;
    float _1212 = (cbModelParam._m0[1u].x * (_1200 - _888)) + _888;
    float _1213 = (cbModelParam._m0[1u].x * (_1201 - _889)) + _889;
    float _1234 = fma(_1213, cbSceneParam._m0[89u].z, fma(_1212, cbSceneParam._m0[89u].y, _1211 * cbSceneParam._m0[89u].x));
    float _1237 = fma(_1213, cbSceneParam._m0[90u].z, fma(_1212, cbSceneParam._m0[90u].y, _1211 * cbSceneParam._m0[90u].x));
    float _1240 = fma(_1213, cbSceneParam._m0[91u].z, fma(_1212, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1211));
    float _1255 = _479 * 0.5;
    float _1256 = _480 * 0.5;
    float _1257 = _481 * 0.5;
    float _1258 = dot(vec4(_1255, _1256, _1257, 1.0), vec4(_1189, _1192, _1195, _1198));
    float _1261 = dot(vec4(_1255, _1256, _1257, 1.0), vec4(_1188, _1191, _1194, _1197));
    float _1264 = dot(vec4(_1255, _1256, _1257, 1.0), vec4(_1187, _1190, _1193, _1196));
    float _1298;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1271 = dot(vec4(_1255, _1256, _1257, 1.0), vec4(_874, _878, _881, _884));
        float _1275 = dot(vec4(_1255, _1256, _1257, 1.0), vec4(_876, _879, _882, _885));
        float _1279 = dot(vec4(_1255, _1256, _1257, 1.0), vec4(_877, _880, _883, _886));
        float _1286 = dot(vec4(cbModelParam._m0[39u]), vec4(_1255, _1256, _1257, 1.0));
        _1298 = dot(vec3(isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)), isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)), isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1286) ? 0.0 : (isnan(0.0) ? _1286 : max(0.0, _1286))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1298 = 1.0;
    }
    float _1309;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1300 = dot(vec4(cbModelParam._m0[40u]), vec4(_1255, _1256, _1257, 1.0));
        _1309 = dot(vec3(isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)), isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0)), isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1300) ? 0.0 : (isnan(0.0) ? _1300 : max(0.0, _1300))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1309 = 1.0;
    }
    float _1313 = (_1309 * cbModelParam._m0[1u].x) + (_1298 * (1.0 - cbModelParam._m0[1u].x));
    float _1323 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _291);
    float _1324 = isnan(_1323) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1323 : min(cbModelParam._m0[25u].z, _1323));
    float _1406;
    float _1408;
    float _1410;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1373 = fma(_543, cbModelParam._m0[13u].z, fma(_539, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _535)) + cbModelParam._m0[13u].w;
        float _1377 = fma(_543, cbModelParam._m0[14u].z, fma(_539, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _535)) + cbModelParam._m0[14u].w;
        float _1381 = fma(_543, cbModelParam._m0[15u].z, fma(_539, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _535)) + cbModelParam._m0[15u].w;
        float _1384 = fma(_481, cbModelParam._m0[13u].z, fma(_480, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _479));
        float _1387 = fma(_481, cbModelParam._m0[14u].z, fma(_480, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _479));
        float _1390 = fma(_481, cbModelParam._m0[15u].z, fma(_480, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _479));
        float _1418;
        if (_1384 > 0.0)
        {
            _1418 = abs((1.0 - _1373) / _1384);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1384 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1373 + 1.0) / _1384);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1418 = frontier_phi_19_17_ladder;
        }
        float _1626;
        if (_1387 > 0.0)
        {
            _1626 = abs((1.0 - _1377) / _1387);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1387 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1377 + 1.0) / _1387);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1626 = frontier_phi_28_24_ladder;
        }
        float _1880;
        if (_1390 > 0.0)
        {
            _1880 = abs((1.0 - _1381) / _1390);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1390 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1381 + 1.0) / _1390);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1880 = frontier_phi_40_35_ladder;
        }
        float _1882 = isnan(_1626) ? _1418 : (isnan(_1418) ? _1626 : min(_1418, _1626));
        float _1883 = isnan(_1880) ? _1882 : (isnan(_1882) ? _1880 : min(_1882, _1880));
        float _1887 = (_1883 * _1384) + _1373;
        float _1888 = (_1883 * _1387) + _1377;
        float _1889 = (_1883 * _1390) + _1381;
        float _1890 = _1883 * 9.9999997473787516355514526367188e-05;
        float _1892 = (-1.0) - _1890;
        float _1894 = _1890 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1889 > _1894) || ((_1889 < _1892) || ((_1888 > _1894) || ((_1888 < _1892) || ((_1887 < _1892) || (_1887 > _1894))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2017 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1889, cbModelParam._m0[9u].z, fma(_1888, cbModelParam._m0[9u].y, _1887 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1889, cbModelParam._m0[10u].z, fma(_1888, cbModelParam._m0[10u].y, _1887 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1889, cbModelParam._m0[11u].z, fma(_1888, cbModelParam._m0[11u].y, _1887 * cbModelParam._m0[11u].x))), _1324);
            frontier_phi_18_40_ladder = _2017.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2017.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2017.x * cbModelParam._m0[1u].y;
        }
        _1406 = frontier_phi_18_40_ladder_2;
        _1408 = frontier_phi_18_40_ladder_1;
        _1410 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1394 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_479, _480, _481), _1324);
        _1406 = _1394.x * cbModelParam._m0[1u].y;
        _1408 = _1394.y * cbModelParam._m0[1u].y;
        _1410 = _1394.z * cbModelParam._m0[1u].y;
    }
    float _1414 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _291);
    float _1415 = isnan(_1414) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1414 : min(cbModelParam._m0[25u].w, _1414));
    float _1508;
    float _1510;
    float _1512;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1472 = fma(_543, cbModelParam._m0[21u].z, fma(_539, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _535)) + cbModelParam._m0[21u].w;
        float _1476 = fma(_543, cbModelParam._m0[22u].z, fma(_539, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _535)) + cbModelParam._m0[22u].w;
        float _1480 = fma(_543, cbModelParam._m0[23u].z, fma(_539, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _535)) + cbModelParam._m0[23u].w;
        float _1483 = fma(_481, cbModelParam._m0[21u].z, fma(_480, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _479));
        float _1486 = fma(_481, cbModelParam._m0[22u].z, fma(_480, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _479));
        float _1489 = fma(_481, cbModelParam._m0[23u].z, fma(_480, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _479));
        float _1631;
        if (_1483 > 0.0)
        {
            _1631 = abs((1.0 - _1472) / _1483);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1483 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1472 + 1.0) / _1483);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1631 = frontier_phi_30_26_ladder;
        }
        float _1907;
        if (_1486 > 0.0)
        {
            _1907 = abs((1.0 - _1476) / _1486);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1486 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1476 + 1.0) / _1486);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1907 = frontier_phi_42_37_ladder;
        }
        float _2120;
        if (_1489 > 0.0)
        {
            _2120 = abs((1.0 - _1480) / _1489);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1489 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1480 + 1.0) / _1489);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2120 = frontier_phi_51_48_ladder;
        }
        float _2122 = isnan(_1907) ? _1631 : (isnan(_1631) ? _1907 : min(_1631, _1907));
        float _2123 = isnan(_2120) ? _2122 : (isnan(_2122) ? _2120 : min(_2122, _2120));
        float _2127 = (_2123 * _1483) + _1472;
        float _2128 = (_2123 * _1486) + _1476;
        float _2129 = (_2123 * _1489) + _1480;
        float _2130 = _2123 * 9.9999997473787516355514526367188e-05;
        float _2131 = (-1.0) - _2130;
        float _2133 = _2130 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2129 > _2133) || ((_2129 < _2131) || ((_2128 > _2133) || ((_2128 < _2131) || ((_2127 < _2131) || (_2127 > _2133))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2327 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2129, cbModelParam._m0[17u].z, fma(_2128, cbModelParam._m0[17u].y, _2127 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2129, cbModelParam._m0[18u].z, fma(_2128, cbModelParam._m0[18u].y, _2127 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2129, cbModelParam._m0[19u].z, fma(_2128, cbModelParam._m0[19u].y, _2127 * cbModelParam._m0[19u].x))), _1415);
            frontier_phi_27_51_ladder = _2327.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2327.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2327.x * cbModelParam._m0[1u].z;
        }
        _1508 = frontier_phi_27_51_ladder_2;
        _1510 = frontier_phi_27_51_ladder_1;
        _1512 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1492 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_479, _480, _481), _1415);
        _1508 = _1492.x * cbModelParam._m0[1u].z;
        _1510 = _1492.y * cbModelParam._m0[1u].z;
        _1512 = _1492.z * cbModelParam._m0[1u].z;
    }
    float _1525 = (((_506 * _456) + _507) * _471) * ((cbModelParam._m0[1u].w * (_1508 - _1406)) + _1406);
    float _1527 = (((_506 * _458) + _507) * _471) * ((cbModelParam._m0[1u].w * (_1510 - _1408)) + _1408);
    float _1529 = (((_506 * _459) + _507) * _471) * ((cbModelParam._m0[1u].w * (_1512 - _1410)) + _1410);
    float _1532 = fma(_1529, cbSceneParam._m0[89u].z, fma(_1527, cbSceneParam._m0[89u].y, _1525 * cbSceneParam._m0[89u].x));
    float _1535 = fma(_1529, cbSceneParam._m0[90u].z, fma(_1527, cbSceneParam._m0[90u].y, _1525 * cbSceneParam._m0[90u].x));
    float _1538 = fma(_1529, cbSceneParam._m0[91u].z, fma(_1527, cbSceneParam._m0[91u].y, _1525 * cbSceneParam._m0[91u].x));
    uvec4 _1548 = floatBitsToUint(cbInstanceData._m0[_430 + 5u]);
    uint _1550 = _1548.x * 14u;
    uint _1551 = _1550 + 13u;
    float _1558 = _471 + (-1.0);
    float _1563 = (cbLight._m0[_1551].x * _1558) + 1.0;
    float _1564 = (cbLight._m0[_1551].y * _1558) + 1.0;
    float _1565 = (cbLight._m0[_1551].z * _1558) + 1.0;
    float _1566 = (cbLight._m0[_1551].w * _1558) + 1.0;
    uint _1567 = _1550 + 5u;
    float _1573 = isnan(1.0) ? _1564 : (isnan(_1564) ? 1.0 : min(_1564, 1.0));
    uint _1577 = _1550 + 4u;
    float _1584 = isnan(1.0) ? _1563 : (isnan(_1563) ? 1.0 : min(_1563, 1.0));
    uint _1588 = _1550 | 1u;
    float _1599 = dot(vec3(cbLight._m0[_1550].xyz), vec3(_288, _289, _290));
    float _1602 = dot(vec3(cbLight._m0[_1588].xyz), vec3(_288, _289, _290));
    float _3778 = isnan(0.0) ? _1599 : (isnan(_1599) ? 0.0 : max(_1599, 0.0));
    float _3789 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
    float _1607 = (isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))) * 0.3183098733425140380859375;
    float _1609 = (isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0))) * 0.3183098733425140380859375;
    float _1616 = ((cbLight._m0[_1567].x * _1573) * _1609) + ((cbLight._m0[_1577].x * _1584) * _1607);
    float _1617 = ((_1573 * cbLight._m0[_1567].y) * _1609) + ((_1584 * cbLight._m0[_1577].y) * _1607);
    float _1618 = ((_1573 * cbLight._m0[_1567].z) * _1609) + ((_1584 * cbLight._m0[_1577].z) * _1607);
    uvec4 _1623 = floatBitsToUint(cbLight._m0[_1550 + 12u]);
    bool _1625 = _1623.x == 0u;
    float _1636;
    float _1638;
    float _1640;
    if (_1625)
    {
        _1636 = _1616;
        _1638 = _1617;
        _1640 = _1618;
    }
    else
    {
        uint _1644 = _1550 + 6u;
        float _1660 = (dot(vec3(cbLight._m0[_1550 + 2u].xyz), vec3(_288, _289, _290)) * 0.5) + 0.5;
        float _1661 = _1660 * _1660;
        float _3800 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
        float _1662 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
        float _1663 = isnan(1.0) ? _1565 : (isnan(_1565) ? 1.0 : min(_1565, 1.0));
        _1636 = (((cbLight._m0[_1644].x * 0.3183098733425140380859375) * _1662) * _1663) + _1616;
        _1638 = (((cbLight._m0[_1644].y * 0.3183098733425140380859375) * _1662) * _1663) + _1617;
        _1640 = (((cbLight._m0[_1644].z * 0.3183098733425140380859375) * _1662) * _1663) + _1618;
    }
    bool _1643 = _1623.y == 0u;
    float _1681;
    float _1683;
    float _1685;
    if (_1643)
    {
        _1681 = _1636;
        _1683 = _1638;
        _1685 = _1640;
    }
    else
    {
        uint _1851 = _1550 + 7u;
        float _1867 = (dot(vec3(cbLight._m0[_1550 + 3u].xyz), vec3(_288, _289, _290)) * 0.5) + 0.5;
        float _1868 = _1867 * _1867;
        float _3816 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
        float _1869 = isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0));
        float _1870 = isnan(1.0) ? _1566 : (isnan(_1566) ? 1.0 : min(_1566, 1.0));
        _1681 = (((cbLight._m0[_1851].x * 0.3183098733425140380859375) * _1869) * _1870) + _1636;
        _1683 = (((cbLight._m0[_1851].y * 0.3183098733425140380859375) * _1869) * _1870) + _1638;
        _1685 = (((cbLight._m0[_1851].z * 0.3183098733425140380859375) * _1869) * _1870) + _1640;
    }
    uint _1688 = _1550 + 8u;
    float _1701 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1550].w)) * _291) * 0.949999988079071044921875);
    float _1702 = _1701 * _1701;
    float _1703 = cbLight._m0[_1550].x + _369;
    float _1704 = cbLight._m0[_1550].y + _370;
    float _1705 = cbLight._m0[_1550].z + _371;
    float _1709 = inversesqrt(dot(vec3(_1703, _1704, _1705), vec3(_1703, _1704, _1705)));
    float _1710 = _1709 * _1703;
    float _1711 = _1709 * _1704;
    float _1712 = _1709 * _1705;
    float _1713 = dot(vec3(_288, _289, _290), vec3(cbLight._m0[_1550].xyz));
    float _3832 = isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0));
    float _1716 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
    float _3843 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _1717 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
    float _1718 = dot(vec3(_288, _289, _290), vec3(_1710, _1711, _1712));
    float _3854 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
    float _1721 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
    float _1722 = dot(vec3(cbLight._m0[_1550].xyz), vec3(_1710, _1711, _1712));
    float _3865 = isnan(0.0) ? _1722 : (isnan(_1722) ? 0.0 : max(_1722, 0.0));
    float _1726 = _1702 * _1702;
    float _1730 = ((_1721 * _1721) * (_1726 + (-1.0))) + 1.0;
    float _1738 = exp2(log2(1.0 - (isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0)))) * 5.0);
    float _1739 = 0.959999978542327880859375 - _453;
    float _1741 = 0.959999978542327880859375 - _454;
    float _1742 = 0.959999978542327880859375 - _455;
    float _1749 = 1.0 - _1702;
    float _1760 = (0.5 / (((_1717 * ((_1716 * _1749) + _1702)) + 9.9999999392252902907785028219223e-09) + (((_1717 * _1749) + _1702) * _1716))) * _1716;
    float _3876 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
    float _1762 = (isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0))) * (_1726 / ((_1730 * _1730) * 3.141590118408203125));
    uint _1773 = _1550 + 9u;
    float _1784 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1588].w)) * _291) * 0.949999988079071044921875);
    float _1785 = _1784 * _1784;
    float _1786 = cbLight._m0[_1588].x + _369;
    float _1787 = cbLight._m0[_1588].y + _370;
    float _1788 = cbLight._m0[_1588].z + _371;
    float _1792 = inversesqrt(dot(vec3(_1786, _1787, _1788), vec3(_1786, _1787, _1788)));
    float _1793 = _1792 * _1786;
    float _1794 = _1792 * _1787;
    float _1795 = _1792 * _1788;
    float _1796 = dot(vec3(_288, _289, _290), vec3(cbLight._m0[_1588].xyz));
    float _3887 = isnan(0.0) ? _1796 : (isnan(_1796) ? 0.0 : max(_1796, 0.0));
    float _1799 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
    float _1800 = dot(vec3(_288, _289, _290), vec3(_1793, _1794, _1795));
    float _3898 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
    float _1803 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
    float _1804 = dot(vec3(cbLight._m0[_1588].xyz), vec3(_1793, _1794, _1795));
    float _3909 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
    float _1808 = _1785 * _1785;
    float _1812 = ((_1803 * _1803) * (_1808 + (-1.0))) + 1.0;
    float _1819 = exp2(log2(1.0 - (isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0)))) * 5.0);
    float _1826 = 1.0 - _1785;
    float _1836 = (0.5 / (((_1717 * ((_1799 * _1826) + _1785)) + 9.9999999392252902907785028219223e-09) + (((_1717 * _1826) + _1785) * _1799))) * _1799;
    float _3920 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
    float _1838 = (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0))) * (_1808 / ((_1812 * _1812) * 3.141590118408203125));
    float _1848 = (((((_1819 * _1739) + _456) * cbLight._m0[_1773].x) * _1838) * _1573) + (((((_1738 * _1739) + _456) * cbLight._m0[_1688].x) * _1762) * _1584);
    float _1849 = (((((_1819 * _1741) + _458) * cbLight._m0[_1773].y) * _1838) * _1573) + (((((_1738 * _1741) + _458) * cbLight._m0[_1688].y) * _1762) * _1584);
    float _1850 = (((((_1819 * _1742) + _459) * cbLight._m0[_1773].z) * _1838) * _1573) + (((((_1738 * _1742) + _459) * cbLight._m0[_1688].z) * _1762) * _1584);
    float _1912;
    float _1914;
    float _1916;
    if (_1625)
    {
        _1912 = _1848;
        _1914 = _1849;
        _1916 = _1850;
    }
    else
    {
        uint _1918 = _1550 + 2u;
        uint _1922 = _1550 + 10u;
        float _1936 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1918].w)) * _291) * 0.949999988079071044921875);
        float _1937 = _1936 * _1936;
        float _1938 = cbLight._m0[_1918].x + _369;
        float _1939 = cbLight._m0[_1918].y + _370;
        float _1940 = cbLight._m0[_1918].z + _371;
        float _1944 = inversesqrt(dot(vec3(_1938, _1939, _1940), vec3(_1938, _1939, _1940)));
        float _1945 = _1944 * _1938;
        float _1946 = _1944 * _1939;
        float _1947 = _1944 * _1940;
        float _1948 = dot(vec3(_288, _289, _290), vec3(cbLight._m0[_1918].xyz));
        float _3931 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
        float _1951 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
        float _1952 = dot(vec3(_288, _289, _290), vec3(_1945, _1946, _1947));
        float _3942 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
        float _1955 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
        float _1956 = dot(vec3(cbLight._m0[_1918].xyz), vec3(_1945, _1946, _1947));
        float _3953 = isnan(0.0) ? _1956 : (isnan(_1956) ? 0.0 : max(_1956, 0.0));
        float _1960 = _1937 * _1937;
        float _1964 = ((_1955 * _1955) * (_1960 + (-1.0))) + 1.0;
        float _1971 = exp2(log2(1.0 - (isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0)))) * 5.0);
        float _1978 = 1.0 - _1937;
        float _1988 = (0.5 / (((_1717 * ((_1951 * _1978) + _1937)) + 9.9999999392252902907785028219223e-09) + (((_1717 * _1978) + _1937) * _1951))) * _1951;
        float _3964 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
        float _1990 = (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * (_1960 / ((_1964 * _1964) * 3.141590118408203125));
        float _1991 = isnan(1.0) ? _1565 : (isnan(_1565) ? 1.0 : min(_1565, 1.0));
        _1912 = (((((_1971 * _1739) + _456) * cbLight._m0[_1922].x) * _1990) * _1991) + _1848;
        _1914 = (((((_1971 * _1741) + _458) * cbLight._m0[_1922].y) * _1990) * _1991) + _1849;
        _1916 = (((((_1971 * _1742) + _459) * cbLight._m0[_1922].z) * _1990) * _1991) + _1850;
    }
    float _2026;
    float _2028;
    float _2030;
    if (_1643)
    {
        _2026 = _1912;
        _2028 = _1914;
        _2030 = _1916;
    }
    else
    {
        uint _2037 = _1550 + 3u;
        uint _2041 = _1550 + 11u;
        float _2055 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2037].w)) * _291) * 0.949999988079071044921875);
        float _2056 = _2055 * _2055;
        float _2057 = cbLight._m0[_2037].x + _369;
        float _2058 = cbLight._m0[_2037].y + _370;
        float _2059 = cbLight._m0[_2037].z + _371;
        float _2063 = inversesqrt(dot(vec3(_2057, _2058, _2059), vec3(_2057, _2058, _2059)));
        float _2064 = _2063 * _2057;
        float _2065 = _2063 * _2058;
        float _2066 = _2063 * _2059;
        float _2067 = dot(vec3(_288, _289, _290), vec3(cbLight._m0[_2037].xyz));
        float _3980 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
        float _2070 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
        float _2071 = dot(vec3(_288, _289, _290), vec3(_2064, _2065, _2066));
        float _3991 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
        float _2074 = isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0));
        float _2075 = dot(vec3(cbLight._m0[_2037].xyz), vec3(_2064, _2065, _2066));
        float _4002 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
        float _2079 = _2056 * _2056;
        float _2083 = ((_2074 * _2074) * (_2079 + (-1.0))) + 1.0;
        float _2090 = exp2(log2(1.0 - (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0)))) * 5.0);
        float _2097 = 1.0 - _2056;
        float _2107 = (0.5 / (((_1717 * ((_2070 * _2097) + _2056)) + 9.9999999392252902907785028219223e-09) + (((_1717 * _2097) + _2056) * _2070))) * _2070;
        float _4013 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
        float _2109 = (isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0))) * (_2079 / ((_2083 * _2083) * 3.141590118408203125));
        float _2110 = isnan(1.0) ? _1566 : (isnan(_1566) ? 1.0 : min(_1566, 1.0));
        _2026 = (((((_2090 * _1739) + _456) * cbLight._m0[_2041].x) * _2109) * _2110) + _1912;
        _2028 = (((((_2090 * _1741) + _458) * cbLight._m0[_2041].y) * _2109) * _2110) + _1914;
        _2030 = (((((_2090 * _1742) + _459) * cbLight._m0[_2041].z) * _2109) * _2110) + _1916;
    }
    float _2244;
    float _2246;
    float _2248;
    float _2250;
    float _2252;
    float _2254;
    if (_1548.y == 0u)
    {
        float _2185 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2186 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2185;
        float _2187 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2185;
        float _2188 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2185;
        uvec4 _2200 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2201 = _2200.x;
        uint _2212 = uint((float(_2200.y) * floor(float(uint(cbSceneParam._m0[85u].y * _391) / _2201))) + floor(float(uint(cbSceneParam._m0[85u].x * _390) / _2201)));
        float _2222 = (log2(_2188 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2223 = isnan(0.0) ? _2222 : (isnan(_2222) ? 0.0 : max(_2222, 0.0));
        uint _2226 = uint(isnan(14.0) ? _2223 : (isnan(_2223) ? 14.0 : min(_2223, 14.0)));
        uvec4 _2231 = texelFetch(g_lightClusterGridBuffer, int(((_2226 << 2u) + (_2212 << 6u)) >> 2u));
        uint _2232 = _2231.x;
        uint _2233 = _2200.z;
        float _2332;
        float _2334;
        float _2336;
        float _2338;
        float _2340;
        float _2342;
        if (((((1u << ((_2233 >> 4u) & 15u)) + 4294967295u) & _2232) == 0u) || ((_2233 & 240u) == 0u))
        {
            _2332 = 0.0;
            _2334 = 0.0;
            _2336 = 0.0;
            _2338 = 0.0;
            _2340 = 0.0;
            _2342 = 0.0;
        }
        else
        {
            float _2333;
            float _2335;
            float _2337;
            float _2339;
            float _2341;
            float _2343;
            float _2484 = 0.0;
            float _2485 = 0.0;
            float _2486 = 0.0;
            float _2487 = 0.0;
            float _2488 = 0.0;
            float _2489 = 0.0;
            uint _2490 = 0u;
            uint _2499;
            bool _2500;
            for (;;)
            {
                _2499 = texelFetch(g_lightClassification, int((((_2226 << 5u) + (_2212 << 9u)) + (_2490 << 2u)) >> 2u)).x;
                _2500 = _2499 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2500)
                {
                    frontier_phi_68_pred = _2486;
                    frontier_phi_68_pred_1 = _2489;
                    frontier_phi_68_pred_2 = _2488;
                    frontier_phi_68_pred_3 = _2487;
                    frontier_phi_68_pred_4 = _2485;
                    frontier_phi_68_pred_5 = _2484;
                }
                else
                {
                    float _2629;
                    float _2630;
                    float _2631;
                    float _2632;
                    float _2633;
                    float _2634;
                    uint _2635;
                    _2629 = _2484;
                    _2630 = _2485;
                    _2631 = _2486;
                    _2632 = _2487;
                    _2633 = _2488;
                    _2634 = _2489;
                    _2635 = _2499;
                    float _2556;
                    float _2557;
                    float _2558;
                    float _2559;
                    float _2560;
                    float _2561;
                    for (;;)
                    {
                        uint _2639 = uint(findLSB(_2635)) + (_2490 << 5u);
                        uint _2636 = (_2635 + 4294967295u) & _2635;
                        uint _2641 = _2639 * 48u;
                        vec4 _2655 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2641)).x, texelFetch(g_PointLightRenderingBuffer, int(_2641 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2641 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2641 + 3u)).x));
                        uint _2661 = (_2639 * 48u) + 4u;
                        vec4 _2674 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2661)).x, texelFetch(g_PointLightRenderingBuffer, int(_2661 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2661 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2661 + 3u)).x));
                        uint _2680 = (_2639 * 48u) + 8u;
                        vec3 _2691 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2680)).x, texelFetch(g_PointLightRenderingBuffer, int(_2680 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2680 + 2u)).x));
                        float _2695 = _2655.x - _2186;
                        float _2696 = _2655.y - _2187;
                        float _2697 = _2655.z - _2188;
                        float _2698 = dot(vec3(_2695, _2696, _2697), vec3(_2695, _2696, _2697));
                        float _2701 = inversesqrt(_2698);
                        float _2702 = _2701 * _2695;
                        float _2703 = _2701 * _2696;
                        float _2704 = _2701 * _2697;
                        float _2705 = dot(vec3(_411, _414, _417), vec3(_2702, _2703, _2704));
                        float _2710 = 1.0 - (_2698 * _2655.w);
                        float _4039 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
                        float _2711 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
                        float _2712 = sqrt(_2698) * _2674.w;
                        float _2715 = 1.39999997615814208984375 / (_2712 + 1.39999997615814208984375);
                        float _2716 = _2715 * _2715;
                        float _2719 = ((1.0 - _2716) * _2705) + _2716;
                        float _2722 = _2712 * _2712;
                        float _2726 = ((isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0))) * _2711) / ((_2722 * 0.699999988079071044921875) + 1.0);
                        float _2730 = (-0.0) - _2186;
                        float _2731 = (-0.0) - _2187;
                        float _2732 = (-0.0) - _2188;
                        float _2736 = inversesqrt(dot(vec3(_2730, _2731, _2732), vec3(_2730, _2731, _2732)));
                        float _2737 = _2736 * _2730;
                        float _2738 = _2736 * _2731;
                        float _2739 = _2736 * _2732;
                        float _2747 = exp2(log2(1.0 / ((_2722 * 3.5) + 5.0)) * 0.25);
                        float _2748 = 1.0 - _487;
                        float _2755 = sqrt(1.0 - ((1.0 - (_2748 * _2748)) * (1.0 - (_2747 * _2747))));
                        float _2756 = _2755 * _2755;
                        float _2757 = _2756 * _2756;
                        float _2758 = _2737 + _2702;
                        float _2759 = _2738 + _2703;
                        float _2760 = _2739 + _2704;
                        float _2764 = inversesqrt(dot(vec3(_2758, _2759, _2760), vec3(_2758, _2759, _2760)));
                        float _2768 = dot(vec3(_411, _414, _417), vec3(_2737, _2738, _2739));
                        float _4055 = isnan(0.0) ? _2768 : (isnan(_2768) ? 0.0 : max(_2768, 0.0));
                        float _2771 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
                        float _2772 = dot(vec3(_411, _414, _417), vec3(_2764 * _2758, _2764 * _2759, _2764 * _2760));
                        float _4066 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
                        float _2775 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
                        float _2779 = ((_2775 * _2775) * (_2757 + (-1.0))) + 1.0;
                        float _2780 = _2715 * _2756;
                        float _2781 = _2780 * _2780;
                        float _2784 = ((1.0 - _2781) * _2705) + _2781;
                        float _4077 = isnan(0.0) ? _2784 : (isnan(_2784) ? 0.0 : max(_2784, 0.0));
                        float _2785 = isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0));
                        float _2786 = 1.0 - _2756;
                        float _2796 = (0.5 / (((_2785 * ((_2771 * _2786) + _2756)) + 9.9999999392252902907785028219223e-09) + (((_2785 * _2786) + _2756) * _2771))) * _2785;
                        float _4088 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
                        float _2807 = (((_2757 * 3.1415927410125732421875) * (isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0)))) / ((_2779 * _2779) * ((_2722 * 2.1991131305694580078125) + 3.141590118408203125))) * _2711;
                        _2559 = (_2726 * _2674.x) + _2632;
                        _2560 = (_2726 * _2674.y) + _2633;
                        _2561 = (_2726 * _2674.z) + _2634;
                        _2556 = (_2807 * _2691.x) + _2629;
                        _2557 = (_2807 * _2691.y) + _2630;
                        _2558 = (_2807 * _2691.z) + _2631;
                        if (_2636 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2629 = _2556;
                            _2630 = _2557;
                            _2631 = _2558;
                            _2632 = _2559;
                            _2633 = _2560;
                            _2634 = _2561;
                            _2635 = _2636;
                        }
                    }
                    frontier_phi_68_pred = _2558;
                    frontier_phi_68_pred_1 = _2561;
                    frontier_phi_68_pred_2 = _2560;
                    frontier_phi_68_pred_3 = _2559;
                    frontier_phi_68_pred_4 = _2557;
                    frontier_phi_68_pred_5 = _2556;
                }
                _2337 = frontier_phi_68_pred;
                _2343 = frontier_phi_68_pred_1;
                _2341 = frontier_phi_68_pred_2;
                _2339 = frontier_phi_68_pred_3;
                _2335 = frontier_phi_68_pred_4;
                _2333 = frontier_phi_68_pred_5;
                uint _2491 = _2490 + 1u;
                if (_2491 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2484 = _2333;
                    _2485 = _2335;
                    _2486 = _2337;
                    _2487 = _2339;
                    _2488 = _2341;
                    _2489 = _2343;
                    _2490 = _2491;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2332 = _2333;
            _2334 = _2335;
            _2336 = _2337;
            _2338 = _2339;
            _2340 = _2341;
            _2342 = _2343;
        }
        uvec4 _2346 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2347 = _2346.z;
        uint _2349 = (_2347 >> 8u) & 15u;
        float _2452;
        float _2454;
        float _2456;
        float _2458;
        float _2460;
        float _2462;
        if (((4294967295u << _2349) & _2232) == 0u)
        {
            _2452 = _2332;
            _2454 = _2334;
            _2456 = _2336;
            _2458 = _2338;
            _2460 = _2340;
            _2462 = _2342;
        }
        else
        {
            float _2477 = inversesqrt(dot(vec3(_2186, _2187, _2188), vec3(_2186, _2187, _2188)));
            float _2478 = _2477 * _2186;
            float _2479 = _2477 * _2187;
            float _2480 = _2477 * _2188;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2349 < ((_2347 >> 12u) & 15u))
            {
                float _2453;
                float _2455;
                float _2457;
                float _2459;
                float _2461;
                float _2463;
                float _2612 = _2332;
                float _2613 = _2334;
                float _2614 = _2336;
                float _2615 = _2338;
                float _2616 = _2340;
                float _2617 = _2342;
                uint _2618 = _2349;
                uint _2627;
                bool _2628;
                for (;;)
                {
                    _2627 = texelFetch(g_lightClassification, int((((_2226 << 5u) + (_2212 << 9u)) + (_2618 << 2u)) >> 2u)).x;
                    _2628 = _2627 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2628)
                    {
                        frontier_phi_79_pred = _2617;
                        frontier_phi_79_pred_1 = _2616;
                        frontier_phi_79_pred_2 = _2615;
                        frontier_phi_79_pred_3 = _2614;
                        frontier_phi_79_pred_4 = _2613;
                        frontier_phi_79_pred_5 = _2612;
                    }
                    else
                    {
                        float _2821;
                        float _2822;
                        float _2823;
                        float _2824;
                        float _2825;
                        float _2826;
                        float _3117;
                        float _3118;
                        float _3119;
                        float _3120;
                        float _3121;
                        float _3122;
                        float _2834 = _2612;
                        float _2835 = _2613;
                        float _2836 = _2614;
                        float _2837 = _2615;
                        float _2838 = _2616;
                        float _2839 = _2617;
                        uint _2840 = _2627;
                        uint _2841;
                        vec4 _2866;
                        float _2867;
                        vec4 _2882;
                        vec3 _2894;
                        vec4 _2910;
                        vec4 _2926;
                        float _2973;
                        bool _2974;
                        for (;;)
                        {
                            uint _2851 = ((_2618 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2840));
                            _2841 = (_2840 + 4294967295u) & _2840;
                            uint _2853 = _2851 * 40u;
                            _2866 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2853)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2853 + 3u)).x));
                            _2867 = _2866.w;
                            uint _2869 = (_2851 * 40u) + 4u;
                            _2882 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2869)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 3u)).x));
                            uint _2884 = (_2851 * 40u) + 8u;
                            _2894 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2884)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2884 + 2u)).x));
                            uint _2897 = (_2851 * 40u) + 16u;
                            _2910 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2897)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2897 + 3u)).x));
                            uint _2913 = (_2851 * 40u) + 20u;
                            _2926 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2913)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 3u)).x));
                            uint _2929 = (_2851 * 40u) + 24u;
                            vec4 _2942 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2929)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2929 + 3u)).x));
                            uint _2948 = (_2851 * 40u) + 28u;
                            vec4 _2961 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2948)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2948 + 3u)).x));
                            _2973 = fma(_2188, _2961.z, fma(_2187, _2961.y, _2961.x * _2186)) + _2961.w;
                            _2974 = !((fma(_2188, _2942.z, fma(_2187, _2942.y, _2942.x * _2186)) + _2942.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2974)
                            {
                                float _3001 = _2866.x - _2186;
                                float _3002 = _2866.y - _2187;
                                float _3003 = _2866.z - _2188;
                                float _3004 = dot(vec3(_3001, _3002, _3003), vec3(_3001, _3002, _3003));
                                float _3007 = inversesqrt(_3004);
                                float _3008 = _3007 * _3001;
                                float _3009 = _3007 * _3002;
                                float _3010 = _3007 * _3003;
                                float _3014 = 1.0 - (_3004 / (_2867 * _2867));
                                float _4099 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
                                float _3015 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
                                float _3019 = sqrt(_3004) * _2882.w;
                                float _3021 = 1.39999997615814208984375 / (_3019 + 1.39999997615814208984375);
                                float _3022 = _3021 * _3021;
                                float _3025 = ((1.0 - _3022) * dot(vec3(_3008, _3009, _3010), vec3(_411, _414, _417))) + _3022;
                                float _3028 = _3019 * _3019;
                                float _3032 = (fma(_2188, _2910.z, fma(_2187, _2910.y, _2910.x * _2186)) + _2910.w) / _2973;
                                float _3033 = (fma(_2188, _2926.z, fma(_2187, _2926.y, _2926.x * _2186)) + _2926.w) / _2973;
                                float _3037 = 1.0 - dot(vec2(_3032, _3033), vec2(_3032, _3033));
                                float _4115 = isnan(0.0) ? _3037 : (isnan(_3037) ? 0.0 : max(_3037, 0.0));
                                float _3038 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
                                float _3039 = _3038 * (((isnan(0.0) ? _3025 : (isnan(_3025) ? 0.0 : max(_3025, 0.0))) * _3015) / ((_3028 * 0.699999988079071044921875) + 1.0));
                                float _3051 = exp2(log2(1.0 / ((_3028 * 3.5) + 5.0)) * 0.25);
                                float _3052 = 1.0 - _487;
                                float _3059 = sqrt(1.0 - ((1.0 - (_3052 * _3052)) * (1.0 - (_3051 * _3051))));
                                float _3060 = _3059 * _3059;
                                float _3061 = _3060 * _3060;
                                float _3062 = _3008 - _2478;
                                float _3063 = _3009 - _2479;
                                float _3064 = _3010 - _2480;
                                float _3068 = inversesqrt(dot(vec3(_3062, _3063, _3064), vec3(_3062, _3063, _3064)));
                                float _3072 = dot(vec3(_411, _414, _417), vec3((-0.0) - _2478, (-0.0) - _2479, (-0.0) - _2480));
                                float _4126 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                                float _3075 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
                                float _3076 = dot(vec3(_411, _414, _417), vec3(_3068 * _3062, _3068 * _3063, _3068 * _3064));
                                float _4137 = isnan(0.0) ? _3076 : (isnan(_3076) ? 0.0 : max(_3076, 0.0));
                                float _3079 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
                                float _3083 = ((_3079 * _3079) * (_3061 + (-1.0))) + 1.0;
                                float _3084 = _3021 * _3060;
                                float _3085 = _3084 * _3084;
                                float _3091 = ((1.0 - _3085) * dot(vec3(_411, _414, _417), vec3(_3008, _3009, _3010))) + _3085;
                                float _4148 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
                                float _3092 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
                                float _3093 = 1.0 - _3060;
                                float _3103 = (0.5 / (((_3092 * ((_3075 * _3093) + _3060)) + 9.9999999392252902907785028219223e-09) + (((_3092 * _3093) + _3060) * _3075))) * _3092;
                                float _4159 = isnan(0.0) ? _3103 : (isnan(_3103) ? 0.0 : max(_3103, 0.0));
                                float _3113 = (_3038 * _3015) * (((_3061 * 3.1415927410125732421875) * (isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0)))) / ((_3083 * _3083) * ((_3028 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3039 * _2882.z;
                                frontier_phi_85_pred_1 = _3039 * _2882.y;
                                frontier_phi_85_pred_2 = _3039 * _2882.x;
                                frontier_phi_85_pred_3 = _3113 * _2894.z;
                                frontier_phi_85_pred_4 = _3113 * _2894.y;
                                frontier_phi_85_pred_5 = _3113 * _2894.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3122 = frontier_phi_85_pred;
                            _3121 = frontier_phi_85_pred_1;
                            _3120 = frontier_phi_85_pred_2;
                            _3119 = frontier_phi_85_pred_3;
                            _3118 = frontier_phi_85_pred_4;
                            _3117 = frontier_phi_85_pred_5;
                            _2824 = _3120 + _2837;
                            _2825 = _3121 + _2838;
                            _2826 = _3122 + _2839;
                            _2821 = _3117 + _2834;
                            _2822 = _3118 + _2835;
                            _2823 = _3119 + _2836;
                            if (_2841 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2834 = _2821;
                                _2835 = _2822;
                                _2836 = _2823;
                                _2837 = _2824;
                                _2838 = _2825;
                                _2839 = _2826;
                                _2840 = _2841;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2826;
                        frontier_phi_79_pred_1 = _2825;
                        frontier_phi_79_pred_2 = _2824;
                        frontier_phi_79_pred_3 = _2823;
                        frontier_phi_79_pred_4 = _2822;
                        frontier_phi_79_pred_5 = _2821;
                    }
                    _2463 = frontier_phi_79_pred;
                    _2461 = frontier_phi_79_pred_1;
                    _2459 = frontier_phi_79_pred_2;
                    _2457 = frontier_phi_79_pred_3;
                    _2455 = frontier_phi_79_pred_4;
                    _2453 = frontier_phi_79_pred_5;
                    uint _2619 = _2618 + 1u;
                    if (_2619 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2612 = _2453;
                        _2613 = _2455;
                        _2614 = _2457;
                        _2615 = _2459;
                        _2616 = _2461;
                        _2617 = _2463;
                        _2618 = _2619;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2459;
                frontier_phi_60_61_ladder_1 = _2463;
                frontier_phi_60_61_ladder_2 = _2461;
                frontier_phi_60_61_ladder_3 = _2457;
                frontier_phi_60_61_ladder_4 = _2455;
                frontier_phi_60_61_ladder_5 = _2453;
            }
            else
            {
                frontier_phi_60_61_ladder = _2338;
                frontier_phi_60_61_ladder_1 = _2342;
                frontier_phi_60_61_ladder_2 = _2340;
                frontier_phi_60_61_ladder_3 = _2336;
                frontier_phi_60_61_ladder_4 = _2334;
                frontier_phi_60_61_ladder_5 = _2332;
            }
            _2452 = frontier_phi_60_61_ladder_5;
            _2454 = frontier_phi_60_61_ladder_4;
            _2456 = frontier_phi_60_61_ladder_3;
            _2458 = frontier_phi_60_61_ladder;
            _2460 = frontier_phi_60_61_ladder_2;
            _2462 = frontier_phi_60_61_ladder_1;
        }
        float _2467 = isnan(1.0) ? _471 : (isnan(_471) ? 1.0 : min(_471, 1.0));
        _2244 = (_2467 * _2458) + _1681;
        _2246 = (_2467 * _2460) + _1683;
        _2248 = (_2467 * _2462) + _1685;
        _2250 = ((_2452 * _456) * _2467) + _2026;
        _2252 = ((_2454 * _458) * _2467) + _2028;
        _2254 = ((_2456 * _459) * _2467) + _2030;
    }
    else
    {
        _2244 = _1681;
        _2246 = _1683;
        _2248 = _1685;
        _2250 = _2026;
        _2252 = _2028;
        _2254 = _2030;
    }
    float _4175 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _4186 = isnan(0.0) ? _447 : (isnan(_447) ? 0.0 : max(_447, 0.0));
    float _4197 = isnan(0.0) ? _448 : (isnan(_448) ? 0.0 : max(_448, 0.0));
    float _2271 = ((isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (_2244 + ((isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0))) * _471))) + ((_2250 + ((isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0))) * _1313)) * cbPerFrame._m0[3u].x);
    float _2272 = ((isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * (_2246 + ((isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0))) * _471))) + ((_2252 + ((isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0))) * _1313)) * cbPerFrame._m0[3u].x);
    float _2273 = ((isnan(1.0) ? _4197 : (isnan(_4197) ? 1.0 : min(_4197, 1.0))) * (_2248 + ((isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0))) * _471))) + ((_2254 + ((isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0))) * _1313)) * cbPerFrame._m0[3u].x);
    uint _2274 = _430 + 6u;
    float _2282 = _390 / cbSceneParam._m0[86u].x;
    float _2283 = _391 / cbSceneParam._m0[86u].y;
    vec4 _2297 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2282, _2283, (log2((isnan(cbSceneParam._m0[77u].w) ? _311 : (isnan(_311) ? cbSceneParam._m0[77u].w : min(_311, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2299 = _2297.x;
    float _2300 = _2297.y;
    float _2301 = _2297.z;
    float _2302 = _2297.w;
    float _2394;
    float _2396;
    float _2398;
    float _2400;
    if (_311 > cbSceneParam._m0[78u].w)
    {
        float _2357 = isnan(_311) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _311 : min(cbSceneParam._m0[80u].w, _311));
        float _2358 = _2357 / _311;
        float _2369 = _2358 * _362;
        float _2370 = _363 * _2358;
        float _2371 = (-0.0) - _2370;
        float _2372 = _2358 * _364;
        float _2374 = (cbSceneParam._m0[77u].w * _2371) / _2357;
        float _2375 = _2374 + cbSceneParam._m0[79u].w;
        float _2376 = cbSceneParam._m0[79u].w - _2370;
        float _2382 = sqrt(((_2369 * _2369) + (_2370 * _2370)) + (_2372 * _2372));
        float _2385 = (1.0 - (cbSceneParam._m0[77u].w / _2357)) * _2382;
        float _2390 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2392 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2569;
        if (abs((_2371 - _2374) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2569 = ((((_2375 > 0.0) ? exp2(_2390 * _2375) : (2.0 - exp2(_2392 * _2375))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2385;
        }
        else
        {
            float _2513 = 1.0 / cbSceneParam._m0[80u].x;
            float _2514 = isnan(_2376) ? _2375 : (isnan(_2375) ? _2376 : max(_2375, _2376));
            float _2515 = isnan(_2376) ? _2375 : (isnan(_2375) ? _2376 : min(_2375, _2376));
            float _2524 = isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : min(_2514, 0.0));
            float _2525 = isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : min(_2515, 0.0));
            _2569 = ((abs(_2382 / _2371) * cbSceneParam._m0[80u].y) * ((((_2524 - _2525) * 2.0) - ((exp2(_2390 * (isnan(0.0) ? _2514 : (isnan(_2514) ? 0.0 : max(_2514, 0.0)))) - exp2(_2390 * (isnan(0.0) ? _2515 : (isnan(_2515) ? 0.0 : max(_2515, 0.0))))) * _2513)) - ((exp2(_2392 * _2524) - exp2(_2392 * _2525)) * _2513))) + (_2385 * cbSceneParam._m0[80u].z);
        }
        vec4 _2571 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2282, _2283, 1.0), 0.0);
        float _2580 = exp2((_2569 * (-1.44269502162933349609375)) * (1.0 - _2571.w));
        float _2581 = log2(_2580);
        float _2597 = log2(_2302);
        _2394 = (exp2(_2597 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2581 * cbSceneParam._m0[78u].x)) * _2571.x) / cbSceneParam._m0[78u].x)) + _2299;
        _2396 = (exp2(_2597 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2581 * cbSceneParam._m0[78u].y)) * _2571.y) / cbSceneParam._m0[78u].y)) + _2300;
        _2398 = (exp2(_2597 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2581 * cbSceneParam._m0[78u].z)) * _2571.z) / cbSceneParam._m0[78u].z)) + _2301;
        _2400 = _2580 * _2302;
    }
    else
    {
        _2394 = _2299;
        _2396 = _2300;
        _2398 = _2301;
        _2400 = _2302;
    }
    bool _2607;
    vec4 _2410;
    vec4 _2432;
    float _2434;
    float _2438;
    float _2439;
    float _2440;
    float _2441;
    bool _2451;
    for (;;)
    {
        _2410 = cbMatDynParam._m0[0u];
        float _2412 = roundEven(_2410.y);
        bool _2413 = _2412 == 3.0;
        float _2414 = log2(_2400);
        float _2421 = exp2(_2414 * cbSceneParam._m0[78u].x) * _2271;
        float _2422 = exp2(_2414 * cbSceneParam._m0[78u].y) * _2272;
        float _2423 = exp2(_2414 * cbSceneParam._m0[78u].z) * _2273;
        float _2430 = _378 + (-0.5);
        _2432 = cbMtdParam._m0[1u];
        _2434 = _2432.y * _2430;
        float _2437 = (_2412 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2438 = _2437 * (_2413 ? _2421 : (_2421 + (cbSceneParam._m0[72u].w * _2394)));
        _2439 = _2437 * (_2413 ? _2422 : (_2422 + (cbSceneParam._m0[72u].w * _2396)));
        _2440 = _2437 * (_2413 ? _2423 : (_2423 + (cbSceneParam._m0[72u].w * _2398)));
        _2441 = _2430 * 0.999000012874603271484375;
        _2451 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2451)
        {
            if ((cbInstanceData._m0[_430 + 7u].x + _2441) < 0.5)
            {
                _2607 = true;
                break;
            }
        }
        uint _2548 = _432 + uint(_2410.w);
        if ((cbInstanceData._m0[_2548].w < 1.0) && ((cbInstanceData._m0[_2548].w + _2441) < 0.5))
        {
            _2607 = true;
            break;
        }
        if ((_2434 + 1.0) < _2432.x)
        {
            _2607 = true;
            break;
        }
        _2607 = false;
        break;
    }
    float _2812;
    if (_2607)
    {
        discard_state = true;
        _2812 = 0.0;
    }
    else
    {
        _2812 = cbInstanceData._m0[_2274].w;
    }
    SV_Target.x = _2438;
    SV_Target.y = _2439;
    SV_Target.z = _2440;
    SV_Target.w = _2812;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2274].w;
    discard_exit();
}


