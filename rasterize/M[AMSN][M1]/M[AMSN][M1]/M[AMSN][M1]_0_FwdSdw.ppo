#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _851;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _213;
    float _214;
    float _215;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
    }
    else
    {
        _213 = _199;
        _214 = _200;
        _215 = _201;
    }
    vec4 _235 = texture(sampler2D(M_AMSN_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _241 = _235.x * cbMtdParam._m0[9u].x;
    float _242 = _235.y * cbMtdParam._m0[9u].y;
    float _243 = _235.z * cbMtdParam._m0[9u].z;
    vec4 _255 = texture(sampler2D(M_AMSN_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _262 = cbMtdParam._m0[10u].x + _255.x;
    vec4 _274 = texture(sampler2D(M_AMSN_M1_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _278 = _274.z;
    float _282 = (_274.x * 2.0) + (-1.0);
    float _284 = (_274.y * 2.0) + (-1.0);
    float _285 = dot(vec2(_282, _284), vec2(_282, _284));
    float _3471 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    float _291 = sqrt(1.0 - (isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0))));
    float _294 = fma(_291, _213, fma(_284, _205 * TANGENT.x, (_191 * _184) * _282));
    float _297 = fma(_291, _214, fma(_284, _205 * TANGENT.y, (_191 * _185) * _282));
    float _300 = fma(_291, _215, fma(_284, _205 * TANGENT.z, (_191 * _186) * _282));
    float _304 = inversesqrt(dot(vec3(_294, _297, _300), vec3(_294, _297, _300)));
    float _305 = _304 * _294;
    float _306 = _304 * _297;
    float _307 = _304 * _300;
    float _3482 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _308 = isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0));
    float _3493 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3504 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3515 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3526 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _312 = isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0));
    float _328 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _369 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _379 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _369);
    float _380 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _369);
    float _381 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _369);
    float _385 = inversesqrt(dot(vec3(_379, _380, _381), vec3(_379, _380, _381)));
    float _386 = _379 * _385;
    float _387 = _380 * _385;
    float _388 = _381 * _385;
    float _394 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _395 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _416 = fma(_307, cbSceneParam._m0[5u].z, fma(_306, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _305));
    float _419 = fma(_307, cbSceneParam._m0[6u].z, fma(_306, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _305));
    float _422 = fma(_307, cbSceneParam._m0[7u].z, fma(_306, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _305));
    uint _435 = uint(roundEven(NORMAL.w)) * 13u;
    uint _438 = (_435 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _444 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0)))) * cbInstanceData._m0[_438].x;
    float _445 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0)))) * cbInstanceData._m0[_438].y;
    float _446 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0)))) * cbInstanceData._m0[_438].z;
    float _3537 = isnan(0.0) ? _444 : (isnan(_444) ? 0.0 : max(_444, 0.0));
    float _447 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
    float _3548 = isnan(0.0) ? _445 : (isnan(_445) ? 0.0 : max(_445, 0.0));
    float _448 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
    float _3559 = isnan(0.0) ? _446 : (isnan(_446) ? 0.0 : max(_446, 0.0));
    float _449 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
    float _450 = 1.0 - _312;
    float _451 = _447 * _450;
    float _452 = _448 * _450;
    float _453 = _449 * _450;
    float _458 = (_447 + (-0.039999999105930328369140625)) * _312;
    float _459 = (_448 + (-0.039999999105930328369140625)) * _312;
    float _460 = (_449 + (-0.039999999105930328369140625)) * _312;
    float _461 = _458 + 0.039999999105930328369140625;
    float _463 = _459 + 0.039999999105930328369140625;
    float _464 = _460 + 0.039999999105930328369140625;
    vec4 _473 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _394, cbSceneParam._m0[86u].y * _395));
    float _476 = _473.x * TEXCOORD.z;
    float _477 = dot(vec3(_305, _306, _307), vec3(_386, _387, _388));
    float _480 = _477 * 2.0;
    float _484 = (_480 * _305) - _386;
    float _485 = (_480 * _306) - _387;
    float _486 = (_480 * _307) - _388;
    float _490 = abs(dot(vec3(_386, _387, _388), vec3(_305, _306, _307)));
    float _3570 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _492 = sqrt(_308);
    float _505 = exp2((_492 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_492 * 3.0));
    float _511 = (1.0 - _505) * ((_492 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _512 = _505 * _492;
    float _540 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _544 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _548 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _850;
    float _852;
    float _853;
    float _854;
    float _855;
    float _856;
    float _857;
    float _858;
    float _859;
    float _860;
    float _861;
    float _862;
    float _863;
    float _864;
    float _865;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _575 = fma(_548, cbModelParam._m0[26u].z, fma(_544, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _540));
        float _579 = fma(_548, cbModelParam._m0[27u].z, fma(_544, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _540));
        float _583 = fma(_548, cbModelParam._m0[28u].z, fma(_544, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _540));
        float _608 = _540 + _305;
        float _609 = _544 + _306;
        float _610 = _548 + _307;
        float _620 = fma(_610, cbModelParam._m0[26u].z, fma(_609, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _608)) - _575;
        float _621 = fma(_610, cbModelParam._m0[27u].z, fma(_609, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _608)) - _579;
        float _622 = fma(_610, cbModelParam._m0[28u].z, fma(_609, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _608)) - _583;
        float _626 = inversesqrt(dot(vec3(_620, _621, _622), vec3(_620, _621, _622)));
        float _639 = ((_626 * _620) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_575 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _640 = ((_626 * _621) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_579 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _641 = ((_626 * _622) / cbModelParam._m0[34u].z) + ((((((_583 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _644 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_639, _640, _641), 0.0);
        vec4 _651 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_639, _640, _641), 0.0);
        vec4 _658 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_639, _640, _641), 0.0);
        vec4 _665 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_639, _640, _641), 0.0);
        float _678 = exp2((_644.w + (-0.5)) * 20.0) * 2.0;
        float _679 = _678 * (_644.x + (-0.5));
        float _680 = _678 * (_644.y + (-0.5));
        float _681 = _678 * (_644.z + (-0.5));
        float _688 = exp2((_651.w + (-0.5)) * 20.0) * 2.0;
        float _689 = _688 * (_651.x + (-0.5));
        float _690 = _688 * (_651.y + (-0.5));
        float _691 = _688 * (_651.z + (-0.5));
        float _698 = exp2((_658.w + (-0.5)) * 20.0) * 2.0;
        float _699 = _698 * (_658.x + (-0.5));
        float _700 = _698 * (_658.y + (-0.5));
        float _701 = _698 * (_658.z + (-0.5));
        float _708 = exp2((_665.w + (-0.5)) * 20.0) * 2.0;
        float _709 = _708 * (_665.x + (-0.5));
        float _710 = _708 * (_665.y + (-0.5));
        float _711 = _708 * (_665.z + (-0.5));
        float _712 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
        float _713 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
        float _714 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
        float _715 = _679 * 0.5;
        float _716 = _689 * 0.5;
        float _717 = _699 * 0.5;
        float _718 = dot(vec3(_715, _716, _717), vec3(_715, _716, _717));
        float _723 = (_718 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_718);
        float _732 = (dot(vec3(_305, _306, _307), vec3(_723 * _715, _723 * _716, _723 * _717)) + 1.0) * 0.5;
        float _3596 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
        float _742 = sqrt(((_716 * _716) + (_715 * _715)) + (_717 * _717)) / (_712 + 9.9999997473787516355514526367188e-06);
        float _3607 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
        float _743 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _744 = _743 * 2.0;
        float _748 = (1.0 - _743) / (_743 + 1.0);
        float _3618 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        float _749 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _758 = ((((1.0 - _749) * (_744 + 2.0)) * exp2(log2(isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0))) * (_744 + 1.0))) + _749) * _712;
        float _759 = _680 * 0.5;
        float _760 = _690 * 0.5;
        float _761 = _700 * 0.5;
        float _762 = dot(vec3(_759, _760, _761), vec3(_759, _760, _761));
        float _767 = (_762 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_762);
        float _775 = (dot(vec3(_305, _306, _307), vec3(_767 * _759, _767 * _760, _767 * _761)) + 1.0) * 0.5;
        float _3629 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _784 = sqrt(((_760 * _760) + (_759 * _759)) + (_761 * _761)) / (_713 + 9.9999997473787516355514526367188e-06);
        float _3640 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _785 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _786 = _785 * 2.0;
        float _790 = (1.0 - _785) / (_785 + 1.0);
        float _3651 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        float _791 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _800 = ((((1.0 - _791) * (_786 + 2.0)) * exp2(log2(isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * (_786 + 1.0))) + _791) * _713;
        float _801 = _681 * 0.5;
        float _802 = _691 * 0.5;
        float _803 = _701 * 0.5;
        float _804 = dot(vec3(_801, _802, _803), vec3(_801, _802, _803));
        float _809 = (_804 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_804);
        float _817 = (dot(vec3(_305, _306, _307), vec3(_809 * _801, _809 * _802, _809 * _803)) + 1.0) * 0.5;
        float _3662 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _826 = sqrt(((_802 * _802) + (_801 * _801)) + (_803 * _803)) / (_714 + 9.9999997473787516355514526367188e-06);
        float _3673 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _827 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _828 = _827 * 2.0;
        float _832 = (1.0 - _827) / (_827 + 1.0);
        float _3684 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _833 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _842 = ((((1.0 - _833) * (_828 + 2.0)) * exp2(log2(isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))) * (_828 + 1.0))) + _833) * _714;
        _850 = _681;
        _852 = _680;
        _853 = _679;
        _854 = _691;
        _855 = _690;
        _856 = _689;
        _857 = _701;
        _858 = _700;
        _859 = _699;
        _860 = _714;
        _861 = _713;
        _862 = _712;
        _863 = cbModelParam._m0[36u].z * (isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0)));
        _864 = cbModelParam._m0[36u].z * (isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0)));
        _865 = cbModelParam._m0[36u].z * (isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0)));
    }
    else
    {
        _850 = _851;
        _852 = _851;
        _853 = _851;
        _854 = _851;
        _855 = _851;
        _856 = _851;
        _857 = _851;
        _858 = _851;
        _859 = _851;
        _860 = _851;
        _861 = _851;
        _862 = _851;
        _863 = 0.0;
        _864 = 0.0;
        _865 = 0.0;
    }
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _891 = fma(_548, cbModelParam._m0[30u].z, fma(_544, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _540));
        float _895 = fma(_548, cbModelParam._m0[31u].z, fma(_544, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _540));
        float _899 = fma(_548, cbModelParam._m0[32u].z, fma(_544, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _540));
        float _922 = _540 + _305;
        float _923 = _544 + _306;
        float _924 = _548 + _307;
        float _934 = fma(_924, cbModelParam._m0[30u].z, fma(_923, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _922)) - _891;
        float _935 = fma(_924, cbModelParam._m0[31u].z, fma(_923, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _922)) - _895;
        float _936 = fma(_924, cbModelParam._m0[32u].z, fma(_923, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _922)) - _899;
        float _940 = inversesqrt(dot(vec3(_934, _935, _936), vec3(_934, _935, _936)));
        float _953 = ((_940 * _934) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_891 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _954 = ((_940 * _935) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_895 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _955 = ((_940 * _936) / cbModelParam._m0[35u].z) + ((((((_899 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _957 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_953, _954, _955), 0.0);
        vec4 _964 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_953, _954, _955), 0.0);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_953, _954, _955), 0.0);
        vec4 _978 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_953, _954, _955), 0.0);
        float _990 = exp2((_957.w + (-0.5)) * 20.0) * 2.0;
        float _991 = _990 * (_957.x + (-0.5));
        float _992 = _990 * (_957.y + (-0.5));
        float _993 = _990 * (_957.z + (-0.5));
        float _1000 = exp2((_964.w + (-0.5)) * 20.0) * 2.0;
        float _1001 = _1000 * (_964.x + (-0.5));
        float _1002 = _1000 * (_964.y + (-0.5));
        float _1003 = _1000 * (_964.z + (-0.5));
        float _1010 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1011 = _1010 * (_971.x + (-0.5));
        float _1012 = _1010 * (_971.y + (-0.5));
        float _1013 = _1010 * (_971.z + (-0.5));
        float _1020 = exp2((_978.w + (-0.5)) * 20.0) * 2.0;
        float _1021 = _1020 * (_978.x + (-0.5));
        float _1022 = _1020 * (_978.y + (-0.5));
        float _1023 = _1020 * (_978.z + (-0.5));
        float _1024 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1025 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1026 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1027 = _991 * 0.5;
        float _1028 = _1001 * 0.5;
        float _1029 = _1011 * 0.5;
        float _1030 = dot(vec3(_1027, _1028, _1029), vec3(_1027, _1028, _1029));
        float _1035 = (_1030 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1030);
        float _1043 = (dot(vec3(_305, _306, _307), vec3(_1035 * _1027, _1035 * _1028, _1035 * _1029)) + 1.0) * 0.5;
        float _3725 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1052 = sqrt(((_1028 * _1028) + (_1027 * _1027)) + (_1029 * _1029)) / (_1024 + 9.9999997473787516355514526367188e-06);
        float _3736 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _1054 = _1053 * 2.0;
        float _1058 = (1.0 - _1053) / (_1053 + 1.0);
        float _3747 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1068 = ((((1.0 - _1059) * (_1054 + 2.0)) * exp2(log2(isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * (_1054 + 1.0))) + _1059) * _1024;
        float _1069 = _992 * 0.5;
        float _1070 = _1002 * 0.5;
        float _1071 = _1012 * 0.5;
        float _1072 = dot(vec3(_1069, _1070, _1071), vec3(_1069, _1070, _1071));
        float _1077 = (_1072 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1072);
        float _1085 = (dot(vec3(_305, _306, _307), vec3(_1077 * _1069, _1077 * _1070, _1077 * _1071)) + 1.0) * 0.5;
        float _3758 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1094 = sqrt(((_1070 * _1070) + (_1069 * _1069)) + (_1071 * _1071)) / (_1025 + 9.9999997473787516355514526367188e-06);
        float _3769 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
        float _1096 = _1095 * 2.0;
        float _1100 = (1.0 - _1095) / (_1095 + 1.0);
        float _3780 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1110 = ((((1.0 - _1101) * (_1096 + 2.0)) * exp2(log2(isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * (_1096 + 1.0))) + _1101) * _1025;
        float _1111 = _993 * 0.5;
        float _1112 = _1003 * 0.5;
        float _1113 = _1013 * 0.5;
        float _1114 = dot(vec3(_1111, _1112, _1113), vec3(_1111, _1112, _1113));
        float _1119 = (_1114 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1114);
        float _1127 = (dot(vec3(_305, _306, _307), vec3(_1119 * _1111, _1119 * _1112, _1119 * _1113)) + 1.0) * 0.5;
        float _3791 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1136 = sqrt(((_1112 * _1112) + (_1111 * _1111)) + (_1113 * _1113)) / (_1026 + 9.9999997473787516355514526367188e-06);
        float _3802 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
        float _1138 = _1137 * 2.0;
        float _1142 = (1.0 - _1137) / (_1137 + 1.0);
        float _3813 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0));
        float _1152 = ((((1.0 - _1143) * (_1138 + 2.0)) * exp2(log2(isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0))) * (_1138 + 1.0))) + _1143) * _1026;
        _1160 = _993;
        _1161 = _992;
        _1162 = _991;
        _1163 = _1003;
        _1164 = _1002;
        _1165 = _1001;
        _1166 = _1013;
        _1167 = _1012;
        _1168 = _1011;
        _1169 = _1026;
        _1170 = _1025;
        _1171 = _1024;
        _1172 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0)));
        _1173 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0)));
        _1174 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0)));
    }
    else
    {
        _1160 = _851;
        _1161 = _851;
        _1162 = _851;
        _1163 = _851;
        _1164 = _851;
        _1165 = _851;
        _1166 = _851;
        _1167 = _851;
        _1168 = _851;
        _1169 = _851;
        _1170 = _851;
        _1171 = _851;
        _1172 = 0.0;
        _1173 = 0.0;
        _1174 = 0.0;
    }
    float _1184 = (cbModelParam._m0[1u].x * (_1172 - _863)) + _863;
    float _1185 = (cbModelParam._m0[1u].x * (_1173 - _864)) + _864;
    float _1186 = (cbModelParam._m0[1u].x * (_1174 - _865)) + _865;
    float _1207 = fma(_1186, cbSceneParam._m0[89u].z, fma(_1185, cbSceneParam._m0[89u].y, _1184 * cbSceneParam._m0[89u].x));
    float _1210 = fma(_1186, cbSceneParam._m0[90u].z, fma(_1185, cbSceneParam._m0[90u].y, _1184 * cbSceneParam._m0[90u].x));
    float _1213 = fma(_1186, cbSceneParam._m0[91u].z, fma(_1185, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1184));
    float _1228 = _484 * 0.5;
    float _1229 = _485 * 0.5;
    float _1230 = _486 * 0.5;
    float _1231 = dot(vec4(_1228, _1229, _1230, 1.0), vec4(_1162, _1165, _1168, _1171));
    float _1234 = dot(vec4(_1228, _1229, _1230, 1.0), vec4(_1161, _1164, _1167, _1170));
    float _1237 = dot(vec4(_1228, _1229, _1230, 1.0), vec4(_1160, _1163, _1166, _1169));
    float _1271;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1244 = dot(vec4(_1228, _1229, _1230, 1.0), vec4(_850, _854, _857, _860));
        float _1248 = dot(vec4(_1228, _1229, _1230, 1.0), vec4(_852, _855, _858, _861));
        float _1252 = dot(vec4(_1228, _1229, _1230, 1.0), vec4(_853, _856, _859, _862));
        float _1259 = dot(vec4(cbModelParam._m0[39u]), vec4(_1228, _1229, _1230, 1.0));
        _1271 = dot(vec3(isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0)), isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)), isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1259) ? 0.0 : (isnan(0.0) ? _1259 : max(0.0, _1259))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1271 = 1.0;
    }
    float _1282;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1273 = dot(vec4(cbModelParam._m0[40u]), vec4(_1228, _1229, _1230, 1.0));
        _1282 = dot(vec3(isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)), isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0)), isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1273) ? 0.0 : (isnan(0.0) ? _1273 : max(0.0, _1273))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1282 = 1.0;
    }
    float _1286 = (_1282 * cbModelParam._m0[1u].x) + (_1271 * (1.0 - cbModelParam._m0[1u].x));
    float _1296 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _308);
    float _1297 = isnan(_1296) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1296 : min(cbModelParam._m0[25u].z, _1296));
    float _1379;
    float _1381;
    float _1383;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1346 = fma(_548, cbModelParam._m0[13u].z, fma(_544, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _540)) + cbModelParam._m0[13u].w;
        float _1350 = fma(_548, cbModelParam._m0[14u].z, fma(_544, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _540)) + cbModelParam._m0[14u].w;
        float _1354 = fma(_548, cbModelParam._m0[15u].z, fma(_544, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _540)) + cbModelParam._m0[15u].w;
        float _1357 = fma(_486, cbModelParam._m0[13u].z, fma(_485, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _484));
        float _1360 = fma(_486, cbModelParam._m0[14u].z, fma(_485, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _484));
        float _1363 = fma(_486, cbModelParam._m0[15u].z, fma(_485, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _484));
        float _1391;
        if (_1357 > 0.0)
        {
            _1391 = abs((1.0 - _1346) / _1357);
        }
        else
        {
            float frontier_phi_16_14_ladder;
            if (_1357 < 0.0)
            {
                frontier_phi_16_14_ladder = abs((_1346 + 1.0) / _1357);
            }
            else
            {
                frontier_phi_16_14_ladder = 5000.0;
            }
            _1391 = frontier_phi_16_14_ladder;
        }
        float _1567;
        if (_1360 > 0.0)
        {
            _1567 = abs((1.0 - _1350) / _1360);
        }
        else
        {
            float frontier_phi_25_21_ladder;
            if (_1360 < 0.0)
            {
                frontier_phi_25_21_ladder = abs((_1350 + 1.0) / _1360);
            }
            else
            {
                frontier_phi_25_21_ladder = 5000.0;
            }
            _1567 = frontier_phi_25_21_ladder;
        }
        float _1863;
        if (_1363 > 0.0)
        {
            _1863 = abs((1.0 - _1354) / _1363);
        }
        else
        {
            float frontier_phi_37_32_ladder;
            if (_1363 < 0.0)
            {
                frontier_phi_37_32_ladder = abs((_1354 + 1.0) / _1363);
            }
            else
            {
                frontier_phi_37_32_ladder = 5000.0;
            }
            _1863 = frontier_phi_37_32_ladder;
        }
        float _1865 = isnan(_1567) ? _1391 : (isnan(_1391) ? _1567 : min(_1391, _1567));
        float _1866 = isnan(_1863) ? _1865 : (isnan(_1865) ? _1863 : min(_1865, _1863));
        float _1870 = (_1866 * _1357) + _1346;
        float _1871 = (_1866 * _1360) + _1350;
        float _1872 = (_1866 * _1363) + _1354;
        float _1873 = _1866 * 9.9999997473787516355514526367188e-05;
        float _1875 = (-1.0) - _1873;
        float _1877 = _1873 + 1.0;
        float frontier_phi_15_37_ladder;
        float frontier_phi_15_37_ladder_1;
        float frontier_phi_15_37_ladder_2;
        if ((_1872 > _1877) || ((_1872 < _1875) || ((_1871 > _1877) || ((_1871 < _1875) || ((_1870 < _1875) || (_1870 > _1877))))))
        {
            frontier_phi_15_37_ladder = 0.0;
            frontier_phi_15_37_ladder_1 = 0.0;
            frontier_phi_15_37_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2017 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1872, cbModelParam._m0[9u].z, fma(_1871, cbModelParam._m0[9u].y, _1870 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1872, cbModelParam._m0[10u].z, fma(_1871, cbModelParam._m0[10u].y, _1870 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1872, cbModelParam._m0[11u].z, fma(_1871, cbModelParam._m0[11u].y, _1870 * cbModelParam._m0[11u].x))), _1297);
            frontier_phi_15_37_ladder = _2017.y * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_1 = _2017.x * cbModelParam._m0[1u].y;
            frontier_phi_15_37_ladder_2 = _2017.z * cbModelParam._m0[1u].y;
        }
        _1379 = frontier_phi_15_37_ladder_1;
        _1381 = frontier_phi_15_37_ladder;
        _1383 = frontier_phi_15_37_ladder_2;
    }
    else
    {
        vec4 _1367 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_484, _485, _486), _1297);
        _1379 = _1367.x * cbModelParam._m0[1u].y;
        _1381 = _1367.y * cbModelParam._m0[1u].y;
        _1383 = _1367.z * cbModelParam._m0[1u].y;
    }
    float _1387 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _308);
    float _1388 = isnan(_1387) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1387 : min(cbModelParam._m0[25u].w, _1387));
    float _1481;
    float _1483;
    float _1485;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1445 = fma(_548, cbModelParam._m0[21u].z, fma(_544, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _540)) + cbModelParam._m0[21u].w;
        float _1449 = fma(_548, cbModelParam._m0[22u].z, fma(_544, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _540)) + cbModelParam._m0[22u].w;
        float _1453 = fma(_548, cbModelParam._m0[23u].z, fma(_544, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _540)) + cbModelParam._m0[23u].w;
        float _1456 = fma(_486, cbModelParam._m0[21u].z, fma(_485, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _484));
        float _1459 = fma(_486, cbModelParam._m0[22u].z, fma(_485, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _484));
        float _1462 = fma(_486, cbModelParam._m0[23u].z, fma(_485, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _484));
        float _1572;
        if (_1456 > 0.0)
        {
            _1572 = abs((1.0 - _1445) / _1456);
        }
        else
        {
            float frontier_phi_27_23_ladder;
            if (_1456 < 0.0)
            {
                frontier_phi_27_23_ladder = abs((_1445 + 1.0) / _1456);
            }
            else
            {
                frontier_phi_27_23_ladder = 5000.0;
            }
            _1572 = frontier_phi_27_23_ladder;
        }
        float _1890;
        if (_1459 > 0.0)
        {
            _1890 = abs((1.0 - _1449) / _1459);
        }
        else
        {
            float frontier_phi_39_34_ladder;
            if (_1459 < 0.0)
            {
                frontier_phi_39_34_ladder = abs((_1449 + 1.0) / _1459);
            }
            else
            {
                frontier_phi_39_34_ladder = 5000.0;
            }
            _1890 = frontier_phi_39_34_ladder;
        }
        float _2228;
        if (_1462 > 0.0)
        {
            _2228 = abs((1.0 - _1453) / _1462);
        }
        else
        {
            float frontier_phi_49_46_ladder;
            if (_1462 < 0.0)
            {
                frontier_phi_49_46_ladder = abs((_1453 + 1.0) / _1462);
            }
            else
            {
                frontier_phi_49_46_ladder = 5000.0;
            }
            _2228 = frontier_phi_49_46_ladder;
        }
        float _2230 = isnan(_1890) ? _1572 : (isnan(_1572) ? _1890 : min(_1572, _1890));
        float _2231 = isnan(_2228) ? _2230 : (isnan(_2230) ? _2228 : min(_2230, _2228));
        float _2235 = (_2231 * _1456) + _1445;
        float _2236 = (_2231 * _1459) + _1449;
        float _2237 = (_2231 * _1462) + _1453;
        float _2238 = _2231 * 9.9999997473787516355514526367188e-05;
        float _2239 = (-1.0) - _2238;
        float _2241 = _2238 + 1.0;
        float frontier_phi_24_49_ladder;
        float frontier_phi_24_49_ladder_1;
        float frontier_phi_24_49_ladder_2;
        if ((_2237 > _2241) || ((_2237 < _2239) || ((_2236 > _2241) || ((_2236 < _2239) || ((_2235 < _2239) || (_2235 > _2241))))))
        {
            frontier_phi_24_49_ladder = 0.0;
            frontier_phi_24_49_ladder_1 = 0.0;
            frontier_phi_24_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2359 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2237, cbModelParam._m0[17u].z, fma(_2236, cbModelParam._m0[17u].y, _2235 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2237, cbModelParam._m0[18u].z, fma(_2236, cbModelParam._m0[18u].y, _2235 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2237, cbModelParam._m0[19u].z, fma(_2236, cbModelParam._m0[19u].y, _2235 * cbModelParam._m0[19u].x))), _1388);
            frontier_phi_24_49_ladder = _2359.z * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_1 = _2359.y * cbModelParam._m0[1u].z;
            frontier_phi_24_49_ladder_2 = _2359.x * cbModelParam._m0[1u].z;
        }
        _1481 = frontier_phi_24_49_ladder_2;
        _1483 = frontier_phi_24_49_ladder_1;
        _1485 = frontier_phi_24_49_ladder;
    }
    else
    {
        vec4 _1465 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_484, _485, _486), _1388);
        _1481 = _1465.x * cbModelParam._m0[1u].z;
        _1483 = _1465.y * cbModelParam._m0[1u].z;
        _1485 = _1465.z * cbModelParam._m0[1u].z;
    }
    float _1498 = (((_511 * _461) + _512) * _476) * ((cbModelParam._m0[1u].w * (_1481 - _1379)) + _1379);
    float _1500 = (((_511 * _463) + _512) * _476) * ((cbModelParam._m0[1u].w * (_1483 - _1381)) + _1381);
    float _1502 = (((_511 * _464) + _512) * _476) * ((cbModelParam._m0[1u].w * (_1485 - _1383)) + _1383);
    float _1505 = fma(_1502, cbSceneParam._m0[89u].z, fma(_1500, cbSceneParam._m0[89u].y, _1498 * cbSceneParam._m0[89u].x));
    float _1508 = fma(_1502, cbSceneParam._m0[90u].z, fma(_1500, cbSceneParam._m0[90u].y, _1498 * cbSceneParam._m0[90u].x));
    float _1511 = fma(_1502, cbSceneParam._m0[91u].z, fma(_1500, cbSceneParam._m0[91u].y, _1498 * cbSceneParam._m0[91u].x));
    float _1546 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1550 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1554 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1558 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1559 = _1546 / _1558;
    float _1560 = _1550 / _1558;
    float _1561 = _1554 / _1558;
    float _1708;
    float _1709;
    float _1710;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1588 = ((uint(_1561 > cbSceneParam._m0[59u].y) + uint(_1561 > cbSceneParam._m0[59u].x)) + uint(_1561 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1589 = _1588 + 43u;
        uint _1597 = _1588 + 44u;
        uint _1605 = _1588 + 45u;
        uint _1613 = _1588 + 46u;
        float _1624 = fma(_1558, cbSceneParam._m0[_1589].w, fma(_1554, cbSceneParam._m0[_1589].z, fma(_1550, cbSceneParam._m0[_1589].y, _1546 * cbSceneParam._m0[_1589].x)));
        float _1628 = fma(_1558, cbSceneParam._m0[_1597].w, fma(_1554, cbSceneParam._m0[_1597].z, fma(_1550, cbSceneParam._m0[_1597].y, _1546 * cbSceneParam._m0[_1597].x)));
        float _1636 = fma(_1558, cbSceneParam._m0[_1613].w, fma(_1554, cbSceneParam._m0[_1613].z, fma(_1550, cbSceneParam._m0[_1613].y, _1546 * cbSceneParam._m0[_1613].x)));
        float _1641 = cbSceneParam._m0[33u].z * _1636;
        float _1643 = cbSceneParam._m0[33u].w * _1636;
        float _1646 = fma(_1558, cbSceneParam._m0[_1605].w, fma(_1554, cbSceneParam._m0[_1605].z, fma(_1550, cbSceneParam._m0[_1605].y, _1546 * cbSceneParam._m0[_1605].x))) / _1636;
        float _1694 = (cbSceneParam._m0[33u].x - sqrt(((_1560 * _1560) + (_1559 * _1559)) + (_1561 * _1561))) * cbSceneParam._m0[33u].y;
        float _3939 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
        float _1701 = (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1641 + _1624) / _1636, (_1643 + _1628) / _1636), _1646), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1643 + _1624) / _1636, (_1628 - _1641) / _1636), _1646), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1624 - _1641) / _1636, (_1628 - _1643) / _1636), _1646), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1624 - _1643) / _1636, (_1641 + _1628) / _1636), _1646), 0.0)).x), vec4(0.25)));
        _1708 = 1.0 - (_1701 * cbSceneParam._m0[34u].x);
        _1709 = 1.0 - (_1701 * cbSceneParam._m0[34u].y);
        _1710 = 1.0 - (_1701 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1708 = 1.0;
        _1709 = 1.0;
        _1710 = 1.0;
    }
    float _1774;
    float _1776;
    float _1778;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1762 = fma(_1558, cbSceneParam._m0[63u].w, fma(_1554, cbSceneParam._m0[63u].z, fma(_1550, cbSceneParam._m0[63u].y, _1546 * cbSceneParam._m0[63u].x)));
        float _1763 = fma(_1558, cbSceneParam._m0[60u].w, fma(_1554, cbSceneParam._m0[60u].z, fma(_1550, cbSceneParam._m0[60u].y, _1546 * cbSceneParam._m0[60u].x))) / _1762;
        float _1764 = fma(_1558, cbSceneParam._m0[61u].w, fma(_1554, cbSceneParam._m0[61u].z, fma(_1550, cbSceneParam._m0[61u].y, _1546 * cbSceneParam._m0[61u].x))) / _1762;
        float frontier_phi_36_35_ladder;
        float frontier_phi_36_35_ladder_1;
        float frontier_phi_36_35_ladder_2;
        if ((((_1763 >= cbSceneParam._m0[64u].x) && (_1764 >= cbSceneParam._m0[64u].y)) && (_1763 <= cbSceneParam._m0[64u].z)) && (_1764 <= cbSceneParam._m0[64u].w))
        {
            float _1903 = fma(_1558, cbSceneParam._m0[62u].w, fma(_1554, cbSceneParam._m0[62u].z, fma(_1550, cbSceneParam._m0[62u].y, _1546 * cbSceneParam._m0[62u].x))) / _1762;
            float _1907 = isnan(cbSceneParam._m0[41u].w) ? _1903 : (isnan(_1903) ? cbSceneParam._m0[41u].w : max(_1903, cbSceneParam._m0[41u].w));
            float _1950 = (cbSceneParam._m0[33u].x - sqrt(((_1560 * _1560) + (_1559 * _1559)) + (_1561 * _1561))) * cbSceneParam._m0[33u].y;
            float _3955 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
            float _1957 = (isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1763, cbSceneParam._m0[33u].w + _1764), _1907), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1763, _1764 - cbSceneParam._m0[33u].z), _1907), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1763 - cbSceneParam._m0[33u].z, _1764 - cbSceneParam._m0[33u].w), _1907), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1763 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1764), _1907), 0.0)).x), vec4(0.25)));
            float _1961 = 1.0 - (_1957 * cbSceneParam._m0[34u].x);
            float _1962 = 1.0 - (_1957 * cbSceneParam._m0[34u].y);
            float _1963 = 1.0 - (_1957 * cbSceneParam._m0[34u].z);
            frontier_phi_36_35_ladder = isnan(_1962) ? _1709 : (isnan(_1709) ? _1962 : min(_1709, _1962));
            frontier_phi_36_35_ladder_1 = isnan(_1963) ? _1710 : (isnan(_1710) ? _1963 : min(_1710, _1963));
            frontier_phi_36_35_ladder_2 = isnan(_1961) ? _1708 : (isnan(_1708) ? _1961 : min(_1708, _1961));
        }
        else
        {
            frontier_phi_36_35_ladder = _1709;
            frontier_phi_36_35_ladder_1 = _1710;
            frontier_phi_36_35_ladder_2 = _1708;
        }
        _1774 = frontier_phi_36_35_ladder_2;
        _1776 = frontier_phi_36_35_ladder;
        _1778 = frontier_phi_36_35_ladder_1;
    }
    else
    {
        _1774 = _1708;
        _1776 = _1709;
        _1778 = _1710;
    }
    uvec4 _1783 = floatBitsToUint(cbInstanceData._m0[_435 + 5u]);
    uint _1785 = _1783.x * 14u;
    uint _1786 = _1785 + 13u;
    float _1793 = _476 + (-1.0);
    float _1798 = (cbLight._m0[_1786].x * _1793) + 1.0;
    float _1799 = (cbLight._m0[_1786].y * _1793) + 1.0;
    float _1800 = (cbLight._m0[_1786].z * _1793) + 1.0;
    float _1801 = (cbLight._m0[_1786].w * _1793) + 1.0;
    uint _1802 = _1785 + 5u;
    float _1808 = isnan(1.0) ? _1799 : (isnan(_1799) ? 1.0 : min(_1799, 1.0));
    uint _1812 = _1785 + 4u;
    float _1822 = isnan(1.0) ? _1798 : (isnan(_1798) ? 1.0 : min(_1798, 1.0));
    uint _1826 = _1785 | 1u;
    float _1837 = dot(vec3(cbLight._m0[_1785].xyz), vec3(_305, _306, _307));
    float _1840 = dot(vec3(cbLight._m0[_1826].xyz), vec3(_305, _306, _307));
    float _3991 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _4002 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
    float _1845 = (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * 0.3183098733425140380859375;
    float _1847 = (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * 0.3183098733425140380859375;
    float _1854 = ((cbLight._m0[_1802].x * _1808) * _1847) + (((cbLight._m0[_1812].x * _1774) * _1822) * _1845);
    float _1855 = ((_1808 * cbLight._m0[_1802].y) * _1847) + (((cbLight._m0[_1812].y * _1776) * _1822) * _1845);
    float _1856 = ((_1808 * cbLight._m0[_1802].z) * _1847) + (((cbLight._m0[_1812].z * _1778) * _1822) * _1845);
    uvec4 _1860 = floatBitsToUint(cbLight._m0[_1785 + 12u]);
    bool _1862 = _1860.x == 0u;
    float _1964;
    float _1966;
    float _1968;
    if (_1862)
    {
        _1964 = _1854;
        _1966 = _1855;
        _1968 = _1856;
    }
    else
    {
        uint _1972 = _1785 + 6u;
        float _1988 = (dot(vec3(cbLight._m0[_1785 + 2u].xyz), vec3(_305, _306, _307)) * 0.5) + 0.5;
        float _1989 = _1988 * _1988;
        float _4013 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
        float _1990 = isnan(1.0) ? _4013 : (isnan(_4013) ? 1.0 : min(_4013, 1.0));
        float _1991 = isnan(1.0) ? _1800 : (isnan(_1800) ? 1.0 : min(_1800, 1.0));
        _1964 = (((cbLight._m0[_1972].x * 0.3183098733425140380859375) * _1990) * _1991) + _1854;
        _1966 = (((cbLight._m0[_1972].y * 0.3183098733425140380859375) * _1990) * _1991) + _1855;
        _1968 = (((cbLight._m0[_1972].z * 0.3183098733425140380859375) * _1990) * _1991) + _1856;
    }
    bool _1971 = _1860.y == 0u;
    float _2026;
    float _2028;
    float _2030;
    if (_1971)
    {
        _2026 = _1964;
        _2028 = _1966;
        _2030 = _1968;
    }
    else
    {
        uint _2199 = _1785 + 7u;
        float _2215 = (dot(vec3(cbLight._m0[_1785 + 3u].xyz), vec3(_305, _306, _307)) * 0.5) + 0.5;
        float _2216 = _2215 * _2215;
        float _4029 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
        float _2217 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
        float _2218 = isnan(1.0) ? _1801 : (isnan(_1801) ? 1.0 : min(_1801, 1.0));
        _2026 = (((cbLight._m0[_2199].x * 0.3183098733425140380859375) * _2217) * _2218) + _1964;
        _2028 = (((cbLight._m0[_2199].y * 0.3183098733425140380859375) * _2217) * _2218) + _1966;
        _2030 = (((cbLight._m0[_2199].z * 0.3183098733425140380859375) * _2217) * _2218) + _1968;
    }
    uint _2033 = _1785 + 8u;
    float _2046 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1785].w)) * _308) * 0.949999988079071044921875);
    float _2047 = _2046 * _2046;
    float _2048 = cbLight._m0[_1785].x + _386;
    float _2049 = cbLight._m0[_1785].y + _387;
    float _2050 = cbLight._m0[_1785].z + _388;
    float _2054 = inversesqrt(dot(vec3(_2048, _2049, _2050), vec3(_2048, _2049, _2050)));
    float _2055 = _2054 * _2048;
    float _2056 = _2054 * _2049;
    float _2057 = _2054 * _2050;
    float _2058 = dot(vec3(_305, _306, _307), vec3(cbLight._m0[_1785].xyz));
    float _4045 = isnan(0.0) ? _2058 : (isnan(_2058) ? 0.0 : max(_2058, 0.0));
    float _2061 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
    float _4056 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    float _2062 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
    float _2063 = dot(vec3(_305, _306, _307), vec3(_2055, _2056, _2057));
    float _4067 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _2066 = isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0));
    float _2067 = dot(vec3(cbLight._m0[_1785].xyz), vec3(_2055, _2056, _2057));
    float _4078 = isnan(0.0) ? _2067 : (isnan(_2067) ? 0.0 : max(_2067, 0.0));
    float _2071 = _2047 * _2047;
    float _2075 = ((_2066 * _2066) * (_2071 + (-1.0))) + 1.0;
    float _2083 = exp2(log2(1.0 - (isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0)))) * 5.0);
    float _2084 = 0.959999978542327880859375 - _458;
    float _2086 = 0.959999978542327880859375 - _459;
    float _2087 = 0.959999978542327880859375 - _460;
    float _2094 = 1.0 - _2047;
    float _2105 = (0.5 / (((_2062 * ((_2061 * _2094) + _2047)) + 9.9999999392252902907785028219223e-09) + (((_2062 * _2094) + _2047) * _2061))) * _2061;
    float _4089 = isnan(0.0) ? _2105 : (isnan(_2105) ? 0.0 : max(_2105, 0.0));
    float _2107 = (isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0))) * (_2071 / ((_2075 * _2075) * 3.141590118408203125));
    uint _2121 = _1785 + 9u;
    float _2132 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1826].w)) * _308) * 0.949999988079071044921875);
    float _2133 = _2132 * _2132;
    float _2134 = cbLight._m0[_1826].x + _386;
    float _2135 = cbLight._m0[_1826].y + _387;
    float _2136 = cbLight._m0[_1826].z + _388;
    float _2140 = inversesqrt(dot(vec3(_2134, _2135, _2136), vec3(_2134, _2135, _2136)));
    float _2141 = _2140 * _2134;
    float _2142 = _2140 * _2135;
    float _2143 = _2140 * _2136;
    float _2144 = dot(vec3(_305, _306, _307), vec3(cbLight._m0[_1826].xyz));
    float _4100 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2147 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _2148 = dot(vec3(_305, _306, _307), vec3(_2141, _2142, _2143));
    float _4111 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0));
    float _2151 = isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0));
    float _2152 = dot(vec3(cbLight._m0[_1826].xyz), vec3(_2141, _2142, _2143));
    float _4122 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
    float _2156 = _2133 * _2133;
    float _2160 = ((_2151 * _2151) * (_2156 + (-1.0))) + 1.0;
    float _2167 = exp2(log2(1.0 - (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0)))) * 5.0);
    float _2174 = 1.0 - _2133;
    float _2184 = (0.5 / (((_2062 * ((_2147 * _2174) + _2133)) + 9.9999999392252902907785028219223e-09) + (((_2062 * _2174) + _2133) * _2147))) * _2147;
    float _4133 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
    float _2186 = (isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0))) * (_2156 / ((_2160 * _2160) * 3.141590118408203125));
    float _2196 = (((((_2167 * _2084) + _461) * cbLight._m0[_2121].x) * _2186) * _1808) + ((((cbLight._m0[_2033].x * _1774) * ((_2083 * _2084) + _461)) * _2107) * _1822);
    float _2197 = (((((_2167 * _2086) + _463) * cbLight._m0[_2121].y) * _2186) * _1808) + ((((cbLight._m0[_2033].y * _1776) * ((_2083 * _2086) + _463)) * _2107) * _1822);
    float _2198 = (((((_2167 * _2087) + _464) * cbLight._m0[_2121].z) * _2186) * _1808) + ((((cbLight._m0[_2033].z * _1778) * ((_2083 * _2087) + _464)) * _2107) * _1822);
    float _2254;
    float _2256;
    float _2258;
    if (_1862)
    {
        _2254 = _2196;
        _2256 = _2197;
        _2258 = _2198;
    }
    else
    {
        uint _2260 = _1785 + 2u;
        uint _2264 = _1785 + 10u;
        float _2278 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2260].w)) * _308) * 0.949999988079071044921875);
        float _2279 = _2278 * _2278;
        float _2280 = cbLight._m0[_2260].x + _386;
        float _2281 = cbLight._m0[_2260].y + _387;
        float _2282 = cbLight._m0[_2260].z + _388;
        float _2286 = inversesqrt(dot(vec3(_2280, _2281, _2282), vec3(_2280, _2281, _2282)));
        float _2287 = _2286 * _2280;
        float _2288 = _2286 * _2281;
        float _2289 = _2286 * _2282;
        float _2290 = dot(vec3(_305, _306, _307), vec3(cbLight._m0[_2260].xyz));
        float _4144 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
        float _2293 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
        float _2294 = dot(vec3(_305, _306, _307), vec3(_2287, _2288, _2289));
        float _4155 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
        float _2297 = isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0));
        float _2298 = dot(vec3(cbLight._m0[_2260].xyz), vec3(_2287, _2288, _2289));
        float _4166 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
        float _2302 = _2279 * _2279;
        float _2306 = ((_2297 * _2297) * (_2302 + (-1.0))) + 1.0;
        float _2313 = exp2(log2(1.0 - (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0)))) * 5.0);
        float _2320 = 1.0 - _2279;
        float _2330 = (0.5 / (((_2062 * ((_2293 * _2320) + _2279)) + 9.9999999392252902907785028219223e-09) + (((_2062 * _2320) + _2279) * _2293))) * _2293;
        float _4177 = isnan(0.0) ? _2330 : (isnan(_2330) ? 0.0 : max(_2330, 0.0));
        float _2332 = (isnan(1.0) ? _4177 : (isnan(_4177) ? 1.0 : min(_4177, 1.0))) * (_2302 / ((_2306 * _2306) * 3.141590118408203125));
        float _2333 = isnan(1.0) ? _1800 : (isnan(_1800) ? 1.0 : min(_1800, 1.0));
        _2254 = (((((_2313 * _2084) + _461) * cbLight._m0[_2264].x) * _2332) * _2333) + _2196;
        _2256 = (((((_2313 * _2086) + _463) * cbLight._m0[_2264].y) * _2332) * _2333) + _2197;
        _2258 = (((((_2313 * _2087) + _464) * cbLight._m0[_2264].z) * _2332) * _2333) + _2198;
    }
    float _2364;
    float _2366;
    float _2368;
    if (_1971)
    {
        _2364 = _2254;
        _2366 = _2256;
        _2368 = _2258;
    }
    else
    {
        uint _2375 = _1785 + 3u;
        uint _2379 = _1785 + 11u;
        float _2393 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2375].w)) * _308) * 0.949999988079071044921875);
        float _2394 = _2393 * _2393;
        float _2395 = cbLight._m0[_2375].x + _386;
        float _2396 = cbLight._m0[_2375].y + _387;
        float _2397 = cbLight._m0[_2375].z + _388;
        float _2401 = inversesqrt(dot(vec3(_2395, _2396, _2397), vec3(_2395, _2396, _2397)));
        float _2402 = _2401 * _2395;
        float _2403 = _2401 * _2396;
        float _2404 = _2401 * _2397;
        float _2405 = dot(vec3(_305, _306, _307), vec3(cbLight._m0[_2375].xyz));
        float _4193 = isnan(0.0) ? _2405 : (isnan(_2405) ? 0.0 : max(_2405, 0.0));
        float _2408 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
        float _2409 = dot(vec3(_305, _306, _307), vec3(_2402, _2403, _2404));
        float _4204 = isnan(0.0) ? _2409 : (isnan(_2409) ? 0.0 : max(_2409, 0.0));
        float _2412 = isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0));
        float _2413 = dot(vec3(cbLight._m0[_2375].xyz), vec3(_2402, _2403, _2404));
        float _4215 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0));
        float _2417 = _2394 * _2394;
        float _2421 = ((_2412 * _2412) * (_2417 + (-1.0))) + 1.0;
        float _2428 = exp2(log2(1.0 - (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0)))) * 5.0);
        float _2435 = 1.0 - _2394;
        float _2445 = (0.5 / (((_2062 * ((_2408 * _2435) + _2394)) + 9.9999999392252902907785028219223e-09) + (((_2062 * _2435) + _2394) * _2408))) * _2408;
        float _4226 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0));
        float _2447 = (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * (_2417 / ((_2421 * _2421) * 3.141590118408203125));
        float _2448 = isnan(1.0) ? _1801 : (isnan(_1801) ? 1.0 : min(_1801, 1.0));
        _2364 = (((((_2428 * _2084) + _461) * cbLight._m0[_2379].x) * _2447) * _2448) + _2254;
        _2366 = (((((_2428 * _2086) + _463) * cbLight._m0[_2379].y) * _2447) * _2448) + _2256;
        _2368 = (((((_2428 * _2087) + _464) * cbLight._m0[_2379].z) * _2447) * _2448) + _2258;
    }
    float _2513;
    float _2515;
    float _2517;
    float _2519;
    float _2521;
    float _2523;
    if (_1783.y == 0u)
    {
        uvec4 _2469 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2470 = _2469.x;
        uint _2481 = uint((float(_2469.y) * floor(float(uint(cbSceneParam._m0[85u].y * _395) / _2470))) + floor(float(uint(cbSceneParam._m0[85u].x * _394) / _2470)));
        float _2491 = (log2(_1561 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2492 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
        uint _2495 = uint(isnan(14.0) ? _2492 : (isnan(_2492) ? 14.0 : min(_2492, 14.0)));
        uvec4 _2500 = texelFetch(g_lightClusterGridBuffer, int(((_2495 << 2u) + (_2481 << 6u)) >> 2u));
        uint _2501 = _2500.x;
        uint _2502 = _2469.z;
        float _2580;
        float _2582;
        float _2584;
        float _2586;
        float _2588;
        float _2590;
        if (((((1u << ((_2502 >> 4u) & 15u)) + 4294967295u) & _2501) == 0u) || ((_2502 & 240u) == 0u))
        {
            _2580 = 0.0;
            _2582 = 0.0;
            _2584 = 0.0;
            _2586 = 0.0;
            _2588 = 0.0;
            _2590 = 0.0;
        }
        else
        {
            float _2581;
            float _2583;
            float _2585;
            float _2587;
            float _2589;
            float _2591;
            float _2724 = 0.0;
            float _2725 = 0.0;
            float _2726 = 0.0;
            float _2727 = 0.0;
            float _2728 = 0.0;
            float _2729 = 0.0;
            uint _2730 = 0u;
            uint _2739;
            bool _2740;
            for (;;)
            {
                _2739 = texelFetch(g_lightClassification, int((((_2495 << 5u) + (_2481 << 9u)) + (_2730 << 2u)) >> 2u)).x;
                _2740 = _2739 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2740)
                {
                    frontier_phi_68_pred = _2729;
                    frontier_phi_68_pred_1 = _2728;
                    frontier_phi_68_pred_2 = _2727;
                    frontier_phi_68_pred_3 = _2725;
                    frontier_phi_68_pred_4 = _2724;
                    frontier_phi_68_pred_5 = _2726;
                }
                else
                {
                    float _2848;
                    float _2849;
                    float _2850;
                    float _2851;
                    float _2852;
                    float _2853;
                    uint _2854;
                    _2848 = _2724;
                    _2849 = _2725;
                    _2850 = _2726;
                    _2851 = _2727;
                    _2852 = _2728;
                    _2853 = _2729;
                    _2854 = _2739;
                    float _2780;
                    float _2781;
                    float _2782;
                    float _2783;
                    float _2784;
                    float _2785;
                    for (;;)
                    {
                        uint _2858 = uint(findLSB(_2854)) + (_2730 << 5u);
                        uint _2855 = (_2854 + 4294967295u) & _2854;
                        uint _2860 = _2858 * 48u;
                        vec4 _2874 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2860)).x, texelFetch(g_PointLightRenderingBuffer, int(_2860 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2860 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2860 + 3u)).x));
                        uint _2880 = (_2858 * 48u) + 4u;
                        vec4 _2893 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2880)).x, texelFetch(g_PointLightRenderingBuffer, int(_2880 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2880 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2880 + 3u)).x));
                        uint _2899 = (_2858 * 48u) + 8u;
                        vec3 _2910 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2899)).x, texelFetch(g_PointLightRenderingBuffer, int(_2899 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2899 + 2u)).x));
                        float _2914 = _2874.x - _1559;
                        float _2915 = _2874.y - _1560;
                        float _2916 = _2874.z - _1561;
                        float _2917 = dot(vec3(_2914, _2915, _2916), vec3(_2914, _2915, _2916));
                        float _2920 = inversesqrt(_2917);
                        float _2921 = _2920 * _2914;
                        float _2922 = _2920 * _2915;
                        float _2923 = _2920 * _2916;
                        float _2924 = dot(vec3(_416, _419, _422), vec3(_2921, _2922, _2923));
                        float _2929 = 1.0 - (_2917 * _2874.w);
                        float _4252 = isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0));
                        float _2930 = isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0));
                        float _2931 = sqrt(_2917) * _2893.w;
                        float _2934 = 1.39999997615814208984375 / (_2931 + 1.39999997615814208984375);
                        float _2935 = _2934 * _2934;
                        float _2938 = ((1.0 - _2935) * _2924) + _2935;
                        float _2941 = _2931 * _2931;
                        float _2945 = ((isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0))) * _2930) / ((_2941 * 0.699999988079071044921875) + 1.0);
                        float _2949 = (-0.0) - _1559;
                        float _2950 = (-0.0) - _1560;
                        float _2951 = (-0.0) - _1561;
                        float _2955 = inversesqrt(dot(vec3(_2949, _2950, _2951), vec3(_2949, _2950, _2951)));
                        float _2956 = _2955 * _2949;
                        float _2957 = _2955 * _2950;
                        float _2958 = _2955 * _2951;
                        float _2965 = exp2(log2(1.0 / ((_2941 * 3.5) + 5.0)) * 0.25);
                        float _2966 = 1.0 - _492;
                        float _2973 = sqrt(1.0 - ((1.0 - (_2966 * _2966)) * (1.0 - (_2965 * _2965))));
                        float _2974 = _2973 * _2973;
                        float _2975 = _2974 * _2974;
                        float _2976 = _2956 + _2921;
                        float _2977 = _2957 + _2922;
                        float _2978 = _2958 + _2923;
                        float _2982 = inversesqrt(dot(vec3(_2976, _2977, _2978), vec3(_2976, _2977, _2978)));
                        float _2986 = dot(vec3(_416, _419, _422), vec3(_2956, _2957, _2958));
                        float _4268 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0));
                        float _2989 = isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0));
                        float _2990 = dot(vec3(_416, _419, _422), vec3(_2982 * _2976, _2982 * _2977, _2982 * _2978));
                        float _4279 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0));
                        float _2993 = isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0));
                        float _2997 = ((_2993 * _2993) * (_2975 + (-1.0))) + 1.0;
                        float _2998 = _2934 * _2974;
                        float _2999 = _2998 * _2998;
                        float _3002 = ((1.0 - _2999) * _2924) + _2999;
                        float _4290 = isnan(0.0) ? _3002 : (isnan(_3002) ? 0.0 : max(_3002, 0.0));
                        float _3003 = isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0));
                        float _3004 = 1.0 - _2974;
                        float _3014 = (0.5 / (((_3003 * ((_2989 * _3004) + _2974)) + 9.9999999392252902907785028219223e-09) + (((_3003 * _3004) + _2974) * _2989))) * _3003;
                        float _4301 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
                        float _3025 = (((_2975 * 3.1415927410125732421875) * (isnan(1.0) ? _4301 : (isnan(_4301) ? 1.0 : min(_4301, 1.0)))) / ((_2997 * _2997) * ((_2941 * 2.1991131305694580078125) + 3.141590118408203125))) * _2930;
                        _2783 = (_2945 * _2893.x) + _2851;
                        _2784 = (_2945 * _2893.y) + _2852;
                        _2785 = (_2945 * _2893.z) + _2853;
                        _2780 = (_3025 * _2910.x) + _2848;
                        _2781 = (_3025 * _2910.y) + _2849;
                        _2782 = (_3025 * _2910.z) + _2850;
                        if (_2855 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2848 = _2780;
                            _2849 = _2781;
                            _2850 = _2782;
                            _2851 = _2783;
                            _2852 = _2784;
                            _2853 = _2785;
                            _2854 = _2855;
                        }
                    }
                    frontier_phi_68_pred = _2785;
                    frontier_phi_68_pred_1 = _2784;
                    frontier_phi_68_pred_2 = _2783;
                    frontier_phi_68_pred_3 = _2781;
                    frontier_phi_68_pred_4 = _2780;
                    frontier_phi_68_pred_5 = _2782;
                }
                _2591 = frontier_phi_68_pred;
                _2589 = frontier_phi_68_pred_1;
                _2587 = frontier_phi_68_pred_2;
                _2583 = frontier_phi_68_pred_3;
                _2581 = frontier_phi_68_pred_4;
                _2585 = frontier_phi_68_pred_5;
                uint _2731 = _2730 + 1u;
                if (_2731 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2724 = _2581;
                    _2725 = _2583;
                    _2726 = _2585;
                    _2727 = _2587;
                    _2728 = _2589;
                    _2729 = _2591;
                    _2730 = _2731;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2580 = _2581;
            _2582 = _2583;
            _2584 = _2585;
            _2586 = _2587;
            _2588 = _2589;
            _2590 = _2591;
        }
        uvec4 _2594 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2595 = _2594.z;
        uint _2597 = (_2595 >> 8u) & 15u;
        float _2692;
        float _2694;
        float _2696;
        float _2698;
        float _2700;
        float _2702;
        if (((4294967295u << _2597) & _2501) == 0u)
        {
            _2692 = _2580;
            _2694 = _2582;
            _2696 = _2584;
            _2698 = _2586;
            _2700 = _2588;
            _2702 = _2590;
        }
        else
        {
            float _2717 = inversesqrt(dot(vec3(_1559, _1560, _1561), vec3(_1559, _1560, _1561)));
            float _2718 = _2717 * _1559;
            float _2719 = _2717 * _1560;
            float _2720 = _2717 * _1561;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2597 < ((_2595 >> 12u) & 15u))
            {
                float _2693;
                float _2695;
                float _2697;
                float _2699;
                float _2701;
                float _2703;
                float _2831 = _2580;
                float _2832 = _2582;
                float _2833 = _2584;
                float _2834 = _2586;
                float _2835 = _2588;
                float _2836 = _2590;
                uint _2837 = _2597;
                uint _2846;
                bool _2847;
                for (;;)
                {
                    _2846 = texelFetch(g_lightClassification, int((((_2495 << 5u) + (_2481 << 9u)) + (_2837 << 2u)) >> 2u)).x;
                    _2847 = _2846 == 0u;
                    float frontier_phi_74_pred;
                    float frontier_phi_74_pred_1;
                    float frontier_phi_74_pred_2;
                    float frontier_phi_74_pred_3;
                    float frontier_phi_74_pred_4;
                    float frontier_phi_74_pred_5;
                    if (_2847)
                    {
                        frontier_phi_74_pred = _2833;
                        frontier_phi_74_pred_1 = _2832;
                        frontier_phi_74_pred_2 = _2831;
                        frontier_phi_74_pred_3 = _2836;
                        frontier_phi_74_pred_4 = _2835;
                        frontier_phi_74_pred_5 = _2834;
                    }
                    else
                    {
                        float _3030;
                        float _3031;
                        float _3032;
                        float _3033;
                        float _3034;
                        float _3035;
                        float _3326;
                        float _3327;
                        float _3328;
                        float _3329;
                        float _3330;
                        float _3331;
                        float _3043 = _2831;
                        float _3044 = _2832;
                        float _3045 = _2833;
                        float _3046 = _2834;
                        float _3047 = _2835;
                        float _3048 = _2836;
                        uint _3049 = _2846;
                        uint _3050;
                        vec4 _3075;
                        float _3076;
                        vec4 _3091;
                        vec3 _3103;
                        vec4 _3119;
                        vec4 _3135;
                        float _3182;
                        bool _3183;
                        for (;;)
                        {
                            uint _3060 = ((_2837 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3049));
                            _3050 = (_3049 + 4294967295u) & _3049;
                            uint _3062 = _3060 * 40u;
                            _3075 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3062)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3062 + 3u)).x));
                            _3076 = _3075.w;
                            uint _3078 = (_3060 * 40u) + 4u;
                            _3091 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3078)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3078 + 3u)).x));
                            uint _3093 = (_3060 * 40u) + 8u;
                            _3103 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3093)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3093 + 2u)).x));
                            uint _3106 = (_3060 * 40u) + 16u;
                            _3119 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3106)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 3u)).x));
                            uint _3122 = (_3060 * 40u) + 20u;
                            _3135 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3122)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3122 + 3u)).x));
                            uint _3138 = (_3060 * 40u) + 24u;
                            vec4 _3151 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3138)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3138 + 3u)).x));
                            uint _3157 = (_3060 * 40u) + 28u;
                            vec4 _3170 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3157)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3157 + 3u)).x));
                            _3182 = fma(_1561, _3170.z, fma(_1560, _3170.y, _3170.x * _1559)) + _3170.w;
                            _3183 = !((fma(_1561, _3151.z, fma(_1560, _3151.y, _3151.x * _1559)) + _3151.w) <= 0.0);
                            float frontier_phi_80_pred;
                            float frontier_phi_80_pred_1;
                            float frontier_phi_80_pred_2;
                            float frontier_phi_80_pred_3;
                            float frontier_phi_80_pred_4;
                            float frontier_phi_80_pred_5;
                            if (_3183)
                            {
                                float _3210 = _3075.x - _1559;
                                float _3211 = _3075.y - _1560;
                                float _3212 = _3075.z - _1561;
                                float _3213 = dot(vec3(_3210, _3211, _3212), vec3(_3210, _3211, _3212));
                                float _3216 = inversesqrt(_3213);
                                float _3217 = _3216 * _3210;
                                float _3218 = _3216 * _3211;
                                float _3219 = _3216 * _3212;
                                float _3223 = 1.0 - (_3213 / (_3076 * _3076));
                                float _4312 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0));
                                float _3224 = isnan(1.0) ? _4312 : (isnan(_4312) ? 1.0 : min(_4312, 1.0));
                                float _3228 = sqrt(_3213) * _3091.w;
                                float _3230 = 1.39999997615814208984375 / (_3228 + 1.39999997615814208984375);
                                float _3231 = _3230 * _3230;
                                float _3234 = ((1.0 - _3231) * dot(vec3(_3217, _3218, _3219), vec3(_416, _419, _422))) + _3231;
                                float _3237 = _3228 * _3228;
                                float _3241 = (fma(_1561, _3119.z, fma(_1560, _3119.y, _3119.x * _1559)) + _3119.w) / _3182;
                                float _3242 = (fma(_1561, _3135.z, fma(_1560, _3135.y, _3135.x * _1559)) + _3135.w) / _3182;
                                float _3246 = 1.0 - dot(vec2(_3241, _3242), vec2(_3241, _3242));
                                float _4328 = isnan(0.0) ? _3246 : (isnan(_3246) ? 0.0 : max(_3246, 0.0));
                                float _3247 = isnan(1.0) ? _4328 : (isnan(_4328) ? 1.0 : min(_4328, 1.0));
                                float _3248 = _3247 * (((isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0))) * _3224) / ((_3237 * 0.699999988079071044921875) + 1.0));
                                float _3260 = exp2(log2(1.0 / ((_3237 * 3.5) + 5.0)) * 0.25);
                                float _3261 = 1.0 - _492;
                                float _3268 = sqrt(1.0 - ((1.0 - (_3261 * _3261)) * (1.0 - (_3260 * _3260))));
                                float _3269 = _3268 * _3268;
                                float _3270 = _3269 * _3269;
                                float _3271 = _3217 - _2718;
                                float _3272 = _3218 - _2719;
                                float _3273 = _3219 - _2720;
                                float _3277 = inversesqrt(dot(vec3(_3271, _3272, _3273), vec3(_3271, _3272, _3273)));
                                float _3281 = dot(vec3(_416, _419, _422), vec3((-0.0) - _2718, (-0.0) - _2719, (-0.0) - _2720));
                                float _4339 = isnan(0.0) ? _3281 : (isnan(_3281) ? 0.0 : max(_3281, 0.0));
                                float _3284 = isnan(1.0) ? _4339 : (isnan(_4339) ? 1.0 : min(_4339, 1.0));
                                float _3285 = dot(vec3(_416, _419, _422), vec3(_3277 * _3271, _3277 * _3272, _3277 * _3273));
                                float _4350 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0));
                                float _3288 = isnan(1.0) ? _4350 : (isnan(_4350) ? 1.0 : min(_4350, 1.0));
                                float _3292 = ((_3288 * _3288) * (_3270 + (-1.0))) + 1.0;
                                float _3293 = _3230 * _3269;
                                float _3294 = _3293 * _3293;
                                float _3300 = ((1.0 - _3294) * dot(vec3(_416, _419, _422), vec3(_3217, _3218, _3219))) + _3294;
                                float _4361 = isnan(0.0) ? _3300 : (isnan(_3300) ? 0.0 : max(_3300, 0.0));
                                float _3301 = isnan(1.0) ? _4361 : (isnan(_4361) ? 1.0 : min(_4361, 1.0));
                                float _3302 = 1.0 - _3269;
                                float _3312 = (0.5 / (((_3301 * ((_3284 * _3302) + _3269)) + 9.9999999392252902907785028219223e-09) + (((_3301 * _3302) + _3269) * _3284))) * _3301;
                                float _4372 = isnan(0.0) ? _3312 : (isnan(_3312) ? 0.0 : max(_3312, 0.0));
                                float _3322 = (_3247 * _3224) * (((_3270 * 3.1415927410125732421875) * (isnan(1.0) ? _4372 : (isnan(_4372) ? 1.0 : min(_4372, 1.0)))) / ((_3292 * _3292) * ((_3237 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_80_pred = _3322 * _3103.z;
                                frontier_phi_80_pred_1 = _3322 * _3103.y;
                                frontier_phi_80_pred_2 = _3322 * _3103.x;
                                frontier_phi_80_pred_3 = _3248 * _3091.z;
                                frontier_phi_80_pred_4 = _3248 * _3091.y;
                                frontier_phi_80_pred_5 = _3248 * _3091.x;
                            }
                            else
                            {
                                frontier_phi_80_pred = 0.0;
                                frontier_phi_80_pred_1 = 0.0;
                                frontier_phi_80_pred_2 = 0.0;
                                frontier_phi_80_pred_3 = 0.0;
                                frontier_phi_80_pred_4 = 0.0;
                                frontier_phi_80_pred_5 = 0.0;
                            }
                            _3328 = frontier_phi_80_pred;
                            _3327 = frontier_phi_80_pred_1;
                            _3326 = frontier_phi_80_pred_2;
                            _3331 = frontier_phi_80_pred_3;
                            _3330 = frontier_phi_80_pred_4;
                            _3329 = frontier_phi_80_pred_5;
                            _3033 = _3329 + _3046;
                            _3034 = _3330 + _3047;
                            _3035 = _3331 + _3048;
                            _3030 = _3326 + _3043;
                            _3031 = _3327 + _3044;
                            _3032 = _3328 + _3045;
                            if (_3050 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3043 = _3030;
                                _3044 = _3031;
                                _3045 = _3032;
                                _3046 = _3033;
                                _3047 = _3034;
                                _3048 = _3035;
                                _3049 = _3050;
                                continue;
                            }
                        }
                        frontier_phi_74_pred = _3032;
                        frontier_phi_74_pred_1 = _3031;
                        frontier_phi_74_pred_2 = _3030;
                        frontier_phi_74_pred_3 = _3035;
                        frontier_phi_74_pred_4 = _3034;
                        frontier_phi_74_pred_5 = _3033;
                    }
                    _2697 = frontier_phi_74_pred;
                    _2695 = frontier_phi_74_pred_1;
                    _2693 = frontier_phi_74_pred_2;
                    _2703 = frontier_phi_74_pred_3;
                    _2701 = frontier_phi_74_pred_4;
                    _2699 = frontier_phi_74_pred_5;
                    uint _2838 = _2837 + 1u;
                    if (_2838 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2831 = _2693;
                        _2832 = _2695;
                        _2833 = _2697;
                        _2834 = _2699;
                        _2835 = _2701;
                        _2836 = _2703;
                        _2837 = _2838;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2701;
                frontier_phi_62_63_ladder_1 = _2699;
                frontier_phi_62_63_ladder_2 = _2697;
                frontier_phi_62_63_ladder_3 = _2703;
                frontier_phi_62_63_ladder_4 = _2695;
                frontier_phi_62_63_ladder_5 = _2693;
            }
            else
            {
                frontier_phi_62_63_ladder = _2588;
                frontier_phi_62_63_ladder_1 = _2586;
                frontier_phi_62_63_ladder_2 = _2584;
                frontier_phi_62_63_ladder_3 = _2590;
                frontier_phi_62_63_ladder_4 = _2582;
                frontier_phi_62_63_ladder_5 = _2580;
            }
            _2692 = frontier_phi_62_63_ladder_5;
            _2694 = frontier_phi_62_63_ladder_4;
            _2696 = frontier_phi_62_63_ladder_2;
            _2698 = frontier_phi_62_63_ladder_1;
            _2700 = frontier_phi_62_63_ladder;
            _2702 = frontier_phi_62_63_ladder_3;
        }
        float _2707 = isnan(1.0) ? _476 : (isnan(_476) ? 1.0 : min(_476, 1.0));
        _2513 = (_2707 * _2698) + _2026;
        _2515 = (_2707 * _2700) + _2028;
        _2517 = (_2707 * _2702) + _2030;
        _2519 = ((_2692 * _461) * _2707) + _2364;
        _2521 = ((_2694 * _463) * _2707) + _2366;
        _2523 = ((_2696 * _464) * _2707) + _2368;
    }
    else
    {
        _2513 = _2026;
        _2515 = _2028;
        _2517 = _2030;
        _2519 = _2364;
        _2521 = _2366;
        _2523 = _2368;
    }
    float _4388 = isnan(0.0) ? _451 : (isnan(_451) ? 0.0 : max(_451, 0.0));
    float _4399 = isnan(0.0) ? _452 : (isnan(_452) ? 0.0 : max(_452, 0.0));
    float _4410 = isnan(0.0) ? _453 : (isnan(_453) ? 0.0 : max(_453, 0.0));
    uint _2543 = _435 + 6u;
    float _2551 = _394 / cbSceneParam._m0[86u].x;
    float _2552 = _395 / cbSceneParam._m0[86u].y;
    vec4 _2566 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2551, _2552, (log2((isnan(cbSceneParam._m0[77u].w) ? _328 : (isnan(_328) ? cbSceneParam._m0[77u].w : min(_328, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2568 = _2566.x;
    float _2569 = _2566.y;
    float _2570 = _2566.z;
    float _2571 = _2566.w;
    float _2642;
    float _2644;
    float _2646;
    float _2648;
    if (_328 > cbSceneParam._m0[78u].w)
    {
        float _2605 = isnan(_328) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _328 : min(cbSceneParam._m0[80u].w, _328));
        float _2606 = _2605 / _328;
        float _2617 = _2606 * _379;
        float _2618 = _380 * _2606;
        float _2619 = (-0.0) - _2618;
        float _2620 = _2606 * _381;
        float _2622 = (cbSceneParam._m0[77u].w * _2619) / _2605;
        float _2623 = _2622 + cbSceneParam._m0[79u].w;
        float _2624 = cbSceneParam._m0[79u].w - _2618;
        float _2630 = sqrt(((_2617 * _2617) + (_2618 * _2618)) + (_2620 * _2620));
        float _2633 = (1.0 - (cbSceneParam._m0[77u].w / _2605)) * _2630;
        float _2638 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2640 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2793;
        if (abs((_2619 - _2622) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2793 = ((((_2623 > 0.0) ? exp2(_2638 * _2623) : (2.0 - exp2(_2640 * _2623))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2633;
        }
        else
        {
            float _2753 = 1.0 / cbSceneParam._m0[80u].x;
            float _2754 = isnan(_2624) ? _2623 : (isnan(_2623) ? _2624 : max(_2623, _2624));
            float _2755 = isnan(_2624) ? _2623 : (isnan(_2623) ? _2624 : min(_2623, _2624));
            float _2764 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : min(_2754, 0.0));
            float _2765 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : min(_2755, 0.0));
            _2793 = ((abs(_2630 / _2619) * cbSceneParam._m0[80u].y) * ((((_2764 - _2765) * 2.0) - ((exp2(_2638 * (isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0)))) - exp2(_2638 * (isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0))))) * _2753)) - ((exp2(_2640 * _2764) - exp2(_2640 * _2765)) * _2753))) + (_2633 * cbSceneParam._m0[80u].z);
        }
        vec4 _2795 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2551, _2552, 1.0), 0.0);
        float _2804 = exp2((_2793 * (-1.44269502162933349609375)) * (1.0 - _2795.w));
        float _2805 = log2(_2804);
        float _2821 = log2(_2571);
        _2642 = (exp2(_2821 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2805 * cbSceneParam._m0[78u].x)) * _2795.x) / cbSceneParam._m0[78u].x)) + _2568;
        _2644 = (exp2(_2821 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2805 * cbSceneParam._m0[78u].y)) * _2795.y) / cbSceneParam._m0[78u].y)) + _2569;
        _2646 = (exp2(_2821 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2805 * cbSceneParam._m0[78u].z)) * _2795.z) / cbSceneParam._m0[78u].z)) + _2570;
        _2648 = _2804 * _2571;
    }
    else
    {
        _2642 = _2568;
        _2644 = _2569;
        _2646 = _2570;
        _2648 = _2571;
    }
    float _2660 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2661 = _2660 == 3.0;
    float _2662 = log2(_2648);
    float _2669 = exp2(_2662 * cbSceneParam._m0[78u].x) * (((isnan(1.0) ? _4388 : (isnan(_4388) ? 1.0 : min(_4388, 1.0))) * (_2513 + ((isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0))) * _476))) + ((_2519 + ((isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0))) * _1286)) * cbPerFrame._m0[3u].x));
    float _2670 = exp2(_2662 * cbSceneParam._m0[78u].y) * (((isnan(1.0) ? _4399 : (isnan(_4399) ? 1.0 : min(_4399, 1.0))) * (_2515 + ((isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0))) * _476))) + ((_2521 + ((isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0))) * _1286)) * cbPerFrame._m0[3u].x));
    float _2671 = exp2(_2662 * cbSceneParam._m0[78u].z) * (((isnan(1.0) ? _4410 : (isnan(_4410) ? 1.0 : min(_4410, 1.0))) * (_2517 + ((isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0))) * _476))) + ((_2523 + ((isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0))) * _1286)) * cbPerFrame._m0[3u].x));
    float _2680 = (_2660 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2680 * (_2661 ? _2669 : (_2669 + (cbSceneParam._m0[72u].w * _2642)));
    SV_Target.y = _2680 * (_2661 ? _2670 : (_2670 + (cbSceneParam._m0[72u].w * _2644)));
    SV_Target.z = _2680 * (_2661 ? _2671 : (_2671 + (cbSceneParam._m0[72u].w * _2646)));
    SV_Target.w = cbInstanceData._m0[_2543].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2543].w;
}


