#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[11];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_AMSN_M1_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_AMSN_M1_snp_0_Texture2D_1;
layout(set = 0, binding = 2) uniform texture2D M_AMSN_M1_snp_0_Texture2D_2;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec3 TEXCOORD;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _892;
float _3283;
float _3284;
float _3285;
float _3286;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _213;
    float _214;
    float _215;
    if ((gl_FrontFacing ? 4294967295u : 0u) == 0u)
    {
        _213 = (-0.0) - _199;
        _214 = (-0.0) - _200;
        _215 = (-0.0) - _201;
    }
    else
    {
        _213 = _199;
        _214 = _200;
        _215 = _201;
    }
    vec4 _235 = texture(sampler2D(M_AMSN_M1_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD.x) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD.y) + cbTextureTilingScale._m0[0u].w));
    float _241 = _235.x * cbMtdParam._m0[9u].x;
    float _242 = _235.y * cbMtdParam._m0[9u].y;
    float _243 = _235.z * cbMtdParam._m0[9u].z;
    vec4 _255 = texture(sampler2D(M_AMSN_M1_snp_0_Texture2D_2, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.x) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.y) + cbTextureTilingScale._m0[2u].w));
    float _262 = cbMtdParam._m0[10u].x + _255.x;
    vec4 _274 = texture(sampler2D(M_AMSN_M1_snp_0_Texture2D_1, SS_BumpMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _278 = _274.z;
    float _282 = (_274.x * 2.0) + (-1.0);
    float _284 = (_274.y * 2.0) + (-1.0);
    float _285 = dot(vec2(_282, _284), vec2(_282, _284));
    float _3295 = isnan(0.0) ? _285 : (isnan(_285) ? 0.0 : max(_285, 0.0));
    float _291 = sqrt(1.0 - (isnan(1.0) ? _3295 : (isnan(_3295) ? 1.0 : min(_3295, 1.0))));
    float _294 = fma(_291, _213, fma(_284, _205 * TANGENT.x, (_191 * _184) * _282));
    float _297 = fma(_291, _214, fma(_284, _205 * TANGENT.y, (_191 * _185) * _282));
    float _300 = fma(_291, _215, fma(_284, _205 * TANGENT.z, (_191 * _186) * _282));
    float _304 = inversesqrt(dot(vec3(_294, _297, _300), vec3(_294, _297, _300)));
    float _305 = _304 * _294;
    float _306 = _304 * _297;
    float _307 = _304 * _300;
    float _3306 = isnan(0.0) ? _278 : (isnan(_278) ? 0.0 : max(_278, 0.0));
    float _308 = isnan(1.0) ? _3306 : (isnan(_3306) ? 1.0 : min(_3306, 1.0));
    float _3317 = isnan(0.0) ? _241 : (isnan(_241) ? 0.0 : max(_241, 0.0));
    float _3328 = isnan(0.0) ? _242 : (isnan(_242) ? 0.0 : max(_242, 0.0));
    float _3339 = isnan(0.0) ? _243 : (isnan(_243) ? 0.0 : max(_243, 0.0));
    float _3350 = isnan(0.0) ? _262 : (isnan(_262) ? 0.0 : max(_262, 0.0));
    float _312 = isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0));
    float _328 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _369 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _379 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _369);
    float _380 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _369);
    float _381 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _369);
    float _385 = inversesqrt(dot(vec3(_379, _380, _381), vec3(_379, _380, _381)));
    float _386 = _379 * _385;
    float _387 = _380 * _385;
    float _388 = _381 * _385;
    vec4 _393 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _395 = _393.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _571 = sqrt(((_379 * _379) + (_380 * _380)) + (_381 * _381));
        float _577 = (cbMatDynParam._m0[5u].x * _571) + cbMatDynParam._m0[5u].y;
        float _3361 = isnan(0.0) ? _577 : (isnan(_577) ? 0.0 : max(_577, 0.0));
        float _578 = isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0));
        float _582 = (cbMatDynParam._m0[5u].z * _571) + cbMatDynParam._m0[5u].w;
        float _3372 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0))) - _578)) + _578) < ((_395 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _407 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _408 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _428 = fma(_307, cbSceneParam._m0[5u].z, fma(_306, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _305));
    float _431 = fma(_307, cbSceneParam._m0[6u].z, fma(_306, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _305));
    float _434 = fma(_307, cbSceneParam._m0[7u].z, fma(_306, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _305));
    uint _447 = uint(roundEven(NORMAL.w)) * 13u;
    uint _449 = _447 + 9u;
    uint _450 = _449 + uint(cbMatDynParam._m0[0u].w);
    float _456 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0)))) * cbInstanceData._m0[_450].x;
    float _457 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0)))) * cbInstanceData._m0[_450].y;
    float _458 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0)))) * cbInstanceData._m0[_450].z;
    float _3383 = isnan(0.0) ? _456 : (isnan(_456) ? 0.0 : max(_456, 0.0));
    float _459 = isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0));
    float _3394 = isnan(0.0) ? _457 : (isnan(_457) ? 0.0 : max(_457, 0.0));
    float _460 = isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0));
    float _3405 = isnan(0.0) ? _458 : (isnan(_458) ? 0.0 : max(_458, 0.0));
    float _461 = isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0));
    float _462 = 1.0 - _312;
    float _463 = _459 * _462;
    float _464 = _460 * _462;
    float _465 = _461 * _462;
    float _470 = (_459 + (-0.039999999105930328369140625)) * _312;
    float _471 = (_460 + (-0.039999999105930328369140625)) * _312;
    float _472 = (_461 + (-0.039999999105930328369140625)) * _312;
    float _473 = _470 + 0.039999999105930328369140625;
    float _475 = _471 + 0.039999999105930328369140625;
    float _476 = _472 + 0.039999999105930328369140625;
    vec4 _485 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _407, cbSceneParam._m0[86u].y * _408));
    float _488 = _485.x * TEXCOORD.z;
    float _489 = dot(vec3(_305, _306, _307), vec3(_386, _387, _388));
    float _492 = _489 * 2.0;
    float _496 = (_492 * _305) - _386;
    float _497 = (_492 * _306) - _387;
    float _498 = (_492 * _307) - _388;
    float _502 = abs(dot(vec3(_386, _387, _388), vec3(_305, _306, _307)));
    float _3416 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _504 = sqrt(_308);
    float _517 = exp2((_504 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_504 * 3.0));
    float _523 = (1.0 - _517) * ((_504 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _524 = _517 * _504;
    float _552 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _556 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _560 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _891;
    float _893;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _616 = fma(_560, cbModelParam._m0[26u].z, fma(_556, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _552));
        float _620 = fma(_560, cbModelParam._m0[27u].z, fma(_556, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _552));
        float _624 = fma(_560, cbModelParam._m0[28u].z, fma(_556, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _552));
        float _649 = _552 + _305;
        float _650 = _556 + _306;
        float _651 = _560 + _307;
        float _661 = fma(_651, cbModelParam._m0[26u].z, fma(_650, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _649)) - _616;
        float _662 = fma(_651, cbModelParam._m0[27u].z, fma(_650, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _649)) - _620;
        float _663 = fma(_651, cbModelParam._m0[28u].z, fma(_650, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _649)) - _624;
        float _667 = inversesqrt(dot(vec3(_661, _662, _663), vec3(_661, _662, _663)));
        float _680 = ((_667 * _661) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_616 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _681 = ((_667 * _662) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_620 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _682 = ((_667 * _663) / cbModelParam._m0[34u].z) + ((((((_624 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _685 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_680, _681, _682), 0.0);
        vec4 _692 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_680, _681, _682), 0.0);
        vec4 _699 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_680, _681, _682), 0.0);
        vec4 _706 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_680, _681, _682), 0.0);
        float _719 = exp2((_685.w + (-0.5)) * 20.0) * 2.0;
        float _720 = _719 * (_685.x + (-0.5));
        float _721 = _719 * (_685.y + (-0.5));
        float _722 = _719 * (_685.z + (-0.5));
        float _729 = exp2((_692.w + (-0.5)) * 20.0) * 2.0;
        float _730 = _729 * (_692.x + (-0.5));
        float _731 = _729 * (_692.y + (-0.5));
        float _732 = _729 * (_692.z + (-0.5));
        float _739 = exp2((_699.w + (-0.5)) * 20.0) * 2.0;
        float _740 = _739 * (_699.x + (-0.5));
        float _741 = _739 * (_699.y + (-0.5));
        float _742 = _739 * (_699.z + (-0.5));
        float _749 = exp2((_706.w + (-0.5)) * 20.0) * 2.0;
        float _750 = _749 * (_706.x + (-0.5));
        float _751 = _749 * (_706.y + (-0.5));
        float _752 = _749 * (_706.z + (-0.5));
        float _753 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        float _754 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
        float _755 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
        float _756 = _720 * 0.5;
        float _757 = _730 * 0.5;
        float _758 = _740 * 0.5;
        float _759 = dot(vec3(_756, _757, _758), vec3(_756, _757, _758));
        float _764 = (_759 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_759);
        float _773 = (dot(vec3(_305, _306, _307), vec3(_764 * _756, _764 * _757, _764 * _758)) + 1.0) * 0.5;
        float _3442 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
        float _783 = sqrt(((_757 * _757) + (_756 * _756)) + (_758 * _758)) / (_753 + 9.9999997473787516355514526367188e-06);
        float _3453 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
        float _784 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
        float _785 = _784 * 2.0;
        float _789 = (1.0 - _784) / (_784 + 1.0);
        float _3464 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
        float _790 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
        float _799 = ((((1.0 - _790) * (_785 + 2.0)) * exp2(log2(isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0))) * (_785 + 1.0))) + _790) * _753;
        float _800 = _721 * 0.5;
        float _801 = _731 * 0.5;
        float _802 = _741 * 0.5;
        float _803 = dot(vec3(_800, _801, _802), vec3(_800, _801, _802));
        float _808 = (_803 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_803);
        float _816 = (dot(vec3(_305, _306, _307), vec3(_808 * _800, _808 * _801, _808 * _802)) + 1.0) * 0.5;
        float _3475 = isnan(0.0) ? _816 : (isnan(_816) ? 0.0 : max(_816, 0.0));
        float _825 = sqrt(((_801 * _801) + (_800 * _800)) + (_802 * _802)) / (_754 + 9.9999997473787516355514526367188e-06);
        float _3486 = isnan(0.0) ? _825 : (isnan(_825) ? 0.0 : max(_825, 0.0));
        float _826 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
        float _827 = _826 * 2.0;
        float _831 = (1.0 - _826) / (_826 + 1.0);
        float _3497 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        float _832 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
        float _841 = ((((1.0 - _832) * (_827 + 2.0)) * exp2(log2(isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0))) * (_827 + 1.0))) + _832) * _754;
        float _842 = _722 * 0.5;
        float _843 = _732 * 0.5;
        float _844 = _742 * 0.5;
        float _845 = dot(vec3(_842, _843, _844), vec3(_842, _843, _844));
        float _850 = (_845 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_845);
        float _858 = (dot(vec3(_305, _306, _307), vec3(_850 * _842, _850 * _843, _850 * _844)) + 1.0) * 0.5;
        float _3508 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _867 = sqrt(((_843 * _843) + (_842 * _842)) + (_844 * _844)) / (_755 + 9.9999997473787516355514526367188e-06);
        float _3519 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _868 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
        float _869 = _868 * 2.0;
        float _873 = (1.0 - _868) / (_868 + 1.0);
        float _3530 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _874 = isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0));
        float _883 = ((((1.0 - _874) * (_869 + 2.0)) * exp2(log2(isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0))) * (_869 + 1.0))) + _874) * _755;
        _891 = _722;
        _893 = _721;
        _894 = _720;
        _895 = _732;
        _896 = _731;
        _897 = _730;
        _898 = _742;
        _899 = _741;
        _900 = _740;
        _901 = _755;
        _902 = _754;
        _903 = _753;
        _904 = cbModelParam._m0[36u].z * (isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0)));
        _905 = cbModelParam._m0[36u].z * (isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0)));
        _906 = cbModelParam._m0[36u].z * (isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0)));
    }
    else
    {
        _891 = _892;
        _893 = _892;
        _894 = _892;
        _895 = _892;
        _896 = _892;
        _897 = _892;
        _898 = _892;
        _899 = _892;
        _900 = _892;
        _901 = _892;
        _902 = _892;
        _903 = _892;
        _904 = 0.0;
        _905 = 0.0;
        _906 = 0.0;
    }
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    float _1210;
    float _1211;
    float _1212;
    float _1213;
    float _1214;
    float _1215;
    float _1216;
    float _1217;
    float _1218;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _935 = fma(_560, cbModelParam._m0[30u].z, fma(_556, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _552));
        float _939 = fma(_560, cbModelParam._m0[31u].z, fma(_556, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _552));
        float _943 = fma(_560, cbModelParam._m0[32u].z, fma(_556, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _552));
        float _966 = _552 + _305;
        float _967 = _556 + _306;
        float _968 = _560 + _307;
        float _978 = fma(_968, cbModelParam._m0[30u].z, fma(_967, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _966)) - _935;
        float _979 = fma(_968, cbModelParam._m0[31u].z, fma(_967, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _966)) - _939;
        float _980 = fma(_968, cbModelParam._m0[32u].z, fma(_967, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _966)) - _943;
        float _984 = inversesqrt(dot(vec3(_978, _979, _980), vec3(_978, _979, _980)));
        float _997 = ((_984 * _978) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_935 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _998 = ((_984 * _979) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_939 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _999 = ((_984 * _980) / cbModelParam._m0[35u].z) + ((((((_943 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1001 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_997, _998, _999), 0.0);
        vec4 _1008 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_997, _998, _999), 0.0);
        vec4 _1015 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_997, _998, _999), 0.0);
        vec4 _1022 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_997, _998, _999), 0.0);
        float _1034 = exp2((_1001.w + (-0.5)) * 20.0) * 2.0;
        float _1035 = _1034 * (_1001.x + (-0.5));
        float _1036 = _1034 * (_1001.y + (-0.5));
        float _1037 = _1034 * (_1001.z + (-0.5));
        float _1044 = exp2((_1008.w + (-0.5)) * 20.0) * 2.0;
        float _1045 = _1044 * (_1008.x + (-0.5));
        float _1046 = _1044 * (_1008.y + (-0.5));
        float _1047 = _1044 * (_1008.z + (-0.5));
        float _1054 = exp2((_1015.w + (-0.5)) * 20.0) * 2.0;
        float _1055 = _1054 * (_1015.x + (-0.5));
        float _1056 = _1054 * (_1015.y + (-0.5));
        float _1057 = _1054 * (_1015.z + (-0.5));
        float _1064 = exp2((_1022.w + (-0.5)) * 20.0) * 2.0;
        float _1065 = _1064 * (_1022.x + (-0.5));
        float _1066 = _1064 * (_1022.y + (-0.5));
        float _1067 = _1064 * (_1022.z + (-0.5));
        float _1068 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1069 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1070 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1071 = _1035 * 0.5;
        float _1072 = _1045 * 0.5;
        float _1073 = _1055 * 0.5;
        float _1074 = dot(vec3(_1071, _1072, _1073), vec3(_1071, _1072, _1073));
        float _1079 = (_1074 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1074);
        float _1087 = (dot(vec3(_305, _306, _307), vec3(_1079 * _1071, _1079 * _1072, _1079 * _1073)) + 1.0) * 0.5;
        float _3571 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1096 = sqrt(((_1072 * _1072) + (_1071 * _1071)) + (_1073 * _1073)) / (_1068 + 9.9999997473787516355514526367188e-06);
        float _3582 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
        float _1098 = _1097 * 2.0;
        float _1102 = (1.0 - _1097) / (_1097 + 1.0);
        float _3593 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
        float _1112 = ((((1.0 - _1103) * (_1098 + 2.0)) * exp2(log2(isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0))) * (_1098 + 1.0))) + _1103) * _1068;
        float _1113 = _1036 * 0.5;
        float _1114 = _1046 * 0.5;
        float _1115 = _1056 * 0.5;
        float _1116 = dot(vec3(_1113, _1114, _1115), vec3(_1113, _1114, _1115));
        float _1121 = (_1116 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1116);
        float _1129 = (dot(vec3(_305, _306, _307), vec3(_1121 * _1113, _1121 * _1114, _1121 * _1115)) + 1.0) * 0.5;
        float _3604 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1138 = sqrt(((_1114 * _1114) + (_1113 * _1113)) + (_1115 * _1115)) / (_1069 + 9.9999997473787516355514526367188e-06);
        float _3615 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
        float _1140 = _1139 * 2.0;
        float _1144 = (1.0 - _1139) / (_1139 + 1.0);
        float _3626 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
        float _1154 = ((((1.0 - _1145) * (_1140 + 2.0)) * exp2(log2(isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0))) * (_1140 + 1.0))) + _1145) * _1069;
        float _1155 = _1037 * 0.5;
        float _1156 = _1047 * 0.5;
        float _1157 = _1057 * 0.5;
        float _1158 = dot(vec3(_1155, _1156, _1157), vec3(_1155, _1156, _1157));
        float _1163 = (_1158 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1158);
        float _1171 = (dot(vec3(_305, _306, _307), vec3(_1163 * _1155, _1163 * _1156, _1163 * _1157)) + 1.0) * 0.5;
        float _3637 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1180 = sqrt(((_1156 * _1156) + (_1155 * _1155)) + (_1157 * _1157)) / (_1070 + 9.9999997473787516355514526367188e-06);
        float _3648 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1181 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _1182 = _1181 * 2.0;
        float _1186 = (1.0 - _1181) / (_1181 + 1.0);
        float _3659 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1187 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
        float _1196 = ((((1.0 - _1187) * (_1182 + 2.0)) * exp2(log2(isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0))) * (_1182 + 1.0))) + _1187) * _1070;
        _1204 = _1037;
        _1205 = _1036;
        _1206 = _1035;
        _1207 = _1047;
        _1208 = _1046;
        _1209 = _1045;
        _1210 = _1057;
        _1211 = _1056;
        _1212 = _1055;
        _1213 = _1070;
        _1214 = _1069;
        _1215 = _1068;
        _1216 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0)));
        _1217 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0)));
        _1218 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0)));
    }
    else
    {
        _1204 = _892;
        _1205 = _892;
        _1206 = _892;
        _1207 = _892;
        _1208 = _892;
        _1209 = _892;
        _1210 = _892;
        _1211 = _892;
        _1212 = _892;
        _1213 = _892;
        _1214 = _892;
        _1215 = _892;
        _1216 = 0.0;
        _1217 = 0.0;
        _1218 = 0.0;
    }
    float _1228 = (cbModelParam._m0[1u].x * (_1216 - _904)) + _904;
    float _1229 = (cbModelParam._m0[1u].x * (_1217 - _905)) + _905;
    float _1230 = (cbModelParam._m0[1u].x * (_1218 - _906)) + _906;
    float _1251 = fma(_1230, cbSceneParam._m0[89u].z, fma(_1229, cbSceneParam._m0[89u].y, _1228 * cbSceneParam._m0[89u].x));
    float _1254 = fma(_1230, cbSceneParam._m0[90u].z, fma(_1229, cbSceneParam._m0[90u].y, _1228 * cbSceneParam._m0[90u].x));
    float _1257 = fma(_1230, cbSceneParam._m0[91u].z, fma(_1229, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1228));
    float _1272 = _496 * 0.5;
    float _1273 = _497 * 0.5;
    float _1274 = _498 * 0.5;
    float _1275 = dot(vec4(_1272, _1273, _1274, 1.0), vec4(_1206, _1209, _1212, _1215));
    float _1278 = dot(vec4(_1272, _1273, _1274, 1.0), vec4(_1205, _1208, _1211, _1214));
    float _1281 = dot(vec4(_1272, _1273, _1274, 1.0), vec4(_1204, _1207, _1210, _1213));
    float _1315;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1288 = dot(vec4(_1272, _1273, _1274, 1.0), vec4(_891, _895, _898, _901));
        float _1292 = dot(vec4(_1272, _1273, _1274, 1.0), vec4(_893, _896, _899, _902));
        float _1296 = dot(vec4(_1272, _1273, _1274, 1.0), vec4(_894, _897, _900, _903));
        float _1303 = dot(vec4(cbModelParam._m0[39u]), vec4(_1272, _1273, _1274, 1.0));
        _1315 = dot(vec3(isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0)), isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0)), isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1303) ? 0.0 : (isnan(0.0) ? _1303 : max(0.0, _1303))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1315 = 1.0;
    }
    float _1326;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1317 = dot(vec4(cbModelParam._m0[40u]), vec4(_1272, _1273, _1274, 1.0));
        _1326 = dot(vec3(isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0)), isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)), isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1317) ? 0.0 : (isnan(0.0) ? _1317 : max(0.0, _1317))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1326 = 1.0;
    }
    float _1330 = (_1326 * cbModelParam._m0[1u].x) + (_1315 * (1.0 - cbModelParam._m0[1u].x));
    float _1340 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _308);
    float _1341 = isnan(_1340) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1340 : min(cbModelParam._m0[25u].z, _1340));
    float _1423;
    float _1425;
    float _1427;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1390 = fma(_560, cbModelParam._m0[13u].z, fma(_556, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _552)) + cbModelParam._m0[13u].w;
        float _1394 = fma(_560, cbModelParam._m0[14u].z, fma(_556, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _552)) + cbModelParam._m0[14u].w;
        float _1398 = fma(_560, cbModelParam._m0[15u].z, fma(_556, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _552)) + cbModelParam._m0[15u].w;
        float _1401 = fma(_498, cbModelParam._m0[13u].z, fma(_497, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _496));
        float _1404 = fma(_498, cbModelParam._m0[14u].z, fma(_497, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _496));
        float _1407 = fma(_498, cbModelParam._m0[15u].z, fma(_497, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _496));
        float _1435;
        if (_1401 > 0.0)
        {
            _1435 = abs((1.0 - _1390) / _1401);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_1401 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_1390 + 1.0) / _1401);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _1435 = frontier_phi_19_17_ladder;
        }
        float _1643;
        if (_1404 > 0.0)
        {
            _1643 = abs((1.0 - _1394) / _1404);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_1404 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_1394 + 1.0) / _1404);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _1643 = frontier_phi_28_24_ladder;
        }
        float _1897;
        if (_1407 > 0.0)
        {
            _1897 = abs((1.0 - _1398) / _1407);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_1407 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_1398 + 1.0) / _1407);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _1897 = frontier_phi_40_35_ladder;
        }
        float _1899 = isnan(_1643) ? _1435 : (isnan(_1435) ? _1643 : min(_1435, _1643));
        float _1900 = isnan(_1897) ? _1899 : (isnan(_1899) ? _1897 : min(_1899, _1897));
        float _1904 = (_1900 * _1401) + _1390;
        float _1905 = (_1900 * _1404) + _1394;
        float _1906 = (_1900 * _1407) + _1398;
        float _1907 = _1900 * 9.9999997473787516355514526367188e-05;
        float _1909 = (-1.0) - _1907;
        float _1911 = _1907 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_1906 > _1911) || ((_1906 < _1909) || ((_1905 > _1911) || ((_1905 < _1909) || ((_1904 < _1909) || (_1904 > _1911))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2034 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1906, cbModelParam._m0[9u].z, fma(_1905, cbModelParam._m0[9u].y, _1904 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1906, cbModelParam._m0[10u].z, fma(_1905, cbModelParam._m0[10u].y, _1904 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1906, cbModelParam._m0[11u].z, fma(_1905, cbModelParam._m0[11u].y, _1904 * cbModelParam._m0[11u].x))), _1341);
            frontier_phi_18_40_ladder = _2034.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2034.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2034.x * cbModelParam._m0[1u].y;
        }
        _1423 = frontier_phi_18_40_ladder_2;
        _1425 = frontier_phi_18_40_ladder_1;
        _1427 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _1411 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_496, _497, _498), _1341);
        _1423 = _1411.x * cbModelParam._m0[1u].y;
        _1425 = _1411.y * cbModelParam._m0[1u].y;
        _1427 = _1411.z * cbModelParam._m0[1u].y;
    }
    float _1431 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _308);
    float _1432 = isnan(_1431) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1431 : min(cbModelParam._m0[25u].w, _1431));
    float _1525;
    float _1527;
    float _1529;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1489 = fma(_560, cbModelParam._m0[21u].z, fma(_556, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _552)) + cbModelParam._m0[21u].w;
        float _1493 = fma(_560, cbModelParam._m0[22u].z, fma(_556, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _552)) + cbModelParam._m0[22u].w;
        float _1497 = fma(_560, cbModelParam._m0[23u].z, fma(_556, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _552)) + cbModelParam._m0[23u].w;
        float _1500 = fma(_498, cbModelParam._m0[21u].z, fma(_497, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _496));
        float _1503 = fma(_498, cbModelParam._m0[22u].z, fma(_497, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _496));
        float _1506 = fma(_498, cbModelParam._m0[23u].z, fma(_497, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _496));
        float _1648;
        if (_1500 > 0.0)
        {
            _1648 = abs((1.0 - _1489) / _1500);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_1500 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_1489 + 1.0) / _1500);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _1648 = frontier_phi_30_26_ladder;
        }
        float _1924;
        if (_1503 > 0.0)
        {
            _1924 = abs((1.0 - _1493) / _1503);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_1503 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_1493 + 1.0) / _1503);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _1924 = frontier_phi_42_37_ladder;
        }
        float _2137;
        if (_1506 > 0.0)
        {
            _2137 = abs((1.0 - _1497) / _1506);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_1506 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_1497 + 1.0) / _1506);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2137 = frontier_phi_51_48_ladder;
        }
        float _2139 = isnan(_1924) ? _1648 : (isnan(_1648) ? _1924 : min(_1648, _1924));
        float _2140 = isnan(_2137) ? _2139 : (isnan(_2139) ? _2137 : min(_2139, _2137));
        float _2144 = (_2140 * _1500) + _1489;
        float _2145 = (_2140 * _1503) + _1493;
        float _2146 = (_2140 * _1506) + _1497;
        float _2147 = _2140 * 9.9999997473787516355514526367188e-05;
        float _2148 = (-1.0) - _2147;
        float _2150 = _2147 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2146 > _2150) || ((_2146 < _2148) || ((_2145 > _2150) || ((_2145 < _2148) || ((_2144 < _2148) || (_2144 > _2150))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2344 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2146, cbModelParam._m0[17u].z, fma(_2145, cbModelParam._m0[17u].y, _2144 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2146, cbModelParam._m0[18u].z, fma(_2145, cbModelParam._m0[18u].y, _2144 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2146, cbModelParam._m0[19u].z, fma(_2145, cbModelParam._m0[19u].y, _2144 * cbModelParam._m0[19u].x))), _1432);
            frontier_phi_27_51_ladder = _2344.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _2344.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _2344.x * cbModelParam._m0[1u].z;
        }
        _1525 = frontier_phi_27_51_ladder_2;
        _1527 = frontier_phi_27_51_ladder_1;
        _1529 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _1509 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_496, _497, _498), _1432);
        _1525 = _1509.x * cbModelParam._m0[1u].z;
        _1527 = _1509.y * cbModelParam._m0[1u].z;
        _1529 = _1509.z * cbModelParam._m0[1u].z;
    }
    float _1542 = (((_523 * _473) + _524) * _488) * ((cbModelParam._m0[1u].w * (_1525 - _1423)) + _1423);
    float _1544 = (((_523 * _475) + _524) * _488) * ((cbModelParam._m0[1u].w * (_1527 - _1425)) + _1425);
    float _1546 = (((_523 * _476) + _524) * _488) * ((cbModelParam._m0[1u].w * (_1529 - _1427)) + _1427);
    float _1549 = fma(_1546, cbSceneParam._m0[89u].z, fma(_1544, cbSceneParam._m0[89u].y, _1542 * cbSceneParam._m0[89u].x));
    float _1552 = fma(_1546, cbSceneParam._m0[90u].z, fma(_1544, cbSceneParam._m0[90u].y, _1542 * cbSceneParam._m0[90u].x));
    float _1555 = fma(_1546, cbSceneParam._m0[91u].z, fma(_1544, cbSceneParam._m0[91u].y, _1542 * cbSceneParam._m0[91u].x));
    uvec4 _1565 = floatBitsToUint(cbInstanceData._m0[_447 + 5u]);
    uint _1567 = _1565.x * 14u;
    uint _1568 = _1567 + 13u;
    float _1575 = _488 + (-1.0);
    float _1580 = (cbLight._m0[_1568].x * _1575) + 1.0;
    float _1581 = (cbLight._m0[_1568].y * _1575) + 1.0;
    float _1582 = (cbLight._m0[_1568].z * _1575) + 1.0;
    float _1583 = (cbLight._m0[_1568].w * _1575) + 1.0;
    uint _1584 = _1567 + 5u;
    float _1590 = isnan(1.0) ? _1581 : (isnan(_1581) ? 1.0 : min(_1581, 1.0));
    uint _1594 = _1567 + 4u;
    float _1601 = isnan(1.0) ? _1580 : (isnan(_1580) ? 1.0 : min(_1580, 1.0));
    uint _1605 = _1567 | 1u;
    float _1616 = dot(vec3(cbLight._m0[_1567].xyz), vec3(_305, _306, _307));
    float _1619 = dot(vec3(cbLight._m0[_1605].xyz), vec3(_305, _306, _307));
    float _3795 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
    float _3806 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0));
    float _1624 = (isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * 0.3183098733425140380859375;
    float _1626 = (isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0))) * 0.3183098733425140380859375;
    float _1633 = ((cbLight._m0[_1584].x * _1590) * _1626) + ((cbLight._m0[_1594].x * _1601) * _1624);
    float _1634 = ((_1590 * cbLight._m0[_1584].y) * _1626) + ((_1601 * cbLight._m0[_1594].y) * _1624);
    float _1635 = ((_1590 * cbLight._m0[_1584].z) * _1626) + ((_1601 * cbLight._m0[_1594].z) * _1624);
    uvec4 _1640 = floatBitsToUint(cbLight._m0[_1567 + 12u]);
    bool _1642 = _1640.x == 0u;
    float _1653;
    float _1655;
    float _1657;
    if (_1642)
    {
        _1653 = _1633;
        _1655 = _1634;
        _1657 = _1635;
    }
    else
    {
        uint _1661 = _1567 + 6u;
        float _1677 = (dot(vec3(cbLight._m0[_1567 + 2u].xyz), vec3(_305, _306, _307)) * 0.5) + 0.5;
        float _1678 = _1677 * _1677;
        float _3817 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
        float _1679 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
        float _1680 = isnan(1.0) ? _1582 : (isnan(_1582) ? 1.0 : min(_1582, 1.0));
        _1653 = (((cbLight._m0[_1661].x * 0.3183098733425140380859375) * _1679) * _1680) + _1633;
        _1655 = (((cbLight._m0[_1661].y * 0.3183098733425140380859375) * _1679) * _1680) + _1634;
        _1657 = (((cbLight._m0[_1661].z * 0.3183098733425140380859375) * _1679) * _1680) + _1635;
    }
    bool _1660 = _1640.y == 0u;
    float _1698;
    float _1700;
    float _1702;
    if (_1660)
    {
        _1698 = _1653;
        _1700 = _1655;
        _1702 = _1657;
    }
    else
    {
        uint _1868 = _1567 + 7u;
        float _1884 = (dot(vec3(cbLight._m0[_1567 + 3u].xyz), vec3(_305, _306, _307)) * 0.5) + 0.5;
        float _1885 = _1884 * _1884;
        float _3833 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
        float _1886 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
        float _1887 = isnan(1.0) ? _1583 : (isnan(_1583) ? 1.0 : min(_1583, 1.0));
        _1698 = (((cbLight._m0[_1868].x * 0.3183098733425140380859375) * _1886) * _1887) + _1653;
        _1700 = (((cbLight._m0[_1868].y * 0.3183098733425140380859375) * _1886) * _1887) + _1655;
        _1702 = (((cbLight._m0[_1868].z * 0.3183098733425140380859375) * _1886) * _1887) + _1657;
    }
    uint _1705 = _1567 + 8u;
    float _1718 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1567].w)) * _308) * 0.949999988079071044921875);
    float _1719 = _1718 * _1718;
    float _1720 = cbLight._m0[_1567].x + _386;
    float _1721 = cbLight._m0[_1567].y + _387;
    float _1722 = cbLight._m0[_1567].z + _388;
    float _1726 = inversesqrt(dot(vec3(_1720, _1721, _1722), vec3(_1720, _1721, _1722)));
    float _1727 = _1726 * _1720;
    float _1728 = _1726 * _1721;
    float _1729 = _1726 * _1722;
    float _1730 = dot(vec3(_305, _306, _307), vec3(cbLight._m0[_1567].xyz));
    float _3849 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
    float _1733 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
    float _3860 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _1734 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
    float _1735 = dot(vec3(_305, _306, _307), vec3(_1727, _1728, _1729));
    float _3871 = isnan(0.0) ? _1735 : (isnan(_1735) ? 0.0 : max(_1735, 0.0));
    float _1738 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
    float _1739 = dot(vec3(cbLight._m0[_1567].xyz), vec3(_1727, _1728, _1729));
    float _3882 = isnan(0.0) ? _1739 : (isnan(_1739) ? 0.0 : max(_1739, 0.0));
    float _1743 = _1719 * _1719;
    float _1747 = ((_1738 * _1738) * (_1743 + (-1.0))) + 1.0;
    float _1755 = exp2(log2(1.0 - (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0)))) * 5.0);
    float _1756 = 0.959999978542327880859375 - _470;
    float _1758 = 0.959999978542327880859375 - _471;
    float _1759 = 0.959999978542327880859375 - _472;
    float _1766 = 1.0 - _1719;
    float _1777 = (0.5 / (((_1734 * ((_1733 * _1766) + _1719)) + 9.9999999392252902907785028219223e-09) + (((_1734 * _1766) + _1719) * _1733))) * _1733;
    float _3893 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
    float _1779 = (isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) * (_1743 / ((_1747 * _1747) * 3.141590118408203125));
    uint _1790 = _1567 + 9u;
    float _1801 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1605].w)) * _308) * 0.949999988079071044921875);
    float _1802 = _1801 * _1801;
    float _1803 = cbLight._m0[_1605].x + _386;
    float _1804 = cbLight._m0[_1605].y + _387;
    float _1805 = cbLight._m0[_1605].z + _388;
    float _1809 = inversesqrt(dot(vec3(_1803, _1804, _1805), vec3(_1803, _1804, _1805)));
    float _1810 = _1809 * _1803;
    float _1811 = _1809 * _1804;
    float _1812 = _1809 * _1805;
    float _1813 = dot(vec3(_305, _306, _307), vec3(cbLight._m0[_1605].xyz));
    float _3904 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
    float _1816 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
    float _1817 = dot(vec3(_305, _306, _307), vec3(_1810, _1811, _1812));
    float _3915 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
    float _1820 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
    float _1821 = dot(vec3(cbLight._m0[_1605].xyz), vec3(_1810, _1811, _1812));
    float _3926 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
    float _1825 = _1802 * _1802;
    float _1829 = ((_1820 * _1820) * (_1825 + (-1.0))) + 1.0;
    float _1836 = exp2(log2(1.0 - (isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0)))) * 5.0);
    float _1843 = 1.0 - _1802;
    float _1853 = (0.5 / (((_1734 * ((_1816 * _1843) + _1802)) + 9.9999999392252902907785028219223e-09) + (((_1734 * _1843) + _1802) * _1816))) * _1816;
    float _3937 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
    float _1855 = (isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0))) * (_1825 / ((_1829 * _1829) * 3.141590118408203125));
    float _1865 = (((((_1836 * _1756) + _473) * cbLight._m0[_1790].x) * _1855) * _1590) + (((((_1755 * _1756) + _473) * cbLight._m0[_1705].x) * _1779) * _1601);
    float _1866 = (((((_1836 * _1758) + _475) * cbLight._m0[_1790].y) * _1855) * _1590) + (((((_1755 * _1758) + _475) * cbLight._m0[_1705].y) * _1779) * _1601);
    float _1867 = (((((_1836 * _1759) + _476) * cbLight._m0[_1790].z) * _1855) * _1590) + (((((_1755 * _1759) + _476) * cbLight._m0[_1705].z) * _1779) * _1601);
    float _1929;
    float _1931;
    float _1933;
    if (_1642)
    {
        _1929 = _1865;
        _1931 = _1866;
        _1933 = _1867;
    }
    else
    {
        uint _1935 = _1567 + 2u;
        uint _1939 = _1567 + 10u;
        float _1953 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1935].w)) * _308) * 0.949999988079071044921875);
        float _1954 = _1953 * _1953;
        float _1955 = cbLight._m0[_1935].x + _386;
        float _1956 = cbLight._m0[_1935].y + _387;
        float _1957 = cbLight._m0[_1935].z + _388;
        float _1961 = inversesqrt(dot(vec3(_1955, _1956, _1957), vec3(_1955, _1956, _1957)));
        float _1962 = _1961 * _1955;
        float _1963 = _1961 * _1956;
        float _1964 = _1961 * _1957;
        float _1965 = dot(vec3(_305, _306, _307), vec3(cbLight._m0[_1935].xyz));
        float _3948 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
        float _1968 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
        float _1969 = dot(vec3(_305, _306, _307), vec3(_1962, _1963, _1964));
        float _3959 = isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0));
        float _1972 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
        float _1973 = dot(vec3(cbLight._m0[_1935].xyz), vec3(_1962, _1963, _1964));
        float _3970 = isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0));
        float _1977 = _1954 * _1954;
        float _1981 = ((_1972 * _1972) * (_1977 + (-1.0))) + 1.0;
        float _1988 = exp2(log2(1.0 - (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0)))) * 5.0);
        float _1995 = 1.0 - _1954;
        float _2005 = (0.5 / (((_1734 * ((_1968 * _1995) + _1954)) + 9.9999999392252902907785028219223e-09) + (((_1734 * _1995) + _1954) * _1968))) * _1968;
        float _3981 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
        float _2007 = (isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * (_1977 / ((_1981 * _1981) * 3.141590118408203125));
        float _2008 = isnan(1.0) ? _1582 : (isnan(_1582) ? 1.0 : min(_1582, 1.0));
        _1929 = (((((_1988 * _1756) + _473) * cbLight._m0[_1939].x) * _2007) * _2008) + _1865;
        _1931 = (((((_1988 * _1758) + _475) * cbLight._m0[_1939].y) * _2007) * _2008) + _1866;
        _1933 = (((((_1988 * _1759) + _476) * cbLight._m0[_1939].z) * _2007) * _2008) + _1867;
    }
    float _2043;
    float _2045;
    float _2047;
    if (_1660)
    {
        _2043 = _1929;
        _2045 = _1931;
        _2047 = _1933;
    }
    else
    {
        uint _2054 = _1567 + 3u;
        uint _2058 = _1567 + 11u;
        float _2072 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2054].w)) * _308) * 0.949999988079071044921875);
        float _2073 = _2072 * _2072;
        float _2074 = cbLight._m0[_2054].x + _386;
        float _2075 = cbLight._m0[_2054].y + _387;
        float _2076 = cbLight._m0[_2054].z + _388;
        float _2080 = inversesqrt(dot(vec3(_2074, _2075, _2076), vec3(_2074, _2075, _2076)));
        float _2081 = _2080 * _2074;
        float _2082 = _2080 * _2075;
        float _2083 = _2080 * _2076;
        float _2084 = dot(vec3(_305, _306, _307), vec3(cbLight._m0[_2054].xyz));
        float _3997 = isnan(0.0) ? _2084 : (isnan(_2084) ? 0.0 : max(_2084, 0.0));
        float _2087 = isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0));
        float _2088 = dot(vec3(_305, _306, _307), vec3(_2081, _2082, _2083));
        float _4008 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
        float _2091 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _2092 = dot(vec3(cbLight._m0[_2054].xyz), vec3(_2081, _2082, _2083));
        float _4019 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
        float _2096 = _2073 * _2073;
        float _2100 = ((_2091 * _2091) * (_2096 + (-1.0))) + 1.0;
        float _2107 = exp2(log2(1.0 - (isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0)))) * 5.0);
        float _2114 = 1.0 - _2073;
        float _2124 = (0.5 / (((_1734 * ((_2087 * _2114) + _2073)) + 9.9999999392252902907785028219223e-09) + (((_1734 * _2114) + _2073) * _2087))) * _2087;
        float _4030 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
        float _2126 = (isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * (_2096 / ((_2100 * _2100) * 3.141590118408203125));
        float _2127 = isnan(1.0) ? _1583 : (isnan(_1583) ? 1.0 : min(_1583, 1.0));
        _2043 = (((((_2107 * _1756) + _473) * cbLight._m0[_2058].x) * _2126) * _2127) + _1929;
        _2045 = (((((_2107 * _1758) + _475) * cbLight._m0[_2058].y) * _2126) * _2127) + _1931;
        _2047 = (((((_2107 * _1759) + _476) * cbLight._m0[_2058].z) * _2126) * _2127) + _1933;
    }
    float _2261;
    float _2263;
    float _2265;
    float _2267;
    float _2269;
    float _2271;
    if (_1565.y == 0u)
    {
        float _2202 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2203 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2202;
        float _2204 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2202;
        float _2205 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2202;
        uvec4 _2217 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2218 = _2217.x;
        uint _2229 = uint((float(_2217.y) * floor(float(uint(cbSceneParam._m0[85u].y * _408) / _2218))) + floor(float(uint(cbSceneParam._m0[85u].x * _407) / _2218)));
        float _2239 = (log2(_2205 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2240 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
        uint _2243 = uint(isnan(14.0) ? _2240 : (isnan(_2240) ? 14.0 : min(_2240, 14.0)));
        uvec4 _2248 = texelFetch(g_lightClusterGridBuffer, int(((_2243 << 2u) + (_2229 << 6u)) >> 2u));
        uint _2249 = _2248.x;
        uint _2250 = _2217.z;
        float _2349;
        float _2351;
        float _2353;
        float _2355;
        float _2357;
        float _2359;
        if (((((1u << ((_2250 >> 4u) & 15u)) + 4294967295u) & _2249) == 0u) || ((_2250 & 240u) == 0u))
        {
            _2349 = 0.0;
            _2351 = 0.0;
            _2353 = 0.0;
            _2355 = 0.0;
            _2357 = 0.0;
            _2359 = 0.0;
        }
        else
        {
            float _2350;
            float _2352;
            float _2354;
            float _2356;
            float _2358;
            float _2360;
            float _2501 = 0.0;
            float _2502 = 0.0;
            float _2503 = 0.0;
            float _2504 = 0.0;
            float _2505 = 0.0;
            float _2506 = 0.0;
            uint _2507 = 0u;
            uint _2516;
            bool _2517;
            for (;;)
            {
                _2516 = texelFetch(g_lightClassification, int((((_2243 << 5u) + (_2229 << 9u)) + (_2507 << 2u)) >> 2u)).x;
                _2517 = _2516 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_2517)
                {
                    frontier_phi_68_pred = _2503;
                    frontier_phi_68_pred_1 = _2506;
                    frontier_phi_68_pred_2 = _2505;
                    frontier_phi_68_pred_3 = _2504;
                    frontier_phi_68_pred_4 = _2502;
                    frontier_phi_68_pred_5 = _2501;
                }
                else
                {
                    float _2646;
                    float _2647;
                    float _2648;
                    float _2649;
                    float _2650;
                    float _2651;
                    uint _2652;
                    _2646 = _2501;
                    _2647 = _2502;
                    _2648 = _2503;
                    _2649 = _2504;
                    _2650 = _2505;
                    _2651 = _2506;
                    _2652 = _2516;
                    float _2573;
                    float _2574;
                    float _2575;
                    float _2576;
                    float _2577;
                    float _2578;
                    for (;;)
                    {
                        uint _2656 = uint(findLSB(_2652)) + (_2507 << 5u);
                        uint _2653 = (_2652 + 4294967295u) & _2652;
                        uint _2658 = _2656 * 48u;
                        vec4 _2672 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2658)).x, texelFetch(g_PointLightRenderingBuffer, int(_2658 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2658 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2658 + 3u)).x));
                        uint _2678 = (_2656 * 48u) + 4u;
                        vec4 _2691 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2678)).x, texelFetch(g_PointLightRenderingBuffer, int(_2678 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2678 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2678 + 3u)).x));
                        uint _2697 = (_2656 * 48u) + 8u;
                        vec3 _2708 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2697)).x, texelFetch(g_PointLightRenderingBuffer, int(_2697 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2697 + 2u)).x));
                        float _2712 = _2672.x - _2203;
                        float _2713 = _2672.y - _2204;
                        float _2714 = _2672.z - _2205;
                        float _2715 = dot(vec3(_2712, _2713, _2714), vec3(_2712, _2713, _2714));
                        float _2718 = inversesqrt(_2715);
                        float _2719 = _2718 * _2712;
                        float _2720 = _2718 * _2713;
                        float _2721 = _2718 * _2714;
                        float _2722 = dot(vec3(_428, _431, _434), vec3(_2719, _2720, _2721));
                        float _2727 = 1.0 - (_2715 * _2672.w);
                        float _4056 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
                        float _2728 = isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0));
                        float _2729 = sqrt(_2715) * _2691.w;
                        float _2732 = 1.39999997615814208984375 / (_2729 + 1.39999997615814208984375);
                        float _2733 = _2732 * _2732;
                        float _2736 = ((1.0 - _2733) * _2722) + _2733;
                        float _2739 = _2729 * _2729;
                        float _2743 = ((isnan(0.0) ? _2736 : (isnan(_2736) ? 0.0 : max(_2736, 0.0))) * _2728) / ((_2739 * 0.699999988079071044921875) + 1.0);
                        float _2747 = (-0.0) - _2203;
                        float _2748 = (-0.0) - _2204;
                        float _2749 = (-0.0) - _2205;
                        float _2753 = inversesqrt(dot(vec3(_2747, _2748, _2749), vec3(_2747, _2748, _2749)));
                        float _2754 = _2753 * _2747;
                        float _2755 = _2753 * _2748;
                        float _2756 = _2753 * _2749;
                        float _2764 = exp2(log2(1.0 / ((_2739 * 3.5) + 5.0)) * 0.25);
                        float _2765 = 1.0 - _504;
                        float _2772 = sqrt(1.0 - ((1.0 - (_2765 * _2765)) * (1.0 - (_2764 * _2764))));
                        float _2773 = _2772 * _2772;
                        float _2774 = _2773 * _2773;
                        float _2775 = _2754 + _2719;
                        float _2776 = _2755 + _2720;
                        float _2777 = _2756 + _2721;
                        float _2781 = inversesqrt(dot(vec3(_2775, _2776, _2777), vec3(_2775, _2776, _2777)));
                        float _2785 = dot(vec3(_428, _431, _434), vec3(_2754, _2755, _2756));
                        float _4072 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
                        float _2788 = isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0));
                        float _2789 = dot(vec3(_428, _431, _434), vec3(_2781 * _2775, _2781 * _2776, _2781 * _2777));
                        float _4083 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
                        float _2792 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
                        float _2796 = ((_2792 * _2792) * (_2774 + (-1.0))) + 1.0;
                        float _2797 = _2732 * _2773;
                        float _2798 = _2797 * _2797;
                        float _2801 = ((1.0 - _2798) * _2722) + _2798;
                        float _4094 = isnan(0.0) ? _2801 : (isnan(_2801) ? 0.0 : max(_2801, 0.0));
                        float _2802 = isnan(1.0) ? _4094 : (isnan(_4094) ? 1.0 : min(_4094, 1.0));
                        float _2803 = 1.0 - _2773;
                        float _2813 = (0.5 / (((_2802 * ((_2788 * _2803) + _2773)) + 9.9999999392252902907785028219223e-09) + (((_2802 * _2803) + _2773) * _2788))) * _2802;
                        float _4105 = isnan(0.0) ? _2813 : (isnan(_2813) ? 0.0 : max(_2813, 0.0));
                        float _2824 = (((_2774 * 3.1415927410125732421875) * (isnan(1.0) ? _4105 : (isnan(_4105) ? 1.0 : min(_4105, 1.0)))) / ((_2796 * _2796) * ((_2739 * 2.1991131305694580078125) + 3.141590118408203125))) * _2728;
                        _2576 = (_2743 * _2691.x) + _2649;
                        _2577 = (_2743 * _2691.y) + _2650;
                        _2578 = (_2743 * _2691.z) + _2651;
                        _2573 = (_2824 * _2708.x) + _2646;
                        _2574 = (_2824 * _2708.y) + _2647;
                        _2575 = (_2824 * _2708.z) + _2648;
                        if (_2653 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2646 = _2573;
                            _2647 = _2574;
                            _2648 = _2575;
                            _2649 = _2576;
                            _2650 = _2577;
                            _2651 = _2578;
                            _2652 = _2653;
                        }
                    }
                    frontier_phi_68_pred = _2575;
                    frontier_phi_68_pred_1 = _2578;
                    frontier_phi_68_pred_2 = _2577;
                    frontier_phi_68_pred_3 = _2576;
                    frontier_phi_68_pred_4 = _2574;
                    frontier_phi_68_pred_5 = _2573;
                }
                _2354 = frontier_phi_68_pred;
                _2360 = frontier_phi_68_pred_1;
                _2358 = frontier_phi_68_pred_2;
                _2356 = frontier_phi_68_pred_3;
                _2352 = frontier_phi_68_pred_4;
                _2350 = frontier_phi_68_pred_5;
                uint _2508 = _2507 + 1u;
                if (_2508 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2501 = _2350;
                    _2502 = _2352;
                    _2503 = _2354;
                    _2504 = _2356;
                    _2505 = _2358;
                    _2506 = _2360;
                    _2507 = _2508;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2349 = _2350;
            _2351 = _2352;
            _2353 = _2354;
            _2355 = _2356;
            _2357 = _2358;
            _2359 = _2360;
        }
        uvec4 _2363 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2364 = _2363.z;
        uint _2366 = (_2364 >> 8u) & 15u;
        float _2469;
        float _2471;
        float _2473;
        float _2475;
        float _2477;
        float _2479;
        if (((4294967295u << _2366) & _2249) == 0u)
        {
            _2469 = _2349;
            _2471 = _2351;
            _2473 = _2353;
            _2475 = _2355;
            _2477 = _2357;
            _2479 = _2359;
        }
        else
        {
            float _2494 = inversesqrt(dot(vec3(_2203, _2204, _2205), vec3(_2203, _2204, _2205)));
            float _2495 = _2494 * _2203;
            float _2496 = _2494 * _2204;
            float _2497 = _2494 * _2205;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_2366 < ((_2364 >> 12u) & 15u))
            {
                float _2470;
                float _2472;
                float _2474;
                float _2476;
                float _2478;
                float _2480;
                float _2629 = _2349;
                float _2630 = _2351;
                float _2631 = _2353;
                float _2632 = _2355;
                float _2633 = _2357;
                float _2634 = _2359;
                uint _2635 = _2366;
                uint _2644;
                bool _2645;
                for (;;)
                {
                    _2644 = texelFetch(g_lightClassification, int((((_2243 << 5u) + (_2229 << 9u)) + (_2635 << 2u)) >> 2u)).x;
                    _2645 = _2644 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_2645)
                    {
                        frontier_phi_79_pred = _2634;
                        frontier_phi_79_pred_1 = _2633;
                        frontier_phi_79_pred_2 = _2632;
                        frontier_phi_79_pred_3 = _2631;
                        frontier_phi_79_pred_4 = _2630;
                        frontier_phi_79_pred_5 = _2629;
                    }
                    else
                    {
                        float _2838;
                        float _2839;
                        float _2840;
                        float _2841;
                        float _2842;
                        float _2843;
                        float _3134;
                        float _3135;
                        float _3136;
                        float _3137;
                        float _3138;
                        float _3139;
                        float _2851 = _2629;
                        float _2852 = _2630;
                        float _2853 = _2631;
                        float _2854 = _2632;
                        float _2855 = _2633;
                        float _2856 = _2634;
                        uint _2857 = _2644;
                        uint _2858;
                        vec4 _2883;
                        float _2884;
                        vec4 _2899;
                        vec3 _2911;
                        vec4 _2927;
                        vec4 _2943;
                        float _2990;
                        bool _2991;
                        for (;;)
                        {
                            uint _2868 = ((_2635 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2857));
                            _2858 = (_2857 + 4294967295u) & _2857;
                            uint _2870 = _2868 * 40u;
                            _2883 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2870)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2870 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2870 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2870 + 3u)).x));
                            _2884 = _2883.w;
                            uint _2886 = (_2868 * 40u) + 4u;
                            _2899 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2886)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 3u)).x));
                            uint _2901 = (_2868 * 40u) + 8u;
                            _2911 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2901)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 2u)).x));
                            uint _2914 = (_2868 * 40u) + 16u;
                            _2927 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2914)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2914 + 3u)).x));
                            uint _2930 = (_2868 * 40u) + 20u;
                            _2943 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2930)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2930 + 3u)).x));
                            uint _2946 = (_2868 * 40u) + 24u;
                            vec4 _2959 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2946)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2946 + 3u)).x));
                            uint _2965 = (_2868 * 40u) + 28u;
                            vec4 _2978 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2965)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2965 + 3u)).x));
                            _2990 = fma(_2205, _2978.z, fma(_2204, _2978.y, _2978.x * _2203)) + _2978.w;
                            _2991 = !((fma(_2205, _2959.z, fma(_2204, _2959.y, _2959.x * _2203)) + _2959.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_2991)
                            {
                                float _3018 = _2883.x - _2203;
                                float _3019 = _2883.y - _2204;
                                float _3020 = _2883.z - _2205;
                                float _3021 = dot(vec3(_3018, _3019, _3020), vec3(_3018, _3019, _3020));
                                float _3024 = inversesqrt(_3021);
                                float _3025 = _3024 * _3018;
                                float _3026 = _3024 * _3019;
                                float _3027 = _3024 * _3020;
                                float _3031 = 1.0 - (_3021 / (_2884 * _2884));
                                float _4116 = isnan(0.0) ? _3031 : (isnan(_3031) ? 0.0 : max(_3031, 0.0));
                                float _3032 = isnan(1.0) ? _4116 : (isnan(_4116) ? 1.0 : min(_4116, 1.0));
                                float _3036 = sqrt(_3021) * _2899.w;
                                float _3038 = 1.39999997615814208984375 / (_3036 + 1.39999997615814208984375);
                                float _3039 = _3038 * _3038;
                                float _3042 = ((1.0 - _3039) * dot(vec3(_3025, _3026, _3027), vec3(_428, _431, _434))) + _3039;
                                float _3045 = _3036 * _3036;
                                float _3049 = (fma(_2205, _2927.z, fma(_2204, _2927.y, _2927.x * _2203)) + _2927.w) / _2990;
                                float _3050 = (fma(_2205, _2943.z, fma(_2204, _2943.y, _2943.x * _2203)) + _2943.w) / _2990;
                                float _3054 = 1.0 - dot(vec2(_3049, _3050), vec2(_3049, _3050));
                                float _4132 = isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0));
                                float _3055 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
                                float _3056 = _3055 * (((isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0))) * _3032) / ((_3045 * 0.699999988079071044921875) + 1.0));
                                float _3068 = exp2(log2(1.0 / ((_3045 * 3.5) + 5.0)) * 0.25);
                                float _3069 = 1.0 - _504;
                                float _3076 = sqrt(1.0 - ((1.0 - (_3069 * _3069)) * (1.0 - (_3068 * _3068))));
                                float _3077 = _3076 * _3076;
                                float _3078 = _3077 * _3077;
                                float _3079 = _3025 - _2495;
                                float _3080 = _3026 - _2496;
                                float _3081 = _3027 - _2497;
                                float _3085 = inversesqrt(dot(vec3(_3079, _3080, _3081), vec3(_3079, _3080, _3081)));
                                float _3089 = dot(vec3(_428, _431, _434), vec3((-0.0) - _2495, (-0.0) - _2496, (-0.0) - _2497));
                                float _4143 = isnan(0.0) ? _3089 : (isnan(_3089) ? 0.0 : max(_3089, 0.0));
                                float _3092 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
                                float _3093 = dot(vec3(_428, _431, _434), vec3(_3085 * _3079, _3085 * _3080, _3085 * _3081));
                                float _4154 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0));
                                float _3096 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
                                float _3100 = ((_3096 * _3096) * (_3078 + (-1.0))) + 1.0;
                                float _3101 = _3038 * _3077;
                                float _3102 = _3101 * _3101;
                                float _3108 = ((1.0 - _3102) * dot(vec3(_428, _431, _434), vec3(_3025, _3026, _3027))) + _3102;
                                float _4165 = isnan(0.0) ? _3108 : (isnan(_3108) ? 0.0 : max(_3108, 0.0));
                                float _3109 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
                                float _3110 = 1.0 - _3077;
                                float _3120 = (0.5 / (((_3109 * ((_3092 * _3110) + _3077)) + 9.9999999392252902907785028219223e-09) + (((_3109 * _3110) + _3077) * _3092))) * _3109;
                                float _4176 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0));
                                float _3130 = (_3055 * _3032) * (((_3078 * 3.1415927410125732421875) * (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0)))) / ((_3100 * _3100) * ((_3045 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3056 * _2899.z;
                                frontier_phi_85_pred_1 = _3056 * _2899.y;
                                frontier_phi_85_pred_2 = _3056 * _2899.x;
                                frontier_phi_85_pred_3 = _3130 * _2911.z;
                                frontier_phi_85_pred_4 = _3130 * _2911.y;
                                frontier_phi_85_pred_5 = _3130 * _2911.x;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3139 = frontier_phi_85_pred;
                            _3138 = frontier_phi_85_pred_1;
                            _3137 = frontier_phi_85_pred_2;
                            _3136 = frontier_phi_85_pred_3;
                            _3135 = frontier_phi_85_pred_4;
                            _3134 = frontier_phi_85_pred_5;
                            _2841 = _3137 + _2854;
                            _2842 = _3138 + _2855;
                            _2843 = _3139 + _2856;
                            _2838 = _3134 + _2851;
                            _2839 = _3135 + _2852;
                            _2840 = _3136 + _2853;
                            if (_2858 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2851 = _2838;
                                _2852 = _2839;
                                _2853 = _2840;
                                _2854 = _2841;
                                _2855 = _2842;
                                _2856 = _2843;
                                _2857 = _2858;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _2843;
                        frontier_phi_79_pred_1 = _2842;
                        frontier_phi_79_pred_2 = _2841;
                        frontier_phi_79_pred_3 = _2840;
                        frontier_phi_79_pred_4 = _2839;
                        frontier_phi_79_pred_5 = _2838;
                    }
                    _2480 = frontier_phi_79_pred;
                    _2478 = frontier_phi_79_pred_1;
                    _2476 = frontier_phi_79_pred_2;
                    _2474 = frontier_phi_79_pred_3;
                    _2472 = frontier_phi_79_pred_4;
                    _2470 = frontier_phi_79_pred_5;
                    uint _2636 = _2635 + 1u;
                    if (_2636 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2629 = _2470;
                        _2630 = _2472;
                        _2631 = _2474;
                        _2632 = _2476;
                        _2633 = _2478;
                        _2634 = _2480;
                        _2635 = _2636;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _2476;
                frontier_phi_60_61_ladder_1 = _2480;
                frontier_phi_60_61_ladder_2 = _2478;
                frontier_phi_60_61_ladder_3 = _2474;
                frontier_phi_60_61_ladder_4 = _2472;
                frontier_phi_60_61_ladder_5 = _2470;
            }
            else
            {
                frontier_phi_60_61_ladder = _2355;
                frontier_phi_60_61_ladder_1 = _2359;
                frontier_phi_60_61_ladder_2 = _2357;
                frontier_phi_60_61_ladder_3 = _2353;
                frontier_phi_60_61_ladder_4 = _2351;
                frontier_phi_60_61_ladder_5 = _2349;
            }
            _2469 = frontier_phi_60_61_ladder_5;
            _2471 = frontier_phi_60_61_ladder_4;
            _2473 = frontier_phi_60_61_ladder_3;
            _2475 = frontier_phi_60_61_ladder;
            _2477 = frontier_phi_60_61_ladder_2;
            _2479 = frontier_phi_60_61_ladder_1;
        }
        float _2484 = isnan(1.0) ? _488 : (isnan(_488) ? 1.0 : min(_488, 1.0));
        _2261 = (_2484 * _2475) + _1698;
        _2263 = (_2484 * _2477) + _1700;
        _2265 = (_2484 * _2479) + _1702;
        _2267 = ((_2469 * _473) * _2484) + _2043;
        _2269 = ((_2471 * _475) * _2484) + _2045;
        _2271 = ((_2473 * _476) * _2484) + _2047;
    }
    else
    {
        _2261 = _1698;
        _2263 = _1700;
        _2265 = _1702;
        _2267 = _2043;
        _2269 = _2045;
        _2271 = _2047;
    }
    float _4192 = isnan(0.0) ? _463 : (isnan(_463) ? 0.0 : max(_463, 0.0));
    float _4203 = isnan(0.0) ? _464 : (isnan(_464) ? 0.0 : max(_464, 0.0));
    float _4214 = isnan(0.0) ? _465 : (isnan(_465) ? 0.0 : max(_465, 0.0));
    float _2288 = ((isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0))) * (_2261 + ((isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0))) * _488))) + ((_2267 + ((isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0))) * _1330)) * cbPerFrame._m0[3u].x);
    float _2289 = ((isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0))) * (_2263 + ((isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0))) * _488))) + ((_2269 + ((isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0))) * _1330)) * cbPerFrame._m0[3u].x);
    float _2290 = ((isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0))) * (_2265 + ((isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0))) * _488))) + ((_2271 + ((isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0))) * _1330)) * cbPerFrame._m0[3u].x);
    uint _2291 = _447 + 6u;
    float _2299 = _407 / cbSceneParam._m0[86u].x;
    float _2300 = _408 / cbSceneParam._m0[86u].y;
    vec4 _2314 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2299, _2300, (log2((isnan(cbSceneParam._m0[77u].w) ? _328 : (isnan(_328) ? cbSceneParam._m0[77u].w : min(_328, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2316 = _2314.x;
    float _2317 = _2314.y;
    float _2318 = _2314.z;
    float _2319 = _2314.w;
    float _2411;
    float _2413;
    float _2415;
    float _2417;
    if (_328 > cbSceneParam._m0[78u].w)
    {
        float _2374 = isnan(_328) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _328 : min(cbSceneParam._m0[80u].w, _328));
        float _2375 = _2374 / _328;
        float _2386 = _2375 * _379;
        float _2387 = _380 * _2375;
        float _2388 = (-0.0) - _2387;
        float _2389 = _2375 * _381;
        float _2391 = (cbSceneParam._m0[77u].w * _2388) / _2374;
        float _2392 = _2391 + cbSceneParam._m0[79u].w;
        float _2393 = cbSceneParam._m0[79u].w - _2387;
        float _2399 = sqrt(((_2386 * _2386) + (_2387 * _2387)) + (_2389 * _2389));
        float _2402 = (1.0 - (cbSceneParam._m0[77u].w / _2374)) * _2399;
        float _2407 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2409 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2586;
        if (abs((_2388 - _2391) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2586 = ((((_2392 > 0.0) ? exp2(_2407 * _2392) : (2.0 - exp2(_2409 * _2392))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2402;
        }
        else
        {
            float _2530 = 1.0 / cbSceneParam._m0[80u].x;
            float _2531 = isnan(_2393) ? _2392 : (isnan(_2392) ? _2393 : max(_2392, _2393));
            float _2532 = isnan(_2393) ? _2392 : (isnan(_2392) ? _2393 : min(_2392, _2393));
            float _2541 = isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : min(_2531, 0.0));
            float _2542 = isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : min(_2532, 0.0));
            _2586 = ((abs(_2399 / _2388) * cbSceneParam._m0[80u].y) * ((((_2541 - _2542) * 2.0) - ((exp2(_2407 * (isnan(0.0) ? _2531 : (isnan(_2531) ? 0.0 : max(_2531, 0.0)))) - exp2(_2407 * (isnan(0.0) ? _2532 : (isnan(_2532) ? 0.0 : max(_2532, 0.0))))) * _2530)) - ((exp2(_2409 * _2541) - exp2(_2409 * _2542)) * _2530))) + (_2402 * cbSceneParam._m0[80u].z);
        }
        vec4 _2588 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2299, _2300, 1.0), 0.0);
        float _2597 = exp2((_2586 * (-1.44269502162933349609375)) * (1.0 - _2588.w));
        float _2598 = log2(_2597);
        float _2614 = log2(_2319);
        _2411 = (exp2(_2614 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2598 * cbSceneParam._m0[78u].x)) * _2588.x) / cbSceneParam._m0[78u].x)) + _2316;
        _2413 = (exp2(_2614 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2598 * cbSceneParam._m0[78u].y)) * _2588.y) / cbSceneParam._m0[78u].y)) + _2317;
        _2415 = (exp2(_2614 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2598 * cbSceneParam._m0[78u].z)) * _2588.z) / cbSceneParam._m0[78u].z)) + _2318;
        _2417 = _2597 * _2319;
    }
    else
    {
        _2411 = _2316;
        _2413 = _2317;
        _2415 = _2318;
        _2417 = _2319;
    }
    bool _2624;
    vec4 _2427;
    vec4 _2449;
    float _2451;
    float _2455;
    float _2456;
    float _2457;
    float _2458;
    bool _2468;
    for (;;)
    {
        _2427 = cbMatDynParam._m0[0u];
        float _2429 = roundEven(_2427.y);
        bool _2430 = _2429 == 3.0;
        float _2431 = log2(_2417);
        float _2438 = exp2(_2431 * cbSceneParam._m0[78u].x) * _2288;
        float _2439 = exp2(_2431 * cbSceneParam._m0[78u].y) * _2289;
        float _2440 = exp2(_2431 * cbSceneParam._m0[78u].z) * _2290;
        float _2447 = _395 + (-0.5);
        _2449 = cbMtdParam._m0[1u];
        _2451 = _2449.y * _2447;
        float _2454 = (_2429 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2455 = _2454 * (_2430 ? _2438 : (_2438 + (cbSceneParam._m0[72u].w * _2411)));
        _2456 = _2454 * (_2430 ? _2439 : (_2439 + (cbSceneParam._m0[72u].w * _2413)));
        _2457 = _2454 * (_2430 ? _2440 : (_2440 + (cbSceneParam._m0[72u].w * _2415)));
        _2458 = _2447 * 0.999000012874603271484375;
        _2468 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2468)
        {
            if ((cbInstanceData._m0[_447 + 7u].x + _2458) < 0.5)
            {
                _2624 = true;
                break;
            }
        }
        uint _2565 = _449 + uint(_2427.w);
        if ((cbInstanceData._m0[_2565].w < 1.0) && ((cbInstanceData._m0[_2565].w + _2458) < 0.5))
        {
            _2624 = true;
            break;
        }
        if ((_2451 + 1.0) < _2449.x)
        {
            _2624 = true;
            break;
        }
        _2624 = false;
        break;
    }
    float _2829;
    if (_2624)
    {
        discard_state = true;
        _2829 = 0.0;
    }
    else
    {
        _2829 = cbInstanceData._m0[_2291].w;
    }
    SV_Target.x = _2455;
    SV_Target.y = _2456;
    SV_Target.z = _2457;
    SV_Target.w = _2829;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2291].w;
    discard_exit();
}


