#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 10) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_8;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1094;
float _3358;
float _3359;
float _3360;
float _3361;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _213 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _261 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _271 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _261);
    float _272 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _261);
    float _273 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _261);
    vec4 _292 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _327 = cbMtdParam._m0[24u].x + _271;
    float _328 = cbMtdParam._m0[24u].y + _272;
    float _329 = cbMtdParam._m0[24u].z + _273;
    float _343 = (-0.0) - dot(vec3(_327, _328, _329), vec3(_199 * _192, _199 * _193, _199 * _194));
    float _344 = (-0.0) - dot(vec3(_327, _328, _329), vec3(_213 * TANGENT.x, _213 * TANGENT.y, _213 * TANGENT.z));
    float _345 = (-0.0) - dot(vec3(_327, _328, _329), vec3((-0.0) - (_206 * NORMAL.x), (-0.0) - (_206 * NORMAL.y), (-0.0) - (_206 * NORMAL.z)));
    float _349 = inversesqrt(dot(vec3(_343, _344, _345), vec3(_343, _344, _345)));
    float _352 = _349 * _345;
    float _353 = (_349 * _343) + (((_292.x * 2.0) + (-1.0)) * cbMtdParam._m0[22u].x);
    float _354 = (_349 * _344) + (((_292.y * 2.0) + (-1.0)) * cbMtdParam._m0[22u].y);
    float _355 = _353 * cbMtdParam._m0[20u].w;
    float _356 = _354 * cbMtdParam._m0[20u].z;
    float _357 = fract(TEXCOORD.x);
    float _358 = fract(TEXCOORD.y);
    float _364;
    if (_355 > 0.0)
    {
        _364 = (1.0 - _357) / _355;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_355 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _357) / _355;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _364 = frontier_phi_3_2_ladder;
    }
    float _372;
    if (_356 > 0.0)
    {
        _372 = (1.0 - _358) / _356;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_356 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _358) / _356;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _372 = frontier_phi_7_6_ladder;
    }
    bool _374 = _352 > 0.0;
    float _376 = _374 ? (cbMtdParam._m0[16u].x / _352) : 5000.0;
    float _377 = isnan(_372) ? _364 : (isnan(_364) ? _372 : min(_364, _372));
    float _378 = isnan(_376) ? _377 : (isnan(_377) ? _376 : min(_377, _376));
    float _382 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _383 = _357 + (-0.5);
    float _386 = _358 + (-0.5);
    float _389 = ((_378 * _352) + _382) / _382;
    vec4 _414 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (((((_383 + (_378 * _355)) / _389) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (((((_386 + (_378 * _356)) / _389) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    float _424 = cbMtdParam._m0[9u].x * _414.x;
    float _425 = cbMtdParam._m0[9u].y * _414.y;
    float _426 = cbMtdParam._m0[9u].z * _414.z;
    float _445 = _353 * cbMtdParam._m0[22u].w;
    float _446 = _354 * cbMtdParam._m0[22u].z;
    bool _447 = _445 > 0.0;
    float _452;
    if (_447)
    {
        _452 = (1.0 - _357) / _445;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_445 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _357) / _445;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _452 = frontier_phi_11_10_ladder;
    }
    bool _454 = _446 > 0.0;
    float _459;
    if (_454)
    {
        _459 = (1.0 - _358) / _446;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_446 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _358) / _446;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _459 = frontier_phi_15_14_ladder;
    }
    float _462 = _374 ? (cbMtdParam._m0[18u].x / _352) : 5000.0;
    float _463 = isnan(_459) ? _452 : (isnan(_452) ? _459 : min(_452, _459));
    float _464 = isnan(_462) ? _463 : (isnan(_463) ? _462 : min(_463, _462));
    float _468 = cbMtdParam._m0[19u].y * cbMtdParam._m0[18u].x;
    float _472 = ((_464 * _352) + _468) / _468;
    float _477 = cbMtdParam._m0[19u].x - cbMtdParam._m0[20u].x * trunc(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    float _479 = floor(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    vec4 _495 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_383 + (_464 * _445)) / _472) + 0.5) + _477) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_386 + (_464 * _446)) / _472) + 0.5) + _479) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[0u].w));
    float _507;
    if (_447)
    {
        _507 = (1.0 - _357) / _445;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_445 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _357) / _445;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _507 = frontier_phi_19_18_ladder;
    }
    float _513;
    if (_454)
    {
        _513 = (1.0 - _358) / _446;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_446 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _358) / _446;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _513 = frontier_phi_23_22_ladder;
    }
    float _515 = isnan(_513) ? _507 : (isnan(_507) ? _513 : min(_507, _513));
    float _516 = isnan(_462) ? _515 : (isnan(_515) ? _462 : min(_515, _462));
    float _523 = ((_516 * _352) + _468) / _468;
    vec4 _543 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_383 + (_516 * _445)) / _523) + 0.5) + _477) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_386 + (_516 * _446)) / _523) + 0.5) + _479) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[8u].w));
    float _545 = _543.x;
    float _552 = (_545 * ((_495.x * cbMtdParam._m0[10u].x) - _424)) + _424;
    float _553 = (_545 * ((_495.y * cbMtdParam._m0[10u].y) - _425)) + _425;
    float _554 = (_545 * ((_495.z * cbMtdParam._m0[10u].z) - _426)) + _426;
    float _570 = _353 * cbMtdParam._m0[23u].y;
    float _571 = _354 * cbMtdParam._m0[23u].x;
    bool _572 = _570 > 0.0;
    float _577;
    if (_572)
    {
        _577 = (1.0 - _357) / _570;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_570 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _357) / _570;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _577 = frontier_phi_27_26_ladder;
    }
    bool _579 = _571 > 0.0;
    float _584;
    if (_579)
    {
        _584 = (1.0 - _358) / _571;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_571 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _358) / _571;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _584 = frontier_phi_31_30_ladder;
    }
    float _587 = _374 ? (cbMtdParam._m0[19u].w / _352) : 5000.0;
    float _588 = isnan(_584) ? _577 : (isnan(_577) ? _584 : min(_577, _584));
    float _589 = isnan(_587) ? _588 : (isnan(_588) ? _587 : min(_588, _587));
    float _593 = cbMtdParam._m0[19u].w * cbMtdParam._m0[16u].z;
    float _597 = ((_589 * _352) + _593) / _593;
    float _602 = cbMtdParam._m0[19u].z - cbMtdParam._m0[23u].z * trunc(cbMtdParam._m0[19u].z / cbMtdParam._m0[23u].z);
    float _604 = floor(cbMtdParam._m0[19u].z / cbMtdParam._m0[23u].z);
    vec4 _620 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * (((((_383 + (_589 * _570)) / _597) + 0.5) + _602) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * (((((_386 + (_589 * _571)) / _597) + 0.5) + _604) / cbMtdParam._m0[23u].w)) + cbTextureTilingScale._m0[9u].w));
    float _632;
    if (_572)
    {
        _632 = (1.0 - _357) / _570;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_570 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _357) / _570;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _632 = frontier_phi_35_34_ladder;
    }
    float _638;
    if (_579)
    {
        _638 = (1.0 - _358) / _571;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_571 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _358) / _571;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _638 = frontier_phi_39_38_ladder;
    }
    float _640 = isnan(_638) ? _632 : (isnan(_632) ? _638 : min(_632, _638));
    float _641 = isnan(_587) ? _640 : (isnan(_640) ? _587 : min(_640, _587));
    float _648 = ((_641 * _352) + _593) / _593;
    vec4 _668 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_383 + (_641 * _570)) / _648) + 0.5) + _602) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_386 + (_641 * _571)) / _648) + 0.5) + _604) / cbMtdParam._m0[23u].w)) + cbTextureTilingScale._m0[10u].w));
    float _670 = _668.x;
    float _677 = (_670 * ((_620.x * cbMtdParam._m0[14u].x) - _552)) + _552;
    float _678 = (_670 * ((_620.y * cbMtdParam._m0[14u].y) - _553)) + _553;
    float _679 = (_670 * ((_620.z * cbMtdParam._m0[14u].z) - _554)) + _554;
    float _3420 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _3431 = isnan(0.0) ? _678 : (isnan(_678) ? 0.0 : max(_678, 0.0));
    float _3442 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
    float _698 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _702 = inversesqrt(dot(vec3(_271, _272, _273), vec3(_271, _272, _273)));
    float _703 = _271 * _702;
    float _704 = _272 * _702;
    float _705 = _273 * _702;
    vec4 _710 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _712 = _710.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _808 = sqrt(((_271 * _271) + (_272 * _272)) + (_273 * _273));
        float _814 = (cbMatDynParam._m0[5u].x * _808) + cbMatDynParam._m0[5u].y;
        float _3453 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _815 = isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0));
        float _819 = (cbMatDynParam._m0[5u].z * _808) + cbMatDynParam._m0[5u].w;
        float _3464 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0))) - _815)) + _815) < ((_712 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _724 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _725 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _738 = uint(roundEven(NORMAL.w)) * 13u;
    uint _740 = _738 + 9u;
    uint _741 = _740 + uint(cbMatDynParam._m0[0u].w);
    float _747 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0)))) * cbInstanceData._m0[_741].x;
    float _748 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0)))) * cbInstanceData._m0[_741].y;
    float _749 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0)))) * cbInstanceData._m0[_741].z;
    float _3475 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _750 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
    float _3486 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _751 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
    float _3497 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _752 = isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0));
    vec4 _761 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _724, cbSceneParam._m0[86u].y * _725));
    float _764 = _761.x * TEXCOORD_4.z;
    float _765 = (-0.0) - _703;
    float _766 = (-0.0) - _704;
    float _767 = (-0.0) - _705;
    float _789 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _793 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _797 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1093;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _881 = (cbModelParam._m0[37u].x * ((((fma(_797, cbModelParam._m0[26u].z, fma(_793, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _789)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _883 = (cbModelParam._m0[37u].y * ((((fma(_797, cbModelParam._m0[27u].z, fma(_793, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _789)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _884 = (((((fma(_797, cbModelParam._m0[28u].z, fma(_793, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _789)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _887 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_881, _883, _884), 0.0);
        vec4 _894 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_881, _883, _884), 0.0);
        vec4 _901 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_881, _883, _884), 0.0);
        vec4 _908 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_881, _883, _884), 0.0);
        float _921 = exp2((_887.w + (-0.5)) * 20.0) * 2.0;
        float _922 = _921 * (_887.x + (-0.5));
        float _923 = _921 * (_887.y + (-0.5));
        float _924 = _921 * (_887.z + (-0.5));
        float _931 = exp2((_894.w + (-0.5)) * 20.0) * 2.0;
        float _932 = _931 * (_894.x + (-0.5));
        float _933 = _931 * (_894.y + (-0.5));
        float _934 = _931 * (_894.z + (-0.5));
        float _941 = exp2((_901.w + (-0.5)) * 20.0) * 2.0;
        float _942 = _941 * (_901.x + (-0.5));
        float _943 = _941 * (_901.y + (-0.5));
        float _944 = _941 * (_901.z + (-0.5));
        float _951 = exp2((_908.w + (-0.5)) * 20.0) * 2.0;
        float _952 = _951 * (_908.x + (-0.5));
        float _953 = _951 * (_908.y + (-0.5));
        float _954 = _951 * (_908.z + (-0.5));
        float _955 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _956 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _957 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _958 = _922 * 0.5;
        float _959 = _932 * 0.5;
        float _960 = _942 * 0.5;
        float _961 = dot(vec3(_958, _959, _960), vec3(_958, _959, _960));
        float _966 = (_961 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_961);
        float _975 = (dot(vec3(0.0), vec3(_966 * _958, _966 * _959, _966 * _960)) + 1.0) * 0.5;
        float _3523 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _985 = sqrt(((_959 * _959) + (_958 * _958)) + (_960 * _960)) / (_955 + 9.9999997473787516355514526367188e-06);
        float _3534 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _986 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
        float _987 = _986 * 2.0;
        float _991 = (1.0 - _986) / (_986 + 1.0);
        float _3545 = isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0));
        float _992 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
        float _1001 = ((((1.0 - _992) * (_987 + 2.0)) * exp2(log2(isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0))) * (_987 + 1.0))) + _992) * _955;
        float _1002 = _923 * 0.5;
        float _1003 = _933 * 0.5;
        float _1004 = _943 * 0.5;
        float _1005 = dot(vec3(_1002, _1003, _1004), vec3(_1002, _1003, _1004));
        float _1010 = (_1005 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1005);
        float _1018 = (dot(vec3(0.0), vec3(_1010 * _1002, _1010 * _1003, _1010 * _1004)) + 1.0) * 0.5;
        float _3556 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1027 = sqrt(((_1003 * _1003) + (_1002 * _1002)) + (_1004 * _1004)) / (_956 + 9.9999997473787516355514526367188e-06);
        float _3567 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
        float _1029 = _1028 * 2.0;
        float _1033 = (1.0 - _1028) / (_1028 + 1.0);
        float _3578 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _1043 = ((((1.0 - _1034) * (_1029 + 2.0)) * exp2(log2(isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0))) * (_1029 + 1.0))) + _1034) * _956;
        float _1044 = _924 * 0.5;
        float _1045 = _934 * 0.5;
        float _1046 = _944 * 0.5;
        float _1047 = dot(vec3(_1044, _1045, _1046), vec3(_1044, _1045, _1046));
        float _1052 = (_1047 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1047);
        float _1060 = (dot(vec3(0.0), vec3(_1052 * _1044, _1052 * _1045, _1052 * _1046)) + 1.0) * 0.5;
        float _3589 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1069 = sqrt(((_1045 * _1045) + (_1044 * _1044)) + (_1046 * _1046)) / (_957 + 9.9999997473787516355514526367188e-06);
        float _3600 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
        float _1071 = _1070 * 2.0;
        float _1075 = (1.0 - _1070) / (_1070 + 1.0);
        float _3611 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
        float _1085 = ((((1.0 - _1076) * (_1071 + 2.0)) * exp2(log2(isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0))) * (_1071 + 1.0))) + _1076) * _957;
        _1093 = _924;
        _1095 = _923;
        _1096 = _922;
        _1097 = _934;
        _1098 = _933;
        _1099 = _932;
        _1100 = _944;
        _1101 = _943;
        _1102 = _942;
        _1103 = _957;
        _1104 = _956;
        _1105 = _955;
        _1106 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0)));
        _1107 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0)));
        _1108 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0)));
    }
    else
    {
        _1093 = _1094;
        _1095 = _1094;
        _1096 = _1094;
        _1097 = _1094;
        _1098 = _1094;
        _1099 = _1094;
        _1100 = _1094;
        _1101 = _1094;
        _1102 = _1094;
        _1103 = _1094;
        _1104 = _1094;
        _1105 = _1094;
        _1106 = 0.0;
        _1107 = 0.0;
        _1108 = 0.0;
    }
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    float _1385;
    float _1386;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1165 = (cbModelParam._m0[38u].x * ((((fma(_797, cbModelParam._m0[30u].z, fma(_793, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _789)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1166 = (cbModelParam._m0[38u].y * ((((fma(_797, cbModelParam._m0[31u].z, fma(_793, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _789)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1167 = (((((fma(_797, cbModelParam._m0[32u].z, fma(_793, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _789)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1169 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1165, _1166, _1167), 0.0);
        vec4 _1176 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1165, _1166, _1167), 0.0);
        vec4 _1183 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1165, _1166, _1167), 0.0);
        vec4 _1190 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1165, _1166, _1167), 0.0);
        float _1202 = exp2((_1169.w + (-0.5)) * 20.0) * 2.0;
        float _1203 = _1202 * (_1169.x + (-0.5));
        float _1204 = _1202 * (_1169.y + (-0.5));
        float _1205 = _1202 * (_1169.z + (-0.5));
        float _1212 = exp2((_1176.w + (-0.5)) * 20.0) * 2.0;
        float _1213 = _1212 * (_1176.x + (-0.5));
        float _1214 = _1212 * (_1176.y + (-0.5));
        float _1215 = _1212 * (_1176.z + (-0.5));
        float _1222 = exp2((_1183.w + (-0.5)) * 20.0) * 2.0;
        float _1223 = _1222 * (_1183.x + (-0.5));
        float _1224 = _1222 * (_1183.y + (-0.5));
        float _1225 = _1222 * (_1183.z + (-0.5));
        float _1232 = exp2((_1190.w + (-0.5)) * 20.0) * 2.0;
        float _1233 = _1232 * (_1190.x + (-0.5));
        float _1234 = _1232 * (_1190.y + (-0.5));
        float _1235 = _1232 * (_1190.z + (-0.5));
        float _1236 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1237 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1238 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1239 = _1203 * 0.5;
        float _1240 = _1213 * 0.5;
        float _1241 = _1223 * 0.5;
        float _1242 = dot(vec3(_1239, _1240, _1241), vec3(_1239, _1240, _1241));
        float _1247 = (_1242 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1242);
        float _1255 = (dot(vec3(0.0), vec3(_1247 * _1239, _1247 * _1240, _1247 * _1241)) + 1.0) * 0.5;
        float _3652 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
        float _1264 = sqrt(((_1240 * _1240) + (_1239 * _1239)) + (_1241 * _1241)) / (_1236 + 9.9999997473787516355514526367188e-06);
        float _3663 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0));
        float _1266 = _1265 * 2.0;
        float _1270 = (1.0 - _1265) / (_1265 + 1.0);
        float _3674 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1271 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
        float _1280 = ((((1.0 - _1271) * (_1266 + 2.0)) * exp2(log2(isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0))) * (_1266 + 1.0))) + _1271) * _1236;
        float _1281 = _1204 * 0.5;
        float _1282 = _1214 * 0.5;
        float _1283 = _1224 * 0.5;
        float _1284 = dot(vec3(_1281, _1282, _1283), vec3(_1281, _1282, _1283));
        float _1289 = (_1284 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1284);
        float _1297 = (dot(vec3(0.0), vec3(_1289 * _1281, _1289 * _1282, _1289 * _1283)) + 1.0) * 0.5;
        float _3685 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1306 = sqrt(((_1282 * _1282) + (_1281 * _1281)) + (_1283 * _1283)) / (_1237 + 9.9999997473787516355514526367188e-06);
        float _3696 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
        float _1308 = _1307 * 2.0;
        float _1312 = (1.0 - _1307) / (_1307 + 1.0);
        float _3707 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
        float _1322 = ((((1.0 - _1313) * (_1308 + 2.0)) * exp2(log2(isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0))) * (_1308 + 1.0))) + _1313) * _1237;
        float _1323 = _1205 * 0.5;
        float _1324 = _1215 * 0.5;
        float _1325 = _1225 * 0.5;
        float _1326 = dot(vec3(_1323, _1324, _1325), vec3(_1323, _1324, _1325));
        float _1331 = (_1326 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1326);
        float _1339 = (dot(vec3(0.0), vec3(_1331 * _1323, _1331 * _1324, _1331 * _1325)) + 1.0) * 0.5;
        float _3718 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
        float _1348 = sqrt(((_1324 * _1324) + (_1323 * _1323)) + (_1325 * _1325)) / (_1238 + 9.9999997473787516355514526367188e-06);
        float _3729 = isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0));
        float _1349 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
        float _1350 = _1349 * 2.0;
        float _1354 = (1.0 - _1349) / (_1349 + 1.0);
        float _3740 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0));
        float _1364 = ((((1.0 - _1355) * (_1350 + 2.0)) * exp2(log2(isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))) * (_1350 + 1.0))) + _1355) * _1238;
        _1372 = _1205;
        _1373 = _1204;
        _1374 = _1203;
        _1375 = _1215;
        _1376 = _1214;
        _1377 = _1213;
        _1378 = _1225;
        _1379 = _1224;
        _1380 = _1223;
        _1381 = _1238;
        _1382 = _1237;
        _1383 = _1236;
        _1384 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1280 : (isnan(_1280) ? 0.0 : max(_1280, 0.0)));
        _1385 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0)));
        _1386 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0)));
    }
    else
    {
        _1372 = _1094;
        _1373 = _1094;
        _1374 = _1094;
        _1375 = _1094;
        _1376 = _1094;
        _1377 = _1094;
        _1378 = _1094;
        _1379 = _1094;
        _1380 = _1094;
        _1381 = _1094;
        _1382 = _1094;
        _1383 = _1094;
        _1384 = 0.0;
        _1385 = 0.0;
        _1386 = 0.0;
    }
    float _1396 = (cbModelParam._m0[1u].x * (_1384 - _1106)) + _1106;
    float _1397 = (cbModelParam._m0[1u].x * (_1385 - _1107)) + _1107;
    float _1398 = (cbModelParam._m0[1u].x * (_1386 - _1108)) + _1108;
    float _1419 = fma(_1398, cbSceneParam._m0[89u].z, fma(_1397, cbSceneParam._m0[89u].y, _1396 * cbSceneParam._m0[89u].x));
    float _1422 = fma(_1398, cbSceneParam._m0[90u].z, fma(_1397, cbSceneParam._m0[90u].y, _1396 * cbSceneParam._m0[90u].x));
    float _1425 = fma(_1398, cbSceneParam._m0[91u].z, fma(_1397, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1396));
    float _1440 = _703 * (-0.5);
    float _1441 = _704 * (-0.5);
    float _1442 = _705 * (-0.5);
    float _1443 = dot(vec4(_1440, _1441, _1442, 1.0), vec4(_1374, _1377, _1380, _1383));
    float _1446 = dot(vec4(_1440, _1441, _1442, 1.0), vec4(_1373, _1376, _1379, _1382));
    float _1449 = dot(vec4(_1440, _1441, _1442, 1.0), vec4(_1372, _1375, _1378, _1381));
    float _1483;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1456 = dot(vec4(_1440, _1441, _1442, 1.0), vec4(_1093, _1097, _1100, _1103));
        float _1460 = dot(vec4(_1440, _1441, _1442, 1.0), vec4(_1095, _1098, _1101, _1104));
        float _1464 = dot(vec4(_1440, _1441, _1442, 1.0), vec4(_1096, _1099, _1102, _1105));
        float _1471 = dot(vec4(cbModelParam._m0[39u]), vec4(_1440, _1441, _1442, 1.0));
        _1483 = dot(vec3(isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0)), isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)), isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1471) ? 0.0 : (isnan(0.0) ? _1471 : max(0.0, _1471))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1483 = 1.0;
    }
    float _1494;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1485 = dot(vec4(cbModelParam._m0[40u]), vec4(_1440, _1441, _1442, 1.0));
        _1494 = dot(vec3(isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0)), isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)), isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1485) ? 0.0 : (isnan(0.0) ? _1485 : max(0.0, _1485))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1494 = 1.0;
    }
    float _1498 = (_1494 * cbModelParam._m0[1u].x) + (_1483 * (1.0 - cbModelParam._m0[1u].x));
    float _1507 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1589;
    float _1591;
    float _1593;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1556 = fma(_797, cbModelParam._m0[13u].z, fma(_793, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _789)) + cbModelParam._m0[13u].w;
        float _1560 = fma(_797, cbModelParam._m0[14u].z, fma(_793, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _789)) + cbModelParam._m0[14u].w;
        float _1564 = fma(_797, cbModelParam._m0[15u].z, fma(_793, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _789)) + cbModelParam._m0[15u].w;
        float _1567 = fma(_767, cbModelParam._m0[13u].z, fma(_766, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _765));
        float _1570 = fma(_767, cbModelParam._m0[14u].z, fma(_766, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _765));
        float _1573 = fma(_767, cbModelParam._m0[15u].z, fma(_766, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _765));
        float _1599;
        if (_1567 > 0.0)
        {
            _1599 = abs((1.0 - _1556) / _1567);
        }
        else
        {
            float frontier_phi_57_55_ladder;
            if (_1567 < 0.0)
            {
                frontier_phi_57_55_ladder = abs((_1556 + 1.0) / _1567);
            }
            else
            {
                frontier_phi_57_55_ladder = 5000.0;
            }
            _1599 = frontier_phi_57_55_ladder;
        }
        float _1769;
        if (_1570 > 0.0)
        {
            _1769 = abs((1.0 - _1560) / _1570);
        }
        else
        {
            float frontier_phi_66_62_ladder;
            if (_1570 < 0.0)
            {
                frontier_phi_66_62_ladder = abs((_1560 + 1.0) / _1570);
            }
            else
            {
                frontier_phi_66_62_ladder = 5000.0;
            }
            _1769 = frontier_phi_66_62_ladder;
        }
        float _2164;
        if (_1573 > 0.0)
        {
            _2164 = abs((1.0 - _1564) / _1573);
        }
        else
        {
            float frontier_phi_78_73_ladder;
            if (_1573 < 0.0)
            {
                frontier_phi_78_73_ladder = abs((_1564 + 1.0) / _1573);
            }
            else
            {
                frontier_phi_78_73_ladder = 5000.0;
            }
            _2164 = frontier_phi_78_73_ladder;
        }
        float _2166 = isnan(_1769) ? _1599 : (isnan(_1599) ? _1769 : min(_1599, _1769));
        float _2167 = isnan(_2164) ? _2166 : (isnan(_2166) ? _2164 : min(_2166, _2164));
        float _2171 = (_2167 * _1567) + _1556;
        float _2172 = (_2167 * _1570) + _1560;
        float _2173 = (_2167 * _1573) + _1564;
        float _2174 = _2167 * 9.9999997473787516355514526367188e-05;
        float _2176 = (-1.0) - _2174;
        float _2178 = _2174 + 1.0;
        float frontier_phi_56_78_ladder;
        float frontier_phi_56_78_ladder_1;
        float frontier_phi_56_78_ladder_2;
        if ((_2173 > _2178) || ((_2173 < _2176) || ((_2172 > _2178) || ((_2172 < _2176) || ((_2171 < _2176) || (_2171 > _2178))))))
        {
            frontier_phi_56_78_ladder = 0.0;
            frontier_phi_56_78_ladder_1 = 0.0;
            frontier_phi_56_78_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2407 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2173, cbModelParam._m0[9u].z, fma(_2172, cbModelParam._m0[9u].y, _2171 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2173, cbModelParam._m0[10u].z, fma(_2172, cbModelParam._m0[10u].y, _2171 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2173, cbModelParam._m0[11u].z, fma(_2172, cbModelParam._m0[11u].y, _2171 * cbModelParam._m0[11u].x))), _1507);
            frontier_phi_56_78_ladder = _2407.z * cbModelParam._m0[1u].y;
            frontier_phi_56_78_ladder_1 = _2407.y * cbModelParam._m0[1u].y;
            frontier_phi_56_78_ladder_2 = _2407.x * cbModelParam._m0[1u].y;
        }
        _1589 = frontier_phi_56_78_ladder_2;
        _1591 = frontier_phi_56_78_ladder_1;
        _1593 = frontier_phi_56_78_ladder;
    }
    else
    {
        vec4 _1577 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_765, _766, _767), _1507);
        _1589 = _1577.x * cbModelParam._m0[1u].y;
        _1591 = _1577.y * cbModelParam._m0[1u].y;
        _1593 = _1577.z * cbModelParam._m0[1u].y;
    }
    float _1596 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1684;
    float _1686;
    float _1688;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1648 = fma(_797, cbModelParam._m0[21u].z, fma(_793, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _789)) + cbModelParam._m0[21u].w;
        float _1652 = fma(_797, cbModelParam._m0[22u].z, fma(_793, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _789)) + cbModelParam._m0[22u].w;
        float _1656 = fma(_797, cbModelParam._m0[23u].z, fma(_793, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _789)) + cbModelParam._m0[23u].w;
        float _1659 = fma(_767, cbModelParam._m0[21u].z, fma(_766, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _765));
        float _1662 = fma(_767, cbModelParam._m0[22u].z, fma(_766, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _765));
        float _1665 = fma(_767, cbModelParam._m0[23u].z, fma(_766, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _765));
        float _1774;
        if (_1659 > 0.0)
        {
            _1774 = abs((1.0 - _1648) / _1659);
        }
        else
        {
            float frontier_phi_68_64_ladder;
            if (_1659 < 0.0)
            {
                frontier_phi_68_64_ladder = abs((_1648 + 1.0) / _1659);
            }
            else
            {
                frontier_phi_68_64_ladder = 5000.0;
            }
            _1774 = frontier_phi_68_64_ladder;
        }
        float _2191;
        if (_1662 > 0.0)
        {
            _2191 = abs((1.0 - _1652) / _1662);
        }
        else
        {
            float frontier_phi_80_75_ladder;
            if (_1662 < 0.0)
            {
                frontier_phi_80_75_ladder = abs((_1652 + 1.0) / _1662);
            }
            else
            {
                frontier_phi_80_75_ladder = 5000.0;
            }
            _2191 = frontier_phi_80_75_ladder;
        }
        float _2538;
        if (_1665 > 0.0)
        {
            _2538 = abs((1.0 - _1656) / _1665);
        }
        else
        {
            float frontier_phi_92_87_ladder;
            if (_1665 < 0.0)
            {
                frontier_phi_92_87_ladder = abs((_1656 + 1.0) / _1665);
            }
            else
            {
                frontier_phi_92_87_ladder = 5000.0;
            }
            _2538 = frontier_phi_92_87_ladder;
        }
        float _2540 = isnan(_2191) ? _1774 : (isnan(_1774) ? _2191 : min(_1774, _2191));
        float _2541 = isnan(_2538) ? _2540 : (isnan(_2540) ? _2538 : min(_2540, _2538));
        float _2545 = (_2541 * _1659) + _1648;
        float _2546 = (_2541 * _1662) + _1652;
        float _2547 = (_2541 * _1665) + _1656;
        float _2548 = _2541 * 9.9999997473787516355514526367188e-05;
        float _2549 = (-1.0) - _2548;
        float _2551 = _2548 + 1.0;
        float frontier_phi_65_92_ladder;
        float frontier_phi_65_92_ladder_1;
        float frontier_phi_65_92_ladder_2;
        if ((_2547 > _2551) || ((_2547 < _2549) || ((_2546 > _2551) || ((_2546 < _2549) || ((_2545 < _2549) || (_2545 > _2551))))))
        {
            frontier_phi_65_92_ladder = 0.0;
            frontier_phi_65_92_ladder_1 = 0.0;
            frontier_phi_65_92_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2681 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2547, cbModelParam._m0[17u].z, fma(_2546, cbModelParam._m0[17u].y, _2545 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2547, cbModelParam._m0[18u].z, fma(_2546, cbModelParam._m0[18u].y, _2545 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2547, cbModelParam._m0[19u].z, fma(_2546, cbModelParam._m0[19u].y, _2545 * cbModelParam._m0[19u].x))), _1596);
            frontier_phi_65_92_ladder = _2681.z * cbModelParam._m0[1u].z;
            frontier_phi_65_92_ladder_1 = _2681.y * cbModelParam._m0[1u].z;
            frontier_phi_65_92_ladder_2 = _2681.x * cbModelParam._m0[1u].z;
        }
        _1684 = frontier_phi_65_92_ladder_2;
        _1686 = frontier_phi_65_92_ladder_1;
        _1688 = frontier_phi_65_92_ladder;
    }
    else
    {
        vec4 _1668 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_765, _766, _767), _1596);
        _1684 = _1668.x * cbModelParam._m0[1u].z;
        _1686 = _1668.y * cbModelParam._m0[1u].z;
        _1688 = _1668.z * cbModelParam._m0[1u].z;
    }
    float _1700 = _764 * 0.01200000010430812835693359375;
    float _1702 = _1700 * ((cbModelParam._m0[1u].w * (_1684 - _1589)) + _1589);
    float _1703 = _1700 * ((cbModelParam._m0[1u].w * (_1686 - _1591)) + _1591);
    float _1704 = _1700 * ((cbModelParam._m0[1u].w * (_1688 - _1593)) + _1593);
    float _1707 = fma(_1704, cbSceneParam._m0[89u].z, fma(_1703, cbSceneParam._m0[89u].y, _1702 * cbSceneParam._m0[89u].x));
    float _1710 = fma(_1704, cbSceneParam._m0[90u].z, fma(_1703, cbSceneParam._m0[90u].y, _1702 * cbSceneParam._m0[90u].x));
    float _1713 = fma(_1704, cbSceneParam._m0[91u].z, fma(_1703, cbSceneParam._m0[91u].y, _1702 * cbSceneParam._m0[91u].x));
    float _1748 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1752 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1756 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1760 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1761 = _1748 / _1760;
    float _1762 = _1752 / _1760;
    float _1763 = _1756 / _1760;
    float _1911;
    float _1912;
    float _1913;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1790 = ((uint(_1763 > cbSceneParam._m0[59u].y) + uint(_1763 > cbSceneParam._m0[59u].x)) + uint(_1763 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1791 = _1790 + 43u;
        uint _1799 = _1790 + 44u;
        uint _1807 = _1790 + 45u;
        uint _1815 = _1790 + 46u;
        float _1826 = fma(_1760, cbSceneParam._m0[_1791].w, fma(_1756, cbSceneParam._m0[_1791].z, fma(_1752, cbSceneParam._m0[_1791].y, _1748 * cbSceneParam._m0[_1791].x)));
        float _1830 = fma(_1760, cbSceneParam._m0[_1799].w, fma(_1756, cbSceneParam._m0[_1799].z, fma(_1752, cbSceneParam._m0[_1799].y, _1748 * cbSceneParam._m0[_1799].x)));
        float _1838 = fma(_1760, cbSceneParam._m0[_1815].w, fma(_1756, cbSceneParam._m0[_1815].z, fma(_1752, cbSceneParam._m0[_1815].y, _1748 * cbSceneParam._m0[_1815].x)));
        float _1843 = cbSceneParam._m0[33u].z * _1838;
        float _1845 = cbSceneParam._m0[33u].w * _1838;
        float _1848 = fma(_1760, cbSceneParam._m0[_1807].w, fma(_1756, cbSceneParam._m0[_1807].z, fma(_1752, cbSceneParam._m0[_1807].y, _1748 * cbSceneParam._m0[_1807].x))) / _1838;
        float _1896 = (cbSceneParam._m0[33u].x - sqrt(((_1762 * _1762) + (_1761 * _1761)) + (_1763 * _1763))) * cbSceneParam._m0[33u].y;
        float _3866 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
        float _1904 = (isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1843 + _1826) / _1838, (_1845 + _1830) / _1838), _1848), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1845 + _1826) / _1838, (_1830 - _1843) / _1838), _1848), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1826 - _1843) / _1838, (_1830 - _1845) / _1838), _1848), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1826 - _1845) / _1838, (_1843 + _1830) / _1838), _1848), 0.0)).x), vec4(0.25)));
        _1911 = 1.0 - (_1904 * cbSceneParam._m0[34u].x);
        _1912 = 1.0 - (_1904 * cbSceneParam._m0[34u].y);
        _1913 = 1.0 - (_1904 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1911 = 1.0;
        _1912 = 1.0;
        _1913 = 1.0;
    }
    float _1977;
    float _1979;
    float _1981;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1965 = fma(_1760, cbSceneParam._m0[63u].w, fma(_1756, cbSceneParam._m0[63u].z, fma(_1752, cbSceneParam._m0[63u].y, _1748 * cbSceneParam._m0[63u].x)));
        float _1966 = fma(_1760, cbSceneParam._m0[60u].w, fma(_1756, cbSceneParam._m0[60u].z, fma(_1752, cbSceneParam._m0[60u].y, _1748 * cbSceneParam._m0[60u].x))) / _1965;
        float _1967 = fma(_1760, cbSceneParam._m0[61u].w, fma(_1756, cbSceneParam._m0[61u].z, fma(_1752, cbSceneParam._m0[61u].y, _1748 * cbSceneParam._m0[61u].x))) / _1965;
        float frontier_phi_77_76_ladder;
        float frontier_phi_77_76_ladder_1;
        float frontier_phi_77_76_ladder_2;
        if ((((_1966 >= cbSceneParam._m0[64u].x) && (_1967 >= cbSceneParam._m0[64u].y)) && (_1966 <= cbSceneParam._m0[64u].z)) && (_1967 <= cbSceneParam._m0[64u].w))
        {
            float _2204 = fma(_1760, cbSceneParam._m0[62u].w, fma(_1756, cbSceneParam._m0[62u].z, fma(_1752, cbSceneParam._m0[62u].y, _1748 * cbSceneParam._m0[62u].x))) / _1965;
            float _2208 = isnan(cbSceneParam._m0[41u].w) ? _2204 : (isnan(_2204) ? cbSceneParam._m0[41u].w : max(_2204, cbSceneParam._m0[41u].w));
            float _2251 = (cbSceneParam._m0[33u].x - sqrt(((_1762 * _1762) + (_1761 * _1761)) + (_1763 * _1763))) * cbSceneParam._m0[33u].y;
            float _3882 = isnan(0.0) ? _2251 : (isnan(_2251) ? 0.0 : max(_2251, 0.0));
            float _2258 = (isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1966, cbSceneParam._m0[33u].w + _1967), _2208), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1966, _1967 - cbSceneParam._m0[33u].z), _2208), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1966 - cbSceneParam._m0[33u].z, _1967 - cbSceneParam._m0[33u].w), _2208), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1966 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1967), _2208), 0.0)).x), vec4(0.25)));
            float _2262 = 1.0 - (_2258 * cbSceneParam._m0[34u].x);
            float _2263 = 1.0 - (_2258 * cbSceneParam._m0[34u].y);
            float _2264 = 1.0 - (_2258 * cbSceneParam._m0[34u].z);
            frontier_phi_77_76_ladder = isnan(_2264) ? _1913 : (isnan(_1913) ? _2264 : min(_1913, _2264));
            frontier_phi_77_76_ladder_1 = isnan(_2263) ? _1912 : (isnan(_1912) ? _2263 : min(_1912, _2263));
            frontier_phi_77_76_ladder_2 = isnan(_2262) ? _1911 : (isnan(_1911) ? _2262 : min(_1911, _2262));
        }
        else
        {
            frontier_phi_77_76_ladder = _1913;
            frontier_phi_77_76_ladder_1 = _1912;
            frontier_phi_77_76_ladder_2 = _1911;
        }
        _1977 = frontier_phi_77_76_ladder_2;
        _1979 = frontier_phi_77_76_ladder_1;
        _1981 = frontier_phi_77_76_ladder;
    }
    else
    {
        _1977 = _1911;
        _1979 = _1912;
        _1981 = _1913;
    }
    uvec4 _1986 = floatBitsToUint(cbInstanceData._m0[_738 + 5u]);
    uint _1988 = _1986.x * 14u;
    uint _1989 = _1988 + 13u;
    float _1994 = _764 + (-1.0);
    float _1997 = (cbLight._m0[_1989].x * _1994) + 1.0;
    float _1998 = (cbLight._m0[_1989].y * _1994) + 1.0;
    uint _1999 = _1988 + 5u;
    float _2005 = isnan(1.0) ? _1998 : (isnan(_1998) ? 1.0 : min(_1998, 1.0));
    uint _2009 = _1988 + 4u;
    float _2019 = isnan(1.0) ? _1997 : (isnan(_1997) ? 1.0 : min(_1997, 1.0));
    uint _2023 = _1988 | 1u;
    float _2034 = dot(vec3(cbLight._m0[_1988].xyz), vec3(0.0));
    float _2037 = dot(vec3(cbLight._m0[_2023].xyz), vec3(0.0));
    float _3918 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0));
    float _3929 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
    float _2042 = (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) * 0.3183098733425140380859375;
    float _2044 = (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * 0.3183098733425140380859375;
    float _2051 = ((cbLight._m0[_1999].x * _2005) * _2044) + (((cbLight._m0[_2009].x * _1977) * _2019) * _2042);
    float _2052 = ((_2005 * cbLight._m0[_1999].y) * _2044) + (((cbLight._m0[_2009].y * _1979) * _2019) * _2042);
    float _2053 = ((_2005 * cbLight._m0[_1999].z) * _2044) + (((cbLight._m0[_2009].z * _1981) * _2019) * _2042);
    uint _2054 = _1988 + 8u;
    float _2060 = cbLight._m0[_1988].x + _703;
    float _2061 = cbLight._m0[_1988].y + _704;
    float _2062 = cbLight._m0[_1988].z + _705;
    float _2066 = inversesqrt(dot(vec3(_2060, _2061, _2062), vec3(_2060, _2061, _2062)));
    float _2070 = dot(vec3(0.0), vec3(cbLight._m0[_1988].xyz));
    float _3940 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
    float _2073 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _2074 = dot(vec3(0.0), vec3(_703, _704, _705));
    float _3951 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
    float _2077 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _2078 = dot(vec3(cbLight._m0[_1988].xyz), vec3(_2060 * _2066, _2061 * _2066, _2062 * _2066));
    float _3962 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
    float _2089 = (exp2(log2(1.0 - (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2095 = (0.5 / ((_2073 + 9.9999999392252902907785028219223e-09) + _2077)) * _2073;
    float _3973 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _2097 = (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * 0.31831014156341552734375;
    uint _2111 = _1988 + 9u;
    float _2117 = cbLight._m0[_2023].x + _703;
    float _2118 = cbLight._m0[_2023].y + _704;
    float _2119 = cbLight._m0[_2023].z + _705;
    float _2123 = inversesqrt(dot(vec3(_2117, _2118, _2119), vec3(_2117, _2118, _2119)));
    float _2127 = dot(vec3(0.0), vec3(cbLight._m0[_2023].xyz));
    float _3984 = isnan(0.0) ? _2127 : (isnan(_2127) ? 0.0 : max(_2127, 0.0));
    float _2130 = isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0));
    float _2131 = dot(vec3(cbLight._m0[_2023].xyz), vec3(_2117 * _2123, _2118 * _2123, _2119 * _2123));
    float _3995 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
    float _2140 = (exp2(log2(1.0 - (isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2144 = (0.5 / ((_2130 + 9.9999999392252902907785028219223e-09) + _2077)) * _2130;
    float _4006 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2146 = (isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0))) * 0.31831014156341552734375;
    float _2156 = (((_2140 * cbLight._m0[_2111].x) * _2146) * _2005) + ((((cbLight._m0[_2054].x * _1977) * _2089) * _2097) * _2019);
    float _2157 = (((_2140 * cbLight._m0[_2111].y) * _2146) * _2005) + ((((cbLight._m0[_2054].y * _1979) * _2089) * _2097) * _2019);
    float _2158 = (((_2140 * cbLight._m0[_2111].z) * _2146) * _2005) + ((((cbLight._m0[_2054].z * _1981) * _2089) * _2097) * _2019);
    float _2321;
    float _2323;
    float _2325;
    float _2327;
    float _2329;
    float _2331;
    if (_1986.y == 0u)
    {
        uvec4 _2276 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2277 = _2276.x;
        uint _2288 = uint((float(_2276.y) * floor(float(uint(cbSceneParam._m0[85u].y * _725) / _2277))) + floor(float(uint(cbSceneParam._m0[85u].x * _724) / _2277)));
        float _2298 = (log2(_1763 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2299 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
        uint _2302 = uint(isnan(14.0) ? _2299 : (isnan(_2299) ? 14.0 : min(_2299, 14.0)));
        uvec4 _2307 = texelFetch(g_lightClusterGridBuffer, int(((_2302 << 2u) + (_2288 << 6u)) >> 2u));
        uint _2308 = _2307.x;
        uint _2309 = _2276.z;
        float _2416;
        float _2418;
        float _2420;
        float _2422;
        float _2424;
        float _2426;
        if (((((1u << ((_2309 >> 4u) & 15u)) + 4294967295u) & _2308) == 0u) || ((_2309 & 240u) == 0u))
        {
            _2416 = 0.0;
            _2418 = 0.0;
            _2420 = 0.0;
            _2422 = 0.0;
            _2424 = 0.0;
            _2426 = 0.0;
        }
        else
        {
            float _2417;
            float _2419;
            float _2421;
            float _2423;
            float _2425;
            float _2427;
            float _2593 = 0.0;
            float _2594 = 0.0;
            float _2595 = 0.0;
            float _2596 = 0.0;
            float _2597 = 0.0;
            float _2598 = 0.0;
            uint _2599 = 0u;
            uint _2608;
            bool _2609;
            for (;;)
            {
                _2608 = texelFetch(g_lightClassification, int((((_2302 << 5u) + (_2288 << 9u)) + (_2599 << 2u)) >> 2u)).x;
                _2609 = _2608 == 0u;
                float frontier_phi_103_pred;
                float frontier_phi_103_pred_1;
                float frontier_phi_103_pred_2;
                float frontier_phi_103_pred_3;
                float frontier_phi_103_pred_4;
                float frontier_phi_103_pred_5;
                if (_2609)
                {
                    frontier_phi_103_pred = _2594;
                    frontier_phi_103_pred_1 = _2598;
                    frontier_phi_103_pred_2 = _2597;
                    frontier_phi_103_pred_3 = _2596;
                    frontier_phi_103_pred_4 = _2595;
                    frontier_phi_103_pred_5 = _2593;
                }
                else
                {
                    float _2759;
                    float _2760;
                    float _2761;
                    float _2762;
                    float _2763;
                    float _2764;
                    uint _2765;
                    _2759 = _2593;
                    _2760 = _2594;
                    _2761 = _2595;
                    _2762 = _2596;
                    _2763 = _2597;
                    _2764 = _2598;
                    _2765 = _2608;
                    float _2686;
                    float _2687;
                    float _2688;
                    float _2689;
                    float _2690;
                    float _2691;
                    for (;;)
                    {
                        uint _2769 = uint(findLSB(_2765)) + (_2599 << 5u);
                        uint _2766 = (_2765 + 4294967295u) & _2765;
                        uint _2771 = _2769 * 48u;
                        vec4 _2785 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2771)).x, texelFetch(g_PointLightRenderingBuffer, int(_2771 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2771 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2771 + 3u)).x));
                        uint _2791 = (_2769 * 48u) + 4u;
                        vec4 _2804 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2791)).x, texelFetch(g_PointLightRenderingBuffer, int(_2791 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2791 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2791 + 3u)).x));
                        uint _2810 = (_2769 * 48u) + 8u;
                        vec3 _2821 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2810)).x, texelFetch(g_PointLightRenderingBuffer, int(_2810 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2810 + 2u)).x));
                        float _2825 = _2785.x - _1761;
                        float _2826 = _2785.y - _1762;
                        float _2827 = _2785.z - _1763;
                        float _2828 = dot(vec3(_2825, _2826, _2827), vec3(_2825, _2826, _2827));
                        float _2831 = inversesqrt(_2828);
                        float _2840 = 1.0 - (_2828 * _2785.w);
                        float _4027 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
                        float _2841 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
                        float _2842 = sqrt(_2828) * _2804.w;
                        float _2845 = 1.39999997615814208984375 / (_2842 + 1.39999997615814208984375);
                        float _2846 = _2845 * _2845;
                        float _2849 = ((1.0 - _2846) * dot(vec3(0.0), vec3(_2831 * _2825, _2831 * _2826, _2831 * _2827))) + _2846;
                        float _2852 = _2842 * _2842;
                        float _2856 = ((isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0))) * _2841) / ((_2852 * 0.699999988079071044921875) + 1.0);
                        float _2860 = (-0.0) - _1761;
                        float _2861 = (-0.0) - _1762;
                        float _2862 = (-0.0) - _1763;
                        float _2866 = inversesqrt(dot(vec3(_2860, _2861, _2862), vec3(_2860, _2861, _2862)));
                        float _2870 = dot(vec3(0.0), vec3(_2866 * _2860, _2866 * _2861, _2866 * _2862));
                        float _4043 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
                        float _4054 = isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0));
                        float _2874 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
                        float _2878 = (0.5 / (((isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) + 9.9999999392252902907785028219223e-09) + _2874)) * _2874;
                        float _4065 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
                        float _2887 = (((isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0))) * 3.1415927410125732421875) / ((_2852 * 2.1991131305694580078125) + 3.141590118408203125)) * _2841;
                        _2689 = (_2856 * _2804.x) + _2762;
                        _2690 = (_2856 * _2804.y) + _2763;
                        _2691 = (_2856 * _2804.z) + _2764;
                        _2686 = (_2887 * _2821.x) + _2759;
                        _2687 = (_2887 * _2821.y) + _2760;
                        _2688 = (_2887 * _2821.z) + _2761;
                        if (_2766 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2759 = _2686;
                            _2760 = _2687;
                            _2761 = _2688;
                            _2762 = _2689;
                            _2763 = _2690;
                            _2764 = _2691;
                            _2765 = _2766;
                        }
                    }
                    frontier_phi_103_pred = _2687;
                    frontier_phi_103_pred_1 = _2691;
                    frontier_phi_103_pred_2 = _2690;
                    frontier_phi_103_pred_3 = _2689;
                    frontier_phi_103_pred_4 = _2688;
                    frontier_phi_103_pred_5 = _2686;
                }
                _2419 = frontier_phi_103_pred;
                _2427 = frontier_phi_103_pred_1;
                _2425 = frontier_phi_103_pred_2;
                _2423 = frontier_phi_103_pred_3;
                _2421 = frontier_phi_103_pred_4;
                _2417 = frontier_phi_103_pred_5;
                uint _2600 = _2599 + 1u;
                if (_2600 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2593 = _2417;
                    _2594 = _2419;
                    _2595 = _2421;
                    _2596 = _2423;
                    _2597 = _2425;
                    _2598 = _2427;
                    _2599 = _2600;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2416 = _2417;
            _2418 = _2419;
            _2420 = _2421;
            _2422 = _2423;
            _2424 = _2425;
            _2426 = _2427;
        }
        uvec4 _2430 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2431 = _2430.z;
        uint _2433 = (_2431 >> 8u) & 15u;
        float _2564;
        float _2566;
        float _2568;
        float _2570;
        float _2572;
        float _2574;
        if (((4294967295u << _2433) & _2308) == 0u)
        {
            _2564 = _2416;
            _2566 = _2418;
            _2568 = _2420;
            _2570 = _2422;
            _2572 = _2424;
            _2574 = _2426;
        }
        else
        {
            float _2589 = inversesqrt(dot(vec3(_1761, _1762, _1763), vec3(_1761, _1762, _1763)));
            float frontier_phi_94_95_ladder;
            float frontier_phi_94_95_ladder_1;
            float frontier_phi_94_95_ladder_2;
            float frontier_phi_94_95_ladder_3;
            float frontier_phi_94_95_ladder_4;
            float frontier_phi_94_95_ladder_5;
            if (_2433 < ((_2431 >> 12u) & 15u))
            {
                float _2565;
                float _2567;
                float _2569;
                float _2571;
                float _2573;
                float _2575;
                float _2742 = _2416;
                float _2743 = _2418;
                float _2744 = _2420;
                float _2745 = _2422;
                float _2746 = _2424;
                float _2747 = _2426;
                uint _2748 = _2433;
                uint _2757;
                bool _2758;
                for (;;)
                {
                    _2757 = texelFetch(g_lightClassification, int((((_2302 << 5u) + (_2288 << 9u)) + (_2748 << 2u)) >> 2u)).x;
                    _2758 = _2757 == 0u;
                    float frontier_phi_114_pred;
                    float frontier_phi_114_pred_1;
                    float frontier_phi_114_pred_2;
                    float frontier_phi_114_pred_3;
                    float frontier_phi_114_pred_4;
                    float frontier_phi_114_pred_5;
                    if (_2758)
                    {
                        frontier_phi_114_pred = _2747;
                        frontier_phi_114_pred_1 = _2746;
                        frontier_phi_114_pred_2 = _2745;
                        frontier_phi_114_pred_3 = _2744;
                        frontier_phi_114_pred_4 = _2743;
                        frontier_phi_114_pred_5 = _2742;
                    }
                    else
                    {
                        float _2901;
                        float _2902;
                        float _2903;
                        float _2904;
                        float _2905;
                        float _2906;
                        float _3150;
                        float _3151;
                        float _3152;
                        float _3153;
                        float _3154;
                        float _3155;
                        float _2914 = _2742;
                        float _2915 = _2743;
                        float _2916 = _2744;
                        float _2917 = _2745;
                        float _2918 = _2746;
                        float _2919 = _2747;
                        uint _2920 = _2757;
                        uint _2921;
                        vec4 _2946;
                        float _2947;
                        vec4 _2962;
                        vec3 _2974;
                        vec4 _2989;
                        vec4 _3004;
                        float _3050;
                        bool _3051;
                        for (;;)
                        {
                            uint _2931 = ((_2748 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2920));
                            _2921 = (_2920 + 4294967295u) & _2920;
                            uint _2933 = _2931 * 40u;
                            _2946 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2933)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 3u)).x));
                            _2947 = _2946.w;
                            uint _2949 = (_2931 * 40u) + 4u;
                            _2962 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2949)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 3u)).x));
                            uint _2964 = (_2931 * 40u) + 8u;
                            _2974 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2964)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 2u)).x));
                            uint _2976 = (_2931 * 40u) + 16u;
                            _2989 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2976)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 3u)).x));
                            uint _2991 = (_2931 * 40u) + 20u;
                            _3004 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2991)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 3u)).x));
                            uint _3006 = (_2931 * 40u) + 24u;
                            vec4 _3019 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3006)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 3u)).x));
                            uint _3025 = (_2931 * 40u) + 28u;
                            vec4 _3038 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3025)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3025 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3025 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3025 + 3u)).x));
                            _3050 = fma(_1763, _3038.z, fma(_1762, _3038.y, _3038.x * _1761)) + _3038.w;
                            _3051 = !((fma(_1763, _3019.z, fma(_1762, _3019.y, _3019.x * _1761)) + _3019.w) <= 0.0);
                            float frontier_phi_120_pred;
                            float frontier_phi_120_pred_1;
                            float frontier_phi_120_pred_2;
                            float frontier_phi_120_pred_3;
                            float frontier_phi_120_pred_4;
                            float frontier_phi_120_pred_5;
                            if (_3051)
                            {
                                float _3078 = _2946.x - _1761;
                                float _3079 = _2946.y - _1762;
                                float _3080 = _2946.z - _1763;
                                float _3081 = dot(vec3(_3078, _3079, _3080), vec3(_3078, _3079, _3080));
                                float _3084 = inversesqrt(_3081);
                                float _3085 = _3084 * _3078;
                                float _3086 = _3084 * _3079;
                                float _3087 = _3084 * _3080;
                                float _3091 = 1.0 - (_3081 / (_2947 * _2947));
                                float _4076 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
                                float _3092 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
                                float _3096 = sqrt(_3081) * _2962.w;
                                float _3098 = 1.39999997615814208984375 / (_3096 + 1.39999997615814208984375);
                                float _3099 = _3098 * _3098;
                                float _3100 = 1.0 - _3099;
                                float _3102 = (_3100 * dot(vec3(_3085, _3086, _3087), vec3(0.0))) + _3099;
                                float _3105 = _3096 * _3096;
                                float _3109 = (fma(_1763, _2989.z, fma(_1762, _2989.y, _2989.x * _1761)) + _2989.w) / _3050;
                                float _3110 = (fma(_1763, _3004.z, fma(_1762, _3004.y, _3004.x * _1761)) + _3004.w) / _3050;
                                float _3114 = 1.0 - dot(vec2(_3109, _3110), vec2(_3109, _3110));
                                float _4092 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0));
                                float _3115 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
                                float _3116 = _3115 * (((isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0))) * _3092) / ((_3105 * 0.699999988079071044921875) + 1.0));
                                float _3126 = dot(vec3(0.0), vec3((-0.0) - (_1761 * _2589), (-0.0) - (_1762 * _2589), (-0.0) - (_1763 * _2589)));
                                float _4103 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0));
                                float _3134 = (_3100 * dot(vec3(0.0), vec3(_3085, _3086, _3087))) + _3099;
                                float _4114 = isnan(0.0) ? _3134 : (isnan(_3134) ? 0.0 : max(_3134, 0.0));
                                float _3135 = isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0));
                                float _3139 = (0.5 / (((isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) + 9.9999999392252902907785028219223e-09) + _3135)) * _3135;
                                float _4125 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                                float _3146 = (_3115 * _3092) * (((isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * 3.1415927410125732421875) / ((_3105 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_120_pred = _3116 * _2962.z;
                                frontier_phi_120_pred_1 = _3116 * _2962.y;
                                frontier_phi_120_pred_2 = _3116 * _2962.x;
                                frontier_phi_120_pred_3 = _3146 * _2974.z;
                                frontier_phi_120_pred_4 = _3146 * _2974.y;
                                frontier_phi_120_pred_5 = _3146 * _2974.x;
                            }
                            else
                            {
                                frontier_phi_120_pred = 0.0;
                                frontier_phi_120_pred_1 = 0.0;
                                frontier_phi_120_pred_2 = 0.0;
                                frontier_phi_120_pred_3 = 0.0;
                                frontier_phi_120_pred_4 = 0.0;
                                frontier_phi_120_pred_5 = 0.0;
                            }
                            _3155 = frontier_phi_120_pred;
                            _3154 = frontier_phi_120_pred_1;
                            _3153 = frontier_phi_120_pred_2;
                            _3152 = frontier_phi_120_pred_3;
                            _3151 = frontier_phi_120_pred_4;
                            _3150 = frontier_phi_120_pred_5;
                            _2904 = _3153 + _2917;
                            _2905 = _3154 + _2918;
                            _2906 = _3155 + _2919;
                            _2901 = _3150 + _2914;
                            _2902 = _3151 + _2915;
                            _2903 = _3152 + _2916;
                            if (_2921 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2914 = _2901;
                                _2915 = _2902;
                                _2916 = _2903;
                                _2917 = _2904;
                                _2918 = _2905;
                                _2919 = _2906;
                                _2920 = _2921;
                                continue;
                            }
                        }
                        frontier_phi_114_pred = _2906;
                        frontier_phi_114_pred_1 = _2905;
                        frontier_phi_114_pred_2 = _2904;
                        frontier_phi_114_pred_3 = _2903;
                        frontier_phi_114_pred_4 = _2902;
                        frontier_phi_114_pred_5 = _2901;
                    }
                    _2575 = frontier_phi_114_pred;
                    _2573 = frontier_phi_114_pred_1;
                    _2571 = frontier_phi_114_pred_2;
                    _2569 = frontier_phi_114_pred_3;
                    _2567 = frontier_phi_114_pred_4;
                    _2565 = frontier_phi_114_pred_5;
                    uint _2749 = _2748 + 1u;
                    if (_2749 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2742 = _2565;
                        _2743 = _2567;
                        _2744 = _2569;
                        _2745 = _2571;
                        _2746 = _2573;
                        _2747 = _2575;
                        _2748 = _2749;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_94_95_ladder = _2571;
                frontier_phi_94_95_ladder_1 = _2575;
                frontier_phi_94_95_ladder_2 = _2573;
                frontier_phi_94_95_ladder_3 = _2569;
                frontier_phi_94_95_ladder_4 = _2567;
                frontier_phi_94_95_ladder_5 = _2565;
            }
            else
            {
                frontier_phi_94_95_ladder = _2422;
                frontier_phi_94_95_ladder_1 = _2426;
                frontier_phi_94_95_ladder_2 = _2424;
                frontier_phi_94_95_ladder_3 = _2420;
                frontier_phi_94_95_ladder_4 = _2418;
                frontier_phi_94_95_ladder_5 = _2416;
            }
            _2564 = frontier_phi_94_95_ladder_5;
            _2566 = frontier_phi_94_95_ladder_4;
            _2568 = frontier_phi_94_95_ladder_3;
            _2570 = frontier_phi_94_95_ladder;
            _2572 = frontier_phi_94_95_ladder_2;
            _2574 = frontier_phi_94_95_ladder_1;
        }
        float _2579 = isnan(1.0) ? _764 : (isnan(_764) ? 1.0 : min(_764, 1.0));
        _2321 = (_2579 * _2570) + _2051;
        _2323 = (_2579 * _2572) + _2052;
        _2325 = (_2579 * _2574) + _2053;
        _2327 = ((_2564 * 0.039999999105930328369140625) * _2579) + _2156;
        _2329 = ((_2566 * 0.039999999105930328369140625) * _2579) + _2157;
        _2331 = ((_2568 * 0.039999999105930328369140625) * _2579) + _2158;
    }
    else
    {
        _2321 = _2051;
        _2323 = _2052;
        _2325 = _2053;
        _2327 = _2156;
        _2329 = _2157;
        _2331 = _2158;
    }
    float _4141 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _4152 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _4163 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _2348 = ((isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * (_2321 + ((isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0))) * _764))) + ((_2327 + ((isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0))) * _1498)) * cbPerFrame._m0[3u].x);
    float _2349 = ((isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_2323 + ((isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0))) * _764))) + ((_2329 + ((isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0))) * _1498)) * cbPerFrame._m0[3u].x);
    float _2350 = ((isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0))) * (_2325 + ((isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0))) * _764))) + ((_2331 + ((isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0))) * _1498)) * cbPerFrame._m0[3u].x);
    float _2351 = isnan(0.0) ? _2348 : (isnan(_2348) ? 0.0 : max(_2348, 0.0));
    float _2352 = isnan(0.0) ? _2349 : (isnan(_2349) ? 0.0 : max(_2349, 0.0));
    float _2353 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
    uint _2354 = _738 + 6u;
    float _2362 = _724 / cbSceneParam._m0[86u].x;
    float _2363 = _725 / cbSceneParam._m0[86u].y;
    vec4 _2377 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2362, _2363, (log2((isnan(cbSceneParam._m0[77u].w) ? _698 : (isnan(_698) ? cbSceneParam._m0[77u].w : min(_698, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2379 = _2377.x;
    float _2380 = _2377.y;
    float _2381 = _2377.z;
    float _2382 = _2377.w;
    float _2478;
    float _2480;
    float _2482;
    float _2484;
    if (_698 > cbSceneParam._m0[78u].w)
    {
        float _2441 = isnan(_698) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _698 : min(cbSceneParam._m0[80u].w, _698));
        float _2442 = _2441 / _698;
        float _2453 = _2442 * _271;
        float _2454 = _272 * _2442;
        float _2455 = (-0.0) - _2454;
        float _2456 = _2442 * _273;
        float _2458 = (cbSceneParam._m0[77u].w * _2455) / _2441;
        float _2459 = _2458 + cbSceneParam._m0[79u].w;
        float _2460 = cbSceneParam._m0[79u].w - _2454;
        float _2466 = sqrt(((_2453 * _2453) + (_2454 * _2454)) + (_2456 * _2456));
        float _2469 = (1.0 - (cbSceneParam._m0[77u].w / _2441)) * _2466;
        float _2474 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2476 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2699;
        if (abs((_2455 - _2458) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2699 = ((((_2459 > 0.0) ? exp2(_2474 * _2459) : (2.0 - exp2(_2476 * _2459))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2469;
        }
        else
        {
            float _2622 = 1.0 / cbSceneParam._m0[80u].x;
            float _2623 = isnan(_2460) ? _2459 : (isnan(_2459) ? _2460 : max(_2459, _2460));
            float _2624 = isnan(_2460) ? _2459 : (isnan(_2459) ? _2460 : min(_2459, _2460));
            float _2633 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : min(_2623, 0.0));
            float _2634 = isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : min(_2624, 0.0));
            _2699 = ((abs(_2466 / _2455) * cbSceneParam._m0[80u].y) * ((((_2633 - _2634) * 2.0) - ((exp2(_2474 * (isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0)))) - exp2(_2474 * (isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0))))) * _2622)) - ((exp2(_2476 * _2633) - exp2(_2476 * _2634)) * _2622))) + (_2469 * cbSceneParam._m0[80u].z);
        }
        vec4 _2701 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2362, _2363, 1.0), 0.0);
        float _2710 = exp2((_2699 * (-1.44269502162933349609375)) * (1.0 - _2701.w));
        float _2711 = log2(_2710);
        float _2727 = log2(_2382);
        _2478 = (exp2(_2727 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2711 * cbSceneParam._m0[78u].x)) * _2701.x) / cbSceneParam._m0[78u].x)) + _2379;
        _2480 = (exp2(_2727 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2711 * cbSceneParam._m0[78u].y)) * _2701.y) / cbSceneParam._m0[78u].y)) + _2380;
        _2482 = (exp2(_2727 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2711 * cbSceneParam._m0[78u].z)) * _2701.z) / cbSceneParam._m0[78u].z)) + _2381;
        _2484 = _2710 * _2382;
    }
    else
    {
        _2478 = _2379;
        _2480 = _2380;
        _2482 = _2381;
        _2484 = _2382;
    }
    bool _2737;
    vec4 _2494;
    vec4 _2517;
    float _2519;
    float _2523;
    float _2524;
    float _2525;
    float _2526;
    bool _2537;
    for (;;)
    {
        _2494 = cbMatDynParam._m0[0u];
        float _2496 = roundEven(_2494.y);
        bool _2497 = _2496 == 3.0;
        float _2499 = log2(_2484);
        float _2506 = exp2(_2499 * cbSceneParam._m0[78u].x) * _2351;
        float _2507 = exp2(_2499 * cbSceneParam._m0[78u].y) * _2352;
        float _2508 = exp2(_2499 * cbSceneParam._m0[78u].z) * _2353;
        float _2515 = _712 + (-0.5);
        _2517 = cbMtdParam._m0[1u];
        _2519 = _2517.y * _2515;
        float _2522 = (_2496 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2523 = _2522 * (_2497 ? _2506 : (_2506 + (cbSceneParam._m0[72u].w * _2478)));
        _2524 = _2522 * (_2497 ? _2507 : (_2507 + (cbSceneParam._m0[72u].w * _2480)));
        _2525 = _2522 * (_2497 ? _2508 : (_2508 + (cbSceneParam._m0[72u].w * _2482)));
        _2526 = _2515 * 0.999000012874603271484375;
        _2537 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2537)
        {
            if ((cbInstanceData._m0[_738 + 7u].x + _2526) < 0.5)
            {
                _2737 = true;
                break;
            }
        }
        uint _2657 = _740 + uint(_2494.w);
        if ((cbInstanceData._m0[_2657].w < 1.0) && ((cbInstanceData._m0[_2657].w + _2526) < 0.5))
        {
            _2737 = true;
            break;
        }
        if ((_2519 + 1.0) < _2517.x)
        {
            _2737 = true;
            break;
        }
        _2737 = false;
        break;
    }
    float _2892;
    if (_2737)
    {
        discard_state = true;
        _2892 = 0.0;
    }
    else
    {
        _2892 = cbInstanceData._m0[_2354].w;
    }
    SV_Target.x = _2523;
    SV_Target.y = _2524;
    SV_Target.z = _2525;
    SV_Target.w = _2892;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2354].w;
    discard_exit();
}


