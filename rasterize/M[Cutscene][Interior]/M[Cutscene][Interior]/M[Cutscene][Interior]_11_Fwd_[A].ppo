#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _829;
float _2763;
float _2764;
float _2765;
float _2766;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _198 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _246 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _256 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _246);
    float _257 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _246);
    float _258 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _246);
    vec4 _277 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _312 = cbMtdParam._m0[24u].x + _256;
    float _313 = cbMtdParam._m0[24u].y + _257;
    float _314 = cbMtdParam._m0[24u].z + _258;
    float _331 = (-0.0) - dot(vec3(_312, _313, _314), vec3(_187 * _180, _187 * _181, _187 * _182));
    float _332 = (-0.0) - dot(vec3(_312, _313, _314), vec3(_198 * TANGENT.x, _198 * TANGENT.y, _198 * TANGENT.z));
    float _333 = (-0.0) - dot(vec3(_312, _313, _314), vec3((-0.0) - (NORMAL.x * _194), (-0.0) - (NORMAL.y * _194), (-0.0) - (NORMAL.z * _194)));
    float _337 = inversesqrt(dot(vec3(_331, _332, _333), vec3(_331, _332, _333)));
    float _340 = _337 * _333;
    float _343 = ((_337 * _331) + (((_277.x * 2.0) + (-1.0)) * cbMtdParam._m0[22u].x)) * cbMtdParam._m0[20u].w;
    float _344 = ((_337 * _332) + (((_277.y * 2.0) + (-1.0)) * cbMtdParam._m0[22u].y)) * cbMtdParam._m0[20u].z;
    float _345 = fract(TEXCOORD.x);
    float _346 = fract(TEXCOORD.y);
    float _352;
    if (_343 > 0.0)
    {
        _352 = (1.0 - _345) / _343;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_343 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _345) / _343;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _352 = frontier_phi_3_2_ladder;
    }
    float _360;
    if (_344 > 0.0)
    {
        _360 = (1.0 - _346) / _344;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_344 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _346) / _344;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _360 = frontier_phi_7_6_ladder;
    }
    float _364 = (_340 > 0.0) ? (cbMtdParam._m0[16u].x / _340) : 5000.0;
    float _365 = isnan(_360) ? _352 : (isnan(_352) ? _360 : min(_352, _360));
    float _366 = isnan(_364) ? _365 : (isnan(_365) ? _364 : min(_365, _364));
    float _370 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _377 = ((_366 * _340) + _370) / _370;
    vec4 _402 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * ((((((_345 + (-0.5)) + (_366 * _343)) / _377) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * ((((((_346 + (-0.5)) + (_366 * _344)) / _377) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    float _412 = cbMtdParam._m0[9u].x * _402.x;
    float _413 = cbMtdParam._m0[9u].y * _402.y;
    float _414 = cbMtdParam._m0[9u].z * _402.z;
    float _2785 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _2796 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _2807 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _433 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _437 = inversesqrt(dot(vec3(_256, _257, _258), vec3(_256, _257, _258)));
    float _438 = _256 * _437;
    float _439 = _257 * _437;
    float _440 = _258 * _437;
    vec4 _445 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _447 = _445.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _543 = sqrt(((_256 * _256) + (_257 * _257)) + (_258 * _258));
        float _549 = (cbMatDynParam._m0[5u].x * _543) + cbMatDynParam._m0[5u].y;
        float _2818 = isnan(0.0) ? _549 : (isnan(_549) ? 0.0 : max(_549, 0.0));
        float _550 = isnan(1.0) ? _2818 : (isnan(_2818) ? 1.0 : min(_2818, 1.0));
        float _554 = (cbMatDynParam._m0[5u].z * _543) + cbMatDynParam._m0[5u].w;
        float _2829 = isnan(0.0) ? _554 : (isnan(_554) ? 0.0 : max(_554, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2829 : (isnan(_2829) ? 1.0 : min(_2829, 1.0))) - _550)) + _550) < ((_447 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _459 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _460 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _473 = uint(roundEven(NORMAL.w)) * 13u;
    uint _475 = _473 + 9u;
    uint _476 = _475 + uint(cbMatDynParam._m0[0u].w);
    float _482 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2785 : (isnan(_2785) ? 1.0 : min(_2785, 1.0)))) * cbInstanceData._m0[_476].x;
    float _483 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2796 : (isnan(_2796) ? 1.0 : min(_2796, 1.0)))) * cbInstanceData._m0[_476].y;
    float _484 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2807 : (isnan(_2807) ? 1.0 : min(_2807, 1.0)))) * cbInstanceData._m0[_476].z;
    float _2840 = isnan(0.0) ? _482 : (isnan(_482) ? 0.0 : max(_482, 0.0));
    float _485 = isnan(1.0) ? _2840 : (isnan(_2840) ? 1.0 : min(_2840, 1.0));
    float _2851 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _486 = isnan(1.0) ? _2851 : (isnan(_2851) ? 1.0 : min(_2851, 1.0));
    float _2862 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _487 = isnan(1.0) ? _2862 : (isnan(_2862) ? 1.0 : min(_2862, 1.0));
    vec4 _496 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _459, cbSceneParam._m0[86u].y * _460));
    float _499 = _496.x * TEXCOORD_4.z;
    float _500 = (-0.0) - _438;
    float _501 = (-0.0) - _439;
    float _502 = (-0.0) - _440;
    float _524 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _528 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _532 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _828;
    float _830;
    float _831;
    float _832;
    float _833;
    float _834;
    float _835;
    float _836;
    float _837;
    float _838;
    float _839;
    float _840;
    float _841;
    float _842;
    float _843;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _616 = (cbModelParam._m0[37u].x * ((((fma(_532, cbModelParam._m0[26u].z, fma(_528, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _524)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _618 = (cbModelParam._m0[37u].y * ((((fma(_532, cbModelParam._m0[27u].z, fma(_528, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _524)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _619 = (((((fma(_532, cbModelParam._m0[28u].z, fma(_528, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _524)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _622 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_616, _618, _619), 0.0);
        vec4 _629 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_616, _618, _619), 0.0);
        vec4 _636 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_616, _618, _619), 0.0);
        vec4 _643 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_616, _618, _619), 0.0);
        float _656 = exp2((_622.w + (-0.5)) * 20.0) * 2.0;
        float _657 = _656 * (_622.x + (-0.5));
        float _658 = _656 * (_622.y + (-0.5));
        float _659 = _656 * (_622.z + (-0.5));
        float _666 = exp2((_629.w + (-0.5)) * 20.0) * 2.0;
        float _667 = _666 * (_629.x + (-0.5));
        float _668 = _666 * (_629.y + (-0.5));
        float _669 = _666 * (_629.z + (-0.5));
        float _676 = exp2((_636.w + (-0.5)) * 20.0) * 2.0;
        float _677 = _676 * (_636.x + (-0.5));
        float _678 = _676 * (_636.y + (-0.5));
        float _679 = _676 * (_636.z + (-0.5));
        float _686 = exp2((_643.w + (-0.5)) * 20.0) * 2.0;
        float _687 = _686 * (_643.x + (-0.5));
        float _688 = _686 * (_643.y + (-0.5));
        float _689 = _686 * (_643.z + (-0.5));
        float _690 = isnan(0.0) ? _687 : (isnan(_687) ? 0.0 : max(_687, 0.0));
        float _691 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
        float _692 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
        float _693 = _657 * 0.5;
        float _694 = _667 * 0.5;
        float _695 = _677 * 0.5;
        float _696 = dot(vec3(_693, _694, _695), vec3(_693, _694, _695));
        float _701 = (_696 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_696);
        float _710 = (dot(vec3(0.0), vec3(_701 * _693, _701 * _694, _701 * _695)) + 1.0) * 0.5;
        float _2888 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
        float _720 = sqrt(((_694 * _694) + (_693 * _693)) + (_695 * _695)) / (_690 + 9.9999997473787516355514526367188e-06);
        float _2899 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
        float _721 = isnan(1.0) ? _2899 : (isnan(_2899) ? 1.0 : min(_2899, 1.0));
        float _722 = _721 * 2.0;
        float _726 = (1.0 - _721) / (_721 + 1.0);
        float _2910 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
        float _727 = isnan(1.0) ? _2910 : (isnan(_2910) ? 1.0 : min(_2910, 1.0));
        float _736 = ((((1.0 - _727) * (_722 + 2.0)) * exp2(log2(isnan(1.0) ? _2888 : (isnan(_2888) ? 1.0 : min(_2888, 1.0))) * (_722 + 1.0))) + _727) * _690;
        float _737 = _658 * 0.5;
        float _738 = _668 * 0.5;
        float _739 = _678 * 0.5;
        float _740 = dot(vec3(_737, _738, _739), vec3(_737, _738, _739));
        float _745 = (_740 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_740);
        float _753 = (dot(vec3(0.0), vec3(_745 * _737, _745 * _738, _745 * _739)) + 1.0) * 0.5;
        float _2921 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
        float _762 = sqrt(((_738 * _738) + (_737 * _737)) + (_739 * _739)) / (_691 + 9.9999997473787516355514526367188e-06);
        float _2932 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _763 = isnan(1.0) ? _2932 : (isnan(_2932) ? 1.0 : min(_2932, 1.0));
        float _764 = _763 * 2.0;
        float _768 = (1.0 - _763) / (_763 + 1.0);
        float _2943 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
        float _769 = isnan(1.0) ? _2943 : (isnan(_2943) ? 1.0 : min(_2943, 1.0));
        float _778 = ((((1.0 - _769) * (_764 + 2.0)) * exp2(log2(isnan(1.0) ? _2921 : (isnan(_2921) ? 1.0 : min(_2921, 1.0))) * (_764 + 1.0))) + _769) * _691;
        float _779 = _659 * 0.5;
        float _780 = _669 * 0.5;
        float _781 = _679 * 0.5;
        float _782 = dot(vec3(_779, _780, _781), vec3(_779, _780, _781));
        float _787 = (_782 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_782);
        float _795 = (dot(vec3(0.0), vec3(_787 * _779, _787 * _780, _787 * _781)) + 1.0) * 0.5;
        float _2954 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
        float _804 = sqrt(((_780 * _780) + (_779 * _779)) + (_781 * _781)) / (_692 + 9.9999997473787516355514526367188e-06);
        float _2965 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        float _805 = isnan(1.0) ? _2965 : (isnan(_2965) ? 1.0 : min(_2965, 1.0));
        float _806 = _805 * 2.0;
        float _810 = (1.0 - _805) / (_805 + 1.0);
        float _2976 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _811 = isnan(1.0) ? _2976 : (isnan(_2976) ? 1.0 : min(_2976, 1.0));
        float _820 = ((((1.0 - _811) * (_806 + 2.0)) * exp2(log2(isnan(1.0) ? _2954 : (isnan(_2954) ? 1.0 : min(_2954, 1.0))) * (_806 + 1.0))) + _811) * _692;
        _828 = _659;
        _830 = _658;
        _831 = _657;
        _832 = _669;
        _833 = _668;
        _834 = _667;
        _835 = _679;
        _836 = _678;
        _837 = _677;
        _838 = _692;
        _839 = _691;
        _840 = _690;
        _841 = cbModelParam._m0[36u].z * (isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0)));
        _842 = cbModelParam._m0[36u].z * (isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0)));
        _843 = cbModelParam._m0[36u].z * (isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0)));
    }
    else
    {
        _828 = _829;
        _830 = _829;
        _831 = _829;
        _832 = _829;
        _833 = _829;
        _834 = _829;
        _835 = _829;
        _836 = _829;
        _837 = _829;
        _838 = _829;
        _839 = _829;
        _840 = _829;
        _841 = 0.0;
        _842 = 0.0;
        _843 = 0.0;
    }
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _900 = (cbModelParam._m0[38u].x * ((((fma(_532, cbModelParam._m0[30u].z, fma(_528, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _524)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _901 = (cbModelParam._m0[38u].y * ((((fma(_532, cbModelParam._m0[31u].z, fma(_528, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _524)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _902 = (((((fma(_532, cbModelParam._m0[32u].z, fma(_528, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _524)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _904 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_900, _901, _902), 0.0);
        vec4 _911 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_900, _901, _902), 0.0);
        vec4 _918 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_900, _901, _902), 0.0);
        vec4 _925 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_900, _901, _902), 0.0);
        float _937 = exp2((_904.w + (-0.5)) * 20.0) * 2.0;
        float _938 = _937 * (_904.x + (-0.5));
        float _939 = _937 * (_904.y + (-0.5));
        float _940 = _937 * (_904.z + (-0.5));
        float _947 = exp2((_911.w + (-0.5)) * 20.0) * 2.0;
        float _948 = _947 * (_911.x + (-0.5));
        float _949 = _947 * (_911.y + (-0.5));
        float _950 = _947 * (_911.z + (-0.5));
        float _957 = exp2((_918.w + (-0.5)) * 20.0) * 2.0;
        float _958 = _957 * (_918.x + (-0.5));
        float _959 = _957 * (_918.y + (-0.5));
        float _960 = _957 * (_918.z + (-0.5));
        float _967 = exp2((_925.w + (-0.5)) * 20.0) * 2.0;
        float _968 = _967 * (_925.x + (-0.5));
        float _969 = _967 * (_925.y + (-0.5));
        float _970 = _967 * (_925.z + (-0.5));
        float _971 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _972 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _973 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _974 = _938 * 0.5;
        float _975 = _948 * 0.5;
        float _976 = _958 * 0.5;
        float _977 = dot(vec3(_974, _975, _976), vec3(_974, _975, _976));
        float _982 = (_977 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_977);
        float _990 = (dot(vec3(0.0), vec3(_982 * _974, _982 * _975, _982 * _976)) + 1.0) * 0.5;
        float _3017 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _999 = sqrt(((_975 * _975) + (_974 * _974)) + (_976 * _976)) / (_971 + 9.9999997473787516355514526367188e-06);
        float _3028 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1000 = isnan(1.0) ? _3028 : (isnan(_3028) ? 1.0 : min(_3028, 1.0));
        float _1001 = _1000 * 2.0;
        float _1005 = (1.0 - _1000) / (_1000 + 1.0);
        float _3039 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1006 = isnan(1.0) ? _3039 : (isnan(_3039) ? 1.0 : min(_3039, 1.0));
        float _1015 = ((((1.0 - _1006) * (_1001 + 2.0)) * exp2(log2(isnan(1.0) ? _3017 : (isnan(_3017) ? 1.0 : min(_3017, 1.0))) * (_1001 + 1.0))) + _1006) * _971;
        float _1016 = _939 * 0.5;
        float _1017 = _949 * 0.5;
        float _1018 = _959 * 0.5;
        float _1019 = dot(vec3(_1016, _1017, _1018), vec3(_1016, _1017, _1018));
        float _1024 = (_1019 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1019);
        float _1032 = (dot(vec3(0.0), vec3(_1024 * _1016, _1024 * _1017, _1024 * _1018)) + 1.0) * 0.5;
        float _3050 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1041 = sqrt(((_1017 * _1017) + (_1016 * _1016)) + (_1018 * _1018)) / (_972 + 9.9999997473787516355514526367188e-06);
        float _3061 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1042 = isnan(1.0) ? _3061 : (isnan(_3061) ? 1.0 : min(_3061, 1.0));
        float _1043 = _1042 * 2.0;
        float _1047 = (1.0 - _1042) / (_1042 + 1.0);
        float _3072 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _3072 : (isnan(_3072) ? 1.0 : min(_3072, 1.0));
        float _1057 = ((((1.0 - _1048) * (_1043 + 2.0)) * exp2(log2(isnan(1.0) ? _3050 : (isnan(_3050) ? 1.0 : min(_3050, 1.0))) * (_1043 + 1.0))) + _1048) * _972;
        float _1058 = _940 * 0.5;
        float _1059 = _950 * 0.5;
        float _1060 = _960 * 0.5;
        float _1061 = dot(vec3(_1058, _1059, _1060), vec3(_1058, _1059, _1060));
        float _1066 = (_1061 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1061);
        float _1074 = (dot(vec3(0.0), vec3(_1066 * _1058, _1066 * _1059, _1066 * _1060)) + 1.0) * 0.5;
        float _3083 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1083 = sqrt(((_1059 * _1059) + (_1058 * _1058)) + (_1060 * _1060)) / (_973 + 9.9999997473787516355514526367188e-06);
        float _3094 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3094 : (isnan(_3094) ? 1.0 : min(_3094, 1.0));
        float _1085 = _1084 * 2.0;
        float _1089 = (1.0 - _1084) / (_1084 + 1.0);
        float _3105 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3105 : (isnan(_3105) ? 1.0 : min(_3105, 1.0));
        float _1099 = ((((1.0 - _1090) * (_1085 + 2.0)) * exp2(log2(isnan(1.0) ? _3083 : (isnan(_3083) ? 1.0 : min(_3083, 1.0))) * (_1085 + 1.0))) + _1090) * _973;
        _1107 = _940;
        _1108 = _939;
        _1109 = _938;
        _1110 = _950;
        _1111 = _949;
        _1112 = _948;
        _1113 = _960;
        _1114 = _959;
        _1115 = _958;
        _1116 = _973;
        _1117 = _972;
        _1118 = _971;
        _1119 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0)));
        _1120 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0)));
        _1121 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0)));
    }
    else
    {
        _1107 = _829;
        _1108 = _829;
        _1109 = _829;
        _1110 = _829;
        _1111 = _829;
        _1112 = _829;
        _1113 = _829;
        _1114 = _829;
        _1115 = _829;
        _1116 = _829;
        _1117 = _829;
        _1118 = _829;
        _1119 = 0.0;
        _1120 = 0.0;
        _1121 = 0.0;
    }
    float _1131 = (cbModelParam._m0[1u].x * (_1119 - _841)) + _841;
    float _1132 = (cbModelParam._m0[1u].x * (_1120 - _842)) + _842;
    float _1133 = (cbModelParam._m0[1u].x * (_1121 - _843)) + _843;
    float _1154 = fma(_1133, cbSceneParam._m0[89u].z, fma(_1132, cbSceneParam._m0[89u].y, _1131 * cbSceneParam._m0[89u].x));
    float _1157 = fma(_1133, cbSceneParam._m0[90u].z, fma(_1132, cbSceneParam._m0[90u].y, _1131 * cbSceneParam._m0[90u].x));
    float _1160 = fma(_1133, cbSceneParam._m0[91u].z, fma(_1132, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1131));
    float _1175 = _438 * (-0.5);
    float _1176 = _439 * (-0.5);
    float _1177 = _440 * (-0.5);
    float _1178 = dot(vec4(_1175, _1176, _1177, 1.0), vec4(_1109, _1112, _1115, _1118));
    float _1181 = dot(vec4(_1175, _1176, _1177, 1.0), vec4(_1108, _1111, _1114, _1117));
    float _1184 = dot(vec4(_1175, _1176, _1177, 1.0), vec4(_1107, _1110, _1113, _1116));
    float _1218;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1191 = dot(vec4(_1175, _1176, _1177, 1.0), vec4(_828, _832, _835, _838));
        float _1195 = dot(vec4(_1175, _1176, _1177, 1.0), vec4(_830, _833, _836, _839));
        float _1199 = dot(vec4(_1175, _1176, _1177, 1.0), vec4(_831, _834, _837, _840));
        float _1206 = dot(vec4(cbModelParam._m0[39u]), vec4(_1175, _1176, _1177, 1.0));
        _1218 = dot(vec3(isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0)), isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0)), isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1206) ? 0.0 : (isnan(0.0) ? _1206 : max(0.0, _1206))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1218 = 1.0;
    }
    float _1229;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1220 = dot(vec4(cbModelParam._m0[40u]), vec4(_1175, _1176, _1177, 1.0));
        _1229 = dot(vec3(isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0)), isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0)), isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1220) ? 0.0 : (isnan(0.0) ? _1220 : max(0.0, _1220))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1229 = 1.0;
    }
    float _1233 = (_1229 * cbModelParam._m0[1u].x) + (_1218 * (1.0 - cbModelParam._m0[1u].x));
    float _1242 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1325;
    float _1327;
    float _1329;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1292 = fma(_532, cbModelParam._m0[13u].z, fma(_528, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _524)) + cbModelParam._m0[13u].w;
        float _1296 = fma(_532, cbModelParam._m0[14u].z, fma(_528, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _524)) + cbModelParam._m0[14u].w;
        float _1300 = fma(_532, cbModelParam._m0[15u].z, fma(_528, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _524)) + cbModelParam._m0[15u].w;
        float _1303 = fma(_502, cbModelParam._m0[13u].z, fma(_501, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _500));
        float _1306 = fma(_502, cbModelParam._m0[14u].z, fma(_501, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _500));
        float _1309 = fma(_502, cbModelParam._m0[15u].z, fma(_501, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _500));
        float _1335;
        if (_1303 > 0.0)
        {
            _1335 = abs((1.0 - _1292) / _1303);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1303 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1292 + 1.0) / _1303);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1335 = frontier_phi_25_23_ladder;
        }
        float _1633;
        if (_1306 > 0.0)
        {
            _1633 = abs((1.0 - _1296) / _1306);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1306 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1296 + 1.0) / _1306);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1633 = frontier_phi_34_30_ladder;
        }
        float _1944;
        if (_1309 > 0.0)
        {
            _1944 = abs((1.0 - _1300) / _1309);
        }
        else
        {
            float frontier_phi_48_41_ladder;
            if (_1309 < 0.0)
            {
                frontier_phi_48_41_ladder = abs((_1300 + 1.0) / _1309);
            }
            else
            {
                frontier_phi_48_41_ladder = 5000.0;
            }
            _1944 = frontier_phi_48_41_ladder;
        }
        float _1946 = isnan(_1633) ? _1335 : (isnan(_1335) ? _1633 : min(_1335, _1633));
        float _1947 = isnan(_1944) ? _1946 : (isnan(_1946) ? _1944 : min(_1946, _1944));
        float _1951 = (_1947 * _1303) + _1292;
        float _1952 = (_1947 * _1306) + _1296;
        float _1953 = (_1947 * _1309) + _1300;
        float _1954 = _1947 * 9.9999997473787516355514526367188e-05;
        float _1955 = (-1.0) - _1954;
        float _1957 = _1954 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_1953 > _1957) || ((_1953 < _1955) || ((_1952 > _1957) || ((_1952 < _1955) || ((_1951 < _1955) || (_1951 > _1957))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2092 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1953, cbModelParam._m0[9u].z, fma(_1952, cbModelParam._m0[9u].y, _1951 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1953, cbModelParam._m0[10u].z, fma(_1952, cbModelParam._m0[10u].y, _1951 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1953, cbModelParam._m0[11u].z, fma(_1952, cbModelParam._m0[11u].y, _1951 * cbModelParam._m0[11u].x))), _1242);
            frontier_phi_24_48_ladder = _2092.z * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_1 = _2092.y * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_2 = _2092.x * cbModelParam._m0[1u].y;
        }
        _1325 = frontier_phi_24_48_ladder_2;
        _1327 = frontier_phi_24_48_ladder_1;
        _1329 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1313 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_500, _501, _502), _1242);
        _1325 = _1313.x * cbModelParam._m0[1u].y;
        _1327 = _1313.y * cbModelParam._m0[1u].y;
        _1329 = _1313.z * cbModelParam._m0[1u].y;
    }
    float _1332 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1422;
    float _1424;
    float _1426;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1386 = fma(_532, cbModelParam._m0[21u].z, fma(_528, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _524)) + cbModelParam._m0[21u].w;
        float _1390 = fma(_532, cbModelParam._m0[22u].z, fma(_528, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _524)) + cbModelParam._m0[22u].w;
        float _1394 = fma(_532, cbModelParam._m0[23u].z, fma(_528, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _524)) + cbModelParam._m0[23u].w;
        float _1397 = fma(_502, cbModelParam._m0[21u].z, fma(_501, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _500));
        float _1400 = fma(_502, cbModelParam._m0[22u].z, fma(_501, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _500));
        float _1403 = fma(_502, cbModelParam._m0[23u].z, fma(_501, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _500));
        float _1638;
        if (_1397 > 0.0)
        {
            _1638 = abs((1.0 - _1386) / _1397);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1397 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1386 + 1.0) / _1397);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1638 = frontier_phi_36_32_ladder;
        }
        float _1970;
        if (_1400 > 0.0)
        {
            _1970 = abs((1.0 - _1390) / _1400);
        }
        else
        {
            float frontier_phi_50_43_ladder;
            if (_1400 < 0.0)
            {
                frontier_phi_50_43_ladder = abs((_1390 + 1.0) / _1400);
            }
            else
            {
                frontier_phi_50_43_ladder = 5000.0;
            }
            _1970 = frontier_phi_50_43_ladder;
        }
        float _2157;
        if (_1403 > 0.0)
        {
            _2157 = abs((1.0 - _1394) / _1403);
        }
        else
        {
            float frontier_phi_68_61_ladder;
            if (_1403 < 0.0)
            {
                frontier_phi_68_61_ladder = abs((_1394 + 1.0) / _1403);
            }
            else
            {
                frontier_phi_68_61_ladder = 5000.0;
            }
            _2157 = frontier_phi_68_61_ladder;
        }
        float _2159 = isnan(_1970) ? _1638 : (isnan(_1638) ? _1970 : min(_1638, _1970));
        float _2160 = isnan(_2157) ? _2159 : (isnan(_2159) ? _2157 : min(_2159, _2157));
        float _2164 = (_2160 * _1397) + _1386;
        float _2165 = (_2160 * _1400) + _1390;
        float _2166 = (_2160 * _1403) + _1394;
        float _2167 = _2160 * 9.9999997473787516355514526367188e-05;
        float _2168 = (-1.0) - _2167;
        float _2170 = _2167 + 1.0;
        float frontier_phi_33_68_ladder;
        float frontier_phi_33_68_ladder_1;
        float frontier_phi_33_68_ladder_2;
        if ((_2166 > _2170) || ((_2166 < _2168) || ((_2165 > _2170) || ((_2165 < _2168) || ((_2164 < _2168) || (_2164 > _2170))))))
        {
            frontier_phi_33_68_ladder = 0.0;
            frontier_phi_33_68_ladder_1 = 0.0;
            frontier_phi_33_68_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2358 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2166, cbModelParam._m0[17u].z, fma(_2165, cbModelParam._m0[17u].y, _2164 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2166, cbModelParam._m0[18u].z, fma(_2165, cbModelParam._m0[18u].y, _2164 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2166, cbModelParam._m0[19u].z, fma(_2165, cbModelParam._m0[19u].y, _2164 * cbModelParam._m0[19u].x))), _1332);
            frontier_phi_33_68_ladder = _2358.y * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_1 = _2358.z * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_2 = _2358.x * cbModelParam._m0[1u].z;
        }
        _1422 = frontier_phi_33_68_ladder_2;
        _1424 = frontier_phi_33_68_ladder;
        _1426 = frontier_phi_33_68_ladder_1;
    }
    else
    {
        vec4 _1406 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_500, _501, _502), _1332);
        _1422 = _1406.x * cbModelParam._m0[1u].z;
        _1424 = _1406.y * cbModelParam._m0[1u].z;
        _1426 = _1406.z * cbModelParam._m0[1u].z;
    }
    float _1438 = _499 * 0.01200000010430812835693359375;
    float _1440 = _1438 * ((cbModelParam._m0[1u].w * (_1422 - _1325)) + _1325);
    float _1441 = _1438 * ((cbModelParam._m0[1u].w * (_1424 - _1327)) + _1327);
    float _1442 = _1438 * ((cbModelParam._m0[1u].w * (_1426 - _1329)) + _1329);
    float _1445 = fma(_1442, cbSceneParam._m0[89u].z, fma(_1441, cbSceneParam._m0[89u].y, _1440 * cbSceneParam._m0[89u].x));
    float _1448 = fma(_1442, cbSceneParam._m0[90u].z, fma(_1441, cbSceneParam._m0[90u].y, _1440 * cbSceneParam._m0[90u].x));
    float _1451 = fma(_1442, cbSceneParam._m0[91u].z, fma(_1441, cbSceneParam._m0[91u].y, _1440 * cbSceneParam._m0[91u].x));
    uvec4 _1461 = floatBitsToUint(cbInstanceData._m0[_473 + 5u]);
    uint _1463 = _1461.x * 14u;
    uint _1464 = _1463 + 13u;
    float _1469 = _499 + (-1.0);
    float _1472 = (cbLight._m0[_1464].x * _1469) + 1.0;
    float _1473 = (cbLight._m0[_1464].y * _1469) + 1.0;
    uint _1474 = _1463 + 5u;
    float _1480 = isnan(1.0) ? _1473 : (isnan(_1473) ? 1.0 : min(_1473, 1.0));
    uint _1484 = _1463 + 4u;
    float _1491 = isnan(1.0) ? _1472 : (isnan(_1472) ? 1.0 : min(_1472, 1.0));
    uint _1495 = _1463 | 1u;
    float _1506 = dot(vec3(cbLight._m0[_1463].xyz), vec3(0.0));
    float _1509 = dot(vec3(cbLight._m0[_1495].xyz), vec3(0.0));
    float _3241 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
    float _3252 = isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0));
    float _1514 = (isnan(1.0) ? _3241 : (isnan(_3241) ? 1.0 : min(_3241, 1.0))) * 0.3183098733425140380859375;
    float _1516 = (isnan(1.0) ? _3252 : (isnan(_3252) ? 1.0 : min(_3252, 1.0))) * 0.3183098733425140380859375;
    float _1523 = ((cbLight._m0[_1474].x * _1480) * _1516) + ((cbLight._m0[_1484].x * _1491) * _1514);
    float _1524 = ((_1480 * cbLight._m0[_1474].y) * _1516) + ((_1491 * cbLight._m0[_1484].y) * _1514);
    float _1525 = ((_1480 * cbLight._m0[_1474].z) * _1516) + ((_1491 * cbLight._m0[_1484].z) * _1514);
    uint _1526 = _1463 + 8u;
    float _1532 = cbLight._m0[_1463].x + _438;
    float _1533 = cbLight._m0[_1463].y + _439;
    float _1534 = cbLight._m0[_1463].z + _440;
    float _1538 = inversesqrt(dot(vec3(_1532, _1533, _1534), vec3(_1532, _1533, _1534)));
    float _1542 = dot(vec3(0.0), vec3(cbLight._m0[_1463].xyz));
    float _3263 = isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0));
    float _1545 = isnan(1.0) ? _3263 : (isnan(_3263) ? 1.0 : min(_3263, 1.0));
    float _1546 = dot(vec3(0.0), vec3(_438, _439, _440));
    float _3274 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
    float _1549 = isnan(1.0) ? _3274 : (isnan(_3274) ? 1.0 : min(_3274, 1.0));
    float _1550 = dot(vec3(cbLight._m0[_1463].xyz), vec3(_1532 * _1538, _1533 * _1538, _1534 * _1538));
    float _3285 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
    float _1561 = (exp2(log2(1.0 - (isnan(1.0) ? _3285 : (isnan(_3285) ? 1.0 : min(_3285, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1567 = (0.5 / ((_1545 + 9.9999999392252902907785028219223e-09) + _1549)) * _1545;
    float _3296 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
    float _1569 = (isnan(1.0) ? _3296 : (isnan(_3296) ? 1.0 : min(_3296, 1.0))) * 0.31831014156341552734375;
    uint _1580 = _1463 + 9u;
    float _1586 = cbLight._m0[_1495].x + _438;
    float _1587 = cbLight._m0[_1495].y + _439;
    float _1588 = cbLight._m0[_1495].z + _440;
    float _1592 = inversesqrt(dot(vec3(_1586, _1587, _1588), vec3(_1586, _1587, _1588)));
    float _1596 = dot(vec3(0.0), vec3(cbLight._m0[_1495].xyz));
    float _3307 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
    float _1599 = isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0));
    float _1600 = dot(vec3(cbLight._m0[_1495].xyz), vec3(_1586 * _1592, _1587 * _1592, _1588 * _1592));
    float _3318 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
    float _1609 = (exp2(log2(1.0 - (isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1613 = (0.5 / ((_1599 + 9.9999999392252902907785028219223e-09) + _1549)) * _1599;
    float _3329 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
    float _1615 = (isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0))) * 0.31831014156341552734375;
    float _1625 = (((_1609 * cbLight._m0[_1580].x) * _1615) * _1480) + (((_1561 * cbLight._m0[_1526].x) * _1569) * _1491);
    float _1626 = (((_1609 * cbLight._m0[_1580].y) * _1615) * _1480) + (((_1561 * cbLight._m0[_1526].y) * _1569) * _1491);
    float _1627 = (((_1609 * cbLight._m0[_1580].z) * _1615) * _1480) + (((_1561 * cbLight._m0[_1526].z) * _1569) * _1491);
    float _1743;
    float _1745;
    float _1747;
    float _1749;
    float _1751;
    float _1753;
    if (_1461.y == 0u)
    {
        float _1683 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1684 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1683;
        float _1685 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1683;
        float _1686 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1683;
        uvec4 _1698 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1699 = _1698.x;
        uint _1710 = uint((float(_1698.y) * floor(float(uint(cbSceneParam._m0[85u].y * _460) / _1699))) + floor(float(uint(cbSceneParam._m0[85u].x * _459) / _1699)));
        float _1720 = (log2(_1686 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1721 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        uint _1724 = uint(isnan(14.0) ? _1721 : (isnan(_1721) ? 14.0 : min(_1721, 14.0)));
        uvec4 _1729 = texelFetch(g_lightClusterGridBuffer, int(((_1724 << 2u) + (_1710 << 6u)) >> 2u));
        uint _1730 = _1729.x;
        uint _1731 = _1698.z;
        float _1821;
        float _1823;
        float _1825;
        float _1827;
        float _1829;
        float _1831;
        if (((((1u << ((_1731 >> 4u) & 15u)) + 4294967295u) & _1730) == 0u) || ((_1731 & 240u) == 0u))
        {
            _1821 = 0.0;
            _1823 = 0.0;
            _1825 = 0.0;
            _1827 = 0.0;
            _1829 = 0.0;
            _1831 = 0.0;
        }
        else
        {
            float _1822;
            float _1824;
            float _1826;
            float _1828;
            float _1830;
            float _1832;
            float _2004 = 0.0;
            float _2005 = 0.0;
            float _2006 = 0.0;
            float _2007 = 0.0;
            float _2008 = 0.0;
            float _2009 = 0.0;
            uint _2010 = 0u;
            uint _2019;
            bool _2020;
            for (;;)
            {
                _2019 = texelFetch(g_lightClassification, int((((_1724 << 5u) + (_1710 << 9u)) + (_2010 << 2u)) >> 2u)).x;
                _2020 = _2019 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2020)
                {
                    frontier_phi_63_pred = _2006;
                    frontier_phi_63_pred_1 = _2009;
                    frontier_phi_63_pred_2 = _2008;
                    frontier_phi_63_pred_3 = _2007;
                    frontier_phi_63_pred_4 = _2005;
                    frontier_phi_63_pred_5 = _2004;
                }
                else
                {
                    float _2200;
                    float _2201;
                    float _2202;
                    float _2203;
                    float _2204;
                    float _2205;
                    uint _2206;
                    _2200 = _2004;
                    _2201 = _2005;
                    _2202 = _2006;
                    _2203 = _2007;
                    _2204 = _2008;
                    _2205 = _2009;
                    _2206 = _2019;
                    float _2101;
                    float _2102;
                    float _2103;
                    float _2104;
                    float _2105;
                    float _2106;
                    for (;;)
                    {
                        uint _2210 = uint(findLSB(_2206)) + (_2010 << 5u);
                        uint _2207 = (_2206 + 4294967295u) & _2206;
                        uint _2212 = _2210 * 48u;
                        vec4 _2226 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2212)).x, texelFetch(g_PointLightRenderingBuffer, int(_2212 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2212 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2212 + 3u)).x));
                        uint _2232 = (_2210 * 48u) + 4u;
                        vec4 _2245 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2232)).x, texelFetch(g_PointLightRenderingBuffer, int(_2232 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2232 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2232 + 3u)).x));
                        uint _2251 = (_2210 * 48u) + 8u;
                        vec3 _2262 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2251)).x, texelFetch(g_PointLightRenderingBuffer, int(_2251 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2251 + 2u)).x));
                        float _2266 = _2226.x - _1684;
                        float _2267 = _2226.y - _1685;
                        float _2268 = _2226.z - _1686;
                        float _2269 = dot(vec3(_2266, _2267, _2268), vec3(_2266, _2267, _2268));
                        float _2272 = inversesqrt(_2269);
                        float _2281 = 1.0 - (_2269 * _2226.w);
                        float _3350 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
                        float _2282 = isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0));
                        float _2283 = sqrt(_2269) * _2245.w;
                        float _2286 = 1.39999997615814208984375 / (_2283 + 1.39999997615814208984375);
                        float _2287 = _2286 * _2286;
                        float _2290 = ((1.0 - _2287) * dot(vec3(0.0), vec3(_2272 * _2266, _2272 * _2267, _2272 * _2268))) + _2287;
                        float _2293 = _2283 * _2283;
                        float _2297 = ((isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0))) * _2282) / ((_2293 * 0.699999988079071044921875) + 1.0);
                        float _2301 = (-0.0) - _1684;
                        float _2302 = (-0.0) - _1685;
                        float _2303 = (-0.0) - _1686;
                        float _2307 = inversesqrt(dot(vec3(_2301, _2302, _2303), vec3(_2301, _2302, _2303)));
                        float _2311 = dot(vec3(0.0), vec3(_2307 * _2301, _2307 * _2302, _2307 * _2303));
                        float _3366 = isnan(0.0) ? _2311 : (isnan(_2311) ? 0.0 : max(_2311, 0.0));
                        float _3377 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
                        float _2315 = isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0));
                        float _2319 = (0.5 / (((isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0))) + 9.9999999392252902907785028219223e-09) + _2315)) * _2315;
                        float _3388 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
                        float _2328 = (((isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0))) * 3.1415927410125732421875) / ((_2293 * 2.1991131305694580078125) + 3.141590118408203125)) * _2282;
                        _2104 = (_2297 * _2245.x) + _2203;
                        _2105 = (_2297 * _2245.y) + _2204;
                        _2106 = (_2297 * _2245.z) + _2205;
                        _2101 = (_2328 * _2262.x) + _2200;
                        _2102 = (_2328 * _2262.y) + _2201;
                        _2103 = (_2328 * _2262.z) + _2202;
                        if (_2207 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2200 = _2101;
                            _2201 = _2102;
                            _2202 = _2103;
                            _2203 = _2104;
                            _2204 = _2105;
                            _2205 = _2106;
                            _2206 = _2207;
                        }
                    }
                    frontier_phi_63_pred = _2103;
                    frontier_phi_63_pred_1 = _2106;
                    frontier_phi_63_pred_2 = _2105;
                    frontier_phi_63_pred_3 = _2104;
                    frontier_phi_63_pred_4 = _2102;
                    frontier_phi_63_pred_5 = _2101;
                }
                _1826 = frontier_phi_63_pred;
                _1832 = frontier_phi_63_pred_1;
                _1830 = frontier_phi_63_pred_2;
                _1828 = frontier_phi_63_pred_3;
                _1824 = frontier_phi_63_pred_4;
                _1822 = frontier_phi_63_pred_5;
                uint _2011 = _2010 + 1u;
                if (_2011 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2004 = _1822;
                    _2005 = _1824;
                    _2006 = _1826;
                    _2007 = _1828;
                    _2008 = _1830;
                    _2009 = _1832;
                    _2010 = _2011;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1821 = _1822;
            _1823 = _1824;
            _1825 = _1826;
            _1827 = _1828;
            _1829 = _1830;
            _1831 = _1832;
        }
        uvec4 _1835 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1836 = _1835.z;
        uint _1838 = (_1836 >> 8u) & 15u;
        float _1975;
        float _1977;
        float _1979;
        float _1981;
        float _1983;
        float _1985;
        if (((4294967295u << _1838) & _1730) == 0u)
        {
            _1975 = _1821;
            _1977 = _1823;
            _1979 = _1825;
            _1981 = _1827;
            _1983 = _1829;
            _1985 = _1831;
        }
        else
        {
            float _2000 = inversesqrt(dot(vec3(_1684, _1685, _1686), vec3(_1684, _1685, _1686)));
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            float frontier_phi_52_53_ladder_3;
            float frontier_phi_52_53_ladder_4;
            float frontier_phi_52_53_ladder_5;
            if (_1838 < ((_1836 >> 12u) & 15u))
            {
                float _1976;
                float _1978;
                float _1980;
                float _1982;
                float _1984;
                float _1986;
                float _2183 = _1821;
                float _2184 = _1823;
                float _2185 = _1825;
                float _2186 = _1827;
                float _2187 = _1829;
                float _2188 = _1831;
                uint _2189 = _1838;
                uint _2198;
                bool _2199;
                for (;;)
                {
                    _2198 = texelFetch(g_lightClassification, int((((_1724 << 5u) + (_1710 << 9u)) + (_2189 << 2u)) >> 2u)).x;
                    _2199 = _2198 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2199)
                    {
                        frontier_phi_77_pred = _2188;
                        frontier_phi_77_pred_1 = _2187;
                        frontier_phi_77_pred_2 = _2186;
                        frontier_phi_77_pred_3 = _2185;
                        frontier_phi_77_pred_4 = _2184;
                        frontier_phi_77_pred_5 = _2183;
                    }
                    else
                    {
                        float _2363;
                        float _2364;
                        float _2365;
                        float _2366;
                        float _2367;
                        float _2368;
                        float _2612;
                        float _2613;
                        float _2614;
                        float _2615;
                        float _2616;
                        float _2617;
                        float _2376 = _2183;
                        float _2377 = _2184;
                        float _2378 = _2185;
                        float _2379 = _2186;
                        float _2380 = _2187;
                        float _2381 = _2188;
                        uint _2382 = _2198;
                        uint _2383;
                        vec4 _2408;
                        float _2409;
                        vec4 _2424;
                        vec3 _2436;
                        vec4 _2451;
                        vec4 _2466;
                        float _2512;
                        bool _2513;
                        for (;;)
                        {
                            uint _2393 = ((_2189 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2382));
                            _2383 = (_2382 + 4294967295u) & _2382;
                            uint _2395 = _2393 * 40u;
                            _2408 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2395)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2395 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2395 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2395 + 3u)).x));
                            _2409 = _2408.w;
                            uint _2411 = (_2393 * 40u) + 4u;
                            _2424 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2411)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2411 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2411 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2411 + 3u)).x));
                            uint _2426 = (_2393 * 40u) + 8u;
                            _2436 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2426)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2426 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2426 + 2u)).x));
                            uint _2438 = (_2393 * 40u) + 16u;
                            _2451 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2438)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2438 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2438 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2438 + 3u)).x));
                            uint _2453 = (_2393 * 40u) + 20u;
                            _2466 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2453)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2453 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2453 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2453 + 3u)).x));
                            uint _2468 = (_2393 * 40u) + 24u;
                            vec4 _2481 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2468)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2468 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2468 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2468 + 3u)).x));
                            uint _2487 = (_2393 * 40u) + 28u;
                            vec4 _2500 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2487)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2487 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2487 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2487 + 3u)).x));
                            _2512 = fma(_1686, _2500.z, fma(_1685, _2500.y, _2500.x * _1684)) + _2500.w;
                            _2513 = !((fma(_1686, _2481.z, fma(_1685, _2481.y, _2481.x * _1684)) + _2481.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2513)
                            {
                                float _2540 = _2408.x - _1684;
                                float _2541 = _2408.y - _1685;
                                float _2542 = _2408.z - _1686;
                                float _2543 = dot(vec3(_2540, _2541, _2542), vec3(_2540, _2541, _2542));
                                float _2546 = inversesqrt(_2543);
                                float _2547 = _2546 * _2540;
                                float _2548 = _2546 * _2541;
                                float _2549 = _2546 * _2542;
                                float _2553 = 1.0 - (_2543 / (_2409 * _2409));
                                float _3399 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
                                float _2554 = isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0));
                                float _2558 = sqrt(_2543) * _2424.w;
                                float _2560 = 1.39999997615814208984375 / (_2558 + 1.39999997615814208984375);
                                float _2561 = _2560 * _2560;
                                float _2562 = 1.0 - _2561;
                                float _2564 = (_2562 * dot(vec3(_2547, _2548, _2549), vec3(0.0))) + _2561;
                                float _2567 = _2558 * _2558;
                                float _2571 = (fma(_1686, _2451.z, fma(_1685, _2451.y, _2451.x * _1684)) + _2451.w) / _2512;
                                float _2572 = (fma(_1686, _2466.z, fma(_1685, _2466.y, _2466.x * _1684)) + _2466.w) / _2512;
                                float _2576 = 1.0 - dot(vec2(_2571, _2572), vec2(_2571, _2572));
                                float _3415 = isnan(0.0) ? _2576 : (isnan(_2576) ? 0.0 : max(_2576, 0.0));
                                float _2577 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
                                float _2578 = _2577 * (((isnan(0.0) ? _2564 : (isnan(_2564) ? 0.0 : max(_2564, 0.0))) * _2554) / ((_2567 * 0.699999988079071044921875) + 1.0));
                                float _2588 = dot(vec3(0.0), vec3((-0.0) - (_1684 * _2000), (-0.0) - (_1685 * _2000), (-0.0) - (_1686 * _2000)));
                                float _3426 = isnan(0.0) ? _2588 : (isnan(_2588) ? 0.0 : max(_2588, 0.0));
                                float _2596 = (_2562 * dot(vec3(0.0), vec3(_2547, _2548, _2549))) + _2561;
                                float _3437 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
                                float _2597 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
                                float _2601 = (0.5 / (((isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0))) + 9.9999999392252902907785028219223e-09) + _2597)) * _2597;
                                float _3448 = isnan(0.0) ? _2601 : (isnan(_2601) ? 0.0 : max(_2601, 0.0));
                                float _2608 = (_2577 * _2554) * (((isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0))) * 3.1415927410125732421875) / ((_2567 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_83_pred = _2578 * _2424.x;
                                frontier_phi_83_pred_1 = _2578 * _2424.z;
                                frontier_phi_83_pred_2 = _2578 * _2424.y;
                                frontier_phi_83_pred_3 = _2608 * _2436.z;
                                frontier_phi_83_pred_4 = _2608 * _2436.y;
                                frontier_phi_83_pred_5 = _2608 * _2436.x;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _2615 = frontier_phi_83_pred;
                            _2617 = frontier_phi_83_pred_1;
                            _2616 = frontier_phi_83_pred_2;
                            _2614 = frontier_phi_83_pred_3;
                            _2613 = frontier_phi_83_pred_4;
                            _2612 = frontier_phi_83_pred_5;
                            _2366 = _2615 + _2379;
                            _2367 = _2616 + _2380;
                            _2368 = _2617 + _2381;
                            _2363 = _2612 + _2376;
                            _2364 = _2613 + _2377;
                            _2365 = _2614 + _2378;
                            if (_2383 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2376 = _2363;
                                _2377 = _2364;
                                _2378 = _2365;
                                _2379 = _2366;
                                _2380 = _2367;
                                _2381 = _2368;
                                _2382 = _2383;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2368;
                        frontier_phi_77_pred_1 = _2367;
                        frontier_phi_77_pred_2 = _2366;
                        frontier_phi_77_pred_3 = _2365;
                        frontier_phi_77_pred_4 = _2364;
                        frontier_phi_77_pred_5 = _2363;
                    }
                    _1986 = frontier_phi_77_pred;
                    _1984 = frontier_phi_77_pred_1;
                    _1982 = frontier_phi_77_pred_2;
                    _1980 = frontier_phi_77_pred_3;
                    _1978 = frontier_phi_77_pred_4;
                    _1976 = frontier_phi_77_pred_5;
                    uint _2190 = _2189 + 1u;
                    if (_2190 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2183 = _1976;
                        _2184 = _1978;
                        _2185 = _1980;
                        _2186 = _1982;
                        _2187 = _1984;
                        _2188 = _1986;
                        _2189 = _2190;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _1978;
                frontier_phi_52_53_ladder_1 = _1986;
                frontier_phi_52_53_ladder_2 = _1984;
                frontier_phi_52_53_ladder_3 = _1982;
                frontier_phi_52_53_ladder_4 = _1980;
                frontier_phi_52_53_ladder_5 = _1976;
            }
            else
            {
                frontier_phi_52_53_ladder = _1823;
                frontier_phi_52_53_ladder_1 = _1831;
                frontier_phi_52_53_ladder_2 = _1829;
                frontier_phi_52_53_ladder_3 = _1827;
                frontier_phi_52_53_ladder_4 = _1825;
                frontier_phi_52_53_ladder_5 = _1821;
            }
            _1975 = frontier_phi_52_53_ladder_5;
            _1977 = frontier_phi_52_53_ladder;
            _1979 = frontier_phi_52_53_ladder_4;
            _1981 = frontier_phi_52_53_ladder_3;
            _1983 = frontier_phi_52_53_ladder_2;
            _1985 = frontier_phi_52_53_ladder_1;
        }
        float _1990 = isnan(1.0) ? _499 : (isnan(_499) ? 1.0 : min(_499, 1.0));
        _1743 = (_1990 * _1981) + _1523;
        _1745 = (_1990 * _1983) + _1524;
        _1747 = (_1990 * _1985) + _1525;
        _1749 = ((_1975 * 0.039999999105930328369140625) * _1990) + _1625;
        _1751 = ((_1977 * 0.039999999105930328369140625) * _1990) + _1626;
        _1753 = ((_1979 * 0.039999999105930328369140625) * _1990) + _1627;
    }
    else
    {
        _1743 = _1523;
        _1745 = _1524;
        _1747 = _1525;
        _1749 = _1625;
        _1751 = _1626;
        _1753 = _1627;
    }
    float _3464 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _3475 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _3486 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _1770 = ((isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0))) * (_1743 + ((isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0))) * _499))) + ((_1749 + ((isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0))) * _1233)) * cbPerFrame._m0[3u].x);
    float _1771 = ((isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0))) * (_1745 + ((isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0))) * _499))) + ((_1751 + ((isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0))) * _1233)) * cbPerFrame._m0[3u].x);
    float _1772 = ((isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0))) * (_1747 + ((isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0))) * _499))) + ((_1753 + ((isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0))) * _1233)) * cbPerFrame._m0[3u].x);
    float _1773 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
    float _1774 = isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0));
    float _1775 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
    uint _1776 = _473 + 6u;
    float _1784 = _459 / cbSceneParam._m0[86u].x;
    float _1785 = _460 / cbSceneParam._m0[86u].y;
    vec4 _1799 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1784, _1785, (log2((isnan(cbSceneParam._m0[77u].w) ? _433 : (isnan(_433) ? cbSceneParam._m0[77u].w : min(_433, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1801 = _1799.x;
    float _1802 = _1799.y;
    float _1803 = _1799.z;
    float _1804 = _1799.w;
    float _1884;
    float _1886;
    float _1888;
    float _1890;
    if (_433 > cbSceneParam._m0[78u].w)
    {
        float _1846 = isnan(_433) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _433 : min(cbSceneParam._m0[80u].w, _433));
        float _1847 = _1846 / _433;
        float _1858 = _1847 * _256;
        float _1859 = _257 * _1847;
        float _1860 = (-0.0) - _1859;
        float _1861 = _1847 * _258;
        float _1863 = (cbSceneParam._m0[77u].w * _1860) / _1846;
        float _1864 = _1863 + cbSceneParam._m0[79u].w;
        float _1865 = cbSceneParam._m0[79u].w - _1859;
        float _1871 = sqrt(((_1858 * _1858) + (_1859 * _1859)) + (_1861 * _1861));
        float _1874 = (1.0 - (cbSceneParam._m0[77u].w / _1846)) * _1871;
        float _1880 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1882 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2114;
        if (abs((_1860 - _1863) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2114 = ((((_1864 > 0.0) ? exp2(_1880 * _1864) : (2.0 - exp2(_1882 * _1864))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1874;
        }
        else
        {
            float _2033 = 1.0 / cbSceneParam._m0[80u].x;
            float _2034 = isnan(_1865) ? _1864 : (isnan(_1864) ? _1865 : max(_1864, _1865));
            float _2035 = isnan(_1865) ? _1864 : (isnan(_1864) ? _1865 : min(_1864, _1865));
            float _2044 = isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : min(_2034, 0.0));
            float _2045 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : min(_2035, 0.0));
            _2114 = ((abs(_1871 / _1860) * cbSceneParam._m0[80u].y) * ((((_2044 - _2045) * 2.0) - ((exp2(_1880 * (isnan(0.0) ? _2034 : (isnan(_2034) ? 0.0 : max(_2034, 0.0)))) - exp2(_1880 * (isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0))))) * _2033)) - ((exp2(_1882 * _2044) - exp2(_1882 * _2045)) * _2033))) + (_1874 * cbSceneParam._m0[80u].z);
        }
        vec4 _2116 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1784, _1785, 1.0), 0.0);
        float _2125 = exp2((_2114 * (-1.44269502162933349609375)) * (1.0 - _2116.w));
        float _2126 = log2(_2125);
        float _2142 = log2(_1804);
        _1884 = (exp2(_2142 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2126 * cbSceneParam._m0[78u].x)) * _2116.x) / cbSceneParam._m0[78u].x)) + _1801;
        _1886 = (exp2(_2142 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2126 * cbSceneParam._m0[78u].y)) * _2116.y) / cbSceneParam._m0[78u].y)) + _1802;
        _1888 = (exp2(_2142 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2126 * cbSceneParam._m0[78u].z)) * _2116.z) / cbSceneParam._m0[78u].z)) + _1803;
        _1890 = _2125 * _1804;
    }
    else
    {
        _1884 = _1801;
        _1886 = _1802;
        _1888 = _1803;
        _1890 = _1804;
    }
    bool _2152;
    vec4 _1900;
    vec4 _1923;
    float _1925;
    float _1929;
    float _1930;
    float _1931;
    float _1932;
    bool _1943;
    for (;;)
    {
        _1900 = cbMatDynParam._m0[0u];
        float _1902 = roundEven(_1900.y);
        bool _1903 = _1902 == 3.0;
        float _1905 = log2(_1890);
        float _1912 = exp2(_1905 * cbSceneParam._m0[78u].x) * _1773;
        float _1913 = exp2(_1905 * cbSceneParam._m0[78u].y) * _1774;
        float _1914 = exp2(_1905 * cbSceneParam._m0[78u].z) * _1775;
        float _1921 = _447 + (-0.5);
        _1923 = cbMtdParam._m0[1u];
        _1925 = _1923.y * _1921;
        float _1928 = (_1902 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _1929 = _1928 * (_1903 ? _1912 : (_1912 + (cbSceneParam._m0[72u].w * _1884)));
        _1930 = _1928 * (_1903 ? _1913 : (_1913 + (cbSceneParam._m0[72u].w * _1886)));
        _1931 = _1928 * (_1903 ? _1914 : (_1914 + (cbSceneParam._m0[72u].w * _1888)));
        _1932 = _1921 * 0.999000012874603271484375;
        _1943 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_1943)
        {
            if ((cbInstanceData._m0[_473 + 7u].x + _1932) < 0.5)
            {
                _2152 = true;
                break;
            }
        }
        uint _2068 = _475 + uint(_1900.w);
        if ((cbInstanceData._m0[_2068].w < 1.0) && ((cbInstanceData._m0[_2068].w + _1932) < 0.5))
        {
            _2152 = true;
            break;
        }
        if ((_1925 + 1.0) < _1923.x)
        {
            _2152 = true;
            break;
        }
        _2152 = false;
        break;
    }
    float _2333;
    if (_2152)
    {
        discard_state = true;
        _2333 = 0.0;
    }
    else
    {
        _2333 = cbInstanceData._m0[_1776].w;
    }
    SV_Target.x = _1929;
    SV_Target.y = _1930;
    SV_Target.z = _1931;
    SV_Target.w = _2333;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1776].w;
    discard_exit();
}


