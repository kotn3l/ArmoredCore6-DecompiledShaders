#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 2) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_12;
layout(set = 0, binding = 3) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _400;
float _3184;
float _3185;
float _3186;
float _3187;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _203 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _204 = _203 * _196;
    float _205 = _203 * _197;
    float _206 = _203 * _198;
    float _210 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _215 = _214 * TANGENT.x;
    float _216 = _214 * TANGENT.y;
    float _217 = _214 * TANGENT.z;
    float _262 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _272 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _262);
    float _273 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _262);
    float _274 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _262);
    vec4 _309 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _325 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _332 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _344 = cbMtdParam._m0[24u].w + _272;
    float _345 = cbMtdParam._m0[25u].x + _273;
    float _346 = cbMtdParam._m0[25u].y + _274;
    float _363 = (-0.0) - dot(vec3(_344, _345, _346), vec3(_325 * _204, _325 * _205, _325 * _206));
    float _364 = (-0.0) - dot(vec3(_344, _345, _346), vec3(_332 * _215, _332 * _216, _332 * _217));
    float _365 = (-0.0) - dot(vec3(_344, _345, _346), vec3((-0.0) - (NORMAL.x * _210), (-0.0) - (NORMAL.y * _210), (-0.0) - (NORMAL.z * _210)));
    float _369 = inversesqrt(dot(vec3(_363, _364, _365), vec3(_363, _364, _365)));
    float _370 = _369 * _365;
    float _375 = ((cbMtdParam._m0[21u].z * _363) * _369) + (((_309.x * 2.0) + (-1.0)) * cbMtdParam._m0[22u].x);
    float _376 = ((cbMtdParam._m0[21u].w * _364) * _369) + (((_309.y * 2.0) + (-1.0)) * cbMtdParam._m0[22u].y);
    float _379 = fract(cbMtdParam._m0[21u].z * TEXCOORD.x);
    float _380 = fract(cbMtdParam._m0[21u].w * TEXCOORD.y);
    float _398;
    float _401;
    float _403;
    if (_375 > 0.0)
    {
        float _384 = (1.0 - _379) / _375;
        _398 = _384;
        _401 = ((cbMtdParam._m0[18u].w + 1.0) - fract(_384 * _370)) * 0.16666667163372039794921875;
        _403 = (fract((_384 * _376) + _380) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_375 < 0.0)
        {
            float _399 = ((-0.0) - _379) / _375;
            frontier_phi_3_2_ladder = (fract(_399 * _370) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
            frontier_phi_3_2_ladder_1 = _399;
            frontier_phi_3_2_ladder_2 = (fract((_399 * _376) + _380) * 0.16666667163372039794921875) + 0.666666686534881591796875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _400;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _398 = frontier_phi_3_2_ladder_1;
        _401 = frontier_phi_3_2_ladder;
        _403 = frontier_phi_3_2_ladder_2;
    }
    float _429;
    float _431;
    float _433;
    if (_376 > 0.0)
    {
        float _416 = (1.0 - _380) / _376;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_416 < _398)
        {
            frontier_phi_8_5_ladder = (fract(_416 * _370) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_416 * _375) + _379) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _416;
        }
        else
        {
            frontier_phi_8_5_ladder = _403;
            frontier_phi_8_5_ladder_1 = _401;
            frontier_phi_8_5_ladder_2 = _398;
        }
        _429 = frontier_phi_8_5_ladder_2;
        _431 = frontier_phi_8_5_ladder_1;
        _433 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_376 < 0.0)
        {
            float _430 = ((-0.0) - _380) / _376;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_430 < _398)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_430 * _370) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_430 * _375) + _379) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _430;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _403;
                frontier_phi_8_6_ladder_9_ladder_1 = _401;
                frontier_phi_8_6_ladder_9_ladder_2 = _398;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _403;
            frontier_phi_8_6_ladder_1 = _401;
            frontier_phi_8_6_ladder_2 = _398;
        }
        _429 = frontier_phi_8_6_ladder_2;
        _431 = frontier_phi_8_6_ladder_1;
        _433 = frontier_phi_8_6_ladder;
    }
    float _437 = (_370 > 0.0) ? (cbMtdParam._m0[18u].z / _370) : 5000.0;
    float _450;
    float _451;
    if (_437 < _429)
    {
        _450 = ((_379 + cbMtdParam._m0[18u].w) + (_437 * _375)) * 0.16666667163372039794921875;
        _451 = (((_437 * _376) + _380) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _450 = _431;
        _451 = _433;
    }
    vec4 _453 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_450, _451));
    float _3196 = isnan(0.0) ? cbMtdParam._m0[17u].z : (isnan(cbMtdParam._m0[17u].z) ? 0.0 : max(cbMtdParam._m0[17u].z, 0.0));
    float _467 = isnan(1.0) ? _3196 : (isnan(_3196) ? 1.0 : min(_3196, 1.0));
    float _3207 = isnan(0.0) ? cbMtdParam._m0[17u].y : (isnan(cbMtdParam._m0[17u].y) ? 0.0 : max(cbMtdParam._m0[17u].y, 0.0));
    float _510 = ((_467 - ((1.0 - (isnan(1.0) ? _3207 : (isnan(_3207) ? 1.0 : min(_3207, 1.0)))) * (_467 + 1.0))) + (((cbMtdParam._m0[18u].y * texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[3u].w)).x) + (cbMtdParam._m0[17u].x * texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w)).x)) / cbMtdParam._m0[17u].w)) / _467;
    float _3218 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _511 = isnan(1.0) ? _3218 : (isnan(_3218) ? 1.0 : min(_3218, 1.0));
    float _513 = 3.0 - (_511 * 2.0);
    float _518 = _511 * _511;
    float _526 = (((_518 * (cbMtdParam._m0[15u].x - cbMtdParam._m0[13u].x)) * _513) + cbMtdParam._m0[13u].x) * _453.x;
    float _528 = (((_518 * (cbMtdParam._m0[15u].y - cbMtdParam._m0[13u].y)) * _513) + cbMtdParam._m0[13u].y) * _453.y;
    float _530 = (((_518 * (cbMtdParam._m0[15u].z - cbMtdParam._m0[13u].z)) * _513) + cbMtdParam._m0[13u].z) * _453.z;
    float _3229 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _3240 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _3251 = isnan(0.0) ? _530 : (isnan(_530) ? 0.0 : max(_530, 0.0));
    float _549 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _553 = inversesqrt(dot(vec3(_272, _273, _274), vec3(_272, _273, _274)));
    float _554 = _272 * _553;
    float _555 = _273 * _553;
    float _556 = _274 * _553;
    vec4 _561 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _563 = _561.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _663 = sqrt(((_272 * _272) + (_273 * _273)) + (_274 * _274));
        float _670 = (cbMatDynParam._m0[5u].x * _663) + cbMatDynParam._m0[5u].y;
        float _3262 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
        float _671 = isnan(1.0) ? _3262 : (isnan(_3262) ? 1.0 : min(_3262, 1.0));
        float _675 = (cbMatDynParam._m0[5u].z * _663) + cbMatDynParam._m0[5u].w;
        float _3273 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3273 : (isnan(_3273) ? 1.0 : min(_3273, 1.0))) - _671)) + _671) < ((_563 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _580 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _581 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _594 = uint(roundEven(NORMAL.w)) * 13u;
    uint _595 = _594 + 9u;
    uint _596 = _595 + uint(cbMatDynParam._m0[0u].w);
    float _602 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3229 : (isnan(_3229) ? 1.0 : min(_3229, 1.0)))) * cbInstanceData._m0[_596].x;
    float _603 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3240 : (isnan(_3240) ? 1.0 : min(_3240, 1.0)))) * cbInstanceData._m0[_596].y;
    float _604 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3251 : (isnan(_3251) ? 1.0 : min(_3251, 1.0)))) * cbInstanceData._m0[_596].z;
    float _3284 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _605 = isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0));
    float _3295 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _606 = isnan(1.0) ? _3295 : (isnan(_3295) ? 1.0 : min(_3295, 1.0));
    float _3306 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _607 = isnan(1.0) ? _3306 : (isnan(_3306) ? 1.0 : min(_3306, 1.0));
    vec4 _616 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _580, cbSceneParam._m0[86u].y * _581));
    float _619 = _616.x * TEXCOORD_4.z;
    float _620 = (-0.0) - _554;
    float _621 = (-0.0) - _555;
    float _622 = (-0.0) - _556;
    float _644 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _648 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _652 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _950;
    float _951;
    float _952;
    float _953;
    float _954;
    float _955;
    float _956;
    float _957;
    float _958;
    float _959;
    float _960;
    float _961;
    float _962;
    float _963;
    float _964;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _738 = (cbModelParam._m0[37u].x * ((((fma(_652, cbModelParam._m0[26u].z, fma(_648, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _644)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _740 = (cbModelParam._m0[37u].y * ((((fma(_652, cbModelParam._m0[27u].z, fma(_648, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _644)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _741 = (((((fma(_652, cbModelParam._m0[28u].z, fma(_648, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _644)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _744 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_738, _740, _741), 0.0);
        vec4 _751 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_738, _740, _741), 0.0);
        vec4 _758 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_738, _740, _741), 0.0);
        vec4 _765 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_738, _740, _741), 0.0);
        float _778 = exp2((_744.w + (-0.5)) * 20.0) * 2.0;
        float _779 = _778 * (_744.x + (-0.5));
        float _780 = _778 * (_744.y + (-0.5));
        float _781 = _778 * (_744.z + (-0.5));
        float _788 = exp2((_751.w + (-0.5)) * 20.0) * 2.0;
        float _789 = _788 * (_751.x + (-0.5));
        float _790 = _788 * (_751.y + (-0.5));
        float _791 = _788 * (_751.z + (-0.5));
        float _798 = exp2((_758.w + (-0.5)) * 20.0) * 2.0;
        float _799 = _798 * (_758.x + (-0.5));
        float _800 = _798 * (_758.y + (-0.5));
        float _801 = _798 * (_758.z + (-0.5));
        float _808 = exp2((_765.w + (-0.5)) * 20.0) * 2.0;
        float _809 = _808 * (_765.x + (-0.5));
        float _810 = _808 * (_765.y + (-0.5));
        float _811 = _808 * (_765.z + (-0.5));
        float _812 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        float _813 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _814 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _815 = _779 * 0.5;
        float _816 = _789 * 0.5;
        float _817 = _799 * 0.5;
        float _818 = dot(vec3(_815, _816, _817), vec3(_815, _816, _817));
        float _823 = (_818 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_818);
        float _832 = (dot(vec3(0.0), vec3(_823 * _815, _823 * _816, _823 * _817)) + 1.0) * 0.5;
        float _3332 = isnan(0.0) ? _832 : (isnan(_832) ? 0.0 : max(_832, 0.0));
        float _842 = sqrt(((_816 * _816) + (_815 * _815)) + (_817 * _817)) / (_812 + 9.9999997473787516355514526367188e-06);
        float _3343 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _843 = isnan(1.0) ? _3343 : (isnan(_3343) ? 1.0 : min(_3343, 1.0));
        float _844 = _843 * 2.0;
        float _848 = (1.0 - _843) / (_843 + 1.0);
        float _3354 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _849 = isnan(1.0) ? _3354 : (isnan(_3354) ? 1.0 : min(_3354, 1.0));
        float _858 = ((((1.0 - _849) * (_844 + 2.0)) * exp2(log2(isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0))) * (_844 + 1.0))) + _849) * _812;
        float _859 = _780 * 0.5;
        float _860 = _790 * 0.5;
        float _861 = _800 * 0.5;
        float _862 = dot(vec3(_859, _860, _861), vec3(_859, _860, _861));
        float _867 = (_862 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_862);
        float _875 = (dot(vec3(0.0), vec3(_867 * _859, _867 * _860, _867 * _861)) + 1.0) * 0.5;
        float _3365 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        float _884 = sqrt(((_860 * _860) + (_859 * _859)) + (_861 * _861)) / (_813 + 9.9999997473787516355514526367188e-06);
        float _3376 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _885 = isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0));
        float _886 = _885 * 2.0;
        float _890 = (1.0 - _885) / (_885 + 1.0);
        float _3387 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _891 = isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0));
        float _900 = ((((1.0 - _891) * (_886 + 2.0)) * exp2(log2(isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0))) * (_886 + 1.0))) + _891) * _813;
        float _901 = _781 * 0.5;
        float _902 = _791 * 0.5;
        float _903 = _801 * 0.5;
        float _904 = dot(vec3(_901, _902, _903), vec3(_901, _902, _903));
        float _909 = (_904 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_904);
        float _917 = (dot(vec3(0.0), vec3(_909 * _901, _909 * _902, _909 * _903)) + 1.0) * 0.5;
        float _3398 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
        float _926 = sqrt(((_902 * _902) + (_901 * _901)) + (_903 * _903)) / (_814 + 9.9999997473787516355514526367188e-06);
        float _3409 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _927 = isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0));
        float _928 = _927 * 2.0;
        float _932 = (1.0 - _927) / (_927 + 1.0);
        float _3420 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _933 = isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0));
        float _942 = ((((1.0 - _933) * (_928 + 2.0)) * exp2(log2(isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0))) * (_928 + 1.0))) + _933) * _814;
        _950 = _781;
        _951 = _780;
        _952 = _779;
        _953 = _791;
        _954 = _790;
        _955 = _789;
        _956 = _801;
        _957 = _800;
        _958 = _799;
        _959 = _814;
        _960 = _813;
        _961 = _812;
        _962 = cbModelParam._m0[36u].z * (isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0)));
        _963 = cbModelParam._m0[36u].z * (isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0)));
        _964 = cbModelParam._m0[36u].z * (isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0)));
    }
    else
    {
        _950 = _400;
        _951 = _400;
        _952 = _400;
        _953 = _400;
        _954 = _400;
        _955 = _400;
        _956 = _400;
        _957 = _400;
        _958 = _400;
        _959 = _400;
        _960 = _400;
        _961 = _400;
        _962 = 0.0;
        _963 = 0.0;
        _964 = 0.0;
    }
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1021 = (cbModelParam._m0[38u].x * ((((fma(_652, cbModelParam._m0[30u].z, fma(_648, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _644)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1022 = (cbModelParam._m0[38u].y * ((((fma(_652, cbModelParam._m0[31u].z, fma(_648, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _644)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1023 = (((((fma(_652, cbModelParam._m0[32u].z, fma(_648, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _644)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1025 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1021, _1022, _1023), 0.0);
        vec4 _1032 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1021, _1022, _1023), 0.0);
        vec4 _1039 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1021, _1022, _1023), 0.0);
        vec4 _1046 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1021, _1022, _1023), 0.0);
        float _1058 = exp2((_1025.w + (-0.5)) * 20.0) * 2.0;
        float _1059 = _1058 * (_1025.x + (-0.5));
        float _1060 = _1058 * (_1025.y + (-0.5));
        float _1061 = _1058 * (_1025.z + (-0.5));
        float _1068 = exp2((_1032.w + (-0.5)) * 20.0) * 2.0;
        float _1069 = _1068 * (_1032.x + (-0.5));
        float _1070 = _1068 * (_1032.y + (-0.5));
        float _1071 = _1068 * (_1032.z + (-0.5));
        float _1078 = exp2((_1039.w + (-0.5)) * 20.0) * 2.0;
        float _1079 = _1078 * (_1039.x + (-0.5));
        float _1080 = _1078 * (_1039.y + (-0.5));
        float _1081 = _1078 * (_1039.z + (-0.5));
        float _1088 = exp2((_1046.w + (-0.5)) * 20.0) * 2.0;
        float _1089 = _1088 * (_1046.x + (-0.5));
        float _1090 = _1088 * (_1046.y + (-0.5));
        float _1091 = _1088 * (_1046.z + (-0.5));
        float _1092 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1093 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1094 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1095 = _1059 * 0.5;
        float _1096 = _1069 * 0.5;
        float _1097 = _1079 * 0.5;
        float _1098 = dot(vec3(_1095, _1096, _1097), vec3(_1095, _1096, _1097));
        float _1103 = (_1098 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1098);
        float _1111 = (dot(vec3(0.0), vec3(_1103 * _1095, _1103 * _1096, _1103 * _1097)) + 1.0) * 0.5;
        float _3461 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1120 = sqrt(((_1096 * _1096) + (_1095 * _1095)) + (_1097 * _1097)) / (_1092 + 9.9999997473787516355514526367188e-06);
        float _3472 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0));
        float _1122 = _1121 * 2.0;
        float _1126 = (1.0 - _1121) / (_1121 + 1.0);
        float _3483 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
        float _1127 = isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0));
        float _1136 = ((((1.0 - _1127) * (_1122 + 2.0)) * exp2(log2(isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0))) * (_1122 + 1.0))) + _1127) * _1092;
        float _1137 = _1060 * 0.5;
        float _1138 = _1070 * 0.5;
        float _1139 = _1080 * 0.5;
        float _1140 = dot(vec3(_1137, _1138, _1139), vec3(_1137, _1138, _1139));
        float _1145 = (_1140 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1140);
        float _1153 = (dot(vec3(0.0), vec3(_1145 * _1137, _1145 * _1138, _1145 * _1139)) + 1.0) * 0.5;
        float _3494 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1162 = sqrt(((_1138 * _1138) + (_1137 * _1137)) + (_1139 * _1139)) / (_1093 + 9.9999997473787516355514526367188e-06);
        float _3505 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1163 = isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0));
        float _1164 = _1163 * 2.0;
        float _1168 = (1.0 - _1163) / (_1163 + 1.0);
        float _3516 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1169 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
        float _1178 = ((((1.0 - _1169) * (_1164 + 2.0)) * exp2(log2(isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0))) * (_1164 + 1.0))) + _1169) * _1093;
        float _1179 = _1061 * 0.5;
        float _1180 = _1071 * 0.5;
        float _1181 = _1081 * 0.5;
        float _1182 = dot(vec3(_1179, _1180, _1181), vec3(_1179, _1180, _1181));
        float _1187 = (_1182 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1182);
        float _1195 = (dot(vec3(0.0), vec3(_1187 * _1179, _1187 * _1180, _1187 * _1181)) + 1.0) * 0.5;
        float _3527 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1204 = sqrt(((_1180 * _1180) + (_1179 * _1179)) + (_1181 * _1181)) / (_1094 + 9.9999997473787516355514526367188e-06);
        float _3538 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
        float _1206 = _1205 * 2.0;
        float _1210 = (1.0 - _1205) / (_1205 + 1.0);
        float _3549 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
        float _1220 = ((((1.0 - _1211) * (_1206 + 2.0)) * exp2(log2(isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0))) * (_1206 + 1.0))) + _1211) * _1094;
        _1228 = _1061;
        _1229 = _1060;
        _1230 = _1059;
        _1231 = _1071;
        _1232 = _1070;
        _1233 = _1069;
        _1234 = _1081;
        _1235 = _1080;
        _1236 = _1079;
        _1237 = _1094;
        _1238 = _1093;
        _1239 = _1092;
        _1240 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0)));
        _1241 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0)));
        _1242 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0)));
    }
    else
    {
        _1228 = _400;
        _1229 = _400;
        _1230 = _400;
        _1231 = _400;
        _1232 = _400;
        _1233 = _400;
        _1234 = _400;
        _1235 = _400;
        _1236 = _400;
        _1237 = _400;
        _1238 = _400;
        _1239 = _400;
        _1240 = 0.0;
        _1241 = 0.0;
        _1242 = 0.0;
    }
    float _1252 = (cbModelParam._m0[1u].x * (_1240 - _962)) + _962;
    float _1253 = (cbModelParam._m0[1u].x * (_1241 - _963)) + _963;
    float _1254 = (cbModelParam._m0[1u].x * (_1242 - _964)) + _964;
    float _1275 = fma(_1254, cbSceneParam._m0[89u].z, fma(_1253, cbSceneParam._m0[89u].y, _1252 * cbSceneParam._m0[89u].x));
    float _1278 = fma(_1254, cbSceneParam._m0[90u].z, fma(_1253, cbSceneParam._m0[90u].y, _1252 * cbSceneParam._m0[90u].x));
    float _1281 = fma(_1254, cbSceneParam._m0[91u].z, fma(_1253, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1252));
    float _1296 = _554 * (-0.5);
    float _1297 = _555 * (-0.5);
    float _1298 = _556 * (-0.5);
    float _1299 = dot(vec4(_1296, _1297, _1298, 1.0), vec4(_1230, _1233, _1236, _1239));
    float _1302 = dot(vec4(_1296, _1297, _1298, 1.0), vec4(_1229, _1232, _1235, _1238));
    float _1305 = dot(vec4(_1296, _1297, _1298, 1.0), vec4(_1228, _1231, _1234, _1237));
    float _1339;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1312 = dot(vec4(_1296, _1297, _1298, 1.0), vec4(_950, _953, _956, _959));
        float _1316 = dot(vec4(_1296, _1297, _1298, 1.0), vec4(_951, _954, _957, _960));
        float _1320 = dot(vec4(_1296, _1297, _1298, 1.0), vec4(_952, _955, _958, _961));
        float _1327 = dot(vec4(cbModelParam._m0[39u]), vec4(_1296, _1297, _1298, 1.0));
        _1339 = dot(vec3(isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)), isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)), isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1327) ? 0.0 : (isnan(0.0) ? _1327 : max(0.0, _1327))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1339 = 1.0;
    }
    float _1350;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1341 = dot(vec4(cbModelParam._m0[40u]), vec4(_1296, _1297, _1298, 1.0));
        _1350 = dot(vec3(isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)), isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)), isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1341) ? 0.0 : (isnan(0.0) ? _1341 : max(0.0, _1341))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1350 = 1.0;
    }
    float _1354 = (_1350 * cbModelParam._m0[1u].x) + (_1339 * (1.0 - cbModelParam._m0[1u].x));
    float _1363 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1445;
    float _1447;
    float _1449;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1412 = fma(_652, cbModelParam._m0[13u].z, fma(_648, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _644)) + cbModelParam._m0[13u].w;
        float _1416 = fma(_652, cbModelParam._m0[14u].z, fma(_648, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _644)) + cbModelParam._m0[14u].w;
        float _1420 = fma(_652, cbModelParam._m0[15u].z, fma(_648, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _644)) + cbModelParam._m0[15u].w;
        float _1423 = fma(_622, cbModelParam._m0[13u].z, fma(_621, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _620));
        float _1426 = fma(_622, cbModelParam._m0[14u].z, fma(_621, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _620));
        float _1429 = fma(_622, cbModelParam._m0[15u].z, fma(_621, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _620));
        float _1455;
        if (_1423 > 0.0)
        {
            _1455 = abs((1.0 - _1412) / _1423);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_1423 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_1412 + 1.0) / _1423);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1455 = frontier_phi_29_27_ladder;
        }
        float _1626;
        if (_1426 > 0.0)
        {
            _1626 = abs((1.0 - _1416) / _1426);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1426 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1416 + 1.0) / _1426);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _1626 = frontier_phi_38_34_ladder;
        }
        float _2021;
        if (_1429 > 0.0)
        {
            _2021 = abs((1.0 - _1420) / _1429);
        }
        else
        {
            float frontier_phi_50_45_ladder;
            if (_1429 < 0.0)
            {
                frontier_phi_50_45_ladder = abs((_1420 + 1.0) / _1429);
            }
            else
            {
                frontier_phi_50_45_ladder = 5000.0;
            }
            _2021 = frontier_phi_50_45_ladder;
        }
        float _2023 = isnan(_1626) ? _1455 : (isnan(_1455) ? _1626 : min(_1455, _1626));
        float _2024 = isnan(_2021) ? _2023 : (isnan(_2023) ? _2021 : min(_2023, _2021));
        float _2028 = (_2024 * _1423) + _1412;
        float _2029 = (_2024 * _1426) + _1416;
        float _2030 = (_2024 * _1429) + _1420;
        float _2031 = _2024 * 9.9999997473787516355514526367188e-05;
        float _2033 = (-1.0) - _2031;
        float _2035 = _2031 + 1.0;
        float frontier_phi_28_50_ladder;
        float frontier_phi_28_50_ladder_1;
        float frontier_phi_28_50_ladder_2;
        if ((_2030 > _2035) || ((_2030 < _2033) || ((_2029 > _2035) || ((_2029 < _2033) || ((_2028 < _2033) || (_2028 > _2035))))))
        {
            frontier_phi_28_50_ladder = 0.0;
            frontier_phi_28_50_ladder_1 = 0.0;
            frontier_phi_28_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2264 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2030, cbModelParam._m0[9u].z, fma(_2029, cbModelParam._m0[9u].y, _2028 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2030, cbModelParam._m0[10u].z, fma(_2029, cbModelParam._m0[10u].y, _2028 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2030, cbModelParam._m0[11u].z, fma(_2029, cbModelParam._m0[11u].y, _2028 * cbModelParam._m0[11u].x))), _1363);
            frontier_phi_28_50_ladder = _2264.z * cbModelParam._m0[1u].y;
            frontier_phi_28_50_ladder_1 = _2264.y * cbModelParam._m0[1u].y;
            frontier_phi_28_50_ladder_2 = _2264.x * cbModelParam._m0[1u].y;
        }
        _1445 = frontier_phi_28_50_ladder_2;
        _1447 = frontier_phi_28_50_ladder_1;
        _1449 = frontier_phi_28_50_ladder;
    }
    else
    {
        vec4 _1433 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_620, _621, _622), _1363);
        _1445 = _1433.x * cbModelParam._m0[1u].y;
        _1447 = _1433.y * cbModelParam._m0[1u].y;
        _1449 = _1433.z * cbModelParam._m0[1u].y;
    }
    float _1452 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1541;
    float _1543;
    float _1545;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1505 = fma(_652, cbModelParam._m0[21u].z, fma(_648, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _644)) + cbModelParam._m0[21u].w;
        float _1509 = fma(_652, cbModelParam._m0[22u].z, fma(_648, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _644)) + cbModelParam._m0[22u].w;
        float _1513 = fma(_652, cbModelParam._m0[23u].z, fma(_648, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _644)) + cbModelParam._m0[23u].w;
        float _1516 = fma(_622, cbModelParam._m0[21u].z, fma(_621, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _620));
        float _1519 = fma(_622, cbModelParam._m0[22u].z, fma(_621, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _620));
        float _1522 = fma(_622, cbModelParam._m0[23u].z, fma(_621, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _620));
        float _1631;
        if (_1516 > 0.0)
        {
            _1631 = abs((1.0 - _1505) / _1516);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1516 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1505 + 1.0) / _1516);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _1631 = frontier_phi_40_36_ladder;
        }
        float _2048;
        if (_1519 > 0.0)
        {
            _2048 = abs((1.0 - _1509) / _1519);
        }
        else
        {
            float frontier_phi_52_47_ladder;
            if (_1519 < 0.0)
            {
                frontier_phi_52_47_ladder = abs((_1509 + 1.0) / _1519);
            }
            else
            {
                frontier_phi_52_47_ladder = 5000.0;
            }
            _2048 = frontier_phi_52_47_ladder;
        }
        float _2394;
        if (_1522 > 0.0)
        {
            _2394 = abs((1.0 - _1513) / _1522);
        }
        else
        {
            float frontier_phi_64_59_ladder;
            if (_1522 < 0.0)
            {
                frontier_phi_64_59_ladder = abs((_1513 + 1.0) / _1522);
            }
            else
            {
                frontier_phi_64_59_ladder = 5000.0;
            }
            _2394 = frontier_phi_64_59_ladder;
        }
        float _2396 = isnan(_2048) ? _1631 : (isnan(_1631) ? _2048 : min(_1631, _2048));
        float _2397 = isnan(_2394) ? _2396 : (isnan(_2396) ? _2394 : min(_2396, _2394));
        float _2401 = (_2397 * _1516) + _1505;
        float _2402 = (_2397 * _1519) + _1509;
        float _2403 = (_2397 * _1522) + _1513;
        float _2404 = _2397 * 9.9999997473787516355514526367188e-05;
        float _2405 = (-1.0) - _2404;
        float _2407 = _2404 + 1.0;
        float frontier_phi_37_64_ladder;
        float frontier_phi_37_64_ladder_1;
        float frontier_phi_37_64_ladder_2;
        if ((_2403 > _2407) || ((_2403 < _2405) || ((_2402 > _2407) || ((_2402 < _2405) || ((_2401 < _2405) || (_2401 > _2407))))))
        {
            frontier_phi_37_64_ladder = 0.0;
            frontier_phi_37_64_ladder_1 = 0.0;
            frontier_phi_37_64_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2537 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2403, cbModelParam._m0[17u].z, fma(_2402, cbModelParam._m0[17u].y, _2401 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2403, cbModelParam._m0[18u].z, fma(_2402, cbModelParam._m0[18u].y, _2401 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2403, cbModelParam._m0[19u].z, fma(_2402, cbModelParam._m0[19u].y, _2401 * cbModelParam._m0[19u].x))), _1452);
            frontier_phi_37_64_ladder = _2537.z * cbModelParam._m0[1u].z;
            frontier_phi_37_64_ladder_1 = _2537.y * cbModelParam._m0[1u].z;
            frontier_phi_37_64_ladder_2 = _2537.x * cbModelParam._m0[1u].z;
        }
        _1541 = frontier_phi_37_64_ladder_2;
        _1543 = frontier_phi_37_64_ladder_1;
        _1545 = frontier_phi_37_64_ladder;
    }
    else
    {
        vec4 _1525 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_620, _621, _622), _1452);
        _1541 = _1525.x * cbModelParam._m0[1u].z;
        _1543 = _1525.y * cbModelParam._m0[1u].z;
        _1545 = _1525.z * cbModelParam._m0[1u].z;
    }
    float _1557 = _619 * 0.01200000010430812835693359375;
    float _1559 = _1557 * ((cbModelParam._m0[1u].w * (_1541 - _1445)) + _1445);
    float _1560 = _1557 * ((cbModelParam._m0[1u].w * (_1543 - _1447)) + _1447);
    float _1561 = _1557 * ((cbModelParam._m0[1u].w * (_1545 - _1449)) + _1449);
    float _1564 = fma(_1561, cbSceneParam._m0[89u].z, fma(_1560, cbSceneParam._m0[89u].y, _1559 * cbSceneParam._m0[89u].x));
    float _1567 = fma(_1561, cbSceneParam._m0[90u].z, fma(_1560, cbSceneParam._m0[90u].y, _1559 * cbSceneParam._m0[90u].x));
    float _1570 = fma(_1561, cbSceneParam._m0[91u].z, fma(_1560, cbSceneParam._m0[91u].y, _1559 * cbSceneParam._m0[91u].x));
    float _1605 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1609 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1613 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1617 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1618 = _1605 / _1617;
    float _1619 = _1609 / _1617;
    float _1620 = _1613 / _1617;
    float _1768;
    float _1769;
    float _1770;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1647 = ((uint(_1620 > cbSceneParam._m0[59u].y) + uint(_1620 > cbSceneParam._m0[59u].x)) + uint(_1620 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1648 = _1647 + 43u;
        uint _1656 = _1647 + 44u;
        uint _1664 = _1647 + 45u;
        uint _1672 = _1647 + 46u;
        float _1683 = fma(_1617, cbSceneParam._m0[_1648].w, fma(_1613, cbSceneParam._m0[_1648].z, fma(_1609, cbSceneParam._m0[_1648].y, _1605 * cbSceneParam._m0[_1648].x)));
        float _1687 = fma(_1617, cbSceneParam._m0[_1656].w, fma(_1613, cbSceneParam._m0[_1656].z, fma(_1609, cbSceneParam._m0[_1656].y, _1605 * cbSceneParam._m0[_1656].x)));
        float _1695 = fma(_1617, cbSceneParam._m0[_1672].w, fma(_1613, cbSceneParam._m0[_1672].z, fma(_1609, cbSceneParam._m0[_1672].y, _1605 * cbSceneParam._m0[_1672].x)));
        float _1700 = cbSceneParam._m0[33u].z * _1695;
        float _1702 = cbSceneParam._m0[33u].w * _1695;
        float _1705 = fma(_1617, cbSceneParam._m0[_1664].w, fma(_1613, cbSceneParam._m0[_1664].z, fma(_1609, cbSceneParam._m0[_1664].y, _1605 * cbSceneParam._m0[_1664].x))) / _1695;
        float _1753 = (cbSceneParam._m0[33u].x - sqrt(((_1619 * _1619) + (_1618 * _1618)) + (_1620 * _1620))) * cbSceneParam._m0[33u].y;
        float _3675 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
        float _1761 = (isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1700 + _1683) / _1695, (_1702 + _1687) / _1695), _1705), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1702 + _1683) / _1695, (_1687 - _1700) / _1695), _1705), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1683 - _1700) / _1695, (_1687 - _1702) / _1695), _1705), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1683 - _1702) / _1695, (_1700 + _1687) / _1695), _1705), 0.0)).x), vec4(0.25)));
        _1768 = 1.0 - (_1761 * cbSceneParam._m0[34u].x);
        _1769 = 1.0 - (_1761 * cbSceneParam._m0[34u].y);
        _1770 = 1.0 - (_1761 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1768 = 1.0;
        _1769 = 1.0;
        _1770 = 1.0;
    }
    float _1834;
    float _1836;
    float _1838;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1822 = fma(_1617, cbSceneParam._m0[63u].w, fma(_1613, cbSceneParam._m0[63u].z, fma(_1609, cbSceneParam._m0[63u].y, _1605 * cbSceneParam._m0[63u].x)));
        float _1823 = fma(_1617, cbSceneParam._m0[60u].w, fma(_1613, cbSceneParam._m0[60u].z, fma(_1609, cbSceneParam._m0[60u].y, _1605 * cbSceneParam._m0[60u].x))) / _1822;
        float _1824 = fma(_1617, cbSceneParam._m0[61u].w, fma(_1613, cbSceneParam._m0[61u].z, fma(_1609, cbSceneParam._m0[61u].y, _1605 * cbSceneParam._m0[61u].x))) / _1822;
        float frontier_phi_49_48_ladder;
        float frontier_phi_49_48_ladder_1;
        float frontier_phi_49_48_ladder_2;
        if ((((_1823 >= cbSceneParam._m0[64u].x) && (_1824 >= cbSceneParam._m0[64u].y)) && (_1823 <= cbSceneParam._m0[64u].z)) && (_1824 <= cbSceneParam._m0[64u].w))
        {
            float _2061 = fma(_1617, cbSceneParam._m0[62u].w, fma(_1613, cbSceneParam._m0[62u].z, fma(_1609, cbSceneParam._m0[62u].y, _1605 * cbSceneParam._m0[62u].x))) / _1822;
            float _2065 = isnan(cbSceneParam._m0[41u].w) ? _2061 : (isnan(_2061) ? cbSceneParam._m0[41u].w : max(_2061, cbSceneParam._m0[41u].w));
            float _2108 = (cbSceneParam._m0[33u].x - sqrt(((_1619 * _1619) + (_1618 * _1618)) + (_1620 * _1620))) * cbSceneParam._m0[33u].y;
            float _3691 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
            float _2115 = (isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1823, cbSceneParam._m0[33u].w + _1824), _2065), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1823, _1824 - cbSceneParam._m0[33u].z), _2065), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1823 - cbSceneParam._m0[33u].z, _1824 - cbSceneParam._m0[33u].w), _2065), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1823 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1824), _2065), 0.0)).x), vec4(0.25)));
            float _2119 = 1.0 - (_2115 * cbSceneParam._m0[34u].x);
            float _2120 = 1.0 - (_2115 * cbSceneParam._m0[34u].y);
            float _2121 = 1.0 - (_2115 * cbSceneParam._m0[34u].z);
            frontier_phi_49_48_ladder = isnan(_2121) ? _1770 : (isnan(_1770) ? _2121 : min(_1770, _2121));
            frontier_phi_49_48_ladder_1 = isnan(_2120) ? _1769 : (isnan(_1769) ? _2120 : min(_1769, _2120));
            frontier_phi_49_48_ladder_2 = isnan(_2119) ? _1768 : (isnan(_1768) ? _2119 : min(_1768, _2119));
        }
        else
        {
            frontier_phi_49_48_ladder = _1770;
            frontier_phi_49_48_ladder_1 = _1769;
            frontier_phi_49_48_ladder_2 = _1768;
        }
        _1834 = frontier_phi_49_48_ladder_2;
        _1836 = frontier_phi_49_48_ladder_1;
        _1838 = frontier_phi_49_48_ladder;
    }
    else
    {
        _1834 = _1768;
        _1836 = _1769;
        _1838 = _1770;
    }
    uvec4 _1843 = floatBitsToUint(cbInstanceData._m0[_594 + 5u]);
    uint _1845 = _1843.x * 14u;
    uint _1846 = _1845 + 13u;
    float _1851 = _619 + (-1.0);
    float _1854 = (cbLight._m0[_1846].x * _1851) + 1.0;
    float _1855 = (cbLight._m0[_1846].y * _1851) + 1.0;
    uint _1856 = _1845 + 5u;
    float _1862 = isnan(1.0) ? _1855 : (isnan(_1855) ? 1.0 : min(_1855, 1.0));
    uint _1866 = _1845 + 4u;
    float _1876 = isnan(1.0) ? _1854 : (isnan(_1854) ? 1.0 : min(_1854, 1.0));
    uint _1880 = _1845 | 1u;
    float _1891 = dot(vec3(cbLight._m0[_1845].xyz), vec3(0.0));
    float _1894 = dot(vec3(cbLight._m0[_1880].xyz), vec3(0.0));
    float _3727 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
    float _3738 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
    float _1899 = (isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0))) * 0.3183098733425140380859375;
    float _1901 = (isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0))) * 0.3183098733425140380859375;
    float _1908 = ((cbLight._m0[_1856].x * _1862) * _1901) + (((cbLight._m0[_1866].x * _1834) * _1876) * _1899);
    float _1909 = ((_1862 * cbLight._m0[_1856].y) * _1901) + (((cbLight._m0[_1866].y * _1836) * _1876) * _1899);
    float _1910 = ((_1862 * cbLight._m0[_1856].z) * _1901) + (((cbLight._m0[_1866].z * _1838) * _1876) * _1899);
    uint _1911 = _1845 + 8u;
    float _1917 = cbLight._m0[_1845].x + _554;
    float _1918 = cbLight._m0[_1845].y + _555;
    float _1919 = cbLight._m0[_1845].z + _556;
    float _1923 = inversesqrt(dot(vec3(_1917, _1918, _1919), vec3(_1917, _1918, _1919)));
    float _1927 = dot(vec3(0.0), vec3(cbLight._m0[_1845].xyz));
    float _3749 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
    float _1930 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
    float _1931 = dot(vec3(0.0), vec3(_554, _555, _556));
    float _3760 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
    float _1934 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
    float _1935 = dot(vec3(cbLight._m0[_1845].xyz), vec3(_1917 * _1923, _1918 * _1923, _1919 * _1923));
    float _3771 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
    float _1946 = (exp2(log2(1.0 - (isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1952 = (0.5 / ((_1930 + 9.9999999392252902907785028219223e-09) + _1934)) * _1930;
    float _3782 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
    float _1954 = (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0))) * 0.31831014156341552734375;
    uint _1968 = _1845 + 9u;
    float _1974 = cbLight._m0[_1880].x + _554;
    float _1975 = cbLight._m0[_1880].y + _555;
    float _1976 = cbLight._m0[_1880].z + _556;
    float _1980 = inversesqrt(dot(vec3(_1974, _1975, _1976), vec3(_1974, _1975, _1976)));
    float _1984 = dot(vec3(0.0), vec3(cbLight._m0[_1880].xyz));
    float _3793 = isnan(0.0) ? _1984 : (isnan(_1984) ? 0.0 : max(_1984, 0.0));
    float _1987 = isnan(1.0) ? _3793 : (isnan(_3793) ? 1.0 : min(_3793, 1.0));
    float _1988 = dot(vec3(cbLight._m0[_1880].xyz), vec3(_1974 * _1980, _1975 * _1980, _1976 * _1980));
    float _3804 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
    float _1997 = (exp2(log2(1.0 - (isnan(1.0) ? _3804 : (isnan(_3804) ? 1.0 : min(_3804, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2001 = (0.5 / ((_1987 + 9.9999999392252902907785028219223e-09) + _1934)) * _1987;
    float _3815 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
    float _2003 = (isnan(1.0) ? _3815 : (isnan(_3815) ? 1.0 : min(_3815, 1.0))) * 0.31831014156341552734375;
    float _2013 = (((_1997 * cbLight._m0[_1968].x) * _2003) * _1862) + ((((cbLight._m0[_1911].x * _1834) * _1946) * _1954) * _1876);
    float _2014 = (((_1997 * cbLight._m0[_1968].y) * _2003) * _1862) + ((((cbLight._m0[_1911].y * _1836) * _1946) * _1954) * _1876);
    float _2015 = (((_1997 * cbLight._m0[_1968].z) * _2003) * _1862) + ((((cbLight._m0[_1911].z * _1838) * _1946) * _1954) * _1876);
    float _2178;
    float _2180;
    float _2182;
    float _2184;
    float _2186;
    float _2188;
    if (_1843.y == 0u)
    {
        uvec4 _2133 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2134 = _2133.x;
        uint _2145 = uint((float(_2133.y) * floor(float(uint(cbSceneParam._m0[85u].y * _581) / _2134))) + floor(float(uint(cbSceneParam._m0[85u].x * _580) / _2134)));
        float _2155 = (log2(_1620 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2156 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
        uint _2159 = uint(isnan(14.0) ? _2156 : (isnan(_2156) ? 14.0 : min(_2156, 14.0)));
        uvec4 _2164 = texelFetch(g_lightClusterGridBuffer, int(((_2159 << 2u) + (_2145 << 6u)) >> 2u));
        uint _2165 = _2164.x;
        uint _2166 = _2133.z;
        float _2273;
        float _2275;
        float _2277;
        float _2279;
        float _2281;
        float _2283;
        if (((((1u << ((_2166 >> 4u) & 15u)) + 4294967295u) & _2165) == 0u) || ((_2166 & 240u) == 0u))
        {
            _2273 = 0.0;
            _2275 = 0.0;
            _2277 = 0.0;
            _2279 = 0.0;
            _2281 = 0.0;
            _2283 = 0.0;
        }
        else
        {
            float _2274;
            float _2276;
            float _2278;
            float _2280;
            float _2282;
            float _2284;
            float _2449 = 0.0;
            float _2450 = 0.0;
            float _2451 = 0.0;
            float _2452 = 0.0;
            float _2453 = 0.0;
            float _2454 = 0.0;
            uint _2455 = 0u;
            uint _2464;
            bool _2465;
            for (;;)
            {
                _2464 = texelFetch(g_lightClassification, int((((_2159 << 5u) + (_2145 << 9u)) + (_2455 << 2u)) >> 2u)).x;
                _2465 = _2464 == 0u;
                float frontier_phi_75_pred;
                float frontier_phi_75_pred_1;
                float frontier_phi_75_pred_2;
                float frontier_phi_75_pred_3;
                float frontier_phi_75_pred_4;
                float frontier_phi_75_pred_5;
                if (_2465)
                {
                    frontier_phi_75_pred = _2452;
                    frontier_phi_75_pred_1 = _2454;
                    frontier_phi_75_pred_2 = _2453;
                    frontier_phi_75_pred_3 = _2451;
                    frontier_phi_75_pred_4 = _2450;
                    frontier_phi_75_pred_5 = _2449;
                }
                else
                {
                    float _2615;
                    float _2616;
                    float _2617;
                    float _2618;
                    float _2619;
                    float _2620;
                    uint _2621;
                    _2615 = _2449;
                    _2616 = _2450;
                    _2617 = _2451;
                    _2618 = _2452;
                    _2619 = _2453;
                    _2620 = _2454;
                    _2621 = _2464;
                    float _2542;
                    float _2543;
                    float _2544;
                    float _2545;
                    float _2546;
                    float _2547;
                    for (;;)
                    {
                        uint _2625 = uint(findLSB(_2621)) + (_2455 << 5u);
                        uint _2622 = (_2621 + 4294967295u) & _2621;
                        uint _2627 = _2625 * 48u;
                        vec4 _2641 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2627)).x, texelFetch(g_PointLightRenderingBuffer, int(_2627 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2627 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2627 + 3u)).x));
                        uint _2647 = (_2625 * 48u) + 4u;
                        vec4 _2660 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2647)).x, texelFetch(g_PointLightRenderingBuffer, int(_2647 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2647 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2647 + 3u)).x));
                        uint _2666 = (_2625 * 48u) + 8u;
                        vec3 _2677 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2666)).x, texelFetch(g_PointLightRenderingBuffer, int(_2666 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2666 + 2u)).x));
                        float _2681 = _2641.x - _1618;
                        float _2682 = _2641.y - _1619;
                        float _2683 = _2641.z - _1620;
                        float _2684 = dot(vec3(_2681, _2682, _2683), vec3(_2681, _2682, _2683));
                        float _2687 = inversesqrt(_2684);
                        float _2696 = 1.0 - (_2684 * _2641.w);
                        float _3836 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
                        float _2697 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
                        float _2698 = sqrt(_2684) * _2660.w;
                        float _2701 = 1.39999997615814208984375 / (_2698 + 1.39999997615814208984375);
                        float _2702 = _2701 * _2701;
                        float _2705 = ((1.0 - _2702) * dot(vec3(0.0), vec3(_2687 * _2681, _2687 * _2682, _2687 * _2683))) + _2702;
                        float _2708 = _2698 * _2698;
                        float _2712 = ((isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0))) * _2697) / ((_2708 * 0.699999988079071044921875) + 1.0);
                        float _2716 = (-0.0) - _1618;
                        float _2717 = (-0.0) - _1619;
                        float _2718 = (-0.0) - _1620;
                        float _2722 = inversesqrt(dot(vec3(_2716, _2717, _2718), vec3(_2716, _2717, _2718)));
                        float _2726 = dot(vec3(0.0), vec3(_2722 * _2716, _2722 * _2717, _2722 * _2718));
                        float _3852 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
                        float _3863 = isnan(0.0) ? _2705 : (isnan(_2705) ? 0.0 : max(_2705, 0.0));
                        float _2730 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
                        float _2734 = (0.5 / (((isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) + 9.9999999392252902907785028219223e-09) + _2730)) * _2730;
                        float _3874 = isnan(0.0) ? _2734 : (isnan(_2734) ? 0.0 : max(_2734, 0.0));
                        float _2743 = (((isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0))) * 3.1415927410125732421875) / ((_2708 * 2.1991131305694580078125) + 3.141590118408203125)) * _2697;
                        _2545 = (_2712 * _2660.x) + _2618;
                        _2546 = (_2712 * _2660.y) + _2619;
                        _2547 = (_2712 * _2660.z) + _2620;
                        _2542 = (_2743 * _2677.x) + _2615;
                        _2543 = (_2743 * _2677.y) + _2616;
                        _2544 = (_2743 * _2677.z) + _2617;
                        if (_2622 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2615 = _2542;
                            _2616 = _2543;
                            _2617 = _2544;
                            _2618 = _2545;
                            _2619 = _2546;
                            _2620 = _2547;
                            _2621 = _2622;
                        }
                    }
                    frontier_phi_75_pred = _2545;
                    frontier_phi_75_pred_1 = _2547;
                    frontier_phi_75_pred_2 = _2546;
                    frontier_phi_75_pred_3 = _2544;
                    frontier_phi_75_pred_4 = _2543;
                    frontier_phi_75_pred_5 = _2542;
                }
                _2280 = frontier_phi_75_pred;
                _2284 = frontier_phi_75_pred_1;
                _2282 = frontier_phi_75_pred_2;
                _2278 = frontier_phi_75_pred_3;
                _2276 = frontier_phi_75_pred_4;
                _2274 = frontier_phi_75_pred_5;
                uint _2456 = _2455 + 1u;
                if (_2456 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2449 = _2274;
                    _2450 = _2276;
                    _2451 = _2278;
                    _2452 = _2280;
                    _2453 = _2282;
                    _2454 = _2284;
                    _2455 = _2456;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2273 = _2274;
            _2275 = _2276;
            _2277 = _2278;
            _2279 = _2280;
            _2281 = _2282;
            _2283 = _2284;
        }
        uvec4 _2287 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2288 = _2287.z;
        uint _2290 = (_2288 >> 8u) & 15u;
        float _2420;
        float _2422;
        float _2424;
        float _2426;
        float _2428;
        float _2430;
        if (((4294967295u << _2290) & _2165) == 0u)
        {
            _2420 = _2273;
            _2422 = _2275;
            _2424 = _2277;
            _2426 = _2279;
            _2428 = _2281;
            _2430 = _2283;
        }
        else
        {
            float _2445 = inversesqrt(dot(vec3(_1618, _1619, _1620), vec3(_1618, _1619, _1620)));
            float frontier_phi_66_67_ladder;
            float frontier_phi_66_67_ladder_1;
            float frontier_phi_66_67_ladder_2;
            float frontier_phi_66_67_ladder_3;
            float frontier_phi_66_67_ladder_4;
            float frontier_phi_66_67_ladder_5;
            if (_2290 < ((_2288 >> 12u) & 15u))
            {
                float _2421;
                float _2423;
                float _2425;
                float _2427;
                float _2429;
                float _2431;
                float _2598 = _2273;
                float _2599 = _2275;
                float _2600 = _2277;
                float _2601 = _2279;
                float _2602 = _2281;
                float _2603 = _2283;
                uint _2604 = _2290;
                uint _2613;
                bool _2614;
                for (;;)
                {
                    _2613 = texelFetch(g_lightClassification, int((((_2159 << 5u) + (_2145 << 9u)) + (_2604 << 2u)) >> 2u)).x;
                    _2614 = _2613 == 0u;
                    float frontier_phi_86_pred;
                    float frontier_phi_86_pred_1;
                    float frontier_phi_86_pred_2;
                    float frontier_phi_86_pred_3;
                    float frontier_phi_86_pred_4;
                    float frontier_phi_86_pred_5;
                    if (_2614)
                    {
                        frontier_phi_86_pred = _2603;
                        frontier_phi_86_pred_1 = _2602;
                        frontier_phi_86_pred_2 = _2601;
                        frontier_phi_86_pred_3 = _2600;
                        frontier_phi_86_pred_4 = _2599;
                        frontier_phi_86_pred_5 = _2598;
                    }
                    else
                    {
                        float _2757;
                        float _2758;
                        float _2759;
                        float _2760;
                        float _2761;
                        float _2762;
                        float _3008;
                        float _3009;
                        float _3010;
                        float _3011;
                        float _3012;
                        float _3013;
                        float _2770 = _2598;
                        float _2771 = _2599;
                        float _2772 = _2600;
                        float _2773 = _2601;
                        float _2774 = _2602;
                        float _2775 = _2603;
                        uint _2776 = _2613;
                        uint _2777;
                        vec4 _2802;
                        float _2803;
                        vec4 _2818;
                        vec3 _2830;
                        vec4 _2846;
                        vec4 _2862;
                        float _2908;
                        bool _2909;
                        for (;;)
                        {
                            uint _2787 = ((_2604 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2776));
                            _2777 = (_2776 + 4294967295u) & _2776;
                            uint _2789 = _2787 * 40u;
                            _2802 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2789)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2789 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2789 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2789 + 3u)).x));
                            _2803 = _2802.w;
                            uint _2805 = (_2787 * 40u) + 4u;
                            _2818 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2805)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2805 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2805 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2805 + 3u)).x));
                            uint _2820 = (_2787 * 40u) + 8u;
                            _2830 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2820)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2820 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2820 + 2u)).x));
                            uint _2833 = (_2787 * 40u) + 16u;
                            _2846 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2833)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 3u)).x));
                            uint _2849 = (_2787 * 40u) + 20u;
                            _2862 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2849)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2849 + 3u)).x));
                            uint _2864 = (_2787 * 40u) + 24u;
                            vec4 _2877 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2864)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 3u)).x));
                            uint _2883 = (_2787 * 40u) + 28u;
                            vec4 _2896 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2883)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 3u)).x));
                            _2908 = fma(_1620, _2896.z, fma(_1619, _2896.y, _2896.x * _1618)) + _2896.w;
                            _2909 = !((fma(_1620, _2877.z, fma(_1619, _2877.y, _2877.x * _1618)) + _2877.w) <= 0.0);
                            float frontier_phi_92_pred;
                            float frontier_phi_92_pred_1;
                            float frontier_phi_92_pred_2;
                            float frontier_phi_92_pred_3;
                            float frontier_phi_92_pred_4;
                            float frontier_phi_92_pred_5;
                            if (_2909)
                            {
                                float _2936 = _2802.x - _1618;
                                float _2937 = _2802.y - _1619;
                                float _2938 = _2802.z - _1620;
                                float _2939 = dot(vec3(_2936, _2937, _2938), vec3(_2936, _2937, _2938));
                                float _2942 = inversesqrt(_2939);
                                float _2943 = _2942 * _2936;
                                float _2944 = _2942 * _2937;
                                float _2945 = _2942 * _2938;
                                float _2949 = 1.0 - (_2939 / (_2803 * _2803));
                                float _3885 = isnan(0.0) ? _2949 : (isnan(_2949) ? 0.0 : max(_2949, 0.0));
                                float _2950 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
                                float _2954 = sqrt(_2939) * _2818.w;
                                float _2956 = 1.39999997615814208984375 / (_2954 + 1.39999997615814208984375);
                                float _2957 = _2956 * _2956;
                                float _2958 = 1.0 - _2957;
                                float _2960 = (_2958 * dot(vec3(_2943, _2944, _2945), vec3(0.0))) + _2957;
                                float _2963 = _2954 * _2954;
                                float _2967 = (fma(_1620, _2846.z, fma(_1619, _2846.y, _2846.x * _1618)) + _2846.w) / _2908;
                                float _2968 = (fma(_1620, _2862.z, fma(_1619, _2862.y, _2862.x * _1618)) + _2862.w) / _2908;
                                float _2972 = 1.0 - dot(vec2(_2967, _2968), vec2(_2967, _2968));
                                float _3901 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
                                float _2973 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
                                float _2974 = _2973 * (((isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0))) * _2950) / ((_2963 * 0.699999988079071044921875) + 1.0));
                                float _2984 = dot(vec3(0.0), vec3((-0.0) - (_1618 * _2445), (-0.0) - (_1619 * _2445), (-0.0) - (_1620 * _2445)));
                                float _3912 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0));
                                float _2992 = (_2958 * dot(vec3(0.0), vec3(_2943, _2944, _2945))) + _2957;
                                float _3923 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
                                float _2993 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
                                float _2997 = (0.5 / (((isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) + 9.9999999392252902907785028219223e-09) + _2993)) * _2993;
                                float _3934 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
                                float _3004 = (_2973 * _2950) * (((isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * 3.1415927410125732421875) / ((_2963 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_92_pred = _2974 * _2818.z;
                                frontier_phi_92_pred_1 = _2974 * _2818.y;
                                frontier_phi_92_pred_2 = _2974 * _2818.x;
                                frontier_phi_92_pred_3 = _3004 * _2830.z;
                                frontier_phi_92_pred_4 = _3004 * _2830.y;
                                frontier_phi_92_pred_5 = _3004 * _2830.x;
                            }
                            else
                            {
                                frontier_phi_92_pred = 0.0;
                                frontier_phi_92_pred_1 = 0.0;
                                frontier_phi_92_pred_2 = 0.0;
                                frontier_phi_92_pred_3 = 0.0;
                                frontier_phi_92_pred_4 = 0.0;
                                frontier_phi_92_pred_5 = 0.0;
                            }
                            _3013 = frontier_phi_92_pred;
                            _3012 = frontier_phi_92_pred_1;
                            _3011 = frontier_phi_92_pred_2;
                            _3010 = frontier_phi_92_pred_3;
                            _3009 = frontier_phi_92_pred_4;
                            _3008 = frontier_phi_92_pred_5;
                            _2760 = _3011 + _2773;
                            _2761 = _3012 + _2774;
                            _2762 = _3013 + _2775;
                            _2757 = _3008 + _2770;
                            _2758 = _3009 + _2771;
                            _2759 = _3010 + _2772;
                            if (_2777 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2770 = _2757;
                                _2771 = _2758;
                                _2772 = _2759;
                                _2773 = _2760;
                                _2774 = _2761;
                                _2775 = _2762;
                                _2776 = _2777;
                                continue;
                            }
                        }
                        frontier_phi_86_pred = _2762;
                        frontier_phi_86_pred_1 = _2761;
                        frontier_phi_86_pred_2 = _2760;
                        frontier_phi_86_pred_3 = _2759;
                        frontier_phi_86_pred_4 = _2758;
                        frontier_phi_86_pred_5 = _2757;
                    }
                    _2431 = frontier_phi_86_pred;
                    _2429 = frontier_phi_86_pred_1;
                    _2427 = frontier_phi_86_pred_2;
                    _2425 = frontier_phi_86_pred_3;
                    _2423 = frontier_phi_86_pred_4;
                    _2421 = frontier_phi_86_pred_5;
                    uint _2605 = _2604 + 1u;
                    if (_2605 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2598 = _2421;
                        _2599 = _2423;
                        _2600 = _2425;
                        _2601 = _2427;
                        _2602 = _2429;
                        _2603 = _2431;
                        _2604 = _2605;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_66_67_ladder = _2427;
                frontier_phi_66_67_ladder_1 = _2431;
                frontier_phi_66_67_ladder_2 = _2429;
                frontier_phi_66_67_ladder_3 = _2425;
                frontier_phi_66_67_ladder_4 = _2423;
                frontier_phi_66_67_ladder_5 = _2421;
            }
            else
            {
                frontier_phi_66_67_ladder = _2279;
                frontier_phi_66_67_ladder_1 = _2283;
                frontier_phi_66_67_ladder_2 = _2281;
                frontier_phi_66_67_ladder_3 = _2277;
                frontier_phi_66_67_ladder_4 = _2275;
                frontier_phi_66_67_ladder_5 = _2273;
            }
            _2420 = frontier_phi_66_67_ladder_5;
            _2422 = frontier_phi_66_67_ladder_4;
            _2424 = frontier_phi_66_67_ladder_3;
            _2426 = frontier_phi_66_67_ladder;
            _2428 = frontier_phi_66_67_ladder_2;
            _2430 = frontier_phi_66_67_ladder_1;
        }
        float _2435 = isnan(1.0) ? _619 : (isnan(_619) ? 1.0 : min(_619, 1.0));
        _2178 = (_2435 * _2426) + _1908;
        _2180 = (_2435 * _2428) + _1909;
        _2182 = (_2435 * _2430) + _1910;
        _2184 = ((_2420 * 0.039999999105930328369140625) * _2435) + _2013;
        _2186 = ((_2422 * 0.039999999105930328369140625) * _2435) + _2014;
        _2188 = ((_2424 * 0.039999999105930328369140625) * _2435) + _2015;
    }
    else
    {
        _2178 = _1908;
        _2180 = _1909;
        _2182 = _1910;
        _2184 = _2013;
        _2186 = _2014;
        _2188 = _2015;
    }
    float _3950 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _3961 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _3972 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _2205 = ((isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * (_2178 + ((isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0))) * _619))) + ((_2184 + ((isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0))) * _1354)) * cbPerFrame._m0[3u].x);
    float _2206 = ((isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * (_2180 + ((isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0))) * _619))) + ((_2186 + ((isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))) * _1354)) * cbPerFrame._m0[3u].x);
    float _2207 = ((isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0))) * (_2182 + ((isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0))) * _619))) + ((_2188 + ((isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0))) * _1354)) * cbPerFrame._m0[3u].x);
    float _2208 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _2209 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
    float _2210 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    uint _2211 = _594 + 6u;
    float _2219 = _580 / cbSceneParam._m0[86u].x;
    float _2220 = _581 / cbSceneParam._m0[86u].y;
    vec4 _2234 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2219, _2220, (log2((isnan(cbSceneParam._m0[77u].w) ? _549 : (isnan(_549) ? cbSceneParam._m0[77u].w : min(_549, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2236 = _2234.x;
    float _2237 = _2234.y;
    float _2238 = _2234.z;
    float _2239 = _2234.w;
    float _2335;
    float _2337;
    float _2339;
    float _2341;
    if (_549 > cbSceneParam._m0[78u].w)
    {
        float _2298 = isnan(_549) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _549 : min(cbSceneParam._m0[80u].w, _549));
        float _2299 = _2298 / _549;
        float _2310 = _2299 * _272;
        float _2311 = _273 * _2299;
        float _2312 = (-0.0) - _2311;
        float _2313 = _2299 * _274;
        float _2315 = (cbSceneParam._m0[77u].w * _2312) / _2298;
        float _2316 = _2315 + cbSceneParam._m0[79u].w;
        float _2317 = cbSceneParam._m0[79u].w - _2311;
        float _2323 = sqrt(((_2310 * _2310) + (_2311 * _2311)) + (_2313 * _2313));
        float _2326 = (1.0 - (cbSceneParam._m0[77u].w / _2298)) * _2323;
        float _2331 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2333 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2555;
        if (abs((_2312 - _2315) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2555 = ((((_2316 > 0.0) ? exp2(_2331 * _2316) : (2.0 - exp2(_2333 * _2316))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2326;
        }
        else
        {
            float _2478 = 1.0 / cbSceneParam._m0[80u].x;
            float _2479 = isnan(_2317) ? _2316 : (isnan(_2316) ? _2317 : max(_2316, _2317));
            float _2480 = isnan(_2317) ? _2316 : (isnan(_2316) ? _2317 : min(_2316, _2317));
            float _2489 = isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : min(_2479, 0.0));
            float _2490 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : min(_2480, 0.0));
            _2555 = ((abs(_2323 / _2312) * cbSceneParam._m0[80u].y) * ((((_2489 - _2490) * 2.0) - ((exp2(_2331 * (isnan(0.0) ? _2479 : (isnan(_2479) ? 0.0 : max(_2479, 0.0)))) - exp2(_2331 * (isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0))))) * _2478)) - ((exp2(_2333 * _2489) - exp2(_2333 * _2490)) * _2478))) + (_2326 * cbSceneParam._m0[80u].z);
        }
        vec4 _2557 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2219, _2220, 1.0), 0.0);
        float _2566 = exp2((_2555 * (-1.44269502162933349609375)) * (1.0 - _2557.w));
        float _2567 = log2(_2566);
        float _2583 = log2(_2239);
        _2335 = (exp2(_2583 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2567 * cbSceneParam._m0[78u].x)) * _2557.x) / cbSceneParam._m0[78u].x)) + _2236;
        _2337 = (exp2(_2583 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2567 * cbSceneParam._m0[78u].y)) * _2557.y) / cbSceneParam._m0[78u].y)) + _2237;
        _2339 = (exp2(_2583 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2567 * cbSceneParam._m0[78u].z)) * _2557.z) / cbSceneParam._m0[78u].z)) + _2238;
        _2341 = _2566 * _2239;
    }
    else
    {
        _2335 = _2236;
        _2337 = _2237;
        _2339 = _2238;
        _2341 = _2239;
    }
    bool _2593;
    vec4 _2351;
    vec4 _2373;
    float _2375;
    float _2379;
    float _2380;
    float _2381;
    float _2382;
    bool _2393;
    for (;;)
    {
        _2351 = cbMatDynParam._m0[0u];
        float _2353 = roundEven(_2351.y);
        bool _2354 = _2353 == 3.0;
        float _2355 = log2(_2341);
        float _2362 = exp2(_2355 * cbSceneParam._m0[78u].x) * _2208;
        float _2363 = exp2(_2355 * cbSceneParam._m0[78u].y) * _2209;
        float _2364 = exp2(_2355 * cbSceneParam._m0[78u].z) * _2210;
        float _2371 = _563 + (-0.5);
        _2373 = cbMtdParam._m0[1u];
        _2375 = _2373.y * _2371;
        float _2378 = (_2353 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2379 = _2378 * (_2354 ? _2362 : (_2362 + (cbSceneParam._m0[72u].w * _2335)));
        _2380 = _2378 * (_2354 ? _2363 : (_2363 + (cbSceneParam._m0[72u].w * _2337)));
        _2381 = _2378 * (_2354 ? _2364 : (_2364 + (cbSceneParam._m0[72u].w * _2339)));
        _2382 = _2371 * 0.999000012874603271484375;
        _2393 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2393)
        {
            if ((cbInstanceData._m0[_594 + 7u].x + _2382) < 0.5)
            {
                _2593 = true;
                break;
            }
        }
        uint _2513 = _595 + uint(_2351.w);
        if ((cbInstanceData._m0[_2513].w < 1.0) && ((cbInstanceData._m0[_2513].w + _2382) < 0.5))
        {
            _2593 = true;
            break;
        }
        if ((_2375 + 1.0) < _2373.x)
        {
            _2593 = true;
            break;
        }
        _2593 = false;
        break;
    }
    float _2748;
    if (_2593)
    {
        discard_state = true;
        _2748 = 0.0;
    }
    else
    {
        _2748 = cbInstanceData._m0[_2211].w;
    }
    SV_Target.x = _2379;
    SV_Target.y = _2380;
    SV_Target.z = _2381;
    SV_Target.w = _2748;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2211].w;
    discard_exit();
}


