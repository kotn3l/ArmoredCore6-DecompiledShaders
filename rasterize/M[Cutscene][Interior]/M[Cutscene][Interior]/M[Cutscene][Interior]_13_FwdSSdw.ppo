#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 10) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_8;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1047;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _255 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _265 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _255);
    float _266 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _255);
    float _267 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _255);
    vec4 _286 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _321 = cbMtdParam._m0[24u].x + _265;
    float _322 = cbMtdParam._m0[24u].y + _266;
    float _323 = cbMtdParam._m0[24u].z + _267;
    float _337 = (-0.0) - dot(vec3(_321, _322, _323), vec3(_193 * _186, _193 * _187, _193 * _188));
    float _338 = (-0.0) - dot(vec3(_321, _322, _323), vec3(_207 * TANGENT.x, _207 * TANGENT.y, _207 * TANGENT.z));
    float _339 = (-0.0) - dot(vec3(_321, _322, _323), vec3((-0.0) - (_200 * NORMAL.x), (-0.0) - (_200 * NORMAL.y), (-0.0) - (_200 * NORMAL.z)));
    float _343 = inversesqrt(dot(vec3(_337, _338, _339), vec3(_337, _338, _339)));
    float _346 = _343 * _339;
    float _347 = (_343 * _337) + (((_286.x * 2.0) + (-1.0)) * cbMtdParam._m0[22u].x);
    float _348 = (_343 * _338) + (((_286.y * 2.0) + (-1.0)) * cbMtdParam._m0[22u].y);
    float _349 = _347 * cbMtdParam._m0[20u].w;
    float _350 = _348 * cbMtdParam._m0[20u].z;
    float _351 = fract(TEXCOORD.x);
    float _352 = fract(TEXCOORD.y);
    float _358;
    if (_349 > 0.0)
    {
        _358 = (1.0 - _351) / _349;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_349 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _351) / _349;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _358 = frontier_phi_3_2_ladder;
    }
    float _366;
    if (_350 > 0.0)
    {
        _366 = (1.0 - _352) / _350;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_350 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _352) / _350;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _366 = frontier_phi_7_6_ladder;
    }
    bool _368 = _346 > 0.0;
    float _370 = _368 ? (cbMtdParam._m0[16u].x / _346) : 5000.0;
    float _371 = isnan(_366) ? _358 : (isnan(_358) ? _366 : min(_358, _366));
    float _372 = isnan(_370) ? _371 : (isnan(_371) ? _370 : min(_371, _370));
    float _376 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _377 = _351 + (-0.5);
    float _380 = _352 + (-0.5);
    float _383 = ((_372 * _346) + _376) / _376;
    vec4 _408 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (((((_377 + (_372 * _349)) / _383) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (((((_380 + (_372 * _350)) / _383) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    float _418 = cbMtdParam._m0[9u].x * _408.x;
    float _419 = cbMtdParam._m0[9u].y * _408.y;
    float _420 = cbMtdParam._m0[9u].z * _408.z;
    float _439 = _347 * cbMtdParam._m0[22u].w;
    float _440 = _348 * cbMtdParam._m0[22u].z;
    bool _441 = _439 > 0.0;
    float _446;
    if (_441)
    {
        _446 = (1.0 - _351) / _439;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_439 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _351) / _439;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _446 = frontier_phi_11_10_ladder;
    }
    bool _448 = _440 > 0.0;
    float _453;
    if (_448)
    {
        _453 = (1.0 - _352) / _440;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_440 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _352) / _440;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _453 = frontier_phi_15_14_ladder;
    }
    float _456 = _368 ? (cbMtdParam._m0[18u].x / _346) : 5000.0;
    float _457 = isnan(_453) ? _446 : (isnan(_446) ? _453 : min(_446, _453));
    float _458 = isnan(_456) ? _457 : (isnan(_457) ? _456 : min(_457, _456));
    float _462 = cbMtdParam._m0[19u].y * cbMtdParam._m0[18u].x;
    float _466 = ((_458 * _346) + _462) / _462;
    float _471 = cbMtdParam._m0[19u].x - cbMtdParam._m0[20u].x * trunc(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    float _473 = floor(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    vec4 _489 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_377 + (_458 * _439)) / _466) + 0.5) + _471) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_380 + (_458 * _440)) / _466) + 0.5) + _473) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[0u].w));
    float _501;
    if (_441)
    {
        _501 = (1.0 - _351) / _439;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_439 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _351) / _439;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _501 = frontier_phi_19_18_ladder;
    }
    float _507;
    if (_448)
    {
        _507 = (1.0 - _352) / _440;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_440 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _352) / _440;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _507 = frontier_phi_23_22_ladder;
    }
    float _509 = isnan(_507) ? _501 : (isnan(_501) ? _507 : min(_501, _507));
    float _510 = isnan(_456) ? _509 : (isnan(_509) ? _456 : min(_509, _456));
    float _517 = ((_510 * _346) + _462) / _462;
    vec4 _537 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_377 + (_510 * _439)) / _517) + 0.5) + _471) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_380 + (_510 * _440)) / _517) + 0.5) + _473) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[8u].w));
    float _539 = _537.x;
    float _546 = (_539 * ((_489.x * cbMtdParam._m0[10u].x) - _418)) + _418;
    float _547 = (_539 * ((_489.y * cbMtdParam._m0[10u].y) - _419)) + _419;
    float _548 = (_539 * ((_489.z * cbMtdParam._m0[10u].z) - _420)) + _420;
    float _564 = _347 * cbMtdParam._m0[23u].y;
    float _565 = _348 * cbMtdParam._m0[23u].x;
    bool _566 = _564 > 0.0;
    float _571;
    if (_566)
    {
        _571 = (1.0 - _351) / _564;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_564 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _351) / _564;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _571 = frontier_phi_27_26_ladder;
    }
    bool _573 = _565 > 0.0;
    float _578;
    if (_573)
    {
        _578 = (1.0 - _352) / _565;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_565 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _352) / _565;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _578 = frontier_phi_31_30_ladder;
    }
    float _581 = _368 ? (cbMtdParam._m0[19u].w / _346) : 5000.0;
    float _582 = isnan(_578) ? _571 : (isnan(_571) ? _578 : min(_571, _578));
    float _583 = isnan(_581) ? _582 : (isnan(_582) ? _581 : min(_582, _581));
    float _587 = cbMtdParam._m0[19u].w * cbMtdParam._m0[16u].z;
    float _591 = ((_583 * _346) + _587) / _587;
    float _596 = cbMtdParam._m0[19u].z - cbMtdParam._m0[23u].z * trunc(cbMtdParam._m0[19u].z / cbMtdParam._m0[23u].z);
    float _598 = floor(cbMtdParam._m0[19u].z / cbMtdParam._m0[23u].z);
    vec4 _614 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * (((((_377 + (_583 * _564)) / _591) + 0.5) + _596) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * (((((_380 + (_583 * _565)) / _591) + 0.5) + _598) / cbMtdParam._m0[23u].w)) + cbTextureTilingScale._m0[9u].w));
    float _626;
    if (_566)
    {
        _626 = (1.0 - _351) / _564;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_564 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _351) / _564;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _626 = frontier_phi_35_34_ladder;
    }
    float _632;
    if (_573)
    {
        _632 = (1.0 - _352) / _565;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_565 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _352) / _565;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _632 = frontier_phi_39_38_ladder;
    }
    float _634 = isnan(_632) ? _626 : (isnan(_626) ? _632 : min(_626, _632));
    float _635 = isnan(_581) ? _634 : (isnan(_634) ? _581 : min(_634, _581));
    float _642 = ((_635 * _346) + _587) / _587;
    vec4 _662 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_377 + (_635 * _564)) / _642) + 0.5) + _596) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_380 + (_635 * _565)) / _642) + 0.5) + _598) / cbMtdParam._m0[23u].w)) + cbTextureTilingScale._m0[10u].w));
    float _664 = _662.x;
    float _671 = (_664 * ((_614.x * cbMtdParam._m0[14u].x) - _546)) + _546;
    float _672 = (_664 * ((_614.y * cbMtdParam._m0[14u].y) - _547)) + _547;
    float _673 = (_664 * ((_614.z * cbMtdParam._m0[14u].z) - _548)) + _548;
    float _3046 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _3057 = isnan(0.0) ? _672 : (isnan(_672) ? 0.0 : max(_672, 0.0));
    float _3068 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _692 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _696 = inversesqrt(dot(vec3(_265, _266, _267), vec3(_265, _266, _267)));
    float _697 = _265 * _696;
    float _698 = _266 * _696;
    float _699 = _267 * _696;
    float _705 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _706 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _719 = uint(roundEven(NORMAL.w)) * 13u;
    uint _722 = (_719 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _728 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3046 : (isnan(_3046) ? 1.0 : min(_3046, 1.0)))) * cbInstanceData._m0[_722].x;
    float _729 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3057 : (isnan(_3057) ? 1.0 : min(_3057, 1.0)))) * cbInstanceData._m0[_722].y;
    float _730 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3068 : (isnan(_3068) ? 1.0 : min(_3068, 1.0)))) * cbInstanceData._m0[_722].z;
    float _3079 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _731 = isnan(1.0) ? _3079 : (isnan(_3079) ? 1.0 : min(_3079, 1.0));
    float _3090 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _732 = isnan(1.0) ? _3090 : (isnan(_3090) ? 1.0 : min(_3090, 1.0));
    float _3101 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _733 = isnan(1.0) ? _3101 : (isnan(_3101) ? 1.0 : min(_3101, 1.0));
    vec4 _742 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _705, cbSceneParam._m0[86u].y * _706));
    float _745 = _742.x * TEXCOORD_4.z;
    float _746 = (-0.0) - _697;
    float _747 = (-0.0) - _698;
    float _748 = (-0.0) - _699;
    float _770 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _774 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _778 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1046;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _834 = (cbModelParam._m0[37u].x * ((((fma(_778, cbModelParam._m0[26u].z, fma(_774, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _770)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _836 = (cbModelParam._m0[37u].y * ((((fma(_778, cbModelParam._m0[27u].z, fma(_774, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _770)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _837 = (((((fma(_778, cbModelParam._m0[28u].z, fma(_774, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _770)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _840 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_834, _836, _837), 0.0);
        vec4 _847 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_834, _836, _837), 0.0);
        vec4 _854 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_834, _836, _837), 0.0);
        vec4 _861 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_834, _836, _837), 0.0);
        float _874 = exp2((_840.w + (-0.5)) * 20.0) * 2.0;
        float _875 = _874 * (_840.x + (-0.5));
        float _876 = _874 * (_840.y + (-0.5));
        float _877 = _874 * (_840.z + (-0.5));
        float _884 = exp2((_847.w + (-0.5)) * 20.0) * 2.0;
        float _885 = _884 * (_847.x + (-0.5));
        float _886 = _884 * (_847.y + (-0.5));
        float _887 = _884 * (_847.z + (-0.5));
        float _894 = exp2((_854.w + (-0.5)) * 20.0) * 2.0;
        float _895 = _894 * (_854.x + (-0.5));
        float _896 = _894 * (_854.y + (-0.5));
        float _897 = _894 * (_854.z + (-0.5));
        float _904 = exp2((_861.w + (-0.5)) * 20.0) * 2.0;
        float _905 = _904 * (_861.x + (-0.5));
        float _906 = _904 * (_861.y + (-0.5));
        float _907 = _904 * (_861.z + (-0.5));
        float _908 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _909 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _910 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _911 = _875 * 0.5;
        float _912 = _885 * 0.5;
        float _913 = _895 * 0.5;
        float _914 = dot(vec3(_911, _912, _913), vec3(_911, _912, _913));
        float _919 = (_914 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_914);
        float _928 = (dot(vec3(0.0), vec3(_919 * _911, _919 * _912, _919 * _913)) + 1.0) * 0.5;
        float _3127 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _938 = sqrt(((_912 * _912) + (_911 * _911)) + (_913 * _913)) / (_908 + 9.9999997473787516355514526367188e-06);
        float _3138 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _939 = isnan(1.0) ? _3138 : (isnan(_3138) ? 1.0 : min(_3138, 1.0));
        float _940 = _939 * 2.0;
        float _944 = (1.0 - _939) / (_939 + 1.0);
        float _3149 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _945 = isnan(1.0) ? _3149 : (isnan(_3149) ? 1.0 : min(_3149, 1.0));
        float _954 = ((((1.0 - _945) * (_940 + 2.0)) * exp2(log2(isnan(1.0) ? _3127 : (isnan(_3127) ? 1.0 : min(_3127, 1.0))) * (_940 + 1.0))) + _945) * _908;
        float _955 = _876 * 0.5;
        float _956 = _886 * 0.5;
        float _957 = _896 * 0.5;
        float _958 = dot(vec3(_955, _956, _957), vec3(_955, _956, _957));
        float _963 = (_958 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_958);
        float _971 = (dot(vec3(0.0), vec3(_963 * _955, _963 * _956, _963 * _957)) + 1.0) * 0.5;
        float _3160 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _980 = sqrt(((_956 * _956) + (_955 * _955)) + (_957 * _957)) / (_909 + 9.9999997473787516355514526367188e-06);
        float _3171 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _3171 : (isnan(_3171) ? 1.0 : min(_3171, 1.0));
        float _982 = _981 * 2.0;
        float _986 = (1.0 - _981) / (_981 + 1.0);
        float _3182 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _987 = isnan(1.0) ? _3182 : (isnan(_3182) ? 1.0 : min(_3182, 1.0));
        float _996 = ((((1.0 - _987) * (_982 + 2.0)) * exp2(log2(isnan(1.0) ? _3160 : (isnan(_3160) ? 1.0 : min(_3160, 1.0))) * (_982 + 1.0))) + _987) * _909;
        float _997 = _877 * 0.5;
        float _998 = _887 * 0.5;
        float _999 = _897 * 0.5;
        float _1000 = dot(vec3(_997, _998, _999), vec3(_997, _998, _999));
        float _1005 = (_1000 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1000);
        float _1013 = (dot(vec3(0.0), vec3(_1005 * _997, _1005 * _998, _1005 * _999)) + 1.0) * 0.5;
        float _3193 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1022 = sqrt(((_998 * _998) + (_997 * _997)) + (_999 * _999)) / (_910 + 9.9999997473787516355514526367188e-06);
        float _3204 = isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0));
        float _1023 = isnan(1.0) ? _3204 : (isnan(_3204) ? 1.0 : min(_3204, 1.0));
        float _1024 = _1023 * 2.0;
        float _1028 = (1.0 - _1023) / (_1023 + 1.0);
        float _3215 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1029 = isnan(1.0) ? _3215 : (isnan(_3215) ? 1.0 : min(_3215, 1.0));
        float _1038 = ((((1.0 - _1029) * (_1024 + 2.0)) * exp2(log2(isnan(1.0) ? _3193 : (isnan(_3193) ? 1.0 : min(_3193, 1.0))) * (_1024 + 1.0))) + _1029) * _910;
        _1046 = _877;
        _1048 = _876;
        _1049 = _875;
        _1050 = _887;
        _1051 = _886;
        _1052 = _885;
        _1053 = _897;
        _1054 = _896;
        _1055 = _895;
        _1056 = _910;
        _1057 = _909;
        _1058 = _908;
        _1059 = cbModelParam._m0[36u].z * (isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0)));
        _1060 = cbModelParam._m0[36u].z * (isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0)));
        _1061 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0)));
    }
    else
    {
        _1046 = _1047;
        _1048 = _1047;
        _1049 = _1047;
        _1050 = _1047;
        _1051 = _1047;
        _1052 = _1047;
        _1053 = _1047;
        _1054 = _1047;
        _1055 = _1047;
        _1056 = _1047;
        _1057 = _1047;
        _1058 = _1047;
        _1059 = 0.0;
        _1060 = 0.0;
        _1061 = 0.0;
    }
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1115 = (cbModelParam._m0[38u].x * ((((fma(_778, cbModelParam._m0[30u].z, fma(_774, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _770)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1116 = (cbModelParam._m0[38u].y * ((((fma(_778, cbModelParam._m0[31u].z, fma(_774, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _770)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1117 = (((((fma(_778, cbModelParam._m0[32u].z, fma(_774, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _770)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1115, _1116, _1117), 0.0);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1115, _1116, _1117), 0.0);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1115, _1116, _1117), 0.0);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1115, _1116, _1117), 0.0);
        float _1152 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1153 = _1152 * (_1119.x + (-0.5));
        float _1154 = _1152 * (_1119.y + (-0.5));
        float _1155 = _1152 * (_1119.z + (-0.5));
        float _1162 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1163 = _1162 * (_1126.x + (-0.5));
        float _1164 = _1162 * (_1126.y + (-0.5));
        float _1165 = _1162 * (_1126.z + (-0.5));
        float _1172 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1173 = _1172 * (_1133.x + (-0.5));
        float _1174 = _1172 * (_1133.y + (-0.5));
        float _1175 = _1172 * (_1133.z + (-0.5));
        float _1182 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1183 = _1182 * (_1140.x + (-0.5));
        float _1184 = _1182 * (_1140.y + (-0.5));
        float _1185 = _1182 * (_1140.z + (-0.5));
        float _1186 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1187 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
        float _1188 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1189 = _1153 * 0.5;
        float _1190 = _1163 * 0.5;
        float _1191 = _1173 * 0.5;
        float _1192 = dot(vec3(_1189, _1190, _1191), vec3(_1189, _1190, _1191));
        float _1197 = (_1192 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1192);
        float _1205 = (dot(vec3(0.0), vec3(_1197 * _1189, _1197 * _1190, _1197 * _1191)) + 1.0) * 0.5;
        float _3256 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1214 = sqrt(((_1190 * _1190) + (_1189 * _1189)) + (_1191 * _1191)) / (_1186 + 9.9999997473787516355514526367188e-06);
        float _3267 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3267 : (isnan(_3267) ? 1.0 : min(_3267, 1.0));
        float _1216 = _1215 * 2.0;
        float _1220 = (1.0 - _1215) / (_1215 + 1.0);
        float _3278 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1221 = isnan(1.0) ? _3278 : (isnan(_3278) ? 1.0 : min(_3278, 1.0));
        float _1230 = ((((1.0 - _1221) * (_1216 + 2.0)) * exp2(log2(isnan(1.0) ? _3256 : (isnan(_3256) ? 1.0 : min(_3256, 1.0))) * (_1216 + 1.0))) + _1221) * _1186;
        float _1231 = _1154 * 0.5;
        float _1232 = _1164 * 0.5;
        float _1233 = _1174 * 0.5;
        float _1234 = dot(vec3(_1231, _1232, _1233), vec3(_1231, _1232, _1233));
        float _1239 = (_1234 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1234);
        float _1247 = (dot(vec3(0.0), vec3(_1239 * _1231, _1239 * _1232, _1239 * _1233)) + 1.0) * 0.5;
        float _3289 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1256 = sqrt(((_1232 * _1232) + (_1231 * _1231)) + (_1233 * _1233)) / (_1187 + 9.9999997473787516355514526367188e-06);
        float _3300 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0));
        float _1258 = _1257 * 2.0;
        float _1262 = (1.0 - _1257) / (_1257 + 1.0);
        float _3311 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0));
        float _1272 = ((((1.0 - _1263) * (_1258 + 2.0)) * exp2(log2(isnan(1.0) ? _3289 : (isnan(_3289) ? 1.0 : min(_3289, 1.0))) * (_1258 + 1.0))) + _1263) * _1187;
        float _1273 = _1155 * 0.5;
        float _1274 = _1165 * 0.5;
        float _1275 = _1175 * 0.5;
        float _1276 = dot(vec3(_1273, _1274, _1275), vec3(_1273, _1274, _1275));
        float _1281 = (_1276 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1276);
        float _1289 = (dot(vec3(0.0), vec3(_1281 * _1273, _1281 * _1274, _1281 * _1275)) + 1.0) * 0.5;
        float _3322 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1298 = sqrt(((_1274 * _1274) + (_1273 * _1273)) + (_1275 * _1275)) / (_1188 + 9.9999997473787516355514526367188e-06);
        float _3333 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0));
        float _1300 = _1299 * 2.0;
        float _1304 = (1.0 - _1299) / (_1299 + 1.0);
        float _3344 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0));
        float _1314 = ((((1.0 - _1305) * (_1300 + 2.0)) * exp2(log2(isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0))) * (_1300 + 1.0))) + _1305) * _1188;
        _1322 = _1155;
        _1323 = _1154;
        _1324 = _1153;
        _1325 = _1165;
        _1326 = _1164;
        _1327 = _1163;
        _1328 = _1175;
        _1329 = _1174;
        _1330 = _1173;
        _1331 = _1188;
        _1332 = _1187;
        _1333 = _1186;
        _1334 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0)));
        _1335 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0)));
        _1336 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)));
    }
    else
    {
        _1322 = _1047;
        _1323 = _1047;
        _1324 = _1047;
        _1325 = _1047;
        _1326 = _1047;
        _1327 = _1047;
        _1328 = _1047;
        _1329 = _1047;
        _1330 = _1047;
        _1331 = _1047;
        _1332 = _1047;
        _1333 = _1047;
        _1334 = 0.0;
        _1335 = 0.0;
        _1336 = 0.0;
    }
    float _1346 = (cbModelParam._m0[1u].x * (_1334 - _1059)) + _1059;
    float _1347 = (cbModelParam._m0[1u].x * (_1335 - _1060)) + _1060;
    float _1348 = (cbModelParam._m0[1u].x * (_1336 - _1061)) + _1061;
    float _1369 = fma(_1348, cbSceneParam._m0[89u].z, fma(_1347, cbSceneParam._m0[89u].y, _1346 * cbSceneParam._m0[89u].x));
    float _1372 = fma(_1348, cbSceneParam._m0[90u].z, fma(_1347, cbSceneParam._m0[90u].y, _1346 * cbSceneParam._m0[90u].x));
    float _1375 = fma(_1348, cbSceneParam._m0[91u].z, fma(_1347, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1346));
    float _1390 = _697 * (-0.5);
    float _1391 = _698 * (-0.5);
    float _1392 = _699 * (-0.5);
    float _1393 = dot(vec4(_1390, _1391, _1392, 1.0), vec4(_1324, _1327, _1330, _1333));
    float _1396 = dot(vec4(_1390, _1391, _1392, 1.0), vec4(_1323, _1326, _1329, _1332));
    float _1399 = dot(vec4(_1390, _1391, _1392, 1.0), vec4(_1322, _1325, _1328, _1331));
    float _1433;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1406 = dot(vec4(_1390, _1391, _1392, 1.0), vec4(_1046, _1050, _1053, _1056));
        float _1410 = dot(vec4(_1390, _1391, _1392, 1.0), vec4(_1048, _1051, _1054, _1057));
        float _1414 = dot(vec4(_1390, _1391, _1392, 1.0), vec4(_1049, _1052, _1055, _1058));
        float _1421 = dot(vec4(cbModelParam._m0[39u]), vec4(_1390, _1391, _1392, 1.0));
        _1433 = dot(vec3(isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)), isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0)), isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1421) ? 0.0 : (isnan(0.0) ? _1421 : max(0.0, _1421))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1433 = 1.0;
    }
    float _1444;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1435 = dot(vec4(cbModelParam._m0[40u]), vec4(_1390, _1391, _1392, 1.0));
        _1444 = dot(vec3(isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0)), isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0)), isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1435) ? 0.0 : (isnan(0.0) ? _1435 : max(0.0, _1435))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1444 = 1.0;
    }
    float _1448 = (_1444 * cbModelParam._m0[1u].x) + (_1433 * (1.0 - cbModelParam._m0[1u].x));
    float _1457 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1539;
    float _1541;
    float _1543;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1506 = fma(_778, cbModelParam._m0[13u].z, fma(_774, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _770)) + cbModelParam._m0[13u].w;
        float _1510 = fma(_778, cbModelParam._m0[14u].z, fma(_774, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _770)) + cbModelParam._m0[14u].w;
        float _1514 = fma(_778, cbModelParam._m0[15u].z, fma(_774, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _770)) + cbModelParam._m0[15u].w;
        float _1517 = fma(_748, cbModelParam._m0[13u].z, fma(_747, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _746));
        float _1520 = fma(_748, cbModelParam._m0[14u].z, fma(_747, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _746));
        float _1523 = fma(_748, cbModelParam._m0[15u].z, fma(_747, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _746));
        float _1549;
        if (_1517 > 0.0)
        {
            _1549 = abs((1.0 - _1506) / _1517);
        }
        else
        {
            float frontier_phi_54_52_ladder;
            if (_1517 < 0.0)
            {
                frontier_phi_54_52_ladder = abs((_1506 + 1.0) / _1517);
            }
            else
            {
                frontier_phi_54_52_ladder = 5000.0;
            }
            _1549 = frontier_phi_54_52_ladder;
        }
        float _1870;
        if (_1520 > 0.0)
        {
            _1870 = abs((1.0 - _1510) / _1520);
        }
        else
        {
            float frontier_phi_63_59_ladder;
            if (_1520 < 0.0)
            {
                frontier_phi_63_59_ladder = abs((_1510 + 1.0) / _1520);
            }
            else
            {
                frontier_phi_63_59_ladder = 5000.0;
            }
            _1870 = frontier_phi_63_59_ladder;
        }
        float _2172;
        if (_1523 > 0.0)
        {
            _2172 = abs((1.0 - _1514) / _1523);
        }
        else
        {
            float frontier_phi_77_70_ladder;
            if (_1523 < 0.0)
            {
                frontier_phi_77_70_ladder = abs((_1514 + 1.0) / _1523);
            }
            else
            {
                frontier_phi_77_70_ladder = 5000.0;
            }
            _2172 = frontier_phi_77_70_ladder;
        }
        float _2174 = isnan(_1870) ? _1549 : (isnan(_1549) ? _1870 : min(_1549, _1870));
        float _2175 = isnan(_2172) ? _2174 : (isnan(_2174) ? _2172 : min(_2174, _2172));
        float _2179 = (_2175 * _1517) + _1506;
        float _2180 = (_2175 * _1520) + _1510;
        float _2181 = (_2175 * _1523) + _1514;
        float _2182 = _2175 * 9.9999997473787516355514526367188e-05;
        float _2183 = (-1.0) - _2182;
        float _2185 = _2182 + 1.0;
        float frontier_phi_53_77_ladder;
        float frontier_phi_53_77_ladder_1;
        float frontier_phi_53_77_ladder_2;
        if ((_2181 > _2185) || ((_2181 < _2183) || ((_2180 > _2185) || ((_2180 < _2183) || ((_2179 < _2183) || (_2179 > _2185))))))
        {
            frontier_phi_53_77_ladder = 0.0;
            frontier_phi_53_77_ladder_1 = 0.0;
            frontier_phi_53_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2304 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2181, cbModelParam._m0[9u].z, fma(_2180, cbModelParam._m0[9u].y, _2179 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2181, cbModelParam._m0[10u].z, fma(_2180, cbModelParam._m0[10u].y, _2179 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2181, cbModelParam._m0[11u].z, fma(_2180, cbModelParam._m0[11u].y, _2179 * cbModelParam._m0[11u].x))), _1457);
            frontier_phi_53_77_ladder = _2304.x * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_1 = _2304.y * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_2 = _2304.z * cbModelParam._m0[1u].y;
        }
        _1539 = frontier_phi_53_77_ladder;
        _1541 = frontier_phi_53_77_ladder_1;
        _1543 = frontier_phi_53_77_ladder_2;
    }
    else
    {
        vec4 _1527 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_746, _747, _748), _1457);
        _1539 = _1527.x * cbModelParam._m0[1u].y;
        _1541 = _1527.y * cbModelParam._m0[1u].y;
        _1543 = _1527.z * cbModelParam._m0[1u].y;
    }
    float _1546 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1634;
    float _1636;
    float _1638;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1598 = fma(_778, cbModelParam._m0[21u].z, fma(_774, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _770)) + cbModelParam._m0[21u].w;
        float _1602 = fma(_778, cbModelParam._m0[22u].z, fma(_774, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _770)) + cbModelParam._m0[22u].w;
        float _1606 = fma(_778, cbModelParam._m0[23u].z, fma(_774, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _770)) + cbModelParam._m0[23u].w;
        float _1609 = fma(_748, cbModelParam._m0[21u].z, fma(_747, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _746));
        float _1612 = fma(_748, cbModelParam._m0[22u].z, fma(_747, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _746));
        float _1615 = fma(_748, cbModelParam._m0[23u].z, fma(_747, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _746));
        float _1875;
        if (_1609 > 0.0)
        {
            _1875 = abs((1.0 - _1598) / _1609);
        }
        else
        {
            float frontier_phi_65_61_ladder;
            if (_1609 < 0.0)
            {
                frontier_phi_65_61_ladder = abs((_1598 + 1.0) / _1609);
            }
            else
            {
                frontier_phi_65_61_ladder = 5000.0;
            }
            _1875 = frontier_phi_65_61_ladder;
        }
        float _2198;
        if (_1612 > 0.0)
        {
            _2198 = abs((1.0 - _1602) / _1612);
        }
        else
        {
            float frontier_phi_79_72_ladder;
            if (_1612 < 0.0)
            {
                frontier_phi_79_72_ladder = abs((_1602 + 1.0) / _1612);
            }
            else
            {
                frontier_phi_79_72_ladder = 5000.0;
            }
            _2198 = frontier_phi_79_72_ladder;
        }
        float _2364;
        if (_1615 > 0.0)
        {
            _2364 = abs((1.0 - _1606) / _1615);
        }
        else
        {
            float frontier_phi_93_88_ladder;
            if (_1615 < 0.0)
            {
                frontier_phi_93_88_ladder = abs((_1606 + 1.0) / _1615);
            }
            else
            {
                frontier_phi_93_88_ladder = 5000.0;
            }
            _2364 = frontier_phi_93_88_ladder;
        }
        float _2366 = isnan(_2198) ? _1875 : (isnan(_1875) ? _2198 : min(_1875, _2198));
        float _2367 = isnan(_2364) ? _2366 : (isnan(_2366) ? _2364 : min(_2366, _2364));
        float _2371 = (_2367 * _1609) + _1598;
        float _2372 = (_2367 * _1612) + _1602;
        float _2373 = (_2367 * _1615) + _1606;
        float _2374 = _2367 * 9.9999997473787516355514526367188e-05;
        float _2375 = (-1.0) - _2374;
        float _2377 = _2374 + 1.0;
        float frontier_phi_62_93_ladder;
        float frontier_phi_62_93_ladder_1;
        float frontier_phi_62_93_ladder_2;
        if ((_2373 > _2377) || ((_2373 < _2375) || ((_2372 > _2377) || ((_2372 < _2375) || ((_2371 < _2375) || (_2371 > _2377))))))
        {
            frontier_phi_62_93_ladder = 0.0;
            frontier_phi_62_93_ladder_1 = 0.0;
            frontier_phi_62_93_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2556 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2373, cbModelParam._m0[17u].z, fma(_2372, cbModelParam._m0[17u].y, _2371 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2373, cbModelParam._m0[18u].z, fma(_2372, cbModelParam._m0[18u].y, _2371 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2373, cbModelParam._m0[19u].z, fma(_2372, cbModelParam._m0[19u].y, _2371 * cbModelParam._m0[19u].x))), _1546);
            frontier_phi_62_93_ladder = _2556.z * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_1 = _2556.y * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_2 = _2556.x * cbModelParam._m0[1u].z;
        }
        _1634 = frontier_phi_62_93_ladder_2;
        _1636 = frontier_phi_62_93_ladder_1;
        _1638 = frontier_phi_62_93_ladder;
    }
    else
    {
        vec4 _1618 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_746, _747, _748), _1546);
        _1634 = _1618.x * cbModelParam._m0[1u].z;
        _1636 = _1618.y * cbModelParam._m0[1u].z;
        _1638 = _1618.z * cbModelParam._m0[1u].z;
    }
    float _1650 = _745 * 0.01200000010430812835693359375;
    float _1652 = _1650 * ((cbModelParam._m0[1u].w * (_1634 - _1539)) + _1539);
    float _1653 = _1650 * ((cbModelParam._m0[1u].w * (_1636 - _1541)) + _1541);
    float _1654 = _1650 * ((cbModelParam._m0[1u].w * (_1638 - _1543)) + _1543);
    float _1657 = fma(_1654, cbSceneParam._m0[89u].z, fma(_1653, cbSceneParam._m0[89u].y, _1652 * cbSceneParam._m0[89u].x));
    float _1660 = fma(_1654, cbSceneParam._m0[90u].z, fma(_1653, cbSceneParam._m0[90u].y, _1652 * cbSceneParam._m0[90u].x));
    float _1663 = fma(_1654, cbSceneParam._m0[91u].z, fma(_1653, cbSceneParam._m0[91u].y, _1652 * cbSceneParam._m0[91u].x));
    vec4 _1671 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_705, _706));
    float _1673 = _1671.w;
    float _1686 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1673);
    float _1687 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1673);
    float _1688 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1673);
    uvec4 _1692 = floatBitsToUint(cbInstanceData._m0[_719 + 5u]);
    uint _1694 = _1692.x * 14u;
    uint _1695 = _1694 + 13u;
    float _1700 = _745 + (-1.0);
    float _1703 = (cbLight._m0[_1695].x * _1700) + 1.0;
    float _1704 = (cbLight._m0[_1695].y * _1700) + 1.0;
    uint _1705 = _1694 + 5u;
    float _1711 = isnan(1.0) ? _1704 : (isnan(_1704) ? 1.0 : min(_1704, 1.0));
    uint _1715 = _1694 + 4u;
    float _1725 = isnan(1.0) ? _1703 : (isnan(_1703) ? 1.0 : min(_1703, 1.0));
    uint _1729 = _1694 | 1u;
    float _1740 = dot(vec3(cbLight._m0[_1694].xyz), vec3(0.0));
    float _1743 = dot(vec3(cbLight._m0[_1729].xyz), vec3(0.0));
    float _3480 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
    float _3491 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
    float _1748 = (isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0))) * 0.3183098733425140380859375;
    float _1750 = (isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0))) * 0.3183098733425140380859375;
    float _1757 = ((cbLight._m0[_1705].x * _1711) * _1750) + (((cbLight._m0[_1715].x * _1686) * _1725) * _1748);
    float _1758 = ((_1711 * cbLight._m0[_1705].y) * _1750) + (((cbLight._m0[_1715].y * _1687) * _1725) * _1748);
    float _1759 = ((_1711 * cbLight._m0[_1705].z) * _1750) + (((cbLight._m0[_1715].z * _1688) * _1725) * _1748);
    uint _1760 = _1694 + 8u;
    float _1766 = cbLight._m0[_1694].x + _697;
    float _1767 = cbLight._m0[_1694].y + _698;
    float _1768 = cbLight._m0[_1694].z + _699;
    float _1772 = inversesqrt(dot(vec3(_1766, _1767, _1768), vec3(_1766, _1767, _1768)));
    float _1776 = dot(vec3(0.0), vec3(cbLight._m0[_1694].xyz));
    float _3502 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
    float _1779 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
    float _1780 = dot(vec3(0.0), vec3(_697, _698, _699));
    float _3513 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
    float _1783 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
    float _1784 = dot(vec3(cbLight._m0[_1694].xyz), vec3(_1766 * _1772, _1767 * _1772, _1768 * _1772));
    float _3524 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
    float _1795 = (exp2(log2(1.0 - (isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1801 = (0.5 / ((_1779 + 9.9999999392252902907785028219223e-09) + _1783)) * _1779;
    float _3535 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
    float _1803 = (isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0))) * 0.31831014156341552734375;
    uint _1817 = _1694 + 9u;
    float _1823 = cbLight._m0[_1729].x + _697;
    float _1824 = cbLight._m0[_1729].y + _698;
    float _1825 = cbLight._m0[_1729].z + _699;
    float _1829 = inversesqrt(dot(vec3(_1823, _1824, _1825), vec3(_1823, _1824, _1825)));
    float _1833 = dot(vec3(0.0), vec3(cbLight._m0[_1729].xyz));
    float _3546 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
    float _1836 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
    float _1837 = dot(vec3(cbLight._m0[_1729].xyz), vec3(_1823 * _1829, _1824 * _1829, _1825 * _1829));
    float _3557 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _1846 = (exp2(log2(1.0 - (isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1850 = (0.5 / ((_1836 + 9.9999999392252902907785028219223e-09) + _1783)) * _1836;
    float _3568 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
    float _1852 = (isnan(1.0) ? _3568 : (isnan(_3568) ? 1.0 : min(_3568, 1.0))) * 0.31831014156341552734375;
    float _1862 = (((_1846 * cbLight._m0[_1817].x) * _1852) * _1711) + ((((cbLight._m0[_1760].x * _1686) * _1795) * _1803) * _1725);
    float _1863 = (((_1846 * cbLight._m0[_1817].y) * _1852) * _1711) + ((((cbLight._m0[_1760].y * _1687) * _1795) * _1803) * _1725);
    float _1864 = (((_1846 * cbLight._m0[_1817].z) * _1852) * _1711) + ((((cbLight._m0[_1760].z * _1688) * _1795) * _1803) * _1725);
    float _1980;
    float _1982;
    float _1984;
    float _1986;
    float _1988;
    float _1990;
    if (_1692.y == 0u)
    {
        float _1920 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1921 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1920;
        float _1922 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1920;
        float _1923 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1920;
        uvec4 _1935 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1936 = _1935.x;
        uint _1947 = uint((float(_1935.y) * floor(float(uint(cbSceneParam._m0[85u].y * _706) / _1936))) + floor(float(uint(cbSceneParam._m0[85u].x * _705) / _1936)));
        float _1957 = (log2(_1923 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1958 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
        uint _1961 = uint(isnan(14.0) ? _1958 : (isnan(_1958) ? 14.0 : min(_1958, 14.0)));
        uvec4 _1966 = texelFetch(g_lightClusterGridBuffer, int(((_1961 << 2u) + (_1947 << 6u)) >> 2u));
        uint _1967 = _1966.x;
        uint _1968 = _1935.z;
        float _2058;
        float _2060;
        float _2062;
        float _2064;
        float _2066;
        float _2068;
        if (((((1u << ((_1968 >> 4u) & 15u)) + 4294967295u) & _1967) == 0u) || ((_1968 & 240u) == 0u))
        {
            _2058 = 0.0;
            _2060 = 0.0;
            _2062 = 0.0;
            _2064 = 0.0;
            _2066 = 0.0;
            _2068 = 0.0;
        }
        else
        {
            float _2059;
            float _2061;
            float _2063;
            float _2065;
            float _2067;
            float _2069;
            float _2232 = 0.0;
            float _2233 = 0.0;
            float _2234 = 0.0;
            float _2235 = 0.0;
            float _2236 = 0.0;
            float _2237 = 0.0;
            uint _2238 = 0u;
            uint _2247;
            bool _2248;
            for (;;)
            {
                _2247 = texelFetch(g_lightClassification, int((((_1961 << 5u) + (_1947 << 9u)) + (_2238 << 2u)) >> 2u)).x;
                _2248 = _2247 == 0u;
                float frontier_phi_90_pred;
                float frontier_phi_90_pred_1;
                float frontier_phi_90_pred_2;
                float frontier_phi_90_pred_3;
                float frontier_phi_90_pred_4;
                float frontier_phi_90_pred_5;
                if (_2248)
                {
                    frontier_phi_90_pred = _2237;
                    frontier_phi_90_pred_1 = _2232;
                    frontier_phi_90_pred_2 = _2233;
                    frontier_phi_90_pred_3 = _2234;
                    frontier_phi_90_pred_4 = _2235;
                    frontier_phi_90_pred_5 = _2236;
                }
                else
                {
                    float _2407;
                    float _2408;
                    float _2409;
                    float _2410;
                    float _2411;
                    float _2412;
                    uint _2413;
                    _2407 = _2232;
                    _2408 = _2233;
                    _2409 = _2234;
                    _2410 = _2235;
                    _2411 = _2236;
                    _2412 = _2237;
                    _2413 = _2247;
                    float _2313;
                    float _2314;
                    float _2315;
                    float _2316;
                    float _2317;
                    float _2318;
                    for (;;)
                    {
                        uint _2417 = uint(findLSB(_2413)) + (_2238 << 5u);
                        uint _2414 = (_2413 + 4294967295u) & _2413;
                        uint _2419 = _2417 * 48u;
                        vec4 _2433 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2419)).x, texelFetch(g_PointLightRenderingBuffer, int(_2419 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2419 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2419 + 3u)).x));
                        uint _2439 = (_2417 * 48u) + 4u;
                        vec4 _2452 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2439)).x, texelFetch(g_PointLightRenderingBuffer, int(_2439 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2439 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2439 + 3u)).x));
                        uint _2458 = (_2417 * 48u) + 8u;
                        vec3 _2469 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2458)).x, texelFetch(g_PointLightRenderingBuffer, int(_2458 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2458 + 2u)).x));
                        float _2473 = _2433.x - _1921;
                        float _2474 = _2433.y - _1922;
                        float _2475 = _2433.z - _1923;
                        float _2476 = dot(vec3(_2473, _2474, _2475), vec3(_2473, _2474, _2475));
                        float _2479 = inversesqrt(_2476);
                        float _2488 = 1.0 - (_2476 * _2433.w);
                        float _3589 = isnan(0.0) ? _2488 : (isnan(_2488) ? 0.0 : max(_2488, 0.0));
                        float _2489 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
                        float _2490 = sqrt(_2476) * _2452.w;
                        float _2493 = 1.39999997615814208984375 / (_2490 + 1.39999997615814208984375);
                        float _2494 = _2493 * _2493;
                        float _2497 = ((1.0 - _2494) * dot(vec3(0.0), vec3(_2479 * _2473, _2479 * _2474, _2479 * _2475))) + _2494;
                        float _2500 = _2490 * _2490;
                        float _2504 = ((isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0))) * _2489) / ((_2500 * 0.699999988079071044921875) + 1.0);
                        float _2508 = (-0.0) - _1921;
                        float _2509 = (-0.0) - _1922;
                        float _2510 = (-0.0) - _1923;
                        float _2514 = inversesqrt(dot(vec3(_2508, _2509, _2510), vec3(_2508, _2509, _2510)));
                        float _2518 = dot(vec3(0.0), vec3(_2514 * _2508, _2514 * _2509, _2514 * _2510));
                        float _3605 = isnan(0.0) ? _2518 : (isnan(_2518) ? 0.0 : max(_2518, 0.0));
                        float _3616 = isnan(0.0) ? _2497 : (isnan(_2497) ? 0.0 : max(_2497, 0.0));
                        float _2522 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
                        float _2526 = (0.5 / (((isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0))) + 9.9999999392252902907785028219223e-09) + _2522)) * _2522;
                        float _3627 = isnan(0.0) ? _2526 : (isnan(_2526) ? 0.0 : max(_2526, 0.0));
                        float _2535 = (((isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0))) * 3.1415927410125732421875) / ((_2500 * 2.1991131305694580078125) + 3.141590118408203125)) * _2489;
                        _2316 = (_2504 * _2452.x) + _2410;
                        _2317 = (_2504 * _2452.y) + _2411;
                        _2318 = (_2504 * _2452.z) + _2412;
                        _2313 = (_2535 * _2469.x) + _2407;
                        _2314 = (_2535 * _2469.y) + _2408;
                        _2315 = (_2535 * _2469.z) + _2409;
                        if (_2414 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2407 = _2313;
                            _2408 = _2314;
                            _2409 = _2315;
                            _2410 = _2316;
                            _2411 = _2317;
                            _2412 = _2318;
                            _2413 = _2414;
                        }
                    }
                    frontier_phi_90_pred = _2318;
                    frontier_phi_90_pred_1 = _2313;
                    frontier_phi_90_pred_2 = _2314;
                    frontier_phi_90_pred_3 = _2315;
                    frontier_phi_90_pred_4 = _2316;
                    frontier_phi_90_pred_5 = _2317;
                }
                _2069 = frontier_phi_90_pred;
                _2059 = frontier_phi_90_pred_1;
                _2061 = frontier_phi_90_pred_2;
                _2063 = frontier_phi_90_pred_3;
                _2065 = frontier_phi_90_pred_4;
                _2067 = frontier_phi_90_pred_5;
                uint _2239 = _2238 + 1u;
                if (_2239 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2232 = _2059;
                    _2233 = _2061;
                    _2234 = _2063;
                    _2235 = _2065;
                    _2236 = _2067;
                    _2237 = _2069;
                    _2238 = _2239;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2058 = _2059;
            _2060 = _2061;
            _2062 = _2063;
            _2064 = _2065;
            _2066 = _2067;
            _2068 = _2069;
        }
        uvec4 _2072 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2073 = _2072.z;
        uint _2075 = (_2073 >> 8u) & 15u;
        float _2203;
        float _2205;
        float _2207;
        float _2209;
        float _2211;
        float _2213;
        if (((4294967295u << _2075) & _1967) == 0u)
        {
            _2203 = _2058;
            _2205 = _2060;
            _2207 = _2062;
            _2209 = _2064;
            _2211 = _2066;
            _2213 = _2068;
        }
        else
        {
            float _2228 = inversesqrt(dot(vec3(_1921, _1922, _1923), vec3(_1921, _1922, _1923)));
            float frontier_phi_81_82_ladder;
            float frontier_phi_81_82_ladder_1;
            float frontier_phi_81_82_ladder_2;
            float frontier_phi_81_82_ladder_3;
            float frontier_phi_81_82_ladder_4;
            float frontier_phi_81_82_ladder_5;
            if (_2075 < ((_2073 >> 12u) & 15u))
            {
                float _2204;
                float _2206;
                float _2208;
                float _2210;
                float _2212;
                float _2214;
                float _2390 = _2058;
                float _2391 = _2060;
                float _2392 = _2062;
                float _2393 = _2064;
                float _2394 = _2066;
                float _2395 = _2068;
                uint _2396 = _2075;
                uint _2405;
                bool _2406;
                for (;;)
                {
                    _2405 = texelFetch(g_lightClassification, int((((_1961 << 5u) + (_1947 << 9u)) + (_2396 << 2u)) >> 2u)).x;
                    _2406 = _2405 == 0u;
                    float frontier_phi_99_pred;
                    float frontier_phi_99_pred_1;
                    float frontier_phi_99_pred_2;
                    float frontier_phi_99_pred_3;
                    float frontier_phi_99_pred_4;
                    float frontier_phi_99_pred_5;
                    if (_2406)
                    {
                        frontier_phi_99_pred = _2393;
                        frontier_phi_99_pred_1 = _2392;
                        frontier_phi_99_pred_2 = _2391;
                        frontier_phi_99_pred_3 = _2390;
                        frontier_phi_99_pred_4 = _2395;
                        frontier_phi_99_pred_5 = _2394;
                    }
                    else
                    {
                        float _2561;
                        float _2562;
                        float _2563;
                        float _2564;
                        float _2565;
                        float _2566;
                        float _2810;
                        float _2811;
                        float _2812;
                        float _2813;
                        float _2814;
                        float _2815;
                        float _2574 = _2390;
                        float _2575 = _2391;
                        float _2576 = _2392;
                        float _2577 = _2393;
                        float _2578 = _2394;
                        float _2579 = _2395;
                        uint _2580 = _2405;
                        uint _2581;
                        vec4 _2606;
                        float _2607;
                        vec4 _2622;
                        vec3 _2634;
                        vec4 _2649;
                        vec4 _2664;
                        float _2710;
                        bool _2711;
                        for (;;)
                        {
                            uint _2591 = ((_2396 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2580));
                            _2581 = (_2580 + 4294967295u) & _2580;
                            uint _2593 = _2591 * 40u;
                            _2606 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2593)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2593 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2593 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2593 + 3u)).x));
                            _2607 = _2606.w;
                            uint _2609 = (_2591 * 40u) + 4u;
                            _2622 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2609)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2609 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2609 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2609 + 3u)).x));
                            uint _2624 = (_2591 * 40u) + 8u;
                            _2634 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2624)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2624 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2624 + 2u)).x));
                            uint _2636 = (_2591 * 40u) + 16u;
                            _2649 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2636)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2636 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2636 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2636 + 3u)).x));
                            uint _2651 = (_2591 * 40u) + 20u;
                            _2664 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2651)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2651 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2651 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2651 + 3u)).x));
                            uint _2666 = (_2591 * 40u) + 24u;
                            vec4 _2679 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2666)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2666 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2666 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2666 + 3u)).x));
                            uint _2685 = (_2591 * 40u) + 28u;
                            vec4 _2698 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2685)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2685 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2685 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2685 + 3u)).x));
                            _2710 = fma(_1923, _2698.z, fma(_1922, _2698.y, _2698.x * _1921)) + _2698.w;
                            _2711 = !((fma(_1923, _2679.z, fma(_1922, _2679.y, _2679.x * _1921)) + _2679.w) <= 0.0);
                            float frontier_phi_105_pred;
                            float frontier_phi_105_pred_1;
                            float frontier_phi_105_pred_2;
                            float frontier_phi_105_pred_3;
                            float frontier_phi_105_pred_4;
                            float frontier_phi_105_pred_5;
                            if (_2711)
                            {
                                float _2738 = _2606.x - _1921;
                                float _2739 = _2606.y - _1922;
                                float _2740 = _2606.z - _1923;
                                float _2741 = dot(vec3(_2738, _2739, _2740), vec3(_2738, _2739, _2740));
                                float _2744 = inversesqrt(_2741);
                                float _2745 = _2744 * _2738;
                                float _2746 = _2744 * _2739;
                                float _2747 = _2744 * _2740;
                                float _2751 = 1.0 - (_2741 / (_2607 * _2607));
                                float _3638 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
                                float _2752 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
                                float _2756 = sqrt(_2741) * _2622.w;
                                float _2758 = 1.39999997615814208984375 / (_2756 + 1.39999997615814208984375);
                                float _2759 = _2758 * _2758;
                                float _2760 = 1.0 - _2759;
                                float _2762 = (_2760 * dot(vec3(_2745, _2746, _2747), vec3(0.0))) + _2759;
                                float _2765 = _2756 * _2756;
                                float _2769 = (fma(_1923, _2649.z, fma(_1922, _2649.y, _2649.x * _1921)) + _2649.w) / _2710;
                                float _2770 = (fma(_1923, _2664.z, fma(_1922, _2664.y, _2664.x * _1921)) + _2664.w) / _2710;
                                float _2774 = 1.0 - dot(vec2(_2769, _2770), vec2(_2769, _2770));
                                float _3654 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
                                float _2775 = isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0));
                                float _2776 = _2775 * (((isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0))) * _2752) / ((_2765 * 0.699999988079071044921875) + 1.0));
                                float _2786 = dot(vec3(0.0), vec3((-0.0) - (_1921 * _2228), (-0.0) - (_1922 * _2228), (-0.0) - (_1923 * _2228)));
                                float _3665 = isnan(0.0) ? _2786 : (isnan(_2786) ? 0.0 : max(_2786, 0.0));
                                float _2794 = (_2760 * dot(vec3(0.0), vec3(_2745, _2746, _2747))) + _2759;
                                float _3676 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
                                float _2795 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
                                float _2799 = (0.5 / (((isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) + 9.9999999392252902907785028219223e-09) + _2795)) * _2795;
                                float _3687 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
                                float _2806 = (_2775 * _2752) * (((isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * 3.1415927410125732421875) / ((_2765 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_105_pred = _2776 * _2622.z;
                                frontier_phi_105_pred_1 = _2806 * _2634.x;
                                frontier_phi_105_pred_2 = _2806 * _2634.y;
                                frontier_phi_105_pred_3 = _2806 * _2634.z;
                                frontier_phi_105_pred_4 = _2776 * _2622.x;
                                frontier_phi_105_pred_5 = _2776 * _2622.y;
                            }
                            else
                            {
                                frontier_phi_105_pred = 0.0;
                                frontier_phi_105_pred_1 = 0.0;
                                frontier_phi_105_pred_2 = 0.0;
                                frontier_phi_105_pred_3 = 0.0;
                                frontier_phi_105_pred_4 = 0.0;
                                frontier_phi_105_pred_5 = 0.0;
                            }
                            _2815 = frontier_phi_105_pred;
                            _2810 = frontier_phi_105_pred_1;
                            _2811 = frontier_phi_105_pred_2;
                            _2812 = frontier_phi_105_pred_3;
                            _2813 = frontier_phi_105_pred_4;
                            _2814 = frontier_phi_105_pred_5;
                            _2564 = _2813 + _2577;
                            _2565 = _2814 + _2578;
                            _2566 = _2815 + _2579;
                            _2561 = _2810 + _2574;
                            _2562 = _2811 + _2575;
                            _2563 = _2812 + _2576;
                            if (_2581 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2574 = _2561;
                                _2575 = _2562;
                                _2576 = _2563;
                                _2577 = _2564;
                                _2578 = _2565;
                                _2579 = _2566;
                                _2580 = _2581;
                                continue;
                            }
                        }
                        frontier_phi_99_pred = _2564;
                        frontier_phi_99_pred_1 = _2563;
                        frontier_phi_99_pred_2 = _2562;
                        frontier_phi_99_pred_3 = _2561;
                        frontier_phi_99_pred_4 = _2566;
                        frontier_phi_99_pred_5 = _2565;
                    }
                    _2210 = frontier_phi_99_pred;
                    _2208 = frontier_phi_99_pred_1;
                    _2206 = frontier_phi_99_pred_2;
                    _2204 = frontier_phi_99_pred_3;
                    _2214 = frontier_phi_99_pred_4;
                    _2212 = frontier_phi_99_pred_5;
                    uint _2397 = _2396 + 1u;
                    if (_2397 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2390 = _2204;
                        _2391 = _2206;
                        _2392 = _2208;
                        _2393 = _2210;
                        _2394 = _2212;
                        _2395 = _2214;
                        _2396 = _2397;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_81_82_ladder = _2214;
                frontier_phi_81_82_ladder_1 = _2210;
                frontier_phi_81_82_ladder_2 = _2208;
                frontier_phi_81_82_ladder_3 = _2206;
                frontier_phi_81_82_ladder_4 = _2204;
                frontier_phi_81_82_ladder_5 = _2212;
            }
            else
            {
                frontier_phi_81_82_ladder = _2068;
                frontier_phi_81_82_ladder_1 = _2064;
                frontier_phi_81_82_ladder_2 = _2062;
                frontier_phi_81_82_ladder_3 = _2060;
                frontier_phi_81_82_ladder_4 = _2058;
                frontier_phi_81_82_ladder_5 = _2066;
            }
            _2203 = frontier_phi_81_82_ladder_4;
            _2205 = frontier_phi_81_82_ladder_3;
            _2207 = frontier_phi_81_82_ladder_2;
            _2209 = frontier_phi_81_82_ladder_1;
            _2211 = frontier_phi_81_82_ladder_5;
            _2213 = frontier_phi_81_82_ladder;
        }
        float _2218 = isnan(1.0) ? _745 : (isnan(_745) ? 1.0 : min(_745, 1.0));
        _1980 = (_2218 * _2209) + _1757;
        _1982 = (_2218 * _2211) + _1758;
        _1984 = (_2218 * _2213) + _1759;
        _1986 = ((_2203 * 0.039999999105930328369140625) * _2218) + _1862;
        _1988 = ((_2205 * 0.039999999105930328369140625) * _2218) + _1863;
        _1990 = ((_2207 * 0.039999999105930328369140625) * _2218) + _1864;
    }
    else
    {
        _1980 = _1757;
        _1982 = _1758;
        _1984 = _1759;
        _1986 = _1862;
        _1988 = _1863;
        _1990 = _1864;
    }
    float _3703 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _3714 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _3725 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _2007 = ((isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * (_1980 + ((isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0))) * _745))) + ((_1986 + ((isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0))) * _1448)) * cbPerFrame._m0[3u].x);
    float _2008 = ((isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))) * (_1982 + ((isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0))) * _745))) + ((_1988 + ((isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0))) * _1448)) * cbPerFrame._m0[3u].x);
    float _2009 = ((isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * (_1984 + ((isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0))) * _745))) + ((_1990 + ((isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0))) * _1448)) * cbPerFrame._m0[3u].x);
    uint _2013 = _719 + 6u;
    float _2021 = _705 / cbSceneParam._m0[86u].x;
    float _2022 = _706 / cbSceneParam._m0[86u].y;
    vec4 _2036 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2021, _2022, (log2((isnan(cbSceneParam._m0[77u].w) ? _692 : (isnan(_692) ? cbSceneParam._m0[77u].w : min(_692, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2038 = _2036.x;
    float _2039 = _2036.y;
    float _2040 = _2036.z;
    float _2041 = _2036.w;
    float _2121;
    float _2123;
    float _2125;
    float _2127;
    if (_692 > cbSceneParam._m0[78u].w)
    {
        float _2083 = isnan(_692) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _692 : min(cbSceneParam._m0[80u].w, _692));
        float _2084 = _2083 / _692;
        float _2095 = _2084 * _265;
        float _2096 = _266 * _2084;
        float _2097 = (-0.0) - _2096;
        float _2098 = _2084 * _267;
        float _2100 = (cbSceneParam._m0[77u].w * _2097) / _2083;
        float _2101 = _2100 + cbSceneParam._m0[79u].w;
        float _2102 = cbSceneParam._m0[79u].w - _2096;
        float _2108 = sqrt(((_2095 * _2095) + (_2096 * _2096)) + (_2098 * _2098));
        float _2111 = (1.0 - (cbSceneParam._m0[77u].w / _2083)) * _2108;
        float _2117 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2119 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2326;
        if (abs((_2097 - _2100) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2326 = ((((_2101 > 0.0) ? exp2(_2117 * _2101) : (2.0 - exp2(_2119 * _2101))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2111;
        }
        else
        {
            float _2261 = 1.0 / cbSceneParam._m0[80u].x;
            float _2262 = isnan(_2102) ? _2101 : (isnan(_2101) ? _2102 : max(_2101, _2102));
            float _2263 = isnan(_2102) ? _2101 : (isnan(_2101) ? _2102 : min(_2101, _2102));
            float _2272 = isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : min(_2262, 0.0));
            float _2273 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : min(_2263, 0.0));
            _2326 = ((abs(_2108 / _2097) * cbSceneParam._m0[80u].y) * ((((_2272 - _2273) * 2.0) - ((exp2(_2117 * (isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0)))) - exp2(_2117 * (isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0))))) * _2261)) - ((exp2(_2119 * _2272) - exp2(_2119 * _2273)) * _2261))) + (_2111 * cbSceneParam._m0[80u].z);
        }
        vec4 _2328 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2021, _2022, 1.0), 0.0);
        float _2337 = exp2((_2326 * (-1.44269502162933349609375)) * (1.0 - _2328.w));
        float _2338 = log2(_2337);
        float _2354 = log2(_2041);
        _2121 = (exp2(_2354 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2338 * cbSceneParam._m0[78u].x)) * _2328.x) / cbSceneParam._m0[78u].x)) + _2038;
        _2123 = (exp2(_2354 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2338 * cbSceneParam._m0[78u].y)) * _2328.y) / cbSceneParam._m0[78u].y)) + _2039;
        _2125 = (exp2(_2354 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2338 * cbSceneParam._m0[78u].z)) * _2328.z) / cbSceneParam._m0[78u].z)) + _2040;
        _2127 = _2337 * _2041;
    }
    else
    {
        _2121 = _2038;
        _2123 = _2039;
        _2125 = _2040;
        _2127 = _2041;
    }
    float _2139 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2140 = _2139 == 3.0;
    float _2142 = log2(_2127);
    float _2149 = exp2(_2142 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0)));
    float _2150 = exp2(_2142 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0)));
    float _2151 = exp2(_2142 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0)));
    float _2160 = (_2139 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2160 * (_2140 ? _2149 : (_2149 + (cbSceneParam._m0[72u].w * _2121)));
    SV_Target.y = _2160 * (_2140 ? _2150 : (_2150 + (cbSceneParam._m0[72u].w * _2123)));
    SV_Target.z = _2160 * (_2140 ? _2151 : (_2151 + (cbSceneParam._m0[72u].w * _2125)));
    SV_Target.w = cbInstanceData._m0[_2013].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2013].w;
}


