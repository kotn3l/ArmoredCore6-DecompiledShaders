#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _788;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _198 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _246 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _256 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _246);
    float _257 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _246);
    float _258 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _246);
    vec4 _277 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _312 = cbMtdParam._m0[24u].x + _256;
    float _313 = cbMtdParam._m0[24u].y + _257;
    float _314 = cbMtdParam._m0[24u].z + _258;
    float _331 = (-0.0) - dot(vec3(_312, _313, _314), vec3(_187 * _180, _187 * _181, _187 * _182));
    float _332 = (-0.0) - dot(vec3(_312, _313, _314), vec3(_198 * TANGENT.x, _198 * TANGENT.y, _198 * TANGENT.z));
    float _333 = (-0.0) - dot(vec3(_312, _313, _314), vec3((-0.0) - (NORMAL.x * _194), (-0.0) - (NORMAL.y * _194), (-0.0) - (NORMAL.z * _194)));
    float _337 = inversesqrt(dot(vec3(_331, _332, _333), vec3(_331, _332, _333)));
    float _340 = _337 * _333;
    float _343 = ((_337 * _331) + (((_277.x * 2.0) + (-1.0)) * cbMtdParam._m0[22u].x)) * cbMtdParam._m0[20u].w;
    float _344 = ((_337 * _332) + (((_277.y * 2.0) + (-1.0)) * cbMtdParam._m0[22u].y)) * cbMtdParam._m0[20u].z;
    float _345 = fract(TEXCOORD.x);
    float _346 = fract(TEXCOORD.y);
    float _352;
    if (_343 > 0.0)
    {
        _352 = (1.0 - _345) / _343;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_343 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _345) / _343;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _352 = frontier_phi_3_2_ladder;
    }
    float _360;
    if (_344 > 0.0)
    {
        _360 = (1.0 - _346) / _344;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_344 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _346) / _344;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _360 = frontier_phi_7_6_ladder;
    }
    float _364 = (_340 > 0.0) ? (cbMtdParam._m0[16u].x / _340) : 5000.0;
    float _365 = isnan(_360) ? _352 : (isnan(_352) ? _360 : min(_352, _360));
    float _366 = isnan(_364) ? _365 : (isnan(_365) ? _364 : min(_365, _364));
    float _370 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _377 = ((_366 * _340) + _370) / _370;
    vec4 _402 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * ((((((_345 + (-0.5)) + (_366 * _343)) / _377) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * ((((((_346 + (-0.5)) + (_366 * _344)) / _377) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    float _412 = cbMtdParam._m0[9u].x * _402.x;
    float _413 = cbMtdParam._m0[9u].y * _402.y;
    float _414 = cbMtdParam._m0[9u].z * _402.z;
    float _2962 = isnan(0.0) ? _412 : (isnan(_412) ? 0.0 : max(_412, 0.0));
    float _2973 = isnan(0.0) ? _413 : (isnan(_413) ? 0.0 : max(_413, 0.0));
    float _2984 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _433 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _437 = inversesqrt(dot(vec3(_256, _257, _258), vec3(_256, _257, _258)));
    float _438 = _256 * _437;
    float _439 = _257 * _437;
    float _440 = _258 * _437;
    float _446 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _447 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _460 = uint(roundEven(NORMAL.w)) * 13u;
    uint _463 = (_460 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _469 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2962 : (isnan(_2962) ? 1.0 : min(_2962, 1.0)))) * cbInstanceData._m0[_463].x;
    float _470 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2973 : (isnan(_2973) ? 1.0 : min(_2973, 1.0)))) * cbInstanceData._m0[_463].y;
    float _471 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2984 : (isnan(_2984) ? 1.0 : min(_2984, 1.0)))) * cbInstanceData._m0[_463].z;
    float _2995 = isnan(0.0) ? _469 : (isnan(_469) ? 0.0 : max(_469, 0.0));
    float _472 = isnan(1.0) ? _2995 : (isnan(_2995) ? 1.0 : min(_2995, 1.0));
    float _3006 = isnan(0.0) ? _470 : (isnan(_470) ? 0.0 : max(_470, 0.0));
    float _473 = isnan(1.0) ? _3006 : (isnan(_3006) ? 1.0 : min(_3006, 1.0));
    float _3017 = isnan(0.0) ? _471 : (isnan(_471) ? 0.0 : max(_471, 0.0));
    float _474 = isnan(1.0) ? _3017 : (isnan(_3017) ? 1.0 : min(_3017, 1.0));
    vec4 _483 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _446, cbSceneParam._m0[86u].y * _447));
    float _486 = _483.x * TEXCOORD_4.z;
    float _487 = (-0.0) - _438;
    float _488 = (-0.0) - _439;
    float _489 = (-0.0) - _440;
    float _511 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _515 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _519 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _787;
    float _789;
    float _790;
    float _791;
    float _792;
    float _793;
    float _794;
    float _795;
    float _796;
    float _797;
    float _798;
    float _799;
    float _800;
    float _801;
    float _802;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _575 = (cbModelParam._m0[37u].x * ((((fma(_519, cbModelParam._m0[26u].z, fma(_515, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _511)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _577 = (cbModelParam._m0[37u].y * ((((fma(_519, cbModelParam._m0[27u].z, fma(_515, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _511)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _578 = (((((fma(_519, cbModelParam._m0[28u].z, fma(_515, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _511)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _581 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_575, _577, _578), 0.0);
        vec4 _588 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_575, _577, _578), 0.0);
        vec4 _595 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_575, _577, _578), 0.0);
        vec4 _602 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_575, _577, _578), 0.0);
        float _615 = exp2((_581.w + (-0.5)) * 20.0) * 2.0;
        float _616 = _615 * (_581.x + (-0.5));
        float _617 = _615 * (_581.y + (-0.5));
        float _618 = _615 * (_581.z + (-0.5));
        float _625 = exp2((_588.w + (-0.5)) * 20.0) * 2.0;
        float _626 = _625 * (_588.x + (-0.5));
        float _627 = _625 * (_588.y + (-0.5));
        float _628 = _625 * (_588.z + (-0.5));
        float _635 = exp2((_595.w + (-0.5)) * 20.0) * 2.0;
        float _636 = _635 * (_595.x + (-0.5));
        float _637 = _635 * (_595.y + (-0.5));
        float _638 = _635 * (_595.z + (-0.5));
        float _645 = exp2((_602.w + (-0.5)) * 20.0) * 2.0;
        float _646 = _645 * (_602.x + (-0.5));
        float _647 = _645 * (_602.y + (-0.5));
        float _648 = _645 * (_602.z + (-0.5));
        float _649 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
        float _650 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
        float _651 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
        float _652 = _616 * 0.5;
        float _653 = _626 * 0.5;
        float _654 = _636 * 0.5;
        float _655 = dot(vec3(_652, _653, _654), vec3(_652, _653, _654));
        float _660 = (_655 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_655);
        float _669 = (dot(vec3(0.0), vec3(_660 * _652, _660 * _653, _660 * _654)) + 1.0) * 0.5;
        float _3043 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
        float _679 = sqrt(((_653 * _653) + (_652 * _652)) + (_654 * _654)) / (_649 + 9.9999997473787516355514526367188e-06);
        float _3054 = isnan(0.0) ? _679 : (isnan(_679) ? 0.0 : max(_679, 0.0));
        float _680 = isnan(1.0) ? _3054 : (isnan(_3054) ? 1.0 : min(_3054, 1.0));
        float _681 = _680 * 2.0;
        float _685 = (1.0 - _680) / (_680 + 1.0);
        float _3065 = isnan(0.0) ? _685 : (isnan(_685) ? 0.0 : max(_685, 0.0));
        float _686 = isnan(1.0) ? _3065 : (isnan(_3065) ? 1.0 : min(_3065, 1.0));
        float _695 = ((((1.0 - _686) * (_681 + 2.0)) * exp2(log2(isnan(1.0) ? _3043 : (isnan(_3043) ? 1.0 : min(_3043, 1.0))) * (_681 + 1.0))) + _686) * _649;
        float _696 = _617 * 0.5;
        float _697 = _627 * 0.5;
        float _698 = _637 * 0.5;
        float _699 = dot(vec3(_696, _697, _698), vec3(_696, _697, _698));
        float _704 = (_699 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_699);
        float _712 = (dot(vec3(0.0), vec3(_704 * _696, _704 * _697, _704 * _698)) + 1.0) * 0.5;
        float _3076 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        float _721 = sqrt(((_697 * _697) + (_696 * _696)) + (_698 * _698)) / (_650 + 9.9999997473787516355514526367188e-06);
        float _3087 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
        float _722 = isnan(1.0) ? _3087 : (isnan(_3087) ? 1.0 : min(_3087, 1.0));
        float _723 = _722 * 2.0;
        float _727 = (1.0 - _722) / (_722 + 1.0);
        float _3098 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        float _728 = isnan(1.0) ? _3098 : (isnan(_3098) ? 1.0 : min(_3098, 1.0));
        float _737 = ((((1.0 - _728) * (_723 + 2.0)) * exp2(log2(isnan(1.0) ? _3076 : (isnan(_3076) ? 1.0 : min(_3076, 1.0))) * (_723 + 1.0))) + _728) * _650;
        float _738 = _618 * 0.5;
        float _739 = _628 * 0.5;
        float _740 = _638 * 0.5;
        float _741 = dot(vec3(_738, _739, _740), vec3(_738, _739, _740));
        float _746 = (_741 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_741);
        float _754 = (dot(vec3(0.0), vec3(_746 * _738, _746 * _739, _746 * _740)) + 1.0) * 0.5;
        float _3109 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        float _763 = sqrt(((_739 * _739) + (_738 * _738)) + (_740 * _740)) / (_651 + 9.9999997473787516355514526367188e-06);
        float _3120 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
        float _764 = isnan(1.0) ? _3120 : (isnan(_3120) ? 1.0 : min(_3120, 1.0));
        float _765 = _764 * 2.0;
        float _769 = (1.0 - _764) / (_764 + 1.0);
        float _3131 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
        float _770 = isnan(1.0) ? _3131 : (isnan(_3131) ? 1.0 : min(_3131, 1.0));
        float _779 = ((((1.0 - _770) * (_765 + 2.0)) * exp2(log2(isnan(1.0) ? _3109 : (isnan(_3109) ? 1.0 : min(_3109, 1.0))) * (_765 + 1.0))) + _770) * _651;
        _787 = _618;
        _789 = _617;
        _790 = _616;
        _791 = _628;
        _792 = _627;
        _793 = _626;
        _794 = _638;
        _795 = _637;
        _796 = _636;
        _797 = _651;
        _798 = _650;
        _799 = _649;
        _800 = cbModelParam._m0[36u].z * (isnan(0.0) ? _695 : (isnan(_695) ? 0.0 : max(_695, 0.0)));
        _801 = cbModelParam._m0[36u].z * (isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0)));
        _802 = cbModelParam._m0[36u].z * (isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0)));
    }
    else
    {
        _787 = _788;
        _789 = _788;
        _790 = _788;
        _791 = _788;
        _792 = _788;
        _793 = _788;
        _794 = _788;
        _795 = _788;
        _796 = _788;
        _797 = _788;
        _798 = _788;
        _799 = _788;
        _800 = 0.0;
        _801 = 0.0;
        _802 = 0.0;
    }
    float _1063;
    float _1064;
    float _1065;
    float _1066;
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _856 = (cbModelParam._m0[38u].x * ((((fma(_519, cbModelParam._m0[30u].z, fma(_515, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _511)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _857 = (cbModelParam._m0[38u].y * ((((fma(_519, cbModelParam._m0[31u].z, fma(_515, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _511)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _858 = (((((fma(_519, cbModelParam._m0[32u].z, fma(_515, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _511)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _860 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_856, _857, _858), 0.0);
        vec4 _867 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_856, _857, _858), 0.0);
        vec4 _874 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_856, _857, _858), 0.0);
        vec4 _881 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_856, _857, _858), 0.0);
        float _893 = exp2((_860.w + (-0.5)) * 20.0) * 2.0;
        float _894 = _893 * (_860.x + (-0.5));
        float _895 = _893 * (_860.y + (-0.5));
        float _896 = _893 * (_860.z + (-0.5));
        float _903 = exp2((_867.w + (-0.5)) * 20.0) * 2.0;
        float _904 = _903 * (_867.x + (-0.5));
        float _905 = _903 * (_867.y + (-0.5));
        float _906 = _903 * (_867.z + (-0.5));
        float _913 = exp2((_874.w + (-0.5)) * 20.0) * 2.0;
        float _914 = _913 * (_874.x + (-0.5));
        float _915 = _913 * (_874.y + (-0.5));
        float _916 = _913 * (_874.z + (-0.5));
        float _923 = exp2((_881.w + (-0.5)) * 20.0) * 2.0;
        float _924 = _923 * (_881.x + (-0.5));
        float _925 = _923 * (_881.y + (-0.5));
        float _926 = _923 * (_881.z + (-0.5));
        float _927 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _928 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _929 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _930 = _894 * 0.5;
        float _931 = _904 * 0.5;
        float _932 = _914 * 0.5;
        float _933 = dot(vec3(_930, _931, _932), vec3(_930, _931, _932));
        float _938 = (_933 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_933);
        float _946 = (dot(vec3(0.0), vec3(_938 * _930, _938 * _931, _938 * _932)) + 1.0) * 0.5;
        float _3172 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _955 = sqrt(((_931 * _931) + (_930 * _930)) + (_932 * _932)) / (_927 + 9.9999997473787516355514526367188e-06);
        float _3183 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _956 = isnan(1.0) ? _3183 : (isnan(_3183) ? 1.0 : min(_3183, 1.0));
        float _957 = _956 * 2.0;
        float _961 = (1.0 - _956) / (_956 + 1.0);
        float _3194 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _962 = isnan(1.0) ? _3194 : (isnan(_3194) ? 1.0 : min(_3194, 1.0));
        float _971 = ((((1.0 - _962) * (_957 + 2.0)) * exp2(log2(isnan(1.0) ? _3172 : (isnan(_3172) ? 1.0 : min(_3172, 1.0))) * (_957 + 1.0))) + _962) * _927;
        float _972 = _895 * 0.5;
        float _973 = _905 * 0.5;
        float _974 = _915 * 0.5;
        float _975 = dot(vec3(_972, _973, _974), vec3(_972, _973, _974));
        float _980 = (_975 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_975);
        float _988 = (dot(vec3(0.0), vec3(_980 * _972, _980 * _973, _980 * _974)) + 1.0) * 0.5;
        float _3205 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _997 = sqrt(((_973 * _973) + (_972 * _972)) + (_974 * _974)) / (_928 + 9.9999997473787516355514526367188e-06);
        float _3216 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _998 = isnan(1.0) ? _3216 : (isnan(_3216) ? 1.0 : min(_3216, 1.0));
        float _999 = _998 * 2.0;
        float _1003 = (1.0 - _998) / (_998 + 1.0);
        float _3227 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _3227 : (isnan(_3227) ? 1.0 : min(_3227, 1.0));
        float _1013 = ((((1.0 - _1004) * (_999 + 2.0)) * exp2(log2(isnan(1.0) ? _3205 : (isnan(_3205) ? 1.0 : min(_3205, 1.0))) * (_999 + 1.0))) + _1004) * _928;
        float _1014 = _896 * 0.5;
        float _1015 = _906 * 0.5;
        float _1016 = _916 * 0.5;
        float _1017 = dot(vec3(_1014, _1015, _1016), vec3(_1014, _1015, _1016));
        float _1022 = (_1017 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1017);
        float _1030 = (dot(vec3(0.0), vec3(_1022 * _1014, _1022 * _1015, _1022 * _1016)) + 1.0) * 0.5;
        float _3238 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1039 = sqrt(((_1015 * _1015) + (_1014 * _1014)) + (_1016 * _1016)) / (_929 + 9.9999997473787516355514526367188e-06);
        float _3249 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3249 : (isnan(_3249) ? 1.0 : min(_3249, 1.0));
        float _1041 = _1040 * 2.0;
        float _1045 = (1.0 - _1040) / (_1040 + 1.0);
        float _3260 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3260 : (isnan(_3260) ? 1.0 : min(_3260, 1.0));
        float _1055 = ((((1.0 - _1046) * (_1041 + 2.0)) * exp2(log2(isnan(1.0) ? _3238 : (isnan(_3238) ? 1.0 : min(_3238, 1.0))) * (_1041 + 1.0))) + _1046) * _929;
        _1063 = _896;
        _1064 = _895;
        _1065 = _894;
        _1066 = _906;
        _1067 = _905;
        _1068 = _904;
        _1069 = _916;
        _1070 = _915;
        _1071 = _914;
        _1072 = _929;
        _1073 = _928;
        _1074 = _927;
        _1075 = cbModelParam._m0[36u].w * (isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0)));
        _1076 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0)));
        _1077 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0)));
    }
    else
    {
        _1063 = _788;
        _1064 = _788;
        _1065 = _788;
        _1066 = _788;
        _1067 = _788;
        _1068 = _788;
        _1069 = _788;
        _1070 = _788;
        _1071 = _788;
        _1072 = _788;
        _1073 = _788;
        _1074 = _788;
        _1075 = 0.0;
        _1076 = 0.0;
        _1077 = 0.0;
    }
    float _1087 = (cbModelParam._m0[1u].x * (_1075 - _800)) + _800;
    float _1088 = (cbModelParam._m0[1u].x * (_1076 - _801)) + _801;
    float _1089 = (cbModelParam._m0[1u].x * (_1077 - _802)) + _802;
    float _1110 = fma(_1089, cbSceneParam._m0[89u].z, fma(_1088, cbSceneParam._m0[89u].y, _1087 * cbSceneParam._m0[89u].x));
    float _1113 = fma(_1089, cbSceneParam._m0[90u].z, fma(_1088, cbSceneParam._m0[90u].y, _1087 * cbSceneParam._m0[90u].x));
    float _1116 = fma(_1089, cbSceneParam._m0[91u].z, fma(_1088, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1087));
    float _1131 = _438 * (-0.5);
    float _1132 = _439 * (-0.5);
    float _1133 = _440 * (-0.5);
    float _1134 = dot(vec4(_1131, _1132, _1133, 1.0), vec4(_1065, _1068, _1071, _1074));
    float _1137 = dot(vec4(_1131, _1132, _1133, 1.0), vec4(_1064, _1067, _1070, _1073));
    float _1140 = dot(vec4(_1131, _1132, _1133, 1.0), vec4(_1063, _1066, _1069, _1072));
    float _1174;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1147 = dot(vec4(_1131, _1132, _1133, 1.0), vec4(_787, _791, _794, _797));
        float _1151 = dot(vec4(_1131, _1132, _1133, 1.0), vec4(_789, _792, _795, _798));
        float _1155 = dot(vec4(_1131, _1132, _1133, 1.0), vec4(_790, _793, _796, _799));
        float _1162 = dot(vec4(cbModelParam._m0[39u]), vec4(_1131, _1132, _1133, 1.0));
        _1174 = dot(vec3(isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0)), isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0)), isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1162) ? 0.0 : (isnan(0.0) ? _1162 : max(0.0, _1162))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1174 = 1.0;
    }
    float _1185;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1176 = dot(vec4(cbModelParam._m0[40u]), vec4(_1131, _1132, _1133, 1.0));
        _1185 = dot(vec3(isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0)), isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0)), isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1176) ? 0.0 : (isnan(0.0) ? _1176 : max(0.0, _1176))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1185 = 1.0;
    }
    float _1189 = (_1185 * cbModelParam._m0[1u].x) + (_1174 * (1.0 - cbModelParam._m0[1u].x));
    float _1198 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1281;
    float _1283;
    float _1285;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1248 = fma(_519, cbModelParam._m0[13u].z, fma(_515, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _511)) + cbModelParam._m0[13u].w;
        float _1252 = fma(_519, cbModelParam._m0[14u].z, fma(_515, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _511)) + cbModelParam._m0[14u].w;
        float _1256 = fma(_519, cbModelParam._m0[15u].z, fma(_515, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _511)) + cbModelParam._m0[15u].w;
        float _1259 = fma(_489, cbModelParam._m0[13u].z, fma(_488, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _487));
        float _1262 = fma(_489, cbModelParam._m0[14u].z, fma(_488, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _487));
        float _1265 = fma(_489, cbModelParam._m0[15u].z, fma(_488, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _487));
        float _1291;
        if (_1259 > 0.0)
        {
            _1291 = abs((1.0 - _1248) / _1259);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1259 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1248 + 1.0) / _1259);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1291 = frontier_phi_22_20_ladder;
        }
        float _1463;
        if (_1262 > 0.0)
        {
            _1463 = abs((1.0 - _1252) / _1262);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1262 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1252 + 1.0) / _1262);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1463 = frontier_phi_31_27_ladder;
        }
        float _1858;
        if (_1265 > 0.0)
        {
            _1858 = abs((1.0 - _1256) / _1265);
        }
        else
        {
            float frontier_phi_43_38_ladder;
            if (_1265 < 0.0)
            {
                frontier_phi_43_38_ladder = abs((_1256 + 1.0) / _1265);
            }
            else
            {
                frontier_phi_43_38_ladder = 5000.0;
            }
            _1858 = frontier_phi_43_38_ladder;
        }
        float _1860 = isnan(_1463) ? _1291 : (isnan(_1291) ? _1463 : min(_1291, _1463));
        float _1861 = isnan(_1858) ? _1860 : (isnan(_1860) ? _1858 : min(_1860, _1858));
        float _1865 = (_1861 * _1259) + _1248;
        float _1866 = (_1861 * _1262) + _1252;
        float _1867 = (_1861 * _1265) + _1256;
        float _1868 = _1861 * 9.9999997473787516355514526367188e-05;
        float _1870 = (-1.0) - _1868;
        float _1872 = _1868 + 1.0;
        float frontier_phi_21_43_ladder;
        float frontier_phi_21_43_ladder_1;
        float frontier_phi_21_43_ladder_2;
        if ((_1867 > _1872) || ((_1867 < _1870) || ((_1866 > _1872) || ((_1866 < _1870) || ((_1865 < _1870) || (_1865 > _1872))))))
        {
            frontier_phi_21_43_ladder = 0.0;
            frontier_phi_21_43_ladder_1 = 0.0;
            frontier_phi_21_43_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2101 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1867, cbModelParam._m0[9u].z, fma(_1866, cbModelParam._m0[9u].y, _1865 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1867, cbModelParam._m0[10u].z, fma(_1866, cbModelParam._m0[10u].y, _1865 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1867, cbModelParam._m0[11u].z, fma(_1866, cbModelParam._m0[11u].y, _1865 * cbModelParam._m0[11u].x))), _1198);
            frontier_phi_21_43_ladder = _2101.y * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_1 = _2101.x * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_2 = _2101.z * cbModelParam._m0[1u].y;
        }
        _1281 = frontier_phi_21_43_ladder_1;
        _1283 = frontier_phi_21_43_ladder;
        _1285 = frontier_phi_21_43_ladder_2;
    }
    else
    {
        vec4 _1269 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_487, _488, _489), _1198);
        _1281 = _1269.x * cbModelParam._m0[1u].y;
        _1283 = _1269.y * cbModelParam._m0[1u].y;
        _1285 = _1269.z * cbModelParam._m0[1u].y;
    }
    float _1288 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1378;
    float _1380;
    float _1382;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1342 = fma(_519, cbModelParam._m0[21u].z, fma(_515, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _511)) + cbModelParam._m0[21u].w;
        float _1346 = fma(_519, cbModelParam._m0[22u].z, fma(_515, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _511)) + cbModelParam._m0[22u].w;
        float _1350 = fma(_519, cbModelParam._m0[23u].z, fma(_515, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _511)) + cbModelParam._m0[23u].w;
        float _1353 = fma(_489, cbModelParam._m0[21u].z, fma(_488, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _487));
        float _1356 = fma(_489, cbModelParam._m0[22u].z, fma(_488, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _487));
        float _1359 = fma(_489, cbModelParam._m0[23u].z, fma(_488, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _487));
        float _1468;
        if (_1353 > 0.0)
        {
            _1468 = abs((1.0 - _1342) / _1353);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1353 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1342 + 1.0) / _1353);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1468 = frontier_phi_33_29_ladder;
        }
        float _1885;
        if (_1356 > 0.0)
        {
            _1885 = abs((1.0 - _1346) / _1356);
        }
        else
        {
            float frontier_phi_45_40_ladder;
            if (_1356 < 0.0)
            {
                frontier_phi_45_40_ladder = abs((_1346 + 1.0) / _1356);
            }
            else
            {
                frontier_phi_45_40_ladder = 5000.0;
            }
            _1885 = frontier_phi_45_40_ladder;
        }
        float _2223;
        if (_1359 > 0.0)
        {
            _2223 = abs((1.0 - _1350) / _1359);
        }
        else
        {
            float frontier_phi_57_52_ladder;
            if (_1359 < 0.0)
            {
                frontier_phi_57_52_ladder = abs((_1350 + 1.0) / _1359);
            }
            else
            {
                frontier_phi_57_52_ladder = 5000.0;
            }
            _2223 = frontier_phi_57_52_ladder;
        }
        float _2225 = isnan(_1885) ? _1468 : (isnan(_1468) ? _1885 : min(_1468, _1885));
        float _2226 = isnan(_2223) ? _2225 : (isnan(_2225) ? _2223 : min(_2225, _2223));
        float _2230 = (_2226 * _1353) + _1342;
        float _2231 = (_2226 * _1356) + _1346;
        float _2232 = (_2226 * _1359) + _1350;
        float _2233 = _2226 * 9.9999997473787516355514526367188e-05;
        float _2234 = (-1.0) - _2233;
        float _2236 = _2233 + 1.0;
        float frontier_phi_30_57_ladder;
        float frontier_phi_30_57_ladder_1;
        float frontier_phi_30_57_ladder_2;
        if ((_2232 > _2236) || ((_2232 < _2234) || ((_2231 > _2236) || ((_2231 < _2234) || ((_2230 < _2234) || (_2230 > _2236))))))
        {
            frontier_phi_30_57_ladder = 0.0;
            frontier_phi_30_57_ladder_1 = 0.0;
            frontier_phi_30_57_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2350 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2232, cbModelParam._m0[17u].z, fma(_2231, cbModelParam._m0[17u].y, _2230 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2232, cbModelParam._m0[18u].z, fma(_2231, cbModelParam._m0[18u].y, _2230 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2232, cbModelParam._m0[19u].z, fma(_2231, cbModelParam._m0[19u].y, _2230 * cbModelParam._m0[19u].x))), _1288);
            frontier_phi_30_57_ladder = _2350.z * cbModelParam._m0[1u].z;
            frontier_phi_30_57_ladder_1 = _2350.y * cbModelParam._m0[1u].z;
            frontier_phi_30_57_ladder_2 = _2350.x * cbModelParam._m0[1u].z;
        }
        _1378 = frontier_phi_30_57_ladder_2;
        _1380 = frontier_phi_30_57_ladder_1;
        _1382 = frontier_phi_30_57_ladder;
    }
    else
    {
        vec4 _1362 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_487, _488, _489), _1288);
        _1378 = _1362.x * cbModelParam._m0[1u].z;
        _1380 = _1362.y * cbModelParam._m0[1u].z;
        _1382 = _1362.z * cbModelParam._m0[1u].z;
    }
    float _1394 = _486 * 0.01200000010430812835693359375;
    float _1396 = _1394 * ((cbModelParam._m0[1u].w * (_1378 - _1281)) + _1281);
    float _1397 = _1394 * ((cbModelParam._m0[1u].w * (_1380 - _1283)) + _1283);
    float _1398 = _1394 * ((cbModelParam._m0[1u].w * (_1382 - _1285)) + _1285);
    float _1401 = fma(_1398, cbSceneParam._m0[89u].z, fma(_1397, cbSceneParam._m0[89u].y, _1396 * cbSceneParam._m0[89u].x));
    float _1404 = fma(_1398, cbSceneParam._m0[90u].z, fma(_1397, cbSceneParam._m0[90u].y, _1396 * cbSceneParam._m0[90u].x));
    float _1407 = fma(_1398, cbSceneParam._m0[91u].z, fma(_1397, cbSceneParam._m0[91u].y, _1396 * cbSceneParam._m0[91u].x));
    float _1442 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1446 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1450 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1454 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1455 = _1442 / _1454;
    float _1456 = _1446 / _1454;
    float _1457 = _1450 / _1454;
    float _1605;
    float _1606;
    float _1607;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1484 = ((uint(_1457 > cbSceneParam._m0[59u].y) + uint(_1457 > cbSceneParam._m0[59u].x)) + uint(_1457 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1485 = _1484 + 43u;
        uint _1493 = _1484 + 44u;
        uint _1501 = _1484 + 45u;
        uint _1509 = _1484 + 46u;
        float _1520 = fma(_1454, cbSceneParam._m0[_1485].w, fma(_1450, cbSceneParam._m0[_1485].z, fma(_1446, cbSceneParam._m0[_1485].y, _1442 * cbSceneParam._m0[_1485].x)));
        float _1524 = fma(_1454, cbSceneParam._m0[_1493].w, fma(_1450, cbSceneParam._m0[_1493].z, fma(_1446, cbSceneParam._m0[_1493].y, _1442 * cbSceneParam._m0[_1493].x)));
        float _1532 = fma(_1454, cbSceneParam._m0[_1509].w, fma(_1450, cbSceneParam._m0[_1509].z, fma(_1446, cbSceneParam._m0[_1509].y, _1442 * cbSceneParam._m0[_1509].x)));
        float _1537 = cbSceneParam._m0[33u].z * _1532;
        float _1539 = cbSceneParam._m0[33u].w * _1532;
        float _1542 = fma(_1454, cbSceneParam._m0[_1501].w, fma(_1450, cbSceneParam._m0[_1501].z, fma(_1446, cbSceneParam._m0[_1501].y, _1442 * cbSceneParam._m0[_1501].x))) / _1532;
        float _1590 = (cbSceneParam._m0[33u].x - sqrt(((_1456 * _1456) + (_1455 * _1455)) + (_1457 * _1457))) * cbSceneParam._m0[33u].y;
        float _3386 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        float _1598 = (isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1537 + _1520) / _1532, (_1539 + _1524) / _1532), _1542), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1539 + _1520) / _1532, (_1524 - _1537) / _1532), _1542), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1520 - _1537) / _1532, (_1524 - _1539) / _1532), _1542), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1520 - _1539) / _1532, (_1537 + _1524) / _1532), _1542), 0.0)).x), vec4(0.25)));
        _1605 = 1.0 - (_1598 * cbSceneParam._m0[34u].x);
        _1606 = 1.0 - (_1598 * cbSceneParam._m0[34u].y);
        _1607 = 1.0 - (_1598 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1605 = 1.0;
        _1606 = 1.0;
        _1607 = 1.0;
    }
    float _1671;
    float _1673;
    float _1675;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1659 = fma(_1454, cbSceneParam._m0[63u].w, fma(_1450, cbSceneParam._m0[63u].z, fma(_1446, cbSceneParam._m0[63u].y, _1442 * cbSceneParam._m0[63u].x)));
        float _1660 = fma(_1454, cbSceneParam._m0[60u].w, fma(_1450, cbSceneParam._m0[60u].z, fma(_1446, cbSceneParam._m0[60u].y, _1442 * cbSceneParam._m0[60u].x))) / _1659;
        float _1661 = fma(_1454, cbSceneParam._m0[61u].w, fma(_1450, cbSceneParam._m0[61u].z, fma(_1446, cbSceneParam._m0[61u].y, _1442 * cbSceneParam._m0[61u].x))) / _1659;
        float frontier_phi_42_41_ladder;
        float frontier_phi_42_41_ladder_1;
        float frontier_phi_42_41_ladder_2;
        if ((((_1660 >= cbSceneParam._m0[64u].x) && (_1661 >= cbSceneParam._m0[64u].y)) && (_1660 <= cbSceneParam._m0[64u].z)) && (_1661 <= cbSceneParam._m0[64u].w))
        {
            float _1898 = fma(_1454, cbSceneParam._m0[62u].w, fma(_1450, cbSceneParam._m0[62u].z, fma(_1446, cbSceneParam._m0[62u].y, _1442 * cbSceneParam._m0[62u].x))) / _1659;
            float _1902 = isnan(cbSceneParam._m0[41u].w) ? _1898 : (isnan(_1898) ? cbSceneParam._m0[41u].w : max(_1898, cbSceneParam._m0[41u].w));
            float _1945 = (cbSceneParam._m0[33u].x - sqrt(((_1456 * _1456) + (_1455 * _1455)) + (_1457 * _1457))) * cbSceneParam._m0[33u].y;
            float _3402 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
            float _1952 = (isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1660, cbSceneParam._m0[33u].w + _1661), _1902), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1660, _1661 - cbSceneParam._m0[33u].z), _1902), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1660 - cbSceneParam._m0[33u].z, _1661 - cbSceneParam._m0[33u].w), _1902), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1660 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1661), _1902), 0.0)).x), vec4(0.25)));
            float _1956 = 1.0 - (_1952 * cbSceneParam._m0[34u].x);
            float _1957 = 1.0 - (_1952 * cbSceneParam._m0[34u].y);
            float _1958 = 1.0 - (_1952 * cbSceneParam._m0[34u].z);
            frontier_phi_42_41_ladder = isnan(_1957) ? _1606 : (isnan(_1606) ? _1957 : min(_1606, _1957));
            frontier_phi_42_41_ladder_1 = isnan(_1956) ? _1605 : (isnan(_1605) ? _1956 : min(_1605, _1956));
            frontier_phi_42_41_ladder_2 = isnan(_1958) ? _1607 : (isnan(_1607) ? _1958 : min(_1607, _1958));
        }
        else
        {
            frontier_phi_42_41_ladder = _1606;
            frontier_phi_42_41_ladder_1 = _1605;
            frontier_phi_42_41_ladder_2 = _1607;
        }
        _1671 = frontier_phi_42_41_ladder_1;
        _1673 = frontier_phi_42_41_ladder;
        _1675 = frontier_phi_42_41_ladder_2;
    }
    else
    {
        _1671 = _1605;
        _1673 = _1606;
        _1675 = _1607;
    }
    uvec4 _1680 = floatBitsToUint(cbInstanceData._m0[_460 + 5u]);
    uint _1682 = _1680.x * 14u;
    uint _1683 = _1682 + 13u;
    float _1688 = _486 + (-1.0);
    float _1691 = (cbLight._m0[_1683].x * _1688) + 1.0;
    float _1692 = (cbLight._m0[_1683].y * _1688) + 1.0;
    uint _1693 = _1682 + 5u;
    float _1699 = isnan(1.0) ? _1692 : (isnan(_1692) ? 1.0 : min(_1692, 1.0));
    uint _1703 = _1682 + 4u;
    float _1713 = isnan(1.0) ? _1691 : (isnan(_1691) ? 1.0 : min(_1691, 1.0));
    uint _1717 = _1682 | 1u;
    float _1728 = dot(vec3(cbLight._m0[_1682].xyz), vec3(0.0));
    float _1731 = dot(vec3(cbLight._m0[_1717].xyz), vec3(0.0));
    float _3438 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
    float _3449 = isnan(0.0) ? _1731 : (isnan(_1731) ? 0.0 : max(_1731, 0.0));
    float _1736 = (isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0))) * 0.3183098733425140380859375;
    float _1738 = (isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0))) * 0.3183098733425140380859375;
    float _1745 = ((cbLight._m0[_1693].x * _1699) * _1738) + (((cbLight._m0[_1703].x * _1671) * _1713) * _1736);
    float _1746 = ((_1699 * cbLight._m0[_1693].y) * _1738) + (((cbLight._m0[_1703].y * _1673) * _1713) * _1736);
    float _1747 = ((_1699 * cbLight._m0[_1693].z) * _1738) + (((cbLight._m0[_1703].z * _1675) * _1713) * _1736);
    uint _1748 = _1682 + 8u;
    float _1754 = cbLight._m0[_1682].x + _438;
    float _1755 = cbLight._m0[_1682].y + _439;
    float _1756 = cbLight._m0[_1682].z + _440;
    float _1760 = inversesqrt(dot(vec3(_1754, _1755, _1756), vec3(_1754, _1755, _1756)));
    float _1764 = dot(vec3(0.0), vec3(cbLight._m0[_1682].xyz));
    float _3460 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
    float _1767 = isnan(1.0) ? _3460 : (isnan(_3460) ? 1.0 : min(_3460, 1.0));
    float _1768 = dot(vec3(0.0), vec3(_438, _439, _440));
    float _3471 = isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0));
    float _1771 = isnan(1.0) ? _3471 : (isnan(_3471) ? 1.0 : min(_3471, 1.0));
    float _1772 = dot(vec3(cbLight._m0[_1682].xyz), vec3(_1754 * _1760, _1755 * _1760, _1756 * _1760));
    float _3482 = isnan(0.0) ? _1772 : (isnan(_1772) ? 0.0 : max(_1772, 0.0));
    float _1783 = (exp2(log2(1.0 - (isnan(1.0) ? _3482 : (isnan(_3482) ? 1.0 : min(_3482, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1789 = (0.5 / ((_1767 + 9.9999999392252902907785028219223e-09) + _1771)) * _1767;
    float _3493 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
    float _1791 = (isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0))) * 0.31831014156341552734375;
    uint _1805 = _1682 + 9u;
    float _1811 = cbLight._m0[_1717].x + _438;
    float _1812 = cbLight._m0[_1717].y + _439;
    float _1813 = cbLight._m0[_1717].z + _440;
    float _1817 = inversesqrt(dot(vec3(_1811, _1812, _1813), vec3(_1811, _1812, _1813)));
    float _1821 = dot(vec3(0.0), vec3(cbLight._m0[_1717].xyz));
    float _3504 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
    float _1824 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
    float _1825 = dot(vec3(cbLight._m0[_1717].xyz), vec3(_1811 * _1817, _1812 * _1817, _1813 * _1817));
    float _3515 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
    float _1834 = (exp2(log2(1.0 - (isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1838 = (0.5 / ((_1824 + 9.9999999392252902907785028219223e-09) + _1771)) * _1824;
    float _3526 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
    float _1840 = (isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0))) * 0.31831014156341552734375;
    float _1850 = (((_1834 * cbLight._m0[_1805].x) * _1840) * _1699) + ((((cbLight._m0[_1748].x * _1671) * _1783) * _1791) * _1713);
    float _1851 = (((_1834 * cbLight._m0[_1805].y) * _1840) * _1699) + ((((cbLight._m0[_1748].y * _1673) * _1783) * _1791) * _1713);
    float _1852 = (((_1834 * cbLight._m0[_1805].z) * _1840) * _1699) + ((((cbLight._m0[_1748].z * _1675) * _1783) * _1791) * _1713);
    float _2015;
    float _2017;
    float _2019;
    float _2021;
    float _2023;
    float _2025;
    if (_1680.y == 0u)
    {
        uvec4 _1970 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1971 = _1970.x;
        uint _1982 = uint((float(_1970.y) * floor(float(uint(cbSceneParam._m0[85u].y * _447) / _1971))) + floor(float(uint(cbSceneParam._m0[85u].x * _446) / _1971)));
        float _1992 = (log2(_1457 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1993 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
        uint _1996 = uint(isnan(14.0) ? _1993 : (isnan(_1993) ? 14.0 : min(_1993, 14.0)));
        uvec4 _2001 = texelFetch(g_lightClusterGridBuffer, int(((_1996 << 2u) + (_1982 << 6u)) >> 2u));
        uint _2002 = _2001.x;
        uint _2003 = _1970.z;
        float _2110;
        float _2112;
        float _2114;
        float _2116;
        float _2118;
        float _2120;
        if (((((1u << ((_2003 >> 4u) & 15u)) + 4294967295u) & _2002) == 0u) || ((_2003 & 240u) == 0u))
        {
            _2110 = 0.0;
            _2112 = 0.0;
            _2114 = 0.0;
            _2116 = 0.0;
            _2118 = 0.0;
            _2120 = 0.0;
        }
        else
        {
            float _2111;
            float _2113;
            float _2115;
            float _2117;
            float _2119;
            float _2121;
            float _2278 = 0.0;
            float _2279 = 0.0;
            float _2280 = 0.0;
            float _2281 = 0.0;
            float _2282 = 0.0;
            float _2283 = 0.0;
            uint _2284 = 0u;
            uint _2293;
            bool _2294;
            for (;;)
            {
                _2293 = texelFetch(g_lightClassification, int((((_1996 << 5u) + (_1982 << 9u)) + (_2284 << 2u)) >> 2u)).x;
                _2294 = _2293 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2294)
                {
                    frontier_phi_66_pred = _2279;
                    frontier_phi_66_pred_1 = _2278;
                    frontier_phi_66_pred_2 = _2280;
                    frontier_phi_66_pred_3 = _2283;
                    frontier_phi_66_pred_4 = _2282;
                    frontier_phi_66_pred_5 = _2281;
                }
                else
                {
                    float _2423;
                    float _2424;
                    float _2425;
                    float _2426;
                    float _2427;
                    float _2428;
                    uint _2429;
                    _2423 = _2278;
                    _2424 = _2279;
                    _2425 = _2280;
                    _2426 = _2281;
                    _2427 = _2282;
                    _2428 = _2283;
                    _2429 = _2293;
                    float _2355;
                    float _2356;
                    float _2357;
                    float _2358;
                    float _2359;
                    float _2360;
                    for (;;)
                    {
                        uint _2433 = uint(findLSB(_2429)) + (_2284 << 5u);
                        uint _2430 = (_2429 + 4294967295u) & _2429;
                        uint _2435 = _2433 * 48u;
                        vec4 _2449 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2435)).x, texelFetch(g_PointLightRenderingBuffer, int(_2435 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2435 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2435 + 3u)).x));
                        uint _2455 = (_2433 * 48u) + 4u;
                        vec4 _2468 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2455)).x, texelFetch(g_PointLightRenderingBuffer, int(_2455 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2455 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2455 + 3u)).x));
                        uint _2474 = (_2433 * 48u) + 8u;
                        vec3 _2485 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2474)).x, texelFetch(g_PointLightRenderingBuffer, int(_2474 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2474 + 2u)).x));
                        float _2489 = _2449.x - _1455;
                        float _2490 = _2449.y - _1456;
                        float _2491 = _2449.z - _1457;
                        float _2492 = dot(vec3(_2489, _2490, _2491), vec3(_2489, _2490, _2491));
                        float _2495 = inversesqrt(_2492);
                        float _2504 = 1.0 - (_2492 * _2449.w);
                        float _3547 = isnan(0.0) ? _2504 : (isnan(_2504) ? 0.0 : max(_2504, 0.0));
                        float _2505 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
                        float _2506 = sqrt(_2492) * _2468.w;
                        float _2509 = 1.39999997615814208984375 / (_2506 + 1.39999997615814208984375);
                        float _2510 = _2509 * _2509;
                        float _2513 = ((1.0 - _2510) * dot(vec3(0.0), vec3(_2495 * _2489, _2495 * _2490, _2495 * _2491))) + _2510;
                        float _2516 = _2506 * _2506;
                        float _2520 = ((isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0))) * _2505) / ((_2516 * 0.699999988079071044921875) + 1.0);
                        float _2524 = (-0.0) - _1455;
                        float _2525 = (-0.0) - _1456;
                        float _2526 = (-0.0) - _1457;
                        float _2530 = inversesqrt(dot(vec3(_2524, _2525, _2526), vec3(_2524, _2525, _2526)));
                        float _2534 = dot(vec3(0.0), vec3(_2530 * _2524, _2530 * _2525, _2530 * _2526));
                        float _3563 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
                        float _3574 = isnan(0.0) ? _2513 : (isnan(_2513) ? 0.0 : max(_2513, 0.0));
                        float _2538 = isnan(1.0) ? _3574 : (isnan(_3574) ? 1.0 : min(_3574, 1.0));
                        float _2542 = (0.5 / (((isnan(1.0) ? _3563 : (isnan(_3563) ? 1.0 : min(_3563, 1.0))) + 9.9999999392252902907785028219223e-09) + _2538)) * _2538;
                        float _3585 = isnan(0.0) ? _2542 : (isnan(_2542) ? 0.0 : max(_2542, 0.0));
                        float _2551 = (((isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0))) * 3.1415927410125732421875) / ((_2516 * 2.1991131305694580078125) + 3.141590118408203125)) * _2505;
                        _2358 = (_2520 * _2468.x) + _2426;
                        _2359 = (_2520 * _2468.y) + _2427;
                        _2360 = (_2520 * _2468.z) + _2428;
                        _2355 = (_2551 * _2485.x) + _2423;
                        _2356 = (_2551 * _2485.y) + _2424;
                        _2357 = (_2551 * _2485.z) + _2425;
                        if (_2430 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2423 = _2355;
                            _2424 = _2356;
                            _2425 = _2357;
                            _2426 = _2358;
                            _2427 = _2359;
                            _2428 = _2360;
                            _2429 = _2430;
                        }
                    }
                    frontier_phi_66_pred = _2356;
                    frontier_phi_66_pred_1 = _2355;
                    frontier_phi_66_pred_2 = _2357;
                    frontier_phi_66_pred_3 = _2360;
                    frontier_phi_66_pred_4 = _2359;
                    frontier_phi_66_pred_5 = _2358;
                }
                _2113 = frontier_phi_66_pred;
                _2111 = frontier_phi_66_pred_1;
                _2115 = frontier_phi_66_pred_2;
                _2121 = frontier_phi_66_pred_3;
                _2119 = frontier_phi_66_pred_4;
                _2117 = frontier_phi_66_pred_5;
                uint _2285 = _2284 + 1u;
                if (_2285 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2278 = _2111;
                    _2279 = _2113;
                    _2280 = _2115;
                    _2281 = _2117;
                    _2282 = _2119;
                    _2283 = _2121;
                    _2284 = _2285;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2110 = _2111;
            _2112 = _2113;
            _2114 = _2115;
            _2116 = _2117;
            _2118 = _2119;
            _2120 = _2121;
        }
        uvec4 _2124 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2125 = _2124.z;
        uint _2127 = (_2125 >> 8u) & 15u;
        float _2249;
        float _2251;
        float _2253;
        float _2255;
        float _2257;
        float _2259;
        if (((4294967295u << _2127) & _2002) == 0u)
        {
            _2249 = _2110;
            _2251 = _2112;
            _2253 = _2114;
            _2255 = _2116;
            _2257 = _2118;
            _2259 = _2120;
        }
        else
        {
            float _2274 = inversesqrt(dot(vec3(_1455, _1456, _1457), vec3(_1455, _1456, _1457)));
            float frontier_phi_59_60_ladder;
            float frontier_phi_59_60_ladder_1;
            float frontier_phi_59_60_ladder_2;
            float frontier_phi_59_60_ladder_3;
            float frontier_phi_59_60_ladder_4;
            float frontier_phi_59_60_ladder_5;
            if (_2127 < ((_2125 >> 12u) & 15u))
            {
                float _2250;
                float _2252;
                float _2254;
                float _2256;
                float _2258;
                float _2260;
                float _2406 = _2110;
                float _2407 = _2112;
                float _2408 = _2114;
                float _2409 = _2116;
                float _2410 = _2118;
                float _2411 = _2120;
                uint _2412 = _2127;
                uint _2421;
                bool _2422;
                for (;;)
                {
                    _2421 = texelFetch(g_lightClassification, int((((_1996 << 5u) + (_1982 << 9u)) + (_2412 << 2u)) >> 2u)).x;
                    _2422 = _2421 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2422)
                    {
                        frontier_phi_72_pred = _2407;
                        frontier_phi_72_pred_1 = _2406;
                        frontier_phi_72_pred_2 = _2411;
                        frontier_phi_72_pred_3 = _2410;
                        frontier_phi_72_pred_4 = _2409;
                        frontier_phi_72_pred_5 = _2408;
                    }
                    else
                    {
                        float _2556;
                        float _2557;
                        float _2558;
                        float _2559;
                        float _2560;
                        float _2561;
                        float _2805;
                        float _2806;
                        float _2807;
                        float _2808;
                        float _2809;
                        float _2810;
                        float _2569 = _2406;
                        float _2570 = _2407;
                        float _2571 = _2408;
                        float _2572 = _2409;
                        float _2573 = _2410;
                        float _2574 = _2411;
                        uint _2575 = _2421;
                        uint _2576;
                        vec4 _2601;
                        float _2602;
                        vec4 _2617;
                        vec3 _2629;
                        vec4 _2644;
                        vec4 _2659;
                        float _2705;
                        bool _2706;
                        for (;;)
                        {
                            uint _2586 = ((_2412 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2575));
                            _2576 = (_2575 + 4294967295u) & _2575;
                            uint _2588 = _2586 * 40u;
                            _2601 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2588)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2588 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2588 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2588 + 3u)).x));
                            _2602 = _2601.w;
                            uint _2604 = (_2586 * 40u) + 4u;
                            _2617 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2604)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2604 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2604 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2604 + 3u)).x));
                            uint _2619 = (_2586 * 40u) + 8u;
                            _2629 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2619)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2619 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2619 + 2u)).x));
                            uint _2631 = (_2586 * 40u) + 16u;
                            _2644 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2631)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2631 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2631 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2631 + 3u)).x));
                            uint _2646 = (_2586 * 40u) + 20u;
                            _2659 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2646)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2646 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2646 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2646 + 3u)).x));
                            uint _2661 = (_2586 * 40u) + 24u;
                            vec4 _2674 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2661)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2661 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2661 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2661 + 3u)).x));
                            uint _2680 = (_2586 * 40u) + 28u;
                            vec4 _2693 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2680)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2680 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2680 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2680 + 3u)).x));
                            _2705 = fma(_1457, _2693.z, fma(_1456, _2693.y, _2693.x * _1455)) + _2693.w;
                            _2706 = !((fma(_1457, _2674.z, fma(_1456, _2674.y, _2674.x * _1455)) + _2674.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_2706)
                            {
                                float _2733 = _2601.x - _1455;
                                float _2734 = _2601.y - _1456;
                                float _2735 = _2601.z - _1457;
                                float _2736 = dot(vec3(_2733, _2734, _2735), vec3(_2733, _2734, _2735));
                                float _2739 = inversesqrt(_2736);
                                float _2740 = _2739 * _2733;
                                float _2741 = _2739 * _2734;
                                float _2742 = _2739 * _2735;
                                float _2746 = 1.0 - (_2736 / (_2602 * _2602));
                                float _3596 = isnan(0.0) ? _2746 : (isnan(_2746) ? 0.0 : max(_2746, 0.0));
                                float _2747 = isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0));
                                float _2751 = sqrt(_2736) * _2617.w;
                                float _2753 = 1.39999997615814208984375 / (_2751 + 1.39999997615814208984375);
                                float _2754 = _2753 * _2753;
                                float _2755 = 1.0 - _2754;
                                float _2757 = (_2755 * dot(vec3(_2740, _2741, _2742), vec3(0.0))) + _2754;
                                float _2760 = _2751 * _2751;
                                float _2764 = (fma(_1457, _2644.z, fma(_1456, _2644.y, _2644.x * _1455)) + _2644.w) / _2705;
                                float _2765 = (fma(_1457, _2659.z, fma(_1456, _2659.y, _2659.x * _1455)) + _2659.w) / _2705;
                                float _2769 = 1.0 - dot(vec2(_2764, _2765), vec2(_2764, _2765));
                                float _3612 = isnan(0.0) ? _2769 : (isnan(_2769) ? 0.0 : max(_2769, 0.0));
                                float _2770 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
                                float _2771 = _2770 * (((isnan(0.0) ? _2757 : (isnan(_2757) ? 0.0 : max(_2757, 0.0))) * _2747) / ((_2760 * 0.699999988079071044921875) + 1.0));
                                float _2781 = dot(vec3(0.0), vec3((-0.0) - (_1455 * _2274), (-0.0) - (_1456 * _2274), (-0.0) - (_1457 * _2274)));
                                float _3623 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0));
                                float _2789 = (_2755 * dot(vec3(0.0), vec3(_2740, _2741, _2742))) + _2754;
                                float _3634 = isnan(0.0) ? _2789 : (isnan(_2789) ? 0.0 : max(_2789, 0.0));
                                float _2790 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
                                float _2794 = (0.5 / (((isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0))) + 9.9999999392252902907785028219223e-09) + _2790)) * _2790;
                                float _3645 = isnan(0.0) ? _2794 : (isnan(_2794) ? 0.0 : max(_2794, 0.0));
                                float _2801 = (_2770 * _2747) * (((isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0))) * 3.1415927410125732421875) / ((_2760 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_78_pred = _2801 * _2629.y;
                                frontier_phi_78_pred_1 = _2801 * _2629.x;
                                frontier_phi_78_pred_2 = _2771 * _2617.z;
                                frontier_phi_78_pred_3 = _2771 * _2617.y;
                                frontier_phi_78_pred_4 = _2771 * _2617.x;
                                frontier_phi_78_pred_5 = _2801 * _2629.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _2806 = frontier_phi_78_pred;
                            _2805 = frontier_phi_78_pred_1;
                            _2810 = frontier_phi_78_pred_2;
                            _2809 = frontier_phi_78_pred_3;
                            _2808 = frontier_phi_78_pred_4;
                            _2807 = frontier_phi_78_pred_5;
                            _2559 = _2808 + _2572;
                            _2560 = _2809 + _2573;
                            _2561 = _2810 + _2574;
                            _2556 = _2805 + _2569;
                            _2557 = _2806 + _2570;
                            _2558 = _2807 + _2571;
                            if (_2576 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2569 = _2556;
                                _2570 = _2557;
                                _2571 = _2558;
                                _2572 = _2559;
                                _2573 = _2560;
                                _2574 = _2561;
                                _2575 = _2576;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _2557;
                        frontier_phi_72_pred_1 = _2556;
                        frontier_phi_72_pred_2 = _2561;
                        frontier_phi_72_pred_3 = _2560;
                        frontier_phi_72_pred_4 = _2559;
                        frontier_phi_72_pred_5 = _2558;
                    }
                    _2252 = frontier_phi_72_pred;
                    _2250 = frontier_phi_72_pred_1;
                    _2260 = frontier_phi_72_pred_2;
                    _2258 = frontier_phi_72_pred_3;
                    _2256 = frontier_phi_72_pred_4;
                    _2254 = frontier_phi_72_pred_5;
                    uint _2413 = _2412 + 1u;
                    if (_2413 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2406 = _2250;
                        _2407 = _2252;
                        _2408 = _2254;
                        _2409 = _2256;
                        _2410 = _2258;
                        _2411 = _2260;
                        _2412 = _2413;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_59_60_ladder = _2260;
                frontier_phi_59_60_ladder_1 = _2256;
                frontier_phi_59_60_ladder_2 = _2254;
                frontier_phi_59_60_ladder_3 = _2252;
                frontier_phi_59_60_ladder_4 = _2250;
                frontier_phi_59_60_ladder_5 = _2258;
            }
            else
            {
                frontier_phi_59_60_ladder = _2120;
                frontier_phi_59_60_ladder_1 = _2116;
                frontier_phi_59_60_ladder_2 = _2114;
                frontier_phi_59_60_ladder_3 = _2112;
                frontier_phi_59_60_ladder_4 = _2110;
                frontier_phi_59_60_ladder_5 = _2118;
            }
            _2249 = frontier_phi_59_60_ladder_4;
            _2251 = frontier_phi_59_60_ladder_3;
            _2253 = frontier_phi_59_60_ladder_2;
            _2255 = frontier_phi_59_60_ladder_1;
            _2257 = frontier_phi_59_60_ladder_5;
            _2259 = frontier_phi_59_60_ladder;
        }
        float _2264 = isnan(1.0) ? _486 : (isnan(_486) ? 1.0 : min(_486, 1.0));
        _2015 = (_2264 * _2255) + _1745;
        _2017 = (_2264 * _2257) + _1746;
        _2019 = (_2264 * _2259) + _1747;
        _2021 = ((_2249 * 0.039999999105930328369140625) * _2264) + _1850;
        _2023 = ((_2251 * 0.039999999105930328369140625) * _2264) + _1851;
        _2025 = ((_2253 * 0.039999999105930328369140625) * _2264) + _1852;
    }
    else
    {
        _2015 = _1745;
        _2017 = _1746;
        _2019 = _1747;
        _2021 = _1850;
        _2023 = _1851;
        _2025 = _1852;
    }
    float _3661 = isnan(0.0) ? _472 : (isnan(_472) ? 0.0 : max(_472, 0.0));
    float _3672 = isnan(0.0) ? _473 : (isnan(_473) ? 0.0 : max(_473, 0.0));
    float _3683 = isnan(0.0) ? _474 : (isnan(_474) ? 0.0 : max(_474, 0.0));
    float _2042 = ((isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0))) * (_2015 + ((isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0))) * _486))) + ((_2021 + ((isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0))) * _1189)) * cbPerFrame._m0[3u].x);
    float _2043 = ((isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) * (_2017 + ((isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0))) * _486))) + ((_2023 + ((isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0))) * _1189)) * cbPerFrame._m0[3u].x);
    float _2044 = ((isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0))) * (_2019 + ((isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0))) * _486))) + ((_2025 + ((isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0))) * _1189)) * cbPerFrame._m0[3u].x);
    uint _2048 = _460 + 6u;
    float _2056 = _446 / cbSceneParam._m0[86u].x;
    float _2057 = _447 / cbSceneParam._m0[86u].y;
    vec4 _2071 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2056, _2057, (log2((isnan(cbSceneParam._m0[77u].w) ? _433 : (isnan(_433) ? cbSceneParam._m0[77u].w : min(_433, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2073 = _2071.x;
    float _2074 = _2071.y;
    float _2075 = _2071.z;
    float _2076 = _2071.w;
    float _2172;
    float _2174;
    float _2176;
    float _2178;
    if (_433 > cbSceneParam._m0[78u].w)
    {
        float _2135 = isnan(_433) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _433 : min(cbSceneParam._m0[80u].w, _433));
        float _2136 = _2135 / _433;
        float _2147 = _2136 * _256;
        float _2148 = _257 * _2136;
        float _2149 = (-0.0) - _2148;
        float _2150 = _2136 * _258;
        float _2152 = (cbSceneParam._m0[77u].w * _2149) / _2135;
        float _2153 = _2152 + cbSceneParam._m0[79u].w;
        float _2154 = cbSceneParam._m0[79u].w - _2148;
        float _2160 = sqrt(((_2147 * _2147) + (_2148 * _2148)) + (_2150 * _2150));
        float _2163 = (1.0 - (cbSceneParam._m0[77u].w / _2135)) * _2160;
        float _2168 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2170 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2368;
        if (abs((_2149 - _2152) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2368 = ((((_2153 > 0.0) ? exp2(_2168 * _2153) : (2.0 - exp2(_2170 * _2153))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2163;
        }
        else
        {
            float _2307 = 1.0 / cbSceneParam._m0[80u].x;
            float _2308 = isnan(_2154) ? _2153 : (isnan(_2153) ? _2154 : max(_2153, _2154));
            float _2309 = isnan(_2154) ? _2153 : (isnan(_2153) ? _2154 : min(_2153, _2154));
            float _2318 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : min(_2308, 0.0));
            float _2319 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : min(_2309, 0.0));
            _2368 = ((abs(_2160 / _2149) * cbSceneParam._m0[80u].y) * ((((_2318 - _2319) * 2.0) - ((exp2(_2168 * (isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0)))) - exp2(_2168 * (isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0))))) * _2307)) - ((exp2(_2170 * _2318) - exp2(_2170 * _2319)) * _2307))) + (_2163 * cbSceneParam._m0[80u].z);
        }
        vec4 _2370 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2056, _2057, 1.0), 0.0);
        float _2379 = exp2((_2368 * (-1.44269502162933349609375)) * (1.0 - _2370.w));
        float _2380 = log2(_2379);
        float _2396 = log2(_2076);
        _2172 = (exp2(_2396 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2380 * cbSceneParam._m0[78u].x)) * _2370.x) / cbSceneParam._m0[78u].x)) + _2073;
        _2174 = (exp2(_2396 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2380 * cbSceneParam._m0[78u].y)) * _2370.y) / cbSceneParam._m0[78u].y)) + _2074;
        _2176 = (exp2(_2396 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2380 * cbSceneParam._m0[78u].z)) * _2370.z) / cbSceneParam._m0[78u].z)) + _2075;
        _2178 = _2379 * _2076;
    }
    else
    {
        _2172 = _2073;
        _2174 = _2074;
        _2176 = _2075;
        _2178 = _2076;
    }
    float _2190 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2191 = _2190 == 3.0;
    float _2193 = log2(_2178);
    float _2200 = exp2(_2193 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0)));
    float _2201 = exp2(_2193 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2043 : (isnan(_2043) ? 0.0 : max(_2043, 0.0)));
    float _2202 = exp2(_2193 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0)));
    float _2211 = (_2190 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2211 * (_2191 ? _2200 : (_2200 + (cbSceneParam._m0[72u].w * _2172)));
    SV_Target.y = _2211 * (_2191 ? _2201 : (_2201 + (cbSceneParam._m0[72u].w * _2174)));
    SV_Target.z = _2211 * (_2191 ? _2202 : (_2202 + (cbSceneParam._m0[72u].w * _2176)));
    SV_Target.w = cbInstanceData._m0[_2048].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2048].w;
}


