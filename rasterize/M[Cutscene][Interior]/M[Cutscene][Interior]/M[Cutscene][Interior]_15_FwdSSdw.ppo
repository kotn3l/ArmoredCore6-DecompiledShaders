#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1137;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _196 = _195 * _188;
    float _197 = _195 * _189;
    float _198 = _195 * _190;
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210 = _209 * TANGENT.x;
    float _211 = _209 * TANGENT.y;
    float _212 = _209 * TANGENT.z;
    float _257 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _267 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _257);
    float _268 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _257);
    float _269 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _257);
    vec4 _282 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _285 = _282.x;
    vec4 _303 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _320 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _285) + cbMtdParam._m0[12u].x) * _303.x;
    float _322 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _285) + cbMtdParam._m0[12u].y) * _303.y;
    float _324 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _285) + cbMtdParam._m0[12u].z) * _303.z;
    vec4 _342 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _378 = cbMtdParam._m0[24u].x + _267;
    float _379 = cbMtdParam._m0[24u].y + _268;
    float _380 = cbMtdParam._m0[24u].z + _269;
    float _394 = (-0.0) - dot(vec3(_378, _379, _380), vec3(_196, _197, _198));
    float _395 = (-0.0) - dot(vec3(_378, _379, _380), vec3(_210, _211, _212));
    float _396 = (-0.0) - dot(vec3(_378, _379, _380), vec3((-0.0) - _203, (-0.0) - _204, (-0.0) - _205));
    float _400 = inversesqrt(dot(vec3(_394, _395, _396), vec3(_394, _395, _396)));
    float _403 = _400 * _396;
    float _404 = (_400 * _394) + ((cbMtdParam._m0[22u].x * _285) * ((_342.x * 2.0) + (-1.0)));
    float _405 = (_400 * _395) + ((cbMtdParam._m0[22u].y * _285) * ((_342.y * 2.0) + (-1.0)));
    float _406 = _404 * cbMtdParam._m0[20u].w;
    float _407 = _405 * cbMtdParam._m0[20u].z;
    float _408 = fract(TEXCOORD.x);
    float _409 = fract(TEXCOORD.y);
    float _415;
    if (_406 > 0.0)
    {
        _415 = (1.0 - _408) / _406;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_406 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _408) / _406;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _415 = frontier_phi_3_2_ladder;
    }
    float _423;
    if (_407 > 0.0)
    {
        _423 = (1.0 - _409) / _407;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_407 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _409) / _407;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _423 = frontier_phi_7_6_ladder;
    }
    bool _425 = _403 > 0.0;
    float _427 = _425 ? (cbMtdParam._m0[16u].x / _403) : 5000.0;
    float _428 = isnan(_423) ? _415 : (isnan(_415) ? _423 : min(_415, _423));
    float _429 = isnan(_427) ? _428 : (isnan(_428) ? _427 : min(_428, _427));
    float _433 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _434 = _408 + (-0.5);
    float _437 = _409 + (-0.5);
    float _440 = ((_429 * _403) + _433) / _433;
    vec4 _465 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (((((_434 + (_429 * _406)) / _440) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (((((_437 + (_429 * _407)) / _440) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    float _478 = (_465.x * _285) * cbMtdParam._m0[9u].x;
    float _479 = (_465.y * _285) * cbMtdParam._m0[9u].y;
    float _480 = (_465.z * _285) * cbMtdParam._m0[9u].z;
    float _499 = _404 * cbMtdParam._m0[22u].w;
    float _500 = _405 * cbMtdParam._m0[22u].z;
    bool _501 = _499 > 0.0;
    float _506;
    if (_501)
    {
        _506 = (1.0 - _408) / _499;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_499 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _408) / _499;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _506 = frontier_phi_11_10_ladder;
    }
    bool _508 = _500 > 0.0;
    float _513;
    if (_508)
    {
        _513 = (1.0 - _409) / _500;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_500 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _409) / _500;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _513 = frontier_phi_15_14_ladder;
    }
    float _516 = _425 ? (cbMtdParam._m0[18u].x / _403) : 5000.0;
    float _517 = isnan(_513) ? _506 : (isnan(_506) ? _513 : min(_506, _513));
    float _518 = isnan(_516) ? _517 : (isnan(_517) ? _516 : min(_517, _516));
    float _522 = cbMtdParam._m0[19u].y * cbMtdParam._m0[18u].x;
    float _526 = ((_518 * _403) + _522) / _522;
    float _531 = cbMtdParam._m0[19u].x - cbMtdParam._m0[20u].x * trunc(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    float _533 = floor(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    vec4 _549 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_434 + (_518 * _499)) / _526) + 0.5) + _531) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_437 + (_518 * _500)) / _526) + 0.5) + _533) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[0u].w));
    float _564;
    if (_501)
    {
        _564 = (1.0 - _408) / _499;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_499 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _408) / _499;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _564 = frontier_phi_19_18_ladder;
    }
    float _570;
    if (_508)
    {
        _570 = (1.0 - _409) / _500;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_500 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _409) / _500;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _570 = frontier_phi_23_22_ladder;
    }
    float _572 = isnan(_570) ? _564 : (isnan(_564) ? _570 : min(_564, _570));
    float _573 = isnan(_516) ? _572 : (isnan(_572) ? _516 : min(_572, _516));
    float _580 = ((_573 * _403) + _522) / _522;
    vec4 _600 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_434 + (_573 * _499)) / _580) + 0.5) + _531) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_437 + (_573 * _500)) / _580) + 0.5) + _533) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[8u].w));
    float _602 = _600.x;
    float _612 = _285 * 0.1500000059604644775390625;
    float _623 = (_612 * ((_478 - _320) + (((((cbMtdParam._m0[10u].x * _285) * _549.x) - _478) * _285) * _602))) + _320;
    float _624 = (_612 * ((_479 - _322) + (((((cbMtdParam._m0[10u].y * _285) * _549.y) - _479) * _285) * _602))) + _322;
    float _625 = (_612 * ((_480 - _324) + (((((cbMtdParam._m0[10u].z * _285) * _549.z) - _480) * _285) * _602))) + _324;
    vec4 _638 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _642 = _638.z;
    float _645 = (_638.x * 2.0) + (-1.0);
    float _646 = (_638.y * 2.0) + (-1.0);
    float _647 = dot(vec2(_645, _646), vec2(_645, _646));
    float _3273 = isnan(0.0) ? _647 : (isnan(_647) ? 0.0 : max(_647, 0.0));
    float _652 = sqrt(1.0 - (isnan(1.0) ? _3273 : (isnan(_3273) ? 1.0 : min(_3273, 1.0))));
    float _655 = fma(_652, _203, fma(_646, _210, _645 * _196));
    float _658 = fma(_652, _204, fma(_646, _211, _645 * _197));
    float _661 = fma(_652, _205, fma(_646, _212, _645 * _198));
    float _665 = inversesqrt(dot(vec3(_655, _658, _661), vec3(_655, _658, _661)));
    float _666 = _665 * _655;
    float _667 = _665 * _658;
    float _668 = _665 * _661;
    float _3284 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _669 = isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0));
    float _3295 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _3306 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _3317 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _688 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _692 = inversesqrt(dot(vec3(_267, _268, _269), vec3(_267, _268, _269)));
    float _693 = _267 * _692;
    float _694 = _268 * _692;
    float _695 = _269 * _692;
    float _701 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _702 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _721 = fma(_668, cbSceneParam._m0[5u].z, fma(_667, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _666));
    float _724 = fma(_668, cbSceneParam._m0[6u].z, fma(_667, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _666));
    float _727 = fma(_668, cbSceneParam._m0[7u].z, fma(_667, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _666));
    uint _740 = uint(roundEven(NORMAL.w)) * 13u;
    uint _743 = (_740 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _749 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3295 : (isnan(_3295) ? 1.0 : min(_3295, 1.0)))) * cbInstanceData._m0[_743].x;
    float _750 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3306 : (isnan(_3306) ? 1.0 : min(_3306, 1.0)))) * cbInstanceData._m0[_743].y;
    float _751 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0)))) * cbInstanceData._m0[_743].z;
    float _3328 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _752 = isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0));
    float _3339 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _753 = isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0));
    float _3350 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _754 = isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0));
    vec4 _763 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _701, cbSceneParam._m0[86u].y * _702));
    float _766 = _763.x * TEXCOORD_4.z;
    float _767 = dot(vec3(_666, _667, _668), vec3(_693, _694, _695));
    float _770 = _767 * 2.0;
    float _774 = (_770 * _666) - _693;
    float _775 = (_770 * _667) - _694;
    float _776 = (_770 * _668) - _695;
    float _780 = abs(dot(vec3(_693, _694, _695), vec3(_666, _667, _668)));
    float _3361 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _782 = sqrt(_669);
    float _795 = exp2((_782 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_782 * 3.0));
    float _827 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _831 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _835 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1136;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _863 = fma(_835, cbModelParam._m0[26u].z, fma(_831, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _827));
        float _867 = fma(_835, cbModelParam._m0[27u].z, fma(_831, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _827));
        float _871 = fma(_835, cbModelParam._m0[28u].z, fma(_831, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _827));
        float _894 = _827 + _666;
        float _895 = _831 + _667;
        float _896 = _835 + _668;
        float _906 = fma(_896, cbModelParam._m0[26u].z, fma(_895, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _894)) - _863;
        float _907 = fma(_896, cbModelParam._m0[27u].z, fma(_895, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _894)) - _867;
        float _908 = fma(_896, cbModelParam._m0[28u].z, fma(_895, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _894)) - _871;
        float _912 = inversesqrt(dot(vec3(_906, _907, _908), vec3(_906, _907, _908)));
        float _925 = ((_912 * _906) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_863 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _926 = ((_912 * _907) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_867 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _927 = ((_912 * _908) / cbModelParam._m0[34u].z) + ((((((_871 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _930 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_925, _926, _927), 0.0);
        vec4 _937 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_925, _926, _927), 0.0);
        vec4 _944 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_925, _926, _927), 0.0);
        vec4 _951 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_925, _926, _927), 0.0);
        float _964 = exp2((_930.w + (-0.5)) * 20.0) * 2.0;
        float _965 = _964 * (_930.x + (-0.5));
        float _966 = _964 * (_930.y + (-0.5));
        float _967 = _964 * (_930.z + (-0.5));
        float _974 = exp2((_937.w + (-0.5)) * 20.0) * 2.0;
        float _975 = _974 * (_937.x + (-0.5));
        float _976 = _974 * (_937.y + (-0.5));
        float _977 = _974 * (_937.z + (-0.5));
        float _984 = exp2((_944.w + (-0.5)) * 20.0) * 2.0;
        float _985 = _984 * (_944.x + (-0.5));
        float _986 = _984 * (_944.y + (-0.5));
        float _987 = _984 * (_944.z + (-0.5));
        float _994 = exp2((_951.w + (-0.5)) * 20.0) * 2.0;
        float _995 = _994 * (_951.x + (-0.5));
        float _996 = _994 * (_951.y + (-0.5));
        float _997 = _994 * (_951.z + (-0.5));
        float _998 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _999 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _1000 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _1001 = _965 * 0.5;
        float _1002 = _975 * 0.5;
        float _1003 = _985 * 0.5;
        float _1004 = dot(vec3(_1001, _1002, _1003), vec3(_1001, _1002, _1003));
        float _1009 = (_1004 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1004);
        float _1018 = (dot(vec3(_666, _667, _668), vec3(_1009 * _1001, _1009 * _1002, _1009 * _1003)) + 1.0) * 0.5;
        float _3387 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1028 = sqrt(((_1002 * _1002) + (_1001 * _1001)) + (_1003 * _1003)) / (_998 + 9.9999997473787516355514526367188e-06);
        float _3398 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1029 = isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0));
        float _1030 = _1029 * 2.0;
        float _1034 = (1.0 - _1029) / (_1029 + 1.0);
        float _3409 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1035 = isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0));
        float _1044 = ((((1.0 - _1035) * (_1030 + 2.0)) * exp2(log2(isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0))) * (_1030 + 1.0))) + _1035) * _998;
        float _1045 = _966 * 0.5;
        float _1046 = _976 * 0.5;
        float _1047 = _986 * 0.5;
        float _1048 = dot(vec3(_1045, _1046, _1047), vec3(_1045, _1046, _1047));
        float _1053 = (_1048 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1048);
        float _1061 = (dot(vec3(_666, _667, _668), vec3(_1053 * _1045, _1053 * _1046, _1053 * _1047)) + 1.0) * 0.5;
        float _3420 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1070 = sqrt(((_1046 * _1046) + (_1045 * _1045)) + (_1047 * _1047)) / (_999 + 9.9999997473787516355514526367188e-06);
        float _3431 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0));
        float _1072 = _1071 * 2.0;
        float _1076 = (1.0 - _1071) / (_1071 + 1.0);
        float _3442 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1077 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
        float _1086 = ((((1.0 - _1077) * (_1072 + 2.0)) * exp2(log2(isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0))) * (_1072 + 1.0))) + _1077) * _999;
        float _1087 = _967 * 0.5;
        float _1088 = _977 * 0.5;
        float _1089 = _987 * 0.5;
        float _1090 = dot(vec3(_1087, _1088, _1089), vec3(_1087, _1088, _1089));
        float _1095 = (_1090 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1090);
        float _1103 = (dot(vec3(_666, _667, _668), vec3(_1095 * _1087, _1095 * _1088, _1095 * _1089)) + 1.0) * 0.5;
        float _3453 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1112 = sqrt(((_1088 * _1088) + (_1087 * _1087)) + (_1089 * _1089)) / (_1000 + 9.9999997473787516355514526367188e-06);
        float _3464 = isnan(0.0) ? _1112 : (isnan(_1112) ? 0.0 : max(_1112, 0.0));
        float _1113 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
        float _1114 = _1113 * 2.0;
        float _1118 = (1.0 - _1113) / (_1113 + 1.0);
        float _3475 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
        float _1128 = ((((1.0 - _1119) * (_1114 + 2.0)) * exp2(log2(isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0))) * (_1114 + 1.0))) + _1119) * _1000;
        _1136 = _967;
        _1138 = _966;
        _1139 = _965;
        _1140 = _977;
        _1141 = _976;
        _1142 = _975;
        _1143 = _987;
        _1144 = _986;
        _1145 = _985;
        _1146 = _1000;
        _1147 = _999;
        _1148 = _998;
        _1149 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0)));
        _1150 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0)));
        _1151 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0)));
    }
    else
    {
        _1136 = _1137;
        _1138 = _1137;
        _1139 = _1137;
        _1140 = _1137;
        _1141 = _1137;
        _1142 = _1137;
        _1143 = _1137;
        _1144 = _1137;
        _1145 = _1137;
        _1146 = _1137;
        _1147 = _1137;
        _1148 = _1137;
        _1149 = 0.0;
        _1150 = 0.0;
        _1151 = 0.0;
    }
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1177 = fma(_835, cbModelParam._m0[30u].z, fma(_831, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _827));
        float _1181 = fma(_835, cbModelParam._m0[31u].z, fma(_831, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _827));
        float _1185 = fma(_835, cbModelParam._m0[32u].z, fma(_831, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _827));
        float _1208 = _827 + _666;
        float _1209 = _831 + _667;
        float _1210 = _835 + _668;
        float _1220 = fma(_1210, cbModelParam._m0[30u].z, fma(_1209, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1208)) - _1177;
        float _1221 = fma(_1210, cbModelParam._m0[31u].z, fma(_1209, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1208)) - _1181;
        float _1222 = fma(_1210, cbModelParam._m0[32u].z, fma(_1209, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1208)) - _1185;
        float _1226 = inversesqrt(dot(vec3(_1220, _1221, _1222), vec3(_1220, _1221, _1222)));
        float _1239 = ((_1226 * _1220) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1177 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1240 = ((_1226 * _1221) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1181 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1241 = ((_1226 * _1222) / cbModelParam._m0[35u].z) + ((((((_1185 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1243 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1239, _1240, _1241), 0.0);
        vec4 _1250 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1239, _1240, _1241), 0.0);
        vec4 _1257 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1239, _1240, _1241), 0.0);
        vec4 _1264 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1239, _1240, _1241), 0.0);
        float _1276 = exp2((_1243.w + (-0.5)) * 20.0) * 2.0;
        float _1277 = _1276 * (_1243.x + (-0.5));
        float _1278 = _1276 * (_1243.y + (-0.5));
        float _1279 = _1276 * (_1243.z + (-0.5));
        float _1286 = exp2((_1250.w + (-0.5)) * 20.0) * 2.0;
        float _1287 = _1286 * (_1250.x + (-0.5));
        float _1288 = _1286 * (_1250.y + (-0.5));
        float _1289 = _1286 * (_1250.z + (-0.5));
        float _1296 = exp2((_1257.w + (-0.5)) * 20.0) * 2.0;
        float _1297 = _1296 * (_1257.x + (-0.5));
        float _1298 = _1296 * (_1257.y + (-0.5));
        float _1299 = _1296 * (_1257.z + (-0.5));
        float _1306 = exp2((_1264.w + (-0.5)) * 20.0) * 2.0;
        float _1307 = _1306 * (_1264.x + (-0.5));
        float _1308 = _1306 * (_1264.y + (-0.5));
        float _1309 = _1306 * (_1264.z + (-0.5));
        float _1310 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1311 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1312 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1313 = _1277 * 0.5;
        float _1314 = _1287 * 0.5;
        float _1315 = _1297 * 0.5;
        float _1316 = dot(vec3(_1313, _1314, _1315), vec3(_1313, _1314, _1315));
        float _1321 = (_1316 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1316);
        float _1329 = (dot(vec3(_666, _667, _668), vec3(_1321 * _1313, _1321 * _1314, _1321 * _1315)) + 1.0) * 0.5;
        float _3516 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1338 = sqrt(((_1314 * _1314) + (_1313 * _1313)) + (_1315 * _1315)) / (_1310 + 9.9999997473787516355514526367188e-06);
        float _3527 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
        float _1340 = _1339 * 2.0;
        float _1344 = (1.0 - _1339) / (_1339 + 1.0);
        float _3538 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
        float _1354 = ((((1.0 - _1345) * (_1340 + 2.0)) * exp2(log2(isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0))) * (_1340 + 1.0))) + _1345) * _1310;
        float _1355 = _1278 * 0.5;
        float _1356 = _1288 * 0.5;
        float _1357 = _1298 * 0.5;
        float _1358 = dot(vec3(_1355, _1356, _1357), vec3(_1355, _1356, _1357));
        float _1363 = (_1358 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1358);
        float _1371 = (dot(vec3(_666, _667, _668), vec3(_1363 * _1355, _1363 * _1356, _1363 * _1357)) + 1.0) * 0.5;
        float _3549 = isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0));
        float _1380 = sqrt(((_1356 * _1356) + (_1355 * _1355)) + (_1357 * _1357)) / (_1311 + 9.9999997473787516355514526367188e-06);
        float _3560 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        float _1381 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
        float _1382 = _1381 * 2.0;
        float _1386 = (1.0 - _1381) / (_1381 + 1.0);
        float _3571 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
        float _1396 = ((((1.0 - _1387) * (_1382 + 2.0)) * exp2(log2(isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0))) * (_1382 + 1.0))) + _1387) * _1311;
        float _1397 = _1279 * 0.5;
        float _1398 = _1289 * 0.5;
        float _1399 = _1299 * 0.5;
        float _1400 = dot(vec3(_1397, _1398, _1399), vec3(_1397, _1398, _1399));
        float _1405 = (_1400 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1400);
        float _1413 = (dot(vec3(_666, _667, _668), vec3(_1405 * _1397, _1405 * _1398, _1405 * _1399)) + 1.0) * 0.5;
        float _3582 = isnan(0.0) ? _1413 : (isnan(_1413) ? 0.0 : max(_1413, 0.0));
        float _1422 = sqrt(((_1398 * _1398) + (_1397 * _1397)) + (_1399 * _1399)) / (_1312 + 9.9999997473787516355514526367188e-06);
        float _3593 = isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0));
        float _1423 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
        float _1424 = _1423 * 2.0;
        float _1428 = (1.0 - _1423) / (_1423 + 1.0);
        float _3604 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
        float _1438 = ((((1.0 - _1429) * (_1424 + 2.0)) * exp2(log2(isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0))) * (_1424 + 1.0))) + _1429) * _1312;
        _1446 = _1279;
        _1447 = _1278;
        _1448 = _1277;
        _1449 = _1289;
        _1450 = _1288;
        _1451 = _1287;
        _1452 = _1299;
        _1453 = _1298;
        _1454 = _1297;
        _1455 = _1312;
        _1456 = _1311;
        _1457 = _1310;
        _1458 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0)));
        _1459 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0)));
        _1460 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0)));
    }
    else
    {
        _1446 = _1137;
        _1447 = _1137;
        _1448 = _1137;
        _1449 = _1137;
        _1450 = _1137;
        _1451 = _1137;
        _1452 = _1137;
        _1453 = _1137;
        _1454 = _1137;
        _1455 = _1137;
        _1456 = _1137;
        _1457 = _1137;
        _1458 = 0.0;
        _1459 = 0.0;
        _1460 = 0.0;
    }
    float _1470 = (cbModelParam._m0[1u].x * (_1458 - _1149)) + _1149;
    float _1471 = (cbModelParam._m0[1u].x * (_1459 - _1150)) + _1150;
    float _1472 = (cbModelParam._m0[1u].x * (_1460 - _1151)) + _1151;
    float _1493 = fma(_1472, cbSceneParam._m0[89u].z, fma(_1471, cbSceneParam._m0[89u].y, _1470 * cbSceneParam._m0[89u].x));
    float _1496 = fma(_1472, cbSceneParam._m0[90u].z, fma(_1471, cbSceneParam._m0[90u].y, _1470 * cbSceneParam._m0[90u].x));
    float _1499 = fma(_1472, cbSceneParam._m0[91u].z, fma(_1471, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1470));
    float _1514 = _774 * 0.5;
    float _1515 = _775 * 0.5;
    float _1516 = _776 * 0.5;
    float _1517 = dot(vec4(_1514, _1515, _1516, 1.0), vec4(_1448, _1451, _1454, _1457));
    float _1520 = dot(vec4(_1514, _1515, _1516, 1.0), vec4(_1447, _1450, _1453, _1456));
    float _1523 = dot(vec4(_1514, _1515, _1516, 1.0), vec4(_1446, _1449, _1452, _1455));
    float _1557;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1530 = dot(vec4(_1514, _1515, _1516, 1.0), vec4(_1136, _1140, _1143, _1146));
        float _1534 = dot(vec4(_1514, _1515, _1516, 1.0), vec4(_1138, _1141, _1144, _1147));
        float _1538 = dot(vec4(_1514, _1515, _1516, 1.0), vec4(_1139, _1142, _1145, _1148));
        float _1545 = dot(vec4(cbModelParam._m0[39u]), vec4(_1514, _1515, _1516, 1.0));
        _1557 = dot(vec3(isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0)), isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0)), isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1545) ? 0.0 : (isnan(0.0) ? _1545 : max(0.0, _1545))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1557 = 1.0;
    }
    float _1568;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1559 = dot(vec4(cbModelParam._m0[40u]), vec4(_1514, _1515, _1516, 1.0));
        _1568 = dot(vec3(isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0)), isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0)), isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1559) ? 0.0 : (isnan(0.0) ? _1559 : max(0.0, _1559))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1568 = 1.0;
    }
    float _1572 = (_1568 * cbModelParam._m0[1u].x) + (_1557 * (1.0 - cbModelParam._m0[1u].x));
    float _1582 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _669);
    float _1583 = isnan(_1582) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1582 : min(cbModelParam._m0[25u].z, _1582));
    float _1665;
    float _1667;
    float _1669;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1632 = fma(_835, cbModelParam._m0[13u].z, fma(_831, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _827)) + cbModelParam._m0[13u].w;
        float _1636 = fma(_835, cbModelParam._m0[14u].z, fma(_831, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _827)) + cbModelParam._m0[14u].w;
        float _1640 = fma(_835, cbModelParam._m0[15u].z, fma(_831, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _827)) + cbModelParam._m0[15u].w;
        float _1643 = fma(_776, cbModelParam._m0[13u].z, fma(_775, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _774));
        float _1646 = fma(_776, cbModelParam._m0[14u].z, fma(_775, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _774));
        float _1649 = fma(_776, cbModelParam._m0[15u].z, fma(_775, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _774));
        float _1677;
        if (_1643 > 0.0)
        {
            _1677 = abs((1.0 - _1632) / _1643);
        }
        else
        {
            float frontier_phi_38_36_ladder;
            if (_1643 < 0.0)
            {
                frontier_phi_38_36_ladder = abs((_1632 + 1.0) / _1643);
            }
            else
            {
                frontier_phi_38_36_ladder = 5000.0;
            }
            _1677 = frontier_phi_38_36_ladder;
        }
        float _2046;
        if (_1646 > 0.0)
        {
            _2046 = abs((1.0 - _1636) / _1646);
        }
        else
        {
            float frontier_phi_47_43_ladder;
            if (_1646 < 0.0)
            {
                frontier_phi_47_43_ladder = abs((_1636 + 1.0) / _1646);
            }
            else
            {
                frontier_phi_47_43_ladder = 5000.0;
            }
            _2046 = frontier_phi_47_43_ladder;
        }
        float _2346;
        if (_1649 > 0.0)
        {
            _2346 = abs((1.0 - _1640) / _1649);
        }
        else
        {
            float frontier_phi_61_54_ladder;
            if (_1649 < 0.0)
            {
                frontier_phi_61_54_ladder = abs((_1640 + 1.0) / _1649);
            }
            else
            {
                frontier_phi_61_54_ladder = 5000.0;
            }
            _2346 = frontier_phi_61_54_ladder;
        }
        float _2348 = isnan(_2046) ? _1677 : (isnan(_1677) ? _2046 : min(_1677, _2046));
        float _2349 = isnan(_2346) ? _2348 : (isnan(_2348) ? _2346 : min(_2348, _2346));
        float _2353 = (_2349 * _1643) + _1632;
        float _2354 = (_2349 * _1646) + _1636;
        float _2355 = (_2349 * _1649) + _1640;
        float _2356 = _2349 * 9.9999997473787516355514526367188e-05;
        float _2357 = (-1.0) - _2356;
        float _2359 = _2356 + 1.0;
        float frontier_phi_37_61_ladder;
        float frontier_phi_37_61_ladder_1;
        float frontier_phi_37_61_ladder_2;
        if ((_2355 > _2359) || ((_2355 < _2357) || ((_2354 > _2359) || ((_2354 < _2357) || ((_2353 < _2357) || (_2353 > _2359))))))
        {
            frontier_phi_37_61_ladder = 0.0;
            frontier_phi_37_61_ladder_1 = 0.0;
            frontier_phi_37_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2481 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2355, cbModelParam._m0[9u].z, fma(_2354, cbModelParam._m0[9u].y, _2353 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2355, cbModelParam._m0[10u].z, fma(_2354, cbModelParam._m0[10u].y, _2353 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2355, cbModelParam._m0[11u].z, fma(_2354, cbModelParam._m0[11u].y, _2353 * cbModelParam._m0[11u].x))), _1583);
            frontier_phi_37_61_ladder = _2481.z * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_1 = _2481.y * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_2 = _2481.x * cbModelParam._m0[1u].y;
        }
        _1665 = frontier_phi_37_61_ladder_2;
        _1667 = frontier_phi_37_61_ladder_1;
        _1669 = frontier_phi_37_61_ladder;
    }
    else
    {
        vec4 _1653 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_774, _775, _776), _1583);
        _1665 = _1653.x * cbModelParam._m0[1u].y;
        _1667 = _1653.y * cbModelParam._m0[1u].y;
        _1669 = _1653.z * cbModelParam._m0[1u].y;
    }
    float _1673 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _669);
    float _1674 = isnan(_1673) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1673 : min(cbModelParam._m0[25u].w, _1673));
    float _1762;
    float _1764;
    float _1766;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1726 = fma(_835, cbModelParam._m0[21u].z, fma(_831, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _827)) + cbModelParam._m0[21u].w;
        float _1730 = fma(_835, cbModelParam._m0[22u].z, fma(_831, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _827)) + cbModelParam._m0[22u].w;
        float _1734 = fma(_835, cbModelParam._m0[23u].z, fma(_831, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _827)) + cbModelParam._m0[23u].w;
        float _1737 = fma(_776, cbModelParam._m0[21u].z, fma(_775, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _774));
        float _1740 = fma(_776, cbModelParam._m0[22u].z, fma(_775, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _774));
        float _1743 = fma(_776, cbModelParam._m0[23u].z, fma(_775, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _774));
        float _2051;
        if (_1737 > 0.0)
        {
            _2051 = abs((1.0 - _1726) / _1737);
        }
        else
        {
            float frontier_phi_49_45_ladder;
            if (_1737 < 0.0)
            {
                frontier_phi_49_45_ladder = abs((_1726 + 1.0) / _1737);
            }
            else
            {
                frontier_phi_49_45_ladder = 5000.0;
            }
            _2051 = frontier_phi_49_45_ladder;
        }
        float _2372;
        if (_1740 > 0.0)
        {
            _2372 = abs((1.0 - _1730) / _1740);
        }
        else
        {
            float frontier_phi_63_56_ladder;
            if (_1740 < 0.0)
            {
                frontier_phi_63_56_ladder = abs((_1730 + 1.0) / _1740);
            }
            else
            {
                frontier_phi_63_56_ladder = 5000.0;
            }
            _2372 = frontier_phi_63_56_ladder;
        }
        float _2541;
        if (_1743 > 0.0)
        {
            _2541 = abs((1.0 - _1734) / _1743);
        }
        else
        {
            float frontier_phi_77_72_ladder;
            if (_1743 < 0.0)
            {
                frontier_phi_77_72_ladder = abs((_1734 + 1.0) / _1743);
            }
            else
            {
                frontier_phi_77_72_ladder = 5000.0;
            }
            _2541 = frontier_phi_77_72_ladder;
        }
        float _2543 = isnan(_2372) ? _2051 : (isnan(_2051) ? _2372 : min(_2051, _2372));
        float _2544 = isnan(_2541) ? _2543 : (isnan(_2543) ? _2541 : min(_2543, _2541));
        float _2548 = (_2544 * _1737) + _1726;
        float _2549 = (_2544 * _1740) + _1730;
        float _2550 = (_2544 * _1743) + _1734;
        float _2551 = _2544 * 9.9999997473787516355514526367188e-05;
        float _2552 = (-1.0) - _2551;
        float _2554 = _2551 + 1.0;
        float frontier_phi_46_77_ladder;
        float frontier_phi_46_77_ladder_1;
        float frontier_phi_46_77_ladder_2;
        if ((_2550 > _2554) || ((_2550 < _2552) || ((_2549 > _2554) || ((_2549 < _2552) || ((_2548 < _2552) || (_2548 > _2554))))))
        {
            frontier_phi_46_77_ladder = 0.0;
            frontier_phi_46_77_ladder_1 = 0.0;
            frontier_phi_46_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2783 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2550, cbModelParam._m0[17u].z, fma(_2549, cbModelParam._m0[17u].y, _2548 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2550, cbModelParam._m0[18u].z, fma(_2549, cbModelParam._m0[18u].y, _2548 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2550, cbModelParam._m0[19u].z, fma(_2549, cbModelParam._m0[19u].y, _2548 * cbModelParam._m0[19u].x))), _1674);
            frontier_phi_46_77_ladder = _2783.z * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_1 = _2783.y * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_2 = _2783.x * cbModelParam._m0[1u].z;
        }
        _1762 = frontier_phi_46_77_ladder_2;
        _1764 = frontier_phi_46_77_ladder_1;
        _1766 = frontier_phi_46_77_ladder;
    }
    else
    {
        vec4 _1746 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_774, _775, _776), _1674);
        _1762 = _1746.x * cbModelParam._m0[1u].z;
        _1764 = _1746.y * cbModelParam._m0[1u].z;
        _1766 = _1746.z * cbModelParam._m0[1u].z;
    }
    float _1778 = ((((1.0 - _795) * ((_782 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_795 * _782)) * _766;
    float _1779 = _1778 * ((cbModelParam._m0[1u].w * (_1762 - _1665)) + _1665);
    float _1780 = _1778 * ((cbModelParam._m0[1u].w * (_1764 - _1667)) + _1667);
    float _1781 = _1778 * ((cbModelParam._m0[1u].w * (_1766 - _1669)) + _1669);
    float _1784 = fma(_1781, cbSceneParam._m0[89u].z, fma(_1780, cbSceneParam._m0[89u].y, _1779 * cbSceneParam._m0[89u].x));
    float _1787 = fma(_1781, cbSceneParam._m0[90u].z, fma(_1780, cbSceneParam._m0[90u].y, _1779 * cbSceneParam._m0[90u].x));
    float _1790 = fma(_1781, cbSceneParam._m0[91u].z, fma(_1780, cbSceneParam._m0[91u].y, _1779 * cbSceneParam._m0[91u].x));
    vec4 _1798 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_701, _702));
    float _1800 = _1798.w;
    float _1812 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1800);
    float _1813 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1800);
    float _1814 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1800);
    uvec4 _1818 = floatBitsToUint(cbInstanceData._m0[_740 + 5u]);
    uint _1820 = _1818.x * 14u;
    uint _1821 = _1820 + 13u;
    float _1826 = _766 + (-1.0);
    float _1829 = (cbLight._m0[_1821].x * _1826) + 1.0;
    float _1830 = (cbLight._m0[_1821].y * _1826) + 1.0;
    uint _1831 = _1820 + 5u;
    float _1837 = isnan(1.0) ? _1830 : (isnan(_1830) ? 1.0 : min(_1830, 1.0));
    uint _1841 = _1820 + 4u;
    float _1850 = isnan(1.0) ? _1829 : (isnan(_1829) ? 1.0 : min(_1829, 1.0));
    uint _1854 = _1820 | 1u;
    float _1865 = dot(vec3(cbLight._m0[_1820].xyz), vec3(_666, _667, _668));
    float _1868 = dot(vec3(cbLight._m0[_1854].xyz), vec3(_666, _667, _668));
    float _3740 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
    float _3751 = isnan(0.0) ? _1868 : (isnan(_1868) ? 0.0 : max(_1868, 0.0));
    float _1873 = (isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0))) * 0.3183098733425140380859375;
    float _1875 = (isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0))) * 0.3183098733425140380859375;
    float _1882 = ((cbLight._m0[_1831].x * _1837) * _1875) + (((cbLight._m0[_1841].x * _1812) * _1850) * _1873);
    float _1883 = ((_1837 * cbLight._m0[_1831].y) * _1875) + (((cbLight._m0[_1841].y * _1813) * _1850) * _1873);
    float _1884 = ((_1837 * cbLight._m0[_1831].z) * _1875) + (((cbLight._m0[_1841].z * _1814) * _1850) * _1873);
    uint _1886 = _1820 + 8u;
    float _1899 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1820].w)) * _669) * 0.949999988079071044921875);
    float _1900 = _1899 * _1899;
    float _1901 = cbLight._m0[_1820].x + _693;
    float _1902 = cbLight._m0[_1820].y + _694;
    float _1903 = cbLight._m0[_1820].z + _695;
    float _1907 = inversesqrt(dot(vec3(_1901, _1902, _1903), vec3(_1901, _1902, _1903)));
    float _1908 = _1907 * _1901;
    float _1909 = _1907 * _1902;
    float _1910 = _1907 * _1903;
    float _1911 = dot(vec3(_666, _667, _668), vec3(cbLight._m0[_1820].xyz));
    float _3762 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
    float _1914 = isnan(1.0) ? _3762 : (isnan(_3762) ? 1.0 : min(_3762, 1.0));
    float _3773 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _1915 = isnan(1.0) ? _3773 : (isnan(_3773) ? 1.0 : min(_3773, 1.0));
    float _1916 = dot(vec3(_666, _667, _668), vec3(_1908, _1909, _1910));
    float _3784 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
    float _1919 = isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0));
    float _1920 = dot(vec3(cbLight._m0[_1820].xyz), vec3(_1908, _1909, _1910));
    float _3795 = isnan(0.0) ? _1920 : (isnan(_1920) ? 0.0 : max(_1920, 0.0));
    float _1924 = _1900 * _1900;
    float _1928 = ((_1919 * _1919) * (_1924 + (-1.0))) + 1.0;
    float _1939 = (exp2(log2(1.0 - (isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1940 = 1.0 - _1900;
    float _1951 = (0.5 / (((_1915 * ((_1914 * _1940) + _1900)) + 9.9999999392252902907785028219223e-09) + (((_1915 * _1940) + _1900) * _1914))) * _1914;
    float _3806 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
    float _1953 = (isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0))) * (_1924 / ((_1928 * _1928) * 3.141590118408203125));
    uint _1967 = _1820 + 9u;
    float _1978 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1854].w)) * _669) * 0.949999988079071044921875);
    float _1979 = _1978 * _1978;
    float _1980 = cbLight._m0[_1854].x + _693;
    float _1981 = cbLight._m0[_1854].y + _694;
    float _1982 = cbLight._m0[_1854].z + _695;
    float _1986 = inversesqrt(dot(vec3(_1980, _1981, _1982), vec3(_1980, _1981, _1982)));
    float _1987 = _1986 * _1980;
    float _1988 = _1986 * _1981;
    float _1989 = _1986 * _1982;
    float _1990 = dot(vec3(_666, _667, _668), vec3(cbLight._m0[_1854].xyz));
    float _3817 = isnan(0.0) ? _1990 : (isnan(_1990) ? 0.0 : max(_1990, 0.0));
    float _1993 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    float _1994 = dot(vec3(_666, _667, _668), vec3(_1987, _1988, _1989));
    float _3828 = isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0));
    float _1997 = isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0));
    float _1998 = dot(vec3(cbLight._m0[_1854].xyz), vec3(_1987, _1988, _1989));
    float _3839 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
    float _2002 = _1979 * _1979;
    float _2006 = ((_1997 * _1997) * (_2002 + (-1.0))) + 1.0;
    float _2015 = (exp2(log2(1.0 - (isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2016 = 1.0 - _1979;
    float _2026 = (0.5 / (((_1915 * ((_1993 * _2016) + _1979)) + 9.9999999392252902907785028219223e-09) + (((_1915 * _2016) + _1979) * _1993))) * _1993;
    float _3850 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
    float _2028 = (isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0))) * (_2002 / ((_2006 * _2006) * 3.141590118408203125));
    float _2038 = (((_2015 * cbLight._m0[_1967].x) * _2028) * _1837) + ((((cbLight._m0[_1886].x * _1812) * _1939) * _1953) * _1850);
    float _2039 = (((_2015 * cbLight._m0[_1967].y) * _2028) * _1837) + ((((cbLight._m0[_1886].y * _1813) * _1939) * _1953) * _1850);
    float _2040 = (((_2015 * cbLight._m0[_1967].z) * _2028) * _1837) + ((((cbLight._m0[_1886].z * _1814) * _1939) * _1953) * _1850);
    float _2155;
    float _2157;
    float _2159;
    float _2161;
    float _2163;
    float _2165;
    if (_1818.y == 0u)
    {
        float _2095 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2096 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2095;
        float _2097 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2095;
        float _2098 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2095;
        uvec4 _2110 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2111 = _2110.x;
        uint _2122 = uint((float(_2110.y) * floor(float(uint(cbSceneParam._m0[85u].y * _702) / _2111))) + floor(float(uint(cbSceneParam._m0[85u].x * _701) / _2111)));
        float _2132 = (log2(_2098 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2133 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
        uint _2136 = uint(isnan(14.0) ? _2133 : (isnan(_2133) ? 14.0 : min(_2133, 14.0)));
        uvec4 _2141 = texelFetch(g_lightClusterGridBuffer, int(((_2136 << 2u) + (_2122 << 6u)) >> 2u));
        uint _2142 = _2141.x;
        uint _2143 = _2110.z;
        float _2233;
        float _2235;
        float _2237;
        float _2239;
        float _2241;
        float _2243;
        if (((((1u << ((_2143 >> 4u) & 15u)) + 4294967295u) & _2142) == 0u) || ((_2143 & 240u) == 0u))
        {
            _2233 = 0.0;
            _2235 = 0.0;
            _2237 = 0.0;
            _2239 = 0.0;
            _2241 = 0.0;
            _2243 = 0.0;
        }
        else
        {
            float _2234;
            float _2236;
            float _2238;
            float _2240;
            float _2242;
            float _2244;
            float _2409 = 0.0;
            float _2410 = 0.0;
            float _2411 = 0.0;
            float _2412 = 0.0;
            float _2413 = 0.0;
            float _2414 = 0.0;
            uint _2415 = 0u;
            uint _2424;
            bool _2425;
            for (;;)
            {
                _2424 = texelFetch(g_lightClassification, int((((_2136 << 5u) + (_2122 << 9u)) + (_2415 << 2u)) >> 2u)).x;
                _2425 = _2424 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2425)
                {
                    frontier_phi_74_pred = _2412;
                    frontier_phi_74_pred_1 = _2411;
                    frontier_phi_74_pred_2 = _2410;
                    frontier_phi_74_pred_3 = _2409;
                    frontier_phi_74_pred_4 = _2413;
                    frontier_phi_74_pred_5 = _2414;
                }
                else
                {
                    float _2584;
                    float _2585;
                    float _2586;
                    float _2587;
                    float _2588;
                    float _2589;
                    uint _2590;
                    _2584 = _2409;
                    _2585 = _2410;
                    _2586 = _2411;
                    _2587 = _2412;
                    _2588 = _2413;
                    _2589 = _2414;
                    _2590 = _2424;
                    float _2490;
                    float _2491;
                    float _2492;
                    float _2493;
                    float _2494;
                    float _2495;
                    for (;;)
                    {
                        uint _2594 = uint(findLSB(_2590)) + (_2415 << 5u);
                        uint _2591 = (_2590 + 4294967295u) & _2590;
                        uint _2596 = _2594 * 48u;
                        vec4 _2610 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2596)).x, texelFetch(g_PointLightRenderingBuffer, int(_2596 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2596 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2596 + 3u)).x));
                        uint _2616 = (_2594 * 48u) + 4u;
                        vec4 _2629 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2616)).x, texelFetch(g_PointLightRenderingBuffer, int(_2616 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2616 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2616 + 3u)).x));
                        uint _2635 = (_2594 * 48u) + 8u;
                        vec3 _2646 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2635)).x, texelFetch(g_PointLightRenderingBuffer, int(_2635 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2635 + 2u)).x));
                        float _2650 = _2610.x - _2096;
                        float _2651 = _2610.y - _2097;
                        float _2652 = _2610.z - _2098;
                        float _2653 = dot(vec3(_2650, _2651, _2652), vec3(_2650, _2651, _2652));
                        float _2656 = inversesqrt(_2653);
                        float _2657 = _2656 * _2650;
                        float _2658 = _2656 * _2651;
                        float _2659 = _2656 * _2652;
                        float _2660 = dot(vec3(_721, _724, _727), vec3(_2657, _2658, _2659));
                        float _2665 = 1.0 - (_2653 * _2610.w);
                        float _3871 = isnan(0.0) ? _2665 : (isnan(_2665) ? 0.0 : max(_2665, 0.0));
                        float _2666 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
                        float _2667 = sqrt(_2653) * _2629.w;
                        float _2670 = 1.39999997615814208984375 / (_2667 + 1.39999997615814208984375);
                        float _2671 = _2670 * _2670;
                        float _2674 = ((1.0 - _2671) * _2660) + _2671;
                        float _2677 = _2667 * _2667;
                        float _2681 = ((isnan(0.0) ? _2674 : (isnan(_2674) ? 0.0 : max(_2674, 0.0))) * _2666) / ((_2677 * 0.699999988079071044921875) + 1.0);
                        float _2685 = (-0.0) - _2096;
                        float _2686 = (-0.0) - _2097;
                        float _2687 = (-0.0) - _2098;
                        float _2691 = inversesqrt(dot(vec3(_2685, _2686, _2687), vec3(_2685, _2686, _2687)));
                        float _2692 = _2691 * _2685;
                        float _2693 = _2691 * _2686;
                        float _2694 = _2691 * _2687;
                        float _2702 = exp2(log2(1.0 / ((_2677 * 3.5) + 5.0)) * 0.25);
                        float _2703 = 1.0 - _782;
                        float _2710 = sqrt(1.0 - ((1.0 - (_2703 * _2703)) * (1.0 - (_2702 * _2702))));
                        float _2711 = _2710 * _2710;
                        float _2712 = _2711 * _2711;
                        float _2713 = _2692 + _2657;
                        float _2714 = _2693 + _2658;
                        float _2715 = _2694 + _2659;
                        float _2719 = inversesqrt(dot(vec3(_2713, _2714, _2715), vec3(_2713, _2714, _2715)));
                        float _2723 = dot(vec3(_721, _724, _727), vec3(_2692, _2693, _2694));
                        float _3887 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
                        float _2726 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
                        float _2727 = dot(vec3(_721, _724, _727), vec3(_2719 * _2713, _2719 * _2714, _2719 * _2715));
                        float _3898 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
                        float _2730 = isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0));
                        float _2734 = ((_2730 * _2730) * (_2712 + (-1.0))) + 1.0;
                        float _2735 = _2670 * _2711;
                        float _2736 = _2735 * _2735;
                        float _2739 = ((1.0 - _2736) * _2660) + _2736;
                        float _3909 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
                        float _2740 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
                        float _2741 = 1.0 - _2711;
                        float _2751 = (0.5 / (((_2740 * ((_2726 * _2741) + _2711)) + 9.9999999392252902907785028219223e-09) + (((_2740 * _2741) + _2711) * _2726))) * _2740;
                        float _3920 = isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0));
                        float _2762 = (((_2712 * 3.1415927410125732421875) * (isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0)))) / ((_2734 * _2734) * ((_2677 * 2.1991131305694580078125) + 3.141590118408203125))) * _2666;
                        _2493 = (_2681 * _2629.x) + _2587;
                        _2494 = (_2681 * _2629.y) + _2588;
                        _2495 = (_2681 * _2629.z) + _2589;
                        _2490 = (_2762 * _2646.x) + _2584;
                        _2491 = (_2762 * _2646.y) + _2585;
                        _2492 = (_2762 * _2646.z) + _2586;
                        if (_2591 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2584 = _2490;
                            _2585 = _2491;
                            _2586 = _2492;
                            _2587 = _2493;
                            _2588 = _2494;
                            _2589 = _2495;
                            _2590 = _2591;
                        }
                    }
                    frontier_phi_74_pred = _2493;
                    frontier_phi_74_pred_1 = _2492;
                    frontier_phi_74_pred_2 = _2491;
                    frontier_phi_74_pred_3 = _2490;
                    frontier_phi_74_pred_4 = _2494;
                    frontier_phi_74_pred_5 = _2495;
                }
                _2240 = frontier_phi_74_pred;
                _2238 = frontier_phi_74_pred_1;
                _2236 = frontier_phi_74_pred_2;
                _2234 = frontier_phi_74_pred_3;
                _2242 = frontier_phi_74_pred_4;
                _2244 = frontier_phi_74_pred_5;
                uint _2416 = _2415 + 1u;
                if (_2416 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2409 = _2234;
                    _2410 = _2236;
                    _2411 = _2238;
                    _2412 = _2240;
                    _2413 = _2242;
                    _2414 = _2244;
                    _2415 = _2416;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2233 = _2234;
            _2235 = _2236;
            _2237 = _2238;
            _2239 = _2240;
            _2241 = _2242;
            _2243 = _2244;
        }
        uvec4 _2247 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2248 = _2247.z;
        uint _2250 = (_2248 >> 8u) & 15u;
        float _2377;
        float _2379;
        float _2381;
        float _2383;
        float _2385;
        float _2387;
        if (((4294967295u << _2250) & _2142) == 0u)
        {
            _2377 = _2233;
            _2379 = _2235;
            _2381 = _2237;
            _2383 = _2239;
            _2385 = _2241;
            _2387 = _2243;
        }
        else
        {
            float _2402 = inversesqrt(dot(vec3(_2096, _2097, _2098), vec3(_2096, _2097, _2098)));
            float _2403 = _2402 * _2096;
            float _2404 = _2402 * _2097;
            float _2405 = _2402 * _2098;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2250 < ((_2248 >> 12u) & 15u))
            {
                float _2378;
                float _2380;
                float _2382;
                float _2384;
                float _2386;
                float _2388;
                float _2567 = _2233;
                float _2568 = _2235;
                float _2569 = _2237;
                float _2570 = _2239;
                float _2571 = _2241;
                float _2572 = _2243;
                uint _2573 = _2250;
                uint _2582;
                bool _2583;
                for (;;)
                {
                    _2582 = texelFetch(g_lightClassification, int((((_2136 << 5u) + (_2122 << 9u)) + (_2573 << 2u)) >> 2u)).x;
                    _2583 = _2582 == 0u;
                    float frontier_phi_83_pred;
                    float frontier_phi_83_pred_1;
                    float frontier_phi_83_pred_2;
                    float frontier_phi_83_pred_3;
                    float frontier_phi_83_pred_4;
                    float frontier_phi_83_pred_5;
                    if (_2583)
                    {
                        frontier_phi_83_pred = _2570;
                        frontier_phi_83_pred_1 = _2569;
                        frontier_phi_83_pred_2 = _2568;
                        frontier_phi_83_pred_3 = _2567;
                        frontier_phi_83_pred_4 = _2572;
                        frontier_phi_83_pred_5 = _2571;
                    }
                    else
                    {
                        float _2788;
                        float _2789;
                        float _2790;
                        float _2791;
                        float _2792;
                        float _2793;
                        float _3081;
                        float _3082;
                        float _3083;
                        float _3084;
                        float _3085;
                        float _3086;
                        float _2801 = _2567;
                        float _2802 = _2568;
                        float _2803 = _2569;
                        float _2804 = _2570;
                        float _2805 = _2571;
                        float _2806 = _2572;
                        uint _2807 = _2582;
                        uint _2808;
                        vec4 _2833;
                        float _2834;
                        vec4 _2849;
                        vec3 _2861;
                        vec4 _2876;
                        vec4 _2891;
                        float _2937;
                        bool _2938;
                        for (;;)
                        {
                            uint _2818 = ((_2573 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2807));
                            _2808 = (_2807 + 4294967295u) & _2807;
                            uint _2820 = _2818 * 40u;
                            _2833 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2820)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2820 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2820 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2820 + 3u)).x));
                            _2834 = _2833.w;
                            uint _2836 = (_2818 * 40u) + 4u;
                            _2849 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2836)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2836 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2836 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2836 + 3u)).x));
                            uint _2851 = (_2818 * 40u) + 8u;
                            _2861 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2851)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2851 + 2u)).x));
                            uint _2863 = (_2818 * 40u) + 16u;
                            _2876 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2863)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2863 + 3u)).x));
                            uint _2878 = (_2818 * 40u) + 20u;
                            _2891 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2878)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2878 + 3u)).x));
                            uint _2893 = (_2818 * 40u) + 24u;
                            vec4 _2906 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2893)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2893 + 3u)).x));
                            uint _2912 = (_2818 * 40u) + 28u;
                            vec4 _2925 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2912)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2912 + 3u)).x));
                            _2937 = fma(_2098, _2925.z, fma(_2097, _2925.y, _2925.x * _2096)) + _2925.w;
                            _2938 = !((fma(_2098, _2906.z, fma(_2097, _2906.y, _2906.x * _2096)) + _2906.w) <= 0.0);
                            float frontier_phi_89_pred;
                            float frontier_phi_89_pred_1;
                            float frontier_phi_89_pred_2;
                            float frontier_phi_89_pred_3;
                            float frontier_phi_89_pred_4;
                            float frontier_phi_89_pred_5;
                            if (_2938)
                            {
                                float _2965 = _2833.x - _2096;
                                float _2966 = _2833.y - _2097;
                                float _2967 = _2833.z - _2098;
                                float _2968 = dot(vec3(_2965, _2966, _2967), vec3(_2965, _2966, _2967));
                                float _2971 = inversesqrt(_2968);
                                float _2972 = _2971 * _2965;
                                float _2973 = _2971 * _2966;
                                float _2974 = _2971 * _2967;
                                float _2978 = 1.0 - (_2968 / (_2834 * _2834));
                                float _3931 = isnan(0.0) ? _2978 : (isnan(_2978) ? 0.0 : max(_2978, 0.0));
                                float _2979 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
                                float _2983 = sqrt(_2968) * _2849.w;
                                float _2985 = 1.39999997615814208984375 / (_2983 + 1.39999997615814208984375);
                                float _2986 = _2985 * _2985;
                                float _2989 = ((1.0 - _2986) * dot(vec3(_2972, _2973, _2974), vec3(_721, _724, _727))) + _2986;
                                float _2992 = _2983 * _2983;
                                float _2996 = (fma(_2098, _2876.z, fma(_2097, _2876.y, _2876.x * _2096)) + _2876.w) / _2937;
                                float _2997 = (fma(_2098, _2891.z, fma(_2097, _2891.y, _2891.x * _2096)) + _2891.w) / _2937;
                                float _3001 = 1.0 - dot(vec2(_2996, _2997), vec2(_2996, _2997));
                                float _3947 = isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0));
                                float _3002 = isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0));
                                float _3003 = _3002 * (((isnan(0.0) ? _2989 : (isnan(_2989) ? 0.0 : max(_2989, 0.0))) * _2979) / ((_2992 * 0.699999988079071044921875) + 1.0));
                                float _3015 = exp2(log2(1.0 / ((_2992 * 3.5) + 5.0)) * 0.25);
                                float _3016 = 1.0 - _782;
                                float _3023 = sqrt(1.0 - ((1.0 - (_3016 * _3016)) * (1.0 - (_3015 * _3015))));
                                float _3024 = _3023 * _3023;
                                float _3025 = _3024 * _3024;
                                float _3026 = _2972 - _2403;
                                float _3027 = _2973 - _2404;
                                float _3028 = _2974 - _2405;
                                float _3032 = inversesqrt(dot(vec3(_3026, _3027, _3028), vec3(_3026, _3027, _3028)));
                                float _3036 = dot(vec3(_721, _724, _727), vec3((-0.0) - _2403, (-0.0) - _2404, (-0.0) - _2405));
                                float _3958 = isnan(0.0) ? _3036 : (isnan(_3036) ? 0.0 : max(_3036, 0.0));
                                float _3039 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
                                float _3040 = dot(vec3(_721, _724, _727), vec3(_3032 * _3026, _3032 * _3027, _3032 * _3028));
                                float _3969 = isnan(0.0) ? _3040 : (isnan(_3040) ? 0.0 : max(_3040, 0.0));
                                float _3043 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
                                float _3047 = ((_3043 * _3043) * (_3025 + (-1.0))) + 1.0;
                                float _3048 = _2985 * _3024;
                                float _3049 = _3048 * _3048;
                                float _3055 = ((1.0 - _3049) * dot(vec3(_721, _724, _727), vec3(_2972, _2973, _2974))) + _3049;
                                float _3980 = isnan(0.0) ? _3055 : (isnan(_3055) ? 0.0 : max(_3055, 0.0));
                                float _3056 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
                                float _3057 = 1.0 - _3024;
                                float _3067 = (0.5 / (((_3056 * ((_3039 * _3057) + _3024)) + 9.9999999392252902907785028219223e-09) + (((_3056 * _3057) + _3024) * _3039))) * _3056;
                                float _3991 = isnan(0.0) ? _3067 : (isnan(_3067) ? 0.0 : max(_3067, 0.0));
                                float _3077 = (_3002 * _2979) * (((_3025 * 3.1415927410125732421875) * (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0)))) / ((_3047 * _3047) * ((_2992 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_89_pred = _3003 * _2849.x;
                                frontier_phi_89_pred_1 = _3077 * _2861.z;
                                frontier_phi_89_pred_2 = _3077 * _2861.y;
                                frontier_phi_89_pred_3 = _3077 * _2861.x;
                                frontier_phi_89_pred_4 = _3003 * _2849.z;
                                frontier_phi_89_pred_5 = _3003 * _2849.y;
                            }
                            else
                            {
                                frontier_phi_89_pred = 0.0;
                                frontier_phi_89_pred_1 = 0.0;
                                frontier_phi_89_pred_2 = 0.0;
                                frontier_phi_89_pred_3 = 0.0;
                                frontier_phi_89_pred_4 = 0.0;
                                frontier_phi_89_pred_5 = 0.0;
                            }
                            _3084 = frontier_phi_89_pred;
                            _3083 = frontier_phi_89_pred_1;
                            _3082 = frontier_phi_89_pred_2;
                            _3081 = frontier_phi_89_pred_3;
                            _3086 = frontier_phi_89_pred_4;
                            _3085 = frontier_phi_89_pred_5;
                            _2791 = _3084 + _2804;
                            _2792 = _3085 + _2805;
                            _2793 = _3086 + _2806;
                            _2788 = _3081 + _2801;
                            _2789 = _3082 + _2802;
                            _2790 = _3083 + _2803;
                            if (_2808 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2801 = _2788;
                                _2802 = _2789;
                                _2803 = _2790;
                                _2804 = _2791;
                                _2805 = _2792;
                                _2806 = _2793;
                                _2807 = _2808;
                                continue;
                            }
                        }
                        frontier_phi_83_pred = _2791;
                        frontier_phi_83_pred_1 = _2790;
                        frontier_phi_83_pred_2 = _2789;
                        frontier_phi_83_pred_3 = _2788;
                        frontier_phi_83_pred_4 = _2793;
                        frontier_phi_83_pred_5 = _2792;
                    }
                    _2384 = frontier_phi_83_pred;
                    _2382 = frontier_phi_83_pred_1;
                    _2380 = frontier_phi_83_pred_2;
                    _2378 = frontier_phi_83_pred_3;
                    _2388 = frontier_phi_83_pred_4;
                    _2386 = frontier_phi_83_pred_5;
                    uint _2574 = _2573 + 1u;
                    if (_2574 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2567 = _2378;
                        _2568 = _2380;
                        _2569 = _2382;
                        _2570 = _2384;
                        _2571 = _2386;
                        _2572 = _2388;
                        _2573 = _2574;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2388;
                frontier_phi_65_66_ladder_1 = _2386;
                frontier_phi_65_66_ladder_2 = _2382;
                frontier_phi_65_66_ladder_3 = _2380;
                frontier_phi_65_66_ladder_4 = _2384;
                frontier_phi_65_66_ladder_5 = _2378;
            }
            else
            {
                frontier_phi_65_66_ladder = _2243;
                frontier_phi_65_66_ladder_1 = _2241;
                frontier_phi_65_66_ladder_2 = _2237;
                frontier_phi_65_66_ladder_3 = _2235;
                frontier_phi_65_66_ladder_4 = _2239;
                frontier_phi_65_66_ladder_5 = _2233;
            }
            _2377 = frontier_phi_65_66_ladder_5;
            _2379 = frontier_phi_65_66_ladder_3;
            _2381 = frontier_phi_65_66_ladder_2;
            _2383 = frontier_phi_65_66_ladder_4;
            _2385 = frontier_phi_65_66_ladder_1;
            _2387 = frontier_phi_65_66_ladder;
        }
        float _2392 = isnan(1.0) ? _766 : (isnan(_766) ? 1.0 : min(_766, 1.0));
        _2155 = (_2392 * _2383) + _1882;
        _2157 = (_2392 * _2385) + _1883;
        _2159 = (_2392 * _2387) + _1884;
        _2161 = ((_2377 * 0.039999999105930328369140625) * _2392) + _2038;
        _2163 = ((_2379 * 0.039999999105930328369140625) * _2392) + _2039;
        _2165 = ((_2381 * 0.039999999105930328369140625) * _2392) + _2040;
    }
    else
    {
        _2155 = _1882;
        _2157 = _1883;
        _2159 = _1884;
        _2161 = _2038;
        _2163 = _2039;
        _2165 = _2040;
    }
    float _4007 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _4018 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _4029 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _2182 = ((isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * (_2155 + ((isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0))) * _766))) + ((_2161 + ((isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0))) * _1572)) * cbPerFrame._m0[3u].x);
    float _2183 = ((isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_2157 + ((isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0))) * _766))) + ((_2163 + ((isnan(0.0) ? _1787 : (isnan(_1787) ? 0.0 : max(_1787, 0.0))) * _1572)) * cbPerFrame._m0[3u].x);
    float _2184 = ((isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * (_2159 + ((isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0))) * _766))) + ((_2165 + ((isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0))) * _1572)) * cbPerFrame._m0[3u].x);
    uint _2188 = _740 + 6u;
    float _2196 = _701 / cbSceneParam._m0[86u].x;
    float _2197 = _702 / cbSceneParam._m0[86u].y;
    vec4 _2211 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2196, _2197, (log2((isnan(cbSceneParam._m0[77u].w) ? _688 : (isnan(_688) ? cbSceneParam._m0[77u].w : min(_688, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2213 = _2211.x;
    float _2214 = _2211.y;
    float _2215 = _2211.z;
    float _2216 = _2211.w;
    float _2296;
    float _2298;
    float _2300;
    float _2302;
    if (_688 > cbSceneParam._m0[78u].w)
    {
        float _2258 = isnan(_688) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _688 : min(cbSceneParam._m0[80u].w, _688));
        float _2259 = _2258 / _688;
        float _2270 = _2259 * _267;
        float _2271 = _268 * _2259;
        float _2272 = (-0.0) - _2271;
        float _2273 = _2259 * _269;
        float _2275 = (cbSceneParam._m0[77u].w * _2272) / _2258;
        float _2276 = _2275 + cbSceneParam._m0[79u].w;
        float _2277 = cbSceneParam._m0[79u].w - _2271;
        float _2283 = sqrt(((_2270 * _2270) + (_2271 * _2271)) + (_2273 * _2273));
        float _2286 = (1.0 - (cbSceneParam._m0[77u].w / _2258)) * _2283;
        float _2292 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2294 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2503;
        if (abs((_2272 - _2275) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2503 = ((((_2276 > 0.0) ? exp2(_2292 * _2276) : (2.0 - exp2(_2294 * _2276))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2286;
        }
        else
        {
            float _2438 = 1.0 / cbSceneParam._m0[80u].x;
            float _2439 = isnan(_2277) ? _2276 : (isnan(_2276) ? _2277 : max(_2276, _2277));
            float _2440 = isnan(_2277) ? _2276 : (isnan(_2276) ? _2277 : min(_2276, _2277));
            float _2449 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : min(_2439, 0.0));
            float _2450 = isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : min(_2440, 0.0));
            _2503 = ((abs(_2283 / _2272) * cbSceneParam._m0[80u].y) * ((((_2449 - _2450) * 2.0) - ((exp2(_2292 * (isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0)))) - exp2(_2292 * (isnan(0.0) ? _2440 : (isnan(_2440) ? 0.0 : max(_2440, 0.0))))) * _2438)) - ((exp2(_2294 * _2449) - exp2(_2294 * _2450)) * _2438))) + (_2286 * cbSceneParam._m0[80u].z);
        }
        vec4 _2505 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2196, _2197, 1.0), 0.0);
        float _2514 = exp2((_2503 * (-1.44269502162933349609375)) * (1.0 - _2505.w));
        float _2515 = log2(_2514);
        float _2531 = log2(_2216);
        _2296 = (exp2(_2531 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2515 * cbSceneParam._m0[78u].x)) * _2505.x) / cbSceneParam._m0[78u].x)) + _2213;
        _2298 = (exp2(_2531 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2515 * cbSceneParam._m0[78u].y)) * _2505.y) / cbSceneParam._m0[78u].y)) + _2214;
        _2300 = (exp2(_2531 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2515 * cbSceneParam._m0[78u].z)) * _2505.z) / cbSceneParam._m0[78u].z)) + _2215;
        _2302 = _2514 * _2216;
    }
    else
    {
        _2296 = _2213;
        _2298 = _2214;
        _2300 = _2215;
        _2302 = _2216;
    }
    float _2314 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2315 = _2314 == 3.0;
    float _2316 = log2(_2302);
    float _2323 = exp2(_2316 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0)));
    float _2324 = exp2(_2316 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0)));
    float _2325 = exp2(_2316 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0)));
    float _2334 = (_2314 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2334 * (_2315 ? _2323 : (_2323 + (cbSceneParam._m0[72u].w * _2296)));
    SV_Target.y = _2334 * (_2315 ? _2324 : (_2324 + (cbSceneParam._m0[72u].w * _2298)));
    SV_Target.z = _2334 * (_2315 ? _2325 : (_2325 + (cbSceneParam._m0[72u].w * _2300)));
    SV_Target.w = cbInstanceData._m0[_2188].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2188].w;
}


