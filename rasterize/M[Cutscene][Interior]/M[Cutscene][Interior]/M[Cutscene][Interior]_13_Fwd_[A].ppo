#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 10) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_8;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1090;
float _3069;
float _3070;
float _3071;
float _3072;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _257 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _267 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _257);
    float _268 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _257);
    float _269 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _257);
    vec4 _288 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _323 = cbMtdParam._m0[24u].x + _267;
    float _324 = cbMtdParam._m0[24u].y + _268;
    float _325 = cbMtdParam._m0[24u].z + _269;
    float _339 = (-0.0) - dot(vec3(_323, _324, _325), vec3(_195 * _188, _195 * _189, _195 * _190));
    float _340 = (-0.0) - dot(vec3(_323, _324, _325), vec3(_209 * TANGENT.x, _209 * TANGENT.y, _209 * TANGENT.z));
    float _341 = (-0.0) - dot(vec3(_323, _324, _325), vec3((-0.0) - (_202 * NORMAL.x), (-0.0) - (_202 * NORMAL.y), (-0.0) - (_202 * NORMAL.z)));
    float _345 = inversesqrt(dot(vec3(_339, _340, _341), vec3(_339, _340, _341)));
    float _348 = _345 * _341;
    float _349 = (_345 * _339) + (((_288.x * 2.0) + (-1.0)) * cbMtdParam._m0[22u].x);
    float _350 = (_345 * _340) + (((_288.y * 2.0) + (-1.0)) * cbMtdParam._m0[22u].y);
    float _351 = _349 * cbMtdParam._m0[20u].w;
    float _352 = _350 * cbMtdParam._m0[20u].z;
    float _353 = fract(TEXCOORD.x);
    float _354 = fract(TEXCOORD.y);
    float _360;
    if (_351 > 0.0)
    {
        _360 = (1.0 - _353) / _351;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_351 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _353) / _351;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _360 = frontier_phi_3_2_ladder;
    }
    float _368;
    if (_352 > 0.0)
    {
        _368 = (1.0 - _354) / _352;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_352 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _354) / _352;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _368 = frontier_phi_7_6_ladder;
    }
    bool _370 = _348 > 0.0;
    float _372 = _370 ? (cbMtdParam._m0[16u].x / _348) : 5000.0;
    float _373 = isnan(_368) ? _360 : (isnan(_360) ? _368 : min(_360, _368));
    float _374 = isnan(_372) ? _373 : (isnan(_373) ? _372 : min(_373, _372));
    float _378 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _379 = _353 + (-0.5);
    float _382 = _354 + (-0.5);
    float _385 = ((_374 * _348) + _378) / _378;
    vec4 _410 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (((((_379 + (_374 * _351)) / _385) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (((((_382 + (_374 * _352)) / _385) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    float _420 = cbMtdParam._m0[9u].x * _410.x;
    float _421 = cbMtdParam._m0[9u].y * _410.y;
    float _422 = cbMtdParam._m0[9u].z * _410.z;
    float _441 = _349 * cbMtdParam._m0[22u].w;
    float _442 = _350 * cbMtdParam._m0[22u].z;
    bool _443 = _441 > 0.0;
    float _448;
    if (_443)
    {
        _448 = (1.0 - _353) / _441;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_441 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _353) / _441;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _448 = frontier_phi_11_10_ladder;
    }
    bool _450 = _442 > 0.0;
    float _455;
    if (_450)
    {
        _455 = (1.0 - _354) / _442;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_442 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _354) / _442;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _455 = frontier_phi_15_14_ladder;
    }
    float _458 = _370 ? (cbMtdParam._m0[18u].x / _348) : 5000.0;
    float _459 = isnan(_455) ? _448 : (isnan(_448) ? _455 : min(_448, _455));
    float _460 = isnan(_458) ? _459 : (isnan(_459) ? _458 : min(_459, _458));
    float _464 = cbMtdParam._m0[19u].y * cbMtdParam._m0[18u].x;
    float _468 = ((_460 * _348) + _464) / _464;
    float _473 = cbMtdParam._m0[19u].x - cbMtdParam._m0[20u].x * trunc(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    float _475 = floor(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    vec4 _491 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_379 + (_460 * _441)) / _468) + 0.5) + _473) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_382 + (_460 * _442)) / _468) + 0.5) + _475) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[0u].w));
    float _503;
    if (_443)
    {
        _503 = (1.0 - _353) / _441;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_441 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _353) / _441;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _503 = frontier_phi_19_18_ladder;
    }
    float _509;
    if (_450)
    {
        _509 = (1.0 - _354) / _442;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_442 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _354) / _442;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _509 = frontier_phi_23_22_ladder;
    }
    float _511 = isnan(_509) ? _503 : (isnan(_503) ? _509 : min(_503, _509));
    float _512 = isnan(_458) ? _511 : (isnan(_511) ? _458 : min(_511, _458));
    float _519 = ((_512 * _348) + _464) / _464;
    vec4 _539 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_379 + (_512 * _441)) / _519) + 0.5) + _473) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_382 + (_512 * _442)) / _519) + 0.5) + _475) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[8u].w));
    float _541 = _539.x;
    float _548 = (_541 * ((_491.x * cbMtdParam._m0[10u].x) - _420)) + _420;
    float _549 = (_541 * ((_491.y * cbMtdParam._m0[10u].y) - _421)) + _421;
    float _550 = (_541 * ((_491.z * cbMtdParam._m0[10u].z) - _422)) + _422;
    float _566 = _349 * cbMtdParam._m0[23u].y;
    float _567 = _350 * cbMtdParam._m0[23u].x;
    bool _568 = _566 > 0.0;
    float _573;
    if (_568)
    {
        _573 = (1.0 - _353) / _566;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_566 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _353) / _566;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _573 = frontier_phi_27_26_ladder;
    }
    bool _575 = _567 > 0.0;
    float _580;
    if (_575)
    {
        _580 = (1.0 - _354) / _567;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_567 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _354) / _567;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _580 = frontier_phi_31_30_ladder;
    }
    float _583 = _370 ? (cbMtdParam._m0[19u].w / _348) : 5000.0;
    float _584 = isnan(_580) ? _573 : (isnan(_573) ? _580 : min(_573, _580));
    float _585 = isnan(_583) ? _584 : (isnan(_584) ? _583 : min(_584, _583));
    float _589 = cbMtdParam._m0[19u].w * cbMtdParam._m0[16u].z;
    float _593 = ((_585 * _348) + _589) / _589;
    float _598 = cbMtdParam._m0[19u].z - cbMtdParam._m0[23u].z * trunc(cbMtdParam._m0[19u].z / cbMtdParam._m0[23u].z);
    float _600 = floor(cbMtdParam._m0[19u].z / cbMtdParam._m0[23u].z);
    vec4 _616 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * (((((_379 + (_585 * _566)) / _593) + 0.5) + _598) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * (((((_382 + (_585 * _567)) / _593) + 0.5) + _600) / cbMtdParam._m0[23u].w)) + cbTextureTilingScale._m0[9u].w));
    float _628;
    if (_568)
    {
        _628 = (1.0 - _353) / _566;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_566 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _353) / _566;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _628 = frontier_phi_35_34_ladder;
    }
    float _634;
    if (_575)
    {
        _634 = (1.0 - _354) / _567;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_567 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _354) / _567;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _634 = frontier_phi_39_38_ladder;
    }
    float _636 = isnan(_634) ? _628 : (isnan(_628) ? _634 : min(_628, _634));
    float _637 = isnan(_583) ? _636 : (isnan(_636) ? _583 : min(_636, _583));
    float _644 = ((_637 * _348) + _589) / _589;
    vec4 _664 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_379 + (_637 * _566)) / _644) + 0.5) + _598) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_382 + (_637 * _567)) / _644) + 0.5) + _600) / cbMtdParam._m0[23u].w)) + cbTextureTilingScale._m0[10u].w));
    float _666 = _664.x;
    float _673 = (_666 * ((_616.x * cbMtdParam._m0[14u].x) - _548)) + _548;
    float _674 = (_666 * ((_616.y * cbMtdParam._m0[14u].y) - _549)) + _549;
    float _675 = (_666 * ((_616.z * cbMtdParam._m0[14u].z) - _550)) + _550;
    float _3131 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _3142 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _3153 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _694 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _698 = inversesqrt(dot(vec3(_267, _268, _269), vec3(_267, _268, _269)));
    float _699 = _267 * _698;
    float _700 = _268 * _698;
    float _701 = _269 * _698;
    vec4 _706 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _708 = _706.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _804 = sqrt(((_267 * _267) + (_268 * _268)) + (_269 * _269));
        float _810 = (cbMatDynParam._m0[5u].x * _804) + cbMatDynParam._m0[5u].y;
        float _3164 = isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0));
        float _811 = isnan(1.0) ? _3164 : (isnan(_3164) ? 1.0 : min(_3164, 1.0));
        float _815 = (cbMatDynParam._m0[5u].z * _804) + cbMatDynParam._m0[5u].w;
        float _3175 = isnan(0.0) ? _815 : (isnan(_815) ? 0.0 : max(_815, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3175 : (isnan(_3175) ? 1.0 : min(_3175, 1.0))) - _811)) + _811) < ((_708 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _720 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _721 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _734 = uint(roundEven(NORMAL.w)) * 13u;
    uint _736 = _734 + 9u;
    uint _737 = _736 + uint(cbMatDynParam._m0[0u].w);
    float _743 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3131 : (isnan(_3131) ? 1.0 : min(_3131, 1.0)))) * cbInstanceData._m0[_737].x;
    float _744 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3142 : (isnan(_3142) ? 1.0 : min(_3142, 1.0)))) * cbInstanceData._m0[_737].y;
    float _745 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3153 : (isnan(_3153) ? 1.0 : min(_3153, 1.0)))) * cbInstanceData._m0[_737].z;
    float _3186 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _746 = isnan(1.0) ? _3186 : (isnan(_3186) ? 1.0 : min(_3186, 1.0));
    float _3197 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _747 = isnan(1.0) ? _3197 : (isnan(_3197) ? 1.0 : min(_3197, 1.0));
    float _3208 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _748 = isnan(1.0) ? _3208 : (isnan(_3208) ? 1.0 : min(_3208, 1.0));
    vec4 _757 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _720, cbSceneParam._m0[86u].y * _721));
    float _760 = _757.x * TEXCOORD_4.z;
    float _761 = (-0.0) - _699;
    float _762 = (-0.0) - _700;
    float _763 = (-0.0) - _701;
    float _785 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _789 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _793 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1089;
    float _1091;
    float _1092;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _877 = (cbModelParam._m0[37u].x * ((((fma(_793, cbModelParam._m0[26u].z, fma(_789, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _785)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _879 = (cbModelParam._m0[37u].y * ((((fma(_793, cbModelParam._m0[27u].z, fma(_789, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _785)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _880 = (((((fma(_793, cbModelParam._m0[28u].z, fma(_789, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _785)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _883 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_877, _879, _880), 0.0);
        vec4 _890 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_877, _879, _880), 0.0);
        vec4 _897 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_877, _879, _880), 0.0);
        vec4 _904 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_877, _879, _880), 0.0);
        float _917 = exp2((_883.w + (-0.5)) * 20.0) * 2.0;
        float _918 = _917 * (_883.x + (-0.5));
        float _919 = _917 * (_883.y + (-0.5));
        float _920 = _917 * (_883.z + (-0.5));
        float _927 = exp2((_890.w + (-0.5)) * 20.0) * 2.0;
        float _928 = _927 * (_890.x + (-0.5));
        float _929 = _927 * (_890.y + (-0.5));
        float _930 = _927 * (_890.z + (-0.5));
        float _937 = exp2((_897.w + (-0.5)) * 20.0) * 2.0;
        float _938 = _937 * (_897.x + (-0.5));
        float _939 = _937 * (_897.y + (-0.5));
        float _940 = _937 * (_897.z + (-0.5));
        float _947 = exp2((_904.w + (-0.5)) * 20.0) * 2.0;
        float _948 = _947 * (_904.x + (-0.5));
        float _949 = _947 * (_904.y + (-0.5));
        float _950 = _947 * (_904.z + (-0.5));
        float _951 = isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0));
        float _952 = isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0));
        float _953 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _954 = _918 * 0.5;
        float _955 = _928 * 0.5;
        float _956 = _938 * 0.5;
        float _957 = dot(vec3(_954, _955, _956), vec3(_954, _955, _956));
        float _962 = (_957 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_957);
        float _971 = (dot(vec3(0.0), vec3(_962 * _954, _962 * _955, _962 * _956)) + 1.0) * 0.5;
        float _3234 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _981 = sqrt(((_955 * _955) + (_954 * _954)) + (_956 * _956)) / (_951 + 9.9999997473787516355514526367188e-06);
        float _3245 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _982 = isnan(1.0) ? _3245 : (isnan(_3245) ? 1.0 : min(_3245, 1.0));
        float _983 = _982 * 2.0;
        float _987 = (1.0 - _982) / (_982 + 1.0);
        float _3256 = isnan(0.0) ? _987 : (isnan(_987) ? 0.0 : max(_987, 0.0));
        float _988 = isnan(1.0) ? _3256 : (isnan(_3256) ? 1.0 : min(_3256, 1.0));
        float _997 = ((((1.0 - _988) * (_983 + 2.0)) * exp2(log2(isnan(1.0) ? _3234 : (isnan(_3234) ? 1.0 : min(_3234, 1.0))) * (_983 + 1.0))) + _988) * _951;
        float _998 = _919 * 0.5;
        float _999 = _929 * 0.5;
        float _1000 = _939 * 0.5;
        float _1001 = dot(vec3(_998, _999, _1000), vec3(_998, _999, _1000));
        float _1006 = (_1001 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1001);
        float _1014 = (dot(vec3(0.0), vec3(_1006 * _998, _1006 * _999, _1006 * _1000)) + 1.0) * 0.5;
        float _3267 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1023 = sqrt(((_999 * _999) + (_998 * _998)) + (_1000 * _1000)) / (_952 + 9.9999997473787516355514526367188e-06);
        float _3278 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3278 : (isnan(_3278) ? 1.0 : min(_3278, 1.0));
        float _1025 = _1024 * 2.0;
        float _1029 = (1.0 - _1024) / (_1024 + 1.0);
        float _3289 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1030 = isnan(1.0) ? _3289 : (isnan(_3289) ? 1.0 : min(_3289, 1.0));
        float _1039 = ((((1.0 - _1030) * (_1025 + 2.0)) * exp2(log2(isnan(1.0) ? _3267 : (isnan(_3267) ? 1.0 : min(_3267, 1.0))) * (_1025 + 1.0))) + _1030) * _952;
        float _1040 = _920 * 0.5;
        float _1041 = _930 * 0.5;
        float _1042 = _940 * 0.5;
        float _1043 = dot(vec3(_1040, _1041, _1042), vec3(_1040, _1041, _1042));
        float _1048 = (_1043 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1043);
        float _1056 = (dot(vec3(0.0), vec3(_1048 * _1040, _1048 * _1041, _1048 * _1042)) + 1.0) * 0.5;
        float _3300 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1065 = sqrt(((_1041 * _1041) + (_1040 * _1040)) + (_1042 * _1042)) / (_953 + 9.9999997473787516355514526367188e-06);
        float _3311 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0));
        float _1067 = _1066 * 2.0;
        float _1071 = (1.0 - _1066) / (_1066 + 1.0);
        float _3322 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0));
        float _1081 = ((((1.0 - _1072) * (_1067 + 2.0)) * exp2(log2(isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0))) * (_1067 + 1.0))) + _1072) * _953;
        _1089 = _920;
        _1091 = _919;
        _1092 = _918;
        _1093 = _930;
        _1094 = _929;
        _1095 = _928;
        _1096 = _940;
        _1097 = _939;
        _1098 = _938;
        _1099 = _953;
        _1100 = _952;
        _1101 = _951;
        _1102 = cbModelParam._m0[36u].z * (isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0)));
        _1103 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0)));
        _1104 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0)));
    }
    else
    {
        _1089 = _1090;
        _1091 = _1090;
        _1092 = _1090;
        _1093 = _1090;
        _1094 = _1090;
        _1095 = _1090;
        _1096 = _1090;
        _1097 = _1090;
        _1098 = _1090;
        _1099 = _1090;
        _1100 = _1090;
        _1101 = _1090;
        _1102 = 0.0;
        _1103 = 0.0;
        _1104 = 0.0;
    }
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1161 = (cbModelParam._m0[38u].x * ((((fma(_793, cbModelParam._m0[30u].z, fma(_789, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _785)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1162 = (cbModelParam._m0[38u].y * ((((fma(_793, cbModelParam._m0[31u].z, fma(_789, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _785)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1163 = (((((fma(_793, cbModelParam._m0[32u].z, fma(_789, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _785)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        vec4 _1179 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        vec4 _1186 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1161, _1162, _1163), 0.0);
        float _1198 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1199 = _1198 * (_1165.x + (-0.5));
        float _1200 = _1198 * (_1165.y + (-0.5));
        float _1201 = _1198 * (_1165.z + (-0.5));
        float _1208 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1209 = _1208 * (_1172.x + (-0.5));
        float _1210 = _1208 * (_1172.y + (-0.5));
        float _1211 = _1208 * (_1172.z + (-0.5));
        float _1218 = exp2((_1179.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1179.x + (-0.5));
        float _1220 = _1218 * (_1179.y + (-0.5));
        float _1221 = _1218 * (_1179.z + (-0.5));
        float _1228 = exp2((_1186.w + (-0.5)) * 20.0) * 2.0;
        float _1229 = _1228 * (_1186.x + (-0.5));
        float _1230 = _1228 * (_1186.y + (-0.5));
        float _1231 = _1228 * (_1186.z + (-0.5));
        float _1232 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1233 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1234 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1235 = _1199 * 0.5;
        float _1236 = _1209 * 0.5;
        float _1237 = _1219 * 0.5;
        float _1238 = dot(vec3(_1235, _1236, _1237), vec3(_1235, _1236, _1237));
        float _1243 = (_1238 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1238);
        float _1251 = (dot(vec3(0.0), vec3(_1243 * _1235, _1243 * _1236, _1243 * _1237)) + 1.0) * 0.5;
        float _3363 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1260 = sqrt(((_1236 * _1236) + (_1235 * _1235)) + (_1237 * _1237)) / (_1232 + 9.9999997473787516355514526367188e-06);
        float _3374 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0));
        float _1262 = _1261 * 2.0;
        float _1266 = (1.0 - _1261) / (_1261 + 1.0);
        float _3385 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1267 = isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0));
        float _1276 = ((((1.0 - _1267) * (_1262 + 2.0)) * exp2(log2(isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0))) * (_1262 + 1.0))) + _1267) * _1232;
        float _1277 = _1200 * 0.5;
        float _1278 = _1210 * 0.5;
        float _1279 = _1220 * 0.5;
        float _1280 = dot(vec3(_1277, _1278, _1279), vec3(_1277, _1278, _1279));
        float _1285 = (_1280 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1280);
        float _1293 = (dot(vec3(0.0), vec3(_1285 * _1277, _1285 * _1278, _1285 * _1279)) + 1.0) * 0.5;
        float _3396 = isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0));
        float _1302 = sqrt(((_1278 * _1278) + (_1277 * _1277)) + (_1279 * _1279)) / (_1233 + 9.9999997473787516355514526367188e-06);
        float _3407 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0));
        float _1304 = _1303 * 2.0;
        float _1308 = (1.0 - _1303) / (_1303 + 1.0);
        float _3418 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        float _1309 = isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0));
        float _1318 = ((((1.0 - _1309) * (_1304 + 2.0)) * exp2(log2(isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0))) * (_1304 + 1.0))) + _1309) * _1233;
        float _1319 = _1201 * 0.5;
        float _1320 = _1211 * 0.5;
        float _1321 = _1221 * 0.5;
        float _1322 = dot(vec3(_1319, _1320, _1321), vec3(_1319, _1320, _1321));
        float _1327 = (_1322 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1322);
        float _1335 = (dot(vec3(0.0), vec3(_1327 * _1319, _1327 * _1320, _1327 * _1321)) + 1.0) * 0.5;
        float _3429 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1344 = sqrt(((_1320 * _1320) + (_1319 * _1319)) + (_1321 * _1321)) / (_1234 + 9.9999997473787516355514526367188e-06);
        float _3440 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1345 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
        float _1346 = _1345 * 2.0;
        float _1350 = (1.0 - _1345) / (_1345 + 1.0);
        float _3451 = isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0));
        float _1351 = isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0));
        float _1360 = ((((1.0 - _1351) * (_1346 + 2.0)) * exp2(log2(isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0))) * (_1346 + 1.0))) + _1351) * _1234;
        _1368 = _1201;
        _1369 = _1200;
        _1370 = _1199;
        _1371 = _1211;
        _1372 = _1210;
        _1373 = _1209;
        _1374 = _1221;
        _1375 = _1220;
        _1376 = _1219;
        _1377 = _1234;
        _1378 = _1233;
        _1379 = _1232;
        _1380 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0)));
        _1381 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)));
        _1382 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)));
    }
    else
    {
        _1368 = _1090;
        _1369 = _1090;
        _1370 = _1090;
        _1371 = _1090;
        _1372 = _1090;
        _1373 = _1090;
        _1374 = _1090;
        _1375 = _1090;
        _1376 = _1090;
        _1377 = _1090;
        _1378 = _1090;
        _1379 = _1090;
        _1380 = 0.0;
        _1381 = 0.0;
        _1382 = 0.0;
    }
    float _1392 = (cbModelParam._m0[1u].x * (_1380 - _1102)) + _1102;
    float _1393 = (cbModelParam._m0[1u].x * (_1381 - _1103)) + _1103;
    float _1394 = (cbModelParam._m0[1u].x * (_1382 - _1104)) + _1104;
    float _1415 = fma(_1394, cbSceneParam._m0[89u].z, fma(_1393, cbSceneParam._m0[89u].y, _1392 * cbSceneParam._m0[89u].x));
    float _1418 = fma(_1394, cbSceneParam._m0[90u].z, fma(_1393, cbSceneParam._m0[90u].y, _1392 * cbSceneParam._m0[90u].x));
    float _1421 = fma(_1394, cbSceneParam._m0[91u].z, fma(_1393, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1392));
    float _1436 = _699 * (-0.5);
    float _1437 = _700 * (-0.5);
    float _1438 = _701 * (-0.5);
    float _1439 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1370, _1373, _1376, _1379));
    float _1442 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1369, _1372, _1375, _1378));
    float _1445 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1368, _1371, _1374, _1377));
    float _1479;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1452 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1089, _1093, _1096, _1099));
        float _1456 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1091, _1094, _1097, _1100));
        float _1460 = dot(vec4(_1436, _1437, _1438, 1.0), vec4(_1092, _1095, _1098, _1101));
        float _1467 = dot(vec4(cbModelParam._m0[39u]), vec4(_1436, _1437, _1438, 1.0));
        _1479 = dot(vec3(isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)), isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0)), isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1467) ? 0.0 : (isnan(0.0) ? _1467 : max(0.0, _1467))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1479 = 1.0;
    }
    float _1490;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1481 = dot(vec4(cbModelParam._m0[40u]), vec4(_1436, _1437, _1438, 1.0));
        _1490 = dot(vec3(isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)), isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)), isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1481) ? 0.0 : (isnan(0.0) ? _1481 : max(0.0, _1481))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1490 = 1.0;
    }
    float _1494 = (_1490 * cbModelParam._m0[1u].x) + (_1479 * (1.0 - cbModelParam._m0[1u].x));
    float _1503 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1585;
    float _1587;
    float _1589;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1552 = fma(_793, cbModelParam._m0[13u].z, fma(_789, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _785)) + cbModelParam._m0[13u].w;
        float _1556 = fma(_793, cbModelParam._m0[14u].z, fma(_789, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _785)) + cbModelParam._m0[14u].w;
        float _1560 = fma(_793, cbModelParam._m0[15u].z, fma(_789, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _785)) + cbModelParam._m0[15u].w;
        float _1563 = fma(_763, cbModelParam._m0[13u].z, fma(_762, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _761));
        float _1566 = fma(_763, cbModelParam._m0[14u].z, fma(_762, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _761));
        float _1569 = fma(_763, cbModelParam._m0[15u].z, fma(_762, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _761));
        float _1595;
        if (_1563 > 0.0)
        {
            _1595 = abs((1.0 - _1552) / _1563);
        }
        else
        {
            float frontier_phi_57_55_ladder;
            if (_1563 < 0.0)
            {
                frontier_phi_57_55_ladder = abs((_1552 + 1.0) / _1563);
            }
            else
            {
                frontier_phi_57_55_ladder = 5000.0;
            }
            _1595 = frontier_phi_57_55_ladder;
        }
        float _1891;
        if (_1566 > 0.0)
        {
            _1891 = abs((1.0 - _1556) / _1566);
        }
        else
        {
            float frontier_phi_66_62_ladder;
            if (_1566 < 0.0)
            {
                frontier_phi_66_62_ladder = abs((_1556 + 1.0) / _1566);
            }
            else
            {
                frontier_phi_66_62_ladder = 5000.0;
            }
            _1891 = frontier_phi_66_62_ladder;
        }
        float _2202;
        if (_1569 > 0.0)
        {
            _2202 = abs((1.0 - _1560) / _1569);
        }
        else
        {
            float frontier_phi_80_73_ladder;
            if (_1569 < 0.0)
            {
                frontier_phi_80_73_ladder = abs((_1560 + 1.0) / _1569);
            }
            else
            {
                frontier_phi_80_73_ladder = 5000.0;
            }
            _2202 = frontier_phi_80_73_ladder;
        }
        float _2204 = isnan(_1891) ? _1595 : (isnan(_1595) ? _1891 : min(_1595, _1891));
        float _2205 = isnan(_2202) ? _2204 : (isnan(_2204) ? _2202 : min(_2204, _2202));
        float _2209 = (_2205 * _1563) + _1552;
        float _2210 = (_2205 * _1566) + _1556;
        float _2211 = (_2205 * _1569) + _1560;
        float _2212 = _2205 * 9.9999997473787516355514526367188e-05;
        float _2213 = (-1.0) - _2212;
        float _2215 = _2212 + 1.0;
        float frontier_phi_56_80_ladder;
        float frontier_phi_56_80_ladder_1;
        float frontier_phi_56_80_ladder_2;
        if ((_2211 > _2215) || ((_2211 < _2213) || ((_2210 > _2215) || ((_2210 < _2213) || ((_2209 < _2213) || (_2209 > _2215))))))
        {
            frontier_phi_56_80_ladder = 0.0;
            frontier_phi_56_80_ladder_1 = 0.0;
            frontier_phi_56_80_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2350 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2211, cbModelParam._m0[9u].z, fma(_2210, cbModelParam._m0[9u].y, _2209 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2211, cbModelParam._m0[10u].z, fma(_2210, cbModelParam._m0[10u].y, _2209 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2211, cbModelParam._m0[11u].z, fma(_2210, cbModelParam._m0[11u].y, _2209 * cbModelParam._m0[11u].x))), _1503);
            frontier_phi_56_80_ladder = _2350.z * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_1 = _2350.y * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_2 = _2350.x * cbModelParam._m0[1u].y;
        }
        _1585 = frontier_phi_56_80_ladder_2;
        _1587 = frontier_phi_56_80_ladder_1;
        _1589 = frontier_phi_56_80_ladder;
    }
    else
    {
        vec4 _1573 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_761, _762, _763), _1503);
        _1585 = _1573.x * cbModelParam._m0[1u].y;
        _1587 = _1573.y * cbModelParam._m0[1u].y;
        _1589 = _1573.z * cbModelParam._m0[1u].y;
    }
    float _1592 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1680;
    float _1682;
    float _1684;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1644 = fma(_793, cbModelParam._m0[21u].z, fma(_789, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _785)) + cbModelParam._m0[21u].w;
        float _1648 = fma(_793, cbModelParam._m0[22u].z, fma(_789, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _785)) + cbModelParam._m0[22u].w;
        float _1652 = fma(_793, cbModelParam._m0[23u].z, fma(_789, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _785)) + cbModelParam._m0[23u].w;
        float _1655 = fma(_763, cbModelParam._m0[21u].z, fma(_762, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _761));
        float _1658 = fma(_763, cbModelParam._m0[22u].z, fma(_762, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _761));
        float _1661 = fma(_763, cbModelParam._m0[23u].z, fma(_762, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _761));
        float _1896;
        if (_1655 > 0.0)
        {
            _1896 = abs((1.0 - _1644) / _1655);
        }
        else
        {
            float frontier_phi_68_64_ladder;
            if (_1655 < 0.0)
            {
                frontier_phi_68_64_ladder = abs((_1644 + 1.0) / _1655);
            }
            else
            {
                frontier_phi_68_64_ladder = 5000.0;
            }
            _1896 = frontier_phi_68_64_ladder;
        }
        float _2228;
        if (_1658 > 0.0)
        {
            _2228 = abs((1.0 - _1648) / _1658);
        }
        else
        {
            float frontier_phi_82_75_ladder;
            if (_1658 < 0.0)
            {
                frontier_phi_82_75_ladder = abs((_1648 + 1.0) / _1658);
            }
            else
            {
                frontier_phi_82_75_ladder = 5000.0;
            }
            _2228 = frontier_phi_82_75_ladder;
        }
        float _2415;
        if (_1661 > 0.0)
        {
            _2415 = abs((1.0 - _1652) / _1661);
        }
        else
        {
            float frontier_phi_100_93_ladder;
            if (_1661 < 0.0)
            {
                frontier_phi_100_93_ladder = abs((_1652 + 1.0) / _1661);
            }
            else
            {
                frontier_phi_100_93_ladder = 5000.0;
            }
            _2415 = frontier_phi_100_93_ladder;
        }
        float _2417 = isnan(_2228) ? _1896 : (isnan(_1896) ? _2228 : min(_1896, _2228));
        float _2418 = isnan(_2415) ? _2417 : (isnan(_2417) ? _2415 : min(_2417, _2415));
        float _2422 = (_2418 * _1655) + _1644;
        float _2423 = (_2418 * _1658) + _1648;
        float _2424 = (_2418 * _1661) + _1652;
        float _2425 = _2418 * 9.9999997473787516355514526367188e-05;
        float _2426 = (-1.0) - _2425;
        float _2428 = _2425 + 1.0;
        float frontier_phi_65_100_ladder;
        float frontier_phi_65_100_ladder_1;
        float frontier_phi_65_100_ladder_2;
        if ((_2424 > _2428) || ((_2424 < _2426) || ((_2423 > _2428) || ((_2423 < _2426) || ((_2422 < _2426) || (_2422 > _2428))))))
        {
            frontier_phi_65_100_ladder = 0.0;
            frontier_phi_65_100_ladder_1 = 0.0;
            frontier_phi_65_100_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2616 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2424, cbModelParam._m0[17u].z, fma(_2423, cbModelParam._m0[17u].y, _2422 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2424, cbModelParam._m0[18u].z, fma(_2423, cbModelParam._m0[18u].y, _2422 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2424, cbModelParam._m0[19u].z, fma(_2423, cbModelParam._m0[19u].y, _2422 * cbModelParam._m0[19u].x))), _1592);
            frontier_phi_65_100_ladder = _2616.y * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_1 = _2616.x * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_2 = _2616.z * cbModelParam._m0[1u].z;
        }
        _1680 = frontier_phi_65_100_ladder_1;
        _1682 = frontier_phi_65_100_ladder;
        _1684 = frontier_phi_65_100_ladder_2;
    }
    else
    {
        vec4 _1664 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_761, _762, _763), _1592);
        _1680 = _1664.x * cbModelParam._m0[1u].z;
        _1682 = _1664.y * cbModelParam._m0[1u].z;
        _1684 = _1664.z * cbModelParam._m0[1u].z;
    }
    float _1696 = _760 * 0.01200000010430812835693359375;
    float _1698 = _1696 * ((cbModelParam._m0[1u].w * (_1680 - _1585)) + _1585);
    float _1699 = _1696 * ((cbModelParam._m0[1u].w * (_1682 - _1587)) + _1587);
    float _1700 = _1696 * ((cbModelParam._m0[1u].w * (_1684 - _1589)) + _1589);
    float _1703 = fma(_1700, cbSceneParam._m0[89u].z, fma(_1699, cbSceneParam._m0[89u].y, _1698 * cbSceneParam._m0[89u].x));
    float _1706 = fma(_1700, cbSceneParam._m0[90u].z, fma(_1699, cbSceneParam._m0[90u].y, _1698 * cbSceneParam._m0[90u].x));
    float _1709 = fma(_1700, cbSceneParam._m0[91u].z, fma(_1699, cbSceneParam._m0[91u].y, _1698 * cbSceneParam._m0[91u].x));
    uvec4 _1719 = floatBitsToUint(cbInstanceData._m0[_734 + 5u]);
    uint _1721 = _1719.x * 14u;
    uint _1722 = _1721 + 13u;
    float _1727 = _760 + (-1.0);
    float _1730 = (cbLight._m0[_1722].x * _1727) + 1.0;
    float _1731 = (cbLight._m0[_1722].y * _1727) + 1.0;
    uint _1732 = _1721 + 5u;
    float _1738 = isnan(1.0) ? _1731 : (isnan(_1731) ? 1.0 : min(_1731, 1.0));
    uint _1742 = _1721 + 4u;
    float _1749 = isnan(1.0) ? _1730 : (isnan(_1730) ? 1.0 : min(_1730, 1.0));
    uint _1753 = _1721 | 1u;
    float _1764 = dot(vec3(cbLight._m0[_1721].xyz), vec3(0.0));
    float _1767 = dot(vec3(cbLight._m0[_1753].xyz), vec3(0.0));
    float _3587 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
    float _3598 = isnan(0.0) ? _1767 : (isnan(_1767) ? 0.0 : max(_1767, 0.0));
    float _1772 = (isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0))) * 0.3183098733425140380859375;
    float _1774 = (isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0))) * 0.3183098733425140380859375;
    float _1781 = ((cbLight._m0[_1732].x * _1738) * _1774) + ((cbLight._m0[_1742].x * _1749) * _1772);
    float _1782 = ((_1738 * cbLight._m0[_1732].y) * _1774) + ((_1749 * cbLight._m0[_1742].y) * _1772);
    float _1783 = ((_1738 * cbLight._m0[_1732].z) * _1774) + ((_1749 * cbLight._m0[_1742].z) * _1772);
    uint _1784 = _1721 + 8u;
    float _1790 = cbLight._m0[_1721].x + _699;
    float _1791 = cbLight._m0[_1721].y + _700;
    float _1792 = cbLight._m0[_1721].z + _701;
    float _1796 = inversesqrt(dot(vec3(_1790, _1791, _1792), vec3(_1790, _1791, _1792)));
    float _1800 = dot(vec3(0.0), vec3(cbLight._m0[_1721].xyz));
    float _3609 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
    float _1803 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
    float _1804 = dot(vec3(0.0), vec3(_699, _700, _701));
    float _3620 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
    float _1807 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
    float _1808 = dot(vec3(cbLight._m0[_1721].xyz), vec3(_1790 * _1796, _1791 * _1796, _1792 * _1796));
    float _3631 = isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0));
    float _1819 = (exp2(log2(1.0 - (isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1825 = (0.5 / ((_1803 + 9.9999999392252902907785028219223e-09) + _1807)) * _1803;
    float _3642 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
    float _1827 = (isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0))) * 0.31831014156341552734375;
    uint _1838 = _1721 + 9u;
    float _1844 = cbLight._m0[_1753].x + _699;
    float _1845 = cbLight._m0[_1753].y + _700;
    float _1846 = cbLight._m0[_1753].z + _701;
    float _1850 = inversesqrt(dot(vec3(_1844, _1845, _1846), vec3(_1844, _1845, _1846)));
    float _1854 = dot(vec3(0.0), vec3(cbLight._m0[_1753].xyz));
    float _3653 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
    float _1857 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
    float _1858 = dot(vec3(cbLight._m0[_1753].xyz), vec3(_1844 * _1850, _1845 * _1850, _1846 * _1850));
    float _3664 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
    float _1867 = (exp2(log2(1.0 - (isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1871 = (0.5 / ((_1857 + 9.9999999392252902907785028219223e-09) + _1807)) * _1857;
    float _3675 = isnan(0.0) ? _1871 : (isnan(_1871) ? 0.0 : max(_1871, 0.0));
    float _1873 = (isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0))) * 0.31831014156341552734375;
    float _1883 = (((_1867 * cbLight._m0[_1838].x) * _1873) * _1738) + (((_1819 * cbLight._m0[_1784].x) * _1827) * _1749);
    float _1884 = (((_1867 * cbLight._m0[_1838].y) * _1873) * _1738) + (((_1819 * cbLight._m0[_1784].y) * _1827) * _1749);
    float _1885 = (((_1867 * cbLight._m0[_1838].z) * _1873) * _1738) + (((_1819 * cbLight._m0[_1784].z) * _1827) * _1749);
    float _2001;
    float _2003;
    float _2005;
    float _2007;
    float _2009;
    float _2011;
    if (_1719.y == 0u)
    {
        float _1941 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1942 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1941;
        float _1943 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1941;
        float _1944 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1941;
        uvec4 _1956 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1957 = _1956.x;
        uint _1968 = uint((float(_1956.y) * floor(float(uint(cbSceneParam._m0[85u].y * _721) / _1957))) + floor(float(uint(cbSceneParam._m0[85u].x * _720) / _1957)));
        float _1978 = (log2(_1944 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1979 = isnan(0.0) ? _1978 : (isnan(_1978) ? 0.0 : max(_1978, 0.0));
        uint _1982 = uint(isnan(14.0) ? _1979 : (isnan(_1979) ? 14.0 : min(_1979, 14.0)));
        uvec4 _1987 = texelFetch(g_lightClusterGridBuffer, int(((_1982 << 2u) + (_1968 << 6u)) >> 2u));
        uint _1988 = _1987.x;
        uint _1989 = _1956.z;
        float _2079;
        float _2081;
        float _2083;
        float _2085;
        float _2087;
        float _2089;
        if (((((1u << ((_1989 >> 4u) & 15u)) + 4294967295u) & _1988) == 0u) || ((_1989 & 240u) == 0u))
        {
            _2079 = 0.0;
            _2081 = 0.0;
            _2083 = 0.0;
            _2085 = 0.0;
            _2087 = 0.0;
            _2089 = 0.0;
        }
        else
        {
            float _2080;
            float _2082;
            float _2084;
            float _2086;
            float _2088;
            float _2090;
            float _2262 = 0.0;
            float _2263 = 0.0;
            float _2264 = 0.0;
            float _2265 = 0.0;
            float _2266 = 0.0;
            float _2267 = 0.0;
            uint _2268 = 0u;
            uint _2277;
            bool _2278;
            for (;;)
            {
                _2277 = texelFetch(g_lightClassification, int((((_1982 << 5u) + (_1968 << 9u)) + (_2268 << 2u)) >> 2u)).x;
                _2278 = _2277 == 0u;
                float frontier_phi_95_pred;
                float frontier_phi_95_pred_1;
                float frontier_phi_95_pred_2;
                float frontier_phi_95_pred_3;
                float frontier_phi_95_pred_4;
                float frontier_phi_95_pred_5;
                if (_2278)
                {
                    frontier_phi_95_pred = _2263;
                    frontier_phi_95_pred_1 = _2262;
                    frontier_phi_95_pred_2 = _2264;
                    frontier_phi_95_pred_3 = _2267;
                    frontier_phi_95_pred_4 = _2266;
                    frontier_phi_95_pred_5 = _2265;
                }
                else
                {
                    float _2458;
                    float _2459;
                    float _2460;
                    float _2461;
                    float _2462;
                    float _2463;
                    uint _2464;
                    _2458 = _2262;
                    _2459 = _2263;
                    _2460 = _2264;
                    _2461 = _2265;
                    _2462 = _2266;
                    _2463 = _2267;
                    _2464 = _2277;
                    float _2359;
                    float _2360;
                    float _2361;
                    float _2362;
                    float _2363;
                    float _2364;
                    for (;;)
                    {
                        uint _2468 = uint(findLSB(_2464)) + (_2268 << 5u);
                        uint _2465 = (_2464 + 4294967295u) & _2464;
                        uint _2470 = _2468 * 48u;
                        vec4 _2484 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2470)).x, texelFetch(g_PointLightRenderingBuffer, int(_2470 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2470 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2470 + 3u)).x));
                        uint _2490 = (_2468 * 48u) + 4u;
                        vec4 _2503 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2490)).x, texelFetch(g_PointLightRenderingBuffer, int(_2490 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2490 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2490 + 3u)).x));
                        uint _2509 = (_2468 * 48u) + 8u;
                        vec3 _2520 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2509)).x, texelFetch(g_PointLightRenderingBuffer, int(_2509 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2509 + 2u)).x));
                        float _2524 = _2484.x - _1942;
                        float _2525 = _2484.y - _1943;
                        float _2526 = _2484.z - _1944;
                        float _2527 = dot(vec3(_2524, _2525, _2526), vec3(_2524, _2525, _2526));
                        float _2530 = inversesqrt(_2527);
                        float _2539 = 1.0 - (_2527 * _2484.w);
                        float _3696 = isnan(0.0) ? _2539 : (isnan(_2539) ? 0.0 : max(_2539, 0.0));
                        float _2540 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
                        float _2541 = sqrt(_2527) * _2503.w;
                        float _2544 = 1.39999997615814208984375 / (_2541 + 1.39999997615814208984375);
                        float _2545 = _2544 * _2544;
                        float _2548 = ((1.0 - _2545) * dot(vec3(0.0), vec3(_2530 * _2524, _2530 * _2525, _2530 * _2526))) + _2545;
                        float _2551 = _2541 * _2541;
                        float _2555 = ((isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0))) * _2540) / ((_2551 * 0.699999988079071044921875) + 1.0);
                        float _2559 = (-0.0) - _1942;
                        float _2560 = (-0.0) - _1943;
                        float _2561 = (-0.0) - _1944;
                        float _2565 = inversesqrt(dot(vec3(_2559, _2560, _2561), vec3(_2559, _2560, _2561)));
                        float _2569 = dot(vec3(0.0), vec3(_2565 * _2559, _2565 * _2560, _2565 * _2561));
                        float _3712 = isnan(0.0) ? _2569 : (isnan(_2569) ? 0.0 : max(_2569, 0.0));
                        float _3723 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
                        float _2573 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
                        float _2577 = (0.5 / (((isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0))) + 9.9999999392252902907785028219223e-09) + _2573)) * _2573;
                        float _3734 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
                        float _2586 = (((isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))) * 3.1415927410125732421875) / ((_2551 * 2.1991131305694580078125) + 3.141590118408203125)) * _2540;
                        _2362 = (_2555 * _2503.x) + _2461;
                        _2363 = (_2555 * _2503.y) + _2462;
                        _2364 = (_2555 * _2503.z) + _2463;
                        _2359 = (_2586 * _2520.x) + _2458;
                        _2360 = (_2586 * _2520.y) + _2459;
                        _2361 = (_2586 * _2520.z) + _2460;
                        if (_2465 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2458 = _2359;
                            _2459 = _2360;
                            _2460 = _2361;
                            _2461 = _2362;
                            _2462 = _2363;
                            _2463 = _2364;
                            _2464 = _2465;
                        }
                    }
                    frontier_phi_95_pred = _2360;
                    frontier_phi_95_pred_1 = _2359;
                    frontier_phi_95_pred_2 = _2361;
                    frontier_phi_95_pred_3 = _2364;
                    frontier_phi_95_pred_4 = _2363;
                    frontier_phi_95_pred_5 = _2362;
                }
                _2082 = frontier_phi_95_pred;
                _2080 = frontier_phi_95_pred_1;
                _2084 = frontier_phi_95_pred_2;
                _2090 = frontier_phi_95_pred_3;
                _2088 = frontier_phi_95_pred_4;
                _2086 = frontier_phi_95_pred_5;
                uint _2269 = _2268 + 1u;
                if (_2269 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2262 = _2080;
                    _2263 = _2082;
                    _2264 = _2084;
                    _2265 = _2086;
                    _2266 = _2088;
                    _2267 = _2090;
                    _2268 = _2269;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2079 = _2080;
            _2081 = _2082;
            _2083 = _2084;
            _2085 = _2086;
            _2087 = _2088;
            _2089 = _2090;
        }
        uvec4 _2093 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2094 = _2093.z;
        uint _2096 = (_2094 >> 8u) & 15u;
        float _2233;
        float _2235;
        float _2237;
        float _2239;
        float _2241;
        float _2243;
        if (((4294967295u << _2096) & _1988) == 0u)
        {
            _2233 = _2079;
            _2235 = _2081;
            _2237 = _2083;
            _2239 = _2085;
            _2241 = _2087;
            _2243 = _2089;
        }
        else
        {
            float _2258 = inversesqrt(dot(vec3(_1942, _1943, _1944), vec3(_1942, _1943, _1944)));
            float frontier_phi_84_85_ladder;
            float frontier_phi_84_85_ladder_1;
            float frontier_phi_84_85_ladder_2;
            float frontier_phi_84_85_ladder_3;
            float frontier_phi_84_85_ladder_4;
            float frontier_phi_84_85_ladder_5;
            if (_2096 < ((_2094 >> 12u) & 15u))
            {
                float _2234;
                float _2236;
                float _2238;
                float _2240;
                float _2242;
                float _2244;
                float _2441 = _2079;
                float _2442 = _2081;
                float _2443 = _2083;
                float _2444 = _2085;
                float _2445 = _2087;
                float _2446 = _2089;
                uint _2447 = _2096;
                uint _2456;
                bool _2457;
                for (;;)
                {
                    _2456 = texelFetch(g_lightClassification, int((((_1982 << 5u) + (_1968 << 9u)) + (_2447 << 2u)) >> 2u)).x;
                    _2457 = _2456 == 0u;
                    float frontier_phi_109_pred;
                    float frontier_phi_109_pred_1;
                    float frontier_phi_109_pred_2;
                    float frontier_phi_109_pred_3;
                    float frontier_phi_109_pred_4;
                    float frontier_phi_109_pred_5;
                    if (_2457)
                    {
                        frontier_phi_109_pred = _2442;
                        frontier_phi_109_pred_1 = _2441;
                        frontier_phi_109_pred_2 = _2446;
                        frontier_phi_109_pred_3 = _2445;
                        frontier_phi_109_pred_4 = _2444;
                        frontier_phi_109_pred_5 = _2443;
                    }
                    else
                    {
                        float _2621;
                        float _2622;
                        float _2623;
                        float _2624;
                        float _2625;
                        float _2626;
                        float _2870;
                        float _2871;
                        float _2872;
                        float _2873;
                        float _2874;
                        float _2875;
                        float _2634 = _2441;
                        float _2635 = _2442;
                        float _2636 = _2443;
                        float _2637 = _2444;
                        float _2638 = _2445;
                        float _2639 = _2446;
                        uint _2640 = _2456;
                        uint _2641;
                        vec4 _2666;
                        float _2667;
                        vec4 _2682;
                        vec3 _2694;
                        vec4 _2709;
                        vec4 _2724;
                        float _2770;
                        bool _2771;
                        for (;;)
                        {
                            uint _2651 = ((_2447 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2640));
                            _2641 = (_2640 + 4294967295u) & _2640;
                            uint _2653 = _2651 * 40u;
                            _2666 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2653)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2653 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2653 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2653 + 3u)).x));
                            _2667 = _2666.w;
                            uint _2669 = (_2651 * 40u) + 4u;
                            _2682 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2669)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2669 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2669 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2669 + 3u)).x));
                            uint _2684 = (_2651 * 40u) + 8u;
                            _2694 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2684)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2684 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2684 + 2u)).x));
                            uint _2696 = (_2651 * 40u) + 16u;
                            _2709 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2696)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2696 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2696 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2696 + 3u)).x));
                            uint _2711 = (_2651 * 40u) + 20u;
                            _2724 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2711)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2711 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2711 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2711 + 3u)).x));
                            uint _2726 = (_2651 * 40u) + 24u;
                            vec4 _2739 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2726)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2726 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2726 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2726 + 3u)).x));
                            uint _2745 = (_2651 * 40u) + 28u;
                            vec4 _2758 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2745)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2745 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2745 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2745 + 3u)).x));
                            _2770 = fma(_1944, _2758.z, fma(_1943, _2758.y, _2758.x * _1942)) + _2758.w;
                            _2771 = !((fma(_1944, _2739.z, fma(_1943, _2739.y, _2739.x * _1942)) + _2739.w) <= 0.0);
                            float frontier_phi_115_pred;
                            float frontier_phi_115_pred_1;
                            float frontier_phi_115_pred_2;
                            float frontier_phi_115_pred_3;
                            float frontier_phi_115_pred_4;
                            float frontier_phi_115_pred_5;
                            if (_2771)
                            {
                                float _2798 = _2666.x - _1942;
                                float _2799 = _2666.y - _1943;
                                float _2800 = _2666.z - _1944;
                                float _2801 = dot(vec3(_2798, _2799, _2800), vec3(_2798, _2799, _2800));
                                float _2804 = inversesqrt(_2801);
                                float _2805 = _2804 * _2798;
                                float _2806 = _2804 * _2799;
                                float _2807 = _2804 * _2800;
                                float _2811 = 1.0 - (_2801 / (_2667 * _2667));
                                float _3745 = isnan(0.0) ? _2811 : (isnan(_2811) ? 0.0 : max(_2811, 0.0));
                                float _2812 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
                                float _2816 = sqrt(_2801) * _2682.w;
                                float _2818 = 1.39999997615814208984375 / (_2816 + 1.39999997615814208984375);
                                float _2819 = _2818 * _2818;
                                float _2820 = 1.0 - _2819;
                                float _2822 = (_2820 * dot(vec3(_2805, _2806, _2807), vec3(0.0))) + _2819;
                                float _2825 = _2816 * _2816;
                                float _2829 = (fma(_1944, _2709.z, fma(_1943, _2709.y, _2709.x * _1942)) + _2709.w) / _2770;
                                float _2830 = (fma(_1944, _2724.z, fma(_1943, _2724.y, _2724.x * _1942)) + _2724.w) / _2770;
                                float _2834 = 1.0 - dot(vec2(_2829, _2830), vec2(_2829, _2830));
                                float _3761 = isnan(0.0) ? _2834 : (isnan(_2834) ? 0.0 : max(_2834, 0.0));
                                float _2835 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
                                float _2836 = _2835 * (((isnan(0.0) ? _2822 : (isnan(_2822) ? 0.0 : max(_2822, 0.0))) * _2812) / ((_2825 * 0.699999988079071044921875) + 1.0));
                                float _2846 = dot(vec3(0.0), vec3((-0.0) - (_1942 * _2258), (-0.0) - (_1943 * _2258), (-0.0) - (_1944 * _2258)));
                                float _3772 = isnan(0.0) ? _2846 : (isnan(_2846) ? 0.0 : max(_2846, 0.0));
                                float _2854 = (_2820 * dot(vec3(0.0), vec3(_2805, _2806, _2807))) + _2819;
                                float _3783 = isnan(0.0) ? _2854 : (isnan(_2854) ? 0.0 : max(_2854, 0.0));
                                float _2855 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
                                float _2859 = (0.5 / (((isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0))) + 9.9999999392252902907785028219223e-09) + _2855)) * _2855;
                                float _3794 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
                                float _2866 = (_2835 * _2812) * (((isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0))) * 3.1415927410125732421875) / ((_2825 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_115_pred = _2836 * _2682.y;
                                frontier_phi_115_pred_1 = _2836 * _2682.x;
                                frontier_phi_115_pred_2 = _2866 * _2694.z;
                                frontier_phi_115_pred_3 = _2866 * _2694.y;
                                frontier_phi_115_pred_4 = _2866 * _2694.x;
                                frontier_phi_115_pred_5 = _2836 * _2682.z;
                            }
                            else
                            {
                                frontier_phi_115_pred = 0.0;
                                frontier_phi_115_pred_1 = 0.0;
                                frontier_phi_115_pred_2 = 0.0;
                                frontier_phi_115_pred_3 = 0.0;
                                frontier_phi_115_pred_4 = 0.0;
                                frontier_phi_115_pred_5 = 0.0;
                            }
                            _2874 = frontier_phi_115_pred;
                            _2873 = frontier_phi_115_pred_1;
                            _2872 = frontier_phi_115_pred_2;
                            _2871 = frontier_phi_115_pred_3;
                            _2870 = frontier_phi_115_pred_4;
                            _2875 = frontier_phi_115_pred_5;
                            _2624 = _2873 + _2637;
                            _2625 = _2874 + _2638;
                            _2626 = _2875 + _2639;
                            _2621 = _2870 + _2634;
                            _2622 = _2871 + _2635;
                            _2623 = _2872 + _2636;
                            if (_2641 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2634 = _2621;
                                _2635 = _2622;
                                _2636 = _2623;
                                _2637 = _2624;
                                _2638 = _2625;
                                _2639 = _2626;
                                _2640 = _2641;
                                continue;
                            }
                        }
                        frontier_phi_109_pred = _2622;
                        frontier_phi_109_pred_1 = _2621;
                        frontier_phi_109_pred_2 = _2626;
                        frontier_phi_109_pred_3 = _2625;
                        frontier_phi_109_pred_4 = _2624;
                        frontier_phi_109_pred_5 = _2623;
                    }
                    _2236 = frontier_phi_109_pred;
                    _2234 = frontier_phi_109_pred_1;
                    _2244 = frontier_phi_109_pred_2;
                    _2242 = frontier_phi_109_pred_3;
                    _2240 = frontier_phi_109_pred_4;
                    _2238 = frontier_phi_109_pred_5;
                    uint _2448 = _2447 + 1u;
                    if (_2448 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2441 = _2234;
                        _2442 = _2236;
                        _2443 = _2238;
                        _2444 = _2240;
                        _2445 = _2242;
                        _2446 = _2244;
                        _2447 = _2448;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_84_85_ladder = _2234;
                frontier_phi_84_85_ladder_1 = _2238;
                frontier_phi_84_85_ladder_2 = _2244;
                frontier_phi_84_85_ladder_3 = _2242;
                frontier_phi_84_85_ladder_4 = _2240;
                frontier_phi_84_85_ladder_5 = _2236;
            }
            else
            {
                frontier_phi_84_85_ladder = _2079;
                frontier_phi_84_85_ladder_1 = _2083;
                frontier_phi_84_85_ladder_2 = _2089;
                frontier_phi_84_85_ladder_3 = _2087;
                frontier_phi_84_85_ladder_4 = _2085;
                frontier_phi_84_85_ladder_5 = _2081;
            }
            _2233 = frontier_phi_84_85_ladder;
            _2235 = frontier_phi_84_85_ladder_5;
            _2237 = frontier_phi_84_85_ladder_1;
            _2239 = frontier_phi_84_85_ladder_4;
            _2241 = frontier_phi_84_85_ladder_3;
            _2243 = frontier_phi_84_85_ladder_2;
        }
        float _2248 = isnan(1.0) ? _760 : (isnan(_760) ? 1.0 : min(_760, 1.0));
        _2001 = (_2248 * _2239) + _1781;
        _2003 = (_2248 * _2241) + _1782;
        _2005 = (_2248 * _2243) + _1783;
        _2007 = ((_2233 * 0.039999999105930328369140625) * _2248) + _1883;
        _2009 = ((_2235 * 0.039999999105930328369140625) * _2248) + _1884;
        _2011 = ((_2237 * 0.039999999105930328369140625) * _2248) + _1885;
    }
    else
    {
        _2001 = _1781;
        _2003 = _1782;
        _2005 = _1783;
        _2007 = _1883;
        _2009 = _1884;
        _2011 = _1885;
    }
    float _3810 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _3821 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _3832 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _2028 = ((isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0))) * (_2001 + ((isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0))) * _760))) + ((_2007 + ((isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0))) * _1494)) * cbPerFrame._m0[3u].x);
    float _2029 = ((isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) * (_2003 + ((isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0))) * _760))) + ((_2009 + ((isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0))) * _1494)) * cbPerFrame._m0[3u].x);
    float _2030 = ((isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))) * (_2005 + ((isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0))) * _760))) + ((_2011 + ((isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0))) * _1494)) * cbPerFrame._m0[3u].x);
    float _2031 = isnan(0.0) ? _2028 : (isnan(_2028) ? 0.0 : max(_2028, 0.0));
    float _2032 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
    float _2033 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
    uint _2034 = _734 + 6u;
    float _2042 = _720 / cbSceneParam._m0[86u].x;
    float _2043 = _721 / cbSceneParam._m0[86u].y;
    vec4 _2057 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2042, _2043, (log2((isnan(cbSceneParam._m0[77u].w) ? _694 : (isnan(_694) ? cbSceneParam._m0[77u].w : min(_694, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2059 = _2057.x;
    float _2060 = _2057.y;
    float _2061 = _2057.z;
    float _2062 = _2057.w;
    float _2142;
    float _2144;
    float _2146;
    float _2148;
    if (_694 > cbSceneParam._m0[78u].w)
    {
        float _2104 = isnan(_694) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _694 : min(cbSceneParam._m0[80u].w, _694));
        float _2105 = _2104 / _694;
        float _2116 = _2105 * _267;
        float _2117 = _268 * _2105;
        float _2118 = (-0.0) - _2117;
        float _2119 = _2105 * _269;
        float _2121 = (cbSceneParam._m0[77u].w * _2118) / _2104;
        float _2122 = _2121 + cbSceneParam._m0[79u].w;
        float _2123 = cbSceneParam._m0[79u].w - _2117;
        float _2129 = sqrt(((_2116 * _2116) + (_2117 * _2117)) + (_2119 * _2119));
        float _2132 = (1.0 - (cbSceneParam._m0[77u].w / _2104)) * _2129;
        float _2138 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2140 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2372;
        if (abs((_2118 - _2121) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2372 = ((((_2122 > 0.0) ? exp2(_2138 * _2122) : (2.0 - exp2(_2140 * _2122))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2132;
        }
        else
        {
            float _2291 = 1.0 / cbSceneParam._m0[80u].x;
            float _2292 = isnan(_2123) ? _2122 : (isnan(_2122) ? _2123 : max(_2122, _2123));
            float _2293 = isnan(_2123) ? _2122 : (isnan(_2122) ? _2123 : min(_2122, _2123));
            float _2302 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : min(_2292, 0.0));
            float _2303 = isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : min(_2293, 0.0));
            _2372 = ((abs(_2129 / _2118) * cbSceneParam._m0[80u].y) * ((((_2302 - _2303) * 2.0) - ((exp2(_2138 * (isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0)))) - exp2(_2138 * (isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0))))) * _2291)) - ((exp2(_2140 * _2302) - exp2(_2140 * _2303)) * _2291))) + (_2132 * cbSceneParam._m0[80u].z);
        }
        vec4 _2374 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2042, _2043, 1.0), 0.0);
        float _2383 = exp2((_2372 * (-1.44269502162933349609375)) * (1.0 - _2374.w));
        float _2384 = log2(_2383);
        float _2400 = log2(_2062);
        _2142 = (exp2(_2400 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2384 * cbSceneParam._m0[78u].x)) * _2374.x) / cbSceneParam._m0[78u].x)) + _2059;
        _2144 = (exp2(_2400 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2384 * cbSceneParam._m0[78u].y)) * _2374.y) / cbSceneParam._m0[78u].y)) + _2060;
        _2146 = (exp2(_2400 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2384 * cbSceneParam._m0[78u].z)) * _2374.z) / cbSceneParam._m0[78u].z)) + _2061;
        _2148 = _2383 * _2062;
    }
    else
    {
        _2142 = _2059;
        _2144 = _2060;
        _2146 = _2061;
        _2148 = _2062;
    }
    bool _2410;
    vec4 _2158;
    vec4 _2181;
    float _2183;
    float _2187;
    float _2188;
    float _2189;
    float _2190;
    bool _2201;
    for (;;)
    {
        _2158 = cbMatDynParam._m0[0u];
        float _2160 = roundEven(_2158.y);
        bool _2161 = _2160 == 3.0;
        float _2163 = log2(_2148);
        float _2170 = exp2(_2163 * cbSceneParam._m0[78u].x) * _2031;
        float _2171 = exp2(_2163 * cbSceneParam._m0[78u].y) * _2032;
        float _2172 = exp2(_2163 * cbSceneParam._m0[78u].z) * _2033;
        float _2179 = _708 + (-0.5);
        _2181 = cbMtdParam._m0[1u];
        _2183 = _2181.y * _2179;
        float _2186 = (_2160 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2187 = _2186 * (_2161 ? _2170 : (_2170 + (cbSceneParam._m0[72u].w * _2142)));
        _2188 = _2186 * (_2161 ? _2171 : (_2171 + (cbSceneParam._m0[72u].w * _2144)));
        _2189 = _2186 * (_2161 ? _2172 : (_2172 + (cbSceneParam._m0[72u].w * _2146)));
        _2190 = _2179 * 0.999000012874603271484375;
        _2201 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2201)
        {
            if ((cbInstanceData._m0[_734 + 7u].x + _2190) < 0.5)
            {
                _2410 = true;
                break;
            }
        }
        uint _2326 = _736 + uint(_2158.w);
        if ((cbInstanceData._m0[_2326].w < 1.0) && ((cbInstanceData._m0[_2326].w + _2190) < 0.5))
        {
            _2410 = true;
            break;
        }
        if ((_2183 + 1.0) < _2181.x)
        {
            _2410 = true;
            break;
        }
        _2410 = false;
        break;
    }
    float _2591;
    if (_2410)
    {
        discard_state = true;
        _2591 = 0.0;
    }
    else
    {
        _2591 = cbInstanceData._m0[_2034].w;
    }
    SV_Target.x = _2187;
    SV_Target.y = _2188;
    SV_Target.z = _2189;
    SV_Target.w = _2591;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2034].w;
    discard_exit();
}


