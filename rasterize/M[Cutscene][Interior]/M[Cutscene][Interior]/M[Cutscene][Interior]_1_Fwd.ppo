#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _619;
uint _1764;
uint _1765;
uint _1766;
uint _2000;
uint _2001;
uint _2002;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _176 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _177 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _178 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _183 = inversesqrt(dot(vec3(_176, _177, _178), vec3(_176, _177, _178)));
    float _190 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _194 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _242 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _252 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _242);
    float _253 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _242);
    float _254 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _242);
    vec4 _273 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _308 = cbMtdParam._m0[24u].x + _252;
    float _309 = cbMtdParam._m0[24u].y + _253;
    float _310 = cbMtdParam._m0[24u].z + _254;
    float _327 = (-0.0) - dot(vec3(_308, _309, _310), vec3(_183 * _176, _183 * _177, _183 * _178));
    float _328 = (-0.0) - dot(vec3(_308, _309, _310), vec3(_194 * TANGENT.x, _194 * TANGENT.y, _194 * TANGENT.z));
    float _329 = (-0.0) - dot(vec3(_308, _309, _310), vec3((-0.0) - (NORMAL.x * _190), (-0.0) - (NORMAL.y * _190), (-0.0) - (NORMAL.z * _190)));
    float _333 = inversesqrt(dot(vec3(_327, _328, _329), vec3(_327, _328, _329)));
    float _336 = _333 * _329;
    float _339 = ((_333 * _327) + (((_273.x * 2.0) + (-1.0)) * cbMtdParam._m0[22u].x)) * cbMtdParam._m0[20u].w;
    float _340 = ((_333 * _328) + (((_273.y * 2.0) + (-1.0)) * cbMtdParam._m0[22u].y)) * cbMtdParam._m0[20u].z;
    float _341 = fract(TEXCOORD.x);
    float _342 = fract(TEXCOORD.y);
    float _348;
    if (_339 > 0.0)
    {
        _348 = (1.0 - _341) / _339;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_339 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _341) / _339;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _348 = frontier_phi_3_2_ladder;
    }
    float _356;
    if (_340 > 0.0)
    {
        _356 = (1.0 - _342) / _340;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_340 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _342) / _340;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _356 = frontier_phi_7_6_ladder;
    }
    float _360 = (_336 > 0.0) ? (cbMtdParam._m0[16u].x / _336) : 5000.0;
    float _361 = isnan(_356) ? _348 : (isnan(_348) ? _356 : min(_348, _356));
    float _362 = isnan(_360) ? _361 : (isnan(_361) ? _360 : min(_361, _360));
    float _366 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _373 = ((_362 * _336) + _366) / _366;
    vec4 _398 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * ((((((_341 + (-0.5)) + (_362 * _339)) / _373) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * ((((((_342 + (-0.5)) + (_362 * _340)) / _373) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    float _426 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _430 = inversesqrt(dot(vec3(_252, _253, _254), vec3(_252, _253, _254)));
    float _431 = _252 * _430;
    float _432 = _253 * _430;
    float _433 = _254 * _430;
    float _439 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _440 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _449 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_439 * cbSceneParam._m0[86u].x, _440 * cbSceneParam._m0[86u].y));
    float _452 = _449.x * TEXCOORD_4.z;
    float _453 = (-0.0) - _431;
    float _454 = (-0.0) - _432;
    float _455 = (-0.0) - _433;
    float _477 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _481 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _485 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _618;
    float _620;
    float _621;
    float _622;
    float _623;
    float _624;
    float _625;
    float _626;
    float _627;
    float _628;
    float _629;
    float _630;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _541 = (cbModelParam._m0[37u].x * ((((fma(_485, cbModelParam._m0[26u].z, fma(_481, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _477)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _543 = (cbModelParam._m0[37u].y * ((((fma(_485, cbModelParam._m0[27u].z, fma(_481, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _477)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _544 = (((((fma(_485, cbModelParam._m0[28u].z, fma(_481, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _477)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _547 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_541, _543, _544), 0.0);
        vec4 _554 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_541, _543, _544), 0.0);
        vec4 _561 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_541, _543, _544), 0.0);
        vec4 _568 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_541, _543, _544), 0.0);
        float _581 = exp2((_547.w + (-0.5)) * 20.0) * 2.0;
        float _591 = exp2((_554.w + (-0.5)) * 20.0) * 2.0;
        float _601 = exp2((_561.w + (-0.5)) * 20.0) * 2.0;
        float _611 = exp2((_568.w + (-0.5)) * 20.0) * 2.0;
        float _612 = _611 * (_568.x + (-0.5));
        float _613 = _611 * (_568.y + (-0.5));
        float _614 = _611 * (_568.z + (-0.5));
        _618 = _581 * (_547.z + (-0.5));
        _620 = _581 * (_547.y + (-0.5));
        _621 = _581 * (_547.x + (-0.5));
        _622 = _591 * (_554.z + (-0.5));
        _623 = _591 * (_554.y + (-0.5));
        _624 = _591 * (_554.x + (-0.5));
        _625 = _601 * (_561.z + (-0.5));
        _626 = _601 * (_561.y + (-0.5));
        _627 = _601 * (_561.x + (-0.5));
        _628 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
        _629 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
        _630 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    }
    else
    {
        _618 = _619;
        _620 = _619;
        _621 = _619;
        _622 = _619;
        _623 = _619;
        _624 = _619;
        _625 = _619;
        _626 = _619;
        _627 = _619;
        _628 = _619;
        _629 = _619;
        _630 = _619;
    }
    float _758;
    float _759;
    float _760;
    float _761;
    float _762;
    float _763;
    float _764;
    float _765;
    float _766;
    float _767;
    float _768;
    float _769;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _684 = (cbModelParam._m0[38u].x * ((((fma(_485, cbModelParam._m0[30u].z, fma(_481, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _477)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _685 = (cbModelParam._m0[38u].y * ((((fma(_485, cbModelParam._m0[31u].z, fma(_481, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _477)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _686 = (((((fma(_485, cbModelParam._m0[32u].z, fma(_481, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _477)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _688 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_684, _685, _686), 0.0);
        vec4 _695 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_684, _685, _686), 0.0);
        vec4 _702 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_684, _685, _686), 0.0);
        vec4 _709 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_684, _685, _686), 0.0);
        float _721 = exp2((_688.w + (-0.5)) * 20.0) * 2.0;
        float _731 = exp2((_695.w + (-0.5)) * 20.0) * 2.0;
        float _741 = exp2((_702.w + (-0.5)) * 20.0) * 2.0;
        float _751 = exp2((_709.w + (-0.5)) * 20.0) * 2.0;
        float _752 = _751 * (_709.x + (-0.5));
        float _753 = _751 * (_709.y + (-0.5));
        float _754 = _751 * (_709.z + (-0.5));
        _758 = _721 * (_688.z + (-0.5));
        _759 = _721 * (_688.y + (-0.5));
        _760 = _721 * (_688.x + (-0.5));
        _761 = _731 * (_695.z + (-0.5));
        _762 = _731 * (_695.y + (-0.5));
        _763 = _731 * (_695.x + (-0.5));
        _764 = _741 * (_702.z + (-0.5));
        _765 = _741 * (_702.y + (-0.5));
        _766 = _741 * (_702.x + (-0.5));
        _767 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
        _768 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
        _769 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    }
    else
    {
        _758 = _619;
        _759 = _619;
        _760 = _619;
        _761 = _619;
        _762 = _619;
        _763 = _619;
        _764 = _619;
        _765 = _619;
        _766 = _619;
        _767 = _619;
        _768 = _619;
        _769 = _619;
    }
    float _784 = _431 * (-0.5);
    float _785 = _432 * (-0.5);
    float _786 = _433 * (-0.5);
    float _787 = dot(vec4(_784, _785, _786, 1.0), vec4(_760, _763, _766, _769));
    float _790 = dot(vec4(_784, _785, _786, 1.0), vec4(_759, _762, _765, _768));
    float _793 = dot(vec4(_784, _785, _786, 1.0), vec4(_758, _761, _764, _767));
    float _828;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _800 = dot(vec4(_784, _785, _786, 1.0), vec4(_618, _622, _625, _628));
        float _804 = dot(vec4(_784, _785, _786, 1.0), vec4(_620, _623, _626, _629));
        float _808 = dot(vec4(_784, _785, _786, 1.0), vec4(_621, _624, _627, _630));
        float _815 = dot(vec4(cbModelParam._m0[39u]), vec4(_784, _785, _786, 1.0));
        _828 = dot(vec3(isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0)), isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0)), isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_815) ? 0.0 : (isnan(0.0) ? _815 : max(0.0, _815))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _828 = 1.0;
    }
    float _839;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _830 = dot(vec4(cbModelParam._m0[40u]), vec4(_784, _785, _786, 1.0));
        _839 = dot(vec3(isnan(0.0) ? _787 : (isnan(_787) ? 0.0 : max(_787, 0.0)), isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0)), isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_830) ? 0.0 : (isnan(0.0) ? _830 : max(0.0, _830))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _839 = 1.0;
    }
    float _843 = (_839 * cbModelParam._m0[1u].x) + (_828 * (1.0 - cbModelParam._m0[1u].x));
    float _849 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _933;
    float _935;
    float _937;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _900 = fma(_485, cbModelParam._m0[13u].z, fma(_481, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _477)) + cbModelParam._m0[13u].w;
        float _904 = fma(_485, cbModelParam._m0[14u].z, fma(_481, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _477)) + cbModelParam._m0[14u].w;
        float _908 = fma(_485, cbModelParam._m0[15u].z, fma(_481, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _477)) + cbModelParam._m0[15u].w;
        float _911 = fma(_455, cbModelParam._m0[13u].z, fma(_454, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _453));
        float _914 = fma(_455, cbModelParam._m0[14u].z, fma(_454, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _453));
        float _917 = fma(_455, cbModelParam._m0[15u].z, fma(_454, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _453));
        float _943;
        if (_911 > 0.0)
        {
            _943 = abs((1.0 - _900) / _911);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_911 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_900 + 1.0) / _911);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _943 = frontier_phi_22_20_ladder;
        }
        float _1221;
        if (_914 > 0.0)
        {
            _1221 = abs((1.0 - _904) / _914);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_914 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_904 + 1.0) / _914);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1221 = frontier_phi_31_27_ladder;
        }
        float _1517;
        if (_917 > 0.0)
        {
            _1517 = abs((1.0 - _908) / _917);
        }
        else
        {
            float frontier_phi_45_38_ladder;
            if (_917 < 0.0)
            {
                frontier_phi_45_38_ladder = abs((_908 + 1.0) / _917);
            }
            else
            {
                frontier_phi_45_38_ladder = 5000.0;
            }
            _1517 = frontier_phi_45_38_ladder;
        }
        float _1519 = isnan(_1221) ? _943 : (isnan(_943) ? _1221 : min(_943, _1221));
        float _1520 = isnan(_1517) ? _1519 : (isnan(_1519) ? _1517 : min(_1519, _1517));
        float _1524 = (_1520 * _911) + _900;
        float _1525 = (_1520 * _914) + _904;
        float _1526 = (_1520 * _917) + _908;
        float _1527 = _1520 * 9.9999997473787516355514526367188e-05;
        float _1528 = (-1.0) - _1527;
        float _1530 = _1527 + 1.0;
        float frontier_phi_21_45_ladder;
        float frontier_phi_21_45_ladder_1;
        float frontier_phi_21_45_ladder_2;
        if ((_1526 > _1530) || ((_1526 < _1528) || ((_1525 > _1530) || ((_1525 < _1528) || ((_1524 < _1528) || (_1524 > _1530))))))
        {
            frontier_phi_21_45_ladder = 0.0;
            frontier_phi_21_45_ladder_1 = 0.0;
            frontier_phi_21_45_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1637 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1526, cbModelParam._m0[9u].z, fma(_1525, cbModelParam._m0[9u].y, _1524 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1526, cbModelParam._m0[10u].z, fma(_1525, cbModelParam._m0[10u].y, _1524 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1526, cbModelParam._m0[11u].z, fma(_1525, cbModelParam._m0[11u].y, _1524 * cbModelParam._m0[11u].x))), _849);
            frontier_phi_21_45_ladder = _1637.z * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_1 = _1637.y * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_2 = _1637.x * cbModelParam._m0[1u].y;
        }
        _933 = frontier_phi_21_45_ladder_2;
        _935 = frontier_phi_21_45_ladder_1;
        _937 = frontier_phi_21_45_ladder;
    }
    else
    {
        vec4 _921 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_453, _454, _455), _849);
        _933 = _921.x * cbModelParam._m0[1u].y;
        _935 = _921.y * cbModelParam._m0[1u].y;
        _937 = _921.z * cbModelParam._m0[1u].y;
    }
    float _940 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1030;
    float _1032;
    float _1034;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _994 = fma(_485, cbModelParam._m0[21u].z, fma(_481, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _477)) + cbModelParam._m0[21u].w;
        float _998 = fma(_485, cbModelParam._m0[22u].z, fma(_481, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _477)) + cbModelParam._m0[22u].w;
        float _1002 = fma(_485, cbModelParam._m0[23u].z, fma(_481, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _477)) + cbModelParam._m0[23u].w;
        float _1005 = fma(_455, cbModelParam._m0[21u].z, fma(_454, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _453));
        float _1008 = fma(_455, cbModelParam._m0[22u].z, fma(_454, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _453));
        float _1011 = fma(_455, cbModelParam._m0[23u].z, fma(_454, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _453));
        float _1226;
        if (_1005 > 0.0)
        {
            _1226 = abs((1.0 - _994) / _1005);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1005 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_994 + 1.0) / _1005);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1226 = frontier_phi_33_29_ladder;
        }
        float _1543;
        if (_1008 > 0.0)
        {
            _1543 = abs((1.0 - _998) / _1008);
        }
        else
        {
            float frontier_phi_47_40_ladder;
            if (_1008 < 0.0)
            {
                frontier_phi_47_40_ladder = abs((_998 + 1.0) / _1008);
            }
            else
            {
                frontier_phi_47_40_ladder = 5000.0;
            }
            _1543 = frontier_phi_47_40_ladder;
        }
        float _1694;
        if (_1011 > 0.0)
        {
            _1694 = abs((1.0 - _1002) / _1011);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1011 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1002 + 1.0) / _1011);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _1694 = frontier_phi_61_56_ladder;
        }
        float _1696 = isnan(_1543) ? _1226 : (isnan(_1226) ? _1543 : min(_1226, _1543));
        float _1697 = isnan(_1694) ? _1696 : (isnan(_1696) ? _1694 : min(_1696, _1694));
        float _1701 = (_1697 * _1005) + _994;
        float _1702 = (_1697 * _1008) + _998;
        float _1703 = (_1697 * _1011) + _1002;
        float _1704 = _1697 * 9.9999997473787516355514526367188e-05;
        float _1705 = (-1.0) - _1704;
        float _1707 = _1704 + 1.0;
        float frontier_phi_30_61_ladder;
        float frontier_phi_30_61_ladder_1;
        float frontier_phi_30_61_ladder_2;
        if ((_1703 > _1707) || ((_1703 < _1705) || ((_1702 > _1707) || ((_1702 < _1705) || ((_1701 < _1705) || (_1701 > _1707))))))
        {
            frontier_phi_30_61_ladder = 0.0;
            frontier_phi_30_61_ladder_1 = 0.0;
            frontier_phi_30_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1863 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1703, cbModelParam._m0[17u].z, fma(_1702, cbModelParam._m0[17u].y, _1701 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1703, cbModelParam._m0[18u].z, fma(_1702, cbModelParam._m0[18u].y, _1701 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1703, cbModelParam._m0[19u].z, fma(_1702, cbModelParam._m0[19u].y, _1701 * cbModelParam._m0[19u].x))), _940);
            frontier_phi_30_61_ladder = _1863.y * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_1 = _1863.z * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_2 = _1863.x * cbModelParam._m0[1u].z;
        }
        _1030 = frontier_phi_30_61_ladder_2;
        _1032 = frontier_phi_30_61_ladder;
        _1034 = frontier_phi_30_61_ladder_1;
    }
    else
    {
        vec4 _1014 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_453, _454, _455), _940);
        _1030 = _1014.x * cbModelParam._m0[1u].z;
        _1032 = _1014.y * cbModelParam._m0[1u].z;
        _1034 = _1014.z * cbModelParam._m0[1u].z;
    }
    float _1046 = _452 * 0.01200000010430812835693359375;
    float _1048 = _1046 * ((cbModelParam._m0[1u].w * (_1030 - _933)) + _933);
    float _1049 = _1046 * ((cbModelParam._m0[1u].w * (_1032 - _935)) + _935);
    float _1050 = _1046 * ((cbModelParam._m0[1u].w * (_1034 - _937)) + _937);
    float _1071 = fma(_1050, cbSceneParam._m0[89u].z, fma(_1049, cbSceneParam._m0[89u].y, _1048 * cbSceneParam._m0[89u].x));
    float _1074 = fma(_1050, cbSceneParam._m0[90u].z, fma(_1049, cbSceneParam._m0[90u].y, _1048 * cbSceneParam._m0[90u].x));
    float _1077 = fma(_1050, cbSceneParam._m0[91u].z, fma(_1049, cbSceneParam._m0[91u].y, _1048 * cbSceneParam._m0[91u].x));
    uint _1084 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1088 = floatBitsToUint(cbInstanceData._m0[_1084 + 5u]);
    uint _1090 = _1088.x * 14u;
    uint _1091 = _1090 + 13u;
    float _1096 = _452 + (-1.0);
    float _1099 = (cbLight._m0[_1091].x * _1096) + 1.0;
    float _1100 = (cbLight._m0[_1091].y * _1096) + 1.0;
    uint _1101 = _1090 + 8u;
    float _1112 = cbLight._m0[_1090].x + _431;
    float _1113 = cbLight._m0[_1090].y + _432;
    float _1114 = cbLight._m0[_1090].z + _433;
    float _1118 = inversesqrt(dot(vec3(_1112, _1113, _1114), vec3(_1112, _1113, _1114)));
    float _1122 = dot(vec3(0.0), vec3(cbLight._m0[_1090].xyz));
    float _2337 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
    float _1125 = isnan(1.0) ? _2337 : (isnan(_2337) ? 1.0 : min(_2337, 1.0));
    float _1126 = dot(vec3(0.0), vec3(_431, _432, _433));
    float _2348 = isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0));
    float _1129 = isnan(1.0) ? _2348 : (isnan(_2348) ? 1.0 : min(_2348, 1.0));
    float _1130 = dot(vec3(cbLight._m0[_1090].xyz), vec3(_1112 * _1118, _1113 * _1118, _1114 * _1118));
    float _2359 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
    float _1141 = (exp2(log2(1.0 - (isnan(1.0) ? _2359 : (isnan(_2359) ? 1.0 : min(_2359, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1147 = (0.5 / ((_1125 + 9.9999999392252902907785028219223e-09) + _1129)) * _1125;
    float _2370 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
    float _1149 = (isnan(1.0) ? _2370 : (isnan(_2370) ? 1.0 : min(_2370, 1.0))) * 0.31831014156341552734375;
    float _1151 = isnan(1.0) ? _1099 : (isnan(_1099) ? 1.0 : min(_1099, 1.0));
    uint _1161 = _1090 + 9u;
    uint _1167 = _1090 | 1u;
    float _1173 = cbLight._m0[_1167].x + _431;
    float _1174 = cbLight._m0[_1167].y + _432;
    float _1175 = cbLight._m0[_1167].z + _433;
    float _1179 = inversesqrt(dot(vec3(_1173, _1174, _1175), vec3(_1173, _1174, _1175)));
    float _1183 = dot(vec3(0.0), vec3(cbLight._m0[_1167].xyz));
    float _2386 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
    float _1186 = isnan(1.0) ? _2386 : (isnan(_2386) ? 1.0 : min(_2386, 1.0));
    float _1187 = dot(vec3(cbLight._m0[_1167].xyz), vec3(_1173 * _1179, _1174 * _1179, _1175 * _1179));
    float _2397 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
    float _1196 = (exp2(log2(1.0 - (isnan(1.0) ? _2397 : (isnan(_2397) ? 1.0 : min(_2397, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1200 = (0.5 / ((_1186 + 9.9999999392252902907785028219223e-09) + _1129)) * _1186;
    float _2408 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
    float _1202 = (isnan(1.0) ? _2408 : (isnan(_2408) ? 1.0 : min(_2408, 1.0))) * 0.31831014156341552734375;
    float _1203 = isnan(1.0) ? _1100 : (isnan(_1100) ? 1.0 : min(_1100, 1.0));
    float _1213 = (((_1196 * cbLight._m0[_1161].x) * _1202) * _1203) + (((_1141 * cbLight._m0[_1101].x) * _1149) * _1151);
    float _1214 = (((_1196 * cbLight._m0[_1161].y) * _1202) * _1203) + (((_1141 * cbLight._m0[_1101].y) * _1149) * _1151);
    float _1215 = (((_1196 * cbLight._m0[_1161].z) * _1202) * _1203) + (((_1141 * cbLight._m0[_1101].z) * _1149) * _1151);
    float _1332;
    float _1334;
    float _1336;
    if (_1088.y == 0u)
    {
        float _1271 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1272 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1271;
        float _1273 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1271;
        float _1274 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1271;
        uvec4 _1286 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1287 = _1286.x;
        uint _1298 = uint((float(_1286.y) * floor(float(uint(cbSceneParam._m0[85u].y * _440) / _1287))) + floor(float(uint(cbSceneParam._m0[85u].x * _439) / _1287)));
        float _1308 = (log2(_1274 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1309 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
        uint _1312 = uint(isnan(14.0) ? _1309 : (isnan(_1309) ? 14.0 : min(_1309, 14.0)));
        uvec4 _1317 = texelFetch(g_lightClusterGridBuffer, int(((_1312 << 2u) + (_1298 << 6u)) >> 2u));
        uint _1318 = _1317.x;
        uint _1319 = _1286.z;
        float _1409;
        float _1411;
        float _1413;
        if (((((1u << ((_1319 >> 4u) & 15u)) + 4294967295u) & _1318) == 0u) || ((_1319 & 240u) == 0u))
        {
            _1409 = 0.0;
            _1411 = 0.0;
            _1413 = 0.0;
        }
        else
        {
            float _1410;
            float _1412;
            float _1414;
            float _1568 = 0.0;
            float _1569 = 0.0;
            float _1570 = 0.0;
            uint _1571 = 0u;
            uint _1580;
            bool _1581;
            for (;;)
            {
                _1580 = texelFetch(g_lightClassification, int((((_1312 << 5u) + (_1298 << 9u)) + (_1571 << 2u)) >> 2u)).x;
                _1581 = _1580 == 0u;
                float frontier_phi_58_pred;
                float frontier_phi_58_pred_1;
                float frontier_phi_58_pred_2;
                if (_1581)
                {
                    frontier_phi_58_pred = _1570;
                    frontier_phi_58_pred_1 = _1569;
                    frontier_phi_58_pred_2 = _1568;
                }
                else
                {
                    float _1734;
                    float _1735;
                    float _1736;
                    uint _1737;
                    _1734 = _1568;
                    _1735 = _1569;
                    _1736 = _1570;
                    _1737 = _1580;
                    float _1646;
                    float _1647;
                    float _1648;
                    for (;;)
                    {
                        uint _1741 = uint(findLSB(_1737)) + (_1571 << 5u);
                        uint _1738 = (_1737 + 4294967295u) & _1737;
                        uint _1743 = _1741 * 48u;
                        vec4 _1757 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1743)).x, texelFetch(g_PointLightRenderingBuffer, int(_1743 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1743 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1743 + 3u)).x));
                        uint _1774 = (_1741 * 48u) + 8u;
                        vec3 _1785 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_1774)).x, texelFetch(g_PointLightRenderingBuffer, int(_1774 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1774 + 2u)).x));
                        float _1789 = _1757.x - _1272;
                        float _1790 = _1757.y - _1273;
                        float _1791 = _1757.z - _1274;
                        float _1792 = dot(vec3(_1789, _1790, _1791), vec3(_1789, _1790, _1791));
                        float _1795 = inversesqrt(_1792);
                        float _1804 = 1.0 - (_1792 * _1757.w);
                        float _2434 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
                        float _1806 = sqrt(_1792) * uintBitsToFloat(uvec4(_1764, _1765, _1766, texelFetch(g_PointLightRenderingBuffer, int(((_1741 * 48u) + 4u) + 3u)).x)).w;
                        float _1809 = 1.39999997615814208984375 / (_1806 + 1.39999997615814208984375);
                        float _1810 = _1809 * _1809;
                        float _1813 = ((1.0 - _1810) * dot(vec3(0.0), vec3(_1795 * _1789, _1795 * _1790, _1795 * _1791))) + _1810;
                        float _1815 = (-0.0) - _1272;
                        float _1816 = (-0.0) - _1273;
                        float _1817 = (-0.0) - _1274;
                        float _1821 = inversesqrt(dot(vec3(_1815, _1816, _1817), vec3(_1815, _1816, _1817)));
                        float _1825 = dot(vec3(0.0), vec3(_1821 * _1815, _1821 * _1816, _1821 * _1817));
                        float _2445 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
                        float _2456 = isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0));
                        float _1829 = isnan(1.0) ? _2456 : (isnan(_2456) ? 1.0 : min(_2456, 1.0));
                        float _1833 = (0.5 / (((isnan(1.0) ? _2445 : (isnan(_2445) ? 1.0 : min(_2445, 1.0))) + 9.9999999392252902907785028219223e-09) + _1829)) * _1829;
                        float _2467 = isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0));
                        float _1842 = (((isnan(1.0) ? _2467 : (isnan(_2467) ? 1.0 : min(_2467, 1.0))) * 3.1415927410125732421875) / (((_1806 * _1806) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2434 : (isnan(_2434) ? 1.0 : min(_2434, 1.0)));
                        _1646 = (_1842 * _1785.x) + _1734;
                        _1647 = (_1842 * _1785.y) + _1735;
                        _1648 = (_1842 * _1785.z) + _1736;
                        if (_1738 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _1734 = _1646;
                            _1735 = _1647;
                            _1736 = _1648;
                            _1737 = _1738;
                        }
                    }
                    frontier_phi_58_pred = _1648;
                    frontier_phi_58_pred_1 = _1647;
                    frontier_phi_58_pred_2 = _1646;
                }
                _1414 = frontier_phi_58_pred;
                _1412 = frontier_phi_58_pred_1;
                _1410 = frontier_phi_58_pred_2;
                uint _1572 = _1571 + 1u;
                if (_1572 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1568 = _1410;
                    _1569 = _1412;
                    _1570 = _1414;
                    _1571 = _1572;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1409 = _1410;
            _1411 = _1412;
            _1413 = _1414;
        }
        uvec4 _1417 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1418 = _1417.z;
        uint _1420 = (_1418 >> 8u) & 15u;
        float _1548;
        float _1550;
        float _1552;
        if (((4294967295u << _1420) & _1318) == 0u)
        {
            _1548 = _1409;
            _1550 = _1411;
            _1552 = _1413;
        }
        else
        {
            float _1564 = inversesqrt(dot(vec3(_1272, _1273, _1274), vec3(_1272, _1273, _1274)));
            float frontier_phi_49_50_ladder;
            float frontier_phi_49_50_ladder_1;
            float frontier_phi_49_50_ladder_2;
            if (_1420 < ((_1418 >> 12u) & 15u))
            {
                float _1549;
                float _1551;
                float _1553;
                float _1720 = _1409;
                float _1721 = _1411;
                float _1722 = _1413;
                uint _1723 = _1420;
                uint _1732;
                bool _1733;
                for (;;)
                {
                    _1732 = texelFetch(g_lightClassification, int((((_1312 << 5u) + (_1298 << 9u)) + (_1723 << 2u)) >> 2u)).x;
                    _1733 = _1732 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    if (_1733)
                    {
                        frontier_phi_67_pred = _1722;
                        frontier_phi_67_pred_1 = _1721;
                        frontier_phi_67_pred_2 = _1720;
                    }
                    else
                    {
                        float _1868;
                        float _1869;
                        float _1870;
                        float _2089;
                        float _2090;
                        float _2091;
                        float _1878 = _1720;
                        float _1879 = _1721;
                        float _1880 = _1722;
                        uint _1881 = _1732;
                        uint _1882;
                        uint _1892;
                        vec4 _1907;
                        float _1908;
                        vec3 _1920;
                        vec4 _1935;
                        vec4 _1950;
                        float _1996;
                        bool _1997;
                        for (;;)
                        {
                            _1892 = ((_1723 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_1881));
                            _1882 = (_1881 + 4294967295u) & _1881;
                            uint _1894 = _1892 * 40u;
                            _1907 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1894)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1894 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1894 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1894 + 3u)).x));
                            _1908 = _1907.w;
                            uint _1910 = (_1892 * 40u) + 8u;
                            _1920 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_1910)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1910 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1910 + 2u)).x));
                            uint _1922 = (_1892 * 40u) + 16u;
                            _1935 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1922)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1922 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1922 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1922 + 3u)).x));
                            uint _1937 = (_1892 * 40u) + 20u;
                            _1950 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1937)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1937 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1937 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1937 + 3u)).x));
                            uint _1952 = (_1892 * 40u) + 24u;
                            vec4 _1965 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1952)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1952 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1952 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1952 + 3u)).x));
                            uint _1971 = (_1892 * 40u) + 28u;
                            vec4 _1984 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1971)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1971 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1971 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1971 + 3u)).x));
                            _1996 = fma(_1274, _1984.z, fma(_1273, _1984.y, _1984.x * _1272)) + _1984.w;
                            _1997 = !((fma(_1274, _1965.z, fma(_1273, _1965.y, _1965.x * _1272)) + _1965.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            if (_1997)
                            {
                                float _2031 = _1907.x - _1272;
                                float _2032 = _1907.y - _1273;
                                float _2033 = _1907.z - _1274;
                                float _2034 = dot(vec3(_2031, _2032, _2033), vec3(_2031, _2032, _2033));
                                float _2037 = inversesqrt(_2034);
                                float _2044 = 1.0 - (_2034 / (_1908 * _1908));
                                float _2478 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
                                float _2046 = sqrt(_2034) * uintBitsToFloat(uvec4(_2000, _2001, _2002, texelFetch(g_SpotLightRenderingBuffer, int(((_1892 * 40u) + 4u) + 3u)).x)).w;
                                float _2048 = 1.39999997615814208984375 / (_2046 + 1.39999997615814208984375);
                                float _2049 = _2048 * _2048;
                                float _2052 = (fma(_1274, _1935.z, fma(_1273, _1935.y, _1935.x * _1272)) + _1935.w) / _1996;
                                float _2053 = (fma(_1274, _1950.z, fma(_1273, _1950.y, _1950.x * _1272)) + _1950.w) / _1996;
                                float _2057 = 1.0 - dot(vec2(_2052, _2053), vec2(_2052, _2053));
                                float _2489 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
                                float _2065 = dot(vec3(0.0), vec3((-0.0) - (_1272 * _1564), (-0.0) - (_1273 * _1564), (-0.0) - (_1274 * _1564)));
                                float _2500 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
                                float _2073 = ((1.0 - _2049) * dot(vec3(0.0), vec3(_2037 * _2031, _2037 * _2032, _2037 * _2033))) + _2049;
                                float _2511 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
                                float _2074 = isnan(1.0) ? _2511 : (isnan(_2511) ? 1.0 : min(_2511, 1.0));
                                float _2078 = (0.5 / (((isnan(1.0) ? _2500 : (isnan(_2500) ? 1.0 : min(_2500, 1.0))) + 9.9999999392252902907785028219223e-09) + _2074)) * _2074;
                                float _2522 = isnan(0.0) ? _2078 : (isnan(_2078) ? 0.0 : max(_2078, 0.0));
                                float _2085 = ((isnan(1.0) ? _2489 : (isnan(_2489) ? 1.0 : min(_2489, 1.0))) * (isnan(1.0) ? _2478 : (isnan(_2478) ? 1.0 : min(_2478, 1.0)))) * (((isnan(1.0) ? _2522 : (isnan(_2522) ? 1.0 : min(_2522, 1.0))) * 3.1415927410125732421875) / (((_2046 * _2046) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_73_pred = _2085 * _1920.z;
                                frontier_phi_73_pred_1 = _2085 * _1920.y;
                                frontier_phi_73_pred_2 = _2085 * _1920.x;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                            }
                            _2091 = frontier_phi_73_pred;
                            _2090 = frontier_phi_73_pred_1;
                            _2089 = frontier_phi_73_pred_2;
                            _1868 = _2089 + _1878;
                            _1869 = _2090 + _1879;
                            _1870 = _2091 + _1880;
                            if (_1882 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _1878 = _1868;
                                _1879 = _1869;
                                _1880 = _1870;
                                _1881 = _1882;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _1870;
                        frontier_phi_67_pred_1 = _1869;
                        frontier_phi_67_pred_2 = _1868;
                    }
                    _1553 = frontier_phi_67_pred;
                    _1551 = frontier_phi_67_pred_1;
                    _1549 = frontier_phi_67_pred_2;
                    uint _1724 = _1723 + 1u;
                    if (_1724 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _1720 = _1549;
                        _1721 = _1551;
                        _1722 = _1553;
                        _1723 = _1724;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_49_50_ladder = _1551;
                frontier_phi_49_50_ladder_1 = _1553;
                frontier_phi_49_50_ladder_2 = _1549;
            }
            else
            {
                frontier_phi_49_50_ladder = _1411;
                frontier_phi_49_50_ladder_1 = _1413;
                frontier_phi_49_50_ladder_2 = _1409;
            }
            _1548 = frontier_phi_49_50_ladder_2;
            _1550 = frontier_phi_49_50_ladder;
            _1552 = frontier_phi_49_50_ladder_1;
        }
        float _1557 = isnan(1.0) ? _452 : (isnan(_452) ? 1.0 : min(_452, 1.0));
        _1332 = ((_1548 * 0.039999999105930328369140625) * _1557) + _1213;
        _1334 = ((_1550 * 0.039999999105930328369140625) * _1557) + _1214;
        _1336 = ((_1552 * 0.039999999105930328369140625) * _1557) + _1215;
    }
    else
    {
        _1332 = _1213;
        _1334 = _1214;
        _1336 = _1215;
    }
    uint _1343 = (_1084 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1358 = ((cbMtdParam._m0[9u].x * _398.x) * cbInstanceData._m0[_1343].x) + ((_1332 + ((isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0))) * _843)) * cbPerFrame._m0[3u].x);
    float _1359 = ((cbMtdParam._m0[9u].y * _398.y) * cbInstanceData._m0[_1343].y) + ((_1334 + ((isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0))) * _843)) * cbPerFrame._m0[3u].x);
    float _1360 = ((cbMtdParam._m0[9u].z * _398.z) * cbInstanceData._m0[_1343].z) + ((_1336 + ((isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0))) * _843)) * cbPerFrame._m0[3u].x);
    uint _1364 = _1084 + 6u;
    float _1372 = _439 / cbSceneParam._m0[86u].x;
    float _1373 = _440 / cbSceneParam._m0[86u].y;
    vec4 _1387 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1372, _1373, (log2((isnan(cbSceneParam._m0[77u].w) ? _426 : (isnan(_426) ? cbSceneParam._m0[77u].w : min(_426, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1389 = _1387.x;
    float _1390 = _1387.y;
    float _1391 = _1387.z;
    float _1392 = _1387.w;
    float _1466;
    float _1468;
    float _1470;
    float _1472;
    if (_426 > cbSceneParam._m0[78u].w)
    {
        float _1428 = isnan(_426) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _426 : min(cbSceneParam._m0[80u].w, _426));
        float _1429 = _1428 / _426;
        float _1440 = _1429 * _252;
        float _1441 = _253 * _1429;
        float _1442 = (-0.0) - _1441;
        float _1443 = _1429 * _254;
        float _1445 = (cbSceneParam._m0[77u].w * _1442) / _1428;
        float _1446 = _1445 + cbSceneParam._m0[79u].w;
        float _1447 = cbSceneParam._m0[79u].w - _1441;
        float _1453 = sqrt(((_1440 * _1440) + (_1441 * _1441)) + (_1443 * _1443));
        float _1456 = (1.0 - (cbSceneParam._m0[77u].w / _1428)) * _1453;
        float _1462 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1464 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1656;
        if (abs((_1442 - _1445) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1656 = ((((_1446 > 0.0) ? exp2(_1462 * _1446) : (2.0 - exp2(_1464 * _1446))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1456;
        }
        else
        {
            float _1594 = 1.0 / cbSceneParam._m0[80u].x;
            float _1595 = isnan(_1447) ? _1446 : (isnan(_1446) ? _1447 : max(_1446, _1447));
            float _1596 = isnan(_1447) ? _1446 : (isnan(_1446) ? _1447 : min(_1446, _1447));
            float _1605 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : min(_1595, 0.0));
            float _1606 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : min(_1596, 0.0));
            _1656 = ((abs(_1453 / _1442) * cbSceneParam._m0[80u].y) * ((((_1605 - _1606) * 2.0) - ((exp2(_1462 * (isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0)))) - exp2(_1462 * (isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0))))) * _1594)) - ((exp2(_1464 * _1605) - exp2(_1464 * _1606)) * _1594))) + (_1456 * cbSceneParam._m0[80u].z);
        }
        vec4 _1658 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1372, _1373, 1.0), 0.0);
        float _1667 = exp2((_1656 * (-1.44269502162933349609375)) * (1.0 - _1658.w));
        float _1668 = log2(_1667);
        float _1684 = log2(_1392);
        _1466 = (exp2(_1684 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1668 * cbSceneParam._m0[78u].x)) * _1658.x) / cbSceneParam._m0[78u].x)) + _1389;
        _1468 = (exp2(_1684 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1668 * cbSceneParam._m0[78u].y)) * _1658.y) / cbSceneParam._m0[78u].y)) + _1390;
        _1470 = (exp2(_1684 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1668 * cbSceneParam._m0[78u].z)) * _1658.z) / cbSceneParam._m0[78u].z)) + _1391;
        _1472 = _1667 * _1392;
    }
    else
    {
        _1466 = _1389;
        _1468 = _1390;
        _1470 = _1391;
        _1472 = _1392;
    }
    float _1484 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1485 = _1484 == 3.0;
    float _1487 = log2(_1472);
    float _1494 = exp2(_1487 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0)));
    float _1495 = exp2(_1487 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)));
    float _1496 = exp2(_1487 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0)));
    float _1505 = (_1484 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _1505 * (_1485 ? _1494 : (_1494 + (cbSceneParam._m0[72u].w * _1466)));
    SV_Target.y = _1505 * (_1485 ? _1495 : (_1495 + (cbSceneParam._m0[72u].w * _1468)));
    SV_Target.z = _1505 * (_1485 ? _1496 : (_1496 + (cbSceneParam._m0[72u].w * _1470)));
    SV_Target.w = cbInstanceData._m0[_1364].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1364].w;
}


