#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_12;
layout(set = 0, binding = 3) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _459;
float _3573;
float _3574;
float _3575;
float _3576;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _202 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _203 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _204 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _209 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _210 = _209 * _202;
    float _211 = _209 * _203;
    float _212 = _209 * _204;
    float _216 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _217 = _216 * NORMAL.x;
    float _218 = _216 * NORMAL.y;
    float _219 = _216 * NORMAL.z;
    float _223 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _224 = _223 * TANGENT.x;
    float _225 = _223 * TANGENT.y;
    float _226 = _223 * TANGENT.z;
    float _271 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _281 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _271);
    float _282 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _271);
    float _283 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _271);
    vec4 _296 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _299 = _296.x;
    vec4 _317 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _334 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _299) + cbMtdParam._m0[12u].x) * _317.x;
    float _336 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _299) + cbMtdParam._m0[12u].y) * _317.y;
    float _338 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _299) + cbMtdParam._m0[12u].z) * _317.z;
    vec4 _372 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _387 = inversesqrt(dot(vec3(_210, _211, _212), vec3(_210, _211, _212)));
    float _394 = inversesqrt(dot(vec3(_224, _225, _226), vec3(_224, _225, _226)));
    float _406 = cbMtdParam._m0[24u].w + _281;
    float _407 = cbMtdParam._m0[25u].x + _282;
    float _408 = cbMtdParam._m0[25u].y + _283;
    float _422 = (-0.0) - dot(vec3(_406, _407, _408), vec3(_387 * _210, _387 * _211, _387 * _212));
    float _423 = (-0.0) - dot(vec3(_406, _407, _408), vec3(_394 * _224, _394 * _225, _394 * _226));
    float _424 = (-0.0) - dot(vec3(_406, _407, _408), vec3((-0.0) - _217, (-0.0) - _218, (-0.0) - _219));
    float _428 = inversesqrt(dot(vec3(_422, _423, _424), vec3(_422, _423, _424)));
    float _429 = _428 * _424;
    float _434 = ((cbMtdParam._m0[21u].z * _422) * _428) + (((_372.x * 2.0) + (-1.0)) * cbMtdParam._m0[22u].x);
    float _435 = ((cbMtdParam._m0[21u].w * _423) * _428) + (((_372.y * 2.0) + (-1.0)) * cbMtdParam._m0[22u].y);
    float _438 = fract(cbMtdParam._m0[21u].z * TEXCOORD.x);
    float _439 = fract(cbMtdParam._m0[21u].w * TEXCOORD.y);
    float _457;
    float _460;
    float _462;
    if (_434 > 0.0)
    {
        float _443 = (1.0 - _438) / _434;
        _457 = _443;
        _460 = ((cbMtdParam._m0[18u].w + 1.0) - fract(_443 * _429)) * 0.16666667163372039794921875;
        _462 = (fract((_443 * _435) + _439) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_434 < 0.0)
        {
            float _458 = ((-0.0) - _438) / _434;
            frontier_phi_3_2_ladder = (fract(_458 * _429) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
            frontier_phi_3_2_ladder_1 = _458;
            frontier_phi_3_2_ladder_2 = (fract((_458 * _435) + _439) * 0.16666667163372039794921875) + 0.666666686534881591796875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _459;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _457 = frontier_phi_3_2_ladder_1;
        _460 = frontier_phi_3_2_ladder;
        _462 = frontier_phi_3_2_ladder_2;
    }
    float _488;
    float _490;
    float _492;
    if (_435 > 0.0)
    {
        float _475 = (1.0 - _439) / _435;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_475 < _457)
        {
            frontier_phi_8_5_ladder = (fract(_475 * _429) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_475 * _434) + _438) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _475;
        }
        else
        {
            frontier_phi_8_5_ladder = _462;
            frontier_phi_8_5_ladder_1 = _460;
            frontier_phi_8_5_ladder_2 = _457;
        }
        _488 = frontier_phi_8_5_ladder_2;
        _490 = frontier_phi_8_5_ladder_1;
        _492 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_435 < 0.0)
        {
            float _489 = ((-0.0) - _439) / _435;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_489 < _457)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_489 * _429) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_489 * _434) + _438) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _489;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _462;
                frontier_phi_8_6_ladder_9_ladder_1 = _460;
                frontier_phi_8_6_ladder_9_ladder_2 = _457;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _462;
            frontier_phi_8_6_ladder_1 = _460;
            frontier_phi_8_6_ladder_2 = _457;
        }
        _488 = frontier_phi_8_6_ladder_2;
        _490 = frontier_phi_8_6_ladder_1;
        _492 = frontier_phi_8_6_ladder;
    }
    float _496 = (_429 > 0.0) ? (cbMtdParam._m0[18u].z / _429) : 5000.0;
    float _509;
    float _510;
    if (_496 < _488)
    {
        _509 = ((_438 + cbMtdParam._m0[18u].w) + (_496 * _434)) * 0.16666667163372039794921875;
        _510 = (((_496 * _435) + _439) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _509 = _490;
        _510 = _492;
    }
    vec4 _512 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_509, _510));
    float _3585 = isnan(0.0) ? cbMtdParam._m0[17u].z : (isnan(cbMtdParam._m0[17u].z) ? 0.0 : max(cbMtdParam._m0[17u].z, 0.0));
    float _526 = isnan(1.0) ? _3585 : (isnan(_3585) ? 1.0 : min(_3585, 1.0));
    float _3596 = isnan(0.0) ? cbMtdParam._m0[17u].y : (isnan(cbMtdParam._m0[17u].y) ? 0.0 : max(cbMtdParam._m0[17u].y, 0.0));
    float _569 = ((_526 - ((1.0 - (isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0)))) * (_526 + 1.0))) + (((cbMtdParam._m0[18u].y * texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[3u].w)).x) + (cbMtdParam._m0[17u].x * texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w)).x)) / cbMtdParam._m0[17u].w)) / _526;
    float _3607 = isnan(0.0) ? _569 : (isnan(_569) ? 0.0 : max(_569, 0.0));
    float _570 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
    float _572 = 3.0 - (_570 * 2.0);
    float _577 = _570 * _570;
    float _593 = _299 * 0.1500000059604644775390625;
    float _601 = (_593 * (((_299 * _512.x) * (((_577 * (cbMtdParam._m0[15u].x - cbMtdParam._m0[13u].x)) * _572) + cbMtdParam._m0[13u].x)) - _334)) + _334;
    float _602 = (_593 * (((_299 * _512.y) * (((_577 * (cbMtdParam._m0[15u].y - cbMtdParam._m0[13u].y)) * _572) + cbMtdParam._m0[13u].y)) - _336)) + _336;
    float _603 = (_593 * (((_299 * _512.z) * (((_577 * (cbMtdParam._m0[15u].z - cbMtdParam._m0[13u].z)) * _572) + cbMtdParam._m0[13u].z)) - _338)) + _338;
    vec4 _616 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _620 = _616.z;
    float _623 = (_616.x * 2.0) + (-1.0);
    float _624 = (_616.y * 2.0) + (-1.0);
    float _625 = dot(vec2(_623, _624), vec2(_623, _624));
    float _3618 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _630 = sqrt(1.0 - (isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0))));
    float _633 = fma(_630, _217, fma(_624, _224, _623 * _210));
    float _636 = fma(_630, _218, fma(_624, _225, _623 * _211));
    float _639 = fma(_630, _219, fma(_624, _226, _623 * _212));
    float _643 = inversesqrt(dot(vec3(_633, _636, _639), vec3(_633, _636, _639)));
    float _644 = _643 * _633;
    float _645 = _643 * _636;
    float _646 = _643 * _639;
    float _3629 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _647 = isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0));
    float _3640 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _3651 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _3662 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _666 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _670 = inversesqrt(dot(vec3(_281, _282, _283), vec3(_281, _282, _283)));
    float _671 = _281 * _670;
    float _672 = _282 * _670;
    float _673 = _283 * _670;
    vec4 _678 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _680 = _678.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _841 = sqrt(((_281 * _281) + (_282 * _282)) + (_283 * _283));
        float _847 = (cbMatDynParam._m0[5u].x * _841) + cbMatDynParam._m0[5u].y;
        float _3673 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _848 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _852 = (cbMatDynParam._m0[5u].z * _841) + cbMatDynParam._m0[5u].w;
        float _3684 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0))) - _848)) + _848) < ((_680 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _697 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _698 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _718 = fma(_646, cbSceneParam._m0[5u].z, fma(_645, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _644));
    float _721 = fma(_646, cbSceneParam._m0[6u].z, fma(_645, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _644));
    float _724 = fma(_646, cbSceneParam._m0[7u].z, fma(_645, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _644));
    uint _737 = uint(roundEven(NORMAL.w)) * 13u;
    uint _738 = _737 + 9u;
    uint _739 = _738 + uint(cbMatDynParam._m0[0u].w);
    float _745 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0)))) * cbInstanceData._m0[_739].x;
    float _746 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0)))) * cbInstanceData._m0[_739].y;
    float _747 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0)))) * cbInstanceData._m0[_739].z;
    float _3695 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _748 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
    float _3706 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _749 = isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0));
    float _3717 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _750 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
    vec4 _759 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _697, cbSceneParam._m0[86u].y * _698));
    float _762 = _759.x * TEXCOORD_4.z;
    float _763 = dot(vec3(_644, _645, _646), vec3(_671, _672, _673));
    float _766 = _763 * 2.0;
    float _770 = (_766 * _644) - _671;
    float _771 = (_766 * _645) - _672;
    float _772 = (_766 * _646) - _673;
    float _776 = abs(dot(vec3(_671, _672, _673), vec3(_644, _645, _646)));
    float _3728 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
    float _778 = sqrt(_647);
    float _790 = exp2((_778 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_778 * 3.0));
    float _822 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _826 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _830 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _886 = fma(_830, cbModelParam._m0[26u].z, fma(_826, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _822));
        float _890 = fma(_830, cbModelParam._m0[27u].z, fma(_826, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _822));
        float _894 = fma(_830, cbModelParam._m0[28u].z, fma(_826, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _822));
        float _918 = _822 + _644;
        float _919 = _826 + _645;
        float _920 = _830 + _646;
        float _930 = fma(_920, cbModelParam._m0[26u].z, fma(_919, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _918)) - _886;
        float _931 = fma(_920, cbModelParam._m0[27u].z, fma(_919, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _918)) - _890;
        float _932 = fma(_920, cbModelParam._m0[28u].z, fma(_919, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _918)) - _894;
        float _936 = inversesqrt(dot(vec3(_930, _931, _932), vec3(_930, _931, _932)));
        float _949 = ((_936 * _930) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_886 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _950 = ((_936 * _931) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_890 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _951 = ((_936 * _932) / cbModelParam._m0[34u].z) + ((((((_894 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _954 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_949, _950, _951), 0.0);
        vec4 _961 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_949, _950, _951), 0.0);
        vec4 _968 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_949, _950, _951), 0.0);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_949, _950, _951), 0.0);
        float _988 = exp2((_954.w + (-0.5)) * 20.0) * 2.0;
        float _989 = _988 * (_954.x + (-0.5));
        float _990 = _988 * (_954.y + (-0.5));
        float _991 = _988 * (_954.z + (-0.5));
        float _998 = exp2((_961.w + (-0.5)) * 20.0) * 2.0;
        float _999 = _998 * (_961.x + (-0.5));
        float _1000 = _998 * (_961.y + (-0.5));
        float _1001 = _998 * (_961.z + (-0.5));
        float _1008 = exp2((_968.w + (-0.5)) * 20.0) * 2.0;
        float _1009 = _1008 * (_968.x + (-0.5));
        float _1010 = _1008 * (_968.y + (-0.5));
        float _1011 = _1008 * (_968.z + (-0.5));
        float _1018 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_975.x + (-0.5));
        float _1020 = _1018 * (_975.y + (-0.5));
        float _1021 = _1018 * (_975.z + (-0.5));
        float _1022 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1023 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1024 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1025 = _989 * 0.5;
        float _1026 = _999 * 0.5;
        float _1027 = _1009 * 0.5;
        float _1028 = dot(vec3(_1025, _1026, _1027), vec3(_1025, _1026, _1027));
        float _1033 = (_1028 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1028);
        float _1042 = (dot(vec3(_644, _645, _646), vec3(_1033 * _1025, _1033 * _1026, _1033 * _1027)) + 1.0) * 0.5;
        float _3754 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1052 = sqrt(((_1026 * _1026) + (_1025 * _1025)) + (_1027 * _1027)) / (_1022 + 9.9999997473787516355514526367188e-06);
        float _3765 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1053 = isnan(1.0) ? _3765 : (isnan(_3765) ? 1.0 : min(_3765, 1.0));
        float _1054 = _1053 * 2.0;
        float _1058 = (1.0 - _1053) / (_1053 + 1.0);
        float _3776 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1059 = isnan(1.0) ? _3776 : (isnan(_3776) ? 1.0 : min(_3776, 1.0));
        float _1068 = ((((1.0 - _1059) * (_1054 + 2.0)) * exp2(log2(isnan(1.0) ? _3754 : (isnan(_3754) ? 1.0 : min(_3754, 1.0))) * (_1054 + 1.0))) + _1059) * _1022;
        float _1069 = _990 * 0.5;
        float _1070 = _1000 * 0.5;
        float _1071 = _1010 * 0.5;
        float _1072 = dot(vec3(_1069, _1070, _1071), vec3(_1069, _1070, _1071));
        float _1077 = (_1072 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1072);
        float _1085 = (dot(vec3(_644, _645, _646), vec3(_1077 * _1069, _1077 * _1070, _1077 * _1071)) + 1.0) * 0.5;
        float _3787 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1094 = sqrt(((_1070 * _1070) + (_1069 * _1069)) + (_1071 * _1071)) / (_1023 + 9.9999997473787516355514526367188e-06);
        float _3798 = isnan(0.0) ? _1094 : (isnan(_1094) ? 0.0 : max(_1094, 0.0));
        float _1095 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
        float _1096 = _1095 * 2.0;
        float _1100 = (1.0 - _1095) / (_1095 + 1.0);
        float _3809 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1101 = isnan(1.0) ? _3809 : (isnan(_3809) ? 1.0 : min(_3809, 1.0));
        float _1110 = ((((1.0 - _1101) * (_1096 + 2.0)) * exp2(log2(isnan(1.0) ? _3787 : (isnan(_3787) ? 1.0 : min(_3787, 1.0))) * (_1096 + 1.0))) + _1101) * _1023;
        float _1111 = _991 * 0.5;
        float _1112 = _1001 * 0.5;
        float _1113 = _1011 * 0.5;
        float _1114 = dot(vec3(_1111, _1112, _1113), vec3(_1111, _1112, _1113));
        float _1119 = (_1114 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1114);
        float _1127 = (dot(vec3(_644, _645, _646), vec3(_1119 * _1111, _1119 * _1112, _1119 * _1113)) + 1.0) * 0.5;
        float _3820 = isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0));
        float _1136 = sqrt(((_1112 * _1112) + (_1111 * _1111)) + (_1113 * _1113)) / (_1024 + 9.9999997473787516355514526367188e-06);
        float _3831 = isnan(0.0) ? _1136 : (isnan(_1136) ? 0.0 : max(_1136, 0.0));
        float _1137 = isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0));
        float _1138 = _1137 * 2.0;
        float _1142 = (1.0 - _1137) / (_1137 + 1.0);
        float _3842 = isnan(0.0) ? _1142 : (isnan(_1142) ? 0.0 : max(_1142, 0.0));
        float _1143 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1152 = ((((1.0 - _1143) * (_1138 + 2.0)) * exp2(log2(isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * (_1138 + 1.0))) + _1143) * _1024;
        _1160 = _991;
        _1161 = _990;
        _1162 = _989;
        _1163 = _1001;
        _1164 = _1000;
        _1165 = _999;
        _1166 = _1011;
        _1167 = _1010;
        _1168 = _1009;
        _1169 = _1024;
        _1170 = _1023;
        _1171 = _1022;
        _1172 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0)));
        _1173 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0)));
        _1174 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0)));
    }
    else
    {
        _1160 = _459;
        _1161 = _459;
        _1162 = _459;
        _1163 = _459;
        _1164 = _459;
        _1165 = _459;
        _1166 = _459;
        _1167 = _459;
        _1168 = _459;
        _1169 = _459;
        _1170 = _459;
        _1171 = _459;
        _1172 = 0.0;
        _1173 = 0.0;
        _1174 = 0.0;
    }
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1203 = fma(_830, cbModelParam._m0[30u].z, fma(_826, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _822));
        float _1207 = fma(_830, cbModelParam._m0[31u].z, fma(_826, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _822));
        float _1211 = fma(_830, cbModelParam._m0[32u].z, fma(_826, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _822));
        float _1234 = _822 + _644;
        float _1235 = _826 + _645;
        float _1236 = _830 + _646;
        float _1246 = fma(_1236, cbModelParam._m0[30u].z, fma(_1235, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1234)) - _1203;
        float _1247 = fma(_1236, cbModelParam._m0[31u].z, fma(_1235, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1234)) - _1207;
        float _1248 = fma(_1236, cbModelParam._m0[32u].z, fma(_1235, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1234)) - _1211;
        float _1252 = inversesqrt(dot(vec3(_1246, _1247, _1248), vec3(_1246, _1247, _1248)));
        float _1265 = ((_1252 * _1246) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1203 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1266 = ((_1252 * _1247) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1207 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1267 = ((_1252 * _1248) / cbModelParam._m0[35u].z) + ((((((_1211 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1269 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1265, _1266, _1267), 0.0);
        vec4 _1276 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1265, _1266, _1267), 0.0);
        vec4 _1283 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1265, _1266, _1267), 0.0);
        vec4 _1290 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1265, _1266, _1267), 0.0);
        float _1302 = exp2((_1269.w + (-0.5)) * 20.0) * 2.0;
        float _1303 = _1302 * (_1269.x + (-0.5));
        float _1304 = _1302 * (_1269.y + (-0.5));
        float _1305 = _1302 * (_1269.z + (-0.5));
        float _1312 = exp2((_1276.w + (-0.5)) * 20.0) * 2.0;
        float _1313 = _1312 * (_1276.x + (-0.5));
        float _1314 = _1312 * (_1276.y + (-0.5));
        float _1315 = _1312 * (_1276.z + (-0.5));
        float _1322 = exp2((_1283.w + (-0.5)) * 20.0) * 2.0;
        float _1323 = _1322 * (_1283.x + (-0.5));
        float _1324 = _1322 * (_1283.y + (-0.5));
        float _1325 = _1322 * (_1283.z + (-0.5));
        float _1332 = exp2((_1290.w + (-0.5)) * 20.0) * 2.0;
        float _1333 = _1332 * (_1290.x + (-0.5));
        float _1334 = _1332 * (_1290.y + (-0.5));
        float _1335 = _1332 * (_1290.z + (-0.5));
        float _1336 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1337 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1338 = isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0));
        float _1339 = _1303 * 0.5;
        float _1340 = _1313 * 0.5;
        float _1341 = _1323 * 0.5;
        float _1342 = dot(vec3(_1339, _1340, _1341), vec3(_1339, _1340, _1341));
        float _1347 = (_1342 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1342);
        float _1355 = (dot(vec3(_644, _645, _646), vec3(_1347 * _1339, _1347 * _1340, _1347 * _1341)) + 1.0) * 0.5;
        float _3883 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1364 = sqrt(((_1340 * _1340) + (_1339 * _1339)) + (_1341 * _1341)) / (_1336 + 9.9999997473787516355514526367188e-06);
        float _3894 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
        float _1366 = _1365 * 2.0;
        float _1370 = (1.0 - _1365) / (_1365 + 1.0);
        float _3905 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1371 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
        float _1380 = ((((1.0 - _1371) * (_1366 + 2.0)) * exp2(log2(isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0))) * (_1366 + 1.0))) + _1371) * _1336;
        float _1381 = _1304 * 0.5;
        float _1382 = _1314 * 0.5;
        float _1383 = _1324 * 0.5;
        float _1384 = dot(vec3(_1381, _1382, _1383), vec3(_1381, _1382, _1383));
        float _1389 = (_1384 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1384);
        float _1397 = (dot(vec3(_644, _645, _646), vec3(_1389 * _1381, _1389 * _1382, _1389 * _1383)) + 1.0) * 0.5;
        float _3916 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
        float _1406 = sqrt(((_1382 * _1382) + (_1381 * _1381)) + (_1383 * _1383)) / (_1337 + 9.9999997473787516355514526367188e-06);
        float _3927 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
        float _1408 = _1407 * 2.0;
        float _1412 = (1.0 - _1407) / (_1407 + 1.0);
        float _3938 = isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0));
        float _1413 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
        float _1422 = ((((1.0 - _1413) * (_1408 + 2.0)) * exp2(log2(isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0))) * (_1408 + 1.0))) + _1413) * _1337;
        float _1423 = _1305 * 0.5;
        float _1424 = _1315 * 0.5;
        float _1425 = _1325 * 0.5;
        float _1426 = dot(vec3(_1423, _1424, _1425), vec3(_1423, _1424, _1425));
        float _1431 = (_1426 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1426);
        float _1439 = (dot(vec3(_644, _645, _646), vec3(_1431 * _1423, _1431 * _1424, _1431 * _1425)) + 1.0) * 0.5;
        float _3949 = isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0));
        float _1448 = sqrt(((_1424 * _1424) + (_1423 * _1423)) + (_1425 * _1425)) / (_1338 + 9.9999997473787516355514526367188e-06);
        float _3960 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1449 = isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0));
        float _1450 = _1449 * 2.0;
        float _1454 = (1.0 - _1449) / (_1449 + 1.0);
        float _3971 = isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0));
        float _1455 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1464 = ((((1.0 - _1455) * (_1450 + 2.0)) * exp2(log2(isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * (_1450 + 1.0))) + _1455) * _1338;
        _1472 = _1305;
        _1473 = _1304;
        _1474 = _1303;
        _1475 = _1315;
        _1476 = _1314;
        _1477 = _1313;
        _1478 = _1325;
        _1479 = _1324;
        _1480 = _1323;
        _1481 = _1338;
        _1482 = _1337;
        _1483 = _1336;
        _1484 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)));
        _1485 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0)));
        _1486 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0)));
    }
    else
    {
        _1472 = _459;
        _1473 = _459;
        _1474 = _459;
        _1475 = _459;
        _1476 = _459;
        _1477 = _459;
        _1478 = _459;
        _1479 = _459;
        _1480 = _459;
        _1481 = _459;
        _1482 = _459;
        _1483 = _459;
        _1484 = 0.0;
        _1485 = 0.0;
        _1486 = 0.0;
    }
    float _1496 = (cbModelParam._m0[1u].x * (_1484 - _1172)) + _1172;
    float _1497 = (cbModelParam._m0[1u].x * (_1485 - _1173)) + _1173;
    float _1498 = (cbModelParam._m0[1u].x * (_1486 - _1174)) + _1174;
    float _1519 = fma(_1498, cbSceneParam._m0[89u].z, fma(_1497, cbSceneParam._m0[89u].y, _1496 * cbSceneParam._m0[89u].x));
    float _1522 = fma(_1498, cbSceneParam._m0[90u].z, fma(_1497, cbSceneParam._m0[90u].y, _1496 * cbSceneParam._m0[90u].x));
    float _1525 = fma(_1498, cbSceneParam._m0[91u].z, fma(_1497, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1496));
    float _1540 = _770 * 0.5;
    float _1541 = _771 * 0.5;
    float _1542 = _772 * 0.5;
    float _1543 = dot(vec4(_1540, _1541, _1542, 1.0), vec4(_1474, _1477, _1480, _1483));
    float _1546 = dot(vec4(_1540, _1541, _1542, 1.0), vec4(_1473, _1476, _1479, _1482));
    float _1549 = dot(vec4(_1540, _1541, _1542, 1.0), vec4(_1472, _1475, _1478, _1481));
    float _1583;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1556 = dot(vec4(_1540, _1541, _1542, 1.0), vec4(_1160, _1163, _1166, _1169));
        float _1560 = dot(vec4(_1540, _1541, _1542, 1.0), vec4(_1161, _1164, _1167, _1170));
        float _1564 = dot(vec4(_1540, _1541, _1542, 1.0), vec4(_1162, _1165, _1168, _1171));
        float _1571 = dot(vec4(cbModelParam._m0[39u]), vec4(_1540, _1541, _1542, 1.0));
        _1583 = dot(vec3(isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0)), isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0)), isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1571) ? 0.0 : (isnan(0.0) ? _1571 : max(0.0, _1571))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1583 = 1.0;
    }
    float _1594;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1585 = dot(vec4(cbModelParam._m0[40u]), vec4(_1540, _1541, _1542, 1.0));
        _1594 = dot(vec3(isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)), isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0)), isnan(0.0) ? _1549 : (isnan(_1549) ? 0.0 : max(_1549, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1585) ? 0.0 : (isnan(0.0) ? _1585 : max(0.0, _1585))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1594 = 1.0;
    }
    float _1598 = (_1594 * cbModelParam._m0[1u].x) + (_1583 * (1.0 - cbModelParam._m0[1u].x));
    float _1608 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _647);
    float _1609 = isnan(_1608) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1608 : min(cbModelParam._m0[25u].z, _1608));
    float _1690;
    float _1692;
    float _1694;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1657 = fma(_830, cbModelParam._m0[13u].z, fma(_826, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _822)) + cbModelParam._m0[13u].w;
        float _1661 = fma(_830, cbModelParam._m0[14u].z, fma(_826, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _822)) + cbModelParam._m0[14u].w;
        float _1665 = fma(_830, cbModelParam._m0[15u].z, fma(_826, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _822)) + cbModelParam._m0[15u].w;
        float _1668 = fma(_772, cbModelParam._m0[13u].z, fma(_771, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _770));
        float _1671 = fma(_772, cbModelParam._m0[14u].z, fma(_771, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _770));
        float _1674 = fma(_772, cbModelParam._m0[15u].z, fma(_771, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _770));
        float _1702;
        if (_1668 > 0.0)
        {
            _1702 = abs((1.0 - _1657) / _1668);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_1668 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_1657 + 1.0) / _1668);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1702 = frontier_phi_29_27_ladder;
        }
        float _1871;
        if (_1671 > 0.0)
        {
            _1871 = abs((1.0 - _1661) / _1671);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1671 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1661 + 1.0) / _1671);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _1871 = frontier_phi_38_34_ladder;
        }
        float _2315;
        if (_1674 > 0.0)
        {
            _2315 = abs((1.0 - _1665) / _1674);
        }
        else
        {
            float frontier_phi_50_45_ladder;
            if (_1674 < 0.0)
            {
                frontier_phi_50_45_ladder = abs((_1665 + 1.0) / _1674);
            }
            else
            {
                frontier_phi_50_45_ladder = 5000.0;
            }
            _2315 = frontier_phi_50_45_ladder;
        }
        float _2317 = isnan(_1871) ? _1702 : (isnan(_1702) ? _1871 : min(_1702, _1871));
        float _2318 = isnan(_2315) ? _2317 : (isnan(_2317) ? _2315 : min(_2317, _2315));
        float _2322 = (_2318 * _1668) + _1657;
        float _2323 = (_2318 * _1671) + _1661;
        float _2324 = (_2318 * _1674) + _1665;
        float _2325 = _2318 * 9.9999997473787516355514526367188e-05;
        float _2327 = (-1.0) - _2325;
        float _2329 = _2325 + 1.0;
        float frontier_phi_28_50_ladder;
        float frontier_phi_28_50_ladder_1;
        float frontier_phi_28_50_ladder_2;
        if ((_2324 > _2329) || ((_2324 < _2327) || ((_2323 > _2329) || ((_2323 < _2327) || ((_2322 < _2327) || (_2322 > _2329))))))
        {
            frontier_phi_28_50_ladder = 0.0;
            frontier_phi_28_50_ladder_1 = 0.0;
            frontier_phi_28_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2558 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2324, cbModelParam._m0[9u].z, fma(_2323, cbModelParam._m0[9u].y, _2322 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2324, cbModelParam._m0[10u].z, fma(_2323, cbModelParam._m0[10u].y, _2322 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2324, cbModelParam._m0[11u].z, fma(_2323, cbModelParam._m0[11u].y, _2322 * cbModelParam._m0[11u].x))), _1609);
            frontier_phi_28_50_ladder = _2558.z * cbModelParam._m0[1u].y;
            frontier_phi_28_50_ladder_1 = _2558.y * cbModelParam._m0[1u].y;
            frontier_phi_28_50_ladder_2 = _2558.x * cbModelParam._m0[1u].y;
        }
        _1690 = frontier_phi_28_50_ladder_2;
        _1692 = frontier_phi_28_50_ladder_1;
        _1694 = frontier_phi_28_50_ladder;
    }
    else
    {
        vec4 _1678 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_770, _771, _772), _1609);
        _1690 = _1678.x * cbModelParam._m0[1u].y;
        _1692 = _1678.y * cbModelParam._m0[1u].y;
        _1694 = _1678.z * cbModelParam._m0[1u].y;
    }
    float _1698 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _647);
    float _1699 = isnan(_1698) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1698 : min(cbModelParam._m0[25u].w, _1698));
    float _1788;
    float _1790;
    float _1792;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1752 = fma(_830, cbModelParam._m0[21u].z, fma(_826, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _822)) + cbModelParam._m0[21u].w;
        float _1756 = fma(_830, cbModelParam._m0[22u].z, fma(_826, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _822)) + cbModelParam._m0[22u].w;
        float _1760 = fma(_830, cbModelParam._m0[23u].z, fma(_826, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _822)) + cbModelParam._m0[23u].w;
        float _1763 = fma(_772, cbModelParam._m0[21u].z, fma(_771, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _770));
        float _1766 = fma(_772, cbModelParam._m0[22u].z, fma(_771, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _770));
        float _1769 = fma(_772, cbModelParam._m0[23u].z, fma(_771, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _770));
        float _1876;
        if (_1763 > 0.0)
        {
            _1876 = abs((1.0 - _1752) / _1763);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1763 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1752 + 1.0) / _1763);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _1876 = frontier_phi_40_36_ladder;
        }
        float _2342;
        if (_1766 > 0.0)
        {
            _2342 = abs((1.0 - _1756) / _1766);
        }
        else
        {
            float frontier_phi_52_47_ladder;
            if (_1766 < 0.0)
            {
                frontier_phi_52_47_ladder = abs((_1756 + 1.0) / _1766);
            }
            else
            {
                frontier_phi_52_47_ladder = 5000.0;
            }
            _2342 = frontier_phi_52_47_ladder;
        }
        float _2687;
        if (_1769 > 0.0)
        {
            _2687 = abs((1.0 - _1760) / _1769);
        }
        else
        {
            float frontier_phi_64_59_ladder;
            if (_1769 < 0.0)
            {
                frontier_phi_64_59_ladder = abs((_1760 + 1.0) / _1769);
            }
            else
            {
                frontier_phi_64_59_ladder = 5000.0;
            }
            _2687 = frontier_phi_64_59_ladder;
        }
        float _2689 = isnan(_2342) ? _1876 : (isnan(_1876) ? _2342 : min(_1876, _2342));
        float _2690 = isnan(_2687) ? _2689 : (isnan(_2689) ? _2687 : min(_2689, _2687));
        float _2694 = (_2690 * _1763) + _1752;
        float _2695 = (_2690 * _1766) + _1756;
        float _2696 = (_2690 * _1769) + _1760;
        float _2697 = _2690 * 9.9999997473787516355514526367188e-05;
        float _2698 = (-1.0) - _2697;
        float _2700 = _2697 + 1.0;
        float frontier_phi_37_64_ladder;
        float frontier_phi_37_64_ladder_1;
        float frontier_phi_37_64_ladder_2;
        if ((_2696 > _2700) || ((_2696 < _2698) || ((_2695 > _2700) || ((_2695 < _2698) || ((_2694 < _2698) || (_2694 > _2700))))))
        {
            frontier_phi_37_64_ladder = 0.0;
            frontier_phi_37_64_ladder_1 = 0.0;
            frontier_phi_37_64_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2833 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2696, cbModelParam._m0[17u].z, fma(_2695, cbModelParam._m0[17u].y, _2694 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2696, cbModelParam._m0[18u].z, fma(_2695, cbModelParam._m0[18u].y, _2694 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2696, cbModelParam._m0[19u].z, fma(_2695, cbModelParam._m0[19u].y, _2694 * cbModelParam._m0[19u].x))), _1699);
            frontier_phi_37_64_ladder = _2833.z * cbModelParam._m0[1u].z;
            frontier_phi_37_64_ladder_1 = _2833.y * cbModelParam._m0[1u].z;
            frontier_phi_37_64_ladder_2 = _2833.x * cbModelParam._m0[1u].z;
        }
        _1788 = frontier_phi_37_64_ladder_2;
        _1790 = frontier_phi_37_64_ladder_1;
        _1792 = frontier_phi_37_64_ladder;
    }
    else
    {
        vec4 _1772 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_770, _771, _772), _1699);
        _1788 = _1772.x * cbModelParam._m0[1u].z;
        _1790 = _1772.y * cbModelParam._m0[1u].z;
        _1792 = _1772.z * cbModelParam._m0[1u].z;
    }
    float _1804 = ((((1.0 - _790) * ((_778 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_790 * _778)) * _762;
    float _1805 = _1804 * ((cbModelParam._m0[1u].w * (_1788 - _1690)) + _1690);
    float _1806 = _1804 * ((cbModelParam._m0[1u].w * (_1790 - _1692)) + _1692);
    float _1807 = _1804 * ((cbModelParam._m0[1u].w * (_1792 - _1694)) + _1694);
    float _1810 = fma(_1807, cbSceneParam._m0[89u].z, fma(_1806, cbSceneParam._m0[89u].y, _1805 * cbSceneParam._m0[89u].x));
    float _1813 = fma(_1807, cbSceneParam._m0[90u].z, fma(_1806, cbSceneParam._m0[90u].y, _1805 * cbSceneParam._m0[90u].x));
    float _1816 = fma(_1807, cbSceneParam._m0[91u].z, fma(_1806, cbSceneParam._m0[91u].y, _1805 * cbSceneParam._m0[91u].x));
    float _1850 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1854 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1858 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1862 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1863 = _1850 / _1862;
    float _1864 = _1854 / _1862;
    float _1865 = _1858 / _1862;
    float _2012;
    float _2013;
    float _2014;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1892 = ((uint(_1865 > cbSceneParam._m0[59u].y) + uint(_1865 > cbSceneParam._m0[59u].x)) + uint(_1865 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1893 = _1892 + 43u;
        uint _1901 = _1892 + 44u;
        uint _1909 = _1892 + 45u;
        uint _1917 = _1892 + 46u;
        float _1928 = fma(_1862, cbSceneParam._m0[_1893].w, fma(_1858, cbSceneParam._m0[_1893].z, fma(_1854, cbSceneParam._m0[_1893].y, _1850 * cbSceneParam._m0[_1893].x)));
        float _1932 = fma(_1862, cbSceneParam._m0[_1901].w, fma(_1858, cbSceneParam._m0[_1901].z, fma(_1854, cbSceneParam._m0[_1901].y, _1850 * cbSceneParam._m0[_1901].x)));
        float _1940 = fma(_1862, cbSceneParam._m0[_1917].w, fma(_1858, cbSceneParam._m0[_1917].z, fma(_1854, cbSceneParam._m0[_1917].y, _1850 * cbSceneParam._m0[_1917].x)));
        float _1945 = cbSceneParam._m0[33u].z * _1940;
        float _1947 = cbSceneParam._m0[33u].w * _1940;
        float _1950 = fma(_1862, cbSceneParam._m0[_1909].w, fma(_1858, cbSceneParam._m0[_1909].z, fma(_1854, cbSceneParam._m0[_1909].y, _1850 * cbSceneParam._m0[_1909].x))) / _1940;
        float _1998 = (cbSceneParam._m0[33u].x - sqrt(((_1864 * _1864) + (_1863 * _1863)) + (_1865 * _1865))) * cbSceneParam._m0[33u].y;
        float _4097 = isnan(0.0) ? _1998 : (isnan(_1998) ? 0.0 : max(_1998, 0.0));
        float _2005 = (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1945 + _1928) / _1940, (_1947 + _1932) / _1940), _1950), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1947 + _1928) / _1940, (_1932 - _1945) / _1940), _1950), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1928 - _1945) / _1940, (_1932 - _1947) / _1940), _1950), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1928 - _1947) / _1940, (_1945 + _1932) / _1940), _1950), 0.0)).x), vec4(0.25)));
        _2012 = 1.0 - (_2005 * cbSceneParam._m0[34u].x);
        _2013 = 1.0 - (_2005 * cbSceneParam._m0[34u].y);
        _2014 = 1.0 - (_2005 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2012 = 1.0;
        _2013 = 1.0;
        _2014 = 1.0;
    }
    float _2078;
    float _2080;
    float _2082;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2066 = fma(_1862, cbSceneParam._m0[63u].w, fma(_1858, cbSceneParam._m0[63u].z, fma(_1854, cbSceneParam._m0[63u].y, _1850 * cbSceneParam._m0[63u].x)));
        float _2067 = fma(_1862, cbSceneParam._m0[60u].w, fma(_1858, cbSceneParam._m0[60u].z, fma(_1854, cbSceneParam._m0[60u].y, _1850 * cbSceneParam._m0[60u].x))) / _2066;
        float _2068 = fma(_1862, cbSceneParam._m0[61u].w, fma(_1858, cbSceneParam._m0[61u].z, fma(_1854, cbSceneParam._m0[61u].y, _1850 * cbSceneParam._m0[61u].x))) / _2066;
        float frontier_phi_49_48_ladder;
        float frontier_phi_49_48_ladder_1;
        float frontier_phi_49_48_ladder_2;
        if ((((_2067 >= cbSceneParam._m0[64u].x) && (_2068 >= cbSceneParam._m0[64u].y)) && (_2067 <= cbSceneParam._m0[64u].z)) && (_2068 <= cbSceneParam._m0[64u].w))
        {
            float _2355 = fma(_1862, cbSceneParam._m0[62u].w, fma(_1858, cbSceneParam._m0[62u].z, fma(_1854, cbSceneParam._m0[62u].y, _1850 * cbSceneParam._m0[62u].x))) / _2066;
            float _2359 = isnan(cbSceneParam._m0[41u].w) ? _2355 : (isnan(_2355) ? cbSceneParam._m0[41u].w : max(_2355, cbSceneParam._m0[41u].w));
            float _2402 = (cbSceneParam._m0[33u].x - sqrt(((_1864 * _1864) + (_1863 * _1863)) + (_1865 * _1865))) * cbSceneParam._m0[33u].y;
            float _4113 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
            float _2409 = (isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2067, cbSceneParam._m0[33u].w + _2068), _2359), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2067, _2068 - cbSceneParam._m0[33u].z), _2359), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2067 - cbSceneParam._m0[33u].z, _2068 - cbSceneParam._m0[33u].w), _2359), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2067 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2068), _2359), 0.0)).x), vec4(0.25)));
            float _2413 = 1.0 - (_2409 * cbSceneParam._m0[34u].x);
            float _2414 = 1.0 - (_2409 * cbSceneParam._m0[34u].y);
            float _2415 = 1.0 - (_2409 * cbSceneParam._m0[34u].z);
            frontier_phi_49_48_ladder = isnan(_2415) ? _2014 : (isnan(_2014) ? _2415 : min(_2014, _2415));
            frontier_phi_49_48_ladder_1 = isnan(_2414) ? _2013 : (isnan(_2013) ? _2414 : min(_2013, _2414));
            frontier_phi_49_48_ladder_2 = isnan(_2413) ? _2012 : (isnan(_2012) ? _2413 : min(_2012, _2413));
        }
        else
        {
            frontier_phi_49_48_ladder = _2014;
            frontier_phi_49_48_ladder_1 = _2013;
            frontier_phi_49_48_ladder_2 = _2012;
        }
        _2078 = frontier_phi_49_48_ladder_2;
        _2080 = frontier_phi_49_48_ladder_1;
        _2082 = frontier_phi_49_48_ladder;
    }
    else
    {
        _2078 = _2012;
        _2080 = _2013;
        _2082 = _2014;
    }
    uvec4 _2087 = floatBitsToUint(cbInstanceData._m0[_737 + 5u]);
    uint _2089 = _2087.x * 14u;
    uint _2090 = _2089 + 13u;
    float _2095 = _762 + (-1.0);
    float _2098 = (cbLight._m0[_2090].x * _2095) + 1.0;
    float _2099 = (cbLight._m0[_2090].y * _2095) + 1.0;
    uint _2100 = _2089 + 5u;
    float _2106 = isnan(1.0) ? _2099 : (isnan(_2099) ? 1.0 : min(_2099, 1.0));
    uint _2110 = _2089 + 4u;
    float _2119 = isnan(1.0) ? _2098 : (isnan(_2098) ? 1.0 : min(_2098, 1.0));
    uint _2123 = _2089 | 1u;
    float _2134 = dot(vec3(cbLight._m0[_2089].xyz), vec3(_644, _645, _646));
    float _2137 = dot(vec3(cbLight._m0[_2123].xyz), vec3(_644, _645, _646));
    float _4149 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
    float _4160 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2142 = (isnan(1.0) ? _4149 : (isnan(_4149) ? 1.0 : min(_4149, 1.0))) * 0.3183098733425140380859375;
    float _2144 = (isnan(1.0) ? _4160 : (isnan(_4160) ? 1.0 : min(_4160, 1.0))) * 0.3183098733425140380859375;
    float _2151 = ((cbLight._m0[_2100].x * _2106) * _2144) + (((cbLight._m0[_2110].x * _2078) * _2119) * _2142);
    float _2152 = ((_2106 * cbLight._m0[_2100].y) * _2144) + (((cbLight._m0[_2110].y * _2080) * _2119) * _2142);
    float _2153 = ((_2106 * cbLight._m0[_2100].z) * _2144) + (((cbLight._m0[_2110].z * _2082) * _2119) * _2142);
    uint _2155 = _2089 + 8u;
    float _2168 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2089].w)) * _647) * 0.949999988079071044921875);
    float _2169 = _2168 * _2168;
    float _2170 = cbLight._m0[_2089].x + _671;
    float _2171 = cbLight._m0[_2089].y + _672;
    float _2172 = cbLight._m0[_2089].z + _673;
    float _2176 = inversesqrt(dot(vec3(_2170, _2171, _2172), vec3(_2170, _2171, _2172)));
    float _2177 = _2176 * _2170;
    float _2178 = _2176 * _2171;
    float _2179 = _2176 * _2172;
    float _2180 = dot(vec3(_644, _645, _646), vec3(cbLight._m0[_2089].xyz));
    float _4171 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
    float _2183 = isnan(1.0) ? _4171 : (isnan(_4171) ? 1.0 : min(_4171, 1.0));
    float _4182 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _2184 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
    float _2185 = dot(vec3(_644, _645, _646), vec3(_2177, _2178, _2179));
    float _4193 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
    float _2188 = isnan(1.0) ? _4193 : (isnan(_4193) ? 1.0 : min(_4193, 1.0));
    float _2189 = dot(vec3(cbLight._m0[_2089].xyz), vec3(_2177, _2178, _2179));
    float _4204 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
    float _2193 = _2169 * _2169;
    float _2197 = ((_2188 * _2188) * (_2193 + (-1.0))) + 1.0;
    float _2208 = (exp2(log2(1.0 - (isnan(1.0) ? _4204 : (isnan(_4204) ? 1.0 : min(_4204, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2209 = 1.0 - _2169;
    float _2220 = (0.5 / (((_2184 * ((_2183 * _2209) + _2169)) + 9.9999999392252902907785028219223e-09) + (((_2184 * _2209) + _2169) * _2183))) * _2183;
    float _4215 = isnan(0.0) ? _2220 : (isnan(_2220) ? 0.0 : max(_2220, 0.0));
    float _2222 = (isnan(1.0) ? _4215 : (isnan(_4215) ? 1.0 : min(_4215, 1.0))) * (_2193 / ((_2197 * _2197) * 3.141590118408203125));
    uint _2236 = _2089 + 9u;
    float _2247 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2123].w)) * _647) * 0.949999988079071044921875);
    float _2248 = _2247 * _2247;
    float _2249 = cbLight._m0[_2123].x + _671;
    float _2250 = cbLight._m0[_2123].y + _672;
    float _2251 = cbLight._m0[_2123].z + _673;
    float _2255 = inversesqrt(dot(vec3(_2249, _2250, _2251), vec3(_2249, _2250, _2251)));
    float _2256 = _2255 * _2249;
    float _2257 = _2255 * _2250;
    float _2258 = _2255 * _2251;
    float _2259 = dot(vec3(_644, _645, _646), vec3(cbLight._m0[_2123].xyz));
    float _4226 = isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0));
    float _2262 = isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0));
    float _2263 = dot(vec3(_644, _645, _646), vec3(_2256, _2257, _2258));
    float _4237 = isnan(0.0) ? _2263 : (isnan(_2263) ? 0.0 : max(_2263, 0.0));
    float _2266 = isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0));
    float _2267 = dot(vec3(cbLight._m0[_2123].xyz), vec3(_2256, _2257, _2258));
    float _4248 = isnan(0.0) ? _2267 : (isnan(_2267) ? 0.0 : max(_2267, 0.0));
    float _2271 = _2248 * _2248;
    float _2275 = ((_2266 * _2266) * (_2271 + (-1.0))) + 1.0;
    float _2284 = (exp2(log2(1.0 - (isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2285 = 1.0 - _2248;
    float _2295 = (0.5 / (((_2184 * ((_2262 * _2285) + _2248)) + 9.9999999392252902907785028219223e-09) + (((_2184 * _2285) + _2248) * _2262))) * _2262;
    float _4259 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _2297 = (isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0))) * (_2271 / ((_2275 * _2275) * 3.141590118408203125));
    float _2307 = (((_2284 * cbLight._m0[_2236].x) * _2297) * _2106) + ((((cbLight._m0[_2155].x * _2078) * _2208) * _2222) * _2119);
    float _2308 = (((_2284 * cbLight._m0[_2236].y) * _2297) * _2106) + ((((cbLight._m0[_2155].y * _2080) * _2208) * _2222) * _2119);
    float _2309 = (((_2284 * cbLight._m0[_2236].z) * _2297) * _2106) + ((((cbLight._m0[_2155].z * _2082) * _2208) * _2222) * _2119);
    float _2472;
    float _2474;
    float _2476;
    float _2478;
    float _2480;
    float _2482;
    if (_2087.y == 0u)
    {
        uvec4 _2427 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2428 = _2427.x;
        uint _2439 = uint((float(_2427.y) * floor(float(uint(cbSceneParam._m0[85u].y * _698) / _2428))) + floor(float(uint(cbSceneParam._m0[85u].x * _697) / _2428)));
        float _2449 = (log2(_1865 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2450 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
        uint _2453 = uint(isnan(14.0) ? _2450 : (isnan(_2450) ? 14.0 : min(_2450, 14.0)));
        uvec4 _2458 = texelFetch(g_lightClusterGridBuffer, int(((_2453 << 2u) + (_2439 << 6u)) >> 2u));
        uint _2459 = _2458.x;
        uint _2460 = _2427.z;
        float _2567;
        float _2569;
        float _2571;
        float _2573;
        float _2575;
        float _2577;
        if (((((1u << ((_2460 >> 4u) & 15u)) + 4294967295u) & _2459) == 0u) || ((_2460 & 240u) == 0u))
        {
            _2567 = 0.0;
            _2569 = 0.0;
            _2571 = 0.0;
            _2573 = 0.0;
            _2575 = 0.0;
            _2577 = 0.0;
        }
        else
        {
            float _2568;
            float _2570;
            float _2572;
            float _2574;
            float _2576;
            float _2578;
            float _2745 = 0.0;
            float _2746 = 0.0;
            float _2747 = 0.0;
            float _2748 = 0.0;
            float _2749 = 0.0;
            float _2750 = 0.0;
            uint _2751 = 0u;
            uint _2760;
            bool _2761;
            for (;;)
            {
                _2760 = texelFetch(g_lightClassification, int((((_2453 << 5u) + (_2439 << 9u)) + (_2751 << 2u)) >> 2u)).x;
                _2761 = _2760 == 0u;
                float frontier_phi_75_pred;
                float frontier_phi_75_pred_1;
                float frontier_phi_75_pred_2;
                float frontier_phi_75_pred_3;
                float frontier_phi_75_pred_4;
                float frontier_phi_75_pred_5;
                if (_2761)
                {
                    frontier_phi_75_pred = _2748;
                    frontier_phi_75_pred_1 = _2750;
                    frontier_phi_75_pred_2 = _2749;
                    frontier_phi_75_pred_3 = _2747;
                    frontier_phi_75_pred_4 = _2746;
                    frontier_phi_75_pred_5 = _2745;
                }
                else
                {
                    float _2911;
                    float _2912;
                    float _2913;
                    float _2914;
                    float _2915;
                    float _2916;
                    uint _2917;
                    _2911 = _2745;
                    _2912 = _2746;
                    _2913 = _2747;
                    _2914 = _2748;
                    _2915 = _2749;
                    _2916 = _2750;
                    _2917 = _2760;
                    float _2838;
                    float _2839;
                    float _2840;
                    float _2841;
                    float _2842;
                    float _2843;
                    for (;;)
                    {
                        uint _2921 = uint(findLSB(_2917)) + (_2751 << 5u);
                        uint _2918 = (_2917 + 4294967295u) & _2917;
                        uint _2923 = _2921 * 48u;
                        vec4 _2937 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2923)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2923 + 3u)).x));
                        uint _2943 = (_2921 * 48u) + 4u;
                        vec4 _2956 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2943)).x, texelFetch(g_PointLightRenderingBuffer, int(_2943 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2943 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2943 + 3u)).x));
                        uint _2962 = (_2921 * 48u) + 8u;
                        vec3 _2973 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2962)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2962 + 2u)).x));
                        float _2977 = _2937.x - _1863;
                        float _2978 = _2937.y - _1864;
                        float _2979 = _2937.z - _1865;
                        float _2980 = dot(vec3(_2977, _2978, _2979), vec3(_2977, _2978, _2979));
                        float _2983 = inversesqrt(_2980);
                        float _2984 = _2983 * _2977;
                        float _2985 = _2983 * _2978;
                        float _2986 = _2983 * _2979;
                        float _2987 = dot(vec3(_718, _721, _724), vec3(_2984, _2985, _2986));
                        float _2992 = 1.0 - (_2980 * _2937.w);
                        float _4280 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
                        float _2993 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
                        float _2994 = sqrt(_2980) * _2956.w;
                        float _2997 = 1.39999997615814208984375 / (_2994 + 1.39999997615814208984375);
                        float _2998 = _2997 * _2997;
                        float _3001 = ((1.0 - _2998) * _2987) + _2998;
                        float _3004 = _2994 * _2994;
                        float _3008 = ((isnan(0.0) ? _3001 : (isnan(_3001) ? 0.0 : max(_3001, 0.0))) * _2993) / ((_3004 * 0.699999988079071044921875) + 1.0);
                        float _3012 = (-0.0) - _1863;
                        float _3013 = (-0.0) - _1864;
                        float _3014 = (-0.0) - _1865;
                        float _3018 = inversesqrt(dot(vec3(_3012, _3013, _3014), vec3(_3012, _3013, _3014)));
                        float _3019 = _3018 * _3012;
                        float _3020 = _3018 * _3013;
                        float _3021 = _3018 * _3014;
                        float _3028 = exp2(log2(1.0 / ((_3004 * 3.5) + 5.0)) * 0.25);
                        float _3029 = 1.0 - _778;
                        float _3036 = sqrt(1.0 - ((1.0 - (_3029 * _3029)) * (1.0 - (_3028 * _3028))));
                        float _3037 = _3036 * _3036;
                        float _3038 = _3037 * _3037;
                        float _3039 = _3019 + _2984;
                        float _3040 = _3020 + _2985;
                        float _3041 = _3021 + _2986;
                        float _3045 = inversesqrt(dot(vec3(_3039, _3040, _3041), vec3(_3039, _3040, _3041)));
                        float _3049 = dot(vec3(_718, _721, _724), vec3(_3019, _3020, _3021));
                        float _4296 = isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0));
                        float _3052 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
                        float _3053 = dot(vec3(_718, _721, _724), vec3(_3045 * _3039, _3045 * _3040, _3045 * _3041));
                        float _4307 = isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0));
                        float _3056 = isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0));
                        float _3060 = ((_3056 * _3056) * (_3038 + (-1.0))) + 1.0;
                        float _3061 = _2997 * _3037;
                        float _3062 = _3061 * _3061;
                        float _3065 = ((1.0 - _3062) * _2987) + _3062;
                        float _4318 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
                        float _3066 = isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0));
                        float _3067 = 1.0 - _3037;
                        float _3077 = (0.5 / (((_3066 * ((_3052 * _3067) + _3037)) + 9.9999999392252902907785028219223e-09) + (((_3066 * _3067) + _3037) * _3052))) * _3066;
                        float _4329 = isnan(0.0) ? _3077 : (isnan(_3077) ? 0.0 : max(_3077, 0.0));
                        float _3088 = (((_3038 * 3.1415927410125732421875) * (isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0)))) / ((_3060 * _3060) * ((_3004 * 2.1991131305694580078125) + 3.141590118408203125))) * _2993;
                        _2841 = (_3008 * _2956.x) + _2914;
                        _2842 = (_3008 * _2956.y) + _2915;
                        _2843 = (_3008 * _2956.z) + _2916;
                        _2838 = (_3088 * _2973.x) + _2911;
                        _2839 = (_3088 * _2973.y) + _2912;
                        _2840 = (_3088 * _2973.z) + _2913;
                        if (_2918 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2911 = _2838;
                            _2912 = _2839;
                            _2913 = _2840;
                            _2914 = _2841;
                            _2915 = _2842;
                            _2916 = _2843;
                            _2917 = _2918;
                        }
                    }
                    frontier_phi_75_pred = _2841;
                    frontier_phi_75_pred_1 = _2843;
                    frontier_phi_75_pred_2 = _2842;
                    frontier_phi_75_pred_3 = _2840;
                    frontier_phi_75_pred_4 = _2839;
                    frontier_phi_75_pred_5 = _2838;
                }
                _2574 = frontier_phi_75_pred;
                _2578 = frontier_phi_75_pred_1;
                _2576 = frontier_phi_75_pred_2;
                _2572 = frontier_phi_75_pred_3;
                _2570 = frontier_phi_75_pred_4;
                _2568 = frontier_phi_75_pred_5;
                uint _2752 = _2751 + 1u;
                if (_2752 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2745 = _2568;
                    _2746 = _2570;
                    _2747 = _2572;
                    _2748 = _2574;
                    _2749 = _2576;
                    _2750 = _2578;
                    _2751 = _2752;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2567 = _2568;
            _2569 = _2570;
            _2571 = _2572;
            _2573 = _2574;
            _2575 = _2576;
            _2577 = _2578;
        }
        uvec4 _2581 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2582 = _2581.z;
        uint _2584 = (_2582 >> 8u) & 15u;
        float _2713;
        float _2715;
        float _2717;
        float _2719;
        float _2721;
        float _2723;
        if (((4294967295u << _2584) & _2459) == 0u)
        {
            _2713 = _2567;
            _2715 = _2569;
            _2717 = _2571;
            _2719 = _2573;
            _2721 = _2575;
            _2723 = _2577;
        }
        else
        {
            float _2738 = inversesqrt(dot(vec3(_1863, _1864, _1865), vec3(_1863, _1864, _1865)));
            float _2739 = _2738 * _1863;
            float _2740 = _2738 * _1864;
            float _2741 = _2738 * _1865;
            float frontier_phi_66_67_ladder;
            float frontier_phi_66_67_ladder_1;
            float frontier_phi_66_67_ladder_2;
            float frontier_phi_66_67_ladder_3;
            float frontier_phi_66_67_ladder_4;
            float frontier_phi_66_67_ladder_5;
            if (_2584 < ((_2582 >> 12u) & 15u))
            {
                float _2714;
                float _2716;
                float _2718;
                float _2720;
                float _2722;
                float _2724;
                float _2894 = _2567;
                float _2895 = _2569;
                float _2896 = _2571;
                float _2897 = _2573;
                float _2898 = _2575;
                float _2899 = _2577;
                uint _2900 = _2584;
                uint _2909;
                bool _2910;
                for (;;)
                {
                    _2909 = texelFetch(g_lightClassification, int((((_2453 << 5u) + (_2439 << 9u)) + (_2900 << 2u)) >> 2u)).x;
                    _2910 = _2909 == 0u;
                    float frontier_phi_86_pred;
                    float frontier_phi_86_pred_1;
                    float frontier_phi_86_pred_2;
                    float frontier_phi_86_pred_3;
                    float frontier_phi_86_pred_4;
                    float frontier_phi_86_pred_5;
                    if (_2910)
                    {
                        frontier_phi_86_pred = _2899;
                        frontier_phi_86_pred_1 = _2898;
                        frontier_phi_86_pred_2 = _2897;
                        frontier_phi_86_pred_3 = _2896;
                        frontier_phi_86_pred_4 = _2895;
                        frontier_phi_86_pred_5 = _2894;
                    }
                    else
                    {
                        float _3102;
                        float _3103;
                        float _3104;
                        float _3105;
                        float _3106;
                        float _3107;
                        float _3397;
                        float _3398;
                        float _3399;
                        float _3400;
                        float _3401;
                        float _3402;
                        float _3115 = _2894;
                        float _3116 = _2895;
                        float _3117 = _2896;
                        float _3118 = _2897;
                        float _3119 = _2898;
                        float _3120 = _2899;
                        uint _3121 = _2909;
                        uint _3122;
                        vec4 _3147;
                        float _3148;
                        vec4 _3163;
                        vec3 _3175;
                        vec4 _3191;
                        vec4 _3207;
                        float _3253;
                        bool _3254;
                        for (;;)
                        {
                            uint _3132 = ((_2900 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3121));
                            _3122 = (_3121 + 4294967295u) & _3121;
                            uint _3134 = _3132 * 40u;
                            _3147 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3134)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3134 + 3u)).x));
                            _3148 = _3147.w;
                            uint _3150 = (_3132 * 40u) + 4u;
                            _3163 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3150)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3150 + 3u)).x));
                            uint _3165 = (_3132 * 40u) + 8u;
                            _3175 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3165)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3165 + 2u)).x));
                            uint _3178 = (_3132 * 40u) + 16u;
                            _3191 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3178)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3178 + 3u)).x));
                            uint _3194 = (_3132 * 40u) + 20u;
                            _3207 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3194)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3194 + 3u)).x));
                            uint _3209 = (_3132 * 40u) + 24u;
                            vec4 _3222 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3209)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3209 + 3u)).x));
                            uint _3228 = (_3132 * 40u) + 28u;
                            vec4 _3241 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3228)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3228 + 3u)).x));
                            _3253 = fma(_1865, _3241.z, fma(_1864, _3241.y, _3241.x * _1863)) + _3241.w;
                            _3254 = !((fma(_1865, _3222.z, fma(_1864, _3222.y, _3222.x * _1863)) + _3222.w) <= 0.0);
                            float frontier_phi_92_pred;
                            float frontier_phi_92_pred_1;
                            float frontier_phi_92_pred_2;
                            float frontier_phi_92_pred_3;
                            float frontier_phi_92_pred_4;
                            float frontier_phi_92_pred_5;
                            if (_3254)
                            {
                                float _3281 = _3147.x - _1863;
                                float _3282 = _3147.y - _1864;
                                float _3283 = _3147.z - _1865;
                                float _3284 = dot(vec3(_3281, _3282, _3283), vec3(_3281, _3282, _3283));
                                float _3287 = inversesqrt(_3284);
                                float _3288 = _3287 * _3281;
                                float _3289 = _3287 * _3282;
                                float _3290 = _3287 * _3283;
                                float _3294 = 1.0 - (_3284 / (_3148 * _3148));
                                float _4340 = isnan(0.0) ? _3294 : (isnan(_3294) ? 0.0 : max(_3294, 0.0));
                                float _3295 = isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0));
                                float _3299 = sqrt(_3284) * _3163.w;
                                float _3301 = 1.39999997615814208984375 / (_3299 + 1.39999997615814208984375);
                                float _3302 = _3301 * _3301;
                                float _3305 = ((1.0 - _3302) * dot(vec3(_3288, _3289, _3290), vec3(_718, _721, _724))) + _3302;
                                float _3308 = _3299 * _3299;
                                float _3312 = (fma(_1865, _3191.z, fma(_1864, _3191.y, _3191.x * _1863)) + _3191.w) / _3253;
                                float _3313 = (fma(_1865, _3207.z, fma(_1864, _3207.y, _3207.x * _1863)) + _3207.w) / _3253;
                                float _3317 = 1.0 - dot(vec2(_3312, _3313), vec2(_3312, _3313));
                                float _4356 = isnan(0.0) ? _3317 : (isnan(_3317) ? 0.0 : max(_3317, 0.0));
                                float _3318 = isnan(1.0) ? _4356 : (isnan(_4356) ? 1.0 : min(_4356, 1.0));
                                float _3319 = _3318 * (((isnan(0.0) ? _3305 : (isnan(_3305) ? 0.0 : max(_3305, 0.0))) * _3295) / ((_3308 * 0.699999988079071044921875) + 1.0));
                                float _3331 = exp2(log2(1.0 / ((_3308 * 3.5) + 5.0)) * 0.25);
                                float _3332 = 1.0 - _778;
                                float _3339 = sqrt(1.0 - ((1.0 - (_3332 * _3332)) * (1.0 - (_3331 * _3331))));
                                float _3340 = _3339 * _3339;
                                float _3341 = _3340 * _3340;
                                float _3342 = _3288 - _2739;
                                float _3343 = _3289 - _2740;
                                float _3344 = _3290 - _2741;
                                float _3348 = inversesqrt(dot(vec3(_3342, _3343, _3344), vec3(_3342, _3343, _3344)));
                                float _3352 = dot(vec3(_718, _721, _724), vec3((-0.0) - _2739, (-0.0) - _2740, (-0.0) - _2741));
                                float _4367 = isnan(0.0) ? _3352 : (isnan(_3352) ? 0.0 : max(_3352, 0.0));
                                float _3355 = isnan(1.0) ? _4367 : (isnan(_4367) ? 1.0 : min(_4367, 1.0));
                                float _3356 = dot(vec3(_718, _721, _724), vec3(_3348 * _3342, _3348 * _3343, _3348 * _3344));
                                float _4378 = isnan(0.0) ? _3356 : (isnan(_3356) ? 0.0 : max(_3356, 0.0));
                                float _3359 = isnan(1.0) ? _4378 : (isnan(_4378) ? 1.0 : min(_4378, 1.0));
                                float _3363 = ((_3359 * _3359) * (_3341 + (-1.0))) + 1.0;
                                float _3364 = _3301 * _3340;
                                float _3365 = _3364 * _3364;
                                float _3371 = ((1.0 - _3365) * dot(vec3(_718, _721, _724), vec3(_3288, _3289, _3290))) + _3365;
                                float _4389 = isnan(0.0) ? _3371 : (isnan(_3371) ? 0.0 : max(_3371, 0.0));
                                float _3372 = isnan(1.0) ? _4389 : (isnan(_4389) ? 1.0 : min(_4389, 1.0));
                                float _3373 = 1.0 - _3340;
                                float _3383 = (0.5 / (((_3372 * ((_3355 * _3373) + _3340)) + 9.9999999392252902907785028219223e-09) + (((_3372 * _3373) + _3340) * _3355))) * _3372;
                                float _4400 = isnan(0.0) ? _3383 : (isnan(_3383) ? 0.0 : max(_3383, 0.0));
                                float _3393 = (_3318 * _3295) * (((_3341 * 3.1415927410125732421875) * (isnan(1.0) ? _4400 : (isnan(_4400) ? 1.0 : min(_4400, 1.0)))) / ((_3363 * _3363) * ((_3308 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_92_pred = _3319 * _3163.z;
                                frontier_phi_92_pred_1 = _3319 * _3163.y;
                                frontier_phi_92_pred_2 = _3319 * _3163.x;
                                frontier_phi_92_pred_3 = _3393 * _3175.z;
                                frontier_phi_92_pred_4 = _3393 * _3175.y;
                                frontier_phi_92_pred_5 = _3393 * _3175.x;
                            }
                            else
                            {
                                frontier_phi_92_pred = 0.0;
                                frontier_phi_92_pred_1 = 0.0;
                                frontier_phi_92_pred_2 = 0.0;
                                frontier_phi_92_pred_3 = 0.0;
                                frontier_phi_92_pred_4 = 0.0;
                                frontier_phi_92_pred_5 = 0.0;
                            }
                            _3402 = frontier_phi_92_pred;
                            _3401 = frontier_phi_92_pred_1;
                            _3400 = frontier_phi_92_pred_2;
                            _3399 = frontier_phi_92_pred_3;
                            _3398 = frontier_phi_92_pred_4;
                            _3397 = frontier_phi_92_pred_5;
                            _3105 = _3400 + _3118;
                            _3106 = _3401 + _3119;
                            _3107 = _3402 + _3120;
                            _3102 = _3397 + _3115;
                            _3103 = _3398 + _3116;
                            _3104 = _3399 + _3117;
                            if (_3122 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3115 = _3102;
                                _3116 = _3103;
                                _3117 = _3104;
                                _3118 = _3105;
                                _3119 = _3106;
                                _3120 = _3107;
                                _3121 = _3122;
                                continue;
                            }
                        }
                        frontier_phi_86_pred = _3107;
                        frontier_phi_86_pred_1 = _3106;
                        frontier_phi_86_pred_2 = _3105;
                        frontier_phi_86_pred_3 = _3104;
                        frontier_phi_86_pred_4 = _3103;
                        frontier_phi_86_pred_5 = _3102;
                    }
                    _2724 = frontier_phi_86_pred;
                    _2722 = frontier_phi_86_pred_1;
                    _2720 = frontier_phi_86_pred_2;
                    _2718 = frontier_phi_86_pred_3;
                    _2716 = frontier_phi_86_pred_4;
                    _2714 = frontier_phi_86_pred_5;
                    uint _2901 = _2900 + 1u;
                    if (_2901 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2894 = _2714;
                        _2895 = _2716;
                        _2896 = _2718;
                        _2897 = _2720;
                        _2898 = _2722;
                        _2899 = _2724;
                        _2900 = _2901;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_66_67_ladder = _2720;
                frontier_phi_66_67_ladder_1 = _2724;
                frontier_phi_66_67_ladder_2 = _2722;
                frontier_phi_66_67_ladder_3 = _2718;
                frontier_phi_66_67_ladder_4 = _2716;
                frontier_phi_66_67_ladder_5 = _2714;
            }
            else
            {
                frontier_phi_66_67_ladder = _2573;
                frontier_phi_66_67_ladder_1 = _2577;
                frontier_phi_66_67_ladder_2 = _2575;
                frontier_phi_66_67_ladder_3 = _2571;
                frontier_phi_66_67_ladder_4 = _2569;
                frontier_phi_66_67_ladder_5 = _2567;
            }
            _2713 = frontier_phi_66_67_ladder_5;
            _2715 = frontier_phi_66_67_ladder_4;
            _2717 = frontier_phi_66_67_ladder_3;
            _2719 = frontier_phi_66_67_ladder;
            _2721 = frontier_phi_66_67_ladder_2;
            _2723 = frontier_phi_66_67_ladder_1;
        }
        float _2728 = isnan(1.0) ? _762 : (isnan(_762) ? 1.0 : min(_762, 1.0));
        _2472 = (_2728 * _2719) + _2151;
        _2474 = (_2728 * _2721) + _2152;
        _2476 = (_2728 * _2723) + _2153;
        _2478 = ((_2713 * 0.039999999105930328369140625) * _2728) + _2307;
        _2480 = ((_2715 * 0.039999999105930328369140625) * _2728) + _2308;
        _2482 = ((_2717 * 0.039999999105930328369140625) * _2728) + _2309;
    }
    else
    {
        _2472 = _2151;
        _2474 = _2152;
        _2476 = _2153;
        _2478 = _2307;
        _2480 = _2308;
        _2482 = _2309;
    }
    float _4416 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _4427 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _4438 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _2499 = ((isnan(1.0) ? _4416 : (isnan(_4416) ? 1.0 : min(_4416, 1.0))) * (_2472 + ((isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))) * _762))) + ((_2478 + ((isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0))) * _1598)) * cbPerFrame._m0[3u].x);
    float _2500 = ((isnan(1.0) ? _4427 : (isnan(_4427) ? 1.0 : min(_4427, 1.0))) * (_2474 + ((isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0))) * _762))) + ((_2480 + ((isnan(0.0) ? _1813 : (isnan(_1813) ? 0.0 : max(_1813, 0.0))) * _1598)) * cbPerFrame._m0[3u].x);
    float _2501 = ((isnan(1.0) ? _4438 : (isnan(_4438) ? 1.0 : min(_4438, 1.0))) * (_2476 + ((isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0))) * _762))) + ((_2482 + ((isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0))) * _1598)) * cbPerFrame._m0[3u].x);
    float _2502 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
    float _2503 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0));
    float _2504 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
    uint _2505 = _737 + 6u;
    float _2513 = _697 / cbSceneParam._m0[86u].x;
    float _2514 = _698 / cbSceneParam._m0[86u].y;
    vec4 _2528 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2513, _2514, (log2((isnan(cbSceneParam._m0[77u].w) ? _666 : (isnan(_666) ? cbSceneParam._m0[77u].w : min(_666, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2530 = _2528.x;
    float _2531 = _2528.y;
    float _2532 = _2528.z;
    float _2533 = _2528.w;
    float _2629;
    float _2631;
    float _2633;
    float _2635;
    if (_666 > cbSceneParam._m0[78u].w)
    {
        float _2592 = isnan(_666) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _666 : min(cbSceneParam._m0[80u].w, _666));
        float _2593 = _2592 / _666;
        float _2604 = _2593 * _281;
        float _2605 = _282 * _2593;
        float _2606 = (-0.0) - _2605;
        float _2607 = _2593 * _283;
        float _2609 = (cbSceneParam._m0[77u].w * _2606) / _2592;
        float _2610 = _2609 + cbSceneParam._m0[79u].w;
        float _2611 = cbSceneParam._m0[79u].w - _2605;
        float _2617 = sqrt(((_2604 * _2604) + (_2605 * _2605)) + (_2607 * _2607));
        float _2620 = (1.0 - (cbSceneParam._m0[77u].w / _2592)) * _2617;
        float _2625 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2627 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2851;
        if (abs((_2606 - _2609) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2851 = ((((_2610 > 0.0) ? exp2(_2625 * _2610) : (2.0 - exp2(_2627 * _2610))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2620;
        }
        else
        {
            float _2774 = 1.0 / cbSceneParam._m0[80u].x;
            float _2775 = isnan(_2611) ? _2610 : (isnan(_2610) ? _2611 : max(_2610, _2611));
            float _2776 = isnan(_2611) ? _2610 : (isnan(_2610) ? _2611 : min(_2610, _2611));
            float _2785 = isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : min(_2775, 0.0));
            float _2786 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : min(_2776, 0.0));
            _2851 = ((abs(_2617 / _2606) * cbSceneParam._m0[80u].y) * ((((_2785 - _2786) * 2.0) - ((exp2(_2625 * (isnan(0.0) ? _2775 : (isnan(_2775) ? 0.0 : max(_2775, 0.0)))) - exp2(_2625 * (isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0))))) * _2774)) - ((exp2(_2627 * _2785) - exp2(_2627 * _2786)) * _2774))) + (_2620 * cbSceneParam._m0[80u].z);
        }
        vec4 _2853 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2513, _2514, 1.0), 0.0);
        float _2862 = exp2((_2851 * (-1.44269502162933349609375)) * (1.0 - _2853.w));
        float _2863 = log2(_2862);
        float _2879 = log2(_2533);
        _2629 = (exp2(_2879 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2863 * cbSceneParam._m0[78u].x)) * _2853.x) / cbSceneParam._m0[78u].x)) + _2530;
        _2631 = (exp2(_2879 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2863 * cbSceneParam._m0[78u].y)) * _2853.y) / cbSceneParam._m0[78u].y)) + _2531;
        _2633 = (exp2(_2879 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2863 * cbSceneParam._m0[78u].z)) * _2853.z) / cbSceneParam._m0[78u].z)) + _2532;
        _2635 = _2862 * _2533;
    }
    else
    {
        _2629 = _2530;
        _2631 = _2531;
        _2633 = _2532;
        _2635 = _2533;
    }
    bool _2889;
    vec4 _2645;
    vec4 _2667;
    float _2669;
    float _2673;
    float _2674;
    float _2675;
    float _2676;
    bool _2686;
    for (;;)
    {
        _2645 = cbMatDynParam._m0[0u];
        float _2647 = roundEven(_2645.y);
        bool _2648 = _2647 == 3.0;
        float _2649 = log2(_2635);
        float _2656 = exp2(_2649 * cbSceneParam._m0[78u].x) * _2502;
        float _2657 = exp2(_2649 * cbSceneParam._m0[78u].y) * _2503;
        float _2658 = exp2(_2649 * cbSceneParam._m0[78u].z) * _2504;
        float _2665 = _680 + (-0.5);
        _2667 = cbMtdParam._m0[1u];
        _2669 = _2667.y * _2665;
        float _2672 = (_2647 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2673 = _2672 * (_2648 ? _2656 : (_2656 + (cbSceneParam._m0[72u].w * _2629)));
        _2674 = _2672 * (_2648 ? _2657 : (_2657 + (cbSceneParam._m0[72u].w * _2631)));
        _2675 = _2672 * (_2648 ? _2658 : (_2658 + (cbSceneParam._m0[72u].w * _2633)));
        _2676 = _2665 * 0.999000012874603271484375;
        _2686 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2686)
        {
            if ((cbInstanceData._m0[_737 + 7u].x + _2676) < 0.5)
            {
                _2889 = true;
                break;
            }
        }
        uint _2809 = _738 + uint(_2645.w);
        if ((cbInstanceData._m0[_2809].w < 1.0) && ((cbInstanceData._m0[_2809].w + _2676) < 0.5))
        {
            _2889 = true;
            break;
        }
        if ((_2669 + 1.0) < _2667.x)
        {
            _2889 = true;
            break;
        }
        _2889 = false;
        break;
    }
    float _3093;
    if (_2889)
    {
        discard_state = true;
        _3093 = 0.0;
    }
    else
    {
        _3093 = cbInstanceData._m0[_2505].w;
    }
    SV_Target.x = _2673;
    SV_Target.y = _2674;
    SV_Target.z = _2675;
    SV_Target.w = _3093;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2505].w;
    discard_exit();
}


