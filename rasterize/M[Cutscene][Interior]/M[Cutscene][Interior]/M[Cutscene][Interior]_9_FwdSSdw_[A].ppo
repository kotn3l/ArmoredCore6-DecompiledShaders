#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_12;
layout(set = 0, binding = 3) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _457;
float _3317;
float _3318;
float _3319;
float _3320;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _208 = _207 * _200;
    float _209 = _207 * _201;
    float _210 = _207 * _202;
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _215 = _214 * NORMAL.x;
    float _216 = _214 * NORMAL.y;
    float _217 = _214 * NORMAL.z;
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _222 = _221 * TANGENT.x;
    float _223 = _221 * TANGENT.y;
    float _224 = _221 * TANGENT.z;
    float _269 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _279 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _269);
    float _280 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _269);
    float _281 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _269);
    vec4 _294 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _297 = _294.x;
    vec4 _315 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _332 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _297) + cbMtdParam._m0[12u].x) * _315.x;
    float _334 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _297) + cbMtdParam._m0[12u].y) * _315.y;
    float _336 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _297) + cbMtdParam._m0[12u].z) * _315.z;
    vec4 _370 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _385 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _392 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _404 = cbMtdParam._m0[24u].w + _279;
    float _405 = cbMtdParam._m0[25u].x + _280;
    float _406 = cbMtdParam._m0[25u].y + _281;
    float _420 = (-0.0) - dot(vec3(_404, _405, _406), vec3(_385 * _208, _385 * _209, _385 * _210));
    float _421 = (-0.0) - dot(vec3(_404, _405, _406), vec3(_392 * _222, _392 * _223, _392 * _224));
    float _422 = (-0.0) - dot(vec3(_404, _405, _406), vec3((-0.0) - _215, (-0.0) - _216, (-0.0) - _217));
    float _426 = inversesqrt(dot(vec3(_420, _421, _422), vec3(_420, _421, _422)));
    float _427 = _426 * _422;
    float _432 = ((cbMtdParam._m0[21u].z * _420) * _426) + (((_370.x * 2.0) + (-1.0)) * cbMtdParam._m0[22u].x);
    float _433 = ((cbMtdParam._m0[21u].w * _421) * _426) + (((_370.y * 2.0) + (-1.0)) * cbMtdParam._m0[22u].y);
    float _436 = fract(cbMtdParam._m0[21u].z * TEXCOORD.x);
    float _437 = fract(cbMtdParam._m0[21u].w * TEXCOORD.y);
    float _455;
    float _458;
    float _460;
    if (_432 > 0.0)
    {
        float _441 = (1.0 - _436) / _432;
        _455 = _441;
        _458 = ((cbMtdParam._m0[18u].w + 1.0) - fract(_441 * _427)) * 0.16666667163372039794921875;
        _460 = (fract((_441 * _433) + _437) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_432 < 0.0)
        {
            float _456 = ((-0.0) - _436) / _432;
            frontier_phi_3_2_ladder = _456;
            frontier_phi_3_2_ladder_1 = (fract((_456 * _433) + _437) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_2 = (fract(_456 * _427) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = _457;
            frontier_phi_3_2_ladder_1 = 0.0;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _455 = frontier_phi_3_2_ladder;
        _458 = frontier_phi_3_2_ladder_2;
        _460 = frontier_phi_3_2_ladder_1;
    }
    float _486;
    float _488;
    float _490;
    if (_433 > 0.0)
    {
        float _473 = (1.0 - _437) / _433;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_473 < _455)
        {
            frontier_phi_8_5_ladder = (fract(_473 * _427) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_473 * _432) + _436) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _473;
        }
        else
        {
            frontier_phi_8_5_ladder = _460;
            frontier_phi_8_5_ladder_1 = _458;
            frontier_phi_8_5_ladder_2 = _455;
        }
        _486 = frontier_phi_8_5_ladder_2;
        _488 = frontier_phi_8_5_ladder_1;
        _490 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_433 < 0.0)
        {
            float _487 = ((-0.0) - _437) / _433;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_487 < _455)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_487 * _427) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_487 * _432) + _436) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _487;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _460;
                frontier_phi_8_6_ladder_9_ladder_1 = _458;
                frontier_phi_8_6_ladder_9_ladder_2 = _455;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _460;
            frontier_phi_8_6_ladder_1 = _458;
            frontier_phi_8_6_ladder_2 = _455;
        }
        _486 = frontier_phi_8_6_ladder_2;
        _488 = frontier_phi_8_6_ladder_1;
        _490 = frontier_phi_8_6_ladder;
    }
    float _494 = (_427 > 0.0) ? (cbMtdParam._m0[18u].z / _427) : 5000.0;
    float _507;
    float _508;
    if (_494 < _486)
    {
        _507 = ((_436 + cbMtdParam._m0[18u].w) + (_494 * _432)) * 0.16666667163372039794921875;
        _508 = (((_494 * _433) + _437) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _507 = _488;
        _508 = _490;
    }
    vec4 _510 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_507, _508));
    float _3329 = isnan(0.0) ? cbMtdParam._m0[17u].z : (isnan(cbMtdParam._m0[17u].z) ? 0.0 : max(cbMtdParam._m0[17u].z, 0.0));
    float _524 = isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0));
    float _3340 = isnan(0.0) ? cbMtdParam._m0[17u].y : (isnan(cbMtdParam._m0[17u].y) ? 0.0 : max(cbMtdParam._m0[17u].y, 0.0));
    float _567 = ((_524 - ((1.0 - (isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0)))) * (_524 + 1.0))) + (((cbMtdParam._m0[18u].y * texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[3u].w)).x) + (cbMtdParam._m0[17u].x * texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w)).x)) / cbMtdParam._m0[17u].w)) / _524;
    float _3351 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _568 = isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0));
    float _570 = 3.0 - (_568 * 2.0);
    float _575 = _568 * _568;
    vec4 _597 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _601 = _597.z;
    float _604 = (_597.x * 2.0) + (-1.0);
    float _605 = (_597.y * 2.0) + (-1.0);
    float _606 = dot(vec2(_604, _605), vec2(_604, _605));
    float _3362 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _611 = sqrt(1.0 - (isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0))));
    float _614 = fma(_611, _215, fma(_605, _222, _604 * _208));
    float _617 = fma(_611, _216, fma(_605, _223, _604 * _209));
    float _620 = fma(_611, _217, fma(_605, _224, _604 * _210));
    float _624 = inversesqrt(dot(vec3(_614, _617, _620), vec3(_614, _617, _620)));
    float _625 = _624 * _614;
    float _626 = _624 * _617;
    float _627 = _624 * _620;
    float _3373 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _628 = isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0));
    float _3384 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _3395 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _3406 = isnan(0.0) ? _336 : (isnan(_336) ? 0.0 : max(_336, 0.0));
    float _647 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _651 = inversesqrt(dot(vec3(_279, _280, _281), vec3(_279, _280, _281)));
    float _652 = _279 * _651;
    float _653 = _280 * _651;
    float _654 = _281 * _651;
    vec4 _659 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _661 = _659.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _822 = sqrt(((_279 * _279) + (_280 * _280)) + (_281 * _281));
        float _828 = (cbMatDynParam._m0[5u].x * _822) + cbMatDynParam._m0[5u].y;
        float _3417 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _829 = isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0));
        float _833 = (cbMatDynParam._m0[5u].z * _822) + cbMatDynParam._m0[5u].w;
        float _3428 = isnan(0.0) ? _833 : (isnan(_833) ? 0.0 : max(_833, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0))) - _829)) + _829) < ((_661 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _678 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _679 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _699 = fma(_627, cbSceneParam._m0[5u].z, fma(_626, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _625));
    float _702 = fma(_627, cbSceneParam._m0[6u].z, fma(_626, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _625));
    float _705 = fma(_627, cbSceneParam._m0[7u].z, fma(_626, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _625));
    uint _718 = uint(roundEven(NORMAL.w)) * 13u;
    uint _719 = _718 + 9u;
    uint _720 = _719 + uint(cbMatDynParam._m0[0u].w);
    float _726 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0)))) * cbInstanceData._m0[_720].x;
    float _727 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0)))) * cbInstanceData._m0[_720].y;
    float _728 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0)))) * cbInstanceData._m0[_720].z;
    float _3439 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _729 = isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0));
    float _3450 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _730 = isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0));
    float _3461 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _731 = isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0));
    vec4 _740 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _678, cbSceneParam._m0[86u].y * _679));
    float _743 = _740.x * TEXCOORD_4.z;
    float _744 = dot(vec3(_625, _626, _627), vec3(_652, _653, _654));
    float _747 = _744 * 2.0;
    float _751 = (_747 * _625) - _652;
    float _752 = (_747 * _626) - _653;
    float _753 = (_747 * _627) - _654;
    float _757 = abs(dot(vec3(_652, _653, _654), vec3(_625, _626, _627)));
    float _3472 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _759 = sqrt(_628);
    float _771 = exp2((_759 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_759 * 3.0));
    float _803 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _807 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _811 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    float _1154;
    float _1155;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _867 = fma(_811, cbModelParam._m0[26u].z, fma(_807, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _803));
        float _871 = fma(_811, cbModelParam._m0[27u].z, fma(_807, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _803));
        float _875 = fma(_811, cbModelParam._m0[28u].z, fma(_807, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _803));
        float _899 = _803 + _625;
        float _900 = _807 + _626;
        float _901 = _811 + _627;
        float _911 = fma(_901, cbModelParam._m0[26u].z, fma(_900, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _899)) - _867;
        float _912 = fma(_901, cbModelParam._m0[27u].z, fma(_900, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _899)) - _871;
        float _913 = fma(_901, cbModelParam._m0[28u].z, fma(_900, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _899)) - _875;
        float _917 = inversesqrt(dot(vec3(_911, _912, _913), vec3(_911, _912, _913)));
        float _930 = ((_917 * _911) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_867 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _931 = ((_917 * _912) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_871 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _932 = ((_917 * _913) / cbModelParam._m0[34u].z) + ((((((_875 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _935 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_930, _931, _932), 0.0);
        vec4 _942 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_930, _931, _932), 0.0);
        vec4 _949 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_930, _931, _932), 0.0);
        vec4 _956 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_930, _931, _932), 0.0);
        float _969 = exp2((_935.w + (-0.5)) * 20.0) * 2.0;
        float _970 = _969 * (_935.x + (-0.5));
        float _971 = _969 * (_935.y + (-0.5));
        float _972 = _969 * (_935.z + (-0.5));
        float _979 = exp2((_942.w + (-0.5)) * 20.0) * 2.0;
        float _980 = _979 * (_942.x + (-0.5));
        float _981 = _979 * (_942.y + (-0.5));
        float _982 = _979 * (_942.z + (-0.5));
        float _989 = exp2((_949.w + (-0.5)) * 20.0) * 2.0;
        float _990 = _989 * (_949.x + (-0.5));
        float _991 = _989 * (_949.y + (-0.5));
        float _992 = _989 * (_949.z + (-0.5));
        float _999 = exp2((_956.w + (-0.5)) * 20.0) * 2.0;
        float _1000 = _999 * (_956.x + (-0.5));
        float _1001 = _999 * (_956.y + (-0.5));
        float _1002 = _999 * (_956.z + (-0.5));
        float _1003 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1004 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1005 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1006 = _970 * 0.5;
        float _1007 = _980 * 0.5;
        float _1008 = _990 * 0.5;
        float _1009 = dot(vec3(_1006, _1007, _1008), vec3(_1006, _1007, _1008));
        float _1014 = (_1009 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1009);
        float _1023 = (dot(vec3(_625, _626, _627), vec3(_1014 * _1006, _1014 * _1007, _1014 * _1008)) + 1.0) * 0.5;
        float _3498 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1033 = sqrt(((_1007 * _1007) + (_1006 * _1006)) + (_1008 * _1008)) / (_1003 + 9.9999997473787516355514526367188e-06);
        float _3509 = isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0));
        float _1034 = isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0));
        float _1035 = _1034 * 2.0;
        float _1039 = (1.0 - _1034) / (_1034 + 1.0);
        float _3520 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1040 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
        float _1049 = ((((1.0 - _1040) * (_1035 + 2.0)) * exp2(log2(isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0))) * (_1035 + 1.0))) + _1040) * _1003;
        float _1050 = _971 * 0.5;
        float _1051 = _981 * 0.5;
        float _1052 = _991 * 0.5;
        float _1053 = dot(vec3(_1050, _1051, _1052), vec3(_1050, _1051, _1052));
        float _1058 = (_1053 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1053);
        float _1066 = (dot(vec3(_625, _626, _627), vec3(_1058 * _1050, _1058 * _1051, _1058 * _1052)) + 1.0) * 0.5;
        float _3531 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1075 = sqrt(((_1051 * _1051) + (_1050 * _1050)) + (_1052 * _1052)) / (_1004 + 9.9999997473787516355514526367188e-06);
        float _3542 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
        float _1077 = _1076 * 2.0;
        float _1081 = (1.0 - _1076) / (_1076 + 1.0);
        float _3553 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1082 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
        float _1091 = ((((1.0 - _1082) * (_1077 + 2.0)) * exp2(log2(isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0))) * (_1077 + 1.0))) + _1082) * _1004;
        float _1092 = _972 * 0.5;
        float _1093 = _982 * 0.5;
        float _1094 = _992 * 0.5;
        float _1095 = dot(vec3(_1092, _1093, _1094), vec3(_1092, _1093, _1094));
        float _1100 = (_1095 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1095);
        float _1108 = (dot(vec3(_625, _626, _627), vec3(_1100 * _1092, _1100 * _1093, _1100 * _1094)) + 1.0) * 0.5;
        float _3564 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1117 = sqrt(((_1093 * _1093) + (_1092 * _1092)) + (_1094 * _1094)) / (_1005 + 9.9999997473787516355514526367188e-06);
        float _3575 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
        float _1119 = _1118 * 2.0;
        float _1123 = (1.0 - _1118) / (_1118 + 1.0);
        float _3586 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1124 = isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0));
        float _1133 = ((((1.0 - _1124) * (_1119 + 2.0)) * exp2(log2(isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0))) * (_1119 + 1.0))) + _1124) * _1005;
        _1141 = _972;
        _1142 = _971;
        _1143 = _970;
        _1144 = _982;
        _1145 = _981;
        _1146 = _980;
        _1147 = _992;
        _1148 = _991;
        _1149 = _990;
        _1150 = _1005;
        _1151 = _1004;
        _1152 = _1003;
        _1153 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0)));
        _1154 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0)));
        _1155 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0)));
    }
    else
    {
        _1141 = _457;
        _1142 = _457;
        _1143 = _457;
        _1144 = _457;
        _1145 = _457;
        _1146 = _457;
        _1147 = _457;
        _1148 = _457;
        _1149 = _457;
        _1150 = _457;
        _1151 = _457;
        _1152 = _457;
        _1153 = 0.0;
        _1154 = 0.0;
        _1155 = 0.0;
    }
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    float _1466;
    float _1467;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1184 = fma(_811, cbModelParam._m0[30u].z, fma(_807, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _803));
        float _1188 = fma(_811, cbModelParam._m0[31u].z, fma(_807, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _803));
        float _1192 = fma(_811, cbModelParam._m0[32u].z, fma(_807, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _803));
        float _1215 = _803 + _625;
        float _1216 = _807 + _626;
        float _1217 = _811 + _627;
        float _1227 = fma(_1217, cbModelParam._m0[30u].z, fma(_1216, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1215)) - _1184;
        float _1228 = fma(_1217, cbModelParam._m0[31u].z, fma(_1216, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1215)) - _1188;
        float _1229 = fma(_1217, cbModelParam._m0[32u].z, fma(_1216, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1215)) - _1192;
        float _1233 = inversesqrt(dot(vec3(_1227, _1228, _1229), vec3(_1227, _1228, _1229)));
        float _1246 = ((_1233 * _1227) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1184 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1247 = ((_1233 * _1228) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1188 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1248 = ((_1233 * _1229) / cbModelParam._m0[35u].z) + ((((((_1192 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1250 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1246, _1247, _1248), 0.0);
        vec4 _1257 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1246, _1247, _1248), 0.0);
        vec4 _1264 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1246, _1247, _1248), 0.0);
        vec4 _1271 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1246, _1247, _1248), 0.0);
        float _1283 = exp2((_1250.w + (-0.5)) * 20.0) * 2.0;
        float _1284 = _1283 * (_1250.x + (-0.5));
        float _1285 = _1283 * (_1250.y + (-0.5));
        float _1286 = _1283 * (_1250.z + (-0.5));
        float _1293 = exp2((_1257.w + (-0.5)) * 20.0) * 2.0;
        float _1294 = _1293 * (_1257.x + (-0.5));
        float _1295 = _1293 * (_1257.y + (-0.5));
        float _1296 = _1293 * (_1257.z + (-0.5));
        float _1303 = exp2((_1264.w + (-0.5)) * 20.0) * 2.0;
        float _1304 = _1303 * (_1264.x + (-0.5));
        float _1305 = _1303 * (_1264.y + (-0.5));
        float _1306 = _1303 * (_1264.z + (-0.5));
        float _1313 = exp2((_1271.w + (-0.5)) * 20.0) * 2.0;
        float _1314 = _1313 * (_1271.x + (-0.5));
        float _1315 = _1313 * (_1271.y + (-0.5));
        float _1316 = _1313 * (_1271.z + (-0.5));
        float _1317 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1318 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
        float _1319 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1320 = _1284 * 0.5;
        float _1321 = _1294 * 0.5;
        float _1322 = _1304 * 0.5;
        float _1323 = dot(vec3(_1320, _1321, _1322), vec3(_1320, _1321, _1322));
        float _1328 = (_1323 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1323);
        float _1336 = (dot(vec3(_625, _626, _627), vec3(_1328 * _1320, _1328 * _1321, _1328 * _1322)) + 1.0) * 0.5;
        float _3627 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1345 = sqrt(((_1321 * _1321) + (_1320 * _1320)) + (_1322 * _1322)) / (_1317 + 9.9999997473787516355514526367188e-06);
        float _3638 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1346 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
        float _1347 = _1346 * 2.0;
        float _1351 = (1.0 - _1346) / (_1346 + 1.0);
        float _3649 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1352 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
        float _1361 = ((((1.0 - _1352) * (_1347 + 2.0)) * exp2(log2(isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0))) * (_1347 + 1.0))) + _1352) * _1317;
        float _1362 = _1285 * 0.5;
        float _1363 = _1295 * 0.5;
        float _1364 = _1305 * 0.5;
        float _1365 = dot(vec3(_1362, _1363, _1364), vec3(_1362, _1363, _1364));
        float _1370 = (_1365 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1365);
        float _1378 = (dot(vec3(_625, _626, _627), vec3(_1370 * _1362, _1370 * _1363, _1370 * _1364)) + 1.0) * 0.5;
        float _3660 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1387 = sqrt(((_1363 * _1363) + (_1362 * _1362)) + (_1364 * _1364)) / (_1318 + 9.9999997473787516355514526367188e-06);
        float _3671 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1388 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
        float _1389 = _1388 * 2.0;
        float _1393 = (1.0 - _1388) / (_1388 + 1.0);
        float _3682 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1394 = isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0));
        float _1403 = ((((1.0 - _1394) * (_1389 + 2.0)) * exp2(log2(isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0))) * (_1389 + 1.0))) + _1394) * _1318;
        float _1404 = _1286 * 0.5;
        float _1405 = _1296 * 0.5;
        float _1406 = _1306 * 0.5;
        float _1407 = dot(vec3(_1404, _1405, _1406), vec3(_1404, _1405, _1406));
        float _1412 = (_1407 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1407);
        float _1420 = (dot(vec3(_625, _626, _627), vec3(_1412 * _1404, _1412 * _1405, _1412 * _1406)) + 1.0) * 0.5;
        float _3693 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1429 = sqrt(((_1405 * _1405) + (_1404 * _1404)) + (_1406 * _1406)) / (_1319 + 9.9999997473787516355514526367188e-06);
        float _3704 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1430 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
        float _1431 = _1430 * 2.0;
        float _1435 = (1.0 - _1430) / (_1430 + 1.0);
        float _3715 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1436 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
        float _1445 = ((((1.0 - _1436) * (_1431 + 2.0)) * exp2(log2(isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0))) * (_1431 + 1.0))) + _1436) * _1319;
        _1453 = _1286;
        _1454 = _1285;
        _1455 = _1284;
        _1456 = _1296;
        _1457 = _1295;
        _1458 = _1294;
        _1459 = _1306;
        _1460 = _1305;
        _1461 = _1304;
        _1462 = _1319;
        _1463 = _1318;
        _1464 = _1317;
        _1465 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0)));
        _1466 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0)));
        _1467 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0)));
    }
    else
    {
        _1453 = _457;
        _1454 = _457;
        _1455 = _457;
        _1456 = _457;
        _1457 = _457;
        _1458 = _457;
        _1459 = _457;
        _1460 = _457;
        _1461 = _457;
        _1462 = _457;
        _1463 = _457;
        _1464 = _457;
        _1465 = 0.0;
        _1466 = 0.0;
        _1467 = 0.0;
    }
    float _1477 = (cbModelParam._m0[1u].x * (_1465 - _1153)) + _1153;
    float _1478 = (cbModelParam._m0[1u].x * (_1466 - _1154)) + _1154;
    float _1479 = (cbModelParam._m0[1u].x * (_1467 - _1155)) + _1155;
    float _1500 = fma(_1479, cbSceneParam._m0[89u].z, fma(_1478, cbSceneParam._m0[89u].y, _1477 * cbSceneParam._m0[89u].x));
    float _1503 = fma(_1479, cbSceneParam._m0[90u].z, fma(_1478, cbSceneParam._m0[90u].y, _1477 * cbSceneParam._m0[90u].x));
    float _1506 = fma(_1479, cbSceneParam._m0[91u].z, fma(_1478, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1477));
    float _1521 = _751 * 0.5;
    float _1522 = _752 * 0.5;
    float _1523 = _753 * 0.5;
    float _1524 = dot(vec4(_1521, _1522, _1523, 1.0), vec4(_1455, _1458, _1461, _1464));
    float _1527 = dot(vec4(_1521, _1522, _1523, 1.0), vec4(_1454, _1457, _1460, _1463));
    float _1530 = dot(vec4(_1521, _1522, _1523, 1.0), vec4(_1453, _1456, _1459, _1462));
    float _1564;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1537 = dot(vec4(_1521, _1522, _1523, 1.0), vec4(_1141, _1144, _1147, _1150));
        float _1541 = dot(vec4(_1521, _1522, _1523, 1.0), vec4(_1142, _1145, _1148, _1151));
        float _1545 = dot(vec4(_1521, _1522, _1523, 1.0), vec4(_1143, _1146, _1149, _1152));
        float _1552 = dot(vec4(cbModelParam._m0[39u]), vec4(_1521, _1522, _1523, 1.0));
        _1564 = dot(vec3(isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0)), isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0)), isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1552) ? 0.0 : (isnan(0.0) ? _1552 : max(0.0, _1552))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1564 = 1.0;
    }
    float _1575;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1566 = dot(vec4(cbModelParam._m0[40u]), vec4(_1521, _1522, _1523, 1.0));
        _1575 = dot(vec3(isnan(0.0) ? _1524 : (isnan(_1524) ? 0.0 : max(_1524, 0.0)), isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0)), isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1566) ? 0.0 : (isnan(0.0) ? _1566 : max(0.0, _1566))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1575 = 1.0;
    }
    float _1579 = (_1575 * cbModelParam._m0[1u].x) + (_1564 * (1.0 - cbModelParam._m0[1u].x));
    float _1589 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _628);
    float _1590 = isnan(_1589) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1589 : min(cbModelParam._m0[25u].z, _1589));
    float _1671;
    float _1673;
    float _1675;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1638 = fma(_811, cbModelParam._m0[13u].z, fma(_807, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _803)) + cbModelParam._m0[13u].w;
        float _1642 = fma(_811, cbModelParam._m0[14u].z, fma(_807, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _803)) + cbModelParam._m0[14u].w;
        float _1646 = fma(_811, cbModelParam._m0[15u].z, fma(_807, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _803)) + cbModelParam._m0[15u].w;
        float _1649 = fma(_753, cbModelParam._m0[13u].z, fma(_752, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _751));
        float _1652 = fma(_753, cbModelParam._m0[14u].z, fma(_752, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _751));
        float _1655 = fma(_753, cbModelParam._m0[15u].z, fma(_752, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _751));
        float _1683;
        if (_1649 > 0.0)
        {
            _1683 = abs((1.0 - _1638) / _1649);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_1649 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_1638 + 1.0) / _1649);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1683 = frontier_phi_29_27_ladder;
        }
        float _2053;
        if (_1652 > 0.0)
        {
            _2053 = abs((1.0 - _1642) / _1652);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1652 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1642 + 1.0) / _1652);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _2053 = frontier_phi_38_34_ladder;
        }
        float _2383;
        if (_1655 > 0.0)
        {
            _2383 = abs((1.0 - _1646) / _1655);
        }
        else
        {
            float frontier_phi_52_45_ladder;
            if (_1655 < 0.0)
            {
                frontier_phi_52_45_ladder = abs((_1646 + 1.0) / _1655);
            }
            else
            {
                frontier_phi_52_45_ladder = 5000.0;
            }
            _2383 = frontier_phi_52_45_ladder;
        }
        float _2385 = isnan(_2053) ? _1683 : (isnan(_1683) ? _2053 : min(_1683, _2053));
        float _2386 = isnan(_2383) ? _2385 : (isnan(_2385) ? _2383 : min(_2385, _2383));
        float _2390 = (_2386 * _1649) + _1638;
        float _2391 = (_2386 * _1652) + _1642;
        float _2392 = (_2386 * _1655) + _1646;
        float _2393 = _2386 * 9.9999997473787516355514526367188e-05;
        float _2394 = (-1.0) - _2393;
        float _2396 = _2393 + 1.0;
        float frontier_phi_28_52_ladder;
        float frontier_phi_28_52_ladder_1;
        float frontier_phi_28_52_ladder_2;
        if ((_2392 > _2396) || ((_2392 < _2394) || ((_2391 > _2396) || ((_2391 < _2394) || ((_2390 < _2394) || (_2390 > _2396))))))
        {
            frontier_phi_28_52_ladder = 0.0;
            frontier_phi_28_52_ladder_1 = 0.0;
            frontier_phi_28_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2534 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2392, cbModelParam._m0[9u].z, fma(_2391, cbModelParam._m0[9u].y, _2390 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2392, cbModelParam._m0[10u].z, fma(_2391, cbModelParam._m0[10u].y, _2390 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2392, cbModelParam._m0[11u].z, fma(_2391, cbModelParam._m0[11u].y, _2390 * cbModelParam._m0[11u].x))), _1590);
            frontier_phi_28_52_ladder = _2534.z * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_1 = _2534.y * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_2 = _2534.x * cbModelParam._m0[1u].y;
        }
        _1671 = frontier_phi_28_52_ladder_2;
        _1673 = frontier_phi_28_52_ladder_1;
        _1675 = frontier_phi_28_52_ladder;
    }
    else
    {
        vec4 _1659 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_751, _752, _753), _1590);
        _1671 = _1659.x * cbModelParam._m0[1u].y;
        _1673 = _1659.y * cbModelParam._m0[1u].y;
        _1675 = _1659.z * cbModelParam._m0[1u].y;
    }
    float _1679 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _628);
    float _1680 = isnan(_1679) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1679 : min(cbModelParam._m0[25u].w, _1679));
    float _1769;
    float _1771;
    float _1773;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1733 = fma(_811, cbModelParam._m0[21u].z, fma(_807, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _803)) + cbModelParam._m0[21u].w;
        float _1737 = fma(_811, cbModelParam._m0[22u].z, fma(_807, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _803)) + cbModelParam._m0[22u].w;
        float _1741 = fma(_811, cbModelParam._m0[23u].z, fma(_807, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _803)) + cbModelParam._m0[23u].w;
        float _1744 = fma(_753, cbModelParam._m0[21u].z, fma(_752, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _751));
        float _1747 = fma(_753, cbModelParam._m0[22u].z, fma(_752, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _751));
        float _1750 = fma(_753, cbModelParam._m0[23u].z, fma(_752, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _751));
        float _2058;
        if (_1744 > 0.0)
        {
            _2058 = abs((1.0 - _1733) / _1744);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1744 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1733 + 1.0) / _1744);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _2058 = frontier_phi_40_36_ladder;
        }
        float _2409;
        if (_1747 > 0.0)
        {
            _2409 = abs((1.0 - _1737) / _1747);
        }
        else
        {
            float frontier_phi_54_47_ladder;
            if (_1747 < 0.0)
            {
                frontier_phi_54_47_ladder = abs((_1737 + 1.0) / _1747);
            }
            else
            {
                frontier_phi_54_47_ladder = 5000.0;
            }
            _2409 = frontier_phi_54_47_ladder;
        }
        float _2599;
        if (_1750 > 0.0)
        {
            _2599 = abs((1.0 - _1741) / _1750);
        }
        else
        {
            float frontier_phi_72_65_ladder;
            if (_1750 < 0.0)
            {
                frontier_phi_72_65_ladder = abs((_1741 + 1.0) / _1750);
            }
            else
            {
                frontier_phi_72_65_ladder = 5000.0;
            }
            _2599 = frontier_phi_72_65_ladder;
        }
        float _2601 = isnan(_2409) ? _2058 : (isnan(_2058) ? _2409 : min(_2058, _2409));
        float _2602 = isnan(_2599) ? _2601 : (isnan(_2601) ? _2599 : min(_2601, _2599));
        float _2606 = (_2602 * _1744) + _1733;
        float _2607 = (_2602 * _1747) + _1737;
        float _2608 = (_2602 * _1750) + _1741;
        float _2609 = _2602 * 9.9999997473787516355514526367188e-05;
        float _2610 = (-1.0) - _2609;
        float _2612 = _2609 + 1.0;
        float frontier_phi_37_72_ladder;
        float frontier_phi_37_72_ladder_1;
        float frontier_phi_37_72_ladder_2;
        if ((_2608 > _2612) || ((_2608 < _2610) || ((_2607 > _2612) || ((_2607 < _2610) || ((_2606 < _2610) || (_2606 > _2612))))))
        {
            frontier_phi_37_72_ladder = 0.0;
            frontier_phi_37_72_ladder_1 = 0.0;
            frontier_phi_37_72_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2850 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2608, cbModelParam._m0[17u].z, fma(_2607, cbModelParam._m0[17u].y, _2606 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2608, cbModelParam._m0[18u].z, fma(_2607, cbModelParam._m0[18u].y, _2606 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2608, cbModelParam._m0[19u].z, fma(_2607, cbModelParam._m0[19u].y, _2606 * cbModelParam._m0[19u].x))), _1680);
            frontier_phi_37_72_ladder = _2850.z * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_1 = _2850.y * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_2 = _2850.x * cbModelParam._m0[1u].z;
        }
        _1769 = frontier_phi_37_72_ladder_2;
        _1771 = frontier_phi_37_72_ladder_1;
        _1773 = frontier_phi_37_72_ladder;
    }
    else
    {
        vec4 _1753 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_751, _752, _753), _1680);
        _1769 = _1753.x * cbModelParam._m0[1u].z;
        _1771 = _1753.y * cbModelParam._m0[1u].z;
        _1773 = _1753.z * cbModelParam._m0[1u].z;
    }
    float _1785 = ((((1.0 - _771) * ((_759 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_771 * _759)) * _743;
    float _1786 = _1785 * ((cbModelParam._m0[1u].w * (_1769 - _1671)) + _1671);
    float _1787 = _1785 * ((cbModelParam._m0[1u].w * (_1771 - _1673)) + _1673);
    float _1788 = _1785 * ((cbModelParam._m0[1u].w * (_1773 - _1675)) + _1675);
    float _1791 = fma(_1788, cbSceneParam._m0[89u].z, fma(_1787, cbSceneParam._m0[89u].y, _1786 * cbSceneParam._m0[89u].x));
    float _1794 = fma(_1788, cbSceneParam._m0[90u].z, fma(_1787, cbSceneParam._m0[90u].y, _1786 * cbSceneParam._m0[90u].x));
    float _1797 = fma(_1788, cbSceneParam._m0[91u].z, fma(_1787, cbSceneParam._m0[91u].y, _1786 * cbSceneParam._m0[91u].x));
    vec4 _1805 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_678, _679));
    float _1807 = _1805.w;
    float _1819 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1807);
    float _1820 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1807);
    float _1821 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1807);
    uvec4 _1825 = floatBitsToUint(cbInstanceData._m0[_718 + 5u]);
    uint _1827 = _1825.x * 14u;
    uint _1828 = _1827 + 13u;
    float _1833 = _743 + (-1.0);
    float _1836 = (cbLight._m0[_1828].x * _1833) + 1.0;
    float _1837 = (cbLight._m0[_1828].y * _1833) + 1.0;
    uint _1838 = _1827 + 5u;
    float _1844 = isnan(1.0) ? _1837 : (isnan(_1837) ? 1.0 : min(_1837, 1.0));
    uint _1848 = _1827 + 4u;
    float _1857 = isnan(1.0) ? _1836 : (isnan(_1836) ? 1.0 : min(_1836, 1.0));
    uint _1861 = _1827 | 1u;
    float _1872 = dot(vec3(cbLight._m0[_1827].xyz), vec3(_625, _626, _627));
    float _1875 = dot(vec3(cbLight._m0[_1861].xyz), vec3(_625, _626, _627));
    float _3851 = isnan(0.0) ? _1872 : (isnan(_1872) ? 0.0 : max(_1872, 0.0));
    float _3862 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
    float _1880 = (isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0))) * 0.3183098733425140380859375;
    float _1882 = (isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0))) * 0.3183098733425140380859375;
    float _1889 = ((cbLight._m0[_1838].x * _1844) * _1882) + (((cbLight._m0[_1848].x * _1819) * _1857) * _1880);
    float _1890 = ((_1844 * cbLight._m0[_1838].y) * _1882) + (((cbLight._m0[_1848].y * _1820) * _1857) * _1880);
    float _1891 = ((_1844 * cbLight._m0[_1838].z) * _1882) + (((cbLight._m0[_1848].z * _1821) * _1857) * _1880);
    uint _1893 = _1827 + 8u;
    float _1906 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1827].w)) * _628) * 0.949999988079071044921875);
    float _1907 = _1906 * _1906;
    float _1908 = cbLight._m0[_1827].x + _652;
    float _1909 = cbLight._m0[_1827].y + _653;
    float _1910 = cbLight._m0[_1827].z + _654;
    float _1914 = inversesqrt(dot(vec3(_1908, _1909, _1910), vec3(_1908, _1909, _1910)));
    float _1915 = _1914 * _1908;
    float _1916 = _1914 * _1909;
    float _1917 = _1914 * _1910;
    float _1918 = dot(vec3(_625, _626, _627), vec3(cbLight._m0[_1827].xyz));
    float _3873 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
    float _1921 = isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0));
    float _3884 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _1922 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
    float _1923 = dot(vec3(_625, _626, _627), vec3(_1915, _1916, _1917));
    float _3895 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
    float _1926 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
    float _1927 = dot(vec3(cbLight._m0[_1827].xyz), vec3(_1915, _1916, _1917));
    float _3906 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
    float _1931 = _1907 * _1907;
    float _1935 = ((_1926 * _1926) * (_1931 + (-1.0))) + 1.0;
    float _1946 = (exp2(log2(1.0 - (isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1947 = 1.0 - _1907;
    float _1958 = (0.5 / (((_1922 * ((_1921 * _1947) + _1907)) + 9.9999999392252902907785028219223e-09) + (((_1922 * _1947) + _1907) * _1921))) * _1921;
    float _3917 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
    float _1960 = (isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0))) * (_1931 / ((_1935 * _1935) * 3.141590118408203125));
    uint _1974 = _1827 + 9u;
    float _1985 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1861].w)) * _628) * 0.949999988079071044921875);
    float _1986 = _1985 * _1985;
    float _1987 = cbLight._m0[_1861].x + _652;
    float _1988 = cbLight._m0[_1861].y + _653;
    float _1989 = cbLight._m0[_1861].z + _654;
    float _1993 = inversesqrt(dot(vec3(_1987, _1988, _1989), vec3(_1987, _1988, _1989)));
    float _1994 = _1993 * _1987;
    float _1995 = _1993 * _1988;
    float _1996 = _1993 * _1989;
    float _1997 = dot(vec3(_625, _626, _627), vec3(cbLight._m0[_1861].xyz));
    float _3928 = isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0));
    float _2000 = isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0));
    float _2001 = dot(vec3(_625, _626, _627), vec3(_1994, _1995, _1996));
    float _3939 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
    float _2004 = isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0));
    float _2005 = dot(vec3(cbLight._m0[_1861].xyz), vec3(_1994, _1995, _1996));
    float _3950 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
    float _2009 = _1986 * _1986;
    float _2013 = ((_2004 * _2004) * (_2009 + (-1.0))) + 1.0;
    float _2022 = (exp2(log2(1.0 - (isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2023 = 1.0 - _1986;
    float _2033 = (0.5 / (((_1922 * ((_2000 * _2023) + _1986)) + 9.9999999392252902907785028219223e-09) + (((_1922 * _2023) + _1986) * _2000))) * _2000;
    float _3961 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
    float _2035 = (isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * (_2009 / ((_2013 * _2013) * 3.141590118408203125));
    float _2045 = (((_2022 * cbLight._m0[_1974].x) * _2035) * _1844) + ((((cbLight._m0[_1893].x * _1819) * _1946) * _1960) * _1857);
    float _2046 = (((_2022 * cbLight._m0[_1974].y) * _2035) * _1844) + ((((cbLight._m0[_1893].y * _1820) * _1946) * _1960) * _1857);
    float _2047 = (((_2022 * cbLight._m0[_1974].z) * _2035) * _1844) + ((((cbLight._m0[_1893].z * _1821) * _1946) * _1960) * _1857);
    float _2162;
    float _2164;
    float _2166;
    float _2168;
    float _2170;
    float _2172;
    if (_1825.y == 0u)
    {
        float _2102 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2103 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2102;
        float _2104 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2102;
        float _2105 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2102;
        uvec4 _2117 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2118 = _2117.x;
        uint _2129 = uint((float(_2117.y) * floor(float(uint(cbSceneParam._m0[85u].y * _679) / _2118))) + floor(float(uint(cbSceneParam._m0[85u].x * _678) / _2118)));
        float _2139 = (log2(_2105 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2140 = isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0));
        uint _2143 = uint(isnan(14.0) ? _2140 : (isnan(_2140) ? 14.0 : min(_2140, 14.0)));
        uvec4 _2148 = texelFetch(g_lightClusterGridBuffer, int(((_2143 << 2u) + (_2129 << 6u)) >> 2u));
        uint _2149 = _2148.x;
        uint _2150 = _2117.z;
        float _2262;
        float _2264;
        float _2266;
        float _2268;
        float _2270;
        float _2272;
        if (((((1u << ((_2150 >> 4u) & 15u)) + 4294967295u) & _2149) == 0u) || ((_2150 & 240u) == 0u))
        {
            _2262 = 0.0;
            _2264 = 0.0;
            _2266 = 0.0;
            _2268 = 0.0;
            _2270 = 0.0;
            _2272 = 0.0;
        }
        else
        {
            float _2263;
            float _2265;
            float _2267;
            float _2269;
            float _2271;
            float _2273;
            float _2446 = 0.0;
            float _2447 = 0.0;
            float _2448 = 0.0;
            float _2449 = 0.0;
            float _2450 = 0.0;
            float _2451 = 0.0;
            uint _2452 = 0u;
            uint _2461;
            bool _2462;
            for (;;)
            {
                _2461 = texelFetch(g_lightClassification, int((((_2143 << 5u) + (_2129 << 9u)) + (_2452 << 2u)) >> 2u)).x;
                _2462 = _2461 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2462)
                {
                    frontier_phi_67_pred = _2449;
                    frontier_phi_67_pred_1 = _2448;
                    frontier_phi_67_pred_2 = _2447;
                    frontier_phi_67_pred_3 = _2446;
                    frontier_phi_67_pred_4 = _2450;
                    frontier_phi_67_pred_5 = _2451;
                }
                else
                {
                    float _2642;
                    float _2643;
                    float _2644;
                    float _2645;
                    float _2646;
                    float _2647;
                    uint _2648;
                    _2642 = _2446;
                    _2643 = _2447;
                    _2644 = _2448;
                    _2645 = _2449;
                    _2646 = _2450;
                    _2647 = _2451;
                    _2648 = _2461;
                    float _2543;
                    float _2544;
                    float _2545;
                    float _2546;
                    float _2547;
                    float _2548;
                    for (;;)
                    {
                        uint _2652 = uint(findLSB(_2648)) + (_2452 << 5u);
                        uint _2649 = (_2648 + 4294967295u) & _2648;
                        uint _2654 = _2652 * 48u;
                        vec4 _2668 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2654)).x, texelFetch(g_PointLightRenderingBuffer, int(_2654 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2654 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2654 + 3u)).x));
                        uint _2674 = (_2652 * 48u) + 4u;
                        vec4 _2687 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2674)).x, texelFetch(g_PointLightRenderingBuffer, int(_2674 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2674 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2674 + 3u)).x));
                        uint _2693 = (_2652 * 48u) + 8u;
                        vec3 _2704 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2693)).x, texelFetch(g_PointLightRenderingBuffer, int(_2693 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2693 + 2u)).x));
                        float _2708 = _2668.x - _2103;
                        float _2709 = _2668.y - _2104;
                        float _2710 = _2668.z - _2105;
                        float _2711 = dot(vec3(_2708, _2709, _2710), vec3(_2708, _2709, _2710));
                        float _2714 = inversesqrt(_2711);
                        float _2715 = _2714 * _2708;
                        float _2716 = _2714 * _2709;
                        float _2717 = _2714 * _2710;
                        float _2718 = dot(vec3(_699, _702, _705), vec3(_2715, _2716, _2717));
                        float _2723 = 1.0 - (_2711 * _2668.w);
                        float _3982 = isnan(0.0) ? _2723 : (isnan(_2723) ? 0.0 : max(_2723, 0.0));
                        float _2724 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
                        float _2725 = sqrt(_2711) * _2687.w;
                        float _2728 = 1.39999997615814208984375 / (_2725 + 1.39999997615814208984375);
                        float _2729 = _2728 * _2728;
                        float _2732 = ((1.0 - _2729) * _2718) + _2729;
                        float _2735 = _2725 * _2725;
                        float _2739 = ((isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0))) * _2724) / ((_2735 * 0.699999988079071044921875) + 1.0);
                        float _2743 = (-0.0) - _2103;
                        float _2744 = (-0.0) - _2104;
                        float _2745 = (-0.0) - _2105;
                        float _2749 = inversesqrt(dot(vec3(_2743, _2744, _2745), vec3(_2743, _2744, _2745)));
                        float _2750 = _2749 * _2743;
                        float _2751 = _2749 * _2744;
                        float _2752 = _2749 * _2745;
                        float _2760 = exp2(log2(1.0 / ((_2735 * 3.5) + 5.0)) * 0.25);
                        float _2761 = 1.0 - _759;
                        float _2768 = sqrt(1.0 - ((1.0 - (_2761 * _2761)) * (1.0 - (_2760 * _2760))));
                        float _2769 = _2768 * _2768;
                        float _2770 = _2769 * _2769;
                        float _2771 = _2750 + _2715;
                        float _2772 = _2751 + _2716;
                        float _2773 = _2752 + _2717;
                        float _2777 = inversesqrt(dot(vec3(_2771, _2772, _2773), vec3(_2771, _2772, _2773)));
                        float _2781 = dot(vec3(_699, _702, _705), vec3(_2750, _2751, _2752));
                        float _3998 = isnan(0.0) ? _2781 : (isnan(_2781) ? 0.0 : max(_2781, 0.0));
                        float _2784 = isnan(1.0) ? _3998 : (isnan(_3998) ? 1.0 : min(_3998, 1.0));
                        float _2785 = dot(vec3(_699, _702, _705), vec3(_2777 * _2771, _2777 * _2772, _2777 * _2773));
                        float _4009 = isnan(0.0) ? _2785 : (isnan(_2785) ? 0.0 : max(_2785, 0.0));
                        float _2788 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
                        float _2792 = ((_2788 * _2788) * (_2770 + (-1.0))) + 1.0;
                        float _2793 = _2728 * _2769;
                        float _2794 = _2793 * _2793;
                        float _2797 = ((1.0 - _2794) * _2718) + _2794;
                        float _4020 = isnan(0.0) ? _2797 : (isnan(_2797) ? 0.0 : max(_2797, 0.0));
                        float _2798 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
                        float _2799 = 1.0 - _2769;
                        float _2809 = (0.5 / (((_2798 * ((_2784 * _2799) + _2769)) + 9.9999999392252902907785028219223e-09) + (((_2798 * _2799) + _2769) * _2784))) * _2798;
                        float _4031 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
                        float _2820 = (((_2770 * 3.1415927410125732421875) * (isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0)))) / ((_2792 * _2792) * ((_2735 * 2.1991131305694580078125) + 3.141590118408203125))) * _2724;
                        _2546 = (_2739 * _2687.x) + _2645;
                        _2547 = (_2739 * _2687.y) + _2646;
                        _2548 = (_2739 * _2687.z) + _2647;
                        _2543 = (_2820 * _2704.x) + _2642;
                        _2544 = (_2820 * _2704.y) + _2643;
                        _2545 = (_2820 * _2704.z) + _2644;
                        if (_2649 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2642 = _2543;
                            _2643 = _2544;
                            _2644 = _2545;
                            _2645 = _2546;
                            _2646 = _2547;
                            _2647 = _2548;
                            _2648 = _2649;
                        }
                    }
                    frontier_phi_67_pred = _2546;
                    frontier_phi_67_pred_1 = _2545;
                    frontier_phi_67_pred_2 = _2544;
                    frontier_phi_67_pred_3 = _2543;
                    frontier_phi_67_pred_4 = _2547;
                    frontier_phi_67_pred_5 = _2548;
                }
                _2269 = frontier_phi_67_pred;
                _2267 = frontier_phi_67_pred_1;
                _2265 = frontier_phi_67_pred_2;
                _2263 = frontier_phi_67_pred_3;
                _2271 = frontier_phi_67_pred_4;
                _2273 = frontier_phi_67_pred_5;
                uint _2453 = _2452 + 1u;
                if (_2453 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2446 = _2263;
                    _2447 = _2265;
                    _2448 = _2267;
                    _2449 = _2269;
                    _2450 = _2271;
                    _2451 = _2273;
                    _2452 = _2453;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2262 = _2263;
            _2264 = _2265;
            _2266 = _2267;
            _2268 = _2269;
            _2270 = _2271;
            _2272 = _2273;
        }
        uvec4 _2276 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2277 = _2276.z;
        uint _2279 = (_2277 >> 8u) & 15u;
        float _2414;
        float _2416;
        float _2418;
        float _2420;
        float _2422;
        float _2424;
        if (((4294967295u << _2279) & _2149) == 0u)
        {
            _2414 = _2262;
            _2416 = _2264;
            _2418 = _2266;
            _2420 = _2268;
            _2422 = _2270;
            _2424 = _2272;
        }
        else
        {
            float _2439 = inversesqrt(dot(vec3(_2103, _2104, _2105), vec3(_2103, _2104, _2105)));
            float _2440 = _2439 * _2103;
            float _2441 = _2439 * _2104;
            float _2442 = _2439 * _2105;
            float frontier_phi_56_57_ladder;
            float frontier_phi_56_57_ladder_1;
            float frontier_phi_56_57_ladder_2;
            float frontier_phi_56_57_ladder_3;
            float frontier_phi_56_57_ladder_4;
            float frontier_phi_56_57_ladder_5;
            if (_2279 < ((_2277 >> 12u) & 15u))
            {
                float _2415;
                float _2417;
                float _2419;
                float _2421;
                float _2423;
                float _2425;
                float _2625 = _2262;
                float _2626 = _2264;
                float _2627 = _2266;
                float _2628 = _2268;
                float _2629 = _2270;
                float _2630 = _2272;
                uint _2631 = _2279;
                uint _2640;
                bool _2641;
                for (;;)
                {
                    _2640 = texelFetch(g_lightClassification, int((((_2143 << 5u) + (_2129 << 9u)) + (_2631 << 2u)) >> 2u)).x;
                    _2641 = _2640 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    float frontier_phi_81_pred_3;
                    float frontier_phi_81_pred_4;
                    float frontier_phi_81_pred_5;
                    if (_2641)
                    {
                        frontier_phi_81_pred = _2628;
                        frontier_phi_81_pred_1 = _2627;
                        frontier_phi_81_pred_2 = _2626;
                        frontier_phi_81_pred_3 = _2625;
                        frontier_phi_81_pred_4 = _2630;
                        frontier_phi_81_pred_5 = _2629;
                    }
                    else
                    {
                        float _2855;
                        float _2856;
                        float _2857;
                        float _2858;
                        float _2859;
                        float _2860;
                        float _3150;
                        float _3151;
                        float _3152;
                        float _3153;
                        float _3154;
                        float _3155;
                        float _2868 = _2625;
                        float _2869 = _2626;
                        float _2870 = _2627;
                        float _2871 = _2628;
                        float _2872 = _2629;
                        float _2873 = _2630;
                        uint _2874 = _2640;
                        uint _2875;
                        vec4 _2900;
                        float _2901;
                        vec4 _2916;
                        vec3 _2928;
                        vec4 _2944;
                        vec4 _2960;
                        float _3006;
                        bool _3007;
                        for (;;)
                        {
                            uint _2885 = ((_2631 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2874));
                            _2875 = (_2874 + 4294967295u) & _2874;
                            uint _2887 = _2885 * 40u;
                            _2900 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2887)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 3u)).x));
                            _2901 = _2900.w;
                            uint _2903 = (_2885 * 40u) + 4u;
                            _2916 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2903)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2903 + 3u)).x));
                            uint _2918 = (_2885 * 40u) + 8u;
                            _2928 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2918)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2918 + 2u)).x));
                            uint _2931 = (_2885 * 40u) + 16u;
                            _2944 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2931)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 3u)).x));
                            uint _2947 = (_2885 * 40u) + 20u;
                            _2960 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2947)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2947 + 3u)).x));
                            uint _2962 = (_2885 * 40u) + 24u;
                            vec4 _2975 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2962)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2962 + 3u)).x));
                            uint _2981 = (_2885 * 40u) + 28u;
                            vec4 _2994 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2981)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2981 + 3u)).x));
                            _3006 = fma(_2105, _2994.z, fma(_2104, _2994.y, _2994.x * _2103)) + _2994.w;
                            _3007 = !((fma(_2105, _2975.z, fma(_2104, _2975.y, _2975.x * _2103)) + _2975.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            float frontier_phi_87_pred_3;
                            float frontier_phi_87_pred_4;
                            float frontier_phi_87_pred_5;
                            if (_3007)
                            {
                                float _3034 = _2900.x - _2103;
                                float _3035 = _2900.y - _2104;
                                float _3036 = _2900.z - _2105;
                                float _3037 = dot(vec3(_3034, _3035, _3036), vec3(_3034, _3035, _3036));
                                float _3040 = inversesqrt(_3037);
                                float _3041 = _3040 * _3034;
                                float _3042 = _3040 * _3035;
                                float _3043 = _3040 * _3036;
                                float _3047 = 1.0 - (_3037 / (_2901 * _2901));
                                float _4042 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0));
                                float _3048 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
                                float _3052 = sqrt(_3037) * _2916.w;
                                float _3054 = 1.39999997615814208984375 / (_3052 + 1.39999997615814208984375);
                                float _3055 = _3054 * _3054;
                                float _3058 = ((1.0 - _3055) * dot(vec3(_3041, _3042, _3043), vec3(_699, _702, _705))) + _3055;
                                float _3061 = _3052 * _3052;
                                float _3065 = (fma(_2105, _2944.z, fma(_2104, _2944.y, _2944.x * _2103)) + _2944.w) / _3006;
                                float _3066 = (fma(_2105, _2960.z, fma(_2104, _2960.y, _2960.x * _2103)) + _2960.w) / _3006;
                                float _3070 = 1.0 - dot(vec2(_3065, _3066), vec2(_3065, _3066));
                                float _4058 = isnan(0.0) ? _3070 : (isnan(_3070) ? 0.0 : max(_3070, 0.0));
                                float _3071 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
                                float _3072 = _3071 * (((isnan(0.0) ? _3058 : (isnan(_3058) ? 0.0 : max(_3058, 0.0))) * _3048) / ((_3061 * 0.699999988079071044921875) + 1.0));
                                float _3084 = exp2(log2(1.0 / ((_3061 * 3.5) + 5.0)) * 0.25);
                                float _3085 = 1.0 - _759;
                                float _3092 = sqrt(1.0 - ((1.0 - (_3085 * _3085)) * (1.0 - (_3084 * _3084))));
                                float _3093 = _3092 * _3092;
                                float _3094 = _3093 * _3093;
                                float _3095 = _3041 - _2440;
                                float _3096 = _3042 - _2441;
                                float _3097 = _3043 - _2442;
                                float _3101 = inversesqrt(dot(vec3(_3095, _3096, _3097), vec3(_3095, _3096, _3097)));
                                float _3105 = dot(vec3(_699, _702, _705), vec3((-0.0) - _2440, (-0.0) - _2441, (-0.0) - _2442));
                                float _4069 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0));
                                float _3108 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
                                float _3109 = dot(vec3(_699, _702, _705), vec3(_3101 * _3095, _3101 * _3096, _3101 * _3097));
                                float _4080 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
                                float _3112 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
                                float _3116 = ((_3112 * _3112) * (_3094 + (-1.0))) + 1.0;
                                float _3117 = _3054 * _3093;
                                float _3118 = _3117 * _3117;
                                float _3124 = ((1.0 - _3118) * dot(vec3(_699, _702, _705), vec3(_3041, _3042, _3043))) + _3118;
                                float _4091 = isnan(0.0) ? _3124 : (isnan(_3124) ? 0.0 : max(_3124, 0.0));
                                float _3125 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
                                float _3126 = 1.0 - _3093;
                                float _3136 = (0.5 / (((_3125 * ((_3108 * _3126) + _3093)) + 9.9999999392252902907785028219223e-09) + (((_3125 * _3126) + _3093) * _3108))) * _3125;
                                float _4102 = isnan(0.0) ? _3136 : (isnan(_3136) ? 0.0 : max(_3136, 0.0));
                                float _3146 = (_3071 * _3048) * (((_3094 * 3.1415927410125732421875) * (isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0)))) / ((_3116 * _3116) * ((_3061 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_87_pred = _3072 * _2916.x;
                                frontier_phi_87_pred_1 = _3146 * _2928.z;
                                frontier_phi_87_pred_2 = _3146 * _2928.y;
                                frontier_phi_87_pred_3 = _3146 * _2928.x;
                                frontier_phi_87_pred_4 = _3072 * _2916.z;
                                frontier_phi_87_pred_5 = _3072 * _2916.y;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                                frontier_phi_87_pred_3 = 0.0;
                                frontier_phi_87_pred_4 = 0.0;
                                frontier_phi_87_pred_5 = 0.0;
                            }
                            _3153 = frontier_phi_87_pred;
                            _3152 = frontier_phi_87_pred_1;
                            _3151 = frontier_phi_87_pred_2;
                            _3150 = frontier_phi_87_pred_3;
                            _3155 = frontier_phi_87_pred_4;
                            _3154 = frontier_phi_87_pred_5;
                            _2858 = _3153 + _2871;
                            _2859 = _3154 + _2872;
                            _2860 = _3155 + _2873;
                            _2855 = _3150 + _2868;
                            _2856 = _3151 + _2869;
                            _2857 = _3152 + _2870;
                            if (_2875 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2868 = _2855;
                                _2869 = _2856;
                                _2870 = _2857;
                                _2871 = _2858;
                                _2872 = _2859;
                                _2873 = _2860;
                                _2874 = _2875;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _2858;
                        frontier_phi_81_pred_1 = _2857;
                        frontier_phi_81_pred_2 = _2856;
                        frontier_phi_81_pred_3 = _2855;
                        frontier_phi_81_pred_4 = _2860;
                        frontier_phi_81_pred_5 = _2859;
                    }
                    _2421 = frontier_phi_81_pred;
                    _2419 = frontier_phi_81_pred_1;
                    _2417 = frontier_phi_81_pred_2;
                    _2415 = frontier_phi_81_pred_3;
                    _2425 = frontier_phi_81_pred_4;
                    _2423 = frontier_phi_81_pred_5;
                    uint _2632 = _2631 + 1u;
                    if (_2632 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2625 = _2415;
                        _2626 = _2417;
                        _2627 = _2419;
                        _2628 = _2421;
                        _2629 = _2423;
                        _2630 = _2425;
                        _2631 = _2632;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_56_57_ladder = _2425;
                frontier_phi_56_57_ladder_1 = _2423;
                frontier_phi_56_57_ladder_2 = _2421;
                frontier_phi_56_57_ladder_3 = _2417;
                frontier_phi_56_57_ladder_4 = _2415;
                frontier_phi_56_57_ladder_5 = _2419;
            }
            else
            {
                frontier_phi_56_57_ladder = _2272;
                frontier_phi_56_57_ladder_1 = _2270;
                frontier_phi_56_57_ladder_2 = _2268;
                frontier_phi_56_57_ladder_3 = _2264;
                frontier_phi_56_57_ladder_4 = _2262;
                frontier_phi_56_57_ladder_5 = _2266;
            }
            _2414 = frontier_phi_56_57_ladder_4;
            _2416 = frontier_phi_56_57_ladder_3;
            _2418 = frontier_phi_56_57_ladder_5;
            _2420 = frontier_phi_56_57_ladder_2;
            _2422 = frontier_phi_56_57_ladder_1;
            _2424 = frontier_phi_56_57_ladder;
        }
        float _2429 = isnan(1.0) ? _743 : (isnan(_743) ? 1.0 : min(_743, 1.0));
        _2162 = (_2429 * _2420) + _1889;
        _2164 = (_2429 * _2422) + _1890;
        _2166 = (_2429 * _2424) + _1891;
        _2168 = ((_2414 * 0.039999999105930328369140625) * _2429) + _2045;
        _2170 = ((_2416 * 0.039999999105930328369140625) * _2429) + _2046;
        _2172 = ((_2418 * 0.039999999105930328369140625) * _2429) + _2047;
    }
    else
    {
        _2162 = _1889;
        _2164 = _1890;
        _2166 = _1891;
        _2168 = _2045;
        _2170 = _2046;
        _2172 = _2047;
    }
    uint _2178 = _719 + uint(cbMatDynParam._m0[0u].w);
    float _4118 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _4129 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _4140 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _2209 = (((isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0))) * (_2162 + ((isnan(0.0) ? _1500 : (isnan(_1500) ? 0.0 : max(_1500, 0.0))) * _743))) + ((_2168 + ((isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0))) * _1579)) * cbPerFrame._m0[3u].x)) + (((_510.x * _297) * (((_575 * (cbMtdParam._m0[15u].x - cbMtdParam._m0[13u].x)) * _570) + cbMtdParam._m0[13u].x)) * cbInstanceData._m0[_2178].x);
    float _2211 = ((((_510.y * _297) * (((_575 * (cbMtdParam._m0[15u].y - cbMtdParam._m0[13u].y)) * _570) + cbMtdParam._m0[13u].y)) * cbInstanceData._m0[_2178].y) + ((_2170 + ((isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0))) * _1579)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0))) * (_2164 + ((isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0))) * _743)));
    float _2213 = ((((_510.z * _297) * (((_575 * (cbMtdParam._m0[15u].z - cbMtdParam._m0[13u].z)) * _570) + cbMtdParam._m0[13u].z)) * cbInstanceData._m0[_2178].z) + ((_2172 + ((isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0))) * _1579)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_2166 + ((isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0))) * _743)));
    float _2214 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _2215 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _2216 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
    uint _2217 = _718 + 6u;
    float _2225 = _678 / cbSceneParam._m0[86u].x;
    float _2226 = _679 / cbSceneParam._m0[86u].y;
    vec4 _2240 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2225, _2226, (log2((isnan(cbSceneParam._m0[77u].w) ? _647 : (isnan(_647) ? cbSceneParam._m0[77u].w : min(_647, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2242 = _2240.x;
    float _2243 = _2240.y;
    float _2244 = _2240.z;
    float _2245 = _2240.w;
    float _2325;
    float _2327;
    float _2329;
    float _2331;
    if (_647 > cbSceneParam._m0[78u].w)
    {
        float _2287 = isnan(_647) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _647 : min(cbSceneParam._m0[80u].w, _647));
        float _2288 = _2287 / _647;
        float _2299 = _2288 * _279;
        float _2300 = _280 * _2288;
        float _2301 = (-0.0) - _2300;
        float _2302 = _2288 * _281;
        float _2304 = (cbSceneParam._m0[77u].w * _2301) / _2287;
        float _2305 = _2304 + cbSceneParam._m0[79u].w;
        float _2306 = cbSceneParam._m0[79u].w - _2300;
        float _2312 = sqrt(((_2299 * _2299) + (_2300 * _2300)) + (_2302 * _2302));
        float _2315 = (1.0 - (cbSceneParam._m0[77u].w / _2287)) * _2312;
        float _2321 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2323 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2556;
        if (abs((_2301 - _2304) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2556 = ((((_2305 > 0.0) ? exp2(_2321 * _2305) : (2.0 - exp2(_2323 * _2305))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2315;
        }
        else
        {
            float _2475 = 1.0 / cbSceneParam._m0[80u].x;
            float _2476 = isnan(_2306) ? _2305 : (isnan(_2305) ? _2306 : max(_2305, _2306));
            float _2477 = isnan(_2306) ? _2305 : (isnan(_2305) ? _2306 : min(_2305, _2306));
            float _2486 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : min(_2476, 0.0));
            float _2487 = isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : min(_2477, 0.0));
            _2556 = ((abs(_2312 / _2301) * cbSceneParam._m0[80u].y) * ((((_2486 - _2487) * 2.0) - ((exp2(_2321 * (isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0)))) - exp2(_2321 * (isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0))))) * _2475)) - ((exp2(_2323 * _2486) - exp2(_2323 * _2487)) * _2475))) + (_2315 * cbSceneParam._m0[80u].z);
        }
        vec4 _2558 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2225, _2226, 1.0), 0.0);
        float _2567 = exp2((_2556 * (-1.44269502162933349609375)) * (1.0 - _2558.w));
        float _2568 = log2(_2567);
        float _2584 = log2(_2245);
        _2325 = (exp2(_2584 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2568 * cbSceneParam._m0[78u].x)) * _2558.x) / cbSceneParam._m0[78u].x)) + _2242;
        _2327 = (exp2(_2584 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2568 * cbSceneParam._m0[78u].y)) * _2558.y) / cbSceneParam._m0[78u].y)) + _2243;
        _2329 = (exp2(_2584 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2568 * cbSceneParam._m0[78u].z)) * _2558.z) / cbSceneParam._m0[78u].z)) + _2244;
        _2331 = _2567 * _2245;
    }
    else
    {
        _2325 = _2242;
        _2327 = _2243;
        _2329 = _2244;
        _2331 = _2245;
    }
    bool _2594;
    vec4 _2341;
    vec4 _2363;
    float _2365;
    float _2369;
    float _2370;
    float _2371;
    float _2372;
    bool _2382;
    for (;;)
    {
        _2341 = cbMatDynParam._m0[0u];
        float _2343 = roundEven(_2341.y);
        bool _2344 = _2343 == 3.0;
        float _2345 = log2(_2331);
        float _2352 = exp2(_2345 * cbSceneParam._m0[78u].x) * _2214;
        float _2353 = exp2(_2345 * cbSceneParam._m0[78u].y) * _2215;
        float _2354 = exp2(_2345 * cbSceneParam._m0[78u].z) * _2216;
        float _2361 = _661 + (-0.5);
        _2363 = cbMtdParam._m0[1u];
        _2365 = _2363.y * _2361;
        float _2368 = (_2343 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2369 = _2368 * (_2344 ? _2352 : (_2352 + (cbSceneParam._m0[72u].w * _2325)));
        _2370 = _2368 * (_2344 ? _2353 : (_2353 + (cbSceneParam._m0[72u].w * _2327)));
        _2371 = _2368 * (_2344 ? _2354 : (_2354 + (cbSceneParam._m0[72u].w * _2329)));
        _2372 = _2361 * 0.999000012874603271484375;
        _2382 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2382)
        {
            if ((cbInstanceData._m0[_718 + 7u].x + _2372) < 0.5)
            {
                _2594 = true;
                break;
            }
        }
        uint _2510 = _719 + uint(_2341.w);
        if ((cbInstanceData._m0[_2510].w < 1.0) && ((cbInstanceData._m0[_2510].w + _2372) < 0.5))
        {
            _2594 = true;
            break;
        }
        if ((_2365 + 1.0) < _2363.x)
        {
            _2594 = true;
            break;
        }
        _2594 = false;
        break;
    }
    float _2825;
    if (_2594)
    {
        discard_state = true;
        _2825 = 0.0;
    }
    else
    {
        _2825 = cbInstanceData._m0[_2217].w;
    }
    SV_Target.x = _2369;
    SV_Target.y = _2370;
    SV_Target.z = _2371;
    SV_Target.w = _2825;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2217].w;
    discard_exit();
}


