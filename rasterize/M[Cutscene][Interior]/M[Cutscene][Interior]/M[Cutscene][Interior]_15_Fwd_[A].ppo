#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1180;
float _3316;
float _3317;
float _3318;
float _3319;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _198 = _197 * _190;
    float _199 = _197 * _191;
    float _200 = _197 * _192;
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = _204 * NORMAL.x;
    float _206 = _204 * NORMAL.y;
    float _207 = _204 * NORMAL.z;
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _212 = _211 * TANGENT.x;
    float _213 = _211 * TANGENT.y;
    float _214 = _211 * TANGENT.z;
    float _259 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _269 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _259);
    float _270 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _259);
    float _271 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _259);
    vec4 _284 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _287 = _284.x;
    vec4 _305 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _322 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _287) + cbMtdParam._m0[12u].x) * _305.x;
    float _324 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _287) + cbMtdParam._m0[12u].y) * _305.y;
    float _326 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _287) + cbMtdParam._m0[12u].z) * _305.z;
    vec4 _344 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _380 = cbMtdParam._m0[24u].x + _269;
    float _381 = cbMtdParam._m0[24u].y + _270;
    float _382 = cbMtdParam._m0[24u].z + _271;
    float _396 = (-0.0) - dot(vec3(_380, _381, _382), vec3(_198, _199, _200));
    float _397 = (-0.0) - dot(vec3(_380, _381, _382), vec3(_212, _213, _214));
    float _398 = (-0.0) - dot(vec3(_380, _381, _382), vec3((-0.0) - _205, (-0.0) - _206, (-0.0) - _207));
    float _402 = inversesqrt(dot(vec3(_396, _397, _398), vec3(_396, _397, _398)));
    float _405 = _402 * _398;
    float _406 = (_402 * _396) + ((cbMtdParam._m0[22u].x * _287) * ((_344.x * 2.0) + (-1.0)));
    float _407 = (_402 * _397) + ((cbMtdParam._m0[22u].y * _287) * ((_344.y * 2.0) + (-1.0)));
    float _408 = _406 * cbMtdParam._m0[20u].w;
    float _409 = _407 * cbMtdParam._m0[20u].z;
    float _410 = fract(TEXCOORD.x);
    float _411 = fract(TEXCOORD.y);
    float _417;
    if (_408 > 0.0)
    {
        _417 = (1.0 - _410) / _408;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_408 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _410) / _408;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _417 = frontier_phi_3_2_ladder;
    }
    float _425;
    if (_409 > 0.0)
    {
        _425 = (1.0 - _411) / _409;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_409 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _411) / _409;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _425 = frontier_phi_7_6_ladder;
    }
    bool _427 = _405 > 0.0;
    float _429 = _427 ? (cbMtdParam._m0[16u].x / _405) : 5000.0;
    float _430 = isnan(_425) ? _417 : (isnan(_417) ? _425 : min(_417, _425));
    float _431 = isnan(_429) ? _430 : (isnan(_430) ? _429 : min(_430, _429));
    float _435 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _436 = _410 + (-0.5);
    float _439 = _411 + (-0.5);
    float _442 = ((_431 * _405) + _435) / _435;
    vec4 _467 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (((((_436 + (_431 * _408)) / _442) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (((((_439 + (_431 * _409)) / _442) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    float _480 = (_467.x * _287) * cbMtdParam._m0[9u].x;
    float _481 = (_467.y * _287) * cbMtdParam._m0[9u].y;
    float _482 = (_467.z * _287) * cbMtdParam._m0[9u].z;
    float _501 = _406 * cbMtdParam._m0[22u].w;
    float _502 = _407 * cbMtdParam._m0[22u].z;
    bool _503 = _501 > 0.0;
    float _508;
    if (_503)
    {
        _508 = (1.0 - _410) / _501;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_501 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _410) / _501;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _508 = frontier_phi_11_10_ladder;
    }
    bool _510 = _502 > 0.0;
    float _515;
    if (_510)
    {
        _515 = (1.0 - _411) / _502;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_502 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _411) / _502;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _515 = frontier_phi_15_14_ladder;
    }
    float _518 = _427 ? (cbMtdParam._m0[18u].x / _405) : 5000.0;
    float _519 = isnan(_515) ? _508 : (isnan(_508) ? _515 : min(_508, _515));
    float _520 = isnan(_518) ? _519 : (isnan(_519) ? _518 : min(_519, _518));
    float _524 = cbMtdParam._m0[19u].y * cbMtdParam._m0[18u].x;
    float _528 = ((_520 * _405) + _524) / _524;
    float _533 = cbMtdParam._m0[19u].x - cbMtdParam._m0[20u].x * trunc(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    float _535 = floor(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    vec4 _551 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_436 + (_520 * _501)) / _528) + 0.5) + _533) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_439 + (_520 * _502)) / _528) + 0.5) + _535) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[0u].w));
    float _566;
    if (_503)
    {
        _566 = (1.0 - _410) / _501;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_501 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _410) / _501;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _566 = frontier_phi_19_18_ladder;
    }
    float _572;
    if (_510)
    {
        _572 = (1.0 - _411) / _502;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_502 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _411) / _502;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _572 = frontier_phi_23_22_ladder;
    }
    float _574 = isnan(_572) ? _566 : (isnan(_566) ? _572 : min(_566, _572));
    float _575 = isnan(_518) ? _574 : (isnan(_574) ? _518 : min(_574, _518));
    float _582 = ((_575 * _405) + _524) / _524;
    vec4 _602 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_436 + (_575 * _501)) / _582) + 0.5) + _533) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_439 + (_575 * _502)) / _582) + 0.5) + _535) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[8u].w));
    float _604 = _602.x;
    float _614 = _287 * 0.1500000059604644775390625;
    float _625 = (_614 * ((_480 - _322) + (((((cbMtdParam._m0[10u].x * _287) * _551.x) - _480) * _287) * _604))) + _322;
    float _626 = (_614 * ((_481 - _324) + (((((cbMtdParam._m0[10u].y * _287) * _551.y) - _481) * _287) * _604))) + _324;
    float _627 = (_614 * ((_482 - _326) + (((((cbMtdParam._m0[10u].z * _287) * _551.z) - _482) * _287) * _604))) + _326;
    vec4 _640 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _644 = _640.z;
    float _647 = (_640.x * 2.0) + (-1.0);
    float _648 = (_640.y * 2.0) + (-1.0);
    float _649 = dot(vec2(_647, _648), vec2(_647, _648));
    float _3358 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _654 = sqrt(1.0 - (isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0))));
    float _657 = fma(_654, _205, fma(_648, _212, _647 * _198));
    float _660 = fma(_654, _206, fma(_648, _213, _647 * _199));
    float _663 = fma(_654, _207, fma(_648, _214, _647 * _200));
    float _667 = inversesqrt(dot(vec3(_657, _660, _663), vec3(_657, _660, _663)));
    float _668 = _667 * _657;
    float _669 = _667 * _660;
    float _670 = _667 * _663;
    float _3369 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _671 = isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0));
    float _3380 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _3391 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _3402 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _690 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _694 = inversesqrt(dot(vec3(_269, _270, _271), vec3(_269, _270, _271)));
    float _695 = _269 * _694;
    float _696 = _270 * _694;
    float _697 = _271 * _694;
    vec4 _702 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _704 = _702.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _861 = sqrt(((_269 * _269) + (_270 * _270)) + (_271 * _271));
        float _867 = (cbMatDynParam._m0[5u].x * _861) + cbMatDynParam._m0[5u].y;
        float _3413 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _868 = isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0));
        float _872 = (cbMatDynParam._m0[5u].z * _861) + cbMatDynParam._m0[5u].w;
        float _3424 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0))) - _868)) + _868) < ((_704 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _716 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _717 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _736 = fma(_670, cbSceneParam._m0[5u].z, fma(_669, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _668));
    float _739 = fma(_670, cbSceneParam._m0[6u].z, fma(_669, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _668));
    float _742 = fma(_670, cbSceneParam._m0[7u].z, fma(_669, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _668));
    uint _755 = uint(roundEven(NORMAL.w)) * 13u;
    uint _757 = _755 + 9u;
    uint _758 = _757 + uint(cbMatDynParam._m0[0u].w);
    float _764 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0)))) * cbInstanceData._m0[_758].x;
    float _765 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0)))) * cbInstanceData._m0[_758].y;
    float _766 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0)))) * cbInstanceData._m0[_758].z;
    float _3435 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _767 = isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0));
    float _3446 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _768 = isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0));
    float _3457 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _769 = isnan(1.0) ? _3457 : (isnan(_3457) ? 1.0 : min(_3457, 1.0));
    vec4 _778 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _716, cbSceneParam._m0[86u].y * _717));
    float _781 = _778.x * TEXCOORD_4.z;
    float _782 = dot(vec3(_668, _669, _670), vec3(_695, _696, _697));
    float _785 = _782 * 2.0;
    float _789 = (_785 * _668) - _695;
    float _790 = (_785 * _669) - _696;
    float _791 = (_785 * _670) - _697;
    float _795 = abs(dot(vec3(_695, _696, _697), vec3(_668, _669, _670)));
    float _3468 = isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0));
    float _797 = sqrt(_671);
    float _810 = exp2((_797 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_797 * 3.0));
    float _842 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _846 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _850 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1179;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _906 = fma(_850, cbModelParam._m0[26u].z, fma(_846, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _842));
        float _910 = fma(_850, cbModelParam._m0[27u].z, fma(_846, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _842));
        float _914 = fma(_850, cbModelParam._m0[28u].z, fma(_846, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _842));
        float _937 = _842 + _668;
        float _938 = _846 + _669;
        float _939 = _850 + _670;
        float _949 = fma(_939, cbModelParam._m0[26u].z, fma(_938, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _937)) - _906;
        float _950 = fma(_939, cbModelParam._m0[27u].z, fma(_938, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _937)) - _910;
        float _951 = fma(_939, cbModelParam._m0[28u].z, fma(_938, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _937)) - _914;
        float _955 = inversesqrt(dot(vec3(_949, _950, _951), vec3(_949, _950, _951)));
        float _968 = ((_955 * _949) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_906 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _969 = ((_955 * _950) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_910 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _970 = ((_955 * _951) / cbModelParam._m0[34u].z) + ((((((_914 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_968, _969, _970), 0.0);
        vec4 _980 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_968, _969, _970), 0.0);
        vec4 _987 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_968, _969, _970), 0.0);
        vec4 _994 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_968, _969, _970), 0.0);
        float _1007 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1008 = _1007 * (_973.x + (-0.5));
        float _1009 = _1007 * (_973.y + (-0.5));
        float _1010 = _1007 * (_973.z + (-0.5));
        float _1017 = exp2((_980.w + (-0.5)) * 20.0) * 2.0;
        float _1018 = _1017 * (_980.x + (-0.5));
        float _1019 = _1017 * (_980.y + (-0.5));
        float _1020 = _1017 * (_980.z + (-0.5));
        float _1027 = exp2((_987.w + (-0.5)) * 20.0) * 2.0;
        float _1028 = _1027 * (_987.x + (-0.5));
        float _1029 = _1027 * (_987.y + (-0.5));
        float _1030 = _1027 * (_987.z + (-0.5));
        float _1037 = exp2((_994.w + (-0.5)) * 20.0) * 2.0;
        float _1038 = _1037 * (_994.x + (-0.5));
        float _1039 = _1037 * (_994.y + (-0.5));
        float _1040 = _1037 * (_994.z + (-0.5));
        float _1041 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1042 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1043 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1044 = _1008 * 0.5;
        float _1045 = _1018 * 0.5;
        float _1046 = _1028 * 0.5;
        float _1047 = dot(vec3(_1044, _1045, _1046), vec3(_1044, _1045, _1046));
        float _1052 = (_1047 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1047);
        float _1061 = (dot(vec3(_668, _669, _670), vec3(_1052 * _1044, _1052 * _1045, _1052 * _1046)) + 1.0) * 0.5;
        float _3494 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1071 = sqrt(((_1045 * _1045) + (_1044 * _1044)) + (_1046 * _1046)) / (_1041 + 9.9999997473787516355514526367188e-06);
        float _3505 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0));
        float _1073 = _1072 * 2.0;
        float _1077 = (1.0 - _1072) / (_1072 + 1.0);
        float _3516 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
        float _1087 = ((((1.0 - _1078) * (_1073 + 2.0)) * exp2(log2(isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0))) * (_1073 + 1.0))) + _1078) * _1041;
        float _1088 = _1009 * 0.5;
        float _1089 = _1019 * 0.5;
        float _1090 = _1029 * 0.5;
        float _1091 = dot(vec3(_1088, _1089, _1090), vec3(_1088, _1089, _1090));
        float _1096 = (_1091 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1091);
        float _1104 = (dot(vec3(_668, _669, _670), vec3(_1096 * _1088, _1096 * _1089, _1096 * _1090)) + 1.0) * 0.5;
        float _3527 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1113 = sqrt(((_1089 * _1089) + (_1088 * _1088)) + (_1090 * _1090)) / (_1042 + 9.9999997473787516355514526367188e-06);
        float _3538 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0));
        float _1115 = _1114 * 2.0;
        float _1119 = (1.0 - _1114) / (_1114 + 1.0);
        float _3549 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
        float _1129 = ((((1.0 - _1120) * (_1115 + 2.0)) * exp2(log2(isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0))) * (_1115 + 1.0))) + _1120) * _1042;
        float _1130 = _1010 * 0.5;
        float _1131 = _1020 * 0.5;
        float _1132 = _1030 * 0.5;
        float _1133 = dot(vec3(_1130, _1131, _1132), vec3(_1130, _1131, _1132));
        float _1138 = (_1133 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1133);
        float _1146 = (dot(vec3(_668, _669, _670), vec3(_1138 * _1130, _1138 * _1131, _1138 * _1132)) + 1.0) * 0.5;
        float _3560 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1155 = sqrt(((_1131 * _1131) + (_1130 * _1130)) + (_1132 * _1132)) / (_1043 + 9.9999997473787516355514526367188e-06);
        float _3571 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0));
        float _1157 = _1156 * 2.0;
        float _1161 = (1.0 - _1156) / (_1156 + 1.0);
        float _3582 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
        float _1171 = ((((1.0 - _1162) * (_1157 + 2.0)) * exp2(log2(isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0))) * (_1157 + 1.0))) + _1162) * _1043;
        _1179 = _1010;
        _1181 = _1009;
        _1182 = _1008;
        _1183 = _1020;
        _1184 = _1019;
        _1185 = _1018;
        _1186 = _1030;
        _1187 = _1029;
        _1188 = _1028;
        _1189 = _1043;
        _1190 = _1042;
        _1191 = _1041;
        _1192 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0)));
        _1193 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0)));
        _1194 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0)));
    }
    else
    {
        _1179 = _1180;
        _1181 = _1180;
        _1182 = _1180;
        _1183 = _1180;
        _1184 = _1180;
        _1185 = _1180;
        _1186 = _1180;
        _1187 = _1180;
        _1188 = _1180;
        _1189 = _1180;
        _1190 = _1180;
        _1191 = _1180;
        _1192 = 0.0;
        _1193 = 0.0;
        _1194 = 0.0;
    }
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1223 = fma(_850, cbModelParam._m0[30u].z, fma(_846, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _842));
        float _1227 = fma(_850, cbModelParam._m0[31u].z, fma(_846, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _842));
        float _1231 = fma(_850, cbModelParam._m0[32u].z, fma(_846, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _842));
        float _1254 = _842 + _668;
        float _1255 = _846 + _669;
        float _1256 = _850 + _670;
        float _1266 = fma(_1256, cbModelParam._m0[30u].z, fma(_1255, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1254)) - _1223;
        float _1267 = fma(_1256, cbModelParam._m0[31u].z, fma(_1255, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1254)) - _1227;
        float _1268 = fma(_1256, cbModelParam._m0[32u].z, fma(_1255, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1254)) - _1231;
        float _1272 = inversesqrt(dot(vec3(_1266, _1267, _1268), vec3(_1266, _1267, _1268)));
        float _1285 = ((_1272 * _1266) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1223 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1286 = ((_1272 * _1267) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1227 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1287 = ((_1272 * _1268) / cbModelParam._m0[35u].z) + ((((((_1231 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1289 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        vec4 _1296 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        vec4 _1303 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        vec4 _1310 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1285, _1286, _1287), 0.0);
        float _1322 = exp2((_1289.w + (-0.5)) * 20.0) * 2.0;
        float _1323 = _1322 * (_1289.x + (-0.5));
        float _1324 = _1322 * (_1289.y + (-0.5));
        float _1325 = _1322 * (_1289.z + (-0.5));
        float _1332 = exp2((_1296.w + (-0.5)) * 20.0) * 2.0;
        float _1333 = _1332 * (_1296.x + (-0.5));
        float _1334 = _1332 * (_1296.y + (-0.5));
        float _1335 = _1332 * (_1296.z + (-0.5));
        float _1342 = exp2((_1303.w + (-0.5)) * 20.0) * 2.0;
        float _1343 = _1342 * (_1303.x + (-0.5));
        float _1344 = _1342 * (_1303.y + (-0.5));
        float _1345 = _1342 * (_1303.z + (-0.5));
        float _1352 = exp2((_1310.w + (-0.5)) * 20.0) * 2.0;
        float _1353 = _1352 * (_1310.x + (-0.5));
        float _1354 = _1352 * (_1310.y + (-0.5));
        float _1355 = _1352 * (_1310.z + (-0.5));
        float _1356 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1357 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1358 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1359 = _1323 * 0.5;
        float _1360 = _1333 * 0.5;
        float _1361 = _1343 * 0.5;
        float _1362 = dot(vec3(_1359, _1360, _1361), vec3(_1359, _1360, _1361));
        float _1367 = (_1362 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1362);
        float _1375 = (dot(vec3(_668, _669, _670), vec3(_1367 * _1359, _1367 * _1360, _1367 * _1361)) + 1.0) * 0.5;
        float _3623 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1384 = sqrt(((_1360 * _1360) + (_1359 * _1359)) + (_1361 * _1361)) / (_1356 + 9.9999997473787516355514526367188e-06);
        float _3634 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
        float _1386 = _1385 * 2.0;
        float _1390 = (1.0 - _1385) / (_1385 + 1.0);
        float _3645 = isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0));
        float _1391 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
        float _1400 = ((((1.0 - _1391) * (_1386 + 2.0)) * exp2(log2(isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0))) * (_1386 + 1.0))) + _1391) * _1356;
        float _1401 = _1324 * 0.5;
        float _1402 = _1334 * 0.5;
        float _1403 = _1344 * 0.5;
        float _1404 = dot(vec3(_1401, _1402, _1403), vec3(_1401, _1402, _1403));
        float _1409 = (_1404 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1404);
        float _1417 = (dot(vec3(_668, _669, _670), vec3(_1409 * _1401, _1409 * _1402, _1409 * _1403)) + 1.0) * 0.5;
        float _3656 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1426 = sqrt(((_1402 * _1402) + (_1401 * _1401)) + (_1403 * _1403)) / (_1357 + 9.9999997473787516355514526367188e-06);
        float _3667 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0));
        float _1428 = _1427 * 2.0;
        float _1432 = (1.0 - _1427) / (_1427 + 1.0);
        float _3678 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
        float _1433 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
        float _1442 = ((((1.0 - _1433) * (_1428 + 2.0)) * exp2(log2(isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0))) * (_1428 + 1.0))) + _1433) * _1357;
        float _1443 = _1325 * 0.5;
        float _1444 = _1335 * 0.5;
        float _1445 = _1345 * 0.5;
        float _1446 = dot(vec3(_1443, _1444, _1445), vec3(_1443, _1444, _1445));
        float _1451 = (_1446 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1446);
        float _1459 = (dot(vec3(_668, _669, _670), vec3(_1451 * _1443, _1451 * _1444, _1451 * _1445)) + 1.0) * 0.5;
        float _3689 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1468 = sqrt(((_1444 * _1444) + (_1443 * _1443)) + (_1445 * _1445)) / (_1358 + 9.9999997473787516355514526367188e-06);
        float _3700 = isnan(0.0) ? _1468 : (isnan(_1468) ? 0.0 : max(_1468, 0.0));
        float _1469 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
        float _1470 = _1469 * 2.0;
        float _1474 = (1.0 - _1469) / (_1469 + 1.0);
        float _3711 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1475 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
        float _1484 = ((((1.0 - _1475) * (_1470 + 2.0)) * exp2(log2(isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0))) * (_1470 + 1.0))) + _1475) * _1358;
        _1492 = _1325;
        _1493 = _1324;
        _1494 = _1323;
        _1495 = _1335;
        _1496 = _1334;
        _1497 = _1333;
        _1498 = _1345;
        _1499 = _1344;
        _1500 = _1343;
        _1501 = _1358;
        _1502 = _1357;
        _1503 = _1356;
        _1504 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)));
        _1505 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)));
        _1506 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0)));
    }
    else
    {
        _1492 = _1180;
        _1493 = _1180;
        _1494 = _1180;
        _1495 = _1180;
        _1496 = _1180;
        _1497 = _1180;
        _1498 = _1180;
        _1499 = _1180;
        _1500 = _1180;
        _1501 = _1180;
        _1502 = _1180;
        _1503 = _1180;
        _1504 = 0.0;
        _1505 = 0.0;
        _1506 = 0.0;
    }
    float _1516 = (cbModelParam._m0[1u].x * (_1504 - _1192)) + _1192;
    float _1517 = (cbModelParam._m0[1u].x * (_1505 - _1193)) + _1193;
    float _1518 = (cbModelParam._m0[1u].x * (_1506 - _1194)) + _1194;
    float _1539 = fma(_1518, cbSceneParam._m0[89u].z, fma(_1517, cbSceneParam._m0[89u].y, _1516 * cbSceneParam._m0[89u].x));
    float _1542 = fma(_1518, cbSceneParam._m0[90u].z, fma(_1517, cbSceneParam._m0[90u].y, _1516 * cbSceneParam._m0[90u].x));
    float _1545 = fma(_1518, cbSceneParam._m0[91u].z, fma(_1517, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1516));
    float _1560 = _789 * 0.5;
    float _1561 = _790 * 0.5;
    float _1562 = _791 * 0.5;
    float _1563 = dot(vec4(_1560, _1561, _1562, 1.0), vec4(_1494, _1497, _1500, _1503));
    float _1566 = dot(vec4(_1560, _1561, _1562, 1.0), vec4(_1493, _1496, _1499, _1502));
    float _1569 = dot(vec4(_1560, _1561, _1562, 1.0), vec4(_1492, _1495, _1498, _1501));
    float _1603;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1576 = dot(vec4(_1560, _1561, _1562, 1.0), vec4(_1179, _1183, _1186, _1189));
        float _1580 = dot(vec4(_1560, _1561, _1562, 1.0), vec4(_1181, _1184, _1187, _1190));
        float _1584 = dot(vec4(_1560, _1561, _1562, 1.0), vec4(_1182, _1185, _1188, _1191));
        float _1591 = dot(vec4(cbModelParam._m0[39u]), vec4(_1560, _1561, _1562, 1.0));
        _1603 = dot(vec3(isnan(0.0) ? _1584 : (isnan(_1584) ? 0.0 : max(_1584, 0.0)), isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0)), isnan(0.0) ? _1576 : (isnan(_1576) ? 0.0 : max(_1576, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1591) ? 0.0 : (isnan(0.0) ? _1591 : max(0.0, _1591))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1603 = 1.0;
    }
    float _1614;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1605 = dot(vec4(cbModelParam._m0[40u]), vec4(_1560, _1561, _1562, 1.0));
        _1614 = dot(vec3(isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0)), isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0)), isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1605) ? 0.0 : (isnan(0.0) ? _1605 : max(0.0, _1605))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1614 = 1.0;
    }
    float _1618 = (_1614 * cbModelParam._m0[1u].x) + (_1603 * (1.0 - cbModelParam._m0[1u].x));
    float _1628 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _671);
    float _1629 = isnan(_1628) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1628 : min(cbModelParam._m0[25u].z, _1628));
    float _1711;
    float _1713;
    float _1715;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1678 = fma(_850, cbModelParam._m0[13u].z, fma(_846, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _842)) + cbModelParam._m0[13u].w;
        float _1682 = fma(_850, cbModelParam._m0[14u].z, fma(_846, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _842)) + cbModelParam._m0[14u].w;
        float _1686 = fma(_850, cbModelParam._m0[15u].z, fma(_846, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _842)) + cbModelParam._m0[15u].w;
        float _1689 = fma(_791, cbModelParam._m0[13u].z, fma(_790, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _789));
        float _1692 = fma(_791, cbModelParam._m0[14u].z, fma(_790, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _789));
        float _1695 = fma(_791, cbModelParam._m0[15u].z, fma(_790, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _789));
        float _1723;
        if (_1689 > 0.0)
        {
            _1723 = abs((1.0 - _1678) / _1689);
        }
        else
        {
            float frontier_phi_41_39_ladder;
            if (_1689 < 0.0)
            {
                frontier_phi_41_39_ladder = abs((_1678 + 1.0) / _1689);
            }
            else
            {
                frontier_phi_41_39_ladder = 5000.0;
            }
            _1723 = frontier_phi_41_39_ladder;
        }
        float _2068;
        if (_1692 > 0.0)
        {
            _2068 = abs((1.0 - _1682) / _1692);
        }
        else
        {
            float frontier_phi_50_46_ladder;
            if (_1692 < 0.0)
            {
                frontier_phi_50_46_ladder = abs((_1682 + 1.0) / _1692);
            }
            else
            {
                frontier_phi_50_46_ladder = 5000.0;
            }
            _2068 = frontier_phi_50_46_ladder;
        }
        float _2376;
        if (_1695 > 0.0)
        {
            _2376 = abs((1.0 - _1686) / _1695);
        }
        else
        {
            float frontier_phi_64_57_ladder;
            if (_1695 < 0.0)
            {
                frontier_phi_64_57_ladder = abs((_1686 + 1.0) / _1695);
            }
            else
            {
                frontier_phi_64_57_ladder = 5000.0;
            }
            _2376 = frontier_phi_64_57_ladder;
        }
        float _2378 = isnan(_2068) ? _1723 : (isnan(_1723) ? _2068 : min(_1723, _2068));
        float _2379 = isnan(_2376) ? _2378 : (isnan(_2378) ? _2376 : min(_2378, _2376));
        float _2383 = (_2379 * _1689) + _1678;
        float _2384 = (_2379 * _1692) + _1682;
        float _2385 = (_2379 * _1695) + _1686;
        float _2386 = _2379 * 9.9999997473787516355514526367188e-05;
        float _2387 = (-1.0) - _2386;
        float _2389 = _2386 + 1.0;
        float frontier_phi_40_64_ladder;
        float frontier_phi_40_64_ladder_1;
        float frontier_phi_40_64_ladder_2;
        if ((_2385 > _2389) || ((_2385 < _2387) || ((_2384 > _2389) || ((_2384 < _2387) || ((_2383 < _2387) || (_2383 > _2389))))))
        {
            frontier_phi_40_64_ladder = 0.0;
            frontier_phi_40_64_ladder_1 = 0.0;
            frontier_phi_40_64_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2527 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2385, cbModelParam._m0[9u].z, fma(_2384, cbModelParam._m0[9u].y, _2383 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2385, cbModelParam._m0[10u].z, fma(_2384, cbModelParam._m0[10u].y, _2383 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2385, cbModelParam._m0[11u].z, fma(_2384, cbModelParam._m0[11u].y, _2383 * cbModelParam._m0[11u].x))), _1629);
            frontier_phi_40_64_ladder = _2527.z * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_1 = _2527.y * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_2 = _2527.x * cbModelParam._m0[1u].y;
        }
        _1711 = frontier_phi_40_64_ladder_2;
        _1713 = frontier_phi_40_64_ladder_1;
        _1715 = frontier_phi_40_64_ladder;
    }
    else
    {
        vec4 _1699 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_789, _790, _791), _1629);
        _1711 = _1699.x * cbModelParam._m0[1u].y;
        _1713 = _1699.y * cbModelParam._m0[1u].y;
        _1715 = _1699.z * cbModelParam._m0[1u].y;
    }
    float _1719 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _671);
    float _1720 = isnan(_1719) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1719 : min(cbModelParam._m0[25u].w, _1719));
    float _1808;
    float _1810;
    float _1812;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1772 = fma(_850, cbModelParam._m0[21u].z, fma(_846, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _842)) + cbModelParam._m0[21u].w;
        float _1776 = fma(_850, cbModelParam._m0[22u].z, fma(_846, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _842)) + cbModelParam._m0[22u].w;
        float _1780 = fma(_850, cbModelParam._m0[23u].z, fma(_846, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _842)) + cbModelParam._m0[23u].w;
        float _1783 = fma(_791, cbModelParam._m0[21u].z, fma(_790, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _789));
        float _1786 = fma(_791, cbModelParam._m0[22u].z, fma(_790, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _789));
        float _1789 = fma(_791, cbModelParam._m0[23u].z, fma(_790, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _789));
        float _2073;
        if (_1783 > 0.0)
        {
            _2073 = abs((1.0 - _1772) / _1783);
        }
        else
        {
            float frontier_phi_52_48_ladder;
            if (_1783 < 0.0)
            {
                frontier_phi_52_48_ladder = abs((_1772 + 1.0) / _1783);
            }
            else
            {
                frontier_phi_52_48_ladder = 5000.0;
            }
            _2073 = frontier_phi_52_48_ladder;
        }
        float _2402;
        if (_1786 > 0.0)
        {
            _2402 = abs((1.0 - _1776) / _1786);
        }
        else
        {
            float frontier_phi_66_59_ladder;
            if (_1786 < 0.0)
            {
                frontier_phi_66_59_ladder = abs((_1776 + 1.0) / _1786);
            }
            else
            {
                frontier_phi_66_59_ladder = 5000.0;
            }
            _2402 = frontier_phi_66_59_ladder;
        }
        float _2592;
        if (_1789 > 0.0)
        {
            _2592 = abs((1.0 - _1780) / _1789);
        }
        else
        {
            float frontier_phi_84_77_ladder;
            if (_1789 < 0.0)
            {
                frontier_phi_84_77_ladder = abs((_1780 + 1.0) / _1789);
            }
            else
            {
                frontier_phi_84_77_ladder = 5000.0;
            }
            _2592 = frontier_phi_84_77_ladder;
        }
        float _2594 = isnan(_2402) ? _2073 : (isnan(_2073) ? _2402 : min(_2073, _2402));
        float _2595 = isnan(_2592) ? _2594 : (isnan(_2594) ? _2592 : min(_2594, _2592));
        float _2599 = (_2595 * _1783) + _1772;
        float _2600 = (_2595 * _1786) + _1776;
        float _2601 = (_2595 * _1789) + _1780;
        float _2602 = _2595 * 9.9999997473787516355514526367188e-05;
        float _2603 = (-1.0) - _2602;
        float _2605 = _2602 + 1.0;
        float frontier_phi_49_84_ladder;
        float frontier_phi_49_84_ladder_1;
        float frontier_phi_49_84_ladder_2;
        if ((_2601 > _2605) || ((_2601 < _2603) || ((_2600 > _2605) || ((_2600 < _2603) || ((_2599 < _2603) || (_2599 > _2605))))))
        {
            frontier_phi_49_84_ladder = 0.0;
            frontier_phi_49_84_ladder_1 = 0.0;
            frontier_phi_49_84_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2843 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2601, cbModelParam._m0[17u].z, fma(_2600, cbModelParam._m0[17u].y, _2599 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2601, cbModelParam._m0[18u].z, fma(_2600, cbModelParam._m0[18u].y, _2599 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2601, cbModelParam._m0[19u].z, fma(_2600, cbModelParam._m0[19u].y, _2599 * cbModelParam._m0[19u].x))), _1720);
            frontier_phi_49_84_ladder = _2843.z * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_1 = _2843.y * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_2 = _2843.x * cbModelParam._m0[1u].z;
        }
        _1808 = frontier_phi_49_84_ladder_2;
        _1810 = frontier_phi_49_84_ladder_1;
        _1812 = frontier_phi_49_84_ladder;
    }
    else
    {
        vec4 _1792 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_789, _790, _791), _1720);
        _1808 = _1792.x * cbModelParam._m0[1u].z;
        _1810 = _1792.y * cbModelParam._m0[1u].z;
        _1812 = _1792.z * cbModelParam._m0[1u].z;
    }
    float _1824 = ((((1.0 - _810) * ((_797 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_810 * _797)) * _781;
    float _1825 = _1824 * ((cbModelParam._m0[1u].w * (_1808 - _1711)) + _1711);
    float _1826 = _1824 * ((cbModelParam._m0[1u].w * (_1810 - _1713)) + _1713);
    float _1827 = _1824 * ((cbModelParam._m0[1u].w * (_1812 - _1715)) + _1715);
    float _1830 = fma(_1827, cbSceneParam._m0[89u].z, fma(_1826, cbSceneParam._m0[89u].y, _1825 * cbSceneParam._m0[89u].x));
    float _1833 = fma(_1827, cbSceneParam._m0[90u].z, fma(_1826, cbSceneParam._m0[90u].y, _1825 * cbSceneParam._m0[90u].x));
    float _1836 = fma(_1827, cbSceneParam._m0[91u].z, fma(_1826, cbSceneParam._m0[91u].y, _1825 * cbSceneParam._m0[91u].x));
    uvec4 _1846 = floatBitsToUint(cbInstanceData._m0[_755 + 5u]);
    uint _1848 = _1846.x * 14u;
    uint _1849 = _1848 + 13u;
    float _1854 = _781 + (-1.0);
    float _1857 = (cbLight._m0[_1849].x * _1854) + 1.0;
    float _1858 = (cbLight._m0[_1849].y * _1854) + 1.0;
    uint _1859 = _1848 + 5u;
    float _1865 = isnan(1.0) ? _1858 : (isnan(_1858) ? 1.0 : min(_1858, 1.0));
    uint _1869 = _1848 + 4u;
    float _1875 = isnan(1.0) ? _1857 : (isnan(_1857) ? 1.0 : min(_1857, 1.0));
    uint _1879 = _1848 | 1u;
    float _1890 = dot(vec3(cbLight._m0[_1848].xyz), vec3(_668, _669, _670));
    float _1893 = dot(vec3(cbLight._m0[_1879].xyz), vec3(_668, _669, _670));
    float _3847 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
    float _3858 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
    float _1898 = (isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0))) * 0.3183098733425140380859375;
    float _1900 = (isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0))) * 0.3183098733425140380859375;
    float _1907 = ((cbLight._m0[_1859].x * _1865) * _1900) + ((cbLight._m0[_1869].x * _1875) * _1898);
    float _1908 = ((_1865 * cbLight._m0[_1859].y) * _1900) + ((_1875 * cbLight._m0[_1869].y) * _1898);
    float _1909 = ((_1865 * cbLight._m0[_1859].z) * _1900) + ((_1875 * cbLight._m0[_1869].z) * _1898);
    uint _1911 = _1848 + 8u;
    float _1924 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1848].w)) * _671) * 0.949999988079071044921875);
    float _1925 = _1924 * _1924;
    float _1926 = cbLight._m0[_1848].x + _695;
    float _1927 = cbLight._m0[_1848].y + _696;
    float _1928 = cbLight._m0[_1848].z + _697;
    float _1932 = inversesqrt(dot(vec3(_1926, _1927, _1928), vec3(_1926, _1927, _1928)));
    float _1933 = _1932 * _1926;
    float _1934 = _1932 * _1927;
    float _1935 = _1932 * _1928;
    float _1936 = dot(vec3(_668, _669, _670), vec3(cbLight._m0[_1848].xyz));
    float _3869 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _1939 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
    float _3880 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _1940 = isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0));
    float _1941 = dot(vec3(_668, _669, _670), vec3(_1933, _1934, _1935));
    float _3891 = isnan(0.0) ? _1941 : (isnan(_1941) ? 0.0 : max(_1941, 0.0));
    float _1944 = isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0));
    float _1945 = dot(vec3(cbLight._m0[_1848].xyz), vec3(_1933, _1934, _1935));
    float _3902 = isnan(0.0) ? _1945 : (isnan(_1945) ? 0.0 : max(_1945, 0.0));
    float _1949 = _1925 * _1925;
    float _1953 = ((_1944 * _1944) * (_1949 + (-1.0))) + 1.0;
    float _1964 = (exp2(log2(1.0 - (isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1965 = 1.0 - _1925;
    float _1976 = (0.5 / (((_1940 * ((_1939 * _1965) + _1925)) + 9.9999999392252902907785028219223e-09) + (((_1940 * _1965) + _1925) * _1939))) * _1939;
    float _3913 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
    float _1978 = (isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0))) * (_1949 / ((_1953 * _1953) * 3.141590118408203125));
    uint _1989 = _1848 + 9u;
    float _2000 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1879].w)) * _671) * 0.949999988079071044921875);
    float _2001 = _2000 * _2000;
    float _2002 = cbLight._m0[_1879].x + _695;
    float _2003 = cbLight._m0[_1879].y + _696;
    float _2004 = cbLight._m0[_1879].z + _697;
    float _2008 = inversesqrt(dot(vec3(_2002, _2003, _2004), vec3(_2002, _2003, _2004)));
    float _2009 = _2008 * _2002;
    float _2010 = _2008 * _2003;
    float _2011 = _2008 * _2004;
    float _2012 = dot(vec3(_668, _669, _670), vec3(cbLight._m0[_1879].xyz));
    float _3924 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
    float _2015 = isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0));
    float _2016 = dot(vec3(_668, _669, _670), vec3(_2009, _2010, _2011));
    float _3935 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
    float _2019 = isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0));
    float _2020 = dot(vec3(cbLight._m0[_1879].xyz), vec3(_2009, _2010, _2011));
    float _3946 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
    float _2024 = _2001 * _2001;
    float _2028 = ((_2019 * _2019) * (_2024 + (-1.0))) + 1.0;
    float _2037 = (exp2(log2(1.0 - (isnan(1.0) ? _3946 : (isnan(_3946) ? 1.0 : min(_3946, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2038 = 1.0 - _2001;
    float _2048 = (0.5 / (((_1940 * ((_2015 * _2038) + _2001)) + 9.9999999392252902907785028219223e-09) + (((_1940 * _2038) + _2001) * _2015))) * _2015;
    float _3957 = isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0));
    float _2050 = (isnan(1.0) ? _3957 : (isnan(_3957) ? 1.0 : min(_3957, 1.0))) * (_2024 / ((_2028 * _2028) * 3.141590118408203125));
    float _2060 = (((_2037 * cbLight._m0[_1989].x) * _2050) * _1865) + (((_1964 * cbLight._m0[_1911].x) * _1978) * _1875);
    float _2061 = (((_2037 * cbLight._m0[_1989].y) * _2050) * _1865) + (((_1964 * cbLight._m0[_1911].y) * _1978) * _1875);
    float _2062 = (((_2037 * cbLight._m0[_1989].z) * _2050) * _1865) + (((_1964 * cbLight._m0[_1911].z) * _1978) * _1875);
    float _2177;
    float _2179;
    float _2181;
    float _2183;
    float _2185;
    float _2187;
    if (_1846.y == 0u)
    {
        float _2117 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2118 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2117;
        float _2119 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2117;
        float _2120 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2117;
        uvec4 _2132 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2133 = _2132.x;
        uint _2144 = uint((float(_2132.y) * floor(float(uint(cbSceneParam._m0[85u].y * _717) / _2133))) + floor(float(uint(cbSceneParam._m0[85u].x * _716) / _2133)));
        float _2154 = (log2(_2120 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2155 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
        uint _2158 = uint(isnan(14.0) ? _2155 : (isnan(_2155) ? 14.0 : min(_2155, 14.0)));
        uvec4 _2163 = texelFetch(g_lightClusterGridBuffer, int(((_2158 << 2u) + (_2144 << 6u)) >> 2u));
        uint _2164 = _2163.x;
        uint _2165 = _2132.z;
        float _2255;
        float _2257;
        float _2259;
        float _2261;
        float _2263;
        float _2265;
        if (((((1u << ((_2165 >> 4u) & 15u)) + 4294967295u) & _2164) == 0u) || ((_2165 & 240u) == 0u))
        {
            _2255 = 0.0;
            _2257 = 0.0;
            _2259 = 0.0;
            _2261 = 0.0;
            _2263 = 0.0;
            _2265 = 0.0;
        }
        else
        {
            float _2256;
            float _2258;
            float _2260;
            float _2262;
            float _2264;
            float _2266;
            float _2439 = 0.0;
            float _2440 = 0.0;
            float _2441 = 0.0;
            float _2442 = 0.0;
            float _2443 = 0.0;
            float _2444 = 0.0;
            uint _2445 = 0u;
            uint _2454;
            bool _2455;
            for (;;)
            {
                _2454 = texelFetch(g_lightClassification, int((((_2158 << 5u) + (_2144 << 9u)) + (_2445 << 2u)) >> 2u)).x;
                _2455 = _2454 == 0u;
                float frontier_phi_79_pred;
                float frontier_phi_79_pred_1;
                float frontier_phi_79_pred_2;
                float frontier_phi_79_pred_3;
                float frontier_phi_79_pred_4;
                float frontier_phi_79_pred_5;
                if (_2455)
                {
                    frontier_phi_79_pred = _2444;
                    frontier_phi_79_pred_1 = _2443;
                    frontier_phi_79_pred_2 = _2442;
                    frontier_phi_79_pred_3 = _2441;
                    frontier_phi_79_pred_4 = _2440;
                    frontier_phi_79_pred_5 = _2439;
                }
                else
                {
                    float _2635;
                    float _2636;
                    float _2637;
                    float _2638;
                    float _2639;
                    float _2640;
                    uint _2641;
                    _2635 = _2439;
                    _2636 = _2440;
                    _2637 = _2441;
                    _2638 = _2442;
                    _2639 = _2443;
                    _2640 = _2444;
                    _2641 = _2454;
                    float _2536;
                    float _2537;
                    float _2538;
                    float _2539;
                    float _2540;
                    float _2541;
                    for (;;)
                    {
                        uint _2645 = uint(findLSB(_2641)) + (_2445 << 5u);
                        uint _2642 = (_2641 + 4294967295u) & _2641;
                        uint _2647 = _2645 * 48u;
                        vec4 _2661 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2647)).x, texelFetch(g_PointLightRenderingBuffer, int(_2647 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2647 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2647 + 3u)).x));
                        uint _2667 = (_2645 * 48u) + 4u;
                        vec4 _2680 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2667)).x, texelFetch(g_PointLightRenderingBuffer, int(_2667 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2667 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2667 + 3u)).x));
                        uint _2686 = (_2645 * 48u) + 8u;
                        vec3 _2697 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2686)).x, texelFetch(g_PointLightRenderingBuffer, int(_2686 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2686 + 2u)).x));
                        float _2701 = _2661.x - _2118;
                        float _2702 = _2661.y - _2119;
                        float _2703 = _2661.z - _2120;
                        float _2704 = dot(vec3(_2701, _2702, _2703), vec3(_2701, _2702, _2703));
                        float _2707 = inversesqrt(_2704);
                        float _2708 = _2707 * _2701;
                        float _2709 = _2707 * _2702;
                        float _2710 = _2707 * _2703;
                        float _2711 = dot(vec3(_736, _739, _742), vec3(_2708, _2709, _2710));
                        float _2716 = 1.0 - (_2704 * _2661.w);
                        float _3978 = isnan(0.0) ? _2716 : (isnan(_2716) ? 0.0 : max(_2716, 0.0));
                        float _2717 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
                        float _2718 = sqrt(_2704) * _2680.w;
                        float _2721 = 1.39999997615814208984375 / (_2718 + 1.39999997615814208984375);
                        float _2722 = _2721 * _2721;
                        float _2725 = ((1.0 - _2722) * _2711) + _2722;
                        float _2728 = _2718 * _2718;
                        float _2732 = ((isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0))) * _2717) / ((_2728 * 0.699999988079071044921875) + 1.0);
                        float _2736 = (-0.0) - _2118;
                        float _2737 = (-0.0) - _2119;
                        float _2738 = (-0.0) - _2120;
                        float _2742 = inversesqrt(dot(vec3(_2736, _2737, _2738), vec3(_2736, _2737, _2738)));
                        float _2743 = _2742 * _2736;
                        float _2744 = _2742 * _2737;
                        float _2745 = _2742 * _2738;
                        float _2753 = exp2(log2(1.0 / ((_2728 * 3.5) + 5.0)) * 0.25);
                        float _2754 = 1.0 - _797;
                        float _2761 = sqrt(1.0 - ((1.0 - (_2754 * _2754)) * (1.0 - (_2753 * _2753))));
                        float _2762 = _2761 * _2761;
                        float _2763 = _2762 * _2762;
                        float _2764 = _2743 + _2708;
                        float _2765 = _2744 + _2709;
                        float _2766 = _2745 + _2710;
                        float _2770 = inversesqrt(dot(vec3(_2764, _2765, _2766), vec3(_2764, _2765, _2766)));
                        float _2774 = dot(vec3(_736, _739, _742), vec3(_2743, _2744, _2745));
                        float _3994 = isnan(0.0) ? _2774 : (isnan(_2774) ? 0.0 : max(_2774, 0.0));
                        float _2777 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
                        float _2778 = dot(vec3(_736, _739, _742), vec3(_2770 * _2764, _2770 * _2765, _2770 * _2766));
                        float _4005 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
                        float _2781 = isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0));
                        float _2785 = ((_2781 * _2781) * (_2763 + (-1.0))) + 1.0;
                        float _2786 = _2721 * _2762;
                        float _2787 = _2786 * _2786;
                        float _2790 = ((1.0 - _2787) * _2711) + _2787;
                        float _4016 = isnan(0.0) ? _2790 : (isnan(_2790) ? 0.0 : max(_2790, 0.0));
                        float _2791 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
                        float _2792 = 1.0 - _2762;
                        float _2802 = (0.5 / (((_2791 * ((_2777 * _2792) + _2762)) + 9.9999999392252902907785028219223e-09) + (((_2791 * _2792) + _2762) * _2777))) * _2791;
                        float _4027 = isnan(0.0) ? _2802 : (isnan(_2802) ? 0.0 : max(_2802, 0.0));
                        float _2813 = (((_2763 * 3.1415927410125732421875) * (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0)))) / ((_2785 * _2785) * ((_2728 * 2.1991131305694580078125) + 3.141590118408203125))) * _2717;
                        _2539 = (_2732 * _2680.x) + _2638;
                        _2540 = (_2732 * _2680.y) + _2639;
                        _2541 = (_2732 * _2680.z) + _2640;
                        _2536 = (_2813 * _2697.x) + _2635;
                        _2537 = (_2813 * _2697.y) + _2636;
                        _2538 = (_2813 * _2697.z) + _2637;
                        if (_2642 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2635 = _2536;
                            _2636 = _2537;
                            _2637 = _2538;
                            _2638 = _2539;
                            _2639 = _2540;
                            _2640 = _2541;
                            _2641 = _2642;
                        }
                    }
                    frontier_phi_79_pred = _2541;
                    frontier_phi_79_pred_1 = _2540;
                    frontier_phi_79_pred_2 = _2539;
                    frontier_phi_79_pred_3 = _2538;
                    frontier_phi_79_pred_4 = _2537;
                    frontier_phi_79_pred_5 = _2536;
                }
                _2266 = frontier_phi_79_pred;
                _2264 = frontier_phi_79_pred_1;
                _2262 = frontier_phi_79_pred_2;
                _2260 = frontier_phi_79_pred_3;
                _2258 = frontier_phi_79_pred_4;
                _2256 = frontier_phi_79_pred_5;
                uint _2446 = _2445 + 1u;
                if (_2446 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2439 = _2256;
                    _2440 = _2258;
                    _2441 = _2260;
                    _2442 = _2262;
                    _2443 = _2264;
                    _2444 = _2266;
                    _2445 = _2446;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2255 = _2256;
            _2257 = _2258;
            _2259 = _2260;
            _2261 = _2262;
            _2263 = _2264;
            _2265 = _2266;
        }
        uvec4 _2269 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2270 = _2269.z;
        uint _2272 = (_2270 >> 8u) & 15u;
        float _2407;
        float _2409;
        float _2411;
        float _2413;
        float _2415;
        float _2417;
        if (((4294967295u << _2272) & _2164) == 0u)
        {
            _2407 = _2255;
            _2409 = _2257;
            _2411 = _2259;
            _2413 = _2261;
            _2415 = _2263;
            _2417 = _2265;
        }
        else
        {
            float _2432 = inversesqrt(dot(vec3(_2118, _2119, _2120), vec3(_2118, _2119, _2120)));
            float _2433 = _2432 * _2118;
            float _2434 = _2432 * _2119;
            float _2435 = _2432 * _2120;
            float frontier_phi_68_69_ladder;
            float frontier_phi_68_69_ladder_1;
            float frontier_phi_68_69_ladder_2;
            float frontier_phi_68_69_ladder_3;
            float frontier_phi_68_69_ladder_4;
            float frontier_phi_68_69_ladder_5;
            if (_2272 < ((_2270 >> 12u) & 15u))
            {
                float _2408;
                float _2410;
                float _2412;
                float _2414;
                float _2416;
                float _2418;
                float _2618 = _2255;
                float _2619 = _2257;
                float _2620 = _2259;
                float _2621 = _2261;
                float _2622 = _2263;
                float _2623 = _2265;
                uint _2624 = _2272;
                uint _2633;
                bool _2634;
                for (;;)
                {
                    _2633 = texelFetch(g_lightClassification, int((((_2158 << 5u) + (_2144 << 9u)) + (_2624 << 2u)) >> 2u)).x;
                    _2634 = _2633 == 0u;
                    float frontier_phi_93_pred;
                    float frontier_phi_93_pred_1;
                    float frontier_phi_93_pred_2;
                    float frontier_phi_93_pred_3;
                    float frontier_phi_93_pred_4;
                    float frontier_phi_93_pred_5;
                    if (_2634)
                    {
                        frontier_phi_93_pred = _2622;
                        frontier_phi_93_pred_1 = _2621;
                        frontier_phi_93_pred_2 = _2620;
                        frontier_phi_93_pred_3 = _2619;
                        frontier_phi_93_pred_4 = _2618;
                        frontier_phi_93_pred_5 = _2623;
                    }
                    else
                    {
                        float _2848;
                        float _2849;
                        float _2850;
                        float _2851;
                        float _2852;
                        float _2853;
                        float _3141;
                        float _3142;
                        float _3143;
                        float _3144;
                        float _3145;
                        float _3146;
                        float _2861 = _2618;
                        float _2862 = _2619;
                        float _2863 = _2620;
                        float _2864 = _2621;
                        float _2865 = _2622;
                        float _2866 = _2623;
                        uint _2867 = _2633;
                        uint _2868;
                        vec4 _2893;
                        float _2894;
                        vec4 _2909;
                        vec3 _2921;
                        vec4 _2936;
                        vec4 _2951;
                        float _2997;
                        bool _2998;
                        for (;;)
                        {
                            uint _2878 = ((_2624 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2867));
                            _2868 = (_2867 + 4294967295u) & _2867;
                            uint _2880 = _2878 * 40u;
                            _2893 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2880)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2880 + 3u)).x));
                            _2894 = _2893.w;
                            uint _2896 = (_2878 * 40u) + 4u;
                            _2909 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2896)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2896 + 3u)).x));
                            uint _2911 = (_2878 * 40u) + 8u;
                            _2921 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2911)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 2u)).x));
                            uint _2923 = (_2878 * 40u) + 16u;
                            _2936 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2923)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2923 + 3u)).x));
                            uint _2938 = (_2878 * 40u) + 20u;
                            _2951 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2938)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 3u)).x));
                            uint _2953 = (_2878 * 40u) + 24u;
                            vec4 _2966 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2953)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2953 + 3u)).x));
                            uint _2972 = (_2878 * 40u) + 28u;
                            vec4 _2985 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2972)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 3u)).x));
                            _2997 = fma(_2120, _2985.z, fma(_2119, _2985.y, _2985.x * _2118)) + _2985.w;
                            _2998 = !((fma(_2120, _2966.z, fma(_2119, _2966.y, _2966.x * _2118)) + _2966.w) <= 0.0);
                            float frontier_phi_99_pred;
                            float frontier_phi_99_pred_1;
                            float frontier_phi_99_pred_2;
                            float frontier_phi_99_pred_3;
                            float frontier_phi_99_pred_4;
                            float frontier_phi_99_pred_5;
                            if (_2998)
                            {
                                float _3025 = _2893.x - _2118;
                                float _3026 = _2893.y - _2119;
                                float _3027 = _2893.z - _2120;
                                float _3028 = dot(vec3(_3025, _3026, _3027), vec3(_3025, _3026, _3027));
                                float _3031 = inversesqrt(_3028);
                                float _3032 = _3031 * _3025;
                                float _3033 = _3031 * _3026;
                                float _3034 = _3031 * _3027;
                                float _3038 = 1.0 - (_3028 / (_2894 * _2894));
                                float _4038 = isnan(0.0) ? _3038 : (isnan(_3038) ? 0.0 : max(_3038, 0.0));
                                float _3039 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
                                float _3043 = sqrt(_3028) * _2909.w;
                                float _3045 = 1.39999997615814208984375 / (_3043 + 1.39999997615814208984375);
                                float _3046 = _3045 * _3045;
                                float _3049 = ((1.0 - _3046) * dot(vec3(_3032, _3033, _3034), vec3(_736, _739, _742))) + _3046;
                                float _3052 = _3043 * _3043;
                                float _3056 = (fma(_2120, _2936.z, fma(_2119, _2936.y, _2936.x * _2118)) + _2936.w) / _2997;
                                float _3057 = (fma(_2120, _2951.z, fma(_2119, _2951.y, _2951.x * _2118)) + _2951.w) / _2997;
                                float _3061 = 1.0 - dot(vec2(_3056, _3057), vec2(_3056, _3057));
                                float _4054 = isnan(0.0) ? _3061 : (isnan(_3061) ? 0.0 : max(_3061, 0.0));
                                float _3062 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
                                float _3063 = _3062 * (((isnan(0.0) ? _3049 : (isnan(_3049) ? 0.0 : max(_3049, 0.0))) * _3039) / ((_3052 * 0.699999988079071044921875) + 1.0));
                                float _3075 = exp2(log2(1.0 / ((_3052 * 3.5) + 5.0)) * 0.25);
                                float _3076 = 1.0 - _797;
                                float _3083 = sqrt(1.0 - ((1.0 - (_3076 * _3076)) * (1.0 - (_3075 * _3075))));
                                float _3084 = _3083 * _3083;
                                float _3085 = _3084 * _3084;
                                float _3086 = _3032 - _2433;
                                float _3087 = _3033 - _2434;
                                float _3088 = _3034 - _2435;
                                float _3092 = inversesqrt(dot(vec3(_3086, _3087, _3088), vec3(_3086, _3087, _3088)));
                                float _3096 = dot(vec3(_736, _739, _742), vec3((-0.0) - _2433, (-0.0) - _2434, (-0.0) - _2435));
                                float _4065 = isnan(0.0) ? _3096 : (isnan(_3096) ? 0.0 : max(_3096, 0.0));
                                float _3099 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
                                float _3100 = dot(vec3(_736, _739, _742), vec3(_3092 * _3086, _3092 * _3087, _3092 * _3088));
                                float _4076 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0));
                                float _3103 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
                                float _3107 = ((_3103 * _3103) * (_3085 + (-1.0))) + 1.0;
                                float _3108 = _3045 * _3084;
                                float _3109 = _3108 * _3108;
                                float _3115 = ((1.0 - _3109) * dot(vec3(_736, _739, _742), vec3(_3032, _3033, _3034))) + _3109;
                                float _4087 = isnan(0.0) ? _3115 : (isnan(_3115) ? 0.0 : max(_3115, 0.0));
                                float _3116 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
                                float _3117 = 1.0 - _3084;
                                float _3127 = (0.5 / (((_3116 * ((_3099 * _3117) + _3084)) + 9.9999999392252902907785028219223e-09) + (((_3116 * _3117) + _3084) * _3099))) * _3116;
                                float _4098 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
                                float _3137 = (_3062 * _3039) * (((_3085 * 3.1415927410125732421875) * (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0)))) / ((_3107 * _3107) * ((_3052 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_99_pred = _3063 * _2909.z;
                                frontier_phi_99_pred_1 = _3063 * _2909.y;
                                frontier_phi_99_pred_2 = _3063 * _2909.x;
                                frontier_phi_99_pred_3 = _3137 * _2921.z;
                                frontier_phi_99_pred_4 = _3137 * _2921.y;
                                frontier_phi_99_pred_5 = _3137 * _2921.x;
                            }
                            else
                            {
                                frontier_phi_99_pred = 0.0;
                                frontier_phi_99_pred_1 = 0.0;
                                frontier_phi_99_pred_2 = 0.0;
                                frontier_phi_99_pred_3 = 0.0;
                                frontier_phi_99_pred_4 = 0.0;
                                frontier_phi_99_pred_5 = 0.0;
                            }
                            _3146 = frontier_phi_99_pred;
                            _3145 = frontier_phi_99_pred_1;
                            _3144 = frontier_phi_99_pred_2;
                            _3143 = frontier_phi_99_pred_3;
                            _3142 = frontier_phi_99_pred_4;
                            _3141 = frontier_phi_99_pred_5;
                            _2851 = _3144 + _2864;
                            _2852 = _3145 + _2865;
                            _2853 = _3146 + _2866;
                            _2848 = _3141 + _2861;
                            _2849 = _3142 + _2862;
                            _2850 = _3143 + _2863;
                            if (_2868 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2861 = _2848;
                                _2862 = _2849;
                                _2863 = _2850;
                                _2864 = _2851;
                                _2865 = _2852;
                                _2866 = _2853;
                                _2867 = _2868;
                                continue;
                            }
                        }
                        frontier_phi_93_pred = _2852;
                        frontier_phi_93_pred_1 = _2851;
                        frontier_phi_93_pred_2 = _2850;
                        frontier_phi_93_pred_3 = _2849;
                        frontier_phi_93_pred_4 = _2848;
                        frontier_phi_93_pred_5 = _2853;
                    }
                    _2416 = frontier_phi_93_pred;
                    _2414 = frontier_phi_93_pred_1;
                    _2412 = frontier_phi_93_pred_2;
                    _2410 = frontier_phi_93_pred_3;
                    _2408 = frontier_phi_93_pred_4;
                    _2418 = frontier_phi_93_pred_5;
                    uint _2625 = _2624 + 1u;
                    if (_2625 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2618 = _2408;
                        _2619 = _2410;
                        _2620 = _2412;
                        _2621 = _2414;
                        _2622 = _2416;
                        _2623 = _2418;
                        _2624 = _2625;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_68_69_ladder = _2418;
                frontier_phi_68_69_ladder_1 = _2416;
                frontier_phi_68_69_ladder_2 = _2414;
                frontier_phi_68_69_ladder_3 = _2412;
                frontier_phi_68_69_ladder_4 = _2408;
                frontier_phi_68_69_ladder_5 = _2410;
            }
            else
            {
                frontier_phi_68_69_ladder = _2265;
                frontier_phi_68_69_ladder_1 = _2263;
                frontier_phi_68_69_ladder_2 = _2261;
                frontier_phi_68_69_ladder_3 = _2259;
                frontier_phi_68_69_ladder_4 = _2255;
                frontier_phi_68_69_ladder_5 = _2257;
            }
            _2407 = frontier_phi_68_69_ladder_4;
            _2409 = frontier_phi_68_69_ladder_5;
            _2411 = frontier_phi_68_69_ladder_3;
            _2413 = frontier_phi_68_69_ladder_2;
            _2415 = frontier_phi_68_69_ladder_1;
            _2417 = frontier_phi_68_69_ladder;
        }
        float _2422 = isnan(1.0) ? _781 : (isnan(_781) ? 1.0 : min(_781, 1.0));
        _2177 = (_2422 * _2413) + _1907;
        _2179 = (_2422 * _2415) + _1908;
        _2181 = (_2422 * _2417) + _1909;
        _2183 = ((_2407 * 0.039999999105930328369140625) * _2422) + _2060;
        _2185 = ((_2409 * 0.039999999105930328369140625) * _2422) + _2061;
        _2187 = ((_2411 * 0.039999999105930328369140625) * _2422) + _2062;
    }
    else
    {
        _2177 = _1907;
        _2179 = _1908;
        _2181 = _1909;
        _2183 = _2060;
        _2185 = _2061;
        _2187 = _2062;
    }
    float _4114 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _4125 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _4136 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _2204 = ((isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_2177 + ((isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0))) * _781))) + ((_2183 + ((isnan(0.0) ? _1830 : (isnan(_1830) ? 0.0 : max(_1830, 0.0))) * _1618)) * cbPerFrame._m0[3u].x);
    float _2205 = ((isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0))) * (_2179 + ((isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0))) * _781))) + ((_2185 + ((isnan(0.0) ? _1833 : (isnan(_1833) ? 0.0 : max(_1833, 0.0))) * _1618)) * cbPerFrame._m0[3u].x);
    float _2206 = ((isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0))) * (_2181 + ((isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0))) * _781))) + ((_2187 + ((isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0))) * _1618)) * cbPerFrame._m0[3u].x);
    float _2207 = isnan(0.0) ? _2204 : (isnan(_2204) ? 0.0 : max(_2204, 0.0));
    float _2208 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
    float _2209 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
    uint _2210 = _755 + 6u;
    float _2218 = _716 / cbSceneParam._m0[86u].x;
    float _2219 = _717 / cbSceneParam._m0[86u].y;
    vec4 _2233 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2218, _2219, (log2((isnan(cbSceneParam._m0[77u].w) ? _690 : (isnan(_690) ? cbSceneParam._m0[77u].w : min(_690, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2235 = _2233.x;
    float _2236 = _2233.y;
    float _2237 = _2233.z;
    float _2238 = _2233.w;
    float _2318;
    float _2320;
    float _2322;
    float _2324;
    if (_690 > cbSceneParam._m0[78u].w)
    {
        float _2280 = isnan(_690) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _690 : min(cbSceneParam._m0[80u].w, _690));
        float _2281 = _2280 / _690;
        float _2292 = _2281 * _269;
        float _2293 = _270 * _2281;
        float _2294 = (-0.0) - _2293;
        float _2295 = _2281 * _271;
        float _2297 = (cbSceneParam._m0[77u].w * _2294) / _2280;
        float _2298 = _2297 + cbSceneParam._m0[79u].w;
        float _2299 = cbSceneParam._m0[79u].w - _2293;
        float _2305 = sqrt(((_2292 * _2292) + (_2293 * _2293)) + (_2295 * _2295));
        float _2308 = (1.0 - (cbSceneParam._m0[77u].w / _2280)) * _2305;
        float _2314 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2316 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2549;
        if (abs((_2294 - _2297) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2549 = ((((_2298 > 0.0) ? exp2(_2314 * _2298) : (2.0 - exp2(_2316 * _2298))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2308;
        }
        else
        {
            float _2468 = 1.0 / cbSceneParam._m0[80u].x;
            float _2469 = isnan(_2299) ? _2298 : (isnan(_2298) ? _2299 : max(_2298, _2299));
            float _2470 = isnan(_2299) ? _2298 : (isnan(_2298) ? _2299 : min(_2298, _2299));
            float _2479 = isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : min(_2469, 0.0));
            float _2480 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : min(_2470, 0.0));
            _2549 = ((abs(_2305 / _2294) * cbSceneParam._m0[80u].y) * ((((_2479 - _2480) * 2.0) - ((exp2(_2314 * (isnan(0.0) ? _2469 : (isnan(_2469) ? 0.0 : max(_2469, 0.0)))) - exp2(_2314 * (isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0))))) * _2468)) - ((exp2(_2316 * _2479) - exp2(_2316 * _2480)) * _2468))) + (_2308 * cbSceneParam._m0[80u].z);
        }
        vec4 _2551 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2218, _2219, 1.0), 0.0);
        float _2560 = exp2((_2549 * (-1.44269502162933349609375)) * (1.0 - _2551.w));
        float _2561 = log2(_2560);
        float _2577 = log2(_2238);
        _2318 = (exp2(_2577 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2561 * cbSceneParam._m0[78u].x)) * _2551.x) / cbSceneParam._m0[78u].x)) + _2235;
        _2320 = (exp2(_2577 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2561 * cbSceneParam._m0[78u].y)) * _2551.y) / cbSceneParam._m0[78u].y)) + _2236;
        _2322 = (exp2(_2577 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2561 * cbSceneParam._m0[78u].z)) * _2551.z) / cbSceneParam._m0[78u].z)) + _2237;
        _2324 = _2560 * _2238;
    }
    else
    {
        _2318 = _2235;
        _2320 = _2236;
        _2322 = _2237;
        _2324 = _2238;
    }
    bool _2587;
    vec4 _2334;
    vec4 _2356;
    float _2358;
    float _2362;
    float _2363;
    float _2364;
    float _2365;
    bool _2375;
    for (;;)
    {
        _2334 = cbMatDynParam._m0[0u];
        float _2336 = roundEven(_2334.y);
        bool _2337 = _2336 == 3.0;
        float _2338 = log2(_2324);
        float _2345 = exp2(_2338 * cbSceneParam._m0[78u].x) * _2207;
        float _2346 = exp2(_2338 * cbSceneParam._m0[78u].y) * _2208;
        float _2347 = exp2(_2338 * cbSceneParam._m0[78u].z) * _2209;
        float _2354 = _704 + (-0.5);
        _2356 = cbMtdParam._m0[1u];
        _2358 = _2356.y * _2354;
        float _2361 = (_2336 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2362 = _2361 * (_2337 ? _2345 : (_2345 + (cbSceneParam._m0[72u].w * _2318)));
        _2363 = _2361 * (_2337 ? _2346 : (_2346 + (cbSceneParam._m0[72u].w * _2320)));
        _2364 = _2361 * (_2337 ? _2347 : (_2347 + (cbSceneParam._m0[72u].w * _2322)));
        _2365 = _2354 * 0.999000012874603271484375;
        _2375 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2375)
        {
            if ((cbInstanceData._m0[_755 + 7u].x + _2365) < 0.5)
            {
                _2587 = true;
                break;
            }
        }
        uint _2503 = _757 + uint(_2334.w);
        if ((cbInstanceData._m0[_2503].w < 1.0) && ((cbInstanceData._m0[_2503].w + _2365) < 0.5))
        {
            _2587 = true;
            break;
        }
        if ((_2358 + 1.0) < _2356.x)
        {
            _2587 = true;
            break;
        }
        _2587 = false;
        break;
    }
    float _2818;
    if (_2587)
    {
        discard_state = true;
        _2818 = 0.0;
    }
    else
    {
        _2818 = cbInstanceData._m0[_2210].w;
    }
    SV_Target.x = _2362;
    SV_Target.y = _2363;
    SV_Target.z = _2364;
    SV_Target.w = _2818;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2210].w;
    discard_exit();
}


