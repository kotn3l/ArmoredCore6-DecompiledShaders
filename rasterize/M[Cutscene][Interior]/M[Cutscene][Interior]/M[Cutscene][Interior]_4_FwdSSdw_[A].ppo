#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1033;
float _3187;
float _3188;
float _3189;
float _3190;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _196 = _195 * _188;
    float _197 = _195 * _189;
    float _198 = _195 * _190;
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210 = _209 * TANGENT.x;
    float _211 = _209 * TANGENT.y;
    float _212 = _209 * TANGENT.z;
    float _257 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _267 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _257);
    float _268 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _257);
    float _269 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _257);
    vec4 _282 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _285 = _282.x;
    vec4 _303 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _320 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _285) + cbMtdParam._m0[12u].x) * _303.x;
    float _322 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _285) + cbMtdParam._m0[12u].y) * _303.y;
    float _324 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _285) + cbMtdParam._m0[12u].z) * _303.z;
    vec4 _342 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _378 = cbMtdParam._m0[24u].x + _267;
    float _379 = cbMtdParam._m0[24u].y + _268;
    float _380 = cbMtdParam._m0[24u].z + _269;
    float _394 = (-0.0) - dot(vec3(_378, _379, _380), vec3(_196, _197, _198));
    float _395 = (-0.0) - dot(vec3(_378, _379, _380), vec3(_210, _211, _212));
    float _396 = (-0.0) - dot(vec3(_378, _379, _380), vec3((-0.0) - _203, (-0.0) - _204, (-0.0) - _205));
    float _400 = inversesqrt(dot(vec3(_394, _395, _396), vec3(_394, _395, _396)));
    float _403 = _400 * _396;
    float _406 = ((_400 * _394) + ((cbMtdParam._m0[22u].x * _285) * ((_342.x * 2.0) + (-1.0)))) * cbMtdParam._m0[20u].w;
    float _407 = ((_400 * _395) + ((cbMtdParam._m0[22u].y * _285) * ((_342.y * 2.0) + (-1.0)))) * cbMtdParam._m0[20u].z;
    float _408 = fract(TEXCOORD.x);
    float _409 = fract(TEXCOORD.y);
    float _415;
    if (_406 > 0.0)
    {
        _415 = (1.0 - _408) / _406;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_406 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _408) / _406;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _415 = frontier_phi_3_2_ladder;
    }
    float _423;
    if (_407 > 0.0)
    {
        _423 = (1.0 - _409) / _407;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_407 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _409) / _407;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _423 = frontier_phi_7_6_ladder;
    }
    float _427 = (_403 > 0.0) ? (cbMtdParam._m0[16u].x / _403) : 5000.0;
    float _428 = isnan(_423) ? _415 : (isnan(_415) ? _423 : min(_415, _423));
    float _429 = isnan(_427) ? _428 : (isnan(_428) ? _427 : min(_428, _427));
    float _433 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _440 = ((_429 * _403) + _433) / _433;
    vec4 _465 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * ((((((_408 + (-0.5)) + (_429 * _406)) / _440) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * ((((((_409 + (-0.5)) + (_429 * _407)) / _440) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    vec4 _493 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _497 = _493.z;
    float _500 = (_493.x * 2.0) + (-1.0);
    float _501 = (_493.y * 2.0) + (-1.0);
    float _502 = dot(vec2(_500, _501), vec2(_500, _501));
    float _3209 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _507 = sqrt(1.0 - (isnan(1.0) ? _3209 : (isnan(_3209) ? 1.0 : min(_3209, 1.0))));
    float _510 = fma(_507, _203, fma(_501, _210, _500 * _196));
    float _513 = fma(_507, _204, fma(_501, _211, _500 * _197));
    float _516 = fma(_507, _205, fma(_501, _212, _500 * _198));
    float _520 = inversesqrt(dot(vec3(_510, _513, _516), vec3(_510, _513, _516)));
    float _521 = _520 * _510;
    float _522 = _520 * _513;
    float _523 = _520 * _516;
    float _3220 = isnan(0.0) ? _497 : (isnan(_497) ? 0.0 : max(_497, 0.0));
    float _524 = isnan(1.0) ? _3220 : (isnan(_3220) ? 1.0 : min(_3220, 1.0));
    float _3231 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _3242 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _3253 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _543 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _547 = inversesqrt(dot(vec3(_267, _268, _269), vec3(_267, _268, _269)));
    float _548 = _267 * _547;
    float _549 = _268 * _547;
    float _550 = _269 * _547;
    vec4 _555 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _557 = _555.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _714 = sqrt(((_267 * _267) + (_268 * _268)) + (_269 * _269));
        float _720 = (cbMatDynParam._m0[5u].x * _714) + cbMatDynParam._m0[5u].y;
        float _3264 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
        float _721 = isnan(1.0) ? _3264 : (isnan(_3264) ? 1.0 : min(_3264, 1.0));
        float _725 = (cbMatDynParam._m0[5u].z * _714) + cbMatDynParam._m0[5u].w;
        float _3275 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3275 : (isnan(_3275) ? 1.0 : min(_3275, 1.0))) - _721)) + _721) < ((_557 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _569 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _570 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _589 = fma(_523, cbSceneParam._m0[5u].z, fma(_522, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _521));
    float _592 = fma(_523, cbSceneParam._m0[6u].z, fma(_522, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _521));
    float _595 = fma(_523, cbSceneParam._m0[7u].z, fma(_522, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _521));
    uint _608 = uint(roundEven(NORMAL.w)) * 13u;
    uint _610 = _608 + 9u;
    uint _611 = _610 + uint(cbMatDynParam._m0[0u].w);
    float _617 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3231 : (isnan(_3231) ? 1.0 : min(_3231, 1.0)))) * cbInstanceData._m0[_611].x;
    float _618 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3242 : (isnan(_3242) ? 1.0 : min(_3242, 1.0)))) * cbInstanceData._m0[_611].y;
    float _619 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3253 : (isnan(_3253) ? 1.0 : min(_3253, 1.0)))) * cbInstanceData._m0[_611].z;
    float _3286 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _620 = isnan(1.0) ? _3286 : (isnan(_3286) ? 1.0 : min(_3286, 1.0));
    float _3297 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _621 = isnan(1.0) ? _3297 : (isnan(_3297) ? 1.0 : min(_3297, 1.0));
    float _3308 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _622 = isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0));
    vec4 _631 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _569, cbSceneParam._m0[86u].y * _570));
    float _634 = _631.x * TEXCOORD_4.z;
    float _635 = dot(vec3(_521, _522, _523), vec3(_548, _549, _550));
    float _638 = _635 * 2.0;
    float _642 = (_638 * _521) - _548;
    float _643 = (_638 * _522) - _549;
    float _644 = (_638 * _523) - _550;
    float _648 = abs(dot(vec3(_548, _549, _550), vec3(_521, _522, _523)));
    float _3319 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _650 = sqrt(_524);
    float _663 = exp2((_650 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_650 * 3.0));
    float _695 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _699 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _703 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1032;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _759 = fma(_703, cbModelParam._m0[26u].z, fma(_699, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _695));
        float _763 = fma(_703, cbModelParam._m0[27u].z, fma(_699, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _695));
        float _767 = fma(_703, cbModelParam._m0[28u].z, fma(_699, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _695));
        float _790 = _695 + _521;
        float _791 = _699 + _522;
        float _792 = _703 + _523;
        float _802 = fma(_792, cbModelParam._m0[26u].z, fma(_791, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _790)) - _759;
        float _803 = fma(_792, cbModelParam._m0[27u].z, fma(_791, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _790)) - _763;
        float _804 = fma(_792, cbModelParam._m0[28u].z, fma(_791, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _790)) - _767;
        float _808 = inversesqrt(dot(vec3(_802, _803, _804), vec3(_802, _803, _804)));
        float _821 = ((_808 * _802) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_759 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _822 = ((_808 * _803) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_763 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _823 = ((_808 * _804) / cbModelParam._m0[34u].z) + ((((((_767 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _826 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_821, _822, _823), 0.0);
        vec4 _833 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_821, _822, _823), 0.0);
        vec4 _840 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_821, _822, _823), 0.0);
        vec4 _847 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_821, _822, _823), 0.0);
        float _860 = exp2((_826.w + (-0.5)) * 20.0) * 2.0;
        float _861 = _860 * (_826.x + (-0.5));
        float _862 = _860 * (_826.y + (-0.5));
        float _863 = _860 * (_826.z + (-0.5));
        float _870 = exp2((_833.w + (-0.5)) * 20.0) * 2.0;
        float _871 = _870 * (_833.x + (-0.5));
        float _872 = _870 * (_833.y + (-0.5));
        float _873 = _870 * (_833.z + (-0.5));
        float _880 = exp2((_840.w + (-0.5)) * 20.0) * 2.0;
        float _881 = _880 * (_840.x + (-0.5));
        float _882 = _880 * (_840.y + (-0.5));
        float _883 = _880 * (_840.z + (-0.5));
        float _890 = exp2((_847.w + (-0.5)) * 20.0) * 2.0;
        float _891 = _890 * (_847.x + (-0.5));
        float _892 = _890 * (_847.y + (-0.5));
        float _893 = _890 * (_847.z + (-0.5));
        float _894 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _895 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _896 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _897 = _861 * 0.5;
        float _898 = _871 * 0.5;
        float _899 = _881 * 0.5;
        float _900 = dot(vec3(_897, _898, _899), vec3(_897, _898, _899));
        float _905 = (_900 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_900);
        float _914 = (dot(vec3(_521, _522, _523), vec3(_905 * _897, _905 * _898, _905 * _899)) + 1.0) * 0.5;
        float _3345 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _924 = sqrt(((_898 * _898) + (_897 * _897)) + (_899 * _899)) / (_894 + 9.9999997473787516355514526367188e-06);
        float _3356 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _925 = isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0));
        float _926 = _925 * 2.0;
        float _930 = (1.0 - _925) / (_925 + 1.0);
        float _3367 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _931 = isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0));
        float _940 = ((((1.0 - _931) * (_926 + 2.0)) * exp2(log2(isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0))) * (_926 + 1.0))) + _931) * _894;
        float _941 = _862 * 0.5;
        float _942 = _872 * 0.5;
        float _943 = _882 * 0.5;
        float _944 = dot(vec3(_941, _942, _943), vec3(_941, _942, _943));
        float _949 = (_944 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_944);
        float _957 = (dot(vec3(_521, _522, _523), vec3(_949 * _941, _949 * _942, _949 * _943)) + 1.0) * 0.5;
        float _3378 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _966 = sqrt(((_942 * _942) + (_941 * _941)) + (_943 * _943)) / (_895 + 9.9999997473787516355514526367188e-06);
        float _3389 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _967 = isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0));
        float _968 = _967 * 2.0;
        float _972 = (1.0 - _967) / (_967 + 1.0);
        float _3400 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _973 = isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0));
        float _982 = ((((1.0 - _973) * (_968 + 2.0)) * exp2(log2(isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0))) * (_968 + 1.0))) + _973) * _895;
        float _983 = _863 * 0.5;
        float _984 = _873 * 0.5;
        float _985 = _883 * 0.5;
        float _986 = dot(vec3(_983, _984, _985), vec3(_983, _984, _985));
        float _991 = (_986 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_986);
        float _999 = (dot(vec3(_521, _522, _523), vec3(_991 * _983, _991 * _984, _991 * _985)) + 1.0) * 0.5;
        float _3411 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1008 = sqrt(((_984 * _984) + (_983 * _983)) + (_985 * _985)) / (_896 + 9.9999997473787516355514526367188e-06);
        float _3422 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1009 = isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0));
        float _1010 = _1009 * 2.0;
        float _1014 = (1.0 - _1009) / (_1009 + 1.0);
        float _3433 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        float _1015 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
        float _1024 = ((((1.0 - _1015) * (_1010 + 2.0)) * exp2(log2(isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0))) * (_1010 + 1.0))) + _1015) * _896;
        _1032 = _863;
        _1034 = _862;
        _1035 = _861;
        _1036 = _873;
        _1037 = _872;
        _1038 = _871;
        _1039 = _883;
        _1040 = _882;
        _1041 = _881;
        _1042 = _896;
        _1043 = _895;
        _1044 = _894;
        _1045 = cbModelParam._m0[36u].z * (isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0)));
        _1046 = cbModelParam._m0[36u].z * (isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0)));
        _1047 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0)));
    }
    else
    {
        _1032 = _1033;
        _1034 = _1033;
        _1035 = _1033;
        _1036 = _1033;
        _1037 = _1033;
        _1038 = _1033;
        _1039 = _1033;
        _1040 = _1033;
        _1041 = _1033;
        _1042 = _1033;
        _1043 = _1033;
        _1044 = _1033;
        _1045 = 0.0;
        _1046 = 0.0;
        _1047 = 0.0;
    }
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1076 = fma(_703, cbModelParam._m0[30u].z, fma(_699, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _695));
        float _1080 = fma(_703, cbModelParam._m0[31u].z, fma(_699, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _695));
        float _1084 = fma(_703, cbModelParam._m0[32u].z, fma(_699, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _695));
        float _1107 = _695 + _521;
        float _1108 = _699 + _522;
        float _1109 = _703 + _523;
        float _1119 = fma(_1109, cbModelParam._m0[30u].z, fma(_1108, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1107)) - _1076;
        float _1120 = fma(_1109, cbModelParam._m0[31u].z, fma(_1108, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1107)) - _1080;
        float _1121 = fma(_1109, cbModelParam._m0[32u].z, fma(_1108, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1107)) - _1084;
        float _1125 = inversesqrt(dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121)));
        float _1138 = ((_1125 * _1119) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1076 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1139 = ((_1125 * _1120) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1080 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1140 = ((_1125 * _1121) / cbModelParam._m0[35u].z) + ((((((_1084 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1142 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1138, _1139, _1140), 0.0);
        vec4 _1149 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1138, _1139, _1140), 0.0);
        vec4 _1156 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1138, _1139, _1140), 0.0);
        vec4 _1163 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1138, _1139, _1140), 0.0);
        float _1175 = exp2((_1142.w + (-0.5)) * 20.0) * 2.0;
        float _1176 = _1175 * (_1142.x + (-0.5));
        float _1177 = _1175 * (_1142.y + (-0.5));
        float _1178 = _1175 * (_1142.z + (-0.5));
        float _1185 = exp2((_1149.w + (-0.5)) * 20.0) * 2.0;
        float _1186 = _1185 * (_1149.x + (-0.5));
        float _1187 = _1185 * (_1149.y + (-0.5));
        float _1188 = _1185 * (_1149.z + (-0.5));
        float _1195 = exp2((_1156.w + (-0.5)) * 20.0) * 2.0;
        float _1196 = _1195 * (_1156.x + (-0.5));
        float _1197 = _1195 * (_1156.y + (-0.5));
        float _1198 = _1195 * (_1156.z + (-0.5));
        float _1205 = exp2((_1163.w + (-0.5)) * 20.0) * 2.0;
        float _1206 = _1205 * (_1163.x + (-0.5));
        float _1207 = _1205 * (_1163.y + (-0.5));
        float _1208 = _1205 * (_1163.z + (-0.5));
        float _1209 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1210 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1211 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1212 = _1176 * 0.5;
        float _1213 = _1186 * 0.5;
        float _1214 = _1196 * 0.5;
        float _1215 = dot(vec3(_1212, _1213, _1214), vec3(_1212, _1213, _1214));
        float _1220 = (_1215 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1215);
        float _1228 = (dot(vec3(_521, _522, _523), vec3(_1220 * _1212, _1220 * _1213, _1220 * _1214)) + 1.0) * 0.5;
        float _3474 = isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0));
        float _1237 = sqrt(((_1213 * _1213) + (_1212 * _1212)) + (_1214 * _1214)) / (_1209 + 9.9999997473787516355514526367188e-06);
        float _3485 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
        float _1239 = _1238 * 2.0;
        float _1243 = (1.0 - _1238) / (_1238 + 1.0);
        float _3496 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1244 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
        float _1253 = ((((1.0 - _1244) * (_1239 + 2.0)) * exp2(log2(isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0))) * (_1239 + 1.0))) + _1244) * _1209;
        float _1254 = _1177 * 0.5;
        float _1255 = _1187 * 0.5;
        float _1256 = _1197 * 0.5;
        float _1257 = dot(vec3(_1254, _1255, _1256), vec3(_1254, _1255, _1256));
        float _1262 = (_1257 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1257);
        float _1270 = (dot(vec3(_521, _522, _523), vec3(_1262 * _1254, _1262 * _1255, _1262 * _1256)) + 1.0) * 0.5;
        float _3507 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1279 = sqrt(((_1255 * _1255) + (_1254 * _1254)) + (_1256 * _1256)) / (_1210 + 9.9999997473787516355514526367188e-06);
        float _3518 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
        float _1281 = _1280 * 2.0;
        float _1285 = (1.0 - _1280) / (_1280 + 1.0);
        float _3529 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1286 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
        float _1295 = ((((1.0 - _1286) * (_1281 + 2.0)) * exp2(log2(isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0))) * (_1281 + 1.0))) + _1286) * _1210;
        float _1296 = _1178 * 0.5;
        float _1297 = _1188 * 0.5;
        float _1298 = _1198 * 0.5;
        float _1299 = dot(vec3(_1296, _1297, _1298), vec3(_1296, _1297, _1298));
        float _1304 = (_1299 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1299);
        float _1312 = (dot(vec3(_521, _522, _523), vec3(_1304 * _1296, _1304 * _1297, _1304 * _1298)) + 1.0) * 0.5;
        float _3540 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1321 = sqrt(((_1297 * _1297) + (_1296 * _1296)) + (_1298 * _1298)) / (_1211 + 9.9999997473787516355514526367188e-06);
        float _3551 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1322 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
        float _1323 = _1322 * 2.0;
        float _1327 = (1.0 - _1322) / (_1322 + 1.0);
        float _3562 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
        float _1337 = ((((1.0 - _1328) * (_1323 + 2.0)) * exp2(log2(isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0))) * (_1323 + 1.0))) + _1328) * _1211;
        _1345 = _1178;
        _1346 = _1177;
        _1347 = _1176;
        _1348 = _1188;
        _1349 = _1187;
        _1350 = _1186;
        _1351 = _1198;
        _1352 = _1197;
        _1353 = _1196;
        _1354 = _1211;
        _1355 = _1210;
        _1356 = _1209;
        _1357 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)));
        _1358 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)));
        _1359 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0)));
    }
    else
    {
        _1345 = _1033;
        _1346 = _1033;
        _1347 = _1033;
        _1348 = _1033;
        _1349 = _1033;
        _1350 = _1033;
        _1351 = _1033;
        _1352 = _1033;
        _1353 = _1033;
        _1354 = _1033;
        _1355 = _1033;
        _1356 = _1033;
        _1357 = 0.0;
        _1358 = 0.0;
        _1359 = 0.0;
    }
    float _1369 = (cbModelParam._m0[1u].x * (_1357 - _1045)) + _1045;
    float _1370 = (cbModelParam._m0[1u].x * (_1358 - _1046)) + _1046;
    float _1371 = (cbModelParam._m0[1u].x * (_1359 - _1047)) + _1047;
    float _1392 = fma(_1371, cbSceneParam._m0[89u].z, fma(_1370, cbSceneParam._m0[89u].y, _1369 * cbSceneParam._m0[89u].x));
    float _1395 = fma(_1371, cbSceneParam._m0[90u].z, fma(_1370, cbSceneParam._m0[90u].y, _1369 * cbSceneParam._m0[90u].x));
    float _1398 = fma(_1371, cbSceneParam._m0[91u].z, fma(_1370, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1369));
    float _1413 = _642 * 0.5;
    float _1414 = _643 * 0.5;
    float _1415 = _644 * 0.5;
    float _1416 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1347, _1350, _1353, _1356));
    float _1419 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1346, _1349, _1352, _1355));
    float _1422 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1345, _1348, _1351, _1354));
    float _1456;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1429 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1032, _1036, _1039, _1042));
        float _1433 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1034, _1037, _1040, _1043));
        float _1437 = dot(vec4(_1413, _1414, _1415, 1.0), vec4(_1035, _1038, _1041, _1044));
        float _1444 = dot(vec4(cbModelParam._m0[39u]), vec4(_1413, _1414, _1415, 1.0));
        _1456 = dot(vec3(isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0)), isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)), isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1444) ? 0.0 : (isnan(0.0) ? _1444 : max(0.0, _1444))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1456 = 1.0;
    }
    float _1467;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1458 = dot(vec4(cbModelParam._m0[40u]), vec4(_1413, _1414, _1415, 1.0));
        _1467 = dot(vec3(isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)), isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0)), isnan(0.0) ? _1422 : (isnan(_1422) ? 0.0 : max(_1422, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1458) ? 0.0 : (isnan(0.0) ? _1458 : max(0.0, _1458))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1467 = 1.0;
    }
    float _1471 = (_1467 * cbModelParam._m0[1u].x) + (_1456 * (1.0 - cbModelParam._m0[1u].x));
    float _1481 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _524);
    float _1482 = isnan(_1481) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1481 : min(cbModelParam._m0[25u].z, _1481));
    float _1564;
    float _1566;
    float _1568;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1531 = fma(_703, cbModelParam._m0[13u].z, fma(_699, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _695)) + cbModelParam._m0[13u].w;
        float _1535 = fma(_703, cbModelParam._m0[14u].z, fma(_699, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _695)) + cbModelParam._m0[14u].w;
        float _1539 = fma(_703, cbModelParam._m0[15u].z, fma(_699, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _695)) + cbModelParam._m0[15u].w;
        float _1542 = fma(_644, cbModelParam._m0[13u].z, fma(_643, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _642));
        float _1545 = fma(_644, cbModelParam._m0[14u].z, fma(_643, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _642));
        float _1548 = fma(_644, cbModelParam._m0[15u].z, fma(_643, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _642));
        float _1576;
        if (_1542 > 0.0)
        {
            _1576 = abs((1.0 - _1531) / _1542);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1542 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1531 + 1.0) / _1542);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1576 = frontier_phi_25_23_ladder;
        }
        float _1947;
        if (_1545 > 0.0)
        {
            _1947 = abs((1.0 - _1535) / _1545);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1545 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1535 + 1.0) / _1545);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1947 = frontier_phi_34_30_ladder;
        }
        float _2271;
        if (_1548 > 0.0)
        {
            _2271 = abs((1.0 - _1539) / _1548);
        }
        else
        {
            float frontier_phi_48_41_ladder;
            if (_1548 < 0.0)
            {
                frontier_phi_48_41_ladder = abs((_1539 + 1.0) / _1548);
            }
            else
            {
                frontier_phi_48_41_ladder = 5000.0;
            }
            _2271 = frontier_phi_48_41_ladder;
        }
        float _2273 = isnan(_1947) ? _1576 : (isnan(_1576) ? _1947 : min(_1576, _1947));
        float _2274 = isnan(_2271) ? _2273 : (isnan(_2273) ? _2271 : min(_2273, _2271));
        float _2278 = (_2274 * _1542) + _1531;
        float _2279 = (_2274 * _1545) + _1535;
        float _2280 = (_2274 * _1548) + _1539;
        float _2281 = _2274 * 9.9999997473787516355514526367188e-05;
        float _2282 = (-1.0) - _2281;
        float _2284 = _2281 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2280 > _2284) || ((_2280 < _2282) || ((_2279 > _2284) || ((_2279 < _2282) || ((_2278 < _2282) || (_2278 > _2284))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2422 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2280, cbModelParam._m0[9u].z, fma(_2279, cbModelParam._m0[9u].y, _2278 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2280, cbModelParam._m0[10u].z, fma(_2279, cbModelParam._m0[10u].y, _2278 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2280, cbModelParam._m0[11u].z, fma(_2279, cbModelParam._m0[11u].y, _2278 * cbModelParam._m0[11u].x))), _1482);
            frontier_phi_24_48_ladder = _2422.z * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_1 = _2422.y * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_2 = _2422.x * cbModelParam._m0[1u].y;
        }
        _1564 = frontier_phi_24_48_ladder_2;
        _1566 = frontier_phi_24_48_ladder_1;
        _1568 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1552 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_642, _643, _644), _1482);
        _1564 = _1552.x * cbModelParam._m0[1u].y;
        _1566 = _1552.y * cbModelParam._m0[1u].y;
        _1568 = _1552.z * cbModelParam._m0[1u].y;
    }
    float _1572 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _524);
    float _1573 = isnan(_1572) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1572 : min(cbModelParam._m0[25u].w, _1572));
    float _1663;
    float _1665;
    float _1667;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1627 = fma(_703, cbModelParam._m0[21u].z, fma(_699, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _695)) + cbModelParam._m0[21u].w;
        float _1631 = fma(_703, cbModelParam._m0[22u].z, fma(_699, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _695)) + cbModelParam._m0[22u].w;
        float _1635 = fma(_703, cbModelParam._m0[23u].z, fma(_699, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _695)) + cbModelParam._m0[23u].w;
        float _1638 = fma(_644, cbModelParam._m0[21u].z, fma(_643, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _642));
        float _1641 = fma(_644, cbModelParam._m0[22u].z, fma(_643, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _642));
        float _1644 = fma(_644, cbModelParam._m0[23u].z, fma(_643, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _642));
        float _1952;
        if (_1638 > 0.0)
        {
            _1952 = abs((1.0 - _1627) / _1638);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1638 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1627 + 1.0) / _1638);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1952 = frontier_phi_36_32_ladder;
        }
        float _2297;
        if (_1641 > 0.0)
        {
            _2297 = abs((1.0 - _1631) / _1641);
        }
        else
        {
            float frontier_phi_50_43_ladder;
            if (_1641 < 0.0)
            {
                frontier_phi_50_43_ladder = abs((_1631 + 1.0) / _1641);
            }
            else
            {
                frontier_phi_50_43_ladder = 5000.0;
            }
            _2297 = frontier_phi_50_43_ladder;
        }
        float _2487;
        if (_1644 > 0.0)
        {
            _2487 = abs((1.0 - _1635) / _1644);
        }
        else
        {
            float frontier_phi_68_61_ladder;
            if (_1644 < 0.0)
            {
                frontier_phi_68_61_ladder = abs((_1635 + 1.0) / _1644);
            }
            else
            {
                frontier_phi_68_61_ladder = 5000.0;
            }
            _2487 = frontier_phi_68_61_ladder;
        }
        float _2489 = isnan(_2297) ? _1952 : (isnan(_1952) ? _2297 : min(_1952, _2297));
        float _2490 = isnan(_2487) ? _2489 : (isnan(_2489) ? _2487 : min(_2489, _2487));
        float _2494 = (_2490 * _1638) + _1627;
        float _2495 = (_2490 * _1641) + _1631;
        float _2496 = (_2490 * _1644) + _1635;
        float _2497 = _2490 * 9.9999997473787516355514526367188e-05;
        float _2498 = (-1.0) - _2497;
        float _2500 = _2497 + 1.0;
        float frontier_phi_33_68_ladder;
        float frontier_phi_33_68_ladder_1;
        float frontier_phi_33_68_ladder_2;
        if ((_2496 > _2500) || ((_2496 < _2498) || ((_2495 > _2500) || ((_2495 < _2498) || ((_2494 < _2498) || (_2494 > _2500))))))
        {
            frontier_phi_33_68_ladder = 0.0;
            frontier_phi_33_68_ladder_1 = 0.0;
            frontier_phi_33_68_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2738 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2496, cbModelParam._m0[17u].z, fma(_2495, cbModelParam._m0[17u].y, _2494 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2496, cbModelParam._m0[18u].z, fma(_2495, cbModelParam._m0[18u].y, _2494 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2496, cbModelParam._m0[19u].z, fma(_2495, cbModelParam._m0[19u].y, _2494 * cbModelParam._m0[19u].x))), _1573);
            frontier_phi_33_68_ladder = _2738.y * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_1 = _2738.z * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_2 = _2738.x * cbModelParam._m0[1u].z;
        }
        _1663 = frontier_phi_33_68_ladder_2;
        _1665 = frontier_phi_33_68_ladder;
        _1667 = frontier_phi_33_68_ladder_1;
    }
    else
    {
        vec4 _1647 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_642, _643, _644), _1573);
        _1663 = _1647.x * cbModelParam._m0[1u].z;
        _1665 = _1647.y * cbModelParam._m0[1u].z;
        _1667 = _1647.z * cbModelParam._m0[1u].z;
    }
    float _1679 = ((((1.0 - _663) * ((_650 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_663 * _650)) * _634;
    float _1680 = _1679 * ((cbModelParam._m0[1u].w * (_1663 - _1564)) + _1564);
    float _1681 = _1679 * ((cbModelParam._m0[1u].w * (_1665 - _1566)) + _1566);
    float _1682 = _1679 * ((cbModelParam._m0[1u].w * (_1667 - _1568)) + _1568);
    float _1685 = fma(_1682, cbSceneParam._m0[89u].z, fma(_1681, cbSceneParam._m0[89u].y, _1680 * cbSceneParam._m0[89u].x));
    float _1688 = fma(_1682, cbSceneParam._m0[90u].z, fma(_1681, cbSceneParam._m0[90u].y, _1680 * cbSceneParam._m0[90u].x));
    float _1691 = fma(_1682, cbSceneParam._m0[91u].z, fma(_1681, cbSceneParam._m0[91u].y, _1680 * cbSceneParam._m0[91u].x));
    vec4 _1699 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_569, _570));
    float _1701 = _1699.w;
    float _1713 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1701);
    float _1714 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1701);
    float _1715 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1701);
    uvec4 _1719 = floatBitsToUint(cbInstanceData._m0[_608 + 5u]);
    uint _1721 = _1719.x * 14u;
    uint _1722 = _1721 + 13u;
    float _1727 = _634 + (-1.0);
    float _1730 = (cbLight._m0[_1722].x * _1727) + 1.0;
    float _1731 = (cbLight._m0[_1722].y * _1727) + 1.0;
    uint _1732 = _1721 + 5u;
    float _1738 = isnan(1.0) ? _1731 : (isnan(_1731) ? 1.0 : min(_1731, 1.0));
    uint _1742 = _1721 + 4u;
    float _1751 = isnan(1.0) ? _1730 : (isnan(_1730) ? 1.0 : min(_1730, 1.0));
    uint _1755 = _1721 | 1u;
    float _1766 = dot(vec3(cbLight._m0[_1721].xyz), vec3(_521, _522, _523));
    float _1769 = dot(vec3(cbLight._m0[_1755].xyz), vec3(_521, _522, _523));
    float _3698 = isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0));
    float _3709 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
    float _1774 = (isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))) * 0.3183098733425140380859375;
    float _1776 = (isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0))) * 0.3183098733425140380859375;
    float _1783 = ((cbLight._m0[_1732].x * _1738) * _1776) + (((cbLight._m0[_1742].x * _1713) * _1751) * _1774);
    float _1784 = ((_1738 * cbLight._m0[_1732].y) * _1776) + (((cbLight._m0[_1742].y * _1714) * _1751) * _1774);
    float _1785 = ((_1738 * cbLight._m0[_1732].z) * _1776) + (((cbLight._m0[_1742].z * _1715) * _1751) * _1774);
    uint _1787 = _1721 + 8u;
    float _1800 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1721].w)) * _524) * 0.949999988079071044921875);
    float _1801 = _1800 * _1800;
    float _1802 = cbLight._m0[_1721].x + _548;
    float _1803 = cbLight._m0[_1721].y + _549;
    float _1804 = cbLight._m0[_1721].z + _550;
    float _1808 = inversesqrt(dot(vec3(_1802, _1803, _1804), vec3(_1802, _1803, _1804)));
    float _1809 = _1808 * _1802;
    float _1810 = _1808 * _1803;
    float _1811 = _1808 * _1804;
    float _1812 = dot(vec3(_521, _522, _523), vec3(cbLight._m0[_1721].xyz));
    float _3720 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
    float _1815 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
    float _3731 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _1816 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
    float _1817 = dot(vec3(_521, _522, _523), vec3(_1809, _1810, _1811));
    float _3742 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
    float _1820 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
    float _1821 = dot(vec3(cbLight._m0[_1721].xyz), vec3(_1809, _1810, _1811));
    float _3753 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
    float _1825 = _1801 * _1801;
    float _1829 = ((_1820 * _1820) * (_1825 + (-1.0))) + 1.0;
    float _1840 = (exp2(log2(1.0 - (isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1841 = 1.0 - _1801;
    float _1852 = (0.5 / (((_1816 * ((_1815 * _1841) + _1801)) + 9.9999999392252902907785028219223e-09) + (((_1816 * _1841) + _1801) * _1815))) * _1815;
    float _3764 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
    float _1854 = (isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0))) * (_1825 / ((_1829 * _1829) * 3.141590118408203125));
    uint _1868 = _1721 + 9u;
    float _1879 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1755].w)) * _524) * 0.949999988079071044921875);
    float _1880 = _1879 * _1879;
    float _1881 = cbLight._m0[_1755].x + _548;
    float _1882 = cbLight._m0[_1755].y + _549;
    float _1883 = cbLight._m0[_1755].z + _550;
    float _1887 = inversesqrt(dot(vec3(_1881, _1882, _1883), vec3(_1881, _1882, _1883)));
    float _1888 = _1887 * _1881;
    float _1889 = _1887 * _1882;
    float _1890 = _1887 * _1883;
    float _1891 = dot(vec3(_521, _522, _523), vec3(cbLight._m0[_1755].xyz));
    float _3775 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
    float _1894 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _1895 = dot(vec3(_521, _522, _523), vec3(_1888, _1889, _1890));
    float _3786 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _1898 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
    float _1899 = dot(vec3(cbLight._m0[_1755].xyz), vec3(_1888, _1889, _1890));
    float _3797 = isnan(0.0) ? _1899 : (isnan(_1899) ? 0.0 : max(_1899, 0.0));
    float _1903 = _1880 * _1880;
    float _1907 = ((_1898 * _1898) * (_1903 + (-1.0))) + 1.0;
    float _1916 = (exp2(log2(1.0 - (isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1917 = 1.0 - _1880;
    float _1927 = (0.5 / (((_1816 * ((_1894 * _1917) + _1880)) + 9.9999999392252902907785028219223e-09) + (((_1816 * _1917) + _1880) * _1894))) * _1894;
    float _3808 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
    float _1929 = (isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0))) * (_1903 / ((_1907 * _1907) * 3.141590118408203125));
    float _1939 = (((_1916 * cbLight._m0[_1868].x) * _1929) * _1738) + ((((cbLight._m0[_1787].x * _1713) * _1840) * _1854) * _1751);
    float _1940 = (((_1916 * cbLight._m0[_1868].y) * _1929) * _1738) + ((((cbLight._m0[_1787].y * _1714) * _1840) * _1854) * _1751);
    float _1941 = (((_1916 * cbLight._m0[_1868].z) * _1929) * _1738) + ((((cbLight._m0[_1787].z * _1715) * _1840) * _1854) * _1751);
    float _2056;
    float _2058;
    float _2060;
    float _2062;
    float _2064;
    float _2066;
    if (_1719.y == 0u)
    {
        float _1996 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1997 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1996;
        float _1998 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1996;
        float _1999 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1996;
        uvec4 _2011 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2012 = _2011.x;
        uint _2023 = uint((float(_2011.y) * floor(float(uint(cbSceneParam._m0[85u].y * _570) / _2012))) + floor(float(uint(cbSceneParam._m0[85u].x * _569) / _2012)));
        float _2033 = (log2(_1999 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2034 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
        uint _2037 = uint(isnan(14.0) ? _2034 : (isnan(_2034) ? 14.0 : min(_2034, 14.0)));
        uvec4 _2042 = texelFetch(g_lightClusterGridBuffer, int(((_2037 << 2u) + (_2023 << 6u)) >> 2u));
        uint _2043 = _2042.x;
        uint _2044 = _2011.z;
        float _2150;
        float _2152;
        float _2154;
        float _2156;
        float _2158;
        float _2160;
        if (((((1u << ((_2044 >> 4u) & 15u)) + 4294967295u) & _2043) == 0u) || ((_2044 & 240u) == 0u))
        {
            _2150 = 0.0;
            _2152 = 0.0;
            _2154 = 0.0;
            _2156 = 0.0;
            _2158 = 0.0;
            _2160 = 0.0;
        }
        else
        {
            float _2151;
            float _2153;
            float _2155;
            float _2157;
            float _2159;
            float _2161;
            float _2334 = 0.0;
            float _2335 = 0.0;
            float _2336 = 0.0;
            float _2337 = 0.0;
            float _2338 = 0.0;
            float _2339 = 0.0;
            uint _2340 = 0u;
            uint _2349;
            bool _2350;
            for (;;)
            {
                _2349 = texelFetch(g_lightClassification, int((((_2037 << 5u) + (_2023 << 9u)) + (_2340 << 2u)) >> 2u)).x;
                _2350 = _2349 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2350)
                {
                    frontier_phi_63_pred = _2336;
                    frontier_phi_63_pred_1 = _2339;
                    frontier_phi_63_pred_2 = _2338;
                    frontier_phi_63_pred_3 = _2337;
                    frontier_phi_63_pred_4 = _2335;
                    frontier_phi_63_pred_5 = _2334;
                }
                else
                {
                    float _2530;
                    float _2531;
                    float _2532;
                    float _2533;
                    float _2534;
                    float _2535;
                    uint _2536;
                    _2530 = _2334;
                    _2531 = _2335;
                    _2532 = _2336;
                    _2533 = _2337;
                    _2534 = _2338;
                    _2535 = _2339;
                    _2536 = _2349;
                    float _2431;
                    float _2432;
                    float _2433;
                    float _2434;
                    float _2435;
                    float _2436;
                    for (;;)
                    {
                        uint _2540 = uint(findLSB(_2536)) + (_2340 << 5u);
                        uint _2537 = (_2536 + 4294967295u) & _2536;
                        uint _2542 = _2540 * 48u;
                        vec4 _2556 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2542)).x, texelFetch(g_PointLightRenderingBuffer, int(_2542 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2542 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2542 + 3u)).x));
                        uint _2562 = (_2540 * 48u) + 4u;
                        vec4 _2575 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2562)).x, texelFetch(g_PointLightRenderingBuffer, int(_2562 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2562 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2562 + 3u)).x));
                        uint _2581 = (_2540 * 48u) + 8u;
                        vec3 _2592 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2581)).x, texelFetch(g_PointLightRenderingBuffer, int(_2581 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2581 + 2u)).x));
                        float _2596 = _2556.x - _1997;
                        float _2597 = _2556.y - _1998;
                        float _2598 = _2556.z - _1999;
                        float _2599 = dot(vec3(_2596, _2597, _2598), vec3(_2596, _2597, _2598));
                        float _2602 = inversesqrt(_2599);
                        float _2603 = _2602 * _2596;
                        float _2604 = _2602 * _2597;
                        float _2605 = _2602 * _2598;
                        float _2606 = dot(vec3(_589, _592, _595), vec3(_2603, _2604, _2605));
                        float _2611 = 1.0 - (_2599 * _2556.w);
                        float _3829 = isnan(0.0) ? _2611 : (isnan(_2611) ? 0.0 : max(_2611, 0.0));
                        float _2612 = isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0));
                        float _2613 = sqrt(_2599) * _2575.w;
                        float _2616 = 1.39999997615814208984375 / (_2613 + 1.39999997615814208984375);
                        float _2617 = _2616 * _2616;
                        float _2620 = ((1.0 - _2617) * _2606) + _2617;
                        float _2623 = _2613 * _2613;
                        float _2627 = ((isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0))) * _2612) / ((_2623 * 0.699999988079071044921875) + 1.0);
                        float _2631 = (-0.0) - _1997;
                        float _2632 = (-0.0) - _1998;
                        float _2633 = (-0.0) - _1999;
                        float _2637 = inversesqrt(dot(vec3(_2631, _2632, _2633), vec3(_2631, _2632, _2633)));
                        float _2638 = _2637 * _2631;
                        float _2639 = _2637 * _2632;
                        float _2640 = _2637 * _2633;
                        float _2648 = exp2(log2(1.0 / ((_2623 * 3.5) + 5.0)) * 0.25);
                        float _2649 = 1.0 - _650;
                        float _2656 = sqrt(1.0 - ((1.0 - (_2649 * _2649)) * (1.0 - (_2648 * _2648))));
                        float _2657 = _2656 * _2656;
                        float _2658 = _2657 * _2657;
                        float _2659 = _2638 + _2603;
                        float _2660 = _2639 + _2604;
                        float _2661 = _2640 + _2605;
                        float _2665 = inversesqrt(dot(vec3(_2659, _2660, _2661), vec3(_2659, _2660, _2661)));
                        float _2669 = dot(vec3(_589, _592, _595), vec3(_2638, _2639, _2640));
                        float _3845 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
                        float _2672 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
                        float _2673 = dot(vec3(_589, _592, _595), vec3(_2665 * _2659, _2665 * _2660, _2665 * _2661));
                        float _3856 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
                        float _2676 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
                        float _2680 = ((_2676 * _2676) * (_2658 + (-1.0))) + 1.0;
                        float _2681 = _2616 * _2657;
                        float _2682 = _2681 * _2681;
                        float _2685 = ((1.0 - _2682) * _2606) + _2682;
                        float _3867 = isnan(0.0) ? _2685 : (isnan(_2685) ? 0.0 : max(_2685, 0.0));
                        float _2686 = isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0));
                        float _2687 = 1.0 - _2657;
                        float _2697 = (0.5 / (((_2686 * ((_2672 * _2687) + _2657)) + 9.9999999392252902907785028219223e-09) + (((_2686 * _2687) + _2657) * _2672))) * _2686;
                        float _3878 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
                        float _2708 = (((_2658 * 3.1415927410125732421875) * (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0)))) / ((_2680 * _2680) * ((_2623 * 2.1991131305694580078125) + 3.141590118408203125))) * _2612;
                        _2434 = (_2627 * _2575.x) + _2533;
                        _2435 = (_2627 * _2575.y) + _2534;
                        _2436 = (_2627 * _2575.z) + _2535;
                        _2431 = (_2708 * _2592.x) + _2530;
                        _2432 = (_2708 * _2592.y) + _2531;
                        _2433 = (_2708 * _2592.z) + _2532;
                        if (_2537 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2530 = _2431;
                            _2531 = _2432;
                            _2532 = _2433;
                            _2533 = _2434;
                            _2534 = _2435;
                            _2535 = _2436;
                            _2536 = _2537;
                        }
                    }
                    frontier_phi_63_pred = _2433;
                    frontier_phi_63_pred_1 = _2436;
                    frontier_phi_63_pred_2 = _2435;
                    frontier_phi_63_pred_3 = _2434;
                    frontier_phi_63_pred_4 = _2432;
                    frontier_phi_63_pred_5 = _2431;
                }
                _2155 = frontier_phi_63_pred;
                _2161 = frontier_phi_63_pred_1;
                _2159 = frontier_phi_63_pred_2;
                _2157 = frontier_phi_63_pred_3;
                _2153 = frontier_phi_63_pred_4;
                _2151 = frontier_phi_63_pred_5;
                uint _2341 = _2340 + 1u;
                if (_2341 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2334 = _2151;
                    _2335 = _2153;
                    _2336 = _2155;
                    _2337 = _2157;
                    _2338 = _2159;
                    _2339 = _2161;
                    _2340 = _2341;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2150 = _2151;
            _2152 = _2153;
            _2154 = _2155;
            _2156 = _2157;
            _2158 = _2159;
            _2160 = _2161;
        }
        uvec4 _2164 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2165 = _2164.z;
        uint _2167 = (_2165 >> 8u) & 15u;
        float _2302;
        float _2304;
        float _2306;
        float _2308;
        float _2310;
        float _2312;
        if (((4294967295u << _2167) & _2043) == 0u)
        {
            _2302 = _2150;
            _2304 = _2152;
            _2306 = _2154;
            _2308 = _2156;
            _2310 = _2158;
            _2312 = _2160;
        }
        else
        {
            float _2327 = inversesqrt(dot(vec3(_1997, _1998, _1999), vec3(_1997, _1998, _1999)));
            float _2328 = _2327 * _1997;
            float _2329 = _2327 * _1998;
            float _2330 = _2327 * _1999;
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            float frontier_phi_52_53_ladder_3;
            float frontier_phi_52_53_ladder_4;
            float frontier_phi_52_53_ladder_5;
            if (_2167 < ((_2165 >> 12u) & 15u))
            {
                float _2303;
                float _2305;
                float _2307;
                float _2309;
                float _2311;
                float _2313;
                float _2513 = _2150;
                float _2514 = _2152;
                float _2515 = _2154;
                float _2516 = _2156;
                float _2517 = _2158;
                float _2518 = _2160;
                uint _2519 = _2167;
                uint _2528;
                bool _2529;
                for (;;)
                {
                    _2528 = texelFetch(g_lightClassification, int((((_2037 << 5u) + (_2023 << 9u)) + (_2519 << 2u)) >> 2u)).x;
                    _2529 = _2528 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2529)
                    {
                        frontier_phi_77_pred = _2518;
                        frontier_phi_77_pred_1 = _2517;
                        frontier_phi_77_pred_2 = _2516;
                        frontier_phi_77_pred_3 = _2515;
                        frontier_phi_77_pred_4 = _2514;
                        frontier_phi_77_pred_5 = _2513;
                    }
                    else
                    {
                        float _2743;
                        float _2744;
                        float _2745;
                        float _2746;
                        float _2747;
                        float _2748;
                        float _3036;
                        float _3037;
                        float _3038;
                        float _3039;
                        float _3040;
                        float _3041;
                        float _2756 = _2513;
                        float _2757 = _2514;
                        float _2758 = _2515;
                        float _2759 = _2516;
                        float _2760 = _2517;
                        float _2761 = _2518;
                        uint _2762 = _2528;
                        uint _2763;
                        vec4 _2788;
                        float _2789;
                        vec4 _2804;
                        vec3 _2816;
                        vec4 _2831;
                        vec4 _2846;
                        float _2892;
                        bool _2893;
                        for (;;)
                        {
                            uint _2773 = ((_2519 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2762));
                            _2763 = (_2762 + 4294967295u) & _2762;
                            uint _2775 = _2773 * 40u;
                            _2788 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2775)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2775 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2775 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2775 + 3u)).x));
                            _2789 = _2788.w;
                            uint _2791 = (_2773 * 40u) + 4u;
                            _2804 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2791)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2791 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2791 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2791 + 3u)).x));
                            uint _2806 = (_2773 * 40u) + 8u;
                            _2816 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2806)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2806 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2806 + 2u)).x));
                            uint _2818 = (_2773 * 40u) + 16u;
                            _2831 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2818)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2818 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2818 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2818 + 3u)).x));
                            uint _2833 = (_2773 * 40u) + 20u;
                            _2846 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2833)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2833 + 3u)).x));
                            uint _2848 = (_2773 * 40u) + 24u;
                            vec4 _2861 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2848)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2848 + 3u)).x));
                            uint _2867 = (_2773 * 40u) + 28u;
                            vec4 _2880 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2867)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 3u)).x));
                            _2892 = fma(_1999, _2880.z, fma(_1998, _2880.y, _2880.x * _1997)) + _2880.w;
                            _2893 = !((fma(_1999, _2861.z, fma(_1998, _2861.y, _2861.x * _1997)) + _2861.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2893)
                            {
                                float _2920 = _2788.x - _1997;
                                float _2921 = _2788.y - _1998;
                                float _2922 = _2788.z - _1999;
                                float _2923 = dot(vec3(_2920, _2921, _2922), vec3(_2920, _2921, _2922));
                                float _2926 = inversesqrt(_2923);
                                float _2927 = _2926 * _2920;
                                float _2928 = _2926 * _2921;
                                float _2929 = _2926 * _2922;
                                float _2933 = 1.0 - (_2923 / (_2789 * _2789));
                                float _3889 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0));
                                float _2934 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
                                float _2938 = sqrt(_2923) * _2804.w;
                                float _2940 = 1.39999997615814208984375 / (_2938 + 1.39999997615814208984375);
                                float _2941 = _2940 * _2940;
                                float _2944 = ((1.0 - _2941) * dot(vec3(_2927, _2928, _2929), vec3(_589, _592, _595))) + _2941;
                                float _2947 = _2938 * _2938;
                                float _2951 = (fma(_1999, _2831.z, fma(_1998, _2831.y, _2831.x * _1997)) + _2831.w) / _2892;
                                float _2952 = (fma(_1999, _2846.z, fma(_1998, _2846.y, _2846.x * _1997)) + _2846.w) / _2892;
                                float _2956 = 1.0 - dot(vec2(_2951, _2952), vec2(_2951, _2952));
                                float _3905 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
                                float _2957 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
                                float _2958 = _2957 * (((isnan(0.0) ? _2944 : (isnan(_2944) ? 0.0 : max(_2944, 0.0))) * _2934) / ((_2947 * 0.699999988079071044921875) + 1.0));
                                float _2970 = exp2(log2(1.0 / ((_2947 * 3.5) + 5.0)) * 0.25);
                                float _2971 = 1.0 - _650;
                                float _2978 = sqrt(1.0 - ((1.0 - (_2971 * _2971)) * (1.0 - (_2970 * _2970))));
                                float _2979 = _2978 * _2978;
                                float _2980 = _2979 * _2979;
                                float _2981 = _2927 - _2328;
                                float _2982 = _2928 - _2329;
                                float _2983 = _2929 - _2330;
                                float _2987 = inversesqrt(dot(vec3(_2981, _2982, _2983), vec3(_2981, _2982, _2983)));
                                float _2991 = dot(vec3(_589, _592, _595), vec3((-0.0) - _2328, (-0.0) - _2329, (-0.0) - _2330));
                                float _3916 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
                                float _2994 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
                                float _2995 = dot(vec3(_589, _592, _595), vec3(_2987 * _2981, _2987 * _2982, _2987 * _2983));
                                float _3927 = isnan(0.0) ? _2995 : (isnan(_2995) ? 0.0 : max(_2995, 0.0));
                                float _2998 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
                                float _3002 = ((_2998 * _2998) * (_2980 + (-1.0))) + 1.0;
                                float _3003 = _2940 * _2979;
                                float _3004 = _3003 * _3003;
                                float _3010 = ((1.0 - _3004) * dot(vec3(_589, _592, _595), vec3(_2927, _2928, _2929))) + _3004;
                                float _3938 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
                                float _3011 = isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0));
                                float _3012 = 1.0 - _2979;
                                float _3022 = (0.5 / (((_3011 * ((_2994 * _3012) + _2979)) + 9.9999999392252902907785028219223e-09) + (((_3011 * _3012) + _2979) * _2994))) * _3011;
                                float _3949 = isnan(0.0) ? _3022 : (isnan(_3022) ? 0.0 : max(_3022, 0.0));
                                float _3032 = (_2957 * _2934) * (((_2980 * 3.1415927410125732421875) * (isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0)))) / ((_3002 * _3002) * ((_2947 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _2958 * _2804.x;
                                frontier_phi_83_pred_1 = _2958 * _2804.z;
                                frontier_phi_83_pred_2 = _2958 * _2804.y;
                                frontier_phi_83_pred_3 = _3032 * _2816.z;
                                frontier_phi_83_pred_4 = _3032 * _2816.y;
                                frontier_phi_83_pred_5 = _3032 * _2816.x;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3039 = frontier_phi_83_pred;
                            _3041 = frontier_phi_83_pred_1;
                            _3040 = frontier_phi_83_pred_2;
                            _3038 = frontier_phi_83_pred_3;
                            _3037 = frontier_phi_83_pred_4;
                            _3036 = frontier_phi_83_pred_5;
                            _2746 = _3039 + _2759;
                            _2747 = _3040 + _2760;
                            _2748 = _3041 + _2761;
                            _2743 = _3036 + _2756;
                            _2744 = _3037 + _2757;
                            _2745 = _3038 + _2758;
                            if (_2763 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2756 = _2743;
                                _2757 = _2744;
                                _2758 = _2745;
                                _2759 = _2746;
                                _2760 = _2747;
                                _2761 = _2748;
                                _2762 = _2763;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2748;
                        frontier_phi_77_pred_1 = _2747;
                        frontier_phi_77_pred_2 = _2746;
                        frontier_phi_77_pred_3 = _2745;
                        frontier_phi_77_pred_4 = _2744;
                        frontier_phi_77_pred_5 = _2743;
                    }
                    _2313 = frontier_phi_77_pred;
                    _2311 = frontier_phi_77_pred_1;
                    _2309 = frontier_phi_77_pred_2;
                    _2307 = frontier_phi_77_pred_3;
                    _2305 = frontier_phi_77_pred_4;
                    _2303 = frontier_phi_77_pred_5;
                    uint _2520 = _2519 + 1u;
                    if (_2520 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2513 = _2303;
                        _2514 = _2305;
                        _2515 = _2307;
                        _2516 = _2309;
                        _2517 = _2311;
                        _2518 = _2313;
                        _2519 = _2520;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _2305;
                frontier_phi_52_53_ladder_1 = _2313;
                frontier_phi_52_53_ladder_2 = _2311;
                frontier_phi_52_53_ladder_3 = _2309;
                frontier_phi_52_53_ladder_4 = _2307;
                frontier_phi_52_53_ladder_5 = _2303;
            }
            else
            {
                frontier_phi_52_53_ladder = _2152;
                frontier_phi_52_53_ladder_1 = _2160;
                frontier_phi_52_53_ladder_2 = _2158;
                frontier_phi_52_53_ladder_3 = _2156;
                frontier_phi_52_53_ladder_4 = _2154;
                frontier_phi_52_53_ladder_5 = _2150;
            }
            _2302 = frontier_phi_52_53_ladder_5;
            _2304 = frontier_phi_52_53_ladder;
            _2306 = frontier_phi_52_53_ladder_4;
            _2308 = frontier_phi_52_53_ladder_3;
            _2310 = frontier_phi_52_53_ladder_2;
            _2312 = frontier_phi_52_53_ladder_1;
        }
        float _2317 = isnan(1.0) ? _634 : (isnan(_634) ? 1.0 : min(_634, 1.0));
        _2056 = (_2317 * _2308) + _1783;
        _2058 = (_2317 * _2310) + _1784;
        _2060 = (_2317 * _2312) + _1785;
        _2062 = ((_2302 * 0.039999999105930328369140625) * _2317) + _1939;
        _2064 = ((_2304 * 0.039999999105930328369140625) * _2317) + _1940;
        _2066 = ((_2306 * 0.039999999105930328369140625) * _2317) + _1941;
    }
    else
    {
        _2056 = _1783;
        _2058 = _1784;
        _2060 = _1785;
        _2062 = _1939;
        _2064 = _1940;
        _2066 = _1941;
    }
    uint _2072 = _610 + uint(cbMatDynParam._m0[0u].w);
    float _3965 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _3976 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _3987 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _2097 = (((isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * (_2056 + ((isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0))) * _634))) + ((_2062 + ((isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0))) * _1471)) * cbPerFrame._m0[3u].x)) + (((_465.x * _285) * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2072].x);
    float _2099 = ((((_465.y * _285) * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2072].y) + ((_2064 + ((isnan(0.0) ? _1688 : (isnan(_1688) ? 0.0 : max(_1688, 0.0))) * _1471)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * (_2058 + ((isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0))) * _634)));
    float _2101 = ((((_465.z * _285) * cbMtdParam._m0[9u].z) * cbInstanceData._m0[_2072].z) + ((_2066 + ((isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0))) * _1471)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3987 : (isnan(_3987) ? 1.0 : min(_3987, 1.0))) * (_2060 + ((isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0))) * _634)));
    float _2102 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2103 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _2104 = isnan(0.0) ? _2101 : (isnan(_2101) ? 0.0 : max(_2101, 0.0));
    uint _2105 = _608 + 6u;
    float _2113 = _569 / cbSceneParam._m0[86u].x;
    float _2114 = _570 / cbSceneParam._m0[86u].y;
    vec4 _2128 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2113, _2114, (log2((isnan(cbSceneParam._m0[77u].w) ? _543 : (isnan(_543) ? cbSceneParam._m0[77u].w : min(_543, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2130 = _2128.x;
    float _2131 = _2128.y;
    float _2132 = _2128.z;
    float _2133 = _2128.w;
    float _2213;
    float _2215;
    float _2217;
    float _2219;
    if (_543 > cbSceneParam._m0[78u].w)
    {
        float _2175 = isnan(_543) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _543 : min(cbSceneParam._m0[80u].w, _543));
        float _2176 = _2175 / _543;
        float _2187 = _2176 * _267;
        float _2188 = _268 * _2176;
        float _2189 = (-0.0) - _2188;
        float _2190 = _2176 * _269;
        float _2192 = (cbSceneParam._m0[77u].w * _2189) / _2175;
        float _2193 = _2192 + cbSceneParam._m0[79u].w;
        float _2194 = cbSceneParam._m0[79u].w - _2188;
        float _2200 = sqrt(((_2187 * _2187) + (_2188 * _2188)) + (_2190 * _2190));
        float _2203 = (1.0 - (cbSceneParam._m0[77u].w / _2175)) * _2200;
        float _2209 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2211 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2444;
        if (abs((_2189 - _2192) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2444 = ((((_2193 > 0.0) ? exp2(_2209 * _2193) : (2.0 - exp2(_2211 * _2193))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2203;
        }
        else
        {
            float _2363 = 1.0 / cbSceneParam._m0[80u].x;
            float _2364 = isnan(_2194) ? _2193 : (isnan(_2193) ? _2194 : max(_2193, _2194));
            float _2365 = isnan(_2194) ? _2193 : (isnan(_2193) ? _2194 : min(_2193, _2194));
            float _2374 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : min(_2364, 0.0));
            float _2375 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : min(_2365, 0.0));
            _2444 = ((abs(_2200 / _2189) * cbSceneParam._m0[80u].y) * ((((_2374 - _2375) * 2.0) - ((exp2(_2209 * (isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0)))) - exp2(_2209 * (isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0))))) * _2363)) - ((exp2(_2211 * _2374) - exp2(_2211 * _2375)) * _2363))) + (_2203 * cbSceneParam._m0[80u].z);
        }
        vec4 _2446 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2113, _2114, 1.0), 0.0);
        float _2455 = exp2((_2444 * (-1.44269502162933349609375)) * (1.0 - _2446.w));
        float _2456 = log2(_2455);
        float _2472 = log2(_2133);
        _2213 = (exp2(_2472 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2456 * cbSceneParam._m0[78u].x)) * _2446.x) / cbSceneParam._m0[78u].x)) + _2130;
        _2215 = (exp2(_2472 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2456 * cbSceneParam._m0[78u].y)) * _2446.y) / cbSceneParam._m0[78u].y)) + _2131;
        _2217 = (exp2(_2472 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2456 * cbSceneParam._m0[78u].z)) * _2446.z) / cbSceneParam._m0[78u].z)) + _2132;
        _2219 = _2455 * _2133;
    }
    else
    {
        _2213 = _2130;
        _2215 = _2131;
        _2217 = _2132;
        _2219 = _2133;
    }
    bool _2482;
    vec4 _2229;
    vec4 _2251;
    float _2253;
    float _2257;
    float _2258;
    float _2259;
    float _2260;
    bool _2270;
    for (;;)
    {
        _2229 = cbMatDynParam._m0[0u];
        float _2231 = roundEven(_2229.y);
        bool _2232 = _2231 == 3.0;
        float _2233 = log2(_2219);
        float _2240 = exp2(_2233 * cbSceneParam._m0[78u].x) * _2102;
        float _2241 = exp2(_2233 * cbSceneParam._m0[78u].y) * _2103;
        float _2242 = exp2(_2233 * cbSceneParam._m0[78u].z) * _2104;
        float _2249 = _557 + (-0.5);
        _2251 = cbMtdParam._m0[1u];
        _2253 = _2251.y * _2249;
        float _2256 = (_2231 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2257 = _2256 * (_2232 ? _2240 : (_2240 + (cbSceneParam._m0[72u].w * _2213)));
        _2258 = _2256 * (_2232 ? _2241 : (_2241 + (cbSceneParam._m0[72u].w * _2215)));
        _2259 = _2256 * (_2232 ? _2242 : (_2242 + (cbSceneParam._m0[72u].w * _2217)));
        _2260 = _2249 * 0.999000012874603271484375;
        _2270 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2270)
        {
            if ((cbInstanceData._m0[_608 + 7u].x + _2260) < 0.5)
            {
                _2482 = true;
                break;
            }
        }
        uint _2398 = _610 + uint(_2229.w);
        if ((cbInstanceData._m0[_2398].w < 1.0) && ((cbInstanceData._m0[_2398].w + _2260) < 0.5))
        {
            _2482 = true;
            break;
        }
        if ((_2253 + 1.0) < _2251.x)
        {
            _2482 = true;
            break;
        }
        _2482 = false;
        break;
    }
    float _2713;
    if (_2482)
    {
        discard_state = true;
        _2713 = 0.0;
    }
    else
    {
        _2713 = cbInstanceData._m0[_2105].w;
    }
    SV_Target.x = _2257;
    SV_Target.y = _2258;
    SV_Target.z = _2259;
    SV_Target.w = _2713;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2105].w;
    discard_exit();
}


