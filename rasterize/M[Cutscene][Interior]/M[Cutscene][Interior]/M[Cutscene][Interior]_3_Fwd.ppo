#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 10) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_8;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _880;
uint _2022;
uint _2023;
uint _2024;
uint _2258;
uint _2259;
uint _2260;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _284 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _319 = cbMtdParam._m0[24u].x + _263;
    float _320 = cbMtdParam._m0[24u].y + _264;
    float _321 = cbMtdParam._m0[24u].z + _265;
    float _335 = (-0.0) - dot(vec3(_319, _320, _321), vec3(_191 * _184, _191 * _185, _191 * _186));
    float _336 = (-0.0) - dot(vec3(_319, _320, _321), vec3(_205 * TANGENT.x, _205 * TANGENT.y, _205 * TANGENT.z));
    float _337 = (-0.0) - dot(vec3(_319, _320, _321), vec3((-0.0) - (_198 * NORMAL.x), (-0.0) - (_198 * NORMAL.y), (-0.0) - (_198 * NORMAL.z)));
    float _341 = inversesqrt(dot(vec3(_335, _336, _337), vec3(_335, _336, _337)));
    float _344 = _341 * _337;
    float _345 = (_341 * _335) + (((_284.x * 2.0) + (-1.0)) * cbMtdParam._m0[22u].x);
    float _346 = (_341 * _336) + (((_284.y * 2.0) + (-1.0)) * cbMtdParam._m0[22u].y);
    float _347 = _345 * cbMtdParam._m0[20u].w;
    float _348 = _346 * cbMtdParam._m0[20u].z;
    float _349 = fract(TEXCOORD.x);
    float _350 = fract(TEXCOORD.y);
    float _356;
    if (_347 > 0.0)
    {
        _356 = (1.0 - _349) / _347;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_347 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _349) / _347;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _356 = frontier_phi_3_2_ladder;
    }
    float _364;
    if (_348 > 0.0)
    {
        _364 = (1.0 - _350) / _348;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_348 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _350) / _348;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _364 = frontier_phi_7_6_ladder;
    }
    bool _366 = _344 > 0.0;
    float _368 = _366 ? (cbMtdParam._m0[16u].x / _344) : 5000.0;
    float _369 = isnan(_364) ? _356 : (isnan(_356) ? _364 : min(_356, _364));
    float _370 = isnan(_368) ? _369 : (isnan(_369) ? _368 : min(_369, _368));
    float _374 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _375 = _349 + (-0.5);
    float _378 = _350 + (-0.5);
    float _381 = ((_370 * _344) + _374) / _374;
    vec4 _406 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (((((_375 + (_370 * _347)) / _381) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (((((_378 + (_370 * _348)) / _381) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    float _416 = cbMtdParam._m0[9u].x * _406.x;
    float _417 = cbMtdParam._m0[9u].y * _406.y;
    float _418 = cbMtdParam._m0[9u].z * _406.z;
    float _437 = _345 * cbMtdParam._m0[22u].w;
    float _438 = _346 * cbMtdParam._m0[22u].z;
    bool _439 = _437 > 0.0;
    float _444;
    if (_439)
    {
        _444 = (1.0 - _349) / _437;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_437 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _349) / _437;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _444 = frontier_phi_11_10_ladder;
    }
    bool _446 = _438 > 0.0;
    float _451;
    if (_446)
    {
        _451 = (1.0 - _350) / _438;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_438 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _350) / _438;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _451 = frontier_phi_15_14_ladder;
    }
    float _454 = _366 ? (cbMtdParam._m0[18u].x / _344) : 5000.0;
    float _455 = isnan(_451) ? _444 : (isnan(_444) ? _451 : min(_444, _451));
    float _456 = isnan(_454) ? _455 : (isnan(_455) ? _454 : min(_455, _454));
    float _460 = cbMtdParam._m0[19u].y * cbMtdParam._m0[18u].x;
    float _464 = ((_456 * _344) + _460) / _460;
    float _469 = cbMtdParam._m0[19u].x - cbMtdParam._m0[20u].x * trunc(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    float _471 = floor(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    vec4 _487 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_375 + (_456 * _437)) / _464) + 0.5) + _469) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_378 + (_456 * _438)) / _464) + 0.5) + _471) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[0u].w));
    float _499;
    if (_439)
    {
        _499 = (1.0 - _349) / _437;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_437 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _349) / _437;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _499 = frontier_phi_19_18_ladder;
    }
    float _505;
    if (_446)
    {
        _505 = (1.0 - _350) / _438;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_438 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _350) / _438;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _505 = frontier_phi_23_22_ladder;
    }
    float _507 = isnan(_505) ? _499 : (isnan(_499) ? _505 : min(_499, _505));
    float _508 = isnan(_454) ? _507 : (isnan(_507) ? _454 : min(_507, _454));
    float _515 = ((_508 * _344) + _460) / _460;
    vec4 _535 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_375 + (_508 * _437)) / _515) + 0.5) + _469) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_378 + (_508 * _438)) / _515) + 0.5) + _471) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[8u].w));
    float _537 = _535.x;
    float _544 = (_537 * ((_487.x * cbMtdParam._m0[10u].x) - _416)) + _416;
    float _545 = (_537 * ((_487.y * cbMtdParam._m0[10u].y) - _417)) + _417;
    float _546 = (_537 * ((_487.z * cbMtdParam._m0[10u].z) - _418)) + _418;
    float _562 = _345 * cbMtdParam._m0[23u].y;
    float _563 = _346 * cbMtdParam._m0[23u].x;
    bool _564 = _562 > 0.0;
    float _569;
    if (_564)
    {
        _569 = (1.0 - _349) / _562;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_562 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _349) / _562;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _569 = frontier_phi_27_26_ladder;
    }
    bool _571 = _563 > 0.0;
    float _576;
    if (_571)
    {
        _576 = (1.0 - _350) / _563;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_563 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _350) / _563;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _576 = frontier_phi_31_30_ladder;
    }
    float _579 = _366 ? (cbMtdParam._m0[19u].w / _344) : 5000.0;
    float _580 = isnan(_576) ? _569 : (isnan(_569) ? _576 : min(_569, _576));
    float _581 = isnan(_579) ? _580 : (isnan(_580) ? _579 : min(_580, _579));
    float _585 = cbMtdParam._m0[19u].w * cbMtdParam._m0[16u].z;
    float _589 = ((_581 * _344) + _585) / _585;
    float _594 = cbMtdParam._m0[19u].z - cbMtdParam._m0[23u].z * trunc(cbMtdParam._m0[19u].z / cbMtdParam._m0[23u].z);
    float _596 = floor(cbMtdParam._m0[19u].z / cbMtdParam._m0[23u].z);
    vec4 _612 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * (((((_375 + (_581 * _562)) / _589) + 0.5) + _594) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * (((((_378 + (_581 * _563)) / _589) + 0.5) + _596) / cbMtdParam._m0[23u].w)) + cbTextureTilingScale._m0[9u].w));
    float _624;
    if (_564)
    {
        _624 = (1.0 - _349) / _562;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_562 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _349) / _562;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _624 = frontier_phi_35_34_ladder;
    }
    float _630;
    if (_571)
    {
        _630 = (1.0 - _350) / _563;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_563 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _350) / _563;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _630 = frontier_phi_39_38_ladder;
    }
    float _632 = isnan(_630) ? _624 : (isnan(_624) ? _630 : min(_624, _630));
    float _633 = isnan(_579) ? _632 : (isnan(_632) ? _579 : min(_632, _579));
    float _640 = ((_633 * _344) + _585) / _585;
    vec4 _660 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_375 + (_633 * _562)) / _640) + 0.5) + _594) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_378 + (_633 * _563)) / _640) + 0.5) + _596) / cbMtdParam._m0[23u].w)) + cbTextureTilingScale._m0[10u].w));
    float _662 = _660.x;
    float _687 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _691 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _692 = _263 * _691;
    float _693 = _264 * _691;
    float _694 = _265 * _691;
    float _700 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _701 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _710 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_700 * cbSceneParam._m0[86u].x, _701 * cbSceneParam._m0[86u].y));
    float _713 = _710.x * TEXCOORD_4.z;
    float _714 = (-0.0) - _692;
    float _715 = (-0.0) - _693;
    float _716 = (-0.0) - _694;
    float _738 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _742 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _746 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _879;
    float _881;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _802 = (cbModelParam._m0[37u].x * ((((fma(_746, cbModelParam._m0[26u].z, fma(_742, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _738)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _804 = (cbModelParam._m0[37u].y * ((((fma(_746, cbModelParam._m0[27u].z, fma(_742, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _738)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _805 = (((((fma(_746, cbModelParam._m0[28u].z, fma(_742, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _738)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _808 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_802, _804, _805), 0.0);
        vec4 _815 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_802, _804, _805), 0.0);
        vec4 _822 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_802, _804, _805), 0.0);
        vec4 _829 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_802, _804, _805), 0.0);
        float _842 = exp2((_808.w + (-0.5)) * 20.0) * 2.0;
        float _852 = exp2((_815.w + (-0.5)) * 20.0) * 2.0;
        float _862 = exp2((_822.w + (-0.5)) * 20.0) * 2.0;
        float _872 = exp2((_829.w + (-0.5)) * 20.0) * 2.0;
        float _873 = _872 * (_829.x + (-0.5));
        float _874 = _872 * (_829.y + (-0.5));
        float _875 = _872 * (_829.z + (-0.5));
        _879 = _842 * (_808.z + (-0.5));
        _881 = _842 * (_808.y + (-0.5));
        _882 = _842 * (_808.x + (-0.5));
        _883 = _852 * (_815.z + (-0.5));
        _884 = _852 * (_815.y + (-0.5));
        _885 = _852 * (_815.x + (-0.5));
        _886 = _862 * (_822.z + (-0.5));
        _887 = _862 * (_822.y + (-0.5));
        _888 = _862 * (_822.x + (-0.5));
        _889 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        _890 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        _891 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    }
    else
    {
        _879 = _880;
        _881 = _880;
        _882 = _880;
        _883 = _880;
        _884 = _880;
        _885 = _880;
        _886 = _880;
        _887 = _880;
        _888 = _880;
        _889 = _880;
        _890 = _880;
        _891 = _880;
    }
    float _1019;
    float _1020;
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _945 = (cbModelParam._m0[38u].x * ((((fma(_746, cbModelParam._m0[30u].z, fma(_742, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _738)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _946 = (cbModelParam._m0[38u].y * ((((fma(_746, cbModelParam._m0[31u].z, fma(_742, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _738)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _947 = (((((fma(_746, cbModelParam._m0[32u].z, fma(_742, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _738)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _949 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_945, _946, _947), 0.0);
        vec4 _956 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_945, _946, _947), 0.0);
        vec4 _963 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_945, _946, _947), 0.0);
        vec4 _970 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_945, _946, _947), 0.0);
        float _982 = exp2((_949.w + (-0.5)) * 20.0) * 2.0;
        float _992 = exp2((_956.w + (-0.5)) * 20.0) * 2.0;
        float _1002 = exp2((_963.w + (-0.5)) * 20.0) * 2.0;
        float _1012 = exp2((_970.w + (-0.5)) * 20.0) * 2.0;
        float _1013 = _1012 * (_970.x + (-0.5));
        float _1014 = _1012 * (_970.y + (-0.5));
        float _1015 = _1012 * (_970.z + (-0.5));
        _1019 = _982 * (_949.z + (-0.5));
        _1020 = _982 * (_949.y + (-0.5));
        _1021 = _982 * (_949.x + (-0.5));
        _1022 = _992 * (_956.z + (-0.5));
        _1023 = _992 * (_956.y + (-0.5));
        _1024 = _992 * (_956.x + (-0.5));
        _1025 = _1002 * (_963.z + (-0.5));
        _1026 = _1002 * (_963.y + (-0.5));
        _1027 = _1002 * (_963.x + (-0.5));
        _1028 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        _1029 = isnan(0.0) ? _1014 : (isnan(_1014) ? 0.0 : max(_1014, 0.0));
        _1030 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
    }
    else
    {
        _1019 = _880;
        _1020 = _880;
        _1021 = _880;
        _1022 = _880;
        _1023 = _880;
        _1024 = _880;
        _1025 = _880;
        _1026 = _880;
        _1027 = _880;
        _1028 = _880;
        _1029 = _880;
        _1030 = _880;
    }
    float _1045 = _692 * (-0.5);
    float _1046 = _693 * (-0.5);
    float _1047 = _694 * (-0.5);
    float _1048 = dot(vec4(_1045, _1046, _1047, 1.0), vec4(_1021, _1024, _1027, _1030));
    float _1051 = dot(vec4(_1045, _1046, _1047, 1.0), vec4(_1020, _1023, _1026, _1029));
    float _1054 = dot(vec4(_1045, _1046, _1047, 1.0), vec4(_1019, _1022, _1025, _1028));
    float _1089;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1061 = dot(vec4(_1045, _1046, _1047, 1.0), vec4(_879, _883, _886, _889));
        float _1065 = dot(vec4(_1045, _1046, _1047, 1.0), vec4(_881, _884, _887, _890));
        float _1069 = dot(vec4(_1045, _1046, _1047, 1.0), vec4(_882, _885, _888, _891));
        float _1076 = dot(vec4(cbModelParam._m0[39u]), vec4(_1045, _1046, _1047, 1.0));
        _1089 = dot(vec3(isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0)), isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0)), isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1076) ? 0.0 : (isnan(0.0) ? _1076 : max(0.0, _1076))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1089 = 1.0;
    }
    float _1100;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1091 = dot(vec4(cbModelParam._m0[40u]), vec4(_1045, _1046, _1047, 1.0));
        _1100 = dot(vec3(isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0)), isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0)), isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1091) ? 0.0 : (isnan(0.0) ? _1091 : max(0.0, _1091))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1100 = 1.0;
    }
    float _1104 = (_1100 * cbModelParam._m0[1u].x) + (_1089 * (1.0 - cbModelParam._m0[1u].x));
    float _1110 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1193;
    float _1195;
    float _1197;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1160 = fma(_746, cbModelParam._m0[13u].z, fma(_742, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _738)) + cbModelParam._m0[13u].w;
        float _1164 = fma(_746, cbModelParam._m0[14u].z, fma(_742, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _738)) + cbModelParam._m0[14u].w;
        float _1168 = fma(_746, cbModelParam._m0[15u].z, fma(_742, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _738)) + cbModelParam._m0[15u].w;
        float _1171 = fma(_716, cbModelParam._m0[13u].z, fma(_715, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _714));
        float _1174 = fma(_716, cbModelParam._m0[14u].z, fma(_715, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _714));
        float _1177 = fma(_716, cbModelParam._m0[15u].z, fma(_715, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _714));
        float _1203;
        if (_1171 > 0.0)
        {
            _1203 = abs((1.0 - _1160) / _1171);
        }
        else
        {
            float frontier_phi_54_52_ladder;
            if (_1171 < 0.0)
            {
                frontier_phi_54_52_ladder = abs((_1160 + 1.0) / _1171);
            }
            else
            {
                frontier_phi_54_52_ladder = 5000.0;
            }
            _1203 = frontier_phi_54_52_ladder;
        }
        float _1479;
        if (_1174 > 0.0)
        {
            _1479 = abs((1.0 - _1164) / _1174);
        }
        else
        {
            float frontier_phi_63_59_ladder;
            if (_1174 < 0.0)
            {
                frontier_phi_63_59_ladder = abs((_1164 + 1.0) / _1174);
            }
            else
            {
                frontier_phi_63_59_ladder = 5000.0;
            }
            _1479 = frontier_phi_63_59_ladder;
        }
        float _1775;
        if (_1177 > 0.0)
        {
            _1775 = abs((1.0 - _1168) / _1177);
        }
        else
        {
            float frontier_phi_77_70_ladder;
            if (_1177 < 0.0)
            {
                frontier_phi_77_70_ladder = abs((_1168 + 1.0) / _1177);
            }
            else
            {
                frontier_phi_77_70_ladder = 5000.0;
            }
            _1775 = frontier_phi_77_70_ladder;
        }
        float _1777 = isnan(_1479) ? _1203 : (isnan(_1203) ? _1479 : min(_1203, _1479));
        float _1778 = isnan(_1775) ? _1777 : (isnan(_1777) ? _1775 : min(_1777, _1775));
        float _1782 = (_1778 * _1171) + _1160;
        float _1783 = (_1778 * _1174) + _1164;
        float _1784 = (_1778 * _1177) + _1168;
        float _1785 = _1778 * 9.9999997473787516355514526367188e-05;
        float _1786 = (-1.0) - _1785;
        float _1788 = _1785 + 1.0;
        float frontier_phi_53_77_ladder;
        float frontier_phi_53_77_ladder_1;
        float frontier_phi_53_77_ladder_2;
        if ((_1784 > _1788) || ((_1784 < _1786) || ((_1783 > _1788) || ((_1783 < _1786) || ((_1782 < _1786) || (_1782 > _1788))))))
        {
            frontier_phi_53_77_ladder = 0.0;
            frontier_phi_53_77_ladder_1 = 0.0;
            frontier_phi_53_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1895 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1784, cbModelParam._m0[9u].z, fma(_1783, cbModelParam._m0[9u].y, _1782 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1784, cbModelParam._m0[10u].z, fma(_1783, cbModelParam._m0[10u].y, _1782 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1784, cbModelParam._m0[11u].z, fma(_1783, cbModelParam._m0[11u].y, _1782 * cbModelParam._m0[11u].x))), _1110);
            frontier_phi_53_77_ladder = _1895.z * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_1 = _1895.y * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_2 = _1895.x * cbModelParam._m0[1u].y;
        }
        _1193 = frontier_phi_53_77_ladder_2;
        _1195 = frontier_phi_53_77_ladder_1;
        _1197 = frontier_phi_53_77_ladder;
    }
    else
    {
        vec4 _1181 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_714, _715, _716), _1110);
        _1193 = _1181.x * cbModelParam._m0[1u].y;
        _1195 = _1181.y * cbModelParam._m0[1u].y;
        _1197 = _1181.z * cbModelParam._m0[1u].y;
    }
    float _1200 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1288;
    float _1290;
    float _1292;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1252 = fma(_746, cbModelParam._m0[21u].z, fma(_742, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _738)) + cbModelParam._m0[21u].w;
        float _1256 = fma(_746, cbModelParam._m0[22u].z, fma(_742, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _738)) + cbModelParam._m0[22u].w;
        float _1260 = fma(_746, cbModelParam._m0[23u].z, fma(_742, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _738)) + cbModelParam._m0[23u].w;
        float _1263 = fma(_716, cbModelParam._m0[21u].z, fma(_715, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _714));
        float _1266 = fma(_716, cbModelParam._m0[22u].z, fma(_715, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _714));
        float _1269 = fma(_716, cbModelParam._m0[23u].z, fma(_715, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _714));
        float _1484;
        if (_1263 > 0.0)
        {
            _1484 = abs((1.0 - _1252) / _1263);
        }
        else
        {
            float frontier_phi_65_61_ladder;
            if (_1263 < 0.0)
            {
                frontier_phi_65_61_ladder = abs((_1252 + 1.0) / _1263);
            }
            else
            {
                frontier_phi_65_61_ladder = 5000.0;
            }
            _1484 = frontier_phi_65_61_ladder;
        }
        float _1801;
        if (_1266 > 0.0)
        {
            _1801 = abs((1.0 - _1256) / _1266);
        }
        else
        {
            float frontier_phi_79_72_ladder;
            if (_1266 < 0.0)
            {
                frontier_phi_79_72_ladder = abs((_1256 + 1.0) / _1266);
            }
            else
            {
                frontier_phi_79_72_ladder = 5000.0;
            }
            _1801 = frontier_phi_79_72_ladder;
        }
        float _1952;
        if (_1269 > 0.0)
        {
            _1952 = abs((1.0 - _1260) / _1269);
        }
        else
        {
            float frontier_phi_93_88_ladder;
            if (_1269 < 0.0)
            {
                frontier_phi_93_88_ladder = abs((_1260 + 1.0) / _1269);
            }
            else
            {
                frontier_phi_93_88_ladder = 5000.0;
            }
            _1952 = frontier_phi_93_88_ladder;
        }
        float _1954 = isnan(_1801) ? _1484 : (isnan(_1484) ? _1801 : min(_1484, _1801));
        float _1955 = isnan(_1952) ? _1954 : (isnan(_1954) ? _1952 : min(_1954, _1952));
        float _1959 = (_1955 * _1263) + _1252;
        float _1960 = (_1955 * _1266) + _1256;
        float _1961 = (_1955 * _1269) + _1260;
        float _1962 = _1955 * 9.9999997473787516355514526367188e-05;
        float _1963 = (-1.0) - _1962;
        float _1965 = _1962 + 1.0;
        float frontier_phi_62_93_ladder;
        float frontier_phi_62_93_ladder_1;
        float frontier_phi_62_93_ladder_2;
        if ((_1961 > _1965) || ((_1961 < _1963) || ((_1960 > _1965) || ((_1960 < _1963) || ((_1959 < _1963) || (_1959 > _1965))))))
        {
            frontier_phi_62_93_ladder = 0.0;
            frontier_phi_62_93_ladder_1 = 0.0;
            frontier_phi_62_93_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2121 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1961, cbModelParam._m0[17u].z, fma(_1960, cbModelParam._m0[17u].y, _1959 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1961, cbModelParam._m0[18u].z, fma(_1960, cbModelParam._m0[18u].y, _1959 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1961, cbModelParam._m0[19u].z, fma(_1960, cbModelParam._m0[19u].y, _1959 * cbModelParam._m0[19u].x))), _1200);
            frontier_phi_62_93_ladder = _2121.z * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_1 = _2121.y * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_2 = _2121.x * cbModelParam._m0[1u].z;
        }
        _1288 = frontier_phi_62_93_ladder_2;
        _1290 = frontier_phi_62_93_ladder_1;
        _1292 = frontier_phi_62_93_ladder;
    }
    else
    {
        vec4 _1272 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_714, _715, _716), _1200);
        _1288 = _1272.x * cbModelParam._m0[1u].z;
        _1290 = _1272.y * cbModelParam._m0[1u].z;
        _1292 = _1272.z * cbModelParam._m0[1u].z;
    }
    float _1304 = _713 * 0.01200000010430812835693359375;
    float _1306 = _1304 * ((cbModelParam._m0[1u].w * (_1288 - _1193)) + _1193);
    float _1307 = _1304 * ((cbModelParam._m0[1u].w * (_1290 - _1195)) + _1195);
    float _1308 = _1304 * ((cbModelParam._m0[1u].w * (_1292 - _1197)) + _1197);
    float _1329 = fma(_1308, cbSceneParam._m0[89u].z, fma(_1307, cbSceneParam._m0[89u].y, _1306 * cbSceneParam._m0[89u].x));
    float _1332 = fma(_1308, cbSceneParam._m0[90u].z, fma(_1307, cbSceneParam._m0[90u].y, _1306 * cbSceneParam._m0[90u].x));
    float _1335 = fma(_1308, cbSceneParam._m0[91u].z, fma(_1307, cbSceneParam._m0[91u].y, _1306 * cbSceneParam._m0[91u].x));
    uint _1342 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1346 = floatBitsToUint(cbInstanceData._m0[_1342 + 5u]);
    uint _1348 = _1346.x * 14u;
    uint _1349 = _1348 + 13u;
    float _1354 = _713 + (-1.0);
    float _1357 = (cbLight._m0[_1349].x * _1354) + 1.0;
    float _1358 = (cbLight._m0[_1349].y * _1354) + 1.0;
    uint _1359 = _1348 + 8u;
    float _1370 = cbLight._m0[_1348].x + _692;
    float _1371 = cbLight._m0[_1348].y + _693;
    float _1372 = cbLight._m0[_1348].z + _694;
    float _1376 = inversesqrt(dot(vec3(_1370, _1371, _1372), vec3(_1370, _1371, _1372)));
    float _1380 = dot(vec3(0.0), vec3(cbLight._m0[_1348].xyz));
    float _2683 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
    float _1383 = isnan(1.0) ? _2683 : (isnan(_2683) ? 1.0 : min(_2683, 1.0));
    float _1384 = dot(vec3(0.0), vec3(_692, _693, _694));
    float _2694 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
    float _1387 = isnan(1.0) ? _2694 : (isnan(_2694) ? 1.0 : min(_2694, 1.0));
    float _1388 = dot(vec3(cbLight._m0[_1348].xyz), vec3(_1370 * _1376, _1371 * _1376, _1372 * _1376));
    float _2705 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
    float _1399 = (exp2(log2(1.0 - (isnan(1.0) ? _2705 : (isnan(_2705) ? 1.0 : min(_2705, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1405 = (0.5 / ((_1383 + 9.9999999392252902907785028219223e-09) + _1387)) * _1383;
    float _2716 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
    float _1407 = (isnan(1.0) ? _2716 : (isnan(_2716) ? 1.0 : min(_2716, 1.0))) * 0.31831014156341552734375;
    float _1409 = isnan(1.0) ? _1357 : (isnan(_1357) ? 1.0 : min(_1357, 1.0));
    uint _1419 = _1348 + 9u;
    uint _1425 = _1348 | 1u;
    float _1431 = cbLight._m0[_1425].x + _692;
    float _1432 = cbLight._m0[_1425].y + _693;
    float _1433 = cbLight._m0[_1425].z + _694;
    float _1437 = inversesqrt(dot(vec3(_1431, _1432, _1433), vec3(_1431, _1432, _1433)));
    float _1441 = dot(vec3(0.0), vec3(cbLight._m0[_1425].xyz));
    float _2732 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
    float _1444 = isnan(1.0) ? _2732 : (isnan(_2732) ? 1.0 : min(_2732, 1.0));
    float _1445 = dot(vec3(cbLight._m0[_1425].xyz), vec3(_1431 * _1437, _1432 * _1437, _1433 * _1437));
    float _2743 = isnan(0.0) ? _1445 : (isnan(_1445) ? 0.0 : max(_1445, 0.0));
    float _1454 = (exp2(log2(1.0 - (isnan(1.0) ? _2743 : (isnan(_2743) ? 1.0 : min(_2743, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1458 = (0.5 / ((_1444 + 9.9999999392252902907785028219223e-09) + _1387)) * _1444;
    float _2754 = isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0));
    float _1460 = (isnan(1.0) ? _2754 : (isnan(_2754) ? 1.0 : min(_2754, 1.0))) * 0.31831014156341552734375;
    float _1461 = isnan(1.0) ? _1358 : (isnan(_1358) ? 1.0 : min(_1358, 1.0));
    float _1471 = (((_1454 * cbLight._m0[_1419].x) * _1460) * _1461) + (((_1399 * cbLight._m0[_1359].x) * _1407) * _1409);
    float _1472 = (((_1454 * cbLight._m0[_1419].y) * _1460) * _1461) + (((_1399 * cbLight._m0[_1359].y) * _1407) * _1409);
    float _1473 = (((_1454 * cbLight._m0[_1419].z) * _1460) * _1461) + (((_1399 * cbLight._m0[_1359].z) * _1407) * _1409);
    float _1590;
    float _1592;
    float _1594;
    if (_1346.y == 0u)
    {
        float _1529 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1530 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1529;
        float _1531 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1529;
        float _1532 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1529;
        uvec4 _1544 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1545 = _1544.x;
        uint _1556 = uint((float(_1544.y) * floor(float(uint(cbSceneParam._m0[85u].y * _701) / _1545))) + floor(float(uint(cbSceneParam._m0[85u].x * _700) / _1545)));
        float _1566 = (log2(_1532 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1567 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
        uint _1570 = uint(isnan(14.0) ? _1567 : (isnan(_1567) ? 14.0 : min(_1567, 14.0)));
        uvec4 _1575 = texelFetch(g_lightClusterGridBuffer, int(((_1570 << 2u) + (_1556 << 6u)) >> 2u));
        uint _1576 = _1575.x;
        uint _1577 = _1544.z;
        float _1667;
        float _1669;
        float _1671;
        if (((((1u << ((_1577 >> 4u) & 15u)) + 4294967295u) & _1576) == 0u) || ((_1577 & 240u) == 0u))
        {
            _1667 = 0.0;
            _1669 = 0.0;
            _1671 = 0.0;
        }
        else
        {
            float _1668;
            float _1670;
            float _1672;
            float _1826 = 0.0;
            float _1827 = 0.0;
            float _1828 = 0.0;
            uint _1829 = 0u;
            uint _1838;
            bool _1839;
            for (;;)
            {
                _1838 = texelFetch(g_lightClassification, int((((_1570 << 5u) + (_1556 << 9u)) + (_1829 << 2u)) >> 2u)).x;
                _1839 = _1838 == 0u;
                float frontier_phi_90_pred;
                float frontier_phi_90_pred_1;
                float frontier_phi_90_pred_2;
                if (_1839)
                {
                    frontier_phi_90_pred = _1828;
                    frontier_phi_90_pred_1 = _1827;
                    frontier_phi_90_pred_2 = _1826;
                }
                else
                {
                    float _1992;
                    float _1993;
                    float _1994;
                    uint _1995;
                    _1992 = _1826;
                    _1993 = _1827;
                    _1994 = _1828;
                    _1995 = _1838;
                    float _1904;
                    float _1905;
                    float _1906;
                    for (;;)
                    {
                        uint _1999 = uint(findLSB(_1995)) + (_1829 << 5u);
                        uint _1996 = (_1995 + 4294967295u) & _1995;
                        uint _2001 = _1999 * 48u;
                        vec4 _2015 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2001)).x, texelFetch(g_PointLightRenderingBuffer, int(_2001 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2001 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2001 + 3u)).x));
                        uint _2032 = (_1999 * 48u) + 8u;
                        vec3 _2043 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2032)).x, texelFetch(g_PointLightRenderingBuffer, int(_2032 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2032 + 2u)).x));
                        float _2047 = _2015.x - _1530;
                        float _2048 = _2015.y - _1531;
                        float _2049 = _2015.z - _1532;
                        float _2050 = dot(vec3(_2047, _2048, _2049), vec3(_2047, _2048, _2049));
                        float _2053 = inversesqrt(_2050);
                        float _2062 = 1.0 - (_2050 * _2015.w);
                        float _2780 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
                        float _2064 = sqrt(_2050) * uintBitsToFloat(uvec4(_2022, _2023, _2024, texelFetch(g_PointLightRenderingBuffer, int(((_1999 * 48u) + 4u) + 3u)).x)).w;
                        float _2067 = 1.39999997615814208984375 / (_2064 + 1.39999997615814208984375);
                        float _2068 = _2067 * _2067;
                        float _2071 = ((1.0 - _2068) * dot(vec3(0.0), vec3(_2053 * _2047, _2053 * _2048, _2053 * _2049))) + _2068;
                        float _2073 = (-0.0) - _1530;
                        float _2074 = (-0.0) - _1531;
                        float _2075 = (-0.0) - _1532;
                        float _2079 = inversesqrt(dot(vec3(_2073, _2074, _2075), vec3(_2073, _2074, _2075)));
                        float _2083 = dot(vec3(0.0), vec3(_2079 * _2073, _2079 * _2074, _2079 * _2075));
                        float _2791 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
                        float _2802 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
                        float _2087 = isnan(1.0) ? _2802 : (isnan(_2802) ? 1.0 : min(_2802, 1.0));
                        float _2091 = (0.5 / (((isnan(1.0) ? _2791 : (isnan(_2791) ? 1.0 : min(_2791, 1.0))) + 9.9999999392252902907785028219223e-09) + _2087)) * _2087;
                        float _2813 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
                        float _2100 = (((isnan(1.0) ? _2813 : (isnan(_2813) ? 1.0 : min(_2813, 1.0))) * 3.1415927410125732421875) / (((_2064 * _2064) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2780 : (isnan(_2780) ? 1.0 : min(_2780, 1.0)));
                        _1904 = (_2100 * _2043.x) + _1992;
                        _1905 = (_2100 * _2043.y) + _1993;
                        _1906 = (_2100 * _2043.z) + _1994;
                        if (_1996 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _1992 = _1904;
                            _1993 = _1905;
                            _1994 = _1906;
                            _1995 = _1996;
                        }
                    }
                    frontier_phi_90_pred = _1906;
                    frontier_phi_90_pred_1 = _1905;
                    frontier_phi_90_pred_2 = _1904;
                }
                _1672 = frontier_phi_90_pred;
                _1670 = frontier_phi_90_pred_1;
                _1668 = frontier_phi_90_pred_2;
                uint _1830 = _1829 + 1u;
                if (_1830 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1826 = _1668;
                    _1827 = _1670;
                    _1828 = _1672;
                    _1829 = _1830;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1667 = _1668;
            _1669 = _1670;
            _1671 = _1672;
        }
        uvec4 _1675 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1676 = _1675.z;
        uint _1678 = (_1676 >> 8u) & 15u;
        float _1806;
        float _1808;
        float _1810;
        if (((4294967295u << _1678) & _1576) == 0u)
        {
            _1806 = _1667;
            _1808 = _1669;
            _1810 = _1671;
        }
        else
        {
            float _1822 = inversesqrt(dot(vec3(_1530, _1531, _1532), vec3(_1530, _1531, _1532)));
            float frontier_phi_81_82_ladder;
            float frontier_phi_81_82_ladder_1;
            float frontier_phi_81_82_ladder_2;
            if (_1678 < ((_1676 >> 12u) & 15u))
            {
                float _1807;
                float _1809;
                float _1811;
                float _1978 = _1667;
                float _1979 = _1669;
                float _1980 = _1671;
                uint _1981 = _1678;
                uint _1990;
                bool _1991;
                for (;;)
                {
                    _1990 = texelFetch(g_lightClassification, int((((_1570 << 5u) + (_1556 << 9u)) + (_1981 << 2u)) >> 2u)).x;
                    _1991 = _1990 == 0u;
                    float frontier_phi_99_pred;
                    float frontier_phi_99_pred_1;
                    float frontier_phi_99_pred_2;
                    if (_1991)
                    {
                        frontier_phi_99_pred = _1980;
                        frontier_phi_99_pred_1 = _1979;
                        frontier_phi_99_pred_2 = _1978;
                    }
                    else
                    {
                        float _2126;
                        float _2127;
                        float _2128;
                        float _2347;
                        float _2348;
                        float _2349;
                        float _2136 = _1978;
                        float _2137 = _1979;
                        float _2138 = _1980;
                        uint _2139 = _1990;
                        uint _2140;
                        uint _2150;
                        vec4 _2165;
                        float _2166;
                        vec3 _2178;
                        vec4 _2193;
                        vec4 _2208;
                        float _2254;
                        bool _2255;
                        for (;;)
                        {
                            _2150 = ((_1981 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2139));
                            _2140 = (_2139 + 4294967295u) & _2139;
                            uint _2152 = _2150 * 40u;
                            _2165 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2152)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2152 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2152 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2152 + 3u)).x));
                            _2166 = _2165.w;
                            uint _2168 = (_2150 * 40u) + 8u;
                            _2178 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2168)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2168 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2168 + 2u)).x));
                            uint _2180 = (_2150 * 40u) + 16u;
                            _2193 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2180)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2180 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2180 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2180 + 3u)).x));
                            uint _2195 = (_2150 * 40u) + 20u;
                            _2208 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2195)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2195 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2195 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2195 + 3u)).x));
                            uint _2210 = (_2150 * 40u) + 24u;
                            vec4 _2223 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2210)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2210 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2210 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2210 + 3u)).x));
                            uint _2229 = (_2150 * 40u) + 28u;
                            vec4 _2242 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2229)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2229 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2229 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2229 + 3u)).x));
                            _2254 = fma(_1532, _2242.z, fma(_1531, _2242.y, _2242.x * _1530)) + _2242.w;
                            _2255 = !((fma(_1532, _2223.z, fma(_1531, _2223.y, _2223.x * _1530)) + _2223.w) <= 0.0);
                            float frontier_phi_105_pred;
                            float frontier_phi_105_pred_1;
                            float frontier_phi_105_pred_2;
                            if (_2255)
                            {
                                float _2289 = _2165.x - _1530;
                                float _2290 = _2165.y - _1531;
                                float _2291 = _2165.z - _1532;
                                float _2292 = dot(vec3(_2289, _2290, _2291), vec3(_2289, _2290, _2291));
                                float _2295 = inversesqrt(_2292);
                                float _2302 = 1.0 - (_2292 / (_2166 * _2166));
                                float _2824 = isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0));
                                float _2304 = sqrt(_2292) * uintBitsToFloat(uvec4(_2258, _2259, _2260, texelFetch(g_SpotLightRenderingBuffer, int(((_2150 * 40u) + 4u) + 3u)).x)).w;
                                float _2306 = 1.39999997615814208984375 / (_2304 + 1.39999997615814208984375);
                                float _2307 = _2306 * _2306;
                                float _2310 = (fma(_1532, _2193.z, fma(_1531, _2193.y, _2193.x * _1530)) + _2193.w) / _2254;
                                float _2311 = (fma(_1532, _2208.z, fma(_1531, _2208.y, _2208.x * _1530)) + _2208.w) / _2254;
                                float _2315 = 1.0 - dot(vec2(_2310, _2311), vec2(_2310, _2311));
                                float _2835 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
                                float _2323 = dot(vec3(0.0), vec3((-0.0) - (_1530 * _1822), (-0.0) - (_1531 * _1822), (-0.0) - (_1532 * _1822)));
                                float _2846 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
                                float _2331 = ((1.0 - _2307) * dot(vec3(0.0), vec3(_2295 * _2289, _2295 * _2290, _2295 * _2291))) + _2307;
                                float _2857 = isnan(0.0) ? _2331 : (isnan(_2331) ? 0.0 : max(_2331, 0.0));
                                float _2332 = isnan(1.0) ? _2857 : (isnan(_2857) ? 1.0 : min(_2857, 1.0));
                                float _2336 = (0.5 / (((isnan(1.0) ? _2846 : (isnan(_2846) ? 1.0 : min(_2846, 1.0))) + 9.9999999392252902907785028219223e-09) + _2332)) * _2332;
                                float _2868 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
                                float _2343 = ((isnan(1.0) ? _2835 : (isnan(_2835) ? 1.0 : min(_2835, 1.0))) * (isnan(1.0) ? _2824 : (isnan(_2824) ? 1.0 : min(_2824, 1.0)))) * (((isnan(1.0) ? _2868 : (isnan(_2868) ? 1.0 : min(_2868, 1.0))) * 3.1415927410125732421875) / (((_2304 * _2304) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_105_pred = _2343 * _2178.z;
                                frontier_phi_105_pred_1 = _2343 * _2178.y;
                                frontier_phi_105_pred_2 = _2343 * _2178.x;
                            }
                            else
                            {
                                frontier_phi_105_pred = 0.0;
                                frontier_phi_105_pred_1 = 0.0;
                                frontier_phi_105_pred_2 = 0.0;
                            }
                            _2349 = frontier_phi_105_pred;
                            _2348 = frontier_phi_105_pred_1;
                            _2347 = frontier_phi_105_pred_2;
                            _2126 = _2347 + _2136;
                            _2127 = _2348 + _2137;
                            _2128 = _2349 + _2138;
                            if (_2140 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2136 = _2126;
                                _2137 = _2127;
                                _2138 = _2128;
                                _2139 = _2140;
                                continue;
                            }
                        }
                        frontier_phi_99_pred = _2128;
                        frontier_phi_99_pred_1 = _2127;
                        frontier_phi_99_pred_2 = _2126;
                    }
                    _1811 = frontier_phi_99_pred;
                    _1809 = frontier_phi_99_pred_1;
                    _1807 = frontier_phi_99_pred_2;
                    uint _1982 = _1981 + 1u;
                    if (_1982 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _1978 = _1807;
                        _1979 = _1809;
                        _1980 = _1811;
                        _1981 = _1982;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_81_82_ladder = _1809;
                frontier_phi_81_82_ladder_1 = _1807;
                frontier_phi_81_82_ladder_2 = _1811;
            }
            else
            {
                frontier_phi_81_82_ladder = _1669;
                frontier_phi_81_82_ladder_1 = _1667;
                frontier_phi_81_82_ladder_2 = _1671;
            }
            _1806 = frontier_phi_81_82_ladder_1;
            _1808 = frontier_phi_81_82_ladder;
            _1810 = frontier_phi_81_82_ladder_2;
        }
        float _1815 = isnan(1.0) ? _713 : (isnan(_713) ? 1.0 : min(_713, 1.0));
        _1590 = ((_1806 * 0.039999999105930328369140625) * _1815) + _1471;
        _1592 = ((_1808 * 0.039999999105930328369140625) * _1815) + _1472;
        _1594 = ((_1810 * 0.039999999105930328369140625) * _1815) + _1473;
    }
    else
    {
        _1590 = _1471;
        _1592 = _1472;
        _1594 = _1473;
    }
    uint _1601 = (_1342 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1616 = (cbInstanceData._m0[_1601].x * ((_662 * ((_612.x * cbMtdParam._m0[14u].x) - _544)) + _544)) + ((_1590 + ((isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0))) * _1104)) * cbPerFrame._m0[3u].x);
    float _1617 = (cbInstanceData._m0[_1601].y * ((_662 * ((_612.y * cbMtdParam._m0[14u].y) - _545)) + _545)) + ((_1592 + ((isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0))) * _1104)) * cbPerFrame._m0[3u].x);
    float _1618 = (cbInstanceData._m0[_1601].z * ((_662 * ((_612.z * cbMtdParam._m0[14u].z) - _546)) + _546)) + ((_1594 + ((isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0))) * _1104)) * cbPerFrame._m0[3u].x);
    uint _1622 = _1342 + 6u;
    float _1630 = _700 / cbSceneParam._m0[86u].x;
    float _1631 = _701 / cbSceneParam._m0[86u].y;
    vec4 _1645 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1630, _1631, (log2((isnan(cbSceneParam._m0[77u].w) ? _687 : (isnan(_687) ? cbSceneParam._m0[77u].w : min(_687, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1647 = _1645.x;
    float _1648 = _1645.y;
    float _1649 = _1645.z;
    float _1650 = _1645.w;
    float _1724;
    float _1726;
    float _1728;
    float _1730;
    if (_687 > cbSceneParam._m0[78u].w)
    {
        float _1686 = isnan(_687) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _687 : min(cbSceneParam._m0[80u].w, _687));
        float _1687 = _1686 / _687;
        float _1698 = _1687 * _263;
        float _1699 = _264 * _1687;
        float _1700 = (-0.0) - _1699;
        float _1701 = _1687 * _265;
        float _1703 = (cbSceneParam._m0[77u].w * _1700) / _1686;
        float _1704 = _1703 + cbSceneParam._m0[79u].w;
        float _1705 = cbSceneParam._m0[79u].w - _1699;
        float _1711 = sqrt(((_1698 * _1698) + (_1699 * _1699)) + (_1701 * _1701));
        float _1714 = (1.0 - (cbSceneParam._m0[77u].w / _1686)) * _1711;
        float _1720 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1722 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1914;
        if (abs((_1700 - _1703) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1914 = ((((_1704 > 0.0) ? exp2(_1720 * _1704) : (2.0 - exp2(_1722 * _1704))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1714;
        }
        else
        {
            float _1852 = 1.0 / cbSceneParam._m0[80u].x;
            float _1853 = isnan(_1705) ? _1704 : (isnan(_1704) ? _1705 : max(_1704, _1705));
            float _1854 = isnan(_1705) ? _1704 : (isnan(_1704) ? _1705 : min(_1704, _1705));
            float _1863 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : min(_1853, 0.0));
            float _1864 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : min(_1854, 0.0));
            _1914 = ((abs(_1711 / _1700) * cbSceneParam._m0[80u].y) * ((((_1863 - _1864) * 2.0) - ((exp2(_1720 * (isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0)))) - exp2(_1720 * (isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0))))) * _1852)) - ((exp2(_1722 * _1863) - exp2(_1722 * _1864)) * _1852))) + (_1714 * cbSceneParam._m0[80u].z);
        }
        vec4 _1916 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1630, _1631, 1.0), 0.0);
        float _1925 = exp2((_1914 * (-1.44269502162933349609375)) * (1.0 - _1916.w));
        float _1926 = log2(_1925);
        float _1942 = log2(_1650);
        _1724 = (exp2(_1942 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1926 * cbSceneParam._m0[78u].x)) * _1916.x) / cbSceneParam._m0[78u].x)) + _1647;
        _1726 = (exp2(_1942 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1926 * cbSceneParam._m0[78u].y)) * _1916.y) / cbSceneParam._m0[78u].y)) + _1648;
        _1728 = (exp2(_1942 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1926 * cbSceneParam._m0[78u].z)) * _1916.z) / cbSceneParam._m0[78u].z)) + _1649;
        _1730 = _1925 * _1650;
    }
    else
    {
        _1724 = _1647;
        _1726 = _1648;
        _1728 = _1649;
        _1730 = _1650;
    }
    float _1742 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1743 = _1742 == 3.0;
    float _1745 = log2(_1730);
    float _1752 = exp2(_1745 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0)));
    float _1753 = exp2(_1745 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _1617 : (isnan(_1617) ? 0.0 : max(_1617, 0.0)));
    float _1754 = exp2(_1745 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0)));
    float _1763 = (_1742 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _1763 * (_1743 ? _1752 : (_1752 + (cbSceneParam._m0[72u].w * _1724)));
    SV_Target.y = _1763 * (_1743 ? _1753 : (_1753 + (cbSceneParam._m0[72u].w * _1726)));
    SV_Target.z = _1763 * (_1743 ? _1754 : (_1754 + (cbSceneParam._m0[72u].w * _1728)));
    SV_Target.w = cbInstanceData._m0[_1622].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1622].w;
}


