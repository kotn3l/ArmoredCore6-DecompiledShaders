#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_12;
layout(set = 0, binding = 3) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _457;
float _3312;
float _3313;
float _3314;
float _3315;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _200 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _201 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _202 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _207 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _208 = _207 * _200;
    float _209 = _207 * _201;
    float _210 = _207 * _202;
    float _214 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _215 = _214 * NORMAL.x;
    float _216 = _214 * NORMAL.y;
    float _217 = _214 * NORMAL.z;
    float _221 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _222 = _221 * TANGENT.x;
    float _223 = _221 * TANGENT.y;
    float _224 = _221 * TANGENT.z;
    float _269 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _279 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _269);
    float _280 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _269);
    float _281 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _269);
    vec4 _294 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _297 = _294.x;
    vec4 _315 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _332 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _297) + cbMtdParam._m0[12u].x) * _315.x;
    float _334 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _297) + cbMtdParam._m0[12u].y) * _315.y;
    float _336 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _297) + cbMtdParam._m0[12u].z) * _315.z;
    vec4 _370 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _385 = inversesqrt(dot(vec3(_208, _209, _210), vec3(_208, _209, _210)));
    float _392 = inversesqrt(dot(vec3(_222, _223, _224), vec3(_222, _223, _224)));
    float _404 = cbMtdParam._m0[24u].w + _279;
    float _405 = cbMtdParam._m0[25u].x + _280;
    float _406 = cbMtdParam._m0[25u].y + _281;
    float _420 = (-0.0) - dot(vec3(_404, _405, _406), vec3(_385 * _208, _385 * _209, _385 * _210));
    float _421 = (-0.0) - dot(vec3(_404, _405, _406), vec3(_392 * _222, _392 * _223, _392 * _224));
    float _422 = (-0.0) - dot(vec3(_404, _405, _406), vec3((-0.0) - _215, (-0.0) - _216, (-0.0) - _217));
    float _426 = inversesqrt(dot(vec3(_420, _421, _422), vec3(_420, _421, _422)));
    float _427 = _426 * _422;
    float _432 = ((cbMtdParam._m0[21u].z * _420) * _426) + (((_370.x * 2.0) + (-1.0)) * cbMtdParam._m0[22u].x);
    float _433 = ((cbMtdParam._m0[21u].w * _421) * _426) + (((_370.y * 2.0) + (-1.0)) * cbMtdParam._m0[22u].y);
    float _436 = fract(cbMtdParam._m0[21u].z * TEXCOORD.x);
    float _437 = fract(cbMtdParam._m0[21u].w * TEXCOORD.y);
    float _455;
    float _458;
    float _460;
    if (_432 > 0.0)
    {
        float _441 = (1.0 - _436) / _432;
        _455 = _441;
        _458 = ((cbMtdParam._m0[18u].w + 1.0) - fract(_441 * _427)) * 0.16666667163372039794921875;
        _460 = (fract((_441 * _433) + _437) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_432 < 0.0)
        {
            float _456 = ((-0.0) - _436) / _432;
            frontier_phi_3_2_ladder = _456;
            frontier_phi_3_2_ladder_1 = (fract((_456 * _433) + _437) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_2 = (fract(_456 * _427) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = _457;
            frontier_phi_3_2_ladder_1 = 0.0;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _455 = frontier_phi_3_2_ladder;
        _458 = frontier_phi_3_2_ladder_2;
        _460 = frontier_phi_3_2_ladder_1;
    }
    float _486;
    float _488;
    float _490;
    if (_433 > 0.0)
    {
        float _473 = (1.0 - _437) / _433;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_473 < _455)
        {
            frontier_phi_8_5_ladder = (fract(_473 * _427) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_473 * _432) + _436) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _473;
        }
        else
        {
            frontier_phi_8_5_ladder = _460;
            frontier_phi_8_5_ladder_1 = _458;
            frontier_phi_8_5_ladder_2 = _455;
        }
        _486 = frontier_phi_8_5_ladder_2;
        _488 = frontier_phi_8_5_ladder_1;
        _490 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_433 < 0.0)
        {
            float _487 = ((-0.0) - _437) / _433;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_487 < _455)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_487 * _427) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_487 * _432) + _436) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _487;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _460;
                frontier_phi_8_6_ladder_9_ladder_1 = _458;
                frontier_phi_8_6_ladder_9_ladder_2 = _455;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _460;
            frontier_phi_8_6_ladder_1 = _458;
            frontier_phi_8_6_ladder_2 = _455;
        }
        _486 = frontier_phi_8_6_ladder_2;
        _488 = frontier_phi_8_6_ladder_1;
        _490 = frontier_phi_8_6_ladder;
    }
    float _494 = (_427 > 0.0) ? (cbMtdParam._m0[18u].z / _427) : 5000.0;
    float _507;
    float _508;
    if (_494 < _486)
    {
        _507 = ((_436 + cbMtdParam._m0[18u].w) + (_494 * _432)) * 0.16666667163372039794921875;
        _508 = (((_494 * _433) + _437) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _507 = _488;
        _508 = _490;
    }
    vec4 _510 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_507, _508));
    float _3324 = isnan(0.0) ? cbMtdParam._m0[17u].z : (isnan(cbMtdParam._m0[17u].z) ? 0.0 : max(cbMtdParam._m0[17u].z, 0.0));
    float _524 = isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0));
    float _3335 = isnan(0.0) ? cbMtdParam._m0[17u].y : (isnan(cbMtdParam._m0[17u].y) ? 0.0 : max(cbMtdParam._m0[17u].y, 0.0));
    float _567 = ((_524 - ((1.0 - (isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0)))) * (_524 + 1.0))) + (((cbMtdParam._m0[18u].y * texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[3u].w)).x) + (cbMtdParam._m0[17u].x * texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w)).x)) / cbMtdParam._m0[17u].w)) / _524;
    float _3346 = isnan(0.0) ? _567 : (isnan(_567) ? 0.0 : max(_567, 0.0));
    float _568 = isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0));
    float _570 = 3.0 - (_568 * 2.0);
    float _575 = _568 * _568;
    float _591 = _297 * 0.1500000059604644775390625;
    float _599 = (_591 * (((_297 * _510.x) * (((_575 * (cbMtdParam._m0[15u].x - cbMtdParam._m0[13u].x)) * _570) + cbMtdParam._m0[13u].x)) - _332)) + _332;
    float _600 = (_591 * (((_297 * _510.y) * (((_575 * (cbMtdParam._m0[15u].y - cbMtdParam._m0[13u].y)) * _570) + cbMtdParam._m0[13u].y)) - _334)) + _334;
    float _601 = (_591 * (((_297 * _510.z) * (((_575 * (cbMtdParam._m0[15u].z - cbMtdParam._m0[13u].z)) * _570) + cbMtdParam._m0[13u].z)) - _336)) + _336;
    vec4 _614 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _618 = _614.z;
    float _621 = (_614.x * 2.0) + (-1.0);
    float _622 = (_614.y * 2.0) + (-1.0);
    float _623 = dot(vec2(_621, _622), vec2(_621, _622));
    float _3357 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _628 = sqrt(1.0 - (isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0))));
    float _631 = fma(_628, _215, fma(_622, _222, _621 * _208));
    float _634 = fma(_628, _216, fma(_622, _223, _621 * _209));
    float _637 = fma(_628, _217, fma(_622, _224, _621 * _210));
    float _641 = inversesqrt(dot(vec3(_631, _634, _637), vec3(_631, _634, _637)));
    float _642 = _641 * _631;
    float _643 = _641 * _634;
    float _644 = _641 * _637;
    float _3368 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _645 = isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0));
    float _3379 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _3390 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _3401 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _664 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _668 = inversesqrt(dot(vec3(_279, _280, _281), vec3(_279, _280, _281)));
    float _669 = _279 * _668;
    float _670 = _280 * _668;
    float _671 = _281 * _668;
    vec4 _676 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _678 = _676.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _839 = sqrt(((_279 * _279) + (_280 * _280)) + (_281 * _281));
        float _845 = (cbMatDynParam._m0[5u].x * _839) + cbMatDynParam._m0[5u].y;
        float _3412 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _846 = isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0));
        float _850 = (cbMatDynParam._m0[5u].z * _839) + cbMatDynParam._m0[5u].w;
        float _3423 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0))) - _846)) + _846) < ((_678 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _695 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _696 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _716 = fma(_644, cbSceneParam._m0[5u].z, fma(_643, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _642));
    float _719 = fma(_644, cbSceneParam._m0[6u].z, fma(_643, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _642));
    float _722 = fma(_644, cbSceneParam._m0[7u].z, fma(_643, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _642));
    uint _735 = uint(roundEven(NORMAL.w)) * 13u;
    uint _736 = _735 + 9u;
    uint _737 = _736 + uint(cbMatDynParam._m0[0u].w);
    float _743 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0)))) * cbInstanceData._m0[_737].x;
    float _744 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0)))) * cbInstanceData._m0[_737].y;
    float _745 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0)))) * cbInstanceData._m0[_737].z;
    float _3434 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _746 = isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0));
    float _3445 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _747 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
    float _3456 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _748 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
    vec4 _757 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _695, cbSceneParam._m0[86u].y * _696));
    float _760 = _757.x * TEXCOORD_4.z;
    float _761 = dot(vec3(_642, _643, _644), vec3(_669, _670, _671));
    float _764 = _761 * 2.0;
    float _768 = (_764 * _642) - _669;
    float _769 = (_764 * _643) - _670;
    float _770 = (_764 * _644) - _671;
    float _774 = abs(dot(vec3(_669, _670, _671), vec3(_642, _643, _644)));
    float _3467 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
    float _776 = sqrt(_645);
    float _788 = exp2((_776 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_776 * 3.0));
    float _820 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _824 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _828 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    float _1171;
    float _1172;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _884 = fma(_828, cbModelParam._m0[26u].z, fma(_824, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _820));
        float _888 = fma(_828, cbModelParam._m0[27u].z, fma(_824, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _820));
        float _892 = fma(_828, cbModelParam._m0[28u].z, fma(_824, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _820));
        float _916 = _820 + _642;
        float _917 = _824 + _643;
        float _918 = _828 + _644;
        float _928 = fma(_918, cbModelParam._m0[26u].z, fma(_917, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _916)) - _884;
        float _929 = fma(_918, cbModelParam._m0[27u].z, fma(_917, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _916)) - _888;
        float _930 = fma(_918, cbModelParam._m0[28u].z, fma(_917, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _916)) - _892;
        float _934 = inversesqrt(dot(vec3(_928, _929, _930), vec3(_928, _929, _930)));
        float _947 = ((_934 * _928) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_884 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _948 = ((_934 * _929) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_888 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _949 = ((_934 * _930) / cbModelParam._m0[34u].z) + ((((((_892 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _952 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        vec4 _959 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        vec4 _966 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        vec4 _973 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        float _986 = exp2((_952.w + (-0.5)) * 20.0) * 2.0;
        float _987 = _986 * (_952.x + (-0.5));
        float _988 = _986 * (_952.y + (-0.5));
        float _989 = _986 * (_952.z + (-0.5));
        float _996 = exp2((_959.w + (-0.5)) * 20.0) * 2.0;
        float _997 = _996 * (_959.x + (-0.5));
        float _998 = _996 * (_959.y + (-0.5));
        float _999 = _996 * (_959.z + (-0.5));
        float _1006 = exp2((_966.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_966.x + (-0.5));
        float _1008 = _1006 * (_966.y + (-0.5));
        float _1009 = _1006 * (_966.z + (-0.5));
        float _1016 = exp2((_973.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_973.x + (-0.5));
        float _1018 = _1016 * (_973.y + (-0.5));
        float _1019 = _1016 * (_973.z + (-0.5));
        float _1020 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1021 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        float _1022 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1023 = _987 * 0.5;
        float _1024 = _997 * 0.5;
        float _1025 = _1007 * 0.5;
        float _1026 = dot(vec3(_1023, _1024, _1025), vec3(_1023, _1024, _1025));
        float _1031 = (_1026 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1026);
        float _1040 = (dot(vec3(_642, _643, _644), vec3(_1031 * _1023, _1031 * _1024, _1031 * _1025)) + 1.0) * 0.5;
        float _3493 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1050 = sqrt(((_1024 * _1024) + (_1023 * _1023)) + (_1025 * _1025)) / (_1020 + 9.9999997473787516355514526367188e-06);
        float _3504 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1051 = isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0));
        float _1052 = _1051 * 2.0;
        float _1056 = (1.0 - _1051) / (_1051 + 1.0);
        float _3515 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1057 = isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0));
        float _1066 = ((((1.0 - _1057) * (_1052 + 2.0)) * exp2(log2(isnan(1.0) ? _3493 : (isnan(_3493) ? 1.0 : min(_3493, 1.0))) * (_1052 + 1.0))) + _1057) * _1020;
        float _1067 = _988 * 0.5;
        float _1068 = _998 * 0.5;
        float _1069 = _1008 * 0.5;
        float _1070 = dot(vec3(_1067, _1068, _1069), vec3(_1067, _1068, _1069));
        float _1075 = (_1070 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1070);
        float _1083 = (dot(vec3(_642, _643, _644), vec3(_1075 * _1067, _1075 * _1068, _1075 * _1069)) + 1.0) * 0.5;
        float _3526 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1092 = sqrt(((_1068 * _1068) + (_1067 * _1067)) + (_1069 * _1069)) / (_1021 + 9.9999997473787516355514526367188e-06);
        float _3537 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1093 = isnan(1.0) ? _3537 : (isnan(_3537) ? 1.0 : min(_3537, 1.0));
        float _1094 = _1093 * 2.0;
        float _1098 = (1.0 - _1093) / (_1093 + 1.0);
        float _3548 = isnan(0.0) ? _1098 : (isnan(_1098) ? 0.0 : max(_1098, 0.0));
        float _1099 = isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0));
        float _1108 = ((((1.0 - _1099) * (_1094 + 2.0)) * exp2(log2(isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0))) * (_1094 + 1.0))) + _1099) * _1021;
        float _1109 = _989 * 0.5;
        float _1110 = _999 * 0.5;
        float _1111 = _1009 * 0.5;
        float _1112 = dot(vec3(_1109, _1110, _1111), vec3(_1109, _1110, _1111));
        float _1117 = (_1112 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1112);
        float _1125 = (dot(vec3(_642, _643, _644), vec3(_1117 * _1109, _1117 * _1110, _1117 * _1111)) + 1.0) * 0.5;
        float _3559 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1134 = sqrt(((_1110 * _1110) + (_1109 * _1109)) + (_1111 * _1111)) / (_1022 + 9.9999997473787516355514526367188e-06);
        float _3570 = isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0));
        float _1135 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
        float _1136 = _1135 * 2.0;
        float _1140 = (1.0 - _1135) / (_1135 + 1.0);
        float _3581 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1141 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
        float _1150 = ((((1.0 - _1141) * (_1136 + 2.0)) * exp2(log2(isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0))) * (_1136 + 1.0))) + _1141) * _1022;
        _1158 = _989;
        _1159 = _988;
        _1160 = _987;
        _1161 = _999;
        _1162 = _998;
        _1163 = _997;
        _1164 = _1009;
        _1165 = _1008;
        _1166 = _1007;
        _1167 = _1022;
        _1168 = _1021;
        _1169 = _1020;
        _1170 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0)));
        _1171 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0)));
        _1172 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0)));
    }
    else
    {
        _1158 = _457;
        _1159 = _457;
        _1160 = _457;
        _1161 = _457;
        _1162 = _457;
        _1163 = _457;
        _1164 = _457;
        _1165 = _457;
        _1166 = _457;
        _1167 = _457;
        _1168 = _457;
        _1169 = _457;
        _1170 = 0.0;
        _1171 = 0.0;
        _1172 = 0.0;
    }
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1201 = fma(_828, cbModelParam._m0[30u].z, fma(_824, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _820));
        float _1205 = fma(_828, cbModelParam._m0[31u].z, fma(_824, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _820));
        float _1209 = fma(_828, cbModelParam._m0[32u].z, fma(_824, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _820));
        float _1232 = _820 + _642;
        float _1233 = _824 + _643;
        float _1234 = _828 + _644;
        float _1244 = fma(_1234, cbModelParam._m0[30u].z, fma(_1233, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1232)) - _1201;
        float _1245 = fma(_1234, cbModelParam._m0[31u].z, fma(_1233, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1232)) - _1205;
        float _1246 = fma(_1234, cbModelParam._m0[32u].z, fma(_1233, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1232)) - _1209;
        float _1250 = inversesqrt(dot(vec3(_1244, _1245, _1246), vec3(_1244, _1245, _1246)));
        float _1263 = ((_1250 * _1244) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1201 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1264 = ((_1250 * _1245) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1205 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1265 = ((_1250 * _1246) / cbModelParam._m0[35u].z) + ((((((_1209 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1267 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1263, _1264, _1265), 0.0);
        vec4 _1274 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1263, _1264, _1265), 0.0);
        vec4 _1281 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1263, _1264, _1265), 0.0);
        vec4 _1288 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1263, _1264, _1265), 0.0);
        float _1300 = exp2((_1267.w + (-0.5)) * 20.0) * 2.0;
        float _1301 = _1300 * (_1267.x + (-0.5));
        float _1302 = _1300 * (_1267.y + (-0.5));
        float _1303 = _1300 * (_1267.z + (-0.5));
        float _1310 = exp2((_1274.w + (-0.5)) * 20.0) * 2.0;
        float _1311 = _1310 * (_1274.x + (-0.5));
        float _1312 = _1310 * (_1274.y + (-0.5));
        float _1313 = _1310 * (_1274.z + (-0.5));
        float _1320 = exp2((_1281.w + (-0.5)) * 20.0) * 2.0;
        float _1321 = _1320 * (_1281.x + (-0.5));
        float _1322 = _1320 * (_1281.y + (-0.5));
        float _1323 = _1320 * (_1281.z + (-0.5));
        float _1330 = exp2((_1288.w + (-0.5)) * 20.0) * 2.0;
        float _1331 = _1330 * (_1288.x + (-0.5));
        float _1332 = _1330 * (_1288.y + (-0.5));
        float _1333 = _1330 * (_1288.z + (-0.5));
        float _1334 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1335 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1336 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1337 = _1301 * 0.5;
        float _1338 = _1311 * 0.5;
        float _1339 = _1321 * 0.5;
        float _1340 = dot(vec3(_1337, _1338, _1339), vec3(_1337, _1338, _1339));
        float _1345 = (_1340 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1340);
        float _1353 = (dot(vec3(_642, _643, _644), vec3(_1345 * _1337, _1345 * _1338, _1345 * _1339)) + 1.0) * 0.5;
        float _3622 = isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0));
        float _1362 = sqrt(((_1338 * _1338) + (_1337 * _1337)) + (_1339 * _1339)) / (_1334 + 9.9999997473787516355514526367188e-06);
        float _3633 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0));
        float _1364 = _1363 * 2.0;
        float _1368 = (1.0 - _1363) / (_1363 + 1.0);
        float _3644 = isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0));
        float _1369 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
        float _1378 = ((((1.0 - _1369) * (_1364 + 2.0)) * exp2(log2(isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0))) * (_1364 + 1.0))) + _1369) * _1334;
        float _1379 = _1302 * 0.5;
        float _1380 = _1312 * 0.5;
        float _1381 = _1322 * 0.5;
        float _1382 = dot(vec3(_1379, _1380, _1381), vec3(_1379, _1380, _1381));
        float _1387 = (_1382 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1382);
        float _1395 = (dot(vec3(_642, _643, _644), vec3(_1387 * _1379, _1387 * _1380, _1387 * _1381)) + 1.0) * 0.5;
        float _3655 = isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0));
        float _1404 = sqrt(((_1380 * _1380) + (_1379 * _1379)) + (_1381 * _1381)) / (_1335 + 9.9999997473787516355514526367188e-06);
        float _3666 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
        float _1406 = _1405 * 2.0;
        float _1410 = (1.0 - _1405) / (_1405 + 1.0);
        float _3677 = isnan(0.0) ? _1410 : (isnan(_1410) ? 0.0 : max(_1410, 0.0));
        float _1411 = isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0));
        float _1420 = ((((1.0 - _1411) * (_1406 + 2.0)) * exp2(log2(isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0))) * (_1406 + 1.0))) + _1411) * _1335;
        float _1421 = _1303 * 0.5;
        float _1422 = _1313 * 0.5;
        float _1423 = _1323 * 0.5;
        float _1424 = dot(vec3(_1421, _1422, _1423), vec3(_1421, _1422, _1423));
        float _1429 = (_1424 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1424);
        float _1437 = (dot(vec3(_642, _643, _644), vec3(_1429 * _1421, _1429 * _1422, _1429 * _1423)) + 1.0) * 0.5;
        float _3688 = isnan(0.0) ? _1437 : (isnan(_1437) ? 0.0 : max(_1437, 0.0));
        float _1446 = sqrt(((_1422 * _1422) + (_1421 * _1421)) + (_1423 * _1423)) / (_1336 + 9.9999997473787516355514526367188e-06);
        float _3699 = isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0));
        float _1447 = isnan(1.0) ? _3699 : (isnan(_3699) ? 1.0 : min(_3699, 1.0));
        float _1448 = _1447 * 2.0;
        float _1452 = (1.0 - _1447) / (_1447 + 1.0);
        float _3710 = isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0));
        float _1453 = isnan(1.0) ? _3710 : (isnan(_3710) ? 1.0 : min(_3710, 1.0));
        float _1462 = ((((1.0 - _1453) * (_1448 + 2.0)) * exp2(log2(isnan(1.0) ? _3688 : (isnan(_3688) ? 1.0 : min(_3688, 1.0))) * (_1448 + 1.0))) + _1453) * _1336;
        _1470 = _1303;
        _1471 = _1302;
        _1472 = _1301;
        _1473 = _1313;
        _1474 = _1312;
        _1475 = _1311;
        _1476 = _1323;
        _1477 = _1322;
        _1478 = _1321;
        _1479 = _1336;
        _1480 = _1335;
        _1481 = _1334;
        _1482 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0)));
        _1483 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0)));
        _1484 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)));
    }
    else
    {
        _1470 = _457;
        _1471 = _457;
        _1472 = _457;
        _1473 = _457;
        _1474 = _457;
        _1475 = _457;
        _1476 = _457;
        _1477 = _457;
        _1478 = _457;
        _1479 = _457;
        _1480 = _457;
        _1481 = _457;
        _1482 = 0.0;
        _1483 = 0.0;
        _1484 = 0.0;
    }
    float _1494 = (cbModelParam._m0[1u].x * (_1482 - _1170)) + _1170;
    float _1495 = (cbModelParam._m0[1u].x * (_1483 - _1171)) + _1171;
    float _1496 = (cbModelParam._m0[1u].x * (_1484 - _1172)) + _1172;
    float _1517 = fma(_1496, cbSceneParam._m0[89u].z, fma(_1495, cbSceneParam._m0[89u].y, _1494 * cbSceneParam._m0[89u].x));
    float _1520 = fma(_1496, cbSceneParam._m0[90u].z, fma(_1495, cbSceneParam._m0[90u].y, _1494 * cbSceneParam._m0[90u].x));
    float _1523 = fma(_1496, cbSceneParam._m0[91u].z, fma(_1495, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1494));
    float _1538 = _768 * 0.5;
    float _1539 = _769 * 0.5;
    float _1540 = _770 * 0.5;
    float _1541 = dot(vec4(_1538, _1539, _1540, 1.0), vec4(_1472, _1475, _1478, _1481));
    float _1544 = dot(vec4(_1538, _1539, _1540, 1.0), vec4(_1471, _1474, _1477, _1480));
    float _1547 = dot(vec4(_1538, _1539, _1540, 1.0), vec4(_1470, _1473, _1476, _1479));
    float _1581;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1554 = dot(vec4(_1538, _1539, _1540, 1.0), vec4(_1158, _1161, _1164, _1167));
        float _1558 = dot(vec4(_1538, _1539, _1540, 1.0), vec4(_1159, _1162, _1165, _1168));
        float _1562 = dot(vec4(_1538, _1539, _1540, 1.0), vec4(_1160, _1163, _1166, _1169));
        float _1569 = dot(vec4(cbModelParam._m0[39u]), vec4(_1538, _1539, _1540, 1.0));
        _1581 = dot(vec3(isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0)), isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0)), isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1569) ? 0.0 : (isnan(0.0) ? _1569 : max(0.0, _1569))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1581 = 1.0;
    }
    float _1592;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1583 = dot(vec4(cbModelParam._m0[40u]), vec4(_1538, _1539, _1540, 1.0));
        _1592 = dot(vec3(isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0)), isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0)), isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1583) ? 0.0 : (isnan(0.0) ? _1583 : max(0.0, _1583))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1592 = 1.0;
    }
    float _1596 = (_1592 * cbModelParam._m0[1u].x) + (_1581 * (1.0 - cbModelParam._m0[1u].x));
    float _1606 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _645);
    float _1607 = isnan(_1606) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1606 : min(cbModelParam._m0[25u].z, _1606));
    float _1688;
    float _1690;
    float _1692;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1655 = fma(_828, cbModelParam._m0[13u].z, fma(_824, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _820)) + cbModelParam._m0[13u].w;
        float _1659 = fma(_828, cbModelParam._m0[14u].z, fma(_824, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _820)) + cbModelParam._m0[14u].w;
        float _1663 = fma(_828, cbModelParam._m0[15u].z, fma(_824, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _820)) + cbModelParam._m0[15u].w;
        float _1666 = fma(_770, cbModelParam._m0[13u].z, fma(_769, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _768));
        float _1669 = fma(_770, cbModelParam._m0[14u].z, fma(_769, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _768));
        float _1672 = fma(_770, cbModelParam._m0[15u].z, fma(_769, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _768));
        float _1700;
        if (_1666 > 0.0)
        {
            _1700 = abs((1.0 - _1655) / _1666);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_1666 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_1655 + 1.0) / _1666);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1700 = frontier_phi_29_27_ladder;
        }
        float _2070;
        if (_1669 > 0.0)
        {
            _2070 = abs((1.0 - _1659) / _1669);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1669 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1659 + 1.0) / _1669);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _2070 = frontier_phi_38_34_ladder;
        }
        float _2378;
        if (_1672 > 0.0)
        {
            _2378 = abs((1.0 - _1663) / _1672);
        }
        else
        {
            float frontier_phi_52_45_ladder;
            if (_1672 < 0.0)
            {
                frontier_phi_52_45_ladder = abs((_1663 + 1.0) / _1672);
            }
            else
            {
                frontier_phi_52_45_ladder = 5000.0;
            }
            _2378 = frontier_phi_52_45_ladder;
        }
        float _2380 = isnan(_2070) ? _1700 : (isnan(_1700) ? _2070 : min(_1700, _2070));
        float _2381 = isnan(_2378) ? _2380 : (isnan(_2380) ? _2378 : min(_2380, _2378));
        float _2385 = (_2381 * _1666) + _1655;
        float _2386 = (_2381 * _1669) + _1659;
        float _2387 = (_2381 * _1672) + _1663;
        float _2388 = _2381 * 9.9999997473787516355514526367188e-05;
        float _2389 = (-1.0) - _2388;
        float _2391 = _2388 + 1.0;
        float frontier_phi_28_52_ladder;
        float frontier_phi_28_52_ladder_1;
        float frontier_phi_28_52_ladder_2;
        if ((_2387 > _2391) || ((_2387 < _2389) || ((_2386 > _2391) || ((_2386 < _2389) || ((_2385 < _2389) || (_2385 > _2391))))))
        {
            frontier_phi_28_52_ladder = 0.0;
            frontier_phi_28_52_ladder_1 = 0.0;
            frontier_phi_28_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2529 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2387, cbModelParam._m0[9u].z, fma(_2386, cbModelParam._m0[9u].y, _2385 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2387, cbModelParam._m0[10u].z, fma(_2386, cbModelParam._m0[10u].y, _2385 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2387, cbModelParam._m0[11u].z, fma(_2386, cbModelParam._m0[11u].y, _2385 * cbModelParam._m0[11u].x))), _1607);
            frontier_phi_28_52_ladder = _2529.z * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_1 = _2529.y * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_2 = _2529.x * cbModelParam._m0[1u].y;
        }
        _1688 = frontier_phi_28_52_ladder_2;
        _1690 = frontier_phi_28_52_ladder_1;
        _1692 = frontier_phi_28_52_ladder;
    }
    else
    {
        vec4 _1676 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_768, _769, _770), _1607);
        _1688 = _1676.x * cbModelParam._m0[1u].y;
        _1690 = _1676.y * cbModelParam._m0[1u].y;
        _1692 = _1676.z * cbModelParam._m0[1u].y;
    }
    float _1696 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _645);
    float _1697 = isnan(_1696) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1696 : min(cbModelParam._m0[25u].w, _1696));
    float _1786;
    float _1788;
    float _1790;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1750 = fma(_828, cbModelParam._m0[21u].z, fma(_824, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _820)) + cbModelParam._m0[21u].w;
        float _1754 = fma(_828, cbModelParam._m0[22u].z, fma(_824, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _820)) + cbModelParam._m0[22u].w;
        float _1758 = fma(_828, cbModelParam._m0[23u].z, fma(_824, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _820)) + cbModelParam._m0[23u].w;
        float _1761 = fma(_770, cbModelParam._m0[21u].z, fma(_769, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _768));
        float _1764 = fma(_770, cbModelParam._m0[22u].z, fma(_769, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _768));
        float _1767 = fma(_770, cbModelParam._m0[23u].z, fma(_769, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _768));
        float _2075;
        if (_1761 > 0.0)
        {
            _2075 = abs((1.0 - _1750) / _1761);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1761 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1750 + 1.0) / _1761);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _2075 = frontier_phi_40_36_ladder;
        }
        float _2404;
        if (_1764 > 0.0)
        {
            _2404 = abs((1.0 - _1754) / _1764);
        }
        else
        {
            float frontier_phi_54_47_ladder;
            if (_1764 < 0.0)
            {
                frontier_phi_54_47_ladder = abs((_1754 + 1.0) / _1764);
            }
            else
            {
                frontier_phi_54_47_ladder = 5000.0;
            }
            _2404 = frontier_phi_54_47_ladder;
        }
        float _2594;
        if (_1767 > 0.0)
        {
            _2594 = abs((1.0 - _1758) / _1767);
        }
        else
        {
            float frontier_phi_72_65_ladder;
            if (_1767 < 0.0)
            {
                frontier_phi_72_65_ladder = abs((_1758 + 1.0) / _1767);
            }
            else
            {
                frontier_phi_72_65_ladder = 5000.0;
            }
            _2594 = frontier_phi_72_65_ladder;
        }
        float _2596 = isnan(_2404) ? _2075 : (isnan(_2075) ? _2404 : min(_2075, _2404));
        float _2597 = isnan(_2594) ? _2596 : (isnan(_2596) ? _2594 : min(_2596, _2594));
        float _2601 = (_2597 * _1761) + _1750;
        float _2602 = (_2597 * _1764) + _1754;
        float _2603 = (_2597 * _1767) + _1758;
        float _2604 = _2597 * 9.9999997473787516355514526367188e-05;
        float _2605 = (-1.0) - _2604;
        float _2607 = _2604 + 1.0;
        float frontier_phi_37_72_ladder;
        float frontier_phi_37_72_ladder_1;
        float frontier_phi_37_72_ladder_2;
        if ((_2603 > _2607) || ((_2603 < _2605) || ((_2602 > _2607) || ((_2602 < _2605) || ((_2601 < _2605) || (_2601 > _2607))))))
        {
            frontier_phi_37_72_ladder = 0.0;
            frontier_phi_37_72_ladder_1 = 0.0;
            frontier_phi_37_72_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2845 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2603, cbModelParam._m0[17u].z, fma(_2602, cbModelParam._m0[17u].y, _2601 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2603, cbModelParam._m0[18u].z, fma(_2602, cbModelParam._m0[18u].y, _2601 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2603, cbModelParam._m0[19u].z, fma(_2602, cbModelParam._m0[19u].y, _2601 * cbModelParam._m0[19u].x))), _1697);
            frontier_phi_37_72_ladder = _2845.z * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_1 = _2845.y * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_2 = _2845.x * cbModelParam._m0[1u].z;
        }
        _1786 = frontier_phi_37_72_ladder_2;
        _1788 = frontier_phi_37_72_ladder_1;
        _1790 = frontier_phi_37_72_ladder;
    }
    else
    {
        vec4 _1770 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_768, _769, _770), _1697);
        _1786 = _1770.x * cbModelParam._m0[1u].z;
        _1788 = _1770.y * cbModelParam._m0[1u].z;
        _1790 = _1770.z * cbModelParam._m0[1u].z;
    }
    float _1802 = ((((1.0 - _788) * ((_776 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_788 * _776)) * _760;
    float _1803 = _1802 * ((cbModelParam._m0[1u].w * (_1786 - _1688)) + _1688);
    float _1804 = _1802 * ((cbModelParam._m0[1u].w * (_1788 - _1690)) + _1690);
    float _1805 = _1802 * ((cbModelParam._m0[1u].w * (_1790 - _1692)) + _1692);
    float _1808 = fma(_1805, cbSceneParam._m0[89u].z, fma(_1804, cbSceneParam._m0[89u].y, _1803 * cbSceneParam._m0[89u].x));
    float _1811 = fma(_1805, cbSceneParam._m0[90u].z, fma(_1804, cbSceneParam._m0[90u].y, _1803 * cbSceneParam._m0[90u].x));
    float _1814 = fma(_1805, cbSceneParam._m0[91u].z, fma(_1804, cbSceneParam._m0[91u].y, _1803 * cbSceneParam._m0[91u].x));
    vec4 _1822 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_695, _696));
    float _1824 = _1822.w;
    float _1836 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1824);
    float _1837 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1824);
    float _1838 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1824);
    uvec4 _1842 = floatBitsToUint(cbInstanceData._m0[_735 + 5u]);
    uint _1844 = _1842.x * 14u;
    uint _1845 = _1844 + 13u;
    float _1850 = _760 + (-1.0);
    float _1853 = (cbLight._m0[_1845].x * _1850) + 1.0;
    float _1854 = (cbLight._m0[_1845].y * _1850) + 1.0;
    uint _1855 = _1844 + 5u;
    float _1861 = isnan(1.0) ? _1854 : (isnan(_1854) ? 1.0 : min(_1854, 1.0));
    uint _1865 = _1844 + 4u;
    float _1874 = isnan(1.0) ? _1853 : (isnan(_1853) ? 1.0 : min(_1853, 1.0));
    uint _1878 = _1844 | 1u;
    float _1889 = dot(vec3(cbLight._m0[_1844].xyz), vec3(_642, _643, _644));
    float _1892 = dot(vec3(cbLight._m0[_1878].xyz), vec3(_642, _643, _644));
    float _3846 = isnan(0.0) ? _1889 : (isnan(_1889) ? 0.0 : max(_1889, 0.0));
    float _3857 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
    float _1897 = (isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))) * 0.3183098733425140380859375;
    float _1899 = (isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * 0.3183098733425140380859375;
    float _1906 = ((cbLight._m0[_1855].x * _1861) * _1899) + (((cbLight._m0[_1865].x * _1836) * _1874) * _1897);
    float _1907 = ((_1861 * cbLight._m0[_1855].y) * _1899) + (((cbLight._m0[_1865].y * _1837) * _1874) * _1897);
    float _1908 = ((_1861 * cbLight._m0[_1855].z) * _1899) + (((cbLight._m0[_1865].z * _1838) * _1874) * _1897);
    uint _1910 = _1844 + 8u;
    float _1923 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1844].w)) * _645) * 0.949999988079071044921875);
    float _1924 = _1923 * _1923;
    float _1925 = cbLight._m0[_1844].x + _669;
    float _1926 = cbLight._m0[_1844].y + _670;
    float _1927 = cbLight._m0[_1844].z + _671;
    float _1931 = inversesqrt(dot(vec3(_1925, _1926, _1927), vec3(_1925, _1926, _1927)));
    float _1932 = _1931 * _1925;
    float _1933 = _1931 * _1926;
    float _1934 = _1931 * _1927;
    float _1935 = dot(vec3(_642, _643, _644), vec3(cbLight._m0[_1844].xyz));
    float _3868 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
    float _1938 = isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0));
    float _3879 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _1939 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
    float _1940 = dot(vec3(_642, _643, _644), vec3(_1932, _1933, _1934));
    float _3890 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
    float _1943 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
    float _1944 = dot(vec3(cbLight._m0[_1844].xyz), vec3(_1932, _1933, _1934));
    float _3901 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
    float _1948 = _1924 * _1924;
    float _1952 = ((_1943 * _1943) * (_1948 + (-1.0))) + 1.0;
    float _1963 = (exp2(log2(1.0 - (isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1964 = 1.0 - _1924;
    float _1975 = (0.5 / (((_1939 * ((_1938 * _1964) + _1924)) + 9.9999999392252902907785028219223e-09) + (((_1939 * _1964) + _1924) * _1938))) * _1938;
    float _3912 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
    float _1977 = (isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0))) * (_1948 / ((_1952 * _1952) * 3.141590118408203125));
    uint _1991 = _1844 + 9u;
    float _2002 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1878].w)) * _645) * 0.949999988079071044921875);
    float _2003 = _2002 * _2002;
    float _2004 = cbLight._m0[_1878].x + _669;
    float _2005 = cbLight._m0[_1878].y + _670;
    float _2006 = cbLight._m0[_1878].z + _671;
    float _2010 = inversesqrt(dot(vec3(_2004, _2005, _2006), vec3(_2004, _2005, _2006)));
    float _2011 = _2010 * _2004;
    float _2012 = _2010 * _2005;
    float _2013 = _2010 * _2006;
    float _2014 = dot(vec3(_642, _643, _644), vec3(cbLight._m0[_1878].xyz));
    float _3923 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
    float _2017 = isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0));
    float _2018 = dot(vec3(_642, _643, _644), vec3(_2011, _2012, _2013));
    float _3934 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
    float _2021 = isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0));
    float _2022 = dot(vec3(cbLight._m0[_1878].xyz), vec3(_2011, _2012, _2013));
    float _3945 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
    float _2026 = _2003 * _2003;
    float _2030 = ((_2021 * _2021) * (_2026 + (-1.0))) + 1.0;
    float _2039 = (exp2(log2(1.0 - (isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2040 = 1.0 - _2003;
    float _2050 = (0.5 / (((_1939 * ((_2017 * _2040) + _2003)) + 9.9999999392252902907785028219223e-09) + (((_1939 * _2040) + _2003) * _2017))) * _2017;
    float _3956 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2052 = (isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))) * (_2026 / ((_2030 * _2030) * 3.141590118408203125));
    float _2062 = (((_2039 * cbLight._m0[_1991].x) * _2052) * _1861) + ((((cbLight._m0[_1910].x * _1836) * _1963) * _1977) * _1874);
    float _2063 = (((_2039 * cbLight._m0[_1991].y) * _2052) * _1861) + ((((cbLight._m0[_1910].y * _1837) * _1963) * _1977) * _1874);
    float _2064 = (((_2039 * cbLight._m0[_1991].z) * _2052) * _1861) + ((((cbLight._m0[_1910].z * _1838) * _1963) * _1977) * _1874);
    float _2179;
    float _2181;
    float _2183;
    float _2185;
    float _2187;
    float _2189;
    if (_1842.y == 0u)
    {
        float _2119 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2120 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2119;
        float _2121 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2119;
        float _2122 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2119;
        uvec4 _2134 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2135 = _2134.x;
        uint _2146 = uint((float(_2134.y) * floor(float(uint(cbSceneParam._m0[85u].y * _696) / _2135))) + floor(float(uint(cbSceneParam._m0[85u].x * _695) / _2135)));
        float _2156 = (log2(_2122 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2157 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
        uint _2160 = uint(isnan(14.0) ? _2157 : (isnan(_2157) ? 14.0 : min(_2157, 14.0)));
        uvec4 _2165 = texelFetch(g_lightClusterGridBuffer, int(((_2160 << 2u) + (_2146 << 6u)) >> 2u));
        uint _2166 = _2165.x;
        uint _2167 = _2134.z;
        float _2257;
        float _2259;
        float _2261;
        float _2263;
        float _2265;
        float _2267;
        if (((((1u << ((_2167 >> 4u) & 15u)) + 4294967295u) & _2166) == 0u) || ((_2167 & 240u) == 0u))
        {
            _2257 = 0.0;
            _2259 = 0.0;
            _2261 = 0.0;
            _2263 = 0.0;
            _2265 = 0.0;
            _2267 = 0.0;
        }
        else
        {
            float _2258;
            float _2260;
            float _2262;
            float _2264;
            float _2266;
            float _2268;
            float _2441 = 0.0;
            float _2442 = 0.0;
            float _2443 = 0.0;
            float _2444 = 0.0;
            float _2445 = 0.0;
            float _2446 = 0.0;
            uint _2447 = 0u;
            uint _2456;
            bool _2457;
            for (;;)
            {
                _2456 = texelFetch(g_lightClassification, int((((_2160 << 5u) + (_2146 << 9u)) + (_2447 << 2u)) >> 2u)).x;
                _2457 = _2456 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2457)
                {
                    frontier_phi_67_pred = _2444;
                    frontier_phi_67_pred_1 = _2443;
                    frontier_phi_67_pred_2 = _2442;
                    frontier_phi_67_pred_3 = _2441;
                    frontier_phi_67_pred_4 = _2445;
                    frontier_phi_67_pred_5 = _2446;
                }
                else
                {
                    float _2637;
                    float _2638;
                    float _2639;
                    float _2640;
                    float _2641;
                    float _2642;
                    uint _2643;
                    _2637 = _2441;
                    _2638 = _2442;
                    _2639 = _2443;
                    _2640 = _2444;
                    _2641 = _2445;
                    _2642 = _2446;
                    _2643 = _2456;
                    float _2538;
                    float _2539;
                    float _2540;
                    float _2541;
                    float _2542;
                    float _2543;
                    for (;;)
                    {
                        uint _2647 = uint(findLSB(_2643)) + (_2447 << 5u);
                        uint _2644 = (_2643 + 4294967295u) & _2643;
                        uint _2649 = _2647 * 48u;
                        vec4 _2663 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2649)).x, texelFetch(g_PointLightRenderingBuffer, int(_2649 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2649 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2649 + 3u)).x));
                        uint _2669 = (_2647 * 48u) + 4u;
                        vec4 _2682 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2669)).x, texelFetch(g_PointLightRenderingBuffer, int(_2669 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2669 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2669 + 3u)).x));
                        uint _2688 = (_2647 * 48u) + 8u;
                        vec3 _2699 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2688)).x, texelFetch(g_PointLightRenderingBuffer, int(_2688 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2688 + 2u)).x));
                        float _2703 = _2663.x - _2120;
                        float _2704 = _2663.y - _2121;
                        float _2705 = _2663.z - _2122;
                        float _2706 = dot(vec3(_2703, _2704, _2705), vec3(_2703, _2704, _2705));
                        float _2709 = inversesqrt(_2706);
                        float _2710 = _2709 * _2703;
                        float _2711 = _2709 * _2704;
                        float _2712 = _2709 * _2705;
                        float _2713 = dot(vec3(_716, _719, _722), vec3(_2710, _2711, _2712));
                        float _2718 = 1.0 - (_2706 * _2663.w);
                        float _3977 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
                        float _2719 = isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0));
                        float _2720 = sqrt(_2706) * _2682.w;
                        float _2723 = 1.39999997615814208984375 / (_2720 + 1.39999997615814208984375);
                        float _2724 = _2723 * _2723;
                        float _2727 = ((1.0 - _2724) * _2713) + _2724;
                        float _2730 = _2720 * _2720;
                        float _2734 = ((isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0))) * _2719) / ((_2730 * 0.699999988079071044921875) + 1.0);
                        float _2738 = (-0.0) - _2120;
                        float _2739 = (-0.0) - _2121;
                        float _2740 = (-0.0) - _2122;
                        float _2744 = inversesqrt(dot(vec3(_2738, _2739, _2740), vec3(_2738, _2739, _2740)));
                        float _2745 = _2744 * _2738;
                        float _2746 = _2744 * _2739;
                        float _2747 = _2744 * _2740;
                        float _2755 = exp2(log2(1.0 / ((_2730 * 3.5) + 5.0)) * 0.25);
                        float _2756 = 1.0 - _776;
                        float _2763 = sqrt(1.0 - ((1.0 - (_2756 * _2756)) * (1.0 - (_2755 * _2755))));
                        float _2764 = _2763 * _2763;
                        float _2765 = _2764 * _2764;
                        float _2766 = _2745 + _2710;
                        float _2767 = _2746 + _2711;
                        float _2768 = _2747 + _2712;
                        float _2772 = inversesqrt(dot(vec3(_2766, _2767, _2768), vec3(_2766, _2767, _2768)));
                        float _2776 = dot(vec3(_716, _719, _722), vec3(_2745, _2746, _2747));
                        float _3993 = isnan(0.0) ? _2776 : (isnan(_2776) ? 0.0 : max(_2776, 0.0));
                        float _2779 = isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0));
                        float _2780 = dot(vec3(_716, _719, _722), vec3(_2772 * _2766, _2772 * _2767, _2772 * _2768));
                        float _4004 = isnan(0.0) ? _2780 : (isnan(_2780) ? 0.0 : max(_2780, 0.0));
                        float _2783 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
                        float _2787 = ((_2783 * _2783) * (_2765 + (-1.0))) + 1.0;
                        float _2788 = _2723 * _2764;
                        float _2789 = _2788 * _2788;
                        float _2792 = ((1.0 - _2789) * _2713) + _2789;
                        float _4015 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
                        float _2793 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
                        float _2794 = 1.0 - _2764;
                        float _2804 = (0.5 / (((_2793 * ((_2779 * _2794) + _2764)) + 9.9999999392252902907785028219223e-09) + (((_2793 * _2794) + _2764) * _2779))) * _2793;
                        float _4026 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
                        float _2815 = (((_2765 * 3.1415927410125732421875) * (isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0)))) / ((_2787 * _2787) * ((_2730 * 2.1991131305694580078125) + 3.141590118408203125))) * _2719;
                        _2541 = (_2734 * _2682.x) + _2640;
                        _2542 = (_2734 * _2682.y) + _2641;
                        _2543 = (_2734 * _2682.z) + _2642;
                        _2538 = (_2815 * _2699.x) + _2637;
                        _2539 = (_2815 * _2699.y) + _2638;
                        _2540 = (_2815 * _2699.z) + _2639;
                        if (_2644 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2637 = _2538;
                            _2638 = _2539;
                            _2639 = _2540;
                            _2640 = _2541;
                            _2641 = _2542;
                            _2642 = _2543;
                            _2643 = _2644;
                        }
                    }
                    frontier_phi_67_pred = _2541;
                    frontier_phi_67_pred_1 = _2540;
                    frontier_phi_67_pred_2 = _2539;
                    frontier_phi_67_pred_3 = _2538;
                    frontier_phi_67_pred_4 = _2542;
                    frontier_phi_67_pred_5 = _2543;
                }
                _2264 = frontier_phi_67_pred;
                _2262 = frontier_phi_67_pred_1;
                _2260 = frontier_phi_67_pred_2;
                _2258 = frontier_phi_67_pred_3;
                _2266 = frontier_phi_67_pred_4;
                _2268 = frontier_phi_67_pred_5;
                uint _2448 = _2447 + 1u;
                if (_2448 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2441 = _2258;
                    _2442 = _2260;
                    _2443 = _2262;
                    _2444 = _2264;
                    _2445 = _2266;
                    _2446 = _2268;
                    _2447 = _2448;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2257 = _2258;
            _2259 = _2260;
            _2261 = _2262;
            _2263 = _2264;
            _2265 = _2266;
            _2267 = _2268;
        }
        uvec4 _2271 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2272 = _2271.z;
        uint _2274 = (_2272 >> 8u) & 15u;
        float _2409;
        float _2411;
        float _2413;
        float _2415;
        float _2417;
        float _2419;
        if (((4294967295u << _2274) & _2166) == 0u)
        {
            _2409 = _2257;
            _2411 = _2259;
            _2413 = _2261;
            _2415 = _2263;
            _2417 = _2265;
            _2419 = _2267;
        }
        else
        {
            float _2434 = inversesqrt(dot(vec3(_2120, _2121, _2122), vec3(_2120, _2121, _2122)));
            float _2435 = _2434 * _2120;
            float _2436 = _2434 * _2121;
            float _2437 = _2434 * _2122;
            float frontier_phi_56_57_ladder;
            float frontier_phi_56_57_ladder_1;
            float frontier_phi_56_57_ladder_2;
            float frontier_phi_56_57_ladder_3;
            float frontier_phi_56_57_ladder_4;
            float frontier_phi_56_57_ladder_5;
            if (_2274 < ((_2272 >> 12u) & 15u))
            {
                float _2410;
                float _2412;
                float _2414;
                float _2416;
                float _2418;
                float _2420;
                float _2620 = _2257;
                float _2621 = _2259;
                float _2622 = _2261;
                float _2623 = _2263;
                float _2624 = _2265;
                float _2625 = _2267;
                uint _2626 = _2274;
                uint _2635;
                bool _2636;
                for (;;)
                {
                    _2635 = texelFetch(g_lightClassification, int((((_2160 << 5u) + (_2146 << 9u)) + (_2626 << 2u)) >> 2u)).x;
                    _2636 = _2635 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    float frontier_phi_81_pred_3;
                    float frontier_phi_81_pred_4;
                    float frontier_phi_81_pred_5;
                    if (_2636)
                    {
                        frontier_phi_81_pred = _2623;
                        frontier_phi_81_pred_1 = _2622;
                        frontier_phi_81_pred_2 = _2621;
                        frontier_phi_81_pred_3 = _2620;
                        frontier_phi_81_pred_4 = _2625;
                        frontier_phi_81_pred_5 = _2624;
                    }
                    else
                    {
                        float _2850;
                        float _2851;
                        float _2852;
                        float _2853;
                        float _2854;
                        float _2855;
                        float _3145;
                        float _3146;
                        float _3147;
                        float _3148;
                        float _3149;
                        float _3150;
                        float _2863 = _2620;
                        float _2864 = _2621;
                        float _2865 = _2622;
                        float _2866 = _2623;
                        float _2867 = _2624;
                        float _2868 = _2625;
                        uint _2869 = _2635;
                        uint _2870;
                        vec4 _2895;
                        float _2896;
                        vec4 _2911;
                        vec3 _2923;
                        vec4 _2939;
                        vec4 _2955;
                        float _3001;
                        bool _3002;
                        for (;;)
                        {
                            uint _2880 = ((_2626 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2869));
                            _2870 = (_2869 + 4294967295u) & _2869;
                            uint _2882 = _2880 * 40u;
                            _2895 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2882)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2882 + 3u)).x));
                            _2896 = _2895.w;
                            uint _2898 = (_2880 * 40u) + 4u;
                            _2911 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2898)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 3u)).x));
                            uint _2913 = (_2880 * 40u) + 8u;
                            _2923 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2913)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2913 + 2u)).x));
                            uint _2926 = (_2880 * 40u) + 16u;
                            _2939 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2926)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2926 + 3u)).x));
                            uint _2942 = (_2880 * 40u) + 20u;
                            _2955 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2942)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 3u)).x));
                            uint _2957 = (_2880 * 40u) + 24u;
                            vec4 _2970 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2957)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 3u)).x));
                            uint _2976 = (_2880 * 40u) + 28u;
                            vec4 _2989 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2976)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 3u)).x));
                            _3001 = fma(_2122, _2989.z, fma(_2121, _2989.y, _2989.x * _2120)) + _2989.w;
                            _3002 = !((fma(_2122, _2970.z, fma(_2121, _2970.y, _2970.x * _2120)) + _2970.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            float frontier_phi_87_pred_3;
                            float frontier_phi_87_pred_4;
                            float frontier_phi_87_pred_5;
                            if (_3002)
                            {
                                float _3029 = _2895.x - _2120;
                                float _3030 = _2895.y - _2121;
                                float _3031 = _2895.z - _2122;
                                float _3032 = dot(vec3(_3029, _3030, _3031), vec3(_3029, _3030, _3031));
                                float _3035 = inversesqrt(_3032);
                                float _3036 = _3035 * _3029;
                                float _3037 = _3035 * _3030;
                                float _3038 = _3035 * _3031;
                                float _3042 = 1.0 - (_3032 / (_2896 * _2896));
                                float _4037 = isnan(0.0) ? _3042 : (isnan(_3042) ? 0.0 : max(_3042, 0.0));
                                float _3043 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
                                float _3047 = sqrt(_3032) * _2911.w;
                                float _3049 = 1.39999997615814208984375 / (_3047 + 1.39999997615814208984375);
                                float _3050 = _3049 * _3049;
                                float _3053 = ((1.0 - _3050) * dot(vec3(_3036, _3037, _3038), vec3(_716, _719, _722))) + _3050;
                                float _3056 = _3047 * _3047;
                                float _3060 = (fma(_2122, _2939.z, fma(_2121, _2939.y, _2939.x * _2120)) + _2939.w) / _3001;
                                float _3061 = (fma(_2122, _2955.z, fma(_2121, _2955.y, _2955.x * _2120)) + _2955.w) / _3001;
                                float _3065 = 1.0 - dot(vec2(_3060, _3061), vec2(_3060, _3061));
                                float _4053 = isnan(0.0) ? _3065 : (isnan(_3065) ? 0.0 : max(_3065, 0.0));
                                float _3066 = isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0));
                                float _3067 = _3066 * (((isnan(0.0) ? _3053 : (isnan(_3053) ? 0.0 : max(_3053, 0.0))) * _3043) / ((_3056 * 0.699999988079071044921875) + 1.0));
                                float _3079 = exp2(log2(1.0 / ((_3056 * 3.5) + 5.0)) * 0.25);
                                float _3080 = 1.0 - _776;
                                float _3087 = sqrt(1.0 - ((1.0 - (_3080 * _3080)) * (1.0 - (_3079 * _3079))));
                                float _3088 = _3087 * _3087;
                                float _3089 = _3088 * _3088;
                                float _3090 = _3036 - _2435;
                                float _3091 = _3037 - _2436;
                                float _3092 = _3038 - _2437;
                                float _3096 = inversesqrt(dot(vec3(_3090, _3091, _3092), vec3(_3090, _3091, _3092)));
                                float _3100 = dot(vec3(_716, _719, _722), vec3((-0.0) - _2435, (-0.0) - _2436, (-0.0) - _2437));
                                float _4064 = isnan(0.0) ? _3100 : (isnan(_3100) ? 0.0 : max(_3100, 0.0));
                                float _3103 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
                                float _3104 = dot(vec3(_716, _719, _722), vec3(_3096 * _3090, _3096 * _3091, _3096 * _3092));
                                float _4075 = isnan(0.0) ? _3104 : (isnan(_3104) ? 0.0 : max(_3104, 0.0));
                                float _3107 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
                                float _3111 = ((_3107 * _3107) * (_3089 + (-1.0))) + 1.0;
                                float _3112 = _3049 * _3088;
                                float _3113 = _3112 * _3112;
                                float _3119 = ((1.0 - _3113) * dot(vec3(_716, _719, _722), vec3(_3036, _3037, _3038))) + _3113;
                                float _4086 = isnan(0.0) ? _3119 : (isnan(_3119) ? 0.0 : max(_3119, 0.0));
                                float _3120 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
                                float _3121 = 1.0 - _3088;
                                float _3131 = (0.5 / (((_3120 * ((_3103 * _3121) + _3088)) + 9.9999999392252902907785028219223e-09) + (((_3120 * _3121) + _3088) * _3103))) * _3120;
                                float _4097 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
                                float _3141 = (_3066 * _3043) * (((_3089 * 3.1415927410125732421875) * (isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0)))) / ((_3111 * _3111) * ((_3056 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_87_pred = _3067 * _2911.x;
                                frontier_phi_87_pred_1 = _3141 * _2923.z;
                                frontier_phi_87_pred_2 = _3141 * _2923.y;
                                frontier_phi_87_pred_3 = _3141 * _2923.x;
                                frontier_phi_87_pred_4 = _3067 * _2911.z;
                                frontier_phi_87_pred_5 = _3067 * _2911.y;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                                frontier_phi_87_pred_3 = 0.0;
                                frontier_phi_87_pred_4 = 0.0;
                                frontier_phi_87_pred_5 = 0.0;
                            }
                            _3148 = frontier_phi_87_pred;
                            _3147 = frontier_phi_87_pred_1;
                            _3146 = frontier_phi_87_pred_2;
                            _3145 = frontier_phi_87_pred_3;
                            _3150 = frontier_phi_87_pred_4;
                            _3149 = frontier_phi_87_pred_5;
                            _2853 = _3148 + _2866;
                            _2854 = _3149 + _2867;
                            _2855 = _3150 + _2868;
                            _2850 = _3145 + _2863;
                            _2851 = _3146 + _2864;
                            _2852 = _3147 + _2865;
                            if (_2870 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2863 = _2850;
                                _2864 = _2851;
                                _2865 = _2852;
                                _2866 = _2853;
                                _2867 = _2854;
                                _2868 = _2855;
                                _2869 = _2870;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _2853;
                        frontier_phi_81_pred_1 = _2852;
                        frontier_phi_81_pred_2 = _2851;
                        frontier_phi_81_pred_3 = _2850;
                        frontier_phi_81_pred_4 = _2855;
                        frontier_phi_81_pred_5 = _2854;
                    }
                    _2416 = frontier_phi_81_pred;
                    _2414 = frontier_phi_81_pred_1;
                    _2412 = frontier_phi_81_pred_2;
                    _2410 = frontier_phi_81_pred_3;
                    _2420 = frontier_phi_81_pred_4;
                    _2418 = frontier_phi_81_pred_5;
                    uint _2627 = _2626 + 1u;
                    if (_2627 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2620 = _2410;
                        _2621 = _2412;
                        _2622 = _2414;
                        _2623 = _2416;
                        _2624 = _2418;
                        _2625 = _2420;
                        _2626 = _2627;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_56_57_ladder = _2420;
                frontier_phi_56_57_ladder_1 = _2418;
                frontier_phi_56_57_ladder_2 = _2416;
                frontier_phi_56_57_ladder_3 = _2412;
                frontier_phi_56_57_ladder_4 = _2410;
                frontier_phi_56_57_ladder_5 = _2414;
            }
            else
            {
                frontier_phi_56_57_ladder = _2267;
                frontier_phi_56_57_ladder_1 = _2265;
                frontier_phi_56_57_ladder_2 = _2263;
                frontier_phi_56_57_ladder_3 = _2259;
                frontier_phi_56_57_ladder_4 = _2257;
                frontier_phi_56_57_ladder_5 = _2261;
            }
            _2409 = frontier_phi_56_57_ladder_4;
            _2411 = frontier_phi_56_57_ladder_3;
            _2413 = frontier_phi_56_57_ladder_5;
            _2415 = frontier_phi_56_57_ladder_2;
            _2417 = frontier_phi_56_57_ladder_1;
            _2419 = frontier_phi_56_57_ladder;
        }
        float _2424 = isnan(1.0) ? _760 : (isnan(_760) ? 1.0 : min(_760, 1.0));
        _2179 = (_2424 * _2415) + _1906;
        _2181 = (_2424 * _2417) + _1907;
        _2183 = (_2424 * _2419) + _1908;
        _2185 = ((_2409 * 0.039999999105930328369140625) * _2424) + _2062;
        _2187 = ((_2411 * 0.039999999105930328369140625) * _2424) + _2063;
        _2189 = ((_2413 * 0.039999999105930328369140625) * _2424) + _2064;
    }
    else
    {
        _2179 = _1906;
        _2181 = _1907;
        _2183 = _1908;
        _2185 = _2062;
        _2187 = _2063;
        _2189 = _2064;
    }
    float _4113 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _4124 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _4135 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _2206 = ((isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0))) * (_2179 + ((isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0))) * _760))) + ((_2185 + ((isnan(0.0) ? _1808 : (isnan(_1808) ? 0.0 : max(_1808, 0.0))) * _1596)) * cbPerFrame._m0[3u].x);
    float _2207 = ((isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0))) * (_2181 + ((isnan(0.0) ? _1520 : (isnan(_1520) ? 0.0 : max(_1520, 0.0))) * _760))) + ((_2187 + ((isnan(0.0) ? _1811 : (isnan(_1811) ? 0.0 : max(_1811, 0.0))) * _1596)) * cbPerFrame._m0[3u].x);
    float _2208 = ((isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * (_2183 + ((isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0))) * _760))) + ((_2189 + ((isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0))) * _1596)) * cbPerFrame._m0[3u].x);
    float _2209 = isnan(0.0) ? _2206 : (isnan(_2206) ? 0.0 : max(_2206, 0.0));
    float _2210 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2211 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    uint _2212 = _735 + 6u;
    float _2220 = _695 / cbSceneParam._m0[86u].x;
    float _2221 = _696 / cbSceneParam._m0[86u].y;
    vec4 _2235 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2220, _2221, (log2((isnan(cbSceneParam._m0[77u].w) ? _664 : (isnan(_664) ? cbSceneParam._m0[77u].w : min(_664, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2237 = _2235.x;
    float _2238 = _2235.y;
    float _2239 = _2235.z;
    float _2240 = _2235.w;
    float _2320;
    float _2322;
    float _2324;
    float _2326;
    if (_664 > cbSceneParam._m0[78u].w)
    {
        float _2282 = isnan(_664) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _664 : min(cbSceneParam._m0[80u].w, _664));
        float _2283 = _2282 / _664;
        float _2294 = _2283 * _279;
        float _2295 = _280 * _2283;
        float _2296 = (-0.0) - _2295;
        float _2297 = _2283 * _281;
        float _2299 = (cbSceneParam._m0[77u].w * _2296) / _2282;
        float _2300 = _2299 + cbSceneParam._m0[79u].w;
        float _2301 = cbSceneParam._m0[79u].w - _2295;
        float _2307 = sqrt(((_2294 * _2294) + (_2295 * _2295)) + (_2297 * _2297));
        float _2310 = (1.0 - (cbSceneParam._m0[77u].w / _2282)) * _2307;
        float _2316 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2318 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2551;
        if (abs((_2296 - _2299) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2551 = ((((_2300 > 0.0) ? exp2(_2316 * _2300) : (2.0 - exp2(_2318 * _2300))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2310;
        }
        else
        {
            float _2470 = 1.0 / cbSceneParam._m0[80u].x;
            float _2471 = isnan(_2301) ? _2300 : (isnan(_2300) ? _2301 : max(_2300, _2301));
            float _2472 = isnan(_2301) ? _2300 : (isnan(_2300) ? _2301 : min(_2300, _2301));
            float _2481 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : min(_2471, 0.0));
            float _2482 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : min(_2472, 0.0));
            _2551 = ((abs(_2307 / _2296) * cbSceneParam._m0[80u].y) * ((((_2481 - _2482) * 2.0) - ((exp2(_2316 * (isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0)))) - exp2(_2316 * (isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0))))) * _2470)) - ((exp2(_2318 * _2481) - exp2(_2318 * _2482)) * _2470))) + (_2310 * cbSceneParam._m0[80u].z);
        }
        vec4 _2553 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2220, _2221, 1.0), 0.0);
        float _2562 = exp2((_2551 * (-1.44269502162933349609375)) * (1.0 - _2553.w));
        float _2563 = log2(_2562);
        float _2579 = log2(_2240);
        _2320 = (exp2(_2579 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2563 * cbSceneParam._m0[78u].x)) * _2553.x) / cbSceneParam._m0[78u].x)) + _2237;
        _2322 = (exp2(_2579 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2563 * cbSceneParam._m0[78u].y)) * _2553.y) / cbSceneParam._m0[78u].y)) + _2238;
        _2324 = (exp2(_2579 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2563 * cbSceneParam._m0[78u].z)) * _2553.z) / cbSceneParam._m0[78u].z)) + _2239;
        _2326 = _2562 * _2240;
    }
    else
    {
        _2320 = _2237;
        _2322 = _2238;
        _2324 = _2239;
        _2326 = _2240;
    }
    bool _2589;
    vec4 _2336;
    vec4 _2358;
    float _2360;
    float _2364;
    float _2365;
    float _2366;
    float _2367;
    bool _2377;
    for (;;)
    {
        _2336 = cbMatDynParam._m0[0u];
        float _2338 = roundEven(_2336.y);
        bool _2339 = _2338 == 3.0;
        float _2340 = log2(_2326);
        float _2347 = exp2(_2340 * cbSceneParam._m0[78u].x) * _2209;
        float _2348 = exp2(_2340 * cbSceneParam._m0[78u].y) * _2210;
        float _2349 = exp2(_2340 * cbSceneParam._m0[78u].z) * _2211;
        float _2356 = _678 + (-0.5);
        _2358 = cbMtdParam._m0[1u];
        _2360 = _2358.y * _2356;
        float _2363 = (_2338 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2364 = _2363 * (_2339 ? _2347 : (_2347 + (cbSceneParam._m0[72u].w * _2320)));
        _2365 = _2363 * (_2339 ? _2348 : (_2348 + (cbSceneParam._m0[72u].w * _2322)));
        _2366 = _2363 * (_2339 ? _2349 : (_2349 + (cbSceneParam._m0[72u].w * _2324)));
        _2367 = _2356 * 0.999000012874603271484375;
        _2377 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2377)
        {
            if ((cbInstanceData._m0[_735 + 7u].x + _2367) < 0.5)
            {
                _2589 = true;
                break;
            }
        }
        uint _2505 = _736 + uint(_2336.w);
        if ((cbInstanceData._m0[_2505].w < 1.0) && ((cbInstanceData._m0[_2505].w + _2367) < 0.5))
        {
            _2589 = true;
            break;
        }
        if ((_2360 + 1.0) < _2358.x)
        {
            _2589 = true;
            break;
        }
        _2589 = false;
        break;
    }
    float _2820;
    if (_2589)
    {
        discard_state = true;
        _2820 = 0.0;
    }
    else
    {
        _2820 = cbInstanceData._m0[_2212].w;
    }
    SV_Target.x = _2364;
    SV_Target.y = _2365;
    SV_Target.z = _2366;
    SV_Target.w = _2820;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2212].w;
    discard_exit();
}


