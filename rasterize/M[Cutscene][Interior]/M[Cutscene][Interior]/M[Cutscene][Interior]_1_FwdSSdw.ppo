#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _621;
uint _1788;
uint _1789;
uint _1790;
uint _2024;
uint _2025;
uint _2026;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _178 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _179 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _180 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _185 = inversesqrt(dot(vec3(_178, _179, _180), vec3(_178, _179, _180)));
    float _192 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _196 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _244 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _254 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _244);
    float _255 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _244);
    float _256 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _244);
    vec4 _275 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _310 = cbMtdParam._m0[24u].x + _254;
    float _311 = cbMtdParam._m0[24u].y + _255;
    float _312 = cbMtdParam._m0[24u].z + _256;
    float _329 = (-0.0) - dot(vec3(_310, _311, _312), vec3(_185 * _178, _185 * _179, _185 * _180));
    float _330 = (-0.0) - dot(vec3(_310, _311, _312), vec3(_196 * TANGENT.x, _196 * TANGENT.y, _196 * TANGENT.z));
    float _331 = (-0.0) - dot(vec3(_310, _311, _312), vec3((-0.0) - (NORMAL.x * _192), (-0.0) - (NORMAL.y * _192), (-0.0) - (NORMAL.z * _192)));
    float _335 = inversesqrt(dot(vec3(_329, _330, _331), vec3(_329, _330, _331)));
    float _338 = _335 * _331;
    float _341 = ((_335 * _329) + (((_275.x * 2.0) + (-1.0)) * cbMtdParam._m0[22u].x)) * cbMtdParam._m0[20u].w;
    float _342 = ((_335 * _330) + (((_275.y * 2.0) + (-1.0)) * cbMtdParam._m0[22u].y)) * cbMtdParam._m0[20u].z;
    float _343 = fract(TEXCOORD.x);
    float _344 = fract(TEXCOORD.y);
    float _350;
    if (_341 > 0.0)
    {
        _350 = (1.0 - _343) / _341;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_341 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _343) / _341;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _350 = frontier_phi_3_2_ladder;
    }
    float _358;
    if (_342 > 0.0)
    {
        _358 = (1.0 - _344) / _342;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_342 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _344) / _342;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _358 = frontier_phi_7_6_ladder;
    }
    float _362 = (_338 > 0.0) ? (cbMtdParam._m0[16u].x / _338) : 5000.0;
    float _363 = isnan(_358) ? _350 : (isnan(_350) ? _358 : min(_350, _358));
    float _364 = isnan(_362) ? _363 : (isnan(_363) ? _362 : min(_363, _362));
    float _368 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _375 = ((_364 * _338) + _368) / _368;
    vec4 _400 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * ((((((_343 + (-0.5)) + (_364 * _341)) / _375) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * ((((((_344 + (-0.5)) + (_364 * _342)) / _375) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    float _428 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _432 = inversesqrt(dot(vec3(_254, _255, _256), vec3(_254, _255, _256)));
    float _433 = _254 * _432;
    float _434 = _255 * _432;
    float _435 = _256 * _432;
    float _441 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _442 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _451 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_441 * cbSceneParam._m0[86u].x, _442 * cbSceneParam._m0[86u].y));
    float _454 = _451.x * TEXCOORD_4.z;
    float _455 = (-0.0) - _433;
    float _456 = (-0.0) - _434;
    float _457 = (-0.0) - _435;
    float _479 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _483 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _487 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _620;
    float _622;
    float _623;
    float _624;
    float _625;
    float _626;
    float _627;
    float _628;
    float _629;
    float _630;
    float _631;
    float _632;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _543 = (cbModelParam._m0[37u].x * ((((fma(_487, cbModelParam._m0[26u].z, fma(_483, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _479)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _545 = (cbModelParam._m0[37u].y * ((((fma(_487, cbModelParam._m0[27u].z, fma(_483, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _479)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _546 = (((((fma(_487, cbModelParam._m0[28u].z, fma(_483, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _479)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _549 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_543, _545, _546), 0.0);
        vec4 _556 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_543, _545, _546), 0.0);
        vec4 _563 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_543, _545, _546), 0.0);
        vec4 _570 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_543, _545, _546), 0.0);
        float _583 = exp2((_549.w + (-0.5)) * 20.0) * 2.0;
        float _593 = exp2((_556.w + (-0.5)) * 20.0) * 2.0;
        float _603 = exp2((_563.w + (-0.5)) * 20.0) * 2.0;
        float _613 = exp2((_570.w + (-0.5)) * 20.0) * 2.0;
        float _614 = _613 * (_570.x + (-0.5));
        float _615 = _613 * (_570.y + (-0.5));
        float _616 = _613 * (_570.z + (-0.5));
        _620 = _583 * (_549.z + (-0.5));
        _622 = _583 * (_549.y + (-0.5));
        _623 = _583 * (_549.x + (-0.5));
        _624 = _593 * (_556.z + (-0.5));
        _625 = _593 * (_556.y + (-0.5));
        _626 = _593 * (_556.x + (-0.5));
        _627 = _603 * (_563.z + (-0.5));
        _628 = _603 * (_563.y + (-0.5));
        _629 = _603 * (_563.x + (-0.5));
        _630 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
        _631 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
        _632 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    }
    else
    {
        _620 = _621;
        _622 = _621;
        _623 = _621;
        _624 = _621;
        _625 = _621;
        _626 = _621;
        _627 = _621;
        _628 = _621;
        _629 = _621;
        _630 = _621;
        _631 = _621;
        _632 = _621;
    }
    float _760;
    float _761;
    float _762;
    float _763;
    float _764;
    float _765;
    float _766;
    float _767;
    float _768;
    float _769;
    float _770;
    float _771;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _686 = (cbModelParam._m0[38u].x * ((((fma(_487, cbModelParam._m0[30u].z, fma(_483, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _479)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _687 = (cbModelParam._m0[38u].y * ((((fma(_487, cbModelParam._m0[31u].z, fma(_483, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _479)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _688 = (((((fma(_487, cbModelParam._m0[32u].z, fma(_483, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _479)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _690 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_686, _687, _688), 0.0);
        vec4 _697 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_686, _687, _688), 0.0);
        vec4 _704 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_686, _687, _688), 0.0);
        vec4 _711 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_686, _687, _688), 0.0);
        float _723 = exp2((_690.w + (-0.5)) * 20.0) * 2.0;
        float _733 = exp2((_697.w + (-0.5)) * 20.0) * 2.0;
        float _743 = exp2((_704.w + (-0.5)) * 20.0) * 2.0;
        float _753 = exp2((_711.w + (-0.5)) * 20.0) * 2.0;
        float _754 = _753 * (_711.x + (-0.5));
        float _755 = _753 * (_711.y + (-0.5));
        float _756 = _753 * (_711.z + (-0.5));
        _760 = _723 * (_690.z + (-0.5));
        _761 = _723 * (_690.y + (-0.5));
        _762 = _723 * (_690.x + (-0.5));
        _763 = _733 * (_697.z + (-0.5));
        _764 = _733 * (_697.y + (-0.5));
        _765 = _733 * (_697.x + (-0.5));
        _766 = _743 * (_704.z + (-0.5));
        _767 = _743 * (_704.y + (-0.5));
        _768 = _743 * (_704.x + (-0.5));
        _769 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
        _770 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        _771 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    }
    else
    {
        _760 = _621;
        _761 = _621;
        _762 = _621;
        _763 = _621;
        _764 = _621;
        _765 = _621;
        _766 = _621;
        _767 = _621;
        _768 = _621;
        _769 = _621;
        _770 = _621;
        _771 = _621;
    }
    float _786 = _433 * (-0.5);
    float _787 = _434 * (-0.5);
    float _788 = _435 * (-0.5);
    float _789 = dot(vec4(_786, _787, _788, 1.0), vec4(_762, _765, _768, _771));
    float _792 = dot(vec4(_786, _787, _788, 1.0), vec4(_761, _764, _767, _770));
    float _795 = dot(vec4(_786, _787, _788, 1.0), vec4(_760, _763, _766, _769));
    float _830;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _802 = dot(vec4(_786, _787, _788, 1.0), vec4(_620, _624, _627, _630));
        float _806 = dot(vec4(_786, _787, _788, 1.0), vec4(_622, _625, _628, _631));
        float _810 = dot(vec4(_786, _787, _788, 1.0), vec4(_623, _626, _629, _632));
        float _817 = dot(vec4(cbModelParam._m0[39u]), vec4(_786, _787, _788, 1.0));
        _830 = dot(vec3(isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0)), isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0)), isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_817) ? 0.0 : (isnan(0.0) ? _817 : max(0.0, _817))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _830 = 1.0;
    }
    float _841;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _832 = dot(vec4(cbModelParam._m0[40u]), vec4(_786, _787, _788, 1.0));
        _841 = dot(vec3(isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0)), isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0)), isnan(0.0) ? _795 : (isnan(_795) ? 0.0 : max(_795, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_832) ? 0.0 : (isnan(0.0) ? _832 : max(0.0, _832))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _841 = 1.0;
    }
    float _845 = (_841 * cbModelParam._m0[1u].x) + (_830 * (1.0 - cbModelParam._m0[1u].x));
    float _851 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _935;
    float _937;
    float _939;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _902 = fma(_487, cbModelParam._m0[13u].z, fma(_483, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _479)) + cbModelParam._m0[13u].w;
        float _906 = fma(_487, cbModelParam._m0[14u].z, fma(_483, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _479)) + cbModelParam._m0[14u].w;
        float _910 = fma(_487, cbModelParam._m0[15u].z, fma(_483, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _479)) + cbModelParam._m0[15u].w;
        float _913 = fma(_457, cbModelParam._m0[13u].z, fma(_456, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _455));
        float _916 = fma(_457, cbModelParam._m0[14u].z, fma(_456, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _455));
        float _919 = fma(_457, cbModelParam._m0[15u].z, fma(_456, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _455));
        float _945;
        if (_913 > 0.0)
        {
            _945 = abs((1.0 - _902) / _913);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_913 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_902 + 1.0) / _913);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _945 = frontier_phi_22_20_ladder;
        }
        float _1245;
        if (_916 > 0.0)
        {
            _1245 = abs((1.0 - _906) / _916);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_916 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_906 + 1.0) / _916);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1245 = frontier_phi_31_27_ladder;
        }
        float _1541;
        if (_919 > 0.0)
        {
            _1541 = abs((1.0 - _910) / _919);
        }
        else
        {
            float frontier_phi_45_38_ladder;
            if (_919 < 0.0)
            {
                frontier_phi_45_38_ladder = abs((_910 + 1.0) / _919);
            }
            else
            {
                frontier_phi_45_38_ladder = 5000.0;
            }
            _1541 = frontier_phi_45_38_ladder;
        }
        float _1543 = isnan(_1245) ? _945 : (isnan(_945) ? _1245 : min(_945, _1245));
        float _1544 = isnan(_1541) ? _1543 : (isnan(_1543) ? _1541 : min(_1543, _1541));
        float _1548 = (_1544 * _913) + _902;
        float _1549 = (_1544 * _916) + _906;
        float _1550 = (_1544 * _919) + _910;
        float _1551 = _1544 * 9.9999997473787516355514526367188e-05;
        float _1552 = (-1.0) - _1551;
        float _1554 = _1551 + 1.0;
        float frontier_phi_21_45_ladder;
        float frontier_phi_21_45_ladder_1;
        float frontier_phi_21_45_ladder_2;
        if ((_1550 > _1554) || ((_1550 < _1552) || ((_1549 > _1554) || ((_1549 < _1552) || ((_1548 < _1552) || (_1548 > _1554))))))
        {
            frontier_phi_21_45_ladder = 0.0;
            frontier_phi_21_45_ladder_1 = 0.0;
            frontier_phi_21_45_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1661 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1550, cbModelParam._m0[9u].z, fma(_1549, cbModelParam._m0[9u].y, _1548 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1550, cbModelParam._m0[10u].z, fma(_1549, cbModelParam._m0[10u].y, _1548 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1550, cbModelParam._m0[11u].z, fma(_1549, cbModelParam._m0[11u].y, _1548 * cbModelParam._m0[11u].x))), _851);
            frontier_phi_21_45_ladder = _1661.z * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_1 = _1661.y * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_2 = _1661.x * cbModelParam._m0[1u].y;
        }
        _935 = frontier_phi_21_45_ladder_2;
        _937 = frontier_phi_21_45_ladder_1;
        _939 = frontier_phi_21_45_ladder;
    }
    else
    {
        vec4 _923 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_455, _456, _457), _851);
        _935 = _923.x * cbModelParam._m0[1u].y;
        _937 = _923.y * cbModelParam._m0[1u].y;
        _939 = _923.z * cbModelParam._m0[1u].y;
    }
    float _942 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1032;
    float _1034;
    float _1036;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _996 = fma(_487, cbModelParam._m0[21u].z, fma(_483, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _479)) + cbModelParam._m0[21u].w;
        float _1000 = fma(_487, cbModelParam._m0[22u].z, fma(_483, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _479)) + cbModelParam._m0[22u].w;
        float _1004 = fma(_487, cbModelParam._m0[23u].z, fma(_483, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _479)) + cbModelParam._m0[23u].w;
        float _1007 = fma(_457, cbModelParam._m0[21u].z, fma(_456, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _455));
        float _1010 = fma(_457, cbModelParam._m0[22u].z, fma(_456, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _455));
        float _1013 = fma(_457, cbModelParam._m0[23u].z, fma(_456, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _455));
        float _1250;
        if (_1007 > 0.0)
        {
            _1250 = abs((1.0 - _996) / _1007);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1007 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_996 + 1.0) / _1007);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1250 = frontier_phi_33_29_ladder;
        }
        float _1567;
        if (_1010 > 0.0)
        {
            _1567 = abs((1.0 - _1000) / _1010);
        }
        else
        {
            float frontier_phi_47_40_ladder;
            if (_1010 < 0.0)
            {
                frontier_phi_47_40_ladder = abs((_1000 + 1.0) / _1010);
            }
            else
            {
                frontier_phi_47_40_ladder = 5000.0;
            }
            _1567 = frontier_phi_47_40_ladder;
        }
        float _1718;
        if (_1013 > 0.0)
        {
            _1718 = abs((1.0 - _1004) / _1013);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1013 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1004 + 1.0) / _1013);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _1718 = frontier_phi_61_56_ladder;
        }
        float _1720 = isnan(_1567) ? _1250 : (isnan(_1250) ? _1567 : min(_1250, _1567));
        float _1721 = isnan(_1718) ? _1720 : (isnan(_1720) ? _1718 : min(_1720, _1718));
        float _1725 = (_1721 * _1007) + _996;
        float _1726 = (_1721 * _1010) + _1000;
        float _1727 = (_1721 * _1013) + _1004;
        float _1728 = _1721 * 9.9999997473787516355514526367188e-05;
        float _1729 = (-1.0) - _1728;
        float _1731 = _1728 + 1.0;
        float frontier_phi_30_61_ladder;
        float frontier_phi_30_61_ladder_1;
        float frontier_phi_30_61_ladder_2;
        if ((_1727 > _1731) || ((_1727 < _1729) || ((_1726 > _1731) || ((_1726 < _1729) || ((_1725 < _1729) || (_1725 > _1731))))))
        {
            frontier_phi_30_61_ladder = 0.0;
            frontier_phi_30_61_ladder_1 = 0.0;
            frontier_phi_30_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1887 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1727, cbModelParam._m0[17u].z, fma(_1726, cbModelParam._m0[17u].y, _1725 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1727, cbModelParam._m0[18u].z, fma(_1726, cbModelParam._m0[18u].y, _1725 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1727, cbModelParam._m0[19u].z, fma(_1726, cbModelParam._m0[19u].y, _1725 * cbModelParam._m0[19u].x))), _942);
            frontier_phi_30_61_ladder = _1887.y * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_1 = _1887.z * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_2 = _1887.x * cbModelParam._m0[1u].z;
        }
        _1032 = frontier_phi_30_61_ladder_2;
        _1034 = frontier_phi_30_61_ladder;
        _1036 = frontier_phi_30_61_ladder_1;
    }
    else
    {
        vec4 _1016 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_455, _456, _457), _942);
        _1032 = _1016.x * cbModelParam._m0[1u].z;
        _1034 = _1016.y * cbModelParam._m0[1u].z;
        _1036 = _1016.z * cbModelParam._m0[1u].z;
    }
    float _1048 = _454 * 0.01200000010430812835693359375;
    float _1050 = _1048 * ((cbModelParam._m0[1u].w * (_1032 - _935)) + _935);
    float _1051 = _1048 * ((cbModelParam._m0[1u].w * (_1034 - _937)) + _937);
    float _1052 = _1048 * ((cbModelParam._m0[1u].w * (_1036 - _939)) + _939);
    float _1073 = fma(_1052, cbSceneParam._m0[89u].z, fma(_1051, cbSceneParam._m0[89u].y, _1050 * cbSceneParam._m0[89u].x));
    float _1076 = fma(_1052, cbSceneParam._m0[90u].z, fma(_1051, cbSceneParam._m0[90u].y, _1050 * cbSceneParam._m0[90u].x));
    float _1079 = fma(_1052, cbSceneParam._m0[91u].z, fma(_1051, cbSceneParam._m0[91u].y, _1050 * cbSceneParam._m0[91u].x));
    vec4 _1087 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_441, _442));
    float _1089 = _1087.w;
    uint _1105 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1109 = floatBitsToUint(cbInstanceData._m0[_1105 + 5u]);
    uint _1111 = _1109.x * 14u;
    uint _1112 = _1111 + 13u;
    float _1117 = _454 + (-1.0);
    float _1120 = (cbLight._m0[_1112].x * _1117) + 1.0;
    float _1121 = (cbLight._m0[_1112].y * _1117) + 1.0;
    uint _1122 = _1111 + 8u;
    float _1133 = cbLight._m0[_1111].x + _433;
    float _1134 = cbLight._m0[_1111].y + _434;
    float _1135 = cbLight._m0[_1111].z + _435;
    float _1139 = inversesqrt(dot(vec3(_1133, _1134, _1135), vec3(_1133, _1134, _1135)));
    float _1143 = dot(vec3(0.0), vec3(cbLight._m0[_1111].xyz));
    float _2361 = isnan(0.0) ? _1143 : (isnan(_1143) ? 0.0 : max(_1143, 0.0));
    float _1146 = isnan(1.0) ? _2361 : (isnan(_2361) ? 1.0 : min(_2361, 1.0));
    float _1147 = dot(vec3(0.0), vec3(_433, _434, _435));
    float _2372 = isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0));
    float _1150 = isnan(1.0) ? _2372 : (isnan(_2372) ? 1.0 : min(_2372, 1.0));
    float _1151 = dot(vec3(cbLight._m0[_1111].xyz), vec3(_1133 * _1139, _1134 * _1139, _1135 * _1139));
    float _2383 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
    float _1162 = (exp2(log2(1.0 - (isnan(1.0) ? _2383 : (isnan(_2383) ? 1.0 : min(_2383, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1168 = (0.5 / ((_1146 + 9.9999999392252902907785028219223e-09) + _1150)) * _1146;
    float _2394 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
    float _1170 = (isnan(1.0) ? _2394 : (isnan(_2394) ? 1.0 : min(_2394, 1.0))) * 0.31831014156341552734375;
    float _1172 = isnan(1.0) ? _1120 : (isnan(_1120) ? 1.0 : min(_1120, 1.0));
    uint _1185 = _1111 + 9u;
    uint _1191 = _1111 | 1u;
    float _1197 = cbLight._m0[_1191].x + _433;
    float _1198 = cbLight._m0[_1191].y + _434;
    float _1199 = cbLight._m0[_1191].z + _435;
    float _1203 = inversesqrt(dot(vec3(_1197, _1198, _1199), vec3(_1197, _1198, _1199)));
    float _1207 = dot(vec3(0.0), vec3(cbLight._m0[_1191].xyz));
    float _2410 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
    float _1210 = isnan(1.0) ? _2410 : (isnan(_2410) ? 1.0 : min(_2410, 1.0));
    float _1211 = dot(vec3(cbLight._m0[_1191].xyz), vec3(_1197 * _1203, _1198 * _1203, _1199 * _1203));
    float _2421 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
    float _1220 = (exp2(log2(1.0 - (isnan(1.0) ? _2421 : (isnan(_2421) ? 1.0 : min(_2421, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1224 = (0.5 / ((_1210 + 9.9999999392252902907785028219223e-09) + _1150)) * _1210;
    float _2432 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
    float _1226 = (isnan(1.0) ? _2432 : (isnan(_2432) ? 1.0 : min(_2432, 1.0))) * 0.31831014156341552734375;
    float _1227 = isnan(1.0) ? _1121 : (isnan(_1121) ? 1.0 : min(_1121, 1.0));
    float _1237 = (((_1220 * cbLight._m0[_1185].x) * _1226) * _1227) + ((((cbLight._m0[_1122].x * ((1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1089))) * _1162) * _1170) * _1172);
    float _1238 = (((_1220 * cbLight._m0[_1185].y) * _1226) * _1227) + ((((cbLight._m0[_1122].y * ((1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1089))) * _1162) * _1170) * _1172);
    float _1239 = (((_1220 * cbLight._m0[_1185].z) * _1226) * _1227) + ((((cbLight._m0[_1122].z * ((1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1089))) * _1162) * _1170) * _1172);
    float _1356;
    float _1358;
    float _1360;
    if (_1109.y == 0u)
    {
        float _1295 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1296 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1295;
        float _1297 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1295;
        float _1298 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1295;
        uvec4 _1310 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1311 = _1310.x;
        uint _1322 = uint((float(_1310.y) * floor(float(uint(cbSceneParam._m0[85u].y * _442) / _1311))) + floor(float(uint(cbSceneParam._m0[85u].x * _441) / _1311)));
        float _1332 = (log2(_1298 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1333 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        uint _1336 = uint(isnan(14.0) ? _1333 : (isnan(_1333) ? 14.0 : min(_1333, 14.0)));
        uvec4 _1341 = texelFetch(g_lightClusterGridBuffer, int(((_1336 << 2u) + (_1322 << 6u)) >> 2u));
        uint _1342 = _1341.x;
        uint _1343 = _1310.z;
        float _1433;
        float _1435;
        float _1437;
        if (((((1u << ((_1343 >> 4u) & 15u)) + 4294967295u) & _1342) == 0u) || ((_1343 & 240u) == 0u))
        {
            _1433 = 0.0;
            _1435 = 0.0;
            _1437 = 0.0;
        }
        else
        {
            float _1434;
            float _1436;
            float _1438;
            float _1592 = 0.0;
            float _1593 = 0.0;
            float _1594 = 0.0;
            uint _1595 = 0u;
            uint _1604;
            bool _1605;
            for (;;)
            {
                _1604 = texelFetch(g_lightClassification, int((((_1336 << 5u) + (_1322 << 9u)) + (_1595 << 2u)) >> 2u)).x;
                _1605 = _1604 == 0u;
                float frontier_phi_58_pred;
                float frontier_phi_58_pred_1;
                float frontier_phi_58_pred_2;
                if (_1605)
                {
                    frontier_phi_58_pred = _1594;
                    frontier_phi_58_pred_1 = _1593;
                    frontier_phi_58_pred_2 = _1592;
                }
                else
                {
                    float _1758;
                    float _1759;
                    float _1760;
                    uint _1761;
                    _1758 = _1592;
                    _1759 = _1593;
                    _1760 = _1594;
                    _1761 = _1604;
                    float _1670;
                    float _1671;
                    float _1672;
                    for (;;)
                    {
                        uint _1765 = uint(findLSB(_1761)) + (_1595 << 5u);
                        uint _1762 = (_1761 + 4294967295u) & _1761;
                        uint _1767 = _1765 * 48u;
                        vec4 _1781 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1767)).x, texelFetch(g_PointLightRenderingBuffer, int(_1767 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1767 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1767 + 3u)).x));
                        uint _1798 = (_1765 * 48u) + 8u;
                        vec3 _1809 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_1798)).x, texelFetch(g_PointLightRenderingBuffer, int(_1798 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1798 + 2u)).x));
                        float _1813 = _1781.x - _1296;
                        float _1814 = _1781.y - _1297;
                        float _1815 = _1781.z - _1298;
                        float _1816 = dot(vec3(_1813, _1814, _1815), vec3(_1813, _1814, _1815));
                        float _1819 = inversesqrt(_1816);
                        float _1828 = 1.0 - (_1816 * _1781.w);
                        float _2458 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
                        float _1830 = sqrt(_1816) * uintBitsToFloat(uvec4(_1788, _1789, _1790, texelFetch(g_PointLightRenderingBuffer, int(((_1765 * 48u) + 4u) + 3u)).x)).w;
                        float _1833 = 1.39999997615814208984375 / (_1830 + 1.39999997615814208984375);
                        float _1834 = _1833 * _1833;
                        float _1837 = ((1.0 - _1834) * dot(vec3(0.0), vec3(_1819 * _1813, _1819 * _1814, _1819 * _1815))) + _1834;
                        float _1839 = (-0.0) - _1296;
                        float _1840 = (-0.0) - _1297;
                        float _1841 = (-0.0) - _1298;
                        float _1845 = inversesqrt(dot(vec3(_1839, _1840, _1841), vec3(_1839, _1840, _1841)));
                        float _1849 = dot(vec3(0.0), vec3(_1845 * _1839, _1845 * _1840, _1845 * _1841));
                        float _2469 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
                        float _2480 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
                        float _1853 = isnan(1.0) ? _2480 : (isnan(_2480) ? 1.0 : min(_2480, 1.0));
                        float _1857 = (0.5 / (((isnan(1.0) ? _2469 : (isnan(_2469) ? 1.0 : min(_2469, 1.0))) + 9.9999999392252902907785028219223e-09) + _1853)) * _1853;
                        float _2491 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
                        float _1866 = (((isnan(1.0) ? _2491 : (isnan(_2491) ? 1.0 : min(_2491, 1.0))) * 3.1415927410125732421875) / (((_1830 * _1830) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2458 : (isnan(_2458) ? 1.0 : min(_2458, 1.0)));
                        _1670 = (_1866 * _1809.x) + _1758;
                        _1671 = (_1866 * _1809.y) + _1759;
                        _1672 = (_1866 * _1809.z) + _1760;
                        if (_1762 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _1758 = _1670;
                            _1759 = _1671;
                            _1760 = _1672;
                            _1761 = _1762;
                        }
                    }
                    frontier_phi_58_pred = _1672;
                    frontier_phi_58_pred_1 = _1671;
                    frontier_phi_58_pred_2 = _1670;
                }
                _1438 = frontier_phi_58_pred;
                _1436 = frontier_phi_58_pred_1;
                _1434 = frontier_phi_58_pred_2;
                uint _1596 = _1595 + 1u;
                if (_1596 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1592 = _1434;
                    _1593 = _1436;
                    _1594 = _1438;
                    _1595 = _1596;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1433 = _1434;
            _1435 = _1436;
            _1437 = _1438;
        }
        uvec4 _1441 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1442 = _1441.z;
        uint _1444 = (_1442 >> 8u) & 15u;
        float _1572;
        float _1574;
        float _1576;
        if (((4294967295u << _1444) & _1342) == 0u)
        {
            _1572 = _1433;
            _1574 = _1435;
            _1576 = _1437;
        }
        else
        {
            float _1588 = inversesqrt(dot(vec3(_1296, _1297, _1298), vec3(_1296, _1297, _1298)));
            float frontier_phi_49_50_ladder;
            float frontier_phi_49_50_ladder_1;
            float frontier_phi_49_50_ladder_2;
            if (_1444 < ((_1442 >> 12u) & 15u))
            {
                float _1573;
                float _1575;
                float _1577;
                float _1744 = _1433;
                float _1745 = _1435;
                float _1746 = _1437;
                uint _1747 = _1444;
                uint _1756;
                bool _1757;
                for (;;)
                {
                    _1756 = texelFetch(g_lightClassification, int((((_1336 << 5u) + (_1322 << 9u)) + (_1747 << 2u)) >> 2u)).x;
                    _1757 = _1756 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    if (_1757)
                    {
                        frontier_phi_67_pred = _1746;
                        frontier_phi_67_pred_1 = _1745;
                        frontier_phi_67_pred_2 = _1744;
                    }
                    else
                    {
                        float _1892;
                        float _1893;
                        float _1894;
                        float _2113;
                        float _2114;
                        float _2115;
                        float _1902 = _1744;
                        float _1903 = _1745;
                        float _1904 = _1746;
                        uint _1905 = _1756;
                        uint _1906;
                        uint _1916;
                        vec4 _1931;
                        float _1932;
                        vec3 _1944;
                        vec4 _1959;
                        vec4 _1974;
                        float _2020;
                        bool _2021;
                        for (;;)
                        {
                            _1916 = ((_1747 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_1905));
                            _1906 = (_1905 + 4294967295u) & _1905;
                            uint _1918 = _1916 * 40u;
                            _1931 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1918)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1918 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1918 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1918 + 3u)).x));
                            _1932 = _1931.w;
                            uint _1934 = (_1916 * 40u) + 8u;
                            _1944 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_1934)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1934 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1934 + 2u)).x));
                            uint _1946 = (_1916 * 40u) + 16u;
                            _1959 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1946)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1946 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1946 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1946 + 3u)).x));
                            uint _1961 = (_1916 * 40u) + 20u;
                            _1974 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1961)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1961 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1961 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1961 + 3u)).x));
                            uint _1976 = (_1916 * 40u) + 24u;
                            vec4 _1989 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1976)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1976 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1976 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1976 + 3u)).x));
                            uint _1995 = (_1916 * 40u) + 28u;
                            vec4 _2008 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1995)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1995 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1995 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1995 + 3u)).x));
                            _2020 = fma(_1298, _2008.z, fma(_1297, _2008.y, _2008.x * _1296)) + _2008.w;
                            _2021 = !((fma(_1298, _1989.z, fma(_1297, _1989.y, _1989.x * _1296)) + _1989.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            if (_2021)
                            {
                                float _2055 = _1931.x - _1296;
                                float _2056 = _1931.y - _1297;
                                float _2057 = _1931.z - _1298;
                                float _2058 = dot(vec3(_2055, _2056, _2057), vec3(_2055, _2056, _2057));
                                float _2061 = inversesqrt(_2058);
                                float _2068 = 1.0 - (_2058 / (_1932 * _1932));
                                float _2502 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
                                float _2070 = sqrt(_2058) * uintBitsToFloat(uvec4(_2024, _2025, _2026, texelFetch(g_SpotLightRenderingBuffer, int(((_1916 * 40u) + 4u) + 3u)).x)).w;
                                float _2072 = 1.39999997615814208984375 / (_2070 + 1.39999997615814208984375);
                                float _2073 = _2072 * _2072;
                                float _2076 = (fma(_1298, _1959.z, fma(_1297, _1959.y, _1959.x * _1296)) + _1959.w) / _2020;
                                float _2077 = (fma(_1298, _1974.z, fma(_1297, _1974.y, _1974.x * _1296)) + _1974.w) / _2020;
                                float _2081 = 1.0 - dot(vec2(_2076, _2077), vec2(_2076, _2077));
                                float _2513 = isnan(0.0) ? _2081 : (isnan(_2081) ? 0.0 : max(_2081, 0.0));
                                float _2089 = dot(vec3(0.0), vec3((-0.0) - (_1296 * _1588), (-0.0) - (_1297 * _1588), (-0.0) - (_1298 * _1588)));
                                float _2524 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
                                float _2097 = ((1.0 - _2073) * dot(vec3(0.0), vec3(_2061 * _2055, _2061 * _2056, _2061 * _2057))) + _2073;
                                float _2535 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
                                float _2098 = isnan(1.0) ? _2535 : (isnan(_2535) ? 1.0 : min(_2535, 1.0));
                                float _2102 = (0.5 / (((isnan(1.0) ? _2524 : (isnan(_2524) ? 1.0 : min(_2524, 1.0))) + 9.9999999392252902907785028219223e-09) + _2098)) * _2098;
                                float _2546 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
                                float _2109 = ((isnan(1.0) ? _2513 : (isnan(_2513) ? 1.0 : min(_2513, 1.0))) * (isnan(1.0) ? _2502 : (isnan(_2502) ? 1.0 : min(_2502, 1.0)))) * (((isnan(1.0) ? _2546 : (isnan(_2546) ? 1.0 : min(_2546, 1.0))) * 3.1415927410125732421875) / (((_2070 * _2070) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_73_pred = _2109 * _1944.z;
                                frontier_phi_73_pred_1 = _2109 * _1944.y;
                                frontier_phi_73_pred_2 = _2109 * _1944.x;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                            }
                            _2115 = frontier_phi_73_pred;
                            _2114 = frontier_phi_73_pred_1;
                            _2113 = frontier_phi_73_pred_2;
                            _1892 = _2113 + _1902;
                            _1893 = _2114 + _1903;
                            _1894 = _2115 + _1904;
                            if (_1906 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _1902 = _1892;
                                _1903 = _1893;
                                _1904 = _1894;
                                _1905 = _1906;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _1894;
                        frontier_phi_67_pred_1 = _1893;
                        frontier_phi_67_pred_2 = _1892;
                    }
                    _1577 = frontier_phi_67_pred;
                    _1575 = frontier_phi_67_pred_1;
                    _1573 = frontier_phi_67_pred_2;
                    uint _1748 = _1747 + 1u;
                    if (_1748 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _1744 = _1573;
                        _1745 = _1575;
                        _1746 = _1577;
                        _1747 = _1748;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_49_50_ladder = _1575;
                frontier_phi_49_50_ladder_1 = _1577;
                frontier_phi_49_50_ladder_2 = _1573;
            }
            else
            {
                frontier_phi_49_50_ladder = _1435;
                frontier_phi_49_50_ladder_1 = _1437;
                frontier_phi_49_50_ladder_2 = _1433;
            }
            _1572 = frontier_phi_49_50_ladder_2;
            _1574 = frontier_phi_49_50_ladder;
            _1576 = frontier_phi_49_50_ladder_1;
        }
        float _1581 = isnan(1.0) ? _454 : (isnan(_454) ? 1.0 : min(_454, 1.0));
        _1356 = ((_1572 * 0.039999999105930328369140625) * _1581) + _1237;
        _1358 = ((_1574 * 0.039999999105930328369140625) * _1581) + _1238;
        _1360 = ((_1576 * 0.039999999105930328369140625) * _1581) + _1239;
    }
    else
    {
        _1356 = _1237;
        _1358 = _1238;
        _1360 = _1239;
    }
    uint _1367 = (_1105 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1382 = ((cbMtdParam._m0[9u].x * _400.x) * cbInstanceData._m0[_1367].x) + ((_1356 + ((isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0))) * _845)) * cbPerFrame._m0[3u].x);
    float _1383 = ((cbMtdParam._m0[9u].y * _400.y) * cbInstanceData._m0[_1367].y) + ((_1358 + ((isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0))) * _845)) * cbPerFrame._m0[3u].x);
    float _1384 = ((cbMtdParam._m0[9u].z * _400.z) * cbInstanceData._m0[_1367].z) + ((_1360 + ((isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0))) * _845)) * cbPerFrame._m0[3u].x);
    uint _1388 = _1105 + 6u;
    float _1396 = _441 / cbSceneParam._m0[86u].x;
    float _1397 = _442 / cbSceneParam._m0[86u].y;
    vec4 _1411 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1396, _1397, (log2((isnan(cbSceneParam._m0[77u].w) ? _428 : (isnan(_428) ? cbSceneParam._m0[77u].w : min(_428, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1413 = _1411.x;
    float _1414 = _1411.y;
    float _1415 = _1411.z;
    float _1416 = _1411.w;
    float _1490;
    float _1492;
    float _1494;
    float _1496;
    if (_428 > cbSceneParam._m0[78u].w)
    {
        float _1452 = isnan(_428) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _428 : min(cbSceneParam._m0[80u].w, _428));
        float _1453 = _1452 / _428;
        float _1464 = _1453 * _254;
        float _1465 = _255 * _1453;
        float _1466 = (-0.0) - _1465;
        float _1467 = _1453 * _256;
        float _1469 = (cbSceneParam._m0[77u].w * _1466) / _1452;
        float _1470 = _1469 + cbSceneParam._m0[79u].w;
        float _1471 = cbSceneParam._m0[79u].w - _1465;
        float _1477 = sqrt(((_1464 * _1464) + (_1465 * _1465)) + (_1467 * _1467));
        float _1480 = (1.0 - (cbSceneParam._m0[77u].w / _1452)) * _1477;
        float _1486 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1488 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1680;
        if (abs((_1466 - _1469) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1680 = ((((_1470 > 0.0) ? exp2(_1486 * _1470) : (2.0 - exp2(_1488 * _1470))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1480;
        }
        else
        {
            float _1618 = 1.0 / cbSceneParam._m0[80u].x;
            float _1619 = isnan(_1471) ? _1470 : (isnan(_1470) ? _1471 : max(_1470, _1471));
            float _1620 = isnan(_1471) ? _1470 : (isnan(_1470) ? _1471 : min(_1470, _1471));
            float _1629 = isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : min(_1619, 0.0));
            float _1630 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : min(_1620, 0.0));
            _1680 = ((abs(_1477 / _1466) * cbSceneParam._m0[80u].y) * ((((_1629 - _1630) * 2.0) - ((exp2(_1486 * (isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)))) - exp2(_1486 * (isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0))))) * _1618)) - ((exp2(_1488 * _1629) - exp2(_1488 * _1630)) * _1618))) + (_1480 * cbSceneParam._m0[80u].z);
        }
        vec4 _1682 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1396, _1397, 1.0), 0.0);
        float _1691 = exp2((_1680 * (-1.44269502162933349609375)) * (1.0 - _1682.w));
        float _1692 = log2(_1691);
        float _1708 = log2(_1416);
        _1490 = (exp2(_1708 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1692 * cbSceneParam._m0[78u].x)) * _1682.x) / cbSceneParam._m0[78u].x)) + _1413;
        _1492 = (exp2(_1708 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1692 * cbSceneParam._m0[78u].y)) * _1682.y) / cbSceneParam._m0[78u].y)) + _1414;
        _1494 = (exp2(_1708 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1692 * cbSceneParam._m0[78u].z)) * _1682.z) / cbSceneParam._m0[78u].z)) + _1415;
        _1496 = _1691 * _1416;
    }
    else
    {
        _1490 = _1413;
        _1492 = _1414;
        _1494 = _1415;
        _1496 = _1416;
    }
    float _1508 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1509 = _1508 == 3.0;
    float _1511 = log2(_1496);
    float _1518 = exp2(_1511 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)));
    float _1519 = exp2(_1511 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)));
    float _1520 = exp2(_1511 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)));
    float _1529 = (_1508 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _1529 * (_1509 ? _1518 : (_1518 + (cbSceneParam._m0[72u].w * _1490)));
    SV_Target.y = _1529 * (_1509 ? _1519 : (_1519 + (cbSceneParam._m0[72u].w * _1492)));
    SV_Target.z = _1529 * (_1509 ? _1520 : (_1520 + (cbSceneParam._m0[72u].w * _1494)));
    SV_Target.w = cbInstanceData._m0[_1388].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1388].w;
}


