#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _831;
float _2790;
float _2791;
float _2792;
float _2793;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _248 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _258 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _248);
    float _259 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _248);
    float _260 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _248);
    vec4 _279 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _314 = cbMtdParam._m0[24u].x + _258;
    float _315 = cbMtdParam._m0[24u].y + _259;
    float _316 = cbMtdParam._m0[24u].z + _260;
    float _333 = (-0.0) - dot(vec3(_314, _315, _316), vec3(_189 * _182, _189 * _183, _189 * _184));
    float _334 = (-0.0) - dot(vec3(_314, _315, _316), vec3(_200 * TANGENT.x, _200 * TANGENT.y, _200 * TANGENT.z));
    float _335 = (-0.0) - dot(vec3(_314, _315, _316), vec3((-0.0) - (NORMAL.x * _196), (-0.0) - (NORMAL.y * _196), (-0.0) - (NORMAL.z * _196)));
    float _339 = inversesqrt(dot(vec3(_333, _334, _335), vec3(_333, _334, _335)));
    float _342 = _339 * _335;
    float _345 = ((_339 * _333) + (((_279.x * 2.0) + (-1.0)) * cbMtdParam._m0[22u].x)) * cbMtdParam._m0[20u].w;
    float _346 = ((_339 * _334) + (((_279.y * 2.0) + (-1.0)) * cbMtdParam._m0[22u].y)) * cbMtdParam._m0[20u].z;
    float _347 = fract(TEXCOORD.x);
    float _348 = fract(TEXCOORD.y);
    float _354;
    if (_345 > 0.0)
    {
        _354 = (1.0 - _347) / _345;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_345 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _347) / _345;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _354 = frontier_phi_3_2_ladder;
    }
    float _362;
    if (_346 > 0.0)
    {
        _362 = (1.0 - _348) / _346;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_346 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _348) / _346;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _362 = frontier_phi_7_6_ladder;
    }
    float _366 = (_342 > 0.0) ? (cbMtdParam._m0[16u].x / _342) : 5000.0;
    float _367 = isnan(_362) ? _354 : (isnan(_354) ? _362 : min(_354, _362));
    float _368 = isnan(_366) ? _367 : (isnan(_367) ? _366 : min(_367, _366));
    float _372 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _379 = ((_368 * _342) + _372) / _372;
    vec4 _404 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * ((((((_347 + (-0.5)) + (_368 * _345)) / _379) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * ((((((_348 + (-0.5)) + (_368 * _346)) / _379) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    float _414 = cbMtdParam._m0[9u].x * _404.x;
    float _415 = cbMtdParam._m0[9u].y * _404.y;
    float _416 = cbMtdParam._m0[9u].z * _404.z;
    float _2812 = isnan(0.0) ? _414 : (isnan(_414) ? 0.0 : max(_414, 0.0));
    float _2823 = isnan(0.0) ? _415 : (isnan(_415) ? 0.0 : max(_415, 0.0));
    float _2834 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _435 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _439 = inversesqrt(dot(vec3(_258, _259, _260), vec3(_258, _259, _260)));
    float _440 = _258 * _439;
    float _441 = _259 * _439;
    float _442 = _260 * _439;
    vec4 _447 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _449 = _447.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _545 = sqrt(((_258 * _258) + (_259 * _259)) + (_260 * _260));
        float _551 = (cbMatDynParam._m0[5u].x * _545) + cbMatDynParam._m0[5u].y;
        float _2845 = isnan(0.0) ? _551 : (isnan(_551) ? 0.0 : max(_551, 0.0));
        float _552 = isnan(1.0) ? _2845 : (isnan(_2845) ? 1.0 : min(_2845, 1.0));
        float _556 = (cbMatDynParam._m0[5u].z * _545) + cbMatDynParam._m0[5u].w;
        float _2856 = isnan(0.0) ? _556 : (isnan(_556) ? 0.0 : max(_556, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2856 : (isnan(_2856) ? 1.0 : min(_2856, 1.0))) - _552)) + _552) < ((_449 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _461 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _462 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _475 = uint(roundEven(NORMAL.w)) * 13u;
    uint _477 = _475 + 9u;
    uint _478 = _477 + uint(cbMatDynParam._m0[0u].w);
    float _484 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2812 : (isnan(_2812) ? 1.0 : min(_2812, 1.0)))) * cbInstanceData._m0[_478].x;
    float _485 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2823 : (isnan(_2823) ? 1.0 : min(_2823, 1.0)))) * cbInstanceData._m0[_478].y;
    float _486 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2834 : (isnan(_2834) ? 1.0 : min(_2834, 1.0)))) * cbInstanceData._m0[_478].z;
    float _2867 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _487 = isnan(1.0) ? _2867 : (isnan(_2867) ? 1.0 : min(_2867, 1.0));
    float _2878 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _488 = isnan(1.0) ? _2878 : (isnan(_2878) ? 1.0 : min(_2878, 1.0));
    float _2889 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _489 = isnan(1.0) ? _2889 : (isnan(_2889) ? 1.0 : min(_2889, 1.0));
    vec4 _498 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _461, cbSceneParam._m0[86u].y * _462));
    float _501 = _498.x * TEXCOORD_4.z;
    float _502 = (-0.0) - _440;
    float _503 = (-0.0) - _441;
    float _504 = (-0.0) - _442;
    float _526 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _530 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _534 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _830;
    float _832;
    float _833;
    float _834;
    float _835;
    float _836;
    float _837;
    float _838;
    float _839;
    float _840;
    float _841;
    float _842;
    float _843;
    float _844;
    float _845;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _618 = (cbModelParam._m0[37u].x * ((((fma(_534, cbModelParam._m0[26u].z, fma(_530, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _526)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _620 = (cbModelParam._m0[37u].y * ((((fma(_534, cbModelParam._m0[27u].z, fma(_530, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _526)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _621 = (((((fma(_534, cbModelParam._m0[28u].z, fma(_530, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _526)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _624 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_618, _620, _621), 0.0);
        vec4 _631 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_618, _620, _621), 0.0);
        vec4 _638 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_618, _620, _621), 0.0);
        vec4 _645 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_618, _620, _621), 0.0);
        float _658 = exp2((_624.w + (-0.5)) * 20.0) * 2.0;
        float _659 = _658 * (_624.x + (-0.5));
        float _660 = _658 * (_624.y + (-0.5));
        float _661 = _658 * (_624.z + (-0.5));
        float _668 = exp2((_631.w + (-0.5)) * 20.0) * 2.0;
        float _669 = _668 * (_631.x + (-0.5));
        float _670 = _668 * (_631.y + (-0.5));
        float _671 = _668 * (_631.z + (-0.5));
        float _678 = exp2((_638.w + (-0.5)) * 20.0) * 2.0;
        float _679 = _678 * (_638.x + (-0.5));
        float _680 = _678 * (_638.y + (-0.5));
        float _681 = _678 * (_638.z + (-0.5));
        float _688 = exp2((_645.w + (-0.5)) * 20.0) * 2.0;
        float _689 = _688 * (_645.x + (-0.5));
        float _690 = _688 * (_645.y + (-0.5));
        float _691 = _688 * (_645.z + (-0.5));
        float _692 = isnan(0.0) ? _689 : (isnan(_689) ? 0.0 : max(_689, 0.0));
        float _693 = isnan(0.0) ? _690 : (isnan(_690) ? 0.0 : max(_690, 0.0));
        float _694 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
        float _695 = _659 * 0.5;
        float _696 = _669 * 0.5;
        float _697 = _679 * 0.5;
        float _698 = dot(vec3(_695, _696, _697), vec3(_695, _696, _697));
        float _703 = (_698 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_698);
        float _712 = (dot(vec3(0.0), vec3(_703 * _695, _703 * _696, _703 * _697)) + 1.0) * 0.5;
        float _2915 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
        float _722 = sqrt(((_696 * _696) + (_695 * _695)) + (_697 * _697)) / (_692 + 9.9999997473787516355514526367188e-06);
        float _2926 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
        float _723 = isnan(1.0) ? _2926 : (isnan(_2926) ? 1.0 : min(_2926, 1.0));
        float _724 = _723 * 2.0;
        float _728 = (1.0 - _723) / (_723 + 1.0);
        float _2937 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
        float _729 = isnan(1.0) ? _2937 : (isnan(_2937) ? 1.0 : min(_2937, 1.0));
        float _738 = ((((1.0 - _729) * (_724 + 2.0)) * exp2(log2(isnan(1.0) ? _2915 : (isnan(_2915) ? 1.0 : min(_2915, 1.0))) * (_724 + 1.0))) + _729) * _692;
        float _739 = _660 * 0.5;
        float _740 = _670 * 0.5;
        float _741 = _680 * 0.5;
        float _742 = dot(vec3(_739, _740, _741), vec3(_739, _740, _741));
        float _747 = (_742 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_742);
        float _755 = (dot(vec3(0.0), vec3(_747 * _739, _747 * _740, _747 * _741)) + 1.0) * 0.5;
        float _2948 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
        float _764 = sqrt(((_740 * _740) + (_739 * _739)) + (_741 * _741)) / (_693 + 9.9999997473787516355514526367188e-06);
        float _2959 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _765 = isnan(1.0) ? _2959 : (isnan(_2959) ? 1.0 : min(_2959, 1.0));
        float _766 = _765 * 2.0;
        float _770 = (1.0 - _765) / (_765 + 1.0);
        float _2970 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
        float _771 = isnan(1.0) ? _2970 : (isnan(_2970) ? 1.0 : min(_2970, 1.0));
        float _780 = ((((1.0 - _771) * (_766 + 2.0)) * exp2(log2(isnan(1.0) ? _2948 : (isnan(_2948) ? 1.0 : min(_2948, 1.0))) * (_766 + 1.0))) + _771) * _693;
        float _781 = _661 * 0.5;
        float _782 = _671 * 0.5;
        float _783 = _681 * 0.5;
        float _784 = dot(vec3(_781, _782, _783), vec3(_781, _782, _783));
        float _789 = (_784 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_784);
        float _797 = (dot(vec3(0.0), vec3(_789 * _781, _789 * _782, _789 * _783)) + 1.0) * 0.5;
        float _2981 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _806 = sqrt(((_782 * _782) + (_781 * _781)) + (_783 * _783)) / (_694 + 9.9999997473787516355514526367188e-06);
        float _2992 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _807 = isnan(1.0) ? _2992 : (isnan(_2992) ? 1.0 : min(_2992, 1.0));
        float _808 = _807 * 2.0;
        float _812 = (1.0 - _807) / (_807 + 1.0);
        float _3003 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _813 = isnan(1.0) ? _3003 : (isnan(_3003) ? 1.0 : min(_3003, 1.0));
        float _822 = ((((1.0 - _813) * (_808 + 2.0)) * exp2(log2(isnan(1.0) ? _2981 : (isnan(_2981) ? 1.0 : min(_2981, 1.0))) * (_808 + 1.0))) + _813) * _694;
        _830 = _661;
        _832 = _660;
        _833 = _659;
        _834 = _671;
        _835 = _670;
        _836 = _669;
        _837 = _681;
        _838 = _680;
        _839 = _679;
        _840 = _694;
        _841 = _693;
        _842 = _692;
        _843 = cbModelParam._m0[36u].z * (isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0)));
        _844 = cbModelParam._m0[36u].z * (isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0)));
        _845 = cbModelParam._m0[36u].z * (isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0)));
    }
    else
    {
        _830 = _831;
        _832 = _831;
        _833 = _831;
        _834 = _831;
        _835 = _831;
        _836 = _831;
        _837 = _831;
        _838 = _831;
        _839 = _831;
        _840 = _831;
        _841 = _831;
        _842 = _831;
        _843 = 0.0;
        _844 = 0.0;
        _845 = 0.0;
    }
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _902 = (cbModelParam._m0[38u].x * ((((fma(_534, cbModelParam._m0[30u].z, fma(_530, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _526)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _903 = (cbModelParam._m0[38u].y * ((((fma(_534, cbModelParam._m0[31u].z, fma(_530, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _526)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _904 = (((((fma(_534, cbModelParam._m0[32u].z, fma(_530, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _526)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _906 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_902, _903, _904), 0.0);
        vec4 _913 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_902, _903, _904), 0.0);
        vec4 _920 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_902, _903, _904), 0.0);
        vec4 _927 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_902, _903, _904), 0.0);
        float _939 = exp2((_906.w + (-0.5)) * 20.0) * 2.0;
        float _940 = _939 * (_906.x + (-0.5));
        float _941 = _939 * (_906.y + (-0.5));
        float _942 = _939 * (_906.z + (-0.5));
        float _949 = exp2((_913.w + (-0.5)) * 20.0) * 2.0;
        float _950 = _949 * (_913.x + (-0.5));
        float _951 = _949 * (_913.y + (-0.5));
        float _952 = _949 * (_913.z + (-0.5));
        float _959 = exp2((_920.w + (-0.5)) * 20.0) * 2.0;
        float _960 = _959 * (_920.x + (-0.5));
        float _961 = _959 * (_920.y + (-0.5));
        float _962 = _959 * (_920.z + (-0.5));
        float _969 = exp2((_927.w + (-0.5)) * 20.0) * 2.0;
        float _970 = _969 * (_927.x + (-0.5));
        float _971 = _969 * (_927.y + (-0.5));
        float _972 = _969 * (_927.z + (-0.5));
        float _973 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _974 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _975 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _976 = _940 * 0.5;
        float _977 = _950 * 0.5;
        float _978 = _960 * 0.5;
        float _979 = dot(vec3(_976, _977, _978), vec3(_976, _977, _978));
        float _984 = (_979 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_979);
        float _992 = (dot(vec3(0.0), vec3(_984 * _976, _984 * _977, _984 * _978)) + 1.0) * 0.5;
        float _3044 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _1001 = sqrt(((_977 * _977) + (_976 * _976)) + (_978 * _978)) / (_973 + 9.9999997473787516355514526367188e-06);
        float _3055 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1002 = isnan(1.0) ? _3055 : (isnan(_3055) ? 1.0 : min(_3055, 1.0));
        float _1003 = _1002 * 2.0;
        float _1007 = (1.0 - _1002) / (_1002 + 1.0);
        float _3066 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1008 = isnan(1.0) ? _3066 : (isnan(_3066) ? 1.0 : min(_3066, 1.0));
        float _1017 = ((((1.0 - _1008) * (_1003 + 2.0)) * exp2(log2(isnan(1.0) ? _3044 : (isnan(_3044) ? 1.0 : min(_3044, 1.0))) * (_1003 + 1.0))) + _1008) * _973;
        float _1018 = _941 * 0.5;
        float _1019 = _951 * 0.5;
        float _1020 = _961 * 0.5;
        float _1021 = dot(vec3(_1018, _1019, _1020), vec3(_1018, _1019, _1020));
        float _1026 = (_1021 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1021);
        float _1034 = (dot(vec3(0.0), vec3(_1026 * _1018, _1026 * _1019, _1026 * _1020)) + 1.0) * 0.5;
        float _3077 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1043 = sqrt(((_1019 * _1019) + (_1018 * _1018)) + (_1020 * _1020)) / (_974 + 9.9999997473787516355514526367188e-06);
        float _3088 = isnan(0.0) ? _1043 : (isnan(_1043) ? 0.0 : max(_1043, 0.0));
        float _1044 = isnan(1.0) ? _3088 : (isnan(_3088) ? 1.0 : min(_3088, 1.0));
        float _1045 = _1044 * 2.0;
        float _1049 = (1.0 - _1044) / (_1044 + 1.0);
        float _3099 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _3099 : (isnan(_3099) ? 1.0 : min(_3099, 1.0));
        float _1059 = ((((1.0 - _1050) * (_1045 + 2.0)) * exp2(log2(isnan(1.0) ? _3077 : (isnan(_3077) ? 1.0 : min(_3077, 1.0))) * (_1045 + 1.0))) + _1050) * _974;
        float _1060 = _942 * 0.5;
        float _1061 = _952 * 0.5;
        float _1062 = _962 * 0.5;
        float _1063 = dot(vec3(_1060, _1061, _1062), vec3(_1060, _1061, _1062));
        float _1068 = (_1063 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1063);
        float _1076 = (dot(vec3(0.0), vec3(_1068 * _1060, _1068 * _1061, _1068 * _1062)) + 1.0) * 0.5;
        float _3110 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1085 = sqrt(((_1061 * _1061) + (_1060 * _1060)) + (_1062 * _1062)) / (_975 + 9.9999997473787516355514526367188e-06);
        float _3121 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1086 = isnan(1.0) ? _3121 : (isnan(_3121) ? 1.0 : min(_3121, 1.0));
        float _1087 = _1086 * 2.0;
        float _1091 = (1.0 - _1086) / (_1086 + 1.0);
        float _3132 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3132 : (isnan(_3132) ? 1.0 : min(_3132, 1.0));
        float _1101 = ((((1.0 - _1092) * (_1087 + 2.0)) * exp2(log2(isnan(1.0) ? _3110 : (isnan(_3110) ? 1.0 : min(_3110, 1.0))) * (_1087 + 1.0))) + _1092) * _975;
        _1109 = _942;
        _1110 = _941;
        _1111 = _940;
        _1112 = _952;
        _1113 = _951;
        _1114 = _950;
        _1115 = _962;
        _1116 = _961;
        _1117 = _960;
        _1118 = _975;
        _1119 = _974;
        _1120 = _973;
        _1121 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0)));
        _1122 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0)));
        _1123 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0)));
    }
    else
    {
        _1109 = _831;
        _1110 = _831;
        _1111 = _831;
        _1112 = _831;
        _1113 = _831;
        _1114 = _831;
        _1115 = _831;
        _1116 = _831;
        _1117 = _831;
        _1118 = _831;
        _1119 = _831;
        _1120 = _831;
        _1121 = 0.0;
        _1122 = 0.0;
        _1123 = 0.0;
    }
    float _1133 = (cbModelParam._m0[1u].x * (_1121 - _843)) + _843;
    float _1134 = (cbModelParam._m0[1u].x * (_1122 - _844)) + _844;
    float _1135 = (cbModelParam._m0[1u].x * (_1123 - _845)) + _845;
    float _1156 = fma(_1135, cbSceneParam._m0[89u].z, fma(_1134, cbSceneParam._m0[89u].y, _1133 * cbSceneParam._m0[89u].x));
    float _1159 = fma(_1135, cbSceneParam._m0[90u].z, fma(_1134, cbSceneParam._m0[90u].y, _1133 * cbSceneParam._m0[90u].x));
    float _1162 = fma(_1135, cbSceneParam._m0[91u].z, fma(_1134, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1133));
    float _1177 = _440 * (-0.5);
    float _1178 = _441 * (-0.5);
    float _1179 = _442 * (-0.5);
    float _1180 = dot(vec4(_1177, _1178, _1179, 1.0), vec4(_1111, _1114, _1117, _1120));
    float _1183 = dot(vec4(_1177, _1178, _1179, 1.0), vec4(_1110, _1113, _1116, _1119));
    float _1186 = dot(vec4(_1177, _1178, _1179, 1.0), vec4(_1109, _1112, _1115, _1118));
    float _1220;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1193 = dot(vec4(_1177, _1178, _1179, 1.0), vec4(_830, _834, _837, _840));
        float _1197 = dot(vec4(_1177, _1178, _1179, 1.0), vec4(_832, _835, _838, _841));
        float _1201 = dot(vec4(_1177, _1178, _1179, 1.0), vec4(_833, _836, _839, _842));
        float _1208 = dot(vec4(cbModelParam._m0[39u]), vec4(_1177, _1178, _1179, 1.0));
        _1220 = dot(vec3(isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0)), isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0)), isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1208) ? 0.0 : (isnan(0.0) ? _1208 : max(0.0, _1208))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1220 = 1.0;
    }
    float _1231;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1222 = dot(vec4(cbModelParam._m0[40u]), vec4(_1177, _1178, _1179, 1.0));
        _1231 = dot(vec3(isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0)), isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)), isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1222) ? 0.0 : (isnan(0.0) ? _1222 : max(0.0, _1222))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1231 = 1.0;
    }
    float _1235 = (_1231 * cbModelParam._m0[1u].x) + (_1220 * (1.0 - cbModelParam._m0[1u].x));
    float _1244 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1327;
    float _1329;
    float _1331;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1294 = fma(_534, cbModelParam._m0[13u].z, fma(_530, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _526)) + cbModelParam._m0[13u].w;
        float _1298 = fma(_534, cbModelParam._m0[14u].z, fma(_530, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _526)) + cbModelParam._m0[14u].w;
        float _1302 = fma(_534, cbModelParam._m0[15u].z, fma(_530, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _526)) + cbModelParam._m0[15u].w;
        float _1305 = fma(_504, cbModelParam._m0[13u].z, fma(_503, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _502));
        float _1308 = fma(_504, cbModelParam._m0[14u].z, fma(_503, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _502));
        float _1311 = fma(_504, cbModelParam._m0[15u].z, fma(_503, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _502));
        float _1337;
        if (_1305 > 0.0)
        {
            _1337 = abs((1.0 - _1294) / _1305);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1305 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1294 + 1.0) / _1305);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1337 = frontier_phi_25_23_ladder;
        }
        float _1660;
        if (_1308 > 0.0)
        {
            _1660 = abs((1.0 - _1298) / _1308);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1308 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1298 + 1.0) / _1308);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1660 = frontier_phi_34_30_ladder;
        }
        float _1971;
        if (_1311 > 0.0)
        {
            _1971 = abs((1.0 - _1302) / _1311);
        }
        else
        {
            float frontier_phi_48_41_ladder;
            if (_1311 < 0.0)
            {
                frontier_phi_48_41_ladder = abs((_1302 + 1.0) / _1311);
            }
            else
            {
                frontier_phi_48_41_ladder = 5000.0;
            }
            _1971 = frontier_phi_48_41_ladder;
        }
        float _1973 = isnan(_1660) ? _1337 : (isnan(_1337) ? _1660 : min(_1337, _1660));
        float _1974 = isnan(_1971) ? _1973 : (isnan(_1973) ? _1971 : min(_1973, _1971));
        float _1978 = (_1974 * _1305) + _1294;
        float _1979 = (_1974 * _1308) + _1298;
        float _1980 = (_1974 * _1311) + _1302;
        float _1981 = _1974 * 9.9999997473787516355514526367188e-05;
        float _1982 = (-1.0) - _1981;
        float _1984 = _1981 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_1980 > _1984) || ((_1980 < _1982) || ((_1979 > _1984) || ((_1979 < _1982) || ((_1978 < _1982) || (_1978 > _1984))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2119 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1980, cbModelParam._m0[9u].z, fma(_1979, cbModelParam._m0[9u].y, _1978 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1980, cbModelParam._m0[10u].z, fma(_1979, cbModelParam._m0[10u].y, _1978 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1980, cbModelParam._m0[11u].z, fma(_1979, cbModelParam._m0[11u].y, _1978 * cbModelParam._m0[11u].x))), _1244);
            frontier_phi_24_48_ladder = _2119.z * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_1 = _2119.y * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_2 = _2119.x * cbModelParam._m0[1u].y;
        }
        _1327 = frontier_phi_24_48_ladder_2;
        _1329 = frontier_phi_24_48_ladder_1;
        _1331 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1315 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_502, _503, _504), _1244);
        _1327 = _1315.x * cbModelParam._m0[1u].y;
        _1329 = _1315.y * cbModelParam._m0[1u].y;
        _1331 = _1315.z * cbModelParam._m0[1u].y;
    }
    float _1334 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1424;
    float _1426;
    float _1428;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1388 = fma(_534, cbModelParam._m0[21u].z, fma(_530, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _526)) + cbModelParam._m0[21u].w;
        float _1392 = fma(_534, cbModelParam._m0[22u].z, fma(_530, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _526)) + cbModelParam._m0[22u].w;
        float _1396 = fma(_534, cbModelParam._m0[23u].z, fma(_530, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _526)) + cbModelParam._m0[23u].w;
        float _1399 = fma(_504, cbModelParam._m0[21u].z, fma(_503, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _502));
        float _1402 = fma(_504, cbModelParam._m0[22u].z, fma(_503, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _502));
        float _1405 = fma(_504, cbModelParam._m0[23u].z, fma(_503, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _502));
        float _1665;
        if (_1399 > 0.0)
        {
            _1665 = abs((1.0 - _1388) / _1399);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1399 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1388 + 1.0) / _1399);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1665 = frontier_phi_36_32_ladder;
        }
        float _1997;
        if (_1402 > 0.0)
        {
            _1997 = abs((1.0 - _1392) / _1402);
        }
        else
        {
            float frontier_phi_50_43_ladder;
            if (_1402 < 0.0)
            {
                frontier_phi_50_43_ladder = abs((_1392 + 1.0) / _1402);
            }
            else
            {
                frontier_phi_50_43_ladder = 5000.0;
            }
            _1997 = frontier_phi_50_43_ladder;
        }
        float _2184;
        if (_1405 > 0.0)
        {
            _2184 = abs((1.0 - _1396) / _1405);
        }
        else
        {
            float frontier_phi_68_61_ladder;
            if (_1405 < 0.0)
            {
                frontier_phi_68_61_ladder = abs((_1396 + 1.0) / _1405);
            }
            else
            {
                frontier_phi_68_61_ladder = 5000.0;
            }
            _2184 = frontier_phi_68_61_ladder;
        }
        float _2186 = isnan(_1997) ? _1665 : (isnan(_1665) ? _1997 : min(_1665, _1997));
        float _2187 = isnan(_2184) ? _2186 : (isnan(_2186) ? _2184 : min(_2186, _2184));
        float _2191 = (_2187 * _1399) + _1388;
        float _2192 = (_2187 * _1402) + _1392;
        float _2193 = (_2187 * _1405) + _1396;
        float _2194 = _2187 * 9.9999997473787516355514526367188e-05;
        float _2195 = (-1.0) - _2194;
        float _2197 = _2194 + 1.0;
        float frontier_phi_33_68_ladder;
        float frontier_phi_33_68_ladder_1;
        float frontier_phi_33_68_ladder_2;
        if ((_2193 > _2197) || ((_2193 < _2195) || ((_2192 > _2197) || ((_2192 < _2195) || ((_2191 < _2195) || (_2191 > _2197))))))
        {
            frontier_phi_33_68_ladder = 0.0;
            frontier_phi_33_68_ladder_1 = 0.0;
            frontier_phi_33_68_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2385 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2193, cbModelParam._m0[17u].z, fma(_2192, cbModelParam._m0[17u].y, _2191 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2193, cbModelParam._m0[18u].z, fma(_2192, cbModelParam._m0[18u].y, _2191 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2193, cbModelParam._m0[19u].z, fma(_2192, cbModelParam._m0[19u].y, _2191 * cbModelParam._m0[19u].x))), _1334);
            frontier_phi_33_68_ladder = _2385.y * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_1 = _2385.z * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_2 = _2385.x * cbModelParam._m0[1u].z;
        }
        _1424 = frontier_phi_33_68_ladder_2;
        _1426 = frontier_phi_33_68_ladder;
        _1428 = frontier_phi_33_68_ladder_1;
    }
    else
    {
        vec4 _1408 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_502, _503, _504), _1334);
        _1424 = _1408.x * cbModelParam._m0[1u].z;
        _1426 = _1408.y * cbModelParam._m0[1u].z;
        _1428 = _1408.z * cbModelParam._m0[1u].z;
    }
    float _1440 = _501 * 0.01200000010430812835693359375;
    float _1442 = _1440 * ((cbModelParam._m0[1u].w * (_1424 - _1327)) + _1327);
    float _1443 = _1440 * ((cbModelParam._m0[1u].w * (_1426 - _1329)) + _1329);
    float _1444 = _1440 * ((cbModelParam._m0[1u].w * (_1428 - _1331)) + _1331);
    float _1447 = fma(_1444, cbSceneParam._m0[89u].z, fma(_1443, cbSceneParam._m0[89u].y, _1442 * cbSceneParam._m0[89u].x));
    float _1450 = fma(_1444, cbSceneParam._m0[90u].z, fma(_1443, cbSceneParam._m0[90u].y, _1442 * cbSceneParam._m0[90u].x));
    float _1453 = fma(_1444, cbSceneParam._m0[91u].z, fma(_1443, cbSceneParam._m0[91u].y, _1442 * cbSceneParam._m0[91u].x));
    vec4 _1461 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_461, _462));
    float _1463 = _1461.w;
    float _1476 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1463);
    float _1477 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1463);
    float _1478 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1463);
    uvec4 _1482 = floatBitsToUint(cbInstanceData._m0[_475 + 5u]);
    uint _1484 = _1482.x * 14u;
    uint _1485 = _1484 + 13u;
    float _1490 = _501 + (-1.0);
    float _1493 = (cbLight._m0[_1485].x * _1490) + 1.0;
    float _1494 = (cbLight._m0[_1485].y * _1490) + 1.0;
    uint _1495 = _1484 + 5u;
    float _1501 = isnan(1.0) ? _1494 : (isnan(_1494) ? 1.0 : min(_1494, 1.0));
    uint _1505 = _1484 + 4u;
    float _1515 = isnan(1.0) ? _1493 : (isnan(_1493) ? 1.0 : min(_1493, 1.0));
    uint _1519 = _1484 | 1u;
    float _1530 = dot(vec3(cbLight._m0[_1484].xyz), vec3(0.0));
    float _1533 = dot(vec3(cbLight._m0[_1519].xyz), vec3(0.0));
    float _3268 = isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0));
    float _3279 = isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0));
    float _1538 = (isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0))) * 0.3183098733425140380859375;
    float _1540 = (isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0))) * 0.3183098733425140380859375;
    float _1547 = ((cbLight._m0[_1495].x * _1501) * _1540) + (((cbLight._m0[_1505].x * _1476) * _1515) * _1538);
    float _1548 = ((_1501 * cbLight._m0[_1495].y) * _1540) + (((cbLight._m0[_1505].y * _1477) * _1515) * _1538);
    float _1549 = ((_1501 * cbLight._m0[_1495].z) * _1540) + (((cbLight._m0[_1505].z * _1478) * _1515) * _1538);
    uint _1550 = _1484 + 8u;
    float _1556 = cbLight._m0[_1484].x + _440;
    float _1557 = cbLight._m0[_1484].y + _441;
    float _1558 = cbLight._m0[_1484].z + _442;
    float _1562 = inversesqrt(dot(vec3(_1556, _1557, _1558), vec3(_1556, _1557, _1558)));
    float _1566 = dot(vec3(0.0), vec3(cbLight._m0[_1484].xyz));
    float _3290 = isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0));
    float _1569 = isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0));
    float _1570 = dot(vec3(0.0), vec3(_440, _441, _442));
    float _3301 = isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0));
    float _1573 = isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0));
    float _1574 = dot(vec3(cbLight._m0[_1484].xyz), vec3(_1556 * _1562, _1557 * _1562, _1558 * _1562));
    float _3312 = isnan(0.0) ? _1574 : (isnan(_1574) ? 0.0 : max(_1574, 0.0));
    float _1585 = (exp2(log2(1.0 - (isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1591 = (0.5 / ((_1569 + 9.9999999392252902907785028219223e-09) + _1573)) * _1569;
    float _3323 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
    float _1593 = (isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0))) * 0.31831014156341552734375;
    uint _1607 = _1484 + 9u;
    float _1613 = cbLight._m0[_1519].x + _440;
    float _1614 = cbLight._m0[_1519].y + _441;
    float _1615 = cbLight._m0[_1519].z + _442;
    float _1619 = inversesqrt(dot(vec3(_1613, _1614, _1615), vec3(_1613, _1614, _1615)));
    float _1623 = dot(vec3(0.0), vec3(cbLight._m0[_1519].xyz));
    float _3334 = isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0));
    float _1626 = isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0));
    float _1627 = dot(vec3(cbLight._m0[_1519].xyz), vec3(_1613 * _1619, _1614 * _1619, _1615 * _1619));
    float _3345 = isnan(0.0) ? _1627 : (isnan(_1627) ? 0.0 : max(_1627, 0.0));
    float _1636 = (exp2(log2(1.0 - (isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1640 = (0.5 / ((_1626 + 9.9999999392252902907785028219223e-09) + _1573)) * _1626;
    float _3356 = isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0));
    float _1642 = (isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0))) * 0.31831014156341552734375;
    float _1652 = (((_1636 * cbLight._m0[_1607].x) * _1642) * _1501) + ((((cbLight._m0[_1550].x * _1476) * _1585) * _1593) * _1515);
    float _1653 = (((_1636 * cbLight._m0[_1607].y) * _1642) * _1501) + ((((cbLight._m0[_1550].y * _1477) * _1585) * _1593) * _1515);
    float _1654 = (((_1636 * cbLight._m0[_1607].z) * _1642) * _1501) + ((((cbLight._m0[_1550].z * _1478) * _1585) * _1593) * _1515);
    float _1770;
    float _1772;
    float _1774;
    float _1776;
    float _1778;
    float _1780;
    if (_1482.y == 0u)
    {
        float _1710 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1711 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1710;
        float _1712 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1710;
        float _1713 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1710;
        uvec4 _1725 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1726 = _1725.x;
        uint _1737 = uint((float(_1725.y) * floor(float(uint(cbSceneParam._m0[85u].y * _462) / _1726))) + floor(float(uint(cbSceneParam._m0[85u].x * _461) / _1726)));
        float _1747 = (log2(_1713 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1748 = isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0));
        uint _1751 = uint(isnan(14.0) ? _1748 : (isnan(_1748) ? 14.0 : min(_1748, 14.0)));
        uvec4 _1756 = texelFetch(g_lightClusterGridBuffer, int(((_1751 << 2u) + (_1737 << 6u)) >> 2u));
        uint _1757 = _1756.x;
        uint _1758 = _1725.z;
        float _1848;
        float _1850;
        float _1852;
        float _1854;
        float _1856;
        float _1858;
        if (((((1u << ((_1758 >> 4u) & 15u)) + 4294967295u) & _1757) == 0u) || ((_1758 & 240u) == 0u))
        {
            _1848 = 0.0;
            _1850 = 0.0;
            _1852 = 0.0;
            _1854 = 0.0;
            _1856 = 0.0;
            _1858 = 0.0;
        }
        else
        {
            float _1849;
            float _1851;
            float _1853;
            float _1855;
            float _1857;
            float _1859;
            float _2031 = 0.0;
            float _2032 = 0.0;
            float _2033 = 0.0;
            float _2034 = 0.0;
            float _2035 = 0.0;
            float _2036 = 0.0;
            uint _2037 = 0u;
            uint _2046;
            bool _2047;
            for (;;)
            {
                _2046 = texelFetch(g_lightClassification, int((((_1751 << 5u) + (_1737 << 9u)) + (_2037 << 2u)) >> 2u)).x;
                _2047 = _2046 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2047)
                {
                    frontier_phi_63_pred = _2033;
                    frontier_phi_63_pred_1 = _2036;
                    frontier_phi_63_pred_2 = _2035;
                    frontier_phi_63_pred_3 = _2034;
                    frontier_phi_63_pred_4 = _2032;
                    frontier_phi_63_pred_5 = _2031;
                }
                else
                {
                    float _2227;
                    float _2228;
                    float _2229;
                    float _2230;
                    float _2231;
                    float _2232;
                    uint _2233;
                    _2227 = _2031;
                    _2228 = _2032;
                    _2229 = _2033;
                    _2230 = _2034;
                    _2231 = _2035;
                    _2232 = _2036;
                    _2233 = _2046;
                    float _2128;
                    float _2129;
                    float _2130;
                    float _2131;
                    float _2132;
                    float _2133;
                    for (;;)
                    {
                        uint _2237 = uint(findLSB(_2233)) + (_2037 << 5u);
                        uint _2234 = (_2233 + 4294967295u) & _2233;
                        uint _2239 = _2237 * 48u;
                        vec4 _2253 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2239)).x, texelFetch(g_PointLightRenderingBuffer, int(_2239 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2239 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2239 + 3u)).x));
                        uint _2259 = (_2237 * 48u) + 4u;
                        vec4 _2272 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2259)).x, texelFetch(g_PointLightRenderingBuffer, int(_2259 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2259 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2259 + 3u)).x));
                        uint _2278 = (_2237 * 48u) + 8u;
                        vec3 _2289 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2278)).x, texelFetch(g_PointLightRenderingBuffer, int(_2278 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2278 + 2u)).x));
                        float _2293 = _2253.x - _1711;
                        float _2294 = _2253.y - _1712;
                        float _2295 = _2253.z - _1713;
                        float _2296 = dot(vec3(_2293, _2294, _2295), vec3(_2293, _2294, _2295));
                        float _2299 = inversesqrt(_2296);
                        float _2308 = 1.0 - (_2296 * _2253.w);
                        float _3377 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0));
                        float _2309 = isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0));
                        float _2310 = sqrt(_2296) * _2272.w;
                        float _2313 = 1.39999997615814208984375 / (_2310 + 1.39999997615814208984375);
                        float _2314 = _2313 * _2313;
                        float _2317 = ((1.0 - _2314) * dot(vec3(0.0), vec3(_2299 * _2293, _2299 * _2294, _2299 * _2295))) + _2314;
                        float _2320 = _2310 * _2310;
                        float _2324 = ((isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0))) * _2309) / ((_2320 * 0.699999988079071044921875) + 1.0);
                        float _2328 = (-0.0) - _1711;
                        float _2329 = (-0.0) - _1712;
                        float _2330 = (-0.0) - _1713;
                        float _2334 = inversesqrt(dot(vec3(_2328, _2329, _2330), vec3(_2328, _2329, _2330)));
                        float _2338 = dot(vec3(0.0), vec3(_2334 * _2328, _2334 * _2329, _2334 * _2330));
                        float _3393 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
                        float _3404 = isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0));
                        float _2342 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
                        float _2346 = (0.5 / (((isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0))) + 9.9999999392252902907785028219223e-09) + _2342)) * _2342;
                        float _3415 = isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0));
                        float _2355 = (((isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0))) * 3.1415927410125732421875) / ((_2320 * 2.1991131305694580078125) + 3.141590118408203125)) * _2309;
                        _2131 = (_2324 * _2272.x) + _2230;
                        _2132 = (_2324 * _2272.y) + _2231;
                        _2133 = (_2324 * _2272.z) + _2232;
                        _2128 = (_2355 * _2289.x) + _2227;
                        _2129 = (_2355 * _2289.y) + _2228;
                        _2130 = (_2355 * _2289.z) + _2229;
                        if (_2234 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2227 = _2128;
                            _2228 = _2129;
                            _2229 = _2130;
                            _2230 = _2131;
                            _2231 = _2132;
                            _2232 = _2133;
                            _2233 = _2234;
                        }
                    }
                    frontier_phi_63_pred = _2130;
                    frontier_phi_63_pred_1 = _2133;
                    frontier_phi_63_pred_2 = _2132;
                    frontier_phi_63_pred_3 = _2131;
                    frontier_phi_63_pred_4 = _2129;
                    frontier_phi_63_pred_5 = _2128;
                }
                _1853 = frontier_phi_63_pred;
                _1859 = frontier_phi_63_pred_1;
                _1857 = frontier_phi_63_pred_2;
                _1855 = frontier_phi_63_pred_3;
                _1851 = frontier_phi_63_pred_4;
                _1849 = frontier_phi_63_pred_5;
                uint _2038 = _2037 + 1u;
                if (_2038 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2031 = _1849;
                    _2032 = _1851;
                    _2033 = _1853;
                    _2034 = _1855;
                    _2035 = _1857;
                    _2036 = _1859;
                    _2037 = _2038;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1848 = _1849;
            _1850 = _1851;
            _1852 = _1853;
            _1854 = _1855;
            _1856 = _1857;
            _1858 = _1859;
        }
        uvec4 _1862 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1863 = _1862.z;
        uint _1865 = (_1863 >> 8u) & 15u;
        float _2002;
        float _2004;
        float _2006;
        float _2008;
        float _2010;
        float _2012;
        if (((4294967295u << _1865) & _1757) == 0u)
        {
            _2002 = _1848;
            _2004 = _1850;
            _2006 = _1852;
            _2008 = _1854;
            _2010 = _1856;
            _2012 = _1858;
        }
        else
        {
            float _2027 = inversesqrt(dot(vec3(_1711, _1712, _1713), vec3(_1711, _1712, _1713)));
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            float frontier_phi_52_53_ladder_3;
            float frontier_phi_52_53_ladder_4;
            float frontier_phi_52_53_ladder_5;
            if (_1865 < ((_1863 >> 12u) & 15u))
            {
                float _2003;
                float _2005;
                float _2007;
                float _2009;
                float _2011;
                float _2013;
                float _2210 = _1848;
                float _2211 = _1850;
                float _2212 = _1852;
                float _2213 = _1854;
                float _2214 = _1856;
                float _2215 = _1858;
                uint _2216 = _1865;
                uint _2225;
                bool _2226;
                for (;;)
                {
                    _2225 = texelFetch(g_lightClassification, int((((_1751 << 5u) + (_1737 << 9u)) + (_2216 << 2u)) >> 2u)).x;
                    _2226 = _2225 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2226)
                    {
                        frontier_phi_77_pred = _2215;
                        frontier_phi_77_pred_1 = _2214;
                        frontier_phi_77_pred_2 = _2213;
                        frontier_phi_77_pred_3 = _2212;
                        frontier_phi_77_pred_4 = _2211;
                        frontier_phi_77_pred_5 = _2210;
                    }
                    else
                    {
                        float _2390;
                        float _2391;
                        float _2392;
                        float _2393;
                        float _2394;
                        float _2395;
                        float _2639;
                        float _2640;
                        float _2641;
                        float _2642;
                        float _2643;
                        float _2644;
                        float _2403 = _2210;
                        float _2404 = _2211;
                        float _2405 = _2212;
                        float _2406 = _2213;
                        float _2407 = _2214;
                        float _2408 = _2215;
                        uint _2409 = _2225;
                        uint _2410;
                        vec4 _2435;
                        float _2436;
                        vec4 _2451;
                        vec3 _2463;
                        vec4 _2478;
                        vec4 _2493;
                        float _2539;
                        bool _2540;
                        for (;;)
                        {
                            uint _2420 = ((_2216 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2409));
                            _2410 = (_2409 + 4294967295u) & _2409;
                            uint _2422 = _2420 * 40u;
                            _2435 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2422)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2422 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2422 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2422 + 3u)).x));
                            _2436 = _2435.w;
                            uint _2438 = (_2420 * 40u) + 4u;
                            _2451 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2438)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2438 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2438 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2438 + 3u)).x));
                            uint _2453 = (_2420 * 40u) + 8u;
                            _2463 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2453)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2453 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2453 + 2u)).x));
                            uint _2465 = (_2420 * 40u) + 16u;
                            _2478 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2465)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2465 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2465 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2465 + 3u)).x));
                            uint _2480 = (_2420 * 40u) + 20u;
                            _2493 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2480)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2480 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2480 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2480 + 3u)).x));
                            uint _2495 = (_2420 * 40u) + 24u;
                            vec4 _2508 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2495)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2495 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2495 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2495 + 3u)).x));
                            uint _2514 = (_2420 * 40u) + 28u;
                            vec4 _2527 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2514)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2514 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2514 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2514 + 3u)).x));
                            _2539 = fma(_1713, _2527.z, fma(_1712, _2527.y, _2527.x * _1711)) + _2527.w;
                            _2540 = !((fma(_1713, _2508.z, fma(_1712, _2508.y, _2508.x * _1711)) + _2508.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2540)
                            {
                                float _2567 = _2435.x - _1711;
                                float _2568 = _2435.y - _1712;
                                float _2569 = _2435.z - _1713;
                                float _2570 = dot(vec3(_2567, _2568, _2569), vec3(_2567, _2568, _2569));
                                float _2573 = inversesqrt(_2570);
                                float _2574 = _2573 * _2567;
                                float _2575 = _2573 * _2568;
                                float _2576 = _2573 * _2569;
                                float _2580 = 1.0 - (_2570 / (_2436 * _2436));
                                float _3426 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
                                float _2581 = isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0));
                                float _2585 = sqrt(_2570) * _2451.w;
                                float _2587 = 1.39999997615814208984375 / (_2585 + 1.39999997615814208984375);
                                float _2588 = _2587 * _2587;
                                float _2589 = 1.0 - _2588;
                                float _2591 = (_2589 * dot(vec3(_2574, _2575, _2576), vec3(0.0))) + _2588;
                                float _2594 = _2585 * _2585;
                                float _2598 = (fma(_1713, _2478.z, fma(_1712, _2478.y, _2478.x * _1711)) + _2478.w) / _2539;
                                float _2599 = (fma(_1713, _2493.z, fma(_1712, _2493.y, _2493.x * _1711)) + _2493.w) / _2539;
                                float _2603 = 1.0 - dot(vec2(_2598, _2599), vec2(_2598, _2599));
                                float _3442 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
                                float _2604 = isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0));
                                float _2605 = _2604 * (((isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0))) * _2581) / ((_2594 * 0.699999988079071044921875) + 1.0));
                                float _2615 = dot(vec3(0.0), vec3((-0.0) - (_1711 * _2027), (-0.0) - (_1712 * _2027), (-0.0) - (_1713 * _2027)));
                                float _3453 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
                                float _2623 = (_2589 * dot(vec3(0.0), vec3(_2574, _2575, _2576))) + _2588;
                                float _3464 = isnan(0.0) ? _2623 : (isnan(_2623) ? 0.0 : max(_2623, 0.0));
                                float _2624 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
                                float _2628 = (0.5 / (((isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0))) + 9.9999999392252902907785028219223e-09) + _2624)) * _2624;
                                float _3475 = isnan(0.0) ? _2628 : (isnan(_2628) ? 0.0 : max(_2628, 0.0));
                                float _2635 = (_2604 * _2581) * (((isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0))) * 3.1415927410125732421875) / ((_2594 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_83_pred = _2605 * _2451.x;
                                frontier_phi_83_pred_1 = _2605 * _2451.z;
                                frontier_phi_83_pred_2 = _2605 * _2451.y;
                                frontier_phi_83_pred_3 = _2635 * _2463.z;
                                frontier_phi_83_pred_4 = _2635 * _2463.y;
                                frontier_phi_83_pred_5 = _2635 * _2463.x;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _2642 = frontier_phi_83_pred;
                            _2644 = frontier_phi_83_pred_1;
                            _2643 = frontier_phi_83_pred_2;
                            _2641 = frontier_phi_83_pred_3;
                            _2640 = frontier_phi_83_pred_4;
                            _2639 = frontier_phi_83_pred_5;
                            _2393 = _2642 + _2406;
                            _2394 = _2643 + _2407;
                            _2395 = _2644 + _2408;
                            _2390 = _2639 + _2403;
                            _2391 = _2640 + _2404;
                            _2392 = _2641 + _2405;
                            if (_2410 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2403 = _2390;
                                _2404 = _2391;
                                _2405 = _2392;
                                _2406 = _2393;
                                _2407 = _2394;
                                _2408 = _2395;
                                _2409 = _2410;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2395;
                        frontier_phi_77_pred_1 = _2394;
                        frontier_phi_77_pred_2 = _2393;
                        frontier_phi_77_pred_3 = _2392;
                        frontier_phi_77_pred_4 = _2391;
                        frontier_phi_77_pred_5 = _2390;
                    }
                    _2013 = frontier_phi_77_pred;
                    _2011 = frontier_phi_77_pred_1;
                    _2009 = frontier_phi_77_pred_2;
                    _2007 = frontier_phi_77_pred_3;
                    _2005 = frontier_phi_77_pred_4;
                    _2003 = frontier_phi_77_pred_5;
                    uint _2217 = _2216 + 1u;
                    if (_2217 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2210 = _2003;
                        _2211 = _2005;
                        _2212 = _2007;
                        _2213 = _2009;
                        _2214 = _2011;
                        _2215 = _2013;
                        _2216 = _2217;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _2005;
                frontier_phi_52_53_ladder_1 = _2013;
                frontier_phi_52_53_ladder_2 = _2011;
                frontier_phi_52_53_ladder_3 = _2009;
                frontier_phi_52_53_ladder_4 = _2007;
                frontier_phi_52_53_ladder_5 = _2003;
            }
            else
            {
                frontier_phi_52_53_ladder = _1850;
                frontier_phi_52_53_ladder_1 = _1858;
                frontier_phi_52_53_ladder_2 = _1856;
                frontier_phi_52_53_ladder_3 = _1854;
                frontier_phi_52_53_ladder_4 = _1852;
                frontier_phi_52_53_ladder_5 = _1848;
            }
            _2002 = frontier_phi_52_53_ladder_5;
            _2004 = frontier_phi_52_53_ladder;
            _2006 = frontier_phi_52_53_ladder_4;
            _2008 = frontier_phi_52_53_ladder_3;
            _2010 = frontier_phi_52_53_ladder_2;
            _2012 = frontier_phi_52_53_ladder_1;
        }
        float _2017 = isnan(1.0) ? _501 : (isnan(_501) ? 1.0 : min(_501, 1.0));
        _1770 = (_2017 * _2008) + _1547;
        _1772 = (_2017 * _2010) + _1548;
        _1774 = (_2017 * _2012) + _1549;
        _1776 = ((_2002 * 0.039999999105930328369140625) * _2017) + _1652;
        _1778 = ((_2004 * 0.039999999105930328369140625) * _2017) + _1653;
        _1780 = ((_2006 * 0.039999999105930328369140625) * _2017) + _1654;
    }
    else
    {
        _1770 = _1547;
        _1772 = _1548;
        _1774 = _1549;
        _1776 = _1652;
        _1778 = _1653;
        _1780 = _1654;
    }
    float _3491 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _3502 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _3513 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _1797 = ((isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0))) * (_1770 + ((isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0))) * _501))) + ((_1776 + ((isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0))) * _1235)) * cbPerFrame._m0[3u].x);
    float _1798 = ((isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0))) * (_1772 + ((isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0))) * _501))) + ((_1778 + ((isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0))) * _1235)) * cbPerFrame._m0[3u].x);
    float _1799 = ((isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0))) * (_1774 + ((isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0))) * _501))) + ((_1780 + ((isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0))) * _1235)) * cbPerFrame._m0[3u].x);
    float _1800 = isnan(0.0) ? _1797 : (isnan(_1797) ? 0.0 : max(_1797, 0.0));
    float _1801 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
    float _1802 = isnan(0.0) ? _1799 : (isnan(_1799) ? 0.0 : max(_1799, 0.0));
    uint _1803 = _475 + 6u;
    float _1811 = _461 / cbSceneParam._m0[86u].x;
    float _1812 = _462 / cbSceneParam._m0[86u].y;
    vec4 _1826 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1811, _1812, (log2((isnan(cbSceneParam._m0[77u].w) ? _435 : (isnan(_435) ? cbSceneParam._m0[77u].w : min(_435, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1828 = _1826.x;
    float _1829 = _1826.y;
    float _1830 = _1826.z;
    float _1831 = _1826.w;
    float _1911;
    float _1913;
    float _1915;
    float _1917;
    if (_435 > cbSceneParam._m0[78u].w)
    {
        float _1873 = isnan(_435) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _435 : min(cbSceneParam._m0[80u].w, _435));
        float _1874 = _1873 / _435;
        float _1885 = _1874 * _258;
        float _1886 = _259 * _1874;
        float _1887 = (-0.0) - _1886;
        float _1888 = _1874 * _260;
        float _1890 = (cbSceneParam._m0[77u].w * _1887) / _1873;
        float _1891 = _1890 + cbSceneParam._m0[79u].w;
        float _1892 = cbSceneParam._m0[79u].w - _1886;
        float _1898 = sqrt(((_1885 * _1885) + (_1886 * _1886)) + (_1888 * _1888));
        float _1901 = (1.0 - (cbSceneParam._m0[77u].w / _1873)) * _1898;
        float _1907 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1909 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2141;
        if (abs((_1887 - _1890) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2141 = ((((_1891 > 0.0) ? exp2(_1907 * _1891) : (2.0 - exp2(_1909 * _1891))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1901;
        }
        else
        {
            float _2060 = 1.0 / cbSceneParam._m0[80u].x;
            float _2061 = isnan(_1892) ? _1891 : (isnan(_1891) ? _1892 : max(_1891, _1892));
            float _2062 = isnan(_1892) ? _1891 : (isnan(_1891) ? _1892 : min(_1891, _1892));
            float _2071 = isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : min(_2061, 0.0));
            float _2072 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : min(_2062, 0.0));
            _2141 = ((abs(_1898 / _1887) * cbSceneParam._m0[80u].y) * ((((_2071 - _2072) * 2.0) - ((exp2(_1907 * (isnan(0.0) ? _2061 : (isnan(_2061) ? 0.0 : max(_2061, 0.0)))) - exp2(_1907 * (isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0))))) * _2060)) - ((exp2(_1909 * _2071) - exp2(_1909 * _2072)) * _2060))) + (_1901 * cbSceneParam._m0[80u].z);
        }
        vec4 _2143 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1811, _1812, 1.0), 0.0);
        float _2152 = exp2((_2141 * (-1.44269502162933349609375)) * (1.0 - _2143.w));
        float _2153 = log2(_2152);
        float _2169 = log2(_1831);
        _1911 = (exp2(_2169 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2153 * cbSceneParam._m0[78u].x)) * _2143.x) / cbSceneParam._m0[78u].x)) + _1828;
        _1913 = (exp2(_2169 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2153 * cbSceneParam._m0[78u].y)) * _2143.y) / cbSceneParam._m0[78u].y)) + _1829;
        _1915 = (exp2(_2169 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2153 * cbSceneParam._m0[78u].z)) * _2143.z) / cbSceneParam._m0[78u].z)) + _1830;
        _1917 = _2152 * _1831;
    }
    else
    {
        _1911 = _1828;
        _1913 = _1829;
        _1915 = _1830;
        _1917 = _1831;
    }
    bool _2179;
    vec4 _1927;
    vec4 _1950;
    float _1952;
    float _1956;
    float _1957;
    float _1958;
    float _1959;
    bool _1970;
    for (;;)
    {
        _1927 = cbMatDynParam._m0[0u];
        float _1929 = roundEven(_1927.y);
        bool _1930 = _1929 == 3.0;
        float _1932 = log2(_1917);
        float _1939 = exp2(_1932 * cbSceneParam._m0[78u].x) * _1800;
        float _1940 = exp2(_1932 * cbSceneParam._m0[78u].y) * _1801;
        float _1941 = exp2(_1932 * cbSceneParam._m0[78u].z) * _1802;
        float _1948 = _449 + (-0.5);
        _1950 = cbMtdParam._m0[1u];
        _1952 = _1950.y * _1948;
        float _1955 = (_1929 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _1956 = _1955 * (_1930 ? _1939 : (_1939 + (cbSceneParam._m0[72u].w * _1911)));
        _1957 = _1955 * (_1930 ? _1940 : (_1940 + (cbSceneParam._m0[72u].w * _1913)));
        _1958 = _1955 * (_1930 ? _1941 : (_1941 + (cbSceneParam._m0[72u].w * _1915)));
        _1959 = _1948 * 0.999000012874603271484375;
        _1970 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_1970)
        {
            if ((cbInstanceData._m0[_475 + 7u].x + _1959) < 0.5)
            {
                _2179 = true;
                break;
            }
        }
        uint _2095 = _477 + uint(_1927.w);
        if ((cbInstanceData._m0[_2095].w < 1.0) && ((cbInstanceData._m0[_2095].w + _1959) < 0.5))
        {
            _2179 = true;
            break;
        }
        if ((_1952 + 1.0) < _1950.x)
        {
            _2179 = true;
            break;
        }
        _2179 = false;
        break;
    }
    float _2360;
    if (_2179)
    {
        discard_state = true;
        _2360 = 0.0;
    }
    else
    {
        _2360 = cbInstanceData._m0[_1803].w;
    }
    SV_Target.x = _1956;
    SV_Target.y = _1957;
    SV_Target.z = _1958;
    SV_Target.w = _2360;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1803].w;
    discard_exit();
}


