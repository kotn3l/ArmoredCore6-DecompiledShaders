#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_8;
layout(set = 0, binding = 11) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1317;
float _3500;
float _3501;
float _3502;
float _3503;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _203 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _204 = _203 * _196;
    float _205 = _203 * _197;
    float _206 = _203 * _198;
    float _210 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _211 = _210 * NORMAL.x;
    float _212 = _210 * NORMAL.y;
    float _213 = _210 * NORMAL.z;
    float _217 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _218 = _217 * TANGENT.x;
    float _219 = _217 * TANGENT.y;
    float _220 = _217 * TANGENT.z;
    float _265 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _275 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _265);
    float _276 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _265);
    float _277 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _265);
    vec4 _290 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _293 = _290.x;
    vec4 _311 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _328 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _293) + cbMtdParam._m0[12u].x) * _311.x;
    float _330 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _293) + cbMtdParam._m0[12u].y) * _311.y;
    float _332 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _293) + cbMtdParam._m0[12u].z) * _311.z;
    vec4 _350 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _386 = cbMtdParam._m0[24u].x + _275;
    float _387 = cbMtdParam._m0[24u].y + _276;
    float _388 = cbMtdParam._m0[24u].z + _277;
    float _402 = (-0.0) - dot(vec3(_386, _387, _388), vec3(_204, _205, _206));
    float _403 = (-0.0) - dot(vec3(_386, _387, _388), vec3(_218, _219, _220));
    float _404 = (-0.0) - dot(vec3(_386, _387, _388), vec3((-0.0) - _211, (-0.0) - _212, (-0.0) - _213));
    float _408 = inversesqrt(dot(vec3(_402, _403, _404), vec3(_402, _403, _404)));
    float _411 = _408 * _404;
    float _412 = (_408 * _402) + ((cbMtdParam._m0[22u].x * _293) * ((_350.x * 2.0) + (-1.0)));
    float _413 = (_408 * _403) + ((cbMtdParam._m0[22u].y * _293) * ((_350.y * 2.0) + (-1.0)));
    float _414 = _412 * cbMtdParam._m0[20u].w;
    float _415 = _413 * cbMtdParam._m0[20u].z;
    float _416 = fract(TEXCOORD.x);
    float _417 = fract(TEXCOORD.y);
    float _423;
    if (_414 > 0.0)
    {
        _423 = (1.0 - _416) / _414;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_414 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _416) / _414;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _423 = frontier_phi_3_2_ladder;
    }
    float _431;
    if (_415 > 0.0)
    {
        _431 = (1.0 - _417) / _415;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_415 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _417) / _415;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _431 = frontier_phi_7_6_ladder;
    }
    bool _433 = _411 > 0.0;
    float _435 = _433 ? (cbMtdParam._m0[16u].x / _411) : 5000.0;
    float _436 = isnan(_431) ? _423 : (isnan(_423) ? _431 : min(_423, _431));
    float _437 = isnan(_435) ? _436 : (isnan(_436) ? _435 : min(_436, _435));
    float _441 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _442 = _416 + (-0.5);
    float _445 = _417 + (-0.5);
    float _448 = ((_437 * _411) + _441) / _441;
    vec4 _473 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (((((_442 + (_437 * _414)) / _448) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (((((_445 + (_437 * _415)) / _448) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    float _486 = (_473.x * _293) * cbMtdParam._m0[9u].x;
    float _487 = (_473.y * _293) * cbMtdParam._m0[9u].y;
    float _488 = (_473.z * _293) * cbMtdParam._m0[9u].z;
    float _507 = _412 * cbMtdParam._m0[22u].w;
    float _508 = _413 * cbMtdParam._m0[22u].z;
    bool _509 = _507 > 0.0;
    float _514;
    if (_509)
    {
        _514 = (1.0 - _416) / _507;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_507 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _416) / _507;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _514 = frontier_phi_11_10_ladder;
    }
    bool _516 = _508 > 0.0;
    float _521;
    if (_516)
    {
        _521 = (1.0 - _417) / _508;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_508 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _417) / _508;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _521 = frontier_phi_15_14_ladder;
    }
    float _524 = _433 ? (cbMtdParam._m0[18u].x / _411) : 5000.0;
    float _525 = isnan(_521) ? _514 : (isnan(_514) ? _521 : min(_514, _521));
    float _526 = isnan(_524) ? _525 : (isnan(_525) ? _524 : min(_525, _524));
    float _530 = cbMtdParam._m0[19u].y * cbMtdParam._m0[18u].x;
    float _534 = ((_526 * _411) + _530) / _530;
    float _539 = cbMtdParam._m0[19u].x - cbMtdParam._m0[20u].x * trunc(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    float _541 = floor(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    vec4 _557 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_442 + (_526 * _507)) / _534) + 0.5) + _539) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_445 + (_526 * _508)) / _534) + 0.5) + _541) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[0u].w));
    float _572;
    if (_509)
    {
        _572 = (1.0 - _416) / _507;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_507 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _416) / _507;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _572 = frontier_phi_19_18_ladder;
    }
    float _578;
    if (_516)
    {
        _578 = (1.0 - _417) / _508;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_508 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _417) / _508;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _578 = frontier_phi_23_22_ladder;
    }
    float _580 = isnan(_578) ? _572 : (isnan(_572) ? _578 : min(_572, _578));
    float _581 = isnan(_524) ? _580 : (isnan(_580) ? _524 : min(_580, _524));
    float _588 = ((_581 * _411) + _530) / _530;
    vec4 _608 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_442 + (_581 * _507)) / _588) + 0.5) + _539) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_445 + (_581 * _508)) / _588) + 0.5) + _541) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[8u].w));
    float _610 = _608.x;
    float _620 = (((((cbMtdParam._m0[10u].x * _293) * _557.x) - _486) * _293) * _610) + _486;
    float _621 = (((((cbMtdParam._m0[10u].y * _293) * _557.y) - _487) * _293) * _610) + _487;
    float _622 = (((((cbMtdParam._m0[10u].z * _293) * _557.z) - _488) * _293) * _610) + _488;
    float _638 = _412 * cbMtdParam._m0[23u].y;
    float _639 = _413 * cbMtdParam._m0[23u].x;
    bool _640 = _638 > 0.0;
    float _645;
    if (_640)
    {
        _645 = (1.0 - _416) / _638;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_638 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _416) / _638;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _645 = frontier_phi_27_26_ladder;
    }
    bool _647 = _639 > 0.0;
    float _652;
    if (_647)
    {
        _652 = (1.0 - _417) / _639;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_639 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _417) / _639;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _652 = frontier_phi_31_30_ladder;
    }
    float _655 = _433 ? (cbMtdParam._m0[19u].w / _411) : 5000.0;
    float _656 = isnan(_652) ? _645 : (isnan(_645) ? _652 : min(_645, _652));
    float _657 = isnan(_655) ? _656 : (isnan(_656) ? _655 : min(_656, _655));
    float _661 = cbMtdParam._m0[19u].w * cbMtdParam._m0[16u].z;
    float _665 = ((_657 * _411) + _661) / _661;
    float _670 = cbMtdParam._m0[19u].z - cbMtdParam._m0[23u].z * trunc(cbMtdParam._m0[19u].z / cbMtdParam._m0[23u].z);
    float _672 = floor(cbMtdParam._m0[19u].z / cbMtdParam._m0[23u].z);
    vec4 _688 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * (((((_442 + (_657 * _638)) / _665) + 0.5) + _670) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * (((((_445 + (_657 * _639)) / _665) + 0.5) + _672) / cbMtdParam._m0[23u].w)) + cbTextureTilingScale._m0[9u].w));
    float _703;
    if (_640)
    {
        _703 = (1.0 - _416) / _638;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_638 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _416) / _638;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _703 = frontier_phi_35_34_ladder;
    }
    float _709;
    if (_647)
    {
        _709 = (1.0 - _417) / _639;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_639 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _417) / _639;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _709 = frontier_phi_39_38_ladder;
    }
    float _711 = isnan(_709) ? _703 : (isnan(_703) ? _709 : min(_703, _709));
    float _712 = isnan(_655) ? _711 : (isnan(_711) ? _655 : min(_711, _655));
    float _719 = ((_712 * _411) + _661) / _661;
    vec4 _739 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_442 + (_712 * _638)) / _719) + 0.5) + _670) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_445 + (_712 * _639)) / _719) + 0.5) + _672) / cbMtdParam._m0[23u].w)) + cbTextureTilingScale._m0[10u].w));
    float _741 = _739.x;
    float _751 = _293 * 0.1500000059604644775390625;
    float _762 = (_751 * ((_620 - _328) + (((((cbMtdParam._m0[14u].x * _293) * _688.x) - _620) * _293) * _741))) + _328;
    float _763 = (_751 * ((_621 - _330) + (((((cbMtdParam._m0[14u].y * _293) * _688.y) - _621) * _293) * _741))) + _330;
    float _764 = (_751 * ((_622 - _332) + (((((cbMtdParam._m0[14u].z * _293) * _688.z) - _622) * _293) * _741))) + _332;
    vec4 _777 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _781 = _777.z;
    float _784 = (_777.x * 2.0) + (-1.0);
    float _785 = (_777.y * 2.0) + (-1.0);
    float _786 = dot(vec2(_784, _785), vec2(_784, _785));
    float _3562 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _791 = sqrt(1.0 - (isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0))));
    float _794 = fma(_791, _211, fma(_785, _218, _784 * _204));
    float _797 = fma(_791, _212, fma(_785, _219, _784 * _205));
    float _800 = fma(_791, _213, fma(_785, _220, _784 * _206));
    float _804 = inversesqrt(dot(vec3(_794, _797, _800), vec3(_794, _797, _800)));
    float _805 = _804 * _794;
    float _806 = _804 * _797;
    float _807 = _804 * _800;
    float _3573 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
    float _808 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
    float _3584 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _3595 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
    float _3606 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _827 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _831 = inversesqrt(dot(vec3(_275, _276, _277), vec3(_275, _276, _277)));
    float _832 = _275 * _831;
    float _833 = _276 * _831;
    float _834 = _277 * _831;
    vec4 _839 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _841 = _839.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _998 = sqrt(((_275 * _275) + (_276 * _276)) + (_277 * _277));
        float _1004 = (cbMatDynParam._m0[5u].x * _998) + cbMatDynParam._m0[5u].y;
        float _3617 = isnan(0.0) ? _1004 : (isnan(_1004) ? 0.0 : max(_1004, 0.0));
        float _1005 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
        float _1009 = (cbMatDynParam._m0[5u].z * _998) + cbMatDynParam._m0[5u].w;
        float _3628 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0))) - _1005)) + _1005) < ((_841 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _853 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _854 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _873 = fma(_807, cbSceneParam._m0[5u].z, fma(_806, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _805));
    float _876 = fma(_807, cbSceneParam._m0[6u].z, fma(_806, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _805));
    float _879 = fma(_807, cbSceneParam._m0[7u].z, fma(_806, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _805));
    uint _892 = uint(roundEven(NORMAL.w)) * 13u;
    uint _894 = _892 + 9u;
    uint _895 = _894 + uint(cbMatDynParam._m0[0u].w);
    float _901 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0)))) * cbInstanceData._m0[_895].x;
    float _902 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0)))) * cbInstanceData._m0[_895].y;
    float _903 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0)))) * cbInstanceData._m0[_895].z;
    float _3639 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _904 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
    float _3650 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _905 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
    float _3661 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _906 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
    vec4 _915 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _853, cbSceneParam._m0[86u].y * _854));
    float _918 = _915.x * TEXCOORD_4.z;
    float _919 = dot(vec3(_805, _806, _807), vec3(_832, _833, _834));
    float _922 = _919 * 2.0;
    float _926 = (_922 * _805) - _832;
    float _927 = (_922 * _806) - _833;
    float _928 = (_922 * _807) - _834;
    float _932 = abs(dot(vec3(_832, _833, _834), vec3(_805, _806, _807)));
    float _3672 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    float _934 = sqrt(_808);
    float _947 = exp2((_934 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_934 * 3.0));
    float _979 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _983 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _987 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1316;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1043 = fma(_987, cbModelParam._m0[26u].z, fma(_983, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _979));
        float _1047 = fma(_987, cbModelParam._m0[27u].z, fma(_983, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _979));
        float _1051 = fma(_987, cbModelParam._m0[28u].z, fma(_983, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _979));
        float _1074 = _979 + _805;
        float _1075 = _983 + _806;
        float _1076 = _987 + _807;
        float _1086 = fma(_1076, cbModelParam._m0[26u].z, fma(_1075, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1074)) - _1043;
        float _1087 = fma(_1076, cbModelParam._m0[27u].z, fma(_1075, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1074)) - _1047;
        float _1088 = fma(_1076, cbModelParam._m0[28u].z, fma(_1075, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1074)) - _1051;
        float _1092 = inversesqrt(dot(vec3(_1086, _1087, _1088), vec3(_1086, _1087, _1088)));
        float _1105 = ((_1092 * _1086) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1043 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1106 = ((_1092 * _1087) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1047 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1107 = ((_1092 * _1088) / cbModelParam._m0[34u].z) + ((((((_1051 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1110 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1105, _1106, _1107), 0.0);
        vec4 _1117 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1105, _1106, _1107), 0.0);
        vec4 _1124 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1105, _1106, _1107), 0.0);
        vec4 _1131 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1105, _1106, _1107), 0.0);
        float _1144 = exp2((_1110.w + (-0.5)) * 20.0) * 2.0;
        float _1145 = _1144 * (_1110.x + (-0.5));
        float _1146 = _1144 * (_1110.y + (-0.5));
        float _1147 = _1144 * (_1110.z + (-0.5));
        float _1154 = exp2((_1117.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = _1154 * (_1117.x + (-0.5));
        float _1156 = _1154 * (_1117.y + (-0.5));
        float _1157 = _1154 * (_1117.z + (-0.5));
        float _1164 = exp2((_1124.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = _1164 * (_1124.x + (-0.5));
        float _1166 = _1164 * (_1124.y + (-0.5));
        float _1167 = _1164 * (_1124.z + (-0.5));
        float _1174 = exp2((_1131.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1131.x + (-0.5));
        float _1176 = _1174 * (_1131.y + (-0.5));
        float _1177 = _1174 * (_1131.z + (-0.5));
        float _1178 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1179 = isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0));
        float _1180 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1181 = _1145 * 0.5;
        float _1182 = _1155 * 0.5;
        float _1183 = _1165 * 0.5;
        float _1184 = dot(vec3(_1181, _1182, _1183), vec3(_1181, _1182, _1183));
        float _1189 = (_1184 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1184);
        float _1198 = (dot(vec3(_805, _806, _807), vec3(_1189 * _1181, _1189 * _1182, _1189 * _1183)) + 1.0) * 0.5;
        float _3698 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1208 = sqrt(((_1182 * _1182) + (_1181 * _1181)) + (_1183 * _1183)) / (_1178 + 9.9999997473787516355514526367188e-06);
        float _3709 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1210 = _1209 * 2.0;
        float _1214 = (1.0 - _1209) / (_1209 + 1.0);
        float _3720 = isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0));
        float _1215 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
        float _1224 = ((((1.0 - _1215) * (_1210 + 2.0)) * exp2(log2(isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))) * (_1210 + 1.0))) + _1215) * _1178;
        float _1225 = _1146 * 0.5;
        float _1226 = _1156 * 0.5;
        float _1227 = _1166 * 0.5;
        float _1228 = dot(vec3(_1225, _1226, _1227), vec3(_1225, _1226, _1227));
        float _1233 = (_1228 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1228);
        float _1241 = (dot(vec3(_805, _806, _807), vec3(_1233 * _1225, _1233 * _1226, _1233 * _1227)) + 1.0) * 0.5;
        float _3731 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1250 = sqrt(((_1226 * _1226) + (_1225 * _1225)) + (_1227 * _1227)) / (_1179 + 9.9999997473787516355514526367188e-06);
        float _3742 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1252 = _1251 * 2.0;
        float _1256 = (1.0 - _1251) / (_1251 + 1.0);
        float _3753 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0));
        float _1266 = ((((1.0 - _1257) * (_1252 + 2.0)) * exp2(log2(isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0))) * (_1252 + 1.0))) + _1257) * _1179;
        float _1267 = _1147 * 0.5;
        float _1268 = _1157 * 0.5;
        float _1269 = _1167 * 0.5;
        float _1270 = dot(vec3(_1267, _1268, _1269), vec3(_1267, _1268, _1269));
        float _1275 = (_1270 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1270);
        float _1283 = (dot(vec3(_805, _806, _807), vec3(_1275 * _1267, _1275 * _1268, _1275 * _1269)) + 1.0) * 0.5;
        float _3764 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1292 = sqrt(((_1268 * _1268) + (_1267 * _1267)) + (_1269 * _1269)) / (_1180 + 9.9999997473787516355514526367188e-06);
        float _3775 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
        float _1294 = _1293 * 2.0;
        float _1298 = (1.0 - _1293) / (_1293 + 1.0);
        float _3786 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
        float _1308 = ((((1.0 - _1299) * (_1294 + 2.0)) * exp2(log2(isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0))) * (_1294 + 1.0))) + _1299) * _1180;
        _1316 = _1147;
        _1318 = _1146;
        _1319 = _1145;
        _1320 = _1157;
        _1321 = _1156;
        _1322 = _1155;
        _1323 = _1167;
        _1324 = _1166;
        _1325 = _1165;
        _1326 = _1180;
        _1327 = _1179;
        _1328 = _1178;
        _1329 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0)));
        _1330 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)));
        _1331 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)));
    }
    else
    {
        _1316 = _1317;
        _1318 = _1317;
        _1319 = _1317;
        _1320 = _1317;
        _1321 = _1317;
        _1322 = _1317;
        _1323 = _1317;
        _1324 = _1317;
        _1325 = _1317;
        _1326 = _1317;
        _1327 = _1317;
        _1328 = _1317;
        _1329 = 0.0;
        _1330 = 0.0;
        _1331 = 0.0;
    }
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1360 = fma(_987, cbModelParam._m0[30u].z, fma(_983, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _979));
        float _1364 = fma(_987, cbModelParam._m0[31u].z, fma(_983, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _979));
        float _1368 = fma(_987, cbModelParam._m0[32u].z, fma(_983, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _979));
        float _1391 = _979 + _805;
        float _1392 = _983 + _806;
        float _1393 = _987 + _807;
        float _1403 = fma(_1393, cbModelParam._m0[30u].z, fma(_1392, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1391)) - _1360;
        float _1404 = fma(_1393, cbModelParam._m0[31u].z, fma(_1392, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1391)) - _1364;
        float _1405 = fma(_1393, cbModelParam._m0[32u].z, fma(_1392, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1391)) - _1368;
        float _1409 = inversesqrt(dot(vec3(_1403, _1404, _1405), vec3(_1403, _1404, _1405)));
        float _1422 = ((_1409 * _1403) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1360 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1423 = ((_1409 * _1404) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1364 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1424 = ((_1409 * _1405) / cbModelParam._m0[35u].z) + ((((((_1368 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1426 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1422, _1423, _1424), 0.0);
        vec4 _1433 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1422, _1423, _1424), 0.0);
        vec4 _1440 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1422, _1423, _1424), 0.0);
        vec4 _1447 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1422, _1423, _1424), 0.0);
        float _1459 = exp2((_1426.w + (-0.5)) * 20.0) * 2.0;
        float _1460 = _1459 * (_1426.x + (-0.5));
        float _1461 = _1459 * (_1426.y + (-0.5));
        float _1462 = _1459 * (_1426.z + (-0.5));
        float _1469 = exp2((_1433.w + (-0.5)) * 20.0) * 2.0;
        float _1470 = _1469 * (_1433.x + (-0.5));
        float _1471 = _1469 * (_1433.y + (-0.5));
        float _1472 = _1469 * (_1433.z + (-0.5));
        float _1479 = exp2((_1440.w + (-0.5)) * 20.0) * 2.0;
        float _1480 = _1479 * (_1440.x + (-0.5));
        float _1481 = _1479 * (_1440.y + (-0.5));
        float _1482 = _1479 * (_1440.z + (-0.5));
        float _1489 = exp2((_1447.w + (-0.5)) * 20.0) * 2.0;
        float _1490 = _1489 * (_1447.x + (-0.5));
        float _1491 = _1489 * (_1447.y + (-0.5));
        float _1492 = _1489 * (_1447.z + (-0.5));
        float _1493 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1494 = isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0));
        float _1495 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1496 = _1460 * 0.5;
        float _1497 = _1470 * 0.5;
        float _1498 = _1480 * 0.5;
        float _1499 = dot(vec3(_1496, _1497, _1498), vec3(_1496, _1497, _1498));
        float _1504 = (_1499 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1499);
        float _1512 = (dot(vec3(_805, _806, _807), vec3(_1504 * _1496, _1504 * _1497, _1504 * _1498)) + 1.0) * 0.5;
        float _3827 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1521 = sqrt(((_1497 * _1497) + (_1496 * _1496)) + (_1498 * _1498)) / (_1493 + 9.9999997473787516355514526367188e-06);
        float _3838 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1523 = _1522 * 2.0;
        float _1527 = (1.0 - _1522) / (_1522 + 1.0);
        float _3849 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
        float _1528 = isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0));
        float _1537 = ((((1.0 - _1528) * (_1523 + 2.0)) * exp2(log2(isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) * (_1523 + 1.0))) + _1528) * _1493;
        float _1538 = _1461 * 0.5;
        float _1539 = _1471 * 0.5;
        float _1540 = _1481 * 0.5;
        float _1541 = dot(vec3(_1538, _1539, _1540), vec3(_1538, _1539, _1540));
        float _1546 = (_1541 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1541);
        float _1554 = (dot(vec3(_805, _806, _807), vec3(_1546 * _1538, _1546 * _1539, _1546 * _1540)) + 1.0) * 0.5;
        float _3860 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1563 = sqrt(((_1539 * _1539) + (_1538 * _1538)) + (_1540 * _1540)) / (_1494 + 9.9999997473787516355514526367188e-06);
        float _3871 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
        float _1565 = _1564 * 2.0;
        float _1569 = (1.0 - _1564) / (_1564 + 1.0);
        float _3882 = isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0));
        float _1570 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
        float _1579 = ((((1.0 - _1570) * (_1565 + 2.0)) * exp2(log2(isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0))) * (_1565 + 1.0))) + _1570) * _1494;
        float _1580 = _1462 * 0.5;
        float _1581 = _1472 * 0.5;
        float _1582 = _1482 * 0.5;
        float _1583 = dot(vec3(_1580, _1581, _1582), vec3(_1580, _1581, _1582));
        float _1588 = (_1583 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1583);
        float _1596 = (dot(vec3(_805, _806, _807), vec3(_1588 * _1580, _1588 * _1581, _1588 * _1582)) + 1.0) * 0.5;
        float _3893 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1605 = sqrt(((_1581 * _1581) + (_1580 * _1580)) + (_1582 * _1582)) / (_1495 + 9.9999997473787516355514526367188e-06);
        float _3904 = isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0));
        float _1606 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
        float _1607 = _1606 * 2.0;
        float _1611 = (1.0 - _1606) / (_1606 + 1.0);
        float _3915 = isnan(0.0) ? _1611 : (isnan(_1611) ? 0.0 : max(_1611, 0.0));
        float _1612 = isnan(1.0) ? _3915 : (isnan(_3915) ? 1.0 : min(_3915, 1.0));
        float _1621 = ((((1.0 - _1612) * (_1607 + 2.0)) * exp2(log2(isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0))) * (_1607 + 1.0))) + _1612) * _1495;
        _1629 = _1462;
        _1630 = _1461;
        _1631 = _1460;
        _1632 = _1472;
        _1633 = _1471;
        _1634 = _1470;
        _1635 = _1482;
        _1636 = _1481;
        _1637 = _1480;
        _1638 = _1495;
        _1639 = _1494;
        _1640 = _1493;
        _1641 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0)));
        _1642 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1579 : (isnan(_1579) ? 0.0 : max(_1579, 0.0)));
        _1643 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0)));
    }
    else
    {
        _1629 = _1317;
        _1630 = _1317;
        _1631 = _1317;
        _1632 = _1317;
        _1633 = _1317;
        _1634 = _1317;
        _1635 = _1317;
        _1636 = _1317;
        _1637 = _1317;
        _1638 = _1317;
        _1639 = _1317;
        _1640 = _1317;
        _1641 = 0.0;
        _1642 = 0.0;
        _1643 = 0.0;
    }
    float _1653 = (cbModelParam._m0[1u].x * (_1641 - _1329)) + _1329;
    float _1654 = (cbModelParam._m0[1u].x * (_1642 - _1330)) + _1330;
    float _1655 = (cbModelParam._m0[1u].x * (_1643 - _1331)) + _1331;
    float _1676 = fma(_1655, cbSceneParam._m0[89u].z, fma(_1654, cbSceneParam._m0[89u].y, _1653 * cbSceneParam._m0[89u].x));
    float _1679 = fma(_1655, cbSceneParam._m0[90u].z, fma(_1654, cbSceneParam._m0[90u].y, _1653 * cbSceneParam._m0[90u].x));
    float _1682 = fma(_1655, cbSceneParam._m0[91u].z, fma(_1654, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1653));
    float _1697 = _926 * 0.5;
    float _1698 = _927 * 0.5;
    float _1699 = _928 * 0.5;
    float _1700 = dot(vec4(_1697, _1698, _1699, 1.0), vec4(_1631, _1634, _1637, _1640));
    float _1703 = dot(vec4(_1697, _1698, _1699, 1.0), vec4(_1630, _1633, _1636, _1639));
    float _1706 = dot(vec4(_1697, _1698, _1699, 1.0), vec4(_1629, _1632, _1635, _1638));
    float _1740;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1713 = dot(vec4(_1697, _1698, _1699, 1.0), vec4(_1316, _1320, _1323, _1326));
        float _1717 = dot(vec4(_1697, _1698, _1699, 1.0), vec4(_1318, _1321, _1324, _1327));
        float _1721 = dot(vec4(_1697, _1698, _1699, 1.0), vec4(_1319, _1322, _1325, _1328));
        float _1728 = dot(vec4(cbModelParam._m0[39u]), vec4(_1697, _1698, _1699, 1.0));
        _1740 = dot(vec3(isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0)), isnan(0.0) ? _1717 : (isnan(_1717) ? 0.0 : max(_1717, 0.0)), isnan(0.0) ? _1713 : (isnan(_1713) ? 0.0 : max(_1713, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1728) ? 0.0 : (isnan(0.0) ? _1728 : max(0.0, _1728))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1740 = 1.0;
    }
    float _1751;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1742 = dot(vec4(cbModelParam._m0[40u]), vec4(_1697, _1698, _1699, 1.0));
        _1751 = dot(vec3(isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0)), isnan(0.0) ? _1703 : (isnan(_1703) ? 0.0 : max(_1703, 0.0)), isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1742) ? 0.0 : (isnan(0.0) ? _1742 : max(0.0, _1742))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1751 = 1.0;
    }
    float _1755 = (_1751 * cbModelParam._m0[1u].x) + (_1740 * (1.0 - cbModelParam._m0[1u].x));
    float _1765 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _808);
    float _1766 = isnan(_1765) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1765 : min(cbModelParam._m0[25u].z, _1765));
    float _1847;
    float _1849;
    float _1851;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1814 = fma(_987, cbModelParam._m0[13u].z, fma(_983, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _979)) + cbModelParam._m0[13u].w;
        float _1818 = fma(_987, cbModelParam._m0[14u].z, fma(_983, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _979)) + cbModelParam._m0[14u].w;
        float _1822 = fma(_987, cbModelParam._m0[15u].z, fma(_983, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _979)) + cbModelParam._m0[15u].w;
        float _1825 = fma(_928, cbModelParam._m0[13u].z, fma(_927, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _926));
        float _1828 = fma(_928, cbModelParam._m0[14u].z, fma(_927, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _926));
        float _1831 = fma(_928, cbModelParam._m0[15u].z, fma(_927, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _926));
        float _1859;
        if (_1825 > 0.0)
        {
            _1859 = abs((1.0 - _1814) / _1825);
        }
        else
        {
            float frontier_phi_57_55_ladder;
            if (_1825 < 0.0)
            {
                frontier_phi_57_55_ladder = abs((_1814 + 1.0) / _1825);
            }
            else
            {
                frontier_phi_57_55_ladder = 5000.0;
            }
            _1859 = frontier_phi_57_55_ladder;
        }
        float _2228;
        if (_1828 > 0.0)
        {
            _2228 = abs((1.0 - _1818) / _1828);
        }
        else
        {
            float frontier_phi_66_62_ladder;
            if (_1828 < 0.0)
            {
                frontier_phi_66_62_ladder = abs((_1818 + 1.0) / _1828);
            }
            else
            {
                frontier_phi_66_62_ladder = 5000.0;
            }
            _2228 = frontier_phi_66_62_ladder;
        }
        float _2536;
        if (_1831 > 0.0)
        {
            _2536 = abs((1.0 - _1822) / _1831);
        }
        else
        {
            float frontier_phi_80_73_ladder;
            if (_1831 < 0.0)
            {
                frontier_phi_80_73_ladder = abs((_1822 + 1.0) / _1831);
            }
            else
            {
                frontier_phi_80_73_ladder = 5000.0;
            }
            _2536 = frontier_phi_80_73_ladder;
        }
        float _2538 = isnan(_2228) ? _1859 : (isnan(_1859) ? _2228 : min(_1859, _2228));
        float _2539 = isnan(_2536) ? _2538 : (isnan(_2538) ? _2536 : min(_2538, _2536));
        float _2543 = (_2539 * _1825) + _1814;
        float _2544 = (_2539 * _1828) + _1818;
        float _2545 = (_2539 * _1831) + _1822;
        float _2546 = _2539 * 9.9999997473787516355514526367188e-05;
        float _2547 = (-1.0) - _2546;
        float _2549 = _2546 + 1.0;
        float frontier_phi_56_80_ladder;
        float frontier_phi_56_80_ladder_1;
        float frontier_phi_56_80_ladder_2;
        if ((_2545 > _2549) || ((_2545 < _2547) || ((_2544 > _2549) || ((_2544 < _2547) || ((_2543 < _2547) || (_2543 > _2549))))))
        {
            frontier_phi_56_80_ladder = 0.0;
            frontier_phi_56_80_ladder_1 = 0.0;
            frontier_phi_56_80_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2687 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2545, cbModelParam._m0[9u].z, fma(_2544, cbModelParam._m0[9u].y, _2543 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2545, cbModelParam._m0[10u].z, fma(_2544, cbModelParam._m0[10u].y, _2543 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2545, cbModelParam._m0[11u].z, fma(_2544, cbModelParam._m0[11u].y, _2543 * cbModelParam._m0[11u].x))), _1766);
            frontier_phi_56_80_ladder = _2687.z * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_1 = _2687.y * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_2 = _2687.x * cbModelParam._m0[1u].y;
        }
        _1847 = frontier_phi_56_80_ladder_2;
        _1849 = frontier_phi_56_80_ladder_1;
        _1851 = frontier_phi_56_80_ladder;
    }
    else
    {
        vec4 _1835 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_926, _927, _928), _1766);
        _1847 = _1835.x * cbModelParam._m0[1u].y;
        _1849 = _1835.y * cbModelParam._m0[1u].y;
        _1851 = _1835.z * cbModelParam._m0[1u].y;
    }
    float _1855 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _808);
    float _1856 = isnan(_1855) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1855 : min(cbModelParam._m0[25u].w, _1855));
    float _1944;
    float _1946;
    float _1948;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1908 = fma(_987, cbModelParam._m0[21u].z, fma(_983, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _979)) + cbModelParam._m0[21u].w;
        float _1912 = fma(_987, cbModelParam._m0[22u].z, fma(_983, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _979)) + cbModelParam._m0[22u].w;
        float _1916 = fma(_987, cbModelParam._m0[23u].z, fma(_983, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _979)) + cbModelParam._m0[23u].w;
        float _1919 = fma(_928, cbModelParam._m0[21u].z, fma(_927, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _926));
        float _1922 = fma(_928, cbModelParam._m0[22u].z, fma(_927, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _926));
        float _1925 = fma(_928, cbModelParam._m0[23u].z, fma(_927, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _926));
        float _2233;
        if (_1919 > 0.0)
        {
            _2233 = abs((1.0 - _1908) / _1919);
        }
        else
        {
            float frontier_phi_68_64_ladder;
            if (_1919 < 0.0)
            {
                frontier_phi_68_64_ladder = abs((_1908 + 1.0) / _1919);
            }
            else
            {
                frontier_phi_68_64_ladder = 5000.0;
            }
            _2233 = frontier_phi_68_64_ladder;
        }
        float _2562;
        if (_1922 > 0.0)
        {
            _2562 = abs((1.0 - _1912) / _1922);
        }
        else
        {
            float frontier_phi_82_75_ladder;
            if (_1922 < 0.0)
            {
                frontier_phi_82_75_ladder = abs((_1912 + 1.0) / _1922);
            }
            else
            {
                frontier_phi_82_75_ladder = 5000.0;
            }
            _2562 = frontier_phi_82_75_ladder;
        }
        float _2752;
        if (_1925 > 0.0)
        {
            _2752 = abs((1.0 - _1916) / _1925);
        }
        else
        {
            float frontier_phi_100_93_ladder;
            if (_1925 < 0.0)
            {
                frontier_phi_100_93_ladder = abs((_1916 + 1.0) / _1925);
            }
            else
            {
                frontier_phi_100_93_ladder = 5000.0;
            }
            _2752 = frontier_phi_100_93_ladder;
        }
        float _2754 = isnan(_2562) ? _2233 : (isnan(_2233) ? _2562 : min(_2233, _2562));
        float _2755 = isnan(_2752) ? _2754 : (isnan(_2754) ? _2752 : min(_2754, _2752));
        float _2759 = (_2755 * _1919) + _1908;
        float _2760 = (_2755 * _1922) + _1912;
        float _2761 = (_2755 * _1925) + _1916;
        float _2762 = _2755 * 9.9999997473787516355514526367188e-05;
        float _2763 = (-1.0) - _2762;
        float _2765 = _2762 + 1.0;
        float frontier_phi_65_100_ladder;
        float frontier_phi_65_100_ladder_1;
        float frontier_phi_65_100_ladder_2;
        if ((_2761 > _2765) || ((_2761 < _2763) || ((_2760 > _2765) || ((_2760 < _2763) || ((_2759 < _2763) || (_2759 > _2765))))))
        {
            frontier_phi_65_100_ladder = 0.0;
            frontier_phi_65_100_ladder_1 = 0.0;
            frontier_phi_65_100_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3003 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2761, cbModelParam._m0[17u].z, fma(_2760, cbModelParam._m0[17u].y, _2759 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2761, cbModelParam._m0[18u].z, fma(_2760, cbModelParam._m0[18u].y, _2759 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2761, cbModelParam._m0[19u].z, fma(_2760, cbModelParam._m0[19u].y, _2759 * cbModelParam._m0[19u].x))), _1856);
            frontier_phi_65_100_ladder = _3003.y * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_1 = _3003.x * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_2 = _3003.z * cbModelParam._m0[1u].z;
        }
        _1944 = frontier_phi_65_100_ladder_1;
        _1946 = frontier_phi_65_100_ladder;
        _1948 = frontier_phi_65_100_ladder_2;
    }
    else
    {
        vec4 _1928 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_926, _927, _928), _1856);
        _1944 = _1928.x * cbModelParam._m0[1u].z;
        _1946 = _1928.y * cbModelParam._m0[1u].z;
        _1948 = _1928.z * cbModelParam._m0[1u].z;
    }
    float _1960 = ((((1.0 - _947) * ((_934 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_947 * _934)) * _918;
    float _1961 = _1960 * ((cbModelParam._m0[1u].w * (_1944 - _1847)) + _1847);
    float _1962 = _1960 * ((cbModelParam._m0[1u].w * (_1946 - _1849)) + _1849);
    float _1963 = _1960 * ((cbModelParam._m0[1u].w * (_1948 - _1851)) + _1851);
    float _1966 = fma(_1963, cbSceneParam._m0[89u].z, fma(_1962, cbSceneParam._m0[89u].y, _1961 * cbSceneParam._m0[89u].x));
    float _1969 = fma(_1963, cbSceneParam._m0[90u].z, fma(_1962, cbSceneParam._m0[90u].y, _1961 * cbSceneParam._m0[90u].x));
    float _1972 = fma(_1963, cbSceneParam._m0[91u].z, fma(_1962, cbSceneParam._m0[91u].y, _1961 * cbSceneParam._m0[91u].x));
    vec4 _1980 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_853, _854));
    float _1982 = _1980.w;
    float _1994 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1982);
    float _1995 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1982);
    float _1996 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1982);
    uvec4 _2000 = floatBitsToUint(cbInstanceData._m0[_892 + 5u]);
    uint _2002 = _2000.x * 14u;
    uint _2003 = _2002 + 13u;
    float _2008 = _918 + (-1.0);
    float _2011 = (cbLight._m0[_2003].x * _2008) + 1.0;
    float _2012 = (cbLight._m0[_2003].y * _2008) + 1.0;
    uint _2013 = _2002 + 5u;
    float _2019 = isnan(1.0) ? _2012 : (isnan(_2012) ? 1.0 : min(_2012, 1.0));
    uint _2023 = _2002 + 4u;
    float _2032 = isnan(1.0) ? _2011 : (isnan(_2011) ? 1.0 : min(_2011, 1.0));
    uint _2036 = _2002 | 1u;
    float _2047 = dot(vec3(cbLight._m0[_2002].xyz), vec3(_805, _806, _807));
    float _2050 = dot(vec3(cbLight._m0[_2036].xyz), vec3(_805, _806, _807));
    float _4051 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _4062 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2055 = (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0))) * 0.3183098733425140380859375;
    float _2057 = (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * 0.3183098733425140380859375;
    float _2064 = ((cbLight._m0[_2013].x * _2019) * _2057) + (((cbLight._m0[_2023].x * _1994) * _2032) * _2055);
    float _2065 = ((_2019 * cbLight._m0[_2013].y) * _2057) + (((cbLight._m0[_2023].y * _1995) * _2032) * _2055);
    float _2066 = ((_2019 * cbLight._m0[_2013].z) * _2057) + (((cbLight._m0[_2023].z * _1996) * _2032) * _2055);
    uint _2068 = _2002 + 8u;
    float _2081 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2002].w)) * _808) * 0.949999988079071044921875);
    float _2082 = _2081 * _2081;
    float _2083 = cbLight._m0[_2002].x + _832;
    float _2084 = cbLight._m0[_2002].y + _833;
    float _2085 = cbLight._m0[_2002].z + _834;
    float _2089 = inversesqrt(dot(vec3(_2083, _2084, _2085), vec3(_2083, _2084, _2085)));
    float _2090 = _2089 * _2083;
    float _2091 = _2089 * _2084;
    float _2092 = _2089 * _2085;
    float _2093 = dot(vec3(_805, _806, _807), vec3(cbLight._m0[_2002].xyz));
    float _4073 = isnan(0.0) ? _2093 : (isnan(_2093) ? 0.0 : max(_2093, 0.0));
    float _2096 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
    float _4084 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
    float _2097 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
    float _2098 = dot(vec3(_805, _806, _807), vec3(_2090, _2091, _2092));
    float _4095 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
    float _2101 = isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0));
    float _2102 = dot(vec3(cbLight._m0[_2002].xyz), vec3(_2090, _2091, _2092));
    float _4106 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
    float _2106 = _2082 * _2082;
    float _2110 = ((_2101 * _2101) * (_2106 + (-1.0))) + 1.0;
    float _2121 = (exp2(log2(1.0 - (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2122 = 1.0 - _2082;
    float _2133 = (0.5 / (((_2097 * ((_2096 * _2122) + _2082)) + 9.9999999392252902907785028219223e-09) + (((_2097 * _2122) + _2082) * _2096))) * _2096;
    float _4117 = isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0));
    float _2135 = (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0))) * (_2106 / ((_2110 * _2110) * 3.141590118408203125));
    uint _2149 = _2002 + 9u;
    float _2160 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2036].w)) * _808) * 0.949999988079071044921875);
    float _2161 = _2160 * _2160;
    float _2162 = cbLight._m0[_2036].x + _832;
    float _2163 = cbLight._m0[_2036].y + _833;
    float _2164 = cbLight._m0[_2036].z + _834;
    float _2168 = inversesqrt(dot(vec3(_2162, _2163, _2164), vec3(_2162, _2163, _2164)));
    float _2169 = _2168 * _2162;
    float _2170 = _2168 * _2163;
    float _2171 = _2168 * _2164;
    float _2172 = dot(vec3(_805, _806, _807), vec3(cbLight._m0[_2036].xyz));
    float _4128 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
    float _2175 = isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0));
    float _2176 = dot(vec3(_805, _806, _807), vec3(_2169, _2170, _2171));
    float _4139 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
    float _2179 = isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0));
    float _2180 = dot(vec3(cbLight._m0[_2036].xyz), vec3(_2169, _2170, _2171));
    float _4150 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
    float _2184 = _2161 * _2161;
    float _2188 = ((_2179 * _2179) * (_2184 + (-1.0))) + 1.0;
    float _2197 = (exp2(log2(1.0 - (isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2198 = 1.0 - _2161;
    float _2208 = (0.5 / (((_2097 * ((_2175 * _2198) + _2161)) + 9.9999999392252902907785028219223e-09) + (((_2097 * _2198) + _2161) * _2175))) * _2175;
    float _4161 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
    float _2210 = (isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0))) * (_2184 / ((_2188 * _2188) * 3.141590118408203125));
    float _2220 = (((_2197 * cbLight._m0[_2149].x) * _2210) * _2019) + ((((cbLight._m0[_2068].x * _1994) * _2121) * _2135) * _2032);
    float _2221 = (((_2197 * cbLight._m0[_2149].y) * _2210) * _2019) + ((((cbLight._m0[_2068].y * _1995) * _2121) * _2135) * _2032);
    float _2222 = (((_2197 * cbLight._m0[_2149].z) * _2210) * _2019) + ((((cbLight._m0[_2068].z * _1996) * _2121) * _2135) * _2032);
    float _2337;
    float _2339;
    float _2341;
    float _2343;
    float _2345;
    float _2347;
    if (_2000.y == 0u)
    {
        float _2277 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2278 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2277;
        float _2279 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2277;
        float _2280 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2277;
        uvec4 _2292 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2293 = _2292.x;
        uint _2304 = uint((float(_2292.y) * floor(float(uint(cbSceneParam._m0[85u].y * _854) / _2293))) + floor(float(uint(cbSceneParam._m0[85u].x * _853) / _2293)));
        float _2314 = (log2(_2280 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2315 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
        uint _2318 = uint(isnan(14.0) ? _2315 : (isnan(_2315) ? 14.0 : min(_2315, 14.0)));
        uvec4 _2323 = texelFetch(g_lightClusterGridBuffer, int(((_2318 << 2u) + (_2304 << 6u)) >> 2u));
        uint _2324 = _2323.x;
        uint _2325 = _2292.z;
        float _2415;
        float _2417;
        float _2419;
        float _2421;
        float _2423;
        float _2425;
        if (((((1u << ((_2325 >> 4u) & 15u)) + 4294967295u) & _2324) == 0u) || ((_2325 & 240u) == 0u))
        {
            _2415 = 0.0;
            _2417 = 0.0;
            _2419 = 0.0;
            _2421 = 0.0;
            _2423 = 0.0;
            _2425 = 0.0;
        }
        else
        {
            float _2416;
            float _2418;
            float _2420;
            float _2422;
            float _2424;
            float _2426;
            float _2599 = 0.0;
            float _2600 = 0.0;
            float _2601 = 0.0;
            float _2602 = 0.0;
            float _2603 = 0.0;
            float _2604 = 0.0;
            uint _2605 = 0u;
            uint _2614;
            bool _2615;
            for (;;)
            {
                _2614 = texelFetch(g_lightClassification, int((((_2318 << 5u) + (_2304 << 9u)) + (_2605 << 2u)) >> 2u)).x;
                _2615 = _2614 == 0u;
                float frontier_phi_95_pred;
                float frontier_phi_95_pred_1;
                float frontier_phi_95_pred_2;
                float frontier_phi_95_pred_3;
                float frontier_phi_95_pred_4;
                float frontier_phi_95_pred_5;
                if (_2615)
                {
                    frontier_phi_95_pred = _2600;
                    frontier_phi_95_pred_1 = _2599;
                    frontier_phi_95_pred_2 = _2601;
                    frontier_phi_95_pred_3 = _2604;
                    frontier_phi_95_pred_4 = _2603;
                    frontier_phi_95_pred_5 = _2602;
                }
                else
                {
                    float _2795;
                    float _2796;
                    float _2797;
                    float _2798;
                    float _2799;
                    float _2800;
                    uint _2801;
                    _2795 = _2599;
                    _2796 = _2600;
                    _2797 = _2601;
                    _2798 = _2602;
                    _2799 = _2603;
                    _2800 = _2604;
                    _2801 = _2614;
                    float _2696;
                    float _2697;
                    float _2698;
                    float _2699;
                    float _2700;
                    float _2701;
                    for (;;)
                    {
                        uint _2805 = uint(findLSB(_2801)) + (_2605 << 5u);
                        uint _2802 = (_2801 + 4294967295u) & _2801;
                        uint _2807 = _2805 * 48u;
                        vec4 _2821 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2807)).x, texelFetch(g_PointLightRenderingBuffer, int(_2807 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2807 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2807 + 3u)).x));
                        uint _2827 = (_2805 * 48u) + 4u;
                        vec4 _2840 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2827)).x, texelFetch(g_PointLightRenderingBuffer, int(_2827 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2827 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2827 + 3u)).x));
                        uint _2846 = (_2805 * 48u) + 8u;
                        vec3 _2857 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2846)).x, texelFetch(g_PointLightRenderingBuffer, int(_2846 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2846 + 2u)).x));
                        float _2861 = _2821.x - _2278;
                        float _2862 = _2821.y - _2279;
                        float _2863 = _2821.z - _2280;
                        float _2864 = dot(vec3(_2861, _2862, _2863), vec3(_2861, _2862, _2863));
                        float _2867 = inversesqrt(_2864);
                        float _2868 = _2867 * _2861;
                        float _2869 = _2867 * _2862;
                        float _2870 = _2867 * _2863;
                        float _2871 = dot(vec3(_873, _876, _879), vec3(_2868, _2869, _2870));
                        float _2876 = 1.0 - (_2864 * _2821.w);
                        float _4182 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
                        float _2877 = isnan(1.0) ? _4182 : (isnan(_4182) ? 1.0 : min(_4182, 1.0));
                        float _2878 = sqrt(_2864) * _2840.w;
                        float _2881 = 1.39999997615814208984375 / (_2878 + 1.39999997615814208984375);
                        float _2882 = _2881 * _2881;
                        float _2885 = ((1.0 - _2882) * _2871) + _2882;
                        float _2888 = _2878 * _2878;
                        float _2892 = ((isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0))) * _2877) / ((_2888 * 0.699999988079071044921875) + 1.0);
                        float _2896 = (-0.0) - _2278;
                        float _2897 = (-0.0) - _2279;
                        float _2898 = (-0.0) - _2280;
                        float _2902 = inversesqrt(dot(vec3(_2896, _2897, _2898), vec3(_2896, _2897, _2898)));
                        float _2903 = _2902 * _2896;
                        float _2904 = _2902 * _2897;
                        float _2905 = _2902 * _2898;
                        float _2913 = exp2(log2(1.0 / ((_2888 * 3.5) + 5.0)) * 0.25);
                        float _2914 = 1.0 - _934;
                        float _2921 = sqrt(1.0 - ((1.0 - (_2914 * _2914)) * (1.0 - (_2913 * _2913))));
                        float _2922 = _2921 * _2921;
                        float _2923 = _2922 * _2922;
                        float _2924 = _2903 + _2868;
                        float _2925 = _2904 + _2869;
                        float _2926 = _2905 + _2870;
                        float _2930 = inversesqrt(dot(vec3(_2924, _2925, _2926), vec3(_2924, _2925, _2926)));
                        float _2934 = dot(vec3(_873, _876, _879), vec3(_2903, _2904, _2905));
                        float _4198 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0));
                        float _2937 = isnan(1.0) ? _4198 : (isnan(_4198) ? 1.0 : min(_4198, 1.0));
                        float _2938 = dot(vec3(_873, _876, _879), vec3(_2930 * _2924, _2930 * _2925, _2930 * _2926));
                        float _4209 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0));
                        float _2941 = isnan(1.0) ? _4209 : (isnan(_4209) ? 1.0 : min(_4209, 1.0));
                        float _2945 = ((_2941 * _2941) * (_2923 + (-1.0))) + 1.0;
                        float _2946 = _2881 * _2922;
                        float _2947 = _2946 * _2946;
                        float _2950 = ((1.0 - _2947) * _2871) + _2947;
                        float _4220 = isnan(0.0) ? _2950 : (isnan(_2950) ? 0.0 : max(_2950, 0.0));
                        float _2951 = isnan(1.0) ? _4220 : (isnan(_4220) ? 1.0 : min(_4220, 1.0));
                        float _2952 = 1.0 - _2922;
                        float _2962 = (0.5 / (((_2951 * ((_2937 * _2952) + _2922)) + 9.9999999392252902907785028219223e-09) + (((_2951 * _2952) + _2922) * _2937))) * _2951;
                        float _4231 = isnan(0.0) ? _2962 : (isnan(_2962) ? 0.0 : max(_2962, 0.0));
                        float _2973 = (((_2923 * 3.1415927410125732421875) * (isnan(1.0) ? _4231 : (isnan(_4231) ? 1.0 : min(_4231, 1.0)))) / ((_2945 * _2945) * ((_2888 * 2.1991131305694580078125) + 3.141590118408203125))) * _2877;
                        _2699 = (_2892 * _2840.x) + _2798;
                        _2700 = (_2892 * _2840.y) + _2799;
                        _2701 = (_2892 * _2840.z) + _2800;
                        _2696 = (_2973 * _2857.x) + _2795;
                        _2697 = (_2973 * _2857.y) + _2796;
                        _2698 = (_2973 * _2857.z) + _2797;
                        if (_2802 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2795 = _2696;
                            _2796 = _2697;
                            _2797 = _2698;
                            _2798 = _2699;
                            _2799 = _2700;
                            _2800 = _2701;
                            _2801 = _2802;
                        }
                    }
                    frontier_phi_95_pred = _2697;
                    frontier_phi_95_pred_1 = _2696;
                    frontier_phi_95_pred_2 = _2698;
                    frontier_phi_95_pred_3 = _2701;
                    frontier_phi_95_pred_4 = _2700;
                    frontier_phi_95_pred_5 = _2699;
                }
                _2418 = frontier_phi_95_pred;
                _2416 = frontier_phi_95_pred_1;
                _2420 = frontier_phi_95_pred_2;
                _2426 = frontier_phi_95_pred_3;
                _2424 = frontier_phi_95_pred_4;
                _2422 = frontier_phi_95_pred_5;
                uint _2606 = _2605 + 1u;
                if (_2606 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2599 = _2416;
                    _2600 = _2418;
                    _2601 = _2420;
                    _2602 = _2422;
                    _2603 = _2424;
                    _2604 = _2426;
                    _2605 = _2606;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2415 = _2416;
            _2417 = _2418;
            _2419 = _2420;
            _2421 = _2422;
            _2423 = _2424;
            _2425 = _2426;
        }
        uvec4 _2429 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2430 = _2429.z;
        uint _2432 = (_2430 >> 8u) & 15u;
        float _2567;
        float _2569;
        float _2571;
        float _2573;
        float _2575;
        float _2577;
        if (((4294967295u << _2432) & _2324) == 0u)
        {
            _2567 = _2415;
            _2569 = _2417;
            _2571 = _2419;
            _2573 = _2421;
            _2575 = _2423;
            _2577 = _2425;
        }
        else
        {
            float _2592 = inversesqrt(dot(vec3(_2278, _2279, _2280), vec3(_2278, _2279, _2280)));
            float _2593 = _2592 * _2278;
            float _2594 = _2592 * _2279;
            float _2595 = _2592 * _2280;
            float frontier_phi_84_85_ladder;
            float frontier_phi_84_85_ladder_1;
            float frontier_phi_84_85_ladder_2;
            float frontier_phi_84_85_ladder_3;
            float frontier_phi_84_85_ladder_4;
            float frontier_phi_84_85_ladder_5;
            if (_2432 < ((_2430 >> 12u) & 15u))
            {
                float _2568;
                float _2570;
                float _2572;
                float _2574;
                float _2576;
                float _2578;
                float _2778 = _2415;
                float _2779 = _2417;
                float _2780 = _2419;
                float _2781 = _2421;
                float _2782 = _2423;
                float _2783 = _2425;
                uint _2784 = _2432;
                uint _2793;
                bool _2794;
                for (;;)
                {
                    _2793 = texelFetch(g_lightClassification, int((((_2318 << 5u) + (_2304 << 9u)) + (_2784 << 2u)) >> 2u)).x;
                    _2794 = _2793 == 0u;
                    float frontier_phi_109_pred;
                    float frontier_phi_109_pred_1;
                    float frontier_phi_109_pred_2;
                    float frontier_phi_109_pred_3;
                    float frontier_phi_109_pred_4;
                    float frontier_phi_109_pred_5;
                    if (_2794)
                    {
                        frontier_phi_109_pred = _2779;
                        frontier_phi_109_pred_1 = _2778;
                        frontier_phi_109_pred_2 = _2783;
                        frontier_phi_109_pred_3 = _2782;
                        frontier_phi_109_pred_4 = _2781;
                        frontier_phi_109_pred_5 = _2780;
                    }
                    else
                    {
                        float _3008;
                        float _3009;
                        float _3010;
                        float _3011;
                        float _3012;
                        float _3013;
                        float _3301;
                        float _3302;
                        float _3303;
                        float _3304;
                        float _3305;
                        float _3306;
                        float _3021 = _2778;
                        float _3022 = _2779;
                        float _3023 = _2780;
                        float _3024 = _2781;
                        float _3025 = _2782;
                        float _3026 = _2783;
                        uint _3027 = _2793;
                        uint _3028;
                        vec4 _3053;
                        float _3054;
                        vec4 _3069;
                        vec3 _3081;
                        vec4 _3096;
                        vec4 _3111;
                        float _3157;
                        bool _3158;
                        for (;;)
                        {
                            uint _3038 = ((_2784 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3027));
                            _3028 = (_3027 + 4294967295u) & _3027;
                            uint _3040 = _3038 * 40u;
                            _3053 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3040)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3040 + 3u)).x));
                            _3054 = _3053.w;
                            uint _3056 = (_3038 * 40u) + 4u;
                            _3069 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3056)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3056 + 3u)).x));
                            uint _3071 = (_3038 * 40u) + 8u;
                            _3081 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3071)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3071 + 2u)).x));
                            uint _3083 = (_3038 * 40u) + 16u;
                            _3096 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3083)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3083 + 3u)).x));
                            uint _3098 = (_3038 * 40u) + 20u;
                            _3111 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3098)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3098 + 3u)).x));
                            uint _3113 = (_3038 * 40u) + 24u;
                            vec4 _3126 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3113)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 3u)).x));
                            uint _3132 = (_3038 * 40u) + 28u;
                            vec4 _3145 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3132)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3132 + 3u)).x));
                            _3157 = fma(_2280, _3145.z, fma(_2279, _3145.y, _3145.x * _2278)) + _3145.w;
                            _3158 = !((fma(_2280, _3126.z, fma(_2279, _3126.y, _3126.x * _2278)) + _3126.w) <= 0.0);
                            float frontier_phi_115_pred;
                            float frontier_phi_115_pred_1;
                            float frontier_phi_115_pred_2;
                            float frontier_phi_115_pred_3;
                            float frontier_phi_115_pred_4;
                            float frontier_phi_115_pred_5;
                            if (_3158)
                            {
                                float _3185 = _3053.x - _2278;
                                float _3186 = _3053.y - _2279;
                                float _3187 = _3053.z - _2280;
                                float _3188 = dot(vec3(_3185, _3186, _3187), vec3(_3185, _3186, _3187));
                                float _3191 = inversesqrt(_3188);
                                float _3192 = _3191 * _3185;
                                float _3193 = _3191 * _3186;
                                float _3194 = _3191 * _3187;
                                float _3198 = 1.0 - (_3188 / (_3054 * _3054));
                                float _4242 = isnan(0.0) ? _3198 : (isnan(_3198) ? 0.0 : max(_3198, 0.0));
                                float _3199 = isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0));
                                float _3203 = sqrt(_3188) * _3069.w;
                                float _3205 = 1.39999997615814208984375 / (_3203 + 1.39999997615814208984375);
                                float _3206 = _3205 * _3205;
                                float _3209 = ((1.0 - _3206) * dot(vec3(_3192, _3193, _3194), vec3(_873, _876, _879))) + _3206;
                                float _3212 = _3203 * _3203;
                                float _3216 = (fma(_2280, _3096.z, fma(_2279, _3096.y, _3096.x * _2278)) + _3096.w) / _3157;
                                float _3217 = (fma(_2280, _3111.z, fma(_2279, _3111.y, _3111.x * _2278)) + _3111.w) / _3157;
                                float _3221 = 1.0 - dot(vec2(_3216, _3217), vec2(_3216, _3217));
                                float _4258 = isnan(0.0) ? _3221 : (isnan(_3221) ? 0.0 : max(_3221, 0.0));
                                float _3222 = isnan(1.0) ? _4258 : (isnan(_4258) ? 1.0 : min(_4258, 1.0));
                                float _3223 = _3222 * (((isnan(0.0) ? _3209 : (isnan(_3209) ? 0.0 : max(_3209, 0.0))) * _3199) / ((_3212 * 0.699999988079071044921875) + 1.0));
                                float _3235 = exp2(log2(1.0 / ((_3212 * 3.5) + 5.0)) * 0.25);
                                float _3236 = 1.0 - _934;
                                float _3243 = sqrt(1.0 - ((1.0 - (_3236 * _3236)) * (1.0 - (_3235 * _3235))));
                                float _3244 = _3243 * _3243;
                                float _3245 = _3244 * _3244;
                                float _3246 = _3192 - _2593;
                                float _3247 = _3193 - _2594;
                                float _3248 = _3194 - _2595;
                                float _3252 = inversesqrt(dot(vec3(_3246, _3247, _3248), vec3(_3246, _3247, _3248)));
                                float _3256 = dot(vec3(_873, _876, _879), vec3((-0.0) - _2593, (-0.0) - _2594, (-0.0) - _2595));
                                float _4269 = isnan(0.0) ? _3256 : (isnan(_3256) ? 0.0 : max(_3256, 0.0));
                                float _3259 = isnan(1.0) ? _4269 : (isnan(_4269) ? 1.0 : min(_4269, 1.0));
                                float _3260 = dot(vec3(_873, _876, _879), vec3(_3252 * _3246, _3252 * _3247, _3252 * _3248));
                                float _4280 = isnan(0.0) ? _3260 : (isnan(_3260) ? 0.0 : max(_3260, 0.0));
                                float _3263 = isnan(1.0) ? _4280 : (isnan(_4280) ? 1.0 : min(_4280, 1.0));
                                float _3267 = ((_3263 * _3263) * (_3245 + (-1.0))) + 1.0;
                                float _3268 = _3205 * _3244;
                                float _3269 = _3268 * _3268;
                                float _3275 = ((1.0 - _3269) * dot(vec3(_873, _876, _879), vec3(_3192, _3193, _3194))) + _3269;
                                float _4291 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                                float _3276 = isnan(1.0) ? _4291 : (isnan(_4291) ? 1.0 : min(_4291, 1.0));
                                float _3277 = 1.0 - _3244;
                                float _3287 = (0.5 / (((_3276 * ((_3259 * _3277) + _3244)) + 9.9999999392252902907785028219223e-09) + (((_3276 * _3277) + _3244) * _3259))) * _3276;
                                float _4302 = isnan(0.0) ? _3287 : (isnan(_3287) ? 0.0 : max(_3287, 0.0));
                                float _3297 = (_3222 * _3199) * (((_3245 * 3.1415927410125732421875) * (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0)))) / ((_3267 * _3267) * ((_3212 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_115_pred = _3223 * _3069.y;
                                frontier_phi_115_pred_1 = _3223 * _3069.x;
                                frontier_phi_115_pred_2 = _3297 * _3081.z;
                                frontier_phi_115_pred_3 = _3297 * _3081.y;
                                frontier_phi_115_pred_4 = _3297 * _3081.x;
                                frontier_phi_115_pred_5 = _3223 * _3069.z;
                            }
                            else
                            {
                                frontier_phi_115_pred = 0.0;
                                frontier_phi_115_pred_1 = 0.0;
                                frontier_phi_115_pred_2 = 0.0;
                                frontier_phi_115_pred_3 = 0.0;
                                frontier_phi_115_pred_4 = 0.0;
                                frontier_phi_115_pred_5 = 0.0;
                            }
                            _3305 = frontier_phi_115_pred;
                            _3304 = frontier_phi_115_pred_1;
                            _3303 = frontier_phi_115_pred_2;
                            _3302 = frontier_phi_115_pred_3;
                            _3301 = frontier_phi_115_pred_4;
                            _3306 = frontier_phi_115_pred_5;
                            _3011 = _3304 + _3024;
                            _3012 = _3305 + _3025;
                            _3013 = _3306 + _3026;
                            _3008 = _3301 + _3021;
                            _3009 = _3302 + _3022;
                            _3010 = _3303 + _3023;
                            if (_3028 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3021 = _3008;
                                _3022 = _3009;
                                _3023 = _3010;
                                _3024 = _3011;
                                _3025 = _3012;
                                _3026 = _3013;
                                _3027 = _3028;
                                continue;
                            }
                        }
                        frontier_phi_109_pred = _3009;
                        frontier_phi_109_pred_1 = _3008;
                        frontier_phi_109_pred_2 = _3013;
                        frontier_phi_109_pred_3 = _3012;
                        frontier_phi_109_pred_4 = _3011;
                        frontier_phi_109_pred_5 = _3010;
                    }
                    _2570 = frontier_phi_109_pred;
                    _2568 = frontier_phi_109_pred_1;
                    _2578 = frontier_phi_109_pred_2;
                    _2576 = frontier_phi_109_pred_3;
                    _2574 = frontier_phi_109_pred_4;
                    _2572 = frontier_phi_109_pred_5;
                    uint _2785 = _2784 + 1u;
                    if (_2785 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2778 = _2568;
                        _2779 = _2570;
                        _2780 = _2572;
                        _2781 = _2574;
                        _2782 = _2576;
                        _2783 = _2578;
                        _2784 = _2785;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_84_85_ladder = _2568;
                frontier_phi_84_85_ladder_1 = _2572;
                frontier_phi_84_85_ladder_2 = _2578;
                frontier_phi_84_85_ladder_3 = _2576;
                frontier_phi_84_85_ladder_4 = _2574;
                frontier_phi_84_85_ladder_5 = _2570;
            }
            else
            {
                frontier_phi_84_85_ladder = _2415;
                frontier_phi_84_85_ladder_1 = _2419;
                frontier_phi_84_85_ladder_2 = _2425;
                frontier_phi_84_85_ladder_3 = _2423;
                frontier_phi_84_85_ladder_4 = _2421;
                frontier_phi_84_85_ladder_5 = _2417;
            }
            _2567 = frontier_phi_84_85_ladder;
            _2569 = frontier_phi_84_85_ladder_5;
            _2571 = frontier_phi_84_85_ladder_1;
            _2573 = frontier_phi_84_85_ladder_4;
            _2575 = frontier_phi_84_85_ladder_3;
            _2577 = frontier_phi_84_85_ladder_2;
        }
        float _2582 = isnan(1.0) ? _918 : (isnan(_918) ? 1.0 : min(_918, 1.0));
        _2337 = (_2582 * _2573) + _2064;
        _2339 = (_2582 * _2575) + _2065;
        _2341 = (_2582 * _2577) + _2066;
        _2343 = ((_2567 * 0.039999999105930328369140625) * _2582) + _2220;
        _2345 = ((_2569 * 0.039999999105930328369140625) * _2582) + _2221;
        _2347 = ((_2571 * 0.039999999105930328369140625) * _2582) + _2222;
    }
    else
    {
        _2337 = _2064;
        _2339 = _2065;
        _2341 = _2066;
        _2343 = _2220;
        _2345 = _2221;
        _2347 = _2222;
    }
    float _4318 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _4329 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _4340 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _2364 = ((isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (_2337 + ((isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0))) * _918))) + ((_2343 + ((isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0))) * _1755)) * cbPerFrame._m0[3u].x);
    float _2365 = ((isnan(1.0) ? _4329 : (isnan(_4329) ? 1.0 : min(_4329, 1.0))) * (_2339 + ((isnan(0.0) ? _1679 : (isnan(_1679) ? 0.0 : max(_1679, 0.0))) * _918))) + ((_2345 + ((isnan(0.0) ? _1969 : (isnan(_1969) ? 0.0 : max(_1969, 0.0))) * _1755)) * cbPerFrame._m0[3u].x);
    float _2366 = ((isnan(1.0) ? _4340 : (isnan(_4340) ? 1.0 : min(_4340, 1.0))) * (_2341 + ((isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0))) * _918))) + ((_2347 + ((isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0))) * _1755)) * cbPerFrame._m0[3u].x);
    float _2367 = isnan(0.0) ? _2364 : (isnan(_2364) ? 0.0 : max(_2364, 0.0));
    float _2368 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0));
    float _2369 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
    uint _2370 = _892 + 6u;
    float _2378 = _853 / cbSceneParam._m0[86u].x;
    float _2379 = _854 / cbSceneParam._m0[86u].y;
    vec4 _2393 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2378, _2379, (log2((isnan(cbSceneParam._m0[77u].w) ? _827 : (isnan(_827) ? cbSceneParam._m0[77u].w : min(_827, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2395 = _2393.x;
    float _2396 = _2393.y;
    float _2397 = _2393.z;
    float _2398 = _2393.w;
    float _2478;
    float _2480;
    float _2482;
    float _2484;
    if (_827 > cbSceneParam._m0[78u].w)
    {
        float _2440 = isnan(_827) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _827 : min(cbSceneParam._m0[80u].w, _827));
        float _2441 = _2440 / _827;
        float _2452 = _2441 * _275;
        float _2453 = _276 * _2441;
        float _2454 = (-0.0) - _2453;
        float _2455 = _2441 * _277;
        float _2457 = (cbSceneParam._m0[77u].w * _2454) / _2440;
        float _2458 = _2457 + cbSceneParam._m0[79u].w;
        float _2459 = cbSceneParam._m0[79u].w - _2453;
        float _2465 = sqrt(((_2452 * _2452) + (_2453 * _2453)) + (_2455 * _2455));
        float _2468 = (1.0 - (cbSceneParam._m0[77u].w / _2440)) * _2465;
        float _2474 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2476 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2709;
        if (abs((_2454 - _2457) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2709 = ((((_2458 > 0.0) ? exp2(_2474 * _2458) : (2.0 - exp2(_2476 * _2458))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2468;
        }
        else
        {
            float _2628 = 1.0 / cbSceneParam._m0[80u].x;
            float _2629 = isnan(_2459) ? _2458 : (isnan(_2458) ? _2459 : max(_2458, _2459));
            float _2630 = isnan(_2459) ? _2458 : (isnan(_2458) ? _2459 : min(_2458, _2459));
            float _2639 = isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : min(_2629, 0.0));
            float _2640 = isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : min(_2630, 0.0));
            _2709 = ((abs(_2465 / _2454) * cbSceneParam._m0[80u].y) * ((((_2639 - _2640) * 2.0) - ((exp2(_2474 * (isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0)))) - exp2(_2474 * (isnan(0.0) ? _2630 : (isnan(_2630) ? 0.0 : max(_2630, 0.0))))) * _2628)) - ((exp2(_2476 * _2639) - exp2(_2476 * _2640)) * _2628))) + (_2468 * cbSceneParam._m0[80u].z);
        }
        vec4 _2711 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2378, _2379, 1.0), 0.0);
        float _2720 = exp2((_2709 * (-1.44269502162933349609375)) * (1.0 - _2711.w));
        float _2721 = log2(_2720);
        float _2737 = log2(_2398);
        _2478 = (exp2(_2737 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2721 * cbSceneParam._m0[78u].x)) * _2711.x) / cbSceneParam._m0[78u].x)) + _2395;
        _2480 = (exp2(_2737 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2721 * cbSceneParam._m0[78u].y)) * _2711.y) / cbSceneParam._m0[78u].y)) + _2396;
        _2482 = (exp2(_2737 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2721 * cbSceneParam._m0[78u].z)) * _2711.z) / cbSceneParam._m0[78u].z)) + _2397;
        _2484 = _2720 * _2398;
    }
    else
    {
        _2478 = _2395;
        _2480 = _2396;
        _2482 = _2397;
        _2484 = _2398;
    }
    bool _2747;
    vec4 _2494;
    vec4 _2516;
    float _2518;
    float _2522;
    float _2523;
    float _2524;
    float _2525;
    bool _2535;
    for (;;)
    {
        _2494 = cbMatDynParam._m0[0u];
        float _2496 = roundEven(_2494.y);
        bool _2497 = _2496 == 3.0;
        float _2498 = log2(_2484);
        float _2505 = exp2(_2498 * cbSceneParam._m0[78u].x) * _2367;
        float _2506 = exp2(_2498 * cbSceneParam._m0[78u].y) * _2368;
        float _2507 = exp2(_2498 * cbSceneParam._m0[78u].z) * _2369;
        float _2514 = _841 + (-0.5);
        _2516 = cbMtdParam._m0[1u];
        _2518 = _2516.y * _2514;
        float _2521 = (_2496 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2522 = _2521 * (_2497 ? _2505 : (_2505 + (cbSceneParam._m0[72u].w * _2478)));
        _2523 = _2521 * (_2497 ? _2506 : (_2506 + (cbSceneParam._m0[72u].w * _2480)));
        _2524 = _2521 * (_2497 ? _2507 : (_2507 + (cbSceneParam._m0[72u].w * _2482)));
        _2525 = _2514 * 0.999000012874603271484375;
        _2535 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2535)
        {
            if ((cbInstanceData._m0[_892 + 7u].x + _2525) < 0.5)
            {
                _2747 = true;
                break;
            }
        }
        uint _2663 = _894 + uint(_2494.w);
        if ((cbInstanceData._m0[_2663].w < 1.0) && ((cbInstanceData._m0[_2663].w + _2525) < 0.5))
        {
            _2747 = true;
            break;
        }
        if ((_2518 + 1.0) < _2516.x)
        {
            _2747 = true;
            break;
        }
        _2747 = false;
        break;
    }
    float _2978;
    if (_2747)
    {
        discard_state = true;
        _2978 = 0.0;
    }
    else
    {
        _2978 = cbInstanceData._m0[_2370].w;
    }
    SV_Target.x = _2522;
    SV_Target.y = _2523;
    SV_Target.z = _2524;
    SV_Target.w = _2978;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2370].w;
    discard_exit();
}


