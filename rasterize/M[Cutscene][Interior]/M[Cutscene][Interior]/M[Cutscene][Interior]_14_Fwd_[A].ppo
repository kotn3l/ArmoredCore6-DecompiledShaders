#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1042;
float _3156;
float _3157;
float _3158;
float _3159;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _194 = _193 * _186;
    float _195 = _193 * _187;
    float _196 = _193 * _188;
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208 = _207 * TANGENT.x;
    float _209 = _207 * TANGENT.y;
    float _210 = _207 * TANGENT.z;
    float _255 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _265 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _255);
    float _266 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _255);
    float _267 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _255);
    vec4 _280 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _283 = _280.x;
    vec4 _301 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _318 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _283) + cbMtdParam._m0[12u].x) * _301.x;
    float _320 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _283) + cbMtdParam._m0[12u].y) * _301.y;
    float _322 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _283) + cbMtdParam._m0[12u].z) * _301.z;
    vec4 _340 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _376 = cbMtdParam._m0[24u].x + _265;
    float _377 = cbMtdParam._m0[24u].y + _266;
    float _378 = cbMtdParam._m0[24u].z + _267;
    float _392 = (-0.0) - dot(vec3(_376, _377, _378), vec3(_194, _195, _196));
    float _393 = (-0.0) - dot(vec3(_376, _377, _378), vec3(_208, _209, _210));
    float _394 = (-0.0) - dot(vec3(_376, _377, _378), vec3((-0.0) - _201, (-0.0) - _202, (-0.0) - _203));
    float _398 = inversesqrt(dot(vec3(_392, _393, _394), vec3(_392, _393, _394)));
    float _401 = _398 * _394;
    float _404 = ((_398 * _392) + ((cbMtdParam._m0[22u].x * _283) * ((_340.x * 2.0) + (-1.0)))) * cbMtdParam._m0[20u].w;
    float _405 = ((_398 * _393) + ((cbMtdParam._m0[22u].y * _283) * ((_340.y * 2.0) + (-1.0)))) * cbMtdParam._m0[20u].z;
    float _406 = fract(TEXCOORD.x);
    float _407 = fract(TEXCOORD.y);
    float _413;
    if (_404 > 0.0)
    {
        _413 = (1.0 - _406) / _404;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_404 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _406) / _404;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _413 = frontier_phi_3_2_ladder;
    }
    float _421;
    if (_405 > 0.0)
    {
        _421 = (1.0 - _407) / _405;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_405 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _407) / _405;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _421 = frontier_phi_7_6_ladder;
    }
    float _425 = (_401 > 0.0) ? (cbMtdParam._m0[16u].x / _401) : 5000.0;
    float _426 = isnan(_421) ? _413 : (isnan(_413) ? _421 : min(_413, _421));
    float _427 = isnan(_425) ? _426 : (isnan(_426) ? _425 : min(_426, _425));
    float _431 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _438 = ((_427 * _401) + _431) / _431;
    vec4 _463 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * ((((((_406 + (-0.5)) + (_427 * _404)) / _438) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * ((((((_407 + (-0.5)) + (_427 * _405)) / _438) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    float _479 = _283 * 0.1500000059604644775390625;
    float _487 = (_479 * (((_463.x * _283) * cbMtdParam._m0[9u].x) - _318)) + _318;
    float _488 = (_479 * (((_463.y * _283) * cbMtdParam._m0[9u].y) - _320)) + _320;
    float _489 = (_479 * (((_463.z * _283) * cbMtdParam._m0[9u].z) - _322)) + _322;
    vec4 _502 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _506 = _502.z;
    float _509 = (_502.x * 2.0) + (-1.0);
    float _510 = (_502.y * 2.0) + (-1.0);
    float _511 = dot(vec2(_509, _510), vec2(_509, _510));
    float _3178 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _516 = sqrt(1.0 - (isnan(1.0) ? _3178 : (isnan(_3178) ? 1.0 : min(_3178, 1.0))));
    float _519 = fma(_516, _201, fma(_510, _208, _509 * _194));
    float _522 = fma(_516, _202, fma(_510, _209, _509 * _195));
    float _525 = fma(_516, _203, fma(_510, _210, _509 * _196));
    float _529 = inversesqrt(dot(vec3(_519, _522, _525), vec3(_519, _522, _525)));
    float _530 = _529 * _519;
    float _531 = _529 * _522;
    float _532 = _529 * _525;
    float _3189 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _533 = isnan(1.0) ? _3189 : (isnan(_3189) ? 1.0 : min(_3189, 1.0));
    float _3200 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _3211 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _3222 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _552 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _556 = inversesqrt(dot(vec3(_265, _266, _267), vec3(_265, _266, _267)));
    float _557 = _265 * _556;
    float _558 = _266 * _556;
    float _559 = _267 * _556;
    vec4 _564 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _566 = _564.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _723 = sqrt(((_265 * _265) + (_266 * _266)) + (_267 * _267));
        float _729 = (cbMatDynParam._m0[5u].x * _723) + cbMatDynParam._m0[5u].y;
        float _3233 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
        float _730 = isnan(1.0) ? _3233 : (isnan(_3233) ? 1.0 : min(_3233, 1.0));
        float _734 = (cbMatDynParam._m0[5u].z * _723) + cbMatDynParam._m0[5u].w;
        float _3244 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3244 : (isnan(_3244) ? 1.0 : min(_3244, 1.0))) - _730)) + _730) < ((_566 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _578 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _579 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _598 = fma(_532, cbSceneParam._m0[5u].z, fma(_531, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _530));
    float _601 = fma(_532, cbSceneParam._m0[6u].z, fma(_531, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _530));
    float _604 = fma(_532, cbSceneParam._m0[7u].z, fma(_531, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _530));
    uint _617 = uint(roundEven(NORMAL.w)) * 13u;
    uint _619 = _617 + 9u;
    uint _620 = _619 + uint(cbMatDynParam._m0[0u].w);
    float _626 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3200 : (isnan(_3200) ? 1.0 : min(_3200, 1.0)))) * cbInstanceData._m0[_620].x;
    float _627 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3211 : (isnan(_3211) ? 1.0 : min(_3211, 1.0)))) * cbInstanceData._m0[_620].y;
    float _628 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3222 : (isnan(_3222) ? 1.0 : min(_3222, 1.0)))) * cbInstanceData._m0[_620].z;
    float _3255 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _629 = isnan(1.0) ? _3255 : (isnan(_3255) ? 1.0 : min(_3255, 1.0));
    float _3266 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _630 = isnan(1.0) ? _3266 : (isnan(_3266) ? 1.0 : min(_3266, 1.0));
    float _3277 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _631 = isnan(1.0) ? _3277 : (isnan(_3277) ? 1.0 : min(_3277, 1.0));
    vec4 _640 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _578, cbSceneParam._m0[86u].y * _579));
    float _643 = _640.x * TEXCOORD_4.z;
    float _644 = dot(vec3(_530, _531, _532), vec3(_557, _558, _559));
    float _647 = _644 * 2.0;
    float _651 = (_647 * _530) - _557;
    float _652 = (_647 * _531) - _558;
    float _653 = (_647 * _532) - _559;
    float _657 = abs(dot(vec3(_557, _558, _559), vec3(_530, _531, _532)));
    float _3288 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    float _659 = sqrt(_533);
    float _672 = exp2((_659 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3288 : (isnan(_3288) ? 1.0 : min(_3288, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_659 * 3.0));
    float _704 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _708 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _712 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1041;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _768 = fma(_712, cbModelParam._m0[26u].z, fma(_708, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _704));
        float _772 = fma(_712, cbModelParam._m0[27u].z, fma(_708, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _704));
        float _776 = fma(_712, cbModelParam._m0[28u].z, fma(_708, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _704));
        float _799 = _704 + _530;
        float _800 = _708 + _531;
        float _801 = _712 + _532;
        float _811 = fma(_801, cbModelParam._m0[26u].z, fma(_800, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _799)) - _768;
        float _812 = fma(_801, cbModelParam._m0[27u].z, fma(_800, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _799)) - _772;
        float _813 = fma(_801, cbModelParam._m0[28u].z, fma(_800, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _799)) - _776;
        float _817 = inversesqrt(dot(vec3(_811, _812, _813), vec3(_811, _812, _813)));
        float _830 = ((_817 * _811) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_768 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _831 = ((_817 * _812) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_772 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _832 = ((_817 * _813) / cbModelParam._m0[34u].z) + ((((((_776 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _835 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_830, _831, _832), 0.0);
        vec4 _842 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_830, _831, _832), 0.0);
        vec4 _849 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_830, _831, _832), 0.0);
        vec4 _856 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_830, _831, _832), 0.0);
        float _869 = exp2((_835.w + (-0.5)) * 20.0) * 2.0;
        float _870 = _869 * (_835.x + (-0.5));
        float _871 = _869 * (_835.y + (-0.5));
        float _872 = _869 * (_835.z + (-0.5));
        float _879 = exp2((_842.w + (-0.5)) * 20.0) * 2.0;
        float _880 = _879 * (_842.x + (-0.5));
        float _881 = _879 * (_842.y + (-0.5));
        float _882 = _879 * (_842.z + (-0.5));
        float _889 = exp2((_849.w + (-0.5)) * 20.0) * 2.0;
        float _890 = _889 * (_849.x + (-0.5));
        float _891 = _889 * (_849.y + (-0.5));
        float _892 = _889 * (_849.z + (-0.5));
        float _899 = exp2((_856.w + (-0.5)) * 20.0) * 2.0;
        float _900 = _899 * (_856.x + (-0.5));
        float _901 = _899 * (_856.y + (-0.5));
        float _902 = _899 * (_856.z + (-0.5));
        float _903 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _904 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _905 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _906 = _870 * 0.5;
        float _907 = _880 * 0.5;
        float _908 = _890 * 0.5;
        float _909 = dot(vec3(_906, _907, _908), vec3(_906, _907, _908));
        float _914 = (_909 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_909);
        float _923 = (dot(vec3(_530, _531, _532), vec3(_914 * _906, _914 * _907, _914 * _908)) + 1.0) * 0.5;
        float _3314 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _933 = sqrt(((_907 * _907) + (_906 * _906)) + (_908 * _908)) / (_903 + 9.9999997473787516355514526367188e-06);
        float _3325 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        float _934 = isnan(1.0) ? _3325 : (isnan(_3325) ? 1.0 : min(_3325, 1.0));
        float _935 = _934 * 2.0;
        float _939 = (1.0 - _934) / (_934 + 1.0);
        float _3336 = isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0));
        float _940 = isnan(1.0) ? _3336 : (isnan(_3336) ? 1.0 : min(_3336, 1.0));
        float _949 = ((((1.0 - _940) * (_935 + 2.0)) * exp2(log2(isnan(1.0) ? _3314 : (isnan(_3314) ? 1.0 : min(_3314, 1.0))) * (_935 + 1.0))) + _940) * _903;
        float _950 = _871 * 0.5;
        float _951 = _881 * 0.5;
        float _952 = _891 * 0.5;
        float _953 = dot(vec3(_950, _951, _952), vec3(_950, _951, _952));
        float _958 = (_953 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_953);
        float _966 = (dot(vec3(_530, _531, _532), vec3(_958 * _950, _958 * _951, _958 * _952)) + 1.0) * 0.5;
        float _3347 = isnan(0.0) ? _966 : (isnan(_966) ? 0.0 : max(_966, 0.0));
        float _975 = sqrt(((_951 * _951) + (_950 * _950)) + (_952 * _952)) / (_904 + 9.9999997473787516355514526367188e-06);
        float _3358 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _976 = isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0));
        float _977 = _976 * 2.0;
        float _981 = (1.0 - _976) / (_976 + 1.0);
        float _3369 = isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0));
        float _982 = isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0));
        float _991 = ((((1.0 - _982) * (_977 + 2.0)) * exp2(log2(isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0))) * (_977 + 1.0))) + _982) * _904;
        float _992 = _872 * 0.5;
        float _993 = _882 * 0.5;
        float _994 = _892 * 0.5;
        float _995 = dot(vec3(_992, _993, _994), vec3(_992, _993, _994));
        float _1000 = (_995 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_995);
        float _1008 = (dot(vec3(_530, _531, _532), vec3(_1000 * _992, _1000 * _993, _1000 * _994)) + 1.0) * 0.5;
        float _3380 = isnan(0.0) ? _1008 : (isnan(_1008) ? 0.0 : max(_1008, 0.0));
        float _1017 = sqrt(((_993 * _993) + (_992 * _992)) + (_994 * _994)) / (_905 + 9.9999997473787516355514526367188e-06);
        float _3391 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0));
        float _1019 = _1018 * 2.0;
        float _1023 = (1.0 - _1018) / (_1018 + 1.0);
        float _3402 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0));
        float _1033 = ((((1.0 - _1024) * (_1019 + 2.0)) * exp2(log2(isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0))) * (_1019 + 1.0))) + _1024) * _905;
        _1041 = _872;
        _1043 = _871;
        _1044 = _870;
        _1045 = _882;
        _1046 = _881;
        _1047 = _880;
        _1048 = _892;
        _1049 = _891;
        _1050 = _890;
        _1051 = _905;
        _1052 = _904;
        _1053 = _903;
        _1054 = cbModelParam._m0[36u].z * (isnan(0.0) ? _949 : (isnan(_949) ? 0.0 : max(_949, 0.0)));
        _1055 = cbModelParam._m0[36u].z * (isnan(0.0) ? _991 : (isnan(_991) ? 0.0 : max(_991, 0.0)));
        _1056 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0)));
    }
    else
    {
        _1041 = _1042;
        _1043 = _1042;
        _1044 = _1042;
        _1045 = _1042;
        _1046 = _1042;
        _1047 = _1042;
        _1048 = _1042;
        _1049 = _1042;
        _1050 = _1042;
        _1051 = _1042;
        _1052 = _1042;
        _1053 = _1042;
        _1054 = 0.0;
        _1055 = 0.0;
        _1056 = 0.0;
    }
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1085 = fma(_712, cbModelParam._m0[30u].z, fma(_708, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _704));
        float _1089 = fma(_712, cbModelParam._m0[31u].z, fma(_708, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _704));
        float _1093 = fma(_712, cbModelParam._m0[32u].z, fma(_708, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _704));
        float _1116 = _704 + _530;
        float _1117 = _708 + _531;
        float _1118 = _712 + _532;
        float _1128 = fma(_1118, cbModelParam._m0[30u].z, fma(_1117, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1116)) - _1085;
        float _1129 = fma(_1118, cbModelParam._m0[31u].z, fma(_1117, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1116)) - _1089;
        float _1130 = fma(_1118, cbModelParam._m0[32u].z, fma(_1117, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1116)) - _1093;
        float _1134 = inversesqrt(dot(vec3(_1128, _1129, _1130), vec3(_1128, _1129, _1130)));
        float _1147 = ((_1134 * _1128) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1085 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1148 = ((_1134 * _1129) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1089 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1149 = ((_1134 * _1130) / cbModelParam._m0[35u].z) + ((((((_1093 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        vec4 _1172 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1147, _1148, _1149), 0.0);
        float _1184 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1151.x + (-0.5));
        float _1186 = _1184 * (_1151.y + (-0.5));
        float _1187 = _1184 * (_1151.z + (-0.5));
        float _1194 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1195 = _1194 * (_1158.x + (-0.5));
        float _1196 = _1194 * (_1158.y + (-0.5));
        float _1197 = _1194 * (_1158.z + (-0.5));
        float _1204 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1205 = _1204 * (_1165.x + (-0.5));
        float _1206 = _1204 * (_1165.y + (-0.5));
        float _1207 = _1204 * (_1165.z + (-0.5));
        float _1214 = exp2((_1172.w + (-0.5)) * 20.0) * 2.0;
        float _1215 = _1214 * (_1172.x + (-0.5));
        float _1216 = _1214 * (_1172.y + (-0.5));
        float _1217 = _1214 * (_1172.z + (-0.5));
        float _1218 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1219 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = _1185 * 0.5;
        float _1222 = _1195 * 0.5;
        float _1223 = _1205 * 0.5;
        float _1224 = dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223));
        float _1229 = (_1224 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1224);
        float _1237 = (dot(vec3(_530, _531, _532), vec3(_1229 * _1221, _1229 * _1222, _1229 * _1223)) + 1.0) * 0.5;
        float _3443 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1246 = sqrt(((_1222 * _1222) + (_1221 * _1221)) + (_1223 * _1223)) / (_1218 + 9.9999997473787516355514526367188e-06);
        float _3454 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
        float _1248 = _1247 * 2.0;
        float _1252 = (1.0 - _1247) / (_1247 + 1.0);
        float _3465 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0));
        float _1262 = ((((1.0 - _1253) * (_1248 + 2.0)) * exp2(log2(isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0))) * (_1248 + 1.0))) + _1253) * _1218;
        float _1263 = _1186 * 0.5;
        float _1264 = _1196 * 0.5;
        float _1265 = _1206 * 0.5;
        float _1266 = dot(vec3(_1263, _1264, _1265), vec3(_1263, _1264, _1265));
        float _1271 = (_1266 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1266);
        float _1279 = (dot(vec3(_530, _531, _532), vec3(_1271 * _1263, _1271 * _1264, _1271 * _1265)) + 1.0) * 0.5;
        float _3476 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1288 = sqrt(((_1264 * _1264) + (_1263 * _1263)) + (_1265 * _1265)) / (_1219 + 9.9999997473787516355514526367188e-06);
        float _3487 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0));
        float _1290 = _1289 * 2.0;
        float _1294 = (1.0 - _1289) / (_1289 + 1.0);
        float _3498 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0));
        float _1304 = ((((1.0 - _1295) * (_1290 + 2.0)) * exp2(log2(isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0))) * (_1290 + 1.0))) + _1295) * _1219;
        float _1305 = _1187 * 0.5;
        float _1306 = _1197 * 0.5;
        float _1307 = _1207 * 0.5;
        float _1308 = dot(vec3(_1305, _1306, _1307), vec3(_1305, _1306, _1307));
        float _1313 = (_1308 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1308);
        float _1321 = (dot(vec3(_530, _531, _532), vec3(_1313 * _1305, _1313 * _1306, _1313 * _1307)) + 1.0) * 0.5;
        float _3509 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
        float _1330 = sqrt(((_1306 * _1306) + (_1305 * _1305)) + (_1307 * _1307)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _3520 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1331 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
        float _1332 = _1331 * 2.0;
        float _1336 = (1.0 - _1331) / (_1331 + 1.0);
        float _3531 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
        float _1346 = ((((1.0 - _1337) * (_1332 + 2.0)) * exp2(log2(isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0))) * (_1332 + 1.0))) + _1337) * _1220;
        _1354 = _1187;
        _1355 = _1186;
        _1356 = _1185;
        _1357 = _1197;
        _1358 = _1196;
        _1359 = _1195;
        _1360 = _1207;
        _1361 = _1206;
        _1362 = _1205;
        _1363 = _1220;
        _1364 = _1219;
        _1365 = _1218;
        _1366 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)));
        _1367 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0)));
        _1368 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0)));
    }
    else
    {
        _1354 = _1042;
        _1355 = _1042;
        _1356 = _1042;
        _1357 = _1042;
        _1358 = _1042;
        _1359 = _1042;
        _1360 = _1042;
        _1361 = _1042;
        _1362 = _1042;
        _1363 = _1042;
        _1364 = _1042;
        _1365 = _1042;
        _1366 = 0.0;
        _1367 = 0.0;
        _1368 = 0.0;
    }
    float _1378 = (cbModelParam._m0[1u].x * (_1366 - _1054)) + _1054;
    float _1379 = (cbModelParam._m0[1u].x * (_1367 - _1055)) + _1055;
    float _1380 = (cbModelParam._m0[1u].x * (_1368 - _1056)) + _1056;
    float _1401 = fma(_1380, cbSceneParam._m0[89u].z, fma(_1379, cbSceneParam._m0[89u].y, _1378 * cbSceneParam._m0[89u].x));
    float _1404 = fma(_1380, cbSceneParam._m0[90u].z, fma(_1379, cbSceneParam._m0[90u].y, _1378 * cbSceneParam._m0[90u].x));
    float _1407 = fma(_1380, cbSceneParam._m0[91u].z, fma(_1379, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1378));
    float _1422 = _651 * 0.5;
    float _1423 = _652 * 0.5;
    float _1424 = _653 * 0.5;
    float _1425 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1356, _1359, _1362, _1365));
    float _1428 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1355, _1358, _1361, _1364));
    float _1431 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1354, _1357, _1360, _1363));
    float _1465;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1438 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1041, _1045, _1048, _1051));
        float _1442 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1043, _1046, _1049, _1052));
        float _1446 = dot(vec4(_1422, _1423, _1424, 1.0), vec4(_1044, _1047, _1050, _1053));
        float _1453 = dot(vec4(cbModelParam._m0[39u]), vec4(_1422, _1423, _1424, 1.0));
        _1465 = dot(vec3(isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)), isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0)), isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1453) ? 0.0 : (isnan(0.0) ? _1453 : max(0.0, _1453))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1465 = 1.0;
    }
    float _1476;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1467 = dot(vec4(cbModelParam._m0[40u]), vec4(_1422, _1423, _1424, 1.0));
        _1476 = dot(vec3(isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)), isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0)), isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1467) ? 0.0 : (isnan(0.0) ? _1467 : max(0.0, _1467))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1476 = 1.0;
    }
    float _1480 = (_1476 * cbModelParam._m0[1u].x) + (_1465 * (1.0 - cbModelParam._m0[1u].x));
    float _1490 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _533);
    float _1491 = isnan(_1490) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1490 : min(cbModelParam._m0[25u].z, _1490));
    float _1573;
    float _1575;
    float _1577;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1540 = fma(_712, cbModelParam._m0[13u].z, fma(_708, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _704)) + cbModelParam._m0[13u].w;
        float _1544 = fma(_712, cbModelParam._m0[14u].z, fma(_708, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _704)) + cbModelParam._m0[14u].w;
        float _1548 = fma(_712, cbModelParam._m0[15u].z, fma(_708, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _704)) + cbModelParam._m0[15u].w;
        float _1551 = fma(_653, cbModelParam._m0[13u].z, fma(_652, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _651));
        float _1554 = fma(_653, cbModelParam._m0[14u].z, fma(_652, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _651));
        float _1557 = fma(_653, cbModelParam._m0[15u].z, fma(_652, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _651));
        float _1585;
        if (_1551 > 0.0)
        {
            _1585 = abs((1.0 - _1540) / _1551);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1551 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1540 + 1.0) / _1551);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1585 = frontier_phi_25_23_ladder;
        }
        float _1932;
        if (_1554 > 0.0)
        {
            _1932 = abs((1.0 - _1544) / _1554);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1554 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1544 + 1.0) / _1554);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1932 = frontier_phi_34_30_ladder;
        }
        float _2240;
        if (_1557 > 0.0)
        {
            _2240 = abs((1.0 - _1548) / _1557);
        }
        else
        {
            float frontier_phi_48_41_ladder;
            if (_1557 < 0.0)
            {
                frontier_phi_48_41_ladder = abs((_1548 + 1.0) / _1557);
            }
            else
            {
                frontier_phi_48_41_ladder = 5000.0;
            }
            _2240 = frontier_phi_48_41_ladder;
        }
        float _2242 = isnan(_1932) ? _1585 : (isnan(_1585) ? _1932 : min(_1585, _1932));
        float _2243 = isnan(_2240) ? _2242 : (isnan(_2242) ? _2240 : min(_2242, _2240));
        float _2247 = (_2243 * _1551) + _1540;
        float _2248 = (_2243 * _1554) + _1544;
        float _2249 = (_2243 * _1557) + _1548;
        float _2250 = _2243 * 9.9999997473787516355514526367188e-05;
        float _2251 = (-1.0) - _2250;
        float _2253 = _2250 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2249 > _2253) || ((_2249 < _2251) || ((_2248 > _2253) || ((_2248 < _2251) || ((_2247 < _2251) || (_2247 > _2253))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2391 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2249, cbModelParam._m0[9u].z, fma(_2248, cbModelParam._m0[9u].y, _2247 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2249, cbModelParam._m0[10u].z, fma(_2248, cbModelParam._m0[10u].y, _2247 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2249, cbModelParam._m0[11u].z, fma(_2248, cbModelParam._m0[11u].y, _2247 * cbModelParam._m0[11u].x))), _1491);
            frontier_phi_24_48_ladder = _2391.z * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_1 = _2391.y * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_2 = _2391.x * cbModelParam._m0[1u].y;
        }
        _1573 = frontier_phi_24_48_ladder_2;
        _1575 = frontier_phi_24_48_ladder_1;
        _1577 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1561 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_651, _652, _653), _1491);
        _1573 = _1561.x * cbModelParam._m0[1u].y;
        _1575 = _1561.y * cbModelParam._m0[1u].y;
        _1577 = _1561.z * cbModelParam._m0[1u].y;
    }
    float _1581 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _533);
    float _1582 = isnan(_1581) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1581 : min(cbModelParam._m0[25u].w, _1581));
    float _1672;
    float _1674;
    float _1676;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1636 = fma(_712, cbModelParam._m0[21u].z, fma(_708, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _704)) + cbModelParam._m0[21u].w;
        float _1640 = fma(_712, cbModelParam._m0[22u].z, fma(_708, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _704)) + cbModelParam._m0[22u].w;
        float _1644 = fma(_712, cbModelParam._m0[23u].z, fma(_708, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _704)) + cbModelParam._m0[23u].w;
        float _1647 = fma(_653, cbModelParam._m0[21u].z, fma(_652, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _651));
        float _1650 = fma(_653, cbModelParam._m0[22u].z, fma(_652, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _651));
        float _1653 = fma(_653, cbModelParam._m0[23u].z, fma(_652, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _651));
        float _1937;
        if (_1647 > 0.0)
        {
            _1937 = abs((1.0 - _1636) / _1647);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1647 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1636 + 1.0) / _1647);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1937 = frontier_phi_36_32_ladder;
        }
        float _2266;
        if (_1650 > 0.0)
        {
            _2266 = abs((1.0 - _1640) / _1650);
        }
        else
        {
            float frontier_phi_50_43_ladder;
            if (_1650 < 0.0)
            {
                frontier_phi_50_43_ladder = abs((_1640 + 1.0) / _1650);
            }
            else
            {
                frontier_phi_50_43_ladder = 5000.0;
            }
            _2266 = frontier_phi_50_43_ladder;
        }
        float _2456;
        if (_1653 > 0.0)
        {
            _2456 = abs((1.0 - _1644) / _1653);
        }
        else
        {
            float frontier_phi_68_61_ladder;
            if (_1653 < 0.0)
            {
                frontier_phi_68_61_ladder = abs((_1644 + 1.0) / _1653);
            }
            else
            {
                frontier_phi_68_61_ladder = 5000.0;
            }
            _2456 = frontier_phi_68_61_ladder;
        }
        float _2458 = isnan(_2266) ? _1937 : (isnan(_1937) ? _2266 : min(_1937, _2266));
        float _2459 = isnan(_2456) ? _2458 : (isnan(_2458) ? _2456 : min(_2458, _2456));
        float _2463 = (_2459 * _1647) + _1636;
        float _2464 = (_2459 * _1650) + _1640;
        float _2465 = (_2459 * _1653) + _1644;
        float _2466 = _2459 * 9.9999997473787516355514526367188e-05;
        float _2467 = (-1.0) - _2466;
        float _2469 = _2466 + 1.0;
        float frontier_phi_33_68_ladder;
        float frontier_phi_33_68_ladder_1;
        float frontier_phi_33_68_ladder_2;
        if ((_2465 > _2469) || ((_2465 < _2467) || ((_2464 > _2469) || ((_2464 < _2467) || ((_2463 < _2467) || (_2463 > _2469))))))
        {
            frontier_phi_33_68_ladder = 0.0;
            frontier_phi_33_68_ladder_1 = 0.0;
            frontier_phi_33_68_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2707 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2465, cbModelParam._m0[17u].z, fma(_2464, cbModelParam._m0[17u].y, _2463 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2465, cbModelParam._m0[18u].z, fma(_2464, cbModelParam._m0[18u].y, _2463 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2465, cbModelParam._m0[19u].z, fma(_2464, cbModelParam._m0[19u].y, _2463 * cbModelParam._m0[19u].x))), _1582);
            frontier_phi_33_68_ladder = _2707.y * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_1 = _2707.z * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_2 = _2707.x * cbModelParam._m0[1u].z;
        }
        _1672 = frontier_phi_33_68_ladder_2;
        _1674 = frontier_phi_33_68_ladder;
        _1676 = frontier_phi_33_68_ladder_1;
    }
    else
    {
        vec4 _1656 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_651, _652, _653), _1582);
        _1672 = _1656.x * cbModelParam._m0[1u].z;
        _1674 = _1656.y * cbModelParam._m0[1u].z;
        _1676 = _1656.z * cbModelParam._m0[1u].z;
    }
    float _1688 = ((((1.0 - _672) * ((_659 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_672 * _659)) * _643;
    float _1689 = _1688 * ((cbModelParam._m0[1u].w * (_1672 - _1573)) + _1573);
    float _1690 = _1688 * ((cbModelParam._m0[1u].w * (_1674 - _1575)) + _1575);
    float _1691 = _1688 * ((cbModelParam._m0[1u].w * (_1676 - _1577)) + _1577);
    float _1694 = fma(_1691, cbSceneParam._m0[89u].z, fma(_1690, cbSceneParam._m0[89u].y, _1689 * cbSceneParam._m0[89u].x));
    float _1697 = fma(_1691, cbSceneParam._m0[90u].z, fma(_1690, cbSceneParam._m0[90u].y, _1689 * cbSceneParam._m0[90u].x));
    float _1700 = fma(_1691, cbSceneParam._m0[91u].z, fma(_1690, cbSceneParam._m0[91u].y, _1689 * cbSceneParam._m0[91u].x));
    uvec4 _1710 = floatBitsToUint(cbInstanceData._m0[_617 + 5u]);
    uint _1712 = _1710.x * 14u;
    uint _1713 = _1712 + 13u;
    float _1718 = _643 + (-1.0);
    float _1721 = (cbLight._m0[_1713].x * _1718) + 1.0;
    float _1722 = (cbLight._m0[_1713].y * _1718) + 1.0;
    uint _1723 = _1712 + 5u;
    float _1729 = isnan(1.0) ? _1722 : (isnan(_1722) ? 1.0 : min(_1722, 1.0));
    uint _1733 = _1712 + 4u;
    float _1739 = isnan(1.0) ? _1721 : (isnan(_1721) ? 1.0 : min(_1721, 1.0));
    uint _1743 = _1712 | 1u;
    float _1754 = dot(vec3(cbLight._m0[_1712].xyz), vec3(_530, _531, _532));
    float _1757 = dot(vec3(cbLight._m0[_1743].xyz), vec3(_530, _531, _532));
    float _3667 = isnan(0.0) ? _1754 : (isnan(_1754) ? 0.0 : max(_1754, 0.0));
    float _3678 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
    float _1762 = (isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0))) * 0.3183098733425140380859375;
    float _1764 = (isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0))) * 0.3183098733425140380859375;
    float _1771 = ((cbLight._m0[_1723].x * _1729) * _1764) + ((cbLight._m0[_1733].x * _1739) * _1762);
    float _1772 = ((_1729 * cbLight._m0[_1723].y) * _1764) + ((_1739 * cbLight._m0[_1733].y) * _1762);
    float _1773 = ((_1729 * cbLight._m0[_1723].z) * _1764) + ((_1739 * cbLight._m0[_1733].z) * _1762);
    uint _1775 = _1712 + 8u;
    float _1788 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1712].w)) * _533) * 0.949999988079071044921875);
    float _1789 = _1788 * _1788;
    float _1790 = cbLight._m0[_1712].x + _557;
    float _1791 = cbLight._m0[_1712].y + _558;
    float _1792 = cbLight._m0[_1712].z + _559;
    float _1796 = inversesqrt(dot(vec3(_1790, _1791, _1792), vec3(_1790, _1791, _1792)));
    float _1797 = _1796 * _1790;
    float _1798 = _1796 * _1791;
    float _1799 = _1796 * _1792;
    float _1800 = dot(vec3(_530, _531, _532), vec3(cbLight._m0[_1712].xyz));
    float _3689 = isnan(0.0) ? _1800 : (isnan(_1800) ? 0.0 : max(_1800, 0.0));
    float _1803 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
    float _3700 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _1804 = isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0));
    float _1805 = dot(vec3(_530, _531, _532), vec3(_1797, _1798, _1799));
    float _3711 = isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0));
    float _1808 = isnan(1.0) ? _3711 : (isnan(_3711) ? 1.0 : min(_3711, 1.0));
    float _1809 = dot(vec3(cbLight._m0[_1712].xyz), vec3(_1797, _1798, _1799));
    float _3722 = isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0));
    float _1813 = _1789 * _1789;
    float _1817 = ((_1808 * _1808) * (_1813 + (-1.0))) + 1.0;
    float _1828 = (exp2(log2(1.0 - (isnan(1.0) ? _3722 : (isnan(_3722) ? 1.0 : min(_3722, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1829 = 1.0 - _1789;
    float _1840 = (0.5 / (((_1804 * ((_1803 * _1829) + _1789)) + 9.9999999392252902907785028219223e-09) + (((_1804 * _1829) + _1789) * _1803))) * _1803;
    float _3733 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
    float _1842 = (isnan(1.0) ? _3733 : (isnan(_3733) ? 1.0 : min(_3733, 1.0))) * (_1813 / ((_1817 * _1817) * 3.141590118408203125));
    uint _1853 = _1712 + 9u;
    float _1864 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1743].w)) * _533) * 0.949999988079071044921875);
    float _1865 = _1864 * _1864;
    float _1866 = cbLight._m0[_1743].x + _557;
    float _1867 = cbLight._m0[_1743].y + _558;
    float _1868 = cbLight._m0[_1743].z + _559;
    float _1872 = inversesqrt(dot(vec3(_1866, _1867, _1868), vec3(_1866, _1867, _1868)));
    float _1873 = _1872 * _1866;
    float _1874 = _1872 * _1867;
    float _1875 = _1872 * _1868;
    float _1876 = dot(vec3(_530, _531, _532), vec3(cbLight._m0[_1743].xyz));
    float _3744 = isnan(0.0) ? _1876 : (isnan(_1876) ? 0.0 : max(_1876, 0.0));
    float _1879 = isnan(1.0) ? _3744 : (isnan(_3744) ? 1.0 : min(_3744, 1.0));
    float _1880 = dot(vec3(_530, _531, _532), vec3(_1873, _1874, _1875));
    float _3755 = isnan(0.0) ? _1880 : (isnan(_1880) ? 0.0 : max(_1880, 0.0));
    float _1883 = isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0));
    float _1884 = dot(vec3(cbLight._m0[_1743].xyz), vec3(_1873, _1874, _1875));
    float _3766 = isnan(0.0) ? _1884 : (isnan(_1884) ? 0.0 : max(_1884, 0.0));
    float _1888 = _1865 * _1865;
    float _1892 = ((_1883 * _1883) * (_1888 + (-1.0))) + 1.0;
    float _1901 = (exp2(log2(1.0 - (isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1902 = 1.0 - _1865;
    float _1912 = (0.5 / (((_1804 * ((_1879 * _1902) + _1865)) + 9.9999999392252902907785028219223e-09) + (((_1804 * _1902) + _1865) * _1879))) * _1879;
    float _3777 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
    float _1914 = (isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0))) * (_1888 / ((_1892 * _1892) * 3.141590118408203125));
    float _1924 = (((_1901 * cbLight._m0[_1853].x) * _1914) * _1729) + (((_1828 * cbLight._m0[_1775].x) * _1842) * _1739);
    float _1925 = (((_1901 * cbLight._m0[_1853].y) * _1914) * _1729) + (((_1828 * cbLight._m0[_1775].y) * _1842) * _1739);
    float _1926 = (((_1901 * cbLight._m0[_1853].z) * _1914) * _1729) + (((_1828 * cbLight._m0[_1775].z) * _1842) * _1739);
    float _2041;
    float _2043;
    float _2045;
    float _2047;
    float _2049;
    float _2051;
    if (_1710.y == 0u)
    {
        float _1981 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1982 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1981;
        float _1983 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1981;
        float _1984 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1981;
        uvec4 _1996 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1997 = _1996.x;
        uint _2008 = uint((float(_1996.y) * floor(float(uint(cbSceneParam._m0[85u].y * _579) / _1997))) + floor(float(uint(cbSceneParam._m0[85u].x * _578) / _1997)));
        float _2018 = (log2(_1984 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2019 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
        uint _2022 = uint(isnan(14.0) ? _2019 : (isnan(_2019) ? 14.0 : min(_2019, 14.0)));
        uvec4 _2027 = texelFetch(g_lightClusterGridBuffer, int(((_2022 << 2u) + (_2008 << 6u)) >> 2u));
        uint _2028 = _2027.x;
        uint _2029 = _1996.z;
        float _2119;
        float _2121;
        float _2123;
        float _2125;
        float _2127;
        float _2129;
        if (((((1u << ((_2029 >> 4u) & 15u)) + 4294967295u) & _2028) == 0u) || ((_2029 & 240u) == 0u))
        {
            _2119 = 0.0;
            _2121 = 0.0;
            _2123 = 0.0;
            _2125 = 0.0;
            _2127 = 0.0;
            _2129 = 0.0;
        }
        else
        {
            float _2120;
            float _2122;
            float _2124;
            float _2126;
            float _2128;
            float _2130;
            float _2303 = 0.0;
            float _2304 = 0.0;
            float _2305 = 0.0;
            float _2306 = 0.0;
            float _2307 = 0.0;
            float _2308 = 0.0;
            uint _2309 = 0u;
            uint _2318;
            bool _2319;
            for (;;)
            {
                _2318 = texelFetch(g_lightClassification, int((((_2022 << 5u) + (_2008 << 9u)) + (_2309 << 2u)) >> 2u)).x;
                _2319 = _2318 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2319)
                {
                    frontier_phi_63_pred = _2305;
                    frontier_phi_63_pred_1 = _2308;
                    frontier_phi_63_pred_2 = _2307;
                    frontier_phi_63_pred_3 = _2306;
                    frontier_phi_63_pred_4 = _2304;
                    frontier_phi_63_pred_5 = _2303;
                }
                else
                {
                    float _2499;
                    float _2500;
                    float _2501;
                    float _2502;
                    float _2503;
                    float _2504;
                    uint _2505;
                    _2499 = _2303;
                    _2500 = _2304;
                    _2501 = _2305;
                    _2502 = _2306;
                    _2503 = _2307;
                    _2504 = _2308;
                    _2505 = _2318;
                    float _2400;
                    float _2401;
                    float _2402;
                    float _2403;
                    float _2404;
                    float _2405;
                    for (;;)
                    {
                        uint _2509 = uint(findLSB(_2505)) + (_2309 << 5u);
                        uint _2506 = (_2505 + 4294967295u) & _2505;
                        uint _2511 = _2509 * 48u;
                        vec4 _2525 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2511)).x, texelFetch(g_PointLightRenderingBuffer, int(_2511 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2511 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2511 + 3u)).x));
                        uint _2531 = (_2509 * 48u) + 4u;
                        vec4 _2544 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2531)).x, texelFetch(g_PointLightRenderingBuffer, int(_2531 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2531 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2531 + 3u)).x));
                        uint _2550 = (_2509 * 48u) + 8u;
                        vec3 _2561 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2550)).x, texelFetch(g_PointLightRenderingBuffer, int(_2550 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2550 + 2u)).x));
                        float _2565 = _2525.x - _1982;
                        float _2566 = _2525.y - _1983;
                        float _2567 = _2525.z - _1984;
                        float _2568 = dot(vec3(_2565, _2566, _2567), vec3(_2565, _2566, _2567));
                        float _2571 = inversesqrt(_2568);
                        float _2572 = _2571 * _2565;
                        float _2573 = _2571 * _2566;
                        float _2574 = _2571 * _2567;
                        float _2575 = dot(vec3(_598, _601, _604), vec3(_2572, _2573, _2574));
                        float _2580 = 1.0 - (_2568 * _2525.w);
                        float _3798 = isnan(0.0) ? _2580 : (isnan(_2580) ? 0.0 : max(_2580, 0.0));
                        float _2581 = isnan(1.0) ? _3798 : (isnan(_3798) ? 1.0 : min(_3798, 1.0));
                        float _2582 = sqrt(_2568) * _2544.w;
                        float _2585 = 1.39999997615814208984375 / (_2582 + 1.39999997615814208984375);
                        float _2586 = _2585 * _2585;
                        float _2589 = ((1.0 - _2586) * _2575) + _2586;
                        float _2592 = _2582 * _2582;
                        float _2596 = ((isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0))) * _2581) / ((_2592 * 0.699999988079071044921875) + 1.0);
                        float _2600 = (-0.0) - _1982;
                        float _2601 = (-0.0) - _1983;
                        float _2602 = (-0.0) - _1984;
                        float _2606 = inversesqrt(dot(vec3(_2600, _2601, _2602), vec3(_2600, _2601, _2602)));
                        float _2607 = _2606 * _2600;
                        float _2608 = _2606 * _2601;
                        float _2609 = _2606 * _2602;
                        float _2617 = exp2(log2(1.0 / ((_2592 * 3.5) + 5.0)) * 0.25);
                        float _2618 = 1.0 - _659;
                        float _2625 = sqrt(1.0 - ((1.0 - (_2618 * _2618)) * (1.0 - (_2617 * _2617))));
                        float _2626 = _2625 * _2625;
                        float _2627 = _2626 * _2626;
                        float _2628 = _2607 + _2572;
                        float _2629 = _2608 + _2573;
                        float _2630 = _2609 + _2574;
                        float _2634 = inversesqrt(dot(vec3(_2628, _2629, _2630), vec3(_2628, _2629, _2630)));
                        float _2638 = dot(vec3(_598, _601, _604), vec3(_2607, _2608, _2609));
                        float _3814 = isnan(0.0) ? _2638 : (isnan(_2638) ? 0.0 : max(_2638, 0.0));
                        float _2641 = isnan(1.0) ? _3814 : (isnan(_3814) ? 1.0 : min(_3814, 1.0));
                        float _2642 = dot(vec3(_598, _601, _604), vec3(_2634 * _2628, _2634 * _2629, _2634 * _2630));
                        float _3825 = isnan(0.0) ? _2642 : (isnan(_2642) ? 0.0 : max(_2642, 0.0));
                        float _2645 = isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0));
                        float _2649 = ((_2645 * _2645) * (_2627 + (-1.0))) + 1.0;
                        float _2650 = _2585 * _2626;
                        float _2651 = _2650 * _2650;
                        float _2654 = ((1.0 - _2651) * _2575) + _2651;
                        float _3836 = isnan(0.0) ? _2654 : (isnan(_2654) ? 0.0 : max(_2654, 0.0));
                        float _2655 = isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0));
                        float _2656 = 1.0 - _2626;
                        float _2666 = (0.5 / (((_2655 * ((_2641 * _2656) + _2626)) + 9.9999999392252902907785028219223e-09) + (((_2655 * _2656) + _2626) * _2641))) * _2655;
                        float _3847 = isnan(0.0) ? _2666 : (isnan(_2666) ? 0.0 : max(_2666, 0.0));
                        float _2677 = (((_2627 * 3.1415927410125732421875) * (isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0)))) / ((_2649 * _2649) * ((_2592 * 2.1991131305694580078125) + 3.141590118408203125))) * _2581;
                        _2403 = (_2596 * _2544.x) + _2502;
                        _2404 = (_2596 * _2544.y) + _2503;
                        _2405 = (_2596 * _2544.z) + _2504;
                        _2400 = (_2677 * _2561.x) + _2499;
                        _2401 = (_2677 * _2561.y) + _2500;
                        _2402 = (_2677 * _2561.z) + _2501;
                        if (_2506 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2499 = _2400;
                            _2500 = _2401;
                            _2501 = _2402;
                            _2502 = _2403;
                            _2503 = _2404;
                            _2504 = _2405;
                            _2505 = _2506;
                        }
                    }
                    frontier_phi_63_pred = _2402;
                    frontier_phi_63_pred_1 = _2405;
                    frontier_phi_63_pred_2 = _2404;
                    frontier_phi_63_pred_3 = _2403;
                    frontier_phi_63_pred_4 = _2401;
                    frontier_phi_63_pred_5 = _2400;
                }
                _2124 = frontier_phi_63_pred;
                _2130 = frontier_phi_63_pred_1;
                _2128 = frontier_phi_63_pred_2;
                _2126 = frontier_phi_63_pred_3;
                _2122 = frontier_phi_63_pred_4;
                _2120 = frontier_phi_63_pred_5;
                uint _2310 = _2309 + 1u;
                if (_2310 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2303 = _2120;
                    _2304 = _2122;
                    _2305 = _2124;
                    _2306 = _2126;
                    _2307 = _2128;
                    _2308 = _2130;
                    _2309 = _2310;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2119 = _2120;
            _2121 = _2122;
            _2123 = _2124;
            _2125 = _2126;
            _2127 = _2128;
            _2129 = _2130;
        }
        uvec4 _2133 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2134 = _2133.z;
        uint _2136 = (_2134 >> 8u) & 15u;
        float _2271;
        float _2273;
        float _2275;
        float _2277;
        float _2279;
        float _2281;
        if (((4294967295u << _2136) & _2028) == 0u)
        {
            _2271 = _2119;
            _2273 = _2121;
            _2275 = _2123;
            _2277 = _2125;
            _2279 = _2127;
            _2281 = _2129;
        }
        else
        {
            float _2296 = inversesqrt(dot(vec3(_1982, _1983, _1984), vec3(_1982, _1983, _1984)));
            float _2297 = _2296 * _1982;
            float _2298 = _2296 * _1983;
            float _2299 = _2296 * _1984;
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            float frontier_phi_52_53_ladder_3;
            float frontier_phi_52_53_ladder_4;
            float frontier_phi_52_53_ladder_5;
            if (_2136 < ((_2134 >> 12u) & 15u))
            {
                float _2272;
                float _2274;
                float _2276;
                float _2278;
                float _2280;
                float _2282;
                float _2482 = _2119;
                float _2483 = _2121;
                float _2484 = _2123;
                float _2485 = _2125;
                float _2486 = _2127;
                float _2487 = _2129;
                uint _2488 = _2136;
                uint _2497;
                bool _2498;
                for (;;)
                {
                    _2497 = texelFetch(g_lightClassification, int((((_2022 << 5u) + (_2008 << 9u)) + (_2488 << 2u)) >> 2u)).x;
                    _2498 = _2497 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2498)
                    {
                        frontier_phi_77_pred = _2487;
                        frontier_phi_77_pred_1 = _2486;
                        frontier_phi_77_pred_2 = _2485;
                        frontier_phi_77_pred_3 = _2484;
                        frontier_phi_77_pred_4 = _2483;
                        frontier_phi_77_pred_5 = _2482;
                    }
                    else
                    {
                        float _2712;
                        float _2713;
                        float _2714;
                        float _2715;
                        float _2716;
                        float _2717;
                        float _3005;
                        float _3006;
                        float _3007;
                        float _3008;
                        float _3009;
                        float _3010;
                        float _2725 = _2482;
                        float _2726 = _2483;
                        float _2727 = _2484;
                        float _2728 = _2485;
                        float _2729 = _2486;
                        float _2730 = _2487;
                        uint _2731 = _2497;
                        uint _2732;
                        vec4 _2757;
                        float _2758;
                        vec4 _2773;
                        vec3 _2785;
                        vec4 _2800;
                        vec4 _2815;
                        float _2861;
                        bool _2862;
                        for (;;)
                        {
                            uint _2742 = ((_2488 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2731));
                            _2732 = (_2731 + 4294967295u) & _2731;
                            uint _2744 = _2742 * 40u;
                            _2757 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2744)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2744 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2744 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2744 + 3u)).x));
                            _2758 = _2757.w;
                            uint _2760 = (_2742 * 40u) + 4u;
                            _2773 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2760)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2760 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2760 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2760 + 3u)).x));
                            uint _2775 = (_2742 * 40u) + 8u;
                            _2785 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2775)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2775 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2775 + 2u)).x));
                            uint _2787 = (_2742 * 40u) + 16u;
                            _2800 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2787)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2787 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2787 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2787 + 3u)).x));
                            uint _2802 = (_2742 * 40u) + 20u;
                            _2815 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2802)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2802 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2802 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2802 + 3u)).x));
                            uint _2817 = (_2742 * 40u) + 24u;
                            vec4 _2830 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2817)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2817 + 3u)).x));
                            uint _2836 = (_2742 * 40u) + 28u;
                            vec4 _2849 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2836)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2836 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2836 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2836 + 3u)).x));
                            _2861 = fma(_1984, _2849.z, fma(_1983, _2849.y, _2849.x * _1982)) + _2849.w;
                            _2862 = !((fma(_1984, _2830.z, fma(_1983, _2830.y, _2830.x * _1982)) + _2830.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2862)
                            {
                                float _2889 = _2757.x - _1982;
                                float _2890 = _2757.y - _1983;
                                float _2891 = _2757.z - _1984;
                                float _2892 = dot(vec3(_2889, _2890, _2891), vec3(_2889, _2890, _2891));
                                float _2895 = inversesqrt(_2892);
                                float _2896 = _2895 * _2889;
                                float _2897 = _2895 * _2890;
                                float _2898 = _2895 * _2891;
                                float _2902 = 1.0 - (_2892 / (_2758 * _2758));
                                float _3858 = isnan(0.0) ? _2902 : (isnan(_2902) ? 0.0 : max(_2902, 0.0));
                                float _2903 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
                                float _2907 = sqrt(_2892) * _2773.w;
                                float _2909 = 1.39999997615814208984375 / (_2907 + 1.39999997615814208984375);
                                float _2910 = _2909 * _2909;
                                float _2913 = ((1.0 - _2910) * dot(vec3(_2896, _2897, _2898), vec3(_598, _601, _604))) + _2910;
                                float _2916 = _2907 * _2907;
                                float _2920 = (fma(_1984, _2800.z, fma(_1983, _2800.y, _2800.x * _1982)) + _2800.w) / _2861;
                                float _2921 = (fma(_1984, _2815.z, fma(_1983, _2815.y, _2815.x * _1982)) + _2815.w) / _2861;
                                float _2925 = 1.0 - dot(vec2(_2920, _2921), vec2(_2920, _2921));
                                float _3874 = isnan(0.0) ? _2925 : (isnan(_2925) ? 0.0 : max(_2925, 0.0));
                                float _2926 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
                                float _2927 = _2926 * (((isnan(0.0) ? _2913 : (isnan(_2913) ? 0.0 : max(_2913, 0.0))) * _2903) / ((_2916 * 0.699999988079071044921875) + 1.0));
                                float _2939 = exp2(log2(1.0 / ((_2916 * 3.5) + 5.0)) * 0.25);
                                float _2940 = 1.0 - _659;
                                float _2947 = sqrt(1.0 - ((1.0 - (_2940 * _2940)) * (1.0 - (_2939 * _2939))));
                                float _2948 = _2947 * _2947;
                                float _2949 = _2948 * _2948;
                                float _2950 = _2896 - _2297;
                                float _2951 = _2897 - _2298;
                                float _2952 = _2898 - _2299;
                                float _2956 = inversesqrt(dot(vec3(_2950, _2951, _2952), vec3(_2950, _2951, _2952)));
                                float _2960 = dot(vec3(_598, _601, _604), vec3((-0.0) - _2297, (-0.0) - _2298, (-0.0) - _2299));
                                float _3885 = isnan(0.0) ? _2960 : (isnan(_2960) ? 0.0 : max(_2960, 0.0));
                                float _2963 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
                                float _2964 = dot(vec3(_598, _601, _604), vec3(_2956 * _2950, _2956 * _2951, _2956 * _2952));
                                float _3896 = isnan(0.0) ? _2964 : (isnan(_2964) ? 0.0 : max(_2964, 0.0));
                                float _2967 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
                                float _2971 = ((_2967 * _2967) * (_2949 + (-1.0))) + 1.0;
                                float _2972 = _2909 * _2948;
                                float _2973 = _2972 * _2972;
                                float _2979 = ((1.0 - _2973) * dot(vec3(_598, _601, _604), vec3(_2896, _2897, _2898))) + _2973;
                                float _3907 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0));
                                float _2980 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
                                float _2981 = 1.0 - _2948;
                                float _2991 = (0.5 / (((_2980 * ((_2963 * _2981) + _2948)) + 9.9999999392252902907785028219223e-09) + (((_2980 * _2981) + _2948) * _2963))) * _2980;
                                float _3918 = isnan(0.0) ? _2991 : (isnan(_2991) ? 0.0 : max(_2991, 0.0));
                                float _3001 = (_2926 * _2903) * (((_2949 * 3.1415927410125732421875) * (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0)))) / ((_2971 * _2971) * ((_2916 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _2927 * _2773.x;
                                frontier_phi_83_pred_1 = _2927 * _2773.z;
                                frontier_phi_83_pred_2 = _2927 * _2773.y;
                                frontier_phi_83_pred_3 = _3001 * _2785.z;
                                frontier_phi_83_pred_4 = _3001 * _2785.y;
                                frontier_phi_83_pred_5 = _3001 * _2785.x;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3008 = frontier_phi_83_pred;
                            _3010 = frontier_phi_83_pred_1;
                            _3009 = frontier_phi_83_pred_2;
                            _3007 = frontier_phi_83_pred_3;
                            _3006 = frontier_phi_83_pred_4;
                            _3005 = frontier_phi_83_pred_5;
                            _2715 = _3008 + _2728;
                            _2716 = _3009 + _2729;
                            _2717 = _3010 + _2730;
                            _2712 = _3005 + _2725;
                            _2713 = _3006 + _2726;
                            _2714 = _3007 + _2727;
                            if (_2732 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2725 = _2712;
                                _2726 = _2713;
                                _2727 = _2714;
                                _2728 = _2715;
                                _2729 = _2716;
                                _2730 = _2717;
                                _2731 = _2732;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2717;
                        frontier_phi_77_pred_1 = _2716;
                        frontier_phi_77_pred_2 = _2715;
                        frontier_phi_77_pred_3 = _2714;
                        frontier_phi_77_pred_4 = _2713;
                        frontier_phi_77_pred_5 = _2712;
                    }
                    _2282 = frontier_phi_77_pred;
                    _2280 = frontier_phi_77_pred_1;
                    _2278 = frontier_phi_77_pred_2;
                    _2276 = frontier_phi_77_pred_3;
                    _2274 = frontier_phi_77_pred_4;
                    _2272 = frontier_phi_77_pred_5;
                    uint _2489 = _2488 + 1u;
                    if (_2489 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2482 = _2272;
                        _2483 = _2274;
                        _2484 = _2276;
                        _2485 = _2278;
                        _2486 = _2280;
                        _2487 = _2282;
                        _2488 = _2489;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _2274;
                frontier_phi_52_53_ladder_1 = _2282;
                frontier_phi_52_53_ladder_2 = _2280;
                frontier_phi_52_53_ladder_3 = _2278;
                frontier_phi_52_53_ladder_4 = _2276;
                frontier_phi_52_53_ladder_5 = _2272;
            }
            else
            {
                frontier_phi_52_53_ladder = _2121;
                frontier_phi_52_53_ladder_1 = _2129;
                frontier_phi_52_53_ladder_2 = _2127;
                frontier_phi_52_53_ladder_3 = _2125;
                frontier_phi_52_53_ladder_4 = _2123;
                frontier_phi_52_53_ladder_5 = _2119;
            }
            _2271 = frontier_phi_52_53_ladder_5;
            _2273 = frontier_phi_52_53_ladder;
            _2275 = frontier_phi_52_53_ladder_4;
            _2277 = frontier_phi_52_53_ladder_3;
            _2279 = frontier_phi_52_53_ladder_2;
            _2281 = frontier_phi_52_53_ladder_1;
        }
        float _2286 = isnan(1.0) ? _643 : (isnan(_643) ? 1.0 : min(_643, 1.0));
        _2041 = (_2286 * _2277) + _1771;
        _2043 = (_2286 * _2279) + _1772;
        _2045 = (_2286 * _2281) + _1773;
        _2047 = ((_2271 * 0.039999999105930328369140625) * _2286) + _1924;
        _2049 = ((_2273 * 0.039999999105930328369140625) * _2286) + _1925;
        _2051 = ((_2275 * 0.039999999105930328369140625) * _2286) + _1926;
    }
    else
    {
        _2041 = _1771;
        _2043 = _1772;
        _2045 = _1773;
        _2047 = _1924;
        _2049 = _1925;
        _2051 = _1926;
    }
    float _3934 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _3945 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _3956 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _2068 = ((isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * (_2041 + ((isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0))) * _643))) + ((_2047 + ((isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0))) * _1480)) * cbPerFrame._m0[3u].x);
    float _2069 = ((isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0))) * (_2043 + ((isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0))) * _643))) + ((_2049 + ((isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))) * _1480)) * cbPerFrame._m0[3u].x);
    float _2070 = ((isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0))) * (_2045 + ((isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0))) * _643))) + ((_2051 + ((isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0))) * _1480)) * cbPerFrame._m0[3u].x);
    float _2071 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2072 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
    float _2073 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
    uint _2074 = _617 + 6u;
    float _2082 = _578 / cbSceneParam._m0[86u].x;
    float _2083 = _579 / cbSceneParam._m0[86u].y;
    vec4 _2097 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2082, _2083, (log2((isnan(cbSceneParam._m0[77u].w) ? _552 : (isnan(_552) ? cbSceneParam._m0[77u].w : min(_552, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2099 = _2097.x;
    float _2100 = _2097.y;
    float _2101 = _2097.z;
    float _2102 = _2097.w;
    float _2182;
    float _2184;
    float _2186;
    float _2188;
    if (_552 > cbSceneParam._m0[78u].w)
    {
        float _2144 = isnan(_552) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _552 : min(cbSceneParam._m0[80u].w, _552));
        float _2145 = _2144 / _552;
        float _2156 = _2145 * _265;
        float _2157 = _266 * _2145;
        float _2158 = (-0.0) - _2157;
        float _2159 = _2145 * _267;
        float _2161 = (cbSceneParam._m0[77u].w * _2158) / _2144;
        float _2162 = _2161 + cbSceneParam._m0[79u].w;
        float _2163 = cbSceneParam._m0[79u].w - _2157;
        float _2169 = sqrt(((_2156 * _2156) + (_2157 * _2157)) + (_2159 * _2159));
        float _2172 = (1.0 - (cbSceneParam._m0[77u].w / _2144)) * _2169;
        float _2178 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2180 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2413;
        if (abs((_2158 - _2161) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2413 = ((((_2162 > 0.0) ? exp2(_2178 * _2162) : (2.0 - exp2(_2180 * _2162))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2172;
        }
        else
        {
            float _2332 = 1.0 / cbSceneParam._m0[80u].x;
            float _2333 = isnan(_2163) ? _2162 : (isnan(_2162) ? _2163 : max(_2162, _2163));
            float _2334 = isnan(_2163) ? _2162 : (isnan(_2162) ? _2163 : min(_2162, _2163));
            float _2343 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : min(_2333, 0.0));
            float _2344 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : min(_2334, 0.0));
            _2413 = ((abs(_2169 / _2158) * cbSceneParam._m0[80u].y) * ((((_2343 - _2344) * 2.0) - ((exp2(_2178 * (isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0)))) - exp2(_2178 * (isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0))))) * _2332)) - ((exp2(_2180 * _2343) - exp2(_2180 * _2344)) * _2332))) + (_2172 * cbSceneParam._m0[80u].z);
        }
        vec4 _2415 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2082, _2083, 1.0), 0.0);
        float _2424 = exp2((_2413 * (-1.44269502162933349609375)) * (1.0 - _2415.w));
        float _2425 = log2(_2424);
        float _2441 = log2(_2102);
        _2182 = (exp2(_2441 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2425 * cbSceneParam._m0[78u].x)) * _2415.x) / cbSceneParam._m0[78u].x)) + _2099;
        _2184 = (exp2(_2441 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2425 * cbSceneParam._m0[78u].y)) * _2415.y) / cbSceneParam._m0[78u].y)) + _2100;
        _2186 = (exp2(_2441 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2425 * cbSceneParam._m0[78u].z)) * _2415.z) / cbSceneParam._m0[78u].z)) + _2101;
        _2188 = _2424 * _2102;
    }
    else
    {
        _2182 = _2099;
        _2184 = _2100;
        _2186 = _2101;
        _2188 = _2102;
    }
    bool _2451;
    vec4 _2198;
    vec4 _2220;
    float _2222;
    float _2226;
    float _2227;
    float _2228;
    float _2229;
    bool _2239;
    for (;;)
    {
        _2198 = cbMatDynParam._m0[0u];
        float _2200 = roundEven(_2198.y);
        bool _2201 = _2200 == 3.0;
        float _2202 = log2(_2188);
        float _2209 = exp2(_2202 * cbSceneParam._m0[78u].x) * _2071;
        float _2210 = exp2(_2202 * cbSceneParam._m0[78u].y) * _2072;
        float _2211 = exp2(_2202 * cbSceneParam._m0[78u].z) * _2073;
        float _2218 = _566 + (-0.5);
        _2220 = cbMtdParam._m0[1u];
        _2222 = _2220.y * _2218;
        float _2225 = (_2200 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2226 = _2225 * (_2201 ? _2209 : (_2209 + (cbSceneParam._m0[72u].w * _2182)));
        _2227 = _2225 * (_2201 ? _2210 : (_2210 + (cbSceneParam._m0[72u].w * _2184)));
        _2228 = _2225 * (_2201 ? _2211 : (_2211 + (cbSceneParam._m0[72u].w * _2186)));
        _2229 = _2218 * 0.999000012874603271484375;
        _2239 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2239)
        {
            if ((cbInstanceData._m0[_617 + 7u].x + _2229) < 0.5)
            {
                _2451 = true;
                break;
            }
        }
        uint _2367 = _619 + uint(_2198.w);
        if ((cbInstanceData._m0[_2367].w < 1.0) && ((cbInstanceData._m0[_2367].w + _2229) < 0.5))
        {
            _2451 = true;
            break;
        }
        if ((_2222 + 1.0) < _2220.x)
        {
            _2451 = true;
            break;
        }
        _2451 = false;
        break;
    }
    float _2682;
    if (_2451)
    {
        discard_state = true;
        _2682 = 0.0;
    }
    else
    {
        _2682 = cbInstanceData._m0[_2074].w;
    }
    SV_Target.x = _2226;
    SV_Target.y = _2227;
    SV_Target.z = _2228;
    SV_Target.w = _2682;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2074].w;
    discard_exit();
}


