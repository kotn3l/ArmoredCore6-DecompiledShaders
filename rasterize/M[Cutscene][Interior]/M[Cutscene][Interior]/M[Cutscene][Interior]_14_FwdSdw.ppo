#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1001;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _194 = _193 * _186;
    float _195 = _193 * _187;
    float _196 = _193 * _188;
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208 = _207 * TANGENT.x;
    float _209 = _207 * TANGENT.y;
    float _210 = _207 * TANGENT.z;
    float _255 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _265 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _255);
    float _266 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _255);
    float _267 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _255);
    vec4 _280 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _283 = _280.x;
    vec4 _301 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _318 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _283) + cbMtdParam._m0[12u].x) * _301.x;
    float _320 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _283) + cbMtdParam._m0[12u].y) * _301.y;
    float _322 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _283) + cbMtdParam._m0[12u].z) * _301.z;
    vec4 _340 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _376 = cbMtdParam._m0[24u].x + _265;
    float _377 = cbMtdParam._m0[24u].y + _266;
    float _378 = cbMtdParam._m0[24u].z + _267;
    float _392 = (-0.0) - dot(vec3(_376, _377, _378), vec3(_194, _195, _196));
    float _393 = (-0.0) - dot(vec3(_376, _377, _378), vec3(_208, _209, _210));
    float _394 = (-0.0) - dot(vec3(_376, _377, _378), vec3((-0.0) - _201, (-0.0) - _202, (-0.0) - _203));
    float _398 = inversesqrt(dot(vec3(_392, _393, _394), vec3(_392, _393, _394)));
    float _401 = _398 * _394;
    float _404 = ((_398 * _392) + ((cbMtdParam._m0[22u].x * _283) * ((_340.x * 2.0) + (-1.0)))) * cbMtdParam._m0[20u].w;
    float _405 = ((_398 * _393) + ((cbMtdParam._m0[22u].y * _283) * ((_340.y * 2.0) + (-1.0)))) * cbMtdParam._m0[20u].z;
    float _406 = fract(TEXCOORD.x);
    float _407 = fract(TEXCOORD.y);
    float _413;
    if (_404 > 0.0)
    {
        _413 = (1.0 - _406) / _404;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_404 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _406) / _404;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _413 = frontier_phi_3_2_ladder;
    }
    float _421;
    if (_405 > 0.0)
    {
        _421 = (1.0 - _407) / _405;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_405 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _407) / _405;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _421 = frontier_phi_7_6_ladder;
    }
    float _425 = (_401 > 0.0) ? (cbMtdParam._m0[16u].x / _401) : 5000.0;
    float _426 = isnan(_421) ? _413 : (isnan(_413) ? _421 : min(_413, _421));
    float _427 = isnan(_425) ? _426 : (isnan(_426) ? _425 : min(_426, _425));
    float _431 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _438 = ((_427 * _401) + _431) / _431;
    vec4 _463 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * ((((((_406 + (-0.5)) + (_427 * _404)) / _438) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * ((((((_407 + (-0.5)) + (_427 * _405)) / _438) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    float _479 = _283 * 0.1500000059604644775390625;
    float _487 = (_479 * (((_463.x * _283) * cbMtdParam._m0[9u].x) - _318)) + _318;
    float _488 = (_479 * (((_463.y * _283) * cbMtdParam._m0[9u].y) - _320)) + _320;
    float _489 = (_479 * (((_463.z * _283) * cbMtdParam._m0[9u].z) - _322)) + _322;
    vec4 _502 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _506 = _502.z;
    float _509 = (_502.x * 2.0) + (-1.0);
    float _510 = (_502.y * 2.0) + (-1.0);
    float _511 = dot(vec2(_509, _510), vec2(_509, _510));
    float _3354 = isnan(0.0) ? _511 : (isnan(_511) ? 0.0 : max(_511, 0.0));
    float _516 = sqrt(1.0 - (isnan(1.0) ? _3354 : (isnan(_3354) ? 1.0 : min(_3354, 1.0))));
    float _519 = fma(_516, _201, fma(_510, _208, _509 * _194));
    float _522 = fma(_516, _202, fma(_510, _209, _509 * _195));
    float _525 = fma(_516, _203, fma(_510, _210, _509 * _196));
    float _529 = inversesqrt(dot(vec3(_519, _522, _525), vec3(_519, _522, _525)));
    float _530 = _529 * _519;
    float _531 = _529 * _522;
    float _532 = _529 * _525;
    float _3365 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _533 = isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0));
    float _3376 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _3387 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _3398 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _552 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _556 = inversesqrt(dot(vec3(_265, _266, _267), vec3(_265, _266, _267)));
    float _557 = _265 * _556;
    float _558 = _266 * _556;
    float _559 = _267 * _556;
    float _565 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _566 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _585 = fma(_532, cbSceneParam._m0[5u].z, fma(_531, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _530));
    float _588 = fma(_532, cbSceneParam._m0[6u].z, fma(_531, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _530));
    float _591 = fma(_532, cbSceneParam._m0[7u].z, fma(_531, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _530));
    uint _604 = uint(roundEven(NORMAL.w)) * 13u;
    uint _607 = (_604 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _613 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0)))) * cbInstanceData._m0[_607].x;
    float _614 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0)))) * cbInstanceData._m0[_607].y;
    float _615 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0)))) * cbInstanceData._m0[_607].z;
    float _3409 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _616 = isnan(1.0) ? _3409 : (isnan(_3409) ? 1.0 : min(_3409, 1.0));
    float _3420 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _617 = isnan(1.0) ? _3420 : (isnan(_3420) ? 1.0 : min(_3420, 1.0));
    float _3431 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _618 = isnan(1.0) ? _3431 : (isnan(_3431) ? 1.0 : min(_3431, 1.0));
    vec4 _627 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _565, cbSceneParam._m0[86u].y * _566));
    float _630 = _627.x * TEXCOORD_4.z;
    float _631 = dot(vec3(_530, _531, _532), vec3(_557, _558, _559));
    float _634 = _631 * 2.0;
    float _638 = (_634 * _530) - _557;
    float _639 = (_634 * _531) - _558;
    float _640 = (_634 * _532) - _559;
    float _644 = abs(dot(vec3(_557, _558, _559), vec3(_530, _531, _532)));
    float _3442 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _646 = sqrt(_533);
    float _659 = exp2((_646 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_646 * 3.0));
    float _691 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _695 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _699 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1000;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    float _1014;
    float _1015;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _727 = fma(_699, cbModelParam._m0[26u].z, fma(_695, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _691));
        float _731 = fma(_699, cbModelParam._m0[27u].z, fma(_695, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _691));
        float _735 = fma(_699, cbModelParam._m0[28u].z, fma(_695, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _691));
        float _758 = _691 + _530;
        float _759 = _695 + _531;
        float _760 = _699 + _532;
        float _770 = fma(_760, cbModelParam._m0[26u].z, fma(_759, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _758)) - _727;
        float _771 = fma(_760, cbModelParam._m0[27u].z, fma(_759, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _758)) - _731;
        float _772 = fma(_760, cbModelParam._m0[28u].z, fma(_759, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _758)) - _735;
        float _776 = inversesqrt(dot(vec3(_770, _771, _772), vec3(_770, _771, _772)));
        float _789 = ((_776 * _770) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_727 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _790 = ((_776 * _771) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_731 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _791 = ((_776 * _772) / cbModelParam._m0[34u].z) + ((((((_735 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _794 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_789, _790, _791), 0.0);
        vec4 _801 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_789, _790, _791), 0.0);
        vec4 _808 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_789, _790, _791), 0.0);
        vec4 _815 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_789, _790, _791), 0.0);
        float _828 = exp2((_794.w + (-0.5)) * 20.0) * 2.0;
        float _829 = _828 * (_794.x + (-0.5));
        float _830 = _828 * (_794.y + (-0.5));
        float _831 = _828 * (_794.z + (-0.5));
        float _838 = exp2((_801.w + (-0.5)) * 20.0) * 2.0;
        float _839 = _838 * (_801.x + (-0.5));
        float _840 = _838 * (_801.y + (-0.5));
        float _841 = _838 * (_801.z + (-0.5));
        float _848 = exp2((_808.w + (-0.5)) * 20.0) * 2.0;
        float _849 = _848 * (_808.x + (-0.5));
        float _850 = _848 * (_808.y + (-0.5));
        float _851 = _848 * (_808.z + (-0.5));
        float _858 = exp2((_815.w + (-0.5)) * 20.0) * 2.0;
        float _859 = _858 * (_815.x + (-0.5));
        float _860 = _858 * (_815.y + (-0.5));
        float _861 = _858 * (_815.z + (-0.5));
        float _862 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _863 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _864 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        float _865 = _829 * 0.5;
        float _866 = _839 * 0.5;
        float _867 = _849 * 0.5;
        float _868 = dot(vec3(_865, _866, _867), vec3(_865, _866, _867));
        float _873 = (_868 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_868);
        float _882 = (dot(vec3(_530, _531, _532), vec3(_873 * _865, _873 * _866, _873 * _867)) + 1.0) * 0.5;
        float _3468 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _892 = sqrt(((_866 * _866) + (_865 * _865)) + (_867 * _867)) / (_862 + 9.9999997473787516355514526367188e-06);
        float _3479 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
        float _893 = isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0));
        float _894 = _893 * 2.0;
        float _898 = (1.0 - _893) / (_893 + 1.0);
        float _3490 = isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0));
        float _899 = isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0));
        float _908 = ((((1.0 - _899) * (_894 + 2.0)) * exp2(log2(isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0))) * (_894 + 1.0))) + _899) * _862;
        float _909 = _830 * 0.5;
        float _910 = _840 * 0.5;
        float _911 = _850 * 0.5;
        float _912 = dot(vec3(_909, _910, _911), vec3(_909, _910, _911));
        float _917 = (_912 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_912);
        float _925 = (dot(vec3(_530, _531, _532), vec3(_917 * _909, _917 * _910, _917 * _911)) + 1.0) * 0.5;
        float _3501 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _934 = sqrt(((_910 * _910) + (_909 * _909)) + (_911 * _911)) / (_863 + 9.9999997473787516355514526367188e-06);
        float _3512 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        float _935 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
        float _936 = _935 * 2.0;
        float _940 = (1.0 - _935) / (_935 + 1.0);
        float _3523 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _941 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
        float _950 = ((((1.0 - _941) * (_936 + 2.0)) * exp2(log2(isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0))) * (_936 + 1.0))) + _941) * _863;
        float _951 = _831 * 0.5;
        float _952 = _841 * 0.5;
        float _953 = _851 * 0.5;
        float _954 = dot(vec3(_951, _952, _953), vec3(_951, _952, _953));
        float _959 = (_954 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_954);
        float _967 = (dot(vec3(_530, _531, _532), vec3(_959 * _951, _959 * _952, _959 * _953)) + 1.0) * 0.5;
        float _3534 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _976 = sqrt(((_952 * _952) + (_951 * _951)) + (_953 * _953)) / (_864 + 9.9999997473787516355514526367188e-06);
        float _3545 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _977 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
        float _978 = _977 * 2.0;
        float _982 = (1.0 - _977) / (_977 + 1.0);
        float _3556 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
        float _992 = ((((1.0 - _983) * (_978 + 2.0)) * exp2(log2(isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0))) * (_978 + 1.0))) + _983) * _864;
        _1000 = _831;
        _1002 = _830;
        _1003 = _829;
        _1004 = _841;
        _1005 = _840;
        _1006 = _839;
        _1007 = _851;
        _1008 = _850;
        _1009 = _849;
        _1010 = _864;
        _1011 = _863;
        _1012 = _862;
        _1013 = cbModelParam._m0[36u].z * (isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0)));
        _1014 = cbModelParam._m0[36u].z * (isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0)));
        _1015 = cbModelParam._m0[36u].z * (isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0)));
    }
    else
    {
        _1000 = _1001;
        _1002 = _1001;
        _1003 = _1001;
        _1004 = _1001;
        _1005 = _1001;
        _1006 = _1001;
        _1007 = _1001;
        _1008 = _1001;
        _1009 = _1001;
        _1010 = _1001;
        _1011 = _1001;
        _1012 = _1001;
        _1013 = 0.0;
        _1014 = 0.0;
        _1015 = 0.0;
    }
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1041 = fma(_699, cbModelParam._m0[30u].z, fma(_695, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _691));
        float _1045 = fma(_699, cbModelParam._m0[31u].z, fma(_695, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _691));
        float _1049 = fma(_699, cbModelParam._m0[32u].z, fma(_695, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _691));
        float _1072 = _691 + _530;
        float _1073 = _695 + _531;
        float _1074 = _699 + _532;
        float _1084 = fma(_1074, cbModelParam._m0[30u].z, fma(_1073, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1072)) - _1041;
        float _1085 = fma(_1074, cbModelParam._m0[31u].z, fma(_1073, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1072)) - _1045;
        float _1086 = fma(_1074, cbModelParam._m0[32u].z, fma(_1073, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1072)) - _1049;
        float _1090 = inversesqrt(dot(vec3(_1084, _1085, _1086), vec3(_1084, _1085, _1086)));
        float _1103 = ((_1090 * _1084) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1041 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1104 = ((_1090 * _1085) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1045 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1105 = ((_1090 * _1086) / cbModelParam._m0[35u].z) + ((((((_1049 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1107 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1103, _1104, _1105), 0.0);
        vec4 _1114 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1103, _1104, _1105), 0.0);
        vec4 _1121 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1103, _1104, _1105), 0.0);
        vec4 _1128 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1103, _1104, _1105), 0.0);
        float _1140 = exp2((_1107.w + (-0.5)) * 20.0) * 2.0;
        float _1141 = _1140 * (_1107.x + (-0.5));
        float _1142 = _1140 * (_1107.y + (-0.5));
        float _1143 = _1140 * (_1107.z + (-0.5));
        float _1150 = exp2((_1114.w + (-0.5)) * 20.0) * 2.0;
        float _1151 = _1150 * (_1114.x + (-0.5));
        float _1152 = _1150 * (_1114.y + (-0.5));
        float _1153 = _1150 * (_1114.z + (-0.5));
        float _1160 = exp2((_1121.w + (-0.5)) * 20.0) * 2.0;
        float _1161 = _1160 * (_1121.x + (-0.5));
        float _1162 = _1160 * (_1121.y + (-0.5));
        float _1163 = _1160 * (_1121.z + (-0.5));
        float _1170 = exp2((_1128.w + (-0.5)) * 20.0) * 2.0;
        float _1171 = _1170 * (_1128.x + (-0.5));
        float _1172 = _1170 * (_1128.y + (-0.5));
        float _1173 = _1170 * (_1128.z + (-0.5));
        float _1174 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1175 = isnan(0.0) ? _1172 : (isnan(_1172) ? 0.0 : max(_1172, 0.0));
        float _1176 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1177 = _1141 * 0.5;
        float _1178 = _1151 * 0.5;
        float _1179 = _1161 * 0.5;
        float _1180 = dot(vec3(_1177, _1178, _1179), vec3(_1177, _1178, _1179));
        float _1185 = (_1180 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1180);
        float _1193 = (dot(vec3(_530, _531, _532), vec3(_1185 * _1177, _1185 * _1178, _1185 * _1179)) + 1.0) * 0.5;
        float _3597 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1202 = sqrt(((_1178 * _1178) + (_1177 * _1177)) + (_1179 * _1179)) / (_1174 + 9.9999997473787516355514526367188e-06);
        float _3608 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
        float _1204 = _1203 * 2.0;
        float _1208 = (1.0 - _1203) / (_1203 + 1.0);
        float _3619 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
        float _1218 = ((((1.0 - _1209) * (_1204 + 2.0)) * exp2(log2(isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0))) * (_1204 + 1.0))) + _1209) * _1174;
        float _1219 = _1142 * 0.5;
        float _1220 = _1152 * 0.5;
        float _1221 = _1162 * 0.5;
        float _1222 = dot(vec3(_1219, _1220, _1221), vec3(_1219, _1220, _1221));
        float _1227 = (_1222 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1222);
        float _1235 = (dot(vec3(_530, _531, _532), vec3(_1227 * _1219, _1227 * _1220, _1227 * _1221)) + 1.0) * 0.5;
        float _3630 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1244 = sqrt(((_1220 * _1220) + (_1219 * _1219)) + (_1221 * _1221)) / (_1175 + 9.9999997473787516355514526367188e-06);
        float _3641 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0));
        float _1246 = _1245 * 2.0;
        float _1250 = (1.0 - _1245) / (_1245 + 1.0);
        float _3652 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _3652 : (isnan(_3652) ? 1.0 : min(_3652, 1.0));
        float _1260 = ((((1.0 - _1251) * (_1246 + 2.0)) * exp2(log2(isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0))) * (_1246 + 1.0))) + _1251) * _1175;
        float _1261 = _1143 * 0.5;
        float _1262 = _1153 * 0.5;
        float _1263 = _1163 * 0.5;
        float _1264 = dot(vec3(_1261, _1262, _1263), vec3(_1261, _1262, _1263));
        float _1269 = (_1264 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1264);
        float _1277 = (dot(vec3(_530, _531, _532), vec3(_1269 * _1261, _1269 * _1262, _1269 * _1263)) + 1.0) * 0.5;
        float _3663 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1286 = sqrt(((_1262 * _1262) + (_1261 * _1261)) + (_1263 * _1263)) / (_1176 + 9.9999997473787516355514526367188e-06);
        float _3674 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1287 = isnan(1.0) ? _3674 : (isnan(_3674) ? 1.0 : min(_3674, 1.0));
        float _1288 = _1287 * 2.0;
        float _1292 = (1.0 - _1287) / (_1287 + 1.0);
        float _3685 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _3685 : (isnan(_3685) ? 1.0 : min(_3685, 1.0));
        float _1302 = ((((1.0 - _1293) * (_1288 + 2.0)) * exp2(log2(isnan(1.0) ? _3663 : (isnan(_3663) ? 1.0 : min(_3663, 1.0))) * (_1288 + 1.0))) + _1293) * _1176;
        _1310 = _1143;
        _1311 = _1142;
        _1312 = _1141;
        _1313 = _1153;
        _1314 = _1152;
        _1315 = _1151;
        _1316 = _1163;
        _1317 = _1162;
        _1318 = _1161;
        _1319 = _1176;
        _1320 = _1175;
        _1321 = _1174;
        _1322 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0)));
        _1323 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0)));
        _1324 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0)));
    }
    else
    {
        _1310 = _1001;
        _1311 = _1001;
        _1312 = _1001;
        _1313 = _1001;
        _1314 = _1001;
        _1315 = _1001;
        _1316 = _1001;
        _1317 = _1001;
        _1318 = _1001;
        _1319 = _1001;
        _1320 = _1001;
        _1321 = _1001;
        _1322 = 0.0;
        _1323 = 0.0;
        _1324 = 0.0;
    }
    float _1334 = (cbModelParam._m0[1u].x * (_1322 - _1013)) + _1013;
    float _1335 = (cbModelParam._m0[1u].x * (_1323 - _1014)) + _1014;
    float _1336 = (cbModelParam._m0[1u].x * (_1324 - _1015)) + _1015;
    float _1357 = fma(_1336, cbSceneParam._m0[89u].z, fma(_1335, cbSceneParam._m0[89u].y, _1334 * cbSceneParam._m0[89u].x));
    float _1360 = fma(_1336, cbSceneParam._m0[90u].z, fma(_1335, cbSceneParam._m0[90u].y, _1334 * cbSceneParam._m0[90u].x));
    float _1363 = fma(_1336, cbSceneParam._m0[91u].z, fma(_1335, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1334));
    float _1378 = _638 * 0.5;
    float _1379 = _639 * 0.5;
    float _1380 = _640 * 0.5;
    float _1381 = dot(vec4(_1378, _1379, _1380, 1.0), vec4(_1312, _1315, _1318, _1321));
    float _1384 = dot(vec4(_1378, _1379, _1380, 1.0), vec4(_1311, _1314, _1317, _1320));
    float _1387 = dot(vec4(_1378, _1379, _1380, 1.0), vec4(_1310, _1313, _1316, _1319));
    float _1421;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1394 = dot(vec4(_1378, _1379, _1380, 1.0), vec4(_1000, _1004, _1007, _1010));
        float _1398 = dot(vec4(_1378, _1379, _1380, 1.0), vec4(_1002, _1005, _1008, _1011));
        float _1402 = dot(vec4(_1378, _1379, _1380, 1.0), vec4(_1003, _1006, _1009, _1012));
        float _1409 = dot(vec4(cbModelParam._m0[39u]), vec4(_1378, _1379, _1380, 1.0));
        _1421 = dot(vec3(isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)), isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0)), isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1409) ? 0.0 : (isnan(0.0) ? _1409 : max(0.0, _1409))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1421 = 1.0;
    }
    float _1432;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1423 = dot(vec4(cbModelParam._m0[40u]), vec4(_1378, _1379, _1380, 1.0));
        _1432 = dot(vec3(isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0)), isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0)), isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1423) ? 0.0 : (isnan(0.0) ? _1423 : max(0.0, _1423))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1432 = 1.0;
    }
    float _1436 = (_1432 * cbModelParam._m0[1u].x) + (_1421 * (1.0 - cbModelParam._m0[1u].x));
    float _1446 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _533);
    float _1447 = isnan(_1446) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1446 : min(cbModelParam._m0[25u].z, _1446));
    float _1529;
    float _1531;
    float _1533;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1496 = fma(_699, cbModelParam._m0[13u].z, fma(_695, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _691)) + cbModelParam._m0[13u].w;
        float _1500 = fma(_699, cbModelParam._m0[14u].z, fma(_695, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _691)) + cbModelParam._m0[14u].w;
        float _1504 = fma(_699, cbModelParam._m0[15u].z, fma(_695, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _691)) + cbModelParam._m0[15u].w;
        float _1507 = fma(_640, cbModelParam._m0[13u].z, fma(_639, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _638));
        float _1510 = fma(_640, cbModelParam._m0[14u].z, fma(_639, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _638));
        float _1513 = fma(_640, cbModelParam._m0[15u].z, fma(_639, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _638));
        float _1541;
        if (_1507 > 0.0)
        {
            _1541 = abs((1.0 - _1496) / _1507);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1507 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1496 + 1.0) / _1507);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1541 = frontier_phi_22_20_ladder;
        }
        float _1711;
        if (_1510 > 0.0)
        {
            _1711 = abs((1.0 - _1500) / _1510);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1510 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1500 + 1.0) / _1510);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1711 = frontier_phi_31_27_ladder;
        }
        float _2155;
        if (_1513 > 0.0)
        {
            _2155 = abs((1.0 - _1504) / _1513);
        }
        else
        {
            float frontier_phi_43_38_ladder;
            if (_1513 < 0.0)
            {
                frontier_phi_43_38_ladder = abs((_1504 + 1.0) / _1513);
            }
            else
            {
                frontier_phi_43_38_ladder = 5000.0;
            }
            _2155 = frontier_phi_43_38_ladder;
        }
        float _2157 = isnan(_1711) ? _1541 : (isnan(_1541) ? _1711 : min(_1541, _1711));
        float _2158 = isnan(_2155) ? _2157 : (isnan(_2157) ? _2155 : min(_2157, _2155));
        float _2162 = (_2158 * _1507) + _1496;
        float _2163 = (_2158 * _1510) + _1500;
        float _2164 = (_2158 * _1513) + _1504;
        float _2165 = _2158 * 9.9999997473787516355514526367188e-05;
        float _2167 = (-1.0) - _2165;
        float _2169 = _2165 + 1.0;
        float frontier_phi_21_43_ladder;
        float frontier_phi_21_43_ladder_1;
        float frontier_phi_21_43_ladder_2;
        if ((_2164 > _2169) || ((_2164 < _2167) || ((_2163 > _2169) || ((_2163 < _2167) || ((_2162 < _2167) || (_2162 > _2169))))))
        {
            frontier_phi_21_43_ladder = 0.0;
            frontier_phi_21_43_ladder_1 = 0.0;
            frontier_phi_21_43_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2398 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2164, cbModelParam._m0[9u].z, fma(_2163, cbModelParam._m0[9u].y, _2162 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2164, cbModelParam._m0[10u].z, fma(_2163, cbModelParam._m0[10u].y, _2162 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2164, cbModelParam._m0[11u].z, fma(_2163, cbModelParam._m0[11u].y, _2162 * cbModelParam._m0[11u].x))), _1447);
            frontier_phi_21_43_ladder = _2398.y * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_1 = _2398.x * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_2 = _2398.z * cbModelParam._m0[1u].y;
        }
        _1529 = frontier_phi_21_43_ladder_1;
        _1531 = frontier_phi_21_43_ladder;
        _1533 = frontier_phi_21_43_ladder_2;
    }
    else
    {
        vec4 _1517 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_638, _639, _640), _1447);
        _1529 = _1517.x * cbModelParam._m0[1u].y;
        _1531 = _1517.y * cbModelParam._m0[1u].y;
        _1533 = _1517.z * cbModelParam._m0[1u].y;
    }
    float _1537 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _533);
    float _1538 = isnan(_1537) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1537 : min(cbModelParam._m0[25u].w, _1537));
    float _1628;
    float _1630;
    float _1632;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1592 = fma(_699, cbModelParam._m0[21u].z, fma(_695, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _691)) + cbModelParam._m0[21u].w;
        float _1596 = fma(_699, cbModelParam._m0[22u].z, fma(_695, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _691)) + cbModelParam._m0[22u].w;
        float _1600 = fma(_699, cbModelParam._m0[23u].z, fma(_695, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _691)) + cbModelParam._m0[23u].w;
        float _1603 = fma(_640, cbModelParam._m0[21u].z, fma(_639, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _638));
        float _1606 = fma(_640, cbModelParam._m0[22u].z, fma(_639, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _638));
        float _1609 = fma(_640, cbModelParam._m0[23u].z, fma(_639, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _638));
        float _1716;
        if (_1603 > 0.0)
        {
            _1716 = abs((1.0 - _1592) / _1603);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1603 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1592 + 1.0) / _1603);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1716 = frontier_phi_33_29_ladder;
        }
        float _2182;
        if (_1606 > 0.0)
        {
            _2182 = abs((1.0 - _1596) / _1606);
        }
        else
        {
            float frontier_phi_45_40_ladder;
            if (_1606 < 0.0)
            {
                frontier_phi_45_40_ladder = abs((_1596 + 1.0) / _1606);
            }
            else
            {
                frontier_phi_45_40_ladder = 5000.0;
            }
            _2182 = frontier_phi_45_40_ladder;
        }
        float _2519;
        if (_1609 > 0.0)
        {
            _2519 = abs((1.0 - _1600) / _1609);
        }
        else
        {
            float frontier_phi_57_52_ladder;
            if (_1609 < 0.0)
            {
                frontier_phi_57_52_ladder = abs((_1600 + 1.0) / _1609);
            }
            else
            {
                frontier_phi_57_52_ladder = 5000.0;
            }
            _2519 = frontier_phi_57_52_ladder;
        }
        float _2521 = isnan(_2182) ? _1716 : (isnan(_1716) ? _2182 : min(_1716, _2182));
        float _2522 = isnan(_2519) ? _2521 : (isnan(_2521) ? _2519 : min(_2521, _2519));
        float _2526 = (_2522 * _1603) + _1592;
        float _2527 = (_2522 * _1606) + _1596;
        float _2528 = (_2522 * _1609) + _1600;
        float _2529 = _2522 * 9.9999997473787516355514526367188e-05;
        float _2530 = (-1.0) - _2529;
        float _2532 = _2529 + 1.0;
        float frontier_phi_30_57_ladder;
        float frontier_phi_30_57_ladder_1;
        float frontier_phi_30_57_ladder_2;
        if ((_2528 > _2532) || ((_2528 < _2530) || ((_2527 > _2532) || ((_2527 < _2530) || ((_2526 < _2530) || (_2526 > _2532))))))
        {
            frontier_phi_30_57_ladder = 0.0;
            frontier_phi_30_57_ladder_1 = 0.0;
            frontier_phi_30_57_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2649 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2528, cbModelParam._m0[17u].z, fma(_2527, cbModelParam._m0[17u].y, _2526 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2528, cbModelParam._m0[18u].z, fma(_2527, cbModelParam._m0[18u].y, _2526 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2528, cbModelParam._m0[19u].z, fma(_2527, cbModelParam._m0[19u].y, _2526 * cbModelParam._m0[19u].x))), _1538);
            frontier_phi_30_57_ladder = _2649.z * cbModelParam._m0[1u].z;
            frontier_phi_30_57_ladder_1 = _2649.y * cbModelParam._m0[1u].z;
            frontier_phi_30_57_ladder_2 = _2649.x * cbModelParam._m0[1u].z;
        }
        _1628 = frontier_phi_30_57_ladder_2;
        _1630 = frontier_phi_30_57_ladder_1;
        _1632 = frontier_phi_30_57_ladder;
    }
    else
    {
        vec4 _1612 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_638, _639, _640), _1538);
        _1628 = _1612.x * cbModelParam._m0[1u].z;
        _1630 = _1612.y * cbModelParam._m0[1u].z;
        _1632 = _1612.z * cbModelParam._m0[1u].z;
    }
    float _1644 = ((((1.0 - _659) * ((_646 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_659 * _646)) * _630;
    float _1645 = _1644 * ((cbModelParam._m0[1u].w * (_1628 - _1529)) + _1529);
    float _1646 = _1644 * ((cbModelParam._m0[1u].w * (_1630 - _1531)) + _1531);
    float _1647 = _1644 * ((cbModelParam._m0[1u].w * (_1632 - _1533)) + _1533);
    float _1650 = fma(_1647, cbSceneParam._m0[89u].z, fma(_1646, cbSceneParam._m0[89u].y, _1645 * cbSceneParam._m0[89u].x));
    float _1653 = fma(_1647, cbSceneParam._m0[90u].z, fma(_1646, cbSceneParam._m0[90u].y, _1645 * cbSceneParam._m0[90u].x));
    float _1656 = fma(_1647, cbSceneParam._m0[91u].z, fma(_1646, cbSceneParam._m0[91u].y, _1645 * cbSceneParam._m0[91u].x));
    float _1690 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1694 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1698 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1702 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1703 = _1690 / _1702;
    float _1704 = _1694 / _1702;
    float _1705 = _1698 / _1702;
    float _1852;
    float _1853;
    float _1854;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1732 = ((uint(_1705 > cbSceneParam._m0[59u].y) + uint(_1705 > cbSceneParam._m0[59u].x)) + uint(_1705 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1733 = _1732 + 43u;
        uint _1741 = _1732 + 44u;
        uint _1749 = _1732 + 45u;
        uint _1757 = _1732 + 46u;
        float _1768 = fma(_1702, cbSceneParam._m0[_1733].w, fma(_1698, cbSceneParam._m0[_1733].z, fma(_1694, cbSceneParam._m0[_1733].y, _1690 * cbSceneParam._m0[_1733].x)));
        float _1772 = fma(_1702, cbSceneParam._m0[_1741].w, fma(_1698, cbSceneParam._m0[_1741].z, fma(_1694, cbSceneParam._m0[_1741].y, _1690 * cbSceneParam._m0[_1741].x)));
        float _1780 = fma(_1702, cbSceneParam._m0[_1757].w, fma(_1698, cbSceneParam._m0[_1757].z, fma(_1694, cbSceneParam._m0[_1757].y, _1690 * cbSceneParam._m0[_1757].x)));
        float _1785 = cbSceneParam._m0[33u].z * _1780;
        float _1787 = cbSceneParam._m0[33u].w * _1780;
        float _1790 = fma(_1702, cbSceneParam._m0[_1749].w, fma(_1698, cbSceneParam._m0[_1749].z, fma(_1694, cbSceneParam._m0[_1749].y, _1690 * cbSceneParam._m0[_1749].x))) / _1780;
        float _1838 = (cbSceneParam._m0[33u].x - sqrt(((_1704 * _1704) + (_1703 * _1703)) + (_1705 * _1705))) * cbSceneParam._m0[33u].y;
        float _3811 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
        float _1845 = (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1785 + _1768) / _1780, (_1787 + _1772) / _1780), _1790), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1787 + _1768) / _1780, (_1772 - _1785) / _1780), _1790), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1768 - _1785) / _1780, (_1772 - _1787) / _1780), _1790), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1768 - _1787) / _1780, (_1785 + _1772) / _1780), _1790), 0.0)).x), vec4(0.25)));
        _1852 = 1.0 - (_1845 * cbSceneParam._m0[34u].x);
        _1853 = 1.0 - (_1845 * cbSceneParam._m0[34u].y);
        _1854 = 1.0 - (_1845 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1852 = 1.0;
        _1853 = 1.0;
        _1854 = 1.0;
    }
    float _1918;
    float _1920;
    float _1922;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1906 = fma(_1702, cbSceneParam._m0[63u].w, fma(_1698, cbSceneParam._m0[63u].z, fma(_1694, cbSceneParam._m0[63u].y, _1690 * cbSceneParam._m0[63u].x)));
        float _1907 = fma(_1702, cbSceneParam._m0[60u].w, fma(_1698, cbSceneParam._m0[60u].z, fma(_1694, cbSceneParam._m0[60u].y, _1690 * cbSceneParam._m0[60u].x))) / _1906;
        float _1908 = fma(_1702, cbSceneParam._m0[61u].w, fma(_1698, cbSceneParam._m0[61u].z, fma(_1694, cbSceneParam._m0[61u].y, _1690 * cbSceneParam._m0[61u].x))) / _1906;
        float frontier_phi_42_41_ladder;
        float frontier_phi_42_41_ladder_1;
        float frontier_phi_42_41_ladder_2;
        if ((((_1907 >= cbSceneParam._m0[64u].x) && (_1908 >= cbSceneParam._m0[64u].y)) && (_1907 <= cbSceneParam._m0[64u].z)) && (_1908 <= cbSceneParam._m0[64u].w))
        {
            float _2195 = fma(_1702, cbSceneParam._m0[62u].w, fma(_1698, cbSceneParam._m0[62u].z, fma(_1694, cbSceneParam._m0[62u].y, _1690 * cbSceneParam._m0[62u].x))) / _1906;
            float _2199 = isnan(cbSceneParam._m0[41u].w) ? _2195 : (isnan(_2195) ? cbSceneParam._m0[41u].w : max(_2195, cbSceneParam._m0[41u].w));
            float _2242 = (cbSceneParam._m0[33u].x - sqrt(((_1704 * _1704) + (_1703 * _1703)) + (_1705 * _1705))) * cbSceneParam._m0[33u].y;
            float _3827 = isnan(0.0) ? _2242 : (isnan(_2242) ? 0.0 : max(_2242, 0.0));
            float _2249 = (isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1907, cbSceneParam._m0[33u].w + _1908), _2199), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1907, _1908 - cbSceneParam._m0[33u].z), _2199), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1907 - cbSceneParam._m0[33u].z, _1908 - cbSceneParam._m0[33u].w), _2199), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1907 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1908), _2199), 0.0)).x), vec4(0.25)));
            float _2253 = 1.0 - (_2249 * cbSceneParam._m0[34u].x);
            float _2254 = 1.0 - (_2249 * cbSceneParam._m0[34u].y);
            float _2255 = 1.0 - (_2249 * cbSceneParam._m0[34u].z);
            frontier_phi_42_41_ladder = isnan(_2254) ? _1853 : (isnan(_1853) ? _2254 : min(_1853, _2254));
            frontier_phi_42_41_ladder_1 = isnan(_2253) ? _1852 : (isnan(_1852) ? _2253 : min(_1852, _2253));
            frontier_phi_42_41_ladder_2 = isnan(_2255) ? _1854 : (isnan(_1854) ? _2255 : min(_1854, _2255));
        }
        else
        {
            frontier_phi_42_41_ladder = _1853;
            frontier_phi_42_41_ladder_1 = _1852;
            frontier_phi_42_41_ladder_2 = _1854;
        }
        _1918 = frontier_phi_42_41_ladder_1;
        _1920 = frontier_phi_42_41_ladder;
        _1922 = frontier_phi_42_41_ladder_2;
    }
    else
    {
        _1918 = _1852;
        _1920 = _1853;
        _1922 = _1854;
    }
    uvec4 _1927 = floatBitsToUint(cbInstanceData._m0[_604 + 5u]);
    uint _1929 = _1927.x * 14u;
    uint _1930 = _1929 + 13u;
    float _1935 = _630 + (-1.0);
    float _1938 = (cbLight._m0[_1930].x * _1935) + 1.0;
    float _1939 = (cbLight._m0[_1930].y * _1935) + 1.0;
    uint _1940 = _1929 + 5u;
    float _1946 = isnan(1.0) ? _1939 : (isnan(_1939) ? 1.0 : min(_1939, 1.0));
    uint _1950 = _1929 + 4u;
    float _1959 = isnan(1.0) ? _1938 : (isnan(_1938) ? 1.0 : min(_1938, 1.0));
    uint _1963 = _1929 | 1u;
    float _1974 = dot(vec3(cbLight._m0[_1929].xyz), vec3(_530, _531, _532));
    float _1977 = dot(vec3(cbLight._m0[_1963].xyz), vec3(_530, _531, _532));
    float _3863 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
    float _3874 = isnan(0.0) ? _1977 : (isnan(_1977) ? 0.0 : max(_1977, 0.0));
    float _1982 = (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * 0.3183098733425140380859375;
    float _1984 = (isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0))) * 0.3183098733425140380859375;
    float _1991 = ((cbLight._m0[_1940].x * _1946) * _1984) + (((cbLight._m0[_1950].x * _1918) * _1959) * _1982);
    float _1992 = ((_1946 * cbLight._m0[_1940].y) * _1984) + (((cbLight._m0[_1950].y * _1920) * _1959) * _1982);
    float _1993 = ((_1946 * cbLight._m0[_1940].z) * _1984) + (((cbLight._m0[_1950].z * _1922) * _1959) * _1982);
    uint _1995 = _1929 + 8u;
    float _2008 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1929].w)) * _533) * 0.949999988079071044921875);
    float _2009 = _2008 * _2008;
    float _2010 = cbLight._m0[_1929].x + _557;
    float _2011 = cbLight._m0[_1929].y + _558;
    float _2012 = cbLight._m0[_1929].z + _559;
    float _2016 = inversesqrt(dot(vec3(_2010, _2011, _2012), vec3(_2010, _2011, _2012)));
    float _2017 = _2016 * _2010;
    float _2018 = _2016 * _2011;
    float _2019 = _2016 * _2012;
    float _2020 = dot(vec3(_530, _531, _532), vec3(cbLight._m0[_1929].xyz));
    float _3885 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
    float _2023 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
    float _3896 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _2024 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
    float _2025 = dot(vec3(_530, _531, _532), vec3(_2017, _2018, _2019));
    float _3907 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
    float _2028 = isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0));
    float _2029 = dot(vec3(cbLight._m0[_1929].xyz), vec3(_2017, _2018, _2019));
    float _3918 = isnan(0.0) ? _2029 : (isnan(_2029) ? 0.0 : max(_2029, 0.0));
    float _2033 = _2009 * _2009;
    float _2037 = ((_2028 * _2028) * (_2033 + (-1.0))) + 1.0;
    float _2048 = (exp2(log2(1.0 - (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2049 = 1.0 - _2009;
    float _2060 = (0.5 / (((_2024 * ((_2023 * _2049) + _2009)) + 9.9999999392252902907785028219223e-09) + (((_2024 * _2049) + _2009) * _2023))) * _2023;
    float _3929 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
    float _2062 = (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * (_2033 / ((_2037 * _2037) * 3.141590118408203125));
    uint _2076 = _1929 + 9u;
    float _2087 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1963].w)) * _533) * 0.949999988079071044921875);
    float _2088 = _2087 * _2087;
    float _2089 = cbLight._m0[_1963].x + _557;
    float _2090 = cbLight._m0[_1963].y + _558;
    float _2091 = cbLight._m0[_1963].z + _559;
    float _2095 = inversesqrt(dot(vec3(_2089, _2090, _2091), vec3(_2089, _2090, _2091)));
    float _2096 = _2095 * _2089;
    float _2097 = _2095 * _2090;
    float _2098 = _2095 * _2091;
    float _2099 = dot(vec3(_530, _531, _532), vec3(cbLight._m0[_1963].xyz));
    float _3940 = isnan(0.0) ? _2099 : (isnan(_2099) ? 0.0 : max(_2099, 0.0));
    float _2102 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _2103 = dot(vec3(_530, _531, _532), vec3(_2096, _2097, _2098));
    float _3951 = isnan(0.0) ? _2103 : (isnan(_2103) ? 0.0 : max(_2103, 0.0));
    float _2106 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _2107 = dot(vec3(cbLight._m0[_1963].xyz), vec3(_2096, _2097, _2098));
    float _3962 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
    float _2111 = _2088 * _2088;
    float _2115 = ((_2106 * _2106) * (_2111 + (-1.0))) + 1.0;
    float _2124 = (exp2(log2(1.0 - (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2125 = 1.0 - _2088;
    float _2135 = (0.5 / (((_2024 * ((_2102 * _2125) + _2088)) + 9.9999999392252902907785028219223e-09) + (((_2024 * _2125) + _2088) * _2102))) * _2102;
    float _3973 = isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0));
    float _2137 = (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0))) * (_2111 / ((_2115 * _2115) * 3.141590118408203125));
    float _2147 = (((_2124 * cbLight._m0[_2076].x) * _2137) * _1946) + ((((cbLight._m0[_1995].x * _1918) * _2048) * _2062) * _1959);
    float _2148 = (((_2124 * cbLight._m0[_2076].y) * _2137) * _1946) + ((((cbLight._m0[_1995].y * _1920) * _2048) * _2062) * _1959);
    float _2149 = (((_2124 * cbLight._m0[_2076].z) * _2137) * _1946) + ((((cbLight._m0[_1995].z * _1922) * _2048) * _2062) * _1959);
    float _2312;
    float _2314;
    float _2316;
    float _2318;
    float _2320;
    float _2322;
    if (_1927.y == 0u)
    {
        uvec4 _2267 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2268 = _2267.x;
        uint _2279 = uint((float(_2267.y) * floor(float(uint(cbSceneParam._m0[85u].y * _566) / _2268))) + floor(float(uint(cbSceneParam._m0[85u].x * _565) / _2268)));
        float _2289 = (log2(_1705 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2290 = isnan(0.0) ? _2289 : (isnan(_2289) ? 0.0 : max(_2289, 0.0));
        uint _2293 = uint(isnan(14.0) ? _2290 : (isnan(_2290) ? 14.0 : min(_2290, 14.0)));
        uvec4 _2298 = texelFetch(g_lightClusterGridBuffer, int(((_2293 << 2u) + (_2279 << 6u)) >> 2u));
        uint _2299 = _2298.x;
        uint _2300 = _2267.z;
        float _2407;
        float _2409;
        float _2411;
        float _2413;
        float _2415;
        float _2417;
        if (((((1u << ((_2300 >> 4u) & 15u)) + 4294967295u) & _2299) == 0u) || ((_2300 & 240u) == 0u))
        {
            _2407 = 0.0;
            _2409 = 0.0;
            _2411 = 0.0;
            _2413 = 0.0;
            _2415 = 0.0;
            _2417 = 0.0;
        }
        else
        {
            float _2408;
            float _2410;
            float _2412;
            float _2414;
            float _2416;
            float _2418;
            float _2577 = 0.0;
            float _2578 = 0.0;
            float _2579 = 0.0;
            float _2580 = 0.0;
            float _2581 = 0.0;
            float _2582 = 0.0;
            uint _2583 = 0u;
            uint _2592;
            bool _2593;
            for (;;)
            {
                _2592 = texelFetch(g_lightClassification, int((((_2293 << 5u) + (_2279 << 9u)) + (_2583 << 2u)) >> 2u)).x;
                _2593 = _2592 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2593)
                {
                    frontier_phi_66_pred = _2578;
                    frontier_phi_66_pred_1 = _2577;
                    frontier_phi_66_pred_2 = _2579;
                    frontier_phi_66_pred_3 = _2582;
                    frontier_phi_66_pred_4 = _2581;
                    frontier_phi_66_pred_5 = _2580;
                }
                else
                {
                    float _2722;
                    float _2723;
                    float _2724;
                    float _2725;
                    float _2726;
                    float _2727;
                    uint _2728;
                    _2722 = _2577;
                    _2723 = _2578;
                    _2724 = _2579;
                    _2725 = _2580;
                    _2726 = _2581;
                    _2727 = _2582;
                    _2728 = _2592;
                    float _2654;
                    float _2655;
                    float _2656;
                    float _2657;
                    float _2658;
                    float _2659;
                    for (;;)
                    {
                        uint _2732 = uint(findLSB(_2728)) + (_2583 << 5u);
                        uint _2729 = (_2728 + 4294967295u) & _2728;
                        uint _2734 = _2732 * 48u;
                        vec4 _2748 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2734)).x, texelFetch(g_PointLightRenderingBuffer, int(_2734 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2734 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2734 + 3u)).x));
                        uint _2754 = (_2732 * 48u) + 4u;
                        vec4 _2767 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2754)).x, texelFetch(g_PointLightRenderingBuffer, int(_2754 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2754 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2754 + 3u)).x));
                        uint _2773 = (_2732 * 48u) + 8u;
                        vec3 _2784 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2773)).x, texelFetch(g_PointLightRenderingBuffer, int(_2773 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2773 + 2u)).x));
                        float _2788 = _2748.x - _1703;
                        float _2789 = _2748.y - _1704;
                        float _2790 = _2748.z - _1705;
                        float _2791 = dot(vec3(_2788, _2789, _2790), vec3(_2788, _2789, _2790));
                        float _2794 = inversesqrt(_2791);
                        float _2795 = _2794 * _2788;
                        float _2796 = _2794 * _2789;
                        float _2797 = _2794 * _2790;
                        float _2798 = dot(vec3(_585, _588, _591), vec3(_2795, _2796, _2797));
                        float _2803 = 1.0 - (_2791 * _2748.w);
                        float _3994 = isnan(0.0) ? _2803 : (isnan(_2803) ? 0.0 : max(_2803, 0.0));
                        float _2804 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
                        float _2805 = sqrt(_2791) * _2767.w;
                        float _2808 = 1.39999997615814208984375 / (_2805 + 1.39999997615814208984375);
                        float _2809 = _2808 * _2808;
                        float _2812 = ((1.0 - _2809) * _2798) + _2809;
                        float _2815 = _2805 * _2805;
                        float _2819 = ((isnan(0.0) ? _2812 : (isnan(_2812) ? 0.0 : max(_2812, 0.0))) * _2804) / ((_2815 * 0.699999988079071044921875) + 1.0);
                        float _2823 = (-0.0) - _1703;
                        float _2824 = (-0.0) - _1704;
                        float _2825 = (-0.0) - _1705;
                        float _2829 = inversesqrt(dot(vec3(_2823, _2824, _2825), vec3(_2823, _2824, _2825)));
                        float _2830 = _2829 * _2823;
                        float _2831 = _2829 * _2824;
                        float _2832 = _2829 * _2825;
                        float _2839 = exp2(log2(1.0 / ((_2815 * 3.5) + 5.0)) * 0.25);
                        float _2840 = 1.0 - _646;
                        float _2847 = sqrt(1.0 - ((1.0 - (_2840 * _2840)) * (1.0 - (_2839 * _2839))));
                        float _2848 = _2847 * _2847;
                        float _2849 = _2848 * _2848;
                        float _2850 = _2830 + _2795;
                        float _2851 = _2831 + _2796;
                        float _2852 = _2832 + _2797;
                        float _2856 = inversesqrt(dot(vec3(_2850, _2851, _2852), vec3(_2850, _2851, _2852)));
                        float _2860 = dot(vec3(_585, _588, _591), vec3(_2830, _2831, _2832));
                        float _4010 = isnan(0.0) ? _2860 : (isnan(_2860) ? 0.0 : max(_2860, 0.0));
                        float _2863 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
                        float _2864 = dot(vec3(_585, _588, _591), vec3(_2856 * _2850, _2856 * _2851, _2856 * _2852));
                        float _4021 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
                        float _2867 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
                        float _2871 = ((_2867 * _2867) * (_2849 + (-1.0))) + 1.0;
                        float _2872 = _2808 * _2848;
                        float _2873 = _2872 * _2872;
                        float _2876 = ((1.0 - _2873) * _2798) + _2873;
                        float _4032 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
                        float _2877 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
                        float _2878 = 1.0 - _2848;
                        float _2888 = (0.5 / (((_2877 * ((_2863 * _2878) + _2848)) + 9.9999999392252902907785028219223e-09) + (((_2877 * _2878) + _2848) * _2863))) * _2877;
                        float _4043 = isnan(0.0) ? _2888 : (isnan(_2888) ? 0.0 : max(_2888, 0.0));
                        float _2899 = (((_2849 * 3.1415927410125732421875) * (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0)))) / ((_2871 * _2871) * ((_2815 * 2.1991131305694580078125) + 3.141590118408203125))) * _2804;
                        _2657 = (_2819 * _2767.x) + _2725;
                        _2658 = (_2819 * _2767.y) + _2726;
                        _2659 = (_2819 * _2767.z) + _2727;
                        _2654 = (_2899 * _2784.x) + _2722;
                        _2655 = (_2899 * _2784.y) + _2723;
                        _2656 = (_2899 * _2784.z) + _2724;
                        if (_2729 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2722 = _2654;
                            _2723 = _2655;
                            _2724 = _2656;
                            _2725 = _2657;
                            _2726 = _2658;
                            _2727 = _2659;
                            _2728 = _2729;
                        }
                    }
                    frontier_phi_66_pred = _2655;
                    frontier_phi_66_pred_1 = _2654;
                    frontier_phi_66_pred_2 = _2656;
                    frontier_phi_66_pred_3 = _2659;
                    frontier_phi_66_pred_4 = _2658;
                    frontier_phi_66_pred_5 = _2657;
                }
                _2410 = frontier_phi_66_pred;
                _2408 = frontier_phi_66_pred_1;
                _2412 = frontier_phi_66_pred_2;
                _2418 = frontier_phi_66_pred_3;
                _2416 = frontier_phi_66_pred_4;
                _2414 = frontier_phi_66_pred_5;
                uint _2584 = _2583 + 1u;
                if (_2584 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2577 = _2408;
                    _2578 = _2410;
                    _2579 = _2412;
                    _2580 = _2414;
                    _2581 = _2416;
                    _2582 = _2418;
                    _2583 = _2584;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2407 = _2408;
            _2409 = _2410;
            _2411 = _2412;
            _2413 = _2414;
            _2415 = _2416;
            _2417 = _2418;
        }
        uvec4 _2421 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2422 = _2421.z;
        uint _2424 = (_2422 >> 8u) & 15u;
        float _2545;
        float _2547;
        float _2549;
        float _2551;
        float _2553;
        float _2555;
        if (((4294967295u << _2424) & _2299) == 0u)
        {
            _2545 = _2407;
            _2547 = _2409;
            _2549 = _2411;
            _2551 = _2413;
            _2553 = _2415;
            _2555 = _2417;
        }
        else
        {
            float _2570 = inversesqrt(dot(vec3(_1703, _1704, _1705), vec3(_1703, _1704, _1705)));
            float _2571 = _2570 * _1703;
            float _2572 = _2570 * _1704;
            float _2573 = _2570 * _1705;
            float frontier_phi_59_60_ladder;
            float frontier_phi_59_60_ladder_1;
            float frontier_phi_59_60_ladder_2;
            float frontier_phi_59_60_ladder_3;
            float frontier_phi_59_60_ladder_4;
            float frontier_phi_59_60_ladder_5;
            if (_2424 < ((_2422 >> 12u) & 15u))
            {
                float _2546;
                float _2548;
                float _2550;
                float _2552;
                float _2554;
                float _2556;
                float _2705 = _2407;
                float _2706 = _2409;
                float _2707 = _2411;
                float _2708 = _2413;
                float _2709 = _2415;
                float _2710 = _2417;
                uint _2711 = _2424;
                uint _2720;
                bool _2721;
                for (;;)
                {
                    _2720 = texelFetch(g_lightClassification, int((((_2293 << 5u) + (_2279 << 9u)) + (_2711 << 2u)) >> 2u)).x;
                    _2721 = _2720 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2721)
                    {
                        frontier_phi_72_pred = _2706;
                        frontier_phi_72_pred_1 = _2705;
                        frontier_phi_72_pred_2 = _2710;
                        frontier_phi_72_pred_3 = _2709;
                        frontier_phi_72_pred_4 = _2708;
                        frontier_phi_72_pred_5 = _2707;
                    }
                    else
                    {
                        float _2904;
                        float _2905;
                        float _2906;
                        float _2907;
                        float _2908;
                        float _2909;
                        float _3197;
                        float _3198;
                        float _3199;
                        float _3200;
                        float _3201;
                        float _3202;
                        float _2917 = _2705;
                        float _2918 = _2706;
                        float _2919 = _2707;
                        float _2920 = _2708;
                        float _2921 = _2709;
                        float _2922 = _2710;
                        uint _2923 = _2720;
                        uint _2924;
                        vec4 _2949;
                        float _2950;
                        vec4 _2965;
                        vec3 _2977;
                        vec4 _2992;
                        vec4 _3007;
                        float _3053;
                        bool _3054;
                        for (;;)
                        {
                            uint _2934 = ((_2711 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2923));
                            _2924 = (_2923 + 4294967295u) & _2923;
                            uint _2936 = _2934 * 40u;
                            _2949 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2936)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 3u)).x));
                            _2950 = _2949.w;
                            uint _2952 = (_2934 * 40u) + 4u;
                            _2965 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2952)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2952 + 3u)).x));
                            uint _2967 = (_2934 * 40u) + 8u;
                            _2977 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2967)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2967 + 2u)).x));
                            uint _2979 = (_2934 * 40u) + 16u;
                            _2992 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2979)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 3u)).x));
                            uint _2994 = (_2934 * 40u) + 20u;
                            _3007 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2994)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2994 + 3u)).x));
                            uint _3009 = (_2934 * 40u) + 24u;
                            vec4 _3022 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3009)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3009 + 3u)).x));
                            uint _3028 = (_2934 * 40u) + 28u;
                            vec4 _3041 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3028)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3028 + 3u)).x));
                            _3053 = fma(_1705, _3041.z, fma(_1704, _3041.y, _3041.x * _1703)) + _3041.w;
                            _3054 = !((fma(_1705, _3022.z, fma(_1704, _3022.y, _3022.x * _1703)) + _3022.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3054)
                            {
                                float _3081 = _2949.x - _1703;
                                float _3082 = _2949.y - _1704;
                                float _3083 = _2949.z - _1705;
                                float _3084 = dot(vec3(_3081, _3082, _3083), vec3(_3081, _3082, _3083));
                                float _3087 = inversesqrt(_3084);
                                float _3088 = _3087 * _3081;
                                float _3089 = _3087 * _3082;
                                float _3090 = _3087 * _3083;
                                float _3094 = 1.0 - (_3084 / (_2950 * _2950));
                                float _4054 = isnan(0.0) ? _3094 : (isnan(_3094) ? 0.0 : max(_3094, 0.0));
                                float _3095 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
                                float _3099 = sqrt(_3084) * _2965.w;
                                float _3101 = 1.39999997615814208984375 / (_3099 + 1.39999997615814208984375);
                                float _3102 = _3101 * _3101;
                                float _3105 = ((1.0 - _3102) * dot(vec3(_3088, _3089, _3090), vec3(_585, _588, _591))) + _3102;
                                float _3108 = _3099 * _3099;
                                float _3112 = (fma(_1705, _2992.z, fma(_1704, _2992.y, _2992.x * _1703)) + _2992.w) / _3053;
                                float _3113 = (fma(_1705, _3007.z, fma(_1704, _3007.y, _3007.x * _1703)) + _3007.w) / _3053;
                                float _3117 = 1.0 - dot(vec2(_3112, _3113), vec2(_3112, _3113));
                                float _4070 = isnan(0.0) ? _3117 : (isnan(_3117) ? 0.0 : max(_3117, 0.0));
                                float _3118 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
                                float _3119 = _3118 * (((isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0))) * _3095) / ((_3108 * 0.699999988079071044921875) + 1.0));
                                float _3131 = exp2(log2(1.0 / ((_3108 * 3.5) + 5.0)) * 0.25);
                                float _3132 = 1.0 - _646;
                                float _3139 = sqrt(1.0 - ((1.0 - (_3132 * _3132)) * (1.0 - (_3131 * _3131))));
                                float _3140 = _3139 * _3139;
                                float _3141 = _3140 * _3140;
                                float _3142 = _3088 - _2571;
                                float _3143 = _3089 - _2572;
                                float _3144 = _3090 - _2573;
                                float _3148 = inversesqrt(dot(vec3(_3142, _3143, _3144), vec3(_3142, _3143, _3144)));
                                float _3152 = dot(vec3(_585, _588, _591), vec3((-0.0) - _2571, (-0.0) - _2572, (-0.0) - _2573));
                                float _4081 = isnan(0.0) ? _3152 : (isnan(_3152) ? 0.0 : max(_3152, 0.0));
                                float _3155 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
                                float _3156 = dot(vec3(_585, _588, _591), vec3(_3148 * _3142, _3148 * _3143, _3148 * _3144));
                                float _4092 = isnan(0.0) ? _3156 : (isnan(_3156) ? 0.0 : max(_3156, 0.0));
                                float _3159 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
                                float _3163 = ((_3159 * _3159) * (_3141 + (-1.0))) + 1.0;
                                float _3164 = _3101 * _3140;
                                float _3165 = _3164 * _3164;
                                float _3171 = ((1.0 - _3165) * dot(vec3(_585, _588, _591), vec3(_3088, _3089, _3090))) + _3165;
                                float _4103 = isnan(0.0) ? _3171 : (isnan(_3171) ? 0.0 : max(_3171, 0.0));
                                float _3172 = isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0));
                                float _3173 = 1.0 - _3140;
                                float _3183 = (0.5 / (((_3172 * ((_3155 * _3173) + _3140)) + 9.9999999392252902907785028219223e-09) + (((_3172 * _3173) + _3140) * _3155))) * _3172;
                                float _4114 = isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0));
                                float _3193 = (_3118 * _3095) * (((_3141 * 3.1415927410125732421875) * (isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0)))) / ((_3163 * _3163) * ((_3108 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3193 * _2977.y;
                                frontier_phi_78_pred_1 = _3193 * _2977.x;
                                frontier_phi_78_pred_2 = _3119 * _2965.z;
                                frontier_phi_78_pred_3 = _3119 * _2965.y;
                                frontier_phi_78_pred_4 = _3119 * _2965.x;
                                frontier_phi_78_pred_5 = _3193 * _2977.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3198 = frontier_phi_78_pred;
                            _3197 = frontier_phi_78_pred_1;
                            _3202 = frontier_phi_78_pred_2;
                            _3201 = frontier_phi_78_pred_3;
                            _3200 = frontier_phi_78_pred_4;
                            _3199 = frontier_phi_78_pred_5;
                            _2907 = _3200 + _2920;
                            _2908 = _3201 + _2921;
                            _2909 = _3202 + _2922;
                            _2904 = _3197 + _2917;
                            _2905 = _3198 + _2918;
                            _2906 = _3199 + _2919;
                            if (_2924 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2917 = _2904;
                                _2918 = _2905;
                                _2919 = _2906;
                                _2920 = _2907;
                                _2921 = _2908;
                                _2922 = _2909;
                                _2923 = _2924;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _2905;
                        frontier_phi_72_pred_1 = _2904;
                        frontier_phi_72_pred_2 = _2909;
                        frontier_phi_72_pred_3 = _2908;
                        frontier_phi_72_pred_4 = _2907;
                        frontier_phi_72_pred_5 = _2906;
                    }
                    _2548 = frontier_phi_72_pred;
                    _2546 = frontier_phi_72_pred_1;
                    _2556 = frontier_phi_72_pred_2;
                    _2554 = frontier_phi_72_pred_3;
                    _2552 = frontier_phi_72_pred_4;
                    _2550 = frontier_phi_72_pred_5;
                    uint _2712 = _2711 + 1u;
                    if (_2712 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2705 = _2546;
                        _2706 = _2548;
                        _2707 = _2550;
                        _2708 = _2552;
                        _2709 = _2554;
                        _2710 = _2556;
                        _2711 = _2712;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_59_60_ladder = _2556;
                frontier_phi_59_60_ladder_1 = _2552;
                frontier_phi_59_60_ladder_2 = _2550;
                frontier_phi_59_60_ladder_3 = _2548;
                frontier_phi_59_60_ladder_4 = _2546;
                frontier_phi_59_60_ladder_5 = _2554;
            }
            else
            {
                frontier_phi_59_60_ladder = _2417;
                frontier_phi_59_60_ladder_1 = _2413;
                frontier_phi_59_60_ladder_2 = _2411;
                frontier_phi_59_60_ladder_3 = _2409;
                frontier_phi_59_60_ladder_4 = _2407;
                frontier_phi_59_60_ladder_5 = _2415;
            }
            _2545 = frontier_phi_59_60_ladder_4;
            _2547 = frontier_phi_59_60_ladder_3;
            _2549 = frontier_phi_59_60_ladder_2;
            _2551 = frontier_phi_59_60_ladder_1;
            _2553 = frontier_phi_59_60_ladder_5;
            _2555 = frontier_phi_59_60_ladder;
        }
        float _2560 = isnan(1.0) ? _630 : (isnan(_630) ? 1.0 : min(_630, 1.0));
        _2312 = (_2560 * _2551) + _1991;
        _2314 = (_2560 * _2553) + _1992;
        _2316 = (_2560 * _2555) + _1993;
        _2318 = ((_2545 * 0.039999999105930328369140625) * _2560) + _2147;
        _2320 = ((_2547 * 0.039999999105930328369140625) * _2560) + _2148;
        _2322 = ((_2549 * 0.039999999105930328369140625) * _2560) + _2149;
    }
    else
    {
        _2312 = _1991;
        _2314 = _1992;
        _2316 = _1993;
        _2318 = _2147;
        _2320 = _2148;
        _2322 = _2149;
    }
    float _4130 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _4141 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _4152 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _2339 = ((isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (_2312 + ((isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0))) * _630))) + ((_2318 + ((isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0))) * _1436)) * cbPerFrame._m0[3u].x);
    float _2340 = ((isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * (_2314 + ((isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0))) * _630))) + ((_2320 + ((isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0))) * _1436)) * cbPerFrame._m0[3u].x);
    float _2341 = ((isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0))) * (_2316 + ((isnan(0.0) ? _1363 : (isnan(_1363) ? 0.0 : max(_1363, 0.0))) * _630))) + ((_2322 + ((isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0))) * _1436)) * cbPerFrame._m0[3u].x);
    uint _2345 = _604 + 6u;
    float _2353 = _565 / cbSceneParam._m0[86u].x;
    float _2354 = _566 / cbSceneParam._m0[86u].y;
    vec4 _2368 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2353, _2354, (log2((isnan(cbSceneParam._m0[77u].w) ? _552 : (isnan(_552) ? cbSceneParam._m0[77u].w : min(_552, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2370 = _2368.x;
    float _2371 = _2368.y;
    float _2372 = _2368.z;
    float _2373 = _2368.w;
    float _2469;
    float _2471;
    float _2473;
    float _2475;
    if (_552 > cbSceneParam._m0[78u].w)
    {
        float _2432 = isnan(_552) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _552 : min(cbSceneParam._m0[80u].w, _552));
        float _2433 = _2432 / _552;
        float _2444 = _2433 * _265;
        float _2445 = _266 * _2433;
        float _2446 = (-0.0) - _2445;
        float _2447 = _2433 * _267;
        float _2449 = (cbSceneParam._m0[77u].w * _2446) / _2432;
        float _2450 = _2449 + cbSceneParam._m0[79u].w;
        float _2451 = cbSceneParam._m0[79u].w - _2445;
        float _2457 = sqrt(((_2444 * _2444) + (_2445 * _2445)) + (_2447 * _2447));
        float _2460 = (1.0 - (cbSceneParam._m0[77u].w / _2432)) * _2457;
        float _2465 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2467 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2667;
        if (abs((_2446 - _2449) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2667 = ((((_2450 > 0.0) ? exp2(_2465 * _2450) : (2.0 - exp2(_2467 * _2450))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2460;
        }
        else
        {
            float _2606 = 1.0 / cbSceneParam._m0[80u].x;
            float _2607 = isnan(_2451) ? _2450 : (isnan(_2450) ? _2451 : max(_2450, _2451));
            float _2608 = isnan(_2451) ? _2450 : (isnan(_2450) ? _2451 : min(_2450, _2451));
            float _2617 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : min(_2607, 0.0));
            float _2618 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : min(_2608, 0.0));
            _2667 = ((abs(_2457 / _2446) * cbSceneParam._m0[80u].y) * ((((_2617 - _2618) * 2.0) - ((exp2(_2465 * (isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0)))) - exp2(_2465 * (isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0))))) * _2606)) - ((exp2(_2467 * _2617) - exp2(_2467 * _2618)) * _2606))) + (_2460 * cbSceneParam._m0[80u].z);
        }
        vec4 _2669 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2353, _2354, 1.0), 0.0);
        float _2678 = exp2((_2667 * (-1.44269502162933349609375)) * (1.0 - _2669.w));
        float _2679 = log2(_2678);
        float _2695 = log2(_2373);
        _2469 = (exp2(_2695 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2679 * cbSceneParam._m0[78u].x)) * _2669.x) / cbSceneParam._m0[78u].x)) + _2370;
        _2471 = (exp2(_2695 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2679 * cbSceneParam._m0[78u].y)) * _2669.y) / cbSceneParam._m0[78u].y)) + _2371;
        _2473 = (exp2(_2695 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2679 * cbSceneParam._m0[78u].z)) * _2669.z) / cbSceneParam._m0[78u].z)) + _2372;
        _2475 = _2678 * _2373;
    }
    else
    {
        _2469 = _2370;
        _2471 = _2371;
        _2473 = _2372;
        _2475 = _2373;
    }
    float _2487 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2488 = _2487 == 3.0;
    float _2489 = log2(_2475);
    float _2496 = exp2(_2489 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0)));
    float _2497 = exp2(_2489 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0)));
    float _2498 = exp2(_2489 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2341 : (isnan(_2341) ? 0.0 : max(_2341, 0.0)));
    float _2507 = (_2487 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2507 * (_2488 ? _2496 : (_2496 + (cbSceneParam._m0[72u].w * _2469)));
    SV_Target.y = _2507 * (_2488 ? _2497 : (_2497 + (cbSceneParam._m0[72u].w * _2471)));
    SV_Target.z = _2507 * (_2488 ? _2498 : (_2498 + (cbSceneParam._m0[72u].w * _2473)));
    SV_Target.w = cbInstanceData._m0[_2345].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2345].w;
}


