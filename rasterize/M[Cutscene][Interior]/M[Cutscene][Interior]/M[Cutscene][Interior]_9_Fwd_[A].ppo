#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_12;
layout(set = 0, binding = 3) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _455;
float _3291;
float _3292;
float _3293;
float _3294;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _206 = _205 * _198;
    float _207 = _205 * _199;
    float _208 = _205 * _200;
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _213 = _212 * NORMAL.x;
    float _214 = _212 * NORMAL.y;
    float _215 = _212 * NORMAL.z;
    float _219 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _220 = _219 * TANGENT.x;
    float _221 = _219 * TANGENT.y;
    float _222 = _219 * TANGENT.z;
    float _267 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _277 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _267);
    float _278 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _267);
    float _279 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _267);
    vec4 _292 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _295 = _292.x;
    vec4 _313 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _330 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _295) + cbMtdParam._m0[12u].x) * _313.x;
    float _332 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _295) + cbMtdParam._m0[12u].y) * _313.y;
    float _334 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _295) + cbMtdParam._m0[12u].z) * _313.z;
    vec4 _368 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _383 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _390 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _402 = cbMtdParam._m0[24u].w + _277;
    float _403 = cbMtdParam._m0[25u].x + _278;
    float _404 = cbMtdParam._m0[25u].y + _279;
    float _418 = (-0.0) - dot(vec3(_402, _403, _404), vec3(_383 * _206, _383 * _207, _383 * _208));
    float _419 = (-0.0) - dot(vec3(_402, _403, _404), vec3(_390 * _220, _390 * _221, _390 * _222));
    float _420 = (-0.0) - dot(vec3(_402, _403, _404), vec3((-0.0) - _213, (-0.0) - _214, (-0.0) - _215));
    float _424 = inversesqrt(dot(vec3(_418, _419, _420), vec3(_418, _419, _420)));
    float _425 = _424 * _420;
    float _430 = ((cbMtdParam._m0[21u].z * _418) * _424) + (((_368.x * 2.0) + (-1.0)) * cbMtdParam._m0[22u].x);
    float _431 = ((cbMtdParam._m0[21u].w * _419) * _424) + (((_368.y * 2.0) + (-1.0)) * cbMtdParam._m0[22u].y);
    float _434 = fract(cbMtdParam._m0[21u].z * TEXCOORD.x);
    float _435 = fract(cbMtdParam._m0[21u].w * TEXCOORD.y);
    float _453;
    float _456;
    float _458;
    if (_430 > 0.0)
    {
        float _439 = (1.0 - _434) / _430;
        _453 = _439;
        _456 = ((cbMtdParam._m0[18u].w + 1.0) - fract(_439 * _425)) * 0.16666667163372039794921875;
        _458 = (fract((_439 * _431) + _435) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_430 < 0.0)
        {
            float _454 = ((-0.0) - _434) / _430;
            frontier_phi_3_2_ladder = _454;
            frontier_phi_3_2_ladder_1 = (fract((_454 * _431) + _435) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_2 = (fract(_454 * _425) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = _455;
            frontier_phi_3_2_ladder_1 = 0.0;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _453 = frontier_phi_3_2_ladder;
        _456 = frontier_phi_3_2_ladder_2;
        _458 = frontier_phi_3_2_ladder_1;
    }
    float _484;
    float _486;
    float _488;
    if (_431 > 0.0)
    {
        float _471 = (1.0 - _435) / _431;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_471 < _453)
        {
            frontier_phi_8_5_ladder = (fract(_471 * _425) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_471 * _430) + _434) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _471;
        }
        else
        {
            frontier_phi_8_5_ladder = _458;
            frontier_phi_8_5_ladder_1 = _456;
            frontier_phi_8_5_ladder_2 = _453;
        }
        _484 = frontier_phi_8_5_ladder_2;
        _486 = frontier_phi_8_5_ladder_1;
        _488 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_431 < 0.0)
        {
            float _485 = ((-0.0) - _435) / _431;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_485 < _453)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_485 * _425) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_485 * _430) + _434) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _485;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _458;
                frontier_phi_8_6_ladder_9_ladder_1 = _456;
                frontier_phi_8_6_ladder_9_ladder_2 = _453;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _458;
            frontier_phi_8_6_ladder_1 = _456;
            frontier_phi_8_6_ladder_2 = _453;
        }
        _484 = frontier_phi_8_6_ladder_2;
        _486 = frontier_phi_8_6_ladder_1;
        _488 = frontier_phi_8_6_ladder;
    }
    float _492 = (_425 > 0.0) ? (cbMtdParam._m0[18u].z / _425) : 5000.0;
    float _505;
    float _506;
    if (_492 < _484)
    {
        _505 = ((_434 + cbMtdParam._m0[18u].w) + (_492 * _430)) * 0.16666667163372039794921875;
        _506 = (((_492 * _431) + _435) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _505 = _486;
        _506 = _488;
    }
    vec4 _508 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_505, _506));
    float _3303 = isnan(0.0) ? cbMtdParam._m0[17u].z : (isnan(cbMtdParam._m0[17u].z) ? 0.0 : max(cbMtdParam._m0[17u].z, 0.0));
    float _522 = isnan(1.0) ? _3303 : (isnan(_3303) ? 1.0 : min(_3303, 1.0));
    float _3314 = isnan(0.0) ? cbMtdParam._m0[17u].y : (isnan(cbMtdParam._m0[17u].y) ? 0.0 : max(cbMtdParam._m0[17u].y, 0.0));
    float _565 = ((_522 - ((1.0 - (isnan(1.0) ? _3314 : (isnan(_3314) ? 1.0 : min(_3314, 1.0)))) * (_522 + 1.0))) + (((cbMtdParam._m0[18u].y * texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[3u].w)).x) + (cbMtdParam._m0[17u].x * texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w)).x)) / cbMtdParam._m0[17u].w)) / _522;
    float _3325 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _566 = isnan(1.0) ? _3325 : (isnan(_3325) ? 1.0 : min(_3325, 1.0));
    float _568 = 3.0 - (_566 * 2.0);
    float _573 = _566 * _566;
    vec4 _595 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _599 = _595.z;
    float _602 = (_595.x * 2.0) + (-1.0);
    float _603 = (_595.y * 2.0) + (-1.0);
    float _604 = dot(vec2(_602, _603), vec2(_602, _603));
    float _3336 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _609 = sqrt(1.0 - (isnan(1.0) ? _3336 : (isnan(_3336) ? 1.0 : min(_3336, 1.0))));
    float _612 = fma(_609, _213, fma(_603, _220, _602 * _206));
    float _615 = fma(_609, _214, fma(_603, _221, _602 * _207));
    float _618 = fma(_609, _215, fma(_603, _222, _602 * _208));
    float _622 = inversesqrt(dot(vec3(_612, _615, _618), vec3(_612, _615, _618)));
    float _623 = _622 * _612;
    float _624 = _622 * _615;
    float _625 = _622 * _618;
    float _3347 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _626 = isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0));
    float _3358 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _3369 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _3380 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _645 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _649 = inversesqrt(dot(vec3(_277, _278, _279), vec3(_277, _278, _279)));
    float _650 = _277 * _649;
    float _651 = _278 * _649;
    float _652 = _279 * _649;
    vec4 _657 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _659 = _657.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _820 = sqrt(((_277 * _277) + (_278 * _278)) + (_279 * _279));
        float _826 = (cbMatDynParam._m0[5u].x * _820) + cbMatDynParam._m0[5u].y;
        float _3391 = isnan(0.0) ? _826 : (isnan(_826) ? 0.0 : max(_826, 0.0));
        float _827 = isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0));
        float _831 = (cbMatDynParam._m0[5u].z * _820) + cbMatDynParam._m0[5u].w;
        float _3402 = isnan(0.0) ? _831 : (isnan(_831) ? 0.0 : max(_831, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0))) - _827)) + _827) < ((_659 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _676 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _677 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _697 = fma(_625, cbSceneParam._m0[5u].z, fma(_624, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _623));
    float _700 = fma(_625, cbSceneParam._m0[6u].z, fma(_624, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _623));
    float _703 = fma(_625, cbSceneParam._m0[7u].z, fma(_624, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _623));
    uint _716 = uint(roundEven(NORMAL.w)) * 13u;
    uint _717 = _716 + 9u;
    uint _718 = _717 + uint(cbMatDynParam._m0[0u].w);
    float _724 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0)))) * cbInstanceData._m0[_718].x;
    float _725 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0)))) * cbInstanceData._m0[_718].y;
    float _726 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0)))) * cbInstanceData._m0[_718].z;
    float _3413 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _727 = isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0));
    float _3424 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _728 = isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0));
    float _3435 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _729 = isnan(1.0) ? _3435 : (isnan(_3435) ? 1.0 : min(_3435, 1.0));
    vec4 _738 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _676, cbSceneParam._m0[86u].y * _677));
    float _741 = _738.x * TEXCOORD_4.z;
    float _742 = dot(vec3(_623, _624, _625), vec3(_650, _651, _652));
    float _745 = _742 * 2.0;
    float _749 = (_745 * _623) - _650;
    float _750 = (_745 * _624) - _651;
    float _751 = (_745 * _625) - _652;
    float _755 = abs(dot(vec3(_650, _651, _652), vec3(_623, _624, _625)));
    float _3446 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _757 = sqrt(_626);
    float _769 = exp2((_757 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3446 : (isnan(_3446) ? 1.0 : min(_3446, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_757 * 3.0));
    float _801 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _805 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _809 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _865 = fma(_809, cbModelParam._m0[26u].z, fma(_805, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _801));
        float _869 = fma(_809, cbModelParam._m0[27u].z, fma(_805, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _801));
        float _873 = fma(_809, cbModelParam._m0[28u].z, fma(_805, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _801));
        float _897 = _801 + _623;
        float _898 = _805 + _624;
        float _899 = _809 + _625;
        float _909 = fma(_899, cbModelParam._m0[26u].z, fma(_898, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _897)) - _865;
        float _910 = fma(_899, cbModelParam._m0[27u].z, fma(_898, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _897)) - _869;
        float _911 = fma(_899, cbModelParam._m0[28u].z, fma(_898, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _897)) - _873;
        float _915 = inversesqrt(dot(vec3(_909, _910, _911), vec3(_909, _910, _911)));
        float _928 = ((_915 * _909) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_865 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _929 = ((_915 * _910) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_869 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _930 = ((_915 * _911) / cbModelParam._m0[34u].z) + ((((((_873 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _933 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_928, _929, _930), 0.0);
        vec4 _940 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_928, _929, _930), 0.0);
        vec4 _947 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_928, _929, _930), 0.0);
        vec4 _954 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_928, _929, _930), 0.0);
        float _967 = exp2((_933.w + (-0.5)) * 20.0) * 2.0;
        float _968 = _967 * (_933.x + (-0.5));
        float _969 = _967 * (_933.y + (-0.5));
        float _970 = _967 * (_933.z + (-0.5));
        float _977 = exp2((_940.w + (-0.5)) * 20.0) * 2.0;
        float _978 = _977 * (_940.x + (-0.5));
        float _979 = _977 * (_940.y + (-0.5));
        float _980 = _977 * (_940.z + (-0.5));
        float _987 = exp2((_947.w + (-0.5)) * 20.0) * 2.0;
        float _988 = _987 * (_947.x + (-0.5));
        float _989 = _987 * (_947.y + (-0.5));
        float _990 = _987 * (_947.z + (-0.5));
        float _997 = exp2((_954.w + (-0.5)) * 20.0) * 2.0;
        float _998 = _997 * (_954.x + (-0.5));
        float _999 = _997 * (_954.y + (-0.5));
        float _1000 = _997 * (_954.z + (-0.5));
        float _1001 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _1002 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1003 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        float _1004 = _968 * 0.5;
        float _1005 = _978 * 0.5;
        float _1006 = _988 * 0.5;
        float _1007 = dot(vec3(_1004, _1005, _1006), vec3(_1004, _1005, _1006));
        float _1012 = (_1007 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1007);
        float _1021 = (dot(vec3(_623, _624, _625), vec3(_1012 * _1004, _1012 * _1005, _1012 * _1006)) + 1.0) * 0.5;
        float _3472 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1031 = sqrt(((_1005 * _1005) + (_1004 * _1004)) + (_1006 * _1006)) / (_1001 + 9.9999997473787516355514526367188e-06);
        float _3483 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0));
        float _1033 = _1032 * 2.0;
        float _1037 = (1.0 - _1032) / (_1032 + 1.0);
        float _3494 = isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0));
        float _1038 = isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0));
        float _1047 = ((((1.0 - _1038) * (_1033 + 2.0)) * exp2(log2(isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0))) * (_1033 + 1.0))) + _1038) * _1001;
        float _1048 = _969 * 0.5;
        float _1049 = _979 * 0.5;
        float _1050 = _989 * 0.5;
        float _1051 = dot(vec3(_1048, _1049, _1050), vec3(_1048, _1049, _1050));
        float _1056 = (_1051 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1051);
        float _1064 = (dot(vec3(_623, _624, _625), vec3(_1056 * _1048, _1056 * _1049, _1056 * _1050)) + 1.0) * 0.5;
        float _3505 = isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0));
        float _1073 = sqrt(((_1049 * _1049) + (_1048 * _1048)) + (_1050 * _1050)) / (_1002 + 9.9999997473787516355514526367188e-06);
        float _3516 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3516 : (isnan(_3516) ? 1.0 : min(_3516, 1.0));
        float _1075 = _1074 * 2.0;
        float _1079 = (1.0 - _1074) / (_1074 + 1.0);
        float _3527 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _3527 : (isnan(_3527) ? 1.0 : min(_3527, 1.0));
        float _1089 = ((((1.0 - _1080) * (_1075 + 2.0)) * exp2(log2(isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0))) * (_1075 + 1.0))) + _1080) * _1002;
        float _1090 = _970 * 0.5;
        float _1091 = _980 * 0.5;
        float _1092 = _990 * 0.5;
        float _1093 = dot(vec3(_1090, _1091, _1092), vec3(_1090, _1091, _1092));
        float _1098 = (_1093 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1093);
        float _1106 = (dot(vec3(_623, _624, _625), vec3(_1098 * _1090, _1098 * _1091, _1098 * _1092)) + 1.0) * 0.5;
        float _3538 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1115 = sqrt(((_1091 * _1091) + (_1090 * _1090)) + (_1092 * _1092)) / (_1003 + 9.9999997473787516355514526367188e-06);
        float _3549 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _3549 : (isnan(_3549) ? 1.0 : min(_3549, 1.0));
        float _1117 = _1116 * 2.0;
        float _1121 = (1.0 - _1116) / (_1116 + 1.0);
        float _3560 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0));
        float _1131 = ((((1.0 - _1122) * (_1117 + 2.0)) * exp2(log2(isnan(1.0) ? _3538 : (isnan(_3538) ? 1.0 : min(_3538, 1.0))) * (_1117 + 1.0))) + _1122) * _1003;
        _1139 = _970;
        _1140 = _969;
        _1141 = _968;
        _1142 = _980;
        _1143 = _979;
        _1144 = _978;
        _1145 = _990;
        _1146 = _989;
        _1147 = _988;
        _1148 = _1003;
        _1149 = _1002;
        _1150 = _1001;
        _1151 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0)));
        _1152 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0)));
        _1153 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0)));
    }
    else
    {
        _1139 = _455;
        _1140 = _455;
        _1141 = _455;
        _1142 = _455;
        _1143 = _455;
        _1144 = _455;
        _1145 = _455;
        _1146 = _455;
        _1147 = _455;
        _1148 = _455;
        _1149 = _455;
        _1150 = _455;
        _1151 = 0.0;
        _1152 = 0.0;
        _1153 = 0.0;
    }
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    float _1463;
    float _1464;
    float _1465;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1182 = fma(_809, cbModelParam._m0[30u].z, fma(_805, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _801));
        float _1186 = fma(_809, cbModelParam._m0[31u].z, fma(_805, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _801));
        float _1190 = fma(_809, cbModelParam._m0[32u].z, fma(_805, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _801));
        float _1213 = _801 + _623;
        float _1214 = _805 + _624;
        float _1215 = _809 + _625;
        float _1225 = fma(_1215, cbModelParam._m0[30u].z, fma(_1214, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1213)) - _1182;
        float _1226 = fma(_1215, cbModelParam._m0[31u].z, fma(_1214, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1213)) - _1186;
        float _1227 = fma(_1215, cbModelParam._m0[32u].z, fma(_1214, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1213)) - _1190;
        float _1231 = inversesqrt(dot(vec3(_1225, _1226, _1227), vec3(_1225, _1226, _1227)));
        float _1244 = ((_1231 * _1225) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1182 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1245 = ((_1231 * _1226) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1186 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1246 = ((_1231 * _1227) / cbModelParam._m0[35u].z) + ((((((_1190 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1248 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1244, _1245, _1246), 0.0);
        vec4 _1255 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1244, _1245, _1246), 0.0);
        vec4 _1262 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1244, _1245, _1246), 0.0);
        vec4 _1269 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1244, _1245, _1246), 0.0);
        float _1281 = exp2((_1248.w + (-0.5)) * 20.0) * 2.0;
        float _1282 = _1281 * (_1248.x + (-0.5));
        float _1283 = _1281 * (_1248.y + (-0.5));
        float _1284 = _1281 * (_1248.z + (-0.5));
        float _1291 = exp2((_1255.w + (-0.5)) * 20.0) * 2.0;
        float _1292 = _1291 * (_1255.x + (-0.5));
        float _1293 = _1291 * (_1255.y + (-0.5));
        float _1294 = _1291 * (_1255.z + (-0.5));
        float _1301 = exp2((_1262.w + (-0.5)) * 20.0) * 2.0;
        float _1302 = _1301 * (_1262.x + (-0.5));
        float _1303 = _1301 * (_1262.y + (-0.5));
        float _1304 = _1301 * (_1262.z + (-0.5));
        float _1311 = exp2((_1269.w + (-0.5)) * 20.0) * 2.0;
        float _1312 = _1311 * (_1269.x + (-0.5));
        float _1313 = _1311 * (_1269.y + (-0.5));
        float _1314 = _1311 * (_1269.z + (-0.5));
        float _1315 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1316 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
        float _1317 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1318 = _1282 * 0.5;
        float _1319 = _1292 * 0.5;
        float _1320 = _1302 * 0.5;
        float _1321 = dot(vec3(_1318, _1319, _1320), vec3(_1318, _1319, _1320));
        float _1326 = (_1321 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1321);
        float _1334 = (dot(vec3(_623, _624, _625), vec3(_1326 * _1318, _1326 * _1319, _1326 * _1320)) + 1.0) * 0.5;
        float _3601 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1343 = sqrt(((_1319 * _1319) + (_1318 * _1318)) + (_1320 * _1320)) / (_1315 + 9.9999997473787516355514526367188e-06);
        float _3612 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
        float _1345 = _1344 * 2.0;
        float _1349 = (1.0 - _1344) / (_1344 + 1.0);
        float _3623 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1350 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
        float _1359 = ((((1.0 - _1350) * (_1345 + 2.0)) * exp2(log2(isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0))) * (_1345 + 1.0))) + _1350) * _1315;
        float _1360 = _1283 * 0.5;
        float _1361 = _1293 * 0.5;
        float _1362 = _1303 * 0.5;
        float _1363 = dot(vec3(_1360, _1361, _1362), vec3(_1360, _1361, _1362));
        float _1368 = (_1363 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1363);
        float _1376 = (dot(vec3(_623, _624, _625), vec3(_1368 * _1360, _1368 * _1361, _1368 * _1362)) + 1.0) * 0.5;
        float _3634 = isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0));
        float _1385 = sqrt(((_1361 * _1361) + (_1360 * _1360)) + (_1362 * _1362)) / (_1316 + 9.9999997473787516355514526367188e-06);
        float _3645 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
        float _1387 = _1386 * 2.0;
        float _1391 = (1.0 - _1386) / (_1386 + 1.0);
        float _3656 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1392 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
        float _1401 = ((((1.0 - _1392) * (_1387 + 2.0)) * exp2(log2(isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0))) * (_1387 + 1.0))) + _1392) * _1316;
        float _1402 = _1284 * 0.5;
        float _1403 = _1294 * 0.5;
        float _1404 = _1304 * 0.5;
        float _1405 = dot(vec3(_1402, _1403, _1404), vec3(_1402, _1403, _1404));
        float _1410 = (_1405 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1405);
        float _1418 = (dot(vec3(_623, _624, _625), vec3(_1410 * _1402, _1410 * _1403, _1410 * _1404)) + 1.0) * 0.5;
        float _3667 = isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0));
        float _1427 = sqrt(((_1403 * _1403) + (_1402 * _1402)) + (_1404 * _1404)) / (_1317 + 9.9999997473787516355514526367188e-06);
        float _3678 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1428 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
        float _1429 = _1428 * 2.0;
        float _1433 = (1.0 - _1428) / (_1428 + 1.0);
        float _3689 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1434 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
        float _1443 = ((((1.0 - _1434) * (_1429 + 2.0)) * exp2(log2(isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0))) * (_1429 + 1.0))) + _1434) * _1317;
        _1451 = _1284;
        _1452 = _1283;
        _1453 = _1282;
        _1454 = _1294;
        _1455 = _1293;
        _1456 = _1292;
        _1457 = _1304;
        _1458 = _1303;
        _1459 = _1302;
        _1460 = _1317;
        _1461 = _1316;
        _1462 = _1315;
        _1463 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0)));
        _1464 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0)));
        _1465 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0)));
    }
    else
    {
        _1451 = _455;
        _1452 = _455;
        _1453 = _455;
        _1454 = _455;
        _1455 = _455;
        _1456 = _455;
        _1457 = _455;
        _1458 = _455;
        _1459 = _455;
        _1460 = _455;
        _1461 = _455;
        _1462 = _455;
        _1463 = 0.0;
        _1464 = 0.0;
        _1465 = 0.0;
    }
    float _1475 = (cbModelParam._m0[1u].x * (_1463 - _1151)) + _1151;
    float _1476 = (cbModelParam._m0[1u].x * (_1464 - _1152)) + _1152;
    float _1477 = (cbModelParam._m0[1u].x * (_1465 - _1153)) + _1153;
    float _1498 = fma(_1477, cbSceneParam._m0[89u].z, fma(_1476, cbSceneParam._m0[89u].y, _1475 * cbSceneParam._m0[89u].x));
    float _1501 = fma(_1477, cbSceneParam._m0[90u].z, fma(_1476, cbSceneParam._m0[90u].y, _1475 * cbSceneParam._m0[90u].x));
    float _1504 = fma(_1477, cbSceneParam._m0[91u].z, fma(_1476, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1475));
    float _1519 = _749 * 0.5;
    float _1520 = _750 * 0.5;
    float _1521 = _751 * 0.5;
    float _1522 = dot(vec4(_1519, _1520, _1521, 1.0), vec4(_1453, _1456, _1459, _1462));
    float _1525 = dot(vec4(_1519, _1520, _1521, 1.0), vec4(_1452, _1455, _1458, _1461));
    float _1528 = dot(vec4(_1519, _1520, _1521, 1.0), vec4(_1451, _1454, _1457, _1460));
    float _1562;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1535 = dot(vec4(_1519, _1520, _1521, 1.0), vec4(_1139, _1142, _1145, _1148));
        float _1539 = dot(vec4(_1519, _1520, _1521, 1.0), vec4(_1140, _1143, _1146, _1149));
        float _1543 = dot(vec4(_1519, _1520, _1521, 1.0), vec4(_1141, _1144, _1147, _1150));
        float _1550 = dot(vec4(cbModelParam._m0[39u]), vec4(_1519, _1520, _1521, 1.0));
        _1562 = dot(vec3(isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0)), isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0)), isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1550) ? 0.0 : (isnan(0.0) ? _1550 : max(0.0, _1550))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1562 = 1.0;
    }
    float _1573;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1564 = dot(vec4(cbModelParam._m0[40u]), vec4(_1519, _1520, _1521, 1.0));
        _1573 = dot(vec3(isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0)), isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)), isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1564) ? 0.0 : (isnan(0.0) ? _1564 : max(0.0, _1564))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1573 = 1.0;
    }
    float _1577 = (_1573 * cbModelParam._m0[1u].x) + (_1562 * (1.0 - cbModelParam._m0[1u].x));
    float _1587 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _626);
    float _1588 = isnan(_1587) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1587 : min(cbModelParam._m0[25u].z, _1587));
    float _1669;
    float _1671;
    float _1673;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1636 = fma(_809, cbModelParam._m0[13u].z, fma(_805, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _801)) + cbModelParam._m0[13u].w;
        float _1640 = fma(_809, cbModelParam._m0[14u].z, fma(_805, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _801)) + cbModelParam._m0[14u].w;
        float _1644 = fma(_809, cbModelParam._m0[15u].z, fma(_805, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _801)) + cbModelParam._m0[15u].w;
        float _1647 = fma(_751, cbModelParam._m0[13u].z, fma(_750, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _749));
        float _1650 = fma(_751, cbModelParam._m0[14u].z, fma(_750, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _749));
        float _1653 = fma(_751, cbModelParam._m0[15u].z, fma(_750, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _749));
        float _1681;
        if (_1647 > 0.0)
        {
            _1681 = abs((1.0 - _1636) / _1647);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_1647 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_1636 + 1.0) / _1647);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1681 = frontier_phi_29_27_ladder;
        }
        float _2027;
        if (_1650 > 0.0)
        {
            _2027 = abs((1.0 - _1640) / _1650);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1650 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1640 + 1.0) / _1650);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _2027 = frontier_phi_38_34_ladder;
        }
        float _2357;
        if (_1653 > 0.0)
        {
            _2357 = abs((1.0 - _1644) / _1653);
        }
        else
        {
            float frontier_phi_52_45_ladder;
            if (_1653 < 0.0)
            {
                frontier_phi_52_45_ladder = abs((_1644 + 1.0) / _1653);
            }
            else
            {
                frontier_phi_52_45_ladder = 5000.0;
            }
            _2357 = frontier_phi_52_45_ladder;
        }
        float _2359 = isnan(_2027) ? _1681 : (isnan(_1681) ? _2027 : min(_1681, _2027));
        float _2360 = isnan(_2357) ? _2359 : (isnan(_2359) ? _2357 : min(_2359, _2357));
        float _2364 = (_2360 * _1647) + _1636;
        float _2365 = (_2360 * _1650) + _1640;
        float _2366 = (_2360 * _1653) + _1644;
        float _2367 = _2360 * 9.9999997473787516355514526367188e-05;
        float _2368 = (-1.0) - _2367;
        float _2370 = _2367 + 1.0;
        float frontier_phi_28_52_ladder;
        float frontier_phi_28_52_ladder_1;
        float frontier_phi_28_52_ladder_2;
        if ((_2366 > _2370) || ((_2366 < _2368) || ((_2365 > _2370) || ((_2365 < _2368) || ((_2364 < _2368) || (_2364 > _2370))))))
        {
            frontier_phi_28_52_ladder = 0.0;
            frontier_phi_28_52_ladder_1 = 0.0;
            frontier_phi_28_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2508 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2366, cbModelParam._m0[9u].z, fma(_2365, cbModelParam._m0[9u].y, _2364 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2366, cbModelParam._m0[10u].z, fma(_2365, cbModelParam._m0[10u].y, _2364 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2366, cbModelParam._m0[11u].z, fma(_2365, cbModelParam._m0[11u].y, _2364 * cbModelParam._m0[11u].x))), _1588);
            frontier_phi_28_52_ladder = _2508.z * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_1 = _2508.y * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_2 = _2508.x * cbModelParam._m0[1u].y;
        }
        _1669 = frontier_phi_28_52_ladder_2;
        _1671 = frontier_phi_28_52_ladder_1;
        _1673 = frontier_phi_28_52_ladder;
    }
    else
    {
        vec4 _1657 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_749, _750, _751), _1588);
        _1669 = _1657.x * cbModelParam._m0[1u].y;
        _1671 = _1657.y * cbModelParam._m0[1u].y;
        _1673 = _1657.z * cbModelParam._m0[1u].y;
    }
    float _1677 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _626);
    float _1678 = isnan(_1677) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1677 : min(cbModelParam._m0[25u].w, _1677));
    float _1767;
    float _1769;
    float _1771;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1731 = fma(_809, cbModelParam._m0[21u].z, fma(_805, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _801)) + cbModelParam._m0[21u].w;
        float _1735 = fma(_809, cbModelParam._m0[22u].z, fma(_805, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _801)) + cbModelParam._m0[22u].w;
        float _1739 = fma(_809, cbModelParam._m0[23u].z, fma(_805, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _801)) + cbModelParam._m0[23u].w;
        float _1742 = fma(_751, cbModelParam._m0[21u].z, fma(_750, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _749));
        float _1745 = fma(_751, cbModelParam._m0[22u].z, fma(_750, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _749));
        float _1748 = fma(_751, cbModelParam._m0[23u].z, fma(_750, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _749));
        float _2032;
        if (_1742 > 0.0)
        {
            _2032 = abs((1.0 - _1731) / _1742);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1742 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1731 + 1.0) / _1742);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _2032 = frontier_phi_40_36_ladder;
        }
        float _2383;
        if (_1745 > 0.0)
        {
            _2383 = abs((1.0 - _1735) / _1745);
        }
        else
        {
            float frontier_phi_54_47_ladder;
            if (_1745 < 0.0)
            {
                frontier_phi_54_47_ladder = abs((_1735 + 1.0) / _1745);
            }
            else
            {
                frontier_phi_54_47_ladder = 5000.0;
            }
            _2383 = frontier_phi_54_47_ladder;
        }
        float _2573;
        if (_1748 > 0.0)
        {
            _2573 = abs((1.0 - _1739) / _1748);
        }
        else
        {
            float frontier_phi_72_65_ladder;
            if (_1748 < 0.0)
            {
                frontier_phi_72_65_ladder = abs((_1739 + 1.0) / _1748);
            }
            else
            {
                frontier_phi_72_65_ladder = 5000.0;
            }
            _2573 = frontier_phi_72_65_ladder;
        }
        float _2575 = isnan(_2383) ? _2032 : (isnan(_2032) ? _2383 : min(_2032, _2383));
        float _2576 = isnan(_2573) ? _2575 : (isnan(_2575) ? _2573 : min(_2575, _2573));
        float _2580 = (_2576 * _1742) + _1731;
        float _2581 = (_2576 * _1745) + _1735;
        float _2582 = (_2576 * _1748) + _1739;
        float _2583 = _2576 * 9.9999997473787516355514526367188e-05;
        float _2584 = (-1.0) - _2583;
        float _2586 = _2583 + 1.0;
        float frontier_phi_37_72_ladder;
        float frontier_phi_37_72_ladder_1;
        float frontier_phi_37_72_ladder_2;
        if ((_2582 > _2586) || ((_2582 < _2584) || ((_2581 > _2586) || ((_2581 < _2584) || ((_2580 < _2584) || (_2580 > _2586))))))
        {
            frontier_phi_37_72_ladder = 0.0;
            frontier_phi_37_72_ladder_1 = 0.0;
            frontier_phi_37_72_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2824 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2582, cbModelParam._m0[17u].z, fma(_2581, cbModelParam._m0[17u].y, _2580 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2582, cbModelParam._m0[18u].z, fma(_2581, cbModelParam._m0[18u].y, _2580 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2582, cbModelParam._m0[19u].z, fma(_2581, cbModelParam._m0[19u].y, _2580 * cbModelParam._m0[19u].x))), _1678);
            frontier_phi_37_72_ladder = _2824.z * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_1 = _2824.y * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_2 = _2824.x * cbModelParam._m0[1u].z;
        }
        _1767 = frontier_phi_37_72_ladder_2;
        _1769 = frontier_phi_37_72_ladder_1;
        _1771 = frontier_phi_37_72_ladder;
    }
    else
    {
        vec4 _1751 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_749, _750, _751), _1678);
        _1767 = _1751.x * cbModelParam._m0[1u].z;
        _1769 = _1751.y * cbModelParam._m0[1u].z;
        _1771 = _1751.z * cbModelParam._m0[1u].z;
    }
    float _1783 = ((((1.0 - _769) * ((_757 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_769 * _757)) * _741;
    float _1784 = _1783 * ((cbModelParam._m0[1u].w * (_1767 - _1669)) + _1669);
    float _1785 = _1783 * ((cbModelParam._m0[1u].w * (_1769 - _1671)) + _1671);
    float _1786 = _1783 * ((cbModelParam._m0[1u].w * (_1771 - _1673)) + _1673);
    float _1789 = fma(_1786, cbSceneParam._m0[89u].z, fma(_1785, cbSceneParam._m0[89u].y, _1784 * cbSceneParam._m0[89u].x));
    float _1792 = fma(_1786, cbSceneParam._m0[90u].z, fma(_1785, cbSceneParam._m0[90u].y, _1784 * cbSceneParam._m0[90u].x));
    float _1795 = fma(_1786, cbSceneParam._m0[91u].z, fma(_1785, cbSceneParam._m0[91u].y, _1784 * cbSceneParam._m0[91u].x));
    uvec4 _1805 = floatBitsToUint(cbInstanceData._m0[_716 + 5u]);
    uint _1807 = _1805.x * 14u;
    uint _1808 = _1807 + 13u;
    float _1813 = _741 + (-1.0);
    float _1816 = (cbLight._m0[_1808].x * _1813) + 1.0;
    float _1817 = (cbLight._m0[_1808].y * _1813) + 1.0;
    uint _1818 = _1807 + 5u;
    float _1824 = isnan(1.0) ? _1817 : (isnan(_1817) ? 1.0 : min(_1817, 1.0));
    uint _1828 = _1807 + 4u;
    float _1834 = isnan(1.0) ? _1816 : (isnan(_1816) ? 1.0 : min(_1816, 1.0));
    uint _1838 = _1807 | 1u;
    float _1849 = dot(vec3(cbLight._m0[_1807].xyz), vec3(_623, _624, _625));
    float _1852 = dot(vec3(cbLight._m0[_1838].xyz), vec3(_623, _624, _625));
    float _3825 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
    float _3836 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
    float _1857 = (isnan(1.0) ? _3825 : (isnan(_3825) ? 1.0 : min(_3825, 1.0))) * 0.3183098733425140380859375;
    float _1859 = (isnan(1.0) ? _3836 : (isnan(_3836) ? 1.0 : min(_3836, 1.0))) * 0.3183098733425140380859375;
    float _1866 = ((cbLight._m0[_1818].x * _1824) * _1859) + ((cbLight._m0[_1828].x * _1834) * _1857);
    float _1867 = ((_1824 * cbLight._m0[_1818].y) * _1859) + ((_1834 * cbLight._m0[_1828].y) * _1857);
    float _1868 = ((_1824 * cbLight._m0[_1818].z) * _1859) + ((_1834 * cbLight._m0[_1828].z) * _1857);
    uint _1870 = _1807 + 8u;
    float _1883 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1807].w)) * _626) * 0.949999988079071044921875);
    float _1884 = _1883 * _1883;
    float _1885 = cbLight._m0[_1807].x + _650;
    float _1886 = cbLight._m0[_1807].y + _651;
    float _1887 = cbLight._m0[_1807].z + _652;
    float _1891 = inversesqrt(dot(vec3(_1885, _1886, _1887), vec3(_1885, _1886, _1887)));
    float _1892 = _1891 * _1885;
    float _1893 = _1891 * _1886;
    float _1894 = _1891 * _1887;
    float _1895 = dot(vec3(_623, _624, _625), vec3(cbLight._m0[_1807].xyz));
    float _3847 = isnan(0.0) ? _1895 : (isnan(_1895) ? 0.0 : max(_1895, 0.0));
    float _1898 = isnan(1.0) ? _3847 : (isnan(_3847) ? 1.0 : min(_3847, 1.0));
    float _3858 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _1899 = isnan(1.0) ? _3858 : (isnan(_3858) ? 1.0 : min(_3858, 1.0));
    float _1900 = dot(vec3(_623, _624, _625), vec3(_1892, _1893, _1894));
    float _3869 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
    float _1903 = isnan(1.0) ? _3869 : (isnan(_3869) ? 1.0 : min(_3869, 1.0));
    float _1904 = dot(vec3(cbLight._m0[_1807].xyz), vec3(_1892, _1893, _1894));
    float _3880 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
    float _1908 = _1884 * _1884;
    float _1912 = ((_1903 * _1903) * (_1908 + (-1.0))) + 1.0;
    float _1923 = (exp2(log2(1.0 - (isnan(1.0) ? _3880 : (isnan(_3880) ? 1.0 : min(_3880, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1924 = 1.0 - _1884;
    float _1935 = (0.5 / (((_1899 * ((_1898 * _1924) + _1884)) + 9.9999999392252902907785028219223e-09) + (((_1899 * _1924) + _1884) * _1898))) * _1898;
    float _3891 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
    float _1937 = (isnan(1.0) ? _3891 : (isnan(_3891) ? 1.0 : min(_3891, 1.0))) * (_1908 / ((_1912 * _1912) * 3.141590118408203125));
    uint _1948 = _1807 + 9u;
    float _1959 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1838].w)) * _626) * 0.949999988079071044921875);
    float _1960 = _1959 * _1959;
    float _1961 = cbLight._m0[_1838].x + _650;
    float _1962 = cbLight._m0[_1838].y + _651;
    float _1963 = cbLight._m0[_1838].z + _652;
    float _1967 = inversesqrt(dot(vec3(_1961, _1962, _1963), vec3(_1961, _1962, _1963)));
    float _1968 = _1967 * _1961;
    float _1969 = _1967 * _1962;
    float _1970 = _1967 * _1963;
    float _1971 = dot(vec3(_623, _624, _625), vec3(cbLight._m0[_1838].xyz));
    float _3902 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
    float _1974 = isnan(1.0) ? _3902 : (isnan(_3902) ? 1.0 : min(_3902, 1.0));
    float _1975 = dot(vec3(_623, _624, _625), vec3(_1968, _1969, _1970));
    float _3913 = isnan(0.0) ? _1975 : (isnan(_1975) ? 0.0 : max(_1975, 0.0));
    float _1978 = isnan(1.0) ? _3913 : (isnan(_3913) ? 1.0 : min(_3913, 1.0));
    float _1979 = dot(vec3(cbLight._m0[_1838].xyz), vec3(_1968, _1969, _1970));
    float _3924 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
    float _1983 = _1960 * _1960;
    float _1987 = ((_1978 * _1978) * (_1983 + (-1.0))) + 1.0;
    float _1996 = (exp2(log2(1.0 - (isnan(1.0) ? _3924 : (isnan(_3924) ? 1.0 : min(_3924, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1997 = 1.0 - _1960;
    float _2007 = (0.5 / (((_1899 * ((_1974 * _1997) + _1960)) + 9.9999999392252902907785028219223e-09) + (((_1899 * _1997) + _1960) * _1974))) * _1974;
    float _3935 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
    float _2009 = (isnan(1.0) ? _3935 : (isnan(_3935) ? 1.0 : min(_3935, 1.0))) * (_1983 / ((_1987 * _1987) * 3.141590118408203125));
    float _2019 = (((_1996 * cbLight._m0[_1948].x) * _2009) * _1824) + (((_1923 * cbLight._m0[_1870].x) * _1937) * _1834);
    float _2020 = (((_1996 * cbLight._m0[_1948].y) * _2009) * _1824) + (((_1923 * cbLight._m0[_1870].y) * _1937) * _1834);
    float _2021 = (((_1996 * cbLight._m0[_1948].z) * _2009) * _1824) + (((_1923 * cbLight._m0[_1870].z) * _1937) * _1834);
    float _2136;
    float _2138;
    float _2140;
    float _2142;
    float _2144;
    float _2146;
    if (_1805.y == 0u)
    {
        float _2076 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2077 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2076;
        float _2078 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2076;
        float _2079 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2076;
        uvec4 _2091 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2092 = _2091.x;
        uint _2103 = uint((float(_2091.y) * floor(float(uint(cbSceneParam._m0[85u].y * _677) / _2092))) + floor(float(uint(cbSceneParam._m0[85u].x * _676) / _2092)));
        float _2113 = (log2(_2079 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2114 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
        uint _2117 = uint(isnan(14.0) ? _2114 : (isnan(_2114) ? 14.0 : min(_2114, 14.0)));
        uvec4 _2122 = texelFetch(g_lightClusterGridBuffer, int(((_2117 << 2u) + (_2103 << 6u)) >> 2u));
        uint _2123 = _2122.x;
        uint _2124 = _2091.z;
        float _2236;
        float _2238;
        float _2240;
        float _2242;
        float _2244;
        float _2246;
        if (((((1u << ((_2124 >> 4u) & 15u)) + 4294967295u) & _2123) == 0u) || ((_2124 & 240u) == 0u))
        {
            _2236 = 0.0;
            _2238 = 0.0;
            _2240 = 0.0;
            _2242 = 0.0;
            _2244 = 0.0;
            _2246 = 0.0;
        }
        else
        {
            float _2237;
            float _2239;
            float _2241;
            float _2243;
            float _2245;
            float _2247;
            float _2420 = 0.0;
            float _2421 = 0.0;
            float _2422 = 0.0;
            float _2423 = 0.0;
            float _2424 = 0.0;
            float _2425 = 0.0;
            uint _2426 = 0u;
            uint _2435;
            bool _2436;
            for (;;)
            {
                _2435 = texelFetch(g_lightClassification, int((((_2117 << 5u) + (_2103 << 9u)) + (_2426 << 2u)) >> 2u)).x;
                _2436 = _2435 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2436)
                {
                    frontier_phi_67_pred = _2423;
                    frontier_phi_67_pred_1 = _2422;
                    frontier_phi_67_pred_2 = _2421;
                    frontier_phi_67_pred_3 = _2420;
                    frontier_phi_67_pred_4 = _2424;
                    frontier_phi_67_pred_5 = _2425;
                }
                else
                {
                    float _2616;
                    float _2617;
                    float _2618;
                    float _2619;
                    float _2620;
                    float _2621;
                    uint _2622;
                    _2616 = _2420;
                    _2617 = _2421;
                    _2618 = _2422;
                    _2619 = _2423;
                    _2620 = _2424;
                    _2621 = _2425;
                    _2622 = _2435;
                    float _2517;
                    float _2518;
                    float _2519;
                    float _2520;
                    float _2521;
                    float _2522;
                    for (;;)
                    {
                        uint _2626 = uint(findLSB(_2622)) + (_2426 << 5u);
                        uint _2623 = (_2622 + 4294967295u) & _2622;
                        uint _2628 = _2626 * 48u;
                        vec4 _2642 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2628)).x, texelFetch(g_PointLightRenderingBuffer, int(_2628 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2628 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2628 + 3u)).x));
                        uint _2648 = (_2626 * 48u) + 4u;
                        vec4 _2661 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2648)).x, texelFetch(g_PointLightRenderingBuffer, int(_2648 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2648 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2648 + 3u)).x));
                        uint _2667 = (_2626 * 48u) + 8u;
                        vec3 _2678 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2667)).x, texelFetch(g_PointLightRenderingBuffer, int(_2667 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2667 + 2u)).x));
                        float _2682 = _2642.x - _2077;
                        float _2683 = _2642.y - _2078;
                        float _2684 = _2642.z - _2079;
                        float _2685 = dot(vec3(_2682, _2683, _2684), vec3(_2682, _2683, _2684));
                        float _2688 = inversesqrt(_2685);
                        float _2689 = _2688 * _2682;
                        float _2690 = _2688 * _2683;
                        float _2691 = _2688 * _2684;
                        float _2692 = dot(vec3(_697, _700, _703), vec3(_2689, _2690, _2691));
                        float _2697 = 1.0 - (_2685 * _2642.w);
                        float _3956 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
                        float _2698 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
                        float _2699 = sqrt(_2685) * _2661.w;
                        float _2702 = 1.39999997615814208984375 / (_2699 + 1.39999997615814208984375);
                        float _2703 = _2702 * _2702;
                        float _2706 = ((1.0 - _2703) * _2692) + _2703;
                        float _2709 = _2699 * _2699;
                        float _2713 = ((isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0))) * _2698) / ((_2709 * 0.699999988079071044921875) + 1.0);
                        float _2717 = (-0.0) - _2077;
                        float _2718 = (-0.0) - _2078;
                        float _2719 = (-0.0) - _2079;
                        float _2723 = inversesqrt(dot(vec3(_2717, _2718, _2719), vec3(_2717, _2718, _2719)));
                        float _2724 = _2723 * _2717;
                        float _2725 = _2723 * _2718;
                        float _2726 = _2723 * _2719;
                        float _2734 = exp2(log2(1.0 / ((_2709 * 3.5) + 5.0)) * 0.25);
                        float _2735 = 1.0 - _757;
                        float _2742 = sqrt(1.0 - ((1.0 - (_2735 * _2735)) * (1.0 - (_2734 * _2734))));
                        float _2743 = _2742 * _2742;
                        float _2744 = _2743 * _2743;
                        float _2745 = _2724 + _2689;
                        float _2746 = _2725 + _2690;
                        float _2747 = _2726 + _2691;
                        float _2751 = inversesqrt(dot(vec3(_2745, _2746, _2747), vec3(_2745, _2746, _2747)));
                        float _2755 = dot(vec3(_697, _700, _703), vec3(_2724, _2725, _2726));
                        float _3972 = isnan(0.0) ? _2755 : (isnan(_2755) ? 0.0 : max(_2755, 0.0));
                        float _2758 = isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0));
                        float _2759 = dot(vec3(_697, _700, _703), vec3(_2751 * _2745, _2751 * _2746, _2751 * _2747));
                        float _3983 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
                        float _2762 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
                        float _2766 = ((_2762 * _2762) * (_2744 + (-1.0))) + 1.0;
                        float _2767 = _2702 * _2743;
                        float _2768 = _2767 * _2767;
                        float _2771 = ((1.0 - _2768) * _2692) + _2768;
                        float _3994 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
                        float _2772 = isnan(1.0) ? _3994 : (isnan(_3994) ? 1.0 : min(_3994, 1.0));
                        float _2773 = 1.0 - _2743;
                        float _2783 = (0.5 / (((_2772 * ((_2758 * _2773) + _2743)) + 9.9999999392252902907785028219223e-09) + (((_2772 * _2773) + _2743) * _2758))) * _2772;
                        float _4005 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
                        float _2794 = (((_2744 * 3.1415927410125732421875) * (isnan(1.0) ? _4005 : (isnan(_4005) ? 1.0 : min(_4005, 1.0)))) / ((_2766 * _2766) * ((_2709 * 2.1991131305694580078125) + 3.141590118408203125))) * _2698;
                        _2520 = (_2713 * _2661.x) + _2619;
                        _2521 = (_2713 * _2661.y) + _2620;
                        _2522 = (_2713 * _2661.z) + _2621;
                        _2517 = (_2794 * _2678.x) + _2616;
                        _2518 = (_2794 * _2678.y) + _2617;
                        _2519 = (_2794 * _2678.z) + _2618;
                        if (_2623 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2616 = _2517;
                            _2617 = _2518;
                            _2618 = _2519;
                            _2619 = _2520;
                            _2620 = _2521;
                            _2621 = _2522;
                            _2622 = _2623;
                        }
                    }
                    frontier_phi_67_pred = _2520;
                    frontier_phi_67_pred_1 = _2519;
                    frontier_phi_67_pred_2 = _2518;
                    frontier_phi_67_pred_3 = _2517;
                    frontier_phi_67_pred_4 = _2521;
                    frontier_phi_67_pred_5 = _2522;
                }
                _2243 = frontier_phi_67_pred;
                _2241 = frontier_phi_67_pred_1;
                _2239 = frontier_phi_67_pred_2;
                _2237 = frontier_phi_67_pred_3;
                _2245 = frontier_phi_67_pred_4;
                _2247 = frontier_phi_67_pred_5;
                uint _2427 = _2426 + 1u;
                if (_2427 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2420 = _2237;
                    _2421 = _2239;
                    _2422 = _2241;
                    _2423 = _2243;
                    _2424 = _2245;
                    _2425 = _2247;
                    _2426 = _2427;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2236 = _2237;
            _2238 = _2239;
            _2240 = _2241;
            _2242 = _2243;
            _2244 = _2245;
            _2246 = _2247;
        }
        uvec4 _2250 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2251 = _2250.z;
        uint _2253 = (_2251 >> 8u) & 15u;
        float _2388;
        float _2390;
        float _2392;
        float _2394;
        float _2396;
        float _2398;
        if (((4294967295u << _2253) & _2123) == 0u)
        {
            _2388 = _2236;
            _2390 = _2238;
            _2392 = _2240;
            _2394 = _2242;
            _2396 = _2244;
            _2398 = _2246;
        }
        else
        {
            float _2413 = inversesqrt(dot(vec3(_2077, _2078, _2079), vec3(_2077, _2078, _2079)));
            float _2414 = _2413 * _2077;
            float _2415 = _2413 * _2078;
            float _2416 = _2413 * _2079;
            float frontier_phi_56_57_ladder;
            float frontier_phi_56_57_ladder_1;
            float frontier_phi_56_57_ladder_2;
            float frontier_phi_56_57_ladder_3;
            float frontier_phi_56_57_ladder_4;
            float frontier_phi_56_57_ladder_5;
            if (_2253 < ((_2251 >> 12u) & 15u))
            {
                float _2389;
                float _2391;
                float _2393;
                float _2395;
                float _2397;
                float _2399;
                float _2599 = _2236;
                float _2600 = _2238;
                float _2601 = _2240;
                float _2602 = _2242;
                float _2603 = _2244;
                float _2604 = _2246;
                uint _2605 = _2253;
                uint _2614;
                bool _2615;
                for (;;)
                {
                    _2614 = texelFetch(g_lightClassification, int((((_2117 << 5u) + (_2103 << 9u)) + (_2605 << 2u)) >> 2u)).x;
                    _2615 = _2614 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    float frontier_phi_81_pred_3;
                    float frontier_phi_81_pred_4;
                    float frontier_phi_81_pred_5;
                    if (_2615)
                    {
                        frontier_phi_81_pred = _2602;
                        frontier_phi_81_pred_1 = _2601;
                        frontier_phi_81_pred_2 = _2600;
                        frontier_phi_81_pred_3 = _2599;
                        frontier_phi_81_pred_4 = _2604;
                        frontier_phi_81_pred_5 = _2603;
                    }
                    else
                    {
                        float _2829;
                        float _2830;
                        float _2831;
                        float _2832;
                        float _2833;
                        float _2834;
                        float _3124;
                        float _3125;
                        float _3126;
                        float _3127;
                        float _3128;
                        float _3129;
                        float _2842 = _2599;
                        float _2843 = _2600;
                        float _2844 = _2601;
                        float _2845 = _2602;
                        float _2846 = _2603;
                        float _2847 = _2604;
                        uint _2848 = _2614;
                        uint _2849;
                        vec4 _2874;
                        float _2875;
                        vec4 _2890;
                        vec3 _2902;
                        vec4 _2918;
                        vec4 _2934;
                        float _2980;
                        bool _2981;
                        for (;;)
                        {
                            uint _2859 = ((_2605 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2848));
                            _2849 = (_2848 + 4294967295u) & _2848;
                            uint _2861 = _2859 * 40u;
                            _2874 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2861)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2861 + 3u)).x));
                            _2875 = _2874.w;
                            uint _2877 = (_2859 * 40u) + 4u;
                            _2890 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2877)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 3u)).x));
                            uint _2892 = (_2859 * 40u) + 8u;
                            _2902 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2892)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2892 + 2u)).x));
                            uint _2905 = (_2859 * 40u) + 16u;
                            _2918 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2905)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2905 + 3u)).x));
                            uint _2921 = (_2859 * 40u) + 20u;
                            _2934 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2921)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2921 + 3u)).x));
                            uint _2936 = (_2859 * 40u) + 24u;
                            vec4 _2949 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2936)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2936 + 3u)).x));
                            uint _2955 = (_2859 * 40u) + 28u;
                            vec4 _2968 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2955)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2955 + 3u)).x));
                            _2980 = fma(_2079, _2968.z, fma(_2078, _2968.y, _2968.x * _2077)) + _2968.w;
                            _2981 = !((fma(_2079, _2949.z, fma(_2078, _2949.y, _2949.x * _2077)) + _2949.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            float frontier_phi_87_pred_3;
                            float frontier_phi_87_pred_4;
                            float frontier_phi_87_pred_5;
                            if (_2981)
                            {
                                float _3008 = _2874.x - _2077;
                                float _3009 = _2874.y - _2078;
                                float _3010 = _2874.z - _2079;
                                float _3011 = dot(vec3(_3008, _3009, _3010), vec3(_3008, _3009, _3010));
                                float _3014 = inversesqrt(_3011);
                                float _3015 = _3014 * _3008;
                                float _3016 = _3014 * _3009;
                                float _3017 = _3014 * _3010;
                                float _3021 = 1.0 - (_3011 / (_2875 * _2875));
                                float _4016 = isnan(0.0) ? _3021 : (isnan(_3021) ? 0.0 : max(_3021, 0.0));
                                float _3022 = isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0));
                                float _3026 = sqrt(_3011) * _2890.w;
                                float _3028 = 1.39999997615814208984375 / (_3026 + 1.39999997615814208984375);
                                float _3029 = _3028 * _3028;
                                float _3032 = ((1.0 - _3029) * dot(vec3(_3015, _3016, _3017), vec3(_697, _700, _703))) + _3029;
                                float _3035 = _3026 * _3026;
                                float _3039 = (fma(_2079, _2918.z, fma(_2078, _2918.y, _2918.x * _2077)) + _2918.w) / _2980;
                                float _3040 = (fma(_2079, _2934.z, fma(_2078, _2934.y, _2934.x * _2077)) + _2934.w) / _2980;
                                float _3044 = 1.0 - dot(vec2(_3039, _3040), vec2(_3039, _3040));
                                float _4032 = isnan(0.0) ? _3044 : (isnan(_3044) ? 0.0 : max(_3044, 0.0));
                                float _3045 = isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0));
                                float _3046 = _3045 * (((isnan(0.0) ? _3032 : (isnan(_3032) ? 0.0 : max(_3032, 0.0))) * _3022) / ((_3035 * 0.699999988079071044921875) + 1.0));
                                float _3058 = exp2(log2(1.0 / ((_3035 * 3.5) + 5.0)) * 0.25);
                                float _3059 = 1.0 - _757;
                                float _3066 = sqrt(1.0 - ((1.0 - (_3059 * _3059)) * (1.0 - (_3058 * _3058))));
                                float _3067 = _3066 * _3066;
                                float _3068 = _3067 * _3067;
                                float _3069 = _3015 - _2414;
                                float _3070 = _3016 - _2415;
                                float _3071 = _3017 - _2416;
                                float _3075 = inversesqrt(dot(vec3(_3069, _3070, _3071), vec3(_3069, _3070, _3071)));
                                float _3079 = dot(vec3(_697, _700, _703), vec3((-0.0) - _2414, (-0.0) - _2415, (-0.0) - _2416));
                                float _4043 = isnan(0.0) ? _3079 : (isnan(_3079) ? 0.0 : max(_3079, 0.0));
                                float _3082 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
                                float _3083 = dot(vec3(_697, _700, _703), vec3(_3075 * _3069, _3075 * _3070, _3075 * _3071));
                                float _4054 = isnan(0.0) ? _3083 : (isnan(_3083) ? 0.0 : max(_3083, 0.0));
                                float _3086 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
                                float _3090 = ((_3086 * _3086) * (_3068 + (-1.0))) + 1.0;
                                float _3091 = _3028 * _3067;
                                float _3092 = _3091 * _3091;
                                float _3098 = ((1.0 - _3092) * dot(vec3(_697, _700, _703), vec3(_3015, _3016, _3017))) + _3092;
                                float _4065 = isnan(0.0) ? _3098 : (isnan(_3098) ? 0.0 : max(_3098, 0.0));
                                float _3099 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
                                float _3100 = 1.0 - _3067;
                                float _3110 = (0.5 / (((_3099 * ((_3082 * _3100) + _3067)) + 9.9999999392252902907785028219223e-09) + (((_3099 * _3100) + _3067) * _3082))) * _3099;
                                float _4076 = isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0));
                                float _3120 = (_3045 * _3022) * (((_3068 * 3.1415927410125732421875) * (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0)))) / ((_3090 * _3090) * ((_3035 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_87_pred = _3046 * _2890.x;
                                frontier_phi_87_pred_1 = _3120 * _2902.z;
                                frontier_phi_87_pred_2 = _3120 * _2902.y;
                                frontier_phi_87_pred_3 = _3120 * _2902.x;
                                frontier_phi_87_pred_4 = _3046 * _2890.z;
                                frontier_phi_87_pred_5 = _3046 * _2890.y;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                                frontier_phi_87_pred_3 = 0.0;
                                frontier_phi_87_pred_4 = 0.0;
                                frontier_phi_87_pred_5 = 0.0;
                            }
                            _3127 = frontier_phi_87_pred;
                            _3126 = frontier_phi_87_pred_1;
                            _3125 = frontier_phi_87_pred_2;
                            _3124 = frontier_phi_87_pred_3;
                            _3129 = frontier_phi_87_pred_4;
                            _3128 = frontier_phi_87_pred_5;
                            _2832 = _3127 + _2845;
                            _2833 = _3128 + _2846;
                            _2834 = _3129 + _2847;
                            _2829 = _3124 + _2842;
                            _2830 = _3125 + _2843;
                            _2831 = _3126 + _2844;
                            if (_2849 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2842 = _2829;
                                _2843 = _2830;
                                _2844 = _2831;
                                _2845 = _2832;
                                _2846 = _2833;
                                _2847 = _2834;
                                _2848 = _2849;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _2832;
                        frontier_phi_81_pred_1 = _2831;
                        frontier_phi_81_pred_2 = _2830;
                        frontier_phi_81_pred_3 = _2829;
                        frontier_phi_81_pred_4 = _2834;
                        frontier_phi_81_pred_5 = _2833;
                    }
                    _2395 = frontier_phi_81_pred;
                    _2393 = frontier_phi_81_pred_1;
                    _2391 = frontier_phi_81_pred_2;
                    _2389 = frontier_phi_81_pred_3;
                    _2399 = frontier_phi_81_pred_4;
                    _2397 = frontier_phi_81_pred_5;
                    uint _2606 = _2605 + 1u;
                    if (_2606 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2599 = _2389;
                        _2600 = _2391;
                        _2601 = _2393;
                        _2602 = _2395;
                        _2603 = _2397;
                        _2604 = _2399;
                        _2605 = _2606;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_56_57_ladder = _2399;
                frontier_phi_56_57_ladder_1 = _2397;
                frontier_phi_56_57_ladder_2 = _2395;
                frontier_phi_56_57_ladder_3 = _2391;
                frontier_phi_56_57_ladder_4 = _2389;
                frontier_phi_56_57_ladder_5 = _2393;
            }
            else
            {
                frontier_phi_56_57_ladder = _2246;
                frontier_phi_56_57_ladder_1 = _2244;
                frontier_phi_56_57_ladder_2 = _2242;
                frontier_phi_56_57_ladder_3 = _2238;
                frontier_phi_56_57_ladder_4 = _2236;
                frontier_phi_56_57_ladder_5 = _2240;
            }
            _2388 = frontier_phi_56_57_ladder_4;
            _2390 = frontier_phi_56_57_ladder_3;
            _2392 = frontier_phi_56_57_ladder_5;
            _2394 = frontier_phi_56_57_ladder_2;
            _2396 = frontier_phi_56_57_ladder_1;
            _2398 = frontier_phi_56_57_ladder;
        }
        float _2403 = isnan(1.0) ? _741 : (isnan(_741) ? 1.0 : min(_741, 1.0));
        _2136 = (_2403 * _2394) + _1866;
        _2138 = (_2403 * _2396) + _1867;
        _2140 = (_2403 * _2398) + _1868;
        _2142 = ((_2388 * 0.039999999105930328369140625) * _2403) + _2019;
        _2144 = ((_2390 * 0.039999999105930328369140625) * _2403) + _2020;
        _2146 = ((_2392 * 0.039999999105930328369140625) * _2403) + _2021;
    }
    else
    {
        _2136 = _1866;
        _2138 = _1867;
        _2140 = _1868;
        _2142 = _2019;
        _2144 = _2020;
        _2146 = _2021;
    }
    uint _2152 = _717 + uint(cbMatDynParam._m0[0u].w);
    float _4092 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _4103 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _4114 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _2183 = (((isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0))) * (_2136 + ((isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0))) * _741))) + ((_2142 + ((isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0))) * _1577)) * cbPerFrame._m0[3u].x)) + (((_508.x * _295) * (((_573 * (cbMtdParam._m0[15u].x - cbMtdParam._m0[13u].x)) * _568) + cbMtdParam._m0[13u].x)) * cbInstanceData._m0[_2152].x);
    float _2185 = ((((_508.y * _295) * (((_573 * (cbMtdParam._m0[15u].y - cbMtdParam._m0[13u].y)) * _568) + cbMtdParam._m0[13u].y)) * cbInstanceData._m0[_2152].y) + ((_2144 + ((isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0))) * _1577)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0))) * (_2138 + ((isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0))) * _741)));
    float _2187 = ((((_508.z * _295) * (((_573 * (cbMtdParam._m0[15u].z - cbMtdParam._m0[13u].z)) * _568) + cbMtdParam._m0[13u].z)) * cbInstanceData._m0[_2152].z) + ((_2146 + ((isnan(0.0) ? _1795 : (isnan(_1795) ? 0.0 : max(_1795, 0.0))) * _1577)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4114 : (isnan(_4114) ? 1.0 : min(_4114, 1.0))) * (_2140 + ((isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0))) * _741)));
    float _2188 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
    float _2189 = isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0));
    float _2190 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
    uint _2191 = _716 + 6u;
    float _2199 = _676 / cbSceneParam._m0[86u].x;
    float _2200 = _677 / cbSceneParam._m0[86u].y;
    vec4 _2214 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2199, _2200, (log2((isnan(cbSceneParam._m0[77u].w) ? _645 : (isnan(_645) ? cbSceneParam._m0[77u].w : min(_645, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2216 = _2214.x;
    float _2217 = _2214.y;
    float _2218 = _2214.z;
    float _2219 = _2214.w;
    float _2299;
    float _2301;
    float _2303;
    float _2305;
    if (_645 > cbSceneParam._m0[78u].w)
    {
        float _2261 = isnan(_645) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _645 : min(cbSceneParam._m0[80u].w, _645));
        float _2262 = _2261 / _645;
        float _2273 = _2262 * _277;
        float _2274 = _278 * _2262;
        float _2275 = (-0.0) - _2274;
        float _2276 = _2262 * _279;
        float _2278 = (cbSceneParam._m0[77u].w * _2275) / _2261;
        float _2279 = _2278 + cbSceneParam._m0[79u].w;
        float _2280 = cbSceneParam._m0[79u].w - _2274;
        float _2286 = sqrt(((_2273 * _2273) + (_2274 * _2274)) + (_2276 * _2276));
        float _2289 = (1.0 - (cbSceneParam._m0[77u].w / _2261)) * _2286;
        float _2295 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2297 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2530;
        if (abs((_2275 - _2278) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2530 = ((((_2279 > 0.0) ? exp2(_2295 * _2279) : (2.0 - exp2(_2297 * _2279))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2289;
        }
        else
        {
            float _2449 = 1.0 / cbSceneParam._m0[80u].x;
            float _2450 = isnan(_2280) ? _2279 : (isnan(_2279) ? _2280 : max(_2279, _2280));
            float _2451 = isnan(_2280) ? _2279 : (isnan(_2279) ? _2280 : min(_2279, _2280));
            float _2460 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : min(_2450, 0.0));
            float _2461 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : min(_2451, 0.0));
            _2530 = ((abs(_2286 / _2275) * cbSceneParam._m0[80u].y) * ((((_2460 - _2461) * 2.0) - ((exp2(_2295 * (isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0)))) - exp2(_2295 * (isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0))))) * _2449)) - ((exp2(_2297 * _2460) - exp2(_2297 * _2461)) * _2449))) + (_2289 * cbSceneParam._m0[80u].z);
        }
        vec4 _2532 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2199, _2200, 1.0), 0.0);
        float _2541 = exp2((_2530 * (-1.44269502162933349609375)) * (1.0 - _2532.w));
        float _2542 = log2(_2541);
        float _2558 = log2(_2219);
        _2299 = (exp2(_2558 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2542 * cbSceneParam._m0[78u].x)) * _2532.x) / cbSceneParam._m0[78u].x)) + _2216;
        _2301 = (exp2(_2558 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2542 * cbSceneParam._m0[78u].y)) * _2532.y) / cbSceneParam._m0[78u].y)) + _2217;
        _2303 = (exp2(_2558 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2542 * cbSceneParam._m0[78u].z)) * _2532.z) / cbSceneParam._m0[78u].z)) + _2218;
        _2305 = _2541 * _2219;
    }
    else
    {
        _2299 = _2216;
        _2301 = _2217;
        _2303 = _2218;
        _2305 = _2219;
    }
    bool _2568;
    vec4 _2315;
    vec4 _2337;
    float _2339;
    float _2343;
    float _2344;
    float _2345;
    float _2346;
    bool _2356;
    for (;;)
    {
        _2315 = cbMatDynParam._m0[0u];
        float _2317 = roundEven(_2315.y);
        bool _2318 = _2317 == 3.0;
        float _2319 = log2(_2305);
        float _2326 = exp2(_2319 * cbSceneParam._m0[78u].x) * _2188;
        float _2327 = exp2(_2319 * cbSceneParam._m0[78u].y) * _2189;
        float _2328 = exp2(_2319 * cbSceneParam._m0[78u].z) * _2190;
        float _2335 = _659 + (-0.5);
        _2337 = cbMtdParam._m0[1u];
        _2339 = _2337.y * _2335;
        float _2342 = (_2317 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2343 = _2342 * (_2318 ? _2326 : (_2326 + (cbSceneParam._m0[72u].w * _2299)));
        _2344 = _2342 * (_2318 ? _2327 : (_2327 + (cbSceneParam._m0[72u].w * _2301)));
        _2345 = _2342 * (_2318 ? _2328 : (_2328 + (cbSceneParam._m0[72u].w * _2303)));
        _2346 = _2335 * 0.999000012874603271484375;
        _2356 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2356)
        {
            if ((cbInstanceData._m0[_716 + 7u].x + _2346) < 0.5)
            {
                _2568 = true;
                break;
            }
        }
        uint _2484 = _717 + uint(_2315.w);
        if ((cbInstanceData._m0[_2484].w < 1.0) && ((cbInstanceData._m0[_2484].w + _2346) < 0.5))
        {
            _2568 = true;
            break;
        }
        if ((_2339 + 1.0) < _2337.x)
        {
            _2568 = true;
            break;
        }
        _2568 = false;
        break;
    }
    float _2799;
    if (_2568)
    {
        discard_state = true;
        _2799 = 0.0;
    }
    else
    {
        _2799 = cbInstanceData._m0[_2191].w;
    }
    SV_Target.x = _2343;
    SV_Target.y = _2344;
    SV_Target.z = _2345;
    SV_Target.w = _2799;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2191].w;
    discard_exit();
}


