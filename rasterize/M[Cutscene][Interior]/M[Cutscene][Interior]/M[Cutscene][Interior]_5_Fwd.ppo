#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1124;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _194 = _193 * _186;
    float _195 = _193 * _187;
    float _196 = _193 * _188;
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208 = _207 * TANGENT.x;
    float _209 = _207 * TANGENT.y;
    float _210 = _207 * TANGENT.z;
    float _255 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _265 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _255);
    float _266 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _255);
    float _267 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _255);
    vec4 _280 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _283 = _280.x;
    vec4 _301 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _318 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _283) + cbMtdParam._m0[12u].x) * _301.x;
    float _320 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _283) + cbMtdParam._m0[12u].y) * _301.y;
    float _322 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _283) + cbMtdParam._m0[12u].z) * _301.z;
    vec4 _340 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _376 = cbMtdParam._m0[24u].x + _265;
    float _377 = cbMtdParam._m0[24u].y + _266;
    float _378 = cbMtdParam._m0[24u].z + _267;
    float _392 = (-0.0) - dot(vec3(_376, _377, _378), vec3(_194, _195, _196));
    float _393 = (-0.0) - dot(vec3(_376, _377, _378), vec3(_208, _209, _210));
    float _394 = (-0.0) - dot(vec3(_376, _377, _378), vec3((-0.0) - _201, (-0.0) - _202, (-0.0) - _203));
    float _398 = inversesqrt(dot(vec3(_392, _393, _394), vec3(_392, _393, _394)));
    float _401 = _398 * _394;
    float _402 = (_398 * _392) + ((cbMtdParam._m0[22u].x * _283) * ((_340.x * 2.0) + (-1.0)));
    float _403 = (_398 * _393) + ((cbMtdParam._m0[22u].y * _283) * ((_340.y * 2.0) + (-1.0)));
    float _404 = _402 * cbMtdParam._m0[20u].w;
    float _405 = _403 * cbMtdParam._m0[20u].z;
    float _406 = fract(TEXCOORD.x);
    float _407 = fract(TEXCOORD.y);
    float _413;
    if (_404 > 0.0)
    {
        _413 = (1.0 - _406) / _404;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_404 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _406) / _404;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _413 = frontier_phi_3_2_ladder;
    }
    float _421;
    if (_405 > 0.0)
    {
        _421 = (1.0 - _407) / _405;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_405 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _407) / _405;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _421 = frontier_phi_7_6_ladder;
    }
    bool _423 = _401 > 0.0;
    float _425 = _423 ? (cbMtdParam._m0[16u].x / _401) : 5000.0;
    float _426 = isnan(_421) ? _413 : (isnan(_413) ? _421 : min(_413, _421));
    float _427 = isnan(_425) ? _426 : (isnan(_426) ? _425 : min(_426, _425));
    float _431 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _432 = _406 + (-0.5);
    float _435 = _407 + (-0.5);
    float _438 = ((_427 * _401) + _431) / _431;
    vec4 _463 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (((((_432 + (_427 * _404)) / _438) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (((((_435 + (_427 * _405)) / _438) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    float _476 = (_463.x * _283) * cbMtdParam._m0[9u].x;
    float _477 = (_463.y * _283) * cbMtdParam._m0[9u].y;
    float _478 = (_463.z * _283) * cbMtdParam._m0[9u].z;
    float _497 = _402 * cbMtdParam._m0[22u].w;
    float _498 = _403 * cbMtdParam._m0[22u].z;
    bool _499 = _497 > 0.0;
    float _504;
    if (_499)
    {
        _504 = (1.0 - _406) / _497;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_497 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _406) / _497;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _504 = frontier_phi_11_10_ladder;
    }
    bool _506 = _498 > 0.0;
    float _511;
    if (_506)
    {
        _511 = (1.0 - _407) / _498;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_498 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _407) / _498;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _511 = frontier_phi_15_14_ladder;
    }
    float _514 = _423 ? (cbMtdParam._m0[18u].x / _401) : 5000.0;
    float _515 = isnan(_511) ? _504 : (isnan(_504) ? _511 : min(_504, _511));
    float _516 = isnan(_514) ? _515 : (isnan(_515) ? _514 : min(_515, _514));
    float _520 = cbMtdParam._m0[19u].y * cbMtdParam._m0[18u].x;
    float _524 = ((_516 * _401) + _520) / _520;
    float _529 = cbMtdParam._m0[19u].x - cbMtdParam._m0[20u].x * trunc(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    float _531 = floor(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    vec4 _547 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_432 + (_516 * _497)) / _524) + 0.5) + _529) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_435 + (_516 * _498)) / _524) + 0.5) + _531) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[0u].w));
    float _562;
    if (_499)
    {
        _562 = (1.0 - _406) / _497;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_497 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _406) / _497;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _562 = frontier_phi_19_18_ladder;
    }
    float _568;
    if (_506)
    {
        _568 = (1.0 - _407) / _498;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_498 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _407) / _498;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _568 = frontier_phi_23_22_ladder;
    }
    float _570 = isnan(_568) ? _562 : (isnan(_562) ? _568 : min(_562, _568));
    float _571 = isnan(_514) ? _570 : (isnan(_570) ? _514 : min(_570, _514));
    float _578 = ((_571 * _401) + _520) / _520;
    vec4 _598 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_432 + (_571 * _497)) / _578) + 0.5) + _529) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_435 + (_571 * _498)) / _578) + 0.5) + _531) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[8u].w));
    float _600 = _598.x;
    vec4 _625 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _629 = _625.z;
    float _632 = (_625.x * 2.0) + (-1.0);
    float _633 = (_625.y * 2.0) + (-1.0);
    float _634 = dot(vec2(_632, _633), vec2(_632, _633));
    float _3252 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _639 = sqrt(1.0 - (isnan(1.0) ? _3252 : (isnan(_3252) ? 1.0 : min(_3252, 1.0))));
    float _642 = fma(_639, _201, fma(_633, _208, _632 * _194));
    float _645 = fma(_639, _202, fma(_633, _209, _632 * _195));
    float _648 = fma(_639, _203, fma(_633, _210, _632 * _196));
    float _652 = inversesqrt(dot(vec3(_642, _645, _648), vec3(_642, _645, _648)));
    float _653 = _652 * _642;
    float _654 = _652 * _645;
    float _655 = _652 * _648;
    float _3263 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _656 = isnan(1.0) ? _3263 : (isnan(_3263) ? 1.0 : min(_3263, 1.0));
    float _3274 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _3285 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _3296 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _675 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _679 = inversesqrt(dot(vec3(_265, _266, _267), vec3(_265, _266, _267)));
    float _680 = _265 * _679;
    float _681 = _266 * _679;
    float _682 = _267 * _679;
    float _688 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _689 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _708 = fma(_655, cbSceneParam._m0[5u].z, fma(_654, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _653));
    float _711 = fma(_655, cbSceneParam._m0[6u].z, fma(_654, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _653));
    float _714 = fma(_655, cbSceneParam._m0[7u].z, fma(_654, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _653));
    uint _727 = uint(roundEven(NORMAL.w)) * 13u;
    uint _729 = _727 + 9u;
    uint _730 = _729 + uint(cbMatDynParam._m0[0u].w);
    float _736 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3274 : (isnan(_3274) ? 1.0 : min(_3274, 1.0)))) * cbInstanceData._m0[_730].x;
    float _737 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3285 : (isnan(_3285) ? 1.0 : min(_3285, 1.0)))) * cbInstanceData._m0[_730].y;
    float _738 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3296 : (isnan(_3296) ? 1.0 : min(_3296, 1.0)))) * cbInstanceData._m0[_730].z;
    float _3307 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
    float _739 = isnan(1.0) ? _3307 : (isnan(_3307) ? 1.0 : min(_3307, 1.0));
    float _3318 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _740 = isnan(1.0) ? _3318 : (isnan(_3318) ? 1.0 : min(_3318, 1.0));
    float _3329 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _741 = isnan(1.0) ? _3329 : (isnan(_3329) ? 1.0 : min(_3329, 1.0));
    vec4 _750 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _688, cbSceneParam._m0[86u].y * _689));
    float _753 = _750.x * TEXCOORD_4.z;
    float _754 = dot(vec3(_653, _654, _655), vec3(_680, _681, _682));
    float _757 = _754 * 2.0;
    float _761 = (_757 * _653) - _680;
    float _762 = (_757 * _654) - _681;
    float _763 = (_757 * _655) - _682;
    float _767 = abs(dot(vec3(_680, _681, _682), vec3(_653, _654, _655)));
    float _3340 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _769 = sqrt(_656);
    float _782 = exp2((_769 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_769 * 3.0));
    float _814 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _818 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _822 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1123;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _850 = fma(_822, cbModelParam._m0[26u].z, fma(_818, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _814));
        float _854 = fma(_822, cbModelParam._m0[27u].z, fma(_818, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _814));
        float _858 = fma(_822, cbModelParam._m0[28u].z, fma(_818, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _814));
        float _881 = _814 + _653;
        float _882 = _818 + _654;
        float _883 = _822 + _655;
        float _893 = fma(_883, cbModelParam._m0[26u].z, fma(_882, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _881)) - _850;
        float _894 = fma(_883, cbModelParam._m0[27u].z, fma(_882, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _881)) - _854;
        float _895 = fma(_883, cbModelParam._m0[28u].z, fma(_882, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _881)) - _858;
        float _899 = inversesqrt(dot(vec3(_893, _894, _895), vec3(_893, _894, _895)));
        float _912 = ((_899 * _893) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_850 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _913 = ((_899 * _894) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_854 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _914 = ((_899 * _895) / cbModelParam._m0[34u].z) + ((((((_858 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _917 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_912, _913, _914), 0.0);
        vec4 _924 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_912, _913, _914), 0.0);
        vec4 _931 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_912, _913, _914), 0.0);
        vec4 _938 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_912, _913, _914), 0.0);
        float _951 = exp2((_917.w + (-0.5)) * 20.0) * 2.0;
        float _952 = _951 * (_917.x + (-0.5));
        float _953 = _951 * (_917.y + (-0.5));
        float _954 = _951 * (_917.z + (-0.5));
        float _961 = exp2((_924.w + (-0.5)) * 20.0) * 2.0;
        float _962 = _961 * (_924.x + (-0.5));
        float _963 = _961 * (_924.y + (-0.5));
        float _964 = _961 * (_924.z + (-0.5));
        float _971 = exp2((_931.w + (-0.5)) * 20.0) * 2.0;
        float _972 = _971 * (_931.x + (-0.5));
        float _973 = _971 * (_931.y + (-0.5));
        float _974 = _971 * (_931.z + (-0.5));
        float _981 = exp2((_938.w + (-0.5)) * 20.0) * 2.0;
        float _982 = _981 * (_938.x + (-0.5));
        float _983 = _981 * (_938.y + (-0.5));
        float _984 = _981 * (_938.z + (-0.5));
        float _985 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _986 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _987 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _988 = _952 * 0.5;
        float _989 = _962 * 0.5;
        float _990 = _972 * 0.5;
        float _991 = dot(vec3(_988, _989, _990), vec3(_988, _989, _990));
        float _996 = (_991 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_991);
        float _1005 = (dot(vec3(_653, _654, _655), vec3(_996 * _988, _996 * _989, _996 * _990)) + 1.0) * 0.5;
        float _3366 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1015 = sqrt(((_989 * _989) + (_988 * _988)) + (_990 * _990)) / (_985 + 9.9999997473787516355514526367188e-06);
        float _3377 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1016 = isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0));
        float _1017 = _1016 * 2.0;
        float _1021 = (1.0 - _1016) / (_1016 + 1.0);
        float _3388 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3388 : (isnan(_3388) ? 1.0 : min(_3388, 1.0));
        float _1031 = ((((1.0 - _1022) * (_1017 + 2.0)) * exp2(log2(isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0))) * (_1017 + 1.0))) + _1022) * _985;
        float _1032 = _953 * 0.5;
        float _1033 = _963 * 0.5;
        float _1034 = _973 * 0.5;
        float _1035 = dot(vec3(_1032, _1033, _1034), vec3(_1032, _1033, _1034));
        float _1040 = (_1035 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1035);
        float _1048 = (dot(vec3(_653, _654, _655), vec3(_1040 * _1032, _1040 * _1033, _1040 * _1034)) + 1.0) * 0.5;
        float _3399 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1057 = sqrt(((_1033 * _1033) + (_1032 * _1032)) + (_1034 * _1034)) / (_986 + 9.9999997473787516355514526367188e-06);
        float _3410 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1058 = isnan(1.0) ? _3410 : (isnan(_3410) ? 1.0 : min(_3410, 1.0));
        float _1059 = _1058 * 2.0;
        float _1063 = (1.0 - _1058) / (_1058 + 1.0);
        float _3421 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1064 = isnan(1.0) ? _3421 : (isnan(_3421) ? 1.0 : min(_3421, 1.0));
        float _1073 = ((((1.0 - _1064) * (_1059 + 2.0)) * exp2(log2(isnan(1.0) ? _3399 : (isnan(_3399) ? 1.0 : min(_3399, 1.0))) * (_1059 + 1.0))) + _1064) * _986;
        float _1074 = _954 * 0.5;
        float _1075 = _964 * 0.5;
        float _1076 = _974 * 0.5;
        float _1077 = dot(vec3(_1074, _1075, _1076), vec3(_1074, _1075, _1076));
        float _1082 = (_1077 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1077);
        float _1090 = (dot(vec3(_653, _654, _655), vec3(_1082 * _1074, _1082 * _1075, _1082 * _1076)) + 1.0) * 0.5;
        float _3432 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1099 = sqrt(((_1075 * _1075) + (_1074 * _1074)) + (_1076 * _1076)) / (_987 + 9.9999997473787516355514526367188e-06);
        float _3443 = isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0));
        float _1100 = isnan(1.0) ? _3443 : (isnan(_3443) ? 1.0 : min(_3443, 1.0));
        float _1101 = _1100 * 2.0;
        float _1105 = (1.0 - _1100) / (_1100 + 1.0);
        float _3454 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1106 = isnan(1.0) ? _3454 : (isnan(_3454) ? 1.0 : min(_3454, 1.0));
        float _1115 = ((((1.0 - _1106) * (_1101 + 2.0)) * exp2(log2(isnan(1.0) ? _3432 : (isnan(_3432) ? 1.0 : min(_3432, 1.0))) * (_1101 + 1.0))) + _1106) * _987;
        _1123 = _954;
        _1125 = _953;
        _1126 = _952;
        _1127 = _964;
        _1128 = _963;
        _1129 = _962;
        _1130 = _974;
        _1131 = _973;
        _1132 = _972;
        _1133 = _987;
        _1134 = _986;
        _1135 = _985;
        _1136 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0)));
        _1137 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0)));
        _1138 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0)));
    }
    else
    {
        _1123 = _1124;
        _1125 = _1124;
        _1126 = _1124;
        _1127 = _1124;
        _1128 = _1124;
        _1129 = _1124;
        _1130 = _1124;
        _1131 = _1124;
        _1132 = _1124;
        _1133 = _1124;
        _1134 = _1124;
        _1135 = _1124;
        _1136 = 0.0;
        _1137 = 0.0;
        _1138 = 0.0;
    }
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1164 = fma(_822, cbModelParam._m0[30u].z, fma(_818, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _814));
        float _1168 = fma(_822, cbModelParam._m0[31u].z, fma(_818, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _814));
        float _1172 = fma(_822, cbModelParam._m0[32u].z, fma(_818, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _814));
        float _1195 = _814 + _653;
        float _1196 = _818 + _654;
        float _1197 = _822 + _655;
        float _1207 = fma(_1197, cbModelParam._m0[30u].z, fma(_1196, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1195)) - _1164;
        float _1208 = fma(_1197, cbModelParam._m0[31u].z, fma(_1196, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1195)) - _1168;
        float _1209 = fma(_1197, cbModelParam._m0[32u].z, fma(_1196, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1195)) - _1172;
        float _1213 = inversesqrt(dot(vec3(_1207, _1208, _1209), vec3(_1207, _1208, _1209)));
        float _1226 = ((_1213 * _1207) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1164 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1227 = ((_1213 * _1208) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1168 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1228 = ((_1213 * _1209) / cbModelParam._m0[35u].z) + ((((((_1172 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1230 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        vec4 _1237 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        vec4 _1244 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        vec4 _1251 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1226, _1227, _1228), 0.0);
        float _1263 = exp2((_1230.w + (-0.5)) * 20.0) * 2.0;
        float _1264 = _1263 * (_1230.x + (-0.5));
        float _1265 = _1263 * (_1230.y + (-0.5));
        float _1266 = _1263 * (_1230.z + (-0.5));
        float _1273 = exp2((_1237.w + (-0.5)) * 20.0) * 2.0;
        float _1274 = _1273 * (_1237.x + (-0.5));
        float _1275 = _1273 * (_1237.y + (-0.5));
        float _1276 = _1273 * (_1237.z + (-0.5));
        float _1283 = exp2((_1244.w + (-0.5)) * 20.0) * 2.0;
        float _1284 = _1283 * (_1244.x + (-0.5));
        float _1285 = _1283 * (_1244.y + (-0.5));
        float _1286 = _1283 * (_1244.z + (-0.5));
        float _1293 = exp2((_1251.w + (-0.5)) * 20.0) * 2.0;
        float _1294 = _1293 * (_1251.x + (-0.5));
        float _1295 = _1293 * (_1251.y + (-0.5));
        float _1296 = _1293 * (_1251.z + (-0.5));
        float _1297 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1298 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1299 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1300 = _1264 * 0.5;
        float _1301 = _1274 * 0.5;
        float _1302 = _1284 * 0.5;
        float _1303 = dot(vec3(_1300, _1301, _1302), vec3(_1300, _1301, _1302));
        float _1308 = (_1303 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1303);
        float _1316 = (dot(vec3(_653, _654, _655), vec3(_1308 * _1300, _1308 * _1301, _1308 * _1302)) + 1.0) * 0.5;
        float _3495 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1325 = sqrt(((_1301 * _1301) + (_1300 * _1300)) + (_1302 * _1302)) / (_1297 + 9.9999997473787516355514526367188e-06);
        float _3506 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0));
        float _1327 = _1326 * 2.0;
        float _1331 = (1.0 - _1326) / (_1326 + 1.0);
        float _3517 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1332 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
        float _1341 = ((((1.0 - _1332) * (_1327 + 2.0)) * exp2(log2(isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0))) * (_1327 + 1.0))) + _1332) * _1297;
        float _1342 = _1265 * 0.5;
        float _1343 = _1275 * 0.5;
        float _1344 = _1285 * 0.5;
        float _1345 = dot(vec3(_1342, _1343, _1344), vec3(_1342, _1343, _1344));
        float _1350 = (_1345 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1345);
        float _1358 = (dot(vec3(_653, _654, _655), vec3(_1350 * _1342, _1350 * _1343, _1350 * _1344)) + 1.0) * 0.5;
        float _3528 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1367 = sqrt(((_1343 * _1343) + (_1342 * _1342)) + (_1344 * _1344)) / (_1298 + 9.9999997473787516355514526367188e-06);
        float _3539 = isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0));
        float _1368 = isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0));
        float _1369 = _1368 * 2.0;
        float _1373 = (1.0 - _1368) / (_1368 + 1.0);
        float _3550 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
        float _1383 = ((((1.0 - _1374) * (_1369 + 2.0)) * exp2(log2(isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0))) * (_1369 + 1.0))) + _1374) * _1298;
        float _1384 = _1266 * 0.5;
        float _1385 = _1276 * 0.5;
        float _1386 = _1286 * 0.5;
        float _1387 = dot(vec3(_1384, _1385, _1386), vec3(_1384, _1385, _1386));
        float _1392 = (_1387 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1387);
        float _1400 = (dot(vec3(_653, _654, _655), vec3(_1392 * _1384, _1392 * _1385, _1392 * _1386)) + 1.0) * 0.5;
        float _3561 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1409 = sqrt(((_1385 * _1385) + (_1384 * _1384)) + (_1386 * _1386)) / (_1299 + 9.9999997473787516355514526367188e-06);
        float _3572 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
        float _1410 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
        float _1411 = _1410 * 2.0;
        float _1415 = (1.0 - _1410) / (_1410 + 1.0);
        float _3583 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
        float _1425 = ((((1.0 - _1416) * (_1411 + 2.0)) * exp2(log2(isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0))) * (_1411 + 1.0))) + _1416) * _1299;
        _1433 = _1266;
        _1434 = _1265;
        _1435 = _1264;
        _1436 = _1276;
        _1437 = _1275;
        _1438 = _1274;
        _1439 = _1286;
        _1440 = _1285;
        _1441 = _1284;
        _1442 = _1299;
        _1443 = _1298;
        _1444 = _1297;
        _1445 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0)));
        _1446 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)));
        _1447 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1425 : (isnan(_1425) ? 0.0 : max(_1425, 0.0)));
    }
    else
    {
        _1433 = _1124;
        _1434 = _1124;
        _1435 = _1124;
        _1436 = _1124;
        _1437 = _1124;
        _1438 = _1124;
        _1439 = _1124;
        _1440 = _1124;
        _1441 = _1124;
        _1442 = _1124;
        _1443 = _1124;
        _1444 = _1124;
        _1445 = 0.0;
        _1446 = 0.0;
        _1447 = 0.0;
    }
    float _1457 = (cbModelParam._m0[1u].x * (_1445 - _1136)) + _1136;
    float _1458 = (cbModelParam._m0[1u].x * (_1446 - _1137)) + _1137;
    float _1459 = (cbModelParam._m0[1u].x * (_1447 - _1138)) + _1138;
    float _1480 = fma(_1459, cbSceneParam._m0[89u].z, fma(_1458, cbSceneParam._m0[89u].y, _1457 * cbSceneParam._m0[89u].x));
    float _1483 = fma(_1459, cbSceneParam._m0[90u].z, fma(_1458, cbSceneParam._m0[90u].y, _1457 * cbSceneParam._m0[90u].x));
    float _1486 = fma(_1459, cbSceneParam._m0[91u].z, fma(_1458, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1457));
    float _1501 = _761 * 0.5;
    float _1502 = _762 * 0.5;
    float _1503 = _763 * 0.5;
    float _1504 = dot(vec4(_1501, _1502, _1503, 1.0), vec4(_1435, _1438, _1441, _1444));
    float _1507 = dot(vec4(_1501, _1502, _1503, 1.0), vec4(_1434, _1437, _1440, _1443));
    float _1510 = dot(vec4(_1501, _1502, _1503, 1.0), vec4(_1433, _1436, _1439, _1442));
    float _1544;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1517 = dot(vec4(_1501, _1502, _1503, 1.0), vec4(_1123, _1127, _1130, _1133));
        float _1521 = dot(vec4(_1501, _1502, _1503, 1.0), vec4(_1125, _1128, _1131, _1134));
        float _1525 = dot(vec4(_1501, _1502, _1503, 1.0), vec4(_1126, _1129, _1132, _1135));
        float _1532 = dot(vec4(cbModelParam._m0[39u]), vec4(_1501, _1502, _1503, 1.0));
        _1544 = dot(vec3(isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0)), isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)), isnan(0.0) ? _1517 : (isnan(_1517) ? 0.0 : max(_1517, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1532) ? 0.0 : (isnan(0.0) ? _1532 : max(0.0, _1532))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1544 = 1.0;
    }
    float _1555;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1546 = dot(vec4(cbModelParam._m0[40u]), vec4(_1501, _1502, _1503, 1.0));
        _1555 = dot(vec3(isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0)), isnan(0.0) ? _1507 : (isnan(_1507) ? 0.0 : max(_1507, 0.0)), isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1546) ? 0.0 : (isnan(0.0) ? _1546 : max(0.0, _1546))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1555 = 1.0;
    }
    float _1559 = (_1555 * cbModelParam._m0[1u].x) + (_1544 * (1.0 - cbModelParam._m0[1u].x));
    float _1569 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _656);
    float _1570 = isnan(_1569) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1569 : min(cbModelParam._m0[25u].z, _1569));
    float _1652;
    float _1654;
    float _1656;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1619 = fma(_822, cbModelParam._m0[13u].z, fma(_818, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _814)) + cbModelParam._m0[13u].w;
        float _1623 = fma(_822, cbModelParam._m0[14u].z, fma(_818, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _814)) + cbModelParam._m0[14u].w;
        float _1627 = fma(_822, cbModelParam._m0[15u].z, fma(_818, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _814)) + cbModelParam._m0[15u].w;
        float _1630 = fma(_763, cbModelParam._m0[13u].z, fma(_762, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _761));
        float _1633 = fma(_763, cbModelParam._m0[14u].z, fma(_762, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _761));
        float _1636 = fma(_763, cbModelParam._m0[15u].z, fma(_762, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _761));
        float _1664;
        if (_1630 > 0.0)
        {
            _1664 = abs((1.0 - _1619) / _1630);
        }
        else
        {
            float frontier_phi_38_36_ladder;
            if (_1630 < 0.0)
            {
                frontier_phi_38_36_ladder = abs((_1619 + 1.0) / _1630);
            }
            else
            {
                frontier_phi_38_36_ladder = 5000.0;
            }
            _1664 = frontier_phi_38_36_ladder;
        }
        float _2009;
        if (_1633 > 0.0)
        {
            _2009 = abs((1.0 - _1623) / _1633);
        }
        else
        {
            float frontier_phi_47_43_ladder;
            if (_1633 < 0.0)
            {
                frontier_phi_47_43_ladder = abs((_1623 + 1.0) / _1633);
            }
            else
            {
                frontier_phi_47_43_ladder = 5000.0;
            }
            _2009 = frontier_phi_47_43_ladder;
        }
        float _2325;
        if (_1636 > 0.0)
        {
            _2325 = abs((1.0 - _1627) / _1636);
        }
        else
        {
            float frontier_phi_61_54_ladder;
            if (_1636 < 0.0)
            {
                frontier_phi_61_54_ladder = abs((_1627 + 1.0) / _1636);
            }
            else
            {
                frontier_phi_61_54_ladder = 5000.0;
            }
            _2325 = frontier_phi_61_54_ladder;
        }
        float _2327 = isnan(_2009) ? _1664 : (isnan(_1664) ? _2009 : min(_1664, _2009));
        float _2328 = isnan(_2325) ? _2327 : (isnan(_2327) ? _2325 : min(_2327, _2325));
        float _2332 = (_2328 * _1630) + _1619;
        float _2333 = (_2328 * _1633) + _1623;
        float _2334 = (_2328 * _1636) + _1627;
        float _2335 = _2328 * 9.9999997473787516355514526367188e-05;
        float _2336 = (-1.0) - _2335;
        float _2338 = _2335 + 1.0;
        float frontier_phi_37_61_ladder;
        float frontier_phi_37_61_ladder_1;
        float frontier_phi_37_61_ladder_2;
        if ((_2334 > _2338) || ((_2334 < _2336) || ((_2333 > _2338) || ((_2333 < _2336) || ((_2332 < _2336) || (_2332 > _2338))))))
        {
            frontier_phi_37_61_ladder = 0.0;
            frontier_phi_37_61_ladder_1 = 0.0;
            frontier_phi_37_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2460 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2334, cbModelParam._m0[9u].z, fma(_2333, cbModelParam._m0[9u].y, _2332 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2334, cbModelParam._m0[10u].z, fma(_2333, cbModelParam._m0[10u].y, _2332 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2334, cbModelParam._m0[11u].z, fma(_2333, cbModelParam._m0[11u].y, _2332 * cbModelParam._m0[11u].x))), _1570);
            frontier_phi_37_61_ladder = _2460.z * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_1 = _2460.y * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_2 = _2460.x * cbModelParam._m0[1u].y;
        }
        _1652 = frontier_phi_37_61_ladder_2;
        _1654 = frontier_phi_37_61_ladder_1;
        _1656 = frontier_phi_37_61_ladder;
    }
    else
    {
        vec4 _1640 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_761, _762, _763), _1570);
        _1652 = _1640.x * cbModelParam._m0[1u].y;
        _1654 = _1640.y * cbModelParam._m0[1u].y;
        _1656 = _1640.z * cbModelParam._m0[1u].y;
    }
    float _1660 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _656);
    float _1661 = isnan(_1660) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1660 : min(cbModelParam._m0[25u].w, _1660));
    float _1749;
    float _1751;
    float _1753;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1713 = fma(_822, cbModelParam._m0[21u].z, fma(_818, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _814)) + cbModelParam._m0[21u].w;
        float _1717 = fma(_822, cbModelParam._m0[22u].z, fma(_818, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _814)) + cbModelParam._m0[22u].w;
        float _1721 = fma(_822, cbModelParam._m0[23u].z, fma(_818, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _814)) + cbModelParam._m0[23u].w;
        float _1724 = fma(_763, cbModelParam._m0[21u].z, fma(_762, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _761));
        float _1727 = fma(_763, cbModelParam._m0[22u].z, fma(_762, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _761));
        float _1730 = fma(_763, cbModelParam._m0[23u].z, fma(_762, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _761));
        float _2014;
        if (_1724 > 0.0)
        {
            _2014 = abs((1.0 - _1713) / _1724);
        }
        else
        {
            float frontier_phi_49_45_ladder;
            if (_1724 < 0.0)
            {
                frontier_phi_49_45_ladder = abs((_1713 + 1.0) / _1724);
            }
            else
            {
                frontier_phi_49_45_ladder = 5000.0;
            }
            _2014 = frontier_phi_49_45_ladder;
        }
        float _2351;
        if (_1727 > 0.0)
        {
            _2351 = abs((1.0 - _1717) / _1727);
        }
        else
        {
            float frontier_phi_63_56_ladder;
            if (_1727 < 0.0)
            {
                frontier_phi_63_56_ladder = abs((_1717 + 1.0) / _1727);
            }
            else
            {
                frontier_phi_63_56_ladder = 5000.0;
            }
            _2351 = frontier_phi_63_56_ladder;
        }
        float _2520;
        if (_1730 > 0.0)
        {
            _2520 = abs((1.0 - _1721) / _1730);
        }
        else
        {
            float frontier_phi_77_72_ladder;
            if (_1730 < 0.0)
            {
                frontier_phi_77_72_ladder = abs((_1721 + 1.0) / _1730);
            }
            else
            {
                frontier_phi_77_72_ladder = 5000.0;
            }
            _2520 = frontier_phi_77_72_ladder;
        }
        float _2522 = isnan(_2351) ? _2014 : (isnan(_2014) ? _2351 : min(_2014, _2351));
        float _2523 = isnan(_2520) ? _2522 : (isnan(_2522) ? _2520 : min(_2522, _2520));
        float _2527 = (_2523 * _1724) + _1713;
        float _2528 = (_2523 * _1727) + _1717;
        float _2529 = (_2523 * _1730) + _1721;
        float _2530 = _2523 * 9.9999997473787516355514526367188e-05;
        float _2531 = (-1.0) - _2530;
        float _2533 = _2530 + 1.0;
        float frontier_phi_46_77_ladder;
        float frontier_phi_46_77_ladder_1;
        float frontier_phi_46_77_ladder_2;
        if ((_2529 > _2533) || ((_2529 < _2531) || ((_2528 > _2533) || ((_2528 < _2531) || ((_2527 < _2531) || (_2527 > _2533))))))
        {
            frontier_phi_46_77_ladder = 0.0;
            frontier_phi_46_77_ladder_1 = 0.0;
            frontier_phi_46_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2762 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2529, cbModelParam._m0[17u].z, fma(_2528, cbModelParam._m0[17u].y, _2527 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2529, cbModelParam._m0[18u].z, fma(_2528, cbModelParam._m0[18u].y, _2527 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2529, cbModelParam._m0[19u].z, fma(_2528, cbModelParam._m0[19u].y, _2527 * cbModelParam._m0[19u].x))), _1661);
            frontier_phi_46_77_ladder = _2762.z * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_1 = _2762.y * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_2 = _2762.x * cbModelParam._m0[1u].z;
        }
        _1749 = frontier_phi_46_77_ladder_2;
        _1751 = frontier_phi_46_77_ladder_1;
        _1753 = frontier_phi_46_77_ladder;
    }
    else
    {
        vec4 _1733 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_761, _762, _763), _1661);
        _1749 = _1733.x * cbModelParam._m0[1u].z;
        _1751 = _1733.y * cbModelParam._m0[1u].z;
        _1753 = _1733.z * cbModelParam._m0[1u].z;
    }
    float _1765 = ((((1.0 - _782) * ((_769 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_782 * _769)) * _753;
    float _1766 = _1765 * ((cbModelParam._m0[1u].w * (_1749 - _1652)) + _1652);
    float _1767 = _1765 * ((cbModelParam._m0[1u].w * (_1751 - _1654)) + _1654);
    float _1768 = _1765 * ((cbModelParam._m0[1u].w * (_1753 - _1656)) + _1656);
    float _1771 = fma(_1768, cbSceneParam._m0[89u].z, fma(_1767, cbSceneParam._m0[89u].y, _1766 * cbSceneParam._m0[89u].x));
    float _1774 = fma(_1768, cbSceneParam._m0[90u].z, fma(_1767, cbSceneParam._m0[90u].y, _1766 * cbSceneParam._m0[90u].x));
    float _1777 = fma(_1768, cbSceneParam._m0[91u].z, fma(_1767, cbSceneParam._m0[91u].y, _1766 * cbSceneParam._m0[91u].x));
    uvec4 _1787 = floatBitsToUint(cbInstanceData._m0[_727 + 5u]);
    uint _1789 = _1787.x * 14u;
    uint _1790 = _1789 + 13u;
    float _1795 = _753 + (-1.0);
    float _1798 = (cbLight._m0[_1790].x * _1795) + 1.0;
    float _1799 = (cbLight._m0[_1790].y * _1795) + 1.0;
    uint _1800 = _1789 + 5u;
    float _1806 = isnan(1.0) ? _1799 : (isnan(_1799) ? 1.0 : min(_1799, 1.0));
    uint _1810 = _1789 + 4u;
    float _1816 = isnan(1.0) ? _1798 : (isnan(_1798) ? 1.0 : min(_1798, 1.0));
    uint _1820 = _1789 | 1u;
    float _1831 = dot(vec3(cbLight._m0[_1789].xyz), vec3(_653, _654, _655));
    float _1834 = dot(vec3(cbLight._m0[_1820].xyz), vec3(_653, _654, _655));
    float _3719 = isnan(0.0) ? _1831 : (isnan(_1831) ? 0.0 : max(_1831, 0.0));
    float _3730 = isnan(0.0) ? _1834 : (isnan(_1834) ? 0.0 : max(_1834, 0.0));
    float _1839 = (isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0))) * 0.3183098733425140380859375;
    float _1841 = (isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * 0.3183098733425140380859375;
    float _1848 = ((cbLight._m0[_1800].x * _1806) * _1841) + ((cbLight._m0[_1810].x * _1816) * _1839);
    float _1849 = ((_1806 * cbLight._m0[_1800].y) * _1841) + ((_1816 * cbLight._m0[_1810].y) * _1839);
    float _1850 = ((_1806 * cbLight._m0[_1800].z) * _1841) + ((_1816 * cbLight._m0[_1810].z) * _1839);
    uint _1852 = _1789 + 8u;
    float _1865 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1789].w)) * _656) * 0.949999988079071044921875);
    float _1866 = _1865 * _1865;
    float _1867 = cbLight._m0[_1789].x + _680;
    float _1868 = cbLight._m0[_1789].y + _681;
    float _1869 = cbLight._m0[_1789].z + _682;
    float _1873 = inversesqrt(dot(vec3(_1867, _1868, _1869), vec3(_1867, _1868, _1869)));
    float _1874 = _1873 * _1867;
    float _1875 = _1873 * _1868;
    float _1876 = _1873 * _1869;
    float _1877 = dot(vec3(_653, _654, _655), vec3(cbLight._m0[_1789].xyz));
    float _3741 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
    float _1880 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
    float _3752 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _1881 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
    float _1882 = dot(vec3(_653, _654, _655), vec3(_1874, _1875, _1876));
    float _3763 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
    float _1885 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
    float _1886 = dot(vec3(cbLight._m0[_1789].xyz), vec3(_1874, _1875, _1876));
    float _3774 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
    float _1890 = _1866 * _1866;
    float _1894 = ((_1885 * _1885) * (_1890 + (-1.0))) + 1.0;
    float _1905 = (exp2(log2(1.0 - (isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1906 = 1.0 - _1866;
    float _1917 = (0.5 / (((_1881 * ((_1880 * _1906) + _1866)) + 9.9999999392252902907785028219223e-09) + (((_1881 * _1906) + _1866) * _1880))) * _1880;
    float _3785 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
    float _1919 = (isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0))) * (_1890 / ((_1894 * _1894) * 3.141590118408203125));
    uint _1930 = _1789 + 9u;
    float _1941 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1820].w)) * _656) * 0.949999988079071044921875);
    float _1942 = _1941 * _1941;
    float _1943 = cbLight._m0[_1820].x + _680;
    float _1944 = cbLight._m0[_1820].y + _681;
    float _1945 = cbLight._m0[_1820].z + _682;
    float _1949 = inversesqrt(dot(vec3(_1943, _1944, _1945), vec3(_1943, _1944, _1945)));
    float _1950 = _1949 * _1943;
    float _1951 = _1949 * _1944;
    float _1952 = _1949 * _1945;
    float _1953 = dot(vec3(_653, _654, _655), vec3(cbLight._m0[_1820].xyz));
    float _3796 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
    float _1956 = isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0));
    float _1957 = dot(vec3(_653, _654, _655), vec3(_1950, _1951, _1952));
    float _3807 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
    float _1960 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
    float _1961 = dot(vec3(cbLight._m0[_1820].xyz), vec3(_1950, _1951, _1952));
    float _3818 = isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0));
    float _1965 = _1942 * _1942;
    float _1969 = ((_1960 * _1960) * (_1965 + (-1.0))) + 1.0;
    float _1978 = (exp2(log2(1.0 - (isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1979 = 1.0 - _1942;
    float _1989 = (0.5 / (((_1881 * ((_1956 * _1979) + _1942)) + 9.9999999392252902907785028219223e-09) + (((_1881 * _1979) + _1942) * _1956))) * _1956;
    float _3829 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _1991 = (isnan(1.0) ? _3829 : (isnan(_3829) ? 1.0 : min(_3829, 1.0))) * (_1965 / ((_1969 * _1969) * 3.141590118408203125));
    float _2001 = (((_1978 * cbLight._m0[_1930].x) * _1991) * _1806) + (((_1905 * cbLight._m0[_1852].x) * _1919) * _1816);
    float _2002 = (((_1978 * cbLight._m0[_1930].y) * _1991) * _1806) + (((_1905 * cbLight._m0[_1852].y) * _1919) * _1816);
    float _2003 = (((_1978 * cbLight._m0[_1930].z) * _1991) * _1806) + (((_1905 * cbLight._m0[_1852].z) * _1919) * _1816);
    float _2118;
    float _2120;
    float _2122;
    float _2124;
    float _2126;
    float _2128;
    if (_1787.y == 0u)
    {
        float _2058 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2059 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2058;
        float _2060 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2058;
        float _2061 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2058;
        uvec4 _2073 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2074 = _2073.x;
        uint _2085 = uint((float(_2073.y) * floor(float(uint(cbSceneParam._m0[85u].y * _689) / _2074))) + floor(float(uint(cbSceneParam._m0[85u].x * _688) / _2074)));
        float _2095 = (log2(_2061 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2096 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
        uint _2099 = uint(isnan(14.0) ? _2096 : (isnan(_2096) ? 14.0 : min(_2096, 14.0)));
        uvec4 _2104 = texelFetch(g_lightClusterGridBuffer, int(((_2099 << 2u) + (_2085 << 6u)) >> 2u));
        uint _2105 = _2104.x;
        uint _2106 = _2073.z;
        float _2212;
        float _2214;
        float _2216;
        float _2218;
        float _2220;
        float _2222;
        if (((((1u << ((_2106 >> 4u) & 15u)) + 4294967295u) & _2105) == 0u) || ((_2106 & 240u) == 0u))
        {
            _2212 = 0.0;
            _2214 = 0.0;
            _2216 = 0.0;
            _2218 = 0.0;
            _2220 = 0.0;
            _2222 = 0.0;
        }
        else
        {
            float _2213;
            float _2215;
            float _2217;
            float _2219;
            float _2221;
            float _2223;
            float _2388 = 0.0;
            float _2389 = 0.0;
            float _2390 = 0.0;
            float _2391 = 0.0;
            float _2392 = 0.0;
            float _2393 = 0.0;
            uint _2394 = 0u;
            uint _2403;
            bool _2404;
            for (;;)
            {
                _2403 = texelFetch(g_lightClassification, int((((_2099 << 5u) + (_2085 << 9u)) + (_2394 << 2u)) >> 2u)).x;
                _2404 = _2403 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2404)
                {
                    frontier_phi_74_pred = _2391;
                    frontier_phi_74_pred_1 = _2390;
                    frontier_phi_74_pred_2 = _2389;
                    frontier_phi_74_pred_3 = _2388;
                    frontier_phi_74_pred_4 = _2392;
                    frontier_phi_74_pred_5 = _2393;
                }
                else
                {
                    float _2563;
                    float _2564;
                    float _2565;
                    float _2566;
                    float _2567;
                    float _2568;
                    uint _2569;
                    _2563 = _2388;
                    _2564 = _2389;
                    _2565 = _2390;
                    _2566 = _2391;
                    _2567 = _2392;
                    _2568 = _2393;
                    _2569 = _2403;
                    float _2469;
                    float _2470;
                    float _2471;
                    float _2472;
                    float _2473;
                    float _2474;
                    for (;;)
                    {
                        uint _2573 = uint(findLSB(_2569)) + (_2394 << 5u);
                        uint _2570 = (_2569 + 4294967295u) & _2569;
                        uint _2575 = _2573 * 48u;
                        vec4 _2589 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2575)).x, texelFetch(g_PointLightRenderingBuffer, int(_2575 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2575 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2575 + 3u)).x));
                        uint _2595 = (_2573 * 48u) + 4u;
                        vec4 _2608 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2595)).x, texelFetch(g_PointLightRenderingBuffer, int(_2595 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2595 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2595 + 3u)).x));
                        uint _2614 = (_2573 * 48u) + 8u;
                        vec3 _2625 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2614)).x, texelFetch(g_PointLightRenderingBuffer, int(_2614 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2614 + 2u)).x));
                        float _2629 = _2589.x - _2059;
                        float _2630 = _2589.y - _2060;
                        float _2631 = _2589.z - _2061;
                        float _2632 = dot(vec3(_2629, _2630, _2631), vec3(_2629, _2630, _2631));
                        float _2635 = inversesqrt(_2632);
                        float _2636 = _2635 * _2629;
                        float _2637 = _2635 * _2630;
                        float _2638 = _2635 * _2631;
                        float _2639 = dot(vec3(_708, _711, _714), vec3(_2636, _2637, _2638));
                        float _2644 = 1.0 - (_2632 * _2589.w);
                        float _3850 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
                        float _2645 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
                        float _2646 = sqrt(_2632) * _2608.w;
                        float _2649 = 1.39999997615814208984375 / (_2646 + 1.39999997615814208984375);
                        float _2650 = _2649 * _2649;
                        float _2653 = ((1.0 - _2650) * _2639) + _2650;
                        float _2656 = _2646 * _2646;
                        float _2660 = ((isnan(0.0) ? _2653 : (isnan(_2653) ? 0.0 : max(_2653, 0.0))) * _2645) / ((_2656 * 0.699999988079071044921875) + 1.0);
                        float _2664 = (-0.0) - _2059;
                        float _2665 = (-0.0) - _2060;
                        float _2666 = (-0.0) - _2061;
                        float _2670 = inversesqrt(dot(vec3(_2664, _2665, _2666), vec3(_2664, _2665, _2666)));
                        float _2671 = _2670 * _2664;
                        float _2672 = _2670 * _2665;
                        float _2673 = _2670 * _2666;
                        float _2681 = exp2(log2(1.0 / ((_2656 * 3.5) + 5.0)) * 0.25);
                        float _2682 = 1.0 - _769;
                        float _2689 = sqrt(1.0 - ((1.0 - (_2682 * _2682)) * (1.0 - (_2681 * _2681))));
                        float _2690 = _2689 * _2689;
                        float _2691 = _2690 * _2690;
                        float _2692 = _2671 + _2636;
                        float _2693 = _2672 + _2637;
                        float _2694 = _2673 + _2638;
                        float _2698 = inversesqrt(dot(vec3(_2692, _2693, _2694), vec3(_2692, _2693, _2694)));
                        float _2702 = dot(vec3(_708, _711, _714), vec3(_2671, _2672, _2673));
                        float _3866 = isnan(0.0) ? _2702 : (isnan(_2702) ? 0.0 : max(_2702, 0.0));
                        float _2705 = isnan(1.0) ? _3866 : (isnan(_3866) ? 1.0 : min(_3866, 1.0));
                        float _2706 = dot(vec3(_708, _711, _714), vec3(_2698 * _2692, _2698 * _2693, _2698 * _2694));
                        float _3877 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
                        float _2709 = isnan(1.0) ? _3877 : (isnan(_3877) ? 1.0 : min(_3877, 1.0));
                        float _2713 = ((_2709 * _2709) * (_2691 + (-1.0))) + 1.0;
                        float _2714 = _2649 * _2690;
                        float _2715 = _2714 * _2714;
                        float _2718 = ((1.0 - _2715) * _2639) + _2715;
                        float _3888 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
                        float _2719 = isnan(1.0) ? _3888 : (isnan(_3888) ? 1.0 : min(_3888, 1.0));
                        float _2720 = 1.0 - _2690;
                        float _2730 = (0.5 / (((_2719 * ((_2705 * _2720) + _2690)) + 9.9999999392252902907785028219223e-09) + (((_2719 * _2720) + _2690) * _2705))) * _2719;
                        float _3899 = isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0));
                        float _2741 = (((_2691 * 3.1415927410125732421875) * (isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0)))) / ((_2713 * _2713) * ((_2656 * 2.1991131305694580078125) + 3.141590118408203125))) * _2645;
                        _2472 = (_2660 * _2608.x) + _2566;
                        _2473 = (_2660 * _2608.y) + _2567;
                        _2474 = (_2660 * _2608.z) + _2568;
                        _2469 = (_2741 * _2625.x) + _2563;
                        _2470 = (_2741 * _2625.y) + _2564;
                        _2471 = (_2741 * _2625.z) + _2565;
                        if (_2570 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2563 = _2469;
                            _2564 = _2470;
                            _2565 = _2471;
                            _2566 = _2472;
                            _2567 = _2473;
                            _2568 = _2474;
                            _2569 = _2570;
                        }
                    }
                    frontier_phi_74_pred = _2472;
                    frontier_phi_74_pred_1 = _2471;
                    frontier_phi_74_pred_2 = _2470;
                    frontier_phi_74_pred_3 = _2469;
                    frontier_phi_74_pred_4 = _2473;
                    frontier_phi_74_pred_5 = _2474;
                }
                _2219 = frontier_phi_74_pred;
                _2217 = frontier_phi_74_pred_1;
                _2215 = frontier_phi_74_pred_2;
                _2213 = frontier_phi_74_pred_3;
                _2221 = frontier_phi_74_pred_4;
                _2223 = frontier_phi_74_pred_5;
                uint _2395 = _2394 + 1u;
                if (_2395 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2388 = _2213;
                    _2389 = _2215;
                    _2390 = _2217;
                    _2391 = _2219;
                    _2392 = _2221;
                    _2393 = _2223;
                    _2394 = _2395;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2212 = _2213;
            _2214 = _2215;
            _2216 = _2217;
            _2218 = _2219;
            _2220 = _2221;
            _2222 = _2223;
        }
        uvec4 _2226 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2227 = _2226.z;
        uint _2229 = (_2227 >> 8u) & 15u;
        float _2356;
        float _2358;
        float _2360;
        float _2362;
        float _2364;
        float _2366;
        if (((4294967295u << _2229) & _2105) == 0u)
        {
            _2356 = _2212;
            _2358 = _2214;
            _2360 = _2216;
            _2362 = _2218;
            _2364 = _2220;
            _2366 = _2222;
        }
        else
        {
            float _2381 = inversesqrt(dot(vec3(_2059, _2060, _2061), vec3(_2059, _2060, _2061)));
            float _2382 = _2381 * _2059;
            float _2383 = _2381 * _2060;
            float _2384 = _2381 * _2061;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2229 < ((_2227 >> 12u) & 15u))
            {
                float _2357;
                float _2359;
                float _2361;
                float _2363;
                float _2365;
                float _2367;
                float _2546 = _2212;
                float _2547 = _2214;
                float _2548 = _2216;
                float _2549 = _2218;
                float _2550 = _2220;
                float _2551 = _2222;
                uint _2552 = _2229;
                uint _2561;
                bool _2562;
                for (;;)
                {
                    _2561 = texelFetch(g_lightClassification, int((((_2099 << 5u) + (_2085 << 9u)) + (_2552 << 2u)) >> 2u)).x;
                    _2562 = _2561 == 0u;
                    float frontier_phi_83_pred;
                    float frontier_phi_83_pred_1;
                    float frontier_phi_83_pred_2;
                    float frontier_phi_83_pred_3;
                    float frontier_phi_83_pred_4;
                    float frontier_phi_83_pred_5;
                    if (_2562)
                    {
                        frontier_phi_83_pred = _2549;
                        frontier_phi_83_pred_1 = _2548;
                        frontier_phi_83_pred_2 = _2547;
                        frontier_phi_83_pred_3 = _2546;
                        frontier_phi_83_pred_4 = _2551;
                        frontier_phi_83_pred_5 = _2550;
                    }
                    else
                    {
                        float _2767;
                        float _2768;
                        float _2769;
                        float _2770;
                        float _2771;
                        float _2772;
                        float _3060;
                        float _3061;
                        float _3062;
                        float _3063;
                        float _3064;
                        float _3065;
                        float _2780 = _2546;
                        float _2781 = _2547;
                        float _2782 = _2548;
                        float _2783 = _2549;
                        float _2784 = _2550;
                        float _2785 = _2551;
                        uint _2786 = _2561;
                        uint _2787;
                        vec4 _2812;
                        float _2813;
                        vec4 _2828;
                        vec3 _2840;
                        vec4 _2855;
                        vec4 _2870;
                        float _2916;
                        bool _2917;
                        for (;;)
                        {
                            uint _2797 = ((_2552 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2786));
                            _2787 = (_2786 + 4294967295u) & _2786;
                            uint _2799 = _2797 * 40u;
                            _2812 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2799)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2799 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2799 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2799 + 3u)).x));
                            _2813 = _2812.w;
                            uint _2815 = (_2797 * 40u) + 4u;
                            _2828 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2815)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2815 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2815 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2815 + 3u)).x));
                            uint _2830 = (_2797 * 40u) + 8u;
                            _2840 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2830)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2830 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2830 + 2u)).x));
                            uint _2842 = (_2797 * 40u) + 16u;
                            _2855 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2842)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2842 + 3u)).x));
                            uint _2857 = (_2797 * 40u) + 20u;
                            _2870 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2857)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2857 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2857 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2857 + 3u)).x));
                            uint _2872 = (_2797 * 40u) + 24u;
                            vec4 _2885 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2872)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 3u)).x));
                            uint _2891 = (_2797 * 40u) + 28u;
                            vec4 _2904 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2891)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2891 + 3u)).x));
                            _2916 = fma(_2061, _2904.z, fma(_2060, _2904.y, _2904.x * _2059)) + _2904.w;
                            _2917 = !((fma(_2061, _2885.z, fma(_2060, _2885.y, _2885.x * _2059)) + _2885.w) <= 0.0);
                            float frontier_phi_89_pred;
                            float frontier_phi_89_pred_1;
                            float frontier_phi_89_pred_2;
                            float frontier_phi_89_pred_3;
                            float frontier_phi_89_pred_4;
                            float frontier_phi_89_pred_5;
                            if (_2917)
                            {
                                float _2944 = _2812.x - _2059;
                                float _2945 = _2812.y - _2060;
                                float _2946 = _2812.z - _2061;
                                float _2947 = dot(vec3(_2944, _2945, _2946), vec3(_2944, _2945, _2946));
                                float _2950 = inversesqrt(_2947);
                                float _2951 = _2950 * _2944;
                                float _2952 = _2950 * _2945;
                                float _2953 = _2950 * _2946;
                                float _2957 = 1.0 - (_2947 / (_2813 * _2813));
                                float _3910 = isnan(0.0) ? _2957 : (isnan(_2957) ? 0.0 : max(_2957, 0.0));
                                float _2958 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
                                float _2962 = sqrt(_2947) * _2828.w;
                                float _2964 = 1.39999997615814208984375 / (_2962 + 1.39999997615814208984375);
                                float _2965 = _2964 * _2964;
                                float _2968 = ((1.0 - _2965) * dot(vec3(_2951, _2952, _2953), vec3(_708, _711, _714))) + _2965;
                                float _2971 = _2962 * _2962;
                                float _2975 = (fma(_2061, _2855.z, fma(_2060, _2855.y, _2855.x * _2059)) + _2855.w) / _2916;
                                float _2976 = (fma(_2061, _2870.z, fma(_2060, _2870.y, _2870.x * _2059)) + _2870.w) / _2916;
                                float _2980 = 1.0 - dot(vec2(_2975, _2976), vec2(_2975, _2976));
                                float _3926 = isnan(0.0) ? _2980 : (isnan(_2980) ? 0.0 : max(_2980, 0.0));
                                float _2981 = isnan(1.0) ? _3926 : (isnan(_3926) ? 1.0 : min(_3926, 1.0));
                                float _2982 = _2981 * (((isnan(0.0) ? _2968 : (isnan(_2968) ? 0.0 : max(_2968, 0.0))) * _2958) / ((_2971 * 0.699999988079071044921875) + 1.0));
                                float _2994 = exp2(log2(1.0 / ((_2971 * 3.5) + 5.0)) * 0.25);
                                float _2995 = 1.0 - _769;
                                float _3002 = sqrt(1.0 - ((1.0 - (_2995 * _2995)) * (1.0 - (_2994 * _2994))));
                                float _3003 = _3002 * _3002;
                                float _3004 = _3003 * _3003;
                                float _3005 = _2951 - _2382;
                                float _3006 = _2952 - _2383;
                                float _3007 = _2953 - _2384;
                                float _3011 = inversesqrt(dot(vec3(_3005, _3006, _3007), vec3(_3005, _3006, _3007)));
                                float _3015 = dot(vec3(_708, _711, _714), vec3((-0.0) - _2382, (-0.0) - _2383, (-0.0) - _2384));
                                float _3937 = isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0));
                                float _3018 = isnan(1.0) ? _3937 : (isnan(_3937) ? 1.0 : min(_3937, 1.0));
                                float _3019 = dot(vec3(_708, _711, _714), vec3(_3011 * _3005, _3011 * _3006, _3011 * _3007));
                                float _3948 = isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0));
                                float _3022 = isnan(1.0) ? _3948 : (isnan(_3948) ? 1.0 : min(_3948, 1.0));
                                float _3026 = ((_3022 * _3022) * (_3004 + (-1.0))) + 1.0;
                                float _3027 = _2964 * _3003;
                                float _3028 = _3027 * _3027;
                                float _3034 = ((1.0 - _3028) * dot(vec3(_708, _711, _714), vec3(_2951, _2952, _2953))) + _3028;
                                float _3959 = isnan(0.0) ? _3034 : (isnan(_3034) ? 0.0 : max(_3034, 0.0));
                                float _3035 = isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0));
                                float _3036 = 1.0 - _3003;
                                float _3046 = (0.5 / (((_3035 * ((_3018 * _3036) + _3003)) + 9.9999999392252902907785028219223e-09) + (((_3035 * _3036) + _3003) * _3018))) * _3035;
                                float _3970 = isnan(0.0) ? _3046 : (isnan(_3046) ? 0.0 : max(_3046, 0.0));
                                float _3056 = (_2981 * _2958) * (((_3004 * 3.1415927410125732421875) * (isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0)))) / ((_3026 * _3026) * ((_2971 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_89_pred = _2982 * _2828.x;
                                frontier_phi_89_pred_1 = _3056 * _2840.z;
                                frontier_phi_89_pred_2 = _3056 * _2840.y;
                                frontier_phi_89_pred_3 = _3056 * _2840.x;
                                frontier_phi_89_pred_4 = _2982 * _2828.z;
                                frontier_phi_89_pred_5 = _2982 * _2828.y;
                            }
                            else
                            {
                                frontier_phi_89_pred = 0.0;
                                frontier_phi_89_pred_1 = 0.0;
                                frontier_phi_89_pred_2 = 0.0;
                                frontier_phi_89_pred_3 = 0.0;
                                frontier_phi_89_pred_4 = 0.0;
                                frontier_phi_89_pred_5 = 0.0;
                            }
                            _3063 = frontier_phi_89_pred;
                            _3062 = frontier_phi_89_pred_1;
                            _3061 = frontier_phi_89_pred_2;
                            _3060 = frontier_phi_89_pred_3;
                            _3065 = frontier_phi_89_pred_4;
                            _3064 = frontier_phi_89_pred_5;
                            _2770 = _3063 + _2783;
                            _2771 = _3064 + _2784;
                            _2772 = _3065 + _2785;
                            _2767 = _3060 + _2780;
                            _2768 = _3061 + _2781;
                            _2769 = _3062 + _2782;
                            if (_2787 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2780 = _2767;
                                _2781 = _2768;
                                _2782 = _2769;
                                _2783 = _2770;
                                _2784 = _2771;
                                _2785 = _2772;
                                _2786 = _2787;
                                continue;
                            }
                        }
                        frontier_phi_83_pred = _2770;
                        frontier_phi_83_pred_1 = _2769;
                        frontier_phi_83_pred_2 = _2768;
                        frontier_phi_83_pred_3 = _2767;
                        frontier_phi_83_pred_4 = _2772;
                        frontier_phi_83_pred_5 = _2771;
                    }
                    _2363 = frontier_phi_83_pred;
                    _2361 = frontier_phi_83_pred_1;
                    _2359 = frontier_phi_83_pred_2;
                    _2357 = frontier_phi_83_pred_3;
                    _2367 = frontier_phi_83_pred_4;
                    _2365 = frontier_phi_83_pred_5;
                    uint _2553 = _2552 + 1u;
                    if (_2553 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2546 = _2357;
                        _2547 = _2359;
                        _2548 = _2361;
                        _2549 = _2363;
                        _2550 = _2365;
                        _2551 = _2367;
                        _2552 = _2553;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2367;
                frontier_phi_65_66_ladder_1 = _2365;
                frontier_phi_65_66_ladder_2 = _2361;
                frontier_phi_65_66_ladder_3 = _2359;
                frontier_phi_65_66_ladder_4 = _2363;
                frontier_phi_65_66_ladder_5 = _2357;
            }
            else
            {
                frontier_phi_65_66_ladder = _2222;
                frontier_phi_65_66_ladder_1 = _2220;
                frontier_phi_65_66_ladder_2 = _2216;
                frontier_phi_65_66_ladder_3 = _2214;
                frontier_phi_65_66_ladder_4 = _2218;
                frontier_phi_65_66_ladder_5 = _2212;
            }
            _2356 = frontier_phi_65_66_ladder_5;
            _2358 = frontier_phi_65_66_ladder_3;
            _2360 = frontier_phi_65_66_ladder_2;
            _2362 = frontier_phi_65_66_ladder_4;
            _2364 = frontier_phi_65_66_ladder_1;
            _2366 = frontier_phi_65_66_ladder;
        }
        float _2371 = isnan(1.0) ? _753 : (isnan(_753) ? 1.0 : min(_753, 1.0));
        _2118 = (_2371 * _2362) + _1848;
        _2120 = (_2371 * _2364) + _1849;
        _2122 = (_2371 * _2366) + _1850;
        _2124 = ((_2356 * 0.039999999105930328369140625) * _2371) + _2001;
        _2126 = ((_2358 * 0.039999999105930328369140625) * _2371) + _2002;
        _2128 = ((_2360 * 0.039999999105930328369140625) * _2371) + _2003;
    }
    else
    {
        _2118 = _1848;
        _2120 = _1849;
        _2122 = _1850;
        _2124 = _2001;
        _2126 = _2002;
        _2128 = _2003;
    }
    uint _2134 = _729 + uint(cbMatDynParam._m0[0u].w);
    float _3986 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _3997 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _4008 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _2159 = (((isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0))) * (_2118 + ((isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0))) * _753))) + ((_2124 + ((isnan(0.0) ? _1771 : (isnan(_1771) ? 0.0 : max(_1771, 0.0))) * _1559)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2134].x * ((((((cbMtdParam._m0[10u].x * _283) * _547.x) - _476) * _283) * _600) + _476));
    float _2161 = ((cbInstanceData._m0[_2134].y * ((((((cbMtdParam._m0[10u].y * _283) * _547.y) - _477) * _283) * _600) + _477)) + ((_2126 + ((isnan(0.0) ? _1774 : (isnan(_1774) ? 0.0 : max(_1774, 0.0))) * _1559)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * (_2120 + ((isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0))) * _753)));
    float _2163 = ((cbInstanceData._m0[_2134].z * ((((((cbMtdParam._m0[10u].z * _283) * _547.z) - _478) * _283) * _600) + _478)) + ((_2128 + ((isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0))) * _1559)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0))) * (_2122 + ((isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0))) * _753)));
    uint _2167 = _727 + 6u;
    float _2175 = _688 / cbSceneParam._m0[86u].x;
    float _2176 = _689 / cbSceneParam._m0[86u].y;
    vec4 _2190 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2175, _2176, (log2((isnan(cbSceneParam._m0[77u].w) ? _675 : (isnan(_675) ? cbSceneParam._m0[77u].w : min(_675, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2192 = _2190.x;
    float _2193 = _2190.y;
    float _2194 = _2190.z;
    float _2195 = _2190.w;
    float _2275;
    float _2277;
    float _2279;
    float _2281;
    if (_675 > cbSceneParam._m0[78u].w)
    {
        float _2237 = isnan(_675) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _675 : min(cbSceneParam._m0[80u].w, _675));
        float _2238 = _2237 / _675;
        float _2249 = _2238 * _265;
        float _2250 = _266 * _2238;
        float _2251 = (-0.0) - _2250;
        float _2252 = _2238 * _267;
        float _2254 = (cbSceneParam._m0[77u].w * _2251) / _2237;
        float _2255 = _2254 + cbSceneParam._m0[79u].w;
        float _2256 = cbSceneParam._m0[79u].w - _2250;
        float _2262 = sqrt(((_2249 * _2249) + (_2250 * _2250)) + (_2252 * _2252));
        float _2265 = (1.0 - (cbSceneParam._m0[77u].w / _2237)) * _2262;
        float _2271 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2273 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2482;
        if (abs((_2251 - _2254) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2482 = ((((_2255 > 0.0) ? exp2(_2271 * _2255) : (2.0 - exp2(_2273 * _2255))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2265;
        }
        else
        {
            float _2417 = 1.0 / cbSceneParam._m0[80u].x;
            float _2418 = isnan(_2256) ? _2255 : (isnan(_2255) ? _2256 : max(_2255, _2256));
            float _2419 = isnan(_2256) ? _2255 : (isnan(_2255) ? _2256 : min(_2255, _2256));
            float _2428 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : min(_2418, 0.0));
            float _2429 = isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : min(_2419, 0.0));
            _2482 = ((abs(_2262 / _2251) * cbSceneParam._m0[80u].y) * ((((_2428 - _2429) * 2.0) - ((exp2(_2271 * (isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0)))) - exp2(_2271 * (isnan(0.0) ? _2419 : (isnan(_2419) ? 0.0 : max(_2419, 0.0))))) * _2417)) - ((exp2(_2273 * _2428) - exp2(_2273 * _2429)) * _2417))) + (_2265 * cbSceneParam._m0[80u].z);
        }
        vec4 _2484 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2175, _2176, 1.0), 0.0);
        float _2493 = exp2((_2482 * (-1.44269502162933349609375)) * (1.0 - _2484.w));
        float _2494 = log2(_2493);
        float _2510 = log2(_2195);
        _2275 = (exp2(_2510 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2494 * cbSceneParam._m0[78u].x)) * _2484.x) / cbSceneParam._m0[78u].x)) + _2192;
        _2277 = (exp2(_2510 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2494 * cbSceneParam._m0[78u].y)) * _2484.y) / cbSceneParam._m0[78u].y)) + _2193;
        _2279 = (exp2(_2510 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2494 * cbSceneParam._m0[78u].z)) * _2484.z) / cbSceneParam._m0[78u].z)) + _2194;
        _2281 = _2493 * _2195;
    }
    else
    {
        _2275 = _2192;
        _2277 = _2193;
        _2279 = _2194;
        _2281 = _2195;
    }
    float _2293 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2294 = _2293 == 3.0;
    float _2295 = log2(_2281);
    float _2302 = exp2(_2295 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0)));
    float _2303 = exp2(_2295 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0)));
    float _2304 = exp2(_2295 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2163 : (isnan(_2163) ? 0.0 : max(_2163, 0.0)));
    float _2313 = (_2293 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2313 * (_2294 ? _2302 : (_2302 + (cbSceneParam._m0[72u].w * _2275)));
    SV_Target.y = _2313 * (_2294 ? _2303 : (_2303 + (cbSceneParam._m0[72u].w * _2277)));
    SV_Target.z = _2313 * (_2294 ? _2304 : (_2304 + (cbSceneParam._m0[72u].w * _2279)));
    SV_Target.w = cbInstanceData._m0[_2167].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2167].w;
}


