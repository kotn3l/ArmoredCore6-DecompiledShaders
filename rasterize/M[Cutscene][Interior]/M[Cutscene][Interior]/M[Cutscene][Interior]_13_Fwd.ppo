#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 10) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_8;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1045;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _284 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _319 = cbMtdParam._m0[24u].x + _263;
    float _320 = cbMtdParam._m0[24u].y + _264;
    float _321 = cbMtdParam._m0[24u].z + _265;
    float _335 = (-0.0) - dot(vec3(_319, _320, _321), vec3(_191 * _184, _191 * _185, _191 * _186));
    float _336 = (-0.0) - dot(vec3(_319, _320, _321), vec3(_205 * TANGENT.x, _205 * TANGENT.y, _205 * TANGENT.z));
    float _337 = (-0.0) - dot(vec3(_319, _320, _321), vec3((-0.0) - (_198 * NORMAL.x), (-0.0) - (_198 * NORMAL.y), (-0.0) - (_198 * NORMAL.z)));
    float _341 = inversesqrt(dot(vec3(_335, _336, _337), vec3(_335, _336, _337)));
    float _344 = _341 * _337;
    float _345 = (_341 * _335) + (((_284.x * 2.0) + (-1.0)) * cbMtdParam._m0[22u].x);
    float _346 = (_341 * _336) + (((_284.y * 2.0) + (-1.0)) * cbMtdParam._m0[22u].y);
    float _347 = _345 * cbMtdParam._m0[20u].w;
    float _348 = _346 * cbMtdParam._m0[20u].z;
    float _349 = fract(TEXCOORD.x);
    float _350 = fract(TEXCOORD.y);
    float _356;
    if (_347 > 0.0)
    {
        _356 = (1.0 - _349) / _347;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_347 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _349) / _347;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _356 = frontier_phi_3_2_ladder;
    }
    float _364;
    if (_348 > 0.0)
    {
        _364 = (1.0 - _350) / _348;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_348 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _350) / _348;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _364 = frontier_phi_7_6_ladder;
    }
    bool _366 = _344 > 0.0;
    float _368 = _366 ? (cbMtdParam._m0[16u].x / _344) : 5000.0;
    float _369 = isnan(_364) ? _356 : (isnan(_356) ? _364 : min(_356, _364));
    float _370 = isnan(_368) ? _369 : (isnan(_369) ? _368 : min(_369, _368));
    float _374 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _375 = _349 + (-0.5);
    float _378 = _350 + (-0.5);
    float _381 = ((_370 * _344) + _374) / _374;
    vec4 _406 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (((((_375 + (_370 * _347)) / _381) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (((((_378 + (_370 * _348)) / _381) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    float _416 = cbMtdParam._m0[9u].x * _406.x;
    float _417 = cbMtdParam._m0[9u].y * _406.y;
    float _418 = cbMtdParam._m0[9u].z * _406.z;
    float _437 = _345 * cbMtdParam._m0[22u].w;
    float _438 = _346 * cbMtdParam._m0[22u].z;
    bool _439 = _437 > 0.0;
    float _444;
    if (_439)
    {
        _444 = (1.0 - _349) / _437;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_437 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _349) / _437;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _444 = frontier_phi_11_10_ladder;
    }
    bool _446 = _438 > 0.0;
    float _451;
    if (_446)
    {
        _451 = (1.0 - _350) / _438;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_438 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _350) / _438;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _451 = frontier_phi_15_14_ladder;
    }
    float _454 = _366 ? (cbMtdParam._m0[18u].x / _344) : 5000.0;
    float _455 = isnan(_451) ? _444 : (isnan(_444) ? _451 : min(_444, _451));
    float _456 = isnan(_454) ? _455 : (isnan(_455) ? _454 : min(_455, _454));
    float _460 = cbMtdParam._m0[19u].y * cbMtdParam._m0[18u].x;
    float _464 = ((_456 * _344) + _460) / _460;
    float _469 = cbMtdParam._m0[19u].x - cbMtdParam._m0[20u].x * trunc(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    float _471 = floor(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    vec4 _487 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_375 + (_456 * _437)) / _464) + 0.5) + _469) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_378 + (_456 * _438)) / _464) + 0.5) + _471) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[0u].w));
    float _499;
    if (_439)
    {
        _499 = (1.0 - _349) / _437;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_437 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _349) / _437;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _499 = frontier_phi_19_18_ladder;
    }
    float _505;
    if (_446)
    {
        _505 = (1.0 - _350) / _438;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_438 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _350) / _438;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _505 = frontier_phi_23_22_ladder;
    }
    float _507 = isnan(_505) ? _499 : (isnan(_499) ? _505 : min(_499, _505));
    float _508 = isnan(_454) ? _507 : (isnan(_507) ? _454 : min(_507, _454));
    float _515 = ((_508 * _344) + _460) / _460;
    vec4 _535 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_375 + (_508 * _437)) / _515) + 0.5) + _469) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_378 + (_508 * _438)) / _515) + 0.5) + _471) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[8u].w));
    float _537 = _535.x;
    float _544 = (_537 * ((_487.x * cbMtdParam._m0[10u].x) - _416)) + _416;
    float _545 = (_537 * ((_487.y * cbMtdParam._m0[10u].y) - _417)) + _417;
    float _546 = (_537 * ((_487.z * cbMtdParam._m0[10u].z) - _418)) + _418;
    float _562 = _345 * cbMtdParam._m0[23u].y;
    float _563 = _346 * cbMtdParam._m0[23u].x;
    bool _564 = _562 > 0.0;
    float _569;
    if (_564)
    {
        _569 = (1.0 - _349) / _562;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_562 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _349) / _562;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _569 = frontier_phi_27_26_ladder;
    }
    bool _571 = _563 > 0.0;
    float _576;
    if (_571)
    {
        _576 = (1.0 - _350) / _563;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_563 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _350) / _563;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _576 = frontier_phi_31_30_ladder;
    }
    float _579 = _366 ? (cbMtdParam._m0[19u].w / _344) : 5000.0;
    float _580 = isnan(_576) ? _569 : (isnan(_569) ? _576 : min(_569, _576));
    float _581 = isnan(_579) ? _580 : (isnan(_580) ? _579 : min(_580, _579));
    float _585 = cbMtdParam._m0[19u].w * cbMtdParam._m0[16u].z;
    float _589 = ((_581 * _344) + _585) / _585;
    float _594 = cbMtdParam._m0[19u].z - cbMtdParam._m0[23u].z * trunc(cbMtdParam._m0[19u].z / cbMtdParam._m0[23u].z);
    float _596 = floor(cbMtdParam._m0[19u].z / cbMtdParam._m0[23u].z);
    vec4 _612 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * (((((_375 + (_581 * _562)) / _589) + 0.5) + _594) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * (((((_378 + (_581 * _563)) / _589) + 0.5) + _596) / cbMtdParam._m0[23u].w)) + cbTextureTilingScale._m0[9u].w));
    float _624;
    if (_564)
    {
        _624 = (1.0 - _349) / _562;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_562 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _349) / _562;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _624 = frontier_phi_35_34_ladder;
    }
    float _630;
    if (_571)
    {
        _630 = (1.0 - _350) / _563;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_563 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _350) / _563;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _630 = frontier_phi_39_38_ladder;
    }
    float _632 = isnan(_630) ? _624 : (isnan(_624) ? _630 : min(_624, _630));
    float _633 = isnan(_579) ? _632 : (isnan(_632) ? _579 : min(_632, _579));
    float _640 = ((_633 * _344) + _585) / _585;
    vec4 _660 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_375 + (_633 * _562)) / _640) + 0.5) + _594) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_378 + (_633 * _563)) / _640) + 0.5) + _596) / cbMtdParam._m0[23u].w)) + cbTextureTilingScale._m0[10u].w));
    float _662 = _660.x;
    float _669 = (_662 * ((_612.x * cbMtdParam._m0[14u].x) - _544)) + _544;
    float _670 = (_662 * ((_612.y * cbMtdParam._m0[14u].y) - _545)) + _545;
    float _671 = (_662 * ((_612.z * cbMtdParam._m0[14u].z) - _546)) + _546;
    float _3019 = isnan(0.0) ? _669 : (isnan(_669) ? 0.0 : max(_669, 0.0));
    float _3030 = isnan(0.0) ? _670 : (isnan(_670) ? 0.0 : max(_670, 0.0));
    float _3041 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
    float _690 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _694 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _695 = _263 * _694;
    float _696 = _264 * _694;
    float _697 = _265 * _694;
    float _703 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _704 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _717 = uint(roundEven(NORMAL.w)) * 13u;
    uint _720 = (_717 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _726 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3019 : (isnan(_3019) ? 1.0 : min(_3019, 1.0)))) * cbInstanceData._m0[_720].x;
    float _727 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3030 : (isnan(_3030) ? 1.0 : min(_3030, 1.0)))) * cbInstanceData._m0[_720].y;
    float _728 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3041 : (isnan(_3041) ? 1.0 : min(_3041, 1.0)))) * cbInstanceData._m0[_720].z;
    float _3052 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _729 = isnan(1.0) ? _3052 : (isnan(_3052) ? 1.0 : min(_3052, 1.0));
    float _3063 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _730 = isnan(1.0) ? _3063 : (isnan(_3063) ? 1.0 : min(_3063, 1.0));
    float _3074 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _731 = isnan(1.0) ? _3074 : (isnan(_3074) ? 1.0 : min(_3074, 1.0));
    vec4 _740 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _703, cbSceneParam._m0[86u].y * _704));
    float _743 = _740.x * TEXCOORD_4.z;
    float _744 = (-0.0) - _695;
    float _745 = (-0.0) - _696;
    float _746 = (-0.0) - _697;
    float _768 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _772 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _776 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1044;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _832 = (cbModelParam._m0[37u].x * ((((fma(_776, cbModelParam._m0[26u].z, fma(_772, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _768)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _834 = (cbModelParam._m0[37u].y * ((((fma(_776, cbModelParam._m0[27u].z, fma(_772, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _768)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _835 = (((((fma(_776, cbModelParam._m0[28u].z, fma(_772, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _768)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _838 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_832, _834, _835), 0.0);
        vec4 _845 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_832, _834, _835), 0.0);
        vec4 _852 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_832, _834, _835), 0.0);
        vec4 _859 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_832, _834, _835), 0.0);
        float _872 = exp2((_838.w + (-0.5)) * 20.0) * 2.0;
        float _873 = _872 * (_838.x + (-0.5));
        float _874 = _872 * (_838.y + (-0.5));
        float _875 = _872 * (_838.z + (-0.5));
        float _882 = exp2((_845.w + (-0.5)) * 20.0) * 2.0;
        float _883 = _882 * (_845.x + (-0.5));
        float _884 = _882 * (_845.y + (-0.5));
        float _885 = _882 * (_845.z + (-0.5));
        float _892 = exp2((_852.w + (-0.5)) * 20.0) * 2.0;
        float _893 = _892 * (_852.x + (-0.5));
        float _894 = _892 * (_852.y + (-0.5));
        float _895 = _892 * (_852.z + (-0.5));
        float _902 = exp2((_859.w + (-0.5)) * 20.0) * 2.0;
        float _903 = _902 * (_859.x + (-0.5));
        float _904 = _902 * (_859.y + (-0.5));
        float _905 = _902 * (_859.z + (-0.5));
        float _906 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _907 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _908 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _909 = _873 * 0.5;
        float _910 = _883 * 0.5;
        float _911 = _893 * 0.5;
        float _912 = dot(vec3(_909, _910, _911), vec3(_909, _910, _911));
        float _917 = (_912 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_912);
        float _926 = (dot(vec3(0.0), vec3(_917 * _909, _917 * _910, _917 * _911)) + 1.0) * 0.5;
        float _3100 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _936 = sqrt(((_910 * _910) + (_909 * _909)) + (_911 * _911)) / (_906 + 9.9999997473787516355514526367188e-06);
        float _3111 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _937 = isnan(1.0) ? _3111 : (isnan(_3111) ? 1.0 : min(_3111, 1.0));
        float _938 = _937 * 2.0;
        float _942 = (1.0 - _937) / (_937 + 1.0);
        float _3122 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _943 = isnan(1.0) ? _3122 : (isnan(_3122) ? 1.0 : min(_3122, 1.0));
        float _952 = ((((1.0 - _943) * (_938 + 2.0)) * exp2(log2(isnan(1.0) ? _3100 : (isnan(_3100) ? 1.0 : min(_3100, 1.0))) * (_938 + 1.0))) + _943) * _906;
        float _953 = _874 * 0.5;
        float _954 = _884 * 0.5;
        float _955 = _894 * 0.5;
        float _956 = dot(vec3(_953, _954, _955), vec3(_953, _954, _955));
        float _961 = (_956 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_956);
        float _969 = (dot(vec3(0.0), vec3(_961 * _953, _961 * _954, _961 * _955)) + 1.0) * 0.5;
        float _3133 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _978 = sqrt(((_954 * _954) + (_953 * _953)) + (_955 * _955)) / (_907 + 9.9999997473787516355514526367188e-06);
        float _3144 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _3144 : (isnan(_3144) ? 1.0 : min(_3144, 1.0));
        float _980 = _979 * 2.0;
        float _984 = (1.0 - _979) / (_979 + 1.0);
        float _3155 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _985 = isnan(1.0) ? _3155 : (isnan(_3155) ? 1.0 : min(_3155, 1.0));
        float _994 = ((((1.0 - _985) * (_980 + 2.0)) * exp2(log2(isnan(1.0) ? _3133 : (isnan(_3133) ? 1.0 : min(_3133, 1.0))) * (_980 + 1.0))) + _985) * _907;
        float _995 = _875 * 0.5;
        float _996 = _885 * 0.5;
        float _997 = _895 * 0.5;
        float _998 = dot(vec3(_995, _996, _997), vec3(_995, _996, _997));
        float _1003 = (_998 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_998);
        float _1011 = (dot(vec3(0.0), vec3(_1003 * _995, _1003 * _996, _1003 * _997)) + 1.0) * 0.5;
        float _3166 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1020 = sqrt(((_996 * _996) + (_995 * _995)) + (_997 * _997)) / (_908 + 9.9999997473787516355514526367188e-06);
        float _3177 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1021 = isnan(1.0) ? _3177 : (isnan(_3177) ? 1.0 : min(_3177, 1.0));
        float _1022 = _1021 * 2.0;
        float _1026 = (1.0 - _1021) / (_1021 + 1.0);
        float _3188 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3188 : (isnan(_3188) ? 1.0 : min(_3188, 1.0));
        float _1036 = ((((1.0 - _1027) * (_1022 + 2.0)) * exp2(log2(isnan(1.0) ? _3166 : (isnan(_3166) ? 1.0 : min(_3166, 1.0))) * (_1022 + 1.0))) + _1027) * _908;
        _1044 = _875;
        _1046 = _874;
        _1047 = _873;
        _1048 = _885;
        _1049 = _884;
        _1050 = _883;
        _1051 = _895;
        _1052 = _894;
        _1053 = _893;
        _1054 = _908;
        _1055 = _907;
        _1056 = _906;
        _1057 = cbModelParam._m0[36u].z * (isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0)));
        _1058 = cbModelParam._m0[36u].z * (isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0)));
        _1059 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0)));
    }
    else
    {
        _1044 = _1045;
        _1046 = _1045;
        _1047 = _1045;
        _1048 = _1045;
        _1049 = _1045;
        _1050 = _1045;
        _1051 = _1045;
        _1052 = _1045;
        _1053 = _1045;
        _1054 = _1045;
        _1055 = _1045;
        _1056 = _1045;
        _1057 = 0.0;
        _1058 = 0.0;
        _1059 = 0.0;
    }
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1113 = (cbModelParam._m0[38u].x * ((((fma(_776, cbModelParam._m0[30u].z, fma(_772, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _768)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1114 = (cbModelParam._m0[38u].y * ((((fma(_776, cbModelParam._m0[31u].z, fma(_772, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _768)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1115 = (((((fma(_776, cbModelParam._m0[32u].z, fma(_772, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _768)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1117 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1113, _1114, _1115), 0.0);
        vec4 _1124 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1113, _1114, _1115), 0.0);
        vec4 _1131 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1113, _1114, _1115), 0.0);
        vec4 _1138 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1113, _1114, _1115), 0.0);
        float _1150 = exp2((_1117.w + (-0.5)) * 20.0) * 2.0;
        float _1151 = _1150 * (_1117.x + (-0.5));
        float _1152 = _1150 * (_1117.y + (-0.5));
        float _1153 = _1150 * (_1117.z + (-0.5));
        float _1160 = exp2((_1124.w + (-0.5)) * 20.0) * 2.0;
        float _1161 = _1160 * (_1124.x + (-0.5));
        float _1162 = _1160 * (_1124.y + (-0.5));
        float _1163 = _1160 * (_1124.z + (-0.5));
        float _1170 = exp2((_1131.w + (-0.5)) * 20.0) * 2.0;
        float _1171 = _1170 * (_1131.x + (-0.5));
        float _1172 = _1170 * (_1131.y + (-0.5));
        float _1173 = _1170 * (_1131.z + (-0.5));
        float _1180 = exp2((_1138.w + (-0.5)) * 20.0) * 2.0;
        float _1181 = _1180 * (_1138.x + (-0.5));
        float _1182 = _1180 * (_1138.y + (-0.5));
        float _1183 = _1180 * (_1138.z + (-0.5));
        float _1184 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1185 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1186 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1187 = _1151 * 0.5;
        float _1188 = _1161 * 0.5;
        float _1189 = _1171 * 0.5;
        float _1190 = dot(vec3(_1187, _1188, _1189), vec3(_1187, _1188, _1189));
        float _1195 = (_1190 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1190);
        float _1203 = (dot(vec3(0.0), vec3(_1195 * _1187, _1195 * _1188, _1195 * _1189)) + 1.0) * 0.5;
        float _3229 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1212 = sqrt(((_1188 * _1188) + (_1187 * _1187)) + (_1189 * _1189)) / (_1184 + 9.9999997473787516355514526367188e-06);
        float _3240 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3240 : (isnan(_3240) ? 1.0 : min(_3240, 1.0));
        float _1214 = _1213 * 2.0;
        float _1218 = (1.0 - _1213) / (_1213 + 1.0);
        float _3251 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1219 = isnan(1.0) ? _3251 : (isnan(_3251) ? 1.0 : min(_3251, 1.0));
        float _1228 = ((((1.0 - _1219) * (_1214 + 2.0)) * exp2(log2(isnan(1.0) ? _3229 : (isnan(_3229) ? 1.0 : min(_3229, 1.0))) * (_1214 + 1.0))) + _1219) * _1184;
        float _1229 = _1152 * 0.5;
        float _1230 = _1162 * 0.5;
        float _1231 = _1172 * 0.5;
        float _1232 = dot(vec3(_1229, _1230, _1231), vec3(_1229, _1230, _1231));
        float _1237 = (_1232 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1232);
        float _1245 = (dot(vec3(0.0), vec3(_1237 * _1229, _1237 * _1230, _1237 * _1231)) + 1.0) * 0.5;
        float _3262 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1254 = sqrt(((_1230 * _1230) + (_1229 * _1229)) + (_1231 * _1231)) / (_1185 + 9.9999997473787516355514526367188e-06);
        float _3273 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3273 : (isnan(_3273) ? 1.0 : min(_3273, 1.0));
        float _1256 = _1255 * 2.0;
        float _1260 = (1.0 - _1255) / (_1255 + 1.0);
        float _3284 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
        float _1261 = isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0));
        float _1270 = ((((1.0 - _1261) * (_1256 + 2.0)) * exp2(log2(isnan(1.0) ? _3262 : (isnan(_3262) ? 1.0 : min(_3262, 1.0))) * (_1256 + 1.0))) + _1261) * _1185;
        float _1271 = _1153 * 0.5;
        float _1272 = _1163 * 0.5;
        float _1273 = _1173 * 0.5;
        float _1274 = dot(vec3(_1271, _1272, _1273), vec3(_1271, _1272, _1273));
        float _1279 = (_1274 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1274);
        float _1287 = (dot(vec3(0.0), vec3(_1279 * _1271, _1279 * _1272, _1279 * _1273)) + 1.0) * 0.5;
        float _3295 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1296 = sqrt(((_1272 * _1272) + (_1271 * _1271)) + (_1273 * _1273)) / (_1186 + 9.9999997473787516355514526367188e-06);
        float _3306 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _3306 : (isnan(_3306) ? 1.0 : min(_3306, 1.0));
        float _1298 = _1297 * 2.0;
        float _1302 = (1.0 - _1297) / (_1297 + 1.0);
        float _3317 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0));
        float _1312 = ((((1.0 - _1303) * (_1298 + 2.0)) * exp2(log2(isnan(1.0) ? _3295 : (isnan(_3295) ? 1.0 : min(_3295, 1.0))) * (_1298 + 1.0))) + _1303) * _1186;
        _1320 = _1153;
        _1321 = _1152;
        _1322 = _1151;
        _1323 = _1163;
        _1324 = _1162;
        _1325 = _1161;
        _1326 = _1173;
        _1327 = _1172;
        _1328 = _1171;
        _1329 = _1186;
        _1330 = _1185;
        _1331 = _1184;
        _1332 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1228 : (isnan(_1228) ? 0.0 : max(_1228, 0.0)));
        _1333 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0)));
        _1334 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)));
    }
    else
    {
        _1320 = _1045;
        _1321 = _1045;
        _1322 = _1045;
        _1323 = _1045;
        _1324 = _1045;
        _1325 = _1045;
        _1326 = _1045;
        _1327 = _1045;
        _1328 = _1045;
        _1329 = _1045;
        _1330 = _1045;
        _1331 = _1045;
        _1332 = 0.0;
        _1333 = 0.0;
        _1334 = 0.0;
    }
    float _1344 = (cbModelParam._m0[1u].x * (_1332 - _1057)) + _1057;
    float _1345 = (cbModelParam._m0[1u].x * (_1333 - _1058)) + _1058;
    float _1346 = (cbModelParam._m0[1u].x * (_1334 - _1059)) + _1059;
    float _1367 = fma(_1346, cbSceneParam._m0[89u].z, fma(_1345, cbSceneParam._m0[89u].y, _1344 * cbSceneParam._m0[89u].x));
    float _1370 = fma(_1346, cbSceneParam._m0[90u].z, fma(_1345, cbSceneParam._m0[90u].y, _1344 * cbSceneParam._m0[90u].x));
    float _1373 = fma(_1346, cbSceneParam._m0[91u].z, fma(_1345, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1344));
    float _1388 = _695 * (-0.5);
    float _1389 = _696 * (-0.5);
    float _1390 = _697 * (-0.5);
    float _1391 = dot(vec4(_1388, _1389, _1390, 1.0), vec4(_1322, _1325, _1328, _1331));
    float _1394 = dot(vec4(_1388, _1389, _1390, 1.0), vec4(_1321, _1324, _1327, _1330));
    float _1397 = dot(vec4(_1388, _1389, _1390, 1.0), vec4(_1320, _1323, _1326, _1329));
    float _1431;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1404 = dot(vec4(_1388, _1389, _1390, 1.0), vec4(_1044, _1048, _1051, _1054));
        float _1408 = dot(vec4(_1388, _1389, _1390, 1.0), vec4(_1046, _1049, _1052, _1055));
        float _1412 = dot(vec4(_1388, _1389, _1390, 1.0), vec4(_1047, _1050, _1053, _1056));
        float _1419 = dot(vec4(cbModelParam._m0[39u]), vec4(_1388, _1389, _1390, 1.0));
        _1431 = dot(vec3(isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0)), isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0)), isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1419) ? 0.0 : (isnan(0.0) ? _1419 : max(0.0, _1419))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1431 = 1.0;
    }
    float _1442;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1433 = dot(vec4(cbModelParam._m0[40u]), vec4(_1388, _1389, _1390, 1.0));
        _1442 = dot(vec3(isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)), isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0)), isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1433) ? 0.0 : (isnan(0.0) ? _1433 : max(0.0, _1433))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1442 = 1.0;
    }
    float _1446 = (_1442 * cbModelParam._m0[1u].x) + (_1431 * (1.0 - cbModelParam._m0[1u].x));
    float _1455 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1537;
    float _1539;
    float _1541;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1504 = fma(_776, cbModelParam._m0[13u].z, fma(_772, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _768)) + cbModelParam._m0[13u].w;
        float _1508 = fma(_776, cbModelParam._m0[14u].z, fma(_772, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _768)) + cbModelParam._m0[14u].w;
        float _1512 = fma(_776, cbModelParam._m0[15u].z, fma(_772, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _768)) + cbModelParam._m0[15u].w;
        float _1515 = fma(_746, cbModelParam._m0[13u].z, fma(_745, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _744));
        float _1518 = fma(_746, cbModelParam._m0[14u].z, fma(_745, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _744));
        float _1521 = fma(_746, cbModelParam._m0[15u].z, fma(_745, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _744));
        float _1547;
        if (_1515 > 0.0)
        {
            _1547 = abs((1.0 - _1504) / _1515);
        }
        else
        {
            float frontier_phi_54_52_ladder;
            if (_1515 < 0.0)
            {
                frontier_phi_54_52_ladder = abs((_1504 + 1.0) / _1515);
            }
            else
            {
                frontier_phi_54_52_ladder = 5000.0;
            }
            _1547 = frontier_phi_54_52_ladder;
        }
        float _1843;
        if (_1518 > 0.0)
        {
            _1843 = abs((1.0 - _1508) / _1518);
        }
        else
        {
            float frontier_phi_63_59_ladder;
            if (_1518 < 0.0)
            {
                frontier_phi_63_59_ladder = abs((_1508 + 1.0) / _1518);
            }
            else
            {
                frontier_phi_63_59_ladder = 5000.0;
            }
            _1843 = frontier_phi_63_59_ladder;
        }
        float _2145;
        if (_1521 > 0.0)
        {
            _2145 = abs((1.0 - _1512) / _1521);
        }
        else
        {
            float frontier_phi_77_70_ladder;
            if (_1521 < 0.0)
            {
                frontier_phi_77_70_ladder = abs((_1512 + 1.0) / _1521);
            }
            else
            {
                frontier_phi_77_70_ladder = 5000.0;
            }
            _2145 = frontier_phi_77_70_ladder;
        }
        float _2147 = isnan(_1843) ? _1547 : (isnan(_1547) ? _1843 : min(_1547, _1843));
        float _2148 = isnan(_2145) ? _2147 : (isnan(_2147) ? _2145 : min(_2147, _2145));
        float _2152 = (_2148 * _1515) + _1504;
        float _2153 = (_2148 * _1518) + _1508;
        float _2154 = (_2148 * _1521) + _1512;
        float _2155 = _2148 * 9.9999997473787516355514526367188e-05;
        float _2156 = (-1.0) - _2155;
        float _2158 = _2155 + 1.0;
        float frontier_phi_53_77_ladder;
        float frontier_phi_53_77_ladder_1;
        float frontier_phi_53_77_ladder_2;
        if ((_2154 > _2158) || ((_2154 < _2156) || ((_2153 > _2158) || ((_2153 < _2156) || ((_2152 < _2156) || (_2152 > _2158))))))
        {
            frontier_phi_53_77_ladder = 0.0;
            frontier_phi_53_77_ladder_1 = 0.0;
            frontier_phi_53_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2277 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2154, cbModelParam._m0[9u].z, fma(_2153, cbModelParam._m0[9u].y, _2152 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2154, cbModelParam._m0[10u].z, fma(_2153, cbModelParam._m0[10u].y, _2152 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2154, cbModelParam._m0[11u].z, fma(_2153, cbModelParam._m0[11u].y, _2152 * cbModelParam._m0[11u].x))), _1455);
            frontier_phi_53_77_ladder = _2277.x * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_1 = _2277.y * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_2 = _2277.z * cbModelParam._m0[1u].y;
        }
        _1537 = frontier_phi_53_77_ladder;
        _1539 = frontier_phi_53_77_ladder_1;
        _1541 = frontier_phi_53_77_ladder_2;
    }
    else
    {
        vec4 _1525 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_744, _745, _746), _1455);
        _1537 = _1525.x * cbModelParam._m0[1u].y;
        _1539 = _1525.y * cbModelParam._m0[1u].y;
        _1541 = _1525.z * cbModelParam._m0[1u].y;
    }
    float _1544 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1632;
    float _1634;
    float _1636;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1596 = fma(_776, cbModelParam._m0[21u].z, fma(_772, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _768)) + cbModelParam._m0[21u].w;
        float _1600 = fma(_776, cbModelParam._m0[22u].z, fma(_772, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _768)) + cbModelParam._m0[22u].w;
        float _1604 = fma(_776, cbModelParam._m0[23u].z, fma(_772, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _768)) + cbModelParam._m0[23u].w;
        float _1607 = fma(_746, cbModelParam._m0[21u].z, fma(_745, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _744));
        float _1610 = fma(_746, cbModelParam._m0[22u].z, fma(_745, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _744));
        float _1613 = fma(_746, cbModelParam._m0[23u].z, fma(_745, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _744));
        float _1848;
        if (_1607 > 0.0)
        {
            _1848 = abs((1.0 - _1596) / _1607);
        }
        else
        {
            float frontier_phi_65_61_ladder;
            if (_1607 < 0.0)
            {
                frontier_phi_65_61_ladder = abs((_1596 + 1.0) / _1607);
            }
            else
            {
                frontier_phi_65_61_ladder = 5000.0;
            }
            _1848 = frontier_phi_65_61_ladder;
        }
        float _2171;
        if (_1610 > 0.0)
        {
            _2171 = abs((1.0 - _1600) / _1610);
        }
        else
        {
            float frontier_phi_79_72_ladder;
            if (_1610 < 0.0)
            {
                frontier_phi_79_72_ladder = abs((_1600 + 1.0) / _1610);
            }
            else
            {
                frontier_phi_79_72_ladder = 5000.0;
            }
            _2171 = frontier_phi_79_72_ladder;
        }
        float _2337;
        if (_1613 > 0.0)
        {
            _2337 = abs((1.0 - _1604) / _1613);
        }
        else
        {
            float frontier_phi_93_88_ladder;
            if (_1613 < 0.0)
            {
                frontier_phi_93_88_ladder = abs((_1604 + 1.0) / _1613);
            }
            else
            {
                frontier_phi_93_88_ladder = 5000.0;
            }
            _2337 = frontier_phi_93_88_ladder;
        }
        float _2339 = isnan(_2171) ? _1848 : (isnan(_1848) ? _2171 : min(_1848, _2171));
        float _2340 = isnan(_2337) ? _2339 : (isnan(_2339) ? _2337 : min(_2339, _2337));
        float _2344 = (_2340 * _1607) + _1596;
        float _2345 = (_2340 * _1610) + _1600;
        float _2346 = (_2340 * _1613) + _1604;
        float _2347 = _2340 * 9.9999997473787516355514526367188e-05;
        float _2348 = (-1.0) - _2347;
        float _2350 = _2347 + 1.0;
        float frontier_phi_62_93_ladder;
        float frontier_phi_62_93_ladder_1;
        float frontier_phi_62_93_ladder_2;
        if ((_2346 > _2350) || ((_2346 < _2348) || ((_2345 > _2350) || ((_2345 < _2348) || ((_2344 < _2348) || (_2344 > _2350))))))
        {
            frontier_phi_62_93_ladder = 0.0;
            frontier_phi_62_93_ladder_1 = 0.0;
            frontier_phi_62_93_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2529 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2346, cbModelParam._m0[17u].z, fma(_2345, cbModelParam._m0[17u].y, _2344 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2346, cbModelParam._m0[18u].z, fma(_2345, cbModelParam._m0[18u].y, _2344 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2346, cbModelParam._m0[19u].z, fma(_2345, cbModelParam._m0[19u].y, _2344 * cbModelParam._m0[19u].x))), _1544);
            frontier_phi_62_93_ladder = _2529.z * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_1 = _2529.y * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_2 = _2529.x * cbModelParam._m0[1u].z;
        }
        _1632 = frontier_phi_62_93_ladder_2;
        _1634 = frontier_phi_62_93_ladder_1;
        _1636 = frontier_phi_62_93_ladder;
    }
    else
    {
        vec4 _1616 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_744, _745, _746), _1544);
        _1632 = _1616.x * cbModelParam._m0[1u].z;
        _1634 = _1616.y * cbModelParam._m0[1u].z;
        _1636 = _1616.z * cbModelParam._m0[1u].z;
    }
    float _1648 = _743 * 0.01200000010430812835693359375;
    float _1650 = _1648 * ((cbModelParam._m0[1u].w * (_1632 - _1537)) + _1537);
    float _1651 = _1648 * ((cbModelParam._m0[1u].w * (_1634 - _1539)) + _1539);
    float _1652 = _1648 * ((cbModelParam._m0[1u].w * (_1636 - _1541)) + _1541);
    float _1655 = fma(_1652, cbSceneParam._m0[89u].z, fma(_1651, cbSceneParam._m0[89u].y, _1650 * cbSceneParam._m0[89u].x));
    float _1658 = fma(_1652, cbSceneParam._m0[90u].z, fma(_1651, cbSceneParam._m0[90u].y, _1650 * cbSceneParam._m0[90u].x));
    float _1661 = fma(_1652, cbSceneParam._m0[91u].z, fma(_1651, cbSceneParam._m0[91u].y, _1650 * cbSceneParam._m0[91u].x));
    uvec4 _1671 = floatBitsToUint(cbInstanceData._m0[_717 + 5u]);
    uint _1673 = _1671.x * 14u;
    uint _1674 = _1673 + 13u;
    float _1679 = _743 + (-1.0);
    float _1682 = (cbLight._m0[_1674].x * _1679) + 1.0;
    float _1683 = (cbLight._m0[_1674].y * _1679) + 1.0;
    uint _1684 = _1673 + 5u;
    float _1690 = isnan(1.0) ? _1683 : (isnan(_1683) ? 1.0 : min(_1683, 1.0));
    uint _1694 = _1673 + 4u;
    float _1701 = isnan(1.0) ? _1682 : (isnan(_1682) ? 1.0 : min(_1682, 1.0));
    uint _1705 = _1673 | 1u;
    float _1716 = dot(vec3(cbLight._m0[_1673].xyz), vec3(0.0));
    float _1719 = dot(vec3(cbLight._m0[_1705].xyz), vec3(0.0));
    float _3453 = isnan(0.0) ? _1716 : (isnan(_1716) ? 0.0 : max(_1716, 0.0));
    float _3464 = isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0));
    float _1724 = (isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0))) * 0.3183098733425140380859375;
    float _1726 = (isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0))) * 0.3183098733425140380859375;
    float _1733 = ((cbLight._m0[_1684].x * _1690) * _1726) + ((cbLight._m0[_1694].x * _1701) * _1724);
    float _1734 = ((_1690 * cbLight._m0[_1684].y) * _1726) + ((_1701 * cbLight._m0[_1694].y) * _1724);
    float _1735 = ((_1690 * cbLight._m0[_1684].z) * _1726) + ((_1701 * cbLight._m0[_1694].z) * _1724);
    uint _1736 = _1673 + 8u;
    float _1742 = cbLight._m0[_1673].x + _695;
    float _1743 = cbLight._m0[_1673].y + _696;
    float _1744 = cbLight._m0[_1673].z + _697;
    float _1748 = inversesqrt(dot(vec3(_1742, _1743, _1744), vec3(_1742, _1743, _1744)));
    float _1752 = dot(vec3(0.0), vec3(cbLight._m0[_1673].xyz));
    float _3475 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
    float _1755 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
    float _1756 = dot(vec3(0.0), vec3(_695, _696, _697));
    float _3486 = isnan(0.0) ? _1756 : (isnan(_1756) ? 0.0 : max(_1756, 0.0));
    float _1759 = isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0));
    float _1760 = dot(vec3(cbLight._m0[_1673].xyz), vec3(_1742 * _1748, _1743 * _1748, _1744 * _1748));
    float _3497 = isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0));
    float _1771 = (exp2(log2(1.0 - (isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1777 = (0.5 / ((_1755 + 9.9999999392252902907785028219223e-09) + _1759)) * _1755;
    float _3508 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
    float _1779 = (isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0))) * 0.31831014156341552734375;
    uint _1790 = _1673 + 9u;
    float _1796 = cbLight._m0[_1705].x + _695;
    float _1797 = cbLight._m0[_1705].y + _696;
    float _1798 = cbLight._m0[_1705].z + _697;
    float _1802 = inversesqrt(dot(vec3(_1796, _1797, _1798), vec3(_1796, _1797, _1798)));
    float _1806 = dot(vec3(0.0), vec3(cbLight._m0[_1705].xyz));
    float _3519 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0));
    float _1809 = isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0));
    float _1810 = dot(vec3(cbLight._m0[_1705].xyz), vec3(_1796 * _1802, _1797 * _1802, _1798 * _1802));
    float _3530 = isnan(0.0) ? _1810 : (isnan(_1810) ? 0.0 : max(_1810, 0.0));
    float _1819 = (exp2(log2(1.0 - (isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1823 = (0.5 / ((_1809 + 9.9999999392252902907785028219223e-09) + _1759)) * _1809;
    float _3541 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
    float _1825 = (isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0))) * 0.31831014156341552734375;
    float _1835 = (((_1819 * cbLight._m0[_1790].x) * _1825) * _1690) + (((_1771 * cbLight._m0[_1736].x) * _1779) * _1701);
    float _1836 = (((_1819 * cbLight._m0[_1790].y) * _1825) * _1690) + (((_1771 * cbLight._m0[_1736].y) * _1779) * _1701);
    float _1837 = (((_1819 * cbLight._m0[_1790].z) * _1825) * _1690) + (((_1771 * cbLight._m0[_1736].z) * _1779) * _1701);
    float _1953;
    float _1955;
    float _1957;
    float _1959;
    float _1961;
    float _1963;
    if (_1671.y == 0u)
    {
        float _1893 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1894 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1893;
        float _1895 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1893;
        float _1896 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1893;
        uvec4 _1908 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1909 = _1908.x;
        uint _1920 = uint((float(_1908.y) * floor(float(uint(cbSceneParam._m0[85u].y * _704) / _1909))) + floor(float(uint(cbSceneParam._m0[85u].x * _703) / _1909)));
        float _1930 = (log2(_1896 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1931 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
        uint _1934 = uint(isnan(14.0) ? _1931 : (isnan(_1931) ? 14.0 : min(_1931, 14.0)));
        uvec4 _1939 = texelFetch(g_lightClusterGridBuffer, int(((_1934 << 2u) + (_1920 << 6u)) >> 2u));
        uint _1940 = _1939.x;
        uint _1941 = _1908.z;
        float _2031;
        float _2033;
        float _2035;
        float _2037;
        float _2039;
        float _2041;
        if (((((1u << ((_1941 >> 4u) & 15u)) + 4294967295u) & _1940) == 0u) || ((_1941 & 240u) == 0u))
        {
            _2031 = 0.0;
            _2033 = 0.0;
            _2035 = 0.0;
            _2037 = 0.0;
            _2039 = 0.0;
            _2041 = 0.0;
        }
        else
        {
            float _2032;
            float _2034;
            float _2036;
            float _2038;
            float _2040;
            float _2042;
            float _2205 = 0.0;
            float _2206 = 0.0;
            float _2207 = 0.0;
            float _2208 = 0.0;
            float _2209 = 0.0;
            float _2210 = 0.0;
            uint _2211 = 0u;
            uint _2220;
            bool _2221;
            for (;;)
            {
                _2220 = texelFetch(g_lightClassification, int((((_1934 << 5u) + (_1920 << 9u)) + (_2211 << 2u)) >> 2u)).x;
                _2221 = _2220 == 0u;
                float frontier_phi_90_pred;
                float frontier_phi_90_pred_1;
                float frontier_phi_90_pred_2;
                float frontier_phi_90_pred_3;
                float frontier_phi_90_pred_4;
                float frontier_phi_90_pred_5;
                if (_2221)
                {
                    frontier_phi_90_pred = _2210;
                    frontier_phi_90_pred_1 = _2205;
                    frontier_phi_90_pred_2 = _2206;
                    frontier_phi_90_pred_3 = _2207;
                    frontier_phi_90_pred_4 = _2208;
                    frontier_phi_90_pred_5 = _2209;
                }
                else
                {
                    float _2380;
                    float _2381;
                    float _2382;
                    float _2383;
                    float _2384;
                    float _2385;
                    uint _2386;
                    _2380 = _2205;
                    _2381 = _2206;
                    _2382 = _2207;
                    _2383 = _2208;
                    _2384 = _2209;
                    _2385 = _2210;
                    _2386 = _2220;
                    float _2286;
                    float _2287;
                    float _2288;
                    float _2289;
                    float _2290;
                    float _2291;
                    for (;;)
                    {
                        uint _2390 = uint(findLSB(_2386)) + (_2211 << 5u);
                        uint _2387 = (_2386 + 4294967295u) & _2386;
                        uint _2392 = _2390 * 48u;
                        vec4 _2406 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2392)).x, texelFetch(g_PointLightRenderingBuffer, int(_2392 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2392 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2392 + 3u)).x));
                        uint _2412 = (_2390 * 48u) + 4u;
                        vec4 _2425 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2412)).x, texelFetch(g_PointLightRenderingBuffer, int(_2412 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2412 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2412 + 3u)).x));
                        uint _2431 = (_2390 * 48u) + 8u;
                        vec3 _2442 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2431)).x, texelFetch(g_PointLightRenderingBuffer, int(_2431 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2431 + 2u)).x));
                        float _2446 = _2406.x - _1894;
                        float _2447 = _2406.y - _1895;
                        float _2448 = _2406.z - _1896;
                        float _2449 = dot(vec3(_2446, _2447, _2448), vec3(_2446, _2447, _2448));
                        float _2452 = inversesqrt(_2449);
                        float _2461 = 1.0 - (_2449 * _2406.w);
                        float _3562 = isnan(0.0) ? _2461 : (isnan(_2461) ? 0.0 : max(_2461, 0.0));
                        float _2462 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
                        float _2463 = sqrt(_2449) * _2425.w;
                        float _2466 = 1.39999997615814208984375 / (_2463 + 1.39999997615814208984375);
                        float _2467 = _2466 * _2466;
                        float _2470 = ((1.0 - _2467) * dot(vec3(0.0), vec3(_2452 * _2446, _2452 * _2447, _2452 * _2448))) + _2467;
                        float _2473 = _2463 * _2463;
                        float _2477 = ((isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0))) * _2462) / ((_2473 * 0.699999988079071044921875) + 1.0);
                        float _2481 = (-0.0) - _1894;
                        float _2482 = (-0.0) - _1895;
                        float _2483 = (-0.0) - _1896;
                        float _2487 = inversesqrt(dot(vec3(_2481, _2482, _2483), vec3(_2481, _2482, _2483)));
                        float _2491 = dot(vec3(0.0), vec3(_2487 * _2481, _2487 * _2482, _2487 * _2483));
                        float _3578 = isnan(0.0) ? _2491 : (isnan(_2491) ? 0.0 : max(_2491, 0.0));
                        float _3589 = isnan(0.0) ? _2470 : (isnan(_2470) ? 0.0 : max(_2470, 0.0));
                        float _2495 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
                        float _2499 = (0.5 / (((isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0))) + 9.9999999392252902907785028219223e-09) + _2495)) * _2495;
                        float _3600 = isnan(0.0) ? _2499 : (isnan(_2499) ? 0.0 : max(_2499, 0.0));
                        float _2508 = (((isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0))) * 3.1415927410125732421875) / ((_2473 * 2.1991131305694580078125) + 3.141590118408203125)) * _2462;
                        _2289 = (_2477 * _2425.x) + _2383;
                        _2290 = (_2477 * _2425.y) + _2384;
                        _2291 = (_2477 * _2425.z) + _2385;
                        _2286 = (_2508 * _2442.x) + _2380;
                        _2287 = (_2508 * _2442.y) + _2381;
                        _2288 = (_2508 * _2442.z) + _2382;
                        if (_2387 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2380 = _2286;
                            _2381 = _2287;
                            _2382 = _2288;
                            _2383 = _2289;
                            _2384 = _2290;
                            _2385 = _2291;
                            _2386 = _2387;
                        }
                    }
                    frontier_phi_90_pred = _2291;
                    frontier_phi_90_pred_1 = _2286;
                    frontier_phi_90_pred_2 = _2287;
                    frontier_phi_90_pred_3 = _2288;
                    frontier_phi_90_pred_4 = _2289;
                    frontier_phi_90_pred_5 = _2290;
                }
                _2042 = frontier_phi_90_pred;
                _2032 = frontier_phi_90_pred_1;
                _2034 = frontier_phi_90_pred_2;
                _2036 = frontier_phi_90_pred_3;
                _2038 = frontier_phi_90_pred_4;
                _2040 = frontier_phi_90_pred_5;
                uint _2212 = _2211 + 1u;
                if (_2212 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2205 = _2032;
                    _2206 = _2034;
                    _2207 = _2036;
                    _2208 = _2038;
                    _2209 = _2040;
                    _2210 = _2042;
                    _2211 = _2212;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2031 = _2032;
            _2033 = _2034;
            _2035 = _2036;
            _2037 = _2038;
            _2039 = _2040;
            _2041 = _2042;
        }
        uvec4 _2045 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2046 = _2045.z;
        uint _2048 = (_2046 >> 8u) & 15u;
        float _2176;
        float _2178;
        float _2180;
        float _2182;
        float _2184;
        float _2186;
        if (((4294967295u << _2048) & _1940) == 0u)
        {
            _2176 = _2031;
            _2178 = _2033;
            _2180 = _2035;
            _2182 = _2037;
            _2184 = _2039;
            _2186 = _2041;
        }
        else
        {
            float _2201 = inversesqrt(dot(vec3(_1894, _1895, _1896), vec3(_1894, _1895, _1896)));
            float frontier_phi_81_82_ladder;
            float frontier_phi_81_82_ladder_1;
            float frontier_phi_81_82_ladder_2;
            float frontier_phi_81_82_ladder_3;
            float frontier_phi_81_82_ladder_4;
            float frontier_phi_81_82_ladder_5;
            if (_2048 < ((_2046 >> 12u) & 15u))
            {
                float _2177;
                float _2179;
                float _2181;
                float _2183;
                float _2185;
                float _2187;
                float _2363 = _2031;
                float _2364 = _2033;
                float _2365 = _2035;
                float _2366 = _2037;
                float _2367 = _2039;
                float _2368 = _2041;
                uint _2369 = _2048;
                uint _2378;
                bool _2379;
                for (;;)
                {
                    _2378 = texelFetch(g_lightClassification, int((((_1934 << 5u) + (_1920 << 9u)) + (_2369 << 2u)) >> 2u)).x;
                    _2379 = _2378 == 0u;
                    float frontier_phi_99_pred;
                    float frontier_phi_99_pred_1;
                    float frontier_phi_99_pred_2;
                    float frontier_phi_99_pred_3;
                    float frontier_phi_99_pred_4;
                    float frontier_phi_99_pred_5;
                    if (_2379)
                    {
                        frontier_phi_99_pred = _2366;
                        frontier_phi_99_pred_1 = _2365;
                        frontier_phi_99_pred_2 = _2364;
                        frontier_phi_99_pred_3 = _2363;
                        frontier_phi_99_pred_4 = _2368;
                        frontier_phi_99_pred_5 = _2367;
                    }
                    else
                    {
                        float _2534;
                        float _2535;
                        float _2536;
                        float _2537;
                        float _2538;
                        float _2539;
                        float _2783;
                        float _2784;
                        float _2785;
                        float _2786;
                        float _2787;
                        float _2788;
                        float _2547 = _2363;
                        float _2548 = _2364;
                        float _2549 = _2365;
                        float _2550 = _2366;
                        float _2551 = _2367;
                        float _2552 = _2368;
                        uint _2553 = _2378;
                        uint _2554;
                        vec4 _2579;
                        float _2580;
                        vec4 _2595;
                        vec3 _2607;
                        vec4 _2622;
                        vec4 _2637;
                        float _2683;
                        bool _2684;
                        for (;;)
                        {
                            uint _2564 = ((_2369 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2553));
                            _2554 = (_2553 + 4294967295u) & _2553;
                            uint _2566 = _2564 * 40u;
                            _2579 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2566)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2566 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2566 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2566 + 3u)).x));
                            _2580 = _2579.w;
                            uint _2582 = (_2564 * 40u) + 4u;
                            _2595 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2582)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2582 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2582 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2582 + 3u)).x));
                            uint _2597 = (_2564 * 40u) + 8u;
                            _2607 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2597)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2597 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2597 + 2u)).x));
                            uint _2609 = (_2564 * 40u) + 16u;
                            _2622 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2609)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2609 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2609 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2609 + 3u)).x));
                            uint _2624 = (_2564 * 40u) + 20u;
                            _2637 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2624)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2624 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2624 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2624 + 3u)).x));
                            uint _2639 = (_2564 * 40u) + 24u;
                            vec4 _2652 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2639)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2639 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2639 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2639 + 3u)).x));
                            uint _2658 = (_2564 * 40u) + 28u;
                            vec4 _2671 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2658)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2658 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2658 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2658 + 3u)).x));
                            _2683 = fma(_1896, _2671.z, fma(_1895, _2671.y, _2671.x * _1894)) + _2671.w;
                            _2684 = !((fma(_1896, _2652.z, fma(_1895, _2652.y, _2652.x * _1894)) + _2652.w) <= 0.0);
                            float frontier_phi_105_pred;
                            float frontier_phi_105_pred_1;
                            float frontier_phi_105_pred_2;
                            float frontier_phi_105_pred_3;
                            float frontier_phi_105_pred_4;
                            float frontier_phi_105_pred_5;
                            if (_2684)
                            {
                                float _2711 = _2579.x - _1894;
                                float _2712 = _2579.y - _1895;
                                float _2713 = _2579.z - _1896;
                                float _2714 = dot(vec3(_2711, _2712, _2713), vec3(_2711, _2712, _2713));
                                float _2717 = inversesqrt(_2714);
                                float _2718 = _2717 * _2711;
                                float _2719 = _2717 * _2712;
                                float _2720 = _2717 * _2713;
                                float _2724 = 1.0 - (_2714 / (_2580 * _2580));
                                float _3611 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0));
                                float _2725 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
                                float _2729 = sqrt(_2714) * _2595.w;
                                float _2731 = 1.39999997615814208984375 / (_2729 + 1.39999997615814208984375);
                                float _2732 = _2731 * _2731;
                                float _2733 = 1.0 - _2732;
                                float _2735 = (_2733 * dot(vec3(_2718, _2719, _2720), vec3(0.0))) + _2732;
                                float _2738 = _2729 * _2729;
                                float _2742 = (fma(_1896, _2622.z, fma(_1895, _2622.y, _2622.x * _1894)) + _2622.w) / _2683;
                                float _2743 = (fma(_1896, _2637.z, fma(_1895, _2637.y, _2637.x * _1894)) + _2637.w) / _2683;
                                float _2747 = 1.0 - dot(vec2(_2742, _2743), vec2(_2742, _2743));
                                float _3627 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
                                float _2748 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
                                float _2749 = _2748 * (((isnan(0.0) ? _2735 : (isnan(_2735) ? 0.0 : max(_2735, 0.0))) * _2725) / ((_2738 * 0.699999988079071044921875) + 1.0));
                                float _2759 = dot(vec3(0.0), vec3((-0.0) - (_1894 * _2201), (-0.0) - (_1895 * _2201), (-0.0) - (_1896 * _2201)));
                                float _3638 = isnan(0.0) ? _2759 : (isnan(_2759) ? 0.0 : max(_2759, 0.0));
                                float _2767 = (_2733 * dot(vec3(0.0), vec3(_2718, _2719, _2720))) + _2732;
                                float _3649 = isnan(0.0) ? _2767 : (isnan(_2767) ? 0.0 : max(_2767, 0.0));
                                float _2768 = isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0));
                                float _2772 = (0.5 / (((isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))) + 9.9999999392252902907785028219223e-09) + _2768)) * _2768;
                                float _3660 = isnan(0.0) ? _2772 : (isnan(_2772) ? 0.0 : max(_2772, 0.0));
                                float _2779 = (_2748 * _2725) * (((isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0))) * 3.1415927410125732421875) / ((_2738 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_105_pred = _2749 * _2595.z;
                                frontier_phi_105_pred_1 = _2779 * _2607.x;
                                frontier_phi_105_pred_2 = _2779 * _2607.y;
                                frontier_phi_105_pred_3 = _2779 * _2607.z;
                                frontier_phi_105_pred_4 = _2749 * _2595.x;
                                frontier_phi_105_pred_5 = _2749 * _2595.y;
                            }
                            else
                            {
                                frontier_phi_105_pred = 0.0;
                                frontier_phi_105_pred_1 = 0.0;
                                frontier_phi_105_pred_2 = 0.0;
                                frontier_phi_105_pred_3 = 0.0;
                                frontier_phi_105_pred_4 = 0.0;
                                frontier_phi_105_pred_5 = 0.0;
                            }
                            _2788 = frontier_phi_105_pred;
                            _2783 = frontier_phi_105_pred_1;
                            _2784 = frontier_phi_105_pred_2;
                            _2785 = frontier_phi_105_pred_3;
                            _2786 = frontier_phi_105_pred_4;
                            _2787 = frontier_phi_105_pred_5;
                            _2537 = _2786 + _2550;
                            _2538 = _2787 + _2551;
                            _2539 = _2788 + _2552;
                            _2534 = _2783 + _2547;
                            _2535 = _2784 + _2548;
                            _2536 = _2785 + _2549;
                            if (_2554 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2547 = _2534;
                                _2548 = _2535;
                                _2549 = _2536;
                                _2550 = _2537;
                                _2551 = _2538;
                                _2552 = _2539;
                                _2553 = _2554;
                                continue;
                            }
                        }
                        frontier_phi_99_pred = _2537;
                        frontier_phi_99_pred_1 = _2536;
                        frontier_phi_99_pred_2 = _2535;
                        frontier_phi_99_pred_3 = _2534;
                        frontier_phi_99_pred_4 = _2539;
                        frontier_phi_99_pred_5 = _2538;
                    }
                    _2183 = frontier_phi_99_pred;
                    _2181 = frontier_phi_99_pred_1;
                    _2179 = frontier_phi_99_pred_2;
                    _2177 = frontier_phi_99_pred_3;
                    _2187 = frontier_phi_99_pred_4;
                    _2185 = frontier_phi_99_pred_5;
                    uint _2370 = _2369 + 1u;
                    if (_2370 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2363 = _2177;
                        _2364 = _2179;
                        _2365 = _2181;
                        _2366 = _2183;
                        _2367 = _2185;
                        _2368 = _2187;
                        _2369 = _2370;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_81_82_ladder = _2187;
                frontier_phi_81_82_ladder_1 = _2183;
                frontier_phi_81_82_ladder_2 = _2181;
                frontier_phi_81_82_ladder_3 = _2179;
                frontier_phi_81_82_ladder_4 = _2177;
                frontier_phi_81_82_ladder_5 = _2185;
            }
            else
            {
                frontier_phi_81_82_ladder = _2041;
                frontier_phi_81_82_ladder_1 = _2037;
                frontier_phi_81_82_ladder_2 = _2035;
                frontier_phi_81_82_ladder_3 = _2033;
                frontier_phi_81_82_ladder_4 = _2031;
                frontier_phi_81_82_ladder_5 = _2039;
            }
            _2176 = frontier_phi_81_82_ladder_4;
            _2178 = frontier_phi_81_82_ladder_3;
            _2180 = frontier_phi_81_82_ladder_2;
            _2182 = frontier_phi_81_82_ladder_1;
            _2184 = frontier_phi_81_82_ladder_5;
            _2186 = frontier_phi_81_82_ladder;
        }
        float _2191 = isnan(1.0) ? _743 : (isnan(_743) ? 1.0 : min(_743, 1.0));
        _1953 = (_2191 * _2182) + _1733;
        _1955 = (_2191 * _2184) + _1734;
        _1957 = (_2191 * _2186) + _1735;
        _1959 = ((_2176 * 0.039999999105930328369140625) * _2191) + _1835;
        _1961 = ((_2178 * 0.039999999105930328369140625) * _2191) + _1836;
        _1963 = ((_2180 * 0.039999999105930328369140625) * _2191) + _1837;
    }
    else
    {
        _1953 = _1733;
        _1955 = _1734;
        _1957 = _1735;
        _1959 = _1835;
        _1961 = _1836;
        _1963 = _1837;
    }
    float _3676 = isnan(0.0) ? _729 : (isnan(_729) ? 0.0 : max(_729, 0.0));
    float _3687 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _3698 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _1980 = ((isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))) * (_1953 + ((isnan(0.0) ? _1367 : (isnan(_1367) ? 0.0 : max(_1367, 0.0))) * _743))) + ((_1959 + ((isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0))) * _1446)) * cbPerFrame._m0[3u].x);
    float _1981 = ((isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * (_1955 + ((isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0))) * _743))) + ((_1961 + ((isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0))) * _1446)) * cbPerFrame._m0[3u].x);
    float _1982 = ((isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))) * (_1957 + ((isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0))) * _743))) + ((_1963 + ((isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0))) * _1446)) * cbPerFrame._m0[3u].x);
    uint _1986 = _717 + 6u;
    float _1994 = _703 / cbSceneParam._m0[86u].x;
    float _1995 = _704 / cbSceneParam._m0[86u].y;
    vec4 _2009 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1994, _1995, (log2((isnan(cbSceneParam._m0[77u].w) ? _690 : (isnan(_690) ? cbSceneParam._m0[77u].w : min(_690, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2011 = _2009.x;
    float _2012 = _2009.y;
    float _2013 = _2009.z;
    float _2014 = _2009.w;
    float _2094;
    float _2096;
    float _2098;
    float _2100;
    if (_690 > cbSceneParam._m0[78u].w)
    {
        float _2056 = isnan(_690) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _690 : min(cbSceneParam._m0[80u].w, _690));
        float _2057 = _2056 / _690;
        float _2068 = _2057 * _263;
        float _2069 = _264 * _2057;
        float _2070 = (-0.0) - _2069;
        float _2071 = _2057 * _265;
        float _2073 = (cbSceneParam._m0[77u].w * _2070) / _2056;
        float _2074 = _2073 + cbSceneParam._m0[79u].w;
        float _2075 = cbSceneParam._m0[79u].w - _2069;
        float _2081 = sqrt(((_2068 * _2068) + (_2069 * _2069)) + (_2071 * _2071));
        float _2084 = (1.0 - (cbSceneParam._m0[77u].w / _2056)) * _2081;
        float _2090 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2092 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2299;
        if (abs((_2070 - _2073) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2299 = ((((_2074 > 0.0) ? exp2(_2090 * _2074) : (2.0 - exp2(_2092 * _2074))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2084;
        }
        else
        {
            float _2234 = 1.0 / cbSceneParam._m0[80u].x;
            float _2235 = isnan(_2075) ? _2074 : (isnan(_2074) ? _2075 : max(_2074, _2075));
            float _2236 = isnan(_2075) ? _2074 : (isnan(_2074) ? _2075 : min(_2074, _2075));
            float _2245 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : min(_2235, 0.0));
            float _2246 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : min(_2236, 0.0));
            _2299 = ((abs(_2081 / _2070) * cbSceneParam._m0[80u].y) * ((((_2245 - _2246) * 2.0) - ((exp2(_2090 * (isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0)))) - exp2(_2090 * (isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0))))) * _2234)) - ((exp2(_2092 * _2245) - exp2(_2092 * _2246)) * _2234))) + (_2084 * cbSceneParam._m0[80u].z);
        }
        vec4 _2301 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1994, _1995, 1.0), 0.0);
        float _2310 = exp2((_2299 * (-1.44269502162933349609375)) * (1.0 - _2301.w));
        float _2311 = log2(_2310);
        float _2327 = log2(_2014);
        _2094 = (exp2(_2327 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2311 * cbSceneParam._m0[78u].x)) * _2301.x) / cbSceneParam._m0[78u].x)) + _2011;
        _2096 = (exp2(_2327 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2311 * cbSceneParam._m0[78u].y)) * _2301.y) / cbSceneParam._m0[78u].y)) + _2012;
        _2098 = (exp2(_2327 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2311 * cbSceneParam._m0[78u].z)) * _2301.z) / cbSceneParam._m0[78u].z)) + _2013;
        _2100 = _2310 * _2014;
    }
    else
    {
        _2094 = _2011;
        _2096 = _2012;
        _2098 = _2013;
        _2100 = _2014;
    }
    float _2112 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2113 = _2112 == 3.0;
    float _2115 = log2(_2100);
    float _2122 = exp2(_2115 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _1980 : (isnan(_1980) ? 0.0 : max(_1980, 0.0)));
    float _2123 = exp2(_2115 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _1981 : (isnan(_1981) ? 0.0 : max(_1981, 0.0)));
    float _2124 = exp2(_2115 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _1982 : (isnan(_1982) ? 0.0 : max(_1982, 0.0)));
    float _2133 = (_2112 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2133 * (_2113 ? _2122 : (_2122 + (cbSceneParam._m0[72u].w * _2094)));
    SV_Target.y = _2133 * (_2113 ? _2123 : (_2123 + (cbSceneParam._m0[72u].w * _2096)));
    SV_Target.z = _2133 * (_2113 ? _2124 : (_2124 + (cbSceneParam._m0[72u].w * _2098)));
    SV_Target.w = cbInstanceData._m0[_1986].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1986].w;
}


