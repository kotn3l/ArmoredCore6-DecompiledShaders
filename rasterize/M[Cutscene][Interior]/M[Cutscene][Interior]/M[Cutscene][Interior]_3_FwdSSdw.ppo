#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 10) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_8;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _882;
uint _2046;
uint _2047;
uint _2048;
uint _2282;
uint _2283;
uint _2284;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _255 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _265 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _255);
    float _266 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _255);
    float _267 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _255);
    vec4 _286 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _321 = cbMtdParam._m0[24u].x + _265;
    float _322 = cbMtdParam._m0[24u].y + _266;
    float _323 = cbMtdParam._m0[24u].z + _267;
    float _337 = (-0.0) - dot(vec3(_321, _322, _323), vec3(_193 * _186, _193 * _187, _193 * _188));
    float _338 = (-0.0) - dot(vec3(_321, _322, _323), vec3(_207 * TANGENT.x, _207 * TANGENT.y, _207 * TANGENT.z));
    float _339 = (-0.0) - dot(vec3(_321, _322, _323), vec3((-0.0) - (_200 * NORMAL.x), (-0.0) - (_200 * NORMAL.y), (-0.0) - (_200 * NORMAL.z)));
    float _343 = inversesqrt(dot(vec3(_337, _338, _339), vec3(_337, _338, _339)));
    float _346 = _343 * _339;
    float _347 = (_343 * _337) + (((_286.x * 2.0) + (-1.0)) * cbMtdParam._m0[22u].x);
    float _348 = (_343 * _338) + (((_286.y * 2.0) + (-1.0)) * cbMtdParam._m0[22u].y);
    float _349 = _347 * cbMtdParam._m0[20u].w;
    float _350 = _348 * cbMtdParam._m0[20u].z;
    float _351 = fract(TEXCOORD.x);
    float _352 = fract(TEXCOORD.y);
    float _358;
    if (_349 > 0.0)
    {
        _358 = (1.0 - _351) / _349;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_349 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _351) / _349;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _358 = frontier_phi_3_2_ladder;
    }
    float _366;
    if (_350 > 0.0)
    {
        _366 = (1.0 - _352) / _350;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_350 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _352) / _350;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _366 = frontier_phi_7_6_ladder;
    }
    bool _368 = _346 > 0.0;
    float _370 = _368 ? (cbMtdParam._m0[16u].x / _346) : 5000.0;
    float _371 = isnan(_366) ? _358 : (isnan(_358) ? _366 : min(_358, _366));
    float _372 = isnan(_370) ? _371 : (isnan(_371) ? _370 : min(_371, _370));
    float _376 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _377 = _351 + (-0.5);
    float _380 = _352 + (-0.5);
    float _383 = ((_372 * _346) + _376) / _376;
    vec4 _408 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (((((_377 + (_372 * _349)) / _383) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (((((_380 + (_372 * _350)) / _383) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    float _418 = cbMtdParam._m0[9u].x * _408.x;
    float _419 = cbMtdParam._m0[9u].y * _408.y;
    float _420 = cbMtdParam._m0[9u].z * _408.z;
    float _439 = _347 * cbMtdParam._m0[22u].w;
    float _440 = _348 * cbMtdParam._m0[22u].z;
    bool _441 = _439 > 0.0;
    float _446;
    if (_441)
    {
        _446 = (1.0 - _351) / _439;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_439 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _351) / _439;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _446 = frontier_phi_11_10_ladder;
    }
    bool _448 = _440 > 0.0;
    float _453;
    if (_448)
    {
        _453 = (1.0 - _352) / _440;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_440 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _352) / _440;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _453 = frontier_phi_15_14_ladder;
    }
    float _456 = _368 ? (cbMtdParam._m0[18u].x / _346) : 5000.0;
    float _457 = isnan(_453) ? _446 : (isnan(_446) ? _453 : min(_446, _453));
    float _458 = isnan(_456) ? _457 : (isnan(_457) ? _456 : min(_457, _456));
    float _462 = cbMtdParam._m0[19u].y * cbMtdParam._m0[18u].x;
    float _466 = ((_458 * _346) + _462) / _462;
    float _471 = cbMtdParam._m0[19u].x - cbMtdParam._m0[20u].x * trunc(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    float _473 = floor(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    vec4 _489 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_377 + (_458 * _439)) / _466) + 0.5) + _471) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_380 + (_458 * _440)) / _466) + 0.5) + _473) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[0u].w));
    float _501;
    if (_441)
    {
        _501 = (1.0 - _351) / _439;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_439 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _351) / _439;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _501 = frontier_phi_19_18_ladder;
    }
    float _507;
    if (_448)
    {
        _507 = (1.0 - _352) / _440;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_440 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _352) / _440;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _507 = frontier_phi_23_22_ladder;
    }
    float _509 = isnan(_507) ? _501 : (isnan(_501) ? _507 : min(_501, _507));
    float _510 = isnan(_456) ? _509 : (isnan(_509) ? _456 : min(_509, _456));
    float _517 = ((_510 * _346) + _462) / _462;
    vec4 _537 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_377 + (_510 * _439)) / _517) + 0.5) + _471) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_380 + (_510 * _440)) / _517) + 0.5) + _473) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[8u].w));
    float _539 = _537.x;
    float _546 = (_539 * ((_489.x * cbMtdParam._m0[10u].x) - _418)) + _418;
    float _547 = (_539 * ((_489.y * cbMtdParam._m0[10u].y) - _419)) + _419;
    float _548 = (_539 * ((_489.z * cbMtdParam._m0[10u].z) - _420)) + _420;
    float _564 = _347 * cbMtdParam._m0[23u].y;
    float _565 = _348 * cbMtdParam._m0[23u].x;
    bool _566 = _564 > 0.0;
    float _571;
    if (_566)
    {
        _571 = (1.0 - _351) / _564;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_564 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _351) / _564;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _571 = frontier_phi_27_26_ladder;
    }
    bool _573 = _565 > 0.0;
    float _578;
    if (_573)
    {
        _578 = (1.0 - _352) / _565;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_565 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _352) / _565;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _578 = frontier_phi_31_30_ladder;
    }
    float _581 = _368 ? (cbMtdParam._m0[19u].w / _346) : 5000.0;
    float _582 = isnan(_578) ? _571 : (isnan(_571) ? _578 : min(_571, _578));
    float _583 = isnan(_581) ? _582 : (isnan(_582) ? _581 : min(_582, _581));
    float _587 = cbMtdParam._m0[19u].w * cbMtdParam._m0[16u].z;
    float _591 = ((_583 * _346) + _587) / _587;
    float _596 = cbMtdParam._m0[19u].z - cbMtdParam._m0[23u].z * trunc(cbMtdParam._m0[19u].z / cbMtdParam._m0[23u].z);
    float _598 = floor(cbMtdParam._m0[19u].z / cbMtdParam._m0[23u].z);
    vec4 _614 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * (((((_377 + (_583 * _564)) / _591) + 0.5) + _596) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * (((((_380 + (_583 * _565)) / _591) + 0.5) + _598) / cbMtdParam._m0[23u].w)) + cbTextureTilingScale._m0[9u].w));
    float _626;
    if (_566)
    {
        _626 = (1.0 - _351) / _564;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_564 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _351) / _564;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _626 = frontier_phi_35_34_ladder;
    }
    float _632;
    if (_573)
    {
        _632 = (1.0 - _352) / _565;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_565 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _352) / _565;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _632 = frontier_phi_39_38_ladder;
    }
    float _634 = isnan(_632) ? _626 : (isnan(_626) ? _632 : min(_626, _632));
    float _635 = isnan(_581) ? _634 : (isnan(_634) ? _581 : min(_634, _581));
    float _642 = ((_635 * _346) + _587) / _587;
    vec4 _662 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_377 + (_635 * _564)) / _642) + 0.5) + _596) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_380 + (_635 * _565)) / _642) + 0.5) + _598) / cbMtdParam._m0[23u].w)) + cbTextureTilingScale._m0[10u].w));
    float _664 = _662.x;
    float _689 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _693 = inversesqrt(dot(vec3(_265, _266, _267), vec3(_265, _266, _267)));
    float _694 = _265 * _693;
    float _695 = _266 * _693;
    float _696 = _267 * _693;
    float _702 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _703 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _712 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_702 * cbSceneParam._m0[86u].x, _703 * cbSceneParam._m0[86u].y));
    float _715 = _712.x * TEXCOORD_4.z;
    float _716 = (-0.0) - _694;
    float _717 = (-0.0) - _695;
    float _718 = (-0.0) - _696;
    float _740 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _744 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _748 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _881;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    float _893;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _804 = (cbModelParam._m0[37u].x * ((((fma(_748, cbModelParam._m0[26u].z, fma(_744, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _740)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _806 = (cbModelParam._m0[37u].y * ((((fma(_748, cbModelParam._m0[27u].z, fma(_744, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _740)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _807 = (((((fma(_748, cbModelParam._m0[28u].z, fma(_744, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _740)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _810 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_804, _806, _807), 0.0);
        vec4 _817 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_804, _806, _807), 0.0);
        vec4 _824 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_804, _806, _807), 0.0);
        vec4 _831 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_804, _806, _807), 0.0);
        float _844 = exp2((_810.w + (-0.5)) * 20.0) * 2.0;
        float _854 = exp2((_817.w + (-0.5)) * 20.0) * 2.0;
        float _864 = exp2((_824.w + (-0.5)) * 20.0) * 2.0;
        float _874 = exp2((_831.w + (-0.5)) * 20.0) * 2.0;
        float _875 = _874 * (_831.x + (-0.5));
        float _876 = _874 * (_831.y + (-0.5));
        float _877 = _874 * (_831.z + (-0.5));
        _881 = _844 * (_810.z + (-0.5));
        _883 = _844 * (_810.y + (-0.5));
        _884 = _844 * (_810.x + (-0.5));
        _885 = _854 * (_817.z + (-0.5));
        _886 = _854 * (_817.y + (-0.5));
        _887 = _854 * (_817.x + (-0.5));
        _888 = _864 * (_824.z + (-0.5));
        _889 = _864 * (_824.y + (-0.5));
        _890 = _864 * (_824.x + (-0.5));
        _891 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        _892 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
        _893 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    }
    else
    {
        _881 = _882;
        _883 = _882;
        _884 = _882;
        _885 = _882;
        _886 = _882;
        _887 = _882;
        _888 = _882;
        _889 = _882;
        _890 = _882;
        _891 = _882;
        _892 = _882;
        _893 = _882;
    }
    float _1021;
    float _1022;
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _947 = (cbModelParam._m0[38u].x * ((((fma(_748, cbModelParam._m0[30u].z, fma(_744, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _740)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _948 = (cbModelParam._m0[38u].y * ((((fma(_748, cbModelParam._m0[31u].z, fma(_744, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _740)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _949 = (((((fma(_748, cbModelParam._m0[32u].z, fma(_744, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _740)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _951 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        vec4 _958 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        vec4 _965 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        vec4 _972 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_947, _948, _949), 0.0);
        float _984 = exp2((_951.w + (-0.5)) * 20.0) * 2.0;
        float _994 = exp2((_958.w + (-0.5)) * 20.0) * 2.0;
        float _1004 = exp2((_965.w + (-0.5)) * 20.0) * 2.0;
        float _1014 = exp2((_972.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_972.x + (-0.5));
        float _1016 = _1014 * (_972.y + (-0.5));
        float _1017 = _1014 * (_972.z + (-0.5));
        _1021 = _984 * (_951.z + (-0.5));
        _1022 = _984 * (_951.y + (-0.5));
        _1023 = _984 * (_951.x + (-0.5));
        _1024 = _994 * (_958.z + (-0.5));
        _1025 = _994 * (_958.y + (-0.5));
        _1026 = _994 * (_958.x + (-0.5));
        _1027 = _1004 * (_965.z + (-0.5));
        _1028 = _1004 * (_965.y + (-0.5));
        _1029 = _1004 * (_965.x + (-0.5));
        _1030 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        _1031 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        _1032 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
    }
    else
    {
        _1021 = _882;
        _1022 = _882;
        _1023 = _882;
        _1024 = _882;
        _1025 = _882;
        _1026 = _882;
        _1027 = _882;
        _1028 = _882;
        _1029 = _882;
        _1030 = _882;
        _1031 = _882;
        _1032 = _882;
    }
    float _1047 = _694 * (-0.5);
    float _1048 = _695 * (-0.5);
    float _1049 = _696 * (-0.5);
    float _1050 = dot(vec4(_1047, _1048, _1049, 1.0), vec4(_1023, _1026, _1029, _1032));
    float _1053 = dot(vec4(_1047, _1048, _1049, 1.0), vec4(_1022, _1025, _1028, _1031));
    float _1056 = dot(vec4(_1047, _1048, _1049, 1.0), vec4(_1021, _1024, _1027, _1030));
    float _1091;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1063 = dot(vec4(_1047, _1048, _1049, 1.0), vec4(_881, _885, _888, _891));
        float _1067 = dot(vec4(_1047, _1048, _1049, 1.0), vec4(_883, _886, _889, _892));
        float _1071 = dot(vec4(_1047, _1048, _1049, 1.0), vec4(_884, _887, _890, _893));
        float _1078 = dot(vec4(cbModelParam._m0[39u]), vec4(_1047, _1048, _1049, 1.0));
        _1091 = dot(vec3(isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0)), isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0)), isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1078) ? 0.0 : (isnan(0.0) ? _1078 : max(0.0, _1078))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1091 = 1.0;
    }
    float _1102;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1093 = dot(vec4(cbModelParam._m0[40u]), vec4(_1047, _1048, _1049, 1.0));
        _1102 = dot(vec3(isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0)), isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0)), isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1093) ? 0.0 : (isnan(0.0) ? _1093 : max(0.0, _1093))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1102 = 1.0;
    }
    float _1106 = (_1102 * cbModelParam._m0[1u].x) + (_1091 * (1.0 - cbModelParam._m0[1u].x));
    float _1112 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1195;
    float _1197;
    float _1199;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1162 = fma(_748, cbModelParam._m0[13u].z, fma(_744, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _740)) + cbModelParam._m0[13u].w;
        float _1166 = fma(_748, cbModelParam._m0[14u].z, fma(_744, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _740)) + cbModelParam._m0[14u].w;
        float _1170 = fma(_748, cbModelParam._m0[15u].z, fma(_744, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _740)) + cbModelParam._m0[15u].w;
        float _1173 = fma(_718, cbModelParam._m0[13u].z, fma(_717, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _716));
        float _1176 = fma(_718, cbModelParam._m0[14u].z, fma(_717, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _716));
        float _1179 = fma(_718, cbModelParam._m0[15u].z, fma(_717, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _716));
        float _1205;
        if (_1173 > 0.0)
        {
            _1205 = abs((1.0 - _1162) / _1173);
        }
        else
        {
            float frontier_phi_54_52_ladder;
            if (_1173 < 0.0)
            {
                frontier_phi_54_52_ladder = abs((_1162 + 1.0) / _1173);
            }
            else
            {
                frontier_phi_54_52_ladder = 5000.0;
            }
            _1205 = frontier_phi_54_52_ladder;
        }
        float _1503;
        if (_1176 > 0.0)
        {
            _1503 = abs((1.0 - _1166) / _1176);
        }
        else
        {
            float frontier_phi_63_59_ladder;
            if (_1176 < 0.0)
            {
                frontier_phi_63_59_ladder = abs((_1166 + 1.0) / _1176);
            }
            else
            {
                frontier_phi_63_59_ladder = 5000.0;
            }
            _1503 = frontier_phi_63_59_ladder;
        }
        float _1799;
        if (_1179 > 0.0)
        {
            _1799 = abs((1.0 - _1170) / _1179);
        }
        else
        {
            float frontier_phi_77_70_ladder;
            if (_1179 < 0.0)
            {
                frontier_phi_77_70_ladder = abs((_1170 + 1.0) / _1179);
            }
            else
            {
                frontier_phi_77_70_ladder = 5000.0;
            }
            _1799 = frontier_phi_77_70_ladder;
        }
        float _1801 = isnan(_1503) ? _1205 : (isnan(_1205) ? _1503 : min(_1205, _1503));
        float _1802 = isnan(_1799) ? _1801 : (isnan(_1801) ? _1799 : min(_1801, _1799));
        float _1806 = (_1802 * _1173) + _1162;
        float _1807 = (_1802 * _1176) + _1166;
        float _1808 = (_1802 * _1179) + _1170;
        float _1809 = _1802 * 9.9999997473787516355514526367188e-05;
        float _1810 = (-1.0) - _1809;
        float _1812 = _1809 + 1.0;
        float frontier_phi_53_77_ladder;
        float frontier_phi_53_77_ladder_1;
        float frontier_phi_53_77_ladder_2;
        if ((_1808 > _1812) || ((_1808 < _1810) || ((_1807 > _1812) || ((_1807 < _1810) || ((_1806 < _1810) || (_1806 > _1812))))))
        {
            frontier_phi_53_77_ladder = 0.0;
            frontier_phi_53_77_ladder_1 = 0.0;
            frontier_phi_53_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1919 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1808, cbModelParam._m0[9u].z, fma(_1807, cbModelParam._m0[9u].y, _1806 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1808, cbModelParam._m0[10u].z, fma(_1807, cbModelParam._m0[10u].y, _1806 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1808, cbModelParam._m0[11u].z, fma(_1807, cbModelParam._m0[11u].y, _1806 * cbModelParam._m0[11u].x))), _1112);
            frontier_phi_53_77_ladder = _1919.z * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_1 = _1919.y * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_2 = _1919.x * cbModelParam._m0[1u].y;
        }
        _1195 = frontier_phi_53_77_ladder_2;
        _1197 = frontier_phi_53_77_ladder_1;
        _1199 = frontier_phi_53_77_ladder;
    }
    else
    {
        vec4 _1183 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_716, _717, _718), _1112);
        _1195 = _1183.x * cbModelParam._m0[1u].y;
        _1197 = _1183.y * cbModelParam._m0[1u].y;
        _1199 = _1183.z * cbModelParam._m0[1u].y;
    }
    float _1202 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1290;
    float _1292;
    float _1294;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1254 = fma(_748, cbModelParam._m0[21u].z, fma(_744, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _740)) + cbModelParam._m0[21u].w;
        float _1258 = fma(_748, cbModelParam._m0[22u].z, fma(_744, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _740)) + cbModelParam._m0[22u].w;
        float _1262 = fma(_748, cbModelParam._m0[23u].z, fma(_744, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _740)) + cbModelParam._m0[23u].w;
        float _1265 = fma(_718, cbModelParam._m0[21u].z, fma(_717, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _716));
        float _1268 = fma(_718, cbModelParam._m0[22u].z, fma(_717, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _716));
        float _1271 = fma(_718, cbModelParam._m0[23u].z, fma(_717, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _716));
        float _1508;
        if (_1265 > 0.0)
        {
            _1508 = abs((1.0 - _1254) / _1265);
        }
        else
        {
            float frontier_phi_65_61_ladder;
            if (_1265 < 0.0)
            {
                frontier_phi_65_61_ladder = abs((_1254 + 1.0) / _1265);
            }
            else
            {
                frontier_phi_65_61_ladder = 5000.0;
            }
            _1508 = frontier_phi_65_61_ladder;
        }
        float _1825;
        if (_1268 > 0.0)
        {
            _1825 = abs((1.0 - _1258) / _1268);
        }
        else
        {
            float frontier_phi_79_72_ladder;
            if (_1268 < 0.0)
            {
                frontier_phi_79_72_ladder = abs((_1258 + 1.0) / _1268);
            }
            else
            {
                frontier_phi_79_72_ladder = 5000.0;
            }
            _1825 = frontier_phi_79_72_ladder;
        }
        float _1976;
        if (_1271 > 0.0)
        {
            _1976 = abs((1.0 - _1262) / _1271);
        }
        else
        {
            float frontier_phi_93_88_ladder;
            if (_1271 < 0.0)
            {
                frontier_phi_93_88_ladder = abs((_1262 + 1.0) / _1271);
            }
            else
            {
                frontier_phi_93_88_ladder = 5000.0;
            }
            _1976 = frontier_phi_93_88_ladder;
        }
        float _1978 = isnan(_1825) ? _1508 : (isnan(_1508) ? _1825 : min(_1508, _1825));
        float _1979 = isnan(_1976) ? _1978 : (isnan(_1978) ? _1976 : min(_1978, _1976));
        float _1983 = (_1979 * _1265) + _1254;
        float _1984 = (_1979 * _1268) + _1258;
        float _1985 = (_1979 * _1271) + _1262;
        float _1986 = _1979 * 9.9999997473787516355514526367188e-05;
        float _1987 = (-1.0) - _1986;
        float _1989 = _1986 + 1.0;
        float frontier_phi_62_93_ladder;
        float frontier_phi_62_93_ladder_1;
        float frontier_phi_62_93_ladder_2;
        if ((_1985 > _1989) || ((_1985 < _1987) || ((_1984 > _1989) || ((_1984 < _1987) || ((_1983 < _1987) || (_1983 > _1989))))))
        {
            frontier_phi_62_93_ladder = 0.0;
            frontier_phi_62_93_ladder_1 = 0.0;
            frontier_phi_62_93_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2145 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1985, cbModelParam._m0[17u].z, fma(_1984, cbModelParam._m0[17u].y, _1983 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1985, cbModelParam._m0[18u].z, fma(_1984, cbModelParam._m0[18u].y, _1983 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1985, cbModelParam._m0[19u].z, fma(_1984, cbModelParam._m0[19u].y, _1983 * cbModelParam._m0[19u].x))), _1202);
            frontier_phi_62_93_ladder = _2145.z * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_1 = _2145.y * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_2 = _2145.x * cbModelParam._m0[1u].z;
        }
        _1290 = frontier_phi_62_93_ladder_2;
        _1292 = frontier_phi_62_93_ladder_1;
        _1294 = frontier_phi_62_93_ladder;
    }
    else
    {
        vec4 _1274 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_716, _717, _718), _1202);
        _1290 = _1274.x * cbModelParam._m0[1u].z;
        _1292 = _1274.y * cbModelParam._m0[1u].z;
        _1294 = _1274.z * cbModelParam._m0[1u].z;
    }
    float _1306 = _715 * 0.01200000010430812835693359375;
    float _1308 = _1306 * ((cbModelParam._m0[1u].w * (_1290 - _1195)) + _1195);
    float _1309 = _1306 * ((cbModelParam._m0[1u].w * (_1292 - _1197)) + _1197);
    float _1310 = _1306 * ((cbModelParam._m0[1u].w * (_1294 - _1199)) + _1199);
    float _1331 = fma(_1310, cbSceneParam._m0[89u].z, fma(_1309, cbSceneParam._m0[89u].y, _1308 * cbSceneParam._m0[89u].x));
    float _1334 = fma(_1310, cbSceneParam._m0[90u].z, fma(_1309, cbSceneParam._m0[90u].y, _1308 * cbSceneParam._m0[90u].x));
    float _1337 = fma(_1310, cbSceneParam._m0[91u].z, fma(_1309, cbSceneParam._m0[91u].y, _1308 * cbSceneParam._m0[91u].x));
    vec4 _1345 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_702, _703));
    float _1347 = _1345.w;
    uint _1363 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1367 = floatBitsToUint(cbInstanceData._m0[_1363 + 5u]);
    uint _1369 = _1367.x * 14u;
    uint _1370 = _1369 + 13u;
    float _1375 = _715 + (-1.0);
    float _1378 = (cbLight._m0[_1370].x * _1375) + 1.0;
    float _1379 = (cbLight._m0[_1370].y * _1375) + 1.0;
    uint _1380 = _1369 + 8u;
    float _1391 = cbLight._m0[_1369].x + _694;
    float _1392 = cbLight._m0[_1369].y + _695;
    float _1393 = cbLight._m0[_1369].z + _696;
    float _1397 = inversesqrt(dot(vec3(_1391, _1392, _1393), vec3(_1391, _1392, _1393)));
    float _1401 = dot(vec3(0.0), vec3(cbLight._m0[_1369].xyz));
    float _2707 = isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0));
    float _1404 = isnan(1.0) ? _2707 : (isnan(_2707) ? 1.0 : min(_2707, 1.0));
    float _1405 = dot(vec3(0.0), vec3(_694, _695, _696));
    float _2718 = isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0));
    float _1408 = isnan(1.0) ? _2718 : (isnan(_2718) ? 1.0 : min(_2718, 1.0));
    float _1409 = dot(vec3(cbLight._m0[_1369].xyz), vec3(_1391 * _1397, _1392 * _1397, _1393 * _1397));
    float _2729 = isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0));
    float _1420 = (exp2(log2(1.0 - (isnan(1.0) ? _2729 : (isnan(_2729) ? 1.0 : min(_2729, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1426 = (0.5 / ((_1404 + 9.9999999392252902907785028219223e-09) + _1408)) * _1404;
    float _2740 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
    float _1428 = (isnan(1.0) ? _2740 : (isnan(_2740) ? 1.0 : min(_2740, 1.0))) * 0.31831014156341552734375;
    float _1430 = isnan(1.0) ? _1378 : (isnan(_1378) ? 1.0 : min(_1378, 1.0));
    uint _1443 = _1369 + 9u;
    uint _1449 = _1369 | 1u;
    float _1455 = cbLight._m0[_1449].x + _694;
    float _1456 = cbLight._m0[_1449].y + _695;
    float _1457 = cbLight._m0[_1449].z + _696;
    float _1461 = inversesqrt(dot(vec3(_1455, _1456, _1457), vec3(_1455, _1456, _1457)));
    float _1465 = dot(vec3(0.0), vec3(cbLight._m0[_1449].xyz));
    float _2756 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
    float _1468 = isnan(1.0) ? _2756 : (isnan(_2756) ? 1.0 : min(_2756, 1.0));
    float _1469 = dot(vec3(cbLight._m0[_1449].xyz), vec3(_1455 * _1461, _1456 * _1461, _1457 * _1461));
    float _2767 = isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0));
    float _1478 = (exp2(log2(1.0 - (isnan(1.0) ? _2767 : (isnan(_2767) ? 1.0 : min(_2767, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1482 = (0.5 / ((_1468 + 9.9999999392252902907785028219223e-09) + _1408)) * _1468;
    float _2778 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
    float _1484 = (isnan(1.0) ? _2778 : (isnan(_2778) ? 1.0 : min(_2778, 1.0))) * 0.31831014156341552734375;
    float _1485 = isnan(1.0) ? _1379 : (isnan(_1379) ? 1.0 : min(_1379, 1.0));
    float _1495 = (((_1478 * cbLight._m0[_1443].x) * _1484) * _1485) + ((((cbLight._m0[_1380].x * ((1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1347))) * _1420) * _1428) * _1430);
    float _1496 = (((_1478 * cbLight._m0[_1443].y) * _1484) * _1485) + ((((cbLight._m0[_1380].y * ((1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1347))) * _1420) * _1428) * _1430);
    float _1497 = (((_1478 * cbLight._m0[_1443].z) * _1484) * _1485) + ((((cbLight._m0[_1380].z * ((1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1347))) * _1420) * _1428) * _1430);
    float _1614;
    float _1616;
    float _1618;
    if (_1367.y == 0u)
    {
        float _1553 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1554 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1553;
        float _1555 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1553;
        float _1556 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1553;
        uvec4 _1568 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1569 = _1568.x;
        uint _1580 = uint((float(_1568.y) * floor(float(uint(cbSceneParam._m0[85u].y * _703) / _1569))) + floor(float(uint(cbSceneParam._m0[85u].x * _702) / _1569)));
        float _1590 = (log2(_1556 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1591 = isnan(0.0) ? _1590 : (isnan(_1590) ? 0.0 : max(_1590, 0.0));
        uint _1594 = uint(isnan(14.0) ? _1591 : (isnan(_1591) ? 14.0 : min(_1591, 14.0)));
        uvec4 _1599 = texelFetch(g_lightClusterGridBuffer, int(((_1594 << 2u) + (_1580 << 6u)) >> 2u));
        uint _1600 = _1599.x;
        uint _1601 = _1568.z;
        float _1691;
        float _1693;
        float _1695;
        if (((((1u << ((_1601 >> 4u) & 15u)) + 4294967295u) & _1600) == 0u) || ((_1601 & 240u) == 0u))
        {
            _1691 = 0.0;
            _1693 = 0.0;
            _1695 = 0.0;
        }
        else
        {
            float _1692;
            float _1694;
            float _1696;
            float _1850 = 0.0;
            float _1851 = 0.0;
            float _1852 = 0.0;
            uint _1853 = 0u;
            uint _1862;
            bool _1863;
            for (;;)
            {
                _1862 = texelFetch(g_lightClassification, int((((_1594 << 5u) + (_1580 << 9u)) + (_1853 << 2u)) >> 2u)).x;
                _1863 = _1862 == 0u;
                float frontier_phi_90_pred;
                float frontier_phi_90_pred_1;
                float frontier_phi_90_pred_2;
                if (_1863)
                {
                    frontier_phi_90_pred = _1852;
                    frontier_phi_90_pred_1 = _1851;
                    frontier_phi_90_pred_2 = _1850;
                }
                else
                {
                    float _2016;
                    float _2017;
                    float _2018;
                    uint _2019;
                    _2016 = _1850;
                    _2017 = _1851;
                    _2018 = _1852;
                    _2019 = _1862;
                    float _1928;
                    float _1929;
                    float _1930;
                    for (;;)
                    {
                        uint _2023 = uint(findLSB(_2019)) + (_1853 << 5u);
                        uint _2020 = (_2019 + 4294967295u) & _2019;
                        uint _2025 = _2023 * 48u;
                        vec4 _2039 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2025)).x, texelFetch(g_PointLightRenderingBuffer, int(_2025 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2025 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2025 + 3u)).x));
                        uint _2056 = (_2023 * 48u) + 8u;
                        vec3 _2067 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2056)).x, texelFetch(g_PointLightRenderingBuffer, int(_2056 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2056 + 2u)).x));
                        float _2071 = _2039.x - _1554;
                        float _2072 = _2039.y - _1555;
                        float _2073 = _2039.z - _1556;
                        float _2074 = dot(vec3(_2071, _2072, _2073), vec3(_2071, _2072, _2073));
                        float _2077 = inversesqrt(_2074);
                        float _2086 = 1.0 - (_2074 * _2039.w);
                        float _2804 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
                        float _2088 = sqrt(_2074) * uintBitsToFloat(uvec4(_2046, _2047, _2048, texelFetch(g_PointLightRenderingBuffer, int(((_2023 * 48u) + 4u) + 3u)).x)).w;
                        float _2091 = 1.39999997615814208984375 / (_2088 + 1.39999997615814208984375);
                        float _2092 = _2091 * _2091;
                        float _2095 = ((1.0 - _2092) * dot(vec3(0.0), vec3(_2077 * _2071, _2077 * _2072, _2077 * _2073))) + _2092;
                        float _2097 = (-0.0) - _1554;
                        float _2098 = (-0.0) - _1555;
                        float _2099 = (-0.0) - _1556;
                        float _2103 = inversesqrt(dot(vec3(_2097, _2098, _2099), vec3(_2097, _2098, _2099)));
                        float _2107 = dot(vec3(0.0), vec3(_2103 * _2097, _2103 * _2098, _2103 * _2099));
                        float _2815 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
                        float _2826 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
                        float _2111 = isnan(1.0) ? _2826 : (isnan(_2826) ? 1.0 : min(_2826, 1.0));
                        float _2115 = (0.5 / (((isnan(1.0) ? _2815 : (isnan(_2815) ? 1.0 : min(_2815, 1.0))) + 9.9999999392252902907785028219223e-09) + _2111)) * _2111;
                        float _2837 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
                        float _2124 = (((isnan(1.0) ? _2837 : (isnan(_2837) ? 1.0 : min(_2837, 1.0))) * 3.1415927410125732421875) / (((_2088 * _2088) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2804 : (isnan(_2804) ? 1.0 : min(_2804, 1.0)));
                        _1928 = (_2124 * _2067.x) + _2016;
                        _1929 = (_2124 * _2067.y) + _2017;
                        _1930 = (_2124 * _2067.z) + _2018;
                        if (_2020 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2016 = _1928;
                            _2017 = _1929;
                            _2018 = _1930;
                            _2019 = _2020;
                        }
                    }
                    frontier_phi_90_pred = _1930;
                    frontier_phi_90_pred_1 = _1929;
                    frontier_phi_90_pred_2 = _1928;
                }
                _1696 = frontier_phi_90_pred;
                _1694 = frontier_phi_90_pred_1;
                _1692 = frontier_phi_90_pred_2;
                uint _1854 = _1853 + 1u;
                if (_1854 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1850 = _1692;
                    _1851 = _1694;
                    _1852 = _1696;
                    _1853 = _1854;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1691 = _1692;
            _1693 = _1694;
            _1695 = _1696;
        }
        uvec4 _1699 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1700 = _1699.z;
        uint _1702 = (_1700 >> 8u) & 15u;
        float _1830;
        float _1832;
        float _1834;
        if (((4294967295u << _1702) & _1600) == 0u)
        {
            _1830 = _1691;
            _1832 = _1693;
            _1834 = _1695;
        }
        else
        {
            float _1846 = inversesqrt(dot(vec3(_1554, _1555, _1556), vec3(_1554, _1555, _1556)));
            float frontier_phi_81_82_ladder;
            float frontier_phi_81_82_ladder_1;
            float frontier_phi_81_82_ladder_2;
            if (_1702 < ((_1700 >> 12u) & 15u))
            {
                float _1831;
                float _1833;
                float _1835;
                float _2002 = _1691;
                float _2003 = _1693;
                float _2004 = _1695;
                uint _2005 = _1702;
                uint _2014;
                bool _2015;
                for (;;)
                {
                    _2014 = texelFetch(g_lightClassification, int((((_1594 << 5u) + (_1580 << 9u)) + (_2005 << 2u)) >> 2u)).x;
                    _2015 = _2014 == 0u;
                    float frontier_phi_99_pred;
                    float frontier_phi_99_pred_1;
                    float frontier_phi_99_pred_2;
                    if (_2015)
                    {
                        frontier_phi_99_pred = _2004;
                        frontier_phi_99_pred_1 = _2003;
                        frontier_phi_99_pred_2 = _2002;
                    }
                    else
                    {
                        float _2150;
                        float _2151;
                        float _2152;
                        float _2371;
                        float _2372;
                        float _2373;
                        float _2160 = _2002;
                        float _2161 = _2003;
                        float _2162 = _2004;
                        uint _2163 = _2014;
                        uint _2164;
                        uint _2174;
                        vec4 _2189;
                        float _2190;
                        vec3 _2202;
                        vec4 _2217;
                        vec4 _2232;
                        float _2278;
                        bool _2279;
                        for (;;)
                        {
                            _2174 = ((_2005 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2163));
                            _2164 = (_2163 + 4294967295u) & _2163;
                            uint _2176 = _2174 * 40u;
                            _2189 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2176)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2176 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2176 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2176 + 3u)).x));
                            _2190 = _2189.w;
                            uint _2192 = (_2174 * 40u) + 8u;
                            _2202 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2192)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2192 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2192 + 2u)).x));
                            uint _2204 = (_2174 * 40u) + 16u;
                            _2217 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2204)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2204 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2204 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2204 + 3u)).x));
                            uint _2219 = (_2174 * 40u) + 20u;
                            _2232 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2219)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2219 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2219 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2219 + 3u)).x));
                            uint _2234 = (_2174 * 40u) + 24u;
                            vec4 _2247 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2234)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2234 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2234 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2234 + 3u)).x));
                            uint _2253 = (_2174 * 40u) + 28u;
                            vec4 _2266 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2253)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2253 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2253 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2253 + 3u)).x));
                            _2278 = fma(_1556, _2266.z, fma(_1555, _2266.y, _2266.x * _1554)) + _2266.w;
                            _2279 = !((fma(_1556, _2247.z, fma(_1555, _2247.y, _2247.x * _1554)) + _2247.w) <= 0.0);
                            float frontier_phi_105_pred;
                            float frontier_phi_105_pred_1;
                            float frontier_phi_105_pred_2;
                            if (_2279)
                            {
                                float _2313 = _2189.x - _1554;
                                float _2314 = _2189.y - _1555;
                                float _2315 = _2189.z - _1556;
                                float _2316 = dot(vec3(_2313, _2314, _2315), vec3(_2313, _2314, _2315));
                                float _2319 = inversesqrt(_2316);
                                float _2326 = 1.0 - (_2316 / (_2190 * _2190));
                                float _2848 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
                                float _2328 = sqrt(_2316) * uintBitsToFloat(uvec4(_2282, _2283, _2284, texelFetch(g_SpotLightRenderingBuffer, int(((_2174 * 40u) + 4u) + 3u)).x)).w;
                                float _2330 = 1.39999997615814208984375 / (_2328 + 1.39999997615814208984375);
                                float _2331 = _2330 * _2330;
                                float _2334 = (fma(_1556, _2217.z, fma(_1555, _2217.y, _2217.x * _1554)) + _2217.w) / _2278;
                                float _2335 = (fma(_1556, _2232.z, fma(_1555, _2232.y, _2232.x * _1554)) + _2232.w) / _2278;
                                float _2339 = 1.0 - dot(vec2(_2334, _2335), vec2(_2334, _2335));
                                float _2859 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
                                float _2347 = dot(vec3(0.0), vec3((-0.0) - (_1554 * _1846), (-0.0) - (_1555 * _1846), (-0.0) - (_1556 * _1846)));
                                float _2870 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
                                float _2355 = ((1.0 - _2331) * dot(vec3(0.0), vec3(_2319 * _2313, _2319 * _2314, _2319 * _2315))) + _2331;
                                float _2881 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
                                float _2356 = isnan(1.0) ? _2881 : (isnan(_2881) ? 1.0 : min(_2881, 1.0));
                                float _2360 = (0.5 / (((isnan(1.0) ? _2870 : (isnan(_2870) ? 1.0 : min(_2870, 1.0))) + 9.9999999392252902907785028219223e-09) + _2356)) * _2356;
                                float _2892 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
                                float _2367 = ((isnan(1.0) ? _2859 : (isnan(_2859) ? 1.0 : min(_2859, 1.0))) * (isnan(1.0) ? _2848 : (isnan(_2848) ? 1.0 : min(_2848, 1.0)))) * (((isnan(1.0) ? _2892 : (isnan(_2892) ? 1.0 : min(_2892, 1.0))) * 3.1415927410125732421875) / (((_2328 * _2328) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_105_pred = _2367 * _2202.z;
                                frontier_phi_105_pred_1 = _2367 * _2202.y;
                                frontier_phi_105_pred_2 = _2367 * _2202.x;
                            }
                            else
                            {
                                frontier_phi_105_pred = 0.0;
                                frontier_phi_105_pred_1 = 0.0;
                                frontier_phi_105_pred_2 = 0.0;
                            }
                            _2373 = frontier_phi_105_pred;
                            _2372 = frontier_phi_105_pred_1;
                            _2371 = frontier_phi_105_pred_2;
                            _2150 = _2371 + _2160;
                            _2151 = _2372 + _2161;
                            _2152 = _2373 + _2162;
                            if (_2164 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2160 = _2150;
                                _2161 = _2151;
                                _2162 = _2152;
                                _2163 = _2164;
                                continue;
                            }
                        }
                        frontier_phi_99_pred = _2152;
                        frontier_phi_99_pred_1 = _2151;
                        frontier_phi_99_pred_2 = _2150;
                    }
                    _1835 = frontier_phi_99_pred;
                    _1833 = frontier_phi_99_pred_1;
                    _1831 = frontier_phi_99_pred_2;
                    uint _2006 = _2005 + 1u;
                    if (_2006 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2002 = _1831;
                        _2003 = _1833;
                        _2004 = _1835;
                        _2005 = _2006;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_81_82_ladder = _1833;
                frontier_phi_81_82_ladder_1 = _1831;
                frontier_phi_81_82_ladder_2 = _1835;
            }
            else
            {
                frontier_phi_81_82_ladder = _1693;
                frontier_phi_81_82_ladder_1 = _1691;
                frontier_phi_81_82_ladder_2 = _1695;
            }
            _1830 = frontier_phi_81_82_ladder_1;
            _1832 = frontier_phi_81_82_ladder;
            _1834 = frontier_phi_81_82_ladder_2;
        }
        float _1839 = isnan(1.0) ? _715 : (isnan(_715) ? 1.0 : min(_715, 1.0));
        _1614 = ((_1830 * 0.039999999105930328369140625) * _1839) + _1495;
        _1616 = ((_1832 * 0.039999999105930328369140625) * _1839) + _1496;
        _1618 = ((_1834 * 0.039999999105930328369140625) * _1839) + _1497;
    }
    else
    {
        _1614 = _1495;
        _1616 = _1496;
        _1618 = _1497;
    }
    uint _1625 = (_1363 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1640 = (cbInstanceData._m0[_1625].x * ((_664 * ((_614.x * cbMtdParam._m0[14u].x) - _546)) + _546)) + ((_1614 + ((isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0))) * _1106)) * cbPerFrame._m0[3u].x);
    float _1641 = (cbInstanceData._m0[_1625].y * ((_664 * ((_614.y * cbMtdParam._m0[14u].y) - _547)) + _547)) + ((_1616 + ((isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0))) * _1106)) * cbPerFrame._m0[3u].x);
    float _1642 = (cbInstanceData._m0[_1625].z * ((_664 * ((_614.z * cbMtdParam._m0[14u].z) - _548)) + _548)) + ((_1618 + ((isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0))) * _1106)) * cbPerFrame._m0[3u].x);
    uint _1646 = _1363 + 6u;
    float _1654 = _702 / cbSceneParam._m0[86u].x;
    float _1655 = _703 / cbSceneParam._m0[86u].y;
    vec4 _1669 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1654, _1655, (log2((isnan(cbSceneParam._m0[77u].w) ? _689 : (isnan(_689) ? cbSceneParam._m0[77u].w : min(_689, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1671 = _1669.x;
    float _1672 = _1669.y;
    float _1673 = _1669.z;
    float _1674 = _1669.w;
    float _1748;
    float _1750;
    float _1752;
    float _1754;
    if (_689 > cbSceneParam._m0[78u].w)
    {
        float _1710 = isnan(_689) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _689 : min(cbSceneParam._m0[80u].w, _689));
        float _1711 = _1710 / _689;
        float _1722 = _1711 * _265;
        float _1723 = _266 * _1711;
        float _1724 = (-0.0) - _1723;
        float _1725 = _1711 * _267;
        float _1727 = (cbSceneParam._m0[77u].w * _1724) / _1710;
        float _1728 = _1727 + cbSceneParam._m0[79u].w;
        float _1729 = cbSceneParam._m0[79u].w - _1723;
        float _1735 = sqrt(((_1722 * _1722) + (_1723 * _1723)) + (_1725 * _1725));
        float _1738 = (1.0 - (cbSceneParam._m0[77u].w / _1710)) * _1735;
        float _1744 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1746 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1938;
        if (abs((_1724 - _1727) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1938 = ((((_1728 > 0.0) ? exp2(_1744 * _1728) : (2.0 - exp2(_1746 * _1728))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1738;
        }
        else
        {
            float _1876 = 1.0 / cbSceneParam._m0[80u].x;
            float _1877 = isnan(_1729) ? _1728 : (isnan(_1728) ? _1729 : max(_1728, _1729));
            float _1878 = isnan(_1729) ? _1728 : (isnan(_1728) ? _1729 : min(_1728, _1729));
            float _1887 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : min(_1877, 0.0));
            float _1888 = isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : min(_1878, 0.0));
            _1938 = ((abs(_1735 / _1724) * cbSceneParam._m0[80u].y) * ((((_1887 - _1888) * 2.0) - ((exp2(_1744 * (isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0)))) - exp2(_1744 * (isnan(0.0) ? _1878 : (isnan(_1878) ? 0.0 : max(_1878, 0.0))))) * _1876)) - ((exp2(_1746 * _1887) - exp2(_1746 * _1888)) * _1876))) + (_1738 * cbSceneParam._m0[80u].z);
        }
        vec4 _1940 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1654, _1655, 1.0), 0.0);
        float _1949 = exp2((_1938 * (-1.44269502162933349609375)) * (1.0 - _1940.w));
        float _1950 = log2(_1949);
        float _1966 = log2(_1674);
        _1748 = (exp2(_1966 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1950 * cbSceneParam._m0[78u].x)) * _1940.x) / cbSceneParam._m0[78u].x)) + _1671;
        _1750 = (exp2(_1966 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1950 * cbSceneParam._m0[78u].y)) * _1940.y) / cbSceneParam._m0[78u].y)) + _1672;
        _1752 = (exp2(_1966 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1950 * cbSceneParam._m0[78u].z)) * _1940.z) / cbSceneParam._m0[78u].z)) + _1673;
        _1754 = _1949 * _1674;
    }
    else
    {
        _1748 = _1671;
        _1750 = _1672;
        _1752 = _1673;
        _1754 = _1674;
    }
    float _1766 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1767 = _1766 == 3.0;
    float _1769 = log2(_1754);
    float _1776 = exp2(_1769 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0)));
    float _1777 = exp2(_1769 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0)));
    float _1778 = exp2(_1769 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)));
    float _1787 = (_1766 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _1787 * (_1767 ? _1776 : (_1776 + (cbSceneParam._m0[72u].w * _1748)));
    SV_Target.y = _1787 * (_1767 ? _1777 : (_1777 + (cbSceneParam._m0[72u].w * _1750)));
    SV_Target.z = _1787 * (_1767 ? _1778 : (_1778 + (cbSceneParam._m0[72u].w * _1752)));
    SV_Target.w = cbInstanceData._m0[_1646].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1646].w;
}


