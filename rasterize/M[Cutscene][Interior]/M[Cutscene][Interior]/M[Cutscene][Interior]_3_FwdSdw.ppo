#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 10) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_8;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _884;
uint _2320;
uint _2321;
uint _2322;
uint _2535;
uint _2536;
uint _2537;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _257 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _267 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _257);
    float _268 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _257);
    float _269 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _257);
    vec4 _288 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _323 = cbMtdParam._m0[24u].x + _267;
    float _324 = cbMtdParam._m0[24u].y + _268;
    float _325 = cbMtdParam._m0[24u].z + _269;
    float _339 = (-0.0) - dot(vec3(_323, _324, _325), vec3(_195 * _188, _195 * _189, _195 * _190));
    float _340 = (-0.0) - dot(vec3(_323, _324, _325), vec3(_209 * TANGENT.x, _209 * TANGENT.y, _209 * TANGENT.z));
    float _341 = (-0.0) - dot(vec3(_323, _324, _325), vec3((-0.0) - (_202 * NORMAL.x), (-0.0) - (_202 * NORMAL.y), (-0.0) - (_202 * NORMAL.z)));
    float _345 = inversesqrt(dot(vec3(_339, _340, _341), vec3(_339, _340, _341)));
    float _348 = _345 * _341;
    float _349 = (_345 * _339) + (((_288.x * 2.0) + (-1.0)) * cbMtdParam._m0[22u].x);
    float _350 = (_345 * _340) + (((_288.y * 2.0) + (-1.0)) * cbMtdParam._m0[22u].y);
    float _351 = _349 * cbMtdParam._m0[20u].w;
    float _352 = _350 * cbMtdParam._m0[20u].z;
    float _353 = fract(TEXCOORD.x);
    float _354 = fract(TEXCOORD.y);
    float _360;
    if (_351 > 0.0)
    {
        _360 = (1.0 - _353) / _351;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_351 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _353) / _351;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _360 = frontier_phi_3_2_ladder;
    }
    float _368;
    if (_352 > 0.0)
    {
        _368 = (1.0 - _354) / _352;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_352 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _354) / _352;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _368 = frontier_phi_7_6_ladder;
    }
    bool _370 = _348 > 0.0;
    float _372 = _370 ? (cbMtdParam._m0[16u].x / _348) : 5000.0;
    float _373 = isnan(_368) ? _360 : (isnan(_360) ? _368 : min(_360, _368));
    float _374 = isnan(_372) ? _373 : (isnan(_373) ? _372 : min(_373, _372));
    float _378 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _379 = _353 + (-0.5);
    float _382 = _354 + (-0.5);
    float _385 = ((_374 * _348) + _378) / _378;
    vec4 _410 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (((((_379 + (_374 * _351)) / _385) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (((((_382 + (_374 * _352)) / _385) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    float _420 = cbMtdParam._m0[9u].x * _410.x;
    float _421 = cbMtdParam._m0[9u].y * _410.y;
    float _422 = cbMtdParam._m0[9u].z * _410.z;
    float _441 = _349 * cbMtdParam._m0[22u].w;
    float _442 = _350 * cbMtdParam._m0[22u].z;
    bool _443 = _441 > 0.0;
    float _448;
    if (_443)
    {
        _448 = (1.0 - _353) / _441;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_441 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _353) / _441;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _448 = frontier_phi_11_10_ladder;
    }
    bool _450 = _442 > 0.0;
    float _455;
    if (_450)
    {
        _455 = (1.0 - _354) / _442;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_442 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _354) / _442;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _455 = frontier_phi_15_14_ladder;
    }
    float _458 = _370 ? (cbMtdParam._m0[18u].x / _348) : 5000.0;
    float _459 = isnan(_455) ? _448 : (isnan(_448) ? _455 : min(_448, _455));
    float _460 = isnan(_458) ? _459 : (isnan(_459) ? _458 : min(_459, _458));
    float _464 = cbMtdParam._m0[19u].y * cbMtdParam._m0[18u].x;
    float _468 = ((_460 * _348) + _464) / _464;
    float _473 = cbMtdParam._m0[19u].x - cbMtdParam._m0[20u].x * trunc(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    float _475 = floor(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    vec4 _491 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_379 + (_460 * _441)) / _468) + 0.5) + _473) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_382 + (_460 * _442)) / _468) + 0.5) + _475) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[0u].w));
    float _503;
    if (_443)
    {
        _503 = (1.0 - _353) / _441;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_441 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _353) / _441;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _503 = frontier_phi_19_18_ladder;
    }
    float _509;
    if (_450)
    {
        _509 = (1.0 - _354) / _442;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_442 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _354) / _442;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _509 = frontier_phi_23_22_ladder;
    }
    float _511 = isnan(_509) ? _503 : (isnan(_503) ? _509 : min(_503, _509));
    float _512 = isnan(_458) ? _511 : (isnan(_511) ? _458 : min(_511, _458));
    float _519 = ((_512 * _348) + _464) / _464;
    vec4 _539 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_379 + (_512 * _441)) / _519) + 0.5) + _473) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_382 + (_512 * _442)) / _519) + 0.5) + _475) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[8u].w));
    float _541 = _539.x;
    float _548 = (_541 * ((_491.x * cbMtdParam._m0[10u].x) - _420)) + _420;
    float _549 = (_541 * ((_491.y * cbMtdParam._m0[10u].y) - _421)) + _421;
    float _550 = (_541 * ((_491.z * cbMtdParam._m0[10u].z) - _422)) + _422;
    float _566 = _349 * cbMtdParam._m0[23u].y;
    float _567 = _350 * cbMtdParam._m0[23u].x;
    bool _568 = _566 > 0.0;
    float _573;
    if (_568)
    {
        _573 = (1.0 - _353) / _566;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_566 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _353) / _566;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _573 = frontier_phi_27_26_ladder;
    }
    bool _575 = _567 > 0.0;
    float _580;
    if (_575)
    {
        _580 = (1.0 - _354) / _567;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_567 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _354) / _567;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _580 = frontier_phi_31_30_ladder;
    }
    float _583 = _370 ? (cbMtdParam._m0[19u].w / _348) : 5000.0;
    float _584 = isnan(_580) ? _573 : (isnan(_573) ? _580 : min(_573, _580));
    float _585 = isnan(_583) ? _584 : (isnan(_584) ? _583 : min(_584, _583));
    float _589 = cbMtdParam._m0[19u].w * cbMtdParam._m0[16u].z;
    float _593 = ((_585 * _348) + _589) / _589;
    float _598 = cbMtdParam._m0[19u].z - cbMtdParam._m0[23u].z * trunc(cbMtdParam._m0[19u].z / cbMtdParam._m0[23u].z);
    float _600 = floor(cbMtdParam._m0[19u].z / cbMtdParam._m0[23u].z);
    vec4 _616 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * (((((_379 + (_585 * _566)) / _593) + 0.5) + _598) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * (((((_382 + (_585 * _567)) / _593) + 0.5) + _600) / cbMtdParam._m0[23u].w)) + cbTextureTilingScale._m0[9u].w));
    float _628;
    if (_568)
    {
        _628 = (1.0 - _353) / _566;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_566 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _353) / _566;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _628 = frontier_phi_35_34_ladder;
    }
    float _634;
    if (_575)
    {
        _634 = (1.0 - _354) / _567;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_567 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _354) / _567;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _634 = frontier_phi_39_38_ladder;
    }
    float _636 = isnan(_634) ? _628 : (isnan(_628) ? _634 : min(_628, _634));
    float _637 = isnan(_583) ? _636 : (isnan(_636) ? _583 : min(_636, _583));
    float _644 = ((_637 * _348) + _589) / _589;
    vec4 _664 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_379 + (_637 * _566)) / _644) + 0.5) + _598) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_382 + (_637 * _567)) / _644) + 0.5) + _600) / cbMtdParam._m0[23u].w)) + cbTextureTilingScale._m0[10u].w));
    float _666 = _664.x;
    float _691 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _695 = inversesqrt(dot(vec3(_267, _268, _269), vec3(_267, _268, _269)));
    float _696 = _267 * _695;
    float _697 = _268 * _695;
    float _698 = _269 * _695;
    float _704 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _705 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _714 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_704 * cbSceneParam._m0[86u].x, _705 * cbSceneParam._m0[86u].y));
    float _717 = _714.x * TEXCOORD_4.z;
    float _718 = (-0.0) - _696;
    float _719 = (-0.0) - _697;
    float _720 = (-0.0) - _698;
    float _742 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _746 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _750 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _883;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    float _891;
    float _892;
    float _893;
    float _894;
    float _895;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _806 = (cbModelParam._m0[37u].x * ((((fma(_750, cbModelParam._m0[26u].z, fma(_746, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _742)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _808 = (cbModelParam._m0[37u].y * ((((fma(_750, cbModelParam._m0[27u].z, fma(_746, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _742)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _809 = (((((fma(_750, cbModelParam._m0[28u].z, fma(_746, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _742)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _812 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_806, _808, _809), 0.0);
        vec4 _819 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_806, _808, _809), 0.0);
        vec4 _826 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_806, _808, _809), 0.0);
        vec4 _833 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_806, _808, _809), 0.0);
        float _846 = exp2((_812.w + (-0.5)) * 20.0) * 2.0;
        float _856 = exp2((_819.w + (-0.5)) * 20.0) * 2.0;
        float _866 = exp2((_826.w + (-0.5)) * 20.0) * 2.0;
        float _876 = exp2((_833.w + (-0.5)) * 20.0) * 2.0;
        float _877 = _876 * (_833.x + (-0.5));
        float _878 = _876 * (_833.y + (-0.5));
        float _879 = _876 * (_833.z + (-0.5));
        _883 = _846 * (_812.z + (-0.5));
        _885 = _846 * (_812.y + (-0.5));
        _886 = _846 * (_812.x + (-0.5));
        _887 = _856 * (_819.z + (-0.5));
        _888 = _856 * (_819.y + (-0.5));
        _889 = _856 * (_819.x + (-0.5));
        _890 = _866 * (_826.z + (-0.5));
        _891 = _866 * (_826.y + (-0.5));
        _892 = _866 * (_826.x + (-0.5));
        _893 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        _894 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        _895 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    }
    else
    {
        _883 = _884;
        _885 = _884;
        _886 = _884;
        _887 = _884;
        _888 = _884;
        _889 = _884;
        _890 = _884;
        _891 = _884;
        _892 = _884;
        _893 = _884;
        _894 = _884;
        _895 = _884;
    }
    float _1023;
    float _1024;
    float _1025;
    float _1026;
    float _1027;
    float _1028;
    float _1029;
    float _1030;
    float _1031;
    float _1032;
    float _1033;
    float _1034;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _949 = (cbModelParam._m0[38u].x * ((((fma(_750, cbModelParam._m0[30u].z, fma(_746, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _742)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _950 = (cbModelParam._m0[38u].y * ((((fma(_750, cbModelParam._m0[31u].z, fma(_746, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _742)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _951 = (((((fma(_750, cbModelParam._m0[32u].z, fma(_746, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _742)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _953 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_949, _950, _951), 0.0);
        vec4 _960 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_949, _950, _951), 0.0);
        vec4 _967 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_949, _950, _951), 0.0);
        vec4 _974 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_949, _950, _951), 0.0);
        float _986 = exp2((_953.w + (-0.5)) * 20.0) * 2.0;
        float _996 = exp2((_960.w + (-0.5)) * 20.0) * 2.0;
        float _1006 = exp2((_967.w + (-0.5)) * 20.0) * 2.0;
        float _1016 = exp2((_974.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_974.x + (-0.5));
        float _1018 = _1016 * (_974.y + (-0.5));
        float _1019 = _1016 * (_974.z + (-0.5));
        _1023 = _986 * (_953.z + (-0.5));
        _1024 = _986 * (_953.y + (-0.5));
        _1025 = _986 * (_953.x + (-0.5));
        _1026 = _996 * (_960.z + (-0.5));
        _1027 = _996 * (_960.y + (-0.5));
        _1028 = _996 * (_960.x + (-0.5));
        _1029 = _1006 * (_967.z + (-0.5));
        _1030 = _1006 * (_967.y + (-0.5));
        _1031 = _1006 * (_967.x + (-0.5));
        _1032 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        _1033 = isnan(0.0) ? _1018 : (isnan(_1018) ? 0.0 : max(_1018, 0.0));
        _1034 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
    }
    else
    {
        _1023 = _884;
        _1024 = _884;
        _1025 = _884;
        _1026 = _884;
        _1027 = _884;
        _1028 = _884;
        _1029 = _884;
        _1030 = _884;
        _1031 = _884;
        _1032 = _884;
        _1033 = _884;
        _1034 = _884;
    }
    float _1049 = _696 * (-0.5);
    float _1050 = _697 * (-0.5);
    float _1051 = _698 * (-0.5);
    float _1052 = dot(vec4(_1049, _1050, _1051, 1.0), vec4(_1025, _1028, _1031, _1034));
    float _1055 = dot(vec4(_1049, _1050, _1051, 1.0), vec4(_1024, _1027, _1030, _1033));
    float _1058 = dot(vec4(_1049, _1050, _1051, 1.0), vec4(_1023, _1026, _1029, _1032));
    float _1093;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1065 = dot(vec4(_1049, _1050, _1051, 1.0), vec4(_883, _887, _890, _893));
        float _1069 = dot(vec4(_1049, _1050, _1051, 1.0), vec4(_885, _888, _891, _894));
        float _1073 = dot(vec4(_1049, _1050, _1051, 1.0), vec4(_886, _889, _892, _895));
        float _1080 = dot(vec4(cbModelParam._m0[39u]), vec4(_1049, _1050, _1051, 1.0));
        _1093 = dot(vec3(isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0)), isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0)), isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1080) ? 0.0 : (isnan(0.0) ? _1080 : max(0.0, _1080))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1093 = 1.0;
    }
    float _1104;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1095 = dot(vec4(cbModelParam._m0[40u]), vec4(_1049, _1050, _1051, 1.0));
        _1104 = dot(vec3(isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0)), isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0)), isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1095) ? 0.0 : (isnan(0.0) ? _1095 : max(0.0, _1095))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1104 = 1.0;
    }
    float _1108 = (_1104 * cbModelParam._m0[1u].x) + (_1093 * (1.0 - cbModelParam._m0[1u].x));
    float _1114 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1197;
    float _1199;
    float _1201;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1164 = fma(_750, cbModelParam._m0[13u].z, fma(_746, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _742)) + cbModelParam._m0[13u].w;
        float _1168 = fma(_750, cbModelParam._m0[14u].z, fma(_746, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _742)) + cbModelParam._m0[14u].w;
        float _1172 = fma(_750, cbModelParam._m0[15u].z, fma(_746, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _742)) + cbModelParam._m0[15u].w;
        float _1175 = fma(_720, cbModelParam._m0[13u].z, fma(_719, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _718));
        float _1178 = fma(_720, cbModelParam._m0[14u].z, fma(_719, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _718));
        float _1181 = fma(_720, cbModelParam._m0[15u].z, fma(_719, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _718));
        float _1207;
        if (_1175 > 0.0)
        {
            _1207 = abs((1.0 - _1164) / _1175);
        }
        else
        {
            float frontier_phi_54_52_ladder;
            if (_1175 < 0.0)
            {
                frontier_phi_54_52_ladder = abs((_1164 + 1.0) / _1175);
            }
            else
            {
                frontier_phi_54_52_ladder = 5000.0;
            }
            _1207 = frontier_phi_54_52_ladder;
        }
        float _1395;
        if (_1178 > 0.0)
        {
            _1395 = abs((1.0 - _1168) / _1178);
        }
        else
        {
            float frontier_phi_63_59_ladder;
            if (_1178 < 0.0)
            {
                frontier_phi_63_59_ladder = abs((_1168 + 1.0) / _1178);
            }
            else
            {
                frontier_phi_63_59_ladder = 5000.0;
            }
            _1395 = frontier_phi_63_59_ladder;
        }
        float _1749;
        if (_1181 > 0.0)
        {
            _1749 = abs((1.0 - _1172) / _1181);
        }
        else
        {
            float frontier_phi_75_70_ladder;
            if (_1181 < 0.0)
            {
                frontier_phi_75_70_ladder = abs((_1172 + 1.0) / _1181);
            }
            else
            {
                frontier_phi_75_70_ladder = 5000.0;
            }
            _1749 = frontier_phi_75_70_ladder;
        }
        float _1751 = isnan(_1395) ? _1207 : (isnan(_1207) ? _1395 : min(_1207, _1395));
        float _1752 = isnan(_1749) ? _1751 : (isnan(_1751) ? _1749 : min(_1751, _1749));
        float _1756 = (_1752 * _1175) + _1164;
        float _1757 = (_1752 * _1178) + _1168;
        float _1758 = (_1752 * _1181) + _1172;
        float _1759 = _1752 * 9.9999997473787516355514526367188e-05;
        float _1761 = (-1.0) - _1759;
        float _1763 = _1759 + 1.0;
        float frontier_phi_53_75_ladder;
        float frontier_phi_53_75_ladder_1;
        float frontier_phi_53_75_ladder_2;
        if ((_1758 > _1763) || ((_1758 < _1761) || ((_1757 > _1763) || ((_1757 < _1761) || ((_1756 < _1761) || (_1756 > _1763))))))
        {
            frontier_phi_53_75_ladder = 0.0;
            frontier_phi_53_75_ladder_1 = 0.0;
            frontier_phi_53_75_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1992 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1758, cbModelParam._m0[9u].z, fma(_1757, cbModelParam._m0[9u].y, _1756 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1758, cbModelParam._m0[10u].z, fma(_1757, cbModelParam._m0[10u].y, _1756 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1758, cbModelParam._m0[11u].z, fma(_1757, cbModelParam._m0[11u].y, _1756 * cbModelParam._m0[11u].x))), _1114);
            frontier_phi_53_75_ladder = _1992.z * cbModelParam._m0[1u].y;
            frontier_phi_53_75_ladder_1 = _1992.y * cbModelParam._m0[1u].y;
            frontier_phi_53_75_ladder_2 = _1992.x * cbModelParam._m0[1u].y;
        }
        _1197 = frontier_phi_53_75_ladder_2;
        _1199 = frontier_phi_53_75_ladder_1;
        _1201 = frontier_phi_53_75_ladder;
    }
    else
    {
        vec4 _1185 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_718, _719, _720), _1114);
        _1197 = _1185.x * cbModelParam._m0[1u].y;
        _1199 = _1185.y * cbModelParam._m0[1u].y;
        _1201 = _1185.z * cbModelParam._m0[1u].y;
    }
    float _1204 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1292;
    float _1294;
    float _1296;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1256 = fma(_750, cbModelParam._m0[21u].z, fma(_746, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _742)) + cbModelParam._m0[21u].w;
        float _1260 = fma(_750, cbModelParam._m0[22u].z, fma(_746, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _742)) + cbModelParam._m0[22u].w;
        float _1264 = fma(_750, cbModelParam._m0[23u].z, fma(_746, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _742)) + cbModelParam._m0[23u].w;
        float _1267 = fma(_720, cbModelParam._m0[21u].z, fma(_719, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _718));
        float _1270 = fma(_720, cbModelParam._m0[22u].z, fma(_719, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _718));
        float _1273 = fma(_720, cbModelParam._m0[23u].z, fma(_719, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _718));
        float _1400;
        if (_1267 > 0.0)
        {
            _1400 = abs((1.0 - _1256) / _1267);
        }
        else
        {
            float frontier_phi_65_61_ladder;
            if (_1267 < 0.0)
            {
                frontier_phi_65_61_ladder = abs((_1256 + 1.0) / _1267);
            }
            else
            {
                frontier_phi_65_61_ladder = 5000.0;
            }
            _1400 = frontier_phi_65_61_ladder;
        }
        float _1776;
        if (_1270 > 0.0)
        {
            _1776 = abs((1.0 - _1260) / _1270);
        }
        else
        {
            float frontier_phi_77_72_ladder;
            if (_1270 < 0.0)
            {
                frontier_phi_77_72_ladder = abs((_1260 + 1.0) / _1270);
            }
            else
            {
                frontier_phi_77_72_ladder = 5000.0;
            }
            _1776 = frontier_phi_77_72_ladder;
        }
        float _2108;
        if (_1273 > 0.0)
        {
            _2108 = abs((1.0 - _1264) / _1273);
        }
        else
        {
            float frontier_phi_89_84_ladder;
            if (_1273 < 0.0)
            {
                frontier_phi_89_84_ladder = abs((_1264 + 1.0) / _1273);
            }
            else
            {
                frontier_phi_89_84_ladder = 5000.0;
            }
            _2108 = frontier_phi_89_84_ladder;
        }
        float _2110 = isnan(_1776) ? _1400 : (isnan(_1400) ? _1776 : min(_1400, _1776));
        float _2111 = isnan(_2108) ? _2110 : (isnan(_2110) ? _2108 : min(_2110, _2108));
        float _2115 = (_2111 * _1267) + _1256;
        float _2116 = (_2111 * _1270) + _1260;
        float _2117 = (_2111 * _1273) + _1264;
        float _2118 = _2111 * 9.9999997473787516355514526367188e-05;
        float _2119 = (-1.0) - _2118;
        float _2121 = _2118 + 1.0;
        float frontier_phi_62_89_ladder;
        float frontier_phi_62_89_ladder_1;
        float frontier_phi_62_89_ladder_2;
        if ((_2117 > _2121) || ((_2117 < _2119) || ((_2116 > _2121) || ((_2116 < _2119) || ((_2115 < _2119) || (_2115 > _2121))))))
        {
            frontier_phi_62_89_ladder = 0.0;
            frontier_phi_62_89_ladder_1 = 0.0;
            frontier_phi_62_89_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2223 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2117, cbModelParam._m0[17u].z, fma(_2116, cbModelParam._m0[17u].y, _2115 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2117, cbModelParam._m0[18u].z, fma(_2116, cbModelParam._m0[18u].y, _2115 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2117, cbModelParam._m0[19u].z, fma(_2116, cbModelParam._m0[19u].y, _2115 * cbModelParam._m0[19u].x))), _1204);
            frontier_phi_62_89_ladder = _2223.x * cbModelParam._m0[1u].z;
            frontier_phi_62_89_ladder_1 = _2223.y * cbModelParam._m0[1u].z;
            frontier_phi_62_89_ladder_2 = _2223.z * cbModelParam._m0[1u].z;
        }
        _1292 = frontier_phi_62_89_ladder;
        _1294 = frontier_phi_62_89_ladder_1;
        _1296 = frontier_phi_62_89_ladder_2;
    }
    else
    {
        vec4 _1276 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_718, _719, _720), _1204);
        _1292 = _1276.x * cbModelParam._m0[1u].z;
        _1294 = _1276.y * cbModelParam._m0[1u].z;
        _1296 = _1276.z * cbModelParam._m0[1u].z;
    }
    float _1308 = _717 * 0.01200000010430812835693359375;
    float _1310 = _1308 * ((cbModelParam._m0[1u].w * (_1292 - _1197)) + _1197);
    float _1311 = _1308 * ((cbModelParam._m0[1u].w * (_1294 - _1199)) + _1199);
    float _1312 = _1308 * ((cbModelParam._m0[1u].w * (_1296 - _1201)) + _1201);
    float _1333 = fma(_1312, cbSceneParam._m0[89u].z, fma(_1311, cbSceneParam._m0[89u].y, _1310 * cbSceneParam._m0[89u].x));
    float _1336 = fma(_1312, cbSceneParam._m0[90u].z, fma(_1311, cbSceneParam._m0[90u].y, _1310 * cbSceneParam._m0[90u].x));
    float _1339 = fma(_1312, cbSceneParam._m0[91u].z, fma(_1311, cbSceneParam._m0[91u].y, _1310 * cbSceneParam._m0[91u].x));
    float _1374 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1378 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1382 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1386 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1387 = _1374 / _1386;
    float _1388 = _1378 / _1386;
    float _1389 = _1382 / _1386;
    float _1537;
    float _1538;
    float _1539;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1416 = ((uint(_1389 > cbSceneParam._m0[59u].y) + uint(_1389 > cbSceneParam._m0[59u].x)) + uint(_1389 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1417 = _1416 + 43u;
        uint _1425 = _1416 + 44u;
        uint _1433 = _1416 + 45u;
        uint _1441 = _1416 + 46u;
        float _1452 = fma(_1386, cbSceneParam._m0[_1417].w, fma(_1382, cbSceneParam._m0[_1417].z, fma(_1378, cbSceneParam._m0[_1417].y, _1374 * cbSceneParam._m0[_1417].x)));
        float _1456 = fma(_1386, cbSceneParam._m0[_1425].w, fma(_1382, cbSceneParam._m0[_1425].z, fma(_1378, cbSceneParam._m0[_1425].y, _1374 * cbSceneParam._m0[_1425].x)));
        float _1464 = fma(_1386, cbSceneParam._m0[_1441].w, fma(_1382, cbSceneParam._m0[_1441].z, fma(_1378, cbSceneParam._m0[_1441].y, _1374 * cbSceneParam._m0[_1441].x)));
        float _1469 = cbSceneParam._m0[33u].z * _1464;
        float _1471 = cbSceneParam._m0[33u].w * _1464;
        float _1474 = fma(_1386, cbSceneParam._m0[_1433].w, fma(_1382, cbSceneParam._m0[_1433].z, fma(_1378, cbSceneParam._m0[_1433].y, _1374 * cbSceneParam._m0[_1433].x))) / _1464;
        float _1522 = (cbSceneParam._m0[33u].x - sqrt(((_1388 * _1388) + (_1387 * _1387)) + (_1389 * _1389))) * cbSceneParam._m0[33u].y;
        float _2969 = isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0));
        float _1530 = (isnan(1.0) ? _2969 : (isnan(_2969) ? 1.0 : min(_2969, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1469 + _1452) / _1464, (_1471 + _1456) / _1464), _1474), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1471 + _1452) / _1464, (_1456 - _1469) / _1464), _1474), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1452 - _1469) / _1464, (_1456 - _1471) / _1464), _1474), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1452 - _1471) / _1464, (_1469 + _1456) / _1464), _1474), 0.0)).x), vec4(0.25)));
        _1537 = 1.0 - (_1530 * cbSceneParam._m0[34u].x);
        _1538 = 1.0 - (_1530 * cbSceneParam._m0[34u].y);
        _1539 = 1.0 - (_1530 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1537 = 1.0;
        _1538 = 1.0;
        _1539 = 1.0;
    }
    float _1603;
    float _1605;
    float _1607;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1591 = fma(_1386, cbSceneParam._m0[63u].w, fma(_1382, cbSceneParam._m0[63u].z, fma(_1378, cbSceneParam._m0[63u].y, _1374 * cbSceneParam._m0[63u].x)));
        float _1592 = fma(_1386, cbSceneParam._m0[60u].w, fma(_1382, cbSceneParam._m0[60u].z, fma(_1378, cbSceneParam._m0[60u].y, _1374 * cbSceneParam._m0[60u].x))) / _1591;
        float _1593 = fma(_1386, cbSceneParam._m0[61u].w, fma(_1382, cbSceneParam._m0[61u].z, fma(_1378, cbSceneParam._m0[61u].y, _1374 * cbSceneParam._m0[61u].x))) / _1591;
        float frontier_phi_74_73_ladder;
        float frontier_phi_74_73_ladder_1;
        float frontier_phi_74_73_ladder_2;
        if ((((_1592 >= cbSceneParam._m0[64u].x) && (_1593 >= cbSceneParam._m0[64u].y)) && (_1592 <= cbSceneParam._m0[64u].z)) && (_1593 <= cbSceneParam._m0[64u].w))
        {
            float _1789 = fma(_1386, cbSceneParam._m0[62u].w, fma(_1382, cbSceneParam._m0[62u].z, fma(_1378, cbSceneParam._m0[62u].y, _1374 * cbSceneParam._m0[62u].x))) / _1591;
            float _1793 = isnan(cbSceneParam._m0[41u].w) ? _1789 : (isnan(_1789) ? cbSceneParam._m0[41u].w : max(_1789, cbSceneParam._m0[41u].w));
            float _1836 = (cbSceneParam._m0[33u].x - sqrt(((_1388 * _1388) + (_1387 * _1387)) + (_1389 * _1389))) * cbSceneParam._m0[33u].y;
            float _2985 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
            float _1843 = (isnan(1.0) ? _2985 : (isnan(_2985) ? 1.0 : min(_2985, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1592, cbSceneParam._m0[33u].w + _1593), _1793), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1592, _1593 - cbSceneParam._m0[33u].z), _1793), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1592 - cbSceneParam._m0[33u].z, _1593 - cbSceneParam._m0[33u].w), _1793), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1592 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1593), _1793), 0.0)).x), vec4(0.25)));
            float _1847 = 1.0 - (_1843 * cbSceneParam._m0[34u].x);
            float _1848 = 1.0 - (_1843 * cbSceneParam._m0[34u].y);
            float _1849 = 1.0 - (_1843 * cbSceneParam._m0[34u].z);
            frontier_phi_74_73_ladder = isnan(_1849) ? _1539 : (isnan(_1539) ? _1849 : min(_1539, _1849));
            frontier_phi_74_73_ladder_1 = isnan(_1848) ? _1538 : (isnan(_1538) ? _1848 : min(_1538, _1848));
            frontier_phi_74_73_ladder_2 = isnan(_1847) ? _1537 : (isnan(_1537) ? _1847 : min(_1537, _1847));
        }
        else
        {
            frontier_phi_74_73_ladder = _1539;
            frontier_phi_74_73_ladder_1 = _1538;
            frontier_phi_74_73_ladder_2 = _1537;
        }
        _1603 = frontier_phi_74_73_ladder_2;
        _1605 = frontier_phi_74_73_ladder_1;
        _1607 = frontier_phi_74_73_ladder;
    }
    else
    {
        _1603 = _1537;
        _1605 = _1538;
        _1607 = _1539;
    }
    uint _1609 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1613 = floatBitsToUint(cbInstanceData._m0[_1609 + 5u]);
    uint _1615 = _1613.x * 14u;
    uint _1616 = _1615 + 13u;
    float _1621 = _717 + (-1.0);
    float _1624 = (cbLight._m0[_1616].x * _1621) + 1.0;
    float _1625 = (cbLight._m0[_1616].y * _1621) + 1.0;
    uint _1626 = _1615 + 8u;
    float _1637 = cbLight._m0[_1615].x + _696;
    float _1638 = cbLight._m0[_1615].y + _697;
    float _1639 = cbLight._m0[_1615].z + _698;
    float _1643 = inversesqrt(dot(vec3(_1637, _1638, _1639), vec3(_1637, _1638, _1639)));
    float _1647 = dot(vec3(0.0), vec3(cbLight._m0[_1615].xyz));
    float _3011 = isnan(0.0) ? _1647 : (isnan(_1647) ? 0.0 : max(_1647, 0.0));
    float _1650 = isnan(1.0) ? _3011 : (isnan(_3011) ? 1.0 : min(_3011, 1.0));
    float _1651 = dot(vec3(0.0), vec3(_696, _697, _698));
    float _3022 = isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0));
    float _1654 = isnan(1.0) ? _3022 : (isnan(_3022) ? 1.0 : min(_3022, 1.0));
    float _1655 = dot(vec3(cbLight._m0[_1615].xyz), vec3(_1637 * _1643, _1638 * _1643, _1639 * _1643));
    float _3033 = isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0));
    float _1666 = (exp2(log2(1.0 - (isnan(1.0) ? _3033 : (isnan(_3033) ? 1.0 : min(_3033, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1672 = (0.5 / ((_1650 + 9.9999999392252902907785028219223e-09) + _1654)) * _1650;
    float _3044 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
    float _1674 = (isnan(1.0) ? _3044 : (isnan(_3044) ? 1.0 : min(_3044, 1.0))) * 0.31831014156341552734375;
    float _1676 = isnan(1.0) ? _1624 : (isnan(_1624) ? 1.0 : min(_1624, 1.0));
    uint _1689 = _1615 + 9u;
    uint _1695 = _1615 | 1u;
    float _1701 = cbLight._m0[_1695].x + _696;
    float _1702 = cbLight._m0[_1695].y + _697;
    float _1703 = cbLight._m0[_1695].z + _698;
    float _1707 = inversesqrt(dot(vec3(_1701, _1702, _1703), vec3(_1701, _1702, _1703)));
    float _1711 = dot(vec3(0.0), vec3(cbLight._m0[_1695].xyz));
    float _3060 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
    float _1714 = isnan(1.0) ? _3060 : (isnan(_3060) ? 1.0 : min(_3060, 1.0));
    float _1715 = dot(vec3(cbLight._m0[_1695].xyz), vec3(_1701 * _1707, _1702 * _1707, _1703 * _1707));
    float _3071 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
    float _1724 = (exp2(log2(1.0 - (isnan(1.0) ? _3071 : (isnan(_3071) ? 1.0 : min(_3071, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1728 = (0.5 / ((_1714 + 9.9999999392252902907785028219223e-09) + _1654)) * _1714;
    float _3082 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
    float _1730 = (isnan(1.0) ? _3082 : (isnan(_3082) ? 1.0 : min(_3082, 1.0))) * 0.31831014156341552734375;
    float _1731 = isnan(1.0) ? _1625 : (isnan(_1625) ? 1.0 : min(_1625, 1.0));
    float _1741 = (((_1724 * cbLight._m0[_1689].x) * _1730) * _1731) + ((((cbLight._m0[_1626].x * _1603) * _1666) * _1674) * _1676);
    float _1742 = (((_1724 * cbLight._m0[_1689].y) * _1730) * _1731) + ((((cbLight._m0[_1626].y * _1605) * _1666) * _1674) * _1676);
    float _1743 = (((_1724 * cbLight._m0[_1689].z) * _1730) * _1731) + ((((cbLight._m0[_1626].z * _1607) * _1666) * _1674) * _1676);
    float _1907;
    float _1909;
    float _1911;
    if (_1613.y == 0u)
    {
        uvec4 _1861 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1862 = _1861.x;
        uint _1873 = uint((float(_1861.y) * floor(float(uint(cbSceneParam._m0[85u].y * _705) / _1862))) + floor(float(uint(cbSceneParam._m0[85u].x * _704) / _1862)));
        float _1883 = (log2(_1389 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1884 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
        uint _1887 = uint(isnan(14.0) ? _1884 : (isnan(_1884) ? 14.0 : min(_1884, 14.0)));
        uvec4 _1892 = texelFetch(g_lightClusterGridBuffer, int(((_1887 << 2u) + (_1873 << 6u)) >> 2u));
        uint _1893 = _1892.x;
        uint _1894 = _1861.z;
        float _2001;
        float _2003;
        float _2005;
        if (((((1u << ((_1894 >> 4u) & 15u)) + 4294967295u) & _1893) == 0u) || ((_1894 & 240u) == 0u))
        {
            _2001 = 0.0;
            _2003 = 0.0;
            _2005 = 0.0;
        }
        else
        {
            float _2002;
            float _2004;
            float _2006;
            float _2154 = 0.0;
            float _2155 = 0.0;
            float _2156 = 0.0;
            uint _2157 = 0u;
            uint _2166;
            bool _2167;
            for (;;)
            {
                _2166 = texelFetch(g_lightClassification, int((((_1887 << 5u) + (_1873 << 9u)) + (_2157 << 2u)) >> 2u)).x;
                _2167 = _2166 == 0u;
                float frontier_phi_98_pred;
                float frontier_phi_98_pred_1;
                float frontier_phi_98_pred_2;
                if (_2167)
                {
                    frontier_phi_98_pred = _2156;
                    frontier_phi_98_pred_1 = _2155;
                    frontier_phi_98_pred_2 = _2154;
                }
                else
                {
                    float _2290;
                    float _2291;
                    float _2292;
                    uint _2293;
                    _2290 = _2154;
                    _2291 = _2155;
                    _2292 = _2156;
                    _2293 = _2166;
                    float _2228;
                    float _2229;
                    float _2230;
                    for (;;)
                    {
                        uint _2297 = uint(findLSB(_2293)) + (_2157 << 5u);
                        uint _2294 = (_2293 + 4294967295u) & _2293;
                        uint _2299 = _2297 * 48u;
                        vec4 _2313 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2299)).x, texelFetch(g_PointLightRenderingBuffer, int(_2299 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2299 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2299 + 3u)).x));
                        uint _2330 = (_2297 * 48u) + 8u;
                        vec3 _2341 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2330)).x, texelFetch(g_PointLightRenderingBuffer, int(_2330 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2330 + 2u)).x));
                        float _2345 = _2313.x - _1387;
                        float _2346 = _2313.y - _1388;
                        float _2347 = _2313.z - _1389;
                        float _2348 = dot(vec3(_2345, _2346, _2347), vec3(_2345, _2346, _2347));
                        float _2351 = inversesqrt(_2348);
                        float _2360 = 1.0 - (_2348 * _2313.w);
                        float _3108 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0));
                        float _2362 = sqrt(_2348) * uintBitsToFloat(uvec4(_2320, _2321, _2322, texelFetch(g_PointLightRenderingBuffer, int(((_2297 * 48u) + 4u) + 3u)).x)).w;
                        float _2365 = 1.39999997615814208984375 / (_2362 + 1.39999997615814208984375);
                        float _2366 = _2365 * _2365;
                        float _2369 = ((1.0 - _2366) * dot(vec3(0.0), vec3(_2351 * _2345, _2351 * _2346, _2351 * _2347))) + _2366;
                        float _2371 = (-0.0) - _1387;
                        float _2372 = (-0.0) - _1388;
                        float _2373 = (-0.0) - _1389;
                        float _2377 = inversesqrt(dot(vec3(_2371, _2372, _2373), vec3(_2371, _2372, _2373)));
                        float _2381 = dot(vec3(0.0), vec3(_2377 * _2371, _2377 * _2372, _2377 * _2373));
                        float _3119 = isnan(0.0) ? _2381 : (isnan(_2381) ? 0.0 : max(_2381, 0.0));
                        float _3130 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
                        float _2385 = isnan(1.0) ? _3130 : (isnan(_3130) ? 1.0 : min(_3130, 1.0));
                        float _2389 = (0.5 / (((isnan(1.0) ? _3119 : (isnan(_3119) ? 1.0 : min(_3119, 1.0))) + 9.9999999392252902907785028219223e-09) + _2385)) * _2385;
                        float _3141 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
                        float _2398 = (((isnan(1.0) ? _3141 : (isnan(_3141) ? 1.0 : min(_3141, 1.0))) * 3.1415927410125732421875) / (((_2362 * _2362) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _3108 : (isnan(_3108) ? 1.0 : min(_3108, 1.0)));
                        _2228 = (_2398 * _2341.x) + _2290;
                        _2229 = (_2398 * _2341.y) + _2291;
                        _2230 = (_2398 * _2341.z) + _2292;
                        if (_2294 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2290 = _2228;
                            _2291 = _2229;
                            _2292 = _2230;
                            _2293 = _2294;
                        }
                    }
                    frontier_phi_98_pred = _2230;
                    frontier_phi_98_pred_1 = _2229;
                    frontier_phi_98_pred_2 = _2228;
                }
                _2006 = frontier_phi_98_pred;
                _2004 = frontier_phi_98_pred_1;
                _2002 = frontier_phi_98_pred_2;
                uint _2158 = _2157 + 1u;
                if (_2158 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2154 = _2002;
                    _2155 = _2004;
                    _2156 = _2006;
                    _2157 = _2158;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2001 = _2002;
            _2003 = _2004;
            _2005 = _2006;
        }
        uvec4 _2009 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2010 = _2009.z;
        uint _2012 = (_2010 >> 8u) & 15u;
        float _2134;
        float _2136;
        float _2138;
        if (((4294967295u << _2012) & _1893) == 0u)
        {
            _2134 = _2001;
            _2136 = _2003;
            _2138 = _2005;
        }
        else
        {
            float _2150 = inversesqrt(dot(vec3(_1387, _1388, _1389), vec3(_1387, _1388, _1389)));
            float frontier_phi_91_92_ladder;
            float frontier_phi_91_92_ladder_1;
            float frontier_phi_91_92_ladder_2;
            if (_2012 < ((_2010 >> 12u) & 15u))
            {
                float _2135;
                float _2137;
                float _2139;
                float _2276 = _2001;
                float _2277 = _2003;
                float _2278 = _2005;
                uint _2279 = _2012;
                uint _2288;
                bool _2289;
                for (;;)
                {
                    _2288 = texelFetch(g_lightClassification, int((((_1887 << 5u) + (_1873 << 9u)) + (_2279 << 2u)) >> 2u)).x;
                    _2289 = _2288 == 0u;
                    float frontier_phi_104_pred;
                    float frontier_phi_104_pred_1;
                    float frontier_phi_104_pred_2;
                    if (_2289)
                    {
                        frontier_phi_104_pred = _2278;
                        frontier_phi_104_pred_1 = _2277;
                        frontier_phi_104_pred_2 = _2276;
                    }
                    else
                    {
                        float _2403;
                        float _2404;
                        float _2405;
                        float _2624;
                        float _2625;
                        float _2626;
                        float _2413 = _2276;
                        float _2414 = _2277;
                        float _2415 = _2278;
                        uint _2416 = _2288;
                        uint _2417;
                        uint _2427;
                        vec4 _2442;
                        float _2443;
                        vec3 _2455;
                        vec4 _2470;
                        vec4 _2485;
                        float _2531;
                        bool _2532;
                        for (;;)
                        {
                            _2427 = ((_2279 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2416));
                            _2417 = (_2416 + 4294967295u) & _2416;
                            uint _2429 = _2427 * 40u;
                            _2442 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2429)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2429 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2429 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2429 + 3u)).x));
                            _2443 = _2442.w;
                            uint _2445 = (_2427 * 40u) + 8u;
                            _2455 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2445)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2445 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2445 + 2u)).x));
                            uint _2457 = (_2427 * 40u) + 16u;
                            _2470 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2457)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2457 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2457 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2457 + 3u)).x));
                            uint _2472 = (_2427 * 40u) + 20u;
                            _2485 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2472)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2472 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2472 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2472 + 3u)).x));
                            uint _2487 = (_2427 * 40u) + 24u;
                            vec4 _2500 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2487)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2487 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2487 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2487 + 3u)).x));
                            uint _2506 = (_2427 * 40u) + 28u;
                            vec4 _2519 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2506)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2506 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2506 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2506 + 3u)).x));
                            _2531 = fma(_1389, _2519.z, fma(_1388, _2519.y, _2519.x * _1387)) + _2519.w;
                            _2532 = !((fma(_1389, _2500.z, fma(_1388, _2500.y, _2500.x * _1387)) + _2500.w) <= 0.0);
                            float frontier_phi_110_pred;
                            float frontier_phi_110_pred_1;
                            float frontier_phi_110_pred_2;
                            if (_2532)
                            {
                                float _2566 = _2442.x - _1387;
                                float _2567 = _2442.y - _1388;
                                float _2568 = _2442.z - _1389;
                                float _2569 = dot(vec3(_2566, _2567, _2568), vec3(_2566, _2567, _2568));
                                float _2572 = inversesqrt(_2569);
                                float _2579 = 1.0 - (_2569 / (_2443 * _2443));
                                float _3152 = isnan(0.0) ? _2579 : (isnan(_2579) ? 0.0 : max(_2579, 0.0));
                                float _2581 = sqrt(_2569) * uintBitsToFloat(uvec4(_2535, _2536, _2537, texelFetch(g_SpotLightRenderingBuffer, int(((_2427 * 40u) + 4u) + 3u)).x)).w;
                                float _2583 = 1.39999997615814208984375 / (_2581 + 1.39999997615814208984375);
                                float _2584 = _2583 * _2583;
                                float _2587 = (fma(_1389, _2470.z, fma(_1388, _2470.y, _2470.x * _1387)) + _2470.w) / _2531;
                                float _2588 = (fma(_1389, _2485.z, fma(_1388, _2485.y, _2485.x * _1387)) + _2485.w) / _2531;
                                float _2592 = 1.0 - dot(vec2(_2587, _2588), vec2(_2587, _2588));
                                float _3163 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
                                float _2600 = dot(vec3(0.0), vec3((-0.0) - (_1387 * _2150), (-0.0) - (_1388 * _2150), (-0.0) - (_1389 * _2150)));
                                float _3174 = isnan(0.0) ? _2600 : (isnan(_2600) ? 0.0 : max(_2600, 0.0));
                                float _2608 = ((1.0 - _2584) * dot(vec3(0.0), vec3(_2572 * _2566, _2572 * _2567, _2572 * _2568))) + _2584;
                                float _3185 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
                                float _2609 = isnan(1.0) ? _3185 : (isnan(_3185) ? 1.0 : min(_3185, 1.0));
                                float _2613 = (0.5 / (((isnan(1.0) ? _3174 : (isnan(_3174) ? 1.0 : min(_3174, 1.0))) + 9.9999999392252902907785028219223e-09) + _2609)) * _2609;
                                float _3196 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0));
                                float _2620 = ((isnan(1.0) ? _3163 : (isnan(_3163) ? 1.0 : min(_3163, 1.0))) * (isnan(1.0) ? _3152 : (isnan(_3152) ? 1.0 : min(_3152, 1.0)))) * (((isnan(1.0) ? _3196 : (isnan(_3196) ? 1.0 : min(_3196, 1.0))) * 3.1415927410125732421875) / (((_2581 * _2581) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_110_pred = _2620 * _2455.z;
                                frontier_phi_110_pred_1 = _2620 * _2455.y;
                                frontier_phi_110_pred_2 = _2620 * _2455.x;
                            }
                            else
                            {
                                frontier_phi_110_pred = 0.0;
                                frontier_phi_110_pred_1 = 0.0;
                                frontier_phi_110_pred_2 = 0.0;
                            }
                            _2626 = frontier_phi_110_pred;
                            _2625 = frontier_phi_110_pred_1;
                            _2624 = frontier_phi_110_pred_2;
                            _2403 = _2624 + _2413;
                            _2404 = _2625 + _2414;
                            _2405 = _2626 + _2415;
                            if (_2417 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2413 = _2403;
                                _2414 = _2404;
                                _2415 = _2405;
                                _2416 = _2417;
                                continue;
                            }
                        }
                        frontier_phi_104_pred = _2405;
                        frontier_phi_104_pred_1 = _2404;
                        frontier_phi_104_pred_2 = _2403;
                    }
                    _2139 = frontier_phi_104_pred;
                    _2137 = frontier_phi_104_pred_1;
                    _2135 = frontier_phi_104_pred_2;
                    uint _2280 = _2279 + 1u;
                    if (_2280 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2276 = _2135;
                        _2277 = _2137;
                        _2278 = _2139;
                        _2279 = _2280;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_91_92_ladder = _2137;
                frontier_phi_91_92_ladder_1 = _2135;
                frontier_phi_91_92_ladder_2 = _2139;
            }
            else
            {
                frontier_phi_91_92_ladder = _2003;
                frontier_phi_91_92_ladder_1 = _2001;
                frontier_phi_91_92_ladder_2 = _2005;
            }
            _2134 = frontier_phi_91_92_ladder_1;
            _2136 = frontier_phi_91_92_ladder;
            _2138 = frontier_phi_91_92_ladder_2;
        }
        float _2143 = isnan(1.0) ? _717 : (isnan(_717) ? 1.0 : min(_717, 1.0));
        _1907 = ((_2134 * 0.039999999105930328369140625) * _2143) + _1741;
        _1909 = ((_2136 * 0.039999999105930328369140625) * _2143) + _1742;
        _1911 = ((_2138 * 0.039999999105930328369140625) * _2143) + _1743;
    }
    else
    {
        _1907 = _1741;
        _1909 = _1742;
        _1911 = _1743;
    }
    uint _1918 = (_1609 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1933 = (cbInstanceData._m0[_1918].x * ((_666 * ((_616.x * cbMtdParam._m0[14u].x) - _548)) + _548)) + ((_1907 + ((isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0))) * _1108)) * cbPerFrame._m0[3u].x);
    float _1934 = (cbInstanceData._m0[_1918].y * ((_666 * ((_616.y * cbMtdParam._m0[14u].y) - _549)) + _549)) + ((_1909 + ((isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0))) * _1108)) * cbPerFrame._m0[3u].x);
    float _1935 = (cbInstanceData._m0[_1918].z * ((_666 * ((_616.z * cbMtdParam._m0[14u].z) - _550)) + _550)) + ((_1911 + ((isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0))) * _1108)) * cbPerFrame._m0[3u].x);
    uint _1939 = _1609 + 6u;
    float _1947 = _704 / cbSceneParam._m0[86u].x;
    float _1948 = _705 / cbSceneParam._m0[86u].y;
    vec4 _1962 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1947, _1948, (log2((isnan(cbSceneParam._m0[77u].w) ? _691 : (isnan(_691) ? cbSceneParam._m0[77u].w : min(_691, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1964 = _1962.x;
    float _1965 = _1962.y;
    float _1966 = _1962.z;
    float _1967 = _1962.w;
    float _2057;
    float _2059;
    float _2061;
    float _2063;
    if (_691 > cbSceneParam._m0[78u].w)
    {
        float _2020 = isnan(_691) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _691 : min(cbSceneParam._m0[80u].w, _691));
        float _2021 = _2020 / _691;
        float _2032 = _2021 * _267;
        float _2033 = _268 * _2021;
        float _2034 = (-0.0) - _2033;
        float _2035 = _2021 * _269;
        float _2037 = (cbSceneParam._m0[77u].w * _2034) / _2020;
        float _2038 = _2037 + cbSceneParam._m0[79u].w;
        float _2039 = cbSceneParam._m0[79u].w - _2033;
        float _2045 = sqrt(((_2032 * _2032) + (_2033 * _2033)) + (_2035 * _2035));
        float _2048 = (1.0 - (cbSceneParam._m0[77u].w / _2020)) * _2045;
        float _2053 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2055 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2238;
        if (abs((_2034 - _2037) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2238 = ((((_2038 > 0.0) ? exp2(_2053 * _2038) : (2.0 - exp2(_2055 * _2038))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2048;
        }
        else
        {
            float _2180 = 1.0 / cbSceneParam._m0[80u].x;
            float _2181 = isnan(_2039) ? _2038 : (isnan(_2038) ? _2039 : max(_2038, _2039));
            float _2182 = isnan(_2039) ? _2038 : (isnan(_2038) ? _2039 : min(_2038, _2039));
            float _2191 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : min(_2181, 0.0));
            float _2192 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : min(_2182, 0.0));
            _2238 = ((abs(_2045 / _2034) * cbSceneParam._m0[80u].y) * ((((_2191 - _2192) * 2.0) - ((exp2(_2053 * (isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0)))) - exp2(_2053 * (isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0))))) * _2180)) - ((exp2(_2055 * _2191) - exp2(_2055 * _2192)) * _2180))) + (_2048 * cbSceneParam._m0[80u].z);
        }
        vec4 _2240 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1947, _1948, 1.0), 0.0);
        float _2249 = exp2((_2238 * (-1.44269502162933349609375)) * (1.0 - _2240.w));
        float _2250 = log2(_2249);
        float _2266 = log2(_1967);
        _2057 = (exp2(_2266 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2250 * cbSceneParam._m0[78u].x)) * _2240.x) / cbSceneParam._m0[78u].x)) + _1964;
        _2059 = (exp2(_2266 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2250 * cbSceneParam._m0[78u].y)) * _2240.y) / cbSceneParam._m0[78u].y)) + _1965;
        _2061 = (exp2(_2266 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2250 * cbSceneParam._m0[78u].z)) * _2240.z) / cbSceneParam._m0[78u].z)) + _1966;
        _2063 = _2249 * _1967;
    }
    else
    {
        _2057 = _1964;
        _2059 = _1965;
        _2061 = _1966;
        _2063 = _1967;
    }
    float _2075 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2076 = _2075 == 3.0;
    float _2078 = log2(_2063);
    float _2085 = exp2(_2078 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0)));
    float _2086 = exp2(_2078 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0)));
    float _2087 = exp2(_2078 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0)));
    float _2096 = (_2075 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2096 * (_2076 ? _2085 : (_2085 + (cbSceneParam._m0[72u].w * _2057)));
    SV_Target.y = _2096 * (_2076 ? _2086 : (_2086 + (cbSceneParam._m0[72u].w * _2059)));
    SV_Target.z = _2096 * (_2076 ? _2087 : (_2087 + (cbSceneParam._m0[72u].w * _2061)));
    SV_Target.w = cbInstanceData._m0[_1939].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1939].w;
}


