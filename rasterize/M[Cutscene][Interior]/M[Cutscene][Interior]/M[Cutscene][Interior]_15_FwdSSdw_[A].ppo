#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1182;
float _3342;
float _3343;
float _3344;
float _3345;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _200 = _199 * _192;
    float _201 = _199 * _193;
    float _202 = _199 * _194;
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = _206 * NORMAL.x;
    float _208 = _206 * NORMAL.y;
    float _209 = _206 * NORMAL.z;
    float _213 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _214 = _213 * TANGENT.x;
    float _215 = _213 * TANGENT.y;
    float _216 = _213 * TANGENT.z;
    float _261 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _271 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _261);
    float _272 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _261);
    float _273 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _261);
    vec4 _286 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _289 = _286.x;
    vec4 _307 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _324 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _289) + cbMtdParam._m0[12u].x) * _307.x;
    float _326 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _289) + cbMtdParam._m0[12u].y) * _307.y;
    float _328 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _289) + cbMtdParam._m0[12u].z) * _307.z;
    vec4 _346 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _382 = cbMtdParam._m0[24u].x + _271;
    float _383 = cbMtdParam._m0[24u].y + _272;
    float _384 = cbMtdParam._m0[24u].z + _273;
    float _398 = (-0.0) - dot(vec3(_382, _383, _384), vec3(_200, _201, _202));
    float _399 = (-0.0) - dot(vec3(_382, _383, _384), vec3(_214, _215, _216));
    float _400 = (-0.0) - dot(vec3(_382, _383, _384), vec3((-0.0) - _207, (-0.0) - _208, (-0.0) - _209));
    float _404 = inversesqrt(dot(vec3(_398, _399, _400), vec3(_398, _399, _400)));
    float _407 = _404 * _400;
    float _408 = (_404 * _398) + ((cbMtdParam._m0[22u].x * _289) * ((_346.x * 2.0) + (-1.0)));
    float _409 = (_404 * _399) + ((cbMtdParam._m0[22u].y * _289) * ((_346.y * 2.0) + (-1.0)));
    float _410 = _408 * cbMtdParam._m0[20u].w;
    float _411 = _409 * cbMtdParam._m0[20u].z;
    float _412 = fract(TEXCOORD.x);
    float _413 = fract(TEXCOORD.y);
    float _419;
    if (_410 > 0.0)
    {
        _419 = (1.0 - _412) / _410;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_410 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _412) / _410;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _419 = frontier_phi_3_2_ladder;
    }
    float _427;
    if (_411 > 0.0)
    {
        _427 = (1.0 - _413) / _411;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_411 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _413) / _411;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _427 = frontier_phi_7_6_ladder;
    }
    bool _429 = _407 > 0.0;
    float _431 = _429 ? (cbMtdParam._m0[16u].x / _407) : 5000.0;
    float _432 = isnan(_427) ? _419 : (isnan(_419) ? _427 : min(_419, _427));
    float _433 = isnan(_431) ? _432 : (isnan(_432) ? _431 : min(_432, _431));
    float _437 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _438 = _412 + (-0.5);
    float _441 = _413 + (-0.5);
    float _444 = ((_433 * _407) + _437) / _437;
    vec4 _469 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (((((_438 + (_433 * _410)) / _444) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (((((_441 + (_433 * _411)) / _444) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    float _482 = (_469.x * _289) * cbMtdParam._m0[9u].x;
    float _483 = (_469.y * _289) * cbMtdParam._m0[9u].y;
    float _484 = (_469.z * _289) * cbMtdParam._m0[9u].z;
    float _503 = _408 * cbMtdParam._m0[22u].w;
    float _504 = _409 * cbMtdParam._m0[22u].z;
    bool _505 = _503 > 0.0;
    float _510;
    if (_505)
    {
        _510 = (1.0 - _412) / _503;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_503 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _412) / _503;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _510 = frontier_phi_11_10_ladder;
    }
    bool _512 = _504 > 0.0;
    float _517;
    if (_512)
    {
        _517 = (1.0 - _413) / _504;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_504 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _413) / _504;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _517 = frontier_phi_15_14_ladder;
    }
    float _520 = _429 ? (cbMtdParam._m0[18u].x / _407) : 5000.0;
    float _521 = isnan(_517) ? _510 : (isnan(_510) ? _517 : min(_510, _517));
    float _522 = isnan(_520) ? _521 : (isnan(_521) ? _520 : min(_521, _520));
    float _526 = cbMtdParam._m0[19u].y * cbMtdParam._m0[18u].x;
    float _530 = ((_522 * _407) + _526) / _526;
    float _535 = cbMtdParam._m0[19u].x - cbMtdParam._m0[20u].x * trunc(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    float _537 = floor(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    vec4 _553 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_438 + (_522 * _503)) / _530) + 0.5) + _535) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_441 + (_522 * _504)) / _530) + 0.5) + _537) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[0u].w));
    float _568;
    if (_505)
    {
        _568 = (1.0 - _412) / _503;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_503 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _412) / _503;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _568 = frontier_phi_19_18_ladder;
    }
    float _574;
    if (_512)
    {
        _574 = (1.0 - _413) / _504;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_504 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _413) / _504;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _574 = frontier_phi_23_22_ladder;
    }
    float _576 = isnan(_574) ? _568 : (isnan(_568) ? _574 : min(_568, _574));
    float _577 = isnan(_520) ? _576 : (isnan(_576) ? _520 : min(_576, _520));
    float _584 = ((_577 * _407) + _526) / _526;
    vec4 _604 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_438 + (_577 * _503)) / _584) + 0.5) + _535) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_441 + (_577 * _504)) / _584) + 0.5) + _537) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[8u].w));
    float _606 = _604.x;
    float _616 = _289 * 0.1500000059604644775390625;
    float _627 = (_616 * ((_482 - _324) + (((((cbMtdParam._m0[10u].x * _289) * _553.x) - _482) * _289) * _606))) + _324;
    float _628 = (_616 * ((_483 - _326) + (((((cbMtdParam._m0[10u].y * _289) * _553.y) - _483) * _289) * _606))) + _326;
    float _629 = (_616 * ((_484 - _328) + (((((cbMtdParam._m0[10u].z * _289) * _553.z) - _484) * _289) * _606))) + _328;
    vec4 _642 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _646 = _642.z;
    float _649 = (_642.x * 2.0) + (-1.0);
    float _650 = (_642.y * 2.0) + (-1.0);
    float _651 = dot(vec2(_649, _650), vec2(_649, _650));
    float _3384 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
    float _656 = sqrt(1.0 - (isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0))));
    float _659 = fma(_656, _207, fma(_650, _214, _649 * _200));
    float _662 = fma(_656, _208, fma(_650, _215, _649 * _201));
    float _665 = fma(_656, _209, fma(_650, _216, _649 * _202));
    float _669 = inversesqrt(dot(vec3(_659, _662, _665), vec3(_659, _662, _665)));
    float _670 = _669 * _659;
    float _671 = _669 * _662;
    float _672 = _669 * _665;
    float _3395 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _673 = isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0));
    float _3406 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _3417 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _3428 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _692 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _696 = inversesqrt(dot(vec3(_271, _272, _273), vec3(_271, _272, _273)));
    float _697 = _271 * _696;
    float _698 = _272 * _696;
    float _699 = _273 * _696;
    vec4 _704 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _706 = _704.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _863 = sqrt(((_271 * _271) + (_272 * _272)) + (_273 * _273));
        float _869 = (cbMatDynParam._m0[5u].x * _863) + cbMatDynParam._m0[5u].y;
        float _3439 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _870 = isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0));
        float _874 = (cbMatDynParam._m0[5u].z * _863) + cbMatDynParam._m0[5u].w;
        float _3450 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3450 : (isnan(_3450) ? 1.0 : min(_3450, 1.0))) - _870)) + _870) < ((_706 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _718 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _719 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _738 = fma(_672, cbSceneParam._m0[5u].z, fma(_671, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _670));
    float _741 = fma(_672, cbSceneParam._m0[6u].z, fma(_671, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _670));
    float _744 = fma(_672, cbSceneParam._m0[7u].z, fma(_671, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _670));
    uint _757 = uint(roundEven(NORMAL.w)) * 13u;
    uint _759 = _757 + 9u;
    uint _760 = _759 + uint(cbMatDynParam._m0[0u].w);
    float _766 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0)))) * cbInstanceData._m0[_760].x;
    float _767 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0)))) * cbInstanceData._m0[_760].y;
    float _768 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0)))) * cbInstanceData._m0[_760].z;
    float _3461 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _769 = isnan(1.0) ? _3461 : (isnan(_3461) ? 1.0 : min(_3461, 1.0));
    float _3472 = isnan(0.0) ? _767 : (isnan(_767) ? 0.0 : max(_767, 0.0));
    float _770 = isnan(1.0) ? _3472 : (isnan(_3472) ? 1.0 : min(_3472, 1.0));
    float _3483 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _771 = isnan(1.0) ? _3483 : (isnan(_3483) ? 1.0 : min(_3483, 1.0));
    vec4 _780 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _718, cbSceneParam._m0[86u].y * _719));
    float _783 = _780.x * TEXCOORD_4.z;
    float _784 = dot(vec3(_670, _671, _672), vec3(_697, _698, _699));
    float _787 = _784 * 2.0;
    float _791 = (_787 * _670) - _697;
    float _792 = (_787 * _671) - _698;
    float _793 = (_787 * _672) - _699;
    float _797 = abs(dot(vec3(_697, _698, _699), vec3(_670, _671, _672)));
    float _3494 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
    float _799 = sqrt(_673);
    float _812 = exp2((_799 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3494 : (isnan(_3494) ? 1.0 : min(_3494, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_799 * 3.0));
    float _844 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _848 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _852 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1181;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _908 = fma(_852, cbModelParam._m0[26u].z, fma(_848, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _844));
        float _912 = fma(_852, cbModelParam._m0[27u].z, fma(_848, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _844));
        float _916 = fma(_852, cbModelParam._m0[28u].z, fma(_848, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _844));
        float _939 = _844 + _670;
        float _940 = _848 + _671;
        float _941 = _852 + _672;
        float _951 = fma(_941, cbModelParam._m0[26u].z, fma(_940, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _939)) - _908;
        float _952 = fma(_941, cbModelParam._m0[27u].z, fma(_940, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _939)) - _912;
        float _953 = fma(_941, cbModelParam._m0[28u].z, fma(_940, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _939)) - _916;
        float _957 = inversesqrt(dot(vec3(_951, _952, _953), vec3(_951, _952, _953)));
        float _970 = ((_957 * _951) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_908 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _971 = ((_957 * _952) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_912 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _972 = ((_957 * _953) / cbModelParam._m0[34u].z) + ((((((_916 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _975 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_970, _971, _972), 0.0);
        vec4 _982 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_970, _971, _972), 0.0);
        vec4 _989 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_970, _971, _972), 0.0);
        vec4 _996 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_970, _971, _972), 0.0);
        float _1009 = exp2((_975.w + (-0.5)) * 20.0) * 2.0;
        float _1010 = _1009 * (_975.x + (-0.5));
        float _1011 = _1009 * (_975.y + (-0.5));
        float _1012 = _1009 * (_975.z + (-0.5));
        float _1019 = exp2((_982.w + (-0.5)) * 20.0) * 2.0;
        float _1020 = _1019 * (_982.x + (-0.5));
        float _1021 = _1019 * (_982.y + (-0.5));
        float _1022 = _1019 * (_982.z + (-0.5));
        float _1029 = exp2((_989.w + (-0.5)) * 20.0) * 2.0;
        float _1030 = _1029 * (_989.x + (-0.5));
        float _1031 = _1029 * (_989.y + (-0.5));
        float _1032 = _1029 * (_989.z + (-0.5));
        float _1039 = exp2((_996.w + (-0.5)) * 20.0) * 2.0;
        float _1040 = _1039 * (_996.x + (-0.5));
        float _1041 = _1039 * (_996.y + (-0.5));
        float _1042 = _1039 * (_996.z + (-0.5));
        float _1043 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1044 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1045 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1046 = _1010 * 0.5;
        float _1047 = _1020 * 0.5;
        float _1048 = _1030 * 0.5;
        float _1049 = dot(vec3(_1046, _1047, _1048), vec3(_1046, _1047, _1048));
        float _1054 = (_1049 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1049);
        float _1063 = (dot(vec3(_670, _671, _672), vec3(_1054 * _1046, _1054 * _1047, _1054 * _1048)) + 1.0) * 0.5;
        float _3520 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1073 = sqrt(((_1047 * _1047) + (_1046 * _1046)) + (_1048 * _1048)) / (_1043 + 9.9999997473787516355514526367188e-06);
        float _3531 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0));
        float _1075 = _1074 * 2.0;
        float _1079 = (1.0 - _1074) / (_1074 + 1.0);
        float _3542 = isnan(0.0) ? _1079 : (isnan(_1079) ? 0.0 : max(_1079, 0.0));
        float _1080 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
        float _1089 = ((((1.0 - _1080) * (_1075 + 2.0)) * exp2(log2(isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0))) * (_1075 + 1.0))) + _1080) * _1043;
        float _1090 = _1011 * 0.5;
        float _1091 = _1021 * 0.5;
        float _1092 = _1031 * 0.5;
        float _1093 = dot(vec3(_1090, _1091, _1092), vec3(_1090, _1091, _1092));
        float _1098 = (_1093 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1093);
        float _1106 = (dot(vec3(_670, _671, _672), vec3(_1098 * _1090, _1098 * _1091, _1098 * _1092)) + 1.0) * 0.5;
        float _3553 = isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0));
        float _1115 = sqrt(((_1091 * _1091) + (_1090 * _1090)) + (_1092 * _1092)) / (_1044 + 9.9999997473787516355514526367188e-06);
        float _3564 = isnan(0.0) ? _1115 : (isnan(_1115) ? 0.0 : max(_1115, 0.0));
        float _1116 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
        float _1117 = _1116 * 2.0;
        float _1121 = (1.0 - _1116) / (_1116 + 1.0);
        float _3575 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1122 = isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0));
        float _1131 = ((((1.0 - _1122) * (_1117 + 2.0)) * exp2(log2(isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0))) * (_1117 + 1.0))) + _1122) * _1044;
        float _1132 = _1012 * 0.5;
        float _1133 = _1022 * 0.5;
        float _1134 = _1032 * 0.5;
        float _1135 = dot(vec3(_1132, _1133, _1134), vec3(_1132, _1133, _1134));
        float _1140 = (_1135 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1135);
        float _1148 = (dot(vec3(_670, _671, _672), vec3(_1140 * _1132, _1140 * _1133, _1140 * _1134)) + 1.0) * 0.5;
        float _3586 = isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0));
        float _1157 = sqrt(((_1133 * _1133) + (_1132 * _1132)) + (_1134 * _1134)) / (_1045 + 9.9999997473787516355514526367188e-06);
        float _3597 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1158 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
        float _1159 = _1158 * 2.0;
        float _1163 = (1.0 - _1158) / (_1158 + 1.0);
        float _3608 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0));
        float _1173 = ((((1.0 - _1164) * (_1159 + 2.0)) * exp2(log2(isnan(1.0) ? _3586 : (isnan(_3586) ? 1.0 : min(_3586, 1.0))) * (_1159 + 1.0))) + _1164) * _1045;
        _1181 = _1012;
        _1183 = _1011;
        _1184 = _1010;
        _1185 = _1022;
        _1186 = _1021;
        _1187 = _1020;
        _1188 = _1032;
        _1189 = _1031;
        _1190 = _1030;
        _1191 = _1045;
        _1192 = _1044;
        _1193 = _1043;
        _1194 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0)));
        _1195 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0)));
        _1196 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0)));
    }
    else
    {
        _1181 = _1182;
        _1183 = _1182;
        _1184 = _1182;
        _1185 = _1182;
        _1186 = _1182;
        _1187 = _1182;
        _1188 = _1182;
        _1189 = _1182;
        _1190 = _1182;
        _1191 = _1182;
        _1192 = _1182;
        _1193 = _1182;
        _1194 = 0.0;
        _1195 = 0.0;
        _1196 = 0.0;
    }
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    float _1498;
    float _1499;
    float _1500;
    float _1501;
    float _1502;
    float _1503;
    float _1504;
    float _1505;
    float _1506;
    float _1507;
    float _1508;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1225 = fma(_852, cbModelParam._m0[30u].z, fma(_848, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _844));
        float _1229 = fma(_852, cbModelParam._m0[31u].z, fma(_848, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _844));
        float _1233 = fma(_852, cbModelParam._m0[32u].z, fma(_848, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _844));
        float _1256 = _844 + _670;
        float _1257 = _848 + _671;
        float _1258 = _852 + _672;
        float _1268 = fma(_1258, cbModelParam._m0[30u].z, fma(_1257, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1256)) - _1225;
        float _1269 = fma(_1258, cbModelParam._m0[31u].z, fma(_1257, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1256)) - _1229;
        float _1270 = fma(_1258, cbModelParam._m0[32u].z, fma(_1257, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1256)) - _1233;
        float _1274 = inversesqrt(dot(vec3(_1268, _1269, _1270), vec3(_1268, _1269, _1270)));
        float _1287 = ((_1274 * _1268) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1225 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1288 = ((_1274 * _1269) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1229 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1289 = ((_1274 * _1270) / cbModelParam._m0[35u].z) + ((((((_1233 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1291 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        vec4 _1298 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        vec4 _1305 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        vec4 _1312 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1287, _1288, _1289), 0.0);
        float _1324 = exp2((_1291.w + (-0.5)) * 20.0) * 2.0;
        float _1325 = _1324 * (_1291.x + (-0.5));
        float _1326 = _1324 * (_1291.y + (-0.5));
        float _1327 = _1324 * (_1291.z + (-0.5));
        float _1334 = exp2((_1298.w + (-0.5)) * 20.0) * 2.0;
        float _1335 = _1334 * (_1298.x + (-0.5));
        float _1336 = _1334 * (_1298.y + (-0.5));
        float _1337 = _1334 * (_1298.z + (-0.5));
        float _1344 = exp2((_1305.w + (-0.5)) * 20.0) * 2.0;
        float _1345 = _1344 * (_1305.x + (-0.5));
        float _1346 = _1344 * (_1305.y + (-0.5));
        float _1347 = _1344 * (_1305.z + (-0.5));
        float _1354 = exp2((_1312.w + (-0.5)) * 20.0) * 2.0;
        float _1355 = _1354 * (_1312.x + (-0.5));
        float _1356 = _1354 * (_1312.y + (-0.5));
        float _1357 = _1354 * (_1312.z + (-0.5));
        float _1358 = isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0));
        float _1359 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1360 = isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0));
        float _1361 = _1325 * 0.5;
        float _1362 = _1335 * 0.5;
        float _1363 = _1345 * 0.5;
        float _1364 = dot(vec3(_1361, _1362, _1363), vec3(_1361, _1362, _1363));
        float _1369 = (_1364 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1364);
        float _1377 = (dot(vec3(_670, _671, _672), vec3(_1369 * _1361, _1369 * _1362, _1369 * _1363)) + 1.0) * 0.5;
        float _3649 = isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0));
        float _1386 = sqrt(((_1362 * _1362) + (_1361 * _1361)) + (_1363 * _1363)) / (_1358 + 9.9999997473787516355514526367188e-06);
        float _3660 = isnan(0.0) ? _1386 : (isnan(_1386) ? 0.0 : max(_1386, 0.0));
        float _1387 = isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0));
        float _1388 = _1387 * 2.0;
        float _1392 = (1.0 - _1387) / (_1387 + 1.0);
        float _3671 = isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0));
        float _1393 = isnan(1.0) ? _3671 : (isnan(_3671) ? 1.0 : min(_3671, 1.0));
        float _1402 = ((((1.0 - _1393) * (_1388 + 2.0)) * exp2(log2(isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0))) * (_1388 + 1.0))) + _1393) * _1358;
        float _1403 = _1326 * 0.5;
        float _1404 = _1336 * 0.5;
        float _1405 = _1346 * 0.5;
        float _1406 = dot(vec3(_1403, _1404, _1405), vec3(_1403, _1404, _1405));
        float _1411 = (_1406 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1406);
        float _1419 = (dot(vec3(_670, _671, _672), vec3(_1411 * _1403, _1411 * _1404, _1411 * _1405)) + 1.0) * 0.5;
        float _3682 = isnan(0.0) ? _1419 : (isnan(_1419) ? 0.0 : max(_1419, 0.0));
        float _1428 = sqrt(((_1404 * _1404) + (_1403 * _1403)) + (_1405 * _1405)) / (_1359 + 9.9999997473787516355514526367188e-06);
        float _3693 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
        float _1429 = isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0));
        float _1430 = _1429 * 2.0;
        float _1434 = (1.0 - _1429) / (_1429 + 1.0);
        float _3704 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1435 = isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0));
        float _1444 = ((((1.0 - _1435) * (_1430 + 2.0)) * exp2(log2(isnan(1.0) ? _3682 : (isnan(_3682) ? 1.0 : min(_3682, 1.0))) * (_1430 + 1.0))) + _1435) * _1359;
        float _1445 = _1327 * 0.5;
        float _1446 = _1337 * 0.5;
        float _1447 = _1347 * 0.5;
        float _1448 = dot(vec3(_1445, _1446, _1447), vec3(_1445, _1446, _1447));
        float _1453 = (_1448 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1448);
        float _1461 = (dot(vec3(_670, _671, _672), vec3(_1453 * _1445, _1453 * _1446, _1453 * _1447)) + 1.0) * 0.5;
        float _3715 = isnan(0.0) ? _1461 : (isnan(_1461) ? 0.0 : max(_1461, 0.0));
        float _1470 = sqrt(((_1446 * _1446) + (_1445 * _1445)) + (_1447 * _1447)) / (_1360 + 9.9999997473787516355514526367188e-06);
        float _3726 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1471 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
        float _1472 = _1471 * 2.0;
        float _1476 = (1.0 - _1471) / (_1471 + 1.0);
        float _3737 = isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0));
        float _1477 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
        float _1486 = ((((1.0 - _1477) * (_1472 + 2.0)) * exp2(log2(isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0))) * (_1472 + 1.0))) + _1477) * _1360;
        _1494 = _1327;
        _1495 = _1326;
        _1496 = _1325;
        _1497 = _1337;
        _1498 = _1336;
        _1499 = _1335;
        _1500 = _1347;
        _1501 = _1346;
        _1502 = _1345;
        _1503 = _1360;
        _1504 = _1359;
        _1505 = _1358;
        _1506 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0)));
        _1507 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)));
        _1508 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0)));
    }
    else
    {
        _1494 = _1182;
        _1495 = _1182;
        _1496 = _1182;
        _1497 = _1182;
        _1498 = _1182;
        _1499 = _1182;
        _1500 = _1182;
        _1501 = _1182;
        _1502 = _1182;
        _1503 = _1182;
        _1504 = _1182;
        _1505 = _1182;
        _1506 = 0.0;
        _1507 = 0.0;
        _1508 = 0.0;
    }
    float _1518 = (cbModelParam._m0[1u].x * (_1506 - _1194)) + _1194;
    float _1519 = (cbModelParam._m0[1u].x * (_1507 - _1195)) + _1195;
    float _1520 = (cbModelParam._m0[1u].x * (_1508 - _1196)) + _1196;
    float _1541 = fma(_1520, cbSceneParam._m0[89u].z, fma(_1519, cbSceneParam._m0[89u].y, _1518 * cbSceneParam._m0[89u].x));
    float _1544 = fma(_1520, cbSceneParam._m0[90u].z, fma(_1519, cbSceneParam._m0[90u].y, _1518 * cbSceneParam._m0[90u].x));
    float _1547 = fma(_1520, cbSceneParam._m0[91u].z, fma(_1519, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1518));
    float _1562 = _791 * 0.5;
    float _1563 = _792 * 0.5;
    float _1564 = _793 * 0.5;
    float _1565 = dot(vec4(_1562, _1563, _1564, 1.0), vec4(_1496, _1499, _1502, _1505));
    float _1568 = dot(vec4(_1562, _1563, _1564, 1.0), vec4(_1495, _1498, _1501, _1504));
    float _1571 = dot(vec4(_1562, _1563, _1564, 1.0), vec4(_1494, _1497, _1500, _1503));
    float _1605;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1578 = dot(vec4(_1562, _1563, _1564, 1.0), vec4(_1181, _1185, _1188, _1191));
        float _1582 = dot(vec4(_1562, _1563, _1564, 1.0), vec4(_1183, _1186, _1189, _1192));
        float _1586 = dot(vec4(_1562, _1563, _1564, 1.0), vec4(_1184, _1187, _1190, _1193));
        float _1593 = dot(vec4(cbModelParam._m0[39u]), vec4(_1562, _1563, _1564, 1.0));
        _1605 = dot(vec3(isnan(0.0) ? _1586 : (isnan(_1586) ? 0.0 : max(_1586, 0.0)), isnan(0.0) ? _1582 : (isnan(_1582) ? 0.0 : max(_1582, 0.0)), isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1593) ? 0.0 : (isnan(0.0) ? _1593 : max(0.0, _1593))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1605 = 1.0;
    }
    float _1616;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1607 = dot(vec4(cbModelParam._m0[40u]), vec4(_1562, _1563, _1564, 1.0));
        _1616 = dot(vec3(isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0)), isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0)), isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1607) ? 0.0 : (isnan(0.0) ? _1607 : max(0.0, _1607))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1616 = 1.0;
    }
    float _1620 = (_1616 * cbModelParam._m0[1u].x) + (_1605 * (1.0 - cbModelParam._m0[1u].x));
    float _1630 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _673);
    float _1631 = isnan(_1630) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1630 : min(cbModelParam._m0[25u].z, _1630));
    float _1713;
    float _1715;
    float _1717;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1680 = fma(_852, cbModelParam._m0[13u].z, fma(_848, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _844)) + cbModelParam._m0[13u].w;
        float _1684 = fma(_852, cbModelParam._m0[14u].z, fma(_848, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _844)) + cbModelParam._m0[14u].w;
        float _1688 = fma(_852, cbModelParam._m0[15u].z, fma(_848, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _844)) + cbModelParam._m0[15u].w;
        float _1691 = fma(_793, cbModelParam._m0[13u].z, fma(_792, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _791));
        float _1694 = fma(_793, cbModelParam._m0[14u].z, fma(_792, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _791));
        float _1697 = fma(_793, cbModelParam._m0[15u].z, fma(_792, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _791));
        float _1725;
        if (_1691 > 0.0)
        {
            _1725 = abs((1.0 - _1680) / _1691);
        }
        else
        {
            float frontier_phi_41_39_ladder;
            if (_1691 < 0.0)
            {
                frontier_phi_41_39_ladder = abs((_1680 + 1.0) / _1691);
            }
            else
            {
                frontier_phi_41_39_ladder = 5000.0;
            }
            _1725 = frontier_phi_41_39_ladder;
        }
        float _2094;
        if (_1694 > 0.0)
        {
            _2094 = abs((1.0 - _1684) / _1694);
        }
        else
        {
            float frontier_phi_50_46_ladder;
            if (_1694 < 0.0)
            {
                frontier_phi_50_46_ladder = abs((_1684 + 1.0) / _1694);
            }
            else
            {
                frontier_phi_50_46_ladder = 5000.0;
            }
            _2094 = frontier_phi_50_46_ladder;
        }
        float _2402;
        if (_1697 > 0.0)
        {
            _2402 = abs((1.0 - _1688) / _1697);
        }
        else
        {
            float frontier_phi_64_57_ladder;
            if (_1697 < 0.0)
            {
                frontier_phi_64_57_ladder = abs((_1688 + 1.0) / _1697);
            }
            else
            {
                frontier_phi_64_57_ladder = 5000.0;
            }
            _2402 = frontier_phi_64_57_ladder;
        }
        float _2404 = isnan(_2094) ? _1725 : (isnan(_1725) ? _2094 : min(_1725, _2094));
        float _2405 = isnan(_2402) ? _2404 : (isnan(_2404) ? _2402 : min(_2404, _2402));
        float _2409 = (_2405 * _1691) + _1680;
        float _2410 = (_2405 * _1694) + _1684;
        float _2411 = (_2405 * _1697) + _1688;
        float _2412 = _2405 * 9.9999997473787516355514526367188e-05;
        float _2413 = (-1.0) - _2412;
        float _2415 = _2412 + 1.0;
        float frontier_phi_40_64_ladder;
        float frontier_phi_40_64_ladder_1;
        float frontier_phi_40_64_ladder_2;
        if ((_2411 > _2415) || ((_2411 < _2413) || ((_2410 > _2415) || ((_2410 < _2413) || ((_2409 < _2413) || (_2409 > _2415))))))
        {
            frontier_phi_40_64_ladder = 0.0;
            frontier_phi_40_64_ladder_1 = 0.0;
            frontier_phi_40_64_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2553 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2411, cbModelParam._m0[9u].z, fma(_2410, cbModelParam._m0[9u].y, _2409 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2411, cbModelParam._m0[10u].z, fma(_2410, cbModelParam._m0[10u].y, _2409 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2411, cbModelParam._m0[11u].z, fma(_2410, cbModelParam._m0[11u].y, _2409 * cbModelParam._m0[11u].x))), _1631);
            frontier_phi_40_64_ladder = _2553.z * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_1 = _2553.y * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_2 = _2553.x * cbModelParam._m0[1u].y;
        }
        _1713 = frontier_phi_40_64_ladder_2;
        _1715 = frontier_phi_40_64_ladder_1;
        _1717 = frontier_phi_40_64_ladder;
    }
    else
    {
        vec4 _1701 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_791, _792, _793), _1631);
        _1713 = _1701.x * cbModelParam._m0[1u].y;
        _1715 = _1701.y * cbModelParam._m0[1u].y;
        _1717 = _1701.z * cbModelParam._m0[1u].y;
    }
    float _1721 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _673);
    float _1722 = isnan(_1721) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1721 : min(cbModelParam._m0[25u].w, _1721));
    float _1810;
    float _1812;
    float _1814;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1774 = fma(_852, cbModelParam._m0[21u].z, fma(_848, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _844)) + cbModelParam._m0[21u].w;
        float _1778 = fma(_852, cbModelParam._m0[22u].z, fma(_848, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _844)) + cbModelParam._m0[22u].w;
        float _1782 = fma(_852, cbModelParam._m0[23u].z, fma(_848, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _844)) + cbModelParam._m0[23u].w;
        float _1785 = fma(_793, cbModelParam._m0[21u].z, fma(_792, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _791));
        float _1788 = fma(_793, cbModelParam._m0[22u].z, fma(_792, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _791));
        float _1791 = fma(_793, cbModelParam._m0[23u].z, fma(_792, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _791));
        float _2099;
        if (_1785 > 0.0)
        {
            _2099 = abs((1.0 - _1774) / _1785);
        }
        else
        {
            float frontier_phi_52_48_ladder;
            if (_1785 < 0.0)
            {
                frontier_phi_52_48_ladder = abs((_1774 + 1.0) / _1785);
            }
            else
            {
                frontier_phi_52_48_ladder = 5000.0;
            }
            _2099 = frontier_phi_52_48_ladder;
        }
        float _2428;
        if (_1788 > 0.0)
        {
            _2428 = abs((1.0 - _1778) / _1788);
        }
        else
        {
            float frontier_phi_66_59_ladder;
            if (_1788 < 0.0)
            {
                frontier_phi_66_59_ladder = abs((_1778 + 1.0) / _1788);
            }
            else
            {
                frontier_phi_66_59_ladder = 5000.0;
            }
            _2428 = frontier_phi_66_59_ladder;
        }
        float _2618;
        if (_1791 > 0.0)
        {
            _2618 = abs((1.0 - _1782) / _1791);
        }
        else
        {
            float frontier_phi_84_77_ladder;
            if (_1791 < 0.0)
            {
                frontier_phi_84_77_ladder = abs((_1782 + 1.0) / _1791);
            }
            else
            {
                frontier_phi_84_77_ladder = 5000.0;
            }
            _2618 = frontier_phi_84_77_ladder;
        }
        float _2620 = isnan(_2428) ? _2099 : (isnan(_2099) ? _2428 : min(_2099, _2428));
        float _2621 = isnan(_2618) ? _2620 : (isnan(_2620) ? _2618 : min(_2620, _2618));
        float _2625 = (_2621 * _1785) + _1774;
        float _2626 = (_2621 * _1788) + _1778;
        float _2627 = (_2621 * _1791) + _1782;
        float _2628 = _2621 * 9.9999997473787516355514526367188e-05;
        float _2629 = (-1.0) - _2628;
        float _2631 = _2628 + 1.0;
        float frontier_phi_49_84_ladder;
        float frontier_phi_49_84_ladder_1;
        float frontier_phi_49_84_ladder_2;
        if ((_2627 > _2631) || ((_2627 < _2629) || ((_2626 > _2631) || ((_2626 < _2629) || ((_2625 < _2629) || (_2625 > _2631))))))
        {
            frontier_phi_49_84_ladder = 0.0;
            frontier_phi_49_84_ladder_1 = 0.0;
            frontier_phi_49_84_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2869 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2627, cbModelParam._m0[17u].z, fma(_2626, cbModelParam._m0[17u].y, _2625 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2627, cbModelParam._m0[18u].z, fma(_2626, cbModelParam._m0[18u].y, _2625 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2627, cbModelParam._m0[19u].z, fma(_2626, cbModelParam._m0[19u].y, _2625 * cbModelParam._m0[19u].x))), _1722);
            frontier_phi_49_84_ladder = _2869.z * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_1 = _2869.y * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_2 = _2869.x * cbModelParam._m0[1u].z;
        }
        _1810 = frontier_phi_49_84_ladder_2;
        _1812 = frontier_phi_49_84_ladder_1;
        _1814 = frontier_phi_49_84_ladder;
    }
    else
    {
        vec4 _1794 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_791, _792, _793), _1722);
        _1810 = _1794.x * cbModelParam._m0[1u].z;
        _1812 = _1794.y * cbModelParam._m0[1u].z;
        _1814 = _1794.z * cbModelParam._m0[1u].z;
    }
    float _1826 = ((((1.0 - _812) * ((_799 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_812 * _799)) * _783;
    float _1827 = _1826 * ((cbModelParam._m0[1u].w * (_1810 - _1713)) + _1713);
    float _1828 = _1826 * ((cbModelParam._m0[1u].w * (_1812 - _1715)) + _1715);
    float _1829 = _1826 * ((cbModelParam._m0[1u].w * (_1814 - _1717)) + _1717);
    float _1832 = fma(_1829, cbSceneParam._m0[89u].z, fma(_1828, cbSceneParam._m0[89u].y, _1827 * cbSceneParam._m0[89u].x));
    float _1835 = fma(_1829, cbSceneParam._m0[90u].z, fma(_1828, cbSceneParam._m0[90u].y, _1827 * cbSceneParam._m0[90u].x));
    float _1838 = fma(_1829, cbSceneParam._m0[91u].z, fma(_1828, cbSceneParam._m0[91u].y, _1827 * cbSceneParam._m0[91u].x));
    vec4 _1846 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_718, _719));
    float _1848 = _1846.w;
    float _1860 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1848);
    float _1861 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1848);
    float _1862 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1848);
    uvec4 _1866 = floatBitsToUint(cbInstanceData._m0[_757 + 5u]);
    uint _1868 = _1866.x * 14u;
    uint _1869 = _1868 + 13u;
    float _1874 = _783 + (-1.0);
    float _1877 = (cbLight._m0[_1869].x * _1874) + 1.0;
    float _1878 = (cbLight._m0[_1869].y * _1874) + 1.0;
    uint _1879 = _1868 + 5u;
    float _1885 = isnan(1.0) ? _1878 : (isnan(_1878) ? 1.0 : min(_1878, 1.0));
    uint _1889 = _1868 + 4u;
    float _1898 = isnan(1.0) ? _1877 : (isnan(_1877) ? 1.0 : min(_1877, 1.0));
    uint _1902 = _1868 | 1u;
    float _1913 = dot(vec3(cbLight._m0[_1868].xyz), vec3(_670, _671, _672));
    float _1916 = dot(vec3(cbLight._m0[_1902].xyz), vec3(_670, _671, _672));
    float _3873 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
    float _3884 = isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0));
    float _1921 = (isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0))) * 0.3183098733425140380859375;
    float _1923 = (isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0))) * 0.3183098733425140380859375;
    float _1930 = ((cbLight._m0[_1879].x * _1885) * _1923) + (((cbLight._m0[_1889].x * _1860) * _1898) * _1921);
    float _1931 = ((_1885 * cbLight._m0[_1879].y) * _1923) + (((cbLight._m0[_1889].y * _1861) * _1898) * _1921);
    float _1932 = ((_1885 * cbLight._m0[_1879].z) * _1923) + (((cbLight._m0[_1889].z * _1862) * _1898) * _1921);
    uint _1934 = _1868 + 8u;
    float _1947 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1868].w)) * _673) * 0.949999988079071044921875);
    float _1948 = _1947 * _1947;
    float _1949 = cbLight._m0[_1868].x + _697;
    float _1950 = cbLight._m0[_1868].y + _698;
    float _1951 = cbLight._m0[_1868].z + _699;
    float _1955 = inversesqrt(dot(vec3(_1949, _1950, _1951), vec3(_1949, _1950, _1951)));
    float _1956 = _1955 * _1949;
    float _1957 = _1955 * _1950;
    float _1958 = _1955 * _1951;
    float _1959 = dot(vec3(_670, _671, _672), vec3(cbLight._m0[_1868].xyz));
    float _3895 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
    float _1962 = isnan(1.0) ? _3895 : (isnan(_3895) ? 1.0 : min(_3895, 1.0));
    float _3906 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _1963 = isnan(1.0) ? _3906 : (isnan(_3906) ? 1.0 : min(_3906, 1.0));
    float _1964 = dot(vec3(_670, _671, _672), vec3(_1956, _1957, _1958));
    float _3917 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
    float _1967 = isnan(1.0) ? _3917 : (isnan(_3917) ? 1.0 : min(_3917, 1.0));
    float _1968 = dot(vec3(cbLight._m0[_1868].xyz), vec3(_1956, _1957, _1958));
    float _3928 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
    float _1972 = _1948 * _1948;
    float _1976 = ((_1967 * _1967) * (_1972 + (-1.0))) + 1.0;
    float _1987 = (exp2(log2(1.0 - (isnan(1.0) ? _3928 : (isnan(_3928) ? 1.0 : min(_3928, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1988 = 1.0 - _1948;
    float _1999 = (0.5 / (((_1963 * ((_1962 * _1988) + _1948)) + 9.9999999392252902907785028219223e-09) + (((_1963 * _1988) + _1948) * _1962))) * _1962;
    float _3939 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
    float _2001 = (isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0))) * (_1972 / ((_1976 * _1976) * 3.141590118408203125));
    uint _2015 = _1868 + 9u;
    float _2026 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1902].w)) * _673) * 0.949999988079071044921875);
    float _2027 = _2026 * _2026;
    float _2028 = cbLight._m0[_1902].x + _697;
    float _2029 = cbLight._m0[_1902].y + _698;
    float _2030 = cbLight._m0[_1902].z + _699;
    float _2034 = inversesqrt(dot(vec3(_2028, _2029, _2030), vec3(_2028, _2029, _2030)));
    float _2035 = _2034 * _2028;
    float _2036 = _2034 * _2029;
    float _2037 = _2034 * _2030;
    float _2038 = dot(vec3(_670, _671, _672), vec3(cbLight._m0[_1902].xyz));
    float _3950 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0));
    float _2041 = isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0));
    float _2042 = dot(vec3(_670, _671, _672), vec3(_2035, _2036, _2037));
    float _3961 = isnan(0.0) ? _2042 : (isnan(_2042) ? 0.0 : max(_2042, 0.0));
    float _2045 = isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0));
    float _2046 = dot(vec3(cbLight._m0[_1902].xyz), vec3(_2035, _2036, _2037));
    float _3972 = isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0));
    float _2050 = _2027 * _2027;
    float _2054 = ((_2045 * _2045) * (_2050 + (-1.0))) + 1.0;
    float _2063 = (exp2(log2(1.0 - (isnan(1.0) ? _3972 : (isnan(_3972) ? 1.0 : min(_3972, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2064 = 1.0 - _2027;
    float _2074 = (0.5 / (((_1963 * ((_2041 * _2064) + _2027)) + 9.9999999392252902907785028219223e-09) + (((_1963 * _2064) + _2027) * _2041))) * _2041;
    float _3983 = isnan(0.0) ? _2074 : (isnan(_2074) ? 0.0 : max(_2074, 0.0));
    float _2076 = (isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0))) * (_2050 / ((_2054 * _2054) * 3.141590118408203125));
    float _2086 = (((_2063 * cbLight._m0[_2015].x) * _2076) * _1885) + ((((cbLight._m0[_1934].x * _1860) * _1987) * _2001) * _1898);
    float _2087 = (((_2063 * cbLight._m0[_2015].y) * _2076) * _1885) + ((((cbLight._m0[_1934].y * _1861) * _1987) * _2001) * _1898);
    float _2088 = (((_2063 * cbLight._m0[_2015].z) * _2076) * _1885) + ((((cbLight._m0[_1934].z * _1862) * _1987) * _2001) * _1898);
    float _2203;
    float _2205;
    float _2207;
    float _2209;
    float _2211;
    float _2213;
    if (_1866.y == 0u)
    {
        float _2143 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2144 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2143;
        float _2145 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2143;
        float _2146 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2143;
        uvec4 _2158 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2159 = _2158.x;
        uint _2170 = uint((float(_2158.y) * floor(float(uint(cbSceneParam._m0[85u].y * _719) / _2159))) + floor(float(uint(cbSceneParam._m0[85u].x * _718) / _2159)));
        float _2180 = (log2(_2146 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2181 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
        uint _2184 = uint(isnan(14.0) ? _2181 : (isnan(_2181) ? 14.0 : min(_2181, 14.0)));
        uvec4 _2189 = texelFetch(g_lightClusterGridBuffer, int(((_2184 << 2u) + (_2170 << 6u)) >> 2u));
        uint _2190 = _2189.x;
        uint _2191 = _2158.z;
        float _2281;
        float _2283;
        float _2285;
        float _2287;
        float _2289;
        float _2291;
        if (((((1u << ((_2191 >> 4u) & 15u)) + 4294967295u) & _2190) == 0u) || ((_2191 & 240u) == 0u))
        {
            _2281 = 0.0;
            _2283 = 0.0;
            _2285 = 0.0;
            _2287 = 0.0;
            _2289 = 0.0;
            _2291 = 0.0;
        }
        else
        {
            float _2282;
            float _2284;
            float _2286;
            float _2288;
            float _2290;
            float _2292;
            float _2465 = 0.0;
            float _2466 = 0.0;
            float _2467 = 0.0;
            float _2468 = 0.0;
            float _2469 = 0.0;
            float _2470 = 0.0;
            uint _2471 = 0u;
            uint _2480;
            bool _2481;
            for (;;)
            {
                _2480 = texelFetch(g_lightClassification, int((((_2184 << 5u) + (_2170 << 9u)) + (_2471 << 2u)) >> 2u)).x;
                _2481 = _2480 == 0u;
                float frontier_phi_79_pred;
                float frontier_phi_79_pred_1;
                float frontier_phi_79_pred_2;
                float frontier_phi_79_pred_3;
                float frontier_phi_79_pred_4;
                float frontier_phi_79_pred_5;
                if (_2481)
                {
                    frontier_phi_79_pred = _2470;
                    frontier_phi_79_pred_1 = _2469;
                    frontier_phi_79_pred_2 = _2468;
                    frontier_phi_79_pred_3 = _2467;
                    frontier_phi_79_pred_4 = _2466;
                    frontier_phi_79_pred_5 = _2465;
                }
                else
                {
                    float _2661;
                    float _2662;
                    float _2663;
                    float _2664;
                    float _2665;
                    float _2666;
                    uint _2667;
                    _2661 = _2465;
                    _2662 = _2466;
                    _2663 = _2467;
                    _2664 = _2468;
                    _2665 = _2469;
                    _2666 = _2470;
                    _2667 = _2480;
                    float _2562;
                    float _2563;
                    float _2564;
                    float _2565;
                    float _2566;
                    float _2567;
                    for (;;)
                    {
                        uint _2671 = uint(findLSB(_2667)) + (_2471 << 5u);
                        uint _2668 = (_2667 + 4294967295u) & _2667;
                        uint _2673 = _2671 * 48u;
                        vec4 _2687 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2673)).x, texelFetch(g_PointLightRenderingBuffer, int(_2673 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2673 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2673 + 3u)).x));
                        uint _2693 = (_2671 * 48u) + 4u;
                        vec4 _2706 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2693)).x, texelFetch(g_PointLightRenderingBuffer, int(_2693 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2693 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2693 + 3u)).x));
                        uint _2712 = (_2671 * 48u) + 8u;
                        vec3 _2723 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2712)).x, texelFetch(g_PointLightRenderingBuffer, int(_2712 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2712 + 2u)).x));
                        float _2727 = _2687.x - _2144;
                        float _2728 = _2687.y - _2145;
                        float _2729 = _2687.z - _2146;
                        float _2730 = dot(vec3(_2727, _2728, _2729), vec3(_2727, _2728, _2729));
                        float _2733 = inversesqrt(_2730);
                        float _2734 = _2733 * _2727;
                        float _2735 = _2733 * _2728;
                        float _2736 = _2733 * _2729;
                        float _2737 = dot(vec3(_738, _741, _744), vec3(_2734, _2735, _2736));
                        float _2742 = 1.0 - (_2730 * _2687.w);
                        float _4004 = isnan(0.0) ? _2742 : (isnan(_2742) ? 0.0 : max(_2742, 0.0));
                        float _2743 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
                        float _2744 = sqrt(_2730) * _2706.w;
                        float _2747 = 1.39999997615814208984375 / (_2744 + 1.39999997615814208984375);
                        float _2748 = _2747 * _2747;
                        float _2751 = ((1.0 - _2748) * _2737) + _2748;
                        float _2754 = _2744 * _2744;
                        float _2758 = ((isnan(0.0) ? _2751 : (isnan(_2751) ? 0.0 : max(_2751, 0.0))) * _2743) / ((_2754 * 0.699999988079071044921875) + 1.0);
                        float _2762 = (-0.0) - _2144;
                        float _2763 = (-0.0) - _2145;
                        float _2764 = (-0.0) - _2146;
                        float _2768 = inversesqrt(dot(vec3(_2762, _2763, _2764), vec3(_2762, _2763, _2764)));
                        float _2769 = _2768 * _2762;
                        float _2770 = _2768 * _2763;
                        float _2771 = _2768 * _2764;
                        float _2779 = exp2(log2(1.0 / ((_2754 * 3.5) + 5.0)) * 0.25);
                        float _2780 = 1.0 - _799;
                        float _2787 = sqrt(1.0 - ((1.0 - (_2780 * _2780)) * (1.0 - (_2779 * _2779))));
                        float _2788 = _2787 * _2787;
                        float _2789 = _2788 * _2788;
                        float _2790 = _2769 + _2734;
                        float _2791 = _2770 + _2735;
                        float _2792 = _2771 + _2736;
                        float _2796 = inversesqrt(dot(vec3(_2790, _2791, _2792), vec3(_2790, _2791, _2792)));
                        float _2800 = dot(vec3(_738, _741, _744), vec3(_2769, _2770, _2771));
                        float _4020 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
                        float _2803 = isnan(1.0) ? _4020 : (isnan(_4020) ? 1.0 : min(_4020, 1.0));
                        float _2804 = dot(vec3(_738, _741, _744), vec3(_2796 * _2790, _2796 * _2791, _2796 * _2792));
                        float _4031 = isnan(0.0) ? _2804 : (isnan(_2804) ? 0.0 : max(_2804, 0.0));
                        float _2807 = isnan(1.0) ? _4031 : (isnan(_4031) ? 1.0 : min(_4031, 1.0));
                        float _2811 = ((_2807 * _2807) * (_2789 + (-1.0))) + 1.0;
                        float _2812 = _2747 * _2788;
                        float _2813 = _2812 * _2812;
                        float _2816 = ((1.0 - _2813) * _2737) + _2813;
                        float _4042 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
                        float _2817 = isnan(1.0) ? _4042 : (isnan(_4042) ? 1.0 : min(_4042, 1.0));
                        float _2818 = 1.0 - _2788;
                        float _2828 = (0.5 / (((_2817 * ((_2803 * _2818) + _2788)) + 9.9999999392252902907785028219223e-09) + (((_2817 * _2818) + _2788) * _2803))) * _2817;
                        float _4053 = isnan(0.0) ? _2828 : (isnan(_2828) ? 0.0 : max(_2828, 0.0));
                        float _2839 = (((_2789 * 3.1415927410125732421875) * (isnan(1.0) ? _4053 : (isnan(_4053) ? 1.0 : min(_4053, 1.0)))) / ((_2811 * _2811) * ((_2754 * 2.1991131305694580078125) + 3.141590118408203125))) * _2743;
                        _2565 = (_2758 * _2706.x) + _2664;
                        _2566 = (_2758 * _2706.y) + _2665;
                        _2567 = (_2758 * _2706.z) + _2666;
                        _2562 = (_2839 * _2723.x) + _2661;
                        _2563 = (_2839 * _2723.y) + _2662;
                        _2564 = (_2839 * _2723.z) + _2663;
                        if (_2668 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2661 = _2562;
                            _2662 = _2563;
                            _2663 = _2564;
                            _2664 = _2565;
                            _2665 = _2566;
                            _2666 = _2567;
                            _2667 = _2668;
                        }
                    }
                    frontier_phi_79_pred = _2567;
                    frontier_phi_79_pred_1 = _2566;
                    frontier_phi_79_pred_2 = _2565;
                    frontier_phi_79_pred_3 = _2564;
                    frontier_phi_79_pred_4 = _2563;
                    frontier_phi_79_pred_5 = _2562;
                }
                _2292 = frontier_phi_79_pred;
                _2290 = frontier_phi_79_pred_1;
                _2288 = frontier_phi_79_pred_2;
                _2286 = frontier_phi_79_pred_3;
                _2284 = frontier_phi_79_pred_4;
                _2282 = frontier_phi_79_pred_5;
                uint _2472 = _2471 + 1u;
                if (_2472 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2465 = _2282;
                    _2466 = _2284;
                    _2467 = _2286;
                    _2468 = _2288;
                    _2469 = _2290;
                    _2470 = _2292;
                    _2471 = _2472;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2281 = _2282;
            _2283 = _2284;
            _2285 = _2286;
            _2287 = _2288;
            _2289 = _2290;
            _2291 = _2292;
        }
        uvec4 _2295 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2296 = _2295.z;
        uint _2298 = (_2296 >> 8u) & 15u;
        float _2433;
        float _2435;
        float _2437;
        float _2439;
        float _2441;
        float _2443;
        if (((4294967295u << _2298) & _2190) == 0u)
        {
            _2433 = _2281;
            _2435 = _2283;
            _2437 = _2285;
            _2439 = _2287;
            _2441 = _2289;
            _2443 = _2291;
        }
        else
        {
            float _2458 = inversesqrt(dot(vec3(_2144, _2145, _2146), vec3(_2144, _2145, _2146)));
            float _2459 = _2458 * _2144;
            float _2460 = _2458 * _2145;
            float _2461 = _2458 * _2146;
            float frontier_phi_68_69_ladder;
            float frontier_phi_68_69_ladder_1;
            float frontier_phi_68_69_ladder_2;
            float frontier_phi_68_69_ladder_3;
            float frontier_phi_68_69_ladder_4;
            float frontier_phi_68_69_ladder_5;
            if (_2298 < ((_2296 >> 12u) & 15u))
            {
                float _2434;
                float _2436;
                float _2438;
                float _2440;
                float _2442;
                float _2444;
                float _2644 = _2281;
                float _2645 = _2283;
                float _2646 = _2285;
                float _2647 = _2287;
                float _2648 = _2289;
                float _2649 = _2291;
                uint _2650 = _2298;
                uint _2659;
                bool _2660;
                for (;;)
                {
                    _2659 = texelFetch(g_lightClassification, int((((_2184 << 5u) + (_2170 << 9u)) + (_2650 << 2u)) >> 2u)).x;
                    _2660 = _2659 == 0u;
                    float frontier_phi_93_pred;
                    float frontier_phi_93_pred_1;
                    float frontier_phi_93_pred_2;
                    float frontier_phi_93_pred_3;
                    float frontier_phi_93_pred_4;
                    float frontier_phi_93_pred_5;
                    if (_2660)
                    {
                        frontier_phi_93_pred = _2648;
                        frontier_phi_93_pred_1 = _2647;
                        frontier_phi_93_pred_2 = _2646;
                        frontier_phi_93_pred_3 = _2645;
                        frontier_phi_93_pred_4 = _2644;
                        frontier_phi_93_pred_5 = _2649;
                    }
                    else
                    {
                        float _2874;
                        float _2875;
                        float _2876;
                        float _2877;
                        float _2878;
                        float _2879;
                        float _3167;
                        float _3168;
                        float _3169;
                        float _3170;
                        float _3171;
                        float _3172;
                        float _2887 = _2644;
                        float _2888 = _2645;
                        float _2889 = _2646;
                        float _2890 = _2647;
                        float _2891 = _2648;
                        float _2892 = _2649;
                        uint _2893 = _2659;
                        uint _2894;
                        vec4 _2919;
                        float _2920;
                        vec4 _2935;
                        vec3 _2947;
                        vec4 _2962;
                        vec4 _2977;
                        float _3023;
                        bool _3024;
                        for (;;)
                        {
                            uint _2904 = ((_2650 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2893));
                            _2894 = (_2893 + 4294967295u) & _2893;
                            uint _2906 = _2904 * 40u;
                            _2919 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2906)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2906 + 3u)).x));
                            _2920 = _2919.w;
                            uint _2922 = (_2904 * 40u) + 4u;
                            _2935 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2922)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2922 + 3u)).x));
                            uint _2937 = (_2904 * 40u) + 8u;
                            _2947 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2937)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2937 + 2u)).x));
                            uint _2949 = (_2904 * 40u) + 16u;
                            _2962 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2949)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 3u)).x));
                            uint _2964 = (_2904 * 40u) + 20u;
                            _2977 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2964)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 3u)).x));
                            uint _2979 = (_2904 * 40u) + 24u;
                            vec4 _2992 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2979)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2979 + 3u)).x));
                            uint _2998 = (_2904 * 40u) + 28u;
                            vec4 _3011 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2998)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2998 + 3u)).x));
                            _3023 = fma(_2146, _3011.z, fma(_2145, _3011.y, _3011.x * _2144)) + _3011.w;
                            _3024 = !((fma(_2146, _2992.z, fma(_2145, _2992.y, _2992.x * _2144)) + _2992.w) <= 0.0);
                            float frontier_phi_99_pred;
                            float frontier_phi_99_pred_1;
                            float frontier_phi_99_pred_2;
                            float frontier_phi_99_pred_3;
                            float frontier_phi_99_pred_4;
                            float frontier_phi_99_pred_5;
                            if (_3024)
                            {
                                float _3051 = _2919.x - _2144;
                                float _3052 = _2919.y - _2145;
                                float _3053 = _2919.z - _2146;
                                float _3054 = dot(vec3(_3051, _3052, _3053), vec3(_3051, _3052, _3053));
                                float _3057 = inversesqrt(_3054);
                                float _3058 = _3057 * _3051;
                                float _3059 = _3057 * _3052;
                                float _3060 = _3057 * _3053;
                                float _3064 = 1.0 - (_3054 / (_2920 * _2920));
                                float _4064 = isnan(0.0) ? _3064 : (isnan(_3064) ? 0.0 : max(_3064, 0.0));
                                float _3065 = isnan(1.0) ? _4064 : (isnan(_4064) ? 1.0 : min(_4064, 1.0));
                                float _3069 = sqrt(_3054) * _2935.w;
                                float _3071 = 1.39999997615814208984375 / (_3069 + 1.39999997615814208984375);
                                float _3072 = _3071 * _3071;
                                float _3075 = ((1.0 - _3072) * dot(vec3(_3058, _3059, _3060), vec3(_738, _741, _744))) + _3072;
                                float _3078 = _3069 * _3069;
                                float _3082 = (fma(_2146, _2962.z, fma(_2145, _2962.y, _2962.x * _2144)) + _2962.w) / _3023;
                                float _3083 = (fma(_2146, _2977.z, fma(_2145, _2977.y, _2977.x * _2144)) + _2977.w) / _3023;
                                float _3087 = 1.0 - dot(vec2(_3082, _3083), vec2(_3082, _3083));
                                float _4080 = isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0));
                                float _3088 = isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0));
                                float _3089 = _3088 * (((isnan(0.0) ? _3075 : (isnan(_3075) ? 0.0 : max(_3075, 0.0))) * _3065) / ((_3078 * 0.699999988079071044921875) + 1.0));
                                float _3101 = exp2(log2(1.0 / ((_3078 * 3.5) + 5.0)) * 0.25);
                                float _3102 = 1.0 - _799;
                                float _3109 = sqrt(1.0 - ((1.0 - (_3102 * _3102)) * (1.0 - (_3101 * _3101))));
                                float _3110 = _3109 * _3109;
                                float _3111 = _3110 * _3110;
                                float _3112 = _3058 - _2459;
                                float _3113 = _3059 - _2460;
                                float _3114 = _3060 - _2461;
                                float _3118 = inversesqrt(dot(vec3(_3112, _3113, _3114), vec3(_3112, _3113, _3114)));
                                float _3122 = dot(vec3(_738, _741, _744), vec3((-0.0) - _2459, (-0.0) - _2460, (-0.0) - _2461));
                                float _4091 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0));
                                float _3125 = isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0));
                                float _3126 = dot(vec3(_738, _741, _744), vec3(_3118 * _3112, _3118 * _3113, _3118 * _3114));
                                float _4102 = isnan(0.0) ? _3126 : (isnan(_3126) ? 0.0 : max(_3126, 0.0));
                                float _3129 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
                                float _3133 = ((_3129 * _3129) * (_3111 + (-1.0))) + 1.0;
                                float _3134 = _3071 * _3110;
                                float _3135 = _3134 * _3134;
                                float _3141 = ((1.0 - _3135) * dot(vec3(_738, _741, _744), vec3(_3058, _3059, _3060))) + _3135;
                                float _4113 = isnan(0.0) ? _3141 : (isnan(_3141) ? 0.0 : max(_3141, 0.0));
                                float _3142 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
                                float _3143 = 1.0 - _3110;
                                float _3153 = (0.5 / (((_3142 * ((_3125 * _3143) + _3110)) + 9.9999999392252902907785028219223e-09) + (((_3142 * _3143) + _3110) * _3125))) * _3142;
                                float _4124 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
                                float _3163 = (_3088 * _3065) * (((_3111 * 3.1415927410125732421875) * (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0)))) / ((_3133 * _3133) * ((_3078 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_99_pred = _3089 * _2935.z;
                                frontier_phi_99_pred_1 = _3089 * _2935.y;
                                frontier_phi_99_pred_2 = _3089 * _2935.x;
                                frontier_phi_99_pred_3 = _3163 * _2947.z;
                                frontier_phi_99_pred_4 = _3163 * _2947.y;
                                frontier_phi_99_pred_5 = _3163 * _2947.x;
                            }
                            else
                            {
                                frontier_phi_99_pred = 0.0;
                                frontier_phi_99_pred_1 = 0.0;
                                frontier_phi_99_pred_2 = 0.0;
                                frontier_phi_99_pred_3 = 0.0;
                                frontier_phi_99_pred_4 = 0.0;
                                frontier_phi_99_pred_5 = 0.0;
                            }
                            _3172 = frontier_phi_99_pred;
                            _3171 = frontier_phi_99_pred_1;
                            _3170 = frontier_phi_99_pred_2;
                            _3169 = frontier_phi_99_pred_3;
                            _3168 = frontier_phi_99_pred_4;
                            _3167 = frontier_phi_99_pred_5;
                            _2877 = _3170 + _2890;
                            _2878 = _3171 + _2891;
                            _2879 = _3172 + _2892;
                            _2874 = _3167 + _2887;
                            _2875 = _3168 + _2888;
                            _2876 = _3169 + _2889;
                            if (_2894 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2887 = _2874;
                                _2888 = _2875;
                                _2889 = _2876;
                                _2890 = _2877;
                                _2891 = _2878;
                                _2892 = _2879;
                                _2893 = _2894;
                                continue;
                            }
                        }
                        frontier_phi_93_pred = _2878;
                        frontier_phi_93_pred_1 = _2877;
                        frontier_phi_93_pred_2 = _2876;
                        frontier_phi_93_pred_3 = _2875;
                        frontier_phi_93_pred_4 = _2874;
                        frontier_phi_93_pred_5 = _2879;
                    }
                    _2442 = frontier_phi_93_pred;
                    _2440 = frontier_phi_93_pred_1;
                    _2438 = frontier_phi_93_pred_2;
                    _2436 = frontier_phi_93_pred_3;
                    _2434 = frontier_phi_93_pred_4;
                    _2444 = frontier_phi_93_pred_5;
                    uint _2651 = _2650 + 1u;
                    if (_2651 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2644 = _2434;
                        _2645 = _2436;
                        _2646 = _2438;
                        _2647 = _2440;
                        _2648 = _2442;
                        _2649 = _2444;
                        _2650 = _2651;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_68_69_ladder = _2444;
                frontier_phi_68_69_ladder_1 = _2442;
                frontier_phi_68_69_ladder_2 = _2440;
                frontier_phi_68_69_ladder_3 = _2438;
                frontier_phi_68_69_ladder_4 = _2434;
                frontier_phi_68_69_ladder_5 = _2436;
            }
            else
            {
                frontier_phi_68_69_ladder = _2291;
                frontier_phi_68_69_ladder_1 = _2289;
                frontier_phi_68_69_ladder_2 = _2287;
                frontier_phi_68_69_ladder_3 = _2285;
                frontier_phi_68_69_ladder_4 = _2281;
                frontier_phi_68_69_ladder_5 = _2283;
            }
            _2433 = frontier_phi_68_69_ladder_4;
            _2435 = frontier_phi_68_69_ladder_5;
            _2437 = frontier_phi_68_69_ladder_3;
            _2439 = frontier_phi_68_69_ladder_2;
            _2441 = frontier_phi_68_69_ladder_1;
            _2443 = frontier_phi_68_69_ladder;
        }
        float _2448 = isnan(1.0) ? _783 : (isnan(_783) ? 1.0 : min(_783, 1.0));
        _2203 = (_2448 * _2439) + _1930;
        _2205 = (_2448 * _2441) + _1931;
        _2207 = (_2448 * _2443) + _1932;
        _2209 = ((_2433 * 0.039999999105930328369140625) * _2448) + _2086;
        _2211 = ((_2435 * 0.039999999105930328369140625) * _2448) + _2087;
        _2213 = ((_2437 * 0.039999999105930328369140625) * _2448) + _2088;
    }
    else
    {
        _2203 = _1930;
        _2205 = _1931;
        _2207 = _1932;
        _2209 = _2086;
        _2211 = _2087;
        _2213 = _2088;
    }
    float _4140 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _4151 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _4162 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _2230 = ((isnan(1.0) ? _4140 : (isnan(_4140) ? 1.0 : min(_4140, 1.0))) * (_2203 + ((isnan(0.0) ? _1541 : (isnan(_1541) ? 0.0 : max(_1541, 0.0))) * _783))) + ((_2209 + ((isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0))) * _1620)) * cbPerFrame._m0[3u].x);
    float _2231 = ((isnan(1.0) ? _4151 : (isnan(_4151) ? 1.0 : min(_4151, 1.0))) * (_2205 + ((isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0))) * _783))) + ((_2211 + ((isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0))) * _1620)) * cbPerFrame._m0[3u].x);
    float _2232 = ((isnan(1.0) ? _4162 : (isnan(_4162) ? 1.0 : min(_4162, 1.0))) * (_2207 + ((isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0))) * _783))) + ((_2213 + ((isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0))) * _1620)) * cbPerFrame._m0[3u].x);
    float _2233 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
    float _2234 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
    float _2235 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
    uint _2236 = _757 + 6u;
    float _2244 = _718 / cbSceneParam._m0[86u].x;
    float _2245 = _719 / cbSceneParam._m0[86u].y;
    vec4 _2259 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2244, _2245, (log2((isnan(cbSceneParam._m0[77u].w) ? _692 : (isnan(_692) ? cbSceneParam._m0[77u].w : min(_692, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2261 = _2259.x;
    float _2262 = _2259.y;
    float _2263 = _2259.z;
    float _2264 = _2259.w;
    float _2344;
    float _2346;
    float _2348;
    float _2350;
    if (_692 > cbSceneParam._m0[78u].w)
    {
        float _2306 = isnan(_692) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _692 : min(cbSceneParam._m0[80u].w, _692));
        float _2307 = _2306 / _692;
        float _2318 = _2307 * _271;
        float _2319 = _272 * _2307;
        float _2320 = (-0.0) - _2319;
        float _2321 = _2307 * _273;
        float _2323 = (cbSceneParam._m0[77u].w * _2320) / _2306;
        float _2324 = _2323 + cbSceneParam._m0[79u].w;
        float _2325 = cbSceneParam._m0[79u].w - _2319;
        float _2331 = sqrt(((_2318 * _2318) + (_2319 * _2319)) + (_2321 * _2321));
        float _2334 = (1.0 - (cbSceneParam._m0[77u].w / _2306)) * _2331;
        float _2340 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2342 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2575;
        if (abs((_2320 - _2323) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2575 = ((((_2324 > 0.0) ? exp2(_2340 * _2324) : (2.0 - exp2(_2342 * _2324))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2334;
        }
        else
        {
            float _2494 = 1.0 / cbSceneParam._m0[80u].x;
            float _2495 = isnan(_2325) ? _2324 : (isnan(_2324) ? _2325 : max(_2324, _2325));
            float _2496 = isnan(_2325) ? _2324 : (isnan(_2324) ? _2325 : min(_2324, _2325));
            float _2505 = isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : min(_2495, 0.0));
            float _2506 = isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : min(_2496, 0.0));
            _2575 = ((abs(_2331 / _2320) * cbSceneParam._m0[80u].y) * ((((_2505 - _2506) * 2.0) - ((exp2(_2340 * (isnan(0.0) ? _2495 : (isnan(_2495) ? 0.0 : max(_2495, 0.0)))) - exp2(_2340 * (isnan(0.0) ? _2496 : (isnan(_2496) ? 0.0 : max(_2496, 0.0))))) * _2494)) - ((exp2(_2342 * _2505) - exp2(_2342 * _2506)) * _2494))) + (_2334 * cbSceneParam._m0[80u].z);
        }
        vec4 _2577 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2244, _2245, 1.0), 0.0);
        float _2586 = exp2((_2575 * (-1.44269502162933349609375)) * (1.0 - _2577.w));
        float _2587 = log2(_2586);
        float _2603 = log2(_2264);
        _2344 = (exp2(_2603 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2587 * cbSceneParam._m0[78u].x)) * _2577.x) / cbSceneParam._m0[78u].x)) + _2261;
        _2346 = (exp2(_2603 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2587 * cbSceneParam._m0[78u].y)) * _2577.y) / cbSceneParam._m0[78u].y)) + _2262;
        _2348 = (exp2(_2603 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2587 * cbSceneParam._m0[78u].z)) * _2577.z) / cbSceneParam._m0[78u].z)) + _2263;
        _2350 = _2586 * _2264;
    }
    else
    {
        _2344 = _2261;
        _2346 = _2262;
        _2348 = _2263;
        _2350 = _2264;
    }
    bool _2613;
    vec4 _2360;
    vec4 _2382;
    float _2384;
    float _2388;
    float _2389;
    float _2390;
    float _2391;
    bool _2401;
    for (;;)
    {
        _2360 = cbMatDynParam._m0[0u];
        float _2362 = roundEven(_2360.y);
        bool _2363 = _2362 == 3.0;
        float _2364 = log2(_2350);
        float _2371 = exp2(_2364 * cbSceneParam._m0[78u].x) * _2233;
        float _2372 = exp2(_2364 * cbSceneParam._m0[78u].y) * _2234;
        float _2373 = exp2(_2364 * cbSceneParam._m0[78u].z) * _2235;
        float _2380 = _706 + (-0.5);
        _2382 = cbMtdParam._m0[1u];
        _2384 = _2382.y * _2380;
        float _2387 = (_2362 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2388 = _2387 * (_2363 ? _2371 : (_2371 + (cbSceneParam._m0[72u].w * _2344)));
        _2389 = _2387 * (_2363 ? _2372 : (_2372 + (cbSceneParam._m0[72u].w * _2346)));
        _2390 = _2387 * (_2363 ? _2373 : (_2373 + (cbSceneParam._m0[72u].w * _2348)));
        _2391 = _2380 * 0.999000012874603271484375;
        _2401 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2401)
        {
            if ((cbInstanceData._m0[_757 + 7u].x + _2391) < 0.5)
            {
                _2613 = true;
                break;
            }
        }
        uint _2529 = _759 + uint(_2360.w);
        if ((cbInstanceData._m0[_2529].w < 1.0) && ((cbInstanceData._m0[_2529].w + _2391) < 0.5))
        {
            _2613 = true;
            break;
        }
        if ((_2384 + 1.0) < _2382.x)
        {
            _2613 = true;
            break;
        }
        _2613 = false;
        break;
    }
    float _2844;
    if (_2613)
    {
        discard_state = true;
        _2844 = 0.0;
    }
    else
    {
        _2844 = cbInstanceData._m0[_2236].w;
    }
    SV_Target.x = _2388;
    SV_Target.y = _2389;
    SV_Target.z = _2390;
    SV_Target.w = _2844;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2236].w;
    discard_exit();
}


