#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1169;
float _3321;
float _3322;
float _3323;
float _3324;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _198 = _197 * _190;
    float _199 = _197 * _191;
    float _200 = _197 * _192;
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = _204 * NORMAL.x;
    float _206 = _204 * NORMAL.y;
    float _207 = _204 * NORMAL.z;
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _212 = _211 * TANGENT.x;
    float _213 = _211 * TANGENT.y;
    float _214 = _211 * TANGENT.z;
    float _259 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _269 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _259);
    float _270 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _259);
    float _271 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _259);
    vec4 _284 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _287 = _284.x;
    vec4 _305 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _322 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _287) + cbMtdParam._m0[12u].x) * _305.x;
    float _324 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _287) + cbMtdParam._m0[12u].y) * _305.y;
    float _326 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _287) + cbMtdParam._m0[12u].z) * _305.z;
    vec4 _344 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _380 = cbMtdParam._m0[24u].x + _269;
    float _381 = cbMtdParam._m0[24u].y + _270;
    float _382 = cbMtdParam._m0[24u].z + _271;
    float _396 = (-0.0) - dot(vec3(_380, _381, _382), vec3(_198, _199, _200));
    float _397 = (-0.0) - dot(vec3(_380, _381, _382), vec3(_212, _213, _214));
    float _398 = (-0.0) - dot(vec3(_380, _381, _382), vec3((-0.0) - _205, (-0.0) - _206, (-0.0) - _207));
    float _402 = inversesqrt(dot(vec3(_396, _397, _398), vec3(_396, _397, _398)));
    float _405 = _402 * _398;
    float _406 = (_402 * _396) + ((cbMtdParam._m0[22u].x * _287) * ((_344.x * 2.0) + (-1.0)));
    float _407 = (_402 * _397) + ((cbMtdParam._m0[22u].y * _287) * ((_344.y * 2.0) + (-1.0)));
    float _408 = _406 * cbMtdParam._m0[20u].w;
    float _409 = _407 * cbMtdParam._m0[20u].z;
    float _410 = fract(TEXCOORD.x);
    float _411 = fract(TEXCOORD.y);
    float _417;
    if (_408 > 0.0)
    {
        _417 = (1.0 - _410) / _408;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_408 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _410) / _408;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _417 = frontier_phi_3_2_ladder;
    }
    float _425;
    if (_409 > 0.0)
    {
        _425 = (1.0 - _411) / _409;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_409 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _411) / _409;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _425 = frontier_phi_7_6_ladder;
    }
    bool _427 = _405 > 0.0;
    float _429 = _427 ? (cbMtdParam._m0[16u].x / _405) : 5000.0;
    float _430 = isnan(_425) ? _417 : (isnan(_417) ? _425 : min(_417, _425));
    float _431 = isnan(_429) ? _430 : (isnan(_430) ? _429 : min(_430, _429));
    float _435 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _436 = _410 + (-0.5);
    float _439 = _411 + (-0.5);
    float _442 = ((_431 * _405) + _435) / _435;
    vec4 _467 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (((((_436 + (_431 * _408)) / _442) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (((((_439 + (_431 * _409)) / _442) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    float _480 = (_467.x * _287) * cbMtdParam._m0[9u].x;
    float _481 = (_467.y * _287) * cbMtdParam._m0[9u].y;
    float _482 = (_467.z * _287) * cbMtdParam._m0[9u].z;
    float _501 = _406 * cbMtdParam._m0[22u].w;
    float _502 = _407 * cbMtdParam._m0[22u].z;
    bool _503 = _501 > 0.0;
    float _508;
    if (_503)
    {
        _508 = (1.0 - _410) / _501;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_501 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _410) / _501;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _508 = frontier_phi_11_10_ladder;
    }
    bool _510 = _502 > 0.0;
    float _515;
    if (_510)
    {
        _515 = (1.0 - _411) / _502;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_502 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _411) / _502;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _515 = frontier_phi_15_14_ladder;
    }
    float _518 = _427 ? (cbMtdParam._m0[18u].x / _405) : 5000.0;
    float _519 = isnan(_515) ? _508 : (isnan(_508) ? _515 : min(_508, _515));
    float _520 = isnan(_518) ? _519 : (isnan(_519) ? _518 : min(_519, _518));
    float _524 = cbMtdParam._m0[19u].y * cbMtdParam._m0[18u].x;
    float _528 = ((_520 * _405) + _524) / _524;
    float _533 = cbMtdParam._m0[19u].x - cbMtdParam._m0[20u].x * trunc(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    float _535 = floor(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    vec4 _551 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_436 + (_520 * _501)) / _528) + 0.5) + _533) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_439 + (_520 * _502)) / _528) + 0.5) + _535) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[0u].w));
    float _566;
    if (_503)
    {
        _566 = (1.0 - _410) / _501;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_501 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _410) / _501;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _566 = frontier_phi_19_18_ladder;
    }
    float _572;
    if (_510)
    {
        _572 = (1.0 - _411) / _502;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_502 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _411) / _502;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _572 = frontier_phi_23_22_ladder;
    }
    float _574 = isnan(_572) ? _566 : (isnan(_566) ? _572 : min(_566, _572));
    float _575 = isnan(_518) ? _574 : (isnan(_574) ? _518 : min(_574, _518));
    float _582 = ((_575 * _405) + _524) / _524;
    vec4 _602 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_436 + (_575 * _501)) / _582) + 0.5) + _533) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_439 + (_575 * _502)) / _582) + 0.5) + _535) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[8u].w));
    float _604 = _602.x;
    vec4 _629 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _633 = _629.z;
    float _636 = (_629.x * 2.0) + (-1.0);
    float _637 = (_629.y * 2.0) + (-1.0);
    float _638 = dot(vec2(_636, _637), vec2(_636, _637));
    float _3363 = isnan(0.0) ? _638 : (isnan(_638) ? 0.0 : max(_638, 0.0));
    float _643 = sqrt(1.0 - (isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0))));
    float _646 = fma(_643, _205, fma(_637, _212, _636 * _198));
    float _649 = fma(_643, _206, fma(_637, _213, _636 * _199));
    float _652 = fma(_643, _207, fma(_637, _214, _636 * _200));
    float _656 = inversesqrt(dot(vec3(_646, _649, _652), vec3(_646, _649, _652)));
    float _657 = _656 * _646;
    float _658 = _656 * _649;
    float _659 = _656 * _652;
    float _3374 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _660 = isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0));
    float _3385 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _3396 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _3407 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _679 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _683 = inversesqrt(dot(vec3(_269, _270, _271), vec3(_269, _270, _271)));
    float _684 = _269 * _683;
    float _685 = _270 * _683;
    float _686 = _271 * _683;
    vec4 _691 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _693 = _691.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _850 = sqrt(((_269 * _269) + (_270 * _270)) + (_271 * _271));
        float _856 = (cbMatDynParam._m0[5u].x * _850) + cbMatDynParam._m0[5u].y;
        float _3418 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _857 = isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0));
        float _861 = (cbMatDynParam._m0[5u].z * _850) + cbMatDynParam._m0[5u].w;
        float _3429 = isnan(0.0) ? _861 : (isnan(_861) ? 0.0 : max(_861, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0))) - _857)) + _857) < ((_693 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _705 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _706 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _725 = fma(_659, cbSceneParam._m0[5u].z, fma(_658, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _657));
    float _728 = fma(_659, cbSceneParam._m0[6u].z, fma(_658, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _657));
    float _731 = fma(_659, cbSceneParam._m0[7u].z, fma(_658, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _657));
    uint _744 = uint(roundEven(NORMAL.w)) * 13u;
    uint _746 = _744 + 9u;
    uint _747 = _746 + uint(cbMatDynParam._m0[0u].w);
    float _753 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0)))) * cbInstanceData._m0[_747].x;
    float _754 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0)))) * cbInstanceData._m0[_747].y;
    float _755 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0)))) * cbInstanceData._m0[_747].z;
    float _3440 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _756 = isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0));
    float _3451 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _757 = isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0));
    float _3462 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _758 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
    vec4 _767 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _705, cbSceneParam._m0[86u].y * _706));
    float _770 = _767.x * TEXCOORD_4.z;
    float _771 = dot(vec3(_657, _658, _659), vec3(_684, _685, _686));
    float _774 = _771 * 2.0;
    float _778 = (_774 * _657) - _684;
    float _779 = (_774 * _658) - _685;
    float _780 = (_774 * _659) - _686;
    float _784 = abs(dot(vec3(_684, _685, _686), vec3(_657, _658, _659)));
    float _3473 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _786 = sqrt(_660);
    float _799 = exp2((_786 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_786 * 3.0));
    float _831 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _835 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _839 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1168;
    float _1170;
    float _1171;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _895 = fma(_839, cbModelParam._m0[26u].z, fma(_835, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _831));
        float _899 = fma(_839, cbModelParam._m0[27u].z, fma(_835, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _831));
        float _903 = fma(_839, cbModelParam._m0[28u].z, fma(_835, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _831));
        float _926 = _831 + _657;
        float _927 = _835 + _658;
        float _928 = _839 + _659;
        float _938 = fma(_928, cbModelParam._m0[26u].z, fma(_927, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _926)) - _895;
        float _939 = fma(_928, cbModelParam._m0[27u].z, fma(_927, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _926)) - _899;
        float _940 = fma(_928, cbModelParam._m0[28u].z, fma(_927, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _926)) - _903;
        float _944 = inversesqrt(dot(vec3(_938, _939, _940), vec3(_938, _939, _940)));
        float _957 = ((_944 * _938) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_895 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _958 = ((_944 * _939) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_899 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _959 = ((_944 * _940) / cbModelParam._m0[34u].z) + ((((((_903 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _962 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _969 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _976 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        vec4 _983 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_957, _958, _959), 0.0);
        float _996 = exp2((_962.w + (-0.5)) * 20.0) * 2.0;
        float _997 = _996 * (_962.x + (-0.5));
        float _998 = _996 * (_962.y + (-0.5));
        float _999 = _996 * (_962.z + (-0.5));
        float _1006 = exp2((_969.w + (-0.5)) * 20.0) * 2.0;
        float _1007 = _1006 * (_969.x + (-0.5));
        float _1008 = _1006 * (_969.y + (-0.5));
        float _1009 = _1006 * (_969.z + (-0.5));
        float _1016 = exp2((_976.w + (-0.5)) * 20.0) * 2.0;
        float _1017 = _1016 * (_976.x + (-0.5));
        float _1018 = _1016 * (_976.y + (-0.5));
        float _1019 = _1016 * (_976.z + (-0.5));
        float _1026 = exp2((_983.w + (-0.5)) * 20.0) * 2.0;
        float _1027 = _1026 * (_983.x + (-0.5));
        float _1028 = _1026 * (_983.y + (-0.5));
        float _1029 = _1026 * (_983.z + (-0.5));
        float _1030 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1031 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1032 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1033 = _997 * 0.5;
        float _1034 = _1007 * 0.5;
        float _1035 = _1017 * 0.5;
        float _1036 = dot(vec3(_1033, _1034, _1035), vec3(_1033, _1034, _1035));
        float _1041 = (_1036 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1036);
        float _1050 = (dot(vec3(_657, _658, _659), vec3(_1041 * _1033, _1041 * _1034, _1041 * _1035)) + 1.0) * 0.5;
        float _3499 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1060 = sqrt(((_1034 * _1034) + (_1033 * _1033)) + (_1035 * _1035)) / (_1030 + 9.9999997473787516355514526367188e-06);
        float _3510 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1061 = isnan(1.0) ? _3510 : (isnan(_3510) ? 1.0 : min(_3510, 1.0));
        float _1062 = _1061 * 2.0;
        float _1066 = (1.0 - _1061) / (_1061 + 1.0);
        float _3521 = isnan(0.0) ? _1066 : (isnan(_1066) ? 0.0 : max(_1066, 0.0));
        float _1067 = isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0));
        float _1076 = ((((1.0 - _1067) * (_1062 + 2.0)) * exp2(log2(isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0))) * (_1062 + 1.0))) + _1067) * _1030;
        float _1077 = _998 * 0.5;
        float _1078 = _1008 * 0.5;
        float _1079 = _1018 * 0.5;
        float _1080 = dot(vec3(_1077, _1078, _1079), vec3(_1077, _1078, _1079));
        float _1085 = (_1080 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1080);
        float _1093 = (dot(vec3(_657, _658, _659), vec3(_1085 * _1077, _1085 * _1078, _1085 * _1079)) + 1.0) * 0.5;
        float _3532 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1102 = sqrt(((_1078 * _1078) + (_1077 * _1077)) + (_1079 * _1079)) / (_1031 + 9.9999997473787516355514526367188e-06);
        float _3543 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1103 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
        float _1104 = _1103 * 2.0;
        float _1108 = (1.0 - _1103) / (_1103 + 1.0);
        float _3554 = isnan(0.0) ? _1108 : (isnan(_1108) ? 0.0 : max(_1108, 0.0));
        float _1109 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
        float _1118 = ((((1.0 - _1109) * (_1104 + 2.0)) * exp2(log2(isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0))) * (_1104 + 1.0))) + _1109) * _1031;
        float _1119 = _999 * 0.5;
        float _1120 = _1009 * 0.5;
        float _1121 = _1019 * 0.5;
        float _1122 = dot(vec3(_1119, _1120, _1121), vec3(_1119, _1120, _1121));
        float _1127 = (_1122 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1122);
        float _1135 = (dot(vec3(_657, _658, _659), vec3(_1127 * _1119, _1127 * _1120, _1127 * _1121)) + 1.0) * 0.5;
        float _3565 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1144 = sqrt(((_1120 * _1120) + (_1119 * _1119)) + (_1121 * _1121)) / (_1032 + 9.9999997473787516355514526367188e-06);
        float _3576 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1145 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
        float _1146 = _1145 * 2.0;
        float _1150 = (1.0 - _1145) / (_1145 + 1.0);
        float _3587 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
        float _1160 = ((((1.0 - _1151) * (_1146 + 2.0)) * exp2(log2(isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0))) * (_1146 + 1.0))) + _1151) * _1032;
        _1168 = _999;
        _1170 = _998;
        _1171 = _997;
        _1172 = _1009;
        _1173 = _1008;
        _1174 = _1007;
        _1175 = _1019;
        _1176 = _1018;
        _1177 = _1017;
        _1178 = _1032;
        _1179 = _1031;
        _1180 = _1030;
        _1181 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0)));
        _1182 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0)));
        _1183 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0)));
    }
    else
    {
        _1168 = _1169;
        _1170 = _1169;
        _1171 = _1169;
        _1172 = _1169;
        _1173 = _1169;
        _1174 = _1169;
        _1175 = _1169;
        _1176 = _1169;
        _1177 = _1169;
        _1178 = _1169;
        _1179 = _1169;
        _1180 = _1169;
        _1181 = 0.0;
        _1182 = 0.0;
        _1183 = 0.0;
    }
    float _1481;
    float _1482;
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1212 = fma(_839, cbModelParam._m0[30u].z, fma(_835, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _831));
        float _1216 = fma(_839, cbModelParam._m0[31u].z, fma(_835, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _831));
        float _1220 = fma(_839, cbModelParam._m0[32u].z, fma(_835, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _831));
        float _1243 = _831 + _657;
        float _1244 = _835 + _658;
        float _1245 = _839 + _659;
        float _1255 = fma(_1245, cbModelParam._m0[30u].z, fma(_1244, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1243)) - _1212;
        float _1256 = fma(_1245, cbModelParam._m0[31u].z, fma(_1244, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1243)) - _1216;
        float _1257 = fma(_1245, cbModelParam._m0[32u].z, fma(_1244, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1243)) - _1220;
        float _1261 = inversesqrt(dot(vec3(_1255, _1256, _1257), vec3(_1255, _1256, _1257)));
        float _1274 = ((_1261 * _1255) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1212 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1275 = ((_1261 * _1256) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1216 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1276 = ((_1261 * _1257) / cbModelParam._m0[35u].z) + ((((((_1220 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1278 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        vec4 _1285 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        vec4 _1292 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        vec4 _1299 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1274, _1275, _1276), 0.0);
        float _1311 = exp2((_1278.w + (-0.5)) * 20.0) * 2.0;
        float _1312 = _1311 * (_1278.x + (-0.5));
        float _1313 = _1311 * (_1278.y + (-0.5));
        float _1314 = _1311 * (_1278.z + (-0.5));
        float _1321 = exp2((_1285.w + (-0.5)) * 20.0) * 2.0;
        float _1322 = _1321 * (_1285.x + (-0.5));
        float _1323 = _1321 * (_1285.y + (-0.5));
        float _1324 = _1321 * (_1285.z + (-0.5));
        float _1331 = exp2((_1292.w + (-0.5)) * 20.0) * 2.0;
        float _1332 = _1331 * (_1292.x + (-0.5));
        float _1333 = _1331 * (_1292.y + (-0.5));
        float _1334 = _1331 * (_1292.z + (-0.5));
        float _1341 = exp2((_1299.w + (-0.5)) * 20.0) * 2.0;
        float _1342 = _1341 * (_1299.x + (-0.5));
        float _1343 = _1341 * (_1299.y + (-0.5));
        float _1344 = _1341 * (_1299.z + (-0.5));
        float _1345 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1346 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1347 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1348 = _1312 * 0.5;
        float _1349 = _1322 * 0.5;
        float _1350 = _1332 * 0.5;
        float _1351 = dot(vec3(_1348, _1349, _1350), vec3(_1348, _1349, _1350));
        float _1356 = (_1351 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1351);
        float _1364 = (dot(vec3(_657, _658, _659), vec3(_1356 * _1348, _1356 * _1349, _1356 * _1350)) + 1.0) * 0.5;
        float _3628 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1373 = sqrt(((_1349 * _1349) + (_1348 * _1348)) + (_1350 * _1350)) / (_1345 + 9.9999997473787516355514526367188e-06);
        float _3639 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1374 = isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0));
        float _1375 = _1374 * 2.0;
        float _1379 = (1.0 - _1374) / (_1374 + 1.0);
        float _3650 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _1389 = ((((1.0 - _1380) * (_1375 + 2.0)) * exp2(log2(isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0))) * (_1375 + 1.0))) + _1380) * _1345;
        float _1390 = _1313 * 0.5;
        float _1391 = _1323 * 0.5;
        float _1392 = _1333 * 0.5;
        float _1393 = dot(vec3(_1390, _1391, _1392), vec3(_1390, _1391, _1392));
        float _1398 = (_1393 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1393);
        float _1406 = (dot(vec3(_657, _658, _659), vec3(_1398 * _1390, _1398 * _1391, _1398 * _1392)) + 1.0) * 0.5;
        float _3661 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1415 = sqrt(((_1391 * _1391) + (_1390 * _1390)) + (_1392 * _1392)) / (_1346 + 9.9999997473787516355514526367188e-06);
        float _3672 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1416 = isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0));
        float _1417 = _1416 * 2.0;
        float _1421 = (1.0 - _1416) / (_1416 + 1.0);
        float _3683 = isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0));
        float _1422 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _1431 = ((((1.0 - _1422) * (_1417 + 2.0)) * exp2(log2(isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0))) * (_1417 + 1.0))) + _1422) * _1346;
        float _1432 = _1314 * 0.5;
        float _1433 = _1324 * 0.5;
        float _1434 = _1334 * 0.5;
        float _1435 = dot(vec3(_1432, _1433, _1434), vec3(_1432, _1433, _1434));
        float _1440 = (_1435 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1435);
        float _1448 = (dot(vec3(_657, _658, _659), vec3(_1440 * _1432, _1440 * _1433, _1440 * _1434)) + 1.0) * 0.5;
        float _3694 = isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0));
        float _1457 = sqrt(((_1433 * _1433) + (_1432 * _1432)) + (_1434 * _1434)) / (_1347 + 9.9999997473787516355514526367188e-06);
        float _3705 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
        float _1458 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
        float _1459 = _1458 * 2.0;
        float _1463 = (1.0 - _1458) / (_1458 + 1.0);
        float _3716 = isnan(0.0) ? _1463 : (isnan(_1463) ? 0.0 : max(_1463, 0.0));
        float _1464 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _1473 = ((((1.0 - _1464) * (_1459 + 2.0)) * exp2(log2(isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0))) * (_1459 + 1.0))) + _1464) * _1347;
        _1481 = _1314;
        _1482 = _1313;
        _1483 = _1312;
        _1484 = _1324;
        _1485 = _1323;
        _1486 = _1322;
        _1487 = _1334;
        _1488 = _1333;
        _1489 = _1332;
        _1490 = _1347;
        _1491 = _1346;
        _1492 = _1345;
        _1493 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)));
        _1494 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)));
        _1495 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)));
    }
    else
    {
        _1481 = _1169;
        _1482 = _1169;
        _1483 = _1169;
        _1484 = _1169;
        _1485 = _1169;
        _1486 = _1169;
        _1487 = _1169;
        _1488 = _1169;
        _1489 = _1169;
        _1490 = _1169;
        _1491 = _1169;
        _1492 = _1169;
        _1493 = 0.0;
        _1494 = 0.0;
        _1495 = 0.0;
    }
    float _1505 = (cbModelParam._m0[1u].x * (_1493 - _1181)) + _1181;
    float _1506 = (cbModelParam._m0[1u].x * (_1494 - _1182)) + _1182;
    float _1507 = (cbModelParam._m0[1u].x * (_1495 - _1183)) + _1183;
    float _1528 = fma(_1507, cbSceneParam._m0[89u].z, fma(_1506, cbSceneParam._m0[89u].y, _1505 * cbSceneParam._m0[89u].x));
    float _1531 = fma(_1507, cbSceneParam._m0[90u].z, fma(_1506, cbSceneParam._m0[90u].y, _1505 * cbSceneParam._m0[90u].x));
    float _1534 = fma(_1507, cbSceneParam._m0[91u].z, fma(_1506, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1505));
    float _1549 = _778 * 0.5;
    float _1550 = _779 * 0.5;
    float _1551 = _780 * 0.5;
    float _1552 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1483, _1486, _1489, _1492));
    float _1555 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1482, _1485, _1488, _1491));
    float _1558 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1481, _1484, _1487, _1490));
    float _1592;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1565 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1168, _1172, _1175, _1178));
        float _1569 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1170, _1173, _1176, _1179));
        float _1573 = dot(vec4(_1549, _1550, _1551, 1.0), vec4(_1171, _1174, _1177, _1180));
        float _1580 = dot(vec4(cbModelParam._m0[39u]), vec4(_1549, _1550, _1551, 1.0));
        _1592 = dot(vec3(isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)), isnan(0.0) ? _1569 : (isnan(_1569) ? 0.0 : max(_1569, 0.0)), isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1580) ? 0.0 : (isnan(0.0) ? _1580 : max(0.0, _1580))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1592 = 1.0;
    }
    float _1603;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1594 = dot(vec4(cbModelParam._m0[40u]), vec4(_1549, _1550, _1551, 1.0));
        _1603 = dot(vec3(isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0)), isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0)), isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1594) ? 0.0 : (isnan(0.0) ? _1594 : max(0.0, _1594))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1603 = 1.0;
    }
    float _1607 = (_1603 * cbModelParam._m0[1u].x) + (_1592 * (1.0 - cbModelParam._m0[1u].x));
    float _1617 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _660);
    float _1618 = isnan(_1617) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1617 : min(cbModelParam._m0[25u].z, _1617));
    float _1700;
    float _1702;
    float _1704;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1667 = fma(_839, cbModelParam._m0[13u].z, fma(_835, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _831)) + cbModelParam._m0[13u].w;
        float _1671 = fma(_839, cbModelParam._m0[14u].z, fma(_835, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _831)) + cbModelParam._m0[14u].w;
        float _1675 = fma(_839, cbModelParam._m0[15u].z, fma(_835, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _831)) + cbModelParam._m0[15u].w;
        float _1678 = fma(_780, cbModelParam._m0[13u].z, fma(_779, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _778));
        float _1681 = fma(_780, cbModelParam._m0[14u].z, fma(_779, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _778));
        float _1684 = fma(_780, cbModelParam._m0[15u].z, fma(_779, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _778));
        float _1712;
        if (_1678 > 0.0)
        {
            _1712 = abs((1.0 - _1667) / _1678);
        }
        else
        {
            float frontier_phi_41_39_ladder;
            if (_1678 < 0.0)
            {
                frontier_phi_41_39_ladder = abs((_1667 + 1.0) / _1678);
            }
            else
            {
                frontier_phi_41_39_ladder = 5000.0;
            }
            _1712 = frontier_phi_41_39_ladder;
        }
        float _2057;
        if (_1681 > 0.0)
        {
            _2057 = abs((1.0 - _1671) / _1681);
        }
        else
        {
            float frontier_phi_50_46_ladder;
            if (_1681 < 0.0)
            {
                frontier_phi_50_46_ladder = abs((_1671 + 1.0) / _1681);
            }
            else
            {
                frontier_phi_50_46_ladder = 5000.0;
            }
            _2057 = frontier_phi_50_46_ladder;
        }
        float _2381;
        if (_1684 > 0.0)
        {
            _2381 = abs((1.0 - _1675) / _1684);
        }
        else
        {
            float frontier_phi_64_57_ladder;
            if (_1684 < 0.0)
            {
                frontier_phi_64_57_ladder = abs((_1675 + 1.0) / _1684);
            }
            else
            {
                frontier_phi_64_57_ladder = 5000.0;
            }
            _2381 = frontier_phi_64_57_ladder;
        }
        float _2383 = isnan(_2057) ? _1712 : (isnan(_1712) ? _2057 : min(_1712, _2057));
        float _2384 = isnan(_2381) ? _2383 : (isnan(_2383) ? _2381 : min(_2383, _2381));
        float _2388 = (_2384 * _1678) + _1667;
        float _2389 = (_2384 * _1681) + _1671;
        float _2390 = (_2384 * _1684) + _1675;
        float _2391 = _2384 * 9.9999997473787516355514526367188e-05;
        float _2392 = (-1.0) - _2391;
        float _2394 = _2391 + 1.0;
        float frontier_phi_40_64_ladder;
        float frontier_phi_40_64_ladder_1;
        float frontier_phi_40_64_ladder_2;
        if ((_2390 > _2394) || ((_2390 < _2392) || ((_2389 > _2394) || ((_2389 < _2392) || ((_2388 < _2392) || (_2388 > _2394))))))
        {
            frontier_phi_40_64_ladder = 0.0;
            frontier_phi_40_64_ladder_1 = 0.0;
            frontier_phi_40_64_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2532 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2390, cbModelParam._m0[9u].z, fma(_2389, cbModelParam._m0[9u].y, _2388 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2390, cbModelParam._m0[10u].z, fma(_2389, cbModelParam._m0[10u].y, _2388 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2390, cbModelParam._m0[11u].z, fma(_2389, cbModelParam._m0[11u].y, _2388 * cbModelParam._m0[11u].x))), _1618);
            frontier_phi_40_64_ladder = _2532.z * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_1 = _2532.y * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_2 = _2532.x * cbModelParam._m0[1u].y;
        }
        _1700 = frontier_phi_40_64_ladder_2;
        _1702 = frontier_phi_40_64_ladder_1;
        _1704 = frontier_phi_40_64_ladder;
    }
    else
    {
        vec4 _1688 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_778, _779, _780), _1618);
        _1700 = _1688.x * cbModelParam._m0[1u].y;
        _1702 = _1688.y * cbModelParam._m0[1u].y;
        _1704 = _1688.z * cbModelParam._m0[1u].y;
    }
    float _1708 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _660);
    float _1709 = isnan(_1708) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1708 : min(cbModelParam._m0[25u].w, _1708));
    float _1797;
    float _1799;
    float _1801;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1761 = fma(_839, cbModelParam._m0[21u].z, fma(_835, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _831)) + cbModelParam._m0[21u].w;
        float _1765 = fma(_839, cbModelParam._m0[22u].z, fma(_835, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _831)) + cbModelParam._m0[22u].w;
        float _1769 = fma(_839, cbModelParam._m0[23u].z, fma(_835, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _831)) + cbModelParam._m0[23u].w;
        float _1772 = fma(_780, cbModelParam._m0[21u].z, fma(_779, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _778));
        float _1775 = fma(_780, cbModelParam._m0[22u].z, fma(_779, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _778));
        float _1778 = fma(_780, cbModelParam._m0[23u].z, fma(_779, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _778));
        float _2062;
        if (_1772 > 0.0)
        {
            _2062 = abs((1.0 - _1761) / _1772);
        }
        else
        {
            float frontier_phi_52_48_ladder;
            if (_1772 < 0.0)
            {
                frontier_phi_52_48_ladder = abs((_1761 + 1.0) / _1772);
            }
            else
            {
                frontier_phi_52_48_ladder = 5000.0;
            }
            _2062 = frontier_phi_52_48_ladder;
        }
        float _2407;
        if (_1775 > 0.0)
        {
            _2407 = abs((1.0 - _1765) / _1775);
        }
        else
        {
            float frontier_phi_66_59_ladder;
            if (_1775 < 0.0)
            {
                frontier_phi_66_59_ladder = abs((_1765 + 1.0) / _1775);
            }
            else
            {
                frontier_phi_66_59_ladder = 5000.0;
            }
            _2407 = frontier_phi_66_59_ladder;
        }
        float _2597;
        if (_1778 > 0.0)
        {
            _2597 = abs((1.0 - _1769) / _1778);
        }
        else
        {
            float frontier_phi_84_77_ladder;
            if (_1778 < 0.0)
            {
                frontier_phi_84_77_ladder = abs((_1769 + 1.0) / _1778);
            }
            else
            {
                frontier_phi_84_77_ladder = 5000.0;
            }
            _2597 = frontier_phi_84_77_ladder;
        }
        float _2599 = isnan(_2407) ? _2062 : (isnan(_2062) ? _2407 : min(_2062, _2407));
        float _2600 = isnan(_2597) ? _2599 : (isnan(_2599) ? _2597 : min(_2599, _2597));
        float _2604 = (_2600 * _1772) + _1761;
        float _2605 = (_2600 * _1775) + _1765;
        float _2606 = (_2600 * _1778) + _1769;
        float _2607 = _2600 * 9.9999997473787516355514526367188e-05;
        float _2608 = (-1.0) - _2607;
        float _2610 = _2607 + 1.0;
        float frontier_phi_49_84_ladder;
        float frontier_phi_49_84_ladder_1;
        float frontier_phi_49_84_ladder_2;
        if ((_2606 > _2610) || ((_2606 < _2608) || ((_2605 > _2610) || ((_2605 < _2608) || ((_2604 < _2608) || (_2604 > _2610))))))
        {
            frontier_phi_49_84_ladder = 0.0;
            frontier_phi_49_84_ladder_1 = 0.0;
            frontier_phi_49_84_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2848 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2606, cbModelParam._m0[17u].z, fma(_2605, cbModelParam._m0[17u].y, _2604 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2606, cbModelParam._m0[18u].z, fma(_2605, cbModelParam._m0[18u].y, _2604 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2606, cbModelParam._m0[19u].z, fma(_2605, cbModelParam._m0[19u].y, _2604 * cbModelParam._m0[19u].x))), _1709);
            frontier_phi_49_84_ladder = _2848.z * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_1 = _2848.y * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_2 = _2848.x * cbModelParam._m0[1u].z;
        }
        _1797 = frontier_phi_49_84_ladder_2;
        _1799 = frontier_phi_49_84_ladder_1;
        _1801 = frontier_phi_49_84_ladder;
    }
    else
    {
        vec4 _1781 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_778, _779, _780), _1709);
        _1797 = _1781.x * cbModelParam._m0[1u].z;
        _1799 = _1781.y * cbModelParam._m0[1u].z;
        _1801 = _1781.z * cbModelParam._m0[1u].z;
    }
    float _1813 = ((((1.0 - _799) * ((_786 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_799 * _786)) * _770;
    float _1814 = _1813 * ((cbModelParam._m0[1u].w * (_1797 - _1700)) + _1700);
    float _1815 = _1813 * ((cbModelParam._m0[1u].w * (_1799 - _1702)) + _1702);
    float _1816 = _1813 * ((cbModelParam._m0[1u].w * (_1801 - _1704)) + _1704);
    float _1819 = fma(_1816, cbSceneParam._m0[89u].z, fma(_1815, cbSceneParam._m0[89u].y, _1814 * cbSceneParam._m0[89u].x));
    float _1822 = fma(_1816, cbSceneParam._m0[90u].z, fma(_1815, cbSceneParam._m0[90u].y, _1814 * cbSceneParam._m0[90u].x));
    float _1825 = fma(_1816, cbSceneParam._m0[91u].z, fma(_1815, cbSceneParam._m0[91u].y, _1814 * cbSceneParam._m0[91u].x));
    uvec4 _1835 = floatBitsToUint(cbInstanceData._m0[_744 + 5u]);
    uint _1837 = _1835.x * 14u;
    uint _1838 = _1837 + 13u;
    float _1843 = _770 + (-1.0);
    float _1846 = (cbLight._m0[_1838].x * _1843) + 1.0;
    float _1847 = (cbLight._m0[_1838].y * _1843) + 1.0;
    uint _1848 = _1837 + 5u;
    float _1854 = isnan(1.0) ? _1847 : (isnan(_1847) ? 1.0 : min(_1847, 1.0));
    uint _1858 = _1837 + 4u;
    float _1864 = isnan(1.0) ? _1846 : (isnan(_1846) ? 1.0 : min(_1846, 1.0));
    uint _1868 = _1837 | 1u;
    float _1879 = dot(vec3(cbLight._m0[_1837].xyz), vec3(_657, _658, _659));
    float _1882 = dot(vec3(cbLight._m0[_1868].xyz), vec3(_657, _658, _659));
    float _3852 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
    float _3863 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
    float _1887 = (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0))) * 0.3183098733425140380859375;
    float _1889 = (isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0))) * 0.3183098733425140380859375;
    float _1896 = ((cbLight._m0[_1848].x * _1854) * _1889) + ((cbLight._m0[_1858].x * _1864) * _1887);
    float _1897 = ((_1854 * cbLight._m0[_1848].y) * _1889) + ((_1864 * cbLight._m0[_1858].y) * _1887);
    float _1898 = ((_1854 * cbLight._m0[_1848].z) * _1889) + ((_1864 * cbLight._m0[_1858].z) * _1887);
    uint _1900 = _1837 + 8u;
    float _1913 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1837].w)) * _660) * 0.949999988079071044921875);
    float _1914 = _1913 * _1913;
    float _1915 = cbLight._m0[_1837].x + _684;
    float _1916 = cbLight._m0[_1837].y + _685;
    float _1917 = cbLight._m0[_1837].z + _686;
    float _1921 = inversesqrt(dot(vec3(_1915, _1916, _1917), vec3(_1915, _1916, _1917)));
    float _1922 = _1921 * _1915;
    float _1923 = _1921 * _1916;
    float _1924 = _1921 * _1917;
    float _1925 = dot(vec3(_657, _658, _659), vec3(cbLight._m0[_1837].xyz));
    float _3874 = isnan(0.0) ? _1925 : (isnan(_1925) ? 0.0 : max(_1925, 0.0));
    float _1928 = isnan(1.0) ? _3874 : (isnan(_3874) ? 1.0 : min(_3874, 1.0));
    float _3885 = isnan(0.0) ? _771 : (isnan(_771) ? 0.0 : max(_771, 0.0));
    float _1929 = isnan(1.0) ? _3885 : (isnan(_3885) ? 1.0 : min(_3885, 1.0));
    float _1930 = dot(vec3(_657, _658, _659), vec3(_1922, _1923, _1924));
    float _3896 = isnan(0.0) ? _1930 : (isnan(_1930) ? 0.0 : max(_1930, 0.0));
    float _1933 = isnan(1.0) ? _3896 : (isnan(_3896) ? 1.0 : min(_3896, 1.0));
    float _1934 = dot(vec3(cbLight._m0[_1837].xyz), vec3(_1922, _1923, _1924));
    float _3907 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
    float _1938 = _1914 * _1914;
    float _1942 = ((_1933 * _1933) * (_1938 + (-1.0))) + 1.0;
    float _1953 = (exp2(log2(1.0 - (isnan(1.0) ? _3907 : (isnan(_3907) ? 1.0 : min(_3907, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1954 = 1.0 - _1914;
    float _1965 = (0.5 / (((_1929 * ((_1928 * _1954) + _1914)) + 9.9999999392252902907785028219223e-09) + (((_1929 * _1954) + _1914) * _1928))) * _1928;
    float _3918 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
    float _1967 = (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) * (_1938 / ((_1942 * _1942) * 3.141590118408203125));
    uint _1978 = _1837 + 9u;
    float _1989 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1868].w)) * _660) * 0.949999988079071044921875);
    float _1990 = _1989 * _1989;
    float _1991 = cbLight._m0[_1868].x + _684;
    float _1992 = cbLight._m0[_1868].y + _685;
    float _1993 = cbLight._m0[_1868].z + _686;
    float _1997 = inversesqrt(dot(vec3(_1991, _1992, _1993), vec3(_1991, _1992, _1993)));
    float _1998 = _1997 * _1991;
    float _1999 = _1997 * _1992;
    float _2000 = _1997 * _1993;
    float _2001 = dot(vec3(_657, _658, _659), vec3(cbLight._m0[_1868].xyz));
    float _3929 = isnan(0.0) ? _2001 : (isnan(_2001) ? 0.0 : max(_2001, 0.0));
    float _2004 = isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0));
    float _2005 = dot(vec3(_657, _658, _659), vec3(_1998, _1999, _2000));
    float _3940 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
    float _2008 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _2009 = dot(vec3(cbLight._m0[_1868].xyz), vec3(_1998, _1999, _2000));
    float _3951 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
    float _2013 = _1990 * _1990;
    float _2017 = ((_2008 * _2008) * (_2013 + (-1.0))) + 1.0;
    float _2026 = (exp2(log2(1.0 - (isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2027 = 1.0 - _1990;
    float _2037 = (0.5 / (((_1929 * ((_2004 * _2027) + _1990)) + 9.9999999392252902907785028219223e-09) + (((_1929 * _2027) + _1990) * _2004))) * _2004;
    float _3962 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0));
    float _2039 = (isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0))) * (_2013 / ((_2017 * _2017) * 3.141590118408203125));
    float _2049 = (((_2026 * cbLight._m0[_1978].x) * _2039) * _1854) + (((_1953 * cbLight._m0[_1900].x) * _1967) * _1864);
    float _2050 = (((_2026 * cbLight._m0[_1978].y) * _2039) * _1854) + (((_1953 * cbLight._m0[_1900].y) * _1967) * _1864);
    float _2051 = (((_2026 * cbLight._m0[_1978].z) * _2039) * _1854) + (((_1953 * cbLight._m0[_1900].z) * _1967) * _1864);
    float _2166;
    float _2168;
    float _2170;
    float _2172;
    float _2174;
    float _2176;
    if (_1835.y == 0u)
    {
        float _2106 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2107 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2106;
        float _2108 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2106;
        float _2109 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2106;
        uvec4 _2121 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2122 = _2121.x;
        uint _2133 = uint((float(_2121.y) * floor(float(uint(cbSceneParam._m0[85u].y * _706) / _2122))) + floor(float(uint(cbSceneParam._m0[85u].x * _705) / _2122)));
        float _2143 = (log2(_2109 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2144 = isnan(0.0) ? _2143 : (isnan(_2143) ? 0.0 : max(_2143, 0.0));
        uint _2147 = uint(isnan(14.0) ? _2144 : (isnan(_2144) ? 14.0 : min(_2144, 14.0)));
        uvec4 _2152 = texelFetch(g_lightClusterGridBuffer, int(((_2147 << 2u) + (_2133 << 6u)) >> 2u));
        uint _2153 = _2152.x;
        uint _2154 = _2121.z;
        float _2260;
        float _2262;
        float _2264;
        float _2266;
        float _2268;
        float _2270;
        if (((((1u << ((_2154 >> 4u) & 15u)) + 4294967295u) & _2153) == 0u) || ((_2154 & 240u) == 0u))
        {
            _2260 = 0.0;
            _2262 = 0.0;
            _2264 = 0.0;
            _2266 = 0.0;
            _2268 = 0.0;
            _2270 = 0.0;
        }
        else
        {
            float _2261;
            float _2263;
            float _2265;
            float _2267;
            float _2269;
            float _2271;
            float _2444 = 0.0;
            float _2445 = 0.0;
            float _2446 = 0.0;
            float _2447 = 0.0;
            float _2448 = 0.0;
            float _2449 = 0.0;
            uint _2450 = 0u;
            uint _2459;
            bool _2460;
            for (;;)
            {
                _2459 = texelFetch(g_lightClassification, int((((_2147 << 5u) + (_2133 << 9u)) + (_2450 << 2u)) >> 2u)).x;
                _2460 = _2459 == 0u;
                float frontier_phi_79_pred;
                float frontier_phi_79_pred_1;
                float frontier_phi_79_pred_2;
                float frontier_phi_79_pred_3;
                float frontier_phi_79_pred_4;
                float frontier_phi_79_pred_5;
                if (_2460)
                {
                    frontier_phi_79_pred = _2449;
                    frontier_phi_79_pred_1 = _2448;
                    frontier_phi_79_pred_2 = _2447;
                    frontier_phi_79_pred_3 = _2446;
                    frontier_phi_79_pred_4 = _2445;
                    frontier_phi_79_pred_5 = _2444;
                }
                else
                {
                    float _2640;
                    float _2641;
                    float _2642;
                    float _2643;
                    float _2644;
                    float _2645;
                    uint _2646;
                    _2640 = _2444;
                    _2641 = _2445;
                    _2642 = _2446;
                    _2643 = _2447;
                    _2644 = _2448;
                    _2645 = _2449;
                    _2646 = _2459;
                    float _2541;
                    float _2542;
                    float _2543;
                    float _2544;
                    float _2545;
                    float _2546;
                    for (;;)
                    {
                        uint _2650 = uint(findLSB(_2646)) + (_2450 << 5u);
                        uint _2647 = (_2646 + 4294967295u) & _2646;
                        uint _2652 = _2650 * 48u;
                        vec4 _2666 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2652)).x, texelFetch(g_PointLightRenderingBuffer, int(_2652 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2652 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2652 + 3u)).x));
                        uint _2672 = (_2650 * 48u) + 4u;
                        vec4 _2685 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2672)).x, texelFetch(g_PointLightRenderingBuffer, int(_2672 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2672 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2672 + 3u)).x));
                        uint _2691 = (_2650 * 48u) + 8u;
                        vec3 _2702 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2691)).x, texelFetch(g_PointLightRenderingBuffer, int(_2691 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2691 + 2u)).x));
                        float _2706 = _2666.x - _2107;
                        float _2707 = _2666.y - _2108;
                        float _2708 = _2666.z - _2109;
                        float _2709 = dot(vec3(_2706, _2707, _2708), vec3(_2706, _2707, _2708));
                        float _2712 = inversesqrt(_2709);
                        float _2713 = _2712 * _2706;
                        float _2714 = _2712 * _2707;
                        float _2715 = _2712 * _2708;
                        float _2716 = dot(vec3(_725, _728, _731), vec3(_2713, _2714, _2715));
                        float _2721 = 1.0 - (_2709 * _2666.w);
                        float _3983 = isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0));
                        float _2722 = isnan(1.0) ? _3983 : (isnan(_3983) ? 1.0 : min(_3983, 1.0));
                        float _2723 = sqrt(_2709) * _2685.w;
                        float _2726 = 1.39999997615814208984375 / (_2723 + 1.39999997615814208984375);
                        float _2727 = _2726 * _2726;
                        float _2730 = ((1.0 - _2727) * _2716) + _2727;
                        float _2733 = _2723 * _2723;
                        float _2737 = ((isnan(0.0) ? _2730 : (isnan(_2730) ? 0.0 : max(_2730, 0.0))) * _2722) / ((_2733 * 0.699999988079071044921875) + 1.0);
                        float _2741 = (-0.0) - _2107;
                        float _2742 = (-0.0) - _2108;
                        float _2743 = (-0.0) - _2109;
                        float _2747 = inversesqrt(dot(vec3(_2741, _2742, _2743), vec3(_2741, _2742, _2743)));
                        float _2748 = _2747 * _2741;
                        float _2749 = _2747 * _2742;
                        float _2750 = _2747 * _2743;
                        float _2758 = exp2(log2(1.0 / ((_2733 * 3.5) + 5.0)) * 0.25);
                        float _2759 = 1.0 - _786;
                        float _2766 = sqrt(1.0 - ((1.0 - (_2759 * _2759)) * (1.0 - (_2758 * _2758))));
                        float _2767 = _2766 * _2766;
                        float _2768 = _2767 * _2767;
                        float _2769 = _2748 + _2713;
                        float _2770 = _2749 + _2714;
                        float _2771 = _2750 + _2715;
                        float _2775 = inversesqrt(dot(vec3(_2769, _2770, _2771), vec3(_2769, _2770, _2771)));
                        float _2779 = dot(vec3(_725, _728, _731), vec3(_2748, _2749, _2750));
                        float _3999 = isnan(0.0) ? _2779 : (isnan(_2779) ? 0.0 : max(_2779, 0.0));
                        float _2782 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
                        float _2783 = dot(vec3(_725, _728, _731), vec3(_2775 * _2769, _2775 * _2770, _2775 * _2771));
                        float _4010 = isnan(0.0) ? _2783 : (isnan(_2783) ? 0.0 : max(_2783, 0.0));
                        float _2786 = isnan(1.0) ? _4010 : (isnan(_4010) ? 1.0 : min(_4010, 1.0));
                        float _2790 = ((_2786 * _2786) * (_2768 + (-1.0))) + 1.0;
                        float _2791 = _2726 * _2767;
                        float _2792 = _2791 * _2791;
                        float _2795 = ((1.0 - _2792) * _2716) + _2792;
                        float _4021 = isnan(0.0) ? _2795 : (isnan(_2795) ? 0.0 : max(_2795, 0.0));
                        float _2796 = isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0));
                        float _2797 = 1.0 - _2767;
                        float _2807 = (0.5 / (((_2796 * ((_2782 * _2797) + _2767)) + 9.9999999392252902907785028219223e-09) + (((_2796 * _2797) + _2767) * _2782))) * _2796;
                        float _4032 = isnan(0.0) ? _2807 : (isnan(_2807) ? 0.0 : max(_2807, 0.0));
                        float _2818 = (((_2768 * 3.1415927410125732421875) * (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0)))) / ((_2790 * _2790) * ((_2733 * 2.1991131305694580078125) + 3.141590118408203125))) * _2722;
                        _2544 = (_2737 * _2685.x) + _2643;
                        _2545 = (_2737 * _2685.y) + _2644;
                        _2546 = (_2737 * _2685.z) + _2645;
                        _2541 = (_2818 * _2702.x) + _2640;
                        _2542 = (_2818 * _2702.y) + _2641;
                        _2543 = (_2818 * _2702.z) + _2642;
                        if (_2647 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2640 = _2541;
                            _2641 = _2542;
                            _2642 = _2543;
                            _2643 = _2544;
                            _2644 = _2545;
                            _2645 = _2546;
                            _2646 = _2647;
                        }
                    }
                    frontier_phi_79_pred = _2546;
                    frontier_phi_79_pred_1 = _2545;
                    frontier_phi_79_pred_2 = _2544;
                    frontier_phi_79_pred_3 = _2543;
                    frontier_phi_79_pred_4 = _2542;
                    frontier_phi_79_pred_5 = _2541;
                }
                _2271 = frontier_phi_79_pred;
                _2269 = frontier_phi_79_pred_1;
                _2267 = frontier_phi_79_pred_2;
                _2265 = frontier_phi_79_pred_3;
                _2263 = frontier_phi_79_pred_4;
                _2261 = frontier_phi_79_pred_5;
                uint _2451 = _2450 + 1u;
                if (_2451 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2444 = _2261;
                    _2445 = _2263;
                    _2446 = _2265;
                    _2447 = _2267;
                    _2448 = _2269;
                    _2449 = _2271;
                    _2450 = _2451;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2260 = _2261;
            _2262 = _2263;
            _2264 = _2265;
            _2266 = _2267;
            _2268 = _2269;
            _2270 = _2271;
        }
        uvec4 _2274 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2275 = _2274.z;
        uint _2277 = (_2275 >> 8u) & 15u;
        float _2412;
        float _2414;
        float _2416;
        float _2418;
        float _2420;
        float _2422;
        if (((4294967295u << _2277) & _2153) == 0u)
        {
            _2412 = _2260;
            _2414 = _2262;
            _2416 = _2264;
            _2418 = _2266;
            _2420 = _2268;
            _2422 = _2270;
        }
        else
        {
            float _2437 = inversesqrt(dot(vec3(_2107, _2108, _2109), vec3(_2107, _2108, _2109)));
            float _2438 = _2437 * _2107;
            float _2439 = _2437 * _2108;
            float _2440 = _2437 * _2109;
            float frontier_phi_68_69_ladder;
            float frontier_phi_68_69_ladder_1;
            float frontier_phi_68_69_ladder_2;
            float frontier_phi_68_69_ladder_3;
            float frontier_phi_68_69_ladder_4;
            float frontier_phi_68_69_ladder_5;
            if (_2277 < ((_2275 >> 12u) & 15u))
            {
                float _2413;
                float _2415;
                float _2417;
                float _2419;
                float _2421;
                float _2423;
                float _2623 = _2260;
                float _2624 = _2262;
                float _2625 = _2264;
                float _2626 = _2266;
                float _2627 = _2268;
                float _2628 = _2270;
                uint _2629 = _2277;
                uint _2638;
                bool _2639;
                for (;;)
                {
                    _2638 = texelFetch(g_lightClassification, int((((_2147 << 5u) + (_2133 << 9u)) + (_2629 << 2u)) >> 2u)).x;
                    _2639 = _2638 == 0u;
                    float frontier_phi_93_pred;
                    float frontier_phi_93_pred_1;
                    float frontier_phi_93_pred_2;
                    float frontier_phi_93_pred_3;
                    float frontier_phi_93_pred_4;
                    float frontier_phi_93_pred_5;
                    if (_2639)
                    {
                        frontier_phi_93_pred = _2627;
                        frontier_phi_93_pred_1 = _2626;
                        frontier_phi_93_pred_2 = _2625;
                        frontier_phi_93_pred_3 = _2624;
                        frontier_phi_93_pred_4 = _2623;
                        frontier_phi_93_pred_5 = _2628;
                    }
                    else
                    {
                        float _2853;
                        float _2854;
                        float _2855;
                        float _2856;
                        float _2857;
                        float _2858;
                        float _3146;
                        float _3147;
                        float _3148;
                        float _3149;
                        float _3150;
                        float _3151;
                        float _2866 = _2623;
                        float _2867 = _2624;
                        float _2868 = _2625;
                        float _2869 = _2626;
                        float _2870 = _2627;
                        float _2871 = _2628;
                        uint _2872 = _2638;
                        uint _2873;
                        vec4 _2898;
                        float _2899;
                        vec4 _2914;
                        vec3 _2926;
                        vec4 _2941;
                        vec4 _2956;
                        float _3002;
                        bool _3003;
                        for (;;)
                        {
                            uint _2883 = ((_2629 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2872));
                            _2873 = (_2872 + 4294967295u) & _2872;
                            uint _2885 = _2883 * 40u;
                            _2898 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2885)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2885 + 3u)).x));
                            _2899 = _2898.w;
                            uint _2901 = (_2883 * 40u) + 4u;
                            _2914 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2901)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2901 + 3u)).x));
                            uint _2916 = (_2883 * 40u) + 8u;
                            _2926 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2916)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 2u)).x));
                            uint _2928 = (_2883 * 40u) + 16u;
                            _2941 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2928)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 3u)).x));
                            uint _2943 = (_2883 * 40u) + 20u;
                            _2956 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2943)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2943 + 3u)).x));
                            uint _2958 = (_2883 * 40u) + 24u;
                            vec4 _2971 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2958)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2958 + 3u)).x));
                            uint _2977 = (_2883 * 40u) + 28u;
                            vec4 _2990 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2977)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2977 + 3u)).x));
                            _3002 = fma(_2109, _2990.z, fma(_2108, _2990.y, _2990.x * _2107)) + _2990.w;
                            _3003 = !((fma(_2109, _2971.z, fma(_2108, _2971.y, _2971.x * _2107)) + _2971.w) <= 0.0);
                            float frontier_phi_99_pred;
                            float frontier_phi_99_pred_1;
                            float frontier_phi_99_pred_2;
                            float frontier_phi_99_pred_3;
                            float frontier_phi_99_pred_4;
                            float frontier_phi_99_pred_5;
                            if (_3003)
                            {
                                float _3030 = _2898.x - _2107;
                                float _3031 = _2898.y - _2108;
                                float _3032 = _2898.z - _2109;
                                float _3033 = dot(vec3(_3030, _3031, _3032), vec3(_3030, _3031, _3032));
                                float _3036 = inversesqrt(_3033);
                                float _3037 = _3036 * _3030;
                                float _3038 = _3036 * _3031;
                                float _3039 = _3036 * _3032;
                                float _3043 = 1.0 - (_3033 / (_2899 * _2899));
                                float _4043 = isnan(0.0) ? _3043 : (isnan(_3043) ? 0.0 : max(_3043, 0.0));
                                float _3044 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
                                float _3048 = sqrt(_3033) * _2914.w;
                                float _3050 = 1.39999997615814208984375 / (_3048 + 1.39999997615814208984375);
                                float _3051 = _3050 * _3050;
                                float _3054 = ((1.0 - _3051) * dot(vec3(_3037, _3038, _3039), vec3(_725, _728, _731))) + _3051;
                                float _3057 = _3048 * _3048;
                                float _3061 = (fma(_2109, _2941.z, fma(_2108, _2941.y, _2941.x * _2107)) + _2941.w) / _3002;
                                float _3062 = (fma(_2109, _2956.z, fma(_2108, _2956.y, _2956.x * _2107)) + _2956.w) / _3002;
                                float _3066 = 1.0 - dot(vec2(_3061, _3062), vec2(_3061, _3062));
                                float _4059 = isnan(0.0) ? _3066 : (isnan(_3066) ? 0.0 : max(_3066, 0.0));
                                float _3067 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
                                float _3068 = _3067 * (((isnan(0.0) ? _3054 : (isnan(_3054) ? 0.0 : max(_3054, 0.0))) * _3044) / ((_3057 * 0.699999988079071044921875) + 1.0));
                                float _3080 = exp2(log2(1.0 / ((_3057 * 3.5) + 5.0)) * 0.25);
                                float _3081 = 1.0 - _786;
                                float _3088 = sqrt(1.0 - ((1.0 - (_3081 * _3081)) * (1.0 - (_3080 * _3080))));
                                float _3089 = _3088 * _3088;
                                float _3090 = _3089 * _3089;
                                float _3091 = _3037 - _2438;
                                float _3092 = _3038 - _2439;
                                float _3093 = _3039 - _2440;
                                float _3097 = inversesqrt(dot(vec3(_3091, _3092, _3093), vec3(_3091, _3092, _3093)));
                                float _3101 = dot(vec3(_725, _728, _731), vec3((-0.0) - _2438, (-0.0) - _2439, (-0.0) - _2440));
                                float _4070 = isnan(0.0) ? _3101 : (isnan(_3101) ? 0.0 : max(_3101, 0.0));
                                float _3104 = isnan(1.0) ? _4070 : (isnan(_4070) ? 1.0 : min(_4070, 1.0));
                                float _3105 = dot(vec3(_725, _728, _731), vec3(_3097 * _3091, _3097 * _3092, _3097 * _3093));
                                float _4081 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0));
                                float _3108 = isnan(1.0) ? _4081 : (isnan(_4081) ? 1.0 : min(_4081, 1.0));
                                float _3112 = ((_3108 * _3108) * (_3090 + (-1.0))) + 1.0;
                                float _3113 = _3050 * _3089;
                                float _3114 = _3113 * _3113;
                                float _3120 = ((1.0 - _3114) * dot(vec3(_725, _728, _731), vec3(_3037, _3038, _3039))) + _3114;
                                float _4092 = isnan(0.0) ? _3120 : (isnan(_3120) ? 0.0 : max(_3120, 0.0));
                                float _3121 = isnan(1.0) ? _4092 : (isnan(_4092) ? 1.0 : min(_4092, 1.0));
                                float _3122 = 1.0 - _3089;
                                float _3132 = (0.5 / (((_3121 * ((_3104 * _3122) + _3089)) + 9.9999999392252902907785028219223e-09) + (((_3121 * _3122) + _3089) * _3104))) * _3121;
                                float _4103 = isnan(0.0) ? _3132 : (isnan(_3132) ? 0.0 : max(_3132, 0.0));
                                float _3142 = (_3067 * _3044) * (((_3090 * 3.1415927410125732421875) * (isnan(1.0) ? _4103 : (isnan(_4103) ? 1.0 : min(_4103, 1.0)))) / ((_3112 * _3112) * ((_3057 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_99_pred = _3068 * _2914.z;
                                frontier_phi_99_pred_1 = _3068 * _2914.y;
                                frontier_phi_99_pred_2 = _3068 * _2914.x;
                                frontier_phi_99_pred_3 = _3142 * _2926.z;
                                frontier_phi_99_pred_4 = _3142 * _2926.y;
                                frontier_phi_99_pred_5 = _3142 * _2926.x;
                            }
                            else
                            {
                                frontier_phi_99_pred = 0.0;
                                frontier_phi_99_pred_1 = 0.0;
                                frontier_phi_99_pred_2 = 0.0;
                                frontier_phi_99_pred_3 = 0.0;
                                frontier_phi_99_pred_4 = 0.0;
                                frontier_phi_99_pred_5 = 0.0;
                            }
                            _3151 = frontier_phi_99_pred;
                            _3150 = frontier_phi_99_pred_1;
                            _3149 = frontier_phi_99_pred_2;
                            _3148 = frontier_phi_99_pred_3;
                            _3147 = frontier_phi_99_pred_4;
                            _3146 = frontier_phi_99_pred_5;
                            _2856 = _3149 + _2869;
                            _2857 = _3150 + _2870;
                            _2858 = _3151 + _2871;
                            _2853 = _3146 + _2866;
                            _2854 = _3147 + _2867;
                            _2855 = _3148 + _2868;
                            if (_2873 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2866 = _2853;
                                _2867 = _2854;
                                _2868 = _2855;
                                _2869 = _2856;
                                _2870 = _2857;
                                _2871 = _2858;
                                _2872 = _2873;
                                continue;
                            }
                        }
                        frontier_phi_93_pred = _2857;
                        frontier_phi_93_pred_1 = _2856;
                        frontier_phi_93_pred_2 = _2855;
                        frontier_phi_93_pred_3 = _2854;
                        frontier_phi_93_pred_4 = _2853;
                        frontier_phi_93_pred_5 = _2858;
                    }
                    _2421 = frontier_phi_93_pred;
                    _2419 = frontier_phi_93_pred_1;
                    _2417 = frontier_phi_93_pred_2;
                    _2415 = frontier_phi_93_pred_3;
                    _2413 = frontier_phi_93_pred_4;
                    _2423 = frontier_phi_93_pred_5;
                    uint _2630 = _2629 + 1u;
                    if (_2630 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2623 = _2413;
                        _2624 = _2415;
                        _2625 = _2417;
                        _2626 = _2419;
                        _2627 = _2421;
                        _2628 = _2423;
                        _2629 = _2630;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_68_69_ladder = _2423;
                frontier_phi_68_69_ladder_1 = _2421;
                frontier_phi_68_69_ladder_2 = _2419;
                frontier_phi_68_69_ladder_3 = _2417;
                frontier_phi_68_69_ladder_4 = _2413;
                frontier_phi_68_69_ladder_5 = _2415;
            }
            else
            {
                frontier_phi_68_69_ladder = _2270;
                frontier_phi_68_69_ladder_1 = _2268;
                frontier_phi_68_69_ladder_2 = _2266;
                frontier_phi_68_69_ladder_3 = _2264;
                frontier_phi_68_69_ladder_4 = _2260;
                frontier_phi_68_69_ladder_5 = _2262;
            }
            _2412 = frontier_phi_68_69_ladder_4;
            _2414 = frontier_phi_68_69_ladder_5;
            _2416 = frontier_phi_68_69_ladder_3;
            _2418 = frontier_phi_68_69_ladder_2;
            _2420 = frontier_phi_68_69_ladder_1;
            _2422 = frontier_phi_68_69_ladder;
        }
        float _2427 = isnan(1.0) ? _770 : (isnan(_770) ? 1.0 : min(_770, 1.0));
        _2166 = (_2427 * _2418) + _1896;
        _2168 = (_2427 * _2420) + _1897;
        _2170 = (_2427 * _2422) + _1898;
        _2172 = ((_2412 * 0.039999999105930328369140625) * _2427) + _2049;
        _2174 = ((_2414 * 0.039999999105930328369140625) * _2427) + _2050;
        _2176 = ((_2416 * 0.039999999105930328369140625) * _2427) + _2051;
    }
    else
    {
        _2166 = _1896;
        _2168 = _1897;
        _2170 = _1898;
        _2172 = _2049;
        _2174 = _2050;
        _2176 = _2051;
    }
    uint _2182 = _746 + uint(cbMatDynParam._m0[0u].w);
    float _4119 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _4130 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _4141 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _2207 = (((isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0))) * (_2166 + ((isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0))) * _770))) + ((_2172 + ((isnan(0.0) ? _1819 : (isnan(_1819) ? 0.0 : max(_1819, 0.0))) * _1607)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2182].x * ((((((cbMtdParam._m0[10u].x * _287) * _551.x) - _480) * _287) * _604) + _480));
    float _2209 = ((cbInstanceData._m0[_2182].y * ((((((cbMtdParam._m0[10u].y * _287) * _551.y) - _481) * _287) * _604) + _481)) + ((_2174 + ((isnan(0.0) ? _1822 : (isnan(_1822) ? 0.0 : max(_1822, 0.0))) * _1607)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4130 : (isnan(_4130) ? 1.0 : min(_4130, 1.0))) * (_2168 + ((isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0))) * _770)));
    float _2211 = ((cbInstanceData._m0[_2182].z * ((((((cbMtdParam._m0[10u].z * _287) * _551.z) - _482) * _287) * _604) + _482)) + ((_2176 + ((isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0))) * _1607)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4141 : (isnan(_4141) ? 1.0 : min(_4141, 1.0))) * (_2170 + ((isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0))) * _770)));
    float _2212 = isnan(0.0) ? _2207 : (isnan(_2207) ? 0.0 : max(_2207, 0.0));
    float _2213 = isnan(0.0) ? _2209 : (isnan(_2209) ? 0.0 : max(_2209, 0.0));
    float _2214 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    uint _2215 = _744 + 6u;
    float _2223 = _705 / cbSceneParam._m0[86u].x;
    float _2224 = _706 / cbSceneParam._m0[86u].y;
    vec4 _2238 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2223, _2224, (log2((isnan(cbSceneParam._m0[77u].w) ? _679 : (isnan(_679) ? cbSceneParam._m0[77u].w : min(_679, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2240 = _2238.x;
    float _2241 = _2238.y;
    float _2242 = _2238.z;
    float _2243 = _2238.w;
    float _2323;
    float _2325;
    float _2327;
    float _2329;
    if (_679 > cbSceneParam._m0[78u].w)
    {
        float _2285 = isnan(_679) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _679 : min(cbSceneParam._m0[80u].w, _679));
        float _2286 = _2285 / _679;
        float _2297 = _2286 * _269;
        float _2298 = _270 * _2286;
        float _2299 = (-0.0) - _2298;
        float _2300 = _2286 * _271;
        float _2302 = (cbSceneParam._m0[77u].w * _2299) / _2285;
        float _2303 = _2302 + cbSceneParam._m0[79u].w;
        float _2304 = cbSceneParam._m0[79u].w - _2298;
        float _2310 = sqrt(((_2297 * _2297) + (_2298 * _2298)) + (_2300 * _2300));
        float _2313 = (1.0 - (cbSceneParam._m0[77u].w / _2285)) * _2310;
        float _2319 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2321 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2554;
        if (abs((_2299 - _2302) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2554 = ((((_2303 > 0.0) ? exp2(_2319 * _2303) : (2.0 - exp2(_2321 * _2303))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2313;
        }
        else
        {
            float _2473 = 1.0 / cbSceneParam._m0[80u].x;
            float _2474 = isnan(_2304) ? _2303 : (isnan(_2303) ? _2304 : max(_2303, _2304));
            float _2475 = isnan(_2304) ? _2303 : (isnan(_2303) ? _2304 : min(_2303, _2304));
            float _2484 = isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : min(_2474, 0.0));
            float _2485 = isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : min(_2475, 0.0));
            _2554 = ((abs(_2310 / _2299) * cbSceneParam._m0[80u].y) * ((((_2484 - _2485) * 2.0) - ((exp2(_2319 * (isnan(0.0) ? _2474 : (isnan(_2474) ? 0.0 : max(_2474, 0.0)))) - exp2(_2319 * (isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0))))) * _2473)) - ((exp2(_2321 * _2484) - exp2(_2321 * _2485)) * _2473))) + (_2313 * cbSceneParam._m0[80u].z);
        }
        vec4 _2556 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2223, _2224, 1.0), 0.0);
        float _2565 = exp2((_2554 * (-1.44269502162933349609375)) * (1.0 - _2556.w));
        float _2566 = log2(_2565);
        float _2582 = log2(_2243);
        _2323 = (exp2(_2582 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2566 * cbSceneParam._m0[78u].x)) * _2556.x) / cbSceneParam._m0[78u].x)) + _2240;
        _2325 = (exp2(_2582 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2566 * cbSceneParam._m0[78u].y)) * _2556.y) / cbSceneParam._m0[78u].y)) + _2241;
        _2327 = (exp2(_2582 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2566 * cbSceneParam._m0[78u].z)) * _2556.z) / cbSceneParam._m0[78u].z)) + _2242;
        _2329 = _2565 * _2243;
    }
    else
    {
        _2323 = _2240;
        _2325 = _2241;
        _2327 = _2242;
        _2329 = _2243;
    }
    bool _2592;
    vec4 _2339;
    vec4 _2361;
    float _2363;
    float _2367;
    float _2368;
    float _2369;
    float _2370;
    bool _2380;
    for (;;)
    {
        _2339 = cbMatDynParam._m0[0u];
        float _2341 = roundEven(_2339.y);
        bool _2342 = _2341 == 3.0;
        float _2343 = log2(_2329);
        float _2350 = exp2(_2343 * cbSceneParam._m0[78u].x) * _2212;
        float _2351 = exp2(_2343 * cbSceneParam._m0[78u].y) * _2213;
        float _2352 = exp2(_2343 * cbSceneParam._m0[78u].z) * _2214;
        float _2359 = _693 + (-0.5);
        _2361 = cbMtdParam._m0[1u];
        _2363 = _2361.y * _2359;
        float _2366 = (_2341 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2367 = _2366 * (_2342 ? _2350 : (_2350 + (cbSceneParam._m0[72u].w * _2323)));
        _2368 = _2366 * (_2342 ? _2351 : (_2351 + (cbSceneParam._m0[72u].w * _2325)));
        _2369 = _2366 * (_2342 ? _2352 : (_2352 + (cbSceneParam._m0[72u].w * _2327)));
        _2370 = _2359 * 0.999000012874603271484375;
        _2380 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2380)
        {
            if ((cbInstanceData._m0[_744 + 7u].x + _2370) < 0.5)
            {
                _2592 = true;
                break;
            }
        }
        uint _2508 = _746 + uint(_2339.w);
        if ((cbInstanceData._m0[_2508].w < 1.0) && ((cbInstanceData._m0[_2508].w + _2370) < 0.5))
        {
            _2592 = true;
            break;
        }
        if ((_2363 + 1.0) < _2361.x)
        {
            _2592 = true;
            break;
        }
        _2592 = false;
        break;
    }
    float _2823;
    if (_2592)
    {
        discard_state = true;
        _2823 = 0.0;
    }
    else
    {
        _2823 = cbInstanceData._m0[_2215].w;
    }
    SV_Target.x = _2367;
    SV_Target.y = _2368;
    SV_Target.z = _2369;
    SV_Target.w = _2823;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2215].w;
    discard_exit();
}


