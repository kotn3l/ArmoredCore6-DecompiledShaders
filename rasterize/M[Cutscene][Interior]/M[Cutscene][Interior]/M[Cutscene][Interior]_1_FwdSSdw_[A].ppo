#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _666;
uint _1866;
uint _1867;
uint _1868;
uint _2111;
uint _2112;
uint _2113;
float _2336;
float _2337;
float _2338;
float _2339;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _200 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _248 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _258 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _248);
    float _259 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _248);
    float _260 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _248);
    vec4 _279 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _314 = cbMtdParam._m0[24u].x + _258;
    float _315 = cbMtdParam._m0[24u].y + _259;
    float _316 = cbMtdParam._m0[24u].z + _260;
    float _333 = (-0.0) - dot(vec3(_314, _315, _316), vec3(_189 * _182, _189 * _183, _189 * _184));
    float _334 = (-0.0) - dot(vec3(_314, _315, _316), vec3(_200 * TANGENT.x, _200 * TANGENT.y, _200 * TANGENT.z));
    float _335 = (-0.0) - dot(vec3(_314, _315, _316), vec3((-0.0) - (NORMAL.x * _196), (-0.0) - (NORMAL.y * _196), (-0.0) - (NORMAL.z * _196)));
    float _339 = inversesqrt(dot(vec3(_333, _334, _335), vec3(_333, _334, _335)));
    float _342 = _339 * _335;
    float _345 = ((_339 * _333) + (((_279.x * 2.0) + (-1.0)) * cbMtdParam._m0[22u].x)) * cbMtdParam._m0[20u].w;
    float _346 = ((_339 * _334) + (((_279.y * 2.0) + (-1.0)) * cbMtdParam._m0[22u].y)) * cbMtdParam._m0[20u].z;
    float _347 = fract(TEXCOORD.x);
    float _348 = fract(TEXCOORD.y);
    float _354;
    if (_345 > 0.0)
    {
        _354 = (1.0 - _347) / _345;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_345 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _347) / _345;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _354 = frontier_phi_3_2_ladder;
    }
    float _362;
    if (_346 > 0.0)
    {
        _362 = (1.0 - _348) / _346;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_346 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _348) / _346;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _362 = frontier_phi_7_6_ladder;
    }
    float _366 = (_342 > 0.0) ? (cbMtdParam._m0[16u].x / _342) : 5000.0;
    float _367 = isnan(_362) ? _354 : (isnan(_354) ? _362 : min(_354, _362));
    float _368 = isnan(_366) ? _367 : (isnan(_367) ? _366 : min(_367, _366));
    float _372 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _379 = ((_368 * _342) + _372) / _372;
    vec4 _404 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * ((((((_347 + (-0.5)) + (_368 * _345)) / _379) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * ((((((_348 + (-0.5)) + (_368 * _346)) / _379) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    float _432 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _436 = inversesqrt(dot(vec3(_258, _259, _260), vec3(_258, _259, _260)));
    float _437 = _258 * _436;
    float _438 = _259 * _436;
    float _439 = _260 * _436;
    vec4 _444 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _446 = _444.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _515 = sqrt(((_258 * _258) + (_259 * _259)) + (_260 * _260));
        float _521 = (cbMatDynParam._m0[5u].x * _515) + cbMatDynParam._m0[5u].y;
        float _2358 = isnan(0.0) ? _521 : (isnan(_521) ? 0.0 : max(_521, 0.0));
        float _522 = isnan(1.0) ? _2358 : (isnan(_2358) ? 1.0 : min(_2358, 1.0));
        float _526 = (cbMatDynParam._m0[5u].z * _515) + cbMatDynParam._m0[5u].w;
        float _2369 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2369 : (isnan(_2369) ? 1.0 : min(_2369, 1.0))) - _522)) + _522) < ((_446 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _458 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _459 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _468 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_458 * cbSceneParam._m0[86u].x, _459 * cbSceneParam._m0[86u].y));
    float _471 = _468.x * TEXCOORD_4.z;
    float _472 = (-0.0) - _437;
    float _473 = (-0.0) - _438;
    float _474 = (-0.0) - _439;
    float _496 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _500 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _504 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _665;
    float _667;
    float _668;
    float _669;
    float _670;
    float _671;
    float _672;
    float _673;
    float _674;
    float _675;
    float _676;
    float _677;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _588 = (cbModelParam._m0[37u].x * ((((fma(_504, cbModelParam._m0[26u].z, fma(_500, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _496)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _590 = (cbModelParam._m0[37u].y * ((((fma(_504, cbModelParam._m0[27u].z, fma(_500, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _496)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _591 = (((((fma(_504, cbModelParam._m0[28u].z, fma(_500, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _496)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _594 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_588, _590, _591), 0.0);
        vec4 _601 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_588, _590, _591), 0.0);
        vec4 _608 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_588, _590, _591), 0.0);
        vec4 _615 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_588, _590, _591), 0.0);
        float _628 = exp2((_594.w + (-0.5)) * 20.0) * 2.0;
        float _638 = exp2((_601.w + (-0.5)) * 20.0) * 2.0;
        float _648 = exp2((_608.w + (-0.5)) * 20.0) * 2.0;
        float _658 = exp2((_615.w + (-0.5)) * 20.0) * 2.0;
        float _659 = _658 * (_615.x + (-0.5));
        float _660 = _658 * (_615.y + (-0.5));
        float _661 = _658 * (_615.z + (-0.5));
        _665 = _628 * (_594.z + (-0.5));
        _667 = _628 * (_594.y + (-0.5));
        _668 = _628 * (_594.x + (-0.5));
        _669 = _638 * (_601.z + (-0.5));
        _670 = _638 * (_601.y + (-0.5));
        _671 = _638 * (_601.x + (-0.5));
        _672 = _648 * (_608.z + (-0.5));
        _673 = _648 * (_608.y + (-0.5));
        _674 = _648 * (_608.x + (-0.5));
        _675 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
        _676 = isnan(0.0) ? _660 : (isnan(_660) ? 0.0 : max(_660, 0.0));
        _677 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    }
    else
    {
        _665 = _666;
        _667 = _666;
        _668 = _666;
        _669 = _666;
        _670 = _666;
        _671 = _666;
        _672 = _666;
        _673 = _666;
        _674 = _666;
        _675 = _666;
        _676 = _666;
        _677 = _666;
    }
    float _808;
    float _809;
    float _810;
    float _811;
    float _812;
    float _813;
    float _814;
    float _815;
    float _816;
    float _817;
    float _818;
    float _819;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _734 = (cbModelParam._m0[38u].x * ((((fma(_504, cbModelParam._m0[30u].z, fma(_500, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _496)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _735 = (cbModelParam._m0[38u].y * ((((fma(_504, cbModelParam._m0[31u].z, fma(_500, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _496)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _736 = (((((fma(_504, cbModelParam._m0[32u].z, fma(_500, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _496)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _738 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_734, _735, _736), 0.0);
        vec4 _745 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_734, _735, _736), 0.0);
        vec4 _752 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_734, _735, _736), 0.0);
        vec4 _759 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_734, _735, _736), 0.0);
        float _771 = exp2((_738.w + (-0.5)) * 20.0) * 2.0;
        float _781 = exp2((_745.w + (-0.5)) * 20.0) * 2.0;
        float _791 = exp2((_752.w + (-0.5)) * 20.0) * 2.0;
        float _801 = exp2((_759.w + (-0.5)) * 20.0) * 2.0;
        float _802 = _801 * (_759.x + (-0.5));
        float _803 = _801 * (_759.y + (-0.5));
        float _804 = _801 * (_759.z + (-0.5));
        _808 = _771 * (_738.z + (-0.5));
        _809 = _771 * (_738.y + (-0.5));
        _810 = _771 * (_738.x + (-0.5));
        _811 = _781 * (_745.z + (-0.5));
        _812 = _781 * (_745.y + (-0.5));
        _813 = _781 * (_745.x + (-0.5));
        _814 = _791 * (_752.z + (-0.5));
        _815 = _791 * (_752.y + (-0.5));
        _816 = _791 * (_752.x + (-0.5));
        _817 = isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0));
        _818 = isnan(0.0) ? _803 : (isnan(_803) ? 0.0 : max(_803, 0.0));
        _819 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
    }
    else
    {
        _808 = _666;
        _809 = _666;
        _810 = _666;
        _811 = _666;
        _812 = _666;
        _813 = _666;
        _814 = _666;
        _815 = _666;
        _816 = _666;
        _817 = _666;
        _818 = _666;
        _819 = _666;
    }
    float _834 = _437 * (-0.5);
    float _835 = _438 * (-0.5);
    float _836 = _439 * (-0.5);
    float _837 = dot(vec4(_834, _835, _836, 1.0), vec4(_810, _813, _816, _819));
    float _840 = dot(vec4(_834, _835, _836, 1.0), vec4(_809, _812, _815, _818));
    float _843 = dot(vec4(_834, _835, _836, 1.0), vec4(_808, _811, _814, _817));
    float _878;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _850 = dot(vec4(_834, _835, _836, 1.0), vec4(_665, _669, _672, _675));
        float _854 = dot(vec4(_834, _835, _836, 1.0), vec4(_667, _670, _673, _676));
        float _858 = dot(vec4(_834, _835, _836, 1.0), vec4(_668, _671, _674, _677));
        float _865 = dot(vec4(cbModelParam._m0[39u]), vec4(_834, _835, _836, 1.0));
        _878 = dot(vec3(isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0)), isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0)), isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_865) ? 0.0 : (isnan(0.0) ? _865 : max(0.0, _865))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _878 = 1.0;
    }
    float _889;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _880 = dot(vec4(cbModelParam._m0[40u]), vec4(_834, _835, _836, 1.0));
        _889 = dot(vec3(isnan(0.0) ? _837 : (isnan(_837) ? 0.0 : max(_837, 0.0)), isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0)), isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_880) ? 0.0 : (isnan(0.0) ? _880 : max(0.0, _880))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _889 = 1.0;
    }
    float _893 = (_889 * cbModelParam._m0[1u].x) + (_878 * (1.0 - cbModelParam._m0[1u].x));
    float _899 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _983;
    float _985;
    float _987;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _950 = fma(_504, cbModelParam._m0[13u].z, fma(_500, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _496)) + cbModelParam._m0[13u].w;
        float _954 = fma(_504, cbModelParam._m0[14u].z, fma(_500, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _496)) + cbModelParam._m0[14u].w;
        float _958 = fma(_504, cbModelParam._m0[15u].z, fma(_500, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _496)) + cbModelParam._m0[15u].w;
        float _961 = fma(_474, cbModelParam._m0[13u].z, fma(_473, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _472));
        float _964 = fma(_474, cbModelParam._m0[14u].z, fma(_473, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _472));
        float _967 = fma(_474, cbModelParam._m0[15u].z, fma(_473, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _472));
        float _993;
        if (_961 > 0.0)
        {
            _993 = abs((1.0 - _950) / _961);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_961 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_950 + 1.0) / _961);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _993 = frontier_phi_25_23_ladder;
        }
        float _1293;
        if (_964 > 0.0)
        {
            _1293 = abs((1.0 - _954) / _964);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_964 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_954 + 1.0) / _964);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1293 = frontier_phi_34_30_ladder;
        }
        float _1598;
        if (_967 > 0.0)
        {
            _1598 = abs((1.0 - _958) / _967);
        }
        else
        {
            float frontier_phi_48_41_ladder;
            if (_967 < 0.0)
            {
                frontier_phi_48_41_ladder = abs((_958 + 1.0) / _967);
            }
            else
            {
                frontier_phi_48_41_ladder = 5000.0;
            }
            _1598 = frontier_phi_48_41_ladder;
        }
        float _1600 = isnan(_1293) ? _993 : (isnan(_993) ? _1293 : min(_993, _1293));
        float _1601 = isnan(_1598) ? _1600 : (isnan(_1600) ? _1598 : min(_1600, _1598));
        float _1605 = (_1601 * _961) + _950;
        float _1606 = (_1601 * _964) + _954;
        float _1607 = (_1601 * _967) + _958;
        float _1608 = _1601 * 9.9999997473787516355514526367188e-05;
        float _1609 = (-1.0) - _1608;
        float _1611 = _1608 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_1607 > _1611) || ((_1607 < _1609) || ((_1606 > _1611) || ((_1606 < _1609) || ((_1605 < _1609) || (_1605 > _1611))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1734 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1607, cbModelParam._m0[9u].z, fma(_1606, cbModelParam._m0[9u].y, _1605 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1607, cbModelParam._m0[10u].z, fma(_1606, cbModelParam._m0[10u].y, _1605 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1607, cbModelParam._m0[11u].z, fma(_1606, cbModelParam._m0[11u].y, _1605 * cbModelParam._m0[11u].x))), _899);
            frontier_phi_24_48_ladder = _1734.z * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_1 = _1734.y * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_2 = _1734.x * cbModelParam._m0[1u].y;
        }
        _983 = frontier_phi_24_48_ladder_2;
        _985 = frontier_phi_24_48_ladder_1;
        _987 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _971 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_472, _473, _474), _899);
        _983 = _971.x * cbModelParam._m0[1u].y;
        _985 = _971.y * cbModelParam._m0[1u].y;
        _987 = _971.z * cbModelParam._m0[1u].y;
    }
    float _990 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1080;
    float _1082;
    float _1084;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1044 = fma(_504, cbModelParam._m0[21u].z, fma(_500, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _496)) + cbModelParam._m0[21u].w;
        float _1048 = fma(_504, cbModelParam._m0[22u].z, fma(_500, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _496)) + cbModelParam._m0[22u].w;
        float _1052 = fma(_504, cbModelParam._m0[23u].z, fma(_500, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _496)) + cbModelParam._m0[23u].w;
        float _1055 = fma(_474, cbModelParam._m0[21u].z, fma(_473, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _472));
        float _1058 = fma(_474, cbModelParam._m0[22u].z, fma(_473, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _472));
        float _1061 = fma(_474, cbModelParam._m0[23u].z, fma(_473, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _472));
        float _1298;
        if (_1055 > 0.0)
        {
            _1298 = abs((1.0 - _1044) / _1055);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1055 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1044 + 1.0) / _1055);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1298 = frontier_phi_36_32_ladder;
        }
        float _1624;
        if (_1058 > 0.0)
        {
            _1624 = abs((1.0 - _1048) / _1058);
        }
        else
        {
            float frontier_phi_50_43_ladder;
            if (_1058 < 0.0)
            {
                frontier_phi_50_43_ladder = abs((_1048 + 1.0) / _1058);
            }
            else
            {
                frontier_phi_50_43_ladder = 5000.0;
            }
            _1624 = frontier_phi_50_43_ladder;
        }
        float _1796;
        if (_1061 > 0.0)
        {
            _1796 = abs((1.0 - _1052) / _1061);
        }
        else
        {
            float frontier_phi_68_61_ladder;
            if (_1061 < 0.0)
            {
                frontier_phi_68_61_ladder = abs((_1052 + 1.0) / _1061);
            }
            else
            {
                frontier_phi_68_61_ladder = 5000.0;
            }
            _1796 = frontier_phi_68_61_ladder;
        }
        float _1798 = isnan(_1624) ? _1298 : (isnan(_1298) ? _1624 : min(_1298, _1624));
        float _1799 = isnan(_1796) ? _1798 : (isnan(_1798) ? _1796 : min(_1798, _1796));
        float _1803 = (_1799 * _1055) + _1044;
        float _1804 = (_1799 * _1058) + _1048;
        float _1805 = (_1799 * _1061) + _1052;
        float _1806 = _1799 * 9.9999997473787516355514526367188e-05;
        float _1807 = (-1.0) - _1806;
        float _1809 = _1806 + 1.0;
        float frontier_phi_33_68_ladder;
        float frontier_phi_33_68_ladder_1;
        float frontier_phi_33_68_ladder_2;
        if ((_1805 > _1809) || ((_1805 < _1807) || ((_1804 > _1809) || ((_1804 < _1807) || ((_1803 < _1807) || (_1803 > _1809))))))
        {
            frontier_phi_33_68_ladder = 0.0;
            frontier_phi_33_68_ladder_1 = 0.0;
            frontier_phi_33_68_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1974 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1805, cbModelParam._m0[17u].z, fma(_1804, cbModelParam._m0[17u].y, _1803 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1805, cbModelParam._m0[18u].z, fma(_1804, cbModelParam._m0[18u].y, _1803 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1805, cbModelParam._m0[19u].z, fma(_1804, cbModelParam._m0[19u].y, _1803 * cbModelParam._m0[19u].x))), _990);
            frontier_phi_33_68_ladder = _1974.z * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_1 = _1974.y * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_2 = _1974.x * cbModelParam._m0[1u].z;
        }
        _1080 = frontier_phi_33_68_ladder_2;
        _1082 = frontier_phi_33_68_ladder_1;
        _1084 = frontier_phi_33_68_ladder;
    }
    else
    {
        vec4 _1064 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_472, _473, _474), _990);
        _1080 = _1064.x * cbModelParam._m0[1u].z;
        _1082 = _1064.y * cbModelParam._m0[1u].z;
        _1084 = _1064.z * cbModelParam._m0[1u].z;
    }
    float _1096 = _471 * 0.01200000010430812835693359375;
    float _1098 = _1096 * ((cbModelParam._m0[1u].w * (_1080 - _983)) + _983);
    float _1099 = _1096 * ((cbModelParam._m0[1u].w * (_1082 - _985)) + _985);
    float _1100 = _1096 * ((cbModelParam._m0[1u].w * (_1084 - _987)) + _987);
    float _1121 = fma(_1100, cbSceneParam._m0[89u].z, fma(_1099, cbSceneParam._m0[89u].y, _1098 * cbSceneParam._m0[89u].x));
    float _1124 = fma(_1100, cbSceneParam._m0[90u].z, fma(_1099, cbSceneParam._m0[90u].y, _1098 * cbSceneParam._m0[90u].x));
    float _1127 = fma(_1100, cbSceneParam._m0[91u].z, fma(_1099, cbSceneParam._m0[91u].y, _1098 * cbSceneParam._m0[91u].x));
    vec4 _1135 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_458, _459));
    float _1137 = _1135.w;
    uint _1153 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1157 = floatBitsToUint(cbInstanceData._m0[_1153 + 5u]);
    uint _1159 = _1157.x * 14u;
    uint _1160 = _1159 + 13u;
    float _1165 = _471 + (-1.0);
    float _1168 = (cbLight._m0[_1160].x * _1165) + 1.0;
    float _1169 = (cbLight._m0[_1160].y * _1165) + 1.0;
    uint _1170 = _1159 + 8u;
    float _1181 = cbLight._m0[_1159].x + _437;
    float _1182 = cbLight._m0[_1159].y + _438;
    float _1183 = cbLight._m0[_1159].z + _439;
    float _1187 = inversesqrt(dot(vec3(_1181, _1182, _1183), vec3(_1181, _1182, _1183)));
    float _1191 = dot(vec3(0.0), vec3(cbLight._m0[_1159].xyz));
    float _2495 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
    float _1194 = isnan(1.0) ? _2495 : (isnan(_2495) ? 1.0 : min(_2495, 1.0));
    float _1195 = dot(vec3(0.0), vec3(_437, _438, _439));
    float _2506 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
    float _1198 = isnan(1.0) ? _2506 : (isnan(_2506) ? 1.0 : min(_2506, 1.0));
    float _1199 = dot(vec3(cbLight._m0[_1159].xyz), vec3(_1181 * _1187, _1182 * _1187, _1183 * _1187));
    float _2517 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
    float _1210 = (exp2(log2(1.0 - (isnan(1.0) ? _2517 : (isnan(_2517) ? 1.0 : min(_2517, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1216 = (0.5 / ((_1194 + 9.9999999392252902907785028219223e-09) + _1198)) * _1194;
    float _2528 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
    float _1218 = (isnan(1.0) ? _2528 : (isnan(_2528) ? 1.0 : min(_2528, 1.0))) * 0.31831014156341552734375;
    float _1220 = isnan(1.0) ? _1168 : (isnan(_1168) ? 1.0 : min(_1168, 1.0));
    uint _1233 = _1159 + 9u;
    uint _1239 = _1159 | 1u;
    float _1245 = cbLight._m0[_1239].x + _437;
    float _1246 = cbLight._m0[_1239].y + _438;
    float _1247 = cbLight._m0[_1239].z + _439;
    float _1251 = inversesqrt(dot(vec3(_1245, _1246, _1247), vec3(_1245, _1246, _1247)));
    float _1255 = dot(vec3(0.0), vec3(cbLight._m0[_1239].xyz));
    float _2544 = isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0));
    float _1258 = isnan(1.0) ? _2544 : (isnan(_2544) ? 1.0 : min(_2544, 1.0));
    float _1259 = dot(vec3(cbLight._m0[_1239].xyz), vec3(_1245 * _1251, _1246 * _1251, _1247 * _1251));
    float _2555 = isnan(0.0) ? _1259 : (isnan(_1259) ? 0.0 : max(_1259, 0.0));
    float _1268 = (exp2(log2(1.0 - (isnan(1.0) ? _2555 : (isnan(_2555) ? 1.0 : min(_2555, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1272 = (0.5 / ((_1258 + 9.9999999392252902907785028219223e-09) + _1198)) * _1258;
    float _2566 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
    float _1274 = (isnan(1.0) ? _2566 : (isnan(_2566) ? 1.0 : min(_2566, 1.0))) * 0.31831014156341552734375;
    float _1275 = isnan(1.0) ? _1169 : (isnan(_1169) ? 1.0 : min(_1169, 1.0));
    float _1285 = (((_1268 * cbLight._m0[_1233].x) * _1274) * _1275) + ((((cbLight._m0[_1170].x * ((1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1137))) * _1210) * _1218) * _1220);
    float _1286 = (((_1268 * cbLight._m0[_1233].y) * _1274) * _1275) + ((((cbLight._m0[_1170].y * ((1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1137))) * _1210) * _1218) * _1220);
    float _1287 = (((_1268 * cbLight._m0[_1233].z) * _1274) * _1275) + ((((cbLight._m0[_1170].z * ((1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1137))) * _1210) * _1218) * _1220);
    float _1404;
    float _1406;
    float _1408;
    if (_1157.y == 0u)
    {
        float _1343 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1344 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1343;
        float _1345 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1343;
        float _1346 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1343;
        uvec4 _1358 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1359 = _1358.x;
        uint _1370 = uint((float(_1358.y) * floor(float(uint(cbSceneParam._m0[85u].y * _459) / _1359))) + floor(float(uint(cbSceneParam._m0[85u].x * _458) / _1359)));
        float _1380 = (log2(_1346 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1381 = isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0));
        uint _1384 = uint(isnan(14.0) ? _1381 : (isnan(_1381) ? 14.0 : min(_1381, 14.0)));
        uvec4 _1389 = texelFetch(g_lightClusterGridBuffer, int(((_1384 << 2u) + (_1370 << 6u)) >> 2u));
        uint _1390 = _1389.x;
        uint _1391 = _1358.z;
        float _1481;
        float _1483;
        float _1485;
        if (((((1u << ((_1391 >> 4u) & 15u)) + 4294967295u) & _1390) == 0u) || ((_1391 & 240u) == 0u))
        {
            _1481 = 0.0;
            _1483 = 0.0;
            _1485 = 0.0;
        }
        else
        {
            float _1482;
            float _1484;
            float _1486;
            float _1649 = 0.0;
            float _1650 = 0.0;
            float _1651 = 0.0;
            uint _1652 = 0u;
            uint _1661;
            bool _1662;
            for (;;)
            {
                _1661 = texelFetch(g_lightClassification, int((((_1384 << 5u) + (_1370 << 9u)) + (_1652 << 2u)) >> 2u)).x;
                _1662 = _1661 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                if (_1662)
                {
                    frontier_phi_63_pred = _1651;
                    frontier_phi_63_pred_1 = _1650;
                    frontier_phi_63_pred_2 = _1649;
                }
                else
                {
                    float _1836;
                    float _1837;
                    float _1838;
                    uint _1839;
                    _1836 = _1649;
                    _1837 = _1650;
                    _1838 = _1651;
                    _1839 = _1661;
                    float _1743;
                    float _1744;
                    float _1745;
                    for (;;)
                    {
                        uint _1843 = uint(findLSB(_1839)) + (_1652 << 5u);
                        uint _1840 = (_1839 + 4294967295u) & _1839;
                        uint _1845 = _1843 * 48u;
                        vec4 _1859 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1845)).x, texelFetch(g_PointLightRenderingBuffer, int(_1845 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1845 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1845 + 3u)).x));
                        uint _1876 = (_1843 * 48u) + 8u;
                        vec3 _1887 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_1876)).x, texelFetch(g_PointLightRenderingBuffer, int(_1876 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1876 + 2u)).x));
                        float _1891 = _1859.x - _1344;
                        float _1892 = _1859.y - _1345;
                        float _1893 = _1859.z - _1346;
                        float _1894 = dot(vec3(_1891, _1892, _1893), vec3(_1891, _1892, _1893));
                        float _1897 = inversesqrt(_1894);
                        float _1906 = 1.0 - (_1894 * _1859.w);
                        float _2592 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
                        float _1908 = sqrt(_1894) * uintBitsToFloat(uvec4(_1866, _1867, _1868, texelFetch(g_PointLightRenderingBuffer, int(((_1843 * 48u) + 4u) + 3u)).x)).w;
                        float _1911 = 1.39999997615814208984375 / (_1908 + 1.39999997615814208984375);
                        float _1912 = _1911 * _1911;
                        float _1915 = ((1.0 - _1912) * dot(vec3(0.0), vec3(_1897 * _1891, _1897 * _1892, _1897 * _1893))) + _1912;
                        float _1917 = (-0.0) - _1344;
                        float _1918 = (-0.0) - _1345;
                        float _1919 = (-0.0) - _1346;
                        float _1923 = inversesqrt(dot(vec3(_1917, _1918, _1919), vec3(_1917, _1918, _1919)));
                        float _1927 = dot(vec3(0.0), vec3(_1923 * _1917, _1923 * _1918, _1923 * _1919));
                        float _2603 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
                        float _2614 = isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0));
                        float _1931 = isnan(1.0) ? _2614 : (isnan(_2614) ? 1.0 : min(_2614, 1.0));
                        float _1935 = (0.5 / (((isnan(1.0) ? _2603 : (isnan(_2603) ? 1.0 : min(_2603, 1.0))) + 9.9999999392252902907785028219223e-09) + _1931)) * _1931;
                        float _2625 = isnan(0.0) ? _1935 : (isnan(_1935) ? 0.0 : max(_1935, 0.0));
                        float _1944 = (((isnan(1.0) ? _2625 : (isnan(_2625) ? 1.0 : min(_2625, 1.0))) * 3.1415927410125732421875) / (((_1908 * _1908) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2592 : (isnan(_2592) ? 1.0 : min(_2592, 1.0)));
                        _1743 = (_1944 * _1887.x) + _1836;
                        _1744 = (_1944 * _1887.y) + _1837;
                        _1745 = (_1944 * _1887.z) + _1838;
                        if (_1840 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _1836 = _1743;
                            _1837 = _1744;
                            _1838 = _1745;
                            _1839 = _1840;
                        }
                    }
                    frontier_phi_63_pred = _1745;
                    frontier_phi_63_pred_1 = _1744;
                    frontier_phi_63_pred_2 = _1743;
                }
                _1486 = frontier_phi_63_pred;
                _1484 = frontier_phi_63_pred_1;
                _1482 = frontier_phi_63_pred_2;
                uint _1653 = _1652 + 1u;
                if (_1653 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1649 = _1482;
                    _1650 = _1484;
                    _1651 = _1486;
                    _1652 = _1653;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1481 = _1482;
            _1483 = _1484;
            _1485 = _1486;
        }
        uvec4 _1489 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1490 = _1489.z;
        uint _1492 = (_1490 >> 8u) & 15u;
        float _1629;
        float _1631;
        float _1633;
        if (((4294967295u << _1492) & _1390) == 0u)
        {
            _1629 = _1481;
            _1631 = _1483;
            _1633 = _1485;
        }
        else
        {
            float _1645 = inversesqrt(dot(vec3(_1344, _1345, _1346), vec3(_1344, _1345, _1346)));
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            if (_1492 < ((_1490 >> 12u) & 15u))
            {
                float _1630;
                float _1632;
                float _1634;
                float _1822 = _1481;
                float _1823 = _1483;
                float _1824 = _1485;
                uint _1825 = _1492;
                uint _1834;
                bool _1835;
                for (;;)
                {
                    _1834 = texelFetch(g_lightClassification, int((((_1384 << 5u) + (_1370 << 9u)) + (_1825 << 2u)) >> 2u)).x;
                    _1835 = _1834 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    if (_1835)
                    {
                        frontier_phi_77_pred = _1823;
                        frontier_phi_77_pred_1 = _1822;
                        frontier_phi_77_pred_2 = _1824;
                    }
                    else
                    {
                        float _1979;
                        float _1980;
                        float _1981;
                        float _2200;
                        float _2201;
                        float _2202;
                        float _1989 = _1822;
                        float _1990 = _1823;
                        float _1991 = _1824;
                        uint _1992 = _1834;
                        uint _1993;
                        uint _2003;
                        vec4 _2018;
                        float _2019;
                        vec3 _2031;
                        vec4 _2046;
                        vec4 _2061;
                        float _2107;
                        bool _2108;
                        for (;;)
                        {
                            _2003 = ((_1825 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_1992));
                            _1993 = (_1992 + 4294967295u) & _1992;
                            uint _2005 = _2003 * 40u;
                            _2018 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2005)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2005 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2005 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2005 + 3u)).x));
                            _2019 = _2018.w;
                            uint _2021 = (_2003 * 40u) + 8u;
                            _2031 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2021)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2021 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2021 + 2u)).x));
                            uint _2033 = (_2003 * 40u) + 16u;
                            _2046 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2033)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2033 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2033 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2033 + 3u)).x));
                            uint _2048 = (_2003 * 40u) + 20u;
                            _2061 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2048)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2048 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2048 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2048 + 3u)).x));
                            uint _2063 = (_2003 * 40u) + 24u;
                            vec4 _2076 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2063)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2063 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2063 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2063 + 3u)).x));
                            uint _2082 = (_2003 * 40u) + 28u;
                            vec4 _2095 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2082)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2082 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2082 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2082 + 3u)).x));
                            _2107 = fma(_1346, _2095.z, fma(_1345, _2095.y, _2095.x * _1344)) + _2095.w;
                            _2108 = !((fma(_1346, _2076.z, fma(_1345, _2076.y, _2076.x * _1344)) + _2076.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            if (_2108)
                            {
                                float _2142 = _2018.x - _1344;
                                float _2143 = _2018.y - _1345;
                                float _2144 = _2018.z - _1346;
                                float _2145 = dot(vec3(_2142, _2143, _2144), vec3(_2142, _2143, _2144));
                                float _2148 = inversesqrt(_2145);
                                float _2155 = 1.0 - (_2145 / (_2019 * _2019));
                                float _2636 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
                                float _2157 = sqrt(_2145) * uintBitsToFloat(uvec4(_2111, _2112, _2113, texelFetch(g_SpotLightRenderingBuffer, int(((_2003 * 40u) + 4u) + 3u)).x)).w;
                                float _2159 = 1.39999997615814208984375 / (_2157 + 1.39999997615814208984375);
                                float _2160 = _2159 * _2159;
                                float _2163 = (fma(_1346, _2046.z, fma(_1345, _2046.y, _2046.x * _1344)) + _2046.w) / _2107;
                                float _2164 = (fma(_1346, _2061.z, fma(_1345, _2061.y, _2061.x * _1344)) + _2061.w) / _2107;
                                float _2168 = 1.0 - dot(vec2(_2163, _2164), vec2(_2163, _2164));
                                float _2647 = isnan(0.0) ? _2168 : (isnan(_2168) ? 0.0 : max(_2168, 0.0));
                                float _2176 = dot(vec3(0.0), vec3((-0.0) - (_1344 * _1645), (-0.0) - (_1345 * _1645), (-0.0) - (_1346 * _1645)));
                                float _2658 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0));
                                float _2184 = ((1.0 - _2160) * dot(vec3(0.0), vec3(_2148 * _2142, _2148 * _2143, _2148 * _2144))) + _2160;
                                float _2669 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
                                float _2185 = isnan(1.0) ? _2669 : (isnan(_2669) ? 1.0 : min(_2669, 1.0));
                                float _2189 = (0.5 / (((isnan(1.0) ? _2658 : (isnan(_2658) ? 1.0 : min(_2658, 1.0))) + 9.9999999392252902907785028219223e-09) + _2185)) * _2185;
                                float _2680 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
                                float _2196 = ((isnan(1.0) ? _2647 : (isnan(_2647) ? 1.0 : min(_2647, 1.0))) * (isnan(1.0) ? _2636 : (isnan(_2636) ? 1.0 : min(_2636, 1.0)))) * (((isnan(1.0) ? _2680 : (isnan(_2680) ? 1.0 : min(_2680, 1.0))) * 3.1415927410125732421875) / (((_2157 * _2157) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_83_pred = _2196 * _2031.z;
                                frontier_phi_83_pred_1 = _2196 * _2031.y;
                                frontier_phi_83_pred_2 = _2196 * _2031.x;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                            }
                            _2202 = frontier_phi_83_pred;
                            _2201 = frontier_phi_83_pred_1;
                            _2200 = frontier_phi_83_pred_2;
                            _1979 = _2200 + _1989;
                            _1980 = _2201 + _1990;
                            _1981 = _2202 + _1991;
                            if (_1993 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _1989 = _1979;
                                _1990 = _1980;
                                _1991 = _1981;
                                _1992 = _1993;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _1980;
                        frontier_phi_77_pred_1 = _1979;
                        frontier_phi_77_pred_2 = _1981;
                    }
                    _1632 = frontier_phi_77_pred;
                    _1630 = frontier_phi_77_pred_1;
                    _1634 = frontier_phi_77_pred_2;
                    uint _1826 = _1825 + 1u;
                    if (_1826 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _1822 = _1630;
                        _1823 = _1632;
                        _1824 = _1634;
                        _1825 = _1826;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _1634;
                frontier_phi_52_53_ladder_1 = _1632;
                frontier_phi_52_53_ladder_2 = _1630;
            }
            else
            {
                frontier_phi_52_53_ladder = _1485;
                frontier_phi_52_53_ladder_1 = _1483;
                frontier_phi_52_53_ladder_2 = _1481;
            }
            _1629 = frontier_phi_52_53_ladder_2;
            _1631 = frontier_phi_52_53_ladder_1;
            _1633 = frontier_phi_52_53_ladder;
        }
        float _1638 = isnan(1.0) ? _471 : (isnan(_471) ? 1.0 : min(_471, 1.0));
        _1404 = ((_1629 * 0.039999999105930328369140625) * _1638) + _1285;
        _1406 = ((_1631 * 0.039999999105930328369140625) * _1638) + _1286;
        _1408 = ((_1633 * 0.039999999105930328369140625) * _1638) + _1287;
    }
    else
    {
        _1404 = _1285;
        _1406 = _1286;
        _1408 = _1287;
    }
    uint _1414 = _1153 + 9u;
    uint _1415 = _1414 + uint(cbMatDynParam._m0[0u].w);
    float _1430 = ((cbMtdParam._m0[9u].x * _404.x) * cbInstanceData._m0[_1415].x) + ((_1404 + ((isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0))) * _893)) * cbPerFrame._m0[3u].x);
    float _1431 = ((cbMtdParam._m0[9u].y * _404.y) * cbInstanceData._m0[_1415].y) + ((_1406 + ((isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0))) * _893)) * cbPerFrame._m0[3u].x);
    float _1432 = ((cbMtdParam._m0[9u].z * _404.z) * cbInstanceData._m0[_1415].z) + ((_1408 + ((isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0))) * _893)) * cbPerFrame._m0[3u].x);
    float _1433 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
    float _1434 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
    float _1435 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
    uint _1436 = _1153 + 6u;
    float _1444 = _458 / cbSceneParam._m0[86u].x;
    float _1445 = _459 / cbSceneParam._m0[86u].y;
    vec4 _1459 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1444, _1445, (log2((isnan(cbSceneParam._m0[77u].w) ? _432 : (isnan(_432) ? cbSceneParam._m0[77u].w : min(_432, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1461 = _1459.x;
    float _1462 = _1459.y;
    float _1463 = _1459.z;
    float _1464 = _1459.w;
    float _1538;
    float _1540;
    float _1542;
    float _1544;
    if (_432 > cbSceneParam._m0[78u].w)
    {
        float _1500 = isnan(_432) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _432 : min(cbSceneParam._m0[80u].w, _432));
        float _1501 = _1500 / _432;
        float _1512 = _1501 * _258;
        float _1513 = _259 * _1501;
        float _1514 = (-0.0) - _1513;
        float _1515 = _1501 * _260;
        float _1517 = (cbSceneParam._m0[77u].w * _1514) / _1500;
        float _1518 = _1517 + cbSceneParam._m0[79u].w;
        float _1519 = cbSceneParam._m0[79u].w - _1513;
        float _1525 = sqrt(((_1512 * _1512) + (_1513 * _1513)) + (_1515 * _1515));
        float _1528 = (1.0 - (cbSceneParam._m0[77u].w / _1500)) * _1525;
        float _1534 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1536 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1753;
        if (abs((_1514 - _1517) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1753 = ((((_1518 > 0.0) ? exp2(_1534 * _1518) : (2.0 - exp2(_1536 * _1518))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1528;
        }
        else
        {
            float _1675 = 1.0 / cbSceneParam._m0[80u].x;
            float _1676 = isnan(_1519) ? _1518 : (isnan(_1518) ? _1519 : max(_1518, _1519));
            float _1677 = isnan(_1519) ? _1518 : (isnan(_1518) ? _1519 : min(_1518, _1519));
            float _1686 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : min(_1676, 0.0));
            float _1687 = isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : min(_1677, 0.0));
            _1753 = ((abs(_1525 / _1514) * cbSceneParam._m0[80u].y) * ((((_1686 - _1687) * 2.0) - ((exp2(_1534 * (isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0)))) - exp2(_1534 * (isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0))))) * _1675)) - ((exp2(_1536 * _1686) - exp2(_1536 * _1687)) * _1675))) + (_1528 * cbSceneParam._m0[80u].z);
        }
        vec4 _1755 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1444, _1445, 1.0), 0.0);
        float _1764 = exp2((_1753 * (-1.44269502162933349609375)) * (1.0 - _1755.w));
        float _1765 = log2(_1764);
        float _1781 = log2(_1464);
        _1538 = (exp2(_1781 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1765 * cbSceneParam._m0[78u].x)) * _1755.x) / cbSceneParam._m0[78u].x)) + _1461;
        _1540 = (exp2(_1781 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1765 * cbSceneParam._m0[78u].y)) * _1755.y) / cbSceneParam._m0[78u].y)) + _1462;
        _1542 = (exp2(_1781 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1765 * cbSceneParam._m0[78u].z)) * _1755.z) / cbSceneParam._m0[78u].z)) + _1463;
        _1544 = _1764 * _1464;
    }
    else
    {
        _1538 = _1461;
        _1540 = _1462;
        _1542 = _1463;
        _1544 = _1464;
    }
    bool _1791;
    vec4 _1554;
    vec4 _1577;
    float _1579;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    bool _1597;
    for (;;)
    {
        _1554 = cbMatDynParam._m0[0u];
        float _1556 = roundEven(_1554.y);
        bool _1557 = _1556 == 3.0;
        float _1559 = log2(_1544);
        float _1566 = exp2(_1559 * cbSceneParam._m0[78u].x) * _1433;
        float _1567 = exp2(_1559 * cbSceneParam._m0[78u].y) * _1434;
        float _1568 = exp2(_1559 * cbSceneParam._m0[78u].z) * _1435;
        float _1575 = _446 + (-0.5);
        _1577 = cbMtdParam._m0[1u];
        _1579 = _1577.y * _1575;
        float _1582 = (_1556 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _1583 = _1582 * (_1557 ? _1566 : (_1566 + (cbSceneParam._m0[72u].w * _1538)));
        _1584 = _1582 * (_1557 ? _1567 : (_1567 + (cbSceneParam._m0[72u].w * _1540)));
        _1585 = _1582 * (_1557 ? _1568 : (_1568 + (cbSceneParam._m0[72u].w * _1542)));
        _1586 = _1575 * 0.999000012874603271484375;
        _1597 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_1597)
        {
            if ((cbInstanceData._m0[_1153 + 7u].x + _1586) < 0.5)
            {
                _1791 = true;
                break;
            }
        }
        uint _1710 = _1414 + uint(_1554.w);
        if ((cbInstanceData._m0[_1710].w < 1.0) && ((cbInstanceData._m0[_1710].w + _1586) < 0.5))
        {
            _1791 = true;
            break;
        }
        if ((_1579 + 1.0) < _1577.x)
        {
            _1791 = true;
            break;
        }
        _1791 = false;
        break;
    }
    float _1949;
    if (_1791)
    {
        discard_state = true;
        _1949 = 0.0;
    }
    else
    {
        _1949 = cbInstanceData._m0[_1436].w;
    }
    SV_Target.x = _1583;
    SV_Target.y = _1584;
    SV_Target.z = _1585;
    SV_Target.w = _1949;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1436].w;
    discard_exit();
}


