#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _961;
float _2917;
float _2918;
float _2919;
float _2920;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _284 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _319 = cbMtdParam._m0[24u].x + _263;
    float _320 = cbMtdParam._m0[24u].y + _264;
    float _321 = cbMtdParam._m0[24u].z + _265;
    float _335 = (-0.0) - dot(vec3(_319, _320, _321), vec3(_191 * _184, _191 * _185, _191 * _186));
    float _336 = (-0.0) - dot(vec3(_319, _320, _321), vec3(_205 * TANGENT.x, _205 * TANGENT.y, _205 * TANGENT.z));
    float _337 = (-0.0) - dot(vec3(_319, _320, _321), vec3((-0.0) - (_198 * NORMAL.x), (-0.0) - (_198 * NORMAL.y), (-0.0) - (_198 * NORMAL.z)));
    float _341 = inversesqrt(dot(vec3(_335, _336, _337), vec3(_335, _336, _337)));
    float _344 = _341 * _337;
    float _345 = (_341 * _335) + (((_284.x * 2.0) + (-1.0)) * cbMtdParam._m0[22u].x);
    float _346 = (_341 * _336) + (((_284.y * 2.0) + (-1.0)) * cbMtdParam._m0[22u].y);
    float _347 = _345 * cbMtdParam._m0[20u].w;
    float _348 = _346 * cbMtdParam._m0[20u].z;
    float _349 = fract(TEXCOORD.x);
    float _350 = fract(TEXCOORD.y);
    float _356;
    if (_347 > 0.0)
    {
        _356 = (1.0 - _349) / _347;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_347 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _349) / _347;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _356 = frontier_phi_3_2_ladder;
    }
    float _364;
    if (_348 > 0.0)
    {
        _364 = (1.0 - _350) / _348;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_348 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _350) / _348;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _364 = frontier_phi_7_6_ladder;
    }
    bool _366 = _344 > 0.0;
    float _368 = _366 ? (cbMtdParam._m0[16u].x / _344) : 5000.0;
    float _369 = isnan(_364) ? _356 : (isnan(_356) ? _364 : min(_356, _364));
    float _370 = isnan(_368) ? _369 : (isnan(_369) ? _368 : min(_369, _368));
    float _374 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _375 = _349 + (-0.5);
    float _378 = _350 + (-0.5);
    float _381 = ((_370 * _344) + _374) / _374;
    vec4 _406 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (((((_375 + (_370 * _347)) / _381) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (((((_378 + (_370 * _348)) / _381) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    float _416 = cbMtdParam._m0[9u].x * _406.x;
    float _417 = cbMtdParam._m0[9u].y * _406.y;
    float _418 = cbMtdParam._m0[9u].z * _406.z;
    float _437 = _345 * cbMtdParam._m0[22u].w;
    float _438 = _346 * cbMtdParam._m0[22u].z;
    bool _439 = _437 > 0.0;
    float _444;
    if (_439)
    {
        _444 = (1.0 - _349) / _437;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_437 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _349) / _437;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _444 = frontier_phi_11_10_ladder;
    }
    bool _446 = _438 > 0.0;
    float _451;
    if (_446)
    {
        _451 = (1.0 - _350) / _438;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_438 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _350) / _438;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _451 = frontier_phi_15_14_ladder;
    }
    float _454 = _366 ? (cbMtdParam._m0[18u].x / _344) : 5000.0;
    float _455 = isnan(_451) ? _444 : (isnan(_444) ? _451 : min(_444, _451));
    float _456 = isnan(_454) ? _455 : (isnan(_455) ? _454 : min(_455, _454));
    float _460 = cbMtdParam._m0[19u].y * cbMtdParam._m0[18u].x;
    float _464 = ((_456 * _344) + _460) / _460;
    float _469 = cbMtdParam._m0[19u].x - cbMtdParam._m0[20u].x * trunc(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    float _471 = floor(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    vec4 _487 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_375 + (_456 * _437)) / _464) + 0.5) + _469) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_378 + (_456 * _438)) / _464) + 0.5) + _471) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[0u].w));
    float _499;
    if (_439)
    {
        _499 = (1.0 - _349) / _437;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_437 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _349) / _437;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _499 = frontier_phi_19_18_ladder;
    }
    float _505;
    if (_446)
    {
        _505 = (1.0 - _350) / _438;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_438 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _350) / _438;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _505 = frontier_phi_23_22_ladder;
    }
    float _507 = isnan(_505) ? _499 : (isnan(_499) ? _505 : min(_499, _505));
    float _508 = isnan(_454) ? _507 : (isnan(_507) ? _454 : min(_507, _454));
    float _515 = ((_508 * _344) + _460) / _460;
    vec4 _535 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_375 + (_508 * _437)) / _515) + 0.5) + _469) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_378 + (_508 * _438)) / _515) + 0.5) + _471) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[8u].w));
    float _537 = _535.x;
    float _544 = (_537 * ((_487.x * cbMtdParam._m0[10u].x) - _416)) + _416;
    float _545 = (_537 * ((_487.y * cbMtdParam._m0[10u].y) - _417)) + _417;
    float _546 = (_537 * ((_487.z * cbMtdParam._m0[10u].z) - _418)) + _418;
    float _2959 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _2970 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _2981 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _565 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _569 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _570 = _263 * _569;
    float _571 = _264 * _569;
    float _572 = _265 * _569;
    vec4 _577 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _579 = _577.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _675 = sqrt(((_263 * _263) + (_264 * _264)) + (_265 * _265));
        float _681 = (cbMatDynParam._m0[5u].x * _675) + cbMatDynParam._m0[5u].y;
        float _2992 = isnan(0.0) ? _681 : (isnan(_681) ? 0.0 : max(_681, 0.0));
        float _682 = isnan(1.0) ? _2992 : (isnan(_2992) ? 1.0 : min(_2992, 1.0));
        float _686 = (cbMatDynParam._m0[5u].z * _675) + cbMatDynParam._m0[5u].w;
        float _3003 = isnan(0.0) ? _686 : (isnan(_686) ? 0.0 : max(_686, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3003 : (isnan(_3003) ? 1.0 : min(_3003, 1.0))) - _682)) + _682) < ((_579 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _591 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _592 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _605 = uint(roundEven(NORMAL.w)) * 13u;
    uint _607 = _605 + 9u;
    uint _608 = _607 + uint(cbMatDynParam._m0[0u].w);
    float _614 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2959 : (isnan(_2959) ? 1.0 : min(_2959, 1.0)))) * cbInstanceData._m0[_608].x;
    float _615 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2970 : (isnan(_2970) ? 1.0 : min(_2970, 1.0)))) * cbInstanceData._m0[_608].y;
    float _616 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2981 : (isnan(_2981) ? 1.0 : min(_2981, 1.0)))) * cbInstanceData._m0[_608].z;
    float _3014 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _617 = isnan(1.0) ? _3014 : (isnan(_3014) ? 1.0 : min(_3014, 1.0));
    float _3025 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _618 = isnan(1.0) ? _3025 : (isnan(_3025) ? 1.0 : min(_3025, 1.0));
    float _3036 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _619 = isnan(1.0) ? _3036 : (isnan(_3036) ? 1.0 : min(_3036, 1.0));
    vec4 _628 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _591, cbSceneParam._m0[86u].y * _592));
    float _631 = _628.x * TEXCOORD_4.z;
    float _632 = (-0.0) - _570;
    float _633 = (-0.0) - _571;
    float _634 = (-0.0) - _572;
    float _656 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _660 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _664 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _960;
    float _962;
    float _963;
    float _964;
    float _965;
    float _966;
    float _967;
    float _968;
    float _969;
    float _970;
    float _971;
    float _972;
    float _973;
    float _974;
    float _975;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _748 = (cbModelParam._m0[37u].x * ((((fma(_664, cbModelParam._m0[26u].z, fma(_660, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _656)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _750 = (cbModelParam._m0[37u].y * ((((fma(_664, cbModelParam._m0[27u].z, fma(_660, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _656)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _751 = (((((fma(_664, cbModelParam._m0[28u].z, fma(_660, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _656)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _754 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_748, _750, _751), 0.0);
        vec4 _761 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_748, _750, _751), 0.0);
        vec4 _768 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_748, _750, _751), 0.0);
        vec4 _775 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_748, _750, _751), 0.0);
        float _788 = exp2((_754.w + (-0.5)) * 20.0) * 2.0;
        float _789 = _788 * (_754.x + (-0.5));
        float _790 = _788 * (_754.y + (-0.5));
        float _791 = _788 * (_754.z + (-0.5));
        float _798 = exp2((_761.w + (-0.5)) * 20.0) * 2.0;
        float _799 = _798 * (_761.x + (-0.5));
        float _800 = _798 * (_761.y + (-0.5));
        float _801 = _798 * (_761.z + (-0.5));
        float _808 = exp2((_768.w + (-0.5)) * 20.0) * 2.0;
        float _809 = _808 * (_768.x + (-0.5));
        float _810 = _808 * (_768.y + (-0.5));
        float _811 = _808 * (_768.z + (-0.5));
        float _818 = exp2((_775.w + (-0.5)) * 20.0) * 2.0;
        float _819 = _818 * (_775.x + (-0.5));
        float _820 = _818 * (_775.y + (-0.5));
        float _821 = _818 * (_775.z + (-0.5));
        float _822 = isnan(0.0) ? _819 : (isnan(_819) ? 0.0 : max(_819, 0.0));
        float _823 = isnan(0.0) ? _820 : (isnan(_820) ? 0.0 : max(_820, 0.0));
        float _824 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _825 = _789 * 0.5;
        float _826 = _799 * 0.5;
        float _827 = _809 * 0.5;
        float _828 = dot(vec3(_825, _826, _827), vec3(_825, _826, _827));
        float _833 = (_828 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_828);
        float _842 = (dot(vec3(0.0), vec3(_833 * _825, _833 * _826, _833 * _827)) + 1.0) * 0.5;
        float _3062 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _852 = sqrt(((_826 * _826) + (_825 * _825)) + (_827 * _827)) / (_822 + 9.9999997473787516355514526367188e-06);
        float _3073 = isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0));
        float _853 = isnan(1.0) ? _3073 : (isnan(_3073) ? 1.0 : min(_3073, 1.0));
        float _854 = _853 * 2.0;
        float _858 = (1.0 - _853) / (_853 + 1.0);
        float _3084 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _859 = isnan(1.0) ? _3084 : (isnan(_3084) ? 1.0 : min(_3084, 1.0));
        float _868 = ((((1.0 - _859) * (_854 + 2.0)) * exp2(log2(isnan(1.0) ? _3062 : (isnan(_3062) ? 1.0 : min(_3062, 1.0))) * (_854 + 1.0))) + _859) * _822;
        float _869 = _790 * 0.5;
        float _870 = _800 * 0.5;
        float _871 = _810 * 0.5;
        float _872 = dot(vec3(_869, _870, _871), vec3(_869, _870, _871));
        float _877 = (_872 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_872);
        float _885 = (dot(vec3(0.0), vec3(_877 * _869, _877 * _870, _877 * _871)) + 1.0) * 0.5;
        float _3095 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _894 = sqrt(((_870 * _870) + (_869 * _869)) + (_871 * _871)) / (_823 + 9.9999997473787516355514526367188e-06);
        float _3106 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _895 = isnan(1.0) ? _3106 : (isnan(_3106) ? 1.0 : min(_3106, 1.0));
        float _896 = _895 * 2.0;
        float _900 = (1.0 - _895) / (_895 + 1.0);
        float _3117 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
        float _901 = isnan(1.0) ? _3117 : (isnan(_3117) ? 1.0 : min(_3117, 1.0));
        float _910 = ((((1.0 - _901) * (_896 + 2.0)) * exp2(log2(isnan(1.0) ? _3095 : (isnan(_3095) ? 1.0 : min(_3095, 1.0))) * (_896 + 1.0))) + _901) * _823;
        float _911 = _791 * 0.5;
        float _912 = _801 * 0.5;
        float _913 = _811 * 0.5;
        float _914 = dot(vec3(_911, _912, _913), vec3(_911, _912, _913));
        float _919 = (_914 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_914);
        float _927 = (dot(vec3(0.0), vec3(_919 * _911, _919 * _912, _919 * _913)) + 1.0) * 0.5;
        float _3128 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _936 = sqrt(((_912 * _912) + (_911 * _911)) + (_913 * _913)) / (_824 + 9.9999997473787516355514526367188e-06);
        float _3139 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _937 = isnan(1.0) ? _3139 : (isnan(_3139) ? 1.0 : min(_3139, 1.0));
        float _938 = _937 * 2.0;
        float _942 = (1.0 - _937) / (_937 + 1.0);
        float _3150 = isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0));
        float _943 = isnan(1.0) ? _3150 : (isnan(_3150) ? 1.0 : min(_3150, 1.0));
        float _952 = ((((1.0 - _943) * (_938 + 2.0)) * exp2(log2(isnan(1.0) ? _3128 : (isnan(_3128) ? 1.0 : min(_3128, 1.0))) * (_938 + 1.0))) + _943) * _824;
        _960 = _791;
        _962 = _790;
        _963 = _789;
        _964 = _801;
        _965 = _800;
        _966 = _799;
        _967 = _811;
        _968 = _810;
        _969 = _809;
        _970 = _824;
        _971 = _823;
        _972 = _822;
        _973 = cbModelParam._m0[36u].z * (isnan(0.0) ? _868 : (isnan(_868) ? 0.0 : max(_868, 0.0)));
        _974 = cbModelParam._m0[36u].z * (isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0)));
        _975 = cbModelParam._m0[36u].z * (isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0)));
    }
    else
    {
        _960 = _961;
        _962 = _961;
        _963 = _961;
        _964 = _961;
        _965 = _961;
        _966 = _961;
        _967 = _961;
        _968 = _961;
        _969 = _961;
        _970 = _961;
        _971 = _961;
        _972 = _961;
        _973 = 0.0;
        _974 = 0.0;
        _975 = 0.0;
    }
    float _1239;
    float _1240;
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1032 = (cbModelParam._m0[38u].x * ((((fma(_664, cbModelParam._m0[30u].z, fma(_660, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _656)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1033 = (cbModelParam._m0[38u].y * ((((fma(_664, cbModelParam._m0[31u].z, fma(_660, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _656)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1034 = (((((fma(_664, cbModelParam._m0[32u].z, fma(_660, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _656)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1036 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1032, _1033, _1034), 0.0);
        vec4 _1043 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1032, _1033, _1034), 0.0);
        vec4 _1050 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1032, _1033, _1034), 0.0);
        vec4 _1057 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1032, _1033, _1034), 0.0);
        float _1069 = exp2((_1036.w + (-0.5)) * 20.0) * 2.0;
        float _1070 = _1069 * (_1036.x + (-0.5));
        float _1071 = _1069 * (_1036.y + (-0.5));
        float _1072 = _1069 * (_1036.z + (-0.5));
        float _1079 = exp2((_1043.w + (-0.5)) * 20.0) * 2.0;
        float _1080 = _1079 * (_1043.x + (-0.5));
        float _1081 = _1079 * (_1043.y + (-0.5));
        float _1082 = _1079 * (_1043.z + (-0.5));
        float _1089 = exp2((_1050.w + (-0.5)) * 20.0) * 2.0;
        float _1090 = _1089 * (_1050.x + (-0.5));
        float _1091 = _1089 * (_1050.y + (-0.5));
        float _1092 = _1089 * (_1050.z + (-0.5));
        float _1099 = exp2((_1057.w + (-0.5)) * 20.0) * 2.0;
        float _1100 = _1099 * (_1057.x + (-0.5));
        float _1101 = _1099 * (_1057.y + (-0.5));
        float _1102 = _1099 * (_1057.z + (-0.5));
        float _1103 = isnan(0.0) ? _1100 : (isnan(_1100) ? 0.0 : max(_1100, 0.0));
        float _1104 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1105 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1106 = _1070 * 0.5;
        float _1107 = _1080 * 0.5;
        float _1108 = _1090 * 0.5;
        float _1109 = dot(vec3(_1106, _1107, _1108), vec3(_1106, _1107, _1108));
        float _1114 = (_1109 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1109);
        float _1122 = (dot(vec3(0.0), vec3(_1114 * _1106, _1114 * _1107, _1114 * _1108)) + 1.0) * 0.5;
        float _3191 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1131 = sqrt(((_1107 * _1107) + (_1106 * _1106)) + (_1108 * _1108)) / (_1103 + 9.9999997473787516355514526367188e-06);
        float _3202 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3202 : (isnan(_3202) ? 1.0 : min(_3202, 1.0));
        float _1133 = _1132 * 2.0;
        float _1137 = (1.0 - _1132) / (_1132 + 1.0);
        float _3213 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1138 = isnan(1.0) ? _3213 : (isnan(_3213) ? 1.0 : min(_3213, 1.0));
        float _1147 = ((((1.0 - _1138) * (_1133 + 2.0)) * exp2(log2(isnan(1.0) ? _3191 : (isnan(_3191) ? 1.0 : min(_3191, 1.0))) * (_1133 + 1.0))) + _1138) * _1103;
        float _1148 = _1071 * 0.5;
        float _1149 = _1081 * 0.5;
        float _1150 = _1091 * 0.5;
        float _1151 = dot(vec3(_1148, _1149, _1150), vec3(_1148, _1149, _1150));
        float _1156 = (_1151 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1151);
        float _1164 = (dot(vec3(0.0), vec3(_1156 * _1148, _1156 * _1149, _1156 * _1150)) + 1.0) * 0.5;
        float _3224 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1173 = sqrt(((_1149 * _1149) + (_1148 * _1148)) + (_1150 * _1150)) / (_1104 + 9.9999997473787516355514526367188e-06);
        float _3235 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _3235 : (isnan(_3235) ? 1.0 : min(_3235, 1.0));
        float _1175 = _1174 * 2.0;
        float _1179 = (1.0 - _1174) / (_1174 + 1.0);
        float _3246 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1180 = isnan(1.0) ? _3246 : (isnan(_3246) ? 1.0 : min(_3246, 1.0));
        float _1189 = ((((1.0 - _1180) * (_1175 + 2.0)) * exp2(log2(isnan(1.0) ? _3224 : (isnan(_3224) ? 1.0 : min(_3224, 1.0))) * (_1175 + 1.0))) + _1180) * _1104;
        float _1190 = _1072 * 0.5;
        float _1191 = _1082 * 0.5;
        float _1192 = _1092 * 0.5;
        float _1193 = dot(vec3(_1190, _1191, _1192), vec3(_1190, _1191, _1192));
        float _1198 = (_1193 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1193);
        float _1206 = (dot(vec3(0.0), vec3(_1198 * _1190, _1198 * _1191, _1198 * _1192)) + 1.0) * 0.5;
        float _3257 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1215 = sqrt(((_1191 * _1191) + (_1190 * _1190)) + (_1192 * _1192)) / (_1105 + 9.9999997473787516355514526367188e-06);
        float _3268 = isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0));
        float _1216 = isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0));
        float _1217 = _1216 * 2.0;
        float _1221 = (1.0 - _1216) / (_1216 + 1.0);
        float _3279 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1222 = isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0));
        float _1231 = ((((1.0 - _1222) * (_1217 + 2.0)) * exp2(log2(isnan(1.0) ? _3257 : (isnan(_3257) ? 1.0 : min(_3257, 1.0))) * (_1217 + 1.0))) + _1222) * _1105;
        _1239 = _1072;
        _1240 = _1071;
        _1241 = _1070;
        _1242 = _1082;
        _1243 = _1081;
        _1244 = _1080;
        _1245 = _1092;
        _1246 = _1091;
        _1247 = _1090;
        _1248 = _1105;
        _1249 = _1104;
        _1250 = _1103;
        _1251 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1147 : (isnan(_1147) ? 0.0 : max(_1147, 0.0)));
        _1252 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0)));
        _1253 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0)));
    }
    else
    {
        _1239 = _961;
        _1240 = _961;
        _1241 = _961;
        _1242 = _961;
        _1243 = _961;
        _1244 = _961;
        _1245 = _961;
        _1246 = _961;
        _1247 = _961;
        _1248 = _961;
        _1249 = _961;
        _1250 = _961;
        _1251 = 0.0;
        _1252 = 0.0;
        _1253 = 0.0;
    }
    float _1263 = (cbModelParam._m0[1u].x * (_1251 - _973)) + _973;
    float _1264 = (cbModelParam._m0[1u].x * (_1252 - _974)) + _974;
    float _1265 = (cbModelParam._m0[1u].x * (_1253 - _975)) + _975;
    float _1286 = fma(_1265, cbSceneParam._m0[89u].z, fma(_1264, cbSceneParam._m0[89u].y, _1263 * cbSceneParam._m0[89u].x));
    float _1289 = fma(_1265, cbSceneParam._m0[90u].z, fma(_1264, cbSceneParam._m0[90u].y, _1263 * cbSceneParam._m0[90u].x));
    float _1292 = fma(_1265, cbSceneParam._m0[91u].z, fma(_1264, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1263));
    float _1307 = _570 * (-0.5);
    float _1308 = _571 * (-0.5);
    float _1309 = _572 * (-0.5);
    float _1310 = dot(vec4(_1307, _1308, _1309, 1.0), vec4(_1241, _1244, _1247, _1250));
    float _1313 = dot(vec4(_1307, _1308, _1309, 1.0), vec4(_1240, _1243, _1246, _1249));
    float _1316 = dot(vec4(_1307, _1308, _1309, 1.0), vec4(_1239, _1242, _1245, _1248));
    float _1350;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1323 = dot(vec4(_1307, _1308, _1309, 1.0), vec4(_960, _964, _967, _970));
        float _1327 = dot(vec4(_1307, _1308, _1309, 1.0), vec4(_962, _965, _968, _971));
        float _1331 = dot(vec4(_1307, _1308, _1309, 1.0), vec4(_963, _966, _969, _972));
        float _1338 = dot(vec4(cbModelParam._m0[39u]), vec4(_1307, _1308, _1309, 1.0));
        _1350 = dot(vec3(isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0)), isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0)), isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1338) ? 0.0 : (isnan(0.0) ? _1338 : max(0.0, _1338))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1350 = 1.0;
    }
    float _1361;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1352 = dot(vec4(cbModelParam._m0[40u]), vec4(_1307, _1308, _1309, 1.0));
        _1361 = dot(vec3(isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)), isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0)), isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1352) ? 0.0 : (isnan(0.0) ? _1352 : max(0.0, _1352))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1361 = 1.0;
    }
    float _1365 = (_1361 * cbModelParam._m0[1u].x) + (_1350 * (1.0 - cbModelParam._m0[1u].x));
    float _1374 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1457;
    float _1459;
    float _1461;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1424 = fma(_664, cbModelParam._m0[13u].z, fma(_660, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _656)) + cbModelParam._m0[13u].w;
        float _1428 = fma(_664, cbModelParam._m0[14u].z, fma(_660, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _656)) + cbModelParam._m0[14u].w;
        float _1432 = fma(_664, cbModelParam._m0[15u].z, fma(_660, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _656)) + cbModelParam._m0[15u].w;
        float _1435 = fma(_634, cbModelParam._m0[13u].z, fma(_633, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _632));
        float _1438 = fma(_634, cbModelParam._m0[14u].z, fma(_633, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _632));
        float _1441 = fma(_634, cbModelParam._m0[15u].z, fma(_633, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _632));
        float _1467;
        if (_1435 > 0.0)
        {
            _1467 = abs((1.0 - _1424) / _1435);
        }
        else
        {
            float frontier_phi_41_39_ladder;
            if (_1435 < 0.0)
            {
                frontier_phi_41_39_ladder = abs((_1424 + 1.0) / _1435);
            }
            else
            {
                frontier_phi_41_39_ladder = 5000.0;
            }
            _1467 = frontier_phi_41_39_ladder;
        }
        float _1763;
        if (_1438 > 0.0)
        {
            _1763 = abs((1.0 - _1428) / _1438);
        }
        else
        {
            float frontier_phi_50_46_ladder;
            if (_1438 < 0.0)
            {
                frontier_phi_50_46_ladder = abs((_1428 + 1.0) / _1438);
            }
            else
            {
                frontier_phi_50_46_ladder = 5000.0;
            }
            _1763 = frontier_phi_50_46_ladder;
        }
        float _2074;
        if (_1441 > 0.0)
        {
            _2074 = abs((1.0 - _1432) / _1441);
        }
        else
        {
            float frontier_phi_64_57_ladder;
            if (_1441 < 0.0)
            {
                frontier_phi_64_57_ladder = abs((_1432 + 1.0) / _1441);
            }
            else
            {
                frontier_phi_64_57_ladder = 5000.0;
            }
            _2074 = frontier_phi_64_57_ladder;
        }
        float _2076 = isnan(_1763) ? _1467 : (isnan(_1467) ? _1763 : min(_1467, _1763));
        float _2077 = isnan(_2074) ? _2076 : (isnan(_2076) ? _2074 : min(_2076, _2074));
        float _2081 = (_2077 * _1435) + _1424;
        float _2082 = (_2077 * _1438) + _1428;
        float _2083 = (_2077 * _1441) + _1432;
        float _2084 = _2077 * 9.9999997473787516355514526367188e-05;
        float _2085 = (-1.0) - _2084;
        float _2087 = _2084 + 1.0;
        float frontier_phi_40_64_ladder;
        float frontier_phi_40_64_ladder_1;
        float frontier_phi_40_64_ladder_2;
        if ((_2083 > _2087) || ((_2083 < _2085) || ((_2082 > _2087) || ((_2082 < _2085) || ((_2081 < _2085) || (_2081 > _2087))))))
        {
            frontier_phi_40_64_ladder = 0.0;
            frontier_phi_40_64_ladder_1 = 0.0;
            frontier_phi_40_64_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2222 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2083, cbModelParam._m0[9u].z, fma(_2082, cbModelParam._m0[9u].y, _2081 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2083, cbModelParam._m0[10u].z, fma(_2082, cbModelParam._m0[10u].y, _2081 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2083, cbModelParam._m0[11u].z, fma(_2082, cbModelParam._m0[11u].y, _2081 * cbModelParam._m0[11u].x))), _1374);
            frontier_phi_40_64_ladder = _2222.z * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_1 = _2222.y * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_2 = _2222.x * cbModelParam._m0[1u].y;
        }
        _1457 = frontier_phi_40_64_ladder_2;
        _1459 = frontier_phi_40_64_ladder_1;
        _1461 = frontier_phi_40_64_ladder;
    }
    else
    {
        vec4 _1445 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_632, _633, _634), _1374);
        _1457 = _1445.x * cbModelParam._m0[1u].y;
        _1459 = _1445.y * cbModelParam._m0[1u].y;
        _1461 = _1445.z * cbModelParam._m0[1u].y;
    }
    float _1464 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1552;
    float _1554;
    float _1556;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1516 = fma(_664, cbModelParam._m0[21u].z, fma(_660, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _656)) + cbModelParam._m0[21u].w;
        float _1520 = fma(_664, cbModelParam._m0[22u].z, fma(_660, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _656)) + cbModelParam._m0[22u].w;
        float _1524 = fma(_664, cbModelParam._m0[23u].z, fma(_660, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _656)) + cbModelParam._m0[23u].w;
        float _1527 = fma(_634, cbModelParam._m0[21u].z, fma(_633, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _632));
        float _1530 = fma(_634, cbModelParam._m0[22u].z, fma(_633, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _632));
        float _1533 = fma(_634, cbModelParam._m0[23u].z, fma(_633, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _632));
        float _1768;
        if (_1527 > 0.0)
        {
            _1768 = abs((1.0 - _1516) / _1527);
        }
        else
        {
            float frontier_phi_52_48_ladder;
            if (_1527 < 0.0)
            {
                frontier_phi_52_48_ladder = abs((_1516 + 1.0) / _1527);
            }
            else
            {
                frontier_phi_52_48_ladder = 5000.0;
            }
            _1768 = frontier_phi_52_48_ladder;
        }
        float _2100;
        if (_1530 > 0.0)
        {
            _2100 = abs((1.0 - _1520) / _1530);
        }
        else
        {
            float frontier_phi_66_59_ladder;
            if (_1530 < 0.0)
            {
                frontier_phi_66_59_ladder = abs((_1520 + 1.0) / _1530);
            }
            else
            {
                frontier_phi_66_59_ladder = 5000.0;
            }
            _2100 = frontier_phi_66_59_ladder;
        }
        float _2287;
        if (_1533 > 0.0)
        {
            _2287 = abs((1.0 - _1524) / _1533);
        }
        else
        {
            float frontier_phi_84_77_ladder;
            if (_1533 < 0.0)
            {
                frontier_phi_84_77_ladder = abs((_1524 + 1.0) / _1533);
            }
            else
            {
                frontier_phi_84_77_ladder = 5000.0;
            }
            _2287 = frontier_phi_84_77_ladder;
        }
        float _2289 = isnan(_2100) ? _1768 : (isnan(_1768) ? _2100 : min(_1768, _2100));
        float _2290 = isnan(_2287) ? _2289 : (isnan(_2289) ? _2287 : min(_2289, _2287));
        float _2294 = (_2290 * _1527) + _1516;
        float _2295 = (_2290 * _1530) + _1520;
        float _2296 = (_2290 * _1533) + _1524;
        float _2297 = _2290 * 9.9999997473787516355514526367188e-05;
        float _2298 = (-1.0) - _2297;
        float _2300 = _2297 + 1.0;
        float frontier_phi_49_84_ladder;
        float frontier_phi_49_84_ladder_1;
        float frontier_phi_49_84_ladder_2;
        if ((_2296 > _2300) || ((_2296 < _2298) || ((_2295 > _2300) || ((_2295 < _2298) || ((_2294 < _2298) || (_2294 > _2300))))))
        {
            frontier_phi_49_84_ladder = 0.0;
            frontier_phi_49_84_ladder_1 = 0.0;
            frontier_phi_49_84_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2488 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2296, cbModelParam._m0[17u].z, fma(_2295, cbModelParam._m0[17u].y, _2294 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2296, cbModelParam._m0[18u].z, fma(_2295, cbModelParam._m0[18u].y, _2294 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2296, cbModelParam._m0[19u].z, fma(_2295, cbModelParam._m0[19u].y, _2294 * cbModelParam._m0[19u].x))), _1464);
            frontier_phi_49_84_ladder = _2488.z * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_1 = _2488.y * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_2 = _2488.x * cbModelParam._m0[1u].z;
        }
        _1552 = frontier_phi_49_84_ladder_2;
        _1554 = frontier_phi_49_84_ladder_1;
        _1556 = frontier_phi_49_84_ladder;
    }
    else
    {
        vec4 _1536 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_632, _633, _634), _1464);
        _1552 = _1536.x * cbModelParam._m0[1u].z;
        _1554 = _1536.y * cbModelParam._m0[1u].z;
        _1556 = _1536.z * cbModelParam._m0[1u].z;
    }
    float _1568 = _631 * 0.01200000010430812835693359375;
    float _1570 = _1568 * ((cbModelParam._m0[1u].w * (_1552 - _1457)) + _1457);
    float _1571 = _1568 * ((cbModelParam._m0[1u].w * (_1554 - _1459)) + _1459);
    float _1572 = _1568 * ((cbModelParam._m0[1u].w * (_1556 - _1461)) + _1461);
    float _1575 = fma(_1572, cbSceneParam._m0[89u].z, fma(_1571, cbSceneParam._m0[89u].y, _1570 * cbSceneParam._m0[89u].x));
    float _1578 = fma(_1572, cbSceneParam._m0[90u].z, fma(_1571, cbSceneParam._m0[90u].y, _1570 * cbSceneParam._m0[90u].x));
    float _1581 = fma(_1572, cbSceneParam._m0[91u].z, fma(_1571, cbSceneParam._m0[91u].y, _1570 * cbSceneParam._m0[91u].x));
    uvec4 _1591 = floatBitsToUint(cbInstanceData._m0[_605 + 5u]);
    uint _1593 = _1591.x * 14u;
    uint _1594 = _1593 + 13u;
    float _1599 = _631 + (-1.0);
    float _1602 = (cbLight._m0[_1594].x * _1599) + 1.0;
    float _1603 = (cbLight._m0[_1594].y * _1599) + 1.0;
    uint _1604 = _1593 + 5u;
    float _1610 = isnan(1.0) ? _1603 : (isnan(_1603) ? 1.0 : min(_1603, 1.0));
    uint _1614 = _1593 + 4u;
    float _1621 = isnan(1.0) ? _1602 : (isnan(_1602) ? 1.0 : min(_1602, 1.0));
    uint _1625 = _1593 | 1u;
    float _1636 = dot(vec3(cbLight._m0[_1593].xyz), vec3(0.0));
    float _1639 = dot(vec3(cbLight._m0[_1625].xyz), vec3(0.0));
    float _3415 = isnan(0.0) ? _1636 : (isnan(_1636) ? 0.0 : max(_1636, 0.0));
    float _3426 = isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0));
    float _1644 = (isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0))) * 0.3183098733425140380859375;
    float _1646 = (isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0))) * 0.3183098733425140380859375;
    float _1653 = ((cbLight._m0[_1604].x * _1610) * _1646) + ((cbLight._m0[_1614].x * _1621) * _1644);
    float _1654 = ((_1610 * cbLight._m0[_1604].y) * _1646) + ((_1621 * cbLight._m0[_1614].y) * _1644);
    float _1655 = ((_1610 * cbLight._m0[_1604].z) * _1646) + ((_1621 * cbLight._m0[_1614].z) * _1644);
    uint _1656 = _1593 + 8u;
    float _1662 = cbLight._m0[_1593].x + _570;
    float _1663 = cbLight._m0[_1593].y + _571;
    float _1664 = cbLight._m0[_1593].z + _572;
    float _1668 = inversesqrt(dot(vec3(_1662, _1663, _1664), vec3(_1662, _1663, _1664)));
    float _1672 = dot(vec3(0.0), vec3(cbLight._m0[_1593].xyz));
    float _3437 = isnan(0.0) ? _1672 : (isnan(_1672) ? 0.0 : max(_1672, 0.0));
    float _1675 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
    float _1676 = dot(vec3(0.0), vec3(_570, _571, _572));
    float _3448 = isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0));
    float _1679 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
    float _1680 = dot(vec3(cbLight._m0[_1593].xyz), vec3(_1662 * _1668, _1663 * _1668, _1664 * _1668));
    float _3459 = isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0));
    float _1691 = (exp2(log2(1.0 - (isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1697 = (0.5 / ((_1675 + 9.9999999392252902907785028219223e-09) + _1679)) * _1675;
    float _3470 = isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0));
    float _1699 = (isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0))) * 0.31831014156341552734375;
    uint _1710 = _1593 + 9u;
    float _1716 = cbLight._m0[_1625].x + _570;
    float _1717 = cbLight._m0[_1625].y + _571;
    float _1718 = cbLight._m0[_1625].z + _572;
    float _1722 = inversesqrt(dot(vec3(_1716, _1717, _1718), vec3(_1716, _1717, _1718)));
    float _1726 = dot(vec3(0.0), vec3(cbLight._m0[_1625].xyz));
    float _3481 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0));
    float _1729 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
    float _1730 = dot(vec3(cbLight._m0[_1625].xyz), vec3(_1716 * _1722, _1717 * _1722, _1718 * _1722));
    float _3492 = isnan(0.0) ? _1730 : (isnan(_1730) ? 0.0 : max(_1730, 0.0));
    float _1739 = (exp2(log2(1.0 - (isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1743 = (0.5 / ((_1729 + 9.9999999392252902907785028219223e-09) + _1679)) * _1729;
    float _3503 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
    float _1745 = (isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0))) * 0.31831014156341552734375;
    float _1755 = (((_1739 * cbLight._m0[_1710].x) * _1745) * _1610) + (((_1691 * cbLight._m0[_1656].x) * _1699) * _1621);
    float _1756 = (((_1739 * cbLight._m0[_1710].y) * _1745) * _1610) + (((_1691 * cbLight._m0[_1656].y) * _1699) * _1621);
    float _1757 = (((_1739 * cbLight._m0[_1710].z) * _1745) * _1610) + (((_1691 * cbLight._m0[_1656].z) * _1699) * _1621);
    float _1873;
    float _1875;
    float _1877;
    float _1879;
    float _1881;
    float _1883;
    if (_1591.y == 0u)
    {
        float _1813 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1814 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1813;
        float _1815 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1813;
        float _1816 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1813;
        uvec4 _1828 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1829 = _1828.x;
        uint _1840 = uint((float(_1828.y) * floor(float(uint(cbSceneParam._m0[85u].y * _592) / _1829))) + floor(float(uint(cbSceneParam._m0[85u].x * _591) / _1829)));
        float _1850 = (log2(_1816 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1851 = isnan(0.0) ? _1850 : (isnan(_1850) ? 0.0 : max(_1850, 0.0));
        uint _1854 = uint(isnan(14.0) ? _1851 : (isnan(_1851) ? 14.0 : min(_1851, 14.0)));
        uvec4 _1859 = texelFetch(g_lightClusterGridBuffer, int(((_1854 << 2u) + (_1840 << 6u)) >> 2u));
        uint _1860 = _1859.x;
        uint _1861 = _1828.z;
        float _1951;
        float _1953;
        float _1955;
        float _1957;
        float _1959;
        float _1961;
        if (((((1u << ((_1861 >> 4u) & 15u)) + 4294967295u) & _1860) == 0u) || ((_1861 & 240u) == 0u))
        {
            _1951 = 0.0;
            _1953 = 0.0;
            _1955 = 0.0;
            _1957 = 0.0;
            _1959 = 0.0;
            _1961 = 0.0;
        }
        else
        {
            float _1952;
            float _1954;
            float _1956;
            float _1958;
            float _1960;
            float _1962;
            float _2134 = 0.0;
            float _2135 = 0.0;
            float _2136 = 0.0;
            float _2137 = 0.0;
            float _2138 = 0.0;
            float _2139 = 0.0;
            uint _2140 = 0u;
            uint _2149;
            bool _2150;
            for (;;)
            {
                _2149 = texelFetch(g_lightClassification, int((((_1854 << 5u) + (_1840 << 9u)) + (_2140 << 2u)) >> 2u)).x;
                _2150 = _2149 == 0u;
                float frontier_phi_79_pred;
                float frontier_phi_79_pred_1;
                float frontier_phi_79_pred_2;
                float frontier_phi_79_pred_3;
                float frontier_phi_79_pred_4;
                float frontier_phi_79_pred_5;
                if (_2150)
                {
                    frontier_phi_79_pred = _2139;
                    frontier_phi_79_pred_1 = _2138;
                    frontier_phi_79_pred_2 = _2137;
                    frontier_phi_79_pred_3 = _2136;
                    frontier_phi_79_pred_4 = _2135;
                    frontier_phi_79_pred_5 = _2134;
                }
                else
                {
                    float _2330;
                    float _2331;
                    float _2332;
                    float _2333;
                    float _2334;
                    float _2335;
                    uint _2336;
                    _2330 = _2134;
                    _2331 = _2135;
                    _2332 = _2136;
                    _2333 = _2137;
                    _2334 = _2138;
                    _2335 = _2139;
                    _2336 = _2149;
                    float _2231;
                    float _2232;
                    float _2233;
                    float _2234;
                    float _2235;
                    float _2236;
                    for (;;)
                    {
                        uint _2340 = uint(findLSB(_2336)) + (_2140 << 5u);
                        uint _2337 = (_2336 + 4294967295u) & _2336;
                        uint _2342 = _2340 * 48u;
                        vec4 _2356 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2342)).x, texelFetch(g_PointLightRenderingBuffer, int(_2342 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2342 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2342 + 3u)).x));
                        uint _2362 = (_2340 * 48u) + 4u;
                        vec4 _2375 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2362)).x, texelFetch(g_PointLightRenderingBuffer, int(_2362 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2362 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2362 + 3u)).x));
                        uint _2381 = (_2340 * 48u) + 8u;
                        vec3 _2392 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2381)).x, texelFetch(g_PointLightRenderingBuffer, int(_2381 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2381 + 2u)).x));
                        float _2396 = _2356.x - _1814;
                        float _2397 = _2356.y - _1815;
                        float _2398 = _2356.z - _1816;
                        float _2399 = dot(vec3(_2396, _2397, _2398), vec3(_2396, _2397, _2398));
                        float _2402 = inversesqrt(_2399);
                        float _2411 = 1.0 - (_2399 * _2356.w);
                        float _3524 = isnan(0.0) ? _2411 : (isnan(_2411) ? 0.0 : max(_2411, 0.0));
                        float _2412 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
                        float _2413 = sqrt(_2399) * _2375.w;
                        float _2416 = 1.39999997615814208984375 / (_2413 + 1.39999997615814208984375);
                        float _2417 = _2416 * _2416;
                        float _2420 = ((1.0 - _2417) * dot(vec3(0.0), vec3(_2402 * _2396, _2402 * _2397, _2402 * _2398))) + _2417;
                        float _2423 = _2413 * _2413;
                        float _2427 = ((isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0))) * _2412) / ((_2423 * 0.699999988079071044921875) + 1.0);
                        float _2431 = (-0.0) - _1814;
                        float _2432 = (-0.0) - _1815;
                        float _2433 = (-0.0) - _1816;
                        float _2437 = inversesqrt(dot(vec3(_2431, _2432, _2433), vec3(_2431, _2432, _2433)));
                        float _2441 = dot(vec3(0.0), vec3(_2437 * _2431, _2437 * _2432, _2437 * _2433));
                        float _3540 = isnan(0.0) ? _2441 : (isnan(_2441) ? 0.0 : max(_2441, 0.0));
                        float _3551 = isnan(0.0) ? _2420 : (isnan(_2420) ? 0.0 : max(_2420, 0.0));
                        float _2445 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
                        float _2449 = (0.5 / (((isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0))) + 9.9999999392252902907785028219223e-09) + _2445)) * _2445;
                        float _3562 = isnan(0.0) ? _2449 : (isnan(_2449) ? 0.0 : max(_2449, 0.0));
                        float _2458 = (((isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0))) * 3.1415927410125732421875) / ((_2423 * 2.1991131305694580078125) + 3.141590118408203125)) * _2412;
                        _2234 = (_2427 * _2375.x) + _2333;
                        _2235 = (_2427 * _2375.y) + _2334;
                        _2236 = (_2427 * _2375.z) + _2335;
                        _2231 = (_2458 * _2392.x) + _2330;
                        _2232 = (_2458 * _2392.y) + _2331;
                        _2233 = (_2458 * _2392.z) + _2332;
                        if (_2337 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2330 = _2231;
                            _2331 = _2232;
                            _2332 = _2233;
                            _2333 = _2234;
                            _2334 = _2235;
                            _2335 = _2236;
                            _2336 = _2337;
                        }
                    }
                    frontier_phi_79_pred = _2236;
                    frontier_phi_79_pred_1 = _2235;
                    frontier_phi_79_pred_2 = _2234;
                    frontier_phi_79_pred_3 = _2233;
                    frontier_phi_79_pred_4 = _2232;
                    frontier_phi_79_pred_5 = _2231;
                }
                _1962 = frontier_phi_79_pred;
                _1960 = frontier_phi_79_pred_1;
                _1958 = frontier_phi_79_pred_2;
                _1956 = frontier_phi_79_pred_3;
                _1954 = frontier_phi_79_pred_4;
                _1952 = frontier_phi_79_pred_5;
                uint _2141 = _2140 + 1u;
                if (_2141 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2134 = _1952;
                    _2135 = _1954;
                    _2136 = _1956;
                    _2137 = _1958;
                    _2138 = _1960;
                    _2139 = _1962;
                    _2140 = _2141;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1951 = _1952;
            _1953 = _1954;
            _1955 = _1956;
            _1957 = _1958;
            _1959 = _1960;
            _1961 = _1962;
        }
        uvec4 _1965 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1966 = _1965.z;
        uint _1968 = (_1966 >> 8u) & 15u;
        float _2105;
        float _2107;
        float _2109;
        float _2111;
        float _2113;
        float _2115;
        if (((4294967295u << _1968) & _1860) == 0u)
        {
            _2105 = _1951;
            _2107 = _1953;
            _2109 = _1955;
            _2111 = _1957;
            _2113 = _1959;
            _2115 = _1961;
        }
        else
        {
            float _2130 = inversesqrt(dot(vec3(_1814, _1815, _1816), vec3(_1814, _1815, _1816)));
            float frontier_phi_68_69_ladder;
            float frontier_phi_68_69_ladder_1;
            float frontier_phi_68_69_ladder_2;
            float frontier_phi_68_69_ladder_3;
            float frontier_phi_68_69_ladder_4;
            float frontier_phi_68_69_ladder_5;
            if (_1968 < ((_1966 >> 12u) & 15u))
            {
                float _2106;
                float _2108;
                float _2110;
                float _2112;
                float _2114;
                float _2116;
                float _2313 = _1951;
                float _2314 = _1953;
                float _2315 = _1955;
                float _2316 = _1957;
                float _2317 = _1959;
                float _2318 = _1961;
                uint _2319 = _1968;
                uint _2328;
                bool _2329;
                for (;;)
                {
                    _2328 = texelFetch(g_lightClassification, int((((_1854 << 5u) + (_1840 << 9u)) + (_2319 << 2u)) >> 2u)).x;
                    _2329 = _2328 == 0u;
                    float frontier_phi_93_pred;
                    float frontier_phi_93_pred_1;
                    float frontier_phi_93_pred_2;
                    float frontier_phi_93_pred_3;
                    float frontier_phi_93_pred_4;
                    float frontier_phi_93_pred_5;
                    if (_2329)
                    {
                        frontier_phi_93_pred = _2317;
                        frontier_phi_93_pred_1 = _2316;
                        frontier_phi_93_pred_2 = _2315;
                        frontier_phi_93_pred_3 = _2314;
                        frontier_phi_93_pred_4 = _2313;
                        frontier_phi_93_pred_5 = _2318;
                    }
                    else
                    {
                        float _2493;
                        float _2494;
                        float _2495;
                        float _2496;
                        float _2497;
                        float _2498;
                        float _2742;
                        float _2743;
                        float _2744;
                        float _2745;
                        float _2746;
                        float _2747;
                        float _2506 = _2313;
                        float _2507 = _2314;
                        float _2508 = _2315;
                        float _2509 = _2316;
                        float _2510 = _2317;
                        float _2511 = _2318;
                        uint _2512 = _2328;
                        uint _2513;
                        vec4 _2538;
                        float _2539;
                        vec4 _2554;
                        vec3 _2566;
                        vec4 _2581;
                        vec4 _2596;
                        float _2642;
                        bool _2643;
                        for (;;)
                        {
                            uint _2523 = ((_2319 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2512));
                            _2513 = (_2512 + 4294967295u) & _2512;
                            uint _2525 = _2523 * 40u;
                            _2538 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2525)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2525 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2525 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2525 + 3u)).x));
                            _2539 = _2538.w;
                            uint _2541 = (_2523 * 40u) + 4u;
                            _2554 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2541)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2541 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2541 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2541 + 3u)).x));
                            uint _2556 = (_2523 * 40u) + 8u;
                            _2566 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2556)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2556 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2556 + 2u)).x));
                            uint _2568 = (_2523 * 40u) + 16u;
                            _2581 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2568)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2568 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2568 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2568 + 3u)).x));
                            uint _2583 = (_2523 * 40u) + 20u;
                            _2596 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2583)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2583 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2583 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2583 + 3u)).x));
                            uint _2598 = (_2523 * 40u) + 24u;
                            vec4 _2611 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2598)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2598 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2598 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2598 + 3u)).x));
                            uint _2617 = (_2523 * 40u) + 28u;
                            vec4 _2630 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2617)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2617 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2617 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2617 + 3u)).x));
                            _2642 = fma(_1816, _2630.z, fma(_1815, _2630.y, _2630.x * _1814)) + _2630.w;
                            _2643 = !((fma(_1816, _2611.z, fma(_1815, _2611.y, _2611.x * _1814)) + _2611.w) <= 0.0);
                            float frontier_phi_99_pred;
                            float frontier_phi_99_pred_1;
                            float frontier_phi_99_pred_2;
                            float frontier_phi_99_pred_3;
                            float frontier_phi_99_pred_4;
                            float frontier_phi_99_pred_5;
                            if (_2643)
                            {
                                float _2670 = _2538.x - _1814;
                                float _2671 = _2538.y - _1815;
                                float _2672 = _2538.z - _1816;
                                float _2673 = dot(vec3(_2670, _2671, _2672), vec3(_2670, _2671, _2672));
                                float _2676 = inversesqrt(_2673);
                                float _2677 = _2676 * _2670;
                                float _2678 = _2676 * _2671;
                                float _2679 = _2676 * _2672;
                                float _2683 = 1.0 - (_2673 / (_2539 * _2539));
                                float _3573 = isnan(0.0) ? _2683 : (isnan(_2683) ? 0.0 : max(_2683, 0.0));
                                float _2684 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
                                float _2688 = sqrt(_2673) * _2554.w;
                                float _2690 = 1.39999997615814208984375 / (_2688 + 1.39999997615814208984375);
                                float _2691 = _2690 * _2690;
                                float _2692 = 1.0 - _2691;
                                float _2694 = (_2692 * dot(vec3(_2677, _2678, _2679), vec3(0.0))) + _2691;
                                float _2697 = _2688 * _2688;
                                float _2701 = (fma(_1816, _2581.z, fma(_1815, _2581.y, _2581.x * _1814)) + _2581.w) / _2642;
                                float _2702 = (fma(_1816, _2596.z, fma(_1815, _2596.y, _2596.x * _1814)) + _2596.w) / _2642;
                                float _2706 = 1.0 - dot(vec2(_2701, _2702), vec2(_2701, _2702));
                                float _3589 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
                                float _2707 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
                                float _2708 = _2707 * (((isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0))) * _2684) / ((_2697 * 0.699999988079071044921875) + 1.0));
                                float _2718 = dot(vec3(0.0), vec3((-0.0) - (_1814 * _2130), (-0.0) - (_1815 * _2130), (-0.0) - (_1816 * _2130)));
                                float _3600 = isnan(0.0) ? _2718 : (isnan(_2718) ? 0.0 : max(_2718, 0.0));
                                float _2726 = (_2692 * dot(vec3(0.0), vec3(_2677, _2678, _2679))) + _2691;
                                float _3611 = isnan(0.0) ? _2726 : (isnan(_2726) ? 0.0 : max(_2726, 0.0));
                                float _2727 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
                                float _2731 = (0.5 / (((isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0))) + 9.9999999392252902907785028219223e-09) + _2727)) * _2727;
                                float _3622 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
                                float _2738 = (_2707 * _2684) * (((isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0))) * 3.1415927410125732421875) / ((_2697 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_99_pred = _2708 * _2554.z;
                                frontier_phi_99_pred_1 = _2708 * _2554.y;
                                frontier_phi_99_pred_2 = _2708 * _2554.x;
                                frontier_phi_99_pred_3 = _2738 * _2566.z;
                                frontier_phi_99_pred_4 = _2738 * _2566.y;
                                frontier_phi_99_pred_5 = _2738 * _2566.x;
                            }
                            else
                            {
                                frontier_phi_99_pred = 0.0;
                                frontier_phi_99_pred_1 = 0.0;
                                frontier_phi_99_pred_2 = 0.0;
                                frontier_phi_99_pred_3 = 0.0;
                                frontier_phi_99_pred_4 = 0.0;
                                frontier_phi_99_pred_5 = 0.0;
                            }
                            _2747 = frontier_phi_99_pred;
                            _2746 = frontier_phi_99_pred_1;
                            _2745 = frontier_phi_99_pred_2;
                            _2744 = frontier_phi_99_pred_3;
                            _2743 = frontier_phi_99_pred_4;
                            _2742 = frontier_phi_99_pred_5;
                            _2496 = _2745 + _2509;
                            _2497 = _2746 + _2510;
                            _2498 = _2747 + _2511;
                            _2493 = _2742 + _2506;
                            _2494 = _2743 + _2507;
                            _2495 = _2744 + _2508;
                            if (_2513 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2506 = _2493;
                                _2507 = _2494;
                                _2508 = _2495;
                                _2509 = _2496;
                                _2510 = _2497;
                                _2511 = _2498;
                                _2512 = _2513;
                                continue;
                            }
                        }
                        frontier_phi_93_pred = _2497;
                        frontier_phi_93_pred_1 = _2496;
                        frontier_phi_93_pred_2 = _2495;
                        frontier_phi_93_pred_3 = _2494;
                        frontier_phi_93_pred_4 = _2493;
                        frontier_phi_93_pred_5 = _2498;
                    }
                    _2114 = frontier_phi_93_pred;
                    _2112 = frontier_phi_93_pred_1;
                    _2110 = frontier_phi_93_pred_2;
                    _2108 = frontier_phi_93_pred_3;
                    _2106 = frontier_phi_93_pred_4;
                    _2116 = frontier_phi_93_pred_5;
                    uint _2320 = _2319 + 1u;
                    if (_2320 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2313 = _2106;
                        _2314 = _2108;
                        _2315 = _2110;
                        _2316 = _2112;
                        _2317 = _2114;
                        _2318 = _2116;
                        _2319 = _2320;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_68_69_ladder = _2116;
                frontier_phi_68_69_ladder_1 = _2114;
                frontier_phi_68_69_ladder_2 = _2112;
                frontier_phi_68_69_ladder_3 = _2110;
                frontier_phi_68_69_ladder_4 = _2106;
                frontier_phi_68_69_ladder_5 = _2108;
            }
            else
            {
                frontier_phi_68_69_ladder = _1961;
                frontier_phi_68_69_ladder_1 = _1959;
                frontier_phi_68_69_ladder_2 = _1957;
                frontier_phi_68_69_ladder_3 = _1955;
                frontier_phi_68_69_ladder_4 = _1951;
                frontier_phi_68_69_ladder_5 = _1953;
            }
            _2105 = frontier_phi_68_69_ladder_4;
            _2107 = frontier_phi_68_69_ladder_5;
            _2109 = frontier_phi_68_69_ladder_3;
            _2111 = frontier_phi_68_69_ladder_2;
            _2113 = frontier_phi_68_69_ladder_1;
            _2115 = frontier_phi_68_69_ladder;
        }
        float _2120 = isnan(1.0) ? _631 : (isnan(_631) ? 1.0 : min(_631, 1.0));
        _1873 = (_2120 * _2111) + _1653;
        _1875 = (_2120 * _2113) + _1654;
        _1877 = (_2120 * _2115) + _1655;
        _1879 = ((_2105 * 0.039999999105930328369140625) * _2120) + _1755;
        _1881 = ((_2107 * 0.039999999105930328369140625) * _2120) + _1756;
        _1883 = ((_2109 * 0.039999999105930328369140625) * _2120) + _1757;
    }
    else
    {
        _1873 = _1653;
        _1875 = _1654;
        _1877 = _1655;
        _1879 = _1755;
        _1881 = _1756;
        _1883 = _1757;
    }
    float _3638 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _3649 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _3660 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _1900 = ((isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0))) * (_1873 + ((isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0))) * _631))) + ((_1879 + ((isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0))) * _1365)) * cbPerFrame._m0[3u].x);
    float _1901 = ((isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0))) * (_1875 + ((isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0))) * _631))) + ((_1881 + ((isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0))) * _1365)) * cbPerFrame._m0[3u].x);
    float _1902 = ((isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0))) * (_1877 + ((isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0))) * _631))) + ((_1883 + ((isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0))) * _1365)) * cbPerFrame._m0[3u].x);
    float _1903 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
    float _1904 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1905 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
    uint _1906 = _605 + 6u;
    float _1914 = _591 / cbSceneParam._m0[86u].x;
    float _1915 = _592 / cbSceneParam._m0[86u].y;
    vec4 _1929 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1914, _1915, (log2((isnan(cbSceneParam._m0[77u].w) ? _565 : (isnan(_565) ? cbSceneParam._m0[77u].w : min(_565, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1931 = _1929.x;
    float _1932 = _1929.y;
    float _1933 = _1929.z;
    float _1934 = _1929.w;
    float _2014;
    float _2016;
    float _2018;
    float _2020;
    if (_565 > cbSceneParam._m0[78u].w)
    {
        float _1976 = isnan(_565) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _565 : min(cbSceneParam._m0[80u].w, _565));
        float _1977 = _1976 / _565;
        float _1988 = _1977 * _263;
        float _1989 = _264 * _1977;
        float _1990 = (-0.0) - _1989;
        float _1991 = _1977 * _265;
        float _1993 = (cbSceneParam._m0[77u].w * _1990) / _1976;
        float _1994 = _1993 + cbSceneParam._m0[79u].w;
        float _1995 = cbSceneParam._m0[79u].w - _1989;
        float _2001 = sqrt(((_1988 * _1988) + (_1989 * _1989)) + (_1991 * _1991));
        float _2004 = (1.0 - (cbSceneParam._m0[77u].w / _1976)) * _2001;
        float _2010 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2012 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2244;
        if (abs((_1990 - _1993) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2244 = ((((_1994 > 0.0) ? exp2(_2010 * _1994) : (2.0 - exp2(_2012 * _1994))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2004;
        }
        else
        {
            float _2163 = 1.0 / cbSceneParam._m0[80u].x;
            float _2164 = isnan(_1995) ? _1994 : (isnan(_1994) ? _1995 : max(_1994, _1995));
            float _2165 = isnan(_1995) ? _1994 : (isnan(_1994) ? _1995 : min(_1994, _1995));
            float _2174 = isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : min(_2164, 0.0));
            float _2175 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : min(_2165, 0.0));
            _2244 = ((abs(_2001 / _1990) * cbSceneParam._m0[80u].y) * ((((_2174 - _2175) * 2.0) - ((exp2(_2010 * (isnan(0.0) ? _2164 : (isnan(_2164) ? 0.0 : max(_2164, 0.0)))) - exp2(_2010 * (isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0))))) * _2163)) - ((exp2(_2012 * _2174) - exp2(_2012 * _2175)) * _2163))) + (_2004 * cbSceneParam._m0[80u].z);
        }
        vec4 _2246 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1914, _1915, 1.0), 0.0);
        float _2255 = exp2((_2244 * (-1.44269502162933349609375)) * (1.0 - _2246.w));
        float _2256 = log2(_2255);
        float _2272 = log2(_1934);
        _2014 = (exp2(_2272 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2256 * cbSceneParam._m0[78u].x)) * _2246.x) / cbSceneParam._m0[78u].x)) + _1931;
        _2016 = (exp2(_2272 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2256 * cbSceneParam._m0[78u].y)) * _2246.y) / cbSceneParam._m0[78u].y)) + _1932;
        _2018 = (exp2(_2272 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2256 * cbSceneParam._m0[78u].z)) * _2246.z) / cbSceneParam._m0[78u].z)) + _1933;
        _2020 = _2255 * _1934;
    }
    else
    {
        _2014 = _1931;
        _2016 = _1932;
        _2018 = _1933;
        _2020 = _1934;
    }
    bool _2282;
    vec4 _2030;
    vec4 _2053;
    float _2055;
    float _2059;
    float _2060;
    float _2061;
    float _2062;
    bool _2073;
    for (;;)
    {
        _2030 = cbMatDynParam._m0[0u];
        float _2032 = roundEven(_2030.y);
        bool _2033 = _2032 == 3.0;
        float _2035 = log2(_2020);
        float _2042 = exp2(_2035 * cbSceneParam._m0[78u].x) * _1903;
        float _2043 = exp2(_2035 * cbSceneParam._m0[78u].y) * _1904;
        float _2044 = exp2(_2035 * cbSceneParam._m0[78u].z) * _1905;
        float _2051 = _579 + (-0.5);
        _2053 = cbMtdParam._m0[1u];
        _2055 = _2053.y * _2051;
        float _2058 = (_2032 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2059 = _2058 * (_2033 ? _2042 : (_2042 + (cbSceneParam._m0[72u].w * _2014)));
        _2060 = _2058 * (_2033 ? _2043 : (_2043 + (cbSceneParam._m0[72u].w * _2016)));
        _2061 = _2058 * (_2033 ? _2044 : (_2044 + (cbSceneParam._m0[72u].w * _2018)));
        _2062 = _2051 * 0.999000012874603271484375;
        _2073 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2073)
        {
            if ((cbInstanceData._m0[_605 + 7u].x + _2062) < 0.5)
            {
                _2282 = true;
                break;
            }
        }
        uint _2198 = _607 + uint(_2030.w);
        if ((cbInstanceData._m0[_2198].w < 1.0) && ((cbInstanceData._m0[_2198].w + _2062) < 0.5))
        {
            _2282 = true;
            break;
        }
        if ((_2055 + 1.0) < _2053.x)
        {
            _2282 = true;
            break;
        }
        _2282 = false;
        break;
    }
    float _2463;
    if (_2282)
    {
        discard_state = true;
        _2463 = 0.0;
    }
    else
    {
        _2463 = cbInstanceData._m0[_1906].w;
    }
    SV_Target.x = _2059;
    SV_Target.y = _2060;
    SV_Target.z = _2061;
    SV_Target.w = _2463;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1906].w;
    discard_exit();
}


