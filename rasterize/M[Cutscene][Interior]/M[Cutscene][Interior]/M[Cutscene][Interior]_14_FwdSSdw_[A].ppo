#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1044;
float _3182;
float _3183;
float _3184;
float _3185;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _196 = _195 * _188;
    float _197 = _195 * _189;
    float _198 = _195 * _190;
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210 = _209 * TANGENT.x;
    float _211 = _209 * TANGENT.y;
    float _212 = _209 * TANGENT.z;
    float _257 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _267 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _257);
    float _268 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _257);
    float _269 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _257);
    vec4 _282 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _285 = _282.x;
    vec4 _303 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _320 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _285) + cbMtdParam._m0[12u].x) * _303.x;
    float _322 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _285) + cbMtdParam._m0[12u].y) * _303.y;
    float _324 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _285) + cbMtdParam._m0[12u].z) * _303.z;
    vec4 _342 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _378 = cbMtdParam._m0[24u].x + _267;
    float _379 = cbMtdParam._m0[24u].y + _268;
    float _380 = cbMtdParam._m0[24u].z + _269;
    float _394 = (-0.0) - dot(vec3(_378, _379, _380), vec3(_196, _197, _198));
    float _395 = (-0.0) - dot(vec3(_378, _379, _380), vec3(_210, _211, _212));
    float _396 = (-0.0) - dot(vec3(_378, _379, _380), vec3((-0.0) - _203, (-0.0) - _204, (-0.0) - _205));
    float _400 = inversesqrt(dot(vec3(_394, _395, _396), vec3(_394, _395, _396)));
    float _403 = _400 * _396;
    float _406 = ((_400 * _394) + ((cbMtdParam._m0[22u].x * _285) * ((_342.x * 2.0) + (-1.0)))) * cbMtdParam._m0[20u].w;
    float _407 = ((_400 * _395) + ((cbMtdParam._m0[22u].y * _285) * ((_342.y * 2.0) + (-1.0)))) * cbMtdParam._m0[20u].z;
    float _408 = fract(TEXCOORD.x);
    float _409 = fract(TEXCOORD.y);
    float _415;
    if (_406 > 0.0)
    {
        _415 = (1.0 - _408) / _406;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_406 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _408) / _406;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _415 = frontier_phi_3_2_ladder;
    }
    float _423;
    if (_407 > 0.0)
    {
        _423 = (1.0 - _409) / _407;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_407 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _409) / _407;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _423 = frontier_phi_7_6_ladder;
    }
    float _427 = (_403 > 0.0) ? (cbMtdParam._m0[16u].x / _403) : 5000.0;
    float _428 = isnan(_423) ? _415 : (isnan(_415) ? _423 : min(_415, _423));
    float _429 = isnan(_427) ? _428 : (isnan(_428) ? _427 : min(_428, _427));
    float _433 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _440 = ((_429 * _403) + _433) / _433;
    vec4 _465 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * ((((((_408 + (-0.5)) + (_429 * _406)) / _440) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * ((((((_409 + (-0.5)) + (_429 * _407)) / _440) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    float _481 = _285 * 0.1500000059604644775390625;
    float _489 = (_481 * (((_465.x * _285) * cbMtdParam._m0[9u].x) - _320)) + _320;
    float _490 = (_481 * (((_465.y * _285) * cbMtdParam._m0[9u].y) - _322)) + _322;
    float _491 = (_481 * (((_465.z * _285) * cbMtdParam._m0[9u].z) - _324)) + _324;
    vec4 _504 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _508 = _504.z;
    float _511 = (_504.x * 2.0) + (-1.0);
    float _512 = (_504.y * 2.0) + (-1.0);
    float _513 = dot(vec2(_511, _512), vec2(_511, _512));
    float _3204 = isnan(0.0) ? _513 : (isnan(_513) ? 0.0 : max(_513, 0.0));
    float _518 = sqrt(1.0 - (isnan(1.0) ? _3204 : (isnan(_3204) ? 1.0 : min(_3204, 1.0))));
    float _521 = fma(_518, _203, fma(_512, _210, _511 * _196));
    float _524 = fma(_518, _204, fma(_512, _211, _511 * _197));
    float _527 = fma(_518, _205, fma(_512, _212, _511 * _198));
    float _531 = inversesqrt(dot(vec3(_521, _524, _527), vec3(_521, _524, _527)));
    float _532 = _531 * _521;
    float _533 = _531 * _524;
    float _534 = _531 * _527;
    float _3215 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _535 = isnan(1.0) ? _3215 : (isnan(_3215) ? 1.0 : min(_3215, 1.0));
    float _3226 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _3237 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _3248 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _554 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _558 = inversesqrt(dot(vec3(_267, _268, _269), vec3(_267, _268, _269)));
    float _559 = _267 * _558;
    float _560 = _268 * _558;
    float _561 = _269 * _558;
    vec4 _566 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _568 = _566.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _725 = sqrt(((_267 * _267) + (_268 * _268)) + (_269 * _269));
        float _731 = (cbMatDynParam._m0[5u].x * _725) + cbMatDynParam._m0[5u].y;
        float _3259 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
        float _732 = isnan(1.0) ? _3259 : (isnan(_3259) ? 1.0 : min(_3259, 1.0));
        float _736 = (cbMatDynParam._m0[5u].z * _725) + cbMatDynParam._m0[5u].w;
        float _3270 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3270 : (isnan(_3270) ? 1.0 : min(_3270, 1.0))) - _732)) + _732) < ((_568 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _580 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _581 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _600 = fma(_534, cbSceneParam._m0[5u].z, fma(_533, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _532));
    float _603 = fma(_534, cbSceneParam._m0[6u].z, fma(_533, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _532));
    float _606 = fma(_534, cbSceneParam._m0[7u].z, fma(_533, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _532));
    uint _619 = uint(roundEven(NORMAL.w)) * 13u;
    uint _621 = _619 + 9u;
    uint _622 = _621 + uint(cbMatDynParam._m0[0u].w);
    float _628 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3226 : (isnan(_3226) ? 1.0 : min(_3226, 1.0)))) * cbInstanceData._m0[_622].x;
    float _629 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3237 : (isnan(_3237) ? 1.0 : min(_3237, 1.0)))) * cbInstanceData._m0[_622].y;
    float _630 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3248 : (isnan(_3248) ? 1.0 : min(_3248, 1.0)))) * cbInstanceData._m0[_622].z;
    float _3281 = isnan(0.0) ? _628 : (isnan(_628) ? 0.0 : max(_628, 0.0));
    float _631 = isnan(1.0) ? _3281 : (isnan(_3281) ? 1.0 : min(_3281, 1.0));
    float _3292 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _632 = isnan(1.0) ? _3292 : (isnan(_3292) ? 1.0 : min(_3292, 1.0));
    float _3303 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _633 = isnan(1.0) ? _3303 : (isnan(_3303) ? 1.0 : min(_3303, 1.0));
    vec4 _642 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _580, cbSceneParam._m0[86u].y * _581));
    float _645 = _642.x * TEXCOORD_4.z;
    float _646 = dot(vec3(_532, _533, _534), vec3(_559, _560, _561));
    float _649 = _646 * 2.0;
    float _653 = (_649 * _532) - _559;
    float _654 = (_649 * _533) - _560;
    float _655 = (_649 * _534) - _561;
    float _659 = abs(dot(vec3(_559, _560, _561), vec3(_532, _533, _534)));
    float _3314 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
    float _661 = sqrt(_535);
    float _674 = exp2((_661 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3314 : (isnan(_3314) ? 1.0 : min(_3314, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_661 * 3.0));
    float _706 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _710 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _714 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1043;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _770 = fma(_714, cbModelParam._m0[26u].z, fma(_710, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _706));
        float _774 = fma(_714, cbModelParam._m0[27u].z, fma(_710, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _706));
        float _778 = fma(_714, cbModelParam._m0[28u].z, fma(_710, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _706));
        float _801 = _706 + _532;
        float _802 = _710 + _533;
        float _803 = _714 + _534;
        float _813 = fma(_803, cbModelParam._m0[26u].z, fma(_802, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _801)) - _770;
        float _814 = fma(_803, cbModelParam._m0[27u].z, fma(_802, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _801)) - _774;
        float _815 = fma(_803, cbModelParam._m0[28u].z, fma(_802, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _801)) - _778;
        float _819 = inversesqrt(dot(vec3(_813, _814, _815), vec3(_813, _814, _815)));
        float _832 = ((_819 * _813) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_770 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _833 = ((_819 * _814) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_774 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _834 = ((_819 * _815) / cbModelParam._m0[34u].z) + ((((((_778 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _837 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_832, _833, _834), 0.0);
        vec4 _844 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_832, _833, _834), 0.0);
        vec4 _851 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_832, _833, _834), 0.0);
        vec4 _858 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_832, _833, _834), 0.0);
        float _871 = exp2((_837.w + (-0.5)) * 20.0) * 2.0;
        float _872 = _871 * (_837.x + (-0.5));
        float _873 = _871 * (_837.y + (-0.5));
        float _874 = _871 * (_837.z + (-0.5));
        float _881 = exp2((_844.w + (-0.5)) * 20.0) * 2.0;
        float _882 = _881 * (_844.x + (-0.5));
        float _883 = _881 * (_844.y + (-0.5));
        float _884 = _881 * (_844.z + (-0.5));
        float _891 = exp2((_851.w + (-0.5)) * 20.0) * 2.0;
        float _892 = _891 * (_851.x + (-0.5));
        float _893 = _891 * (_851.y + (-0.5));
        float _894 = _891 * (_851.z + (-0.5));
        float _901 = exp2((_858.w + (-0.5)) * 20.0) * 2.0;
        float _902 = _901 * (_858.x + (-0.5));
        float _903 = _901 * (_858.y + (-0.5));
        float _904 = _901 * (_858.z + (-0.5));
        float _905 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _906 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
        float _907 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _908 = _872 * 0.5;
        float _909 = _882 * 0.5;
        float _910 = _892 * 0.5;
        float _911 = dot(vec3(_908, _909, _910), vec3(_908, _909, _910));
        float _916 = (_911 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_911);
        float _925 = (dot(vec3(_532, _533, _534), vec3(_916 * _908, _916 * _909, _916 * _910)) + 1.0) * 0.5;
        float _3340 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _935 = sqrt(((_909 * _909) + (_908 * _908)) + (_910 * _910)) / (_905 + 9.9999997473787516355514526367188e-06);
        float _3351 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        float _936 = isnan(1.0) ? _3351 : (isnan(_3351) ? 1.0 : min(_3351, 1.0));
        float _937 = _936 * 2.0;
        float _941 = (1.0 - _936) / (_936 + 1.0);
        float _3362 = isnan(0.0) ? _941 : (isnan(_941) ? 0.0 : max(_941, 0.0));
        float _942 = isnan(1.0) ? _3362 : (isnan(_3362) ? 1.0 : min(_3362, 1.0));
        float _951 = ((((1.0 - _942) * (_937 + 2.0)) * exp2(log2(isnan(1.0) ? _3340 : (isnan(_3340) ? 1.0 : min(_3340, 1.0))) * (_937 + 1.0))) + _942) * _905;
        float _952 = _873 * 0.5;
        float _953 = _883 * 0.5;
        float _954 = _893 * 0.5;
        float _955 = dot(vec3(_952, _953, _954), vec3(_952, _953, _954));
        float _960 = (_955 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_955);
        float _968 = (dot(vec3(_532, _533, _534), vec3(_960 * _952, _960 * _953, _960 * _954)) + 1.0) * 0.5;
        float _3373 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _977 = sqrt(((_953 * _953) + (_952 * _952)) + (_954 * _954)) / (_906 + 9.9999997473787516355514526367188e-06);
        float _3384 = isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0));
        float _978 = isnan(1.0) ? _3384 : (isnan(_3384) ? 1.0 : min(_3384, 1.0));
        float _979 = _978 * 2.0;
        float _983 = (1.0 - _978) / (_978 + 1.0);
        float _3395 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _984 = isnan(1.0) ? _3395 : (isnan(_3395) ? 1.0 : min(_3395, 1.0));
        float _993 = ((((1.0 - _984) * (_979 + 2.0)) * exp2(log2(isnan(1.0) ? _3373 : (isnan(_3373) ? 1.0 : min(_3373, 1.0))) * (_979 + 1.0))) + _984) * _906;
        float _994 = _874 * 0.5;
        float _995 = _884 * 0.5;
        float _996 = _894 * 0.5;
        float _997 = dot(vec3(_994, _995, _996), vec3(_994, _995, _996));
        float _1002 = (_997 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_997);
        float _1010 = (dot(vec3(_532, _533, _534), vec3(_1002 * _994, _1002 * _995, _1002 * _996)) + 1.0) * 0.5;
        float _3406 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1019 = sqrt(((_995 * _995) + (_994 * _994)) + (_996 * _996)) / (_907 + 9.9999997473787516355514526367188e-06);
        float _3417 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1020 = isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0));
        float _1021 = _1020 * 2.0;
        float _1025 = (1.0 - _1020) / (_1020 + 1.0);
        float _3428 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0));
        float _1035 = ((((1.0 - _1026) * (_1021 + 2.0)) * exp2(log2(isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0))) * (_1021 + 1.0))) + _1026) * _907;
        _1043 = _874;
        _1045 = _873;
        _1046 = _872;
        _1047 = _884;
        _1048 = _883;
        _1049 = _882;
        _1050 = _894;
        _1051 = _893;
        _1052 = _892;
        _1053 = _907;
        _1054 = _906;
        _1055 = _905;
        _1056 = cbModelParam._m0[36u].z * (isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0)));
        _1057 = cbModelParam._m0[36u].z * (isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0)));
        _1058 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1035 : (isnan(_1035) ? 0.0 : max(_1035, 0.0)));
    }
    else
    {
        _1043 = _1044;
        _1045 = _1044;
        _1046 = _1044;
        _1047 = _1044;
        _1048 = _1044;
        _1049 = _1044;
        _1050 = _1044;
        _1051 = _1044;
        _1052 = _1044;
        _1053 = _1044;
        _1054 = _1044;
        _1055 = _1044;
        _1056 = 0.0;
        _1057 = 0.0;
        _1058 = 0.0;
    }
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1087 = fma(_714, cbModelParam._m0[30u].z, fma(_710, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _706));
        float _1091 = fma(_714, cbModelParam._m0[31u].z, fma(_710, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _706));
        float _1095 = fma(_714, cbModelParam._m0[32u].z, fma(_710, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _706));
        float _1118 = _706 + _532;
        float _1119 = _710 + _533;
        float _1120 = _714 + _534;
        float _1130 = fma(_1120, cbModelParam._m0[30u].z, fma(_1119, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1118)) - _1087;
        float _1131 = fma(_1120, cbModelParam._m0[31u].z, fma(_1119, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1118)) - _1091;
        float _1132 = fma(_1120, cbModelParam._m0[32u].z, fma(_1119, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1118)) - _1095;
        float _1136 = inversesqrt(dot(vec3(_1130, _1131, _1132), vec3(_1130, _1131, _1132)));
        float _1149 = ((_1136 * _1130) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1087 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1150 = ((_1136 * _1131) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1091 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1151 = ((_1136 * _1132) / cbModelParam._m0[35u].z) + ((((((_1095 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1153 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        vec4 _1160 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1149, _1150, _1151), 0.0);
        float _1186 = exp2((_1153.w + (-0.5)) * 20.0) * 2.0;
        float _1187 = _1186 * (_1153.x + (-0.5));
        float _1188 = _1186 * (_1153.y + (-0.5));
        float _1189 = _1186 * (_1153.z + (-0.5));
        float _1196 = exp2((_1160.w + (-0.5)) * 20.0) * 2.0;
        float _1197 = _1196 * (_1160.x + (-0.5));
        float _1198 = _1196 * (_1160.y + (-0.5));
        float _1199 = _1196 * (_1160.z + (-0.5));
        float _1206 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1207 = _1206 * (_1167.x + (-0.5));
        float _1208 = _1206 * (_1167.y + (-0.5));
        float _1209 = _1206 * (_1167.z + (-0.5));
        float _1216 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1217 = _1216 * (_1174.x + (-0.5));
        float _1218 = _1216 * (_1174.y + (-0.5));
        float _1219 = _1216 * (_1174.z + (-0.5));
        float _1220 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1221 = isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0));
        float _1222 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1223 = _1187 * 0.5;
        float _1224 = _1197 * 0.5;
        float _1225 = _1207 * 0.5;
        float _1226 = dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225));
        float _1231 = (_1226 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1226);
        float _1239 = (dot(vec3(_532, _533, _534), vec3(_1231 * _1223, _1231 * _1224, _1231 * _1225)) + 1.0) * 0.5;
        float _3469 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1248 = sqrt(((_1224 * _1224) + (_1223 * _1223)) + (_1225 * _1225)) / (_1220 + 9.9999997473787516355514526367188e-06);
        float _3480 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
        float _1250 = _1249 * 2.0;
        float _1254 = (1.0 - _1249) / (_1249 + 1.0);
        float _3491 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
        float _1264 = ((((1.0 - _1255) * (_1250 + 2.0)) * exp2(log2(isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0))) * (_1250 + 1.0))) + _1255) * _1220;
        float _1265 = _1188 * 0.5;
        float _1266 = _1198 * 0.5;
        float _1267 = _1208 * 0.5;
        float _1268 = dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267));
        float _1273 = (_1268 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1268);
        float _1281 = (dot(vec3(_532, _533, _534), vec3(_1273 * _1265, _1273 * _1266, _1273 * _1267)) + 1.0) * 0.5;
        float _3502 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1290 = sqrt(((_1266 * _1266) + (_1265 * _1265)) + (_1267 * _1267)) / (_1221 + 9.9999997473787516355514526367188e-06);
        float _3513 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0));
        float _1292 = _1291 * 2.0;
        float _1296 = (1.0 - _1291) / (_1291 + 1.0);
        float _3524 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _3524 : (isnan(_3524) ? 1.0 : min(_3524, 1.0));
        float _1306 = ((((1.0 - _1297) * (_1292 + 2.0)) * exp2(log2(isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0))) * (_1292 + 1.0))) + _1297) * _1221;
        float _1307 = _1189 * 0.5;
        float _1308 = _1199 * 0.5;
        float _1309 = _1209 * 0.5;
        float _1310 = dot(vec3(_1307, _1308, _1309), vec3(_1307, _1308, _1309));
        float _1315 = (_1310 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1310);
        float _1323 = (dot(vec3(_532, _533, _534), vec3(_1315 * _1307, _1315 * _1308, _1315 * _1309)) + 1.0) * 0.5;
        float _3535 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1332 = sqrt(((_1308 * _1308) + (_1307 * _1307)) + (_1309 * _1309)) / (_1222 + 9.9999997473787516355514526367188e-06);
        float _3546 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1333 = isnan(1.0) ? _3546 : (isnan(_3546) ? 1.0 : min(_3546, 1.0));
        float _1334 = _1333 * 2.0;
        float _1338 = (1.0 - _1333) / (_1333 + 1.0);
        float _3557 = isnan(0.0) ? _1338 : (isnan(_1338) ? 0.0 : max(_1338, 0.0));
        float _1339 = isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0));
        float _1348 = ((((1.0 - _1339) * (_1334 + 2.0)) * exp2(log2(isnan(1.0) ? _3535 : (isnan(_3535) ? 1.0 : min(_3535, 1.0))) * (_1334 + 1.0))) + _1339) * _1222;
        _1356 = _1189;
        _1357 = _1188;
        _1358 = _1187;
        _1359 = _1199;
        _1360 = _1198;
        _1361 = _1197;
        _1362 = _1209;
        _1363 = _1208;
        _1364 = _1207;
        _1365 = _1222;
        _1366 = _1221;
        _1367 = _1220;
        _1368 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)));
        _1369 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)));
        _1370 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0)));
    }
    else
    {
        _1356 = _1044;
        _1357 = _1044;
        _1358 = _1044;
        _1359 = _1044;
        _1360 = _1044;
        _1361 = _1044;
        _1362 = _1044;
        _1363 = _1044;
        _1364 = _1044;
        _1365 = _1044;
        _1366 = _1044;
        _1367 = _1044;
        _1368 = 0.0;
        _1369 = 0.0;
        _1370 = 0.0;
    }
    float _1380 = (cbModelParam._m0[1u].x * (_1368 - _1056)) + _1056;
    float _1381 = (cbModelParam._m0[1u].x * (_1369 - _1057)) + _1057;
    float _1382 = (cbModelParam._m0[1u].x * (_1370 - _1058)) + _1058;
    float _1403 = fma(_1382, cbSceneParam._m0[89u].z, fma(_1381, cbSceneParam._m0[89u].y, _1380 * cbSceneParam._m0[89u].x));
    float _1406 = fma(_1382, cbSceneParam._m0[90u].z, fma(_1381, cbSceneParam._m0[90u].y, _1380 * cbSceneParam._m0[90u].x));
    float _1409 = fma(_1382, cbSceneParam._m0[91u].z, fma(_1381, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1380));
    float _1424 = _653 * 0.5;
    float _1425 = _654 * 0.5;
    float _1426 = _655 * 0.5;
    float _1427 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1358, _1361, _1364, _1367));
    float _1430 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1357, _1360, _1363, _1366));
    float _1433 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1356, _1359, _1362, _1365));
    float _1467;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1440 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1043, _1047, _1050, _1053));
        float _1444 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1045, _1048, _1051, _1054));
        float _1448 = dot(vec4(_1424, _1425, _1426, 1.0), vec4(_1046, _1049, _1052, _1055));
        float _1455 = dot(vec4(cbModelParam._m0[39u]), vec4(_1424, _1425, _1426, 1.0));
        _1467 = dot(vec3(isnan(0.0) ? _1448 : (isnan(_1448) ? 0.0 : max(_1448, 0.0)), isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)), isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1455) ? 0.0 : (isnan(0.0) ? _1455 : max(0.0, _1455))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1467 = 1.0;
    }
    float _1478;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1469 = dot(vec4(cbModelParam._m0[40u]), vec4(_1424, _1425, _1426, 1.0));
        _1478 = dot(vec3(isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)), isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0)), isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1469) ? 0.0 : (isnan(0.0) ? _1469 : max(0.0, _1469))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1478 = 1.0;
    }
    float _1482 = (_1478 * cbModelParam._m0[1u].x) + (_1467 * (1.0 - cbModelParam._m0[1u].x));
    float _1492 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _535);
    float _1493 = isnan(_1492) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1492 : min(cbModelParam._m0[25u].z, _1492));
    float _1575;
    float _1577;
    float _1579;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1542 = fma(_714, cbModelParam._m0[13u].z, fma(_710, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _706)) + cbModelParam._m0[13u].w;
        float _1546 = fma(_714, cbModelParam._m0[14u].z, fma(_710, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _706)) + cbModelParam._m0[14u].w;
        float _1550 = fma(_714, cbModelParam._m0[15u].z, fma(_710, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _706)) + cbModelParam._m0[15u].w;
        float _1553 = fma(_655, cbModelParam._m0[13u].z, fma(_654, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _653));
        float _1556 = fma(_655, cbModelParam._m0[14u].z, fma(_654, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _653));
        float _1559 = fma(_655, cbModelParam._m0[15u].z, fma(_654, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _653));
        float _1587;
        if (_1553 > 0.0)
        {
            _1587 = abs((1.0 - _1542) / _1553);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1553 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1542 + 1.0) / _1553);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1587 = frontier_phi_25_23_ladder;
        }
        float _1958;
        if (_1556 > 0.0)
        {
            _1958 = abs((1.0 - _1546) / _1556);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1556 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1546 + 1.0) / _1556);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1958 = frontier_phi_34_30_ladder;
        }
        float _2266;
        if (_1559 > 0.0)
        {
            _2266 = abs((1.0 - _1550) / _1559);
        }
        else
        {
            float frontier_phi_48_41_ladder;
            if (_1559 < 0.0)
            {
                frontier_phi_48_41_ladder = abs((_1550 + 1.0) / _1559);
            }
            else
            {
                frontier_phi_48_41_ladder = 5000.0;
            }
            _2266 = frontier_phi_48_41_ladder;
        }
        float _2268 = isnan(_1958) ? _1587 : (isnan(_1587) ? _1958 : min(_1587, _1958));
        float _2269 = isnan(_2266) ? _2268 : (isnan(_2268) ? _2266 : min(_2268, _2266));
        float _2273 = (_2269 * _1553) + _1542;
        float _2274 = (_2269 * _1556) + _1546;
        float _2275 = (_2269 * _1559) + _1550;
        float _2276 = _2269 * 9.9999997473787516355514526367188e-05;
        float _2277 = (-1.0) - _2276;
        float _2279 = _2276 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2275 > _2279) || ((_2275 < _2277) || ((_2274 > _2279) || ((_2274 < _2277) || ((_2273 < _2277) || (_2273 > _2279))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2417 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2275, cbModelParam._m0[9u].z, fma(_2274, cbModelParam._m0[9u].y, _2273 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2275, cbModelParam._m0[10u].z, fma(_2274, cbModelParam._m0[10u].y, _2273 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2275, cbModelParam._m0[11u].z, fma(_2274, cbModelParam._m0[11u].y, _2273 * cbModelParam._m0[11u].x))), _1493);
            frontier_phi_24_48_ladder = _2417.z * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_1 = _2417.y * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_2 = _2417.x * cbModelParam._m0[1u].y;
        }
        _1575 = frontier_phi_24_48_ladder_2;
        _1577 = frontier_phi_24_48_ladder_1;
        _1579 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1563 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_653, _654, _655), _1493);
        _1575 = _1563.x * cbModelParam._m0[1u].y;
        _1577 = _1563.y * cbModelParam._m0[1u].y;
        _1579 = _1563.z * cbModelParam._m0[1u].y;
    }
    float _1583 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _535);
    float _1584 = isnan(_1583) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1583 : min(cbModelParam._m0[25u].w, _1583));
    float _1674;
    float _1676;
    float _1678;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1638 = fma(_714, cbModelParam._m0[21u].z, fma(_710, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _706)) + cbModelParam._m0[21u].w;
        float _1642 = fma(_714, cbModelParam._m0[22u].z, fma(_710, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _706)) + cbModelParam._m0[22u].w;
        float _1646 = fma(_714, cbModelParam._m0[23u].z, fma(_710, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _706)) + cbModelParam._m0[23u].w;
        float _1649 = fma(_655, cbModelParam._m0[21u].z, fma(_654, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _653));
        float _1652 = fma(_655, cbModelParam._m0[22u].z, fma(_654, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _653));
        float _1655 = fma(_655, cbModelParam._m0[23u].z, fma(_654, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _653));
        float _1963;
        if (_1649 > 0.0)
        {
            _1963 = abs((1.0 - _1638) / _1649);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1649 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1638 + 1.0) / _1649);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1963 = frontier_phi_36_32_ladder;
        }
        float _2292;
        if (_1652 > 0.0)
        {
            _2292 = abs((1.0 - _1642) / _1652);
        }
        else
        {
            float frontier_phi_50_43_ladder;
            if (_1652 < 0.0)
            {
                frontier_phi_50_43_ladder = abs((_1642 + 1.0) / _1652);
            }
            else
            {
                frontier_phi_50_43_ladder = 5000.0;
            }
            _2292 = frontier_phi_50_43_ladder;
        }
        float _2482;
        if (_1655 > 0.0)
        {
            _2482 = abs((1.0 - _1646) / _1655);
        }
        else
        {
            float frontier_phi_68_61_ladder;
            if (_1655 < 0.0)
            {
                frontier_phi_68_61_ladder = abs((_1646 + 1.0) / _1655);
            }
            else
            {
                frontier_phi_68_61_ladder = 5000.0;
            }
            _2482 = frontier_phi_68_61_ladder;
        }
        float _2484 = isnan(_2292) ? _1963 : (isnan(_1963) ? _2292 : min(_1963, _2292));
        float _2485 = isnan(_2482) ? _2484 : (isnan(_2484) ? _2482 : min(_2484, _2482));
        float _2489 = (_2485 * _1649) + _1638;
        float _2490 = (_2485 * _1652) + _1642;
        float _2491 = (_2485 * _1655) + _1646;
        float _2492 = _2485 * 9.9999997473787516355514526367188e-05;
        float _2493 = (-1.0) - _2492;
        float _2495 = _2492 + 1.0;
        float frontier_phi_33_68_ladder;
        float frontier_phi_33_68_ladder_1;
        float frontier_phi_33_68_ladder_2;
        if ((_2491 > _2495) || ((_2491 < _2493) || ((_2490 > _2495) || ((_2490 < _2493) || ((_2489 < _2493) || (_2489 > _2495))))))
        {
            frontier_phi_33_68_ladder = 0.0;
            frontier_phi_33_68_ladder_1 = 0.0;
            frontier_phi_33_68_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2733 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2491, cbModelParam._m0[17u].z, fma(_2490, cbModelParam._m0[17u].y, _2489 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2491, cbModelParam._m0[18u].z, fma(_2490, cbModelParam._m0[18u].y, _2489 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2491, cbModelParam._m0[19u].z, fma(_2490, cbModelParam._m0[19u].y, _2489 * cbModelParam._m0[19u].x))), _1584);
            frontier_phi_33_68_ladder = _2733.y * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_1 = _2733.z * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_2 = _2733.x * cbModelParam._m0[1u].z;
        }
        _1674 = frontier_phi_33_68_ladder_2;
        _1676 = frontier_phi_33_68_ladder;
        _1678 = frontier_phi_33_68_ladder_1;
    }
    else
    {
        vec4 _1658 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_653, _654, _655), _1584);
        _1674 = _1658.x * cbModelParam._m0[1u].z;
        _1676 = _1658.y * cbModelParam._m0[1u].z;
        _1678 = _1658.z * cbModelParam._m0[1u].z;
    }
    float _1690 = ((((1.0 - _674) * ((_661 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_674 * _661)) * _645;
    float _1691 = _1690 * ((cbModelParam._m0[1u].w * (_1674 - _1575)) + _1575);
    float _1692 = _1690 * ((cbModelParam._m0[1u].w * (_1676 - _1577)) + _1577);
    float _1693 = _1690 * ((cbModelParam._m0[1u].w * (_1678 - _1579)) + _1579);
    float _1696 = fma(_1693, cbSceneParam._m0[89u].z, fma(_1692, cbSceneParam._m0[89u].y, _1691 * cbSceneParam._m0[89u].x));
    float _1699 = fma(_1693, cbSceneParam._m0[90u].z, fma(_1692, cbSceneParam._m0[90u].y, _1691 * cbSceneParam._m0[90u].x));
    float _1702 = fma(_1693, cbSceneParam._m0[91u].z, fma(_1692, cbSceneParam._m0[91u].y, _1691 * cbSceneParam._m0[91u].x));
    vec4 _1710 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_580, _581));
    float _1712 = _1710.w;
    float _1724 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1712);
    float _1725 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1712);
    float _1726 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1712);
    uvec4 _1730 = floatBitsToUint(cbInstanceData._m0[_619 + 5u]);
    uint _1732 = _1730.x * 14u;
    uint _1733 = _1732 + 13u;
    float _1738 = _645 + (-1.0);
    float _1741 = (cbLight._m0[_1733].x * _1738) + 1.0;
    float _1742 = (cbLight._m0[_1733].y * _1738) + 1.0;
    uint _1743 = _1732 + 5u;
    float _1749 = isnan(1.0) ? _1742 : (isnan(_1742) ? 1.0 : min(_1742, 1.0));
    uint _1753 = _1732 + 4u;
    float _1762 = isnan(1.0) ? _1741 : (isnan(_1741) ? 1.0 : min(_1741, 1.0));
    uint _1766 = _1732 | 1u;
    float _1777 = dot(vec3(cbLight._m0[_1732].xyz), vec3(_532, _533, _534));
    float _1780 = dot(vec3(cbLight._m0[_1766].xyz), vec3(_532, _533, _534));
    float _3693 = isnan(0.0) ? _1777 : (isnan(_1777) ? 0.0 : max(_1777, 0.0));
    float _3704 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
    float _1785 = (isnan(1.0) ? _3693 : (isnan(_3693) ? 1.0 : min(_3693, 1.0))) * 0.3183098733425140380859375;
    float _1787 = (isnan(1.0) ? _3704 : (isnan(_3704) ? 1.0 : min(_3704, 1.0))) * 0.3183098733425140380859375;
    float _1794 = ((cbLight._m0[_1743].x * _1749) * _1787) + (((cbLight._m0[_1753].x * _1724) * _1762) * _1785);
    float _1795 = ((_1749 * cbLight._m0[_1743].y) * _1787) + (((cbLight._m0[_1753].y * _1725) * _1762) * _1785);
    float _1796 = ((_1749 * cbLight._m0[_1743].z) * _1787) + (((cbLight._m0[_1753].z * _1726) * _1762) * _1785);
    uint _1798 = _1732 + 8u;
    float _1811 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1732].w)) * _535) * 0.949999988079071044921875);
    float _1812 = _1811 * _1811;
    float _1813 = cbLight._m0[_1732].x + _559;
    float _1814 = cbLight._m0[_1732].y + _560;
    float _1815 = cbLight._m0[_1732].z + _561;
    float _1819 = inversesqrt(dot(vec3(_1813, _1814, _1815), vec3(_1813, _1814, _1815)));
    float _1820 = _1819 * _1813;
    float _1821 = _1819 * _1814;
    float _1822 = _1819 * _1815;
    float _1823 = dot(vec3(_532, _533, _534), vec3(cbLight._m0[_1732].xyz));
    float _3715 = isnan(0.0) ? _1823 : (isnan(_1823) ? 0.0 : max(_1823, 0.0));
    float _1826 = isnan(1.0) ? _3715 : (isnan(_3715) ? 1.0 : min(_3715, 1.0));
    float _3726 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _1827 = isnan(1.0) ? _3726 : (isnan(_3726) ? 1.0 : min(_3726, 1.0));
    float _1828 = dot(vec3(_532, _533, _534), vec3(_1820, _1821, _1822));
    float _3737 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
    float _1831 = isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0));
    float _1832 = dot(vec3(cbLight._m0[_1732].xyz), vec3(_1820, _1821, _1822));
    float _3748 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
    float _1836 = _1812 * _1812;
    float _1840 = ((_1831 * _1831) * (_1836 + (-1.0))) + 1.0;
    float _1851 = (exp2(log2(1.0 - (isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1852 = 1.0 - _1812;
    float _1863 = (0.5 / (((_1827 * ((_1826 * _1852) + _1812)) + 9.9999999392252902907785028219223e-09) + (((_1827 * _1852) + _1812) * _1826))) * _1826;
    float _3759 = isnan(0.0) ? _1863 : (isnan(_1863) ? 0.0 : max(_1863, 0.0));
    float _1865 = (isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0))) * (_1836 / ((_1840 * _1840) * 3.141590118408203125));
    uint _1879 = _1732 + 9u;
    float _1890 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1766].w)) * _535) * 0.949999988079071044921875);
    float _1891 = _1890 * _1890;
    float _1892 = cbLight._m0[_1766].x + _559;
    float _1893 = cbLight._m0[_1766].y + _560;
    float _1894 = cbLight._m0[_1766].z + _561;
    float _1898 = inversesqrt(dot(vec3(_1892, _1893, _1894), vec3(_1892, _1893, _1894)));
    float _1899 = _1898 * _1892;
    float _1900 = _1898 * _1893;
    float _1901 = _1898 * _1894;
    float _1902 = dot(vec3(_532, _533, _534), vec3(cbLight._m0[_1766].xyz));
    float _3770 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
    float _1905 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
    float _1906 = dot(vec3(_532, _533, _534), vec3(_1899, _1900, _1901));
    float _3781 = isnan(0.0) ? _1906 : (isnan(_1906) ? 0.0 : max(_1906, 0.0));
    float _1909 = isnan(1.0) ? _3781 : (isnan(_3781) ? 1.0 : min(_3781, 1.0));
    float _1910 = dot(vec3(cbLight._m0[_1766].xyz), vec3(_1899, _1900, _1901));
    float _3792 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0));
    float _1914 = _1891 * _1891;
    float _1918 = ((_1909 * _1909) * (_1914 + (-1.0))) + 1.0;
    float _1927 = (exp2(log2(1.0 - (isnan(1.0) ? _3792 : (isnan(_3792) ? 1.0 : min(_3792, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1928 = 1.0 - _1891;
    float _1938 = (0.5 / (((_1827 * ((_1905 * _1928) + _1891)) + 9.9999999392252902907785028219223e-09) + (((_1827 * _1928) + _1891) * _1905))) * _1905;
    float _3803 = isnan(0.0) ? _1938 : (isnan(_1938) ? 0.0 : max(_1938, 0.0));
    float _1940 = (isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0))) * (_1914 / ((_1918 * _1918) * 3.141590118408203125));
    float _1950 = (((_1927 * cbLight._m0[_1879].x) * _1940) * _1749) + ((((cbLight._m0[_1798].x * _1724) * _1851) * _1865) * _1762);
    float _1951 = (((_1927 * cbLight._m0[_1879].y) * _1940) * _1749) + ((((cbLight._m0[_1798].y * _1725) * _1851) * _1865) * _1762);
    float _1952 = (((_1927 * cbLight._m0[_1879].z) * _1940) * _1749) + ((((cbLight._m0[_1798].z * _1726) * _1851) * _1865) * _1762);
    float _2067;
    float _2069;
    float _2071;
    float _2073;
    float _2075;
    float _2077;
    if (_1730.y == 0u)
    {
        float _2007 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2008 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2007;
        float _2009 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2007;
        float _2010 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2007;
        uvec4 _2022 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2023 = _2022.x;
        uint _2034 = uint((float(_2022.y) * floor(float(uint(cbSceneParam._m0[85u].y * _581) / _2023))) + floor(float(uint(cbSceneParam._m0[85u].x * _580) / _2023)));
        float _2044 = (log2(_2010 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2045 = isnan(0.0) ? _2044 : (isnan(_2044) ? 0.0 : max(_2044, 0.0));
        uint _2048 = uint(isnan(14.0) ? _2045 : (isnan(_2045) ? 14.0 : min(_2045, 14.0)));
        uvec4 _2053 = texelFetch(g_lightClusterGridBuffer, int(((_2048 << 2u) + (_2034 << 6u)) >> 2u));
        uint _2054 = _2053.x;
        uint _2055 = _2022.z;
        float _2145;
        float _2147;
        float _2149;
        float _2151;
        float _2153;
        float _2155;
        if (((((1u << ((_2055 >> 4u) & 15u)) + 4294967295u) & _2054) == 0u) || ((_2055 & 240u) == 0u))
        {
            _2145 = 0.0;
            _2147 = 0.0;
            _2149 = 0.0;
            _2151 = 0.0;
            _2153 = 0.0;
            _2155 = 0.0;
        }
        else
        {
            float _2146;
            float _2148;
            float _2150;
            float _2152;
            float _2154;
            float _2156;
            float _2329 = 0.0;
            float _2330 = 0.0;
            float _2331 = 0.0;
            float _2332 = 0.0;
            float _2333 = 0.0;
            float _2334 = 0.0;
            uint _2335 = 0u;
            uint _2344;
            bool _2345;
            for (;;)
            {
                _2344 = texelFetch(g_lightClassification, int((((_2048 << 5u) + (_2034 << 9u)) + (_2335 << 2u)) >> 2u)).x;
                _2345 = _2344 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2345)
                {
                    frontier_phi_63_pred = _2331;
                    frontier_phi_63_pred_1 = _2334;
                    frontier_phi_63_pred_2 = _2333;
                    frontier_phi_63_pred_3 = _2332;
                    frontier_phi_63_pred_4 = _2330;
                    frontier_phi_63_pred_5 = _2329;
                }
                else
                {
                    float _2525;
                    float _2526;
                    float _2527;
                    float _2528;
                    float _2529;
                    float _2530;
                    uint _2531;
                    _2525 = _2329;
                    _2526 = _2330;
                    _2527 = _2331;
                    _2528 = _2332;
                    _2529 = _2333;
                    _2530 = _2334;
                    _2531 = _2344;
                    float _2426;
                    float _2427;
                    float _2428;
                    float _2429;
                    float _2430;
                    float _2431;
                    for (;;)
                    {
                        uint _2535 = uint(findLSB(_2531)) + (_2335 << 5u);
                        uint _2532 = (_2531 + 4294967295u) & _2531;
                        uint _2537 = _2535 * 48u;
                        vec4 _2551 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2537)).x, texelFetch(g_PointLightRenderingBuffer, int(_2537 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2537 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2537 + 3u)).x));
                        uint _2557 = (_2535 * 48u) + 4u;
                        vec4 _2570 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2557)).x, texelFetch(g_PointLightRenderingBuffer, int(_2557 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2557 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2557 + 3u)).x));
                        uint _2576 = (_2535 * 48u) + 8u;
                        vec3 _2587 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2576)).x, texelFetch(g_PointLightRenderingBuffer, int(_2576 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2576 + 2u)).x));
                        float _2591 = _2551.x - _2008;
                        float _2592 = _2551.y - _2009;
                        float _2593 = _2551.z - _2010;
                        float _2594 = dot(vec3(_2591, _2592, _2593), vec3(_2591, _2592, _2593));
                        float _2597 = inversesqrt(_2594);
                        float _2598 = _2597 * _2591;
                        float _2599 = _2597 * _2592;
                        float _2600 = _2597 * _2593;
                        float _2601 = dot(vec3(_600, _603, _606), vec3(_2598, _2599, _2600));
                        float _2606 = 1.0 - (_2594 * _2551.w);
                        float _3824 = isnan(0.0) ? _2606 : (isnan(_2606) ? 0.0 : max(_2606, 0.0));
                        float _2607 = isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0));
                        float _2608 = sqrt(_2594) * _2570.w;
                        float _2611 = 1.39999997615814208984375 / (_2608 + 1.39999997615814208984375);
                        float _2612 = _2611 * _2611;
                        float _2615 = ((1.0 - _2612) * _2601) + _2612;
                        float _2618 = _2608 * _2608;
                        float _2622 = ((isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0))) * _2607) / ((_2618 * 0.699999988079071044921875) + 1.0);
                        float _2626 = (-0.0) - _2008;
                        float _2627 = (-0.0) - _2009;
                        float _2628 = (-0.0) - _2010;
                        float _2632 = inversesqrt(dot(vec3(_2626, _2627, _2628), vec3(_2626, _2627, _2628)));
                        float _2633 = _2632 * _2626;
                        float _2634 = _2632 * _2627;
                        float _2635 = _2632 * _2628;
                        float _2643 = exp2(log2(1.0 / ((_2618 * 3.5) + 5.0)) * 0.25);
                        float _2644 = 1.0 - _661;
                        float _2651 = sqrt(1.0 - ((1.0 - (_2644 * _2644)) * (1.0 - (_2643 * _2643))));
                        float _2652 = _2651 * _2651;
                        float _2653 = _2652 * _2652;
                        float _2654 = _2633 + _2598;
                        float _2655 = _2634 + _2599;
                        float _2656 = _2635 + _2600;
                        float _2660 = inversesqrt(dot(vec3(_2654, _2655, _2656), vec3(_2654, _2655, _2656)));
                        float _2664 = dot(vec3(_600, _603, _606), vec3(_2633, _2634, _2635));
                        float _3840 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
                        float _2667 = isnan(1.0) ? _3840 : (isnan(_3840) ? 1.0 : min(_3840, 1.0));
                        float _2668 = dot(vec3(_600, _603, _606), vec3(_2660 * _2654, _2660 * _2655, _2660 * _2656));
                        float _3851 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0));
                        float _2671 = isnan(1.0) ? _3851 : (isnan(_3851) ? 1.0 : min(_3851, 1.0));
                        float _2675 = ((_2671 * _2671) * (_2653 + (-1.0))) + 1.0;
                        float _2676 = _2611 * _2652;
                        float _2677 = _2676 * _2676;
                        float _2680 = ((1.0 - _2677) * _2601) + _2677;
                        float _3862 = isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0));
                        float _2681 = isnan(1.0) ? _3862 : (isnan(_3862) ? 1.0 : min(_3862, 1.0));
                        float _2682 = 1.0 - _2652;
                        float _2692 = (0.5 / (((_2681 * ((_2667 * _2682) + _2652)) + 9.9999999392252902907785028219223e-09) + (((_2681 * _2682) + _2652) * _2667))) * _2681;
                        float _3873 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
                        float _2703 = (((_2653 * 3.1415927410125732421875) * (isnan(1.0) ? _3873 : (isnan(_3873) ? 1.0 : min(_3873, 1.0)))) / ((_2675 * _2675) * ((_2618 * 2.1991131305694580078125) + 3.141590118408203125))) * _2607;
                        _2429 = (_2622 * _2570.x) + _2528;
                        _2430 = (_2622 * _2570.y) + _2529;
                        _2431 = (_2622 * _2570.z) + _2530;
                        _2426 = (_2703 * _2587.x) + _2525;
                        _2427 = (_2703 * _2587.y) + _2526;
                        _2428 = (_2703 * _2587.z) + _2527;
                        if (_2532 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2525 = _2426;
                            _2526 = _2427;
                            _2527 = _2428;
                            _2528 = _2429;
                            _2529 = _2430;
                            _2530 = _2431;
                            _2531 = _2532;
                        }
                    }
                    frontier_phi_63_pred = _2428;
                    frontier_phi_63_pred_1 = _2431;
                    frontier_phi_63_pred_2 = _2430;
                    frontier_phi_63_pred_3 = _2429;
                    frontier_phi_63_pred_4 = _2427;
                    frontier_phi_63_pred_5 = _2426;
                }
                _2150 = frontier_phi_63_pred;
                _2156 = frontier_phi_63_pred_1;
                _2154 = frontier_phi_63_pred_2;
                _2152 = frontier_phi_63_pred_3;
                _2148 = frontier_phi_63_pred_4;
                _2146 = frontier_phi_63_pred_5;
                uint _2336 = _2335 + 1u;
                if (_2336 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2329 = _2146;
                    _2330 = _2148;
                    _2331 = _2150;
                    _2332 = _2152;
                    _2333 = _2154;
                    _2334 = _2156;
                    _2335 = _2336;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2145 = _2146;
            _2147 = _2148;
            _2149 = _2150;
            _2151 = _2152;
            _2153 = _2154;
            _2155 = _2156;
        }
        uvec4 _2159 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2160 = _2159.z;
        uint _2162 = (_2160 >> 8u) & 15u;
        float _2297;
        float _2299;
        float _2301;
        float _2303;
        float _2305;
        float _2307;
        if (((4294967295u << _2162) & _2054) == 0u)
        {
            _2297 = _2145;
            _2299 = _2147;
            _2301 = _2149;
            _2303 = _2151;
            _2305 = _2153;
            _2307 = _2155;
        }
        else
        {
            float _2322 = inversesqrt(dot(vec3(_2008, _2009, _2010), vec3(_2008, _2009, _2010)));
            float _2323 = _2322 * _2008;
            float _2324 = _2322 * _2009;
            float _2325 = _2322 * _2010;
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            float frontier_phi_52_53_ladder_3;
            float frontier_phi_52_53_ladder_4;
            float frontier_phi_52_53_ladder_5;
            if (_2162 < ((_2160 >> 12u) & 15u))
            {
                float _2298;
                float _2300;
                float _2302;
                float _2304;
                float _2306;
                float _2308;
                float _2508 = _2145;
                float _2509 = _2147;
                float _2510 = _2149;
                float _2511 = _2151;
                float _2512 = _2153;
                float _2513 = _2155;
                uint _2514 = _2162;
                uint _2523;
                bool _2524;
                for (;;)
                {
                    _2523 = texelFetch(g_lightClassification, int((((_2048 << 5u) + (_2034 << 9u)) + (_2514 << 2u)) >> 2u)).x;
                    _2524 = _2523 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2524)
                    {
                        frontier_phi_77_pred = _2513;
                        frontier_phi_77_pred_1 = _2512;
                        frontier_phi_77_pred_2 = _2511;
                        frontier_phi_77_pred_3 = _2510;
                        frontier_phi_77_pred_4 = _2509;
                        frontier_phi_77_pred_5 = _2508;
                    }
                    else
                    {
                        float _2738;
                        float _2739;
                        float _2740;
                        float _2741;
                        float _2742;
                        float _2743;
                        float _3031;
                        float _3032;
                        float _3033;
                        float _3034;
                        float _3035;
                        float _3036;
                        float _2751 = _2508;
                        float _2752 = _2509;
                        float _2753 = _2510;
                        float _2754 = _2511;
                        float _2755 = _2512;
                        float _2756 = _2513;
                        uint _2757 = _2523;
                        uint _2758;
                        vec4 _2783;
                        float _2784;
                        vec4 _2799;
                        vec3 _2811;
                        vec4 _2826;
                        vec4 _2841;
                        float _2887;
                        bool _2888;
                        for (;;)
                        {
                            uint _2768 = ((_2514 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2757));
                            _2758 = (_2757 + 4294967295u) & _2757;
                            uint _2770 = _2768 * 40u;
                            _2783 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2770)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2770 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2770 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2770 + 3u)).x));
                            _2784 = _2783.w;
                            uint _2786 = (_2768 * 40u) + 4u;
                            _2799 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2786)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2786 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2786 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2786 + 3u)).x));
                            uint _2801 = (_2768 * 40u) + 8u;
                            _2811 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2801)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 2u)).x));
                            uint _2813 = (_2768 * 40u) + 16u;
                            _2826 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2813)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2813 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2813 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2813 + 3u)).x));
                            uint _2828 = (_2768 * 40u) + 20u;
                            _2841 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2828)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2828 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2828 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2828 + 3u)).x));
                            uint _2843 = (_2768 * 40u) + 24u;
                            vec4 _2856 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2843)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2843 + 3u)).x));
                            uint _2862 = (_2768 * 40u) + 28u;
                            vec4 _2875 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2862)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2862 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2862 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2862 + 3u)).x));
                            _2887 = fma(_2010, _2875.z, fma(_2009, _2875.y, _2875.x * _2008)) + _2875.w;
                            _2888 = !((fma(_2010, _2856.z, fma(_2009, _2856.y, _2856.x * _2008)) + _2856.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2888)
                            {
                                float _2915 = _2783.x - _2008;
                                float _2916 = _2783.y - _2009;
                                float _2917 = _2783.z - _2010;
                                float _2918 = dot(vec3(_2915, _2916, _2917), vec3(_2915, _2916, _2917));
                                float _2921 = inversesqrt(_2918);
                                float _2922 = _2921 * _2915;
                                float _2923 = _2921 * _2916;
                                float _2924 = _2921 * _2917;
                                float _2928 = 1.0 - (_2918 / (_2784 * _2784));
                                float _3884 = isnan(0.0) ? _2928 : (isnan(_2928) ? 0.0 : max(_2928, 0.0));
                                float _2929 = isnan(1.0) ? _3884 : (isnan(_3884) ? 1.0 : min(_3884, 1.0));
                                float _2933 = sqrt(_2918) * _2799.w;
                                float _2935 = 1.39999997615814208984375 / (_2933 + 1.39999997615814208984375);
                                float _2936 = _2935 * _2935;
                                float _2939 = ((1.0 - _2936) * dot(vec3(_2922, _2923, _2924), vec3(_600, _603, _606))) + _2936;
                                float _2942 = _2933 * _2933;
                                float _2946 = (fma(_2010, _2826.z, fma(_2009, _2826.y, _2826.x * _2008)) + _2826.w) / _2887;
                                float _2947 = (fma(_2010, _2841.z, fma(_2009, _2841.y, _2841.x * _2008)) + _2841.w) / _2887;
                                float _2951 = 1.0 - dot(vec2(_2946, _2947), vec2(_2946, _2947));
                                float _3900 = isnan(0.0) ? _2951 : (isnan(_2951) ? 0.0 : max(_2951, 0.0));
                                float _2952 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
                                float _2953 = _2952 * (((isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0))) * _2929) / ((_2942 * 0.699999988079071044921875) + 1.0));
                                float _2965 = exp2(log2(1.0 / ((_2942 * 3.5) + 5.0)) * 0.25);
                                float _2966 = 1.0 - _661;
                                float _2973 = sqrt(1.0 - ((1.0 - (_2966 * _2966)) * (1.0 - (_2965 * _2965))));
                                float _2974 = _2973 * _2973;
                                float _2975 = _2974 * _2974;
                                float _2976 = _2922 - _2323;
                                float _2977 = _2923 - _2324;
                                float _2978 = _2924 - _2325;
                                float _2982 = inversesqrt(dot(vec3(_2976, _2977, _2978), vec3(_2976, _2977, _2978)));
                                float _2986 = dot(vec3(_600, _603, _606), vec3((-0.0) - _2323, (-0.0) - _2324, (-0.0) - _2325));
                                float _3911 = isnan(0.0) ? _2986 : (isnan(_2986) ? 0.0 : max(_2986, 0.0));
                                float _2989 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
                                float _2990 = dot(vec3(_600, _603, _606), vec3(_2982 * _2976, _2982 * _2977, _2982 * _2978));
                                float _3922 = isnan(0.0) ? _2990 : (isnan(_2990) ? 0.0 : max(_2990, 0.0));
                                float _2993 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
                                float _2997 = ((_2993 * _2993) * (_2975 + (-1.0))) + 1.0;
                                float _2998 = _2935 * _2974;
                                float _2999 = _2998 * _2998;
                                float _3005 = ((1.0 - _2999) * dot(vec3(_600, _603, _606), vec3(_2922, _2923, _2924))) + _2999;
                                float _3933 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0));
                                float _3006 = isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0));
                                float _3007 = 1.0 - _2974;
                                float _3017 = (0.5 / (((_3006 * ((_2989 * _3007) + _2974)) + 9.9999999392252902907785028219223e-09) + (((_3006 * _3007) + _2974) * _2989))) * _3006;
                                float _3944 = isnan(0.0) ? _3017 : (isnan(_3017) ? 0.0 : max(_3017, 0.0));
                                float _3027 = (_2952 * _2929) * (((_2975 * 3.1415927410125732421875) * (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0)))) / ((_2997 * _2997) * ((_2942 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _2953 * _2799.x;
                                frontier_phi_83_pred_1 = _2953 * _2799.z;
                                frontier_phi_83_pred_2 = _2953 * _2799.y;
                                frontier_phi_83_pred_3 = _3027 * _2811.z;
                                frontier_phi_83_pred_4 = _3027 * _2811.y;
                                frontier_phi_83_pred_5 = _3027 * _2811.x;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3034 = frontier_phi_83_pred;
                            _3036 = frontier_phi_83_pred_1;
                            _3035 = frontier_phi_83_pred_2;
                            _3033 = frontier_phi_83_pred_3;
                            _3032 = frontier_phi_83_pred_4;
                            _3031 = frontier_phi_83_pred_5;
                            _2741 = _3034 + _2754;
                            _2742 = _3035 + _2755;
                            _2743 = _3036 + _2756;
                            _2738 = _3031 + _2751;
                            _2739 = _3032 + _2752;
                            _2740 = _3033 + _2753;
                            if (_2758 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2751 = _2738;
                                _2752 = _2739;
                                _2753 = _2740;
                                _2754 = _2741;
                                _2755 = _2742;
                                _2756 = _2743;
                                _2757 = _2758;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2743;
                        frontier_phi_77_pred_1 = _2742;
                        frontier_phi_77_pred_2 = _2741;
                        frontier_phi_77_pred_3 = _2740;
                        frontier_phi_77_pred_4 = _2739;
                        frontier_phi_77_pred_5 = _2738;
                    }
                    _2308 = frontier_phi_77_pred;
                    _2306 = frontier_phi_77_pred_1;
                    _2304 = frontier_phi_77_pred_2;
                    _2302 = frontier_phi_77_pred_3;
                    _2300 = frontier_phi_77_pred_4;
                    _2298 = frontier_phi_77_pred_5;
                    uint _2515 = _2514 + 1u;
                    if (_2515 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2508 = _2298;
                        _2509 = _2300;
                        _2510 = _2302;
                        _2511 = _2304;
                        _2512 = _2306;
                        _2513 = _2308;
                        _2514 = _2515;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _2300;
                frontier_phi_52_53_ladder_1 = _2308;
                frontier_phi_52_53_ladder_2 = _2306;
                frontier_phi_52_53_ladder_3 = _2304;
                frontier_phi_52_53_ladder_4 = _2302;
                frontier_phi_52_53_ladder_5 = _2298;
            }
            else
            {
                frontier_phi_52_53_ladder = _2147;
                frontier_phi_52_53_ladder_1 = _2155;
                frontier_phi_52_53_ladder_2 = _2153;
                frontier_phi_52_53_ladder_3 = _2151;
                frontier_phi_52_53_ladder_4 = _2149;
                frontier_phi_52_53_ladder_5 = _2145;
            }
            _2297 = frontier_phi_52_53_ladder_5;
            _2299 = frontier_phi_52_53_ladder;
            _2301 = frontier_phi_52_53_ladder_4;
            _2303 = frontier_phi_52_53_ladder_3;
            _2305 = frontier_phi_52_53_ladder_2;
            _2307 = frontier_phi_52_53_ladder_1;
        }
        float _2312 = isnan(1.0) ? _645 : (isnan(_645) ? 1.0 : min(_645, 1.0));
        _2067 = (_2312 * _2303) + _1794;
        _2069 = (_2312 * _2305) + _1795;
        _2071 = (_2312 * _2307) + _1796;
        _2073 = ((_2297 * 0.039999999105930328369140625) * _2312) + _1950;
        _2075 = ((_2299 * 0.039999999105930328369140625) * _2312) + _1951;
        _2077 = ((_2301 * 0.039999999105930328369140625) * _2312) + _1952;
    }
    else
    {
        _2067 = _1794;
        _2069 = _1795;
        _2071 = _1796;
        _2073 = _1950;
        _2075 = _1951;
        _2077 = _1952;
    }
    float _3960 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _3971 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _3982 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _2094 = ((isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * (_2067 + ((isnan(0.0) ? _1403 : (isnan(_1403) ? 0.0 : max(_1403, 0.0))) * _645))) + ((_2073 + ((isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0))) * _1482)) * cbPerFrame._m0[3u].x);
    float _2095 = ((isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0))) * (_2069 + ((isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0))) * _645))) + ((_2075 + ((isnan(0.0) ? _1699 : (isnan(_1699) ? 0.0 : max(_1699, 0.0))) * _1482)) * cbPerFrame._m0[3u].x);
    float _2096 = ((isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0))) * (_2071 + ((isnan(0.0) ? _1409 : (isnan(_1409) ? 0.0 : max(_1409, 0.0))) * _645))) + ((_2077 + ((isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0))) * _1482)) * cbPerFrame._m0[3u].x);
    float _2097 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0));
    float _2098 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _2099 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    uint _2100 = _619 + 6u;
    float _2108 = _580 / cbSceneParam._m0[86u].x;
    float _2109 = _581 / cbSceneParam._m0[86u].y;
    vec4 _2123 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2108, _2109, (log2((isnan(cbSceneParam._m0[77u].w) ? _554 : (isnan(_554) ? cbSceneParam._m0[77u].w : min(_554, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2125 = _2123.x;
    float _2126 = _2123.y;
    float _2127 = _2123.z;
    float _2128 = _2123.w;
    float _2208;
    float _2210;
    float _2212;
    float _2214;
    if (_554 > cbSceneParam._m0[78u].w)
    {
        float _2170 = isnan(_554) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _554 : min(cbSceneParam._m0[80u].w, _554));
        float _2171 = _2170 / _554;
        float _2182 = _2171 * _267;
        float _2183 = _268 * _2171;
        float _2184 = (-0.0) - _2183;
        float _2185 = _2171 * _269;
        float _2187 = (cbSceneParam._m0[77u].w * _2184) / _2170;
        float _2188 = _2187 + cbSceneParam._m0[79u].w;
        float _2189 = cbSceneParam._m0[79u].w - _2183;
        float _2195 = sqrt(((_2182 * _2182) + (_2183 * _2183)) + (_2185 * _2185));
        float _2198 = (1.0 - (cbSceneParam._m0[77u].w / _2170)) * _2195;
        float _2204 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2206 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2439;
        if (abs((_2184 - _2187) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2439 = ((((_2188 > 0.0) ? exp2(_2204 * _2188) : (2.0 - exp2(_2206 * _2188))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2198;
        }
        else
        {
            float _2358 = 1.0 / cbSceneParam._m0[80u].x;
            float _2359 = isnan(_2189) ? _2188 : (isnan(_2188) ? _2189 : max(_2188, _2189));
            float _2360 = isnan(_2189) ? _2188 : (isnan(_2188) ? _2189 : min(_2188, _2189));
            float _2369 = isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : min(_2359, 0.0));
            float _2370 = isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : min(_2360, 0.0));
            _2439 = ((abs(_2195 / _2184) * cbSceneParam._m0[80u].y) * ((((_2369 - _2370) * 2.0) - ((exp2(_2204 * (isnan(0.0) ? _2359 : (isnan(_2359) ? 0.0 : max(_2359, 0.0)))) - exp2(_2204 * (isnan(0.0) ? _2360 : (isnan(_2360) ? 0.0 : max(_2360, 0.0))))) * _2358)) - ((exp2(_2206 * _2369) - exp2(_2206 * _2370)) * _2358))) + (_2198 * cbSceneParam._m0[80u].z);
        }
        vec4 _2441 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2108, _2109, 1.0), 0.0);
        float _2450 = exp2((_2439 * (-1.44269502162933349609375)) * (1.0 - _2441.w));
        float _2451 = log2(_2450);
        float _2467 = log2(_2128);
        _2208 = (exp2(_2467 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2451 * cbSceneParam._m0[78u].x)) * _2441.x) / cbSceneParam._m0[78u].x)) + _2125;
        _2210 = (exp2(_2467 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2451 * cbSceneParam._m0[78u].y)) * _2441.y) / cbSceneParam._m0[78u].y)) + _2126;
        _2212 = (exp2(_2467 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2451 * cbSceneParam._m0[78u].z)) * _2441.z) / cbSceneParam._m0[78u].z)) + _2127;
        _2214 = _2450 * _2128;
    }
    else
    {
        _2208 = _2125;
        _2210 = _2126;
        _2212 = _2127;
        _2214 = _2128;
    }
    bool _2477;
    vec4 _2224;
    vec4 _2246;
    float _2248;
    float _2252;
    float _2253;
    float _2254;
    float _2255;
    bool _2265;
    for (;;)
    {
        _2224 = cbMatDynParam._m0[0u];
        float _2226 = roundEven(_2224.y);
        bool _2227 = _2226 == 3.0;
        float _2228 = log2(_2214);
        float _2235 = exp2(_2228 * cbSceneParam._m0[78u].x) * _2097;
        float _2236 = exp2(_2228 * cbSceneParam._m0[78u].y) * _2098;
        float _2237 = exp2(_2228 * cbSceneParam._m0[78u].z) * _2099;
        float _2244 = _568 + (-0.5);
        _2246 = cbMtdParam._m0[1u];
        _2248 = _2246.y * _2244;
        float _2251 = (_2226 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2252 = _2251 * (_2227 ? _2235 : (_2235 + (cbSceneParam._m0[72u].w * _2208)));
        _2253 = _2251 * (_2227 ? _2236 : (_2236 + (cbSceneParam._m0[72u].w * _2210)));
        _2254 = _2251 * (_2227 ? _2237 : (_2237 + (cbSceneParam._m0[72u].w * _2212)));
        _2255 = _2244 * 0.999000012874603271484375;
        _2265 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2265)
        {
            if ((cbInstanceData._m0[_619 + 7u].x + _2255) < 0.5)
            {
                _2477 = true;
                break;
            }
        }
        uint _2393 = _621 + uint(_2224.w);
        if ((cbInstanceData._m0[_2393].w < 1.0) && ((cbInstanceData._m0[_2393].w + _2255) < 0.5))
        {
            _2477 = true;
            break;
        }
        if ((_2248 + 1.0) < _2246.x)
        {
            _2477 = true;
            break;
        }
        _2477 = false;
        break;
    }
    float _2708;
    if (_2477)
    {
        discard_state = true;
        _2708 = 0.0;
    }
    else
    {
        _2708 = cbInstanceData._m0[_2100].w;
    }
    SV_Target.x = _2252;
    SV_Target.y = _2253;
    SV_Target.z = _2254;
    SV_Target.w = _2708;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2100].w;
    discard_exit();
}


