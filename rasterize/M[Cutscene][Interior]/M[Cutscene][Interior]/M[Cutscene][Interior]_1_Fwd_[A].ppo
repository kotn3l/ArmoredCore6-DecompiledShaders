#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _664;
uint _1842;
uint _1843;
uint _1844;
uint _2087;
uint _2088;
uint _2089;
float _2312;
float _2313;
float _2314;
float _2315;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _198 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _246 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _256 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _246);
    float _257 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _246);
    float _258 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _246);
    vec4 _277 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _312 = cbMtdParam._m0[24u].x + _256;
    float _313 = cbMtdParam._m0[24u].y + _257;
    float _314 = cbMtdParam._m0[24u].z + _258;
    float _331 = (-0.0) - dot(vec3(_312, _313, _314), vec3(_187 * _180, _187 * _181, _187 * _182));
    float _332 = (-0.0) - dot(vec3(_312, _313, _314), vec3(_198 * TANGENT.x, _198 * TANGENT.y, _198 * TANGENT.z));
    float _333 = (-0.0) - dot(vec3(_312, _313, _314), vec3((-0.0) - (NORMAL.x * _194), (-0.0) - (NORMAL.y * _194), (-0.0) - (NORMAL.z * _194)));
    float _337 = inversesqrt(dot(vec3(_331, _332, _333), vec3(_331, _332, _333)));
    float _340 = _337 * _333;
    float _343 = ((_337 * _331) + (((_277.x * 2.0) + (-1.0)) * cbMtdParam._m0[22u].x)) * cbMtdParam._m0[20u].w;
    float _344 = ((_337 * _332) + (((_277.y * 2.0) + (-1.0)) * cbMtdParam._m0[22u].y)) * cbMtdParam._m0[20u].z;
    float _345 = fract(TEXCOORD.x);
    float _346 = fract(TEXCOORD.y);
    float _352;
    if (_343 > 0.0)
    {
        _352 = (1.0 - _345) / _343;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_343 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _345) / _343;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _352 = frontier_phi_3_2_ladder;
    }
    float _360;
    if (_344 > 0.0)
    {
        _360 = (1.0 - _346) / _344;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_344 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _346) / _344;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _360 = frontier_phi_7_6_ladder;
    }
    float _364 = (_340 > 0.0) ? (cbMtdParam._m0[16u].x / _340) : 5000.0;
    float _365 = isnan(_360) ? _352 : (isnan(_352) ? _360 : min(_352, _360));
    float _366 = isnan(_364) ? _365 : (isnan(_365) ? _364 : min(_365, _364));
    float _370 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _377 = ((_366 * _340) + _370) / _370;
    vec4 _402 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * ((((((_345 + (-0.5)) + (_366 * _343)) / _377) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * ((((((_346 + (-0.5)) + (_366 * _344)) / _377) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    float _430 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _434 = inversesqrt(dot(vec3(_256, _257, _258), vec3(_256, _257, _258)));
    float _435 = _256 * _434;
    float _436 = _257 * _434;
    float _437 = _258 * _434;
    vec4 _442 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _444 = _442.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _513 = sqrt(((_256 * _256) + (_257 * _257)) + (_258 * _258));
        float _519 = (cbMatDynParam._m0[5u].x * _513) + cbMatDynParam._m0[5u].y;
        float _2334 = isnan(0.0) ? _519 : (isnan(_519) ? 0.0 : max(_519, 0.0));
        float _520 = isnan(1.0) ? _2334 : (isnan(_2334) ? 1.0 : min(_2334, 1.0));
        float _524 = (cbMatDynParam._m0[5u].z * _513) + cbMatDynParam._m0[5u].w;
        float _2345 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2345 : (isnan(_2345) ? 1.0 : min(_2345, 1.0))) - _520)) + _520) < ((_444 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _456 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _457 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _466 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_456 * cbSceneParam._m0[86u].x, _457 * cbSceneParam._m0[86u].y));
    float _469 = _466.x * TEXCOORD_4.z;
    float _470 = (-0.0) - _435;
    float _471 = (-0.0) - _436;
    float _472 = (-0.0) - _437;
    float _494 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _498 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _502 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _663;
    float _665;
    float _666;
    float _667;
    float _668;
    float _669;
    float _670;
    float _671;
    float _672;
    float _673;
    float _674;
    float _675;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _586 = (cbModelParam._m0[37u].x * ((((fma(_502, cbModelParam._m0[26u].z, fma(_498, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _494)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _588 = (cbModelParam._m0[37u].y * ((((fma(_502, cbModelParam._m0[27u].z, fma(_498, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _494)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _589 = (((((fma(_502, cbModelParam._m0[28u].z, fma(_498, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _494)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _592 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_586, _588, _589), 0.0);
        vec4 _599 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_586, _588, _589), 0.0);
        vec4 _606 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_586, _588, _589), 0.0);
        vec4 _613 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_586, _588, _589), 0.0);
        float _626 = exp2((_592.w + (-0.5)) * 20.0) * 2.0;
        float _636 = exp2((_599.w + (-0.5)) * 20.0) * 2.0;
        float _646 = exp2((_606.w + (-0.5)) * 20.0) * 2.0;
        float _656 = exp2((_613.w + (-0.5)) * 20.0) * 2.0;
        float _657 = _656 * (_613.x + (-0.5));
        float _658 = _656 * (_613.y + (-0.5));
        float _659 = _656 * (_613.z + (-0.5));
        _663 = _626 * (_592.z + (-0.5));
        _665 = _626 * (_592.y + (-0.5));
        _666 = _626 * (_592.x + (-0.5));
        _667 = _636 * (_599.z + (-0.5));
        _668 = _636 * (_599.y + (-0.5));
        _669 = _636 * (_599.x + (-0.5));
        _670 = _646 * (_606.z + (-0.5));
        _671 = _646 * (_606.y + (-0.5));
        _672 = _646 * (_606.x + (-0.5));
        _673 = isnan(0.0) ? _659 : (isnan(_659) ? 0.0 : max(_659, 0.0));
        _674 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
        _675 = isnan(0.0) ? _657 : (isnan(_657) ? 0.0 : max(_657, 0.0));
    }
    else
    {
        _663 = _664;
        _665 = _664;
        _666 = _664;
        _667 = _664;
        _668 = _664;
        _669 = _664;
        _670 = _664;
        _671 = _664;
        _672 = _664;
        _673 = _664;
        _674 = _664;
        _675 = _664;
    }
    float _806;
    float _807;
    float _808;
    float _809;
    float _810;
    float _811;
    float _812;
    float _813;
    float _814;
    float _815;
    float _816;
    float _817;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _732 = (cbModelParam._m0[38u].x * ((((fma(_502, cbModelParam._m0[30u].z, fma(_498, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _494)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _733 = (cbModelParam._m0[38u].y * ((((fma(_502, cbModelParam._m0[31u].z, fma(_498, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _494)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _734 = (((((fma(_502, cbModelParam._m0[32u].z, fma(_498, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _494)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _736 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_732, _733, _734), 0.0);
        vec4 _743 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_732, _733, _734), 0.0);
        vec4 _750 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_732, _733, _734), 0.0);
        vec4 _757 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_732, _733, _734), 0.0);
        float _769 = exp2((_736.w + (-0.5)) * 20.0) * 2.0;
        float _779 = exp2((_743.w + (-0.5)) * 20.0) * 2.0;
        float _789 = exp2((_750.w + (-0.5)) * 20.0) * 2.0;
        float _799 = exp2((_757.w + (-0.5)) * 20.0) * 2.0;
        float _800 = _799 * (_757.x + (-0.5));
        float _801 = _799 * (_757.y + (-0.5));
        float _802 = _799 * (_757.z + (-0.5));
        _806 = _769 * (_736.z + (-0.5));
        _807 = _769 * (_736.y + (-0.5));
        _808 = _769 * (_736.x + (-0.5));
        _809 = _779 * (_743.z + (-0.5));
        _810 = _779 * (_743.y + (-0.5));
        _811 = _779 * (_743.x + (-0.5));
        _812 = _789 * (_750.z + (-0.5));
        _813 = _789 * (_750.y + (-0.5));
        _814 = _789 * (_750.x + (-0.5));
        _815 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        _816 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        _817 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
    }
    else
    {
        _806 = _664;
        _807 = _664;
        _808 = _664;
        _809 = _664;
        _810 = _664;
        _811 = _664;
        _812 = _664;
        _813 = _664;
        _814 = _664;
        _815 = _664;
        _816 = _664;
        _817 = _664;
    }
    float _832 = _435 * (-0.5);
    float _833 = _436 * (-0.5);
    float _834 = _437 * (-0.5);
    float _835 = dot(vec4(_832, _833, _834, 1.0), vec4(_808, _811, _814, _817));
    float _838 = dot(vec4(_832, _833, _834, 1.0), vec4(_807, _810, _813, _816));
    float _841 = dot(vec4(_832, _833, _834, 1.0), vec4(_806, _809, _812, _815));
    float _876;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _848 = dot(vec4(_832, _833, _834, 1.0), vec4(_663, _667, _670, _673));
        float _852 = dot(vec4(_832, _833, _834, 1.0), vec4(_665, _668, _671, _674));
        float _856 = dot(vec4(_832, _833, _834, 1.0), vec4(_666, _669, _672, _675));
        float _863 = dot(vec4(cbModelParam._m0[39u]), vec4(_832, _833, _834, 1.0));
        _876 = dot(vec3(isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0)), isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0)), isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_863) ? 0.0 : (isnan(0.0) ? _863 : max(0.0, _863))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _876 = 1.0;
    }
    float _887;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _878 = dot(vec4(cbModelParam._m0[40u]), vec4(_832, _833, _834, 1.0));
        _887 = dot(vec3(isnan(0.0) ? _835 : (isnan(_835) ? 0.0 : max(_835, 0.0)), isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0)), isnan(0.0) ? _841 : (isnan(_841) ? 0.0 : max(_841, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_878) ? 0.0 : (isnan(0.0) ? _878 : max(0.0, _878))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _887 = 1.0;
    }
    float _891 = (_887 * cbModelParam._m0[1u].x) + (_876 * (1.0 - cbModelParam._m0[1u].x));
    float _897 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _981;
    float _983;
    float _985;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _948 = fma(_502, cbModelParam._m0[13u].z, fma(_498, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _494)) + cbModelParam._m0[13u].w;
        float _952 = fma(_502, cbModelParam._m0[14u].z, fma(_498, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _494)) + cbModelParam._m0[14u].w;
        float _956 = fma(_502, cbModelParam._m0[15u].z, fma(_498, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _494)) + cbModelParam._m0[15u].w;
        float _959 = fma(_472, cbModelParam._m0[13u].z, fma(_471, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _470));
        float _962 = fma(_472, cbModelParam._m0[14u].z, fma(_471, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _470));
        float _965 = fma(_472, cbModelParam._m0[15u].z, fma(_471, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _470));
        float _991;
        if (_959 > 0.0)
        {
            _991 = abs((1.0 - _948) / _959);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_959 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_948 + 1.0) / _959);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _991 = frontier_phi_25_23_ladder;
        }
        float _1269;
        if (_962 > 0.0)
        {
            _1269 = abs((1.0 - _952) / _962);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_962 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_952 + 1.0) / _962);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1269 = frontier_phi_34_30_ladder;
        }
        float _1574;
        if (_965 > 0.0)
        {
            _1574 = abs((1.0 - _956) / _965);
        }
        else
        {
            float frontier_phi_48_41_ladder;
            if (_965 < 0.0)
            {
                frontier_phi_48_41_ladder = abs((_956 + 1.0) / _965);
            }
            else
            {
                frontier_phi_48_41_ladder = 5000.0;
            }
            _1574 = frontier_phi_48_41_ladder;
        }
        float _1576 = isnan(_1269) ? _991 : (isnan(_991) ? _1269 : min(_991, _1269));
        float _1577 = isnan(_1574) ? _1576 : (isnan(_1576) ? _1574 : min(_1576, _1574));
        float _1581 = (_1577 * _959) + _948;
        float _1582 = (_1577 * _962) + _952;
        float _1583 = (_1577 * _965) + _956;
        float _1584 = _1577 * 9.9999997473787516355514526367188e-05;
        float _1585 = (-1.0) - _1584;
        float _1587 = _1584 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_1583 > _1587) || ((_1583 < _1585) || ((_1582 > _1587) || ((_1582 < _1585) || ((_1581 < _1585) || (_1581 > _1587))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1710 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1583, cbModelParam._m0[9u].z, fma(_1582, cbModelParam._m0[9u].y, _1581 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1583, cbModelParam._m0[10u].z, fma(_1582, cbModelParam._m0[10u].y, _1581 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1583, cbModelParam._m0[11u].z, fma(_1582, cbModelParam._m0[11u].y, _1581 * cbModelParam._m0[11u].x))), _897);
            frontier_phi_24_48_ladder = _1710.z * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_1 = _1710.y * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_2 = _1710.x * cbModelParam._m0[1u].y;
        }
        _981 = frontier_phi_24_48_ladder_2;
        _983 = frontier_phi_24_48_ladder_1;
        _985 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _969 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_470, _471, _472), _897);
        _981 = _969.x * cbModelParam._m0[1u].y;
        _983 = _969.y * cbModelParam._m0[1u].y;
        _985 = _969.z * cbModelParam._m0[1u].y;
    }
    float _988 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1078;
    float _1080;
    float _1082;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1042 = fma(_502, cbModelParam._m0[21u].z, fma(_498, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _494)) + cbModelParam._m0[21u].w;
        float _1046 = fma(_502, cbModelParam._m0[22u].z, fma(_498, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _494)) + cbModelParam._m0[22u].w;
        float _1050 = fma(_502, cbModelParam._m0[23u].z, fma(_498, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _494)) + cbModelParam._m0[23u].w;
        float _1053 = fma(_472, cbModelParam._m0[21u].z, fma(_471, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _470));
        float _1056 = fma(_472, cbModelParam._m0[22u].z, fma(_471, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _470));
        float _1059 = fma(_472, cbModelParam._m0[23u].z, fma(_471, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _470));
        float _1274;
        if (_1053 > 0.0)
        {
            _1274 = abs((1.0 - _1042) / _1053);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1053 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1042 + 1.0) / _1053);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1274 = frontier_phi_36_32_ladder;
        }
        float _1600;
        if (_1056 > 0.0)
        {
            _1600 = abs((1.0 - _1046) / _1056);
        }
        else
        {
            float frontier_phi_50_43_ladder;
            if (_1056 < 0.0)
            {
                frontier_phi_50_43_ladder = abs((_1046 + 1.0) / _1056);
            }
            else
            {
                frontier_phi_50_43_ladder = 5000.0;
            }
            _1600 = frontier_phi_50_43_ladder;
        }
        float _1772;
        if (_1059 > 0.0)
        {
            _1772 = abs((1.0 - _1050) / _1059);
        }
        else
        {
            float frontier_phi_68_61_ladder;
            if (_1059 < 0.0)
            {
                frontier_phi_68_61_ladder = abs((_1050 + 1.0) / _1059);
            }
            else
            {
                frontier_phi_68_61_ladder = 5000.0;
            }
            _1772 = frontier_phi_68_61_ladder;
        }
        float _1774 = isnan(_1600) ? _1274 : (isnan(_1274) ? _1600 : min(_1274, _1600));
        float _1775 = isnan(_1772) ? _1774 : (isnan(_1774) ? _1772 : min(_1774, _1772));
        float _1779 = (_1775 * _1053) + _1042;
        float _1780 = (_1775 * _1056) + _1046;
        float _1781 = (_1775 * _1059) + _1050;
        float _1782 = _1775 * 9.9999997473787516355514526367188e-05;
        float _1783 = (-1.0) - _1782;
        float _1785 = _1782 + 1.0;
        float frontier_phi_33_68_ladder;
        float frontier_phi_33_68_ladder_1;
        float frontier_phi_33_68_ladder_2;
        if ((_1781 > _1785) || ((_1781 < _1783) || ((_1780 > _1785) || ((_1780 < _1783) || ((_1779 < _1783) || (_1779 > _1785))))))
        {
            frontier_phi_33_68_ladder = 0.0;
            frontier_phi_33_68_ladder_1 = 0.0;
            frontier_phi_33_68_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1950 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1781, cbModelParam._m0[17u].z, fma(_1780, cbModelParam._m0[17u].y, _1779 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1781, cbModelParam._m0[18u].z, fma(_1780, cbModelParam._m0[18u].y, _1779 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1781, cbModelParam._m0[19u].z, fma(_1780, cbModelParam._m0[19u].y, _1779 * cbModelParam._m0[19u].x))), _988);
            frontier_phi_33_68_ladder = _1950.z * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_1 = _1950.y * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_2 = _1950.x * cbModelParam._m0[1u].z;
        }
        _1078 = frontier_phi_33_68_ladder_2;
        _1080 = frontier_phi_33_68_ladder_1;
        _1082 = frontier_phi_33_68_ladder;
    }
    else
    {
        vec4 _1062 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_470, _471, _472), _988);
        _1078 = _1062.x * cbModelParam._m0[1u].z;
        _1080 = _1062.y * cbModelParam._m0[1u].z;
        _1082 = _1062.z * cbModelParam._m0[1u].z;
    }
    float _1094 = _469 * 0.01200000010430812835693359375;
    float _1096 = _1094 * ((cbModelParam._m0[1u].w * (_1078 - _981)) + _981);
    float _1097 = _1094 * ((cbModelParam._m0[1u].w * (_1080 - _983)) + _983);
    float _1098 = _1094 * ((cbModelParam._m0[1u].w * (_1082 - _985)) + _985);
    float _1119 = fma(_1098, cbSceneParam._m0[89u].z, fma(_1097, cbSceneParam._m0[89u].y, _1096 * cbSceneParam._m0[89u].x));
    float _1122 = fma(_1098, cbSceneParam._m0[90u].z, fma(_1097, cbSceneParam._m0[90u].y, _1096 * cbSceneParam._m0[90u].x));
    float _1125 = fma(_1098, cbSceneParam._m0[91u].z, fma(_1097, cbSceneParam._m0[91u].y, _1096 * cbSceneParam._m0[91u].x));
    uint _1132 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1136 = floatBitsToUint(cbInstanceData._m0[_1132 + 5u]);
    uint _1138 = _1136.x * 14u;
    uint _1139 = _1138 + 13u;
    float _1144 = _469 + (-1.0);
    float _1147 = (cbLight._m0[_1139].x * _1144) + 1.0;
    float _1148 = (cbLight._m0[_1139].y * _1144) + 1.0;
    uint _1149 = _1138 + 8u;
    float _1160 = cbLight._m0[_1138].x + _435;
    float _1161 = cbLight._m0[_1138].y + _436;
    float _1162 = cbLight._m0[_1138].z + _437;
    float _1166 = inversesqrt(dot(vec3(_1160, _1161, _1162), vec3(_1160, _1161, _1162)));
    float _1170 = dot(vec3(0.0), vec3(cbLight._m0[_1138].xyz));
    float _2471 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
    float _1173 = isnan(1.0) ? _2471 : (isnan(_2471) ? 1.0 : min(_2471, 1.0));
    float _1174 = dot(vec3(0.0), vec3(_435, _436, _437));
    float _2482 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
    float _1177 = isnan(1.0) ? _2482 : (isnan(_2482) ? 1.0 : min(_2482, 1.0));
    float _1178 = dot(vec3(cbLight._m0[_1138].xyz), vec3(_1160 * _1166, _1161 * _1166, _1162 * _1166));
    float _2493 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
    float _1189 = (exp2(log2(1.0 - (isnan(1.0) ? _2493 : (isnan(_2493) ? 1.0 : min(_2493, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1195 = (0.5 / ((_1173 + 9.9999999392252902907785028219223e-09) + _1177)) * _1173;
    float _2504 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
    float _1197 = (isnan(1.0) ? _2504 : (isnan(_2504) ? 1.0 : min(_2504, 1.0))) * 0.31831014156341552734375;
    float _1199 = isnan(1.0) ? _1147 : (isnan(_1147) ? 1.0 : min(_1147, 1.0));
    uint _1209 = _1138 + 9u;
    uint _1215 = _1138 | 1u;
    float _1221 = cbLight._m0[_1215].x + _435;
    float _1222 = cbLight._m0[_1215].y + _436;
    float _1223 = cbLight._m0[_1215].z + _437;
    float _1227 = inversesqrt(dot(vec3(_1221, _1222, _1223), vec3(_1221, _1222, _1223)));
    float _1231 = dot(vec3(0.0), vec3(cbLight._m0[_1215].xyz));
    float _2520 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
    float _1234 = isnan(1.0) ? _2520 : (isnan(_2520) ? 1.0 : min(_2520, 1.0));
    float _1235 = dot(vec3(cbLight._m0[_1215].xyz), vec3(_1221 * _1227, _1222 * _1227, _1223 * _1227));
    float _2531 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
    float _1244 = (exp2(log2(1.0 - (isnan(1.0) ? _2531 : (isnan(_2531) ? 1.0 : min(_2531, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1248 = (0.5 / ((_1234 + 9.9999999392252902907785028219223e-09) + _1177)) * _1234;
    float _2542 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
    float _1250 = (isnan(1.0) ? _2542 : (isnan(_2542) ? 1.0 : min(_2542, 1.0))) * 0.31831014156341552734375;
    float _1251 = isnan(1.0) ? _1148 : (isnan(_1148) ? 1.0 : min(_1148, 1.0));
    float _1261 = (((_1244 * cbLight._m0[_1209].x) * _1250) * _1251) + (((_1189 * cbLight._m0[_1149].x) * _1197) * _1199);
    float _1262 = (((_1244 * cbLight._m0[_1209].y) * _1250) * _1251) + (((_1189 * cbLight._m0[_1149].y) * _1197) * _1199);
    float _1263 = (((_1244 * cbLight._m0[_1209].z) * _1250) * _1251) + (((_1189 * cbLight._m0[_1149].z) * _1197) * _1199);
    float _1380;
    float _1382;
    float _1384;
    if (_1136.y == 0u)
    {
        float _1319 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1320 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1319;
        float _1321 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1319;
        float _1322 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1319;
        uvec4 _1334 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1335 = _1334.x;
        uint _1346 = uint((float(_1334.y) * floor(float(uint(cbSceneParam._m0[85u].y * _457) / _1335))) + floor(float(uint(cbSceneParam._m0[85u].x * _456) / _1335)));
        float _1356 = (log2(_1322 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1357 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        uint _1360 = uint(isnan(14.0) ? _1357 : (isnan(_1357) ? 14.0 : min(_1357, 14.0)));
        uvec4 _1365 = texelFetch(g_lightClusterGridBuffer, int(((_1360 << 2u) + (_1346 << 6u)) >> 2u));
        uint _1366 = _1365.x;
        uint _1367 = _1334.z;
        float _1457;
        float _1459;
        float _1461;
        if (((((1u << ((_1367 >> 4u) & 15u)) + 4294967295u) & _1366) == 0u) || ((_1367 & 240u) == 0u))
        {
            _1457 = 0.0;
            _1459 = 0.0;
            _1461 = 0.0;
        }
        else
        {
            float _1458;
            float _1460;
            float _1462;
            float _1625 = 0.0;
            float _1626 = 0.0;
            float _1627 = 0.0;
            uint _1628 = 0u;
            uint _1637;
            bool _1638;
            for (;;)
            {
                _1637 = texelFetch(g_lightClassification, int((((_1360 << 5u) + (_1346 << 9u)) + (_1628 << 2u)) >> 2u)).x;
                _1638 = _1637 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                if (_1638)
                {
                    frontier_phi_63_pred = _1627;
                    frontier_phi_63_pred_1 = _1626;
                    frontier_phi_63_pred_2 = _1625;
                }
                else
                {
                    float _1812;
                    float _1813;
                    float _1814;
                    uint _1815;
                    _1812 = _1625;
                    _1813 = _1626;
                    _1814 = _1627;
                    _1815 = _1637;
                    float _1719;
                    float _1720;
                    float _1721;
                    for (;;)
                    {
                        uint _1819 = uint(findLSB(_1815)) + (_1628 << 5u);
                        uint _1816 = (_1815 + 4294967295u) & _1815;
                        uint _1821 = _1819 * 48u;
                        vec4 _1835 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1821)).x, texelFetch(g_PointLightRenderingBuffer, int(_1821 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1821 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1821 + 3u)).x));
                        uint _1852 = (_1819 * 48u) + 8u;
                        vec3 _1863 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_1852)).x, texelFetch(g_PointLightRenderingBuffer, int(_1852 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1852 + 2u)).x));
                        float _1867 = _1835.x - _1320;
                        float _1868 = _1835.y - _1321;
                        float _1869 = _1835.z - _1322;
                        float _1870 = dot(vec3(_1867, _1868, _1869), vec3(_1867, _1868, _1869));
                        float _1873 = inversesqrt(_1870);
                        float _1882 = 1.0 - (_1870 * _1835.w);
                        float _2568 = isnan(0.0) ? _1882 : (isnan(_1882) ? 0.0 : max(_1882, 0.0));
                        float _1884 = sqrt(_1870) * uintBitsToFloat(uvec4(_1842, _1843, _1844, texelFetch(g_PointLightRenderingBuffer, int(((_1819 * 48u) + 4u) + 3u)).x)).w;
                        float _1887 = 1.39999997615814208984375 / (_1884 + 1.39999997615814208984375);
                        float _1888 = _1887 * _1887;
                        float _1891 = ((1.0 - _1888) * dot(vec3(0.0), vec3(_1873 * _1867, _1873 * _1868, _1873 * _1869))) + _1888;
                        float _1893 = (-0.0) - _1320;
                        float _1894 = (-0.0) - _1321;
                        float _1895 = (-0.0) - _1322;
                        float _1899 = inversesqrt(dot(vec3(_1893, _1894, _1895), vec3(_1893, _1894, _1895)));
                        float _1903 = dot(vec3(0.0), vec3(_1899 * _1893, _1899 * _1894, _1899 * _1895));
                        float _2579 = isnan(0.0) ? _1903 : (isnan(_1903) ? 0.0 : max(_1903, 0.0));
                        float _2590 = isnan(0.0) ? _1891 : (isnan(_1891) ? 0.0 : max(_1891, 0.0));
                        float _1907 = isnan(1.0) ? _2590 : (isnan(_2590) ? 1.0 : min(_2590, 1.0));
                        float _1911 = (0.5 / (((isnan(1.0) ? _2579 : (isnan(_2579) ? 1.0 : min(_2579, 1.0))) + 9.9999999392252902907785028219223e-09) + _1907)) * _1907;
                        float _2601 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0));
                        float _1920 = (((isnan(1.0) ? _2601 : (isnan(_2601) ? 1.0 : min(_2601, 1.0))) * 3.1415927410125732421875) / (((_1884 * _1884) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2568 : (isnan(_2568) ? 1.0 : min(_2568, 1.0)));
                        _1719 = (_1920 * _1863.x) + _1812;
                        _1720 = (_1920 * _1863.y) + _1813;
                        _1721 = (_1920 * _1863.z) + _1814;
                        if (_1816 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _1812 = _1719;
                            _1813 = _1720;
                            _1814 = _1721;
                            _1815 = _1816;
                        }
                    }
                    frontier_phi_63_pred = _1721;
                    frontier_phi_63_pred_1 = _1720;
                    frontier_phi_63_pred_2 = _1719;
                }
                _1462 = frontier_phi_63_pred;
                _1460 = frontier_phi_63_pred_1;
                _1458 = frontier_phi_63_pred_2;
                uint _1629 = _1628 + 1u;
                if (_1629 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1625 = _1458;
                    _1626 = _1460;
                    _1627 = _1462;
                    _1628 = _1629;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1457 = _1458;
            _1459 = _1460;
            _1461 = _1462;
        }
        uvec4 _1465 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1466 = _1465.z;
        uint _1468 = (_1466 >> 8u) & 15u;
        float _1605;
        float _1607;
        float _1609;
        if (((4294967295u << _1468) & _1366) == 0u)
        {
            _1605 = _1457;
            _1607 = _1459;
            _1609 = _1461;
        }
        else
        {
            float _1621 = inversesqrt(dot(vec3(_1320, _1321, _1322), vec3(_1320, _1321, _1322)));
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            if (_1468 < ((_1466 >> 12u) & 15u))
            {
                float _1606;
                float _1608;
                float _1610;
                float _1798 = _1457;
                float _1799 = _1459;
                float _1800 = _1461;
                uint _1801 = _1468;
                uint _1810;
                bool _1811;
                for (;;)
                {
                    _1810 = texelFetch(g_lightClassification, int((((_1360 << 5u) + (_1346 << 9u)) + (_1801 << 2u)) >> 2u)).x;
                    _1811 = _1810 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    if (_1811)
                    {
                        frontier_phi_77_pred = _1799;
                        frontier_phi_77_pred_1 = _1798;
                        frontier_phi_77_pred_2 = _1800;
                    }
                    else
                    {
                        float _1955;
                        float _1956;
                        float _1957;
                        float _2176;
                        float _2177;
                        float _2178;
                        float _1965 = _1798;
                        float _1966 = _1799;
                        float _1967 = _1800;
                        uint _1968 = _1810;
                        uint _1969;
                        uint _1979;
                        vec4 _1994;
                        float _1995;
                        vec3 _2007;
                        vec4 _2022;
                        vec4 _2037;
                        float _2083;
                        bool _2084;
                        for (;;)
                        {
                            _1979 = ((_1801 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_1968));
                            _1969 = (_1968 + 4294967295u) & _1968;
                            uint _1981 = _1979 * 40u;
                            _1994 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_1981)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1981 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1981 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1981 + 3u)).x));
                            _1995 = _1994.w;
                            uint _1997 = (_1979 * 40u) + 8u;
                            _2007 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_1997)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1997 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_1997 + 2u)).x));
                            uint _2009 = (_1979 * 40u) + 16u;
                            _2022 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2009)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2009 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2009 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2009 + 3u)).x));
                            uint _2024 = (_1979 * 40u) + 20u;
                            _2037 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2024)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2024 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2024 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2024 + 3u)).x));
                            uint _2039 = (_1979 * 40u) + 24u;
                            vec4 _2052 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2039)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2039 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2039 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2039 + 3u)).x));
                            uint _2058 = (_1979 * 40u) + 28u;
                            vec4 _2071 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2058)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2058 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2058 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2058 + 3u)).x));
                            _2083 = fma(_1322, _2071.z, fma(_1321, _2071.y, _2071.x * _1320)) + _2071.w;
                            _2084 = !((fma(_1322, _2052.z, fma(_1321, _2052.y, _2052.x * _1320)) + _2052.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            if (_2084)
                            {
                                float _2118 = _1994.x - _1320;
                                float _2119 = _1994.y - _1321;
                                float _2120 = _1994.z - _1322;
                                float _2121 = dot(vec3(_2118, _2119, _2120), vec3(_2118, _2119, _2120));
                                float _2124 = inversesqrt(_2121);
                                float _2131 = 1.0 - (_2121 / (_1995 * _1995));
                                float _2612 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
                                float _2133 = sqrt(_2121) * uintBitsToFloat(uvec4(_2087, _2088, _2089, texelFetch(g_SpotLightRenderingBuffer, int(((_1979 * 40u) + 4u) + 3u)).x)).w;
                                float _2135 = 1.39999997615814208984375 / (_2133 + 1.39999997615814208984375);
                                float _2136 = _2135 * _2135;
                                float _2139 = (fma(_1322, _2022.z, fma(_1321, _2022.y, _2022.x * _1320)) + _2022.w) / _2083;
                                float _2140 = (fma(_1322, _2037.z, fma(_1321, _2037.y, _2037.x * _1320)) + _2037.w) / _2083;
                                float _2144 = 1.0 - dot(vec2(_2139, _2140), vec2(_2139, _2140));
                                float _2623 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
                                float _2152 = dot(vec3(0.0), vec3((-0.0) - (_1320 * _1621), (-0.0) - (_1321 * _1621), (-0.0) - (_1322 * _1621)));
                                float _2634 = isnan(0.0) ? _2152 : (isnan(_2152) ? 0.0 : max(_2152, 0.0));
                                float _2160 = ((1.0 - _2136) * dot(vec3(0.0), vec3(_2124 * _2118, _2124 * _2119, _2124 * _2120))) + _2136;
                                float _2645 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
                                float _2161 = isnan(1.0) ? _2645 : (isnan(_2645) ? 1.0 : min(_2645, 1.0));
                                float _2165 = (0.5 / (((isnan(1.0) ? _2634 : (isnan(_2634) ? 1.0 : min(_2634, 1.0))) + 9.9999999392252902907785028219223e-09) + _2161)) * _2161;
                                float _2656 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
                                float _2172 = ((isnan(1.0) ? _2623 : (isnan(_2623) ? 1.0 : min(_2623, 1.0))) * (isnan(1.0) ? _2612 : (isnan(_2612) ? 1.0 : min(_2612, 1.0)))) * (((isnan(1.0) ? _2656 : (isnan(_2656) ? 1.0 : min(_2656, 1.0))) * 3.1415927410125732421875) / (((_2133 * _2133) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_83_pred = _2172 * _2007.z;
                                frontier_phi_83_pred_1 = _2172 * _2007.y;
                                frontier_phi_83_pred_2 = _2172 * _2007.x;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                            }
                            _2178 = frontier_phi_83_pred;
                            _2177 = frontier_phi_83_pred_1;
                            _2176 = frontier_phi_83_pred_2;
                            _1955 = _2176 + _1965;
                            _1956 = _2177 + _1966;
                            _1957 = _2178 + _1967;
                            if (_1969 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _1965 = _1955;
                                _1966 = _1956;
                                _1967 = _1957;
                                _1968 = _1969;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _1956;
                        frontier_phi_77_pred_1 = _1955;
                        frontier_phi_77_pred_2 = _1957;
                    }
                    _1608 = frontier_phi_77_pred;
                    _1606 = frontier_phi_77_pred_1;
                    _1610 = frontier_phi_77_pred_2;
                    uint _1802 = _1801 + 1u;
                    if (_1802 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _1798 = _1606;
                        _1799 = _1608;
                        _1800 = _1610;
                        _1801 = _1802;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _1610;
                frontier_phi_52_53_ladder_1 = _1608;
                frontier_phi_52_53_ladder_2 = _1606;
            }
            else
            {
                frontier_phi_52_53_ladder = _1461;
                frontier_phi_52_53_ladder_1 = _1459;
                frontier_phi_52_53_ladder_2 = _1457;
            }
            _1605 = frontier_phi_52_53_ladder_2;
            _1607 = frontier_phi_52_53_ladder_1;
            _1609 = frontier_phi_52_53_ladder;
        }
        float _1614 = isnan(1.0) ? _469 : (isnan(_469) ? 1.0 : min(_469, 1.0));
        _1380 = ((_1605 * 0.039999999105930328369140625) * _1614) + _1261;
        _1382 = ((_1607 * 0.039999999105930328369140625) * _1614) + _1262;
        _1384 = ((_1609 * 0.039999999105930328369140625) * _1614) + _1263;
    }
    else
    {
        _1380 = _1261;
        _1382 = _1262;
        _1384 = _1263;
    }
    uint _1390 = _1132 + 9u;
    uint _1391 = _1390 + uint(cbMatDynParam._m0[0u].w);
    float _1406 = ((cbMtdParam._m0[9u].x * _402.x) * cbInstanceData._m0[_1391].x) + ((_1380 + ((isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0))) * _891)) * cbPerFrame._m0[3u].x);
    float _1407 = ((cbMtdParam._m0[9u].y * _402.y) * cbInstanceData._m0[_1391].y) + ((_1382 + ((isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0))) * _891)) * cbPerFrame._m0[3u].x);
    float _1408 = ((cbMtdParam._m0[9u].z * _402.z) * cbInstanceData._m0[_1391].z) + ((_1384 + ((isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0))) * _891)) * cbPerFrame._m0[3u].x);
    float _1409 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
    float _1410 = isnan(0.0) ? _1407 : (isnan(_1407) ? 0.0 : max(_1407, 0.0));
    float _1411 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
    uint _1412 = _1132 + 6u;
    float _1420 = _456 / cbSceneParam._m0[86u].x;
    float _1421 = _457 / cbSceneParam._m0[86u].y;
    vec4 _1435 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1420, _1421, (log2((isnan(cbSceneParam._m0[77u].w) ? _430 : (isnan(_430) ? cbSceneParam._m0[77u].w : min(_430, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1437 = _1435.x;
    float _1438 = _1435.y;
    float _1439 = _1435.z;
    float _1440 = _1435.w;
    float _1514;
    float _1516;
    float _1518;
    float _1520;
    if (_430 > cbSceneParam._m0[78u].w)
    {
        float _1476 = isnan(_430) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _430 : min(cbSceneParam._m0[80u].w, _430));
        float _1477 = _1476 / _430;
        float _1488 = _1477 * _256;
        float _1489 = _257 * _1477;
        float _1490 = (-0.0) - _1489;
        float _1491 = _1477 * _258;
        float _1493 = (cbSceneParam._m0[77u].w * _1490) / _1476;
        float _1494 = _1493 + cbSceneParam._m0[79u].w;
        float _1495 = cbSceneParam._m0[79u].w - _1489;
        float _1501 = sqrt(((_1488 * _1488) + (_1489 * _1489)) + (_1491 * _1491));
        float _1504 = (1.0 - (cbSceneParam._m0[77u].w / _1476)) * _1501;
        float _1510 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1512 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1729;
        if (abs((_1490 - _1493) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1729 = ((((_1494 > 0.0) ? exp2(_1510 * _1494) : (2.0 - exp2(_1512 * _1494))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1504;
        }
        else
        {
            float _1651 = 1.0 / cbSceneParam._m0[80u].x;
            float _1652 = isnan(_1495) ? _1494 : (isnan(_1494) ? _1495 : max(_1494, _1495));
            float _1653 = isnan(_1495) ? _1494 : (isnan(_1494) ? _1495 : min(_1494, _1495));
            float _1662 = isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : min(_1652, 0.0));
            float _1663 = isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : min(_1653, 0.0));
            _1729 = ((abs(_1501 / _1490) * cbSceneParam._m0[80u].y) * ((((_1662 - _1663) * 2.0) - ((exp2(_1510 * (isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0)))) - exp2(_1510 * (isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0))))) * _1651)) - ((exp2(_1512 * _1662) - exp2(_1512 * _1663)) * _1651))) + (_1504 * cbSceneParam._m0[80u].z);
        }
        vec4 _1731 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1420, _1421, 1.0), 0.0);
        float _1740 = exp2((_1729 * (-1.44269502162933349609375)) * (1.0 - _1731.w));
        float _1741 = log2(_1740);
        float _1757 = log2(_1440);
        _1514 = (exp2(_1757 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1741 * cbSceneParam._m0[78u].x)) * _1731.x) / cbSceneParam._m0[78u].x)) + _1437;
        _1516 = (exp2(_1757 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1741 * cbSceneParam._m0[78u].y)) * _1731.y) / cbSceneParam._m0[78u].y)) + _1438;
        _1518 = (exp2(_1757 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1741 * cbSceneParam._m0[78u].z)) * _1731.z) / cbSceneParam._m0[78u].z)) + _1439;
        _1520 = _1740 * _1440;
    }
    else
    {
        _1514 = _1437;
        _1516 = _1438;
        _1518 = _1439;
        _1520 = _1440;
    }
    bool _1767;
    vec4 _1530;
    vec4 _1553;
    float _1555;
    float _1559;
    float _1560;
    float _1561;
    float _1562;
    bool _1573;
    for (;;)
    {
        _1530 = cbMatDynParam._m0[0u];
        float _1532 = roundEven(_1530.y);
        bool _1533 = _1532 == 3.0;
        float _1535 = log2(_1520);
        float _1542 = exp2(_1535 * cbSceneParam._m0[78u].x) * _1409;
        float _1543 = exp2(_1535 * cbSceneParam._m0[78u].y) * _1410;
        float _1544 = exp2(_1535 * cbSceneParam._m0[78u].z) * _1411;
        float _1551 = _444 + (-0.5);
        _1553 = cbMtdParam._m0[1u];
        _1555 = _1553.y * _1551;
        float _1558 = (_1532 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _1559 = _1558 * (_1533 ? _1542 : (_1542 + (cbSceneParam._m0[72u].w * _1514)));
        _1560 = _1558 * (_1533 ? _1543 : (_1543 + (cbSceneParam._m0[72u].w * _1516)));
        _1561 = _1558 * (_1533 ? _1544 : (_1544 + (cbSceneParam._m0[72u].w * _1518)));
        _1562 = _1551 * 0.999000012874603271484375;
        _1573 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_1573)
        {
            if ((cbInstanceData._m0[_1132 + 7u].x + _1562) < 0.5)
            {
                _1767 = true;
                break;
            }
        }
        uint _1686 = _1390 + uint(_1530.w);
        if ((cbInstanceData._m0[_1686].w < 1.0) && ((cbInstanceData._m0[_1686].w + _1562) < 0.5))
        {
            _1767 = true;
            break;
        }
        if ((_1555 + 1.0) < _1553.x)
        {
            _1767 = true;
            break;
        }
        _1767 = false;
        break;
    }
    float _1925;
    if (_1767)
    {
        discard_state = true;
        _1925 = 0.0;
    }
    else
    {
        _1925 = cbInstanceData._m0[_1412].w;
    }
    SV_Target.x = _1559;
    SV_Target.y = _1560;
    SV_Target.z = _1561;
    SV_Target.w = _1925;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1412].w;
    discard_exit();
}


