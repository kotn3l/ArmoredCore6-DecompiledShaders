#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_8;
layout(set = 0, binding = 11) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1272;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _200 = _199 * _192;
    float _201 = _199 * _193;
    float _202 = _199 * _194;
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = _206 * NORMAL.x;
    float _208 = _206 * NORMAL.y;
    float _209 = _206 * NORMAL.z;
    float _213 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _214 = _213 * TANGENT.x;
    float _215 = _213 * TANGENT.y;
    float _216 = _213 * TANGENT.z;
    float _261 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _271 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _261);
    float _272 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _261);
    float _273 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _261);
    vec4 _286 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _289 = _286.x;
    vec4 _307 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _324 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _289) + cbMtdParam._m0[12u].x) * _307.x;
    float _326 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _289) + cbMtdParam._m0[12u].y) * _307.y;
    float _328 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _289) + cbMtdParam._m0[12u].z) * _307.z;
    vec4 _346 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _382 = cbMtdParam._m0[24u].x + _271;
    float _383 = cbMtdParam._m0[24u].y + _272;
    float _384 = cbMtdParam._m0[24u].z + _273;
    float _398 = (-0.0) - dot(vec3(_382, _383, _384), vec3(_200, _201, _202));
    float _399 = (-0.0) - dot(vec3(_382, _383, _384), vec3(_214, _215, _216));
    float _400 = (-0.0) - dot(vec3(_382, _383, _384), vec3((-0.0) - _207, (-0.0) - _208, (-0.0) - _209));
    float _404 = inversesqrt(dot(vec3(_398, _399, _400), vec3(_398, _399, _400)));
    float _407 = _404 * _400;
    float _408 = (_404 * _398) + ((cbMtdParam._m0[22u].x * _289) * ((_346.x * 2.0) + (-1.0)));
    float _409 = (_404 * _399) + ((cbMtdParam._m0[22u].y * _289) * ((_346.y * 2.0) + (-1.0)));
    float _410 = _408 * cbMtdParam._m0[20u].w;
    float _411 = _409 * cbMtdParam._m0[20u].z;
    float _412 = fract(TEXCOORD.x);
    float _413 = fract(TEXCOORD.y);
    float _419;
    if (_410 > 0.0)
    {
        _419 = (1.0 - _412) / _410;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_410 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _412) / _410;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _419 = frontier_phi_3_2_ladder;
    }
    float _427;
    if (_411 > 0.0)
    {
        _427 = (1.0 - _413) / _411;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_411 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _413) / _411;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _427 = frontier_phi_7_6_ladder;
    }
    bool _429 = _407 > 0.0;
    float _431 = _429 ? (cbMtdParam._m0[16u].x / _407) : 5000.0;
    float _432 = isnan(_427) ? _419 : (isnan(_419) ? _427 : min(_419, _427));
    float _433 = isnan(_431) ? _432 : (isnan(_432) ? _431 : min(_432, _431));
    float _437 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _438 = _412 + (-0.5);
    float _441 = _413 + (-0.5);
    float _444 = ((_433 * _407) + _437) / _437;
    vec4 _469 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (((((_438 + (_433 * _410)) / _444) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (((((_441 + (_433 * _411)) / _444) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    float _482 = (_469.x * _289) * cbMtdParam._m0[9u].x;
    float _483 = (_469.y * _289) * cbMtdParam._m0[9u].y;
    float _484 = (_469.z * _289) * cbMtdParam._m0[9u].z;
    float _503 = _408 * cbMtdParam._m0[22u].w;
    float _504 = _409 * cbMtdParam._m0[22u].z;
    bool _505 = _503 > 0.0;
    float _510;
    if (_505)
    {
        _510 = (1.0 - _412) / _503;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_503 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _412) / _503;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _510 = frontier_phi_11_10_ladder;
    }
    bool _512 = _504 > 0.0;
    float _517;
    if (_512)
    {
        _517 = (1.0 - _413) / _504;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_504 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _413) / _504;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _517 = frontier_phi_15_14_ladder;
    }
    float _520 = _429 ? (cbMtdParam._m0[18u].x / _407) : 5000.0;
    float _521 = isnan(_517) ? _510 : (isnan(_510) ? _517 : min(_510, _517));
    float _522 = isnan(_520) ? _521 : (isnan(_521) ? _520 : min(_521, _520));
    float _526 = cbMtdParam._m0[19u].y * cbMtdParam._m0[18u].x;
    float _530 = ((_522 * _407) + _526) / _526;
    float _535 = cbMtdParam._m0[19u].x - cbMtdParam._m0[20u].x * trunc(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    float _537 = floor(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    vec4 _553 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_438 + (_522 * _503)) / _530) + 0.5) + _535) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_441 + (_522 * _504)) / _530) + 0.5) + _537) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[0u].w));
    float _568;
    if (_505)
    {
        _568 = (1.0 - _412) / _503;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_503 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _412) / _503;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _568 = frontier_phi_19_18_ladder;
    }
    float _574;
    if (_512)
    {
        _574 = (1.0 - _413) / _504;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_504 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _413) / _504;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _574 = frontier_phi_23_22_ladder;
    }
    float _576 = isnan(_574) ? _568 : (isnan(_568) ? _574 : min(_568, _574));
    float _577 = isnan(_520) ? _576 : (isnan(_576) ? _520 : min(_576, _520));
    float _584 = ((_577 * _407) + _526) / _526;
    vec4 _604 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_438 + (_577 * _503)) / _584) + 0.5) + _535) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_441 + (_577 * _504)) / _584) + 0.5) + _537) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[8u].w));
    float _606 = _604.x;
    float _616 = (((((cbMtdParam._m0[10u].x * _289) * _553.x) - _482) * _289) * _606) + _482;
    float _617 = (((((cbMtdParam._m0[10u].y * _289) * _553.y) - _483) * _289) * _606) + _483;
    float _618 = (((((cbMtdParam._m0[10u].z * _289) * _553.z) - _484) * _289) * _606) + _484;
    float _634 = _408 * cbMtdParam._m0[23u].y;
    float _635 = _409 * cbMtdParam._m0[23u].x;
    bool _636 = _634 > 0.0;
    float _641;
    if (_636)
    {
        _641 = (1.0 - _412) / _634;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_634 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _412) / _634;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _641 = frontier_phi_27_26_ladder;
    }
    bool _643 = _635 > 0.0;
    float _648;
    if (_643)
    {
        _648 = (1.0 - _413) / _635;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_635 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _413) / _635;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _648 = frontier_phi_31_30_ladder;
    }
    float _651 = _429 ? (cbMtdParam._m0[19u].w / _407) : 5000.0;
    float _652 = isnan(_648) ? _641 : (isnan(_641) ? _648 : min(_641, _648));
    float _653 = isnan(_651) ? _652 : (isnan(_652) ? _651 : min(_652, _651));
    float _657 = cbMtdParam._m0[19u].w * cbMtdParam._m0[16u].z;
    float _661 = ((_653 * _407) + _657) / _657;
    float _666 = cbMtdParam._m0[19u].z - cbMtdParam._m0[23u].z * trunc(cbMtdParam._m0[19u].z / cbMtdParam._m0[23u].z);
    float _668 = floor(cbMtdParam._m0[19u].z / cbMtdParam._m0[23u].z);
    vec4 _684 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * (((((_438 + (_653 * _634)) / _661) + 0.5) + _666) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * (((((_441 + (_653 * _635)) / _661) + 0.5) + _668) / cbMtdParam._m0[23u].w)) + cbTextureTilingScale._m0[9u].w));
    float _699;
    if (_636)
    {
        _699 = (1.0 - _412) / _634;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_634 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _412) / _634;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _699 = frontier_phi_35_34_ladder;
    }
    float _705;
    if (_643)
    {
        _705 = (1.0 - _413) / _635;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_635 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _413) / _635;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _705 = frontier_phi_39_38_ladder;
    }
    float _707 = isnan(_705) ? _699 : (isnan(_699) ? _705 : min(_699, _705));
    float _708 = isnan(_651) ? _707 : (isnan(_707) ? _651 : min(_707, _651));
    float _715 = ((_708 * _407) + _657) / _657;
    vec4 _735 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_438 + (_708 * _634)) / _715) + 0.5) + _666) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_441 + (_708 * _635)) / _715) + 0.5) + _668) / cbMtdParam._m0[23u].w)) + cbTextureTilingScale._m0[10u].w));
    float _737 = _735.x;
    float _747 = _289 * 0.1500000059604644775390625;
    float _758 = (_747 * ((_616 - _324) + (((((cbMtdParam._m0[14u].x * _289) * _684.x) - _616) * _289) * _737))) + _324;
    float _759 = (_747 * ((_617 - _326) + (((((cbMtdParam._m0[14u].y * _289) * _684.y) - _617) * _289) * _737))) + _326;
    float _760 = (_747 * ((_618 - _328) + (((((cbMtdParam._m0[14u].z * _289) * _684.z) - _618) * _289) * _737))) + _328;
    vec4 _773 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _777 = _773.z;
    float _780 = (_773.x * 2.0) + (-1.0);
    float _781 = (_773.y * 2.0) + (-1.0);
    float _782 = dot(vec2(_780, _781), vec2(_780, _781));
    float _3451 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _787 = sqrt(1.0 - (isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0))));
    float _790 = fma(_787, _207, fma(_781, _214, _780 * _200));
    float _793 = fma(_787, _208, fma(_781, _215, _780 * _201));
    float _796 = fma(_787, _209, fma(_781, _216, _780 * _202));
    float _800 = inversesqrt(dot(vec3(_790, _793, _796), vec3(_790, _793, _796)));
    float _801 = _800 * _790;
    float _802 = _800 * _793;
    float _803 = _800 * _796;
    float _3462 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _804 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
    float _3473 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _3484 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _3495 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _823 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _827 = inversesqrt(dot(vec3(_271, _272, _273), vec3(_271, _272, _273)));
    float _828 = _271 * _827;
    float _829 = _272 * _827;
    float _830 = _273 * _827;
    float _836 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _837 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _856 = fma(_803, cbSceneParam._m0[5u].z, fma(_802, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _801));
    float _859 = fma(_803, cbSceneParam._m0[6u].z, fma(_802, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _801));
    float _862 = fma(_803, cbSceneParam._m0[7u].z, fma(_802, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _801));
    uint _875 = uint(roundEven(NORMAL.w)) * 13u;
    uint _878 = (_875 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _884 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0)))) * cbInstanceData._m0[_878].x;
    float _885 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0)))) * cbInstanceData._m0[_878].y;
    float _886 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0)))) * cbInstanceData._m0[_878].z;
    float _3506 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _887 = isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0));
    float _3517 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _888 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
    float _3528 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _889 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
    vec4 _898 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _836, cbSceneParam._m0[86u].y * _837));
    float _901 = _898.x * TEXCOORD_4.z;
    float _902 = dot(vec3(_801, _802, _803), vec3(_828, _829, _830));
    float _905 = _902 * 2.0;
    float _909 = (_905 * _801) - _828;
    float _910 = (_905 * _802) - _829;
    float _911 = (_905 * _803) - _830;
    float _915 = abs(dot(vec3(_828, _829, _830), vec3(_801, _802, _803)));
    float _3539 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
    float _917 = sqrt(_804);
    float _930 = exp2((_917 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_917 * 3.0));
    float _962 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _966 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _970 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1271;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    float _1285;
    float _1286;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _998 = fma(_970, cbModelParam._m0[26u].z, fma(_966, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _962));
        float _1002 = fma(_970, cbModelParam._m0[27u].z, fma(_966, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _962));
        float _1006 = fma(_970, cbModelParam._m0[28u].z, fma(_966, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _962));
        float _1029 = _962 + _801;
        float _1030 = _966 + _802;
        float _1031 = _970 + _803;
        float _1041 = fma(_1031, cbModelParam._m0[26u].z, fma(_1030, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1029)) - _998;
        float _1042 = fma(_1031, cbModelParam._m0[27u].z, fma(_1030, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1029)) - _1002;
        float _1043 = fma(_1031, cbModelParam._m0[28u].z, fma(_1030, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1029)) - _1006;
        float _1047 = inversesqrt(dot(vec3(_1041, _1042, _1043), vec3(_1041, _1042, _1043)));
        float _1060 = ((_1047 * _1041) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_998 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1061 = ((_1047 * _1042) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1002 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1062 = ((_1047 * _1043) / cbModelParam._m0[34u].z) + ((((((_1006 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1065 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1060, _1061, _1062), 0.0);
        vec4 _1072 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1060, _1061, _1062), 0.0);
        vec4 _1079 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1060, _1061, _1062), 0.0);
        vec4 _1086 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1060, _1061, _1062), 0.0);
        float _1099 = exp2((_1065.w + (-0.5)) * 20.0) * 2.0;
        float _1100 = _1099 * (_1065.x + (-0.5));
        float _1101 = _1099 * (_1065.y + (-0.5));
        float _1102 = _1099 * (_1065.z + (-0.5));
        float _1109 = exp2((_1072.w + (-0.5)) * 20.0) * 2.0;
        float _1110 = _1109 * (_1072.x + (-0.5));
        float _1111 = _1109 * (_1072.y + (-0.5));
        float _1112 = _1109 * (_1072.z + (-0.5));
        float _1119 = exp2((_1079.w + (-0.5)) * 20.0) * 2.0;
        float _1120 = _1119 * (_1079.x + (-0.5));
        float _1121 = _1119 * (_1079.y + (-0.5));
        float _1122 = _1119 * (_1079.z + (-0.5));
        float _1129 = exp2((_1086.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1086.x + (-0.5));
        float _1131 = _1129 * (_1086.y + (-0.5));
        float _1132 = _1129 * (_1086.z + (-0.5));
        float _1133 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1134 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1135 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1136 = _1100 * 0.5;
        float _1137 = _1110 * 0.5;
        float _1138 = _1120 * 0.5;
        float _1139 = dot(vec3(_1136, _1137, _1138), vec3(_1136, _1137, _1138));
        float _1144 = (_1139 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1139);
        float _1153 = (dot(vec3(_801, _802, _803), vec3(_1144 * _1136, _1144 * _1137, _1144 * _1138)) + 1.0) * 0.5;
        float _3565 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1163 = sqrt(((_1137 * _1137) + (_1136 * _1136)) + (_1138 * _1138)) / (_1133 + 9.9999997473787516355514526367188e-06);
        float _3576 = isnan(0.0) ? _1163 : (isnan(_1163) ? 0.0 : max(_1163, 0.0));
        float _1164 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
        float _1165 = _1164 * 2.0;
        float _1169 = (1.0 - _1164) / (_1164 + 1.0);
        float _3587 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1170 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
        float _1179 = ((((1.0 - _1170) * (_1165 + 2.0)) * exp2(log2(isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0))) * (_1165 + 1.0))) + _1170) * _1133;
        float _1180 = _1101 * 0.5;
        float _1181 = _1111 * 0.5;
        float _1182 = _1121 * 0.5;
        float _1183 = dot(vec3(_1180, _1181, _1182), vec3(_1180, _1181, _1182));
        float _1188 = (_1183 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1183);
        float _1196 = (dot(vec3(_801, _802, _803), vec3(_1188 * _1180, _1188 * _1181, _1188 * _1182)) + 1.0) * 0.5;
        float _3598 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1205 = sqrt(((_1181 * _1181) + (_1180 * _1180)) + (_1182 * _1182)) / (_1134 + 9.9999997473787516355514526367188e-06);
        float _3609 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
        float _1207 = _1206 * 2.0;
        float _1211 = (1.0 - _1206) / (_1206 + 1.0);
        float _3620 = isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0));
        float _1212 = isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0));
        float _1221 = ((((1.0 - _1212) * (_1207 + 2.0)) * exp2(log2(isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0))) * (_1207 + 1.0))) + _1212) * _1134;
        float _1222 = _1102 * 0.5;
        float _1223 = _1112 * 0.5;
        float _1224 = _1122 * 0.5;
        float _1225 = dot(vec3(_1222, _1223, _1224), vec3(_1222, _1223, _1224));
        float _1230 = (_1225 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1225);
        float _1238 = (dot(vec3(_801, _802, _803), vec3(_1230 * _1222, _1230 * _1223, _1230 * _1224)) + 1.0) * 0.5;
        float _3631 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1247 = sqrt(((_1223 * _1223) + (_1222 * _1222)) + (_1224 * _1224)) / (_1135 + 9.9999997473787516355514526367188e-06);
        float _3642 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
        float _1249 = _1248 * 2.0;
        float _1253 = (1.0 - _1248) / (_1248 + 1.0);
        float _3653 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1254 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
        float _1263 = ((((1.0 - _1254) * (_1249 + 2.0)) * exp2(log2(isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0))) * (_1249 + 1.0))) + _1254) * _1135;
        _1271 = _1102;
        _1273 = _1101;
        _1274 = _1100;
        _1275 = _1112;
        _1276 = _1111;
        _1277 = _1110;
        _1278 = _1122;
        _1279 = _1121;
        _1280 = _1120;
        _1281 = _1135;
        _1282 = _1134;
        _1283 = _1133;
        _1284 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0)));
        _1285 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0)));
        _1286 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0)));
    }
    else
    {
        _1271 = _1272;
        _1273 = _1272;
        _1274 = _1272;
        _1275 = _1272;
        _1276 = _1272;
        _1277 = _1272;
        _1278 = _1272;
        _1279 = _1272;
        _1280 = _1272;
        _1281 = _1272;
        _1282 = _1272;
        _1283 = _1272;
        _1284 = 0.0;
        _1285 = 0.0;
        _1286 = 0.0;
    }
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    float _1594;
    float _1595;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1312 = fma(_970, cbModelParam._m0[30u].z, fma(_966, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _962));
        float _1316 = fma(_970, cbModelParam._m0[31u].z, fma(_966, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _962));
        float _1320 = fma(_970, cbModelParam._m0[32u].z, fma(_966, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _962));
        float _1343 = _962 + _801;
        float _1344 = _966 + _802;
        float _1345 = _970 + _803;
        float _1355 = fma(_1345, cbModelParam._m0[30u].z, fma(_1344, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1343)) - _1312;
        float _1356 = fma(_1345, cbModelParam._m0[31u].z, fma(_1344, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1343)) - _1316;
        float _1357 = fma(_1345, cbModelParam._m0[32u].z, fma(_1344, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1343)) - _1320;
        float _1361 = inversesqrt(dot(vec3(_1355, _1356, _1357), vec3(_1355, _1356, _1357)));
        float _1374 = ((_1361 * _1355) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1312 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1375 = ((_1361 * _1356) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1316 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1376 = ((_1361 * _1357) / cbModelParam._m0[35u].z) + ((((((_1320 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1378 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1374, _1375, _1376), 0.0);
        vec4 _1385 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1374, _1375, _1376), 0.0);
        vec4 _1392 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1374, _1375, _1376), 0.0);
        vec4 _1399 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1374, _1375, _1376), 0.0);
        float _1411 = exp2((_1378.w + (-0.5)) * 20.0) * 2.0;
        float _1412 = _1411 * (_1378.x + (-0.5));
        float _1413 = _1411 * (_1378.y + (-0.5));
        float _1414 = _1411 * (_1378.z + (-0.5));
        float _1421 = exp2((_1385.w + (-0.5)) * 20.0) * 2.0;
        float _1422 = _1421 * (_1385.x + (-0.5));
        float _1423 = _1421 * (_1385.y + (-0.5));
        float _1424 = _1421 * (_1385.z + (-0.5));
        float _1431 = exp2((_1392.w + (-0.5)) * 20.0) * 2.0;
        float _1432 = _1431 * (_1392.x + (-0.5));
        float _1433 = _1431 * (_1392.y + (-0.5));
        float _1434 = _1431 * (_1392.z + (-0.5));
        float _1441 = exp2((_1399.w + (-0.5)) * 20.0) * 2.0;
        float _1442 = _1441 * (_1399.x + (-0.5));
        float _1443 = _1441 * (_1399.y + (-0.5));
        float _1444 = _1441 * (_1399.z + (-0.5));
        float _1445 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1446 = isnan(0.0) ? _1443 : (isnan(_1443) ? 0.0 : max(_1443, 0.0));
        float _1447 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1448 = _1412 * 0.5;
        float _1449 = _1422 * 0.5;
        float _1450 = _1432 * 0.5;
        float _1451 = dot(vec3(_1448, _1449, _1450), vec3(_1448, _1449, _1450));
        float _1456 = (_1451 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1451);
        float _1464 = (dot(vec3(_801, _802, _803), vec3(_1456 * _1448, _1456 * _1449, _1456 * _1450)) + 1.0) * 0.5;
        float _3694 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1473 = sqrt(((_1449 * _1449) + (_1448 * _1448)) + (_1450 * _1450)) / (_1445 + 9.9999997473787516355514526367188e-06);
        float _3705 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1474 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
        float _1475 = _1474 * 2.0;
        float _1479 = (1.0 - _1474) / (_1474 + 1.0);
        float _3716 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1480 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _1489 = ((((1.0 - _1480) * (_1475 + 2.0)) * exp2(log2(isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0))) * (_1475 + 1.0))) + _1480) * _1445;
        float _1490 = _1413 * 0.5;
        float _1491 = _1423 * 0.5;
        float _1492 = _1433 * 0.5;
        float _1493 = dot(vec3(_1490, _1491, _1492), vec3(_1490, _1491, _1492));
        float _1498 = (_1493 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1493);
        float _1506 = (dot(vec3(_801, _802, _803), vec3(_1498 * _1490, _1498 * _1491, _1498 * _1492)) + 1.0) * 0.5;
        float _3727 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1515 = sqrt(((_1491 * _1491) + (_1490 * _1490)) + (_1492 * _1492)) / (_1446 + 9.9999997473787516355514526367188e-06);
        float _3738 = isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0));
        float _1516 = isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0));
        float _1517 = _1516 * 2.0;
        float _1521 = (1.0 - _1516) / (_1516 + 1.0);
        float _3749 = isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0));
        float _1522 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _1531 = ((((1.0 - _1522) * (_1517 + 2.0)) * exp2(log2(isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0))) * (_1517 + 1.0))) + _1522) * _1446;
        float _1532 = _1414 * 0.5;
        float _1533 = _1424 * 0.5;
        float _1534 = _1434 * 0.5;
        float _1535 = dot(vec3(_1532, _1533, _1534), vec3(_1532, _1533, _1534));
        float _1540 = (_1535 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1535);
        float _1548 = (dot(vec3(_801, _802, _803), vec3(_1540 * _1532, _1540 * _1533, _1540 * _1534)) + 1.0) * 0.5;
        float _3760 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1557 = sqrt(((_1533 * _1533) + (_1532 * _1532)) + (_1534 * _1534)) / (_1447 + 9.9999997473787516355514526367188e-06);
        float _3771 = isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0));
        float _1558 = isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0));
        float _1559 = _1558 * 2.0;
        float _1563 = (1.0 - _1558) / (_1558 + 1.0);
        float _3782 = isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0));
        float _1564 = isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0));
        float _1573 = ((((1.0 - _1564) * (_1559 + 2.0)) * exp2(log2(isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0))) * (_1559 + 1.0))) + _1564) * _1447;
        _1581 = _1414;
        _1582 = _1413;
        _1583 = _1412;
        _1584 = _1424;
        _1585 = _1423;
        _1586 = _1422;
        _1587 = _1434;
        _1588 = _1433;
        _1589 = _1432;
        _1590 = _1447;
        _1591 = _1446;
        _1592 = _1445;
        _1593 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0)));
        _1594 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0)));
        _1595 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1573 : (isnan(_1573) ? 0.0 : max(_1573, 0.0)));
    }
    else
    {
        _1581 = _1272;
        _1582 = _1272;
        _1583 = _1272;
        _1584 = _1272;
        _1585 = _1272;
        _1586 = _1272;
        _1587 = _1272;
        _1588 = _1272;
        _1589 = _1272;
        _1590 = _1272;
        _1591 = _1272;
        _1592 = _1272;
        _1593 = 0.0;
        _1594 = 0.0;
        _1595 = 0.0;
    }
    float _1605 = (cbModelParam._m0[1u].x * (_1593 - _1284)) + _1284;
    float _1606 = (cbModelParam._m0[1u].x * (_1594 - _1285)) + _1285;
    float _1607 = (cbModelParam._m0[1u].x * (_1595 - _1286)) + _1286;
    float _1628 = fma(_1607, cbSceneParam._m0[89u].z, fma(_1606, cbSceneParam._m0[89u].y, _1605 * cbSceneParam._m0[89u].x));
    float _1631 = fma(_1607, cbSceneParam._m0[90u].z, fma(_1606, cbSceneParam._m0[90u].y, _1605 * cbSceneParam._m0[90u].x));
    float _1634 = fma(_1607, cbSceneParam._m0[91u].z, fma(_1606, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1605));
    float _1649 = _909 * 0.5;
    float _1650 = _910 * 0.5;
    float _1651 = _911 * 0.5;
    float _1652 = dot(vec4(_1649, _1650, _1651, 1.0), vec4(_1583, _1586, _1589, _1592));
    float _1655 = dot(vec4(_1649, _1650, _1651, 1.0), vec4(_1582, _1585, _1588, _1591));
    float _1658 = dot(vec4(_1649, _1650, _1651, 1.0), vec4(_1581, _1584, _1587, _1590));
    float _1692;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1665 = dot(vec4(_1649, _1650, _1651, 1.0), vec4(_1271, _1275, _1278, _1281));
        float _1669 = dot(vec4(_1649, _1650, _1651, 1.0), vec4(_1273, _1276, _1279, _1282));
        float _1673 = dot(vec4(_1649, _1650, _1651, 1.0), vec4(_1274, _1277, _1280, _1283));
        float _1680 = dot(vec4(cbModelParam._m0[39u]), vec4(_1649, _1650, _1651, 1.0));
        _1692 = dot(vec3(isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0)), isnan(0.0) ? _1669 : (isnan(_1669) ? 0.0 : max(_1669, 0.0)), isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1680) ? 0.0 : (isnan(0.0) ? _1680 : max(0.0, _1680))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1692 = 1.0;
    }
    float _1703;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1694 = dot(vec4(cbModelParam._m0[40u]), vec4(_1649, _1650, _1651, 1.0));
        _1703 = dot(vec3(isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0)), isnan(0.0) ? _1655 : (isnan(_1655) ? 0.0 : max(_1655, 0.0)), isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1694) ? 0.0 : (isnan(0.0) ? _1694 : max(0.0, _1694))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1703 = 1.0;
    }
    float _1707 = (_1703 * cbModelParam._m0[1u].x) + (_1692 * (1.0 - cbModelParam._m0[1u].x));
    float _1717 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _804);
    float _1718 = isnan(_1717) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1717 : min(cbModelParam._m0[25u].z, _1717));
    float _1799;
    float _1801;
    float _1803;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1766 = fma(_970, cbModelParam._m0[13u].z, fma(_966, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _962)) + cbModelParam._m0[13u].w;
        float _1770 = fma(_970, cbModelParam._m0[14u].z, fma(_966, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _962)) + cbModelParam._m0[14u].w;
        float _1774 = fma(_970, cbModelParam._m0[15u].z, fma(_966, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _962)) + cbModelParam._m0[15u].w;
        float _1777 = fma(_911, cbModelParam._m0[13u].z, fma(_910, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _909));
        float _1780 = fma(_911, cbModelParam._m0[14u].z, fma(_910, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _909));
        float _1783 = fma(_911, cbModelParam._m0[15u].z, fma(_910, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _909));
        float _1811;
        if (_1777 > 0.0)
        {
            _1811 = abs((1.0 - _1766) / _1777);
        }
        else
        {
            float frontier_phi_54_52_ladder;
            if (_1777 < 0.0)
            {
                frontier_phi_54_52_ladder = abs((_1766 + 1.0) / _1777);
            }
            else
            {
                frontier_phi_54_52_ladder = 5000.0;
            }
            _1811 = frontier_phi_54_52_ladder;
        }
        float _2180;
        if (_1780 > 0.0)
        {
            _2180 = abs((1.0 - _1770) / _1780);
        }
        else
        {
            float frontier_phi_63_59_ladder;
            if (_1780 < 0.0)
            {
                frontier_phi_63_59_ladder = abs((_1770 + 1.0) / _1780);
            }
            else
            {
                frontier_phi_63_59_ladder = 5000.0;
            }
            _2180 = frontier_phi_63_59_ladder;
        }
        float _2480;
        if (_1783 > 0.0)
        {
            _2480 = abs((1.0 - _1774) / _1783);
        }
        else
        {
            float frontier_phi_77_70_ladder;
            if (_1783 < 0.0)
            {
                frontier_phi_77_70_ladder = abs((_1774 + 1.0) / _1783);
            }
            else
            {
                frontier_phi_77_70_ladder = 5000.0;
            }
            _2480 = frontier_phi_77_70_ladder;
        }
        float _2482 = isnan(_2180) ? _1811 : (isnan(_1811) ? _2180 : min(_1811, _2180));
        float _2483 = isnan(_2480) ? _2482 : (isnan(_2482) ? _2480 : min(_2482, _2480));
        float _2487 = (_2483 * _1777) + _1766;
        float _2488 = (_2483 * _1780) + _1770;
        float _2489 = (_2483 * _1783) + _1774;
        float _2490 = _2483 * 9.9999997473787516355514526367188e-05;
        float _2491 = (-1.0) - _2490;
        float _2493 = _2490 + 1.0;
        float frontier_phi_53_77_ladder;
        float frontier_phi_53_77_ladder_1;
        float frontier_phi_53_77_ladder_2;
        if ((_2489 > _2493) || ((_2489 < _2491) || ((_2488 > _2493) || ((_2488 < _2491) || ((_2487 < _2491) || (_2487 > _2493))))))
        {
            frontier_phi_53_77_ladder = 0.0;
            frontier_phi_53_77_ladder_1 = 0.0;
            frontier_phi_53_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2615 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2489, cbModelParam._m0[9u].z, fma(_2488, cbModelParam._m0[9u].y, _2487 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2489, cbModelParam._m0[10u].z, fma(_2488, cbModelParam._m0[10u].y, _2487 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2489, cbModelParam._m0[11u].z, fma(_2488, cbModelParam._m0[11u].y, _2487 * cbModelParam._m0[11u].x))), _1718);
            frontier_phi_53_77_ladder = _2615.x * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_1 = _2615.y * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_2 = _2615.z * cbModelParam._m0[1u].y;
        }
        _1799 = frontier_phi_53_77_ladder;
        _1801 = frontier_phi_53_77_ladder_1;
        _1803 = frontier_phi_53_77_ladder_2;
    }
    else
    {
        vec4 _1787 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_909, _910, _911), _1718);
        _1799 = _1787.x * cbModelParam._m0[1u].y;
        _1801 = _1787.y * cbModelParam._m0[1u].y;
        _1803 = _1787.z * cbModelParam._m0[1u].y;
    }
    float _1807 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _804);
    float _1808 = isnan(_1807) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1807 : min(cbModelParam._m0[25u].w, _1807));
    float _1896;
    float _1898;
    float _1900;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1860 = fma(_970, cbModelParam._m0[21u].z, fma(_966, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _962)) + cbModelParam._m0[21u].w;
        float _1864 = fma(_970, cbModelParam._m0[22u].z, fma(_966, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _962)) + cbModelParam._m0[22u].w;
        float _1868 = fma(_970, cbModelParam._m0[23u].z, fma(_966, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _962)) + cbModelParam._m0[23u].w;
        float _1871 = fma(_911, cbModelParam._m0[21u].z, fma(_910, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _909));
        float _1874 = fma(_911, cbModelParam._m0[22u].z, fma(_910, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _909));
        float _1877 = fma(_911, cbModelParam._m0[23u].z, fma(_910, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _909));
        float _2185;
        if (_1871 > 0.0)
        {
            _2185 = abs((1.0 - _1860) / _1871);
        }
        else
        {
            float frontier_phi_65_61_ladder;
            if (_1871 < 0.0)
            {
                frontier_phi_65_61_ladder = abs((_1860 + 1.0) / _1871);
            }
            else
            {
                frontier_phi_65_61_ladder = 5000.0;
            }
            _2185 = frontier_phi_65_61_ladder;
        }
        float _2506;
        if (_1874 > 0.0)
        {
            _2506 = abs((1.0 - _1864) / _1874);
        }
        else
        {
            float frontier_phi_79_72_ladder;
            if (_1874 < 0.0)
            {
                frontier_phi_79_72_ladder = abs((_1864 + 1.0) / _1874);
            }
            else
            {
                frontier_phi_79_72_ladder = 5000.0;
            }
            _2506 = frontier_phi_79_72_ladder;
        }
        float _2675;
        if (_1877 > 0.0)
        {
            _2675 = abs((1.0 - _1868) / _1877);
        }
        else
        {
            float frontier_phi_93_88_ladder;
            if (_1877 < 0.0)
            {
                frontier_phi_93_88_ladder = abs((_1868 + 1.0) / _1877);
            }
            else
            {
                frontier_phi_93_88_ladder = 5000.0;
            }
            _2675 = frontier_phi_93_88_ladder;
        }
        float _2677 = isnan(_2506) ? _2185 : (isnan(_2185) ? _2506 : min(_2185, _2506));
        float _2678 = isnan(_2675) ? _2677 : (isnan(_2677) ? _2675 : min(_2677, _2675));
        float _2682 = (_2678 * _1871) + _1860;
        float _2683 = (_2678 * _1874) + _1864;
        float _2684 = (_2678 * _1877) + _1868;
        float _2685 = _2678 * 9.9999997473787516355514526367188e-05;
        float _2686 = (-1.0) - _2685;
        float _2688 = _2685 + 1.0;
        float frontier_phi_62_93_ladder;
        float frontier_phi_62_93_ladder_1;
        float frontier_phi_62_93_ladder_2;
        if ((_2684 > _2688) || ((_2684 < _2686) || ((_2683 > _2688) || ((_2683 < _2686) || ((_2682 < _2686) || (_2682 > _2688))))))
        {
            frontier_phi_62_93_ladder = 0.0;
            frontier_phi_62_93_ladder_1 = 0.0;
            frontier_phi_62_93_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2917 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2684, cbModelParam._m0[17u].z, fma(_2683, cbModelParam._m0[17u].y, _2682 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2684, cbModelParam._m0[18u].z, fma(_2683, cbModelParam._m0[18u].y, _2682 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2684, cbModelParam._m0[19u].z, fma(_2683, cbModelParam._m0[19u].y, _2682 * cbModelParam._m0[19u].x))), _1808);
            frontier_phi_62_93_ladder = _2917.z * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_1 = _2917.y * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_2 = _2917.x * cbModelParam._m0[1u].z;
        }
        _1896 = frontier_phi_62_93_ladder_2;
        _1898 = frontier_phi_62_93_ladder_1;
        _1900 = frontier_phi_62_93_ladder;
    }
    else
    {
        vec4 _1880 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_909, _910, _911), _1808);
        _1896 = _1880.x * cbModelParam._m0[1u].z;
        _1898 = _1880.y * cbModelParam._m0[1u].z;
        _1900 = _1880.z * cbModelParam._m0[1u].z;
    }
    float _1912 = ((((1.0 - _930) * ((_917 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_930 * _917)) * _901;
    float _1913 = _1912 * ((cbModelParam._m0[1u].w * (_1896 - _1799)) + _1799);
    float _1914 = _1912 * ((cbModelParam._m0[1u].w * (_1898 - _1801)) + _1801);
    float _1915 = _1912 * ((cbModelParam._m0[1u].w * (_1900 - _1803)) + _1803);
    float _1918 = fma(_1915, cbSceneParam._m0[89u].z, fma(_1914, cbSceneParam._m0[89u].y, _1913 * cbSceneParam._m0[89u].x));
    float _1921 = fma(_1915, cbSceneParam._m0[90u].z, fma(_1914, cbSceneParam._m0[90u].y, _1913 * cbSceneParam._m0[90u].x));
    float _1924 = fma(_1915, cbSceneParam._m0[91u].z, fma(_1914, cbSceneParam._m0[91u].y, _1913 * cbSceneParam._m0[91u].x));
    vec4 _1932 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_836, _837));
    float _1934 = _1932.w;
    float _1946 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1934);
    float _1947 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1934);
    float _1948 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1934);
    uvec4 _1952 = floatBitsToUint(cbInstanceData._m0[_875 + 5u]);
    uint _1954 = _1952.x * 14u;
    uint _1955 = _1954 + 13u;
    float _1960 = _901 + (-1.0);
    float _1963 = (cbLight._m0[_1955].x * _1960) + 1.0;
    float _1964 = (cbLight._m0[_1955].y * _1960) + 1.0;
    uint _1965 = _1954 + 5u;
    float _1971 = isnan(1.0) ? _1964 : (isnan(_1964) ? 1.0 : min(_1964, 1.0));
    uint _1975 = _1954 + 4u;
    float _1984 = isnan(1.0) ? _1963 : (isnan(_1963) ? 1.0 : min(_1963, 1.0));
    uint _1988 = _1954 | 1u;
    float _1999 = dot(vec3(cbLight._m0[_1954].xyz), vec3(_801, _802, _803));
    float _2002 = dot(vec3(cbLight._m0[_1988].xyz), vec3(_801, _802, _803));
    float _3918 = isnan(0.0) ? _1999 : (isnan(_1999) ? 0.0 : max(_1999, 0.0));
    float _3929 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2007 = (isnan(1.0) ? _3918 : (isnan(_3918) ? 1.0 : min(_3918, 1.0))) * 0.3183098733425140380859375;
    float _2009 = (isnan(1.0) ? _3929 : (isnan(_3929) ? 1.0 : min(_3929, 1.0))) * 0.3183098733425140380859375;
    float _2016 = ((cbLight._m0[_1965].x * _1971) * _2009) + (((cbLight._m0[_1975].x * _1946) * _1984) * _2007);
    float _2017 = ((_1971 * cbLight._m0[_1965].y) * _2009) + (((cbLight._m0[_1975].y * _1947) * _1984) * _2007);
    float _2018 = ((_1971 * cbLight._m0[_1965].z) * _2009) + (((cbLight._m0[_1975].z * _1948) * _1984) * _2007);
    uint _2020 = _1954 + 8u;
    float _2033 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1954].w)) * _804) * 0.949999988079071044921875);
    float _2034 = _2033 * _2033;
    float _2035 = cbLight._m0[_1954].x + _828;
    float _2036 = cbLight._m0[_1954].y + _829;
    float _2037 = cbLight._m0[_1954].z + _830;
    float _2041 = inversesqrt(dot(vec3(_2035, _2036, _2037), vec3(_2035, _2036, _2037)));
    float _2042 = _2041 * _2035;
    float _2043 = _2041 * _2036;
    float _2044 = _2041 * _2037;
    float _2045 = dot(vec3(_801, _802, _803), vec3(cbLight._m0[_1954].xyz));
    float _3940 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
    float _2048 = isnan(1.0) ? _3940 : (isnan(_3940) ? 1.0 : min(_3940, 1.0));
    float _3951 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _2049 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
    float _2050 = dot(vec3(_801, _802, _803), vec3(_2042, _2043, _2044));
    float _3962 = isnan(0.0) ? _2050 : (isnan(_2050) ? 0.0 : max(_2050, 0.0));
    float _2053 = isnan(1.0) ? _3962 : (isnan(_3962) ? 1.0 : min(_3962, 1.0));
    float _2054 = dot(vec3(cbLight._m0[_1954].xyz), vec3(_2042, _2043, _2044));
    float _3973 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0));
    float _2058 = _2034 * _2034;
    float _2062 = ((_2053 * _2053) * (_2058 + (-1.0))) + 1.0;
    float _2073 = (exp2(log2(1.0 - (isnan(1.0) ? _3973 : (isnan(_3973) ? 1.0 : min(_3973, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2074 = 1.0 - _2034;
    float _2085 = (0.5 / (((_2049 * ((_2048 * _2074) + _2034)) + 9.9999999392252902907785028219223e-09) + (((_2049 * _2074) + _2034) * _2048))) * _2048;
    float _3984 = isnan(0.0) ? _2085 : (isnan(_2085) ? 0.0 : max(_2085, 0.0));
    float _2087 = (isnan(1.0) ? _3984 : (isnan(_3984) ? 1.0 : min(_3984, 1.0))) * (_2058 / ((_2062 * _2062) * 3.141590118408203125));
    uint _2101 = _1954 + 9u;
    float _2112 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1988].w)) * _804) * 0.949999988079071044921875);
    float _2113 = _2112 * _2112;
    float _2114 = cbLight._m0[_1988].x + _828;
    float _2115 = cbLight._m0[_1988].y + _829;
    float _2116 = cbLight._m0[_1988].z + _830;
    float _2120 = inversesqrt(dot(vec3(_2114, _2115, _2116), vec3(_2114, _2115, _2116)));
    float _2121 = _2120 * _2114;
    float _2122 = _2120 * _2115;
    float _2123 = _2120 * _2116;
    float _2124 = dot(vec3(_801, _802, _803), vec3(cbLight._m0[_1988].xyz));
    float _3995 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _2127 = isnan(1.0) ? _3995 : (isnan(_3995) ? 1.0 : min(_3995, 1.0));
    float _2128 = dot(vec3(_801, _802, _803), vec3(_2121, _2122, _2123));
    float _4006 = isnan(0.0) ? _2128 : (isnan(_2128) ? 0.0 : max(_2128, 0.0));
    float _2131 = isnan(1.0) ? _4006 : (isnan(_4006) ? 1.0 : min(_4006, 1.0));
    float _2132 = dot(vec3(cbLight._m0[_1988].xyz), vec3(_2121, _2122, _2123));
    float _4017 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _2136 = _2113 * _2113;
    float _2140 = ((_2131 * _2131) * (_2136 + (-1.0))) + 1.0;
    float _2149 = (exp2(log2(1.0 - (isnan(1.0) ? _4017 : (isnan(_4017) ? 1.0 : min(_4017, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2150 = 1.0 - _2113;
    float _2160 = (0.5 / (((_2049 * ((_2127 * _2150) + _2113)) + 9.9999999392252902907785028219223e-09) + (((_2049 * _2150) + _2113) * _2127))) * _2127;
    float _4028 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
    float _2162 = (isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0))) * (_2136 / ((_2140 * _2140) * 3.141590118408203125));
    float _2172 = (((_2149 * cbLight._m0[_2101].x) * _2162) * _1971) + ((((cbLight._m0[_2020].x * _1946) * _2073) * _2087) * _1984);
    float _2173 = (((_2149 * cbLight._m0[_2101].y) * _2162) * _1971) + ((((cbLight._m0[_2020].y * _1947) * _2073) * _2087) * _1984);
    float _2174 = (((_2149 * cbLight._m0[_2101].z) * _2162) * _1971) + ((((cbLight._m0[_2020].z * _1948) * _2073) * _2087) * _1984);
    float _2289;
    float _2291;
    float _2293;
    float _2295;
    float _2297;
    float _2299;
    if (_1952.y == 0u)
    {
        float _2229 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2230 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2229;
        float _2231 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2229;
        float _2232 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2229;
        uvec4 _2244 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2245 = _2244.x;
        uint _2256 = uint((float(_2244.y) * floor(float(uint(cbSceneParam._m0[85u].y * _837) / _2245))) + floor(float(uint(cbSceneParam._m0[85u].x * _836) / _2245)));
        float _2266 = (log2(_2232 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2267 = isnan(0.0) ? _2266 : (isnan(_2266) ? 0.0 : max(_2266, 0.0));
        uint _2270 = uint(isnan(14.0) ? _2267 : (isnan(_2267) ? 14.0 : min(_2267, 14.0)));
        uvec4 _2275 = texelFetch(g_lightClusterGridBuffer, int(((_2270 << 2u) + (_2256 << 6u)) >> 2u));
        uint _2276 = _2275.x;
        uint _2277 = _2244.z;
        float _2367;
        float _2369;
        float _2371;
        float _2373;
        float _2375;
        float _2377;
        if (((((1u << ((_2277 >> 4u) & 15u)) + 4294967295u) & _2276) == 0u) || ((_2277 & 240u) == 0u))
        {
            _2367 = 0.0;
            _2369 = 0.0;
            _2371 = 0.0;
            _2373 = 0.0;
            _2375 = 0.0;
            _2377 = 0.0;
        }
        else
        {
            float _2368;
            float _2370;
            float _2372;
            float _2374;
            float _2376;
            float _2378;
            float _2543 = 0.0;
            float _2544 = 0.0;
            float _2545 = 0.0;
            float _2546 = 0.0;
            float _2547 = 0.0;
            float _2548 = 0.0;
            uint _2549 = 0u;
            uint _2558;
            bool _2559;
            for (;;)
            {
                _2558 = texelFetch(g_lightClassification, int((((_2270 << 5u) + (_2256 << 9u)) + (_2549 << 2u)) >> 2u)).x;
                _2559 = _2558 == 0u;
                float frontier_phi_90_pred;
                float frontier_phi_90_pred_1;
                float frontier_phi_90_pred_2;
                float frontier_phi_90_pred_3;
                float frontier_phi_90_pred_4;
                float frontier_phi_90_pred_5;
                if (_2559)
                {
                    frontier_phi_90_pred = _2548;
                    frontier_phi_90_pred_1 = _2543;
                    frontier_phi_90_pred_2 = _2544;
                    frontier_phi_90_pred_3 = _2545;
                    frontier_phi_90_pred_4 = _2546;
                    frontier_phi_90_pred_5 = _2547;
                }
                else
                {
                    float _2718;
                    float _2719;
                    float _2720;
                    float _2721;
                    float _2722;
                    float _2723;
                    uint _2724;
                    _2718 = _2543;
                    _2719 = _2544;
                    _2720 = _2545;
                    _2721 = _2546;
                    _2722 = _2547;
                    _2723 = _2548;
                    _2724 = _2558;
                    float _2624;
                    float _2625;
                    float _2626;
                    float _2627;
                    float _2628;
                    float _2629;
                    for (;;)
                    {
                        uint _2728 = uint(findLSB(_2724)) + (_2549 << 5u);
                        uint _2725 = (_2724 + 4294967295u) & _2724;
                        uint _2730 = _2728 * 48u;
                        vec4 _2744 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2730)).x, texelFetch(g_PointLightRenderingBuffer, int(_2730 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2730 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2730 + 3u)).x));
                        uint _2750 = (_2728 * 48u) + 4u;
                        vec4 _2763 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2750)).x, texelFetch(g_PointLightRenderingBuffer, int(_2750 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2750 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2750 + 3u)).x));
                        uint _2769 = (_2728 * 48u) + 8u;
                        vec3 _2780 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2769)).x, texelFetch(g_PointLightRenderingBuffer, int(_2769 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2769 + 2u)).x));
                        float _2784 = _2744.x - _2230;
                        float _2785 = _2744.y - _2231;
                        float _2786 = _2744.z - _2232;
                        float _2787 = dot(vec3(_2784, _2785, _2786), vec3(_2784, _2785, _2786));
                        float _2790 = inversesqrt(_2787);
                        float _2791 = _2790 * _2784;
                        float _2792 = _2790 * _2785;
                        float _2793 = _2790 * _2786;
                        float _2794 = dot(vec3(_856, _859, _862), vec3(_2791, _2792, _2793));
                        float _2799 = 1.0 - (_2787 * _2744.w);
                        float _4049 = isnan(0.0) ? _2799 : (isnan(_2799) ? 0.0 : max(_2799, 0.0));
                        float _2800 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
                        float _2801 = sqrt(_2787) * _2763.w;
                        float _2804 = 1.39999997615814208984375 / (_2801 + 1.39999997615814208984375);
                        float _2805 = _2804 * _2804;
                        float _2808 = ((1.0 - _2805) * _2794) + _2805;
                        float _2811 = _2801 * _2801;
                        float _2815 = ((isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0))) * _2800) / ((_2811 * 0.699999988079071044921875) + 1.0);
                        float _2819 = (-0.0) - _2230;
                        float _2820 = (-0.0) - _2231;
                        float _2821 = (-0.0) - _2232;
                        float _2825 = inversesqrt(dot(vec3(_2819, _2820, _2821), vec3(_2819, _2820, _2821)));
                        float _2826 = _2825 * _2819;
                        float _2827 = _2825 * _2820;
                        float _2828 = _2825 * _2821;
                        float _2836 = exp2(log2(1.0 / ((_2811 * 3.5) + 5.0)) * 0.25);
                        float _2837 = 1.0 - _917;
                        float _2844 = sqrt(1.0 - ((1.0 - (_2837 * _2837)) * (1.0 - (_2836 * _2836))));
                        float _2845 = _2844 * _2844;
                        float _2846 = _2845 * _2845;
                        float _2847 = _2826 + _2791;
                        float _2848 = _2827 + _2792;
                        float _2849 = _2828 + _2793;
                        float _2853 = inversesqrt(dot(vec3(_2847, _2848, _2849), vec3(_2847, _2848, _2849)));
                        float _2857 = dot(vec3(_856, _859, _862), vec3(_2826, _2827, _2828));
                        float _4065 = isnan(0.0) ? _2857 : (isnan(_2857) ? 0.0 : max(_2857, 0.0));
                        float _2860 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
                        float _2861 = dot(vec3(_856, _859, _862), vec3(_2853 * _2847, _2853 * _2848, _2853 * _2849));
                        float _4076 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
                        float _2864 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
                        float _2868 = ((_2864 * _2864) * (_2846 + (-1.0))) + 1.0;
                        float _2869 = _2804 * _2845;
                        float _2870 = _2869 * _2869;
                        float _2873 = ((1.0 - _2870) * _2794) + _2870;
                        float _4087 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
                        float _2874 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
                        float _2875 = 1.0 - _2845;
                        float _2885 = (0.5 / (((_2874 * ((_2860 * _2875) + _2845)) + 9.9999999392252902907785028219223e-09) + (((_2874 * _2875) + _2845) * _2860))) * _2874;
                        float _4098 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
                        float _2896 = (((_2846 * 3.1415927410125732421875) * (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0)))) / ((_2868 * _2868) * ((_2811 * 2.1991131305694580078125) + 3.141590118408203125))) * _2800;
                        _2627 = (_2815 * _2763.x) + _2721;
                        _2628 = (_2815 * _2763.y) + _2722;
                        _2629 = (_2815 * _2763.z) + _2723;
                        _2624 = (_2896 * _2780.x) + _2718;
                        _2625 = (_2896 * _2780.y) + _2719;
                        _2626 = (_2896 * _2780.z) + _2720;
                        if (_2725 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2718 = _2624;
                            _2719 = _2625;
                            _2720 = _2626;
                            _2721 = _2627;
                            _2722 = _2628;
                            _2723 = _2629;
                            _2724 = _2725;
                        }
                    }
                    frontier_phi_90_pred = _2629;
                    frontier_phi_90_pred_1 = _2624;
                    frontier_phi_90_pred_2 = _2625;
                    frontier_phi_90_pred_3 = _2626;
                    frontier_phi_90_pred_4 = _2627;
                    frontier_phi_90_pred_5 = _2628;
                }
                _2378 = frontier_phi_90_pred;
                _2368 = frontier_phi_90_pred_1;
                _2370 = frontier_phi_90_pred_2;
                _2372 = frontier_phi_90_pred_3;
                _2374 = frontier_phi_90_pred_4;
                _2376 = frontier_phi_90_pred_5;
                uint _2550 = _2549 + 1u;
                if (_2550 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2543 = _2368;
                    _2544 = _2370;
                    _2545 = _2372;
                    _2546 = _2374;
                    _2547 = _2376;
                    _2548 = _2378;
                    _2549 = _2550;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2367 = _2368;
            _2369 = _2370;
            _2371 = _2372;
            _2373 = _2374;
            _2375 = _2376;
            _2377 = _2378;
        }
        uvec4 _2381 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2382 = _2381.z;
        uint _2384 = (_2382 >> 8u) & 15u;
        float _2511;
        float _2513;
        float _2515;
        float _2517;
        float _2519;
        float _2521;
        if (((4294967295u << _2384) & _2276) == 0u)
        {
            _2511 = _2367;
            _2513 = _2369;
            _2515 = _2371;
            _2517 = _2373;
            _2519 = _2375;
            _2521 = _2377;
        }
        else
        {
            float _2536 = inversesqrt(dot(vec3(_2230, _2231, _2232), vec3(_2230, _2231, _2232)));
            float _2537 = _2536 * _2230;
            float _2538 = _2536 * _2231;
            float _2539 = _2536 * _2232;
            float frontier_phi_81_82_ladder;
            float frontier_phi_81_82_ladder_1;
            float frontier_phi_81_82_ladder_2;
            float frontier_phi_81_82_ladder_3;
            float frontier_phi_81_82_ladder_4;
            float frontier_phi_81_82_ladder_5;
            if (_2384 < ((_2382 >> 12u) & 15u))
            {
                float _2512;
                float _2514;
                float _2516;
                float _2518;
                float _2520;
                float _2522;
                float _2701 = _2367;
                float _2702 = _2369;
                float _2703 = _2371;
                float _2704 = _2373;
                float _2705 = _2375;
                float _2706 = _2377;
                uint _2707 = _2384;
                uint _2716;
                bool _2717;
                for (;;)
                {
                    _2716 = texelFetch(g_lightClassification, int((((_2270 << 5u) + (_2256 << 9u)) + (_2707 << 2u)) >> 2u)).x;
                    _2717 = _2716 == 0u;
                    float frontier_phi_99_pred;
                    float frontier_phi_99_pred_1;
                    float frontier_phi_99_pred_2;
                    float frontier_phi_99_pred_3;
                    float frontier_phi_99_pred_4;
                    float frontier_phi_99_pred_5;
                    if (_2717)
                    {
                        frontier_phi_99_pred = _2704;
                        frontier_phi_99_pred_1 = _2703;
                        frontier_phi_99_pred_2 = _2702;
                        frontier_phi_99_pred_3 = _2701;
                        frontier_phi_99_pred_4 = _2706;
                        frontier_phi_99_pred_5 = _2705;
                    }
                    else
                    {
                        float _2922;
                        float _2923;
                        float _2924;
                        float _2925;
                        float _2926;
                        float _2927;
                        float _3215;
                        float _3216;
                        float _3217;
                        float _3218;
                        float _3219;
                        float _3220;
                        float _2935 = _2701;
                        float _2936 = _2702;
                        float _2937 = _2703;
                        float _2938 = _2704;
                        float _2939 = _2705;
                        float _2940 = _2706;
                        uint _2941 = _2716;
                        uint _2942;
                        vec4 _2967;
                        float _2968;
                        vec4 _2983;
                        vec3 _2995;
                        vec4 _3010;
                        vec4 _3025;
                        float _3071;
                        bool _3072;
                        for (;;)
                        {
                            uint _2952 = ((_2707 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2941));
                            _2942 = (_2941 + 4294967295u) & _2941;
                            uint _2954 = _2952 * 40u;
                            _2967 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2954)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 3u)).x));
                            _2968 = _2967.w;
                            uint _2970 = (_2952 * 40u) + 4u;
                            _2983 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2970)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2970 + 3u)).x));
                            uint _2985 = (_2952 * 40u) + 8u;
                            _2995 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2985)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2985 + 2u)).x));
                            uint _2997 = (_2952 * 40u) + 16u;
                            _3010 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2997)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2997 + 3u)).x));
                            uint _3012 = (_2952 * 40u) + 20u;
                            _3025 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3012)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3012 + 3u)).x));
                            uint _3027 = (_2952 * 40u) + 24u;
                            vec4 _3040 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3027)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 3u)).x));
                            uint _3046 = (_2952 * 40u) + 28u;
                            vec4 _3059 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3046)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3046 + 3u)).x));
                            _3071 = fma(_2232, _3059.z, fma(_2231, _3059.y, _3059.x * _2230)) + _3059.w;
                            _3072 = !((fma(_2232, _3040.z, fma(_2231, _3040.y, _3040.x * _2230)) + _3040.w) <= 0.0);
                            float frontier_phi_105_pred;
                            float frontier_phi_105_pred_1;
                            float frontier_phi_105_pred_2;
                            float frontier_phi_105_pred_3;
                            float frontier_phi_105_pred_4;
                            float frontier_phi_105_pred_5;
                            if (_3072)
                            {
                                float _3099 = _2967.x - _2230;
                                float _3100 = _2967.y - _2231;
                                float _3101 = _2967.z - _2232;
                                float _3102 = dot(vec3(_3099, _3100, _3101), vec3(_3099, _3100, _3101));
                                float _3105 = inversesqrt(_3102);
                                float _3106 = _3105 * _3099;
                                float _3107 = _3105 * _3100;
                                float _3108 = _3105 * _3101;
                                float _3112 = 1.0 - (_3102 / (_2968 * _2968));
                                float _4109 = isnan(0.0) ? _3112 : (isnan(_3112) ? 0.0 : max(_3112, 0.0));
                                float _3113 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
                                float _3117 = sqrt(_3102) * _2983.w;
                                float _3119 = 1.39999997615814208984375 / (_3117 + 1.39999997615814208984375);
                                float _3120 = _3119 * _3119;
                                float _3123 = ((1.0 - _3120) * dot(vec3(_3106, _3107, _3108), vec3(_856, _859, _862))) + _3120;
                                float _3126 = _3117 * _3117;
                                float _3130 = (fma(_2232, _3010.z, fma(_2231, _3010.y, _3010.x * _2230)) + _3010.w) / _3071;
                                float _3131 = (fma(_2232, _3025.z, fma(_2231, _3025.y, _3025.x * _2230)) + _3025.w) / _3071;
                                float _3135 = 1.0 - dot(vec2(_3130, _3131), vec2(_3130, _3131));
                                float _4125 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
                                float _3136 = isnan(1.0) ? _4125 : (isnan(_4125) ? 1.0 : min(_4125, 1.0));
                                float _3137 = _3136 * (((isnan(0.0) ? _3123 : (isnan(_3123) ? 0.0 : max(_3123, 0.0))) * _3113) / ((_3126 * 0.699999988079071044921875) + 1.0));
                                float _3149 = exp2(log2(1.0 / ((_3126 * 3.5) + 5.0)) * 0.25);
                                float _3150 = 1.0 - _917;
                                float _3157 = sqrt(1.0 - ((1.0 - (_3150 * _3150)) * (1.0 - (_3149 * _3149))));
                                float _3158 = _3157 * _3157;
                                float _3159 = _3158 * _3158;
                                float _3160 = _3106 - _2537;
                                float _3161 = _3107 - _2538;
                                float _3162 = _3108 - _2539;
                                float _3166 = inversesqrt(dot(vec3(_3160, _3161, _3162), vec3(_3160, _3161, _3162)));
                                float _3170 = dot(vec3(_856, _859, _862), vec3((-0.0) - _2537, (-0.0) - _2538, (-0.0) - _2539));
                                float _4136 = isnan(0.0) ? _3170 : (isnan(_3170) ? 0.0 : max(_3170, 0.0));
                                float _3173 = isnan(1.0) ? _4136 : (isnan(_4136) ? 1.0 : min(_4136, 1.0));
                                float _3174 = dot(vec3(_856, _859, _862), vec3(_3166 * _3160, _3166 * _3161, _3166 * _3162));
                                float _4147 = isnan(0.0) ? _3174 : (isnan(_3174) ? 0.0 : max(_3174, 0.0));
                                float _3177 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
                                float _3181 = ((_3177 * _3177) * (_3159 + (-1.0))) + 1.0;
                                float _3182 = _3119 * _3158;
                                float _3183 = _3182 * _3182;
                                float _3189 = ((1.0 - _3183) * dot(vec3(_856, _859, _862), vec3(_3106, _3107, _3108))) + _3183;
                                float _4158 = isnan(0.0) ? _3189 : (isnan(_3189) ? 0.0 : max(_3189, 0.0));
                                float _3190 = isnan(1.0) ? _4158 : (isnan(_4158) ? 1.0 : min(_4158, 1.0));
                                float _3191 = 1.0 - _3158;
                                float _3201 = (0.5 / (((_3190 * ((_3173 * _3191) + _3158)) + 9.9999999392252902907785028219223e-09) + (((_3190 * _3191) + _3158) * _3173))) * _3190;
                                float _4169 = isnan(0.0) ? _3201 : (isnan(_3201) ? 0.0 : max(_3201, 0.0));
                                float _3211 = (_3136 * _3113) * (((_3159 * 3.1415927410125732421875) * (isnan(1.0) ? _4169 : (isnan(_4169) ? 1.0 : min(_4169, 1.0)))) / ((_3181 * _3181) * ((_3126 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_105_pred = _3137 * _2983.z;
                                frontier_phi_105_pred_1 = _3211 * _2995.x;
                                frontier_phi_105_pred_2 = _3211 * _2995.y;
                                frontier_phi_105_pred_3 = _3211 * _2995.z;
                                frontier_phi_105_pred_4 = _3137 * _2983.x;
                                frontier_phi_105_pred_5 = _3137 * _2983.y;
                            }
                            else
                            {
                                frontier_phi_105_pred = 0.0;
                                frontier_phi_105_pred_1 = 0.0;
                                frontier_phi_105_pred_2 = 0.0;
                                frontier_phi_105_pred_3 = 0.0;
                                frontier_phi_105_pred_4 = 0.0;
                                frontier_phi_105_pred_5 = 0.0;
                            }
                            _3220 = frontier_phi_105_pred;
                            _3215 = frontier_phi_105_pred_1;
                            _3216 = frontier_phi_105_pred_2;
                            _3217 = frontier_phi_105_pred_3;
                            _3218 = frontier_phi_105_pred_4;
                            _3219 = frontier_phi_105_pred_5;
                            _2925 = _3218 + _2938;
                            _2926 = _3219 + _2939;
                            _2927 = _3220 + _2940;
                            _2922 = _3215 + _2935;
                            _2923 = _3216 + _2936;
                            _2924 = _3217 + _2937;
                            if (_2942 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2935 = _2922;
                                _2936 = _2923;
                                _2937 = _2924;
                                _2938 = _2925;
                                _2939 = _2926;
                                _2940 = _2927;
                                _2941 = _2942;
                                continue;
                            }
                        }
                        frontier_phi_99_pred = _2925;
                        frontier_phi_99_pred_1 = _2924;
                        frontier_phi_99_pred_2 = _2923;
                        frontier_phi_99_pred_3 = _2922;
                        frontier_phi_99_pred_4 = _2927;
                        frontier_phi_99_pred_5 = _2926;
                    }
                    _2518 = frontier_phi_99_pred;
                    _2516 = frontier_phi_99_pred_1;
                    _2514 = frontier_phi_99_pred_2;
                    _2512 = frontier_phi_99_pred_3;
                    _2522 = frontier_phi_99_pred_4;
                    _2520 = frontier_phi_99_pred_5;
                    uint _2708 = _2707 + 1u;
                    if (_2708 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2701 = _2512;
                        _2702 = _2514;
                        _2703 = _2516;
                        _2704 = _2518;
                        _2705 = _2520;
                        _2706 = _2522;
                        _2707 = _2708;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_81_82_ladder = _2522;
                frontier_phi_81_82_ladder_1 = _2518;
                frontier_phi_81_82_ladder_2 = _2516;
                frontier_phi_81_82_ladder_3 = _2514;
                frontier_phi_81_82_ladder_4 = _2512;
                frontier_phi_81_82_ladder_5 = _2520;
            }
            else
            {
                frontier_phi_81_82_ladder = _2377;
                frontier_phi_81_82_ladder_1 = _2373;
                frontier_phi_81_82_ladder_2 = _2371;
                frontier_phi_81_82_ladder_3 = _2369;
                frontier_phi_81_82_ladder_4 = _2367;
                frontier_phi_81_82_ladder_5 = _2375;
            }
            _2511 = frontier_phi_81_82_ladder_4;
            _2513 = frontier_phi_81_82_ladder_3;
            _2515 = frontier_phi_81_82_ladder_2;
            _2517 = frontier_phi_81_82_ladder_1;
            _2519 = frontier_phi_81_82_ladder_5;
            _2521 = frontier_phi_81_82_ladder;
        }
        float _2526 = isnan(1.0) ? _901 : (isnan(_901) ? 1.0 : min(_901, 1.0));
        _2289 = (_2526 * _2517) + _2016;
        _2291 = (_2526 * _2519) + _2017;
        _2293 = (_2526 * _2521) + _2018;
        _2295 = ((_2511 * 0.039999999105930328369140625) * _2526) + _2172;
        _2297 = ((_2513 * 0.039999999105930328369140625) * _2526) + _2173;
        _2299 = ((_2515 * 0.039999999105930328369140625) * _2526) + _2174;
    }
    else
    {
        _2289 = _2016;
        _2291 = _2017;
        _2293 = _2018;
        _2295 = _2172;
        _2297 = _2173;
        _2299 = _2174;
    }
    float _4185 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _4196 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    float _4207 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _2316 = ((isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0))) * (_2289 + ((isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0))) * _901))) + ((_2295 + ((isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0))) * _1707)) * cbPerFrame._m0[3u].x);
    float _2317 = ((isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0))) * (_2291 + ((isnan(0.0) ? _1631 : (isnan(_1631) ? 0.0 : max(_1631, 0.0))) * _901))) + ((_2297 + ((isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0))) * _1707)) * cbPerFrame._m0[3u].x);
    float _2318 = ((isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0))) * (_2293 + ((isnan(0.0) ? _1634 : (isnan(_1634) ? 0.0 : max(_1634, 0.0))) * _901))) + ((_2299 + ((isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0))) * _1707)) * cbPerFrame._m0[3u].x);
    uint _2322 = _875 + 6u;
    float _2330 = _836 / cbSceneParam._m0[86u].x;
    float _2331 = _837 / cbSceneParam._m0[86u].y;
    vec4 _2345 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2330, _2331, (log2((isnan(cbSceneParam._m0[77u].w) ? _823 : (isnan(_823) ? cbSceneParam._m0[77u].w : min(_823, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2347 = _2345.x;
    float _2348 = _2345.y;
    float _2349 = _2345.z;
    float _2350 = _2345.w;
    float _2430;
    float _2432;
    float _2434;
    float _2436;
    if (_823 > cbSceneParam._m0[78u].w)
    {
        float _2392 = isnan(_823) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _823 : min(cbSceneParam._m0[80u].w, _823));
        float _2393 = _2392 / _823;
        float _2404 = _2393 * _271;
        float _2405 = _272 * _2393;
        float _2406 = (-0.0) - _2405;
        float _2407 = _2393 * _273;
        float _2409 = (cbSceneParam._m0[77u].w * _2406) / _2392;
        float _2410 = _2409 + cbSceneParam._m0[79u].w;
        float _2411 = cbSceneParam._m0[79u].w - _2405;
        float _2417 = sqrt(((_2404 * _2404) + (_2405 * _2405)) + (_2407 * _2407));
        float _2420 = (1.0 - (cbSceneParam._m0[77u].w / _2392)) * _2417;
        float _2426 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2428 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2637;
        if (abs((_2406 - _2409) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2637 = ((((_2410 > 0.0) ? exp2(_2426 * _2410) : (2.0 - exp2(_2428 * _2410))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2420;
        }
        else
        {
            float _2572 = 1.0 / cbSceneParam._m0[80u].x;
            float _2573 = isnan(_2411) ? _2410 : (isnan(_2410) ? _2411 : max(_2410, _2411));
            float _2574 = isnan(_2411) ? _2410 : (isnan(_2410) ? _2411 : min(_2410, _2411));
            float _2583 = isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : min(_2573, 0.0));
            float _2584 = isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : min(_2574, 0.0));
            _2637 = ((abs(_2417 / _2406) * cbSceneParam._m0[80u].y) * ((((_2583 - _2584) * 2.0) - ((exp2(_2426 * (isnan(0.0) ? _2573 : (isnan(_2573) ? 0.0 : max(_2573, 0.0)))) - exp2(_2426 * (isnan(0.0) ? _2574 : (isnan(_2574) ? 0.0 : max(_2574, 0.0))))) * _2572)) - ((exp2(_2428 * _2583) - exp2(_2428 * _2584)) * _2572))) + (_2420 * cbSceneParam._m0[80u].z);
        }
        vec4 _2639 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2330, _2331, 1.0), 0.0);
        float _2648 = exp2((_2637 * (-1.44269502162933349609375)) * (1.0 - _2639.w));
        float _2649 = log2(_2648);
        float _2665 = log2(_2350);
        _2430 = (exp2(_2665 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2649 * cbSceneParam._m0[78u].x)) * _2639.x) / cbSceneParam._m0[78u].x)) + _2347;
        _2432 = (exp2(_2665 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2649 * cbSceneParam._m0[78u].y)) * _2639.y) / cbSceneParam._m0[78u].y)) + _2348;
        _2434 = (exp2(_2665 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2649 * cbSceneParam._m0[78u].z)) * _2639.z) / cbSceneParam._m0[78u].z)) + _2349;
        _2436 = _2648 * _2350;
    }
    else
    {
        _2430 = _2347;
        _2432 = _2348;
        _2434 = _2349;
        _2436 = _2350;
    }
    float _2448 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2449 = _2448 == 3.0;
    float _2450 = log2(_2436);
    float _2457 = exp2(_2450 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2316 : (isnan(_2316) ? 0.0 : max(_2316, 0.0)));
    float _2458 = exp2(_2450 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2317 : (isnan(_2317) ? 0.0 : max(_2317, 0.0)));
    float _2459 = exp2(_2450 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2318 : (isnan(_2318) ? 0.0 : max(_2318, 0.0)));
    float _2468 = (_2448 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2468 * (_2449 ? _2457 : (_2457 + (cbSceneParam._m0[72u].w * _2430)));
    SV_Target.y = _2468 * (_2449 ? _2458 : (_2458 + (cbSceneParam._m0[72u].w * _2432)));
    SV_Target.z = _2468 * (_2449 ? _2459 : (_2459 + (cbSceneParam._m0[72u].w * _2434)));
    SV_Target.w = cbInstanceData._m0[_2322].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2322].w;
}


