#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1031;
float _3161;
float _3162;
float _3163;
float _3164;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _194 = _193 * _186;
    float _195 = _193 * _187;
    float _196 = _193 * _188;
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208 = _207 * TANGENT.x;
    float _209 = _207 * TANGENT.y;
    float _210 = _207 * TANGENT.z;
    float _255 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _265 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _255);
    float _266 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _255);
    float _267 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _255);
    vec4 _280 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _283 = _280.x;
    vec4 _301 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _318 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _283) + cbMtdParam._m0[12u].x) * _301.x;
    float _320 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _283) + cbMtdParam._m0[12u].y) * _301.y;
    float _322 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _283) + cbMtdParam._m0[12u].z) * _301.z;
    vec4 _340 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _376 = cbMtdParam._m0[24u].x + _265;
    float _377 = cbMtdParam._m0[24u].y + _266;
    float _378 = cbMtdParam._m0[24u].z + _267;
    float _392 = (-0.0) - dot(vec3(_376, _377, _378), vec3(_194, _195, _196));
    float _393 = (-0.0) - dot(vec3(_376, _377, _378), vec3(_208, _209, _210));
    float _394 = (-0.0) - dot(vec3(_376, _377, _378), vec3((-0.0) - _201, (-0.0) - _202, (-0.0) - _203));
    float _398 = inversesqrt(dot(vec3(_392, _393, _394), vec3(_392, _393, _394)));
    float _401 = _398 * _394;
    float _404 = ((_398 * _392) + ((cbMtdParam._m0[22u].x * _283) * ((_340.x * 2.0) + (-1.0)))) * cbMtdParam._m0[20u].w;
    float _405 = ((_398 * _393) + ((cbMtdParam._m0[22u].y * _283) * ((_340.y * 2.0) + (-1.0)))) * cbMtdParam._m0[20u].z;
    float _406 = fract(TEXCOORD.x);
    float _407 = fract(TEXCOORD.y);
    float _413;
    if (_404 > 0.0)
    {
        _413 = (1.0 - _406) / _404;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_404 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _406) / _404;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _413 = frontier_phi_3_2_ladder;
    }
    float _421;
    if (_405 > 0.0)
    {
        _421 = (1.0 - _407) / _405;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_405 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _407) / _405;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _421 = frontier_phi_7_6_ladder;
    }
    float _425 = (_401 > 0.0) ? (cbMtdParam._m0[16u].x / _401) : 5000.0;
    float _426 = isnan(_421) ? _413 : (isnan(_413) ? _421 : min(_413, _421));
    float _427 = isnan(_425) ? _426 : (isnan(_426) ? _425 : min(_426, _425));
    float _431 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _438 = ((_427 * _401) + _431) / _431;
    vec4 _463 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * ((((((_406 + (-0.5)) + (_427 * _404)) / _438) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * ((((((_407 + (-0.5)) + (_427 * _405)) / _438) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    vec4 _491 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _495 = _491.z;
    float _498 = (_491.x * 2.0) + (-1.0);
    float _499 = (_491.y * 2.0) + (-1.0);
    float _500 = dot(vec2(_498, _499), vec2(_498, _499));
    float _3183 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _505 = sqrt(1.0 - (isnan(1.0) ? _3183 : (isnan(_3183) ? 1.0 : min(_3183, 1.0))));
    float _508 = fma(_505, _201, fma(_499, _208, _498 * _194));
    float _511 = fma(_505, _202, fma(_499, _209, _498 * _195));
    float _514 = fma(_505, _203, fma(_499, _210, _498 * _196));
    float _518 = inversesqrt(dot(vec3(_508, _511, _514), vec3(_508, _511, _514)));
    float _519 = _518 * _508;
    float _520 = _518 * _511;
    float _521 = _518 * _514;
    float _3194 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _522 = isnan(1.0) ? _3194 : (isnan(_3194) ? 1.0 : min(_3194, 1.0));
    float _3205 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _3216 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _3227 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _541 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _545 = inversesqrt(dot(vec3(_265, _266, _267), vec3(_265, _266, _267)));
    float _546 = _265 * _545;
    float _547 = _266 * _545;
    float _548 = _267 * _545;
    vec4 _553 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _555 = _553.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _712 = sqrt(((_265 * _265) + (_266 * _266)) + (_267 * _267));
        float _718 = (cbMatDynParam._m0[5u].x * _712) + cbMatDynParam._m0[5u].y;
        float _3238 = isnan(0.0) ? _718 : (isnan(_718) ? 0.0 : max(_718, 0.0));
        float _719 = isnan(1.0) ? _3238 : (isnan(_3238) ? 1.0 : min(_3238, 1.0));
        float _723 = (cbMatDynParam._m0[5u].z * _712) + cbMatDynParam._m0[5u].w;
        float _3249 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3249 : (isnan(_3249) ? 1.0 : min(_3249, 1.0))) - _719)) + _719) < ((_555 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _567 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _568 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _587 = fma(_521, cbSceneParam._m0[5u].z, fma(_520, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _519));
    float _590 = fma(_521, cbSceneParam._m0[6u].z, fma(_520, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _519));
    float _593 = fma(_521, cbSceneParam._m0[7u].z, fma(_520, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _519));
    uint _606 = uint(roundEven(NORMAL.w)) * 13u;
    uint _608 = _606 + 9u;
    uint _609 = _608 + uint(cbMatDynParam._m0[0u].w);
    float _615 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3205 : (isnan(_3205) ? 1.0 : min(_3205, 1.0)))) * cbInstanceData._m0[_609].x;
    float _616 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3216 : (isnan(_3216) ? 1.0 : min(_3216, 1.0)))) * cbInstanceData._m0[_609].y;
    float _617 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3227 : (isnan(_3227) ? 1.0 : min(_3227, 1.0)))) * cbInstanceData._m0[_609].z;
    float _3260 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _618 = isnan(1.0) ? _3260 : (isnan(_3260) ? 1.0 : min(_3260, 1.0));
    float _3271 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _619 = isnan(1.0) ? _3271 : (isnan(_3271) ? 1.0 : min(_3271, 1.0));
    float _3282 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _620 = isnan(1.0) ? _3282 : (isnan(_3282) ? 1.0 : min(_3282, 1.0));
    vec4 _629 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _567, cbSceneParam._m0[86u].y * _568));
    float _632 = _629.x * TEXCOORD_4.z;
    float _633 = dot(vec3(_519, _520, _521), vec3(_546, _547, _548));
    float _636 = _633 * 2.0;
    float _640 = (_636 * _519) - _546;
    float _641 = (_636 * _520) - _547;
    float _642 = (_636 * _521) - _548;
    float _646 = abs(dot(vec3(_546, _547, _548), vec3(_519, _520, _521)));
    float _3293 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
    float _648 = sqrt(_522);
    float _661 = exp2((_648 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3293 : (isnan(_3293) ? 1.0 : min(_3293, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_648 * 3.0));
    float _693 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _697 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _701 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1030;
    float _1032;
    float _1033;
    float _1034;
    float _1035;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _757 = fma(_701, cbModelParam._m0[26u].z, fma(_697, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _693));
        float _761 = fma(_701, cbModelParam._m0[27u].z, fma(_697, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _693));
        float _765 = fma(_701, cbModelParam._m0[28u].z, fma(_697, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _693));
        float _788 = _693 + _519;
        float _789 = _697 + _520;
        float _790 = _701 + _521;
        float _800 = fma(_790, cbModelParam._m0[26u].z, fma(_789, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _788)) - _757;
        float _801 = fma(_790, cbModelParam._m0[27u].z, fma(_789, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _788)) - _761;
        float _802 = fma(_790, cbModelParam._m0[28u].z, fma(_789, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _788)) - _765;
        float _806 = inversesqrt(dot(vec3(_800, _801, _802), vec3(_800, _801, _802)));
        float _819 = ((_806 * _800) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_757 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _820 = ((_806 * _801) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_761 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _821 = ((_806 * _802) / cbModelParam._m0[34u].z) + ((((((_765 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _824 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_819, _820, _821), 0.0);
        vec4 _831 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_819, _820, _821), 0.0);
        vec4 _838 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_819, _820, _821), 0.0);
        vec4 _845 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_819, _820, _821), 0.0);
        float _858 = exp2((_824.w + (-0.5)) * 20.0) * 2.0;
        float _859 = _858 * (_824.x + (-0.5));
        float _860 = _858 * (_824.y + (-0.5));
        float _861 = _858 * (_824.z + (-0.5));
        float _868 = exp2((_831.w + (-0.5)) * 20.0) * 2.0;
        float _869 = _868 * (_831.x + (-0.5));
        float _870 = _868 * (_831.y + (-0.5));
        float _871 = _868 * (_831.z + (-0.5));
        float _878 = exp2((_838.w + (-0.5)) * 20.0) * 2.0;
        float _879 = _878 * (_838.x + (-0.5));
        float _880 = _878 * (_838.y + (-0.5));
        float _881 = _878 * (_838.z + (-0.5));
        float _888 = exp2((_845.w + (-0.5)) * 20.0) * 2.0;
        float _889 = _888 * (_845.x + (-0.5));
        float _890 = _888 * (_845.y + (-0.5));
        float _891 = _888 * (_845.z + (-0.5));
        float _892 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        float _893 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _894 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _895 = _859 * 0.5;
        float _896 = _869 * 0.5;
        float _897 = _879 * 0.5;
        float _898 = dot(vec3(_895, _896, _897), vec3(_895, _896, _897));
        float _903 = (_898 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_898);
        float _912 = (dot(vec3(_519, _520, _521), vec3(_903 * _895, _903 * _896, _903 * _897)) + 1.0) * 0.5;
        float _3319 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _922 = sqrt(((_896 * _896) + (_895 * _895)) + (_897 * _897)) / (_892 + 9.9999997473787516355514526367188e-06);
        float _3330 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _923 = isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0));
        float _924 = _923 * 2.0;
        float _928 = (1.0 - _923) / (_923 + 1.0);
        float _3341 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _929 = isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0));
        float _938 = ((((1.0 - _929) * (_924 + 2.0)) * exp2(log2(isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0))) * (_924 + 1.0))) + _929) * _892;
        float _939 = _860 * 0.5;
        float _940 = _870 * 0.5;
        float _941 = _880 * 0.5;
        float _942 = dot(vec3(_939, _940, _941), vec3(_939, _940, _941));
        float _947 = (_942 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_942);
        float _955 = (dot(vec3(_519, _520, _521), vec3(_947 * _939, _947 * _940, _947 * _941)) + 1.0) * 0.5;
        float _3352 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _964 = sqrt(((_940 * _940) + (_939 * _939)) + (_941 * _941)) / (_893 + 9.9999997473787516355514526367188e-06);
        float _3363 = isnan(0.0) ? _964 : (isnan(_964) ? 0.0 : max(_964, 0.0));
        float _965 = isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0));
        float _966 = _965 * 2.0;
        float _970 = (1.0 - _965) / (_965 + 1.0);
        float _3374 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _971 = isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0));
        float _980 = ((((1.0 - _971) * (_966 + 2.0)) * exp2(log2(isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0))) * (_966 + 1.0))) + _971) * _893;
        float _981 = _861 * 0.5;
        float _982 = _871 * 0.5;
        float _983 = _881 * 0.5;
        float _984 = dot(vec3(_981, _982, _983), vec3(_981, _982, _983));
        float _989 = (_984 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_984);
        float _997 = (dot(vec3(_519, _520, _521), vec3(_989 * _981, _989 * _982, _989 * _983)) + 1.0) * 0.5;
        float _3385 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _1006 = sqrt(((_982 * _982) + (_981 * _981)) + (_983 * _983)) / (_894 + 9.9999997473787516355514526367188e-06);
        float _3396 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0));
        float _1008 = _1007 * 2.0;
        float _1012 = (1.0 - _1007) / (_1007 + 1.0);
        float _3407 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1013 = isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0));
        float _1022 = ((((1.0 - _1013) * (_1008 + 2.0)) * exp2(log2(isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0))) * (_1008 + 1.0))) + _1013) * _894;
        _1030 = _861;
        _1032 = _860;
        _1033 = _859;
        _1034 = _871;
        _1035 = _870;
        _1036 = _869;
        _1037 = _881;
        _1038 = _880;
        _1039 = _879;
        _1040 = _894;
        _1041 = _893;
        _1042 = _892;
        _1043 = cbModelParam._m0[36u].z * (isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0)));
        _1044 = cbModelParam._m0[36u].z * (isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0)));
        _1045 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1022 : (isnan(_1022) ? 0.0 : max(_1022, 0.0)));
    }
    else
    {
        _1030 = _1031;
        _1032 = _1031;
        _1033 = _1031;
        _1034 = _1031;
        _1035 = _1031;
        _1036 = _1031;
        _1037 = _1031;
        _1038 = _1031;
        _1039 = _1031;
        _1040 = _1031;
        _1041 = _1031;
        _1042 = _1031;
        _1043 = 0.0;
        _1044 = 0.0;
        _1045 = 0.0;
    }
    float _1343;
    float _1344;
    float _1345;
    float _1346;
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1074 = fma(_701, cbModelParam._m0[30u].z, fma(_697, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _693));
        float _1078 = fma(_701, cbModelParam._m0[31u].z, fma(_697, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _693));
        float _1082 = fma(_701, cbModelParam._m0[32u].z, fma(_697, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _693));
        float _1105 = _693 + _519;
        float _1106 = _697 + _520;
        float _1107 = _701 + _521;
        float _1117 = fma(_1107, cbModelParam._m0[30u].z, fma(_1106, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1105)) - _1074;
        float _1118 = fma(_1107, cbModelParam._m0[31u].z, fma(_1106, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1105)) - _1078;
        float _1119 = fma(_1107, cbModelParam._m0[32u].z, fma(_1106, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1105)) - _1082;
        float _1123 = inversesqrt(dot(vec3(_1117, _1118, _1119), vec3(_1117, _1118, _1119)));
        float _1136 = ((_1123 * _1117) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1074 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1137 = ((_1123 * _1118) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1078 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1138 = ((_1123 * _1119) / cbModelParam._m0[35u].z) + ((((((_1082 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1140 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        vec4 _1147 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        vec4 _1154 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        vec4 _1161 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1136, _1137, _1138), 0.0);
        float _1173 = exp2((_1140.w + (-0.5)) * 20.0) * 2.0;
        float _1174 = _1173 * (_1140.x + (-0.5));
        float _1175 = _1173 * (_1140.y + (-0.5));
        float _1176 = _1173 * (_1140.z + (-0.5));
        float _1183 = exp2((_1147.w + (-0.5)) * 20.0) * 2.0;
        float _1184 = _1183 * (_1147.x + (-0.5));
        float _1185 = _1183 * (_1147.y + (-0.5));
        float _1186 = _1183 * (_1147.z + (-0.5));
        float _1193 = exp2((_1154.w + (-0.5)) * 20.0) * 2.0;
        float _1194 = _1193 * (_1154.x + (-0.5));
        float _1195 = _1193 * (_1154.y + (-0.5));
        float _1196 = _1193 * (_1154.z + (-0.5));
        float _1203 = exp2((_1161.w + (-0.5)) * 20.0) * 2.0;
        float _1204 = _1203 * (_1161.x + (-0.5));
        float _1205 = _1203 * (_1161.y + (-0.5));
        float _1206 = _1203 * (_1161.z + (-0.5));
        float _1207 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1208 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1209 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1210 = _1174 * 0.5;
        float _1211 = _1184 * 0.5;
        float _1212 = _1194 * 0.5;
        float _1213 = dot(vec3(_1210, _1211, _1212), vec3(_1210, _1211, _1212));
        float _1218 = (_1213 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1213);
        float _1226 = (dot(vec3(_519, _520, _521), vec3(_1218 * _1210, _1218 * _1211, _1218 * _1212)) + 1.0) * 0.5;
        float _3448 = isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0));
        float _1235 = sqrt(((_1211 * _1211) + (_1210 * _1210)) + (_1212 * _1212)) / (_1207 + 9.9999997473787516355514526367188e-06);
        float _3459 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3459 : (isnan(_3459) ? 1.0 : min(_3459, 1.0));
        float _1237 = _1236 * 2.0;
        float _1241 = (1.0 - _1236) / (_1236 + 1.0);
        float _3470 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0));
        float _1251 = ((((1.0 - _1242) * (_1237 + 2.0)) * exp2(log2(isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0))) * (_1237 + 1.0))) + _1242) * _1207;
        float _1252 = _1175 * 0.5;
        float _1253 = _1185 * 0.5;
        float _1254 = _1195 * 0.5;
        float _1255 = dot(vec3(_1252, _1253, _1254), vec3(_1252, _1253, _1254));
        float _1260 = (_1255 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1255);
        float _1268 = (dot(vec3(_519, _520, _521), vec3(_1260 * _1252, _1260 * _1253, _1260 * _1254)) + 1.0) * 0.5;
        float _3481 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1277 = sqrt(((_1253 * _1253) + (_1252 * _1252)) + (_1254 * _1254)) / (_1208 + 9.9999997473787516355514526367188e-06);
        float _3492 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0));
        float _1279 = _1278 * 2.0;
        float _1283 = (1.0 - _1278) / (_1278 + 1.0);
        float _3503 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0));
        float _1293 = ((((1.0 - _1284) * (_1279 + 2.0)) * exp2(log2(isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0))) * (_1279 + 1.0))) + _1284) * _1208;
        float _1294 = _1176 * 0.5;
        float _1295 = _1186 * 0.5;
        float _1296 = _1196 * 0.5;
        float _1297 = dot(vec3(_1294, _1295, _1296), vec3(_1294, _1295, _1296));
        float _1302 = (_1297 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1297);
        float _1310 = (dot(vec3(_519, _520, _521), vec3(_1302 * _1294, _1302 * _1295, _1302 * _1296)) + 1.0) * 0.5;
        float _3514 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1319 = sqrt(((_1295 * _1295) + (_1294 * _1294)) + (_1296 * _1296)) / (_1209 + 9.9999997473787516355514526367188e-06);
        float _3525 = isnan(0.0) ? _1319 : (isnan(_1319) ? 0.0 : max(_1319, 0.0));
        float _1320 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
        float _1321 = _1320 * 2.0;
        float _1325 = (1.0 - _1320) / (_1320 + 1.0);
        float _3536 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1326 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
        float _1335 = ((((1.0 - _1326) * (_1321 + 2.0)) * exp2(log2(isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0))) * (_1321 + 1.0))) + _1326) * _1209;
        _1343 = _1176;
        _1344 = _1175;
        _1345 = _1174;
        _1346 = _1186;
        _1347 = _1185;
        _1348 = _1184;
        _1349 = _1196;
        _1350 = _1195;
        _1351 = _1194;
        _1352 = _1209;
        _1353 = _1208;
        _1354 = _1207;
        _1355 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)));
        _1356 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1293 : (isnan(_1293) ? 0.0 : max(_1293, 0.0)));
        _1357 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1335 : (isnan(_1335) ? 0.0 : max(_1335, 0.0)));
    }
    else
    {
        _1343 = _1031;
        _1344 = _1031;
        _1345 = _1031;
        _1346 = _1031;
        _1347 = _1031;
        _1348 = _1031;
        _1349 = _1031;
        _1350 = _1031;
        _1351 = _1031;
        _1352 = _1031;
        _1353 = _1031;
        _1354 = _1031;
        _1355 = 0.0;
        _1356 = 0.0;
        _1357 = 0.0;
    }
    float _1367 = (cbModelParam._m0[1u].x * (_1355 - _1043)) + _1043;
    float _1368 = (cbModelParam._m0[1u].x * (_1356 - _1044)) + _1044;
    float _1369 = (cbModelParam._m0[1u].x * (_1357 - _1045)) + _1045;
    float _1390 = fma(_1369, cbSceneParam._m0[89u].z, fma(_1368, cbSceneParam._m0[89u].y, _1367 * cbSceneParam._m0[89u].x));
    float _1393 = fma(_1369, cbSceneParam._m0[90u].z, fma(_1368, cbSceneParam._m0[90u].y, _1367 * cbSceneParam._m0[90u].x));
    float _1396 = fma(_1369, cbSceneParam._m0[91u].z, fma(_1368, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1367));
    float _1411 = _640 * 0.5;
    float _1412 = _641 * 0.5;
    float _1413 = _642 * 0.5;
    float _1414 = dot(vec4(_1411, _1412, _1413, 1.0), vec4(_1345, _1348, _1351, _1354));
    float _1417 = dot(vec4(_1411, _1412, _1413, 1.0), vec4(_1344, _1347, _1350, _1353));
    float _1420 = dot(vec4(_1411, _1412, _1413, 1.0), vec4(_1343, _1346, _1349, _1352));
    float _1454;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1427 = dot(vec4(_1411, _1412, _1413, 1.0), vec4(_1030, _1034, _1037, _1040));
        float _1431 = dot(vec4(_1411, _1412, _1413, 1.0), vec4(_1032, _1035, _1038, _1041));
        float _1435 = dot(vec4(_1411, _1412, _1413, 1.0), vec4(_1033, _1036, _1039, _1042));
        float _1442 = dot(vec4(cbModelParam._m0[39u]), vec4(_1411, _1412, _1413, 1.0));
        _1454 = dot(vec3(isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)), isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0)), isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1442) ? 0.0 : (isnan(0.0) ? _1442 : max(0.0, _1442))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1454 = 1.0;
    }
    float _1465;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1456 = dot(vec4(cbModelParam._m0[40u]), vec4(_1411, _1412, _1413, 1.0));
        _1465 = dot(vec3(isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)), isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0)), isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1456) ? 0.0 : (isnan(0.0) ? _1456 : max(0.0, _1456))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1465 = 1.0;
    }
    float _1469 = (_1465 * cbModelParam._m0[1u].x) + (_1454 * (1.0 - cbModelParam._m0[1u].x));
    float _1479 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _522);
    float _1480 = isnan(_1479) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1479 : min(cbModelParam._m0[25u].z, _1479));
    float _1562;
    float _1564;
    float _1566;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1529 = fma(_701, cbModelParam._m0[13u].z, fma(_697, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _693)) + cbModelParam._m0[13u].w;
        float _1533 = fma(_701, cbModelParam._m0[14u].z, fma(_697, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _693)) + cbModelParam._m0[14u].w;
        float _1537 = fma(_701, cbModelParam._m0[15u].z, fma(_697, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _693)) + cbModelParam._m0[15u].w;
        float _1540 = fma(_642, cbModelParam._m0[13u].z, fma(_641, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _640));
        float _1543 = fma(_642, cbModelParam._m0[14u].z, fma(_641, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _640));
        float _1546 = fma(_642, cbModelParam._m0[15u].z, fma(_641, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _640));
        float _1574;
        if (_1540 > 0.0)
        {
            _1574 = abs((1.0 - _1529) / _1540);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1540 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1529 + 1.0) / _1540);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1574 = frontier_phi_25_23_ladder;
        }
        float _1921;
        if (_1543 > 0.0)
        {
            _1921 = abs((1.0 - _1533) / _1543);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1543 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1533 + 1.0) / _1543);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1921 = frontier_phi_34_30_ladder;
        }
        float _2245;
        if (_1546 > 0.0)
        {
            _2245 = abs((1.0 - _1537) / _1546);
        }
        else
        {
            float frontier_phi_48_41_ladder;
            if (_1546 < 0.0)
            {
                frontier_phi_48_41_ladder = abs((_1537 + 1.0) / _1546);
            }
            else
            {
                frontier_phi_48_41_ladder = 5000.0;
            }
            _2245 = frontier_phi_48_41_ladder;
        }
        float _2247 = isnan(_1921) ? _1574 : (isnan(_1574) ? _1921 : min(_1574, _1921));
        float _2248 = isnan(_2245) ? _2247 : (isnan(_2247) ? _2245 : min(_2247, _2245));
        float _2252 = (_2248 * _1540) + _1529;
        float _2253 = (_2248 * _1543) + _1533;
        float _2254 = (_2248 * _1546) + _1537;
        float _2255 = _2248 * 9.9999997473787516355514526367188e-05;
        float _2256 = (-1.0) - _2255;
        float _2258 = _2255 + 1.0;
        float frontier_phi_24_48_ladder;
        float frontier_phi_24_48_ladder_1;
        float frontier_phi_24_48_ladder_2;
        if ((_2254 > _2258) || ((_2254 < _2256) || ((_2253 > _2258) || ((_2253 < _2256) || ((_2252 < _2256) || (_2252 > _2258))))))
        {
            frontier_phi_24_48_ladder = 0.0;
            frontier_phi_24_48_ladder_1 = 0.0;
            frontier_phi_24_48_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2396 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2254, cbModelParam._m0[9u].z, fma(_2253, cbModelParam._m0[9u].y, _2252 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2254, cbModelParam._m0[10u].z, fma(_2253, cbModelParam._m0[10u].y, _2252 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2254, cbModelParam._m0[11u].z, fma(_2253, cbModelParam._m0[11u].y, _2252 * cbModelParam._m0[11u].x))), _1480);
            frontier_phi_24_48_ladder = _2396.z * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_1 = _2396.y * cbModelParam._m0[1u].y;
            frontier_phi_24_48_ladder_2 = _2396.x * cbModelParam._m0[1u].y;
        }
        _1562 = frontier_phi_24_48_ladder_2;
        _1564 = frontier_phi_24_48_ladder_1;
        _1566 = frontier_phi_24_48_ladder;
    }
    else
    {
        vec4 _1550 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_640, _641, _642), _1480);
        _1562 = _1550.x * cbModelParam._m0[1u].y;
        _1564 = _1550.y * cbModelParam._m0[1u].y;
        _1566 = _1550.z * cbModelParam._m0[1u].y;
    }
    float _1570 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _522);
    float _1571 = isnan(_1570) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1570 : min(cbModelParam._m0[25u].w, _1570));
    float _1661;
    float _1663;
    float _1665;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1625 = fma(_701, cbModelParam._m0[21u].z, fma(_697, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _693)) + cbModelParam._m0[21u].w;
        float _1629 = fma(_701, cbModelParam._m0[22u].z, fma(_697, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _693)) + cbModelParam._m0[22u].w;
        float _1633 = fma(_701, cbModelParam._m0[23u].z, fma(_697, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _693)) + cbModelParam._m0[23u].w;
        float _1636 = fma(_642, cbModelParam._m0[21u].z, fma(_641, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _640));
        float _1639 = fma(_642, cbModelParam._m0[22u].z, fma(_641, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _640));
        float _1642 = fma(_642, cbModelParam._m0[23u].z, fma(_641, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _640));
        float _1926;
        if (_1636 > 0.0)
        {
            _1926 = abs((1.0 - _1625) / _1636);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1636 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1625 + 1.0) / _1636);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1926 = frontier_phi_36_32_ladder;
        }
        float _2271;
        if (_1639 > 0.0)
        {
            _2271 = abs((1.0 - _1629) / _1639);
        }
        else
        {
            float frontier_phi_50_43_ladder;
            if (_1639 < 0.0)
            {
                frontier_phi_50_43_ladder = abs((_1629 + 1.0) / _1639);
            }
            else
            {
                frontier_phi_50_43_ladder = 5000.0;
            }
            _2271 = frontier_phi_50_43_ladder;
        }
        float _2461;
        if (_1642 > 0.0)
        {
            _2461 = abs((1.0 - _1633) / _1642);
        }
        else
        {
            float frontier_phi_68_61_ladder;
            if (_1642 < 0.0)
            {
                frontier_phi_68_61_ladder = abs((_1633 + 1.0) / _1642);
            }
            else
            {
                frontier_phi_68_61_ladder = 5000.0;
            }
            _2461 = frontier_phi_68_61_ladder;
        }
        float _2463 = isnan(_2271) ? _1926 : (isnan(_1926) ? _2271 : min(_1926, _2271));
        float _2464 = isnan(_2461) ? _2463 : (isnan(_2463) ? _2461 : min(_2463, _2461));
        float _2468 = (_2464 * _1636) + _1625;
        float _2469 = (_2464 * _1639) + _1629;
        float _2470 = (_2464 * _1642) + _1633;
        float _2471 = _2464 * 9.9999997473787516355514526367188e-05;
        float _2472 = (-1.0) - _2471;
        float _2474 = _2471 + 1.0;
        float frontier_phi_33_68_ladder;
        float frontier_phi_33_68_ladder_1;
        float frontier_phi_33_68_ladder_2;
        if ((_2470 > _2474) || ((_2470 < _2472) || ((_2469 > _2474) || ((_2469 < _2472) || ((_2468 < _2472) || (_2468 > _2474))))))
        {
            frontier_phi_33_68_ladder = 0.0;
            frontier_phi_33_68_ladder_1 = 0.0;
            frontier_phi_33_68_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2712 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2470, cbModelParam._m0[17u].z, fma(_2469, cbModelParam._m0[17u].y, _2468 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2470, cbModelParam._m0[18u].z, fma(_2469, cbModelParam._m0[18u].y, _2468 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2470, cbModelParam._m0[19u].z, fma(_2469, cbModelParam._m0[19u].y, _2468 * cbModelParam._m0[19u].x))), _1571);
            frontier_phi_33_68_ladder = _2712.y * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_1 = _2712.z * cbModelParam._m0[1u].z;
            frontier_phi_33_68_ladder_2 = _2712.x * cbModelParam._m0[1u].z;
        }
        _1661 = frontier_phi_33_68_ladder_2;
        _1663 = frontier_phi_33_68_ladder;
        _1665 = frontier_phi_33_68_ladder_1;
    }
    else
    {
        vec4 _1645 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_640, _641, _642), _1571);
        _1661 = _1645.x * cbModelParam._m0[1u].z;
        _1663 = _1645.y * cbModelParam._m0[1u].z;
        _1665 = _1645.z * cbModelParam._m0[1u].z;
    }
    float _1677 = ((((1.0 - _661) * ((_648 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_661 * _648)) * _632;
    float _1678 = _1677 * ((cbModelParam._m0[1u].w * (_1661 - _1562)) + _1562);
    float _1679 = _1677 * ((cbModelParam._m0[1u].w * (_1663 - _1564)) + _1564);
    float _1680 = _1677 * ((cbModelParam._m0[1u].w * (_1665 - _1566)) + _1566);
    float _1683 = fma(_1680, cbSceneParam._m0[89u].z, fma(_1679, cbSceneParam._m0[89u].y, _1678 * cbSceneParam._m0[89u].x));
    float _1686 = fma(_1680, cbSceneParam._m0[90u].z, fma(_1679, cbSceneParam._m0[90u].y, _1678 * cbSceneParam._m0[90u].x));
    float _1689 = fma(_1680, cbSceneParam._m0[91u].z, fma(_1679, cbSceneParam._m0[91u].y, _1678 * cbSceneParam._m0[91u].x));
    uvec4 _1699 = floatBitsToUint(cbInstanceData._m0[_606 + 5u]);
    uint _1701 = _1699.x * 14u;
    uint _1702 = _1701 + 13u;
    float _1707 = _632 + (-1.0);
    float _1710 = (cbLight._m0[_1702].x * _1707) + 1.0;
    float _1711 = (cbLight._m0[_1702].y * _1707) + 1.0;
    uint _1712 = _1701 + 5u;
    float _1718 = isnan(1.0) ? _1711 : (isnan(_1711) ? 1.0 : min(_1711, 1.0));
    uint _1722 = _1701 + 4u;
    float _1728 = isnan(1.0) ? _1710 : (isnan(_1710) ? 1.0 : min(_1710, 1.0));
    uint _1732 = _1701 | 1u;
    float _1743 = dot(vec3(cbLight._m0[_1701].xyz), vec3(_519, _520, _521));
    float _1746 = dot(vec3(cbLight._m0[_1732].xyz), vec3(_519, _520, _521));
    float _3672 = isnan(0.0) ? _1743 : (isnan(_1743) ? 0.0 : max(_1743, 0.0));
    float _3683 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
    float _1751 = (isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) * 0.3183098733425140380859375;
    float _1753 = (isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0))) * 0.3183098733425140380859375;
    float _1760 = ((cbLight._m0[_1712].x * _1718) * _1753) + ((cbLight._m0[_1722].x * _1728) * _1751);
    float _1761 = ((_1718 * cbLight._m0[_1712].y) * _1753) + ((_1728 * cbLight._m0[_1722].y) * _1751);
    float _1762 = ((_1718 * cbLight._m0[_1712].z) * _1753) + ((_1728 * cbLight._m0[_1722].z) * _1751);
    uint _1764 = _1701 + 8u;
    float _1777 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1701].w)) * _522) * 0.949999988079071044921875);
    float _1778 = _1777 * _1777;
    float _1779 = cbLight._m0[_1701].x + _546;
    float _1780 = cbLight._m0[_1701].y + _547;
    float _1781 = cbLight._m0[_1701].z + _548;
    float _1785 = inversesqrt(dot(vec3(_1779, _1780, _1781), vec3(_1779, _1780, _1781)));
    float _1786 = _1785 * _1779;
    float _1787 = _1785 * _1780;
    float _1788 = _1785 * _1781;
    float _1789 = dot(vec3(_519, _520, _521), vec3(cbLight._m0[_1701].xyz));
    float _3694 = isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0));
    float _1792 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
    float _3705 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _1793 = isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0));
    float _1794 = dot(vec3(_519, _520, _521), vec3(_1786, _1787, _1788));
    float _3716 = isnan(0.0) ? _1794 : (isnan(_1794) ? 0.0 : max(_1794, 0.0));
    float _1797 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
    float _1798 = dot(vec3(cbLight._m0[_1701].xyz), vec3(_1786, _1787, _1788));
    float _3727 = isnan(0.0) ? _1798 : (isnan(_1798) ? 0.0 : max(_1798, 0.0));
    float _1802 = _1778 * _1778;
    float _1806 = ((_1797 * _1797) * (_1802 + (-1.0))) + 1.0;
    float _1817 = (exp2(log2(1.0 - (isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1818 = 1.0 - _1778;
    float _1829 = (0.5 / (((_1793 * ((_1792 * _1818) + _1778)) + 9.9999999392252902907785028219223e-09) + (((_1793 * _1818) + _1778) * _1792))) * _1792;
    float _3738 = isnan(0.0) ? _1829 : (isnan(_1829) ? 0.0 : max(_1829, 0.0));
    float _1831 = (isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0))) * (_1802 / ((_1806 * _1806) * 3.141590118408203125));
    uint _1842 = _1701 + 9u;
    float _1853 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1732].w)) * _522) * 0.949999988079071044921875);
    float _1854 = _1853 * _1853;
    float _1855 = cbLight._m0[_1732].x + _546;
    float _1856 = cbLight._m0[_1732].y + _547;
    float _1857 = cbLight._m0[_1732].z + _548;
    float _1861 = inversesqrt(dot(vec3(_1855, _1856, _1857), vec3(_1855, _1856, _1857)));
    float _1862 = _1861 * _1855;
    float _1863 = _1861 * _1856;
    float _1864 = _1861 * _1857;
    float _1865 = dot(vec3(_519, _520, _521), vec3(cbLight._m0[_1732].xyz));
    float _3749 = isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0));
    float _1868 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
    float _1869 = dot(vec3(_519, _520, _521), vec3(_1862, _1863, _1864));
    float _3760 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
    float _1872 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
    float _1873 = dot(vec3(cbLight._m0[_1732].xyz), vec3(_1862, _1863, _1864));
    float _3771 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
    float _1877 = _1854 * _1854;
    float _1881 = ((_1872 * _1872) * (_1877 + (-1.0))) + 1.0;
    float _1890 = (exp2(log2(1.0 - (isnan(1.0) ? _3771 : (isnan(_3771) ? 1.0 : min(_3771, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1891 = 1.0 - _1854;
    float _1901 = (0.5 / (((_1793 * ((_1868 * _1891) + _1854)) + 9.9999999392252902907785028219223e-09) + (((_1793 * _1891) + _1854) * _1868))) * _1868;
    float _3782 = isnan(0.0) ? _1901 : (isnan(_1901) ? 0.0 : max(_1901, 0.0));
    float _1903 = (isnan(1.0) ? _3782 : (isnan(_3782) ? 1.0 : min(_3782, 1.0))) * (_1877 / ((_1881 * _1881) * 3.141590118408203125));
    float _1913 = (((_1890 * cbLight._m0[_1842].x) * _1903) * _1718) + (((_1817 * cbLight._m0[_1764].x) * _1831) * _1728);
    float _1914 = (((_1890 * cbLight._m0[_1842].y) * _1903) * _1718) + (((_1817 * cbLight._m0[_1764].y) * _1831) * _1728);
    float _1915 = (((_1890 * cbLight._m0[_1842].z) * _1903) * _1718) + (((_1817 * cbLight._m0[_1764].z) * _1831) * _1728);
    float _2030;
    float _2032;
    float _2034;
    float _2036;
    float _2038;
    float _2040;
    if (_1699.y == 0u)
    {
        float _1970 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1971 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1970;
        float _1972 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1970;
        float _1973 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1970;
        uvec4 _1985 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1986 = _1985.x;
        uint _1997 = uint((float(_1985.y) * floor(float(uint(cbSceneParam._m0[85u].y * _568) / _1986))) + floor(float(uint(cbSceneParam._m0[85u].x * _567) / _1986)));
        float _2007 = (log2(_1973 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2008 = isnan(0.0) ? _2007 : (isnan(_2007) ? 0.0 : max(_2007, 0.0));
        uint _2011 = uint(isnan(14.0) ? _2008 : (isnan(_2008) ? 14.0 : min(_2008, 14.0)));
        uvec4 _2016 = texelFetch(g_lightClusterGridBuffer, int(((_2011 << 2u) + (_1997 << 6u)) >> 2u));
        uint _2017 = _2016.x;
        uint _2018 = _1985.z;
        float _2124;
        float _2126;
        float _2128;
        float _2130;
        float _2132;
        float _2134;
        if (((((1u << ((_2018 >> 4u) & 15u)) + 4294967295u) & _2017) == 0u) || ((_2018 & 240u) == 0u))
        {
            _2124 = 0.0;
            _2126 = 0.0;
            _2128 = 0.0;
            _2130 = 0.0;
            _2132 = 0.0;
            _2134 = 0.0;
        }
        else
        {
            float _2125;
            float _2127;
            float _2129;
            float _2131;
            float _2133;
            float _2135;
            float _2308 = 0.0;
            float _2309 = 0.0;
            float _2310 = 0.0;
            float _2311 = 0.0;
            float _2312 = 0.0;
            float _2313 = 0.0;
            uint _2314 = 0u;
            uint _2323;
            bool _2324;
            for (;;)
            {
                _2323 = texelFetch(g_lightClassification, int((((_2011 << 5u) + (_1997 << 9u)) + (_2314 << 2u)) >> 2u)).x;
                _2324 = _2323 == 0u;
                float frontier_phi_63_pred;
                float frontier_phi_63_pred_1;
                float frontier_phi_63_pred_2;
                float frontier_phi_63_pred_3;
                float frontier_phi_63_pred_4;
                float frontier_phi_63_pred_5;
                if (_2324)
                {
                    frontier_phi_63_pred = _2310;
                    frontier_phi_63_pred_1 = _2313;
                    frontier_phi_63_pred_2 = _2312;
                    frontier_phi_63_pred_3 = _2311;
                    frontier_phi_63_pred_4 = _2309;
                    frontier_phi_63_pred_5 = _2308;
                }
                else
                {
                    float _2504;
                    float _2505;
                    float _2506;
                    float _2507;
                    float _2508;
                    float _2509;
                    uint _2510;
                    _2504 = _2308;
                    _2505 = _2309;
                    _2506 = _2310;
                    _2507 = _2311;
                    _2508 = _2312;
                    _2509 = _2313;
                    _2510 = _2323;
                    float _2405;
                    float _2406;
                    float _2407;
                    float _2408;
                    float _2409;
                    float _2410;
                    for (;;)
                    {
                        uint _2514 = uint(findLSB(_2510)) + (_2314 << 5u);
                        uint _2511 = (_2510 + 4294967295u) & _2510;
                        uint _2516 = _2514 * 48u;
                        vec4 _2530 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2516)).x, texelFetch(g_PointLightRenderingBuffer, int(_2516 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2516 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2516 + 3u)).x));
                        uint _2536 = (_2514 * 48u) + 4u;
                        vec4 _2549 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2536)).x, texelFetch(g_PointLightRenderingBuffer, int(_2536 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2536 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2536 + 3u)).x));
                        uint _2555 = (_2514 * 48u) + 8u;
                        vec3 _2566 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2555)).x, texelFetch(g_PointLightRenderingBuffer, int(_2555 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2555 + 2u)).x));
                        float _2570 = _2530.x - _1971;
                        float _2571 = _2530.y - _1972;
                        float _2572 = _2530.z - _1973;
                        float _2573 = dot(vec3(_2570, _2571, _2572), vec3(_2570, _2571, _2572));
                        float _2576 = inversesqrt(_2573);
                        float _2577 = _2576 * _2570;
                        float _2578 = _2576 * _2571;
                        float _2579 = _2576 * _2572;
                        float _2580 = dot(vec3(_587, _590, _593), vec3(_2577, _2578, _2579));
                        float _2585 = 1.0 - (_2573 * _2530.w);
                        float _3803 = isnan(0.0) ? _2585 : (isnan(_2585) ? 0.0 : max(_2585, 0.0));
                        float _2586 = isnan(1.0) ? _3803 : (isnan(_3803) ? 1.0 : min(_3803, 1.0));
                        float _2587 = sqrt(_2573) * _2549.w;
                        float _2590 = 1.39999997615814208984375 / (_2587 + 1.39999997615814208984375);
                        float _2591 = _2590 * _2590;
                        float _2594 = ((1.0 - _2591) * _2580) + _2591;
                        float _2597 = _2587 * _2587;
                        float _2601 = ((isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0))) * _2586) / ((_2597 * 0.699999988079071044921875) + 1.0);
                        float _2605 = (-0.0) - _1971;
                        float _2606 = (-0.0) - _1972;
                        float _2607 = (-0.0) - _1973;
                        float _2611 = inversesqrt(dot(vec3(_2605, _2606, _2607), vec3(_2605, _2606, _2607)));
                        float _2612 = _2611 * _2605;
                        float _2613 = _2611 * _2606;
                        float _2614 = _2611 * _2607;
                        float _2622 = exp2(log2(1.0 / ((_2597 * 3.5) + 5.0)) * 0.25);
                        float _2623 = 1.0 - _648;
                        float _2630 = sqrt(1.0 - ((1.0 - (_2623 * _2623)) * (1.0 - (_2622 * _2622))));
                        float _2631 = _2630 * _2630;
                        float _2632 = _2631 * _2631;
                        float _2633 = _2612 + _2577;
                        float _2634 = _2613 + _2578;
                        float _2635 = _2614 + _2579;
                        float _2639 = inversesqrt(dot(vec3(_2633, _2634, _2635), vec3(_2633, _2634, _2635)));
                        float _2643 = dot(vec3(_587, _590, _593), vec3(_2612, _2613, _2614));
                        float _3819 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
                        float _2646 = isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0));
                        float _2647 = dot(vec3(_587, _590, _593), vec3(_2639 * _2633, _2639 * _2634, _2639 * _2635));
                        float _3830 = isnan(0.0) ? _2647 : (isnan(_2647) ? 0.0 : max(_2647, 0.0));
                        float _2650 = isnan(1.0) ? _3830 : (isnan(_3830) ? 1.0 : min(_3830, 1.0));
                        float _2654 = ((_2650 * _2650) * (_2632 + (-1.0))) + 1.0;
                        float _2655 = _2590 * _2631;
                        float _2656 = _2655 * _2655;
                        float _2659 = ((1.0 - _2656) * _2580) + _2656;
                        float _3841 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
                        float _2660 = isnan(1.0) ? _3841 : (isnan(_3841) ? 1.0 : min(_3841, 1.0));
                        float _2661 = 1.0 - _2631;
                        float _2671 = (0.5 / (((_2660 * ((_2646 * _2661) + _2631)) + 9.9999999392252902907785028219223e-09) + (((_2660 * _2661) + _2631) * _2646))) * _2660;
                        float _3852 = isnan(0.0) ? _2671 : (isnan(_2671) ? 0.0 : max(_2671, 0.0));
                        float _2682 = (((_2632 * 3.1415927410125732421875) * (isnan(1.0) ? _3852 : (isnan(_3852) ? 1.0 : min(_3852, 1.0)))) / ((_2654 * _2654) * ((_2597 * 2.1991131305694580078125) + 3.141590118408203125))) * _2586;
                        _2408 = (_2601 * _2549.x) + _2507;
                        _2409 = (_2601 * _2549.y) + _2508;
                        _2410 = (_2601 * _2549.z) + _2509;
                        _2405 = (_2682 * _2566.x) + _2504;
                        _2406 = (_2682 * _2566.y) + _2505;
                        _2407 = (_2682 * _2566.z) + _2506;
                        if (_2511 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2504 = _2405;
                            _2505 = _2406;
                            _2506 = _2407;
                            _2507 = _2408;
                            _2508 = _2409;
                            _2509 = _2410;
                            _2510 = _2511;
                        }
                    }
                    frontier_phi_63_pred = _2407;
                    frontier_phi_63_pred_1 = _2410;
                    frontier_phi_63_pred_2 = _2409;
                    frontier_phi_63_pred_3 = _2408;
                    frontier_phi_63_pred_4 = _2406;
                    frontier_phi_63_pred_5 = _2405;
                }
                _2129 = frontier_phi_63_pred;
                _2135 = frontier_phi_63_pred_1;
                _2133 = frontier_phi_63_pred_2;
                _2131 = frontier_phi_63_pred_3;
                _2127 = frontier_phi_63_pred_4;
                _2125 = frontier_phi_63_pred_5;
                uint _2315 = _2314 + 1u;
                if (_2315 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2308 = _2125;
                    _2309 = _2127;
                    _2310 = _2129;
                    _2311 = _2131;
                    _2312 = _2133;
                    _2313 = _2135;
                    _2314 = _2315;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2124 = _2125;
            _2126 = _2127;
            _2128 = _2129;
            _2130 = _2131;
            _2132 = _2133;
            _2134 = _2135;
        }
        uvec4 _2138 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2139 = _2138.z;
        uint _2141 = (_2139 >> 8u) & 15u;
        float _2276;
        float _2278;
        float _2280;
        float _2282;
        float _2284;
        float _2286;
        if (((4294967295u << _2141) & _2017) == 0u)
        {
            _2276 = _2124;
            _2278 = _2126;
            _2280 = _2128;
            _2282 = _2130;
            _2284 = _2132;
            _2286 = _2134;
        }
        else
        {
            float _2301 = inversesqrt(dot(vec3(_1971, _1972, _1973), vec3(_1971, _1972, _1973)));
            float _2302 = _2301 * _1971;
            float _2303 = _2301 * _1972;
            float _2304 = _2301 * _1973;
            float frontier_phi_52_53_ladder;
            float frontier_phi_52_53_ladder_1;
            float frontier_phi_52_53_ladder_2;
            float frontier_phi_52_53_ladder_3;
            float frontier_phi_52_53_ladder_4;
            float frontier_phi_52_53_ladder_5;
            if (_2141 < ((_2139 >> 12u) & 15u))
            {
                float _2277;
                float _2279;
                float _2281;
                float _2283;
                float _2285;
                float _2287;
                float _2487 = _2124;
                float _2488 = _2126;
                float _2489 = _2128;
                float _2490 = _2130;
                float _2491 = _2132;
                float _2492 = _2134;
                uint _2493 = _2141;
                uint _2502;
                bool _2503;
                for (;;)
                {
                    _2502 = texelFetch(g_lightClassification, int((((_2011 << 5u) + (_1997 << 9u)) + (_2493 << 2u)) >> 2u)).x;
                    _2503 = _2502 == 0u;
                    float frontier_phi_77_pred;
                    float frontier_phi_77_pred_1;
                    float frontier_phi_77_pred_2;
                    float frontier_phi_77_pred_3;
                    float frontier_phi_77_pred_4;
                    float frontier_phi_77_pred_5;
                    if (_2503)
                    {
                        frontier_phi_77_pred = _2492;
                        frontier_phi_77_pred_1 = _2491;
                        frontier_phi_77_pred_2 = _2490;
                        frontier_phi_77_pred_3 = _2489;
                        frontier_phi_77_pred_4 = _2488;
                        frontier_phi_77_pred_5 = _2487;
                    }
                    else
                    {
                        float _2717;
                        float _2718;
                        float _2719;
                        float _2720;
                        float _2721;
                        float _2722;
                        float _3010;
                        float _3011;
                        float _3012;
                        float _3013;
                        float _3014;
                        float _3015;
                        float _2730 = _2487;
                        float _2731 = _2488;
                        float _2732 = _2489;
                        float _2733 = _2490;
                        float _2734 = _2491;
                        float _2735 = _2492;
                        uint _2736 = _2502;
                        uint _2737;
                        vec4 _2762;
                        float _2763;
                        vec4 _2778;
                        vec3 _2790;
                        vec4 _2805;
                        vec4 _2820;
                        float _2866;
                        bool _2867;
                        for (;;)
                        {
                            uint _2747 = ((_2493 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2736));
                            _2737 = (_2736 + 4294967295u) & _2736;
                            uint _2749 = _2747 * 40u;
                            _2762 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2749)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2749 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2749 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2749 + 3u)).x));
                            _2763 = _2762.w;
                            uint _2765 = (_2747 * 40u) + 4u;
                            _2778 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2765)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2765 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2765 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2765 + 3u)).x));
                            uint _2780 = (_2747 * 40u) + 8u;
                            _2790 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2780)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2780 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2780 + 2u)).x));
                            uint _2792 = (_2747 * 40u) + 16u;
                            _2805 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2792)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2792 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2792 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2792 + 3u)).x));
                            uint _2807 = (_2747 * 40u) + 20u;
                            _2820 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2807)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2807 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2807 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2807 + 3u)).x));
                            uint _2822 = (_2747 * 40u) + 24u;
                            vec4 _2835 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2822)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2822 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2822 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2822 + 3u)).x));
                            uint _2841 = (_2747 * 40u) + 28u;
                            vec4 _2854 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2841)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 3u)).x));
                            _2866 = fma(_1973, _2854.z, fma(_1972, _2854.y, _2854.x * _1971)) + _2854.w;
                            _2867 = !((fma(_1973, _2835.z, fma(_1972, _2835.y, _2835.x * _1971)) + _2835.w) <= 0.0);
                            float frontier_phi_83_pred;
                            float frontier_phi_83_pred_1;
                            float frontier_phi_83_pred_2;
                            float frontier_phi_83_pred_3;
                            float frontier_phi_83_pred_4;
                            float frontier_phi_83_pred_5;
                            if (_2867)
                            {
                                float _2894 = _2762.x - _1971;
                                float _2895 = _2762.y - _1972;
                                float _2896 = _2762.z - _1973;
                                float _2897 = dot(vec3(_2894, _2895, _2896), vec3(_2894, _2895, _2896));
                                float _2900 = inversesqrt(_2897);
                                float _2901 = _2900 * _2894;
                                float _2902 = _2900 * _2895;
                                float _2903 = _2900 * _2896;
                                float _2907 = 1.0 - (_2897 / (_2763 * _2763));
                                float _3863 = isnan(0.0) ? _2907 : (isnan(_2907) ? 0.0 : max(_2907, 0.0));
                                float _2908 = isnan(1.0) ? _3863 : (isnan(_3863) ? 1.0 : min(_3863, 1.0));
                                float _2912 = sqrt(_2897) * _2778.w;
                                float _2914 = 1.39999997615814208984375 / (_2912 + 1.39999997615814208984375);
                                float _2915 = _2914 * _2914;
                                float _2918 = ((1.0 - _2915) * dot(vec3(_2901, _2902, _2903), vec3(_587, _590, _593))) + _2915;
                                float _2921 = _2912 * _2912;
                                float _2925 = (fma(_1973, _2805.z, fma(_1972, _2805.y, _2805.x * _1971)) + _2805.w) / _2866;
                                float _2926 = (fma(_1973, _2820.z, fma(_1972, _2820.y, _2820.x * _1971)) + _2820.w) / _2866;
                                float _2930 = 1.0 - dot(vec2(_2925, _2926), vec2(_2925, _2926));
                                float _3879 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
                                float _2931 = isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0));
                                float _2932 = _2931 * (((isnan(0.0) ? _2918 : (isnan(_2918) ? 0.0 : max(_2918, 0.0))) * _2908) / ((_2921 * 0.699999988079071044921875) + 1.0));
                                float _2944 = exp2(log2(1.0 / ((_2921 * 3.5) + 5.0)) * 0.25);
                                float _2945 = 1.0 - _648;
                                float _2952 = sqrt(1.0 - ((1.0 - (_2945 * _2945)) * (1.0 - (_2944 * _2944))));
                                float _2953 = _2952 * _2952;
                                float _2954 = _2953 * _2953;
                                float _2955 = _2901 - _2302;
                                float _2956 = _2902 - _2303;
                                float _2957 = _2903 - _2304;
                                float _2961 = inversesqrt(dot(vec3(_2955, _2956, _2957), vec3(_2955, _2956, _2957)));
                                float _2965 = dot(vec3(_587, _590, _593), vec3((-0.0) - _2302, (-0.0) - _2303, (-0.0) - _2304));
                                float _3890 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
                                float _2968 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
                                float _2969 = dot(vec3(_587, _590, _593), vec3(_2961 * _2955, _2961 * _2956, _2961 * _2957));
                                float _3901 = isnan(0.0) ? _2969 : (isnan(_2969) ? 0.0 : max(_2969, 0.0));
                                float _2972 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
                                float _2976 = ((_2972 * _2972) * (_2954 + (-1.0))) + 1.0;
                                float _2977 = _2914 * _2953;
                                float _2978 = _2977 * _2977;
                                float _2984 = ((1.0 - _2978) * dot(vec3(_587, _590, _593), vec3(_2901, _2902, _2903))) + _2978;
                                float _3912 = isnan(0.0) ? _2984 : (isnan(_2984) ? 0.0 : max(_2984, 0.0));
                                float _2985 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
                                float _2986 = 1.0 - _2953;
                                float _2996 = (0.5 / (((_2985 * ((_2968 * _2986) + _2953)) + 9.9999999392252902907785028219223e-09) + (((_2985 * _2986) + _2953) * _2968))) * _2985;
                                float _3923 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0));
                                float _3006 = (_2931 * _2908) * (((_2954 * 3.1415927410125732421875) * (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0)))) / ((_2976 * _2976) * ((_2921 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_83_pred = _2932 * _2778.x;
                                frontier_phi_83_pred_1 = _2932 * _2778.z;
                                frontier_phi_83_pred_2 = _2932 * _2778.y;
                                frontier_phi_83_pred_3 = _3006 * _2790.z;
                                frontier_phi_83_pred_4 = _3006 * _2790.y;
                                frontier_phi_83_pred_5 = _3006 * _2790.x;
                            }
                            else
                            {
                                frontier_phi_83_pred = 0.0;
                                frontier_phi_83_pred_1 = 0.0;
                                frontier_phi_83_pred_2 = 0.0;
                                frontier_phi_83_pred_3 = 0.0;
                                frontier_phi_83_pred_4 = 0.0;
                                frontier_phi_83_pred_5 = 0.0;
                            }
                            _3013 = frontier_phi_83_pred;
                            _3015 = frontier_phi_83_pred_1;
                            _3014 = frontier_phi_83_pred_2;
                            _3012 = frontier_phi_83_pred_3;
                            _3011 = frontier_phi_83_pred_4;
                            _3010 = frontier_phi_83_pred_5;
                            _2720 = _3013 + _2733;
                            _2721 = _3014 + _2734;
                            _2722 = _3015 + _2735;
                            _2717 = _3010 + _2730;
                            _2718 = _3011 + _2731;
                            _2719 = _3012 + _2732;
                            if (_2737 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2730 = _2717;
                                _2731 = _2718;
                                _2732 = _2719;
                                _2733 = _2720;
                                _2734 = _2721;
                                _2735 = _2722;
                                _2736 = _2737;
                                continue;
                            }
                        }
                        frontier_phi_77_pred = _2722;
                        frontier_phi_77_pred_1 = _2721;
                        frontier_phi_77_pred_2 = _2720;
                        frontier_phi_77_pred_3 = _2719;
                        frontier_phi_77_pred_4 = _2718;
                        frontier_phi_77_pred_5 = _2717;
                    }
                    _2287 = frontier_phi_77_pred;
                    _2285 = frontier_phi_77_pred_1;
                    _2283 = frontier_phi_77_pred_2;
                    _2281 = frontier_phi_77_pred_3;
                    _2279 = frontier_phi_77_pred_4;
                    _2277 = frontier_phi_77_pred_5;
                    uint _2494 = _2493 + 1u;
                    if (_2494 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2487 = _2277;
                        _2488 = _2279;
                        _2489 = _2281;
                        _2490 = _2283;
                        _2491 = _2285;
                        _2492 = _2287;
                        _2493 = _2494;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_52_53_ladder = _2279;
                frontier_phi_52_53_ladder_1 = _2287;
                frontier_phi_52_53_ladder_2 = _2285;
                frontier_phi_52_53_ladder_3 = _2283;
                frontier_phi_52_53_ladder_4 = _2281;
                frontier_phi_52_53_ladder_5 = _2277;
            }
            else
            {
                frontier_phi_52_53_ladder = _2126;
                frontier_phi_52_53_ladder_1 = _2134;
                frontier_phi_52_53_ladder_2 = _2132;
                frontier_phi_52_53_ladder_3 = _2130;
                frontier_phi_52_53_ladder_4 = _2128;
                frontier_phi_52_53_ladder_5 = _2124;
            }
            _2276 = frontier_phi_52_53_ladder_5;
            _2278 = frontier_phi_52_53_ladder;
            _2280 = frontier_phi_52_53_ladder_4;
            _2282 = frontier_phi_52_53_ladder_3;
            _2284 = frontier_phi_52_53_ladder_2;
            _2286 = frontier_phi_52_53_ladder_1;
        }
        float _2291 = isnan(1.0) ? _632 : (isnan(_632) ? 1.0 : min(_632, 1.0));
        _2030 = (_2291 * _2282) + _1760;
        _2032 = (_2291 * _2284) + _1761;
        _2034 = (_2291 * _2286) + _1762;
        _2036 = ((_2276 * 0.039999999105930328369140625) * _2291) + _1913;
        _2038 = ((_2278 * 0.039999999105930328369140625) * _2291) + _1914;
        _2040 = ((_2280 * 0.039999999105930328369140625) * _2291) + _1915;
    }
    else
    {
        _2030 = _1760;
        _2032 = _1761;
        _2034 = _1762;
        _2036 = _1913;
        _2038 = _1914;
        _2040 = _1915;
    }
    uint _2046 = _608 + uint(cbMatDynParam._m0[0u].w);
    float _3939 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _3950 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _3961 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _2071 = (((isnan(1.0) ? _3939 : (isnan(_3939) ? 1.0 : min(_3939, 1.0))) * (_2030 + ((isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0))) * _632))) + ((_2036 + ((isnan(0.0) ? _1683 : (isnan(_1683) ? 0.0 : max(_1683, 0.0))) * _1469)) * cbPerFrame._m0[3u].x)) + (((_463.x * _283) * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2046].x);
    float _2073 = ((((_463.y * _283) * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2046].y) + ((_2038 + ((isnan(0.0) ? _1686 : (isnan(_1686) ? 0.0 : max(_1686, 0.0))) * _1469)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3950 : (isnan(_3950) ? 1.0 : min(_3950, 1.0))) * (_2032 + ((isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0))) * _632)));
    float _2075 = ((((_463.z * _283) * cbMtdParam._m0[9u].z) * cbInstanceData._m0[_2046].z) + ((_2040 + ((isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0))) * _1469)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3961 : (isnan(_3961) ? 1.0 : min(_3961, 1.0))) * (_2034 + ((isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0))) * _632)));
    float _2076 = isnan(0.0) ? _2071 : (isnan(_2071) ? 0.0 : max(_2071, 0.0));
    float _2077 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _2078 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
    uint _2079 = _606 + 6u;
    float _2087 = _567 / cbSceneParam._m0[86u].x;
    float _2088 = _568 / cbSceneParam._m0[86u].y;
    vec4 _2102 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2087, _2088, (log2((isnan(cbSceneParam._m0[77u].w) ? _541 : (isnan(_541) ? cbSceneParam._m0[77u].w : min(_541, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2104 = _2102.x;
    float _2105 = _2102.y;
    float _2106 = _2102.z;
    float _2107 = _2102.w;
    float _2187;
    float _2189;
    float _2191;
    float _2193;
    if (_541 > cbSceneParam._m0[78u].w)
    {
        float _2149 = isnan(_541) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _541 : min(cbSceneParam._m0[80u].w, _541));
        float _2150 = _2149 / _541;
        float _2161 = _2150 * _265;
        float _2162 = _266 * _2150;
        float _2163 = (-0.0) - _2162;
        float _2164 = _2150 * _267;
        float _2166 = (cbSceneParam._m0[77u].w * _2163) / _2149;
        float _2167 = _2166 + cbSceneParam._m0[79u].w;
        float _2168 = cbSceneParam._m0[79u].w - _2162;
        float _2174 = sqrt(((_2161 * _2161) + (_2162 * _2162)) + (_2164 * _2164));
        float _2177 = (1.0 - (cbSceneParam._m0[77u].w / _2149)) * _2174;
        float _2183 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2185 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2418;
        if (abs((_2163 - _2166) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2418 = ((((_2167 > 0.0) ? exp2(_2183 * _2167) : (2.0 - exp2(_2185 * _2167))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2177;
        }
        else
        {
            float _2337 = 1.0 / cbSceneParam._m0[80u].x;
            float _2338 = isnan(_2168) ? _2167 : (isnan(_2167) ? _2168 : max(_2167, _2168));
            float _2339 = isnan(_2168) ? _2167 : (isnan(_2167) ? _2168 : min(_2167, _2168));
            float _2348 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : min(_2338, 0.0));
            float _2349 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : min(_2339, 0.0));
            _2418 = ((abs(_2174 / _2163) * cbSceneParam._m0[80u].y) * ((((_2348 - _2349) * 2.0) - ((exp2(_2183 * (isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0)))) - exp2(_2183 * (isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0))))) * _2337)) - ((exp2(_2185 * _2348) - exp2(_2185 * _2349)) * _2337))) + (_2177 * cbSceneParam._m0[80u].z);
        }
        vec4 _2420 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2087, _2088, 1.0), 0.0);
        float _2429 = exp2((_2418 * (-1.44269502162933349609375)) * (1.0 - _2420.w));
        float _2430 = log2(_2429);
        float _2446 = log2(_2107);
        _2187 = (exp2(_2446 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2430 * cbSceneParam._m0[78u].x)) * _2420.x) / cbSceneParam._m0[78u].x)) + _2104;
        _2189 = (exp2(_2446 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2430 * cbSceneParam._m0[78u].y)) * _2420.y) / cbSceneParam._m0[78u].y)) + _2105;
        _2191 = (exp2(_2446 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2430 * cbSceneParam._m0[78u].z)) * _2420.z) / cbSceneParam._m0[78u].z)) + _2106;
        _2193 = _2429 * _2107;
    }
    else
    {
        _2187 = _2104;
        _2189 = _2105;
        _2191 = _2106;
        _2193 = _2107;
    }
    bool _2456;
    vec4 _2203;
    vec4 _2225;
    float _2227;
    float _2231;
    float _2232;
    float _2233;
    float _2234;
    bool _2244;
    for (;;)
    {
        _2203 = cbMatDynParam._m0[0u];
        float _2205 = roundEven(_2203.y);
        bool _2206 = _2205 == 3.0;
        float _2207 = log2(_2193);
        float _2214 = exp2(_2207 * cbSceneParam._m0[78u].x) * _2076;
        float _2215 = exp2(_2207 * cbSceneParam._m0[78u].y) * _2077;
        float _2216 = exp2(_2207 * cbSceneParam._m0[78u].z) * _2078;
        float _2223 = _555 + (-0.5);
        _2225 = cbMtdParam._m0[1u];
        _2227 = _2225.y * _2223;
        float _2230 = (_2205 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2231 = _2230 * (_2206 ? _2214 : (_2214 + (cbSceneParam._m0[72u].w * _2187)));
        _2232 = _2230 * (_2206 ? _2215 : (_2215 + (cbSceneParam._m0[72u].w * _2189)));
        _2233 = _2230 * (_2206 ? _2216 : (_2216 + (cbSceneParam._m0[72u].w * _2191)));
        _2234 = _2223 * 0.999000012874603271484375;
        _2244 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2244)
        {
            if ((cbInstanceData._m0[_606 + 7u].x + _2234) < 0.5)
            {
                _2456 = true;
                break;
            }
        }
        uint _2372 = _608 + uint(_2203.w);
        if ((cbInstanceData._m0[_2372].w < 1.0) && ((cbInstanceData._m0[_2372].w + _2234) < 0.5))
        {
            _2456 = true;
            break;
        }
        if ((_2227 + 1.0) < _2225.x)
        {
            _2456 = true;
            break;
        }
        _2456 = false;
        break;
    }
    float _2687;
    if (_2456)
    {
        discard_state = true;
        _2687 = 0.0;
    }
    else
    {
        _2687 = cbInstanceData._m0[_2079].w;
    }
    SV_Target.x = _2231;
    SV_Target.y = _2232;
    SV_Target.z = _2233;
    SV_Target.w = _2687;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2079].w;
    discard_exit();
}


