#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _988;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _278 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _281 = _278.x;
    vec4 _299 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _316 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _281) + cbMtdParam._m0[12u].x) * _299.x;
    float _318 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _281) + cbMtdParam._m0[12u].y) * _299.y;
    float _320 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _281) + cbMtdParam._m0[12u].z) * _299.z;
    vec4 _338 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _374 = cbMtdParam._m0[24u].x + _263;
    float _375 = cbMtdParam._m0[24u].y + _264;
    float _376 = cbMtdParam._m0[24u].z + _265;
    float _390 = (-0.0) - dot(vec3(_374, _375, _376), vec3(_192, _193, _194));
    float _391 = (-0.0) - dot(vec3(_374, _375, _376), vec3(_206, _207, _208));
    float _392 = (-0.0) - dot(vec3(_374, _375, _376), vec3((-0.0) - _199, (-0.0) - _200, (-0.0) - _201));
    float _396 = inversesqrt(dot(vec3(_390, _391, _392), vec3(_390, _391, _392)));
    float _399 = _396 * _392;
    float _402 = ((_396 * _390) + ((cbMtdParam._m0[22u].x * _281) * ((_338.x * 2.0) + (-1.0)))) * cbMtdParam._m0[20u].w;
    float _403 = ((_396 * _391) + ((cbMtdParam._m0[22u].y * _281) * ((_338.y * 2.0) + (-1.0)))) * cbMtdParam._m0[20u].z;
    float _404 = fract(TEXCOORD.x);
    float _405 = fract(TEXCOORD.y);
    float _411;
    if (_402 > 0.0)
    {
        _411 = (1.0 - _404) / _402;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_402 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _404) / _402;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _411 = frontier_phi_3_2_ladder;
    }
    float _419;
    if (_403 > 0.0)
    {
        _419 = (1.0 - _405) / _403;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_403 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _405) / _403;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _419 = frontier_phi_7_6_ladder;
    }
    float _423 = (_399 > 0.0) ? (cbMtdParam._m0[16u].x / _399) : 5000.0;
    float _424 = isnan(_419) ? _411 : (isnan(_411) ? _419 : min(_411, _419));
    float _425 = isnan(_423) ? _424 : (isnan(_424) ? _423 : min(_424, _423));
    float _429 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _436 = ((_425 * _399) + _429) / _429;
    vec4 _461 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * ((((((_404 + (-0.5)) + (_425 * _402)) / _436) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * ((((((_405 + (-0.5)) + (_425 * _403)) / _436) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    vec4 _489 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _493 = _489.z;
    float _496 = (_489.x * 2.0) + (-1.0);
    float _497 = (_489.y * 2.0) + (-1.0);
    float _498 = dot(vec2(_496, _497), vec2(_496, _497));
    float _3098 = isnan(0.0) ? _498 : (isnan(_498) ? 0.0 : max(_498, 0.0));
    float _503 = sqrt(1.0 - (isnan(1.0) ? _3098 : (isnan(_3098) ? 1.0 : min(_3098, 1.0))));
    float _506 = fma(_503, _199, fma(_497, _206, _496 * _192));
    float _509 = fma(_503, _200, fma(_497, _207, _496 * _193));
    float _512 = fma(_503, _201, fma(_497, _208, _496 * _194));
    float _516 = inversesqrt(dot(vec3(_506, _509, _512), vec3(_506, _509, _512)));
    float _517 = _516 * _506;
    float _518 = _516 * _509;
    float _519 = _516 * _512;
    float _3109 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _520 = isnan(1.0) ? _3109 : (isnan(_3109) ? 1.0 : min(_3109, 1.0));
    float _3120 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _3131 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _3142 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _539 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _543 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _544 = _263 * _543;
    float _545 = _264 * _543;
    float _546 = _265 * _543;
    float _552 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _553 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _572 = fma(_519, cbSceneParam._m0[5u].z, fma(_518, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _517));
    float _575 = fma(_519, cbSceneParam._m0[6u].z, fma(_518, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _517));
    float _578 = fma(_519, cbSceneParam._m0[7u].z, fma(_518, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _517));
    uint _591 = uint(roundEven(NORMAL.w)) * 13u;
    uint _593 = _591 + 9u;
    uint _594 = _593 + uint(cbMatDynParam._m0[0u].w);
    float _600 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3120 : (isnan(_3120) ? 1.0 : min(_3120, 1.0)))) * cbInstanceData._m0[_594].x;
    float _601 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3131 : (isnan(_3131) ? 1.0 : min(_3131, 1.0)))) * cbInstanceData._m0[_594].y;
    float _602 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3142 : (isnan(_3142) ? 1.0 : min(_3142, 1.0)))) * cbInstanceData._m0[_594].z;
    float _3153 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _603 = isnan(1.0) ? _3153 : (isnan(_3153) ? 1.0 : min(_3153, 1.0));
    float _3164 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _604 = isnan(1.0) ? _3164 : (isnan(_3164) ? 1.0 : min(_3164, 1.0));
    float _3175 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _605 = isnan(1.0) ? _3175 : (isnan(_3175) ? 1.0 : min(_3175, 1.0));
    vec4 _614 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _552, cbSceneParam._m0[86u].y * _553));
    float _617 = _614.x * TEXCOORD_4.z;
    float _618 = dot(vec3(_517, _518, _519), vec3(_544, _545, _546));
    float _621 = _618 * 2.0;
    float _625 = (_621 * _517) - _544;
    float _626 = (_621 * _518) - _545;
    float _627 = (_621 * _519) - _546;
    float _631 = abs(dot(vec3(_544, _545, _546), vec3(_517, _518, _519)));
    float _3186 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _633 = sqrt(_520);
    float _646 = exp2((_633 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3186 : (isnan(_3186) ? 1.0 : min(_3186, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_633 * 3.0));
    float _678 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _682 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _686 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _987;
    float _989;
    float _990;
    float _991;
    float _992;
    float _993;
    float _994;
    float _995;
    float _996;
    float _997;
    float _998;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _714 = fma(_686, cbModelParam._m0[26u].z, fma(_682, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _678));
        float _718 = fma(_686, cbModelParam._m0[27u].z, fma(_682, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _678));
        float _722 = fma(_686, cbModelParam._m0[28u].z, fma(_682, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _678));
        float _745 = _678 + _517;
        float _746 = _682 + _518;
        float _747 = _686 + _519;
        float _757 = fma(_747, cbModelParam._m0[26u].z, fma(_746, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _745)) - _714;
        float _758 = fma(_747, cbModelParam._m0[27u].z, fma(_746, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _745)) - _718;
        float _759 = fma(_747, cbModelParam._m0[28u].z, fma(_746, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _745)) - _722;
        float _763 = inversesqrt(dot(vec3(_757, _758, _759), vec3(_757, _758, _759)));
        float _776 = ((_763 * _757) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_714 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _777 = ((_763 * _758) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_718 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _778 = ((_763 * _759) / cbModelParam._m0[34u].z) + ((((((_722 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _781 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_776, _777, _778), 0.0);
        vec4 _788 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_776, _777, _778), 0.0);
        vec4 _795 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_776, _777, _778), 0.0);
        vec4 _802 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_776, _777, _778), 0.0);
        float _815 = exp2((_781.w + (-0.5)) * 20.0) * 2.0;
        float _816 = _815 * (_781.x + (-0.5));
        float _817 = _815 * (_781.y + (-0.5));
        float _818 = _815 * (_781.z + (-0.5));
        float _825 = exp2((_788.w + (-0.5)) * 20.0) * 2.0;
        float _826 = _825 * (_788.x + (-0.5));
        float _827 = _825 * (_788.y + (-0.5));
        float _828 = _825 * (_788.z + (-0.5));
        float _835 = exp2((_795.w + (-0.5)) * 20.0) * 2.0;
        float _836 = _835 * (_795.x + (-0.5));
        float _837 = _835 * (_795.y + (-0.5));
        float _838 = _835 * (_795.z + (-0.5));
        float _845 = exp2((_802.w + (-0.5)) * 20.0) * 2.0;
        float _846 = _845 * (_802.x + (-0.5));
        float _847 = _845 * (_802.y + (-0.5));
        float _848 = _845 * (_802.z + (-0.5));
        float _849 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _850 = isnan(0.0) ? _847 : (isnan(_847) ? 0.0 : max(_847, 0.0));
        float _851 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _852 = _816 * 0.5;
        float _853 = _826 * 0.5;
        float _854 = _836 * 0.5;
        float _855 = dot(vec3(_852, _853, _854), vec3(_852, _853, _854));
        float _860 = (_855 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_855);
        float _869 = (dot(vec3(_517, _518, _519), vec3(_860 * _852, _860 * _853, _860 * _854)) + 1.0) * 0.5;
        float _3212 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _879 = sqrt(((_853 * _853) + (_852 * _852)) + (_854 * _854)) / (_849 + 9.9999997473787516355514526367188e-06);
        float _3223 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
        float _880 = isnan(1.0) ? _3223 : (isnan(_3223) ? 1.0 : min(_3223, 1.0));
        float _881 = _880 * 2.0;
        float _885 = (1.0 - _880) / (_880 + 1.0);
        float _3234 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        float _886 = isnan(1.0) ? _3234 : (isnan(_3234) ? 1.0 : min(_3234, 1.0));
        float _895 = ((((1.0 - _886) * (_881 + 2.0)) * exp2(log2(isnan(1.0) ? _3212 : (isnan(_3212) ? 1.0 : min(_3212, 1.0))) * (_881 + 1.0))) + _886) * _849;
        float _896 = _817 * 0.5;
        float _897 = _827 * 0.5;
        float _898 = _837 * 0.5;
        float _899 = dot(vec3(_896, _897, _898), vec3(_896, _897, _898));
        float _904 = (_899 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_899);
        float _912 = (dot(vec3(_517, _518, _519), vec3(_904 * _896, _904 * _897, _904 * _898)) + 1.0) * 0.5;
        float _3245 = isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0));
        float _921 = sqrt(((_897 * _897) + (_896 * _896)) + (_898 * _898)) / (_850 + 9.9999997473787516355514526367188e-06);
        float _3256 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _922 = isnan(1.0) ? _3256 : (isnan(_3256) ? 1.0 : min(_3256, 1.0));
        float _923 = _922 * 2.0;
        float _927 = (1.0 - _922) / (_922 + 1.0);
        float _3267 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _928 = isnan(1.0) ? _3267 : (isnan(_3267) ? 1.0 : min(_3267, 1.0));
        float _937 = ((((1.0 - _928) * (_923 + 2.0)) * exp2(log2(isnan(1.0) ? _3245 : (isnan(_3245) ? 1.0 : min(_3245, 1.0))) * (_923 + 1.0))) + _928) * _850;
        float _938 = _818 * 0.5;
        float _939 = _828 * 0.5;
        float _940 = _838 * 0.5;
        float _941 = dot(vec3(_938, _939, _940), vec3(_938, _939, _940));
        float _946 = (_941 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_941);
        float _954 = (dot(vec3(_517, _518, _519), vec3(_946 * _938, _946 * _939, _946 * _940)) + 1.0) * 0.5;
        float _3278 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _963 = sqrt(((_939 * _939) + (_938 * _938)) + (_940 * _940)) / (_851 + 9.9999997473787516355514526367188e-06);
        float _3289 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _964 = isnan(1.0) ? _3289 : (isnan(_3289) ? 1.0 : min(_3289, 1.0));
        float _965 = _964 * 2.0;
        float _969 = (1.0 - _964) / (_964 + 1.0);
        float _3300 = isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0));
        float _970 = isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0));
        float _979 = ((((1.0 - _970) * (_965 + 2.0)) * exp2(log2(isnan(1.0) ? _3278 : (isnan(_3278) ? 1.0 : min(_3278, 1.0))) * (_965 + 1.0))) + _970) * _851;
        _987 = _818;
        _989 = _817;
        _990 = _816;
        _991 = _828;
        _992 = _827;
        _993 = _826;
        _994 = _838;
        _995 = _837;
        _996 = _836;
        _997 = _851;
        _998 = _850;
        _999 = _849;
        _1000 = cbModelParam._m0[36u].z * (isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0)));
        _1001 = cbModelParam._m0[36u].z * (isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0)));
        _1002 = cbModelParam._m0[36u].z * (isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0)));
    }
    else
    {
        _987 = _988;
        _989 = _988;
        _990 = _988;
        _991 = _988;
        _992 = _988;
        _993 = _988;
        _994 = _988;
        _995 = _988;
        _996 = _988;
        _997 = _988;
        _998 = _988;
        _999 = _988;
        _1000 = 0.0;
        _1001 = 0.0;
        _1002 = 0.0;
    }
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1028 = fma(_686, cbModelParam._m0[30u].z, fma(_682, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _678));
        float _1032 = fma(_686, cbModelParam._m0[31u].z, fma(_682, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _678));
        float _1036 = fma(_686, cbModelParam._m0[32u].z, fma(_682, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _678));
        float _1059 = _678 + _517;
        float _1060 = _682 + _518;
        float _1061 = _686 + _519;
        float _1071 = fma(_1061, cbModelParam._m0[30u].z, fma(_1060, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1059)) - _1028;
        float _1072 = fma(_1061, cbModelParam._m0[31u].z, fma(_1060, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1059)) - _1032;
        float _1073 = fma(_1061, cbModelParam._m0[32u].z, fma(_1060, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1059)) - _1036;
        float _1077 = inversesqrt(dot(vec3(_1071, _1072, _1073), vec3(_1071, _1072, _1073)));
        float _1090 = ((_1077 * _1071) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1028 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1091 = ((_1077 * _1072) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1032 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1092 = ((_1077 * _1073) / cbModelParam._m0[35u].z) + ((((((_1036 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1094 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1090, _1091, _1092), 0.0);
        vec4 _1101 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1090, _1091, _1092), 0.0);
        vec4 _1108 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1090, _1091, _1092), 0.0);
        vec4 _1115 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1090, _1091, _1092), 0.0);
        float _1127 = exp2((_1094.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1094.x + (-0.5));
        float _1129 = _1127 * (_1094.y + (-0.5));
        float _1130 = _1127 * (_1094.z + (-0.5));
        float _1137 = exp2((_1101.w + (-0.5)) * 20.0) * 2.0;
        float _1138 = _1137 * (_1101.x + (-0.5));
        float _1139 = _1137 * (_1101.y + (-0.5));
        float _1140 = _1137 * (_1101.z + (-0.5));
        float _1147 = exp2((_1108.w + (-0.5)) * 20.0) * 2.0;
        float _1148 = _1147 * (_1108.x + (-0.5));
        float _1149 = _1147 * (_1108.y + (-0.5));
        float _1150 = _1147 * (_1108.z + (-0.5));
        float _1157 = exp2((_1115.w + (-0.5)) * 20.0) * 2.0;
        float _1158 = _1157 * (_1115.x + (-0.5));
        float _1159 = _1157 * (_1115.y + (-0.5));
        float _1160 = _1157 * (_1115.z + (-0.5));
        float _1161 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1162 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1163 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1164 = _1128 * 0.5;
        float _1165 = _1138 * 0.5;
        float _1166 = _1148 * 0.5;
        float _1167 = dot(vec3(_1164, _1165, _1166), vec3(_1164, _1165, _1166));
        float _1172 = (_1167 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1167);
        float _1180 = (dot(vec3(_517, _518, _519), vec3(_1172 * _1164, _1172 * _1165, _1172 * _1166)) + 1.0) * 0.5;
        float _3341 = isnan(0.0) ? _1180 : (isnan(_1180) ? 0.0 : max(_1180, 0.0));
        float _1189 = sqrt(((_1165 * _1165) + (_1164 * _1164)) + (_1166 * _1166)) / (_1161 + 9.9999997473787516355514526367188e-06);
        float _3352 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1190 = isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0));
        float _1191 = _1190 * 2.0;
        float _1195 = (1.0 - _1190) / (_1190 + 1.0);
        float _3363 = isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0));
        float _1196 = isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0));
        float _1205 = ((((1.0 - _1196) * (_1191 + 2.0)) * exp2(log2(isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0))) * (_1191 + 1.0))) + _1196) * _1161;
        float _1206 = _1129 * 0.5;
        float _1207 = _1139 * 0.5;
        float _1208 = _1149 * 0.5;
        float _1209 = dot(vec3(_1206, _1207, _1208), vec3(_1206, _1207, _1208));
        float _1214 = (_1209 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1209);
        float _1222 = (dot(vec3(_517, _518, _519), vec3(_1214 * _1206, _1214 * _1207, _1214 * _1208)) + 1.0) * 0.5;
        float _3374 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1231 = sqrt(((_1207 * _1207) + (_1206 * _1206)) + (_1208 * _1208)) / (_1162 + 9.9999997473787516355514526367188e-06);
        float _3385 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1232 = isnan(1.0) ? _3385 : (isnan(_3385) ? 1.0 : min(_3385, 1.0));
        float _1233 = _1232 * 2.0;
        float _1237 = (1.0 - _1232) / (_1232 + 1.0);
        float _3396 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
        float _1238 = isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0));
        float _1247 = ((((1.0 - _1238) * (_1233 + 2.0)) * exp2(log2(isnan(1.0) ? _3374 : (isnan(_3374) ? 1.0 : min(_3374, 1.0))) * (_1233 + 1.0))) + _1238) * _1162;
        float _1248 = _1130 * 0.5;
        float _1249 = _1140 * 0.5;
        float _1250 = _1150 * 0.5;
        float _1251 = dot(vec3(_1248, _1249, _1250), vec3(_1248, _1249, _1250));
        float _1256 = (_1251 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1251);
        float _1264 = (dot(vec3(_517, _518, _519), vec3(_1256 * _1248, _1256 * _1249, _1256 * _1250)) + 1.0) * 0.5;
        float _3407 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1273 = sqrt(((_1249 * _1249) + (_1248 * _1248)) + (_1250 * _1250)) / (_1163 + 9.9999997473787516355514526367188e-06);
        float _3418 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1274 = isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0));
        float _1275 = _1274 * 2.0;
        float _1279 = (1.0 - _1274) / (_1274 + 1.0);
        float _3429 = isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0));
        float _1280 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
        float _1289 = ((((1.0 - _1280) * (_1275 + 2.0)) * exp2(log2(isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0))) * (_1275 + 1.0))) + _1280) * _1163;
        _1297 = _1130;
        _1298 = _1129;
        _1299 = _1128;
        _1300 = _1140;
        _1301 = _1139;
        _1302 = _1138;
        _1303 = _1150;
        _1304 = _1149;
        _1305 = _1148;
        _1306 = _1163;
        _1307 = _1162;
        _1308 = _1161;
        _1309 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0)));
        _1310 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0)));
        _1311 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0)));
    }
    else
    {
        _1297 = _988;
        _1298 = _988;
        _1299 = _988;
        _1300 = _988;
        _1301 = _988;
        _1302 = _988;
        _1303 = _988;
        _1304 = _988;
        _1305 = _988;
        _1306 = _988;
        _1307 = _988;
        _1308 = _988;
        _1309 = 0.0;
        _1310 = 0.0;
        _1311 = 0.0;
    }
    float _1321 = (cbModelParam._m0[1u].x * (_1309 - _1000)) + _1000;
    float _1322 = (cbModelParam._m0[1u].x * (_1310 - _1001)) + _1001;
    float _1323 = (cbModelParam._m0[1u].x * (_1311 - _1002)) + _1002;
    float _1344 = fma(_1323, cbSceneParam._m0[89u].z, fma(_1322, cbSceneParam._m0[89u].y, _1321 * cbSceneParam._m0[89u].x));
    float _1347 = fma(_1323, cbSceneParam._m0[90u].z, fma(_1322, cbSceneParam._m0[90u].y, _1321 * cbSceneParam._m0[90u].x));
    float _1350 = fma(_1323, cbSceneParam._m0[91u].z, fma(_1322, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1321));
    float _1365 = _625 * 0.5;
    float _1366 = _626 * 0.5;
    float _1367 = _627 * 0.5;
    float _1368 = dot(vec4(_1365, _1366, _1367, 1.0), vec4(_1299, _1302, _1305, _1308));
    float _1371 = dot(vec4(_1365, _1366, _1367, 1.0), vec4(_1298, _1301, _1304, _1307));
    float _1374 = dot(vec4(_1365, _1366, _1367, 1.0), vec4(_1297, _1300, _1303, _1306));
    float _1408;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1381 = dot(vec4(_1365, _1366, _1367, 1.0), vec4(_987, _991, _994, _997));
        float _1385 = dot(vec4(_1365, _1366, _1367, 1.0), vec4(_989, _992, _995, _998));
        float _1389 = dot(vec4(_1365, _1366, _1367, 1.0), vec4(_990, _993, _996, _999));
        float _1396 = dot(vec4(cbModelParam._m0[39u]), vec4(_1365, _1366, _1367, 1.0));
        _1408 = dot(vec3(isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0)), isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)), isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1396) ? 0.0 : (isnan(0.0) ? _1396 : max(0.0, _1396))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1408 = 1.0;
    }
    float _1419;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1410 = dot(vec4(cbModelParam._m0[40u]), vec4(_1365, _1366, _1367, 1.0));
        _1419 = dot(vec3(isnan(0.0) ? _1368 : (isnan(_1368) ? 0.0 : max(_1368, 0.0)), isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0)), isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1410) ? 0.0 : (isnan(0.0) ? _1410 : max(0.0, _1410))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1419 = 1.0;
    }
    float _1423 = (_1419 * cbModelParam._m0[1u].x) + (_1408 * (1.0 - cbModelParam._m0[1u].x));
    float _1433 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _520);
    float _1434 = isnan(_1433) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1433 : min(cbModelParam._m0[25u].z, _1433));
    float _1516;
    float _1518;
    float _1520;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1483 = fma(_686, cbModelParam._m0[13u].z, fma(_682, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _678)) + cbModelParam._m0[13u].w;
        float _1487 = fma(_686, cbModelParam._m0[14u].z, fma(_682, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _678)) + cbModelParam._m0[14u].w;
        float _1491 = fma(_686, cbModelParam._m0[15u].z, fma(_682, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _678)) + cbModelParam._m0[15u].w;
        float _1494 = fma(_627, cbModelParam._m0[13u].z, fma(_626, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _625));
        float _1497 = fma(_627, cbModelParam._m0[14u].z, fma(_626, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _625));
        float _1500 = fma(_627, cbModelParam._m0[15u].z, fma(_626, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _625));
        float _1528;
        if (_1494 > 0.0)
        {
            _1528 = abs((1.0 - _1483) / _1494);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1494 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1483 + 1.0) / _1494);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1528 = frontier_phi_22_20_ladder;
        }
        float _1899;
        if (_1497 > 0.0)
        {
            _1899 = abs((1.0 - _1487) / _1497);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1497 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1487 + 1.0) / _1497);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1899 = frontier_phi_31_27_ladder;
        }
        float _2215;
        if (_1500 > 0.0)
        {
            _2215 = abs((1.0 - _1491) / _1500);
        }
        else
        {
            float frontier_phi_45_38_ladder;
            if (_1500 < 0.0)
            {
                frontier_phi_45_38_ladder = abs((_1491 + 1.0) / _1500);
            }
            else
            {
                frontier_phi_45_38_ladder = 5000.0;
            }
            _2215 = frontier_phi_45_38_ladder;
        }
        float _2217 = isnan(_1899) ? _1528 : (isnan(_1528) ? _1899 : min(_1528, _1899));
        float _2218 = isnan(_2215) ? _2217 : (isnan(_2217) ? _2215 : min(_2217, _2215));
        float _2222 = (_2218 * _1494) + _1483;
        float _2223 = (_2218 * _1497) + _1487;
        float _2224 = (_2218 * _1500) + _1491;
        float _2225 = _2218 * 9.9999997473787516355514526367188e-05;
        float _2226 = (-1.0) - _2225;
        float _2228 = _2225 + 1.0;
        float frontier_phi_21_45_ladder;
        float frontier_phi_21_45_ladder_1;
        float frontier_phi_21_45_ladder_2;
        if ((_2224 > _2228) || ((_2224 < _2226) || ((_2223 > _2228) || ((_2223 < _2226) || ((_2222 < _2226) || (_2222 > _2228))))))
        {
            frontier_phi_21_45_ladder = 0.0;
            frontier_phi_21_45_ladder_1 = 0.0;
            frontier_phi_21_45_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2350 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2224, cbModelParam._m0[9u].z, fma(_2223, cbModelParam._m0[9u].y, _2222 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2224, cbModelParam._m0[10u].z, fma(_2223, cbModelParam._m0[10u].y, _2222 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2224, cbModelParam._m0[11u].z, fma(_2223, cbModelParam._m0[11u].y, _2222 * cbModelParam._m0[11u].x))), _1434);
            frontier_phi_21_45_ladder = _2350.z * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_1 = _2350.y * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_2 = _2350.x * cbModelParam._m0[1u].y;
        }
        _1516 = frontier_phi_21_45_ladder_2;
        _1518 = frontier_phi_21_45_ladder_1;
        _1520 = frontier_phi_21_45_ladder;
    }
    else
    {
        vec4 _1504 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_625, _626, _627), _1434);
        _1516 = _1504.x * cbModelParam._m0[1u].y;
        _1518 = _1504.y * cbModelParam._m0[1u].y;
        _1520 = _1504.z * cbModelParam._m0[1u].y;
    }
    float _1524 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _520);
    float _1525 = isnan(_1524) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1524 : min(cbModelParam._m0[25u].w, _1524));
    float _1615;
    float _1617;
    float _1619;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1579 = fma(_686, cbModelParam._m0[21u].z, fma(_682, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _678)) + cbModelParam._m0[21u].w;
        float _1583 = fma(_686, cbModelParam._m0[22u].z, fma(_682, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _678)) + cbModelParam._m0[22u].w;
        float _1587 = fma(_686, cbModelParam._m0[23u].z, fma(_682, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _678)) + cbModelParam._m0[23u].w;
        float _1590 = fma(_627, cbModelParam._m0[21u].z, fma(_626, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _625));
        float _1593 = fma(_627, cbModelParam._m0[22u].z, fma(_626, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _625));
        float _1596 = fma(_627, cbModelParam._m0[23u].z, fma(_626, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _625));
        float _1904;
        if (_1590 > 0.0)
        {
            _1904 = abs((1.0 - _1579) / _1590);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1590 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1579 + 1.0) / _1590);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1904 = frontier_phi_33_29_ladder;
        }
        float _2241;
        if (_1593 > 0.0)
        {
            _2241 = abs((1.0 - _1583) / _1593);
        }
        else
        {
            float frontier_phi_47_40_ladder;
            if (_1593 < 0.0)
            {
                frontier_phi_47_40_ladder = abs((_1583 + 1.0) / _1593);
            }
            else
            {
                frontier_phi_47_40_ladder = 5000.0;
            }
            _2241 = frontier_phi_47_40_ladder;
        }
        float _2410;
        if (_1596 > 0.0)
        {
            _2410 = abs((1.0 - _1587) / _1596);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1596 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1587 + 1.0) / _1596);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2410 = frontier_phi_61_56_ladder;
        }
        float _2412 = isnan(_2241) ? _1904 : (isnan(_1904) ? _2241 : min(_1904, _2241));
        float _2413 = isnan(_2410) ? _2412 : (isnan(_2412) ? _2410 : min(_2412, _2410));
        float _2417 = (_2413 * _1590) + _1579;
        float _2418 = (_2413 * _1593) + _1583;
        float _2419 = (_2413 * _1596) + _1587;
        float _2420 = _2413 * 9.9999997473787516355514526367188e-05;
        float _2421 = (-1.0) - _2420;
        float _2423 = _2420 + 1.0;
        float frontier_phi_30_61_ladder;
        float frontier_phi_30_61_ladder_1;
        float frontier_phi_30_61_ladder_2;
        if ((_2419 > _2423) || ((_2419 < _2421) || ((_2418 > _2423) || ((_2418 < _2421) || ((_2417 < _2421) || (_2417 > _2423))))))
        {
            frontier_phi_30_61_ladder = 0.0;
            frontier_phi_30_61_ladder_1 = 0.0;
            frontier_phi_30_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2652 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2419, cbModelParam._m0[17u].z, fma(_2418, cbModelParam._m0[17u].y, _2417 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2419, cbModelParam._m0[18u].z, fma(_2418, cbModelParam._m0[18u].y, _2417 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2419, cbModelParam._m0[19u].z, fma(_2418, cbModelParam._m0[19u].y, _2417 * cbModelParam._m0[19u].x))), _1525);
            frontier_phi_30_61_ladder = _2652.z * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_1 = _2652.y * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_2 = _2652.x * cbModelParam._m0[1u].z;
        }
        _1615 = frontier_phi_30_61_ladder_2;
        _1617 = frontier_phi_30_61_ladder_1;
        _1619 = frontier_phi_30_61_ladder;
    }
    else
    {
        vec4 _1599 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_625, _626, _627), _1525);
        _1615 = _1599.x * cbModelParam._m0[1u].z;
        _1617 = _1599.y * cbModelParam._m0[1u].z;
        _1619 = _1599.z * cbModelParam._m0[1u].z;
    }
    float _1631 = ((((1.0 - _646) * ((_633 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_646 * _633)) * _617;
    float _1632 = _1631 * ((cbModelParam._m0[1u].w * (_1615 - _1516)) + _1516);
    float _1633 = _1631 * ((cbModelParam._m0[1u].w * (_1617 - _1518)) + _1518);
    float _1634 = _1631 * ((cbModelParam._m0[1u].w * (_1619 - _1520)) + _1520);
    float _1637 = fma(_1634, cbSceneParam._m0[89u].z, fma(_1633, cbSceneParam._m0[89u].y, _1632 * cbSceneParam._m0[89u].x));
    float _1640 = fma(_1634, cbSceneParam._m0[90u].z, fma(_1633, cbSceneParam._m0[90u].y, _1632 * cbSceneParam._m0[90u].x));
    float _1643 = fma(_1634, cbSceneParam._m0[91u].z, fma(_1633, cbSceneParam._m0[91u].y, _1632 * cbSceneParam._m0[91u].x));
    vec4 _1651 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_552, _553));
    float _1653 = _1651.w;
    float _1665 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1653);
    float _1666 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1653);
    float _1667 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1653);
    uvec4 _1671 = floatBitsToUint(cbInstanceData._m0[_591 + 5u]);
    uint _1673 = _1671.x * 14u;
    uint _1674 = _1673 + 13u;
    float _1679 = _617 + (-1.0);
    float _1682 = (cbLight._m0[_1674].x * _1679) + 1.0;
    float _1683 = (cbLight._m0[_1674].y * _1679) + 1.0;
    uint _1684 = _1673 + 5u;
    float _1690 = isnan(1.0) ? _1683 : (isnan(_1683) ? 1.0 : min(_1683, 1.0));
    uint _1694 = _1673 + 4u;
    float _1703 = isnan(1.0) ? _1682 : (isnan(_1682) ? 1.0 : min(_1682, 1.0));
    uint _1707 = _1673 | 1u;
    float _1718 = dot(vec3(cbLight._m0[_1673].xyz), vec3(_517, _518, _519));
    float _1721 = dot(vec3(cbLight._m0[_1707].xyz), vec3(_517, _518, _519));
    float _3565 = isnan(0.0) ? _1718 : (isnan(_1718) ? 0.0 : max(_1718, 0.0));
    float _3576 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
    float _1726 = (isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0))) * 0.3183098733425140380859375;
    float _1728 = (isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0))) * 0.3183098733425140380859375;
    float _1735 = ((cbLight._m0[_1684].x * _1690) * _1728) + (((cbLight._m0[_1694].x * _1665) * _1703) * _1726);
    float _1736 = ((_1690 * cbLight._m0[_1684].y) * _1728) + (((cbLight._m0[_1694].y * _1666) * _1703) * _1726);
    float _1737 = ((_1690 * cbLight._m0[_1684].z) * _1728) + (((cbLight._m0[_1694].z * _1667) * _1703) * _1726);
    uint _1739 = _1673 + 8u;
    float _1752 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1673].w)) * _520) * 0.949999988079071044921875);
    float _1753 = _1752 * _1752;
    float _1754 = cbLight._m0[_1673].x + _544;
    float _1755 = cbLight._m0[_1673].y + _545;
    float _1756 = cbLight._m0[_1673].z + _546;
    float _1760 = inversesqrt(dot(vec3(_1754, _1755, _1756), vec3(_1754, _1755, _1756)));
    float _1761 = _1760 * _1754;
    float _1762 = _1760 * _1755;
    float _1763 = _1760 * _1756;
    float _1764 = dot(vec3(_517, _518, _519), vec3(cbLight._m0[_1673].xyz));
    float _3587 = isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0));
    float _1767 = isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0));
    float _3598 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _1768 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
    float _1769 = dot(vec3(_517, _518, _519), vec3(_1761, _1762, _1763));
    float _3609 = isnan(0.0) ? _1769 : (isnan(_1769) ? 0.0 : max(_1769, 0.0));
    float _1772 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
    float _1773 = dot(vec3(cbLight._m0[_1673].xyz), vec3(_1761, _1762, _1763));
    float _3620 = isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0));
    float _1777 = _1753 * _1753;
    float _1781 = ((_1772 * _1772) * (_1777 + (-1.0))) + 1.0;
    float _1792 = (exp2(log2(1.0 - (isnan(1.0) ? _3620 : (isnan(_3620) ? 1.0 : min(_3620, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1793 = 1.0 - _1753;
    float _1804 = (0.5 / (((_1768 * ((_1767 * _1793) + _1753)) + 9.9999999392252902907785028219223e-09) + (((_1768 * _1793) + _1753) * _1767))) * _1767;
    float _3631 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
    float _1806 = (isnan(1.0) ? _3631 : (isnan(_3631) ? 1.0 : min(_3631, 1.0))) * (_1777 / ((_1781 * _1781) * 3.141590118408203125));
    uint _1820 = _1673 + 9u;
    float _1831 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1707].w)) * _520) * 0.949999988079071044921875);
    float _1832 = _1831 * _1831;
    float _1833 = cbLight._m0[_1707].x + _544;
    float _1834 = cbLight._m0[_1707].y + _545;
    float _1835 = cbLight._m0[_1707].z + _546;
    float _1839 = inversesqrt(dot(vec3(_1833, _1834, _1835), vec3(_1833, _1834, _1835)));
    float _1840 = _1839 * _1833;
    float _1841 = _1839 * _1834;
    float _1842 = _1839 * _1835;
    float _1843 = dot(vec3(_517, _518, _519), vec3(cbLight._m0[_1707].xyz));
    float _3642 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
    float _1846 = isnan(1.0) ? _3642 : (isnan(_3642) ? 1.0 : min(_3642, 1.0));
    float _1847 = dot(vec3(_517, _518, _519), vec3(_1840, _1841, _1842));
    float _3653 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
    float _1850 = isnan(1.0) ? _3653 : (isnan(_3653) ? 1.0 : min(_3653, 1.0));
    float _1851 = dot(vec3(cbLight._m0[_1707].xyz), vec3(_1840, _1841, _1842));
    float _3664 = isnan(0.0) ? _1851 : (isnan(_1851) ? 0.0 : max(_1851, 0.0));
    float _1855 = _1832 * _1832;
    float _1859 = ((_1850 * _1850) * (_1855 + (-1.0))) + 1.0;
    float _1868 = (exp2(log2(1.0 - (isnan(1.0) ? _3664 : (isnan(_3664) ? 1.0 : min(_3664, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1869 = 1.0 - _1832;
    float _1879 = (0.5 / (((_1768 * ((_1846 * _1869) + _1832)) + 9.9999999392252902907785028219223e-09) + (((_1768 * _1869) + _1832) * _1846))) * _1846;
    float _3675 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
    float _1881 = (isnan(1.0) ? _3675 : (isnan(_3675) ? 1.0 : min(_3675, 1.0))) * (_1855 / ((_1859 * _1859) * 3.141590118408203125));
    float _1891 = (((_1868 * cbLight._m0[_1820].x) * _1881) * _1690) + ((((cbLight._m0[_1739].x * _1665) * _1792) * _1806) * _1703);
    float _1892 = (((_1868 * cbLight._m0[_1820].y) * _1881) * _1690) + ((((cbLight._m0[_1739].y * _1666) * _1792) * _1806) * _1703);
    float _1893 = (((_1868 * cbLight._m0[_1820].z) * _1881) * _1690) + ((((cbLight._m0[_1739].z * _1667) * _1792) * _1806) * _1703);
    float _2008;
    float _2010;
    float _2012;
    float _2014;
    float _2016;
    float _2018;
    if (_1671.y == 0u)
    {
        float _1948 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1949 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1948;
        float _1950 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1948;
        float _1951 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1948;
        uvec4 _1963 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1964 = _1963.x;
        uint _1975 = uint((float(_1963.y) * floor(float(uint(cbSceneParam._m0[85u].y * _553) / _1964))) + floor(float(uint(cbSceneParam._m0[85u].x * _552) / _1964)));
        float _1985 = (log2(_1951 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1986 = isnan(0.0) ? _1985 : (isnan(_1985) ? 0.0 : max(_1985, 0.0));
        uint _1989 = uint(isnan(14.0) ? _1986 : (isnan(_1986) ? 14.0 : min(_1986, 14.0)));
        uvec4 _1994 = texelFetch(g_lightClusterGridBuffer, int(((_1989 << 2u) + (_1975 << 6u)) >> 2u));
        uint _1995 = _1994.x;
        uint _1996 = _1963.z;
        float _2102;
        float _2104;
        float _2106;
        float _2108;
        float _2110;
        float _2112;
        if (((((1u << ((_1996 >> 4u) & 15u)) + 4294967295u) & _1995) == 0u) || ((_1996 & 240u) == 0u))
        {
            _2102 = 0.0;
            _2104 = 0.0;
            _2106 = 0.0;
            _2108 = 0.0;
            _2110 = 0.0;
            _2112 = 0.0;
        }
        else
        {
            float _2103;
            float _2105;
            float _2107;
            float _2109;
            float _2111;
            float _2113;
            float _2278 = 0.0;
            float _2279 = 0.0;
            float _2280 = 0.0;
            float _2281 = 0.0;
            float _2282 = 0.0;
            float _2283 = 0.0;
            uint _2284 = 0u;
            uint _2293;
            bool _2294;
            for (;;)
            {
                _2293 = texelFetch(g_lightClassification, int((((_1989 << 5u) + (_1975 << 9u)) + (_2284 << 2u)) >> 2u)).x;
                _2294 = _2293 == 0u;
                float frontier_phi_58_pred;
                float frontier_phi_58_pred_1;
                float frontier_phi_58_pred_2;
                float frontier_phi_58_pred_3;
                float frontier_phi_58_pred_4;
                float frontier_phi_58_pred_5;
                if (_2294)
                {
                    frontier_phi_58_pred = _2279;
                    frontier_phi_58_pred_1 = _2283;
                    frontier_phi_58_pred_2 = _2282;
                    frontier_phi_58_pred_3 = _2281;
                    frontier_phi_58_pred_4 = _2280;
                    frontier_phi_58_pred_5 = _2278;
                }
                else
                {
                    float _2453;
                    float _2454;
                    float _2455;
                    float _2456;
                    float _2457;
                    float _2458;
                    uint _2459;
                    _2453 = _2278;
                    _2454 = _2279;
                    _2455 = _2280;
                    _2456 = _2281;
                    _2457 = _2282;
                    _2458 = _2283;
                    _2459 = _2293;
                    float _2359;
                    float _2360;
                    float _2361;
                    float _2362;
                    float _2363;
                    float _2364;
                    for (;;)
                    {
                        uint _2463 = uint(findLSB(_2459)) + (_2284 << 5u);
                        uint _2460 = (_2459 + 4294967295u) & _2459;
                        uint _2465 = _2463 * 48u;
                        vec4 _2479 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2465)).x, texelFetch(g_PointLightRenderingBuffer, int(_2465 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2465 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2465 + 3u)).x));
                        uint _2485 = (_2463 * 48u) + 4u;
                        vec4 _2498 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2485)).x, texelFetch(g_PointLightRenderingBuffer, int(_2485 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2485 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2485 + 3u)).x));
                        uint _2504 = (_2463 * 48u) + 8u;
                        vec3 _2515 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2504)).x, texelFetch(g_PointLightRenderingBuffer, int(_2504 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2504 + 2u)).x));
                        float _2519 = _2479.x - _1949;
                        float _2520 = _2479.y - _1950;
                        float _2521 = _2479.z - _1951;
                        float _2522 = dot(vec3(_2519, _2520, _2521), vec3(_2519, _2520, _2521));
                        float _2525 = inversesqrt(_2522);
                        float _2526 = _2525 * _2519;
                        float _2527 = _2525 * _2520;
                        float _2528 = _2525 * _2521;
                        float _2529 = dot(vec3(_572, _575, _578), vec3(_2526, _2527, _2528));
                        float _2534 = 1.0 - (_2522 * _2479.w);
                        float _3696 = isnan(0.0) ? _2534 : (isnan(_2534) ? 0.0 : max(_2534, 0.0));
                        float _2535 = isnan(1.0) ? _3696 : (isnan(_3696) ? 1.0 : min(_3696, 1.0));
                        float _2536 = sqrt(_2522) * _2498.w;
                        float _2539 = 1.39999997615814208984375 / (_2536 + 1.39999997615814208984375);
                        float _2540 = _2539 * _2539;
                        float _2543 = ((1.0 - _2540) * _2529) + _2540;
                        float _2546 = _2536 * _2536;
                        float _2550 = ((isnan(0.0) ? _2543 : (isnan(_2543) ? 0.0 : max(_2543, 0.0))) * _2535) / ((_2546 * 0.699999988079071044921875) + 1.0);
                        float _2554 = (-0.0) - _1949;
                        float _2555 = (-0.0) - _1950;
                        float _2556 = (-0.0) - _1951;
                        float _2560 = inversesqrt(dot(vec3(_2554, _2555, _2556), vec3(_2554, _2555, _2556)));
                        float _2561 = _2560 * _2554;
                        float _2562 = _2560 * _2555;
                        float _2563 = _2560 * _2556;
                        float _2571 = exp2(log2(1.0 / ((_2546 * 3.5) + 5.0)) * 0.25);
                        float _2572 = 1.0 - _633;
                        float _2579 = sqrt(1.0 - ((1.0 - (_2572 * _2572)) * (1.0 - (_2571 * _2571))));
                        float _2580 = _2579 * _2579;
                        float _2581 = _2580 * _2580;
                        float _2582 = _2561 + _2526;
                        float _2583 = _2562 + _2527;
                        float _2584 = _2563 + _2528;
                        float _2588 = inversesqrt(dot(vec3(_2582, _2583, _2584), vec3(_2582, _2583, _2584)));
                        float _2592 = dot(vec3(_572, _575, _578), vec3(_2561, _2562, _2563));
                        float _3712 = isnan(0.0) ? _2592 : (isnan(_2592) ? 0.0 : max(_2592, 0.0));
                        float _2595 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
                        float _2596 = dot(vec3(_572, _575, _578), vec3(_2588 * _2582, _2588 * _2583, _2588 * _2584));
                        float _3723 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
                        float _2599 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
                        float _2603 = ((_2599 * _2599) * (_2581 + (-1.0))) + 1.0;
                        float _2604 = _2539 * _2580;
                        float _2605 = _2604 * _2604;
                        float _2608 = ((1.0 - _2605) * _2529) + _2605;
                        float _3734 = isnan(0.0) ? _2608 : (isnan(_2608) ? 0.0 : max(_2608, 0.0));
                        float _2609 = isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0));
                        float _2610 = 1.0 - _2580;
                        float _2620 = (0.5 / (((_2609 * ((_2595 * _2610) + _2580)) + 9.9999999392252902907785028219223e-09) + (((_2609 * _2610) + _2580) * _2595))) * _2609;
                        float _3745 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
                        float _2631 = (((_2581 * 3.1415927410125732421875) * (isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0)))) / ((_2603 * _2603) * ((_2546 * 2.1991131305694580078125) + 3.141590118408203125))) * _2535;
                        _2362 = (_2550 * _2498.x) + _2456;
                        _2363 = (_2550 * _2498.y) + _2457;
                        _2364 = (_2550 * _2498.z) + _2458;
                        _2359 = (_2631 * _2515.x) + _2453;
                        _2360 = (_2631 * _2515.y) + _2454;
                        _2361 = (_2631 * _2515.z) + _2455;
                        if (_2460 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2453 = _2359;
                            _2454 = _2360;
                            _2455 = _2361;
                            _2456 = _2362;
                            _2457 = _2363;
                            _2458 = _2364;
                            _2459 = _2460;
                        }
                    }
                    frontier_phi_58_pred = _2360;
                    frontier_phi_58_pred_1 = _2364;
                    frontier_phi_58_pred_2 = _2363;
                    frontier_phi_58_pred_3 = _2362;
                    frontier_phi_58_pred_4 = _2361;
                    frontier_phi_58_pred_5 = _2359;
                }
                _2105 = frontier_phi_58_pred;
                _2113 = frontier_phi_58_pred_1;
                _2111 = frontier_phi_58_pred_2;
                _2109 = frontier_phi_58_pred_3;
                _2107 = frontier_phi_58_pred_4;
                _2103 = frontier_phi_58_pred_5;
                uint _2285 = _2284 + 1u;
                if (_2285 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2278 = _2103;
                    _2279 = _2105;
                    _2280 = _2107;
                    _2281 = _2109;
                    _2282 = _2111;
                    _2283 = _2113;
                    _2284 = _2285;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2102 = _2103;
            _2104 = _2105;
            _2106 = _2107;
            _2108 = _2109;
            _2110 = _2111;
            _2112 = _2113;
        }
        uvec4 _2116 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2117 = _2116.z;
        uint _2119 = (_2117 >> 8u) & 15u;
        float _2246;
        float _2248;
        float _2250;
        float _2252;
        float _2254;
        float _2256;
        if (((4294967295u << _2119) & _1995) == 0u)
        {
            _2246 = _2102;
            _2248 = _2104;
            _2250 = _2106;
            _2252 = _2108;
            _2254 = _2110;
            _2256 = _2112;
        }
        else
        {
            float _2271 = inversesqrt(dot(vec3(_1949, _1950, _1951), vec3(_1949, _1950, _1951)));
            float _2272 = _2271 * _1949;
            float _2273 = _2271 * _1950;
            float _2274 = _2271 * _1951;
            float frontier_phi_49_50_ladder;
            float frontier_phi_49_50_ladder_1;
            float frontier_phi_49_50_ladder_2;
            float frontier_phi_49_50_ladder_3;
            float frontier_phi_49_50_ladder_4;
            float frontier_phi_49_50_ladder_5;
            if (_2119 < ((_2117 >> 12u) & 15u))
            {
                float _2247;
                float _2249;
                float _2251;
                float _2253;
                float _2255;
                float _2257;
                float _2436 = _2102;
                float _2437 = _2104;
                float _2438 = _2106;
                float _2439 = _2108;
                float _2440 = _2110;
                float _2441 = _2112;
                uint _2442 = _2119;
                uint _2451;
                bool _2452;
                for (;;)
                {
                    _2451 = texelFetch(g_lightClassification, int((((_1989 << 5u) + (_1975 << 9u)) + (_2442 << 2u)) >> 2u)).x;
                    _2452 = _2451 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2452)
                    {
                        frontier_phi_67_pred = _2441;
                        frontier_phi_67_pred_1 = _2440;
                        frontier_phi_67_pred_2 = _2439;
                        frontier_phi_67_pred_3 = _2438;
                        frontier_phi_67_pred_4 = _2437;
                        frontier_phi_67_pred_5 = _2436;
                    }
                    else
                    {
                        float _2657;
                        float _2658;
                        float _2659;
                        float _2660;
                        float _2661;
                        float _2662;
                        float _2950;
                        float _2951;
                        float _2952;
                        float _2953;
                        float _2954;
                        float _2955;
                        float _2670 = _2436;
                        float _2671 = _2437;
                        float _2672 = _2438;
                        float _2673 = _2439;
                        float _2674 = _2440;
                        float _2675 = _2441;
                        uint _2676 = _2451;
                        uint _2677;
                        vec4 _2702;
                        float _2703;
                        vec4 _2718;
                        vec3 _2730;
                        vec4 _2745;
                        vec4 _2760;
                        float _2806;
                        bool _2807;
                        for (;;)
                        {
                            uint _2687 = ((_2442 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2676));
                            _2677 = (_2676 + 4294967295u) & _2676;
                            uint _2689 = _2687 * 40u;
                            _2702 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2689)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2689 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2689 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2689 + 3u)).x));
                            _2703 = _2702.w;
                            uint _2705 = (_2687 * 40u) + 4u;
                            _2718 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2705)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2705 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2705 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2705 + 3u)).x));
                            uint _2720 = (_2687 * 40u) + 8u;
                            _2730 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2720)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2720 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2720 + 2u)).x));
                            uint _2732 = (_2687 * 40u) + 16u;
                            _2745 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2732)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2732 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2732 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2732 + 3u)).x));
                            uint _2747 = (_2687 * 40u) + 20u;
                            _2760 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2747)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2747 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2747 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2747 + 3u)).x));
                            uint _2762 = (_2687 * 40u) + 24u;
                            vec4 _2775 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2762)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2762 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2762 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2762 + 3u)).x));
                            uint _2781 = (_2687 * 40u) + 28u;
                            vec4 _2794 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2781)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2781 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2781 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2781 + 3u)).x));
                            _2806 = fma(_1951, _2794.z, fma(_1950, _2794.y, _2794.x * _1949)) + _2794.w;
                            _2807 = !((fma(_1951, _2775.z, fma(_1950, _2775.y, _2775.x * _1949)) + _2775.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2807)
                            {
                                float _2834 = _2702.x - _1949;
                                float _2835 = _2702.y - _1950;
                                float _2836 = _2702.z - _1951;
                                float _2837 = dot(vec3(_2834, _2835, _2836), vec3(_2834, _2835, _2836));
                                float _2840 = inversesqrt(_2837);
                                float _2841 = _2840 * _2834;
                                float _2842 = _2840 * _2835;
                                float _2843 = _2840 * _2836;
                                float _2847 = 1.0 - (_2837 / (_2703 * _2703));
                                float _3756 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
                                float _2848 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
                                float _2852 = sqrt(_2837) * _2718.w;
                                float _2854 = 1.39999997615814208984375 / (_2852 + 1.39999997615814208984375);
                                float _2855 = _2854 * _2854;
                                float _2858 = ((1.0 - _2855) * dot(vec3(_2841, _2842, _2843), vec3(_572, _575, _578))) + _2855;
                                float _2861 = _2852 * _2852;
                                float _2865 = (fma(_1951, _2745.z, fma(_1950, _2745.y, _2745.x * _1949)) + _2745.w) / _2806;
                                float _2866 = (fma(_1951, _2760.z, fma(_1950, _2760.y, _2760.x * _1949)) + _2760.w) / _2806;
                                float _2870 = 1.0 - dot(vec2(_2865, _2866), vec2(_2865, _2866));
                                float _3772 = isnan(0.0) ? _2870 : (isnan(_2870) ? 0.0 : max(_2870, 0.0));
                                float _2871 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
                                float _2872 = _2871 * (((isnan(0.0) ? _2858 : (isnan(_2858) ? 0.0 : max(_2858, 0.0))) * _2848) / ((_2861 * 0.699999988079071044921875) + 1.0));
                                float _2884 = exp2(log2(1.0 / ((_2861 * 3.5) + 5.0)) * 0.25);
                                float _2885 = 1.0 - _633;
                                float _2892 = sqrt(1.0 - ((1.0 - (_2885 * _2885)) * (1.0 - (_2884 * _2884))));
                                float _2893 = _2892 * _2892;
                                float _2894 = _2893 * _2893;
                                float _2895 = _2841 - _2272;
                                float _2896 = _2842 - _2273;
                                float _2897 = _2843 - _2274;
                                float _2901 = inversesqrt(dot(vec3(_2895, _2896, _2897), vec3(_2895, _2896, _2897)));
                                float _2905 = dot(vec3(_572, _575, _578), vec3((-0.0) - _2272, (-0.0) - _2273, (-0.0) - _2274));
                                float _3783 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0));
                                float _2908 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
                                float _2909 = dot(vec3(_572, _575, _578), vec3(_2901 * _2895, _2901 * _2896, _2901 * _2897));
                                float _3794 = isnan(0.0) ? _2909 : (isnan(_2909) ? 0.0 : max(_2909, 0.0));
                                float _2912 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
                                float _2916 = ((_2912 * _2912) * (_2894 + (-1.0))) + 1.0;
                                float _2917 = _2854 * _2893;
                                float _2918 = _2917 * _2917;
                                float _2924 = ((1.0 - _2918) * dot(vec3(_572, _575, _578), vec3(_2841, _2842, _2843))) + _2918;
                                float _3805 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0));
                                float _2925 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
                                float _2926 = 1.0 - _2893;
                                float _2936 = (0.5 / (((_2925 * ((_2908 * _2926) + _2893)) + 9.9999999392252902907785028219223e-09) + (((_2925 * _2926) + _2893) * _2908))) * _2925;
                                float _3816 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
                                float _2946 = (_2871 * _2848) * (((_2894 * 3.1415927410125732421875) * (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0)))) / ((_2916 * _2916) * ((_2861 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _2872 * _2718.z;
                                frontier_phi_73_pred_1 = _2872 * _2718.y;
                                frontier_phi_73_pred_2 = _2872 * _2718.x;
                                frontier_phi_73_pred_3 = _2946 * _2730.z;
                                frontier_phi_73_pred_4 = _2946 * _2730.y;
                                frontier_phi_73_pred_5 = _2946 * _2730.x;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2955 = frontier_phi_73_pred;
                            _2954 = frontier_phi_73_pred_1;
                            _2953 = frontier_phi_73_pred_2;
                            _2952 = frontier_phi_73_pred_3;
                            _2951 = frontier_phi_73_pred_4;
                            _2950 = frontier_phi_73_pred_5;
                            _2660 = _2953 + _2673;
                            _2661 = _2954 + _2674;
                            _2662 = _2955 + _2675;
                            _2657 = _2950 + _2670;
                            _2658 = _2951 + _2671;
                            _2659 = _2952 + _2672;
                            if (_2677 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2670 = _2657;
                                _2671 = _2658;
                                _2672 = _2659;
                                _2673 = _2660;
                                _2674 = _2661;
                                _2675 = _2662;
                                _2676 = _2677;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2662;
                        frontier_phi_67_pred_1 = _2661;
                        frontier_phi_67_pred_2 = _2660;
                        frontier_phi_67_pred_3 = _2659;
                        frontier_phi_67_pred_4 = _2658;
                        frontier_phi_67_pred_5 = _2657;
                    }
                    _2257 = frontier_phi_67_pred;
                    _2255 = frontier_phi_67_pred_1;
                    _2253 = frontier_phi_67_pred_2;
                    _2251 = frontier_phi_67_pred_3;
                    _2249 = frontier_phi_67_pred_4;
                    _2247 = frontier_phi_67_pred_5;
                    uint _2443 = _2442 + 1u;
                    if (_2443 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2436 = _2247;
                        _2437 = _2249;
                        _2438 = _2251;
                        _2439 = _2253;
                        _2440 = _2255;
                        _2441 = _2257;
                        _2442 = _2443;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_49_50_ladder = _2253;
                frontier_phi_49_50_ladder_1 = _2257;
                frontier_phi_49_50_ladder_2 = _2255;
                frontier_phi_49_50_ladder_3 = _2251;
                frontier_phi_49_50_ladder_4 = _2249;
                frontier_phi_49_50_ladder_5 = _2247;
            }
            else
            {
                frontier_phi_49_50_ladder = _2108;
                frontier_phi_49_50_ladder_1 = _2112;
                frontier_phi_49_50_ladder_2 = _2110;
                frontier_phi_49_50_ladder_3 = _2106;
                frontier_phi_49_50_ladder_4 = _2104;
                frontier_phi_49_50_ladder_5 = _2102;
            }
            _2246 = frontier_phi_49_50_ladder_5;
            _2248 = frontier_phi_49_50_ladder_4;
            _2250 = frontier_phi_49_50_ladder_3;
            _2252 = frontier_phi_49_50_ladder;
            _2254 = frontier_phi_49_50_ladder_2;
            _2256 = frontier_phi_49_50_ladder_1;
        }
        float _2261 = isnan(1.0) ? _617 : (isnan(_617) ? 1.0 : min(_617, 1.0));
        _2008 = (_2261 * _2252) + _1735;
        _2010 = (_2261 * _2254) + _1736;
        _2012 = (_2261 * _2256) + _1737;
        _2014 = ((_2246 * 0.039999999105930328369140625) * _2261) + _1891;
        _2016 = ((_2248 * 0.039999999105930328369140625) * _2261) + _1892;
        _2018 = ((_2250 * 0.039999999105930328369140625) * _2261) + _1893;
    }
    else
    {
        _2008 = _1735;
        _2010 = _1736;
        _2012 = _1737;
        _2014 = _1891;
        _2016 = _1892;
        _2018 = _1893;
    }
    uint _2024 = _593 + uint(cbMatDynParam._m0[0u].w);
    float _3832 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _3843 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _3854 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _2049 = (((isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))) * (_2008 + ((isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0))) * _617))) + ((_2014 + ((isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0))) * _1423)) * cbPerFrame._m0[3u].x)) + (((_461.x * _281) * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2024].x);
    float _2051 = ((((_461.y * _281) * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2024].y) + ((_2016 + ((isnan(0.0) ? _1640 : (isnan(_1640) ? 0.0 : max(_1640, 0.0))) * _1423)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0))) * (_2010 + ((isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0))) * _617)));
    float _2053 = ((((_461.z * _281) * cbMtdParam._m0[9u].z) * cbInstanceData._m0[_2024].z) + ((_2018 + ((isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0))) * _1423)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0))) * (_2012 + ((isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0))) * _617)));
    uint _2057 = _591 + 6u;
    float _2065 = _552 / cbSceneParam._m0[86u].x;
    float _2066 = _553 / cbSceneParam._m0[86u].y;
    vec4 _2080 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2065, _2066, (log2((isnan(cbSceneParam._m0[77u].w) ? _539 : (isnan(_539) ? cbSceneParam._m0[77u].w : min(_539, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2082 = _2080.x;
    float _2083 = _2080.y;
    float _2084 = _2080.z;
    float _2085 = _2080.w;
    float _2165;
    float _2167;
    float _2169;
    float _2171;
    if (_539 > cbSceneParam._m0[78u].w)
    {
        float _2127 = isnan(_539) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _539 : min(cbSceneParam._m0[80u].w, _539));
        float _2128 = _2127 / _539;
        float _2139 = _2128 * _263;
        float _2140 = _264 * _2128;
        float _2141 = (-0.0) - _2140;
        float _2142 = _2128 * _265;
        float _2144 = (cbSceneParam._m0[77u].w * _2141) / _2127;
        float _2145 = _2144 + cbSceneParam._m0[79u].w;
        float _2146 = cbSceneParam._m0[79u].w - _2140;
        float _2152 = sqrt(((_2139 * _2139) + (_2140 * _2140)) + (_2142 * _2142));
        float _2155 = (1.0 - (cbSceneParam._m0[77u].w / _2127)) * _2152;
        float _2161 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2163 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2372;
        if (abs((_2141 - _2144) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2372 = ((((_2145 > 0.0) ? exp2(_2161 * _2145) : (2.0 - exp2(_2163 * _2145))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2155;
        }
        else
        {
            float _2307 = 1.0 / cbSceneParam._m0[80u].x;
            float _2308 = isnan(_2146) ? _2145 : (isnan(_2145) ? _2146 : max(_2145, _2146));
            float _2309 = isnan(_2146) ? _2145 : (isnan(_2145) ? _2146 : min(_2145, _2146));
            float _2318 = isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : min(_2308, 0.0));
            float _2319 = isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : min(_2309, 0.0));
            _2372 = ((abs(_2152 / _2141) * cbSceneParam._m0[80u].y) * ((((_2318 - _2319) * 2.0) - ((exp2(_2161 * (isnan(0.0) ? _2308 : (isnan(_2308) ? 0.0 : max(_2308, 0.0)))) - exp2(_2161 * (isnan(0.0) ? _2309 : (isnan(_2309) ? 0.0 : max(_2309, 0.0))))) * _2307)) - ((exp2(_2163 * _2318) - exp2(_2163 * _2319)) * _2307))) + (_2155 * cbSceneParam._m0[80u].z);
        }
        vec4 _2374 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2065, _2066, 1.0), 0.0);
        float _2383 = exp2((_2372 * (-1.44269502162933349609375)) * (1.0 - _2374.w));
        float _2384 = log2(_2383);
        float _2400 = log2(_2085);
        _2165 = (exp2(_2400 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2384 * cbSceneParam._m0[78u].x)) * _2374.x) / cbSceneParam._m0[78u].x)) + _2082;
        _2167 = (exp2(_2400 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2384 * cbSceneParam._m0[78u].y)) * _2374.y) / cbSceneParam._m0[78u].y)) + _2083;
        _2169 = (exp2(_2400 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2384 * cbSceneParam._m0[78u].z)) * _2374.z) / cbSceneParam._m0[78u].z)) + _2084;
        _2171 = _2383 * _2085;
    }
    else
    {
        _2165 = _2082;
        _2167 = _2083;
        _2169 = _2084;
        _2171 = _2085;
    }
    float _2183 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2184 = _2183 == 3.0;
    float _2185 = log2(_2171);
    float _2192 = exp2(_2185 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0)));
    float _2193 = exp2(_2185 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0)));
    float _2194 = exp2(_2185 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0)));
    float _2203 = (_2183 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2203 * (_2184 ? _2192 : (_2192 + (cbSceneParam._m0[72u].w * _2165)));
    SV_Target.y = _2203 * (_2184 ? _2193 : (_2193 + (cbSceneParam._m0[72u].w * _2167)));
    SV_Target.z = _2203 * (_2184 ? _2194 : (_2194 + (cbSceneParam._m0[72u].w * _2169)));
    SV_Target.w = cbInstanceData._m0[_2057].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2057].w;
}


