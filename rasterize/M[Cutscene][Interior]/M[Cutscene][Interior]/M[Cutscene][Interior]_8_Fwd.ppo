#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 2) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_12;
layout(set = 0, binding = 3) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _392;
uint _1878;
uint _1879;
uint _1880;
uint _2116;
uint _2117;
uint _2118;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _196 = _195 * _188;
    float _197 = _195 * _189;
    float _198 = _195 * _190;
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _206 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _207 = _206 * TANGENT.x;
    float _208 = _206 * TANGENT.y;
    float _209 = _206 * TANGENT.z;
    float _254 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _264 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _254);
    float _265 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _254);
    float _266 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _254);
    vec4 _301 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _317 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _324 = inversesqrt(dot(vec3(_207, _208, _209), vec3(_207, _208, _209)));
    float _336 = cbMtdParam._m0[24u].w + _264;
    float _337 = cbMtdParam._m0[25u].x + _265;
    float _338 = cbMtdParam._m0[25u].y + _266;
    float _355 = (-0.0) - dot(vec3(_336, _337, _338), vec3(_317 * _196, _317 * _197, _317 * _198));
    float _356 = (-0.0) - dot(vec3(_336, _337, _338), vec3(_324 * _207, _324 * _208, _324 * _209));
    float _357 = (-0.0) - dot(vec3(_336, _337, _338), vec3((-0.0) - (NORMAL.x * _202), (-0.0) - (NORMAL.y * _202), (-0.0) - (NORMAL.z * _202)));
    float _361 = inversesqrt(dot(vec3(_355, _356, _357), vec3(_355, _356, _357)));
    float _362 = _361 * _357;
    float _367 = ((cbMtdParam._m0[21u].z * _355) * _361) + (((_301.x * 2.0) + (-1.0)) * cbMtdParam._m0[22u].x);
    float _368 = ((cbMtdParam._m0[21u].w * _356) * _361) + (((_301.y * 2.0) + (-1.0)) * cbMtdParam._m0[22u].y);
    float _371 = fract(cbMtdParam._m0[21u].z * TEXCOORD.x);
    float _372 = fract(cbMtdParam._m0[21u].w * TEXCOORD.y);
    float _390;
    float _393;
    float _395;
    if (_367 > 0.0)
    {
        float _376 = (1.0 - _371) / _367;
        _390 = _376;
        _393 = ((cbMtdParam._m0[18u].w + 1.0) - fract(_376 * _362)) * 0.16666667163372039794921875;
        _395 = (fract((_376 * _368) + _372) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_367 < 0.0)
        {
            float _391 = ((-0.0) - _371) / _367;
            frontier_phi_3_2_ladder = (fract(_391 * _362) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
            frontier_phi_3_2_ladder_1 = _391;
            frontier_phi_3_2_ladder_2 = (fract((_391 * _368) + _372) * 0.16666667163372039794921875) + 0.666666686534881591796875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _392;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _390 = frontier_phi_3_2_ladder_1;
        _393 = frontier_phi_3_2_ladder;
        _395 = frontier_phi_3_2_ladder_2;
    }
    float _421;
    float _423;
    float _425;
    if (_368 > 0.0)
    {
        float _408 = (1.0 - _372) / _368;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_408 < _390)
        {
            frontier_phi_8_5_ladder = _408;
            frontier_phi_8_5_ladder_1 = (fract(_408 * _362) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_2 = (fract((_408 * _367) + _371) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_8_5_ladder = _390;
            frontier_phi_8_5_ladder_1 = _395;
            frontier_phi_8_5_ladder_2 = _393;
        }
        _421 = frontier_phi_8_5_ladder;
        _423 = frontier_phi_8_5_ladder_2;
        _425 = frontier_phi_8_5_ladder_1;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_368 < 0.0)
        {
            float _422 = ((-0.0) - _372) / _368;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_422 < _390)
            {
                frontier_phi_8_6_ladder_9_ladder = _422;
                frontier_phi_8_6_ladder_9_ladder_1 = fract(_422 * _362) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = (fract((_422 * _367) + _371) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _390;
                frontier_phi_8_6_ladder_9_ladder_1 = _395;
                frontier_phi_8_6_ladder_9_ladder_2 = _393;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _390;
            frontier_phi_8_6_ladder_1 = _395;
            frontier_phi_8_6_ladder_2 = _393;
        }
        _421 = frontier_phi_8_6_ladder;
        _423 = frontier_phi_8_6_ladder_2;
        _425 = frontier_phi_8_6_ladder_1;
    }
    float _429 = (_362 > 0.0) ? (cbMtdParam._m0[18u].z / _362) : 5000.0;
    float _442;
    float _443;
    if (_429 < _421)
    {
        _442 = ((_371 + cbMtdParam._m0[18u].w) + (_429 * _367)) * 0.16666667163372039794921875;
        _443 = (((_429 * _368) + _372) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _442 = _423;
        _443 = _425;
    }
    vec4 _445 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_442, _443));
    float _2344 = isnan(0.0) ? cbMtdParam._m0[17u].z : (isnan(cbMtdParam._m0[17u].z) ? 0.0 : max(cbMtdParam._m0[17u].z, 0.0));
    float _459 = isnan(1.0) ? _2344 : (isnan(_2344) ? 1.0 : min(_2344, 1.0));
    float _2355 = isnan(0.0) ? cbMtdParam._m0[17u].y : (isnan(cbMtdParam._m0[17u].y) ? 0.0 : max(cbMtdParam._m0[17u].y, 0.0));
    float _502 = ((_459 - ((1.0 - (isnan(1.0) ? _2355 : (isnan(_2355) ? 1.0 : min(_2355, 1.0)))) * (_459 + 1.0))) + (((cbMtdParam._m0[18u].y * texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[3u].w)).x) + (cbMtdParam._m0[17u].x * texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w)).x)) / cbMtdParam._m0[17u].w)) / _459;
    float _2366 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _503 = isnan(1.0) ? _2366 : (isnan(_2366) ? 1.0 : min(_2366, 1.0));
    float _505 = 3.0 - (_503 * 2.0);
    float _510 = _503 * _503;
    float _538 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _542 = inversesqrt(dot(vec3(_264, _265, _266), vec3(_264, _265, _266)));
    float _543 = _264 * _542;
    float _544 = _265 * _542;
    float _545 = _266 * _542;
    float _551 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _552 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _561 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_551 * cbSceneParam._m0[86u].x, _552 * cbSceneParam._m0[86u].y));
    float _564 = _561.x * TEXCOORD_4.z;
    float _565 = (-0.0) - _543;
    float _566 = (-0.0) - _544;
    float _567 = (-0.0) - _545;
    float _589 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _593 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _597 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _736;
    float _737;
    float _738;
    float _739;
    float _740;
    float _741;
    float _742;
    float _743;
    float _744;
    float _745;
    float _746;
    float _747;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _659 = (cbModelParam._m0[37u].x * ((((fma(_597, cbModelParam._m0[26u].z, fma(_593, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _589)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _661 = (cbModelParam._m0[37u].y * ((((fma(_597, cbModelParam._m0[27u].z, fma(_593, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _589)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _662 = (((((fma(_597, cbModelParam._m0[28u].z, fma(_593, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _589)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _665 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_659, _661, _662), 0.0);
        vec4 _672 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_659, _661, _662), 0.0);
        vec4 _679 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_659, _661, _662), 0.0);
        vec4 _686 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_659, _661, _662), 0.0);
        float _699 = exp2((_665.w + (-0.5)) * 20.0) * 2.0;
        float _709 = exp2((_672.w + (-0.5)) * 20.0) * 2.0;
        float _719 = exp2((_679.w + (-0.5)) * 20.0) * 2.0;
        float _729 = exp2((_686.w + (-0.5)) * 20.0) * 2.0;
        float _730 = _729 * (_686.x + (-0.5));
        float _731 = _729 * (_686.y + (-0.5));
        float _732 = _729 * (_686.z + (-0.5));
        _736 = _699 * (_665.z + (-0.5));
        _737 = _699 * (_665.y + (-0.5));
        _738 = _699 * (_665.x + (-0.5));
        _739 = _709 * (_672.z + (-0.5));
        _740 = _709 * (_672.y + (-0.5));
        _741 = _709 * (_672.x + (-0.5));
        _742 = _719 * (_679.z + (-0.5));
        _743 = _719 * (_679.y + (-0.5));
        _744 = _719 * (_679.x + (-0.5));
        _745 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
        _746 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
        _747 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    }
    else
    {
        _736 = _392;
        _737 = _392;
        _738 = _392;
        _739 = _392;
        _740 = _392;
        _741 = _392;
        _742 = _392;
        _743 = _392;
        _744 = _392;
        _745 = _392;
        _746 = _392;
        _747 = _392;
    }
    float _875;
    float _876;
    float _877;
    float _878;
    float _879;
    float _880;
    float _881;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _801 = (cbModelParam._m0[38u].x * ((((fma(_597, cbModelParam._m0[30u].z, fma(_593, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _589)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _802 = (cbModelParam._m0[38u].y * ((((fma(_597, cbModelParam._m0[31u].z, fma(_593, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _589)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _803 = (((((fma(_597, cbModelParam._m0[32u].z, fma(_593, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _589)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _805 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_801, _802, _803), 0.0);
        vec4 _812 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_801, _802, _803), 0.0);
        vec4 _819 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_801, _802, _803), 0.0);
        vec4 _826 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_801, _802, _803), 0.0);
        float _838 = exp2((_805.w + (-0.5)) * 20.0) * 2.0;
        float _848 = exp2((_812.w + (-0.5)) * 20.0) * 2.0;
        float _858 = exp2((_819.w + (-0.5)) * 20.0) * 2.0;
        float _868 = exp2((_826.w + (-0.5)) * 20.0) * 2.0;
        float _869 = _868 * (_826.x + (-0.5));
        float _870 = _868 * (_826.y + (-0.5));
        float _871 = _868 * (_826.z + (-0.5));
        _875 = _838 * (_805.z + (-0.5));
        _876 = _838 * (_805.y + (-0.5));
        _877 = _838 * (_805.x + (-0.5));
        _878 = _848 * (_812.z + (-0.5));
        _879 = _848 * (_812.y + (-0.5));
        _880 = _848 * (_812.x + (-0.5));
        _881 = _858 * (_819.z + (-0.5));
        _882 = _858 * (_819.y + (-0.5));
        _883 = _858 * (_819.x + (-0.5));
        _884 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        _885 = isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0));
        _886 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
    }
    else
    {
        _875 = _392;
        _876 = _392;
        _877 = _392;
        _878 = _392;
        _879 = _392;
        _880 = _392;
        _881 = _392;
        _882 = _392;
        _883 = _392;
        _884 = _392;
        _885 = _392;
        _886 = _392;
    }
    float _901 = _543 * (-0.5);
    float _902 = _544 * (-0.5);
    float _903 = _545 * (-0.5);
    float _904 = dot(vec4(_901, _902, _903, 1.0), vec4(_877, _880, _883, _886));
    float _907 = dot(vec4(_901, _902, _903, 1.0), vec4(_876, _879, _882, _885));
    float _910 = dot(vec4(_901, _902, _903, 1.0), vec4(_875, _878, _881, _884));
    float _945;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _917 = dot(vec4(_901, _902, _903, 1.0), vec4(_736, _739, _742, _745));
        float _921 = dot(vec4(_901, _902, _903, 1.0), vec4(_737, _740, _743, _746));
        float _925 = dot(vec4(_901, _902, _903, 1.0), vec4(_738, _741, _744, _747));
        float _932 = dot(vec4(cbModelParam._m0[39u]), vec4(_901, _902, _903, 1.0));
        _945 = dot(vec3(isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0)), isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0)), isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_932) ? 0.0 : (isnan(0.0) ? _932 : max(0.0, _932))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _945 = 1.0;
    }
    float _956;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _947 = dot(vec4(cbModelParam._m0[40u]), vec4(_901, _902, _903, 1.0));
        _956 = dot(vec3(isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0)), isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0)), isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_947) ? 0.0 : (isnan(0.0) ? _947 : max(0.0, _947))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _956 = 1.0;
    }
    float _960 = (_956 * cbModelParam._m0[1u].x) + (_945 * (1.0 - cbModelParam._m0[1u].x));
    float _966 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1048;
    float _1050;
    float _1052;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1015 = fma(_597, cbModelParam._m0[13u].z, fma(_593, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _589)) + cbModelParam._m0[13u].w;
        float _1019 = fma(_597, cbModelParam._m0[14u].z, fma(_593, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _589)) + cbModelParam._m0[14u].w;
        float _1023 = fma(_597, cbModelParam._m0[15u].z, fma(_593, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _589)) + cbModelParam._m0[15u].w;
        float _1026 = fma(_567, cbModelParam._m0[13u].z, fma(_566, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _565));
        float _1029 = fma(_567, cbModelParam._m0[14u].z, fma(_566, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _565));
        float _1032 = fma(_567, cbModelParam._m0[15u].z, fma(_566, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _565));
        float _1058;
        if (_1026 > 0.0)
        {
            _1058 = abs((1.0 - _1015) / _1026);
        }
        else
        {
            float frontier_phi_26_24_ladder;
            if (_1026 < 0.0)
            {
                frontier_phi_26_24_ladder = abs((_1015 + 1.0) / _1026);
            }
            else
            {
                frontier_phi_26_24_ladder = 5000.0;
            }
            _1058 = frontier_phi_26_24_ladder;
        }
        float _1336;
        if (_1029 > 0.0)
        {
            _1336 = abs((1.0 - _1019) / _1029);
        }
        else
        {
            float frontier_phi_35_31_ladder;
            if (_1029 < 0.0)
            {
                frontier_phi_35_31_ladder = abs((_1019 + 1.0) / _1029);
            }
            else
            {
                frontier_phi_35_31_ladder = 5000.0;
            }
            _1336 = frontier_phi_35_31_ladder;
        }
        float _1631;
        if (_1032 > 0.0)
        {
            _1631 = abs((1.0 - _1023) / _1032);
        }
        else
        {
            float frontier_phi_49_42_ladder;
            if (_1032 < 0.0)
            {
                frontier_phi_49_42_ladder = abs((_1023 + 1.0) / _1032);
            }
            else
            {
                frontier_phi_49_42_ladder = 5000.0;
            }
            _1631 = frontier_phi_49_42_ladder;
        }
        float _1633 = isnan(_1336) ? _1058 : (isnan(_1058) ? _1336 : min(_1058, _1336));
        float _1634 = isnan(_1631) ? _1633 : (isnan(_1633) ? _1631 : min(_1633, _1631));
        float _1638 = (_1634 * _1026) + _1015;
        float _1639 = (_1634 * _1029) + _1019;
        float _1640 = (_1634 * _1032) + _1023;
        float _1641 = _1634 * 9.9999997473787516355514526367188e-05;
        float _1642 = (-1.0) - _1641;
        float _1644 = _1641 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_1640 > _1644) || ((_1640 < _1642) || ((_1639 > _1644) || ((_1639 < _1642) || ((_1638 < _1642) || (_1638 > _1644))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1751 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1640, cbModelParam._m0[9u].z, fma(_1639, cbModelParam._m0[9u].y, _1638 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1640, cbModelParam._m0[10u].z, fma(_1639, cbModelParam._m0[10u].y, _1638 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1640, cbModelParam._m0[11u].z, fma(_1639, cbModelParam._m0[11u].y, _1638 * cbModelParam._m0[11u].x))), _966);
            frontier_phi_25_49_ladder = _1751.z * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_1 = _1751.y * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_2 = _1751.x * cbModelParam._m0[1u].y;
        }
        _1048 = frontier_phi_25_49_ladder_2;
        _1050 = frontier_phi_25_49_ladder_1;
        _1052 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1036 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_565, _566, _567), _966);
        _1048 = _1036.x * cbModelParam._m0[1u].y;
        _1050 = _1036.y * cbModelParam._m0[1u].y;
        _1052 = _1036.z * cbModelParam._m0[1u].y;
    }
    float _1055 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1144;
    float _1146;
    float _1148;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1108 = fma(_597, cbModelParam._m0[21u].z, fma(_593, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _589)) + cbModelParam._m0[21u].w;
        float _1112 = fma(_597, cbModelParam._m0[22u].z, fma(_593, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _589)) + cbModelParam._m0[22u].w;
        float _1116 = fma(_597, cbModelParam._m0[23u].z, fma(_593, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _589)) + cbModelParam._m0[23u].w;
        float _1119 = fma(_567, cbModelParam._m0[21u].z, fma(_566, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _565));
        float _1122 = fma(_567, cbModelParam._m0[22u].z, fma(_566, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _565));
        float _1125 = fma(_567, cbModelParam._m0[23u].z, fma(_566, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _565));
        float _1341;
        if (_1119 > 0.0)
        {
            _1341 = abs((1.0 - _1108) / _1119);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1119 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1108 + 1.0) / _1119);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1341 = frontier_phi_37_33_ladder;
        }
        float _1657;
        if (_1122 > 0.0)
        {
            _1657 = abs((1.0 - _1112) / _1122);
        }
        else
        {
            float frontier_phi_51_44_ladder;
            if (_1122 < 0.0)
            {
                frontier_phi_51_44_ladder = abs((_1112 + 1.0) / _1122);
            }
            else
            {
                frontier_phi_51_44_ladder = 5000.0;
            }
            _1657 = frontier_phi_51_44_ladder;
        }
        float _1808;
        if (_1125 > 0.0)
        {
            _1808 = abs((1.0 - _1116) / _1125);
        }
        else
        {
            float frontier_phi_65_60_ladder;
            if (_1125 < 0.0)
            {
                frontier_phi_65_60_ladder = abs((_1116 + 1.0) / _1125);
            }
            else
            {
                frontier_phi_65_60_ladder = 5000.0;
            }
            _1808 = frontier_phi_65_60_ladder;
        }
        float _1810 = isnan(_1657) ? _1341 : (isnan(_1341) ? _1657 : min(_1341, _1657));
        float _1811 = isnan(_1808) ? _1810 : (isnan(_1810) ? _1808 : min(_1810, _1808));
        float _1815 = (_1811 * _1119) + _1108;
        float _1816 = (_1811 * _1122) + _1112;
        float _1817 = (_1811 * _1125) + _1116;
        float _1818 = _1811 * 9.9999997473787516355514526367188e-05;
        float _1819 = (-1.0) - _1818;
        float _1821 = _1818 + 1.0;
        float frontier_phi_34_65_ladder;
        float frontier_phi_34_65_ladder_1;
        float frontier_phi_34_65_ladder_2;
        if ((_1817 > _1821) || ((_1817 < _1819) || ((_1816 > _1821) || ((_1816 < _1819) || ((_1815 < _1819) || (_1815 > _1821))))))
        {
            frontier_phi_34_65_ladder = 0.0;
            frontier_phi_34_65_ladder_1 = 0.0;
            frontier_phi_34_65_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1977 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1817, cbModelParam._m0[17u].z, fma(_1816, cbModelParam._m0[17u].y, _1815 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1817, cbModelParam._m0[18u].z, fma(_1816, cbModelParam._m0[18u].y, _1815 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1817, cbModelParam._m0[19u].z, fma(_1816, cbModelParam._m0[19u].y, _1815 * cbModelParam._m0[19u].x))), _1055);
            frontier_phi_34_65_ladder = _1977.z * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_1 = _1977.y * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_2 = _1977.x * cbModelParam._m0[1u].z;
        }
        _1144 = frontier_phi_34_65_ladder_2;
        _1146 = frontier_phi_34_65_ladder_1;
        _1148 = frontier_phi_34_65_ladder;
    }
    else
    {
        vec4 _1128 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_565, _566, _567), _1055);
        _1144 = _1128.x * cbModelParam._m0[1u].z;
        _1146 = _1128.y * cbModelParam._m0[1u].z;
        _1148 = _1128.z * cbModelParam._m0[1u].z;
    }
    float _1160 = _564 * 0.01200000010430812835693359375;
    float _1162 = _1160 * ((cbModelParam._m0[1u].w * (_1144 - _1048)) + _1048);
    float _1163 = _1160 * ((cbModelParam._m0[1u].w * (_1146 - _1050)) + _1050);
    float _1164 = _1160 * ((cbModelParam._m0[1u].w * (_1148 - _1052)) + _1052);
    float _1185 = fma(_1164, cbSceneParam._m0[89u].z, fma(_1163, cbSceneParam._m0[89u].y, _1162 * cbSceneParam._m0[89u].x));
    float _1188 = fma(_1164, cbSceneParam._m0[90u].z, fma(_1163, cbSceneParam._m0[90u].y, _1162 * cbSceneParam._m0[90u].x));
    float _1191 = fma(_1164, cbSceneParam._m0[91u].z, fma(_1163, cbSceneParam._m0[91u].y, _1162 * cbSceneParam._m0[91u].x));
    uint _1198 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1203 = floatBitsToUint(cbInstanceData._m0[_1198 + 5u]);
    uint _1205 = _1203.x * 14u;
    uint _1206 = _1205 + 13u;
    float _1211 = _564 + (-1.0);
    float _1214 = (cbLight._m0[_1206].x * _1211) + 1.0;
    float _1215 = (cbLight._m0[_1206].y * _1211) + 1.0;
    uint _1216 = _1205 + 8u;
    float _1227 = cbLight._m0[_1205].x + _543;
    float _1228 = cbLight._m0[_1205].y + _544;
    float _1229 = cbLight._m0[_1205].z + _545;
    float _1233 = inversesqrt(dot(vec3(_1227, _1228, _1229), vec3(_1227, _1228, _1229)));
    float _1237 = dot(vec3(0.0), vec3(cbLight._m0[_1205].xyz));
    float _2492 = isnan(0.0) ? _1237 : (isnan(_1237) ? 0.0 : max(_1237, 0.0));
    float _1240 = isnan(1.0) ? _2492 : (isnan(_2492) ? 1.0 : min(_2492, 1.0));
    float _1241 = dot(vec3(0.0), vec3(_543, _544, _545));
    float _2503 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
    float _1244 = isnan(1.0) ? _2503 : (isnan(_2503) ? 1.0 : min(_2503, 1.0));
    float _1245 = dot(vec3(cbLight._m0[_1205].xyz), vec3(_1227 * _1233, _1228 * _1233, _1229 * _1233));
    float _2514 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
    float _1256 = (exp2(log2(1.0 - (isnan(1.0) ? _2514 : (isnan(_2514) ? 1.0 : min(_2514, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1262 = (0.5 / ((_1240 + 9.9999999392252902907785028219223e-09) + _1244)) * _1240;
    float _2525 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
    float _1264 = (isnan(1.0) ? _2525 : (isnan(_2525) ? 1.0 : min(_2525, 1.0))) * 0.31831014156341552734375;
    float _1266 = isnan(1.0) ? _1214 : (isnan(_1214) ? 1.0 : min(_1214, 1.0));
    uint _1276 = _1205 + 9u;
    uint _1282 = _1205 | 1u;
    float _1288 = cbLight._m0[_1282].x + _543;
    float _1289 = cbLight._m0[_1282].y + _544;
    float _1290 = cbLight._m0[_1282].z + _545;
    float _1294 = inversesqrt(dot(vec3(_1288, _1289, _1290), vec3(_1288, _1289, _1290)));
    float _1298 = dot(vec3(0.0), vec3(cbLight._m0[_1282].xyz));
    float _2541 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
    float _1301 = isnan(1.0) ? _2541 : (isnan(_2541) ? 1.0 : min(_2541, 1.0));
    float _1302 = dot(vec3(cbLight._m0[_1282].xyz), vec3(_1288 * _1294, _1289 * _1294, _1290 * _1294));
    float _2552 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
    float _1311 = (exp2(log2(1.0 - (isnan(1.0) ? _2552 : (isnan(_2552) ? 1.0 : min(_2552, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1315 = (0.5 / ((_1301 + 9.9999999392252902907785028219223e-09) + _1244)) * _1301;
    float _2563 = isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0));
    float _1317 = (isnan(1.0) ? _2563 : (isnan(_2563) ? 1.0 : min(_2563, 1.0))) * 0.31831014156341552734375;
    float _1318 = isnan(1.0) ? _1215 : (isnan(_1215) ? 1.0 : min(_1215, 1.0));
    float _1328 = (((_1311 * cbLight._m0[_1276].x) * _1317) * _1318) + (((_1256 * cbLight._m0[_1216].x) * _1264) * _1266);
    float _1329 = (((_1311 * cbLight._m0[_1276].y) * _1317) * _1318) + (((_1256 * cbLight._m0[_1216].y) * _1264) * _1266);
    float _1330 = (((_1311 * cbLight._m0[_1276].z) * _1317) * _1318) + (((_1256 * cbLight._m0[_1216].z) * _1264) * _1266);
    float _1447;
    float _1449;
    float _1451;
    if (_1203.y == 0u)
    {
        float _1386 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1387 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1386;
        float _1388 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1386;
        float _1389 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1386;
        uvec4 _1401 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1402 = _1401.x;
        uint _1413 = uint((float(_1401.y) * floor(float(uint(cbSceneParam._m0[85u].y * _552) / _1402))) + floor(float(uint(cbSceneParam._m0[85u].x * _551) / _1402)));
        float _1423 = (log2(_1389 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1424 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        uint _1427 = uint(isnan(14.0) ? _1424 : (isnan(_1424) ? 14.0 : min(_1424, 14.0)));
        uvec4 _1432 = texelFetch(g_lightClusterGridBuffer, int(((_1427 << 2u) + (_1413 << 6u)) >> 2u));
        uint _1433 = _1432.x;
        uint _1434 = _1401.z;
        float _1524;
        float _1526;
        float _1528;
        if (((((1u << ((_1434 >> 4u) & 15u)) + 4294967295u) & _1433) == 0u) || ((_1434 & 240u) == 0u))
        {
            _1524 = 0.0;
            _1526 = 0.0;
            _1528 = 0.0;
        }
        else
        {
            float _1525;
            float _1527;
            float _1529;
            float _1682 = 0.0;
            float _1683 = 0.0;
            float _1684 = 0.0;
            uint _1685 = 0u;
            uint _1694;
            bool _1695;
            for (;;)
            {
                _1694 = texelFetch(g_lightClassification, int((((_1427 << 5u) + (_1413 << 9u)) + (_1685 << 2u)) >> 2u)).x;
                _1695 = _1694 == 0u;
                float frontier_phi_62_pred;
                float frontier_phi_62_pred_1;
                float frontier_phi_62_pred_2;
                if (_1695)
                {
                    frontier_phi_62_pred = _1684;
                    frontier_phi_62_pred_1 = _1683;
                    frontier_phi_62_pred_2 = _1682;
                }
                else
                {
                    float _1848;
                    float _1849;
                    float _1850;
                    uint _1851;
                    _1848 = _1682;
                    _1849 = _1683;
                    _1850 = _1684;
                    _1851 = _1694;
                    float _1760;
                    float _1761;
                    float _1762;
                    for (;;)
                    {
                        uint _1855 = uint(findLSB(_1851)) + (_1685 << 5u);
                        uint _1852 = (_1851 + 4294967295u) & _1851;
                        uint _1857 = _1855 * 48u;
                        vec4 _1871 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1857)).x, texelFetch(g_PointLightRenderingBuffer, int(_1857 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1857 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1857 + 3u)).x));
                        uint _1888 = (_1855 * 48u) + 8u;
                        vec3 _1899 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_1888)).x, texelFetch(g_PointLightRenderingBuffer, int(_1888 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1888 + 2u)).x));
                        float _1903 = _1871.x - _1387;
                        float _1904 = _1871.y - _1388;
                        float _1905 = _1871.z - _1389;
                        float _1906 = dot(vec3(_1903, _1904, _1905), vec3(_1903, _1904, _1905));
                        float _1909 = inversesqrt(_1906);
                        float _1918 = 1.0 - (_1906 * _1871.w);
                        float _2589 = isnan(0.0) ? _1918 : (isnan(_1918) ? 0.0 : max(_1918, 0.0));
                        float _1920 = sqrt(_1906) * uintBitsToFloat(uvec4(_1878, _1879, _1880, texelFetch(g_PointLightRenderingBuffer, int(((_1855 * 48u) + 4u) + 3u)).x)).w;
                        float _1923 = 1.39999997615814208984375 / (_1920 + 1.39999997615814208984375);
                        float _1924 = _1923 * _1923;
                        float _1927 = ((1.0 - _1924) * dot(vec3(0.0), vec3(_1909 * _1903, _1909 * _1904, _1909 * _1905))) + _1924;
                        float _1929 = (-0.0) - _1387;
                        float _1930 = (-0.0) - _1388;
                        float _1931 = (-0.0) - _1389;
                        float _1935 = inversesqrt(dot(vec3(_1929, _1930, _1931), vec3(_1929, _1930, _1931)));
                        float _1939 = dot(vec3(0.0), vec3(_1935 * _1929, _1935 * _1930, _1935 * _1931));
                        float _2600 = isnan(0.0) ? _1939 : (isnan(_1939) ? 0.0 : max(_1939, 0.0));
                        float _2611 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
                        float _1943 = isnan(1.0) ? _2611 : (isnan(_2611) ? 1.0 : min(_2611, 1.0));
                        float _1947 = (0.5 / (((isnan(1.0) ? _2600 : (isnan(_2600) ? 1.0 : min(_2600, 1.0))) + 9.9999999392252902907785028219223e-09) + _1943)) * _1943;
                        float _2622 = isnan(0.0) ? _1947 : (isnan(_1947) ? 0.0 : max(_1947, 0.0));
                        float _1956 = (((isnan(1.0) ? _2622 : (isnan(_2622) ? 1.0 : min(_2622, 1.0))) * 3.1415927410125732421875) / (((_1920 * _1920) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2589 : (isnan(_2589) ? 1.0 : min(_2589, 1.0)));
                        _1760 = (_1956 * _1899.x) + _1848;
                        _1761 = (_1956 * _1899.y) + _1849;
                        _1762 = (_1956 * _1899.z) + _1850;
                        if (_1852 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _1848 = _1760;
                            _1849 = _1761;
                            _1850 = _1762;
                            _1851 = _1852;
                        }
                    }
                    frontier_phi_62_pred = _1762;
                    frontier_phi_62_pred_1 = _1761;
                    frontier_phi_62_pred_2 = _1760;
                }
                _1529 = frontier_phi_62_pred;
                _1527 = frontier_phi_62_pred_1;
                _1525 = frontier_phi_62_pred_2;
                uint _1686 = _1685 + 1u;
                if (_1686 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1682 = _1525;
                    _1683 = _1527;
                    _1684 = _1529;
                    _1685 = _1686;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1524 = _1525;
            _1526 = _1527;
            _1528 = _1529;
        }
        uvec4 _1532 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1533 = _1532.z;
        uint _1535 = (_1533 >> 8u) & 15u;
        float _1662;
        float _1664;
        float _1666;
        if (((4294967295u << _1535) & _1433) == 0u)
        {
            _1662 = _1524;
            _1664 = _1526;
            _1666 = _1528;
        }
        else
        {
            float _1678 = inversesqrt(dot(vec3(_1387, _1388, _1389), vec3(_1387, _1388, _1389)));
            float frontier_phi_53_54_ladder;
            float frontier_phi_53_54_ladder_1;
            float frontier_phi_53_54_ladder_2;
            if (_1535 < ((_1533 >> 12u) & 15u))
            {
                float _1663;
                float _1665;
                float _1667;
                float _1834 = _1524;
                float _1835 = _1526;
                float _1836 = _1528;
                uint _1837 = _1535;
                uint _1846;
                bool _1847;
                for (;;)
                {
                    _1846 = texelFetch(g_lightClassification, int((((_1427 << 5u) + (_1413 << 9u)) + (_1837 << 2u)) >> 2u)).x;
                    _1847 = _1846 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    if (_1847)
                    {
                        frontier_phi_71_pred = _1836;
                        frontier_phi_71_pred_1 = _1835;
                        frontier_phi_71_pred_2 = _1834;
                    }
                    else
                    {
                        float _1982;
                        float _1983;
                        float _1984;
                        float _2205;
                        float _2206;
                        float _2207;
                        float _1992 = _1834;
                        float _1993 = _1835;
                        float _1994 = _1836;
                        uint _1995 = _1846;
                        uint _1996;
                        uint _2006;
                        vec4 _2021;
                        float _2022;
                        vec3 _2034;
                        vec4 _2050;
                        vec4 _2066;
                        float _2112;
                        bool _2113;
                        for (;;)
                        {
                            _2006 = ((_1837 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_1995));
                            _1996 = (_1995 + 4294967295u) & _1995;
                            uint _2008 = _2006 * 40u;
                            _2021 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2008)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2008 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2008 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2008 + 3u)).x));
                            _2022 = _2021.w;
                            uint _2024 = (_2006 * 40u) + 8u;
                            _2034 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2024)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2024 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2024 + 2u)).x));
                            uint _2037 = (_2006 * 40u) + 16u;
                            _2050 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2037)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2037 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2037 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2037 + 3u)).x));
                            uint _2053 = (_2006 * 40u) + 20u;
                            _2066 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2053)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2053 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2053 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2053 + 3u)).x));
                            uint _2068 = (_2006 * 40u) + 24u;
                            vec4 _2081 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2068)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2068 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2068 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2068 + 3u)).x));
                            uint _2087 = (_2006 * 40u) + 28u;
                            vec4 _2100 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2087)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2087 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2087 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2087 + 3u)).x));
                            _2112 = fma(_1389, _2100.z, fma(_1388, _2100.y, _2100.x * _1387)) + _2100.w;
                            _2113 = !((fma(_1389, _2081.z, fma(_1388, _2081.y, _2081.x * _1387)) + _2081.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            if (_2113)
                            {
                                float _2147 = _2021.x - _1387;
                                float _2148 = _2021.y - _1388;
                                float _2149 = _2021.z - _1389;
                                float _2150 = dot(vec3(_2147, _2148, _2149), vec3(_2147, _2148, _2149));
                                float _2153 = inversesqrt(_2150);
                                float _2160 = 1.0 - (_2150 / (_2022 * _2022));
                                float _2633 = isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0));
                                float _2162 = sqrt(_2150) * uintBitsToFloat(uvec4(_2116, _2117, _2118, texelFetch(g_SpotLightRenderingBuffer, int(((_2006 * 40u) + 4u) + 3u)).x)).w;
                                float _2164 = 1.39999997615814208984375 / (_2162 + 1.39999997615814208984375);
                                float _2165 = _2164 * _2164;
                                float _2168 = (fma(_1389, _2050.z, fma(_1388, _2050.y, _2050.x * _1387)) + _2050.w) / _2112;
                                float _2169 = (fma(_1389, _2066.z, fma(_1388, _2066.y, _2066.x * _1387)) + _2066.w) / _2112;
                                float _2173 = 1.0 - dot(vec2(_2168, _2169), vec2(_2168, _2169));
                                float _2644 = isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0));
                                float _2181 = dot(vec3(0.0), vec3((-0.0) - (_1387 * _1678), (-0.0) - (_1388 * _1678), (-0.0) - (_1389 * _1678)));
                                float _2655 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
                                float _2189 = ((1.0 - _2165) * dot(vec3(0.0), vec3(_2153 * _2147, _2153 * _2148, _2153 * _2149))) + _2165;
                                float _2666 = isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0));
                                float _2190 = isnan(1.0) ? _2666 : (isnan(_2666) ? 1.0 : min(_2666, 1.0));
                                float _2194 = (0.5 / (((isnan(1.0) ? _2655 : (isnan(_2655) ? 1.0 : min(_2655, 1.0))) + 9.9999999392252902907785028219223e-09) + _2190)) * _2190;
                                float _2677 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
                                float _2201 = ((isnan(1.0) ? _2644 : (isnan(_2644) ? 1.0 : min(_2644, 1.0))) * (isnan(1.0) ? _2633 : (isnan(_2633) ? 1.0 : min(_2633, 1.0)))) * (((isnan(1.0) ? _2677 : (isnan(_2677) ? 1.0 : min(_2677, 1.0))) * 3.1415927410125732421875) / (((_2162 * _2162) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_77_pred = _2201 * _2034.z;
                                frontier_phi_77_pred_1 = _2201 * _2034.x;
                                frontier_phi_77_pred_2 = _2201 * _2034.y;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                            }
                            _2207 = frontier_phi_77_pred;
                            _2205 = frontier_phi_77_pred_1;
                            _2206 = frontier_phi_77_pred_2;
                            _1982 = _2205 + _1992;
                            _1983 = _2206 + _1993;
                            _1984 = _2207 + _1994;
                            if (_1996 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _1992 = _1982;
                                _1993 = _1983;
                                _1994 = _1984;
                                _1995 = _1996;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _1984;
                        frontier_phi_71_pred_1 = _1983;
                        frontier_phi_71_pred_2 = _1982;
                    }
                    _1667 = frontier_phi_71_pred;
                    _1665 = frontier_phi_71_pred_1;
                    _1663 = frontier_phi_71_pred_2;
                    uint _1838 = _1837 + 1u;
                    if (_1838 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _1834 = _1663;
                        _1835 = _1665;
                        _1836 = _1667;
                        _1837 = _1838;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_53_54_ladder = _1665;
                frontier_phi_53_54_ladder_1 = _1663;
                frontier_phi_53_54_ladder_2 = _1667;
            }
            else
            {
                frontier_phi_53_54_ladder = _1526;
                frontier_phi_53_54_ladder_1 = _1524;
                frontier_phi_53_54_ladder_2 = _1528;
            }
            _1662 = frontier_phi_53_54_ladder_1;
            _1664 = frontier_phi_53_54_ladder;
            _1666 = frontier_phi_53_54_ladder_2;
        }
        float _1671 = isnan(1.0) ? _564 : (isnan(_564) ? 1.0 : min(_564, 1.0));
        _1447 = ((_1662 * 0.039999999105930328369140625) * _1671) + _1328;
        _1449 = ((_1664 * 0.039999999105930328369140625) * _1671) + _1329;
        _1451 = ((_1666 * 0.039999999105930328369140625) * _1671) + _1330;
    }
    else
    {
        _1447 = _1328;
        _1449 = _1329;
        _1451 = _1330;
    }
    uint _1458 = (_1198 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1473 = (((((_510 * (cbMtdParam._m0[15u].x - cbMtdParam._m0[13u].x)) * _505) + cbMtdParam._m0[13u].x) * _445.x) * cbInstanceData._m0[_1458].x) + ((_1447 + ((isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0))) * _960)) * cbPerFrame._m0[3u].x);
    float _1474 = (((((_510 * (cbMtdParam._m0[15u].y - cbMtdParam._m0[13u].y)) * _505) + cbMtdParam._m0[13u].y) * _445.y) * cbInstanceData._m0[_1458].y) + ((_1449 + ((isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0))) * _960)) * cbPerFrame._m0[3u].x);
    float _1475 = (((((_510 * (cbMtdParam._m0[15u].z - cbMtdParam._m0[13u].z)) * _505) + cbMtdParam._m0[13u].z) * _445.z) * cbInstanceData._m0[_1458].z) + ((_1451 + ((isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0))) * _960)) * cbPerFrame._m0[3u].x);
    uint _1479 = _1198 + 6u;
    float _1487 = _551 / cbSceneParam._m0[86u].x;
    float _1488 = _552 / cbSceneParam._m0[86u].y;
    vec4 _1502 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1487, _1488, (log2((isnan(cbSceneParam._m0[77u].w) ? _538 : (isnan(_538) ? cbSceneParam._m0[77u].w : min(_538, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1504 = _1502.x;
    float _1505 = _1502.y;
    float _1506 = _1502.z;
    float _1507 = _1502.w;
    float _1581;
    float _1583;
    float _1585;
    float _1587;
    if (_538 > cbSceneParam._m0[78u].w)
    {
        float _1543 = isnan(_538) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _538 : min(cbSceneParam._m0[80u].w, _538));
        float _1544 = _1543 / _538;
        float _1555 = _1544 * _264;
        float _1556 = _265 * _1544;
        float _1557 = (-0.0) - _1556;
        float _1558 = _1544 * _266;
        float _1560 = (cbSceneParam._m0[77u].w * _1557) / _1543;
        float _1561 = _1560 + cbSceneParam._m0[79u].w;
        float _1562 = cbSceneParam._m0[79u].w - _1556;
        float _1568 = sqrt(((_1555 * _1555) + (_1556 * _1556)) + (_1558 * _1558));
        float _1571 = (1.0 - (cbSceneParam._m0[77u].w / _1543)) * _1568;
        float _1577 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1579 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1770;
        if (abs((_1557 - _1560) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1770 = ((((_1561 > 0.0) ? exp2(_1577 * _1561) : (2.0 - exp2(_1579 * _1561))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1571;
        }
        else
        {
            float _1708 = 1.0 / cbSceneParam._m0[80u].x;
            float _1709 = isnan(_1562) ? _1561 : (isnan(_1561) ? _1562 : max(_1561, _1562));
            float _1710 = isnan(_1562) ? _1561 : (isnan(_1561) ? _1562 : min(_1561, _1562));
            float _1719 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : min(_1709, 0.0));
            float _1720 = isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : min(_1710, 0.0));
            _1770 = ((abs(_1568 / _1557) * cbSceneParam._m0[80u].y) * ((((_1719 - _1720) * 2.0) - ((exp2(_1577 * (isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0)))) - exp2(_1577 * (isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0))))) * _1708)) - ((exp2(_1579 * _1719) - exp2(_1579 * _1720)) * _1708))) + (_1571 * cbSceneParam._m0[80u].z);
        }
        vec4 _1772 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1487, _1488, 1.0), 0.0);
        float _1781 = exp2((_1770 * (-1.44269502162933349609375)) * (1.0 - _1772.w));
        float _1782 = log2(_1781);
        float _1798 = log2(_1507);
        _1581 = (exp2(_1798 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1782 * cbSceneParam._m0[78u].x)) * _1772.x) / cbSceneParam._m0[78u].x)) + _1504;
        _1583 = (exp2(_1798 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1782 * cbSceneParam._m0[78u].y)) * _1772.y) / cbSceneParam._m0[78u].y)) + _1505;
        _1585 = (exp2(_1798 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1782 * cbSceneParam._m0[78u].z)) * _1772.z) / cbSceneParam._m0[78u].z)) + _1506;
        _1587 = _1781 * _1507;
    }
    else
    {
        _1581 = _1504;
        _1583 = _1505;
        _1585 = _1506;
        _1587 = _1507;
    }
    float _1599 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1600 = _1599 == 3.0;
    float _1601 = log2(_1587);
    float _1608 = exp2(_1601 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0)));
    float _1609 = exp2(_1601 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)));
    float _1610 = exp2(_1601 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)));
    float _1619 = (_1599 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _1619 * (_1600 ? _1608 : (_1608 + (cbSceneParam._m0[72u].w * _1581)));
    SV_Target.y = _1619 * (_1600 ? _1609 : (_1609 + (cbSceneParam._m0[72u].w * _1583)));
    SV_Target.z = _1619 * (_1600 ? _1610 : (_1610 + (cbSceneParam._m0[72u].w * _1585)));
    SV_Target.w = cbInstanceData._m0[_1479].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1479].w;
}


