#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_8;
layout(set = 0, binding = 11) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1319;
float _3761;
float _3762;
float _3763;
float _3764;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _206 = _205 * _198;
    float _207 = _205 * _199;
    float _208 = _205 * _200;
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _213 = _212 * NORMAL.x;
    float _214 = _212 * NORMAL.y;
    float _215 = _212 * NORMAL.z;
    float _219 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _220 = _219 * TANGENT.x;
    float _221 = _219 * TANGENT.y;
    float _222 = _219 * TANGENT.z;
    float _267 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _277 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _267);
    float _278 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _267);
    float _279 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _267);
    vec4 _292 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _295 = _292.x;
    vec4 _313 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _330 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _295) + cbMtdParam._m0[12u].x) * _313.x;
    float _332 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _295) + cbMtdParam._m0[12u].y) * _313.y;
    float _334 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _295) + cbMtdParam._m0[12u].z) * _313.z;
    vec4 _352 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _388 = cbMtdParam._m0[24u].x + _277;
    float _389 = cbMtdParam._m0[24u].y + _278;
    float _390 = cbMtdParam._m0[24u].z + _279;
    float _404 = (-0.0) - dot(vec3(_388, _389, _390), vec3(_206, _207, _208));
    float _405 = (-0.0) - dot(vec3(_388, _389, _390), vec3(_220, _221, _222));
    float _406 = (-0.0) - dot(vec3(_388, _389, _390), vec3((-0.0) - _213, (-0.0) - _214, (-0.0) - _215));
    float _410 = inversesqrt(dot(vec3(_404, _405, _406), vec3(_404, _405, _406)));
    float _413 = _410 * _406;
    float _414 = (_410 * _404) + ((cbMtdParam._m0[22u].x * _295) * ((_352.x * 2.0) + (-1.0)));
    float _415 = (_410 * _405) + ((cbMtdParam._m0[22u].y * _295) * ((_352.y * 2.0) + (-1.0)));
    float _416 = _414 * cbMtdParam._m0[20u].w;
    float _417 = _415 * cbMtdParam._m0[20u].z;
    float _418 = fract(TEXCOORD.x);
    float _419 = fract(TEXCOORD.y);
    float _425;
    if (_416 > 0.0)
    {
        _425 = (1.0 - _418) / _416;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_416 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _418) / _416;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _425 = frontier_phi_3_2_ladder;
    }
    float _433;
    if (_417 > 0.0)
    {
        _433 = (1.0 - _419) / _417;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_417 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _419) / _417;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _433 = frontier_phi_7_6_ladder;
    }
    bool _435 = _413 > 0.0;
    float _437 = _435 ? (cbMtdParam._m0[16u].x / _413) : 5000.0;
    float _438 = isnan(_433) ? _425 : (isnan(_425) ? _433 : min(_425, _433));
    float _439 = isnan(_437) ? _438 : (isnan(_438) ? _437 : min(_438, _437));
    float _443 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _444 = _418 + (-0.5);
    float _447 = _419 + (-0.5);
    float _450 = ((_439 * _413) + _443) / _443;
    vec4 _475 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (((((_444 + (_439 * _416)) / _450) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (((((_447 + (_439 * _417)) / _450) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    float _488 = (_475.x * _295) * cbMtdParam._m0[9u].x;
    float _489 = (_475.y * _295) * cbMtdParam._m0[9u].y;
    float _490 = (_475.z * _295) * cbMtdParam._m0[9u].z;
    float _509 = _414 * cbMtdParam._m0[22u].w;
    float _510 = _415 * cbMtdParam._m0[22u].z;
    bool _511 = _509 > 0.0;
    float _516;
    if (_511)
    {
        _516 = (1.0 - _418) / _509;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_509 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _418) / _509;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _516 = frontier_phi_11_10_ladder;
    }
    bool _518 = _510 > 0.0;
    float _523;
    if (_518)
    {
        _523 = (1.0 - _419) / _510;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_510 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _419) / _510;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _523 = frontier_phi_15_14_ladder;
    }
    float _526 = _435 ? (cbMtdParam._m0[18u].x / _413) : 5000.0;
    float _527 = isnan(_523) ? _516 : (isnan(_516) ? _523 : min(_516, _523));
    float _528 = isnan(_526) ? _527 : (isnan(_527) ? _526 : min(_527, _526));
    float _532 = cbMtdParam._m0[19u].y * cbMtdParam._m0[18u].x;
    float _536 = ((_528 * _413) + _532) / _532;
    float _541 = cbMtdParam._m0[19u].x - cbMtdParam._m0[20u].x * trunc(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    float _543 = floor(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    vec4 _559 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_444 + (_528 * _509)) / _536) + 0.5) + _541) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_447 + (_528 * _510)) / _536) + 0.5) + _543) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[0u].w));
    float _574;
    if (_511)
    {
        _574 = (1.0 - _418) / _509;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_509 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _418) / _509;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _574 = frontier_phi_19_18_ladder;
    }
    float _580;
    if (_518)
    {
        _580 = (1.0 - _419) / _510;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_510 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _419) / _510;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _580 = frontier_phi_23_22_ladder;
    }
    float _582 = isnan(_580) ? _574 : (isnan(_574) ? _580 : min(_574, _580));
    float _583 = isnan(_526) ? _582 : (isnan(_582) ? _526 : min(_582, _526));
    float _590 = ((_583 * _413) + _532) / _532;
    vec4 _610 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_444 + (_583 * _509)) / _590) + 0.5) + _541) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_447 + (_583 * _510)) / _590) + 0.5) + _543) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[8u].w));
    float _612 = _610.x;
    float _622 = (((((cbMtdParam._m0[10u].x * _295) * _559.x) - _488) * _295) * _612) + _488;
    float _623 = (((((cbMtdParam._m0[10u].y * _295) * _559.y) - _489) * _295) * _612) + _489;
    float _624 = (((((cbMtdParam._m0[10u].z * _295) * _559.z) - _490) * _295) * _612) + _490;
    float _640 = _414 * cbMtdParam._m0[23u].y;
    float _641 = _415 * cbMtdParam._m0[23u].x;
    bool _642 = _640 > 0.0;
    float _647;
    if (_642)
    {
        _647 = (1.0 - _418) / _640;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_640 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _418) / _640;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _647 = frontier_phi_27_26_ladder;
    }
    bool _649 = _641 > 0.0;
    float _654;
    if (_649)
    {
        _654 = (1.0 - _419) / _641;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_641 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _419) / _641;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _654 = frontier_phi_31_30_ladder;
    }
    float _657 = _435 ? (cbMtdParam._m0[19u].w / _413) : 5000.0;
    float _658 = isnan(_654) ? _647 : (isnan(_647) ? _654 : min(_647, _654));
    float _659 = isnan(_657) ? _658 : (isnan(_658) ? _657 : min(_658, _657));
    float _663 = cbMtdParam._m0[19u].w * cbMtdParam._m0[16u].z;
    float _667 = ((_659 * _413) + _663) / _663;
    float _672 = cbMtdParam._m0[19u].z - cbMtdParam._m0[23u].z * trunc(cbMtdParam._m0[19u].z / cbMtdParam._m0[23u].z);
    float _674 = floor(cbMtdParam._m0[19u].z / cbMtdParam._m0[23u].z);
    vec4 _690 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * (((((_444 + (_659 * _640)) / _667) + 0.5) + _672) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * (((((_447 + (_659 * _641)) / _667) + 0.5) + _674) / cbMtdParam._m0[23u].w)) + cbTextureTilingScale._m0[9u].w));
    float _705;
    if (_642)
    {
        _705 = (1.0 - _418) / _640;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_640 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _418) / _640;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _705 = frontier_phi_35_34_ladder;
    }
    float _711;
    if (_649)
    {
        _711 = (1.0 - _419) / _641;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_641 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _419) / _641;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _711 = frontier_phi_39_38_ladder;
    }
    float _713 = isnan(_711) ? _705 : (isnan(_705) ? _711 : min(_705, _711));
    float _714 = isnan(_657) ? _713 : (isnan(_713) ? _657 : min(_713, _657));
    float _721 = ((_714 * _413) + _663) / _663;
    vec4 _741 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_444 + (_714 * _640)) / _721) + 0.5) + _672) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_447 + (_714 * _641)) / _721) + 0.5) + _674) / cbMtdParam._m0[23u].w)) + cbTextureTilingScale._m0[10u].w));
    float _743 = _741.x;
    float _753 = _295 * 0.1500000059604644775390625;
    float _764 = (_753 * ((_622 - _330) + (((((cbMtdParam._m0[14u].x * _295) * _690.x) - _622) * _295) * _743))) + _330;
    float _765 = (_753 * ((_623 - _332) + (((((cbMtdParam._m0[14u].y * _295) * _690.y) - _623) * _295) * _743))) + _332;
    float _766 = (_753 * ((_624 - _334) + (((((cbMtdParam._m0[14u].z * _295) * _690.z) - _624) * _295) * _743))) + _334;
    vec4 _779 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _783 = _779.z;
    float _786 = (_779.x * 2.0) + (-1.0);
    float _787 = (_779.y * 2.0) + (-1.0);
    float _788 = dot(vec2(_786, _787), vec2(_786, _787));
    float _3823 = isnan(0.0) ? _788 : (isnan(_788) ? 0.0 : max(_788, 0.0));
    float _793 = sqrt(1.0 - (isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))));
    float _796 = fma(_793, _213, fma(_787, _220, _786 * _206));
    float _799 = fma(_793, _214, fma(_787, _221, _786 * _207));
    float _802 = fma(_793, _215, fma(_787, _222, _786 * _208));
    float _806 = inversesqrt(dot(vec3(_796, _799, _802), vec3(_796, _799, _802)));
    float _807 = _806 * _796;
    float _808 = _806 * _799;
    float _809 = _806 * _802;
    float _3834 = isnan(0.0) ? _783 : (isnan(_783) ? 0.0 : max(_783, 0.0));
    float _810 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
    float _3845 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _3856 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _3867 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
    float _829 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _833 = inversesqrt(dot(vec3(_277, _278, _279), vec3(_277, _278, _279)));
    float _834 = _277 * _833;
    float _835 = _278 * _833;
    float _836 = _279 * _833;
    vec4 _841 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _843 = _841.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1000 = sqrt(((_277 * _277) + (_278 * _278)) + (_279 * _279));
        float _1006 = (cbMatDynParam._m0[5u].x * _1000) + cbMatDynParam._m0[5u].y;
        float _3878 = isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0));
        float _1007 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1011 = (cbMatDynParam._m0[5u].z * _1000) + cbMatDynParam._m0[5u].w;
        float _3889 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) - _1007)) + _1007) < ((_843 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _855 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _856 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _875 = fma(_809, cbSceneParam._m0[5u].z, fma(_808, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _807));
    float _878 = fma(_809, cbSceneParam._m0[6u].z, fma(_808, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _807));
    float _881 = fma(_809, cbSceneParam._m0[7u].z, fma(_808, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _807));
    uint _894 = uint(roundEven(NORMAL.w)) * 13u;
    uint _896 = _894 + 9u;
    uint _897 = _896 + uint(cbMatDynParam._m0[0u].w);
    float _903 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0)))) * cbInstanceData._m0[_897].x;
    float _904 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0)))) * cbInstanceData._m0[_897].y;
    float _905 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0)))) * cbInstanceData._m0[_897].z;
    float _3900 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _906 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
    float _3911 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _907 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
    float _3922 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
    float _908 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
    vec4 _917 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _855, cbSceneParam._m0[86u].y * _856));
    float _920 = _917.x * TEXCOORD_4.z;
    float _921 = dot(vec3(_807, _808, _809), vec3(_834, _835, _836));
    float _924 = _921 * 2.0;
    float _928 = (_924 * _807) - _834;
    float _929 = (_924 * _808) - _835;
    float _930 = (_924 * _809) - _836;
    float _934 = abs(dot(vec3(_834, _835, _836), vec3(_807, _808, _809)));
    float _3933 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    float _936 = sqrt(_810);
    float _949 = exp2((_936 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_936 * 3.0));
    float _981 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _985 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _989 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1318;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1045 = fma(_989, cbModelParam._m0[26u].z, fma(_985, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _981));
        float _1049 = fma(_989, cbModelParam._m0[27u].z, fma(_985, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _981));
        float _1053 = fma(_989, cbModelParam._m0[28u].z, fma(_985, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _981));
        float _1076 = _981 + _807;
        float _1077 = _985 + _808;
        float _1078 = _989 + _809;
        float _1088 = fma(_1078, cbModelParam._m0[26u].z, fma(_1077, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1076)) - _1045;
        float _1089 = fma(_1078, cbModelParam._m0[27u].z, fma(_1077, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1076)) - _1049;
        float _1090 = fma(_1078, cbModelParam._m0[28u].z, fma(_1077, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1076)) - _1053;
        float _1094 = inversesqrt(dot(vec3(_1088, _1089, _1090), vec3(_1088, _1089, _1090)));
        float _1107 = ((_1094 * _1088) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1045 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1108 = ((_1094 * _1089) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1049 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1109 = ((_1094 * _1090) / cbModelParam._m0[34u].z) + ((((((_1053 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1112 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        vec4 _1133 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1107, _1108, _1109), 0.0);
        float _1146 = exp2((_1112.w + (-0.5)) * 20.0) * 2.0;
        float _1147 = _1146 * (_1112.x + (-0.5));
        float _1148 = _1146 * (_1112.y + (-0.5));
        float _1149 = _1146 * (_1112.z + (-0.5));
        float _1156 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1119.x + (-0.5));
        float _1158 = _1156 * (_1119.y + (-0.5));
        float _1159 = _1156 * (_1119.z + (-0.5));
        float _1166 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1126.x + (-0.5));
        float _1168 = _1166 * (_1126.y + (-0.5));
        float _1169 = _1166 * (_1126.z + (-0.5));
        float _1176 = exp2((_1133.w + (-0.5)) * 20.0) * 2.0;
        float _1177 = _1176 * (_1133.x + (-0.5));
        float _1178 = _1176 * (_1133.y + (-0.5));
        float _1179 = _1176 * (_1133.z + (-0.5));
        float _1180 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1181 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1182 = isnan(0.0) ? _1179 : (isnan(_1179) ? 0.0 : max(_1179, 0.0));
        float _1183 = _1147 * 0.5;
        float _1184 = _1157 * 0.5;
        float _1185 = _1167 * 0.5;
        float _1186 = dot(vec3(_1183, _1184, _1185), vec3(_1183, _1184, _1185));
        float _1191 = (_1186 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1186);
        float _1200 = (dot(vec3(_807, _808, _809), vec3(_1191 * _1183, _1191 * _1184, _1191 * _1185)) + 1.0) * 0.5;
        float _3959 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1210 = sqrt(((_1184 * _1184) + (_1183 * _1183)) + (_1185 * _1185)) / (_1180 + 9.9999997473787516355514526367188e-06);
        float _3970 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1211 = isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0));
        float _1212 = _1211 * 2.0;
        float _1216 = (1.0 - _1211) / (_1211 + 1.0);
        float _3981 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0));
        float _1226 = ((((1.0 - _1217) * (_1212 + 2.0)) * exp2(log2(isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * (_1212 + 1.0))) + _1217) * _1180;
        float _1227 = _1148 * 0.5;
        float _1228 = _1158 * 0.5;
        float _1229 = _1168 * 0.5;
        float _1230 = dot(vec3(_1227, _1228, _1229), vec3(_1227, _1228, _1229));
        float _1235 = (_1230 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1230);
        float _1243 = (dot(vec3(_807, _808, _809), vec3(_1235 * _1227, _1235 * _1228, _1235 * _1229)) + 1.0) * 0.5;
        float _3992 = isnan(0.0) ? _1243 : (isnan(_1243) ? 0.0 : max(_1243, 0.0));
        float _1252 = sqrt(((_1228 * _1228) + (_1227 * _1227)) + (_1229 * _1229)) / (_1181 + 9.9999997473787516355514526367188e-06);
        float _4003 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
        float _1253 = isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0));
        float _1254 = _1253 * 2.0;
        float _1258 = (1.0 - _1253) / (_1253 + 1.0);
        float _4014 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _4014 : (isnan(_4014) ? 1.0 : min(_4014, 1.0));
        float _1268 = ((((1.0 - _1259) * (_1254 + 2.0)) * exp2(log2(isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * (_1254 + 1.0))) + _1259) * _1181;
        float _1269 = _1149 * 0.5;
        float _1270 = _1159 * 0.5;
        float _1271 = _1169 * 0.5;
        float _1272 = dot(vec3(_1269, _1270, _1271), vec3(_1269, _1270, _1271));
        float _1277 = (_1272 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1272);
        float _1285 = (dot(vec3(_807, _808, _809), vec3(_1277 * _1269, _1277 * _1270, _1277 * _1271)) + 1.0) * 0.5;
        float _4025 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1294 = sqrt(((_1270 * _1270) + (_1269 * _1269)) + (_1271 * _1271)) / (_1182 + 9.9999997473787516355514526367188e-06);
        float _4036 = isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0));
        float _1295 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
        float _1296 = _1295 * 2.0;
        float _1300 = (1.0 - _1295) / (_1295 + 1.0);
        float _4047 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
        float _1310 = ((((1.0 - _1301) * (_1296 + 2.0)) * exp2(log2(isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * (_1296 + 1.0))) + _1301) * _1182;
        _1318 = _1149;
        _1320 = _1148;
        _1321 = _1147;
        _1322 = _1159;
        _1323 = _1158;
        _1324 = _1157;
        _1325 = _1169;
        _1326 = _1168;
        _1327 = _1167;
        _1328 = _1182;
        _1329 = _1181;
        _1330 = _1180;
        _1331 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0)));
        _1332 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0)));
        _1333 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0)));
    }
    else
    {
        _1318 = _1319;
        _1320 = _1319;
        _1321 = _1319;
        _1322 = _1319;
        _1323 = _1319;
        _1324 = _1319;
        _1325 = _1319;
        _1326 = _1319;
        _1327 = _1319;
        _1328 = _1319;
        _1329 = _1319;
        _1330 = _1319;
        _1331 = 0.0;
        _1332 = 0.0;
        _1333 = 0.0;
    }
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    float _1642;
    float _1643;
    float _1644;
    float _1645;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1362 = fma(_989, cbModelParam._m0[30u].z, fma(_985, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _981));
        float _1366 = fma(_989, cbModelParam._m0[31u].z, fma(_985, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _981));
        float _1370 = fma(_989, cbModelParam._m0[32u].z, fma(_985, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _981));
        float _1393 = _981 + _807;
        float _1394 = _985 + _808;
        float _1395 = _989 + _809;
        float _1405 = fma(_1395, cbModelParam._m0[30u].z, fma(_1394, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1393)) - _1362;
        float _1406 = fma(_1395, cbModelParam._m0[31u].z, fma(_1394, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1393)) - _1366;
        float _1407 = fma(_1395, cbModelParam._m0[32u].z, fma(_1394, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1393)) - _1370;
        float _1411 = inversesqrt(dot(vec3(_1405, _1406, _1407), vec3(_1405, _1406, _1407)));
        float _1424 = ((_1411 * _1405) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1362 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1425 = ((_1411 * _1406) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1366 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1426 = ((_1411 * _1407) / cbModelParam._m0[35u].z) + ((((((_1370 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1428 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1424, _1425, _1426), 0.0);
        vec4 _1435 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1424, _1425, _1426), 0.0);
        vec4 _1442 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1424, _1425, _1426), 0.0);
        vec4 _1449 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1424, _1425, _1426), 0.0);
        float _1461 = exp2((_1428.w + (-0.5)) * 20.0) * 2.0;
        float _1462 = _1461 * (_1428.x + (-0.5));
        float _1463 = _1461 * (_1428.y + (-0.5));
        float _1464 = _1461 * (_1428.z + (-0.5));
        float _1471 = exp2((_1435.w + (-0.5)) * 20.0) * 2.0;
        float _1472 = _1471 * (_1435.x + (-0.5));
        float _1473 = _1471 * (_1435.y + (-0.5));
        float _1474 = _1471 * (_1435.z + (-0.5));
        float _1481 = exp2((_1442.w + (-0.5)) * 20.0) * 2.0;
        float _1482 = _1481 * (_1442.x + (-0.5));
        float _1483 = _1481 * (_1442.y + (-0.5));
        float _1484 = _1481 * (_1442.z + (-0.5));
        float _1491 = exp2((_1449.w + (-0.5)) * 20.0) * 2.0;
        float _1492 = _1491 * (_1449.x + (-0.5));
        float _1493 = _1491 * (_1449.y + (-0.5));
        float _1494 = _1491 * (_1449.z + (-0.5));
        float _1495 = isnan(0.0) ? _1492 : (isnan(_1492) ? 0.0 : max(_1492, 0.0));
        float _1496 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1497 = isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0));
        float _1498 = _1462 * 0.5;
        float _1499 = _1472 * 0.5;
        float _1500 = _1482 * 0.5;
        float _1501 = dot(vec3(_1498, _1499, _1500), vec3(_1498, _1499, _1500));
        float _1506 = (_1501 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1501);
        float _1514 = (dot(vec3(_807, _808, _809), vec3(_1506 * _1498, _1506 * _1499, _1506 * _1500)) + 1.0) * 0.5;
        float _4088 = isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0));
        float _1523 = sqrt(((_1499 * _1499) + (_1498 * _1498)) + (_1500 * _1500)) / (_1495 + 9.9999997473787516355514526367188e-06);
        float _4099 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
        float _1524 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
        float _1525 = _1524 * 2.0;
        float _1529 = (1.0 - _1524) / (_1524 + 1.0);
        float _4110 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
        float _1530 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
        float _1539 = ((((1.0 - _1530) * (_1525 + 2.0)) * exp2(log2(isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0))) * (_1525 + 1.0))) + _1530) * _1495;
        float _1540 = _1463 * 0.5;
        float _1541 = _1473 * 0.5;
        float _1542 = _1483 * 0.5;
        float _1543 = dot(vec3(_1540, _1541, _1542), vec3(_1540, _1541, _1542));
        float _1548 = (_1543 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1543);
        float _1556 = (dot(vec3(_807, _808, _809), vec3(_1548 * _1540, _1548 * _1541, _1548 * _1542)) + 1.0) * 0.5;
        float _4121 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
        float _1565 = sqrt(((_1541 * _1541) + (_1540 * _1540)) + (_1542 * _1542)) / (_1496 + 9.9999997473787516355514526367188e-06);
        float _4132 = isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0));
        float _1566 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
        float _1567 = _1566 * 2.0;
        float _1571 = (1.0 - _1566) / (_1566 + 1.0);
        float _4143 = isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0));
        float _1572 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
        float _1581 = ((((1.0 - _1572) * (_1567 + 2.0)) * exp2(log2(isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0))) * (_1567 + 1.0))) + _1572) * _1496;
        float _1582 = _1464 * 0.5;
        float _1583 = _1474 * 0.5;
        float _1584 = _1484 * 0.5;
        float _1585 = dot(vec3(_1582, _1583, _1584), vec3(_1582, _1583, _1584));
        float _1590 = (_1585 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1585);
        float _1598 = (dot(vec3(_807, _808, _809), vec3(_1590 * _1582, _1590 * _1583, _1590 * _1584)) + 1.0) * 0.5;
        float _4154 = isnan(0.0) ? _1598 : (isnan(_1598) ? 0.0 : max(_1598, 0.0));
        float _1607 = sqrt(((_1583 * _1583) + (_1582 * _1582)) + (_1584 * _1584)) / (_1497 + 9.9999997473787516355514526367188e-06);
        float _4165 = isnan(0.0) ? _1607 : (isnan(_1607) ? 0.0 : max(_1607, 0.0));
        float _1608 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
        float _1609 = _1608 * 2.0;
        float _1613 = (1.0 - _1608) / (_1608 + 1.0);
        float _4176 = isnan(0.0) ? _1613 : (isnan(_1613) ? 0.0 : max(_1613, 0.0));
        float _1614 = isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0));
        float _1623 = ((((1.0 - _1614) * (_1609 + 2.0)) * exp2(log2(isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0))) * (_1609 + 1.0))) + _1614) * _1497;
        _1631 = _1464;
        _1632 = _1463;
        _1633 = _1462;
        _1634 = _1474;
        _1635 = _1473;
        _1636 = _1472;
        _1637 = _1484;
        _1638 = _1483;
        _1639 = _1482;
        _1640 = _1497;
        _1641 = _1496;
        _1642 = _1495;
        _1643 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0)));
        _1644 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1581 : (isnan(_1581) ? 0.0 : max(_1581, 0.0)));
        _1645 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1623 : (isnan(_1623) ? 0.0 : max(_1623, 0.0)));
    }
    else
    {
        _1631 = _1319;
        _1632 = _1319;
        _1633 = _1319;
        _1634 = _1319;
        _1635 = _1319;
        _1636 = _1319;
        _1637 = _1319;
        _1638 = _1319;
        _1639 = _1319;
        _1640 = _1319;
        _1641 = _1319;
        _1642 = _1319;
        _1643 = 0.0;
        _1644 = 0.0;
        _1645 = 0.0;
    }
    float _1655 = (cbModelParam._m0[1u].x * (_1643 - _1331)) + _1331;
    float _1656 = (cbModelParam._m0[1u].x * (_1644 - _1332)) + _1332;
    float _1657 = (cbModelParam._m0[1u].x * (_1645 - _1333)) + _1333;
    float _1678 = fma(_1657, cbSceneParam._m0[89u].z, fma(_1656, cbSceneParam._m0[89u].y, _1655 * cbSceneParam._m0[89u].x));
    float _1681 = fma(_1657, cbSceneParam._m0[90u].z, fma(_1656, cbSceneParam._m0[90u].y, _1655 * cbSceneParam._m0[90u].x));
    float _1684 = fma(_1657, cbSceneParam._m0[91u].z, fma(_1656, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1655));
    float _1699 = _928 * 0.5;
    float _1700 = _929 * 0.5;
    float _1701 = _930 * 0.5;
    float _1702 = dot(vec4(_1699, _1700, _1701, 1.0), vec4(_1633, _1636, _1639, _1642));
    float _1705 = dot(vec4(_1699, _1700, _1701, 1.0), vec4(_1632, _1635, _1638, _1641));
    float _1708 = dot(vec4(_1699, _1700, _1701, 1.0), vec4(_1631, _1634, _1637, _1640));
    float _1742;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1715 = dot(vec4(_1699, _1700, _1701, 1.0), vec4(_1318, _1322, _1325, _1328));
        float _1719 = dot(vec4(_1699, _1700, _1701, 1.0), vec4(_1320, _1323, _1326, _1329));
        float _1723 = dot(vec4(_1699, _1700, _1701, 1.0), vec4(_1321, _1324, _1327, _1330));
        float _1730 = dot(vec4(cbModelParam._m0[39u]), vec4(_1699, _1700, _1701, 1.0));
        _1742 = dot(vec3(isnan(0.0) ? _1723 : (isnan(_1723) ? 0.0 : max(_1723, 0.0)), isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0)), isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1730) ? 0.0 : (isnan(0.0) ? _1730 : max(0.0, _1730))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1742 = 1.0;
    }
    float _1753;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1744 = dot(vec4(cbModelParam._m0[40u]), vec4(_1699, _1700, _1701, 1.0));
        _1753 = dot(vec3(isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0)), isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0)), isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1744) ? 0.0 : (isnan(0.0) ? _1744 : max(0.0, _1744))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1753 = 1.0;
    }
    float _1757 = (_1753 * cbModelParam._m0[1u].x) + (_1742 * (1.0 - cbModelParam._m0[1u].x));
    float _1767 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _810);
    float _1768 = isnan(_1767) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1767 : min(cbModelParam._m0[25u].z, _1767));
    float _1849;
    float _1851;
    float _1853;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1816 = fma(_989, cbModelParam._m0[13u].z, fma(_985, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _981)) + cbModelParam._m0[13u].w;
        float _1820 = fma(_989, cbModelParam._m0[14u].z, fma(_985, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _981)) + cbModelParam._m0[14u].w;
        float _1824 = fma(_989, cbModelParam._m0[15u].z, fma(_985, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _981)) + cbModelParam._m0[15u].w;
        float _1827 = fma(_930, cbModelParam._m0[13u].z, fma(_929, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _928));
        float _1830 = fma(_930, cbModelParam._m0[14u].z, fma(_929, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _928));
        float _1833 = fma(_930, cbModelParam._m0[15u].z, fma(_929, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _928));
        float _1861;
        if (_1827 > 0.0)
        {
            _1861 = abs((1.0 - _1816) / _1827);
        }
        else
        {
            float frontier_phi_57_55_ladder;
            if (_1827 < 0.0)
            {
                frontier_phi_57_55_ladder = abs((_1816 + 1.0) / _1827);
            }
            else
            {
                frontier_phi_57_55_ladder = 5000.0;
            }
            _1861 = frontier_phi_57_55_ladder;
        }
        float _2029;
        if (_1830 > 0.0)
        {
            _2029 = abs((1.0 - _1820) / _1830);
        }
        else
        {
            float frontier_phi_66_62_ladder;
            if (_1830 < 0.0)
            {
                frontier_phi_66_62_ladder = abs((_1820 + 1.0) / _1830);
            }
            else
            {
                frontier_phi_66_62_ladder = 5000.0;
            }
            _2029 = frontier_phi_66_62_ladder;
        }
        float _2473;
        if (_1833 > 0.0)
        {
            _2473 = abs((1.0 - _1824) / _1833);
        }
        else
        {
            float frontier_phi_78_73_ladder;
            if (_1833 < 0.0)
            {
                frontier_phi_78_73_ladder = abs((_1824 + 1.0) / _1833);
            }
            else
            {
                frontier_phi_78_73_ladder = 5000.0;
            }
            _2473 = frontier_phi_78_73_ladder;
        }
        float _2475 = isnan(_2029) ? _1861 : (isnan(_1861) ? _2029 : min(_1861, _2029));
        float _2476 = isnan(_2473) ? _2475 : (isnan(_2475) ? _2473 : min(_2475, _2473));
        float _2480 = (_2476 * _1827) + _1816;
        float _2481 = (_2476 * _1830) + _1820;
        float _2482 = (_2476 * _1833) + _1824;
        float _2483 = _2476 * 9.9999997473787516355514526367188e-05;
        float _2485 = (-1.0) - _2483;
        float _2487 = _2483 + 1.0;
        float frontier_phi_56_78_ladder;
        float frontier_phi_56_78_ladder_1;
        float frontier_phi_56_78_ladder_2;
        if ((_2482 > _2487) || ((_2482 < _2485) || ((_2481 > _2487) || ((_2481 < _2485) || ((_2480 < _2485) || (_2480 > _2487))))))
        {
            frontier_phi_56_78_ladder = 0.0;
            frontier_phi_56_78_ladder_1 = 0.0;
            frontier_phi_56_78_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2716 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2482, cbModelParam._m0[9u].z, fma(_2481, cbModelParam._m0[9u].y, _2480 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2482, cbModelParam._m0[10u].z, fma(_2481, cbModelParam._m0[10u].y, _2480 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2482, cbModelParam._m0[11u].z, fma(_2481, cbModelParam._m0[11u].y, _2480 * cbModelParam._m0[11u].x))), _1768);
            frontier_phi_56_78_ladder = _2716.z * cbModelParam._m0[1u].y;
            frontier_phi_56_78_ladder_1 = _2716.y * cbModelParam._m0[1u].y;
            frontier_phi_56_78_ladder_2 = _2716.x * cbModelParam._m0[1u].y;
        }
        _1849 = frontier_phi_56_78_ladder_2;
        _1851 = frontier_phi_56_78_ladder_1;
        _1853 = frontier_phi_56_78_ladder;
    }
    else
    {
        vec4 _1837 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_928, _929, _930), _1768);
        _1849 = _1837.x * cbModelParam._m0[1u].y;
        _1851 = _1837.y * cbModelParam._m0[1u].y;
        _1853 = _1837.z * cbModelParam._m0[1u].y;
    }
    float _1857 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _810);
    float _1858 = isnan(_1857) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1857 : min(cbModelParam._m0[25u].w, _1857));
    float _1946;
    float _1948;
    float _1950;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1910 = fma(_989, cbModelParam._m0[21u].z, fma(_985, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _981)) + cbModelParam._m0[21u].w;
        float _1914 = fma(_989, cbModelParam._m0[22u].z, fma(_985, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _981)) + cbModelParam._m0[22u].w;
        float _1918 = fma(_989, cbModelParam._m0[23u].z, fma(_985, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _981)) + cbModelParam._m0[23u].w;
        float _1921 = fma(_930, cbModelParam._m0[21u].z, fma(_929, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _928));
        float _1924 = fma(_930, cbModelParam._m0[22u].z, fma(_929, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _928));
        float _1927 = fma(_930, cbModelParam._m0[23u].z, fma(_929, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _928));
        float _2034;
        if (_1921 > 0.0)
        {
            _2034 = abs((1.0 - _1910) / _1921);
        }
        else
        {
            float frontier_phi_68_64_ladder;
            if (_1921 < 0.0)
            {
                frontier_phi_68_64_ladder = abs((_1910 + 1.0) / _1921);
            }
            else
            {
                frontier_phi_68_64_ladder = 5000.0;
            }
            _2034 = frontier_phi_68_64_ladder;
        }
        float _2500;
        if (_1924 > 0.0)
        {
            _2500 = abs((1.0 - _1914) / _1924);
        }
        else
        {
            float frontier_phi_80_75_ladder;
            if (_1924 < 0.0)
            {
                frontier_phi_80_75_ladder = abs((_1914 + 1.0) / _1924);
            }
            else
            {
                frontier_phi_80_75_ladder = 5000.0;
            }
            _2500 = frontier_phi_80_75_ladder;
        }
        float _2845;
        if (_1927 > 0.0)
        {
            _2845 = abs((1.0 - _1918) / _1927);
        }
        else
        {
            float frontier_phi_92_87_ladder;
            if (_1927 < 0.0)
            {
                frontier_phi_92_87_ladder = abs((_1918 + 1.0) / _1927);
            }
            else
            {
                frontier_phi_92_87_ladder = 5000.0;
            }
            _2845 = frontier_phi_92_87_ladder;
        }
        float _2847 = isnan(_2500) ? _2034 : (isnan(_2034) ? _2500 : min(_2034, _2500));
        float _2848 = isnan(_2845) ? _2847 : (isnan(_2847) ? _2845 : min(_2847, _2845));
        float _2852 = (_2848 * _1921) + _1910;
        float _2853 = (_2848 * _1924) + _1914;
        float _2854 = (_2848 * _1927) + _1918;
        float _2855 = _2848 * 9.9999997473787516355514526367188e-05;
        float _2856 = (-1.0) - _2855;
        float _2858 = _2855 + 1.0;
        float frontier_phi_65_92_ladder;
        float frontier_phi_65_92_ladder_1;
        float frontier_phi_65_92_ladder_2;
        if ((_2854 > _2858) || ((_2854 < _2856) || ((_2853 > _2858) || ((_2853 < _2856) || ((_2852 < _2856) || (_2852 > _2858))))))
        {
            frontier_phi_65_92_ladder = 0.0;
            frontier_phi_65_92_ladder_1 = 0.0;
            frontier_phi_65_92_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2991 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2854, cbModelParam._m0[17u].z, fma(_2853, cbModelParam._m0[17u].y, _2852 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2854, cbModelParam._m0[18u].z, fma(_2853, cbModelParam._m0[18u].y, _2852 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2854, cbModelParam._m0[19u].z, fma(_2853, cbModelParam._m0[19u].y, _2852 * cbModelParam._m0[19u].x))), _1858);
            frontier_phi_65_92_ladder = _2991.z * cbModelParam._m0[1u].z;
            frontier_phi_65_92_ladder_1 = _2991.y * cbModelParam._m0[1u].z;
            frontier_phi_65_92_ladder_2 = _2991.x * cbModelParam._m0[1u].z;
        }
        _1946 = frontier_phi_65_92_ladder_2;
        _1948 = frontier_phi_65_92_ladder_1;
        _1950 = frontier_phi_65_92_ladder;
    }
    else
    {
        vec4 _1930 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_928, _929, _930), _1858);
        _1946 = _1930.x * cbModelParam._m0[1u].z;
        _1948 = _1930.y * cbModelParam._m0[1u].z;
        _1950 = _1930.z * cbModelParam._m0[1u].z;
    }
    float _1962 = ((((1.0 - _949) * ((_936 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_949 * _936)) * _920;
    float _1963 = _1962 * ((cbModelParam._m0[1u].w * (_1946 - _1849)) + _1849);
    float _1964 = _1962 * ((cbModelParam._m0[1u].w * (_1948 - _1851)) + _1851);
    float _1965 = _1962 * ((cbModelParam._m0[1u].w * (_1950 - _1853)) + _1853);
    float _1968 = fma(_1965, cbSceneParam._m0[89u].z, fma(_1964, cbSceneParam._m0[89u].y, _1963 * cbSceneParam._m0[89u].x));
    float _1971 = fma(_1965, cbSceneParam._m0[90u].z, fma(_1964, cbSceneParam._m0[90u].y, _1963 * cbSceneParam._m0[90u].x));
    float _1974 = fma(_1965, cbSceneParam._m0[91u].z, fma(_1964, cbSceneParam._m0[91u].y, _1963 * cbSceneParam._m0[91u].x));
    float _2008 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2012 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2016 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2020 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2021 = _2008 / _2020;
    float _2022 = _2012 / _2020;
    float _2023 = _2016 / _2020;
    float _2170;
    float _2171;
    float _2172;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2050 = ((uint(_2023 > cbSceneParam._m0[59u].y) + uint(_2023 > cbSceneParam._m0[59u].x)) + uint(_2023 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2051 = _2050 + 43u;
        uint _2059 = _2050 + 44u;
        uint _2067 = _2050 + 45u;
        uint _2075 = _2050 + 46u;
        float _2086 = fma(_2020, cbSceneParam._m0[_2051].w, fma(_2016, cbSceneParam._m0[_2051].z, fma(_2012, cbSceneParam._m0[_2051].y, _2008 * cbSceneParam._m0[_2051].x)));
        float _2090 = fma(_2020, cbSceneParam._m0[_2059].w, fma(_2016, cbSceneParam._m0[_2059].z, fma(_2012, cbSceneParam._m0[_2059].y, _2008 * cbSceneParam._m0[_2059].x)));
        float _2098 = fma(_2020, cbSceneParam._m0[_2075].w, fma(_2016, cbSceneParam._m0[_2075].z, fma(_2012, cbSceneParam._m0[_2075].y, _2008 * cbSceneParam._m0[_2075].x)));
        float _2103 = cbSceneParam._m0[33u].z * _2098;
        float _2105 = cbSceneParam._m0[33u].w * _2098;
        float _2108 = fma(_2020, cbSceneParam._m0[_2067].w, fma(_2016, cbSceneParam._m0[_2067].z, fma(_2012, cbSceneParam._m0[_2067].y, _2008 * cbSceneParam._m0[_2067].x))) / _2098;
        float _2156 = (cbSceneParam._m0[33u].x - sqrt(((_2022 * _2022) + (_2021 * _2021)) + (_2023 * _2023))) * cbSceneParam._m0[33u].y;
        float _4302 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
        float _2163 = (isnan(1.0) ? _4302 : (isnan(_4302) ? 1.0 : min(_4302, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2103 + _2086) / _2098, (_2105 + _2090) / _2098), _2108), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2105 + _2086) / _2098, (_2090 - _2103) / _2098), _2108), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2086 - _2103) / _2098, (_2090 - _2105) / _2098), _2108), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2086 - _2105) / _2098, (_2103 + _2090) / _2098), _2108), 0.0)).x), vec4(0.25)));
        _2170 = 1.0 - (_2163 * cbSceneParam._m0[34u].x);
        _2171 = 1.0 - (_2163 * cbSceneParam._m0[34u].y);
        _2172 = 1.0 - (_2163 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2170 = 1.0;
        _2171 = 1.0;
        _2172 = 1.0;
    }
    float _2236;
    float _2238;
    float _2240;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2224 = fma(_2020, cbSceneParam._m0[63u].w, fma(_2016, cbSceneParam._m0[63u].z, fma(_2012, cbSceneParam._m0[63u].y, _2008 * cbSceneParam._m0[63u].x)));
        float _2225 = fma(_2020, cbSceneParam._m0[60u].w, fma(_2016, cbSceneParam._m0[60u].z, fma(_2012, cbSceneParam._m0[60u].y, _2008 * cbSceneParam._m0[60u].x))) / _2224;
        float _2226 = fma(_2020, cbSceneParam._m0[61u].w, fma(_2016, cbSceneParam._m0[61u].z, fma(_2012, cbSceneParam._m0[61u].y, _2008 * cbSceneParam._m0[61u].x))) / _2224;
        float frontier_phi_77_76_ladder;
        float frontier_phi_77_76_ladder_1;
        float frontier_phi_77_76_ladder_2;
        if ((((_2225 >= cbSceneParam._m0[64u].x) && (_2226 >= cbSceneParam._m0[64u].y)) && (_2225 <= cbSceneParam._m0[64u].z)) && (_2226 <= cbSceneParam._m0[64u].w))
        {
            float _2513 = fma(_2020, cbSceneParam._m0[62u].w, fma(_2016, cbSceneParam._m0[62u].z, fma(_2012, cbSceneParam._m0[62u].y, _2008 * cbSceneParam._m0[62u].x))) / _2224;
            float _2517 = isnan(cbSceneParam._m0[41u].w) ? _2513 : (isnan(_2513) ? cbSceneParam._m0[41u].w : max(_2513, cbSceneParam._m0[41u].w));
            float _2560 = (cbSceneParam._m0[33u].x - sqrt(((_2022 * _2022) + (_2021 * _2021)) + (_2023 * _2023))) * cbSceneParam._m0[33u].y;
            float _4318 = isnan(0.0) ? _2560 : (isnan(_2560) ? 0.0 : max(_2560, 0.0));
            float _2567 = (isnan(1.0) ? _4318 : (isnan(_4318) ? 1.0 : min(_4318, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2225, cbSceneParam._m0[33u].w + _2226), _2517), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2225, _2226 - cbSceneParam._m0[33u].z), _2517), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2225 - cbSceneParam._m0[33u].z, _2226 - cbSceneParam._m0[33u].w), _2517), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2225 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2226), _2517), 0.0)).x), vec4(0.25)));
            float _2571 = 1.0 - (_2567 * cbSceneParam._m0[34u].x);
            float _2572 = 1.0 - (_2567 * cbSceneParam._m0[34u].y);
            float _2573 = 1.0 - (_2567 * cbSceneParam._m0[34u].z);
            frontier_phi_77_76_ladder = isnan(_2573) ? _2172 : (isnan(_2172) ? _2573 : min(_2172, _2573));
            frontier_phi_77_76_ladder_1 = isnan(_2572) ? _2171 : (isnan(_2171) ? _2572 : min(_2171, _2572));
            frontier_phi_77_76_ladder_2 = isnan(_2571) ? _2170 : (isnan(_2170) ? _2571 : min(_2170, _2571));
        }
        else
        {
            frontier_phi_77_76_ladder = _2172;
            frontier_phi_77_76_ladder_1 = _2171;
            frontier_phi_77_76_ladder_2 = _2170;
        }
        _2236 = frontier_phi_77_76_ladder_2;
        _2238 = frontier_phi_77_76_ladder_1;
        _2240 = frontier_phi_77_76_ladder;
    }
    else
    {
        _2236 = _2170;
        _2238 = _2171;
        _2240 = _2172;
    }
    uvec4 _2245 = floatBitsToUint(cbInstanceData._m0[_894 + 5u]);
    uint _2247 = _2245.x * 14u;
    uint _2248 = _2247 + 13u;
    float _2253 = _920 + (-1.0);
    float _2256 = (cbLight._m0[_2248].x * _2253) + 1.0;
    float _2257 = (cbLight._m0[_2248].y * _2253) + 1.0;
    uint _2258 = _2247 + 5u;
    float _2264 = isnan(1.0) ? _2257 : (isnan(_2257) ? 1.0 : min(_2257, 1.0));
    uint _2268 = _2247 + 4u;
    float _2277 = isnan(1.0) ? _2256 : (isnan(_2256) ? 1.0 : min(_2256, 1.0));
    uint _2281 = _2247 | 1u;
    float _2292 = dot(vec3(cbLight._m0[_2247].xyz), vec3(_807, _808, _809));
    float _2295 = dot(vec3(cbLight._m0[_2281].xyz), vec3(_807, _808, _809));
    float _4354 = isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0));
    float _4365 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
    float _2300 = (isnan(1.0) ? _4354 : (isnan(_4354) ? 1.0 : min(_4354, 1.0))) * 0.3183098733425140380859375;
    float _2302 = (isnan(1.0) ? _4365 : (isnan(_4365) ? 1.0 : min(_4365, 1.0))) * 0.3183098733425140380859375;
    float _2309 = ((cbLight._m0[_2258].x * _2264) * _2302) + (((cbLight._m0[_2268].x * _2236) * _2277) * _2300);
    float _2310 = ((_2264 * cbLight._m0[_2258].y) * _2302) + (((cbLight._m0[_2268].y * _2238) * _2277) * _2300);
    float _2311 = ((_2264 * cbLight._m0[_2258].z) * _2302) + (((cbLight._m0[_2268].z * _2240) * _2277) * _2300);
    uint _2313 = _2247 + 8u;
    float _2326 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2247].w)) * _810) * 0.949999988079071044921875);
    float _2327 = _2326 * _2326;
    float _2328 = cbLight._m0[_2247].x + _834;
    float _2329 = cbLight._m0[_2247].y + _835;
    float _2330 = cbLight._m0[_2247].z + _836;
    float _2334 = inversesqrt(dot(vec3(_2328, _2329, _2330), vec3(_2328, _2329, _2330)));
    float _2335 = _2334 * _2328;
    float _2336 = _2334 * _2329;
    float _2337 = _2334 * _2330;
    float _2338 = dot(vec3(_807, _808, _809), vec3(cbLight._m0[_2247].xyz));
    float _4376 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2341 = isnan(1.0) ? _4376 : (isnan(_4376) ? 1.0 : min(_4376, 1.0));
    float _4387 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _2342 = isnan(1.0) ? _4387 : (isnan(_4387) ? 1.0 : min(_4387, 1.0));
    float _2343 = dot(vec3(_807, _808, _809), vec3(_2335, _2336, _2337));
    float _4398 = isnan(0.0) ? _2343 : (isnan(_2343) ? 0.0 : max(_2343, 0.0));
    float _2346 = isnan(1.0) ? _4398 : (isnan(_4398) ? 1.0 : min(_4398, 1.0));
    float _2347 = dot(vec3(cbLight._m0[_2247].xyz), vec3(_2335, _2336, _2337));
    float _4409 = isnan(0.0) ? _2347 : (isnan(_2347) ? 0.0 : max(_2347, 0.0));
    float _2351 = _2327 * _2327;
    float _2355 = ((_2346 * _2346) * (_2351 + (-1.0))) + 1.0;
    float _2366 = (exp2(log2(1.0 - (isnan(1.0) ? _4409 : (isnan(_4409) ? 1.0 : min(_4409, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2367 = 1.0 - _2327;
    float _2378 = (0.5 / (((_2342 * ((_2341 * _2367) + _2327)) + 9.9999999392252902907785028219223e-09) + (((_2342 * _2367) + _2327) * _2341))) * _2341;
    float _4420 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
    float _2380 = (isnan(1.0) ? _4420 : (isnan(_4420) ? 1.0 : min(_4420, 1.0))) * (_2351 / ((_2355 * _2355) * 3.141590118408203125));
    uint _2394 = _2247 + 9u;
    float _2405 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2281].w)) * _810) * 0.949999988079071044921875);
    float _2406 = _2405 * _2405;
    float _2407 = cbLight._m0[_2281].x + _834;
    float _2408 = cbLight._m0[_2281].y + _835;
    float _2409 = cbLight._m0[_2281].z + _836;
    float _2413 = inversesqrt(dot(vec3(_2407, _2408, _2409), vec3(_2407, _2408, _2409)));
    float _2414 = _2413 * _2407;
    float _2415 = _2413 * _2408;
    float _2416 = _2413 * _2409;
    float _2417 = dot(vec3(_807, _808, _809), vec3(cbLight._m0[_2281].xyz));
    float _4431 = isnan(0.0) ? _2417 : (isnan(_2417) ? 0.0 : max(_2417, 0.0));
    float _2420 = isnan(1.0) ? _4431 : (isnan(_4431) ? 1.0 : min(_4431, 1.0));
    float _2421 = dot(vec3(_807, _808, _809), vec3(_2414, _2415, _2416));
    float _4442 = isnan(0.0) ? _2421 : (isnan(_2421) ? 0.0 : max(_2421, 0.0));
    float _2424 = isnan(1.0) ? _4442 : (isnan(_4442) ? 1.0 : min(_4442, 1.0));
    float _2425 = dot(vec3(cbLight._m0[_2281].xyz), vec3(_2414, _2415, _2416));
    float _4453 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
    float _2429 = _2406 * _2406;
    float _2433 = ((_2424 * _2424) * (_2429 + (-1.0))) + 1.0;
    float _2442 = (exp2(log2(1.0 - (isnan(1.0) ? _4453 : (isnan(_4453) ? 1.0 : min(_4453, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2443 = 1.0 - _2406;
    float _2453 = (0.5 / (((_2342 * ((_2420 * _2443) + _2406)) + 9.9999999392252902907785028219223e-09) + (((_2342 * _2443) + _2406) * _2420))) * _2420;
    float _4464 = isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0));
    float _2455 = (isnan(1.0) ? _4464 : (isnan(_4464) ? 1.0 : min(_4464, 1.0))) * (_2429 / ((_2433 * _2433) * 3.141590118408203125));
    float _2465 = (((_2442 * cbLight._m0[_2394].x) * _2455) * _2264) + ((((cbLight._m0[_2313].x * _2236) * _2366) * _2380) * _2277);
    float _2466 = (((_2442 * cbLight._m0[_2394].y) * _2455) * _2264) + ((((cbLight._m0[_2313].y * _2238) * _2366) * _2380) * _2277);
    float _2467 = (((_2442 * cbLight._m0[_2394].z) * _2455) * _2264) + ((((cbLight._m0[_2313].z * _2240) * _2366) * _2380) * _2277);
    float _2630;
    float _2632;
    float _2634;
    float _2636;
    float _2638;
    float _2640;
    if (_2245.y == 0u)
    {
        uvec4 _2585 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2586 = _2585.x;
        uint _2597 = uint((float(_2585.y) * floor(float(uint(cbSceneParam._m0[85u].y * _856) / _2586))) + floor(float(uint(cbSceneParam._m0[85u].x * _855) / _2586)));
        float _2607 = (log2(_2023 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2608 = isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0));
        uint _2611 = uint(isnan(14.0) ? _2608 : (isnan(_2608) ? 14.0 : min(_2608, 14.0)));
        uvec4 _2616 = texelFetch(g_lightClusterGridBuffer, int(((_2611 << 2u) + (_2597 << 6u)) >> 2u));
        uint _2617 = _2616.x;
        uint _2618 = _2585.z;
        float _2725;
        float _2727;
        float _2729;
        float _2731;
        float _2733;
        float _2735;
        if (((((1u << ((_2618 >> 4u) & 15u)) + 4294967295u) & _2617) == 0u) || ((_2618 & 240u) == 0u))
        {
            _2725 = 0.0;
            _2727 = 0.0;
            _2729 = 0.0;
            _2731 = 0.0;
            _2733 = 0.0;
            _2735 = 0.0;
        }
        else
        {
            float _2726;
            float _2728;
            float _2730;
            float _2732;
            float _2734;
            float _2736;
            float _2903 = 0.0;
            float _2904 = 0.0;
            float _2905 = 0.0;
            float _2906 = 0.0;
            float _2907 = 0.0;
            float _2908 = 0.0;
            uint _2909 = 0u;
            uint _2918;
            bool _2919;
            for (;;)
            {
                _2918 = texelFetch(g_lightClassification, int((((_2611 << 5u) + (_2597 << 9u)) + (_2909 << 2u)) >> 2u)).x;
                _2919 = _2918 == 0u;
                float frontier_phi_103_pred;
                float frontier_phi_103_pred_1;
                float frontier_phi_103_pred_2;
                float frontier_phi_103_pred_3;
                float frontier_phi_103_pred_4;
                float frontier_phi_103_pred_5;
                if (_2919)
                {
                    frontier_phi_103_pred = _2904;
                    frontier_phi_103_pred_1 = _2908;
                    frontier_phi_103_pred_2 = _2907;
                    frontier_phi_103_pred_3 = _2906;
                    frontier_phi_103_pred_4 = _2905;
                    frontier_phi_103_pred_5 = _2903;
                }
                else
                {
                    float _3069;
                    float _3070;
                    float _3071;
                    float _3072;
                    float _3073;
                    float _3074;
                    uint _3075;
                    _3069 = _2903;
                    _3070 = _2904;
                    _3071 = _2905;
                    _3072 = _2906;
                    _3073 = _2907;
                    _3074 = _2908;
                    _3075 = _2918;
                    float _2996;
                    float _2997;
                    float _2998;
                    float _2999;
                    float _3000;
                    float _3001;
                    for (;;)
                    {
                        uint _3079 = uint(findLSB(_3075)) + (_2909 << 5u);
                        uint _3076 = (_3075 + 4294967295u) & _3075;
                        uint _3081 = _3079 * 48u;
                        vec4 _3095 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3081)).x, texelFetch(g_PointLightRenderingBuffer, int(_3081 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3081 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3081 + 3u)).x));
                        uint _3101 = (_3079 * 48u) + 4u;
                        vec4 _3114 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3101)).x, texelFetch(g_PointLightRenderingBuffer, int(_3101 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3101 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3101 + 3u)).x));
                        uint _3120 = (_3079 * 48u) + 8u;
                        vec3 _3131 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3120)).x, texelFetch(g_PointLightRenderingBuffer, int(_3120 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3120 + 2u)).x));
                        float _3135 = _3095.x - _2021;
                        float _3136 = _3095.y - _2022;
                        float _3137 = _3095.z - _2023;
                        float _3138 = dot(vec3(_3135, _3136, _3137), vec3(_3135, _3136, _3137));
                        float _3141 = inversesqrt(_3138);
                        float _3142 = _3141 * _3135;
                        float _3143 = _3141 * _3136;
                        float _3144 = _3141 * _3137;
                        float _3145 = dot(vec3(_875, _878, _881), vec3(_3142, _3143, _3144));
                        float _3150 = 1.0 - (_3138 * _3095.w);
                        float _4485 = isnan(0.0) ? _3150 : (isnan(_3150) ? 0.0 : max(_3150, 0.0));
                        float _3151 = isnan(1.0) ? _4485 : (isnan(_4485) ? 1.0 : min(_4485, 1.0));
                        float _3152 = sqrt(_3138) * _3114.w;
                        float _3155 = 1.39999997615814208984375 / (_3152 + 1.39999997615814208984375);
                        float _3156 = _3155 * _3155;
                        float _3159 = ((1.0 - _3156) * _3145) + _3156;
                        float _3162 = _3152 * _3152;
                        float _3166 = ((isnan(0.0) ? _3159 : (isnan(_3159) ? 0.0 : max(_3159, 0.0))) * _3151) / ((_3162 * 0.699999988079071044921875) + 1.0);
                        float _3170 = (-0.0) - _2021;
                        float _3171 = (-0.0) - _2022;
                        float _3172 = (-0.0) - _2023;
                        float _3176 = inversesqrt(dot(vec3(_3170, _3171, _3172), vec3(_3170, _3171, _3172)));
                        float _3177 = _3176 * _3170;
                        float _3178 = _3176 * _3171;
                        float _3179 = _3176 * _3172;
                        float _3186 = exp2(log2(1.0 / ((_3162 * 3.5) + 5.0)) * 0.25);
                        float _3187 = 1.0 - _936;
                        float _3194 = sqrt(1.0 - ((1.0 - (_3187 * _3187)) * (1.0 - (_3186 * _3186))));
                        float _3195 = _3194 * _3194;
                        float _3196 = _3195 * _3195;
                        float _3197 = _3177 + _3142;
                        float _3198 = _3178 + _3143;
                        float _3199 = _3179 + _3144;
                        float _3203 = inversesqrt(dot(vec3(_3197, _3198, _3199), vec3(_3197, _3198, _3199)));
                        float _3207 = dot(vec3(_875, _878, _881), vec3(_3177, _3178, _3179));
                        float _4501 = isnan(0.0) ? _3207 : (isnan(_3207) ? 0.0 : max(_3207, 0.0));
                        float _3210 = isnan(1.0) ? _4501 : (isnan(_4501) ? 1.0 : min(_4501, 1.0));
                        float _3211 = dot(vec3(_875, _878, _881), vec3(_3203 * _3197, _3203 * _3198, _3203 * _3199));
                        float _4512 = isnan(0.0) ? _3211 : (isnan(_3211) ? 0.0 : max(_3211, 0.0));
                        float _3214 = isnan(1.0) ? _4512 : (isnan(_4512) ? 1.0 : min(_4512, 1.0));
                        float _3218 = ((_3214 * _3214) * (_3196 + (-1.0))) + 1.0;
                        float _3219 = _3155 * _3195;
                        float _3220 = _3219 * _3219;
                        float _3223 = ((1.0 - _3220) * _3145) + _3220;
                        float _4523 = isnan(0.0) ? _3223 : (isnan(_3223) ? 0.0 : max(_3223, 0.0));
                        float _3224 = isnan(1.0) ? _4523 : (isnan(_4523) ? 1.0 : min(_4523, 1.0));
                        float _3225 = 1.0 - _3195;
                        float _3235 = (0.5 / (((_3224 * ((_3210 * _3225) + _3195)) + 9.9999999392252902907785028219223e-09) + (((_3224 * _3225) + _3195) * _3210))) * _3224;
                        float _4534 = isnan(0.0) ? _3235 : (isnan(_3235) ? 0.0 : max(_3235, 0.0));
                        float _3246 = (((_3196 * 3.1415927410125732421875) * (isnan(1.0) ? _4534 : (isnan(_4534) ? 1.0 : min(_4534, 1.0)))) / ((_3218 * _3218) * ((_3162 * 2.1991131305694580078125) + 3.141590118408203125))) * _3151;
                        _2999 = (_3166 * _3114.x) + _3072;
                        _3000 = (_3166 * _3114.y) + _3073;
                        _3001 = (_3166 * _3114.z) + _3074;
                        _2996 = (_3246 * _3131.x) + _3069;
                        _2997 = (_3246 * _3131.y) + _3070;
                        _2998 = (_3246 * _3131.z) + _3071;
                        if (_3076 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3069 = _2996;
                            _3070 = _2997;
                            _3071 = _2998;
                            _3072 = _2999;
                            _3073 = _3000;
                            _3074 = _3001;
                            _3075 = _3076;
                        }
                    }
                    frontier_phi_103_pred = _2997;
                    frontier_phi_103_pred_1 = _3001;
                    frontier_phi_103_pred_2 = _3000;
                    frontier_phi_103_pred_3 = _2999;
                    frontier_phi_103_pred_4 = _2998;
                    frontier_phi_103_pred_5 = _2996;
                }
                _2728 = frontier_phi_103_pred;
                _2736 = frontier_phi_103_pred_1;
                _2734 = frontier_phi_103_pred_2;
                _2732 = frontier_phi_103_pred_3;
                _2730 = frontier_phi_103_pred_4;
                _2726 = frontier_phi_103_pred_5;
                uint _2910 = _2909 + 1u;
                if (_2910 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2903 = _2726;
                    _2904 = _2728;
                    _2905 = _2730;
                    _2906 = _2732;
                    _2907 = _2734;
                    _2908 = _2736;
                    _2909 = _2910;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2725 = _2726;
            _2727 = _2728;
            _2729 = _2730;
            _2731 = _2732;
            _2733 = _2734;
            _2735 = _2736;
        }
        uvec4 _2739 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2740 = _2739.z;
        uint _2742 = (_2740 >> 8u) & 15u;
        float _2871;
        float _2873;
        float _2875;
        float _2877;
        float _2879;
        float _2881;
        if (((4294967295u << _2742) & _2617) == 0u)
        {
            _2871 = _2725;
            _2873 = _2727;
            _2875 = _2729;
            _2877 = _2731;
            _2879 = _2733;
            _2881 = _2735;
        }
        else
        {
            float _2896 = inversesqrt(dot(vec3(_2021, _2022, _2023), vec3(_2021, _2022, _2023)));
            float _2897 = _2896 * _2021;
            float _2898 = _2896 * _2022;
            float _2899 = _2896 * _2023;
            float frontier_phi_94_95_ladder;
            float frontier_phi_94_95_ladder_1;
            float frontier_phi_94_95_ladder_2;
            float frontier_phi_94_95_ladder_3;
            float frontier_phi_94_95_ladder_4;
            float frontier_phi_94_95_ladder_5;
            if (_2742 < ((_2740 >> 12u) & 15u))
            {
                float _2872;
                float _2874;
                float _2876;
                float _2878;
                float _2880;
                float _2882;
                float _3052 = _2725;
                float _3053 = _2727;
                float _3054 = _2729;
                float _3055 = _2731;
                float _3056 = _2733;
                float _3057 = _2735;
                uint _3058 = _2742;
                uint _3067;
                bool _3068;
                for (;;)
                {
                    _3067 = texelFetch(g_lightClassification, int((((_2611 << 5u) + (_2597 << 9u)) + (_3058 << 2u)) >> 2u)).x;
                    _3068 = _3067 == 0u;
                    float frontier_phi_114_pred;
                    float frontier_phi_114_pred_1;
                    float frontier_phi_114_pred_2;
                    float frontier_phi_114_pred_3;
                    float frontier_phi_114_pred_4;
                    float frontier_phi_114_pred_5;
                    if (_3068)
                    {
                        frontier_phi_114_pred = _3057;
                        frontier_phi_114_pred_1 = _3056;
                        frontier_phi_114_pred_2 = _3055;
                        frontier_phi_114_pred_3 = _3054;
                        frontier_phi_114_pred_4 = _3053;
                        frontier_phi_114_pred_5 = _3052;
                    }
                    else
                    {
                        float _3260;
                        float _3261;
                        float _3262;
                        float _3263;
                        float _3264;
                        float _3265;
                        float _3553;
                        float _3554;
                        float _3555;
                        float _3556;
                        float _3557;
                        float _3558;
                        float _3273 = _3052;
                        float _3274 = _3053;
                        float _3275 = _3054;
                        float _3276 = _3055;
                        float _3277 = _3056;
                        float _3278 = _3057;
                        uint _3279 = _3067;
                        uint _3280;
                        vec4 _3305;
                        float _3306;
                        vec4 _3321;
                        vec3 _3333;
                        vec4 _3348;
                        vec4 _3363;
                        float _3409;
                        bool _3410;
                        for (;;)
                        {
                            uint _3290 = ((_3058 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3279));
                            _3280 = (_3279 + 4294967295u) & _3279;
                            uint _3292 = _3290 * 40u;
                            _3305 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3292)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3292 + 3u)).x));
                            _3306 = _3305.w;
                            uint _3308 = (_3290 * 40u) + 4u;
                            _3321 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3308)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3308 + 3u)).x));
                            uint _3323 = (_3290 * 40u) + 8u;
                            _3333 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3323)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3323 + 2u)).x));
                            uint _3335 = (_3290 * 40u) + 16u;
                            _3348 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3335)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3335 + 3u)).x));
                            uint _3350 = (_3290 * 40u) + 20u;
                            _3363 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3350)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3350 + 3u)).x));
                            uint _3365 = (_3290 * 40u) + 24u;
                            vec4 _3378 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3365)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3365 + 3u)).x));
                            uint _3384 = (_3290 * 40u) + 28u;
                            vec4 _3397 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3384)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3384 + 3u)).x));
                            _3409 = fma(_2023, _3397.z, fma(_2022, _3397.y, _3397.x * _2021)) + _3397.w;
                            _3410 = !((fma(_2023, _3378.z, fma(_2022, _3378.y, _3378.x * _2021)) + _3378.w) <= 0.0);
                            float frontier_phi_120_pred;
                            float frontier_phi_120_pred_1;
                            float frontier_phi_120_pred_2;
                            float frontier_phi_120_pred_3;
                            float frontier_phi_120_pred_4;
                            float frontier_phi_120_pred_5;
                            if (_3410)
                            {
                                float _3437 = _3305.x - _2021;
                                float _3438 = _3305.y - _2022;
                                float _3439 = _3305.z - _2023;
                                float _3440 = dot(vec3(_3437, _3438, _3439), vec3(_3437, _3438, _3439));
                                float _3443 = inversesqrt(_3440);
                                float _3444 = _3443 * _3437;
                                float _3445 = _3443 * _3438;
                                float _3446 = _3443 * _3439;
                                float _3450 = 1.0 - (_3440 / (_3306 * _3306));
                                float _4545 = isnan(0.0) ? _3450 : (isnan(_3450) ? 0.0 : max(_3450, 0.0));
                                float _3451 = isnan(1.0) ? _4545 : (isnan(_4545) ? 1.0 : min(_4545, 1.0));
                                float _3455 = sqrt(_3440) * _3321.w;
                                float _3457 = 1.39999997615814208984375 / (_3455 + 1.39999997615814208984375);
                                float _3458 = _3457 * _3457;
                                float _3461 = ((1.0 - _3458) * dot(vec3(_3444, _3445, _3446), vec3(_875, _878, _881))) + _3458;
                                float _3464 = _3455 * _3455;
                                float _3468 = (fma(_2023, _3348.z, fma(_2022, _3348.y, _3348.x * _2021)) + _3348.w) / _3409;
                                float _3469 = (fma(_2023, _3363.z, fma(_2022, _3363.y, _3363.x * _2021)) + _3363.w) / _3409;
                                float _3473 = 1.0 - dot(vec2(_3468, _3469), vec2(_3468, _3469));
                                float _4561 = isnan(0.0) ? _3473 : (isnan(_3473) ? 0.0 : max(_3473, 0.0));
                                float _3474 = isnan(1.0) ? _4561 : (isnan(_4561) ? 1.0 : min(_4561, 1.0));
                                float _3475 = _3474 * (((isnan(0.0) ? _3461 : (isnan(_3461) ? 0.0 : max(_3461, 0.0))) * _3451) / ((_3464 * 0.699999988079071044921875) + 1.0));
                                float _3487 = exp2(log2(1.0 / ((_3464 * 3.5) + 5.0)) * 0.25);
                                float _3488 = 1.0 - _936;
                                float _3495 = sqrt(1.0 - ((1.0 - (_3488 * _3488)) * (1.0 - (_3487 * _3487))));
                                float _3496 = _3495 * _3495;
                                float _3497 = _3496 * _3496;
                                float _3498 = _3444 - _2897;
                                float _3499 = _3445 - _2898;
                                float _3500 = _3446 - _2899;
                                float _3504 = inversesqrt(dot(vec3(_3498, _3499, _3500), vec3(_3498, _3499, _3500)));
                                float _3508 = dot(vec3(_875, _878, _881), vec3((-0.0) - _2897, (-0.0) - _2898, (-0.0) - _2899));
                                float _4572 = isnan(0.0) ? _3508 : (isnan(_3508) ? 0.0 : max(_3508, 0.0));
                                float _3511 = isnan(1.0) ? _4572 : (isnan(_4572) ? 1.0 : min(_4572, 1.0));
                                float _3512 = dot(vec3(_875, _878, _881), vec3(_3504 * _3498, _3504 * _3499, _3504 * _3500));
                                float _4583 = isnan(0.0) ? _3512 : (isnan(_3512) ? 0.0 : max(_3512, 0.0));
                                float _3515 = isnan(1.0) ? _4583 : (isnan(_4583) ? 1.0 : min(_4583, 1.0));
                                float _3519 = ((_3515 * _3515) * (_3497 + (-1.0))) + 1.0;
                                float _3520 = _3457 * _3496;
                                float _3521 = _3520 * _3520;
                                float _3527 = ((1.0 - _3521) * dot(vec3(_875, _878, _881), vec3(_3444, _3445, _3446))) + _3521;
                                float _4594 = isnan(0.0) ? _3527 : (isnan(_3527) ? 0.0 : max(_3527, 0.0));
                                float _3528 = isnan(1.0) ? _4594 : (isnan(_4594) ? 1.0 : min(_4594, 1.0));
                                float _3529 = 1.0 - _3496;
                                float _3539 = (0.5 / (((_3528 * ((_3511 * _3529) + _3496)) + 9.9999999392252902907785028219223e-09) + (((_3528 * _3529) + _3496) * _3511))) * _3528;
                                float _4605 = isnan(0.0) ? _3539 : (isnan(_3539) ? 0.0 : max(_3539, 0.0));
                                float _3549 = (_3474 * _3451) * (((_3497 * 3.1415927410125732421875) * (isnan(1.0) ? _4605 : (isnan(_4605) ? 1.0 : min(_4605, 1.0)))) / ((_3519 * _3519) * ((_3464 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_120_pred = _3475 * _3321.z;
                                frontier_phi_120_pred_1 = _3475 * _3321.y;
                                frontier_phi_120_pred_2 = _3475 * _3321.x;
                                frontier_phi_120_pred_3 = _3549 * _3333.z;
                                frontier_phi_120_pred_4 = _3549 * _3333.y;
                                frontier_phi_120_pred_5 = _3549 * _3333.x;
                            }
                            else
                            {
                                frontier_phi_120_pred = 0.0;
                                frontier_phi_120_pred_1 = 0.0;
                                frontier_phi_120_pred_2 = 0.0;
                                frontier_phi_120_pred_3 = 0.0;
                                frontier_phi_120_pred_4 = 0.0;
                                frontier_phi_120_pred_5 = 0.0;
                            }
                            _3558 = frontier_phi_120_pred;
                            _3557 = frontier_phi_120_pred_1;
                            _3556 = frontier_phi_120_pred_2;
                            _3555 = frontier_phi_120_pred_3;
                            _3554 = frontier_phi_120_pred_4;
                            _3553 = frontier_phi_120_pred_5;
                            _3263 = _3556 + _3276;
                            _3264 = _3557 + _3277;
                            _3265 = _3558 + _3278;
                            _3260 = _3553 + _3273;
                            _3261 = _3554 + _3274;
                            _3262 = _3555 + _3275;
                            if (_3280 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3273 = _3260;
                                _3274 = _3261;
                                _3275 = _3262;
                                _3276 = _3263;
                                _3277 = _3264;
                                _3278 = _3265;
                                _3279 = _3280;
                                continue;
                            }
                        }
                        frontier_phi_114_pred = _3265;
                        frontier_phi_114_pred_1 = _3264;
                        frontier_phi_114_pred_2 = _3263;
                        frontier_phi_114_pred_3 = _3262;
                        frontier_phi_114_pred_4 = _3261;
                        frontier_phi_114_pred_5 = _3260;
                    }
                    _2882 = frontier_phi_114_pred;
                    _2880 = frontier_phi_114_pred_1;
                    _2878 = frontier_phi_114_pred_2;
                    _2876 = frontier_phi_114_pred_3;
                    _2874 = frontier_phi_114_pred_4;
                    _2872 = frontier_phi_114_pred_5;
                    uint _3059 = _3058 + 1u;
                    if (_3059 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3052 = _2872;
                        _3053 = _2874;
                        _3054 = _2876;
                        _3055 = _2878;
                        _3056 = _2880;
                        _3057 = _2882;
                        _3058 = _3059;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_94_95_ladder = _2878;
                frontier_phi_94_95_ladder_1 = _2882;
                frontier_phi_94_95_ladder_2 = _2880;
                frontier_phi_94_95_ladder_3 = _2876;
                frontier_phi_94_95_ladder_4 = _2874;
                frontier_phi_94_95_ladder_5 = _2872;
            }
            else
            {
                frontier_phi_94_95_ladder = _2731;
                frontier_phi_94_95_ladder_1 = _2735;
                frontier_phi_94_95_ladder_2 = _2733;
                frontier_phi_94_95_ladder_3 = _2729;
                frontier_phi_94_95_ladder_4 = _2727;
                frontier_phi_94_95_ladder_5 = _2725;
            }
            _2871 = frontier_phi_94_95_ladder_5;
            _2873 = frontier_phi_94_95_ladder_4;
            _2875 = frontier_phi_94_95_ladder_3;
            _2877 = frontier_phi_94_95_ladder;
            _2879 = frontier_phi_94_95_ladder_2;
            _2881 = frontier_phi_94_95_ladder_1;
        }
        float _2886 = isnan(1.0) ? _920 : (isnan(_920) ? 1.0 : min(_920, 1.0));
        _2630 = (_2886 * _2877) + _2309;
        _2632 = (_2886 * _2879) + _2310;
        _2634 = (_2886 * _2881) + _2311;
        _2636 = ((_2871 * 0.039999999105930328369140625) * _2886) + _2465;
        _2638 = ((_2873 * 0.039999999105930328369140625) * _2886) + _2466;
        _2640 = ((_2875 * 0.039999999105930328369140625) * _2886) + _2467;
    }
    else
    {
        _2630 = _2309;
        _2632 = _2310;
        _2634 = _2311;
        _2636 = _2465;
        _2638 = _2466;
        _2640 = _2467;
    }
    float _4621 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _4632 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
    float _4643 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _2657 = ((isnan(1.0) ? _4621 : (isnan(_4621) ? 1.0 : min(_4621, 1.0))) * (_2630 + ((isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0))) * _920))) + ((_2636 + ((isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0))) * _1757)) * cbPerFrame._m0[3u].x);
    float _2658 = ((isnan(1.0) ? _4632 : (isnan(_4632) ? 1.0 : min(_4632, 1.0))) * (_2632 + ((isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0))) * _920))) + ((_2638 + ((isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0))) * _1757)) * cbPerFrame._m0[3u].x);
    float _2659 = ((isnan(1.0) ? _4643 : (isnan(_4643) ? 1.0 : min(_4643, 1.0))) * (_2634 + ((isnan(0.0) ? _1684 : (isnan(_1684) ? 0.0 : max(_1684, 0.0))) * _920))) + ((_2640 + ((isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0))) * _1757)) * cbPerFrame._m0[3u].x);
    float _2660 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
    float _2661 = isnan(0.0) ? _2658 : (isnan(_2658) ? 0.0 : max(_2658, 0.0));
    float _2662 = isnan(0.0) ? _2659 : (isnan(_2659) ? 0.0 : max(_2659, 0.0));
    uint _2663 = _894 + 6u;
    float _2671 = _855 / cbSceneParam._m0[86u].x;
    float _2672 = _856 / cbSceneParam._m0[86u].y;
    vec4 _2686 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2671, _2672, (log2((isnan(cbSceneParam._m0[77u].w) ? _829 : (isnan(_829) ? cbSceneParam._m0[77u].w : min(_829, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2688 = _2686.x;
    float _2689 = _2686.y;
    float _2690 = _2686.z;
    float _2691 = _2686.w;
    float _2787;
    float _2789;
    float _2791;
    float _2793;
    if (_829 > cbSceneParam._m0[78u].w)
    {
        float _2750 = isnan(_829) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _829 : min(cbSceneParam._m0[80u].w, _829));
        float _2751 = _2750 / _829;
        float _2762 = _2751 * _277;
        float _2763 = _278 * _2751;
        float _2764 = (-0.0) - _2763;
        float _2765 = _2751 * _279;
        float _2767 = (cbSceneParam._m0[77u].w * _2764) / _2750;
        float _2768 = _2767 + cbSceneParam._m0[79u].w;
        float _2769 = cbSceneParam._m0[79u].w - _2763;
        float _2775 = sqrt(((_2762 * _2762) + (_2763 * _2763)) + (_2765 * _2765));
        float _2778 = (1.0 - (cbSceneParam._m0[77u].w / _2750)) * _2775;
        float _2783 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2785 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3009;
        if (abs((_2764 - _2767) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3009 = ((((_2768 > 0.0) ? exp2(_2783 * _2768) : (2.0 - exp2(_2785 * _2768))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2778;
        }
        else
        {
            float _2932 = 1.0 / cbSceneParam._m0[80u].x;
            float _2933 = isnan(_2769) ? _2768 : (isnan(_2768) ? _2769 : max(_2768, _2769));
            float _2934 = isnan(_2769) ? _2768 : (isnan(_2768) ? _2769 : min(_2768, _2769));
            float _2943 = isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : min(_2933, 0.0));
            float _2944 = isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : min(_2934, 0.0));
            _3009 = ((abs(_2775 / _2764) * cbSceneParam._m0[80u].y) * ((((_2943 - _2944) * 2.0) - ((exp2(_2783 * (isnan(0.0) ? _2933 : (isnan(_2933) ? 0.0 : max(_2933, 0.0)))) - exp2(_2783 * (isnan(0.0) ? _2934 : (isnan(_2934) ? 0.0 : max(_2934, 0.0))))) * _2932)) - ((exp2(_2785 * _2943) - exp2(_2785 * _2944)) * _2932))) + (_2778 * cbSceneParam._m0[80u].z);
        }
        vec4 _3011 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2671, _2672, 1.0), 0.0);
        float _3020 = exp2((_3009 * (-1.44269502162933349609375)) * (1.0 - _3011.w));
        float _3021 = log2(_3020);
        float _3037 = log2(_2691);
        _2787 = (exp2(_3037 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3021 * cbSceneParam._m0[78u].x)) * _3011.x) / cbSceneParam._m0[78u].x)) + _2688;
        _2789 = (exp2(_3037 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3021 * cbSceneParam._m0[78u].y)) * _3011.y) / cbSceneParam._m0[78u].y)) + _2689;
        _2791 = (exp2(_3037 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3021 * cbSceneParam._m0[78u].z)) * _3011.z) / cbSceneParam._m0[78u].z)) + _2690;
        _2793 = _3020 * _2691;
    }
    else
    {
        _2787 = _2688;
        _2789 = _2689;
        _2791 = _2690;
        _2793 = _2691;
    }
    bool _3047;
    vec4 _2803;
    vec4 _2825;
    float _2827;
    float _2831;
    float _2832;
    float _2833;
    float _2834;
    bool _2844;
    for (;;)
    {
        _2803 = cbMatDynParam._m0[0u];
        float _2805 = roundEven(_2803.y);
        bool _2806 = _2805 == 3.0;
        float _2807 = log2(_2793);
        float _2814 = exp2(_2807 * cbSceneParam._m0[78u].x) * _2660;
        float _2815 = exp2(_2807 * cbSceneParam._m0[78u].y) * _2661;
        float _2816 = exp2(_2807 * cbSceneParam._m0[78u].z) * _2662;
        float _2823 = _843 + (-0.5);
        _2825 = cbMtdParam._m0[1u];
        _2827 = _2825.y * _2823;
        float _2830 = (_2805 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2831 = _2830 * (_2806 ? _2814 : (_2814 + (cbSceneParam._m0[72u].w * _2787)));
        _2832 = _2830 * (_2806 ? _2815 : (_2815 + (cbSceneParam._m0[72u].w * _2789)));
        _2833 = _2830 * (_2806 ? _2816 : (_2816 + (cbSceneParam._m0[72u].w * _2791)));
        _2834 = _2823 * 0.999000012874603271484375;
        _2844 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2844)
        {
            if ((cbInstanceData._m0[_894 + 7u].x + _2834) < 0.5)
            {
                _3047 = true;
                break;
            }
        }
        uint _2967 = _896 + uint(_2803.w);
        if ((cbInstanceData._m0[_2967].w < 1.0) && ((cbInstanceData._m0[_2967].w + _2834) < 0.5))
        {
            _3047 = true;
            break;
        }
        if ((_2827 + 1.0) < _2825.x)
        {
            _3047 = true;
            break;
        }
        _3047 = false;
        break;
    }
    float _3251;
    if (_3047)
    {
        discard_state = true;
        _3251 = 0.0;
    }
    else
    {
        _3251 = cbInstanceData._m0[_2663].w;
    }
    SV_Target.x = _2831;
    SV_Target.y = _2832;
    SV_Target.z = _2833;
    SV_Target.w = _3251;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2663].w;
    discard_exit();
}


