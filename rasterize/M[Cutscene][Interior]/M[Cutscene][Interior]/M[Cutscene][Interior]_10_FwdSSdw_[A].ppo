#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 2) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_12;
layout(set = 0, binding = 3) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _398;
float _2922;
float _2923;
float _2924;
float _2925;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _201 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _202 = _201 * _194;
    float _203 = _201 * _195;
    float _204 = _201 * _196;
    float _208 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _212 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _213 = _212 * TANGENT.x;
    float _214 = _212 * TANGENT.y;
    float _215 = _212 * TANGENT.z;
    float _260 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _270 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _260);
    float _271 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _260);
    float _272 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _260);
    vec4 _307 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _323 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _330 = inversesqrt(dot(vec3(_213, _214, _215), vec3(_213, _214, _215)));
    float _342 = cbMtdParam._m0[24u].w + _270;
    float _343 = cbMtdParam._m0[25u].x + _271;
    float _344 = cbMtdParam._m0[25u].y + _272;
    float _361 = (-0.0) - dot(vec3(_342, _343, _344), vec3(_323 * _202, _323 * _203, _323 * _204));
    float _362 = (-0.0) - dot(vec3(_342, _343, _344), vec3(_330 * _213, _330 * _214, _330 * _215));
    float _363 = (-0.0) - dot(vec3(_342, _343, _344), vec3((-0.0) - (NORMAL.x * _208), (-0.0) - (NORMAL.y * _208), (-0.0) - (NORMAL.z * _208)));
    float _367 = inversesqrt(dot(vec3(_361, _362, _363), vec3(_361, _362, _363)));
    float _368 = _367 * _363;
    float _373 = ((cbMtdParam._m0[21u].z * _361) * _367) + (((_307.x * 2.0) + (-1.0)) * cbMtdParam._m0[22u].x);
    float _374 = ((cbMtdParam._m0[21u].w * _362) * _367) + (((_307.y * 2.0) + (-1.0)) * cbMtdParam._m0[22u].y);
    float _377 = fract(cbMtdParam._m0[21u].z * TEXCOORD.x);
    float _378 = fract(cbMtdParam._m0[21u].w * TEXCOORD.y);
    float _396;
    float _399;
    float _401;
    if (_373 > 0.0)
    {
        float _382 = (1.0 - _377) / _373;
        _396 = _382;
        _399 = ((cbMtdParam._m0[18u].w + 1.0) - fract(_382 * _368)) * 0.16666667163372039794921875;
        _401 = (fract((_382 * _374) + _378) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_373 < 0.0)
        {
            float _397 = ((-0.0) - _377) / _373;
            frontier_phi_3_2_ladder = _397;
            frontier_phi_3_2_ladder_1 = (fract((_397 * _374) + _378) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_2 = (fract(_397 * _368) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = _398;
            frontier_phi_3_2_ladder_1 = 0.0;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _396 = frontier_phi_3_2_ladder;
        _399 = frontier_phi_3_2_ladder_2;
        _401 = frontier_phi_3_2_ladder_1;
    }
    float _427;
    float _429;
    float _431;
    if (_374 > 0.0)
    {
        float _414 = (1.0 - _378) / _374;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_414 < _396)
        {
            frontier_phi_8_5_ladder = (fract(_414 * _368) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_414 * _373) + _377) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _414;
        }
        else
        {
            frontier_phi_8_5_ladder = _401;
            frontier_phi_8_5_ladder_1 = _399;
            frontier_phi_8_5_ladder_2 = _396;
        }
        _427 = frontier_phi_8_5_ladder_2;
        _429 = frontier_phi_8_5_ladder_1;
        _431 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_374 < 0.0)
        {
            float _428 = ((-0.0) - _378) / _374;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_428 < _396)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_428 * _368) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_428 * _373) + _377) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _428;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _401;
                frontier_phi_8_6_ladder_9_ladder_1 = _399;
                frontier_phi_8_6_ladder_9_ladder_2 = _396;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _401;
            frontier_phi_8_6_ladder_1 = _399;
            frontier_phi_8_6_ladder_2 = _396;
        }
        _427 = frontier_phi_8_6_ladder_2;
        _429 = frontier_phi_8_6_ladder_1;
        _431 = frontier_phi_8_6_ladder;
    }
    float _435 = (_368 > 0.0) ? (cbMtdParam._m0[18u].z / _368) : 5000.0;
    float _448;
    float _449;
    if (_435 < _427)
    {
        _448 = ((_377 + cbMtdParam._m0[18u].w) + (_435 * _373)) * 0.16666667163372039794921875;
        _449 = (((_435 * _374) + _378) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _448 = _429;
        _449 = _431;
    }
    vec4 _451 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_448, _449));
    float _2934 = isnan(0.0) ? cbMtdParam._m0[17u].z : (isnan(cbMtdParam._m0[17u].z) ? 0.0 : max(cbMtdParam._m0[17u].z, 0.0));
    float _465 = isnan(1.0) ? _2934 : (isnan(_2934) ? 1.0 : min(_2934, 1.0));
    float _2945 = isnan(0.0) ? cbMtdParam._m0[17u].y : (isnan(cbMtdParam._m0[17u].y) ? 0.0 : max(cbMtdParam._m0[17u].y, 0.0));
    float _508 = ((_465 - ((1.0 - (isnan(1.0) ? _2945 : (isnan(_2945) ? 1.0 : min(_2945, 1.0)))) * (_465 + 1.0))) + (((cbMtdParam._m0[18u].y * texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[3u].w)).x) + (cbMtdParam._m0[17u].x * texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w)).x)) / cbMtdParam._m0[17u].w)) / _465;
    float _2956 = isnan(0.0) ? _508 : (isnan(_508) ? 0.0 : max(_508, 0.0));
    float _509 = isnan(1.0) ? _2956 : (isnan(_2956) ? 1.0 : min(_2956, 1.0));
    float _511 = 3.0 - (_509 * 2.0);
    float _516 = _509 * _509;
    float _524 = (((_516 * (cbMtdParam._m0[15u].x - cbMtdParam._m0[13u].x)) * _511) + cbMtdParam._m0[13u].x) * _451.x;
    float _526 = (((_516 * (cbMtdParam._m0[15u].y - cbMtdParam._m0[13u].y)) * _511) + cbMtdParam._m0[13u].y) * _451.y;
    float _528 = (((_516 * (cbMtdParam._m0[15u].z - cbMtdParam._m0[13u].z)) * _511) + cbMtdParam._m0[13u].z) * _451.z;
    float _2967 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _2978 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _2989 = isnan(0.0) ? _528 : (isnan(_528) ? 0.0 : max(_528, 0.0));
    float _547 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _551 = inversesqrt(dot(vec3(_270, _271, _272), vec3(_270, _271, _272)));
    float _552 = _270 * _551;
    float _553 = _271 * _551;
    float _554 = _272 * _551;
    vec4 _559 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _561 = _559.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _661 = sqrt(((_270 * _270) + (_271 * _271)) + (_272 * _272));
        float _668 = (cbMatDynParam._m0[5u].x * _661) + cbMatDynParam._m0[5u].y;
        float _3000 = isnan(0.0) ? _668 : (isnan(_668) ? 0.0 : max(_668, 0.0));
        float _669 = isnan(1.0) ? _3000 : (isnan(_3000) ? 1.0 : min(_3000, 1.0));
        float _673 = (cbMatDynParam._m0[5u].z * _661) + cbMatDynParam._m0[5u].w;
        float _3011 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3011 : (isnan(_3011) ? 1.0 : min(_3011, 1.0))) - _669)) + _669) < ((_561 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _578 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _579 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _592 = uint(roundEven(NORMAL.w)) * 13u;
    uint _593 = _592 + 9u;
    uint _594 = _593 + uint(cbMatDynParam._m0[0u].w);
    float _600 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2967 : (isnan(_2967) ? 1.0 : min(_2967, 1.0)))) * cbInstanceData._m0[_594].x;
    float _601 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2978 : (isnan(_2978) ? 1.0 : min(_2978, 1.0)))) * cbInstanceData._m0[_594].y;
    float _602 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2989 : (isnan(_2989) ? 1.0 : min(_2989, 1.0)))) * cbInstanceData._m0[_594].z;
    float _3022 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _603 = isnan(1.0) ? _3022 : (isnan(_3022) ? 1.0 : min(_3022, 1.0));
    float _3033 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _604 = isnan(1.0) ? _3033 : (isnan(_3033) ? 1.0 : min(_3033, 1.0));
    float _3044 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _605 = isnan(1.0) ? _3044 : (isnan(_3044) ? 1.0 : min(_3044, 1.0));
    vec4 _614 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _578, cbSceneParam._m0[86u].y * _579));
    float _617 = _614.x * TEXCOORD_4.z;
    float _618 = (-0.0) - _552;
    float _619 = (-0.0) - _553;
    float _620 = (-0.0) - _554;
    float _642 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _646 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _650 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _948;
    float _949;
    float _950;
    float _951;
    float _952;
    float _953;
    float _954;
    float _955;
    float _956;
    float _957;
    float _958;
    float _959;
    float _960;
    float _961;
    float _962;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _736 = (cbModelParam._m0[37u].x * ((((fma(_650, cbModelParam._m0[26u].z, fma(_646, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _642)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _738 = (cbModelParam._m0[37u].y * ((((fma(_650, cbModelParam._m0[27u].z, fma(_646, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _642)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _739 = (((((fma(_650, cbModelParam._m0[28u].z, fma(_646, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _642)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _742 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_736, _738, _739), 0.0);
        vec4 _749 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_736, _738, _739), 0.0);
        vec4 _756 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_736, _738, _739), 0.0);
        vec4 _763 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_736, _738, _739), 0.0);
        float _776 = exp2((_742.w + (-0.5)) * 20.0) * 2.0;
        float _777 = _776 * (_742.x + (-0.5));
        float _778 = _776 * (_742.y + (-0.5));
        float _779 = _776 * (_742.z + (-0.5));
        float _786 = exp2((_749.w + (-0.5)) * 20.0) * 2.0;
        float _787 = _786 * (_749.x + (-0.5));
        float _788 = _786 * (_749.y + (-0.5));
        float _789 = _786 * (_749.z + (-0.5));
        float _796 = exp2((_756.w + (-0.5)) * 20.0) * 2.0;
        float _797 = _796 * (_756.x + (-0.5));
        float _798 = _796 * (_756.y + (-0.5));
        float _799 = _796 * (_756.z + (-0.5));
        float _806 = exp2((_763.w + (-0.5)) * 20.0) * 2.0;
        float _807 = _806 * (_763.x + (-0.5));
        float _808 = _806 * (_763.y + (-0.5));
        float _809 = _806 * (_763.z + (-0.5));
        float _810 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _811 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _812 = isnan(0.0) ? _809 : (isnan(_809) ? 0.0 : max(_809, 0.0));
        float _813 = _777 * 0.5;
        float _814 = _787 * 0.5;
        float _815 = _797 * 0.5;
        float _816 = dot(vec3(_813, _814, _815), vec3(_813, _814, _815));
        float _821 = (_816 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_816);
        float _830 = (dot(vec3(0.0), vec3(_821 * _813, _821 * _814, _821 * _815)) + 1.0) * 0.5;
        float _3070 = isnan(0.0) ? _830 : (isnan(_830) ? 0.0 : max(_830, 0.0));
        float _840 = sqrt(((_814 * _814) + (_813 * _813)) + (_815 * _815)) / (_810 + 9.9999997473787516355514526367188e-06);
        float _3081 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _841 = isnan(1.0) ? _3081 : (isnan(_3081) ? 1.0 : min(_3081, 1.0));
        float _842 = _841 * 2.0;
        float _846 = (1.0 - _841) / (_841 + 1.0);
        float _3092 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _847 = isnan(1.0) ? _3092 : (isnan(_3092) ? 1.0 : min(_3092, 1.0));
        float _856 = ((((1.0 - _847) * (_842 + 2.0)) * exp2(log2(isnan(1.0) ? _3070 : (isnan(_3070) ? 1.0 : min(_3070, 1.0))) * (_842 + 1.0))) + _847) * _810;
        float _857 = _778 * 0.5;
        float _858 = _788 * 0.5;
        float _859 = _798 * 0.5;
        float _860 = dot(vec3(_857, _858, _859), vec3(_857, _858, _859));
        float _865 = (_860 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_860);
        float _873 = (dot(vec3(0.0), vec3(_865 * _857, _865 * _858, _865 * _859)) + 1.0) * 0.5;
        float _3103 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        float _882 = sqrt(((_858 * _858) + (_857 * _857)) + (_859 * _859)) / (_811 + 9.9999997473787516355514526367188e-06);
        float _3114 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _883 = isnan(1.0) ? _3114 : (isnan(_3114) ? 1.0 : min(_3114, 1.0));
        float _884 = _883 * 2.0;
        float _888 = (1.0 - _883) / (_883 + 1.0);
        float _3125 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _889 = isnan(1.0) ? _3125 : (isnan(_3125) ? 1.0 : min(_3125, 1.0));
        float _898 = ((((1.0 - _889) * (_884 + 2.0)) * exp2(log2(isnan(1.0) ? _3103 : (isnan(_3103) ? 1.0 : min(_3103, 1.0))) * (_884 + 1.0))) + _889) * _811;
        float _899 = _779 * 0.5;
        float _900 = _789 * 0.5;
        float _901 = _799 * 0.5;
        float _902 = dot(vec3(_899, _900, _901), vec3(_899, _900, _901));
        float _907 = (_902 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_902);
        float _915 = (dot(vec3(0.0), vec3(_907 * _899, _907 * _900, _907 * _901)) + 1.0) * 0.5;
        float _3136 = isnan(0.0) ? _915 : (isnan(_915) ? 0.0 : max(_915, 0.0));
        float _924 = sqrt(((_900 * _900) + (_899 * _899)) + (_901 * _901)) / (_812 + 9.9999997473787516355514526367188e-06);
        float _3147 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        float _925 = isnan(1.0) ? _3147 : (isnan(_3147) ? 1.0 : min(_3147, 1.0));
        float _926 = _925 * 2.0;
        float _930 = (1.0 - _925) / (_925 + 1.0);
        float _3158 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _931 = isnan(1.0) ? _3158 : (isnan(_3158) ? 1.0 : min(_3158, 1.0));
        float _940 = ((((1.0 - _931) * (_926 + 2.0)) * exp2(log2(isnan(1.0) ? _3136 : (isnan(_3136) ? 1.0 : min(_3136, 1.0))) * (_926 + 1.0))) + _931) * _812;
        _948 = _779;
        _949 = _778;
        _950 = _777;
        _951 = _789;
        _952 = _788;
        _953 = _787;
        _954 = _799;
        _955 = _798;
        _956 = _797;
        _957 = _812;
        _958 = _811;
        _959 = _810;
        _960 = cbModelParam._m0[36u].z * (isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0)));
        _961 = cbModelParam._m0[36u].z * (isnan(0.0) ? _898 : (isnan(_898) ? 0.0 : max(_898, 0.0)));
        _962 = cbModelParam._m0[36u].z * (isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0)));
    }
    else
    {
        _948 = _398;
        _949 = _398;
        _950 = _398;
        _951 = _398;
        _952 = _398;
        _953 = _398;
        _954 = _398;
        _955 = _398;
        _956 = _398;
        _957 = _398;
        _958 = _398;
        _959 = _398;
        _960 = 0.0;
        _961 = 0.0;
        _962 = 0.0;
    }
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    float _1239;
    float _1240;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1019 = (cbModelParam._m0[38u].x * ((((fma(_650, cbModelParam._m0[30u].z, fma(_646, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _642)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1020 = (cbModelParam._m0[38u].y * ((((fma(_650, cbModelParam._m0[31u].z, fma(_646, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _642)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1021 = (((((fma(_650, cbModelParam._m0[32u].z, fma(_646, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _642)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1023 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1019, _1020, _1021), 0.0);
        vec4 _1030 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1019, _1020, _1021), 0.0);
        vec4 _1037 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1019, _1020, _1021), 0.0);
        vec4 _1044 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1019, _1020, _1021), 0.0);
        float _1056 = exp2((_1023.w + (-0.5)) * 20.0) * 2.0;
        float _1057 = _1056 * (_1023.x + (-0.5));
        float _1058 = _1056 * (_1023.y + (-0.5));
        float _1059 = _1056 * (_1023.z + (-0.5));
        float _1066 = exp2((_1030.w + (-0.5)) * 20.0) * 2.0;
        float _1067 = _1066 * (_1030.x + (-0.5));
        float _1068 = _1066 * (_1030.y + (-0.5));
        float _1069 = _1066 * (_1030.z + (-0.5));
        float _1076 = exp2((_1037.w + (-0.5)) * 20.0) * 2.0;
        float _1077 = _1076 * (_1037.x + (-0.5));
        float _1078 = _1076 * (_1037.y + (-0.5));
        float _1079 = _1076 * (_1037.z + (-0.5));
        float _1086 = exp2((_1044.w + (-0.5)) * 20.0) * 2.0;
        float _1087 = _1086 * (_1044.x + (-0.5));
        float _1088 = _1086 * (_1044.y + (-0.5));
        float _1089 = _1086 * (_1044.z + (-0.5));
        float _1090 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1091 = isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0));
        float _1092 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1093 = _1057 * 0.5;
        float _1094 = _1067 * 0.5;
        float _1095 = _1077 * 0.5;
        float _1096 = dot(vec3(_1093, _1094, _1095), vec3(_1093, _1094, _1095));
        float _1101 = (_1096 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1096);
        float _1109 = (dot(vec3(0.0), vec3(_1101 * _1093, _1101 * _1094, _1101 * _1095)) + 1.0) * 0.5;
        float _3199 = isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0));
        float _1118 = sqrt(((_1094 * _1094) + (_1093 * _1093)) + (_1095 * _1095)) / (_1090 + 9.9999997473787516355514526367188e-06);
        float _3210 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1119 = isnan(1.0) ? _3210 : (isnan(_3210) ? 1.0 : min(_3210, 1.0));
        float _1120 = _1119 * 2.0;
        float _1124 = (1.0 - _1119) / (_1119 + 1.0);
        float _3221 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1125 = isnan(1.0) ? _3221 : (isnan(_3221) ? 1.0 : min(_3221, 1.0));
        float _1134 = ((((1.0 - _1125) * (_1120 + 2.0)) * exp2(log2(isnan(1.0) ? _3199 : (isnan(_3199) ? 1.0 : min(_3199, 1.0))) * (_1120 + 1.0))) + _1125) * _1090;
        float _1135 = _1058 * 0.5;
        float _1136 = _1068 * 0.5;
        float _1137 = _1078 * 0.5;
        float _1138 = dot(vec3(_1135, _1136, _1137), vec3(_1135, _1136, _1137));
        float _1143 = (_1138 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1138);
        float _1151 = (dot(vec3(0.0), vec3(_1143 * _1135, _1143 * _1136, _1143 * _1137)) + 1.0) * 0.5;
        float _3232 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1160 = sqrt(((_1136 * _1136) + (_1135 * _1135)) + (_1137 * _1137)) / (_1091 + 9.9999997473787516355514526367188e-06);
        float _3243 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _3243 : (isnan(_3243) ? 1.0 : min(_3243, 1.0));
        float _1162 = _1161 * 2.0;
        float _1166 = (1.0 - _1161) / (_1161 + 1.0);
        float _3254 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1167 = isnan(1.0) ? _3254 : (isnan(_3254) ? 1.0 : min(_3254, 1.0));
        float _1176 = ((((1.0 - _1167) * (_1162 + 2.0)) * exp2(log2(isnan(1.0) ? _3232 : (isnan(_3232) ? 1.0 : min(_3232, 1.0))) * (_1162 + 1.0))) + _1167) * _1091;
        float _1177 = _1059 * 0.5;
        float _1178 = _1069 * 0.5;
        float _1179 = _1079 * 0.5;
        float _1180 = dot(vec3(_1177, _1178, _1179), vec3(_1177, _1178, _1179));
        float _1185 = (_1180 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1180);
        float _1193 = (dot(vec3(0.0), vec3(_1185 * _1177, _1185 * _1178, _1185 * _1179)) + 1.0) * 0.5;
        float _3265 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1202 = sqrt(((_1178 * _1178) + (_1177 * _1177)) + (_1179 * _1179)) / (_1092 + 9.9999997473787516355514526367188e-06);
        float _3276 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3276 : (isnan(_3276) ? 1.0 : min(_3276, 1.0));
        float _1204 = _1203 * 2.0;
        float _1208 = (1.0 - _1203) / (_1203 + 1.0);
        float _3287 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1209 = isnan(1.0) ? _3287 : (isnan(_3287) ? 1.0 : min(_3287, 1.0));
        float _1218 = ((((1.0 - _1209) * (_1204 + 2.0)) * exp2(log2(isnan(1.0) ? _3265 : (isnan(_3265) ? 1.0 : min(_3265, 1.0))) * (_1204 + 1.0))) + _1209) * _1092;
        _1226 = _1059;
        _1227 = _1058;
        _1228 = _1057;
        _1229 = _1069;
        _1230 = _1068;
        _1231 = _1067;
        _1232 = _1079;
        _1233 = _1078;
        _1234 = _1077;
        _1235 = _1092;
        _1236 = _1091;
        _1237 = _1090;
        _1238 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1134 : (isnan(_1134) ? 0.0 : max(_1134, 0.0)));
        _1239 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1176 : (isnan(_1176) ? 0.0 : max(_1176, 0.0)));
        _1240 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1218 : (isnan(_1218) ? 0.0 : max(_1218, 0.0)));
    }
    else
    {
        _1226 = _398;
        _1227 = _398;
        _1228 = _398;
        _1229 = _398;
        _1230 = _398;
        _1231 = _398;
        _1232 = _398;
        _1233 = _398;
        _1234 = _398;
        _1235 = _398;
        _1236 = _398;
        _1237 = _398;
        _1238 = 0.0;
        _1239 = 0.0;
        _1240 = 0.0;
    }
    float _1250 = (cbModelParam._m0[1u].x * (_1238 - _960)) + _960;
    float _1251 = (cbModelParam._m0[1u].x * (_1239 - _961)) + _961;
    float _1252 = (cbModelParam._m0[1u].x * (_1240 - _962)) + _962;
    float _1273 = fma(_1252, cbSceneParam._m0[89u].z, fma(_1251, cbSceneParam._m0[89u].y, _1250 * cbSceneParam._m0[89u].x));
    float _1276 = fma(_1252, cbSceneParam._m0[90u].z, fma(_1251, cbSceneParam._m0[90u].y, _1250 * cbSceneParam._m0[90u].x));
    float _1279 = fma(_1252, cbSceneParam._m0[91u].z, fma(_1251, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1250));
    float _1294 = _552 * (-0.5);
    float _1295 = _553 * (-0.5);
    float _1296 = _554 * (-0.5);
    float _1297 = dot(vec4(_1294, _1295, _1296, 1.0), vec4(_1228, _1231, _1234, _1237));
    float _1300 = dot(vec4(_1294, _1295, _1296, 1.0), vec4(_1227, _1230, _1233, _1236));
    float _1303 = dot(vec4(_1294, _1295, _1296, 1.0), vec4(_1226, _1229, _1232, _1235));
    float _1337;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1310 = dot(vec4(_1294, _1295, _1296, 1.0), vec4(_948, _951, _954, _957));
        float _1314 = dot(vec4(_1294, _1295, _1296, 1.0), vec4(_949, _952, _955, _958));
        float _1318 = dot(vec4(_1294, _1295, _1296, 1.0), vec4(_950, _953, _956, _959));
        float _1325 = dot(vec4(cbModelParam._m0[39u]), vec4(_1294, _1295, _1296, 1.0));
        _1337 = dot(vec3(isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0)), isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0)), isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1325) ? 0.0 : (isnan(0.0) ? _1325 : max(0.0, _1325))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1337 = 1.0;
    }
    float _1348;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1339 = dot(vec4(cbModelParam._m0[40u]), vec4(_1294, _1295, _1296, 1.0));
        _1348 = dot(vec3(isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)), isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)), isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1339) ? 0.0 : (isnan(0.0) ? _1339 : max(0.0, _1339))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1348 = 1.0;
    }
    float _1352 = (_1348 * cbModelParam._m0[1u].x) + (_1337 * (1.0 - cbModelParam._m0[1u].x));
    float _1361 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1443;
    float _1445;
    float _1447;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1410 = fma(_650, cbModelParam._m0[13u].z, fma(_646, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _642)) + cbModelParam._m0[13u].w;
        float _1414 = fma(_650, cbModelParam._m0[14u].z, fma(_646, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _642)) + cbModelParam._m0[14u].w;
        float _1418 = fma(_650, cbModelParam._m0[15u].z, fma(_646, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _642)) + cbModelParam._m0[15u].w;
        float _1421 = fma(_620, cbModelParam._m0[13u].z, fma(_619, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _618));
        float _1424 = fma(_620, cbModelParam._m0[14u].z, fma(_619, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _618));
        float _1427 = fma(_620, cbModelParam._m0[15u].z, fma(_619, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _618));
        float _1453;
        if (_1421 > 0.0)
        {
            _1453 = abs((1.0 - _1410) / _1421);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_1421 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_1410 + 1.0) / _1421);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1453 = frontier_phi_29_27_ladder;
        }
        float _1775;
        if (_1424 > 0.0)
        {
            _1775 = abs((1.0 - _1414) / _1424);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1424 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1414 + 1.0) / _1424);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _1775 = frontier_phi_38_34_ladder;
        }
        float _2085;
        if (_1427 > 0.0)
        {
            _2085 = abs((1.0 - _1418) / _1427);
        }
        else
        {
            float frontier_phi_52_45_ladder;
            if (_1427 < 0.0)
            {
                frontier_phi_52_45_ladder = abs((_1418 + 1.0) / _1427);
            }
            else
            {
                frontier_phi_52_45_ladder = 5000.0;
            }
            _2085 = frontier_phi_52_45_ladder;
        }
        float _2087 = isnan(_1775) ? _1453 : (isnan(_1453) ? _1775 : min(_1453, _1775));
        float _2088 = isnan(_2085) ? _2087 : (isnan(_2087) ? _2085 : min(_2087, _2085));
        float _2092 = (_2088 * _1421) + _1410;
        float _2093 = (_2088 * _1424) + _1414;
        float _2094 = (_2088 * _1427) + _1418;
        float _2095 = _2088 * 9.9999997473787516355514526367188e-05;
        float _2096 = (-1.0) - _2095;
        float _2098 = _2095 + 1.0;
        float frontier_phi_28_52_ladder;
        float frontier_phi_28_52_ladder_1;
        float frontier_phi_28_52_ladder_2;
        if ((_2094 > _2098) || ((_2094 < _2096) || ((_2093 > _2098) || ((_2093 < _2096) || ((_2092 < _2096) || (_2092 > _2098))))))
        {
            frontier_phi_28_52_ladder = 0.0;
            frontier_phi_28_52_ladder_1 = 0.0;
            frontier_phi_28_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2233 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2094, cbModelParam._m0[9u].z, fma(_2093, cbModelParam._m0[9u].y, _2092 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2094, cbModelParam._m0[10u].z, fma(_2093, cbModelParam._m0[10u].y, _2092 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2094, cbModelParam._m0[11u].z, fma(_2093, cbModelParam._m0[11u].y, _2092 * cbModelParam._m0[11u].x))), _1361);
            frontier_phi_28_52_ladder = _2233.z * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_1 = _2233.y * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_2 = _2233.x * cbModelParam._m0[1u].y;
        }
        _1443 = frontier_phi_28_52_ladder_2;
        _1445 = frontier_phi_28_52_ladder_1;
        _1447 = frontier_phi_28_52_ladder;
    }
    else
    {
        vec4 _1431 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_618, _619, _620), _1361);
        _1443 = _1431.x * cbModelParam._m0[1u].y;
        _1445 = _1431.y * cbModelParam._m0[1u].y;
        _1447 = _1431.z * cbModelParam._m0[1u].y;
    }
    float _1450 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1539;
    float _1541;
    float _1543;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1503 = fma(_650, cbModelParam._m0[21u].z, fma(_646, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _642)) + cbModelParam._m0[21u].w;
        float _1507 = fma(_650, cbModelParam._m0[22u].z, fma(_646, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _642)) + cbModelParam._m0[22u].w;
        float _1511 = fma(_650, cbModelParam._m0[23u].z, fma(_646, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _642)) + cbModelParam._m0[23u].w;
        float _1514 = fma(_620, cbModelParam._m0[21u].z, fma(_619, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _618));
        float _1517 = fma(_620, cbModelParam._m0[22u].z, fma(_619, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _618));
        float _1520 = fma(_620, cbModelParam._m0[23u].z, fma(_619, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _618));
        float _1780;
        if (_1514 > 0.0)
        {
            _1780 = abs((1.0 - _1503) / _1514);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1514 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1503 + 1.0) / _1514);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _1780 = frontier_phi_40_36_ladder;
        }
        float _2111;
        if (_1517 > 0.0)
        {
            _2111 = abs((1.0 - _1507) / _1517);
        }
        else
        {
            float frontier_phi_54_47_ladder;
            if (_1517 < 0.0)
            {
                frontier_phi_54_47_ladder = abs((_1507 + 1.0) / _1517);
            }
            else
            {
                frontier_phi_54_47_ladder = 5000.0;
            }
            _2111 = frontier_phi_54_47_ladder;
        }
        float _2298;
        if (_1520 > 0.0)
        {
            _2298 = abs((1.0 - _1511) / _1520);
        }
        else
        {
            float frontier_phi_72_65_ladder;
            if (_1520 < 0.0)
            {
                frontier_phi_72_65_ladder = abs((_1511 + 1.0) / _1520);
            }
            else
            {
                frontier_phi_72_65_ladder = 5000.0;
            }
            _2298 = frontier_phi_72_65_ladder;
        }
        float _2300 = isnan(_2111) ? _1780 : (isnan(_1780) ? _2111 : min(_1780, _2111));
        float _2301 = isnan(_2298) ? _2300 : (isnan(_2300) ? _2298 : min(_2300, _2298));
        float _2305 = (_2301 * _1514) + _1503;
        float _2306 = (_2301 * _1517) + _1507;
        float _2307 = (_2301 * _1520) + _1511;
        float _2308 = _2301 * 9.9999997473787516355514526367188e-05;
        float _2309 = (-1.0) - _2308;
        float _2311 = _2308 + 1.0;
        float frontier_phi_37_72_ladder;
        float frontier_phi_37_72_ladder_1;
        float frontier_phi_37_72_ladder_2;
        if ((_2307 > _2311) || ((_2307 < _2309) || ((_2306 > _2311) || ((_2306 < _2309) || ((_2305 < _2309) || (_2305 > _2311))))))
        {
            frontier_phi_37_72_ladder = 0.0;
            frontier_phi_37_72_ladder_1 = 0.0;
            frontier_phi_37_72_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2499 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2307, cbModelParam._m0[17u].z, fma(_2306, cbModelParam._m0[17u].y, _2305 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2307, cbModelParam._m0[18u].z, fma(_2306, cbModelParam._m0[18u].y, _2305 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2307, cbModelParam._m0[19u].z, fma(_2306, cbModelParam._m0[19u].y, _2305 * cbModelParam._m0[19u].x))), _1450);
            frontier_phi_37_72_ladder = _2499.z * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_1 = _2499.y * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_2 = _2499.x * cbModelParam._m0[1u].z;
        }
        _1539 = frontier_phi_37_72_ladder_2;
        _1541 = frontier_phi_37_72_ladder_1;
        _1543 = frontier_phi_37_72_ladder;
    }
    else
    {
        vec4 _1523 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_618, _619, _620), _1450);
        _1539 = _1523.x * cbModelParam._m0[1u].z;
        _1541 = _1523.y * cbModelParam._m0[1u].z;
        _1543 = _1523.z * cbModelParam._m0[1u].z;
    }
    float _1555 = _617 * 0.01200000010430812835693359375;
    float _1557 = _1555 * ((cbModelParam._m0[1u].w * (_1539 - _1443)) + _1443);
    float _1558 = _1555 * ((cbModelParam._m0[1u].w * (_1541 - _1445)) + _1445);
    float _1559 = _1555 * ((cbModelParam._m0[1u].w * (_1543 - _1447)) + _1447);
    float _1562 = fma(_1559, cbSceneParam._m0[89u].z, fma(_1558, cbSceneParam._m0[89u].y, _1557 * cbSceneParam._m0[89u].x));
    float _1565 = fma(_1559, cbSceneParam._m0[90u].z, fma(_1558, cbSceneParam._m0[90u].y, _1557 * cbSceneParam._m0[90u].x));
    float _1568 = fma(_1559, cbSceneParam._m0[91u].z, fma(_1558, cbSceneParam._m0[91u].y, _1557 * cbSceneParam._m0[91u].x));
    vec4 _1576 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_578, _579));
    float _1578 = _1576.w;
    float _1591 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1578);
    float _1592 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1578);
    float _1593 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1578);
    uvec4 _1597 = floatBitsToUint(cbInstanceData._m0[_592 + 5u]);
    uint _1599 = _1597.x * 14u;
    uint _1600 = _1599 + 13u;
    float _1605 = _617 + (-1.0);
    float _1608 = (cbLight._m0[_1600].x * _1605) + 1.0;
    float _1609 = (cbLight._m0[_1600].y * _1605) + 1.0;
    uint _1610 = _1599 + 5u;
    float _1616 = isnan(1.0) ? _1609 : (isnan(_1609) ? 1.0 : min(_1609, 1.0));
    uint _1620 = _1599 + 4u;
    float _1630 = isnan(1.0) ? _1608 : (isnan(_1608) ? 1.0 : min(_1608, 1.0));
    uint _1634 = _1599 | 1u;
    float _1645 = dot(vec3(cbLight._m0[_1599].xyz), vec3(0.0));
    float _1648 = dot(vec3(cbLight._m0[_1634].xyz), vec3(0.0));
    float _3423 = isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0));
    float _3434 = isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0));
    float _1653 = (isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0))) * 0.3183098733425140380859375;
    float _1655 = (isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0))) * 0.3183098733425140380859375;
    float _1662 = ((cbLight._m0[_1610].x * _1616) * _1655) + (((cbLight._m0[_1620].x * _1591) * _1630) * _1653);
    float _1663 = ((_1616 * cbLight._m0[_1610].y) * _1655) + (((cbLight._m0[_1620].y * _1592) * _1630) * _1653);
    float _1664 = ((_1616 * cbLight._m0[_1610].z) * _1655) + (((cbLight._m0[_1620].z * _1593) * _1630) * _1653);
    uint _1665 = _1599 + 8u;
    float _1671 = cbLight._m0[_1599].x + _552;
    float _1672 = cbLight._m0[_1599].y + _553;
    float _1673 = cbLight._m0[_1599].z + _554;
    float _1677 = inversesqrt(dot(vec3(_1671, _1672, _1673), vec3(_1671, _1672, _1673)));
    float _1681 = dot(vec3(0.0), vec3(cbLight._m0[_1599].xyz));
    float _3445 = isnan(0.0) ? _1681 : (isnan(_1681) ? 0.0 : max(_1681, 0.0));
    float _1684 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
    float _1685 = dot(vec3(0.0), vec3(_552, _553, _554));
    float _3456 = isnan(0.0) ? _1685 : (isnan(_1685) ? 0.0 : max(_1685, 0.0));
    float _1688 = isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0));
    float _1689 = dot(vec3(cbLight._m0[_1599].xyz), vec3(_1671 * _1677, _1672 * _1677, _1673 * _1677));
    float _3467 = isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0));
    float _1700 = (exp2(log2(1.0 - (isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1706 = (0.5 / ((_1684 + 9.9999999392252902907785028219223e-09) + _1688)) * _1684;
    float _3478 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
    float _1708 = (isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0))) * 0.31831014156341552734375;
    uint _1722 = _1599 + 9u;
    float _1728 = cbLight._m0[_1634].x + _552;
    float _1729 = cbLight._m0[_1634].y + _553;
    float _1730 = cbLight._m0[_1634].z + _554;
    float _1734 = inversesqrt(dot(vec3(_1728, _1729, _1730), vec3(_1728, _1729, _1730)));
    float _1738 = dot(vec3(0.0), vec3(cbLight._m0[_1634].xyz));
    float _3489 = isnan(0.0) ? _1738 : (isnan(_1738) ? 0.0 : max(_1738, 0.0));
    float _1741 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
    float _1742 = dot(vec3(cbLight._m0[_1634].xyz), vec3(_1728 * _1734, _1729 * _1734, _1730 * _1734));
    float _3500 = isnan(0.0) ? _1742 : (isnan(_1742) ? 0.0 : max(_1742, 0.0));
    float _1751 = (exp2(log2(1.0 - (isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1755 = (0.5 / ((_1741 + 9.9999999392252902907785028219223e-09) + _1688)) * _1741;
    float _3511 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
    float _1757 = (isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0))) * 0.31831014156341552734375;
    float _1767 = (((_1751 * cbLight._m0[_1722].x) * _1757) * _1616) + ((((cbLight._m0[_1665].x * _1591) * _1700) * _1708) * _1630);
    float _1768 = (((_1751 * cbLight._m0[_1722].y) * _1757) * _1616) + ((((cbLight._m0[_1665].y * _1592) * _1700) * _1708) * _1630);
    float _1769 = (((_1751 * cbLight._m0[_1722].z) * _1757) * _1616) + ((((cbLight._m0[_1665].z * _1593) * _1700) * _1708) * _1630);
    float _1885;
    float _1887;
    float _1889;
    float _1891;
    float _1893;
    float _1895;
    if (_1597.y == 0u)
    {
        float _1825 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1826 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1825;
        float _1827 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1825;
        float _1828 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1825;
        uvec4 _1840 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1841 = _1840.x;
        uint _1852 = uint((float(_1840.y) * floor(float(uint(cbSceneParam._m0[85u].y * _579) / _1841))) + floor(float(uint(cbSceneParam._m0[85u].x * _578) / _1841)));
        float _1862 = (log2(_1828 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1863 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
        uint _1866 = uint(isnan(14.0) ? _1863 : (isnan(_1863) ? 14.0 : min(_1863, 14.0)));
        uvec4 _1871 = texelFetch(g_lightClusterGridBuffer, int(((_1866 << 2u) + (_1852 << 6u)) >> 2u));
        uint _1872 = _1871.x;
        uint _1873 = _1840.z;
        float _1963;
        float _1965;
        float _1967;
        float _1969;
        float _1971;
        float _1973;
        if (((((1u << ((_1873 >> 4u) & 15u)) + 4294967295u) & _1872) == 0u) || ((_1873 & 240u) == 0u))
        {
            _1963 = 0.0;
            _1965 = 0.0;
            _1967 = 0.0;
            _1969 = 0.0;
            _1971 = 0.0;
            _1973 = 0.0;
        }
        else
        {
            float _1964;
            float _1966;
            float _1968;
            float _1970;
            float _1972;
            float _1974;
            float _2145 = 0.0;
            float _2146 = 0.0;
            float _2147 = 0.0;
            float _2148 = 0.0;
            float _2149 = 0.0;
            float _2150 = 0.0;
            uint _2151 = 0u;
            uint _2160;
            bool _2161;
            for (;;)
            {
                _2160 = texelFetch(g_lightClassification, int((((_1866 << 5u) + (_1852 << 9u)) + (_2151 << 2u)) >> 2u)).x;
                _2161 = _2160 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2161)
                {
                    frontier_phi_67_pred = _2148;
                    frontier_phi_67_pred_1 = _2147;
                    frontier_phi_67_pred_2 = _2146;
                    frontier_phi_67_pred_3 = _2145;
                    frontier_phi_67_pred_4 = _2149;
                    frontier_phi_67_pred_5 = _2150;
                }
                else
                {
                    float _2341;
                    float _2342;
                    float _2343;
                    float _2344;
                    float _2345;
                    float _2346;
                    uint _2347;
                    _2341 = _2145;
                    _2342 = _2146;
                    _2343 = _2147;
                    _2344 = _2148;
                    _2345 = _2149;
                    _2346 = _2150;
                    _2347 = _2160;
                    float _2242;
                    float _2243;
                    float _2244;
                    float _2245;
                    float _2246;
                    float _2247;
                    for (;;)
                    {
                        uint _2351 = uint(findLSB(_2347)) + (_2151 << 5u);
                        uint _2348 = (_2347 + 4294967295u) & _2347;
                        uint _2353 = _2351 * 48u;
                        vec4 _2367 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2353)).x, texelFetch(g_PointLightRenderingBuffer, int(_2353 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2353 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2353 + 3u)).x));
                        uint _2373 = (_2351 * 48u) + 4u;
                        vec4 _2386 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2373)).x, texelFetch(g_PointLightRenderingBuffer, int(_2373 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2373 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2373 + 3u)).x));
                        uint _2392 = (_2351 * 48u) + 8u;
                        vec3 _2403 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2392)).x, texelFetch(g_PointLightRenderingBuffer, int(_2392 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2392 + 2u)).x));
                        float _2407 = _2367.x - _1826;
                        float _2408 = _2367.y - _1827;
                        float _2409 = _2367.z - _1828;
                        float _2410 = dot(vec3(_2407, _2408, _2409), vec3(_2407, _2408, _2409));
                        float _2413 = inversesqrt(_2410);
                        float _2422 = 1.0 - (_2410 * _2367.w);
                        float _3532 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0));
                        float _2423 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
                        float _2424 = sqrt(_2410) * _2386.w;
                        float _2427 = 1.39999997615814208984375 / (_2424 + 1.39999997615814208984375);
                        float _2428 = _2427 * _2427;
                        float _2431 = ((1.0 - _2428) * dot(vec3(0.0), vec3(_2413 * _2407, _2413 * _2408, _2413 * _2409))) + _2428;
                        float _2434 = _2424 * _2424;
                        float _2438 = ((isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0))) * _2423) / ((_2434 * 0.699999988079071044921875) + 1.0);
                        float _2442 = (-0.0) - _1826;
                        float _2443 = (-0.0) - _1827;
                        float _2444 = (-0.0) - _1828;
                        float _2448 = inversesqrt(dot(vec3(_2442, _2443, _2444), vec3(_2442, _2443, _2444)));
                        float _2452 = dot(vec3(0.0), vec3(_2448 * _2442, _2448 * _2443, _2448 * _2444));
                        float _3548 = isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0));
                        float _3559 = isnan(0.0) ? _2431 : (isnan(_2431) ? 0.0 : max(_2431, 0.0));
                        float _2456 = isnan(1.0) ? _3559 : (isnan(_3559) ? 1.0 : min(_3559, 1.0));
                        float _2460 = (0.5 / (((isnan(1.0) ? _3548 : (isnan(_3548) ? 1.0 : min(_3548, 1.0))) + 9.9999999392252902907785028219223e-09) + _2456)) * _2456;
                        float _3570 = isnan(0.0) ? _2460 : (isnan(_2460) ? 0.0 : max(_2460, 0.0));
                        float _2469 = (((isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0))) * 3.1415927410125732421875) / ((_2434 * 2.1991131305694580078125) + 3.141590118408203125)) * _2423;
                        _2245 = (_2438 * _2386.x) + _2344;
                        _2246 = (_2438 * _2386.y) + _2345;
                        _2247 = (_2438 * _2386.z) + _2346;
                        _2242 = (_2469 * _2403.x) + _2341;
                        _2243 = (_2469 * _2403.y) + _2342;
                        _2244 = (_2469 * _2403.z) + _2343;
                        if (_2348 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2341 = _2242;
                            _2342 = _2243;
                            _2343 = _2244;
                            _2344 = _2245;
                            _2345 = _2246;
                            _2346 = _2247;
                            _2347 = _2348;
                        }
                    }
                    frontier_phi_67_pred = _2245;
                    frontier_phi_67_pred_1 = _2244;
                    frontier_phi_67_pred_2 = _2243;
                    frontier_phi_67_pred_3 = _2242;
                    frontier_phi_67_pred_4 = _2246;
                    frontier_phi_67_pred_5 = _2247;
                }
                _1970 = frontier_phi_67_pred;
                _1968 = frontier_phi_67_pred_1;
                _1966 = frontier_phi_67_pred_2;
                _1964 = frontier_phi_67_pred_3;
                _1972 = frontier_phi_67_pred_4;
                _1974 = frontier_phi_67_pred_5;
                uint _2152 = _2151 + 1u;
                if (_2152 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2145 = _1964;
                    _2146 = _1966;
                    _2147 = _1968;
                    _2148 = _1970;
                    _2149 = _1972;
                    _2150 = _1974;
                    _2151 = _2152;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1963 = _1964;
            _1965 = _1966;
            _1967 = _1968;
            _1969 = _1970;
            _1971 = _1972;
            _1973 = _1974;
        }
        uvec4 _1977 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1978 = _1977.z;
        uint _1980 = (_1978 >> 8u) & 15u;
        float _2116;
        float _2118;
        float _2120;
        float _2122;
        float _2124;
        float _2126;
        if (((4294967295u << _1980) & _1872) == 0u)
        {
            _2116 = _1963;
            _2118 = _1965;
            _2120 = _1967;
            _2122 = _1969;
            _2124 = _1971;
            _2126 = _1973;
        }
        else
        {
            float _2141 = inversesqrt(dot(vec3(_1826, _1827, _1828), vec3(_1826, _1827, _1828)));
            float frontier_phi_56_57_ladder;
            float frontier_phi_56_57_ladder_1;
            float frontier_phi_56_57_ladder_2;
            float frontier_phi_56_57_ladder_3;
            float frontier_phi_56_57_ladder_4;
            float frontier_phi_56_57_ladder_5;
            if (_1980 < ((_1978 >> 12u) & 15u))
            {
                float _2117;
                float _2119;
                float _2121;
                float _2123;
                float _2125;
                float _2127;
                float _2324 = _1963;
                float _2325 = _1965;
                float _2326 = _1967;
                float _2327 = _1969;
                float _2328 = _1971;
                float _2329 = _1973;
                uint _2330 = _1980;
                uint _2339;
                bool _2340;
                for (;;)
                {
                    _2339 = texelFetch(g_lightClassification, int((((_1866 << 5u) + (_1852 << 9u)) + (_2330 << 2u)) >> 2u)).x;
                    _2340 = _2339 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    float frontier_phi_81_pred_3;
                    float frontier_phi_81_pred_4;
                    float frontier_phi_81_pred_5;
                    if (_2340)
                    {
                        frontier_phi_81_pred = _2327;
                        frontier_phi_81_pred_1 = _2326;
                        frontier_phi_81_pred_2 = _2325;
                        frontier_phi_81_pred_3 = _2324;
                        frontier_phi_81_pred_4 = _2329;
                        frontier_phi_81_pred_5 = _2328;
                    }
                    else
                    {
                        float _2504;
                        float _2505;
                        float _2506;
                        float _2507;
                        float _2508;
                        float _2509;
                        float _2755;
                        float _2756;
                        float _2757;
                        float _2758;
                        float _2759;
                        float _2760;
                        float _2517 = _2324;
                        float _2518 = _2325;
                        float _2519 = _2326;
                        float _2520 = _2327;
                        float _2521 = _2328;
                        float _2522 = _2329;
                        uint _2523 = _2339;
                        uint _2524;
                        vec4 _2549;
                        float _2550;
                        vec4 _2565;
                        vec3 _2577;
                        vec4 _2593;
                        vec4 _2609;
                        float _2655;
                        bool _2656;
                        for (;;)
                        {
                            uint _2534 = ((_2330 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2523));
                            _2524 = (_2523 + 4294967295u) & _2523;
                            uint _2536 = _2534 * 40u;
                            _2549 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2536)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2536 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2536 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2536 + 3u)).x));
                            _2550 = _2549.w;
                            uint _2552 = (_2534 * 40u) + 4u;
                            _2565 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2552)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2552 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2552 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2552 + 3u)).x));
                            uint _2567 = (_2534 * 40u) + 8u;
                            _2577 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2567)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2567 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2567 + 2u)).x));
                            uint _2580 = (_2534 * 40u) + 16u;
                            _2593 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2580)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2580 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2580 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2580 + 3u)).x));
                            uint _2596 = (_2534 * 40u) + 20u;
                            _2609 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2596)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2596 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2596 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2596 + 3u)).x));
                            uint _2611 = (_2534 * 40u) + 24u;
                            vec4 _2624 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2611)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2611 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2611 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2611 + 3u)).x));
                            uint _2630 = (_2534 * 40u) + 28u;
                            vec4 _2643 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2630)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2630 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2630 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2630 + 3u)).x));
                            _2655 = fma(_1828, _2643.z, fma(_1827, _2643.y, _2643.x * _1826)) + _2643.w;
                            _2656 = !((fma(_1828, _2624.z, fma(_1827, _2624.y, _2624.x * _1826)) + _2624.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            float frontier_phi_87_pred_3;
                            float frontier_phi_87_pred_4;
                            float frontier_phi_87_pred_5;
                            if (_2656)
                            {
                                float _2683 = _2549.x - _1826;
                                float _2684 = _2549.y - _1827;
                                float _2685 = _2549.z - _1828;
                                float _2686 = dot(vec3(_2683, _2684, _2685), vec3(_2683, _2684, _2685));
                                float _2689 = inversesqrt(_2686);
                                float _2690 = _2689 * _2683;
                                float _2691 = _2689 * _2684;
                                float _2692 = _2689 * _2685;
                                float _2696 = 1.0 - (_2686 / (_2550 * _2550));
                                float _3581 = isnan(0.0) ? _2696 : (isnan(_2696) ? 0.0 : max(_2696, 0.0));
                                float _2697 = isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0));
                                float _2701 = sqrt(_2686) * _2565.w;
                                float _2703 = 1.39999997615814208984375 / (_2701 + 1.39999997615814208984375);
                                float _2704 = _2703 * _2703;
                                float _2705 = 1.0 - _2704;
                                float _2707 = (_2705 * dot(vec3(_2690, _2691, _2692), vec3(0.0))) + _2704;
                                float _2710 = _2701 * _2701;
                                float _2714 = (fma(_1828, _2593.z, fma(_1827, _2593.y, _2593.x * _1826)) + _2593.w) / _2655;
                                float _2715 = (fma(_1828, _2609.z, fma(_1827, _2609.y, _2609.x * _1826)) + _2609.w) / _2655;
                                float _2719 = 1.0 - dot(vec2(_2714, _2715), vec2(_2714, _2715));
                                float _3597 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0));
                                float _2720 = isnan(1.0) ? _3597 : (isnan(_3597) ? 1.0 : min(_3597, 1.0));
                                float _2721 = _2720 * (((isnan(0.0) ? _2707 : (isnan(_2707) ? 0.0 : max(_2707, 0.0))) * _2697) / ((_2710 * 0.699999988079071044921875) + 1.0));
                                float _2731 = dot(vec3(0.0), vec3((-0.0) - (_1826 * _2141), (-0.0) - (_1827 * _2141), (-0.0) - (_1828 * _2141)));
                                float _3608 = isnan(0.0) ? _2731 : (isnan(_2731) ? 0.0 : max(_2731, 0.0));
                                float _2739 = (_2705 * dot(vec3(0.0), vec3(_2690, _2691, _2692))) + _2704;
                                float _3619 = isnan(0.0) ? _2739 : (isnan(_2739) ? 0.0 : max(_2739, 0.0));
                                float _2740 = isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0));
                                float _2744 = (0.5 / (((isnan(1.0) ? _3608 : (isnan(_3608) ? 1.0 : min(_3608, 1.0))) + 9.9999999392252902907785028219223e-09) + _2740)) * _2740;
                                float _3630 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
                                float _2751 = (_2720 * _2697) * (((isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0))) * 3.1415927410125732421875) / ((_2710 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_87_pred = _2721 * _2565.x;
                                frontier_phi_87_pred_1 = _2751 * _2577.z;
                                frontier_phi_87_pred_2 = _2751 * _2577.y;
                                frontier_phi_87_pred_3 = _2751 * _2577.x;
                                frontier_phi_87_pred_4 = _2721 * _2565.z;
                                frontier_phi_87_pred_5 = _2721 * _2565.y;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                                frontier_phi_87_pred_3 = 0.0;
                                frontier_phi_87_pred_4 = 0.0;
                                frontier_phi_87_pred_5 = 0.0;
                            }
                            _2758 = frontier_phi_87_pred;
                            _2757 = frontier_phi_87_pred_1;
                            _2756 = frontier_phi_87_pred_2;
                            _2755 = frontier_phi_87_pred_3;
                            _2760 = frontier_phi_87_pred_4;
                            _2759 = frontier_phi_87_pred_5;
                            _2507 = _2758 + _2520;
                            _2508 = _2759 + _2521;
                            _2509 = _2760 + _2522;
                            _2504 = _2755 + _2517;
                            _2505 = _2756 + _2518;
                            _2506 = _2757 + _2519;
                            if (_2524 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2517 = _2504;
                                _2518 = _2505;
                                _2519 = _2506;
                                _2520 = _2507;
                                _2521 = _2508;
                                _2522 = _2509;
                                _2523 = _2524;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _2507;
                        frontier_phi_81_pred_1 = _2506;
                        frontier_phi_81_pred_2 = _2505;
                        frontier_phi_81_pred_3 = _2504;
                        frontier_phi_81_pred_4 = _2509;
                        frontier_phi_81_pred_5 = _2508;
                    }
                    _2123 = frontier_phi_81_pred;
                    _2121 = frontier_phi_81_pred_1;
                    _2119 = frontier_phi_81_pred_2;
                    _2117 = frontier_phi_81_pred_3;
                    _2127 = frontier_phi_81_pred_4;
                    _2125 = frontier_phi_81_pred_5;
                    uint _2331 = _2330 + 1u;
                    if (_2331 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2324 = _2117;
                        _2325 = _2119;
                        _2326 = _2121;
                        _2327 = _2123;
                        _2328 = _2125;
                        _2329 = _2127;
                        _2330 = _2331;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_56_57_ladder = _2127;
                frontier_phi_56_57_ladder_1 = _2125;
                frontier_phi_56_57_ladder_2 = _2123;
                frontier_phi_56_57_ladder_3 = _2119;
                frontier_phi_56_57_ladder_4 = _2117;
                frontier_phi_56_57_ladder_5 = _2121;
            }
            else
            {
                frontier_phi_56_57_ladder = _1973;
                frontier_phi_56_57_ladder_1 = _1971;
                frontier_phi_56_57_ladder_2 = _1969;
                frontier_phi_56_57_ladder_3 = _1965;
                frontier_phi_56_57_ladder_4 = _1963;
                frontier_phi_56_57_ladder_5 = _1967;
            }
            _2116 = frontier_phi_56_57_ladder_4;
            _2118 = frontier_phi_56_57_ladder_3;
            _2120 = frontier_phi_56_57_ladder_5;
            _2122 = frontier_phi_56_57_ladder_2;
            _2124 = frontier_phi_56_57_ladder_1;
            _2126 = frontier_phi_56_57_ladder;
        }
        float _2131 = isnan(1.0) ? _617 : (isnan(_617) ? 1.0 : min(_617, 1.0));
        _1885 = (_2131 * _2122) + _1662;
        _1887 = (_2131 * _2124) + _1663;
        _1889 = (_2131 * _2126) + _1664;
        _1891 = ((_2116 * 0.039999999105930328369140625) * _2131) + _1767;
        _1893 = ((_2118 * 0.039999999105930328369140625) * _2131) + _1768;
        _1895 = ((_2120 * 0.039999999105930328369140625) * _2131) + _1769;
    }
    else
    {
        _1885 = _1662;
        _1887 = _1663;
        _1889 = _1664;
        _1891 = _1767;
        _1893 = _1768;
        _1895 = _1769;
    }
    float _3646 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _3657 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _3668 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _1912 = ((isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0))) * (_1885 + ((isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0))) * _617))) + ((_1891 + ((isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0))) * _1352)) * cbPerFrame._m0[3u].x);
    float _1913 = ((isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0))) * (_1887 + ((isnan(0.0) ? _1276 : (isnan(_1276) ? 0.0 : max(_1276, 0.0))) * _617))) + ((_1893 + ((isnan(0.0) ? _1565 : (isnan(_1565) ? 0.0 : max(_1565, 0.0))) * _1352)) * cbPerFrame._m0[3u].x);
    float _1914 = ((isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0))) * (_1889 + ((isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0))) * _617))) + ((_1895 + ((isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0))) * _1352)) * cbPerFrame._m0[3u].x);
    float _1915 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
    float _1916 = isnan(0.0) ? _1913 : (isnan(_1913) ? 0.0 : max(_1913, 0.0));
    float _1917 = isnan(0.0) ? _1914 : (isnan(_1914) ? 0.0 : max(_1914, 0.0));
    uint _1918 = _592 + 6u;
    float _1926 = _578 / cbSceneParam._m0[86u].x;
    float _1927 = _579 / cbSceneParam._m0[86u].y;
    vec4 _1941 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1926, _1927, (log2((isnan(cbSceneParam._m0[77u].w) ? _547 : (isnan(_547) ? cbSceneParam._m0[77u].w : min(_547, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1943 = _1941.x;
    float _1944 = _1941.y;
    float _1945 = _1941.z;
    float _1946 = _1941.w;
    float _2026;
    float _2028;
    float _2030;
    float _2032;
    if (_547 > cbSceneParam._m0[78u].w)
    {
        float _1988 = isnan(_547) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _547 : min(cbSceneParam._m0[80u].w, _547));
        float _1989 = _1988 / _547;
        float _2000 = _1989 * _270;
        float _2001 = _271 * _1989;
        float _2002 = (-0.0) - _2001;
        float _2003 = _1989 * _272;
        float _2005 = (cbSceneParam._m0[77u].w * _2002) / _1988;
        float _2006 = _2005 + cbSceneParam._m0[79u].w;
        float _2007 = cbSceneParam._m0[79u].w - _2001;
        float _2013 = sqrt(((_2000 * _2000) + (_2001 * _2001)) + (_2003 * _2003));
        float _2016 = (1.0 - (cbSceneParam._m0[77u].w / _1988)) * _2013;
        float _2022 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2024 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2255;
        if (abs((_2002 - _2005) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2255 = ((((_2006 > 0.0) ? exp2(_2022 * _2006) : (2.0 - exp2(_2024 * _2006))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2016;
        }
        else
        {
            float _2174 = 1.0 / cbSceneParam._m0[80u].x;
            float _2175 = isnan(_2007) ? _2006 : (isnan(_2006) ? _2007 : max(_2006, _2007));
            float _2176 = isnan(_2007) ? _2006 : (isnan(_2006) ? _2007 : min(_2006, _2007));
            float _2185 = isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : min(_2175, 0.0));
            float _2186 = isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : min(_2176, 0.0));
            _2255 = ((abs(_2013 / _2002) * cbSceneParam._m0[80u].y) * ((((_2185 - _2186) * 2.0) - ((exp2(_2022 * (isnan(0.0) ? _2175 : (isnan(_2175) ? 0.0 : max(_2175, 0.0)))) - exp2(_2022 * (isnan(0.0) ? _2176 : (isnan(_2176) ? 0.0 : max(_2176, 0.0))))) * _2174)) - ((exp2(_2024 * _2185) - exp2(_2024 * _2186)) * _2174))) + (_2016 * cbSceneParam._m0[80u].z);
        }
        vec4 _2257 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1926, _1927, 1.0), 0.0);
        float _2266 = exp2((_2255 * (-1.44269502162933349609375)) * (1.0 - _2257.w));
        float _2267 = log2(_2266);
        float _2283 = log2(_1946);
        _2026 = (exp2(_2283 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2267 * cbSceneParam._m0[78u].x)) * _2257.x) / cbSceneParam._m0[78u].x)) + _1943;
        _2028 = (exp2(_2283 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2267 * cbSceneParam._m0[78u].y)) * _2257.y) / cbSceneParam._m0[78u].y)) + _1944;
        _2030 = (exp2(_2283 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2267 * cbSceneParam._m0[78u].z)) * _2257.z) / cbSceneParam._m0[78u].z)) + _1945;
        _2032 = _2266 * _1946;
    }
    else
    {
        _2026 = _1943;
        _2028 = _1944;
        _2030 = _1945;
        _2032 = _1946;
    }
    bool _2293;
    vec4 _2042;
    vec4 _2064;
    float _2066;
    float _2070;
    float _2071;
    float _2072;
    float _2073;
    bool _2084;
    for (;;)
    {
        _2042 = cbMatDynParam._m0[0u];
        float _2044 = roundEven(_2042.y);
        bool _2045 = _2044 == 3.0;
        float _2046 = log2(_2032);
        float _2053 = exp2(_2046 * cbSceneParam._m0[78u].x) * _1915;
        float _2054 = exp2(_2046 * cbSceneParam._m0[78u].y) * _1916;
        float _2055 = exp2(_2046 * cbSceneParam._m0[78u].z) * _1917;
        float _2062 = _561 + (-0.5);
        _2064 = cbMtdParam._m0[1u];
        _2066 = _2064.y * _2062;
        float _2069 = (_2044 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2070 = _2069 * (_2045 ? _2053 : (_2053 + (cbSceneParam._m0[72u].w * _2026)));
        _2071 = _2069 * (_2045 ? _2054 : (_2054 + (cbSceneParam._m0[72u].w * _2028)));
        _2072 = _2069 * (_2045 ? _2055 : (_2055 + (cbSceneParam._m0[72u].w * _2030)));
        _2073 = _2062 * 0.999000012874603271484375;
        _2084 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2084)
        {
            if ((cbInstanceData._m0[_592 + 7u].x + _2073) < 0.5)
            {
                _2293 = true;
                break;
            }
        }
        uint _2209 = _593 + uint(_2042.w);
        if ((cbInstanceData._m0[_2209].w < 1.0) && ((cbInstanceData._m0[_2209].w + _2073) < 0.5))
        {
            _2293 = true;
            break;
        }
        if ((_2066 + 1.0) < _2064.x)
        {
            _2293 = true;
            break;
        }
        _2293 = false;
        break;
    }
    float _2474;
    if (_2293)
    {
        discard_state = true;
        _2474 = 0.0;
    }
    else
    {
        _2474 = cbInstanceData._m0[_1918].w;
    }
    SV_Target.x = _2070;
    SV_Target.y = _2071;
    SV_Target.z = _2072;
    SV_Target.w = _2474;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1918].w;
    discard_exit();
}


