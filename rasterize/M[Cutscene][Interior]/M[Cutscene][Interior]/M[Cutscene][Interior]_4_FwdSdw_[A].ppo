#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1035;
float _3448;
float _3449;
float _3450;
float _3451;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _198 = _197 * _190;
    float _199 = _197 * _191;
    float _200 = _197 * _192;
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = _204 * NORMAL.x;
    float _206 = _204 * NORMAL.y;
    float _207 = _204 * NORMAL.z;
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _212 = _211 * TANGENT.x;
    float _213 = _211 * TANGENT.y;
    float _214 = _211 * TANGENT.z;
    float _259 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _269 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _259);
    float _270 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _259);
    float _271 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _259);
    vec4 _284 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _287 = _284.x;
    vec4 _305 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _322 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _287) + cbMtdParam._m0[12u].x) * _305.x;
    float _324 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _287) + cbMtdParam._m0[12u].y) * _305.y;
    float _326 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _287) + cbMtdParam._m0[12u].z) * _305.z;
    vec4 _344 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _380 = cbMtdParam._m0[24u].x + _269;
    float _381 = cbMtdParam._m0[24u].y + _270;
    float _382 = cbMtdParam._m0[24u].z + _271;
    float _396 = (-0.0) - dot(vec3(_380, _381, _382), vec3(_198, _199, _200));
    float _397 = (-0.0) - dot(vec3(_380, _381, _382), vec3(_212, _213, _214));
    float _398 = (-0.0) - dot(vec3(_380, _381, _382), vec3((-0.0) - _205, (-0.0) - _206, (-0.0) - _207));
    float _402 = inversesqrt(dot(vec3(_396, _397, _398), vec3(_396, _397, _398)));
    float _405 = _402 * _398;
    float _408 = ((_402 * _396) + ((cbMtdParam._m0[22u].x * _287) * ((_344.x * 2.0) + (-1.0)))) * cbMtdParam._m0[20u].w;
    float _409 = ((_402 * _397) + ((cbMtdParam._m0[22u].y * _287) * ((_344.y * 2.0) + (-1.0)))) * cbMtdParam._m0[20u].z;
    float _410 = fract(TEXCOORD.x);
    float _411 = fract(TEXCOORD.y);
    float _417;
    if (_408 > 0.0)
    {
        _417 = (1.0 - _410) / _408;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_408 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _410) / _408;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _417 = frontier_phi_3_2_ladder;
    }
    float _425;
    if (_409 > 0.0)
    {
        _425 = (1.0 - _411) / _409;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_409 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _411) / _409;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _425 = frontier_phi_7_6_ladder;
    }
    float _429 = (_405 > 0.0) ? (cbMtdParam._m0[16u].x / _405) : 5000.0;
    float _430 = isnan(_425) ? _417 : (isnan(_417) ? _425 : min(_417, _425));
    float _431 = isnan(_429) ? _430 : (isnan(_430) ? _429 : min(_430, _429));
    float _435 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _442 = ((_431 * _405) + _435) / _435;
    vec4 _467 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * ((((((_410 + (-0.5)) + (_431 * _408)) / _442) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * ((((((_411 + (-0.5)) + (_431 * _409)) / _442) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    vec4 _495 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _499 = _495.z;
    float _502 = (_495.x * 2.0) + (-1.0);
    float _503 = (_495.y * 2.0) + (-1.0);
    float _504 = dot(vec2(_502, _503), vec2(_502, _503));
    float _3470 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _509 = sqrt(1.0 - (isnan(1.0) ? _3470 : (isnan(_3470) ? 1.0 : min(_3470, 1.0))));
    float _512 = fma(_509, _205, fma(_503, _212, _502 * _198));
    float _515 = fma(_509, _206, fma(_503, _213, _502 * _199));
    float _518 = fma(_509, _207, fma(_503, _214, _502 * _200));
    float _522 = inversesqrt(dot(vec3(_512, _515, _518), vec3(_512, _515, _518)));
    float _523 = _522 * _512;
    float _524 = _522 * _515;
    float _525 = _522 * _518;
    float _3481 = isnan(0.0) ? _499 : (isnan(_499) ? 0.0 : max(_499, 0.0));
    float _526 = isnan(1.0) ? _3481 : (isnan(_3481) ? 1.0 : min(_3481, 1.0));
    float _3492 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _3503 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _3514 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _545 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _549 = inversesqrt(dot(vec3(_269, _270, _271), vec3(_269, _270, _271)));
    float _550 = _269 * _549;
    float _551 = _270 * _549;
    float _552 = _271 * _549;
    vec4 _557 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _559 = _557.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _716 = sqrt(((_269 * _269) + (_270 * _270)) + (_271 * _271));
        float _722 = (cbMatDynParam._m0[5u].x * _716) + cbMatDynParam._m0[5u].y;
        float _3525 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
        float _723 = isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0));
        float _727 = (cbMatDynParam._m0[5u].z * _716) + cbMatDynParam._m0[5u].w;
        float _3536 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0))) - _723)) + _723) < ((_559 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _571 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _572 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _591 = fma(_525, cbSceneParam._m0[5u].z, fma(_524, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _523));
    float _594 = fma(_525, cbSceneParam._m0[6u].z, fma(_524, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _523));
    float _597 = fma(_525, cbSceneParam._m0[7u].z, fma(_524, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _523));
    uint _610 = uint(roundEven(NORMAL.w)) * 13u;
    uint _612 = _610 + 9u;
    uint _613 = _612 + uint(cbMatDynParam._m0[0u].w);
    float _619 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3492 : (isnan(_3492) ? 1.0 : min(_3492, 1.0)))) * cbInstanceData._m0[_613].x;
    float _620 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3503 : (isnan(_3503) ? 1.0 : min(_3503, 1.0)))) * cbInstanceData._m0[_613].y;
    float _621 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3514 : (isnan(_3514) ? 1.0 : min(_3514, 1.0)))) * cbInstanceData._m0[_613].z;
    float _3547 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _622 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
    float _3558 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _623 = isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0));
    float _3569 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _624 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
    vec4 _633 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _571, cbSceneParam._m0[86u].y * _572));
    float _636 = _633.x * TEXCOORD_4.z;
    float _637 = dot(vec3(_523, _524, _525), vec3(_550, _551, _552));
    float _640 = _637 * 2.0;
    float _644 = (_640 * _523) - _550;
    float _645 = (_640 * _524) - _551;
    float _646 = (_640 * _525) - _552;
    float _650 = abs(dot(vec3(_550, _551, _552), vec3(_523, _524, _525)));
    float _3580 = isnan(0.0) ? _650 : (isnan(_650) ? 0.0 : max(_650, 0.0));
    float _652 = sqrt(_526);
    float _665 = exp2((_652 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_652 * 3.0));
    float _697 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _701 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _705 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1034;
    float _1036;
    float _1037;
    float _1038;
    float _1039;
    float _1040;
    float _1041;
    float _1042;
    float _1043;
    float _1044;
    float _1045;
    float _1046;
    float _1047;
    float _1048;
    float _1049;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _761 = fma(_705, cbModelParam._m0[26u].z, fma(_701, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _697));
        float _765 = fma(_705, cbModelParam._m0[27u].z, fma(_701, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _697));
        float _769 = fma(_705, cbModelParam._m0[28u].z, fma(_701, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _697));
        float _792 = _697 + _523;
        float _793 = _701 + _524;
        float _794 = _705 + _525;
        float _804 = fma(_794, cbModelParam._m0[26u].z, fma(_793, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _792)) - _761;
        float _805 = fma(_794, cbModelParam._m0[27u].z, fma(_793, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _792)) - _765;
        float _806 = fma(_794, cbModelParam._m0[28u].z, fma(_793, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _792)) - _769;
        float _810 = inversesqrt(dot(vec3(_804, _805, _806), vec3(_804, _805, _806)));
        float _823 = ((_810 * _804) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_761 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _824 = ((_810 * _805) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_765 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _825 = ((_810 * _806) / cbModelParam._m0[34u].z) + ((((((_769 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _828 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_823, _824, _825), 0.0);
        vec4 _835 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_823, _824, _825), 0.0);
        vec4 _842 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_823, _824, _825), 0.0);
        vec4 _849 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_823, _824, _825), 0.0);
        float _862 = exp2((_828.w + (-0.5)) * 20.0) * 2.0;
        float _863 = _862 * (_828.x + (-0.5));
        float _864 = _862 * (_828.y + (-0.5));
        float _865 = _862 * (_828.z + (-0.5));
        float _872 = exp2((_835.w + (-0.5)) * 20.0) * 2.0;
        float _873 = _872 * (_835.x + (-0.5));
        float _874 = _872 * (_835.y + (-0.5));
        float _875 = _872 * (_835.z + (-0.5));
        float _882 = exp2((_842.w + (-0.5)) * 20.0) * 2.0;
        float _883 = _882 * (_842.x + (-0.5));
        float _884 = _882 * (_842.y + (-0.5));
        float _885 = _882 * (_842.z + (-0.5));
        float _892 = exp2((_849.w + (-0.5)) * 20.0) * 2.0;
        float _893 = _892 * (_849.x + (-0.5));
        float _894 = _892 * (_849.y + (-0.5));
        float _895 = _892 * (_849.z + (-0.5));
        float _896 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
        float _897 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _898 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _899 = _863 * 0.5;
        float _900 = _873 * 0.5;
        float _901 = _883 * 0.5;
        float _902 = dot(vec3(_899, _900, _901), vec3(_899, _900, _901));
        float _907 = (_902 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_902);
        float _916 = (dot(vec3(_523, _524, _525), vec3(_907 * _899, _907 * _900, _907 * _901)) + 1.0) * 0.5;
        float _3606 = isnan(0.0) ? _916 : (isnan(_916) ? 0.0 : max(_916, 0.0));
        float _926 = sqrt(((_900 * _900) + (_899 * _899)) + (_901 * _901)) / (_896 + 9.9999997473787516355514526367188e-06);
        float _3617 = isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0));
        float _927 = isnan(1.0) ? _3617 : (isnan(_3617) ? 1.0 : min(_3617, 1.0));
        float _928 = _927 * 2.0;
        float _932 = (1.0 - _927) / (_927 + 1.0);
        float _3628 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _933 = isnan(1.0) ? _3628 : (isnan(_3628) ? 1.0 : min(_3628, 1.0));
        float _942 = ((((1.0 - _933) * (_928 + 2.0)) * exp2(log2(isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0))) * (_928 + 1.0))) + _933) * _896;
        float _943 = _864 * 0.5;
        float _944 = _874 * 0.5;
        float _945 = _884 * 0.5;
        float _946 = dot(vec3(_943, _944, _945), vec3(_943, _944, _945));
        float _951 = (_946 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_946);
        float _959 = (dot(vec3(_523, _524, _525), vec3(_951 * _943, _951 * _944, _951 * _945)) + 1.0) * 0.5;
        float _3639 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _968 = sqrt(((_944 * _944) + (_943 * _943)) + (_945 * _945)) / (_897 + 9.9999997473787516355514526367188e-06);
        float _3650 = isnan(0.0) ? _968 : (isnan(_968) ? 0.0 : max(_968, 0.0));
        float _969 = isnan(1.0) ? _3650 : (isnan(_3650) ? 1.0 : min(_3650, 1.0));
        float _970 = _969 * 2.0;
        float _974 = (1.0 - _969) / (_969 + 1.0);
        float _3661 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _975 = isnan(1.0) ? _3661 : (isnan(_3661) ? 1.0 : min(_3661, 1.0));
        float _984 = ((((1.0 - _975) * (_970 + 2.0)) * exp2(log2(isnan(1.0) ? _3639 : (isnan(_3639) ? 1.0 : min(_3639, 1.0))) * (_970 + 1.0))) + _975) * _897;
        float _985 = _865 * 0.5;
        float _986 = _875 * 0.5;
        float _987 = _885 * 0.5;
        float _988 = dot(vec3(_985, _986, _987), vec3(_985, _986, _987));
        float _993 = (_988 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_988);
        float _1001 = (dot(vec3(_523, _524, _525), vec3(_993 * _985, _993 * _986, _993 * _987)) + 1.0) * 0.5;
        float _3672 = isnan(0.0) ? _1001 : (isnan(_1001) ? 0.0 : max(_1001, 0.0));
        float _1010 = sqrt(((_986 * _986) + (_985 * _985)) + (_987 * _987)) / (_898 + 9.9999997473787516355514526367188e-06);
        float _3683 = isnan(0.0) ? _1010 : (isnan(_1010) ? 0.0 : max(_1010, 0.0));
        float _1011 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _1012 = _1011 * 2.0;
        float _1016 = (1.0 - _1011) / (_1011 + 1.0);
        float _3694 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1017 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _1026 = ((((1.0 - _1017) * (_1012 + 2.0)) * exp2(log2(isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) * (_1012 + 1.0))) + _1017) * _898;
        _1034 = _865;
        _1036 = _864;
        _1037 = _863;
        _1038 = _875;
        _1039 = _874;
        _1040 = _873;
        _1041 = _885;
        _1042 = _884;
        _1043 = _883;
        _1044 = _898;
        _1045 = _897;
        _1046 = _896;
        _1047 = cbModelParam._m0[36u].z * (isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0)));
        _1048 = cbModelParam._m0[36u].z * (isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0)));
        _1049 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0)));
    }
    else
    {
        _1034 = _1035;
        _1036 = _1035;
        _1037 = _1035;
        _1038 = _1035;
        _1039 = _1035;
        _1040 = _1035;
        _1041 = _1035;
        _1042 = _1035;
        _1043 = _1035;
        _1044 = _1035;
        _1045 = _1035;
        _1046 = _1035;
        _1047 = 0.0;
        _1048 = 0.0;
        _1049 = 0.0;
    }
    float _1347;
    float _1348;
    float _1349;
    float _1350;
    float _1351;
    float _1352;
    float _1353;
    float _1354;
    float _1355;
    float _1356;
    float _1357;
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1078 = fma(_705, cbModelParam._m0[30u].z, fma(_701, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _697));
        float _1082 = fma(_705, cbModelParam._m0[31u].z, fma(_701, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _697));
        float _1086 = fma(_705, cbModelParam._m0[32u].z, fma(_701, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _697));
        float _1109 = _697 + _523;
        float _1110 = _701 + _524;
        float _1111 = _705 + _525;
        float _1121 = fma(_1111, cbModelParam._m0[30u].z, fma(_1110, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1109)) - _1078;
        float _1122 = fma(_1111, cbModelParam._m0[31u].z, fma(_1110, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1109)) - _1082;
        float _1123 = fma(_1111, cbModelParam._m0[32u].z, fma(_1110, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1109)) - _1086;
        float _1127 = inversesqrt(dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123)));
        float _1140 = ((_1127 * _1121) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1078 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1141 = ((_1127 * _1122) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1082 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1142 = ((_1127 * _1123) / cbModelParam._m0[35u].z) + ((((((_1086 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1144 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        vec4 _1151 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        vec4 _1158 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        vec4 _1165 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1140, _1141, _1142), 0.0);
        float _1177 = exp2((_1144.w + (-0.5)) * 20.0) * 2.0;
        float _1178 = _1177 * (_1144.x + (-0.5));
        float _1179 = _1177 * (_1144.y + (-0.5));
        float _1180 = _1177 * (_1144.z + (-0.5));
        float _1187 = exp2((_1151.w + (-0.5)) * 20.0) * 2.0;
        float _1188 = _1187 * (_1151.x + (-0.5));
        float _1189 = _1187 * (_1151.y + (-0.5));
        float _1190 = _1187 * (_1151.z + (-0.5));
        float _1197 = exp2((_1158.w + (-0.5)) * 20.0) * 2.0;
        float _1198 = _1197 * (_1158.x + (-0.5));
        float _1199 = _1197 * (_1158.y + (-0.5));
        float _1200 = _1197 * (_1158.z + (-0.5));
        float _1207 = exp2((_1165.w + (-0.5)) * 20.0) * 2.0;
        float _1208 = _1207 * (_1165.x + (-0.5));
        float _1209 = _1207 * (_1165.y + (-0.5));
        float _1210 = _1207 * (_1165.z + (-0.5));
        float _1211 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1212 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1213 = isnan(0.0) ? _1210 : (isnan(_1210) ? 0.0 : max(_1210, 0.0));
        float _1214 = _1178 * 0.5;
        float _1215 = _1188 * 0.5;
        float _1216 = _1198 * 0.5;
        float _1217 = dot(vec3(_1214, _1215, _1216), vec3(_1214, _1215, _1216));
        float _1222 = (_1217 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1217);
        float _1230 = (dot(vec3(_523, _524, _525), vec3(_1222 * _1214, _1222 * _1215, _1222 * _1216)) + 1.0) * 0.5;
        float _3735 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1239 = sqrt(((_1215 * _1215) + (_1214 * _1214)) + (_1216 * _1216)) / (_1211 + 9.9999997473787516355514526367188e-06);
        float _3746 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
        float _1241 = _1240 * 2.0;
        float _1245 = (1.0 - _1240) / (_1240 + 1.0);
        float _3757 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
        float _1255 = ((((1.0 - _1246) * (_1241 + 2.0)) * exp2(log2(isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0))) * (_1241 + 1.0))) + _1246) * _1211;
        float _1256 = _1179 * 0.5;
        float _1257 = _1189 * 0.5;
        float _1258 = _1199 * 0.5;
        float _1259 = dot(vec3(_1256, _1257, _1258), vec3(_1256, _1257, _1258));
        float _1264 = (_1259 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1259);
        float _1272 = (dot(vec3(_523, _524, _525), vec3(_1264 * _1256, _1264 * _1257, _1264 * _1258)) + 1.0) * 0.5;
        float _3768 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1281 = sqrt(((_1257 * _1257) + (_1256 * _1256)) + (_1258 * _1258)) / (_1212 + 9.9999997473787516355514526367188e-06);
        float _3779 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
        float _1283 = _1282 * 2.0;
        float _1287 = (1.0 - _1282) / (_1282 + 1.0);
        float _3790 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
        float _1297 = ((((1.0 - _1288) * (_1283 + 2.0)) * exp2(log2(isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0))) * (_1283 + 1.0))) + _1288) * _1212;
        float _1298 = _1180 * 0.5;
        float _1299 = _1190 * 0.5;
        float _1300 = _1200 * 0.5;
        float _1301 = dot(vec3(_1298, _1299, _1300), vec3(_1298, _1299, _1300));
        float _1306 = (_1301 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1301);
        float _1314 = (dot(vec3(_523, _524, _525), vec3(_1306 * _1298, _1306 * _1299, _1306 * _1300)) + 1.0) * 0.5;
        float _3801 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1323 = sqrt(((_1299 * _1299) + (_1298 * _1298)) + (_1300 * _1300)) / (_1213 + 9.9999997473787516355514526367188e-06);
        float _3812 = isnan(0.0) ? _1323 : (isnan(_1323) ? 0.0 : max(_1323, 0.0));
        float _1324 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _1325 = _1324 * 2.0;
        float _1329 = (1.0 - _1324) / (_1324 + 1.0);
        float _3823 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1330 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _1339 = ((((1.0 - _1330) * (_1325 + 2.0)) * exp2(log2(isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) * (_1325 + 1.0))) + _1330) * _1213;
        _1347 = _1180;
        _1348 = _1179;
        _1349 = _1178;
        _1350 = _1190;
        _1351 = _1189;
        _1352 = _1188;
        _1353 = _1200;
        _1354 = _1199;
        _1355 = _1198;
        _1356 = _1213;
        _1357 = _1212;
        _1358 = _1211;
        _1359 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)));
        _1360 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)));
        _1361 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0)));
    }
    else
    {
        _1347 = _1035;
        _1348 = _1035;
        _1349 = _1035;
        _1350 = _1035;
        _1351 = _1035;
        _1352 = _1035;
        _1353 = _1035;
        _1354 = _1035;
        _1355 = _1035;
        _1356 = _1035;
        _1357 = _1035;
        _1358 = _1035;
        _1359 = 0.0;
        _1360 = 0.0;
        _1361 = 0.0;
    }
    float _1371 = (cbModelParam._m0[1u].x * (_1359 - _1047)) + _1047;
    float _1372 = (cbModelParam._m0[1u].x * (_1360 - _1048)) + _1048;
    float _1373 = (cbModelParam._m0[1u].x * (_1361 - _1049)) + _1049;
    float _1394 = fma(_1373, cbSceneParam._m0[89u].z, fma(_1372, cbSceneParam._m0[89u].y, _1371 * cbSceneParam._m0[89u].x));
    float _1397 = fma(_1373, cbSceneParam._m0[90u].z, fma(_1372, cbSceneParam._m0[90u].y, _1371 * cbSceneParam._m0[90u].x));
    float _1400 = fma(_1373, cbSceneParam._m0[91u].z, fma(_1372, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1371));
    float _1415 = _644 * 0.5;
    float _1416 = _645 * 0.5;
    float _1417 = _646 * 0.5;
    float _1418 = dot(vec4(_1415, _1416, _1417, 1.0), vec4(_1349, _1352, _1355, _1358));
    float _1421 = dot(vec4(_1415, _1416, _1417, 1.0), vec4(_1348, _1351, _1354, _1357));
    float _1424 = dot(vec4(_1415, _1416, _1417, 1.0), vec4(_1347, _1350, _1353, _1356));
    float _1458;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1431 = dot(vec4(_1415, _1416, _1417, 1.0), vec4(_1034, _1038, _1041, _1044));
        float _1435 = dot(vec4(_1415, _1416, _1417, 1.0), vec4(_1036, _1039, _1042, _1045));
        float _1439 = dot(vec4(_1415, _1416, _1417, 1.0), vec4(_1037, _1040, _1043, _1046));
        float _1446 = dot(vec4(cbModelParam._m0[39u]), vec4(_1415, _1416, _1417, 1.0));
        _1458 = dot(vec3(isnan(0.0) ? _1439 : (isnan(_1439) ? 0.0 : max(_1439, 0.0)), isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0)), isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1446) ? 0.0 : (isnan(0.0) ? _1446 : max(0.0, _1446))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1458 = 1.0;
    }
    float _1469;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1460 = dot(vec4(cbModelParam._m0[40u]), vec4(_1415, _1416, _1417, 1.0));
        _1469 = dot(vec3(isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)), isnan(0.0) ? _1421 : (isnan(_1421) ? 0.0 : max(_1421, 0.0)), isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1460) ? 0.0 : (isnan(0.0) ? _1460 : max(0.0, _1460))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1469 = 1.0;
    }
    float _1473 = (_1469 * cbModelParam._m0[1u].x) + (_1458 * (1.0 - cbModelParam._m0[1u].x));
    float _1483 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _526);
    float _1484 = isnan(_1483) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1483 : min(cbModelParam._m0[25u].z, _1483));
    float _1566;
    float _1568;
    float _1570;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1533 = fma(_705, cbModelParam._m0[13u].z, fma(_701, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _697)) + cbModelParam._m0[13u].w;
        float _1537 = fma(_705, cbModelParam._m0[14u].z, fma(_701, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _697)) + cbModelParam._m0[14u].w;
        float _1541 = fma(_705, cbModelParam._m0[15u].z, fma(_701, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _697)) + cbModelParam._m0[15u].w;
        float _1544 = fma(_646, cbModelParam._m0[13u].z, fma(_645, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _644));
        float _1547 = fma(_646, cbModelParam._m0[14u].z, fma(_645, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _644));
        float _1550 = fma(_646, cbModelParam._m0[15u].z, fma(_645, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _644));
        float _1578;
        if (_1544 > 0.0)
        {
            _1578 = abs((1.0 - _1533) / _1544);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1544 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1533 + 1.0) / _1544);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1578 = frontier_phi_25_23_ladder;
        }
        float _1748;
        if (_1547 > 0.0)
        {
            _1748 = abs((1.0 - _1537) / _1547);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1547 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1537 + 1.0) / _1547);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1748 = frontier_phi_34_30_ladder;
        }
        float _2192;
        if (_1550 > 0.0)
        {
            _2192 = abs((1.0 - _1541) / _1550);
        }
        else
        {
            float frontier_phi_46_41_ladder;
            if (_1550 < 0.0)
            {
                frontier_phi_46_41_ladder = abs((_1541 + 1.0) / _1550);
            }
            else
            {
                frontier_phi_46_41_ladder = 5000.0;
            }
            _2192 = frontier_phi_46_41_ladder;
        }
        float _2194 = isnan(_1748) ? _1578 : (isnan(_1578) ? _1748 : min(_1578, _1748));
        float _2195 = isnan(_2192) ? _2194 : (isnan(_2194) ? _2192 : min(_2194, _2192));
        float _2199 = (_2195 * _1544) + _1533;
        float _2200 = (_2195 * _1547) + _1537;
        float _2201 = (_2195 * _1550) + _1541;
        float _2202 = _2195 * 9.9999997473787516355514526367188e-05;
        float _2204 = (-1.0) - _2202;
        float _2206 = _2202 + 1.0;
        float frontier_phi_24_46_ladder;
        float frontier_phi_24_46_ladder_1;
        float frontier_phi_24_46_ladder_2;
        if ((_2201 > _2206) || ((_2201 < _2204) || ((_2200 > _2206) || ((_2200 < _2204) || ((_2199 < _2204) || (_2199 > _2206))))))
        {
            frontier_phi_24_46_ladder = 0.0;
            frontier_phi_24_46_ladder_1 = 0.0;
            frontier_phi_24_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2451 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2201, cbModelParam._m0[9u].z, fma(_2200, cbModelParam._m0[9u].y, _2199 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2201, cbModelParam._m0[10u].z, fma(_2200, cbModelParam._m0[10u].y, _2199 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2201, cbModelParam._m0[11u].z, fma(_2200, cbModelParam._m0[11u].y, _2199 * cbModelParam._m0[11u].x))), _1484);
            frontier_phi_24_46_ladder = _2451.z * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_1 = _2451.y * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_2 = _2451.x * cbModelParam._m0[1u].y;
        }
        _1566 = frontier_phi_24_46_ladder_2;
        _1568 = frontier_phi_24_46_ladder_1;
        _1570 = frontier_phi_24_46_ladder;
    }
    else
    {
        vec4 _1554 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_644, _645, _646), _1484);
        _1566 = _1554.x * cbModelParam._m0[1u].y;
        _1568 = _1554.y * cbModelParam._m0[1u].y;
        _1570 = _1554.z * cbModelParam._m0[1u].y;
    }
    float _1574 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _526);
    float _1575 = isnan(_1574) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1574 : min(cbModelParam._m0[25u].w, _1574));
    float _1665;
    float _1667;
    float _1669;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1629 = fma(_705, cbModelParam._m0[21u].z, fma(_701, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _697)) + cbModelParam._m0[21u].w;
        float _1633 = fma(_705, cbModelParam._m0[22u].z, fma(_701, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _697)) + cbModelParam._m0[22u].w;
        float _1637 = fma(_705, cbModelParam._m0[23u].z, fma(_701, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _697)) + cbModelParam._m0[23u].w;
        float _1640 = fma(_646, cbModelParam._m0[21u].z, fma(_645, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _644));
        float _1643 = fma(_646, cbModelParam._m0[22u].z, fma(_645, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _644));
        float _1646 = fma(_646, cbModelParam._m0[23u].z, fma(_645, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _644));
        float _1753;
        if (_1640 > 0.0)
        {
            _1753 = abs((1.0 - _1629) / _1640);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1640 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1629 + 1.0) / _1640);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1753 = frontier_phi_36_32_ladder;
        }
        float _2219;
        if (_1643 > 0.0)
        {
            _2219 = abs((1.0 - _1633) / _1643);
        }
        else
        {
            float frontier_phi_48_43_ladder;
            if (_1643 < 0.0)
            {
                frontier_phi_48_43_ladder = abs((_1633 + 1.0) / _1643);
            }
            else
            {
                frontier_phi_48_43_ladder = 5000.0;
            }
            _2219 = frontier_phi_48_43_ladder;
        }
        float _2580;
        if (_1646 > 0.0)
        {
            _2580 = abs((1.0 - _1637) / _1646);
        }
        else
        {
            float frontier_phi_60_55_ladder;
            if (_1646 < 0.0)
            {
                frontier_phi_60_55_ladder = abs((_1637 + 1.0) / _1646);
            }
            else
            {
                frontier_phi_60_55_ladder = 5000.0;
            }
            _2580 = frontier_phi_60_55_ladder;
        }
        float _2582 = isnan(_2219) ? _1753 : (isnan(_1753) ? _2219 : min(_1753, _2219));
        float _2583 = isnan(_2580) ? _2582 : (isnan(_2582) ? _2580 : min(_2582, _2580));
        float _2587 = (_2583 * _1640) + _1629;
        float _2588 = (_2583 * _1643) + _1633;
        float _2589 = (_2583 * _1646) + _1637;
        float _2590 = _2583 * 9.9999997473787516355514526367188e-05;
        float _2591 = (-1.0) - _2590;
        float _2593 = _2590 + 1.0;
        float frontier_phi_33_60_ladder;
        float frontier_phi_33_60_ladder_1;
        float frontier_phi_33_60_ladder_2;
        if ((_2589 > _2593) || ((_2589 < _2591) || ((_2588 > _2593) || ((_2588 < _2591) || ((_2587 < _2591) || (_2587 > _2593))))))
        {
            frontier_phi_33_60_ladder = 0.0;
            frontier_phi_33_60_ladder_1 = 0.0;
            frontier_phi_33_60_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2726 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2589, cbModelParam._m0[17u].z, fma(_2588, cbModelParam._m0[17u].y, _2587 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2589, cbModelParam._m0[18u].z, fma(_2588, cbModelParam._m0[18u].y, _2587 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2589, cbModelParam._m0[19u].z, fma(_2588, cbModelParam._m0[19u].y, _2587 * cbModelParam._m0[19u].x))), _1575);
            frontier_phi_33_60_ladder = _2726.z * cbModelParam._m0[1u].z;
            frontier_phi_33_60_ladder_1 = _2726.y * cbModelParam._m0[1u].z;
            frontier_phi_33_60_ladder_2 = _2726.x * cbModelParam._m0[1u].z;
        }
        _1665 = frontier_phi_33_60_ladder_2;
        _1667 = frontier_phi_33_60_ladder_1;
        _1669 = frontier_phi_33_60_ladder;
    }
    else
    {
        vec4 _1649 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_644, _645, _646), _1575);
        _1665 = _1649.x * cbModelParam._m0[1u].z;
        _1667 = _1649.y * cbModelParam._m0[1u].z;
        _1669 = _1649.z * cbModelParam._m0[1u].z;
    }
    float _1681 = ((((1.0 - _665) * ((_652 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_665 * _652)) * _636;
    float _1682 = _1681 * ((cbModelParam._m0[1u].w * (_1665 - _1566)) + _1566);
    float _1683 = _1681 * ((cbModelParam._m0[1u].w * (_1667 - _1568)) + _1568);
    float _1684 = _1681 * ((cbModelParam._m0[1u].w * (_1669 - _1570)) + _1570);
    float _1687 = fma(_1684, cbSceneParam._m0[89u].z, fma(_1683, cbSceneParam._m0[89u].y, _1682 * cbSceneParam._m0[89u].x));
    float _1690 = fma(_1684, cbSceneParam._m0[90u].z, fma(_1683, cbSceneParam._m0[90u].y, _1682 * cbSceneParam._m0[90u].x));
    float _1693 = fma(_1684, cbSceneParam._m0[91u].z, fma(_1683, cbSceneParam._m0[91u].y, _1682 * cbSceneParam._m0[91u].x));
    float _1727 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1731 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1735 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1739 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1740 = _1727 / _1739;
    float _1741 = _1731 / _1739;
    float _1742 = _1735 / _1739;
    float _1889;
    float _1890;
    float _1891;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1769 = ((uint(_1742 > cbSceneParam._m0[59u].y) + uint(_1742 > cbSceneParam._m0[59u].x)) + uint(_1742 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1770 = _1769 + 43u;
        uint _1778 = _1769 + 44u;
        uint _1786 = _1769 + 45u;
        uint _1794 = _1769 + 46u;
        float _1805 = fma(_1739, cbSceneParam._m0[_1770].w, fma(_1735, cbSceneParam._m0[_1770].z, fma(_1731, cbSceneParam._m0[_1770].y, _1727 * cbSceneParam._m0[_1770].x)));
        float _1809 = fma(_1739, cbSceneParam._m0[_1778].w, fma(_1735, cbSceneParam._m0[_1778].z, fma(_1731, cbSceneParam._m0[_1778].y, _1727 * cbSceneParam._m0[_1778].x)));
        float _1817 = fma(_1739, cbSceneParam._m0[_1794].w, fma(_1735, cbSceneParam._m0[_1794].z, fma(_1731, cbSceneParam._m0[_1794].y, _1727 * cbSceneParam._m0[_1794].x)));
        float _1822 = cbSceneParam._m0[33u].z * _1817;
        float _1824 = cbSceneParam._m0[33u].w * _1817;
        float _1827 = fma(_1739, cbSceneParam._m0[_1786].w, fma(_1735, cbSceneParam._m0[_1786].z, fma(_1731, cbSceneParam._m0[_1786].y, _1727 * cbSceneParam._m0[_1786].x))) / _1817;
        float _1875 = (cbSceneParam._m0[33u].x - sqrt(((_1741 * _1741) + (_1740 * _1740)) + (_1742 * _1742))) * cbSceneParam._m0[33u].y;
        float _3949 = isnan(0.0) ? _1875 : (isnan(_1875) ? 0.0 : max(_1875, 0.0));
        float _1882 = (isnan(1.0) ? _3949 : (isnan(_3949) ? 1.0 : min(_3949, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1822 + _1805) / _1817, (_1824 + _1809) / _1817), _1827), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1824 + _1805) / _1817, (_1809 - _1822) / _1817), _1827), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1805 - _1822) / _1817, (_1809 - _1824) / _1817), _1827), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1805 - _1824) / _1817, (_1822 + _1809) / _1817), _1827), 0.0)).x), vec4(0.25)));
        _1889 = 1.0 - (_1882 * cbSceneParam._m0[34u].x);
        _1890 = 1.0 - (_1882 * cbSceneParam._m0[34u].y);
        _1891 = 1.0 - (_1882 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1889 = 1.0;
        _1890 = 1.0;
        _1891 = 1.0;
    }
    float _1955;
    float _1957;
    float _1959;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1943 = fma(_1739, cbSceneParam._m0[63u].w, fma(_1735, cbSceneParam._m0[63u].z, fma(_1731, cbSceneParam._m0[63u].y, _1727 * cbSceneParam._m0[63u].x)));
        float _1944 = fma(_1739, cbSceneParam._m0[60u].w, fma(_1735, cbSceneParam._m0[60u].z, fma(_1731, cbSceneParam._m0[60u].y, _1727 * cbSceneParam._m0[60u].x))) / _1943;
        float _1945 = fma(_1739, cbSceneParam._m0[61u].w, fma(_1735, cbSceneParam._m0[61u].z, fma(_1731, cbSceneParam._m0[61u].y, _1727 * cbSceneParam._m0[61u].x))) / _1943;
        float frontier_phi_45_44_ladder;
        float frontier_phi_45_44_ladder_1;
        float frontier_phi_45_44_ladder_2;
        if ((((_1944 >= cbSceneParam._m0[64u].x) && (_1945 >= cbSceneParam._m0[64u].y)) && (_1944 <= cbSceneParam._m0[64u].z)) && (_1945 <= cbSceneParam._m0[64u].w))
        {
            float _2232 = fma(_1739, cbSceneParam._m0[62u].w, fma(_1735, cbSceneParam._m0[62u].z, fma(_1731, cbSceneParam._m0[62u].y, _1727 * cbSceneParam._m0[62u].x))) / _1943;
            float _2236 = isnan(cbSceneParam._m0[41u].w) ? _2232 : (isnan(_2232) ? cbSceneParam._m0[41u].w : max(_2232, cbSceneParam._m0[41u].w));
            float _2279 = (cbSceneParam._m0[33u].x - sqrt(((_1741 * _1741) + (_1740 * _1740)) + (_1742 * _1742))) * cbSceneParam._m0[33u].y;
            float _3965 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
            float _2286 = (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1944, cbSceneParam._m0[33u].w + _1945), _2236), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1944, _1945 - cbSceneParam._m0[33u].z), _2236), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1944 - cbSceneParam._m0[33u].z, _1945 - cbSceneParam._m0[33u].w), _2236), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1944 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1945), _2236), 0.0)).x), vec4(0.25)));
            float _2290 = 1.0 - (_2286 * cbSceneParam._m0[34u].x);
            float _2291 = 1.0 - (_2286 * cbSceneParam._m0[34u].y);
            float _2292 = 1.0 - (_2286 * cbSceneParam._m0[34u].z);
            frontier_phi_45_44_ladder = isnan(_2292) ? _1891 : (isnan(_1891) ? _2292 : min(_1891, _2292));
            frontier_phi_45_44_ladder_1 = isnan(_2291) ? _1890 : (isnan(_1890) ? _2291 : min(_1890, _2291));
            frontier_phi_45_44_ladder_2 = isnan(_2290) ? _1889 : (isnan(_1889) ? _2290 : min(_1889, _2290));
        }
        else
        {
            frontier_phi_45_44_ladder = _1891;
            frontier_phi_45_44_ladder_1 = _1890;
            frontier_phi_45_44_ladder_2 = _1889;
        }
        _1955 = frontier_phi_45_44_ladder_2;
        _1957 = frontier_phi_45_44_ladder_1;
        _1959 = frontier_phi_45_44_ladder;
    }
    else
    {
        _1955 = _1889;
        _1957 = _1890;
        _1959 = _1891;
    }
    uvec4 _1964 = floatBitsToUint(cbInstanceData._m0[_610 + 5u]);
    uint _1966 = _1964.x * 14u;
    uint _1967 = _1966 + 13u;
    float _1972 = _636 + (-1.0);
    float _1975 = (cbLight._m0[_1967].x * _1972) + 1.0;
    float _1976 = (cbLight._m0[_1967].y * _1972) + 1.0;
    uint _1977 = _1966 + 5u;
    float _1983 = isnan(1.0) ? _1976 : (isnan(_1976) ? 1.0 : min(_1976, 1.0));
    uint _1987 = _1966 + 4u;
    float _1996 = isnan(1.0) ? _1975 : (isnan(_1975) ? 1.0 : min(_1975, 1.0));
    uint _2000 = _1966 | 1u;
    float _2011 = dot(vec3(cbLight._m0[_1966].xyz), vec3(_523, _524, _525));
    float _2014 = dot(vec3(cbLight._m0[_2000].xyz), vec3(_523, _524, _525));
    float _4001 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _4012 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
    float _2019 = (isnan(1.0) ? _4001 : (isnan(_4001) ? 1.0 : min(_4001, 1.0))) * 0.3183098733425140380859375;
    float _2021 = (isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * 0.3183098733425140380859375;
    float _2028 = ((cbLight._m0[_1977].x * _1983) * _2021) + (((cbLight._m0[_1987].x * _1955) * _1996) * _2019);
    float _2029 = ((_1983 * cbLight._m0[_1977].y) * _2021) + (((cbLight._m0[_1987].y * _1957) * _1996) * _2019);
    float _2030 = ((_1983 * cbLight._m0[_1977].z) * _2021) + (((cbLight._m0[_1987].z * _1959) * _1996) * _2019);
    uint _2032 = _1966 + 8u;
    float _2045 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1966].w)) * _526) * 0.949999988079071044921875);
    float _2046 = _2045 * _2045;
    float _2047 = cbLight._m0[_1966].x + _550;
    float _2048 = cbLight._m0[_1966].y + _551;
    float _2049 = cbLight._m0[_1966].z + _552;
    float _2053 = inversesqrt(dot(vec3(_2047, _2048, _2049), vec3(_2047, _2048, _2049)));
    float _2054 = _2053 * _2047;
    float _2055 = _2053 * _2048;
    float _2056 = _2053 * _2049;
    float _2057 = dot(vec3(_523, _524, _525), vec3(cbLight._m0[_1966].xyz));
    float _4023 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
    float _2060 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
    float _4034 = isnan(0.0) ? _637 : (isnan(_637) ? 0.0 : max(_637, 0.0));
    float _2061 = isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0));
    float _2062 = dot(vec3(_523, _524, _525), vec3(_2054, _2055, _2056));
    float _4045 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
    float _2065 = isnan(1.0) ? _4045 : (isnan(_4045) ? 1.0 : min(_4045, 1.0));
    float _2066 = dot(vec3(cbLight._m0[_1966].xyz), vec3(_2054, _2055, _2056));
    float _4056 = isnan(0.0) ? _2066 : (isnan(_2066) ? 0.0 : max(_2066, 0.0));
    float _2070 = _2046 * _2046;
    float _2074 = ((_2065 * _2065) * (_2070 + (-1.0))) + 1.0;
    float _2085 = (exp2(log2(1.0 - (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2086 = 1.0 - _2046;
    float _2097 = (0.5 / (((_2061 * ((_2060 * _2086) + _2046)) + 9.9999999392252902907785028219223e-09) + (((_2061 * _2086) + _2046) * _2060))) * _2060;
    float _4067 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
    float _2099 = (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) * (_2070 / ((_2074 * _2074) * 3.141590118408203125));
    uint _2113 = _1966 + 9u;
    float _2124 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2000].w)) * _526) * 0.949999988079071044921875);
    float _2125 = _2124 * _2124;
    float _2126 = cbLight._m0[_2000].x + _550;
    float _2127 = cbLight._m0[_2000].y + _551;
    float _2128 = cbLight._m0[_2000].z + _552;
    float _2132 = inversesqrt(dot(vec3(_2126, _2127, _2128), vec3(_2126, _2127, _2128)));
    float _2133 = _2132 * _2126;
    float _2134 = _2132 * _2127;
    float _2135 = _2132 * _2128;
    float _2136 = dot(vec3(_523, _524, _525), vec3(cbLight._m0[_2000].xyz));
    float _4078 = isnan(0.0) ? _2136 : (isnan(_2136) ? 0.0 : max(_2136, 0.0));
    float _2139 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _2140 = dot(vec3(_523, _524, _525), vec3(_2133, _2134, _2135));
    float _4089 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
    float _2143 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _2144 = dot(vec3(cbLight._m0[_2000].xyz), vec3(_2133, _2134, _2135));
    float _4100 = isnan(0.0) ? _2144 : (isnan(_2144) ? 0.0 : max(_2144, 0.0));
    float _2148 = _2125 * _2125;
    float _2152 = ((_2143 * _2143) * (_2148 + (-1.0))) + 1.0;
    float _2161 = (exp2(log2(1.0 - (isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2162 = 1.0 - _2125;
    float _2172 = (0.5 / (((_2061 * ((_2139 * _2162) + _2125)) + 9.9999999392252902907785028219223e-09) + (((_2061 * _2162) + _2125) * _2139))) * _2139;
    float _4111 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
    float _2174 = (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0))) * (_2148 / ((_2152 * _2152) * 3.141590118408203125));
    float _2184 = (((_2161 * cbLight._m0[_2113].x) * _2174) * _1983) + ((((cbLight._m0[_2032].x * _1955) * _2085) * _2099) * _1996);
    float _2185 = (((_2161 * cbLight._m0[_2113].y) * _2174) * _1983) + ((((cbLight._m0[_2032].y * _1957) * _2085) * _2099) * _1996);
    float _2186 = (((_2161 * cbLight._m0[_2113].z) * _2174) * _1983) + ((((cbLight._m0[_2032].z * _1959) * _2085) * _2099) * _1996);
    float _2349;
    float _2351;
    float _2353;
    float _2355;
    float _2357;
    float _2359;
    if (_1964.y == 0u)
    {
        uvec4 _2304 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2305 = _2304.x;
        uint _2316 = uint((float(_2304.y) * floor(float(uint(cbSceneParam._m0[85u].y * _572) / _2305))) + floor(float(uint(cbSceneParam._m0[85u].x * _571) / _2305)));
        float _2326 = (log2(_1742 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2327 = isnan(0.0) ? _2326 : (isnan(_2326) ? 0.0 : max(_2326, 0.0));
        uint _2330 = uint(isnan(14.0) ? _2327 : (isnan(_2327) ? 14.0 : min(_2327, 14.0)));
        uvec4 _2335 = texelFetch(g_lightClusterGridBuffer, int(((_2330 << 2u) + (_2316 << 6u)) >> 2u));
        uint _2336 = _2335.x;
        uint _2337 = _2304.z;
        float _2460;
        float _2462;
        float _2464;
        float _2466;
        float _2468;
        float _2470;
        if (((((1u << ((_2337 >> 4u) & 15u)) + 4294967295u) & _2336) == 0u) || ((_2337 & 240u) == 0u))
        {
            _2460 = 0.0;
            _2462 = 0.0;
            _2464 = 0.0;
            _2466 = 0.0;
            _2468 = 0.0;
            _2470 = 0.0;
        }
        else
        {
            float _2461;
            float _2463;
            float _2465;
            float _2467;
            float _2469;
            float _2471;
            float _2638 = 0.0;
            float _2639 = 0.0;
            float _2640 = 0.0;
            float _2641 = 0.0;
            float _2642 = 0.0;
            float _2643 = 0.0;
            uint _2644 = 0u;
            uint _2653;
            bool _2654;
            for (;;)
            {
                _2653 = texelFetch(g_lightClassification, int((((_2330 << 5u) + (_2316 << 9u)) + (_2644 << 2u)) >> 2u)).x;
                _2654 = _2653 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2654)
                {
                    frontier_phi_71_pred = _2641;
                    frontier_phi_71_pred_1 = _2640;
                    frontier_phi_71_pred_2 = _2639;
                    frontier_phi_71_pred_3 = _2638;
                    frontier_phi_71_pred_4 = _2642;
                    frontier_phi_71_pred_5 = _2643;
                }
                else
                {
                    float _2804;
                    float _2805;
                    float _2806;
                    float _2807;
                    float _2808;
                    float _2809;
                    uint _2810;
                    _2804 = _2638;
                    _2805 = _2639;
                    _2806 = _2640;
                    _2807 = _2641;
                    _2808 = _2642;
                    _2809 = _2643;
                    _2810 = _2653;
                    float _2731;
                    float _2732;
                    float _2733;
                    float _2734;
                    float _2735;
                    float _2736;
                    for (;;)
                    {
                        uint _2814 = uint(findLSB(_2810)) + (_2644 << 5u);
                        uint _2811 = (_2810 + 4294967295u) & _2810;
                        uint _2816 = _2814 * 48u;
                        vec4 _2830 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2816)).x, texelFetch(g_PointLightRenderingBuffer, int(_2816 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2816 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2816 + 3u)).x));
                        uint _2836 = (_2814 * 48u) + 4u;
                        vec4 _2849 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2836)).x, texelFetch(g_PointLightRenderingBuffer, int(_2836 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2836 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2836 + 3u)).x));
                        uint _2855 = (_2814 * 48u) + 8u;
                        vec3 _2866 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2855)).x, texelFetch(g_PointLightRenderingBuffer, int(_2855 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2855 + 2u)).x));
                        float _2870 = _2830.x - _1740;
                        float _2871 = _2830.y - _1741;
                        float _2872 = _2830.z - _1742;
                        float _2873 = dot(vec3(_2870, _2871, _2872), vec3(_2870, _2871, _2872));
                        float _2876 = inversesqrt(_2873);
                        float _2877 = _2876 * _2870;
                        float _2878 = _2876 * _2871;
                        float _2879 = _2876 * _2872;
                        float _2880 = dot(vec3(_591, _594, _597), vec3(_2877, _2878, _2879));
                        float _2885 = 1.0 - (_2873 * _2830.w);
                        float _4132 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
                        float _2886 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
                        float _2887 = sqrt(_2873) * _2849.w;
                        float _2890 = 1.39999997615814208984375 / (_2887 + 1.39999997615814208984375);
                        float _2891 = _2890 * _2890;
                        float _2894 = ((1.0 - _2891) * _2880) + _2891;
                        float _2897 = _2887 * _2887;
                        float _2901 = ((isnan(0.0) ? _2894 : (isnan(_2894) ? 0.0 : max(_2894, 0.0))) * _2886) / ((_2897 * 0.699999988079071044921875) + 1.0);
                        float _2905 = (-0.0) - _1740;
                        float _2906 = (-0.0) - _1741;
                        float _2907 = (-0.0) - _1742;
                        float _2911 = inversesqrt(dot(vec3(_2905, _2906, _2907), vec3(_2905, _2906, _2907)));
                        float _2912 = _2911 * _2905;
                        float _2913 = _2911 * _2906;
                        float _2914 = _2911 * _2907;
                        float _2921 = exp2(log2(1.0 / ((_2897 * 3.5) + 5.0)) * 0.25);
                        float _2922 = 1.0 - _652;
                        float _2929 = sqrt(1.0 - ((1.0 - (_2922 * _2922)) * (1.0 - (_2921 * _2921))));
                        float _2930 = _2929 * _2929;
                        float _2931 = _2930 * _2930;
                        float _2932 = _2912 + _2877;
                        float _2933 = _2913 + _2878;
                        float _2934 = _2914 + _2879;
                        float _2938 = inversesqrt(dot(vec3(_2932, _2933, _2934), vec3(_2932, _2933, _2934)));
                        float _2942 = dot(vec3(_591, _594, _597), vec3(_2912, _2913, _2914));
                        float _4148 = isnan(0.0) ? _2942 : (isnan(_2942) ? 0.0 : max(_2942, 0.0));
                        float _2945 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
                        float _2946 = dot(vec3(_591, _594, _597), vec3(_2938 * _2932, _2938 * _2933, _2938 * _2934));
                        float _4159 = isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0));
                        float _2949 = isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0));
                        float _2953 = ((_2949 * _2949) * (_2931 + (-1.0))) + 1.0;
                        float _2954 = _2890 * _2930;
                        float _2955 = _2954 * _2954;
                        float _2958 = ((1.0 - _2955) * _2880) + _2955;
                        float _4170 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
                        float _2959 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
                        float _2960 = 1.0 - _2930;
                        float _2970 = (0.5 / (((_2959 * ((_2945 * _2960) + _2930)) + 9.9999999392252902907785028219223e-09) + (((_2959 * _2960) + _2930) * _2945))) * _2959;
                        float _4181 = isnan(0.0) ? _2970 : (isnan(_2970) ? 0.0 : max(_2970, 0.0));
                        float _2981 = (((_2931 * 3.1415927410125732421875) * (isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0)))) / ((_2953 * _2953) * ((_2897 * 2.1991131305694580078125) + 3.141590118408203125))) * _2886;
                        _2734 = (_2901 * _2849.x) + _2807;
                        _2735 = (_2901 * _2849.y) + _2808;
                        _2736 = (_2901 * _2849.z) + _2809;
                        _2731 = (_2981 * _2866.x) + _2804;
                        _2732 = (_2981 * _2866.y) + _2805;
                        _2733 = (_2981 * _2866.z) + _2806;
                        if (_2811 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2804 = _2731;
                            _2805 = _2732;
                            _2806 = _2733;
                            _2807 = _2734;
                            _2808 = _2735;
                            _2809 = _2736;
                            _2810 = _2811;
                        }
                    }
                    frontier_phi_71_pred = _2734;
                    frontier_phi_71_pred_1 = _2733;
                    frontier_phi_71_pred_2 = _2732;
                    frontier_phi_71_pred_3 = _2731;
                    frontier_phi_71_pred_4 = _2735;
                    frontier_phi_71_pred_5 = _2736;
                }
                _2467 = frontier_phi_71_pred;
                _2465 = frontier_phi_71_pred_1;
                _2463 = frontier_phi_71_pred_2;
                _2461 = frontier_phi_71_pred_3;
                _2469 = frontier_phi_71_pred_4;
                _2471 = frontier_phi_71_pred_5;
                uint _2645 = _2644 + 1u;
                if (_2645 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2638 = _2461;
                    _2639 = _2463;
                    _2640 = _2465;
                    _2641 = _2467;
                    _2642 = _2469;
                    _2643 = _2471;
                    _2644 = _2645;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2460 = _2461;
            _2462 = _2463;
            _2464 = _2465;
            _2466 = _2467;
            _2468 = _2469;
            _2470 = _2471;
        }
        uvec4 _2474 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2475 = _2474.z;
        uint _2477 = (_2475 >> 8u) & 15u;
        float _2606;
        float _2608;
        float _2610;
        float _2612;
        float _2614;
        float _2616;
        if (((4294967295u << _2477) & _2336) == 0u)
        {
            _2606 = _2460;
            _2608 = _2462;
            _2610 = _2464;
            _2612 = _2466;
            _2614 = _2468;
            _2616 = _2470;
        }
        else
        {
            float _2631 = inversesqrt(dot(vec3(_1740, _1741, _1742), vec3(_1740, _1741, _1742)));
            float _2632 = _2631 * _1740;
            float _2633 = _2631 * _1741;
            float _2634 = _2631 * _1742;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2477 < ((_2475 >> 12u) & 15u))
            {
                float _2607;
                float _2609;
                float _2611;
                float _2613;
                float _2615;
                float _2617;
                float _2787 = _2460;
                float _2788 = _2462;
                float _2789 = _2464;
                float _2790 = _2466;
                float _2791 = _2468;
                float _2792 = _2470;
                uint _2793 = _2477;
                uint _2802;
                bool _2803;
                for (;;)
                {
                    _2802 = texelFetch(g_lightClassification, int((((_2330 << 5u) + (_2316 << 9u)) + (_2793 << 2u)) >> 2u)).x;
                    _2803 = _2802 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2803)
                    {
                        frontier_phi_82_pred = _2790;
                        frontier_phi_82_pred_1 = _2789;
                        frontier_phi_82_pred_2 = _2788;
                        frontier_phi_82_pred_3 = _2787;
                        frontier_phi_82_pred_4 = _2792;
                        frontier_phi_82_pred_5 = _2791;
                    }
                    else
                    {
                        float _2995;
                        float _2996;
                        float _2997;
                        float _2998;
                        float _2999;
                        float _3000;
                        float _3288;
                        float _3289;
                        float _3290;
                        float _3291;
                        float _3292;
                        float _3293;
                        float _3008 = _2787;
                        float _3009 = _2788;
                        float _3010 = _2789;
                        float _3011 = _2790;
                        float _3012 = _2791;
                        float _3013 = _2792;
                        uint _3014 = _2802;
                        uint _3015;
                        vec4 _3040;
                        float _3041;
                        vec4 _3056;
                        vec3 _3068;
                        vec4 _3083;
                        vec4 _3098;
                        float _3144;
                        bool _3145;
                        for (;;)
                        {
                            uint _3025 = ((_2793 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3014));
                            _3015 = (_3014 + 4294967295u) & _3014;
                            uint _3027 = _3025 * 40u;
                            _3040 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3027)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3027 + 3u)).x));
                            _3041 = _3040.w;
                            uint _3043 = (_3025 * 40u) + 4u;
                            _3056 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3043)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3043 + 3u)).x));
                            uint _3058 = (_3025 * 40u) + 8u;
                            _3068 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3058)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3058 + 2u)).x));
                            uint _3070 = (_3025 * 40u) + 16u;
                            _3083 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3070)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3070 + 3u)).x));
                            uint _3085 = (_3025 * 40u) + 20u;
                            _3098 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3085)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3085 + 3u)).x));
                            uint _3100 = (_3025 * 40u) + 24u;
                            vec4 _3113 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3100)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3100 + 3u)).x));
                            uint _3119 = (_3025 * 40u) + 28u;
                            vec4 _3132 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3119)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3119 + 3u)).x));
                            _3144 = fma(_1742, _3132.z, fma(_1741, _3132.y, _3132.x * _1740)) + _3132.w;
                            _3145 = !((fma(_1742, _3113.z, fma(_1741, _3113.y, _3113.x * _1740)) + _3113.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3145)
                            {
                                float _3172 = _3040.x - _1740;
                                float _3173 = _3040.y - _1741;
                                float _3174 = _3040.z - _1742;
                                float _3175 = dot(vec3(_3172, _3173, _3174), vec3(_3172, _3173, _3174));
                                float _3178 = inversesqrt(_3175);
                                float _3179 = _3178 * _3172;
                                float _3180 = _3178 * _3173;
                                float _3181 = _3178 * _3174;
                                float _3185 = 1.0 - (_3175 / (_3041 * _3041));
                                float _4192 = isnan(0.0) ? _3185 : (isnan(_3185) ? 0.0 : max(_3185, 0.0));
                                float _3186 = isnan(1.0) ? _4192 : (isnan(_4192) ? 1.0 : min(_4192, 1.0));
                                float _3190 = sqrt(_3175) * _3056.w;
                                float _3192 = 1.39999997615814208984375 / (_3190 + 1.39999997615814208984375);
                                float _3193 = _3192 * _3192;
                                float _3196 = ((1.0 - _3193) * dot(vec3(_3179, _3180, _3181), vec3(_591, _594, _597))) + _3193;
                                float _3199 = _3190 * _3190;
                                float _3203 = (fma(_1742, _3083.z, fma(_1741, _3083.y, _3083.x * _1740)) + _3083.w) / _3144;
                                float _3204 = (fma(_1742, _3098.z, fma(_1741, _3098.y, _3098.x * _1740)) + _3098.w) / _3144;
                                float _3208 = 1.0 - dot(vec2(_3203, _3204), vec2(_3203, _3204));
                                float _4208 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                                float _3209 = isnan(1.0) ? _4208 : (isnan(_4208) ? 1.0 : min(_4208, 1.0));
                                float _3210 = _3209 * (((isnan(0.0) ? _3196 : (isnan(_3196) ? 0.0 : max(_3196, 0.0))) * _3186) / ((_3199 * 0.699999988079071044921875) + 1.0));
                                float _3222 = exp2(log2(1.0 / ((_3199 * 3.5) + 5.0)) * 0.25);
                                float _3223 = 1.0 - _652;
                                float _3230 = sqrt(1.0 - ((1.0 - (_3223 * _3223)) * (1.0 - (_3222 * _3222))));
                                float _3231 = _3230 * _3230;
                                float _3232 = _3231 * _3231;
                                float _3233 = _3179 - _2632;
                                float _3234 = _3180 - _2633;
                                float _3235 = _3181 - _2634;
                                float _3239 = inversesqrt(dot(vec3(_3233, _3234, _3235), vec3(_3233, _3234, _3235)));
                                float _3243 = dot(vec3(_591, _594, _597), vec3((-0.0) - _2632, (-0.0) - _2633, (-0.0) - _2634));
                                float _4219 = isnan(0.0) ? _3243 : (isnan(_3243) ? 0.0 : max(_3243, 0.0));
                                float _3246 = isnan(1.0) ? _4219 : (isnan(_4219) ? 1.0 : min(_4219, 1.0));
                                float _3247 = dot(vec3(_591, _594, _597), vec3(_3239 * _3233, _3239 * _3234, _3239 * _3235));
                                float _4230 = isnan(0.0) ? _3247 : (isnan(_3247) ? 0.0 : max(_3247, 0.0));
                                float _3250 = isnan(1.0) ? _4230 : (isnan(_4230) ? 1.0 : min(_4230, 1.0));
                                float _3254 = ((_3250 * _3250) * (_3232 + (-1.0))) + 1.0;
                                float _3255 = _3192 * _3231;
                                float _3256 = _3255 * _3255;
                                float _3262 = ((1.0 - _3256) * dot(vec3(_591, _594, _597), vec3(_3179, _3180, _3181))) + _3256;
                                float _4241 = isnan(0.0) ? _3262 : (isnan(_3262) ? 0.0 : max(_3262, 0.0));
                                float _3263 = isnan(1.0) ? _4241 : (isnan(_4241) ? 1.0 : min(_4241, 1.0));
                                float _3264 = 1.0 - _3231;
                                float _3274 = (0.5 / (((_3263 * ((_3246 * _3264) + _3231)) + 9.9999999392252902907785028219223e-09) + (((_3263 * _3264) + _3231) * _3246))) * _3263;
                                float _4252 = isnan(0.0) ? _3274 : (isnan(_3274) ? 0.0 : max(_3274, 0.0));
                                float _3284 = (_3209 * _3186) * (((_3232 * 3.1415927410125732421875) * (isnan(1.0) ? _4252 : (isnan(_4252) ? 1.0 : min(_4252, 1.0)))) / ((_3254 * _3254) * ((_3199 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3210 * _3056.x;
                                frontier_phi_88_pred_1 = _3284 * _3068.z;
                                frontier_phi_88_pred_2 = _3284 * _3068.y;
                                frontier_phi_88_pred_3 = _3284 * _3068.x;
                                frontier_phi_88_pred_4 = _3210 * _3056.z;
                                frontier_phi_88_pred_5 = _3210 * _3056.y;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3291 = frontier_phi_88_pred;
                            _3290 = frontier_phi_88_pred_1;
                            _3289 = frontier_phi_88_pred_2;
                            _3288 = frontier_phi_88_pred_3;
                            _3293 = frontier_phi_88_pred_4;
                            _3292 = frontier_phi_88_pred_5;
                            _2998 = _3291 + _3011;
                            _2999 = _3292 + _3012;
                            _3000 = _3293 + _3013;
                            _2995 = _3288 + _3008;
                            _2996 = _3289 + _3009;
                            _2997 = _3290 + _3010;
                            if (_3015 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3008 = _2995;
                                _3009 = _2996;
                                _3010 = _2997;
                                _3011 = _2998;
                                _3012 = _2999;
                                _3013 = _3000;
                                _3014 = _3015;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _2998;
                        frontier_phi_82_pred_1 = _2997;
                        frontier_phi_82_pred_2 = _2996;
                        frontier_phi_82_pred_3 = _2995;
                        frontier_phi_82_pred_4 = _3000;
                        frontier_phi_82_pred_5 = _2999;
                    }
                    _2613 = frontier_phi_82_pred;
                    _2611 = frontier_phi_82_pred_1;
                    _2609 = frontier_phi_82_pred_2;
                    _2607 = frontier_phi_82_pred_3;
                    _2617 = frontier_phi_82_pred_4;
                    _2615 = frontier_phi_82_pred_5;
                    uint _2794 = _2793 + 1u;
                    if (_2794 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2787 = _2607;
                        _2788 = _2609;
                        _2789 = _2611;
                        _2790 = _2613;
                        _2791 = _2615;
                        _2792 = _2617;
                        _2793 = _2794;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2617;
                frontier_phi_62_63_ladder_1 = _2615;
                frontier_phi_62_63_ladder_2 = _2613;
                frontier_phi_62_63_ladder_3 = _2609;
                frontier_phi_62_63_ladder_4 = _2607;
                frontier_phi_62_63_ladder_5 = _2611;
            }
            else
            {
                frontier_phi_62_63_ladder = _2470;
                frontier_phi_62_63_ladder_1 = _2468;
                frontier_phi_62_63_ladder_2 = _2466;
                frontier_phi_62_63_ladder_3 = _2462;
                frontier_phi_62_63_ladder_4 = _2460;
                frontier_phi_62_63_ladder_5 = _2464;
            }
            _2606 = frontier_phi_62_63_ladder_4;
            _2608 = frontier_phi_62_63_ladder_3;
            _2610 = frontier_phi_62_63_ladder_5;
            _2612 = frontier_phi_62_63_ladder_2;
            _2614 = frontier_phi_62_63_ladder_1;
            _2616 = frontier_phi_62_63_ladder;
        }
        float _2621 = isnan(1.0) ? _636 : (isnan(_636) ? 1.0 : min(_636, 1.0));
        _2349 = (_2621 * _2612) + _2028;
        _2351 = (_2621 * _2614) + _2029;
        _2353 = (_2621 * _2616) + _2030;
        _2355 = ((_2606 * 0.039999999105930328369140625) * _2621) + _2184;
        _2357 = ((_2608 * 0.039999999105930328369140625) * _2621) + _2185;
        _2359 = ((_2610 * 0.039999999105930328369140625) * _2621) + _2186;
    }
    else
    {
        _2349 = _2028;
        _2351 = _2029;
        _2353 = _2030;
        _2355 = _2184;
        _2357 = _2185;
        _2359 = _2186;
    }
    uint _2365 = _612 + uint(cbMatDynParam._m0[0u].w);
    float _4268 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _4279 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _4290 = isnan(0.0) ? _624 : (isnan(_624) ? 0.0 : max(_624, 0.0));
    float _2390 = (((isnan(1.0) ? _4268 : (isnan(_4268) ? 1.0 : min(_4268, 1.0))) * (_2349 + ((isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0))) * _636))) + ((_2355 + ((isnan(0.0) ? _1687 : (isnan(_1687) ? 0.0 : max(_1687, 0.0))) * _1473)) * cbPerFrame._m0[3u].x)) + (((_467.x * _287) * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2365].x);
    float _2392 = ((((_467.y * _287) * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2365].y) + ((_2357 + ((isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0))) * _1473)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4279 : (isnan(_4279) ? 1.0 : min(_4279, 1.0))) * (_2351 + ((isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0))) * _636)));
    float _2394 = ((((_467.z * _287) * cbMtdParam._m0[9u].z) * cbInstanceData._m0[_2365].z) + ((_2359 + ((isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0))) * _1473)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4290 : (isnan(_4290) ? 1.0 : min(_4290, 1.0))) * (_2353 + ((isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0))) * _636)));
    float _2395 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0));
    float _2396 = isnan(0.0) ? _2392 : (isnan(_2392) ? 0.0 : max(_2392, 0.0));
    float _2397 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    uint _2398 = _610 + 6u;
    float _2406 = _571 / cbSceneParam._m0[86u].x;
    float _2407 = _572 / cbSceneParam._m0[86u].y;
    vec4 _2421 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2406, _2407, (log2((isnan(cbSceneParam._m0[77u].w) ? _545 : (isnan(_545) ? cbSceneParam._m0[77u].w : min(_545, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2423 = _2421.x;
    float _2424 = _2421.y;
    float _2425 = _2421.z;
    float _2426 = _2421.w;
    float _2522;
    float _2524;
    float _2526;
    float _2528;
    if (_545 > cbSceneParam._m0[78u].w)
    {
        float _2485 = isnan(_545) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _545 : min(cbSceneParam._m0[80u].w, _545));
        float _2486 = _2485 / _545;
        float _2497 = _2486 * _269;
        float _2498 = _270 * _2486;
        float _2499 = (-0.0) - _2498;
        float _2500 = _2486 * _271;
        float _2502 = (cbSceneParam._m0[77u].w * _2499) / _2485;
        float _2503 = _2502 + cbSceneParam._m0[79u].w;
        float _2504 = cbSceneParam._m0[79u].w - _2498;
        float _2510 = sqrt(((_2497 * _2497) + (_2498 * _2498)) + (_2500 * _2500));
        float _2513 = (1.0 - (cbSceneParam._m0[77u].w / _2485)) * _2510;
        float _2518 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2520 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2744;
        if (abs((_2499 - _2502) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2744 = ((((_2503 > 0.0) ? exp2(_2518 * _2503) : (2.0 - exp2(_2520 * _2503))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2513;
        }
        else
        {
            float _2667 = 1.0 / cbSceneParam._m0[80u].x;
            float _2668 = isnan(_2504) ? _2503 : (isnan(_2503) ? _2504 : max(_2503, _2504));
            float _2669 = isnan(_2504) ? _2503 : (isnan(_2503) ? _2504 : min(_2503, _2504));
            float _2678 = isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : min(_2668, 0.0));
            float _2679 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : min(_2669, 0.0));
            _2744 = ((abs(_2510 / _2499) * cbSceneParam._m0[80u].y) * ((((_2678 - _2679) * 2.0) - ((exp2(_2518 * (isnan(0.0) ? _2668 : (isnan(_2668) ? 0.0 : max(_2668, 0.0)))) - exp2(_2518 * (isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0))))) * _2667)) - ((exp2(_2520 * _2678) - exp2(_2520 * _2679)) * _2667))) + (_2513 * cbSceneParam._m0[80u].z);
        }
        vec4 _2746 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2406, _2407, 1.0), 0.0);
        float _2755 = exp2((_2744 * (-1.44269502162933349609375)) * (1.0 - _2746.w));
        float _2756 = log2(_2755);
        float _2772 = log2(_2426);
        _2522 = (exp2(_2772 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2756 * cbSceneParam._m0[78u].x)) * _2746.x) / cbSceneParam._m0[78u].x)) + _2423;
        _2524 = (exp2(_2772 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2756 * cbSceneParam._m0[78u].y)) * _2746.y) / cbSceneParam._m0[78u].y)) + _2424;
        _2526 = (exp2(_2772 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2756 * cbSceneParam._m0[78u].z)) * _2746.z) / cbSceneParam._m0[78u].z)) + _2425;
        _2528 = _2755 * _2426;
    }
    else
    {
        _2522 = _2423;
        _2524 = _2424;
        _2526 = _2425;
        _2528 = _2426;
    }
    bool _2782;
    vec4 _2538;
    vec4 _2560;
    float _2562;
    float _2566;
    float _2567;
    float _2568;
    float _2569;
    bool _2579;
    for (;;)
    {
        _2538 = cbMatDynParam._m0[0u];
        float _2540 = roundEven(_2538.y);
        bool _2541 = _2540 == 3.0;
        float _2542 = log2(_2528);
        float _2549 = exp2(_2542 * cbSceneParam._m0[78u].x) * _2395;
        float _2550 = exp2(_2542 * cbSceneParam._m0[78u].y) * _2396;
        float _2551 = exp2(_2542 * cbSceneParam._m0[78u].z) * _2397;
        float _2558 = _559 + (-0.5);
        _2560 = cbMtdParam._m0[1u];
        _2562 = _2560.y * _2558;
        float _2565 = (_2540 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2566 = _2565 * (_2541 ? _2549 : (_2549 + (cbSceneParam._m0[72u].w * _2522)));
        _2567 = _2565 * (_2541 ? _2550 : (_2550 + (cbSceneParam._m0[72u].w * _2524)));
        _2568 = _2565 * (_2541 ? _2551 : (_2551 + (cbSceneParam._m0[72u].w * _2526)));
        _2569 = _2558 * 0.999000012874603271484375;
        _2579 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2579)
        {
            if ((cbInstanceData._m0[_610 + 7u].x + _2569) < 0.5)
            {
                _2782 = true;
                break;
            }
        }
        uint _2702 = _612 + uint(_2538.w);
        if ((cbInstanceData._m0[_2702].w < 1.0) && ((cbInstanceData._m0[_2702].w + _2569) < 0.5))
        {
            _2782 = true;
            break;
        }
        if ((_2562 + 1.0) < _2560.x)
        {
            _2782 = true;
            break;
        }
        _2782 = false;
        break;
    }
    float _2986;
    if (_2782)
    {
        discard_state = true;
        _2986 = 0.0;
    }
    else
    {
        _2986 = cbInstanceData._m0[_2398].w;
    }
    SV_Target.x = _2566;
    SV_Target.y = _2567;
    SV_Target.z = _2568;
    SV_Target.w = _2986;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2398].w;
    discard_exit();
}


