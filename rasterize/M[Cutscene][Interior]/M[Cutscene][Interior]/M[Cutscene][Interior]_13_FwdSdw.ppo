#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 10) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_8;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1049;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _257 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _267 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _257);
    float _268 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _257);
    float _269 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _257);
    vec4 _288 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _323 = cbMtdParam._m0[24u].x + _267;
    float _324 = cbMtdParam._m0[24u].y + _268;
    float _325 = cbMtdParam._m0[24u].z + _269;
    float _339 = (-0.0) - dot(vec3(_323, _324, _325), vec3(_195 * _188, _195 * _189, _195 * _190));
    float _340 = (-0.0) - dot(vec3(_323, _324, _325), vec3(_209 * TANGENT.x, _209 * TANGENT.y, _209 * TANGENT.z));
    float _341 = (-0.0) - dot(vec3(_323, _324, _325), vec3((-0.0) - (_202 * NORMAL.x), (-0.0) - (_202 * NORMAL.y), (-0.0) - (_202 * NORMAL.z)));
    float _345 = inversesqrt(dot(vec3(_339, _340, _341), vec3(_339, _340, _341)));
    float _348 = _345 * _341;
    float _349 = (_345 * _339) + (((_288.x * 2.0) + (-1.0)) * cbMtdParam._m0[22u].x);
    float _350 = (_345 * _340) + (((_288.y * 2.0) + (-1.0)) * cbMtdParam._m0[22u].y);
    float _351 = _349 * cbMtdParam._m0[20u].w;
    float _352 = _350 * cbMtdParam._m0[20u].z;
    float _353 = fract(TEXCOORD.x);
    float _354 = fract(TEXCOORD.y);
    float _360;
    if (_351 > 0.0)
    {
        _360 = (1.0 - _353) / _351;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_351 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _353) / _351;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _360 = frontier_phi_3_2_ladder;
    }
    float _368;
    if (_352 > 0.0)
    {
        _368 = (1.0 - _354) / _352;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_352 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _354) / _352;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _368 = frontier_phi_7_6_ladder;
    }
    bool _370 = _348 > 0.0;
    float _372 = _370 ? (cbMtdParam._m0[16u].x / _348) : 5000.0;
    float _373 = isnan(_368) ? _360 : (isnan(_360) ? _368 : min(_360, _368));
    float _374 = isnan(_372) ? _373 : (isnan(_373) ? _372 : min(_373, _372));
    float _378 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _379 = _353 + (-0.5);
    float _382 = _354 + (-0.5);
    float _385 = ((_374 * _348) + _378) / _378;
    vec4 _410 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (((((_379 + (_374 * _351)) / _385) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (((((_382 + (_374 * _352)) / _385) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    float _420 = cbMtdParam._m0[9u].x * _410.x;
    float _421 = cbMtdParam._m0[9u].y * _410.y;
    float _422 = cbMtdParam._m0[9u].z * _410.z;
    float _441 = _349 * cbMtdParam._m0[22u].w;
    float _442 = _350 * cbMtdParam._m0[22u].z;
    bool _443 = _441 > 0.0;
    float _448;
    if (_443)
    {
        _448 = (1.0 - _353) / _441;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_441 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _353) / _441;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _448 = frontier_phi_11_10_ladder;
    }
    bool _450 = _442 > 0.0;
    float _455;
    if (_450)
    {
        _455 = (1.0 - _354) / _442;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_442 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _354) / _442;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _455 = frontier_phi_15_14_ladder;
    }
    float _458 = _370 ? (cbMtdParam._m0[18u].x / _348) : 5000.0;
    float _459 = isnan(_455) ? _448 : (isnan(_448) ? _455 : min(_448, _455));
    float _460 = isnan(_458) ? _459 : (isnan(_459) ? _458 : min(_459, _458));
    float _464 = cbMtdParam._m0[19u].y * cbMtdParam._m0[18u].x;
    float _468 = ((_460 * _348) + _464) / _464;
    float _473 = cbMtdParam._m0[19u].x - cbMtdParam._m0[20u].x * trunc(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    float _475 = floor(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    vec4 _491 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_379 + (_460 * _441)) / _468) + 0.5) + _473) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_382 + (_460 * _442)) / _468) + 0.5) + _475) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[0u].w));
    float _503;
    if (_443)
    {
        _503 = (1.0 - _353) / _441;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_441 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _353) / _441;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _503 = frontier_phi_19_18_ladder;
    }
    float _509;
    if (_450)
    {
        _509 = (1.0 - _354) / _442;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_442 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _354) / _442;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _509 = frontier_phi_23_22_ladder;
    }
    float _511 = isnan(_509) ? _503 : (isnan(_503) ? _509 : min(_503, _509));
    float _512 = isnan(_458) ? _511 : (isnan(_511) ? _458 : min(_511, _458));
    float _519 = ((_512 * _348) + _464) / _464;
    vec4 _539 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_379 + (_512 * _441)) / _519) + 0.5) + _473) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_382 + (_512 * _442)) / _519) + 0.5) + _475) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[8u].w));
    float _541 = _539.x;
    float _548 = (_541 * ((_491.x * cbMtdParam._m0[10u].x) - _420)) + _420;
    float _549 = (_541 * ((_491.y * cbMtdParam._m0[10u].y) - _421)) + _421;
    float _550 = (_541 * ((_491.z * cbMtdParam._m0[10u].z) - _422)) + _422;
    float _566 = _349 * cbMtdParam._m0[23u].y;
    float _567 = _350 * cbMtdParam._m0[23u].x;
    bool _568 = _566 > 0.0;
    float _573;
    if (_568)
    {
        _573 = (1.0 - _353) / _566;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_566 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _353) / _566;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _573 = frontier_phi_27_26_ladder;
    }
    bool _575 = _567 > 0.0;
    float _580;
    if (_575)
    {
        _580 = (1.0 - _354) / _567;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_567 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _354) / _567;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _580 = frontier_phi_31_30_ladder;
    }
    float _583 = _370 ? (cbMtdParam._m0[19u].w / _348) : 5000.0;
    float _584 = isnan(_580) ? _573 : (isnan(_573) ? _580 : min(_573, _580));
    float _585 = isnan(_583) ? _584 : (isnan(_584) ? _583 : min(_584, _583));
    float _589 = cbMtdParam._m0[19u].w * cbMtdParam._m0[16u].z;
    float _593 = ((_585 * _348) + _589) / _589;
    float _598 = cbMtdParam._m0[19u].z - cbMtdParam._m0[23u].z * trunc(cbMtdParam._m0[19u].z / cbMtdParam._m0[23u].z);
    float _600 = floor(cbMtdParam._m0[19u].z / cbMtdParam._m0[23u].z);
    vec4 _616 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * (((((_379 + (_585 * _566)) / _593) + 0.5) + _598) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * (((((_382 + (_585 * _567)) / _593) + 0.5) + _600) / cbMtdParam._m0[23u].w)) + cbTextureTilingScale._m0[9u].w));
    float _628;
    if (_568)
    {
        _628 = (1.0 - _353) / _566;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_566 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _353) / _566;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _628 = frontier_phi_35_34_ladder;
    }
    float _634;
    if (_575)
    {
        _634 = (1.0 - _354) / _567;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_567 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _354) / _567;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _634 = frontier_phi_39_38_ladder;
    }
    float _636 = isnan(_634) ? _628 : (isnan(_628) ? _634 : min(_628, _634));
    float _637 = isnan(_583) ? _636 : (isnan(_636) ? _583 : min(_636, _583));
    float _644 = ((_637 * _348) + _589) / _589;
    vec4 _664 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_379 + (_637 * _566)) / _644) + 0.5) + _598) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_382 + (_637 * _567)) / _644) + 0.5) + _600) / cbMtdParam._m0[23u].w)) + cbTextureTilingScale._m0[10u].w));
    float _666 = _664.x;
    float _673 = (_666 * ((_616.x * cbMtdParam._m0[14u].x) - _548)) + _548;
    float _674 = (_666 * ((_616.y * cbMtdParam._m0[14u].y) - _549)) + _549;
    float _675 = (_666 * ((_616.z * cbMtdParam._m0[14u].z) - _550)) + _550;
    float _3308 = isnan(0.0) ? _673 : (isnan(_673) ? 0.0 : max(_673, 0.0));
    float _3319 = isnan(0.0) ? _674 : (isnan(_674) ? 0.0 : max(_674, 0.0));
    float _3330 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _694 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _698 = inversesqrt(dot(vec3(_267, _268, _269), vec3(_267, _268, _269)));
    float _699 = _267 * _698;
    float _700 = _268 * _698;
    float _701 = _269 * _698;
    float _707 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _708 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _721 = uint(roundEven(NORMAL.w)) * 13u;
    uint _724 = (_721 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _730 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0)))) * cbInstanceData._m0[_724].x;
    float _731 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3319 : (isnan(_3319) ? 1.0 : min(_3319, 1.0)))) * cbInstanceData._m0[_724].y;
    float _732 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3330 : (isnan(_3330) ? 1.0 : min(_3330, 1.0)))) * cbInstanceData._m0[_724].z;
    float _3341 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
    float _733 = isnan(1.0) ? _3341 : (isnan(_3341) ? 1.0 : min(_3341, 1.0));
    float _3352 = isnan(0.0) ? _731 : (isnan(_731) ? 0.0 : max(_731, 0.0));
    float _734 = isnan(1.0) ? _3352 : (isnan(_3352) ? 1.0 : min(_3352, 1.0));
    float _3363 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    float _735 = isnan(1.0) ? _3363 : (isnan(_3363) ? 1.0 : min(_3363, 1.0));
    vec4 _744 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _707, cbSceneParam._m0[86u].y * _708));
    float _747 = _744.x * TEXCOORD_4.z;
    float _748 = (-0.0) - _699;
    float _749 = (-0.0) - _700;
    float _750 = (-0.0) - _701;
    float _772 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _776 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _780 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1048;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    float _1061;
    float _1062;
    float _1063;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _836 = (cbModelParam._m0[37u].x * ((((fma(_780, cbModelParam._m0[26u].z, fma(_776, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _772)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _838 = (cbModelParam._m0[37u].y * ((((fma(_780, cbModelParam._m0[27u].z, fma(_776, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _772)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _839 = (((((fma(_780, cbModelParam._m0[28u].z, fma(_776, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _772)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _842 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_836, _838, _839), 0.0);
        vec4 _849 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_836, _838, _839), 0.0);
        vec4 _856 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_836, _838, _839), 0.0);
        vec4 _863 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_836, _838, _839), 0.0);
        float _876 = exp2((_842.w + (-0.5)) * 20.0) * 2.0;
        float _877 = _876 * (_842.x + (-0.5));
        float _878 = _876 * (_842.y + (-0.5));
        float _879 = _876 * (_842.z + (-0.5));
        float _886 = exp2((_849.w + (-0.5)) * 20.0) * 2.0;
        float _887 = _886 * (_849.x + (-0.5));
        float _888 = _886 * (_849.y + (-0.5));
        float _889 = _886 * (_849.z + (-0.5));
        float _896 = exp2((_856.w + (-0.5)) * 20.0) * 2.0;
        float _897 = _896 * (_856.x + (-0.5));
        float _898 = _896 * (_856.y + (-0.5));
        float _899 = _896 * (_856.z + (-0.5));
        float _906 = exp2((_863.w + (-0.5)) * 20.0) * 2.0;
        float _907 = _906 * (_863.x + (-0.5));
        float _908 = _906 * (_863.y + (-0.5));
        float _909 = _906 * (_863.z + (-0.5));
        float _910 = isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0));
        float _911 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
        float _912 = isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0));
        float _913 = _877 * 0.5;
        float _914 = _887 * 0.5;
        float _915 = _897 * 0.5;
        float _916 = dot(vec3(_913, _914, _915), vec3(_913, _914, _915));
        float _921 = (_916 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_916);
        float _930 = (dot(vec3(0.0), vec3(_921 * _913, _921 * _914, _921 * _915)) + 1.0) * 0.5;
        float _3389 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _940 = sqrt(((_914 * _914) + (_913 * _913)) + (_915 * _915)) / (_910 + 9.9999997473787516355514526367188e-06);
        float _3400 = isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0));
        float _941 = isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0));
        float _942 = _941 * 2.0;
        float _946 = (1.0 - _941) / (_941 + 1.0);
        float _3411 = isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0));
        float _947 = isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0));
        float _956 = ((((1.0 - _947) * (_942 + 2.0)) * exp2(log2(isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0))) * (_942 + 1.0))) + _947) * _910;
        float _957 = _878 * 0.5;
        float _958 = _888 * 0.5;
        float _959 = _898 * 0.5;
        float _960 = dot(vec3(_957, _958, _959), vec3(_957, _958, _959));
        float _965 = (_960 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_960);
        float _973 = (dot(vec3(0.0), vec3(_965 * _957, _965 * _958, _965 * _959)) + 1.0) * 0.5;
        float _3422 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _982 = sqrt(((_958 * _958) + (_957 * _957)) + (_959 * _959)) / (_911 + 9.9999997473787516355514526367188e-06);
        float _3433 = isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0));
        float _983 = isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0));
        float _984 = _983 * 2.0;
        float _988 = (1.0 - _983) / (_983 + 1.0);
        float _3444 = isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0));
        float _989 = isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0));
        float _998 = ((((1.0 - _989) * (_984 + 2.0)) * exp2(log2(isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0))) * (_984 + 1.0))) + _989) * _911;
        float _999 = _879 * 0.5;
        float _1000 = _889 * 0.5;
        float _1001 = _899 * 0.5;
        float _1002 = dot(vec3(_999, _1000, _1001), vec3(_999, _1000, _1001));
        float _1007 = (_1002 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1002);
        float _1015 = (dot(vec3(0.0), vec3(_1007 * _999, _1007 * _1000, _1007 * _1001)) + 1.0) * 0.5;
        float _3455 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1024 = sqrt(((_1000 * _1000) + (_999 * _999)) + (_1001 * _1001)) / (_912 + 9.9999997473787516355514526367188e-06);
        float _3466 = isnan(0.0) ? _1024 : (isnan(_1024) ? 0.0 : max(_1024, 0.0));
        float _1025 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
        float _1026 = _1025 * 2.0;
        float _1030 = (1.0 - _1025) / (_1025 + 1.0);
        float _3477 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1031 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
        float _1040 = ((((1.0 - _1031) * (_1026 + 2.0)) * exp2(log2(isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0))) * (_1026 + 1.0))) + _1031) * _912;
        _1048 = _879;
        _1050 = _878;
        _1051 = _877;
        _1052 = _889;
        _1053 = _888;
        _1054 = _887;
        _1055 = _899;
        _1056 = _898;
        _1057 = _897;
        _1058 = _912;
        _1059 = _911;
        _1060 = _910;
        _1061 = cbModelParam._m0[36u].z * (isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0)));
        _1062 = cbModelParam._m0[36u].z * (isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0)));
        _1063 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0)));
    }
    else
    {
        _1048 = _1049;
        _1050 = _1049;
        _1051 = _1049;
        _1052 = _1049;
        _1053 = _1049;
        _1054 = _1049;
        _1055 = _1049;
        _1056 = _1049;
        _1057 = _1049;
        _1058 = _1049;
        _1059 = _1049;
        _1060 = _1049;
        _1061 = 0.0;
        _1062 = 0.0;
        _1063 = 0.0;
    }
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    float _1330;
    float _1331;
    float _1332;
    float _1333;
    float _1334;
    float _1335;
    float _1336;
    float _1337;
    float _1338;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1117 = (cbModelParam._m0[38u].x * ((((fma(_780, cbModelParam._m0[30u].z, fma(_776, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _772)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1118 = (cbModelParam._m0[38u].y * ((((fma(_780, cbModelParam._m0[31u].z, fma(_776, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _772)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1119 = (((((fma(_780, cbModelParam._m0[32u].z, fma(_776, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _772)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1121 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1117, _1118, _1119), 0.0);
        vec4 _1128 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1117, _1118, _1119), 0.0);
        vec4 _1135 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1117, _1118, _1119), 0.0);
        vec4 _1142 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1117, _1118, _1119), 0.0);
        float _1154 = exp2((_1121.w + (-0.5)) * 20.0) * 2.0;
        float _1155 = _1154 * (_1121.x + (-0.5));
        float _1156 = _1154 * (_1121.y + (-0.5));
        float _1157 = _1154 * (_1121.z + (-0.5));
        float _1164 = exp2((_1128.w + (-0.5)) * 20.0) * 2.0;
        float _1165 = _1164 * (_1128.x + (-0.5));
        float _1166 = _1164 * (_1128.y + (-0.5));
        float _1167 = _1164 * (_1128.z + (-0.5));
        float _1174 = exp2((_1135.w + (-0.5)) * 20.0) * 2.0;
        float _1175 = _1174 * (_1135.x + (-0.5));
        float _1176 = _1174 * (_1135.y + (-0.5));
        float _1177 = _1174 * (_1135.z + (-0.5));
        float _1184 = exp2((_1142.w + (-0.5)) * 20.0) * 2.0;
        float _1185 = _1184 * (_1142.x + (-0.5));
        float _1186 = _1184 * (_1142.y + (-0.5));
        float _1187 = _1184 * (_1142.z + (-0.5));
        float _1188 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
        float _1189 = isnan(0.0) ? _1186 : (isnan(_1186) ? 0.0 : max(_1186, 0.0));
        float _1190 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1191 = _1155 * 0.5;
        float _1192 = _1165 * 0.5;
        float _1193 = _1175 * 0.5;
        float _1194 = dot(vec3(_1191, _1192, _1193), vec3(_1191, _1192, _1193));
        float _1199 = (_1194 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1194);
        float _1207 = (dot(vec3(0.0), vec3(_1199 * _1191, _1199 * _1192, _1199 * _1193)) + 1.0) * 0.5;
        float _3518 = isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0));
        float _1216 = sqrt(((_1192 * _1192) + (_1191 * _1191)) + (_1193 * _1193)) / (_1188 + 9.9999997473787516355514526367188e-06);
        float _3529 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
        float _1217 = isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0));
        float _1218 = _1217 * 2.0;
        float _1222 = (1.0 - _1217) / (_1217 + 1.0);
        float _3540 = isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0));
        float _1223 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
        float _1232 = ((((1.0 - _1223) * (_1218 + 2.0)) * exp2(log2(isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0))) * (_1218 + 1.0))) + _1223) * _1188;
        float _1233 = _1156 * 0.5;
        float _1234 = _1166 * 0.5;
        float _1235 = _1176 * 0.5;
        float _1236 = dot(vec3(_1233, _1234, _1235), vec3(_1233, _1234, _1235));
        float _1241 = (_1236 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1236);
        float _1249 = (dot(vec3(0.0), vec3(_1241 * _1233, _1241 * _1234, _1241 * _1235)) + 1.0) * 0.5;
        float _3551 = isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0));
        float _1258 = sqrt(((_1234 * _1234) + (_1233 * _1233)) + (_1235 * _1235)) / (_1189 + 9.9999997473787516355514526367188e-06);
        float _3562 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
        float _1259 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
        float _1260 = _1259 * 2.0;
        float _1264 = (1.0 - _1259) / (_1259 + 1.0);
        float _3573 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1265 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
        float _1274 = ((((1.0 - _1265) * (_1260 + 2.0)) * exp2(log2(isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0))) * (_1260 + 1.0))) + _1265) * _1189;
        float _1275 = _1157 * 0.5;
        float _1276 = _1167 * 0.5;
        float _1277 = _1177 * 0.5;
        float _1278 = dot(vec3(_1275, _1276, _1277), vec3(_1275, _1276, _1277));
        float _1283 = (_1278 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1278);
        float _1291 = (dot(vec3(0.0), vec3(_1283 * _1275, _1283 * _1276, _1283 * _1277)) + 1.0) * 0.5;
        float _3584 = isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0));
        float _1300 = sqrt(((_1276 * _1276) + (_1275 * _1275)) + (_1277 * _1277)) / (_1190 + 9.9999997473787516355514526367188e-06);
        float _3595 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
        float _1301 = isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0));
        float _1302 = _1301 * 2.0;
        float _1306 = (1.0 - _1301) / (_1301 + 1.0);
        float _3606 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1307 = isnan(1.0) ? _3606 : (isnan(_3606) ? 1.0 : min(_3606, 1.0));
        float _1316 = ((((1.0 - _1307) * (_1302 + 2.0)) * exp2(log2(isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0))) * (_1302 + 1.0))) + _1307) * _1190;
        _1324 = _1157;
        _1325 = _1156;
        _1326 = _1155;
        _1327 = _1167;
        _1328 = _1166;
        _1329 = _1165;
        _1330 = _1177;
        _1331 = _1176;
        _1332 = _1175;
        _1333 = _1190;
        _1334 = _1189;
        _1335 = _1188;
        _1336 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0)));
        _1337 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0)));
        _1338 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)));
    }
    else
    {
        _1324 = _1049;
        _1325 = _1049;
        _1326 = _1049;
        _1327 = _1049;
        _1328 = _1049;
        _1329 = _1049;
        _1330 = _1049;
        _1331 = _1049;
        _1332 = _1049;
        _1333 = _1049;
        _1334 = _1049;
        _1335 = _1049;
        _1336 = 0.0;
        _1337 = 0.0;
        _1338 = 0.0;
    }
    float _1348 = (cbModelParam._m0[1u].x * (_1336 - _1061)) + _1061;
    float _1349 = (cbModelParam._m0[1u].x * (_1337 - _1062)) + _1062;
    float _1350 = (cbModelParam._m0[1u].x * (_1338 - _1063)) + _1063;
    float _1371 = fma(_1350, cbSceneParam._m0[89u].z, fma(_1349, cbSceneParam._m0[89u].y, _1348 * cbSceneParam._m0[89u].x));
    float _1374 = fma(_1350, cbSceneParam._m0[90u].z, fma(_1349, cbSceneParam._m0[90u].y, _1348 * cbSceneParam._m0[90u].x));
    float _1377 = fma(_1350, cbSceneParam._m0[91u].z, fma(_1349, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1348));
    float _1392 = _699 * (-0.5);
    float _1393 = _700 * (-0.5);
    float _1394 = _701 * (-0.5);
    float _1395 = dot(vec4(_1392, _1393, _1394, 1.0), vec4(_1326, _1329, _1332, _1335));
    float _1398 = dot(vec4(_1392, _1393, _1394, 1.0), vec4(_1325, _1328, _1331, _1334));
    float _1401 = dot(vec4(_1392, _1393, _1394, 1.0), vec4(_1324, _1327, _1330, _1333));
    float _1435;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1408 = dot(vec4(_1392, _1393, _1394, 1.0), vec4(_1048, _1052, _1055, _1058));
        float _1412 = dot(vec4(_1392, _1393, _1394, 1.0), vec4(_1050, _1053, _1056, _1059));
        float _1416 = dot(vec4(_1392, _1393, _1394, 1.0), vec4(_1051, _1054, _1057, _1060));
        float _1423 = dot(vec4(cbModelParam._m0[39u]), vec4(_1392, _1393, _1394, 1.0));
        _1435 = dot(vec3(isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)), isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0)), isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1423) ? 0.0 : (isnan(0.0) ? _1423 : max(0.0, _1423))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1435 = 1.0;
    }
    float _1446;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1437 = dot(vec4(cbModelParam._m0[40u]), vec4(_1392, _1393, _1394, 1.0));
        _1446 = dot(vec3(isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)), isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0)), isnan(0.0) ? _1401 : (isnan(_1401) ? 0.0 : max(_1401, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1437) ? 0.0 : (isnan(0.0) ? _1437 : max(0.0, _1437))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1446 = 1.0;
    }
    float _1450 = (_1446 * cbModelParam._m0[1u].x) + (_1435 * (1.0 - cbModelParam._m0[1u].x));
    float _1459 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1541;
    float _1543;
    float _1545;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1508 = fma(_780, cbModelParam._m0[13u].z, fma(_776, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _772)) + cbModelParam._m0[13u].w;
        float _1512 = fma(_780, cbModelParam._m0[14u].z, fma(_776, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _772)) + cbModelParam._m0[14u].w;
        float _1516 = fma(_780, cbModelParam._m0[15u].z, fma(_776, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _772)) + cbModelParam._m0[15u].w;
        float _1519 = fma(_750, cbModelParam._m0[13u].z, fma(_749, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _748));
        float _1522 = fma(_750, cbModelParam._m0[14u].z, fma(_749, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _748));
        float _1525 = fma(_750, cbModelParam._m0[15u].z, fma(_749, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _748));
        float _1551;
        if (_1519 > 0.0)
        {
            _1551 = abs((1.0 - _1508) / _1519);
        }
        else
        {
            float frontier_phi_54_52_ladder;
            if (_1519 < 0.0)
            {
                frontier_phi_54_52_ladder = abs((_1508 + 1.0) / _1519);
            }
            else
            {
                frontier_phi_54_52_ladder = 5000.0;
            }
            _1551 = frontier_phi_54_52_ladder;
        }
        float _1721;
        if (_1522 > 0.0)
        {
            _1721 = abs((1.0 - _1512) / _1522);
        }
        else
        {
            float frontier_phi_63_59_ladder;
            if (_1522 < 0.0)
            {
                frontier_phi_63_59_ladder = abs((_1512 + 1.0) / _1522);
            }
            else
            {
                frontier_phi_63_59_ladder = 5000.0;
            }
            _1721 = frontier_phi_63_59_ladder;
        }
        float _2116;
        if (_1525 > 0.0)
        {
            _2116 = abs((1.0 - _1516) / _1525);
        }
        else
        {
            float frontier_phi_75_70_ladder;
            if (_1525 < 0.0)
            {
                frontier_phi_75_70_ladder = abs((_1516 + 1.0) / _1525);
            }
            else
            {
                frontier_phi_75_70_ladder = 5000.0;
            }
            _2116 = frontier_phi_75_70_ladder;
        }
        float _2118 = isnan(_1721) ? _1551 : (isnan(_1551) ? _1721 : min(_1551, _1721));
        float _2119 = isnan(_2116) ? _2118 : (isnan(_2118) ? _2116 : min(_2118, _2116));
        float _2123 = (_2119 * _1519) + _1508;
        float _2124 = (_2119 * _1522) + _1512;
        float _2125 = (_2119 * _1525) + _1516;
        float _2126 = _2119 * 9.9999997473787516355514526367188e-05;
        float _2128 = (-1.0) - _2126;
        float _2130 = _2126 + 1.0;
        float frontier_phi_53_75_ladder;
        float frontier_phi_53_75_ladder_1;
        float frontier_phi_53_75_ladder_2;
        if ((_2125 > _2130) || ((_2125 < _2128) || ((_2124 > _2130) || ((_2124 < _2128) || ((_2123 < _2128) || (_2123 > _2130))))))
        {
            frontier_phi_53_75_ladder = 0.0;
            frontier_phi_53_75_ladder_1 = 0.0;
            frontier_phi_53_75_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2359 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2125, cbModelParam._m0[9u].z, fma(_2124, cbModelParam._m0[9u].y, _2123 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2125, cbModelParam._m0[10u].z, fma(_2124, cbModelParam._m0[10u].y, _2123 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2125, cbModelParam._m0[11u].z, fma(_2124, cbModelParam._m0[11u].y, _2123 * cbModelParam._m0[11u].x))), _1459);
            frontier_phi_53_75_ladder = _2359.z * cbModelParam._m0[1u].y;
            frontier_phi_53_75_ladder_1 = _2359.y * cbModelParam._m0[1u].y;
            frontier_phi_53_75_ladder_2 = _2359.x * cbModelParam._m0[1u].y;
        }
        _1541 = frontier_phi_53_75_ladder_2;
        _1543 = frontier_phi_53_75_ladder_1;
        _1545 = frontier_phi_53_75_ladder;
    }
    else
    {
        vec4 _1529 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_748, _749, _750), _1459);
        _1541 = _1529.x * cbModelParam._m0[1u].y;
        _1543 = _1529.y * cbModelParam._m0[1u].y;
        _1545 = _1529.z * cbModelParam._m0[1u].y;
    }
    float _1548 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1636;
    float _1638;
    float _1640;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1600 = fma(_780, cbModelParam._m0[21u].z, fma(_776, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _772)) + cbModelParam._m0[21u].w;
        float _1604 = fma(_780, cbModelParam._m0[22u].z, fma(_776, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _772)) + cbModelParam._m0[22u].w;
        float _1608 = fma(_780, cbModelParam._m0[23u].z, fma(_776, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _772)) + cbModelParam._m0[23u].w;
        float _1611 = fma(_750, cbModelParam._m0[21u].z, fma(_749, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _748));
        float _1614 = fma(_750, cbModelParam._m0[22u].z, fma(_749, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _748));
        float _1617 = fma(_750, cbModelParam._m0[23u].z, fma(_749, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _748));
        float _1726;
        if (_1611 > 0.0)
        {
            _1726 = abs((1.0 - _1600) / _1611);
        }
        else
        {
            float frontier_phi_65_61_ladder;
            if (_1611 < 0.0)
            {
                frontier_phi_65_61_ladder = abs((_1600 + 1.0) / _1611);
            }
            else
            {
                frontier_phi_65_61_ladder = 5000.0;
            }
            _1726 = frontier_phi_65_61_ladder;
        }
        float _2143;
        if (_1614 > 0.0)
        {
            _2143 = abs((1.0 - _1604) / _1614);
        }
        else
        {
            float frontier_phi_77_72_ladder;
            if (_1614 < 0.0)
            {
                frontier_phi_77_72_ladder = abs((_1604 + 1.0) / _1614);
            }
            else
            {
                frontier_phi_77_72_ladder = 5000.0;
            }
            _2143 = frontier_phi_77_72_ladder;
        }
        float _2481;
        if (_1617 > 0.0)
        {
            _2481 = abs((1.0 - _1608) / _1617);
        }
        else
        {
            float frontier_phi_89_84_ladder;
            if (_1617 < 0.0)
            {
                frontier_phi_89_84_ladder = abs((_1608 + 1.0) / _1617);
            }
            else
            {
                frontier_phi_89_84_ladder = 5000.0;
            }
            _2481 = frontier_phi_89_84_ladder;
        }
        float _2483 = isnan(_2143) ? _1726 : (isnan(_1726) ? _2143 : min(_1726, _2143));
        float _2484 = isnan(_2481) ? _2483 : (isnan(_2483) ? _2481 : min(_2483, _2481));
        float _2488 = (_2484 * _1611) + _1600;
        float _2489 = (_2484 * _1614) + _1604;
        float _2490 = (_2484 * _1617) + _1608;
        float _2491 = _2484 * 9.9999997473787516355514526367188e-05;
        float _2492 = (-1.0) - _2491;
        float _2494 = _2491 + 1.0;
        float frontier_phi_62_89_ladder;
        float frontier_phi_62_89_ladder_1;
        float frontier_phi_62_89_ladder_2;
        if ((_2490 > _2494) || ((_2490 < _2492) || ((_2489 > _2494) || ((_2489 < _2492) || ((_2488 < _2492) || (_2488 > _2494))))))
        {
            frontier_phi_62_89_ladder = 0.0;
            frontier_phi_62_89_ladder_1 = 0.0;
            frontier_phi_62_89_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2608 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2490, cbModelParam._m0[17u].z, fma(_2489, cbModelParam._m0[17u].y, _2488 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2490, cbModelParam._m0[18u].z, fma(_2489, cbModelParam._m0[18u].y, _2488 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2490, cbModelParam._m0[19u].z, fma(_2489, cbModelParam._m0[19u].y, _2488 * cbModelParam._m0[19u].x))), _1548);
            frontier_phi_62_89_ladder = _2608.z * cbModelParam._m0[1u].z;
            frontier_phi_62_89_ladder_1 = _2608.y * cbModelParam._m0[1u].z;
            frontier_phi_62_89_ladder_2 = _2608.x * cbModelParam._m0[1u].z;
        }
        _1636 = frontier_phi_62_89_ladder_2;
        _1638 = frontier_phi_62_89_ladder_1;
        _1640 = frontier_phi_62_89_ladder;
    }
    else
    {
        vec4 _1620 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_748, _749, _750), _1548);
        _1636 = _1620.x * cbModelParam._m0[1u].z;
        _1638 = _1620.y * cbModelParam._m0[1u].z;
        _1640 = _1620.z * cbModelParam._m0[1u].z;
    }
    float _1652 = _747 * 0.01200000010430812835693359375;
    float _1654 = _1652 * ((cbModelParam._m0[1u].w * (_1636 - _1541)) + _1541);
    float _1655 = _1652 * ((cbModelParam._m0[1u].w * (_1638 - _1543)) + _1543);
    float _1656 = _1652 * ((cbModelParam._m0[1u].w * (_1640 - _1545)) + _1545);
    float _1659 = fma(_1656, cbSceneParam._m0[89u].z, fma(_1655, cbSceneParam._m0[89u].y, _1654 * cbSceneParam._m0[89u].x));
    float _1662 = fma(_1656, cbSceneParam._m0[90u].z, fma(_1655, cbSceneParam._m0[90u].y, _1654 * cbSceneParam._m0[90u].x));
    float _1665 = fma(_1656, cbSceneParam._m0[91u].z, fma(_1655, cbSceneParam._m0[91u].y, _1654 * cbSceneParam._m0[91u].x));
    float _1700 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1704 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1708 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1712 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1713 = _1700 / _1712;
    float _1714 = _1704 / _1712;
    float _1715 = _1708 / _1712;
    float _1863;
    float _1864;
    float _1865;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1742 = ((uint(_1715 > cbSceneParam._m0[59u].y) + uint(_1715 > cbSceneParam._m0[59u].x)) + uint(_1715 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1743 = _1742 + 43u;
        uint _1751 = _1742 + 44u;
        uint _1759 = _1742 + 45u;
        uint _1767 = _1742 + 46u;
        float _1778 = fma(_1712, cbSceneParam._m0[_1743].w, fma(_1708, cbSceneParam._m0[_1743].z, fma(_1704, cbSceneParam._m0[_1743].y, _1700 * cbSceneParam._m0[_1743].x)));
        float _1782 = fma(_1712, cbSceneParam._m0[_1751].w, fma(_1708, cbSceneParam._m0[_1751].z, fma(_1704, cbSceneParam._m0[_1751].y, _1700 * cbSceneParam._m0[_1751].x)));
        float _1790 = fma(_1712, cbSceneParam._m0[_1767].w, fma(_1708, cbSceneParam._m0[_1767].z, fma(_1704, cbSceneParam._m0[_1767].y, _1700 * cbSceneParam._m0[_1767].x)));
        float _1795 = cbSceneParam._m0[33u].z * _1790;
        float _1797 = cbSceneParam._m0[33u].w * _1790;
        float _1800 = fma(_1712, cbSceneParam._m0[_1759].w, fma(_1708, cbSceneParam._m0[_1759].z, fma(_1704, cbSceneParam._m0[_1759].y, _1700 * cbSceneParam._m0[_1759].x))) / _1790;
        float _1848 = (cbSceneParam._m0[33u].x - sqrt(((_1714 * _1714) + (_1713 * _1713)) + (_1715 * _1715))) * cbSceneParam._m0[33u].y;
        float _3732 = isnan(0.0) ? _1848 : (isnan(_1848) ? 0.0 : max(_1848, 0.0));
        float _1856 = (isnan(1.0) ? _3732 : (isnan(_3732) ? 1.0 : min(_3732, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1795 + _1778) / _1790, (_1797 + _1782) / _1790), _1800), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1797 + _1778) / _1790, (_1782 - _1795) / _1790), _1800), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1778 - _1795) / _1790, (_1782 - _1797) / _1790), _1800), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1778 - _1797) / _1790, (_1795 + _1782) / _1790), _1800), 0.0)).x), vec4(0.25)));
        _1863 = 1.0 - (_1856 * cbSceneParam._m0[34u].x);
        _1864 = 1.0 - (_1856 * cbSceneParam._m0[34u].y);
        _1865 = 1.0 - (_1856 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1863 = 1.0;
        _1864 = 1.0;
        _1865 = 1.0;
    }
    float _1929;
    float _1931;
    float _1933;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1917 = fma(_1712, cbSceneParam._m0[63u].w, fma(_1708, cbSceneParam._m0[63u].z, fma(_1704, cbSceneParam._m0[63u].y, _1700 * cbSceneParam._m0[63u].x)));
        float _1918 = fma(_1712, cbSceneParam._m0[60u].w, fma(_1708, cbSceneParam._m0[60u].z, fma(_1704, cbSceneParam._m0[60u].y, _1700 * cbSceneParam._m0[60u].x))) / _1917;
        float _1919 = fma(_1712, cbSceneParam._m0[61u].w, fma(_1708, cbSceneParam._m0[61u].z, fma(_1704, cbSceneParam._m0[61u].y, _1700 * cbSceneParam._m0[61u].x))) / _1917;
        float frontier_phi_74_73_ladder;
        float frontier_phi_74_73_ladder_1;
        float frontier_phi_74_73_ladder_2;
        if ((((_1918 >= cbSceneParam._m0[64u].x) && (_1919 >= cbSceneParam._m0[64u].y)) && (_1918 <= cbSceneParam._m0[64u].z)) && (_1919 <= cbSceneParam._m0[64u].w))
        {
            float _2156 = fma(_1712, cbSceneParam._m0[62u].w, fma(_1708, cbSceneParam._m0[62u].z, fma(_1704, cbSceneParam._m0[62u].y, _1700 * cbSceneParam._m0[62u].x))) / _1917;
            float _2160 = isnan(cbSceneParam._m0[41u].w) ? _2156 : (isnan(_2156) ? cbSceneParam._m0[41u].w : max(_2156, cbSceneParam._m0[41u].w));
            float _2203 = (cbSceneParam._m0[33u].x - sqrt(((_1714 * _1714) + (_1713 * _1713)) + (_1715 * _1715))) * cbSceneParam._m0[33u].y;
            float _3748 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
            float _2210 = (isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1918, cbSceneParam._m0[33u].w + _1919), _2160), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1918, _1919 - cbSceneParam._m0[33u].z), _2160), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1918 - cbSceneParam._m0[33u].z, _1919 - cbSceneParam._m0[33u].w), _2160), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1918 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1919), _2160), 0.0)).x), vec4(0.25)));
            float _2214 = 1.0 - (_2210 * cbSceneParam._m0[34u].x);
            float _2215 = 1.0 - (_2210 * cbSceneParam._m0[34u].y);
            float _2216 = 1.0 - (_2210 * cbSceneParam._m0[34u].z);
            frontier_phi_74_73_ladder = isnan(_2214) ? _1863 : (isnan(_1863) ? _2214 : min(_1863, _2214));
            frontier_phi_74_73_ladder_1 = isnan(_2215) ? _1864 : (isnan(_1864) ? _2215 : min(_1864, _2215));
            frontier_phi_74_73_ladder_2 = isnan(_2216) ? _1865 : (isnan(_1865) ? _2216 : min(_1865, _2216));
        }
        else
        {
            frontier_phi_74_73_ladder = _1863;
            frontier_phi_74_73_ladder_1 = _1864;
            frontier_phi_74_73_ladder_2 = _1865;
        }
        _1929 = frontier_phi_74_73_ladder;
        _1931 = frontier_phi_74_73_ladder_1;
        _1933 = frontier_phi_74_73_ladder_2;
    }
    else
    {
        _1929 = _1863;
        _1931 = _1864;
        _1933 = _1865;
    }
    uvec4 _1938 = floatBitsToUint(cbInstanceData._m0[_721 + 5u]);
    uint _1940 = _1938.x * 14u;
    uint _1941 = _1940 + 13u;
    float _1946 = _747 + (-1.0);
    float _1949 = (cbLight._m0[_1941].x * _1946) + 1.0;
    float _1950 = (cbLight._m0[_1941].y * _1946) + 1.0;
    uint _1951 = _1940 + 5u;
    float _1957 = isnan(1.0) ? _1950 : (isnan(_1950) ? 1.0 : min(_1950, 1.0));
    uint _1961 = _1940 + 4u;
    float _1971 = isnan(1.0) ? _1949 : (isnan(_1949) ? 1.0 : min(_1949, 1.0));
    uint _1975 = _1940 | 1u;
    float _1986 = dot(vec3(cbLight._m0[_1940].xyz), vec3(0.0));
    float _1989 = dot(vec3(cbLight._m0[_1975].xyz), vec3(0.0));
    float _3784 = isnan(0.0) ? _1986 : (isnan(_1986) ? 0.0 : max(_1986, 0.0));
    float _3795 = isnan(0.0) ? _1989 : (isnan(_1989) ? 0.0 : max(_1989, 0.0));
    float _1994 = (isnan(1.0) ? _3784 : (isnan(_3784) ? 1.0 : min(_3784, 1.0))) * 0.3183098733425140380859375;
    float _1996 = (isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * 0.3183098733425140380859375;
    float _2003 = ((cbLight._m0[_1951].x * _1957) * _1996) + (((cbLight._m0[_1961].x * _1929) * _1971) * _1994);
    float _2004 = ((_1957 * cbLight._m0[_1951].y) * _1996) + (((cbLight._m0[_1961].y * _1931) * _1971) * _1994);
    float _2005 = ((_1957 * cbLight._m0[_1951].z) * _1996) + (((cbLight._m0[_1961].z * _1933) * _1971) * _1994);
    uint _2006 = _1940 + 8u;
    float _2012 = cbLight._m0[_1940].x + _699;
    float _2013 = cbLight._m0[_1940].y + _700;
    float _2014 = cbLight._m0[_1940].z + _701;
    float _2018 = inversesqrt(dot(vec3(_2012, _2013, _2014), vec3(_2012, _2013, _2014)));
    float _2022 = dot(vec3(0.0), vec3(cbLight._m0[_1940].xyz));
    float _3806 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
    float _2025 = isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0));
    float _2026 = dot(vec3(0.0), vec3(_699, _700, _701));
    float _3817 = isnan(0.0) ? _2026 : (isnan(_2026) ? 0.0 : max(_2026, 0.0));
    float _2029 = isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0));
    float _2030 = dot(vec3(cbLight._m0[_1940].xyz), vec3(_2012 * _2018, _2013 * _2018, _2014 * _2018));
    float _3828 = isnan(0.0) ? _2030 : (isnan(_2030) ? 0.0 : max(_2030, 0.0));
    float _2041 = (exp2(log2(1.0 - (isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2047 = (0.5 / ((_2025 + 9.9999999392252902907785028219223e-09) + _2029)) * _2025;
    float _3839 = isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0));
    float _2049 = (isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0))) * 0.31831014156341552734375;
    uint _2063 = _1940 + 9u;
    float _2069 = cbLight._m0[_1975].x + _699;
    float _2070 = cbLight._m0[_1975].y + _700;
    float _2071 = cbLight._m0[_1975].z + _701;
    float _2075 = inversesqrt(dot(vec3(_2069, _2070, _2071), vec3(_2069, _2070, _2071)));
    float _2079 = dot(vec3(0.0), vec3(cbLight._m0[_1975].xyz));
    float _3850 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
    float _2082 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
    float _2083 = dot(vec3(cbLight._m0[_1975].xyz), vec3(_2069 * _2075, _2070 * _2075, _2071 * _2075));
    float _3861 = isnan(0.0) ? _2083 : (isnan(_2083) ? 0.0 : max(_2083, 0.0));
    float _2092 = (exp2(log2(1.0 - (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2096 = (0.5 / ((_2082 + 9.9999999392252902907785028219223e-09) + _2029)) * _2082;
    float _3872 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2098 = (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0))) * 0.31831014156341552734375;
    float _2108 = (((_2092 * cbLight._m0[_2063].x) * _2098) * _1957) + ((((cbLight._m0[_2006].x * _1929) * _2041) * _2049) * _1971);
    float _2109 = (((_2092 * cbLight._m0[_2063].y) * _2098) * _1957) + ((((cbLight._m0[_2006].y * _1931) * _2041) * _2049) * _1971);
    float _2110 = (((_2092 * cbLight._m0[_2063].z) * _2098) * _1957) + ((((cbLight._m0[_2006].z * _1933) * _2041) * _2049) * _1971);
    float _2273;
    float _2275;
    float _2277;
    float _2279;
    float _2281;
    float _2283;
    if (_1938.y == 0u)
    {
        uvec4 _2228 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2229 = _2228.x;
        uint _2240 = uint((float(_2228.y) * floor(float(uint(cbSceneParam._m0[85u].y * _708) / _2229))) + floor(float(uint(cbSceneParam._m0[85u].x * _707) / _2229)));
        float _2250 = (log2(_1715 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2251 = isnan(0.0) ? _2250 : (isnan(_2250) ? 0.0 : max(_2250, 0.0));
        uint _2254 = uint(isnan(14.0) ? _2251 : (isnan(_2251) ? 14.0 : min(_2251, 14.0)));
        uvec4 _2259 = texelFetch(g_lightClusterGridBuffer, int(((_2254 << 2u) + (_2240 << 6u)) >> 2u));
        uint _2260 = _2259.x;
        uint _2261 = _2228.z;
        float _2368;
        float _2370;
        float _2372;
        float _2374;
        float _2376;
        float _2378;
        if (((((1u << ((_2261 >> 4u) & 15u)) + 4294967295u) & _2260) == 0u) || ((_2261 & 240u) == 0u))
        {
            _2368 = 0.0;
            _2370 = 0.0;
            _2372 = 0.0;
            _2374 = 0.0;
            _2376 = 0.0;
            _2378 = 0.0;
        }
        else
        {
            float _2369;
            float _2371;
            float _2373;
            float _2375;
            float _2377;
            float _2379;
            float _2536 = 0.0;
            float _2537 = 0.0;
            float _2538 = 0.0;
            float _2539 = 0.0;
            float _2540 = 0.0;
            float _2541 = 0.0;
            uint _2542 = 0u;
            uint _2551;
            bool _2552;
            for (;;)
            {
                _2551 = texelFetch(g_lightClassification, int((((_2254 << 5u) + (_2240 << 9u)) + (_2542 << 2u)) >> 2u)).x;
                _2552 = _2551 == 0u;
                float frontier_phi_98_pred;
                float frontier_phi_98_pred_1;
                float frontier_phi_98_pred_2;
                float frontier_phi_98_pred_3;
                float frontier_phi_98_pred_4;
                float frontier_phi_98_pred_5;
                if (_2552)
                {
                    frontier_phi_98_pred = _2536;
                    frontier_phi_98_pred_1 = _2537;
                    frontier_phi_98_pred_2 = _2541;
                    frontier_phi_98_pred_3 = _2540;
                    frontier_phi_98_pred_4 = _2539;
                    frontier_phi_98_pred_5 = _2538;
                }
                else
                {
                    float _2681;
                    float _2682;
                    float _2683;
                    float _2684;
                    float _2685;
                    float _2686;
                    uint _2687;
                    _2681 = _2536;
                    _2682 = _2537;
                    _2683 = _2538;
                    _2684 = _2539;
                    _2685 = _2540;
                    _2686 = _2541;
                    _2687 = _2551;
                    float _2613;
                    float _2614;
                    float _2615;
                    float _2616;
                    float _2617;
                    float _2618;
                    for (;;)
                    {
                        uint _2691 = uint(findLSB(_2687)) + (_2542 << 5u);
                        uint _2688 = (_2687 + 4294967295u) & _2687;
                        uint _2693 = _2691 * 48u;
                        vec4 _2707 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2693)).x, texelFetch(g_PointLightRenderingBuffer, int(_2693 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2693 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2693 + 3u)).x));
                        uint _2713 = (_2691 * 48u) + 4u;
                        vec4 _2726 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2713)).x, texelFetch(g_PointLightRenderingBuffer, int(_2713 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2713 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2713 + 3u)).x));
                        uint _2732 = (_2691 * 48u) + 8u;
                        vec3 _2743 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2732)).x, texelFetch(g_PointLightRenderingBuffer, int(_2732 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2732 + 2u)).x));
                        float _2747 = _2707.x - _1713;
                        float _2748 = _2707.y - _1714;
                        float _2749 = _2707.z - _1715;
                        float _2750 = dot(vec3(_2747, _2748, _2749), vec3(_2747, _2748, _2749));
                        float _2753 = inversesqrt(_2750);
                        float _2762 = 1.0 - (_2750 * _2707.w);
                        float _3893 = isnan(0.0) ? _2762 : (isnan(_2762) ? 0.0 : max(_2762, 0.0));
                        float _2763 = isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0));
                        float _2764 = sqrt(_2750) * _2726.w;
                        float _2767 = 1.39999997615814208984375 / (_2764 + 1.39999997615814208984375);
                        float _2768 = _2767 * _2767;
                        float _2771 = ((1.0 - _2768) * dot(vec3(0.0), vec3(_2753 * _2747, _2753 * _2748, _2753 * _2749))) + _2768;
                        float _2774 = _2764 * _2764;
                        float _2778 = ((isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0))) * _2763) / ((_2774 * 0.699999988079071044921875) + 1.0);
                        float _2782 = (-0.0) - _1713;
                        float _2783 = (-0.0) - _1714;
                        float _2784 = (-0.0) - _1715;
                        float _2788 = inversesqrt(dot(vec3(_2782, _2783, _2784), vec3(_2782, _2783, _2784)));
                        float _2792 = dot(vec3(0.0), vec3(_2788 * _2782, _2788 * _2783, _2788 * _2784));
                        float _3909 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
                        float _3920 = isnan(0.0) ? _2771 : (isnan(_2771) ? 0.0 : max(_2771, 0.0));
                        float _2796 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
                        float _2800 = (0.5 / (((isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0))) + 9.9999999392252902907785028219223e-09) + _2796)) * _2796;
                        float _3931 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
                        float _2809 = (((isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0))) * 3.1415927410125732421875) / ((_2774 * 2.1991131305694580078125) + 3.141590118408203125)) * _2763;
                        _2616 = (_2778 * _2726.x) + _2684;
                        _2617 = (_2778 * _2726.y) + _2685;
                        _2618 = (_2778 * _2726.z) + _2686;
                        _2613 = (_2809 * _2743.x) + _2681;
                        _2614 = (_2809 * _2743.y) + _2682;
                        _2615 = (_2809 * _2743.z) + _2683;
                        if (_2688 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2681 = _2613;
                            _2682 = _2614;
                            _2683 = _2615;
                            _2684 = _2616;
                            _2685 = _2617;
                            _2686 = _2618;
                            _2687 = _2688;
                        }
                    }
                    frontier_phi_98_pred = _2613;
                    frontier_phi_98_pred_1 = _2614;
                    frontier_phi_98_pred_2 = _2618;
                    frontier_phi_98_pred_3 = _2617;
                    frontier_phi_98_pred_4 = _2616;
                    frontier_phi_98_pred_5 = _2615;
                }
                _2369 = frontier_phi_98_pred;
                _2371 = frontier_phi_98_pred_1;
                _2379 = frontier_phi_98_pred_2;
                _2377 = frontier_phi_98_pred_3;
                _2375 = frontier_phi_98_pred_4;
                _2373 = frontier_phi_98_pred_5;
                uint _2543 = _2542 + 1u;
                if (_2543 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2536 = _2369;
                    _2537 = _2371;
                    _2538 = _2373;
                    _2539 = _2375;
                    _2540 = _2377;
                    _2541 = _2379;
                    _2542 = _2543;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2368 = _2369;
            _2370 = _2371;
            _2372 = _2373;
            _2374 = _2375;
            _2376 = _2377;
            _2378 = _2379;
        }
        uvec4 _2382 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2383 = _2382.z;
        uint _2385 = (_2383 >> 8u) & 15u;
        float _2507;
        float _2509;
        float _2511;
        float _2513;
        float _2515;
        float _2517;
        if (((4294967295u << _2385) & _2260) == 0u)
        {
            _2507 = _2368;
            _2509 = _2370;
            _2511 = _2372;
            _2513 = _2374;
            _2515 = _2376;
            _2517 = _2378;
        }
        else
        {
            float _2532 = inversesqrt(dot(vec3(_1713, _1714, _1715), vec3(_1713, _1714, _1715)));
            float frontier_phi_91_92_ladder;
            float frontier_phi_91_92_ladder_1;
            float frontier_phi_91_92_ladder_2;
            float frontier_phi_91_92_ladder_3;
            float frontier_phi_91_92_ladder_4;
            float frontier_phi_91_92_ladder_5;
            if (_2385 < ((_2383 >> 12u) & 15u))
            {
                float _2508;
                float _2510;
                float _2512;
                float _2514;
                float _2516;
                float _2518;
                float _2664 = _2368;
                float _2665 = _2370;
                float _2666 = _2372;
                float _2667 = _2374;
                float _2668 = _2376;
                float _2669 = _2378;
                uint _2670 = _2385;
                uint _2679;
                bool _2680;
                for (;;)
                {
                    _2679 = texelFetch(g_lightClassification, int((((_2254 << 5u) + (_2240 << 9u)) + (_2670 << 2u)) >> 2u)).x;
                    _2680 = _2679 == 0u;
                    float frontier_phi_104_pred;
                    float frontier_phi_104_pred_1;
                    float frontier_phi_104_pred_2;
                    float frontier_phi_104_pred_3;
                    float frontier_phi_104_pred_4;
                    float frontier_phi_104_pred_5;
                    if (_2680)
                    {
                        frontier_phi_104_pred = _2669;
                        frontier_phi_104_pred_1 = _2668;
                        frontier_phi_104_pred_2 = _2667;
                        frontier_phi_104_pred_3 = _2666;
                        frontier_phi_104_pred_4 = _2665;
                        frontier_phi_104_pred_5 = _2664;
                    }
                    else
                    {
                        float _2814;
                        float _2815;
                        float _2816;
                        float _2817;
                        float _2818;
                        float _2819;
                        float _3063;
                        float _3064;
                        float _3065;
                        float _3066;
                        float _3067;
                        float _3068;
                        float _2827 = _2664;
                        float _2828 = _2665;
                        float _2829 = _2666;
                        float _2830 = _2667;
                        float _2831 = _2668;
                        float _2832 = _2669;
                        uint _2833 = _2679;
                        uint _2834;
                        vec4 _2859;
                        float _2860;
                        vec4 _2875;
                        vec3 _2887;
                        vec4 _2902;
                        vec4 _2917;
                        float _2963;
                        bool _2964;
                        for (;;)
                        {
                            uint _2844 = ((_2670 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2833));
                            _2834 = (_2833 + 4294967295u) & _2833;
                            uint _2846 = _2844 * 40u;
                            _2859 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2846)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2846 + 3u)).x));
                            _2860 = _2859.w;
                            uint _2862 = (_2844 * 40u) + 4u;
                            _2875 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2862)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2862 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2862 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2862 + 3u)).x));
                            uint _2877 = (_2844 * 40u) + 8u;
                            _2887 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2877)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2877 + 2u)).x));
                            uint _2889 = (_2844 * 40u) + 16u;
                            _2902 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2889)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2889 + 3u)).x));
                            uint _2904 = (_2844 * 40u) + 20u;
                            _2917 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2904)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2904 + 3u)).x));
                            uint _2919 = (_2844 * 40u) + 24u;
                            vec4 _2932 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2919)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2919 + 3u)).x));
                            uint _2938 = (_2844 * 40u) + 28u;
                            vec4 _2951 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2938)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2938 + 3u)).x));
                            _2963 = fma(_1715, _2951.z, fma(_1714, _2951.y, _2951.x * _1713)) + _2951.w;
                            _2964 = !((fma(_1715, _2932.z, fma(_1714, _2932.y, _2932.x * _1713)) + _2932.w) <= 0.0);
                            float frontier_phi_110_pred;
                            float frontier_phi_110_pred_1;
                            float frontier_phi_110_pred_2;
                            float frontier_phi_110_pred_3;
                            float frontier_phi_110_pred_4;
                            float frontier_phi_110_pred_5;
                            if (_2964)
                            {
                                float _2991 = _2859.x - _1713;
                                float _2992 = _2859.y - _1714;
                                float _2993 = _2859.z - _1715;
                                float _2994 = dot(vec3(_2991, _2992, _2993), vec3(_2991, _2992, _2993));
                                float _2997 = inversesqrt(_2994);
                                float _2998 = _2997 * _2991;
                                float _2999 = _2997 * _2992;
                                float _3000 = _2997 * _2993;
                                float _3004 = 1.0 - (_2994 / (_2860 * _2860));
                                float _3942 = isnan(0.0) ? _3004 : (isnan(_3004) ? 0.0 : max(_3004, 0.0));
                                float _3005 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
                                float _3009 = sqrt(_2994) * _2875.w;
                                float _3011 = 1.39999997615814208984375 / (_3009 + 1.39999997615814208984375);
                                float _3012 = _3011 * _3011;
                                float _3013 = 1.0 - _3012;
                                float _3015 = (_3013 * dot(vec3(_2998, _2999, _3000), vec3(0.0))) + _3012;
                                float _3018 = _3009 * _3009;
                                float _3022 = (fma(_1715, _2902.z, fma(_1714, _2902.y, _2902.x * _1713)) + _2902.w) / _2963;
                                float _3023 = (fma(_1715, _2917.z, fma(_1714, _2917.y, _2917.x * _1713)) + _2917.w) / _2963;
                                float _3027 = 1.0 - dot(vec2(_3022, _3023), vec2(_3022, _3023));
                                float _3958 = isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0));
                                float _3028 = isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0));
                                float _3029 = _3028 * (((isnan(0.0) ? _3015 : (isnan(_3015) ? 0.0 : max(_3015, 0.0))) * _3005) / ((_3018 * 0.699999988079071044921875) + 1.0));
                                float _3039 = dot(vec3(0.0), vec3((-0.0) - (_1713 * _2532), (-0.0) - (_1714 * _2532), (-0.0) - (_1715 * _2532)));
                                float _3969 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
                                float _3047 = (_3013 * dot(vec3(0.0), vec3(_2998, _2999, _3000))) + _3012;
                                float _3980 = isnan(0.0) ? _3047 : (isnan(_3047) ? 0.0 : max(_3047, 0.0));
                                float _3048 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
                                float _3052 = (0.5 / (((isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) + 9.9999999392252902907785028219223e-09) + _3048)) * _3048;
                                float _3991 = isnan(0.0) ? _3052 : (isnan(_3052) ? 0.0 : max(_3052, 0.0));
                                float _3059 = (_3028 * _3005) * (((isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * 3.1415927410125732421875) / ((_3018 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_110_pred = _3059 * _2887.z;
                                frontier_phi_110_pred_1 = _3029 * _2875.z;
                                frontier_phi_110_pred_2 = _3029 * _2875.y;
                                frontier_phi_110_pred_3 = _3029 * _2875.x;
                                frontier_phi_110_pred_4 = _3059 * _2887.y;
                                frontier_phi_110_pred_5 = _3059 * _2887.x;
                            }
                            else
                            {
                                frontier_phi_110_pred = 0.0;
                                frontier_phi_110_pred_1 = 0.0;
                                frontier_phi_110_pred_2 = 0.0;
                                frontier_phi_110_pred_3 = 0.0;
                                frontier_phi_110_pred_4 = 0.0;
                                frontier_phi_110_pred_5 = 0.0;
                            }
                            _3065 = frontier_phi_110_pred;
                            _3068 = frontier_phi_110_pred_1;
                            _3067 = frontier_phi_110_pred_2;
                            _3066 = frontier_phi_110_pred_3;
                            _3064 = frontier_phi_110_pred_4;
                            _3063 = frontier_phi_110_pred_5;
                            _2817 = _3066 + _2830;
                            _2818 = _3067 + _2831;
                            _2819 = _3068 + _2832;
                            _2814 = _3063 + _2827;
                            _2815 = _3064 + _2828;
                            _2816 = _3065 + _2829;
                            if (_2834 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2827 = _2814;
                                _2828 = _2815;
                                _2829 = _2816;
                                _2830 = _2817;
                                _2831 = _2818;
                                _2832 = _2819;
                                _2833 = _2834;
                                continue;
                            }
                        }
                        frontier_phi_104_pred = _2819;
                        frontier_phi_104_pred_1 = _2818;
                        frontier_phi_104_pred_2 = _2817;
                        frontier_phi_104_pred_3 = _2816;
                        frontier_phi_104_pred_4 = _2815;
                        frontier_phi_104_pred_5 = _2814;
                    }
                    _2518 = frontier_phi_104_pred;
                    _2516 = frontier_phi_104_pred_1;
                    _2514 = frontier_phi_104_pred_2;
                    _2512 = frontier_phi_104_pred_3;
                    _2510 = frontier_phi_104_pred_4;
                    _2508 = frontier_phi_104_pred_5;
                    uint _2671 = _2670 + 1u;
                    if (_2671 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2664 = _2508;
                        _2665 = _2510;
                        _2666 = _2512;
                        _2667 = _2514;
                        _2668 = _2516;
                        _2669 = _2518;
                        _2670 = _2671;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_91_92_ladder = _2518;
                frontier_phi_91_92_ladder_1 = _2516;
                frontier_phi_91_92_ladder_2 = _2514;
                frontier_phi_91_92_ladder_3 = _2512;
                frontier_phi_91_92_ladder_4 = _2510;
                frontier_phi_91_92_ladder_5 = _2508;
            }
            else
            {
                frontier_phi_91_92_ladder = _2378;
                frontier_phi_91_92_ladder_1 = _2376;
                frontier_phi_91_92_ladder_2 = _2374;
                frontier_phi_91_92_ladder_3 = _2372;
                frontier_phi_91_92_ladder_4 = _2370;
                frontier_phi_91_92_ladder_5 = _2368;
            }
            _2507 = frontier_phi_91_92_ladder_5;
            _2509 = frontier_phi_91_92_ladder_4;
            _2511 = frontier_phi_91_92_ladder_3;
            _2513 = frontier_phi_91_92_ladder_2;
            _2515 = frontier_phi_91_92_ladder_1;
            _2517 = frontier_phi_91_92_ladder;
        }
        float _2522 = isnan(1.0) ? _747 : (isnan(_747) ? 1.0 : min(_747, 1.0));
        _2273 = (_2522 * _2513) + _2003;
        _2275 = (_2522 * _2515) + _2004;
        _2277 = (_2522 * _2517) + _2005;
        _2279 = ((_2507 * 0.039999999105930328369140625) * _2522) + _2108;
        _2281 = ((_2509 * 0.039999999105930328369140625) * _2522) + _2109;
        _2283 = ((_2511 * 0.039999999105930328369140625) * _2522) + _2110;
    }
    else
    {
        _2273 = _2003;
        _2275 = _2004;
        _2277 = _2005;
        _2279 = _2108;
        _2281 = _2109;
        _2283 = _2110;
    }
    float _4007 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _4018 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    float _4029 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
    float _2300 = ((isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * (_2273 + ((isnan(0.0) ? _1371 : (isnan(_1371) ? 0.0 : max(_1371, 0.0))) * _747))) + ((_2279 + ((isnan(0.0) ? _1659 : (isnan(_1659) ? 0.0 : max(_1659, 0.0))) * _1450)) * cbPerFrame._m0[3u].x);
    float _2301 = ((isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0))) * (_2275 + ((isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0))) * _747))) + ((_2281 + ((isnan(0.0) ? _1662 : (isnan(_1662) ? 0.0 : max(_1662, 0.0))) * _1450)) * cbPerFrame._m0[3u].x);
    float _2302 = ((isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0))) * (_2277 + ((isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0))) * _747))) + ((_2283 + ((isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0))) * _1450)) * cbPerFrame._m0[3u].x);
    uint _2306 = _721 + 6u;
    float _2314 = _707 / cbSceneParam._m0[86u].x;
    float _2315 = _708 / cbSceneParam._m0[86u].y;
    vec4 _2329 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2314, _2315, (log2((isnan(cbSceneParam._m0[77u].w) ? _694 : (isnan(_694) ? cbSceneParam._m0[77u].w : min(_694, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2331 = _2329.x;
    float _2332 = _2329.y;
    float _2333 = _2329.z;
    float _2334 = _2329.w;
    float _2430;
    float _2432;
    float _2434;
    float _2436;
    if (_694 > cbSceneParam._m0[78u].w)
    {
        float _2393 = isnan(_694) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _694 : min(cbSceneParam._m0[80u].w, _694));
        float _2394 = _2393 / _694;
        float _2405 = _2394 * _267;
        float _2406 = _268 * _2394;
        float _2407 = (-0.0) - _2406;
        float _2408 = _2394 * _269;
        float _2410 = (cbSceneParam._m0[77u].w * _2407) / _2393;
        float _2411 = _2410 + cbSceneParam._m0[79u].w;
        float _2412 = cbSceneParam._m0[79u].w - _2406;
        float _2418 = sqrt(((_2405 * _2405) + (_2406 * _2406)) + (_2408 * _2408));
        float _2421 = (1.0 - (cbSceneParam._m0[77u].w / _2393)) * _2418;
        float _2426 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2428 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2626;
        if (abs((_2407 - _2410) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2626 = ((((_2411 > 0.0) ? exp2(_2426 * _2411) : (2.0 - exp2(_2428 * _2411))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2421;
        }
        else
        {
            float _2565 = 1.0 / cbSceneParam._m0[80u].x;
            float _2566 = isnan(_2412) ? _2411 : (isnan(_2411) ? _2412 : max(_2411, _2412));
            float _2567 = isnan(_2412) ? _2411 : (isnan(_2411) ? _2412 : min(_2411, _2412));
            float _2576 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : min(_2566, 0.0));
            float _2577 = isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : min(_2567, 0.0));
            _2626 = ((abs(_2418 / _2407) * cbSceneParam._m0[80u].y) * ((((_2576 - _2577) * 2.0) - ((exp2(_2426 * (isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0)))) - exp2(_2426 * (isnan(0.0) ? _2567 : (isnan(_2567) ? 0.0 : max(_2567, 0.0))))) * _2565)) - ((exp2(_2428 * _2576) - exp2(_2428 * _2577)) * _2565))) + (_2421 * cbSceneParam._m0[80u].z);
        }
        vec4 _2628 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2314, _2315, 1.0), 0.0);
        float _2637 = exp2((_2626 * (-1.44269502162933349609375)) * (1.0 - _2628.w));
        float _2638 = log2(_2637);
        float _2654 = log2(_2334);
        _2430 = (exp2(_2654 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2638 * cbSceneParam._m0[78u].x)) * _2628.x) / cbSceneParam._m0[78u].x)) + _2331;
        _2432 = (exp2(_2654 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2638 * cbSceneParam._m0[78u].y)) * _2628.y) / cbSceneParam._m0[78u].y)) + _2332;
        _2434 = (exp2(_2654 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2638 * cbSceneParam._m0[78u].z)) * _2628.z) / cbSceneParam._m0[78u].z)) + _2333;
        _2436 = _2637 * _2334;
    }
    else
    {
        _2430 = _2331;
        _2432 = _2332;
        _2434 = _2333;
        _2436 = _2334;
    }
    float _2448 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2449 = _2448 == 3.0;
    float _2451 = log2(_2436);
    float _2458 = exp2(_2451 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2300 : (isnan(_2300) ? 0.0 : max(_2300, 0.0)));
    float _2459 = exp2(_2451 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2301 : (isnan(_2301) ? 0.0 : max(_2301, 0.0)));
    float _2460 = exp2(_2451 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2302 : (isnan(_2302) ? 0.0 : max(_2302, 0.0)));
    float _2469 = (_2448 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2469 * (_2449 ? _2458 : (_2458 + (cbSceneParam._m0[72u].w * _2430)));
    SV_Target.y = _2469 * (_2449 ? _2459 : (_2459 + (cbSceneParam._m0[72u].w * _2432)));
    SV_Target.z = _2469 * (_2449 ? _2460 : (_2460 + (cbSceneParam._m0[72u].w * _2434)));
    SV_Target.w = cbInstanceData._m0[_2306].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2306].w;
}


