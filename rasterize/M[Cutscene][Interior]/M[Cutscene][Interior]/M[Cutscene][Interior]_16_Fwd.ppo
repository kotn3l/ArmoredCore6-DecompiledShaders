#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_8;
layout(set = 0, binding = 11) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1270;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _198 = _197 * _190;
    float _199 = _197 * _191;
    float _200 = _197 * _192;
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = _204 * NORMAL.x;
    float _206 = _204 * NORMAL.y;
    float _207 = _204 * NORMAL.z;
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _212 = _211 * TANGENT.x;
    float _213 = _211 * TANGENT.y;
    float _214 = _211 * TANGENT.z;
    float _259 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _269 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _259);
    float _270 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _259);
    float _271 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _259);
    vec4 _284 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _287 = _284.x;
    vec4 _305 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _322 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _287) + cbMtdParam._m0[12u].x) * _305.x;
    float _324 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _287) + cbMtdParam._m0[12u].y) * _305.y;
    float _326 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _287) + cbMtdParam._m0[12u].z) * _305.z;
    vec4 _344 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _380 = cbMtdParam._m0[24u].x + _269;
    float _381 = cbMtdParam._m0[24u].y + _270;
    float _382 = cbMtdParam._m0[24u].z + _271;
    float _396 = (-0.0) - dot(vec3(_380, _381, _382), vec3(_198, _199, _200));
    float _397 = (-0.0) - dot(vec3(_380, _381, _382), vec3(_212, _213, _214));
    float _398 = (-0.0) - dot(vec3(_380, _381, _382), vec3((-0.0) - _205, (-0.0) - _206, (-0.0) - _207));
    float _402 = inversesqrt(dot(vec3(_396, _397, _398), vec3(_396, _397, _398)));
    float _405 = _402 * _398;
    float _406 = (_402 * _396) + ((cbMtdParam._m0[22u].x * _287) * ((_344.x * 2.0) + (-1.0)));
    float _407 = (_402 * _397) + ((cbMtdParam._m0[22u].y * _287) * ((_344.y * 2.0) + (-1.0)));
    float _408 = _406 * cbMtdParam._m0[20u].w;
    float _409 = _407 * cbMtdParam._m0[20u].z;
    float _410 = fract(TEXCOORD.x);
    float _411 = fract(TEXCOORD.y);
    float _417;
    if (_408 > 0.0)
    {
        _417 = (1.0 - _410) / _408;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_408 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _410) / _408;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _417 = frontier_phi_3_2_ladder;
    }
    float _425;
    if (_409 > 0.0)
    {
        _425 = (1.0 - _411) / _409;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_409 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _411) / _409;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _425 = frontier_phi_7_6_ladder;
    }
    bool _427 = _405 > 0.0;
    float _429 = _427 ? (cbMtdParam._m0[16u].x / _405) : 5000.0;
    float _430 = isnan(_425) ? _417 : (isnan(_417) ? _425 : min(_417, _425));
    float _431 = isnan(_429) ? _430 : (isnan(_430) ? _429 : min(_430, _429));
    float _435 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _436 = _410 + (-0.5);
    float _439 = _411 + (-0.5);
    float _442 = ((_431 * _405) + _435) / _435;
    vec4 _467 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (((((_436 + (_431 * _408)) / _442) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (((((_439 + (_431 * _409)) / _442) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    float _480 = (_467.x * _287) * cbMtdParam._m0[9u].x;
    float _481 = (_467.y * _287) * cbMtdParam._m0[9u].y;
    float _482 = (_467.z * _287) * cbMtdParam._m0[9u].z;
    float _501 = _406 * cbMtdParam._m0[22u].w;
    float _502 = _407 * cbMtdParam._m0[22u].z;
    bool _503 = _501 > 0.0;
    float _508;
    if (_503)
    {
        _508 = (1.0 - _410) / _501;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_501 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _410) / _501;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _508 = frontier_phi_11_10_ladder;
    }
    bool _510 = _502 > 0.0;
    float _515;
    if (_510)
    {
        _515 = (1.0 - _411) / _502;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_502 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _411) / _502;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _515 = frontier_phi_15_14_ladder;
    }
    float _518 = _427 ? (cbMtdParam._m0[18u].x / _405) : 5000.0;
    float _519 = isnan(_515) ? _508 : (isnan(_508) ? _515 : min(_508, _515));
    float _520 = isnan(_518) ? _519 : (isnan(_519) ? _518 : min(_519, _518));
    float _524 = cbMtdParam._m0[19u].y * cbMtdParam._m0[18u].x;
    float _528 = ((_520 * _405) + _524) / _524;
    float _533 = cbMtdParam._m0[19u].x - cbMtdParam._m0[20u].x * trunc(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    float _535 = floor(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    vec4 _551 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_436 + (_520 * _501)) / _528) + 0.5) + _533) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_439 + (_520 * _502)) / _528) + 0.5) + _535) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[0u].w));
    float _566;
    if (_503)
    {
        _566 = (1.0 - _410) / _501;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_501 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _410) / _501;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _566 = frontier_phi_19_18_ladder;
    }
    float _572;
    if (_510)
    {
        _572 = (1.0 - _411) / _502;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_502 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _411) / _502;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _572 = frontier_phi_23_22_ladder;
    }
    float _574 = isnan(_572) ? _566 : (isnan(_566) ? _572 : min(_566, _572));
    float _575 = isnan(_518) ? _574 : (isnan(_574) ? _518 : min(_574, _518));
    float _582 = ((_575 * _405) + _524) / _524;
    vec4 _602 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_436 + (_575 * _501)) / _582) + 0.5) + _533) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_439 + (_575 * _502)) / _582) + 0.5) + _535) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[8u].w));
    float _604 = _602.x;
    float _614 = (((((cbMtdParam._m0[10u].x * _287) * _551.x) - _480) * _287) * _604) + _480;
    float _615 = (((((cbMtdParam._m0[10u].y * _287) * _551.y) - _481) * _287) * _604) + _481;
    float _616 = (((((cbMtdParam._m0[10u].z * _287) * _551.z) - _482) * _287) * _604) + _482;
    float _632 = _406 * cbMtdParam._m0[23u].y;
    float _633 = _407 * cbMtdParam._m0[23u].x;
    bool _634 = _632 > 0.0;
    float _639;
    if (_634)
    {
        _639 = (1.0 - _410) / _632;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_632 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _410) / _632;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _639 = frontier_phi_27_26_ladder;
    }
    bool _641 = _633 > 0.0;
    float _646;
    if (_641)
    {
        _646 = (1.0 - _411) / _633;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_633 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _411) / _633;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _646 = frontier_phi_31_30_ladder;
    }
    float _649 = _427 ? (cbMtdParam._m0[19u].w / _405) : 5000.0;
    float _650 = isnan(_646) ? _639 : (isnan(_639) ? _646 : min(_639, _646));
    float _651 = isnan(_649) ? _650 : (isnan(_650) ? _649 : min(_650, _649));
    float _655 = cbMtdParam._m0[19u].w * cbMtdParam._m0[16u].z;
    float _659 = ((_651 * _405) + _655) / _655;
    float _664 = cbMtdParam._m0[19u].z - cbMtdParam._m0[23u].z * trunc(cbMtdParam._m0[19u].z / cbMtdParam._m0[23u].z);
    float _666 = floor(cbMtdParam._m0[19u].z / cbMtdParam._m0[23u].z);
    vec4 _682 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * (((((_436 + (_651 * _632)) / _659) + 0.5) + _664) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * (((((_439 + (_651 * _633)) / _659) + 0.5) + _666) / cbMtdParam._m0[23u].w)) + cbTextureTilingScale._m0[9u].w));
    float _697;
    if (_634)
    {
        _697 = (1.0 - _410) / _632;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_632 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _410) / _632;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _697 = frontier_phi_35_34_ladder;
    }
    float _703;
    if (_641)
    {
        _703 = (1.0 - _411) / _633;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_633 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _411) / _633;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _703 = frontier_phi_39_38_ladder;
    }
    float _705 = isnan(_703) ? _697 : (isnan(_697) ? _703 : min(_697, _703));
    float _706 = isnan(_649) ? _705 : (isnan(_705) ? _649 : min(_705, _649));
    float _713 = ((_706 * _405) + _655) / _655;
    vec4 _733 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_436 + (_706 * _632)) / _713) + 0.5) + _664) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_439 + (_706 * _633)) / _713) + 0.5) + _666) / cbMtdParam._m0[23u].w)) + cbTextureTilingScale._m0[10u].w));
    float _735 = _733.x;
    float _745 = _287 * 0.1500000059604644775390625;
    float _756 = (_745 * ((_614 - _322) + (((((cbMtdParam._m0[14u].x * _287) * _682.x) - _614) * _287) * _735))) + _322;
    float _757 = (_745 * ((_615 - _324) + (((((cbMtdParam._m0[14u].y * _287) * _682.y) - _615) * _287) * _735))) + _324;
    float _758 = (_745 * ((_616 - _326) + (((((cbMtdParam._m0[14u].z * _287) * _682.z) - _616) * _287) * _735))) + _326;
    vec4 _771 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _775 = _771.z;
    float _778 = (_771.x * 2.0) + (-1.0);
    float _779 = (_771.y * 2.0) + (-1.0);
    float _780 = dot(vec2(_778, _779), vec2(_778, _779));
    float _3425 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _785 = sqrt(1.0 - (isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0))));
    float _788 = fma(_785, _205, fma(_779, _212, _778 * _198));
    float _791 = fma(_785, _206, fma(_779, _213, _778 * _199));
    float _794 = fma(_785, _207, fma(_779, _214, _778 * _200));
    float _798 = inversesqrt(dot(vec3(_788, _791, _794), vec3(_788, _791, _794)));
    float _799 = _798 * _788;
    float _800 = _798 * _791;
    float _801 = _798 * _794;
    float _3436 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _802 = isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0));
    float _3447 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _3458 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _3469 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _821 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _825 = inversesqrt(dot(vec3(_269, _270, _271), vec3(_269, _270, _271)));
    float _826 = _269 * _825;
    float _827 = _270 * _825;
    float _828 = _271 * _825;
    float _834 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _835 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _854 = fma(_801, cbSceneParam._m0[5u].z, fma(_800, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _799));
    float _857 = fma(_801, cbSceneParam._m0[6u].z, fma(_800, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _799));
    float _860 = fma(_801, cbSceneParam._m0[7u].z, fma(_800, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _799));
    uint _873 = uint(roundEven(NORMAL.w)) * 13u;
    uint _876 = (_873 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _882 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0)))) * cbInstanceData._m0[_876].x;
    float _883 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0)))) * cbInstanceData._m0[_876].y;
    float _884 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0)))) * cbInstanceData._m0[_876].z;
    float _3480 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
    float _885 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
    float _3491 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
    float _886 = isnan(1.0) ? _3491 : (isnan(_3491) ? 1.0 : min(_3491, 1.0));
    float _3502 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    float _887 = isnan(1.0) ? _3502 : (isnan(_3502) ? 1.0 : min(_3502, 1.0));
    vec4 _896 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _834, cbSceneParam._m0[86u].y * _835));
    float _899 = _896.x * TEXCOORD_4.z;
    float _900 = dot(vec3(_799, _800, _801), vec3(_826, _827, _828));
    float _903 = _900 * 2.0;
    float _907 = (_903 * _799) - _826;
    float _908 = (_903 * _800) - _827;
    float _909 = (_903 * _801) - _828;
    float _913 = abs(dot(vec3(_826, _827, _828), vec3(_799, _800, _801)));
    float _3513 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
    float _915 = sqrt(_802);
    float _928 = exp2((_915 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3513 : (isnan(_3513) ? 1.0 : min(_3513, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_915 * 3.0));
    float _960 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _964 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _968 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1269;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    float _1278;
    float _1279;
    float _1280;
    float _1281;
    float _1282;
    float _1283;
    float _1284;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _996 = fma(_968, cbModelParam._m0[26u].z, fma(_964, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _960));
        float _1000 = fma(_968, cbModelParam._m0[27u].z, fma(_964, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _960));
        float _1004 = fma(_968, cbModelParam._m0[28u].z, fma(_964, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _960));
        float _1027 = _960 + _799;
        float _1028 = _964 + _800;
        float _1029 = _968 + _801;
        float _1039 = fma(_1029, cbModelParam._m0[26u].z, fma(_1028, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1027)) - _996;
        float _1040 = fma(_1029, cbModelParam._m0[27u].z, fma(_1028, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1027)) - _1000;
        float _1041 = fma(_1029, cbModelParam._m0[28u].z, fma(_1028, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1027)) - _1004;
        float _1045 = inversesqrt(dot(vec3(_1039, _1040, _1041), vec3(_1039, _1040, _1041)));
        float _1058 = ((_1045 * _1039) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_996 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1059 = ((_1045 * _1040) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1000 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1060 = ((_1045 * _1041) / cbModelParam._m0[34u].z) + ((((((_1004 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1063 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1058, _1059, _1060), 0.0);
        vec4 _1070 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1058, _1059, _1060), 0.0);
        vec4 _1077 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1058, _1059, _1060), 0.0);
        vec4 _1084 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1058, _1059, _1060), 0.0);
        float _1097 = exp2((_1063.w + (-0.5)) * 20.0) * 2.0;
        float _1098 = _1097 * (_1063.x + (-0.5));
        float _1099 = _1097 * (_1063.y + (-0.5));
        float _1100 = _1097 * (_1063.z + (-0.5));
        float _1107 = exp2((_1070.w + (-0.5)) * 20.0) * 2.0;
        float _1108 = _1107 * (_1070.x + (-0.5));
        float _1109 = _1107 * (_1070.y + (-0.5));
        float _1110 = _1107 * (_1070.z + (-0.5));
        float _1117 = exp2((_1077.w + (-0.5)) * 20.0) * 2.0;
        float _1118 = _1117 * (_1077.x + (-0.5));
        float _1119 = _1117 * (_1077.y + (-0.5));
        float _1120 = _1117 * (_1077.z + (-0.5));
        float _1127 = exp2((_1084.w + (-0.5)) * 20.0) * 2.0;
        float _1128 = _1127 * (_1084.x + (-0.5));
        float _1129 = _1127 * (_1084.y + (-0.5));
        float _1130 = _1127 * (_1084.z + (-0.5));
        float _1131 = isnan(0.0) ? _1128 : (isnan(_1128) ? 0.0 : max(_1128, 0.0));
        float _1132 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1133 = isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0));
        float _1134 = _1098 * 0.5;
        float _1135 = _1108 * 0.5;
        float _1136 = _1118 * 0.5;
        float _1137 = dot(vec3(_1134, _1135, _1136), vec3(_1134, _1135, _1136));
        float _1142 = (_1137 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1137);
        float _1151 = (dot(vec3(_799, _800, _801), vec3(_1142 * _1134, _1142 * _1135, _1142 * _1136)) + 1.0) * 0.5;
        float _3539 = isnan(0.0) ? _1151 : (isnan(_1151) ? 0.0 : max(_1151, 0.0));
        float _1161 = sqrt(((_1135 * _1135) + (_1134 * _1134)) + (_1136 * _1136)) / (_1131 + 9.9999997473787516355514526367188e-06);
        float _3550 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
        float _1163 = _1162 * 2.0;
        float _1167 = (1.0 - _1162) / (_1162 + 1.0);
        float _3561 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
        float _1177 = ((((1.0 - _1168) * (_1163 + 2.0)) * exp2(log2(isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0))) * (_1163 + 1.0))) + _1168) * _1131;
        float _1178 = _1099 * 0.5;
        float _1179 = _1109 * 0.5;
        float _1180 = _1119 * 0.5;
        float _1181 = dot(vec3(_1178, _1179, _1180), vec3(_1178, _1179, _1180));
        float _1186 = (_1181 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1181);
        float _1194 = (dot(vec3(_799, _800, _801), vec3(_1186 * _1178, _1186 * _1179, _1186 * _1180)) + 1.0) * 0.5;
        float _3572 = isnan(0.0) ? _1194 : (isnan(_1194) ? 0.0 : max(_1194, 0.0));
        float _1203 = sqrt(((_1179 * _1179) + (_1178 * _1178)) + (_1180 * _1180)) / (_1132 + 9.9999997473787516355514526367188e-06);
        float _3583 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
        float _1205 = _1204 * 2.0;
        float _1209 = (1.0 - _1204) / (_1204 + 1.0);
        float _3594 = isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0));
        float _1210 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
        float _1219 = ((((1.0 - _1210) * (_1205 + 2.0)) * exp2(log2(isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0))) * (_1205 + 1.0))) + _1210) * _1132;
        float _1220 = _1100 * 0.5;
        float _1221 = _1110 * 0.5;
        float _1222 = _1120 * 0.5;
        float _1223 = dot(vec3(_1220, _1221, _1222), vec3(_1220, _1221, _1222));
        float _1228 = (_1223 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1223);
        float _1236 = (dot(vec3(_799, _800, _801), vec3(_1228 * _1220, _1228 * _1221, _1228 * _1222)) + 1.0) * 0.5;
        float _3605 = isnan(0.0) ? _1236 : (isnan(_1236) ? 0.0 : max(_1236, 0.0));
        float _1245 = sqrt(((_1221 * _1221) + (_1220 * _1220)) + (_1222 * _1222)) / (_1133 + 9.9999997473787516355514526367188e-06);
        float _3616 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
        float _1247 = _1246 * 2.0;
        float _1251 = (1.0 - _1246) / (_1246 + 1.0);
        float _3627 = isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0));
        float _1252 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
        float _1261 = ((((1.0 - _1252) * (_1247 + 2.0)) * exp2(log2(isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0))) * (_1247 + 1.0))) + _1252) * _1133;
        _1269 = _1100;
        _1271 = _1099;
        _1272 = _1098;
        _1273 = _1110;
        _1274 = _1109;
        _1275 = _1108;
        _1276 = _1120;
        _1277 = _1119;
        _1278 = _1118;
        _1279 = _1133;
        _1280 = _1132;
        _1281 = _1131;
        _1282 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0)));
        _1283 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0)));
        _1284 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0)));
    }
    else
    {
        _1269 = _1270;
        _1271 = _1270;
        _1272 = _1270;
        _1273 = _1270;
        _1274 = _1270;
        _1275 = _1270;
        _1276 = _1270;
        _1277 = _1270;
        _1278 = _1270;
        _1279 = _1270;
        _1280 = _1270;
        _1281 = _1270;
        _1282 = 0.0;
        _1283 = 0.0;
        _1284 = 0.0;
    }
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    float _1587;
    float _1588;
    float _1589;
    float _1590;
    float _1591;
    float _1592;
    float _1593;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1310 = fma(_968, cbModelParam._m0[30u].z, fma(_964, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _960));
        float _1314 = fma(_968, cbModelParam._m0[31u].z, fma(_964, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _960));
        float _1318 = fma(_968, cbModelParam._m0[32u].z, fma(_964, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _960));
        float _1341 = _960 + _799;
        float _1342 = _964 + _800;
        float _1343 = _968 + _801;
        float _1353 = fma(_1343, cbModelParam._m0[30u].z, fma(_1342, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1341)) - _1310;
        float _1354 = fma(_1343, cbModelParam._m0[31u].z, fma(_1342, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1341)) - _1314;
        float _1355 = fma(_1343, cbModelParam._m0[32u].z, fma(_1342, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1341)) - _1318;
        float _1359 = inversesqrt(dot(vec3(_1353, _1354, _1355), vec3(_1353, _1354, _1355)));
        float _1372 = ((_1359 * _1353) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1310 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1373 = ((_1359 * _1354) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1314 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1374 = ((_1359 * _1355) / cbModelParam._m0[35u].z) + ((((((_1318 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1376 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1372, _1373, _1374), 0.0);
        vec4 _1383 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1372, _1373, _1374), 0.0);
        vec4 _1390 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1372, _1373, _1374), 0.0);
        vec4 _1397 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1372, _1373, _1374), 0.0);
        float _1409 = exp2((_1376.w + (-0.5)) * 20.0) * 2.0;
        float _1410 = _1409 * (_1376.x + (-0.5));
        float _1411 = _1409 * (_1376.y + (-0.5));
        float _1412 = _1409 * (_1376.z + (-0.5));
        float _1419 = exp2((_1383.w + (-0.5)) * 20.0) * 2.0;
        float _1420 = _1419 * (_1383.x + (-0.5));
        float _1421 = _1419 * (_1383.y + (-0.5));
        float _1422 = _1419 * (_1383.z + (-0.5));
        float _1429 = exp2((_1390.w + (-0.5)) * 20.0) * 2.0;
        float _1430 = _1429 * (_1390.x + (-0.5));
        float _1431 = _1429 * (_1390.y + (-0.5));
        float _1432 = _1429 * (_1390.z + (-0.5));
        float _1439 = exp2((_1397.w + (-0.5)) * 20.0) * 2.0;
        float _1440 = _1439 * (_1397.x + (-0.5));
        float _1441 = _1439 * (_1397.y + (-0.5));
        float _1442 = _1439 * (_1397.z + (-0.5));
        float _1443 = isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0));
        float _1444 = isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0));
        float _1445 = isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0));
        float _1446 = _1410 * 0.5;
        float _1447 = _1420 * 0.5;
        float _1448 = _1430 * 0.5;
        float _1449 = dot(vec3(_1446, _1447, _1448), vec3(_1446, _1447, _1448));
        float _1454 = (_1449 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1449);
        float _1462 = (dot(vec3(_799, _800, _801), vec3(_1454 * _1446, _1454 * _1447, _1454 * _1448)) + 1.0) * 0.5;
        float _3668 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        float _1471 = sqrt(((_1447 * _1447) + (_1446 * _1446)) + (_1448 * _1448)) / (_1443 + 9.9999997473787516355514526367188e-06);
        float _3679 = isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0));
        float _1472 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
        float _1473 = _1472 * 2.0;
        float _1477 = (1.0 - _1472) / (_1472 + 1.0);
        float _3690 = isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0));
        float _1478 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
        float _1487 = ((((1.0 - _1478) * (_1473 + 2.0)) * exp2(log2(isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0))) * (_1473 + 1.0))) + _1478) * _1443;
        float _1488 = _1411 * 0.5;
        float _1489 = _1421 * 0.5;
        float _1490 = _1431 * 0.5;
        float _1491 = dot(vec3(_1488, _1489, _1490), vec3(_1488, _1489, _1490));
        float _1496 = (_1491 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1491);
        float _1504 = (dot(vec3(_799, _800, _801), vec3(_1496 * _1488, _1496 * _1489, _1496 * _1490)) + 1.0) * 0.5;
        float _3701 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
        float _1513 = sqrt(((_1489 * _1489) + (_1488 * _1488)) + (_1490 * _1490)) / (_1444 + 9.9999997473787516355514526367188e-06);
        float _3712 = isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0));
        float _1514 = isnan(1.0) ? _3712 : (isnan(_3712) ? 1.0 : min(_3712, 1.0));
        float _1515 = _1514 * 2.0;
        float _1519 = (1.0 - _1514) / (_1514 + 1.0);
        float _3723 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
        float _1529 = ((((1.0 - _1520) * (_1515 + 2.0)) * exp2(log2(isnan(1.0) ? _3701 : (isnan(_3701) ? 1.0 : min(_3701, 1.0))) * (_1515 + 1.0))) + _1520) * _1444;
        float _1530 = _1412 * 0.5;
        float _1531 = _1422 * 0.5;
        float _1532 = _1432 * 0.5;
        float _1533 = dot(vec3(_1530, _1531, _1532), vec3(_1530, _1531, _1532));
        float _1538 = (_1533 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1533);
        float _1546 = (dot(vec3(_799, _800, _801), vec3(_1538 * _1530, _1538 * _1531, _1538 * _1532)) + 1.0) * 0.5;
        float _3734 = isnan(0.0) ? _1546 : (isnan(_1546) ? 0.0 : max(_1546, 0.0));
        float _1555 = sqrt(((_1531 * _1531) + (_1530 * _1530)) + (_1532 * _1532)) / (_1445 + 9.9999997473787516355514526367188e-06);
        float _3745 = isnan(0.0) ? _1555 : (isnan(_1555) ? 0.0 : max(_1555, 0.0));
        float _1556 = isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0));
        float _1557 = _1556 * 2.0;
        float _1561 = (1.0 - _1556) / (_1556 + 1.0);
        float _3756 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0));
        float _1571 = ((((1.0 - _1562) * (_1557 + 2.0)) * exp2(log2(isnan(1.0) ? _3734 : (isnan(_3734) ? 1.0 : min(_3734, 1.0))) * (_1557 + 1.0))) + _1562) * _1445;
        _1579 = _1412;
        _1580 = _1411;
        _1581 = _1410;
        _1582 = _1422;
        _1583 = _1421;
        _1584 = _1420;
        _1585 = _1432;
        _1586 = _1431;
        _1587 = _1430;
        _1588 = _1445;
        _1589 = _1444;
        _1590 = _1443;
        _1591 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0)));
        _1592 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0)));
        _1593 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)));
    }
    else
    {
        _1579 = _1270;
        _1580 = _1270;
        _1581 = _1270;
        _1582 = _1270;
        _1583 = _1270;
        _1584 = _1270;
        _1585 = _1270;
        _1586 = _1270;
        _1587 = _1270;
        _1588 = _1270;
        _1589 = _1270;
        _1590 = _1270;
        _1591 = 0.0;
        _1592 = 0.0;
        _1593 = 0.0;
    }
    float _1603 = (cbModelParam._m0[1u].x * (_1591 - _1282)) + _1282;
    float _1604 = (cbModelParam._m0[1u].x * (_1592 - _1283)) + _1283;
    float _1605 = (cbModelParam._m0[1u].x * (_1593 - _1284)) + _1284;
    float _1626 = fma(_1605, cbSceneParam._m0[89u].z, fma(_1604, cbSceneParam._m0[89u].y, _1603 * cbSceneParam._m0[89u].x));
    float _1629 = fma(_1605, cbSceneParam._m0[90u].z, fma(_1604, cbSceneParam._m0[90u].y, _1603 * cbSceneParam._m0[90u].x));
    float _1632 = fma(_1605, cbSceneParam._m0[91u].z, fma(_1604, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1603));
    float _1647 = _907 * 0.5;
    float _1648 = _908 * 0.5;
    float _1649 = _909 * 0.5;
    float _1650 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1581, _1584, _1587, _1590));
    float _1653 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1580, _1583, _1586, _1589));
    float _1656 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1579, _1582, _1585, _1588));
    float _1690;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1663 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1269, _1273, _1276, _1279));
        float _1667 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1271, _1274, _1277, _1280));
        float _1671 = dot(vec4(_1647, _1648, _1649, 1.0), vec4(_1272, _1275, _1278, _1281));
        float _1678 = dot(vec4(cbModelParam._m0[39u]), vec4(_1647, _1648, _1649, 1.0));
        _1690 = dot(vec3(isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0)), isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0)), isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1678) ? 0.0 : (isnan(0.0) ? _1678 : max(0.0, _1678))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1690 = 1.0;
    }
    float _1701;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1692 = dot(vec4(cbModelParam._m0[40u]), vec4(_1647, _1648, _1649, 1.0));
        _1701 = dot(vec3(isnan(0.0) ? _1650 : (isnan(_1650) ? 0.0 : max(_1650, 0.0)), isnan(0.0) ? _1653 : (isnan(_1653) ? 0.0 : max(_1653, 0.0)), isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1692) ? 0.0 : (isnan(0.0) ? _1692 : max(0.0, _1692))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1701 = 1.0;
    }
    float _1705 = (_1701 * cbModelParam._m0[1u].x) + (_1690 * (1.0 - cbModelParam._m0[1u].x));
    float _1715 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _802);
    float _1716 = isnan(_1715) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1715 : min(cbModelParam._m0[25u].z, _1715));
    float _1797;
    float _1799;
    float _1801;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1764 = fma(_968, cbModelParam._m0[13u].z, fma(_964, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _960)) + cbModelParam._m0[13u].w;
        float _1768 = fma(_968, cbModelParam._m0[14u].z, fma(_964, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _960)) + cbModelParam._m0[14u].w;
        float _1772 = fma(_968, cbModelParam._m0[15u].z, fma(_964, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _960)) + cbModelParam._m0[15u].w;
        float _1775 = fma(_909, cbModelParam._m0[13u].z, fma(_908, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _907));
        float _1778 = fma(_909, cbModelParam._m0[14u].z, fma(_908, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _907));
        float _1781 = fma(_909, cbModelParam._m0[15u].z, fma(_908, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _907));
        float _1809;
        if (_1775 > 0.0)
        {
            _1809 = abs((1.0 - _1764) / _1775);
        }
        else
        {
            float frontier_phi_54_52_ladder;
            if (_1775 < 0.0)
            {
                frontier_phi_54_52_ladder = abs((_1764 + 1.0) / _1775);
            }
            else
            {
                frontier_phi_54_52_ladder = 5000.0;
            }
            _1809 = frontier_phi_54_52_ladder;
        }
        float _2154;
        if (_1778 > 0.0)
        {
            _2154 = abs((1.0 - _1768) / _1778);
        }
        else
        {
            float frontier_phi_63_59_ladder;
            if (_1778 < 0.0)
            {
                frontier_phi_63_59_ladder = abs((_1768 + 1.0) / _1778);
            }
            else
            {
                frontier_phi_63_59_ladder = 5000.0;
            }
            _2154 = frontier_phi_63_59_ladder;
        }
        float _2454;
        if (_1781 > 0.0)
        {
            _2454 = abs((1.0 - _1772) / _1781);
        }
        else
        {
            float frontier_phi_77_70_ladder;
            if (_1781 < 0.0)
            {
                frontier_phi_77_70_ladder = abs((_1772 + 1.0) / _1781);
            }
            else
            {
                frontier_phi_77_70_ladder = 5000.0;
            }
            _2454 = frontier_phi_77_70_ladder;
        }
        float _2456 = isnan(_2154) ? _1809 : (isnan(_1809) ? _2154 : min(_1809, _2154));
        float _2457 = isnan(_2454) ? _2456 : (isnan(_2456) ? _2454 : min(_2456, _2454));
        float _2461 = (_2457 * _1775) + _1764;
        float _2462 = (_2457 * _1778) + _1768;
        float _2463 = (_2457 * _1781) + _1772;
        float _2464 = _2457 * 9.9999997473787516355514526367188e-05;
        float _2465 = (-1.0) - _2464;
        float _2467 = _2464 + 1.0;
        float frontier_phi_53_77_ladder;
        float frontier_phi_53_77_ladder_1;
        float frontier_phi_53_77_ladder_2;
        if ((_2463 > _2467) || ((_2463 < _2465) || ((_2462 > _2467) || ((_2462 < _2465) || ((_2461 < _2465) || (_2461 > _2467))))))
        {
            frontier_phi_53_77_ladder = 0.0;
            frontier_phi_53_77_ladder_1 = 0.0;
            frontier_phi_53_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2589 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2463, cbModelParam._m0[9u].z, fma(_2462, cbModelParam._m0[9u].y, _2461 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2463, cbModelParam._m0[10u].z, fma(_2462, cbModelParam._m0[10u].y, _2461 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2463, cbModelParam._m0[11u].z, fma(_2462, cbModelParam._m0[11u].y, _2461 * cbModelParam._m0[11u].x))), _1716);
            frontier_phi_53_77_ladder = _2589.x * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_1 = _2589.y * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_2 = _2589.z * cbModelParam._m0[1u].y;
        }
        _1797 = frontier_phi_53_77_ladder;
        _1799 = frontier_phi_53_77_ladder_1;
        _1801 = frontier_phi_53_77_ladder_2;
    }
    else
    {
        vec4 _1785 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_907, _908, _909), _1716);
        _1797 = _1785.x * cbModelParam._m0[1u].y;
        _1799 = _1785.y * cbModelParam._m0[1u].y;
        _1801 = _1785.z * cbModelParam._m0[1u].y;
    }
    float _1805 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _802);
    float _1806 = isnan(_1805) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1805 : min(cbModelParam._m0[25u].w, _1805));
    float _1894;
    float _1896;
    float _1898;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1858 = fma(_968, cbModelParam._m0[21u].z, fma(_964, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _960)) + cbModelParam._m0[21u].w;
        float _1862 = fma(_968, cbModelParam._m0[22u].z, fma(_964, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _960)) + cbModelParam._m0[22u].w;
        float _1866 = fma(_968, cbModelParam._m0[23u].z, fma(_964, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _960)) + cbModelParam._m0[23u].w;
        float _1869 = fma(_909, cbModelParam._m0[21u].z, fma(_908, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _907));
        float _1872 = fma(_909, cbModelParam._m0[22u].z, fma(_908, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _907));
        float _1875 = fma(_909, cbModelParam._m0[23u].z, fma(_908, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _907));
        float _2159;
        if (_1869 > 0.0)
        {
            _2159 = abs((1.0 - _1858) / _1869);
        }
        else
        {
            float frontier_phi_65_61_ladder;
            if (_1869 < 0.0)
            {
                frontier_phi_65_61_ladder = abs((_1858 + 1.0) / _1869);
            }
            else
            {
                frontier_phi_65_61_ladder = 5000.0;
            }
            _2159 = frontier_phi_65_61_ladder;
        }
        float _2480;
        if (_1872 > 0.0)
        {
            _2480 = abs((1.0 - _1862) / _1872);
        }
        else
        {
            float frontier_phi_79_72_ladder;
            if (_1872 < 0.0)
            {
                frontier_phi_79_72_ladder = abs((_1862 + 1.0) / _1872);
            }
            else
            {
                frontier_phi_79_72_ladder = 5000.0;
            }
            _2480 = frontier_phi_79_72_ladder;
        }
        float _2649;
        if (_1875 > 0.0)
        {
            _2649 = abs((1.0 - _1866) / _1875);
        }
        else
        {
            float frontier_phi_93_88_ladder;
            if (_1875 < 0.0)
            {
                frontier_phi_93_88_ladder = abs((_1866 + 1.0) / _1875);
            }
            else
            {
                frontier_phi_93_88_ladder = 5000.0;
            }
            _2649 = frontier_phi_93_88_ladder;
        }
        float _2651 = isnan(_2480) ? _2159 : (isnan(_2159) ? _2480 : min(_2159, _2480));
        float _2652 = isnan(_2649) ? _2651 : (isnan(_2651) ? _2649 : min(_2651, _2649));
        float _2656 = (_2652 * _1869) + _1858;
        float _2657 = (_2652 * _1872) + _1862;
        float _2658 = (_2652 * _1875) + _1866;
        float _2659 = _2652 * 9.9999997473787516355514526367188e-05;
        float _2660 = (-1.0) - _2659;
        float _2662 = _2659 + 1.0;
        float frontier_phi_62_93_ladder;
        float frontier_phi_62_93_ladder_1;
        float frontier_phi_62_93_ladder_2;
        if ((_2658 > _2662) || ((_2658 < _2660) || ((_2657 > _2662) || ((_2657 < _2660) || ((_2656 < _2660) || (_2656 > _2662))))))
        {
            frontier_phi_62_93_ladder = 0.0;
            frontier_phi_62_93_ladder_1 = 0.0;
            frontier_phi_62_93_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2891 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2658, cbModelParam._m0[17u].z, fma(_2657, cbModelParam._m0[17u].y, _2656 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2658, cbModelParam._m0[18u].z, fma(_2657, cbModelParam._m0[18u].y, _2656 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2658, cbModelParam._m0[19u].z, fma(_2657, cbModelParam._m0[19u].y, _2656 * cbModelParam._m0[19u].x))), _1806);
            frontier_phi_62_93_ladder = _2891.z * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_1 = _2891.y * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_2 = _2891.x * cbModelParam._m0[1u].z;
        }
        _1894 = frontier_phi_62_93_ladder_2;
        _1896 = frontier_phi_62_93_ladder_1;
        _1898 = frontier_phi_62_93_ladder;
    }
    else
    {
        vec4 _1878 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_907, _908, _909), _1806);
        _1894 = _1878.x * cbModelParam._m0[1u].z;
        _1896 = _1878.y * cbModelParam._m0[1u].z;
        _1898 = _1878.z * cbModelParam._m0[1u].z;
    }
    float _1910 = ((((1.0 - _928) * ((_915 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_928 * _915)) * _899;
    float _1911 = _1910 * ((cbModelParam._m0[1u].w * (_1894 - _1797)) + _1797);
    float _1912 = _1910 * ((cbModelParam._m0[1u].w * (_1896 - _1799)) + _1799);
    float _1913 = _1910 * ((cbModelParam._m0[1u].w * (_1898 - _1801)) + _1801);
    float _1916 = fma(_1913, cbSceneParam._m0[89u].z, fma(_1912, cbSceneParam._m0[89u].y, _1911 * cbSceneParam._m0[89u].x));
    float _1919 = fma(_1913, cbSceneParam._m0[90u].z, fma(_1912, cbSceneParam._m0[90u].y, _1911 * cbSceneParam._m0[90u].x));
    float _1922 = fma(_1913, cbSceneParam._m0[91u].z, fma(_1912, cbSceneParam._m0[91u].y, _1911 * cbSceneParam._m0[91u].x));
    uvec4 _1932 = floatBitsToUint(cbInstanceData._m0[_873 + 5u]);
    uint _1934 = _1932.x * 14u;
    uint _1935 = _1934 + 13u;
    float _1940 = _899 + (-1.0);
    float _1943 = (cbLight._m0[_1935].x * _1940) + 1.0;
    float _1944 = (cbLight._m0[_1935].y * _1940) + 1.0;
    uint _1945 = _1934 + 5u;
    float _1951 = isnan(1.0) ? _1944 : (isnan(_1944) ? 1.0 : min(_1944, 1.0));
    uint _1955 = _1934 + 4u;
    float _1961 = isnan(1.0) ? _1943 : (isnan(_1943) ? 1.0 : min(_1943, 1.0));
    uint _1965 = _1934 | 1u;
    float _1976 = dot(vec3(cbLight._m0[_1934].xyz), vec3(_799, _800, _801));
    float _1979 = dot(vec3(cbLight._m0[_1965].xyz), vec3(_799, _800, _801));
    float _3892 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
    float _3903 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
    float _1984 = (isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0))) * 0.3183098733425140380859375;
    float _1986 = (isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0))) * 0.3183098733425140380859375;
    float _1993 = ((cbLight._m0[_1945].x * _1951) * _1986) + ((cbLight._m0[_1955].x * _1961) * _1984);
    float _1994 = ((_1951 * cbLight._m0[_1945].y) * _1986) + ((_1961 * cbLight._m0[_1955].y) * _1984);
    float _1995 = ((_1951 * cbLight._m0[_1945].z) * _1986) + ((_1961 * cbLight._m0[_1955].z) * _1984);
    uint _1997 = _1934 + 8u;
    float _2010 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1934].w)) * _802) * 0.949999988079071044921875);
    float _2011 = _2010 * _2010;
    float _2012 = cbLight._m0[_1934].x + _826;
    float _2013 = cbLight._m0[_1934].y + _827;
    float _2014 = cbLight._m0[_1934].z + _828;
    float _2018 = inversesqrt(dot(vec3(_2012, _2013, _2014), vec3(_2012, _2013, _2014)));
    float _2019 = _2018 * _2012;
    float _2020 = _2018 * _2013;
    float _2021 = _2018 * _2014;
    float _2022 = dot(vec3(_799, _800, _801), vec3(cbLight._m0[_1934].xyz));
    float _3914 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
    float _2025 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
    float _3925 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _2026 = isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0));
    float _2027 = dot(vec3(_799, _800, _801), vec3(_2019, _2020, _2021));
    float _3936 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _2030 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
    float _2031 = dot(vec3(cbLight._m0[_1934].xyz), vec3(_2019, _2020, _2021));
    float _3947 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _2035 = _2011 * _2011;
    float _2039 = ((_2030 * _2030) * (_2035 + (-1.0))) + 1.0;
    float _2050 = (exp2(log2(1.0 - (isnan(1.0) ? _3947 : (isnan(_3947) ? 1.0 : min(_3947, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2051 = 1.0 - _2011;
    float _2062 = (0.5 / (((_2026 * ((_2025 * _2051) + _2011)) + 9.9999999392252902907785028219223e-09) + (((_2026 * _2051) + _2011) * _2025))) * _2025;
    float _3958 = isnan(0.0) ? _2062 : (isnan(_2062) ? 0.0 : max(_2062, 0.0));
    float _2064 = (isnan(1.0) ? _3958 : (isnan(_3958) ? 1.0 : min(_3958, 1.0))) * (_2035 / ((_2039 * _2039) * 3.141590118408203125));
    uint _2075 = _1934 + 9u;
    float _2086 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1965].w)) * _802) * 0.949999988079071044921875);
    float _2087 = _2086 * _2086;
    float _2088 = cbLight._m0[_1965].x + _826;
    float _2089 = cbLight._m0[_1965].y + _827;
    float _2090 = cbLight._m0[_1965].z + _828;
    float _2094 = inversesqrt(dot(vec3(_2088, _2089, _2090), vec3(_2088, _2089, _2090)));
    float _2095 = _2094 * _2088;
    float _2096 = _2094 * _2089;
    float _2097 = _2094 * _2090;
    float _2098 = dot(vec3(_799, _800, _801), vec3(cbLight._m0[_1965].xyz));
    float _3969 = isnan(0.0) ? _2098 : (isnan(_2098) ? 0.0 : max(_2098, 0.0));
    float _2101 = isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0));
    float _2102 = dot(vec3(_799, _800, _801), vec3(_2095, _2096, _2097));
    float _3980 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
    float _2105 = isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0));
    float _2106 = dot(vec3(cbLight._m0[_1965].xyz), vec3(_2095, _2096, _2097));
    float _3991 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
    float _2110 = _2087 * _2087;
    float _2114 = ((_2105 * _2105) * (_2110 + (-1.0))) + 1.0;
    float _2123 = (exp2(log2(1.0 - (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2124 = 1.0 - _2087;
    float _2134 = (0.5 / (((_2026 * ((_2101 * _2124) + _2087)) + 9.9999999392252902907785028219223e-09) + (((_2026 * _2124) + _2087) * _2101))) * _2101;
    float _4002 = isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0));
    float _2136 = (isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * (_2110 / ((_2114 * _2114) * 3.141590118408203125));
    float _2146 = (((_2123 * cbLight._m0[_2075].x) * _2136) * _1951) + (((_2050 * cbLight._m0[_1997].x) * _2064) * _1961);
    float _2147 = (((_2123 * cbLight._m0[_2075].y) * _2136) * _1951) + (((_2050 * cbLight._m0[_1997].y) * _2064) * _1961);
    float _2148 = (((_2123 * cbLight._m0[_2075].z) * _2136) * _1951) + (((_2050 * cbLight._m0[_1997].z) * _2064) * _1961);
    float _2263;
    float _2265;
    float _2267;
    float _2269;
    float _2271;
    float _2273;
    if (_1932.y == 0u)
    {
        float _2203 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2204 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2203;
        float _2205 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2203;
        float _2206 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2203;
        uvec4 _2218 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2219 = _2218.x;
        uint _2230 = uint((float(_2218.y) * floor(float(uint(cbSceneParam._m0[85u].y * _835) / _2219))) + floor(float(uint(cbSceneParam._m0[85u].x * _834) / _2219)));
        float _2240 = (log2(_2206 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2241 = isnan(0.0) ? _2240 : (isnan(_2240) ? 0.0 : max(_2240, 0.0));
        uint _2244 = uint(isnan(14.0) ? _2241 : (isnan(_2241) ? 14.0 : min(_2241, 14.0)));
        uvec4 _2249 = texelFetch(g_lightClusterGridBuffer, int(((_2244 << 2u) + (_2230 << 6u)) >> 2u));
        uint _2250 = _2249.x;
        uint _2251 = _2218.z;
        float _2341;
        float _2343;
        float _2345;
        float _2347;
        float _2349;
        float _2351;
        if (((((1u << ((_2251 >> 4u) & 15u)) + 4294967295u) & _2250) == 0u) || ((_2251 & 240u) == 0u))
        {
            _2341 = 0.0;
            _2343 = 0.0;
            _2345 = 0.0;
            _2347 = 0.0;
            _2349 = 0.0;
            _2351 = 0.0;
        }
        else
        {
            float _2342;
            float _2344;
            float _2346;
            float _2348;
            float _2350;
            float _2352;
            float _2517 = 0.0;
            float _2518 = 0.0;
            float _2519 = 0.0;
            float _2520 = 0.0;
            float _2521 = 0.0;
            float _2522 = 0.0;
            uint _2523 = 0u;
            uint _2532;
            bool _2533;
            for (;;)
            {
                _2532 = texelFetch(g_lightClassification, int((((_2244 << 5u) + (_2230 << 9u)) + (_2523 << 2u)) >> 2u)).x;
                _2533 = _2532 == 0u;
                float frontier_phi_90_pred;
                float frontier_phi_90_pred_1;
                float frontier_phi_90_pred_2;
                float frontier_phi_90_pred_3;
                float frontier_phi_90_pred_4;
                float frontier_phi_90_pred_5;
                if (_2533)
                {
                    frontier_phi_90_pred = _2522;
                    frontier_phi_90_pred_1 = _2517;
                    frontier_phi_90_pred_2 = _2518;
                    frontier_phi_90_pred_3 = _2519;
                    frontier_phi_90_pred_4 = _2520;
                    frontier_phi_90_pred_5 = _2521;
                }
                else
                {
                    float _2692;
                    float _2693;
                    float _2694;
                    float _2695;
                    float _2696;
                    float _2697;
                    uint _2698;
                    _2692 = _2517;
                    _2693 = _2518;
                    _2694 = _2519;
                    _2695 = _2520;
                    _2696 = _2521;
                    _2697 = _2522;
                    _2698 = _2532;
                    float _2598;
                    float _2599;
                    float _2600;
                    float _2601;
                    float _2602;
                    float _2603;
                    for (;;)
                    {
                        uint _2702 = uint(findLSB(_2698)) + (_2523 << 5u);
                        uint _2699 = (_2698 + 4294967295u) & _2698;
                        uint _2704 = _2702 * 48u;
                        vec4 _2718 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2704)).x, texelFetch(g_PointLightRenderingBuffer, int(_2704 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2704 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2704 + 3u)).x));
                        uint _2724 = (_2702 * 48u) + 4u;
                        vec4 _2737 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2724)).x, texelFetch(g_PointLightRenderingBuffer, int(_2724 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2724 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2724 + 3u)).x));
                        uint _2743 = (_2702 * 48u) + 8u;
                        vec3 _2754 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2743)).x, texelFetch(g_PointLightRenderingBuffer, int(_2743 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2743 + 2u)).x));
                        float _2758 = _2718.x - _2204;
                        float _2759 = _2718.y - _2205;
                        float _2760 = _2718.z - _2206;
                        float _2761 = dot(vec3(_2758, _2759, _2760), vec3(_2758, _2759, _2760));
                        float _2764 = inversesqrt(_2761);
                        float _2765 = _2764 * _2758;
                        float _2766 = _2764 * _2759;
                        float _2767 = _2764 * _2760;
                        float _2768 = dot(vec3(_854, _857, _860), vec3(_2765, _2766, _2767));
                        float _2773 = 1.0 - (_2761 * _2718.w);
                        float _4023 = isnan(0.0) ? _2773 : (isnan(_2773) ? 0.0 : max(_2773, 0.0));
                        float _2774 = isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0));
                        float _2775 = sqrt(_2761) * _2737.w;
                        float _2778 = 1.39999997615814208984375 / (_2775 + 1.39999997615814208984375);
                        float _2779 = _2778 * _2778;
                        float _2782 = ((1.0 - _2779) * _2768) + _2779;
                        float _2785 = _2775 * _2775;
                        float _2789 = ((isnan(0.0) ? _2782 : (isnan(_2782) ? 0.0 : max(_2782, 0.0))) * _2774) / ((_2785 * 0.699999988079071044921875) + 1.0);
                        float _2793 = (-0.0) - _2204;
                        float _2794 = (-0.0) - _2205;
                        float _2795 = (-0.0) - _2206;
                        float _2799 = inversesqrt(dot(vec3(_2793, _2794, _2795), vec3(_2793, _2794, _2795)));
                        float _2800 = _2799 * _2793;
                        float _2801 = _2799 * _2794;
                        float _2802 = _2799 * _2795;
                        float _2810 = exp2(log2(1.0 / ((_2785 * 3.5) + 5.0)) * 0.25);
                        float _2811 = 1.0 - _915;
                        float _2818 = sqrt(1.0 - ((1.0 - (_2811 * _2811)) * (1.0 - (_2810 * _2810))));
                        float _2819 = _2818 * _2818;
                        float _2820 = _2819 * _2819;
                        float _2821 = _2800 + _2765;
                        float _2822 = _2801 + _2766;
                        float _2823 = _2802 + _2767;
                        float _2827 = inversesqrt(dot(vec3(_2821, _2822, _2823), vec3(_2821, _2822, _2823)));
                        float _2831 = dot(vec3(_854, _857, _860), vec3(_2800, _2801, _2802));
                        float _4039 = isnan(0.0) ? _2831 : (isnan(_2831) ? 0.0 : max(_2831, 0.0));
                        float _2834 = isnan(1.0) ? _4039 : (isnan(_4039) ? 1.0 : min(_4039, 1.0));
                        float _2835 = dot(vec3(_854, _857, _860), vec3(_2827 * _2821, _2827 * _2822, _2827 * _2823));
                        float _4050 = isnan(0.0) ? _2835 : (isnan(_2835) ? 0.0 : max(_2835, 0.0));
                        float _2838 = isnan(1.0) ? _4050 : (isnan(_4050) ? 1.0 : min(_4050, 1.0));
                        float _2842 = ((_2838 * _2838) * (_2820 + (-1.0))) + 1.0;
                        float _2843 = _2778 * _2819;
                        float _2844 = _2843 * _2843;
                        float _2847 = ((1.0 - _2844) * _2768) + _2844;
                        float _4061 = isnan(0.0) ? _2847 : (isnan(_2847) ? 0.0 : max(_2847, 0.0));
                        float _2848 = isnan(1.0) ? _4061 : (isnan(_4061) ? 1.0 : min(_4061, 1.0));
                        float _2849 = 1.0 - _2819;
                        float _2859 = (0.5 / (((_2848 * ((_2834 * _2849) + _2819)) + 9.9999999392252902907785028219223e-09) + (((_2848 * _2849) + _2819) * _2834))) * _2848;
                        float _4072 = isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0));
                        float _2870 = (((_2820 * 3.1415927410125732421875) * (isnan(1.0) ? _4072 : (isnan(_4072) ? 1.0 : min(_4072, 1.0)))) / ((_2842 * _2842) * ((_2785 * 2.1991131305694580078125) + 3.141590118408203125))) * _2774;
                        _2601 = (_2789 * _2737.x) + _2695;
                        _2602 = (_2789 * _2737.y) + _2696;
                        _2603 = (_2789 * _2737.z) + _2697;
                        _2598 = (_2870 * _2754.x) + _2692;
                        _2599 = (_2870 * _2754.y) + _2693;
                        _2600 = (_2870 * _2754.z) + _2694;
                        if (_2699 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2692 = _2598;
                            _2693 = _2599;
                            _2694 = _2600;
                            _2695 = _2601;
                            _2696 = _2602;
                            _2697 = _2603;
                            _2698 = _2699;
                        }
                    }
                    frontier_phi_90_pred = _2603;
                    frontier_phi_90_pred_1 = _2598;
                    frontier_phi_90_pred_2 = _2599;
                    frontier_phi_90_pred_3 = _2600;
                    frontier_phi_90_pred_4 = _2601;
                    frontier_phi_90_pred_5 = _2602;
                }
                _2352 = frontier_phi_90_pred;
                _2342 = frontier_phi_90_pred_1;
                _2344 = frontier_phi_90_pred_2;
                _2346 = frontier_phi_90_pred_3;
                _2348 = frontier_phi_90_pred_4;
                _2350 = frontier_phi_90_pred_5;
                uint _2524 = _2523 + 1u;
                if (_2524 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2517 = _2342;
                    _2518 = _2344;
                    _2519 = _2346;
                    _2520 = _2348;
                    _2521 = _2350;
                    _2522 = _2352;
                    _2523 = _2524;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2341 = _2342;
            _2343 = _2344;
            _2345 = _2346;
            _2347 = _2348;
            _2349 = _2350;
            _2351 = _2352;
        }
        uvec4 _2355 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2356 = _2355.z;
        uint _2358 = (_2356 >> 8u) & 15u;
        float _2485;
        float _2487;
        float _2489;
        float _2491;
        float _2493;
        float _2495;
        if (((4294967295u << _2358) & _2250) == 0u)
        {
            _2485 = _2341;
            _2487 = _2343;
            _2489 = _2345;
            _2491 = _2347;
            _2493 = _2349;
            _2495 = _2351;
        }
        else
        {
            float _2510 = inversesqrt(dot(vec3(_2204, _2205, _2206), vec3(_2204, _2205, _2206)));
            float _2511 = _2510 * _2204;
            float _2512 = _2510 * _2205;
            float _2513 = _2510 * _2206;
            float frontier_phi_81_82_ladder;
            float frontier_phi_81_82_ladder_1;
            float frontier_phi_81_82_ladder_2;
            float frontier_phi_81_82_ladder_3;
            float frontier_phi_81_82_ladder_4;
            float frontier_phi_81_82_ladder_5;
            if (_2358 < ((_2356 >> 12u) & 15u))
            {
                float _2486;
                float _2488;
                float _2490;
                float _2492;
                float _2494;
                float _2496;
                float _2675 = _2341;
                float _2676 = _2343;
                float _2677 = _2345;
                float _2678 = _2347;
                float _2679 = _2349;
                float _2680 = _2351;
                uint _2681 = _2358;
                uint _2690;
                bool _2691;
                for (;;)
                {
                    _2690 = texelFetch(g_lightClassification, int((((_2244 << 5u) + (_2230 << 9u)) + (_2681 << 2u)) >> 2u)).x;
                    _2691 = _2690 == 0u;
                    float frontier_phi_99_pred;
                    float frontier_phi_99_pred_1;
                    float frontier_phi_99_pred_2;
                    float frontier_phi_99_pred_3;
                    float frontier_phi_99_pred_4;
                    float frontier_phi_99_pred_5;
                    if (_2691)
                    {
                        frontier_phi_99_pred = _2678;
                        frontier_phi_99_pred_1 = _2677;
                        frontier_phi_99_pred_2 = _2676;
                        frontier_phi_99_pred_3 = _2675;
                        frontier_phi_99_pred_4 = _2680;
                        frontier_phi_99_pred_5 = _2679;
                    }
                    else
                    {
                        float _2896;
                        float _2897;
                        float _2898;
                        float _2899;
                        float _2900;
                        float _2901;
                        float _3189;
                        float _3190;
                        float _3191;
                        float _3192;
                        float _3193;
                        float _3194;
                        float _2909 = _2675;
                        float _2910 = _2676;
                        float _2911 = _2677;
                        float _2912 = _2678;
                        float _2913 = _2679;
                        float _2914 = _2680;
                        uint _2915 = _2690;
                        uint _2916;
                        vec4 _2941;
                        float _2942;
                        vec4 _2957;
                        vec3 _2969;
                        vec4 _2984;
                        vec4 _2999;
                        float _3045;
                        bool _3046;
                        for (;;)
                        {
                            uint _2926 = ((_2681 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2915));
                            _2916 = (_2915 + 4294967295u) & _2915;
                            uint _2928 = _2926 * 40u;
                            _2941 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2928)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2928 + 3u)).x));
                            _2942 = _2941.w;
                            uint _2944 = (_2926 * 40u) + 4u;
                            _2957 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2944)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2944 + 3u)).x));
                            uint _2959 = (_2926 * 40u) + 8u;
                            _2969 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2959)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2959 + 2u)).x));
                            uint _2971 = (_2926 * 40u) + 16u;
                            _2984 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2971)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2971 + 3u)).x));
                            uint _2986 = (_2926 * 40u) + 20u;
                            _2999 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2986)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2986 + 3u)).x));
                            uint _3001 = (_2926 * 40u) + 24u;
                            vec4 _3014 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3001)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3001 + 3u)).x));
                            uint _3020 = (_2926 * 40u) + 28u;
                            vec4 _3033 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3020)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3020 + 3u)).x));
                            _3045 = fma(_2206, _3033.z, fma(_2205, _3033.y, _3033.x * _2204)) + _3033.w;
                            _3046 = !((fma(_2206, _3014.z, fma(_2205, _3014.y, _3014.x * _2204)) + _3014.w) <= 0.0);
                            float frontier_phi_105_pred;
                            float frontier_phi_105_pred_1;
                            float frontier_phi_105_pred_2;
                            float frontier_phi_105_pred_3;
                            float frontier_phi_105_pred_4;
                            float frontier_phi_105_pred_5;
                            if (_3046)
                            {
                                float _3073 = _2941.x - _2204;
                                float _3074 = _2941.y - _2205;
                                float _3075 = _2941.z - _2206;
                                float _3076 = dot(vec3(_3073, _3074, _3075), vec3(_3073, _3074, _3075));
                                float _3079 = inversesqrt(_3076);
                                float _3080 = _3079 * _3073;
                                float _3081 = _3079 * _3074;
                                float _3082 = _3079 * _3075;
                                float _3086 = 1.0 - (_3076 / (_2942 * _2942));
                                float _4083 = isnan(0.0) ? _3086 : (isnan(_3086) ? 0.0 : max(_3086, 0.0));
                                float _3087 = isnan(1.0) ? _4083 : (isnan(_4083) ? 1.0 : min(_4083, 1.0));
                                float _3091 = sqrt(_3076) * _2957.w;
                                float _3093 = 1.39999997615814208984375 / (_3091 + 1.39999997615814208984375);
                                float _3094 = _3093 * _3093;
                                float _3097 = ((1.0 - _3094) * dot(vec3(_3080, _3081, _3082), vec3(_854, _857, _860))) + _3094;
                                float _3100 = _3091 * _3091;
                                float _3104 = (fma(_2206, _2984.z, fma(_2205, _2984.y, _2984.x * _2204)) + _2984.w) / _3045;
                                float _3105 = (fma(_2206, _2999.z, fma(_2205, _2999.y, _2999.x * _2204)) + _2999.w) / _3045;
                                float _3109 = 1.0 - dot(vec2(_3104, _3105), vec2(_3104, _3105));
                                float _4099 = isnan(0.0) ? _3109 : (isnan(_3109) ? 0.0 : max(_3109, 0.0));
                                float _3110 = isnan(1.0) ? _4099 : (isnan(_4099) ? 1.0 : min(_4099, 1.0));
                                float _3111 = _3110 * (((isnan(0.0) ? _3097 : (isnan(_3097) ? 0.0 : max(_3097, 0.0))) * _3087) / ((_3100 * 0.699999988079071044921875) + 1.0));
                                float _3123 = exp2(log2(1.0 / ((_3100 * 3.5) + 5.0)) * 0.25);
                                float _3124 = 1.0 - _915;
                                float _3131 = sqrt(1.0 - ((1.0 - (_3124 * _3124)) * (1.0 - (_3123 * _3123))));
                                float _3132 = _3131 * _3131;
                                float _3133 = _3132 * _3132;
                                float _3134 = _3080 - _2511;
                                float _3135 = _3081 - _2512;
                                float _3136 = _3082 - _2513;
                                float _3140 = inversesqrt(dot(vec3(_3134, _3135, _3136), vec3(_3134, _3135, _3136)));
                                float _3144 = dot(vec3(_854, _857, _860), vec3((-0.0) - _2511, (-0.0) - _2512, (-0.0) - _2513));
                                float _4110 = isnan(0.0) ? _3144 : (isnan(_3144) ? 0.0 : max(_3144, 0.0));
                                float _3147 = isnan(1.0) ? _4110 : (isnan(_4110) ? 1.0 : min(_4110, 1.0));
                                float _3148 = dot(vec3(_854, _857, _860), vec3(_3140 * _3134, _3140 * _3135, _3140 * _3136));
                                float _4121 = isnan(0.0) ? _3148 : (isnan(_3148) ? 0.0 : max(_3148, 0.0));
                                float _3151 = isnan(1.0) ? _4121 : (isnan(_4121) ? 1.0 : min(_4121, 1.0));
                                float _3155 = ((_3151 * _3151) * (_3133 + (-1.0))) + 1.0;
                                float _3156 = _3093 * _3132;
                                float _3157 = _3156 * _3156;
                                float _3163 = ((1.0 - _3157) * dot(vec3(_854, _857, _860), vec3(_3080, _3081, _3082))) + _3157;
                                float _4132 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0));
                                float _3164 = isnan(1.0) ? _4132 : (isnan(_4132) ? 1.0 : min(_4132, 1.0));
                                float _3165 = 1.0 - _3132;
                                float _3175 = (0.5 / (((_3164 * ((_3147 * _3165) + _3132)) + 9.9999999392252902907785028219223e-09) + (((_3164 * _3165) + _3132) * _3147))) * _3164;
                                float _4143 = isnan(0.0) ? _3175 : (isnan(_3175) ? 0.0 : max(_3175, 0.0));
                                float _3185 = (_3110 * _3087) * (((_3133 * 3.1415927410125732421875) * (isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0)))) / ((_3155 * _3155) * ((_3100 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_105_pred = _3111 * _2957.z;
                                frontier_phi_105_pred_1 = _3185 * _2969.x;
                                frontier_phi_105_pred_2 = _3185 * _2969.y;
                                frontier_phi_105_pred_3 = _3185 * _2969.z;
                                frontier_phi_105_pred_4 = _3111 * _2957.x;
                                frontier_phi_105_pred_5 = _3111 * _2957.y;
                            }
                            else
                            {
                                frontier_phi_105_pred = 0.0;
                                frontier_phi_105_pred_1 = 0.0;
                                frontier_phi_105_pred_2 = 0.0;
                                frontier_phi_105_pred_3 = 0.0;
                                frontier_phi_105_pred_4 = 0.0;
                                frontier_phi_105_pred_5 = 0.0;
                            }
                            _3194 = frontier_phi_105_pred;
                            _3189 = frontier_phi_105_pred_1;
                            _3190 = frontier_phi_105_pred_2;
                            _3191 = frontier_phi_105_pred_3;
                            _3192 = frontier_phi_105_pred_4;
                            _3193 = frontier_phi_105_pred_5;
                            _2899 = _3192 + _2912;
                            _2900 = _3193 + _2913;
                            _2901 = _3194 + _2914;
                            _2896 = _3189 + _2909;
                            _2897 = _3190 + _2910;
                            _2898 = _3191 + _2911;
                            if (_2916 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2909 = _2896;
                                _2910 = _2897;
                                _2911 = _2898;
                                _2912 = _2899;
                                _2913 = _2900;
                                _2914 = _2901;
                                _2915 = _2916;
                                continue;
                            }
                        }
                        frontier_phi_99_pred = _2899;
                        frontier_phi_99_pred_1 = _2898;
                        frontier_phi_99_pred_2 = _2897;
                        frontier_phi_99_pred_3 = _2896;
                        frontier_phi_99_pred_4 = _2901;
                        frontier_phi_99_pred_5 = _2900;
                    }
                    _2492 = frontier_phi_99_pred;
                    _2490 = frontier_phi_99_pred_1;
                    _2488 = frontier_phi_99_pred_2;
                    _2486 = frontier_phi_99_pred_3;
                    _2496 = frontier_phi_99_pred_4;
                    _2494 = frontier_phi_99_pred_5;
                    uint _2682 = _2681 + 1u;
                    if (_2682 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2675 = _2486;
                        _2676 = _2488;
                        _2677 = _2490;
                        _2678 = _2492;
                        _2679 = _2494;
                        _2680 = _2496;
                        _2681 = _2682;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_81_82_ladder = _2496;
                frontier_phi_81_82_ladder_1 = _2492;
                frontier_phi_81_82_ladder_2 = _2490;
                frontier_phi_81_82_ladder_3 = _2488;
                frontier_phi_81_82_ladder_4 = _2486;
                frontier_phi_81_82_ladder_5 = _2494;
            }
            else
            {
                frontier_phi_81_82_ladder = _2351;
                frontier_phi_81_82_ladder_1 = _2347;
                frontier_phi_81_82_ladder_2 = _2345;
                frontier_phi_81_82_ladder_3 = _2343;
                frontier_phi_81_82_ladder_4 = _2341;
                frontier_phi_81_82_ladder_5 = _2349;
            }
            _2485 = frontier_phi_81_82_ladder_4;
            _2487 = frontier_phi_81_82_ladder_3;
            _2489 = frontier_phi_81_82_ladder_2;
            _2491 = frontier_phi_81_82_ladder_1;
            _2493 = frontier_phi_81_82_ladder_5;
            _2495 = frontier_phi_81_82_ladder;
        }
        float _2500 = isnan(1.0) ? _899 : (isnan(_899) ? 1.0 : min(_899, 1.0));
        _2263 = (_2500 * _2491) + _1993;
        _2265 = (_2500 * _2493) + _1994;
        _2267 = (_2500 * _2495) + _1995;
        _2269 = ((_2485 * 0.039999999105930328369140625) * _2500) + _2146;
        _2271 = ((_2487 * 0.039999999105930328369140625) * _2500) + _2147;
        _2273 = ((_2489 * 0.039999999105930328369140625) * _2500) + _2148;
    }
    else
    {
        _2263 = _1993;
        _2265 = _1994;
        _2267 = _1995;
        _2269 = _2146;
        _2271 = _2147;
        _2273 = _2148;
    }
    float _4159 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
    float _4170 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    float _4181 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
    float _2290 = ((isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (_2263 + ((isnan(0.0) ? _1626 : (isnan(_1626) ? 0.0 : max(_1626, 0.0))) * _899))) + ((_2269 + ((isnan(0.0) ? _1916 : (isnan(_1916) ? 0.0 : max(_1916, 0.0))) * _1705)) * cbPerFrame._m0[3u].x);
    float _2291 = ((isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0))) * (_2265 + ((isnan(0.0) ? _1629 : (isnan(_1629) ? 0.0 : max(_1629, 0.0))) * _899))) + ((_2271 + ((isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0))) * _1705)) * cbPerFrame._m0[3u].x);
    float _2292 = ((isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0))) * (_2267 + ((isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0))) * _899))) + ((_2273 + ((isnan(0.0) ? _1922 : (isnan(_1922) ? 0.0 : max(_1922, 0.0))) * _1705)) * cbPerFrame._m0[3u].x);
    uint _2296 = _873 + 6u;
    float _2304 = _834 / cbSceneParam._m0[86u].x;
    float _2305 = _835 / cbSceneParam._m0[86u].y;
    vec4 _2319 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2304, _2305, (log2((isnan(cbSceneParam._m0[77u].w) ? _821 : (isnan(_821) ? cbSceneParam._m0[77u].w : min(_821, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2321 = _2319.x;
    float _2322 = _2319.y;
    float _2323 = _2319.z;
    float _2324 = _2319.w;
    float _2404;
    float _2406;
    float _2408;
    float _2410;
    if (_821 > cbSceneParam._m0[78u].w)
    {
        float _2366 = isnan(_821) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _821 : min(cbSceneParam._m0[80u].w, _821));
        float _2367 = _2366 / _821;
        float _2378 = _2367 * _269;
        float _2379 = _270 * _2367;
        float _2380 = (-0.0) - _2379;
        float _2381 = _2367 * _271;
        float _2383 = (cbSceneParam._m0[77u].w * _2380) / _2366;
        float _2384 = _2383 + cbSceneParam._m0[79u].w;
        float _2385 = cbSceneParam._m0[79u].w - _2379;
        float _2391 = sqrt(((_2378 * _2378) + (_2379 * _2379)) + (_2381 * _2381));
        float _2394 = (1.0 - (cbSceneParam._m0[77u].w / _2366)) * _2391;
        float _2400 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2402 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2611;
        if (abs((_2380 - _2383) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2611 = ((((_2384 > 0.0) ? exp2(_2400 * _2384) : (2.0 - exp2(_2402 * _2384))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2394;
        }
        else
        {
            float _2546 = 1.0 / cbSceneParam._m0[80u].x;
            float _2547 = isnan(_2385) ? _2384 : (isnan(_2384) ? _2385 : max(_2384, _2385));
            float _2548 = isnan(_2385) ? _2384 : (isnan(_2384) ? _2385 : min(_2384, _2385));
            float _2557 = isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : min(_2547, 0.0));
            float _2558 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : min(_2548, 0.0));
            _2611 = ((abs(_2391 / _2380) * cbSceneParam._m0[80u].y) * ((((_2557 - _2558) * 2.0) - ((exp2(_2400 * (isnan(0.0) ? _2547 : (isnan(_2547) ? 0.0 : max(_2547, 0.0)))) - exp2(_2400 * (isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0))))) * _2546)) - ((exp2(_2402 * _2557) - exp2(_2402 * _2558)) * _2546))) + (_2394 * cbSceneParam._m0[80u].z);
        }
        vec4 _2613 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2304, _2305, 1.0), 0.0);
        float _2622 = exp2((_2611 * (-1.44269502162933349609375)) * (1.0 - _2613.w));
        float _2623 = log2(_2622);
        float _2639 = log2(_2324);
        _2404 = (exp2(_2639 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2623 * cbSceneParam._m0[78u].x)) * _2613.x) / cbSceneParam._m0[78u].x)) + _2321;
        _2406 = (exp2(_2639 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2623 * cbSceneParam._m0[78u].y)) * _2613.y) / cbSceneParam._m0[78u].y)) + _2322;
        _2408 = (exp2(_2639 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2623 * cbSceneParam._m0[78u].z)) * _2613.z) / cbSceneParam._m0[78u].z)) + _2323;
        _2410 = _2622 * _2324;
    }
    else
    {
        _2404 = _2321;
        _2406 = _2322;
        _2408 = _2323;
        _2410 = _2324;
    }
    float _2422 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2423 = _2422 == 3.0;
    float _2424 = log2(_2410);
    float _2431 = exp2(_2424 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0)));
    float _2432 = exp2(_2424 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2291 : (isnan(_2291) ? 0.0 : max(_2291, 0.0)));
    float _2433 = exp2(_2424 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2292 : (isnan(_2292) ? 0.0 : max(_2292, 0.0)));
    float _2442 = (_2422 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2442 * (_2423 ? _2431 : (_2431 + (cbSceneParam._m0[72u].w * _2404)));
    SV_Target.y = _2442 * (_2423 ? _2432 : (_2432 + (cbSceneParam._m0[72u].w * _2406)));
    SV_Target.z = _2442 * (_2423 ? _2433 : (_2433 + (cbSceneParam._m0[72u].w * _2408)));
    SV_Target.w = cbInstanceData._m0[_2296].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2296].w;
}


