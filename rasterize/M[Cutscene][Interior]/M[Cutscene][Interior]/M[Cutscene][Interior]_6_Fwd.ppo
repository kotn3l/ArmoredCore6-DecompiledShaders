#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_8;
layout(set = 0, binding = 11) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1259;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _198 = _197 * _190;
    float _199 = _197 * _191;
    float _200 = _197 * _192;
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = _204 * NORMAL.x;
    float _206 = _204 * NORMAL.y;
    float _207 = _204 * NORMAL.z;
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _212 = _211 * TANGENT.x;
    float _213 = _211 * TANGENT.y;
    float _214 = _211 * TANGENT.z;
    float _259 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _269 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _259);
    float _270 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _259);
    float _271 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _259);
    vec4 _284 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _287 = _284.x;
    vec4 _305 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _322 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _287) + cbMtdParam._m0[12u].x) * _305.x;
    float _324 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _287) + cbMtdParam._m0[12u].y) * _305.y;
    float _326 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _287) + cbMtdParam._m0[12u].z) * _305.z;
    vec4 _344 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _380 = cbMtdParam._m0[24u].x + _269;
    float _381 = cbMtdParam._m0[24u].y + _270;
    float _382 = cbMtdParam._m0[24u].z + _271;
    float _396 = (-0.0) - dot(vec3(_380, _381, _382), vec3(_198, _199, _200));
    float _397 = (-0.0) - dot(vec3(_380, _381, _382), vec3(_212, _213, _214));
    float _398 = (-0.0) - dot(vec3(_380, _381, _382), vec3((-0.0) - _205, (-0.0) - _206, (-0.0) - _207));
    float _402 = inversesqrt(dot(vec3(_396, _397, _398), vec3(_396, _397, _398)));
    float _405 = _402 * _398;
    float _406 = (_402 * _396) + ((cbMtdParam._m0[22u].x * _287) * ((_344.x * 2.0) + (-1.0)));
    float _407 = (_402 * _397) + ((cbMtdParam._m0[22u].y * _287) * ((_344.y * 2.0) + (-1.0)));
    float _408 = _406 * cbMtdParam._m0[20u].w;
    float _409 = _407 * cbMtdParam._m0[20u].z;
    float _410 = fract(TEXCOORD.x);
    float _411 = fract(TEXCOORD.y);
    float _417;
    if (_408 > 0.0)
    {
        _417 = (1.0 - _410) / _408;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_408 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _410) / _408;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _417 = frontier_phi_3_2_ladder;
    }
    float _425;
    if (_409 > 0.0)
    {
        _425 = (1.0 - _411) / _409;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_409 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _411) / _409;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _425 = frontier_phi_7_6_ladder;
    }
    bool _427 = _405 > 0.0;
    float _429 = _427 ? (cbMtdParam._m0[16u].x / _405) : 5000.0;
    float _430 = isnan(_425) ? _417 : (isnan(_417) ? _425 : min(_417, _425));
    float _431 = isnan(_429) ? _430 : (isnan(_430) ? _429 : min(_430, _429));
    float _435 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _436 = _410 + (-0.5);
    float _439 = _411 + (-0.5);
    float _442 = ((_431 * _405) + _435) / _435;
    vec4 _467 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (((((_436 + (_431 * _408)) / _442) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (((((_439 + (_431 * _409)) / _442) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    float _480 = (_467.x * _287) * cbMtdParam._m0[9u].x;
    float _481 = (_467.y * _287) * cbMtdParam._m0[9u].y;
    float _482 = (_467.z * _287) * cbMtdParam._m0[9u].z;
    float _501 = _406 * cbMtdParam._m0[22u].w;
    float _502 = _407 * cbMtdParam._m0[22u].z;
    bool _503 = _501 > 0.0;
    float _508;
    if (_503)
    {
        _508 = (1.0 - _410) / _501;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_501 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _410) / _501;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _508 = frontier_phi_11_10_ladder;
    }
    bool _510 = _502 > 0.0;
    float _515;
    if (_510)
    {
        _515 = (1.0 - _411) / _502;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_502 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _411) / _502;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _515 = frontier_phi_15_14_ladder;
    }
    float _518 = _427 ? (cbMtdParam._m0[18u].x / _405) : 5000.0;
    float _519 = isnan(_515) ? _508 : (isnan(_508) ? _515 : min(_508, _515));
    float _520 = isnan(_518) ? _519 : (isnan(_519) ? _518 : min(_519, _518));
    float _524 = cbMtdParam._m0[19u].y * cbMtdParam._m0[18u].x;
    float _528 = ((_520 * _405) + _524) / _524;
    float _533 = cbMtdParam._m0[19u].x - cbMtdParam._m0[20u].x * trunc(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    float _535 = floor(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    vec4 _551 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_436 + (_520 * _501)) / _528) + 0.5) + _533) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_439 + (_520 * _502)) / _528) + 0.5) + _535) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[0u].w));
    float _566;
    if (_503)
    {
        _566 = (1.0 - _410) / _501;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_501 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _410) / _501;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _566 = frontier_phi_19_18_ladder;
    }
    float _572;
    if (_510)
    {
        _572 = (1.0 - _411) / _502;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_502 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _411) / _502;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _572 = frontier_phi_23_22_ladder;
    }
    float _574 = isnan(_572) ? _566 : (isnan(_566) ? _572 : min(_566, _572));
    float _575 = isnan(_518) ? _574 : (isnan(_574) ? _518 : min(_574, _518));
    float _582 = ((_575 * _405) + _524) / _524;
    vec4 _602 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_436 + (_575 * _501)) / _582) + 0.5) + _533) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_439 + (_575 * _502)) / _582) + 0.5) + _535) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[8u].w));
    float _604 = _602.x;
    float _614 = (((((cbMtdParam._m0[10u].x * _287) * _551.x) - _480) * _287) * _604) + _480;
    float _615 = (((((cbMtdParam._m0[10u].y * _287) * _551.y) - _481) * _287) * _604) + _481;
    float _616 = (((((cbMtdParam._m0[10u].z * _287) * _551.z) - _482) * _287) * _604) + _482;
    float _632 = _406 * cbMtdParam._m0[23u].y;
    float _633 = _407 * cbMtdParam._m0[23u].x;
    bool _634 = _632 > 0.0;
    float _639;
    if (_634)
    {
        _639 = (1.0 - _410) / _632;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_632 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _410) / _632;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _639 = frontier_phi_27_26_ladder;
    }
    bool _641 = _633 > 0.0;
    float _646;
    if (_641)
    {
        _646 = (1.0 - _411) / _633;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_633 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _411) / _633;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _646 = frontier_phi_31_30_ladder;
    }
    float _649 = _427 ? (cbMtdParam._m0[19u].w / _405) : 5000.0;
    float _650 = isnan(_646) ? _639 : (isnan(_639) ? _646 : min(_639, _646));
    float _651 = isnan(_649) ? _650 : (isnan(_650) ? _649 : min(_650, _649));
    float _655 = cbMtdParam._m0[19u].w * cbMtdParam._m0[16u].z;
    float _659 = ((_651 * _405) + _655) / _655;
    float _664 = cbMtdParam._m0[19u].z - cbMtdParam._m0[23u].z * trunc(cbMtdParam._m0[19u].z / cbMtdParam._m0[23u].z);
    float _666 = floor(cbMtdParam._m0[19u].z / cbMtdParam._m0[23u].z);
    vec4 _682 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * (((((_436 + (_651 * _632)) / _659) + 0.5) + _664) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * (((((_439 + (_651 * _633)) / _659) + 0.5) + _666) / cbMtdParam._m0[23u].w)) + cbTextureTilingScale._m0[9u].w));
    float _697;
    if (_634)
    {
        _697 = (1.0 - _410) / _632;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_632 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _410) / _632;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _697 = frontier_phi_35_34_ladder;
    }
    float _703;
    if (_641)
    {
        _703 = (1.0 - _411) / _633;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_633 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _411) / _633;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _703 = frontier_phi_39_38_ladder;
    }
    float _705 = isnan(_703) ? _697 : (isnan(_697) ? _703 : min(_697, _703));
    float _706 = isnan(_649) ? _705 : (isnan(_705) ? _649 : min(_705, _649));
    float _713 = ((_706 * _405) + _655) / _655;
    vec4 _733 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_436 + (_706 * _632)) / _713) + 0.5) + _664) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_439 + (_706 * _633)) / _713) + 0.5) + _666) / cbMtdParam._m0[23u].w)) + cbTextureTilingScale._m0[10u].w));
    float _735 = _733.x;
    vec4 _760 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _764 = _760.z;
    float _767 = (_760.x * 2.0) + (-1.0);
    float _768 = (_760.y * 2.0) + (-1.0);
    float _769 = dot(vec2(_767, _768), vec2(_767, _768));
    float _3430 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _774 = sqrt(1.0 - (isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0))));
    float _777 = fma(_774, _205, fma(_768, _212, _767 * _198));
    float _780 = fma(_774, _206, fma(_768, _213, _767 * _199));
    float _783 = fma(_774, _207, fma(_768, _214, _767 * _200));
    float _787 = inversesqrt(dot(vec3(_777, _780, _783), vec3(_777, _780, _783)));
    float _788 = _787 * _777;
    float _789 = _787 * _780;
    float _790 = _787 * _783;
    float _3441 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
    float _791 = isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0));
    float _3452 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _3463 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _3474 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _810 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _814 = inversesqrt(dot(vec3(_269, _270, _271), vec3(_269, _270, _271)));
    float _815 = _269 * _814;
    float _816 = _270 * _814;
    float _817 = _271 * _814;
    float _823 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _824 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _843 = fma(_790, cbSceneParam._m0[5u].z, fma(_789, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _788));
    float _846 = fma(_790, cbSceneParam._m0[6u].z, fma(_789, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _788));
    float _849 = fma(_790, cbSceneParam._m0[7u].z, fma(_789, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _788));
    uint _862 = uint(roundEven(NORMAL.w)) * 13u;
    uint _864 = _862 + 9u;
    uint _865 = _864 + uint(cbMatDynParam._m0[0u].w);
    float _871 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3452 : (isnan(_3452) ? 1.0 : min(_3452, 1.0)))) * cbInstanceData._m0[_865].x;
    float _872 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0)))) * cbInstanceData._m0[_865].y;
    float _873 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0)))) * cbInstanceData._m0[_865].z;
    float _3485 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    float _874 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
    float _3496 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
    float _875 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
    float _3507 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    float _876 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
    vec4 _885 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _823, cbSceneParam._m0[86u].y * _824));
    float _888 = _885.x * TEXCOORD_4.z;
    float _889 = dot(vec3(_788, _789, _790), vec3(_815, _816, _817));
    float _892 = _889 * 2.0;
    float _896 = (_892 * _788) - _815;
    float _897 = (_892 * _789) - _816;
    float _898 = (_892 * _790) - _817;
    float _902 = abs(dot(vec3(_815, _816, _817), vec3(_788, _789, _790)));
    float _3518 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _904 = sqrt(_791);
    float _917 = exp2((_904 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_904 * 3.0));
    float _949 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _953 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _957 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1258;
    float _1260;
    float _1261;
    float _1262;
    float _1263;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _985 = fma(_957, cbModelParam._m0[26u].z, fma(_953, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _949));
        float _989 = fma(_957, cbModelParam._m0[27u].z, fma(_953, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _949));
        float _993 = fma(_957, cbModelParam._m0[28u].z, fma(_953, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _949));
        float _1016 = _949 + _788;
        float _1017 = _953 + _789;
        float _1018 = _957 + _790;
        float _1028 = fma(_1018, cbModelParam._m0[26u].z, fma(_1017, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1016)) - _985;
        float _1029 = fma(_1018, cbModelParam._m0[27u].z, fma(_1017, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1016)) - _989;
        float _1030 = fma(_1018, cbModelParam._m0[28u].z, fma(_1017, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1016)) - _993;
        float _1034 = inversesqrt(dot(vec3(_1028, _1029, _1030), vec3(_1028, _1029, _1030)));
        float _1047 = ((_1034 * _1028) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_985 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1048 = ((_1034 * _1029) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_989 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1049 = ((_1034 * _1030) / cbModelParam._m0[34u].z) + ((((((_993 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1052 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1047, _1048, _1049), 0.0);
        vec4 _1059 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1047, _1048, _1049), 0.0);
        vec4 _1066 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1047, _1048, _1049), 0.0);
        vec4 _1073 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1047, _1048, _1049), 0.0);
        float _1086 = exp2((_1052.w + (-0.5)) * 20.0) * 2.0;
        float _1087 = _1086 * (_1052.x + (-0.5));
        float _1088 = _1086 * (_1052.y + (-0.5));
        float _1089 = _1086 * (_1052.z + (-0.5));
        float _1096 = exp2((_1059.w + (-0.5)) * 20.0) * 2.0;
        float _1097 = _1096 * (_1059.x + (-0.5));
        float _1098 = _1096 * (_1059.y + (-0.5));
        float _1099 = _1096 * (_1059.z + (-0.5));
        float _1106 = exp2((_1066.w + (-0.5)) * 20.0) * 2.0;
        float _1107 = _1106 * (_1066.x + (-0.5));
        float _1108 = _1106 * (_1066.y + (-0.5));
        float _1109 = _1106 * (_1066.z + (-0.5));
        float _1116 = exp2((_1073.w + (-0.5)) * 20.0) * 2.0;
        float _1117 = _1116 * (_1073.x + (-0.5));
        float _1118 = _1116 * (_1073.y + (-0.5));
        float _1119 = _1116 * (_1073.z + (-0.5));
        float _1120 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1121 = isnan(0.0) ? _1118 : (isnan(_1118) ? 0.0 : max(_1118, 0.0));
        float _1122 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1123 = _1087 * 0.5;
        float _1124 = _1097 * 0.5;
        float _1125 = _1107 * 0.5;
        float _1126 = dot(vec3(_1123, _1124, _1125), vec3(_1123, _1124, _1125));
        float _1131 = (_1126 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1126);
        float _1140 = (dot(vec3(_788, _789, _790), vec3(_1131 * _1123, _1131 * _1124, _1131 * _1125)) + 1.0) * 0.5;
        float _3544 = isnan(0.0) ? _1140 : (isnan(_1140) ? 0.0 : max(_1140, 0.0));
        float _1150 = sqrt(((_1124 * _1124) + (_1123 * _1123)) + (_1125 * _1125)) / (_1120 + 9.9999997473787516355514526367188e-06);
        float _3555 = isnan(0.0) ? _1150 : (isnan(_1150) ? 0.0 : max(_1150, 0.0));
        float _1151 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
        float _1152 = _1151 * 2.0;
        float _1156 = (1.0 - _1151) / (_1151 + 1.0);
        float _3566 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1157 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _1166 = ((((1.0 - _1157) * (_1152 + 2.0)) * exp2(log2(isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0))) * (_1152 + 1.0))) + _1157) * _1120;
        float _1167 = _1088 * 0.5;
        float _1168 = _1098 * 0.5;
        float _1169 = _1108 * 0.5;
        float _1170 = dot(vec3(_1167, _1168, _1169), vec3(_1167, _1168, _1169));
        float _1175 = (_1170 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1170);
        float _1183 = (dot(vec3(_788, _789, _790), vec3(_1175 * _1167, _1175 * _1168, _1175 * _1169)) + 1.0) * 0.5;
        float _3577 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
        float _1192 = sqrt(((_1168 * _1168) + (_1167 * _1167)) + (_1169 * _1169)) / (_1121 + 9.9999997473787516355514526367188e-06);
        float _3588 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
        float _1193 = isnan(1.0) ? _3588 : (isnan(_3588) ? 1.0 : min(_3588, 1.0));
        float _1194 = _1193 * 2.0;
        float _1198 = (1.0 - _1193) / (_1193 + 1.0);
        float _3599 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3599 : (isnan(_3599) ? 1.0 : min(_3599, 1.0));
        float _1208 = ((((1.0 - _1199) * (_1194 + 2.0)) * exp2(log2(isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0))) * (_1194 + 1.0))) + _1199) * _1121;
        float _1209 = _1089 * 0.5;
        float _1210 = _1099 * 0.5;
        float _1211 = _1109 * 0.5;
        float _1212 = dot(vec3(_1209, _1210, _1211), vec3(_1209, _1210, _1211));
        float _1217 = (_1212 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1212);
        float _1225 = (dot(vec3(_788, _789, _790), vec3(_1217 * _1209, _1217 * _1210, _1217 * _1211)) + 1.0) * 0.5;
        float _3610 = isnan(0.0) ? _1225 : (isnan(_1225) ? 0.0 : max(_1225, 0.0));
        float _1234 = sqrt(((_1210 * _1210) + (_1209 * _1209)) + (_1211 * _1211)) / (_1122 + 9.9999997473787516355514526367188e-06);
        float _3621 = isnan(0.0) ? _1234 : (isnan(_1234) ? 0.0 : max(_1234, 0.0));
        float _1235 = isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0));
        float _1236 = _1235 * 2.0;
        float _1240 = (1.0 - _1235) / (_1235 + 1.0);
        float _3632 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _1250 = ((((1.0 - _1241) * (_1236 + 2.0)) * exp2(log2(isnan(1.0) ? _3610 : (isnan(_3610) ? 1.0 : min(_3610, 1.0))) * (_1236 + 1.0))) + _1241) * _1122;
        _1258 = _1089;
        _1260 = _1088;
        _1261 = _1087;
        _1262 = _1099;
        _1263 = _1098;
        _1264 = _1097;
        _1265 = _1109;
        _1266 = _1108;
        _1267 = _1107;
        _1268 = _1122;
        _1269 = _1121;
        _1270 = _1120;
        _1271 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0)));
        _1272 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0)));
        _1273 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0)));
    }
    else
    {
        _1258 = _1259;
        _1260 = _1259;
        _1261 = _1259;
        _1262 = _1259;
        _1263 = _1259;
        _1264 = _1259;
        _1265 = _1259;
        _1266 = _1259;
        _1267 = _1259;
        _1268 = _1259;
        _1269 = _1259;
        _1270 = _1259;
        _1271 = 0.0;
        _1272 = 0.0;
        _1273 = 0.0;
    }
    float _1568;
    float _1569;
    float _1570;
    float _1571;
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1299 = fma(_957, cbModelParam._m0[30u].z, fma(_953, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _949));
        float _1303 = fma(_957, cbModelParam._m0[31u].z, fma(_953, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _949));
        float _1307 = fma(_957, cbModelParam._m0[32u].z, fma(_953, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _949));
        float _1330 = _949 + _788;
        float _1331 = _953 + _789;
        float _1332 = _957 + _790;
        float _1342 = fma(_1332, cbModelParam._m0[30u].z, fma(_1331, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1330)) - _1299;
        float _1343 = fma(_1332, cbModelParam._m0[31u].z, fma(_1331, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1330)) - _1303;
        float _1344 = fma(_1332, cbModelParam._m0[32u].z, fma(_1331, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1330)) - _1307;
        float _1348 = inversesqrt(dot(vec3(_1342, _1343, _1344), vec3(_1342, _1343, _1344)));
        float _1361 = ((_1348 * _1342) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1299 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1362 = ((_1348 * _1343) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1303 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1363 = ((_1348 * _1344) / cbModelParam._m0[35u].z) + ((((((_1307 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1365 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1361, _1362, _1363), 0.0);
        vec4 _1372 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1361, _1362, _1363), 0.0);
        vec4 _1379 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1361, _1362, _1363), 0.0);
        vec4 _1386 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1361, _1362, _1363), 0.0);
        float _1398 = exp2((_1365.w + (-0.5)) * 20.0) * 2.0;
        float _1399 = _1398 * (_1365.x + (-0.5));
        float _1400 = _1398 * (_1365.y + (-0.5));
        float _1401 = _1398 * (_1365.z + (-0.5));
        float _1408 = exp2((_1372.w + (-0.5)) * 20.0) * 2.0;
        float _1409 = _1408 * (_1372.x + (-0.5));
        float _1410 = _1408 * (_1372.y + (-0.5));
        float _1411 = _1408 * (_1372.z + (-0.5));
        float _1418 = exp2((_1379.w + (-0.5)) * 20.0) * 2.0;
        float _1419 = _1418 * (_1379.x + (-0.5));
        float _1420 = _1418 * (_1379.y + (-0.5));
        float _1421 = _1418 * (_1379.z + (-0.5));
        float _1428 = exp2((_1386.w + (-0.5)) * 20.0) * 2.0;
        float _1429 = _1428 * (_1386.x + (-0.5));
        float _1430 = _1428 * (_1386.y + (-0.5));
        float _1431 = _1428 * (_1386.z + (-0.5));
        float _1432 = isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0));
        float _1433 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1434 = isnan(0.0) ? _1431 : (isnan(_1431) ? 0.0 : max(_1431, 0.0));
        float _1435 = _1399 * 0.5;
        float _1436 = _1409 * 0.5;
        float _1437 = _1419 * 0.5;
        float _1438 = dot(vec3(_1435, _1436, _1437), vec3(_1435, _1436, _1437));
        float _1443 = (_1438 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1438);
        float _1451 = (dot(vec3(_788, _789, _790), vec3(_1443 * _1435, _1443 * _1436, _1443 * _1437)) + 1.0) * 0.5;
        float _3673 = isnan(0.0) ? _1451 : (isnan(_1451) ? 0.0 : max(_1451, 0.0));
        float _1460 = sqrt(((_1436 * _1436) + (_1435 * _1435)) + (_1437 * _1437)) / (_1432 + 9.9999997473787516355514526367188e-06);
        float _3684 = isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0));
        float _1461 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _1462 = _1461 * 2.0;
        float _1466 = (1.0 - _1461) / (_1461 + 1.0);
        float _3695 = isnan(0.0) ? _1466 : (isnan(_1466) ? 0.0 : max(_1466, 0.0));
        float _1467 = isnan(1.0) ? _3695 : (isnan(_3695) ? 1.0 : min(_3695, 1.0));
        float _1476 = ((((1.0 - _1467) * (_1462 + 2.0)) * exp2(log2(isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0))) * (_1462 + 1.0))) + _1467) * _1432;
        float _1477 = _1400 * 0.5;
        float _1478 = _1410 * 0.5;
        float _1479 = _1420 * 0.5;
        float _1480 = dot(vec3(_1477, _1478, _1479), vec3(_1477, _1478, _1479));
        float _1485 = (_1480 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1480);
        float _1493 = (dot(vec3(_788, _789, _790), vec3(_1485 * _1477, _1485 * _1478, _1485 * _1479)) + 1.0) * 0.5;
        float _3706 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
        float _1502 = sqrt(((_1478 * _1478) + (_1477 * _1477)) + (_1479 * _1479)) / (_1433 + 9.9999997473787516355514526367188e-06);
        float _3717 = isnan(0.0) ? _1502 : (isnan(_1502) ? 0.0 : max(_1502, 0.0));
        float _1503 = isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0));
        float _1504 = _1503 * 2.0;
        float _1508 = (1.0 - _1503) / (_1503 + 1.0);
        float _3728 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
        float _1509 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
        float _1518 = ((((1.0 - _1509) * (_1504 + 2.0)) * exp2(log2(isnan(1.0) ? _3706 : (isnan(_3706) ? 1.0 : min(_3706, 1.0))) * (_1504 + 1.0))) + _1509) * _1433;
        float _1519 = _1401 * 0.5;
        float _1520 = _1411 * 0.5;
        float _1521 = _1421 * 0.5;
        float _1522 = dot(vec3(_1519, _1520, _1521), vec3(_1519, _1520, _1521));
        float _1527 = (_1522 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1522);
        float _1535 = (dot(vec3(_788, _789, _790), vec3(_1527 * _1519, _1527 * _1520, _1527 * _1521)) + 1.0) * 0.5;
        float _3739 = isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0));
        float _1544 = sqrt(((_1520 * _1520) + (_1519 * _1519)) + (_1521 * _1521)) / (_1434 + 9.9999997473787516355514526367188e-06);
        float _3750 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
        float _1545 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
        float _1546 = _1545 * 2.0;
        float _1550 = (1.0 - _1545) / (_1545 + 1.0);
        float _3761 = isnan(0.0) ? _1550 : (isnan(_1550) ? 0.0 : max(_1550, 0.0));
        float _1551 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _1560 = ((((1.0 - _1551) * (_1546 + 2.0)) * exp2(log2(isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))) * (_1546 + 1.0))) + _1551) * _1434;
        _1568 = _1401;
        _1569 = _1400;
        _1570 = _1399;
        _1571 = _1411;
        _1572 = _1410;
        _1573 = _1409;
        _1574 = _1421;
        _1575 = _1420;
        _1576 = _1419;
        _1577 = _1434;
        _1578 = _1433;
        _1579 = _1432;
        _1580 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1476 : (isnan(_1476) ? 0.0 : max(_1476, 0.0)));
        _1581 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)));
        _1582 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0)));
    }
    else
    {
        _1568 = _1259;
        _1569 = _1259;
        _1570 = _1259;
        _1571 = _1259;
        _1572 = _1259;
        _1573 = _1259;
        _1574 = _1259;
        _1575 = _1259;
        _1576 = _1259;
        _1577 = _1259;
        _1578 = _1259;
        _1579 = _1259;
        _1580 = 0.0;
        _1581 = 0.0;
        _1582 = 0.0;
    }
    float _1592 = (cbModelParam._m0[1u].x * (_1580 - _1271)) + _1271;
    float _1593 = (cbModelParam._m0[1u].x * (_1581 - _1272)) + _1272;
    float _1594 = (cbModelParam._m0[1u].x * (_1582 - _1273)) + _1273;
    float _1615 = fma(_1594, cbSceneParam._m0[89u].z, fma(_1593, cbSceneParam._m0[89u].y, _1592 * cbSceneParam._m0[89u].x));
    float _1618 = fma(_1594, cbSceneParam._m0[90u].z, fma(_1593, cbSceneParam._m0[90u].y, _1592 * cbSceneParam._m0[90u].x));
    float _1621 = fma(_1594, cbSceneParam._m0[91u].z, fma(_1593, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1592));
    float _1636 = _896 * 0.5;
    float _1637 = _897 * 0.5;
    float _1638 = _898 * 0.5;
    float _1639 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1570, _1573, _1576, _1579));
    float _1642 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1569, _1572, _1575, _1578));
    float _1645 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1568, _1571, _1574, _1577));
    float _1679;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1652 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1258, _1262, _1265, _1268));
        float _1656 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1260, _1263, _1266, _1269));
        float _1660 = dot(vec4(_1636, _1637, _1638, 1.0), vec4(_1261, _1264, _1267, _1270));
        float _1667 = dot(vec4(cbModelParam._m0[39u]), vec4(_1636, _1637, _1638, 1.0));
        _1679 = dot(vec3(isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0)), isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0)), isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1667) ? 0.0 : (isnan(0.0) ? _1667 : max(0.0, _1667))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1679 = 1.0;
    }
    float _1690;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1681 = dot(vec4(cbModelParam._m0[40u]), vec4(_1636, _1637, _1638, 1.0));
        _1690 = dot(vec3(isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0)), isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0)), isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1681) ? 0.0 : (isnan(0.0) ? _1681 : max(0.0, _1681))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1690 = 1.0;
    }
    float _1694 = (_1690 * cbModelParam._m0[1u].x) + (_1679 * (1.0 - cbModelParam._m0[1u].x));
    float _1704 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _791);
    float _1705 = isnan(_1704) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1704 : min(cbModelParam._m0[25u].z, _1704));
    float _1786;
    float _1788;
    float _1790;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1753 = fma(_957, cbModelParam._m0[13u].z, fma(_953, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _949)) + cbModelParam._m0[13u].w;
        float _1757 = fma(_957, cbModelParam._m0[14u].z, fma(_953, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _949)) + cbModelParam._m0[14u].w;
        float _1761 = fma(_957, cbModelParam._m0[15u].z, fma(_953, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _949)) + cbModelParam._m0[15u].w;
        float _1764 = fma(_898, cbModelParam._m0[13u].z, fma(_897, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _896));
        float _1767 = fma(_898, cbModelParam._m0[14u].z, fma(_897, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _896));
        float _1770 = fma(_898, cbModelParam._m0[15u].z, fma(_897, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _896));
        float _1798;
        if (_1764 > 0.0)
        {
            _1798 = abs((1.0 - _1753) / _1764);
        }
        else
        {
            float frontier_phi_54_52_ladder;
            if (_1764 < 0.0)
            {
                frontier_phi_54_52_ladder = abs((_1753 + 1.0) / _1764);
            }
            else
            {
                frontier_phi_54_52_ladder = 5000.0;
            }
            _1798 = frontier_phi_54_52_ladder;
        }
        float _2143;
        if (_1767 > 0.0)
        {
            _2143 = abs((1.0 - _1757) / _1767);
        }
        else
        {
            float frontier_phi_63_59_ladder;
            if (_1767 < 0.0)
            {
                frontier_phi_63_59_ladder = abs((_1757 + 1.0) / _1767);
            }
            else
            {
                frontier_phi_63_59_ladder = 5000.0;
            }
            _2143 = frontier_phi_63_59_ladder;
        }
        float _2459;
        if (_1770 > 0.0)
        {
            _2459 = abs((1.0 - _1761) / _1770);
        }
        else
        {
            float frontier_phi_77_70_ladder;
            if (_1770 < 0.0)
            {
                frontier_phi_77_70_ladder = abs((_1761 + 1.0) / _1770);
            }
            else
            {
                frontier_phi_77_70_ladder = 5000.0;
            }
            _2459 = frontier_phi_77_70_ladder;
        }
        float _2461 = isnan(_2143) ? _1798 : (isnan(_1798) ? _2143 : min(_1798, _2143));
        float _2462 = isnan(_2459) ? _2461 : (isnan(_2461) ? _2459 : min(_2461, _2459));
        float _2466 = (_2462 * _1764) + _1753;
        float _2467 = (_2462 * _1767) + _1757;
        float _2468 = (_2462 * _1770) + _1761;
        float _2469 = _2462 * 9.9999997473787516355514526367188e-05;
        float _2470 = (-1.0) - _2469;
        float _2472 = _2469 + 1.0;
        float frontier_phi_53_77_ladder;
        float frontier_phi_53_77_ladder_1;
        float frontier_phi_53_77_ladder_2;
        if ((_2468 > _2472) || ((_2468 < _2470) || ((_2467 > _2472) || ((_2467 < _2470) || ((_2466 < _2470) || (_2466 > _2472))))))
        {
            frontier_phi_53_77_ladder = 0.0;
            frontier_phi_53_77_ladder_1 = 0.0;
            frontier_phi_53_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2594 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2468, cbModelParam._m0[9u].z, fma(_2467, cbModelParam._m0[9u].y, _2466 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2468, cbModelParam._m0[10u].z, fma(_2467, cbModelParam._m0[10u].y, _2466 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2468, cbModelParam._m0[11u].z, fma(_2467, cbModelParam._m0[11u].y, _2466 * cbModelParam._m0[11u].x))), _1705);
            frontier_phi_53_77_ladder = _2594.x * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_1 = _2594.y * cbModelParam._m0[1u].y;
            frontier_phi_53_77_ladder_2 = _2594.z * cbModelParam._m0[1u].y;
        }
        _1786 = frontier_phi_53_77_ladder;
        _1788 = frontier_phi_53_77_ladder_1;
        _1790 = frontier_phi_53_77_ladder_2;
    }
    else
    {
        vec4 _1774 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_896, _897, _898), _1705);
        _1786 = _1774.x * cbModelParam._m0[1u].y;
        _1788 = _1774.y * cbModelParam._m0[1u].y;
        _1790 = _1774.z * cbModelParam._m0[1u].y;
    }
    float _1794 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _791);
    float _1795 = isnan(_1794) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1794 : min(cbModelParam._m0[25u].w, _1794));
    float _1883;
    float _1885;
    float _1887;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1847 = fma(_957, cbModelParam._m0[21u].z, fma(_953, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _949)) + cbModelParam._m0[21u].w;
        float _1851 = fma(_957, cbModelParam._m0[22u].z, fma(_953, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _949)) + cbModelParam._m0[22u].w;
        float _1855 = fma(_957, cbModelParam._m0[23u].z, fma(_953, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _949)) + cbModelParam._m0[23u].w;
        float _1858 = fma(_898, cbModelParam._m0[21u].z, fma(_897, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _896));
        float _1861 = fma(_898, cbModelParam._m0[22u].z, fma(_897, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _896));
        float _1864 = fma(_898, cbModelParam._m0[23u].z, fma(_897, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _896));
        float _2148;
        if (_1858 > 0.0)
        {
            _2148 = abs((1.0 - _1847) / _1858);
        }
        else
        {
            float frontier_phi_65_61_ladder;
            if (_1858 < 0.0)
            {
                frontier_phi_65_61_ladder = abs((_1847 + 1.0) / _1858);
            }
            else
            {
                frontier_phi_65_61_ladder = 5000.0;
            }
            _2148 = frontier_phi_65_61_ladder;
        }
        float _2485;
        if (_1861 > 0.0)
        {
            _2485 = abs((1.0 - _1851) / _1861);
        }
        else
        {
            float frontier_phi_79_72_ladder;
            if (_1861 < 0.0)
            {
                frontier_phi_79_72_ladder = abs((_1851 + 1.0) / _1861);
            }
            else
            {
                frontier_phi_79_72_ladder = 5000.0;
            }
            _2485 = frontier_phi_79_72_ladder;
        }
        float _2654;
        if (_1864 > 0.0)
        {
            _2654 = abs((1.0 - _1855) / _1864);
        }
        else
        {
            float frontier_phi_93_88_ladder;
            if (_1864 < 0.0)
            {
                frontier_phi_93_88_ladder = abs((_1855 + 1.0) / _1864);
            }
            else
            {
                frontier_phi_93_88_ladder = 5000.0;
            }
            _2654 = frontier_phi_93_88_ladder;
        }
        float _2656 = isnan(_2485) ? _2148 : (isnan(_2148) ? _2485 : min(_2148, _2485));
        float _2657 = isnan(_2654) ? _2656 : (isnan(_2656) ? _2654 : min(_2656, _2654));
        float _2661 = (_2657 * _1858) + _1847;
        float _2662 = (_2657 * _1861) + _1851;
        float _2663 = (_2657 * _1864) + _1855;
        float _2664 = _2657 * 9.9999997473787516355514526367188e-05;
        float _2665 = (-1.0) - _2664;
        float _2667 = _2664 + 1.0;
        float frontier_phi_62_93_ladder;
        float frontier_phi_62_93_ladder_1;
        float frontier_phi_62_93_ladder_2;
        if ((_2663 > _2667) || ((_2663 < _2665) || ((_2662 > _2667) || ((_2662 < _2665) || ((_2661 < _2665) || (_2661 > _2667))))))
        {
            frontier_phi_62_93_ladder = 0.0;
            frontier_phi_62_93_ladder_1 = 0.0;
            frontier_phi_62_93_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2896 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2663, cbModelParam._m0[17u].z, fma(_2662, cbModelParam._m0[17u].y, _2661 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2663, cbModelParam._m0[18u].z, fma(_2662, cbModelParam._m0[18u].y, _2661 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2663, cbModelParam._m0[19u].z, fma(_2662, cbModelParam._m0[19u].y, _2661 * cbModelParam._m0[19u].x))), _1795);
            frontier_phi_62_93_ladder = _2896.z * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_1 = _2896.y * cbModelParam._m0[1u].z;
            frontier_phi_62_93_ladder_2 = _2896.x * cbModelParam._m0[1u].z;
        }
        _1883 = frontier_phi_62_93_ladder_2;
        _1885 = frontier_phi_62_93_ladder_1;
        _1887 = frontier_phi_62_93_ladder;
    }
    else
    {
        vec4 _1867 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_896, _897, _898), _1795);
        _1883 = _1867.x * cbModelParam._m0[1u].z;
        _1885 = _1867.y * cbModelParam._m0[1u].z;
        _1887 = _1867.z * cbModelParam._m0[1u].z;
    }
    float _1899 = ((((1.0 - _917) * ((_904 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_917 * _904)) * _888;
    float _1900 = _1899 * ((cbModelParam._m0[1u].w * (_1883 - _1786)) + _1786);
    float _1901 = _1899 * ((cbModelParam._m0[1u].w * (_1885 - _1788)) + _1788);
    float _1902 = _1899 * ((cbModelParam._m0[1u].w * (_1887 - _1790)) + _1790);
    float _1905 = fma(_1902, cbSceneParam._m0[89u].z, fma(_1901, cbSceneParam._m0[89u].y, _1900 * cbSceneParam._m0[89u].x));
    float _1908 = fma(_1902, cbSceneParam._m0[90u].z, fma(_1901, cbSceneParam._m0[90u].y, _1900 * cbSceneParam._m0[90u].x));
    float _1911 = fma(_1902, cbSceneParam._m0[91u].z, fma(_1901, cbSceneParam._m0[91u].y, _1900 * cbSceneParam._m0[91u].x));
    uvec4 _1921 = floatBitsToUint(cbInstanceData._m0[_862 + 5u]);
    uint _1923 = _1921.x * 14u;
    uint _1924 = _1923 + 13u;
    float _1929 = _888 + (-1.0);
    float _1932 = (cbLight._m0[_1924].x * _1929) + 1.0;
    float _1933 = (cbLight._m0[_1924].y * _1929) + 1.0;
    uint _1934 = _1923 + 5u;
    float _1940 = isnan(1.0) ? _1933 : (isnan(_1933) ? 1.0 : min(_1933, 1.0));
    uint _1944 = _1923 + 4u;
    float _1950 = isnan(1.0) ? _1932 : (isnan(_1932) ? 1.0 : min(_1932, 1.0));
    uint _1954 = _1923 | 1u;
    float _1965 = dot(vec3(cbLight._m0[_1923].xyz), vec3(_788, _789, _790));
    float _1968 = dot(vec3(cbLight._m0[_1954].xyz), vec3(_788, _789, _790));
    float _3897 = isnan(0.0) ? _1965 : (isnan(_1965) ? 0.0 : max(_1965, 0.0));
    float _3908 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
    float _1973 = (isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * 0.3183098733425140380859375;
    float _1975 = (isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0))) * 0.3183098733425140380859375;
    float _1982 = ((cbLight._m0[_1934].x * _1940) * _1975) + ((cbLight._m0[_1944].x * _1950) * _1973);
    float _1983 = ((_1940 * cbLight._m0[_1934].y) * _1975) + ((_1950 * cbLight._m0[_1944].y) * _1973);
    float _1984 = ((_1940 * cbLight._m0[_1934].z) * _1975) + ((_1950 * cbLight._m0[_1944].z) * _1973);
    uint _1986 = _1923 + 8u;
    float _1999 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1923].w)) * _791) * 0.949999988079071044921875);
    float _2000 = _1999 * _1999;
    float _2001 = cbLight._m0[_1923].x + _815;
    float _2002 = cbLight._m0[_1923].y + _816;
    float _2003 = cbLight._m0[_1923].z + _817;
    float _2007 = inversesqrt(dot(vec3(_2001, _2002, _2003), vec3(_2001, _2002, _2003)));
    float _2008 = _2007 * _2001;
    float _2009 = _2007 * _2002;
    float _2010 = _2007 * _2003;
    float _2011 = dot(vec3(_788, _789, _790), vec3(cbLight._m0[_1923].xyz));
    float _3919 = isnan(0.0) ? _2011 : (isnan(_2011) ? 0.0 : max(_2011, 0.0));
    float _2014 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
    float _3930 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
    float _2015 = isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0));
    float _2016 = dot(vec3(_788, _789, _790), vec3(_2008, _2009, _2010));
    float _3941 = isnan(0.0) ? _2016 : (isnan(_2016) ? 0.0 : max(_2016, 0.0));
    float _2019 = isnan(1.0) ? _3941 : (isnan(_3941) ? 1.0 : min(_3941, 1.0));
    float _2020 = dot(vec3(cbLight._m0[_1923].xyz), vec3(_2008, _2009, _2010));
    float _3952 = isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0));
    float _2024 = _2000 * _2000;
    float _2028 = ((_2019 * _2019) * (_2024 + (-1.0))) + 1.0;
    float _2039 = (exp2(log2(1.0 - (isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2040 = 1.0 - _2000;
    float _2051 = (0.5 / (((_2015 * ((_2014 * _2040) + _2000)) + 9.9999999392252902907785028219223e-09) + (((_2015 * _2040) + _2000) * _2014))) * _2014;
    float _3963 = isnan(0.0) ? _2051 : (isnan(_2051) ? 0.0 : max(_2051, 0.0));
    float _2053 = (isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0))) * (_2024 / ((_2028 * _2028) * 3.141590118408203125));
    uint _2064 = _1923 + 9u;
    float _2075 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1954].w)) * _791) * 0.949999988079071044921875);
    float _2076 = _2075 * _2075;
    float _2077 = cbLight._m0[_1954].x + _815;
    float _2078 = cbLight._m0[_1954].y + _816;
    float _2079 = cbLight._m0[_1954].z + _817;
    float _2083 = inversesqrt(dot(vec3(_2077, _2078, _2079), vec3(_2077, _2078, _2079)));
    float _2084 = _2083 * _2077;
    float _2085 = _2083 * _2078;
    float _2086 = _2083 * _2079;
    float _2087 = dot(vec3(_788, _789, _790), vec3(cbLight._m0[_1954].xyz));
    float _3974 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _2090 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
    float _2091 = dot(vec3(_788, _789, _790), vec3(_2084, _2085, _2086));
    float _3985 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _2094 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
    float _2095 = dot(vec3(cbLight._m0[_1954].xyz), vec3(_2084, _2085, _2086));
    float _3996 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0));
    float _2099 = _2076 * _2076;
    float _2103 = ((_2094 * _2094) * (_2099 + (-1.0))) + 1.0;
    float _2112 = (exp2(log2(1.0 - (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2113 = 1.0 - _2076;
    float _2123 = (0.5 / (((_2015 * ((_2090 * _2113) + _2076)) + 9.9999999392252902907785028219223e-09) + (((_2015 * _2113) + _2076) * _2090))) * _2090;
    float _4007 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
    float _2125 = (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * (_2099 / ((_2103 * _2103) * 3.141590118408203125));
    float _2135 = (((_2112 * cbLight._m0[_2064].x) * _2125) * _1940) + (((_2039 * cbLight._m0[_1986].x) * _2053) * _1950);
    float _2136 = (((_2112 * cbLight._m0[_2064].y) * _2125) * _1940) + (((_2039 * cbLight._m0[_1986].y) * _2053) * _1950);
    float _2137 = (((_2112 * cbLight._m0[_2064].z) * _2125) * _1940) + (((_2039 * cbLight._m0[_1986].z) * _2053) * _1950);
    float _2252;
    float _2254;
    float _2256;
    float _2258;
    float _2260;
    float _2262;
    if (_1921.y == 0u)
    {
        float _2192 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2193 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2192;
        float _2194 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2192;
        float _2195 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2192;
        uvec4 _2207 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2208 = _2207.x;
        uint _2219 = uint((float(_2207.y) * floor(float(uint(cbSceneParam._m0[85u].y * _824) / _2208))) + floor(float(uint(cbSceneParam._m0[85u].x * _823) / _2208)));
        float _2229 = (log2(_2195 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2230 = isnan(0.0) ? _2229 : (isnan(_2229) ? 0.0 : max(_2229, 0.0));
        uint _2233 = uint(isnan(14.0) ? _2230 : (isnan(_2230) ? 14.0 : min(_2230, 14.0)));
        uvec4 _2238 = texelFetch(g_lightClusterGridBuffer, int(((_2233 << 2u) + (_2219 << 6u)) >> 2u));
        uint _2239 = _2238.x;
        uint _2240 = _2207.z;
        float _2346;
        float _2348;
        float _2350;
        float _2352;
        float _2354;
        float _2356;
        if (((((1u << ((_2240 >> 4u) & 15u)) + 4294967295u) & _2239) == 0u) || ((_2240 & 240u) == 0u))
        {
            _2346 = 0.0;
            _2348 = 0.0;
            _2350 = 0.0;
            _2352 = 0.0;
            _2354 = 0.0;
            _2356 = 0.0;
        }
        else
        {
            float _2347;
            float _2349;
            float _2351;
            float _2353;
            float _2355;
            float _2357;
            float _2522 = 0.0;
            float _2523 = 0.0;
            float _2524 = 0.0;
            float _2525 = 0.0;
            float _2526 = 0.0;
            float _2527 = 0.0;
            uint _2528 = 0u;
            uint _2537;
            bool _2538;
            for (;;)
            {
                _2537 = texelFetch(g_lightClassification, int((((_2233 << 5u) + (_2219 << 9u)) + (_2528 << 2u)) >> 2u)).x;
                _2538 = _2537 == 0u;
                float frontier_phi_90_pred;
                float frontier_phi_90_pred_1;
                float frontier_phi_90_pred_2;
                float frontier_phi_90_pred_3;
                float frontier_phi_90_pred_4;
                float frontier_phi_90_pred_5;
                if (_2538)
                {
                    frontier_phi_90_pred = _2527;
                    frontier_phi_90_pred_1 = _2522;
                    frontier_phi_90_pred_2 = _2523;
                    frontier_phi_90_pred_3 = _2524;
                    frontier_phi_90_pred_4 = _2525;
                    frontier_phi_90_pred_5 = _2526;
                }
                else
                {
                    float _2697;
                    float _2698;
                    float _2699;
                    float _2700;
                    float _2701;
                    float _2702;
                    uint _2703;
                    _2697 = _2522;
                    _2698 = _2523;
                    _2699 = _2524;
                    _2700 = _2525;
                    _2701 = _2526;
                    _2702 = _2527;
                    _2703 = _2537;
                    float _2603;
                    float _2604;
                    float _2605;
                    float _2606;
                    float _2607;
                    float _2608;
                    for (;;)
                    {
                        uint _2707 = uint(findLSB(_2703)) + (_2528 << 5u);
                        uint _2704 = (_2703 + 4294967295u) & _2703;
                        uint _2709 = _2707 * 48u;
                        vec4 _2723 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2709)).x, texelFetch(g_PointLightRenderingBuffer, int(_2709 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2709 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2709 + 3u)).x));
                        uint _2729 = (_2707 * 48u) + 4u;
                        vec4 _2742 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2729)).x, texelFetch(g_PointLightRenderingBuffer, int(_2729 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2729 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2729 + 3u)).x));
                        uint _2748 = (_2707 * 48u) + 8u;
                        vec3 _2759 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2748)).x, texelFetch(g_PointLightRenderingBuffer, int(_2748 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2748 + 2u)).x));
                        float _2763 = _2723.x - _2193;
                        float _2764 = _2723.y - _2194;
                        float _2765 = _2723.z - _2195;
                        float _2766 = dot(vec3(_2763, _2764, _2765), vec3(_2763, _2764, _2765));
                        float _2769 = inversesqrt(_2766);
                        float _2770 = _2769 * _2763;
                        float _2771 = _2769 * _2764;
                        float _2772 = _2769 * _2765;
                        float _2773 = dot(vec3(_843, _846, _849), vec3(_2770, _2771, _2772));
                        float _2778 = 1.0 - (_2766 * _2723.w);
                        float _4028 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
                        float _2779 = isnan(1.0) ? _4028 : (isnan(_4028) ? 1.0 : min(_4028, 1.0));
                        float _2780 = sqrt(_2766) * _2742.w;
                        float _2783 = 1.39999997615814208984375 / (_2780 + 1.39999997615814208984375);
                        float _2784 = _2783 * _2783;
                        float _2787 = ((1.0 - _2784) * _2773) + _2784;
                        float _2790 = _2780 * _2780;
                        float _2794 = ((isnan(0.0) ? _2787 : (isnan(_2787) ? 0.0 : max(_2787, 0.0))) * _2779) / ((_2790 * 0.699999988079071044921875) + 1.0);
                        float _2798 = (-0.0) - _2193;
                        float _2799 = (-0.0) - _2194;
                        float _2800 = (-0.0) - _2195;
                        float _2804 = inversesqrt(dot(vec3(_2798, _2799, _2800), vec3(_2798, _2799, _2800)));
                        float _2805 = _2804 * _2798;
                        float _2806 = _2804 * _2799;
                        float _2807 = _2804 * _2800;
                        float _2815 = exp2(log2(1.0 / ((_2790 * 3.5) + 5.0)) * 0.25);
                        float _2816 = 1.0 - _904;
                        float _2823 = sqrt(1.0 - ((1.0 - (_2816 * _2816)) * (1.0 - (_2815 * _2815))));
                        float _2824 = _2823 * _2823;
                        float _2825 = _2824 * _2824;
                        float _2826 = _2805 + _2770;
                        float _2827 = _2806 + _2771;
                        float _2828 = _2807 + _2772;
                        float _2832 = inversesqrt(dot(vec3(_2826, _2827, _2828), vec3(_2826, _2827, _2828)));
                        float _2836 = dot(vec3(_843, _846, _849), vec3(_2805, _2806, _2807));
                        float _4044 = isnan(0.0) ? _2836 : (isnan(_2836) ? 0.0 : max(_2836, 0.0));
                        float _2839 = isnan(1.0) ? _4044 : (isnan(_4044) ? 1.0 : min(_4044, 1.0));
                        float _2840 = dot(vec3(_843, _846, _849), vec3(_2832 * _2826, _2832 * _2827, _2832 * _2828));
                        float _4055 = isnan(0.0) ? _2840 : (isnan(_2840) ? 0.0 : max(_2840, 0.0));
                        float _2843 = isnan(1.0) ? _4055 : (isnan(_4055) ? 1.0 : min(_4055, 1.0));
                        float _2847 = ((_2843 * _2843) * (_2825 + (-1.0))) + 1.0;
                        float _2848 = _2783 * _2824;
                        float _2849 = _2848 * _2848;
                        float _2852 = ((1.0 - _2849) * _2773) + _2849;
                        float _4066 = isnan(0.0) ? _2852 : (isnan(_2852) ? 0.0 : max(_2852, 0.0));
                        float _2853 = isnan(1.0) ? _4066 : (isnan(_4066) ? 1.0 : min(_4066, 1.0));
                        float _2854 = 1.0 - _2824;
                        float _2864 = (0.5 / (((_2853 * ((_2839 * _2854) + _2824)) + 9.9999999392252902907785028219223e-09) + (((_2853 * _2854) + _2824) * _2839))) * _2853;
                        float _4077 = isnan(0.0) ? _2864 : (isnan(_2864) ? 0.0 : max(_2864, 0.0));
                        float _2875 = (((_2825 * 3.1415927410125732421875) * (isnan(1.0) ? _4077 : (isnan(_4077) ? 1.0 : min(_4077, 1.0)))) / ((_2847 * _2847) * ((_2790 * 2.1991131305694580078125) + 3.141590118408203125))) * _2779;
                        _2606 = (_2794 * _2742.x) + _2700;
                        _2607 = (_2794 * _2742.y) + _2701;
                        _2608 = (_2794 * _2742.z) + _2702;
                        _2603 = (_2875 * _2759.x) + _2697;
                        _2604 = (_2875 * _2759.y) + _2698;
                        _2605 = (_2875 * _2759.z) + _2699;
                        if (_2704 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2697 = _2603;
                            _2698 = _2604;
                            _2699 = _2605;
                            _2700 = _2606;
                            _2701 = _2607;
                            _2702 = _2608;
                            _2703 = _2704;
                        }
                    }
                    frontier_phi_90_pred = _2608;
                    frontier_phi_90_pred_1 = _2603;
                    frontier_phi_90_pred_2 = _2604;
                    frontier_phi_90_pred_3 = _2605;
                    frontier_phi_90_pred_4 = _2606;
                    frontier_phi_90_pred_5 = _2607;
                }
                _2357 = frontier_phi_90_pred;
                _2347 = frontier_phi_90_pred_1;
                _2349 = frontier_phi_90_pred_2;
                _2351 = frontier_phi_90_pred_3;
                _2353 = frontier_phi_90_pred_4;
                _2355 = frontier_phi_90_pred_5;
                uint _2529 = _2528 + 1u;
                if (_2529 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2522 = _2347;
                    _2523 = _2349;
                    _2524 = _2351;
                    _2525 = _2353;
                    _2526 = _2355;
                    _2527 = _2357;
                    _2528 = _2529;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2346 = _2347;
            _2348 = _2349;
            _2350 = _2351;
            _2352 = _2353;
            _2354 = _2355;
            _2356 = _2357;
        }
        uvec4 _2360 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2361 = _2360.z;
        uint _2363 = (_2361 >> 8u) & 15u;
        float _2490;
        float _2492;
        float _2494;
        float _2496;
        float _2498;
        float _2500;
        if (((4294967295u << _2363) & _2239) == 0u)
        {
            _2490 = _2346;
            _2492 = _2348;
            _2494 = _2350;
            _2496 = _2352;
            _2498 = _2354;
            _2500 = _2356;
        }
        else
        {
            float _2515 = inversesqrt(dot(vec3(_2193, _2194, _2195), vec3(_2193, _2194, _2195)));
            float _2516 = _2515 * _2193;
            float _2517 = _2515 * _2194;
            float _2518 = _2515 * _2195;
            float frontier_phi_81_82_ladder;
            float frontier_phi_81_82_ladder_1;
            float frontier_phi_81_82_ladder_2;
            float frontier_phi_81_82_ladder_3;
            float frontier_phi_81_82_ladder_4;
            float frontier_phi_81_82_ladder_5;
            if (_2363 < ((_2361 >> 12u) & 15u))
            {
                float _2491;
                float _2493;
                float _2495;
                float _2497;
                float _2499;
                float _2501;
                float _2680 = _2346;
                float _2681 = _2348;
                float _2682 = _2350;
                float _2683 = _2352;
                float _2684 = _2354;
                float _2685 = _2356;
                uint _2686 = _2363;
                uint _2695;
                bool _2696;
                for (;;)
                {
                    _2695 = texelFetch(g_lightClassification, int((((_2233 << 5u) + (_2219 << 9u)) + (_2686 << 2u)) >> 2u)).x;
                    _2696 = _2695 == 0u;
                    float frontier_phi_99_pred;
                    float frontier_phi_99_pred_1;
                    float frontier_phi_99_pred_2;
                    float frontier_phi_99_pred_3;
                    float frontier_phi_99_pred_4;
                    float frontier_phi_99_pred_5;
                    if (_2696)
                    {
                        frontier_phi_99_pred = _2683;
                        frontier_phi_99_pred_1 = _2682;
                        frontier_phi_99_pred_2 = _2681;
                        frontier_phi_99_pred_3 = _2680;
                        frontier_phi_99_pred_4 = _2685;
                        frontier_phi_99_pred_5 = _2684;
                    }
                    else
                    {
                        float _2901;
                        float _2902;
                        float _2903;
                        float _2904;
                        float _2905;
                        float _2906;
                        float _3194;
                        float _3195;
                        float _3196;
                        float _3197;
                        float _3198;
                        float _3199;
                        float _2914 = _2680;
                        float _2915 = _2681;
                        float _2916 = _2682;
                        float _2917 = _2683;
                        float _2918 = _2684;
                        float _2919 = _2685;
                        uint _2920 = _2695;
                        uint _2921;
                        vec4 _2946;
                        float _2947;
                        vec4 _2962;
                        vec3 _2974;
                        vec4 _2989;
                        vec4 _3004;
                        float _3050;
                        bool _3051;
                        for (;;)
                        {
                            uint _2931 = ((_2686 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2920));
                            _2921 = (_2920 + 4294967295u) & _2920;
                            uint _2933 = _2931 * 40u;
                            _2946 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2933)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2933 + 3u)).x));
                            _2947 = _2946.w;
                            uint _2949 = (_2931 * 40u) + 4u;
                            _2962 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2949)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2949 + 3u)).x));
                            uint _2964 = (_2931 * 40u) + 8u;
                            _2974 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2964)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2964 + 2u)).x));
                            uint _2976 = (_2931 * 40u) + 16u;
                            _2989 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2976)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2976 + 3u)).x));
                            uint _2991 = (_2931 * 40u) + 20u;
                            _3004 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2991)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2991 + 3u)).x));
                            uint _3006 = (_2931 * 40u) + 24u;
                            vec4 _3019 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3006)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3006 + 3u)).x));
                            uint _3025 = (_2931 * 40u) + 28u;
                            vec4 _3038 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3025)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3025 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3025 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3025 + 3u)).x));
                            _3050 = fma(_2195, _3038.z, fma(_2194, _3038.y, _3038.x * _2193)) + _3038.w;
                            _3051 = !((fma(_2195, _3019.z, fma(_2194, _3019.y, _3019.x * _2193)) + _3019.w) <= 0.0);
                            float frontier_phi_105_pred;
                            float frontier_phi_105_pred_1;
                            float frontier_phi_105_pred_2;
                            float frontier_phi_105_pred_3;
                            float frontier_phi_105_pred_4;
                            float frontier_phi_105_pred_5;
                            if (_3051)
                            {
                                float _3078 = _2946.x - _2193;
                                float _3079 = _2946.y - _2194;
                                float _3080 = _2946.z - _2195;
                                float _3081 = dot(vec3(_3078, _3079, _3080), vec3(_3078, _3079, _3080));
                                float _3084 = inversesqrt(_3081);
                                float _3085 = _3084 * _3078;
                                float _3086 = _3084 * _3079;
                                float _3087 = _3084 * _3080;
                                float _3091 = 1.0 - (_3081 / (_2947 * _2947));
                                float _4088 = isnan(0.0) ? _3091 : (isnan(_3091) ? 0.0 : max(_3091, 0.0));
                                float _3092 = isnan(1.0) ? _4088 : (isnan(_4088) ? 1.0 : min(_4088, 1.0));
                                float _3096 = sqrt(_3081) * _2962.w;
                                float _3098 = 1.39999997615814208984375 / (_3096 + 1.39999997615814208984375);
                                float _3099 = _3098 * _3098;
                                float _3102 = ((1.0 - _3099) * dot(vec3(_3085, _3086, _3087), vec3(_843, _846, _849))) + _3099;
                                float _3105 = _3096 * _3096;
                                float _3109 = (fma(_2195, _2989.z, fma(_2194, _2989.y, _2989.x * _2193)) + _2989.w) / _3050;
                                float _3110 = (fma(_2195, _3004.z, fma(_2194, _3004.y, _3004.x * _2193)) + _3004.w) / _3050;
                                float _3114 = 1.0 - dot(vec2(_3109, _3110), vec2(_3109, _3110));
                                float _4104 = isnan(0.0) ? _3114 : (isnan(_3114) ? 0.0 : max(_3114, 0.0));
                                float _3115 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
                                float _3116 = _3115 * (((isnan(0.0) ? _3102 : (isnan(_3102) ? 0.0 : max(_3102, 0.0))) * _3092) / ((_3105 * 0.699999988079071044921875) + 1.0));
                                float _3128 = exp2(log2(1.0 / ((_3105 * 3.5) + 5.0)) * 0.25);
                                float _3129 = 1.0 - _904;
                                float _3136 = sqrt(1.0 - ((1.0 - (_3129 * _3129)) * (1.0 - (_3128 * _3128))));
                                float _3137 = _3136 * _3136;
                                float _3138 = _3137 * _3137;
                                float _3139 = _3085 - _2516;
                                float _3140 = _3086 - _2517;
                                float _3141 = _3087 - _2518;
                                float _3145 = inversesqrt(dot(vec3(_3139, _3140, _3141), vec3(_3139, _3140, _3141)));
                                float _3149 = dot(vec3(_843, _846, _849), vec3((-0.0) - _2516, (-0.0) - _2517, (-0.0) - _2518));
                                float _4115 = isnan(0.0) ? _3149 : (isnan(_3149) ? 0.0 : max(_3149, 0.0));
                                float _3152 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
                                float _3153 = dot(vec3(_843, _846, _849), vec3(_3145 * _3139, _3145 * _3140, _3145 * _3141));
                                float _4126 = isnan(0.0) ? _3153 : (isnan(_3153) ? 0.0 : max(_3153, 0.0));
                                float _3156 = isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0));
                                float _3160 = ((_3156 * _3156) * (_3138 + (-1.0))) + 1.0;
                                float _3161 = _3098 * _3137;
                                float _3162 = _3161 * _3161;
                                float _3168 = ((1.0 - _3162) * dot(vec3(_843, _846, _849), vec3(_3085, _3086, _3087))) + _3162;
                                float _4137 = isnan(0.0) ? _3168 : (isnan(_3168) ? 0.0 : max(_3168, 0.0));
                                float _3169 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
                                float _3170 = 1.0 - _3137;
                                float _3180 = (0.5 / (((_3169 * ((_3152 * _3170) + _3137)) + 9.9999999392252902907785028219223e-09) + (((_3169 * _3170) + _3137) * _3152))) * _3169;
                                float _4148 = isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0));
                                float _3190 = (_3115 * _3092) * (((_3138 * 3.1415927410125732421875) * (isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0)))) / ((_3160 * _3160) * ((_3105 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_105_pred = _3116 * _2962.z;
                                frontier_phi_105_pred_1 = _3190 * _2974.x;
                                frontier_phi_105_pred_2 = _3190 * _2974.y;
                                frontier_phi_105_pred_3 = _3190 * _2974.z;
                                frontier_phi_105_pred_4 = _3116 * _2962.x;
                                frontier_phi_105_pred_5 = _3116 * _2962.y;
                            }
                            else
                            {
                                frontier_phi_105_pred = 0.0;
                                frontier_phi_105_pred_1 = 0.0;
                                frontier_phi_105_pred_2 = 0.0;
                                frontier_phi_105_pred_3 = 0.0;
                                frontier_phi_105_pred_4 = 0.0;
                                frontier_phi_105_pred_5 = 0.0;
                            }
                            _3199 = frontier_phi_105_pred;
                            _3194 = frontier_phi_105_pred_1;
                            _3195 = frontier_phi_105_pred_2;
                            _3196 = frontier_phi_105_pred_3;
                            _3197 = frontier_phi_105_pred_4;
                            _3198 = frontier_phi_105_pred_5;
                            _2904 = _3197 + _2917;
                            _2905 = _3198 + _2918;
                            _2906 = _3199 + _2919;
                            _2901 = _3194 + _2914;
                            _2902 = _3195 + _2915;
                            _2903 = _3196 + _2916;
                            if (_2921 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2914 = _2901;
                                _2915 = _2902;
                                _2916 = _2903;
                                _2917 = _2904;
                                _2918 = _2905;
                                _2919 = _2906;
                                _2920 = _2921;
                                continue;
                            }
                        }
                        frontier_phi_99_pred = _2904;
                        frontier_phi_99_pred_1 = _2903;
                        frontier_phi_99_pred_2 = _2902;
                        frontier_phi_99_pred_3 = _2901;
                        frontier_phi_99_pred_4 = _2906;
                        frontier_phi_99_pred_5 = _2905;
                    }
                    _2497 = frontier_phi_99_pred;
                    _2495 = frontier_phi_99_pred_1;
                    _2493 = frontier_phi_99_pred_2;
                    _2491 = frontier_phi_99_pred_3;
                    _2501 = frontier_phi_99_pred_4;
                    _2499 = frontier_phi_99_pred_5;
                    uint _2687 = _2686 + 1u;
                    if (_2687 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2680 = _2491;
                        _2681 = _2493;
                        _2682 = _2495;
                        _2683 = _2497;
                        _2684 = _2499;
                        _2685 = _2501;
                        _2686 = _2687;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_81_82_ladder = _2501;
                frontier_phi_81_82_ladder_1 = _2497;
                frontier_phi_81_82_ladder_2 = _2495;
                frontier_phi_81_82_ladder_3 = _2493;
                frontier_phi_81_82_ladder_4 = _2491;
                frontier_phi_81_82_ladder_5 = _2499;
            }
            else
            {
                frontier_phi_81_82_ladder = _2356;
                frontier_phi_81_82_ladder_1 = _2352;
                frontier_phi_81_82_ladder_2 = _2350;
                frontier_phi_81_82_ladder_3 = _2348;
                frontier_phi_81_82_ladder_4 = _2346;
                frontier_phi_81_82_ladder_5 = _2354;
            }
            _2490 = frontier_phi_81_82_ladder_4;
            _2492 = frontier_phi_81_82_ladder_3;
            _2494 = frontier_phi_81_82_ladder_2;
            _2496 = frontier_phi_81_82_ladder_1;
            _2498 = frontier_phi_81_82_ladder_5;
            _2500 = frontier_phi_81_82_ladder;
        }
        float _2505 = isnan(1.0) ? _888 : (isnan(_888) ? 1.0 : min(_888, 1.0));
        _2252 = (_2505 * _2496) + _1982;
        _2254 = (_2505 * _2498) + _1983;
        _2256 = (_2505 * _2500) + _1984;
        _2258 = ((_2490 * 0.039999999105930328369140625) * _2505) + _2135;
        _2260 = ((_2492 * 0.039999999105930328369140625) * _2505) + _2136;
        _2262 = ((_2494 * 0.039999999105930328369140625) * _2505) + _2137;
    }
    else
    {
        _2252 = _1982;
        _2254 = _1983;
        _2256 = _1984;
        _2258 = _2135;
        _2260 = _2136;
        _2262 = _2137;
    }
    uint _2268 = _864 + uint(cbMatDynParam._m0[0u].w);
    float _4164 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
    float _4175 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _4186 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _2293 = (((isnan(1.0) ? _4164 : (isnan(_4164) ? 1.0 : min(_4164, 1.0))) * (_2252 + ((isnan(0.0) ? _1615 : (isnan(_1615) ? 0.0 : max(_1615, 0.0))) * _888))) + ((_2258 + ((isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0))) * _1694)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2268].x * ((((((cbMtdParam._m0[14u].x * _287) * _682.x) - _614) * _287) * _735) + _614));
    float _2295 = ((cbInstanceData._m0[_2268].y * ((((((cbMtdParam._m0[14u].y * _287) * _682.y) - _615) * _287) * _735) + _615)) + ((_2260 + ((isnan(0.0) ? _1908 : (isnan(_1908) ? 0.0 : max(_1908, 0.0))) * _1694)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4175 : (isnan(_4175) ? 1.0 : min(_4175, 1.0))) * (_2254 + ((isnan(0.0) ? _1618 : (isnan(_1618) ? 0.0 : max(_1618, 0.0))) * _888)));
    float _2297 = ((cbInstanceData._m0[_2268].z * ((((((cbMtdParam._m0[14u].z * _287) * _682.z) - _616) * _287) * _735) + _616)) + ((_2262 + ((isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0))) * _1694)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4186 : (isnan(_4186) ? 1.0 : min(_4186, 1.0))) * (_2256 + ((isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0))) * _888)));
    uint _2301 = _862 + 6u;
    float _2309 = _823 / cbSceneParam._m0[86u].x;
    float _2310 = _824 / cbSceneParam._m0[86u].y;
    vec4 _2324 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2309, _2310, (log2((isnan(cbSceneParam._m0[77u].w) ? _810 : (isnan(_810) ? cbSceneParam._m0[77u].w : min(_810, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2326 = _2324.x;
    float _2327 = _2324.y;
    float _2328 = _2324.z;
    float _2329 = _2324.w;
    float _2409;
    float _2411;
    float _2413;
    float _2415;
    if (_810 > cbSceneParam._m0[78u].w)
    {
        float _2371 = isnan(_810) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _810 : min(cbSceneParam._m0[80u].w, _810));
        float _2372 = _2371 / _810;
        float _2383 = _2372 * _269;
        float _2384 = _270 * _2372;
        float _2385 = (-0.0) - _2384;
        float _2386 = _2372 * _271;
        float _2388 = (cbSceneParam._m0[77u].w * _2385) / _2371;
        float _2389 = _2388 + cbSceneParam._m0[79u].w;
        float _2390 = cbSceneParam._m0[79u].w - _2384;
        float _2396 = sqrt(((_2383 * _2383) + (_2384 * _2384)) + (_2386 * _2386));
        float _2399 = (1.0 - (cbSceneParam._m0[77u].w / _2371)) * _2396;
        float _2405 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2407 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2616;
        if (abs((_2385 - _2388) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2616 = ((((_2389 > 0.0) ? exp2(_2405 * _2389) : (2.0 - exp2(_2407 * _2389))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2399;
        }
        else
        {
            float _2551 = 1.0 / cbSceneParam._m0[80u].x;
            float _2552 = isnan(_2390) ? _2389 : (isnan(_2389) ? _2390 : max(_2389, _2390));
            float _2553 = isnan(_2390) ? _2389 : (isnan(_2389) ? _2390 : min(_2389, _2390));
            float _2562 = isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : min(_2552, 0.0));
            float _2563 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : min(_2553, 0.0));
            _2616 = ((abs(_2396 / _2385) * cbSceneParam._m0[80u].y) * ((((_2562 - _2563) * 2.0) - ((exp2(_2405 * (isnan(0.0) ? _2552 : (isnan(_2552) ? 0.0 : max(_2552, 0.0)))) - exp2(_2405 * (isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0))))) * _2551)) - ((exp2(_2407 * _2562) - exp2(_2407 * _2563)) * _2551))) + (_2399 * cbSceneParam._m0[80u].z);
        }
        vec4 _2618 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2309, _2310, 1.0), 0.0);
        float _2627 = exp2((_2616 * (-1.44269502162933349609375)) * (1.0 - _2618.w));
        float _2628 = log2(_2627);
        float _2644 = log2(_2329);
        _2409 = (exp2(_2644 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2628 * cbSceneParam._m0[78u].x)) * _2618.x) / cbSceneParam._m0[78u].x)) + _2326;
        _2411 = (exp2(_2644 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2628 * cbSceneParam._m0[78u].y)) * _2618.y) / cbSceneParam._m0[78u].y)) + _2327;
        _2413 = (exp2(_2644 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2628 * cbSceneParam._m0[78u].z)) * _2618.z) / cbSceneParam._m0[78u].z)) + _2328;
        _2415 = _2627 * _2329;
    }
    else
    {
        _2409 = _2326;
        _2411 = _2327;
        _2413 = _2328;
        _2415 = _2329;
    }
    float _2427 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2428 = _2427 == 3.0;
    float _2429 = log2(_2415);
    float _2436 = exp2(_2429 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2293 : (isnan(_2293) ? 0.0 : max(_2293, 0.0)));
    float _2437 = exp2(_2429 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0)));
    float _2438 = exp2(_2429 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2297 : (isnan(_2297) ? 0.0 : max(_2297, 0.0)));
    float _2447 = (_2427 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2447 * (_2428 ? _2436 : (_2436 + (cbSceneParam._m0[72u].w * _2409)));
    SV_Target.y = _2447 * (_2428 ? _2437 : (_2437 + (cbSceneParam._m0[72u].w * _2411)));
    SV_Target.z = _2447 * (_2428 ? _2438 : (_2438 + (cbSceneParam._m0[72u].w * _2413)));
    SV_Target.w = cbInstanceData._m0[_2301].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2301].w;
}


