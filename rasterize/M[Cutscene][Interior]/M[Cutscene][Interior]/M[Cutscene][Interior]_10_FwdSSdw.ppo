#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 2) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_12;
layout(set = 0, binding = 3) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _394;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _198 = _197 * _190;
    float _199 = _197 * _191;
    float _200 = _197 * _192;
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _209 = _208 * TANGENT.x;
    float _210 = _208 * TANGENT.y;
    float _211 = _208 * TANGENT.z;
    float _256 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _266 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _256);
    float _267 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _256);
    float _268 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _256);
    vec4 _303 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _319 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _326 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _338 = cbMtdParam._m0[24u].w + _266;
    float _339 = cbMtdParam._m0[25u].x + _267;
    float _340 = cbMtdParam._m0[25u].y + _268;
    float _357 = (-0.0) - dot(vec3(_338, _339, _340), vec3(_319 * _198, _319 * _199, _319 * _200));
    float _358 = (-0.0) - dot(vec3(_338, _339, _340), vec3(_326 * _209, _326 * _210, _326 * _211));
    float _359 = (-0.0) - dot(vec3(_338, _339, _340), vec3((-0.0) - (NORMAL.x * _204), (-0.0) - (NORMAL.y * _204), (-0.0) - (NORMAL.z * _204)));
    float _363 = inversesqrt(dot(vec3(_357, _358, _359), vec3(_357, _358, _359)));
    float _364 = _363 * _359;
    float _369 = ((cbMtdParam._m0[21u].z * _357) * _363) + (((_303.x * 2.0) + (-1.0)) * cbMtdParam._m0[22u].x);
    float _370 = ((cbMtdParam._m0[21u].w * _358) * _363) + (((_303.y * 2.0) + (-1.0)) * cbMtdParam._m0[22u].y);
    float _373 = fract(cbMtdParam._m0[21u].z * TEXCOORD.x);
    float _374 = fract(cbMtdParam._m0[21u].w * TEXCOORD.y);
    float _392;
    float _395;
    float _397;
    if (_369 > 0.0)
    {
        float _378 = (1.0 - _373) / _369;
        _392 = _378;
        _395 = ((cbMtdParam._m0[18u].w + 1.0) - fract(_378 * _364)) * 0.16666667163372039794921875;
        _397 = (fract((_378 * _370) + _374) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_369 < 0.0)
        {
            float _393 = ((-0.0) - _373) / _369;
            frontier_phi_3_2_ladder = (fract((_393 * _370) + _374) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_1 = _393;
            frontier_phi_3_2_ladder_2 = (fract(_393 * _364) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _394;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _392 = frontier_phi_3_2_ladder_1;
        _395 = frontier_phi_3_2_ladder_2;
        _397 = frontier_phi_3_2_ladder;
    }
    float _423;
    float _425;
    float _427;
    if (_370 > 0.0)
    {
        float _410 = (1.0 - _374) / _370;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_410 < _392)
        {
            frontier_phi_8_5_ladder = (fract((_410 * _369) + _373) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_1 = _410;
            frontier_phi_8_5_ladder_2 = (fract(_410 * _364) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
        }
        else
        {
            frontier_phi_8_5_ladder = _395;
            frontier_phi_8_5_ladder_1 = _392;
            frontier_phi_8_5_ladder_2 = _397;
        }
        _423 = frontier_phi_8_5_ladder_1;
        _425 = frontier_phi_8_5_ladder;
        _427 = frontier_phi_8_5_ladder_2;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_370 < 0.0)
        {
            float _424 = ((-0.0) - _374) / _370;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_424 < _392)
            {
                frontier_phi_8_6_ladder_9_ladder = (fract((_424 * _369) + _373) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = _424;
                frontier_phi_8_6_ladder_9_ladder_2 = fract(_424 * _364) * 0.16666667163372039794921875;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _395;
                frontier_phi_8_6_ladder_9_ladder_1 = _392;
                frontier_phi_8_6_ladder_9_ladder_2 = _397;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _395;
            frontier_phi_8_6_ladder_1 = _392;
            frontier_phi_8_6_ladder_2 = _397;
        }
        _423 = frontier_phi_8_6_ladder_1;
        _425 = frontier_phi_8_6_ladder;
        _427 = frontier_phi_8_6_ladder_2;
    }
    float _431 = (_364 > 0.0) ? (cbMtdParam._m0[18u].z / _364) : 5000.0;
    float _444;
    float _445;
    if (_431 < _423)
    {
        _444 = ((_373 + cbMtdParam._m0[18u].w) + (_431 * _369)) * 0.16666667163372039794921875;
        _445 = (((_431 * _370) + _374) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _444 = _425;
        _445 = _427;
    }
    vec4 _447 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_444, _445));
    float _2822 = isnan(0.0) ? cbMtdParam._m0[17u].z : (isnan(cbMtdParam._m0[17u].z) ? 0.0 : max(cbMtdParam._m0[17u].z, 0.0));
    float _461 = isnan(1.0) ? _2822 : (isnan(_2822) ? 1.0 : min(_2822, 1.0));
    float _2833 = isnan(0.0) ? cbMtdParam._m0[17u].y : (isnan(cbMtdParam._m0[17u].y) ? 0.0 : max(cbMtdParam._m0[17u].y, 0.0));
    float _504 = ((_461 - ((1.0 - (isnan(1.0) ? _2833 : (isnan(_2833) ? 1.0 : min(_2833, 1.0)))) * (_461 + 1.0))) + (((cbMtdParam._m0[18u].y * texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[3u].w)).x) + (cbMtdParam._m0[17u].x * texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w)).x)) / cbMtdParam._m0[17u].w)) / _461;
    float _2844 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _505 = isnan(1.0) ? _2844 : (isnan(_2844) ? 1.0 : min(_2844, 1.0));
    float _507 = 3.0 - (_505 * 2.0);
    float _512 = _505 * _505;
    float _520 = (((_512 * (cbMtdParam._m0[15u].x - cbMtdParam._m0[13u].x)) * _507) + cbMtdParam._m0[13u].x) * _447.x;
    float _522 = (((_512 * (cbMtdParam._m0[15u].y - cbMtdParam._m0[13u].y)) * _507) + cbMtdParam._m0[13u].y) * _447.y;
    float _524 = (((_512 * (cbMtdParam._m0[15u].z - cbMtdParam._m0[13u].z)) * _507) + cbMtdParam._m0[13u].z) * _447.z;
    float _2855 = isnan(0.0) ? _520 : (isnan(_520) ? 0.0 : max(_520, 0.0));
    float _2866 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _2877 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _543 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _547 = inversesqrt(dot(vec3(_266, _267, _268), vec3(_266, _267, _268)));
    float _548 = _266 * _547;
    float _549 = _267 * _547;
    float _550 = _268 * _547;
    float _556 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _557 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _570 = uint(roundEven(NORMAL.w)) * 13u;
    uint _572 = (_570 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _578 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2855 : (isnan(_2855) ? 1.0 : min(_2855, 1.0)))) * cbInstanceData._m0[_572].x;
    float _579 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2866 : (isnan(_2866) ? 1.0 : min(_2866, 1.0)))) * cbInstanceData._m0[_572].y;
    float _580 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2877 : (isnan(_2877) ? 1.0 : min(_2877, 1.0)))) * cbInstanceData._m0[_572].z;
    float _2888 = isnan(0.0) ? _578 : (isnan(_578) ? 0.0 : max(_578, 0.0));
    float _581 = isnan(1.0) ? _2888 : (isnan(_2888) ? 1.0 : min(_2888, 1.0));
    float _2899 = isnan(0.0) ? _579 : (isnan(_579) ? 0.0 : max(_579, 0.0));
    float _582 = isnan(1.0) ? _2899 : (isnan(_2899) ? 1.0 : min(_2899, 1.0));
    float _2910 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _583 = isnan(1.0) ? _2910 : (isnan(_2910) ? 1.0 : min(_2910, 1.0));
    vec4 _592 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _556, cbSceneParam._m0[86u].y * _557));
    float _595 = _592.x * TEXCOORD_4.z;
    float _596 = (-0.0) - _548;
    float _597 = (-0.0) - _549;
    float _598 = (-0.0) - _550;
    float _620 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _624 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _628 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _902;
    float _903;
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _690 = (cbModelParam._m0[37u].x * ((((fma(_628, cbModelParam._m0[26u].z, fma(_624, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _620)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _692 = (cbModelParam._m0[37u].y * ((((fma(_628, cbModelParam._m0[27u].z, fma(_624, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _620)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _693 = (((((fma(_628, cbModelParam._m0[28u].z, fma(_624, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _620)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _696 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_690, _692, _693), 0.0);
        vec4 _703 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_690, _692, _693), 0.0);
        vec4 _710 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_690, _692, _693), 0.0);
        vec4 _717 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_690, _692, _693), 0.0);
        float _730 = exp2((_696.w + (-0.5)) * 20.0) * 2.0;
        float _731 = _730 * (_696.x + (-0.5));
        float _732 = _730 * (_696.y + (-0.5));
        float _733 = _730 * (_696.z + (-0.5));
        float _740 = exp2((_703.w + (-0.5)) * 20.0) * 2.0;
        float _741 = _740 * (_703.x + (-0.5));
        float _742 = _740 * (_703.y + (-0.5));
        float _743 = _740 * (_703.z + (-0.5));
        float _750 = exp2((_710.w + (-0.5)) * 20.0) * 2.0;
        float _751 = _750 * (_710.x + (-0.5));
        float _752 = _750 * (_710.y + (-0.5));
        float _753 = _750 * (_710.z + (-0.5));
        float _760 = exp2((_717.w + (-0.5)) * 20.0) * 2.0;
        float _761 = _760 * (_717.x + (-0.5));
        float _762 = _760 * (_717.y + (-0.5));
        float _763 = _760 * (_717.z + (-0.5));
        float _764 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
        float _765 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
        float _766 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
        float _767 = _731 * 0.5;
        float _768 = _741 * 0.5;
        float _769 = _751 * 0.5;
        float _770 = dot(vec3(_767, _768, _769), vec3(_767, _768, _769));
        float _775 = (_770 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_770);
        float _784 = (dot(vec3(0.0), vec3(_775 * _767, _775 * _768, _775 * _769)) + 1.0) * 0.5;
        float _2936 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
        float _794 = sqrt(((_768 * _768) + (_767 * _767)) + (_769 * _769)) / (_764 + 9.9999997473787516355514526367188e-06);
        float _2947 = isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0));
        float _795 = isnan(1.0) ? _2947 : (isnan(_2947) ? 1.0 : min(_2947, 1.0));
        float _796 = _795 * 2.0;
        float _800 = (1.0 - _795) / (_795 + 1.0);
        float _2958 = isnan(0.0) ? _800 : (isnan(_800) ? 0.0 : max(_800, 0.0));
        float _801 = isnan(1.0) ? _2958 : (isnan(_2958) ? 1.0 : min(_2958, 1.0));
        float _810 = ((((1.0 - _801) * (_796 + 2.0)) * exp2(log2(isnan(1.0) ? _2936 : (isnan(_2936) ? 1.0 : min(_2936, 1.0))) * (_796 + 1.0))) + _801) * _764;
        float _811 = _732 * 0.5;
        float _812 = _742 * 0.5;
        float _813 = _752 * 0.5;
        float _814 = dot(vec3(_811, _812, _813), vec3(_811, _812, _813));
        float _819 = (_814 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_814);
        float _827 = (dot(vec3(0.0), vec3(_819 * _811, _819 * _812, _819 * _813)) + 1.0) * 0.5;
        float _2969 = isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0));
        float _836 = sqrt(((_812 * _812) + (_811 * _811)) + (_813 * _813)) / (_765 + 9.9999997473787516355514526367188e-06);
        float _2980 = isnan(0.0) ? _836 : (isnan(_836) ? 0.0 : max(_836, 0.0));
        float _837 = isnan(1.0) ? _2980 : (isnan(_2980) ? 1.0 : min(_2980, 1.0));
        float _838 = _837 * 2.0;
        float _842 = (1.0 - _837) / (_837 + 1.0);
        float _2991 = isnan(0.0) ? _842 : (isnan(_842) ? 0.0 : max(_842, 0.0));
        float _843 = isnan(1.0) ? _2991 : (isnan(_2991) ? 1.0 : min(_2991, 1.0));
        float _852 = ((((1.0 - _843) * (_838 + 2.0)) * exp2(log2(isnan(1.0) ? _2969 : (isnan(_2969) ? 1.0 : min(_2969, 1.0))) * (_838 + 1.0))) + _843) * _765;
        float _853 = _733 * 0.5;
        float _854 = _743 * 0.5;
        float _855 = _753 * 0.5;
        float _856 = dot(vec3(_853, _854, _855), vec3(_853, _854, _855));
        float _861 = (_856 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_856);
        float _869 = (dot(vec3(0.0), vec3(_861 * _853, _861 * _854, _861 * _855)) + 1.0) * 0.5;
        float _3002 = isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0));
        float _878 = sqrt(((_854 * _854) + (_853 * _853)) + (_855 * _855)) / (_766 + 9.9999997473787516355514526367188e-06);
        float _3013 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _879 = isnan(1.0) ? _3013 : (isnan(_3013) ? 1.0 : min(_3013, 1.0));
        float _880 = _879 * 2.0;
        float _884 = (1.0 - _879) / (_879 + 1.0);
        float _3024 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
        float _885 = isnan(1.0) ? _3024 : (isnan(_3024) ? 1.0 : min(_3024, 1.0));
        float _894 = ((((1.0 - _885) * (_880 + 2.0)) * exp2(log2(isnan(1.0) ? _3002 : (isnan(_3002) ? 1.0 : min(_3002, 1.0))) * (_880 + 1.0))) + _885) * _766;
        _902 = _733;
        _903 = _732;
        _904 = _731;
        _905 = _743;
        _906 = _742;
        _907 = _741;
        _908 = _753;
        _909 = _752;
        _910 = _751;
        _911 = _766;
        _912 = _765;
        _913 = _764;
        _914 = cbModelParam._m0[36u].z * (isnan(0.0) ? _810 : (isnan(_810) ? 0.0 : max(_810, 0.0)));
        _915 = cbModelParam._m0[36u].z * (isnan(0.0) ? _852 : (isnan(_852) ? 0.0 : max(_852, 0.0)));
        _916 = cbModelParam._m0[36u].z * (isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0)));
    }
    else
    {
        _902 = _394;
        _903 = _394;
        _904 = _394;
        _905 = _394;
        _906 = _394;
        _907 = _394;
        _908 = _394;
        _909 = _394;
        _910 = _394;
        _911 = _394;
        _912 = _394;
        _913 = _394;
        _914 = 0.0;
        _915 = 0.0;
        _916 = 0.0;
    }
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _970 = (cbModelParam._m0[38u].x * ((((fma(_628, cbModelParam._m0[30u].z, fma(_624, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _620)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _971 = (cbModelParam._m0[38u].y * ((((fma(_628, cbModelParam._m0[31u].z, fma(_624, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _620)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _972 = (((((fma(_628, cbModelParam._m0[32u].z, fma(_624, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _620)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _974 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_970, _971, _972), 0.0);
        vec4 _981 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_970, _971, _972), 0.0);
        vec4 _988 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_970, _971, _972), 0.0);
        vec4 _995 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_970, _971, _972), 0.0);
        float _1007 = exp2((_974.w + (-0.5)) * 20.0) * 2.0;
        float _1008 = _1007 * (_974.x + (-0.5));
        float _1009 = _1007 * (_974.y + (-0.5));
        float _1010 = _1007 * (_974.z + (-0.5));
        float _1017 = exp2((_981.w + (-0.5)) * 20.0) * 2.0;
        float _1018 = _1017 * (_981.x + (-0.5));
        float _1019 = _1017 * (_981.y + (-0.5));
        float _1020 = _1017 * (_981.z + (-0.5));
        float _1027 = exp2((_988.w + (-0.5)) * 20.0) * 2.0;
        float _1028 = _1027 * (_988.x + (-0.5));
        float _1029 = _1027 * (_988.y + (-0.5));
        float _1030 = _1027 * (_988.z + (-0.5));
        float _1037 = exp2((_995.w + (-0.5)) * 20.0) * 2.0;
        float _1038 = _1037 * (_995.x + (-0.5));
        float _1039 = _1037 * (_995.y + (-0.5));
        float _1040 = _1037 * (_995.z + (-0.5));
        float _1041 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1042 = isnan(0.0) ? _1039 : (isnan(_1039) ? 0.0 : max(_1039, 0.0));
        float _1043 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1044 = _1008 * 0.5;
        float _1045 = _1018 * 0.5;
        float _1046 = _1028 * 0.5;
        float _1047 = dot(vec3(_1044, _1045, _1046), vec3(_1044, _1045, _1046));
        float _1052 = (_1047 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1047);
        float _1060 = (dot(vec3(0.0), vec3(_1052 * _1044, _1052 * _1045, _1052 * _1046)) + 1.0) * 0.5;
        float _3065 = isnan(0.0) ? _1060 : (isnan(_1060) ? 0.0 : max(_1060, 0.0));
        float _1069 = sqrt(((_1045 * _1045) + (_1044 * _1044)) + (_1046 * _1046)) / (_1041 + 9.9999997473787516355514526367188e-06);
        float _3076 = isnan(0.0) ? _1069 : (isnan(_1069) ? 0.0 : max(_1069, 0.0));
        float _1070 = isnan(1.0) ? _3076 : (isnan(_3076) ? 1.0 : min(_3076, 1.0));
        float _1071 = _1070 * 2.0;
        float _1075 = (1.0 - _1070) / (_1070 + 1.0);
        float _3087 = isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0));
        float _1076 = isnan(1.0) ? _3087 : (isnan(_3087) ? 1.0 : min(_3087, 1.0));
        float _1085 = ((((1.0 - _1076) * (_1071 + 2.0)) * exp2(log2(isnan(1.0) ? _3065 : (isnan(_3065) ? 1.0 : min(_3065, 1.0))) * (_1071 + 1.0))) + _1076) * _1041;
        float _1086 = _1009 * 0.5;
        float _1087 = _1019 * 0.5;
        float _1088 = _1029 * 0.5;
        float _1089 = dot(vec3(_1086, _1087, _1088), vec3(_1086, _1087, _1088));
        float _1094 = (_1089 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1089);
        float _1102 = (dot(vec3(0.0), vec3(_1094 * _1086, _1094 * _1087, _1094 * _1088)) + 1.0) * 0.5;
        float _3098 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1111 = sqrt(((_1087 * _1087) + (_1086 * _1086)) + (_1088 * _1088)) / (_1042 + 9.9999997473787516355514526367188e-06);
        float _3109 = isnan(0.0) ? _1111 : (isnan(_1111) ? 0.0 : max(_1111, 0.0));
        float _1112 = isnan(1.0) ? _3109 : (isnan(_3109) ? 1.0 : min(_3109, 1.0));
        float _1113 = _1112 * 2.0;
        float _1117 = (1.0 - _1112) / (_1112 + 1.0);
        float _3120 = isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0));
        float _1118 = isnan(1.0) ? _3120 : (isnan(_3120) ? 1.0 : min(_3120, 1.0));
        float _1127 = ((((1.0 - _1118) * (_1113 + 2.0)) * exp2(log2(isnan(1.0) ? _3098 : (isnan(_3098) ? 1.0 : min(_3098, 1.0))) * (_1113 + 1.0))) + _1118) * _1042;
        float _1128 = _1010 * 0.5;
        float _1129 = _1020 * 0.5;
        float _1130 = _1030 * 0.5;
        float _1131 = dot(vec3(_1128, _1129, _1130), vec3(_1128, _1129, _1130));
        float _1136 = (_1131 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1131);
        float _1144 = (dot(vec3(0.0), vec3(_1136 * _1128, _1136 * _1129, _1136 * _1130)) + 1.0) * 0.5;
        float _3131 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1153 = sqrt(((_1129 * _1129) + (_1128 * _1128)) + (_1130 * _1130)) / (_1043 + 9.9999997473787516355514526367188e-06);
        float _3142 = isnan(0.0) ? _1153 : (isnan(_1153) ? 0.0 : max(_1153, 0.0));
        float _1154 = isnan(1.0) ? _3142 : (isnan(_3142) ? 1.0 : min(_3142, 1.0));
        float _1155 = _1154 * 2.0;
        float _1159 = (1.0 - _1154) / (_1154 + 1.0);
        float _3153 = isnan(0.0) ? _1159 : (isnan(_1159) ? 0.0 : max(_1159, 0.0));
        float _1160 = isnan(1.0) ? _3153 : (isnan(_3153) ? 1.0 : min(_3153, 1.0));
        float _1169 = ((((1.0 - _1160) * (_1155 + 2.0)) * exp2(log2(isnan(1.0) ? _3131 : (isnan(_3131) ? 1.0 : min(_3131, 1.0))) * (_1155 + 1.0))) + _1160) * _1043;
        _1177 = _1010;
        _1178 = _1009;
        _1179 = _1008;
        _1180 = _1020;
        _1181 = _1019;
        _1182 = _1018;
        _1183 = _1030;
        _1184 = _1029;
        _1185 = _1028;
        _1186 = _1043;
        _1187 = _1042;
        _1188 = _1041;
        _1189 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0)));
        _1190 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1127 : (isnan(_1127) ? 0.0 : max(_1127, 0.0)));
        _1191 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0)));
    }
    else
    {
        _1177 = _394;
        _1178 = _394;
        _1179 = _394;
        _1180 = _394;
        _1181 = _394;
        _1182 = _394;
        _1183 = _394;
        _1184 = _394;
        _1185 = _394;
        _1186 = _394;
        _1187 = _394;
        _1188 = _394;
        _1189 = 0.0;
        _1190 = 0.0;
        _1191 = 0.0;
    }
    float _1201 = (cbModelParam._m0[1u].x * (_1189 - _914)) + _914;
    float _1202 = (cbModelParam._m0[1u].x * (_1190 - _915)) + _915;
    float _1203 = (cbModelParam._m0[1u].x * (_1191 - _916)) + _916;
    float _1224 = fma(_1203, cbSceneParam._m0[89u].z, fma(_1202, cbSceneParam._m0[89u].y, _1201 * cbSceneParam._m0[89u].x));
    float _1227 = fma(_1203, cbSceneParam._m0[90u].z, fma(_1202, cbSceneParam._m0[90u].y, _1201 * cbSceneParam._m0[90u].x));
    float _1230 = fma(_1203, cbSceneParam._m0[91u].z, fma(_1202, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1201));
    float _1245 = _548 * (-0.5);
    float _1246 = _549 * (-0.5);
    float _1247 = _550 * (-0.5);
    float _1248 = dot(vec4(_1245, _1246, _1247, 1.0), vec4(_1179, _1182, _1185, _1188));
    float _1251 = dot(vec4(_1245, _1246, _1247, 1.0), vec4(_1178, _1181, _1184, _1187));
    float _1254 = dot(vec4(_1245, _1246, _1247, 1.0), vec4(_1177, _1180, _1183, _1186));
    float _1288;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1261 = dot(vec4(_1245, _1246, _1247, 1.0), vec4(_902, _905, _908, _911));
        float _1265 = dot(vec4(_1245, _1246, _1247, 1.0), vec4(_903, _906, _909, _912));
        float _1269 = dot(vec4(_1245, _1246, _1247, 1.0), vec4(_904, _907, _910, _913));
        float _1276 = dot(vec4(cbModelParam._m0[39u]), vec4(_1245, _1246, _1247, 1.0));
        _1288 = dot(vec3(isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0)), isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0)), isnan(0.0) ? _1261 : (isnan(_1261) ? 0.0 : max(_1261, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1276) ? 0.0 : (isnan(0.0) ? _1276 : max(0.0, _1276))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1288 = 1.0;
    }
    float _1299;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1290 = dot(vec4(cbModelParam._m0[40u]), vec4(_1245, _1246, _1247, 1.0));
        _1299 = dot(vec3(isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0)), isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0)), isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1290) ? 0.0 : (isnan(0.0) ? _1290 : max(0.0, _1290))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1299 = 1.0;
    }
    float _1303 = (_1299 * cbModelParam._m0[1u].x) + (_1288 * (1.0 - cbModelParam._m0[1u].x));
    float _1312 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1394;
    float _1396;
    float _1398;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1361 = fma(_628, cbModelParam._m0[13u].z, fma(_624, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _620)) + cbModelParam._m0[13u].w;
        float _1365 = fma(_628, cbModelParam._m0[14u].z, fma(_624, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _620)) + cbModelParam._m0[14u].w;
        float _1369 = fma(_628, cbModelParam._m0[15u].z, fma(_624, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _620)) + cbModelParam._m0[15u].w;
        float _1372 = fma(_598, cbModelParam._m0[13u].z, fma(_597, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _596));
        float _1375 = fma(_598, cbModelParam._m0[14u].z, fma(_597, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _596));
        float _1378 = fma(_598, cbModelParam._m0[15u].z, fma(_597, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _596));
        float _1404;
        if (_1372 > 0.0)
        {
            _1404 = abs((1.0 - _1361) / _1372);
        }
        else
        {
            float frontier_phi_26_24_ladder;
            if (_1372 < 0.0)
            {
                frontier_phi_26_24_ladder = abs((_1361 + 1.0) / _1372);
            }
            else
            {
                frontier_phi_26_24_ladder = 5000.0;
            }
            _1404 = frontier_phi_26_24_ladder;
        }
        float _1727;
        if (_1375 > 0.0)
        {
            _1727 = abs((1.0 - _1365) / _1375);
        }
        else
        {
            float frontier_phi_35_31_ladder;
            if (_1375 < 0.0)
            {
                frontier_phi_35_31_ladder = abs((_1365 + 1.0) / _1375);
            }
            else
            {
                frontier_phi_35_31_ladder = 5000.0;
            }
            _1727 = frontier_phi_35_31_ladder;
        }
        float _2028;
        if (_1378 > 0.0)
        {
            _2028 = abs((1.0 - _1369) / _1378);
        }
        else
        {
            float frontier_phi_49_42_ladder;
            if (_1378 < 0.0)
            {
                frontier_phi_49_42_ladder = abs((_1369 + 1.0) / _1378);
            }
            else
            {
                frontier_phi_49_42_ladder = 5000.0;
            }
            _2028 = frontier_phi_49_42_ladder;
        }
        float _2030 = isnan(_1727) ? _1404 : (isnan(_1404) ? _1727 : min(_1404, _1727));
        float _2031 = isnan(_2028) ? _2030 : (isnan(_2030) ? _2028 : min(_2030, _2028));
        float _2035 = (_2031 * _1372) + _1361;
        float _2036 = (_2031 * _1375) + _1365;
        float _2037 = (_2031 * _1378) + _1369;
        float _2038 = _2031 * 9.9999997473787516355514526367188e-05;
        float _2039 = (-1.0) - _2038;
        float _2041 = _2038 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2037 > _2041) || ((_2037 < _2039) || ((_2036 > _2041) || ((_2036 < _2039) || ((_2035 < _2039) || (_2035 > _2041))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2160 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2037, cbModelParam._m0[9u].z, fma(_2036, cbModelParam._m0[9u].y, _2035 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2037, cbModelParam._m0[10u].z, fma(_2036, cbModelParam._m0[10u].y, _2035 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2037, cbModelParam._m0[11u].z, fma(_2036, cbModelParam._m0[11u].y, _2035 * cbModelParam._m0[11u].x))), _1312);
            frontier_phi_25_49_ladder = _2160.z * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_1 = _2160.y * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_2 = _2160.x * cbModelParam._m0[1u].y;
        }
        _1394 = frontier_phi_25_49_ladder_2;
        _1396 = frontier_phi_25_49_ladder_1;
        _1398 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1382 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_596, _597, _598), _1312);
        _1394 = _1382.x * cbModelParam._m0[1u].y;
        _1396 = _1382.y * cbModelParam._m0[1u].y;
        _1398 = _1382.z * cbModelParam._m0[1u].y;
    }
    float _1401 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1490;
    float _1492;
    float _1494;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1454 = fma(_628, cbModelParam._m0[21u].z, fma(_624, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _620)) + cbModelParam._m0[21u].w;
        float _1458 = fma(_628, cbModelParam._m0[22u].z, fma(_624, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _620)) + cbModelParam._m0[22u].w;
        float _1462 = fma(_628, cbModelParam._m0[23u].z, fma(_624, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _620)) + cbModelParam._m0[23u].w;
        float _1465 = fma(_598, cbModelParam._m0[21u].z, fma(_597, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _596));
        float _1468 = fma(_598, cbModelParam._m0[22u].z, fma(_597, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _596));
        float _1471 = fma(_598, cbModelParam._m0[23u].z, fma(_597, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _596));
        float _1732;
        if (_1465 > 0.0)
        {
            _1732 = abs((1.0 - _1454) / _1465);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1465 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1454 + 1.0) / _1465);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1732 = frontier_phi_37_33_ladder;
        }
        float _2054;
        if (_1468 > 0.0)
        {
            _2054 = abs((1.0 - _1458) / _1468);
        }
        else
        {
            float frontier_phi_51_44_ladder;
            if (_1468 < 0.0)
            {
                frontier_phi_51_44_ladder = abs((_1458 + 1.0) / _1468);
            }
            else
            {
                frontier_phi_51_44_ladder = 5000.0;
            }
            _2054 = frontier_phi_51_44_ladder;
        }
        float _2220;
        if (_1471 > 0.0)
        {
            _2220 = abs((1.0 - _1462) / _1471);
        }
        else
        {
            float frontier_phi_65_60_ladder;
            if (_1471 < 0.0)
            {
                frontier_phi_65_60_ladder = abs((_1462 + 1.0) / _1471);
            }
            else
            {
                frontier_phi_65_60_ladder = 5000.0;
            }
            _2220 = frontier_phi_65_60_ladder;
        }
        float _2222 = isnan(_2054) ? _1732 : (isnan(_1732) ? _2054 : min(_1732, _2054));
        float _2223 = isnan(_2220) ? _2222 : (isnan(_2222) ? _2220 : min(_2222, _2220));
        float _2227 = (_2223 * _1465) + _1454;
        float _2228 = (_2223 * _1468) + _1458;
        float _2229 = (_2223 * _1471) + _1462;
        float _2230 = _2223 * 9.9999997473787516355514526367188e-05;
        float _2231 = (-1.0) - _2230;
        float _2233 = _2230 + 1.0;
        float frontier_phi_34_65_ladder;
        float frontier_phi_34_65_ladder_1;
        float frontier_phi_34_65_ladder_2;
        if ((_2229 > _2233) || ((_2229 < _2231) || ((_2228 > _2233) || ((_2228 < _2231) || ((_2227 < _2231) || (_2227 > _2233))))))
        {
            frontier_phi_34_65_ladder = 0.0;
            frontier_phi_34_65_ladder_1 = 0.0;
            frontier_phi_34_65_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2412 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2229, cbModelParam._m0[17u].z, fma(_2228, cbModelParam._m0[17u].y, _2227 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2229, cbModelParam._m0[18u].z, fma(_2228, cbModelParam._m0[18u].y, _2227 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2229, cbModelParam._m0[19u].z, fma(_2228, cbModelParam._m0[19u].y, _2227 * cbModelParam._m0[19u].x))), _1401);
            frontier_phi_34_65_ladder = _2412.y * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_1 = _2412.x * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_2 = _2412.z * cbModelParam._m0[1u].z;
        }
        _1490 = frontier_phi_34_65_ladder_1;
        _1492 = frontier_phi_34_65_ladder;
        _1494 = frontier_phi_34_65_ladder_2;
    }
    else
    {
        vec4 _1474 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_596, _597, _598), _1401);
        _1490 = _1474.x * cbModelParam._m0[1u].z;
        _1492 = _1474.y * cbModelParam._m0[1u].z;
        _1494 = _1474.z * cbModelParam._m0[1u].z;
    }
    float _1506 = _595 * 0.01200000010430812835693359375;
    float _1508 = _1506 * ((cbModelParam._m0[1u].w * (_1490 - _1394)) + _1394);
    float _1509 = _1506 * ((cbModelParam._m0[1u].w * (_1492 - _1396)) + _1396);
    float _1510 = _1506 * ((cbModelParam._m0[1u].w * (_1494 - _1398)) + _1398);
    float _1513 = fma(_1510, cbSceneParam._m0[89u].z, fma(_1509, cbSceneParam._m0[89u].y, _1508 * cbSceneParam._m0[89u].x));
    float _1516 = fma(_1510, cbSceneParam._m0[90u].z, fma(_1509, cbSceneParam._m0[90u].y, _1508 * cbSceneParam._m0[90u].x));
    float _1519 = fma(_1510, cbSceneParam._m0[91u].z, fma(_1509, cbSceneParam._m0[91u].y, _1508 * cbSceneParam._m0[91u].x));
    vec4 _1527 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_556, _557));
    float _1529 = _1527.w;
    float _1542 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1529);
    float _1543 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1529);
    float _1544 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1529);
    uvec4 _1549 = floatBitsToUint(cbInstanceData._m0[_570 + 5u]);
    uint _1551 = _1549.x * 14u;
    uint _1552 = _1551 + 13u;
    float _1557 = _595 + (-1.0);
    float _1560 = (cbLight._m0[_1552].x * _1557) + 1.0;
    float _1561 = (cbLight._m0[_1552].y * _1557) + 1.0;
    uint _1562 = _1551 + 5u;
    float _1568 = isnan(1.0) ? _1561 : (isnan(_1561) ? 1.0 : min(_1561, 1.0));
    uint _1572 = _1551 + 4u;
    float _1582 = isnan(1.0) ? _1560 : (isnan(_1560) ? 1.0 : min(_1560, 1.0));
    uint _1586 = _1551 | 1u;
    float _1597 = dot(vec3(cbLight._m0[_1551].xyz), vec3(0.0));
    float _1600 = dot(vec3(cbLight._m0[_1586].xyz), vec3(0.0));
    float _3289 = isnan(0.0) ? _1597 : (isnan(_1597) ? 0.0 : max(_1597, 0.0));
    float _3300 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
    float _1605 = (isnan(1.0) ? _3289 : (isnan(_3289) ? 1.0 : min(_3289, 1.0))) * 0.3183098733425140380859375;
    float _1607 = (isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0))) * 0.3183098733425140380859375;
    float _1614 = ((cbLight._m0[_1562].x * _1568) * _1607) + (((cbLight._m0[_1572].x * _1542) * _1582) * _1605);
    float _1615 = ((_1568 * cbLight._m0[_1562].y) * _1607) + (((cbLight._m0[_1572].y * _1543) * _1582) * _1605);
    float _1616 = ((_1568 * cbLight._m0[_1562].z) * _1607) + (((cbLight._m0[_1572].z * _1544) * _1582) * _1605);
    uint _1617 = _1551 + 8u;
    float _1623 = cbLight._m0[_1551].x + _548;
    float _1624 = cbLight._m0[_1551].y + _549;
    float _1625 = cbLight._m0[_1551].z + _550;
    float _1629 = inversesqrt(dot(vec3(_1623, _1624, _1625), vec3(_1623, _1624, _1625)));
    float _1633 = dot(vec3(0.0), vec3(cbLight._m0[_1551].xyz));
    float _3311 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
    float _1636 = isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0));
    float _1637 = dot(vec3(0.0), vec3(_548, _549, _550));
    float _3322 = isnan(0.0) ? _1637 : (isnan(_1637) ? 0.0 : max(_1637, 0.0));
    float _1640 = isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0));
    float _1641 = dot(vec3(cbLight._m0[_1551].xyz), vec3(_1623 * _1629, _1624 * _1629, _1625 * _1629));
    float _3333 = isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0));
    float _1652 = (exp2(log2(1.0 - (isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1658 = (0.5 / ((_1636 + 9.9999999392252902907785028219223e-09) + _1640)) * _1636;
    float _3344 = isnan(0.0) ? _1658 : (isnan(_1658) ? 0.0 : max(_1658, 0.0));
    float _1660 = (isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0))) * 0.31831014156341552734375;
    uint _1674 = _1551 + 9u;
    float _1680 = cbLight._m0[_1586].x + _548;
    float _1681 = cbLight._m0[_1586].y + _549;
    float _1682 = cbLight._m0[_1586].z + _550;
    float _1686 = inversesqrt(dot(vec3(_1680, _1681, _1682), vec3(_1680, _1681, _1682)));
    float _1690 = dot(vec3(0.0), vec3(cbLight._m0[_1586].xyz));
    float _3355 = isnan(0.0) ? _1690 : (isnan(_1690) ? 0.0 : max(_1690, 0.0));
    float _1693 = isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0));
    float _1694 = dot(vec3(cbLight._m0[_1586].xyz), vec3(_1680 * _1686, _1681 * _1686, _1682 * _1686));
    float _3366 = isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0));
    float _1703 = (exp2(log2(1.0 - (isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1707 = (0.5 / ((_1693 + 9.9999999392252902907785028219223e-09) + _1640)) * _1693;
    float _3377 = isnan(0.0) ? _1707 : (isnan(_1707) ? 0.0 : max(_1707, 0.0));
    float _1709 = (isnan(1.0) ? _3377 : (isnan(_3377) ? 1.0 : min(_3377, 1.0))) * 0.31831014156341552734375;
    float _1719 = (((_1703 * cbLight._m0[_1674].x) * _1709) * _1568) + ((((cbLight._m0[_1617].x * _1542) * _1652) * _1660) * _1582);
    float _1720 = (((_1703 * cbLight._m0[_1674].y) * _1709) * _1568) + ((((cbLight._m0[_1617].y * _1543) * _1652) * _1660) * _1582);
    float _1721 = (((_1703 * cbLight._m0[_1674].z) * _1709) * _1568) + ((((cbLight._m0[_1617].z * _1544) * _1652) * _1660) * _1582);
    float _1837;
    float _1839;
    float _1841;
    float _1843;
    float _1845;
    float _1847;
    if (_1549.y == 0u)
    {
        float _1777 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1778 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1777;
        float _1779 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1777;
        float _1780 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1777;
        uvec4 _1792 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1793 = _1792.x;
        uint _1804 = uint((float(_1792.y) * floor(float(uint(cbSceneParam._m0[85u].y * _557) / _1793))) + floor(float(uint(cbSceneParam._m0[85u].x * _556) / _1793)));
        float _1814 = (log2(_1780 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1815 = isnan(0.0) ? _1814 : (isnan(_1814) ? 0.0 : max(_1814, 0.0));
        uint _1818 = uint(isnan(14.0) ? _1815 : (isnan(_1815) ? 14.0 : min(_1815, 14.0)));
        uvec4 _1823 = texelFetch(g_lightClusterGridBuffer, int(((_1818 << 2u) + (_1804 << 6u)) >> 2u));
        uint _1824 = _1823.x;
        uint _1825 = _1792.z;
        float _1915;
        float _1917;
        float _1919;
        float _1921;
        float _1923;
        float _1925;
        if (((((1u << ((_1825 >> 4u) & 15u)) + 4294967295u) & _1824) == 0u) || ((_1825 & 240u) == 0u))
        {
            _1915 = 0.0;
            _1917 = 0.0;
            _1919 = 0.0;
            _1921 = 0.0;
            _1923 = 0.0;
            _1925 = 0.0;
        }
        else
        {
            float _1916;
            float _1918;
            float _1920;
            float _1922;
            float _1924;
            float _1926;
            float _2088 = 0.0;
            float _2089 = 0.0;
            float _2090 = 0.0;
            float _2091 = 0.0;
            float _2092 = 0.0;
            float _2093 = 0.0;
            uint _2094 = 0u;
            uint _2103;
            bool _2104;
            for (;;)
            {
                _2103 = texelFetch(g_lightClassification, int((((_1818 << 5u) + (_1804 << 9u)) + (_2094 << 2u)) >> 2u)).x;
                _2104 = _2103 == 0u;
                float frontier_phi_62_pred;
                float frontier_phi_62_pred_1;
                float frontier_phi_62_pred_2;
                float frontier_phi_62_pred_3;
                float frontier_phi_62_pred_4;
                float frontier_phi_62_pred_5;
                if (_2104)
                {
                    frontier_phi_62_pred = _2089;
                    frontier_phi_62_pred_1 = _2088;
                    frontier_phi_62_pred_2 = _2090;
                    frontier_phi_62_pred_3 = _2093;
                    frontier_phi_62_pred_4 = _2092;
                    frontier_phi_62_pred_5 = _2091;
                }
                else
                {
                    float _2263;
                    float _2264;
                    float _2265;
                    float _2266;
                    float _2267;
                    float _2268;
                    uint _2269;
                    _2263 = _2088;
                    _2264 = _2089;
                    _2265 = _2090;
                    _2266 = _2091;
                    _2267 = _2092;
                    _2268 = _2093;
                    _2269 = _2103;
                    float _2169;
                    float _2170;
                    float _2171;
                    float _2172;
                    float _2173;
                    float _2174;
                    for (;;)
                    {
                        uint _2273 = uint(findLSB(_2269)) + (_2094 << 5u);
                        uint _2270 = (_2269 + 4294967295u) & _2269;
                        uint _2275 = _2273 * 48u;
                        vec4 _2289 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2275)).x, texelFetch(g_PointLightRenderingBuffer, int(_2275 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2275 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2275 + 3u)).x));
                        uint _2295 = (_2273 * 48u) + 4u;
                        vec4 _2308 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2295)).x, texelFetch(g_PointLightRenderingBuffer, int(_2295 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2295 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2295 + 3u)).x));
                        uint _2314 = (_2273 * 48u) + 8u;
                        vec3 _2325 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2314)).x, texelFetch(g_PointLightRenderingBuffer, int(_2314 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2314 + 2u)).x));
                        float _2329 = _2289.x - _1778;
                        float _2330 = _2289.y - _1779;
                        float _2331 = _2289.z - _1780;
                        float _2332 = dot(vec3(_2329, _2330, _2331), vec3(_2329, _2330, _2331));
                        float _2335 = inversesqrt(_2332);
                        float _2344 = 1.0 - (_2332 * _2289.w);
                        float _3398 = isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0));
                        float _2345 = isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0));
                        float _2346 = sqrt(_2332) * _2308.w;
                        float _2349 = 1.39999997615814208984375 / (_2346 + 1.39999997615814208984375);
                        float _2350 = _2349 * _2349;
                        float _2353 = ((1.0 - _2350) * dot(vec3(0.0), vec3(_2335 * _2329, _2335 * _2330, _2335 * _2331))) + _2350;
                        float _2356 = _2346 * _2346;
                        float _2360 = ((isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0))) * _2345) / ((_2356 * 0.699999988079071044921875) + 1.0);
                        float _2364 = (-0.0) - _1778;
                        float _2365 = (-0.0) - _1779;
                        float _2366 = (-0.0) - _1780;
                        float _2370 = inversesqrt(dot(vec3(_2364, _2365, _2366), vec3(_2364, _2365, _2366)));
                        float _2374 = dot(vec3(0.0), vec3(_2370 * _2364, _2370 * _2365, _2370 * _2366));
                        float _3414 = isnan(0.0) ? _2374 : (isnan(_2374) ? 0.0 : max(_2374, 0.0));
                        float _3425 = isnan(0.0) ? _2353 : (isnan(_2353) ? 0.0 : max(_2353, 0.0));
                        float _2378 = isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0));
                        float _2382 = (0.5 / (((isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0))) + 9.9999999392252902907785028219223e-09) + _2378)) * _2378;
                        float _3436 = isnan(0.0) ? _2382 : (isnan(_2382) ? 0.0 : max(_2382, 0.0));
                        float _2391 = (((isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0))) * 3.1415927410125732421875) / ((_2356 * 2.1991131305694580078125) + 3.141590118408203125)) * _2345;
                        _2172 = (_2360 * _2308.x) + _2266;
                        _2173 = (_2360 * _2308.y) + _2267;
                        _2174 = (_2360 * _2308.z) + _2268;
                        _2169 = (_2391 * _2325.x) + _2263;
                        _2170 = (_2391 * _2325.y) + _2264;
                        _2171 = (_2391 * _2325.z) + _2265;
                        if (_2270 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2263 = _2169;
                            _2264 = _2170;
                            _2265 = _2171;
                            _2266 = _2172;
                            _2267 = _2173;
                            _2268 = _2174;
                            _2269 = _2270;
                        }
                    }
                    frontier_phi_62_pred = _2170;
                    frontier_phi_62_pred_1 = _2169;
                    frontier_phi_62_pred_2 = _2171;
                    frontier_phi_62_pred_3 = _2174;
                    frontier_phi_62_pred_4 = _2173;
                    frontier_phi_62_pred_5 = _2172;
                }
                _1918 = frontier_phi_62_pred;
                _1916 = frontier_phi_62_pred_1;
                _1920 = frontier_phi_62_pred_2;
                _1926 = frontier_phi_62_pred_3;
                _1924 = frontier_phi_62_pred_4;
                _1922 = frontier_phi_62_pred_5;
                uint _2095 = _2094 + 1u;
                if (_2095 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2088 = _1916;
                    _2089 = _1918;
                    _2090 = _1920;
                    _2091 = _1922;
                    _2092 = _1924;
                    _2093 = _1926;
                    _2094 = _2095;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1915 = _1916;
            _1917 = _1918;
            _1919 = _1920;
            _1921 = _1922;
            _1923 = _1924;
            _1925 = _1926;
        }
        uvec4 _1929 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1930 = _1929.z;
        uint _1932 = (_1930 >> 8u) & 15u;
        float _2059;
        float _2061;
        float _2063;
        float _2065;
        float _2067;
        float _2069;
        if (((4294967295u << _1932) & _1824) == 0u)
        {
            _2059 = _1915;
            _2061 = _1917;
            _2063 = _1919;
            _2065 = _1921;
            _2067 = _1923;
            _2069 = _1925;
        }
        else
        {
            float _2084 = inversesqrt(dot(vec3(_1778, _1779, _1780), vec3(_1778, _1779, _1780)));
            float frontier_phi_53_54_ladder;
            float frontier_phi_53_54_ladder_1;
            float frontier_phi_53_54_ladder_2;
            float frontier_phi_53_54_ladder_3;
            float frontier_phi_53_54_ladder_4;
            float frontier_phi_53_54_ladder_5;
            if (_1932 < ((_1930 >> 12u) & 15u))
            {
                float _2060;
                float _2062;
                float _2064;
                float _2066;
                float _2068;
                float _2070;
                float _2246 = _1915;
                float _2247 = _1917;
                float _2248 = _1919;
                float _2249 = _1921;
                float _2250 = _1923;
                float _2251 = _1925;
                uint _2252 = _1932;
                uint _2261;
                bool _2262;
                for (;;)
                {
                    _2261 = texelFetch(g_lightClassification, int((((_1818 << 5u) + (_1804 << 9u)) + (_2252 << 2u)) >> 2u)).x;
                    _2262 = _2261 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    float frontier_phi_71_pred_3;
                    float frontier_phi_71_pred_4;
                    float frontier_phi_71_pred_5;
                    if (_2262)
                    {
                        frontier_phi_71_pred = _2247;
                        frontier_phi_71_pred_1 = _2246;
                        frontier_phi_71_pred_2 = _2251;
                        frontier_phi_71_pred_3 = _2250;
                        frontier_phi_71_pred_4 = _2249;
                        frontier_phi_71_pred_5 = _2248;
                    }
                    else
                    {
                        float _2417;
                        float _2418;
                        float _2419;
                        float _2420;
                        float _2421;
                        float _2422;
                        float _2668;
                        float _2669;
                        float _2670;
                        float _2671;
                        float _2672;
                        float _2673;
                        float _2430 = _2246;
                        float _2431 = _2247;
                        float _2432 = _2248;
                        float _2433 = _2249;
                        float _2434 = _2250;
                        float _2435 = _2251;
                        uint _2436 = _2261;
                        uint _2437;
                        vec4 _2462;
                        float _2463;
                        vec4 _2478;
                        vec3 _2490;
                        vec4 _2506;
                        vec4 _2522;
                        float _2568;
                        bool _2569;
                        for (;;)
                        {
                            uint _2447 = ((_2252 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2436));
                            _2437 = (_2436 + 4294967295u) & _2436;
                            uint _2449 = _2447 * 40u;
                            _2462 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2449)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2449 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2449 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2449 + 3u)).x));
                            _2463 = _2462.w;
                            uint _2465 = (_2447 * 40u) + 4u;
                            _2478 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2465)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2465 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2465 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2465 + 3u)).x));
                            uint _2480 = (_2447 * 40u) + 8u;
                            _2490 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2480)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2480 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2480 + 2u)).x));
                            uint _2493 = (_2447 * 40u) + 16u;
                            _2506 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2493)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2493 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2493 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2493 + 3u)).x));
                            uint _2509 = (_2447 * 40u) + 20u;
                            _2522 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2509)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2509 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2509 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2509 + 3u)).x));
                            uint _2524 = (_2447 * 40u) + 24u;
                            vec4 _2537 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2524)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2524 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2524 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2524 + 3u)).x));
                            uint _2543 = (_2447 * 40u) + 28u;
                            vec4 _2556 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2543)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2543 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2543 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2543 + 3u)).x));
                            _2568 = fma(_1780, _2556.z, fma(_1779, _2556.y, _2556.x * _1778)) + _2556.w;
                            _2569 = !((fma(_1780, _2537.z, fma(_1779, _2537.y, _2537.x * _1778)) + _2537.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            float frontier_phi_77_pred_3;
                            float frontier_phi_77_pred_4;
                            float frontier_phi_77_pred_5;
                            if (_2569)
                            {
                                float _2596 = _2462.x - _1778;
                                float _2597 = _2462.y - _1779;
                                float _2598 = _2462.z - _1780;
                                float _2599 = dot(vec3(_2596, _2597, _2598), vec3(_2596, _2597, _2598));
                                float _2602 = inversesqrt(_2599);
                                float _2603 = _2602 * _2596;
                                float _2604 = _2602 * _2597;
                                float _2605 = _2602 * _2598;
                                float _2609 = 1.0 - (_2599 / (_2463 * _2463));
                                float _3447 = isnan(0.0) ? _2609 : (isnan(_2609) ? 0.0 : max(_2609, 0.0));
                                float _2610 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
                                float _2614 = sqrt(_2599) * _2478.w;
                                float _2616 = 1.39999997615814208984375 / (_2614 + 1.39999997615814208984375);
                                float _2617 = _2616 * _2616;
                                float _2618 = 1.0 - _2617;
                                float _2620 = (_2618 * dot(vec3(_2603, _2604, _2605), vec3(0.0))) + _2617;
                                float _2623 = _2614 * _2614;
                                float _2627 = (fma(_1780, _2506.z, fma(_1779, _2506.y, _2506.x * _1778)) + _2506.w) / _2568;
                                float _2628 = (fma(_1780, _2522.z, fma(_1779, _2522.y, _2522.x * _1778)) + _2522.w) / _2568;
                                float _2632 = 1.0 - dot(vec2(_2627, _2628), vec2(_2627, _2628));
                                float _3463 = isnan(0.0) ? _2632 : (isnan(_2632) ? 0.0 : max(_2632, 0.0));
                                float _2633 = isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0));
                                float _2634 = _2633 * (((isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0))) * _2610) / ((_2623 * 0.699999988079071044921875) + 1.0));
                                float _2644 = dot(vec3(0.0), vec3((-0.0) - (_1778 * _2084), (-0.0) - (_1779 * _2084), (-0.0) - (_1780 * _2084)));
                                float _3474 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
                                float _2652 = (_2618 * dot(vec3(0.0), vec3(_2603, _2604, _2605))) + _2617;
                                float _3485 = isnan(0.0) ? _2652 : (isnan(_2652) ? 0.0 : max(_2652, 0.0));
                                float _2653 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
                                float _2657 = (0.5 / (((isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0))) + 9.9999999392252902907785028219223e-09) + _2653)) * _2653;
                                float _3496 = isnan(0.0) ? _2657 : (isnan(_2657) ? 0.0 : max(_2657, 0.0));
                                float _2664 = (_2633 * _2610) * (((isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0))) * 3.1415927410125732421875) / ((_2623 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_77_pred = _2664 * _2490.y;
                                frontier_phi_77_pred_1 = _2664 * _2490.x;
                                frontier_phi_77_pred_2 = _2634 * _2478.z;
                                frontier_phi_77_pred_3 = _2634 * _2478.y;
                                frontier_phi_77_pred_4 = _2634 * _2478.x;
                                frontier_phi_77_pred_5 = _2664 * _2490.z;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                                frontier_phi_77_pred_3 = 0.0;
                                frontier_phi_77_pred_4 = 0.0;
                                frontier_phi_77_pred_5 = 0.0;
                            }
                            _2669 = frontier_phi_77_pred;
                            _2668 = frontier_phi_77_pred_1;
                            _2673 = frontier_phi_77_pred_2;
                            _2672 = frontier_phi_77_pred_3;
                            _2671 = frontier_phi_77_pred_4;
                            _2670 = frontier_phi_77_pred_5;
                            _2420 = _2671 + _2433;
                            _2421 = _2672 + _2434;
                            _2422 = _2673 + _2435;
                            _2417 = _2668 + _2430;
                            _2418 = _2669 + _2431;
                            _2419 = _2670 + _2432;
                            if (_2437 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2430 = _2417;
                                _2431 = _2418;
                                _2432 = _2419;
                                _2433 = _2420;
                                _2434 = _2421;
                                _2435 = _2422;
                                _2436 = _2437;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _2418;
                        frontier_phi_71_pred_1 = _2417;
                        frontier_phi_71_pred_2 = _2422;
                        frontier_phi_71_pred_3 = _2421;
                        frontier_phi_71_pred_4 = _2420;
                        frontier_phi_71_pred_5 = _2419;
                    }
                    _2062 = frontier_phi_71_pred;
                    _2060 = frontier_phi_71_pred_1;
                    _2070 = frontier_phi_71_pred_2;
                    _2068 = frontier_phi_71_pred_3;
                    _2066 = frontier_phi_71_pred_4;
                    _2064 = frontier_phi_71_pred_5;
                    uint _2253 = _2252 + 1u;
                    if (_2253 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2246 = _2060;
                        _2247 = _2062;
                        _2248 = _2064;
                        _2249 = _2066;
                        _2250 = _2068;
                        _2251 = _2070;
                        _2252 = _2253;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_53_54_ladder = _2070;
                frontier_phi_53_54_ladder_1 = _2066;
                frontier_phi_53_54_ladder_2 = _2064;
                frontier_phi_53_54_ladder_3 = _2062;
                frontier_phi_53_54_ladder_4 = _2060;
                frontier_phi_53_54_ladder_5 = _2068;
            }
            else
            {
                frontier_phi_53_54_ladder = _1925;
                frontier_phi_53_54_ladder_1 = _1921;
                frontier_phi_53_54_ladder_2 = _1919;
                frontier_phi_53_54_ladder_3 = _1917;
                frontier_phi_53_54_ladder_4 = _1915;
                frontier_phi_53_54_ladder_5 = _1923;
            }
            _2059 = frontier_phi_53_54_ladder_4;
            _2061 = frontier_phi_53_54_ladder_3;
            _2063 = frontier_phi_53_54_ladder_2;
            _2065 = frontier_phi_53_54_ladder_1;
            _2067 = frontier_phi_53_54_ladder_5;
            _2069 = frontier_phi_53_54_ladder;
        }
        float _2074 = isnan(1.0) ? _595 : (isnan(_595) ? 1.0 : min(_595, 1.0));
        _1837 = (_2074 * _2065) + _1614;
        _1839 = (_2074 * _2067) + _1615;
        _1841 = (_2074 * _2069) + _1616;
        _1843 = ((_2059 * 0.039999999105930328369140625) * _2074) + _1719;
        _1845 = ((_2061 * 0.039999999105930328369140625) * _2074) + _1720;
        _1847 = ((_2063 * 0.039999999105930328369140625) * _2074) + _1721;
    }
    else
    {
        _1837 = _1614;
        _1839 = _1615;
        _1841 = _1616;
        _1843 = _1719;
        _1845 = _1720;
        _1847 = _1721;
    }
    float _3512 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _3523 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _3534 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _1864 = ((isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0))) * (_1837 + ((isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0))) * _595))) + ((_1843 + ((isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0))) * _1303)) * cbPerFrame._m0[3u].x);
    float _1865 = ((isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0))) * (_1839 + ((isnan(0.0) ? _1227 : (isnan(_1227) ? 0.0 : max(_1227, 0.0))) * _595))) + ((_1845 + ((isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0))) * _1303)) * cbPerFrame._m0[3u].x);
    float _1866 = ((isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0))) * (_1841 + ((isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0))) * _595))) + ((_1847 + ((isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))) * _1303)) * cbPerFrame._m0[3u].x);
    uint _1870 = _570 + 6u;
    float _1878 = _556 / cbSceneParam._m0[86u].x;
    float _1879 = _557 / cbSceneParam._m0[86u].y;
    vec4 _1893 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1878, _1879, (log2((isnan(cbSceneParam._m0[77u].w) ? _543 : (isnan(_543) ? cbSceneParam._m0[77u].w : min(_543, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1895 = _1893.x;
    float _1896 = _1893.y;
    float _1897 = _1893.z;
    float _1898 = _1893.w;
    float _1978;
    float _1980;
    float _1982;
    float _1984;
    if (_543 > cbSceneParam._m0[78u].w)
    {
        float _1940 = isnan(_543) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _543 : min(cbSceneParam._m0[80u].w, _543));
        float _1941 = _1940 / _543;
        float _1952 = _1941 * _266;
        float _1953 = _267 * _1941;
        float _1954 = (-0.0) - _1953;
        float _1955 = _1941 * _268;
        float _1957 = (cbSceneParam._m0[77u].w * _1954) / _1940;
        float _1958 = _1957 + cbSceneParam._m0[79u].w;
        float _1959 = cbSceneParam._m0[79u].w - _1953;
        float _1965 = sqrt(((_1952 * _1952) + (_1953 * _1953)) + (_1955 * _1955));
        float _1968 = (1.0 - (cbSceneParam._m0[77u].w / _1940)) * _1965;
        float _1974 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1976 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2182;
        if (abs((_1954 - _1957) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2182 = ((((_1958 > 0.0) ? exp2(_1974 * _1958) : (2.0 - exp2(_1976 * _1958))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1968;
        }
        else
        {
            float _2117 = 1.0 / cbSceneParam._m0[80u].x;
            float _2118 = isnan(_1959) ? _1958 : (isnan(_1958) ? _1959 : max(_1958, _1959));
            float _2119 = isnan(_1959) ? _1958 : (isnan(_1958) ? _1959 : min(_1958, _1959));
            float _2128 = isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : min(_2118, 0.0));
            float _2129 = isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : min(_2119, 0.0));
            _2182 = ((abs(_1965 / _1954) * cbSceneParam._m0[80u].y) * ((((_2128 - _2129) * 2.0) - ((exp2(_1974 * (isnan(0.0) ? _2118 : (isnan(_2118) ? 0.0 : max(_2118, 0.0)))) - exp2(_1974 * (isnan(0.0) ? _2119 : (isnan(_2119) ? 0.0 : max(_2119, 0.0))))) * _2117)) - ((exp2(_1976 * _2128) - exp2(_1976 * _2129)) * _2117))) + (_1968 * cbSceneParam._m0[80u].z);
        }
        vec4 _2184 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1878, _1879, 1.0), 0.0);
        float _2193 = exp2((_2182 * (-1.44269502162933349609375)) * (1.0 - _2184.w));
        float _2194 = log2(_2193);
        float _2210 = log2(_1898);
        _1978 = (exp2(_2210 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2194 * cbSceneParam._m0[78u].x)) * _2184.x) / cbSceneParam._m0[78u].x)) + _1895;
        _1980 = (exp2(_2210 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2194 * cbSceneParam._m0[78u].y)) * _2184.y) / cbSceneParam._m0[78u].y)) + _1896;
        _1982 = (exp2(_2210 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2194 * cbSceneParam._m0[78u].z)) * _2184.z) / cbSceneParam._m0[78u].z)) + _1897;
        _1984 = _2193 * _1898;
    }
    else
    {
        _1978 = _1895;
        _1980 = _1896;
        _1982 = _1897;
        _1984 = _1898;
    }
    float _1996 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1997 = _1996 == 3.0;
    float _1998 = log2(_1984);
    float _2005 = exp2(_1998 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0)));
    float _2006 = exp2(_1998 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _1865 : (isnan(_1865) ? 0.0 : max(_1865, 0.0)));
    float _2007 = exp2(_1998 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0)));
    float _2016 = (_1996 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2016 * (_1997 ? _2005 : (_2005 + (cbSceneParam._m0[72u].w * _1978)));
    SV_Target.y = _2016 * (_1997 ? _2006 : (_2006 + (cbSceneParam._m0[72u].w * _1980)));
    SV_Target.z = _2016 * (_1997 ? _2007 : (_2007 + (cbSceneParam._m0[72u].w * _1982)));
    SV_Target.w = cbInstanceData._m0[_1870].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1870].w;
}


