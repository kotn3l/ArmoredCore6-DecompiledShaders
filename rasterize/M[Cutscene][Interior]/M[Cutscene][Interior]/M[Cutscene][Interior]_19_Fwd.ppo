#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_12;
layout(set = 0, binding = 3) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _451;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _201 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _202 = _201 * _194;
    float _203 = _201 * _195;
    float _204 = _201 * _196;
    float _208 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _209 = _208 * NORMAL.x;
    float _210 = _208 * NORMAL.y;
    float _211 = _208 * NORMAL.z;
    float _215 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _216 = _215 * TANGENT.x;
    float _217 = _215 * TANGENT.y;
    float _218 = _215 * TANGENT.z;
    float _263 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _273 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _263);
    float _274 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _263);
    float _275 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _263);
    vec4 _288 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _291 = _288.x;
    vec4 _309 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _326 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _291) + cbMtdParam._m0[12u].x) * _309.x;
    float _328 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _291) + cbMtdParam._m0[12u].y) * _309.y;
    float _330 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _291) + cbMtdParam._m0[12u].z) * _309.z;
    vec4 _364 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _379 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _386 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _398 = cbMtdParam._m0[24u].w + _273;
    float _399 = cbMtdParam._m0[25u].x + _274;
    float _400 = cbMtdParam._m0[25u].y + _275;
    float _414 = (-0.0) - dot(vec3(_398, _399, _400), vec3(_379 * _202, _379 * _203, _379 * _204));
    float _415 = (-0.0) - dot(vec3(_398, _399, _400), vec3(_386 * _216, _386 * _217, _386 * _218));
    float _416 = (-0.0) - dot(vec3(_398, _399, _400), vec3((-0.0) - _209, (-0.0) - _210, (-0.0) - _211));
    float _420 = inversesqrt(dot(vec3(_414, _415, _416), vec3(_414, _415, _416)));
    float _421 = _420 * _416;
    float _426 = ((cbMtdParam._m0[21u].z * _414) * _420) + (((_364.x * 2.0) + (-1.0)) * cbMtdParam._m0[22u].x);
    float _427 = ((cbMtdParam._m0[21u].w * _415) * _420) + (((_364.y * 2.0) + (-1.0)) * cbMtdParam._m0[22u].y);
    float _430 = fract(cbMtdParam._m0[21u].z * TEXCOORD.x);
    float _431 = fract(cbMtdParam._m0[21u].w * TEXCOORD.y);
    float _449;
    float _452;
    float _454;
    if (_426 > 0.0)
    {
        float _435 = (1.0 - _430) / _426;
        _449 = _435;
        _452 = ((cbMtdParam._m0[18u].w + 1.0) - fract(_435 * _421)) * 0.16666667163372039794921875;
        _454 = (fract((_435 * _427) + _431) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_426 < 0.0)
        {
            float _450 = ((-0.0) - _430) / _426;
            frontier_phi_3_2_ladder = (fract((_450 * _427) + _431) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_1 = _450;
            frontier_phi_3_2_ladder_2 = (fract(_450 * _421) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _451;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _449 = frontier_phi_3_2_ladder_1;
        _452 = frontier_phi_3_2_ladder_2;
        _454 = frontier_phi_3_2_ladder;
    }
    float _480;
    float _482;
    float _484;
    if (_427 > 0.0)
    {
        float _467 = (1.0 - _431) / _427;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_467 < _449)
        {
            frontier_phi_8_5_ladder = (fract((_467 * _426) + _430) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_1 = _467;
            frontier_phi_8_5_ladder_2 = (fract(_467 * _421) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
        }
        else
        {
            frontier_phi_8_5_ladder = _452;
            frontier_phi_8_5_ladder_1 = _449;
            frontier_phi_8_5_ladder_2 = _454;
        }
        _480 = frontier_phi_8_5_ladder_1;
        _482 = frontier_phi_8_5_ladder;
        _484 = frontier_phi_8_5_ladder_2;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_427 < 0.0)
        {
            float _481 = ((-0.0) - _431) / _427;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_481 < _449)
            {
                frontier_phi_8_6_ladder_9_ladder = (fract((_481 * _426) + _430) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = _481;
                frontier_phi_8_6_ladder_9_ladder_2 = fract(_481 * _421) * 0.16666667163372039794921875;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _452;
                frontier_phi_8_6_ladder_9_ladder_1 = _449;
                frontier_phi_8_6_ladder_9_ladder_2 = _454;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _452;
            frontier_phi_8_6_ladder_1 = _449;
            frontier_phi_8_6_ladder_2 = _454;
        }
        _480 = frontier_phi_8_6_ladder_1;
        _482 = frontier_phi_8_6_ladder;
        _484 = frontier_phi_8_6_ladder_2;
    }
    float _488 = (_421 > 0.0) ? (cbMtdParam._m0[18u].z / _421) : 5000.0;
    float _501;
    float _502;
    if (_488 < _480)
    {
        _501 = ((_430 + cbMtdParam._m0[18u].w) + (_488 * _426)) * 0.16666667163372039794921875;
        _502 = (((_488 * _427) + _431) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _501 = _482;
        _502 = _484;
    }
    vec4 _504 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_501, _502));
    float _3187 = isnan(0.0) ? cbMtdParam._m0[17u].z : (isnan(cbMtdParam._m0[17u].z) ? 0.0 : max(cbMtdParam._m0[17u].z, 0.0));
    float _518 = isnan(1.0) ? _3187 : (isnan(_3187) ? 1.0 : min(_3187, 1.0));
    float _3198 = isnan(0.0) ? cbMtdParam._m0[17u].y : (isnan(cbMtdParam._m0[17u].y) ? 0.0 : max(cbMtdParam._m0[17u].y, 0.0));
    float _561 = ((_518 - ((1.0 - (isnan(1.0) ? _3198 : (isnan(_3198) ? 1.0 : min(_3198, 1.0)))) * (_518 + 1.0))) + (((cbMtdParam._m0[18u].y * texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[3u].w)).x) + (cbMtdParam._m0[17u].x * texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w)).x)) / cbMtdParam._m0[17u].w)) / _518;
    float _3209 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _562 = isnan(1.0) ? _3209 : (isnan(_3209) ? 1.0 : min(_3209, 1.0));
    float _564 = 3.0 - (_562 * 2.0);
    float _569 = _562 * _562;
    float _585 = _291 * 0.1500000059604644775390625;
    float _593 = (_585 * (((_291 * _504.x) * (((_569 * (cbMtdParam._m0[15u].x - cbMtdParam._m0[13u].x)) * _564) + cbMtdParam._m0[13u].x)) - _326)) + _326;
    float _594 = (_585 * (((_291 * _504.y) * (((_569 * (cbMtdParam._m0[15u].y - cbMtdParam._m0[13u].y)) * _564) + cbMtdParam._m0[13u].y)) - _328)) + _328;
    float _595 = (_585 * (((_291 * _504.z) * (((_569 * (cbMtdParam._m0[15u].z - cbMtdParam._m0[13u].z)) * _564) + cbMtdParam._m0[13u].z)) - _330)) + _330;
    vec4 _608 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _612 = _608.z;
    float _615 = (_608.x * 2.0) + (-1.0);
    float _616 = (_608.y * 2.0) + (-1.0);
    float _617 = dot(vec2(_615, _616), vec2(_615, _616));
    float _3220 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _622 = sqrt(1.0 - (isnan(1.0) ? _3220 : (isnan(_3220) ? 1.0 : min(_3220, 1.0))));
    float _625 = fma(_622, _209, fma(_616, _216, _615 * _202));
    float _628 = fma(_622, _210, fma(_616, _217, _615 * _203));
    float _631 = fma(_622, _211, fma(_616, _218, _615 * _204));
    float _635 = inversesqrt(dot(vec3(_625, _628, _631), vec3(_625, _628, _631)));
    float _636 = _635 * _625;
    float _637 = _635 * _628;
    float _638 = _635 * _631;
    float _3231 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _639 = isnan(1.0) ? _3231 : (isnan(_3231) ? 1.0 : min(_3231, 1.0));
    float _3242 = isnan(0.0) ? _593 : (isnan(_593) ? 0.0 : max(_593, 0.0));
    float _3253 = isnan(0.0) ? _594 : (isnan(_594) ? 0.0 : max(_594, 0.0));
    float _3264 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _658 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _662 = inversesqrt(dot(vec3(_273, _274, _275), vec3(_273, _274, _275)));
    float _663 = _273 * _662;
    float _664 = _274 * _662;
    float _665 = _275 * _662;
    float _671 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _672 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _692 = fma(_638, cbSceneParam._m0[5u].z, fma(_637, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _636));
    float _695 = fma(_638, cbSceneParam._m0[6u].z, fma(_637, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _636));
    float _698 = fma(_638, cbSceneParam._m0[7u].z, fma(_637, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _636));
    uint _711 = uint(roundEven(NORMAL.w)) * 13u;
    uint _713 = (_711 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _719 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3242 : (isnan(_3242) ? 1.0 : min(_3242, 1.0)))) * cbInstanceData._m0[_713].x;
    float _720 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3253 : (isnan(_3253) ? 1.0 : min(_3253, 1.0)))) * cbInstanceData._m0[_713].y;
    float _721 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3264 : (isnan(_3264) ? 1.0 : min(_3264, 1.0)))) * cbInstanceData._m0[_713].z;
    float _3275 = isnan(0.0) ? _719 : (isnan(_719) ? 0.0 : max(_719, 0.0));
    float _722 = isnan(1.0) ? _3275 : (isnan(_3275) ? 1.0 : min(_3275, 1.0));
    float _3286 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _723 = isnan(1.0) ? _3286 : (isnan(_3286) ? 1.0 : min(_3286, 1.0));
    float _3297 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _724 = isnan(1.0) ? _3297 : (isnan(_3297) ? 1.0 : min(_3297, 1.0));
    vec4 _733 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _671, cbSceneParam._m0[86u].y * _672));
    float _736 = _733.x * TEXCOORD_4.z;
    float _737 = dot(vec3(_636, _637, _638), vec3(_663, _664, _665));
    float _740 = _737 * 2.0;
    float _744 = (_740 * _636) - _663;
    float _745 = (_740 * _637) - _664;
    float _746 = (_740 * _638) - _665;
    float _750 = abs(dot(vec3(_663, _664, _665), vec3(_636, _637, _638)));
    float _3308 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _752 = sqrt(_639);
    float _764 = exp2((_752 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3308 : (isnan(_3308) ? 1.0 : min(_3308, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_752 * 3.0));
    float _796 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _800 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _804 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _837 = fma(_804, cbModelParam._m0[26u].z, fma(_800, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _796));
        float _841 = fma(_804, cbModelParam._m0[27u].z, fma(_800, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _796));
        float _845 = fma(_804, cbModelParam._m0[28u].z, fma(_800, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _796));
        float _869 = _796 + _636;
        float _870 = _800 + _637;
        float _871 = _804 + _638;
        float _881 = fma(_871, cbModelParam._m0[26u].z, fma(_870, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _869)) - _837;
        float _882 = fma(_871, cbModelParam._m0[27u].z, fma(_870, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _869)) - _841;
        float _883 = fma(_871, cbModelParam._m0[28u].z, fma(_870, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _869)) - _845;
        float _887 = inversesqrt(dot(vec3(_881, _882, _883), vec3(_881, _882, _883)));
        float _900 = ((_887 * _881) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_837 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _901 = ((_887 * _882) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_841 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _902 = ((_887 * _883) / cbModelParam._m0[34u].z) + ((((((_845 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _905 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_900, _901, _902), 0.0);
        vec4 _912 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_900, _901, _902), 0.0);
        vec4 _919 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_900, _901, _902), 0.0);
        vec4 _926 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_900, _901, _902), 0.0);
        float _939 = exp2((_905.w + (-0.5)) * 20.0) * 2.0;
        float _940 = _939 * (_905.x + (-0.5));
        float _941 = _939 * (_905.y + (-0.5));
        float _942 = _939 * (_905.z + (-0.5));
        float _949 = exp2((_912.w + (-0.5)) * 20.0) * 2.0;
        float _950 = _949 * (_912.x + (-0.5));
        float _951 = _949 * (_912.y + (-0.5));
        float _952 = _949 * (_912.z + (-0.5));
        float _959 = exp2((_919.w + (-0.5)) * 20.0) * 2.0;
        float _960 = _959 * (_919.x + (-0.5));
        float _961 = _959 * (_919.y + (-0.5));
        float _962 = _959 * (_919.z + (-0.5));
        float _969 = exp2((_926.w + (-0.5)) * 20.0) * 2.0;
        float _970 = _969 * (_926.x + (-0.5));
        float _971 = _969 * (_926.y + (-0.5));
        float _972 = _969 * (_926.z + (-0.5));
        float _973 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _974 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _975 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _976 = _940 * 0.5;
        float _977 = _950 * 0.5;
        float _978 = _960 * 0.5;
        float _979 = dot(vec3(_976, _977, _978), vec3(_976, _977, _978));
        float _984 = (_979 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_979);
        float _993 = (dot(vec3(_636, _637, _638), vec3(_984 * _976, _984 * _977, _984 * _978)) + 1.0) * 0.5;
        float _3334 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _1003 = sqrt(((_977 * _977) + (_976 * _976)) + (_978 * _978)) / (_973 + 9.9999997473787516355514526367188e-06);
        float _3345 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _3345 : (isnan(_3345) ? 1.0 : min(_3345, 1.0));
        float _1005 = _1004 * 2.0;
        float _1009 = (1.0 - _1004) / (_1004 + 1.0);
        float _3356 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1010 = isnan(1.0) ? _3356 : (isnan(_3356) ? 1.0 : min(_3356, 1.0));
        float _1019 = ((((1.0 - _1010) * (_1005 + 2.0)) * exp2(log2(isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0))) * (_1005 + 1.0))) + _1010) * _973;
        float _1020 = _941 * 0.5;
        float _1021 = _951 * 0.5;
        float _1022 = _961 * 0.5;
        float _1023 = dot(vec3(_1020, _1021, _1022), vec3(_1020, _1021, _1022));
        float _1028 = (_1023 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1023);
        float _1036 = (dot(vec3(_636, _637, _638), vec3(_1028 * _1020, _1028 * _1021, _1028 * _1022)) + 1.0) * 0.5;
        float _3367 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1045 = sqrt(((_1021 * _1021) + (_1020 * _1020)) + (_1022 * _1022)) / (_974 + 9.9999997473787516355514526367188e-06);
        float _3378 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3378 : (isnan(_3378) ? 1.0 : min(_3378, 1.0));
        float _1047 = _1046 * 2.0;
        float _1051 = (1.0 - _1046) / (_1046 + 1.0);
        float _3389 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0));
        float _1061 = ((((1.0 - _1052) * (_1047 + 2.0)) * exp2(log2(isnan(1.0) ? _3367 : (isnan(_3367) ? 1.0 : min(_3367, 1.0))) * (_1047 + 1.0))) + _1052) * _974;
        float _1062 = _942 * 0.5;
        float _1063 = _952 * 0.5;
        float _1064 = _962 * 0.5;
        float _1065 = dot(vec3(_1062, _1063, _1064), vec3(_1062, _1063, _1064));
        float _1070 = (_1065 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1065);
        float _1078 = (dot(vec3(_636, _637, _638), vec3(_1070 * _1062, _1070 * _1063, _1070 * _1064)) + 1.0) * 0.5;
        float _3400 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1087 = sqrt(((_1063 * _1063) + (_1062 * _1062)) + (_1064 * _1064)) / (_975 + 9.9999997473787516355514526367188e-06);
        float _3411 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0));
        float _1089 = _1088 * 2.0;
        float _1093 = (1.0 - _1088) / (_1088 + 1.0);
        float _3422 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0));
        float _1103 = ((((1.0 - _1094) * (_1089 + 2.0)) * exp2(log2(isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0))) * (_1089 + 1.0))) + _1094) * _975;
        _1111 = _942;
        _1112 = _941;
        _1113 = _940;
        _1114 = _952;
        _1115 = _951;
        _1116 = _950;
        _1117 = _962;
        _1118 = _961;
        _1119 = _960;
        _1120 = _975;
        _1121 = _974;
        _1122 = _973;
        _1123 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0)));
        _1124 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0)));
        _1125 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0)));
    }
    else
    {
        _1111 = _451;
        _1112 = _451;
        _1113 = _451;
        _1114 = _451;
        _1115 = _451;
        _1116 = _451;
        _1117 = _451;
        _1118 = _451;
        _1119 = _451;
        _1120 = _451;
        _1121 = _451;
        _1122 = _451;
        _1123 = 0.0;
        _1124 = 0.0;
        _1125 = 0.0;
    }
    float _1420;
    float _1421;
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1151 = fma(_804, cbModelParam._m0[30u].z, fma(_800, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _796));
        float _1155 = fma(_804, cbModelParam._m0[31u].z, fma(_800, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _796));
        float _1159 = fma(_804, cbModelParam._m0[32u].z, fma(_800, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _796));
        float _1182 = _796 + _636;
        float _1183 = _800 + _637;
        float _1184 = _804 + _638;
        float _1194 = fma(_1184, cbModelParam._m0[30u].z, fma(_1183, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1182)) - _1151;
        float _1195 = fma(_1184, cbModelParam._m0[31u].z, fma(_1183, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1182)) - _1155;
        float _1196 = fma(_1184, cbModelParam._m0[32u].z, fma(_1183, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1182)) - _1159;
        float _1200 = inversesqrt(dot(vec3(_1194, _1195, _1196), vec3(_1194, _1195, _1196)));
        float _1213 = ((_1200 * _1194) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1151 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1214 = ((_1200 * _1195) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1155 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1215 = ((_1200 * _1196) / cbModelParam._m0[35u].z) + ((((((_1159 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1217 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1213, _1214, _1215), 0.0);
        vec4 _1224 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1213, _1214, _1215), 0.0);
        vec4 _1231 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1213, _1214, _1215), 0.0);
        vec4 _1238 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1213, _1214, _1215), 0.0);
        float _1250 = exp2((_1217.w + (-0.5)) * 20.0) * 2.0;
        float _1251 = _1250 * (_1217.x + (-0.5));
        float _1252 = _1250 * (_1217.y + (-0.5));
        float _1253 = _1250 * (_1217.z + (-0.5));
        float _1260 = exp2((_1224.w + (-0.5)) * 20.0) * 2.0;
        float _1261 = _1260 * (_1224.x + (-0.5));
        float _1262 = _1260 * (_1224.y + (-0.5));
        float _1263 = _1260 * (_1224.z + (-0.5));
        float _1270 = exp2((_1231.w + (-0.5)) * 20.0) * 2.0;
        float _1271 = _1270 * (_1231.x + (-0.5));
        float _1272 = _1270 * (_1231.y + (-0.5));
        float _1273 = _1270 * (_1231.z + (-0.5));
        float _1280 = exp2((_1238.w + (-0.5)) * 20.0) * 2.0;
        float _1281 = _1280 * (_1238.x + (-0.5));
        float _1282 = _1280 * (_1238.y + (-0.5));
        float _1283 = _1280 * (_1238.z + (-0.5));
        float _1284 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1285 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1286 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1287 = _1251 * 0.5;
        float _1288 = _1261 * 0.5;
        float _1289 = _1271 * 0.5;
        float _1290 = dot(vec3(_1287, _1288, _1289), vec3(_1287, _1288, _1289));
        float _1295 = (_1290 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1290);
        float _1303 = (dot(vec3(_636, _637, _638), vec3(_1295 * _1287, _1295 * _1288, _1295 * _1289)) + 1.0) * 0.5;
        float _3463 = isnan(0.0) ? _1303 : (isnan(_1303) ? 0.0 : max(_1303, 0.0));
        float _1312 = sqrt(((_1288 * _1288) + (_1287 * _1287)) + (_1289 * _1289)) / (_1284 + 9.9999997473787516355514526367188e-06);
        float _3474 = isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0));
        float _1313 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
        float _1314 = _1313 * 2.0;
        float _1318 = (1.0 - _1313) / (_1313 + 1.0);
        float _3485 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1319 = isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0));
        float _1328 = ((((1.0 - _1319) * (_1314 + 2.0)) * exp2(log2(isnan(1.0) ? _3463 : (isnan(_3463) ? 1.0 : min(_3463, 1.0))) * (_1314 + 1.0))) + _1319) * _1284;
        float _1329 = _1252 * 0.5;
        float _1330 = _1262 * 0.5;
        float _1331 = _1272 * 0.5;
        float _1332 = dot(vec3(_1329, _1330, _1331), vec3(_1329, _1330, _1331));
        float _1337 = (_1332 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1332);
        float _1345 = (dot(vec3(_636, _637, _638), vec3(_1337 * _1329, _1337 * _1330, _1337 * _1331)) + 1.0) * 0.5;
        float _3496 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1354 = sqrt(((_1330 * _1330) + (_1329 * _1329)) + (_1331 * _1331)) / (_1285 + 9.9999997473787516355514526367188e-06);
        float _3507 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
        float _1355 = isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0));
        float _1356 = _1355 * 2.0;
        float _1360 = (1.0 - _1355) / (_1355 + 1.0);
        float _3518 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
        float _1370 = ((((1.0 - _1361) * (_1356 + 2.0)) * exp2(log2(isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0))) * (_1356 + 1.0))) + _1361) * _1285;
        float _1371 = _1253 * 0.5;
        float _1372 = _1263 * 0.5;
        float _1373 = _1273 * 0.5;
        float _1374 = dot(vec3(_1371, _1372, _1373), vec3(_1371, _1372, _1373));
        float _1379 = (_1374 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1374);
        float _1387 = (dot(vec3(_636, _637, _638), vec3(_1379 * _1371, _1379 * _1372, _1379 * _1373)) + 1.0) * 0.5;
        float _3529 = isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0));
        float _1396 = sqrt(((_1372 * _1372) + (_1371 * _1371)) + (_1373 * _1373)) / (_1286 + 9.9999997473787516355514526367188e-06);
        float _3540 = isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0));
        float _1397 = isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0));
        float _1398 = _1397 * 2.0;
        float _1402 = (1.0 - _1397) / (_1397 + 1.0);
        float _3551 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
        float _1412 = ((((1.0 - _1403) * (_1398 + 2.0)) * exp2(log2(isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0))) * (_1398 + 1.0))) + _1403) * _1286;
        _1420 = _1253;
        _1421 = _1252;
        _1422 = _1251;
        _1423 = _1263;
        _1424 = _1262;
        _1425 = _1261;
        _1426 = _1273;
        _1427 = _1272;
        _1428 = _1271;
        _1429 = _1286;
        _1430 = _1285;
        _1431 = _1284;
        _1432 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0)));
        _1433 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)));
        _1434 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1412 : (isnan(_1412) ? 0.0 : max(_1412, 0.0)));
    }
    else
    {
        _1420 = _451;
        _1421 = _451;
        _1422 = _451;
        _1423 = _451;
        _1424 = _451;
        _1425 = _451;
        _1426 = _451;
        _1427 = _451;
        _1428 = _451;
        _1429 = _451;
        _1430 = _451;
        _1431 = _451;
        _1432 = 0.0;
        _1433 = 0.0;
        _1434 = 0.0;
    }
    float _1444 = (cbModelParam._m0[1u].x * (_1432 - _1123)) + _1123;
    float _1445 = (cbModelParam._m0[1u].x * (_1433 - _1124)) + _1124;
    float _1446 = (cbModelParam._m0[1u].x * (_1434 - _1125)) + _1125;
    float _1467 = fma(_1446, cbSceneParam._m0[89u].z, fma(_1445, cbSceneParam._m0[89u].y, _1444 * cbSceneParam._m0[89u].x));
    float _1470 = fma(_1446, cbSceneParam._m0[90u].z, fma(_1445, cbSceneParam._m0[90u].y, _1444 * cbSceneParam._m0[90u].x));
    float _1473 = fma(_1446, cbSceneParam._m0[91u].z, fma(_1445, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1444));
    float _1488 = _744 * 0.5;
    float _1489 = _745 * 0.5;
    float _1490 = _746 * 0.5;
    float _1491 = dot(vec4(_1488, _1489, _1490, 1.0), vec4(_1422, _1425, _1428, _1431));
    float _1494 = dot(vec4(_1488, _1489, _1490, 1.0), vec4(_1421, _1424, _1427, _1430));
    float _1497 = dot(vec4(_1488, _1489, _1490, 1.0), vec4(_1420, _1423, _1426, _1429));
    float _1531;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1504 = dot(vec4(_1488, _1489, _1490, 1.0), vec4(_1111, _1114, _1117, _1120));
        float _1508 = dot(vec4(_1488, _1489, _1490, 1.0), vec4(_1112, _1115, _1118, _1121));
        float _1512 = dot(vec4(_1488, _1489, _1490, 1.0), vec4(_1113, _1116, _1119, _1122));
        float _1519 = dot(vec4(cbModelParam._m0[39u]), vec4(_1488, _1489, _1490, 1.0));
        _1531 = dot(vec3(isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0)), isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0)), isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1519) ? 0.0 : (isnan(0.0) ? _1519 : max(0.0, _1519))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1531 = 1.0;
    }
    float _1542;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1533 = dot(vec4(cbModelParam._m0[40u]), vec4(_1488, _1489, _1490, 1.0));
        _1542 = dot(vec3(isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0)), isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0)), isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1533) ? 0.0 : (isnan(0.0) ? _1533 : max(0.0, _1533))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1542 = 1.0;
    }
    float _1546 = (_1542 * cbModelParam._m0[1u].x) + (_1531 * (1.0 - cbModelParam._m0[1u].x));
    float _1556 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _639);
    float _1557 = isnan(_1556) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1556 : min(cbModelParam._m0[25u].z, _1556));
    float _1638;
    float _1640;
    float _1642;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1605 = fma(_804, cbModelParam._m0[13u].z, fma(_800, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _796)) + cbModelParam._m0[13u].w;
        float _1609 = fma(_804, cbModelParam._m0[14u].z, fma(_800, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _796)) + cbModelParam._m0[14u].w;
        float _1613 = fma(_804, cbModelParam._m0[15u].z, fma(_800, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _796)) + cbModelParam._m0[15u].w;
        float _1616 = fma(_746, cbModelParam._m0[13u].z, fma(_745, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _744));
        float _1619 = fma(_746, cbModelParam._m0[14u].z, fma(_745, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _744));
        float _1622 = fma(_746, cbModelParam._m0[15u].z, fma(_745, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _744));
        float _1650;
        if (_1616 > 0.0)
        {
            _1650 = abs((1.0 - _1605) / _1616);
        }
        else
        {
            float frontier_phi_26_24_ladder;
            if (_1616 < 0.0)
            {
                frontier_phi_26_24_ladder = abs((_1605 + 1.0) / _1616);
            }
            else
            {
                frontier_phi_26_24_ladder = 5000.0;
            }
            _1650 = frontier_phi_26_24_ladder;
        }
        float _1996;
        if (_1619 > 0.0)
        {
            _1996 = abs((1.0 - _1609) / _1619);
        }
        else
        {
            float frontier_phi_35_31_ladder;
            if (_1619 < 0.0)
            {
                frontier_phi_35_31_ladder = abs((_1609 + 1.0) / _1619);
            }
            else
            {
                frontier_phi_35_31_ladder = 5000.0;
            }
            _1996 = frontier_phi_35_31_ladder;
        }
        float _2296;
        if (_1622 > 0.0)
        {
            _2296 = abs((1.0 - _1613) / _1622);
        }
        else
        {
            float frontier_phi_49_42_ladder;
            if (_1622 < 0.0)
            {
                frontier_phi_49_42_ladder = abs((_1613 + 1.0) / _1622);
            }
            else
            {
                frontier_phi_49_42_ladder = 5000.0;
            }
            _2296 = frontier_phi_49_42_ladder;
        }
        float _2298 = isnan(_1996) ? _1650 : (isnan(_1650) ? _1996 : min(_1650, _1996));
        float _2299 = isnan(_2296) ? _2298 : (isnan(_2298) ? _2296 : min(_2298, _2296));
        float _2303 = (_2299 * _1616) + _1605;
        float _2304 = (_2299 * _1619) + _1609;
        float _2305 = (_2299 * _1622) + _1613;
        float _2306 = _2299 * 9.9999997473787516355514526367188e-05;
        float _2307 = (-1.0) - _2306;
        float _2309 = _2306 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2305 > _2309) || ((_2305 < _2307) || ((_2304 > _2309) || ((_2304 < _2307) || ((_2303 < _2307) || (_2303 > _2309))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2431 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2305, cbModelParam._m0[9u].z, fma(_2304, cbModelParam._m0[9u].y, _2303 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2305, cbModelParam._m0[10u].z, fma(_2304, cbModelParam._m0[10u].y, _2303 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2305, cbModelParam._m0[11u].z, fma(_2304, cbModelParam._m0[11u].y, _2303 * cbModelParam._m0[11u].x))), _1557);
            frontier_phi_25_49_ladder = _2431.z * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_1 = _2431.y * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_2 = _2431.x * cbModelParam._m0[1u].y;
        }
        _1638 = frontier_phi_25_49_ladder_2;
        _1640 = frontier_phi_25_49_ladder_1;
        _1642 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1626 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_744, _745, _746), _1557);
        _1638 = _1626.x * cbModelParam._m0[1u].y;
        _1640 = _1626.y * cbModelParam._m0[1u].y;
        _1642 = _1626.z * cbModelParam._m0[1u].y;
    }
    float _1646 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _639);
    float _1647 = isnan(_1646) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1646 : min(cbModelParam._m0[25u].w, _1646));
    float _1736;
    float _1738;
    float _1740;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1700 = fma(_804, cbModelParam._m0[21u].z, fma(_800, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _796)) + cbModelParam._m0[21u].w;
        float _1704 = fma(_804, cbModelParam._m0[22u].z, fma(_800, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _796)) + cbModelParam._m0[22u].w;
        float _1708 = fma(_804, cbModelParam._m0[23u].z, fma(_800, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _796)) + cbModelParam._m0[23u].w;
        float _1711 = fma(_746, cbModelParam._m0[21u].z, fma(_745, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _744));
        float _1714 = fma(_746, cbModelParam._m0[22u].z, fma(_745, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _744));
        float _1717 = fma(_746, cbModelParam._m0[23u].z, fma(_745, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _744));
        float _2001;
        if (_1711 > 0.0)
        {
            _2001 = abs((1.0 - _1700) / _1711);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1711 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1700 + 1.0) / _1711);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _2001 = frontier_phi_37_33_ladder;
        }
        float _2322;
        if (_1714 > 0.0)
        {
            _2322 = abs((1.0 - _1704) / _1714);
        }
        else
        {
            float frontier_phi_51_44_ladder;
            if (_1714 < 0.0)
            {
                frontier_phi_51_44_ladder = abs((_1704 + 1.0) / _1714);
            }
            else
            {
                frontier_phi_51_44_ladder = 5000.0;
            }
            _2322 = frontier_phi_51_44_ladder;
        }
        float _2491;
        if (_1717 > 0.0)
        {
            _2491 = abs((1.0 - _1708) / _1717);
        }
        else
        {
            float frontier_phi_65_60_ladder;
            if (_1717 < 0.0)
            {
                frontier_phi_65_60_ladder = abs((_1708 + 1.0) / _1717);
            }
            else
            {
                frontier_phi_65_60_ladder = 5000.0;
            }
            _2491 = frontier_phi_65_60_ladder;
        }
        float _2493 = isnan(_2322) ? _2001 : (isnan(_2001) ? _2322 : min(_2001, _2322));
        float _2494 = isnan(_2491) ? _2493 : (isnan(_2493) ? _2491 : min(_2493, _2491));
        float _2498 = (_2494 * _1711) + _1700;
        float _2499 = (_2494 * _1714) + _1704;
        float _2500 = (_2494 * _1717) + _1708;
        float _2501 = _2494 * 9.9999997473787516355514526367188e-05;
        float _2502 = (-1.0) - _2501;
        float _2504 = _2501 + 1.0;
        float frontier_phi_34_65_ladder;
        float frontier_phi_34_65_ladder_1;
        float frontier_phi_34_65_ladder_2;
        if ((_2500 > _2504) || ((_2500 < _2502) || ((_2499 > _2504) || ((_2499 < _2502) || ((_2498 < _2502) || (_2498 > _2504))))))
        {
            frontier_phi_34_65_ladder = 0.0;
            frontier_phi_34_65_ladder_1 = 0.0;
            frontier_phi_34_65_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2733 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2500, cbModelParam._m0[17u].z, fma(_2499, cbModelParam._m0[17u].y, _2498 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2500, cbModelParam._m0[18u].z, fma(_2499, cbModelParam._m0[18u].y, _2498 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2500, cbModelParam._m0[19u].z, fma(_2499, cbModelParam._m0[19u].y, _2498 * cbModelParam._m0[19u].x))), _1647);
            frontier_phi_34_65_ladder = _2733.y * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_1 = _2733.x * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_2 = _2733.z * cbModelParam._m0[1u].z;
        }
        _1736 = frontier_phi_34_65_ladder_1;
        _1738 = frontier_phi_34_65_ladder;
        _1740 = frontier_phi_34_65_ladder_2;
    }
    else
    {
        vec4 _1720 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_744, _745, _746), _1647);
        _1736 = _1720.x * cbModelParam._m0[1u].z;
        _1738 = _1720.y * cbModelParam._m0[1u].z;
        _1740 = _1720.z * cbModelParam._m0[1u].z;
    }
    float _1752 = ((((1.0 - _764) * ((_752 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_764 * _752)) * _736;
    float _1753 = _1752 * ((cbModelParam._m0[1u].w * (_1736 - _1638)) + _1638);
    float _1754 = _1752 * ((cbModelParam._m0[1u].w * (_1738 - _1640)) + _1640);
    float _1755 = _1752 * ((cbModelParam._m0[1u].w * (_1740 - _1642)) + _1642);
    float _1758 = fma(_1755, cbSceneParam._m0[89u].z, fma(_1754, cbSceneParam._m0[89u].y, _1753 * cbSceneParam._m0[89u].x));
    float _1761 = fma(_1755, cbSceneParam._m0[90u].z, fma(_1754, cbSceneParam._m0[90u].y, _1753 * cbSceneParam._m0[90u].x));
    float _1764 = fma(_1755, cbSceneParam._m0[91u].z, fma(_1754, cbSceneParam._m0[91u].y, _1753 * cbSceneParam._m0[91u].x));
    uvec4 _1774 = floatBitsToUint(cbInstanceData._m0[_711 + 5u]);
    uint _1776 = _1774.x * 14u;
    uint _1777 = _1776 + 13u;
    float _1782 = _736 + (-1.0);
    float _1785 = (cbLight._m0[_1777].x * _1782) + 1.0;
    float _1786 = (cbLight._m0[_1777].y * _1782) + 1.0;
    uint _1787 = _1776 + 5u;
    float _1793 = isnan(1.0) ? _1786 : (isnan(_1786) ? 1.0 : min(_1786, 1.0));
    uint _1797 = _1776 + 4u;
    float _1803 = isnan(1.0) ? _1785 : (isnan(_1785) ? 1.0 : min(_1785, 1.0));
    uint _1807 = _1776 | 1u;
    float _1818 = dot(vec3(cbLight._m0[_1776].xyz), vec3(_636, _637, _638));
    float _1821 = dot(vec3(cbLight._m0[_1807].xyz), vec3(_636, _637, _638));
    float _3687 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
    float _3698 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
    float _1826 = (isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * 0.3183098733425140380859375;
    float _1828 = (isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0))) * 0.3183098733425140380859375;
    float _1835 = ((cbLight._m0[_1787].x * _1793) * _1828) + ((cbLight._m0[_1797].x * _1803) * _1826);
    float _1836 = ((_1793 * cbLight._m0[_1787].y) * _1828) + ((_1803 * cbLight._m0[_1797].y) * _1826);
    float _1837 = ((_1793 * cbLight._m0[_1787].z) * _1828) + ((_1803 * cbLight._m0[_1797].z) * _1826);
    uint _1839 = _1776 + 8u;
    float _1852 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1776].w)) * _639) * 0.949999988079071044921875);
    float _1853 = _1852 * _1852;
    float _1854 = cbLight._m0[_1776].x + _663;
    float _1855 = cbLight._m0[_1776].y + _664;
    float _1856 = cbLight._m0[_1776].z + _665;
    float _1860 = inversesqrt(dot(vec3(_1854, _1855, _1856), vec3(_1854, _1855, _1856)));
    float _1861 = _1860 * _1854;
    float _1862 = _1860 * _1855;
    float _1863 = _1860 * _1856;
    float _1864 = dot(vec3(_636, _637, _638), vec3(cbLight._m0[_1776].xyz));
    float _3709 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
    float _1867 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
    float _3720 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _1868 = isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0));
    float _1869 = dot(vec3(_636, _637, _638), vec3(_1861, _1862, _1863));
    float _3731 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
    float _1872 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
    float _1873 = dot(vec3(cbLight._m0[_1776].xyz), vec3(_1861, _1862, _1863));
    float _3742 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
    float _1877 = _1853 * _1853;
    float _1881 = ((_1872 * _1872) * (_1877 + (-1.0))) + 1.0;
    float _1892 = (exp2(log2(1.0 - (isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1893 = 1.0 - _1853;
    float _1904 = (0.5 / (((_1868 * ((_1867 * _1893) + _1853)) + 9.9999999392252902907785028219223e-09) + (((_1868 * _1893) + _1853) * _1867))) * _1867;
    float _3753 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
    float _1906 = (isnan(1.0) ? _3753 : (isnan(_3753) ? 1.0 : min(_3753, 1.0))) * (_1877 / ((_1881 * _1881) * 3.141590118408203125));
    uint _1917 = _1776 + 9u;
    float _1928 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1807].w)) * _639) * 0.949999988079071044921875);
    float _1929 = _1928 * _1928;
    float _1930 = cbLight._m0[_1807].x + _663;
    float _1931 = cbLight._m0[_1807].y + _664;
    float _1932 = cbLight._m0[_1807].z + _665;
    float _1936 = inversesqrt(dot(vec3(_1930, _1931, _1932), vec3(_1930, _1931, _1932)));
    float _1937 = _1936 * _1930;
    float _1938 = _1936 * _1931;
    float _1939 = _1936 * _1932;
    float _1940 = dot(vec3(_636, _637, _638), vec3(cbLight._m0[_1807].xyz));
    float _3764 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
    float _1943 = isnan(1.0) ? _3764 : (isnan(_3764) ? 1.0 : min(_3764, 1.0));
    float _1944 = dot(vec3(_636, _637, _638), vec3(_1937, _1938, _1939));
    float _3775 = isnan(0.0) ? _1944 : (isnan(_1944) ? 0.0 : max(_1944, 0.0));
    float _1947 = isnan(1.0) ? _3775 : (isnan(_3775) ? 1.0 : min(_3775, 1.0));
    float _1948 = dot(vec3(cbLight._m0[_1807].xyz), vec3(_1937, _1938, _1939));
    float _3786 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
    float _1952 = _1929 * _1929;
    float _1956 = ((_1947 * _1947) * (_1952 + (-1.0))) + 1.0;
    float _1965 = (exp2(log2(1.0 - (isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1966 = 1.0 - _1929;
    float _1976 = (0.5 / (((_1868 * ((_1943 * _1966) + _1929)) + 9.9999999392252902907785028219223e-09) + (((_1868 * _1966) + _1929) * _1943))) * _1943;
    float _3797 = isnan(0.0) ? _1976 : (isnan(_1976) ? 0.0 : max(_1976, 0.0));
    float _1978 = (isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))) * (_1952 / ((_1956 * _1956) * 3.141590118408203125));
    float _1988 = (((_1965 * cbLight._m0[_1917].x) * _1978) * _1793) + (((_1892 * cbLight._m0[_1839].x) * _1906) * _1803);
    float _1989 = (((_1965 * cbLight._m0[_1917].y) * _1978) * _1793) + (((_1892 * cbLight._m0[_1839].y) * _1906) * _1803);
    float _1990 = (((_1965 * cbLight._m0[_1917].z) * _1978) * _1793) + (((_1892 * cbLight._m0[_1839].z) * _1906) * _1803);
    float _2105;
    float _2107;
    float _2109;
    float _2111;
    float _2113;
    float _2115;
    if (_1774.y == 0u)
    {
        float _2045 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2046 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2045;
        float _2047 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2045;
        float _2048 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2045;
        uvec4 _2060 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2061 = _2060.x;
        uint _2072 = uint((float(_2060.y) * floor(float(uint(cbSceneParam._m0[85u].y * _672) / _2061))) + floor(float(uint(cbSceneParam._m0[85u].x * _671) / _2061)));
        float _2082 = (log2(_2048 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2083 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
        uint _2086 = uint(isnan(14.0) ? _2083 : (isnan(_2083) ? 14.0 : min(_2083, 14.0)));
        uvec4 _2091 = texelFetch(g_lightClusterGridBuffer, int(((_2086 << 2u) + (_2072 << 6u)) >> 2u));
        uint _2092 = _2091.x;
        uint _2093 = _2060.z;
        float _2183;
        float _2185;
        float _2187;
        float _2189;
        float _2191;
        float _2193;
        if (((((1u << ((_2093 >> 4u) & 15u)) + 4294967295u) & _2092) == 0u) || ((_2093 & 240u) == 0u))
        {
            _2183 = 0.0;
            _2185 = 0.0;
            _2187 = 0.0;
            _2189 = 0.0;
            _2191 = 0.0;
            _2193 = 0.0;
        }
        else
        {
            float _2184;
            float _2186;
            float _2188;
            float _2190;
            float _2192;
            float _2194;
            float _2359 = 0.0;
            float _2360 = 0.0;
            float _2361 = 0.0;
            float _2362 = 0.0;
            float _2363 = 0.0;
            float _2364 = 0.0;
            uint _2365 = 0u;
            uint _2374;
            bool _2375;
            for (;;)
            {
                _2374 = texelFetch(g_lightClassification, int((((_2086 << 5u) + (_2072 << 9u)) + (_2365 << 2u)) >> 2u)).x;
                _2375 = _2374 == 0u;
                float frontier_phi_62_pred;
                float frontier_phi_62_pred_1;
                float frontier_phi_62_pred_2;
                float frontier_phi_62_pred_3;
                float frontier_phi_62_pred_4;
                float frontier_phi_62_pred_5;
                if (_2375)
                {
                    frontier_phi_62_pred = _2360;
                    frontier_phi_62_pred_1 = _2359;
                    frontier_phi_62_pred_2 = _2361;
                    frontier_phi_62_pred_3 = _2364;
                    frontier_phi_62_pred_4 = _2363;
                    frontier_phi_62_pred_5 = _2362;
                }
                else
                {
                    float _2534;
                    float _2535;
                    float _2536;
                    float _2537;
                    float _2538;
                    float _2539;
                    uint _2540;
                    _2534 = _2359;
                    _2535 = _2360;
                    _2536 = _2361;
                    _2537 = _2362;
                    _2538 = _2363;
                    _2539 = _2364;
                    _2540 = _2374;
                    float _2440;
                    float _2441;
                    float _2442;
                    float _2443;
                    float _2444;
                    float _2445;
                    for (;;)
                    {
                        uint _2544 = uint(findLSB(_2540)) + (_2365 << 5u);
                        uint _2541 = (_2540 + 4294967295u) & _2540;
                        uint _2546 = _2544 * 48u;
                        vec4 _2560 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2546)).x, texelFetch(g_PointLightRenderingBuffer, int(_2546 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2546 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2546 + 3u)).x));
                        uint _2566 = (_2544 * 48u) + 4u;
                        vec4 _2579 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2566)).x, texelFetch(g_PointLightRenderingBuffer, int(_2566 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2566 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2566 + 3u)).x));
                        uint _2585 = (_2544 * 48u) + 8u;
                        vec3 _2596 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2585)).x, texelFetch(g_PointLightRenderingBuffer, int(_2585 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2585 + 2u)).x));
                        float _2600 = _2560.x - _2046;
                        float _2601 = _2560.y - _2047;
                        float _2602 = _2560.z - _2048;
                        float _2603 = dot(vec3(_2600, _2601, _2602), vec3(_2600, _2601, _2602));
                        float _2606 = inversesqrt(_2603);
                        float _2607 = _2606 * _2600;
                        float _2608 = _2606 * _2601;
                        float _2609 = _2606 * _2602;
                        float _2610 = dot(vec3(_692, _695, _698), vec3(_2607, _2608, _2609));
                        float _2615 = 1.0 - (_2603 * _2560.w);
                        float _3818 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
                        float _2616 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
                        float _2617 = sqrt(_2603) * _2579.w;
                        float _2620 = 1.39999997615814208984375 / (_2617 + 1.39999997615814208984375);
                        float _2621 = _2620 * _2620;
                        float _2624 = ((1.0 - _2621) * _2610) + _2621;
                        float _2627 = _2617 * _2617;
                        float _2631 = ((isnan(0.0) ? _2624 : (isnan(_2624) ? 0.0 : max(_2624, 0.0))) * _2616) / ((_2627 * 0.699999988079071044921875) + 1.0);
                        float _2635 = (-0.0) - _2046;
                        float _2636 = (-0.0) - _2047;
                        float _2637 = (-0.0) - _2048;
                        float _2641 = inversesqrt(dot(vec3(_2635, _2636, _2637), vec3(_2635, _2636, _2637)));
                        float _2642 = _2641 * _2635;
                        float _2643 = _2641 * _2636;
                        float _2644 = _2641 * _2637;
                        float _2652 = exp2(log2(1.0 / ((_2627 * 3.5) + 5.0)) * 0.25);
                        float _2653 = 1.0 - _752;
                        float _2660 = sqrt(1.0 - ((1.0 - (_2653 * _2653)) * (1.0 - (_2652 * _2652))));
                        float _2661 = _2660 * _2660;
                        float _2662 = _2661 * _2661;
                        float _2663 = _2642 + _2607;
                        float _2664 = _2643 + _2608;
                        float _2665 = _2644 + _2609;
                        float _2669 = inversesqrt(dot(vec3(_2663, _2664, _2665), vec3(_2663, _2664, _2665)));
                        float _2673 = dot(vec3(_692, _695, _698), vec3(_2642, _2643, _2644));
                        float _3834 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
                        float _2676 = isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0));
                        float _2677 = dot(vec3(_692, _695, _698), vec3(_2669 * _2663, _2669 * _2664, _2669 * _2665));
                        float _3845 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
                        float _2680 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
                        float _2684 = ((_2680 * _2680) * (_2662 + (-1.0))) + 1.0;
                        float _2685 = _2620 * _2661;
                        float _2686 = _2685 * _2685;
                        float _2689 = ((1.0 - _2686) * _2610) + _2686;
                        float _3856 = isnan(0.0) ? _2689 : (isnan(_2689) ? 0.0 : max(_2689, 0.0));
                        float _2690 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
                        float _2691 = 1.0 - _2661;
                        float _2701 = (0.5 / (((_2690 * ((_2676 * _2691) + _2661)) + 9.9999999392252902907785028219223e-09) + (((_2690 * _2691) + _2661) * _2676))) * _2690;
                        float _3867 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
                        float _2712 = (((_2662 * 3.1415927410125732421875) * (isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0)))) / ((_2684 * _2684) * ((_2627 * 2.1991131305694580078125) + 3.141590118408203125))) * _2616;
                        _2443 = (_2631 * _2579.x) + _2537;
                        _2444 = (_2631 * _2579.y) + _2538;
                        _2445 = (_2631 * _2579.z) + _2539;
                        _2440 = (_2712 * _2596.x) + _2534;
                        _2441 = (_2712 * _2596.y) + _2535;
                        _2442 = (_2712 * _2596.z) + _2536;
                        if (_2541 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2534 = _2440;
                            _2535 = _2441;
                            _2536 = _2442;
                            _2537 = _2443;
                            _2538 = _2444;
                            _2539 = _2445;
                            _2540 = _2541;
                        }
                    }
                    frontier_phi_62_pred = _2441;
                    frontier_phi_62_pred_1 = _2440;
                    frontier_phi_62_pred_2 = _2442;
                    frontier_phi_62_pred_3 = _2445;
                    frontier_phi_62_pred_4 = _2444;
                    frontier_phi_62_pred_5 = _2443;
                }
                _2186 = frontier_phi_62_pred;
                _2184 = frontier_phi_62_pred_1;
                _2188 = frontier_phi_62_pred_2;
                _2194 = frontier_phi_62_pred_3;
                _2192 = frontier_phi_62_pred_4;
                _2190 = frontier_phi_62_pred_5;
                uint _2366 = _2365 + 1u;
                if (_2366 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2359 = _2184;
                    _2360 = _2186;
                    _2361 = _2188;
                    _2362 = _2190;
                    _2363 = _2192;
                    _2364 = _2194;
                    _2365 = _2366;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2183 = _2184;
            _2185 = _2186;
            _2187 = _2188;
            _2189 = _2190;
            _2191 = _2192;
            _2193 = _2194;
        }
        uvec4 _2197 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2198 = _2197.z;
        uint _2200 = (_2198 >> 8u) & 15u;
        float _2327;
        float _2329;
        float _2331;
        float _2333;
        float _2335;
        float _2337;
        if (((4294967295u << _2200) & _2092) == 0u)
        {
            _2327 = _2183;
            _2329 = _2185;
            _2331 = _2187;
            _2333 = _2189;
            _2335 = _2191;
            _2337 = _2193;
        }
        else
        {
            float _2352 = inversesqrt(dot(vec3(_2046, _2047, _2048), vec3(_2046, _2047, _2048)));
            float _2353 = _2352 * _2046;
            float _2354 = _2352 * _2047;
            float _2355 = _2352 * _2048;
            float frontier_phi_53_54_ladder;
            float frontier_phi_53_54_ladder_1;
            float frontier_phi_53_54_ladder_2;
            float frontier_phi_53_54_ladder_3;
            float frontier_phi_53_54_ladder_4;
            float frontier_phi_53_54_ladder_5;
            if (_2200 < ((_2198 >> 12u) & 15u))
            {
                float _2328;
                float _2330;
                float _2332;
                float _2334;
                float _2336;
                float _2338;
                float _2517 = _2183;
                float _2518 = _2185;
                float _2519 = _2187;
                float _2520 = _2189;
                float _2521 = _2191;
                float _2522 = _2193;
                uint _2523 = _2200;
                uint _2532;
                bool _2533;
                for (;;)
                {
                    _2532 = texelFetch(g_lightClassification, int((((_2086 << 5u) + (_2072 << 9u)) + (_2523 << 2u)) >> 2u)).x;
                    _2533 = _2532 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    float frontier_phi_71_pred_3;
                    float frontier_phi_71_pred_4;
                    float frontier_phi_71_pred_5;
                    if (_2533)
                    {
                        frontier_phi_71_pred = _2518;
                        frontier_phi_71_pred_1 = _2517;
                        frontier_phi_71_pred_2 = _2522;
                        frontier_phi_71_pred_3 = _2521;
                        frontier_phi_71_pred_4 = _2520;
                        frontier_phi_71_pred_5 = _2519;
                    }
                    else
                    {
                        float _2738;
                        float _2739;
                        float _2740;
                        float _2741;
                        float _2742;
                        float _2743;
                        float _3033;
                        float _3034;
                        float _3035;
                        float _3036;
                        float _3037;
                        float _3038;
                        float _2751 = _2517;
                        float _2752 = _2518;
                        float _2753 = _2519;
                        float _2754 = _2520;
                        float _2755 = _2521;
                        float _2756 = _2522;
                        uint _2757 = _2532;
                        uint _2758;
                        vec4 _2783;
                        float _2784;
                        vec4 _2799;
                        vec3 _2811;
                        vec4 _2827;
                        vec4 _2843;
                        float _2889;
                        bool _2890;
                        for (;;)
                        {
                            uint _2768 = ((_2523 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2757));
                            _2758 = (_2757 + 4294967295u) & _2757;
                            uint _2770 = _2768 * 40u;
                            _2783 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2770)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2770 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2770 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2770 + 3u)).x));
                            _2784 = _2783.w;
                            uint _2786 = (_2768 * 40u) + 4u;
                            _2799 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2786)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2786 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2786 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2786 + 3u)).x));
                            uint _2801 = (_2768 * 40u) + 8u;
                            _2811 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2801)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2801 + 2u)).x));
                            uint _2814 = (_2768 * 40u) + 16u;
                            _2827 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2814)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2814 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2814 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2814 + 3u)).x));
                            uint _2830 = (_2768 * 40u) + 20u;
                            _2843 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2830)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2830 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2830 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2830 + 3u)).x));
                            uint _2845 = (_2768 * 40u) + 24u;
                            vec4 _2858 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2845)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2845 + 3u)).x));
                            uint _2864 = (_2768 * 40u) + 28u;
                            vec4 _2877 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2864)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2864 + 3u)).x));
                            _2889 = fma(_2048, _2877.z, fma(_2047, _2877.y, _2877.x * _2046)) + _2877.w;
                            _2890 = !((fma(_2048, _2858.z, fma(_2047, _2858.y, _2858.x * _2046)) + _2858.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            float frontier_phi_77_pred_3;
                            float frontier_phi_77_pred_4;
                            float frontier_phi_77_pred_5;
                            if (_2890)
                            {
                                float _2917 = _2783.x - _2046;
                                float _2918 = _2783.y - _2047;
                                float _2919 = _2783.z - _2048;
                                float _2920 = dot(vec3(_2917, _2918, _2919), vec3(_2917, _2918, _2919));
                                float _2923 = inversesqrt(_2920);
                                float _2924 = _2923 * _2917;
                                float _2925 = _2923 * _2918;
                                float _2926 = _2923 * _2919;
                                float _2930 = 1.0 - (_2920 / (_2784 * _2784));
                                float _3878 = isnan(0.0) ? _2930 : (isnan(_2930) ? 0.0 : max(_2930, 0.0));
                                float _2931 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
                                float _2935 = sqrt(_2920) * _2799.w;
                                float _2937 = 1.39999997615814208984375 / (_2935 + 1.39999997615814208984375);
                                float _2938 = _2937 * _2937;
                                float _2941 = ((1.0 - _2938) * dot(vec3(_2924, _2925, _2926), vec3(_692, _695, _698))) + _2938;
                                float _2944 = _2935 * _2935;
                                float _2948 = (fma(_2048, _2827.z, fma(_2047, _2827.y, _2827.x * _2046)) + _2827.w) / _2889;
                                float _2949 = (fma(_2048, _2843.z, fma(_2047, _2843.y, _2843.x * _2046)) + _2843.w) / _2889;
                                float _2953 = 1.0 - dot(vec2(_2948, _2949), vec2(_2948, _2949));
                                float _3894 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
                                float _2954 = isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0));
                                float _2955 = _2954 * (((isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0))) * _2931) / ((_2944 * 0.699999988079071044921875) + 1.0));
                                float _2967 = exp2(log2(1.0 / ((_2944 * 3.5) + 5.0)) * 0.25);
                                float _2968 = 1.0 - _752;
                                float _2975 = sqrt(1.0 - ((1.0 - (_2968 * _2968)) * (1.0 - (_2967 * _2967))));
                                float _2976 = _2975 * _2975;
                                float _2977 = _2976 * _2976;
                                float _2978 = _2924 - _2353;
                                float _2979 = _2925 - _2354;
                                float _2980 = _2926 - _2355;
                                float _2984 = inversesqrt(dot(vec3(_2978, _2979, _2980), vec3(_2978, _2979, _2980)));
                                float _2988 = dot(vec3(_692, _695, _698), vec3((-0.0) - _2353, (-0.0) - _2354, (-0.0) - _2355));
                                float _3905 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
                                float _2991 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
                                float _2992 = dot(vec3(_692, _695, _698), vec3(_2984 * _2978, _2984 * _2979, _2984 * _2980));
                                float _3916 = isnan(0.0) ? _2992 : (isnan(_2992) ? 0.0 : max(_2992, 0.0));
                                float _2995 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
                                float _2999 = ((_2995 * _2995) * (_2977 + (-1.0))) + 1.0;
                                float _3000 = _2937 * _2976;
                                float _3001 = _3000 * _3000;
                                float _3007 = ((1.0 - _3001) * dot(vec3(_692, _695, _698), vec3(_2924, _2925, _2926))) + _3001;
                                float _3927 = isnan(0.0) ? _3007 : (isnan(_3007) ? 0.0 : max(_3007, 0.0));
                                float _3008 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
                                float _3009 = 1.0 - _2976;
                                float _3019 = (0.5 / (((_3008 * ((_2991 * _3009) + _2976)) + 9.9999999392252902907785028219223e-09) + (((_3008 * _3009) + _2976) * _2991))) * _3008;
                                float _3938 = isnan(0.0) ? _3019 : (isnan(_3019) ? 0.0 : max(_3019, 0.0));
                                float _3029 = (_2954 * _2931) * (((_2977 * 3.1415927410125732421875) * (isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0)))) / ((_2999 * _2999) * ((_2944 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_77_pred = _3029 * _2811.y;
                                frontier_phi_77_pred_1 = _3029 * _2811.x;
                                frontier_phi_77_pred_2 = _2955 * _2799.z;
                                frontier_phi_77_pred_3 = _2955 * _2799.y;
                                frontier_phi_77_pred_4 = _2955 * _2799.x;
                                frontier_phi_77_pred_5 = _3029 * _2811.z;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                                frontier_phi_77_pred_3 = 0.0;
                                frontier_phi_77_pred_4 = 0.0;
                                frontier_phi_77_pred_5 = 0.0;
                            }
                            _3034 = frontier_phi_77_pred;
                            _3033 = frontier_phi_77_pred_1;
                            _3038 = frontier_phi_77_pred_2;
                            _3037 = frontier_phi_77_pred_3;
                            _3036 = frontier_phi_77_pred_4;
                            _3035 = frontier_phi_77_pred_5;
                            _2741 = _3036 + _2754;
                            _2742 = _3037 + _2755;
                            _2743 = _3038 + _2756;
                            _2738 = _3033 + _2751;
                            _2739 = _3034 + _2752;
                            _2740 = _3035 + _2753;
                            if (_2758 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2751 = _2738;
                                _2752 = _2739;
                                _2753 = _2740;
                                _2754 = _2741;
                                _2755 = _2742;
                                _2756 = _2743;
                                _2757 = _2758;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _2739;
                        frontier_phi_71_pred_1 = _2738;
                        frontier_phi_71_pred_2 = _2743;
                        frontier_phi_71_pred_3 = _2742;
                        frontier_phi_71_pred_4 = _2741;
                        frontier_phi_71_pred_5 = _2740;
                    }
                    _2330 = frontier_phi_71_pred;
                    _2328 = frontier_phi_71_pred_1;
                    _2338 = frontier_phi_71_pred_2;
                    _2336 = frontier_phi_71_pred_3;
                    _2334 = frontier_phi_71_pred_4;
                    _2332 = frontier_phi_71_pred_5;
                    uint _2524 = _2523 + 1u;
                    if (_2524 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2517 = _2328;
                        _2518 = _2330;
                        _2519 = _2332;
                        _2520 = _2334;
                        _2521 = _2336;
                        _2522 = _2338;
                        _2523 = _2524;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_53_54_ladder = _2338;
                frontier_phi_53_54_ladder_1 = _2334;
                frontier_phi_53_54_ladder_2 = _2332;
                frontier_phi_53_54_ladder_3 = _2330;
                frontier_phi_53_54_ladder_4 = _2328;
                frontier_phi_53_54_ladder_5 = _2336;
            }
            else
            {
                frontier_phi_53_54_ladder = _2193;
                frontier_phi_53_54_ladder_1 = _2189;
                frontier_phi_53_54_ladder_2 = _2187;
                frontier_phi_53_54_ladder_3 = _2185;
                frontier_phi_53_54_ladder_4 = _2183;
                frontier_phi_53_54_ladder_5 = _2191;
            }
            _2327 = frontier_phi_53_54_ladder_4;
            _2329 = frontier_phi_53_54_ladder_3;
            _2331 = frontier_phi_53_54_ladder_2;
            _2333 = frontier_phi_53_54_ladder_1;
            _2335 = frontier_phi_53_54_ladder_5;
            _2337 = frontier_phi_53_54_ladder;
        }
        float _2342 = isnan(1.0) ? _736 : (isnan(_736) ? 1.0 : min(_736, 1.0));
        _2105 = (_2342 * _2333) + _1835;
        _2107 = (_2342 * _2335) + _1836;
        _2109 = (_2342 * _2337) + _1837;
        _2111 = ((_2327 * 0.039999999105930328369140625) * _2342) + _1988;
        _2113 = ((_2329 * 0.039999999105930328369140625) * _2342) + _1989;
        _2115 = ((_2331 * 0.039999999105930328369140625) * _2342) + _1990;
    }
    else
    {
        _2105 = _1835;
        _2107 = _1836;
        _2109 = _1837;
        _2111 = _1988;
        _2113 = _1989;
        _2115 = _1990;
    }
    float _3954 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _3965 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _3976 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _2132 = ((isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0))) * (_2105 + ((isnan(0.0) ? _1467 : (isnan(_1467) ? 0.0 : max(_1467, 0.0))) * _736))) + ((_2111 + ((isnan(0.0) ? _1758 : (isnan(_1758) ? 0.0 : max(_1758, 0.0))) * _1546)) * cbPerFrame._m0[3u].x);
    float _2133 = ((isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0))) * (_2107 + ((isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0))) * _736))) + ((_2113 + ((isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0))) * _1546)) * cbPerFrame._m0[3u].x);
    float _2134 = ((isnan(1.0) ? _3976 : (isnan(_3976) ? 1.0 : min(_3976, 1.0))) * (_2109 + ((isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0))) * _736))) + ((_2115 + ((isnan(0.0) ? _1764 : (isnan(_1764) ? 0.0 : max(_1764, 0.0))) * _1546)) * cbPerFrame._m0[3u].x);
    uint _2138 = _711 + 6u;
    float _2146 = _671 / cbSceneParam._m0[86u].x;
    float _2147 = _672 / cbSceneParam._m0[86u].y;
    vec4 _2161 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2146, _2147, (log2((isnan(cbSceneParam._m0[77u].w) ? _658 : (isnan(_658) ? cbSceneParam._m0[77u].w : min(_658, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2163 = _2161.x;
    float _2164 = _2161.y;
    float _2165 = _2161.z;
    float _2166 = _2161.w;
    float _2246;
    float _2248;
    float _2250;
    float _2252;
    if (_658 > cbSceneParam._m0[78u].w)
    {
        float _2208 = isnan(_658) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _658 : min(cbSceneParam._m0[80u].w, _658));
        float _2209 = _2208 / _658;
        float _2220 = _2209 * _273;
        float _2221 = _274 * _2209;
        float _2222 = (-0.0) - _2221;
        float _2223 = _2209 * _275;
        float _2225 = (cbSceneParam._m0[77u].w * _2222) / _2208;
        float _2226 = _2225 + cbSceneParam._m0[79u].w;
        float _2227 = cbSceneParam._m0[79u].w - _2221;
        float _2233 = sqrt(((_2220 * _2220) + (_2221 * _2221)) + (_2223 * _2223));
        float _2236 = (1.0 - (cbSceneParam._m0[77u].w / _2208)) * _2233;
        float _2242 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2244 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2453;
        if (abs((_2222 - _2225) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2453 = ((((_2226 > 0.0) ? exp2(_2242 * _2226) : (2.0 - exp2(_2244 * _2226))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2236;
        }
        else
        {
            float _2388 = 1.0 / cbSceneParam._m0[80u].x;
            float _2389 = isnan(_2227) ? _2226 : (isnan(_2226) ? _2227 : max(_2226, _2227));
            float _2390 = isnan(_2227) ? _2226 : (isnan(_2226) ? _2227 : min(_2226, _2227));
            float _2399 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : min(_2389, 0.0));
            float _2400 = isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : min(_2390, 0.0));
            _2453 = ((abs(_2233 / _2222) * cbSceneParam._m0[80u].y) * ((((_2399 - _2400) * 2.0) - ((exp2(_2242 * (isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0)))) - exp2(_2242 * (isnan(0.0) ? _2390 : (isnan(_2390) ? 0.0 : max(_2390, 0.0))))) * _2388)) - ((exp2(_2244 * _2399) - exp2(_2244 * _2400)) * _2388))) + (_2236 * cbSceneParam._m0[80u].z);
        }
        vec4 _2455 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2146, _2147, 1.0), 0.0);
        float _2464 = exp2((_2453 * (-1.44269502162933349609375)) * (1.0 - _2455.w));
        float _2465 = log2(_2464);
        float _2481 = log2(_2166);
        _2246 = (exp2(_2481 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2465 * cbSceneParam._m0[78u].x)) * _2455.x) / cbSceneParam._m0[78u].x)) + _2163;
        _2248 = (exp2(_2481 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2465 * cbSceneParam._m0[78u].y)) * _2455.y) / cbSceneParam._m0[78u].y)) + _2164;
        _2250 = (exp2(_2481 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2465 * cbSceneParam._m0[78u].z)) * _2455.z) / cbSceneParam._m0[78u].z)) + _2165;
        _2252 = _2464 * _2166;
    }
    else
    {
        _2246 = _2163;
        _2248 = _2164;
        _2250 = _2165;
        _2252 = _2166;
    }
    float _2264 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2265 = _2264 == 3.0;
    float _2266 = log2(_2252);
    float _2273 = exp2(_2266 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0)));
    float _2274 = exp2(_2266 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2133 : (isnan(_2133) ? 0.0 : max(_2133, 0.0)));
    float _2275 = exp2(_2266 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2134 : (isnan(_2134) ? 0.0 : max(_2134, 0.0)));
    float _2284 = (_2264 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2284 * (_2265 ? _2273 : (_2273 + (cbSceneParam._m0[72u].w * _2246)));
    SV_Target.y = _2284 * (_2265 ? _2274 : (_2274 + (cbSceneParam._m0[72u].w * _2248)));
    SV_Target.z = _2284 * (_2265 ? _2275 : (_2275 + (cbSceneParam._m0[72u].w * _2250)));
    SV_Target.w = cbInstanceData._m0[_2138].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2138].w;
}


