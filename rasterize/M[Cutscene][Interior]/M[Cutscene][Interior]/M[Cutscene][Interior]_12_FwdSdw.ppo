#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _920;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _284 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _319 = cbMtdParam._m0[24u].x + _263;
    float _320 = cbMtdParam._m0[24u].y + _264;
    float _321 = cbMtdParam._m0[24u].z + _265;
    float _335 = (-0.0) - dot(vec3(_319, _320, _321), vec3(_191 * _184, _191 * _185, _191 * _186));
    float _336 = (-0.0) - dot(vec3(_319, _320, _321), vec3(_205 * TANGENT.x, _205 * TANGENT.y, _205 * TANGENT.z));
    float _337 = (-0.0) - dot(vec3(_319, _320, _321), vec3((-0.0) - (_198 * NORMAL.x), (-0.0) - (_198 * NORMAL.y), (-0.0) - (_198 * NORMAL.z)));
    float _341 = inversesqrt(dot(vec3(_335, _336, _337), vec3(_335, _336, _337)));
    float _344 = _341 * _337;
    float _345 = (_341 * _335) + (((_284.x * 2.0) + (-1.0)) * cbMtdParam._m0[22u].x);
    float _346 = (_341 * _336) + (((_284.y * 2.0) + (-1.0)) * cbMtdParam._m0[22u].y);
    float _347 = _345 * cbMtdParam._m0[20u].w;
    float _348 = _346 * cbMtdParam._m0[20u].z;
    float _349 = fract(TEXCOORD.x);
    float _350 = fract(TEXCOORD.y);
    float _356;
    if (_347 > 0.0)
    {
        _356 = (1.0 - _349) / _347;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_347 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _349) / _347;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _356 = frontier_phi_3_2_ladder;
    }
    float _364;
    if (_348 > 0.0)
    {
        _364 = (1.0 - _350) / _348;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_348 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _350) / _348;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _364 = frontier_phi_7_6_ladder;
    }
    bool _366 = _344 > 0.0;
    float _368 = _366 ? (cbMtdParam._m0[16u].x / _344) : 5000.0;
    float _369 = isnan(_364) ? _356 : (isnan(_356) ? _364 : min(_356, _364));
    float _370 = isnan(_368) ? _369 : (isnan(_369) ? _368 : min(_369, _368));
    float _374 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _375 = _349 + (-0.5);
    float _378 = _350 + (-0.5);
    float _381 = ((_370 * _344) + _374) / _374;
    vec4 _406 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (((((_375 + (_370 * _347)) / _381) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (((((_378 + (_370 * _348)) / _381) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    float _416 = cbMtdParam._m0[9u].x * _406.x;
    float _417 = cbMtdParam._m0[9u].y * _406.y;
    float _418 = cbMtdParam._m0[9u].z * _406.z;
    float _437 = _345 * cbMtdParam._m0[22u].w;
    float _438 = _346 * cbMtdParam._m0[22u].z;
    bool _439 = _437 > 0.0;
    float _444;
    if (_439)
    {
        _444 = (1.0 - _349) / _437;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_437 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _349) / _437;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _444 = frontier_phi_11_10_ladder;
    }
    bool _446 = _438 > 0.0;
    float _451;
    if (_446)
    {
        _451 = (1.0 - _350) / _438;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_438 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _350) / _438;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _451 = frontier_phi_15_14_ladder;
    }
    float _454 = _366 ? (cbMtdParam._m0[18u].x / _344) : 5000.0;
    float _455 = isnan(_451) ? _444 : (isnan(_444) ? _451 : min(_444, _451));
    float _456 = isnan(_454) ? _455 : (isnan(_455) ? _454 : min(_455, _454));
    float _460 = cbMtdParam._m0[19u].y * cbMtdParam._m0[18u].x;
    float _464 = ((_456 * _344) + _460) / _460;
    float _469 = cbMtdParam._m0[19u].x - cbMtdParam._m0[20u].x * trunc(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    float _471 = floor(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    vec4 _487 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_375 + (_456 * _437)) / _464) + 0.5) + _469) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_378 + (_456 * _438)) / _464) + 0.5) + _471) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[0u].w));
    float _499;
    if (_439)
    {
        _499 = (1.0 - _349) / _437;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_437 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _349) / _437;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _499 = frontier_phi_19_18_ladder;
    }
    float _505;
    if (_446)
    {
        _505 = (1.0 - _350) / _438;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_438 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _350) / _438;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _505 = frontier_phi_23_22_ladder;
    }
    float _507 = isnan(_505) ? _499 : (isnan(_499) ? _505 : min(_499, _505));
    float _508 = isnan(_454) ? _507 : (isnan(_507) ? _454 : min(_507, _454));
    float _515 = ((_508 * _344) + _460) / _460;
    vec4 _535 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_375 + (_508 * _437)) / _515) + 0.5) + _469) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_378 + (_508 * _438)) / _515) + 0.5) + _471) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[8u].w));
    float _537 = _535.x;
    float _544 = (_537 * ((_487.x * cbMtdParam._m0[10u].x) - _416)) + _416;
    float _545 = (_537 * ((_487.y * cbMtdParam._m0[10u].y) - _417)) + _417;
    float _546 = (_537 * ((_487.z * cbMtdParam._m0[10u].z) - _418)) + _418;
    float _3136 = isnan(0.0) ? _544 : (isnan(_544) ? 0.0 : max(_544, 0.0));
    float _3147 = isnan(0.0) ? _545 : (isnan(_545) ? 0.0 : max(_545, 0.0));
    float _3158 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _565 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _569 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _570 = _263 * _569;
    float _571 = _264 * _569;
    float _572 = _265 * _569;
    float _578 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _579 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _592 = uint(roundEven(NORMAL.w)) * 13u;
    uint _595 = (_592 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _601 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3136 : (isnan(_3136) ? 1.0 : min(_3136, 1.0)))) * cbInstanceData._m0[_595].x;
    float _602 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3147 : (isnan(_3147) ? 1.0 : min(_3147, 1.0)))) * cbInstanceData._m0[_595].y;
    float _603 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3158 : (isnan(_3158) ? 1.0 : min(_3158, 1.0)))) * cbInstanceData._m0[_595].z;
    float _3169 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _604 = isnan(1.0) ? _3169 : (isnan(_3169) ? 1.0 : min(_3169, 1.0));
    float _3180 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _605 = isnan(1.0) ? _3180 : (isnan(_3180) ? 1.0 : min(_3180, 1.0));
    float _3191 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _606 = isnan(1.0) ? _3191 : (isnan(_3191) ? 1.0 : min(_3191, 1.0));
    vec4 _615 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _578, cbSceneParam._m0[86u].y * _579));
    float _618 = _615.x * TEXCOORD_4.z;
    float _619 = (-0.0) - _570;
    float _620 = (-0.0) - _571;
    float _621 = (-0.0) - _572;
    float _643 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _647 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _651 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _919;
    float _921;
    float _922;
    float _923;
    float _924;
    float _925;
    float _926;
    float _927;
    float _928;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _707 = (cbModelParam._m0[37u].x * ((((fma(_651, cbModelParam._m0[26u].z, fma(_647, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _643)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _709 = (cbModelParam._m0[37u].y * ((((fma(_651, cbModelParam._m0[27u].z, fma(_647, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _643)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _710 = (((((fma(_651, cbModelParam._m0[28u].z, fma(_647, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _643)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _713 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_707, _709, _710), 0.0);
        vec4 _720 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_707, _709, _710), 0.0);
        vec4 _727 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_707, _709, _710), 0.0);
        vec4 _734 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_707, _709, _710), 0.0);
        float _747 = exp2((_713.w + (-0.5)) * 20.0) * 2.0;
        float _748 = _747 * (_713.x + (-0.5));
        float _749 = _747 * (_713.y + (-0.5));
        float _750 = _747 * (_713.z + (-0.5));
        float _757 = exp2((_720.w + (-0.5)) * 20.0) * 2.0;
        float _758 = _757 * (_720.x + (-0.5));
        float _759 = _757 * (_720.y + (-0.5));
        float _760 = _757 * (_720.z + (-0.5));
        float _767 = exp2((_727.w + (-0.5)) * 20.0) * 2.0;
        float _768 = _767 * (_727.x + (-0.5));
        float _769 = _767 * (_727.y + (-0.5));
        float _770 = _767 * (_727.z + (-0.5));
        float _777 = exp2((_734.w + (-0.5)) * 20.0) * 2.0;
        float _778 = _777 * (_734.x + (-0.5));
        float _779 = _777 * (_734.y + (-0.5));
        float _780 = _777 * (_734.z + (-0.5));
        float _781 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
        float _782 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
        float _783 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _784 = _748 * 0.5;
        float _785 = _758 * 0.5;
        float _786 = _768 * 0.5;
        float _787 = dot(vec3(_784, _785, _786), vec3(_784, _785, _786));
        float _792 = (_787 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_787);
        float _801 = (dot(vec3(0.0), vec3(_792 * _784, _792 * _785, _792 * _786)) + 1.0) * 0.5;
        float _3217 = isnan(0.0) ? _801 : (isnan(_801) ? 0.0 : max(_801, 0.0));
        float _811 = sqrt(((_785 * _785) + (_784 * _784)) + (_786 * _786)) / (_781 + 9.9999997473787516355514526367188e-06);
        float _3228 = isnan(0.0) ? _811 : (isnan(_811) ? 0.0 : max(_811, 0.0));
        float _812 = isnan(1.0) ? _3228 : (isnan(_3228) ? 1.0 : min(_3228, 1.0));
        float _813 = _812 * 2.0;
        float _817 = (1.0 - _812) / (_812 + 1.0);
        float _3239 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        float _818 = isnan(1.0) ? _3239 : (isnan(_3239) ? 1.0 : min(_3239, 1.0));
        float _827 = ((((1.0 - _818) * (_813 + 2.0)) * exp2(log2(isnan(1.0) ? _3217 : (isnan(_3217) ? 1.0 : min(_3217, 1.0))) * (_813 + 1.0))) + _818) * _781;
        float _828 = _749 * 0.5;
        float _829 = _759 * 0.5;
        float _830 = _769 * 0.5;
        float _831 = dot(vec3(_828, _829, _830), vec3(_828, _829, _830));
        float _836 = (_831 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_831);
        float _844 = (dot(vec3(0.0), vec3(_836 * _828, _836 * _829, _836 * _830)) + 1.0) * 0.5;
        float _3250 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _853 = sqrt(((_829 * _829) + (_828 * _828)) + (_830 * _830)) / (_782 + 9.9999997473787516355514526367188e-06);
        float _3261 = isnan(0.0) ? _853 : (isnan(_853) ? 0.0 : max(_853, 0.0));
        float _854 = isnan(1.0) ? _3261 : (isnan(_3261) ? 1.0 : min(_3261, 1.0));
        float _855 = _854 * 2.0;
        float _859 = (1.0 - _854) / (_854 + 1.0);
        float _3272 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _860 = isnan(1.0) ? _3272 : (isnan(_3272) ? 1.0 : min(_3272, 1.0));
        float _869 = ((((1.0 - _860) * (_855 + 2.0)) * exp2(log2(isnan(1.0) ? _3250 : (isnan(_3250) ? 1.0 : min(_3250, 1.0))) * (_855 + 1.0))) + _860) * _782;
        float _870 = _750 * 0.5;
        float _871 = _760 * 0.5;
        float _872 = _770 * 0.5;
        float _873 = dot(vec3(_870, _871, _872), vec3(_870, _871, _872));
        float _878 = (_873 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_873);
        float _886 = (dot(vec3(0.0), vec3(_878 * _870, _878 * _871, _878 * _872)) + 1.0) * 0.5;
        float _3283 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _895 = sqrt(((_871 * _871) + (_870 * _870)) + (_872 * _872)) / (_783 + 9.9999997473787516355514526367188e-06);
        float _3294 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
        float _896 = isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0));
        float _897 = _896 * 2.0;
        float _901 = (1.0 - _896) / (_896 + 1.0);
        float _3305 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
        float _902 = isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0));
        float _911 = ((((1.0 - _902) * (_897 + 2.0)) * exp2(log2(isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0))) * (_897 + 1.0))) + _902) * _783;
        _919 = _750;
        _921 = _749;
        _922 = _748;
        _923 = _760;
        _924 = _759;
        _925 = _758;
        _926 = _770;
        _927 = _769;
        _928 = _768;
        _929 = _783;
        _930 = _782;
        _931 = _781;
        _932 = cbModelParam._m0[36u].z * (isnan(0.0) ? _827 : (isnan(_827) ? 0.0 : max(_827, 0.0)));
        _933 = cbModelParam._m0[36u].z * (isnan(0.0) ? _869 : (isnan(_869) ? 0.0 : max(_869, 0.0)));
        _934 = cbModelParam._m0[36u].z * (isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0)));
    }
    else
    {
        _919 = _920;
        _921 = _920;
        _922 = _920;
        _923 = _920;
        _924 = _920;
        _925 = _920;
        _926 = _920;
        _927 = _920;
        _928 = _920;
        _929 = _920;
        _930 = _920;
        _931 = _920;
        _932 = 0.0;
        _933 = 0.0;
        _934 = 0.0;
    }
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    float _1206;
    float _1207;
    float _1208;
    float _1209;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _988 = (cbModelParam._m0[38u].x * ((((fma(_651, cbModelParam._m0[30u].z, fma(_647, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _643)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _989 = (cbModelParam._m0[38u].y * ((((fma(_651, cbModelParam._m0[31u].z, fma(_647, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _643)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _990 = (((((fma(_651, cbModelParam._m0[32u].z, fma(_647, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _643)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _992 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_988, _989, _990), 0.0);
        vec4 _999 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_988, _989, _990), 0.0);
        vec4 _1006 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_988, _989, _990), 0.0);
        vec4 _1013 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_988, _989, _990), 0.0);
        float _1025 = exp2((_992.w + (-0.5)) * 20.0) * 2.0;
        float _1026 = _1025 * (_992.x + (-0.5));
        float _1027 = _1025 * (_992.y + (-0.5));
        float _1028 = _1025 * (_992.z + (-0.5));
        float _1035 = exp2((_999.w + (-0.5)) * 20.0) * 2.0;
        float _1036 = _1035 * (_999.x + (-0.5));
        float _1037 = _1035 * (_999.y + (-0.5));
        float _1038 = _1035 * (_999.z + (-0.5));
        float _1045 = exp2((_1006.w + (-0.5)) * 20.0) * 2.0;
        float _1046 = _1045 * (_1006.x + (-0.5));
        float _1047 = _1045 * (_1006.y + (-0.5));
        float _1048 = _1045 * (_1006.z + (-0.5));
        float _1055 = exp2((_1013.w + (-0.5)) * 20.0) * 2.0;
        float _1056 = _1055 * (_1013.x + (-0.5));
        float _1057 = _1055 * (_1013.y + (-0.5));
        float _1058 = _1055 * (_1013.z + (-0.5));
        float _1059 = isnan(0.0) ? _1056 : (isnan(_1056) ? 0.0 : max(_1056, 0.0));
        float _1060 = isnan(0.0) ? _1057 : (isnan(_1057) ? 0.0 : max(_1057, 0.0));
        float _1061 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1062 = _1026 * 0.5;
        float _1063 = _1036 * 0.5;
        float _1064 = _1046 * 0.5;
        float _1065 = dot(vec3(_1062, _1063, _1064), vec3(_1062, _1063, _1064));
        float _1070 = (_1065 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1065);
        float _1078 = (dot(vec3(0.0), vec3(_1070 * _1062, _1070 * _1063, _1070 * _1064)) + 1.0) * 0.5;
        float _3346 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1087 = sqrt(((_1063 * _1063) + (_1062 * _1062)) + (_1064 * _1064)) / (_1059 + 9.9999997473787516355514526367188e-06);
        float _3357 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3357 : (isnan(_3357) ? 1.0 : min(_3357, 1.0));
        float _1089 = _1088 * 2.0;
        float _1093 = (1.0 - _1088) / (_1088 + 1.0);
        float _3368 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3368 : (isnan(_3368) ? 1.0 : min(_3368, 1.0));
        float _1103 = ((((1.0 - _1094) * (_1089 + 2.0)) * exp2(log2(isnan(1.0) ? _3346 : (isnan(_3346) ? 1.0 : min(_3346, 1.0))) * (_1089 + 1.0))) + _1094) * _1059;
        float _1104 = _1027 * 0.5;
        float _1105 = _1037 * 0.5;
        float _1106 = _1047 * 0.5;
        float _1107 = dot(vec3(_1104, _1105, _1106), vec3(_1104, _1105, _1106));
        float _1112 = (_1107 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1107);
        float _1120 = (dot(vec3(0.0), vec3(_1112 * _1104, _1112 * _1105, _1112 * _1106)) + 1.0) * 0.5;
        float _3379 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1129 = sqrt(((_1105 * _1105) + (_1104 * _1104)) + (_1106 * _1106)) / (_1060 + 9.9999997473787516355514526367188e-06);
        float _3390 = isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0));
        float _1130 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
        float _1131 = _1130 * 2.0;
        float _1135 = (1.0 - _1130) / (_1130 + 1.0);
        float _3401 = isnan(0.0) ? _1135 : (isnan(_1135) ? 0.0 : max(_1135, 0.0));
        float _1136 = isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0));
        float _1145 = ((((1.0 - _1136) * (_1131 + 2.0)) * exp2(log2(isnan(1.0) ? _3379 : (isnan(_3379) ? 1.0 : min(_3379, 1.0))) * (_1131 + 1.0))) + _1136) * _1060;
        float _1146 = _1028 * 0.5;
        float _1147 = _1038 * 0.5;
        float _1148 = _1048 * 0.5;
        float _1149 = dot(vec3(_1146, _1147, _1148), vec3(_1146, _1147, _1148));
        float _1154 = (_1149 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1149);
        float _1162 = (dot(vec3(0.0), vec3(_1154 * _1146, _1154 * _1147, _1154 * _1148)) + 1.0) * 0.5;
        float _3412 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1171 = sqrt(((_1147 * _1147) + (_1146 * _1146)) + (_1148 * _1148)) / (_1061 + 9.9999997473787516355514526367188e-06);
        float _3423 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1172 = isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0));
        float _1173 = _1172 * 2.0;
        float _1177 = (1.0 - _1172) / (_1172 + 1.0);
        float _3434 = isnan(0.0) ? _1177 : (isnan(_1177) ? 0.0 : max(_1177, 0.0));
        float _1178 = isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0));
        float _1187 = ((((1.0 - _1178) * (_1173 + 2.0)) * exp2(log2(isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0))) * (_1173 + 1.0))) + _1178) * _1061;
        _1195 = _1028;
        _1196 = _1027;
        _1197 = _1026;
        _1198 = _1038;
        _1199 = _1037;
        _1200 = _1036;
        _1201 = _1048;
        _1202 = _1047;
        _1203 = _1046;
        _1204 = _1061;
        _1205 = _1060;
        _1206 = _1059;
        _1207 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0)));
        _1208 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1145 : (isnan(_1145) ? 0.0 : max(_1145, 0.0)));
        _1209 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0)));
    }
    else
    {
        _1195 = _920;
        _1196 = _920;
        _1197 = _920;
        _1198 = _920;
        _1199 = _920;
        _1200 = _920;
        _1201 = _920;
        _1202 = _920;
        _1203 = _920;
        _1204 = _920;
        _1205 = _920;
        _1206 = _920;
        _1207 = 0.0;
        _1208 = 0.0;
        _1209 = 0.0;
    }
    float _1219 = (cbModelParam._m0[1u].x * (_1207 - _932)) + _932;
    float _1220 = (cbModelParam._m0[1u].x * (_1208 - _933)) + _933;
    float _1221 = (cbModelParam._m0[1u].x * (_1209 - _934)) + _934;
    float _1242 = fma(_1221, cbSceneParam._m0[89u].z, fma(_1220, cbSceneParam._m0[89u].y, _1219 * cbSceneParam._m0[89u].x));
    float _1245 = fma(_1221, cbSceneParam._m0[90u].z, fma(_1220, cbSceneParam._m0[90u].y, _1219 * cbSceneParam._m0[90u].x));
    float _1248 = fma(_1221, cbSceneParam._m0[91u].z, fma(_1220, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1219));
    float _1263 = _570 * (-0.5);
    float _1264 = _571 * (-0.5);
    float _1265 = _572 * (-0.5);
    float _1266 = dot(vec4(_1263, _1264, _1265, 1.0), vec4(_1197, _1200, _1203, _1206));
    float _1269 = dot(vec4(_1263, _1264, _1265, 1.0), vec4(_1196, _1199, _1202, _1205));
    float _1272 = dot(vec4(_1263, _1264, _1265, 1.0), vec4(_1195, _1198, _1201, _1204));
    float _1306;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1279 = dot(vec4(_1263, _1264, _1265, 1.0), vec4(_919, _923, _926, _929));
        float _1283 = dot(vec4(_1263, _1264, _1265, 1.0), vec4(_921, _924, _927, _930));
        float _1287 = dot(vec4(_1263, _1264, _1265, 1.0), vec4(_922, _925, _928, _931));
        float _1294 = dot(vec4(cbModelParam._m0[39u]), vec4(_1263, _1264, _1265, 1.0));
        _1306 = dot(vec3(isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)), isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)), isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1294) ? 0.0 : (isnan(0.0) ? _1294 : max(0.0, _1294))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1306 = 1.0;
    }
    float _1317;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1308 = dot(vec4(cbModelParam._m0[40u]), vec4(_1263, _1264, _1265, 1.0));
        _1317 = dot(vec3(isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)), isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0)), isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1308) ? 0.0 : (isnan(0.0) ? _1308 : max(0.0, _1308))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1317 = 1.0;
    }
    float _1321 = (_1317 * cbModelParam._m0[1u].x) + (_1306 * (1.0 - cbModelParam._m0[1u].x));
    float _1330 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1413;
    float _1415;
    float _1417;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1380 = fma(_651, cbModelParam._m0[13u].z, fma(_647, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _643)) + cbModelParam._m0[13u].w;
        float _1384 = fma(_651, cbModelParam._m0[14u].z, fma(_647, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _643)) + cbModelParam._m0[14u].w;
        float _1388 = fma(_651, cbModelParam._m0[15u].z, fma(_647, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _643)) + cbModelParam._m0[15u].w;
        float _1391 = fma(_621, cbModelParam._m0[13u].z, fma(_620, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _619));
        float _1394 = fma(_621, cbModelParam._m0[14u].z, fma(_620, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _619));
        float _1397 = fma(_621, cbModelParam._m0[15u].z, fma(_620, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _619));
        float _1423;
        if (_1391 > 0.0)
        {
            _1423 = abs((1.0 - _1380) / _1391);
        }
        else
        {
            float frontier_phi_38_36_ladder;
            if (_1391 < 0.0)
            {
                frontier_phi_38_36_ladder = abs((_1380 + 1.0) / _1391);
            }
            else
            {
                frontier_phi_38_36_ladder = 5000.0;
            }
            _1423 = frontier_phi_38_36_ladder;
        }
        float _1593;
        if (_1394 > 0.0)
        {
            _1593 = abs((1.0 - _1384) / _1394);
        }
        else
        {
            float frontier_phi_47_43_ladder;
            if (_1394 < 0.0)
            {
                frontier_phi_47_43_ladder = abs((_1384 + 1.0) / _1394);
            }
            else
            {
                frontier_phi_47_43_ladder = 5000.0;
            }
            _1593 = frontier_phi_47_43_ladder;
        }
        float _1988;
        if (_1397 > 0.0)
        {
            _1988 = abs((1.0 - _1388) / _1397);
        }
        else
        {
            float frontier_phi_59_54_ladder;
            if (_1397 < 0.0)
            {
                frontier_phi_59_54_ladder = abs((_1388 + 1.0) / _1397);
            }
            else
            {
                frontier_phi_59_54_ladder = 5000.0;
            }
            _1988 = frontier_phi_59_54_ladder;
        }
        float _1990 = isnan(_1593) ? _1423 : (isnan(_1423) ? _1593 : min(_1423, _1593));
        float _1991 = isnan(_1988) ? _1990 : (isnan(_1990) ? _1988 : min(_1990, _1988));
        float _1995 = (_1991 * _1391) + _1380;
        float _1996 = (_1991 * _1394) + _1384;
        float _1997 = (_1991 * _1397) + _1388;
        float _1998 = _1991 * 9.9999997473787516355514526367188e-05;
        float _2000 = (-1.0) - _1998;
        float _2002 = _1998 + 1.0;
        float frontier_phi_37_59_ladder;
        float frontier_phi_37_59_ladder_1;
        float frontier_phi_37_59_ladder_2;
        if ((_1997 > _2002) || ((_1997 < _2000) || ((_1996 > _2002) || ((_1996 < _2000) || ((_1995 < _2000) || (_1995 > _2002))))))
        {
            frontier_phi_37_59_ladder = 0.0;
            frontier_phi_37_59_ladder_1 = 0.0;
            frontier_phi_37_59_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2231 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1997, cbModelParam._m0[9u].z, fma(_1996, cbModelParam._m0[9u].y, _1995 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1997, cbModelParam._m0[10u].z, fma(_1996, cbModelParam._m0[10u].y, _1995 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1997, cbModelParam._m0[11u].z, fma(_1996, cbModelParam._m0[11u].y, _1995 * cbModelParam._m0[11u].x))), _1330);
            frontier_phi_37_59_ladder = _2231.z * cbModelParam._m0[1u].y;
            frontier_phi_37_59_ladder_1 = _2231.y * cbModelParam._m0[1u].y;
            frontier_phi_37_59_ladder_2 = _2231.x * cbModelParam._m0[1u].y;
        }
        _1413 = frontier_phi_37_59_ladder_2;
        _1415 = frontier_phi_37_59_ladder_1;
        _1417 = frontier_phi_37_59_ladder;
    }
    else
    {
        vec4 _1401 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_619, _620, _621), _1330);
        _1413 = _1401.x * cbModelParam._m0[1u].y;
        _1415 = _1401.y * cbModelParam._m0[1u].y;
        _1417 = _1401.z * cbModelParam._m0[1u].y;
    }
    float _1420 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1508;
    float _1510;
    float _1512;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1472 = fma(_651, cbModelParam._m0[21u].z, fma(_647, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _643)) + cbModelParam._m0[21u].w;
        float _1476 = fma(_651, cbModelParam._m0[22u].z, fma(_647, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _643)) + cbModelParam._m0[22u].w;
        float _1480 = fma(_651, cbModelParam._m0[23u].z, fma(_647, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _643)) + cbModelParam._m0[23u].w;
        float _1483 = fma(_621, cbModelParam._m0[21u].z, fma(_620, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _619));
        float _1486 = fma(_621, cbModelParam._m0[22u].z, fma(_620, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _619));
        float _1489 = fma(_621, cbModelParam._m0[23u].z, fma(_620, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _619));
        float _1598;
        if (_1483 > 0.0)
        {
            _1598 = abs((1.0 - _1472) / _1483);
        }
        else
        {
            float frontier_phi_49_45_ladder;
            if (_1483 < 0.0)
            {
                frontier_phi_49_45_ladder = abs((_1472 + 1.0) / _1483);
            }
            else
            {
                frontier_phi_49_45_ladder = 5000.0;
            }
            _1598 = frontier_phi_49_45_ladder;
        }
        float _2015;
        if (_1486 > 0.0)
        {
            _2015 = abs((1.0 - _1476) / _1486);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1486 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1476 + 1.0) / _1486);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2015 = frontier_phi_61_56_ladder;
        }
        float _2353;
        if (_1489 > 0.0)
        {
            _2353 = abs((1.0 - _1480) / _1489);
        }
        else
        {
            float frontier_phi_73_68_ladder;
            if (_1489 < 0.0)
            {
                frontier_phi_73_68_ladder = abs((_1480 + 1.0) / _1489);
            }
            else
            {
                frontier_phi_73_68_ladder = 5000.0;
            }
            _2353 = frontier_phi_73_68_ladder;
        }
        float _2355 = isnan(_2015) ? _1598 : (isnan(_1598) ? _2015 : min(_1598, _2015));
        float _2356 = isnan(_2353) ? _2355 : (isnan(_2355) ? _2353 : min(_2355, _2353));
        float _2360 = (_2356 * _1483) + _1472;
        float _2361 = (_2356 * _1486) + _1476;
        float _2362 = (_2356 * _1489) + _1480;
        float _2363 = _2356 * 9.9999997473787516355514526367188e-05;
        float _2364 = (-1.0) - _2363;
        float _2366 = _2363 + 1.0;
        float frontier_phi_46_73_ladder;
        float frontier_phi_46_73_ladder_1;
        float frontier_phi_46_73_ladder_2;
        if ((_2362 > _2366) || ((_2362 < _2364) || ((_2361 > _2366) || ((_2361 < _2364) || ((_2360 < _2364) || (_2360 > _2366))))))
        {
            frontier_phi_46_73_ladder = 0.0;
            frontier_phi_46_73_ladder_1 = 0.0;
            frontier_phi_46_73_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2480 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2362, cbModelParam._m0[17u].z, fma(_2361, cbModelParam._m0[17u].y, _2360 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2362, cbModelParam._m0[18u].z, fma(_2361, cbModelParam._m0[18u].y, _2360 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2362, cbModelParam._m0[19u].z, fma(_2361, cbModelParam._m0[19u].y, _2360 * cbModelParam._m0[19u].x))), _1420);
            frontier_phi_46_73_ladder = _2480.z * cbModelParam._m0[1u].z;
            frontier_phi_46_73_ladder_1 = _2480.y * cbModelParam._m0[1u].z;
            frontier_phi_46_73_ladder_2 = _2480.x * cbModelParam._m0[1u].z;
        }
        _1508 = frontier_phi_46_73_ladder_2;
        _1510 = frontier_phi_46_73_ladder_1;
        _1512 = frontier_phi_46_73_ladder;
    }
    else
    {
        vec4 _1492 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_619, _620, _621), _1420);
        _1508 = _1492.x * cbModelParam._m0[1u].z;
        _1510 = _1492.y * cbModelParam._m0[1u].z;
        _1512 = _1492.z * cbModelParam._m0[1u].z;
    }
    float _1524 = _618 * 0.01200000010430812835693359375;
    float _1526 = _1524 * ((cbModelParam._m0[1u].w * (_1508 - _1413)) + _1413);
    float _1527 = _1524 * ((cbModelParam._m0[1u].w * (_1510 - _1415)) + _1415);
    float _1528 = _1524 * ((cbModelParam._m0[1u].w * (_1512 - _1417)) + _1417);
    float _1531 = fma(_1528, cbSceneParam._m0[89u].z, fma(_1527, cbSceneParam._m0[89u].y, _1526 * cbSceneParam._m0[89u].x));
    float _1534 = fma(_1528, cbSceneParam._m0[90u].z, fma(_1527, cbSceneParam._m0[90u].y, _1526 * cbSceneParam._m0[90u].x));
    float _1537 = fma(_1528, cbSceneParam._m0[91u].z, fma(_1527, cbSceneParam._m0[91u].y, _1526 * cbSceneParam._m0[91u].x));
    float _1572 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1576 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1580 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1584 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1585 = _1572 / _1584;
    float _1586 = _1576 / _1584;
    float _1587 = _1580 / _1584;
    float _1735;
    float _1736;
    float _1737;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1614 = ((uint(_1587 > cbSceneParam._m0[59u].y) + uint(_1587 > cbSceneParam._m0[59u].x)) + uint(_1587 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1615 = _1614 + 43u;
        uint _1623 = _1614 + 44u;
        uint _1631 = _1614 + 45u;
        uint _1639 = _1614 + 46u;
        float _1650 = fma(_1584, cbSceneParam._m0[_1615].w, fma(_1580, cbSceneParam._m0[_1615].z, fma(_1576, cbSceneParam._m0[_1615].y, _1572 * cbSceneParam._m0[_1615].x)));
        float _1654 = fma(_1584, cbSceneParam._m0[_1623].w, fma(_1580, cbSceneParam._m0[_1623].z, fma(_1576, cbSceneParam._m0[_1623].y, _1572 * cbSceneParam._m0[_1623].x)));
        float _1662 = fma(_1584, cbSceneParam._m0[_1639].w, fma(_1580, cbSceneParam._m0[_1639].z, fma(_1576, cbSceneParam._m0[_1639].y, _1572 * cbSceneParam._m0[_1639].x)));
        float _1667 = cbSceneParam._m0[33u].z * _1662;
        float _1669 = cbSceneParam._m0[33u].w * _1662;
        float _1672 = fma(_1584, cbSceneParam._m0[_1631].w, fma(_1580, cbSceneParam._m0[_1631].z, fma(_1576, cbSceneParam._m0[_1631].y, _1572 * cbSceneParam._m0[_1631].x))) / _1662;
        float _1720 = (cbSceneParam._m0[33u].x - sqrt(((_1586 * _1586) + (_1585 * _1585)) + (_1587 * _1587))) * cbSceneParam._m0[33u].y;
        float _3560 = isnan(0.0) ? _1720 : (isnan(_1720) ? 0.0 : max(_1720, 0.0));
        float _1728 = (isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1667 + _1650) / _1662, (_1669 + _1654) / _1662), _1672), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1669 + _1650) / _1662, (_1654 - _1667) / _1662), _1672), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1650 - _1667) / _1662, (_1654 - _1669) / _1662), _1672), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1650 - _1669) / _1662, (_1667 + _1654) / _1662), _1672), 0.0)).x), vec4(0.25)));
        _1735 = 1.0 - (_1728 * cbSceneParam._m0[34u].x);
        _1736 = 1.0 - (_1728 * cbSceneParam._m0[34u].y);
        _1737 = 1.0 - (_1728 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1735 = 1.0;
        _1736 = 1.0;
        _1737 = 1.0;
    }
    float _1801;
    float _1803;
    float _1805;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1789 = fma(_1584, cbSceneParam._m0[63u].w, fma(_1580, cbSceneParam._m0[63u].z, fma(_1576, cbSceneParam._m0[63u].y, _1572 * cbSceneParam._m0[63u].x)));
        float _1790 = fma(_1584, cbSceneParam._m0[60u].w, fma(_1580, cbSceneParam._m0[60u].z, fma(_1576, cbSceneParam._m0[60u].y, _1572 * cbSceneParam._m0[60u].x))) / _1789;
        float _1791 = fma(_1584, cbSceneParam._m0[61u].w, fma(_1580, cbSceneParam._m0[61u].z, fma(_1576, cbSceneParam._m0[61u].y, _1572 * cbSceneParam._m0[61u].x))) / _1789;
        float frontier_phi_58_57_ladder;
        float frontier_phi_58_57_ladder_1;
        float frontier_phi_58_57_ladder_2;
        if ((((_1790 >= cbSceneParam._m0[64u].x) && (_1791 >= cbSceneParam._m0[64u].y)) && (_1790 <= cbSceneParam._m0[64u].z)) && (_1791 <= cbSceneParam._m0[64u].w))
        {
            float _2028 = fma(_1584, cbSceneParam._m0[62u].w, fma(_1580, cbSceneParam._m0[62u].z, fma(_1576, cbSceneParam._m0[62u].y, _1572 * cbSceneParam._m0[62u].x))) / _1789;
            float _2032 = isnan(cbSceneParam._m0[41u].w) ? _2028 : (isnan(_2028) ? cbSceneParam._m0[41u].w : max(_2028, cbSceneParam._m0[41u].w));
            float _2075 = (cbSceneParam._m0[33u].x - sqrt(((_1586 * _1586) + (_1585 * _1585)) + (_1587 * _1587))) * cbSceneParam._m0[33u].y;
            float _3576 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
            float _2082 = (isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1790, cbSceneParam._m0[33u].w + _1791), _2032), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1790, _1791 - cbSceneParam._m0[33u].z), _2032), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1790 - cbSceneParam._m0[33u].z, _1791 - cbSceneParam._m0[33u].w), _2032), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1790 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1791), _2032), 0.0)).x), vec4(0.25)));
            float _2086 = 1.0 - (_2082 * cbSceneParam._m0[34u].x);
            float _2087 = 1.0 - (_2082 * cbSceneParam._m0[34u].y);
            float _2088 = 1.0 - (_2082 * cbSceneParam._m0[34u].z);
            frontier_phi_58_57_ladder = isnan(_2088) ? _1737 : (isnan(_1737) ? _2088 : min(_1737, _2088));
            frontier_phi_58_57_ladder_1 = isnan(_2087) ? _1736 : (isnan(_1736) ? _2087 : min(_1736, _2087));
            frontier_phi_58_57_ladder_2 = isnan(_2086) ? _1735 : (isnan(_1735) ? _2086 : min(_1735, _2086));
        }
        else
        {
            frontier_phi_58_57_ladder = _1737;
            frontier_phi_58_57_ladder_1 = _1736;
            frontier_phi_58_57_ladder_2 = _1735;
        }
        _1801 = frontier_phi_58_57_ladder_2;
        _1803 = frontier_phi_58_57_ladder_1;
        _1805 = frontier_phi_58_57_ladder;
    }
    else
    {
        _1801 = _1735;
        _1803 = _1736;
        _1805 = _1737;
    }
    uvec4 _1810 = floatBitsToUint(cbInstanceData._m0[_592 + 5u]);
    uint _1812 = _1810.x * 14u;
    uint _1813 = _1812 + 13u;
    float _1818 = _618 + (-1.0);
    float _1821 = (cbLight._m0[_1813].x * _1818) + 1.0;
    float _1822 = (cbLight._m0[_1813].y * _1818) + 1.0;
    uint _1823 = _1812 + 5u;
    float _1829 = isnan(1.0) ? _1822 : (isnan(_1822) ? 1.0 : min(_1822, 1.0));
    uint _1833 = _1812 + 4u;
    float _1843 = isnan(1.0) ? _1821 : (isnan(_1821) ? 1.0 : min(_1821, 1.0));
    uint _1847 = _1812 | 1u;
    float _1858 = dot(vec3(cbLight._m0[_1812].xyz), vec3(0.0));
    float _1861 = dot(vec3(cbLight._m0[_1847].xyz), vec3(0.0));
    float _3612 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
    float _3623 = isnan(0.0) ? _1861 : (isnan(_1861) ? 0.0 : max(_1861, 0.0));
    float _1866 = (isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0))) * 0.3183098733425140380859375;
    float _1868 = (isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0))) * 0.3183098733425140380859375;
    float _1875 = ((cbLight._m0[_1823].x * _1829) * _1868) + (((cbLight._m0[_1833].x * _1801) * _1843) * _1866);
    float _1876 = ((_1829 * cbLight._m0[_1823].y) * _1868) + (((cbLight._m0[_1833].y * _1803) * _1843) * _1866);
    float _1877 = ((_1829 * cbLight._m0[_1823].z) * _1868) + (((cbLight._m0[_1833].z * _1805) * _1843) * _1866);
    uint _1878 = _1812 + 8u;
    float _1884 = cbLight._m0[_1812].x + _570;
    float _1885 = cbLight._m0[_1812].y + _571;
    float _1886 = cbLight._m0[_1812].z + _572;
    float _1890 = inversesqrt(dot(vec3(_1884, _1885, _1886), vec3(_1884, _1885, _1886)));
    float _1894 = dot(vec3(0.0), vec3(cbLight._m0[_1812].xyz));
    float _3634 = isnan(0.0) ? _1894 : (isnan(_1894) ? 0.0 : max(_1894, 0.0));
    float _1897 = isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0));
    float _1898 = dot(vec3(0.0), vec3(_570, _571, _572));
    float _3645 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
    float _1901 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
    float _1902 = dot(vec3(cbLight._m0[_1812].xyz), vec3(_1884 * _1890, _1885 * _1890, _1886 * _1890));
    float _3656 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
    float _1913 = (exp2(log2(1.0 - (isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1919 = (0.5 / ((_1897 + 9.9999999392252902907785028219223e-09) + _1901)) * _1897;
    float _3667 = isnan(0.0) ? _1919 : (isnan(_1919) ? 0.0 : max(_1919, 0.0));
    float _1921 = (isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0))) * 0.31831014156341552734375;
    uint _1935 = _1812 + 9u;
    float _1941 = cbLight._m0[_1847].x + _570;
    float _1942 = cbLight._m0[_1847].y + _571;
    float _1943 = cbLight._m0[_1847].z + _572;
    float _1947 = inversesqrt(dot(vec3(_1941, _1942, _1943), vec3(_1941, _1942, _1943)));
    float _1951 = dot(vec3(0.0), vec3(cbLight._m0[_1847].xyz));
    float _3678 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
    float _1954 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
    float _1955 = dot(vec3(cbLight._m0[_1847].xyz), vec3(_1941 * _1947, _1942 * _1947, _1943 * _1947));
    float _3689 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
    float _1964 = (exp2(log2(1.0 - (isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1968 = (0.5 / ((_1954 + 9.9999999392252902907785028219223e-09) + _1901)) * _1954;
    float _3700 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
    float _1970 = (isnan(1.0) ? _3700 : (isnan(_3700) ? 1.0 : min(_3700, 1.0))) * 0.31831014156341552734375;
    float _1980 = (((_1964 * cbLight._m0[_1935].x) * _1970) * _1829) + ((((cbLight._m0[_1878].x * _1801) * _1913) * _1921) * _1843);
    float _1981 = (((_1964 * cbLight._m0[_1935].y) * _1970) * _1829) + ((((cbLight._m0[_1878].y * _1803) * _1913) * _1921) * _1843);
    float _1982 = (((_1964 * cbLight._m0[_1935].z) * _1970) * _1829) + ((((cbLight._m0[_1878].z * _1805) * _1913) * _1921) * _1843);
    float _2145;
    float _2147;
    float _2149;
    float _2151;
    float _2153;
    float _2155;
    if (_1810.y == 0u)
    {
        uvec4 _2100 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2101 = _2100.x;
        uint _2112 = uint((float(_2100.y) * floor(float(uint(cbSceneParam._m0[85u].y * _579) / _2101))) + floor(float(uint(cbSceneParam._m0[85u].x * _578) / _2101)));
        float _2122 = (log2(_1587 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2123 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
        uint _2126 = uint(isnan(14.0) ? _2123 : (isnan(_2123) ? 14.0 : min(_2123, 14.0)));
        uvec4 _2131 = texelFetch(g_lightClusterGridBuffer, int(((_2126 << 2u) + (_2112 << 6u)) >> 2u));
        uint _2132 = _2131.x;
        uint _2133 = _2100.z;
        float _2240;
        float _2242;
        float _2244;
        float _2246;
        float _2248;
        float _2250;
        if (((((1u << ((_2133 >> 4u) & 15u)) + 4294967295u) & _2132) == 0u) || ((_2133 & 240u) == 0u))
        {
            _2240 = 0.0;
            _2242 = 0.0;
            _2244 = 0.0;
            _2246 = 0.0;
            _2248 = 0.0;
            _2250 = 0.0;
        }
        else
        {
            float _2241;
            float _2243;
            float _2245;
            float _2247;
            float _2249;
            float _2251;
            float _2408 = 0.0;
            float _2409 = 0.0;
            float _2410 = 0.0;
            float _2411 = 0.0;
            float _2412 = 0.0;
            float _2413 = 0.0;
            uint _2414 = 0u;
            uint _2423;
            bool _2424;
            for (;;)
            {
                _2423 = texelFetch(g_lightClassification, int((((_2126 << 5u) + (_2112 << 9u)) + (_2414 << 2u)) >> 2u)).x;
                _2424 = _2423 == 0u;
                float frontier_phi_82_pred;
                float frontier_phi_82_pred_1;
                float frontier_phi_82_pred_2;
                float frontier_phi_82_pred_3;
                float frontier_phi_82_pred_4;
                float frontier_phi_82_pred_5;
                if (_2424)
                {
                    frontier_phi_82_pred = _2408;
                    frontier_phi_82_pred_1 = _2413;
                    frontier_phi_82_pred_2 = _2412;
                    frontier_phi_82_pred_3 = _2411;
                    frontier_phi_82_pred_4 = _2410;
                    frontier_phi_82_pred_5 = _2409;
                }
                else
                {
                    float _2553;
                    float _2554;
                    float _2555;
                    float _2556;
                    float _2557;
                    float _2558;
                    uint _2559;
                    _2553 = _2408;
                    _2554 = _2409;
                    _2555 = _2410;
                    _2556 = _2411;
                    _2557 = _2412;
                    _2558 = _2413;
                    _2559 = _2423;
                    float _2485;
                    float _2486;
                    float _2487;
                    float _2488;
                    float _2489;
                    float _2490;
                    for (;;)
                    {
                        uint _2563 = uint(findLSB(_2559)) + (_2414 << 5u);
                        uint _2560 = (_2559 + 4294967295u) & _2559;
                        uint _2565 = _2563 * 48u;
                        vec4 _2579 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2565)).x, texelFetch(g_PointLightRenderingBuffer, int(_2565 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2565 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2565 + 3u)).x));
                        uint _2585 = (_2563 * 48u) + 4u;
                        vec4 _2598 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2585)).x, texelFetch(g_PointLightRenderingBuffer, int(_2585 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2585 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2585 + 3u)).x));
                        uint _2604 = (_2563 * 48u) + 8u;
                        vec3 _2615 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2604)).x, texelFetch(g_PointLightRenderingBuffer, int(_2604 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2604 + 2u)).x));
                        float _2619 = _2579.x - _1585;
                        float _2620 = _2579.y - _1586;
                        float _2621 = _2579.z - _1587;
                        float _2622 = dot(vec3(_2619, _2620, _2621), vec3(_2619, _2620, _2621));
                        float _2625 = inversesqrt(_2622);
                        float _2634 = 1.0 - (_2622 * _2579.w);
                        float _3721 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0));
                        float _2635 = isnan(1.0) ? _3721 : (isnan(_3721) ? 1.0 : min(_3721, 1.0));
                        float _2636 = sqrt(_2622) * _2598.w;
                        float _2639 = 1.39999997615814208984375 / (_2636 + 1.39999997615814208984375);
                        float _2640 = _2639 * _2639;
                        float _2643 = ((1.0 - _2640) * dot(vec3(0.0), vec3(_2625 * _2619, _2625 * _2620, _2625 * _2621))) + _2640;
                        float _2646 = _2636 * _2636;
                        float _2650 = ((isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0))) * _2635) / ((_2646 * 0.699999988079071044921875) + 1.0);
                        float _2654 = (-0.0) - _1585;
                        float _2655 = (-0.0) - _1586;
                        float _2656 = (-0.0) - _1587;
                        float _2660 = inversesqrt(dot(vec3(_2654, _2655, _2656), vec3(_2654, _2655, _2656)));
                        float _2664 = dot(vec3(0.0), vec3(_2660 * _2654, _2660 * _2655, _2660 * _2656));
                        float _3737 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
                        float _3748 = isnan(0.0) ? _2643 : (isnan(_2643) ? 0.0 : max(_2643, 0.0));
                        float _2668 = isnan(1.0) ? _3748 : (isnan(_3748) ? 1.0 : min(_3748, 1.0));
                        float _2672 = (0.5 / (((isnan(1.0) ? _3737 : (isnan(_3737) ? 1.0 : min(_3737, 1.0))) + 9.9999999392252902907785028219223e-09) + _2668)) * _2668;
                        float _3759 = isnan(0.0) ? _2672 : (isnan(_2672) ? 0.0 : max(_2672, 0.0));
                        float _2681 = (((isnan(1.0) ? _3759 : (isnan(_3759) ? 1.0 : min(_3759, 1.0))) * 3.1415927410125732421875) / ((_2646 * 2.1991131305694580078125) + 3.141590118408203125)) * _2635;
                        _2488 = (_2650 * _2598.x) + _2556;
                        _2489 = (_2650 * _2598.y) + _2557;
                        _2490 = (_2650 * _2598.z) + _2558;
                        _2485 = (_2681 * _2615.x) + _2553;
                        _2486 = (_2681 * _2615.y) + _2554;
                        _2487 = (_2681 * _2615.z) + _2555;
                        if (_2560 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2553 = _2485;
                            _2554 = _2486;
                            _2555 = _2487;
                            _2556 = _2488;
                            _2557 = _2489;
                            _2558 = _2490;
                            _2559 = _2560;
                        }
                    }
                    frontier_phi_82_pred = _2485;
                    frontier_phi_82_pred_1 = _2490;
                    frontier_phi_82_pred_2 = _2489;
                    frontier_phi_82_pred_3 = _2488;
                    frontier_phi_82_pred_4 = _2487;
                    frontier_phi_82_pred_5 = _2486;
                }
                _2241 = frontier_phi_82_pred;
                _2251 = frontier_phi_82_pred_1;
                _2249 = frontier_phi_82_pred_2;
                _2247 = frontier_phi_82_pred_3;
                _2245 = frontier_phi_82_pred_4;
                _2243 = frontier_phi_82_pred_5;
                uint _2415 = _2414 + 1u;
                if (_2415 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2408 = _2241;
                    _2409 = _2243;
                    _2410 = _2245;
                    _2411 = _2247;
                    _2412 = _2249;
                    _2413 = _2251;
                    _2414 = _2415;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2240 = _2241;
            _2242 = _2243;
            _2244 = _2245;
            _2246 = _2247;
            _2248 = _2249;
            _2250 = _2251;
        }
        uvec4 _2254 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2255 = _2254.z;
        uint _2257 = (_2255 >> 8u) & 15u;
        float _2379;
        float _2381;
        float _2383;
        float _2385;
        float _2387;
        float _2389;
        if (((4294967295u << _2257) & _2132) == 0u)
        {
            _2379 = _2240;
            _2381 = _2242;
            _2383 = _2244;
            _2385 = _2246;
            _2387 = _2248;
            _2389 = _2250;
        }
        else
        {
            float _2404 = inversesqrt(dot(vec3(_1585, _1586, _1587), vec3(_1585, _1586, _1587)));
            float frontier_phi_75_76_ladder;
            float frontier_phi_75_76_ladder_1;
            float frontier_phi_75_76_ladder_2;
            float frontier_phi_75_76_ladder_3;
            float frontier_phi_75_76_ladder_4;
            float frontier_phi_75_76_ladder_5;
            if (_2257 < ((_2255 >> 12u) & 15u))
            {
                float _2380;
                float _2382;
                float _2384;
                float _2386;
                float _2388;
                float _2390;
                float _2536 = _2240;
                float _2537 = _2242;
                float _2538 = _2244;
                float _2539 = _2246;
                float _2540 = _2248;
                float _2541 = _2250;
                uint _2542 = _2257;
                uint _2551;
                bool _2552;
                for (;;)
                {
                    _2551 = texelFetch(g_lightClassification, int((((_2126 << 5u) + (_2112 << 9u)) + (_2542 << 2u)) >> 2u)).x;
                    _2552 = _2551 == 0u;
                    float frontier_phi_88_pred;
                    float frontier_phi_88_pred_1;
                    float frontier_phi_88_pred_2;
                    float frontier_phi_88_pred_3;
                    float frontier_phi_88_pred_4;
                    float frontier_phi_88_pred_5;
                    if (_2552)
                    {
                        frontier_phi_88_pred = _2539;
                        frontier_phi_88_pred_1 = _2540;
                        frontier_phi_88_pred_2 = _2541;
                        frontier_phi_88_pred_3 = _2538;
                        frontier_phi_88_pred_4 = _2537;
                        frontier_phi_88_pred_5 = _2536;
                    }
                    else
                    {
                        float _2686;
                        float _2687;
                        float _2688;
                        float _2689;
                        float _2690;
                        float _2691;
                        float _2935;
                        float _2936;
                        float _2937;
                        float _2938;
                        float _2939;
                        float _2940;
                        float _2699 = _2536;
                        float _2700 = _2537;
                        float _2701 = _2538;
                        float _2702 = _2539;
                        float _2703 = _2540;
                        float _2704 = _2541;
                        uint _2705 = _2551;
                        uint _2706;
                        vec4 _2731;
                        float _2732;
                        vec4 _2747;
                        vec3 _2759;
                        vec4 _2774;
                        vec4 _2789;
                        float _2835;
                        bool _2836;
                        for (;;)
                        {
                            uint _2716 = ((_2542 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2705));
                            _2706 = (_2705 + 4294967295u) & _2705;
                            uint _2718 = _2716 * 40u;
                            _2731 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2718)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2718 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2718 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2718 + 3u)).x));
                            _2732 = _2731.w;
                            uint _2734 = (_2716 * 40u) + 4u;
                            _2747 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2734)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2734 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2734 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2734 + 3u)).x));
                            uint _2749 = (_2716 * 40u) + 8u;
                            _2759 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2749)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2749 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2749 + 2u)).x));
                            uint _2761 = (_2716 * 40u) + 16u;
                            _2774 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2761)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2761 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2761 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2761 + 3u)).x));
                            uint _2776 = (_2716 * 40u) + 20u;
                            _2789 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2776)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2776 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2776 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2776 + 3u)).x));
                            uint _2791 = (_2716 * 40u) + 24u;
                            vec4 _2804 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2791)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2791 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2791 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2791 + 3u)).x));
                            uint _2810 = (_2716 * 40u) + 28u;
                            vec4 _2823 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2810)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2810 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2810 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2810 + 3u)).x));
                            _2835 = fma(_1587, _2823.z, fma(_1586, _2823.y, _2823.x * _1585)) + _2823.w;
                            _2836 = !((fma(_1587, _2804.z, fma(_1586, _2804.y, _2804.x * _1585)) + _2804.w) <= 0.0);
                            float frontier_phi_94_pred;
                            float frontier_phi_94_pred_1;
                            float frontier_phi_94_pred_2;
                            float frontier_phi_94_pred_3;
                            float frontier_phi_94_pred_4;
                            float frontier_phi_94_pred_5;
                            if (_2836)
                            {
                                float _2863 = _2731.x - _1585;
                                float _2864 = _2731.y - _1586;
                                float _2865 = _2731.z - _1587;
                                float _2866 = dot(vec3(_2863, _2864, _2865), vec3(_2863, _2864, _2865));
                                float _2869 = inversesqrt(_2866);
                                float _2870 = _2869 * _2863;
                                float _2871 = _2869 * _2864;
                                float _2872 = _2869 * _2865;
                                float _2876 = 1.0 - (_2866 / (_2732 * _2732));
                                float _3770 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
                                float _2877 = isnan(1.0) ? _3770 : (isnan(_3770) ? 1.0 : min(_3770, 1.0));
                                float _2881 = sqrt(_2866) * _2747.w;
                                float _2883 = 1.39999997615814208984375 / (_2881 + 1.39999997615814208984375);
                                float _2884 = _2883 * _2883;
                                float _2885 = 1.0 - _2884;
                                float _2887 = (_2885 * dot(vec3(_2870, _2871, _2872), vec3(0.0))) + _2884;
                                float _2890 = _2881 * _2881;
                                float _2894 = (fma(_1587, _2774.z, fma(_1586, _2774.y, _2774.x * _1585)) + _2774.w) / _2835;
                                float _2895 = (fma(_1587, _2789.z, fma(_1586, _2789.y, _2789.x * _1585)) + _2789.w) / _2835;
                                float _2899 = 1.0 - dot(vec2(_2894, _2895), vec2(_2894, _2895));
                                float _3786 = isnan(0.0) ? _2899 : (isnan(_2899) ? 0.0 : max(_2899, 0.0));
                                float _2900 = isnan(1.0) ? _3786 : (isnan(_3786) ? 1.0 : min(_3786, 1.0));
                                float _2901 = _2900 * (((isnan(0.0) ? _2887 : (isnan(_2887) ? 0.0 : max(_2887, 0.0))) * _2877) / ((_2890 * 0.699999988079071044921875) + 1.0));
                                float _2911 = dot(vec3(0.0), vec3((-0.0) - (_1585 * _2404), (-0.0) - (_1586 * _2404), (-0.0) - (_1587 * _2404)));
                                float _3797 = isnan(0.0) ? _2911 : (isnan(_2911) ? 0.0 : max(_2911, 0.0));
                                float _2919 = (_2885 * dot(vec3(0.0), vec3(_2870, _2871, _2872))) + _2884;
                                float _3808 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0));
                                float _2920 = isnan(1.0) ? _3808 : (isnan(_3808) ? 1.0 : min(_3808, 1.0));
                                float _2924 = (0.5 / (((isnan(1.0) ? _3797 : (isnan(_3797) ? 1.0 : min(_3797, 1.0))) + 9.9999999392252902907785028219223e-09) + _2920)) * _2920;
                                float _3819 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0));
                                float _2931 = (_2900 * _2877) * (((isnan(1.0) ? _3819 : (isnan(_3819) ? 1.0 : min(_3819, 1.0))) * 3.1415927410125732421875) / ((_2890 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_94_pred = _2931 * _2759.x;
                                frontier_phi_94_pred_1 = _2931 * _2759.y;
                                frontier_phi_94_pred_2 = _2901 * _2747.z;
                                frontier_phi_94_pred_3 = _2901 * _2747.y;
                                frontier_phi_94_pred_4 = _2901 * _2747.x;
                                frontier_phi_94_pred_5 = _2931 * _2759.z;
                            }
                            else
                            {
                                frontier_phi_94_pred = 0.0;
                                frontier_phi_94_pred_1 = 0.0;
                                frontier_phi_94_pred_2 = 0.0;
                                frontier_phi_94_pred_3 = 0.0;
                                frontier_phi_94_pred_4 = 0.0;
                                frontier_phi_94_pred_5 = 0.0;
                            }
                            _2935 = frontier_phi_94_pred;
                            _2936 = frontier_phi_94_pred_1;
                            _2940 = frontier_phi_94_pred_2;
                            _2939 = frontier_phi_94_pred_3;
                            _2938 = frontier_phi_94_pred_4;
                            _2937 = frontier_phi_94_pred_5;
                            _2689 = _2938 + _2702;
                            _2690 = _2939 + _2703;
                            _2691 = _2940 + _2704;
                            _2686 = _2935 + _2699;
                            _2687 = _2936 + _2700;
                            _2688 = _2937 + _2701;
                            if (_2706 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2699 = _2686;
                                _2700 = _2687;
                                _2701 = _2688;
                                _2702 = _2689;
                                _2703 = _2690;
                                _2704 = _2691;
                                _2705 = _2706;
                                continue;
                            }
                        }
                        frontier_phi_88_pred = _2689;
                        frontier_phi_88_pred_1 = _2690;
                        frontier_phi_88_pred_2 = _2691;
                        frontier_phi_88_pred_3 = _2688;
                        frontier_phi_88_pred_4 = _2687;
                        frontier_phi_88_pred_5 = _2686;
                    }
                    _2386 = frontier_phi_88_pred;
                    _2388 = frontier_phi_88_pred_1;
                    _2390 = frontier_phi_88_pred_2;
                    _2384 = frontier_phi_88_pred_3;
                    _2382 = frontier_phi_88_pred_4;
                    _2380 = frontier_phi_88_pred_5;
                    uint _2543 = _2542 + 1u;
                    if (_2543 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2536 = _2380;
                        _2537 = _2382;
                        _2538 = _2384;
                        _2539 = _2386;
                        _2540 = _2388;
                        _2541 = _2390;
                        _2542 = _2543;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_75_76_ladder = _2388;
                frontier_phi_75_76_ladder_1 = _2390;
                frontier_phi_75_76_ladder_2 = _2386;
                frontier_phi_75_76_ladder_3 = _2384;
                frontier_phi_75_76_ladder_4 = _2382;
                frontier_phi_75_76_ladder_5 = _2380;
            }
            else
            {
                frontier_phi_75_76_ladder = _2248;
                frontier_phi_75_76_ladder_1 = _2250;
                frontier_phi_75_76_ladder_2 = _2246;
                frontier_phi_75_76_ladder_3 = _2244;
                frontier_phi_75_76_ladder_4 = _2242;
                frontier_phi_75_76_ladder_5 = _2240;
            }
            _2379 = frontier_phi_75_76_ladder_5;
            _2381 = frontier_phi_75_76_ladder_4;
            _2383 = frontier_phi_75_76_ladder_3;
            _2385 = frontier_phi_75_76_ladder_2;
            _2387 = frontier_phi_75_76_ladder;
            _2389 = frontier_phi_75_76_ladder_1;
        }
        float _2394 = isnan(1.0) ? _618 : (isnan(_618) ? 1.0 : min(_618, 1.0));
        _2145 = (_2394 * _2385) + _1875;
        _2147 = (_2394 * _2387) + _1876;
        _2149 = (_2394 * _2389) + _1877;
        _2151 = ((_2379 * 0.039999999105930328369140625) * _2394) + _1980;
        _2153 = ((_2381 * 0.039999999105930328369140625) * _2394) + _1981;
        _2155 = ((_2383 * 0.039999999105930328369140625) * _2394) + _1982;
    }
    else
    {
        _2145 = _1875;
        _2147 = _1876;
        _2149 = _1877;
        _2151 = _1980;
        _2153 = _1981;
        _2155 = _1982;
    }
    float _3835 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _3846 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _3857 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _2172 = ((isnan(1.0) ? _3835 : (isnan(_3835) ? 1.0 : min(_3835, 1.0))) * (_2145 + ((isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0))) * _618))) + ((_2151 + ((isnan(0.0) ? _1531 : (isnan(_1531) ? 0.0 : max(_1531, 0.0))) * _1321)) * cbPerFrame._m0[3u].x);
    float _2173 = ((isnan(1.0) ? _3846 : (isnan(_3846) ? 1.0 : min(_3846, 1.0))) * (_2147 + ((isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0))) * _618))) + ((_2153 + ((isnan(0.0) ? _1534 : (isnan(_1534) ? 0.0 : max(_1534, 0.0))) * _1321)) * cbPerFrame._m0[3u].x);
    float _2174 = ((isnan(1.0) ? _3857 : (isnan(_3857) ? 1.0 : min(_3857, 1.0))) * (_2149 + ((isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0))) * _618))) + ((_2155 + ((isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0))) * _1321)) * cbPerFrame._m0[3u].x);
    uint _2178 = _592 + 6u;
    float _2186 = _578 / cbSceneParam._m0[86u].x;
    float _2187 = _579 / cbSceneParam._m0[86u].y;
    vec4 _2201 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2186, _2187, (log2((isnan(cbSceneParam._m0[77u].w) ? _565 : (isnan(_565) ? cbSceneParam._m0[77u].w : min(_565, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2203 = _2201.x;
    float _2204 = _2201.y;
    float _2205 = _2201.z;
    float _2206 = _2201.w;
    float _2302;
    float _2304;
    float _2306;
    float _2308;
    if (_565 > cbSceneParam._m0[78u].w)
    {
        float _2265 = isnan(_565) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _565 : min(cbSceneParam._m0[80u].w, _565));
        float _2266 = _2265 / _565;
        float _2277 = _2266 * _263;
        float _2278 = _264 * _2266;
        float _2279 = (-0.0) - _2278;
        float _2280 = _2266 * _265;
        float _2282 = (cbSceneParam._m0[77u].w * _2279) / _2265;
        float _2283 = _2282 + cbSceneParam._m0[79u].w;
        float _2284 = cbSceneParam._m0[79u].w - _2278;
        float _2290 = sqrt(((_2277 * _2277) + (_2278 * _2278)) + (_2280 * _2280));
        float _2293 = (1.0 - (cbSceneParam._m0[77u].w / _2265)) * _2290;
        float _2298 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2300 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2498;
        if (abs((_2279 - _2282) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2498 = ((((_2283 > 0.0) ? exp2(_2298 * _2283) : (2.0 - exp2(_2300 * _2283))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2293;
        }
        else
        {
            float _2437 = 1.0 / cbSceneParam._m0[80u].x;
            float _2438 = isnan(_2284) ? _2283 : (isnan(_2283) ? _2284 : max(_2283, _2284));
            float _2439 = isnan(_2284) ? _2283 : (isnan(_2283) ? _2284 : min(_2283, _2284));
            float _2448 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : min(_2438, 0.0));
            float _2449 = isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : min(_2439, 0.0));
            _2498 = ((abs(_2290 / _2279) * cbSceneParam._m0[80u].y) * ((((_2448 - _2449) * 2.0) - ((exp2(_2298 * (isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0)))) - exp2(_2298 * (isnan(0.0) ? _2439 : (isnan(_2439) ? 0.0 : max(_2439, 0.0))))) * _2437)) - ((exp2(_2300 * _2448) - exp2(_2300 * _2449)) * _2437))) + (_2293 * cbSceneParam._m0[80u].z);
        }
        vec4 _2500 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2186, _2187, 1.0), 0.0);
        float _2509 = exp2((_2498 * (-1.44269502162933349609375)) * (1.0 - _2500.w));
        float _2510 = log2(_2509);
        float _2526 = log2(_2206);
        _2302 = (exp2(_2526 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2510 * cbSceneParam._m0[78u].x)) * _2500.x) / cbSceneParam._m0[78u].x)) + _2203;
        _2304 = (exp2(_2526 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2510 * cbSceneParam._m0[78u].y)) * _2500.y) / cbSceneParam._m0[78u].y)) + _2204;
        _2306 = (exp2(_2526 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2510 * cbSceneParam._m0[78u].z)) * _2500.z) / cbSceneParam._m0[78u].z)) + _2205;
        _2308 = _2509 * _2206;
    }
    else
    {
        _2302 = _2203;
        _2304 = _2204;
        _2306 = _2205;
        _2308 = _2206;
    }
    float _2320 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2321 = _2320 == 3.0;
    float _2323 = log2(_2308);
    float _2330 = exp2(_2323 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0)));
    float _2331 = exp2(_2323 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2173 : (isnan(_2173) ? 0.0 : max(_2173, 0.0)));
    float _2332 = exp2(_2323 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0)));
    float _2341 = (_2320 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2341 * (_2321 ? _2330 : (_2330 + (cbSceneParam._m0[72u].w * _2302)));
    SV_Target.y = _2341 * (_2321 ? _2331 : (_2331 + (cbSceneParam._m0[72u].w * _2304)));
    SV_Target.z = _2341 * (_2321 ? _2332 : (_2332 + (cbSceneParam._m0[72u].w * _2306)));
    SV_Target.w = cbInstanceData._m0[_2178].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2178].w;
}


