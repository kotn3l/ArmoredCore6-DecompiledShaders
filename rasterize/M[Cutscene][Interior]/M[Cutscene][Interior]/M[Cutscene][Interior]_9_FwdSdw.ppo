#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_12;
layout(set = 0, binding = 3) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _455;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _206 = _205 * _198;
    float _207 = _205 * _199;
    float _208 = _205 * _200;
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _213 = _212 * NORMAL.x;
    float _214 = _212 * NORMAL.y;
    float _215 = _212 * NORMAL.z;
    float _219 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _220 = _219 * TANGENT.x;
    float _221 = _219 * TANGENT.y;
    float _222 = _219 * TANGENT.z;
    float _267 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _277 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _267);
    float _278 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _267);
    float _279 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _267);
    vec4 _292 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _295 = _292.x;
    vec4 _313 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _330 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _295) + cbMtdParam._m0[12u].x) * _313.x;
    float _332 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _295) + cbMtdParam._m0[12u].y) * _313.y;
    float _334 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _295) + cbMtdParam._m0[12u].z) * _313.z;
    vec4 _368 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _383 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _390 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _402 = cbMtdParam._m0[24u].w + _277;
    float _403 = cbMtdParam._m0[25u].x + _278;
    float _404 = cbMtdParam._m0[25u].y + _279;
    float _418 = (-0.0) - dot(vec3(_402, _403, _404), vec3(_383 * _206, _383 * _207, _383 * _208));
    float _419 = (-0.0) - dot(vec3(_402, _403, _404), vec3(_390 * _220, _390 * _221, _390 * _222));
    float _420 = (-0.0) - dot(vec3(_402, _403, _404), vec3((-0.0) - _213, (-0.0) - _214, (-0.0) - _215));
    float _424 = inversesqrt(dot(vec3(_418, _419, _420), vec3(_418, _419, _420)));
    float _425 = _424 * _420;
    float _430 = ((cbMtdParam._m0[21u].z * _418) * _424) + (((_368.x * 2.0) + (-1.0)) * cbMtdParam._m0[22u].x);
    float _431 = ((cbMtdParam._m0[21u].w * _419) * _424) + (((_368.y * 2.0) + (-1.0)) * cbMtdParam._m0[22u].y);
    float _434 = fract(cbMtdParam._m0[21u].z * TEXCOORD.x);
    float _435 = fract(cbMtdParam._m0[21u].w * TEXCOORD.y);
    float _453;
    float _456;
    float _458;
    if (_430 > 0.0)
    {
        float _439 = (1.0 - _434) / _430;
        _453 = _439;
        _456 = ((cbMtdParam._m0[18u].w + 1.0) - fract(_439 * _425)) * 0.16666667163372039794921875;
        _458 = (fract((_439 * _431) + _435) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_430 < 0.0)
        {
            float _454 = ((-0.0) - _434) / _430;
            frontier_phi_3_2_ladder = (fract(_454 * _425) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
            frontier_phi_3_2_ladder_1 = _454;
            frontier_phi_3_2_ladder_2 = (fract((_454 * _431) + _435) * 0.16666667163372039794921875) + 0.666666686534881591796875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _455;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _453 = frontier_phi_3_2_ladder_1;
        _456 = frontier_phi_3_2_ladder;
        _458 = frontier_phi_3_2_ladder_2;
    }
    float _484;
    float _486;
    float _488;
    if (_431 > 0.0)
    {
        float _471 = (1.0 - _435) / _431;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_471 < _453)
        {
            frontier_phi_8_5_ladder = (fract(_471 * _425) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_471 * _430) + _434) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _471;
        }
        else
        {
            frontier_phi_8_5_ladder = _458;
            frontier_phi_8_5_ladder_1 = _456;
            frontier_phi_8_5_ladder_2 = _453;
        }
        _484 = frontier_phi_8_5_ladder_2;
        _486 = frontier_phi_8_5_ladder_1;
        _488 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_431 < 0.0)
        {
            float _485 = ((-0.0) - _435) / _431;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_485 < _453)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_485 * _425) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_485 * _430) + _434) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _485;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _458;
                frontier_phi_8_6_ladder_9_ladder_1 = _456;
                frontier_phi_8_6_ladder_9_ladder_2 = _453;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _458;
            frontier_phi_8_6_ladder_1 = _456;
            frontier_phi_8_6_ladder_2 = _453;
        }
        _484 = frontier_phi_8_6_ladder_2;
        _486 = frontier_phi_8_6_ladder_1;
        _488 = frontier_phi_8_6_ladder;
    }
    float _492 = (_425 > 0.0) ? (cbMtdParam._m0[18u].z / _425) : 5000.0;
    float _505;
    float _506;
    if (_492 < _484)
    {
        _505 = ((_434 + cbMtdParam._m0[18u].w) + (_492 * _430)) * 0.16666667163372039794921875;
        _506 = (((_492 * _431) + _435) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _505 = _486;
        _506 = _488;
    }
    vec4 _508 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_505, _506));
    float _3479 = isnan(0.0) ? cbMtdParam._m0[17u].z : (isnan(cbMtdParam._m0[17u].z) ? 0.0 : max(cbMtdParam._m0[17u].z, 0.0));
    float _522 = isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0));
    float _3490 = isnan(0.0) ? cbMtdParam._m0[17u].y : (isnan(cbMtdParam._m0[17u].y) ? 0.0 : max(cbMtdParam._m0[17u].y, 0.0));
    float _565 = ((_522 - ((1.0 - (isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0)))) * (_522 + 1.0))) + (((cbMtdParam._m0[18u].y * texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[3u].w)).x) + (cbMtdParam._m0[17u].x * texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w)).x)) / cbMtdParam._m0[17u].w)) / _522;
    float _3501 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _566 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
    float _568 = 3.0 - (_566 * 2.0);
    float _573 = _566 * _566;
    vec4 _595 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _599 = _595.z;
    float _602 = (_595.x * 2.0) + (-1.0);
    float _603 = (_595.y * 2.0) + (-1.0);
    float _604 = dot(vec2(_602, _603), vec2(_602, _603));
    float _3512 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _609 = sqrt(1.0 - (isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0))));
    float _612 = fma(_609, _213, fma(_603, _220, _602 * _206));
    float _615 = fma(_609, _214, fma(_603, _221, _602 * _207));
    float _618 = fma(_609, _215, fma(_603, _222, _602 * _208));
    float _622 = inversesqrt(dot(vec3(_612, _615, _618), vec3(_612, _615, _618)));
    float _623 = _622 * _612;
    float _624 = _622 * _615;
    float _625 = _622 * _618;
    float _3523 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _626 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
    float _3534 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _3545 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _3556 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _645 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _649 = inversesqrt(dot(vec3(_277, _278, _279), vec3(_277, _278, _279)));
    float _650 = _277 * _649;
    float _651 = _278 * _649;
    float _652 = _279 * _649;
    float _658 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _659 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _679 = fma(_625, cbSceneParam._m0[5u].z, fma(_624, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _623));
    float _682 = fma(_625, cbSceneParam._m0[6u].z, fma(_624, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _623));
    float _685 = fma(_625, cbSceneParam._m0[7u].z, fma(_624, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _623));
    uint _698 = uint(roundEven(NORMAL.w)) * 13u;
    uint _699 = _698 + 9u;
    uint _700 = _699 + uint(cbMatDynParam._m0[0u].w);
    float _706 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0)))) * cbInstanceData._m0[_700].x;
    float _707 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0)))) * cbInstanceData._m0[_700].y;
    float _708 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0)))) * cbInstanceData._m0[_700].z;
    float _3567 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _709 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
    float _3578 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _710 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
    float _3589 = isnan(0.0) ? _708 : (isnan(_708) ? 0.0 : max(_708, 0.0));
    float _711 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
    vec4 _720 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _658, cbSceneParam._m0[86u].y * _659));
    float _723 = _720.x * TEXCOORD_4.z;
    float _724 = dot(vec3(_623, _624, _625), vec3(_650, _651, _652));
    float _727 = _724 * 2.0;
    float _731 = (_727 * _623) - _650;
    float _732 = (_727 * _624) - _651;
    float _733 = (_727 * _625) - _652;
    float _737 = abs(dot(vec3(_650, _651, _652), vec3(_623, _624, _625)));
    float _3600 = isnan(0.0) ? _737 : (isnan(_737) ? 0.0 : max(_737, 0.0));
    float _739 = sqrt(_626);
    float _751 = exp2((_739 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_739 * 3.0));
    float _783 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _787 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _791 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    float _1109;
    float _1110;
    float _1111;
    float _1112;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _824 = fma(_791, cbModelParam._m0[26u].z, fma(_787, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _783));
        float _828 = fma(_791, cbModelParam._m0[27u].z, fma(_787, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _783));
        float _832 = fma(_791, cbModelParam._m0[28u].z, fma(_787, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _783));
        float _856 = _783 + _623;
        float _857 = _787 + _624;
        float _858 = _791 + _625;
        float _868 = fma(_858, cbModelParam._m0[26u].z, fma(_857, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _856)) - _824;
        float _869 = fma(_858, cbModelParam._m0[27u].z, fma(_857, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _856)) - _828;
        float _870 = fma(_858, cbModelParam._m0[28u].z, fma(_857, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _856)) - _832;
        float _874 = inversesqrt(dot(vec3(_868, _869, _870), vec3(_868, _869, _870)));
        float _887 = ((_874 * _868) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_824 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _888 = ((_874 * _869) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_828 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _889 = ((_874 * _870) / cbModelParam._m0[34u].z) + ((((((_832 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _892 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_887, _888, _889), 0.0);
        vec4 _899 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_887, _888, _889), 0.0);
        vec4 _906 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_887, _888, _889), 0.0);
        vec4 _913 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_887, _888, _889), 0.0);
        float _926 = exp2((_892.w + (-0.5)) * 20.0) * 2.0;
        float _927 = _926 * (_892.x + (-0.5));
        float _928 = _926 * (_892.y + (-0.5));
        float _929 = _926 * (_892.z + (-0.5));
        float _936 = exp2((_899.w + (-0.5)) * 20.0) * 2.0;
        float _937 = _936 * (_899.x + (-0.5));
        float _938 = _936 * (_899.y + (-0.5));
        float _939 = _936 * (_899.z + (-0.5));
        float _946 = exp2((_906.w + (-0.5)) * 20.0) * 2.0;
        float _947 = _946 * (_906.x + (-0.5));
        float _948 = _946 * (_906.y + (-0.5));
        float _949 = _946 * (_906.z + (-0.5));
        float _956 = exp2((_913.w + (-0.5)) * 20.0) * 2.0;
        float _957 = _956 * (_913.x + (-0.5));
        float _958 = _956 * (_913.y + (-0.5));
        float _959 = _956 * (_913.z + (-0.5));
        float _960 = isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0));
        float _961 = isnan(0.0) ? _958 : (isnan(_958) ? 0.0 : max(_958, 0.0));
        float _962 = isnan(0.0) ? _959 : (isnan(_959) ? 0.0 : max(_959, 0.0));
        float _963 = _927 * 0.5;
        float _964 = _937 * 0.5;
        float _965 = _947 * 0.5;
        float _966 = dot(vec3(_963, _964, _965), vec3(_963, _964, _965));
        float _971 = (_966 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_966);
        float _980 = (dot(vec3(_623, _624, _625), vec3(_971 * _963, _971 * _964, _971 * _965)) + 1.0) * 0.5;
        float _3626 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _990 = sqrt(((_964 * _964) + (_963 * _963)) + (_965 * _965)) / (_960 + 9.9999997473787516355514526367188e-06);
        float _3637 = isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0));
        float _991 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
        float _992 = _991 * 2.0;
        float _996 = (1.0 - _991) / (_991 + 1.0);
        float _3648 = isnan(0.0) ? _996 : (isnan(_996) ? 0.0 : max(_996, 0.0));
        float _997 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
        float _1006 = ((((1.0 - _997) * (_992 + 2.0)) * exp2(log2(isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0))) * (_992 + 1.0))) + _997) * _960;
        float _1007 = _928 * 0.5;
        float _1008 = _938 * 0.5;
        float _1009 = _948 * 0.5;
        float _1010 = dot(vec3(_1007, _1008, _1009), vec3(_1007, _1008, _1009));
        float _1015 = (_1010 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1010);
        float _1023 = (dot(vec3(_623, _624, _625), vec3(_1015 * _1007, _1015 * _1008, _1015 * _1009)) + 1.0) * 0.5;
        float _3659 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1032 = sqrt(((_1008 * _1008) + (_1007 * _1007)) + (_1009 * _1009)) / (_961 + 9.9999997473787516355514526367188e-06);
        float _3670 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1033 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
        float _1034 = _1033 * 2.0;
        float _1038 = (1.0 - _1033) / (_1033 + 1.0);
        float _3681 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1039 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
        float _1048 = ((((1.0 - _1039) * (_1034 + 2.0)) * exp2(log2(isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0))) * (_1034 + 1.0))) + _1039) * _961;
        float _1049 = _929 * 0.5;
        float _1050 = _939 * 0.5;
        float _1051 = _949 * 0.5;
        float _1052 = dot(vec3(_1049, _1050, _1051), vec3(_1049, _1050, _1051));
        float _1057 = (_1052 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1052);
        float _1065 = (dot(vec3(_623, _624, _625), vec3(_1057 * _1049, _1057 * _1050, _1057 * _1051)) + 1.0) * 0.5;
        float _3692 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1074 = sqrt(((_1050 * _1050) + (_1049 * _1049)) + (_1051 * _1051)) / (_962 + 9.9999997473787516355514526367188e-06);
        float _3703 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1075 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
        float _1076 = _1075 * 2.0;
        float _1080 = (1.0 - _1075) / (_1075 + 1.0);
        float _3714 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1081 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _1090 = ((((1.0 - _1081) * (_1076 + 2.0)) * exp2(log2(isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0))) * (_1076 + 1.0))) + _1081) * _962;
        _1098 = _929;
        _1099 = _928;
        _1100 = _927;
        _1101 = _939;
        _1102 = _938;
        _1103 = _937;
        _1104 = _949;
        _1105 = _948;
        _1106 = _947;
        _1107 = _962;
        _1108 = _961;
        _1109 = _960;
        _1110 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1006 : (isnan(_1006) ? 0.0 : max(_1006, 0.0)));
        _1111 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0)));
        _1112 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0)));
    }
    else
    {
        _1098 = _455;
        _1099 = _455;
        _1100 = _455;
        _1101 = _455;
        _1102 = _455;
        _1103 = _455;
        _1104 = _455;
        _1105 = _455;
        _1106 = _455;
        _1107 = _455;
        _1108 = _455;
        _1109 = _455;
        _1110 = 0.0;
        _1111 = 0.0;
        _1112 = 0.0;
    }
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    float _1418;
    float _1419;
    float _1420;
    float _1421;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1138 = fma(_791, cbModelParam._m0[30u].z, fma(_787, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _783));
        float _1142 = fma(_791, cbModelParam._m0[31u].z, fma(_787, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _783));
        float _1146 = fma(_791, cbModelParam._m0[32u].z, fma(_787, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _783));
        float _1169 = _783 + _623;
        float _1170 = _787 + _624;
        float _1171 = _791 + _625;
        float _1181 = fma(_1171, cbModelParam._m0[30u].z, fma(_1170, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1169)) - _1138;
        float _1182 = fma(_1171, cbModelParam._m0[31u].z, fma(_1170, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1169)) - _1142;
        float _1183 = fma(_1171, cbModelParam._m0[32u].z, fma(_1170, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1169)) - _1146;
        float _1187 = inversesqrt(dot(vec3(_1181, _1182, _1183), vec3(_1181, _1182, _1183)));
        float _1200 = ((_1187 * _1181) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1138 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1201 = ((_1187 * _1182) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1142 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1202 = ((_1187 * _1183) / cbModelParam._m0[35u].z) + ((((((_1146 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1204 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1200, _1201, _1202), 0.0);
        vec4 _1211 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1200, _1201, _1202), 0.0);
        vec4 _1218 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1200, _1201, _1202), 0.0);
        vec4 _1225 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1200, _1201, _1202), 0.0);
        float _1237 = exp2((_1204.w + (-0.5)) * 20.0) * 2.0;
        float _1238 = _1237 * (_1204.x + (-0.5));
        float _1239 = _1237 * (_1204.y + (-0.5));
        float _1240 = _1237 * (_1204.z + (-0.5));
        float _1247 = exp2((_1211.w + (-0.5)) * 20.0) * 2.0;
        float _1248 = _1247 * (_1211.x + (-0.5));
        float _1249 = _1247 * (_1211.y + (-0.5));
        float _1250 = _1247 * (_1211.z + (-0.5));
        float _1257 = exp2((_1218.w + (-0.5)) * 20.0) * 2.0;
        float _1258 = _1257 * (_1218.x + (-0.5));
        float _1259 = _1257 * (_1218.y + (-0.5));
        float _1260 = _1257 * (_1218.z + (-0.5));
        float _1267 = exp2((_1225.w + (-0.5)) * 20.0) * 2.0;
        float _1268 = _1267 * (_1225.x + (-0.5));
        float _1269 = _1267 * (_1225.y + (-0.5));
        float _1270 = _1267 * (_1225.z + (-0.5));
        float _1271 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1272 = isnan(0.0) ? _1269 : (isnan(_1269) ? 0.0 : max(_1269, 0.0));
        float _1273 = isnan(0.0) ? _1270 : (isnan(_1270) ? 0.0 : max(_1270, 0.0));
        float _1274 = _1238 * 0.5;
        float _1275 = _1248 * 0.5;
        float _1276 = _1258 * 0.5;
        float _1277 = dot(vec3(_1274, _1275, _1276), vec3(_1274, _1275, _1276));
        float _1282 = (_1277 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1277);
        float _1290 = (dot(vec3(_623, _624, _625), vec3(_1282 * _1274, _1282 * _1275, _1282 * _1276)) + 1.0) * 0.5;
        float _3755 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1299 = sqrt(((_1275 * _1275) + (_1274 * _1274)) + (_1276 * _1276)) / (_1271 + 9.9999997473787516355514526367188e-06);
        float _3766 = isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0));
        float _1300 = isnan(1.0) ? _3766 : (isnan(_3766) ? 1.0 : min(_3766, 1.0));
        float _1301 = _1300 * 2.0;
        float _1305 = (1.0 - _1300) / (_1300 + 1.0);
        float _3777 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1306 = isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0));
        float _1315 = ((((1.0 - _1306) * (_1301 + 2.0)) * exp2(log2(isnan(1.0) ? _3755 : (isnan(_3755) ? 1.0 : min(_3755, 1.0))) * (_1301 + 1.0))) + _1306) * _1271;
        float _1316 = _1239 * 0.5;
        float _1317 = _1249 * 0.5;
        float _1318 = _1259 * 0.5;
        float _1319 = dot(vec3(_1316, _1317, _1318), vec3(_1316, _1317, _1318));
        float _1324 = (_1319 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1319);
        float _1332 = (dot(vec3(_623, _624, _625), vec3(_1324 * _1316, _1324 * _1317, _1324 * _1318)) + 1.0) * 0.5;
        float _3788 = isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0));
        float _1341 = sqrt(((_1317 * _1317) + (_1316 * _1316)) + (_1318 * _1318)) / (_1272 + 9.9999997473787516355514526367188e-06);
        float _3799 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
        float _1342 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _1343 = _1342 * 2.0;
        float _1347 = (1.0 - _1342) / (_1342 + 1.0);
        float _3810 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1348 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
        float _1357 = ((((1.0 - _1348) * (_1343 + 2.0)) * exp2(log2(isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0))) * (_1343 + 1.0))) + _1348) * _1272;
        float _1358 = _1240 * 0.5;
        float _1359 = _1250 * 0.5;
        float _1360 = _1260 * 0.5;
        float _1361 = dot(vec3(_1358, _1359, _1360), vec3(_1358, _1359, _1360));
        float _1366 = (_1361 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1361);
        float _1374 = (dot(vec3(_623, _624, _625), vec3(_1366 * _1358, _1366 * _1359, _1366 * _1360)) + 1.0) * 0.5;
        float _3821 = isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0));
        float _1383 = sqrt(((_1359 * _1359) + (_1358 * _1358)) + (_1360 * _1360)) / (_1273 + 9.9999997473787516355514526367188e-06);
        float _3832 = isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0));
        float _1384 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _1385 = _1384 * 2.0;
        float _1389 = (1.0 - _1384) / (_1384 + 1.0);
        float _3843 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1390 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1399 = ((((1.0 - _1390) * (_1385 + 2.0)) * exp2(log2(isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) * (_1385 + 1.0))) + _1390) * _1273;
        _1407 = _1240;
        _1408 = _1239;
        _1409 = _1238;
        _1410 = _1250;
        _1411 = _1249;
        _1412 = _1248;
        _1413 = _1260;
        _1414 = _1259;
        _1415 = _1258;
        _1416 = _1273;
        _1417 = _1272;
        _1418 = _1271;
        _1419 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0)));
        _1420 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1357 : (isnan(_1357) ? 0.0 : max(_1357, 0.0)));
        _1421 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1399 : (isnan(_1399) ? 0.0 : max(_1399, 0.0)));
    }
    else
    {
        _1407 = _455;
        _1408 = _455;
        _1409 = _455;
        _1410 = _455;
        _1411 = _455;
        _1412 = _455;
        _1413 = _455;
        _1414 = _455;
        _1415 = _455;
        _1416 = _455;
        _1417 = _455;
        _1418 = _455;
        _1419 = 0.0;
        _1420 = 0.0;
        _1421 = 0.0;
    }
    float _1431 = (cbModelParam._m0[1u].x * (_1419 - _1110)) + _1110;
    float _1432 = (cbModelParam._m0[1u].x * (_1420 - _1111)) + _1111;
    float _1433 = (cbModelParam._m0[1u].x * (_1421 - _1112)) + _1112;
    float _1454 = fma(_1433, cbSceneParam._m0[89u].z, fma(_1432, cbSceneParam._m0[89u].y, _1431 * cbSceneParam._m0[89u].x));
    float _1457 = fma(_1433, cbSceneParam._m0[90u].z, fma(_1432, cbSceneParam._m0[90u].y, _1431 * cbSceneParam._m0[90u].x));
    float _1460 = fma(_1433, cbSceneParam._m0[91u].z, fma(_1432, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1431));
    float _1475 = _731 * 0.5;
    float _1476 = _732 * 0.5;
    float _1477 = _733 * 0.5;
    float _1478 = dot(vec4(_1475, _1476, _1477, 1.0), vec4(_1409, _1412, _1415, _1418));
    float _1481 = dot(vec4(_1475, _1476, _1477, 1.0), vec4(_1408, _1411, _1414, _1417));
    float _1484 = dot(vec4(_1475, _1476, _1477, 1.0), vec4(_1407, _1410, _1413, _1416));
    float _1518;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1491 = dot(vec4(_1475, _1476, _1477, 1.0), vec4(_1098, _1101, _1104, _1107));
        float _1495 = dot(vec4(_1475, _1476, _1477, 1.0), vec4(_1099, _1102, _1105, _1108));
        float _1499 = dot(vec4(_1475, _1476, _1477, 1.0), vec4(_1100, _1103, _1106, _1109));
        float _1506 = dot(vec4(cbModelParam._m0[39u]), vec4(_1475, _1476, _1477, 1.0));
        _1518 = dot(vec3(isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)), isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)), isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1506) ? 0.0 : (isnan(0.0) ? _1506 : max(0.0, _1506))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1518 = 1.0;
    }
    float _1529;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1520 = dot(vec4(cbModelParam._m0[40u]), vec4(_1475, _1476, _1477, 1.0));
        _1529 = dot(vec3(isnan(0.0) ? _1478 : (isnan(_1478) ? 0.0 : max(_1478, 0.0)), isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0)), isnan(0.0) ? _1484 : (isnan(_1484) ? 0.0 : max(_1484, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1520) ? 0.0 : (isnan(0.0) ? _1520 : max(0.0, _1520))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1529 = 1.0;
    }
    float _1533 = (_1529 * cbModelParam._m0[1u].x) + (_1518 * (1.0 - cbModelParam._m0[1u].x));
    float _1543 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _626);
    float _1544 = isnan(_1543) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1543 : min(cbModelParam._m0[25u].z, _1543));
    float _1625;
    float _1627;
    float _1629;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1592 = fma(_791, cbModelParam._m0[13u].z, fma(_787, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _783)) + cbModelParam._m0[13u].w;
        float _1596 = fma(_791, cbModelParam._m0[14u].z, fma(_787, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _783)) + cbModelParam._m0[14u].w;
        float _1600 = fma(_791, cbModelParam._m0[15u].z, fma(_787, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _783)) + cbModelParam._m0[15u].w;
        float _1603 = fma(_733, cbModelParam._m0[13u].z, fma(_732, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _731));
        float _1606 = fma(_733, cbModelParam._m0[14u].z, fma(_732, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _731));
        float _1609 = fma(_733, cbModelParam._m0[15u].z, fma(_732, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _731));
        float _1637;
        if (_1603 > 0.0)
        {
            _1637 = abs((1.0 - _1592) / _1603);
        }
        else
        {
            float frontier_phi_26_24_ladder;
            if (_1603 < 0.0)
            {
                frontier_phi_26_24_ladder = abs((_1592 + 1.0) / _1603);
            }
            else
            {
                frontier_phi_26_24_ladder = 5000.0;
            }
            _1637 = frontier_phi_26_24_ladder;
        }
        float _1806;
        if (_1606 > 0.0)
        {
            _1806 = abs((1.0 - _1596) / _1606);
        }
        else
        {
            float frontier_phi_35_31_ladder;
            if (_1606 < 0.0)
            {
                frontier_phi_35_31_ladder = abs((_1596 + 1.0) / _1606);
            }
            else
            {
                frontier_phi_35_31_ladder = 5000.0;
            }
            _1806 = frontier_phi_35_31_ladder;
        }
        float _2250;
        if (_1609 > 0.0)
        {
            _2250 = abs((1.0 - _1600) / _1609);
        }
        else
        {
            float frontier_phi_47_42_ladder;
            if (_1609 < 0.0)
            {
                frontier_phi_47_42_ladder = abs((_1600 + 1.0) / _1609);
            }
            else
            {
                frontier_phi_47_42_ladder = 5000.0;
            }
            _2250 = frontier_phi_47_42_ladder;
        }
        float _2252 = isnan(_1806) ? _1637 : (isnan(_1637) ? _1806 : min(_1637, _1806));
        float _2253 = isnan(_2250) ? _2252 : (isnan(_2252) ? _2250 : min(_2252, _2250));
        float _2257 = (_2253 * _1603) + _1592;
        float _2258 = (_2253 * _1606) + _1596;
        float _2259 = (_2253 * _1609) + _1600;
        float _2260 = _2253 * 9.9999997473787516355514526367188e-05;
        float _2262 = (-1.0) - _2260;
        float _2264 = _2260 + 1.0;
        float frontier_phi_25_47_ladder;
        float frontier_phi_25_47_ladder_1;
        float frontier_phi_25_47_ladder_2;
        if ((_2259 > _2264) || ((_2259 < _2262) || ((_2258 > _2264) || ((_2258 < _2262) || ((_2257 < _2262) || (_2257 > _2264))))))
        {
            frontier_phi_25_47_ladder = 0.0;
            frontier_phi_25_47_ladder_1 = 0.0;
            frontier_phi_25_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2515 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2259, cbModelParam._m0[9u].z, fma(_2258, cbModelParam._m0[9u].y, _2257 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2259, cbModelParam._m0[10u].z, fma(_2258, cbModelParam._m0[10u].y, _2257 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2259, cbModelParam._m0[11u].z, fma(_2258, cbModelParam._m0[11u].y, _2257 * cbModelParam._m0[11u].x))), _1544);
            frontier_phi_25_47_ladder = _2515.z * cbModelParam._m0[1u].y;
            frontier_phi_25_47_ladder_1 = _2515.y * cbModelParam._m0[1u].y;
            frontier_phi_25_47_ladder_2 = _2515.x * cbModelParam._m0[1u].y;
        }
        _1625 = frontier_phi_25_47_ladder_2;
        _1627 = frontier_phi_25_47_ladder_1;
        _1629 = frontier_phi_25_47_ladder;
    }
    else
    {
        vec4 _1613 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_731, _732, _733), _1544);
        _1625 = _1613.x * cbModelParam._m0[1u].y;
        _1627 = _1613.y * cbModelParam._m0[1u].y;
        _1629 = _1613.z * cbModelParam._m0[1u].y;
    }
    float _1633 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _626);
    float _1634 = isnan(_1633) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1633 : min(cbModelParam._m0[25u].w, _1633));
    float _1723;
    float _1725;
    float _1727;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1687 = fma(_791, cbModelParam._m0[21u].z, fma(_787, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _783)) + cbModelParam._m0[21u].w;
        float _1691 = fma(_791, cbModelParam._m0[22u].z, fma(_787, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _783)) + cbModelParam._m0[22u].w;
        float _1695 = fma(_791, cbModelParam._m0[23u].z, fma(_787, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _783)) + cbModelParam._m0[23u].w;
        float _1698 = fma(_733, cbModelParam._m0[21u].z, fma(_732, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _731));
        float _1701 = fma(_733, cbModelParam._m0[22u].z, fma(_732, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _731));
        float _1704 = fma(_733, cbModelParam._m0[23u].z, fma(_732, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _731));
        float _1811;
        if (_1698 > 0.0)
        {
            _1811 = abs((1.0 - _1687) / _1698);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1698 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1687 + 1.0) / _1698);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1811 = frontier_phi_37_33_ladder;
        }
        float _2277;
        if (_1701 > 0.0)
        {
            _2277 = abs((1.0 - _1691) / _1701);
        }
        else
        {
            float frontier_phi_49_44_ladder;
            if (_1701 < 0.0)
            {
                frontier_phi_49_44_ladder = abs((_1691 + 1.0) / _1701);
            }
            else
            {
                frontier_phi_49_44_ladder = 5000.0;
            }
            _2277 = frontier_phi_49_44_ladder;
        }
        float _2636;
        if (_1704 > 0.0)
        {
            _2636 = abs((1.0 - _1695) / _1704);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1704 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1695 + 1.0) / _1704);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2636 = frontier_phi_61_56_ladder;
        }
        float _2638 = isnan(_2277) ? _1811 : (isnan(_1811) ? _2277 : min(_1811, _2277));
        float _2639 = isnan(_2636) ? _2638 : (isnan(_2638) ? _2636 : min(_2638, _2636));
        float _2643 = (_2639 * _1698) + _1687;
        float _2644 = (_2639 * _1701) + _1691;
        float _2645 = (_2639 * _1704) + _1695;
        float _2646 = _2639 * 9.9999997473787516355514526367188e-05;
        float _2647 = (-1.0) - _2646;
        float _2649 = _2646 + 1.0;
        float frontier_phi_34_61_ladder;
        float frontier_phi_34_61_ladder_1;
        float frontier_phi_34_61_ladder_2;
        if ((_2645 > _2649) || ((_2645 < _2647) || ((_2644 > _2649) || ((_2644 < _2647) || ((_2643 < _2647) || (_2643 > _2649))))))
        {
            frontier_phi_34_61_ladder = 0.0;
            frontier_phi_34_61_ladder_1 = 0.0;
            frontier_phi_34_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2766 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2645, cbModelParam._m0[17u].z, fma(_2644, cbModelParam._m0[17u].y, _2643 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2645, cbModelParam._m0[18u].z, fma(_2644, cbModelParam._m0[18u].y, _2643 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2645, cbModelParam._m0[19u].z, fma(_2644, cbModelParam._m0[19u].y, _2643 * cbModelParam._m0[19u].x))), _1634);
            frontier_phi_34_61_ladder = _2766.z * cbModelParam._m0[1u].z;
            frontier_phi_34_61_ladder_1 = _2766.y * cbModelParam._m0[1u].z;
            frontier_phi_34_61_ladder_2 = _2766.x * cbModelParam._m0[1u].z;
        }
        _1723 = frontier_phi_34_61_ladder_2;
        _1725 = frontier_phi_34_61_ladder_1;
        _1727 = frontier_phi_34_61_ladder;
    }
    else
    {
        vec4 _1707 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_731, _732, _733), _1634);
        _1723 = _1707.x * cbModelParam._m0[1u].z;
        _1725 = _1707.y * cbModelParam._m0[1u].z;
        _1727 = _1707.z * cbModelParam._m0[1u].z;
    }
    float _1739 = ((((1.0 - _751) * ((_739 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_751 * _739)) * _723;
    float _1740 = _1739 * ((cbModelParam._m0[1u].w * (_1723 - _1625)) + _1625);
    float _1741 = _1739 * ((cbModelParam._m0[1u].w * (_1725 - _1627)) + _1627);
    float _1742 = _1739 * ((cbModelParam._m0[1u].w * (_1727 - _1629)) + _1629);
    float _1745 = fma(_1742, cbSceneParam._m0[89u].z, fma(_1741, cbSceneParam._m0[89u].y, _1740 * cbSceneParam._m0[89u].x));
    float _1748 = fma(_1742, cbSceneParam._m0[90u].z, fma(_1741, cbSceneParam._m0[90u].y, _1740 * cbSceneParam._m0[90u].x));
    float _1751 = fma(_1742, cbSceneParam._m0[91u].z, fma(_1741, cbSceneParam._m0[91u].y, _1740 * cbSceneParam._m0[91u].x));
    float _1785 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1789 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1793 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1797 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1798 = _1785 / _1797;
    float _1799 = _1789 / _1797;
    float _1800 = _1793 / _1797;
    float _1947;
    float _1948;
    float _1949;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1827 = ((uint(_1800 > cbSceneParam._m0[59u].y) + uint(_1800 > cbSceneParam._m0[59u].x)) + uint(_1800 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1828 = _1827 + 43u;
        uint _1836 = _1827 + 44u;
        uint _1844 = _1827 + 45u;
        uint _1852 = _1827 + 46u;
        float _1863 = fma(_1797, cbSceneParam._m0[_1828].w, fma(_1793, cbSceneParam._m0[_1828].z, fma(_1789, cbSceneParam._m0[_1828].y, _1785 * cbSceneParam._m0[_1828].x)));
        float _1867 = fma(_1797, cbSceneParam._m0[_1836].w, fma(_1793, cbSceneParam._m0[_1836].z, fma(_1789, cbSceneParam._m0[_1836].y, _1785 * cbSceneParam._m0[_1836].x)));
        float _1875 = fma(_1797, cbSceneParam._m0[_1852].w, fma(_1793, cbSceneParam._m0[_1852].z, fma(_1789, cbSceneParam._m0[_1852].y, _1785 * cbSceneParam._m0[_1852].x)));
        float _1880 = cbSceneParam._m0[33u].z * _1875;
        float _1882 = cbSceneParam._m0[33u].w * _1875;
        float _1885 = fma(_1797, cbSceneParam._m0[_1844].w, fma(_1793, cbSceneParam._m0[_1844].z, fma(_1789, cbSceneParam._m0[_1844].y, _1785 * cbSceneParam._m0[_1844].x))) / _1875;
        float _1933 = (cbSceneParam._m0[33u].x - sqrt(((_1799 * _1799) + (_1798 * _1798)) + (_1800 * _1800))) * cbSceneParam._m0[33u].y;
        float _3969 = isnan(0.0) ? _1933 : (isnan(_1933) ? 0.0 : max(_1933, 0.0));
        float _1940 = (isnan(1.0) ? _3969 : (isnan(_3969) ? 1.0 : min(_3969, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1880 + _1863) / _1875, (_1882 + _1867) / _1875), _1885), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1882 + _1863) / _1875, (_1867 - _1880) / _1875), _1885), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1863 - _1880) / _1875, (_1867 - _1882) / _1875), _1885), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1863 - _1882) / _1875, (_1880 + _1867) / _1875), _1885), 0.0)).x), vec4(0.25)));
        _1947 = 1.0 - (_1940 * cbSceneParam._m0[34u].x);
        _1948 = 1.0 - (_1940 * cbSceneParam._m0[34u].y);
        _1949 = 1.0 - (_1940 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1947 = 1.0;
        _1948 = 1.0;
        _1949 = 1.0;
    }
    float _2013;
    float _2015;
    float _2017;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2001 = fma(_1797, cbSceneParam._m0[63u].w, fma(_1793, cbSceneParam._m0[63u].z, fma(_1789, cbSceneParam._m0[63u].y, _1785 * cbSceneParam._m0[63u].x)));
        float _2002 = fma(_1797, cbSceneParam._m0[60u].w, fma(_1793, cbSceneParam._m0[60u].z, fma(_1789, cbSceneParam._m0[60u].y, _1785 * cbSceneParam._m0[60u].x))) / _2001;
        float _2003 = fma(_1797, cbSceneParam._m0[61u].w, fma(_1793, cbSceneParam._m0[61u].z, fma(_1789, cbSceneParam._m0[61u].y, _1785 * cbSceneParam._m0[61u].x))) / _2001;
        float frontier_phi_46_45_ladder;
        float frontier_phi_46_45_ladder_1;
        float frontier_phi_46_45_ladder_2;
        if ((((_2002 >= cbSceneParam._m0[64u].x) && (_2003 >= cbSceneParam._m0[64u].y)) && (_2002 <= cbSceneParam._m0[64u].z)) && (_2003 <= cbSceneParam._m0[64u].w))
        {
            float _2290 = fma(_1797, cbSceneParam._m0[62u].w, fma(_1793, cbSceneParam._m0[62u].z, fma(_1789, cbSceneParam._m0[62u].y, _1785 * cbSceneParam._m0[62u].x))) / _2001;
            float _2294 = isnan(cbSceneParam._m0[41u].w) ? _2290 : (isnan(_2290) ? cbSceneParam._m0[41u].w : max(_2290, cbSceneParam._m0[41u].w));
            float _2337 = (cbSceneParam._m0[33u].x - sqrt(((_1799 * _1799) + (_1798 * _1798)) + (_1800 * _1800))) * cbSceneParam._m0[33u].y;
            float _3985 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
            float _2344 = (isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2002, cbSceneParam._m0[33u].w + _2003), _2294), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2002, _2003 - cbSceneParam._m0[33u].z), _2294), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2002 - cbSceneParam._m0[33u].z, _2003 - cbSceneParam._m0[33u].w), _2294), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2002 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2003), _2294), 0.0)).x), vec4(0.25)));
            float _2348 = 1.0 - (_2344 * cbSceneParam._m0[34u].x);
            float _2349 = 1.0 - (_2344 * cbSceneParam._m0[34u].y);
            float _2350 = 1.0 - (_2344 * cbSceneParam._m0[34u].z);
            frontier_phi_46_45_ladder = isnan(_2350) ? _1949 : (isnan(_1949) ? _2350 : min(_1949, _2350));
            frontier_phi_46_45_ladder_1 = isnan(_2349) ? _1948 : (isnan(_1948) ? _2349 : min(_1948, _2349));
            frontier_phi_46_45_ladder_2 = isnan(_2348) ? _1947 : (isnan(_1947) ? _2348 : min(_1947, _2348));
        }
        else
        {
            frontier_phi_46_45_ladder = _1949;
            frontier_phi_46_45_ladder_1 = _1948;
            frontier_phi_46_45_ladder_2 = _1947;
        }
        _2013 = frontier_phi_46_45_ladder_2;
        _2015 = frontier_phi_46_45_ladder_1;
        _2017 = frontier_phi_46_45_ladder;
    }
    else
    {
        _2013 = _1947;
        _2015 = _1948;
        _2017 = _1949;
    }
    uvec4 _2022 = floatBitsToUint(cbInstanceData._m0[_698 + 5u]);
    uint _2024 = _2022.x * 14u;
    uint _2025 = _2024 + 13u;
    float _2030 = _723 + (-1.0);
    float _2033 = (cbLight._m0[_2025].x * _2030) + 1.0;
    float _2034 = (cbLight._m0[_2025].y * _2030) + 1.0;
    uint _2035 = _2024 + 5u;
    float _2041 = isnan(1.0) ? _2034 : (isnan(_2034) ? 1.0 : min(_2034, 1.0));
    uint _2045 = _2024 + 4u;
    float _2054 = isnan(1.0) ? _2033 : (isnan(_2033) ? 1.0 : min(_2033, 1.0));
    uint _2058 = _2024 | 1u;
    float _2069 = dot(vec3(cbLight._m0[_2024].xyz), vec3(_623, _624, _625));
    float _2072 = dot(vec3(cbLight._m0[_2058].xyz), vec3(_623, _624, _625));
    float _4021 = isnan(0.0) ? _2069 : (isnan(_2069) ? 0.0 : max(_2069, 0.0));
    float _4032 = isnan(0.0) ? _2072 : (isnan(_2072) ? 0.0 : max(_2072, 0.0));
    float _2077 = (isnan(1.0) ? _4021 : (isnan(_4021) ? 1.0 : min(_4021, 1.0))) * 0.3183098733425140380859375;
    float _2079 = (isnan(1.0) ? _4032 : (isnan(_4032) ? 1.0 : min(_4032, 1.0))) * 0.3183098733425140380859375;
    float _2086 = ((cbLight._m0[_2035].x * _2041) * _2079) + (((cbLight._m0[_2045].x * _2013) * _2054) * _2077);
    float _2087 = ((_2041 * cbLight._m0[_2035].y) * _2079) + (((cbLight._m0[_2045].y * _2015) * _2054) * _2077);
    float _2088 = ((_2041 * cbLight._m0[_2035].z) * _2079) + (((cbLight._m0[_2045].z * _2017) * _2054) * _2077);
    uint _2090 = _2024 + 8u;
    float _2103 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2024].w)) * _626) * 0.949999988079071044921875);
    float _2104 = _2103 * _2103;
    float _2105 = cbLight._m0[_2024].x + _650;
    float _2106 = cbLight._m0[_2024].y + _651;
    float _2107 = cbLight._m0[_2024].z + _652;
    float _2111 = inversesqrt(dot(vec3(_2105, _2106, _2107), vec3(_2105, _2106, _2107)));
    float _2112 = _2111 * _2105;
    float _2113 = _2111 * _2106;
    float _2114 = _2111 * _2107;
    float _2115 = dot(vec3(_623, _624, _625), vec3(cbLight._m0[_2024].xyz));
    float _4043 = isnan(0.0) ? _2115 : (isnan(_2115) ? 0.0 : max(_2115, 0.0));
    float _2118 = isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0));
    float _4054 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _2119 = isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0));
    float _2120 = dot(vec3(_623, _624, _625), vec3(_2112, _2113, _2114));
    float _4065 = isnan(0.0) ? _2120 : (isnan(_2120) ? 0.0 : max(_2120, 0.0));
    float _2123 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _2124 = dot(vec3(cbLight._m0[_2024].xyz), vec3(_2112, _2113, _2114));
    float _4076 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _2128 = _2104 * _2104;
    float _2132 = ((_2123 * _2123) * (_2128 + (-1.0))) + 1.0;
    float _2143 = (exp2(log2(1.0 - (isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2144 = 1.0 - _2104;
    float _2155 = (0.5 / (((_2119 * ((_2118 * _2144) + _2104)) + 9.9999999392252902907785028219223e-09) + (((_2119 * _2144) + _2104) * _2118))) * _2118;
    float _4087 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _2157 = (isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * (_2128 / ((_2132 * _2132) * 3.141590118408203125));
    uint _2171 = _2024 + 9u;
    float _2182 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2058].w)) * _626) * 0.949999988079071044921875);
    float _2183 = _2182 * _2182;
    float _2184 = cbLight._m0[_2058].x + _650;
    float _2185 = cbLight._m0[_2058].y + _651;
    float _2186 = cbLight._m0[_2058].z + _652;
    float _2190 = inversesqrt(dot(vec3(_2184, _2185, _2186), vec3(_2184, _2185, _2186)));
    float _2191 = _2190 * _2184;
    float _2192 = _2190 * _2185;
    float _2193 = _2190 * _2186;
    float _2194 = dot(vec3(_623, _624, _625), vec3(cbLight._m0[_2058].xyz));
    float _4098 = isnan(0.0) ? _2194 : (isnan(_2194) ? 0.0 : max(_2194, 0.0));
    float _2197 = isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0));
    float _2198 = dot(vec3(_623, _624, _625), vec3(_2191, _2192, _2193));
    float _4109 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
    float _2201 = isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0));
    float _2202 = dot(vec3(cbLight._m0[_2058].xyz), vec3(_2191, _2192, _2193));
    float _4120 = isnan(0.0) ? _2202 : (isnan(_2202) ? 0.0 : max(_2202, 0.0));
    float _2206 = _2183 * _2183;
    float _2210 = ((_2201 * _2201) * (_2206 + (-1.0))) + 1.0;
    float _2219 = (exp2(log2(1.0 - (isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2220 = 1.0 - _2183;
    float _2230 = (0.5 / (((_2119 * ((_2197 * _2220) + _2183)) + 9.9999999392252902907785028219223e-09) + (((_2119 * _2220) + _2183) * _2197))) * _2197;
    float _4131 = isnan(0.0) ? _2230 : (isnan(_2230) ? 0.0 : max(_2230, 0.0));
    float _2232 = (isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0))) * (_2206 / ((_2210 * _2210) * 3.141590118408203125));
    float _2242 = (((_2219 * cbLight._m0[_2171].x) * _2232) * _2041) + ((((cbLight._m0[_2090].x * _2013) * _2143) * _2157) * _2054);
    float _2243 = (((_2219 * cbLight._m0[_2171].y) * _2232) * _2041) + ((((cbLight._m0[_2090].y * _2015) * _2143) * _2157) * _2054);
    float _2244 = (((_2219 * cbLight._m0[_2171].z) * _2232) * _2041) + ((((cbLight._m0[_2090].z * _2017) * _2143) * _2157) * _2054);
    float _2407;
    float _2409;
    float _2411;
    float _2413;
    float _2415;
    float _2417;
    if (_2022.y == 0u)
    {
        uvec4 _2362 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2363 = _2362.x;
        uint _2374 = uint((float(_2362.y) * floor(float(uint(cbSceneParam._m0[85u].y * _659) / _2363))) + floor(float(uint(cbSceneParam._m0[85u].x * _658) / _2363)));
        float _2384 = (log2(_1800 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2385 = isnan(0.0) ? _2384 : (isnan(_2384) ? 0.0 : max(_2384, 0.0));
        uint _2388 = uint(isnan(14.0) ? _2385 : (isnan(_2385) ? 14.0 : min(_2385, 14.0)));
        uvec4 _2393 = texelFetch(g_lightClusterGridBuffer, int(((_2388 << 2u) + (_2374 << 6u)) >> 2u));
        uint _2394 = _2393.x;
        uint _2395 = _2362.z;
        float _2524;
        float _2526;
        float _2528;
        float _2530;
        float _2532;
        float _2534;
        if (((((1u << ((_2395 >> 4u) & 15u)) + 4294967295u) & _2394) == 0u) || ((_2395 & 240u) == 0u))
        {
            _2524 = 0.0;
            _2526 = 0.0;
            _2528 = 0.0;
            _2530 = 0.0;
            _2532 = 0.0;
            _2534 = 0.0;
        }
        else
        {
            float _2525;
            float _2527;
            float _2529;
            float _2531;
            float _2533;
            float _2535;
            float _2694 = 0.0;
            float _2695 = 0.0;
            float _2696 = 0.0;
            float _2697 = 0.0;
            float _2698 = 0.0;
            float _2699 = 0.0;
            uint _2700 = 0u;
            uint _2709;
            bool _2710;
            for (;;)
            {
                _2709 = texelFetch(g_lightClassification, int((((_2388 << 5u) + (_2374 << 9u)) + (_2700 << 2u)) >> 2u)).x;
                _2710 = _2709 == 0u;
                float frontier_phi_70_pred;
                float frontier_phi_70_pred_1;
                float frontier_phi_70_pred_2;
                float frontier_phi_70_pred_3;
                float frontier_phi_70_pred_4;
                float frontier_phi_70_pred_5;
                if (_2710)
                {
                    frontier_phi_70_pred = _2697;
                    frontier_phi_70_pred_1 = _2699;
                    frontier_phi_70_pred_2 = _2698;
                    frontier_phi_70_pred_3 = _2696;
                    frontier_phi_70_pred_4 = _2695;
                    frontier_phi_70_pred_5 = _2694;
                }
                else
                {
                    float _2839;
                    float _2840;
                    float _2841;
                    float _2842;
                    float _2843;
                    float _2844;
                    uint _2845;
                    _2839 = _2694;
                    _2840 = _2695;
                    _2841 = _2696;
                    _2842 = _2697;
                    _2843 = _2698;
                    _2844 = _2699;
                    _2845 = _2709;
                    float _2771;
                    float _2772;
                    float _2773;
                    float _2774;
                    float _2775;
                    float _2776;
                    for (;;)
                    {
                        uint _2849 = uint(findLSB(_2845)) + (_2700 << 5u);
                        uint _2846 = (_2845 + 4294967295u) & _2845;
                        uint _2851 = _2849 * 48u;
                        vec4 _2865 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2851)).x, texelFetch(g_PointLightRenderingBuffer, int(_2851 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2851 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2851 + 3u)).x));
                        uint _2871 = (_2849 * 48u) + 4u;
                        vec4 _2884 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2871)).x, texelFetch(g_PointLightRenderingBuffer, int(_2871 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2871 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2871 + 3u)).x));
                        uint _2890 = (_2849 * 48u) + 8u;
                        vec3 _2901 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2890)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 2u)).x));
                        float _2905 = _2865.x - _1798;
                        float _2906 = _2865.y - _1799;
                        float _2907 = _2865.z - _1800;
                        float _2908 = dot(vec3(_2905, _2906, _2907), vec3(_2905, _2906, _2907));
                        float _2911 = inversesqrt(_2908);
                        float _2912 = _2911 * _2905;
                        float _2913 = _2911 * _2906;
                        float _2914 = _2911 * _2907;
                        float _2915 = dot(vec3(_679, _682, _685), vec3(_2912, _2913, _2914));
                        float _2920 = 1.0 - (_2908 * _2865.w);
                        float _4152 = isnan(0.0) ? _2920 : (isnan(_2920) ? 0.0 : max(_2920, 0.0));
                        float _2921 = isnan(1.0) ? _4152 : (isnan(_4152) ? 1.0 : min(_4152, 1.0));
                        float _2922 = sqrt(_2908) * _2884.w;
                        float _2925 = 1.39999997615814208984375 / (_2922 + 1.39999997615814208984375);
                        float _2926 = _2925 * _2925;
                        float _2929 = ((1.0 - _2926) * _2915) + _2926;
                        float _2932 = _2922 * _2922;
                        float _2936 = ((isnan(0.0) ? _2929 : (isnan(_2929) ? 0.0 : max(_2929, 0.0))) * _2921) / ((_2932 * 0.699999988079071044921875) + 1.0);
                        float _2940 = (-0.0) - _1798;
                        float _2941 = (-0.0) - _1799;
                        float _2942 = (-0.0) - _1800;
                        float _2946 = inversesqrt(dot(vec3(_2940, _2941, _2942), vec3(_2940, _2941, _2942)));
                        float _2947 = _2946 * _2940;
                        float _2948 = _2946 * _2941;
                        float _2949 = _2946 * _2942;
                        float _2956 = exp2(log2(1.0 / ((_2932 * 3.5) + 5.0)) * 0.25);
                        float _2957 = 1.0 - _739;
                        float _2964 = sqrt(1.0 - ((1.0 - (_2957 * _2957)) * (1.0 - (_2956 * _2956))));
                        float _2965 = _2964 * _2964;
                        float _2966 = _2965 * _2965;
                        float _2967 = _2947 + _2912;
                        float _2968 = _2948 + _2913;
                        float _2969 = _2949 + _2914;
                        float _2973 = inversesqrt(dot(vec3(_2967, _2968, _2969), vec3(_2967, _2968, _2969)));
                        float _2977 = dot(vec3(_679, _682, _685), vec3(_2947, _2948, _2949));
                        float _4168 = isnan(0.0) ? _2977 : (isnan(_2977) ? 0.0 : max(_2977, 0.0));
                        float _2980 = isnan(1.0) ? _4168 : (isnan(_4168) ? 1.0 : min(_4168, 1.0));
                        float _2981 = dot(vec3(_679, _682, _685), vec3(_2973 * _2967, _2973 * _2968, _2973 * _2969));
                        float _4179 = isnan(0.0) ? _2981 : (isnan(_2981) ? 0.0 : max(_2981, 0.0));
                        float _2984 = isnan(1.0) ? _4179 : (isnan(_4179) ? 1.0 : min(_4179, 1.0));
                        float _2988 = ((_2984 * _2984) * (_2966 + (-1.0))) + 1.0;
                        float _2989 = _2925 * _2965;
                        float _2990 = _2989 * _2989;
                        float _2993 = ((1.0 - _2990) * _2915) + _2990;
                        float _4190 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
                        float _2994 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
                        float _2995 = 1.0 - _2965;
                        float _3005 = (0.5 / (((_2994 * ((_2980 * _2995) + _2965)) + 9.9999999392252902907785028219223e-09) + (((_2994 * _2995) + _2965) * _2980))) * _2994;
                        float _4201 = isnan(0.0) ? _3005 : (isnan(_3005) ? 0.0 : max(_3005, 0.0));
                        float _3016 = (((_2966 * 3.1415927410125732421875) * (isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0)))) / ((_2988 * _2988) * ((_2932 * 2.1991131305694580078125) + 3.141590118408203125))) * _2921;
                        _2774 = (_2936 * _2884.x) + _2842;
                        _2775 = (_2936 * _2884.y) + _2843;
                        _2776 = (_2936 * _2884.z) + _2844;
                        _2771 = (_3016 * _2901.x) + _2839;
                        _2772 = (_3016 * _2901.y) + _2840;
                        _2773 = (_3016 * _2901.z) + _2841;
                        if (_2846 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2839 = _2771;
                            _2840 = _2772;
                            _2841 = _2773;
                            _2842 = _2774;
                            _2843 = _2775;
                            _2844 = _2776;
                            _2845 = _2846;
                        }
                    }
                    frontier_phi_70_pred = _2774;
                    frontier_phi_70_pred_1 = _2776;
                    frontier_phi_70_pred_2 = _2775;
                    frontier_phi_70_pred_3 = _2773;
                    frontier_phi_70_pred_4 = _2772;
                    frontier_phi_70_pred_5 = _2771;
                }
                _2531 = frontier_phi_70_pred;
                _2535 = frontier_phi_70_pred_1;
                _2533 = frontier_phi_70_pred_2;
                _2529 = frontier_phi_70_pred_3;
                _2527 = frontier_phi_70_pred_4;
                _2525 = frontier_phi_70_pred_5;
                uint _2701 = _2700 + 1u;
                if (_2701 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2694 = _2525;
                    _2695 = _2527;
                    _2696 = _2529;
                    _2697 = _2531;
                    _2698 = _2533;
                    _2699 = _2535;
                    _2700 = _2701;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2524 = _2525;
            _2526 = _2527;
            _2528 = _2529;
            _2530 = _2531;
            _2532 = _2533;
            _2534 = _2535;
        }
        uvec4 _2538 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2539 = _2538.z;
        uint _2541 = (_2539 >> 8u) & 15u;
        float _2662;
        float _2664;
        float _2666;
        float _2668;
        float _2670;
        float _2672;
        if (((4294967295u << _2541) & _2394) == 0u)
        {
            _2662 = _2524;
            _2664 = _2526;
            _2666 = _2528;
            _2668 = _2530;
            _2670 = _2532;
            _2672 = _2534;
        }
        else
        {
            float _2687 = inversesqrt(dot(vec3(_1798, _1799, _1800), vec3(_1798, _1799, _1800)));
            float _2688 = _2687 * _1798;
            float _2689 = _2687 * _1799;
            float _2690 = _2687 * _1800;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2541 < ((_2539 >> 12u) & 15u))
            {
                float _2663;
                float _2665;
                float _2667;
                float _2669;
                float _2671;
                float _2673;
                float _2822 = _2524;
                float _2823 = _2526;
                float _2824 = _2528;
                float _2825 = _2530;
                float _2826 = _2532;
                float _2827 = _2534;
                uint _2828 = _2541;
                uint _2837;
                bool _2838;
                for (;;)
                {
                    _2837 = texelFetch(g_lightClassification, int((((_2388 << 5u) + (_2374 << 9u)) + (_2828 << 2u)) >> 2u)).x;
                    _2838 = _2837 == 0u;
                    float frontier_phi_76_pred;
                    float frontier_phi_76_pred_1;
                    float frontier_phi_76_pred_2;
                    float frontier_phi_76_pred_3;
                    float frontier_phi_76_pred_4;
                    float frontier_phi_76_pred_5;
                    if (_2838)
                    {
                        frontier_phi_76_pred = _2827;
                        frontier_phi_76_pred_1 = _2826;
                        frontier_phi_76_pred_2 = _2825;
                        frontier_phi_76_pred_3 = _2824;
                        frontier_phi_76_pred_4 = _2823;
                        frontier_phi_76_pred_5 = _2822;
                    }
                    else
                    {
                        float _3021;
                        float _3022;
                        float _3023;
                        float _3024;
                        float _3025;
                        float _3026;
                        float _3316;
                        float _3317;
                        float _3318;
                        float _3319;
                        float _3320;
                        float _3321;
                        float _3034 = _2822;
                        float _3035 = _2823;
                        float _3036 = _2824;
                        float _3037 = _2825;
                        float _3038 = _2826;
                        float _3039 = _2827;
                        uint _3040 = _2837;
                        uint _3041;
                        vec4 _3066;
                        float _3067;
                        vec4 _3082;
                        vec3 _3094;
                        vec4 _3110;
                        vec4 _3126;
                        float _3172;
                        bool _3173;
                        for (;;)
                        {
                            uint _3051 = ((_2828 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3040));
                            _3041 = (_3040 + 4294967295u) & _3040;
                            uint _3053 = _3051 * 40u;
                            _3066 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3053)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 3u)).x));
                            _3067 = _3066.w;
                            uint _3069 = (_3051 * 40u) + 4u;
                            _3082 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3069)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3069 + 3u)).x));
                            uint _3084 = (_3051 * 40u) + 8u;
                            _3094 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3084)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3084 + 2u)).x));
                            uint _3097 = (_3051 * 40u) + 16u;
                            _3110 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3097)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3097 + 3u)).x));
                            uint _3113 = (_3051 * 40u) + 20u;
                            _3126 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3113)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3113 + 3u)).x));
                            uint _3128 = (_3051 * 40u) + 24u;
                            vec4 _3141 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3128)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3128 + 3u)).x));
                            uint _3147 = (_3051 * 40u) + 28u;
                            vec4 _3160 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3147)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3147 + 3u)).x));
                            _3172 = fma(_1800, _3160.z, fma(_1799, _3160.y, _3160.x * _1798)) + _3160.w;
                            _3173 = !((fma(_1800, _3141.z, fma(_1799, _3141.y, _3141.x * _1798)) + _3141.w) <= 0.0);
                            float frontier_phi_82_pred;
                            float frontier_phi_82_pred_1;
                            float frontier_phi_82_pred_2;
                            float frontier_phi_82_pred_3;
                            float frontier_phi_82_pred_4;
                            float frontier_phi_82_pred_5;
                            if (_3173)
                            {
                                float _3200 = _3066.x - _1798;
                                float _3201 = _3066.y - _1799;
                                float _3202 = _3066.z - _1800;
                                float _3203 = dot(vec3(_3200, _3201, _3202), vec3(_3200, _3201, _3202));
                                float _3206 = inversesqrt(_3203);
                                float _3207 = _3206 * _3200;
                                float _3208 = _3206 * _3201;
                                float _3209 = _3206 * _3202;
                                float _3213 = 1.0 - (_3203 / (_3067 * _3067));
                                float _4212 = isnan(0.0) ? _3213 : (isnan(_3213) ? 0.0 : max(_3213, 0.0));
                                float _3214 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
                                float _3218 = sqrt(_3203) * _3082.w;
                                float _3220 = 1.39999997615814208984375 / (_3218 + 1.39999997615814208984375);
                                float _3221 = _3220 * _3220;
                                float _3224 = ((1.0 - _3221) * dot(vec3(_3207, _3208, _3209), vec3(_679, _682, _685))) + _3221;
                                float _3227 = _3218 * _3218;
                                float _3231 = (fma(_1800, _3110.z, fma(_1799, _3110.y, _3110.x * _1798)) + _3110.w) / _3172;
                                float _3232 = (fma(_1800, _3126.z, fma(_1799, _3126.y, _3126.x * _1798)) + _3126.w) / _3172;
                                float _3236 = 1.0 - dot(vec2(_3231, _3232), vec2(_3231, _3232));
                                float _4228 = isnan(0.0) ? _3236 : (isnan(_3236) ? 0.0 : max(_3236, 0.0));
                                float _3237 = isnan(1.0) ? _4228 : (isnan(_4228) ? 1.0 : min(_4228, 1.0));
                                float _3238 = _3237 * (((isnan(0.0) ? _3224 : (isnan(_3224) ? 0.0 : max(_3224, 0.0))) * _3214) / ((_3227 * 0.699999988079071044921875) + 1.0));
                                float _3250 = exp2(log2(1.0 / ((_3227 * 3.5) + 5.0)) * 0.25);
                                float _3251 = 1.0 - _739;
                                float _3258 = sqrt(1.0 - ((1.0 - (_3251 * _3251)) * (1.0 - (_3250 * _3250))));
                                float _3259 = _3258 * _3258;
                                float _3260 = _3259 * _3259;
                                float _3261 = _3207 - _2688;
                                float _3262 = _3208 - _2689;
                                float _3263 = _3209 - _2690;
                                float _3267 = inversesqrt(dot(vec3(_3261, _3262, _3263), vec3(_3261, _3262, _3263)));
                                float _3271 = dot(vec3(_679, _682, _685), vec3((-0.0) - _2688, (-0.0) - _2689, (-0.0) - _2690));
                                float _4239 = isnan(0.0) ? _3271 : (isnan(_3271) ? 0.0 : max(_3271, 0.0));
                                float _3274 = isnan(1.0) ? _4239 : (isnan(_4239) ? 1.0 : min(_4239, 1.0));
                                float _3275 = dot(vec3(_679, _682, _685), vec3(_3267 * _3261, _3267 * _3262, _3267 * _3263));
                                float _4250 = isnan(0.0) ? _3275 : (isnan(_3275) ? 0.0 : max(_3275, 0.0));
                                float _3278 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
                                float _3282 = ((_3278 * _3278) * (_3260 + (-1.0))) + 1.0;
                                float _3283 = _3220 * _3259;
                                float _3284 = _3283 * _3283;
                                float _3290 = ((1.0 - _3284) * dot(vec3(_679, _682, _685), vec3(_3207, _3208, _3209))) + _3284;
                                float _4261 = isnan(0.0) ? _3290 : (isnan(_3290) ? 0.0 : max(_3290, 0.0));
                                float _3291 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
                                float _3292 = 1.0 - _3259;
                                float _3302 = (0.5 / (((_3291 * ((_3274 * _3292) + _3259)) + 9.9999999392252902907785028219223e-09) + (((_3291 * _3292) + _3259) * _3274))) * _3291;
                                float _4272 = isnan(0.0) ? _3302 : (isnan(_3302) ? 0.0 : max(_3302, 0.0));
                                float _3312 = (_3237 * _3214) * (((_3260 * 3.1415927410125732421875) * (isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0)))) / ((_3282 * _3282) * ((_3227 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_82_pred = _3238 * _3082.z;
                                frontier_phi_82_pred_1 = _3238 * _3082.y;
                                frontier_phi_82_pred_2 = _3238 * _3082.x;
                                frontier_phi_82_pred_3 = _3312 * _3094.z;
                                frontier_phi_82_pred_4 = _3312 * _3094.y;
                                frontier_phi_82_pred_5 = _3312 * _3094.x;
                            }
                            else
                            {
                                frontier_phi_82_pred = 0.0;
                                frontier_phi_82_pred_1 = 0.0;
                                frontier_phi_82_pred_2 = 0.0;
                                frontier_phi_82_pred_3 = 0.0;
                                frontier_phi_82_pred_4 = 0.0;
                                frontier_phi_82_pred_5 = 0.0;
                            }
                            _3321 = frontier_phi_82_pred;
                            _3320 = frontier_phi_82_pred_1;
                            _3319 = frontier_phi_82_pred_2;
                            _3318 = frontier_phi_82_pred_3;
                            _3317 = frontier_phi_82_pred_4;
                            _3316 = frontier_phi_82_pred_5;
                            _3024 = _3319 + _3037;
                            _3025 = _3320 + _3038;
                            _3026 = _3321 + _3039;
                            _3021 = _3316 + _3034;
                            _3022 = _3317 + _3035;
                            _3023 = _3318 + _3036;
                            if (_3041 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3034 = _3021;
                                _3035 = _3022;
                                _3036 = _3023;
                                _3037 = _3024;
                                _3038 = _3025;
                                _3039 = _3026;
                                _3040 = _3041;
                                continue;
                            }
                        }
                        frontier_phi_76_pred = _3026;
                        frontier_phi_76_pred_1 = _3025;
                        frontier_phi_76_pred_2 = _3024;
                        frontier_phi_76_pred_3 = _3023;
                        frontier_phi_76_pred_4 = _3022;
                        frontier_phi_76_pred_5 = _3021;
                    }
                    _2673 = frontier_phi_76_pred;
                    _2671 = frontier_phi_76_pred_1;
                    _2669 = frontier_phi_76_pred_2;
                    _2667 = frontier_phi_76_pred_3;
                    _2665 = frontier_phi_76_pred_4;
                    _2663 = frontier_phi_76_pred_5;
                    uint _2829 = _2828 + 1u;
                    if (_2829 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2822 = _2663;
                        _2823 = _2665;
                        _2824 = _2667;
                        _2825 = _2669;
                        _2826 = _2671;
                        _2827 = _2673;
                        _2828 = _2829;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2671;
                frontier_phi_63_64_ladder_1 = _2673;
                frontier_phi_63_64_ladder_2 = _2669;
                frontier_phi_63_64_ladder_3 = _2667;
                frontier_phi_63_64_ladder_4 = _2665;
                frontier_phi_63_64_ladder_5 = _2663;
            }
            else
            {
                frontier_phi_63_64_ladder = _2532;
                frontier_phi_63_64_ladder_1 = _2534;
                frontier_phi_63_64_ladder_2 = _2530;
                frontier_phi_63_64_ladder_3 = _2528;
                frontier_phi_63_64_ladder_4 = _2526;
                frontier_phi_63_64_ladder_5 = _2524;
            }
            _2662 = frontier_phi_63_64_ladder_5;
            _2664 = frontier_phi_63_64_ladder_4;
            _2666 = frontier_phi_63_64_ladder_3;
            _2668 = frontier_phi_63_64_ladder_2;
            _2670 = frontier_phi_63_64_ladder;
            _2672 = frontier_phi_63_64_ladder_1;
        }
        float _2677 = isnan(1.0) ? _723 : (isnan(_723) ? 1.0 : min(_723, 1.0));
        _2407 = (_2677 * _2668) + _2086;
        _2409 = (_2677 * _2670) + _2087;
        _2411 = (_2677 * _2672) + _2088;
        _2413 = ((_2662 * 0.039999999105930328369140625) * _2677) + _2242;
        _2415 = ((_2664 * 0.039999999105930328369140625) * _2677) + _2243;
        _2417 = ((_2666 * 0.039999999105930328369140625) * _2677) + _2244;
    }
    else
    {
        _2407 = _2086;
        _2409 = _2087;
        _2411 = _2088;
        _2413 = _2242;
        _2415 = _2243;
        _2417 = _2244;
    }
    uint _2423 = _699 + uint(cbMatDynParam._m0[0u].w);
    float _4288 = isnan(0.0) ? _709 : (isnan(_709) ? 0.0 : max(_709, 0.0));
    float _4299 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _4310 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _2454 = (((isnan(1.0) ? _4288 : (isnan(_4288) ? 1.0 : min(_4288, 1.0))) * (_2407 + ((isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0))) * _723))) + ((_2413 + ((isnan(0.0) ? _1745 : (isnan(_1745) ? 0.0 : max(_1745, 0.0))) * _1533)) * cbPerFrame._m0[3u].x)) + (((_508.x * _295) * (((_573 * (cbMtdParam._m0[15u].x - cbMtdParam._m0[13u].x)) * _568) + cbMtdParam._m0[13u].x)) * cbInstanceData._m0[_2423].x);
    float _2456 = ((((_508.y * _295) * (((_573 * (cbMtdParam._m0[15u].y - cbMtdParam._m0[13u].y)) * _568) + cbMtdParam._m0[13u].y)) * cbInstanceData._m0[_2423].y) + ((_2415 + ((isnan(0.0) ? _1748 : (isnan(_1748) ? 0.0 : max(_1748, 0.0))) * _1533)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4299 : (isnan(_4299) ? 1.0 : min(_4299, 1.0))) * (_2409 + ((isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0))) * _723)));
    float _2458 = ((((_508.z * _295) * (((_573 * (cbMtdParam._m0[15u].z - cbMtdParam._m0[13u].z)) * _568) + cbMtdParam._m0[13u].z)) * cbInstanceData._m0[_2423].z) + ((_2417 + ((isnan(0.0) ? _1751 : (isnan(_1751) ? 0.0 : max(_1751, 0.0))) * _1533)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (_2411 + ((isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0))) * _723)));
    uint _2462 = _698 + 6u;
    float _2470 = _658 / cbSceneParam._m0[86u].x;
    float _2471 = _659 / cbSceneParam._m0[86u].y;
    vec4 _2485 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2470, _2471, (log2((isnan(cbSceneParam._m0[77u].w) ? _645 : (isnan(_645) ? cbSceneParam._m0[77u].w : min(_645, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2487 = _2485.x;
    float _2488 = _2485.y;
    float _2489 = _2485.z;
    float _2490 = _2485.w;
    float _2586;
    float _2588;
    float _2590;
    float _2592;
    if (_645 > cbSceneParam._m0[78u].w)
    {
        float _2549 = isnan(_645) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _645 : min(cbSceneParam._m0[80u].w, _645));
        float _2550 = _2549 / _645;
        float _2561 = _2550 * _277;
        float _2562 = _278 * _2550;
        float _2563 = (-0.0) - _2562;
        float _2564 = _2550 * _279;
        float _2566 = (cbSceneParam._m0[77u].w * _2563) / _2549;
        float _2567 = _2566 + cbSceneParam._m0[79u].w;
        float _2568 = cbSceneParam._m0[79u].w - _2562;
        float _2574 = sqrt(((_2561 * _2561) + (_2562 * _2562)) + (_2564 * _2564));
        float _2577 = (1.0 - (cbSceneParam._m0[77u].w / _2549)) * _2574;
        float _2582 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2584 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2784;
        if (abs((_2563 - _2566) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2784 = ((((_2567 > 0.0) ? exp2(_2582 * _2567) : (2.0 - exp2(_2584 * _2567))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2577;
        }
        else
        {
            float _2723 = 1.0 / cbSceneParam._m0[80u].x;
            float _2724 = isnan(_2568) ? _2567 : (isnan(_2567) ? _2568 : max(_2567, _2568));
            float _2725 = isnan(_2568) ? _2567 : (isnan(_2567) ? _2568 : min(_2567, _2568));
            float _2734 = isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : min(_2724, 0.0));
            float _2735 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : min(_2725, 0.0));
            _2784 = ((abs(_2574 / _2563) * cbSceneParam._m0[80u].y) * ((((_2734 - _2735) * 2.0) - ((exp2(_2582 * (isnan(0.0) ? _2724 : (isnan(_2724) ? 0.0 : max(_2724, 0.0)))) - exp2(_2582 * (isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0))))) * _2723)) - ((exp2(_2584 * _2734) - exp2(_2584 * _2735)) * _2723))) + (_2577 * cbSceneParam._m0[80u].z);
        }
        vec4 _2786 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2470, _2471, 1.0), 0.0);
        float _2795 = exp2((_2784 * (-1.44269502162933349609375)) * (1.0 - _2786.w));
        float _2796 = log2(_2795);
        float _2812 = log2(_2490);
        _2586 = (exp2(_2812 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2796 * cbSceneParam._m0[78u].x)) * _2786.x) / cbSceneParam._m0[78u].x)) + _2487;
        _2588 = (exp2(_2812 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2796 * cbSceneParam._m0[78u].y)) * _2786.y) / cbSceneParam._m0[78u].y)) + _2488;
        _2590 = (exp2(_2812 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2796 * cbSceneParam._m0[78u].z)) * _2786.z) / cbSceneParam._m0[78u].z)) + _2489;
        _2592 = _2795 * _2490;
    }
    else
    {
        _2586 = _2487;
        _2588 = _2488;
        _2590 = _2489;
        _2592 = _2490;
    }
    float _2604 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2605 = _2604 == 3.0;
    float _2606 = log2(_2592);
    float _2613 = exp2(_2606 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2454 : (isnan(_2454) ? 0.0 : max(_2454, 0.0)));
    float _2614 = exp2(_2606 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2456 : (isnan(_2456) ? 0.0 : max(_2456, 0.0)));
    float _2615 = exp2(_2606 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0)));
    float _2624 = (_2604 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2624 * (_2605 ? _2613 : (_2613 + (cbSceneParam._m0[72u].w * _2586)));
    SV_Target.y = _2624 * (_2605 ? _2614 : (_2614 + (cbSceneParam._m0[72u].w * _2588)));
    SV_Target.z = _2624 * (_2605 ? _2615 : (_2615 + (cbSceneParam._m0[72u].w * _2590)));
    SV_Target.w = cbInstanceData._m0[_2462].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2462].w;
}


