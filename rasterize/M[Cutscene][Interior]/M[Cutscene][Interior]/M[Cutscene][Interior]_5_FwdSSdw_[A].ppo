#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1171;
float _3347;
float _3348;
float _3349;
float _3350;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _200 = _199 * _192;
    float _201 = _199 * _193;
    float _202 = _199 * _194;
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = _206 * NORMAL.x;
    float _208 = _206 * NORMAL.y;
    float _209 = _206 * NORMAL.z;
    float _213 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _214 = _213 * TANGENT.x;
    float _215 = _213 * TANGENT.y;
    float _216 = _213 * TANGENT.z;
    float _261 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _271 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _261);
    float _272 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _261);
    float _273 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _261);
    vec4 _286 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _289 = _286.x;
    vec4 _307 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _324 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _289) + cbMtdParam._m0[12u].x) * _307.x;
    float _326 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _289) + cbMtdParam._m0[12u].y) * _307.y;
    float _328 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _289) + cbMtdParam._m0[12u].z) * _307.z;
    vec4 _346 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _382 = cbMtdParam._m0[24u].x + _271;
    float _383 = cbMtdParam._m0[24u].y + _272;
    float _384 = cbMtdParam._m0[24u].z + _273;
    float _398 = (-0.0) - dot(vec3(_382, _383, _384), vec3(_200, _201, _202));
    float _399 = (-0.0) - dot(vec3(_382, _383, _384), vec3(_214, _215, _216));
    float _400 = (-0.0) - dot(vec3(_382, _383, _384), vec3((-0.0) - _207, (-0.0) - _208, (-0.0) - _209));
    float _404 = inversesqrt(dot(vec3(_398, _399, _400), vec3(_398, _399, _400)));
    float _407 = _404 * _400;
    float _408 = (_404 * _398) + ((cbMtdParam._m0[22u].x * _289) * ((_346.x * 2.0) + (-1.0)));
    float _409 = (_404 * _399) + ((cbMtdParam._m0[22u].y * _289) * ((_346.y * 2.0) + (-1.0)));
    float _410 = _408 * cbMtdParam._m0[20u].w;
    float _411 = _409 * cbMtdParam._m0[20u].z;
    float _412 = fract(TEXCOORD.x);
    float _413 = fract(TEXCOORD.y);
    float _419;
    if (_410 > 0.0)
    {
        _419 = (1.0 - _412) / _410;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_410 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _412) / _410;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _419 = frontier_phi_3_2_ladder;
    }
    float _427;
    if (_411 > 0.0)
    {
        _427 = (1.0 - _413) / _411;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_411 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _413) / _411;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _427 = frontier_phi_7_6_ladder;
    }
    bool _429 = _407 > 0.0;
    float _431 = _429 ? (cbMtdParam._m0[16u].x / _407) : 5000.0;
    float _432 = isnan(_427) ? _419 : (isnan(_419) ? _427 : min(_419, _427));
    float _433 = isnan(_431) ? _432 : (isnan(_432) ? _431 : min(_432, _431));
    float _437 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _438 = _412 + (-0.5);
    float _441 = _413 + (-0.5);
    float _444 = ((_433 * _407) + _437) / _437;
    vec4 _469 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (((((_438 + (_433 * _410)) / _444) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (((((_441 + (_433 * _411)) / _444) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    float _482 = (_469.x * _289) * cbMtdParam._m0[9u].x;
    float _483 = (_469.y * _289) * cbMtdParam._m0[9u].y;
    float _484 = (_469.z * _289) * cbMtdParam._m0[9u].z;
    float _503 = _408 * cbMtdParam._m0[22u].w;
    float _504 = _409 * cbMtdParam._m0[22u].z;
    bool _505 = _503 > 0.0;
    float _510;
    if (_505)
    {
        _510 = (1.0 - _412) / _503;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_503 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _412) / _503;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _510 = frontier_phi_11_10_ladder;
    }
    bool _512 = _504 > 0.0;
    float _517;
    if (_512)
    {
        _517 = (1.0 - _413) / _504;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_504 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _413) / _504;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _517 = frontier_phi_15_14_ladder;
    }
    float _520 = _429 ? (cbMtdParam._m0[18u].x / _407) : 5000.0;
    float _521 = isnan(_517) ? _510 : (isnan(_510) ? _517 : min(_510, _517));
    float _522 = isnan(_520) ? _521 : (isnan(_521) ? _520 : min(_521, _520));
    float _526 = cbMtdParam._m0[19u].y * cbMtdParam._m0[18u].x;
    float _530 = ((_522 * _407) + _526) / _526;
    float _535 = cbMtdParam._m0[19u].x - cbMtdParam._m0[20u].x * trunc(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    float _537 = floor(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    vec4 _553 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_438 + (_522 * _503)) / _530) + 0.5) + _535) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_441 + (_522 * _504)) / _530) + 0.5) + _537) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[0u].w));
    float _568;
    if (_505)
    {
        _568 = (1.0 - _412) / _503;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_503 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _412) / _503;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _568 = frontier_phi_19_18_ladder;
    }
    float _574;
    if (_512)
    {
        _574 = (1.0 - _413) / _504;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_504 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _413) / _504;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _574 = frontier_phi_23_22_ladder;
    }
    float _576 = isnan(_574) ? _568 : (isnan(_568) ? _574 : min(_568, _574));
    float _577 = isnan(_520) ? _576 : (isnan(_576) ? _520 : min(_576, _520));
    float _584 = ((_577 * _407) + _526) / _526;
    vec4 _604 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_438 + (_577 * _503)) / _584) + 0.5) + _535) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_441 + (_577 * _504)) / _584) + 0.5) + _537) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[8u].w));
    float _606 = _604.x;
    vec4 _631 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _635 = _631.z;
    float _638 = (_631.x * 2.0) + (-1.0);
    float _639 = (_631.y * 2.0) + (-1.0);
    float _640 = dot(vec2(_638, _639), vec2(_638, _639));
    float _3389 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _645 = sqrt(1.0 - (isnan(1.0) ? _3389 : (isnan(_3389) ? 1.0 : min(_3389, 1.0))));
    float _648 = fma(_645, _207, fma(_639, _214, _638 * _200));
    float _651 = fma(_645, _208, fma(_639, _215, _638 * _201));
    float _654 = fma(_645, _209, fma(_639, _216, _638 * _202));
    float _658 = inversesqrt(dot(vec3(_648, _651, _654), vec3(_648, _651, _654)));
    float _659 = _658 * _648;
    float _660 = _658 * _651;
    float _661 = _658 * _654;
    float _3400 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _662 = isnan(1.0) ? _3400 : (isnan(_3400) ? 1.0 : min(_3400, 1.0));
    float _3411 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _3422 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _3433 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _681 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _685 = inversesqrt(dot(vec3(_271, _272, _273), vec3(_271, _272, _273)));
    float _686 = _271 * _685;
    float _687 = _272 * _685;
    float _688 = _273 * _685;
    vec4 _693 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _695 = _693.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _852 = sqrt(((_271 * _271) + (_272 * _272)) + (_273 * _273));
        float _858 = (cbMatDynParam._m0[5u].x * _852) + cbMatDynParam._m0[5u].y;
        float _3444 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _859 = isnan(1.0) ? _3444 : (isnan(_3444) ? 1.0 : min(_3444, 1.0));
        float _863 = (cbMatDynParam._m0[5u].z * _852) + cbMatDynParam._m0[5u].w;
        float _3455 = isnan(0.0) ? _863 : (isnan(_863) ? 0.0 : max(_863, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0))) - _859)) + _859) < ((_695 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _707 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _708 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _727 = fma(_661, cbSceneParam._m0[5u].z, fma(_660, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _659));
    float _730 = fma(_661, cbSceneParam._m0[6u].z, fma(_660, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _659));
    float _733 = fma(_661, cbSceneParam._m0[7u].z, fma(_660, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _659));
    uint _746 = uint(roundEven(NORMAL.w)) * 13u;
    uint _748 = _746 + 9u;
    uint _749 = _748 + uint(cbMatDynParam._m0[0u].w);
    float _755 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3411 : (isnan(_3411) ? 1.0 : min(_3411, 1.0)))) * cbInstanceData._m0[_749].x;
    float _756 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3422 : (isnan(_3422) ? 1.0 : min(_3422, 1.0)))) * cbInstanceData._m0[_749].y;
    float _757 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3433 : (isnan(_3433) ? 1.0 : min(_3433, 1.0)))) * cbInstanceData._m0[_749].z;
    float _3466 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _758 = isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0));
    float _3477 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _759 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
    float _3488 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
    float _760 = isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0));
    vec4 _769 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _707, cbSceneParam._m0[86u].y * _708));
    float _772 = _769.x * TEXCOORD_4.z;
    float _773 = dot(vec3(_659, _660, _661), vec3(_686, _687, _688));
    float _776 = _773 * 2.0;
    float _780 = (_776 * _659) - _686;
    float _781 = (_776 * _660) - _687;
    float _782 = (_776 * _661) - _688;
    float _786 = abs(dot(vec3(_686, _687, _688), vec3(_659, _660, _661)));
    float _3499 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
    float _788 = sqrt(_662);
    float _801 = exp2((_788 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3499 : (isnan(_3499) ? 1.0 : min(_3499, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_788 * 3.0));
    float _833 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _837 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _841 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1170;
    float _1172;
    float _1173;
    float _1174;
    float _1175;
    float _1176;
    float _1177;
    float _1178;
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _897 = fma(_841, cbModelParam._m0[26u].z, fma(_837, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _833));
        float _901 = fma(_841, cbModelParam._m0[27u].z, fma(_837, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _833));
        float _905 = fma(_841, cbModelParam._m0[28u].z, fma(_837, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _833));
        float _928 = _833 + _659;
        float _929 = _837 + _660;
        float _930 = _841 + _661;
        float _940 = fma(_930, cbModelParam._m0[26u].z, fma(_929, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _928)) - _897;
        float _941 = fma(_930, cbModelParam._m0[27u].z, fma(_929, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _928)) - _901;
        float _942 = fma(_930, cbModelParam._m0[28u].z, fma(_929, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _928)) - _905;
        float _946 = inversesqrt(dot(vec3(_940, _941, _942), vec3(_940, _941, _942)));
        float _959 = ((_946 * _940) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_897 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _960 = ((_946 * _941) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_901 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _961 = ((_946 * _942) / cbModelParam._m0[34u].z) + ((((((_905 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _964 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _978 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        vec4 _985 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_959, _960, _961), 0.0);
        float _998 = exp2((_964.w + (-0.5)) * 20.0) * 2.0;
        float _999 = _998 * (_964.x + (-0.5));
        float _1000 = _998 * (_964.y + (-0.5));
        float _1001 = _998 * (_964.z + (-0.5));
        float _1008 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1009 = _1008 * (_971.x + (-0.5));
        float _1010 = _1008 * (_971.y + (-0.5));
        float _1011 = _1008 * (_971.z + (-0.5));
        float _1018 = exp2((_978.w + (-0.5)) * 20.0) * 2.0;
        float _1019 = _1018 * (_978.x + (-0.5));
        float _1020 = _1018 * (_978.y + (-0.5));
        float _1021 = _1018 * (_978.z + (-0.5));
        float _1028 = exp2((_985.w + (-0.5)) * 20.0) * 2.0;
        float _1029 = _1028 * (_985.x + (-0.5));
        float _1030 = _1028 * (_985.y + (-0.5));
        float _1031 = _1028 * (_985.z + (-0.5));
        float _1032 = isnan(0.0) ? _1029 : (isnan(_1029) ? 0.0 : max(_1029, 0.0));
        float _1033 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1034 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1035 = _999 * 0.5;
        float _1036 = _1009 * 0.5;
        float _1037 = _1019 * 0.5;
        float _1038 = dot(vec3(_1035, _1036, _1037), vec3(_1035, _1036, _1037));
        float _1043 = (_1038 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1038);
        float _1052 = (dot(vec3(_659, _660, _661), vec3(_1043 * _1035, _1043 * _1036, _1043 * _1037)) + 1.0) * 0.5;
        float _3525 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1062 = sqrt(((_1036 * _1036) + (_1035 * _1035)) + (_1037 * _1037)) / (_1032 + 9.9999997473787516355514526367188e-06);
        float _3536 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1063 = isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0));
        float _1064 = _1063 * 2.0;
        float _1068 = (1.0 - _1063) / (_1063 + 1.0);
        float _3547 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
        float _1078 = ((((1.0 - _1069) * (_1064 + 2.0)) * exp2(log2(isnan(1.0) ? _3525 : (isnan(_3525) ? 1.0 : min(_3525, 1.0))) * (_1064 + 1.0))) + _1069) * _1032;
        float _1079 = _1000 * 0.5;
        float _1080 = _1010 * 0.5;
        float _1081 = _1020 * 0.5;
        float _1082 = dot(vec3(_1079, _1080, _1081), vec3(_1079, _1080, _1081));
        float _1087 = (_1082 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1082);
        float _1095 = (dot(vec3(_659, _660, _661), vec3(_1087 * _1079, _1087 * _1080, _1087 * _1081)) + 1.0) * 0.5;
        float _3558 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1104 = sqrt(((_1080 * _1080) + (_1079 * _1079)) + (_1081 * _1081)) / (_1033 + 9.9999997473787516355514526367188e-06);
        float _3569 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1105 = isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0));
        float _1106 = _1105 * 2.0;
        float _1110 = (1.0 - _1105) / (_1105 + 1.0);
        float _3580 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0));
        float _1120 = ((((1.0 - _1111) * (_1106 + 2.0)) * exp2(log2(isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0))) * (_1106 + 1.0))) + _1111) * _1033;
        float _1121 = _1001 * 0.5;
        float _1122 = _1011 * 0.5;
        float _1123 = _1021 * 0.5;
        float _1124 = dot(vec3(_1121, _1122, _1123), vec3(_1121, _1122, _1123));
        float _1129 = (_1124 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1124);
        float _1137 = (dot(vec3(_659, _660, _661), vec3(_1129 * _1121, _1129 * _1122, _1129 * _1123)) + 1.0) * 0.5;
        float _3591 = isnan(0.0) ? _1137 : (isnan(_1137) ? 0.0 : max(_1137, 0.0));
        float _1146 = sqrt(((_1122 * _1122) + (_1121 * _1121)) + (_1123 * _1123)) / (_1034 + 9.9999997473787516355514526367188e-06);
        float _3602 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1147 = isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0));
        float _1148 = _1147 * 2.0;
        float _1152 = (1.0 - _1147) / (_1147 + 1.0);
        float _3613 = isnan(0.0) ? _1152 : (isnan(_1152) ? 0.0 : max(_1152, 0.0));
        float _1153 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
        float _1162 = ((((1.0 - _1153) * (_1148 + 2.0)) * exp2(log2(isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0))) * (_1148 + 1.0))) + _1153) * _1034;
        _1170 = _1001;
        _1172 = _1000;
        _1173 = _999;
        _1174 = _1011;
        _1175 = _1010;
        _1176 = _1009;
        _1177 = _1021;
        _1178 = _1020;
        _1179 = _1019;
        _1180 = _1034;
        _1181 = _1033;
        _1182 = _1032;
        _1183 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0)));
        _1184 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0)));
        _1185 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0)));
    }
    else
    {
        _1170 = _1171;
        _1172 = _1171;
        _1173 = _1171;
        _1174 = _1171;
        _1175 = _1171;
        _1176 = _1171;
        _1177 = _1171;
        _1178 = _1171;
        _1179 = _1171;
        _1180 = _1171;
        _1181 = _1171;
        _1182 = _1171;
        _1183 = 0.0;
        _1184 = 0.0;
        _1185 = 0.0;
    }
    float _1483;
    float _1484;
    float _1485;
    float _1486;
    float _1487;
    float _1488;
    float _1489;
    float _1490;
    float _1491;
    float _1492;
    float _1493;
    float _1494;
    float _1495;
    float _1496;
    float _1497;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1214 = fma(_841, cbModelParam._m0[30u].z, fma(_837, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _833));
        float _1218 = fma(_841, cbModelParam._m0[31u].z, fma(_837, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _833));
        float _1222 = fma(_841, cbModelParam._m0[32u].z, fma(_837, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _833));
        float _1245 = _833 + _659;
        float _1246 = _837 + _660;
        float _1247 = _841 + _661;
        float _1257 = fma(_1247, cbModelParam._m0[30u].z, fma(_1246, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1245)) - _1214;
        float _1258 = fma(_1247, cbModelParam._m0[31u].z, fma(_1246, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1245)) - _1218;
        float _1259 = fma(_1247, cbModelParam._m0[32u].z, fma(_1246, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1245)) - _1222;
        float _1263 = inversesqrt(dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259)));
        float _1276 = ((_1263 * _1257) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1214 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1277 = ((_1263 * _1258) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1218 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1278 = ((_1263 * _1259) / cbModelParam._m0[35u].z) + ((((((_1222 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1280 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        vec4 _1287 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        vec4 _1294 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        vec4 _1301 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1276, _1277, _1278), 0.0);
        float _1313 = exp2((_1280.w + (-0.5)) * 20.0) * 2.0;
        float _1314 = _1313 * (_1280.x + (-0.5));
        float _1315 = _1313 * (_1280.y + (-0.5));
        float _1316 = _1313 * (_1280.z + (-0.5));
        float _1323 = exp2((_1287.w + (-0.5)) * 20.0) * 2.0;
        float _1324 = _1323 * (_1287.x + (-0.5));
        float _1325 = _1323 * (_1287.y + (-0.5));
        float _1326 = _1323 * (_1287.z + (-0.5));
        float _1333 = exp2((_1294.w + (-0.5)) * 20.0) * 2.0;
        float _1334 = _1333 * (_1294.x + (-0.5));
        float _1335 = _1333 * (_1294.y + (-0.5));
        float _1336 = _1333 * (_1294.z + (-0.5));
        float _1343 = exp2((_1301.w + (-0.5)) * 20.0) * 2.0;
        float _1344 = _1343 * (_1301.x + (-0.5));
        float _1345 = _1343 * (_1301.y + (-0.5));
        float _1346 = _1343 * (_1301.z + (-0.5));
        float _1347 = isnan(0.0) ? _1344 : (isnan(_1344) ? 0.0 : max(_1344, 0.0));
        float _1348 = isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0));
        float _1349 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1350 = _1314 * 0.5;
        float _1351 = _1324 * 0.5;
        float _1352 = _1334 * 0.5;
        float _1353 = dot(vec3(_1350, _1351, _1352), vec3(_1350, _1351, _1352));
        float _1358 = (_1353 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1353);
        float _1366 = (dot(vec3(_659, _660, _661), vec3(_1358 * _1350, _1358 * _1351, _1358 * _1352)) + 1.0) * 0.5;
        float _3654 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1375 = sqrt(((_1351 * _1351) + (_1350 * _1350)) + (_1352 * _1352)) / (_1347 + 9.9999997473787516355514526367188e-06);
        float _3665 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
        float _1377 = _1376 * 2.0;
        float _1381 = (1.0 - _1376) / (_1376 + 1.0);
        float _3676 = isnan(0.0) ? _1381 : (isnan(_1381) ? 0.0 : max(_1381, 0.0));
        float _1382 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _1391 = ((((1.0 - _1382) * (_1377 + 2.0)) * exp2(log2(isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))) * (_1377 + 1.0))) + _1382) * _1347;
        float _1392 = _1315 * 0.5;
        float _1393 = _1325 * 0.5;
        float _1394 = _1335 * 0.5;
        float _1395 = dot(vec3(_1392, _1393, _1394), vec3(_1392, _1393, _1394));
        float _1400 = (_1395 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1395);
        float _1408 = (dot(vec3(_659, _660, _661), vec3(_1400 * _1392, _1400 * _1393, _1400 * _1394)) + 1.0) * 0.5;
        float _3687 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1417 = sqrt(((_1393 * _1393) + (_1392 * _1392)) + (_1394 * _1394)) / (_1348 + 9.9999997473787516355514526367188e-06);
        float _3698 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _1419 = _1418 * 2.0;
        float _1423 = (1.0 - _1418) / (_1418 + 1.0);
        float _3709 = isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0));
        float _1424 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1433 = ((((1.0 - _1424) * (_1419 + 2.0)) * exp2(log2(isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * (_1419 + 1.0))) + _1424) * _1348;
        float _1434 = _1316 * 0.5;
        float _1435 = _1326 * 0.5;
        float _1436 = _1336 * 0.5;
        float _1437 = dot(vec3(_1434, _1435, _1436), vec3(_1434, _1435, _1436));
        float _1442 = (_1437 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1437);
        float _1450 = (dot(vec3(_659, _660, _661), vec3(_1442 * _1434, _1442 * _1435, _1442 * _1436)) + 1.0) * 0.5;
        float _3720 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1459 = sqrt(((_1435 * _1435) + (_1434 * _1434)) + (_1436 * _1436)) / (_1349 + 9.9999997473787516355514526367188e-06);
        float _3731 = isnan(0.0) ? _1459 : (isnan(_1459) ? 0.0 : max(_1459, 0.0));
        float _1460 = isnan(1.0) ? _3731 : (isnan(_3731) ? 1.0 : min(_3731, 1.0));
        float _1461 = _1460 * 2.0;
        float _1465 = (1.0 - _1460) / (_1460 + 1.0);
        float _3742 = isnan(0.0) ? _1465 : (isnan(_1465) ? 0.0 : max(_1465, 0.0));
        float _1466 = isnan(1.0) ? _3742 : (isnan(_3742) ? 1.0 : min(_3742, 1.0));
        float _1475 = ((((1.0 - _1466) * (_1461 + 2.0)) * exp2(log2(isnan(1.0) ? _3720 : (isnan(_3720) ? 1.0 : min(_3720, 1.0))) * (_1461 + 1.0))) + _1466) * _1349;
        _1483 = _1316;
        _1484 = _1315;
        _1485 = _1314;
        _1486 = _1326;
        _1487 = _1325;
        _1488 = _1324;
        _1489 = _1336;
        _1490 = _1335;
        _1491 = _1334;
        _1492 = _1349;
        _1493 = _1348;
        _1494 = _1347;
        _1495 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)));
        _1496 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0)));
        _1497 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0)));
    }
    else
    {
        _1483 = _1171;
        _1484 = _1171;
        _1485 = _1171;
        _1486 = _1171;
        _1487 = _1171;
        _1488 = _1171;
        _1489 = _1171;
        _1490 = _1171;
        _1491 = _1171;
        _1492 = _1171;
        _1493 = _1171;
        _1494 = _1171;
        _1495 = 0.0;
        _1496 = 0.0;
        _1497 = 0.0;
    }
    float _1507 = (cbModelParam._m0[1u].x * (_1495 - _1183)) + _1183;
    float _1508 = (cbModelParam._m0[1u].x * (_1496 - _1184)) + _1184;
    float _1509 = (cbModelParam._m0[1u].x * (_1497 - _1185)) + _1185;
    float _1530 = fma(_1509, cbSceneParam._m0[89u].z, fma(_1508, cbSceneParam._m0[89u].y, _1507 * cbSceneParam._m0[89u].x));
    float _1533 = fma(_1509, cbSceneParam._m0[90u].z, fma(_1508, cbSceneParam._m0[90u].y, _1507 * cbSceneParam._m0[90u].x));
    float _1536 = fma(_1509, cbSceneParam._m0[91u].z, fma(_1508, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1507));
    float _1551 = _780 * 0.5;
    float _1552 = _781 * 0.5;
    float _1553 = _782 * 0.5;
    float _1554 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1485, _1488, _1491, _1494));
    float _1557 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1484, _1487, _1490, _1493));
    float _1560 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1483, _1486, _1489, _1492));
    float _1594;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1567 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1170, _1174, _1177, _1180));
        float _1571 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1172, _1175, _1178, _1181));
        float _1575 = dot(vec4(_1551, _1552, _1553, 1.0), vec4(_1173, _1176, _1179, _1182));
        float _1582 = dot(vec4(cbModelParam._m0[39u]), vec4(_1551, _1552, _1553, 1.0));
        _1594 = dot(vec3(isnan(0.0) ? _1575 : (isnan(_1575) ? 0.0 : max(_1575, 0.0)), isnan(0.0) ? _1571 : (isnan(_1571) ? 0.0 : max(_1571, 0.0)), isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1582) ? 0.0 : (isnan(0.0) ? _1582 : max(0.0, _1582))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1594 = 1.0;
    }
    float _1605;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1596 = dot(vec4(cbModelParam._m0[40u]), vec4(_1551, _1552, _1553, 1.0));
        _1605 = dot(vec3(isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0)), isnan(0.0) ? _1557 : (isnan(_1557) ? 0.0 : max(_1557, 0.0)), isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1596) ? 0.0 : (isnan(0.0) ? _1596 : max(0.0, _1596))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1605 = 1.0;
    }
    float _1609 = (_1605 * cbModelParam._m0[1u].x) + (_1594 * (1.0 - cbModelParam._m0[1u].x));
    float _1619 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _662);
    float _1620 = isnan(_1619) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1619 : min(cbModelParam._m0[25u].z, _1619));
    float _1702;
    float _1704;
    float _1706;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1669 = fma(_841, cbModelParam._m0[13u].z, fma(_837, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _833)) + cbModelParam._m0[13u].w;
        float _1673 = fma(_841, cbModelParam._m0[14u].z, fma(_837, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _833)) + cbModelParam._m0[14u].w;
        float _1677 = fma(_841, cbModelParam._m0[15u].z, fma(_837, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _833)) + cbModelParam._m0[15u].w;
        float _1680 = fma(_782, cbModelParam._m0[13u].z, fma(_781, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _780));
        float _1683 = fma(_782, cbModelParam._m0[14u].z, fma(_781, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _780));
        float _1686 = fma(_782, cbModelParam._m0[15u].z, fma(_781, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _780));
        float _1714;
        if (_1680 > 0.0)
        {
            _1714 = abs((1.0 - _1669) / _1680);
        }
        else
        {
            float frontier_phi_41_39_ladder;
            if (_1680 < 0.0)
            {
                frontier_phi_41_39_ladder = abs((_1669 + 1.0) / _1680);
            }
            else
            {
                frontier_phi_41_39_ladder = 5000.0;
            }
            _1714 = frontier_phi_41_39_ladder;
        }
        float _2083;
        if (_1683 > 0.0)
        {
            _2083 = abs((1.0 - _1673) / _1683);
        }
        else
        {
            float frontier_phi_50_46_ladder;
            if (_1683 < 0.0)
            {
                frontier_phi_50_46_ladder = abs((_1673 + 1.0) / _1683);
            }
            else
            {
                frontier_phi_50_46_ladder = 5000.0;
            }
            _2083 = frontier_phi_50_46_ladder;
        }
        float _2407;
        if (_1686 > 0.0)
        {
            _2407 = abs((1.0 - _1677) / _1686);
        }
        else
        {
            float frontier_phi_64_57_ladder;
            if (_1686 < 0.0)
            {
                frontier_phi_64_57_ladder = abs((_1677 + 1.0) / _1686);
            }
            else
            {
                frontier_phi_64_57_ladder = 5000.0;
            }
            _2407 = frontier_phi_64_57_ladder;
        }
        float _2409 = isnan(_2083) ? _1714 : (isnan(_1714) ? _2083 : min(_1714, _2083));
        float _2410 = isnan(_2407) ? _2409 : (isnan(_2409) ? _2407 : min(_2409, _2407));
        float _2414 = (_2410 * _1680) + _1669;
        float _2415 = (_2410 * _1683) + _1673;
        float _2416 = (_2410 * _1686) + _1677;
        float _2417 = _2410 * 9.9999997473787516355514526367188e-05;
        float _2418 = (-1.0) - _2417;
        float _2420 = _2417 + 1.0;
        float frontier_phi_40_64_ladder;
        float frontier_phi_40_64_ladder_1;
        float frontier_phi_40_64_ladder_2;
        if ((_2416 > _2420) || ((_2416 < _2418) || ((_2415 > _2420) || ((_2415 < _2418) || ((_2414 < _2418) || (_2414 > _2420))))))
        {
            frontier_phi_40_64_ladder = 0.0;
            frontier_phi_40_64_ladder_1 = 0.0;
            frontier_phi_40_64_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2558 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2416, cbModelParam._m0[9u].z, fma(_2415, cbModelParam._m0[9u].y, _2414 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2416, cbModelParam._m0[10u].z, fma(_2415, cbModelParam._m0[10u].y, _2414 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2416, cbModelParam._m0[11u].z, fma(_2415, cbModelParam._m0[11u].y, _2414 * cbModelParam._m0[11u].x))), _1620);
            frontier_phi_40_64_ladder = _2558.z * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_1 = _2558.y * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_2 = _2558.x * cbModelParam._m0[1u].y;
        }
        _1702 = frontier_phi_40_64_ladder_2;
        _1704 = frontier_phi_40_64_ladder_1;
        _1706 = frontier_phi_40_64_ladder;
    }
    else
    {
        vec4 _1690 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_780, _781, _782), _1620);
        _1702 = _1690.x * cbModelParam._m0[1u].y;
        _1704 = _1690.y * cbModelParam._m0[1u].y;
        _1706 = _1690.z * cbModelParam._m0[1u].y;
    }
    float _1710 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _662);
    float _1711 = isnan(_1710) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1710 : min(cbModelParam._m0[25u].w, _1710));
    float _1799;
    float _1801;
    float _1803;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1763 = fma(_841, cbModelParam._m0[21u].z, fma(_837, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _833)) + cbModelParam._m0[21u].w;
        float _1767 = fma(_841, cbModelParam._m0[22u].z, fma(_837, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _833)) + cbModelParam._m0[22u].w;
        float _1771 = fma(_841, cbModelParam._m0[23u].z, fma(_837, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _833)) + cbModelParam._m0[23u].w;
        float _1774 = fma(_782, cbModelParam._m0[21u].z, fma(_781, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _780));
        float _1777 = fma(_782, cbModelParam._m0[22u].z, fma(_781, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _780));
        float _1780 = fma(_782, cbModelParam._m0[23u].z, fma(_781, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _780));
        float _2088;
        if (_1774 > 0.0)
        {
            _2088 = abs((1.0 - _1763) / _1774);
        }
        else
        {
            float frontier_phi_52_48_ladder;
            if (_1774 < 0.0)
            {
                frontier_phi_52_48_ladder = abs((_1763 + 1.0) / _1774);
            }
            else
            {
                frontier_phi_52_48_ladder = 5000.0;
            }
            _2088 = frontier_phi_52_48_ladder;
        }
        float _2433;
        if (_1777 > 0.0)
        {
            _2433 = abs((1.0 - _1767) / _1777);
        }
        else
        {
            float frontier_phi_66_59_ladder;
            if (_1777 < 0.0)
            {
                frontier_phi_66_59_ladder = abs((_1767 + 1.0) / _1777);
            }
            else
            {
                frontier_phi_66_59_ladder = 5000.0;
            }
            _2433 = frontier_phi_66_59_ladder;
        }
        float _2623;
        if (_1780 > 0.0)
        {
            _2623 = abs((1.0 - _1771) / _1780);
        }
        else
        {
            float frontier_phi_84_77_ladder;
            if (_1780 < 0.0)
            {
                frontier_phi_84_77_ladder = abs((_1771 + 1.0) / _1780);
            }
            else
            {
                frontier_phi_84_77_ladder = 5000.0;
            }
            _2623 = frontier_phi_84_77_ladder;
        }
        float _2625 = isnan(_2433) ? _2088 : (isnan(_2088) ? _2433 : min(_2088, _2433));
        float _2626 = isnan(_2623) ? _2625 : (isnan(_2625) ? _2623 : min(_2625, _2623));
        float _2630 = (_2626 * _1774) + _1763;
        float _2631 = (_2626 * _1777) + _1767;
        float _2632 = (_2626 * _1780) + _1771;
        float _2633 = _2626 * 9.9999997473787516355514526367188e-05;
        float _2634 = (-1.0) - _2633;
        float _2636 = _2633 + 1.0;
        float frontier_phi_49_84_ladder;
        float frontier_phi_49_84_ladder_1;
        float frontier_phi_49_84_ladder_2;
        if ((_2632 > _2636) || ((_2632 < _2634) || ((_2631 > _2636) || ((_2631 < _2634) || ((_2630 < _2634) || (_2630 > _2636))))))
        {
            frontier_phi_49_84_ladder = 0.0;
            frontier_phi_49_84_ladder_1 = 0.0;
            frontier_phi_49_84_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2874 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2632, cbModelParam._m0[17u].z, fma(_2631, cbModelParam._m0[17u].y, _2630 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2632, cbModelParam._m0[18u].z, fma(_2631, cbModelParam._m0[18u].y, _2630 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2632, cbModelParam._m0[19u].z, fma(_2631, cbModelParam._m0[19u].y, _2630 * cbModelParam._m0[19u].x))), _1711);
            frontier_phi_49_84_ladder = _2874.z * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_1 = _2874.y * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_2 = _2874.x * cbModelParam._m0[1u].z;
        }
        _1799 = frontier_phi_49_84_ladder_2;
        _1801 = frontier_phi_49_84_ladder_1;
        _1803 = frontier_phi_49_84_ladder;
    }
    else
    {
        vec4 _1783 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_780, _781, _782), _1711);
        _1799 = _1783.x * cbModelParam._m0[1u].z;
        _1801 = _1783.y * cbModelParam._m0[1u].z;
        _1803 = _1783.z * cbModelParam._m0[1u].z;
    }
    float _1815 = ((((1.0 - _801) * ((_788 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_801 * _788)) * _772;
    float _1816 = _1815 * ((cbModelParam._m0[1u].w * (_1799 - _1702)) + _1702);
    float _1817 = _1815 * ((cbModelParam._m0[1u].w * (_1801 - _1704)) + _1704);
    float _1818 = _1815 * ((cbModelParam._m0[1u].w * (_1803 - _1706)) + _1706);
    float _1821 = fma(_1818, cbSceneParam._m0[89u].z, fma(_1817, cbSceneParam._m0[89u].y, _1816 * cbSceneParam._m0[89u].x));
    float _1824 = fma(_1818, cbSceneParam._m0[90u].z, fma(_1817, cbSceneParam._m0[90u].y, _1816 * cbSceneParam._m0[90u].x));
    float _1827 = fma(_1818, cbSceneParam._m0[91u].z, fma(_1817, cbSceneParam._m0[91u].y, _1816 * cbSceneParam._m0[91u].x));
    vec4 _1835 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_707, _708));
    float _1837 = _1835.w;
    float _1849 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1837);
    float _1850 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1837);
    float _1851 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1837);
    uvec4 _1855 = floatBitsToUint(cbInstanceData._m0[_746 + 5u]);
    uint _1857 = _1855.x * 14u;
    uint _1858 = _1857 + 13u;
    float _1863 = _772 + (-1.0);
    float _1866 = (cbLight._m0[_1858].x * _1863) + 1.0;
    float _1867 = (cbLight._m0[_1858].y * _1863) + 1.0;
    uint _1868 = _1857 + 5u;
    float _1874 = isnan(1.0) ? _1867 : (isnan(_1867) ? 1.0 : min(_1867, 1.0));
    uint _1878 = _1857 + 4u;
    float _1887 = isnan(1.0) ? _1866 : (isnan(_1866) ? 1.0 : min(_1866, 1.0));
    uint _1891 = _1857 | 1u;
    float _1902 = dot(vec3(cbLight._m0[_1857].xyz), vec3(_659, _660, _661));
    float _1905 = dot(vec3(cbLight._m0[_1891].xyz), vec3(_659, _660, _661));
    float _3878 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
    float _3889 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
    float _1910 = (isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0))) * 0.3183098733425140380859375;
    float _1912 = (isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0))) * 0.3183098733425140380859375;
    float _1919 = ((cbLight._m0[_1868].x * _1874) * _1912) + (((cbLight._m0[_1878].x * _1849) * _1887) * _1910);
    float _1920 = ((_1874 * cbLight._m0[_1868].y) * _1912) + (((cbLight._m0[_1878].y * _1850) * _1887) * _1910);
    float _1921 = ((_1874 * cbLight._m0[_1868].z) * _1912) + (((cbLight._m0[_1878].z * _1851) * _1887) * _1910);
    uint _1923 = _1857 + 8u;
    float _1936 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1857].w)) * _662) * 0.949999988079071044921875);
    float _1937 = _1936 * _1936;
    float _1938 = cbLight._m0[_1857].x + _686;
    float _1939 = cbLight._m0[_1857].y + _687;
    float _1940 = cbLight._m0[_1857].z + _688;
    float _1944 = inversesqrt(dot(vec3(_1938, _1939, _1940), vec3(_1938, _1939, _1940)));
    float _1945 = _1944 * _1938;
    float _1946 = _1944 * _1939;
    float _1947 = _1944 * _1940;
    float _1948 = dot(vec3(_659, _660, _661), vec3(cbLight._m0[_1857].xyz));
    float _3900 = isnan(0.0) ? _1948 : (isnan(_1948) ? 0.0 : max(_1948, 0.0));
    float _1951 = isnan(1.0) ? _3900 : (isnan(_3900) ? 1.0 : min(_3900, 1.0));
    float _3911 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _1952 = isnan(1.0) ? _3911 : (isnan(_3911) ? 1.0 : min(_3911, 1.0));
    float _1953 = dot(vec3(_659, _660, _661), vec3(_1945, _1946, _1947));
    float _3922 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
    float _1956 = isnan(1.0) ? _3922 : (isnan(_3922) ? 1.0 : min(_3922, 1.0));
    float _1957 = dot(vec3(cbLight._m0[_1857].xyz), vec3(_1945, _1946, _1947));
    float _3933 = isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0));
    float _1961 = _1937 * _1937;
    float _1965 = ((_1956 * _1956) * (_1961 + (-1.0))) + 1.0;
    float _1976 = (exp2(log2(1.0 - (isnan(1.0) ? _3933 : (isnan(_3933) ? 1.0 : min(_3933, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1977 = 1.0 - _1937;
    float _1988 = (0.5 / (((_1952 * ((_1951 * _1977) + _1937)) + 9.9999999392252902907785028219223e-09) + (((_1952 * _1977) + _1937) * _1951))) * _1951;
    float _3944 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
    float _1990 = (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0))) * (_1961 / ((_1965 * _1965) * 3.141590118408203125));
    uint _2004 = _1857 + 9u;
    float _2015 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1891].w)) * _662) * 0.949999988079071044921875);
    float _2016 = _2015 * _2015;
    float _2017 = cbLight._m0[_1891].x + _686;
    float _2018 = cbLight._m0[_1891].y + _687;
    float _2019 = cbLight._m0[_1891].z + _688;
    float _2023 = inversesqrt(dot(vec3(_2017, _2018, _2019), vec3(_2017, _2018, _2019)));
    float _2024 = _2023 * _2017;
    float _2025 = _2023 * _2018;
    float _2026 = _2023 * _2019;
    float _2027 = dot(vec3(_659, _660, _661), vec3(cbLight._m0[_1891].xyz));
    float _3955 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _2030 = isnan(1.0) ? _3955 : (isnan(_3955) ? 1.0 : min(_3955, 1.0));
    float _2031 = dot(vec3(_659, _660, _661), vec3(_2024, _2025, _2026));
    float _3966 = isnan(0.0) ? _2031 : (isnan(_2031) ? 0.0 : max(_2031, 0.0));
    float _2034 = isnan(1.0) ? _3966 : (isnan(_3966) ? 1.0 : min(_3966, 1.0));
    float _2035 = dot(vec3(cbLight._m0[_1891].xyz), vec3(_2024, _2025, _2026));
    float _3977 = isnan(0.0) ? _2035 : (isnan(_2035) ? 0.0 : max(_2035, 0.0));
    float _2039 = _2016 * _2016;
    float _2043 = ((_2034 * _2034) * (_2039 + (-1.0))) + 1.0;
    float _2052 = (exp2(log2(1.0 - (isnan(1.0) ? _3977 : (isnan(_3977) ? 1.0 : min(_3977, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2053 = 1.0 - _2016;
    float _2063 = (0.5 / (((_1952 * ((_2030 * _2053) + _2016)) + 9.9999999392252902907785028219223e-09) + (((_1952 * _2053) + _2016) * _2030))) * _2030;
    float _3988 = isnan(0.0) ? _2063 : (isnan(_2063) ? 0.0 : max(_2063, 0.0));
    float _2065 = (isnan(1.0) ? _3988 : (isnan(_3988) ? 1.0 : min(_3988, 1.0))) * (_2039 / ((_2043 * _2043) * 3.141590118408203125));
    float _2075 = (((_2052 * cbLight._m0[_2004].x) * _2065) * _1874) + ((((cbLight._m0[_1923].x * _1849) * _1976) * _1990) * _1887);
    float _2076 = (((_2052 * cbLight._m0[_2004].y) * _2065) * _1874) + ((((cbLight._m0[_1923].y * _1850) * _1976) * _1990) * _1887);
    float _2077 = (((_2052 * cbLight._m0[_2004].z) * _2065) * _1874) + ((((cbLight._m0[_1923].z * _1851) * _1976) * _1990) * _1887);
    float _2192;
    float _2194;
    float _2196;
    float _2198;
    float _2200;
    float _2202;
    if (_1855.y == 0u)
    {
        float _2132 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2133 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2132;
        float _2134 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2132;
        float _2135 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2132;
        uvec4 _2147 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2148 = _2147.x;
        uint _2159 = uint((float(_2147.y) * floor(float(uint(cbSceneParam._m0[85u].y * _708) / _2148))) + floor(float(uint(cbSceneParam._m0[85u].x * _707) / _2148)));
        float _2169 = (log2(_2135 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2170 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
        uint _2173 = uint(isnan(14.0) ? _2170 : (isnan(_2170) ? 14.0 : min(_2170, 14.0)));
        uvec4 _2178 = texelFetch(g_lightClusterGridBuffer, int(((_2173 << 2u) + (_2159 << 6u)) >> 2u));
        uint _2179 = _2178.x;
        uint _2180 = _2147.z;
        float _2286;
        float _2288;
        float _2290;
        float _2292;
        float _2294;
        float _2296;
        if (((((1u << ((_2180 >> 4u) & 15u)) + 4294967295u) & _2179) == 0u) || ((_2180 & 240u) == 0u))
        {
            _2286 = 0.0;
            _2288 = 0.0;
            _2290 = 0.0;
            _2292 = 0.0;
            _2294 = 0.0;
            _2296 = 0.0;
        }
        else
        {
            float _2287;
            float _2289;
            float _2291;
            float _2293;
            float _2295;
            float _2297;
            float _2470 = 0.0;
            float _2471 = 0.0;
            float _2472 = 0.0;
            float _2473 = 0.0;
            float _2474 = 0.0;
            float _2475 = 0.0;
            uint _2476 = 0u;
            uint _2485;
            bool _2486;
            for (;;)
            {
                _2485 = texelFetch(g_lightClassification, int((((_2173 << 5u) + (_2159 << 9u)) + (_2476 << 2u)) >> 2u)).x;
                _2486 = _2485 == 0u;
                float frontier_phi_79_pred;
                float frontier_phi_79_pred_1;
                float frontier_phi_79_pred_2;
                float frontier_phi_79_pred_3;
                float frontier_phi_79_pred_4;
                float frontier_phi_79_pred_5;
                if (_2486)
                {
                    frontier_phi_79_pred = _2475;
                    frontier_phi_79_pred_1 = _2474;
                    frontier_phi_79_pred_2 = _2473;
                    frontier_phi_79_pred_3 = _2472;
                    frontier_phi_79_pred_4 = _2471;
                    frontier_phi_79_pred_5 = _2470;
                }
                else
                {
                    float _2666;
                    float _2667;
                    float _2668;
                    float _2669;
                    float _2670;
                    float _2671;
                    uint _2672;
                    _2666 = _2470;
                    _2667 = _2471;
                    _2668 = _2472;
                    _2669 = _2473;
                    _2670 = _2474;
                    _2671 = _2475;
                    _2672 = _2485;
                    float _2567;
                    float _2568;
                    float _2569;
                    float _2570;
                    float _2571;
                    float _2572;
                    for (;;)
                    {
                        uint _2676 = uint(findLSB(_2672)) + (_2476 << 5u);
                        uint _2673 = (_2672 + 4294967295u) & _2672;
                        uint _2678 = _2676 * 48u;
                        vec4 _2692 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2678)).x, texelFetch(g_PointLightRenderingBuffer, int(_2678 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2678 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2678 + 3u)).x));
                        uint _2698 = (_2676 * 48u) + 4u;
                        vec4 _2711 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2698)).x, texelFetch(g_PointLightRenderingBuffer, int(_2698 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2698 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2698 + 3u)).x));
                        uint _2717 = (_2676 * 48u) + 8u;
                        vec3 _2728 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2717)).x, texelFetch(g_PointLightRenderingBuffer, int(_2717 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2717 + 2u)).x));
                        float _2732 = _2692.x - _2133;
                        float _2733 = _2692.y - _2134;
                        float _2734 = _2692.z - _2135;
                        float _2735 = dot(vec3(_2732, _2733, _2734), vec3(_2732, _2733, _2734));
                        float _2738 = inversesqrt(_2735);
                        float _2739 = _2738 * _2732;
                        float _2740 = _2738 * _2733;
                        float _2741 = _2738 * _2734;
                        float _2742 = dot(vec3(_727, _730, _733), vec3(_2739, _2740, _2741));
                        float _2747 = 1.0 - (_2735 * _2692.w);
                        float _4009 = isnan(0.0) ? _2747 : (isnan(_2747) ? 0.0 : max(_2747, 0.0));
                        float _2748 = isnan(1.0) ? _4009 : (isnan(_4009) ? 1.0 : min(_4009, 1.0));
                        float _2749 = sqrt(_2735) * _2711.w;
                        float _2752 = 1.39999997615814208984375 / (_2749 + 1.39999997615814208984375);
                        float _2753 = _2752 * _2752;
                        float _2756 = ((1.0 - _2753) * _2742) + _2753;
                        float _2759 = _2749 * _2749;
                        float _2763 = ((isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0))) * _2748) / ((_2759 * 0.699999988079071044921875) + 1.0);
                        float _2767 = (-0.0) - _2133;
                        float _2768 = (-0.0) - _2134;
                        float _2769 = (-0.0) - _2135;
                        float _2773 = inversesqrt(dot(vec3(_2767, _2768, _2769), vec3(_2767, _2768, _2769)));
                        float _2774 = _2773 * _2767;
                        float _2775 = _2773 * _2768;
                        float _2776 = _2773 * _2769;
                        float _2784 = exp2(log2(1.0 / ((_2759 * 3.5) + 5.0)) * 0.25);
                        float _2785 = 1.0 - _788;
                        float _2792 = sqrt(1.0 - ((1.0 - (_2785 * _2785)) * (1.0 - (_2784 * _2784))));
                        float _2793 = _2792 * _2792;
                        float _2794 = _2793 * _2793;
                        float _2795 = _2774 + _2739;
                        float _2796 = _2775 + _2740;
                        float _2797 = _2776 + _2741;
                        float _2801 = inversesqrt(dot(vec3(_2795, _2796, _2797), vec3(_2795, _2796, _2797)));
                        float _2805 = dot(vec3(_727, _730, _733), vec3(_2774, _2775, _2776));
                        float _4025 = isnan(0.0) ? _2805 : (isnan(_2805) ? 0.0 : max(_2805, 0.0));
                        float _2808 = isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0));
                        float _2809 = dot(vec3(_727, _730, _733), vec3(_2801 * _2795, _2801 * _2796, _2801 * _2797));
                        float _4036 = isnan(0.0) ? _2809 : (isnan(_2809) ? 0.0 : max(_2809, 0.0));
                        float _2812 = isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0));
                        float _2816 = ((_2812 * _2812) * (_2794 + (-1.0))) + 1.0;
                        float _2817 = _2752 * _2793;
                        float _2818 = _2817 * _2817;
                        float _2821 = ((1.0 - _2818) * _2742) + _2818;
                        float _4047 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
                        float _2822 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
                        float _2823 = 1.0 - _2793;
                        float _2833 = (0.5 / (((_2822 * ((_2808 * _2823) + _2793)) + 9.9999999392252902907785028219223e-09) + (((_2822 * _2823) + _2793) * _2808))) * _2822;
                        float _4058 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
                        float _2844 = (((_2794 * 3.1415927410125732421875) * (isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0)))) / ((_2816 * _2816) * ((_2759 * 2.1991131305694580078125) + 3.141590118408203125))) * _2748;
                        _2570 = (_2763 * _2711.x) + _2669;
                        _2571 = (_2763 * _2711.y) + _2670;
                        _2572 = (_2763 * _2711.z) + _2671;
                        _2567 = (_2844 * _2728.x) + _2666;
                        _2568 = (_2844 * _2728.y) + _2667;
                        _2569 = (_2844 * _2728.z) + _2668;
                        if (_2673 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2666 = _2567;
                            _2667 = _2568;
                            _2668 = _2569;
                            _2669 = _2570;
                            _2670 = _2571;
                            _2671 = _2572;
                            _2672 = _2673;
                        }
                    }
                    frontier_phi_79_pred = _2572;
                    frontier_phi_79_pred_1 = _2571;
                    frontier_phi_79_pred_2 = _2570;
                    frontier_phi_79_pred_3 = _2569;
                    frontier_phi_79_pred_4 = _2568;
                    frontier_phi_79_pred_5 = _2567;
                }
                _2297 = frontier_phi_79_pred;
                _2295 = frontier_phi_79_pred_1;
                _2293 = frontier_phi_79_pred_2;
                _2291 = frontier_phi_79_pred_3;
                _2289 = frontier_phi_79_pred_4;
                _2287 = frontier_phi_79_pred_5;
                uint _2477 = _2476 + 1u;
                if (_2477 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2470 = _2287;
                    _2471 = _2289;
                    _2472 = _2291;
                    _2473 = _2293;
                    _2474 = _2295;
                    _2475 = _2297;
                    _2476 = _2477;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2286 = _2287;
            _2288 = _2289;
            _2290 = _2291;
            _2292 = _2293;
            _2294 = _2295;
            _2296 = _2297;
        }
        uvec4 _2300 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2301 = _2300.z;
        uint _2303 = (_2301 >> 8u) & 15u;
        float _2438;
        float _2440;
        float _2442;
        float _2444;
        float _2446;
        float _2448;
        if (((4294967295u << _2303) & _2179) == 0u)
        {
            _2438 = _2286;
            _2440 = _2288;
            _2442 = _2290;
            _2444 = _2292;
            _2446 = _2294;
            _2448 = _2296;
        }
        else
        {
            float _2463 = inversesqrt(dot(vec3(_2133, _2134, _2135), vec3(_2133, _2134, _2135)));
            float _2464 = _2463 * _2133;
            float _2465 = _2463 * _2134;
            float _2466 = _2463 * _2135;
            float frontier_phi_68_69_ladder;
            float frontier_phi_68_69_ladder_1;
            float frontier_phi_68_69_ladder_2;
            float frontier_phi_68_69_ladder_3;
            float frontier_phi_68_69_ladder_4;
            float frontier_phi_68_69_ladder_5;
            if (_2303 < ((_2301 >> 12u) & 15u))
            {
                float _2439;
                float _2441;
                float _2443;
                float _2445;
                float _2447;
                float _2449;
                float _2649 = _2286;
                float _2650 = _2288;
                float _2651 = _2290;
                float _2652 = _2292;
                float _2653 = _2294;
                float _2654 = _2296;
                uint _2655 = _2303;
                uint _2664;
                bool _2665;
                for (;;)
                {
                    _2664 = texelFetch(g_lightClassification, int((((_2173 << 5u) + (_2159 << 9u)) + (_2655 << 2u)) >> 2u)).x;
                    _2665 = _2664 == 0u;
                    float frontier_phi_93_pred;
                    float frontier_phi_93_pred_1;
                    float frontier_phi_93_pred_2;
                    float frontier_phi_93_pred_3;
                    float frontier_phi_93_pred_4;
                    float frontier_phi_93_pred_5;
                    if (_2665)
                    {
                        frontier_phi_93_pred = _2653;
                        frontier_phi_93_pred_1 = _2652;
                        frontier_phi_93_pred_2 = _2651;
                        frontier_phi_93_pred_3 = _2650;
                        frontier_phi_93_pred_4 = _2649;
                        frontier_phi_93_pred_5 = _2654;
                    }
                    else
                    {
                        float _2879;
                        float _2880;
                        float _2881;
                        float _2882;
                        float _2883;
                        float _2884;
                        float _3172;
                        float _3173;
                        float _3174;
                        float _3175;
                        float _3176;
                        float _3177;
                        float _2892 = _2649;
                        float _2893 = _2650;
                        float _2894 = _2651;
                        float _2895 = _2652;
                        float _2896 = _2653;
                        float _2897 = _2654;
                        uint _2898 = _2664;
                        uint _2899;
                        vec4 _2924;
                        float _2925;
                        vec4 _2940;
                        vec3 _2952;
                        vec4 _2967;
                        vec4 _2982;
                        float _3028;
                        bool _3029;
                        for (;;)
                        {
                            uint _2909 = ((_2655 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2898));
                            _2899 = (_2898 + 4294967295u) & _2898;
                            uint _2911 = _2909 * 40u;
                            _2924 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2911)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2911 + 3u)).x));
                            _2925 = _2924.w;
                            uint _2927 = (_2909 * 40u) + 4u;
                            _2940 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2927)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2927 + 3u)).x));
                            uint _2942 = (_2909 * 40u) + 8u;
                            _2952 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2942)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2942 + 2u)).x));
                            uint _2954 = (_2909 * 40u) + 16u;
                            _2967 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2954)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2954 + 3u)).x));
                            uint _2969 = (_2909 * 40u) + 20u;
                            _2982 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2969)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2969 + 3u)).x));
                            uint _2984 = (_2909 * 40u) + 24u;
                            vec4 _2997 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2984)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 3u)).x));
                            uint _3003 = (_2909 * 40u) + 28u;
                            vec4 _3016 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3003)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3003 + 3u)).x));
                            _3028 = fma(_2135, _3016.z, fma(_2134, _3016.y, _3016.x * _2133)) + _3016.w;
                            _3029 = !((fma(_2135, _2997.z, fma(_2134, _2997.y, _2997.x * _2133)) + _2997.w) <= 0.0);
                            float frontier_phi_99_pred;
                            float frontier_phi_99_pred_1;
                            float frontier_phi_99_pred_2;
                            float frontier_phi_99_pred_3;
                            float frontier_phi_99_pred_4;
                            float frontier_phi_99_pred_5;
                            if (_3029)
                            {
                                float _3056 = _2924.x - _2133;
                                float _3057 = _2924.y - _2134;
                                float _3058 = _2924.z - _2135;
                                float _3059 = dot(vec3(_3056, _3057, _3058), vec3(_3056, _3057, _3058));
                                float _3062 = inversesqrt(_3059);
                                float _3063 = _3062 * _3056;
                                float _3064 = _3062 * _3057;
                                float _3065 = _3062 * _3058;
                                float _3069 = 1.0 - (_3059 / (_2925 * _2925));
                                float _4069 = isnan(0.0) ? _3069 : (isnan(_3069) ? 0.0 : max(_3069, 0.0));
                                float _3070 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
                                float _3074 = sqrt(_3059) * _2940.w;
                                float _3076 = 1.39999997615814208984375 / (_3074 + 1.39999997615814208984375);
                                float _3077 = _3076 * _3076;
                                float _3080 = ((1.0 - _3077) * dot(vec3(_3063, _3064, _3065), vec3(_727, _730, _733))) + _3077;
                                float _3083 = _3074 * _3074;
                                float _3087 = (fma(_2135, _2967.z, fma(_2134, _2967.y, _2967.x * _2133)) + _2967.w) / _3028;
                                float _3088 = (fma(_2135, _2982.z, fma(_2134, _2982.y, _2982.x * _2133)) + _2982.w) / _3028;
                                float _3092 = 1.0 - dot(vec2(_3087, _3088), vec2(_3087, _3088));
                                float _4085 = isnan(0.0) ? _3092 : (isnan(_3092) ? 0.0 : max(_3092, 0.0));
                                float _3093 = isnan(1.0) ? _4085 : (isnan(_4085) ? 1.0 : min(_4085, 1.0));
                                float _3094 = _3093 * (((isnan(0.0) ? _3080 : (isnan(_3080) ? 0.0 : max(_3080, 0.0))) * _3070) / ((_3083 * 0.699999988079071044921875) + 1.0));
                                float _3106 = exp2(log2(1.0 / ((_3083 * 3.5) + 5.0)) * 0.25);
                                float _3107 = 1.0 - _788;
                                float _3114 = sqrt(1.0 - ((1.0 - (_3107 * _3107)) * (1.0 - (_3106 * _3106))));
                                float _3115 = _3114 * _3114;
                                float _3116 = _3115 * _3115;
                                float _3117 = _3063 - _2464;
                                float _3118 = _3064 - _2465;
                                float _3119 = _3065 - _2466;
                                float _3123 = inversesqrt(dot(vec3(_3117, _3118, _3119), vec3(_3117, _3118, _3119)));
                                float _3127 = dot(vec3(_727, _730, _733), vec3((-0.0) - _2464, (-0.0) - _2465, (-0.0) - _2466));
                                float _4096 = isnan(0.0) ? _3127 : (isnan(_3127) ? 0.0 : max(_3127, 0.0));
                                float _3130 = isnan(1.0) ? _4096 : (isnan(_4096) ? 1.0 : min(_4096, 1.0));
                                float _3131 = dot(vec3(_727, _730, _733), vec3(_3123 * _3117, _3123 * _3118, _3123 * _3119));
                                float _4107 = isnan(0.0) ? _3131 : (isnan(_3131) ? 0.0 : max(_3131, 0.0));
                                float _3134 = isnan(1.0) ? _4107 : (isnan(_4107) ? 1.0 : min(_4107, 1.0));
                                float _3138 = ((_3134 * _3134) * (_3116 + (-1.0))) + 1.0;
                                float _3139 = _3076 * _3115;
                                float _3140 = _3139 * _3139;
                                float _3146 = ((1.0 - _3140) * dot(vec3(_727, _730, _733), vec3(_3063, _3064, _3065))) + _3140;
                                float _4118 = isnan(0.0) ? _3146 : (isnan(_3146) ? 0.0 : max(_3146, 0.0));
                                float _3147 = isnan(1.0) ? _4118 : (isnan(_4118) ? 1.0 : min(_4118, 1.0));
                                float _3148 = 1.0 - _3115;
                                float _3158 = (0.5 / (((_3147 * ((_3130 * _3148) + _3115)) + 9.9999999392252902907785028219223e-09) + (((_3147 * _3148) + _3115) * _3130))) * _3147;
                                float _4129 = isnan(0.0) ? _3158 : (isnan(_3158) ? 0.0 : max(_3158, 0.0));
                                float _3168 = (_3093 * _3070) * (((_3116 * 3.1415927410125732421875) * (isnan(1.0) ? _4129 : (isnan(_4129) ? 1.0 : min(_4129, 1.0)))) / ((_3138 * _3138) * ((_3083 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_99_pred = _3094 * _2940.z;
                                frontier_phi_99_pred_1 = _3094 * _2940.y;
                                frontier_phi_99_pred_2 = _3094 * _2940.x;
                                frontier_phi_99_pred_3 = _3168 * _2952.z;
                                frontier_phi_99_pred_4 = _3168 * _2952.y;
                                frontier_phi_99_pred_5 = _3168 * _2952.x;
                            }
                            else
                            {
                                frontier_phi_99_pred = 0.0;
                                frontier_phi_99_pred_1 = 0.0;
                                frontier_phi_99_pred_2 = 0.0;
                                frontier_phi_99_pred_3 = 0.0;
                                frontier_phi_99_pred_4 = 0.0;
                                frontier_phi_99_pred_5 = 0.0;
                            }
                            _3177 = frontier_phi_99_pred;
                            _3176 = frontier_phi_99_pred_1;
                            _3175 = frontier_phi_99_pred_2;
                            _3174 = frontier_phi_99_pred_3;
                            _3173 = frontier_phi_99_pred_4;
                            _3172 = frontier_phi_99_pred_5;
                            _2882 = _3175 + _2895;
                            _2883 = _3176 + _2896;
                            _2884 = _3177 + _2897;
                            _2879 = _3172 + _2892;
                            _2880 = _3173 + _2893;
                            _2881 = _3174 + _2894;
                            if (_2899 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2892 = _2879;
                                _2893 = _2880;
                                _2894 = _2881;
                                _2895 = _2882;
                                _2896 = _2883;
                                _2897 = _2884;
                                _2898 = _2899;
                                continue;
                            }
                        }
                        frontier_phi_93_pred = _2883;
                        frontier_phi_93_pred_1 = _2882;
                        frontier_phi_93_pred_2 = _2881;
                        frontier_phi_93_pred_3 = _2880;
                        frontier_phi_93_pred_4 = _2879;
                        frontier_phi_93_pred_5 = _2884;
                    }
                    _2447 = frontier_phi_93_pred;
                    _2445 = frontier_phi_93_pred_1;
                    _2443 = frontier_phi_93_pred_2;
                    _2441 = frontier_phi_93_pred_3;
                    _2439 = frontier_phi_93_pred_4;
                    _2449 = frontier_phi_93_pred_5;
                    uint _2656 = _2655 + 1u;
                    if (_2656 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2649 = _2439;
                        _2650 = _2441;
                        _2651 = _2443;
                        _2652 = _2445;
                        _2653 = _2447;
                        _2654 = _2449;
                        _2655 = _2656;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_68_69_ladder = _2449;
                frontier_phi_68_69_ladder_1 = _2447;
                frontier_phi_68_69_ladder_2 = _2445;
                frontier_phi_68_69_ladder_3 = _2443;
                frontier_phi_68_69_ladder_4 = _2439;
                frontier_phi_68_69_ladder_5 = _2441;
            }
            else
            {
                frontier_phi_68_69_ladder = _2296;
                frontier_phi_68_69_ladder_1 = _2294;
                frontier_phi_68_69_ladder_2 = _2292;
                frontier_phi_68_69_ladder_3 = _2290;
                frontier_phi_68_69_ladder_4 = _2286;
                frontier_phi_68_69_ladder_5 = _2288;
            }
            _2438 = frontier_phi_68_69_ladder_4;
            _2440 = frontier_phi_68_69_ladder_5;
            _2442 = frontier_phi_68_69_ladder_3;
            _2444 = frontier_phi_68_69_ladder_2;
            _2446 = frontier_phi_68_69_ladder_1;
            _2448 = frontier_phi_68_69_ladder;
        }
        float _2453 = isnan(1.0) ? _772 : (isnan(_772) ? 1.0 : min(_772, 1.0));
        _2192 = (_2453 * _2444) + _1919;
        _2194 = (_2453 * _2446) + _1920;
        _2196 = (_2453 * _2448) + _1921;
        _2198 = ((_2438 * 0.039999999105930328369140625) * _2453) + _2075;
        _2200 = ((_2440 * 0.039999999105930328369140625) * _2453) + _2076;
        _2202 = ((_2442 * 0.039999999105930328369140625) * _2453) + _2077;
    }
    else
    {
        _2192 = _1919;
        _2194 = _1920;
        _2196 = _1921;
        _2198 = _2075;
        _2200 = _2076;
        _2202 = _2077;
    }
    uint _2208 = _748 + uint(cbMatDynParam._m0[0u].w);
    float _4145 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
    float _4156 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _4167 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _2233 = (((isnan(1.0) ? _4145 : (isnan(_4145) ? 1.0 : min(_4145, 1.0))) * (_2192 + ((isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0))) * _772))) + ((_2198 + ((isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0))) * _1609)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2208].x * ((((((cbMtdParam._m0[10u].x * _289) * _553.x) - _482) * _289) * _606) + _482));
    float _2235 = ((cbInstanceData._m0[_2208].y * ((((((cbMtdParam._m0[10u].y * _289) * _553.y) - _483) * _289) * _606) + _483)) + ((_2200 + ((isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0))) * _1609)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0))) * (_2194 + ((isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0))) * _772)));
    float _2237 = ((cbInstanceData._m0[_2208].z * ((((((cbMtdParam._m0[10u].z * _289) * _553.z) - _484) * _289) * _606) + _484)) + ((_2202 + ((isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0))) * _1609)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4167 : (isnan(_4167) ? 1.0 : min(_4167, 1.0))) * (_2196 + ((isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0))) * _772)));
    float _2238 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
    float _2239 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
    float _2240 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
    uint _2241 = _746 + 6u;
    float _2249 = _707 / cbSceneParam._m0[86u].x;
    float _2250 = _708 / cbSceneParam._m0[86u].y;
    vec4 _2264 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2249, _2250, (log2((isnan(cbSceneParam._m0[77u].w) ? _681 : (isnan(_681) ? cbSceneParam._m0[77u].w : min(_681, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2266 = _2264.x;
    float _2267 = _2264.y;
    float _2268 = _2264.z;
    float _2269 = _2264.w;
    float _2349;
    float _2351;
    float _2353;
    float _2355;
    if (_681 > cbSceneParam._m0[78u].w)
    {
        float _2311 = isnan(_681) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _681 : min(cbSceneParam._m0[80u].w, _681));
        float _2312 = _2311 / _681;
        float _2323 = _2312 * _271;
        float _2324 = _272 * _2312;
        float _2325 = (-0.0) - _2324;
        float _2326 = _2312 * _273;
        float _2328 = (cbSceneParam._m0[77u].w * _2325) / _2311;
        float _2329 = _2328 + cbSceneParam._m0[79u].w;
        float _2330 = cbSceneParam._m0[79u].w - _2324;
        float _2336 = sqrt(((_2323 * _2323) + (_2324 * _2324)) + (_2326 * _2326));
        float _2339 = (1.0 - (cbSceneParam._m0[77u].w / _2311)) * _2336;
        float _2345 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2347 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2580;
        if (abs((_2325 - _2328) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2580 = ((((_2329 > 0.0) ? exp2(_2345 * _2329) : (2.0 - exp2(_2347 * _2329))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2339;
        }
        else
        {
            float _2499 = 1.0 / cbSceneParam._m0[80u].x;
            float _2500 = isnan(_2330) ? _2329 : (isnan(_2329) ? _2330 : max(_2329, _2330));
            float _2501 = isnan(_2330) ? _2329 : (isnan(_2329) ? _2330 : min(_2329, _2330));
            float _2510 = isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : min(_2500, 0.0));
            float _2511 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : min(_2501, 0.0));
            _2580 = ((abs(_2336 / _2325) * cbSceneParam._m0[80u].y) * ((((_2510 - _2511) * 2.0) - ((exp2(_2345 * (isnan(0.0) ? _2500 : (isnan(_2500) ? 0.0 : max(_2500, 0.0)))) - exp2(_2345 * (isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0))))) * _2499)) - ((exp2(_2347 * _2510) - exp2(_2347 * _2511)) * _2499))) + (_2339 * cbSceneParam._m0[80u].z);
        }
        vec4 _2582 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2249, _2250, 1.0), 0.0);
        float _2591 = exp2((_2580 * (-1.44269502162933349609375)) * (1.0 - _2582.w));
        float _2592 = log2(_2591);
        float _2608 = log2(_2269);
        _2349 = (exp2(_2608 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2592 * cbSceneParam._m0[78u].x)) * _2582.x) / cbSceneParam._m0[78u].x)) + _2266;
        _2351 = (exp2(_2608 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2592 * cbSceneParam._m0[78u].y)) * _2582.y) / cbSceneParam._m0[78u].y)) + _2267;
        _2353 = (exp2(_2608 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2592 * cbSceneParam._m0[78u].z)) * _2582.z) / cbSceneParam._m0[78u].z)) + _2268;
        _2355 = _2591 * _2269;
    }
    else
    {
        _2349 = _2266;
        _2351 = _2267;
        _2353 = _2268;
        _2355 = _2269;
    }
    bool _2618;
    vec4 _2365;
    vec4 _2387;
    float _2389;
    float _2393;
    float _2394;
    float _2395;
    float _2396;
    bool _2406;
    for (;;)
    {
        _2365 = cbMatDynParam._m0[0u];
        float _2367 = roundEven(_2365.y);
        bool _2368 = _2367 == 3.0;
        float _2369 = log2(_2355);
        float _2376 = exp2(_2369 * cbSceneParam._m0[78u].x) * _2238;
        float _2377 = exp2(_2369 * cbSceneParam._m0[78u].y) * _2239;
        float _2378 = exp2(_2369 * cbSceneParam._m0[78u].z) * _2240;
        float _2385 = _695 + (-0.5);
        _2387 = cbMtdParam._m0[1u];
        _2389 = _2387.y * _2385;
        float _2392 = (_2367 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2393 = _2392 * (_2368 ? _2376 : (_2376 + (cbSceneParam._m0[72u].w * _2349)));
        _2394 = _2392 * (_2368 ? _2377 : (_2377 + (cbSceneParam._m0[72u].w * _2351)));
        _2395 = _2392 * (_2368 ? _2378 : (_2378 + (cbSceneParam._m0[72u].w * _2353)));
        _2396 = _2385 * 0.999000012874603271484375;
        _2406 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2406)
        {
            if ((cbInstanceData._m0[_746 + 7u].x + _2396) < 0.5)
            {
                _2618 = true;
                break;
            }
        }
        uint _2534 = _748 + uint(_2365.w);
        if ((cbInstanceData._m0[_2534].w < 1.0) && ((cbInstanceData._m0[_2534].w + _2396) < 0.5))
        {
            _2618 = true;
            break;
        }
        if ((_2389 + 1.0) < _2387.x)
        {
            _2618 = true;
            break;
        }
        _2618 = false;
        break;
    }
    float _2849;
    if (_2618)
    {
        discard_state = true;
        _2849 = 0.0;
    }
    else
    {
        _2849 = cbInstanceData._m0[_2241].w;
    }
    SV_Target.x = _2393;
    SV_Target.y = _2394;
    SV_Target.z = _2395;
    SV_Target.w = _2849;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2241].w;
    discard_exit();
}


