#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_12;
layout(set = 0, binding = 3) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _453;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _203 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _204 = _203 * _196;
    float _205 = _203 * _197;
    float _206 = _203 * _198;
    float _210 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _211 = _210 * NORMAL.x;
    float _212 = _210 * NORMAL.y;
    float _213 = _210 * NORMAL.z;
    float _217 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _218 = _217 * TANGENT.x;
    float _219 = _217 * TANGENT.y;
    float _220 = _217 * TANGENT.z;
    float _265 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _275 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _265);
    float _276 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _265);
    float _277 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _265);
    vec4 _290 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _293 = _290.x;
    vec4 _311 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _328 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _293) + cbMtdParam._m0[12u].x) * _311.x;
    float _330 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _293) + cbMtdParam._m0[12u].y) * _311.y;
    float _332 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _293) + cbMtdParam._m0[12u].z) * _311.z;
    vec4 _366 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _381 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _388 = inversesqrt(dot(vec3(_218, _219, _220), vec3(_218, _219, _220)));
    float _400 = cbMtdParam._m0[24u].w + _275;
    float _401 = cbMtdParam._m0[25u].x + _276;
    float _402 = cbMtdParam._m0[25u].y + _277;
    float _416 = (-0.0) - dot(vec3(_400, _401, _402), vec3(_381 * _204, _381 * _205, _381 * _206));
    float _417 = (-0.0) - dot(vec3(_400, _401, _402), vec3(_388 * _218, _388 * _219, _388 * _220));
    float _418 = (-0.0) - dot(vec3(_400, _401, _402), vec3((-0.0) - _211, (-0.0) - _212, (-0.0) - _213));
    float _422 = inversesqrt(dot(vec3(_416, _417, _418), vec3(_416, _417, _418)));
    float _423 = _422 * _418;
    float _428 = ((cbMtdParam._m0[21u].z * _416) * _422) + (((_366.x * 2.0) + (-1.0)) * cbMtdParam._m0[22u].x);
    float _429 = ((cbMtdParam._m0[21u].w * _417) * _422) + (((_366.y * 2.0) + (-1.0)) * cbMtdParam._m0[22u].y);
    float _432 = fract(cbMtdParam._m0[21u].z * TEXCOORD.x);
    float _433 = fract(cbMtdParam._m0[21u].w * TEXCOORD.y);
    float _451;
    float _454;
    float _456;
    if (_428 > 0.0)
    {
        float _437 = (1.0 - _432) / _428;
        _451 = _437;
        _454 = ((cbMtdParam._m0[18u].w + 1.0) - fract(_437 * _423)) * 0.16666667163372039794921875;
        _456 = (fract((_437 * _429) + _433) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_428 < 0.0)
        {
            float _452 = ((-0.0) - _432) / _428;
            frontier_phi_3_2_ladder = (fract((_452 * _429) + _433) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_1 = _452;
            frontier_phi_3_2_ladder_2 = (fract(_452 * _423) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _453;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _451 = frontier_phi_3_2_ladder_1;
        _454 = frontier_phi_3_2_ladder_2;
        _456 = frontier_phi_3_2_ladder;
    }
    float _482;
    float _484;
    float _486;
    if (_429 > 0.0)
    {
        float _469 = (1.0 - _433) / _429;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_469 < _451)
        {
            frontier_phi_8_5_ladder = (fract((_469 * _428) + _432) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_1 = _469;
            frontier_phi_8_5_ladder_2 = (fract(_469 * _423) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
        }
        else
        {
            frontier_phi_8_5_ladder = _454;
            frontier_phi_8_5_ladder_1 = _451;
            frontier_phi_8_5_ladder_2 = _456;
        }
        _482 = frontier_phi_8_5_ladder_1;
        _484 = frontier_phi_8_5_ladder;
        _486 = frontier_phi_8_5_ladder_2;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_429 < 0.0)
        {
            float _483 = ((-0.0) - _433) / _429;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_483 < _451)
            {
                frontier_phi_8_6_ladder_9_ladder = (fract((_483 * _428) + _432) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = _483;
                frontier_phi_8_6_ladder_9_ladder_2 = fract(_483 * _423) * 0.16666667163372039794921875;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _454;
                frontier_phi_8_6_ladder_9_ladder_1 = _451;
                frontier_phi_8_6_ladder_9_ladder_2 = _456;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _454;
            frontier_phi_8_6_ladder_1 = _451;
            frontier_phi_8_6_ladder_2 = _456;
        }
        _482 = frontier_phi_8_6_ladder_1;
        _484 = frontier_phi_8_6_ladder;
        _486 = frontier_phi_8_6_ladder_2;
    }
    float _490 = (_423 > 0.0) ? (cbMtdParam._m0[18u].z / _423) : 5000.0;
    float _503;
    float _504;
    if (_490 < _482)
    {
        _503 = ((_432 + cbMtdParam._m0[18u].w) + (_490 * _428)) * 0.16666667163372039794921875;
        _504 = (((_490 * _429) + _433) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _503 = _484;
        _504 = _486;
    }
    vec4 _506 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_503, _504));
    float _3213 = isnan(0.0) ? cbMtdParam._m0[17u].z : (isnan(cbMtdParam._m0[17u].z) ? 0.0 : max(cbMtdParam._m0[17u].z, 0.0));
    float _520 = isnan(1.0) ? _3213 : (isnan(_3213) ? 1.0 : min(_3213, 1.0));
    float _3224 = isnan(0.0) ? cbMtdParam._m0[17u].y : (isnan(cbMtdParam._m0[17u].y) ? 0.0 : max(cbMtdParam._m0[17u].y, 0.0));
    float _563 = ((_520 - ((1.0 - (isnan(1.0) ? _3224 : (isnan(_3224) ? 1.0 : min(_3224, 1.0)))) * (_520 + 1.0))) + (((cbMtdParam._m0[18u].y * texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[3u].w)).x) + (cbMtdParam._m0[17u].x * texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w)).x)) / cbMtdParam._m0[17u].w)) / _520;
    float _3235 = isnan(0.0) ? _563 : (isnan(_563) ? 0.0 : max(_563, 0.0));
    float _564 = isnan(1.0) ? _3235 : (isnan(_3235) ? 1.0 : min(_3235, 1.0));
    float _566 = 3.0 - (_564 * 2.0);
    float _571 = _564 * _564;
    float _587 = _293 * 0.1500000059604644775390625;
    float _595 = (_587 * (((_293 * _506.x) * (((_571 * (cbMtdParam._m0[15u].x - cbMtdParam._m0[13u].x)) * _566) + cbMtdParam._m0[13u].x)) - _328)) + _328;
    float _596 = (_587 * (((_293 * _506.y) * (((_571 * (cbMtdParam._m0[15u].y - cbMtdParam._m0[13u].y)) * _566) + cbMtdParam._m0[13u].y)) - _330)) + _330;
    float _597 = (_587 * (((_293 * _506.z) * (((_571 * (cbMtdParam._m0[15u].z - cbMtdParam._m0[13u].z)) * _566) + cbMtdParam._m0[13u].z)) - _332)) + _332;
    vec4 _610 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _614 = _610.z;
    float _617 = (_610.x * 2.0) + (-1.0);
    float _618 = (_610.y * 2.0) + (-1.0);
    float _619 = dot(vec2(_617, _618), vec2(_617, _618));
    float _3246 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _624 = sqrt(1.0 - (isnan(1.0) ? _3246 : (isnan(_3246) ? 1.0 : min(_3246, 1.0))));
    float _627 = fma(_624, _211, fma(_618, _218, _617 * _204));
    float _630 = fma(_624, _212, fma(_618, _219, _617 * _205));
    float _633 = fma(_624, _213, fma(_618, _220, _617 * _206));
    float _637 = inversesqrt(dot(vec3(_627, _630, _633), vec3(_627, _630, _633)));
    float _638 = _637 * _627;
    float _639 = _637 * _630;
    float _640 = _637 * _633;
    float _3257 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _641 = isnan(1.0) ? _3257 : (isnan(_3257) ? 1.0 : min(_3257, 1.0));
    float _3268 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _3279 = isnan(0.0) ? _596 : (isnan(_596) ? 0.0 : max(_596, 0.0));
    float _3290 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _660 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _664 = inversesqrt(dot(vec3(_275, _276, _277), vec3(_275, _276, _277)));
    float _665 = _275 * _664;
    float _666 = _276 * _664;
    float _667 = _277 * _664;
    float _673 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _674 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _694 = fma(_640, cbSceneParam._m0[5u].z, fma(_639, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _638));
    float _697 = fma(_640, cbSceneParam._m0[6u].z, fma(_639, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _638));
    float _700 = fma(_640, cbSceneParam._m0[7u].z, fma(_639, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _638));
    uint _713 = uint(roundEven(NORMAL.w)) * 13u;
    uint _715 = (_713 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _721 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3268 : (isnan(_3268) ? 1.0 : min(_3268, 1.0)))) * cbInstanceData._m0[_715].x;
    float _722 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3279 : (isnan(_3279) ? 1.0 : min(_3279, 1.0)))) * cbInstanceData._m0[_715].y;
    float _723 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3290 : (isnan(_3290) ? 1.0 : min(_3290, 1.0)))) * cbInstanceData._m0[_715].z;
    float _3301 = isnan(0.0) ? _721 : (isnan(_721) ? 0.0 : max(_721, 0.0));
    float _724 = isnan(1.0) ? _3301 : (isnan(_3301) ? 1.0 : min(_3301, 1.0));
    float _3312 = isnan(0.0) ? _722 : (isnan(_722) ? 0.0 : max(_722, 0.0));
    float _725 = isnan(1.0) ? _3312 : (isnan(_3312) ? 1.0 : min(_3312, 1.0));
    float _3323 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _726 = isnan(1.0) ? _3323 : (isnan(_3323) ? 1.0 : min(_3323, 1.0));
    vec4 _735 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _673, cbSceneParam._m0[86u].y * _674));
    float _738 = _735.x * TEXCOORD_4.z;
    float _739 = dot(vec3(_638, _639, _640), vec3(_665, _666, _667));
    float _742 = _739 * 2.0;
    float _746 = (_742 * _638) - _665;
    float _747 = (_742 * _639) - _666;
    float _748 = (_742 * _640) - _667;
    float _752 = abs(dot(vec3(_665, _666, _667), vec3(_638, _639, _640)));
    float _3334 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _754 = sqrt(_641);
    float _766 = exp2((_754 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3334 : (isnan(_3334) ? 1.0 : min(_3334, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_754 * 3.0));
    float _798 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _802 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _806 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _839 = fma(_806, cbModelParam._m0[26u].z, fma(_802, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _798));
        float _843 = fma(_806, cbModelParam._m0[27u].z, fma(_802, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _798));
        float _847 = fma(_806, cbModelParam._m0[28u].z, fma(_802, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _798));
        float _871 = _798 + _638;
        float _872 = _802 + _639;
        float _873 = _806 + _640;
        float _883 = fma(_873, cbModelParam._m0[26u].z, fma(_872, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _871)) - _839;
        float _884 = fma(_873, cbModelParam._m0[27u].z, fma(_872, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _871)) - _843;
        float _885 = fma(_873, cbModelParam._m0[28u].z, fma(_872, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _871)) - _847;
        float _889 = inversesqrt(dot(vec3(_883, _884, _885), vec3(_883, _884, _885)));
        float _902 = ((_889 * _883) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_839 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _903 = ((_889 * _884) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_843 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _904 = ((_889 * _885) / cbModelParam._m0[34u].z) + ((((((_847 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _907 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_902, _903, _904), 0.0);
        vec4 _914 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_902, _903, _904), 0.0);
        vec4 _921 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_902, _903, _904), 0.0);
        vec4 _928 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_902, _903, _904), 0.0);
        float _941 = exp2((_907.w + (-0.5)) * 20.0) * 2.0;
        float _942 = _941 * (_907.x + (-0.5));
        float _943 = _941 * (_907.y + (-0.5));
        float _944 = _941 * (_907.z + (-0.5));
        float _951 = exp2((_914.w + (-0.5)) * 20.0) * 2.0;
        float _952 = _951 * (_914.x + (-0.5));
        float _953 = _951 * (_914.y + (-0.5));
        float _954 = _951 * (_914.z + (-0.5));
        float _961 = exp2((_921.w + (-0.5)) * 20.0) * 2.0;
        float _962 = _961 * (_921.x + (-0.5));
        float _963 = _961 * (_921.y + (-0.5));
        float _964 = _961 * (_921.z + (-0.5));
        float _971 = exp2((_928.w + (-0.5)) * 20.0) * 2.0;
        float _972 = _971 * (_928.x + (-0.5));
        float _973 = _971 * (_928.y + (-0.5));
        float _974 = _971 * (_928.z + (-0.5));
        float _975 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _976 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _977 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _978 = _942 * 0.5;
        float _979 = _952 * 0.5;
        float _980 = _962 * 0.5;
        float _981 = dot(vec3(_978, _979, _980), vec3(_978, _979, _980));
        float _986 = (_981 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_981);
        float _995 = (dot(vec3(_638, _639, _640), vec3(_986 * _978, _986 * _979, _986 * _980)) + 1.0) * 0.5;
        float _3360 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _1005 = sqrt(((_979 * _979) + (_978 * _978)) + (_980 * _980)) / (_975 + 9.9999997473787516355514526367188e-06);
        float _3371 = isnan(0.0) ? _1005 : (isnan(_1005) ? 0.0 : max(_1005, 0.0));
        float _1006 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
        float _1007 = _1006 * 2.0;
        float _1011 = (1.0 - _1006) / (_1006 + 1.0);
        float _3382 = isnan(0.0) ? _1011 : (isnan(_1011) ? 0.0 : max(_1011, 0.0));
        float _1012 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
        float _1021 = ((((1.0 - _1012) * (_1007 + 2.0)) * exp2(log2(isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0))) * (_1007 + 1.0))) + _1012) * _975;
        float _1022 = _943 * 0.5;
        float _1023 = _953 * 0.5;
        float _1024 = _963 * 0.5;
        float _1025 = dot(vec3(_1022, _1023, _1024), vec3(_1022, _1023, _1024));
        float _1030 = (_1025 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1025);
        float _1038 = (dot(vec3(_638, _639, _640), vec3(_1030 * _1022, _1030 * _1023, _1030 * _1024)) + 1.0) * 0.5;
        float _3393 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1047 = sqrt(((_1023 * _1023) + (_1022 * _1022)) + (_1024 * _1024)) / (_976 + 9.9999997473787516355514526367188e-06);
        float _3404 = isnan(0.0) ? _1047 : (isnan(_1047) ? 0.0 : max(_1047, 0.0));
        float _1048 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
        float _1049 = _1048 * 2.0;
        float _1053 = (1.0 - _1048) / (_1048 + 1.0);
        float _3415 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1054 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
        float _1063 = ((((1.0 - _1054) * (_1049 + 2.0)) * exp2(log2(isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0))) * (_1049 + 1.0))) + _1054) * _976;
        float _1064 = _944 * 0.5;
        float _1065 = _954 * 0.5;
        float _1066 = _964 * 0.5;
        float _1067 = dot(vec3(_1064, _1065, _1066), vec3(_1064, _1065, _1066));
        float _1072 = (_1067 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1067);
        float _1080 = (dot(vec3(_638, _639, _640), vec3(_1072 * _1064, _1072 * _1065, _1072 * _1066)) + 1.0) * 0.5;
        float _3426 = isnan(0.0) ? _1080 : (isnan(_1080) ? 0.0 : max(_1080, 0.0));
        float _1089 = sqrt(((_1065 * _1065) + (_1064 * _1064)) + (_1066 * _1066)) / (_977 + 9.9999997473787516355514526367188e-06);
        float _3437 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3437 : (isnan(_3437) ? 1.0 : min(_3437, 1.0));
        float _1091 = _1090 * 2.0;
        float _1095 = (1.0 - _1090) / (_1090 + 1.0);
        float _3448 = isnan(0.0) ? _1095 : (isnan(_1095) ? 0.0 : max(_1095, 0.0));
        float _1096 = isnan(1.0) ? _3448 : (isnan(_3448) ? 1.0 : min(_3448, 1.0));
        float _1105 = ((((1.0 - _1096) * (_1091 + 2.0)) * exp2(log2(isnan(1.0) ? _3426 : (isnan(_3426) ? 1.0 : min(_3426, 1.0))) * (_1091 + 1.0))) + _1096) * _977;
        _1113 = _944;
        _1114 = _943;
        _1115 = _942;
        _1116 = _954;
        _1117 = _953;
        _1118 = _952;
        _1119 = _964;
        _1120 = _963;
        _1121 = _962;
        _1122 = _977;
        _1123 = _976;
        _1124 = _975;
        _1125 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0)));
        _1126 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0)));
        _1127 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0)));
    }
    else
    {
        _1113 = _453;
        _1114 = _453;
        _1115 = _453;
        _1116 = _453;
        _1117 = _453;
        _1118 = _453;
        _1119 = _453;
        _1120 = _453;
        _1121 = _453;
        _1122 = _453;
        _1123 = _453;
        _1124 = _453;
        _1125 = 0.0;
        _1126 = 0.0;
        _1127 = 0.0;
    }
    float _1422;
    float _1423;
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1153 = fma(_806, cbModelParam._m0[30u].z, fma(_802, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _798));
        float _1157 = fma(_806, cbModelParam._m0[31u].z, fma(_802, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _798));
        float _1161 = fma(_806, cbModelParam._m0[32u].z, fma(_802, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _798));
        float _1184 = _798 + _638;
        float _1185 = _802 + _639;
        float _1186 = _806 + _640;
        float _1196 = fma(_1186, cbModelParam._m0[30u].z, fma(_1185, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1184)) - _1153;
        float _1197 = fma(_1186, cbModelParam._m0[31u].z, fma(_1185, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1184)) - _1157;
        float _1198 = fma(_1186, cbModelParam._m0[32u].z, fma(_1185, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1184)) - _1161;
        float _1202 = inversesqrt(dot(vec3(_1196, _1197, _1198), vec3(_1196, _1197, _1198)));
        float _1215 = ((_1202 * _1196) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1153 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1216 = ((_1202 * _1197) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1157 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1217 = ((_1202 * _1198) / cbModelParam._m0[35u].z) + ((((((_1161 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1219 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        vec4 _1226 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        vec4 _1233 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        vec4 _1240 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1215, _1216, _1217), 0.0);
        float _1252 = exp2((_1219.w + (-0.5)) * 20.0) * 2.0;
        float _1253 = _1252 * (_1219.x + (-0.5));
        float _1254 = _1252 * (_1219.y + (-0.5));
        float _1255 = _1252 * (_1219.z + (-0.5));
        float _1262 = exp2((_1226.w + (-0.5)) * 20.0) * 2.0;
        float _1263 = _1262 * (_1226.x + (-0.5));
        float _1264 = _1262 * (_1226.y + (-0.5));
        float _1265 = _1262 * (_1226.z + (-0.5));
        float _1272 = exp2((_1233.w + (-0.5)) * 20.0) * 2.0;
        float _1273 = _1272 * (_1233.x + (-0.5));
        float _1274 = _1272 * (_1233.y + (-0.5));
        float _1275 = _1272 * (_1233.z + (-0.5));
        float _1282 = exp2((_1240.w + (-0.5)) * 20.0) * 2.0;
        float _1283 = _1282 * (_1240.x + (-0.5));
        float _1284 = _1282 * (_1240.y + (-0.5));
        float _1285 = _1282 * (_1240.z + (-0.5));
        float _1286 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1287 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1288 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1289 = _1253 * 0.5;
        float _1290 = _1263 * 0.5;
        float _1291 = _1273 * 0.5;
        float _1292 = dot(vec3(_1289, _1290, _1291), vec3(_1289, _1290, _1291));
        float _1297 = (_1292 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1292);
        float _1305 = (dot(vec3(_638, _639, _640), vec3(_1297 * _1289, _1297 * _1290, _1297 * _1291)) + 1.0) * 0.5;
        float _3489 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1314 = sqrt(((_1290 * _1290) + (_1289 * _1289)) + (_1291 * _1291)) / (_1286 + 9.9999997473787516355514526367188e-06);
        float _3500 = isnan(0.0) ? _1314 : (isnan(_1314) ? 0.0 : max(_1314, 0.0));
        float _1315 = isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0));
        float _1316 = _1315 * 2.0;
        float _1320 = (1.0 - _1315) / (_1315 + 1.0);
        float _3511 = isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0));
        float _1321 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
        float _1330 = ((((1.0 - _1321) * (_1316 + 2.0)) * exp2(log2(isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0))) * (_1316 + 1.0))) + _1321) * _1286;
        float _1331 = _1254 * 0.5;
        float _1332 = _1264 * 0.5;
        float _1333 = _1274 * 0.5;
        float _1334 = dot(vec3(_1331, _1332, _1333), vec3(_1331, _1332, _1333));
        float _1339 = (_1334 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1334);
        float _1347 = (dot(vec3(_638, _639, _640), vec3(_1339 * _1331, _1339 * _1332, _1339 * _1333)) + 1.0) * 0.5;
        float _3522 = isnan(0.0) ? _1347 : (isnan(_1347) ? 0.0 : max(_1347, 0.0));
        float _1356 = sqrt(((_1332 * _1332) + (_1331 * _1331)) + (_1333 * _1333)) / (_1287 + 9.9999997473787516355514526367188e-06);
        float _3533 = isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0));
        float _1357 = isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0));
        float _1358 = _1357 * 2.0;
        float _1362 = (1.0 - _1357) / (_1357 + 1.0);
        float _3544 = isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0));
        float _1363 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _1372 = ((((1.0 - _1363) * (_1358 + 2.0)) * exp2(log2(isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0))) * (_1358 + 1.0))) + _1363) * _1287;
        float _1373 = _1255 * 0.5;
        float _1374 = _1265 * 0.5;
        float _1375 = _1275 * 0.5;
        float _1376 = dot(vec3(_1373, _1374, _1375), vec3(_1373, _1374, _1375));
        float _1381 = (_1376 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1376);
        float _1389 = (dot(vec3(_638, _639, _640), vec3(_1381 * _1373, _1381 * _1374, _1381 * _1375)) + 1.0) * 0.5;
        float _3555 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
        float _1398 = sqrt(((_1374 * _1374) + (_1373 * _1373)) + (_1375 * _1375)) / (_1288 + 9.9999997473787516355514526367188e-06);
        float _3566 = isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0));
        float _1399 = isnan(1.0) ? _3566 : (isnan(_3566) ? 1.0 : min(_3566, 1.0));
        float _1400 = _1399 * 2.0;
        float _1404 = (1.0 - _1399) / (_1399 + 1.0);
        float _3577 = isnan(0.0) ? _1404 : (isnan(_1404) ? 0.0 : max(_1404, 0.0));
        float _1405 = isnan(1.0) ? _3577 : (isnan(_3577) ? 1.0 : min(_3577, 1.0));
        float _1414 = ((((1.0 - _1405) * (_1400 + 2.0)) * exp2(log2(isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0))) * (_1400 + 1.0))) + _1405) * _1288;
        _1422 = _1255;
        _1423 = _1254;
        _1424 = _1253;
        _1425 = _1265;
        _1426 = _1264;
        _1427 = _1263;
        _1428 = _1275;
        _1429 = _1274;
        _1430 = _1273;
        _1431 = _1288;
        _1432 = _1287;
        _1433 = _1286;
        _1434 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0)));
        _1435 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0)));
        _1436 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0)));
    }
    else
    {
        _1422 = _453;
        _1423 = _453;
        _1424 = _453;
        _1425 = _453;
        _1426 = _453;
        _1427 = _453;
        _1428 = _453;
        _1429 = _453;
        _1430 = _453;
        _1431 = _453;
        _1432 = _453;
        _1433 = _453;
        _1434 = 0.0;
        _1435 = 0.0;
        _1436 = 0.0;
    }
    float _1446 = (cbModelParam._m0[1u].x * (_1434 - _1125)) + _1125;
    float _1447 = (cbModelParam._m0[1u].x * (_1435 - _1126)) + _1126;
    float _1448 = (cbModelParam._m0[1u].x * (_1436 - _1127)) + _1127;
    float _1469 = fma(_1448, cbSceneParam._m0[89u].z, fma(_1447, cbSceneParam._m0[89u].y, _1446 * cbSceneParam._m0[89u].x));
    float _1472 = fma(_1448, cbSceneParam._m0[90u].z, fma(_1447, cbSceneParam._m0[90u].y, _1446 * cbSceneParam._m0[90u].x));
    float _1475 = fma(_1448, cbSceneParam._m0[91u].z, fma(_1447, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1446));
    float _1490 = _746 * 0.5;
    float _1491 = _747 * 0.5;
    float _1492 = _748 * 0.5;
    float _1493 = dot(vec4(_1490, _1491, _1492, 1.0), vec4(_1424, _1427, _1430, _1433));
    float _1496 = dot(vec4(_1490, _1491, _1492, 1.0), vec4(_1423, _1426, _1429, _1432));
    float _1499 = dot(vec4(_1490, _1491, _1492, 1.0), vec4(_1422, _1425, _1428, _1431));
    float _1533;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1506 = dot(vec4(_1490, _1491, _1492, 1.0), vec4(_1113, _1116, _1119, _1122));
        float _1510 = dot(vec4(_1490, _1491, _1492, 1.0), vec4(_1114, _1117, _1120, _1123));
        float _1514 = dot(vec4(_1490, _1491, _1492, 1.0), vec4(_1115, _1118, _1121, _1124));
        float _1521 = dot(vec4(cbModelParam._m0[39u]), vec4(_1490, _1491, _1492, 1.0));
        _1533 = dot(vec3(isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)), isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0)), isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1521) ? 0.0 : (isnan(0.0) ? _1521 : max(0.0, _1521))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1533 = 1.0;
    }
    float _1544;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1535 = dot(vec4(cbModelParam._m0[40u]), vec4(_1490, _1491, _1492, 1.0));
        _1544 = dot(vec3(isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0)), isnan(0.0) ? _1496 : (isnan(_1496) ? 0.0 : max(_1496, 0.0)), isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1535) ? 0.0 : (isnan(0.0) ? _1535 : max(0.0, _1535))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1544 = 1.0;
    }
    float _1548 = (_1544 * cbModelParam._m0[1u].x) + (_1533 * (1.0 - cbModelParam._m0[1u].x));
    float _1558 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _641);
    float _1559 = isnan(_1558) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1558 : min(cbModelParam._m0[25u].z, _1558));
    float _1640;
    float _1642;
    float _1644;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1607 = fma(_806, cbModelParam._m0[13u].z, fma(_802, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _798)) + cbModelParam._m0[13u].w;
        float _1611 = fma(_806, cbModelParam._m0[14u].z, fma(_802, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _798)) + cbModelParam._m0[14u].w;
        float _1615 = fma(_806, cbModelParam._m0[15u].z, fma(_802, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _798)) + cbModelParam._m0[15u].w;
        float _1618 = fma(_748, cbModelParam._m0[13u].z, fma(_747, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _746));
        float _1621 = fma(_748, cbModelParam._m0[14u].z, fma(_747, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _746));
        float _1624 = fma(_748, cbModelParam._m0[15u].z, fma(_747, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _746));
        float _1652;
        if (_1618 > 0.0)
        {
            _1652 = abs((1.0 - _1607) / _1618);
        }
        else
        {
            float frontier_phi_26_24_ladder;
            if (_1618 < 0.0)
            {
                frontier_phi_26_24_ladder = abs((_1607 + 1.0) / _1618);
            }
            else
            {
                frontier_phi_26_24_ladder = 5000.0;
            }
            _1652 = frontier_phi_26_24_ladder;
        }
        float _2022;
        if (_1621 > 0.0)
        {
            _2022 = abs((1.0 - _1611) / _1621);
        }
        else
        {
            float frontier_phi_35_31_ladder;
            if (_1621 < 0.0)
            {
                frontier_phi_35_31_ladder = abs((_1611 + 1.0) / _1621);
            }
            else
            {
                frontier_phi_35_31_ladder = 5000.0;
            }
            _2022 = frontier_phi_35_31_ladder;
        }
        float _2322;
        if (_1624 > 0.0)
        {
            _2322 = abs((1.0 - _1615) / _1624);
        }
        else
        {
            float frontier_phi_49_42_ladder;
            if (_1624 < 0.0)
            {
                frontier_phi_49_42_ladder = abs((_1615 + 1.0) / _1624);
            }
            else
            {
                frontier_phi_49_42_ladder = 5000.0;
            }
            _2322 = frontier_phi_49_42_ladder;
        }
        float _2324 = isnan(_2022) ? _1652 : (isnan(_1652) ? _2022 : min(_1652, _2022));
        float _2325 = isnan(_2322) ? _2324 : (isnan(_2324) ? _2322 : min(_2324, _2322));
        float _2329 = (_2325 * _1618) + _1607;
        float _2330 = (_2325 * _1621) + _1611;
        float _2331 = (_2325 * _1624) + _1615;
        float _2332 = _2325 * 9.9999997473787516355514526367188e-05;
        float _2333 = (-1.0) - _2332;
        float _2335 = _2332 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2331 > _2335) || ((_2331 < _2333) || ((_2330 > _2335) || ((_2330 < _2333) || ((_2329 < _2333) || (_2329 > _2335))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2457 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2331, cbModelParam._m0[9u].z, fma(_2330, cbModelParam._m0[9u].y, _2329 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2331, cbModelParam._m0[10u].z, fma(_2330, cbModelParam._m0[10u].y, _2329 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2331, cbModelParam._m0[11u].z, fma(_2330, cbModelParam._m0[11u].y, _2329 * cbModelParam._m0[11u].x))), _1559);
            frontier_phi_25_49_ladder = _2457.z * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_1 = _2457.y * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_2 = _2457.x * cbModelParam._m0[1u].y;
        }
        _1640 = frontier_phi_25_49_ladder_2;
        _1642 = frontier_phi_25_49_ladder_1;
        _1644 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1628 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_746, _747, _748), _1559);
        _1640 = _1628.x * cbModelParam._m0[1u].y;
        _1642 = _1628.y * cbModelParam._m0[1u].y;
        _1644 = _1628.z * cbModelParam._m0[1u].y;
    }
    float _1648 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _641);
    float _1649 = isnan(_1648) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1648 : min(cbModelParam._m0[25u].w, _1648));
    float _1738;
    float _1740;
    float _1742;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1702 = fma(_806, cbModelParam._m0[21u].z, fma(_802, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _798)) + cbModelParam._m0[21u].w;
        float _1706 = fma(_806, cbModelParam._m0[22u].z, fma(_802, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _798)) + cbModelParam._m0[22u].w;
        float _1710 = fma(_806, cbModelParam._m0[23u].z, fma(_802, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _798)) + cbModelParam._m0[23u].w;
        float _1713 = fma(_748, cbModelParam._m0[21u].z, fma(_747, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _746));
        float _1716 = fma(_748, cbModelParam._m0[22u].z, fma(_747, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _746));
        float _1719 = fma(_748, cbModelParam._m0[23u].z, fma(_747, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _746));
        float _2027;
        if (_1713 > 0.0)
        {
            _2027 = abs((1.0 - _1702) / _1713);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1713 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1702 + 1.0) / _1713);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _2027 = frontier_phi_37_33_ladder;
        }
        float _2348;
        if (_1716 > 0.0)
        {
            _2348 = abs((1.0 - _1706) / _1716);
        }
        else
        {
            float frontier_phi_51_44_ladder;
            if (_1716 < 0.0)
            {
                frontier_phi_51_44_ladder = abs((_1706 + 1.0) / _1716);
            }
            else
            {
                frontier_phi_51_44_ladder = 5000.0;
            }
            _2348 = frontier_phi_51_44_ladder;
        }
        float _2517;
        if (_1719 > 0.0)
        {
            _2517 = abs((1.0 - _1710) / _1719);
        }
        else
        {
            float frontier_phi_65_60_ladder;
            if (_1719 < 0.0)
            {
                frontier_phi_65_60_ladder = abs((_1710 + 1.0) / _1719);
            }
            else
            {
                frontier_phi_65_60_ladder = 5000.0;
            }
            _2517 = frontier_phi_65_60_ladder;
        }
        float _2519 = isnan(_2348) ? _2027 : (isnan(_2027) ? _2348 : min(_2027, _2348));
        float _2520 = isnan(_2517) ? _2519 : (isnan(_2519) ? _2517 : min(_2519, _2517));
        float _2524 = (_2520 * _1713) + _1702;
        float _2525 = (_2520 * _1716) + _1706;
        float _2526 = (_2520 * _1719) + _1710;
        float _2527 = _2520 * 9.9999997473787516355514526367188e-05;
        float _2528 = (-1.0) - _2527;
        float _2530 = _2527 + 1.0;
        float frontier_phi_34_65_ladder;
        float frontier_phi_34_65_ladder_1;
        float frontier_phi_34_65_ladder_2;
        if ((_2526 > _2530) || ((_2526 < _2528) || ((_2525 > _2530) || ((_2525 < _2528) || ((_2524 < _2528) || (_2524 > _2530))))))
        {
            frontier_phi_34_65_ladder = 0.0;
            frontier_phi_34_65_ladder_1 = 0.0;
            frontier_phi_34_65_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2759 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2526, cbModelParam._m0[17u].z, fma(_2525, cbModelParam._m0[17u].y, _2524 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2526, cbModelParam._m0[18u].z, fma(_2525, cbModelParam._m0[18u].y, _2524 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2526, cbModelParam._m0[19u].z, fma(_2525, cbModelParam._m0[19u].y, _2524 * cbModelParam._m0[19u].x))), _1649);
            frontier_phi_34_65_ladder = _2759.y * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_1 = _2759.x * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_2 = _2759.z * cbModelParam._m0[1u].z;
        }
        _1738 = frontier_phi_34_65_ladder_1;
        _1740 = frontier_phi_34_65_ladder;
        _1742 = frontier_phi_34_65_ladder_2;
    }
    else
    {
        vec4 _1722 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_746, _747, _748), _1649);
        _1738 = _1722.x * cbModelParam._m0[1u].z;
        _1740 = _1722.y * cbModelParam._m0[1u].z;
        _1742 = _1722.z * cbModelParam._m0[1u].z;
    }
    float _1754 = ((((1.0 - _766) * ((_754 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_766 * _754)) * _738;
    float _1755 = _1754 * ((cbModelParam._m0[1u].w * (_1738 - _1640)) + _1640);
    float _1756 = _1754 * ((cbModelParam._m0[1u].w * (_1740 - _1642)) + _1642);
    float _1757 = _1754 * ((cbModelParam._m0[1u].w * (_1742 - _1644)) + _1644);
    float _1760 = fma(_1757, cbSceneParam._m0[89u].z, fma(_1756, cbSceneParam._m0[89u].y, _1755 * cbSceneParam._m0[89u].x));
    float _1763 = fma(_1757, cbSceneParam._m0[90u].z, fma(_1756, cbSceneParam._m0[90u].y, _1755 * cbSceneParam._m0[90u].x));
    float _1766 = fma(_1757, cbSceneParam._m0[91u].z, fma(_1756, cbSceneParam._m0[91u].y, _1755 * cbSceneParam._m0[91u].x));
    vec4 _1774 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_673, _674));
    float _1776 = _1774.w;
    float _1788 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1776);
    float _1789 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1776);
    float _1790 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1776);
    uvec4 _1794 = floatBitsToUint(cbInstanceData._m0[_713 + 5u]);
    uint _1796 = _1794.x * 14u;
    uint _1797 = _1796 + 13u;
    float _1802 = _738 + (-1.0);
    float _1805 = (cbLight._m0[_1797].x * _1802) + 1.0;
    float _1806 = (cbLight._m0[_1797].y * _1802) + 1.0;
    uint _1807 = _1796 + 5u;
    float _1813 = isnan(1.0) ? _1806 : (isnan(_1806) ? 1.0 : min(_1806, 1.0));
    uint _1817 = _1796 + 4u;
    float _1826 = isnan(1.0) ? _1805 : (isnan(_1805) ? 1.0 : min(_1805, 1.0));
    uint _1830 = _1796 | 1u;
    float _1841 = dot(vec3(cbLight._m0[_1796].xyz), vec3(_638, _639, _640));
    float _1844 = dot(vec3(cbLight._m0[_1830].xyz), vec3(_638, _639, _640));
    float _3713 = isnan(0.0) ? _1841 : (isnan(_1841) ? 0.0 : max(_1841, 0.0));
    float _3724 = isnan(0.0) ? _1844 : (isnan(_1844) ? 0.0 : max(_1844, 0.0));
    float _1849 = (isnan(1.0) ? _3713 : (isnan(_3713) ? 1.0 : min(_3713, 1.0))) * 0.3183098733425140380859375;
    float _1851 = (isnan(1.0) ? _3724 : (isnan(_3724) ? 1.0 : min(_3724, 1.0))) * 0.3183098733425140380859375;
    float _1858 = ((cbLight._m0[_1807].x * _1813) * _1851) + (((cbLight._m0[_1817].x * _1788) * _1826) * _1849);
    float _1859 = ((_1813 * cbLight._m0[_1807].y) * _1851) + (((cbLight._m0[_1817].y * _1789) * _1826) * _1849);
    float _1860 = ((_1813 * cbLight._m0[_1807].z) * _1851) + (((cbLight._m0[_1817].z * _1790) * _1826) * _1849);
    uint _1862 = _1796 + 8u;
    float _1875 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1796].w)) * _641) * 0.949999988079071044921875);
    float _1876 = _1875 * _1875;
    float _1877 = cbLight._m0[_1796].x + _665;
    float _1878 = cbLight._m0[_1796].y + _666;
    float _1879 = cbLight._m0[_1796].z + _667;
    float _1883 = inversesqrt(dot(vec3(_1877, _1878, _1879), vec3(_1877, _1878, _1879)));
    float _1884 = _1883 * _1877;
    float _1885 = _1883 * _1878;
    float _1886 = _1883 * _1879;
    float _1887 = dot(vec3(_638, _639, _640), vec3(cbLight._m0[_1796].xyz));
    float _3735 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
    float _1890 = isnan(1.0) ? _3735 : (isnan(_3735) ? 1.0 : min(_3735, 1.0));
    float _3746 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _1891 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
    float _1892 = dot(vec3(_638, _639, _640), vec3(_1884, _1885, _1886));
    float _3757 = isnan(0.0) ? _1892 : (isnan(_1892) ? 0.0 : max(_1892, 0.0));
    float _1895 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
    float _1896 = dot(vec3(cbLight._m0[_1796].xyz), vec3(_1884, _1885, _1886));
    float _3768 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
    float _1900 = _1876 * _1876;
    float _1904 = ((_1895 * _1895) * (_1900 + (-1.0))) + 1.0;
    float _1915 = (exp2(log2(1.0 - (isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1916 = 1.0 - _1876;
    float _1927 = (0.5 / (((_1891 * ((_1890 * _1916) + _1876)) + 9.9999999392252902907785028219223e-09) + (((_1891 * _1916) + _1876) * _1890))) * _1890;
    float _3779 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
    float _1929 = (isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * (_1900 / ((_1904 * _1904) * 3.141590118408203125));
    uint _1943 = _1796 + 9u;
    float _1954 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1830].w)) * _641) * 0.949999988079071044921875);
    float _1955 = _1954 * _1954;
    float _1956 = cbLight._m0[_1830].x + _665;
    float _1957 = cbLight._m0[_1830].y + _666;
    float _1958 = cbLight._m0[_1830].z + _667;
    float _1962 = inversesqrt(dot(vec3(_1956, _1957, _1958), vec3(_1956, _1957, _1958)));
    float _1963 = _1962 * _1956;
    float _1964 = _1962 * _1957;
    float _1965 = _1962 * _1958;
    float _1966 = dot(vec3(_638, _639, _640), vec3(cbLight._m0[_1830].xyz));
    float _3790 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
    float _1969 = isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0));
    float _1970 = dot(vec3(_638, _639, _640), vec3(_1963, _1964, _1965));
    float _3801 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
    float _1973 = isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0));
    float _1974 = dot(vec3(cbLight._m0[_1830].xyz), vec3(_1963, _1964, _1965));
    float _3812 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
    float _1978 = _1955 * _1955;
    float _1982 = ((_1973 * _1973) * (_1978 + (-1.0))) + 1.0;
    float _1991 = (exp2(log2(1.0 - (isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1992 = 1.0 - _1955;
    float _2002 = (0.5 / (((_1891 * ((_1969 * _1992) + _1955)) + 9.9999999392252902907785028219223e-09) + (((_1891 * _1992) + _1955) * _1969))) * _1969;
    float _3823 = isnan(0.0) ? _2002 : (isnan(_2002) ? 0.0 : max(_2002, 0.0));
    float _2004 = (isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))) * (_1978 / ((_1982 * _1982) * 3.141590118408203125));
    float _2014 = (((_1991 * cbLight._m0[_1943].x) * _2004) * _1813) + ((((cbLight._m0[_1862].x * _1788) * _1915) * _1929) * _1826);
    float _2015 = (((_1991 * cbLight._m0[_1943].y) * _2004) * _1813) + ((((cbLight._m0[_1862].y * _1789) * _1915) * _1929) * _1826);
    float _2016 = (((_1991 * cbLight._m0[_1943].z) * _2004) * _1813) + ((((cbLight._m0[_1862].z * _1790) * _1915) * _1929) * _1826);
    float _2131;
    float _2133;
    float _2135;
    float _2137;
    float _2139;
    float _2141;
    if (_1794.y == 0u)
    {
        float _2071 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2072 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2071;
        float _2073 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2071;
        float _2074 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2071;
        uvec4 _2086 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2087 = _2086.x;
        uint _2098 = uint((float(_2086.y) * floor(float(uint(cbSceneParam._m0[85u].y * _674) / _2087))) + floor(float(uint(cbSceneParam._m0[85u].x * _673) / _2087)));
        float _2108 = (log2(_2074 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2109 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
        uint _2112 = uint(isnan(14.0) ? _2109 : (isnan(_2109) ? 14.0 : min(_2109, 14.0)));
        uvec4 _2117 = texelFetch(g_lightClusterGridBuffer, int(((_2112 << 2u) + (_2098 << 6u)) >> 2u));
        uint _2118 = _2117.x;
        uint _2119 = _2086.z;
        float _2209;
        float _2211;
        float _2213;
        float _2215;
        float _2217;
        float _2219;
        if (((((1u << ((_2119 >> 4u) & 15u)) + 4294967295u) & _2118) == 0u) || ((_2119 & 240u) == 0u))
        {
            _2209 = 0.0;
            _2211 = 0.0;
            _2213 = 0.0;
            _2215 = 0.0;
            _2217 = 0.0;
            _2219 = 0.0;
        }
        else
        {
            float _2210;
            float _2212;
            float _2214;
            float _2216;
            float _2218;
            float _2220;
            float _2385 = 0.0;
            float _2386 = 0.0;
            float _2387 = 0.0;
            float _2388 = 0.0;
            float _2389 = 0.0;
            float _2390 = 0.0;
            uint _2391 = 0u;
            uint _2400;
            bool _2401;
            for (;;)
            {
                _2400 = texelFetch(g_lightClassification, int((((_2112 << 5u) + (_2098 << 9u)) + (_2391 << 2u)) >> 2u)).x;
                _2401 = _2400 == 0u;
                float frontier_phi_62_pred;
                float frontier_phi_62_pred_1;
                float frontier_phi_62_pred_2;
                float frontier_phi_62_pred_3;
                float frontier_phi_62_pred_4;
                float frontier_phi_62_pred_5;
                if (_2401)
                {
                    frontier_phi_62_pred = _2386;
                    frontier_phi_62_pred_1 = _2385;
                    frontier_phi_62_pred_2 = _2387;
                    frontier_phi_62_pred_3 = _2390;
                    frontier_phi_62_pred_4 = _2389;
                    frontier_phi_62_pred_5 = _2388;
                }
                else
                {
                    float _2560;
                    float _2561;
                    float _2562;
                    float _2563;
                    float _2564;
                    float _2565;
                    uint _2566;
                    _2560 = _2385;
                    _2561 = _2386;
                    _2562 = _2387;
                    _2563 = _2388;
                    _2564 = _2389;
                    _2565 = _2390;
                    _2566 = _2400;
                    float _2466;
                    float _2467;
                    float _2468;
                    float _2469;
                    float _2470;
                    float _2471;
                    for (;;)
                    {
                        uint _2570 = uint(findLSB(_2566)) + (_2391 << 5u);
                        uint _2567 = (_2566 + 4294967295u) & _2566;
                        uint _2572 = _2570 * 48u;
                        vec4 _2586 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2572)).x, texelFetch(g_PointLightRenderingBuffer, int(_2572 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2572 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2572 + 3u)).x));
                        uint _2592 = (_2570 * 48u) + 4u;
                        vec4 _2605 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2592)).x, texelFetch(g_PointLightRenderingBuffer, int(_2592 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2592 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2592 + 3u)).x));
                        uint _2611 = (_2570 * 48u) + 8u;
                        vec3 _2622 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2611)).x, texelFetch(g_PointLightRenderingBuffer, int(_2611 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2611 + 2u)).x));
                        float _2626 = _2586.x - _2072;
                        float _2627 = _2586.y - _2073;
                        float _2628 = _2586.z - _2074;
                        float _2629 = dot(vec3(_2626, _2627, _2628), vec3(_2626, _2627, _2628));
                        float _2632 = inversesqrt(_2629);
                        float _2633 = _2632 * _2626;
                        float _2634 = _2632 * _2627;
                        float _2635 = _2632 * _2628;
                        float _2636 = dot(vec3(_694, _697, _700), vec3(_2633, _2634, _2635));
                        float _2641 = 1.0 - (_2629 * _2586.w);
                        float _3844 = isnan(0.0) ? _2641 : (isnan(_2641) ? 0.0 : max(_2641, 0.0));
                        float _2642 = isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0));
                        float _2643 = sqrt(_2629) * _2605.w;
                        float _2646 = 1.39999997615814208984375 / (_2643 + 1.39999997615814208984375);
                        float _2647 = _2646 * _2646;
                        float _2650 = ((1.0 - _2647) * _2636) + _2647;
                        float _2653 = _2643 * _2643;
                        float _2657 = ((isnan(0.0) ? _2650 : (isnan(_2650) ? 0.0 : max(_2650, 0.0))) * _2642) / ((_2653 * 0.699999988079071044921875) + 1.0);
                        float _2661 = (-0.0) - _2072;
                        float _2662 = (-0.0) - _2073;
                        float _2663 = (-0.0) - _2074;
                        float _2667 = inversesqrt(dot(vec3(_2661, _2662, _2663), vec3(_2661, _2662, _2663)));
                        float _2668 = _2667 * _2661;
                        float _2669 = _2667 * _2662;
                        float _2670 = _2667 * _2663;
                        float _2678 = exp2(log2(1.0 / ((_2653 * 3.5) + 5.0)) * 0.25);
                        float _2679 = 1.0 - _754;
                        float _2686 = sqrt(1.0 - ((1.0 - (_2679 * _2679)) * (1.0 - (_2678 * _2678))));
                        float _2687 = _2686 * _2686;
                        float _2688 = _2687 * _2687;
                        float _2689 = _2668 + _2633;
                        float _2690 = _2669 + _2634;
                        float _2691 = _2670 + _2635;
                        float _2695 = inversesqrt(dot(vec3(_2689, _2690, _2691), vec3(_2689, _2690, _2691)));
                        float _2699 = dot(vec3(_694, _697, _700), vec3(_2668, _2669, _2670));
                        float _3860 = isnan(0.0) ? _2699 : (isnan(_2699) ? 0.0 : max(_2699, 0.0));
                        float _2702 = isnan(1.0) ? _3860 : (isnan(_3860) ? 1.0 : min(_3860, 1.0));
                        float _2703 = dot(vec3(_694, _697, _700), vec3(_2695 * _2689, _2695 * _2690, _2695 * _2691));
                        float _3871 = isnan(0.0) ? _2703 : (isnan(_2703) ? 0.0 : max(_2703, 0.0));
                        float _2706 = isnan(1.0) ? _3871 : (isnan(_3871) ? 1.0 : min(_3871, 1.0));
                        float _2710 = ((_2706 * _2706) * (_2688 + (-1.0))) + 1.0;
                        float _2711 = _2646 * _2687;
                        float _2712 = _2711 * _2711;
                        float _2715 = ((1.0 - _2712) * _2636) + _2712;
                        float _3882 = isnan(0.0) ? _2715 : (isnan(_2715) ? 0.0 : max(_2715, 0.0));
                        float _2716 = isnan(1.0) ? _3882 : (isnan(_3882) ? 1.0 : min(_3882, 1.0));
                        float _2717 = 1.0 - _2687;
                        float _2727 = (0.5 / (((_2716 * ((_2702 * _2717) + _2687)) + 9.9999999392252902907785028219223e-09) + (((_2716 * _2717) + _2687) * _2702))) * _2716;
                        float _3893 = isnan(0.0) ? _2727 : (isnan(_2727) ? 0.0 : max(_2727, 0.0));
                        float _2738 = (((_2688 * 3.1415927410125732421875) * (isnan(1.0) ? _3893 : (isnan(_3893) ? 1.0 : min(_3893, 1.0)))) / ((_2710 * _2710) * ((_2653 * 2.1991131305694580078125) + 3.141590118408203125))) * _2642;
                        _2469 = (_2657 * _2605.x) + _2563;
                        _2470 = (_2657 * _2605.y) + _2564;
                        _2471 = (_2657 * _2605.z) + _2565;
                        _2466 = (_2738 * _2622.x) + _2560;
                        _2467 = (_2738 * _2622.y) + _2561;
                        _2468 = (_2738 * _2622.z) + _2562;
                        if (_2567 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2560 = _2466;
                            _2561 = _2467;
                            _2562 = _2468;
                            _2563 = _2469;
                            _2564 = _2470;
                            _2565 = _2471;
                            _2566 = _2567;
                        }
                    }
                    frontier_phi_62_pred = _2467;
                    frontier_phi_62_pred_1 = _2466;
                    frontier_phi_62_pred_2 = _2468;
                    frontier_phi_62_pred_3 = _2471;
                    frontier_phi_62_pred_4 = _2470;
                    frontier_phi_62_pred_5 = _2469;
                }
                _2212 = frontier_phi_62_pred;
                _2210 = frontier_phi_62_pred_1;
                _2214 = frontier_phi_62_pred_2;
                _2220 = frontier_phi_62_pred_3;
                _2218 = frontier_phi_62_pred_4;
                _2216 = frontier_phi_62_pred_5;
                uint _2392 = _2391 + 1u;
                if (_2392 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2385 = _2210;
                    _2386 = _2212;
                    _2387 = _2214;
                    _2388 = _2216;
                    _2389 = _2218;
                    _2390 = _2220;
                    _2391 = _2392;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2209 = _2210;
            _2211 = _2212;
            _2213 = _2214;
            _2215 = _2216;
            _2217 = _2218;
            _2219 = _2220;
        }
        uvec4 _2223 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2224 = _2223.z;
        uint _2226 = (_2224 >> 8u) & 15u;
        float _2353;
        float _2355;
        float _2357;
        float _2359;
        float _2361;
        float _2363;
        if (((4294967295u << _2226) & _2118) == 0u)
        {
            _2353 = _2209;
            _2355 = _2211;
            _2357 = _2213;
            _2359 = _2215;
            _2361 = _2217;
            _2363 = _2219;
        }
        else
        {
            float _2378 = inversesqrt(dot(vec3(_2072, _2073, _2074), vec3(_2072, _2073, _2074)));
            float _2379 = _2378 * _2072;
            float _2380 = _2378 * _2073;
            float _2381 = _2378 * _2074;
            float frontier_phi_53_54_ladder;
            float frontier_phi_53_54_ladder_1;
            float frontier_phi_53_54_ladder_2;
            float frontier_phi_53_54_ladder_3;
            float frontier_phi_53_54_ladder_4;
            float frontier_phi_53_54_ladder_5;
            if (_2226 < ((_2224 >> 12u) & 15u))
            {
                float _2354;
                float _2356;
                float _2358;
                float _2360;
                float _2362;
                float _2364;
                float _2543 = _2209;
                float _2544 = _2211;
                float _2545 = _2213;
                float _2546 = _2215;
                float _2547 = _2217;
                float _2548 = _2219;
                uint _2549 = _2226;
                uint _2558;
                bool _2559;
                for (;;)
                {
                    _2558 = texelFetch(g_lightClassification, int((((_2112 << 5u) + (_2098 << 9u)) + (_2549 << 2u)) >> 2u)).x;
                    _2559 = _2558 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    float frontier_phi_71_pred_3;
                    float frontier_phi_71_pred_4;
                    float frontier_phi_71_pred_5;
                    if (_2559)
                    {
                        frontier_phi_71_pred = _2544;
                        frontier_phi_71_pred_1 = _2543;
                        frontier_phi_71_pred_2 = _2548;
                        frontier_phi_71_pred_3 = _2547;
                        frontier_phi_71_pred_4 = _2546;
                        frontier_phi_71_pred_5 = _2545;
                    }
                    else
                    {
                        float _2764;
                        float _2765;
                        float _2766;
                        float _2767;
                        float _2768;
                        float _2769;
                        float _3059;
                        float _3060;
                        float _3061;
                        float _3062;
                        float _3063;
                        float _3064;
                        float _2777 = _2543;
                        float _2778 = _2544;
                        float _2779 = _2545;
                        float _2780 = _2546;
                        float _2781 = _2547;
                        float _2782 = _2548;
                        uint _2783 = _2558;
                        uint _2784;
                        vec4 _2809;
                        float _2810;
                        vec4 _2825;
                        vec3 _2837;
                        vec4 _2853;
                        vec4 _2869;
                        float _2915;
                        bool _2916;
                        for (;;)
                        {
                            uint _2794 = ((_2549 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2783));
                            _2784 = (_2783 + 4294967295u) & _2783;
                            uint _2796 = _2794 * 40u;
                            _2809 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2796)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2796 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2796 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2796 + 3u)).x));
                            _2810 = _2809.w;
                            uint _2812 = (_2794 * 40u) + 4u;
                            _2825 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2812)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2812 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2812 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2812 + 3u)).x));
                            uint _2827 = (_2794 * 40u) + 8u;
                            _2837 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2827)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2827 + 2u)).x));
                            uint _2840 = (_2794 * 40u) + 16u;
                            _2853 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2840)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2840 + 3u)).x));
                            uint _2856 = (_2794 * 40u) + 20u;
                            _2869 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2856)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 3u)).x));
                            uint _2871 = (_2794 * 40u) + 24u;
                            vec4 _2884 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2871)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2871 + 3u)).x));
                            uint _2890 = (_2794 * 40u) + 28u;
                            vec4 _2903 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2890)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2890 + 3u)).x));
                            _2915 = fma(_2074, _2903.z, fma(_2073, _2903.y, _2903.x * _2072)) + _2903.w;
                            _2916 = !((fma(_2074, _2884.z, fma(_2073, _2884.y, _2884.x * _2072)) + _2884.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            float frontier_phi_77_pred_3;
                            float frontier_phi_77_pred_4;
                            float frontier_phi_77_pred_5;
                            if (_2916)
                            {
                                float _2943 = _2809.x - _2072;
                                float _2944 = _2809.y - _2073;
                                float _2945 = _2809.z - _2074;
                                float _2946 = dot(vec3(_2943, _2944, _2945), vec3(_2943, _2944, _2945));
                                float _2949 = inversesqrt(_2946);
                                float _2950 = _2949 * _2943;
                                float _2951 = _2949 * _2944;
                                float _2952 = _2949 * _2945;
                                float _2956 = 1.0 - (_2946 / (_2810 * _2810));
                                float _3904 = isnan(0.0) ? _2956 : (isnan(_2956) ? 0.0 : max(_2956, 0.0));
                                float _2957 = isnan(1.0) ? _3904 : (isnan(_3904) ? 1.0 : min(_3904, 1.0));
                                float _2961 = sqrt(_2946) * _2825.w;
                                float _2963 = 1.39999997615814208984375 / (_2961 + 1.39999997615814208984375);
                                float _2964 = _2963 * _2963;
                                float _2967 = ((1.0 - _2964) * dot(vec3(_2950, _2951, _2952), vec3(_694, _697, _700))) + _2964;
                                float _2970 = _2961 * _2961;
                                float _2974 = (fma(_2074, _2853.z, fma(_2073, _2853.y, _2853.x * _2072)) + _2853.w) / _2915;
                                float _2975 = (fma(_2074, _2869.z, fma(_2073, _2869.y, _2869.x * _2072)) + _2869.w) / _2915;
                                float _2979 = 1.0 - dot(vec2(_2974, _2975), vec2(_2974, _2975));
                                float _3920 = isnan(0.0) ? _2979 : (isnan(_2979) ? 0.0 : max(_2979, 0.0));
                                float _2980 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
                                float _2981 = _2980 * (((isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0))) * _2957) / ((_2970 * 0.699999988079071044921875) + 1.0));
                                float _2993 = exp2(log2(1.0 / ((_2970 * 3.5) + 5.0)) * 0.25);
                                float _2994 = 1.0 - _754;
                                float _3001 = sqrt(1.0 - ((1.0 - (_2994 * _2994)) * (1.0 - (_2993 * _2993))));
                                float _3002 = _3001 * _3001;
                                float _3003 = _3002 * _3002;
                                float _3004 = _2950 - _2379;
                                float _3005 = _2951 - _2380;
                                float _3006 = _2952 - _2381;
                                float _3010 = inversesqrt(dot(vec3(_3004, _3005, _3006), vec3(_3004, _3005, _3006)));
                                float _3014 = dot(vec3(_694, _697, _700), vec3((-0.0) - _2379, (-0.0) - _2380, (-0.0) - _2381));
                                float _3931 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
                                float _3017 = isnan(1.0) ? _3931 : (isnan(_3931) ? 1.0 : min(_3931, 1.0));
                                float _3018 = dot(vec3(_694, _697, _700), vec3(_3010 * _3004, _3010 * _3005, _3010 * _3006));
                                float _3942 = isnan(0.0) ? _3018 : (isnan(_3018) ? 0.0 : max(_3018, 0.0));
                                float _3021 = isnan(1.0) ? _3942 : (isnan(_3942) ? 1.0 : min(_3942, 1.0));
                                float _3025 = ((_3021 * _3021) * (_3003 + (-1.0))) + 1.0;
                                float _3026 = _2963 * _3002;
                                float _3027 = _3026 * _3026;
                                float _3033 = ((1.0 - _3027) * dot(vec3(_694, _697, _700), vec3(_2950, _2951, _2952))) + _3027;
                                float _3953 = isnan(0.0) ? _3033 : (isnan(_3033) ? 0.0 : max(_3033, 0.0));
                                float _3034 = isnan(1.0) ? _3953 : (isnan(_3953) ? 1.0 : min(_3953, 1.0));
                                float _3035 = 1.0 - _3002;
                                float _3045 = (0.5 / (((_3034 * ((_3017 * _3035) + _3002)) + 9.9999999392252902907785028219223e-09) + (((_3034 * _3035) + _3002) * _3017))) * _3034;
                                float _3964 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0));
                                float _3055 = (_2980 * _2957) * (((_3003 * 3.1415927410125732421875) * (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0)))) / ((_3025 * _3025) * ((_2970 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_77_pred = _3055 * _2837.y;
                                frontier_phi_77_pred_1 = _3055 * _2837.x;
                                frontier_phi_77_pred_2 = _2981 * _2825.z;
                                frontier_phi_77_pred_3 = _2981 * _2825.y;
                                frontier_phi_77_pred_4 = _2981 * _2825.x;
                                frontier_phi_77_pred_5 = _3055 * _2837.z;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                                frontier_phi_77_pred_3 = 0.0;
                                frontier_phi_77_pred_4 = 0.0;
                                frontier_phi_77_pred_5 = 0.0;
                            }
                            _3060 = frontier_phi_77_pred;
                            _3059 = frontier_phi_77_pred_1;
                            _3064 = frontier_phi_77_pred_2;
                            _3063 = frontier_phi_77_pred_3;
                            _3062 = frontier_phi_77_pred_4;
                            _3061 = frontier_phi_77_pred_5;
                            _2767 = _3062 + _2780;
                            _2768 = _3063 + _2781;
                            _2769 = _3064 + _2782;
                            _2764 = _3059 + _2777;
                            _2765 = _3060 + _2778;
                            _2766 = _3061 + _2779;
                            if (_2784 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2777 = _2764;
                                _2778 = _2765;
                                _2779 = _2766;
                                _2780 = _2767;
                                _2781 = _2768;
                                _2782 = _2769;
                                _2783 = _2784;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _2765;
                        frontier_phi_71_pred_1 = _2764;
                        frontier_phi_71_pred_2 = _2769;
                        frontier_phi_71_pred_3 = _2768;
                        frontier_phi_71_pred_4 = _2767;
                        frontier_phi_71_pred_5 = _2766;
                    }
                    _2356 = frontier_phi_71_pred;
                    _2354 = frontier_phi_71_pred_1;
                    _2364 = frontier_phi_71_pred_2;
                    _2362 = frontier_phi_71_pred_3;
                    _2360 = frontier_phi_71_pred_4;
                    _2358 = frontier_phi_71_pred_5;
                    uint _2550 = _2549 + 1u;
                    if (_2550 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2543 = _2354;
                        _2544 = _2356;
                        _2545 = _2358;
                        _2546 = _2360;
                        _2547 = _2362;
                        _2548 = _2364;
                        _2549 = _2550;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_53_54_ladder = _2364;
                frontier_phi_53_54_ladder_1 = _2360;
                frontier_phi_53_54_ladder_2 = _2358;
                frontier_phi_53_54_ladder_3 = _2356;
                frontier_phi_53_54_ladder_4 = _2354;
                frontier_phi_53_54_ladder_5 = _2362;
            }
            else
            {
                frontier_phi_53_54_ladder = _2219;
                frontier_phi_53_54_ladder_1 = _2215;
                frontier_phi_53_54_ladder_2 = _2213;
                frontier_phi_53_54_ladder_3 = _2211;
                frontier_phi_53_54_ladder_4 = _2209;
                frontier_phi_53_54_ladder_5 = _2217;
            }
            _2353 = frontier_phi_53_54_ladder_4;
            _2355 = frontier_phi_53_54_ladder_3;
            _2357 = frontier_phi_53_54_ladder_2;
            _2359 = frontier_phi_53_54_ladder_1;
            _2361 = frontier_phi_53_54_ladder_5;
            _2363 = frontier_phi_53_54_ladder;
        }
        float _2368 = isnan(1.0) ? _738 : (isnan(_738) ? 1.0 : min(_738, 1.0));
        _2131 = (_2368 * _2359) + _1858;
        _2133 = (_2368 * _2361) + _1859;
        _2135 = (_2368 * _2363) + _1860;
        _2137 = ((_2353 * 0.039999999105930328369140625) * _2368) + _2014;
        _2139 = ((_2355 * 0.039999999105930328369140625) * _2368) + _2015;
        _2141 = ((_2357 * 0.039999999105930328369140625) * _2368) + _2016;
    }
    else
    {
        _2131 = _1858;
        _2133 = _1859;
        _2135 = _1860;
        _2137 = _2014;
        _2139 = _2015;
        _2141 = _2016;
    }
    float _3980 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _3991 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _4002 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _2158 = ((isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * (_2131 + ((isnan(0.0) ? _1469 : (isnan(_1469) ? 0.0 : max(_1469, 0.0))) * _738))) + ((_2137 + ((isnan(0.0) ? _1760 : (isnan(_1760) ? 0.0 : max(_1760, 0.0))) * _1548)) * cbPerFrame._m0[3u].x);
    float _2159 = ((isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * (_2133 + ((isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0))) * _738))) + ((_2139 + ((isnan(0.0) ? _1763 : (isnan(_1763) ? 0.0 : max(_1763, 0.0))) * _1548)) * cbPerFrame._m0[3u].x);
    float _2160 = ((isnan(1.0) ? _4002 : (isnan(_4002) ? 1.0 : min(_4002, 1.0))) * (_2135 + ((isnan(0.0) ? _1475 : (isnan(_1475) ? 0.0 : max(_1475, 0.0))) * _738))) + ((_2141 + ((isnan(0.0) ? _1766 : (isnan(_1766) ? 0.0 : max(_1766, 0.0))) * _1548)) * cbPerFrame._m0[3u].x);
    uint _2164 = _713 + 6u;
    float _2172 = _673 / cbSceneParam._m0[86u].x;
    float _2173 = _674 / cbSceneParam._m0[86u].y;
    vec4 _2187 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2172, _2173, (log2((isnan(cbSceneParam._m0[77u].w) ? _660 : (isnan(_660) ? cbSceneParam._m0[77u].w : min(_660, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2189 = _2187.x;
    float _2190 = _2187.y;
    float _2191 = _2187.z;
    float _2192 = _2187.w;
    float _2272;
    float _2274;
    float _2276;
    float _2278;
    if (_660 > cbSceneParam._m0[78u].w)
    {
        float _2234 = isnan(_660) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _660 : min(cbSceneParam._m0[80u].w, _660));
        float _2235 = _2234 / _660;
        float _2246 = _2235 * _275;
        float _2247 = _276 * _2235;
        float _2248 = (-0.0) - _2247;
        float _2249 = _2235 * _277;
        float _2251 = (cbSceneParam._m0[77u].w * _2248) / _2234;
        float _2252 = _2251 + cbSceneParam._m0[79u].w;
        float _2253 = cbSceneParam._m0[79u].w - _2247;
        float _2259 = sqrt(((_2246 * _2246) + (_2247 * _2247)) + (_2249 * _2249));
        float _2262 = (1.0 - (cbSceneParam._m0[77u].w / _2234)) * _2259;
        float _2268 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2270 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2479;
        if (abs((_2248 - _2251) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2479 = ((((_2252 > 0.0) ? exp2(_2268 * _2252) : (2.0 - exp2(_2270 * _2252))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2262;
        }
        else
        {
            float _2414 = 1.0 / cbSceneParam._m0[80u].x;
            float _2415 = isnan(_2253) ? _2252 : (isnan(_2252) ? _2253 : max(_2252, _2253));
            float _2416 = isnan(_2253) ? _2252 : (isnan(_2252) ? _2253 : min(_2252, _2253));
            float _2425 = isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : min(_2415, 0.0));
            float _2426 = isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : min(_2416, 0.0));
            _2479 = ((abs(_2259 / _2248) * cbSceneParam._m0[80u].y) * ((((_2425 - _2426) * 2.0) - ((exp2(_2268 * (isnan(0.0) ? _2415 : (isnan(_2415) ? 0.0 : max(_2415, 0.0)))) - exp2(_2268 * (isnan(0.0) ? _2416 : (isnan(_2416) ? 0.0 : max(_2416, 0.0))))) * _2414)) - ((exp2(_2270 * _2425) - exp2(_2270 * _2426)) * _2414))) + (_2262 * cbSceneParam._m0[80u].z);
        }
        vec4 _2481 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2172, _2173, 1.0), 0.0);
        float _2490 = exp2((_2479 * (-1.44269502162933349609375)) * (1.0 - _2481.w));
        float _2491 = log2(_2490);
        float _2507 = log2(_2192);
        _2272 = (exp2(_2507 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2491 * cbSceneParam._m0[78u].x)) * _2481.x) / cbSceneParam._m0[78u].x)) + _2189;
        _2274 = (exp2(_2507 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2491 * cbSceneParam._m0[78u].y)) * _2481.y) / cbSceneParam._m0[78u].y)) + _2190;
        _2276 = (exp2(_2507 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2491 * cbSceneParam._m0[78u].z)) * _2481.z) / cbSceneParam._m0[78u].z)) + _2191;
        _2278 = _2490 * _2192;
    }
    else
    {
        _2272 = _2189;
        _2274 = _2190;
        _2276 = _2191;
        _2278 = _2192;
    }
    float _2290 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2291 = _2290 == 3.0;
    float _2292 = log2(_2278);
    float _2299 = exp2(_2292 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0)));
    float _2300 = exp2(_2292 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0)));
    float _2301 = exp2(_2292 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2160 : (isnan(_2160) ? 0.0 : max(_2160, 0.0)));
    float _2310 = (_2290 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2310 * (_2291 ? _2299 : (_2299 + (cbSceneParam._m0[72u].w * _2272)));
    SV_Target.y = _2310 * (_2291 ? _2300 : (_2300 + (cbSceneParam._m0[72u].w * _2274)));
    SV_Target.z = _2310 * (_2291 ? _2301 : (_2301 + (cbSceneParam._m0[72u].w * _2276)));
    SV_Target.w = cbInstanceData._m0[_2164].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2164].w;
}


