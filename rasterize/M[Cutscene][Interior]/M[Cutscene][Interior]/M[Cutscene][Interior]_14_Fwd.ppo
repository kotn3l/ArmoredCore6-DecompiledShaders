#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _997;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _190 = _189 * _182;
    float _191 = _189 * _183;
    float _192 = _189 * _184;
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _204 = _203 * TANGENT.x;
    float _205 = _203 * TANGENT.y;
    float _206 = _203 * TANGENT.z;
    float _251 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _261 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _251);
    float _262 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _251);
    float _263 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _251);
    vec4 _276 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _279 = _276.x;
    vec4 _297 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _314 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _279) + cbMtdParam._m0[12u].x) * _297.x;
    float _316 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _279) + cbMtdParam._m0[12u].y) * _297.y;
    float _318 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _279) + cbMtdParam._m0[12u].z) * _297.z;
    vec4 _336 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _372 = cbMtdParam._m0[24u].x + _261;
    float _373 = cbMtdParam._m0[24u].y + _262;
    float _374 = cbMtdParam._m0[24u].z + _263;
    float _388 = (-0.0) - dot(vec3(_372, _373, _374), vec3(_190, _191, _192));
    float _389 = (-0.0) - dot(vec3(_372, _373, _374), vec3(_204, _205, _206));
    float _390 = (-0.0) - dot(vec3(_372, _373, _374), vec3((-0.0) - _197, (-0.0) - _198, (-0.0) - _199));
    float _394 = inversesqrt(dot(vec3(_388, _389, _390), vec3(_388, _389, _390)));
    float _397 = _394 * _390;
    float _400 = ((_394 * _388) + ((cbMtdParam._m0[22u].x * _279) * ((_336.x * 2.0) + (-1.0)))) * cbMtdParam._m0[20u].w;
    float _401 = ((_394 * _389) + ((cbMtdParam._m0[22u].y * _279) * ((_336.y * 2.0) + (-1.0)))) * cbMtdParam._m0[20u].z;
    float _402 = fract(TEXCOORD.x);
    float _403 = fract(TEXCOORD.y);
    float _409;
    if (_400 > 0.0)
    {
        _409 = (1.0 - _402) / _400;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_400 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _402) / _400;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _409 = frontier_phi_3_2_ladder;
    }
    float _417;
    if (_401 > 0.0)
    {
        _417 = (1.0 - _403) / _401;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_401 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _403) / _401;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _417 = frontier_phi_7_6_ladder;
    }
    float _421 = (_397 > 0.0) ? (cbMtdParam._m0[16u].x / _397) : 5000.0;
    float _422 = isnan(_417) ? _409 : (isnan(_409) ? _417 : min(_409, _417));
    float _423 = isnan(_421) ? _422 : (isnan(_422) ? _421 : min(_422, _421));
    float _427 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _434 = ((_423 * _397) + _427) / _427;
    vec4 _459 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * ((((((_402 + (-0.5)) + (_423 * _400)) / _434) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * ((((((_403 + (-0.5)) + (_423 * _401)) / _434) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    float _475 = _279 * 0.1500000059604644775390625;
    float _483 = (_475 * (((_459.x * _279) * cbMtdParam._m0[9u].x) - _314)) + _314;
    float _484 = (_475 * (((_459.y * _279) * cbMtdParam._m0[9u].y) - _316)) + _316;
    float _485 = (_475 * (((_459.z * _279) * cbMtdParam._m0[9u].z) - _318)) + _318;
    vec4 _498 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _502 = _498.z;
    float _505 = (_498.x * 2.0) + (-1.0);
    float _506 = (_498.y * 2.0) + (-1.0);
    float _507 = dot(vec2(_505, _506), vec2(_505, _506));
    float _3067 = isnan(0.0) ? _507 : (isnan(_507) ? 0.0 : max(_507, 0.0));
    float _512 = sqrt(1.0 - (isnan(1.0) ? _3067 : (isnan(_3067) ? 1.0 : min(_3067, 1.0))));
    float _515 = fma(_512, _197, fma(_506, _204, _505 * _190));
    float _518 = fma(_512, _198, fma(_506, _205, _505 * _191));
    float _521 = fma(_512, _199, fma(_506, _206, _505 * _192));
    float _525 = inversesqrt(dot(vec3(_515, _518, _521), vec3(_515, _518, _521)));
    float _526 = _525 * _515;
    float _527 = _525 * _518;
    float _528 = _525 * _521;
    float _3078 = isnan(0.0) ? _502 : (isnan(_502) ? 0.0 : max(_502, 0.0));
    float _529 = isnan(1.0) ? _3078 : (isnan(_3078) ? 1.0 : min(_3078, 1.0));
    float _3089 = isnan(0.0) ? _483 : (isnan(_483) ? 0.0 : max(_483, 0.0));
    float _3100 = isnan(0.0) ? _484 : (isnan(_484) ? 0.0 : max(_484, 0.0));
    float _3111 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _548 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _552 = inversesqrt(dot(vec3(_261, _262, _263), vec3(_261, _262, _263)));
    float _553 = _261 * _552;
    float _554 = _262 * _552;
    float _555 = _263 * _552;
    float _561 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _562 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _581 = fma(_528, cbSceneParam._m0[5u].z, fma(_527, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _526));
    float _584 = fma(_528, cbSceneParam._m0[6u].z, fma(_527, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _526));
    float _587 = fma(_528, cbSceneParam._m0[7u].z, fma(_527, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _526));
    uint _600 = uint(roundEven(NORMAL.w)) * 13u;
    uint _603 = (_600 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _609 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3089 : (isnan(_3089) ? 1.0 : min(_3089, 1.0)))) * cbInstanceData._m0[_603].x;
    float _610 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3100 : (isnan(_3100) ? 1.0 : min(_3100, 1.0)))) * cbInstanceData._m0[_603].y;
    float _611 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3111 : (isnan(_3111) ? 1.0 : min(_3111, 1.0)))) * cbInstanceData._m0[_603].z;
    float _3122 = isnan(0.0) ? _609 : (isnan(_609) ? 0.0 : max(_609, 0.0));
    float _612 = isnan(1.0) ? _3122 : (isnan(_3122) ? 1.0 : min(_3122, 1.0));
    float _3133 = isnan(0.0) ? _610 : (isnan(_610) ? 0.0 : max(_610, 0.0));
    float _613 = isnan(1.0) ? _3133 : (isnan(_3133) ? 1.0 : min(_3133, 1.0));
    float _3144 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _614 = isnan(1.0) ? _3144 : (isnan(_3144) ? 1.0 : min(_3144, 1.0));
    vec4 _623 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _561, cbSceneParam._m0[86u].y * _562));
    float _626 = _623.x * TEXCOORD_4.z;
    float _627 = dot(vec3(_526, _527, _528), vec3(_553, _554, _555));
    float _630 = _627 * 2.0;
    float _634 = (_630 * _526) - _553;
    float _635 = (_630 * _527) - _554;
    float _636 = (_630 * _528) - _555;
    float _640 = abs(dot(vec3(_553, _554, _555), vec3(_526, _527, _528)));
    float _3155 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _642 = sqrt(_529);
    float _655 = exp2((_642 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3155 : (isnan(_3155) ? 1.0 : min(_3155, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_642 * 3.0));
    float _687 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _691 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _695 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _996;
    float _998;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _723 = fma(_695, cbModelParam._m0[26u].z, fma(_691, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _687));
        float _727 = fma(_695, cbModelParam._m0[27u].z, fma(_691, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _687));
        float _731 = fma(_695, cbModelParam._m0[28u].z, fma(_691, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _687));
        float _754 = _687 + _526;
        float _755 = _691 + _527;
        float _756 = _695 + _528;
        float _766 = fma(_756, cbModelParam._m0[26u].z, fma(_755, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _754)) - _723;
        float _767 = fma(_756, cbModelParam._m0[27u].z, fma(_755, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _754)) - _727;
        float _768 = fma(_756, cbModelParam._m0[28u].z, fma(_755, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _754)) - _731;
        float _772 = inversesqrt(dot(vec3(_766, _767, _768), vec3(_766, _767, _768)));
        float _785 = ((_772 * _766) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_723 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _786 = ((_772 * _767) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_727 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _787 = ((_772 * _768) / cbModelParam._m0[34u].z) + ((((((_731 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _790 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_785, _786, _787), 0.0);
        vec4 _797 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_785, _786, _787), 0.0);
        vec4 _804 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_785, _786, _787), 0.0);
        vec4 _811 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_785, _786, _787), 0.0);
        float _824 = exp2((_790.w + (-0.5)) * 20.0) * 2.0;
        float _825 = _824 * (_790.x + (-0.5));
        float _826 = _824 * (_790.y + (-0.5));
        float _827 = _824 * (_790.z + (-0.5));
        float _834 = exp2((_797.w + (-0.5)) * 20.0) * 2.0;
        float _835 = _834 * (_797.x + (-0.5));
        float _836 = _834 * (_797.y + (-0.5));
        float _837 = _834 * (_797.z + (-0.5));
        float _844 = exp2((_804.w + (-0.5)) * 20.0) * 2.0;
        float _845 = _844 * (_804.x + (-0.5));
        float _846 = _844 * (_804.y + (-0.5));
        float _847 = _844 * (_804.z + (-0.5));
        float _854 = exp2((_811.w + (-0.5)) * 20.0) * 2.0;
        float _855 = _854 * (_811.x + (-0.5));
        float _856 = _854 * (_811.y + (-0.5));
        float _857 = _854 * (_811.z + (-0.5));
        float _858 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _859 = isnan(0.0) ? _856 : (isnan(_856) ? 0.0 : max(_856, 0.0));
        float _860 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _861 = _825 * 0.5;
        float _862 = _835 * 0.5;
        float _863 = _845 * 0.5;
        float _864 = dot(vec3(_861, _862, _863), vec3(_861, _862, _863));
        float _869 = (_864 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_864);
        float _878 = (dot(vec3(_526, _527, _528), vec3(_869 * _861, _869 * _862, _869 * _863)) + 1.0) * 0.5;
        float _3181 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
        float _888 = sqrt(((_862 * _862) + (_861 * _861)) + (_863 * _863)) / (_858 + 9.9999997473787516355514526367188e-06);
        float _3192 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        float _889 = isnan(1.0) ? _3192 : (isnan(_3192) ? 1.0 : min(_3192, 1.0));
        float _890 = _889 * 2.0;
        float _894 = (1.0 - _889) / (_889 + 1.0);
        float _3203 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
        float _895 = isnan(1.0) ? _3203 : (isnan(_3203) ? 1.0 : min(_3203, 1.0));
        float _904 = ((((1.0 - _895) * (_890 + 2.0)) * exp2(log2(isnan(1.0) ? _3181 : (isnan(_3181) ? 1.0 : min(_3181, 1.0))) * (_890 + 1.0))) + _895) * _858;
        float _905 = _826 * 0.5;
        float _906 = _836 * 0.5;
        float _907 = _846 * 0.5;
        float _908 = dot(vec3(_905, _906, _907), vec3(_905, _906, _907));
        float _913 = (_908 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_908);
        float _921 = (dot(vec3(_526, _527, _528), vec3(_913 * _905, _913 * _906, _913 * _907)) + 1.0) * 0.5;
        float _3214 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
        float _930 = sqrt(((_906 * _906) + (_905 * _905)) + (_907 * _907)) / (_859 + 9.9999997473787516355514526367188e-06);
        float _3225 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
        float _931 = isnan(1.0) ? _3225 : (isnan(_3225) ? 1.0 : min(_3225, 1.0));
        float _932 = _931 * 2.0;
        float _936 = (1.0 - _931) / (_931 + 1.0);
        float _3236 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        float _937 = isnan(1.0) ? _3236 : (isnan(_3236) ? 1.0 : min(_3236, 1.0));
        float _946 = ((((1.0 - _937) * (_932 + 2.0)) * exp2(log2(isnan(1.0) ? _3214 : (isnan(_3214) ? 1.0 : min(_3214, 1.0))) * (_932 + 1.0))) + _937) * _859;
        float _947 = _827 * 0.5;
        float _948 = _837 * 0.5;
        float _949 = _847 * 0.5;
        float _950 = dot(vec3(_947, _948, _949), vec3(_947, _948, _949));
        float _955 = (_950 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_950);
        float _963 = (dot(vec3(_526, _527, _528), vec3(_955 * _947, _955 * _948, _955 * _949)) + 1.0) * 0.5;
        float _3247 = isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0));
        float _972 = sqrt(((_948 * _948) + (_947 * _947)) + (_949 * _949)) / (_860 + 9.9999997473787516355514526367188e-06);
        float _3258 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _973 = isnan(1.0) ? _3258 : (isnan(_3258) ? 1.0 : min(_3258, 1.0));
        float _974 = _973 * 2.0;
        float _978 = (1.0 - _973) / (_973 + 1.0);
        float _3269 = isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0));
        float _979 = isnan(1.0) ? _3269 : (isnan(_3269) ? 1.0 : min(_3269, 1.0));
        float _988 = ((((1.0 - _979) * (_974 + 2.0)) * exp2(log2(isnan(1.0) ? _3247 : (isnan(_3247) ? 1.0 : min(_3247, 1.0))) * (_974 + 1.0))) + _979) * _860;
        _996 = _827;
        _998 = _826;
        _999 = _825;
        _1000 = _837;
        _1001 = _836;
        _1002 = _835;
        _1003 = _847;
        _1004 = _846;
        _1005 = _845;
        _1006 = _860;
        _1007 = _859;
        _1008 = _858;
        _1009 = cbModelParam._m0[36u].z * (isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0)));
        _1010 = cbModelParam._m0[36u].z * (isnan(0.0) ? _946 : (isnan(_946) ? 0.0 : max(_946, 0.0)));
        _1011 = cbModelParam._m0[36u].z * (isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0)));
    }
    else
    {
        _996 = _997;
        _998 = _997;
        _999 = _997;
        _1000 = _997;
        _1001 = _997;
        _1002 = _997;
        _1003 = _997;
        _1004 = _997;
        _1005 = _997;
        _1006 = _997;
        _1007 = _997;
        _1008 = _997;
        _1009 = 0.0;
        _1010 = 0.0;
        _1011 = 0.0;
    }
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1037 = fma(_695, cbModelParam._m0[30u].z, fma(_691, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _687));
        float _1041 = fma(_695, cbModelParam._m0[31u].z, fma(_691, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _687));
        float _1045 = fma(_695, cbModelParam._m0[32u].z, fma(_691, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _687));
        float _1068 = _687 + _526;
        float _1069 = _691 + _527;
        float _1070 = _695 + _528;
        float _1080 = fma(_1070, cbModelParam._m0[30u].z, fma(_1069, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1068)) - _1037;
        float _1081 = fma(_1070, cbModelParam._m0[31u].z, fma(_1069, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1068)) - _1041;
        float _1082 = fma(_1070, cbModelParam._m0[32u].z, fma(_1069, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1068)) - _1045;
        float _1086 = inversesqrt(dot(vec3(_1080, _1081, _1082), vec3(_1080, _1081, _1082)));
        float _1099 = ((_1086 * _1080) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1037 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1100 = ((_1086 * _1081) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1041 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1101 = ((_1086 * _1082) / cbModelParam._m0[35u].z) + ((((((_1045 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1103 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1099, _1100, _1101), 0.0);
        vec4 _1110 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1099, _1100, _1101), 0.0);
        vec4 _1117 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1099, _1100, _1101), 0.0);
        vec4 _1124 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1099, _1100, _1101), 0.0);
        float _1136 = exp2((_1103.w + (-0.5)) * 20.0) * 2.0;
        float _1137 = _1136 * (_1103.x + (-0.5));
        float _1138 = _1136 * (_1103.y + (-0.5));
        float _1139 = _1136 * (_1103.z + (-0.5));
        float _1146 = exp2((_1110.w + (-0.5)) * 20.0) * 2.0;
        float _1147 = _1146 * (_1110.x + (-0.5));
        float _1148 = _1146 * (_1110.y + (-0.5));
        float _1149 = _1146 * (_1110.z + (-0.5));
        float _1156 = exp2((_1117.w + (-0.5)) * 20.0) * 2.0;
        float _1157 = _1156 * (_1117.x + (-0.5));
        float _1158 = _1156 * (_1117.y + (-0.5));
        float _1159 = _1156 * (_1117.z + (-0.5));
        float _1166 = exp2((_1124.w + (-0.5)) * 20.0) * 2.0;
        float _1167 = _1166 * (_1124.x + (-0.5));
        float _1168 = _1166 * (_1124.y + (-0.5));
        float _1169 = _1166 * (_1124.z + (-0.5));
        float _1170 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1171 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1172 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1173 = _1137 * 0.5;
        float _1174 = _1147 * 0.5;
        float _1175 = _1157 * 0.5;
        float _1176 = dot(vec3(_1173, _1174, _1175), vec3(_1173, _1174, _1175));
        float _1181 = (_1176 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1176);
        float _1189 = (dot(vec3(_526, _527, _528), vec3(_1181 * _1173, _1181 * _1174, _1181 * _1175)) + 1.0) * 0.5;
        float _3310 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1198 = sqrt(((_1174 * _1174) + (_1173 * _1173)) + (_1175 * _1175)) / (_1170 + 9.9999997473787516355514526367188e-06);
        float _3321 = isnan(0.0) ? _1198 : (isnan(_1198) ? 0.0 : max(_1198, 0.0));
        float _1199 = isnan(1.0) ? _3321 : (isnan(_3321) ? 1.0 : min(_3321, 1.0));
        float _1200 = _1199 * 2.0;
        float _1204 = (1.0 - _1199) / (_1199 + 1.0);
        float _3332 = isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0));
        float _1205 = isnan(1.0) ? _3332 : (isnan(_3332) ? 1.0 : min(_3332, 1.0));
        float _1214 = ((((1.0 - _1205) * (_1200 + 2.0)) * exp2(log2(isnan(1.0) ? _3310 : (isnan(_3310) ? 1.0 : min(_3310, 1.0))) * (_1200 + 1.0))) + _1205) * _1170;
        float _1215 = _1138 * 0.5;
        float _1216 = _1148 * 0.5;
        float _1217 = _1158 * 0.5;
        float _1218 = dot(vec3(_1215, _1216, _1217), vec3(_1215, _1216, _1217));
        float _1223 = (_1218 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1218);
        float _1231 = (dot(vec3(_526, _527, _528), vec3(_1223 * _1215, _1223 * _1216, _1223 * _1217)) + 1.0) * 0.5;
        float _3343 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1240 = sqrt(((_1216 * _1216) + (_1215 * _1215)) + (_1217 * _1217)) / (_1171 + 9.9999997473787516355514526367188e-06);
        float _3354 = isnan(0.0) ? _1240 : (isnan(_1240) ? 0.0 : max(_1240, 0.0));
        float _1241 = isnan(1.0) ? _3354 : (isnan(_3354) ? 1.0 : min(_3354, 1.0));
        float _1242 = _1241 * 2.0;
        float _1246 = (1.0 - _1241) / (_1241 + 1.0);
        float _3365 = isnan(0.0) ? _1246 : (isnan(_1246) ? 0.0 : max(_1246, 0.0));
        float _1247 = isnan(1.0) ? _3365 : (isnan(_3365) ? 1.0 : min(_3365, 1.0));
        float _1256 = ((((1.0 - _1247) * (_1242 + 2.0)) * exp2(log2(isnan(1.0) ? _3343 : (isnan(_3343) ? 1.0 : min(_3343, 1.0))) * (_1242 + 1.0))) + _1247) * _1171;
        float _1257 = _1139 * 0.5;
        float _1258 = _1149 * 0.5;
        float _1259 = _1159 * 0.5;
        float _1260 = dot(vec3(_1257, _1258, _1259), vec3(_1257, _1258, _1259));
        float _1265 = (_1260 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1260);
        float _1273 = (dot(vec3(_526, _527, _528), vec3(_1265 * _1257, _1265 * _1258, _1265 * _1259)) + 1.0) * 0.5;
        float _3376 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
        float _1282 = sqrt(((_1258 * _1258) + (_1257 * _1257)) + (_1259 * _1259)) / (_1172 + 9.9999997473787516355514526367188e-06);
        float _3387 = isnan(0.0) ? _1282 : (isnan(_1282) ? 0.0 : max(_1282, 0.0));
        float _1283 = isnan(1.0) ? _3387 : (isnan(_3387) ? 1.0 : min(_3387, 1.0));
        float _1284 = _1283 * 2.0;
        float _1288 = (1.0 - _1283) / (_1283 + 1.0);
        float _3398 = isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0));
        float _1289 = isnan(1.0) ? _3398 : (isnan(_3398) ? 1.0 : min(_3398, 1.0));
        float _1298 = ((((1.0 - _1289) * (_1284 + 2.0)) * exp2(log2(isnan(1.0) ? _3376 : (isnan(_3376) ? 1.0 : min(_3376, 1.0))) * (_1284 + 1.0))) + _1289) * _1172;
        _1306 = _1139;
        _1307 = _1138;
        _1308 = _1137;
        _1309 = _1149;
        _1310 = _1148;
        _1311 = _1147;
        _1312 = _1159;
        _1313 = _1158;
        _1314 = _1157;
        _1315 = _1172;
        _1316 = _1171;
        _1317 = _1170;
        _1318 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1214 : (isnan(_1214) ? 0.0 : max(_1214, 0.0)));
        _1319 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0)));
        _1320 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)));
    }
    else
    {
        _1306 = _997;
        _1307 = _997;
        _1308 = _997;
        _1309 = _997;
        _1310 = _997;
        _1311 = _997;
        _1312 = _997;
        _1313 = _997;
        _1314 = _997;
        _1315 = _997;
        _1316 = _997;
        _1317 = _997;
        _1318 = 0.0;
        _1319 = 0.0;
        _1320 = 0.0;
    }
    float _1330 = (cbModelParam._m0[1u].x * (_1318 - _1009)) + _1009;
    float _1331 = (cbModelParam._m0[1u].x * (_1319 - _1010)) + _1010;
    float _1332 = (cbModelParam._m0[1u].x * (_1320 - _1011)) + _1011;
    float _1353 = fma(_1332, cbSceneParam._m0[89u].z, fma(_1331, cbSceneParam._m0[89u].y, _1330 * cbSceneParam._m0[89u].x));
    float _1356 = fma(_1332, cbSceneParam._m0[90u].z, fma(_1331, cbSceneParam._m0[90u].y, _1330 * cbSceneParam._m0[90u].x));
    float _1359 = fma(_1332, cbSceneParam._m0[91u].z, fma(_1331, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1330));
    float _1374 = _634 * 0.5;
    float _1375 = _635 * 0.5;
    float _1376 = _636 * 0.5;
    float _1377 = dot(vec4(_1374, _1375, _1376, 1.0), vec4(_1308, _1311, _1314, _1317));
    float _1380 = dot(vec4(_1374, _1375, _1376, 1.0), vec4(_1307, _1310, _1313, _1316));
    float _1383 = dot(vec4(_1374, _1375, _1376, 1.0), vec4(_1306, _1309, _1312, _1315));
    float _1417;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1390 = dot(vec4(_1374, _1375, _1376, 1.0), vec4(_996, _1000, _1003, _1006));
        float _1394 = dot(vec4(_1374, _1375, _1376, 1.0), vec4(_998, _1001, _1004, _1007));
        float _1398 = dot(vec4(_1374, _1375, _1376, 1.0), vec4(_999, _1002, _1005, _1008));
        float _1405 = dot(vec4(cbModelParam._m0[39u]), vec4(_1374, _1375, _1376, 1.0));
        _1417 = dot(vec3(isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0)), isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0)), isnan(0.0) ? _1390 : (isnan(_1390) ? 0.0 : max(_1390, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1405) ? 0.0 : (isnan(0.0) ? _1405 : max(0.0, _1405))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1417 = 1.0;
    }
    float _1428;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1419 = dot(vec4(cbModelParam._m0[40u]), vec4(_1374, _1375, _1376, 1.0));
        _1428 = dot(vec3(isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0)), isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0)), isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1419) ? 0.0 : (isnan(0.0) ? _1419 : max(0.0, _1419))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1428 = 1.0;
    }
    float _1432 = (_1428 * cbModelParam._m0[1u].x) + (_1417 * (1.0 - cbModelParam._m0[1u].x));
    float _1442 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _529);
    float _1443 = isnan(_1442) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1442 : min(cbModelParam._m0[25u].z, _1442));
    float _1525;
    float _1527;
    float _1529;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1492 = fma(_695, cbModelParam._m0[13u].z, fma(_691, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _687)) + cbModelParam._m0[13u].w;
        float _1496 = fma(_695, cbModelParam._m0[14u].z, fma(_691, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _687)) + cbModelParam._m0[14u].w;
        float _1500 = fma(_695, cbModelParam._m0[15u].z, fma(_691, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _687)) + cbModelParam._m0[15u].w;
        float _1503 = fma(_636, cbModelParam._m0[13u].z, fma(_635, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _634));
        float _1506 = fma(_636, cbModelParam._m0[14u].z, fma(_635, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _634));
        float _1509 = fma(_636, cbModelParam._m0[15u].z, fma(_635, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _634));
        float _1537;
        if (_1503 > 0.0)
        {
            _1537 = abs((1.0 - _1492) / _1503);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1503 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1492 + 1.0) / _1503);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1537 = frontier_phi_22_20_ladder;
        }
        float _1884;
        if (_1506 > 0.0)
        {
            _1884 = abs((1.0 - _1496) / _1506);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1506 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1496 + 1.0) / _1506);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1884 = frontier_phi_31_27_ladder;
        }
        float _2184;
        if (_1509 > 0.0)
        {
            _2184 = abs((1.0 - _1500) / _1509);
        }
        else
        {
            float frontier_phi_45_38_ladder;
            if (_1509 < 0.0)
            {
                frontier_phi_45_38_ladder = abs((_1500 + 1.0) / _1509);
            }
            else
            {
                frontier_phi_45_38_ladder = 5000.0;
            }
            _2184 = frontier_phi_45_38_ladder;
        }
        float _2186 = isnan(_1884) ? _1537 : (isnan(_1537) ? _1884 : min(_1537, _1884));
        float _2187 = isnan(_2184) ? _2186 : (isnan(_2186) ? _2184 : min(_2186, _2184));
        float _2191 = (_2187 * _1503) + _1492;
        float _2192 = (_2187 * _1506) + _1496;
        float _2193 = (_2187 * _1509) + _1500;
        float _2194 = _2187 * 9.9999997473787516355514526367188e-05;
        float _2195 = (-1.0) - _2194;
        float _2197 = _2194 + 1.0;
        float frontier_phi_21_45_ladder;
        float frontier_phi_21_45_ladder_1;
        float frontier_phi_21_45_ladder_2;
        if ((_2193 > _2197) || ((_2193 < _2195) || ((_2192 > _2197) || ((_2192 < _2195) || ((_2191 < _2195) || (_2191 > _2197))))))
        {
            frontier_phi_21_45_ladder = 0.0;
            frontier_phi_21_45_ladder_1 = 0.0;
            frontier_phi_21_45_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2319 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2193, cbModelParam._m0[9u].z, fma(_2192, cbModelParam._m0[9u].y, _2191 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2193, cbModelParam._m0[10u].z, fma(_2192, cbModelParam._m0[10u].y, _2191 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2193, cbModelParam._m0[11u].z, fma(_2192, cbModelParam._m0[11u].y, _2191 * cbModelParam._m0[11u].x))), _1443);
            frontier_phi_21_45_ladder = _2319.z * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_1 = _2319.y * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_2 = _2319.x * cbModelParam._m0[1u].y;
        }
        _1525 = frontier_phi_21_45_ladder_2;
        _1527 = frontier_phi_21_45_ladder_1;
        _1529 = frontier_phi_21_45_ladder;
    }
    else
    {
        vec4 _1513 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_634, _635, _636), _1443);
        _1525 = _1513.x * cbModelParam._m0[1u].y;
        _1527 = _1513.y * cbModelParam._m0[1u].y;
        _1529 = _1513.z * cbModelParam._m0[1u].y;
    }
    float _1533 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _529);
    float _1534 = isnan(_1533) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1533 : min(cbModelParam._m0[25u].w, _1533));
    float _1624;
    float _1626;
    float _1628;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1588 = fma(_695, cbModelParam._m0[21u].z, fma(_691, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _687)) + cbModelParam._m0[21u].w;
        float _1592 = fma(_695, cbModelParam._m0[22u].z, fma(_691, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _687)) + cbModelParam._m0[22u].w;
        float _1596 = fma(_695, cbModelParam._m0[23u].z, fma(_691, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _687)) + cbModelParam._m0[23u].w;
        float _1599 = fma(_636, cbModelParam._m0[21u].z, fma(_635, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _634));
        float _1602 = fma(_636, cbModelParam._m0[22u].z, fma(_635, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _634));
        float _1605 = fma(_636, cbModelParam._m0[23u].z, fma(_635, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _634));
        float _1889;
        if (_1599 > 0.0)
        {
            _1889 = abs((1.0 - _1588) / _1599);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1599 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1588 + 1.0) / _1599);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1889 = frontier_phi_33_29_ladder;
        }
        float _2210;
        if (_1602 > 0.0)
        {
            _2210 = abs((1.0 - _1592) / _1602);
        }
        else
        {
            float frontier_phi_47_40_ladder;
            if (_1602 < 0.0)
            {
                frontier_phi_47_40_ladder = abs((_1592 + 1.0) / _1602);
            }
            else
            {
                frontier_phi_47_40_ladder = 5000.0;
            }
            _2210 = frontier_phi_47_40_ladder;
        }
        float _2379;
        if (_1605 > 0.0)
        {
            _2379 = abs((1.0 - _1596) / _1605);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1605 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1596 + 1.0) / _1605);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2379 = frontier_phi_61_56_ladder;
        }
        float _2381 = isnan(_2210) ? _1889 : (isnan(_1889) ? _2210 : min(_1889, _2210));
        float _2382 = isnan(_2379) ? _2381 : (isnan(_2381) ? _2379 : min(_2381, _2379));
        float _2386 = (_2382 * _1599) + _1588;
        float _2387 = (_2382 * _1602) + _1592;
        float _2388 = (_2382 * _1605) + _1596;
        float _2389 = _2382 * 9.9999997473787516355514526367188e-05;
        float _2390 = (-1.0) - _2389;
        float _2392 = _2389 + 1.0;
        float frontier_phi_30_61_ladder;
        float frontier_phi_30_61_ladder_1;
        float frontier_phi_30_61_ladder_2;
        if ((_2388 > _2392) || ((_2388 < _2390) || ((_2387 > _2392) || ((_2387 < _2390) || ((_2386 < _2390) || (_2386 > _2392))))))
        {
            frontier_phi_30_61_ladder = 0.0;
            frontier_phi_30_61_ladder_1 = 0.0;
            frontier_phi_30_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2621 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2388, cbModelParam._m0[17u].z, fma(_2387, cbModelParam._m0[17u].y, _2386 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2388, cbModelParam._m0[18u].z, fma(_2387, cbModelParam._m0[18u].y, _2386 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2388, cbModelParam._m0[19u].z, fma(_2387, cbModelParam._m0[19u].y, _2386 * cbModelParam._m0[19u].x))), _1534);
            frontier_phi_30_61_ladder = _2621.z * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_1 = _2621.y * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_2 = _2621.x * cbModelParam._m0[1u].z;
        }
        _1624 = frontier_phi_30_61_ladder_2;
        _1626 = frontier_phi_30_61_ladder_1;
        _1628 = frontier_phi_30_61_ladder;
    }
    else
    {
        vec4 _1608 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_634, _635, _636), _1534);
        _1624 = _1608.x * cbModelParam._m0[1u].z;
        _1626 = _1608.y * cbModelParam._m0[1u].z;
        _1628 = _1608.z * cbModelParam._m0[1u].z;
    }
    float _1640 = ((((1.0 - _655) * ((_642 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_655 * _642)) * _626;
    float _1641 = _1640 * ((cbModelParam._m0[1u].w * (_1624 - _1525)) + _1525);
    float _1642 = _1640 * ((cbModelParam._m0[1u].w * (_1626 - _1527)) + _1527);
    float _1643 = _1640 * ((cbModelParam._m0[1u].w * (_1628 - _1529)) + _1529);
    float _1646 = fma(_1643, cbSceneParam._m0[89u].z, fma(_1642, cbSceneParam._m0[89u].y, _1641 * cbSceneParam._m0[89u].x));
    float _1649 = fma(_1643, cbSceneParam._m0[90u].z, fma(_1642, cbSceneParam._m0[90u].y, _1641 * cbSceneParam._m0[90u].x));
    float _1652 = fma(_1643, cbSceneParam._m0[91u].z, fma(_1642, cbSceneParam._m0[91u].y, _1641 * cbSceneParam._m0[91u].x));
    uvec4 _1662 = floatBitsToUint(cbInstanceData._m0[_600 + 5u]);
    uint _1664 = _1662.x * 14u;
    uint _1665 = _1664 + 13u;
    float _1670 = _626 + (-1.0);
    float _1673 = (cbLight._m0[_1665].x * _1670) + 1.0;
    float _1674 = (cbLight._m0[_1665].y * _1670) + 1.0;
    uint _1675 = _1664 + 5u;
    float _1681 = isnan(1.0) ? _1674 : (isnan(_1674) ? 1.0 : min(_1674, 1.0));
    uint _1685 = _1664 + 4u;
    float _1691 = isnan(1.0) ? _1673 : (isnan(_1673) ? 1.0 : min(_1673, 1.0));
    uint _1695 = _1664 | 1u;
    float _1706 = dot(vec3(cbLight._m0[_1664].xyz), vec3(_526, _527, _528));
    float _1709 = dot(vec3(cbLight._m0[_1695].xyz), vec3(_526, _527, _528));
    float _3534 = isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0));
    float _3545 = isnan(0.0) ? _1709 : (isnan(_1709) ? 0.0 : max(_1709, 0.0));
    float _1714 = (isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0))) * 0.3183098733425140380859375;
    float _1716 = (isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0))) * 0.3183098733425140380859375;
    float _1723 = ((cbLight._m0[_1675].x * _1681) * _1716) + ((cbLight._m0[_1685].x * _1691) * _1714);
    float _1724 = ((_1681 * cbLight._m0[_1675].y) * _1716) + ((_1691 * cbLight._m0[_1685].y) * _1714);
    float _1725 = ((_1681 * cbLight._m0[_1675].z) * _1716) + ((_1691 * cbLight._m0[_1685].z) * _1714);
    uint _1727 = _1664 + 8u;
    float _1740 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1664].w)) * _529) * 0.949999988079071044921875);
    float _1741 = _1740 * _1740;
    float _1742 = cbLight._m0[_1664].x + _553;
    float _1743 = cbLight._m0[_1664].y + _554;
    float _1744 = cbLight._m0[_1664].z + _555;
    float _1748 = inversesqrt(dot(vec3(_1742, _1743, _1744), vec3(_1742, _1743, _1744)));
    float _1749 = _1748 * _1742;
    float _1750 = _1748 * _1743;
    float _1751 = _1748 * _1744;
    float _1752 = dot(vec3(_526, _527, _528), vec3(cbLight._m0[_1664].xyz));
    float _3556 = isnan(0.0) ? _1752 : (isnan(_1752) ? 0.0 : max(_1752, 0.0));
    float _1755 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
    float _3567 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _1756 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
    float _1757 = dot(vec3(_526, _527, _528), vec3(_1749, _1750, _1751));
    float _3578 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
    float _1760 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
    float _1761 = dot(vec3(cbLight._m0[_1664].xyz), vec3(_1749, _1750, _1751));
    float _3589 = isnan(0.0) ? _1761 : (isnan(_1761) ? 0.0 : max(_1761, 0.0));
    float _1765 = _1741 * _1741;
    float _1769 = ((_1760 * _1760) * (_1765 + (-1.0))) + 1.0;
    float _1780 = (exp2(log2(1.0 - (isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1781 = 1.0 - _1741;
    float _1792 = (0.5 / (((_1756 * ((_1755 * _1781) + _1741)) + 9.9999999392252902907785028219223e-09) + (((_1756 * _1781) + _1741) * _1755))) * _1755;
    float _3600 = isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0));
    float _1794 = (isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0))) * (_1765 / ((_1769 * _1769) * 3.141590118408203125));
    uint _1805 = _1664 + 9u;
    float _1816 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1695].w)) * _529) * 0.949999988079071044921875);
    float _1817 = _1816 * _1816;
    float _1818 = cbLight._m0[_1695].x + _553;
    float _1819 = cbLight._m0[_1695].y + _554;
    float _1820 = cbLight._m0[_1695].z + _555;
    float _1824 = inversesqrt(dot(vec3(_1818, _1819, _1820), vec3(_1818, _1819, _1820)));
    float _1825 = _1824 * _1818;
    float _1826 = _1824 * _1819;
    float _1827 = _1824 * _1820;
    float _1828 = dot(vec3(_526, _527, _528), vec3(cbLight._m0[_1695].xyz));
    float _3611 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
    float _1831 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
    float _1832 = dot(vec3(_526, _527, _528), vec3(_1825, _1826, _1827));
    float _3622 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
    float _1835 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
    float _1836 = dot(vec3(cbLight._m0[_1695].xyz), vec3(_1825, _1826, _1827));
    float _3633 = isnan(0.0) ? _1836 : (isnan(_1836) ? 0.0 : max(_1836, 0.0));
    float _1840 = _1817 * _1817;
    float _1844 = ((_1835 * _1835) * (_1840 + (-1.0))) + 1.0;
    float _1853 = (exp2(log2(1.0 - (isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1854 = 1.0 - _1817;
    float _1864 = (0.5 / (((_1756 * ((_1831 * _1854) + _1817)) + 9.9999999392252902907785028219223e-09) + (((_1756 * _1854) + _1817) * _1831))) * _1831;
    float _3644 = isnan(0.0) ? _1864 : (isnan(_1864) ? 0.0 : max(_1864, 0.0));
    float _1866 = (isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0))) * (_1840 / ((_1844 * _1844) * 3.141590118408203125));
    float _1876 = (((_1853 * cbLight._m0[_1805].x) * _1866) * _1681) + (((_1780 * cbLight._m0[_1727].x) * _1794) * _1691);
    float _1877 = (((_1853 * cbLight._m0[_1805].y) * _1866) * _1681) + (((_1780 * cbLight._m0[_1727].y) * _1794) * _1691);
    float _1878 = (((_1853 * cbLight._m0[_1805].z) * _1866) * _1681) + (((_1780 * cbLight._m0[_1727].z) * _1794) * _1691);
    float _1993;
    float _1995;
    float _1997;
    float _1999;
    float _2001;
    float _2003;
    if (_1662.y == 0u)
    {
        float _1933 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1934 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1933;
        float _1935 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1933;
        float _1936 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1933;
        uvec4 _1948 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1949 = _1948.x;
        uint _1960 = uint((float(_1948.y) * floor(float(uint(cbSceneParam._m0[85u].y * _562) / _1949))) + floor(float(uint(cbSceneParam._m0[85u].x * _561) / _1949)));
        float _1970 = (log2(_1936 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1971 = isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0));
        uint _1974 = uint(isnan(14.0) ? _1971 : (isnan(_1971) ? 14.0 : min(_1971, 14.0)));
        uvec4 _1979 = texelFetch(g_lightClusterGridBuffer, int(((_1974 << 2u) + (_1960 << 6u)) >> 2u));
        uint _1980 = _1979.x;
        uint _1981 = _1948.z;
        float _2071;
        float _2073;
        float _2075;
        float _2077;
        float _2079;
        float _2081;
        if (((((1u << ((_1981 >> 4u) & 15u)) + 4294967295u) & _1980) == 0u) || ((_1981 & 240u) == 0u))
        {
            _2071 = 0.0;
            _2073 = 0.0;
            _2075 = 0.0;
            _2077 = 0.0;
            _2079 = 0.0;
            _2081 = 0.0;
        }
        else
        {
            float _2072;
            float _2074;
            float _2076;
            float _2078;
            float _2080;
            float _2082;
            float _2247 = 0.0;
            float _2248 = 0.0;
            float _2249 = 0.0;
            float _2250 = 0.0;
            float _2251 = 0.0;
            float _2252 = 0.0;
            uint _2253 = 0u;
            uint _2262;
            bool _2263;
            for (;;)
            {
                _2262 = texelFetch(g_lightClassification, int((((_1974 << 5u) + (_1960 << 9u)) + (_2253 << 2u)) >> 2u)).x;
                _2263 = _2262 == 0u;
                float frontier_phi_58_pred;
                float frontier_phi_58_pred_1;
                float frontier_phi_58_pred_2;
                float frontier_phi_58_pred_3;
                float frontier_phi_58_pred_4;
                float frontier_phi_58_pred_5;
                if (_2263)
                {
                    frontier_phi_58_pred = _2248;
                    frontier_phi_58_pred_1 = _2252;
                    frontier_phi_58_pred_2 = _2251;
                    frontier_phi_58_pred_3 = _2250;
                    frontier_phi_58_pred_4 = _2249;
                    frontier_phi_58_pred_5 = _2247;
                }
                else
                {
                    float _2422;
                    float _2423;
                    float _2424;
                    float _2425;
                    float _2426;
                    float _2427;
                    uint _2428;
                    _2422 = _2247;
                    _2423 = _2248;
                    _2424 = _2249;
                    _2425 = _2250;
                    _2426 = _2251;
                    _2427 = _2252;
                    _2428 = _2262;
                    float _2328;
                    float _2329;
                    float _2330;
                    float _2331;
                    float _2332;
                    float _2333;
                    for (;;)
                    {
                        uint _2432 = uint(findLSB(_2428)) + (_2253 << 5u);
                        uint _2429 = (_2428 + 4294967295u) & _2428;
                        uint _2434 = _2432 * 48u;
                        vec4 _2448 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2434)).x, texelFetch(g_PointLightRenderingBuffer, int(_2434 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2434 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2434 + 3u)).x));
                        uint _2454 = (_2432 * 48u) + 4u;
                        vec4 _2467 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2454)).x, texelFetch(g_PointLightRenderingBuffer, int(_2454 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2454 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2454 + 3u)).x));
                        uint _2473 = (_2432 * 48u) + 8u;
                        vec3 _2484 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2473)).x, texelFetch(g_PointLightRenderingBuffer, int(_2473 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2473 + 2u)).x));
                        float _2488 = _2448.x - _1934;
                        float _2489 = _2448.y - _1935;
                        float _2490 = _2448.z - _1936;
                        float _2491 = dot(vec3(_2488, _2489, _2490), vec3(_2488, _2489, _2490));
                        float _2494 = inversesqrt(_2491);
                        float _2495 = _2494 * _2488;
                        float _2496 = _2494 * _2489;
                        float _2497 = _2494 * _2490;
                        float _2498 = dot(vec3(_581, _584, _587), vec3(_2495, _2496, _2497));
                        float _2503 = 1.0 - (_2491 * _2448.w);
                        float _3665 = isnan(0.0) ? _2503 : (isnan(_2503) ? 0.0 : max(_2503, 0.0));
                        float _2504 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
                        float _2505 = sqrt(_2491) * _2467.w;
                        float _2508 = 1.39999997615814208984375 / (_2505 + 1.39999997615814208984375);
                        float _2509 = _2508 * _2508;
                        float _2512 = ((1.0 - _2509) * _2498) + _2509;
                        float _2515 = _2505 * _2505;
                        float _2519 = ((isnan(0.0) ? _2512 : (isnan(_2512) ? 0.0 : max(_2512, 0.0))) * _2504) / ((_2515 * 0.699999988079071044921875) + 1.0);
                        float _2523 = (-0.0) - _1934;
                        float _2524 = (-0.0) - _1935;
                        float _2525 = (-0.0) - _1936;
                        float _2529 = inversesqrt(dot(vec3(_2523, _2524, _2525), vec3(_2523, _2524, _2525)));
                        float _2530 = _2529 * _2523;
                        float _2531 = _2529 * _2524;
                        float _2532 = _2529 * _2525;
                        float _2540 = exp2(log2(1.0 / ((_2515 * 3.5) + 5.0)) * 0.25);
                        float _2541 = 1.0 - _642;
                        float _2548 = sqrt(1.0 - ((1.0 - (_2541 * _2541)) * (1.0 - (_2540 * _2540))));
                        float _2549 = _2548 * _2548;
                        float _2550 = _2549 * _2549;
                        float _2551 = _2530 + _2495;
                        float _2552 = _2531 + _2496;
                        float _2553 = _2532 + _2497;
                        float _2557 = inversesqrt(dot(vec3(_2551, _2552, _2553), vec3(_2551, _2552, _2553)));
                        float _2561 = dot(vec3(_581, _584, _587), vec3(_2530, _2531, _2532));
                        float _3681 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
                        float _2564 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
                        float _2565 = dot(vec3(_581, _584, _587), vec3(_2557 * _2551, _2557 * _2552, _2557 * _2553));
                        float _3692 = isnan(0.0) ? _2565 : (isnan(_2565) ? 0.0 : max(_2565, 0.0));
                        float _2568 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
                        float _2572 = ((_2568 * _2568) * (_2550 + (-1.0))) + 1.0;
                        float _2573 = _2508 * _2549;
                        float _2574 = _2573 * _2573;
                        float _2577 = ((1.0 - _2574) * _2498) + _2574;
                        float _3703 = isnan(0.0) ? _2577 : (isnan(_2577) ? 0.0 : max(_2577, 0.0));
                        float _2578 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
                        float _2579 = 1.0 - _2549;
                        float _2589 = (0.5 / (((_2578 * ((_2564 * _2579) + _2549)) + 9.9999999392252902907785028219223e-09) + (((_2578 * _2579) + _2549) * _2564))) * _2578;
                        float _3714 = isnan(0.0) ? _2589 : (isnan(_2589) ? 0.0 : max(_2589, 0.0));
                        float _2600 = (((_2550 * 3.1415927410125732421875) * (isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0)))) / ((_2572 * _2572) * ((_2515 * 2.1991131305694580078125) + 3.141590118408203125))) * _2504;
                        _2331 = (_2519 * _2467.x) + _2425;
                        _2332 = (_2519 * _2467.y) + _2426;
                        _2333 = (_2519 * _2467.z) + _2427;
                        _2328 = (_2600 * _2484.x) + _2422;
                        _2329 = (_2600 * _2484.y) + _2423;
                        _2330 = (_2600 * _2484.z) + _2424;
                        if (_2429 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2422 = _2328;
                            _2423 = _2329;
                            _2424 = _2330;
                            _2425 = _2331;
                            _2426 = _2332;
                            _2427 = _2333;
                            _2428 = _2429;
                        }
                    }
                    frontier_phi_58_pred = _2329;
                    frontier_phi_58_pred_1 = _2333;
                    frontier_phi_58_pred_2 = _2332;
                    frontier_phi_58_pred_3 = _2331;
                    frontier_phi_58_pred_4 = _2330;
                    frontier_phi_58_pred_5 = _2328;
                }
                _2074 = frontier_phi_58_pred;
                _2082 = frontier_phi_58_pred_1;
                _2080 = frontier_phi_58_pred_2;
                _2078 = frontier_phi_58_pred_3;
                _2076 = frontier_phi_58_pred_4;
                _2072 = frontier_phi_58_pred_5;
                uint _2254 = _2253 + 1u;
                if (_2254 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2247 = _2072;
                    _2248 = _2074;
                    _2249 = _2076;
                    _2250 = _2078;
                    _2251 = _2080;
                    _2252 = _2082;
                    _2253 = _2254;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2071 = _2072;
            _2073 = _2074;
            _2075 = _2076;
            _2077 = _2078;
            _2079 = _2080;
            _2081 = _2082;
        }
        uvec4 _2085 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2086 = _2085.z;
        uint _2088 = (_2086 >> 8u) & 15u;
        float _2215;
        float _2217;
        float _2219;
        float _2221;
        float _2223;
        float _2225;
        if (((4294967295u << _2088) & _1980) == 0u)
        {
            _2215 = _2071;
            _2217 = _2073;
            _2219 = _2075;
            _2221 = _2077;
            _2223 = _2079;
            _2225 = _2081;
        }
        else
        {
            float _2240 = inversesqrt(dot(vec3(_1934, _1935, _1936), vec3(_1934, _1935, _1936)));
            float _2241 = _2240 * _1934;
            float _2242 = _2240 * _1935;
            float _2243 = _2240 * _1936;
            float frontier_phi_49_50_ladder;
            float frontier_phi_49_50_ladder_1;
            float frontier_phi_49_50_ladder_2;
            float frontier_phi_49_50_ladder_3;
            float frontier_phi_49_50_ladder_4;
            float frontier_phi_49_50_ladder_5;
            if (_2088 < ((_2086 >> 12u) & 15u))
            {
                float _2216;
                float _2218;
                float _2220;
                float _2222;
                float _2224;
                float _2226;
                float _2405 = _2071;
                float _2406 = _2073;
                float _2407 = _2075;
                float _2408 = _2077;
                float _2409 = _2079;
                float _2410 = _2081;
                uint _2411 = _2088;
                uint _2420;
                bool _2421;
                for (;;)
                {
                    _2420 = texelFetch(g_lightClassification, int((((_1974 << 5u) + (_1960 << 9u)) + (_2411 << 2u)) >> 2u)).x;
                    _2421 = _2420 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2421)
                    {
                        frontier_phi_67_pred = _2410;
                        frontier_phi_67_pred_1 = _2409;
                        frontier_phi_67_pred_2 = _2408;
                        frontier_phi_67_pred_3 = _2407;
                        frontier_phi_67_pred_4 = _2406;
                        frontier_phi_67_pred_5 = _2405;
                    }
                    else
                    {
                        float _2626;
                        float _2627;
                        float _2628;
                        float _2629;
                        float _2630;
                        float _2631;
                        float _2919;
                        float _2920;
                        float _2921;
                        float _2922;
                        float _2923;
                        float _2924;
                        float _2639 = _2405;
                        float _2640 = _2406;
                        float _2641 = _2407;
                        float _2642 = _2408;
                        float _2643 = _2409;
                        float _2644 = _2410;
                        uint _2645 = _2420;
                        uint _2646;
                        vec4 _2671;
                        float _2672;
                        vec4 _2687;
                        vec3 _2699;
                        vec4 _2714;
                        vec4 _2729;
                        float _2775;
                        bool _2776;
                        for (;;)
                        {
                            uint _2656 = ((_2411 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2645));
                            _2646 = (_2645 + 4294967295u) & _2645;
                            uint _2658 = _2656 * 40u;
                            _2671 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2658)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2658 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2658 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2658 + 3u)).x));
                            _2672 = _2671.w;
                            uint _2674 = (_2656 * 40u) + 4u;
                            _2687 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2674)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2674 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2674 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2674 + 3u)).x));
                            uint _2689 = (_2656 * 40u) + 8u;
                            _2699 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2689)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2689 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2689 + 2u)).x));
                            uint _2701 = (_2656 * 40u) + 16u;
                            _2714 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2701)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2701 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2701 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2701 + 3u)).x));
                            uint _2716 = (_2656 * 40u) + 20u;
                            _2729 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2716)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2716 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2716 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2716 + 3u)).x));
                            uint _2731 = (_2656 * 40u) + 24u;
                            vec4 _2744 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2731)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2731 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2731 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2731 + 3u)).x));
                            uint _2750 = (_2656 * 40u) + 28u;
                            vec4 _2763 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2750)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2750 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2750 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2750 + 3u)).x));
                            _2775 = fma(_1936, _2763.z, fma(_1935, _2763.y, _2763.x * _1934)) + _2763.w;
                            _2776 = !((fma(_1936, _2744.z, fma(_1935, _2744.y, _2744.x * _1934)) + _2744.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2776)
                            {
                                float _2803 = _2671.x - _1934;
                                float _2804 = _2671.y - _1935;
                                float _2805 = _2671.z - _1936;
                                float _2806 = dot(vec3(_2803, _2804, _2805), vec3(_2803, _2804, _2805));
                                float _2809 = inversesqrt(_2806);
                                float _2810 = _2809 * _2803;
                                float _2811 = _2809 * _2804;
                                float _2812 = _2809 * _2805;
                                float _2816 = 1.0 - (_2806 / (_2672 * _2672));
                                float _3725 = isnan(0.0) ? _2816 : (isnan(_2816) ? 0.0 : max(_2816, 0.0));
                                float _2817 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
                                float _2821 = sqrt(_2806) * _2687.w;
                                float _2823 = 1.39999997615814208984375 / (_2821 + 1.39999997615814208984375);
                                float _2824 = _2823 * _2823;
                                float _2827 = ((1.0 - _2824) * dot(vec3(_2810, _2811, _2812), vec3(_581, _584, _587))) + _2824;
                                float _2830 = _2821 * _2821;
                                float _2834 = (fma(_1936, _2714.z, fma(_1935, _2714.y, _2714.x * _1934)) + _2714.w) / _2775;
                                float _2835 = (fma(_1936, _2729.z, fma(_1935, _2729.y, _2729.x * _1934)) + _2729.w) / _2775;
                                float _2839 = 1.0 - dot(vec2(_2834, _2835), vec2(_2834, _2835));
                                float _3741 = isnan(0.0) ? _2839 : (isnan(_2839) ? 0.0 : max(_2839, 0.0));
                                float _2840 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
                                float _2841 = _2840 * (((isnan(0.0) ? _2827 : (isnan(_2827) ? 0.0 : max(_2827, 0.0))) * _2817) / ((_2830 * 0.699999988079071044921875) + 1.0));
                                float _2853 = exp2(log2(1.0 / ((_2830 * 3.5) + 5.0)) * 0.25);
                                float _2854 = 1.0 - _642;
                                float _2861 = sqrt(1.0 - ((1.0 - (_2854 * _2854)) * (1.0 - (_2853 * _2853))));
                                float _2862 = _2861 * _2861;
                                float _2863 = _2862 * _2862;
                                float _2864 = _2810 - _2241;
                                float _2865 = _2811 - _2242;
                                float _2866 = _2812 - _2243;
                                float _2870 = inversesqrt(dot(vec3(_2864, _2865, _2866), vec3(_2864, _2865, _2866)));
                                float _2874 = dot(vec3(_581, _584, _587), vec3((-0.0) - _2241, (-0.0) - _2242, (-0.0) - _2243));
                                float _3752 = isnan(0.0) ? _2874 : (isnan(_2874) ? 0.0 : max(_2874, 0.0));
                                float _2877 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
                                float _2878 = dot(vec3(_581, _584, _587), vec3(_2870 * _2864, _2870 * _2865, _2870 * _2866));
                                float _3763 = isnan(0.0) ? _2878 : (isnan(_2878) ? 0.0 : max(_2878, 0.0));
                                float _2881 = isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0));
                                float _2885 = ((_2881 * _2881) * (_2863 + (-1.0))) + 1.0;
                                float _2886 = _2823 * _2862;
                                float _2887 = _2886 * _2886;
                                float _2893 = ((1.0 - _2887) * dot(vec3(_581, _584, _587), vec3(_2810, _2811, _2812))) + _2887;
                                float _3774 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0));
                                float _2894 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
                                float _2895 = 1.0 - _2862;
                                float _2905 = (0.5 / (((_2894 * ((_2877 * _2895) + _2862)) + 9.9999999392252902907785028219223e-09) + (((_2894 * _2895) + _2862) * _2877))) * _2894;
                                float _3785 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0));
                                float _2915 = (_2840 * _2817) * (((_2863 * 3.1415927410125732421875) * (isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0)))) / ((_2885 * _2885) * ((_2830 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _2841 * _2687.z;
                                frontier_phi_73_pred_1 = _2841 * _2687.y;
                                frontier_phi_73_pred_2 = _2841 * _2687.x;
                                frontier_phi_73_pred_3 = _2915 * _2699.z;
                                frontier_phi_73_pred_4 = _2915 * _2699.y;
                                frontier_phi_73_pred_5 = _2915 * _2699.x;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2924 = frontier_phi_73_pred;
                            _2923 = frontier_phi_73_pred_1;
                            _2922 = frontier_phi_73_pred_2;
                            _2921 = frontier_phi_73_pred_3;
                            _2920 = frontier_phi_73_pred_4;
                            _2919 = frontier_phi_73_pred_5;
                            _2629 = _2922 + _2642;
                            _2630 = _2923 + _2643;
                            _2631 = _2924 + _2644;
                            _2626 = _2919 + _2639;
                            _2627 = _2920 + _2640;
                            _2628 = _2921 + _2641;
                            if (_2646 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2639 = _2626;
                                _2640 = _2627;
                                _2641 = _2628;
                                _2642 = _2629;
                                _2643 = _2630;
                                _2644 = _2631;
                                _2645 = _2646;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2631;
                        frontier_phi_67_pred_1 = _2630;
                        frontier_phi_67_pred_2 = _2629;
                        frontier_phi_67_pred_3 = _2628;
                        frontier_phi_67_pred_4 = _2627;
                        frontier_phi_67_pred_5 = _2626;
                    }
                    _2226 = frontier_phi_67_pred;
                    _2224 = frontier_phi_67_pred_1;
                    _2222 = frontier_phi_67_pred_2;
                    _2220 = frontier_phi_67_pred_3;
                    _2218 = frontier_phi_67_pred_4;
                    _2216 = frontier_phi_67_pred_5;
                    uint _2412 = _2411 + 1u;
                    if (_2412 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2405 = _2216;
                        _2406 = _2218;
                        _2407 = _2220;
                        _2408 = _2222;
                        _2409 = _2224;
                        _2410 = _2226;
                        _2411 = _2412;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_49_50_ladder = _2222;
                frontier_phi_49_50_ladder_1 = _2226;
                frontier_phi_49_50_ladder_2 = _2224;
                frontier_phi_49_50_ladder_3 = _2220;
                frontier_phi_49_50_ladder_4 = _2218;
                frontier_phi_49_50_ladder_5 = _2216;
            }
            else
            {
                frontier_phi_49_50_ladder = _2077;
                frontier_phi_49_50_ladder_1 = _2081;
                frontier_phi_49_50_ladder_2 = _2079;
                frontier_phi_49_50_ladder_3 = _2075;
                frontier_phi_49_50_ladder_4 = _2073;
                frontier_phi_49_50_ladder_5 = _2071;
            }
            _2215 = frontier_phi_49_50_ladder_5;
            _2217 = frontier_phi_49_50_ladder_4;
            _2219 = frontier_phi_49_50_ladder_3;
            _2221 = frontier_phi_49_50_ladder;
            _2223 = frontier_phi_49_50_ladder_2;
            _2225 = frontier_phi_49_50_ladder_1;
        }
        float _2230 = isnan(1.0) ? _626 : (isnan(_626) ? 1.0 : min(_626, 1.0));
        _1993 = (_2230 * _2221) + _1723;
        _1995 = (_2230 * _2223) + _1724;
        _1997 = (_2230 * _2225) + _1725;
        _1999 = ((_2215 * 0.039999999105930328369140625) * _2230) + _1876;
        _2001 = ((_2217 * 0.039999999105930328369140625) * _2230) + _1877;
        _2003 = ((_2219 * 0.039999999105930328369140625) * _2230) + _1878;
    }
    else
    {
        _1993 = _1723;
        _1995 = _1724;
        _1997 = _1725;
        _1999 = _1876;
        _2001 = _1877;
        _2003 = _1878;
    }
    float _3801 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _3812 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _3823 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _2020 = ((isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) * (_1993 + ((isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0))) * _626))) + ((_1999 + ((isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0))) * _1432)) * cbPerFrame._m0[3u].x);
    float _2021 = ((isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0))) * (_1995 + ((isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0))) * _626))) + ((_2001 + ((isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0))) * _1432)) * cbPerFrame._m0[3u].x);
    float _2022 = ((isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0))) * (_1997 + ((isnan(0.0) ? _1359 : (isnan(_1359) ? 0.0 : max(_1359, 0.0))) * _626))) + ((_2003 + ((isnan(0.0) ? _1652 : (isnan(_1652) ? 0.0 : max(_1652, 0.0))) * _1432)) * cbPerFrame._m0[3u].x);
    uint _2026 = _600 + 6u;
    float _2034 = _561 / cbSceneParam._m0[86u].x;
    float _2035 = _562 / cbSceneParam._m0[86u].y;
    vec4 _2049 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2034, _2035, (log2((isnan(cbSceneParam._m0[77u].w) ? _548 : (isnan(_548) ? cbSceneParam._m0[77u].w : min(_548, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2051 = _2049.x;
    float _2052 = _2049.y;
    float _2053 = _2049.z;
    float _2054 = _2049.w;
    float _2134;
    float _2136;
    float _2138;
    float _2140;
    if (_548 > cbSceneParam._m0[78u].w)
    {
        float _2096 = isnan(_548) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _548 : min(cbSceneParam._m0[80u].w, _548));
        float _2097 = _2096 / _548;
        float _2108 = _2097 * _261;
        float _2109 = _262 * _2097;
        float _2110 = (-0.0) - _2109;
        float _2111 = _2097 * _263;
        float _2113 = (cbSceneParam._m0[77u].w * _2110) / _2096;
        float _2114 = _2113 + cbSceneParam._m0[79u].w;
        float _2115 = cbSceneParam._m0[79u].w - _2109;
        float _2121 = sqrt(((_2108 * _2108) + (_2109 * _2109)) + (_2111 * _2111));
        float _2124 = (1.0 - (cbSceneParam._m0[77u].w / _2096)) * _2121;
        float _2130 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2132 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2341;
        if (abs((_2110 - _2113) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2341 = ((((_2114 > 0.0) ? exp2(_2130 * _2114) : (2.0 - exp2(_2132 * _2114))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2124;
        }
        else
        {
            float _2276 = 1.0 / cbSceneParam._m0[80u].x;
            float _2277 = isnan(_2115) ? _2114 : (isnan(_2114) ? _2115 : max(_2114, _2115));
            float _2278 = isnan(_2115) ? _2114 : (isnan(_2114) ? _2115 : min(_2114, _2115));
            float _2287 = isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : min(_2277, 0.0));
            float _2288 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : min(_2278, 0.0));
            _2341 = ((abs(_2121 / _2110) * cbSceneParam._m0[80u].y) * ((((_2287 - _2288) * 2.0) - ((exp2(_2130 * (isnan(0.0) ? _2277 : (isnan(_2277) ? 0.0 : max(_2277, 0.0)))) - exp2(_2130 * (isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0))))) * _2276)) - ((exp2(_2132 * _2287) - exp2(_2132 * _2288)) * _2276))) + (_2124 * cbSceneParam._m0[80u].z);
        }
        vec4 _2343 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2034, _2035, 1.0), 0.0);
        float _2352 = exp2((_2341 * (-1.44269502162933349609375)) * (1.0 - _2343.w));
        float _2353 = log2(_2352);
        float _2369 = log2(_2054);
        _2134 = (exp2(_2369 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2353 * cbSceneParam._m0[78u].x)) * _2343.x) / cbSceneParam._m0[78u].x)) + _2051;
        _2136 = (exp2(_2369 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2353 * cbSceneParam._m0[78u].y)) * _2343.y) / cbSceneParam._m0[78u].y)) + _2052;
        _2138 = (exp2(_2369 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2353 * cbSceneParam._m0[78u].z)) * _2343.z) / cbSceneParam._m0[78u].z)) + _2053;
        _2140 = _2352 * _2054;
    }
    else
    {
        _2134 = _2051;
        _2136 = _2052;
        _2138 = _2053;
        _2140 = _2054;
    }
    float _2152 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2153 = _2152 == 3.0;
    float _2154 = log2(_2140);
    float _2161 = exp2(_2154 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2020 : (isnan(_2020) ? 0.0 : max(_2020, 0.0)));
    float _2162 = exp2(_2154 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0)));
    float _2163 = exp2(_2154 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0)));
    float _2172 = (_2152 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2172 * (_2153 ? _2161 : (_2161 + (cbSceneParam._m0[72u].w * _2134)));
    SV_Target.y = _2172 * (_2153 ? _2162 : (_2162 + (cbSceneParam._m0[72u].w * _2136)));
    SV_Target.z = _2172 * (_2153 ? _2163 : (_2163 + (cbSceneParam._m0[72u].w * _2138)));
    SV_Target.w = cbInstanceData._m0[_2026].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2026].w;
}


