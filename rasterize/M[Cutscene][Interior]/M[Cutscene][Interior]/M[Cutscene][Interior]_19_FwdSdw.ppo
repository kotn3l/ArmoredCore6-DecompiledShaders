#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_12;
layout(set = 0, binding = 3) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _455;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _206 = _205 * _198;
    float _207 = _205 * _199;
    float _208 = _205 * _200;
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _213 = _212 * NORMAL.x;
    float _214 = _212 * NORMAL.y;
    float _215 = _212 * NORMAL.z;
    float _219 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _220 = _219 * TANGENT.x;
    float _221 = _219 * TANGENT.y;
    float _222 = _219 * TANGENT.z;
    float _267 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _277 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _267);
    float _278 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _267);
    float _279 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _267);
    vec4 _292 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _295 = _292.x;
    vec4 _313 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _330 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _295) + cbMtdParam._m0[12u].x) * _313.x;
    float _332 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _295) + cbMtdParam._m0[12u].y) * _313.y;
    float _334 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _295) + cbMtdParam._m0[12u].z) * _313.z;
    vec4 _368 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _383 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _390 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _402 = cbMtdParam._m0[24u].w + _277;
    float _403 = cbMtdParam._m0[25u].x + _278;
    float _404 = cbMtdParam._m0[25u].y + _279;
    float _418 = (-0.0) - dot(vec3(_402, _403, _404), vec3(_383 * _206, _383 * _207, _383 * _208));
    float _419 = (-0.0) - dot(vec3(_402, _403, _404), vec3(_390 * _220, _390 * _221, _390 * _222));
    float _420 = (-0.0) - dot(vec3(_402, _403, _404), vec3((-0.0) - _213, (-0.0) - _214, (-0.0) - _215));
    float _424 = inversesqrt(dot(vec3(_418, _419, _420), vec3(_418, _419, _420)));
    float _425 = _424 * _420;
    float _430 = ((cbMtdParam._m0[21u].z * _418) * _424) + (((_368.x * 2.0) + (-1.0)) * cbMtdParam._m0[22u].x);
    float _431 = ((cbMtdParam._m0[21u].w * _419) * _424) + (((_368.y * 2.0) + (-1.0)) * cbMtdParam._m0[22u].y);
    float _434 = fract(cbMtdParam._m0[21u].z * TEXCOORD.x);
    float _435 = fract(cbMtdParam._m0[21u].w * TEXCOORD.y);
    float _453;
    float _456;
    float _458;
    if (_430 > 0.0)
    {
        float _439 = (1.0 - _434) / _430;
        _453 = _439;
        _456 = ((cbMtdParam._m0[18u].w + 1.0) - fract(_439 * _425)) * 0.16666667163372039794921875;
        _458 = (fract((_439 * _431) + _435) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_430 < 0.0)
        {
            float _454 = ((-0.0) - _434) / _430;
            frontier_phi_3_2_ladder = (fract(_454 * _425) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
            frontier_phi_3_2_ladder_1 = _454;
            frontier_phi_3_2_ladder_2 = (fract((_454 * _431) + _435) * 0.16666667163372039794921875) + 0.666666686534881591796875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _455;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _453 = frontier_phi_3_2_ladder_1;
        _456 = frontier_phi_3_2_ladder;
        _458 = frontier_phi_3_2_ladder_2;
    }
    float _484;
    float _486;
    float _488;
    if (_431 > 0.0)
    {
        float _471 = (1.0 - _435) / _431;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_471 < _453)
        {
            frontier_phi_8_5_ladder = (fract(_471 * _425) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_471 * _430) + _434) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _471;
        }
        else
        {
            frontier_phi_8_5_ladder = _458;
            frontier_phi_8_5_ladder_1 = _456;
            frontier_phi_8_5_ladder_2 = _453;
        }
        _484 = frontier_phi_8_5_ladder_2;
        _486 = frontier_phi_8_5_ladder_1;
        _488 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_431 < 0.0)
        {
            float _485 = ((-0.0) - _435) / _431;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_485 < _453)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_485 * _425) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_485 * _430) + _434) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _485;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _458;
                frontier_phi_8_6_ladder_9_ladder_1 = _456;
                frontier_phi_8_6_ladder_9_ladder_2 = _453;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _458;
            frontier_phi_8_6_ladder_1 = _456;
            frontier_phi_8_6_ladder_2 = _453;
        }
        _484 = frontier_phi_8_6_ladder_2;
        _486 = frontier_phi_8_6_ladder_1;
        _488 = frontier_phi_8_6_ladder;
    }
    float _492 = (_425 > 0.0) ? (cbMtdParam._m0[18u].z / _425) : 5000.0;
    float _505;
    float _506;
    if (_492 < _484)
    {
        _505 = ((_434 + cbMtdParam._m0[18u].w) + (_492 * _430)) * 0.16666667163372039794921875;
        _506 = (((_492 * _431) + _435) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _505 = _486;
        _506 = _488;
    }
    vec4 _508 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_505, _506));
    float _3474 = isnan(0.0) ? cbMtdParam._m0[17u].z : (isnan(cbMtdParam._m0[17u].z) ? 0.0 : max(cbMtdParam._m0[17u].z, 0.0));
    float _522 = isnan(1.0) ? _3474 : (isnan(_3474) ? 1.0 : min(_3474, 1.0));
    float _3485 = isnan(0.0) ? cbMtdParam._m0[17u].y : (isnan(cbMtdParam._m0[17u].y) ? 0.0 : max(cbMtdParam._m0[17u].y, 0.0));
    float _565 = ((_522 - ((1.0 - (isnan(1.0) ? _3485 : (isnan(_3485) ? 1.0 : min(_3485, 1.0)))) * (_522 + 1.0))) + (((cbMtdParam._m0[18u].y * texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[3u].w)).x) + (cbMtdParam._m0[17u].x * texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w)).x)) / cbMtdParam._m0[17u].w)) / _522;
    float _3496 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _566 = isnan(1.0) ? _3496 : (isnan(_3496) ? 1.0 : min(_3496, 1.0));
    float _568 = 3.0 - (_566 * 2.0);
    float _573 = _566 * _566;
    float _589 = _295 * 0.1500000059604644775390625;
    float _597 = (_589 * (((_295 * _508.x) * (((_573 * (cbMtdParam._m0[15u].x - cbMtdParam._m0[13u].x)) * _568) + cbMtdParam._m0[13u].x)) - _330)) + _330;
    float _598 = (_589 * (((_295 * _508.y) * (((_573 * (cbMtdParam._m0[15u].y - cbMtdParam._m0[13u].y)) * _568) + cbMtdParam._m0[13u].y)) - _332)) + _332;
    float _599 = (_589 * (((_295 * _508.z) * (((_573 * (cbMtdParam._m0[15u].z - cbMtdParam._m0[13u].z)) * _568) + cbMtdParam._m0[13u].z)) - _334)) + _334;
    vec4 _612 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _616 = _612.z;
    float _619 = (_612.x * 2.0) + (-1.0);
    float _620 = (_612.y * 2.0) + (-1.0);
    float _621 = dot(vec2(_619, _620), vec2(_619, _620));
    float _3507 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _626 = sqrt(1.0 - (isnan(1.0) ? _3507 : (isnan(_3507) ? 1.0 : min(_3507, 1.0))));
    float _629 = fma(_626, _213, fma(_620, _220, _619 * _206));
    float _632 = fma(_626, _214, fma(_620, _221, _619 * _207));
    float _635 = fma(_626, _215, fma(_620, _222, _619 * _208));
    float _639 = inversesqrt(dot(vec3(_629, _632, _635), vec3(_629, _632, _635)));
    float _640 = _639 * _629;
    float _641 = _639 * _632;
    float _642 = _639 * _635;
    float _3518 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _643 = isnan(1.0) ? _3518 : (isnan(_3518) ? 1.0 : min(_3518, 1.0));
    float _3529 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _3540 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _3551 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _662 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _666 = inversesqrt(dot(vec3(_277, _278, _279), vec3(_277, _278, _279)));
    float _667 = _277 * _666;
    float _668 = _278 * _666;
    float _669 = _279 * _666;
    float _675 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _676 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _696 = fma(_642, cbSceneParam._m0[5u].z, fma(_641, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _640));
    float _699 = fma(_642, cbSceneParam._m0[6u].z, fma(_641, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _640));
    float _702 = fma(_642, cbSceneParam._m0[7u].z, fma(_641, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _640));
    uint _715 = uint(roundEven(NORMAL.w)) * 13u;
    uint _717 = (_715 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _723 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3529 : (isnan(_3529) ? 1.0 : min(_3529, 1.0)))) * cbInstanceData._m0[_717].x;
    float _724 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3540 : (isnan(_3540) ? 1.0 : min(_3540, 1.0)))) * cbInstanceData._m0[_717].y;
    float _725 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0)))) * cbInstanceData._m0[_717].z;
    float _3562 = isnan(0.0) ? _723 : (isnan(_723) ? 0.0 : max(_723, 0.0));
    float _726 = isnan(1.0) ? _3562 : (isnan(_3562) ? 1.0 : min(_3562, 1.0));
    float _3573 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
    float _727 = isnan(1.0) ? _3573 : (isnan(_3573) ? 1.0 : min(_3573, 1.0));
    float _3584 = isnan(0.0) ? _725 : (isnan(_725) ? 0.0 : max(_725, 0.0));
    float _728 = isnan(1.0) ? _3584 : (isnan(_3584) ? 1.0 : min(_3584, 1.0));
    vec4 _737 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _675, cbSceneParam._m0[86u].y * _676));
    float _740 = _737.x * TEXCOORD_4.z;
    float _741 = dot(vec3(_640, _641, _642), vec3(_667, _668, _669));
    float _744 = _741 * 2.0;
    float _748 = (_744 * _640) - _667;
    float _749 = (_744 * _641) - _668;
    float _750 = (_744 * _642) - _669;
    float _754 = abs(dot(vec3(_667, _668, _669), vec3(_640, _641, _642)));
    float _3595 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _756 = sqrt(_643);
    float _768 = exp2((_756 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3595 : (isnan(_3595) ? 1.0 : min(_3595, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_756 * 3.0));
    float _800 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _804 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _808 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    float _1126;
    float _1127;
    float _1128;
    float _1129;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _841 = fma(_808, cbModelParam._m0[26u].z, fma(_804, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _800));
        float _845 = fma(_808, cbModelParam._m0[27u].z, fma(_804, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _800));
        float _849 = fma(_808, cbModelParam._m0[28u].z, fma(_804, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _800));
        float _873 = _800 + _640;
        float _874 = _804 + _641;
        float _875 = _808 + _642;
        float _885 = fma(_875, cbModelParam._m0[26u].z, fma(_874, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _873)) - _841;
        float _886 = fma(_875, cbModelParam._m0[27u].z, fma(_874, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _873)) - _845;
        float _887 = fma(_875, cbModelParam._m0[28u].z, fma(_874, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _873)) - _849;
        float _891 = inversesqrt(dot(vec3(_885, _886, _887), vec3(_885, _886, _887)));
        float _904 = ((_891 * _885) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_841 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _905 = ((_891 * _886) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_845 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _906 = ((_891 * _887) / cbModelParam._m0[34u].z) + ((((((_849 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _909 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_904, _905, _906), 0.0);
        vec4 _916 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_904, _905, _906), 0.0);
        vec4 _923 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_904, _905, _906), 0.0);
        vec4 _930 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_904, _905, _906), 0.0);
        float _943 = exp2((_909.w + (-0.5)) * 20.0) * 2.0;
        float _944 = _943 * (_909.x + (-0.5));
        float _945 = _943 * (_909.y + (-0.5));
        float _946 = _943 * (_909.z + (-0.5));
        float _953 = exp2((_916.w + (-0.5)) * 20.0) * 2.0;
        float _954 = _953 * (_916.x + (-0.5));
        float _955 = _953 * (_916.y + (-0.5));
        float _956 = _953 * (_916.z + (-0.5));
        float _963 = exp2((_923.w + (-0.5)) * 20.0) * 2.0;
        float _964 = _963 * (_923.x + (-0.5));
        float _965 = _963 * (_923.y + (-0.5));
        float _966 = _963 * (_923.z + (-0.5));
        float _973 = exp2((_930.w + (-0.5)) * 20.0) * 2.0;
        float _974 = _973 * (_930.x + (-0.5));
        float _975 = _973 * (_930.y + (-0.5));
        float _976 = _973 * (_930.z + (-0.5));
        float _977 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _978 = isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0));
        float _979 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _980 = _944 * 0.5;
        float _981 = _954 * 0.5;
        float _982 = _964 * 0.5;
        float _983 = dot(vec3(_980, _981, _982), vec3(_980, _981, _982));
        float _988 = (_983 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_983);
        float _997 = (dot(vec3(_640, _641, _642), vec3(_988 * _980, _988 * _981, _988 * _982)) + 1.0) * 0.5;
        float _3621 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _1007 = sqrt(((_981 * _981) + (_980 * _980)) + (_982 * _982)) / (_977 + 9.9999997473787516355514526367188e-06);
        float _3632 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1008 = isnan(1.0) ? _3632 : (isnan(_3632) ? 1.0 : min(_3632, 1.0));
        float _1009 = _1008 * 2.0;
        float _1013 = (1.0 - _1008) / (_1008 + 1.0);
        float _3643 = isnan(0.0) ? _1013 : (isnan(_1013) ? 0.0 : max(_1013, 0.0));
        float _1014 = isnan(1.0) ? _3643 : (isnan(_3643) ? 1.0 : min(_3643, 1.0));
        float _1023 = ((((1.0 - _1014) * (_1009 + 2.0)) * exp2(log2(isnan(1.0) ? _3621 : (isnan(_3621) ? 1.0 : min(_3621, 1.0))) * (_1009 + 1.0))) + _1014) * _977;
        float _1024 = _945 * 0.5;
        float _1025 = _955 * 0.5;
        float _1026 = _965 * 0.5;
        float _1027 = dot(vec3(_1024, _1025, _1026), vec3(_1024, _1025, _1026));
        float _1032 = (_1027 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1027);
        float _1040 = (dot(vec3(_640, _641, _642), vec3(_1032 * _1024, _1032 * _1025, _1032 * _1026)) + 1.0) * 0.5;
        float _3654 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1049 = sqrt(((_1025 * _1025) + (_1024 * _1024)) + (_1026 * _1026)) / (_978 + 9.9999997473787516355514526367188e-06);
        float _3665 = isnan(0.0) ? _1049 : (isnan(_1049) ? 0.0 : max(_1049, 0.0));
        float _1050 = isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0));
        float _1051 = _1050 * 2.0;
        float _1055 = (1.0 - _1050) / (_1050 + 1.0);
        float _3676 = isnan(0.0) ? _1055 : (isnan(_1055) ? 0.0 : max(_1055, 0.0));
        float _1056 = isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0));
        float _1065 = ((((1.0 - _1056) * (_1051 + 2.0)) * exp2(log2(isnan(1.0) ? _3654 : (isnan(_3654) ? 1.0 : min(_3654, 1.0))) * (_1051 + 1.0))) + _1056) * _978;
        float _1066 = _946 * 0.5;
        float _1067 = _956 * 0.5;
        float _1068 = _966 * 0.5;
        float _1069 = dot(vec3(_1066, _1067, _1068), vec3(_1066, _1067, _1068));
        float _1074 = (_1069 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1069);
        float _1082 = (dot(vec3(_640, _641, _642), vec3(_1074 * _1066, _1074 * _1067, _1074 * _1068)) + 1.0) * 0.5;
        float _3687 = isnan(0.0) ? _1082 : (isnan(_1082) ? 0.0 : max(_1082, 0.0));
        float _1091 = sqrt(((_1067 * _1067) + (_1066 * _1066)) + (_1068 * _1068)) / (_979 + 9.9999997473787516355514526367188e-06);
        float _3698 = isnan(0.0) ? _1091 : (isnan(_1091) ? 0.0 : max(_1091, 0.0));
        float _1092 = isnan(1.0) ? _3698 : (isnan(_3698) ? 1.0 : min(_3698, 1.0));
        float _1093 = _1092 * 2.0;
        float _1097 = (1.0 - _1092) / (_1092 + 1.0);
        float _3709 = isnan(0.0) ? _1097 : (isnan(_1097) ? 0.0 : max(_1097, 0.0));
        float _1098 = isnan(1.0) ? _3709 : (isnan(_3709) ? 1.0 : min(_3709, 1.0));
        float _1107 = ((((1.0 - _1098) * (_1093 + 2.0)) * exp2(log2(isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * (_1093 + 1.0))) + _1098) * _979;
        _1115 = _946;
        _1116 = _945;
        _1117 = _944;
        _1118 = _956;
        _1119 = _955;
        _1120 = _954;
        _1121 = _966;
        _1122 = _965;
        _1123 = _964;
        _1124 = _979;
        _1125 = _978;
        _1126 = _977;
        _1127 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0)));
        _1128 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0)));
        _1129 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0)));
    }
    else
    {
        _1115 = _455;
        _1116 = _455;
        _1117 = _455;
        _1118 = _455;
        _1119 = _455;
        _1120 = _455;
        _1121 = _455;
        _1122 = _455;
        _1123 = _455;
        _1124 = _455;
        _1125 = _455;
        _1126 = _455;
        _1127 = 0.0;
        _1128 = 0.0;
        _1129 = 0.0;
    }
    float _1424;
    float _1425;
    float _1426;
    float _1427;
    float _1428;
    float _1429;
    float _1430;
    float _1431;
    float _1432;
    float _1433;
    float _1434;
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1155 = fma(_808, cbModelParam._m0[30u].z, fma(_804, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _800));
        float _1159 = fma(_808, cbModelParam._m0[31u].z, fma(_804, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _800));
        float _1163 = fma(_808, cbModelParam._m0[32u].z, fma(_804, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _800));
        float _1186 = _800 + _640;
        float _1187 = _804 + _641;
        float _1188 = _808 + _642;
        float _1198 = fma(_1188, cbModelParam._m0[30u].z, fma(_1187, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1186)) - _1155;
        float _1199 = fma(_1188, cbModelParam._m0[31u].z, fma(_1187, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1186)) - _1159;
        float _1200 = fma(_1188, cbModelParam._m0[32u].z, fma(_1187, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1186)) - _1163;
        float _1204 = inversesqrt(dot(vec3(_1198, _1199, _1200), vec3(_1198, _1199, _1200)));
        float _1217 = ((_1204 * _1198) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1155 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1218 = ((_1204 * _1199) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1159 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1219 = ((_1204 * _1200) / cbModelParam._m0[35u].z) + ((((((_1163 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1221 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1217, _1218, _1219), 0.0);
        vec4 _1228 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1217, _1218, _1219), 0.0);
        vec4 _1235 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1217, _1218, _1219), 0.0);
        vec4 _1242 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1217, _1218, _1219), 0.0);
        float _1254 = exp2((_1221.w + (-0.5)) * 20.0) * 2.0;
        float _1255 = _1254 * (_1221.x + (-0.5));
        float _1256 = _1254 * (_1221.y + (-0.5));
        float _1257 = _1254 * (_1221.z + (-0.5));
        float _1264 = exp2((_1228.w + (-0.5)) * 20.0) * 2.0;
        float _1265 = _1264 * (_1228.x + (-0.5));
        float _1266 = _1264 * (_1228.y + (-0.5));
        float _1267 = _1264 * (_1228.z + (-0.5));
        float _1274 = exp2((_1235.w + (-0.5)) * 20.0) * 2.0;
        float _1275 = _1274 * (_1235.x + (-0.5));
        float _1276 = _1274 * (_1235.y + (-0.5));
        float _1277 = _1274 * (_1235.z + (-0.5));
        float _1284 = exp2((_1242.w + (-0.5)) * 20.0) * 2.0;
        float _1285 = _1284 * (_1242.x + (-0.5));
        float _1286 = _1284 * (_1242.y + (-0.5));
        float _1287 = _1284 * (_1242.z + (-0.5));
        float _1288 = isnan(0.0) ? _1285 : (isnan(_1285) ? 0.0 : max(_1285, 0.0));
        float _1289 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1290 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1291 = _1255 * 0.5;
        float _1292 = _1265 * 0.5;
        float _1293 = _1275 * 0.5;
        float _1294 = dot(vec3(_1291, _1292, _1293), vec3(_1291, _1292, _1293));
        float _1299 = (_1294 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1294);
        float _1307 = (dot(vec3(_640, _641, _642), vec3(_1299 * _1291, _1299 * _1292, _1299 * _1293)) + 1.0) * 0.5;
        float _3750 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1316 = sqrt(((_1292 * _1292) + (_1291 * _1291)) + (_1293 * _1293)) / (_1288 + 9.9999997473787516355514526367188e-06);
        float _3761 = isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0));
        float _1317 = isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0));
        float _1318 = _1317 * 2.0;
        float _1322 = (1.0 - _1317) / (_1317 + 1.0);
        float _3772 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
        float _1323 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
        float _1332 = ((((1.0 - _1323) * (_1318 + 2.0)) * exp2(log2(isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0))) * (_1318 + 1.0))) + _1323) * _1288;
        float _1333 = _1256 * 0.5;
        float _1334 = _1266 * 0.5;
        float _1335 = _1276 * 0.5;
        float _1336 = dot(vec3(_1333, _1334, _1335), vec3(_1333, _1334, _1335));
        float _1341 = (_1336 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1336);
        float _1349 = (dot(vec3(_640, _641, _642), vec3(_1341 * _1333, _1341 * _1334, _1341 * _1335)) + 1.0) * 0.5;
        float _3783 = isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0));
        float _1358 = sqrt(((_1334 * _1334) + (_1333 * _1333)) + (_1335 * _1335)) / (_1289 + 9.9999997473787516355514526367188e-06);
        float _3794 = isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0));
        float _1359 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
        float _1360 = _1359 * 2.0;
        float _1364 = (1.0 - _1359) / (_1359 + 1.0);
        float _3805 = isnan(0.0) ? _1364 : (isnan(_1364) ? 0.0 : max(_1364, 0.0));
        float _1365 = isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0));
        float _1374 = ((((1.0 - _1365) * (_1360 + 2.0)) * exp2(log2(isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0))) * (_1360 + 1.0))) + _1365) * _1289;
        float _1375 = _1257 * 0.5;
        float _1376 = _1267 * 0.5;
        float _1377 = _1277 * 0.5;
        float _1378 = dot(vec3(_1375, _1376, _1377), vec3(_1375, _1376, _1377));
        float _1383 = (_1378 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1378);
        float _1391 = (dot(vec3(_640, _641, _642), vec3(_1383 * _1375, _1383 * _1376, _1383 * _1377)) + 1.0) * 0.5;
        float _3816 = isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0));
        float _1400 = sqrt(((_1376 * _1376) + (_1375 * _1375)) + (_1377 * _1377)) / (_1290 + 9.9999997473787516355514526367188e-06);
        float _3827 = isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0));
        float _1401 = isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0));
        float _1402 = _1401 * 2.0;
        float _1406 = (1.0 - _1401) / (_1401 + 1.0);
        float _3838 = isnan(0.0) ? _1406 : (isnan(_1406) ? 0.0 : max(_1406, 0.0));
        float _1407 = isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0));
        float _1416 = ((((1.0 - _1407) * (_1402 + 2.0)) * exp2(log2(isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * (_1402 + 1.0))) + _1407) * _1290;
        _1424 = _1257;
        _1425 = _1256;
        _1426 = _1255;
        _1427 = _1267;
        _1428 = _1266;
        _1429 = _1265;
        _1430 = _1277;
        _1431 = _1276;
        _1432 = _1275;
        _1433 = _1290;
        _1434 = _1289;
        _1435 = _1288;
        _1436 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1332 : (isnan(_1332) ? 0.0 : max(_1332, 0.0)));
        _1437 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1374 : (isnan(_1374) ? 0.0 : max(_1374, 0.0)));
        _1438 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1416 : (isnan(_1416) ? 0.0 : max(_1416, 0.0)));
    }
    else
    {
        _1424 = _455;
        _1425 = _455;
        _1426 = _455;
        _1427 = _455;
        _1428 = _455;
        _1429 = _455;
        _1430 = _455;
        _1431 = _455;
        _1432 = _455;
        _1433 = _455;
        _1434 = _455;
        _1435 = _455;
        _1436 = 0.0;
        _1437 = 0.0;
        _1438 = 0.0;
    }
    float _1448 = (cbModelParam._m0[1u].x * (_1436 - _1127)) + _1127;
    float _1449 = (cbModelParam._m0[1u].x * (_1437 - _1128)) + _1128;
    float _1450 = (cbModelParam._m0[1u].x * (_1438 - _1129)) + _1129;
    float _1471 = fma(_1450, cbSceneParam._m0[89u].z, fma(_1449, cbSceneParam._m0[89u].y, _1448 * cbSceneParam._m0[89u].x));
    float _1474 = fma(_1450, cbSceneParam._m0[90u].z, fma(_1449, cbSceneParam._m0[90u].y, _1448 * cbSceneParam._m0[90u].x));
    float _1477 = fma(_1450, cbSceneParam._m0[91u].z, fma(_1449, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1448));
    float _1492 = _748 * 0.5;
    float _1493 = _749 * 0.5;
    float _1494 = _750 * 0.5;
    float _1495 = dot(vec4(_1492, _1493, _1494, 1.0), vec4(_1426, _1429, _1432, _1435));
    float _1498 = dot(vec4(_1492, _1493, _1494, 1.0), vec4(_1425, _1428, _1431, _1434));
    float _1501 = dot(vec4(_1492, _1493, _1494, 1.0), vec4(_1424, _1427, _1430, _1433));
    float _1535;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1508 = dot(vec4(_1492, _1493, _1494, 1.0), vec4(_1115, _1118, _1121, _1124));
        float _1512 = dot(vec4(_1492, _1493, _1494, 1.0), vec4(_1116, _1119, _1122, _1125));
        float _1516 = dot(vec4(_1492, _1493, _1494, 1.0), vec4(_1117, _1120, _1123, _1126));
        float _1523 = dot(vec4(cbModelParam._m0[39u]), vec4(_1492, _1493, _1494, 1.0));
        _1535 = dot(vec3(isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0)), isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0)), isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1523) ? 0.0 : (isnan(0.0) ? _1523 : max(0.0, _1523))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1535 = 1.0;
    }
    float _1546;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1537 = dot(vec4(cbModelParam._m0[40u]), vec4(_1492, _1493, _1494, 1.0));
        _1546 = dot(vec3(isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)), isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)), isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1537) ? 0.0 : (isnan(0.0) ? _1537 : max(0.0, _1537))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1546 = 1.0;
    }
    float _1550 = (_1546 * cbModelParam._m0[1u].x) + (_1535 * (1.0 - cbModelParam._m0[1u].x));
    float _1560 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _643);
    float _1561 = isnan(_1560) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1560 : min(cbModelParam._m0[25u].z, _1560));
    float _1642;
    float _1644;
    float _1646;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1609 = fma(_808, cbModelParam._m0[13u].z, fma(_804, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _800)) + cbModelParam._m0[13u].w;
        float _1613 = fma(_808, cbModelParam._m0[14u].z, fma(_804, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _800)) + cbModelParam._m0[14u].w;
        float _1617 = fma(_808, cbModelParam._m0[15u].z, fma(_804, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _800)) + cbModelParam._m0[15u].w;
        float _1620 = fma(_750, cbModelParam._m0[13u].z, fma(_749, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _748));
        float _1623 = fma(_750, cbModelParam._m0[14u].z, fma(_749, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _748));
        float _1626 = fma(_750, cbModelParam._m0[15u].z, fma(_749, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _748));
        float _1654;
        if (_1620 > 0.0)
        {
            _1654 = abs((1.0 - _1609) / _1620);
        }
        else
        {
            float frontier_phi_26_24_ladder;
            if (_1620 < 0.0)
            {
                frontier_phi_26_24_ladder = abs((_1609 + 1.0) / _1620);
            }
            else
            {
                frontier_phi_26_24_ladder = 5000.0;
            }
            _1654 = frontier_phi_26_24_ladder;
        }
        float _1823;
        if (_1623 > 0.0)
        {
            _1823 = abs((1.0 - _1613) / _1623);
        }
        else
        {
            float frontier_phi_35_31_ladder;
            if (_1623 < 0.0)
            {
                frontier_phi_35_31_ladder = abs((_1613 + 1.0) / _1623);
            }
            else
            {
                frontier_phi_35_31_ladder = 5000.0;
            }
            _1823 = frontier_phi_35_31_ladder;
        }
        float _2267;
        if (_1626 > 0.0)
        {
            _2267 = abs((1.0 - _1617) / _1626);
        }
        else
        {
            float frontier_phi_47_42_ladder;
            if (_1626 < 0.0)
            {
                frontier_phi_47_42_ladder = abs((_1617 + 1.0) / _1626);
            }
            else
            {
                frontier_phi_47_42_ladder = 5000.0;
            }
            _2267 = frontier_phi_47_42_ladder;
        }
        float _2269 = isnan(_1823) ? _1654 : (isnan(_1654) ? _1823 : min(_1654, _1823));
        float _2270 = isnan(_2267) ? _2269 : (isnan(_2269) ? _2267 : min(_2269, _2267));
        float _2274 = (_2270 * _1620) + _1609;
        float _2275 = (_2270 * _1623) + _1613;
        float _2276 = (_2270 * _1626) + _1617;
        float _2277 = _2270 * 9.9999997473787516355514526367188e-05;
        float _2279 = (-1.0) - _2277;
        float _2281 = _2277 + 1.0;
        float frontier_phi_25_47_ladder;
        float frontier_phi_25_47_ladder_1;
        float frontier_phi_25_47_ladder_2;
        if ((_2276 > _2281) || ((_2276 < _2279) || ((_2275 > _2281) || ((_2275 < _2279) || ((_2274 < _2279) || (_2274 > _2281))))))
        {
            frontier_phi_25_47_ladder = 0.0;
            frontier_phi_25_47_ladder_1 = 0.0;
            frontier_phi_25_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2510 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2276, cbModelParam._m0[9u].z, fma(_2275, cbModelParam._m0[9u].y, _2274 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2276, cbModelParam._m0[10u].z, fma(_2275, cbModelParam._m0[10u].y, _2274 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2276, cbModelParam._m0[11u].z, fma(_2275, cbModelParam._m0[11u].y, _2274 * cbModelParam._m0[11u].x))), _1561);
            frontier_phi_25_47_ladder = _2510.z * cbModelParam._m0[1u].y;
            frontier_phi_25_47_ladder_1 = _2510.y * cbModelParam._m0[1u].y;
            frontier_phi_25_47_ladder_2 = _2510.x * cbModelParam._m0[1u].y;
        }
        _1642 = frontier_phi_25_47_ladder_2;
        _1644 = frontier_phi_25_47_ladder_1;
        _1646 = frontier_phi_25_47_ladder;
    }
    else
    {
        vec4 _1630 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_748, _749, _750), _1561);
        _1642 = _1630.x * cbModelParam._m0[1u].y;
        _1644 = _1630.y * cbModelParam._m0[1u].y;
        _1646 = _1630.z * cbModelParam._m0[1u].y;
    }
    float _1650 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _643);
    float _1651 = isnan(_1650) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1650 : min(cbModelParam._m0[25u].w, _1650));
    float _1740;
    float _1742;
    float _1744;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1704 = fma(_808, cbModelParam._m0[21u].z, fma(_804, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _800)) + cbModelParam._m0[21u].w;
        float _1708 = fma(_808, cbModelParam._m0[22u].z, fma(_804, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _800)) + cbModelParam._m0[22u].w;
        float _1712 = fma(_808, cbModelParam._m0[23u].z, fma(_804, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _800)) + cbModelParam._m0[23u].w;
        float _1715 = fma(_750, cbModelParam._m0[21u].z, fma(_749, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _748));
        float _1718 = fma(_750, cbModelParam._m0[22u].z, fma(_749, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _748));
        float _1721 = fma(_750, cbModelParam._m0[23u].z, fma(_749, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _748));
        float _1828;
        if (_1715 > 0.0)
        {
            _1828 = abs((1.0 - _1704) / _1715);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1715 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1704 + 1.0) / _1715);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1828 = frontier_phi_37_33_ladder;
        }
        float _2294;
        if (_1718 > 0.0)
        {
            _2294 = abs((1.0 - _1708) / _1718);
        }
        else
        {
            float frontier_phi_49_44_ladder;
            if (_1718 < 0.0)
            {
                frontier_phi_49_44_ladder = abs((_1708 + 1.0) / _1718);
            }
            else
            {
                frontier_phi_49_44_ladder = 5000.0;
            }
            _2294 = frontier_phi_49_44_ladder;
        }
        float _2631;
        if (_1721 > 0.0)
        {
            _2631 = abs((1.0 - _1712) / _1721);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1721 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1712 + 1.0) / _1721);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2631 = frontier_phi_61_56_ladder;
        }
        float _2633 = isnan(_2294) ? _1828 : (isnan(_1828) ? _2294 : min(_1828, _2294));
        float _2634 = isnan(_2631) ? _2633 : (isnan(_2633) ? _2631 : min(_2633, _2631));
        float _2638 = (_2634 * _1715) + _1704;
        float _2639 = (_2634 * _1718) + _1708;
        float _2640 = (_2634 * _1721) + _1712;
        float _2641 = _2634 * 9.9999997473787516355514526367188e-05;
        float _2642 = (-1.0) - _2641;
        float _2644 = _2641 + 1.0;
        float frontier_phi_34_61_ladder;
        float frontier_phi_34_61_ladder_1;
        float frontier_phi_34_61_ladder_2;
        if ((_2640 > _2644) || ((_2640 < _2642) || ((_2639 > _2644) || ((_2639 < _2642) || ((_2638 < _2642) || (_2638 > _2644))))))
        {
            frontier_phi_34_61_ladder = 0.0;
            frontier_phi_34_61_ladder_1 = 0.0;
            frontier_phi_34_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2761 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2640, cbModelParam._m0[17u].z, fma(_2639, cbModelParam._m0[17u].y, _2638 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2640, cbModelParam._m0[18u].z, fma(_2639, cbModelParam._m0[18u].y, _2638 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2640, cbModelParam._m0[19u].z, fma(_2639, cbModelParam._m0[19u].y, _2638 * cbModelParam._m0[19u].x))), _1651);
            frontier_phi_34_61_ladder = _2761.z * cbModelParam._m0[1u].z;
            frontier_phi_34_61_ladder_1 = _2761.y * cbModelParam._m0[1u].z;
            frontier_phi_34_61_ladder_2 = _2761.x * cbModelParam._m0[1u].z;
        }
        _1740 = frontier_phi_34_61_ladder_2;
        _1742 = frontier_phi_34_61_ladder_1;
        _1744 = frontier_phi_34_61_ladder;
    }
    else
    {
        vec4 _1724 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_748, _749, _750), _1651);
        _1740 = _1724.x * cbModelParam._m0[1u].z;
        _1742 = _1724.y * cbModelParam._m0[1u].z;
        _1744 = _1724.z * cbModelParam._m0[1u].z;
    }
    float _1756 = ((((1.0 - _768) * ((_756 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_768 * _756)) * _740;
    float _1757 = _1756 * ((cbModelParam._m0[1u].w * (_1740 - _1642)) + _1642);
    float _1758 = _1756 * ((cbModelParam._m0[1u].w * (_1742 - _1644)) + _1644);
    float _1759 = _1756 * ((cbModelParam._m0[1u].w * (_1744 - _1646)) + _1646);
    float _1762 = fma(_1759, cbSceneParam._m0[89u].z, fma(_1758, cbSceneParam._m0[89u].y, _1757 * cbSceneParam._m0[89u].x));
    float _1765 = fma(_1759, cbSceneParam._m0[90u].z, fma(_1758, cbSceneParam._m0[90u].y, _1757 * cbSceneParam._m0[90u].x));
    float _1768 = fma(_1759, cbSceneParam._m0[91u].z, fma(_1758, cbSceneParam._m0[91u].y, _1757 * cbSceneParam._m0[91u].x));
    float _1802 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1806 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1810 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1814 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1815 = _1802 / _1814;
    float _1816 = _1806 / _1814;
    float _1817 = _1810 / _1814;
    float _1964;
    float _1965;
    float _1966;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1844 = ((uint(_1817 > cbSceneParam._m0[59u].y) + uint(_1817 > cbSceneParam._m0[59u].x)) + uint(_1817 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1845 = _1844 + 43u;
        uint _1853 = _1844 + 44u;
        uint _1861 = _1844 + 45u;
        uint _1869 = _1844 + 46u;
        float _1880 = fma(_1814, cbSceneParam._m0[_1845].w, fma(_1810, cbSceneParam._m0[_1845].z, fma(_1806, cbSceneParam._m0[_1845].y, _1802 * cbSceneParam._m0[_1845].x)));
        float _1884 = fma(_1814, cbSceneParam._m0[_1853].w, fma(_1810, cbSceneParam._m0[_1853].z, fma(_1806, cbSceneParam._m0[_1853].y, _1802 * cbSceneParam._m0[_1853].x)));
        float _1892 = fma(_1814, cbSceneParam._m0[_1869].w, fma(_1810, cbSceneParam._m0[_1869].z, fma(_1806, cbSceneParam._m0[_1869].y, _1802 * cbSceneParam._m0[_1869].x)));
        float _1897 = cbSceneParam._m0[33u].z * _1892;
        float _1899 = cbSceneParam._m0[33u].w * _1892;
        float _1902 = fma(_1814, cbSceneParam._m0[_1861].w, fma(_1810, cbSceneParam._m0[_1861].z, fma(_1806, cbSceneParam._m0[_1861].y, _1802 * cbSceneParam._m0[_1861].x))) / _1892;
        float _1950 = (cbSceneParam._m0[33u].x - sqrt(((_1816 * _1816) + (_1815 * _1815)) + (_1817 * _1817))) * cbSceneParam._m0[33u].y;
        float _3964 = isnan(0.0) ? _1950 : (isnan(_1950) ? 0.0 : max(_1950, 0.0));
        float _1957 = (isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1897 + _1880) / _1892, (_1899 + _1884) / _1892), _1902), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1899 + _1880) / _1892, (_1884 - _1897) / _1892), _1902), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1880 - _1897) / _1892, (_1884 - _1899) / _1892), _1902), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1880 - _1899) / _1892, (_1897 + _1884) / _1892), _1902), 0.0)).x), vec4(0.25)));
        _1964 = 1.0 - (_1957 * cbSceneParam._m0[34u].x);
        _1965 = 1.0 - (_1957 * cbSceneParam._m0[34u].y);
        _1966 = 1.0 - (_1957 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1964 = 1.0;
        _1965 = 1.0;
        _1966 = 1.0;
    }
    float _2030;
    float _2032;
    float _2034;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2018 = fma(_1814, cbSceneParam._m0[63u].w, fma(_1810, cbSceneParam._m0[63u].z, fma(_1806, cbSceneParam._m0[63u].y, _1802 * cbSceneParam._m0[63u].x)));
        float _2019 = fma(_1814, cbSceneParam._m0[60u].w, fma(_1810, cbSceneParam._m0[60u].z, fma(_1806, cbSceneParam._m0[60u].y, _1802 * cbSceneParam._m0[60u].x))) / _2018;
        float _2020 = fma(_1814, cbSceneParam._m0[61u].w, fma(_1810, cbSceneParam._m0[61u].z, fma(_1806, cbSceneParam._m0[61u].y, _1802 * cbSceneParam._m0[61u].x))) / _2018;
        float frontier_phi_46_45_ladder;
        float frontier_phi_46_45_ladder_1;
        float frontier_phi_46_45_ladder_2;
        if ((((_2019 >= cbSceneParam._m0[64u].x) && (_2020 >= cbSceneParam._m0[64u].y)) && (_2019 <= cbSceneParam._m0[64u].z)) && (_2020 <= cbSceneParam._m0[64u].w))
        {
            float _2307 = fma(_1814, cbSceneParam._m0[62u].w, fma(_1810, cbSceneParam._m0[62u].z, fma(_1806, cbSceneParam._m0[62u].y, _1802 * cbSceneParam._m0[62u].x))) / _2018;
            float _2311 = isnan(cbSceneParam._m0[41u].w) ? _2307 : (isnan(_2307) ? cbSceneParam._m0[41u].w : max(_2307, cbSceneParam._m0[41u].w));
            float _2354 = (cbSceneParam._m0[33u].x - sqrt(((_1816 * _1816) + (_1815 * _1815)) + (_1817 * _1817))) * cbSceneParam._m0[33u].y;
            float _3980 = isnan(0.0) ? _2354 : (isnan(_2354) ? 0.0 : max(_2354, 0.0));
            float _2361 = (isnan(1.0) ? _3980 : (isnan(_3980) ? 1.0 : min(_3980, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2019, cbSceneParam._m0[33u].w + _2020), _2311), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2019, _2020 - cbSceneParam._m0[33u].z), _2311), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2019 - cbSceneParam._m0[33u].z, _2020 - cbSceneParam._m0[33u].w), _2311), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2019 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2020), _2311), 0.0)).x), vec4(0.25)));
            float _2365 = 1.0 - (_2361 * cbSceneParam._m0[34u].x);
            float _2366 = 1.0 - (_2361 * cbSceneParam._m0[34u].y);
            float _2367 = 1.0 - (_2361 * cbSceneParam._m0[34u].z);
            frontier_phi_46_45_ladder = isnan(_2367) ? _1966 : (isnan(_1966) ? _2367 : min(_1966, _2367));
            frontier_phi_46_45_ladder_1 = isnan(_2366) ? _1965 : (isnan(_1965) ? _2366 : min(_1965, _2366));
            frontier_phi_46_45_ladder_2 = isnan(_2365) ? _1964 : (isnan(_1964) ? _2365 : min(_1964, _2365));
        }
        else
        {
            frontier_phi_46_45_ladder = _1966;
            frontier_phi_46_45_ladder_1 = _1965;
            frontier_phi_46_45_ladder_2 = _1964;
        }
        _2030 = frontier_phi_46_45_ladder_2;
        _2032 = frontier_phi_46_45_ladder_1;
        _2034 = frontier_phi_46_45_ladder;
    }
    else
    {
        _2030 = _1964;
        _2032 = _1965;
        _2034 = _1966;
    }
    uvec4 _2039 = floatBitsToUint(cbInstanceData._m0[_715 + 5u]);
    uint _2041 = _2039.x * 14u;
    uint _2042 = _2041 + 13u;
    float _2047 = _740 + (-1.0);
    float _2050 = (cbLight._m0[_2042].x * _2047) + 1.0;
    float _2051 = (cbLight._m0[_2042].y * _2047) + 1.0;
    uint _2052 = _2041 + 5u;
    float _2058 = isnan(1.0) ? _2051 : (isnan(_2051) ? 1.0 : min(_2051, 1.0));
    uint _2062 = _2041 + 4u;
    float _2071 = isnan(1.0) ? _2050 : (isnan(_2050) ? 1.0 : min(_2050, 1.0));
    uint _2075 = _2041 | 1u;
    float _2086 = dot(vec3(cbLight._m0[_2041].xyz), vec3(_640, _641, _642));
    float _2089 = dot(vec3(cbLight._m0[_2075].xyz), vec3(_640, _641, _642));
    float _4016 = isnan(0.0) ? _2086 : (isnan(_2086) ? 0.0 : max(_2086, 0.0));
    float _4027 = isnan(0.0) ? _2089 : (isnan(_2089) ? 0.0 : max(_2089, 0.0));
    float _2094 = (isnan(1.0) ? _4016 : (isnan(_4016) ? 1.0 : min(_4016, 1.0))) * 0.3183098733425140380859375;
    float _2096 = (isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0))) * 0.3183098733425140380859375;
    float _2103 = ((cbLight._m0[_2052].x * _2058) * _2096) + (((cbLight._m0[_2062].x * _2030) * _2071) * _2094);
    float _2104 = ((_2058 * cbLight._m0[_2052].y) * _2096) + (((cbLight._m0[_2062].y * _2032) * _2071) * _2094);
    float _2105 = ((_2058 * cbLight._m0[_2052].z) * _2096) + (((cbLight._m0[_2062].z * _2034) * _2071) * _2094);
    uint _2107 = _2041 + 8u;
    float _2120 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2041].w)) * _643) * 0.949999988079071044921875);
    float _2121 = _2120 * _2120;
    float _2122 = cbLight._m0[_2041].x + _667;
    float _2123 = cbLight._m0[_2041].y + _668;
    float _2124 = cbLight._m0[_2041].z + _669;
    float _2128 = inversesqrt(dot(vec3(_2122, _2123, _2124), vec3(_2122, _2123, _2124)));
    float _2129 = _2128 * _2122;
    float _2130 = _2128 * _2123;
    float _2131 = _2128 * _2124;
    float _2132 = dot(vec3(_640, _641, _642), vec3(cbLight._m0[_2041].xyz));
    float _4038 = isnan(0.0) ? _2132 : (isnan(_2132) ? 0.0 : max(_2132, 0.0));
    float _2135 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
    float _4049 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _2136 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
    float _2137 = dot(vec3(_640, _641, _642), vec3(_2129, _2130, _2131));
    float _4060 = isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0));
    float _2140 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
    float _2141 = dot(vec3(cbLight._m0[_2041].xyz), vec3(_2129, _2130, _2131));
    float _4071 = isnan(0.0) ? _2141 : (isnan(_2141) ? 0.0 : max(_2141, 0.0));
    float _2145 = _2121 * _2121;
    float _2149 = ((_2140 * _2140) * (_2145 + (-1.0))) + 1.0;
    float _2160 = (exp2(log2(1.0 - (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2161 = 1.0 - _2121;
    float _2172 = (0.5 / (((_2136 * ((_2135 * _2161) + _2121)) + 9.9999999392252902907785028219223e-09) + (((_2136 * _2161) + _2121) * _2135))) * _2135;
    float _4082 = isnan(0.0) ? _2172 : (isnan(_2172) ? 0.0 : max(_2172, 0.0));
    float _2174 = (isnan(1.0) ? _4082 : (isnan(_4082) ? 1.0 : min(_4082, 1.0))) * (_2145 / ((_2149 * _2149) * 3.141590118408203125));
    uint _2188 = _2041 + 9u;
    float _2199 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2075].w)) * _643) * 0.949999988079071044921875);
    float _2200 = _2199 * _2199;
    float _2201 = cbLight._m0[_2075].x + _667;
    float _2202 = cbLight._m0[_2075].y + _668;
    float _2203 = cbLight._m0[_2075].z + _669;
    float _2207 = inversesqrt(dot(vec3(_2201, _2202, _2203), vec3(_2201, _2202, _2203)));
    float _2208 = _2207 * _2201;
    float _2209 = _2207 * _2202;
    float _2210 = _2207 * _2203;
    float _2211 = dot(vec3(_640, _641, _642), vec3(cbLight._m0[_2075].xyz));
    float _4093 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
    float _2214 = isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0));
    float _2215 = dot(vec3(_640, _641, _642), vec3(_2208, _2209, _2210));
    float _4104 = isnan(0.0) ? _2215 : (isnan(_2215) ? 0.0 : max(_2215, 0.0));
    float _2218 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
    float _2219 = dot(vec3(cbLight._m0[_2075].xyz), vec3(_2208, _2209, _2210));
    float _4115 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
    float _2223 = _2200 * _2200;
    float _2227 = ((_2218 * _2218) * (_2223 + (-1.0))) + 1.0;
    float _2236 = (exp2(log2(1.0 - (isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2237 = 1.0 - _2200;
    float _2247 = (0.5 / (((_2136 * ((_2214 * _2237) + _2200)) + 9.9999999392252902907785028219223e-09) + (((_2136 * _2237) + _2200) * _2214))) * _2214;
    float _4126 = isnan(0.0) ? _2247 : (isnan(_2247) ? 0.0 : max(_2247, 0.0));
    float _2249 = (isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * (_2223 / ((_2227 * _2227) * 3.141590118408203125));
    float _2259 = (((_2236 * cbLight._m0[_2188].x) * _2249) * _2058) + ((((cbLight._m0[_2107].x * _2030) * _2160) * _2174) * _2071);
    float _2260 = (((_2236 * cbLight._m0[_2188].y) * _2249) * _2058) + ((((cbLight._m0[_2107].y * _2032) * _2160) * _2174) * _2071);
    float _2261 = (((_2236 * cbLight._m0[_2188].z) * _2249) * _2058) + ((((cbLight._m0[_2107].z * _2034) * _2160) * _2174) * _2071);
    float _2424;
    float _2426;
    float _2428;
    float _2430;
    float _2432;
    float _2434;
    if (_2039.y == 0u)
    {
        uvec4 _2379 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2380 = _2379.x;
        uint _2391 = uint((float(_2379.y) * floor(float(uint(cbSceneParam._m0[85u].y * _676) / _2380))) + floor(float(uint(cbSceneParam._m0[85u].x * _675) / _2380)));
        float _2401 = (log2(_1817 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2402 = isnan(0.0) ? _2401 : (isnan(_2401) ? 0.0 : max(_2401, 0.0));
        uint _2405 = uint(isnan(14.0) ? _2402 : (isnan(_2402) ? 14.0 : min(_2402, 14.0)));
        uvec4 _2410 = texelFetch(g_lightClusterGridBuffer, int(((_2405 << 2u) + (_2391 << 6u)) >> 2u));
        uint _2411 = _2410.x;
        uint _2412 = _2379.z;
        float _2519;
        float _2521;
        float _2523;
        float _2525;
        float _2527;
        float _2529;
        if (((((1u << ((_2412 >> 4u) & 15u)) + 4294967295u) & _2411) == 0u) || ((_2412 & 240u) == 0u))
        {
            _2519 = 0.0;
            _2521 = 0.0;
            _2523 = 0.0;
            _2525 = 0.0;
            _2527 = 0.0;
            _2529 = 0.0;
        }
        else
        {
            float _2520;
            float _2522;
            float _2524;
            float _2526;
            float _2528;
            float _2530;
            float _2689 = 0.0;
            float _2690 = 0.0;
            float _2691 = 0.0;
            float _2692 = 0.0;
            float _2693 = 0.0;
            float _2694 = 0.0;
            uint _2695 = 0u;
            uint _2704;
            bool _2705;
            for (;;)
            {
                _2704 = texelFetch(g_lightClassification, int((((_2405 << 5u) + (_2391 << 9u)) + (_2695 << 2u)) >> 2u)).x;
                _2705 = _2704 == 0u;
                float frontier_phi_70_pred;
                float frontier_phi_70_pred_1;
                float frontier_phi_70_pred_2;
                float frontier_phi_70_pred_3;
                float frontier_phi_70_pred_4;
                float frontier_phi_70_pred_5;
                if (_2705)
                {
                    frontier_phi_70_pred = _2692;
                    frontier_phi_70_pred_1 = _2694;
                    frontier_phi_70_pred_2 = _2693;
                    frontier_phi_70_pred_3 = _2691;
                    frontier_phi_70_pred_4 = _2690;
                    frontier_phi_70_pred_5 = _2689;
                }
                else
                {
                    float _2834;
                    float _2835;
                    float _2836;
                    float _2837;
                    float _2838;
                    float _2839;
                    uint _2840;
                    _2834 = _2689;
                    _2835 = _2690;
                    _2836 = _2691;
                    _2837 = _2692;
                    _2838 = _2693;
                    _2839 = _2694;
                    _2840 = _2704;
                    float _2766;
                    float _2767;
                    float _2768;
                    float _2769;
                    float _2770;
                    float _2771;
                    for (;;)
                    {
                        uint _2844 = uint(findLSB(_2840)) + (_2695 << 5u);
                        uint _2841 = (_2840 + 4294967295u) & _2840;
                        uint _2846 = _2844 * 48u;
                        vec4 _2860 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2846)).x, texelFetch(g_PointLightRenderingBuffer, int(_2846 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2846 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2846 + 3u)).x));
                        uint _2866 = (_2844 * 48u) + 4u;
                        vec4 _2879 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2866)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2866 + 3u)).x));
                        uint _2885 = (_2844 * 48u) + 8u;
                        vec3 _2896 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2885)).x, texelFetch(g_PointLightRenderingBuffer, int(_2885 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2885 + 2u)).x));
                        float _2900 = _2860.x - _1815;
                        float _2901 = _2860.y - _1816;
                        float _2902 = _2860.z - _1817;
                        float _2903 = dot(vec3(_2900, _2901, _2902), vec3(_2900, _2901, _2902));
                        float _2906 = inversesqrt(_2903);
                        float _2907 = _2906 * _2900;
                        float _2908 = _2906 * _2901;
                        float _2909 = _2906 * _2902;
                        float _2910 = dot(vec3(_696, _699, _702), vec3(_2907, _2908, _2909));
                        float _2915 = 1.0 - (_2903 * _2860.w);
                        float _4147 = isnan(0.0) ? _2915 : (isnan(_2915) ? 0.0 : max(_2915, 0.0));
                        float _2916 = isnan(1.0) ? _4147 : (isnan(_4147) ? 1.0 : min(_4147, 1.0));
                        float _2917 = sqrt(_2903) * _2879.w;
                        float _2920 = 1.39999997615814208984375 / (_2917 + 1.39999997615814208984375);
                        float _2921 = _2920 * _2920;
                        float _2924 = ((1.0 - _2921) * _2910) + _2921;
                        float _2927 = _2917 * _2917;
                        float _2931 = ((isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0))) * _2916) / ((_2927 * 0.699999988079071044921875) + 1.0);
                        float _2935 = (-0.0) - _1815;
                        float _2936 = (-0.0) - _1816;
                        float _2937 = (-0.0) - _1817;
                        float _2941 = inversesqrt(dot(vec3(_2935, _2936, _2937), vec3(_2935, _2936, _2937)));
                        float _2942 = _2941 * _2935;
                        float _2943 = _2941 * _2936;
                        float _2944 = _2941 * _2937;
                        float _2951 = exp2(log2(1.0 / ((_2927 * 3.5) + 5.0)) * 0.25);
                        float _2952 = 1.0 - _756;
                        float _2959 = sqrt(1.0 - ((1.0 - (_2952 * _2952)) * (1.0 - (_2951 * _2951))));
                        float _2960 = _2959 * _2959;
                        float _2961 = _2960 * _2960;
                        float _2962 = _2942 + _2907;
                        float _2963 = _2943 + _2908;
                        float _2964 = _2944 + _2909;
                        float _2968 = inversesqrt(dot(vec3(_2962, _2963, _2964), vec3(_2962, _2963, _2964)));
                        float _2972 = dot(vec3(_696, _699, _702), vec3(_2942, _2943, _2944));
                        float _4163 = isnan(0.0) ? _2972 : (isnan(_2972) ? 0.0 : max(_2972, 0.0));
                        float _2975 = isnan(1.0) ? _4163 : (isnan(_4163) ? 1.0 : min(_4163, 1.0));
                        float _2976 = dot(vec3(_696, _699, _702), vec3(_2968 * _2962, _2968 * _2963, _2968 * _2964));
                        float _4174 = isnan(0.0) ? _2976 : (isnan(_2976) ? 0.0 : max(_2976, 0.0));
                        float _2979 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
                        float _2983 = ((_2979 * _2979) * (_2961 + (-1.0))) + 1.0;
                        float _2984 = _2920 * _2960;
                        float _2985 = _2984 * _2984;
                        float _2988 = ((1.0 - _2985) * _2910) + _2985;
                        float _4185 = isnan(0.0) ? _2988 : (isnan(_2988) ? 0.0 : max(_2988, 0.0));
                        float _2989 = isnan(1.0) ? _4185 : (isnan(_4185) ? 1.0 : min(_4185, 1.0));
                        float _2990 = 1.0 - _2960;
                        float _3000 = (0.5 / (((_2989 * ((_2975 * _2990) + _2960)) + 9.9999999392252902907785028219223e-09) + (((_2989 * _2990) + _2960) * _2975))) * _2989;
                        float _4196 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0));
                        float _3011 = (((_2961 * 3.1415927410125732421875) * (isnan(1.0) ? _4196 : (isnan(_4196) ? 1.0 : min(_4196, 1.0)))) / ((_2983 * _2983) * ((_2927 * 2.1991131305694580078125) + 3.141590118408203125))) * _2916;
                        _2769 = (_2931 * _2879.x) + _2837;
                        _2770 = (_2931 * _2879.y) + _2838;
                        _2771 = (_2931 * _2879.z) + _2839;
                        _2766 = (_3011 * _2896.x) + _2834;
                        _2767 = (_3011 * _2896.y) + _2835;
                        _2768 = (_3011 * _2896.z) + _2836;
                        if (_2841 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2834 = _2766;
                            _2835 = _2767;
                            _2836 = _2768;
                            _2837 = _2769;
                            _2838 = _2770;
                            _2839 = _2771;
                            _2840 = _2841;
                        }
                    }
                    frontier_phi_70_pred = _2769;
                    frontier_phi_70_pred_1 = _2771;
                    frontier_phi_70_pred_2 = _2770;
                    frontier_phi_70_pred_3 = _2768;
                    frontier_phi_70_pred_4 = _2767;
                    frontier_phi_70_pred_5 = _2766;
                }
                _2526 = frontier_phi_70_pred;
                _2530 = frontier_phi_70_pred_1;
                _2528 = frontier_phi_70_pred_2;
                _2524 = frontier_phi_70_pred_3;
                _2522 = frontier_phi_70_pred_4;
                _2520 = frontier_phi_70_pred_5;
                uint _2696 = _2695 + 1u;
                if (_2696 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2689 = _2520;
                    _2690 = _2522;
                    _2691 = _2524;
                    _2692 = _2526;
                    _2693 = _2528;
                    _2694 = _2530;
                    _2695 = _2696;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2519 = _2520;
            _2521 = _2522;
            _2523 = _2524;
            _2525 = _2526;
            _2527 = _2528;
            _2529 = _2530;
        }
        uvec4 _2533 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2534 = _2533.z;
        uint _2536 = (_2534 >> 8u) & 15u;
        float _2657;
        float _2659;
        float _2661;
        float _2663;
        float _2665;
        float _2667;
        if (((4294967295u << _2536) & _2411) == 0u)
        {
            _2657 = _2519;
            _2659 = _2521;
            _2661 = _2523;
            _2663 = _2525;
            _2665 = _2527;
            _2667 = _2529;
        }
        else
        {
            float _2682 = inversesqrt(dot(vec3(_1815, _1816, _1817), vec3(_1815, _1816, _1817)));
            float _2683 = _2682 * _1815;
            float _2684 = _2682 * _1816;
            float _2685 = _2682 * _1817;
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2536 < ((_2534 >> 12u) & 15u))
            {
                float _2658;
                float _2660;
                float _2662;
                float _2664;
                float _2666;
                float _2668;
                float _2817 = _2519;
                float _2818 = _2521;
                float _2819 = _2523;
                float _2820 = _2525;
                float _2821 = _2527;
                float _2822 = _2529;
                uint _2823 = _2536;
                uint _2832;
                bool _2833;
                for (;;)
                {
                    _2832 = texelFetch(g_lightClassification, int((((_2405 << 5u) + (_2391 << 9u)) + (_2823 << 2u)) >> 2u)).x;
                    _2833 = _2832 == 0u;
                    float frontier_phi_76_pred;
                    float frontier_phi_76_pred_1;
                    float frontier_phi_76_pred_2;
                    float frontier_phi_76_pred_3;
                    float frontier_phi_76_pred_4;
                    float frontier_phi_76_pred_5;
                    if (_2833)
                    {
                        frontier_phi_76_pred = _2822;
                        frontier_phi_76_pred_1 = _2821;
                        frontier_phi_76_pred_2 = _2820;
                        frontier_phi_76_pred_3 = _2819;
                        frontier_phi_76_pred_4 = _2818;
                        frontier_phi_76_pred_5 = _2817;
                    }
                    else
                    {
                        float _3016;
                        float _3017;
                        float _3018;
                        float _3019;
                        float _3020;
                        float _3021;
                        float _3311;
                        float _3312;
                        float _3313;
                        float _3314;
                        float _3315;
                        float _3316;
                        float _3029 = _2817;
                        float _3030 = _2818;
                        float _3031 = _2819;
                        float _3032 = _2820;
                        float _3033 = _2821;
                        float _3034 = _2822;
                        uint _3035 = _2832;
                        uint _3036;
                        vec4 _3061;
                        float _3062;
                        vec4 _3077;
                        vec3 _3089;
                        vec4 _3105;
                        vec4 _3121;
                        float _3167;
                        bool _3168;
                        for (;;)
                        {
                            uint _3046 = ((_2823 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3035));
                            _3036 = (_3035 + 4294967295u) & _3035;
                            uint _3048 = _3046 * 40u;
                            _3061 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3048)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3048 + 3u)).x));
                            _3062 = _3061.w;
                            uint _3064 = (_3046 * 40u) + 4u;
                            _3077 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3064)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3064 + 3u)).x));
                            uint _3079 = (_3046 * 40u) + 8u;
                            _3089 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3079)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3079 + 2u)).x));
                            uint _3092 = (_3046 * 40u) + 16u;
                            _3105 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3092)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3092 + 3u)).x));
                            uint _3108 = (_3046 * 40u) + 20u;
                            _3121 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3108)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3108 + 3u)).x));
                            uint _3123 = (_3046 * 40u) + 24u;
                            vec4 _3136 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3123)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3123 + 3u)).x));
                            uint _3142 = (_3046 * 40u) + 28u;
                            vec4 _3155 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3142)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3142 + 3u)).x));
                            _3167 = fma(_1817, _3155.z, fma(_1816, _3155.y, _3155.x * _1815)) + _3155.w;
                            _3168 = !((fma(_1817, _3136.z, fma(_1816, _3136.y, _3136.x * _1815)) + _3136.w) <= 0.0);
                            float frontier_phi_82_pred;
                            float frontier_phi_82_pred_1;
                            float frontier_phi_82_pred_2;
                            float frontier_phi_82_pred_3;
                            float frontier_phi_82_pred_4;
                            float frontier_phi_82_pred_5;
                            if (_3168)
                            {
                                float _3195 = _3061.x - _1815;
                                float _3196 = _3061.y - _1816;
                                float _3197 = _3061.z - _1817;
                                float _3198 = dot(vec3(_3195, _3196, _3197), vec3(_3195, _3196, _3197));
                                float _3201 = inversesqrt(_3198);
                                float _3202 = _3201 * _3195;
                                float _3203 = _3201 * _3196;
                                float _3204 = _3201 * _3197;
                                float _3208 = 1.0 - (_3198 / (_3062 * _3062));
                                float _4207 = isnan(0.0) ? _3208 : (isnan(_3208) ? 0.0 : max(_3208, 0.0));
                                float _3209 = isnan(1.0) ? _4207 : (isnan(_4207) ? 1.0 : min(_4207, 1.0));
                                float _3213 = sqrt(_3198) * _3077.w;
                                float _3215 = 1.39999997615814208984375 / (_3213 + 1.39999997615814208984375);
                                float _3216 = _3215 * _3215;
                                float _3219 = ((1.0 - _3216) * dot(vec3(_3202, _3203, _3204), vec3(_696, _699, _702))) + _3216;
                                float _3222 = _3213 * _3213;
                                float _3226 = (fma(_1817, _3105.z, fma(_1816, _3105.y, _3105.x * _1815)) + _3105.w) / _3167;
                                float _3227 = (fma(_1817, _3121.z, fma(_1816, _3121.y, _3121.x * _1815)) + _3121.w) / _3167;
                                float _3231 = 1.0 - dot(vec2(_3226, _3227), vec2(_3226, _3227));
                                float _4223 = isnan(0.0) ? _3231 : (isnan(_3231) ? 0.0 : max(_3231, 0.0));
                                float _3232 = isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0));
                                float _3233 = _3232 * (((isnan(0.0) ? _3219 : (isnan(_3219) ? 0.0 : max(_3219, 0.0))) * _3209) / ((_3222 * 0.699999988079071044921875) + 1.0));
                                float _3245 = exp2(log2(1.0 / ((_3222 * 3.5) + 5.0)) * 0.25);
                                float _3246 = 1.0 - _756;
                                float _3253 = sqrt(1.0 - ((1.0 - (_3246 * _3246)) * (1.0 - (_3245 * _3245))));
                                float _3254 = _3253 * _3253;
                                float _3255 = _3254 * _3254;
                                float _3256 = _3202 - _2683;
                                float _3257 = _3203 - _2684;
                                float _3258 = _3204 - _2685;
                                float _3262 = inversesqrt(dot(vec3(_3256, _3257, _3258), vec3(_3256, _3257, _3258)));
                                float _3266 = dot(vec3(_696, _699, _702), vec3((-0.0) - _2683, (-0.0) - _2684, (-0.0) - _2685));
                                float _4234 = isnan(0.0) ? _3266 : (isnan(_3266) ? 0.0 : max(_3266, 0.0));
                                float _3269 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
                                float _3270 = dot(vec3(_696, _699, _702), vec3(_3262 * _3256, _3262 * _3257, _3262 * _3258));
                                float _4245 = isnan(0.0) ? _3270 : (isnan(_3270) ? 0.0 : max(_3270, 0.0));
                                float _3273 = isnan(1.0) ? _4245 : (isnan(_4245) ? 1.0 : min(_4245, 1.0));
                                float _3277 = ((_3273 * _3273) * (_3255 + (-1.0))) + 1.0;
                                float _3278 = _3215 * _3254;
                                float _3279 = _3278 * _3278;
                                float _3285 = ((1.0 - _3279) * dot(vec3(_696, _699, _702), vec3(_3202, _3203, _3204))) + _3279;
                                float _4256 = isnan(0.0) ? _3285 : (isnan(_3285) ? 0.0 : max(_3285, 0.0));
                                float _3286 = isnan(1.0) ? _4256 : (isnan(_4256) ? 1.0 : min(_4256, 1.0));
                                float _3287 = 1.0 - _3254;
                                float _3297 = (0.5 / (((_3286 * ((_3269 * _3287) + _3254)) + 9.9999999392252902907785028219223e-09) + (((_3286 * _3287) + _3254) * _3269))) * _3286;
                                float _4267 = isnan(0.0) ? _3297 : (isnan(_3297) ? 0.0 : max(_3297, 0.0));
                                float _3307 = (_3232 * _3209) * (((_3255 * 3.1415927410125732421875) * (isnan(1.0) ? _4267 : (isnan(_4267) ? 1.0 : min(_4267, 1.0)))) / ((_3277 * _3277) * ((_3222 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_82_pred = _3233 * _3077.z;
                                frontier_phi_82_pred_1 = _3233 * _3077.y;
                                frontier_phi_82_pred_2 = _3233 * _3077.x;
                                frontier_phi_82_pred_3 = _3307 * _3089.z;
                                frontier_phi_82_pred_4 = _3307 * _3089.y;
                                frontier_phi_82_pred_5 = _3307 * _3089.x;
                            }
                            else
                            {
                                frontier_phi_82_pred = 0.0;
                                frontier_phi_82_pred_1 = 0.0;
                                frontier_phi_82_pred_2 = 0.0;
                                frontier_phi_82_pred_3 = 0.0;
                                frontier_phi_82_pred_4 = 0.0;
                                frontier_phi_82_pred_5 = 0.0;
                            }
                            _3316 = frontier_phi_82_pred;
                            _3315 = frontier_phi_82_pred_1;
                            _3314 = frontier_phi_82_pred_2;
                            _3313 = frontier_phi_82_pred_3;
                            _3312 = frontier_phi_82_pred_4;
                            _3311 = frontier_phi_82_pred_5;
                            _3019 = _3314 + _3032;
                            _3020 = _3315 + _3033;
                            _3021 = _3316 + _3034;
                            _3016 = _3311 + _3029;
                            _3017 = _3312 + _3030;
                            _3018 = _3313 + _3031;
                            if (_3036 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3029 = _3016;
                                _3030 = _3017;
                                _3031 = _3018;
                                _3032 = _3019;
                                _3033 = _3020;
                                _3034 = _3021;
                                _3035 = _3036;
                                continue;
                            }
                        }
                        frontier_phi_76_pred = _3021;
                        frontier_phi_76_pred_1 = _3020;
                        frontier_phi_76_pred_2 = _3019;
                        frontier_phi_76_pred_3 = _3018;
                        frontier_phi_76_pred_4 = _3017;
                        frontier_phi_76_pred_5 = _3016;
                    }
                    _2668 = frontier_phi_76_pred;
                    _2666 = frontier_phi_76_pred_1;
                    _2664 = frontier_phi_76_pred_2;
                    _2662 = frontier_phi_76_pred_3;
                    _2660 = frontier_phi_76_pred_4;
                    _2658 = frontier_phi_76_pred_5;
                    uint _2824 = _2823 + 1u;
                    if (_2824 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2817 = _2658;
                        _2818 = _2660;
                        _2819 = _2662;
                        _2820 = _2664;
                        _2821 = _2666;
                        _2822 = _2668;
                        _2823 = _2824;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2666;
                frontier_phi_63_64_ladder_1 = _2668;
                frontier_phi_63_64_ladder_2 = _2664;
                frontier_phi_63_64_ladder_3 = _2662;
                frontier_phi_63_64_ladder_4 = _2660;
                frontier_phi_63_64_ladder_5 = _2658;
            }
            else
            {
                frontier_phi_63_64_ladder = _2527;
                frontier_phi_63_64_ladder_1 = _2529;
                frontier_phi_63_64_ladder_2 = _2525;
                frontier_phi_63_64_ladder_3 = _2523;
                frontier_phi_63_64_ladder_4 = _2521;
                frontier_phi_63_64_ladder_5 = _2519;
            }
            _2657 = frontier_phi_63_64_ladder_5;
            _2659 = frontier_phi_63_64_ladder_4;
            _2661 = frontier_phi_63_64_ladder_3;
            _2663 = frontier_phi_63_64_ladder_2;
            _2665 = frontier_phi_63_64_ladder;
            _2667 = frontier_phi_63_64_ladder_1;
        }
        float _2672 = isnan(1.0) ? _740 : (isnan(_740) ? 1.0 : min(_740, 1.0));
        _2424 = (_2672 * _2663) + _2103;
        _2426 = (_2672 * _2665) + _2104;
        _2428 = (_2672 * _2667) + _2105;
        _2430 = ((_2657 * 0.039999999105930328369140625) * _2672) + _2259;
        _2432 = ((_2659 * 0.039999999105930328369140625) * _2672) + _2260;
        _2434 = ((_2661 * 0.039999999105930328369140625) * _2672) + _2261;
    }
    else
    {
        _2424 = _2103;
        _2426 = _2104;
        _2428 = _2105;
        _2430 = _2259;
        _2432 = _2260;
        _2434 = _2261;
    }
    float _4283 = isnan(0.0) ? _726 : (isnan(_726) ? 0.0 : max(_726, 0.0));
    float _4294 = isnan(0.0) ? _727 : (isnan(_727) ? 0.0 : max(_727, 0.0));
    float _4305 = isnan(0.0) ? _728 : (isnan(_728) ? 0.0 : max(_728, 0.0));
    float _2451 = ((isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0))) * (_2424 + ((isnan(0.0) ? _1471 : (isnan(_1471) ? 0.0 : max(_1471, 0.0))) * _740))) + ((_2430 + ((isnan(0.0) ? _1762 : (isnan(_1762) ? 0.0 : max(_1762, 0.0))) * _1550)) * cbPerFrame._m0[3u].x);
    float _2452 = ((isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0))) * (_2426 + ((isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0))) * _740))) + ((_2432 + ((isnan(0.0) ? _1765 : (isnan(_1765) ? 0.0 : max(_1765, 0.0))) * _1550)) * cbPerFrame._m0[3u].x);
    float _2453 = ((isnan(1.0) ? _4305 : (isnan(_4305) ? 1.0 : min(_4305, 1.0))) * (_2428 + ((isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0))) * _740))) + ((_2434 + ((isnan(0.0) ? _1768 : (isnan(_1768) ? 0.0 : max(_1768, 0.0))) * _1550)) * cbPerFrame._m0[3u].x);
    uint _2457 = _715 + 6u;
    float _2465 = _675 / cbSceneParam._m0[86u].x;
    float _2466 = _676 / cbSceneParam._m0[86u].y;
    vec4 _2480 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2465, _2466, (log2((isnan(cbSceneParam._m0[77u].w) ? _662 : (isnan(_662) ? cbSceneParam._m0[77u].w : min(_662, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2482 = _2480.x;
    float _2483 = _2480.y;
    float _2484 = _2480.z;
    float _2485 = _2480.w;
    float _2581;
    float _2583;
    float _2585;
    float _2587;
    if (_662 > cbSceneParam._m0[78u].w)
    {
        float _2544 = isnan(_662) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _662 : min(cbSceneParam._m0[80u].w, _662));
        float _2545 = _2544 / _662;
        float _2556 = _2545 * _277;
        float _2557 = _278 * _2545;
        float _2558 = (-0.0) - _2557;
        float _2559 = _2545 * _279;
        float _2561 = (cbSceneParam._m0[77u].w * _2558) / _2544;
        float _2562 = _2561 + cbSceneParam._m0[79u].w;
        float _2563 = cbSceneParam._m0[79u].w - _2557;
        float _2569 = sqrt(((_2556 * _2556) + (_2557 * _2557)) + (_2559 * _2559));
        float _2572 = (1.0 - (cbSceneParam._m0[77u].w / _2544)) * _2569;
        float _2577 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2579 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2779;
        if (abs((_2558 - _2561) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2779 = ((((_2562 > 0.0) ? exp2(_2577 * _2562) : (2.0 - exp2(_2579 * _2562))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2572;
        }
        else
        {
            float _2718 = 1.0 / cbSceneParam._m0[80u].x;
            float _2719 = isnan(_2563) ? _2562 : (isnan(_2562) ? _2563 : max(_2562, _2563));
            float _2720 = isnan(_2563) ? _2562 : (isnan(_2562) ? _2563 : min(_2562, _2563));
            float _2729 = isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : min(_2719, 0.0));
            float _2730 = isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : min(_2720, 0.0));
            _2779 = ((abs(_2569 / _2558) * cbSceneParam._m0[80u].y) * ((((_2729 - _2730) * 2.0) - ((exp2(_2577 * (isnan(0.0) ? _2719 : (isnan(_2719) ? 0.0 : max(_2719, 0.0)))) - exp2(_2577 * (isnan(0.0) ? _2720 : (isnan(_2720) ? 0.0 : max(_2720, 0.0))))) * _2718)) - ((exp2(_2579 * _2729) - exp2(_2579 * _2730)) * _2718))) + (_2572 * cbSceneParam._m0[80u].z);
        }
        vec4 _2781 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2465, _2466, 1.0), 0.0);
        float _2790 = exp2((_2779 * (-1.44269502162933349609375)) * (1.0 - _2781.w));
        float _2791 = log2(_2790);
        float _2807 = log2(_2485);
        _2581 = (exp2(_2807 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2791 * cbSceneParam._m0[78u].x)) * _2781.x) / cbSceneParam._m0[78u].x)) + _2482;
        _2583 = (exp2(_2807 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2791 * cbSceneParam._m0[78u].y)) * _2781.y) / cbSceneParam._m0[78u].y)) + _2483;
        _2585 = (exp2(_2807 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2791 * cbSceneParam._m0[78u].z)) * _2781.z) / cbSceneParam._m0[78u].z)) + _2484;
        _2587 = _2790 * _2485;
    }
    else
    {
        _2581 = _2482;
        _2583 = _2483;
        _2585 = _2484;
        _2587 = _2485;
    }
    float _2599 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2600 = _2599 == 3.0;
    float _2601 = log2(_2587);
    float _2608 = exp2(_2601 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0)));
    float _2609 = exp2(_2601 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2452 : (isnan(_2452) ? 0.0 : max(_2452, 0.0)));
    float _2610 = exp2(_2601 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2453 : (isnan(_2453) ? 0.0 : max(_2453, 0.0)));
    float _2619 = (_2599 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2619 * (_2600 ? _2608 : (_2608 + (cbSceneParam._m0[72u].w * _2581)));
    SV_Target.y = _2619 * (_2600 ? _2609 : (_2609 + (cbSceneParam._m0[72u].w * _2583)));
    SV_Target.z = _2619 * (_2600 ? _2610 : (_2610 + (cbSceneParam._m0[72u].w * _2585)));
    SV_Target.w = cbInstanceData._m0[_2457].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2457].w;
}


