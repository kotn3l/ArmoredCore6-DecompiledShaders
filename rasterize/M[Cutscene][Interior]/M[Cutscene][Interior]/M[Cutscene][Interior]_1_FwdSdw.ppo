#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _623;
uint _2062;
uint _2063;
uint _2064;
uint _2277;
uint _2278;
uint _2279;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _198 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _246 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _256 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _246);
    float _257 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _246);
    float _258 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _246);
    vec4 _277 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _312 = cbMtdParam._m0[24u].x + _256;
    float _313 = cbMtdParam._m0[24u].y + _257;
    float _314 = cbMtdParam._m0[24u].z + _258;
    float _331 = (-0.0) - dot(vec3(_312, _313, _314), vec3(_187 * _180, _187 * _181, _187 * _182));
    float _332 = (-0.0) - dot(vec3(_312, _313, _314), vec3(_198 * TANGENT.x, _198 * TANGENT.y, _198 * TANGENT.z));
    float _333 = (-0.0) - dot(vec3(_312, _313, _314), vec3((-0.0) - (NORMAL.x * _194), (-0.0) - (NORMAL.y * _194), (-0.0) - (NORMAL.z * _194)));
    float _337 = inversesqrt(dot(vec3(_331, _332, _333), vec3(_331, _332, _333)));
    float _340 = _337 * _333;
    float _343 = ((_337 * _331) + (((_277.x * 2.0) + (-1.0)) * cbMtdParam._m0[22u].x)) * cbMtdParam._m0[20u].w;
    float _344 = ((_337 * _332) + (((_277.y * 2.0) + (-1.0)) * cbMtdParam._m0[22u].y)) * cbMtdParam._m0[20u].z;
    float _345 = fract(TEXCOORD.x);
    float _346 = fract(TEXCOORD.y);
    float _352;
    if (_343 > 0.0)
    {
        _352 = (1.0 - _345) / _343;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_343 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _345) / _343;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _352 = frontier_phi_3_2_ladder;
    }
    float _360;
    if (_344 > 0.0)
    {
        _360 = (1.0 - _346) / _344;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_344 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _346) / _344;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _360 = frontier_phi_7_6_ladder;
    }
    float _364 = (_340 > 0.0) ? (cbMtdParam._m0[16u].x / _340) : 5000.0;
    float _365 = isnan(_360) ? _352 : (isnan(_352) ? _360 : min(_352, _360));
    float _366 = isnan(_364) ? _365 : (isnan(_365) ? _364 : min(_365, _364));
    float _370 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _377 = ((_366 * _340) + _370) / _370;
    vec4 _402 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * ((((((_345 + (-0.5)) + (_366 * _343)) / _377) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * ((((((_346 + (-0.5)) + (_366 * _344)) / _377) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    float _430 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _434 = inversesqrt(dot(vec3(_256, _257, _258), vec3(_256, _257, _258)));
    float _435 = _256 * _434;
    float _436 = _257 * _434;
    float _437 = _258 * _434;
    float _443 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _444 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _453 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_443 * cbSceneParam._m0[86u].x, _444 * cbSceneParam._m0[86u].y));
    float _456 = _453.x * TEXCOORD_4.z;
    float _457 = (-0.0) - _435;
    float _458 = (-0.0) - _436;
    float _459 = (-0.0) - _437;
    float _481 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _485 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _489 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _622;
    float _624;
    float _625;
    float _626;
    float _627;
    float _628;
    float _629;
    float _630;
    float _631;
    float _632;
    float _633;
    float _634;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _545 = (cbModelParam._m0[37u].x * ((((fma(_489, cbModelParam._m0[26u].z, fma(_485, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _481)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _547 = (cbModelParam._m0[37u].y * ((((fma(_489, cbModelParam._m0[27u].z, fma(_485, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _481)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _548 = (((((fma(_489, cbModelParam._m0[28u].z, fma(_485, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _481)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _551 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_545, _547, _548), 0.0);
        vec4 _558 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_545, _547, _548), 0.0);
        vec4 _565 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_545, _547, _548), 0.0);
        vec4 _572 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_545, _547, _548), 0.0);
        float _585 = exp2((_551.w + (-0.5)) * 20.0) * 2.0;
        float _595 = exp2((_558.w + (-0.5)) * 20.0) * 2.0;
        float _605 = exp2((_565.w + (-0.5)) * 20.0) * 2.0;
        float _615 = exp2((_572.w + (-0.5)) * 20.0) * 2.0;
        float _616 = _615 * (_572.x + (-0.5));
        float _617 = _615 * (_572.y + (-0.5));
        float _618 = _615 * (_572.z + (-0.5));
        _622 = _585 * (_551.z + (-0.5));
        _624 = _585 * (_551.y + (-0.5));
        _625 = _585 * (_551.x + (-0.5));
        _626 = _595 * (_558.z + (-0.5));
        _627 = _595 * (_558.y + (-0.5));
        _628 = _595 * (_558.x + (-0.5));
        _629 = _605 * (_565.z + (-0.5));
        _630 = _605 * (_565.y + (-0.5));
        _631 = _605 * (_565.x + (-0.5));
        _632 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
        _633 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
        _634 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    }
    else
    {
        _622 = _623;
        _624 = _623;
        _625 = _623;
        _626 = _623;
        _627 = _623;
        _628 = _623;
        _629 = _623;
        _630 = _623;
        _631 = _623;
        _632 = _623;
        _633 = _623;
        _634 = _623;
    }
    float _762;
    float _763;
    float _764;
    float _765;
    float _766;
    float _767;
    float _768;
    float _769;
    float _770;
    float _771;
    float _772;
    float _773;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _688 = (cbModelParam._m0[38u].x * ((((fma(_489, cbModelParam._m0[30u].z, fma(_485, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _481)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _689 = (cbModelParam._m0[38u].y * ((((fma(_489, cbModelParam._m0[31u].z, fma(_485, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _481)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _690 = (((((fma(_489, cbModelParam._m0[32u].z, fma(_485, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _481)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _692 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_688, _689, _690), 0.0);
        vec4 _699 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_688, _689, _690), 0.0);
        vec4 _706 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_688, _689, _690), 0.0);
        vec4 _713 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_688, _689, _690), 0.0);
        float _725 = exp2((_692.w + (-0.5)) * 20.0) * 2.0;
        float _735 = exp2((_699.w + (-0.5)) * 20.0) * 2.0;
        float _745 = exp2((_706.w + (-0.5)) * 20.0) * 2.0;
        float _755 = exp2((_713.w + (-0.5)) * 20.0) * 2.0;
        float _756 = _755 * (_713.x + (-0.5));
        float _757 = _755 * (_713.y + (-0.5));
        float _758 = _755 * (_713.z + (-0.5));
        _762 = _725 * (_692.z + (-0.5));
        _763 = _725 * (_692.y + (-0.5));
        _764 = _725 * (_692.x + (-0.5));
        _765 = _735 * (_699.z + (-0.5));
        _766 = _735 * (_699.y + (-0.5));
        _767 = _735 * (_699.x + (-0.5));
        _768 = _745 * (_706.z + (-0.5));
        _769 = _745 * (_706.y + (-0.5));
        _770 = _745 * (_706.x + (-0.5));
        _771 = isnan(0.0) ? _758 : (isnan(_758) ? 0.0 : max(_758, 0.0));
        _772 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
        _773 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    }
    else
    {
        _762 = _623;
        _763 = _623;
        _764 = _623;
        _765 = _623;
        _766 = _623;
        _767 = _623;
        _768 = _623;
        _769 = _623;
        _770 = _623;
        _771 = _623;
        _772 = _623;
        _773 = _623;
    }
    float _788 = _435 * (-0.5);
    float _789 = _436 * (-0.5);
    float _790 = _437 * (-0.5);
    float _791 = dot(vec4(_788, _789, _790, 1.0), vec4(_764, _767, _770, _773));
    float _794 = dot(vec4(_788, _789, _790, 1.0), vec4(_763, _766, _769, _772));
    float _797 = dot(vec4(_788, _789, _790, 1.0), vec4(_762, _765, _768, _771));
    float _832;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _804 = dot(vec4(_788, _789, _790, 1.0), vec4(_622, _626, _629, _632));
        float _808 = dot(vec4(_788, _789, _790, 1.0), vec4(_624, _627, _630, _633));
        float _812 = dot(vec4(_788, _789, _790, 1.0), vec4(_625, _628, _631, _634));
        float _819 = dot(vec4(cbModelParam._m0[39u]), vec4(_788, _789, _790, 1.0));
        _832 = dot(vec3(isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0)), isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0)), isnan(0.0) ? _804 : (isnan(_804) ? 0.0 : max(_804, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_819) ? 0.0 : (isnan(0.0) ? _819 : max(0.0, _819))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _832 = 1.0;
    }
    float _843;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _834 = dot(vec4(cbModelParam._m0[40u]), vec4(_788, _789, _790, 1.0));
        _843 = dot(vec3(isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0)), isnan(0.0) ? _794 : (isnan(_794) ? 0.0 : max(_794, 0.0)), isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_834) ? 0.0 : (isnan(0.0) ? _834 : max(0.0, _834))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _843 = 1.0;
    }
    float _847 = (_843 * cbModelParam._m0[1u].x) + (_832 * (1.0 - cbModelParam._m0[1u].x));
    float _853 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _937;
    float _939;
    float _941;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _904 = fma(_489, cbModelParam._m0[13u].z, fma(_485, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _481)) + cbModelParam._m0[13u].w;
        float _908 = fma(_489, cbModelParam._m0[14u].z, fma(_485, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _481)) + cbModelParam._m0[14u].w;
        float _912 = fma(_489, cbModelParam._m0[15u].z, fma(_485, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _481)) + cbModelParam._m0[15u].w;
        float _915 = fma(_459, cbModelParam._m0[13u].z, fma(_458, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _457));
        float _918 = fma(_459, cbModelParam._m0[14u].z, fma(_458, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _457));
        float _921 = fma(_459, cbModelParam._m0[15u].z, fma(_458, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _457));
        float _947;
        if (_915 > 0.0)
        {
            _947 = abs((1.0 - _904) / _915);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_915 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_904 + 1.0) / _915);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _947 = frontier_phi_22_20_ladder;
        }
        float _1137;
        if (_918 > 0.0)
        {
            _1137 = abs((1.0 - _908) / _918);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_918 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_908 + 1.0) / _918);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1137 = frontier_phi_31_27_ladder;
        }
        float _1491;
        if (_921 > 0.0)
        {
            _1491 = abs((1.0 - _912) / _921);
        }
        else
        {
            float frontier_phi_43_38_ladder;
            if (_921 < 0.0)
            {
                frontier_phi_43_38_ladder = abs((_912 + 1.0) / _921);
            }
            else
            {
                frontier_phi_43_38_ladder = 5000.0;
            }
            _1491 = frontier_phi_43_38_ladder;
        }
        float _1493 = isnan(_1137) ? _947 : (isnan(_947) ? _1137 : min(_947, _1137));
        float _1494 = isnan(_1491) ? _1493 : (isnan(_1493) ? _1491 : min(_1493, _1491));
        float _1498 = (_1494 * _915) + _904;
        float _1499 = (_1494 * _918) + _908;
        float _1500 = (_1494 * _921) + _912;
        float _1501 = _1494 * 9.9999997473787516355514526367188e-05;
        float _1503 = (-1.0) - _1501;
        float _1505 = _1501 + 1.0;
        float frontier_phi_21_43_ladder;
        float frontier_phi_21_43_ladder_1;
        float frontier_phi_21_43_ladder_2;
        if ((_1500 > _1505) || ((_1500 < _1503) || ((_1499 > _1505) || ((_1499 < _1503) || ((_1498 < _1503) || (_1498 > _1505))))))
        {
            frontier_phi_21_43_ladder = 0.0;
            frontier_phi_21_43_ladder_1 = 0.0;
            frontier_phi_21_43_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1734 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1500, cbModelParam._m0[9u].z, fma(_1499, cbModelParam._m0[9u].y, _1498 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1500, cbModelParam._m0[10u].z, fma(_1499, cbModelParam._m0[10u].y, _1498 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1500, cbModelParam._m0[11u].z, fma(_1499, cbModelParam._m0[11u].y, _1498 * cbModelParam._m0[11u].x))), _853);
            frontier_phi_21_43_ladder = _1734.y * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_1 = _1734.z * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_2 = _1734.x * cbModelParam._m0[1u].y;
        }
        _937 = frontier_phi_21_43_ladder_2;
        _939 = frontier_phi_21_43_ladder;
        _941 = frontier_phi_21_43_ladder_1;
    }
    else
    {
        vec4 _925 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_457, _458, _459), _853);
        _937 = _925.x * cbModelParam._m0[1u].y;
        _939 = _925.y * cbModelParam._m0[1u].y;
        _941 = _925.z * cbModelParam._m0[1u].y;
    }
    float _944 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1034;
    float _1036;
    float _1038;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _998 = fma(_489, cbModelParam._m0[21u].z, fma(_485, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _481)) + cbModelParam._m0[21u].w;
        float _1002 = fma(_489, cbModelParam._m0[22u].z, fma(_485, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _481)) + cbModelParam._m0[22u].w;
        float _1006 = fma(_489, cbModelParam._m0[23u].z, fma(_485, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _481)) + cbModelParam._m0[23u].w;
        float _1009 = fma(_459, cbModelParam._m0[21u].z, fma(_458, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _457));
        float _1012 = fma(_459, cbModelParam._m0[22u].z, fma(_458, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _457));
        float _1015 = fma(_459, cbModelParam._m0[23u].z, fma(_458, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _457));
        float _1142;
        if (_1009 > 0.0)
        {
            _1142 = abs((1.0 - _998) / _1009);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1009 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_998 + 1.0) / _1009);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1142 = frontier_phi_33_29_ladder;
        }
        float _1518;
        if (_1012 > 0.0)
        {
            _1518 = abs((1.0 - _1002) / _1012);
        }
        else
        {
            float frontier_phi_45_40_ladder;
            if (_1012 < 0.0)
            {
                frontier_phi_45_40_ladder = abs((_1002 + 1.0) / _1012);
            }
            else
            {
                frontier_phi_45_40_ladder = 5000.0;
            }
            _1518 = frontier_phi_45_40_ladder;
        }
        float _1850;
        if (_1015 > 0.0)
        {
            _1850 = abs((1.0 - _1006) / _1015);
        }
        else
        {
            float frontier_phi_57_52_ladder;
            if (_1015 < 0.0)
            {
                frontier_phi_57_52_ladder = abs((_1006 + 1.0) / _1015);
            }
            else
            {
                frontier_phi_57_52_ladder = 5000.0;
            }
            _1850 = frontier_phi_57_52_ladder;
        }
        float _1852 = isnan(_1518) ? _1142 : (isnan(_1142) ? _1518 : min(_1142, _1518));
        float _1853 = isnan(_1850) ? _1852 : (isnan(_1852) ? _1850 : min(_1852, _1850));
        float _1857 = (_1853 * _1009) + _998;
        float _1858 = (_1853 * _1012) + _1002;
        float _1859 = (_1853 * _1015) + _1006;
        float _1860 = _1853 * 9.9999997473787516355514526367188e-05;
        float _1861 = (-1.0) - _1860;
        float _1863 = _1860 + 1.0;
        float frontier_phi_30_57_ladder;
        float frontier_phi_30_57_ladder_1;
        float frontier_phi_30_57_ladder_2;
        if ((_1859 > _1863) || ((_1859 < _1861) || ((_1858 > _1863) || ((_1858 < _1861) || ((_1857 < _1861) || (_1857 > _1863))))))
        {
            frontier_phi_30_57_ladder = 0.0;
            frontier_phi_30_57_ladder_1 = 0.0;
            frontier_phi_30_57_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1965 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1859, cbModelParam._m0[17u].z, fma(_1858, cbModelParam._m0[17u].y, _1857 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1859, cbModelParam._m0[18u].z, fma(_1858, cbModelParam._m0[18u].y, _1857 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1859, cbModelParam._m0[19u].z, fma(_1858, cbModelParam._m0[19u].y, _1857 * cbModelParam._m0[19u].x))), _944);
            frontier_phi_30_57_ladder = _1965.x * cbModelParam._m0[1u].z;
            frontier_phi_30_57_ladder_1 = _1965.y * cbModelParam._m0[1u].z;
            frontier_phi_30_57_ladder_2 = _1965.z * cbModelParam._m0[1u].z;
        }
        _1034 = frontier_phi_30_57_ladder;
        _1036 = frontier_phi_30_57_ladder_1;
        _1038 = frontier_phi_30_57_ladder_2;
    }
    else
    {
        vec4 _1018 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_457, _458, _459), _944);
        _1034 = _1018.x * cbModelParam._m0[1u].z;
        _1036 = _1018.y * cbModelParam._m0[1u].z;
        _1038 = _1018.z * cbModelParam._m0[1u].z;
    }
    float _1050 = _456 * 0.01200000010430812835693359375;
    float _1052 = _1050 * ((cbModelParam._m0[1u].w * (_1034 - _937)) + _937);
    float _1053 = _1050 * ((cbModelParam._m0[1u].w * (_1036 - _939)) + _939);
    float _1054 = _1050 * ((cbModelParam._m0[1u].w * (_1038 - _941)) + _941);
    float _1075 = fma(_1054, cbSceneParam._m0[89u].z, fma(_1053, cbSceneParam._m0[89u].y, _1052 * cbSceneParam._m0[89u].x));
    float _1078 = fma(_1054, cbSceneParam._m0[90u].z, fma(_1053, cbSceneParam._m0[90u].y, _1052 * cbSceneParam._m0[90u].x));
    float _1081 = fma(_1054, cbSceneParam._m0[91u].z, fma(_1053, cbSceneParam._m0[91u].y, _1052 * cbSceneParam._m0[91u].x));
    float _1116 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1120 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1124 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1128 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1129 = _1116 / _1128;
    float _1130 = _1120 / _1128;
    float _1131 = _1124 / _1128;
    float _1279;
    float _1280;
    float _1281;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1158 = ((uint(_1131 > cbSceneParam._m0[59u].y) + uint(_1131 > cbSceneParam._m0[59u].x)) + uint(_1131 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1159 = _1158 + 43u;
        uint _1167 = _1158 + 44u;
        uint _1175 = _1158 + 45u;
        uint _1183 = _1158 + 46u;
        float _1194 = fma(_1128, cbSceneParam._m0[_1159].w, fma(_1124, cbSceneParam._m0[_1159].z, fma(_1120, cbSceneParam._m0[_1159].y, _1116 * cbSceneParam._m0[_1159].x)));
        float _1198 = fma(_1128, cbSceneParam._m0[_1167].w, fma(_1124, cbSceneParam._m0[_1167].z, fma(_1120, cbSceneParam._m0[_1167].y, _1116 * cbSceneParam._m0[_1167].x)));
        float _1206 = fma(_1128, cbSceneParam._m0[_1183].w, fma(_1124, cbSceneParam._m0[_1183].z, fma(_1120, cbSceneParam._m0[_1183].y, _1116 * cbSceneParam._m0[_1183].x)));
        float _1211 = cbSceneParam._m0[33u].z * _1206;
        float _1213 = cbSceneParam._m0[33u].w * _1206;
        float _1216 = fma(_1128, cbSceneParam._m0[_1175].w, fma(_1124, cbSceneParam._m0[_1175].z, fma(_1120, cbSceneParam._m0[_1175].y, _1116 * cbSceneParam._m0[_1175].x))) / _1206;
        float _1264 = (cbSceneParam._m0[33u].x - sqrt(((_1130 * _1130) + (_1129 * _1129)) + (_1131 * _1131))) * cbSceneParam._m0[33u].y;
        float _2623 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1272 = (isnan(1.0) ? _2623 : (isnan(_2623) ? 1.0 : min(_2623, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1211 + _1194) / _1206, (_1213 + _1198) / _1206), _1216), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1213 + _1194) / _1206, (_1198 - _1211) / _1206), _1216), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1194 - _1211) / _1206, (_1198 - _1213) / _1206), _1216), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1194 - _1213) / _1206, (_1211 + _1198) / _1206), _1216), 0.0)).x), vec4(0.25)));
        _1279 = 1.0 - (_1272 * cbSceneParam._m0[34u].x);
        _1280 = 1.0 - (_1272 * cbSceneParam._m0[34u].y);
        _1281 = 1.0 - (_1272 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1279 = 1.0;
        _1280 = 1.0;
        _1281 = 1.0;
    }
    float _1345;
    float _1347;
    float _1349;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1333 = fma(_1128, cbSceneParam._m0[63u].w, fma(_1124, cbSceneParam._m0[63u].z, fma(_1120, cbSceneParam._m0[63u].y, _1116 * cbSceneParam._m0[63u].x)));
        float _1334 = fma(_1128, cbSceneParam._m0[60u].w, fma(_1124, cbSceneParam._m0[60u].z, fma(_1120, cbSceneParam._m0[60u].y, _1116 * cbSceneParam._m0[60u].x))) / _1333;
        float _1335 = fma(_1128, cbSceneParam._m0[61u].w, fma(_1124, cbSceneParam._m0[61u].z, fma(_1120, cbSceneParam._m0[61u].y, _1116 * cbSceneParam._m0[61u].x))) / _1333;
        float frontier_phi_42_41_ladder;
        float frontier_phi_42_41_ladder_1;
        float frontier_phi_42_41_ladder_2;
        if ((((_1334 >= cbSceneParam._m0[64u].x) && (_1335 >= cbSceneParam._m0[64u].y)) && (_1334 <= cbSceneParam._m0[64u].z)) && (_1335 <= cbSceneParam._m0[64u].w))
        {
            float _1531 = fma(_1128, cbSceneParam._m0[62u].w, fma(_1124, cbSceneParam._m0[62u].z, fma(_1120, cbSceneParam._m0[62u].y, _1116 * cbSceneParam._m0[62u].x))) / _1333;
            float _1535 = isnan(cbSceneParam._m0[41u].w) ? _1531 : (isnan(_1531) ? cbSceneParam._m0[41u].w : max(_1531, cbSceneParam._m0[41u].w));
            float _1578 = (cbSceneParam._m0[33u].x - sqrt(((_1130 * _1130) + (_1129 * _1129)) + (_1131 * _1131))) * cbSceneParam._m0[33u].y;
            float _2639 = isnan(0.0) ? _1578 : (isnan(_1578) ? 0.0 : max(_1578, 0.0));
            float _1585 = (isnan(1.0) ? _2639 : (isnan(_2639) ? 1.0 : min(_2639, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1334, cbSceneParam._m0[33u].w + _1335), _1535), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1334, _1335 - cbSceneParam._m0[33u].z), _1535), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1334 - cbSceneParam._m0[33u].z, _1335 - cbSceneParam._m0[33u].w), _1535), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1334 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1335), _1535), 0.0)).x), vec4(0.25)));
            float _1589 = 1.0 - (_1585 * cbSceneParam._m0[34u].x);
            float _1590 = 1.0 - (_1585 * cbSceneParam._m0[34u].y);
            float _1591 = 1.0 - (_1585 * cbSceneParam._m0[34u].z);
            frontier_phi_42_41_ladder = isnan(_1591) ? _1281 : (isnan(_1281) ? _1591 : min(_1281, _1591));
            frontier_phi_42_41_ladder_1 = isnan(_1590) ? _1280 : (isnan(_1280) ? _1590 : min(_1280, _1590));
            frontier_phi_42_41_ladder_2 = isnan(_1589) ? _1279 : (isnan(_1279) ? _1589 : min(_1279, _1589));
        }
        else
        {
            frontier_phi_42_41_ladder = _1281;
            frontier_phi_42_41_ladder_1 = _1280;
            frontier_phi_42_41_ladder_2 = _1279;
        }
        _1345 = frontier_phi_42_41_ladder_2;
        _1347 = frontier_phi_42_41_ladder_1;
        _1349 = frontier_phi_42_41_ladder;
    }
    else
    {
        _1345 = _1279;
        _1347 = _1280;
        _1349 = _1281;
    }
    uint _1351 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1355 = floatBitsToUint(cbInstanceData._m0[_1351 + 5u]);
    uint _1357 = _1355.x * 14u;
    uint _1358 = _1357 + 13u;
    float _1363 = _456 + (-1.0);
    float _1366 = (cbLight._m0[_1358].x * _1363) + 1.0;
    float _1367 = (cbLight._m0[_1358].y * _1363) + 1.0;
    uint _1368 = _1357 + 8u;
    float _1379 = cbLight._m0[_1357].x + _435;
    float _1380 = cbLight._m0[_1357].y + _436;
    float _1381 = cbLight._m0[_1357].z + _437;
    float _1385 = inversesqrt(dot(vec3(_1379, _1380, _1381), vec3(_1379, _1380, _1381)));
    float _1389 = dot(vec3(0.0), vec3(cbLight._m0[_1357].xyz));
    float _2665 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
    float _1392 = isnan(1.0) ? _2665 : (isnan(_2665) ? 1.0 : min(_2665, 1.0));
    float _1393 = dot(vec3(0.0), vec3(_435, _436, _437));
    float _2676 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
    float _1396 = isnan(1.0) ? _2676 : (isnan(_2676) ? 1.0 : min(_2676, 1.0));
    float _1397 = dot(vec3(cbLight._m0[_1357].xyz), vec3(_1379 * _1385, _1380 * _1385, _1381 * _1385));
    float _2687 = isnan(0.0) ? _1397 : (isnan(_1397) ? 0.0 : max(_1397, 0.0));
    float _1408 = (exp2(log2(1.0 - (isnan(1.0) ? _2687 : (isnan(_2687) ? 1.0 : min(_2687, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1414 = (0.5 / ((_1392 + 9.9999999392252902907785028219223e-09) + _1396)) * _1392;
    float _2698 = isnan(0.0) ? _1414 : (isnan(_1414) ? 0.0 : max(_1414, 0.0));
    float _1416 = (isnan(1.0) ? _2698 : (isnan(_2698) ? 1.0 : min(_2698, 1.0))) * 0.31831014156341552734375;
    float _1418 = isnan(1.0) ? _1366 : (isnan(_1366) ? 1.0 : min(_1366, 1.0));
    uint _1431 = _1357 + 9u;
    uint _1437 = _1357 | 1u;
    float _1443 = cbLight._m0[_1437].x + _435;
    float _1444 = cbLight._m0[_1437].y + _436;
    float _1445 = cbLight._m0[_1437].z + _437;
    float _1449 = inversesqrt(dot(vec3(_1443, _1444, _1445), vec3(_1443, _1444, _1445)));
    float _1453 = dot(vec3(0.0), vec3(cbLight._m0[_1437].xyz));
    float _2714 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
    float _1456 = isnan(1.0) ? _2714 : (isnan(_2714) ? 1.0 : min(_2714, 1.0));
    float _1457 = dot(vec3(cbLight._m0[_1437].xyz), vec3(_1443 * _1449, _1444 * _1449, _1445 * _1449));
    float _2725 = isnan(0.0) ? _1457 : (isnan(_1457) ? 0.0 : max(_1457, 0.0));
    float _1466 = (exp2(log2(1.0 - (isnan(1.0) ? _2725 : (isnan(_2725) ? 1.0 : min(_2725, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1470 = (0.5 / ((_1456 + 9.9999999392252902907785028219223e-09) + _1396)) * _1456;
    float _2736 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
    float _1472 = (isnan(1.0) ? _2736 : (isnan(_2736) ? 1.0 : min(_2736, 1.0))) * 0.31831014156341552734375;
    float _1473 = isnan(1.0) ? _1367 : (isnan(_1367) ? 1.0 : min(_1367, 1.0));
    float _1483 = (((_1466 * cbLight._m0[_1431].x) * _1472) * _1473) + ((((cbLight._m0[_1368].x * _1345) * _1408) * _1416) * _1418);
    float _1484 = (((_1466 * cbLight._m0[_1431].y) * _1472) * _1473) + ((((cbLight._m0[_1368].y * _1347) * _1408) * _1416) * _1418);
    float _1485 = (((_1466 * cbLight._m0[_1431].z) * _1472) * _1473) + ((((cbLight._m0[_1368].z * _1349) * _1408) * _1416) * _1418);
    float _1649;
    float _1651;
    float _1653;
    if (_1355.y == 0u)
    {
        uvec4 _1603 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1604 = _1603.x;
        uint _1615 = uint((float(_1603.y) * floor(float(uint(cbSceneParam._m0[85u].y * _444) / _1604))) + floor(float(uint(cbSceneParam._m0[85u].x * _443) / _1604)));
        float _1625 = (log2(_1131 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1626 = isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0));
        uint _1629 = uint(isnan(14.0) ? _1626 : (isnan(_1626) ? 14.0 : min(_1626, 14.0)));
        uvec4 _1634 = texelFetch(g_lightClusterGridBuffer, int(((_1629 << 2u) + (_1615 << 6u)) >> 2u));
        uint _1635 = _1634.x;
        uint _1636 = _1603.z;
        float _1743;
        float _1745;
        float _1747;
        if (((((1u << ((_1636 >> 4u) & 15u)) + 4294967295u) & _1635) == 0u) || ((_1636 & 240u) == 0u))
        {
            _1743 = 0.0;
            _1745 = 0.0;
            _1747 = 0.0;
        }
        else
        {
            float _1744;
            float _1746;
            float _1748;
            float _1896 = 0.0;
            float _1897 = 0.0;
            float _1898 = 0.0;
            uint _1899 = 0u;
            uint _1908;
            bool _1909;
            for (;;)
            {
                _1908 = texelFetch(g_lightClassification, int((((_1629 << 5u) + (_1615 << 9u)) + (_1899 << 2u)) >> 2u)).x;
                _1909 = _1908 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                if (_1909)
                {
                    frontier_phi_66_pred = _1898;
                    frontier_phi_66_pred_1 = _1897;
                    frontier_phi_66_pred_2 = _1896;
                }
                else
                {
                    float _2032;
                    float _2033;
                    float _2034;
                    uint _2035;
                    _2032 = _1896;
                    _2033 = _1897;
                    _2034 = _1898;
                    _2035 = _1908;
                    float _1970;
                    float _1971;
                    float _1972;
                    for (;;)
                    {
                        uint _2039 = uint(findLSB(_2035)) + (_1899 << 5u);
                        uint _2036 = (_2035 + 4294967295u) & _2035;
                        uint _2041 = _2039 * 48u;
                        vec4 _2055 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2041)).x, texelFetch(g_PointLightRenderingBuffer, int(_2041 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2041 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2041 + 3u)).x));
                        uint _2072 = (_2039 * 48u) + 8u;
                        vec3 _2083 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2072)).x, texelFetch(g_PointLightRenderingBuffer, int(_2072 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2072 + 2u)).x));
                        float _2087 = _2055.x - _1129;
                        float _2088 = _2055.y - _1130;
                        float _2089 = _2055.z - _1131;
                        float _2090 = dot(vec3(_2087, _2088, _2089), vec3(_2087, _2088, _2089));
                        float _2093 = inversesqrt(_2090);
                        float _2102 = 1.0 - (_2090 * _2055.w);
                        float _2762 = isnan(0.0) ? _2102 : (isnan(_2102) ? 0.0 : max(_2102, 0.0));
                        float _2104 = sqrt(_2090) * uintBitsToFloat(uvec4(_2062, _2063, _2064, texelFetch(g_PointLightRenderingBuffer, int(((_2039 * 48u) + 4u) + 3u)).x)).w;
                        float _2107 = 1.39999997615814208984375 / (_2104 + 1.39999997615814208984375);
                        float _2108 = _2107 * _2107;
                        float _2111 = ((1.0 - _2108) * dot(vec3(0.0), vec3(_2093 * _2087, _2093 * _2088, _2093 * _2089))) + _2108;
                        float _2113 = (-0.0) - _1129;
                        float _2114 = (-0.0) - _1130;
                        float _2115 = (-0.0) - _1131;
                        float _2119 = inversesqrt(dot(vec3(_2113, _2114, _2115), vec3(_2113, _2114, _2115)));
                        float _2123 = dot(vec3(0.0), vec3(_2119 * _2113, _2119 * _2114, _2119 * _2115));
                        float _2773 = isnan(0.0) ? _2123 : (isnan(_2123) ? 0.0 : max(_2123, 0.0));
                        float _2784 = isnan(0.0) ? _2111 : (isnan(_2111) ? 0.0 : max(_2111, 0.0));
                        float _2127 = isnan(1.0) ? _2784 : (isnan(_2784) ? 1.0 : min(_2784, 1.0));
                        float _2131 = (0.5 / (((isnan(1.0) ? _2773 : (isnan(_2773) ? 1.0 : min(_2773, 1.0))) + 9.9999999392252902907785028219223e-09) + _2127)) * _2127;
                        float _2795 = isnan(0.0) ? _2131 : (isnan(_2131) ? 0.0 : max(_2131, 0.0));
                        float _2140 = (((isnan(1.0) ? _2795 : (isnan(_2795) ? 1.0 : min(_2795, 1.0))) * 3.1415927410125732421875) / (((_2104 * _2104) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2762 : (isnan(_2762) ? 1.0 : min(_2762, 1.0)));
                        _1970 = (_2140 * _2083.x) + _2032;
                        _1971 = (_2140 * _2083.y) + _2033;
                        _1972 = (_2140 * _2083.z) + _2034;
                        if (_2036 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2032 = _1970;
                            _2033 = _1971;
                            _2034 = _1972;
                            _2035 = _2036;
                        }
                    }
                    frontier_phi_66_pred = _1972;
                    frontier_phi_66_pred_1 = _1971;
                    frontier_phi_66_pred_2 = _1970;
                }
                _1748 = frontier_phi_66_pred;
                _1746 = frontier_phi_66_pred_1;
                _1744 = frontier_phi_66_pred_2;
                uint _1900 = _1899 + 1u;
                if (_1900 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1896 = _1744;
                    _1897 = _1746;
                    _1898 = _1748;
                    _1899 = _1900;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1743 = _1744;
            _1745 = _1746;
            _1747 = _1748;
        }
        uvec4 _1751 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1752 = _1751.z;
        uint _1754 = (_1752 >> 8u) & 15u;
        float _1876;
        float _1878;
        float _1880;
        if (((4294967295u << _1754) & _1635) == 0u)
        {
            _1876 = _1743;
            _1878 = _1745;
            _1880 = _1747;
        }
        else
        {
            float _1892 = inversesqrt(dot(vec3(_1129, _1130, _1131), vec3(_1129, _1130, _1131)));
            float frontier_phi_59_60_ladder;
            float frontier_phi_59_60_ladder_1;
            float frontier_phi_59_60_ladder_2;
            if (_1754 < ((_1752 >> 12u) & 15u))
            {
                float _1877;
                float _1879;
                float _1881;
                float _2018 = _1743;
                float _2019 = _1745;
                float _2020 = _1747;
                uint _2021 = _1754;
                uint _2030;
                bool _2031;
                for (;;)
                {
                    _2030 = texelFetch(g_lightClassification, int((((_1629 << 5u) + (_1615 << 9u)) + (_2021 << 2u)) >> 2u)).x;
                    _2031 = _2030 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    if (_2031)
                    {
                        frontier_phi_72_pred = _2020;
                        frontier_phi_72_pred_1 = _2019;
                        frontier_phi_72_pred_2 = _2018;
                    }
                    else
                    {
                        float _2145;
                        float _2146;
                        float _2147;
                        float _2366;
                        float _2367;
                        float _2368;
                        float _2155 = _2018;
                        float _2156 = _2019;
                        float _2157 = _2020;
                        uint _2158 = _2030;
                        uint _2159;
                        uint _2169;
                        vec4 _2184;
                        float _2185;
                        vec3 _2197;
                        vec4 _2212;
                        vec4 _2227;
                        float _2273;
                        bool _2274;
                        for (;;)
                        {
                            _2169 = ((_2021 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2158));
                            _2159 = (_2158 + 4294967295u) & _2158;
                            uint _2171 = _2169 * 40u;
                            _2184 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2171)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2171 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2171 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2171 + 3u)).x));
                            _2185 = _2184.w;
                            uint _2187 = (_2169 * 40u) + 8u;
                            _2197 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2187)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2187 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2187 + 2u)).x));
                            uint _2199 = (_2169 * 40u) + 16u;
                            _2212 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2199)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2199 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2199 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2199 + 3u)).x));
                            uint _2214 = (_2169 * 40u) + 20u;
                            _2227 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2214)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2214 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2214 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2214 + 3u)).x));
                            uint _2229 = (_2169 * 40u) + 24u;
                            vec4 _2242 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2229)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2229 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2229 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2229 + 3u)).x));
                            uint _2248 = (_2169 * 40u) + 28u;
                            vec4 _2261 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2248)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2248 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2248 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2248 + 3u)).x));
                            _2273 = fma(_1131, _2261.z, fma(_1130, _2261.y, _2261.x * _1129)) + _2261.w;
                            _2274 = !((fma(_1131, _2242.z, fma(_1130, _2242.y, _2242.x * _1129)) + _2242.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            if (_2274)
                            {
                                float _2308 = _2184.x - _1129;
                                float _2309 = _2184.y - _1130;
                                float _2310 = _2184.z - _1131;
                                float _2311 = dot(vec3(_2308, _2309, _2310), vec3(_2308, _2309, _2310));
                                float _2314 = inversesqrt(_2311);
                                float _2321 = 1.0 - (_2311 / (_2185 * _2185));
                                float _2806 = isnan(0.0) ? _2321 : (isnan(_2321) ? 0.0 : max(_2321, 0.0));
                                float _2323 = sqrt(_2311) * uintBitsToFloat(uvec4(_2277, _2278, _2279, texelFetch(g_SpotLightRenderingBuffer, int(((_2169 * 40u) + 4u) + 3u)).x)).w;
                                float _2325 = 1.39999997615814208984375 / (_2323 + 1.39999997615814208984375);
                                float _2326 = _2325 * _2325;
                                float _2329 = (fma(_1131, _2212.z, fma(_1130, _2212.y, _2212.x * _1129)) + _2212.w) / _2273;
                                float _2330 = (fma(_1131, _2227.z, fma(_1130, _2227.y, _2227.x * _1129)) + _2227.w) / _2273;
                                float _2334 = 1.0 - dot(vec2(_2329, _2330), vec2(_2329, _2330));
                                float _2817 = isnan(0.0) ? _2334 : (isnan(_2334) ? 0.0 : max(_2334, 0.0));
                                float _2342 = dot(vec3(0.0), vec3((-0.0) - (_1129 * _1892), (-0.0) - (_1130 * _1892), (-0.0) - (_1131 * _1892)));
                                float _2828 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
                                float _2350 = ((1.0 - _2326) * dot(vec3(0.0), vec3(_2314 * _2308, _2314 * _2309, _2314 * _2310))) + _2326;
                                float _2839 = isnan(0.0) ? _2350 : (isnan(_2350) ? 0.0 : max(_2350, 0.0));
                                float _2351 = isnan(1.0) ? _2839 : (isnan(_2839) ? 1.0 : min(_2839, 1.0));
                                float _2355 = (0.5 / (((isnan(1.0) ? _2828 : (isnan(_2828) ? 1.0 : min(_2828, 1.0))) + 9.9999999392252902907785028219223e-09) + _2351)) * _2351;
                                float _2850 = isnan(0.0) ? _2355 : (isnan(_2355) ? 0.0 : max(_2355, 0.0));
                                float _2362 = ((isnan(1.0) ? _2817 : (isnan(_2817) ? 1.0 : min(_2817, 1.0))) * (isnan(1.0) ? _2806 : (isnan(_2806) ? 1.0 : min(_2806, 1.0)))) * (((isnan(1.0) ? _2850 : (isnan(_2850) ? 1.0 : min(_2850, 1.0))) * 3.1415927410125732421875) / (((_2323 * _2323) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_78_pred = _2362 * _2197.z;
                                frontier_phi_78_pred_1 = _2362 * _2197.y;
                                frontier_phi_78_pred_2 = _2362 * _2197.x;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                            }
                            _2368 = frontier_phi_78_pred;
                            _2367 = frontier_phi_78_pred_1;
                            _2366 = frontier_phi_78_pred_2;
                            _2145 = _2366 + _2155;
                            _2146 = _2367 + _2156;
                            _2147 = _2368 + _2157;
                            if (_2159 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2155 = _2145;
                                _2156 = _2146;
                                _2157 = _2147;
                                _2158 = _2159;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _2147;
                        frontier_phi_72_pred_1 = _2146;
                        frontier_phi_72_pred_2 = _2145;
                    }
                    _1881 = frontier_phi_72_pred;
                    _1879 = frontier_phi_72_pred_1;
                    _1877 = frontier_phi_72_pred_2;
                    uint _2022 = _2021 + 1u;
                    if (_2022 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2018 = _1877;
                        _2019 = _1879;
                        _2020 = _1881;
                        _2021 = _2022;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_59_60_ladder = _1881;
                frontier_phi_59_60_ladder_1 = _1879;
                frontier_phi_59_60_ladder_2 = _1877;
            }
            else
            {
                frontier_phi_59_60_ladder = _1747;
                frontier_phi_59_60_ladder_1 = _1745;
                frontier_phi_59_60_ladder_2 = _1743;
            }
            _1876 = frontier_phi_59_60_ladder_2;
            _1878 = frontier_phi_59_60_ladder_1;
            _1880 = frontier_phi_59_60_ladder;
        }
        float _1885 = isnan(1.0) ? _456 : (isnan(_456) ? 1.0 : min(_456, 1.0));
        _1649 = ((_1876 * 0.039999999105930328369140625) * _1885) + _1483;
        _1651 = ((_1878 * 0.039999999105930328369140625) * _1885) + _1484;
        _1653 = ((_1880 * 0.039999999105930328369140625) * _1885) + _1485;
    }
    else
    {
        _1649 = _1483;
        _1651 = _1484;
        _1653 = _1485;
    }
    uint _1660 = (_1351 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1675 = ((cbMtdParam._m0[9u].x * _402.x) * cbInstanceData._m0[_1660].x) + ((_1649 + ((isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0))) * _847)) * cbPerFrame._m0[3u].x);
    float _1676 = ((cbMtdParam._m0[9u].y * _402.y) * cbInstanceData._m0[_1660].y) + ((_1651 + ((isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0))) * _847)) * cbPerFrame._m0[3u].x);
    float _1677 = ((cbMtdParam._m0[9u].z * _402.z) * cbInstanceData._m0[_1660].z) + ((_1653 + ((isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0))) * _847)) * cbPerFrame._m0[3u].x);
    uint _1681 = _1351 + 6u;
    float _1689 = _443 / cbSceneParam._m0[86u].x;
    float _1690 = _444 / cbSceneParam._m0[86u].y;
    vec4 _1704 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1689, _1690, (log2((isnan(cbSceneParam._m0[77u].w) ? _430 : (isnan(_430) ? cbSceneParam._m0[77u].w : min(_430, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1706 = _1704.x;
    float _1707 = _1704.y;
    float _1708 = _1704.z;
    float _1709 = _1704.w;
    float _1799;
    float _1801;
    float _1803;
    float _1805;
    if (_430 > cbSceneParam._m0[78u].w)
    {
        float _1762 = isnan(_430) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _430 : min(cbSceneParam._m0[80u].w, _430));
        float _1763 = _1762 / _430;
        float _1774 = _1763 * _256;
        float _1775 = _257 * _1763;
        float _1776 = (-0.0) - _1775;
        float _1777 = _1763 * _258;
        float _1779 = (cbSceneParam._m0[77u].w * _1776) / _1762;
        float _1780 = _1779 + cbSceneParam._m0[79u].w;
        float _1781 = cbSceneParam._m0[79u].w - _1775;
        float _1787 = sqrt(((_1774 * _1774) + (_1775 * _1775)) + (_1777 * _1777));
        float _1790 = (1.0 - (cbSceneParam._m0[77u].w / _1762)) * _1787;
        float _1795 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1797 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1980;
        if (abs((_1776 - _1779) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1980 = ((((_1780 > 0.0) ? exp2(_1795 * _1780) : (2.0 - exp2(_1797 * _1780))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1790;
        }
        else
        {
            float _1922 = 1.0 / cbSceneParam._m0[80u].x;
            float _1923 = isnan(_1781) ? _1780 : (isnan(_1780) ? _1781 : max(_1780, _1781));
            float _1924 = isnan(_1781) ? _1780 : (isnan(_1780) ? _1781 : min(_1780, _1781));
            float _1933 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : min(_1923, 0.0));
            float _1934 = isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : min(_1924, 0.0));
            _1980 = ((abs(_1787 / _1776) * cbSceneParam._m0[80u].y) * ((((_1933 - _1934) * 2.0) - ((exp2(_1795 * (isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0)))) - exp2(_1795 * (isnan(0.0) ? _1924 : (isnan(_1924) ? 0.0 : max(_1924, 0.0))))) * _1922)) - ((exp2(_1797 * _1933) - exp2(_1797 * _1934)) * _1922))) + (_1790 * cbSceneParam._m0[80u].z);
        }
        vec4 _1982 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1689, _1690, 1.0), 0.0);
        float _1991 = exp2((_1980 * (-1.44269502162933349609375)) * (1.0 - _1982.w));
        float _1992 = log2(_1991);
        float _2008 = log2(_1709);
        _1799 = (exp2(_2008 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1992 * cbSceneParam._m0[78u].x)) * _1982.x) / cbSceneParam._m0[78u].x)) + _1706;
        _1801 = (exp2(_2008 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1992 * cbSceneParam._m0[78u].y)) * _1982.y) / cbSceneParam._m0[78u].y)) + _1707;
        _1803 = (exp2(_2008 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1992 * cbSceneParam._m0[78u].z)) * _1982.z) / cbSceneParam._m0[78u].z)) + _1708;
        _1805 = _1991 * _1709;
    }
    else
    {
        _1799 = _1706;
        _1801 = _1707;
        _1803 = _1708;
        _1805 = _1709;
    }
    float _1817 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1818 = _1817 == 3.0;
    float _1820 = log2(_1805);
    float _1827 = exp2(_1820 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _1675 : (isnan(_1675) ? 0.0 : max(_1675, 0.0)));
    float _1828 = exp2(_1820 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _1676 : (isnan(_1676) ? 0.0 : max(_1676, 0.0)));
    float _1829 = exp2(_1820 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0)));
    float _1838 = (_1817 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _1838 * (_1818 ? _1827 : (_1827 + (cbSceneParam._m0[72u].w * _1799)));
    SV_Target.y = _1838 * (_1818 ? _1828 : (_1828 + (cbSceneParam._m0[72u].w * _1801)));
    SV_Target.z = _1838 * (_1818 ? _1829 : (_1829 + (cbSceneParam._m0[72u].w * _1803)));
    SV_Target.w = cbInstanceData._m0[_1681].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1681].w;
}


