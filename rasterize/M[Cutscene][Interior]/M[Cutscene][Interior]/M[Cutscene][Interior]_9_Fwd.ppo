#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_12;
layout(set = 0, binding = 3) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _451;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _201 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _202 = _201 * _194;
    float _203 = _201 * _195;
    float _204 = _201 * _196;
    float _208 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _209 = _208 * NORMAL.x;
    float _210 = _208 * NORMAL.y;
    float _211 = _208 * NORMAL.z;
    float _215 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _216 = _215 * TANGENT.x;
    float _217 = _215 * TANGENT.y;
    float _218 = _215 * TANGENT.z;
    float _263 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _273 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _263);
    float _274 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _263);
    float _275 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _263);
    vec4 _288 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _291 = _288.x;
    vec4 _309 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _326 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _291) + cbMtdParam._m0[12u].x) * _309.x;
    float _328 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _291) + cbMtdParam._m0[12u].y) * _309.y;
    float _330 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _291) + cbMtdParam._m0[12u].z) * _309.z;
    vec4 _364 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _379 = inversesqrt(dot(vec3(_202, _203, _204), vec3(_202, _203, _204)));
    float _386 = inversesqrt(dot(vec3(_216, _217, _218), vec3(_216, _217, _218)));
    float _398 = cbMtdParam._m0[24u].w + _273;
    float _399 = cbMtdParam._m0[25u].x + _274;
    float _400 = cbMtdParam._m0[25u].y + _275;
    float _414 = (-0.0) - dot(vec3(_398, _399, _400), vec3(_379 * _202, _379 * _203, _379 * _204));
    float _415 = (-0.0) - dot(vec3(_398, _399, _400), vec3(_386 * _216, _386 * _217, _386 * _218));
    float _416 = (-0.0) - dot(vec3(_398, _399, _400), vec3((-0.0) - _209, (-0.0) - _210, (-0.0) - _211));
    float _420 = inversesqrt(dot(vec3(_414, _415, _416), vec3(_414, _415, _416)));
    float _421 = _420 * _416;
    float _426 = ((cbMtdParam._m0[21u].z * _414) * _420) + (((_364.x * 2.0) + (-1.0)) * cbMtdParam._m0[22u].x);
    float _427 = ((cbMtdParam._m0[21u].w * _415) * _420) + (((_364.y * 2.0) + (-1.0)) * cbMtdParam._m0[22u].y);
    float _430 = fract(cbMtdParam._m0[21u].z * TEXCOORD.x);
    float _431 = fract(cbMtdParam._m0[21u].w * TEXCOORD.y);
    float _449;
    float _452;
    float _454;
    if (_426 > 0.0)
    {
        float _435 = (1.0 - _430) / _426;
        _449 = _435;
        _452 = ((cbMtdParam._m0[18u].w + 1.0) - fract(_435 * _421)) * 0.16666667163372039794921875;
        _454 = (fract((_435 * _427) + _431) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_426 < 0.0)
        {
            float _450 = ((-0.0) - _430) / _426;
            frontier_phi_3_2_ladder = (fract((_450 * _427) + _431) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_1 = _450;
            frontier_phi_3_2_ladder_2 = (fract(_450 * _421) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _451;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _449 = frontier_phi_3_2_ladder_1;
        _452 = frontier_phi_3_2_ladder_2;
        _454 = frontier_phi_3_2_ladder;
    }
    float _480;
    float _482;
    float _484;
    if (_427 > 0.0)
    {
        float _467 = (1.0 - _431) / _427;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_467 < _449)
        {
            frontier_phi_8_5_ladder = (fract((_467 * _426) + _430) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_1 = _467;
            frontier_phi_8_5_ladder_2 = (fract(_467 * _421) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
        }
        else
        {
            frontier_phi_8_5_ladder = _452;
            frontier_phi_8_5_ladder_1 = _449;
            frontier_phi_8_5_ladder_2 = _454;
        }
        _480 = frontier_phi_8_5_ladder_1;
        _482 = frontier_phi_8_5_ladder;
        _484 = frontier_phi_8_5_ladder_2;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_427 < 0.0)
        {
            float _481 = ((-0.0) - _431) / _427;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_481 < _449)
            {
                frontier_phi_8_6_ladder_9_ladder = (fract((_481 * _426) + _430) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = _481;
                frontier_phi_8_6_ladder_9_ladder_2 = fract(_481 * _421) * 0.16666667163372039794921875;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _452;
                frontier_phi_8_6_ladder_9_ladder_1 = _449;
                frontier_phi_8_6_ladder_9_ladder_2 = _454;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _452;
            frontier_phi_8_6_ladder_1 = _449;
            frontier_phi_8_6_ladder_2 = _454;
        }
        _480 = frontier_phi_8_6_ladder_1;
        _482 = frontier_phi_8_6_ladder;
        _484 = frontier_phi_8_6_ladder_2;
    }
    float _488 = (_421 > 0.0) ? (cbMtdParam._m0[18u].z / _421) : 5000.0;
    float _501;
    float _502;
    if (_488 < _480)
    {
        _501 = ((_430 + cbMtdParam._m0[18u].w) + (_488 * _426)) * 0.16666667163372039794921875;
        _502 = (((_488 * _427) + _431) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _501 = _482;
        _502 = _484;
    }
    vec4 _504 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_501, _502));
    float _3192 = isnan(0.0) ? cbMtdParam._m0[17u].z : (isnan(cbMtdParam._m0[17u].z) ? 0.0 : max(cbMtdParam._m0[17u].z, 0.0));
    float _518 = isnan(1.0) ? _3192 : (isnan(_3192) ? 1.0 : min(_3192, 1.0));
    float _3203 = isnan(0.0) ? cbMtdParam._m0[17u].y : (isnan(cbMtdParam._m0[17u].y) ? 0.0 : max(cbMtdParam._m0[17u].y, 0.0));
    float _561 = ((_518 - ((1.0 - (isnan(1.0) ? _3203 : (isnan(_3203) ? 1.0 : min(_3203, 1.0)))) * (_518 + 1.0))) + (((cbMtdParam._m0[18u].y * texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[3u].w)).x) + (cbMtdParam._m0[17u].x * texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w)).x)) / cbMtdParam._m0[17u].w)) / _518;
    float _3214 = isnan(0.0) ? _561 : (isnan(_561) ? 0.0 : max(_561, 0.0));
    float _562 = isnan(1.0) ? _3214 : (isnan(_3214) ? 1.0 : min(_3214, 1.0));
    float _564 = 3.0 - (_562 * 2.0);
    float _569 = _562 * _562;
    vec4 _591 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _595 = _591.z;
    float _598 = (_591.x * 2.0) + (-1.0);
    float _599 = (_591.y * 2.0) + (-1.0);
    float _600 = dot(vec2(_598, _599), vec2(_598, _599));
    float _3225 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _605 = sqrt(1.0 - (isnan(1.0) ? _3225 : (isnan(_3225) ? 1.0 : min(_3225, 1.0))));
    float _608 = fma(_605, _209, fma(_599, _216, _598 * _202));
    float _611 = fma(_605, _210, fma(_599, _217, _598 * _203));
    float _614 = fma(_605, _211, fma(_599, _218, _598 * _204));
    float _618 = inversesqrt(dot(vec3(_608, _611, _614), vec3(_608, _611, _614)));
    float _619 = _618 * _608;
    float _620 = _618 * _611;
    float _621 = _618 * _614;
    float _3236 = isnan(0.0) ? _595 : (isnan(_595) ? 0.0 : max(_595, 0.0));
    float _622 = isnan(1.0) ? _3236 : (isnan(_3236) ? 1.0 : min(_3236, 1.0));
    float _3247 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _3258 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _3269 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _641 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _645 = inversesqrt(dot(vec3(_273, _274, _275), vec3(_273, _274, _275)));
    float _646 = _273 * _645;
    float _647 = _274 * _645;
    float _648 = _275 * _645;
    float _654 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _655 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _675 = fma(_621, cbSceneParam._m0[5u].z, fma(_620, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _619));
    float _678 = fma(_621, cbSceneParam._m0[6u].z, fma(_620, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _619));
    float _681 = fma(_621, cbSceneParam._m0[7u].z, fma(_620, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _619));
    uint _694 = uint(roundEven(NORMAL.w)) * 13u;
    uint _695 = _694 + 9u;
    uint _696 = _695 + uint(cbMatDynParam._m0[0u].w);
    float _702 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3247 : (isnan(_3247) ? 1.0 : min(_3247, 1.0)))) * cbInstanceData._m0[_696].x;
    float _703 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3258 : (isnan(_3258) ? 1.0 : min(_3258, 1.0)))) * cbInstanceData._m0[_696].y;
    float _704 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3269 : (isnan(_3269) ? 1.0 : min(_3269, 1.0)))) * cbInstanceData._m0[_696].z;
    float _3280 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _705 = isnan(1.0) ? _3280 : (isnan(_3280) ? 1.0 : min(_3280, 1.0));
    float _3291 = isnan(0.0) ? _703 : (isnan(_703) ? 0.0 : max(_703, 0.0));
    float _706 = isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0));
    float _3302 = isnan(0.0) ? _704 : (isnan(_704) ? 0.0 : max(_704, 0.0));
    float _707 = isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0));
    vec4 _716 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _654, cbSceneParam._m0[86u].y * _655));
    float _719 = _716.x * TEXCOORD_4.z;
    float _720 = dot(vec3(_619, _620, _621), vec3(_646, _647, _648));
    float _723 = _720 * 2.0;
    float _727 = (_723 * _619) - _646;
    float _728 = (_723 * _620) - _647;
    float _729 = (_723 * _621) - _648;
    float _733 = abs(dot(vec3(_646, _647, _648), vec3(_619, _620, _621)));
    float _3313 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
    float _735 = sqrt(_622);
    float _747 = exp2((_735 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_735 * 3.0));
    float _779 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _783 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _787 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    float _1107;
    float _1108;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _820 = fma(_787, cbModelParam._m0[26u].z, fma(_783, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _779));
        float _824 = fma(_787, cbModelParam._m0[27u].z, fma(_783, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _779));
        float _828 = fma(_787, cbModelParam._m0[28u].z, fma(_783, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _779));
        float _852 = _779 + _619;
        float _853 = _783 + _620;
        float _854 = _787 + _621;
        float _864 = fma(_854, cbModelParam._m0[26u].z, fma(_853, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _852)) - _820;
        float _865 = fma(_854, cbModelParam._m0[27u].z, fma(_853, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _852)) - _824;
        float _866 = fma(_854, cbModelParam._m0[28u].z, fma(_853, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _852)) - _828;
        float _870 = inversesqrt(dot(vec3(_864, _865, _866), vec3(_864, _865, _866)));
        float _883 = ((_870 * _864) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_820 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _884 = ((_870 * _865) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_824 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _885 = ((_870 * _866) / cbModelParam._m0[34u].z) + ((((((_828 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _888 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_883, _884, _885), 0.0);
        vec4 _895 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_883, _884, _885), 0.0);
        vec4 _902 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_883, _884, _885), 0.0);
        vec4 _909 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_883, _884, _885), 0.0);
        float _922 = exp2((_888.w + (-0.5)) * 20.0) * 2.0;
        float _923 = _922 * (_888.x + (-0.5));
        float _924 = _922 * (_888.y + (-0.5));
        float _925 = _922 * (_888.z + (-0.5));
        float _932 = exp2((_895.w + (-0.5)) * 20.0) * 2.0;
        float _933 = _932 * (_895.x + (-0.5));
        float _934 = _932 * (_895.y + (-0.5));
        float _935 = _932 * (_895.z + (-0.5));
        float _942 = exp2((_902.w + (-0.5)) * 20.0) * 2.0;
        float _943 = _942 * (_902.x + (-0.5));
        float _944 = _942 * (_902.y + (-0.5));
        float _945 = _942 * (_902.z + (-0.5));
        float _952 = exp2((_909.w + (-0.5)) * 20.0) * 2.0;
        float _953 = _952 * (_909.x + (-0.5));
        float _954 = _952 * (_909.y + (-0.5));
        float _955 = _952 * (_909.z + (-0.5));
        float _956 = isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0));
        float _957 = isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0));
        float _958 = isnan(0.0) ? _955 : (isnan(_955) ? 0.0 : max(_955, 0.0));
        float _959 = _923 * 0.5;
        float _960 = _933 * 0.5;
        float _961 = _943 * 0.5;
        float _962 = dot(vec3(_959, _960, _961), vec3(_959, _960, _961));
        float _967 = (_962 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_962);
        float _976 = (dot(vec3(_619, _620, _621), vec3(_967 * _959, _967 * _960, _967 * _961)) + 1.0) * 0.5;
        float _3339 = isnan(0.0) ? _976 : (isnan(_976) ? 0.0 : max(_976, 0.0));
        float _986 = sqrt(((_960 * _960) + (_959 * _959)) + (_961 * _961)) / (_956 + 9.9999997473787516355514526367188e-06);
        float _3350 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _987 = isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0));
        float _988 = _987 * 2.0;
        float _992 = (1.0 - _987) / (_987 + 1.0);
        float _3361 = isnan(0.0) ? _992 : (isnan(_992) ? 0.0 : max(_992, 0.0));
        float _993 = isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0));
        float _1002 = ((((1.0 - _993) * (_988 + 2.0)) * exp2(log2(isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0))) * (_988 + 1.0))) + _993) * _956;
        float _1003 = _924 * 0.5;
        float _1004 = _934 * 0.5;
        float _1005 = _944 * 0.5;
        float _1006 = dot(vec3(_1003, _1004, _1005), vec3(_1003, _1004, _1005));
        float _1011 = (_1006 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1006);
        float _1019 = (dot(vec3(_619, _620, _621), vec3(_1011 * _1003, _1011 * _1004, _1011 * _1005)) + 1.0) * 0.5;
        float _3372 = isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0));
        float _1028 = sqrt(((_1004 * _1004) + (_1003 * _1003)) + (_1005 * _1005)) / (_957 + 9.9999997473787516355514526367188e-06);
        float _3383 = isnan(0.0) ? _1028 : (isnan(_1028) ? 0.0 : max(_1028, 0.0));
        float _1029 = isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0));
        float _1030 = _1029 * 2.0;
        float _1034 = (1.0 - _1029) / (_1029 + 1.0);
        float _3394 = isnan(0.0) ? _1034 : (isnan(_1034) ? 0.0 : max(_1034, 0.0));
        float _1035 = isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0));
        float _1044 = ((((1.0 - _1035) * (_1030 + 2.0)) * exp2(log2(isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0))) * (_1030 + 1.0))) + _1035) * _957;
        float _1045 = _925 * 0.5;
        float _1046 = _935 * 0.5;
        float _1047 = _945 * 0.5;
        float _1048 = dot(vec3(_1045, _1046, _1047), vec3(_1045, _1046, _1047));
        float _1053 = (_1048 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1048);
        float _1061 = (dot(vec3(_619, _620, _621), vec3(_1053 * _1045, _1053 * _1046, _1053 * _1047)) + 1.0) * 0.5;
        float _3405 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
        float _1070 = sqrt(((_1046 * _1046) + (_1045 * _1045)) + (_1047 * _1047)) / (_958 + 9.9999997473787516355514526367188e-06);
        float _3416 = isnan(0.0) ? _1070 : (isnan(_1070) ? 0.0 : max(_1070, 0.0));
        float _1071 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
        float _1072 = _1071 * 2.0;
        float _1076 = (1.0 - _1071) / (_1071 + 1.0);
        float _3427 = isnan(0.0) ? _1076 : (isnan(_1076) ? 0.0 : max(_1076, 0.0));
        float _1077 = isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0));
        float _1086 = ((((1.0 - _1077) * (_1072 + 2.0)) * exp2(log2(isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0))) * (_1072 + 1.0))) + _1077) * _958;
        _1094 = _925;
        _1095 = _924;
        _1096 = _923;
        _1097 = _935;
        _1098 = _934;
        _1099 = _933;
        _1100 = _945;
        _1101 = _944;
        _1102 = _943;
        _1103 = _958;
        _1104 = _957;
        _1105 = _956;
        _1106 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0)));
        _1107 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1044 : (isnan(_1044) ? 0.0 : max(_1044, 0.0)));
        _1108 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0)));
    }
    else
    {
        _1094 = _451;
        _1095 = _451;
        _1096 = _451;
        _1097 = _451;
        _1098 = _451;
        _1099 = _451;
        _1100 = _451;
        _1101 = _451;
        _1102 = _451;
        _1103 = _451;
        _1104 = _451;
        _1105 = _451;
        _1106 = 0.0;
        _1107 = 0.0;
        _1108 = 0.0;
    }
    float _1403;
    float _1404;
    float _1405;
    float _1406;
    float _1407;
    float _1408;
    float _1409;
    float _1410;
    float _1411;
    float _1412;
    float _1413;
    float _1414;
    float _1415;
    float _1416;
    float _1417;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1134 = fma(_787, cbModelParam._m0[30u].z, fma(_783, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _779));
        float _1138 = fma(_787, cbModelParam._m0[31u].z, fma(_783, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _779));
        float _1142 = fma(_787, cbModelParam._m0[32u].z, fma(_783, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _779));
        float _1165 = _779 + _619;
        float _1166 = _783 + _620;
        float _1167 = _787 + _621;
        float _1177 = fma(_1167, cbModelParam._m0[30u].z, fma(_1166, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1165)) - _1134;
        float _1178 = fma(_1167, cbModelParam._m0[31u].z, fma(_1166, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1165)) - _1138;
        float _1179 = fma(_1167, cbModelParam._m0[32u].z, fma(_1166, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1165)) - _1142;
        float _1183 = inversesqrt(dot(vec3(_1177, _1178, _1179), vec3(_1177, _1178, _1179)));
        float _1196 = ((_1183 * _1177) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1134 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1197 = ((_1183 * _1178) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1138 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1198 = ((_1183 * _1179) / cbModelParam._m0[35u].z) + ((((((_1142 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1200 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        vec4 _1207 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        vec4 _1214 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        vec4 _1221 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1196, _1197, _1198), 0.0);
        float _1233 = exp2((_1200.w + (-0.5)) * 20.0) * 2.0;
        float _1234 = _1233 * (_1200.x + (-0.5));
        float _1235 = _1233 * (_1200.y + (-0.5));
        float _1236 = _1233 * (_1200.z + (-0.5));
        float _1243 = exp2((_1207.w + (-0.5)) * 20.0) * 2.0;
        float _1244 = _1243 * (_1207.x + (-0.5));
        float _1245 = _1243 * (_1207.y + (-0.5));
        float _1246 = _1243 * (_1207.z + (-0.5));
        float _1253 = exp2((_1214.w + (-0.5)) * 20.0) * 2.0;
        float _1254 = _1253 * (_1214.x + (-0.5));
        float _1255 = _1253 * (_1214.y + (-0.5));
        float _1256 = _1253 * (_1214.z + (-0.5));
        float _1263 = exp2((_1221.w + (-0.5)) * 20.0) * 2.0;
        float _1264 = _1263 * (_1221.x + (-0.5));
        float _1265 = _1263 * (_1221.y + (-0.5));
        float _1266 = _1263 * (_1221.z + (-0.5));
        float _1267 = isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0));
        float _1268 = isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0));
        float _1269 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1270 = _1234 * 0.5;
        float _1271 = _1244 * 0.5;
        float _1272 = _1254 * 0.5;
        float _1273 = dot(vec3(_1270, _1271, _1272), vec3(_1270, _1271, _1272));
        float _1278 = (_1273 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1273);
        float _1286 = (dot(vec3(_619, _620, _621), vec3(_1278 * _1270, _1278 * _1271, _1278 * _1272)) + 1.0) * 0.5;
        float _3468 = isnan(0.0) ? _1286 : (isnan(_1286) ? 0.0 : max(_1286, 0.0));
        float _1295 = sqrt(((_1271 * _1271) + (_1270 * _1270)) + (_1272 * _1272)) / (_1267 + 9.9999997473787516355514526367188e-06);
        float _3479 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1296 = isnan(1.0) ? _3479 : (isnan(_3479) ? 1.0 : min(_3479, 1.0));
        float _1297 = _1296 * 2.0;
        float _1301 = (1.0 - _1296) / (_1296 + 1.0);
        float _3490 = isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0));
        float _1302 = isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0));
        float _1311 = ((((1.0 - _1302) * (_1297 + 2.0)) * exp2(log2(isnan(1.0) ? _3468 : (isnan(_3468) ? 1.0 : min(_3468, 1.0))) * (_1297 + 1.0))) + _1302) * _1267;
        float _1312 = _1235 * 0.5;
        float _1313 = _1245 * 0.5;
        float _1314 = _1255 * 0.5;
        float _1315 = dot(vec3(_1312, _1313, _1314), vec3(_1312, _1313, _1314));
        float _1320 = (_1315 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1315);
        float _1328 = (dot(vec3(_619, _620, _621), vec3(_1320 * _1312, _1320 * _1313, _1320 * _1314)) + 1.0) * 0.5;
        float _3501 = isnan(0.0) ? _1328 : (isnan(_1328) ? 0.0 : max(_1328, 0.0));
        float _1337 = sqrt(((_1313 * _1313) + (_1312 * _1312)) + (_1314 * _1314)) / (_1268 + 9.9999997473787516355514526367188e-06);
        float _3512 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1338 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
        float _1339 = _1338 * 2.0;
        float _1343 = (1.0 - _1338) / (_1338 + 1.0);
        float _3523 = isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0));
        float _1344 = isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0));
        float _1353 = ((((1.0 - _1344) * (_1339 + 2.0)) * exp2(log2(isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0))) * (_1339 + 1.0))) + _1344) * _1268;
        float _1354 = _1236 * 0.5;
        float _1355 = _1246 * 0.5;
        float _1356 = _1256 * 0.5;
        float _1357 = dot(vec3(_1354, _1355, _1356), vec3(_1354, _1355, _1356));
        float _1362 = (_1357 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1357);
        float _1370 = (dot(vec3(_619, _620, _621), vec3(_1362 * _1354, _1362 * _1355, _1362 * _1356)) + 1.0) * 0.5;
        float _3534 = isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0));
        float _1379 = sqrt(((_1355 * _1355) + (_1354 * _1354)) + (_1356 * _1356)) / (_1269 + 9.9999997473787516355514526367188e-06);
        float _3545 = isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0));
        float _1380 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
        float _1381 = _1380 * 2.0;
        float _1385 = (1.0 - _1380) / (_1380 + 1.0);
        float _3556 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
        float _1386 = isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0));
        float _1395 = ((((1.0 - _1386) * (_1381 + 2.0)) * exp2(log2(isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0))) * (_1381 + 1.0))) + _1386) * _1269;
        _1403 = _1236;
        _1404 = _1235;
        _1405 = _1234;
        _1406 = _1246;
        _1407 = _1245;
        _1408 = _1244;
        _1409 = _1256;
        _1410 = _1255;
        _1411 = _1254;
        _1412 = _1269;
        _1413 = _1268;
        _1414 = _1267;
        _1415 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0)));
        _1416 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1353 : (isnan(_1353) ? 0.0 : max(_1353, 0.0)));
        _1417 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1395 : (isnan(_1395) ? 0.0 : max(_1395, 0.0)));
    }
    else
    {
        _1403 = _451;
        _1404 = _451;
        _1405 = _451;
        _1406 = _451;
        _1407 = _451;
        _1408 = _451;
        _1409 = _451;
        _1410 = _451;
        _1411 = _451;
        _1412 = _451;
        _1413 = _451;
        _1414 = _451;
        _1415 = 0.0;
        _1416 = 0.0;
        _1417 = 0.0;
    }
    float _1427 = (cbModelParam._m0[1u].x * (_1415 - _1106)) + _1106;
    float _1428 = (cbModelParam._m0[1u].x * (_1416 - _1107)) + _1107;
    float _1429 = (cbModelParam._m0[1u].x * (_1417 - _1108)) + _1108;
    float _1450 = fma(_1429, cbSceneParam._m0[89u].z, fma(_1428, cbSceneParam._m0[89u].y, _1427 * cbSceneParam._m0[89u].x));
    float _1453 = fma(_1429, cbSceneParam._m0[90u].z, fma(_1428, cbSceneParam._m0[90u].y, _1427 * cbSceneParam._m0[90u].x));
    float _1456 = fma(_1429, cbSceneParam._m0[91u].z, fma(_1428, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1427));
    float _1471 = _727 * 0.5;
    float _1472 = _728 * 0.5;
    float _1473 = _729 * 0.5;
    float _1474 = dot(vec4(_1471, _1472, _1473, 1.0), vec4(_1405, _1408, _1411, _1414));
    float _1477 = dot(vec4(_1471, _1472, _1473, 1.0), vec4(_1404, _1407, _1410, _1413));
    float _1480 = dot(vec4(_1471, _1472, _1473, 1.0), vec4(_1403, _1406, _1409, _1412));
    float _1514;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1487 = dot(vec4(_1471, _1472, _1473, 1.0), vec4(_1094, _1097, _1100, _1103));
        float _1491 = dot(vec4(_1471, _1472, _1473, 1.0), vec4(_1095, _1098, _1101, _1104));
        float _1495 = dot(vec4(_1471, _1472, _1473, 1.0), vec4(_1096, _1099, _1102, _1105));
        float _1502 = dot(vec4(cbModelParam._m0[39u]), vec4(_1471, _1472, _1473, 1.0));
        _1514 = dot(vec3(isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0)), isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0)), isnan(0.0) ? _1487 : (isnan(_1487) ? 0.0 : max(_1487, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1502) ? 0.0 : (isnan(0.0) ? _1502 : max(0.0, _1502))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1514 = 1.0;
    }
    float _1525;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1516 = dot(vec4(cbModelParam._m0[40u]), vec4(_1471, _1472, _1473, 1.0));
        _1525 = dot(vec3(isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0)), isnan(0.0) ? _1477 : (isnan(_1477) ? 0.0 : max(_1477, 0.0)), isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1516) ? 0.0 : (isnan(0.0) ? _1516 : max(0.0, _1516))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1525 = 1.0;
    }
    float _1529 = (_1525 * cbModelParam._m0[1u].x) + (_1514 * (1.0 - cbModelParam._m0[1u].x));
    float _1539 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _622);
    float _1540 = isnan(_1539) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1539 : min(cbModelParam._m0[25u].z, _1539));
    float _1621;
    float _1623;
    float _1625;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1588 = fma(_787, cbModelParam._m0[13u].z, fma(_783, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _779)) + cbModelParam._m0[13u].w;
        float _1592 = fma(_787, cbModelParam._m0[14u].z, fma(_783, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _779)) + cbModelParam._m0[14u].w;
        float _1596 = fma(_787, cbModelParam._m0[15u].z, fma(_783, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _779)) + cbModelParam._m0[15u].w;
        float _1599 = fma(_729, cbModelParam._m0[13u].z, fma(_728, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _727));
        float _1602 = fma(_729, cbModelParam._m0[14u].z, fma(_728, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _727));
        float _1605 = fma(_729, cbModelParam._m0[15u].z, fma(_728, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _727));
        float _1633;
        if (_1599 > 0.0)
        {
            _1633 = abs((1.0 - _1588) / _1599);
        }
        else
        {
            float frontier_phi_26_24_ladder;
            if (_1599 < 0.0)
            {
                frontier_phi_26_24_ladder = abs((_1588 + 1.0) / _1599);
            }
            else
            {
                frontier_phi_26_24_ladder = 5000.0;
            }
            _1633 = frontier_phi_26_24_ladder;
        }
        float _1979;
        if (_1602 > 0.0)
        {
            _1979 = abs((1.0 - _1592) / _1602);
        }
        else
        {
            float frontier_phi_35_31_ladder;
            if (_1602 < 0.0)
            {
                frontier_phi_35_31_ladder = abs((_1592 + 1.0) / _1602);
            }
            else
            {
                frontier_phi_35_31_ladder = 5000.0;
            }
            _1979 = frontier_phi_35_31_ladder;
        }
        float _2301;
        if (_1605 > 0.0)
        {
            _2301 = abs((1.0 - _1596) / _1605);
        }
        else
        {
            float frontier_phi_49_42_ladder;
            if (_1605 < 0.0)
            {
                frontier_phi_49_42_ladder = abs((_1596 + 1.0) / _1605);
            }
            else
            {
                frontier_phi_49_42_ladder = 5000.0;
            }
            _2301 = frontier_phi_49_42_ladder;
        }
        float _2303 = isnan(_1979) ? _1633 : (isnan(_1633) ? _1979 : min(_1633, _1979));
        float _2304 = isnan(_2301) ? _2303 : (isnan(_2303) ? _2301 : min(_2303, _2301));
        float _2308 = (_2304 * _1599) + _1588;
        float _2309 = (_2304 * _1602) + _1592;
        float _2310 = (_2304 * _1605) + _1596;
        float _2311 = _2304 * 9.9999997473787516355514526367188e-05;
        float _2312 = (-1.0) - _2311;
        float _2314 = _2311 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_2310 > _2314) || ((_2310 < _2312) || ((_2309 > _2314) || ((_2309 < _2312) || ((_2308 < _2312) || (_2308 > _2314))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2436 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2310, cbModelParam._m0[9u].z, fma(_2309, cbModelParam._m0[9u].y, _2308 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2310, cbModelParam._m0[10u].z, fma(_2309, cbModelParam._m0[10u].y, _2308 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2310, cbModelParam._m0[11u].z, fma(_2309, cbModelParam._m0[11u].y, _2308 * cbModelParam._m0[11u].x))), _1540);
            frontier_phi_25_49_ladder = _2436.z * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_1 = _2436.y * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_2 = _2436.x * cbModelParam._m0[1u].y;
        }
        _1621 = frontier_phi_25_49_ladder_2;
        _1623 = frontier_phi_25_49_ladder_1;
        _1625 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1609 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_727, _728, _729), _1540);
        _1621 = _1609.x * cbModelParam._m0[1u].y;
        _1623 = _1609.y * cbModelParam._m0[1u].y;
        _1625 = _1609.z * cbModelParam._m0[1u].y;
    }
    float _1629 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _622);
    float _1630 = isnan(_1629) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1629 : min(cbModelParam._m0[25u].w, _1629));
    float _1719;
    float _1721;
    float _1723;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1683 = fma(_787, cbModelParam._m0[21u].z, fma(_783, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _779)) + cbModelParam._m0[21u].w;
        float _1687 = fma(_787, cbModelParam._m0[22u].z, fma(_783, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _779)) + cbModelParam._m0[22u].w;
        float _1691 = fma(_787, cbModelParam._m0[23u].z, fma(_783, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _779)) + cbModelParam._m0[23u].w;
        float _1694 = fma(_729, cbModelParam._m0[21u].z, fma(_728, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _727));
        float _1697 = fma(_729, cbModelParam._m0[22u].z, fma(_728, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _727));
        float _1700 = fma(_729, cbModelParam._m0[23u].z, fma(_728, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _727));
        float _1984;
        if (_1694 > 0.0)
        {
            _1984 = abs((1.0 - _1683) / _1694);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1694 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1683 + 1.0) / _1694);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1984 = frontier_phi_37_33_ladder;
        }
        float _2327;
        if (_1697 > 0.0)
        {
            _2327 = abs((1.0 - _1687) / _1697);
        }
        else
        {
            float frontier_phi_51_44_ladder;
            if (_1697 < 0.0)
            {
                frontier_phi_51_44_ladder = abs((_1687 + 1.0) / _1697);
            }
            else
            {
                frontier_phi_51_44_ladder = 5000.0;
            }
            _2327 = frontier_phi_51_44_ladder;
        }
        float _2496;
        if (_1700 > 0.0)
        {
            _2496 = abs((1.0 - _1691) / _1700);
        }
        else
        {
            float frontier_phi_65_60_ladder;
            if (_1700 < 0.0)
            {
                frontier_phi_65_60_ladder = abs((_1691 + 1.0) / _1700);
            }
            else
            {
                frontier_phi_65_60_ladder = 5000.0;
            }
            _2496 = frontier_phi_65_60_ladder;
        }
        float _2498 = isnan(_2327) ? _1984 : (isnan(_1984) ? _2327 : min(_1984, _2327));
        float _2499 = isnan(_2496) ? _2498 : (isnan(_2498) ? _2496 : min(_2498, _2496));
        float _2503 = (_2499 * _1694) + _1683;
        float _2504 = (_2499 * _1697) + _1687;
        float _2505 = (_2499 * _1700) + _1691;
        float _2506 = _2499 * 9.9999997473787516355514526367188e-05;
        float _2507 = (-1.0) - _2506;
        float _2509 = _2506 + 1.0;
        float frontier_phi_34_65_ladder;
        float frontier_phi_34_65_ladder_1;
        float frontier_phi_34_65_ladder_2;
        if ((_2505 > _2509) || ((_2505 < _2507) || ((_2504 > _2509) || ((_2504 < _2507) || ((_2503 < _2507) || (_2503 > _2509))))))
        {
            frontier_phi_34_65_ladder = 0.0;
            frontier_phi_34_65_ladder_1 = 0.0;
            frontier_phi_34_65_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2738 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2505, cbModelParam._m0[17u].z, fma(_2504, cbModelParam._m0[17u].y, _2503 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2505, cbModelParam._m0[18u].z, fma(_2504, cbModelParam._m0[18u].y, _2503 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2505, cbModelParam._m0[19u].z, fma(_2504, cbModelParam._m0[19u].y, _2503 * cbModelParam._m0[19u].x))), _1630);
            frontier_phi_34_65_ladder = _2738.y * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_1 = _2738.x * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_2 = _2738.z * cbModelParam._m0[1u].z;
        }
        _1719 = frontier_phi_34_65_ladder_1;
        _1721 = frontier_phi_34_65_ladder;
        _1723 = frontier_phi_34_65_ladder_2;
    }
    else
    {
        vec4 _1703 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_727, _728, _729), _1630);
        _1719 = _1703.x * cbModelParam._m0[1u].z;
        _1721 = _1703.y * cbModelParam._m0[1u].z;
        _1723 = _1703.z * cbModelParam._m0[1u].z;
    }
    float _1735 = ((((1.0 - _747) * ((_735 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_747 * _735)) * _719;
    float _1736 = _1735 * ((cbModelParam._m0[1u].w * (_1719 - _1621)) + _1621);
    float _1737 = _1735 * ((cbModelParam._m0[1u].w * (_1721 - _1623)) + _1623);
    float _1738 = _1735 * ((cbModelParam._m0[1u].w * (_1723 - _1625)) + _1625);
    float _1741 = fma(_1738, cbSceneParam._m0[89u].z, fma(_1737, cbSceneParam._m0[89u].y, _1736 * cbSceneParam._m0[89u].x));
    float _1744 = fma(_1738, cbSceneParam._m0[90u].z, fma(_1737, cbSceneParam._m0[90u].y, _1736 * cbSceneParam._m0[90u].x));
    float _1747 = fma(_1738, cbSceneParam._m0[91u].z, fma(_1737, cbSceneParam._m0[91u].y, _1736 * cbSceneParam._m0[91u].x));
    uvec4 _1757 = floatBitsToUint(cbInstanceData._m0[_694 + 5u]);
    uint _1759 = _1757.x * 14u;
    uint _1760 = _1759 + 13u;
    float _1765 = _719 + (-1.0);
    float _1768 = (cbLight._m0[_1760].x * _1765) + 1.0;
    float _1769 = (cbLight._m0[_1760].y * _1765) + 1.0;
    uint _1770 = _1759 + 5u;
    float _1776 = isnan(1.0) ? _1769 : (isnan(_1769) ? 1.0 : min(_1769, 1.0));
    uint _1780 = _1759 + 4u;
    float _1786 = isnan(1.0) ? _1768 : (isnan(_1768) ? 1.0 : min(_1768, 1.0));
    uint _1790 = _1759 | 1u;
    float _1801 = dot(vec3(cbLight._m0[_1759].xyz), vec3(_619, _620, _621));
    float _1804 = dot(vec3(cbLight._m0[_1790].xyz), vec3(_619, _620, _621));
    float _3692 = isnan(0.0) ? _1801 : (isnan(_1801) ? 0.0 : max(_1801, 0.0));
    float _3703 = isnan(0.0) ? _1804 : (isnan(_1804) ? 0.0 : max(_1804, 0.0));
    float _1809 = (isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0))) * 0.3183098733425140380859375;
    float _1811 = (isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * 0.3183098733425140380859375;
    float _1818 = ((cbLight._m0[_1770].x * _1776) * _1811) + ((cbLight._m0[_1780].x * _1786) * _1809);
    float _1819 = ((_1776 * cbLight._m0[_1770].y) * _1811) + ((_1786 * cbLight._m0[_1780].y) * _1809);
    float _1820 = ((_1776 * cbLight._m0[_1770].z) * _1811) + ((_1786 * cbLight._m0[_1780].z) * _1809);
    uint _1822 = _1759 + 8u;
    float _1835 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1759].w)) * _622) * 0.949999988079071044921875);
    float _1836 = _1835 * _1835;
    float _1837 = cbLight._m0[_1759].x + _646;
    float _1838 = cbLight._m0[_1759].y + _647;
    float _1839 = cbLight._m0[_1759].z + _648;
    float _1843 = inversesqrt(dot(vec3(_1837, _1838, _1839), vec3(_1837, _1838, _1839)));
    float _1844 = _1843 * _1837;
    float _1845 = _1843 * _1838;
    float _1846 = _1843 * _1839;
    float _1847 = dot(vec3(_619, _620, _621), vec3(cbLight._m0[_1759].xyz));
    float _3714 = isnan(0.0) ? _1847 : (isnan(_1847) ? 0.0 : max(_1847, 0.0));
    float _1850 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
    float _3725 = isnan(0.0) ? _720 : (isnan(_720) ? 0.0 : max(_720, 0.0));
    float _1851 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
    float _1852 = dot(vec3(_619, _620, _621), vec3(_1844, _1845, _1846));
    float _3736 = isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0));
    float _1855 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
    float _1856 = dot(vec3(cbLight._m0[_1759].xyz), vec3(_1844, _1845, _1846));
    float _3747 = isnan(0.0) ? _1856 : (isnan(_1856) ? 0.0 : max(_1856, 0.0));
    float _1860 = _1836 * _1836;
    float _1864 = ((_1855 * _1855) * (_1860 + (-1.0))) + 1.0;
    float _1875 = (exp2(log2(1.0 - (isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1876 = 1.0 - _1836;
    float _1887 = (0.5 / (((_1851 * ((_1850 * _1876) + _1836)) + 9.9999999392252902907785028219223e-09) + (((_1851 * _1876) + _1836) * _1850))) * _1850;
    float _3758 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
    float _1889 = (isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0))) * (_1860 / ((_1864 * _1864) * 3.141590118408203125));
    uint _1900 = _1759 + 9u;
    float _1911 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1790].w)) * _622) * 0.949999988079071044921875);
    float _1912 = _1911 * _1911;
    float _1913 = cbLight._m0[_1790].x + _646;
    float _1914 = cbLight._m0[_1790].y + _647;
    float _1915 = cbLight._m0[_1790].z + _648;
    float _1919 = inversesqrt(dot(vec3(_1913, _1914, _1915), vec3(_1913, _1914, _1915)));
    float _1920 = _1919 * _1913;
    float _1921 = _1919 * _1914;
    float _1922 = _1919 * _1915;
    float _1923 = dot(vec3(_619, _620, _621), vec3(cbLight._m0[_1790].xyz));
    float _3769 = isnan(0.0) ? _1923 : (isnan(_1923) ? 0.0 : max(_1923, 0.0));
    float _1926 = isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0));
    float _1927 = dot(vec3(_619, _620, _621), vec3(_1920, _1921, _1922));
    float _3780 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
    float _1930 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
    float _1931 = dot(vec3(cbLight._m0[_1790].xyz), vec3(_1920, _1921, _1922));
    float _3791 = isnan(0.0) ? _1931 : (isnan(_1931) ? 0.0 : max(_1931, 0.0));
    float _1935 = _1912 * _1912;
    float _1939 = ((_1930 * _1930) * (_1935 + (-1.0))) + 1.0;
    float _1948 = (exp2(log2(1.0 - (isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1949 = 1.0 - _1912;
    float _1959 = (0.5 / (((_1851 * ((_1926 * _1949) + _1912)) + 9.9999999392252902907785028219223e-09) + (((_1851 * _1949) + _1912) * _1926))) * _1926;
    float _3802 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
    float _1961 = (isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0))) * (_1935 / ((_1939 * _1939) * 3.141590118408203125));
    float _1971 = (((_1948 * cbLight._m0[_1900].x) * _1961) * _1776) + (((_1875 * cbLight._m0[_1822].x) * _1889) * _1786);
    float _1972 = (((_1948 * cbLight._m0[_1900].y) * _1961) * _1776) + (((_1875 * cbLight._m0[_1822].y) * _1889) * _1786);
    float _1973 = (((_1948 * cbLight._m0[_1900].z) * _1961) * _1776) + (((_1875 * cbLight._m0[_1822].z) * _1889) * _1786);
    float _2088;
    float _2090;
    float _2092;
    float _2094;
    float _2096;
    float _2098;
    if (_1757.y == 0u)
    {
        float _2028 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2029 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2028;
        float _2030 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2028;
        float _2031 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2028;
        uvec4 _2043 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2044 = _2043.x;
        uint _2055 = uint((float(_2043.y) * floor(float(uint(cbSceneParam._m0[85u].y * _655) / _2044))) + floor(float(uint(cbSceneParam._m0[85u].x * _654) / _2044)));
        float _2065 = (log2(_2031 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2066 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
        uint _2069 = uint(isnan(14.0) ? _2066 : (isnan(_2066) ? 14.0 : min(_2066, 14.0)));
        uvec4 _2074 = texelFetch(g_lightClusterGridBuffer, int(((_2069 << 2u) + (_2055 << 6u)) >> 2u));
        uint _2075 = _2074.x;
        uint _2076 = _2043.z;
        float _2188;
        float _2190;
        float _2192;
        float _2194;
        float _2196;
        float _2198;
        if (((((1u << ((_2076 >> 4u) & 15u)) + 4294967295u) & _2075) == 0u) || ((_2076 & 240u) == 0u))
        {
            _2188 = 0.0;
            _2190 = 0.0;
            _2192 = 0.0;
            _2194 = 0.0;
            _2196 = 0.0;
            _2198 = 0.0;
        }
        else
        {
            float _2189;
            float _2191;
            float _2193;
            float _2195;
            float _2197;
            float _2199;
            float _2364 = 0.0;
            float _2365 = 0.0;
            float _2366 = 0.0;
            float _2367 = 0.0;
            float _2368 = 0.0;
            float _2369 = 0.0;
            uint _2370 = 0u;
            uint _2379;
            bool _2380;
            for (;;)
            {
                _2379 = texelFetch(g_lightClassification, int((((_2069 << 5u) + (_2055 << 9u)) + (_2370 << 2u)) >> 2u)).x;
                _2380 = _2379 == 0u;
                float frontier_phi_62_pred;
                float frontier_phi_62_pred_1;
                float frontier_phi_62_pred_2;
                float frontier_phi_62_pred_3;
                float frontier_phi_62_pred_4;
                float frontier_phi_62_pred_5;
                if (_2380)
                {
                    frontier_phi_62_pred = _2365;
                    frontier_phi_62_pred_1 = _2364;
                    frontier_phi_62_pred_2 = _2366;
                    frontier_phi_62_pred_3 = _2369;
                    frontier_phi_62_pred_4 = _2368;
                    frontier_phi_62_pred_5 = _2367;
                }
                else
                {
                    float _2539;
                    float _2540;
                    float _2541;
                    float _2542;
                    float _2543;
                    float _2544;
                    uint _2545;
                    _2539 = _2364;
                    _2540 = _2365;
                    _2541 = _2366;
                    _2542 = _2367;
                    _2543 = _2368;
                    _2544 = _2369;
                    _2545 = _2379;
                    float _2445;
                    float _2446;
                    float _2447;
                    float _2448;
                    float _2449;
                    float _2450;
                    for (;;)
                    {
                        uint _2549 = uint(findLSB(_2545)) + (_2370 << 5u);
                        uint _2546 = (_2545 + 4294967295u) & _2545;
                        uint _2551 = _2549 * 48u;
                        vec4 _2565 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2551)).x, texelFetch(g_PointLightRenderingBuffer, int(_2551 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2551 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2551 + 3u)).x));
                        uint _2571 = (_2549 * 48u) + 4u;
                        vec4 _2584 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2571)).x, texelFetch(g_PointLightRenderingBuffer, int(_2571 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2571 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2571 + 3u)).x));
                        uint _2590 = (_2549 * 48u) + 8u;
                        vec3 _2601 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2590)).x, texelFetch(g_PointLightRenderingBuffer, int(_2590 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2590 + 2u)).x));
                        float _2605 = _2565.x - _2029;
                        float _2606 = _2565.y - _2030;
                        float _2607 = _2565.z - _2031;
                        float _2608 = dot(vec3(_2605, _2606, _2607), vec3(_2605, _2606, _2607));
                        float _2611 = inversesqrt(_2608);
                        float _2612 = _2611 * _2605;
                        float _2613 = _2611 * _2606;
                        float _2614 = _2611 * _2607;
                        float _2615 = dot(vec3(_675, _678, _681), vec3(_2612, _2613, _2614));
                        float _2620 = 1.0 - (_2608 * _2565.w);
                        float _3823 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
                        float _2621 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
                        float _2622 = sqrt(_2608) * _2584.w;
                        float _2625 = 1.39999997615814208984375 / (_2622 + 1.39999997615814208984375);
                        float _2626 = _2625 * _2625;
                        float _2629 = ((1.0 - _2626) * _2615) + _2626;
                        float _2632 = _2622 * _2622;
                        float _2636 = ((isnan(0.0) ? _2629 : (isnan(_2629) ? 0.0 : max(_2629, 0.0))) * _2621) / ((_2632 * 0.699999988079071044921875) + 1.0);
                        float _2640 = (-0.0) - _2029;
                        float _2641 = (-0.0) - _2030;
                        float _2642 = (-0.0) - _2031;
                        float _2646 = inversesqrt(dot(vec3(_2640, _2641, _2642), vec3(_2640, _2641, _2642)));
                        float _2647 = _2646 * _2640;
                        float _2648 = _2646 * _2641;
                        float _2649 = _2646 * _2642;
                        float _2657 = exp2(log2(1.0 / ((_2632 * 3.5) + 5.0)) * 0.25);
                        float _2658 = 1.0 - _735;
                        float _2665 = sqrt(1.0 - ((1.0 - (_2658 * _2658)) * (1.0 - (_2657 * _2657))));
                        float _2666 = _2665 * _2665;
                        float _2667 = _2666 * _2666;
                        float _2668 = _2647 + _2612;
                        float _2669 = _2648 + _2613;
                        float _2670 = _2649 + _2614;
                        float _2674 = inversesqrt(dot(vec3(_2668, _2669, _2670), vec3(_2668, _2669, _2670)));
                        float _2678 = dot(vec3(_675, _678, _681), vec3(_2647, _2648, _2649));
                        float _3839 = isnan(0.0) ? _2678 : (isnan(_2678) ? 0.0 : max(_2678, 0.0));
                        float _2681 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
                        float _2682 = dot(vec3(_675, _678, _681), vec3(_2674 * _2668, _2674 * _2669, _2674 * _2670));
                        float _3850 = isnan(0.0) ? _2682 : (isnan(_2682) ? 0.0 : max(_2682, 0.0));
                        float _2685 = isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0));
                        float _2689 = ((_2685 * _2685) * (_2667 + (-1.0))) + 1.0;
                        float _2690 = _2625 * _2666;
                        float _2691 = _2690 * _2690;
                        float _2694 = ((1.0 - _2691) * _2615) + _2691;
                        float _3861 = isnan(0.0) ? _2694 : (isnan(_2694) ? 0.0 : max(_2694, 0.0));
                        float _2695 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
                        float _2696 = 1.0 - _2666;
                        float _2706 = (0.5 / (((_2695 * ((_2681 * _2696) + _2666)) + 9.9999999392252902907785028219223e-09) + (((_2695 * _2696) + _2666) * _2681))) * _2695;
                        float _3872 = isnan(0.0) ? _2706 : (isnan(_2706) ? 0.0 : max(_2706, 0.0));
                        float _2717 = (((_2667 * 3.1415927410125732421875) * (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0)))) / ((_2689 * _2689) * ((_2632 * 2.1991131305694580078125) + 3.141590118408203125))) * _2621;
                        _2448 = (_2636 * _2584.x) + _2542;
                        _2449 = (_2636 * _2584.y) + _2543;
                        _2450 = (_2636 * _2584.z) + _2544;
                        _2445 = (_2717 * _2601.x) + _2539;
                        _2446 = (_2717 * _2601.y) + _2540;
                        _2447 = (_2717 * _2601.z) + _2541;
                        if (_2546 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2539 = _2445;
                            _2540 = _2446;
                            _2541 = _2447;
                            _2542 = _2448;
                            _2543 = _2449;
                            _2544 = _2450;
                            _2545 = _2546;
                        }
                    }
                    frontier_phi_62_pred = _2446;
                    frontier_phi_62_pred_1 = _2445;
                    frontier_phi_62_pred_2 = _2447;
                    frontier_phi_62_pred_3 = _2450;
                    frontier_phi_62_pred_4 = _2449;
                    frontier_phi_62_pred_5 = _2448;
                }
                _2191 = frontier_phi_62_pred;
                _2189 = frontier_phi_62_pred_1;
                _2193 = frontier_phi_62_pred_2;
                _2199 = frontier_phi_62_pred_3;
                _2197 = frontier_phi_62_pred_4;
                _2195 = frontier_phi_62_pred_5;
                uint _2371 = _2370 + 1u;
                if (_2371 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2364 = _2189;
                    _2365 = _2191;
                    _2366 = _2193;
                    _2367 = _2195;
                    _2368 = _2197;
                    _2369 = _2199;
                    _2370 = _2371;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2188 = _2189;
            _2190 = _2191;
            _2192 = _2193;
            _2194 = _2195;
            _2196 = _2197;
            _2198 = _2199;
        }
        uvec4 _2202 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2203 = _2202.z;
        uint _2205 = (_2203 >> 8u) & 15u;
        float _2332;
        float _2334;
        float _2336;
        float _2338;
        float _2340;
        float _2342;
        if (((4294967295u << _2205) & _2075) == 0u)
        {
            _2332 = _2188;
            _2334 = _2190;
            _2336 = _2192;
            _2338 = _2194;
            _2340 = _2196;
            _2342 = _2198;
        }
        else
        {
            float _2357 = inversesqrt(dot(vec3(_2029, _2030, _2031), vec3(_2029, _2030, _2031)));
            float _2358 = _2357 * _2029;
            float _2359 = _2357 * _2030;
            float _2360 = _2357 * _2031;
            float frontier_phi_53_54_ladder;
            float frontier_phi_53_54_ladder_1;
            float frontier_phi_53_54_ladder_2;
            float frontier_phi_53_54_ladder_3;
            float frontier_phi_53_54_ladder_4;
            float frontier_phi_53_54_ladder_5;
            if (_2205 < ((_2203 >> 12u) & 15u))
            {
                float _2333;
                float _2335;
                float _2337;
                float _2339;
                float _2341;
                float _2343;
                float _2522 = _2188;
                float _2523 = _2190;
                float _2524 = _2192;
                float _2525 = _2194;
                float _2526 = _2196;
                float _2527 = _2198;
                uint _2528 = _2205;
                uint _2537;
                bool _2538;
                for (;;)
                {
                    _2537 = texelFetch(g_lightClassification, int((((_2069 << 5u) + (_2055 << 9u)) + (_2528 << 2u)) >> 2u)).x;
                    _2538 = _2537 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    float frontier_phi_71_pred_3;
                    float frontier_phi_71_pred_4;
                    float frontier_phi_71_pred_5;
                    if (_2538)
                    {
                        frontier_phi_71_pred = _2523;
                        frontier_phi_71_pred_1 = _2522;
                        frontier_phi_71_pred_2 = _2527;
                        frontier_phi_71_pred_3 = _2526;
                        frontier_phi_71_pred_4 = _2525;
                        frontier_phi_71_pred_5 = _2524;
                    }
                    else
                    {
                        float _2743;
                        float _2744;
                        float _2745;
                        float _2746;
                        float _2747;
                        float _2748;
                        float _3038;
                        float _3039;
                        float _3040;
                        float _3041;
                        float _3042;
                        float _3043;
                        float _2756 = _2522;
                        float _2757 = _2523;
                        float _2758 = _2524;
                        float _2759 = _2525;
                        float _2760 = _2526;
                        float _2761 = _2527;
                        uint _2762 = _2537;
                        uint _2763;
                        vec4 _2788;
                        float _2789;
                        vec4 _2804;
                        vec3 _2816;
                        vec4 _2832;
                        vec4 _2848;
                        float _2894;
                        bool _2895;
                        for (;;)
                        {
                            uint _2773 = ((_2528 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2762));
                            _2763 = (_2762 + 4294967295u) & _2762;
                            uint _2775 = _2773 * 40u;
                            _2788 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2775)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2775 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2775 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2775 + 3u)).x));
                            _2789 = _2788.w;
                            uint _2791 = (_2773 * 40u) + 4u;
                            _2804 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2791)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2791 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2791 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2791 + 3u)).x));
                            uint _2806 = (_2773 * 40u) + 8u;
                            _2816 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2806)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2806 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2806 + 2u)).x));
                            uint _2819 = (_2773 * 40u) + 16u;
                            _2832 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2819)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2819 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2819 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2819 + 3u)).x));
                            uint _2835 = (_2773 * 40u) + 20u;
                            _2848 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2835)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2835 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2835 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2835 + 3u)).x));
                            uint _2850 = (_2773 * 40u) + 24u;
                            vec4 _2863 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2850)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2850 + 3u)).x));
                            uint _2869 = (_2773 * 40u) + 28u;
                            vec4 _2882 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2869)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2869 + 3u)).x));
                            _2894 = fma(_2031, _2882.z, fma(_2030, _2882.y, _2882.x * _2029)) + _2882.w;
                            _2895 = !((fma(_2031, _2863.z, fma(_2030, _2863.y, _2863.x * _2029)) + _2863.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            float frontier_phi_77_pred_3;
                            float frontier_phi_77_pred_4;
                            float frontier_phi_77_pred_5;
                            if (_2895)
                            {
                                float _2922 = _2788.x - _2029;
                                float _2923 = _2788.y - _2030;
                                float _2924 = _2788.z - _2031;
                                float _2925 = dot(vec3(_2922, _2923, _2924), vec3(_2922, _2923, _2924));
                                float _2928 = inversesqrt(_2925);
                                float _2929 = _2928 * _2922;
                                float _2930 = _2928 * _2923;
                                float _2931 = _2928 * _2924;
                                float _2935 = 1.0 - (_2925 / (_2789 * _2789));
                                float _3883 = isnan(0.0) ? _2935 : (isnan(_2935) ? 0.0 : max(_2935, 0.0));
                                float _2936 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
                                float _2940 = sqrt(_2925) * _2804.w;
                                float _2942 = 1.39999997615814208984375 / (_2940 + 1.39999997615814208984375);
                                float _2943 = _2942 * _2942;
                                float _2946 = ((1.0 - _2943) * dot(vec3(_2929, _2930, _2931), vec3(_675, _678, _681))) + _2943;
                                float _2949 = _2940 * _2940;
                                float _2953 = (fma(_2031, _2832.z, fma(_2030, _2832.y, _2832.x * _2029)) + _2832.w) / _2894;
                                float _2954 = (fma(_2031, _2848.z, fma(_2030, _2848.y, _2848.x * _2029)) + _2848.w) / _2894;
                                float _2958 = 1.0 - dot(vec2(_2953, _2954), vec2(_2953, _2954));
                                float _3899 = isnan(0.0) ? _2958 : (isnan(_2958) ? 0.0 : max(_2958, 0.0));
                                float _2959 = isnan(1.0) ? _3899 : (isnan(_3899) ? 1.0 : min(_3899, 1.0));
                                float _2960 = _2959 * (((isnan(0.0) ? _2946 : (isnan(_2946) ? 0.0 : max(_2946, 0.0))) * _2936) / ((_2949 * 0.699999988079071044921875) + 1.0));
                                float _2972 = exp2(log2(1.0 / ((_2949 * 3.5) + 5.0)) * 0.25);
                                float _2973 = 1.0 - _735;
                                float _2980 = sqrt(1.0 - ((1.0 - (_2973 * _2973)) * (1.0 - (_2972 * _2972))));
                                float _2981 = _2980 * _2980;
                                float _2982 = _2981 * _2981;
                                float _2983 = _2929 - _2358;
                                float _2984 = _2930 - _2359;
                                float _2985 = _2931 - _2360;
                                float _2989 = inversesqrt(dot(vec3(_2983, _2984, _2985), vec3(_2983, _2984, _2985)));
                                float _2993 = dot(vec3(_675, _678, _681), vec3((-0.0) - _2358, (-0.0) - _2359, (-0.0) - _2360));
                                float _3910 = isnan(0.0) ? _2993 : (isnan(_2993) ? 0.0 : max(_2993, 0.0));
                                float _2996 = isnan(1.0) ? _3910 : (isnan(_3910) ? 1.0 : min(_3910, 1.0));
                                float _2997 = dot(vec3(_675, _678, _681), vec3(_2989 * _2983, _2989 * _2984, _2989 * _2985));
                                float _3921 = isnan(0.0) ? _2997 : (isnan(_2997) ? 0.0 : max(_2997, 0.0));
                                float _3000 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
                                float _3004 = ((_3000 * _3000) * (_2982 + (-1.0))) + 1.0;
                                float _3005 = _2942 * _2981;
                                float _3006 = _3005 * _3005;
                                float _3012 = ((1.0 - _3006) * dot(vec3(_675, _678, _681), vec3(_2929, _2930, _2931))) + _3006;
                                float _3932 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
                                float _3013 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
                                float _3014 = 1.0 - _2981;
                                float _3024 = (0.5 / (((_3013 * ((_2996 * _3014) + _2981)) + 9.9999999392252902907785028219223e-09) + (((_3013 * _3014) + _2981) * _2996))) * _3013;
                                float _3943 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
                                float _3034 = (_2959 * _2936) * (((_2982 * 3.1415927410125732421875) * (isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0)))) / ((_3004 * _3004) * ((_2949 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_77_pred = _3034 * _2816.y;
                                frontier_phi_77_pred_1 = _3034 * _2816.x;
                                frontier_phi_77_pred_2 = _2960 * _2804.z;
                                frontier_phi_77_pred_3 = _2960 * _2804.y;
                                frontier_phi_77_pred_4 = _2960 * _2804.x;
                                frontier_phi_77_pred_5 = _3034 * _2816.z;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                                frontier_phi_77_pred_3 = 0.0;
                                frontier_phi_77_pred_4 = 0.0;
                                frontier_phi_77_pred_5 = 0.0;
                            }
                            _3039 = frontier_phi_77_pred;
                            _3038 = frontier_phi_77_pred_1;
                            _3043 = frontier_phi_77_pred_2;
                            _3042 = frontier_phi_77_pred_3;
                            _3041 = frontier_phi_77_pred_4;
                            _3040 = frontier_phi_77_pred_5;
                            _2746 = _3041 + _2759;
                            _2747 = _3042 + _2760;
                            _2748 = _3043 + _2761;
                            _2743 = _3038 + _2756;
                            _2744 = _3039 + _2757;
                            _2745 = _3040 + _2758;
                            if (_2763 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2756 = _2743;
                                _2757 = _2744;
                                _2758 = _2745;
                                _2759 = _2746;
                                _2760 = _2747;
                                _2761 = _2748;
                                _2762 = _2763;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _2744;
                        frontier_phi_71_pred_1 = _2743;
                        frontier_phi_71_pred_2 = _2748;
                        frontier_phi_71_pred_3 = _2747;
                        frontier_phi_71_pred_4 = _2746;
                        frontier_phi_71_pred_5 = _2745;
                    }
                    _2335 = frontier_phi_71_pred;
                    _2333 = frontier_phi_71_pred_1;
                    _2343 = frontier_phi_71_pred_2;
                    _2341 = frontier_phi_71_pred_3;
                    _2339 = frontier_phi_71_pred_4;
                    _2337 = frontier_phi_71_pred_5;
                    uint _2529 = _2528 + 1u;
                    if (_2529 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2522 = _2333;
                        _2523 = _2335;
                        _2524 = _2337;
                        _2525 = _2339;
                        _2526 = _2341;
                        _2527 = _2343;
                        _2528 = _2529;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_53_54_ladder = _2343;
                frontier_phi_53_54_ladder_1 = _2339;
                frontier_phi_53_54_ladder_2 = _2337;
                frontier_phi_53_54_ladder_3 = _2335;
                frontier_phi_53_54_ladder_4 = _2333;
                frontier_phi_53_54_ladder_5 = _2341;
            }
            else
            {
                frontier_phi_53_54_ladder = _2198;
                frontier_phi_53_54_ladder_1 = _2194;
                frontier_phi_53_54_ladder_2 = _2192;
                frontier_phi_53_54_ladder_3 = _2190;
                frontier_phi_53_54_ladder_4 = _2188;
                frontier_phi_53_54_ladder_5 = _2196;
            }
            _2332 = frontier_phi_53_54_ladder_4;
            _2334 = frontier_phi_53_54_ladder_3;
            _2336 = frontier_phi_53_54_ladder_2;
            _2338 = frontier_phi_53_54_ladder_1;
            _2340 = frontier_phi_53_54_ladder_5;
            _2342 = frontier_phi_53_54_ladder;
        }
        float _2347 = isnan(1.0) ? _719 : (isnan(_719) ? 1.0 : min(_719, 1.0));
        _2088 = (_2347 * _2338) + _1818;
        _2090 = (_2347 * _2340) + _1819;
        _2092 = (_2347 * _2342) + _1820;
        _2094 = ((_2332 * 0.039999999105930328369140625) * _2347) + _1971;
        _2096 = ((_2334 * 0.039999999105930328369140625) * _2347) + _1972;
        _2098 = ((_2336 * 0.039999999105930328369140625) * _2347) + _1973;
    }
    else
    {
        _2088 = _1818;
        _2090 = _1819;
        _2092 = _1820;
        _2094 = _1971;
        _2096 = _1972;
        _2098 = _1973;
    }
    uint _2104 = _695 + uint(cbMatDynParam._m0[0u].w);
    float _3959 = isnan(0.0) ? _705 : (isnan(_705) ? 0.0 : max(_705, 0.0));
    float _3970 = isnan(0.0) ? _706 : (isnan(_706) ? 0.0 : max(_706, 0.0));
    float _3981 = isnan(0.0) ? _707 : (isnan(_707) ? 0.0 : max(_707, 0.0));
    float _2135 = (((isnan(1.0) ? _3959 : (isnan(_3959) ? 1.0 : min(_3959, 1.0))) * (_2088 + ((isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0))) * _719))) + ((_2094 + ((isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0))) * _1529)) * cbPerFrame._m0[3u].x)) + (((_504.x * _291) * (((_569 * (cbMtdParam._m0[15u].x - cbMtdParam._m0[13u].x)) * _564) + cbMtdParam._m0[13u].x)) * cbInstanceData._m0[_2104].x);
    float _2137 = ((((_504.y * _291) * (((_569 * (cbMtdParam._m0[15u].y - cbMtdParam._m0[13u].y)) * _564) + cbMtdParam._m0[13u].y)) * cbInstanceData._m0[_2104].y) + ((_2096 + ((isnan(0.0) ? _1744 : (isnan(_1744) ? 0.0 : max(_1744, 0.0))) * _1529)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3970 : (isnan(_3970) ? 1.0 : min(_3970, 1.0))) * (_2090 + ((isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0))) * _719)));
    float _2139 = ((((_504.z * _291) * (((_569 * (cbMtdParam._m0[15u].z - cbMtdParam._m0[13u].z)) * _564) + cbMtdParam._m0[13u].z)) * cbInstanceData._m0[_2104].z) + ((_2098 + ((isnan(0.0) ? _1747 : (isnan(_1747) ? 0.0 : max(_1747, 0.0))) * _1529)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * (_2092 + ((isnan(0.0) ? _1456 : (isnan(_1456) ? 0.0 : max(_1456, 0.0))) * _719)));
    uint _2143 = _694 + 6u;
    float _2151 = _654 / cbSceneParam._m0[86u].x;
    float _2152 = _655 / cbSceneParam._m0[86u].y;
    vec4 _2166 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2151, _2152, (log2((isnan(cbSceneParam._m0[77u].w) ? _641 : (isnan(_641) ? cbSceneParam._m0[77u].w : min(_641, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2168 = _2166.x;
    float _2169 = _2166.y;
    float _2170 = _2166.z;
    float _2171 = _2166.w;
    float _2251;
    float _2253;
    float _2255;
    float _2257;
    if (_641 > cbSceneParam._m0[78u].w)
    {
        float _2213 = isnan(_641) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _641 : min(cbSceneParam._m0[80u].w, _641));
        float _2214 = _2213 / _641;
        float _2225 = _2214 * _273;
        float _2226 = _274 * _2214;
        float _2227 = (-0.0) - _2226;
        float _2228 = _2214 * _275;
        float _2230 = (cbSceneParam._m0[77u].w * _2227) / _2213;
        float _2231 = _2230 + cbSceneParam._m0[79u].w;
        float _2232 = cbSceneParam._m0[79u].w - _2226;
        float _2238 = sqrt(((_2225 * _2225) + (_2226 * _2226)) + (_2228 * _2228));
        float _2241 = (1.0 - (cbSceneParam._m0[77u].w / _2213)) * _2238;
        float _2247 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2249 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2458;
        if (abs((_2227 - _2230) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2458 = ((((_2231 > 0.0) ? exp2(_2247 * _2231) : (2.0 - exp2(_2249 * _2231))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2241;
        }
        else
        {
            float _2393 = 1.0 / cbSceneParam._m0[80u].x;
            float _2394 = isnan(_2232) ? _2231 : (isnan(_2231) ? _2232 : max(_2231, _2232));
            float _2395 = isnan(_2232) ? _2231 : (isnan(_2231) ? _2232 : min(_2231, _2232));
            float _2404 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : min(_2394, 0.0));
            float _2405 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : min(_2395, 0.0));
            _2458 = ((abs(_2238 / _2227) * cbSceneParam._m0[80u].y) * ((((_2404 - _2405) * 2.0) - ((exp2(_2247 * (isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0)))) - exp2(_2247 * (isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0))))) * _2393)) - ((exp2(_2249 * _2404) - exp2(_2249 * _2405)) * _2393))) + (_2241 * cbSceneParam._m0[80u].z);
        }
        vec4 _2460 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2151, _2152, 1.0), 0.0);
        float _2469 = exp2((_2458 * (-1.44269502162933349609375)) * (1.0 - _2460.w));
        float _2470 = log2(_2469);
        float _2486 = log2(_2171);
        _2251 = (exp2(_2486 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2470 * cbSceneParam._m0[78u].x)) * _2460.x) / cbSceneParam._m0[78u].x)) + _2168;
        _2253 = (exp2(_2486 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2470 * cbSceneParam._m0[78u].y)) * _2460.y) / cbSceneParam._m0[78u].y)) + _2169;
        _2255 = (exp2(_2486 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2470 * cbSceneParam._m0[78u].z)) * _2460.z) / cbSceneParam._m0[78u].z)) + _2170;
        _2257 = _2469 * _2171;
    }
    else
    {
        _2251 = _2168;
        _2253 = _2169;
        _2255 = _2170;
        _2257 = _2171;
    }
    float _2269 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2270 = _2269 == 3.0;
    float _2271 = log2(_2257);
    float _2278 = exp2(_2271 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2135 : (isnan(_2135) ? 0.0 : max(_2135, 0.0)));
    float _2279 = exp2(_2271 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2137 : (isnan(_2137) ? 0.0 : max(_2137, 0.0)));
    float _2280 = exp2(_2271 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2139 : (isnan(_2139) ? 0.0 : max(_2139, 0.0)));
    float _2289 = (_2269 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2289 * (_2270 ? _2278 : (_2278 + (cbSceneParam._m0[72u].w * _2251)));
    SV_Target.y = _2289 * (_2270 ? _2279 : (_2279 + (cbSceneParam._m0[72u].w * _2253)));
    SV_Target.z = _2289 * (_2270 ? _2280 : (_2280 + (cbSceneParam._m0[72u].w * _2255)));
    SV_Target.w = cbInstanceData._m0[_2143].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2143].w;
}


