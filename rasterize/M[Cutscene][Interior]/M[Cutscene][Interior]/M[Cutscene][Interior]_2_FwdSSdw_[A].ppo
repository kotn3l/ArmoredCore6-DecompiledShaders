#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _798;
uint _1996;
uint _1997;
uint _1998;
uint _2241;
uint _2242;
uint _2243;
float _2490;
float _2491;
float _2492;
float _2493;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _255 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _265 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _255);
    float _266 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _255);
    float _267 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _255);
    vec4 _286 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _321 = cbMtdParam._m0[24u].x + _265;
    float _322 = cbMtdParam._m0[24u].y + _266;
    float _323 = cbMtdParam._m0[24u].z + _267;
    float _337 = (-0.0) - dot(vec3(_321, _322, _323), vec3(_193 * _186, _193 * _187, _193 * _188));
    float _338 = (-0.0) - dot(vec3(_321, _322, _323), vec3(_207 * TANGENT.x, _207 * TANGENT.y, _207 * TANGENT.z));
    float _339 = (-0.0) - dot(vec3(_321, _322, _323), vec3((-0.0) - (_200 * NORMAL.x), (-0.0) - (_200 * NORMAL.y), (-0.0) - (_200 * NORMAL.z)));
    float _343 = inversesqrt(dot(vec3(_337, _338, _339), vec3(_337, _338, _339)));
    float _346 = _343 * _339;
    float _347 = (_343 * _337) + (((_286.x * 2.0) + (-1.0)) * cbMtdParam._m0[22u].x);
    float _348 = (_343 * _338) + (((_286.y * 2.0) + (-1.0)) * cbMtdParam._m0[22u].y);
    float _349 = _347 * cbMtdParam._m0[20u].w;
    float _350 = _348 * cbMtdParam._m0[20u].z;
    float _351 = fract(TEXCOORD.x);
    float _352 = fract(TEXCOORD.y);
    float _358;
    if (_349 > 0.0)
    {
        _358 = (1.0 - _351) / _349;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_349 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _351) / _349;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _358 = frontier_phi_3_2_ladder;
    }
    float _366;
    if (_350 > 0.0)
    {
        _366 = (1.0 - _352) / _350;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_350 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _352) / _350;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _366 = frontier_phi_7_6_ladder;
    }
    bool _368 = _346 > 0.0;
    float _370 = _368 ? (cbMtdParam._m0[16u].x / _346) : 5000.0;
    float _371 = isnan(_366) ? _358 : (isnan(_358) ? _366 : min(_358, _366));
    float _372 = isnan(_370) ? _371 : (isnan(_371) ? _370 : min(_371, _370));
    float _376 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _377 = _351 + (-0.5);
    float _380 = _352 + (-0.5);
    float _383 = ((_372 * _346) + _376) / _376;
    vec4 _408 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (((((_377 + (_372 * _349)) / _383) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (((((_380 + (_372 * _350)) / _383) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    float _418 = cbMtdParam._m0[9u].x * _408.x;
    float _419 = cbMtdParam._m0[9u].y * _408.y;
    float _420 = cbMtdParam._m0[9u].z * _408.z;
    float _439 = _347 * cbMtdParam._m0[22u].w;
    float _440 = _348 * cbMtdParam._m0[22u].z;
    bool _441 = _439 > 0.0;
    float _446;
    if (_441)
    {
        _446 = (1.0 - _351) / _439;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_439 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _351) / _439;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _446 = frontier_phi_11_10_ladder;
    }
    bool _448 = _440 > 0.0;
    float _453;
    if (_448)
    {
        _453 = (1.0 - _352) / _440;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_440 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _352) / _440;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _453 = frontier_phi_15_14_ladder;
    }
    float _456 = _368 ? (cbMtdParam._m0[18u].x / _346) : 5000.0;
    float _457 = isnan(_453) ? _446 : (isnan(_446) ? _453 : min(_446, _453));
    float _458 = isnan(_456) ? _457 : (isnan(_457) ? _456 : min(_457, _456));
    float _462 = cbMtdParam._m0[19u].y * cbMtdParam._m0[18u].x;
    float _466 = ((_458 * _346) + _462) / _462;
    float _471 = cbMtdParam._m0[19u].x - cbMtdParam._m0[20u].x * trunc(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    float _473 = floor(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    vec4 _489 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_377 + (_458 * _439)) / _466) + 0.5) + _471) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_380 + (_458 * _440)) / _466) + 0.5) + _473) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[0u].w));
    float _501;
    if (_441)
    {
        _501 = (1.0 - _351) / _439;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_439 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _351) / _439;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _501 = frontier_phi_19_18_ladder;
    }
    float _507;
    if (_448)
    {
        _507 = (1.0 - _352) / _440;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_440 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _352) / _440;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _507 = frontier_phi_23_22_ladder;
    }
    float _509 = isnan(_507) ? _501 : (isnan(_501) ? _507 : min(_501, _507));
    float _510 = isnan(_456) ? _509 : (isnan(_509) ? _456 : min(_509, _456));
    float _517 = ((_510 * _346) + _462) / _462;
    vec4 _537 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_377 + (_510 * _439)) / _517) + 0.5) + _471) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_380 + (_510 * _440)) / _517) + 0.5) + _473) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[8u].w));
    float _539 = _537.x;
    float _564 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _568 = inversesqrt(dot(vec3(_265, _266, _267), vec3(_265, _266, _267)));
    float _569 = _265 * _568;
    float _570 = _266 * _568;
    float _571 = _267 * _568;
    vec4 _576 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _578 = _576.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _647 = sqrt(((_265 * _265) + (_266 * _266)) + (_267 * _267));
        float _653 = (cbMatDynParam._m0[5u].x * _647) + cbMatDynParam._m0[5u].y;
        float _2532 = isnan(0.0) ? _653 : (isnan(_653) ? 0.0 : max(_653, 0.0));
        float _654 = isnan(1.0) ? _2532 : (isnan(_2532) ? 1.0 : min(_2532, 1.0));
        float _658 = (cbMatDynParam._m0[5u].z * _647) + cbMatDynParam._m0[5u].w;
        float _2543 = isnan(0.0) ? _658 : (isnan(_658) ? 0.0 : max(_658, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2543 : (isnan(_2543) ? 1.0 : min(_2543, 1.0))) - _654)) + _654) < ((_578 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _590 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _591 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _600 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_590 * cbSceneParam._m0[86u].x, _591 * cbSceneParam._m0[86u].y));
    float _603 = _600.x * TEXCOORD_4.z;
    float _604 = (-0.0) - _569;
    float _605 = (-0.0) - _570;
    float _606 = (-0.0) - _571;
    float _628 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _632 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _636 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _797;
    float _799;
    float _800;
    float _801;
    float _802;
    float _803;
    float _804;
    float _805;
    float _806;
    float _807;
    float _808;
    float _809;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _720 = (cbModelParam._m0[37u].x * ((((fma(_636, cbModelParam._m0[26u].z, fma(_632, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _628)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _722 = (cbModelParam._m0[37u].y * ((((fma(_636, cbModelParam._m0[27u].z, fma(_632, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _628)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _723 = (((((fma(_636, cbModelParam._m0[28u].z, fma(_632, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _628)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _726 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_720, _722, _723), 0.0);
        vec4 _733 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_720, _722, _723), 0.0);
        vec4 _740 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_720, _722, _723), 0.0);
        vec4 _747 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_720, _722, _723), 0.0);
        float _760 = exp2((_726.w + (-0.5)) * 20.0) * 2.0;
        float _770 = exp2((_733.w + (-0.5)) * 20.0) * 2.0;
        float _780 = exp2((_740.w + (-0.5)) * 20.0) * 2.0;
        float _790 = exp2((_747.w + (-0.5)) * 20.0) * 2.0;
        float _791 = _790 * (_747.x + (-0.5));
        float _792 = _790 * (_747.y + (-0.5));
        float _793 = _790 * (_747.z + (-0.5));
        _797 = _760 * (_726.z + (-0.5));
        _799 = _760 * (_726.y + (-0.5));
        _800 = _760 * (_726.x + (-0.5));
        _801 = _770 * (_733.z + (-0.5));
        _802 = _770 * (_733.y + (-0.5));
        _803 = _770 * (_733.x + (-0.5));
        _804 = _780 * (_740.z + (-0.5));
        _805 = _780 * (_740.y + (-0.5));
        _806 = _780 * (_740.x + (-0.5));
        _807 = isnan(0.0) ? _793 : (isnan(_793) ? 0.0 : max(_793, 0.0));
        _808 = isnan(0.0) ? _792 : (isnan(_792) ? 0.0 : max(_792, 0.0));
        _809 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
    }
    else
    {
        _797 = _798;
        _799 = _798;
        _800 = _798;
        _801 = _798;
        _802 = _798;
        _803 = _798;
        _804 = _798;
        _805 = _798;
        _806 = _798;
        _807 = _798;
        _808 = _798;
        _809 = _798;
    }
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    float _947;
    float _948;
    float _949;
    float _950;
    float _951;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _866 = (cbModelParam._m0[38u].x * ((((fma(_636, cbModelParam._m0[30u].z, fma(_632, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _628)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _867 = (cbModelParam._m0[38u].y * ((((fma(_636, cbModelParam._m0[31u].z, fma(_632, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _628)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _868 = (((((fma(_636, cbModelParam._m0[32u].z, fma(_632, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _628)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _870 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_866, _867, _868), 0.0);
        vec4 _877 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_866, _867, _868), 0.0);
        vec4 _884 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_866, _867, _868), 0.0);
        vec4 _891 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_866, _867, _868), 0.0);
        float _903 = exp2((_870.w + (-0.5)) * 20.0) * 2.0;
        float _913 = exp2((_877.w + (-0.5)) * 20.0) * 2.0;
        float _923 = exp2((_884.w + (-0.5)) * 20.0) * 2.0;
        float _933 = exp2((_891.w + (-0.5)) * 20.0) * 2.0;
        float _934 = _933 * (_891.x + (-0.5));
        float _935 = _933 * (_891.y + (-0.5));
        float _936 = _933 * (_891.z + (-0.5));
        _940 = _903 * (_870.z + (-0.5));
        _941 = _903 * (_870.y + (-0.5));
        _942 = _903 * (_870.x + (-0.5));
        _943 = _913 * (_877.z + (-0.5));
        _944 = _913 * (_877.y + (-0.5));
        _945 = _913 * (_877.x + (-0.5));
        _946 = _923 * (_884.z + (-0.5));
        _947 = _923 * (_884.y + (-0.5));
        _948 = _923 * (_884.x + (-0.5));
        _949 = isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0));
        _950 = isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0));
        _951 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
    }
    else
    {
        _940 = _798;
        _941 = _798;
        _942 = _798;
        _943 = _798;
        _944 = _798;
        _945 = _798;
        _946 = _798;
        _947 = _798;
        _948 = _798;
        _949 = _798;
        _950 = _798;
        _951 = _798;
    }
    float _966 = _569 * (-0.5);
    float _967 = _570 * (-0.5);
    float _968 = _571 * (-0.5);
    float _969 = dot(vec4(_966, _967, _968, 1.0), vec4(_942, _945, _948, _951));
    float _972 = dot(vec4(_966, _967, _968, 1.0), vec4(_941, _944, _947, _950));
    float _975 = dot(vec4(_966, _967, _968, 1.0), vec4(_940, _943, _946, _949));
    float _1010;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _982 = dot(vec4(_966, _967, _968, 1.0), vec4(_797, _801, _804, _807));
        float _986 = dot(vec4(_966, _967, _968, 1.0), vec4(_799, _802, _805, _808));
        float _990 = dot(vec4(_966, _967, _968, 1.0), vec4(_800, _803, _806, _809));
        float _997 = dot(vec4(cbModelParam._m0[39u]), vec4(_966, _967, _968, 1.0));
        _1010 = dot(vec3(isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0)), isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0)), isnan(0.0) ? _982 : (isnan(_982) ? 0.0 : max(_982, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_997) ? 0.0 : (isnan(0.0) ? _997 : max(0.0, _997))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1010 = 1.0;
    }
    float _1021;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1012 = dot(vec4(cbModelParam._m0[40u]), vec4(_966, _967, _968, 1.0));
        _1021 = dot(vec3(isnan(0.0) ? _969 : (isnan(_969) ? 0.0 : max(_969, 0.0)), isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0)), isnan(0.0) ? _975 : (isnan(_975) ? 0.0 : max(_975, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1012) ? 0.0 : (isnan(0.0) ? _1012 : max(0.0, _1012))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1021 = 1.0;
    }
    float _1025 = (_1021 * cbModelParam._m0[1u].x) + (_1010 * (1.0 - cbModelParam._m0[1u].x));
    float _1031 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1115;
    float _1117;
    float _1119;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1082 = fma(_636, cbModelParam._m0[13u].z, fma(_632, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _628)) + cbModelParam._m0[13u].w;
        float _1086 = fma(_636, cbModelParam._m0[14u].z, fma(_632, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _628)) + cbModelParam._m0[14u].w;
        float _1090 = fma(_636, cbModelParam._m0[15u].z, fma(_632, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _628)) + cbModelParam._m0[15u].w;
        float _1093 = fma(_606, cbModelParam._m0[13u].z, fma(_605, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _604));
        float _1096 = fma(_606, cbModelParam._m0[14u].z, fma(_605, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _604));
        float _1099 = fma(_606, cbModelParam._m0[15u].z, fma(_605, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _604));
        float _1125;
        if (_1093 > 0.0)
        {
            _1125 = abs((1.0 - _1082) / _1093);
        }
        else
        {
            float frontier_phi_41_39_ladder;
            if (_1093 < 0.0)
            {
                frontier_phi_41_39_ladder = abs((_1082 + 1.0) / _1093);
            }
            else
            {
                frontier_phi_41_39_ladder = 5000.0;
            }
            _1125 = frontier_phi_41_39_ladder;
        }
        float _1423;
        if (_1096 > 0.0)
        {
            _1423 = abs((1.0 - _1086) / _1096);
        }
        else
        {
            float frontier_phi_50_46_ladder;
            if (_1096 < 0.0)
            {
                frontier_phi_50_46_ladder = abs((_1086 + 1.0) / _1096);
            }
            else
            {
                frontier_phi_50_46_ladder = 5000.0;
            }
            _1423 = frontier_phi_50_46_ladder;
        }
        float _1728;
        if (_1099 > 0.0)
        {
            _1728 = abs((1.0 - _1090) / _1099);
        }
        else
        {
            float frontier_phi_64_57_ladder;
            if (_1099 < 0.0)
            {
                frontier_phi_64_57_ladder = abs((_1090 + 1.0) / _1099);
            }
            else
            {
                frontier_phi_64_57_ladder = 5000.0;
            }
            _1728 = frontier_phi_64_57_ladder;
        }
        float _1730 = isnan(_1423) ? _1125 : (isnan(_1125) ? _1423 : min(_1125, _1423));
        float _1731 = isnan(_1728) ? _1730 : (isnan(_1730) ? _1728 : min(_1730, _1728));
        float _1735 = (_1731 * _1093) + _1082;
        float _1736 = (_1731 * _1096) + _1086;
        float _1737 = (_1731 * _1099) + _1090;
        float _1738 = _1731 * 9.9999997473787516355514526367188e-05;
        float _1739 = (-1.0) - _1738;
        float _1741 = _1738 + 1.0;
        float frontier_phi_40_64_ladder;
        float frontier_phi_40_64_ladder_1;
        float frontier_phi_40_64_ladder_2;
        if ((_1737 > _1741) || ((_1737 < _1739) || ((_1736 > _1741) || ((_1736 < _1739) || ((_1735 < _1739) || (_1735 > _1741))))))
        {
            frontier_phi_40_64_ladder = 0.0;
            frontier_phi_40_64_ladder_1 = 0.0;
            frontier_phi_40_64_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1864 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1737, cbModelParam._m0[9u].z, fma(_1736, cbModelParam._m0[9u].y, _1735 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1737, cbModelParam._m0[10u].z, fma(_1736, cbModelParam._m0[10u].y, _1735 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1737, cbModelParam._m0[11u].z, fma(_1736, cbModelParam._m0[11u].y, _1735 * cbModelParam._m0[11u].x))), _1031);
            frontier_phi_40_64_ladder = _1864.z * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_1 = _1864.y * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_2 = _1864.x * cbModelParam._m0[1u].y;
        }
        _1115 = frontier_phi_40_64_ladder_2;
        _1117 = frontier_phi_40_64_ladder_1;
        _1119 = frontier_phi_40_64_ladder;
    }
    else
    {
        vec4 _1103 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_604, _605, _606), _1031);
        _1115 = _1103.x * cbModelParam._m0[1u].y;
        _1117 = _1103.y * cbModelParam._m0[1u].y;
        _1119 = _1103.z * cbModelParam._m0[1u].y;
    }
    float _1122 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1210;
    float _1212;
    float _1214;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1174 = fma(_636, cbModelParam._m0[21u].z, fma(_632, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _628)) + cbModelParam._m0[21u].w;
        float _1178 = fma(_636, cbModelParam._m0[22u].z, fma(_632, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _628)) + cbModelParam._m0[22u].w;
        float _1182 = fma(_636, cbModelParam._m0[23u].z, fma(_632, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _628)) + cbModelParam._m0[23u].w;
        float _1185 = fma(_606, cbModelParam._m0[21u].z, fma(_605, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _604));
        float _1188 = fma(_606, cbModelParam._m0[22u].z, fma(_605, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _604));
        float _1191 = fma(_606, cbModelParam._m0[23u].z, fma(_605, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _604));
        float _1428;
        if (_1185 > 0.0)
        {
            _1428 = abs((1.0 - _1174) / _1185);
        }
        else
        {
            float frontier_phi_52_48_ladder;
            if (_1185 < 0.0)
            {
                frontier_phi_52_48_ladder = abs((_1174 + 1.0) / _1185);
            }
            else
            {
                frontier_phi_52_48_ladder = 5000.0;
            }
            _1428 = frontier_phi_52_48_ladder;
        }
        float _1754;
        if (_1188 > 0.0)
        {
            _1754 = abs((1.0 - _1178) / _1188);
        }
        else
        {
            float frontier_phi_66_59_ladder;
            if (_1188 < 0.0)
            {
                frontier_phi_66_59_ladder = abs((_1178 + 1.0) / _1188);
            }
            else
            {
                frontier_phi_66_59_ladder = 5000.0;
            }
            _1754 = frontier_phi_66_59_ladder;
        }
        float _1926;
        if (_1191 > 0.0)
        {
            _1926 = abs((1.0 - _1182) / _1191);
        }
        else
        {
            float frontier_phi_84_77_ladder;
            if (_1191 < 0.0)
            {
                frontier_phi_84_77_ladder = abs((_1182 + 1.0) / _1191);
            }
            else
            {
                frontier_phi_84_77_ladder = 5000.0;
            }
            _1926 = frontier_phi_84_77_ladder;
        }
        float _1928 = isnan(_1754) ? _1428 : (isnan(_1428) ? _1754 : min(_1428, _1754));
        float _1929 = isnan(_1926) ? _1928 : (isnan(_1928) ? _1926 : min(_1928, _1926));
        float _1933 = (_1929 * _1185) + _1174;
        float _1934 = (_1929 * _1188) + _1178;
        float _1935 = (_1929 * _1191) + _1182;
        float _1936 = _1929 * 9.9999997473787516355514526367188e-05;
        float _1937 = (-1.0) - _1936;
        float _1939 = _1936 + 1.0;
        float frontier_phi_49_84_ladder;
        float frontier_phi_49_84_ladder_1;
        float frontier_phi_49_84_ladder_2;
        if ((_1935 > _1939) || ((_1935 < _1937) || ((_1934 > _1939) || ((_1934 < _1937) || ((_1933 < _1937) || (_1933 > _1939))))))
        {
            frontier_phi_49_84_ladder = 0.0;
            frontier_phi_49_84_ladder_1 = 0.0;
            frontier_phi_49_84_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2104 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1935, cbModelParam._m0[17u].z, fma(_1934, cbModelParam._m0[17u].y, _1933 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1935, cbModelParam._m0[18u].z, fma(_1934, cbModelParam._m0[18u].y, _1933 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1935, cbModelParam._m0[19u].z, fma(_1934, cbModelParam._m0[19u].y, _1933 * cbModelParam._m0[19u].x))), _1122);
            frontier_phi_49_84_ladder = _2104.x * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_1 = _2104.y * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_2 = _2104.z * cbModelParam._m0[1u].z;
        }
        _1210 = frontier_phi_49_84_ladder;
        _1212 = frontier_phi_49_84_ladder_1;
        _1214 = frontier_phi_49_84_ladder_2;
    }
    else
    {
        vec4 _1194 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_604, _605, _606), _1122);
        _1210 = _1194.x * cbModelParam._m0[1u].z;
        _1212 = _1194.y * cbModelParam._m0[1u].z;
        _1214 = _1194.z * cbModelParam._m0[1u].z;
    }
    float _1226 = _603 * 0.01200000010430812835693359375;
    float _1228 = _1226 * ((cbModelParam._m0[1u].w * (_1210 - _1115)) + _1115);
    float _1229 = _1226 * ((cbModelParam._m0[1u].w * (_1212 - _1117)) + _1117);
    float _1230 = _1226 * ((cbModelParam._m0[1u].w * (_1214 - _1119)) + _1119);
    float _1251 = fma(_1230, cbSceneParam._m0[89u].z, fma(_1229, cbSceneParam._m0[89u].y, _1228 * cbSceneParam._m0[89u].x));
    float _1254 = fma(_1230, cbSceneParam._m0[90u].z, fma(_1229, cbSceneParam._m0[90u].y, _1228 * cbSceneParam._m0[90u].x));
    float _1257 = fma(_1230, cbSceneParam._m0[91u].z, fma(_1229, cbSceneParam._m0[91u].y, _1228 * cbSceneParam._m0[91u].x));
    vec4 _1265 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_590, _591));
    float _1267 = _1265.w;
    uint _1283 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1287 = floatBitsToUint(cbInstanceData._m0[_1283 + 5u]);
    uint _1289 = _1287.x * 14u;
    uint _1290 = _1289 + 13u;
    float _1295 = _603 + (-1.0);
    float _1298 = (cbLight._m0[_1290].x * _1295) + 1.0;
    float _1299 = (cbLight._m0[_1290].y * _1295) + 1.0;
    uint _1300 = _1289 + 8u;
    float _1311 = cbLight._m0[_1289].x + _569;
    float _1312 = cbLight._m0[_1289].y + _570;
    float _1313 = cbLight._m0[_1289].z + _571;
    float _1317 = inversesqrt(dot(vec3(_1311, _1312, _1313), vec3(_1311, _1312, _1313)));
    float _1321 = dot(vec3(0.0), vec3(cbLight._m0[_1289].xyz));
    float _2669 = isnan(0.0) ? _1321 : (isnan(_1321) ? 0.0 : max(_1321, 0.0));
    float _1324 = isnan(1.0) ? _2669 : (isnan(_2669) ? 1.0 : min(_2669, 1.0));
    float _1325 = dot(vec3(0.0), vec3(_569, _570, _571));
    float _2680 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
    float _1328 = isnan(1.0) ? _2680 : (isnan(_2680) ? 1.0 : min(_2680, 1.0));
    float _1329 = dot(vec3(cbLight._m0[_1289].xyz), vec3(_1311 * _1317, _1312 * _1317, _1313 * _1317));
    float _2691 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
    float _1340 = (exp2(log2(1.0 - (isnan(1.0) ? _2691 : (isnan(_2691) ? 1.0 : min(_2691, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1346 = (0.5 / ((_1324 + 9.9999999392252902907785028219223e-09) + _1328)) * _1324;
    float _2702 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
    float _1348 = (isnan(1.0) ? _2702 : (isnan(_2702) ? 1.0 : min(_2702, 1.0))) * 0.31831014156341552734375;
    float _1350 = isnan(1.0) ? _1298 : (isnan(_1298) ? 1.0 : min(_1298, 1.0));
    uint _1363 = _1289 + 9u;
    uint _1369 = _1289 | 1u;
    float _1375 = cbLight._m0[_1369].x + _569;
    float _1376 = cbLight._m0[_1369].y + _570;
    float _1377 = cbLight._m0[_1369].z + _571;
    float _1381 = inversesqrt(dot(vec3(_1375, _1376, _1377), vec3(_1375, _1376, _1377)));
    float _1385 = dot(vec3(0.0), vec3(cbLight._m0[_1369].xyz));
    float _2718 = isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0));
    float _1388 = isnan(1.0) ? _2718 : (isnan(_2718) ? 1.0 : min(_2718, 1.0));
    float _1389 = dot(vec3(cbLight._m0[_1369].xyz), vec3(_1375 * _1381, _1376 * _1381, _1377 * _1381));
    float _2729 = isnan(0.0) ? _1389 : (isnan(_1389) ? 0.0 : max(_1389, 0.0));
    float _1398 = (exp2(log2(1.0 - (isnan(1.0) ? _2729 : (isnan(_2729) ? 1.0 : min(_2729, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1402 = (0.5 / ((_1388 + 9.9999999392252902907785028219223e-09) + _1328)) * _1388;
    float _2740 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
    float _1404 = (isnan(1.0) ? _2740 : (isnan(_2740) ? 1.0 : min(_2740, 1.0))) * 0.31831014156341552734375;
    float _1405 = isnan(1.0) ? _1299 : (isnan(_1299) ? 1.0 : min(_1299, 1.0));
    float _1415 = (((_1398 * cbLight._m0[_1363].x) * _1404) * _1405) + ((((cbLight._m0[_1300].x * ((1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1267))) * _1340) * _1348) * _1350);
    float _1416 = (((_1398 * cbLight._m0[_1363].y) * _1404) * _1405) + ((((cbLight._m0[_1300].y * ((1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1267))) * _1340) * _1348) * _1350);
    float _1417 = (((_1398 * cbLight._m0[_1363].z) * _1404) * _1405) + ((((cbLight._m0[_1300].z * ((1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1267))) * _1340) * _1348) * _1350);
    float _1534;
    float _1536;
    float _1538;
    if (_1287.y == 0u)
    {
        float _1473 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1474 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1473;
        float _1475 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1473;
        float _1476 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1473;
        uvec4 _1488 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1489 = _1488.x;
        uint _1500 = uint((float(_1488.y) * floor(float(uint(cbSceneParam._m0[85u].y * _591) / _1489))) + floor(float(uint(cbSceneParam._m0[85u].x * _590) / _1489)));
        float _1510 = (log2(_1476 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1511 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        uint _1514 = uint(isnan(14.0) ? _1511 : (isnan(_1511) ? 14.0 : min(_1511, 14.0)));
        uvec4 _1519 = texelFetch(g_lightClusterGridBuffer, int(((_1514 << 2u) + (_1500 << 6u)) >> 2u));
        uint _1520 = _1519.x;
        uint _1521 = _1488.z;
        float _1611;
        float _1613;
        float _1615;
        if (((((1u << ((_1521 >> 4u) & 15u)) + 4294967295u) & _1520) == 0u) || ((_1521 & 240u) == 0u))
        {
            _1611 = 0.0;
            _1613 = 0.0;
            _1615 = 0.0;
        }
        else
        {
            float _1612;
            float _1614;
            float _1616;
            float _1779 = 0.0;
            float _1780 = 0.0;
            float _1781 = 0.0;
            uint _1782 = 0u;
            uint _1791;
            bool _1792;
            for (;;)
            {
                _1791 = texelFetch(g_lightClassification, int((((_1514 << 5u) + (_1500 << 9u)) + (_1782 << 2u)) >> 2u)).x;
                _1792 = _1791 == 0u;
                float frontier_phi_79_pred;
                float frontier_phi_79_pred_1;
                float frontier_phi_79_pred_2;
                if (_1792)
                {
                    frontier_phi_79_pred = _1781;
                    frontier_phi_79_pred_1 = _1780;
                    frontier_phi_79_pred_2 = _1779;
                }
                else
                {
                    float _1966;
                    float _1967;
                    float _1968;
                    uint _1969;
                    _1966 = _1779;
                    _1967 = _1780;
                    _1968 = _1781;
                    _1969 = _1791;
                    float _1873;
                    float _1874;
                    float _1875;
                    for (;;)
                    {
                        uint _1973 = uint(findLSB(_1969)) + (_1782 << 5u);
                        uint _1970 = (_1969 + 4294967295u) & _1969;
                        uint _1975 = _1973 * 48u;
                        vec4 _1989 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1975)).x, texelFetch(g_PointLightRenderingBuffer, int(_1975 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1975 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1975 + 3u)).x));
                        uint _2006 = (_1973 * 48u) + 8u;
                        vec3 _2017 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2006)).x, texelFetch(g_PointLightRenderingBuffer, int(_2006 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2006 + 2u)).x));
                        float _2021 = _1989.x - _1474;
                        float _2022 = _1989.y - _1475;
                        float _2023 = _1989.z - _1476;
                        float _2024 = dot(vec3(_2021, _2022, _2023), vec3(_2021, _2022, _2023));
                        float _2027 = inversesqrt(_2024);
                        float _2036 = 1.0 - (_2024 * _1989.w);
                        float _2766 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
                        float _2038 = sqrt(_2024) * uintBitsToFloat(uvec4(_1996, _1997, _1998, texelFetch(g_PointLightRenderingBuffer, int(((_1973 * 48u) + 4u) + 3u)).x)).w;
                        float _2041 = 1.39999997615814208984375 / (_2038 + 1.39999997615814208984375);
                        float _2042 = _2041 * _2041;
                        float _2045 = ((1.0 - _2042) * dot(vec3(0.0), vec3(_2027 * _2021, _2027 * _2022, _2027 * _2023))) + _2042;
                        float _2047 = (-0.0) - _1474;
                        float _2048 = (-0.0) - _1475;
                        float _2049 = (-0.0) - _1476;
                        float _2053 = inversesqrt(dot(vec3(_2047, _2048, _2049), vec3(_2047, _2048, _2049)));
                        float _2057 = dot(vec3(0.0), vec3(_2053 * _2047, _2053 * _2048, _2053 * _2049));
                        float _2777 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
                        float _2788 = isnan(0.0) ? _2045 : (isnan(_2045) ? 0.0 : max(_2045, 0.0));
                        float _2061 = isnan(1.0) ? _2788 : (isnan(_2788) ? 1.0 : min(_2788, 1.0));
                        float _2065 = (0.5 / (((isnan(1.0) ? _2777 : (isnan(_2777) ? 1.0 : min(_2777, 1.0))) + 9.9999999392252902907785028219223e-09) + _2061)) * _2061;
                        float _2799 = isnan(0.0) ? _2065 : (isnan(_2065) ? 0.0 : max(_2065, 0.0));
                        float _2074 = (((isnan(1.0) ? _2799 : (isnan(_2799) ? 1.0 : min(_2799, 1.0))) * 3.1415927410125732421875) / (((_2038 * _2038) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2766 : (isnan(_2766) ? 1.0 : min(_2766, 1.0)));
                        _1873 = (_2074 * _2017.x) + _1966;
                        _1874 = (_2074 * _2017.y) + _1967;
                        _1875 = (_2074 * _2017.z) + _1968;
                        if (_1970 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _1966 = _1873;
                            _1967 = _1874;
                            _1968 = _1875;
                            _1969 = _1970;
                        }
                    }
                    frontier_phi_79_pred = _1875;
                    frontier_phi_79_pred_1 = _1874;
                    frontier_phi_79_pred_2 = _1873;
                }
                _1616 = frontier_phi_79_pred;
                _1614 = frontier_phi_79_pred_1;
                _1612 = frontier_phi_79_pred_2;
                uint _1783 = _1782 + 1u;
                if (_1783 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1779 = _1612;
                    _1780 = _1614;
                    _1781 = _1616;
                    _1782 = _1783;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1611 = _1612;
            _1613 = _1614;
            _1615 = _1616;
        }
        uvec4 _1619 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1620 = _1619.z;
        uint _1622 = (_1620 >> 8u) & 15u;
        float _1759;
        float _1761;
        float _1763;
        if (((4294967295u << _1622) & _1520) == 0u)
        {
            _1759 = _1611;
            _1761 = _1613;
            _1763 = _1615;
        }
        else
        {
            float _1775 = inversesqrt(dot(vec3(_1474, _1475, _1476), vec3(_1474, _1475, _1476)));
            float frontier_phi_68_69_ladder;
            float frontier_phi_68_69_ladder_1;
            float frontier_phi_68_69_ladder_2;
            if (_1622 < ((_1620 >> 12u) & 15u))
            {
                float _1760;
                float _1762;
                float _1764;
                float _1952 = _1611;
                float _1953 = _1613;
                float _1954 = _1615;
                uint _1955 = _1622;
                uint _1964;
                bool _1965;
                for (;;)
                {
                    _1964 = texelFetch(g_lightClassification, int((((_1514 << 5u) + (_1500 << 9u)) + (_1955 << 2u)) >> 2u)).x;
                    _1965 = _1964 == 0u;
                    float frontier_phi_93_pred;
                    float frontier_phi_93_pred_1;
                    float frontier_phi_93_pred_2;
                    if (_1965)
                    {
                        frontier_phi_93_pred = _1954;
                        frontier_phi_93_pred_1 = _1953;
                        frontier_phi_93_pred_2 = _1952;
                    }
                    else
                    {
                        float _2109;
                        float _2110;
                        float _2111;
                        float _2330;
                        float _2331;
                        float _2332;
                        float _2119 = _1952;
                        float _2120 = _1953;
                        float _2121 = _1954;
                        uint _2122 = _1964;
                        uint _2123;
                        uint _2133;
                        vec4 _2148;
                        float _2149;
                        vec3 _2161;
                        vec4 _2176;
                        vec4 _2191;
                        float _2237;
                        bool _2238;
                        for (;;)
                        {
                            _2133 = ((_1955 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2122));
                            _2123 = (_2122 + 4294967295u) & _2122;
                            uint _2135 = _2133 * 40u;
                            _2148 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2135)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2135 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2135 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2135 + 3u)).x));
                            _2149 = _2148.w;
                            uint _2151 = (_2133 * 40u) + 8u;
                            _2161 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2151)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2151 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2151 + 2u)).x));
                            uint _2163 = (_2133 * 40u) + 16u;
                            _2176 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2163)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2163 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2163 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2163 + 3u)).x));
                            uint _2178 = (_2133 * 40u) + 20u;
                            _2191 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2178)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2178 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2178 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2178 + 3u)).x));
                            uint _2193 = (_2133 * 40u) + 24u;
                            vec4 _2206 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2193)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2193 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2193 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2193 + 3u)).x));
                            uint _2212 = (_2133 * 40u) + 28u;
                            vec4 _2225 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2212)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2212 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2212 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2212 + 3u)).x));
                            _2237 = fma(_1476, _2225.z, fma(_1475, _2225.y, _2225.x * _1474)) + _2225.w;
                            _2238 = !((fma(_1476, _2206.z, fma(_1475, _2206.y, _2206.x * _1474)) + _2206.w) <= 0.0);
                            float frontier_phi_99_pred;
                            float frontier_phi_99_pred_1;
                            float frontier_phi_99_pred_2;
                            if (_2238)
                            {
                                float _2272 = _2148.x - _1474;
                                float _2273 = _2148.y - _1475;
                                float _2274 = _2148.z - _1476;
                                float _2275 = dot(vec3(_2272, _2273, _2274), vec3(_2272, _2273, _2274));
                                float _2278 = inversesqrt(_2275);
                                float _2285 = 1.0 - (_2275 / (_2149 * _2149));
                                float _2810 = isnan(0.0) ? _2285 : (isnan(_2285) ? 0.0 : max(_2285, 0.0));
                                float _2287 = sqrt(_2275) * uintBitsToFloat(uvec4(_2241, _2242, _2243, texelFetch(g_SpotLightRenderingBuffer, int(((_2133 * 40u) + 4u) + 3u)).x)).w;
                                float _2289 = 1.39999997615814208984375 / (_2287 + 1.39999997615814208984375);
                                float _2290 = _2289 * _2289;
                                float _2293 = (fma(_1476, _2176.z, fma(_1475, _2176.y, _2176.x * _1474)) + _2176.w) / _2237;
                                float _2294 = (fma(_1476, _2191.z, fma(_1475, _2191.y, _2191.x * _1474)) + _2191.w) / _2237;
                                float _2298 = 1.0 - dot(vec2(_2293, _2294), vec2(_2293, _2294));
                                float _2821 = isnan(0.0) ? _2298 : (isnan(_2298) ? 0.0 : max(_2298, 0.0));
                                float _2306 = dot(vec3(0.0), vec3((-0.0) - (_1474 * _1775), (-0.0) - (_1475 * _1775), (-0.0) - (_1476 * _1775)));
                                float _2832 = isnan(0.0) ? _2306 : (isnan(_2306) ? 0.0 : max(_2306, 0.0));
                                float _2314 = ((1.0 - _2290) * dot(vec3(0.0), vec3(_2278 * _2272, _2278 * _2273, _2278 * _2274))) + _2290;
                                float _2843 = isnan(0.0) ? _2314 : (isnan(_2314) ? 0.0 : max(_2314, 0.0));
                                float _2315 = isnan(1.0) ? _2843 : (isnan(_2843) ? 1.0 : min(_2843, 1.0));
                                float _2319 = (0.5 / (((isnan(1.0) ? _2832 : (isnan(_2832) ? 1.0 : min(_2832, 1.0))) + 9.9999999392252902907785028219223e-09) + _2315)) * _2315;
                                float _2854 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
                                float _2326 = ((isnan(1.0) ? _2821 : (isnan(_2821) ? 1.0 : min(_2821, 1.0))) * (isnan(1.0) ? _2810 : (isnan(_2810) ? 1.0 : min(_2810, 1.0)))) * (((isnan(1.0) ? _2854 : (isnan(_2854) ? 1.0 : min(_2854, 1.0))) * 3.1415927410125732421875) / (((_2287 * _2287) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_99_pred = _2326 * _2161.z;
                                frontier_phi_99_pred_1 = _2326 * _2161.y;
                                frontier_phi_99_pred_2 = _2326 * _2161.x;
                            }
                            else
                            {
                                frontier_phi_99_pred = 0.0;
                                frontier_phi_99_pred_1 = 0.0;
                                frontier_phi_99_pred_2 = 0.0;
                            }
                            _2332 = frontier_phi_99_pred;
                            _2331 = frontier_phi_99_pred_1;
                            _2330 = frontier_phi_99_pred_2;
                            _2109 = _2330 + _2119;
                            _2110 = _2331 + _2120;
                            _2111 = _2332 + _2121;
                            if (_2123 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2119 = _2109;
                                _2120 = _2110;
                                _2121 = _2111;
                                _2122 = _2123;
                                continue;
                            }
                        }
                        frontier_phi_93_pred = _2111;
                        frontier_phi_93_pred_1 = _2110;
                        frontier_phi_93_pred_2 = _2109;
                    }
                    _1764 = frontier_phi_93_pred;
                    _1762 = frontier_phi_93_pred_1;
                    _1760 = frontier_phi_93_pred_2;
                    uint _1956 = _1955 + 1u;
                    if (_1956 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _1952 = _1760;
                        _1953 = _1762;
                        _1954 = _1764;
                        _1955 = _1956;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_68_69_ladder = _1764;
                frontier_phi_68_69_ladder_1 = _1762;
                frontier_phi_68_69_ladder_2 = _1760;
            }
            else
            {
                frontier_phi_68_69_ladder = _1615;
                frontier_phi_68_69_ladder_1 = _1613;
                frontier_phi_68_69_ladder_2 = _1611;
            }
            _1759 = frontier_phi_68_69_ladder_2;
            _1761 = frontier_phi_68_69_ladder_1;
            _1763 = frontier_phi_68_69_ladder;
        }
        float _1768 = isnan(1.0) ? _603 : (isnan(_603) ? 1.0 : min(_603, 1.0));
        _1534 = ((_1759 * 0.039999999105930328369140625) * _1768) + _1415;
        _1536 = ((_1761 * 0.039999999105930328369140625) * _1768) + _1416;
        _1538 = ((_1763 * 0.039999999105930328369140625) * _1768) + _1417;
    }
    else
    {
        _1534 = _1415;
        _1536 = _1416;
        _1538 = _1417;
    }
    uint _1544 = _1283 + 9u;
    uint _1545 = _1544 + uint(cbMatDynParam._m0[0u].w);
    float _1560 = (cbInstanceData._m0[_1545].x * ((_539 * ((_489.x * cbMtdParam._m0[10u].x) - _418)) + _418)) + ((_1534 + ((isnan(0.0) ? _1251 : (isnan(_1251) ? 0.0 : max(_1251, 0.0))) * _1025)) * cbPerFrame._m0[3u].x);
    float _1561 = (cbInstanceData._m0[_1545].y * ((_539 * ((_489.y * cbMtdParam._m0[10u].y) - _419)) + _419)) + ((_1536 + ((isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0))) * _1025)) * cbPerFrame._m0[3u].x);
    float _1562 = (cbInstanceData._m0[_1545].z * ((_539 * ((_489.z * cbMtdParam._m0[10u].z) - _420)) + _420)) + ((_1538 + ((isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0))) * _1025)) * cbPerFrame._m0[3u].x);
    float _1563 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
    float _1564 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
    float _1565 = isnan(0.0) ? _1562 : (isnan(_1562) ? 0.0 : max(_1562, 0.0));
    uint _1566 = _1283 + 6u;
    float _1574 = _590 / cbSceneParam._m0[86u].x;
    float _1575 = _591 / cbSceneParam._m0[86u].y;
    vec4 _1589 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1574, _1575, (log2((isnan(cbSceneParam._m0[77u].w) ? _564 : (isnan(_564) ? cbSceneParam._m0[77u].w : min(_564, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1591 = _1589.x;
    float _1592 = _1589.y;
    float _1593 = _1589.z;
    float _1594 = _1589.w;
    float _1668;
    float _1670;
    float _1672;
    float _1674;
    if (_564 > cbSceneParam._m0[78u].w)
    {
        float _1630 = isnan(_564) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _564 : min(cbSceneParam._m0[80u].w, _564));
        float _1631 = _1630 / _564;
        float _1642 = _1631 * _265;
        float _1643 = _266 * _1631;
        float _1644 = (-0.0) - _1643;
        float _1645 = _1631 * _267;
        float _1647 = (cbSceneParam._m0[77u].w * _1644) / _1630;
        float _1648 = _1647 + cbSceneParam._m0[79u].w;
        float _1649 = cbSceneParam._m0[79u].w - _1643;
        float _1655 = sqrt(((_1642 * _1642) + (_1643 * _1643)) + (_1645 * _1645));
        float _1658 = (1.0 - (cbSceneParam._m0[77u].w / _1630)) * _1655;
        float _1664 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1666 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1883;
        if (abs((_1644 - _1647) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1883 = ((((_1648 > 0.0) ? exp2(_1664 * _1648) : (2.0 - exp2(_1666 * _1648))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1658;
        }
        else
        {
            float _1805 = 1.0 / cbSceneParam._m0[80u].x;
            float _1806 = isnan(_1649) ? _1648 : (isnan(_1648) ? _1649 : max(_1648, _1649));
            float _1807 = isnan(_1649) ? _1648 : (isnan(_1648) ? _1649 : min(_1648, _1649));
            float _1816 = isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : min(_1806, 0.0));
            float _1817 = isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : min(_1807, 0.0));
            _1883 = ((abs(_1655 / _1644) * cbSceneParam._m0[80u].y) * ((((_1816 - _1817) * 2.0) - ((exp2(_1664 * (isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0)))) - exp2(_1664 * (isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0))))) * _1805)) - ((exp2(_1666 * _1816) - exp2(_1666 * _1817)) * _1805))) + (_1658 * cbSceneParam._m0[80u].z);
        }
        vec4 _1885 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1574, _1575, 1.0), 0.0);
        float _1894 = exp2((_1883 * (-1.44269502162933349609375)) * (1.0 - _1885.w));
        float _1895 = log2(_1894);
        float _1911 = log2(_1594);
        _1668 = (exp2(_1911 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1895 * cbSceneParam._m0[78u].x)) * _1885.x) / cbSceneParam._m0[78u].x)) + _1591;
        _1670 = (exp2(_1911 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1895 * cbSceneParam._m0[78u].y)) * _1885.y) / cbSceneParam._m0[78u].y)) + _1592;
        _1672 = (exp2(_1911 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1895 * cbSceneParam._m0[78u].z)) * _1885.z) / cbSceneParam._m0[78u].z)) + _1593;
        _1674 = _1894 * _1594;
    }
    else
    {
        _1668 = _1591;
        _1670 = _1592;
        _1672 = _1593;
        _1674 = _1594;
    }
    bool _1921;
    vec4 _1684;
    vec4 _1707;
    float _1709;
    float _1713;
    float _1714;
    float _1715;
    float _1716;
    bool _1727;
    for (;;)
    {
        _1684 = cbMatDynParam._m0[0u];
        float _1686 = roundEven(_1684.y);
        bool _1687 = _1686 == 3.0;
        float _1689 = log2(_1674);
        float _1696 = exp2(_1689 * cbSceneParam._m0[78u].x) * _1563;
        float _1697 = exp2(_1689 * cbSceneParam._m0[78u].y) * _1564;
        float _1698 = exp2(_1689 * cbSceneParam._m0[78u].z) * _1565;
        float _1705 = _578 + (-0.5);
        _1707 = cbMtdParam._m0[1u];
        _1709 = _1707.y * _1705;
        float _1712 = (_1686 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _1713 = _1712 * (_1687 ? _1696 : (_1696 + (cbSceneParam._m0[72u].w * _1668)));
        _1714 = _1712 * (_1687 ? _1697 : (_1697 + (cbSceneParam._m0[72u].w * _1670)));
        _1715 = _1712 * (_1687 ? _1698 : (_1698 + (cbSceneParam._m0[72u].w * _1672)));
        _1716 = _1705 * 0.999000012874603271484375;
        _1727 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_1727)
        {
            if ((cbInstanceData._m0[_1283 + 7u].x + _1716) < 0.5)
            {
                _1921 = true;
                break;
            }
        }
        uint _1840 = _1544 + uint(_1684.w);
        if ((cbInstanceData._m0[_1840].w < 1.0) && ((cbInstanceData._m0[_1840].w + _1716) < 0.5))
        {
            _1921 = true;
            break;
        }
        if ((_1709 + 1.0) < _1707.x)
        {
            _1921 = true;
            break;
        }
        _1921 = false;
        break;
    }
    float _2079;
    if (_1921)
    {
        discard_state = true;
        _2079 = 0.0;
    }
    else
    {
        _2079 = cbInstanceData._m0[_1566].w;
    }
    SV_Target.x = _1713;
    SV_Target.y = _1714;
    SV_Target.z = _1715;
    SV_Target.w = _2079;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1566].w;
    discard_exit();
}


