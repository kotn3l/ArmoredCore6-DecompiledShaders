#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 10) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_8;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1092;
float _3096;
float _3097;
float _3098;
float _3099;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _259 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _269 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _259);
    float _270 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _259);
    float _271 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _259);
    vec4 _290 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _325 = cbMtdParam._m0[24u].x + _269;
    float _326 = cbMtdParam._m0[24u].y + _270;
    float _327 = cbMtdParam._m0[24u].z + _271;
    float _341 = (-0.0) - dot(vec3(_325, _326, _327), vec3(_197 * _190, _197 * _191, _197 * _192));
    float _342 = (-0.0) - dot(vec3(_325, _326, _327), vec3(_211 * TANGENT.x, _211 * TANGENT.y, _211 * TANGENT.z));
    float _343 = (-0.0) - dot(vec3(_325, _326, _327), vec3((-0.0) - (_204 * NORMAL.x), (-0.0) - (_204 * NORMAL.y), (-0.0) - (_204 * NORMAL.z)));
    float _347 = inversesqrt(dot(vec3(_341, _342, _343), vec3(_341, _342, _343)));
    float _350 = _347 * _343;
    float _351 = (_347 * _341) + (((_290.x * 2.0) + (-1.0)) * cbMtdParam._m0[22u].x);
    float _352 = (_347 * _342) + (((_290.y * 2.0) + (-1.0)) * cbMtdParam._m0[22u].y);
    float _353 = _351 * cbMtdParam._m0[20u].w;
    float _354 = _352 * cbMtdParam._m0[20u].z;
    float _355 = fract(TEXCOORD.x);
    float _356 = fract(TEXCOORD.y);
    float _362;
    if (_353 > 0.0)
    {
        _362 = (1.0 - _355) / _353;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_353 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _355) / _353;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _362 = frontier_phi_3_2_ladder;
    }
    float _370;
    if (_354 > 0.0)
    {
        _370 = (1.0 - _356) / _354;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_354 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _356) / _354;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _370 = frontier_phi_7_6_ladder;
    }
    bool _372 = _350 > 0.0;
    float _374 = _372 ? (cbMtdParam._m0[16u].x / _350) : 5000.0;
    float _375 = isnan(_370) ? _362 : (isnan(_362) ? _370 : min(_362, _370));
    float _376 = isnan(_374) ? _375 : (isnan(_375) ? _374 : min(_375, _374));
    float _380 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _381 = _355 + (-0.5);
    float _384 = _356 + (-0.5);
    float _387 = ((_376 * _350) + _380) / _380;
    vec4 _412 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (((((_381 + (_376 * _353)) / _387) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (((((_384 + (_376 * _354)) / _387) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    float _422 = cbMtdParam._m0[9u].x * _412.x;
    float _423 = cbMtdParam._m0[9u].y * _412.y;
    float _424 = cbMtdParam._m0[9u].z * _412.z;
    float _443 = _351 * cbMtdParam._m0[22u].w;
    float _444 = _352 * cbMtdParam._m0[22u].z;
    bool _445 = _443 > 0.0;
    float _450;
    if (_445)
    {
        _450 = (1.0 - _355) / _443;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_443 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _355) / _443;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _450 = frontier_phi_11_10_ladder;
    }
    bool _452 = _444 > 0.0;
    float _457;
    if (_452)
    {
        _457 = (1.0 - _356) / _444;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_444 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _356) / _444;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _457 = frontier_phi_15_14_ladder;
    }
    float _460 = _372 ? (cbMtdParam._m0[18u].x / _350) : 5000.0;
    float _461 = isnan(_457) ? _450 : (isnan(_450) ? _457 : min(_450, _457));
    float _462 = isnan(_460) ? _461 : (isnan(_461) ? _460 : min(_461, _460));
    float _466 = cbMtdParam._m0[19u].y * cbMtdParam._m0[18u].x;
    float _470 = ((_462 * _350) + _466) / _466;
    float _475 = cbMtdParam._m0[19u].x - cbMtdParam._m0[20u].x * trunc(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    float _477 = floor(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    vec4 _493 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_381 + (_462 * _443)) / _470) + 0.5) + _475) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_384 + (_462 * _444)) / _470) + 0.5) + _477) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[0u].w));
    float _505;
    if (_445)
    {
        _505 = (1.0 - _355) / _443;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_443 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _355) / _443;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _505 = frontier_phi_19_18_ladder;
    }
    float _511;
    if (_452)
    {
        _511 = (1.0 - _356) / _444;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_444 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _356) / _444;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _511 = frontier_phi_23_22_ladder;
    }
    float _513 = isnan(_511) ? _505 : (isnan(_505) ? _511 : min(_505, _511));
    float _514 = isnan(_460) ? _513 : (isnan(_513) ? _460 : min(_513, _460));
    float _521 = ((_514 * _350) + _466) / _466;
    vec4 _541 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_381 + (_514 * _443)) / _521) + 0.5) + _475) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_384 + (_514 * _444)) / _521) + 0.5) + _477) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[8u].w));
    float _543 = _541.x;
    float _550 = (_543 * ((_493.x * cbMtdParam._m0[10u].x) - _422)) + _422;
    float _551 = (_543 * ((_493.y * cbMtdParam._m0[10u].y) - _423)) + _423;
    float _552 = (_543 * ((_493.z * cbMtdParam._m0[10u].z) - _424)) + _424;
    float _568 = _351 * cbMtdParam._m0[23u].y;
    float _569 = _352 * cbMtdParam._m0[23u].x;
    bool _570 = _568 > 0.0;
    float _575;
    if (_570)
    {
        _575 = (1.0 - _355) / _568;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_568 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _355) / _568;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _575 = frontier_phi_27_26_ladder;
    }
    bool _577 = _569 > 0.0;
    float _582;
    if (_577)
    {
        _582 = (1.0 - _356) / _569;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_569 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _356) / _569;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _582 = frontier_phi_31_30_ladder;
    }
    float _585 = _372 ? (cbMtdParam._m0[19u].w / _350) : 5000.0;
    float _586 = isnan(_582) ? _575 : (isnan(_575) ? _582 : min(_575, _582));
    float _587 = isnan(_585) ? _586 : (isnan(_586) ? _585 : min(_586, _585));
    float _591 = cbMtdParam._m0[19u].w * cbMtdParam._m0[16u].z;
    float _595 = ((_587 * _350) + _591) / _591;
    float _600 = cbMtdParam._m0[19u].z - cbMtdParam._m0[23u].z * trunc(cbMtdParam._m0[19u].z / cbMtdParam._m0[23u].z);
    float _602 = floor(cbMtdParam._m0[19u].z / cbMtdParam._m0[23u].z);
    vec4 _618 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * (((((_381 + (_587 * _568)) / _595) + 0.5) + _600) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * (((((_384 + (_587 * _569)) / _595) + 0.5) + _602) / cbMtdParam._m0[23u].w)) + cbTextureTilingScale._m0[9u].w));
    float _630;
    if (_570)
    {
        _630 = (1.0 - _355) / _568;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_568 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _355) / _568;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _630 = frontier_phi_35_34_ladder;
    }
    float _636;
    if (_577)
    {
        _636 = (1.0 - _356) / _569;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_569 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _356) / _569;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _636 = frontier_phi_39_38_ladder;
    }
    float _638 = isnan(_636) ? _630 : (isnan(_630) ? _636 : min(_630, _636));
    float _639 = isnan(_585) ? _638 : (isnan(_638) ? _585 : min(_638, _585));
    float _646 = ((_639 * _350) + _591) / _591;
    vec4 _666 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_381 + (_639 * _568)) / _646) + 0.5) + _600) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_384 + (_639 * _569)) / _646) + 0.5) + _602) / cbMtdParam._m0[23u].w)) + cbTextureTilingScale._m0[10u].w));
    float _668 = _666.x;
    float _675 = (_668 * ((_618.x * cbMtdParam._m0[14u].x) - _550)) + _550;
    float _676 = (_668 * ((_618.y * cbMtdParam._m0[14u].y) - _551)) + _551;
    float _677 = (_668 * ((_618.z * cbMtdParam._m0[14u].z) - _552)) + _552;
    float _3158 = isnan(0.0) ? _675 : (isnan(_675) ? 0.0 : max(_675, 0.0));
    float _3169 = isnan(0.0) ? _676 : (isnan(_676) ? 0.0 : max(_676, 0.0));
    float _3180 = isnan(0.0) ? _677 : (isnan(_677) ? 0.0 : max(_677, 0.0));
    float _696 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _700 = inversesqrt(dot(vec3(_269, _270, _271), vec3(_269, _270, _271)));
    float _701 = _269 * _700;
    float _702 = _270 * _700;
    float _703 = _271 * _700;
    vec4 _708 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _710 = _708.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _806 = sqrt(((_269 * _269) + (_270 * _270)) + (_271 * _271));
        float _812 = (cbMatDynParam._m0[5u].x * _806) + cbMatDynParam._m0[5u].y;
        float _3191 = isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0));
        float _813 = isnan(1.0) ? _3191 : (isnan(_3191) ? 1.0 : min(_3191, 1.0));
        float _817 = (cbMatDynParam._m0[5u].z * _806) + cbMatDynParam._m0[5u].w;
        float _3202 = isnan(0.0) ? _817 : (isnan(_817) ? 0.0 : max(_817, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3202 : (isnan(_3202) ? 1.0 : min(_3202, 1.0))) - _813)) + _813) < ((_710 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _722 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _723 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _736 = uint(roundEven(NORMAL.w)) * 13u;
    uint _738 = _736 + 9u;
    uint _739 = _738 + uint(cbMatDynParam._m0[0u].w);
    float _745 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3158 : (isnan(_3158) ? 1.0 : min(_3158, 1.0)))) * cbInstanceData._m0[_739].x;
    float _746 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3169 : (isnan(_3169) ? 1.0 : min(_3169, 1.0)))) * cbInstanceData._m0[_739].y;
    float _747 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3180 : (isnan(_3180) ? 1.0 : min(_3180, 1.0)))) * cbInstanceData._m0[_739].z;
    float _3213 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _748 = isnan(1.0) ? _3213 : (isnan(_3213) ? 1.0 : min(_3213, 1.0));
    float _3224 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _749 = isnan(1.0) ? _3224 : (isnan(_3224) ? 1.0 : min(_3224, 1.0));
    float _3235 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _750 = isnan(1.0) ? _3235 : (isnan(_3235) ? 1.0 : min(_3235, 1.0));
    vec4 _759 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _722, cbSceneParam._m0[86u].y * _723));
    float _762 = _759.x * TEXCOORD_4.z;
    float _763 = (-0.0) - _701;
    float _764 = (-0.0) - _702;
    float _765 = (-0.0) - _703;
    float _787 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _791 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _795 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1091;
    float _1093;
    float _1094;
    float _1095;
    float _1096;
    float _1097;
    float _1098;
    float _1099;
    float _1100;
    float _1101;
    float _1102;
    float _1103;
    float _1104;
    float _1105;
    float _1106;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _879 = (cbModelParam._m0[37u].x * ((((fma(_795, cbModelParam._m0[26u].z, fma(_791, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _787)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _881 = (cbModelParam._m0[37u].y * ((((fma(_795, cbModelParam._m0[27u].z, fma(_791, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _787)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _882 = (((((fma(_795, cbModelParam._m0[28u].z, fma(_791, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _787)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _885 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_879, _881, _882), 0.0);
        vec4 _892 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_879, _881, _882), 0.0);
        vec4 _899 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_879, _881, _882), 0.0);
        vec4 _906 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_879, _881, _882), 0.0);
        float _919 = exp2((_885.w + (-0.5)) * 20.0) * 2.0;
        float _920 = _919 * (_885.x + (-0.5));
        float _921 = _919 * (_885.y + (-0.5));
        float _922 = _919 * (_885.z + (-0.5));
        float _929 = exp2((_892.w + (-0.5)) * 20.0) * 2.0;
        float _930 = _929 * (_892.x + (-0.5));
        float _931 = _929 * (_892.y + (-0.5));
        float _932 = _929 * (_892.z + (-0.5));
        float _939 = exp2((_899.w + (-0.5)) * 20.0) * 2.0;
        float _940 = _939 * (_899.x + (-0.5));
        float _941 = _939 * (_899.y + (-0.5));
        float _942 = _939 * (_899.z + (-0.5));
        float _949 = exp2((_906.w + (-0.5)) * 20.0) * 2.0;
        float _950 = _949 * (_906.x + (-0.5));
        float _951 = _949 * (_906.y + (-0.5));
        float _952 = _949 * (_906.z + (-0.5));
        float _953 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
        float _954 = isnan(0.0) ? _951 : (isnan(_951) ? 0.0 : max(_951, 0.0));
        float _955 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _956 = _920 * 0.5;
        float _957 = _930 * 0.5;
        float _958 = _940 * 0.5;
        float _959 = dot(vec3(_956, _957, _958), vec3(_956, _957, _958));
        float _964 = (_959 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_959);
        float _973 = (dot(vec3(0.0), vec3(_964 * _956, _964 * _957, _964 * _958)) + 1.0) * 0.5;
        float _3261 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _983 = sqrt(((_957 * _957) + (_956 * _956)) + (_958 * _958)) / (_953 + 9.9999997473787516355514526367188e-06);
        float _3272 = isnan(0.0) ? _983 : (isnan(_983) ? 0.0 : max(_983, 0.0));
        float _984 = isnan(1.0) ? _3272 : (isnan(_3272) ? 1.0 : min(_3272, 1.0));
        float _985 = _984 * 2.0;
        float _989 = (1.0 - _984) / (_984 + 1.0);
        float _3283 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
        float _990 = isnan(1.0) ? _3283 : (isnan(_3283) ? 1.0 : min(_3283, 1.0));
        float _999 = ((((1.0 - _990) * (_985 + 2.0)) * exp2(log2(isnan(1.0) ? _3261 : (isnan(_3261) ? 1.0 : min(_3261, 1.0))) * (_985 + 1.0))) + _990) * _953;
        float _1000 = _921 * 0.5;
        float _1001 = _931 * 0.5;
        float _1002 = _941 * 0.5;
        float _1003 = dot(vec3(_1000, _1001, _1002), vec3(_1000, _1001, _1002));
        float _1008 = (_1003 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1003);
        float _1016 = (dot(vec3(0.0), vec3(_1008 * _1000, _1008 * _1001, _1008 * _1002)) + 1.0) * 0.5;
        float _3294 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1025 = sqrt(((_1001 * _1001) + (_1000 * _1000)) + (_1002 * _1002)) / (_954 + 9.9999997473787516355514526367188e-06);
        float _3305 = isnan(0.0) ? _1025 : (isnan(_1025) ? 0.0 : max(_1025, 0.0));
        float _1026 = isnan(1.0) ? _3305 : (isnan(_3305) ? 1.0 : min(_3305, 1.0));
        float _1027 = _1026 * 2.0;
        float _1031 = (1.0 - _1026) / (_1026 + 1.0);
        float _3316 = isnan(0.0) ? _1031 : (isnan(_1031) ? 0.0 : max(_1031, 0.0));
        float _1032 = isnan(1.0) ? _3316 : (isnan(_3316) ? 1.0 : min(_3316, 1.0));
        float _1041 = ((((1.0 - _1032) * (_1027 + 2.0)) * exp2(log2(isnan(1.0) ? _3294 : (isnan(_3294) ? 1.0 : min(_3294, 1.0))) * (_1027 + 1.0))) + _1032) * _954;
        float _1042 = _922 * 0.5;
        float _1043 = _932 * 0.5;
        float _1044 = _942 * 0.5;
        float _1045 = dot(vec3(_1042, _1043, _1044), vec3(_1042, _1043, _1044));
        float _1050 = (_1045 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1045);
        float _1058 = (dot(vec3(0.0), vec3(_1050 * _1042, _1050 * _1043, _1050 * _1044)) + 1.0) * 0.5;
        float _3327 = isnan(0.0) ? _1058 : (isnan(_1058) ? 0.0 : max(_1058, 0.0));
        float _1067 = sqrt(((_1043 * _1043) + (_1042 * _1042)) + (_1044 * _1044)) / (_955 + 9.9999997473787516355514526367188e-06);
        float _3338 = isnan(0.0) ? _1067 : (isnan(_1067) ? 0.0 : max(_1067, 0.0));
        float _1068 = isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0));
        float _1069 = _1068 * 2.0;
        float _1073 = (1.0 - _1068) / (_1068 + 1.0);
        float _3349 = isnan(0.0) ? _1073 : (isnan(_1073) ? 0.0 : max(_1073, 0.0));
        float _1074 = isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0));
        float _1083 = ((((1.0 - _1074) * (_1069 + 2.0)) * exp2(log2(isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0))) * (_1069 + 1.0))) + _1074) * _955;
        _1091 = _922;
        _1093 = _921;
        _1094 = _920;
        _1095 = _932;
        _1096 = _931;
        _1097 = _930;
        _1098 = _942;
        _1099 = _941;
        _1100 = _940;
        _1101 = _955;
        _1102 = _954;
        _1103 = _953;
        _1104 = cbModelParam._m0[36u].z * (isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0)));
        _1105 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0)));
        _1106 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0)));
    }
    else
    {
        _1091 = _1092;
        _1093 = _1092;
        _1094 = _1092;
        _1095 = _1092;
        _1096 = _1092;
        _1097 = _1092;
        _1098 = _1092;
        _1099 = _1092;
        _1100 = _1092;
        _1101 = _1092;
        _1102 = _1092;
        _1103 = _1092;
        _1104 = 0.0;
        _1105 = 0.0;
        _1106 = 0.0;
    }
    float _1370;
    float _1371;
    float _1372;
    float _1373;
    float _1374;
    float _1375;
    float _1376;
    float _1377;
    float _1378;
    float _1379;
    float _1380;
    float _1381;
    float _1382;
    float _1383;
    float _1384;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1163 = (cbModelParam._m0[38u].x * ((((fma(_795, cbModelParam._m0[30u].z, fma(_791, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _787)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1164 = (cbModelParam._m0[38u].y * ((((fma(_795, cbModelParam._m0[31u].z, fma(_791, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _787)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1165 = (((((fma(_795, cbModelParam._m0[32u].z, fma(_791, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _787)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1167 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1174 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1181 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        vec4 _1188 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1163, _1164, _1165), 0.0);
        float _1200 = exp2((_1167.w + (-0.5)) * 20.0) * 2.0;
        float _1201 = _1200 * (_1167.x + (-0.5));
        float _1202 = _1200 * (_1167.y + (-0.5));
        float _1203 = _1200 * (_1167.z + (-0.5));
        float _1210 = exp2((_1174.w + (-0.5)) * 20.0) * 2.0;
        float _1211 = _1210 * (_1174.x + (-0.5));
        float _1212 = _1210 * (_1174.y + (-0.5));
        float _1213 = _1210 * (_1174.z + (-0.5));
        float _1220 = exp2((_1181.w + (-0.5)) * 20.0) * 2.0;
        float _1221 = _1220 * (_1181.x + (-0.5));
        float _1222 = _1220 * (_1181.y + (-0.5));
        float _1223 = _1220 * (_1181.z + (-0.5));
        float _1230 = exp2((_1188.w + (-0.5)) * 20.0) * 2.0;
        float _1231 = _1230 * (_1188.x + (-0.5));
        float _1232 = _1230 * (_1188.y + (-0.5));
        float _1233 = _1230 * (_1188.z + (-0.5));
        float _1234 = isnan(0.0) ? _1231 : (isnan(_1231) ? 0.0 : max(_1231, 0.0));
        float _1235 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1236 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1237 = _1201 * 0.5;
        float _1238 = _1211 * 0.5;
        float _1239 = _1221 * 0.5;
        float _1240 = dot(vec3(_1237, _1238, _1239), vec3(_1237, _1238, _1239));
        float _1245 = (_1240 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1240);
        float _1253 = (dot(vec3(0.0), vec3(_1245 * _1237, _1245 * _1238, _1245 * _1239)) + 1.0) * 0.5;
        float _3390 = isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0));
        float _1262 = sqrt(((_1238 * _1238) + (_1237 * _1237)) + (_1239 * _1239)) / (_1234 + 9.9999997473787516355514526367188e-06);
        float _3401 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1263 = isnan(1.0) ? _3401 : (isnan(_3401) ? 1.0 : min(_3401, 1.0));
        float _1264 = _1263 * 2.0;
        float _1268 = (1.0 - _1263) / (_1263 + 1.0);
        float _3412 = isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0));
        float _1269 = isnan(1.0) ? _3412 : (isnan(_3412) ? 1.0 : min(_3412, 1.0));
        float _1278 = ((((1.0 - _1269) * (_1264 + 2.0)) * exp2(log2(isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0))) * (_1264 + 1.0))) + _1269) * _1234;
        float _1279 = _1202 * 0.5;
        float _1280 = _1212 * 0.5;
        float _1281 = _1222 * 0.5;
        float _1282 = dot(vec3(_1279, _1280, _1281), vec3(_1279, _1280, _1281));
        float _1287 = (_1282 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1282);
        float _1295 = (dot(vec3(0.0), vec3(_1287 * _1279, _1287 * _1280, _1287 * _1281)) + 1.0) * 0.5;
        float _3423 = isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0));
        float _1304 = sqrt(((_1280 * _1280) + (_1279 * _1279)) + (_1281 * _1281)) / (_1235 + 9.9999997473787516355514526367188e-06);
        float _3434 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
        float _1305 = isnan(1.0) ? _3434 : (isnan(_3434) ? 1.0 : min(_3434, 1.0));
        float _1306 = _1305 * 2.0;
        float _1310 = (1.0 - _1305) / (_1305 + 1.0);
        float _3445 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1311 = isnan(1.0) ? _3445 : (isnan(_3445) ? 1.0 : min(_3445, 1.0));
        float _1320 = ((((1.0 - _1311) * (_1306 + 2.0)) * exp2(log2(isnan(1.0) ? _3423 : (isnan(_3423) ? 1.0 : min(_3423, 1.0))) * (_1306 + 1.0))) + _1311) * _1235;
        float _1321 = _1203 * 0.5;
        float _1322 = _1213 * 0.5;
        float _1323 = _1223 * 0.5;
        float _1324 = dot(vec3(_1321, _1322, _1323), vec3(_1321, _1322, _1323));
        float _1329 = (_1324 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1324);
        float _1337 = (dot(vec3(0.0), vec3(_1329 * _1321, _1329 * _1322, _1329 * _1323)) + 1.0) * 0.5;
        float _3456 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
        float _1346 = sqrt(((_1322 * _1322) + (_1321 * _1321)) + (_1323 * _1323)) / (_1236 + 9.9999997473787516355514526367188e-06);
        float _3467 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0));
        float _1348 = _1347 * 2.0;
        float _1352 = (1.0 - _1347) / (_1347 + 1.0);
        float _3478 = isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0));
        float _1353 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
        float _1362 = ((((1.0 - _1353) * (_1348 + 2.0)) * exp2(log2(isnan(1.0) ? _3456 : (isnan(_3456) ? 1.0 : min(_3456, 1.0))) * (_1348 + 1.0))) + _1353) * _1236;
        _1370 = _1203;
        _1371 = _1202;
        _1372 = _1201;
        _1373 = _1213;
        _1374 = _1212;
        _1375 = _1211;
        _1376 = _1223;
        _1377 = _1222;
        _1378 = _1221;
        _1379 = _1236;
        _1380 = _1235;
        _1381 = _1234;
        _1382 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1278 : (isnan(_1278) ? 0.0 : max(_1278, 0.0)));
        _1383 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1320 : (isnan(_1320) ? 0.0 : max(_1320, 0.0)));
        _1384 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1362 : (isnan(_1362) ? 0.0 : max(_1362, 0.0)));
    }
    else
    {
        _1370 = _1092;
        _1371 = _1092;
        _1372 = _1092;
        _1373 = _1092;
        _1374 = _1092;
        _1375 = _1092;
        _1376 = _1092;
        _1377 = _1092;
        _1378 = _1092;
        _1379 = _1092;
        _1380 = _1092;
        _1381 = _1092;
        _1382 = 0.0;
        _1383 = 0.0;
        _1384 = 0.0;
    }
    float _1394 = (cbModelParam._m0[1u].x * (_1382 - _1104)) + _1104;
    float _1395 = (cbModelParam._m0[1u].x * (_1383 - _1105)) + _1105;
    float _1396 = (cbModelParam._m0[1u].x * (_1384 - _1106)) + _1106;
    float _1417 = fma(_1396, cbSceneParam._m0[89u].z, fma(_1395, cbSceneParam._m0[89u].y, _1394 * cbSceneParam._m0[89u].x));
    float _1420 = fma(_1396, cbSceneParam._m0[90u].z, fma(_1395, cbSceneParam._m0[90u].y, _1394 * cbSceneParam._m0[90u].x));
    float _1423 = fma(_1396, cbSceneParam._m0[91u].z, fma(_1395, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1394));
    float _1438 = _701 * (-0.5);
    float _1439 = _702 * (-0.5);
    float _1440 = _703 * (-0.5);
    float _1441 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1372, _1375, _1378, _1381));
    float _1444 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1371, _1374, _1377, _1380));
    float _1447 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1370, _1373, _1376, _1379));
    float _1481;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1454 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1091, _1095, _1098, _1101));
        float _1458 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1093, _1096, _1099, _1102));
        float _1462 = dot(vec4(_1438, _1439, _1440, 1.0), vec4(_1094, _1097, _1100, _1103));
        float _1469 = dot(vec4(cbModelParam._m0[39u]), vec4(_1438, _1439, _1440, 1.0));
        _1481 = dot(vec3(isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0)), isnan(0.0) ? _1458 : (isnan(_1458) ? 0.0 : max(_1458, 0.0)), isnan(0.0) ? _1454 : (isnan(_1454) ? 0.0 : max(_1454, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1469) ? 0.0 : (isnan(0.0) ? _1469 : max(0.0, _1469))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1481 = 1.0;
    }
    float _1492;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1483 = dot(vec4(cbModelParam._m0[40u]), vec4(_1438, _1439, _1440, 1.0));
        _1492 = dot(vec3(isnan(0.0) ? _1441 : (isnan(_1441) ? 0.0 : max(_1441, 0.0)), isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0)), isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1483) ? 0.0 : (isnan(0.0) ? _1483 : max(0.0, _1483))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1492 = 1.0;
    }
    float _1496 = (_1492 * cbModelParam._m0[1u].x) + (_1481 * (1.0 - cbModelParam._m0[1u].x));
    float _1505 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1587;
    float _1589;
    float _1591;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1554 = fma(_795, cbModelParam._m0[13u].z, fma(_791, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _787)) + cbModelParam._m0[13u].w;
        float _1558 = fma(_795, cbModelParam._m0[14u].z, fma(_791, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _787)) + cbModelParam._m0[14u].w;
        float _1562 = fma(_795, cbModelParam._m0[15u].z, fma(_791, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _787)) + cbModelParam._m0[15u].w;
        float _1565 = fma(_765, cbModelParam._m0[13u].z, fma(_764, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _763));
        float _1568 = fma(_765, cbModelParam._m0[14u].z, fma(_764, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _763));
        float _1571 = fma(_765, cbModelParam._m0[15u].z, fma(_764, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _763));
        float _1597;
        if (_1565 > 0.0)
        {
            _1597 = abs((1.0 - _1554) / _1565);
        }
        else
        {
            float frontier_phi_57_55_ladder;
            if (_1565 < 0.0)
            {
                frontier_phi_57_55_ladder = abs((_1554 + 1.0) / _1565);
            }
            else
            {
                frontier_phi_57_55_ladder = 5000.0;
            }
            _1597 = frontier_phi_57_55_ladder;
        }
        float _1918;
        if (_1568 > 0.0)
        {
            _1918 = abs((1.0 - _1558) / _1568);
        }
        else
        {
            float frontier_phi_66_62_ladder;
            if (_1568 < 0.0)
            {
                frontier_phi_66_62_ladder = abs((_1558 + 1.0) / _1568);
            }
            else
            {
                frontier_phi_66_62_ladder = 5000.0;
            }
            _1918 = frontier_phi_66_62_ladder;
        }
        float _2229;
        if (_1571 > 0.0)
        {
            _2229 = abs((1.0 - _1562) / _1571);
        }
        else
        {
            float frontier_phi_80_73_ladder;
            if (_1571 < 0.0)
            {
                frontier_phi_80_73_ladder = abs((_1562 + 1.0) / _1571);
            }
            else
            {
                frontier_phi_80_73_ladder = 5000.0;
            }
            _2229 = frontier_phi_80_73_ladder;
        }
        float _2231 = isnan(_1918) ? _1597 : (isnan(_1597) ? _1918 : min(_1597, _1918));
        float _2232 = isnan(_2229) ? _2231 : (isnan(_2231) ? _2229 : min(_2231, _2229));
        float _2236 = (_2232 * _1565) + _1554;
        float _2237 = (_2232 * _1568) + _1558;
        float _2238 = (_2232 * _1571) + _1562;
        float _2239 = _2232 * 9.9999997473787516355514526367188e-05;
        float _2240 = (-1.0) - _2239;
        float _2242 = _2239 + 1.0;
        float frontier_phi_56_80_ladder;
        float frontier_phi_56_80_ladder_1;
        float frontier_phi_56_80_ladder_2;
        if ((_2238 > _2242) || ((_2238 < _2240) || ((_2237 > _2242) || ((_2237 < _2240) || ((_2236 < _2240) || (_2236 > _2242))))))
        {
            frontier_phi_56_80_ladder = 0.0;
            frontier_phi_56_80_ladder_1 = 0.0;
            frontier_phi_56_80_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2377 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2238, cbModelParam._m0[9u].z, fma(_2237, cbModelParam._m0[9u].y, _2236 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2238, cbModelParam._m0[10u].z, fma(_2237, cbModelParam._m0[10u].y, _2236 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2238, cbModelParam._m0[11u].z, fma(_2237, cbModelParam._m0[11u].y, _2236 * cbModelParam._m0[11u].x))), _1505);
            frontier_phi_56_80_ladder = _2377.z * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_1 = _2377.y * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_2 = _2377.x * cbModelParam._m0[1u].y;
        }
        _1587 = frontier_phi_56_80_ladder_2;
        _1589 = frontier_phi_56_80_ladder_1;
        _1591 = frontier_phi_56_80_ladder;
    }
    else
    {
        vec4 _1575 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_763, _764, _765), _1505);
        _1587 = _1575.x * cbModelParam._m0[1u].y;
        _1589 = _1575.y * cbModelParam._m0[1u].y;
        _1591 = _1575.z * cbModelParam._m0[1u].y;
    }
    float _1594 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1682;
    float _1684;
    float _1686;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1646 = fma(_795, cbModelParam._m0[21u].z, fma(_791, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _787)) + cbModelParam._m0[21u].w;
        float _1650 = fma(_795, cbModelParam._m0[22u].z, fma(_791, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _787)) + cbModelParam._m0[22u].w;
        float _1654 = fma(_795, cbModelParam._m0[23u].z, fma(_791, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _787)) + cbModelParam._m0[23u].w;
        float _1657 = fma(_765, cbModelParam._m0[21u].z, fma(_764, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _763));
        float _1660 = fma(_765, cbModelParam._m0[22u].z, fma(_764, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _763));
        float _1663 = fma(_765, cbModelParam._m0[23u].z, fma(_764, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _763));
        float _1923;
        if (_1657 > 0.0)
        {
            _1923 = abs((1.0 - _1646) / _1657);
        }
        else
        {
            float frontier_phi_68_64_ladder;
            if (_1657 < 0.0)
            {
                frontier_phi_68_64_ladder = abs((_1646 + 1.0) / _1657);
            }
            else
            {
                frontier_phi_68_64_ladder = 5000.0;
            }
            _1923 = frontier_phi_68_64_ladder;
        }
        float _2255;
        if (_1660 > 0.0)
        {
            _2255 = abs((1.0 - _1650) / _1660);
        }
        else
        {
            float frontier_phi_82_75_ladder;
            if (_1660 < 0.0)
            {
                frontier_phi_82_75_ladder = abs((_1650 + 1.0) / _1660);
            }
            else
            {
                frontier_phi_82_75_ladder = 5000.0;
            }
            _2255 = frontier_phi_82_75_ladder;
        }
        float _2442;
        if (_1663 > 0.0)
        {
            _2442 = abs((1.0 - _1654) / _1663);
        }
        else
        {
            float frontier_phi_100_93_ladder;
            if (_1663 < 0.0)
            {
                frontier_phi_100_93_ladder = abs((_1654 + 1.0) / _1663);
            }
            else
            {
                frontier_phi_100_93_ladder = 5000.0;
            }
            _2442 = frontier_phi_100_93_ladder;
        }
        float _2444 = isnan(_2255) ? _1923 : (isnan(_1923) ? _2255 : min(_1923, _2255));
        float _2445 = isnan(_2442) ? _2444 : (isnan(_2444) ? _2442 : min(_2444, _2442));
        float _2449 = (_2445 * _1657) + _1646;
        float _2450 = (_2445 * _1660) + _1650;
        float _2451 = (_2445 * _1663) + _1654;
        float _2452 = _2445 * 9.9999997473787516355514526367188e-05;
        float _2453 = (-1.0) - _2452;
        float _2455 = _2452 + 1.0;
        float frontier_phi_65_100_ladder;
        float frontier_phi_65_100_ladder_1;
        float frontier_phi_65_100_ladder_2;
        if ((_2451 > _2455) || ((_2451 < _2453) || ((_2450 > _2455) || ((_2450 < _2453) || ((_2449 < _2453) || (_2449 > _2455))))))
        {
            frontier_phi_65_100_ladder = 0.0;
            frontier_phi_65_100_ladder_1 = 0.0;
            frontier_phi_65_100_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2643 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2451, cbModelParam._m0[17u].z, fma(_2450, cbModelParam._m0[17u].y, _2449 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2451, cbModelParam._m0[18u].z, fma(_2450, cbModelParam._m0[18u].y, _2449 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2451, cbModelParam._m0[19u].z, fma(_2450, cbModelParam._m0[19u].y, _2449 * cbModelParam._m0[19u].x))), _1594);
            frontier_phi_65_100_ladder = _2643.y * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_1 = _2643.x * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_2 = _2643.z * cbModelParam._m0[1u].z;
        }
        _1682 = frontier_phi_65_100_ladder_1;
        _1684 = frontier_phi_65_100_ladder;
        _1686 = frontier_phi_65_100_ladder_2;
    }
    else
    {
        vec4 _1666 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_763, _764, _765), _1594);
        _1682 = _1666.x * cbModelParam._m0[1u].z;
        _1684 = _1666.y * cbModelParam._m0[1u].z;
        _1686 = _1666.z * cbModelParam._m0[1u].z;
    }
    float _1698 = _762 * 0.01200000010430812835693359375;
    float _1700 = _1698 * ((cbModelParam._m0[1u].w * (_1682 - _1587)) + _1587);
    float _1701 = _1698 * ((cbModelParam._m0[1u].w * (_1684 - _1589)) + _1589);
    float _1702 = _1698 * ((cbModelParam._m0[1u].w * (_1686 - _1591)) + _1591);
    float _1705 = fma(_1702, cbSceneParam._m0[89u].z, fma(_1701, cbSceneParam._m0[89u].y, _1700 * cbSceneParam._m0[89u].x));
    float _1708 = fma(_1702, cbSceneParam._m0[90u].z, fma(_1701, cbSceneParam._m0[90u].y, _1700 * cbSceneParam._m0[90u].x));
    float _1711 = fma(_1702, cbSceneParam._m0[91u].z, fma(_1701, cbSceneParam._m0[91u].y, _1700 * cbSceneParam._m0[91u].x));
    vec4 _1719 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_722, _723));
    float _1721 = _1719.w;
    float _1734 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1721);
    float _1735 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1721);
    float _1736 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1721);
    uvec4 _1740 = floatBitsToUint(cbInstanceData._m0[_736 + 5u]);
    uint _1742 = _1740.x * 14u;
    uint _1743 = _1742 + 13u;
    float _1748 = _762 + (-1.0);
    float _1751 = (cbLight._m0[_1743].x * _1748) + 1.0;
    float _1752 = (cbLight._m0[_1743].y * _1748) + 1.0;
    uint _1753 = _1742 + 5u;
    float _1759 = isnan(1.0) ? _1752 : (isnan(_1752) ? 1.0 : min(_1752, 1.0));
    uint _1763 = _1742 + 4u;
    float _1773 = isnan(1.0) ? _1751 : (isnan(_1751) ? 1.0 : min(_1751, 1.0));
    uint _1777 = _1742 | 1u;
    float _1788 = dot(vec3(cbLight._m0[_1742].xyz), vec3(0.0));
    float _1791 = dot(vec3(cbLight._m0[_1777].xyz), vec3(0.0));
    float _3614 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
    float _3625 = isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0));
    float _1796 = (isnan(1.0) ? _3614 : (isnan(_3614) ? 1.0 : min(_3614, 1.0))) * 0.3183098733425140380859375;
    float _1798 = (isnan(1.0) ? _3625 : (isnan(_3625) ? 1.0 : min(_3625, 1.0))) * 0.3183098733425140380859375;
    float _1805 = ((cbLight._m0[_1753].x * _1759) * _1798) + (((cbLight._m0[_1763].x * _1734) * _1773) * _1796);
    float _1806 = ((_1759 * cbLight._m0[_1753].y) * _1798) + (((cbLight._m0[_1763].y * _1735) * _1773) * _1796);
    float _1807 = ((_1759 * cbLight._m0[_1753].z) * _1798) + (((cbLight._m0[_1763].z * _1736) * _1773) * _1796);
    uint _1808 = _1742 + 8u;
    float _1814 = cbLight._m0[_1742].x + _701;
    float _1815 = cbLight._m0[_1742].y + _702;
    float _1816 = cbLight._m0[_1742].z + _703;
    float _1820 = inversesqrt(dot(vec3(_1814, _1815, _1816), vec3(_1814, _1815, _1816)));
    float _1824 = dot(vec3(0.0), vec3(cbLight._m0[_1742].xyz));
    float _3636 = isnan(0.0) ? _1824 : (isnan(_1824) ? 0.0 : max(_1824, 0.0));
    float _1827 = isnan(1.0) ? _3636 : (isnan(_3636) ? 1.0 : min(_3636, 1.0));
    float _1828 = dot(vec3(0.0), vec3(_701, _702, _703));
    float _3647 = isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0));
    float _1831 = isnan(1.0) ? _3647 : (isnan(_3647) ? 1.0 : min(_3647, 1.0));
    float _1832 = dot(vec3(cbLight._m0[_1742].xyz), vec3(_1814 * _1820, _1815 * _1820, _1816 * _1820));
    float _3658 = isnan(0.0) ? _1832 : (isnan(_1832) ? 0.0 : max(_1832, 0.0));
    float _1843 = (exp2(log2(1.0 - (isnan(1.0) ? _3658 : (isnan(_3658) ? 1.0 : min(_3658, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1849 = (0.5 / ((_1827 + 9.9999999392252902907785028219223e-09) + _1831)) * _1827;
    float _3669 = isnan(0.0) ? _1849 : (isnan(_1849) ? 0.0 : max(_1849, 0.0));
    float _1851 = (isnan(1.0) ? _3669 : (isnan(_3669) ? 1.0 : min(_3669, 1.0))) * 0.31831014156341552734375;
    uint _1865 = _1742 + 9u;
    float _1871 = cbLight._m0[_1777].x + _701;
    float _1872 = cbLight._m0[_1777].y + _702;
    float _1873 = cbLight._m0[_1777].z + _703;
    float _1877 = inversesqrt(dot(vec3(_1871, _1872, _1873), vec3(_1871, _1872, _1873)));
    float _1881 = dot(vec3(0.0), vec3(cbLight._m0[_1777].xyz));
    float _3680 = isnan(0.0) ? _1881 : (isnan(_1881) ? 0.0 : max(_1881, 0.0));
    float _1884 = isnan(1.0) ? _3680 : (isnan(_3680) ? 1.0 : min(_3680, 1.0));
    float _1885 = dot(vec3(cbLight._m0[_1777].xyz), vec3(_1871 * _1877, _1872 * _1877, _1873 * _1877));
    float _3691 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
    float _1894 = (exp2(log2(1.0 - (isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1898 = (0.5 / ((_1884 + 9.9999999392252902907785028219223e-09) + _1831)) * _1884;
    float _3702 = isnan(0.0) ? _1898 : (isnan(_1898) ? 0.0 : max(_1898, 0.0));
    float _1900 = (isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0))) * 0.31831014156341552734375;
    float _1910 = (((_1894 * cbLight._m0[_1865].x) * _1900) * _1759) + ((((cbLight._m0[_1808].x * _1734) * _1843) * _1851) * _1773);
    float _1911 = (((_1894 * cbLight._m0[_1865].y) * _1900) * _1759) + ((((cbLight._m0[_1808].y * _1735) * _1843) * _1851) * _1773);
    float _1912 = (((_1894 * cbLight._m0[_1865].z) * _1900) * _1759) + ((((cbLight._m0[_1808].z * _1736) * _1843) * _1851) * _1773);
    float _2028;
    float _2030;
    float _2032;
    float _2034;
    float _2036;
    float _2038;
    if (_1740.y == 0u)
    {
        float _1968 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1969 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1968;
        float _1970 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1968;
        float _1971 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1968;
        uvec4 _1983 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1984 = _1983.x;
        uint _1995 = uint((float(_1983.y) * floor(float(uint(cbSceneParam._m0[85u].y * _723) / _1984))) + floor(float(uint(cbSceneParam._m0[85u].x * _722) / _1984)));
        float _2005 = (log2(_1971 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2006 = isnan(0.0) ? _2005 : (isnan(_2005) ? 0.0 : max(_2005, 0.0));
        uint _2009 = uint(isnan(14.0) ? _2006 : (isnan(_2006) ? 14.0 : min(_2006, 14.0)));
        uvec4 _2014 = texelFetch(g_lightClusterGridBuffer, int(((_2009 << 2u) + (_1995 << 6u)) >> 2u));
        uint _2015 = _2014.x;
        uint _2016 = _1983.z;
        float _2106;
        float _2108;
        float _2110;
        float _2112;
        float _2114;
        float _2116;
        if (((((1u << ((_2016 >> 4u) & 15u)) + 4294967295u) & _2015) == 0u) || ((_2016 & 240u) == 0u))
        {
            _2106 = 0.0;
            _2108 = 0.0;
            _2110 = 0.0;
            _2112 = 0.0;
            _2114 = 0.0;
            _2116 = 0.0;
        }
        else
        {
            float _2107;
            float _2109;
            float _2111;
            float _2113;
            float _2115;
            float _2117;
            float _2289 = 0.0;
            float _2290 = 0.0;
            float _2291 = 0.0;
            float _2292 = 0.0;
            float _2293 = 0.0;
            float _2294 = 0.0;
            uint _2295 = 0u;
            uint _2304;
            bool _2305;
            for (;;)
            {
                _2304 = texelFetch(g_lightClassification, int((((_2009 << 5u) + (_1995 << 9u)) + (_2295 << 2u)) >> 2u)).x;
                _2305 = _2304 == 0u;
                float frontier_phi_95_pred;
                float frontier_phi_95_pred_1;
                float frontier_phi_95_pred_2;
                float frontier_phi_95_pred_3;
                float frontier_phi_95_pred_4;
                float frontier_phi_95_pred_5;
                if (_2305)
                {
                    frontier_phi_95_pred = _2290;
                    frontier_phi_95_pred_1 = _2289;
                    frontier_phi_95_pred_2 = _2291;
                    frontier_phi_95_pred_3 = _2294;
                    frontier_phi_95_pred_4 = _2293;
                    frontier_phi_95_pred_5 = _2292;
                }
                else
                {
                    float _2485;
                    float _2486;
                    float _2487;
                    float _2488;
                    float _2489;
                    float _2490;
                    uint _2491;
                    _2485 = _2289;
                    _2486 = _2290;
                    _2487 = _2291;
                    _2488 = _2292;
                    _2489 = _2293;
                    _2490 = _2294;
                    _2491 = _2304;
                    float _2386;
                    float _2387;
                    float _2388;
                    float _2389;
                    float _2390;
                    float _2391;
                    for (;;)
                    {
                        uint _2495 = uint(findLSB(_2491)) + (_2295 << 5u);
                        uint _2492 = (_2491 + 4294967295u) & _2491;
                        uint _2497 = _2495 * 48u;
                        vec4 _2511 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2497)).x, texelFetch(g_PointLightRenderingBuffer, int(_2497 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2497 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2497 + 3u)).x));
                        uint _2517 = (_2495 * 48u) + 4u;
                        vec4 _2530 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2517)).x, texelFetch(g_PointLightRenderingBuffer, int(_2517 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2517 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2517 + 3u)).x));
                        uint _2536 = (_2495 * 48u) + 8u;
                        vec3 _2547 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2536)).x, texelFetch(g_PointLightRenderingBuffer, int(_2536 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2536 + 2u)).x));
                        float _2551 = _2511.x - _1969;
                        float _2552 = _2511.y - _1970;
                        float _2553 = _2511.z - _1971;
                        float _2554 = dot(vec3(_2551, _2552, _2553), vec3(_2551, _2552, _2553));
                        float _2557 = inversesqrt(_2554);
                        float _2566 = 1.0 - (_2554 * _2511.w);
                        float _3723 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
                        float _2567 = isnan(1.0) ? _3723 : (isnan(_3723) ? 1.0 : min(_3723, 1.0));
                        float _2568 = sqrt(_2554) * _2530.w;
                        float _2571 = 1.39999997615814208984375 / (_2568 + 1.39999997615814208984375);
                        float _2572 = _2571 * _2571;
                        float _2575 = ((1.0 - _2572) * dot(vec3(0.0), vec3(_2557 * _2551, _2557 * _2552, _2557 * _2553))) + _2572;
                        float _2578 = _2568 * _2568;
                        float _2582 = ((isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0))) * _2567) / ((_2578 * 0.699999988079071044921875) + 1.0);
                        float _2586 = (-0.0) - _1969;
                        float _2587 = (-0.0) - _1970;
                        float _2588 = (-0.0) - _1971;
                        float _2592 = inversesqrt(dot(vec3(_2586, _2587, _2588), vec3(_2586, _2587, _2588)));
                        float _2596 = dot(vec3(0.0), vec3(_2592 * _2586, _2592 * _2587, _2592 * _2588));
                        float _3739 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
                        float _3750 = isnan(0.0) ? _2575 : (isnan(_2575) ? 0.0 : max(_2575, 0.0));
                        float _2600 = isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0));
                        float _2604 = (0.5 / (((isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0))) + 9.9999999392252902907785028219223e-09) + _2600)) * _2600;
                        float _3761 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0));
                        float _2613 = (((isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0))) * 3.1415927410125732421875) / ((_2578 * 2.1991131305694580078125) + 3.141590118408203125)) * _2567;
                        _2389 = (_2582 * _2530.x) + _2488;
                        _2390 = (_2582 * _2530.y) + _2489;
                        _2391 = (_2582 * _2530.z) + _2490;
                        _2386 = (_2613 * _2547.x) + _2485;
                        _2387 = (_2613 * _2547.y) + _2486;
                        _2388 = (_2613 * _2547.z) + _2487;
                        if (_2492 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2485 = _2386;
                            _2486 = _2387;
                            _2487 = _2388;
                            _2488 = _2389;
                            _2489 = _2390;
                            _2490 = _2391;
                            _2491 = _2492;
                        }
                    }
                    frontier_phi_95_pred = _2387;
                    frontier_phi_95_pred_1 = _2386;
                    frontier_phi_95_pred_2 = _2388;
                    frontier_phi_95_pred_3 = _2391;
                    frontier_phi_95_pred_4 = _2390;
                    frontier_phi_95_pred_5 = _2389;
                }
                _2109 = frontier_phi_95_pred;
                _2107 = frontier_phi_95_pred_1;
                _2111 = frontier_phi_95_pred_2;
                _2117 = frontier_phi_95_pred_3;
                _2115 = frontier_phi_95_pred_4;
                _2113 = frontier_phi_95_pred_5;
                uint _2296 = _2295 + 1u;
                if (_2296 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2289 = _2107;
                    _2290 = _2109;
                    _2291 = _2111;
                    _2292 = _2113;
                    _2293 = _2115;
                    _2294 = _2117;
                    _2295 = _2296;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2106 = _2107;
            _2108 = _2109;
            _2110 = _2111;
            _2112 = _2113;
            _2114 = _2115;
            _2116 = _2117;
        }
        uvec4 _2120 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2121 = _2120.z;
        uint _2123 = (_2121 >> 8u) & 15u;
        float _2260;
        float _2262;
        float _2264;
        float _2266;
        float _2268;
        float _2270;
        if (((4294967295u << _2123) & _2015) == 0u)
        {
            _2260 = _2106;
            _2262 = _2108;
            _2264 = _2110;
            _2266 = _2112;
            _2268 = _2114;
            _2270 = _2116;
        }
        else
        {
            float _2285 = inversesqrt(dot(vec3(_1969, _1970, _1971), vec3(_1969, _1970, _1971)));
            float frontier_phi_84_85_ladder;
            float frontier_phi_84_85_ladder_1;
            float frontier_phi_84_85_ladder_2;
            float frontier_phi_84_85_ladder_3;
            float frontier_phi_84_85_ladder_4;
            float frontier_phi_84_85_ladder_5;
            if (_2123 < ((_2121 >> 12u) & 15u))
            {
                float _2261;
                float _2263;
                float _2265;
                float _2267;
                float _2269;
                float _2271;
                float _2468 = _2106;
                float _2469 = _2108;
                float _2470 = _2110;
                float _2471 = _2112;
                float _2472 = _2114;
                float _2473 = _2116;
                uint _2474 = _2123;
                uint _2483;
                bool _2484;
                for (;;)
                {
                    _2483 = texelFetch(g_lightClassification, int((((_2009 << 5u) + (_1995 << 9u)) + (_2474 << 2u)) >> 2u)).x;
                    _2484 = _2483 == 0u;
                    float frontier_phi_109_pred;
                    float frontier_phi_109_pred_1;
                    float frontier_phi_109_pred_2;
                    float frontier_phi_109_pred_3;
                    float frontier_phi_109_pred_4;
                    float frontier_phi_109_pred_5;
                    if (_2484)
                    {
                        frontier_phi_109_pred = _2469;
                        frontier_phi_109_pred_1 = _2468;
                        frontier_phi_109_pred_2 = _2473;
                        frontier_phi_109_pred_3 = _2472;
                        frontier_phi_109_pred_4 = _2471;
                        frontier_phi_109_pred_5 = _2470;
                    }
                    else
                    {
                        float _2648;
                        float _2649;
                        float _2650;
                        float _2651;
                        float _2652;
                        float _2653;
                        float _2897;
                        float _2898;
                        float _2899;
                        float _2900;
                        float _2901;
                        float _2902;
                        float _2661 = _2468;
                        float _2662 = _2469;
                        float _2663 = _2470;
                        float _2664 = _2471;
                        float _2665 = _2472;
                        float _2666 = _2473;
                        uint _2667 = _2483;
                        uint _2668;
                        vec4 _2693;
                        float _2694;
                        vec4 _2709;
                        vec3 _2721;
                        vec4 _2736;
                        vec4 _2751;
                        float _2797;
                        bool _2798;
                        for (;;)
                        {
                            uint _2678 = ((_2474 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2667));
                            _2668 = (_2667 + 4294967295u) & _2667;
                            uint _2680 = _2678 * 40u;
                            _2693 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2680)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2680 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2680 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2680 + 3u)).x));
                            _2694 = _2693.w;
                            uint _2696 = (_2678 * 40u) + 4u;
                            _2709 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2696)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2696 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2696 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2696 + 3u)).x));
                            uint _2711 = (_2678 * 40u) + 8u;
                            _2721 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2711)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2711 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2711 + 2u)).x));
                            uint _2723 = (_2678 * 40u) + 16u;
                            _2736 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2723)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2723 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2723 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2723 + 3u)).x));
                            uint _2738 = (_2678 * 40u) + 20u;
                            _2751 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2738)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2738 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2738 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2738 + 3u)).x));
                            uint _2753 = (_2678 * 40u) + 24u;
                            vec4 _2766 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2753)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2753 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2753 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2753 + 3u)).x));
                            uint _2772 = (_2678 * 40u) + 28u;
                            vec4 _2785 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2772)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2772 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2772 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2772 + 3u)).x));
                            _2797 = fma(_1971, _2785.z, fma(_1970, _2785.y, _2785.x * _1969)) + _2785.w;
                            _2798 = !((fma(_1971, _2766.z, fma(_1970, _2766.y, _2766.x * _1969)) + _2766.w) <= 0.0);
                            float frontier_phi_115_pred;
                            float frontier_phi_115_pred_1;
                            float frontier_phi_115_pred_2;
                            float frontier_phi_115_pred_3;
                            float frontier_phi_115_pred_4;
                            float frontier_phi_115_pred_5;
                            if (_2798)
                            {
                                float _2825 = _2693.x - _1969;
                                float _2826 = _2693.y - _1970;
                                float _2827 = _2693.z - _1971;
                                float _2828 = dot(vec3(_2825, _2826, _2827), vec3(_2825, _2826, _2827));
                                float _2831 = inversesqrt(_2828);
                                float _2832 = _2831 * _2825;
                                float _2833 = _2831 * _2826;
                                float _2834 = _2831 * _2827;
                                float _2838 = 1.0 - (_2828 / (_2694 * _2694));
                                float _3772 = isnan(0.0) ? _2838 : (isnan(_2838) ? 0.0 : max(_2838, 0.0));
                                float _2839 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
                                float _2843 = sqrt(_2828) * _2709.w;
                                float _2845 = 1.39999997615814208984375 / (_2843 + 1.39999997615814208984375);
                                float _2846 = _2845 * _2845;
                                float _2847 = 1.0 - _2846;
                                float _2849 = (_2847 * dot(vec3(_2832, _2833, _2834), vec3(0.0))) + _2846;
                                float _2852 = _2843 * _2843;
                                float _2856 = (fma(_1971, _2736.z, fma(_1970, _2736.y, _2736.x * _1969)) + _2736.w) / _2797;
                                float _2857 = (fma(_1971, _2751.z, fma(_1970, _2751.y, _2751.x * _1969)) + _2751.w) / _2797;
                                float _2861 = 1.0 - dot(vec2(_2856, _2857), vec2(_2856, _2857));
                                float _3788 = isnan(0.0) ? _2861 : (isnan(_2861) ? 0.0 : max(_2861, 0.0));
                                float _2862 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
                                float _2863 = _2862 * (((isnan(0.0) ? _2849 : (isnan(_2849) ? 0.0 : max(_2849, 0.0))) * _2839) / ((_2852 * 0.699999988079071044921875) + 1.0));
                                float _2873 = dot(vec3(0.0), vec3((-0.0) - (_1969 * _2285), (-0.0) - (_1970 * _2285), (-0.0) - (_1971 * _2285)));
                                float _3799 = isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0));
                                float _2881 = (_2847 * dot(vec3(0.0), vec3(_2832, _2833, _2834))) + _2846;
                                float _3810 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
                                float _2882 = isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0));
                                float _2886 = (0.5 / (((isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0))) + 9.9999999392252902907785028219223e-09) + _2882)) * _2882;
                                float _3821 = isnan(0.0) ? _2886 : (isnan(_2886) ? 0.0 : max(_2886, 0.0));
                                float _2893 = (_2862 * _2839) * (((isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0))) * 3.1415927410125732421875) / ((_2852 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_115_pred = _2863 * _2709.y;
                                frontier_phi_115_pred_1 = _2863 * _2709.x;
                                frontier_phi_115_pred_2 = _2893 * _2721.z;
                                frontier_phi_115_pred_3 = _2893 * _2721.y;
                                frontier_phi_115_pred_4 = _2893 * _2721.x;
                                frontier_phi_115_pred_5 = _2863 * _2709.z;
                            }
                            else
                            {
                                frontier_phi_115_pred = 0.0;
                                frontier_phi_115_pred_1 = 0.0;
                                frontier_phi_115_pred_2 = 0.0;
                                frontier_phi_115_pred_3 = 0.0;
                                frontier_phi_115_pred_4 = 0.0;
                                frontier_phi_115_pred_5 = 0.0;
                            }
                            _2901 = frontier_phi_115_pred;
                            _2900 = frontier_phi_115_pred_1;
                            _2899 = frontier_phi_115_pred_2;
                            _2898 = frontier_phi_115_pred_3;
                            _2897 = frontier_phi_115_pred_4;
                            _2902 = frontier_phi_115_pred_5;
                            _2651 = _2900 + _2664;
                            _2652 = _2901 + _2665;
                            _2653 = _2902 + _2666;
                            _2648 = _2897 + _2661;
                            _2649 = _2898 + _2662;
                            _2650 = _2899 + _2663;
                            if (_2668 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2661 = _2648;
                                _2662 = _2649;
                                _2663 = _2650;
                                _2664 = _2651;
                                _2665 = _2652;
                                _2666 = _2653;
                                _2667 = _2668;
                                continue;
                            }
                        }
                        frontier_phi_109_pred = _2649;
                        frontier_phi_109_pred_1 = _2648;
                        frontier_phi_109_pred_2 = _2653;
                        frontier_phi_109_pred_3 = _2652;
                        frontier_phi_109_pred_4 = _2651;
                        frontier_phi_109_pred_5 = _2650;
                    }
                    _2263 = frontier_phi_109_pred;
                    _2261 = frontier_phi_109_pred_1;
                    _2271 = frontier_phi_109_pred_2;
                    _2269 = frontier_phi_109_pred_3;
                    _2267 = frontier_phi_109_pred_4;
                    _2265 = frontier_phi_109_pred_5;
                    uint _2475 = _2474 + 1u;
                    if (_2475 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2468 = _2261;
                        _2469 = _2263;
                        _2470 = _2265;
                        _2471 = _2267;
                        _2472 = _2269;
                        _2473 = _2271;
                        _2474 = _2475;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_84_85_ladder = _2261;
                frontier_phi_84_85_ladder_1 = _2265;
                frontier_phi_84_85_ladder_2 = _2271;
                frontier_phi_84_85_ladder_3 = _2269;
                frontier_phi_84_85_ladder_4 = _2267;
                frontier_phi_84_85_ladder_5 = _2263;
            }
            else
            {
                frontier_phi_84_85_ladder = _2106;
                frontier_phi_84_85_ladder_1 = _2110;
                frontier_phi_84_85_ladder_2 = _2116;
                frontier_phi_84_85_ladder_3 = _2114;
                frontier_phi_84_85_ladder_4 = _2112;
                frontier_phi_84_85_ladder_5 = _2108;
            }
            _2260 = frontier_phi_84_85_ladder;
            _2262 = frontier_phi_84_85_ladder_5;
            _2264 = frontier_phi_84_85_ladder_1;
            _2266 = frontier_phi_84_85_ladder_4;
            _2268 = frontier_phi_84_85_ladder_3;
            _2270 = frontier_phi_84_85_ladder_2;
        }
        float _2275 = isnan(1.0) ? _762 : (isnan(_762) ? 1.0 : min(_762, 1.0));
        _2028 = (_2275 * _2266) + _1805;
        _2030 = (_2275 * _2268) + _1806;
        _2032 = (_2275 * _2270) + _1807;
        _2034 = ((_2260 * 0.039999999105930328369140625) * _2275) + _1910;
        _2036 = ((_2262 * 0.039999999105930328369140625) * _2275) + _1911;
        _2038 = ((_2264 * 0.039999999105930328369140625) * _2275) + _1912;
    }
    else
    {
        _2028 = _1805;
        _2030 = _1806;
        _2032 = _1807;
        _2034 = _1910;
        _2036 = _1911;
        _2038 = _1912;
    }
    float _3837 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _3848 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _3859 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _2055 = ((isnan(1.0) ? _3837 : (isnan(_3837) ? 1.0 : min(_3837, 1.0))) * (_2028 + ((isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0))) * _762))) + ((_2034 + ((isnan(0.0) ? _1705 : (isnan(_1705) ? 0.0 : max(_1705, 0.0))) * _1496)) * cbPerFrame._m0[3u].x);
    float _2056 = ((isnan(1.0) ? _3848 : (isnan(_3848) ? 1.0 : min(_3848, 1.0))) * (_2030 + ((isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0))) * _762))) + ((_2036 + ((isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0))) * _1496)) * cbPerFrame._m0[3u].x);
    float _2057 = ((isnan(1.0) ? _3859 : (isnan(_3859) ? 1.0 : min(_3859, 1.0))) * (_2032 + ((isnan(0.0) ? _1423 : (isnan(_1423) ? 0.0 : max(_1423, 0.0))) * _762))) + ((_2038 + ((isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0))) * _1496)) * cbPerFrame._m0[3u].x);
    float _2058 = isnan(0.0) ? _2055 : (isnan(_2055) ? 0.0 : max(_2055, 0.0));
    float _2059 = isnan(0.0) ? _2056 : (isnan(_2056) ? 0.0 : max(_2056, 0.0));
    float _2060 = isnan(0.0) ? _2057 : (isnan(_2057) ? 0.0 : max(_2057, 0.0));
    uint _2061 = _736 + 6u;
    float _2069 = _722 / cbSceneParam._m0[86u].x;
    float _2070 = _723 / cbSceneParam._m0[86u].y;
    vec4 _2084 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2069, _2070, (log2((isnan(cbSceneParam._m0[77u].w) ? _696 : (isnan(_696) ? cbSceneParam._m0[77u].w : min(_696, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2086 = _2084.x;
    float _2087 = _2084.y;
    float _2088 = _2084.z;
    float _2089 = _2084.w;
    float _2169;
    float _2171;
    float _2173;
    float _2175;
    if (_696 > cbSceneParam._m0[78u].w)
    {
        float _2131 = isnan(_696) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _696 : min(cbSceneParam._m0[80u].w, _696));
        float _2132 = _2131 / _696;
        float _2143 = _2132 * _269;
        float _2144 = _270 * _2132;
        float _2145 = (-0.0) - _2144;
        float _2146 = _2132 * _271;
        float _2148 = (cbSceneParam._m0[77u].w * _2145) / _2131;
        float _2149 = _2148 + cbSceneParam._m0[79u].w;
        float _2150 = cbSceneParam._m0[79u].w - _2144;
        float _2156 = sqrt(((_2143 * _2143) + (_2144 * _2144)) + (_2146 * _2146));
        float _2159 = (1.0 - (cbSceneParam._m0[77u].w / _2131)) * _2156;
        float _2165 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2167 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2399;
        if (abs((_2145 - _2148) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2399 = ((((_2149 > 0.0) ? exp2(_2165 * _2149) : (2.0 - exp2(_2167 * _2149))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2159;
        }
        else
        {
            float _2318 = 1.0 / cbSceneParam._m0[80u].x;
            float _2319 = isnan(_2150) ? _2149 : (isnan(_2149) ? _2150 : max(_2149, _2150));
            float _2320 = isnan(_2150) ? _2149 : (isnan(_2149) ? _2150 : min(_2149, _2150));
            float _2329 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : min(_2319, 0.0));
            float _2330 = isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : min(_2320, 0.0));
            _2399 = ((abs(_2156 / _2145) * cbSceneParam._m0[80u].y) * ((((_2329 - _2330) * 2.0) - ((exp2(_2165 * (isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0)))) - exp2(_2165 * (isnan(0.0) ? _2320 : (isnan(_2320) ? 0.0 : max(_2320, 0.0))))) * _2318)) - ((exp2(_2167 * _2329) - exp2(_2167 * _2330)) * _2318))) + (_2159 * cbSceneParam._m0[80u].z);
        }
        vec4 _2401 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2069, _2070, 1.0), 0.0);
        float _2410 = exp2((_2399 * (-1.44269502162933349609375)) * (1.0 - _2401.w));
        float _2411 = log2(_2410);
        float _2427 = log2(_2089);
        _2169 = (exp2(_2427 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2411 * cbSceneParam._m0[78u].x)) * _2401.x) / cbSceneParam._m0[78u].x)) + _2086;
        _2171 = (exp2(_2427 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2411 * cbSceneParam._m0[78u].y)) * _2401.y) / cbSceneParam._m0[78u].y)) + _2087;
        _2173 = (exp2(_2427 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2411 * cbSceneParam._m0[78u].z)) * _2401.z) / cbSceneParam._m0[78u].z)) + _2088;
        _2175 = _2410 * _2089;
    }
    else
    {
        _2169 = _2086;
        _2171 = _2087;
        _2173 = _2088;
        _2175 = _2089;
    }
    bool _2437;
    vec4 _2185;
    vec4 _2208;
    float _2210;
    float _2214;
    float _2215;
    float _2216;
    float _2217;
    bool _2228;
    for (;;)
    {
        _2185 = cbMatDynParam._m0[0u];
        float _2187 = roundEven(_2185.y);
        bool _2188 = _2187 == 3.0;
        float _2190 = log2(_2175);
        float _2197 = exp2(_2190 * cbSceneParam._m0[78u].x) * _2058;
        float _2198 = exp2(_2190 * cbSceneParam._m0[78u].y) * _2059;
        float _2199 = exp2(_2190 * cbSceneParam._m0[78u].z) * _2060;
        float _2206 = _710 + (-0.5);
        _2208 = cbMtdParam._m0[1u];
        _2210 = _2208.y * _2206;
        float _2213 = (_2187 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2214 = _2213 * (_2188 ? _2197 : (_2197 + (cbSceneParam._m0[72u].w * _2169)));
        _2215 = _2213 * (_2188 ? _2198 : (_2198 + (cbSceneParam._m0[72u].w * _2171)));
        _2216 = _2213 * (_2188 ? _2199 : (_2199 + (cbSceneParam._m0[72u].w * _2173)));
        _2217 = _2206 * 0.999000012874603271484375;
        _2228 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2228)
        {
            if ((cbInstanceData._m0[_736 + 7u].x + _2217) < 0.5)
            {
                _2437 = true;
                break;
            }
        }
        uint _2353 = _738 + uint(_2185.w);
        if ((cbInstanceData._m0[_2353].w < 1.0) && ((cbInstanceData._m0[_2353].w + _2217) < 0.5))
        {
            _2437 = true;
            break;
        }
        if ((_2210 + 1.0) < _2208.x)
        {
            _2437 = true;
            break;
        }
        _2437 = false;
        break;
    }
    float _2618;
    if (_2437)
    {
        discard_state = true;
        _2618 = 0.0;
    }
    else
    {
        _2618 = cbInstanceData._m0[_2061].w;
    }
    SV_Target.x = _2214;
    SV_Target.y = _2215;
    SV_Target.z = _2216;
    SV_Target.w = _2618;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2061].w;
    discard_exit();
}


