#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _753;
uint _1918;
uint _1919;
uint _1920;
uint _2154;
uint _2155;
uint _2156;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _251 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _261 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _251);
    float _262 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _251);
    float _263 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _251);
    vec4 _282 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _317 = cbMtdParam._m0[24u].x + _261;
    float _318 = cbMtdParam._m0[24u].y + _262;
    float _319 = cbMtdParam._m0[24u].z + _263;
    float _333 = (-0.0) - dot(vec3(_317, _318, _319), vec3(_189 * _182, _189 * _183, _189 * _184));
    float _334 = (-0.0) - dot(vec3(_317, _318, _319), vec3(_203 * TANGENT.x, _203 * TANGENT.y, _203 * TANGENT.z));
    float _335 = (-0.0) - dot(vec3(_317, _318, _319), vec3((-0.0) - (_196 * NORMAL.x), (-0.0) - (_196 * NORMAL.y), (-0.0) - (_196 * NORMAL.z)));
    float _339 = inversesqrt(dot(vec3(_333, _334, _335), vec3(_333, _334, _335)));
    float _342 = _339 * _335;
    float _343 = (_339 * _333) + (((_282.x * 2.0) + (-1.0)) * cbMtdParam._m0[22u].x);
    float _344 = (_339 * _334) + (((_282.y * 2.0) + (-1.0)) * cbMtdParam._m0[22u].y);
    float _345 = _343 * cbMtdParam._m0[20u].w;
    float _346 = _344 * cbMtdParam._m0[20u].z;
    float _347 = fract(TEXCOORD.x);
    float _348 = fract(TEXCOORD.y);
    float _354;
    if (_345 > 0.0)
    {
        _354 = (1.0 - _347) / _345;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_345 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _347) / _345;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _354 = frontier_phi_3_2_ladder;
    }
    float _362;
    if (_346 > 0.0)
    {
        _362 = (1.0 - _348) / _346;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_346 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _348) / _346;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _362 = frontier_phi_7_6_ladder;
    }
    bool _364 = _342 > 0.0;
    float _366 = _364 ? (cbMtdParam._m0[16u].x / _342) : 5000.0;
    float _367 = isnan(_362) ? _354 : (isnan(_354) ? _362 : min(_354, _362));
    float _368 = isnan(_366) ? _367 : (isnan(_367) ? _366 : min(_367, _366));
    float _372 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _373 = _347 + (-0.5);
    float _376 = _348 + (-0.5);
    float _379 = ((_368 * _342) + _372) / _372;
    vec4 _404 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (((((_373 + (_368 * _345)) / _379) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (((((_376 + (_368 * _346)) / _379) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    float _414 = cbMtdParam._m0[9u].x * _404.x;
    float _415 = cbMtdParam._m0[9u].y * _404.y;
    float _416 = cbMtdParam._m0[9u].z * _404.z;
    float _435 = _343 * cbMtdParam._m0[22u].w;
    float _436 = _344 * cbMtdParam._m0[22u].z;
    bool _437 = _435 > 0.0;
    float _442;
    if (_437)
    {
        _442 = (1.0 - _347) / _435;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_435 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _347) / _435;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _442 = frontier_phi_11_10_ladder;
    }
    bool _444 = _436 > 0.0;
    float _449;
    if (_444)
    {
        _449 = (1.0 - _348) / _436;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_436 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _348) / _436;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _449 = frontier_phi_15_14_ladder;
    }
    float _452 = _364 ? (cbMtdParam._m0[18u].x / _342) : 5000.0;
    float _453 = isnan(_449) ? _442 : (isnan(_442) ? _449 : min(_442, _449));
    float _454 = isnan(_452) ? _453 : (isnan(_453) ? _452 : min(_453, _452));
    float _458 = cbMtdParam._m0[19u].y * cbMtdParam._m0[18u].x;
    float _462 = ((_454 * _342) + _458) / _458;
    float _467 = cbMtdParam._m0[19u].x - cbMtdParam._m0[20u].x * trunc(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    float _469 = floor(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    vec4 _485 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_373 + (_454 * _435)) / _462) + 0.5) + _467) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_376 + (_454 * _436)) / _462) + 0.5) + _469) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[0u].w));
    float _497;
    if (_437)
    {
        _497 = (1.0 - _347) / _435;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_435 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _347) / _435;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _497 = frontier_phi_19_18_ladder;
    }
    float _503;
    if (_444)
    {
        _503 = (1.0 - _348) / _436;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_436 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _348) / _436;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _503 = frontier_phi_23_22_ladder;
    }
    float _505 = isnan(_503) ? _497 : (isnan(_497) ? _503 : min(_497, _503));
    float _506 = isnan(_452) ? _505 : (isnan(_505) ? _452 : min(_505, _452));
    float _513 = ((_506 * _342) + _458) / _458;
    vec4 _533 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_373 + (_506 * _435)) / _513) + 0.5) + _467) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_376 + (_506 * _436)) / _513) + 0.5) + _469) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[8u].w));
    float _535 = _533.x;
    float _560 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _564 = inversesqrt(dot(vec3(_261, _262, _263), vec3(_261, _262, _263)));
    float _565 = _261 * _564;
    float _566 = _262 * _564;
    float _567 = _263 * _564;
    float _573 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _574 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _583 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_573 * cbSceneParam._m0[86u].x, _574 * cbSceneParam._m0[86u].y));
    float _586 = _583.x * TEXCOORD_4.z;
    float _587 = (-0.0) - _565;
    float _588 = (-0.0) - _566;
    float _589 = (-0.0) - _567;
    float _611 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _615 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _619 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _752;
    float _754;
    float _755;
    float _756;
    float _757;
    float _758;
    float _759;
    float _760;
    float _761;
    float _762;
    float _763;
    float _764;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _675 = (cbModelParam._m0[37u].x * ((((fma(_619, cbModelParam._m0[26u].z, fma(_615, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _611)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _677 = (cbModelParam._m0[37u].y * ((((fma(_619, cbModelParam._m0[27u].z, fma(_615, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _611)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _678 = (((((fma(_619, cbModelParam._m0[28u].z, fma(_615, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _611)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _681 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_675, _677, _678), 0.0);
        vec4 _688 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_675, _677, _678), 0.0);
        vec4 _695 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_675, _677, _678), 0.0);
        vec4 _702 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_675, _677, _678), 0.0);
        float _715 = exp2((_681.w + (-0.5)) * 20.0) * 2.0;
        float _725 = exp2((_688.w + (-0.5)) * 20.0) * 2.0;
        float _735 = exp2((_695.w + (-0.5)) * 20.0) * 2.0;
        float _745 = exp2((_702.w + (-0.5)) * 20.0) * 2.0;
        float _746 = _745 * (_702.x + (-0.5));
        float _747 = _745 * (_702.y + (-0.5));
        float _748 = _745 * (_702.z + (-0.5));
        _752 = _715 * (_681.z + (-0.5));
        _754 = _715 * (_681.y + (-0.5));
        _755 = _715 * (_681.x + (-0.5));
        _756 = _725 * (_688.z + (-0.5));
        _757 = _725 * (_688.y + (-0.5));
        _758 = _725 * (_688.x + (-0.5));
        _759 = _735 * (_695.z + (-0.5));
        _760 = _735 * (_695.y + (-0.5));
        _761 = _735 * (_695.x + (-0.5));
        _762 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
        _763 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
        _764 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    }
    else
    {
        _752 = _753;
        _754 = _753;
        _755 = _753;
        _756 = _753;
        _757 = _753;
        _758 = _753;
        _759 = _753;
        _760 = _753;
        _761 = _753;
        _762 = _753;
        _763 = _753;
        _764 = _753;
    }
    float _892;
    float _893;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _818 = (cbModelParam._m0[38u].x * ((((fma(_619, cbModelParam._m0[30u].z, fma(_615, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _611)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _819 = (cbModelParam._m0[38u].y * ((((fma(_619, cbModelParam._m0[31u].z, fma(_615, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _611)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _820 = (((((fma(_619, cbModelParam._m0[32u].z, fma(_615, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _611)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _822 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_818, _819, _820), 0.0);
        vec4 _829 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_818, _819, _820), 0.0);
        vec4 _836 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_818, _819, _820), 0.0);
        vec4 _843 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_818, _819, _820), 0.0);
        float _855 = exp2((_822.w + (-0.5)) * 20.0) * 2.0;
        float _865 = exp2((_829.w + (-0.5)) * 20.0) * 2.0;
        float _875 = exp2((_836.w + (-0.5)) * 20.0) * 2.0;
        float _885 = exp2((_843.w + (-0.5)) * 20.0) * 2.0;
        float _886 = _885 * (_843.x + (-0.5));
        float _887 = _885 * (_843.y + (-0.5));
        float _888 = _885 * (_843.z + (-0.5));
        _892 = _855 * (_822.z + (-0.5));
        _893 = _855 * (_822.y + (-0.5));
        _894 = _855 * (_822.x + (-0.5));
        _895 = _865 * (_829.z + (-0.5));
        _896 = _865 * (_829.y + (-0.5));
        _897 = _865 * (_829.x + (-0.5));
        _898 = _875 * (_836.z + (-0.5));
        _899 = _875 * (_836.y + (-0.5));
        _900 = _875 * (_836.x + (-0.5));
        _901 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
        _902 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        _903 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
    }
    else
    {
        _892 = _753;
        _893 = _753;
        _894 = _753;
        _895 = _753;
        _896 = _753;
        _897 = _753;
        _898 = _753;
        _899 = _753;
        _900 = _753;
        _901 = _753;
        _902 = _753;
        _903 = _753;
    }
    float _918 = _565 * (-0.5);
    float _919 = _566 * (-0.5);
    float _920 = _567 * (-0.5);
    float _921 = dot(vec4(_918, _919, _920, 1.0), vec4(_894, _897, _900, _903));
    float _924 = dot(vec4(_918, _919, _920, 1.0), vec4(_893, _896, _899, _902));
    float _927 = dot(vec4(_918, _919, _920, 1.0), vec4(_892, _895, _898, _901));
    float _962;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _934 = dot(vec4(_918, _919, _920, 1.0), vec4(_752, _756, _759, _762));
        float _938 = dot(vec4(_918, _919, _920, 1.0), vec4(_754, _757, _760, _763));
        float _942 = dot(vec4(_918, _919, _920, 1.0), vec4(_755, _758, _761, _764));
        float _949 = dot(vec4(cbModelParam._m0[39u]), vec4(_918, _919, _920, 1.0));
        _962 = dot(vec3(isnan(0.0) ? _942 : (isnan(_942) ? 0.0 : max(_942, 0.0)), isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0)), isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_949) ? 0.0 : (isnan(0.0) ? _949 : max(0.0, _949))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _962 = 1.0;
    }
    float _973;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _964 = dot(vec4(cbModelParam._m0[40u]), vec4(_918, _919, _920, 1.0));
        _973 = dot(vec3(isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0)), isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0)), isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_964) ? 0.0 : (isnan(0.0) ? _964 : max(0.0, _964))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _973 = 1.0;
    }
    float _977 = (_973 * cbModelParam._m0[1u].x) + (_962 * (1.0 - cbModelParam._m0[1u].x));
    float _983 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1067;
    float _1069;
    float _1071;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1034 = fma(_619, cbModelParam._m0[13u].z, fma(_615, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _611)) + cbModelParam._m0[13u].w;
        float _1038 = fma(_619, cbModelParam._m0[14u].z, fma(_615, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _611)) + cbModelParam._m0[14u].w;
        float _1042 = fma(_619, cbModelParam._m0[15u].z, fma(_615, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _611)) + cbModelParam._m0[15u].w;
        float _1045 = fma(_589, cbModelParam._m0[13u].z, fma(_588, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _587));
        float _1048 = fma(_589, cbModelParam._m0[14u].z, fma(_588, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _587));
        float _1051 = fma(_589, cbModelParam._m0[15u].z, fma(_588, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _587));
        float _1077;
        if (_1045 > 0.0)
        {
            _1077 = abs((1.0 - _1034) / _1045);
        }
        else
        {
            float frontier_phi_38_36_ladder;
            if (_1045 < 0.0)
            {
                frontier_phi_38_36_ladder = abs((_1034 + 1.0) / _1045);
            }
            else
            {
                frontier_phi_38_36_ladder = 5000.0;
            }
            _1077 = frontier_phi_38_36_ladder;
        }
        float _1375;
        if (_1048 > 0.0)
        {
            _1375 = abs((1.0 - _1038) / _1048);
        }
        else
        {
            float frontier_phi_47_43_ladder;
            if (_1048 < 0.0)
            {
                frontier_phi_47_43_ladder = abs((_1038 + 1.0) / _1048);
            }
            else
            {
                frontier_phi_47_43_ladder = 5000.0;
            }
            _1375 = frontier_phi_47_43_ladder;
        }
        float _1671;
        if (_1051 > 0.0)
        {
            _1671 = abs((1.0 - _1042) / _1051);
        }
        else
        {
            float frontier_phi_61_54_ladder;
            if (_1051 < 0.0)
            {
                frontier_phi_61_54_ladder = abs((_1042 + 1.0) / _1051);
            }
            else
            {
                frontier_phi_61_54_ladder = 5000.0;
            }
            _1671 = frontier_phi_61_54_ladder;
        }
        float _1673 = isnan(_1375) ? _1077 : (isnan(_1077) ? _1375 : min(_1077, _1375));
        float _1674 = isnan(_1671) ? _1673 : (isnan(_1673) ? _1671 : min(_1673, _1671));
        float _1678 = (_1674 * _1045) + _1034;
        float _1679 = (_1674 * _1048) + _1038;
        float _1680 = (_1674 * _1051) + _1042;
        float _1681 = _1674 * 9.9999997473787516355514526367188e-05;
        float _1682 = (-1.0) - _1681;
        float _1684 = _1681 + 1.0;
        float frontier_phi_37_61_ladder;
        float frontier_phi_37_61_ladder_1;
        float frontier_phi_37_61_ladder_2;
        if ((_1680 > _1684) || ((_1680 < _1682) || ((_1679 > _1684) || ((_1679 < _1682) || ((_1678 < _1682) || (_1678 > _1684))))))
        {
            frontier_phi_37_61_ladder = 0.0;
            frontier_phi_37_61_ladder_1 = 0.0;
            frontier_phi_37_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1791 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1680, cbModelParam._m0[9u].z, fma(_1679, cbModelParam._m0[9u].y, _1678 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1680, cbModelParam._m0[10u].z, fma(_1679, cbModelParam._m0[10u].y, _1678 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1680, cbModelParam._m0[11u].z, fma(_1679, cbModelParam._m0[11u].y, _1678 * cbModelParam._m0[11u].x))), _983);
            frontier_phi_37_61_ladder = _1791.z * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_1 = _1791.y * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_2 = _1791.x * cbModelParam._m0[1u].y;
        }
        _1067 = frontier_phi_37_61_ladder_2;
        _1069 = frontier_phi_37_61_ladder_1;
        _1071 = frontier_phi_37_61_ladder;
    }
    else
    {
        vec4 _1055 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_587, _588, _589), _983);
        _1067 = _1055.x * cbModelParam._m0[1u].y;
        _1069 = _1055.y * cbModelParam._m0[1u].y;
        _1071 = _1055.z * cbModelParam._m0[1u].y;
    }
    float _1074 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1162;
    float _1164;
    float _1166;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1126 = fma(_619, cbModelParam._m0[21u].z, fma(_615, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _611)) + cbModelParam._m0[21u].w;
        float _1130 = fma(_619, cbModelParam._m0[22u].z, fma(_615, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _611)) + cbModelParam._m0[22u].w;
        float _1134 = fma(_619, cbModelParam._m0[23u].z, fma(_615, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _611)) + cbModelParam._m0[23u].w;
        float _1137 = fma(_589, cbModelParam._m0[21u].z, fma(_588, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _587));
        float _1140 = fma(_589, cbModelParam._m0[22u].z, fma(_588, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _587));
        float _1143 = fma(_589, cbModelParam._m0[23u].z, fma(_588, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _587));
        float _1380;
        if (_1137 > 0.0)
        {
            _1380 = abs((1.0 - _1126) / _1137);
        }
        else
        {
            float frontier_phi_49_45_ladder;
            if (_1137 < 0.0)
            {
                frontier_phi_49_45_ladder = abs((_1126 + 1.0) / _1137);
            }
            else
            {
                frontier_phi_49_45_ladder = 5000.0;
            }
            _1380 = frontier_phi_49_45_ladder;
        }
        float _1697;
        if (_1140 > 0.0)
        {
            _1697 = abs((1.0 - _1130) / _1140);
        }
        else
        {
            float frontier_phi_63_56_ladder;
            if (_1140 < 0.0)
            {
                frontier_phi_63_56_ladder = abs((_1130 + 1.0) / _1140);
            }
            else
            {
                frontier_phi_63_56_ladder = 5000.0;
            }
            _1697 = frontier_phi_63_56_ladder;
        }
        float _1848;
        if (_1143 > 0.0)
        {
            _1848 = abs((1.0 - _1134) / _1143);
        }
        else
        {
            float frontier_phi_77_72_ladder;
            if (_1143 < 0.0)
            {
                frontier_phi_77_72_ladder = abs((_1134 + 1.0) / _1143);
            }
            else
            {
                frontier_phi_77_72_ladder = 5000.0;
            }
            _1848 = frontier_phi_77_72_ladder;
        }
        float _1850 = isnan(_1697) ? _1380 : (isnan(_1380) ? _1697 : min(_1380, _1697));
        float _1851 = isnan(_1848) ? _1850 : (isnan(_1850) ? _1848 : min(_1850, _1848));
        float _1855 = (_1851 * _1137) + _1126;
        float _1856 = (_1851 * _1140) + _1130;
        float _1857 = (_1851 * _1143) + _1134;
        float _1858 = _1851 * 9.9999997473787516355514526367188e-05;
        float _1859 = (-1.0) - _1858;
        float _1861 = _1858 + 1.0;
        float frontier_phi_46_77_ladder;
        float frontier_phi_46_77_ladder_1;
        float frontier_phi_46_77_ladder_2;
        if ((_1857 > _1861) || ((_1857 < _1859) || ((_1856 > _1861) || ((_1856 < _1859) || ((_1855 < _1859) || (_1855 > _1861))))))
        {
            frontier_phi_46_77_ladder = 0.0;
            frontier_phi_46_77_ladder_1 = 0.0;
            frontier_phi_46_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2017 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1857, cbModelParam._m0[17u].z, fma(_1856, cbModelParam._m0[17u].y, _1855 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1857, cbModelParam._m0[18u].z, fma(_1856, cbModelParam._m0[18u].y, _1855 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1857, cbModelParam._m0[19u].z, fma(_1856, cbModelParam._m0[19u].y, _1855 * cbModelParam._m0[19u].x))), _1074);
            frontier_phi_46_77_ladder = _2017.z * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_1 = _2017.x * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_2 = _2017.y * cbModelParam._m0[1u].z;
        }
        _1162 = frontier_phi_46_77_ladder_1;
        _1164 = frontier_phi_46_77_ladder_2;
        _1166 = frontier_phi_46_77_ladder;
    }
    else
    {
        vec4 _1146 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_587, _588, _589), _1074);
        _1162 = _1146.x * cbModelParam._m0[1u].z;
        _1164 = _1146.y * cbModelParam._m0[1u].z;
        _1166 = _1146.z * cbModelParam._m0[1u].z;
    }
    float _1178 = _586 * 0.01200000010430812835693359375;
    float _1180 = _1178 * ((cbModelParam._m0[1u].w * (_1162 - _1067)) + _1067);
    float _1181 = _1178 * ((cbModelParam._m0[1u].w * (_1164 - _1069)) + _1069);
    float _1182 = _1178 * ((cbModelParam._m0[1u].w * (_1166 - _1071)) + _1071);
    float _1203 = fma(_1182, cbSceneParam._m0[89u].z, fma(_1181, cbSceneParam._m0[89u].y, _1180 * cbSceneParam._m0[89u].x));
    float _1206 = fma(_1182, cbSceneParam._m0[90u].z, fma(_1181, cbSceneParam._m0[90u].y, _1180 * cbSceneParam._m0[90u].x));
    float _1209 = fma(_1182, cbSceneParam._m0[91u].z, fma(_1181, cbSceneParam._m0[91u].y, _1180 * cbSceneParam._m0[91u].x));
    vec4 _1217 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_573, _574));
    float _1219 = _1217.w;
    uint _1235 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1239 = floatBitsToUint(cbInstanceData._m0[_1235 + 5u]);
    uint _1241 = _1239.x * 14u;
    uint _1242 = _1241 + 13u;
    float _1247 = _586 + (-1.0);
    float _1250 = (cbLight._m0[_1242].x * _1247) + 1.0;
    float _1251 = (cbLight._m0[_1242].y * _1247) + 1.0;
    uint _1252 = _1241 + 8u;
    float _1263 = cbLight._m0[_1241].x + _565;
    float _1264 = cbLight._m0[_1241].y + _566;
    float _1265 = cbLight._m0[_1241].z + _567;
    float _1269 = inversesqrt(dot(vec3(_1263, _1264, _1265), vec3(_1263, _1264, _1265)));
    float _1273 = dot(vec3(0.0), vec3(cbLight._m0[_1241].xyz));
    float _2535 = isnan(0.0) ? _1273 : (isnan(_1273) ? 0.0 : max(_1273, 0.0));
    float _1276 = isnan(1.0) ? _2535 : (isnan(_2535) ? 1.0 : min(_2535, 1.0));
    float _1277 = dot(vec3(0.0), vec3(_565, _566, _567));
    float _2546 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
    float _1280 = isnan(1.0) ? _2546 : (isnan(_2546) ? 1.0 : min(_2546, 1.0));
    float _1281 = dot(vec3(cbLight._m0[_1241].xyz), vec3(_1263 * _1269, _1264 * _1269, _1265 * _1269));
    float _2557 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
    float _1292 = (exp2(log2(1.0 - (isnan(1.0) ? _2557 : (isnan(_2557) ? 1.0 : min(_2557, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1298 = (0.5 / ((_1276 + 9.9999999392252902907785028219223e-09) + _1280)) * _1276;
    float _2568 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
    float _1300 = (isnan(1.0) ? _2568 : (isnan(_2568) ? 1.0 : min(_2568, 1.0))) * 0.31831014156341552734375;
    float _1302 = isnan(1.0) ? _1250 : (isnan(_1250) ? 1.0 : min(_1250, 1.0));
    uint _1315 = _1241 + 9u;
    uint _1321 = _1241 | 1u;
    float _1327 = cbLight._m0[_1321].x + _565;
    float _1328 = cbLight._m0[_1321].y + _566;
    float _1329 = cbLight._m0[_1321].z + _567;
    float _1333 = inversesqrt(dot(vec3(_1327, _1328, _1329), vec3(_1327, _1328, _1329)));
    float _1337 = dot(vec3(0.0), vec3(cbLight._m0[_1321].xyz));
    float _2584 = isnan(0.0) ? _1337 : (isnan(_1337) ? 0.0 : max(_1337, 0.0));
    float _1340 = isnan(1.0) ? _2584 : (isnan(_2584) ? 1.0 : min(_2584, 1.0));
    float _1341 = dot(vec3(cbLight._m0[_1321].xyz), vec3(_1327 * _1333, _1328 * _1333, _1329 * _1333));
    float _2595 = isnan(0.0) ? _1341 : (isnan(_1341) ? 0.0 : max(_1341, 0.0));
    float _1350 = (exp2(log2(1.0 - (isnan(1.0) ? _2595 : (isnan(_2595) ? 1.0 : min(_2595, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1354 = (0.5 / ((_1340 + 9.9999999392252902907785028219223e-09) + _1280)) * _1340;
    float _2606 = isnan(0.0) ? _1354 : (isnan(_1354) ? 0.0 : max(_1354, 0.0));
    float _1356 = (isnan(1.0) ? _2606 : (isnan(_2606) ? 1.0 : min(_2606, 1.0))) * 0.31831014156341552734375;
    float _1357 = isnan(1.0) ? _1251 : (isnan(_1251) ? 1.0 : min(_1251, 1.0));
    float _1367 = (((_1350 * cbLight._m0[_1315].x) * _1356) * _1357) + ((((cbLight._m0[_1252].x * ((1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1219))) * _1292) * _1300) * _1302);
    float _1368 = (((_1350 * cbLight._m0[_1315].y) * _1356) * _1357) + ((((cbLight._m0[_1252].y * ((1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1219))) * _1292) * _1300) * _1302);
    float _1369 = (((_1350 * cbLight._m0[_1315].z) * _1356) * _1357) + ((((cbLight._m0[_1252].z * ((1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1219))) * _1292) * _1300) * _1302);
    float _1486;
    float _1488;
    float _1490;
    if (_1239.y == 0u)
    {
        float _1425 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1426 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1425;
        float _1427 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1425;
        float _1428 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1425;
        uvec4 _1440 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1441 = _1440.x;
        uint _1452 = uint((float(_1440.y) * floor(float(uint(cbSceneParam._m0[85u].y * _574) / _1441))) + floor(float(uint(cbSceneParam._m0[85u].x * _573) / _1441)));
        float _1462 = (log2(_1428 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1463 = isnan(0.0) ? _1462 : (isnan(_1462) ? 0.0 : max(_1462, 0.0));
        uint _1466 = uint(isnan(14.0) ? _1463 : (isnan(_1463) ? 14.0 : min(_1463, 14.0)));
        uvec4 _1471 = texelFetch(g_lightClusterGridBuffer, int(((_1466 << 2u) + (_1452 << 6u)) >> 2u));
        uint _1472 = _1471.x;
        uint _1473 = _1440.z;
        float _1563;
        float _1565;
        float _1567;
        if (((((1u << ((_1473 >> 4u) & 15u)) + 4294967295u) & _1472) == 0u) || ((_1473 & 240u) == 0u))
        {
            _1563 = 0.0;
            _1565 = 0.0;
            _1567 = 0.0;
        }
        else
        {
            float _1564;
            float _1566;
            float _1568;
            float _1722 = 0.0;
            float _1723 = 0.0;
            float _1724 = 0.0;
            uint _1725 = 0u;
            uint _1734;
            bool _1735;
            for (;;)
            {
                _1734 = texelFetch(g_lightClassification, int((((_1466 << 5u) + (_1452 << 9u)) + (_1725 << 2u)) >> 2u)).x;
                _1735 = _1734 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                if (_1735)
                {
                    frontier_phi_74_pred = _1724;
                    frontier_phi_74_pred_1 = _1723;
                    frontier_phi_74_pred_2 = _1722;
                }
                else
                {
                    float _1888;
                    float _1889;
                    float _1890;
                    uint _1891;
                    _1888 = _1722;
                    _1889 = _1723;
                    _1890 = _1724;
                    _1891 = _1734;
                    float _1800;
                    float _1801;
                    float _1802;
                    for (;;)
                    {
                        uint _1895 = uint(findLSB(_1891)) + (_1725 << 5u);
                        uint _1892 = (_1891 + 4294967295u) & _1891;
                        uint _1897 = _1895 * 48u;
                        vec4 _1911 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1897)).x, texelFetch(g_PointLightRenderingBuffer, int(_1897 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1897 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1897 + 3u)).x));
                        uint _1928 = (_1895 * 48u) + 8u;
                        vec3 _1939 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_1928)).x, texelFetch(g_PointLightRenderingBuffer, int(_1928 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1928 + 2u)).x));
                        float _1943 = _1911.x - _1426;
                        float _1944 = _1911.y - _1427;
                        float _1945 = _1911.z - _1428;
                        float _1946 = dot(vec3(_1943, _1944, _1945), vec3(_1943, _1944, _1945));
                        float _1949 = inversesqrt(_1946);
                        float _1958 = 1.0 - (_1946 * _1911.w);
                        float _2632 = isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0));
                        float _1960 = sqrt(_1946) * uintBitsToFloat(uvec4(_1918, _1919, _1920, texelFetch(g_PointLightRenderingBuffer, int(((_1895 * 48u) + 4u) + 3u)).x)).w;
                        float _1963 = 1.39999997615814208984375 / (_1960 + 1.39999997615814208984375);
                        float _1964 = _1963 * _1963;
                        float _1967 = ((1.0 - _1964) * dot(vec3(0.0), vec3(_1949 * _1943, _1949 * _1944, _1949 * _1945))) + _1964;
                        float _1969 = (-0.0) - _1426;
                        float _1970 = (-0.0) - _1427;
                        float _1971 = (-0.0) - _1428;
                        float _1975 = inversesqrt(dot(vec3(_1969, _1970, _1971), vec3(_1969, _1970, _1971)));
                        float _1979 = dot(vec3(0.0), vec3(_1975 * _1969, _1975 * _1970, _1975 * _1971));
                        float _2643 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
                        float _2654 = isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0));
                        float _1983 = isnan(1.0) ? _2654 : (isnan(_2654) ? 1.0 : min(_2654, 1.0));
                        float _1987 = (0.5 / (((isnan(1.0) ? _2643 : (isnan(_2643) ? 1.0 : min(_2643, 1.0))) + 9.9999999392252902907785028219223e-09) + _1983)) * _1983;
                        float _2665 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
                        float _1996 = (((isnan(1.0) ? _2665 : (isnan(_2665) ? 1.0 : min(_2665, 1.0))) * 3.1415927410125732421875) / (((_1960 * _1960) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2632 : (isnan(_2632) ? 1.0 : min(_2632, 1.0)));
                        _1800 = (_1996 * _1939.x) + _1888;
                        _1801 = (_1996 * _1939.y) + _1889;
                        _1802 = (_1996 * _1939.z) + _1890;
                        if (_1892 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _1888 = _1800;
                            _1889 = _1801;
                            _1890 = _1802;
                            _1891 = _1892;
                        }
                    }
                    frontier_phi_74_pred = _1802;
                    frontier_phi_74_pred_1 = _1801;
                    frontier_phi_74_pred_2 = _1800;
                }
                _1568 = frontier_phi_74_pred;
                _1566 = frontier_phi_74_pred_1;
                _1564 = frontier_phi_74_pred_2;
                uint _1726 = _1725 + 1u;
                if (_1726 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1722 = _1564;
                    _1723 = _1566;
                    _1724 = _1568;
                    _1725 = _1726;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1563 = _1564;
            _1565 = _1566;
            _1567 = _1568;
        }
        uvec4 _1571 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1572 = _1571.z;
        uint _1574 = (_1572 >> 8u) & 15u;
        float _1702;
        float _1704;
        float _1706;
        if (((4294967295u << _1574) & _1472) == 0u)
        {
            _1702 = _1563;
            _1704 = _1565;
            _1706 = _1567;
        }
        else
        {
            float _1718 = inversesqrt(dot(vec3(_1426, _1427, _1428), vec3(_1426, _1427, _1428)));
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            if (_1574 < ((_1572 >> 12u) & 15u))
            {
                float _1703;
                float _1705;
                float _1707;
                float _1874 = _1563;
                float _1875 = _1565;
                float _1876 = _1567;
                uint _1877 = _1574;
                uint _1886;
                bool _1887;
                for (;;)
                {
                    _1886 = texelFetch(g_lightClassification, int((((_1466 << 5u) + (_1452 << 9u)) + (_1877 << 2u)) >> 2u)).x;
                    _1887 = _1886 == 0u;
                    float frontier_phi_83_pred;
                    float frontier_phi_83_pred_1;
                    float frontier_phi_83_pred_2;
                    if (_1887)
                    {
                        frontier_phi_83_pred = _1876;
                        frontier_phi_83_pred_1 = _1875;
                        frontier_phi_83_pred_2 = _1874;
                    }
                    else
                    {
                        float _2022;
                        float _2023;
                        float _2024;
                        float _2243;
                        float _2244;
                        float _2245;
                        float _2032 = _1874;
                        float _2033 = _1875;
                        float _2034 = _1876;
                        uint _2035 = _1886;
                        uint _2036;
                        uint _2046;
                        vec4 _2061;
                        float _2062;
                        vec3 _2074;
                        vec4 _2089;
                        vec4 _2104;
                        float _2150;
                        bool _2151;
                        for (;;)
                        {
                            _2046 = ((_1877 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2035));
                            _2036 = (_2035 + 4294967295u) & _2035;
                            uint _2048 = _2046 * 40u;
                            _2061 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2048)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2048 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2048 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2048 + 3u)).x));
                            _2062 = _2061.w;
                            uint _2064 = (_2046 * 40u) + 8u;
                            _2074 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2064)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2064 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2064 + 2u)).x));
                            uint _2076 = (_2046 * 40u) + 16u;
                            _2089 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2076)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2076 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2076 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2076 + 3u)).x));
                            uint _2091 = (_2046 * 40u) + 20u;
                            _2104 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2091)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2091 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2091 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2091 + 3u)).x));
                            uint _2106 = (_2046 * 40u) + 24u;
                            vec4 _2119 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2106)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2106 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2106 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2106 + 3u)).x));
                            uint _2125 = (_2046 * 40u) + 28u;
                            vec4 _2138 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2125)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2125 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2125 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2125 + 3u)).x));
                            _2150 = fma(_1428, _2138.z, fma(_1427, _2138.y, _2138.x * _1426)) + _2138.w;
                            _2151 = !((fma(_1428, _2119.z, fma(_1427, _2119.y, _2119.x * _1426)) + _2119.w) <= 0.0);
                            float frontier_phi_89_pred;
                            float frontier_phi_89_pred_1;
                            float frontier_phi_89_pred_2;
                            if (_2151)
                            {
                                float _2185 = _2061.x - _1426;
                                float _2186 = _2061.y - _1427;
                                float _2187 = _2061.z - _1428;
                                float _2188 = dot(vec3(_2185, _2186, _2187), vec3(_2185, _2186, _2187));
                                float _2191 = inversesqrt(_2188);
                                float _2198 = 1.0 - (_2188 / (_2062 * _2062));
                                float _2676 = isnan(0.0) ? _2198 : (isnan(_2198) ? 0.0 : max(_2198, 0.0));
                                float _2200 = sqrt(_2188) * uintBitsToFloat(uvec4(_2154, _2155, _2156, texelFetch(g_SpotLightRenderingBuffer, int(((_2046 * 40u) + 4u) + 3u)).x)).w;
                                float _2202 = 1.39999997615814208984375 / (_2200 + 1.39999997615814208984375);
                                float _2203 = _2202 * _2202;
                                float _2206 = (fma(_1428, _2089.z, fma(_1427, _2089.y, _2089.x * _1426)) + _2089.w) / _2150;
                                float _2207 = (fma(_1428, _2104.z, fma(_1427, _2104.y, _2104.x * _1426)) + _2104.w) / _2150;
                                float _2211 = 1.0 - dot(vec2(_2206, _2207), vec2(_2206, _2207));
                                float _2687 = isnan(0.0) ? _2211 : (isnan(_2211) ? 0.0 : max(_2211, 0.0));
                                float _2219 = dot(vec3(0.0), vec3((-0.0) - (_1426 * _1718), (-0.0) - (_1427 * _1718), (-0.0) - (_1428 * _1718)));
                                float _2698 = isnan(0.0) ? _2219 : (isnan(_2219) ? 0.0 : max(_2219, 0.0));
                                float _2227 = ((1.0 - _2203) * dot(vec3(0.0), vec3(_2191 * _2185, _2191 * _2186, _2191 * _2187))) + _2203;
                                float _2709 = isnan(0.0) ? _2227 : (isnan(_2227) ? 0.0 : max(_2227, 0.0));
                                float _2228 = isnan(1.0) ? _2709 : (isnan(_2709) ? 1.0 : min(_2709, 1.0));
                                float _2232 = (0.5 / (((isnan(1.0) ? _2698 : (isnan(_2698) ? 1.0 : min(_2698, 1.0))) + 9.9999999392252902907785028219223e-09) + _2228)) * _2228;
                                float _2720 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
                                float _2239 = ((isnan(1.0) ? _2687 : (isnan(_2687) ? 1.0 : min(_2687, 1.0))) * (isnan(1.0) ? _2676 : (isnan(_2676) ? 1.0 : min(_2676, 1.0)))) * (((isnan(1.0) ? _2720 : (isnan(_2720) ? 1.0 : min(_2720, 1.0))) * 3.1415927410125732421875) / (((_2200 * _2200) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_89_pred = _2239 * _2074.x;
                                frontier_phi_89_pred_1 = _2239 * _2074.z;
                                frontier_phi_89_pred_2 = _2239 * _2074.y;
                            }
                            else
                            {
                                frontier_phi_89_pred = 0.0;
                                frontier_phi_89_pred_1 = 0.0;
                                frontier_phi_89_pred_2 = 0.0;
                            }
                            _2243 = frontier_phi_89_pred;
                            _2245 = frontier_phi_89_pred_1;
                            _2244 = frontier_phi_89_pred_2;
                            _2022 = _2243 + _2032;
                            _2023 = _2244 + _2033;
                            _2024 = _2245 + _2034;
                            if (_2036 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2032 = _2022;
                                _2033 = _2023;
                                _2034 = _2024;
                                _2035 = _2036;
                                continue;
                            }
                        }
                        frontier_phi_83_pred = _2024;
                        frontier_phi_83_pred_1 = _2023;
                        frontier_phi_83_pred_2 = _2022;
                    }
                    _1707 = frontier_phi_83_pred;
                    _1705 = frontier_phi_83_pred_1;
                    _1703 = frontier_phi_83_pred_2;
                    uint _1878 = _1877 + 1u;
                    if (_1878 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _1874 = _1703;
                        _1875 = _1705;
                        _1876 = _1707;
                        _1877 = _1878;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _1705;
                frontier_phi_65_66_ladder_1 = _1703;
                frontier_phi_65_66_ladder_2 = _1707;
            }
            else
            {
                frontier_phi_65_66_ladder = _1565;
                frontier_phi_65_66_ladder_1 = _1563;
                frontier_phi_65_66_ladder_2 = _1567;
            }
            _1702 = frontier_phi_65_66_ladder_1;
            _1704 = frontier_phi_65_66_ladder;
            _1706 = frontier_phi_65_66_ladder_2;
        }
        float _1711 = isnan(1.0) ? _586 : (isnan(_586) ? 1.0 : min(_586, 1.0));
        _1486 = ((_1702 * 0.039999999105930328369140625) * _1711) + _1367;
        _1488 = ((_1704 * 0.039999999105930328369140625) * _1711) + _1368;
        _1490 = ((_1706 * 0.039999999105930328369140625) * _1711) + _1369;
    }
    else
    {
        _1486 = _1367;
        _1488 = _1368;
        _1490 = _1369;
    }
    uint _1497 = (_1235 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1512 = (cbInstanceData._m0[_1497].x * ((_535 * ((_485.x * cbMtdParam._m0[10u].x) - _414)) + _414)) + ((_1486 + ((isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0))) * _977)) * cbPerFrame._m0[3u].x);
    float _1513 = (cbInstanceData._m0[_1497].y * ((_535 * ((_485.y * cbMtdParam._m0[10u].y) - _415)) + _415)) + ((_1488 + ((isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0))) * _977)) * cbPerFrame._m0[3u].x);
    float _1514 = (cbInstanceData._m0[_1497].z * ((_535 * ((_485.z * cbMtdParam._m0[10u].z) - _416)) + _416)) + ((_1490 + ((isnan(0.0) ? _1209 : (isnan(_1209) ? 0.0 : max(_1209, 0.0))) * _977)) * cbPerFrame._m0[3u].x);
    uint _1518 = _1235 + 6u;
    float _1526 = _573 / cbSceneParam._m0[86u].x;
    float _1527 = _574 / cbSceneParam._m0[86u].y;
    vec4 _1541 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1526, _1527, (log2((isnan(cbSceneParam._m0[77u].w) ? _560 : (isnan(_560) ? cbSceneParam._m0[77u].w : min(_560, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1543 = _1541.x;
    float _1544 = _1541.y;
    float _1545 = _1541.z;
    float _1546 = _1541.w;
    float _1620;
    float _1622;
    float _1624;
    float _1626;
    if (_560 > cbSceneParam._m0[78u].w)
    {
        float _1582 = isnan(_560) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _560 : min(cbSceneParam._m0[80u].w, _560));
        float _1583 = _1582 / _560;
        float _1594 = _1583 * _261;
        float _1595 = _262 * _1583;
        float _1596 = (-0.0) - _1595;
        float _1597 = _1583 * _263;
        float _1599 = (cbSceneParam._m0[77u].w * _1596) / _1582;
        float _1600 = _1599 + cbSceneParam._m0[79u].w;
        float _1601 = cbSceneParam._m0[79u].w - _1595;
        float _1607 = sqrt(((_1594 * _1594) + (_1595 * _1595)) + (_1597 * _1597));
        float _1610 = (1.0 - (cbSceneParam._m0[77u].w / _1582)) * _1607;
        float _1616 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1618 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1810;
        if (abs((_1596 - _1599) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1810 = ((((_1600 > 0.0) ? exp2(_1616 * _1600) : (2.0 - exp2(_1618 * _1600))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1610;
        }
        else
        {
            float _1748 = 1.0 / cbSceneParam._m0[80u].x;
            float _1749 = isnan(_1601) ? _1600 : (isnan(_1600) ? _1601 : max(_1600, _1601));
            float _1750 = isnan(_1601) ? _1600 : (isnan(_1600) ? _1601 : min(_1600, _1601));
            float _1759 = isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : min(_1749, 0.0));
            float _1760 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : min(_1750, 0.0));
            _1810 = ((abs(_1607 / _1596) * cbSceneParam._m0[80u].y) * ((((_1759 - _1760) * 2.0) - ((exp2(_1616 * (isnan(0.0) ? _1749 : (isnan(_1749) ? 0.0 : max(_1749, 0.0)))) - exp2(_1616 * (isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0))))) * _1748)) - ((exp2(_1618 * _1759) - exp2(_1618 * _1760)) * _1748))) + (_1610 * cbSceneParam._m0[80u].z);
        }
        vec4 _1812 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1526, _1527, 1.0), 0.0);
        float _1821 = exp2((_1810 * (-1.44269502162933349609375)) * (1.0 - _1812.w));
        float _1822 = log2(_1821);
        float _1838 = log2(_1546);
        _1620 = (exp2(_1838 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1822 * cbSceneParam._m0[78u].x)) * _1812.x) / cbSceneParam._m0[78u].x)) + _1543;
        _1622 = (exp2(_1838 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1822 * cbSceneParam._m0[78u].y)) * _1812.y) / cbSceneParam._m0[78u].y)) + _1544;
        _1624 = (exp2(_1838 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1822 * cbSceneParam._m0[78u].z)) * _1812.z) / cbSceneParam._m0[78u].z)) + _1545;
        _1626 = _1821 * _1546;
    }
    else
    {
        _1620 = _1543;
        _1622 = _1544;
        _1624 = _1545;
        _1626 = _1546;
    }
    float _1638 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1639 = _1638 == 3.0;
    float _1641 = log2(_1626);
    float _1648 = exp2(_1641 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0)));
    float _1649 = exp2(_1641 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _1513 : (isnan(_1513) ? 0.0 : max(_1513, 0.0)));
    float _1650 = exp2(_1641 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _1514 : (isnan(_1514) ? 0.0 : max(_1514, 0.0)));
    float _1659 = (_1638 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _1659 * (_1639 ? _1648 : (_1648 + (cbSceneParam._m0[72u].w * _1620)));
    SV_Target.y = _1659 * (_1639 ? _1649 : (_1649 + (cbSceneParam._m0[72u].w * _1622)));
    SV_Target.z = _1659 * (_1639 ? _1650 : (_1650 + (cbSceneParam._m0[72u].w * _1624)));
    SV_Target.w = cbInstanceData._m0[_1518].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1518].w;
}


