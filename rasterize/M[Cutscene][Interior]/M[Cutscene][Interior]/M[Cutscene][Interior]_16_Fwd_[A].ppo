#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_8;
layout(set = 0, binding = 11) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1315;
float _3474;
float _3475;
float _3476;
float _3477;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _201 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _202 = _201 * _194;
    float _203 = _201 * _195;
    float _204 = _201 * _196;
    float _208 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _209 = _208 * NORMAL.x;
    float _210 = _208 * NORMAL.y;
    float _211 = _208 * NORMAL.z;
    float _215 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _216 = _215 * TANGENT.x;
    float _217 = _215 * TANGENT.y;
    float _218 = _215 * TANGENT.z;
    float _263 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _273 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _263);
    float _274 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _263);
    float _275 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _263);
    vec4 _288 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _291 = _288.x;
    vec4 _309 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _326 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _291) + cbMtdParam._m0[12u].x) * _309.x;
    float _328 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _291) + cbMtdParam._m0[12u].y) * _309.y;
    float _330 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _291) + cbMtdParam._m0[12u].z) * _309.z;
    vec4 _348 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _384 = cbMtdParam._m0[24u].x + _273;
    float _385 = cbMtdParam._m0[24u].y + _274;
    float _386 = cbMtdParam._m0[24u].z + _275;
    float _400 = (-0.0) - dot(vec3(_384, _385, _386), vec3(_202, _203, _204));
    float _401 = (-0.0) - dot(vec3(_384, _385, _386), vec3(_216, _217, _218));
    float _402 = (-0.0) - dot(vec3(_384, _385, _386), vec3((-0.0) - _209, (-0.0) - _210, (-0.0) - _211));
    float _406 = inversesqrt(dot(vec3(_400, _401, _402), vec3(_400, _401, _402)));
    float _409 = _406 * _402;
    float _410 = (_406 * _400) + ((cbMtdParam._m0[22u].x * _291) * ((_348.x * 2.0) + (-1.0)));
    float _411 = (_406 * _401) + ((cbMtdParam._m0[22u].y * _291) * ((_348.y * 2.0) + (-1.0)));
    float _412 = _410 * cbMtdParam._m0[20u].w;
    float _413 = _411 * cbMtdParam._m0[20u].z;
    float _414 = fract(TEXCOORD.x);
    float _415 = fract(TEXCOORD.y);
    float _421;
    if (_412 > 0.0)
    {
        _421 = (1.0 - _414) / _412;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_412 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _414) / _412;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _421 = frontier_phi_3_2_ladder;
    }
    float _429;
    if (_413 > 0.0)
    {
        _429 = (1.0 - _415) / _413;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_413 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _415) / _413;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _429 = frontier_phi_7_6_ladder;
    }
    bool _431 = _409 > 0.0;
    float _433 = _431 ? (cbMtdParam._m0[16u].x / _409) : 5000.0;
    float _434 = isnan(_429) ? _421 : (isnan(_421) ? _429 : min(_421, _429));
    float _435 = isnan(_433) ? _434 : (isnan(_434) ? _433 : min(_434, _433));
    float _439 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _440 = _414 + (-0.5);
    float _443 = _415 + (-0.5);
    float _446 = ((_435 * _409) + _439) / _439;
    vec4 _471 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (((((_440 + (_435 * _412)) / _446) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (((((_443 + (_435 * _413)) / _446) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    float _484 = (_471.x * _291) * cbMtdParam._m0[9u].x;
    float _485 = (_471.y * _291) * cbMtdParam._m0[9u].y;
    float _486 = (_471.z * _291) * cbMtdParam._m0[9u].z;
    float _505 = _410 * cbMtdParam._m0[22u].w;
    float _506 = _411 * cbMtdParam._m0[22u].z;
    bool _507 = _505 > 0.0;
    float _512;
    if (_507)
    {
        _512 = (1.0 - _414) / _505;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_505 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _414) / _505;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _512 = frontier_phi_11_10_ladder;
    }
    bool _514 = _506 > 0.0;
    float _519;
    if (_514)
    {
        _519 = (1.0 - _415) / _506;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_506 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _415) / _506;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _519 = frontier_phi_15_14_ladder;
    }
    float _522 = _431 ? (cbMtdParam._m0[18u].x / _409) : 5000.0;
    float _523 = isnan(_519) ? _512 : (isnan(_512) ? _519 : min(_512, _519));
    float _524 = isnan(_522) ? _523 : (isnan(_523) ? _522 : min(_523, _522));
    float _528 = cbMtdParam._m0[19u].y * cbMtdParam._m0[18u].x;
    float _532 = ((_524 * _409) + _528) / _528;
    float _537 = cbMtdParam._m0[19u].x - cbMtdParam._m0[20u].x * trunc(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    float _539 = floor(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    vec4 _555 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_440 + (_524 * _505)) / _532) + 0.5) + _537) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_443 + (_524 * _506)) / _532) + 0.5) + _539) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[0u].w));
    float _570;
    if (_507)
    {
        _570 = (1.0 - _414) / _505;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_505 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _414) / _505;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _570 = frontier_phi_19_18_ladder;
    }
    float _576;
    if (_514)
    {
        _576 = (1.0 - _415) / _506;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_506 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _415) / _506;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _576 = frontier_phi_23_22_ladder;
    }
    float _578 = isnan(_576) ? _570 : (isnan(_570) ? _576 : min(_570, _576));
    float _579 = isnan(_522) ? _578 : (isnan(_578) ? _522 : min(_578, _522));
    float _586 = ((_579 * _409) + _528) / _528;
    vec4 _606 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_440 + (_579 * _505)) / _586) + 0.5) + _537) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_443 + (_579 * _506)) / _586) + 0.5) + _539) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[8u].w));
    float _608 = _606.x;
    float _618 = (((((cbMtdParam._m0[10u].x * _291) * _555.x) - _484) * _291) * _608) + _484;
    float _619 = (((((cbMtdParam._m0[10u].y * _291) * _555.y) - _485) * _291) * _608) + _485;
    float _620 = (((((cbMtdParam._m0[10u].z * _291) * _555.z) - _486) * _291) * _608) + _486;
    float _636 = _410 * cbMtdParam._m0[23u].y;
    float _637 = _411 * cbMtdParam._m0[23u].x;
    bool _638 = _636 > 0.0;
    float _643;
    if (_638)
    {
        _643 = (1.0 - _414) / _636;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_636 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _414) / _636;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _643 = frontier_phi_27_26_ladder;
    }
    bool _645 = _637 > 0.0;
    float _650;
    if (_645)
    {
        _650 = (1.0 - _415) / _637;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_637 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _415) / _637;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _650 = frontier_phi_31_30_ladder;
    }
    float _653 = _431 ? (cbMtdParam._m0[19u].w / _409) : 5000.0;
    float _654 = isnan(_650) ? _643 : (isnan(_643) ? _650 : min(_643, _650));
    float _655 = isnan(_653) ? _654 : (isnan(_654) ? _653 : min(_654, _653));
    float _659 = cbMtdParam._m0[19u].w * cbMtdParam._m0[16u].z;
    float _663 = ((_655 * _409) + _659) / _659;
    float _668 = cbMtdParam._m0[19u].z - cbMtdParam._m0[23u].z * trunc(cbMtdParam._m0[19u].z / cbMtdParam._m0[23u].z);
    float _670 = floor(cbMtdParam._m0[19u].z / cbMtdParam._m0[23u].z);
    vec4 _686 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * (((((_440 + (_655 * _636)) / _663) + 0.5) + _668) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * (((((_443 + (_655 * _637)) / _663) + 0.5) + _670) / cbMtdParam._m0[23u].w)) + cbTextureTilingScale._m0[9u].w));
    float _701;
    if (_638)
    {
        _701 = (1.0 - _414) / _636;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_636 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _414) / _636;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _701 = frontier_phi_35_34_ladder;
    }
    float _707;
    if (_645)
    {
        _707 = (1.0 - _415) / _637;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_637 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _415) / _637;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _707 = frontier_phi_39_38_ladder;
    }
    float _709 = isnan(_707) ? _701 : (isnan(_701) ? _707 : min(_701, _707));
    float _710 = isnan(_653) ? _709 : (isnan(_709) ? _653 : min(_709, _653));
    float _717 = ((_710 * _409) + _659) / _659;
    vec4 _737 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_440 + (_710 * _636)) / _717) + 0.5) + _668) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_443 + (_710 * _637)) / _717) + 0.5) + _670) / cbMtdParam._m0[23u].w)) + cbTextureTilingScale._m0[10u].w));
    float _739 = _737.x;
    float _749 = _291 * 0.1500000059604644775390625;
    float _760 = (_749 * ((_618 - _326) + (((((cbMtdParam._m0[14u].x * _291) * _686.x) - _618) * _291) * _739))) + _326;
    float _761 = (_749 * ((_619 - _328) + (((((cbMtdParam._m0[14u].y * _291) * _686.y) - _619) * _291) * _739))) + _328;
    float _762 = (_749 * ((_620 - _330) + (((((cbMtdParam._m0[14u].z * _291) * _686.z) - _620) * _291) * _739))) + _330;
    vec4 _775 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _779 = _775.z;
    float _782 = (_775.x * 2.0) + (-1.0);
    float _783 = (_775.y * 2.0) + (-1.0);
    float _784 = dot(vec2(_782, _783), vec2(_782, _783));
    float _3536 = isnan(0.0) ? _784 : (isnan(_784) ? 0.0 : max(_784, 0.0));
    float _789 = sqrt(1.0 - (isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0))));
    float _792 = fma(_789, _209, fma(_783, _216, _782 * _202));
    float _795 = fma(_789, _210, fma(_783, _217, _782 * _203));
    float _798 = fma(_789, _211, fma(_783, _218, _782 * _204));
    float _802 = inversesqrt(dot(vec3(_792, _795, _798), vec3(_792, _795, _798)));
    float _803 = _802 * _792;
    float _804 = _802 * _795;
    float _805 = _802 * _798;
    float _3547 = isnan(0.0) ? _779 : (isnan(_779) ? 0.0 : max(_779, 0.0));
    float _806 = isnan(1.0) ? _3547 : (isnan(_3547) ? 1.0 : min(_3547, 1.0));
    float _3558 = isnan(0.0) ? _760 : (isnan(_760) ? 0.0 : max(_760, 0.0));
    float _3569 = isnan(0.0) ? _761 : (isnan(_761) ? 0.0 : max(_761, 0.0));
    float _3580 = isnan(0.0) ? _762 : (isnan(_762) ? 0.0 : max(_762, 0.0));
    float _825 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _829 = inversesqrt(dot(vec3(_273, _274, _275), vec3(_273, _274, _275)));
    float _830 = _273 * _829;
    float _831 = _274 * _829;
    float _832 = _275 * _829;
    vec4 _837 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _839 = _837.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _996 = sqrt(((_273 * _273) + (_274 * _274)) + (_275 * _275));
        float _1002 = (cbMatDynParam._m0[5u].x * _996) + cbMatDynParam._m0[5u].y;
        float _3591 = isnan(0.0) ? _1002 : (isnan(_1002) ? 0.0 : max(_1002, 0.0));
        float _1003 = isnan(1.0) ? _3591 : (isnan(_3591) ? 1.0 : min(_3591, 1.0));
        float _1007 = (cbMatDynParam._m0[5u].z * _996) + cbMatDynParam._m0[5u].w;
        float _3602 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0))) - _1003)) + _1003) < ((_839 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _851 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _852 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _871 = fma(_805, cbSceneParam._m0[5u].z, fma(_804, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _803));
    float _874 = fma(_805, cbSceneParam._m0[6u].z, fma(_804, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _803));
    float _877 = fma(_805, cbSceneParam._m0[7u].z, fma(_804, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _803));
    uint _890 = uint(roundEven(NORMAL.w)) * 13u;
    uint _892 = _890 + 9u;
    uint _893 = _892 + uint(cbMatDynParam._m0[0u].w);
    float _899 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3558 : (isnan(_3558) ? 1.0 : min(_3558, 1.0)))) * cbInstanceData._m0[_893].x;
    float _900 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3569 : (isnan(_3569) ? 1.0 : min(_3569, 1.0)))) * cbInstanceData._m0[_893].y;
    float _901 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3580 : (isnan(_3580) ? 1.0 : min(_3580, 1.0)))) * cbInstanceData._m0[_893].z;
    float _3613 = isnan(0.0) ? _899 : (isnan(_899) ? 0.0 : max(_899, 0.0));
    float _902 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
    float _3624 = isnan(0.0) ? _900 : (isnan(_900) ? 0.0 : max(_900, 0.0));
    float _903 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
    float _3635 = isnan(0.0) ? _901 : (isnan(_901) ? 0.0 : max(_901, 0.0));
    float _904 = isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0));
    vec4 _913 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _851, cbSceneParam._m0[86u].y * _852));
    float _916 = _913.x * TEXCOORD_4.z;
    float _917 = dot(vec3(_803, _804, _805), vec3(_830, _831, _832));
    float _920 = _917 * 2.0;
    float _924 = (_920 * _803) - _830;
    float _925 = (_920 * _804) - _831;
    float _926 = (_920 * _805) - _832;
    float _930 = abs(dot(vec3(_830, _831, _832), vec3(_803, _804, _805)));
    float _3646 = isnan(0.0) ? _930 : (isnan(_930) ? 0.0 : max(_930, 0.0));
    float _932 = sqrt(_806);
    float _945 = exp2((_932 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_932 * 3.0));
    float _977 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _981 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _985 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1314;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    float _1323;
    float _1324;
    float _1325;
    float _1326;
    float _1327;
    float _1328;
    float _1329;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1041 = fma(_985, cbModelParam._m0[26u].z, fma(_981, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _977));
        float _1045 = fma(_985, cbModelParam._m0[27u].z, fma(_981, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _977));
        float _1049 = fma(_985, cbModelParam._m0[28u].z, fma(_981, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _977));
        float _1072 = _977 + _803;
        float _1073 = _981 + _804;
        float _1074 = _985 + _805;
        float _1084 = fma(_1074, cbModelParam._m0[26u].z, fma(_1073, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1072)) - _1041;
        float _1085 = fma(_1074, cbModelParam._m0[27u].z, fma(_1073, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1072)) - _1045;
        float _1086 = fma(_1074, cbModelParam._m0[28u].z, fma(_1073, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1072)) - _1049;
        float _1090 = inversesqrt(dot(vec3(_1084, _1085, _1086), vec3(_1084, _1085, _1086)));
        float _1103 = ((_1090 * _1084) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1041 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1104 = ((_1090 * _1085) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1045 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1105 = ((_1090 * _1086) / cbModelParam._m0[34u].z) + ((((((_1049 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1108 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1103, _1104, _1105), 0.0);
        vec4 _1115 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1103, _1104, _1105), 0.0);
        vec4 _1122 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1103, _1104, _1105), 0.0);
        vec4 _1129 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1103, _1104, _1105), 0.0);
        float _1142 = exp2((_1108.w + (-0.5)) * 20.0) * 2.0;
        float _1143 = _1142 * (_1108.x + (-0.5));
        float _1144 = _1142 * (_1108.y + (-0.5));
        float _1145 = _1142 * (_1108.z + (-0.5));
        float _1152 = exp2((_1115.w + (-0.5)) * 20.0) * 2.0;
        float _1153 = _1152 * (_1115.x + (-0.5));
        float _1154 = _1152 * (_1115.y + (-0.5));
        float _1155 = _1152 * (_1115.z + (-0.5));
        float _1162 = exp2((_1122.w + (-0.5)) * 20.0) * 2.0;
        float _1163 = _1162 * (_1122.x + (-0.5));
        float _1164 = _1162 * (_1122.y + (-0.5));
        float _1165 = _1162 * (_1122.z + (-0.5));
        float _1172 = exp2((_1129.w + (-0.5)) * 20.0) * 2.0;
        float _1173 = _1172 * (_1129.x + (-0.5));
        float _1174 = _1172 * (_1129.y + (-0.5));
        float _1175 = _1172 * (_1129.z + (-0.5));
        float _1176 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1177 = isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0));
        float _1178 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1179 = _1143 * 0.5;
        float _1180 = _1153 * 0.5;
        float _1181 = _1163 * 0.5;
        float _1182 = dot(vec3(_1179, _1180, _1181), vec3(_1179, _1180, _1181));
        float _1187 = (_1182 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1182);
        float _1196 = (dot(vec3(_803, _804, _805), vec3(_1187 * _1179, _1187 * _1180, _1187 * _1181)) + 1.0) * 0.5;
        float _3672 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1206 = sqrt(((_1180 * _1180) + (_1179 * _1179)) + (_1181 * _1181)) / (_1176 + 9.9999997473787516355514526367188e-06);
        float _3683 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3683 : (isnan(_3683) ? 1.0 : min(_3683, 1.0));
        float _1208 = _1207 * 2.0;
        float _1212 = (1.0 - _1207) / (_1207 + 1.0);
        float _3694 = isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0));
        float _1213 = isnan(1.0) ? _3694 : (isnan(_3694) ? 1.0 : min(_3694, 1.0));
        float _1222 = ((((1.0 - _1213) * (_1208 + 2.0)) * exp2(log2(isnan(1.0) ? _3672 : (isnan(_3672) ? 1.0 : min(_3672, 1.0))) * (_1208 + 1.0))) + _1213) * _1176;
        float _1223 = _1144 * 0.5;
        float _1224 = _1154 * 0.5;
        float _1225 = _1164 * 0.5;
        float _1226 = dot(vec3(_1223, _1224, _1225), vec3(_1223, _1224, _1225));
        float _1231 = (_1226 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1226);
        float _1239 = (dot(vec3(_803, _804, _805), vec3(_1231 * _1223, _1231 * _1224, _1231 * _1225)) + 1.0) * 0.5;
        float _3705 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1248 = sqrt(((_1224 * _1224) + (_1223 * _1223)) + (_1225 * _1225)) / (_1177 + 9.9999997473787516355514526367188e-06);
        float _3716 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3716 : (isnan(_3716) ? 1.0 : min(_3716, 1.0));
        float _1250 = _1249 * 2.0;
        float _1254 = (1.0 - _1249) / (_1249 + 1.0);
        float _3727 = isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0));
        float _1255 = isnan(1.0) ? _3727 : (isnan(_3727) ? 1.0 : min(_3727, 1.0));
        float _1264 = ((((1.0 - _1255) * (_1250 + 2.0)) * exp2(log2(isnan(1.0) ? _3705 : (isnan(_3705) ? 1.0 : min(_3705, 1.0))) * (_1250 + 1.0))) + _1255) * _1177;
        float _1265 = _1145 * 0.5;
        float _1266 = _1155 * 0.5;
        float _1267 = _1165 * 0.5;
        float _1268 = dot(vec3(_1265, _1266, _1267), vec3(_1265, _1266, _1267));
        float _1273 = (_1268 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1268);
        float _1281 = (dot(vec3(_803, _804, _805), vec3(_1273 * _1265, _1273 * _1266, _1273 * _1267)) + 1.0) * 0.5;
        float _3738 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1290 = sqrt(((_1266 * _1266) + (_1265 * _1265)) + (_1267 * _1267)) / (_1178 + 9.9999997473787516355514526367188e-06);
        float _3749 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _3749 : (isnan(_3749) ? 1.0 : min(_3749, 1.0));
        float _1292 = _1291 * 2.0;
        float _1296 = (1.0 - _1291) / (_1291 + 1.0);
        float _3760 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1297 = isnan(1.0) ? _3760 : (isnan(_3760) ? 1.0 : min(_3760, 1.0));
        float _1306 = ((((1.0 - _1297) * (_1292 + 2.0)) * exp2(log2(isnan(1.0) ? _3738 : (isnan(_3738) ? 1.0 : min(_3738, 1.0))) * (_1292 + 1.0))) + _1297) * _1178;
        _1314 = _1145;
        _1316 = _1144;
        _1317 = _1143;
        _1318 = _1155;
        _1319 = _1154;
        _1320 = _1153;
        _1321 = _1165;
        _1322 = _1164;
        _1323 = _1163;
        _1324 = _1178;
        _1325 = _1177;
        _1326 = _1176;
        _1327 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1222 : (isnan(_1222) ? 0.0 : max(_1222, 0.0)));
        _1328 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1264 : (isnan(_1264) ? 0.0 : max(_1264, 0.0)));
        _1329 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0)));
    }
    else
    {
        _1314 = _1315;
        _1316 = _1315;
        _1317 = _1315;
        _1318 = _1315;
        _1319 = _1315;
        _1320 = _1315;
        _1321 = _1315;
        _1322 = _1315;
        _1323 = _1315;
        _1324 = _1315;
        _1325 = _1315;
        _1326 = _1315;
        _1327 = 0.0;
        _1328 = 0.0;
        _1329 = 0.0;
    }
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    float _1635;
    float _1636;
    float _1637;
    float _1638;
    float _1639;
    float _1640;
    float _1641;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1358 = fma(_985, cbModelParam._m0[30u].z, fma(_981, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _977));
        float _1362 = fma(_985, cbModelParam._m0[31u].z, fma(_981, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _977));
        float _1366 = fma(_985, cbModelParam._m0[32u].z, fma(_981, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _977));
        float _1389 = _977 + _803;
        float _1390 = _981 + _804;
        float _1391 = _985 + _805;
        float _1401 = fma(_1391, cbModelParam._m0[30u].z, fma(_1390, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1389)) - _1358;
        float _1402 = fma(_1391, cbModelParam._m0[31u].z, fma(_1390, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1389)) - _1362;
        float _1403 = fma(_1391, cbModelParam._m0[32u].z, fma(_1390, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1389)) - _1366;
        float _1407 = inversesqrt(dot(vec3(_1401, _1402, _1403), vec3(_1401, _1402, _1403)));
        float _1420 = ((_1407 * _1401) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1358 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1421 = ((_1407 * _1402) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1362 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1422 = ((_1407 * _1403) / cbModelParam._m0[35u].z) + ((((((_1366 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1424 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1420, _1421, _1422), 0.0);
        vec4 _1431 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1420, _1421, _1422), 0.0);
        vec4 _1438 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1420, _1421, _1422), 0.0);
        vec4 _1445 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1420, _1421, _1422), 0.0);
        float _1457 = exp2((_1424.w + (-0.5)) * 20.0) * 2.0;
        float _1458 = _1457 * (_1424.x + (-0.5));
        float _1459 = _1457 * (_1424.y + (-0.5));
        float _1460 = _1457 * (_1424.z + (-0.5));
        float _1467 = exp2((_1431.w + (-0.5)) * 20.0) * 2.0;
        float _1468 = _1467 * (_1431.x + (-0.5));
        float _1469 = _1467 * (_1431.y + (-0.5));
        float _1470 = _1467 * (_1431.z + (-0.5));
        float _1477 = exp2((_1438.w + (-0.5)) * 20.0) * 2.0;
        float _1478 = _1477 * (_1438.x + (-0.5));
        float _1479 = _1477 * (_1438.y + (-0.5));
        float _1480 = _1477 * (_1438.z + (-0.5));
        float _1487 = exp2((_1445.w + (-0.5)) * 20.0) * 2.0;
        float _1488 = _1487 * (_1445.x + (-0.5));
        float _1489 = _1487 * (_1445.y + (-0.5));
        float _1490 = _1487 * (_1445.z + (-0.5));
        float _1491 = isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0));
        float _1492 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
        float _1493 = isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0));
        float _1494 = _1458 * 0.5;
        float _1495 = _1468 * 0.5;
        float _1496 = _1478 * 0.5;
        float _1497 = dot(vec3(_1494, _1495, _1496), vec3(_1494, _1495, _1496));
        float _1502 = (_1497 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1497);
        float _1510 = (dot(vec3(_803, _804, _805), vec3(_1502 * _1494, _1502 * _1495, _1502 * _1496)) + 1.0) * 0.5;
        float _3801 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1519 = sqrt(((_1495 * _1495) + (_1494 * _1494)) + (_1496 * _1496)) / (_1491 + 9.9999997473787516355514526367188e-06);
        float _3812 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
        float _1520 = isnan(1.0) ? _3812 : (isnan(_3812) ? 1.0 : min(_3812, 1.0));
        float _1521 = _1520 * 2.0;
        float _1525 = (1.0 - _1520) / (_1520 + 1.0);
        float _3823 = isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0));
        float _1526 = isnan(1.0) ? _3823 : (isnan(_3823) ? 1.0 : min(_3823, 1.0));
        float _1535 = ((((1.0 - _1526) * (_1521 + 2.0)) * exp2(log2(isnan(1.0) ? _3801 : (isnan(_3801) ? 1.0 : min(_3801, 1.0))) * (_1521 + 1.0))) + _1526) * _1491;
        float _1536 = _1459 * 0.5;
        float _1537 = _1469 * 0.5;
        float _1538 = _1479 * 0.5;
        float _1539 = dot(vec3(_1536, _1537, _1538), vec3(_1536, _1537, _1538));
        float _1544 = (_1539 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1539);
        float _1552 = (dot(vec3(_803, _804, _805), vec3(_1544 * _1536, _1544 * _1537, _1544 * _1538)) + 1.0) * 0.5;
        float _3834 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1561 = sqrt(((_1537 * _1537) + (_1536 * _1536)) + (_1538 * _1538)) / (_1492 + 9.9999997473787516355514526367188e-06);
        float _3845 = isnan(0.0) ? _1561 : (isnan(_1561) ? 0.0 : max(_1561, 0.0));
        float _1562 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
        float _1563 = _1562 * 2.0;
        float _1567 = (1.0 - _1562) / (_1562 + 1.0);
        float _3856 = isnan(0.0) ? _1567 : (isnan(_1567) ? 0.0 : max(_1567, 0.0));
        float _1568 = isnan(1.0) ? _3856 : (isnan(_3856) ? 1.0 : min(_3856, 1.0));
        float _1577 = ((((1.0 - _1568) * (_1563 + 2.0)) * exp2(log2(isnan(1.0) ? _3834 : (isnan(_3834) ? 1.0 : min(_3834, 1.0))) * (_1563 + 1.0))) + _1568) * _1492;
        float _1578 = _1460 * 0.5;
        float _1579 = _1470 * 0.5;
        float _1580 = _1480 * 0.5;
        float _1581 = dot(vec3(_1578, _1579, _1580), vec3(_1578, _1579, _1580));
        float _1586 = (_1581 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1581);
        float _1594 = (dot(vec3(_803, _804, _805), vec3(_1586 * _1578, _1586 * _1579, _1586 * _1580)) + 1.0) * 0.5;
        float _3867 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1603 = sqrt(((_1579 * _1579) + (_1578 * _1578)) + (_1580 * _1580)) / (_1493 + 9.9999997473787516355514526367188e-06);
        float _3878 = isnan(0.0) ? _1603 : (isnan(_1603) ? 0.0 : max(_1603, 0.0));
        float _1604 = isnan(1.0) ? _3878 : (isnan(_3878) ? 1.0 : min(_3878, 1.0));
        float _1605 = _1604 * 2.0;
        float _1609 = (1.0 - _1604) / (_1604 + 1.0);
        float _3889 = isnan(0.0) ? _1609 : (isnan(_1609) ? 0.0 : max(_1609, 0.0));
        float _1610 = isnan(1.0) ? _3889 : (isnan(_3889) ? 1.0 : min(_3889, 1.0));
        float _1619 = ((((1.0 - _1610) * (_1605 + 2.0)) * exp2(log2(isnan(1.0) ? _3867 : (isnan(_3867) ? 1.0 : min(_3867, 1.0))) * (_1605 + 1.0))) + _1610) * _1493;
        _1627 = _1460;
        _1628 = _1459;
        _1629 = _1458;
        _1630 = _1470;
        _1631 = _1469;
        _1632 = _1468;
        _1633 = _1480;
        _1634 = _1479;
        _1635 = _1478;
        _1636 = _1493;
        _1637 = _1492;
        _1638 = _1491;
        _1639 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1535 : (isnan(_1535) ? 0.0 : max(_1535, 0.0)));
        _1640 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0)));
        _1641 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0)));
    }
    else
    {
        _1627 = _1315;
        _1628 = _1315;
        _1629 = _1315;
        _1630 = _1315;
        _1631 = _1315;
        _1632 = _1315;
        _1633 = _1315;
        _1634 = _1315;
        _1635 = _1315;
        _1636 = _1315;
        _1637 = _1315;
        _1638 = _1315;
        _1639 = 0.0;
        _1640 = 0.0;
        _1641 = 0.0;
    }
    float _1651 = (cbModelParam._m0[1u].x * (_1639 - _1327)) + _1327;
    float _1652 = (cbModelParam._m0[1u].x * (_1640 - _1328)) + _1328;
    float _1653 = (cbModelParam._m0[1u].x * (_1641 - _1329)) + _1329;
    float _1674 = fma(_1653, cbSceneParam._m0[89u].z, fma(_1652, cbSceneParam._m0[89u].y, _1651 * cbSceneParam._m0[89u].x));
    float _1677 = fma(_1653, cbSceneParam._m0[90u].z, fma(_1652, cbSceneParam._m0[90u].y, _1651 * cbSceneParam._m0[90u].x));
    float _1680 = fma(_1653, cbSceneParam._m0[91u].z, fma(_1652, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1651));
    float _1695 = _924 * 0.5;
    float _1696 = _925 * 0.5;
    float _1697 = _926 * 0.5;
    float _1698 = dot(vec4(_1695, _1696, _1697, 1.0), vec4(_1629, _1632, _1635, _1638));
    float _1701 = dot(vec4(_1695, _1696, _1697, 1.0), vec4(_1628, _1631, _1634, _1637));
    float _1704 = dot(vec4(_1695, _1696, _1697, 1.0), vec4(_1627, _1630, _1633, _1636));
    float _1738;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1711 = dot(vec4(_1695, _1696, _1697, 1.0), vec4(_1314, _1318, _1321, _1324));
        float _1715 = dot(vec4(_1695, _1696, _1697, 1.0), vec4(_1316, _1319, _1322, _1325));
        float _1719 = dot(vec4(_1695, _1696, _1697, 1.0), vec4(_1317, _1320, _1323, _1326));
        float _1726 = dot(vec4(cbModelParam._m0[39u]), vec4(_1695, _1696, _1697, 1.0));
        _1738 = dot(vec3(isnan(0.0) ? _1719 : (isnan(_1719) ? 0.0 : max(_1719, 0.0)), isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0)), isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1726) ? 0.0 : (isnan(0.0) ? _1726 : max(0.0, _1726))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1738 = 1.0;
    }
    float _1749;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1740 = dot(vec4(cbModelParam._m0[40u]), vec4(_1695, _1696, _1697, 1.0));
        _1749 = dot(vec3(isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0)), isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0)), isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1740) ? 0.0 : (isnan(0.0) ? _1740 : max(0.0, _1740))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1749 = 1.0;
    }
    float _1753 = (_1749 * cbModelParam._m0[1u].x) + (_1738 * (1.0 - cbModelParam._m0[1u].x));
    float _1763 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _806);
    float _1764 = isnan(_1763) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1763 : min(cbModelParam._m0[25u].z, _1763));
    float _1845;
    float _1847;
    float _1849;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1812 = fma(_985, cbModelParam._m0[13u].z, fma(_981, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _977)) + cbModelParam._m0[13u].w;
        float _1816 = fma(_985, cbModelParam._m0[14u].z, fma(_981, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _977)) + cbModelParam._m0[14u].w;
        float _1820 = fma(_985, cbModelParam._m0[15u].z, fma(_981, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _977)) + cbModelParam._m0[15u].w;
        float _1823 = fma(_926, cbModelParam._m0[13u].z, fma(_925, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _924));
        float _1826 = fma(_926, cbModelParam._m0[14u].z, fma(_925, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _924));
        float _1829 = fma(_926, cbModelParam._m0[15u].z, fma(_925, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _924));
        float _1857;
        if (_1823 > 0.0)
        {
            _1857 = abs((1.0 - _1812) / _1823);
        }
        else
        {
            float frontier_phi_57_55_ladder;
            if (_1823 < 0.0)
            {
                frontier_phi_57_55_ladder = abs((_1812 + 1.0) / _1823);
            }
            else
            {
                frontier_phi_57_55_ladder = 5000.0;
            }
            _1857 = frontier_phi_57_55_ladder;
        }
        float _2202;
        if (_1826 > 0.0)
        {
            _2202 = abs((1.0 - _1816) / _1826);
        }
        else
        {
            float frontier_phi_66_62_ladder;
            if (_1826 < 0.0)
            {
                frontier_phi_66_62_ladder = abs((_1816 + 1.0) / _1826);
            }
            else
            {
                frontier_phi_66_62_ladder = 5000.0;
            }
            _2202 = frontier_phi_66_62_ladder;
        }
        float _2510;
        if (_1829 > 0.0)
        {
            _2510 = abs((1.0 - _1820) / _1829);
        }
        else
        {
            float frontier_phi_80_73_ladder;
            if (_1829 < 0.0)
            {
                frontier_phi_80_73_ladder = abs((_1820 + 1.0) / _1829);
            }
            else
            {
                frontier_phi_80_73_ladder = 5000.0;
            }
            _2510 = frontier_phi_80_73_ladder;
        }
        float _2512 = isnan(_2202) ? _1857 : (isnan(_1857) ? _2202 : min(_1857, _2202));
        float _2513 = isnan(_2510) ? _2512 : (isnan(_2512) ? _2510 : min(_2512, _2510));
        float _2517 = (_2513 * _1823) + _1812;
        float _2518 = (_2513 * _1826) + _1816;
        float _2519 = (_2513 * _1829) + _1820;
        float _2520 = _2513 * 9.9999997473787516355514526367188e-05;
        float _2521 = (-1.0) - _2520;
        float _2523 = _2520 + 1.0;
        float frontier_phi_56_80_ladder;
        float frontier_phi_56_80_ladder_1;
        float frontier_phi_56_80_ladder_2;
        if ((_2519 > _2523) || ((_2519 < _2521) || ((_2518 > _2523) || ((_2518 < _2521) || ((_2517 < _2521) || (_2517 > _2523))))))
        {
            frontier_phi_56_80_ladder = 0.0;
            frontier_phi_56_80_ladder_1 = 0.0;
            frontier_phi_56_80_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2661 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2519, cbModelParam._m0[9u].z, fma(_2518, cbModelParam._m0[9u].y, _2517 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2519, cbModelParam._m0[10u].z, fma(_2518, cbModelParam._m0[10u].y, _2517 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2519, cbModelParam._m0[11u].z, fma(_2518, cbModelParam._m0[11u].y, _2517 * cbModelParam._m0[11u].x))), _1764);
            frontier_phi_56_80_ladder = _2661.z * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_1 = _2661.y * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_2 = _2661.x * cbModelParam._m0[1u].y;
        }
        _1845 = frontier_phi_56_80_ladder_2;
        _1847 = frontier_phi_56_80_ladder_1;
        _1849 = frontier_phi_56_80_ladder;
    }
    else
    {
        vec4 _1833 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_924, _925, _926), _1764);
        _1845 = _1833.x * cbModelParam._m0[1u].y;
        _1847 = _1833.y * cbModelParam._m0[1u].y;
        _1849 = _1833.z * cbModelParam._m0[1u].y;
    }
    float _1853 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _806);
    float _1854 = isnan(_1853) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1853 : min(cbModelParam._m0[25u].w, _1853));
    float _1942;
    float _1944;
    float _1946;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1906 = fma(_985, cbModelParam._m0[21u].z, fma(_981, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _977)) + cbModelParam._m0[21u].w;
        float _1910 = fma(_985, cbModelParam._m0[22u].z, fma(_981, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _977)) + cbModelParam._m0[22u].w;
        float _1914 = fma(_985, cbModelParam._m0[23u].z, fma(_981, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _977)) + cbModelParam._m0[23u].w;
        float _1917 = fma(_926, cbModelParam._m0[21u].z, fma(_925, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _924));
        float _1920 = fma(_926, cbModelParam._m0[22u].z, fma(_925, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _924));
        float _1923 = fma(_926, cbModelParam._m0[23u].z, fma(_925, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _924));
        float _2207;
        if (_1917 > 0.0)
        {
            _2207 = abs((1.0 - _1906) / _1917);
        }
        else
        {
            float frontier_phi_68_64_ladder;
            if (_1917 < 0.0)
            {
                frontier_phi_68_64_ladder = abs((_1906 + 1.0) / _1917);
            }
            else
            {
                frontier_phi_68_64_ladder = 5000.0;
            }
            _2207 = frontier_phi_68_64_ladder;
        }
        float _2536;
        if (_1920 > 0.0)
        {
            _2536 = abs((1.0 - _1910) / _1920);
        }
        else
        {
            float frontier_phi_82_75_ladder;
            if (_1920 < 0.0)
            {
                frontier_phi_82_75_ladder = abs((_1910 + 1.0) / _1920);
            }
            else
            {
                frontier_phi_82_75_ladder = 5000.0;
            }
            _2536 = frontier_phi_82_75_ladder;
        }
        float _2726;
        if (_1923 > 0.0)
        {
            _2726 = abs((1.0 - _1914) / _1923);
        }
        else
        {
            float frontier_phi_100_93_ladder;
            if (_1923 < 0.0)
            {
                frontier_phi_100_93_ladder = abs((_1914 + 1.0) / _1923);
            }
            else
            {
                frontier_phi_100_93_ladder = 5000.0;
            }
            _2726 = frontier_phi_100_93_ladder;
        }
        float _2728 = isnan(_2536) ? _2207 : (isnan(_2207) ? _2536 : min(_2207, _2536));
        float _2729 = isnan(_2726) ? _2728 : (isnan(_2728) ? _2726 : min(_2728, _2726));
        float _2733 = (_2729 * _1917) + _1906;
        float _2734 = (_2729 * _1920) + _1910;
        float _2735 = (_2729 * _1923) + _1914;
        float _2736 = _2729 * 9.9999997473787516355514526367188e-05;
        float _2737 = (-1.0) - _2736;
        float _2739 = _2736 + 1.0;
        float frontier_phi_65_100_ladder;
        float frontier_phi_65_100_ladder_1;
        float frontier_phi_65_100_ladder_2;
        if ((_2735 > _2739) || ((_2735 < _2737) || ((_2734 > _2739) || ((_2734 < _2737) || ((_2733 < _2737) || (_2733 > _2739))))))
        {
            frontier_phi_65_100_ladder = 0.0;
            frontier_phi_65_100_ladder_1 = 0.0;
            frontier_phi_65_100_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2977 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2735, cbModelParam._m0[17u].z, fma(_2734, cbModelParam._m0[17u].y, _2733 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2735, cbModelParam._m0[18u].z, fma(_2734, cbModelParam._m0[18u].y, _2733 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2735, cbModelParam._m0[19u].z, fma(_2734, cbModelParam._m0[19u].y, _2733 * cbModelParam._m0[19u].x))), _1854);
            frontier_phi_65_100_ladder = _2977.y * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_1 = _2977.x * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_2 = _2977.z * cbModelParam._m0[1u].z;
        }
        _1942 = frontier_phi_65_100_ladder_1;
        _1944 = frontier_phi_65_100_ladder;
        _1946 = frontier_phi_65_100_ladder_2;
    }
    else
    {
        vec4 _1926 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_924, _925, _926), _1854);
        _1942 = _1926.x * cbModelParam._m0[1u].z;
        _1944 = _1926.y * cbModelParam._m0[1u].z;
        _1946 = _1926.z * cbModelParam._m0[1u].z;
    }
    float _1958 = ((((1.0 - _945) * ((_932 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_945 * _932)) * _916;
    float _1959 = _1958 * ((cbModelParam._m0[1u].w * (_1942 - _1845)) + _1845);
    float _1960 = _1958 * ((cbModelParam._m0[1u].w * (_1944 - _1847)) + _1847);
    float _1961 = _1958 * ((cbModelParam._m0[1u].w * (_1946 - _1849)) + _1849);
    float _1964 = fma(_1961, cbSceneParam._m0[89u].z, fma(_1960, cbSceneParam._m0[89u].y, _1959 * cbSceneParam._m0[89u].x));
    float _1967 = fma(_1961, cbSceneParam._m0[90u].z, fma(_1960, cbSceneParam._m0[90u].y, _1959 * cbSceneParam._m0[90u].x));
    float _1970 = fma(_1961, cbSceneParam._m0[91u].z, fma(_1960, cbSceneParam._m0[91u].y, _1959 * cbSceneParam._m0[91u].x));
    uvec4 _1980 = floatBitsToUint(cbInstanceData._m0[_890 + 5u]);
    uint _1982 = _1980.x * 14u;
    uint _1983 = _1982 + 13u;
    float _1988 = _916 + (-1.0);
    float _1991 = (cbLight._m0[_1983].x * _1988) + 1.0;
    float _1992 = (cbLight._m0[_1983].y * _1988) + 1.0;
    uint _1993 = _1982 + 5u;
    float _1999 = isnan(1.0) ? _1992 : (isnan(_1992) ? 1.0 : min(_1992, 1.0));
    uint _2003 = _1982 + 4u;
    float _2009 = isnan(1.0) ? _1991 : (isnan(_1991) ? 1.0 : min(_1991, 1.0));
    uint _2013 = _1982 | 1u;
    float _2024 = dot(vec3(cbLight._m0[_1982].xyz), vec3(_803, _804, _805));
    float _2027 = dot(vec3(cbLight._m0[_2013].xyz), vec3(_803, _804, _805));
    float _4025 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _4036 = isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0));
    float _2032 = (isnan(1.0) ? _4025 : (isnan(_4025) ? 1.0 : min(_4025, 1.0))) * 0.3183098733425140380859375;
    float _2034 = (isnan(1.0) ? _4036 : (isnan(_4036) ? 1.0 : min(_4036, 1.0))) * 0.3183098733425140380859375;
    float _2041 = ((cbLight._m0[_1993].x * _1999) * _2034) + ((cbLight._m0[_2003].x * _2009) * _2032);
    float _2042 = ((_1999 * cbLight._m0[_1993].y) * _2034) + ((_2009 * cbLight._m0[_2003].y) * _2032);
    float _2043 = ((_1999 * cbLight._m0[_1993].z) * _2034) + ((_2009 * cbLight._m0[_2003].z) * _2032);
    uint _2045 = _1982 + 8u;
    float _2058 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1982].w)) * _806) * 0.949999988079071044921875);
    float _2059 = _2058 * _2058;
    float _2060 = cbLight._m0[_1982].x + _830;
    float _2061 = cbLight._m0[_1982].y + _831;
    float _2062 = cbLight._m0[_1982].z + _832;
    float _2066 = inversesqrt(dot(vec3(_2060, _2061, _2062), vec3(_2060, _2061, _2062)));
    float _2067 = _2066 * _2060;
    float _2068 = _2066 * _2061;
    float _2069 = _2066 * _2062;
    float _2070 = dot(vec3(_803, _804, _805), vec3(cbLight._m0[_1982].xyz));
    float _4047 = isnan(0.0) ? _2070 : (isnan(_2070) ? 0.0 : max(_2070, 0.0));
    float _2073 = isnan(1.0) ? _4047 : (isnan(_4047) ? 1.0 : min(_4047, 1.0));
    float _4058 = isnan(0.0) ? _917 : (isnan(_917) ? 0.0 : max(_917, 0.0));
    float _2074 = isnan(1.0) ? _4058 : (isnan(_4058) ? 1.0 : min(_4058, 1.0));
    float _2075 = dot(vec3(_803, _804, _805), vec3(_2067, _2068, _2069));
    float _4069 = isnan(0.0) ? _2075 : (isnan(_2075) ? 0.0 : max(_2075, 0.0));
    float _2078 = isnan(1.0) ? _4069 : (isnan(_4069) ? 1.0 : min(_4069, 1.0));
    float _2079 = dot(vec3(cbLight._m0[_1982].xyz), vec3(_2067, _2068, _2069));
    float _4080 = isnan(0.0) ? _2079 : (isnan(_2079) ? 0.0 : max(_2079, 0.0));
    float _2083 = _2059 * _2059;
    float _2087 = ((_2078 * _2078) * (_2083 + (-1.0))) + 1.0;
    float _2098 = (exp2(log2(1.0 - (isnan(1.0) ? _4080 : (isnan(_4080) ? 1.0 : min(_4080, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2099 = 1.0 - _2059;
    float _2110 = (0.5 / (((_2074 * ((_2073 * _2099) + _2059)) + 9.9999999392252902907785028219223e-09) + (((_2074 * _2099) + _2059) * _2073))) * _2073;
    float _4091 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _2112 = (isnan(1.0) ? _4091 : (isnan(_4091) ? 1.0 : min(_4091, 1.0))) * (_2083 / ((_2087 * _2087) * 3.141590118408203125));
    uint _2123 = _1982 + 9u;
    float _2134 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2013].w)) * _806) * 0.949999988079071044921875);
    float _2135 = _2134 * _2134;
    float _2136 = cbLight._m0[_2013].x + _830;
    float _2137 = cbLight._m0[_2013].y + _831;
    float _2138 = cbLight._m0[_2013].z + _832;
    float _2142 = inversesqrt(dot(vec3(_2136, _2137, _2138), vec3(_2136, _2137, _2138)));
    float _2143 = _2142 * _2136;
    float _2144 = _2142 * _2137;
    float _2145 = _2142 * _2138;
    float _2146 = dot(vec3(_803, _804, _805), vec3(cbLight._m0[_2013].xyz));
    float _4102 = isnan(0.0) ? _2146 : (isnan(_2146) ? 0.0 : max(_2146, 0.0));
    float _2149 = isnan(1.0) ? _4102 : (isnan(_4102) ? 1.0 : min(_4102, 1.0));
    float _2150 = dot(vec3(_803, _804, _805), vec3(_2143, _2144, _2145));
    float _4113 = isnan(0.0) ? _2150 : (isnan(_2150) ? 0.0 : max(_2150, 0.0));
    float _2153 = isnan(1.0) ? _4113 : (isnan(_4113) ? 1.0 : min(_4113, 1.0));
    float _2154 = dot(vec3(cbLight._m0[_2013].xyz), vec3(_2143, _2144, _2145));
    float _4124 = isnan(0.0) ? _2154 : (isnan(_2154) ? 0.0 : max(_2154, 0.0));
    float _2158 = _2135 * _2135;
    float _2162 = ((_2153 * _2153) * (_2158 + (-1.0))) + 1.0;
    float _2171 = (exp2(log2(1.0 - (isnan(1.0) ? _4124 : (isnan(_4124) ? 1.0 : min(_4124, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2172 = 1.0 - _2135;
    float _2182 = (0.5 / (((_2074 * ((_2149 * _2172) + _2135)) + 9.9999999392252902907785028219223e-09) + (((_2074 * _2172) + _2135) * _2149))) * _2149;
    float _4135 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    float _2184 = (isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * (_2158 / ((_2162 * _2162) * 3.141590118408203125));
    float _2194 = (((_2171 * cbLight._m0[_2123].x) * _2184) * _1999) + (((_2098 * cbLight._m0[_2045].x) * _2112) * _2009);
    float _2195 = (((_2171 * cbLight._m0[_2123].y) * _2184) * _1999) + (((_2098 * cbLight._m0[_2045].y) * _2112) * _2009);
    float _2196 = (((_2171 * cbLight._m0[_2123].z) * _2184) * _1999) + (((_2098 * cbLight._m0[_2045].z) * _2112) * _2009);
    float _2311;
    float _2313;
    float _2315;
    float _2317;
    float _2319;
    float _2321;
    if (_1980.y == 0u)
    {
        float _2251 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2252 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2251;
        float _2253 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2251;
        float _2254 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2251;
        uvec4 _2266 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2267 = _2266.x;
        uint _2278 = uint((float(_2266.y) * floor(float(uint(cbSceneParam._m0[85u].y * _852) / _2267))) + floor(float(uint(cbSceneParam._m0[85u].x * _851) / _2267)));
        float _2288 = (log2(_2254 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2289 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
        uint _2292 = uint(isnan(14.0) ? _2289 : (isnan(_2289) ? 14.0 : min(_2289, 14.0)));
        uvec4 _2297 = texelFetch(g_lightClusterGridBuffer, int(((_2292 << 2u) + (_2278 << 6u)) >> 2u));
        uint _2298 = _2297.x;
        uint _2299 = _2266.z;
        float _2389;
        float _2391;
        float _2393;
        float _2395;
        float _2397;
        float _2399;
        if (((((1u << ((_2299 >> 4u) & 15u)) + 4294967295u) & _2298) == 0u) || ((_2299 & 240u) == 0u))
        {
            _2389 = 0.0;
            _2391 = 0.0;
            _2393 = 0.0;
            _2395 = 0.0;
            _2397 = 0.0;
            _2399 = 0.0;
        }
        else
        {
            float _2390;
            float _2392;
            float _2394;
            float _2396;
            float _2398;
            float _2400;
            float _2573 = 0.0;
            float _2574 = 0.0;
            float _2575 = 0.0;
            float _2576 = 0.0;
            float _2577 = 0.0;
            float _2578 = 0.0;
            uint _2579 = 0u;
            uint _2588;
            bool _2589;
            for (;;)
            {
                _2588 = texelFetch(g_lightClassification, int((((_2292 << 5u) + (_2278 << 9u)) + (_2579 << 2u)) >> 2u)).x;
                _2589 = _2588 == 0u;
                float frontier_phi_95_pred;
                float frontier_phi_95_pred_1;
                float frontier_phi_95_pred_2;
                float frontier_phi_95_pred_3;
                float frontier_phi_95_pred_4;
                float frontier_phi_95_pred_5;
                if (_2589)
                {
                    frontier_phi_95_pred = _2574;
                    frontier_phi_95_pred_1 = _2573;
                    frontier_phi_95_pred_2 = _2575;
                    frontier_phi_95_pred_3 = _2578;
                    frontier_phi_95_pred_4 = _2577;
                    frontier_phi_95_pred_5 = _2576;
                }
                else
                {
                    float _2769;
                    float _2770;
                    float _2771;
                    float _2772;
                    float _2773;
                    float _2774;
                    uint _2775;
                    _2769 = _2573;
                    _2770 = _2574;
                    _2771 = _2575;
                    _2772 = _2576;
                    _2773 = _2577;
                    _2774 = _2578;
                    _2775 = _2588;
                    float _2670;
                    float _2671;
                    float _2672;
                    float _2673;
                    float _2674;
                    float _2675;
                    for (;;)
                    {
                        uint _2779 = uint(findLSB(_2775)) + (_2579 << 5u);
                        uint _2776 = (_2775 + 4294967295u) & _2775;
                        uint _2781 = _2779 * 48u;
                        vec4 _2795 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2781)).x, texelFetch(g_PointLightRenderingBuffer, int(_2781 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2781 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2781 + 3u)).x));
                        uint _2801 = (_2779 * 48u) + 4u;
                        vec4 _2814 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2801)).x, texelFetch(g_PointLightRenderingBuffer, int(_2801 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2801 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2801 + 3u)).x));
                        uint _2820 = (_2779 * 48u) + 8u;
                        vec3 _2831 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2820)).x, texelFetch(g_PointLightRenderingBuffer, int(_2820 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2820 + 2u)).x));
                        float _2835 = _2795.x - _2252;
                        float _2836 = _2795.y - _2253;
                        float _2837 = _2795.z - _2254;
                        float _2838 = dot(vec3(_2835, _2836, _2837), vec3(_2835, _2836, _2837));
                        float _2841 = inversesqrt(_2838);
                        float _2842 = _2841 * _2835;
                        float _2843 = _2841 * _2836;
                        float _2844 = _2841 * _2837;
                        float _2845 = dot(vec3(_871, _874, _877), vec3(_2842, _2843, _2844));
                        float _2850 = 1.0 - (_2838 * _2795.w);
                        float _4156 = isnan(0.0) ? _2850 : (isnan(_2850) ? 0.0 : max(_2850, 0.0));
                        float _2851 = isnan(1.0) ? _4156 : (isnan(_4156) ? 1.0 : min(_4156, 1.0));
                        float _2852 = sqrt(_2838) * _2814.w;
                        float _2855 = 1.39999997615814208984375 / (_2852 + 1.39999997615814208984375);
                        float _2856 = _2855 * _2855;
                        float _2859 = ((1.0 - _2856) * _2845) + _2856;
                        float _2862 = _2852 * _2852;
                        float _2866 = ((isnan(0.0) ? _2859 : (isnan(_2859) ? 0.0 : max(_2859, 0.0))) * _2851) / ((_2862 * 0.699999988079071044921875) + 1.0);
                        float _2870 = (-0.0) - _2252;
                        float _2871 = (-0.0) - _2253;
                        float _2872 = (-0.0) - _2254;
                        float _2876 = inversesqrt(dot(vec3(_2870, _2871, _2872), vec3(_2870, _2871, _2872)));
                        float _2877 = _2876 * _2870;
                        float _2878 = _2876 * _2871;
                        float _2879 = _2876 * _2872;
                        float _2887 = exp2(log2(1.0 / ((_2862 * 3.5) + 5.0)) * 0.25);
                        float _2888 = 1.0 - _932;
                        float _2895 = sqrt(1.0 - ((1.0 - (_2888 * _2888)) * (1.0 - (_2887 * _2887))));
                        float _2896 = _2895 * _2895;
                        float _2897 = _2896 * _2896;
                        float _2898 = _2877 + _2842;
                        float _2899 = _2878 + _2843;
                        float _2900 = _2879 + _2844;
                        float _2904 = inversesqrt(dot(vec3(_2898, _2899, _2900), vec3(_2898, _2899, _2900)));
                        float _2908 = dot(vec3(_871, _874, _877), vec3(_2877, _2878, _2879));
                        float _4172 = isnan(0.0) ? _2908 : (isnan(_2908) ? 0.0 : max(_2908, 0.0));
                        float _2911 = isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0));
                        float _2912 = dot(vec3(_871, _874, _877), vec3(_2904 * _2898, _2904 * _2899, _2904 * _2900));
                        float _4183 = isnan(0.0) ? _2912 : (isnan(_2912) ? 0.0 : max(_2912, 0.0));
                        float _2915 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
                        float _2919 = ((_2915 * _2915) * (_2897 + (-1.0))) + 1.0;
                        float _2920 = _2855 * _2896;
                        float _2921 = _2920 * _2920;
                        float _2924 = ((1.0 - _2921) * _2845) + _2921;
                        float _4194 = isnan(0.0) ? _2924 : (isnan(_2924) ? 0.0 : max(_2924, 0.0));
                        float _2925 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
                        float _2926 = 1.0 - _2896;
                        float _2936 = (0.5 / (((_2925 * ((_2911 * _2926) + _2896)) + 9.9999999392252902907785028219223e-09) + (((_2925 * _2926) + _2896) * _2911))) * _2925;
                        float _4205 = isnan(0.0) ? _2936 : (isnan(_2936) ? 0.0 : max(_2936, 0.0));
                        float _2947 = (((_2897 * 3.1415927410125732421875) * (isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0)))) / ((_2919 * _2919) * ((_2862 * 2.1991131305694580078125) + 3.141590118408203125))) * _2851;
                        _2673 = (_2866 * _2814.x) + _2772;
                        _2674 = (_2866 * _2814.y) + _2773;
                        _2675 = (_2866 * _2814.z) + _2774;
                        _2670 = (_2947 * _2831.x) + _2769;
                        _2671 = (_2947 * _2831.y) + _2770;
                        _2672 = (_2947 * _2831.z) + _2771;
                        if (_2776 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2769 = _2670;
                            _2770 = _2671;
                            _2771 = _2672;
                            _2772 = _2673;
                            _2773 = _2674;
                            _2774 = _2675;
                            _2775 = _2776;
                        }
                    }
                    frontier_phi_95_pred = _2671;
                    frontier_phi_95_pred_1 = _2670;
                    frontier_phi_95_pred_2 = _2672;
                    frontier_phi_95_pred_3 = _2675;
                    frontier_phi_95_pred_4 = _2674;
                    frontier_phi_95_pred_5 = _2673;
                }
                _2392 = frontier_phi_95_pred;
                _2390 = frontier_phi_95_pred_1;
                _2394 = frontier_phi_95_pred_2;
                _2400 = frontier_phi_95_pred_3;
                _2398 = frontier_phi_95_pred_4;
                _2396 = frontier_phi_95_pred_5;
                uint _2580 = _2579 + 1u;
                if (_2580 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2573 = _2390;
                    _2574 = _2392;
                    _2575 = _2394;
                    _2576 = _2396;
                    _2577 = _2398;
                    _2578 = _2400;
                    _2579 = _2580;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2389 = _2390;
            _2391 = _2392;
            _2393 = _2394;
            _2395 = _2396;
            _2397 = _2398;
            _2399 = _2400;
        }
        uvec4 _2403 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2404 = _2403.z;
        uint _2406 = (_2404 >> 8u) & 15u;
        float _2541;
        float _2543;
        float _2545;
        float _2547;
        float _2549;
        float _2551;
        if (((4294967295u << _2406) & _2298) == 0u)
        {
            _2541 = _2389;
            _2543 = _2391;
            _2545 = _2393;
            _2547 = _2395;
            _2549 = _2397;
            _2551 = _2399;
        }
        else
        {
            float _2566 = inversesqrt(dot(vec3(_2252, _2253, _2254), vec3(_2252, _2253, _2254)));
            float _2567 = _2566 * _2252;
            float _2568 = _2566 * _2253;
            float _2569 = _2566 * _2254;
            float frontier_phi_84_85_ladder;
            float frontier_phi_84_85_ladder_1;
            float frontier_phi_84_85_ladder_2;
            float frontier_phi_84_85_ladder_3;
            float frontier_phi_84_85_ladder_4;
            float frontier_phi_84_85_ladder_5;
            if (_2406 < ((_2404 >> 12u) & 15u))
            {
                float _2542;
                float _2544;
                float _2546;
                float _2548;
                float _2550;
                float _2552;
                float _2752 = _2389;
                float _2753 = _2391;
                float _2754 = _2393;
                float _2755 = _2395;
                float _2756 = _2397;
                float _2757 = _2399;
                uint _2758 = _2406;
                uint _2767;
                bool _2768;
                for (;;)
                {
                    _2767 = texelFetch(g_lightClassification, int((((_2292 << 5u) + (_2278 << 9u)) + (_2758 << 2u)) >> 2u)).x;
                    _2768 = _2767 == 0u;
                    float frontier_phi_109_pred;
                    float frontier_phi_109_pred_1;
                    float frontier_phi_109_pred_2;
                    float frontier_phi_109_pred_3;
                    float frontier_phi_109_pred_4;
                    float frontier_phi_109_pred_5;
                    if (_2768)
                    {
                        frontier_phi_109_pred = _2753;
                        frontier_phi_109_pred_1 = _2752;
                        frontier_phi_109_pred_2 = _2757;
                        frontier_phi_109_pred_3 = _2756;
                        frontier_phi_109_pred_4 = _2755;
                        frontier_phi_109_pred_5 = _2754;
                    }
                    else
                    {
                        float _2982;
                        float _2983;
                        float _2984;
                        float _2985;
                        float _2986;
                        float _2987;
                        float _3275;
                        float _3276;
                        float _3277;
                        float _3278;
                        float _3279;
                        float _3280;
                        float _2995 = _2752;
                        float _2996 = _2753;
                        float _2997 = _2754;
                        float _2998 = _2755;
                        float _2999 = _2756;
                        float _3000 = _2757;
                        uint _3001 = _2767;
                        uint _3002;
                        vec4 _3027;
                        float _3028;
                        vec4 _3043;
                        vec3 _3055;
                        vec4 _3070;
                        vec4 _3085;
                        float _3131;
                        bool _3132;
                        for (;;)
                        {
                            uint _3012 = ((_2758 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3001));
                            _3002 = (_3001 + 4294967295u) & _3001;
                            uint _3014 = _3012 * 40u;
                            _3027 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3014)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 3u)).x));
                            _3028 = _3027.w;
                            uint _3030 = (_3012 * 40u) + 4u;
                            _3043 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3030)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3030 + 3u)).x));
                            uint _3045 = (_3012 * 40u) + 8u;
                            _3055 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3045)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 2u)).x));
                            uint _3057 = (_3012 * 40u) + 16u;
                            _3070 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3057)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3057 + 3u)).x));
                            uint _3072 = (_3012 * 40u) + 20u;
                            _3085 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3072)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 3u)).x));
                            uint _3087 = (_3012 * 40u) + 24u;
                            vec4 _3100 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3087)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3087 + 3u)).x));
                            uint _3106 = (_3012 * 40u) + 28u;
                            vec4 _3119 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3106)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3106 + 3u)).x));
                            _3131 = fma(_2254, _3119.z, fma(_2253, _3119.y, _3119.x * _2252)) + _3119.w;
                            _3132 = !((fma(_2254, _3100.z, fma(_2253, _3100.y, _3100.x * _2252)) + _3100.w) <= 0.0);
                            float frontier_phi_115_pred;
                            float frontier_phi_115_pred_1;
                            float frontier_phi_115_pred_2;
                            float frontier_phi_115_pred_3;
                            float frontier_phi_115_pred_4;
                            float frontier_phi_115_pred_5;
                            if (_3132)
                            {
                                float _3159 = _3027.x - _2252;
                                float _3160 = _3027.y - _2253;
                                float _3161 = _3027.z - _2254;
                                float _3162 = dot(vec3(_3159, _3160, _3161), vec3(_3159, _3160, _3161));
                                float _3165 = inversesqrt(_3162);
                                float _3166 = _3165 * _3159;
                                float _3167 = _3165 * _3160;
                                float _3168 = _3165 * _3161;
                                float _3172 = 1.0 - (_3162 / (_3028 * _3028));
                                float _4216 = isnan(0.0) ? _3172 : (isnan(_3172) ? 0.0 : max(_3172, 0.0));
                                float _3173 = isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0));
                                float _3177 = sqrt(_3162) * _3043.w;
                                float _3179 = 1.39999997615814208984375 / (_3177 + 1.39999997615814208984375);
                                float _3180 = _3179 * _3179;
                                float _3183 = ((1.0 - _3180) * dot(vec3(_3166, _3167, _3168), vec3(_871, _874, _877))) + _3180;
                                float _3186 = _3177 * _3177;
                                float _3190 = (fma(_2254, _3070.z, fma(_2253, _3070.y, _3070.x * _2252)) + _3070.w) / _3131;
                                float _3191 = (fma(_2254, _3085.z, fma(_2253, _3085.y, _3085.x * _2252)) + _3085.w) / _3131;
                                float _3195 = 1.0 - dot(vec2(_3190, _3191), vec2(_3190, _3191));
                                float _4232 = isnan(0.0) ? _3195 : (isnan(_3195) ? 0.0 : max(_3195, 0.0));
                                float _3196 = isnan(1.0) ? _4232 : (isnan(_4232) ? 1.0 : min(_4232, 1.0));
                                float _3197 = _3196 * (((isnan(0.0) ? _3183 : (isnan(_3183) ? 0.0 : max(_3183, 0.0))) * _3173) / ((_3186 * 0.699999988079071044921875) + 1.0));
                                float _3209 = exp2(log2(1.0 / ((_3186 * 3.5) + 5.0)) * 0.25);
                                float _3210 = 1.0 - _932;
                                float _3217 = sqrt(1.0 - ((1.0 - (_3210 * _3210)) * (1.0 - (_3209 * _3209))));
                                float _3218 = _3217 * _3217;
                                float _3219 = _3218 * _3218;
                                float _3220 = _3166 - _2567;
                                float _3221 = _3167 - _2568;
                                float _3222 = _3168 - _2569;
                                float _3226 = inversesqrt(dot(vec3(_3220, _3221, _3222), vec3(_3220, _3221, _3222)));
                                float _3230 = dot(vec3(_871, _874, _877), vec3((-0.0) - _2567, (-0.0) - _2568, (-0.0) - _2569));
                                float _4243 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
                                float _3233 = isnan(1.0) ? _4243 : (isnan(_4243) ? 1.0 : min(_4243, 1.0));
                                float _3234 = dot(vec3(_871, _874, _877), vec3(_3226 * _3220, _3226 * _3221, _3226 * _3222));
                                float _4254 = isnan(0.0) ? _3234 : (isnan(_3234) ? 0.0 : max(_3234, 0.0));
                                float _3237 = isnan(1.0) ? _4254 : (isnan(_4254) ? 1.0 : min(_4254, 1.0));
                                float _3241 = ((_3237 * _3237) * (_3219 + (-1.0))) + 1.0;
                                float _3242 = _3179 * _3218;
                                float _3243 = _3242 * _3242;
                                float _3249 = ((1.0 - _3243) * dot(vec3(_871, _874, _877), vec3(_3166, _3167, _3168))) + _3243;
                                float _4265 = isnan(0.0) ? _3249 : (isnan(_3249) ? 0.0 : max(_3249, 0.0));
                                float _3250 = isnan(1.0) ? _4265 : (isnan(_4265) ? 1.0 : min(_4265, 1.0));
                                float _3251 = 1.0 - _3218;
                                float _3261 = (0.5 / (((_3250 * ((_3233 * _3251) + _3218)) + 9.9999999392252902907785028219223e-09) + (((_3250 * _3251) + _3218) * _3233))) * _3250;
                                float _4276 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                                float _3271 = (_3196 * _3173) * (((_3219 * 3.1415927410125732421875) * (isnan(1.0) ? _4276 : (isnan(_4276) ? 1.0 : min(_4276, 1.0)))) / ((_3241 * _3241) * ((_3186 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_115_pred = _3197 * _3043.y;
                                frontier_phi_115_pred_1 = _3197 * _3043.x;
                                frontier_phi_115_pred_2 = _3271 * _3055.z;
                                frontier_phi_115_pred_3 = _3271 * _3055.y;
                                frontier_phi_115_pred_4 = _3271 * _3055.x;
                                frontier_phi_115_pred_5 = _3197 * _3043.z;
                            }
                            else
                            {
                                frontier_phi_115_pred = 0.0;
                                frontier_phi_115_pred_1 = 0.0;
                                frontier_phi_115_pred_2 = 0.0;
                                frontier_phi_115_pred_3 = 0.0;
                                frontier_phi_115_pred_4 = 0.0;
                                frontier_phi_115_pred_5 = 0.0;
                            }
                            _3279 = frontier_phi_115_pred;
                            _3278 = frontier_phi_115_pred_1;
                            _3277 = frontier_phi_115_pred_2;
                            _3276 = frontier_phi_115_pred_3;
                            _3275 = frontier_phi_115_pred_4;
                            _3280 = frontier_phi_115_pred_5;
                            _2985 = _3278 + _2998;
                            _2986 = _3279 + _2999;
                            _2987 = _3280 + _3000;
                            _2982 = _3275 + _2995;
                            _2983 = _3276 + _2996;
                            _2984 = _3277 + _2997;
                            if (_3002 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2995 = _2982;
                                _2996 = _2983;
                                _2997 = _2984;
                                _2998 = _2985;
                                _2999 = _2986;
                                _3000 = _2987;
                                _3001 = _3002;
                                continue;
                            }
                        }
                        frontier_phi_109_pred = _2983;
                        frontier_phi_109_pred_1 = _2982;
                        frontier_phi_109_pred_2 = _2987;
                        frontier_phi_109_pred_3 = _2986;
                        frontier_phi_109_pred_4 = _2985;
                        frontier_phi_109_pred_5 = _2984;
                    }
                    _2544 = frontier_phi_109_pred;
                    _2542 = frontier_phi_109_pred_1;
                    _2552 = frontier_phi_109_pred_2;
                    _2550 = frontier_phi_109_pred_3;
                    _2548 = frontier_phi_109_pred_4;
                    _2546 = frontier_phi_109_pred_5;
                    uint _2759 = _2758 + 1u;
                    if (_2759 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2752 = _2542;
                        _2753 = _2544;
                        _2754 = _2546;
                        _2755 = _2548;
                        _2756 = _2550;
                        _2757 = _2552;
                        _2758 = _2759;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_84_85_ladder = _2542;
                frontier_phi_84_85_ladder_1 = _2546;
                frontier_phi_84_85_ladder_2 = _2552;
                frontier_phi_84_85_ladder_3 = _2550;
                frontier_phi_84_85_ladder_4 = _2548;
                frontier_phi_84_85_ladder_5 = _2544;
            }
            else
            {
                frontier_phi_84_85_ladder = _2389;
                frontier_phi_84_85_ladder_1 = _2393;
                frontier_phi_84_85_ladder_2 = _2399;
                frontier_phi_84_85_ladder_3 = _2397;
                frontier_phi_84_85_ladder_4 = _2395;
                frontier_phi_84_85_ladder_5 = _2391;
            }
            _2541 = frontier_phi_84_85_ladder;
            _2543 = frontier_phi_84_85_ladder_5;
            _2545 = frontier_phi_84_85_ladder_1;
            _2547 = frontier_phi_84_85_ladder_4;
            _2549 = frontier_phi_84_85_ladder_3;
            _2551 = frontier_phi_84_85_ladder_2;
        }
        float _2556 = isnan(1.0) ? _916 : (isnan(_916) ? 1.0 : min(_916, 1.0));
        _2311 = (_2556 * _2547) + _2041;
        _2313 = (_2556 * _2549) + _2042;
        _2315 = (_2556 * _2551) + _2043;
        _2317 = ((_2541 * 0.039999999105930328369140625) * _2556) + _2194;
        _2319 = ((_2543 * 0.039999999105930328369140625) * _2556) + _2195;
        _2321 = ((_2545 * 0.039999999105930328369140625) * _2556) + _2196;
    }
    else
    {
        _2311 = _2041;
        _2313 = _2042;
        _2315 = _2043;
        _2317 = _2194;
        _2319 = _2195;
        _2321 = _2196;
    }
    float _4292 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
    float _4303 = isnan(0.0) ? _903 : (isnan(_903) ? 0.0 : max(_903, 0.0));
    float _4314 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
    float _2338 = ((isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * (_2311 + ((isnan(0.0) ? _1674 : (isnan(_1674) ? 0.0 : max(_1674, 0.0))) * _916))) + ((_2317 + ((isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0))) * _1753)) * cbPerFrame._m0[3u].x);
    float _2339 = ((isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0))) * (_2313 + ((isnan(0.0) ? _1677 : (isnan(_1677) ? 0.0 : max(_1677, 0.0))) * _916))) + ((_2319 + ((isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0))) * _1753)) * cbPerFrame._m0[3u].x);
    float _2340 = ((isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0))) * (_2315 + ((isnan(0.0) ? _1680 : (isnan(_1680) ? 0.0 : max(_1680, 0.0))) * _916))) + ((_2321 + ((isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0))) * _1753)) * cbPerFrame._m0[3u].x);
    float _2341 = isnan(0.0) ? _2338 : (isnan(_2338) ? 0.0 : max(_2338, 0.0));
    float _2342 = isnan(0.0) ? _2339 : (isnan(_2339) ? 0.0 : max(_2339, 0.0));
    float _2343 = isnan(0.0) ? _2340 : (isnan(_2340) ? 0.0 : max(_2340, 0.0));
    uint _2344 = _890 + 6u;
    float _2352 = _851 / cbSceneParam._m0[86u].x;
    float _2353 = _852 / cbSceneParam._m0[86u].y;
    vec4 _2367 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2352, _2353, (log2((isnan(cbSceneParam._m0[77u].w) ? _825 : (isnan(_825) ? cbSceneParam._m0[77u].w : min(_825, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2369 = _2367.x;
    float _2370 = _2367.y;
    float _2371 = _2367.z;
    float _2372 = _2367.w;
    float _2452;
    float _2454;
    float _2456;
    float _2458;
    if (_825 > cbSceneParam._m0[78u].w)
    {
        float _2414 = isnan(_825) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _825 : min(cbSceneParam._m0[80u].w, _825));
        float _2415 = _2414 / _825;
        float _2426 = _2415 * _273;
        float _2427 = _274 * _2415;
        float _2428 = (-0.0) - _2427;
        float _2429 = _2415 * _275;
        float _2431 = (cbSceneParam._m0[77u].w * _2428) / _2414;
        float _2432 = _2431 + cbSceneParam._m0[79u].w;
        float _2433 = cbSceneParam._m0[79u].w - _2427;
        float _2439 = sqrt(((_2426 * _2426) + (_2427 * _2427)) + (_2429 * _2429));
        float _2442 = (1.0 - (cbSceneParam._m0[77u].w / _2414)) * _2439;
        float _2448 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2450 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2683;
        if (abs((_2428 - _2431) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2683 = ((((_2432 > 0.0) ? exp2(_2448 * _2432) : (2.0 - exp2(_2450 * _2432))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2442;
        }
        else
        {
            float _2602 = 1.0 / cbSceneParam._m0[80u].x;
            float _2603 = isnan(_2433) ? _2432 : (isnan(_2432) ? _2433 : max(_2432, _2433));
            float _2604 = isnan(_2433) ? _2432 : (isnan(_2432) ? _2433 : min(_2432, _2433));
            float _2613 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : min(_2603, 0.0));
            float _2614 = isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : min(_2604, 0.0));
            _2683 = ((abs(_2439 / _2428) * cbSceneParam._m0[80u].y) * ((((_2613 - _2614) * 2.0) - ((exp2(_2448 * (isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0)))) - exp2(_2448 * (isnan(0.0) ? _2604 : (isnan(_2604) ? 0.0 : max(_2604, 0.0))))) * _2602)) - ((exp2(_2450 * _2613) - exp2(_2450 * _2614)) * _2602))) + (_2442 * cbSceneParam._m0[80u].z);
        }
        vec4 _2685 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2352, _2353, 1.0), 0.0);
        float _2694 = exp2((_2683 * (-1.44269502162933349609375)) * (1.0 - _2685.w));
        float _2695 = log2(_2694);
        float _2711 = log2(_2372);
        _2452 = (exp2(_2711 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2695 * cbSceneParam._m0[78u].x)) * _2685.x) / cbSceneParam._m0[78u].x)) + _2369;
        _2454 = (exp2(_2711 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2695 * cbSceneParam._m0[78u].y)) * _2685.y) / cbSceneParam._m0[78u].y)) + _2370;
        _2456 = (exp2(_2711 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2695 * cbSceneParam._m0[78u].z)) * _2685.z) / cbSceneParam._m0[78u].z)) + _2371;
        _2458 = _2694 * _2372;
    }
    else
    {
        _2452 = _2369;
        _2454 = _2370;
        _2456 = _2371;
        _2458 = _2372;
    }
    bool _2721;
    vec4 _2468;
    vec4 _2490;
    float _2492;
    float _2496;
    float _2497;
    float _2498;
    float _2499;
    bool _2509;
    for (;;)
    {
        _2468 = cbMatDynParam._m0[0u];
        float _2470 = roundEven(_2468.y);
        bool _2471 = _2470 == 3.0;
        float _2472 = log2(_2458);
        float _2479 = exp2(_2472 * cbSceneParam._m0[78u].x) * _2341;
        float _2480 = exp2(_2472 * cbSceneParam._m0[78u].y) * _2342;
        float _2481 = exp2(_2472 * cbSceneParam._m0[78u].z) * _2343;
        float _2488 = _839 + (-0.5);
        _2490 = cbMtdParam._m0[1u];
        _2492 = _2490.y * _2488;
        float _2495 = (_2470 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2496 = _2495 * (_2471 ? _2479 : (_2479 + (cbSceneParam._m0[72u].w * _2452)));
        _2497 = _2495 * (_2471 ? _2480 : (_2480 + (cbSceneParam._m0[72u].w * _2454)));
        _2498 = _2495 * (_2471 ? _2481 : (_2481 + (cbSceneParam._m0[72u].w * _2456)));
        _2499 = _2488 * 0.999000012874603271484375;
        _2509 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2509)
        {
            if ((cbInstanceData._m0[_890 + 7u].x + _2499) < 0.5)
            {
                _2721 = true;
                break;
            }
        }
        uint _2637 = _892 + uint(_2468.w);
        if ((cbInstanceData._m0[_2637].w < 1.0) && ((cbInstanceData._m0[_2637].w + _2499) < 0.5))
        {
            _2721 = true;
            break;
        }
        if ((_2492 + 1.0) < _2490.x)
        {
            _2721 = true;
            break;
        }
        _2721 = false;
        break;
    }
    float _2952;
    if (_2721)
    {
        discard_state = true;
        _2952 = 0.0;
    }
    else
    {
        _2952 = cbInstanceData._m0[_2344].w;
    }
    SV_Target.x = _2496;
    SV_Target.y = _2497;
    SV_Target.z = _2498;
    SV_Target.w = _2952;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2344].w;
    discard_exit();
}


