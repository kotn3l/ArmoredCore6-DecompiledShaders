#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _796;
uint _1972;
uint _1973;
uint _1974;
uint _2217;
uint _2218;
uint _2219;
float _2466;
float _2467;
float _2468;
float _2469;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _284 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _319 = cbMtdParam._m0[24u].x + _263;
    float _320 = cbMtdParam._m0[24u].y + _264;
    float _321 = cbMtdParam._m0[24u].z + _265;
    float _335 = (-0.0) - dot(vec3(_319, _320, _321), vec3(_191 * _184, _191 * _185, _191 * _186));
    float _336 = (-0.0) - dot(vec3(_319, _320, _321), vec3(_205 * TANGENT.x, _205 * TANGENT.y, _205 * TANGENT.z));
    float _337 = (-0.0) - dot(vec3(_319, _320, _321), vec3((-0.0) - (_198 * NORMAL.x), (-0.0) - (_198 * NORMAL.y), (-0.0) - (_198 * NORMAL.z)));
    float _341 = inversesqrt(dot(vec3(_335, _336, _337), vec3(_335, _336, _337)));
    float _344 = _341 * _337;
    float _345 = (_341 * _335) + (((_284.x * 2.0) + (-1.0)) * cbMtdParam._m0[22u].x);
    float _346 = (_341 * _336) + (((_284.y * 2.0) + (-1.0)) * cbMtdParam._m0[22u].y);
    float _347 = _345 * cbMtdParam._m0[20u].w;
    float _348 = _346 * cbMtdParam._m0[20u].z;
    float _349 = fract(TEXCOORD.x);
    float _350 = fract(TEXCOORD.y);
    float _356;
    if (_347 > 0.0)
    {
        _356 = (1.0 - _349) / _347;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_347 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _349) / _347;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _356 = frontier_phi_3_2_ladder;
    }
    float _364;
    if (_348 > 0.0)
    {
        _364 = (1.0 - _350) / _348;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_348 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _350) / _348;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _364 = frontier_phi_7_6_ladder;
    }
    bool _366 = _344 > 0.0;
    float _368 = _366 ? (cbMtdParam._m0[16u].x / _344) : 5000.0;
    float _369 = isnan(_364) ? _356 : (isnan(_356) ? _364 : min(_356, _364));
    float _370 = isnan(_368) ? _369 : (isnan(_369) ? _368 : min(_369, _368));
    float _374 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _375 = _349 + (-0.5);
    float _378 = _350 + (-0.5);
    float _381 = ((_370 * _344) + _374) / _374;
    vec4 _406 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (((((_375 + (_370 * _347)) / _381) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (((((_378 + (_370 * _348)) / _381) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    float _416 = cbMtdParam._m0[9u].x * _406.x;
    float _417 = cbMtdParam._m0[9u].y * _406.y;
    float _418 = cbMtdParam._m0[9u].z * _406.z;
    float _437 = _345 * cbMtdParam._m0[22u].w;
    float _438 = _346 * cbMtdParam._m0[22u].z;
    bool _439 = _437 > 0.0;
    float _444;
    if (_439)
    {
        _444 = (1.0 - _349) / _437;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_437 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _349) / _437;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _444 = frontier_phi_11_10_ladder;
    }
    bool _446 = _438 > 0.0;
    float _451;
    if (_446)
    {
        _451 = (1.0 - _350) / _438;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_438 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _350) / _438;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _451 = frontier_phi_15_14_ladder;
    }
    float _454 = _366 ? (cbMtdParam._m0[18u].x / _344) : 5000.0;
    float _455 = isnan(_451) ? _444 : (isnan(_444) ? _451 : min(_444, _451));
    float _456 = isnan(_454) ? _455 : (isnan(_455) ? _454 : min(_455, _454));
    float _460 = cbMtdParam._m0[19u].y * cbMtdParam._m0[18u].x;
    float _464 = ((_456 * _344) + _460) / _460;
    float _469 = cbMtdParam._m0[19u].x - cbMtdParam._m0[20u].x * trunc(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    float _471 = floor(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    vec4 _487 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_375 + (_456 * _437)) / _464) + 0.5) + _469) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_378 + (_456 * _438)) / _464) + 0.5) + _471) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[0u].w));
    float _499;
    if (_439)
    {
        _499 = (1.0 - _349) / _437;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_437 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _349) / _437;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _499 = frontier_phi_19_18_ladder;
    }
    float _505;
    if (_446)
    {
        _505 = (1.0 - _350) / _438;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_438 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _350) / _438;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _505 = frontier_phi_23_22_ladder;
    }
    float _507 = isnan(_505) ? _499 : (isnan(_499) ? _505 : min(_499, _505));
    float _508 = isnan(_454) ? _507 : (isnan(_507) ? _454 : min(_507, _454));
    float _515 = ((_508 * _344) + _460) / _460;
    vec4 _535 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_375 + (_508 * _437)) / _515) + 0.5) + _469) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_378 + (_508 * _438)) / _515) + 0.5) + _471) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[8u].w));
    float _537 = _535.x;
    float _562 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _566 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _567 = _263 * _566;
    float _568 = _264 * _566;
    float _569 = _265 * _566;
    vec4 _574 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _576 = _574.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _645 = sqrt(((_263 * _263) + (_264 * _264)) + (_265 * _265));
        float _651 = (cbMatDynParam._m0[5u].x * _645) + cbMatDynParam._m0[5u].y;
        float _2508 = isnan(0.0) ? _651 : (isnan(_651) ? 0.0 : max(_651, 0.0));
        float _652 = isnan(1.0) ? _2508 : (isnan(_2508) ? 1.0 : min(_2508, 1.0));
        float _656 = (cbMatDynParam._m0[5u].z * _645) + cbMatDynParam._m0[5u].w;
        float _2519 = isnan(0.0) ? _656 : (isnan(_656) ? 0.0 : max(_656, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2519 : (isnan(_2519) ? 1.0 : min(_2519, 1.0))) - _652)) + _652) < ((_576 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _588 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _589 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _598 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_588 * cbSceneParam._m0[86u].x, _589 * cbSceneParam._m0[86u].y));
    float _601 = _598.x * TEXCOORD_4.z;
    float _602 = (-0.0) - _567;
    float _603 = (-0.0) - _568;
    float _604 = (-0.0) - _569;
    float _626 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _630 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _634 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _795;
    float _797;
    float _798;
    float _799;
    float _800;
    float _801;
    float _802;
    float _803;
    float _804;
    float _805;
    float _806;
    float _807;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _718 = (cbModelParam._m0[37u].x * ((((fma(_634, cbModelParam._m0[26u].z, fma(_630, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _626)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _720 = (cbModelParam._m0[37u].y * ((((fma(_634, cbModelParam._m0[27u].z, fma(_630, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _626)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _721 = (((((fma(_634, cbModelParam._m0[28u].z, fma(_630, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _626)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _724 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_718, _720, _721), 0.0);
        vec4 _731 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_718, _720, _721), 0.0);
        vec4 _738 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_718, _720, _721), 0.0);
        vec4 _745 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_718, _720, _721), 0.0);
        float _758 = exp2((_724.w + (-0.5)) * 20.0) * 2.0;
        float _768 = exp2((_731.w + (-0.5)) * 20.0) * 2.0;
        float _778 = exp2((_738.w + (-0.5)) * 20.0) * 2.0;
        float _788 = exp2((_745.w + (-0.5)) * 20.0) * 2.0;
        float _789 = _788 * (_745.x + (-0.5));
        float _790 = _788 * (_745.y + (-0.5));
        float _791 = _788 * (_745.z + (-0.5));
        _795 = _758 * (_724.z + (-0.5));
        _797 = _758 * (_724.y + (-0.5));
        _798 = _758 * (_724.x + (-0.5));
        _799 = _768 * (_731.z + (-0.5));
        _800 = _768 * (_731.y + (-0.5));
        _801 = _768 * (_731.x + (-0.5));
        _802 = _778 * (_738.z + (-0.5));
        _803 = _778 * (_738.y + (-0.5));
        _804 = _778 * (_738.x + (-0.5));
        _805 = isnan(0.0) ? _791 : (isnan(_791) ? 0.0 : max(_791, 0.0));
        _806 = isnan(0.0) ? _790 : (isnan(_790) ? 0.0 : max(_790, 0.0));
        _807 = isnan(0.0) ? _789 : (isnan(_789) ? 0.0 : max(_789, 0.0));
    }
    else
    {
        _795 = _796;
        _797 = _796;
        _798 = _796;
        _799 = _796;
        _800 = _796;
        _801 = _796;
        _802 = _796;
        _803 = _796;
        _804 = _796;
        _805 = _796;
        _806 = _796;
        _807 = _796;
    }
    float _938;
    float _939;
    float _940;
    float _941;
    float _942;
    float _943;
    float _944;
    float _945;
    float _946;
    float _947;
    float _948;
    float _949;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _864 = (cbModelParam._m0[38u].x * ((((fma(_634, cbModelParam._m0[30u].z, fma(_630, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _626)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _865 = (cbModelParam._m0[38u].y * ((((fma(_634, cbModelParam._m0[31u].z, fma(_630, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _626)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _866 = (((((fma(_634, cbModelParam._m0[32u].z, fma(_630, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _626)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _868 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_864, _865, _866), 0.0);
        vec4 _875 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_864, _865, _866), 0.0);
        vec4 _882 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_864, _865, _866), 0.0);
        vec4 _889 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_864, _865, _866), 0.0);
        float _901 = exp2((_868.w + (-0.5)) * 20.0) * 2.0;
        float _911 = exp2((_875.w + (-0.5)) * 20.0) * 2.0;
        float _921 = exp2((_882.w + (-0.5)) * 20.0) * 2.0;
        float _931 = exp2((_889.w + (-0.5)) * 20.0) * 2.0;
        float _932 = _931 * (_889.x + (-0.5));
        float _933 = _931 * (_889.y + (-0.5));
        float _934 = _931 * (_889.z + (-0.5));
        _938 = _901 * (_868.z + (-0.5));
        _939 = _901 * (_868.y + (-0.5));
        _940 = _901 * (_868.x + (-0.5));
        _941 = _911 * (_875.z + (-0.5));
        _942 = _911 * (_875.y + (-0.5));
        _943 = _911 * (_875.x + (-0.5));
        _944 = _921 * (_882.z + (-0.5));
        _945 = _921 * (_882.y + (-0.5));
        _946 = _921 * (_882.x + (-0.5));
        _947 = isnan(0.0) ? _934 : (isnan(_934) ? 0.0 : max(_934, 0.0));
        _948 = isnan(0.0) ? _933 : (isnan(_933) ? 0.0 : max(_933, 0.0));
        _949 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
    }
    else
    {
        _938 = _796;
        _939 = _796;
        _940 = _796;
        _941 = _796;
        _942 = _796;
        _943 = _796;
        _944 = _796;
        _945 = _796;
        _946 = _796;
        _947 = _796;
        _948 = _796;
        _949 = _796;
    }
    float _964 = _567 * (-0.5);
    float _965 = _568 * (-0.5);
    float _966 = _569 * (-0.5);
    float _967 = dot(vec4(_964, _965, _966, 1.0), vec4(_940, _943, _946, _949));
    float _970 = dot(vec4(_964, _965, _966, 1.0), vec4(_939, _942, _945, _948));
    float _973 = dot(vec4(_964, _965, _966, 1.0), vec4(_938, _941, _944, _947));
    float _1008;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _980 = dot(vec4(_964, _965, _966, 1.0), vec4(_795, _799, _802, _805));
        float _984 = dot(vec4(_964, _965, _966, 1.0), vec4(_797, _800, _803, _806));
        float _988 = dot(vec4(_964, _965, _966, 1.0), vec4(_798, _801, _804, _807));
        float _995 = dot(vec4(cbModelParam._m0[39u]), vec4(_964, _965, _966, 1.0));
        _1008 = dot(vec3(isnan(0.0) ? _988 : (isnan(_988) ? 0.0 : max(_988, 0.0)), isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0)), isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_995) ? 0.0 : (isnan(0.0) ? _995 : max(0.0, _995))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1008 = 1.0;
    }
    float _1019;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1010 = dot(vec4(cbModelParam._m0[40u]), vec4(_964, _965, _966, 1.0));
        _1019 = dot(vec3(isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0)), isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0)), isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1010) ? 0.0 : (isnan(0.0) ? _1010 : max(0.0, _1010))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1019 = 1.0;
    }
    float _1023 = (_1019 * cbModelParam._m0[1u].x) + (_1008 * (1.0 - cbModelParam._m0[1u].x));
    float _1029 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1113;
    float _1115;
    float _1117;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1080 = fma(_634, cbModelParam._m0[13u].z, fma(_630, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _626)) + cbModelParam._m0[13u].w;
        float _1084 = fma(_634, cbModelParam._m0[14u].z, fma(_630, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _626)) + cbModelParam._m0[14u].w;
        float _1088 = fma(_634, cbModelParam._m0[15u].z, fma(_630, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _626)) + cbModelParam._m0[15u].w;
        float _1091 = fma(_604, cbModelParam._m0[13u].z, fma(_603, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _602));
        float _1094 = fma(_604, cbModelParam._m0[14u].z, fma(_603, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _602));
        float _1097 = fma(_604, cbModelParam._m0[15u].z, fma(_603, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _602));
        float _1123;
        if (_1091 > 0.0)
        {
            _1123 = abs((1.0 - _1080) / _1091);
        }
        else
        {
            float frontier_phi_41_39_ladder;
            if (_1091 < 0.0)
            {
                frontier_phi_41_39_ladder = abs((_1080 + 1.0) / _1091);
            }
            else
            {
                frontier_phi_41_39_ladder = 5000.0;
            }
            _1123 = frontier_phi_41_39_ladder;
        }
        float _1399;
        if (_1094 > 0.0)
        {
            _1399 = abs((1.0 - _1084) / _1094);
        }
        else
        {
            float frontier_phi_50_46_ladder;
            if (_1094 < 0.0)
            {
                frontier_phi_50_46_ladder = abs((_1084 + 1.0) / _1094);
            }
            else
            {
                frontier_phi_50_46_ladder = 5000.0;
            }
            _1399 = frontier_phi_50_46_ladder;
        }
        float _1704;
        if (_1097 > 0.0)
        {
            _1704 = abs((1.0 - _1088) / _1097);
        }
        else
        {
            float frontier_phi_64_57_ladder;
            if (_1097 < 0.0)
            {
                frontier_phi_64_57_ladder = abs((_1088 + 1.0) / _1097);
            }
            else
            {
                frontier_phi_64_57_ladder = 5000.0;
            }
            _1704 = frontier_phi_64_57_ladder;
        }
        float _1706 = isnan(_1399) ? _1123 : (isnan(_1123) ? _1399 : min(_1123, _1399));
        float _1707 = isnan(_1704) ? _1706 : (isnan(_1706) ? _1704 : min(_1706, _1704));
        float _1711 = (_1707 * _1091) + _1080;
        float _1712 = (_1707 * _1094) + _1084;
        float _1713 = (_1707 * _1097) + _1088;
        float _1714 = _1707 * 9.9999997473787516355514526367188e-05;
        float _1715 = (-1.0) - _1714;
        float _1717 = _1714 + 1.0;
        float frontier_phi_40_64_ladder;
        float frontier_phi_40_64_ladder_1;
        float frontier_phi_40_64_ladder_2;
        if ((_1713 > _1717) || ((_1713 < _1715) || ((_1712 > _1717) || ((_1712 < _1715) || ((_1711 < _1715) || (_1711 > _1717))))))
        {
            frontier_phi_40_64_ladder = 0.0;
            frontier_phi_40_64_ladder_1 = 0.0;
            frontier_phi_40_64_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1840 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1713, cbModelParam._m0[9u].z, fma(_1712, cbModelParam._m0[9u].y, _1711 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1713, cbModelParam._m0[10u].z, fma(_1712, cbModelParam._m0[10u].y, _1711 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1713, cbModelParam._m0[11u].z, fma(_1712, cbModelParam._m0[11u].y, _1711 * cbModelParam._m0[11u].x))), _1029);
            frontier_phi_40_64_ladder = _1840.z * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_1 = _1840.y * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_2 = _1840.x * cbModelParam._m0[1u].y;
        }
        _1113 = frontier_phi_40_64_ladder_2;
        _1115 = frontier_phi_40_64_ladder_1;
        _1117 = frontier_phi_40_64_ladder;
    }
    else
    {
        vec4 _1101 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_602, _603, _604), _1029);
        _1113 = _1101.x * cbModelParam._m0[1u].y;
        _1115 = _1101.y * cbModelParam._m0[1u].y;
        _1117 = _1101.z * cbModelParam._m0[1u].y;
    }
    float _1120 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1208;
    float _1210;
    float _1212;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1172 = fma(_634, cbModelParam._m0[21u].z, fma(_630, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _626)) + cbModelParam._m0[21u].w;
        float _1176 = fma(_634, cbModelParam._m0[22u].z, fma(_630, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _626)) + cbModelParam._m0[22u].w;
        float _1180 = fma(_634, cbModelParam._m0[23u].z, fma(_630, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _626)) + cbModelParam._m0[23u].w;
        float _1183 = fma(_604, cbModelParam._m0[21u].z, fma(_603, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _602));
        float _1186 = fma(_604, cbModelParam._m0[22u].z, fma(_603, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _602));
        float _1189 = fma(_604, cbModelParam._m0[23u].z, fma(_603, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _602));
        float _1404;
        if (_1183 > 0.0)
        {
            _1404 = abs((1.0 - _1172) / _1183);
        }
        else
        {
            float frontier_phi_52_48_ladder;
            if (_1183 < 0.0)
            {
                frontier_phi_52_48_ladder = abs((_1172 + 1.0) / _1183);
            }
            else
            {
                frontier_phi_52_48_ladder = 5000.0;
            }
            _1404 = frontier_phi_52_48_ladder;
        }
        float _1730;
        if (_1186 > 0.0)
        {
            _1730 = abs((1.0 - _1176) / _1186);
        }
        else
        {
            float frontier_phi_66_59_ladder;
            if (_1186 < 0.0)
            {
                frontier_phi_66_59_ladder = abs((_1176 + 1.0) / _1186);
            }
            else
            {
                frontier_phi_66_59_ladder = 5000.0;
            }
            _1730 = frontier_phi_66_59_ladder;
        }
        float _1902;
        if (_1189 > 0.0)
        {
            _1902 = abs((1.0 - _1180) / _1189);
        }
        else
        {
            float frontier_phi_84_77_ladder;
            if (_1189 < 0.0)
            {
                frontier_phi_84_77_ladder = abs((_1180 + 1.0) / _1189);
            }
            else
            {
                frontier_phi_84_77_ladder = 5000.0;
            }
            _1902 = frontier_phi_84_77_ladder;
        }
        float _1904 = isnan(_1730) ? _1404 : (isnan(_1404) ? _1730 : min(_1404, _1730));
        float _1905 = isnan(_1902) ? _1904 : (isnan(_1904) ? _1902 : min(_1904, _1902));
        float _1909 = (_1905 * _1183) + _1172;
        float _1910 = (_1905 * _1186) + _1176;
        float _1911 = (_1905 * _1189) + _1180;
        float _1912 = _1905 * 9.9999997473787516355514526367188e-05;
        float _1913 = (-1.0) - _1912;
        float _1915 = _1912 + 1.0;
        float frontier_phi_49_84_ladder;
        float frontier_phi_49_84_ladder_1;
        float frontier_phi_49_84_ladder_2;
        if ((_1911 > _1915) || ((_1911 < _1913) || ((_1910 > _1915) || ((_1910 < _1913) || ((_1909 < _1913) || (_1909 > _1915))))))
        {
            frontier_phi_49_84_ladder = 0.0;
            frontier_phi_49_84_ladder_1 = 0.0;
            frontier_phi_49_84_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2080 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1911, cbModelParam._m0[17u].z, fma(_1910, cbModelParam._m0[17u].y, _1909 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1911, cbModelParam._m0[18u].z, fma(_1910, cbModelParam._m0[18u].y, _1909 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1911, cbModelParam._m0[19u].z, fma(_1910, cbModelParam._m0[19u].y, _1909 * cbModelParam._m0[19u].x))), _1120);
            frontier_phi_49_84_ladder = _2080.x * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_1 = _2080.y * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_2 = _2080.z * cbModelParam._m0[1u].z;
        }
        _1208 = frontier_phi_49_84_ladder;
        _1210 = frontier_phi_49_84_ladder_1;
        _1212 = frontier_phi_49_84_ladder_2;
    }
    else
    {
        vec4 _1192 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_602, _603, _604), _1120);
        _1208 = _1192.x * cbModelParam._m0[1u].z;
        _1210 = _1192.y * cbModelParam._m0[1u].z;
        _1212 = _1192.z * cbModelParam._m0[1u].z;
    }
    float _1224 = _601 * 0.01200000010430812835693359375;
    float _1226 = _1224 * ((cbModelParam._m0[1u].w * (_1208 - _1113)) + _1113);
    float _1227 = _1224 * ((cbModelParam._m0[1u].w * (_1210 - _1115)) + _1115);
    float _1228 = _1224 * ((cbModelParam._m0[1u].w * (_1212 - _1117)) + _1117);
    float _1249 = fma(_1228, cbSceneParam._m0[89u].z, fma(_1227, cbSceneParam._m0[89u].y, _1226 * cbSceneParam._m0[89u].x));
    float _1252 = fma(_1228, cbSceneParam._m0[90u].z, fma(_1227, cbSceneParam._m0[90u].y, _1226 * cbSceneParam._m0[90u].x));
    float _1255 = fma(_1228, cbSceneParam._m0[91u].z, fma(_1227, cbSceneParam._m0[91u].y, _1226 * cbSceneParam._m0[91u].x));
    uint _1262 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1266 = floatBitsToUint(cbInstanceData._m0[_1262 + 5u]);
    uint _1268 = _1266.x * 14u;
    uint _1269 = _1268 + 13u;
    float _1274 = _601 + (-1.0);
    float _1277 = (cbLight._m0[_1269].x * _1274) + 1.0;
    float _1278 = (cbLight._m0[_1269].y * _1274) + 1.0;
    uint _1279 = _1268 + 8u;
    float _1290 = cbLight._m0[_1268].x + _567;
    float _1291 = cbLight._m0[_1268].y + _568;
    float _1292 = cbLight._m0[_1268].z + _569;
    float _1296 = inversesqrt(dot(vec3(_1290, _1291, _1292), vec3(_1290, _1291, _1292)));
    float _1300 = dot(vec3(0.0), vec3(cbLight._m0[_1268].xyz));
    float _2645 = isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0));
    float _1303 = isnan(1.0) ? _2645 : (isnan(_2645) ? 1.0 : min(_2645, 1.0));
    float _1304 = dot(vec3(0.0), vec3(_567, _568, _569));
    float _2656 = isnan(0.0) ? _1304 : (isnan(_1304) ? 0.0 : max(_1304, 0.0));
    float _1307 = isnan(1.0) ? _2656 : (isnan(_2656) ? 1.0 : min(_2656, 1.0));
    float _1308 = dot(vec3(cbLight._m0[_1268].xyz), vec3(_1290 * _1296, _1291 * _1296, _1292 * _1296));
    float _2667 = isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0));
    float _1319 = (exp2(log2(1.0 - (isnan(1.0) ? _2667 : (isnan(_2667) ? 1.0 : min(_2667, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1325 = (0.5 / ((_1303 + 9.9999999392252902907785028219223e-09) + _1307)) * _1303;
    float _2678 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
    float _1327 = (isnan(1.0) ? _2678 : (isnan(_2678) ? 1.0 : min(_2678, 1.0))) * 0.31831014156341552734375;
    float _1329 = isnan(1.0) ? _1277 : (isnan(_1277) ? 1.0 : min(_1277, 1.0));
    uint _1339 = _1268 + 9u;
    uint _1345 = _1268 | 1u;
    float _1351 = cbLight._m0[_1345].x + _567;
    float _1352 = cbLight._m0[_1345].y + _568;
    float _1353 = cbLight._m0[_1345].z + _569;
    float _1357 = inversesqrt(dot(vec3(_1351, _1352, _1353), vec3(_1351, _1352, _1353)));
    float _1361 = dot(vec3(0.0), vec3(cbLight._m0[_1345].xyz));
    float _2694 = isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0));
    float _1364 = isnan(1.0) ? _2694 : (isnan(_2694) ? 1.0 : min(_2694, 1.0));
    float _1365 = dot(vec3(cbLight._m0[_1345].xyz), vec3(_1351 * _1357, _1352 * _1357, _1353 * _1357));
    float _2705 = isnan(0.0) ? _1365 : (isnan(_1365) ? 0.0 : max(_1365, 0.0));
    float _1374 = (exp2(log2(1.0 - (isnan(1.0) ? _2705 : (isnan(_2705) ? 1.0 : min(_2705, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1378 = (0.5 / ((_1364 + 9.9999999392252902907785028219223e-09) + _1307)) * _1364;
    float _2716 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
    float _1380 = (isnan(1.0) ? _2716 : (isnan(_2716) ? 1.0 : min(_2716, 1.0))) * 0.31831014156341552734375;
    float _1381 = isnan(1.0) ? _1278 : (isnan(_1278) ? 1.0 : min(_1278, 1.0));
    float _1391 = (((_1374 * cbLight._m0[_1339].x) * _1380) * _1381) + (((_1319 * cbLight._m0[_1279].x) * _1327) * _1329);
    float _1392 = (((_1374 * cbLight._m0[_1339].y) * _1380) * _1381) + (((_1319 * cbLight._m0[_1279].y) * _1327) * _1329);
    float _1393 = (((_1374 * cbLight._m0[_1339].z) * _1380) * _1381) + (((_1319 * cbLight._m0[_1279].z) * _1327) * _1329);
    float _1510;
    float _1512;
    float _1514;
    if (_1266.y == 0u)
    {
        float _1449 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1450 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1449;
        float _1451 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1449;
        float _1452 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1449;
        uvec4 _1464 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1465 = _1464.x;
        uint _1476 = uint((float(_1464.y) * floor(float(uint(cbSceneParam._m0[85u].y * _589) / _1465))) + floor(float(uint(cbSceneParam._m0[85u].x * _588) / _1465)));
        float _1486 = (log2(_1452 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1487 = isnan(0.0) ? _1486 : (isnan(_1486) ? 0.0 : max(_1486, 0.0));
        uint _1490 = uint(isnan(14.0) ? _1487 : (isnan(_1487) ? 14.0 : min(_1487, 14.0)));
        uvec4 _1495 = texelFetch(g_lightClusterGridBuffer, int(((_1490 << 2u) + (_1476 << 6u)) >> 2u));
        uint _1496 = _1495.x;
        uint _1497 = _1464.z;
        float _1587;
        float _1589;
        float _1591;
        if (((((1u << ((_1497 >> 4u) & 15u)) + 4294967295u) & _1496) == 0u) || ((_1497 & 240u) == 0u))
        {
            _1587 = 0.0;
            _1589 = 0.0;
            _1591 = 0.0;
        }
        else
        {
            float _1588;
            float _1590;
            float _1592;
            float _1755 = 0.0;
            float _1756 = 0.0;
            float _1757 = 0.0;
            uint _1758 = 0u;
            uint _1767;
            bool _1768;
            for (;;)
            {
                _1767 = texelFetch(g_lightClassification, int((((_1490 << 5u) + (_1476 << 9u)) + (_1758 << 2u)) >> 2u)).x;
                _1768 = _1767 == 0u;
                float frontier_phi_79_pred;
                float frontier_phi_79_pred_1;
                float frontier_phi_79_pred_2;
                if (_1768)
                {
                    frontier_phi_79_pred = _1757;
                    frontier_phi_79_pred_1 = _1756;
                    frontier_phi_79_pred_2 = _1755;
                }
                else
                {
                    float _1942;
                    float _1943;
                    float _1944;
                    uint _1945;
                    _1942 = _1755;
                    _1943 = _1756;
                    _1944 = _1757;
                    _1945 = _1767;
                    float _1849;
                    float _1850;
                    float _1851;
                    for (;;)
                    {
                        uint _1949 = uint(findLSB(_1945)) + (_1758 << 5u);
                        uint _1946 = (_1945 + 4294967295u) & _1945;
                        uint _1951 = _1949 * 48u;
                        vec4 _1965 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1951)).x, texelFetch(g_PointLightRenderingBuffer, int(_1951 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1951 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1951 + 3u)).x));
                        uint _1982 = (_1949 * 48u) + 8u;
                        vec3 _1993 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_1982)).x, texelFetch(g_PointLightRenderingBuffer, int(_1982 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1982 + 2u)).x));
                        float _1997 = _1965.x - _1450;
                        float _1998 = _1965.y - _1451;
                        float _1999 = _1965.z - _1452;
                        float _2000 = dot(vec3(_1997, _1998, _1999), vec3(_1997, _1998, _1999));
                        float _2003 = inversesqrt(_2000);
                        float _2012 = 1.0 - (_2000 * _1965.w);
                        float _2742 = isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0));
                        float _2014 = sqrt(_2000) * uintBitsToFloat(uvec4(_1972, _1973, _1974, texelFetch(g_PointLightRenderingBuffer, int(((_1949 * 48u) + 4u) + 3u)).x)).w;
                        float _2017 = 1.39999997615814208984375 / (_2014 + 1.39999997615814208984375);
                        float _2018 = _2017 * _2017;
                        float _2021 = ((1.0 - _2018) * dot(vec3(0.0), vec3(_2003 * _1997, _2003 * _1998, _2003 * _1999))) + _2018;
                        float _2023 = (-0.0) - _1450;
                        float _2024 = (-0.0) - _1451;
                        float _2025 = (-0.0) - _1452;
                        float _2029 = inversesqrt(dot(vec3(_2023, _2024, _2025), vec3(_2023, _2024, _2025)));
                        float _2033 = dot(vec3(0.0), vec3(_2029 * _2023, _2029 * _2024, _2029 * _2025));
                        float _2753 = isnan(0.0) ? _2033 : (isnan(_2033) ? 0.0 : max(_2033, 0.0));
                        float _2764 = isnan(0.0) ? _2021 : (isnan(_2021) ? 0.0 : max(_2021, 0.0));
                        float _2037 = isnan(1.0) ? _2764 : (isnan(_2764) ? 1.0 : min(_2764, 1.0));
                        float _2041 = (0.5 / (((isnan(1.0) ? _2753 : (isnan(_2753) ? 1.0 : min(_2753, 1.0))) + 9.9999999392252902907785028219223e-09) + _2037)) * _2037;
                        float _2775 = isnan(0.0) ? _2041 : (isnan(_2041) ? 0.0 : max(_2041, 0.0));
                        float _2050 = (((isnan(1.0) ? _2775 : (isnan(_2775) ? 1.0 : min(_2775, 1.0))) * 3.1415927410125732421875) / (((_2014 * _2014) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2742 : (isnan(_2742) ? 1.0 : min(_2742, 1.0)));
                        _1849 = (_2050 * _1993.x) + _1942;
                        _1850 = (_2050 * _1993.y) + _1943;
                        _1851 = (_2050 * _1993.z) + _1944;
                        if (_1946 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _1942 = _1849;
                            _1943 = _1850;
                            _1944 = _1851;
                            _1945 = _1946;
                        }
                    }
                    frontier_phi_79_pred = _1851;
                    frontier_phi_79_pred_1 = _1850;
                    frontier_phi_79_pred_2 = _1849;
                }
                _1592 = frontier_phi_79_pred;
                _1590 = frontier_phi_79_pred_1;
                _1588 = frontier_phi_79_pred_2;
                uint _1759 = _1758 + 1u;
                if (_1759 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1755 = _1588;
                    _1756 = _1590;
                    _1757 = _1592;
                    _1758 = _1759;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1587 = _1588;
            _1589 = _1590;
            _1591 = _1592;
        }
        uvec4 _1595 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1596 = _1595.z;
        uint _1598 = (_1596 >> 8u) & 15u;
        float _1735;
        float _1737;
        float _1739;
        if (((4294967295u << _1598) & _1496) == 0u)
        {
            _1735 = _1587;
            _1737 = _1589;
            _1739 = _1591;
        }
        else
        {
            float _1751 = inversesqrt(dot(vec3(_1450, _1451, _1452), vec3(_1450, _1451, _1452)));
            float frontier_phi_68_69_ladder;
            float frontier_phi_68_69_ladder_1;
            float frontier_phi_68_69_ladder_2;
            if (_1598 < ((_1596 >> 12u) & 15u))
            {
                float _1736;
                float _1738;
                float _1740;
                float _1928 = _1587;
                float _1929 = _1589;
                float _1930 = _1591;
                uint _1931 = _1598;
                uint _1940;
                bool _1941;
                for (;;)
                {
                    _1940 = texelFetch(g_lightClassification, int((((_1490 << 5u) + (_1476 << 9u)) + (_1931 << 2u)) >> 2u)).x;
                    _1941 = _1940 == 0u;
                    float frontier_phi_93_pred;
                    float frontier_phi_93_pred_1;
                    float frontier_phi_93_pred_2;
                    if (_1941)
                    {
                        frontier_phi_93_pred = _1930;
                        frontier_phi_93_pred_1 = _1929;
                        frontier_phi_93_pred_2 = _1928;
                    }
                    else
                    {
                        float _2085;
                        float _2086;
                        float _2087;
                        float _2306;
                        float _2307;
                        float _2308;
                        float _2095 = _1928;
                        float _2096 = _1929;
                        float _2097 = _1930;
                        uint _2098 = _1940;
                        uint _2099;
                        uint _2109;
                        vec4 _2124;
                        float _2125;
                        vec3 _2137;
                        vec4 _2152;
                        vec4 _2167;
                        float _2213;
                        bool _2214;
                        for (;;)
                        {
                            _2109 = ((_1931 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2098));
                            _2099 = (_2098 + 4294967295u) & _2098;
                            uint _2111 = _2109 * 40u;
                            _2124 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2111)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2111 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2111 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2111 + 3u)).x));
                            _2125 = _2124.w;
                            uint _2127 = (_2109 * 40u) + 8u;
                            _2137 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2127)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2127 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2127 + 2u)).x));
                            uint _2139 = (_2109 * 40u) + 16u;
                            _2152 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2139)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2139 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2139 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2139 + 3u)).x));
                            uint _2154 = (_2109 * 40u) + 20u;
                            _2167 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2154)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2154 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2154 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2154 + 3u)).x));
                            uint _2169 = (_2109 * 40u) + 24u;
                            vec4 _2182 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2169)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2169 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2169 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2169 + 3u)).x));
                            uint _2188 = (_2109 * 40u) + 28u;
                            vec4 _2201 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2188)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2188 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2188 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2188 + 3u)).x));
                            _2213 = fma(_1452, _2201.z, fma(_1451, _2201.y, _2201.x * _1450)) + _2201.w;
                            _2214 = !((fma(_1452, _2182.z, fma(_1451, _2182.y, _2182.x * _1450)) + _2182.w) <= 0.0);
                            float frontier_phi_99_pred;
                            float frontier_phi_99_pred_1;
                            float frontier_phi_99_pred_2;
                            if (_2214)
                            {
                                float _2248 = _2124.x - _1450;
                                float _2249 = _2124.y - _1451;
                                float _2250 = _2124.z - _1452;
                                float _2251 = dot(vec3(_2248, _2249, _2250), vec3(_2248, _2249, _2250));
                                float _2254 = inversesqrt(_2251);
                                float _2261 = 1.0 - (_2251 / (_2125 * _2125));
                                float _2786 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
                                float _2263 = sqrt(_2251) * uintBitsToFloat(uvec4(_2217, _2218, _2219, texelFetch(g_SpotLightRenderingBuffer, int(((_2109 * 40u) + 4u) + 3u)).x)).w;
                                float _2265 = 1.39999997615814208984375 / (_2263 + 1.39999997615814208984375);
                                float _2266 = _2265 * _2265;
                                float _2269 = (fma(_1452, _2152.z, fma(_1451, _2152.y, _2152.x * _1450)) + _2152.w) / _2213;
                                float _2270 = (fma(_1452, _2167.z, fma(_1451, _2167.y, _2167.x * _1450)) + _2167.w) / _2213;
                                float _2274 = 1.0 - dot(vec2(_2269, _2270), vec2(_2269, _2270));
                                float _2797 = isnan(0.0) ? _2274 : (isnan(_2274) ? 0.0 : max(_2274, 0.0));
                                float _2282 = dot(vec3(0.0), vec3((-0.0) - (_1450 * _1751), (-0.0) - (_1451 * _1751), (-0.0) - (_1452 * _1751)));
                                float _2808 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0));
                                float _2290 = ((1.0 - _2266) * dot(vec3(0.0), vec3(_2254 * _2248, _2254 * _2249, _2254 * _2250))) + _2266;
                                float _2819 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
                                float _2291 = isnan(1.0) ? _2819 : (isnan(_2819) ? 1.0 : min(_2819, 1.0));
                                float _2295 = (0.5 / (((isnan(1.0) ? _2808 : (isnan(_2808) ? 1.0 : min(_2808, 1.0))) + 9.9999999392252902907785028219223e-09) + _2291)) * _2291;
                                float _2830 = isnan(0.0) ? _2295 : (isnan(_2295) ? 0.0 : max(_2295, 0.0));
                                float _2302 = ((isnan(1.0) ? _2797 : (isnan(_2797) ? 1.0 : min(_2797, 1.0))) * (isnan(1.0) ? _2786 : (isnan(_2786) ? 1.0 : min(_2786, 1.0)))) * (((isnan(1.0) ? _2830 : (isnan(_2830) ? 1.0 : min(_2830, 1.0))) * 3.1415927410125732421875) / (((_2263 * _2263) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_99_pred = _2302 * _2137.z;
                                frontier_phi_99_pred_1 = _2302 * _2137.y;
                                frontier_phi_99_pred_2 = _2302 * _2137.x;
                            }
                            else
                            {
                                frontier_phi_99_pred = 0.0;
                                frontier_phi_99_pred_1 = 0.0;
                                frontier_phi_99_pred_2 = 0.0;
                            }
                            _2308 = frontier_phi_99_pred;
                            _2307 = frontier_phi_99_pred_1;
                            _2306 = frontier_phi_99_pred_2;
                            _2085 = _2306 + _2095;
                            _2086 = _2307 + _2096;
                            _2087 = _2308 + _2097;
                            if (_2099 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2095 = _2085;
                                _2096 = _2086;
                                _2097 = _2087;
                                _2098 = _2099;
                                continue;
                            }
                        }
                        frontier_phi_93_pred = _2087;
                        frontier_phi_93_pred_1 = _2086;
                        frontier_phi_93_pred_2 = _2085;
                    }
                    _1740 = frontier_phi_93_pred;
                    _1738 = frontier_phi_93_pred_1;
                    _1736 = frontier_phi_93_pred_2;
                    uint _1932 = _1931 + 1u;
                    if (_1932 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _1928 = _1736;
                        _1929 = _1738;
                        _1930 = _1740;
                        _1931 = _1932;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_68_69_ladder = _1740;
                frontier_phi_68_69_ladder_1 = _1738;
                frontier_phi_68_69_ladder_2 = _1736;
            }
            else
            {
                frontier_phi_68_69_ladder = _1591;
                frontier_phi_68_69_ladder_1 = _1589;
                frontier_phi_68_69_ladder_2 = _1587;
            }
            _1735 = frontier_phi_68_69_ladder_2;
            _1737 = frontier_phi_68_69_ladder_1;
            _1739 = frontier_phi_68_69_ladder;
        }
        float _1744 = isnan(1.0) ? _601 : (isnan(_601) ? 1.0 : min(_601, 1.0));
        _1510 = ((_1735 * 0.039999999105930328369140625) * _1744) + _1391;
        _1512 = ((_1737 * 0.039999999105930328369140625) * _1744) + _1392;
        _1514 = ((_1739 * 0.039999999105930328369140625) * _1744) + _1393;
    }
    else
    {
        _1510 = _1391;
        _1512 = _1392;
        _1514 = _1393;
    }
    uint _1520 = _1262 + 9u;
    uint _1521 = _1520 + uint(cbMatDynParam._m0[0u].w);
    float _1536 = (cbInstanceData._m0[_1521].x * ((_537 * ((_487.x * cbMtdParam._m0[10u].x) - _416)) + _416)) + ((_1510 + ((isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0))) * _1023)) * cbPerFrame._m0[3u].x);
    float _1537 = (cbInstanceData._m0[_1521].y * ((_537 * ((_487.y * cbMtdParam._m0[10u].y) - _417)) + _417)) + ((_1512 + ((isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0))) * _1023)) * cbPerFrame._m0[3u].x);
    float _1538 = (cbInstanceData._m0[_1521].z * ((_537 * ((_487.z * cbMtdParam._m0[10u].z) - _418)) + _418)) + ((_1514 + ((isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0))) * _1023)) * cbPerFrame._m0[3u].x);
    float _1539 = isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0));
    float _1540 = isnan(0.0) ? _1537 : (isnan(_1537) ? 0.0 : max(_1537, 0.0));
    float _1541 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
    uint _1542 = _1262 + 6u;
    float _1550 = _588 / cbSceneParam._m0[86u].x;
    float _1551 = _589 / cbSceneParam._m0[86u].y;
    vec4 _1565 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1550, _1551, (log2((isnan(cbSceneParam._m0[77u].w) ? _562 : (isnan(_562) ? cbSceneParam._m0[77u].w : min(_562, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1567 = _1565.x;
    float _1568 = _1565.y;
    float _1569 = _1565.z;
    float _1570 = _1565.w;
    float _1644;
    float _1646;
    float _1648;
    float _1650;
    if (_562 > cbSceneParam._m0[78u].w)
    {
        float _1606 = isnan(_562) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _562 : min(cbSceneParam._m0[80u].w, _562));
        float _1607 = _1606 / _562;
        float _1618 = _1607 * _263;
        float _1619 = _264 * _1607;
        float _1620 = (-0.0) - _1619;
        float _1621 = _1607 * _265;
        float _1623 = (cbSceneParam._m0[77u].w * _1620) / _1606;
        float _1624 = _1623 + cbSceneParam._m0[79u].w;
        float _1625 = cbSceneParam._m0[79u].w - _1619;
        float _1631 = sqrt(((_1618 * _1618) + (_1619 * _1619)) + (_1621 * _1621));
        float _1634 = (1.0 - (cbSceneParam._m0[77u].w / _1606)) * _1631;
        float _1640 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1642 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1859;
        if (abs((_1620 - _1623) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1859 = ((((_1624 > 0.0) ? exp2(_1640 * _1624) : (2.0 - exp2(_1642 * _1624))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1634;
        }
        else
        {
            float _1781 = 1.0 / cbSceneParam._m0[80u].x;
            float _1782 = isnan(_1625) ? _1624 : (isnan(_1624) ? _1625 : max(_1624, _1625));
            float _1783 = isnan(_1625) ? _1624 : (isnan(_1624) ? _1625 : min(_1624, _1625));
            float _1792 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : min(_1782, 0.0));
            float _1793 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : min(_1783, 0.0));
            _1859 = ((abs(_1631 / _1620) * cbSceneParam._m0[80u].y) * ((((_1792 - _1793) * 2.0) - ((exp2(_1640 * (isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0)))) - exp2(_1640 * (isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0))))) * _1781)) - ((exp2(_1642 * _1792) - exp2(_1642 * _1793)) * _1781))) + (_1634 * cbSceneParam._m0[80u].z);
        }
        vec4 _1861 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1550, _1551, 1.0), 0.0);
        float _1870 = exp2((_1859 * (-1.44269502162933349609375)) * (1.0 - _1861.w));
        float _1871 = log2(_1870);
        float _1887 = log2(_1570);
        _1644 = (exp2(_1887 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1871 * cbSceneParam._m0[78u].x)) * _1861.x) / cbSceneParam._m0[78u].x)) + _1567;
        _1646 = (exp2(_1887 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1871 * cbSceneParam._m0[78u].y)) * _1861.y) / cbSceneParam._m0[78u].y)) + _1568;
        _1648 = (exp2(_1887 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1871 * cbSceneParam._m0[78u].z)) * _1861.z) / cbSceneParam._m0[78u].z)) + _1569;
        _1650 = _1870 * _1570;
    }
    else
    {
        _1644 = _1567;
        _1646 = _1568;
        _1648 = _1569;
        _1650 = _1570;
    }
    bool _1897;
    vec4 _1660;
    vec4 _1683;
    float _1685;
    float _1689;
    float _1690;
    float _1691;
    float _1692;
    bool _1703;
    for (;;)
    {
        _1660 = cbMatDynParam._m0[0u];
        float _1662 = roundEven(_1660.y);
        bool _1663 = _1662 == 3.0;
        float _1665 = log2(_1650);
        float _1672 = exp2(_1665 * cbSceneParam._m0[78u].x) * _1539;
        float _1673 = exp2(_1665 * cbSceneParam._m0[78u].y) * _1540;
        float _1674 = exp2(_1665 * cbSceneParam._m0[78u].z) * _1541;
        float _1681 = _576 + (-0.5);
        _1683 = cbMtdParam._m0[1u];
        _1685 = _1683.y * _1681;
        float _1688 = (_1662 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _1689 = _1688 * (_1663 ? _1672 : (_1672 + (cbSceneParam._m0[72u].w * _1644)));
        _1690 = _1688 * (_1663 ? _1673 : (_1673 + (cbSceneParam._m0[72u].w * _1646)));
        _1691 = _1688 * (_1663 ? _1674 : (_1674 + (cbSceneParam._m0[72u].w * _1648)));
        _1692 = _1681 * 0.999000012874603271484375;
        _1703 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_1703)
        {
            if ((cbInstanceData._m0[_1262 + 7u].x + _1692) < 0.5)
            {
                _1897 = true;
                break;
            }
        }
        uint _1816 = _1520 + uint(_1660.w);
        if ((cbInstanceData._m0[_1816].w < 1.0) && ((cbInstanceData._m0[_1816].w + _1692) < 0.5))
        {
            _1897 = true;
            break;
        }
        if ((_1685 + 1.0) < _1683.x)
        {
            _1897 = true;
            break;
        }
        _1897 = false;
        break;
    }
    float _2055;
    if (_1897)
    {
        discard_state = true;
        _2055 = 0.0;
    }
    else
    {
        _2055 = cbInstanceData._m0[_1542].w;
    }
    SV_Target.x = _1689;
    SV_Target.y = _1690;
    SV_Target.z = _1691;
    SV_Target.w = _2055;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1542].w;
    discard_exit();
}


