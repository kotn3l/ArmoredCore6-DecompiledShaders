#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _755;
uint _2192;
uint _2193;
uint _2194;
uint _2407;
uint _2408;
uint _2409;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _284 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _319 = cbMtdParam._m0[24u].x + _263;
    float _320 = cbMtdParam._m0[24u].y + _264;
    float _321 = cbMtdParam._m0[24u].z + _265;
    float _335 = (-0.0) - dot(vec3(_319, _320, _321), vec3(_191 * _184, _191 * _185, _191 * _186));
    float _336 = (-0.0) - dot(vec3(_319, _320, _321), vec3(_205 * TANGENT.x, _205 * TANGENT.y, _205 * TANGENT.z));
    float _337 = (-0.0) - dot(vec3(_319, _320, _321), vec3((-0.0) - (_198 * NORMAL.x), (-0.0) - (_198 * NORMAL.y), (-0.0) - (_198 * NORMAL.z)));
    float _341 = inversesqrt(dot(vec3(_335, _336, _337), vec3(_335, _336, _337)));
    float _344 = _341 * _337;
    float _345 = (_341 * _335) + (((_284.x * 2.0) + (-1.0)) * cbMtdParam._m0[22u].x);
    float _346 = (_341 * _336) + (((_284.y * 2.0) + (-1.0)) * cbMtdParam._m0[22u].y);
    float _347 = _345 * cbMtdParam._m0[20u].w;
    float _348 = _346 * cbMtdParam._m0[20u].z;
    float _349 = fract(TEXCOORD.x);
    float _350 = fract(TEXCOORD.y);
    float _356;
    if (_347 > 0.0)
    {
        _356 = (1.0 - _349) / _347;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_347 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _349) / _347;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _356 = frontier_phi_3_2_ladder;
    }
    float _364;
    if (_348 > 0.0)
    {
        _364 = (1.0 - _350) / _348;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_348 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _350) / _348;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _364 = frontier_phi_7_6_ladder;
    }
    bool _366 = _344 > 0.0;
    float _368 = _366 ? (cbMtdParam._m0[16u].x / _344) : 5000.0;
    float _369 = isnan(_364) ? _356 : (isnan(_356) ? _364 : min(_356, _364));
    float _370 = isnan(_368) ? _369 : (isnan(_369) ? _368 : min(_369, _368));
    float _374 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _375 = _349 + (-0.5);
    float _378 = _350 + (-0.5);
    float _381 = ((_370 * _344) + _374) / _374;
    vec4 _406 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (((((_375 + (_370 * _347)) / _381) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (((((_378 + (_370 * _348)) / _381) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    float _416 = cbMtdParam._m0[9u].x * _406.x;
    float _417 = cbMtdParam._m0[9u].y * _406.y;
    float _418 = cbMtdParam._m0[9u].z * _406.z;
    float _437 = _345 * cbMtdParam._m0[22u].w;
    float _438 = _346 * cbMtdParam._m0[22u].z;
    bool _439 = _437 > 0.0;
    float _444;
    if (_439)
    {
        _444 = (1.0 - _349) / _437;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_437 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _349) / _437;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _444 = frontier_phi_11_10_ladder;
    }
    bool _446 = _438 > 0.0;
    float _451;
    if (_446)
    {
        _451 = (1.0 - _350) / _438;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_438 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _350) / _438;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _451 = frontier_phi_15_14_ladder;
    }
    float _454 = _366 ? (cbMtdParam._m0[18u].x / _344) : 5000.0;
    float _455 = isnan(_451) ? _444 : (isnan(_444) ? _451 : min(_444, _451));
    float _456 = isnan(_454) ? _455 : (isnan(_455) ? _454 : min(_455, _454));
    float _460 = cbMtdParam._m0[19u].y * cbMtdParam._m0[18u].x;
    float _464 = ((_456 * _344) + _460) / _460;
    float _469 = cbMtdParam._m0[19u].x - cbMtdParam._m0[20u].x * trunc(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    float _471 = floor(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    vec4 _487 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_375 + (_456 * _437)) / _464) + 0.5) + _469) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_378 + (_456 * _438)) / _464) + 0.5) + _471) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[0u].w));
    float _499;
    if (_439)
    {
        _499 = (1.0 - _349) / _437;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_437 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _349) / _437;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _499 = frontier_phi_19_18_ladder;
    }
    float _505;
    if (_446)
    {
        _505 = (1.0 - _350) / _438;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_438 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _350) / _438;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _505 = frontier_phi_23_22_ladder;
    }
    float _507 = isnan(_505) ? _499 : (isnan(_499) ? _505 : min(_499, _505));
    float _508 = isnan(_454) ? _507 : (isnan(_507) ? _454 : min(_507, _454));
    float _515 = ((_508 * _344) + _460) / _460;
    vec4 _535 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_375 + (_508 * _437)) / _515) + 0.5) + _469) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_378 + (_508 * _438)) / _515) + 0.5) + _471) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[8u].w));
    float _537 = _535.x;
    float _562 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _566 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _567 = _263 * _566;
    float _568 = _264 * _566;
    float _569 = _265 * _566;
    float _575 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _576 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _585 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_575 * cbSceneParam._m0[86u].x, _576 * cbSceneParam._m0[86u].y));
    float _588 = _585.x * TEXCOORD_4.z;
    float _589 = (-0.0) - _567;
    float _590 = (-0.0) - _568;
    float _591 = (-0.0) - _569;
    float _613 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _617 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _621 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _754;
    float _756;
    float _757;
    float _758;
    float _759;
    float _760;
    float _761;
    float _762;
    float _763;
    float _764;
    float _765;
    float _766;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _677 = (cbModelParam._m0[37u].x * ((((fma(_621, cbModelParam._m0[26u].z, fma(_617, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _613)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _679 = (cbModelParam._m0[37u].y * ((((fma(_621, cbModelParam._m0[27u].z, fma(_617, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _613)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _680 = (((((fma(_621, cbModelParam._m0[28u].z, fma(_617, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _613)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _683 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_677, _679, _680), 0.0);
        vec4 _690 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_677, _679, _680), 0.0);
        vec4 _697 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_677, _679, _680), 0.0);
        vec4 _704 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_677, _679, _680), 0.0);
        float _717 = exp2((_683.w + (-0.5)) * 20.0) * 2.0;
        float _727 = exp2((_690.w + (-0.5)) * 20.0) * 2.0;
        float _737 = exp2((_697.w + (-0.5)) * 20.0) * 2.0;
        float _747 = exp2((_704.w + (-0.5)) * 20.0) * 2.0;
        float _748 = _747 * (_704.x + (-0.5));
        float _749 = _747 * (_704.y + (-0.5));
        float _750 = _747 * (_704.z + (-0.5));
        _754 = _717 * (_683.z + (-0.5));
        _756 = _717 * (_683.y + (-0.5));
        _757 = _717 * (_683.x + (-0.5));
        _758 = _727 * (_690.z + (-0.5));
        _759 = _727 * (_690.y + (-0.5));
        _760 = _727 * (_690.x + (-0.5));
        _761 = _737 * (_697.z + (-0.5));
        _762 = _737 * (_697.y + (-0.5));
        _763 = _737 * (_697.x + (-0.5));
        _764 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
        _765 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
        _766 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    }
    else
    {
        _754 = _755;
        _756 = _755;
        _757 = _755;
        _758 = _755;
        _759 = _755;
        _760 = _755;
        _761 = _755;
        _762 = _755;
        _763 = _755;
        _764 = _755;
        _765 = _755;
        _766 = _755;
    }
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    float _902;
    float _903;
    float _904;
    float _905;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _820 = (cbModelParam._m0[38u].x * ((((fma(_621, cbModelParam._m0[30u].z, fma(_617, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _613)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _821 = (cbModelParam._m0[38u].y * ((((fma(_621, cbModelParam._m0[31u].z, fma(_617, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _613)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _822 = (((((fma(_621, cbModelParam._m0[32u].z, fma(_617, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _613)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _824 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_820, _821, _822), 0.0);
        vec4 _831 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_820, _821, _822), 0.0);
        vec4 _838 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_820, _821, _822), 0.0);
        vec4 _845 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_820, _821, _822), 0.0);
        float _857 = exp2((_824.w + (-0.5)) * 20.0) * 2.0;
        float _867 = exp2((_831.w + (-0.5)) * 20.0) * 2.0;
        float _877 = exp2((_838.w + (-0.5)) * 20.0) * 2.0;
        float _887 = exp2((_845.w + (-0.5)) * 20.0) * 2.0;
        float _888 = _887 * (_845.x + (-0.5));
        float _889 = _887 * (_845.y + (-0.5));
        float _890 = _887 * (_845.z + (-0.5));
        _894 = _857 * (_824.z + (-0.5));
        _895 = _857 * (_824.y + (-0.5));
        _896 = _857 * (_824.x + (-0.5));
        _897 = _867 * (_831.z + (-0.5));
        _898 = _867 * (_831.y + (-0.5));
        _899 = _867 * (_831.x + (-0.5));
        _900 = _877 * (_838.z + (-0.5));
        _901 = _877 * (_838.y + (-0.5));
        _902 = _877 * (_838.x + (-0.5));
        _903 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        _904 = isnan(0.0) ? _889 : (isnan(_889) ? 0.0 : max(_889, 0.0));
        _905 = isnan(0.0) ? _888 : (isnan(_888) ? 0.0 : max(_888, 0.0));
    }
    else
    {
        _894 = _755;
        _895 = _755;
        _896 = _755;
        _897 = _755;
        _898 = _755;
        _899 = _755;
        _900 = _755;
        _901 = _755;
        _902 = _755;
        _903 = _755;
        _904 = _755;
        _905 = _755;
    }
    float _920 = _567 * (-0.5);
    float _921 = _568 * (-0.5);
    float _922 = _569 * (-0.5);
    float _923 = dot(vec4(_920, _921, _922, 1.0), vec4(_896, _899, _902, _905));
    float _926 = dot(vec4(_920, _921, _922, 1.0), vec4(_895, _898, _901, _904));
    float _929 = dot(vec4(_920, _921, _922, 1.0), vec4(_894, _897, _900, _903));
    float _964;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _936 = dot(vec4(_920, _921, _922, 1.0), vec4(_754, _758, _761, _764));
        float _940 = dot(vec4(_920, _921, _922, 1.0), vec4(_756, _759, _762, _765));
        float _944 = dot(vec4(_920, _921, _922, 1.0), vec4(_757, _760, _763, _766));
        float _951 = dot(vec4(cbModelParam._m0[39u]), vec4(_920, _921, _922, 1.0));
        _964 = dot(vec3(isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0)), isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0)), isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_951) ? 0.0 : (isnan(0.0) ? _951 : max(0.0, _951))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _964 = 1.0;
    }
    float _975;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _966 = dot(vec4(cbModelParam._m0[40u]), vec4(_920, _921, _922, 1.0));
        _975 = dot(vec3(isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0)), isnan(0.0) ? _926 : (isnan(_926) ? 0.0 : max(_926, 0.0)), isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_966) ? 0.0 : (isnan(0.0) ? _966 : max(0.0, _966))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _975 = 1.0;
    }
    float _979 = (_975 * cbModelParam._m0[1u].x) + (_964 * (1.0 - cbModelParam._m0[1u].x));
    float _985 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1069;
    float _1071;
    float _1073;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1036 = fma(_621, cbModelParam._m0[13u].z, fma(_617, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _613)) + cbModelParam._m0[13u].w;
        float _1040 = fma(_621, cbModelParam._m0[14u].z, fma(_617, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _613)) + cbModelParam._m0[14u].w;
        float _1044 = fma(_621, cbModelParam._m0[15u].z, fma(_617, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _613)) + cbModelParam._m0[15u].w;
        float _1047 = fma(_591, cbModelParam._m0[13u].z, fma(_590, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _589));
        float _1050 = fma(_591, cbModelParam._m0[14u].z, fma(_590, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _589));
        float _1053 = fma(_591, cbModelParam._m0[15u].z, fma(_590, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _589));
        float _1079;
        if (_1047 > 0.0)
        {
            _1079 = abs((1.0 - _1036) / _1047);
        }
        else
        {
            float frontier_phi_38_36_ladder;
            if (_1047 < 0.0)
            {
                frontier_phi_38_36_ladder = abs((_1036 + 1.0) / _1047);
            }
            else
            {
                frontier_phi_38_36_ladder = 5000.0;
            }
            _1079 = frontier_phi_38_36_ladder;
        }
        float _1267;
        if (_1050 > 0.0)
        {
            _1267 = abs((1.0 - _1040) / _1050);
        }
        else
        {
            float frontier_phi_47_43_ladder;
            if (_1050 < 0.0)
            {
                frontier_phi_47_43_ladder = abs((_1040 + 1.0) / _1050);
            }
            else
            {
                frontier_phi_47_43_ladder = 5000.0;
            }
            _1267 = frontier_phi_47_43_ladder;
        }
        float _1621;
        if (_1053 > 0.0)
        {
            _1621 = abs((1.0 - _1044) / _1053);
        }
        else
        {
            float frontier_phi_59_54_ladder;
            if (_1053 < 0.0)
            {
                frontier_phi_59_54_ladder = abs((_1044 + 1.0) / _1053);
            }
            else
            {
                frontier_phi_59_54_ladder = 5000.0;
            }
            _1621 = frontier_phi_59_54_ladder;
        }
        float _1623 = isnan(_1267) ? _1079 : (isnan(_1079) ? _1267 : min(_1079, _1267));
        float _1624 = isnan(_1621) ? _1623 : (isnan(_1623) ? _1621 : min(_1623, _1621));
        float _1628 = (_1624 * _1047) + _1036;
        float _1629 = (_1624 * _1050) + _1040;
        float _1630 = (_1624 * _1053) + _1044;
        float _1631 = _1624 * 9.9999997473787516355514526367188e-05;
        float _1633 = (-1.0) - _1631;
        float _1635 = _1631 + 1.0;
        float frontier_phi_37_59_ladder;
        float frontier_phi_37_59_ladder_1;
        float frontier_phi_37_59_ladder_2;
        if ((_1630 > _1635) || ((_1630 < _1633) || ((_1629 > _1635) || ((_1629 < _1633) || ((_1628 < _1633) || (_1628 > _1635))))))
        {
            frontier_phi_37_59_ladder = 0.0;
            frontier_phi_37_59_ladder_1 = 0.0;
            frontier_phi_37_59_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1864 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1630, cbModelParam._m0[9u].z, fma(_1629, cbModelParam._m0[9u].y, _1628 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1630, cbModelParam._m0[10u].z, fma(_1629, cbModelParam._m0[10u].y, _1628 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1630, cbModelParam._m0[11u].z, fma(_1629, cbModelParam._m0[11u].y, _1628 * cbModelParam._m0[11u].x))), _985);
            frontier_phi_37_59_ladder = _1864.z * cbModelParam._m0[1u].y;
            frontier_phi_37_59_ladder_1 = _1864.y * cbModelParam._m0[1u].y;
            frontier_phi_37_59_ladder_2 = _1864.x * cbModelParam._m0[1u].y;
        }
        _1069 = frontier_phi_37_59_ladder_2;
        _1071 = frontier_phi_37_59_ladder_1;
        _1073 = frontier_phi_37_59_ladder;
    }
    else
    {
        vec4 _1057 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_589, _590, _591), _985);
        _1069 = _1057.x * cbModelParam._m0[1u].y;
        _1071 = _1057.y * cbModelParam._m0[1u].y;
        _1073 = _1057.z * cbModelParam._m0[1u].y;
    }
    float _1076 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1164;
    float _1166;
    float _1168;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1128 = fma(_621, cbModelParam._m0[21u].z, fma(_617, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _613)) + cbModelParam._m0[21u].w;
        float _1132 = fma(_621, cbModelParam._m0[22u].z, fma(_617, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _613)) + cbModelParam._m0[22u].w;
        float _1136 = fma(_621, cbModelParam._m0[23u].z, fma(_617, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _613)) + cbModelParam._m0[23u].w;
        float _1139 = fma(_591, cbModelParam._m0[21u].z, fma(_590, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _589));
        float _1142 = fma(_591, cbModelParam._m0[22u].z, fma(_590, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _589));
        float _1145 = fma(_591, cbModelParam._m0[23u].z, fma(_590, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _589));
        float _1272;
        if (_1139 > 0.0)
        {
            _1272 = abs((1.0 - _1128) / _1139);
        }
        else
        {
            float frontier_phi_49_45_ladder;
            if (_1139 < 0.0)
            {
                frontier_phi_49_45_ladder = abs((_1128 + 1.0) / _1139);
            }
            else
            {
                frontier_phi_49_45_ladder = 5000.0;
            }
            _1272 = frontier_phi_49_45_ladder;
        }
        float _1648;
        if (_1142 > 0.0)
        {
            _1648 = abs((1.0 - _1132) / _1142);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1142 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1132 + 1.0) / _1142);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _1648 = frontier_phi_61_56_ladder;
        }
        float _1980;
        if (_1145 > 0.0)
        {
            _1980 = abs((1.0 - _1136) / _1145);
        }
        else
        {
            float frontier_phi_73_68_ladder;
            if (_1145 < 0.0)
            {
                frontier_phi_73_68_ladder = abs((_1136 + 1.0) / _1145);
            }
            else
            {
                frontier_phi_73_68_ladder = 5000.0;
            }
            _1980 = frontier_phi_73_68_ladder;
        }
        float _1982 = isnan(_1648) ? _1272 : (isnan(_1272) ? _1648 : min(_1272, _1648));
        float _1983 = isnan(_1980) ? _1982 : (isnan(_1982) ? _1980 : min(_1982, _1980));
        float _1987 = (_1983 * _1139) + _1128;
        float _1988 = (_1983 * _1142) + _1132;
        float _1989 = (_1983 * _1145) + _1136;
        float _1990 = _1983 * 9.9999997473787516355514526367188e-05;
        float _1991 = (-1.0) - _1990;
        float _1993 = _1990 + 1.0;
        float frontier_phi_46_73_ladder;
        float frontier_phi_46_73_ladder_1;
        float frontier_phi_46_73_ladder_2;
        if ((_1989 > _1993) || ((_1989 < _1991) || ((_1988 > _1993) || ((_1988 < _1991) || ((_1987 < _1991) || (_1987 > _1993))))))
        {
            frontier_phi_46_73_ladder = 0.0;
            frontier_phi_46_73_ladder_1 = 0.0;
            frontier_phi_46_73_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2095 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1989, cbModelParam._m0[17u].z, fma(_1988, cbModelParam._m0[17u].y, _1987 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1989, cbModelParam._m0[18u].z, fma(_1988, cbModelParam._m0[18u].y, _1987 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1989, cbModelParam._m0[19u].z, fma(_1988, cbModelParam._m0[19u].y, _1987 * cbModelParam._m0[19u].x))), _1076);
            frontier_phi_46_73_ladder = _2095.z * cbModelParam._m0[1u].z;
            frontier_phi_46_73_ladder_1 = _2095.y * cbModelParam._m0[1u].z;
            frontier_phi_46_73_ladder_2 = _2095.x * cbModelParam._m0[1u].z;
        }
        _1164 = frontier_phi_46_73_ladder_2;
        _1166 = frontier_phi_46_73_ladder_1;
        _1168 = frontier_phi_46_73_ladder;
    }
    else
    {
        vec4 _1148 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_589, _590, _591), _1076);
        _1164 = _1148.x * cbModelParam._m0[1u].z;
        _1166 = _1148.y * cbModelParam._m0[1u].z;
        _1168 = _1148.z * cbModelParam._m0[1u].z;
    }
    float _1180 = _588 * 0.01200000010430812835693359375;
    float _1182 = _1180 * ((cbModelParam._m0[1u].w * (_1164 - _1069)) + _1069);
    float _1183 = _1180 * ((cbModelParam._m0[1u].w * (_1166 - _1071)) + _1071);
    float _1184 = _1180 * ((cbModelParam._m0[1u].w * (_1168 - _1073)) + _1073);
    float _1205 = fma(_1184, cbSceneParam._m0[89u].z, fma(_1183, cbSceneParam._m0[89u].y, _1182 * cbSceneParam._m0[89u].x));
    float _1208 = fma(_1184, cbSceneParam._m0[90u].z, fma(_1183, cbSceneParam._m0[90u].y, _1182 * cbSceneParam._m0[90u].x));
    float _1211 = fma(_1184, cbSceneParam._m0[91u].z, fma(_1183, cbSceneParam._m0[91u].y, _1182 * cbSceneParam._m0[91u].x));
    float _1246 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1250 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1254 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1258 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1259 = _1246 / _1258;
    float _1260 = _1250 / _1258;
    float _1261 = _1254 / _1258;
    float _1409;
    float _1410;
    float _1411;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1288 = ((uint(_1261 > cbSceneParam._m0[59u].y) + uint(_1261 > cbSceneParam._m0[59u].x)) + uint(_1261 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1289 = _1288 + 43u;
        uint _1297 = _1288 + 44u;
        uint _1305 = _1288 + 45u;
        uint _1313 = _1288 + 46u;
        float _1324 = fma(_1258, cbSceneParam._m0[_1289].w, fma(_1254, cbSceneParam._m0[_1289].z, fma(_1250, cbSceneParam._m0[_1289].y, _1246 * cbSceneParam._m0[_1289].x)));
        float _1328 = fma(_1258, cbSceneParam._m0[_1297].w, fma(_1254, cbSceneParam._m0[_1297].z, fma(_1250, cbSceneParam._m0[_1297].y, _1246 * cbSceneParam._m0[_1297].x)));
        float _1336 = fma(_1258, cbSceneParam._m0[_1313].w, fma(_1254, cbSceneParam._m0[_1313].z, fma(_1250, cbSceneParam._m0[_1313].y, _1246 * cbSceneParam._m0[_1313].x)));
        float _1341 = cbSceneParam._m0[33u].z * _1336;
        float _1343 = cbSceneParam._m0[33u].w * _1336;
        float _1346 = fma(_1258, cbSceneParam._m0[_1305].w, fma(_1254, cbSceneParam._m0[_1305].z, fma(_1250, cbSceneParam._m0[_1305].y, _1246 * cbSceneParam._m0[_1305].x))) / _1336;
        float _1394 = (cbSceneParam._m0[33u].x - sqrt(((_1260 * _1260) + (_1259 * _1259)) + (_1261 * _1261))) * cbSceneParam._m0[33u].y;
        float _2797 = isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0));
        float _1402 = (isnan(1.0) ? _2797 : (isnan(_2797) ? 1.0 : min(_2797, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1341 + _1324) / _1336, (_1343 + _1328) / _1336), _1346), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1343 + _1324) / _1336, (_1328 - _1341) / _1336), _1346), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1324 - _1341) / _1336, (_1328 - _1343) / _1336), _1346), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1324 - _1343) / _1336, (_1341 + _1328) / _1336), _1346), 0.0)).x), vec4(0.25)));
        _1409 = 1.0 - (_1402 * cbSceneParam._m0[34u].x);
        _1410 = 1.0 - (_1402 * cbSceneParam._m0[34u].y);
        _1411 = 1.0 - (_1402 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1409 = 1.0;
        _1410 = 1.0;
        _1411 = 1.0;
    }
    float _1475;
    float _1477;
    float _1479;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1463 = fma(_1258, cbSceneParam._m0[63u].w, fma(_1254, cbSceneParam._m0[63u].z, fma(_1250, cbSceneParam._m0[63u].y, _1246 * cbSceneParam._m0[63u].x)));
        float _1464 = fma(_1258, cbSceneParam._m0[60u].w, fma(_1254, cbSceneParam._m0[60u].z, fma(_1250, cbSceneParam._m0[60u].y, _1246 * cbSceneParam._m0[60u].x))) / _1463;
        float _1465 = fma(_1258, cbSceneParam._m0[61u].w, fma(_1254, cbSceneParam._m0[61u].z, fma(_1250, cbSceneParam._m0[61u].y, _1246 * cbSceneParam._m0[61u].x))) / _1463;
        float frontier_phi_58_57_ladder;
        float frontier_phi_58_57_ladder_1;
        float frontier_phi_58_57_ladder_2;
        if ((((_1464 >= cbSceneParam._m0[64u].x) && (_1465 >= cbSceneParam._m0[64u].y)) && (_1464 <= cbSceneParam._m0[64u].z)) && (_1465 <= cbSceneParam._m0[64u].w))
        {
            float _1661 = fma(_1258, cbSceneParam._m0[62u].w, fma(_1254, cbSceneParam._m0[62u].z, fma(_1250, cbSceneParam._m0[62u].y, _1246 * cbSceneParam._m0[62u].x))) / _1463;
            float _1665 = isnan(cbSceneParam._m0[41u].w) ? _1661 : (isnan(_1661) ? cbSceneParam._m0[41u].w : max(_1661, cbSceneParam._m0[41u].w));
            float _1708 = (cbSceneParam._m0[33u].x - sqrt(((_1260 * _1260) + (_1259 * _1259)) + (_1261 * _1261))) * cbSceneParam._m0[33u].y;
            float _2813 = isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0));
            float _1715 = (isnan(1.0) ? _2813 : (isnan(_2813) ? 1.0 : min(_2813, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1464, cbSceneParam._m0[33u].w + _1465), _1665), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1464, _1465 - cbSceneParam._m0[33u].z), _1665), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1464 - cbSceneParam._m0[33u].z, _1465 - cbSceneParam._m0[33u].w), _1665), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1464 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1465), _1665), 0.0)).x), vec4(0.25)));
            float _1719 = 1.0 - (_1715 * cbSceneParam._m0[34u].x);
            float _1720 = 1.0 - (_1715 * cbSceneParam._m0[34u].y);
            float _1721 = 1.0 - (_1715 * cbSceneParam._m0[34u].z);
            frontier_phi_58_57_ladder = isnan(_1719) ? _1409 : (isnan(_1409) ? _1719 : min(_1409, _1719));
            frontier_phi_58_57_ladder_1 = isnan(_1720) ? _1410 : (isnan(_1410) ? _1720 : min(_1410, _1720));
            frontier_phi_58_57_ladder_2 = isnan(_1721) ? _1411 : (isnan(_1411) ? _1721 : min(_1411, _1721));
        }
        else
        {
            frontier_phi_58_57_ladder = _1409;
            frontier_phi_58_57_ladder_1 = _1410;
            frontier_phi_58_57_ladder_2 = _1411;
        }
        _1475 = frontier_phi_58_57_ladder;
        _1477 = frontier_phi_58_57_ladder_1;
        _1479 = frontier_phi_58_57_ladder_2;
    }
    else
    {
        _1475 = _1409;
        _1477 = _1410;
        _1479 = _1411;
    }
    uint _1481 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1485 = floatBitsToUint(cbInstanceData._m0[_1481 + 5u]);
    uint _1487 = _1485.x * 14u;
    uint _1488 = _1487 + 13u;
    float _1493 = _588 + (-1.0);
    float _1496 = (cbLight._m0[_1488].x * _1493) + 1.0;
    float _1497 = (cbLight._m0[_1488].y * _1493) + 1.0;
    uint _1498 = _1487 + 8u;
    float _1509 = cbLight._m0[_1487].x + _567;
    float _1510 = cbLight._m0[_1487].y + _568;
    float _1511 = cbLight._m0[_1487].z + _569;
    float _1515 = inversesqrt(dot(vec3(_1509, _1510, _1511), vec3(_1509, _1510, _1511)));
    float _1519 = dot(vec3(0.0), vec3(cbLight._m0[_1487].xyz));
    float _2839 = isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0));
    float _1522 = isnan(1.0) ? _2839 : (isnan(_2839) ? 1.0 : min(_2839, 1.0));
    float _1523 = dot(vec3(0.0), vec3(_567, _568, _569));
    float _2850 = isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0));
    float _1526 = isnan(1.0) ? _2850 : (isnan(_2850) ? 1.0 : min(_2850, 1.0));
    float _1527 = dot(vec3(cbLight._m0[_1487].xyz), vec3(_1509 * _1515, _1510 * _1515, _1511 * _1515));
    float _2861 = isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0));
    float _1538 = (exp2(log2(1.0 - (isnan(1.0) ? _2861 : (isnan(_2861) ? 1.0 : min(_2861, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1544 = (0.5 / ((_1522 + 9.9999999392252902907785028219223e-09) + _1526)) * _1522;
    float _2872 = isnan(0.0) ? _1544 : (isnan(_1544) ? 0.0 : max(_1544, 0.0));
    float _1546 = (isnan(1.0) ? _2872 : (isnan(_2872) ? 1.0 : min(_2872, 1.0))) * 0.31831014156341552734375;
    float _1548 = isnan(1.0) ? _1496 : (isnan(_1496) ? 1.0 : min(_1496, 1.0));
    uint _1561 = _1487 + 9u;
    uint _1567 = _1487 | 1u;
    float _1573 = cbLight._m0[_1567].x + _567;
    float _1574 = cbLight._m0[_1567].y + _568;
    float _1575 = cbLight._m0[_1567].z + _569;
    float _1579 = inversesqrt(dot(vec3(_1573, _1574, _1575), vec3(_1573, _1574, _1575)));
    float _1583 = dot(vec3(0.0), vec3(cbLight._m0[_1567].xyz));
    float _2888 = isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0));
    float _1586 = isnan(1.0) ? _2888 : (isnan(_2888) ? 1.0 : min(_2888, 1.0));
    float _1587 = dot(vec3(cbLight._m0[_1567].xyz), vec3(_1573 * _1579, _1574 * _1579, _1575 * _1579));
    float _2899 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
    float _1596 = (exp2(log2(1.0 - (isnan(1.0) ? _2899 : (isnan(_2899) ? 1.0 : min(_2899, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1600 = (0.5 / ((_1586 + 9.9999999392252902907785028219223e-09) + _1526)) * _1586;
    float _2910 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
    float _1602 = (isnan(1.0) ? _2910 : (isnan(_2910) ? 1.0 : min(_2910, 1.0))) * 0.31831014156341552734375;
    float _1603 = isnan(1.0) ? _1497 : (isnan(_1497) ? 1.0 : min(_1497, 1.0));
    float _1613 = (((_1596 * cbLight._m0[_1561].x) * _1602) * _1603) + ((((cbLight._m0[_1498].x * _1475) * _1538) * _1546) * _1548);
    float _1614 = (((_1596 * cbLight._m0[_1561].y) * _1602) * _1603) + ((((cbLight._m0[_1498].y * _1477) * _1538) * _1546) * _1548);
    float _1615 = (((_1596 * cbLight._m0[_1561].z) * _1602) * _1603) + ((((cbLight._m0[_1498].z * _1479) * _1538) * _1546) * _1548);
    float _1779;
    float _1781;
    float _1783;
    if (_1485.y == 0u)
    {
        uvec4 _1733 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1734 = _1733.x;
        uint _1745 = uint((float(_1733.y) * floor(float(uint(cbSceneParam._m0[85u].y * _576) / _1734))) + floor(float(uint(cbSceneParam._m0[85u].x * _575) / _1734)));
        float _1755 = (log2(_1261 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1756 = isnan(0.0) ? _1755 : (isnan(_1755) ? 0.0 : max(_1755, 0.0));
        uint _1759 = uint(isnan(14.0) ? _1756 : (isnan(_1756) ? 14.0 : min(_1756, 14.0)));
        uvec4 _1764 = texelFetch(g_lightClusterGridBuffer, int(((_1759 << 2u) + (_1745 << 6u)) >> 2u));
        uint _1765 = _1764.x;
        uint _1766 = _1733.z;
        float _1873;
        float _1875;
        float _1877;
        if (((((1u << ((_1766 >> 4u) & 15u)) + 4294967295u) & _1765) == 0u) || ((_1766 & 240u) == 0u))
        {
            _1873 = 0.0;
            _1875 = 0.0;
            _1877 = 0.0;
        }
        else
        {
            float _1874;
            float _1876;
            float _1878;
            float _2026 = 0.0;
            float _2027 = 0.0;
            float _2028 = 0.0;
            uint _2029 = 0u;
            uint _2038;
            bool _2039;
            for (;;)
            {
                _2038 = texelFetch(g_lightClassification, int((((_1759 << 5u) + (_1745 << 9u)) + (_2029 << 2u)) >> 2u)).x;
                _2039 = _2038 == 0u;
                float frontier_phi_82_pred;
                float frontier_phi_82_pred_1;
                float frontier_phi_82_pred_2;
                if (_2039)
                {
                    frontier_phi_82_pred = _2028;
                    frontier_phi_82_pred_1 = _2027;
                    frontier_phi_82_pred_2 = _2026;
                }
                else
                {
                    float _2162;
                    float _2163;
                    float _2164;
                    uint _2165;
                    _2162 = _2026;
                    _2163 = _2027;
                    _2164 = _2028;
                    _2165 = _2038;
                    float _2100;
                    float _2101;
                    float _2102;
                    for (;;)
                    {
                        uint _2169 = uint(findLSB(_2165)) + (_2029 << 5u);
                        uint _2166 = (_2165 + 4294967295u) & _2165;
                        uint _2171 = _2169 * 48u;
                        vec4 _2185 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2171)).x, texelFetch(g_PointLightRenderingBuffer, int(_2171 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2171 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2171 + 3u)).x));
                        uint _2202 = (_2169 * 48u) + 8u;
                        vec3 _2213 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2202)).x, texelFetch(g_PointLightRenderingBuffer, int(_2202 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2202 + 2u)).x));
                        float _2217 = _2185.x - _1259;
                        float _2218 = _2185.y - _1260;
                        float _2219 = _2185.z - _1261;
                        float _2220 = dot(vec3(_2217, _2218, _2219), vec3(_2217, _2218, _2219));
                        float _2223 = inversesqrt(_2220);
                        float _2232 = 1.0 - (_2220 * _2185.w);
                        float _2936 = isnan(0.0) ? _2232 : (isnan(_2232) ? 0.0 : max(_2232, 0.0));
                        float _2234 = sqrt(_2220) * uintBitsToFloat(uvec4(_2192, _2193, _2194, texelFetch(g_PointLightRenderingBuffer, int(((_2169 * 48u) + 4u) + 3u)).x)).w;
                        float _2237 = 1.39999997615814208984375 / (_2234 + 1.39999997615814208984375);
                        float _2238 = _2237 * _2237;
                        float _2241 = ((1.0 - _2238) * dot(vec3(0.0), vec3(_2223 * _2217, _2223 * _2218, _2223 * _2219))) + _2238;
                        float _2243 = (-0.0) - _1259;
                        float _2244 = (-0.0) - _1260;
                        float _2245 = (-0.0) - _1261;
                        float _2249 = inversesqrt(dot(vec3(_2243, _2244, _2245), vec3(_2243, _2244, _2245)));
                        float _2253 = dot(vec3(0.0), vec3(_2249 * _2243, _2249 * _2244, _2249 * _2245));
                        float _2947 = isnan(0.0) ? _2253 : (isnan(_2253) ? 0.0 : max(_2253, 0.0));
                        float _2958 = isnan(0.0) ? _2241 : (isnan(_2241) ? 0.0 : max(_2241, 0.0));
                        float _2257 = isnan(1.0) ? _2958 : (isnan(_2958) ? 1.0 : min(_2958, 1.0));
                        float _2261 = (0.5 / (((isnan(1.0) ? _2947 : (isnan(_2947) ? 1.0 : min(_2947, 1.0))) + 9.9999999392252902907785028219223e-09) + _2257)) * _2257;
                        float _2969 = isnan(0.0) ? _2261 : (isnan(_2261) ? 0.0 : max(_2261, 0.0));
                        float _2270 = (((isnan(1.0) ? _2969 : (isnan(_2969) ? 1.0 : min(_2969, 1.0))) * 3.1415927410125732421875) / (((_2234 * _2234) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2936 : (isnan(_2936) ? 1.0 : min(_2936, 1.0)));
                        _2100 = (_2270 * _2213.x) + _2162;
                        _2101 = (_2270 * _2213.y) + _2163;
                        _2102 = (_2270 * _2213.z) + _2164;
                        if (_2166 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2162 = _2100;
                            _2163 = _2101;
                            _2164 = _2102;
                            _2165 = _2166;
                        }
                    }
                    frontier_phi_82_pred = _2102;
                    frontier_phi_82_pred_1 = _2101;
                    frontier_phi_82_pred_2 = _2100;
                }
                _1878 = frontier_phi_82_pred;
                _1876 = frontier_phi_82_pred_1;
                _1874 = frontier_phi_82_pred_2;
                uint _2030 = _2029 + 1u;
                if (_2030 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2026 = _1874;
                    _2027 = _1876;
                    _2028 = _1878;
                    _2029 = _2030;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1873 = _1874;
            _1875 = _1876;
            _1877 = _1878;
        }
        uvec4 _1881 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1882 = _1881.z;
        uint _1884 = (_1882 >> 8u) & 15u;
        float _2006;
        float _2008;
        float _2010;
        if (((4294967295u << _1884) & _1765) == 0u)
        {
            _2006 = _1873;
            _2008 = _1875;
            _2010 = _1877;
        }
        else
        {
            float _2022 = inversesqrt(dot(vec3(_1259, _1260, _1261), vec3(_1259, _1260, _1261)));
            float frontier_phi_75_76_ladder;
            float frontier_phi_75_76_ladder_1;
            float frontier_phi_75_76_ladder_2;
            if (_1884 < ((_1882 >> 12u) & 15u))
            {
                float _2007;
                float _2009;
                float _2011;
                float _2148 = _1873;
                float _2149 = _1875;
                float _2150 = _1877;
                uint _2151 = _1884;
                uint _2160;
                bool _2161;
                for (;;)
                {
                    _2160 = texelFetch(g_lightClassification, int((((_1759 << 5u) + (_1745 << 9u)) + (_2151 << 2u)) >> 2u)).x;
                    _2161 = _2160 == 0u;
                    float frontier_phi_88_pred;
                    float frontier_phi_88_pred_1;
                    float frontier_phi_88_pred_2;
                    if (_2161)
                    {
                        frontier_phi_88_pred = _2150;
                        frontier_phi_88_pred_1 = _2149;
                        frontier_phi_88_pred_2 = _2148;
                    }
                    else
                    {
                        float _2275;
                        float _2276;
                        float _2277;
                        float _2496;
                        float _2497;
                        float _2498;
                        float _2285 = _2148;
                        float _2286 = _2149;
                        float _2287 = _2150;
                        uint _2288 = _2160;
                        uint _2289;
                        uint _2299;
                        vec4 _2314;
                        float _2315;
                        vec3 _2327;
                        vec4 _2342;
                        vec4 _2357;
                        float _2403;
                        bool _2404;
                        for (;;)
                        {
                            _2299 = ((_2151 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2288));
                            _2289 = (_2288 + 4294967295u) & _2288;
                            uint _2301 = _2299 * 40u;
                            _2314 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2301)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2301 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2301 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2301 + 3u)).x));
                            _2315 = _2314.w;
                            uint _2317 = (_2299 * 40u) + 8u;
                            _2327 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2317)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2317 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2317 + 2u)).x));
                            uint _2329 = (_2299 * 40u) + 16u;
                            _2342 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2329)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2329 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2329 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2329 + 3u)).x));
                            uint _2344 = (_2299 * 40u) + 20u;
                            _2357 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2344)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2344 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2344 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2344 + 3u)).x));
                            uint _2359 = (_2299 * 40u) + 24u;
                            vec4 _2372 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2359)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2359 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2359 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2359 + 3u)).x));
                            uint _2378 = (_2299 * 40u) + 28u;
                            vec4 _2391 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2378)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2378 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2378 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2378 + 3u)).x));
                            _2403 = fma(_1261, _2391.z, fma(_1260, _2391.y, _2391.x * _1259)) + _2391.w;
                            _2404 = !((fma(_1261, _2372.z, fma(_1260, _2372.y, _2372.x * _1259)) + _2372.w) <= 0.0);
                            float frontier_phi_94_pred;
                            float frontier_phi_94_pred_1;
                            float frontier_phi_94_pred_2;
                            if (_2404)
                            {
                                float _2438 = _2314.x - _1259;
                                float _2439 = _2314.y - _1260;
                                float _2440 = _2314.z - _1261;
                                float _2441 = dot(vec3(_2438, _2439, _2440), vec3(_2438, _2439, _2440));
                                float _2444 = inversesqrt(_2441);
                                float _2451 = 1.0 - (_2441 / (_2315 * _2315));
                                float _2980 = isnan(0.0) ? _2451 : (isnan(_2451) ? 0.0 : max(_2451, 0.0));
                                float _2453 = sqrt(_2441) * uintBitsToFloat(uvec4(_2407, _2408, _2409, texelFetch(g_SpotLightRenderingBuffer, int(((_2299 * 40u) + 4u) + 3u)).x)).w;
                                float _2455 = 1.39999997615814208984375 / (_2453 + 1.39999997615814208984375);
                                float _2456 = _2455 * _2455;
                                float _2459 = (fma(_1261, _2342.z, fma(_1260, _2342.y, _2342.x * _1259)) + _2342.w) / _2403;
                                float _2460 = (fma(_1261, _2357.z, fma(_1260, _2357.y, _2357.x * _1259)) + _2357.w) / _2403;
                                float _2464 = 1.0 - dot(vec2(_2459, _2460), vec2(_2459, _2460));
                                float _2991 = isnan(0.0) ? _2464 : (isnan(_2464) ? 0.0 : max(_2464, 0.0));
                                float _2472 = dot(vec3(0.0), vec3((-0.0) - (_1259 * _2022), (-0.0) - (_1260 * _2022), (-0.0) - (_1261 * _2022)));
                                float _3002 = isnan(0.0) ? _2472 : (isnan(_2472) ? 0.0 : max(_2472, 0.0));
                                float _2480 = ((1.0 - _2456) * dot(vec3(0.0), vec3(_2444 * _2438, _2444 * _2439, _2444 * _2440))) + _2456;
                                float _3013 = isnan(0.0) ? _2480 : (isnan(_2480) ? 0.0 : max(_2480, 0.0));
                                float _2481 = isnan(1.0) ? _3013 : (isnan(_3013) ? 1.0 : min(_3013, 1.0));
                                float _2485 = (0.5 / (((isnan(1.0) ? _3002 : (isnan(_3002) ? 1.0 : min(_3002, 1.0))) + 9.9999999392252902907785028219223e-09) + _2481)) * _2481;
                                float _3024 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
                                float _2492 = ((isnan(1.0) ? _2991 : (isnan(_2991) ? 1.0 : min(_2991, 1.0))) * (isnan(1.0) ? _2980 : (isnan(_2980) ? 1.0 : min(_2980, 1.0)))) * (((isnan(1.0) ? _3024 : (isnan(_3024) ? 1.0 : min(_3024, 1.0))) * 3.1415927410125732421875) / (((_2453 * _2453) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_94_pred = _2492 * _2327.x;
                                frontier_phi_94_pred_1 = _2492 * _2327.z;
                                frontier_phi_94_pred_2 = _2492 * _2327.y;
                            }
                            else
                            {
                                frontier_phi_94_pred = 0.0;
                                frontier_phi_94_pred_1 = 0.0;
                                frontier_phi_94_pred_2 = 0.0;
                            }
                            _2496 = frontier_phi_94_pred;
                            _2498 = frontier_phi_94_pred_1;
                            _2497 = frontier_phi_94_pred_2;
                            _2275 = _2496 + _2285;
                            _2276 = _2497 + _2286;
                            _2277 = _2498 + _2287;
                            if (_2289 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2285 = _2275;
                                _2286 = _2276;
                                _2287 = _2277;
                                _2288 = _2289;
                                continue;
                            }
                        }
                        frontier_phi_88_pred = _2277;
                        frontier_phi_88_pred_1 = _2276;
                        frontier_phi_88_pred_2 = _2275;
                    }
                    _2011 = frontier_phi_88_pred;
                    _2009 = frontier_phi_88_pred_1;
                    _2007 = frontier_phi_88_pred_2;
                    uint _2152 = _2151 + 1u;
                    if (_2152 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2148 = _2007;
                        _2149 = _2009;
                        _2150 = _2011;
                        _2151 = _2152;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_75_76_ladder = _2011;
                frontier_phi_75_76_ladder_1 = _2009;
                frontier_phi_75_76_ladder_2 = _2007;
            }
            else
            {
                frontier_phi_75_76_ladder = _1877;
                frontier_phi_75_76_ladder_1 = _1875;
                frontier_phi_75_76_ladder_2 = _1873;
            }
            _2006 = frontier_phi_75_76_ladder_2;
            _2008 = frontier_phi_75_76_ladder_1;
            _2010 = frontier_phi_75_76_ladder;
        }
        float _2015 = isnan(1.0) ? _588 : (isnan(_588) ? 1.0 : min(_588, 1.0));
        _1779 = ((_2006 * 0.039999999105930328369140625) * _2015) + _1613;
        _1781 = ((_2008 * 0.039999999105930328369140625) * _2015) + _1614;
        _1783 = ((_2010 * 0.039999999105930328369140625) * _2015) + _1615;
    }
    else
    {
        _1779 = _1613;
        _1781 = _1614;
        _1783 = _1615;
    }
    uint _1790 = (_1481 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1805 = (cbInstanceData._m0[_1790].x * ((_537 * ((_487.x * cbMtdParam._m0[10u].x) - _416)) + _416)) + ((_1779 + ((isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0))) * _979)) * cbPerFrame._m0[3u].x);
    float _1806 = (cbInstanceData._m0[_1790].y * ((_537 * ((_487.y * cbMtdParam._m0[10u].y) - _417)) + _417)) + ((_1781 + ((isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0))) * _979)) * cbPerFrame._m0[3u].x);
    float _1807 = (cbInstanceData._m0[_1790].z * ((_537 * ((_487.z * cbMtdParam._m0[10u].z) - _418)) + _418)) + ((_1783 + ((isnan(0.0) ? _1211 : (isnan(_1211) ? 0.0 : max(_1211, 0.0))) * _979)) * cbPerFrame._m0[3u].x);
    uint _1811 = _1481 + 6u;
    float _1819 = _575 / cbSceneParam._m0[86u].x;
    float _1820 = _576 / cbSceneParam._m0[86u].y;
    vec4 _1834 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1819, _1820, (log2((isnan(cbSceneParam._m0[77u].w) ? _562 : (isnan(_562) ? cbSceneParam._m0[77u].w : min(_562, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1836 = _1834.x;
    float _1837 = _1834.y;
    float _1838 = _1834.z;
    float _1839 = _1834.w;
    float _1929;
    float _1931;
    float _1933;
    float _1935;
    if (_562 > cbSceneParam._m0[78u].w)
    {
        float _1892 = isnan(_562) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _562 : min(cbSceneParam._m0[80u].w, _562));
        float _1893 = _1892 / _562;
        float _1904 = _1893 * _263;
        float _1905 = _264 * _1893;
        float _1906 = (-0.0) - _1905;
        float _1907 = _1893 * _265;
        float _1909 = (cbSceneParam._m0[77u].w * _1906) / _1892;
        float _1910 = _1909 + cbSceneParam._m0[79u].w;
        float _1911 = cbSceneParam._m0[79u].w - _1905;
        float _1917 = sqrt(((_1904 * _1904) + (_1905 * _1905)) + (_1907 * _1907));
        float _1920 = (1.0 - (cbSceneParam._m0[77u].w / _1892)) * _1917;
        float _1925 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1927 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2110;
        if (abs((_1906 - _1909) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2110 = ((((_1910 > 0.0) ? exp2(_1925 * _1910) : (2.0 - exp2(_1927 * _1910))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1920;
        }
        else
        {
            float _2052 = 1.0 / cbSceneParam._m0[80u].x;
            float _2053 = isnan(_1911) ? _1910 : (isnan(_1910) ? _1911 : max(_1910, _1911));
            float _2054 = isnan(_1911) ? _1910 : (isnan(_1910) ? _1911 : min(_1910, _1911));
            float _2063 = isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : min(_2053, 0.0));
            float _2064 = isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : min(_2054, 0.0));
            _2110 = ((abs(_1917 / _1906) * cbSceneParam._m0[80u].y) * ((((_2063 - _2064) * 2.0) - ((exp2(_1925 * (isnan(0.0) ? _2053 : (isnan(_2053) ? 0.0 : max(_2053, 0.0)))) - exp2(_1925 * (isnan(0.0) ? _2054 : (isnan(_2054) ? 0.0 : max(_2054, 0.0))))) * _2052)) - ((exp2(_1927 * _2063) - exp2(_1927 * _2064)) * _2052))) + (_1920 * cbSceneParam._m0[80u].z);
        }
        vec4 _2112 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1819, _1820, 1.0), 0.0);
        float _2121 = exp2((_2110 * (-1.44269502162933349609375)) * (1.0 - _2112.w));
        float _2122 = log2(_2121);
        float _2138 = log2(_1839);
        _1929 = (exp2(_2138 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2122 * cbSceneParam._m0[78u].x)) * _2112.x) / cbSceneParam._m0[78u].x)) + _1836;
        _1931 = (exp2(_2138 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2122 * cbSceneParam._m0[78u].y)) * _2112.y) / cbSceneParam._m0[78u].y)) + _1837;
        _1933 = (exp2(_2138 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2122 * cbSceneParam._m0[78u].z)) * _2112.z) / cbSceneParam._m0[78u].z)) + _1838;
        _1935 = _2121 * _1839;
    }
    else
    {
        _1929 = _1836;
        _1931 = _1837;
        _1933 = _1838;
        _1935 = _1839;
    }
    float _1947 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1948 = _1947 == 3.0;
    float _1950 = log2(_1935);
    float _1957 = exp2(_1950 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _1805 : (isnan(_1805) ? 0.0 : max(_1805, 0.0)));
    float _1958 = exp2(_1950 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0)));
    float _1959 = exp2(_1950 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _1807 : (isnan(_1807) ? 0.0 : max(_1807, 0.0)));
    float _1968 = (_1947 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _1968 * (_1948 ? _1957 : (_1957 + (cbSceneParam._m0[72u].w * _1929)));
    SV_Target.y = _1968 * (_1948 ? _1958 : (_1958 + (cbSceneParam._m0[72u].w * _1931)));
    SV_Target.z = _1968 * (_1948 ? _1959 : (_1959 + (cbSceneParam._m0[72u].w * _1933)));
    SV_Target.w = cbInstanceData._m0[_1811].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1811].w;
}


