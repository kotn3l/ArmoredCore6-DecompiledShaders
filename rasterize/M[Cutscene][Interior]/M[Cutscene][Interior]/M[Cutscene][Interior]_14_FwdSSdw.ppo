#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _999;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _192 = _191 * _184;
    float _193 = _191 * _185;
    float _194 = _191 * _186;
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _199 = _198 * NORMAL.x;
    float _200 = _198 * NORMAL.y;
    float _201 = _198 * NORMAL.z;
    float _205 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _206 = _205 * TANGENT.x;
    float _207 = _205 * TANGENT.y;
    float _208 = _205 * TANGENT.z;
    float _253 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _263 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _253);
    float _264 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _253);
    float _265 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _253);
    vec4 _278 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _281 = _278.x;
    vec4 _299 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _316 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _281) + cbMtdParam._m0[12u].x) * _299.x;
    float _318 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _281) + cbMtdParam._m0[12u].y) * _299.y;
    float _320 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _281) + cbMtdParam._m0[12u].z) * _299.z;
    vec4 _338 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _374 = cbMtdParam._m0[24u].x + _263;
    float _375 = cbMtdParam._m0[24u].y + _264;
    float _376 = cbMtdParam._m0[24u].z + _265;
    float _390 = (-0.0) - dot(vec3(_374, _375, _376), vec3(_192, _193, _194));
    float _391 = (-0.0) - dot(vec3(_374, _375, _376), vec3(_206, _207, _208));
    float _392 = (-0.0) - dot(vec3(_374, _375, _376), vec3((-0.0) - _199, (-0.0) - _200, (-0.0) - _201));
    float _396 = inversesqrt(dot(vec3(_390, _391, _392), vec3(_390, _391, _392)));
    float _399 = _396 * _392;
    float _402 = ((_396 * _390) + ((cbMtdParam._m0[22u].x * _281) * ((_338.x * 2.0) + (-1.0)))) * cbMtdParam._m0[20u].w;
    float _403 = ((_396 * _391) + ((cbMtdParam._m0[22u].y * _281) * ((_338.y * 2.0) + (-1.0)))) * cbMtdParam._m0[20u].z;
    float _404 = fract(TEXCOORD.x);
    float _405 = fract(TEXCOORD.y);
    float _411;
    if (_402 > 0.0)
    {
        _411 = (1.0 - _404) / _402;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_402 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _404) / _402;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _411 = frontier_phi_3_2_ladder;
    }
    float _419;
    if (_403 > 0.0)
    {
        _419 = (1.0 - _405) / _403;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_403 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _405) / _403;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _419 = frontier_phi_7_6_ladder;
    }
    float _423 = (_399 > 0.0) ? (cbMtdParam._m0[16u].x / _399) : 5000.0;
    float _424 = isnan(_419) ? _411 : (isnan(_411) ? _419 : min(_411, _419));
    float _425 = isnan(_423) ? _424 : (isnan(_424) ? _423 : min(_424, _423));
    float _429 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _436 = ((_425 * _399) + _429) / _429;
    vec4 _461 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * ((((((_404 + (-0.5)) + (_425 * _402)) / _436) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * ((((((_405 + (-0.5)) + (_425 * _403)) / _436) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    float _477 = _281 * 0.1500000059604644775390625;
    float _485 = (_477 * (((_461.x * _281) * cbMtdParam._m0[9u].x) - _316)) + _316;
    float _486 = (_477 * (((_461.y * _281) * cbMtdParam._m0[9u].y) - _318)) + _318;
    float _487 = (_477 * (((_461.z * _281) * cbMtdParam._m0[9u].z) - _320)) + _320;
    vec4 _500 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _504 = _500.z;
    float _507 = (_500.x * 2.0) + (-1.0);
    float _508 = (_500.y * 2.0) + (-1.0);
    float _509 = dot(vec2(_507, _508), vec2(_507, _508));
    float _3093 = isnan(0.0) ? _509 : (isnan(_509) ? 0.0 : max(_509, 0.0));
    float _514 = sqrt(1.0 - (isnan(1.0) ? _3093 : (isnan(_3093) ? 1.0 : min(_3093, 1.0))));
    float _517 = fma(_514, _199, fma(_508, _206, _507 * _192));
    float _520 = fma(_514, _200, fma(_508, _207, _507 * _193));
    float _523 = fma(_514, _201, fma(_508, _208, _507 * _194));
    float _527 = inversesqrt(dot(vec3(_517, _520, _523), vec3(_517, _520, _523)));
    float _528 = _527 * _517;
    float _529 = _527 * _520;
    float _530 = _527 * _523;
    float _3104 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _531 = isnan(1.0) ? _3104 : (isnan(_3104) ? 1.0 : min(_3104, 1.0));
    float _3115 = isnan(0.0) ? _485 : (isnan(_485) ? 0.0 : max(_485, 0.0));
    float _3126 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _3137 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _550 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _554 = inversesqrt(dot(vec3(_263, _264, _265), vec3(_263, _264, _265)));
    float _555 = _263 * _554;
    float _556 = _264 * _554;
    float _557 = _265 * _554;
    float _563 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _564 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _583 = fma(_530, cbSceneParam._m0[5u].z, fma(_529, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _528));
    float _586 = fma(_530, cbSceneParam._m0[6u].z, fma(_529, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _528));
    float _589 = fma(_530, cbSceneParam._m0[7u].z, fma(_529, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _528));
    uint _602 = uint(roundEven(NORMAL.w)) * 13u;
    uint _605 = (_602 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _611 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3115 : (isnan(_3115) ? 1.0 : min(_3115, 1.0)))) * cbInstanceData._m0[_605].x;
    float _612 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3126 : (isnan(_3126) ? 1.0 : min(_3126, 1.0)))) * cbInstanceData._m0[_605].y;
    float _613 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3137 : (isnan(_3137) ? 1.0 : min(_3137, 1.0)))) * cbInstanceData._m0[_605].z;
    float _3148 = isnan(0.0) ? _611 : (isnan(_611) ? 0.0 : max(_611, 0.0));
    float _614 = isnan(1.0) ? _3148 : (isnan(_3148) ? 1.0 : min(_3148, 1.0));
    float _3159 = isnan(0.0) ? _612 : (isnan(_612) ? 0.0 : max(_612, 0.0));
    float _615 = isnan(1.0) ? _3159 : (isnan(_3159) ? 1.0 : min(_3159, 1.0));
    float _3170 = isnan(0.0) ? _613 : (isnan(_613) ? 0.0 : max(_613, 0.0));
    float _616 = isnan(1.0) ? _3170 : (isnan(_3170) ? 1.0 : min(_3170, 1.0));
    vec4 _625 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _563, cbSceneParam._m0[86u].y * _564));
    float _628 = _625.x * TEXCOORD_4.z;
    float _629 = dot(vec3(_528, _529, _530), vec3(_555, _556, _557));
    float _632 = _629 * 2.0;
    float _636 = (_632 * _528) - _555;
    float _637 = (_632 * _529) - _556;
    float _638 = (_632 * _530) - _557;
    float _642 = abs(dot(vec3(_555, _556, _557), vec3(_528, _529, _530)));
    float _3181 = isnan(0.0) ? _642 : (isnan(_642) ? 0.0 : max(_642, 0.0));
    float _644 = sqrt(_531);
    float _657 = exp2((_644 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3181 : (isnan(_3181) ? 1.0 : min(_3181, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_644 * 3.0));
    float _689 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _693 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _697 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _998;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    float _1005;
    float _1006;
    float _1007;
    float _1008;
    float _1009;
    float _1010;
    float _1011;
    float _1012;
    float _1013;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _725 = fma(_697, cbModelParam._m0[26u].z, fma(_693, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _689));
        float _729 = fma(_697, cbModelParam._m0[27u].z, fma(_693, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _689));
        float _733 = fma(_697, cbModelParam._m0[28u].z, fma(_693, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _689));
        float _756 = _689 + _528;
        float _757 = _693 + _529;
        float _758 = _697 + _530;
        float _768 = fma(_758, cbModelParam._m0[26u].z, fma(_757, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _756)) - _725;
        float _769 = fma(_758, cbModelParam._m0[27u].z, fma(_757, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _756)) - _729;
        float _770 = fma(_758, cbModelParam._m0[28u].z, fma(_757, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _756)) - _733;
        float _774 = inversesqrt(dot(vec3(_768, _769, _770), vec3(_768, _769, _770)));
        float _787 = ((_774 * _768) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_725 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _788 = ((_774 * _769) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_729 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _789 = ((_774 * _770) / cbModelParam._m0[34u].z) + ((((((_733 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _792 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_787, _788, _789), 0.0);
        vec4 _799 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_787, _788, _789), 0.0);
        vec4 _806 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_787, _788, _789), 0.0);
        vec4 _813 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_787, _788, _789), 0.0);
        float _826 = exp2((_792.w + (-0.5)) * 20.0) * 2.0;
        float _827 = _826 * (_792.x + (-0.5));
        float _828 = _826 * (_792.y + (-0.5));
        float _829 = _826 * (_792.z + (-0.5));
        float _836 = exp2((_799.w + (-0.5)) * 20.0) * 2.0;
        float _837 = _836 * (_799.x + (-0.5));
        float _838 = _836 * (_799.y + (-0.5));
        float _839 = _836 * (_799.z + (-0.5));
        float _846 = exp2((_806.w + (-0.5)) * 20.0) * 2.0;
        float _847 = _846 * (_806.x + (-0.5));
        float _848 = _846 * (_806.y + (-0.5));
        float _849 = _846 * (_806.z + (-0.5));
        float _856 = exp2((_813.w + (-0.5)) * 20.0) * 2.0;
        float _857 = _856 * (_813.x + (-0.5));
        float _858 = _856 * (_813.y + (-0.5));
        float _859 = _856 * (_813.z + (-0.5));
        float _860 = isnan(0.0) ? _857 : (isnan(_857) ? 0.0 : max(_857, 0.0));
        float _861 = isnan(0.0) ? _858 : (isnan(_858) ? 0.0 : max(_858, 0.0));
        float _862 = isnan(0.0) ? _859 : (isnan(_859) ? 0.0 : max(_859, 0.0));
        float _863 = _827 * 0.5;
        float _864 = _837 * 0.5;
        float _865 = _847 * 0.5;
        float _866 = dot(vec3(_863, _864, _865), vec3(_863, _864, _865));
        float _871 = (_866 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_866);
        float _880 = (dot(vec3(_528, _529, _530), vec3(_871 * _863, _871 * _864, _871 * _865)) + 1.0) * 0.5;
        float _3207 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _890 = sqrt(((_864 * _864) + (_863 * _863)) + (_865 * _865)) / (_860 + 9.9999997473787516355514526367188e-06);
        float _3218 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
        float _891 = isnan(1.0) ? _3218 : (isnan(_3218) ? 1.0 : min(_3218, 1.0));
        float _892 = _891 * 2.0;
        float _896 = (1.0 - _891) / (_891 + 1.0);
        float _3229 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _897 = isnan(1.0) ? _3229 : (isnan(_3229) ? 1.0 : min(_3229, 1.0));
        float _906 = ((((1.0 - _897) * (_892 + 2.0)) * exp2(log2(isnan(1.0) ? _3207 : (isnan(_3207) ? 1.0 : min(_3207, 1.0))) * (_892 + 1.0))) + _897) * _860;
        float _907 = _828 * 0.5;
        float _908 = _838 * 0.5;
        float _909 = _848 * 0.5;
        float _910 = dot(vec3(_907, _908, _909), vec3(_907, _908, _909));
        float _915 = (_910 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_910);
        float _923 = (dot(vec3(_528, _529, _530), vec3(_915 * _907, _915 * _908, _915 * _909)) + 1.0) * 0.5;
        float _3240 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _932 = sqrt(((_908 * _908) + (_907 * _907)) + (_909 * _909)) / (_861 + 9.9999997473787516355514526367188e-06);
        float _3251 = isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0));
        float _933 = isnan(1.0) ? _3251 : (isnan(_3251) ? 1.0 : min(_3251, 1.0));
        float _934 = _933 * 2.0;
        float _938 = (1.0 - _933) / (_933 + 1.0);
        float _3262 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _939 = isnan(1.0) ? _3262 : (isnan(_3262) ? 1.0 : min(_3262, 1.0));
        float _948 = ((((1.0 - _939) * (_934 + 2.0)) * exp2(log2(isnan(1.0) ? _3240 : (isnan(_3240) ? 1.0 : min(_3240, 1.0))) * (_934 + 1.0))) + _939) * _861;
        float _949 = _829 * 0.5;
        float _950 = _839 * 0.5;
        float _951 = _849 * 0.5;
        float _952 = dot(vec3(_949, _950, _951), vec3(_949, _950, _951));
        float _957 = (_952 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_952);
        float _965 = (dot(vec3(_528, _529, _530), vec3(_957 * _949, _957 * _950, _957 * _951)) + 1.0) * 0.5;
        float _3273 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _974 = sqrt(((_950 * _950) + (_949 * _949)) + (_951 * _951)) / (_862 + 9.9999997473787516355514526367188e-06);
        float _3284 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _975 = isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0));
        float _976 = _975 * 2.0;
        float _980 = (1.0 - _975) / (_975 + 1.0);
        float _3295 = isnan(0.0) ? _980 : (isnan(_980) ? 0.0 : max(_980, 0.0));
        float _981 = isnan(1.0) ? _3295 : (isnan(_3295) ? 1.0 : min(_3295, 1.0));
        float _990 = ((((1.0 - _981) * (_976 + 2.0)) * exp2(log2(isnan(1.0) ? _3273 : (isnan(_3273) ? 1.0 : min(_3273, 1.0))) * (_976 + 1.0))) + _981) * _862;
        _998 = _829;
        _1000 = _828;
        _1001 = _827;
        _1002 = _839;
        _1003 = _838;
        _1004 = _837;
        _1005 = _849;
        _1006 = _848;
        _1007 = _847;
        _1008 = _862;
        _1009 = _861;
        _1010 = _860;
        _1011 = cbModelParam._m0[36u].z * (isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0)));
        _1012 = cbModelParam._m0[36u].z * (isnan(0.0) ? _948 : (isnan(_948) ? 0.0 : max(_948, 0.0)));
        _1013 = cbModelParam._m0[36u].z * (isnan(0.0) ? _990 : (isnan(_990) ? 0.0 : max(_990, 0.0)));
    }
    else
    {
        _998 = _999;
        _1000 = _999;
        _1001 = _999;
        _1002 = _999;
        _1003 = _999;
        _1004 = _999;
        _1005 = _999;
        _1006 = _999;
        _1007 = _999;
        _1008 = _999;
        _1009 = _999;
        _1010 = _999;
        _1011 = 0.0;
        _1012 = 0.0;
        _1013 = 0.0;
    }
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1039 = fma(_697, cbModelParam._m0[30u].z, fma(_693, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _689));
        float _1043 = fma(_697, cbModelParam._m0[31u].z, fma(_693, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _689));
        float _1047 = fma(_697, cbModelParam._m0[32u].z, fma(_693, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _689));
        float _1070 = _689 + _528;
        float _1071 = _693 + _529;
        float _1072 = _697 + _530;
        float _1082 = fma(_1072, cbModelParam._m0[30u].z, fma(_1071, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1070)) - _1039;
        float _1083 = fma(_1072, cbModelParam._m0[31u].z, fma(_1071, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1070)) - _1043;
        float _1084 = fma(_1072, cbModelParam._m0[32u].z, fma(_1071, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1070)) - _1047;
        float _1088 = inversesqrt(dot(vec3(_1082, _1083, _1084), vec3(_1082, _1083, _1084)));
        float _1101 = ((_1088 * _1082) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1039 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1102 = ((_1088 * _1083) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1043 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1103 = ((_1088 * _1084) / cbModelParam._m0[35u].z) + ((((((_1047 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1105 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1101, _1102, _1103), 0.0);
        vec4 _1112 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1101, _1102, _1103), 0.0);
        vec4 _1119 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1101, _1102, _1103), 0.0);
        vec4 _1126 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1101, _1102, _1103), 0.0);
        float _1138 = exp2((_1105.w + (-0.5)) * 20.0) * 2.0;
        float _1139 = _1138 * (_1105.x + (-0.5));
        float _1140 = _1138 * (_1105.y + (-0.5));
        float _1141 = _1138 * (_1105.z + (-0.5));
        float _1148 = exp2((_1112.w + (-0.5)) * 20.0) * 2.0;
        float _1149 = _1148 * (_1112.x + (-0.5));
        float _1150 = _1148 * (_1112.y + (-0.5));
        float _1151 = _1148 * (_1112.z + (-0.5));
        float _1158 = exp2((_1119.w + (-0.5)) * 20.0) * 2.0;
        float _1159 = _1158 * (_1119.x + (-0.5));
        float _1160 = _1158 * (_1119.y + (-0.5));
        float _1161 = _1158 * (_1119.z + (-0.5));
        float _1168 = exp2((_1126.w + (-0.5)) * 20.0) * 2.0;
        float _1169 = _1168 * (_1126.x + (-0.5));
        float _1170 = _1168 * (_1126.y + (-0.5));
        float _1171 = _1168 * (_1126.z + (-0.5));
        float _1172 = isnan(0.0) ? _1169 : (isnan(_1169) ? 0.0 : max(_1169, 0.0));
        float _1173 = isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0));
        float _1174 = isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0));
        float _1175 = _1139 * 0.5;
        float _1176 = _1149 * 0.5;
        float _1177 = _1159 * 0.5;
        float _1178 = dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177));
        float _1183 = (_1178 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1178);
        float _1191 = (dot(vec3(_528, _529, _530), vec3(_1183 * _1175, _1183 * _1176, _1183 * _1177)) + 1.0) * 0.5;
        float _3336 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1200 = sqrt(((_1176 * _1176) + (_1175 * _1175)) + (_1177 * _1177)) / (_1172 + 9.9999997473787516355514526367188e-06);
        float _3347 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0));
        float _1202 = _1201 * 2.0;
        float _1206 = (1.0 - _1201) / (_1201 + 1.0);
        float _3358 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0));
        float _1216 = ((((1.0 - _1207) * (_1202 + 2.0)) * exp2(log2(isnan(1.0) ? _3336 : (isnan(_3336) ? 1.0 : min(_3336, 1.0))) * (_1202 + 1.0))) + _1207) * _1172;
        float _1217 = _1140 * 0.5;
        float _1218 = _1150 * 0.5;
        float _1219 = _1160 * 0.5;
        float _1220 = dot(vec3(_1217, _1218, _1219), vec3(_1217, _1218, _1219));
        float _1225 = (_1220 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1220);
        float _1233 = (dot(vec3(_528, _529, _530), vec3(_1225 * _1217, _1225 * _1218, _1225 * _1219)) + 1.0) * 0.5;
        float _3369 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1242 = sqrt(((_1218 * _1218) + (_1217 * _1217)) + (_1219 * _1219)) / (_1173 + 9.9999997473787516355514526367188e-06);
        float _3380 = isnan(0.0) ? _1242 : (isnan(_1242) ? 0.0 : max(_1242, 0.0));
        float _1243 = isnan(1.0) ? _3380 : (isnan(_3380) ? 1.0 : min(_3380, 1.0));
        float _1244 = _1243 * 2.0;
        float _1248 = (1.0 - _1243) / (_1243 + 1.0);
        float _3391 = isnan(0.0) ? _1248 : (isnan(_1248) ? 0.0 : max(_1248, 0.0));
        float _1249 = isnan(1.0) ? _3391 : (isnan(_3391) ? 1.0 : min(_3391, 1.0));
        float _1258 = ((((1.0 - _1249) * (_1244 + 2.0)) * exp2(log2(isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0))) * (_1244 + 1.0))) + _1249) * _1173;
        float _1259 = _1141 * 0.5;
        float _1260 = _1151 * 0.5;
        float _1261 = _1161 * 0.5;
        float _1262 = dot(vec3(_1259, _1260, _1261), vec3(_1259, _1260, _1261));
        float _1267 = (_1262 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1262);
        float _1275 = (dot(vec3(_528, _529, _530), vec3(_1267 * _1259, _1267 * _1260, _1267 * _1261)) + 1.0) * 0.5;
        float _3402 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1284 = sqrt(((_1260 * _1260) + (_1259 * _1259)) + (_1261 * _1261)) / (_1174 + 9.9999997473787516355514526367188e-06);
        float _3413 = isnan(0.0) ? _1284 : (isnan(_1284) ? 0.0 : max(_1284, 0.0));
        float _1285 = isnan(1.0) ? _3413 : (isnan(_3413) ? 1.0 : min(_3413, 1.0));
        float _1286 = _1285 * 2.0;
        float _1290 = (1.0 - _1285) / (_1285 + 1.0);
        float _3424 = isnan(0.0) ? _1290 : (isnan(_1290) ? 0.0 : max(_1290, 0.0));
        float _1291 = isnan(1.0) ? _3424 : (isnan(_3424) ? 1.0 : min(_3424, 1.0));
        float _1300 = ((((1.0 - _1291) * (_1286 + 2.0)) * exp2(log2(isnan(1.0) ? _3402 : (isnan(_3402) ? 1.0 : min(_3402, 1.0))) * (_1286 + 1.0))) + _1291) * _1174;
        _1308 = _1141;
        _1309 = _1140;
        _1310 = _1139;
        _1311 = _1151;
        _1312 = _1150;
        _1313 = _1149;
        _1314 = _1161;
        _1315 = _1160;
        _1316 = _1159;
        _1317 = _1174;
        _1318 = _1173;
        _1319 = _1172;
        _1320 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0)));
        _1321 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0)));
        _1322 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1300 : (isnan(_1300) ? 0.0 : max(_1300, 0.0)));
    }
    else
    {
        _1308 = _999;
        _1309 = _999;
        _1310 = _999;
        _1311 = _999;
        _1312 = _999;
        _1313 = _999;
        _1314 = _999;
        _1315 = _999;
        _1316 = _999;
        _1317 = _999;
        _1318 = _999;
        _1319 = _999;
        _1320 = 0.0;
        _1321 = 0.0;
        _1322 = 0.0;
    }
    float _1332 = (cbModelParam._m0[1u].x * (_1320 - _1011)) + _1011;
    float _1333 = (cbModelParam._m0[1u].x * (_1321 - _1012)) + _1012;
    float _1334 = (cbModelParam._m0[1u].x * (_1322 - _1013)) + _1013;
    float _1355 = fma(_1334, cbSceneParam._m0[89u].z, fma(_1333, cbSceneParam._m0[89u].y, _1332 * cbSceneParam._m0[89u].x));
    float _1358 = fma(_1334, cbSceneParam._m0[90u].z, fma(_1333, cbSceneParam._m0[90u].y, _1332 * cbSceneParam._m0[90u].x));
    float _1361 = fma(_1334, cbSceneParam._m0[91u].z, fma(_1333, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1332));
    float _1376 = _636 * 0.5;
    float _1377 = _637 * 0.5;
    float _1378 = _638 * 0.5;
    float _1379 = dot(vec4(_1376, _1377, _1378, 1.0), vec4(_1310, _1313, _1316, _1319));
    float _1382 = dot(vec4(_1376, _1377, _1378, 1.0), vec4(_1309, _1312, _1315, _1318));
    float _1385 = dot(vec4(_1376, _1377, _1378, 1.0), vec4(_1308, _1311, _1314, _1317));
    float _1419;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1392 = dot(vec4(_1376, _1377, _1378, 1.0), vec4(_998, _1002, _1005, _1008));
        float _1396 = dot(vec4(_1376, _1377, _1378, 1.0), vec4(_1000, _1003, _1006, _1009));
        float _1400 = dot(vec4(_1376, _1377, _1378, 1.0), vec4(_1001, _1004, _1007, _1010));
        float _1407 = dot(vec4(cbModelParam._m0[39u]), vec4(_1376, _1377, _1378, 1.0));
        _1419 = dot(vec3(isnan(0.0) ? _1400 : (isnan(_1400) ? 0.0 : max(_1400, 0.0)), isnan(0.0) ? _1396 : (isnan(_1396) ? 0.0 : max(_1396, 0.0)), isnan(0.0) ? _1392 : (isnan(_1392) ? 0.0 : max(_1392, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1407) ? 0.0 : (isnan(0.0) ? _1407 : max(0.0, _1407))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1419 = 1.0;
    }
    float _1430;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1421 = dot(vec4(cbModelParam._m0[40u]), vec4(_1376, _1377, _1378, 1.0));
        _1430 = dot(vec3(isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0)), isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0)), isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1421) ? 0.0 : (isnan(0.0) ? _1421 : max(0.0, _1421))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1430 = 1.0;
    }
    float _1434 = (_1430 * cbModelParam._m0[1u].x) + (_1419 * (1.0 - cbModelParam._m0[1u].x));
    float _1444 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _531);
    float _1445 = isnan(_1444) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1444 : min(cbModelParam._m0[25u].z, _1444));
    float _1527;
    float _1529;
    float _1531;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1494 = fma(_697, cbModelParam._m0[13u].z, fma(_693, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _689)) + cbModelParam._m0[13u].w;
        float _1498 = fma(_697, cbModelParam._m0[14u].z, fma(_693, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _689)) + cbModelParam._m0[14u].w;
        float _1502 = fma(_697, cbModelParam._m0[15u].z, fma(_693, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _689)) + cbModelParam._m0[15u].w;
        float _1505 = fma(_638, cbModelParam._m0[13u].z, fma(_637, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _636));
        float _1508 = fma(_638, cbModelParam._m0[14u].z, fma(_637, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _636));
        float _1511 = fma(_638, cbModelParam._m0[15u].z, fma(_637, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _636));
        float _1539;
        if (_1505 > 0.0)
        {
            _1539 = abs((1.0 - _1494) / _1505);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1505 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1494 + 1.0) / _1505);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1539 = frontier_phi_22_20_ladder;
        }
        float _1910;
        if (_1508 > 0.0)
        {
            _1910 = abs((1.0 - _1498) / _1508);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1508 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1498 + 1.0) / _1508);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1910 = frontier_phi_31_27_ladder;
        }
        float _2210;
        if (_1511 > 0.0)
        {
            _2210 = abs((1.0 - _1502) / _1511);
        }
        else
        {
            float frontier_phi_45_38_ladder;
            if (_1511 < 0.0)
            {
                frontier_phi_45_38_ladder = abs((_1502 + 1.0) / _1511);
            }
            else
            {
                frontier_phi_45_38_ladder = 5000.0;
            }
            _2210 = frontier_phi_45_38_ladder;
        }
        float _2212 = isnan(_1910) ? _1539 : (isnan(_1539) ? _1910 : min(_1539, _1910));
        float _2213 = isnan(_2210) ? _2212 : (isnan(_2212) ? _2210 : min(_2212, _2210));
        float _2217 = (_2213 * _1505) + _1494;
        float _2218 = (_2213 * _1508) + _1498;
        float _2219 = (_2213 * _1511) + _1502;
        float _2220 = _2213 * 9.9999997473787516355514526367188e-05;
        float _2221 = (-1.0) - _2220;
        float _2223 = _2220 + 1.0;
        float frontier_phi_21_45_ladder;
        float frontier_phi_21_45_ladder_1;
        float frontier_phi_21_45_ladder_2;
        if ((_2219 > _2223) || ((_2219 < _2221) || ((_2218 > _2223) || ((_2218 < _2221) || ((_2217 < _2221) || (_2217 > _2223))))))
        {
            frontier_phi_21_45_ladder = 0.0;
            frontier_phi_21_45_ladder_1 = 0.0;
            frontier_phi_21_45_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2345 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2219, cbModelParam._m0[9u].z, fma(_2218, cbModelParam._m0[9u].y, _2217 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2219, cbModelParam._m0[10u].z, fma(_2218, cbModelParam._m0[10u].y, _2217 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2219, cbModelParam._m0[11u].z, fma(_2218, cbModelParam._m0[11u].y, _2217 * cbModelParam._m0[11u].x))), _1445);
            frontier_phi_21_45_ladder = _2345.z * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_1 = _2345.y * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_2 = _2345.x * cbModelParam._m0[1u].y;
        }
        _1527 = frontier_phi_21_45_ladder_2;
        _1529 = frontier_phi_21_45_ladder_1;
        _1531 = frontier_phi_21_45_ladder;
    }
    else
    {
        vec4 _1515 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_636, _637, _638), _1445);
        _1527 = _1515.x * cbModelParam._m0[1u].y;
        _1529 = _1515.y * cbModelParam._m0[1u].y;
        _1531 = _1515.z * cbModelParam._m0[1u].y;
    }
    float _1535 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _531);
    float _1536 = isnan(_1535) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1535 : min(cbModelParam._m0[25u].w, _1535));
    float _1626;
    float _1628;
    float _1630;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1590 = fma(_697, cbModelParam._m0[21u].z, fma(_693, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _689)) + cbModelParam._m0[21u].w;
        float _1594 = fma(_697, cbModelParam._m0[22u].z, fma(_693, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _689)) + cbModelParam._m0[22u].w;
        float _1598 = fma(_697, cbModelParam._m0[23u].z, fma(_693, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _689)) + cbModelParam._m0[23u].w;
        float _1601 = fma(_638, cbModelParam._m0[21u].z, fma(_637, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _636));
        float _1604 = fma(_638, cbModelParam._m0[22u].z, fma(_637, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _636));
        float _1607 = fma(_638, cbModelParam._m0[23u].z, fma(_637, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _636));
        float _1915;
        if (_1601 > 0.0)
        {
            _1915 = abs((1.0 - _1590) / _1601);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1601 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1590 + 1.0) / _1601);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1915 = frontier_phi_33_29_ladder;
        }
        float _2236;
        if (_1604 > 0.0)
        {
            _2236 = abs((1.0 - _1594) / _1604);
        }
        else
        {
            float frontier_phi_47_40_ladder;
            if (_1604 < 0.0)
            {
                frontier_phi_47_40_ladder = abs((_1594 + 1.0) / _1604);
            }
            else
            {
                frontier_phi_47_40_ladder = 5000.0;
            }
            _2236 = frontier_phi_47_40_ladder;
        }
        float _2405;
        if (_1607 > 0.0)
        {
            _2405 = abs((1.0 - _1598) / _1607);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1607 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1598 + 1.0) / _1607);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2405 = frontier_phi_61_56_ladder;
        }
        float _2407 = isnan(_2236) ? _1915 : (isnan(_1915) ? _2236 : min(_1915, _2236));
        float _2408 = isnan(_2405) ? _2407 : (isnan(_2407) ? _2405 : min(_2407, _2405));
        float _2412 = (_2408 * _1601) + _1590;
        float _2413 = (_2408 * _1604) + _1594;
        float _2414 = (_2408 * _1607) + _1598;
        float _2415 = _2408 * 9.9999997473787516355514526367188e-05;
        float _2416 = (-1.0) - _2415;
        float _2418 = _2415 + 1.0;
        float frontier_phi_30_61_ladder;
        float frontier_phi_30_61_ladder_1;
        float frontier_phi_30_61_ladder_2;
        if ((_2414 > _2418) || ((_2414 < _2416) || ((_2413 > _2418) || ((_2413 < _2416) || ((_2412 < _2416) || (_2412 > _2418))))))
        {
            frontier_phi_30_61_ladder = 0.0;
            frontier_phi_30_61_ladder_1 = 0.0;
            frontier_phi_30_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2647 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2414, cbModelParam._m0[17u].z, fma(_2413, cbModelParam._m0[17u].y, _2412 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2414, cbModelParam._m0[18u].z, fma(_2413, cbModelParam._m0[18u].y, _2412 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2414, cbModelParam._m0[19u].z, fma(_2413, cbModelParam._m0[19u].y, _2412 * cbModelParam._m0[19u].x))), _1536);
            frontier_phi_30_61_ladder = _2647.z * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_1 = _2647.y * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_2 = _2647.x * cbModelParam._m0[1u].z;
        }
        _1626 = frontier_phi_30_61_ladder_2;
        _1628 = frontier_phi_30_61_ladder_1;
        _1630 = frontier_phi_30_61_ladder;
    }
    else
    {
        vec4 _1610 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_636, _637, _638), _1536);
        _1626 = _1610.x * cbModelParam._m0[1u].z;
        _1628 = _1610.y * cbModelParam._m0[1u].z;
        _1630 = _1610.z * cbModelParam._m0[1u].z;
    }
    float _1642 = ((((1.0 - _657) * ((_644 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_657 * _644)) * _628;
    float _1643 = _1642 * ((cbModelParam._m0[1u].w * (_1626 - _1527)) + _1527);
    float _1644 = _1642 * ((cbModelParam._m0[1u].w * (_1628 - _1529)) + _1529);
    float _1645 = _1642 * ((cbModelParam._m0[1u].w * (_1630 - _1531)) + _1531);
    float _1648 = fma(_1645, cbSceneParam._m0[89u].z, fma(_1644, cbSceneParam._m0[89u].y, _1643 * cbSceneParam._m0[89u].x));
    float _1651 = fma(_1645, cbSceneParam._m0[90u].z, fma(_1644, cbSceneParam._m0[90u].y, _1643 * cbSceneParam._m0[90u].x));
    float _1654 = fma(_1645, cbSceneParam._m0[91u].z, fma(_1644, cbSceneParam._m0[91u].y, _1643 * cbSceneParam._m0[91u].x));
    vec4 _1662 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_563, _564));
    float _1664 = _1662.w;
    float _1676 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1664);
    float _1677 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1664);
    float _1678 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1664);
    uvec4 _1682 = floatBitsToUint(cbInstanceData._m0[_602 + 5u]);
    uint _1684 = _1682.x * 14u;
    uint _1685 = _1684 + 13u;
    float _1690 = _628 + (-1.0);
    float _1693 = (cbLight._m0[_1685].x * _1690) + 1.0;
    float _1694 = (cbLight._m0[_1685].y * _1690) + 1.0;
    uint _1695 = _1684 + 5u;
    float _1701 = isnan(1.0) ? _1694 : (isnan(_1694) ? 1.0 : min(_1694, 1.0));
    uint _1705 = _1684 + 4u;
    float _1714 = isnan(1.0) ? _1693 : (isnan(_1693) ? 1.0 : min(_1693, 1.0));
    uint _1718 = _1684 | 1u;
    float _1729 = dot(vec3(cbLight._m0[_1684].xyz), vec3(_528, _529, _530));
    float _1732 = dot(vec3(cbLight._m0[_1718].xyz), vec3(_528, _529, _530));
    float _3560 = isnan(0.0) ? _1729 : (isnan(_1729) ? 0.0 : max(_1729, 0.0));
    float _3571 = isnan(0.0) ? _1732 : (isnan(_1732) ? 0.0 : max(_1732, 0.0));
    float _1737 = (isnan(1.0) ? _3560 : (isnan(_3560) ? 1.0 : min(_3560, 1.0))) * 0.3183098733425140380859375;
    float _1739 = (isnan(1.0) ? _3571 : (isnan(_3571) ? 1.0 : min(_3571, 1.0))) * 0.3183098733425140380859375;
    float _1746 = ((cbLight._m0[_1695].x * _1701) * _1739) + (((cbLight._m0[_1705].x * _1676) * _1714) * _1737);
    float _1747 = ((_1701 * cbLight._m0[_1695].y) * _1739) + (((cbLight._m0[_1705].y * _1677) * _1714) * _1737);
    float _1748 = ((_1701 * cbLight._m0[_1695].z) * _1739) + (((cbLight._m0[_1705].z * _1678) * _1714) * _1737);
    uint _1750 = _1684 + 8u;
    float _1763 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1684].w)) * _531) * 0.949999988079071044921875);
    float _1764 = _1763 * _1763;
    float _1765 = cbLight._m0[_1684].x + _555;
    float _1766 = cbLight._m0[_1684].y + _556;
    float _1767 = cbLight._m0[_1684].z + _557;
    float _1771 = inversesqrt(dot(vec3(_1765, _1766, _1767), vec3(_1765, _1766, _1767)));
    float _1772 = _1771 * _1765;
    float _1773 = _1771 * _1766;
    float _1774 = _1771 * _1767;
    float _1775 = dot(vec3(_528, _529, _530), vec3(cbLight._m0[_1684].xyz));
    float _3582 = isnan(0.0) ? _1775 : (isnan(_1775) ? 0.0 : max(_1775, 0.0));
    float _1778 = isnan(1.0) ? _3582 : (isnan(_3582) ? 1.0 : min(_3582, 1.0));
    float _3593 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _1779 = isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0));
    float _1780 = dot(vec3(_528, _529, _530), vec3(_1772, _1773, _1774));
    float _3604 = isnan(0.0) ? _1780 : (isnan(_1780) ? 0.0 : max(_1780, 0.0));
    float _1783 = isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0));
    float _1784 = dot(vec3(cbLight._m0[_1684].xyz), vec3(_1772, _1773, _1774));
    float _3615 = isnan(0.0) ? _1784 : (isnan(_1784) ? 0.0 : max(_1784, 0.0));
    float _1788 = _1764 * _1764;
    float _1792 = ((_1783 * _1783) * (_1788 + (-1.0))) + 1.0;
    float _1803 = (exp2(log2(1.0 - (isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1804 = 1.0 - _1764;
    float _1815 = (0.5 / (((_1779 * ((_1778 * _1804) + _1764)) + 9.9999999392252902907785028219223e-09) + (((_1779 * _1804) + _1764) * _1778))) * _1778;
    float _3626 = isnan(0.0) ? _1815 : (isnan(_1815) ? 0.0 : max(_1815, 0.0));
    float _1817 = (isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0))) * (_1788 / ((_1792 * _1792) * 3.141590118408203125));
    uint _1831 = _1684 + 9u;
    float _1842 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1718].w)) * _531) * 0.949999988079071044921875);
    float _1843 = _1842 * _1842;
    float _1844 = cbLight._m0[_1718].x + _555;
    float _1845 = cbLight._m0[_1718].y + _556;
    float _1846 = cbLight._m0[_1718].z + _557;
    float _1850 = inversesqrt(dot(vec3(_1844, _1845, _1846), vec3(_1844, _1845, _1846)));
    float _1851 = _1850 * _1844;
    float _1852 = _1850 * _1845;
    float _1853 = _1850 * _1846;
    float _1854 = dot(vec3(_528, _529, _530), vec3(cbLight._m0[_1718].xyz));
    float _3637 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
    float _1857 = isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0));
    float _1858 = dot(vec3(_528, _529, _530), vec3(_1851, _1852, _1853));
    float _3648 = isnan(0.0) ? _1858 : (isnan(_1858) ? 0.0 : max(_1858, 0.0));
    float _1861 = isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0));
    float _1862 = dot(vec3(cbLight._m0[_1718].xyz), vec3(_1851, _1852, _1853));
    float _3659 = isnan(0.0) ? _1862 : (isnan(_1862) ? 0.0 : max(_1862, 0.0));
    float _1866 = _1843 * _1843;
    float _1870 = ((_1861 * _1861) * (_1866 + (-1.0))) + 1.0;
    float _1879 = (exp2(log2(1.0 - (isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1880 = 1.0 - _1843;
    float _1890 = (0.5 / (((_1779 * ((_1857 * _1880) + _1843)) + 9.9999999392252902907785028219223e-09) + (((_1779 * _1880) + _1843) * _1857))) * _1857;
    float _3670 = isnan(0.0) ? _1890 : (isnan(_1890) ? 0.0 : max(_1890, 0.0));
    float _1892 = (isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0))) * (_1866 / ((_1870 * _1870) * 3.141590118408203125));
    float _1902 = (((_1879 * cbLight._m0[_1831].x) * _1892) * _1701) + ((((cbLight._m0[_1750].x * _1676) * _1803) * _1817) * _1714);
    float _1903 = (((_1879 * cbLight._m0[_1831].y) * _1892) * _1701) + ((((cbLight._m0[_1750].y * _1677) * _1803) * _1817) * _1714);
    float _1904 = (((_1879 * cbLight._m0[_1831].z) * _1892) * _1701) + ((((cbLight._m0[_1750].z * _1678) * _1803) * _1817) * _1714);
    float _2019;
    float _2021;
    float _2023;
    float _2025;
    float _2027;
    float _2029;
    if (_1682.y == 0u)
    {
        float _1959 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1960 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1959;
        float _1961 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1959;
        float _1962 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1959;
        uvec4 _1974 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1975 = _1974.x;
        uint _1986 = uint((float(_1974.y) * floor(float(uint(cbSceneParam._m0[85u].y * _564) / _1975))) + floor(float(uint(cbSceneParam._m0[85u].x * _563) / _1975)));
        float _1996 = (log2(_1962 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1997 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
        uint _2000 = uint(isnan(14.0) ? _1997 : (isnan(_1997) ? 14.0 : min(_1997, 14.0)));
        uvec4 _2005 = texelFetch(g_lightClusterGridBuffer, int(((_2000 << 2u) + (_1986 << 6u)) >> 2u));
        uint _2006 = _2005.x;
        uint _2007 = _1974.z;
        float _2097;
        float _2099;
        float _2101;
        float _2103;
        float _2105;
        float _2107;
        if (((((1u << ((_2007 >> 4u) & 15u)) + 4294967295u) & _2006) == 0u) || ((_2007 & 240u) == 0u))
        {
            _2097 = 0.0;
            _2099 = 0.0;
            _2101 = 0.0;
            _2103 = 0.0;
            _2105 = 0.0;
            _2107 = 0.0;
        }
        else
        {
            float _2098;
            float _2100;
            float _2102;
            float _2104;
            float _2106;
            float _2108;
            float _2273 = 0.0;
            float _2274 = 0.0;
            float _2275 = 0.0;
            float _2276 = 0.0;
            float _2277 = 0.0;
            float _2278 = 0.0;
            uint _2279 = 0u;
            uint _2288;
            bool _2289;
            for (;;)
            {
                _2288 = texelFetch(g_lightClassification, int((((_2000 << 5u) + (_1986 << 9u)) + (_2279 << 2u)) >> 2u)).x;
                _2289 = _2288 == 0u;
                float frontier_phi_58_pred;
                float frontier_phi_58_pred_1;
                float frontier_phi_58_pred_2;
                float frontier_phi_58_pred_3;
                float frontier_phi_58_pred_4;
                float frontier_phi_58_pred_5;
                if (_2289)
                {
                    frontier_phi_58_pred = _2274;
                    frontier_phi_58_pred_1 = _2278;
                    frontier_phi_58_pred_2 = _2277;
                    frontier_phi_58_pred_3 = _2276;
                    frontier_phi_58_pred_4 = _2275;
                    frontier_phi_58_pred_5 = _2273;
                }
                else
                {
                    float _2448;
                    float _2449;
                    float _2450;
                    float _2451;
                    float _2452;
                    float _2453;
                    uint _2454;
                    _2448 = _2273;
                    _2449 = _2274;
                    _2450 = _2275;
                    _2451 = _2276;
                    _2452 = _2277;
                    _2453 = _2278;
                    _2454 = _2288;
                    float _2354;
                    float _2355;
                    float _2356;
                    float _2357;
                    float _2358;
                    float _2359;
                    for (;;)
                    {
                        uint _2458 = uint(findLSB(_2454)) + (_2279 << 5u);
                        uint _2455 = (_2454 + 4294967295u) & _2454;
                        uint _2460 = _2458 * 48u;
                        vec4 _2474 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2460)).x, texelFetch(g_PointLightRenderingBuffer, int(_2460 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2460 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2460 + 3u)).x));
                        uint _2480 = (_2458 * 48u) + 4u;
                        vec4 _2493 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2480)).x, texelFetch(g_PointLightRenderingBuffer, int(_2480 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2480 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2480 + 3u)).x));
                        uint _2499 = (_2458 * 48u) + 8u;
                        vec3 _2510 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2499)).x, texelFetch(g_PointLightRenderingBuffer, int(_2499 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2499 + 2u)).x));
                        float _2514 = _2474.x - _1960;
                        float _2515 = _2474.y - _1961;
                        float _2516 = _2474.z - _1962;
                        float _2517 = dot(vec3(_2514, _2515, _2516), vec3(_2514, _2515, _2516));
                        float _2520 = inversesqrt(_2517);
                        float _2521 = _2520 * _2514;
                        float _2522 = _2520 * _2515;
                        float _2523 = _2520 * _2516;
                        float _2524 = dot(vec3(_583, _586, _589), vec3(_2521, _2522, _2523));
                        float _2529 = 1.0 - (_2517 * _2474.w);
                        float _3691 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
                        float _2530 = isnan(1.0) ? _3691 : (isnan(_3691) ? 1.0 : min(_3691, 1.0));
                        float _2531 = sqrt(_2517) * _2493.w;
                        float _2534 = 1.39999997615814208984375 / (_2531 + 1.39999997615814208984375);
                        float _2535 = _2534 * _2534;
                        float _2538 = ((1.0 - _2535) * _2524) + _2535;
                        float _2541 = _2531 * _2531;
                        float _2545 = ((isnan(0.0) ? _2538 : (isnan(_2538) ? 0.0 : max(_2538, 0.0))) * _2530) / ((_2541 * 0.699999988079071044921875) + 1.0);
                        float _2549 = (-0.0) - _1960;
                        float _2550 = (-0.0) - _1961;
                        float _2551 = (-0.0) - _1962;
                        float _2555 = inversesqrt(dot(vec3(_2549, _2550, _2551), vec3(_2549, _2550, _2551)));
                        float _2556 = _2555 * _2549;
                        float _2557 = _2555 * _2550;
                        float _2558 = _2555 * _2551;
                        float _2566 = exp2(log2(1.0 / ((_2541 * 3.5) + 5.0)) * 0.25);
                        float _2567 = 1.0 - _644;
                        float _2574 = sqrt(1.0 - ((1.0 - (_2567 * _2567)) * (1.0 - (_2566 * _2566))));
                        float _2575 = _2574 * _2574;
                        float _2576 = _2575 * _2575;
                        float _2577 = _2556 + _2521;
                        float _2578 = _2557 + _2522;
                        float _2579 = _2558 + _2523;
                        float _2583 = inversesqrt(dot(vec3(_2577, _2578, _2579), vec3(_2577, _2578, _2579)));
                        float _2587 = dot(vec3(_583, _586, _589), vec3(_2556, _2557, _2558));
                        float _3707 = isnan(0.0) ? _2587 : (isnan(_2587) ? 0.0 : max(_2587, 0.0));
                        float _2590 = isnan(1.0) ? _3707 : (isnan(_3707) ? 1.0 : min(_3707, 1.0));
                        float _2591 = dot(vec3(_583, _586, _589), vec3(_2583 * _2577, _2583 * _2578, _2583 * _2579));
                        float _3718 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
                        float _2594 = isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0));
                        float _2598 = ((_2594 * _2594) * (_2576 + (-1.0))) + 1.0;
                        float _2599 = _2534 * _2575;
                        float _2600 = _2599 * _2599;
                        float _2603 = ((1.0 - _2600) * _2524) + _2600;
                        float _3729 = isnan(0.0) ? _2603 : (isnan(_2603) ? 0.0 : max(_2603, 0.0));
                        float _2604 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
                        float _2605 = 1.0 - _2575;
                        float _2615 = (0.5 / (((_2604 * ((_2590 * _2605) + _2575)) + 9.9999999392252902907785028219223e-09) + (((_2604 * _2605) + _2575) * _2590))) * _2604;
                        float _3740 = isnan(0.0) ? _2615 : (isnan(_2615) ? 0.0 : max(_2615, 0.0));
                        float _2626 = (((_2576 * 3.1415927410125732421875) * (isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0)))) / ((_2598 * _2598) * ((_2541 * 2.1991131305694580078125) + 3.141590118408203125))) * _2530;
                        _2357 = (_2545 * _2493.x) + _2451;
                        _2358 = (_2545 * _2493.y) + _2452;
                        _2359 = (_2545 * _2493.z) + _2453;
                        _2354 = (_2626 * _2510.x) + _2448;
                        _2355 = (_2626 * _2510.y) + _2449;
                        _2356 = (_2626 * _2510.z) + _2450;
                        if (_2455 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2448 = _2354;
                            _2449 = _2355;
                            _2450 = _2356;
                            _2451 = _2357;
                            _2452 = _2358;
                            _2453 = _2359;
                            _2454 = _2455;
                        }
                    }
                    frontier_phi_58_pred = _2355;
                    frontier_phi_58_pred_1 = _2359;
                    frontier_phi_58_pred_2 = _2358;
                    frontier_phi_58_pred_3 = _2357;
                    frontier_phi_58_pred_4 = _2356;
                    frontier_phi_58_pred_5 = _2354;
                }
                _2100 = frontier_phi_58_pred;
                _2108 = frontier_phi_58_pred_1;
                _2106 = frontier_phi_58_pred_2;
                _2104 = frontier_phi_58_pred_3;
                _2102 = frontier_phi_58_pred_4;
                _2098 = frontier_phi_58_pred_5;
                uint _2280 = _2279 + 1u;
                if (_2280 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2273 = _2098;
                    _2274 = _2100;
                    _2275 = _2102;
                    _2276 = _2104;
                    _2277 = _2106;
                    _2278 = _2108;
                    _2279 = _2280;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2097 = _2098;
            _2099 = _2100;
            _2101 = _2102;
            _2103 = _2104;
            _2105 = _2106;
            _2107 = _2108;
        }
        uvec4 _2111 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2112 = _2111.z;
        uint _2114 = (_2112 >> 8u) & 15u;
        float _2241;
        float _2243;
        float _2245;
        float _2247;
        float _2249;
        float _2251;
        if (((4294967295u << _2114) & _2006) == 0u)
        {
            _2241 = _2097;
            _2243 = _2099;
            _2245 = _2101;
            _2247 = _2103;
            _2249 = _2105;
            _2251 = _2107;
        }
        else
        {
            float _2266 = inversesqrt(dot(vec3(_1960, _1961, _1962), vec3(_1960, _1961, _1962)));
            float _2267 = _2266 * _1960;
            float _2268 = _2266 * _1961;
            float _2269 = _2266 * _1962;
            float frontier_phi_49_50_ladder;
            float frontier_phi_49_50_ladder_1;
            float frontier_phi_49_50_ladder_2;
            float frontier_phi_49_50_ladder_3;
            float frontier_phi_49_50_ladder_4;
            float frontier_phi_49_50_ladder_5;
            if (_2114 < ((_2112 >> 12u) & 15u))
            {
                float _2242;
                float _2244;
                float _2246;
                float _2248;
                float _2250;
                float _2252;
                float _2431 = _2097;
                float _2432 = _2099;
                float _2433 = _2101;
                float _2434 = _2103;
                float _2435 = _2105;
                float _2436 = _2107;
                uint _2437 = _2114;
                uint _2446;
                bool _2447;
                for (;;)
                {
                    _2446 = texelFetch(g_lightClassification, int((((_2000 << 5u) + (_1986 << 9u)) + (_2437 << 2u)) >> 2u)).x;
                    _2447 = _2446 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2447)
                    {
                        frontier_phi_67_pred = _2436;
                        frontier_phi_67_pred_1 = _2435;
                        frontier_phi_67_pred_2 = _2434;
                        frontier_phi_67_pred_3 = _2433;
                        frontier_phi_67_pred_4 = _2432;
                        frontier_phi_67_pred_5 = _2431;
                    }
                    else
                    {
                        float _2652;
                        float _2653;
                        float _2654;
                        float _2655;
                        float _2656;
                        float _2657;
                        float _2945;
                        float _2946;
                        float _2947;
                        float _2948;
                        float _2949;
                        float _2950;
                        float _2665 = _2431;
                        float _2666 = _2432;
                        float _2667 = _2433;
                        float _2668 = _2434;
                        float _2669 = _2435;
                        float _2670 = _2436;
                        uint _2671 = _2446;
                        uint _2672;
                        vec4 _2697;
                        float _2698;
                        vec4 _2713;
                        vec3 _2725;
                        vec4 _2740;
                        vec4 _2755;
                        float _2801;
                        bool _2802;
                        for (;;)
                        {
                            uint _2682 = ((_2437 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2671));
                            _2672 = (_2671 + 4294967295u) & _2671;
                            uint _2684 = _2682 * 40u;
                            _2697 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2684)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2684 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2684 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2684 + 3u)).x));
                            _2698 = _2697.w;
                            uint _2700 = (_2682 * 40u) + 4u;
                            _2713 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2700)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2700 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2700 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2700 + 3u)).x));
                            uint _2715 = (_2682 * 40u) + 8u;
                            _2725 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2715)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2715 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2715 + 2u)).x));
                            uint _2727 = (_2682 * 40u) + 16u;
                            _2740 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2727)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2727 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2727 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2727 + 3u)).x));
                            uint _2742 = (_2682 * 40u) + 20u;
                            _2755 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2742)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2742 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2742 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2742 + 3u)).x));
                            uint _2757 = (_2682 * 40u) + 24u;
                            vec4 _2770 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2757)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2757 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2757 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2757 + 3u)).x));
                            uint _2776 = (_2682 * 40u) + 28u;
                            vec4 _2789 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2776)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2776 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2776 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2776 + 3u)).x));
                            _2801 = fma(_1962, _2789.z, fma(_1961, _2789.y, _2789.x * _1960)) + _2789.w;
                            _2802 = !((fma(_1962, _2770.z, fma(_1961, _2770.y, _2770.x * _1960)) + _2770.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2802)
                            {
                                float _2829 = _2697.x - _1960;
                                float _2830 = _2697.y - _1961;
                                float _2831 = _2697.z - _1962;
                                float _2832 = dot(vec3(_2829, _2830, _2831), vec3(_2829, _2830, _2831));
                                float _2835 = inversesqrt(_2832);
                                float _2836 = _2835 * _2829;
                                float _2837 = _2835 * _2830;
                                float _2838 = _2835 * _2831;
                                float _2842 = 1.0 - (_2832 / (_2698 * _2698));
                                float _3751 = isnan(0.0) ? _2842 : (isnan(_2842) ? 0.0 : max(_2842, 0.0));
                                float _2843 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
                                float _2847 = sqrt(_2832) * _2713.w;
                                float _2849 = 1.39999997615814208984375 / (_2847 + 1.39999997615814208984375);
                                float _2850 = _2849 * _2849;
                                float _2853 = ((1.0 - _2850) * dot(vec3(_2836, _2837, _2838), vec3(_583, _586, _589))) + _2850;
                                float _2856 = _2847 * _2847;
                                float _2860 = (fma(_1962, _2740.z, fma(_1961, _2740.y, _2740.x * _1960)) + _2740.w) / _2801;
                                float _2861 = (fma(_1962, _2755.z, fma(_1961, _2755.y, _2755.x * _1960)) + _2755.w) / _2801;
                                float _2865 = 1.0 - dot(vec2(_2860, _2861), vec2(_2860, _2861));
                                float _3767 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
                                float _2866 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
                                float _2867 = _2866 * (((isnan(0.0) ? _2853 : (isnan(_2853) ? 0.0 : max(_2853, 0.0))) * _2843) / ((_2856 * 0.699999988079071044921875) + 1.0));
                                float _2879 = exp2(log2(1.0 / ((_2856 * 3.5) + 5.0)) * 0.25);
                                float _2880 = 1.0 - _644;
                                float _2887 = sqrt(1.0 - ((1.0 - (_2880 * _2880)) * (1.0 - (_2879 * _2879))));
                                float _2888 = _2887 * _2887;
                                float _2889 = _2888 * _2888;
                                float _2890 = _2836 - _2267;
                                float _2891 = _2837 - _2268;
                                float _2892 = _2838 - _2269;
                                float _2896 = inversesqrt(dot(vec3(_2890, _2891, _2892), vec3(_2890, _2891, _2892)));
                                float _2900 = dot(vec3(_583, _586, _589), vec3((-0.0) - _2267, (-0.0) - _2268, (-0.0) - _2269));
                                float _3778 = isnan(0.0) ? _2900 : (isnan(_2900) ? 0.0 : max(_2900, 0.0));
                                float _2903 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
                                float _2904 = dot(vec3(_583, _586, _589), vec3(_2896 * _2890, _2896 * _2891, _2896 * _2892));
                                float _3789 = isnan(0.0) ? _2904 : (isnan(_2904) ? 0.0 : max(_2904, 0.0));
                                float _2907 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
                                float _2911 = ((_2907 * _2907) * (_2889 + (-1.0))) + 1.0;
                                float _2912 = _2849 * _2888;
                                float _2913 = _2912 * _2912;
                                float _2919 = ((1.0 - _2913) * dot(vec3(_583, _586, _589), vec3(_2836, _2837, _2838))) + _2913;
                                float _3800 = isnan(0.0) ? _2919 : (isnan(_2919) ? 0.0 : max(_2919, 0.0));
                                float _2920 = isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0));
                                float _2921 = 1.0 - _2888;
                                float _2931 = (0.5 / (((_2920 * ((_2903 * _2921) + _2888)) + 9.9999999392252902907785028219223e-09) + (((_2920 * _2921) + _2888) * _2903))) * _2920;
                                float _3811 = isnan(0.0) ? _2931 : (isnan(_2931) ? 0.0 : max(_2931, 0.0));
                                float _2941 = (_2866 * _2843) * (((_2889 * 3.1415927410125732421875) * (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0)))) / ((_2911 * _2911) * ((_2856 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _2867 * _2713.z;
                                frontier_phi_73_pred_1 = _2867 * _2713.y;
                                frontier_phi_73_pred_2 = _2867 * _2713.x;
                                frontier_phi_73_pred_3 = _2941 * _2725.z;
                                frontier_phi_73_pred_4 = _2941 * _2725.y;
                                frontier_phi_73_pred_5 = _2941 * _2725.x;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2950 = frontier_phi_73_pred;
                            _2949 = frontier_phi_73_pred_1;
                            _2948 = frontier_phi_73_pred_2;
                            _2947 = frontier_phi_73_pred_3;
                            _2946 = frontier_phi_73_pred_4;
                            _2945 = frontier_phi_73_pred_5;
                            _2655 = _2948 + _2668;
                            _2656 = _2949 + _2669;
                            _2657 = _2950 + _2670;
                            _2652 = _2945 + _2665;
                            _2653 = _2946 + _2666;
                            _2654 = _2947 + _2667;
                            if (_2672 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2665 = _2652;
                                _2666 = _2653;
                                _2667 = _2654;
                                _2668 = _2655;
                                _2669 = _2656;
                                _2670 = _2657;
                                _2671 = _2672;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2657;
                        frontier_phi_67_pred_1 = _2656;
                        frontier_phi_67_pred_2 = _2655;
                        frontier_phi_67_pred_3 = _2654;
                        frontier_phi_67_pred_4 = _2653;
                        frontier_phi_67_pred_5 = _2652;
                    }
                    _2252 = frontier_phi_67_pred;
                    _2250 = frontier_phi_67_pred_1;
                    _2248 = frontier_phi_67_pred_2;
                    _2246 = frontier_phi_67_pred_3;
                    _2244 = frontier_phi_67_pred_4;
                    _2242 = frontier_phi_67_pred_5;
                    uint _2438 = _2437 + 1u;
                    if (_2438 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2431 = _2242;
                        _2432 = _2244;
                        _2433 = _2246;
                        _2434 = _2248;
                        _2435 = _2250;
                        _2436 = _2252;
                        _2437 = _2438;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_49_50_ladder = _2248;
                frontier_phi_49_50_ladder_1 = _2252;
                frontier_phi_49_50_ladder_2 = _2250;
                frontier_phi_49_50_ladder_3 = _2246;
                frontier_phi_49_50_ladder_4 = _2244;
                frontier_phi_49_50_ladder_5 = _2242;
            }
            else
            {
                frontier_phi_49_50_ladder = _2103;
                frontier_phi_49_50_ladder_1 = _2107;
                frontier_phi_49_50_ladder_2 = _2105;
                frontier_phi_49_50_ladder_3 = _2101;
                frontier_phi_49_50_ladder_4 = _2099;
                frontier_phi_49_50_ladder_5 = _2097;
            }
            _2241 = frontier_phi_49_50_ladder_5;
            _2243 = frontier_phi_49_50_ladder_4;
            _2245 = frontier_phi_49_50_ladder_3;
            _2247 = frontier_phi_49_50_ladder;
            _2249 = frontier_phi_49_50_ladder_2;
            _2251 = frontier_phi_49_50_ladder_1;
        }
        float _2256 = isnan(1.0) ? _628 : (isnan(_628) ? 1.0 : min(_628, 1.0));
        _2019 = (_2256 * _2247) + _1746;
        _2021 = (_2256 * _2249) + _1747;
        _2023 = (_2256 * _2251) + _1748;
        _2025 = ((_2241 * 0.039999999105930328369140625) * _2256) + _1902;
        _2027 = ((_2243 * 0.039999999105930328369140625) * _2256) + _1903;
        _2029 = ((_2245 * 0.039999999105930328369140625) * _2256) + _1904;
    }
    else
    {
        _2019 = _1746;
        _2021 = _1747;
        _2023 = _1748;
        _2025 = _1902;
        _2027 = _1903;
        _2029 = _1904;
    }
    float _3827 = isnan(0.0) ? _614 : (isnan(_614) ? 0.0 : max(_614, 0.0));
    float _3838 = isnan(0.0) ? _615 : (isnan(_615) ? 0.0 : max(_615, 0.0));
    float _3849 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _2046 = ((isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) * (_2019 + ((isnan(0.0) ? _1355 : (isnan(_1355) ? 0.0 : max(_1355, 0.0))) * _628))) + ((_2025 + ((isnan(0.0) ? _1648 : (isnan(_1648) ? 0.0 : max(_1648, 0.0))) * _1434)) * cbPerFrame._m0[3u].x);
    float _2047 = ((isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * (_2021 + ((isnan(0.0) ? _1358 : (isnan(_1358) ? 0.0 : max(_1358, 0.0))) * _628))) + ((_2027 + ((isnan(0.0) ? _1651 : (isnan(_1651) ? 0.0 : max(_1651, 0.0))) * _1434)) * cbPerFrame._m0[3u].x);
    float _2048 = ((isnan(1.0) ? _3849 : (isnan(_3849) ? 1.0 : min(_3849, 1.0))) * (_2023 + ((isnan(0.0) ? _1361 : (isnan(_1361) ? 0.0 : max(_1361, 0.0))) * _628))) + ((_2029 + ((isnan(0.0) ? _1654 : (isnan(_1654) ? 0.0 : max(_1654, 0.0))) * _1434)) * cbPerFrame._m0[3u].x);
    uint _2052 = _602 + 6u;
    float _2060 = _563 / cbSceneParam._m0[86u].x;
    float _2061 = _564 / cbSceneParam._m0[86u].y;
    vec4 _2075 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2060, _2061, (log2((isnan(cbSceneParam._m0[77u].w) ? _550 : (isnan(_550) ? cbSceneParam._m0[77u].w : min(_550, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2077 = _2075.x;
    float _2078 = _2075.y;
    float _2079 = _2075.z;
    float _2080 = _2075.w;
    float _2160;
    float _2162;
    float _2164;
    float _2166;
    if (_550 > cbSceneParam._m0[78u].w)
    {
        float _2122 = isnan(_550) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _550 : min(cbSceneParam._m0[80u].w, _550));
        float _2123 = _2122 / _550;
        float _2134 = _2123 * _263;
        float _2135 = _264 * _2123;
        float _2136 = (-0.0) - _2135;
        float _2137 = _2123 * _265;
        float _2139 = (cbSceneParam._m0[77u].w * _2136) / _2122;
        float _2140 = _2139 + cbSceneParam._m0[79u].w;
        float _2141 = cbSceneParam._m0[79u].w - _2135;
        float _2147 = sqrt(((_2134 * _2134) + (_2135 * _2135)) + (_2137 * _2137));
        float _2150 = (1.0 - (cbSceneParam._m0[77u].w / _2122)) * _2147;
        float _2156 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2158 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2367;
        if (abs((_2136 - _2139) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2367 = ((((_2140 > 0.0) ? exp2(_2156 * _2140) : (2.0 - exp2(_2158 * _2140))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2150;
        }
        else
        {
            float _2302 = 1.0 / cbSceneParam._m0[80u].x;
            float _2303 = isnan(_2141) ? _2140 : (isnan(_2140) ? _2141 : max(_2140, _2141));
            float _2304 = isnan(_2141) ? _2140 : (isnan(_2140) ? _2141 : min(_2140, _2141));
            float _2313 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : min(_2303, 0.0));
            float _2314 = isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : min(_2304, 0.0));
            _2367 = ((abs(_2147 / _2136) * cbSceneParam._m0[80u].y) * ((((_2313 - _2314) * 2.0) - ((exp2(_2156 * (isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0)))) - exp2(_2156 * (isnan(0.0) ? _2304 : (isnan(_2304) ? 0.0 : max(_2304, 0.0))))) * _2302)) - ((exp2(_2158 * _2313) - exp2(_2158 * _2314)) * _2302))) + (_2150 * cbSceneParam._m0[80u].z);
        }
        vec4 _2369 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2060, _2061, 1.0), 0.0);
        float _2378 = exp2((_2367 * (-1.44269502162933349609375)) * (1.0 - _2369.w));
        float _2379 = log2(_2378);
        float _2395 = log2(_2080);
        _2160 = (exp2(_2395 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2379 * cbSceneParam._m0[78u].x)) * _2369.x) / cbSceneParam._m0[78u].x)) + _2077;
        _2162 = (exp2(_2395 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2379 * cbSceneParam._m0[78u].y)) * _2369.y) / cbSceneParam._m0[78u].y)) + _2078;
        _2164 = (exp2(_2395 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2379 * cbSceneParam._m0[78u].z)) * _2369.z) / cbSceneParam._m0[78u].z)) + _2079;
        _2166 = _2378 * _2080;
    }
    else
    {
        _2160 = _2077;
        _2162 = _2078;
        _2164 = _2079;
        _2166 = _2080;
    }
    float _2178 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2179 = _2178 == 3.0;
    float _2180 = log2(_2166);
    float _2187 = exp2(_2180 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2046 : (isnan(_2046) ? 0.0 : max(_2046, 0.0)));
    float _2188 = exp2(_2180 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2047 : (isnan(_2047) ? 0.0 : max(_2047, 0.0)));
    float _2189 = exp2(_2180 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2048 : (isnan(_2048) ? 0.0 : max(_2048, 0.0)));
    float _2198 = (_2178 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2198 * (_2179 ? _2187 : (_2187 + (cbSceneParam._m0[72u].w * _2160)));
    SV_Target.y = _2198 * (_2179 ? _2188 : (_2188 + (cbSceneParam._m0[72u].w * _2162)));
    SV_Target.z = _2198 * (_2179 ? _2189 : (_2189 + (cbSceneParam._m0[72u].w * _2164)));
    SV_Target.w = cbInstanceData._m0[_2052].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2052].w;
}


