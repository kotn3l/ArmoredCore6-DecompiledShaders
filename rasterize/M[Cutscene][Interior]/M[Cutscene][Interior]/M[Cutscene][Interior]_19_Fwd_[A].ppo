#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_12;
layout(set = 0, binding = 3) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_13;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _455;
float _3286;
float _3287;
float _3288;
float _3289;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _206 = _205 * _198;
    float _207 = _205 * _199;
    float _208 = _205 * _200;
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _213 = _212 * NORMAL.x;
    float _214 = _212 * NORMAL.y;
    float _215 = _212 * NORMAL.z;
    float _219 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _220 = _219 * TANGENT.x;
    float _221 = _219 * TANGENT.y;
    float _222 = _219 * TANGENT.z;
    float _267 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _277 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _267);
    float _278 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _267);
    float _279 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _267);
    vec4 _292 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _295 = _292.x;
    vec4 _313 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _330 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _295) + cbMtdParam._m0[12u].x) * _313.x;
    float _332 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _295) + cbMtdParam._m0[12u].y) * _313.y;
    float _334 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _295) + cbMtdParam._m0[12u].z) * _313.z;
    vec4 _368 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _383 = inversesqrt(dot(vec3(_206, _207, _208), vec3(_206, _207, _208)));
    float _390 = inversesqrt(dot(vec3(_220, _221, _222), vec3(_220, _221, _222)));
    float _402 = cbMtdParam._m0[24u].w + _277;
    float _403 = cbMtdParam._m0[25u].x + _278;
    float _404 = cbMtdParam._m0[25u].y + _279;
    float _418 = (-0.0) - dot(vec3(_402, _403, _404), vec3(_383 * _206, _383 * _207, _383 * _208));
    float _419 = (-0.0) - dot(vec3(_402, _403, _404), vec3(_390 * _220, _390 * _221, _390 * _222));
    float _420 = (-0.0) - dot(vec3(_402, _403, _404), vec3((-0.0) - _213, (-0.0) - _214, (-0.0) - _215));
    float _424 = inversesqrt(dot(vec3(_418, _419, _420), vec3(_418, _419, _420)));
    float _425 = _424 * _420;
    float _430 = ((cbMtdParam._m0[21u].z * _418) * _424) + (((_368.x * 2.0) + (-1.0)) * cbMtdParam._m0[22u].x);
    float _431 = ((cbMtdParam._m0[21u].w * _419) * _424) + (((_368.y * 2.0) + (-1.0)) * cbMtdParam._m0[22u].y);
    float _434 = fract(cbMtdParam._m0[21u].z * TEXCOORD.x);
    float _435 = fract(cbMtdParam._m0[21u].w * TEXCOORD.y);
    float _453;
    float _456;
    float _458;
    if (_430 > 0.0)
    {
        float _439 = (1.0 - _434) / _430;
        _453 = _439;
        _456 = ((cbMtdParam._m0[18u].w + 1.0) - fract(_439 * _425)) * 0.16666667163372039794921875;
        _458 = (fract((_439 * _431) + _435) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_430 < 0.0)
        {
            float _454 = ((-0.0) - _434) / _430;
            frontier_phi_3_2_ladder = _454;
            frontier_phi_3_2_ladder_1 = (fract((_454 * _431) + _435) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_2 = (fract(_454 * _425) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = _455;
            frontier_phi_3_2_ladder_1 = 0.0;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _453 = frontier_phi_3_2_ladder;
        _456 = frontier_phi_3_2_ladder_2;
        _458 = frontier_phi_3_2_ladder_1;
    }
    float _484;
    float _486;
    float _488;
    if (_431 > 0.0)
    {
        float _471 = (1.0 - _435) / _431;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_471 < _453)
        {
            frontier_phi_8_5_ladder = (fract(_471 * _425) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_471 * _430) + _434) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _471;
        }
        else
        {
            frontier_phi_8_5_ladder = _458;
            frontier_phi_8_5_ladder_1 = _456;
            frontier_phi_8_5_ladder_2 = _453;
        }
        _484 = frontier_phi_8_5_ladder_2;
        _486 = frontier_phi_8_5_ladder_1;
        _488 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_431 < 0.0)
        {
            float _485 = ((-0.0) - _435) / _431;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_485 < _453)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_485 * _425) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_485 * _430) + _434) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _485;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _458;
                frontier_phi_8_6_ladder_9_ladder_1 = _456;
                frontier_phi_8_6_ladder_9_ladder_2 = _453;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _458;
            frontier_phi_8_6_ladder_1 = _456;
            frontier_phi_8_6_ladder_2 = _453;
        }
        _484 = frontier_phi_8_6_ladder_2;
        _486 = frontier_phi_8_6_ladder_1;
        _488 = frontier_phi_8_6_ladder;
    }
    float _492 = (_425 > 0.0) ? (cbMtdParam._m0[18u].z / _425) : 5000.0;
    float _505;
    float _506;
    if (_492 < _484)
    {
        _505 = ((_434 + cbMtdParam._m0[18u].w) + (_492 * _430)) * 0.16666667163372039794921875;
        _506 = (((_492 * _431) + _435) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _505 = _486;
        _506 = _488;
    }
    vec4 _508 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_505, _506));
    float _3298 = isnan(0.0) ? cbMtdParam._m0[17u].z : (isnan(cbMtdParam._m0[17u].z) ? 0.0 : max(cbMtdParam._m0[17u].z, 0.0));
    float _522 = isnan(1.0) ? _3298 : (isnan(_3298) ? 1.0 : min(_3298, 1.0));
    float _3309 = isnan(0.0) ? cbMtdParam._m0[17u].y : (isnan(cbMtdParam._m0[17u].y) ? 0.0 : max(cbMtdParam._m0[17u].y, 0.0));
    float _565 = ((_522 - ((1.0 - (isnan(1.0) ? _3309 : (isnan(_3309) ? 1.0 : min(_3309, 1.0)))) * (_522 + 1.0))) + (((cbMtdParam._m0[18u].y * texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[3u].w)).x) + (cbMtdParam._m0[17u].x * texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w)).x)) / cbMtdParam._m0[17u].w)) / _522;
    float _3320 = isnan(0.0) ? _565 : (isnan(_565) ? 0.0 : max(_565, 0.0));
    float _566 = isnan(1.0) ? _3320 : (isnan(_3320) ? 1.0 : min(_3320, 1.0));
    float _568 = 3.0 - (_566 * 2.0);
    float _573 = _566 * _566;
    float _589 = _295 * 0.1500000059604644775390625;
    float _597 = (_589 * (((_295 * _508.x) * (((_573 * (cbMtdParam._m0[15u].x - cbMtdParam._m0[13u].x)) * _568) + cbMtdParam._m0[13u].x)) - _330)) + _330;
    float _598 = (_589 * (((_295 * _508.y) * (((_573 * (cbMtdParam._m0[15u].y - cbMtdParam._m0[13u].y)) * _568) + cbMtdParam._m0[13u].y)) - _332)) + _332;
    float _599 = (_589 * (((_295 * _508.z) * (((_573 * (cbMtdParam._m0[15u].z - cbMtdParam._m0[13u].z)) * _568) + cbMtdParam._m0[13u].z)) - _334)) + _334;
    vec4 _612 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _616 = _612.z;
    float _619 = (_612.x * 2.0) + (-1.0);
    float _620 = (_612.y * 2.0) + (-1.0);
    float _621 = dot(vec2(_619, _620), vec2(_619, _620));
    float _3331 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _626 = sqrt(1.0 - (isnan(1.0) ? _3331 : (isnan(_3331) ? 1.0 : min(_3331, 1.0))));
    float _629 = fma(_626, _213, fma(_620, _220, _619 * _206));
    float _632 = fma(_626, _214, fma(_620, _221, _619 * _207));
    float _635 = fma(_626, _215, fma(_620, _222, _619 * _208));
    float _639 = inversesqrt(dot(vec3(_629, _632, _635), vec3(_629, _632, _635)));
    float _640 = _639 * _629;
    float _641 = _639 * _632;
    float _642 = _639 * _635;
    float _3342 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _643 = isnan(1.0) ? _3342 : (isnan(_3342) ? 1.0 : min(_3342, 1.0));
    float _3353 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _3364 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _3375 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _662 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _666 = inversesqrt(dot(vec3(_277, _278, _279), vec3(_277, _278, _279)));
    float _667 = _277 * _666;
    float _668 = _278 * _666;
    float _669 = _279 * _666;
    vec4 _674 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _676 = _674.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _837 = sqrt(((_277 * _277) + (_278 * _278)) + (_279 * _279));
        float _843 = (cbMatDynParam._m0[5u].x * _837) + cbMatDynParam._m0[5u].y;
        float _3386 = isnan(0.0) ? _843 : (isnan(_843) ? 0.0 : max(_843, 0.0));
        float _844 = isnan(1.0) ? _3386 : (isnan(_3386) ? 1.0 : min(_3386, 1.0));
        float _848 = (cbMatDynParam._m0[5u].z * _837) + cbMatDynParam._m0[5u].w;
        float _3397 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3397 : (isnan(_3397) ? 1.0 : min(_3397, 1.0))) - _844)) + _844) < ((_676 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _693 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _694 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _714 = fma(_642, cbSceneParam._m0[5u].z, fma(_641, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _640));
    float _717 = fma(_642, cbSceneParam._m0[6u].z, fma(_641, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _640));
    float _720 = fma(_642, cbSceneParam._m0[7u].z, fma(_641, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _640));
    uint _733 = uint(roundEven(NORMAL.w)) * 13u;
    uint _734 = _733 + 9u;
    uint _735 = _734 + uint(cbMatDynParam._m0[0u].w);
    float _741 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3353 : (isnan(_3353) ? 1.0 : min(_3353, 1.0)))) * cbInstanceData._m0[_735].x;
    float _742 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3364 : (isnan(_3364) ? 1.0 : min(_3364, 1.0)))) * cbInstanceData._m0[_735].y;
    float _743 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3375 : (isnan(_3375) ? 1.0 : min(_3375, 1.0)))) * cbInstanceData._m0[_735].z;
    float _3408 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _744 = isnan(1.0) ? _3408 : (isnan(_3408) ? 1.0 : min(_3408, 1.0));
    float _3419 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _745 = isnan(1.0) ? _3419 : (isnan(_3419) ? 1.0 : min(_3419, 1.0));
    float _3430 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _746 = isnan(1.0) ? _3430 : (isnan(_3430) ? 1.0 : min(_3430, 1.0));
    vec4 _755 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _693, cbSceneParam._m0[86u].y * _694));
    float _758 = _755.x * TEXCOORD_4.z;
    float _759 = dot(vec3(_640, _641, _642), vec3(_667, _668, _669));
    float _762 = _759 * 2.0;
    float _766 = (_762 * _640) - _667;
    float _767 = (_762 * _641) - _668;
    float _768 = (_762 * _642) - _669;
    float _772 = abs(dot(vec3(_667, _668, _669), vec3(_640, _641, _642)));
    float _3441 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _774 = sqrt(_643);
    float _786 = exp2((_774 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3441 : (isnan(_3441) ? 1.0 : min(_3441, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_774 * 3.0));
    float _818 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _822 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _826 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1156;
    float _1157;
    float _1158;
    float _1159;
    float _1160;
    float _1161;
    float _1162;
    float _1163;
    float _1164;
    float _1165;
    float _1166;
    float _1167;
    float _1168;
    float _1169;
    float _1170;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _882 = fma(_826, cbModelParam._m0[26u].z, fma(_822, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _818));
        float _886 = fma(_826, cbModelParam._m0[27u].z, fma(_822, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _818));
        float _890 = fma(_826, cbModelParam._m0[28u].z, fma(_822, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _818));
        float _914 = _818 + _640;
        float _915 = _822 + _641;
        float _916 = _826 + _642;
        float _926 = fma(_916, cbModelParam._m0[26u].z, fma(_915, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _914)) - _882;
        float _927 = fma(_916, cbModelParam._m0[27u].z, fma(_915, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _914)) - _886;
        float _928 = fma(_916, cbModelParam._m0[28u].z, fma(_915, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _914)) - _890;
        float _932 = inversesqrt(dot(vec3(_926, _927, _928), vec3(_926, _927, _928)));
        float _945 = ((_932 * _926) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_882 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _946 = ((_932 * _927) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_886 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _947 = ((_932 * _928) / cbModelParam._m0[34u].z) + ((((((_890 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _950 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_945, _946, _947), 0.0);
        vec4 _957 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_945, _946, _947), 0.0);
        vec4 _964 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_945, _946, _947), 0.0);
        vec4 _971 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_945, _946, _947), 0.0);
        float _984 = exp2((_950.w + (-0.5)) * 20.0) * 2.0;
        float _985 = _984 * (_950.x + (-0.5));
        float _986 = _984 * (_950.y + (-0.5));
        float _987 = _984 * (_950.z + (-0.5));
        float _994 = exp2((_957.w + (-0.5)) * 20.0) * 2.0;
        float _995 = _994 * (_957.x + (-0.5));
        float _996 = _994 * (_957.y + (-0.5));
        float _997 = _994 * (_957.z + (-0.5));
        float _1004 = exp2((_964.w + (-0.5)) * 20.0) * 2.0;
        float _1005 = _1004 * (_964.x + (-0.5));
        float _1006 = _1004 * (_964.y + (-0.5));
        float _1007 = _1004 * (_964.z + (-0.5));
        float _1014 = exp2((_971.w + (-0.5)) * 20.0) * 2.0;
        float _1015 = _1014 * (_971.x + (-0.5));
        float _1016 = _1014 * (_971.y + (-0.5));
        float _1017 = _1014 * (_971.z + (-0.5));
        float _1018 = isnan(0.0) ? _1015 : (isnan(_1015) ? 0.0 : max(_1015, 0.0));
        float _1019 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1020 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1021 = _985 * 0.5;
        float _1022 = _995 * 0.5;
        float _1023 = _1005 * 0.5;
        float _1024 = dot(vec3(_1021, _1022, _1023), vec3(_1021, _1022, _1023));
        float _1029 = (_1024 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1024);
        float _1038 = (dot(vec3(_640, _641, _642), vec3(_1029 * _1021, _1029 * _1022, _1029 * _1023)) + 1.0) * 0.5;
        float _3467 = isnan(0.0) ? _1038 : (isnan(_1038) ? 0.0 : max(_1038, 0.0));
        float _1048 = sqrt(((_1022 * _1022) + (_1021 * _1021)) + (_1023 * _1023)) / (_1018 + 9.9999997473787516355514526367188e-06);
        float _3478 = isnan(0.0) ? _1048 : (isnan(_1048) ? 0.0 : max(_1048, 0.0));
        float _1049 = isnan(1.0) ? _3478 : (isnan(_3478) ? 1.0 : min(_3478, 1.0));
        float _1050 = _1049 * 2.0;
        float _1054 = (1.0 - _1049) / (_1049 + 1.0);
        float _3489 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1055 = isnan(1.0) ? _3489 : (isnan(_3489) ? 1.0 : min(_3489, 1.0));
        float _1064 = ((((1.0 - _1055) * (_1050 + 2.0)) * exp2(log2(isnan(1.0) ? _3467 : (isnan(_3467) ? 1.0 : min(_3467, 1.0))) * (_1050 + 1.0))) + _1055) * _1018;
        float _1065 = _986 * 0.5;
        float _1066 = _996 * 0.5;
        float _1067 = _1006 * 0.5;
        float _1068 = dot(vec3(_1065, _1066, _1067), vec3(_1065, _1066, _1067));
        float _1073 = (_1068 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1068);
        float _1081 = (dot(vec3(_640, _641, _642), vec3(_1073 * _1065, _1073 * _1066, _1073 * _1067)) + 1.0) * 0.5;
        float _3500 = isnan(0.0) ? _1081 : (isnan(_1081) ? 0.0 : max(_1081, 0.0));
        float _1090 = sqrt(((_1066 * _1066) + (_1065 * _1065)) + (_1067 * _1067)) / (_1019 + 9.9999997473787516355514526367188e-06);
        float _3511 = isnan(0.0) ? _1090 : (isnan(_1090) ? 0.0 : max(_1090, 0.0));
        float _1091 = isnan(1.0) ? _3511 : (isnan(_3511) ? 1.0 : min(_3511, 1.0));
        float _1092 = _1091 * 2.0;
        float _1096 = (1.0 - _1091) / (_1091 + 1.0);
        float _3522 = isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0));
        float _1097 = isnan(1.0) ? _3522 : (isnan(_3522) ? 1.0 : min(_3522, 1.0));
        float _1106 = ((((1.0 - _1097) * (_1092 + 2.0)) * exp2(log2(isnan(1.0) ? _3500 : (isnan(_3500) ? 1.0 : min(_3500, 1.0))) * (_1092 + 1.0))) + _1097) * _1019;
        float _1107 = _987 * 0.5;
        float _1108 = _997 * 0.5;
        float _1109 = _1007 * 0.5;
        float _1110 = dot(vec3(_1107, _1108, _1109), vec3(_1107, _1108, _1109));
        float _1115 = (_1110 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1110);
        float _1123 = (dot(vec3(_640, _641, _642), vec3(_1115 * _1107, _1115 * _1108, _1115 * _1109)) + 1.0) * 0.5;
        float _3533 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1132 = sqrt(((_1108 * _1108) + (_1107 * _1107)) + (_1109 * _1109)) / (_1020 + 9.9999997473787516355514526367188e-06);
        float _3544 = isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0));
        float _1133 = isnan(1.0) ? _3544 : (isnan(_3544) ? 1.0 : min(_3544, 1.0));
        float _1134 = _1133 * 2.0;
        float _1138 = (1.0 - _1133) / (_1133 + 1.0);
        float _3555 = isnan(0.0) ? _1138 : (isnan(_1138) ? 0.0 : max(_1138, 0.0));
        float _1139 = isnan(1.0) ? _3555 : (isnan(_3555) ? 1.0 : min(_3555, 1.0));
        float _1148 = ((((1.0 - _1139) * (_1134 + 2.0)) * exp2(log2(isnan(1.0) ? _3533 : (isnan(_3533) ? 1.0 : min(_3533, 1.0))) * (_1134 + 1.0))) + _1139) * _1020;
        _1156 = _987;
        _1157 = _986;
        _1158 = _985;
        _1159 = _997;
        _1160 = _996;
        _1161 = _995;
        _1162 = _1007;
        _1163 = _1006;
        _1164 = _1005;
        _1165 = _1020;
        _1166 = _1019;
        _1167 = _1018;
        _1168 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1064 : (isnan(_1064) ? 0.0 : max(_1064, 0.0)));
        _1169 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1106 : (isnan(_1106) ? 0.0 : max(_1106, 0.0)));
        _1170 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1148 : (isnan(_1148) ? 0.0 : max(_1148, 0.0)));
    }
    else
    {
        _1156 = _455;
        _1157 = _455;
        _1158 = _455;
        _1159 = _455;
        _1160 = _455;
        _1161 = _455;
        _1162 = _455;
        _1163 = _455;
        _1164 = _455;
        _1165 = _455;
        _1166 = _455;
        _1167 = _455;
        _1168 = 0.0;
        _1169 = 0.0;
        _1170 = 0.0;
    }
    float _1468;
    float _1469;
    float _1470;
    float _1471;
    float _1472;
    float _1473;
    float _1474;
    float _1475;
    float _1476;
    float _1477;
    float _1478;
    float _1479;
    float _1480;
    float _1481;
    float _1482;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1199 = fma(_826, cbModelParam._m0[30u].z, fma(_822, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _818));
        float _1203 = fma(_826, cbModelParam._m0[31u].z, fma(_822, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _818));
        float _1207 = fma(_826, cbModelParam._m0[32u].z, fma(_822, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _818));
        float _1230 = _818 + _640;
        float _1231 = _822 + _641;
        float _1232 = _826 + _642;
        float _1242 = fma(_1232, cbModelParam._m0[30u].z, fma(_1231, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1230)) - _1199;
        float _1243 = fma(_1232, cbModelParam._m0[31u].z, fma(_1231, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1230)) - _1203;
        float _1244 = fma(_1232, cbModelParam._m0[32u].z, fma(_1231, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1230)) - _1207;
        float _1248 = inversesqrt(dot(vec3(_1242, _1243, _1244), vec3(_1242, _1243, _1244)));
        float _1261 = ((_1248 * _1242) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1199 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1262 = ((_1248 * _1243) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1203 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1263 = ((_1248 * _1244) / cbModelParam._m0[35u].z) + ((((((_1207 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1265 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        vec4 _1272 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        vec4 _1279 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        vec4 _1286 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1261, _1262, _1263), 0.0);
        float _1298 = exp2((_1265.w + (-0.5)) * 20.0) * 2.0;
        float _1299 = _1298 * (_1265.x + (-0.5));
        float _1300 = _1298 * (_1265.y + (-0.5));
        float _1301 = _1298 * (_1265.z + (-0.5));
        float _1308 = exp2((_1272.w + (-0.5)) * 20.0) * 2.0;
        float _1309 = _1308 * (_1272.x + (-0.5));
        float _1310 = _1308 * (_1272.y + (-0.5));
        float _1311 = _1308 * (_1272.z + (-0.5));
        float _1318 = exp2((_1279.w + (-0.5)) * 20.0) * 2.0;
        float _1319 = _1318 * (_1279.x + (-0.5));
        float _1320 = _1318 * (_1279.y + (-0.5));
        float _1321 = _1318 * (_1279.z + (-0.5));
        float _1328 = exp2((_1286.w + (-0.5)) * 20.0) * 2.0;
        float _1329 = _1328 * (_1286.x + (-0.5));
        float _1330 = _1328 * (_1286.y + (-0.5));
        float _1331 = _1328 * (_1286.z + (-0.5));
        float _1332 = isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0));
        float _1333 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
        float _1334 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1335 = _1299 * 0.5;
        float _1336 = _1309 * 0.5;
        float _1337 = _1319 * 0.5;
        float _1338 = dot(vec3(_1335, _1336, _1337), vec3(_1335, _1336, _1337));
        float _1343 = (_1338 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1338);
        float _1351 = (dot(vec3(_640, _641, _642), vec3(_1343 * _1335, _1343 * _1336, _1343 * _1337)) + 1.0) * 0.5;
        float _3596 = isnan(0.0) ? _1351 : (isnan(_1351) ? 0.0 : max(_1351, 0.0));
        float _1360 = sqrt(((_1336 * _1336) + (_1335 * _1335)) + (_1337 * _1337)) / (_1332 + 9.9999997473787516355514526367188e-06);
        float _3607 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1361 = isnan(1.0) ? _3607 : (isnan(_3607) ? 1.0 : min(_3607, 1.0));
        float _1362 = _1361 * 2.0;
        float _1366 = (1.0 - _1361) / (_1361 + 1.0);
        float _3618 = isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0));
        float _1367 = isnan(1.0) ? _3618 : (isnan(_3618) ? 1.0 : min(_3618, 1.0));
        float _1376 = ((((1.0 - _1367) * (_1362 + 2.0)) * exp2(log2(isnan(1.0) ? _3596 : (isnan(_3596) ? 1.0 : min(_3596, 1.0))) * (_1362 + 1.0))) + _1367) * _1332;
        float _1377 = _1300 * 0.5;
        float _1378 = _1310 * 0.5;
        float _1379 = _1320 * 0.5;
        float _1380 = dot(vec3(_1377, _1378, _1379), vec3(_1377, _1378, _1379));
        float _1385 = (_1380 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1380);
        float _1393 = (dot(vec3(_640, _641, _642), vec3(_1385 * _1377, _1385 * _1378, _1385 * _1379)) + 1.0) * 0.5;
        float _3629 = isnan(0.0) ? _1393 : (isnan(_1393) ? 0.0 : max(_1393, 0.0));
        float _1402 = sqrt(((_1378 * _1378) + (_1377 * _1377)) + (_1379 * _1379)) / (_1333 + 9.9999997473787516355514526367188e-06);
        float _3640 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1403 = isnan(1.0) ? _3640 : (isnan(_3640) ? 1.0 : min(_3640, 1.0));
        float _1404 = _1403 * 2.0;
        float _1408 = (1.0 - _1403) / (_1403 + 1.0);
        float _3651 = isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0));
        float _1409 = isnan(1.0) ? _3651 : (isnan(_3651) ? 1.0 : min(_3651, 1.0));
        float _1418 = ((((1.0 - _1409) * (_1404 + 2.0)) * exp2(log2(isnan(1.0) ? _3629 : (isnan(_3629) ? 1.0 : min(_3629, 1.0))) * (_1404 + 1.0))) + _1409) * _1333;
        float _1419 = _1301 * 0.5;
        float _1420 = _1311 * 0.5;
        float _1421 = _1321 * 0.5;
        float _1422 = dot(vec3(_1419, _1420, _1421), vec3(_1419, _1420, _1421));
        float _1427 = (_1422 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1422);
        float _1435 = (dot(vec3(_640, _641, _642), vec3(_1427 * _1419, _1427 * _1420, _1427 * _1421)) + 1.0) * 0.5;
        float _3662 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1444 = sqrt(((_1420 * _1420) + (_1419 * _1419)) + (_1421 * _1421)) / (_1334 + 9.9999997473787516355514526367188e-06);
        float _3673 = isnan(0.0) ? _1444 : (isnan(_1444) ? 0.0 : max(_1444, 0.0));
        float _1445 = isnan(1.0) ? _3673 : (isnan(_3673) ? 1.0 : min(_3673, 1.0));
        float _1446 = _1445 * 2.0;
        float _1450 = (1.0 - _1445) / (_1445 + 1.0);
        float _3684 = isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0));
        float _1451 = isnan(1.0) ? _3684 : (isnan(_3684) ? 1.0 : min(_3684, 1.0));
        float _1460 = ((((1.0 - _1451) * (_1446 + 2.0)) * exp2(log2(isnan(1.0) ? _3662 : (isnan(_3662) ? 1.0 : min(_3662, 1.0))) * (_1446 + 1.0))) + _1451) * _1334;
        _1468 = _1301;
        _1469 = _1300;
        _1470 = _1299;
        _1471 = _1311;
        _1472 = _1310;
        _1473 = _1309;
        _1474 = _1321;
        _1475 = _1320;
        _1476 = _1319;
        _1477 = _1334;
        _1478 = _1333;
        _1479 = _1332;
        _1480 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0)));
        _1481 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1418 : (isnan(_1418) ? 0.0 : max(_1418, 0.0)));
        _1482 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1460 : (isnan(_1460) ? 0.0 : max(_1460, 0.0)));
    }
    else
    {
        _1468 = _455;
        _1469 = _455;
        _1470 = _455;
        _1471 = _455;
        _1472 = _455;
        _1473 = _455;
        _1474 = _455;
        _1475 = _455;
        _1476 = _455;
        _1477 = _455;
        _1478 = _455;
        _1479 = _455;
        _1480 = 0.0;
        _1481 = 0.0;
        _1482 = 0.0;
    }
    float _1492 = (cbModelParam._m0[1u].x * (_1480 - _1168)) + _1168;
    float _1493 = (cbModelParam._m0[1u].x * (_1481 - _1169)) + _1169;
    float _1494 = (cbModelParam._m0[1u].x * (_1482 - _1170)) + _1170;
    float _1515 = fma(_1494, cbSceneParam._m0[89u].z, fma(_1493, cbSceneParam._m0[89u].y, _1492 * cbSceneParam._m0[89u].x));
    float _1518 = fma(_1494, cbSceneParam._m0[90u].z, fma(_1493, cbSceneParam._m0[90u].y, _1492 * cbSceneParam._m0[90u].x));
    float _1521 = fma(_1494, cbSceneParam._m0[91u].z, fma(_1493, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1492));
    float _1536 = _766 * 0.5;
    float _1537 = _767 * 0.5;
    float _1538 = _768 * 0.5;
    float _1539 = dot(vec4(_1536, _1537, _1538, 1.0), vec4(_1470, _1473, _1476, _1479));
    float _1542 = dot(vec4(_1536, _1537, _1538, 1.0), vec4(_1469, _1472, _1475, _1478));
    float _1545 = dot(vec4(_1536, _1537, _1538, 1.0), vec4(_1468, _1471, _1474, _1477));
    float _1579;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1552 = dot(vec4(_1536, _1537, _1538, 1.0), vec4(_1156, _1159, _1162, _1165));
        float _1556 = dot(vec4(_1536, _1537, _1538, 1.0), vec4(_1157, _1160, _1163, _1166));
        float _1560 = dot(vec4(_1536, _1537, _1538, 1.0), vec4(_1158, _1161, _1164, _1167));
        float _1567 = dot(vec4(cbModelParam._m0[39u]), vec4(_1536, _1537, _1538, 1.0));
        _1579 = dot(vec3(isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0)), isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0)), isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1567) ? 0.0 : (isnan(0.0) ? _1567 : max(0.0, _1567))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1579 = 1.0;
    }
    float _1590;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1581 = dot(vec4(cbModelParam._m0[40u]), vec4(_1536, _1537, _1538, 1.0));
        _1590 = dot(vec3(isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0)), isnan(0.0) ? _1542 : (isnan(_1542) ? 0.0 : max(_1542, 0.0)), isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1581) ? 0.0 : (isnan(0.0) ? _1581 : max(0.0, _1581))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1590 = 1.0;
    }
    float _1594 = (_1590 * cbModelParam._m0[1u].x) + (_1579 * (1.0 - cbModelParam._m0[1u].x));
    float _1604 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _643);
    float _1605 = isnan(_1604) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1604 : min(cbModelParam._m0[25u].z, _1604));
    float _1686;
    float _1688;
    float _1690;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1653 = fma(_826, cbModelParam._m0[13u].z, fma(_822, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _818)) + cbModelParam._m0[13u].w;
        float _1657 = fma(_826, cbModelParam._m0[14u].z, fma(_822, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _818)) + cbModelParam._m0[14u].w;
        float _1661 = fma(_826, cbModelParam._m0[15u].z, fma(_822, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _818)) + cbModelParam._m0[15u].w;
        float _1664 = fma(_768, cbModelParam._m0[13u].z, fma(_767, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _766));
        float _1667 = fma(_768, cbModelParam._m0[14u].z, fma(_767, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _766));
        float _1670 = fma(_768, cbModelParam._m0[15u].z, fma(_767, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _766));
        float _1698;
        if (_1664 > 0.0)
        {
            _1698 = abs((1.0 - _1653) / _1664);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_1664 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_1653 + 1.0) / _1664);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1698 = frontier_phi_29_27_ladder;
        }
        float _2044;
        if (_1667 > 0.0)
        {
            _2044 = abs((1.0 - _1657) / _1667);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1667 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1657 + 1.0) / _1667);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _2044 = frontier_phi_38_34_ladder;
        }
        float _2352;
        if (_1670 > 0.0)
        {
            _2352 = abs((1.0 - _1661) / _1670);
        }
        else
        {
            float frontier_phi_52_45_ladder;
            if (_1670 < 0.0)
            {
                frontier_phi_52_45_ladder = abs((_1661 + 1.0) / _1670);
            }
            else
            {
                frontier_phi_52_45_ladder = 5000.0;
            }
            _2352 = frontier_phi_52_45_ladder;
        }
        float _2354 = isnan(_2044) ? _1698 : (isnan(_1698) ? _2044 : min(_1698, _2044));
        float _2355 = isnan(_2352) ? _2354 : (isnan(_2354) ? _2352 : min(_2354, _2352));
        float _2359 = (_2355 * _1664) + _1653;
        float _2360 = (_2355 * _1667) + _1657;
        float _2361 = (_2355 * _1670) + _1661;
        float _2362 = _2355 * 9.9999997473787516355514526367188e-05;
        float _2363 = (-1.0) - _2362;
        float _2365 = _2362 + 1.0;
        float frontier_phi_28_52_ladder;
        float frontier_phi_28_52_ladder_1;
        float frontier_phi_28_52_ladder_2;
        if ((_2361 > _2365) || ((_2361 < _2363) || ((_2360 > _2365) || ((_2360 < _2363) || ((_2359 < _2363) || (_2359 > _2365))))))
        {
            frontier_phi_28_52_ladder = 0.0;
            frontier_phi_28_52_ladder_1 = 0.0;
            frontier_phi_28_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2503 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2361, cbModelParam._m0[9u].z, fma(_2360, cbModelParam._m0[9u].y, _2359 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2361, cbModelParam._m0[10u].z, fma(_2360, cbModelParam._m0[10u].y, _2359 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2361, cbModelParam._m0[11u].z, fma(_2360, cbModelParam._m0[11u].y, _2359 * cbModelParam._m0[11u].x))), _1605);
            frontier_phi_28_52_ladder = _2503.z * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_1 = _2503.y * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_2 = _2503.x * cbModelParam._m0[1u].y;
        }
        _1686 = frontier_phi_28_52_ladder_2;
        _1688 = frontier_phi_28_52_ladder_1;
        _1690 = frontier_phi_28_52_ladder;
    }
    else
    {
        vec4 _1674 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_766, _767, _768), _1605);
        _1686 = _1674.x * cbModelParam._m0[1u].y;
        _1688 = _1674.y * cbModelParam._m0[1u].y;
        _1690 = _1674.z * cbModelParam._m0[1u].y;
    }
    float _1694 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _643);
    float _1695 = isnan(_1694) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1694 : min(cbModelParam._m0[25u].w, _1694));
    float _1784;
    float _1786;
    float _1788;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1748 = fma(_826, cbModelParam._m0[21u].z, fma(_822, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _818)) + cbModelParam._m0[21u].w;
        float _1752 = fma(_826, cbModelParam._m0[22u].z, fma(_822, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _818)) + cbModelParam._m0[22u].w;
        float _1756 = fma(_826, cbModelParam._m0[23u].z, fma(_822, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _818)) + cbModelParam._m0[23u].w;
        float _1759 = fma(_768, cbModelParam._m0[21u].z, fma(_767, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _766));
        float _1762 = fma(_768, cbModelParam._m0[22u].z, fma(_767, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _766));
        float _1765 = fma(_768, cbModelParam._m0[23u].z, fma(_767, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _766));
        float _2049;
        if (_1759 > 0.0)
        {
            _2049 = abs((1.0 - _1748) / _1759);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1759 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1748 + 1.0) / _1759);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _2049 = frontier_phi_40_36_ladder;
        }
        float _2378;
        if (_1762 > 0.0)
        {
            _2378 = abs((1.0 - _1752) / _1762);
        }
        else
        {
            float frontier_phi_54_47_ladder;
            if (_1762 < 0.0)
            {
                frontier_phi_54_47_ladder = abs((_1752 + 1.0) / _1762);
            }
            else
            {
                frontier_phi_54_47_ladder = 5000.0;
            }
            _2378 = frontier_phi_54_47_ladder;
        }
        float _2568;
        if (_1765 > 0.0)
        {
            _2568 = abs((1.0 - _1756) / _1765);
        }
        else
        {
            float frontier_phi_72_65_ladder;
            if (_1765 < 0.0)
            {
                frontier_phi_72_65_ladder = abs((_1756 + 1.0) / _1765);
            }
            else
            {
                frontier_phi_72_65_ladder = 5000.0;
            }
            _2568 = frontier_phi_72_65_ladder;
        }
        float _2570 = isnan(_2378) ? _2049 : (isnan(_2049) ? _2378 : min(_2049, _2378));
        float _2571 = isnan(_2568) ? _2570 : (isnan(_2570) ? _2568 : min(_2570, _2568));
        float _2575 = (_2571 * _1759) + _1748;
        float _2576 = (_2571 * _1762) + _1752;
        float _2577 = (_2571 * _1765) + _1756;
        float _2578 = _2571 * 9.9999997473787516355514526367188e-05;
        float _2579 = (-1.0) - _2578;
        float _2581 = _2578 + 1.0;
        float frontier_phi_37_72_ladder;
        float frontier_phi_37_72_ladder_1;
        float frontier_phi_37_72_ladder_2;
        if ((_2577 > _2581) || ((_2577 < _2579) || ((_2576 > _2581) || ((_2576 < _2579) || ((_2575 < _2579) || (_2575 > _2581))))))
        {
            frontier_phi_37_72_ladder = 0.0;
            frontier_phi_37_72_ladder_1 = 0.0;
            frontier_phi_37_72_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2819 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2577, cbModelParam._m0[17u].z, fma(_2576, cbModelParam._m0[17u].y, _2575 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2577, cbModelParam._m0[18u].z, fma(_2576, cbModelParam._m0[18u].y, _2575 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2577, cbModelParam._m0[19u].z, fma(_2576, cbModelParam._m0[19u].y, _2575 * cbModelParam._m0[19u].x))), _1695);
            frontier_phi_37_72_ladder = _2819.z * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_1 = _2819.y * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_2 = _2819.x * cbModelParam._m0[1u].z;
        }
        _1784 = frontier_phi_37_72_ladder_2;
        _1786 = frontier_phi_37_72_ladder_1;
        _1788 = frontier_phi_37_72_ladder;
    }
    else
    {
        vec4 _1768 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_766, _767, _768), _1695);
        _1784 = _1768.x * cbModelParam._m0[1u].z;
        _1786 = _1768.y * cbModelParam._m0[1u].z;
        _1788 = _1768.z * cbModelParam._m0[1u].z;
    }
    float _1800 = ((((1.0 - _786) * ((_774 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_786 * _774)) * _758;
    float _1801 = _1800 * ((cbModelParam._m0[1u].w * (_1784 - _1686)) + _1686);
    float _1802 = _1800 * ((cbModelParam._m0[1u].w * (_1786 - _1688)) + _1688);
    float _1803 = _1800 * ((cbModelParam._m0[1u].w * (_1788 - _1690)) + _1690);
    float _1806 = fma(_1803, cbSceneParam._m0[89u].z, fma(_1802, cbSceneParam._m0[89u].y, _1801 * cbSceneParam._m0[89u].x));
    float _1809 = fma(_1803, cbSceneParam._m0[90u].z, fma(_1802, cbSceneParam._m0[90u].y, _1801 * cbSceneParam._m0[90u].x));
    float _1812 = fma(_1803, cbSceneParam._m0[91u].z, fma(_1802, cbSceneParam._m0[91u].y, _1801 * cbSceneParam._m0[91u].x));
    uvec4 _1822 = floatBitsToUint(cbInstanceData._m0[_733 + 5u]);
    uint _1824 = _1822.x * 14u;
    uint _1825 = _1824 + 13u;
    float _1830 = _758 + (-1.0);
    float _1833 = (cbLight._m0[_1825].x * _1830) + 1.0;
    float _1834 = (cbLight._m0[_1825].y * _1830) + 1.0;
    uint _1835 = _1824 + 5u;
    float _1841 = isnan(1.0) ? _1834 : (isnan(_1834) ? 1.0 : min(_1834, 1.0));
    uint _1845 = _1824 + 4u;
    float _1851 = isnan(1.0) ? _1833 : (isnan(_1833) ? 1.0 : min(_1833, 1.0));
    uint _1855 = _1824 | 1u;
    float _1866 = dot(vec3(cbLight._m0[_1824].xyz), vec3(_640, _641, _642));
    float _1869 = dot(vec3(cbLight._m0[_1855].xyz), vec3(_640, _641, _642));
    float _3820 = isnan(0.0) ? _1866 : (isnan(_1866) ? 0.0 : max(_1866, 0.0));
    float _3831 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
    float _1874 = (isnan(1.0) ? _3820 : (isnan(_3820) ? 1.0 : min(_3820, 1.0))) * 0.3183098733425140380859375;
    float _1876 = (isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * 0.3183098733425140380859375;
    float _1883 = ((cbLight._m0[_1835].x * _1841) * _1876) + ((cbLight._m0[_1845].x * _1851) * _1874);
    float _1884 = ((_1841 * cbLight._m0[_1835].y) * _1876) + ((_1851 * cbLight._m0[_1845].y) * _1874);
    float _1885 = ((_1841 * cbLight._m0[_1835].z) * _1876) + ((_1851 * cbLight._m0[_1845].z) * _1874);
    uint _1887 = _1824 + 8u;
    float _1900 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1824].w)) * _643) * 0.949999988079071044921875);
    float _1901 = _1900 * _1900;
    float _1902 = cbLight._m0[_1824].x + _667;
    float _1903 = cbLight._m0[_1824].y + _668;
    float _1904 = cbLight._m0[_1824].z + _669;
    float _1908 = inversesqrt(dot(vec3(_1902, _1903, _1904), vec3(_1902, _1903, _1904)));
    float _1909 = _1908 * _1902;
    float _1910 = _1908 * _1903;
    float _1911 = _1908 * _1904;
    float _1912 = dot(vec3(_640, _641, _642), vec3(cbLight._m0[_1824].xyz));
    float _3842 = isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0));
    float _1915 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
    float _3853 = isnan(0.0) ? _759 : (isnan(_759) ? 0.0 : max(_759, 0.0));
    float _1916 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
    float _1917 = dot(vec3(_640, _641, _642), vec3(_1909, _1910, _1911));
    float _3864 = isnan(0.0) ? _1917 : (isnan(_1917) ? 0.0 : max(_1917, 0.0));
    float _1920 = isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0));
    float _1921 = dot(vec3(cbLight._m0[_1824].xyz), vec3(_1909, _1910, _1911));
    float _3875 = isnan(0.0) ? _1921 : (isnan(_1921) ? 0.0 : max(_1921, 0.0));
    float _1925 = _1901 * _1901;
    float _1929 = ((_1920 * _1920) * (_1925 + (-1.0))) + 1.0;
    float _1940 = (exp2(log2(1.0 - (isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1941 = 1.0 - _1901;
    float _1952 = (0.5 / (((_1916 * ((_1915 * _1941) + _1901)) + 9.9999999392252902907785028219223e-09) + (((_1916 * _1941) + _1901) * _1915))) * _1915;
    float _3886 = isnan(0.0) ? _1952 : (isnan(_1952) ? 0.0 : max(_1952, 0.0));
    float _1954 = (isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0))) * (_1925 / ((_1929 * _1929) * 3.141590118408203125));
    uint _1965 = _1824 + 9u;
    float _1976 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1855].w)) * _643) * 0.949999988079071044921875);
    float _1977 = _1976 * _1976;
    float _1978 = cbLight._m0[_1855].x + _667;
    float _1979 = cbLight._m0[_1855].y + _668;
    float _1980 = cbLight._m0[_1855].z + _669;
    float _1984 = inversesqrt(dot(vec3(_1978, _1979, _1980), vec3(_1978, _1979, _1980)));
    float _1985 = _1984 * _1978;
    float _1986 = _1984 * _1979;
    float _1987 = _1984 * _1980;
    float _1988 = dot(vec3(_640, _641, _642), vec3(cbLight._m0[_1855].xyz));
    float _3897 = isnan(0.0) ? _1988 : (isnan(_1988) ? 0.0 : max(_1988, 0.0));
    float _1991 = isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0));
    float _1992 = dot(vec3(_640, _641, _642), vec3(_1985, _1986, _1987));
    float _3908 = isnan(0.0) ? _1992 : (isnan(_1992) ? 0.0 : max(_1992, 0.0));
    float _1995 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
    float _1996 = dot(vec3(cbLight._m0[_1855].xyz), vec3(_1985, _1986, _1987));
    float _3919 = isnan(0.0) ? _1996 : (isnan(_1996) ? 0.0 : max(_1996, 0.0));
    float _2000 = _1977 * _1977;
    float _2004 = ((_1995 * _1995) * (_2000 + (-1.0))) + 1.0;
    float _2013 = (exp2(log2(1.0 - (isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2014 = 1.0 - _1977;
    float _2024 = (0.5 / (((_1916 * ((_1991 * _2014) + _1977)) + 9.9999999392252902907785028219223e-09) + (((_1916 * _2014) + _1977) * _1991))) * _1991;
    float _3930 = isnan(0.0) ? _2024 : (isnan(_2024) ? 0.0 : max(_2024, 0.0));
    float _2026 = (isnan(1.0) ? _3930 : (isnan(_3930) ? 1.0 : min(_3930, 1.0))) * (_2000 / ((_2004 * _2004) * 3.141590118408203125));
    float _2036 = (((_2013 * cbLight._m0[_1965].x) * _2026) * _1841) + (((_1940 * cbLight._m0[_1887].x) * _1954) * _1851);
    float _2037 = (((_2013 * cbLight._m0[_1965].y) * _2026) * _1841) + (((_1940 * cbLight._m0[_1887].y) * _1954) * _1851);
    float _2038 = (((_2013 * cbLight._m0[_1965].z) * _2026) * _1841) + (((_1940 * cbLight._m0[_1887].z) * _1954) * _1851);
    float _2153;
    float _2155;
    float _2157;
    float _2159;
    float _2161;
    float _2163;
    if (_1822.y == 0u)
    {
        float _2093 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2094 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2093;
        float _2095 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2093;
        float _2096 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2093;
        uvec4 _2108 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2109 = _2108.x;
        uint _2120 = uint((float(_2108.y) * floor(float(uint(cbSceneParam._m0[85u].y * _694) / _2109))) + floor(float(uint(cbSceneParam._m0[85u].x * _693) / _2109)));
        float _2130 = (log2(_2096 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2131 = isnan(0.0) ? _2130 : (isnan(_2130) ? 0.0 : max(_2130, 0.0));
        uint _2134 = uint(isnan(14.0) ? _2131 : (isnan(_2131) ? 14.0 : min(_2131, 14.0)));
        uvec4 _2139 = texelFetch(g_lightClusterGridBuffer, int(((_2134 << 2u) + (_2120 << 6u)) >> 2u));
        uint _2140 = _2139.x;
        uint _2141 = _2108.z;
        float _2231;
        float _2233;
        float _2235;
        float _2237;
        float _2239;
        float _2241;
        if (((((1u << ((_2141 >> 4u) & 15u)) + 4294967295u) & _2140) == 0u) || ((_2141 & 240u) == 0u))
        {
            _2231 = 0.0;
            _2233 = 0.0;
            _2235 = 0.0;
            _2237 = 0.0;
            _2239 = 0.0;
            _2241 = 0.0;
        }
        else
        {
            float _2232;
            float _2234;
            float _2236;
            float _2238;
            float _2240;
            float _2242;
            float _2415 = 0.0;
            float _2416 = 0.0;
            float _2417 = 0.0;
            float _2418 = 0.0;
            float _2419 = 0.0;
            float _2420 = 0.0;
            uint _2421 = 0u;
            uint _2430;
            bool _2431;
            for (;;)
            {
                _2430 = texelFetch(g_lightClassification, int((((_2134 << 5u) + (_2120 << 9u)) + (_2421 << 2u)) >> 2u)).x;
                _2431 = _2430 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2431)
                {
                    frontier_phi_67_pred = _2418;
                    frontier_phi_67_pred_1 = _2417;
                    frontier_phi_67_pred_2 = _2416;
                    frontier_phi_67_pred_3 = _2415;
                    frontier_phi_67_pred_4 = _2419;
                    frontier_phi_67_pred_5 = _2420;
                }
                else
                {
                    float _2611;
                    float _2612;
                    float _2613;
                    float _2614;
                    float _2615;
                    float _2616;
                    uint _2617;
                    _2611 = _2415;
                    _2612 = _2416;
                    _2613 = _2417;
                    _2614 = _2418;
                    _2615 = _2419;
                    _2616 = _2420;
                    _2617 = _2430;
                    float _2512;
                    float _2513;
                    float _2514;
                    float _2515;
                    float _2516;
                    float _2517;
                    for (;;)
                    {
                        uint _2621 = uint(findLSB(_2617)) + (_2421 << 5u);
                        uint _2618 = (_2617 + 4294967295u) & _2617;
                        uint _2623 = _2621 * 48u;
                        vec4 _2637 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2623)).x, texelFetch(g_PointLightRenderingBuffer, int(_2623 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2623 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2623 + 3u)).x));
                        uint _2643 = (_2621 * 48u) + 4u;
                        vec4 _2656 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2643)).x, texelFetch(g_PointLightRenderingBuffer, int(_2643 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2643 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2643 + 3u)).x));
                        uint _2662 = (_2621 * 48u) + 8u;
                        vec3 _2673 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2662)).x, texelFetch(g_PointLightRenderingBuffer, int(_2662 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2662 + 2u)).x));
                        float _2677 = _2637.x - _2094;
                        float _2678 = _2637.y - _2095;
                        float _2679 = _2637.z - _2096;
                        float _2680 = dot(vec3(_2677, _2678, _2679), vec3(_2677, _2678, _2679));
                        float _2683 = inversesqrt(_2680);
                        float _2684 = _2683 * _2677;
                        float _2685 = _2683 * _2678;
                        float _2686 = _2683 * _2679;
                        float _2687 = dot(vec3(_714, _717, _720), vec3(_2684, _2685, _2686));
                        float _2692 = 1.0 - (_2680 * _2637.w);
                        float _3951 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
                        float _2693 = isnan(1.0) ? _3951 : (isnan(_3951) ? 1.0 : min(_3951, 1.0));
                        float _2694 = sqrt(_2680) * _2656.w;
                        float _2697 = 1.39999997615814208984375 / (_2694 + 1.39999997615814208984375);
                        float _2698 = _2697 * _2697;
                        float _2701 = ((1.0 - _2698) * _2687) + _2698;
                        float _2704 = _2694 * _2694;
                        float _2708 = ((isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0))) * _2693) / ((_2704 * 0.699999988079071044921875) + 1.0);
                        float _2712 = (-0.0) - _2094;
                        float _2713 = (-0.0) - _2095;
                        float _2714 = (-0.0) - _2096;
                        float _2718 = inversesqrt(dot(vec3(_2712, _2713, _2714), vec3(_2712, _2713, _2714)));
                        float _2719 = _2718 * _2712;
                        float _2720 = _2718 * _2713;
                        float _2721 = _2718 * _2714;
                        float _2729 = exp2(log2(1.0 / ((_2704 * 3.5) + 5.0)) * 0.25);
                        float _2730 = 1.0 - _774;
                        float _2737 = sqrt(1.0 - ((1.0 - (_2730 * _2730)) * (1.0 - (_2729 * _2729))));
                        float _2738 = _2737 * _2737;
                        float _2739 = _2738 * _2738;
                        float _2740 = _2719 + _2684;
                        float _2741 = _2720 + _2685;
                        float _2742 = _2721 + _2686;
                        float _2746 = inversesqrt(dot(vec3(_2740, _2741, _2742), vec3(_2740, _2741, _2742)));
                        float _2750 = dot(vec3(_714, _717, _720), vec3(_2719, _2720, _2721));
                        float _3967 = isnan(0.0) ? _2750 : (isnan(_2750) ? 0.0 : max(_2750, 0.0));
                        float _2753 = isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0));
                        float _2754 = dot(vec3(_714, _717, _720), vec3(_2746 * _2740, _2746 * _2741, _2746 * _2742));
                        float _3978 = isnan(0.0) ? _2754 : (isnan(_2754) ? 0.0 : max(_2754, 0.0));
                        float _2757 = isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0));
                        float _2761 = ((_2757 * _2757) * (_2739 + (-1.0))) + 1.0;
                        float _2762 = _2697 * _2738;
                        float _2763 = _2762 * _2762;
                        float _2766 = ((1.0 - _2763) * _2687) + _2763;
                        float _3989 = isnan(0.0) ? _2766 : (isnan(_2766) ? 0.0 : max(_2766, 0.0));
                        float _2767 = isnan(1.0) ? _3989 : (isnan(_3989) ? 1.0 : min(_3989, 1.0));
                        float _2768 = 1.0 - _2738;
                        float _2778 = (0.5 / (((_2767 * ((_2753 * _2768) + _2738)) + 9.9999999392252902907785028219223e-09) + (((_2767 * _2768) + _2738) * _2753))) * _2767;
                        float _4000 = isnan(0.0) ? _2778 : (isnan(_2778) ? 0.0 : max(_2778, 0.0));
                        float _2789 = (((_2739 * 3.1415927410125732421875) * (isnan(1.0) ? _4000 : (isnan(_4000) ? 1.0 : min(_4000, 1.0)))) / ((_2761 * _2761) * ((_2704 * 2.1991131305694580078125) + 3.141590118408203125))) * _2693;
                        _2515 = (_2708 * _2656.x) + _2614;
                        _2516 = (_2708 * _2656.y) + _2615;
                        _2517 = (_2708 * _2656.z) + _2616;
                        _2512 = (_2789 * _2673.x) + _2611;
                        _2513 = (_2789 * _2673.y) + _2612;
                        _2514 = (_2789 * _2673.z) + _2613;
                        if (_2618 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2611 = _2512;
                            _2612 = _2513;
                            _2613 = _2514;
                            _2614 = _2515;
                            _2615 = _2516;
                            _2616 = _2517;
                            _2617 = _2618;
                        }
                    }
                    frontier_phi_67_pred = _2515;
                    frontier_phi_67_pred_1 = _2514;
                    frontier_phi_67_pred_2 = _2513;
                    frontier_phi_67_pred_3 = _2512;
                    frontier_phi_67_pred_4 = _2516;
                    frontier_phi_67_pred_5 = _2517;
                }
                _2238 = frontier_phi_67_pred;
                _2236 = frontier_phi_67_pred_1;
                _2234 = frontier_phi_67_pred_2;
                _2232 = frontier_phi_67_pred_3;
                _2240 = frontier_phi_67_pred_4;
                _2242 = frontier_phi_67_pred_5;
                uint _2422 = _2421 + 1u;
                if (_2422 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2415 = _2232;
                    _2416 = _2234;
                    _2417 = _2236;
                    _2418 = _2238;
                    _2419 = _2240;
                    _2420 = _2242;
                    _2421 = _2422;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2231 = _2232;
            _2233 = _2234;
            _2235 = _2236;
            _2237 = _2238;
            _2239 = _2240;
            _2241 = _2242;
        }
        uvec4 _2245 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2246 = _2245.z;
        uint _2248 = (_2246 >> 8u) & 15u;
        float _2383;
        float _2385;
        float _2387;
        float _2389;
        float _2391;
        float _2393;
        if (((4294967295u << _2248) & _2140) == 0u)
        {
            _2383 = _2231;
            _2385 = _2233;
            _2387 = _2235;
            _2389 = _2237;
            _2391 = _2239;
            _2393 = _2241;
        }
        else
        {
            float _2408 = inversesqrt(dot(vec3(_2094, _2095, _2096), vec3(_2094, _2095, _2096)));
            float _2409 = _2408 * _2094;
            float _2410 = _2408 * _2095;
            float _2411 = _2408 * _2096;
            float frontier_phi_56_57_ladder;
            float frontier_phi_56_57_ladder_1;
            float frontier_phi_56_57_ladder_2;
            float frontier_phi_56_57_ladder_3;
            float frontier_phi_56_57_ladder_4;
            float frontier_phi_56_57_ladder_5;
            if (_2248 < ((_2246 >> 12u) & 15u))
            {
                float _2384;
                float _2386;
                float _2388;
                float _2390;
                float _2392;
                float _2394;
                float _2594 = _2231;
                float _2595 = _2233;
                float _2596 = _2235;
                float _2597 = _2237;
                float _2598 = _2239;
                float _2599 = _2241;
                uint _2600 = _2248;
                uint _2609;
                bool _2610;
                for (;;)
                {
                    _2609 = texelFetch(g_lightClassification, int((((_2134 << 5u) + (_2120 << 9u)) + (_2600 << 2u)) >> 2u)).x;
                    _2610 = _2609 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    float frontier_phi_81_pred_3;
                    float frontier_phi_81_pred_4;
                    float frontier_phi_81_pred_5;
                    if (_2610)
                    {
                        frontier_phi_81_pred = _2597;
                        frontier_phi_81_pred_1 = _2596;
                        frontier_phi_81_pred_2 = _2595;
                        frontier_phi_81_pred_3 = _2594;
                        frontier_phi_81_pred_4 = _2599;
                        frontier_phi_81_pred_5 = _2598;
                    }
                    else
                    {
                        float _2824;
                        float _2825;
                        float _2826;
                        float _2827;
                        float _2828;
                        float _2829;
                        float _3119;
                        float _3120;
                        float _3121;
                        float _3122;
                        float _3123;
                        float _3124;
                        float _2837 = _2594;
                        float _2838 = _2595;
                        float _2839 = _2596;
                        float _2840 = _2597;
                        float _2841 = _2598;
                        float _2842 = _2599;
                        uint _2843 = _2609;
                        uint _2844;
                        vec4 _2869;
                        float _2870;
                        vec4 _2885;
                        vec3 _2897;
                        vec4 _2913;
                        vec4 _2929;
                        float _2975;
                        bool _2976;
                        for (;;)
                        {
                            uint _2854 = ((_2600 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2843));
                            _2844 = (_2843 + 4294967295u) & _2843;
                            uint _2856 = _2854 * 40u;
                            _2869 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2856)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 3u)).x));
                            _2870 = _2869.w;
                            uint _2872 = (_2854 * 40u) + 4u;
                            _2885 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2872)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2872 + 3u)).x));
                            uint _2887 = (_2854 * 40u) + 8u;
                            _2897 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2887)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2887 + 2u)).x));
                            uint _2900 = (_2854 * 40u) + 16u;
                            _2913 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2900)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2900 + 3u)).x));
                            uint _2916 = (_2854 * 40u) + 20u;
                            _2929 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2916)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2916 + 3u)).x));
                            uint _2931 = (_2854 * 40u) + 24u;
                            vec4 _2944 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2931)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2931 + 3u)).x));
                            uint _2950 = (_2854 * 40u) + 28u;
                            vec4 _2963 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2950)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2950 + 3u)).x));
                            _2975 = fma(_2096, _2963.z, fma(_2095, _2963.y, _2963.x * _2094)) + _2963.w;
                            _2976 = !((fma(_2096, _2944.z, fma(_2095, _2944.y, _2944.x * _2094)) + _2944.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            float frontier_phi_87_pred_3;
                            float frontier_phi_87_pred_4;
                            float frontier_phi_87_pred_5;
                            if (_2976)
                            {
                                float _3003 = _2869.x - _2094;
                                float _3004 = _2869.y - _2095;
                                float _3005 = _2869.z - _2096;
                                float _3006 = dot(vec3(_3003, _3004, _3005), vec3(_3003, _3004, _3005));
                                float _3009 = inversesqrt(_3006);
                                float _3010 = _3009 * _3003;
                                float _3011 = _3009 * _3004;
                                float _3012 = _3009 * _3005;
                                float _3016 = 1.0 - (_3006 / (_2870 * _2870));
                                float _4011 = isnan(0.0) ? _3016 : (isnan(_3016) ? 0.0 : max(_3016, 0.0));
                                float _3017 = isnan(1.0) ? _4011 : (isnan(_4011) ? 1.0 : min(_4011, 1.0));
                                float _3021 = sqrt(_3006) * _2885.w;
                                float _3023 = 1.39999997615814208984375 / (_3021 + 1.39999997615814208984375);
                                float _3024 = _3023 * _3023;
                                float _3027 = ((1.0 - _3024) * dot(vec3(_3010, _3011, _3012), vec3(_714, _717, _720))) + _3024;
                                float _3030 = _3021 * _3021;
                                float _3034 = (fma(_2096, _2913.z, fma(_2095, _2913.y, _2913.x * _2094)) + _2913.w) / _2975;
                                float _3035 = (fma(_2096, _2929.z, fma(_2095, _2929.y, _2929.x * _2094)) + _2929.w) / _2975;
                                float _3039 = 1.0 - dot(vec2(_3034, _3035), vec2(_3034, _3035));
                                float _4027 = isnan(0.0) ? _3039 : (isnan(_3039) ? 0.0 : max(_3039, 0.0));
                                float _3040 = isnan(1.0) ? _4027 : (isnan(_4027) ? 1.0 : min(_4027, 1.0));
                                float _3041 = _3040 * (((isnan(0.0) ? _3027 : (isnan(_3027) ? 0.0 : max(_3027, 0.0))) * _3017) / ((_3030 * 0.699999988079071044921875) + 1.0));
                                float _3053 = exp2(log2(1.0 / ((_3030 * 3.5) + 5.0)) * 0.25);
                                float _3054 = 1.0 - _774;
                                float _3061 = sqrt(1.0 - ((1.0 - (_3054 * _3054)) * (1.0 - (_3053 * _3053))));
                                float _3062 = _3061 * _3061;
                                float _3063 = _3062 * _3062;
                                float _3064 = _3010 - _2409;
                                float _3065 = _3011 - _2410;
                                float _3066 = _3012 - _2411;
                                float _3070 = inversesqrt(dot(vec3(_3064, _3065, _3066), vec3(_3064, _3065, _3066)));
                                float _3074 = dot(vec3(_714, _717, _720), vec3((-0.0) - _2409, (-0.0) - _2410, (-0.0) - _2411));
                                float _4038 = isnan(0.0) ? _3074 : (isnan(_3074) ? 0.0 : max(_3074, 0.0));
                                float _3077 = isnan(1.0) ? _4038 : (isnan(_4038) ? 1.0 : min(_4038, 1.0));
                                float _3078 = dot(vec3(_714, _717, _720), vec3(_3070 * _3064, _3070 * _3065, _3070 * _3066));
                                float _4049 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0));
                                float _3081 = isnan(1.0) ? _4049 : (isnan(_4049) ? 1.0 : min(_4049, 1.0));
                                float _3085 = ((_3081 * _3081) * (_3063 + (-1.0))) + 1.0;
                                float _3086 = _3023 * _3062;
                                float _3087 = _3086 * _3086;
                                float _3093 = ((1.0 - _3087) * dot(vec3(_714, _717, _720), vec3(_3010, _3011, _3012))) + _3087;
                                float _4060 = isnan(0.0) ? _3093 : (isnan(_3093) ? 0.0 : max(_3093, 0.0));
                                float _3094 = isnan(1.0) ? _4060 : (isnan(_4060) ? 1.0 : min(_4060, 1.0));
                                float _3095 = 1.0 - _3062;
                                float _3105 = (0.5 / (((_3094 * ((_3077 * _3095) + _3062)) + 9.9999999392252902907785028219223e-09) + (((_3094 * _3095) + _3062) * _3077))) * _3094;
                                float _4071 = isnan(0.0) ? _3105 : (isnan(_3105) ? 0.0 : max(_3105, 0.0));
                                float _3115 = (_3040 * _3017) * (((_3063 * 3.1415927410125732421875) * (isnan(1.0) ? _4071 : (isnan(_4071) ? 1.0 : min(_4071, 1.0)))) / ((_3085 * _3085) * ((_3030 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_87_pred = _3041 * _2885.x;
                                frontier_phi_87_pred_1 = _3115 * _2897.z;
                                frontier_phi_87_pred_2 = _3115 * _2897.y;
                                frontier_phi_87_pred_3 = _3115 * _2897.x;
                                frontier_phi_87_pred_4 = _3041 * _2885.z;
                                frontier_phi_87_pred_5 = _3041 * _2885.y;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                                frontier_phi_87_pred_3 = 0.0;
                                frontier_phi_87_pred_4 = 0.0;
                                frontier_phi_87_pred_5 = 0.0;
                            }
                            _3122 = frontier_phi_87_pred;
                            _3121 = frontier_phi_87_pred_1;
                            _3120 = frontier_phi_87_pred_2;
                            _3119 = frontier_phi_87_pred_3;
                            _3124 = frontier_phi_87_pred_4;
                            _3123 = frontier_phi_87_pred_5;
                            _2827 = _3122 + _2840;
                            _2828 = _3123 + _2841;
                            _2829 = _3124 + _2842;
                            _2824 = _3119 + _2837;
                            _2825 = _3120 + _2838;
                            _2826 = _3121 + _2839;
                            if (_2844 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2837 = _2824;
                                _2838 = _2825;
                                _2839 = _2826;
                                _2840 = _2827;
                                _2841 = _2828;
                                _2842 = _2829;
                                _2843 = _2844;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _2827;
                        frontier_phi_81_pred_1 = _2826;
                        frontier_phi_81_pred_2 = _2825;
                        frontier_phi_81_pred_3 = _2824;
                        frontier_phi_81_pred_4 = _2829;
                        frontier_phi_81_pred_5 = _2828;
                    }
                    _2390 = frontier_phi_81_pred;
                    _2388 = frontier_phi_81_pred_1;
                    _2386 = frontier_phi_81_pred_2;
                    _2384 = frontier_phi_81_pred_3;
                    _2394 = frontier_phi_81_pred_4;
                    _2392 = frontier_phi_81_pred_5;
                    uint _2601 = _2600 + 1u;
                    if (_2601 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2594 = _2384;
                        _2595 = _2386;
                        _2596 = _2388;
                        _2597 = _2390;
                        _2598 = _2392;
                        _2599 = _2394;
                        _2600 = _2601;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_56_57_ladder = _2394;
                frontier_phi_56_57_ladder_1 = _2392;
                frontier_phi_56_57_ladder_2 = _2390;
                frontier_phi_56_57_ladder_3 = _2386;
                frontier_phi_56_57_ladder_4 = _2384;
                frontier_phi_56_57_ladder_5 = _2388;
            }
            else
            {
                frontier_phi_56_57_ladder = _2241;
                frontier_phi_56_57_ladder_1 = _2239;
                frontier_phi_56_57_ladder_2 = _2237;
                frontier_phi_56_57_ladder_3 = _2233;
                frontier_phi_56_57_ladder_4 = _2231;
                frontier_phi_56_57_ladder_5 = _2235;
            }
            _2383 = frontier_phi_56_57_ladder_4;
            _2385 = frontier_phi_56_57_ladder_3;
            _2387 = frontier_phi_56_57_ladder_5;
            _2389 = frontier_phi_56_57_ladder_2;
            _2391 = frontier_phi_56_57_ladder_1;
            _2393 = frontier_phi_56_57_ladder;
        }
        float _2398 = isnan(1.0) ? _758 : (isnan(_758) ? 1.0 : min(_758, 1.0));
        _2153 = (_2398 * _2389) + _1883;
        _2155 = (_2398 * _2391) + _1884;
        _2157 = (_2398 * _2393) + _1885;
        _2159 = ((_2383 * 0.039999999105930328369140625) * _2398) + _2036;
        _2161 = ((_2385 * 0.039999999105930328369140625) * _2398) + _2037;
        _2163 = ((_2387 * 0.039999999105930328369140625) * _2398) + _2038;
    }
    else
    {
        _2153 = _1883;
        _2155 = _1884;
        _2157 = _1885;
        _2159 = _2036;
        _2161 = _2037;
        _2163 = _2038;
    }
    float _4087 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    float _4098 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
    float _4109 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
    float _2180 = ((isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0))) * (_2153 + ((isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))) * _758))) + ((_2159 + ((isnan(0.0) ? _1806 : (isnan(_1806) ? 0.0 : max(_1806, 0.0))) * _1594)) * cbPerFrame._m0[3u].x);
    float _2181 = ((isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0))) * (_2155 + ((isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0))) * _758))) + ((_2161 + ((isnan(0.0) ? _1809 : (isnan(_1809) ? 0.0 : max(_1809, 0.0))) * _1594)) * cbPerFrame._m0[3u].x);
    float _2182 = ((isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * (_2157 + ((isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0))) * _758))) + ((_2163 + ((isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0))) * _1594)) * cbPerFrame._m0[3u].x);
    float _2183 = isnan(0.0) ? _2180 : (isnan(_2180) ? 0.0 : max(_2180, 0.0));
    float _2184 = isnan(0.0) ? _2181 : (isnan(_2181) ? 0.0 : max(_2181, 0.0));
    float _2185 = isnan(0.0) ? _2182 : (isnan(_2182) ? 0.0 : max(_2182, 0.0));
    uint _2186 = _733 + 6u;
    float _2194 = _693 / cbSceneParam._m0[86u].x;
    float _2195 = _694 / cbSceneParam._m0[86u].y;
    vec4 _2209 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2194, _2195, (log2((isnan(cbSceneParam._m0[77u].w) ? _662 : (isnan(_662) ? cbSceneParam._m0[77u].w : min(_662, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2211 = _2209.x;
    float _2212 = _2209.y;
    float _2213 = _2209.z;
    float _2214 = _2209.w;
    float _2294;
    float _2296;
    float _2298;
    float _2300;
    if (_662 > cbSceneParam._m0[78u].w)
    {
        float _2256 = isnan(_662) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _662 : min(cbSceneParam._m0[80u].w, _662));
        float _2257 = _2256 / _662;
        float _2268 = _2257 * _277;
        float _2269 = _278 * _2257;
        float _2270 = (-0.0) - _2269;
        float _2271 = _2257 * _279;
        float _2273 = (cbSceneParam._m0[77u].w * _2270) / _2256;
        float _2274 = _2273 + cbSceneParam._m0[79u].w;
        float _2275 = cbSceneParam._m0[79u].w - _2269;
        float _2281 = sqrt(((_2268 * _2268) + (_2269 * _2269)) + (_2271 * _2271));
        float _2284 = (1.0 - (cbSceneParam._m0[77u].w / _2256)) * _2281;
        float _2290 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2292 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2525;
        if (abs((_2270 - _2273) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2525 = ((((_2274 > 0.0) ? exp2(_2290 * _2274) : (2.0 - exp2(_2292 * _2274))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2284;
        }
        else
        {
            float _2444 = 1.0 / cbSceneParam._m0[80u].x;
            float _2445 = isnan(_2275) ? _2274 : (isnan(_2274) ? _2275 : max(_2274, _2275));
            float _2446 = isnan(_2275) ? _2274 : (isnan(_2274) ? _2275 : min(_2274, _2275));
            float _2455 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : min(_2445, 0.0));
            float _2456 = isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : min(_2446, 0.0));
            _2525 = ((abs(_2281 / _2270) * cbSceneParam._m0[80u].y) * ((((_2455 - _2456) * 2.0) - ((exp2(_2290 * (isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0)))) - exp2(_2290 * (isnan(0.0) ? _2446 : (isnan(_2446) ? 0.0 : max(_2446, 0.0))))) * _2444)) - ((exp2(_2292 * _2455) - exp2(_2292 * _2456)) * _2444))) + (_2284 * cbSceneParam._m0[80u].z);
        }
        vec4 _2527 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2194, _2195, 1.0), 0.0);
        float _2536 = exp2((_2525 * (-1.44269502162933349609375)) * (1.0 - _2527.w));
        float _2537 = log2(_2536);
        float _2553 = log2(_2214);
        _2294 = (exp2(_2553 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2537 * cbSceneParam._m0[78u].x)) * _2527.x) / cbSceneParam._m0[78u].x)) + _2211;
        _2296 = (exp2(_2553 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2537 * cbSceneParam._m0[78u].y)) * _2527.y) / cbSceneParam._m0[78u].y)) + _2212;
        _2298 = (exp2(_2553 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2537 * cbSceneParam._m0[78u].z)) * _2527.z) / cbSceneParam._m0[78u].z)) + _2213;
        _2300 = _2536 * _2214;
    }
    else
    {
        _2294 = _2211;
        _2296 = _2212;
        _2298 = _2213;
        _2300 = _2214;
    }
    bool _2563;
    vec4 _2310;
    vec4 _2332;
    float _2334;
    float _2338;
    float _2339;
    float _2340;
    float _2341;
    bool _2351;
    for (;;)
    {
        _2310 = cbMatDynParam._m0[0u];
        float _2312 = roundEven(_2310.y);
        bool _2313 = _2312 == 3.0;
        float _2314 = log2(_2300);
        float _2321 = exp2(_2314 * cbSceneParam._m0[78u].x) * _2183;
        float _2322 = exp2(_2314 * cbSceneParam._m0[78u].y) * _2184;
        float _2323 = exp2(_2314 * cbSceneParam._m0[78u].z) * _2185;
        float _2330 = _676 + (-0.5);
        _2332 = cbMtdParam._m0[1u];
        _2334 = _2332.y * _2330;
        float _2337 = (_2312 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2338 = _2337 * (_2313 ? _2321 : (_2321 + (cbSceneParam._m0[72u].w * _2294)));
        _2339 = _2337 * (_2313 ? _2322 : (_2322 + (cbSceneParam._m0[72u].w * _2296)));
        _2340 = _2337 * (_2313 ? _2323 : (_2323 + (cbSceneParam._m0[72u].w * _2298)));
        _2341 = _2330 * 0.999000012874603271484375;
        _2351 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2351)
        {
            if ((cbInstanceData._m0[_733 + 7u].x + _2341) < 0.5)
            {
                _2563 = true;
                break;
            }
        }
        uint _2479 = _734 + uint(_2310.w);
        if ((cbInstanceData._m0[_2479].w < 1.0) && ((cbInstanceData._m0[_2479].w + _2341) < 0.5))
        {
            _2563 = true;
            break;
        }
        if ((_2334 + 1.0) < _2332.x)
        {
            _2563 = true;
            break;
        }
        _2563 = false;
        break;
    }
    float _2794;
    if (_2563)
    {
        discard_state = true;
        _2794 = 0.0;
    }
    else
    {
        _2794 = cbInstanceData._m0[_2186].w;
    }
    SV_Target.x = _2338;
    SV_Target.y = _2339;
    SV_Target.z = _2340;
    SV_Target.w = _2794;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2186].w;
    discard_exit();
}


