#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 2) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_12;
layout(set = 0, binding = 3) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _396;
float _2895;
float _2896;
float _2897;
float _2898;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _200 = _199 * _192;
    float _201 = _199 * _193;
    float _202 = _199 * _194;
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _211 = _210 * TANGENT.x;
    float _212 = _210 * TANGENT.y;
    float _213 = _210 * TANGENT.z;
    float _258 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _268 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _258);
    float _269 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _258);
    float _270 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _258);
    vec4 _305 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _321 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _328 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _340 = cbMtdParam._m0[24u].w + _268;
    float _341 = cbMtdParam._m0[25u].x + _269;
    float _342 = cbMtdParam._m0[25u].y + _270;
    float _359 = (-0.0) - dot(vec3(_340, _341, _342), vec3(_321 * _200, _321 * _201, _321 * _202));
    float _360 = (-0.0) - dot(vec3(_340, _341, _342), vec3(_328 * _211, _328 * _212, _328 * _213));
    float _361 = (-0.0) - dot(vec3(_340, _341, _342), vec3((-0.0) - (NORMAL.x * _206), (-0.0) - (NORMAL.y * _206), (-0.0) - (NORMAL.z * _206)));
    float _365 = inversesqrt(dot(vec3(_359, _360, _361), vec3(_359, _360, _361)));
    float _366 = _365 * _361;
    float _371 = ((cbMtdParam._m0[21u].z * _359) * _365) + (((_305.x * 2.0) + (-1.0)) * cbMtdParam._m0[22u].x);
    float _372 = ((cbMtdParam._m0[21u].w * _360) * _365) + (((_305.y * 2.0) + (-1.0)) * cbMtdParam._m0[22u].y);
    float _375 = fract(cbMtdParam._m0[21u].z * TEXCOORD.x);
    float _376 = fract(cbMtdParam._m0[21u].w * TEXCOORD.y);
    float _394;
    float _397;
    float _399;
    if (_371 > 0.0)
    {
        float _380 = (1.0 - _375) / _371;
        _394 = _380;
        _397 = ((cbMtdParam._m0[18u].w + 1.0) - fract(_380 * _366)) * 0.16666667163372039794921875;
        _399 = (fract((_380 * _372) + _376) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_371 < 0.0)
        {
            float _395 = ((-0.0) - _375) / _371;
            frontier_phi_3_2_ladder = _395;
            frontier_phi_3_2_ladder_1 = (fract((_395 * _372) + _376) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_2 = (fract(_395 * _366) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = _396;
            frontier_phi_3_2_ladder_1 = 0.0;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _394 = frontier_phi_3_2_ladder;
        _397 = frontier_phi_3_2_ladder_2;
        _399 = frontier_phi_3_2_ladder_1;
    }
    float _425;
    float _427;
    float _429;
    if (_372 > 0.0)
    {
        float _412 = (1.0 - _376) / _372;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_412 < _394)
        {
            frontier_phi_8_5_ladder = (fract(_412 * _366) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_412 * _371) + _375) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _412;
        }
        else
        {
            frontier_phi_8_5_ladder = _399;
            frontier_phi_8_5_ladder_1 = _397;
            frontier_phi_8_5_ladder_2 = _394;
        }
        _425 = frontier_phi_8_5_ladder_2;
        _427 = frontier_phi_8_5_ladder_1;
        _429 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_372 < 0.0)
        {
            float _426 = ((-0.0) - _376) / _372;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_426 < _394)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_426 * _366) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_426 * _371) + _375) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _426;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _399;
                frontier_phi_8_6_ladder_9_ladder_1 = _397;
                frontier_phi_8_6_ladder_9_ladder_2 = _394;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _399;
            frontier_phi_8_6_ladder_1 = _397;
            frontier_phi_8_6_ladder_2 = _394;
        }
        _425 = frontier_phi_8_6_ladder_2;
        _427 = frontier_phi_8_6_ladder_1;
        _429 = frontier_phi_8_6_ladder;
    }
    float _433 = (_366 > 0.0) ? (cbMtdParam._m0[18u].z / _366) : 5000.0;
    float _446;
    float _447;
    if (_433 < _425)
    {
        _446 = ((_375 + cbMtdParam._m0[18u].w) + (_433 * _371)) * 0.16666667163372039794921875;
        _447 = (((_433 * _372) + _376) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _446 = _427;
        _447 = _429;
    }
    vec4 _449 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_446, _447));
    float _2907 = isnan(0.0) ? cbMtdParam._m0[17u].z : (isnan(cbMtdParam._m0[17u].z) ? 0.0 : max(cbMtdParam._m0[17u].z, 0.0));
    float _463 = isnan(1.0) ? _2907 : (isnan(_2907) ? 1.0 : min(_2907, 1.0));
    float _2918 = isnan(0.0) ? cbMtdParam._m0[17u].y : (isnan(cbMtdParam._m0[17u].y) ? 0.0 : max(cbMtdParam._m0[17u].y, 0.0));
    float _506 = ((_463 - ((1.0 - (isnan(1.0) ? _2918 : (isnan(_2918) ? 1.0 : min(_2918, 1.0)))) * (_463 + 1.0))) + (((cbMtdParam._m0[18u].y * texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[3u].w)).x) + (cbMtdParam._m0[17u].x * texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w)).x)) / cbMtdParam._m0[17u].w)) / _463;
    float _2929 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _507 = isnan(1.0) ? _2929 : (isnan(_2929) ? 1.0 : min(_2929, 1.0));
    float _509 = 3.0 - (_507 * 2.0);
    float _514 = _507 * _507;
    float _522 = (((_514 * (cbMtdParam._m0[15u].x - cbMtdParam._m0[13u].x)) * _509) + cbMtdParam._m0[13u].x) * _449.x;
    float _524 = (((_514 * (cbMtdParam._m0[15u].y - cbMtdParam._m0[13u].y)) * _509) + cbMtdParam._m0[13u].y) * _449.y;
    float _526 = (((_514 * (cbMtdParam._m0[15u].z - cbMtdParam._m0[13u].z)) * _509) + cbMtdParam._m0[13u].z) * _449.z;
    float _2940 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _2951 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _2962 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _545 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _549 = inversesqrt(dot(vec3(_268, _269, _270), vec3(_268, _269, _270)));
    float _550 = _268 * _549;
    float _551 = _269 * _549;
    float _552 = _270 * _549;
    vec4 _557 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _559 = _557.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _659 = sqrt(((_268 * _268) + (_269 * _269)) + (_270 * _270));
        float _666 = (cbMatDynParam._m0[5u].x * _659) + cbMatDynParam._m0[5u].y;
        float _2973 = isnan(0.0) ? _666 : (isnan(_666) ? 0.0 : max(_666, 0.0));
        float _667 = isnan(1.0) ? _2973 : (isnan(_2973) ? 1.0 : min(_2973, 1.0));
        float _671 = (cbMatDynParam._m0[5u].z * _659) + cbMatDynParam._m0[5u].w;
        float _2984 = isnan(0.0) ? _671 : (isnan(_671) ? 0.0 : max(_671, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2984 : (isnan(_2984) ? 1.0 : min(_2984, 1.0))) - _667)) + _667) < ((_559 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _576 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _577 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _590 = uint(roundEven(NORMAL.w)) * 13u;
    uint _591 = _590 + 9u;
    uint _592 = _591 + uint(cbMatDynParam._m0[0u].w);
    float _598 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2940 : (isnan(_2940) ? 1.0 : min(_2940, 1.0)))) * cbInstanceData._m0[_592].x;
    float _599 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2951 : (isnan(_2951) ? 1.0 : min(_2951, 1.0)))) * cbInstanceData._m0[_592].y;
    float _600 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2962 : (isnan(_2962) ? 1.0 : min(_2962, 1.0)))) * cbInstanceData._m0[_592].z;
    float _2995 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _601 = isnan(1.0) ? _2995 : (isnan(_2995) ? 1.0 : min(_2995, 1.0));
    float _3006 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _602 = isnan(1.0) ? _3006 : (isnan(_3006) ? 1.0 : min(_3006, 1.0));
    float _3017 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _603 = isnan(1.0) ? _3017 : (isnan(_3017) ? 1.0 : min(_3017, 1.0));
    vec4 _612 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _576, cbSceneParam._m0[86u].y * _577));
    float _615 = _612.x * TEXCOORD_4.z;
    float _616 = (-0.0) - _550;
    float _617 = (-0.0) - _551;
    float _618 = (-0.0) - _552;
    float _640 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _644 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _648 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _946;
    float _947;
    float _948;
    float _949;
    float _950;
    float _951;
    float _952;
    float _953;
    float _954;
    float _955;
    float _956;
    float _957;
    float _958;
    float _959;
    float _960;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _734 = (cbModelParam._m0[37u].x * ((((fma(_648, cbModelParam._m0[26u].z, fma(_644, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _640)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _736 = (cbModelParam._m0[37u].y * ((((fma(_648, cbModelParam._m0[27u].z, fma(_644, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _640)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _737 = (((((fma(_648, cbModelParam._m0[28u].z, fma(_644, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _640)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _740 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_734, _736, _737), 0.0);
        vec4 _747 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_734, _736, _737), 0.0);
        vec4 _754 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_734, _736, _737), 0.0);
        vec4 _761 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_734, _736, _737), 0.0);
        float _774 = exp2((_740.w + (-0.5)) * 20.0) * 2.0;
        float _775 = _774 * (_740.x + (-0.5));
        float _776 = _774 * (_740.y + (-0.5));
        float _777 = _774 * (_740.z + (-0.5));
        float _784 = exp2((_747.w + (-0.5)) * 20.0) * 2.0;
        float _785 = _784 * (_747.x + (-0.5));
        float _786 = _784 * (_747.y + (-0.5));
        float _787 = _784 * (_747.z + (-0.5));
        float _794 = exp2((_754.w + (-0.5)) * 20.0) * 2.0;
        float _795 = _794 * (_754.x + (-0.5));
        float _796 = _794 * (_754.y + (-0.5));
        float _797 = _794 * (_754.z + (-0.5));
        float _804 = exp2((_761.w + (-0.5)) * 20.0) * 2.0;
        float _805 = _804 * (_761.x + (-0.5));
        float _806 = _804 * (_761.y + (-0.5));
        float _807 = _804 * (_761.z + (-0.5));
        float _808 = isnan(0.0) ? _805 : (isnan(_805) ? 0.0 : max(_805, 0.0));
        float _809 = isnan(0.0) ? _806 : (isnan(_806) ? 0.0 : max(_806, 0.0));
        float _810 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _811 = _775 * 0.5;
        float _812 = _785 * 0.5;
        float _813 = _795 * 0.5;
        float _814 = dot(vec3(_811, _812, _813), vec3(_811, _812, _813));
        float _819 = (_814 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_814);
        float _828 = (dot(vec3(0.0), vec3(_819 * _811, _819 * _812, _819 * _813)) + 1.0) * 0.5;
        float _3043 = isnan(0.0) ? _828 : (isnan(_828) ? 0.0 : max(_828, 0.0));
        float _838 = sqrt(((_812 * _812) + (_811 * _811)) + (_813 * _813)) / (_808 + 9.9999997473787516355514526367188e-06);
        float _3054 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _839 = isnan(1.0) ? _3054 : (isnan(_3054) ? 1.0 : min(_3054, 1.0));
        float _840 = _839 * 2.0;
        float _844 = (1.0 - _839) / (_839 + 1.0);
        float _3065 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _845 = isnan(1.0) ? _3065 : (isnan(_3065) ? 1.0 : min(_3065, 1.0));
        float _854 = ((((1.0 - _845) * (_840 + 2.0)) * exp2(log2(isnan(1.0) ? _3043 : (isnan(_3043) ? 1.0 : min(_3043, 1.0))) * (_840 + 1.0))) + _845) * _808;
        float _855 = _776 * 0.5;
        float _856 = _786 * 0.5;
        float _857 = _796 * 0.5;
        float _858 = dot(vec3(_855, _856, _857), vec3(_855, _856, _857));
        float _863 = (_858 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_858);
        float _871 = (dot(vec3(0.0), vec3(_863 * _855, _863 * _856, _863 * _857)) + 1.0) * 0.5;
        float _3076 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _880 = sqrt(((_856 * _856) + (_855 * _855)) + (_857 * _857)) / (_809 + 9.9999997473787516355514526367188e-06);
        float _3087 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _881 = isnan(1.0) ? _3087 : (isnan(_3087) ? 1.0 : min(_3087, 1.0));
        float _882 = _881 * 2.0;
        float _886 = (1.0 - _881) / (_881 + 1.0);
        float _3098 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _887 = isnan(1.0) ? _3098 : (isnan(_3098) ? 1.0 : min(_3098, 1.0));
        float _896 = ((((1.0 - _887) * (_882 + 2.0)) * exp2(log2(isnan(1.0) ? _3076 : (isnan(_3076) ? 1.0 : min(_3076, 1.0))) * (_882 + 1.0))) + _887) * _809;
        float _897 = _777 * 0.5;
        float _898 = _787 * 0.5;
        float _899 = _797 * 0.5;
        float _900 = dot(vec3(_897, _898, _899), vec3(_897, _898, _899));
        float _905 = (_900 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_900);
        float _913 = (dot(vec3(0.0), vec3(_905 * _897, _905 * _898, _905 * _899)) + 1.0) * 0.5;
        float _3109 = isnan(0.0) ? _913 : (isnan(_913) ? 0.0 : max(_913, 0.0));
        float _922 = sqrt(((_898 * _898) + (_897 * _897)) + (_899 * _899)) / (_810 + 9.9999997473787516355514526367188e-06);
        float _3120 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
        float _923 = isnan(1.0) ? _3120 : (isnan(_3120) ? 1.0 : min(_3120, 1.0));
        float _924 = _923 * 2.0;
        float _928 = (1.0 - _923) / (_923 + 1.0);
        float _3131 = isnan(0.0) ? _928 : (isnan(_928) ? 0.0 : max(_928, 0.0));
        float _929 = isnan(1.0) ? _3131 : (isnan(_3131) ? 1.0 : min(_3131, 1.0));
        float _938 = ((((1.0 - _929) * (_924 + 2.0)) * exp2(log2(isnan(1.0) ? _3109 : (isnan(_3109) ? 1.0 : min(_3109, 1.0))) * (_924 + 1.0))) + _929) * _810;
        _946 = _777;
        _947 = _776;
        _948 = _775;
        _949 = _787;
        _950 = _786;
        _951 = _785;
        _952 = _797;
        _953 = _796;
        _954 = _795;
        _955 = _810;
        _956 = _809;
        _957 = _808;
        _958 = cbModelParam._m0[36u].z * (isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0)));
        _959 = cbModelParam._m0[36u].z * (isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0)));
        _960 = cbModelParam._m0[36u].z * (isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0)));
    }
    else
    {
        _946 = _396;
        _947 = _396;
        _948 = _396;
        _949 = _396;
        _950 = _396;
        _951 = _396;
        _952 = _396;
        _953 = _396;
        _954 = _396;
        _955 = _396;
        _956 = _396;
        _957 = _396;
        _958 = 0.0;
        _959 = 0.0;
        _960 = 0.0;
    }
    float _1224;
    float _1225;
    float _1226;
    float _1227;
    float _1228;
    float _1229;
    float _1230;
    float _1231;
    float _1232;
    float _1233;
    float _1234;
    float _1235;
    float _1236;
    float _1237;
    float _1238;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1017 = (cbModelParam._m0[38u].x * ((((fma(_648, cbModelParam._m0[30u].z, fma(_644, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _640)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1018 = (cbModelParam._m0[38u].y * ((((fma(_648, cbModelParam._m0[31u].z, fma(_644, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _640)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1019 = (((((fma(_648, cbModelParam._m0[32u].z, fma(_644, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _640)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1021 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1017, _1018, _1019), 0.0);
        vec4 _1028 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1017, _1018, _1019), 0.0);
        vec4 _1035 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1017, _1018, _1019), 0.0);
        vec4 _1042 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1017, _1018, _1019), 0.0);
        float _1054 = exp2((_1021.w + (-0.5)) * 20.0) * 2.0;
        float _1055 = _1054 * (_1021.x + (-0.5));
        float _1056 = _1054 * (_1021.y + (-0.5));
        float _1057 = _1054 * (_1021.z + (-0.5));
        float _1064 = exp2((_1028.w + (-0.5)) * 20.0) * 2.0;
        float _1065 = _1064 * (_1028.x + (-0.5));
        float _1066 = _1064 * (_1028.y + (-0.5));
        float _1067 = _1064 * (_1028.z + (-0.5));
        float _1074 = exp2((_1035.w + (-0.5)) * 20.0) * 2.0;
        float _1075 = _1074 * (_1035.x + (-0.5));
        float _1076 = _1074 * (_1035.y + (-0.5));
        float _1077 = _1074 * (_1035.z + (-0.5));
        float _1084 = exp2((_1042.w + (-0.5)) * 20.0) * 2.0;
        float _1085 = _1084 * (_1042.x + (-0.5));
        float _1086 = _1084 * (_1042.y + (-0.5));
        float _1087 = _1084 * (_1042.z + (-0.5));
        float _1088 = isnan(0.0) ? _1085 : (isnan(_1085) ? 0.0 : max(_1085, 0.0));
        float _1089 = isnan(0.0) ? _1086 : (isnan(_1086) ? 0.0 : max(_1086, 0.0));
        float _1090 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1091 = _1055 * 0.5;
        float _1092 = _1065 * 0.5;
        float _1093 = _1075 * 0.5;
        float _1094 = dot(vec3(_1091, _1092, _1093), vec3(_1091, _1092, _1093));
        float _1099 = (_1094 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1094);
        float _1107 = (dot(vec3(0.0), vec3(_1099 * _1091, _1099 * _1092, _1099 * _1093)) + 1.0) * 0.5;
        float _3172 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1116 = sqrt(((_1092 * _1092) + (_1091 * _1091)) + (_1093 * _1093)) / (_1088 + 9.9999997473787516355514526367188e-06);
        float _3183 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _3183 : (isnan(_3183) ? 1.0 : min(_3183, 1.0));
        float _1118 = _1117 * 2.0;
        float _1122 = (1.0 - _1117) / (_1117 + 1.0);
        float _3194 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1123 = isnan(1.0) ? _3194 : (isnan(_3194) ? 1.0 : min(_3194, 1.0));
        float _1132 = ((((1.0 - _1123) * (_1118 + 2.0)) * exp2(log2(isnan(1.0) ? _3172 : (isnan(_3172) ? 1.0 : min(_3172, 1.0))) * (_1118 + 1.0))) + _1123) * _1088;
        float _1133 = _1056 * 0.5;
        float _1134 = _1066 * 0.5;
        float _1135 = _1076 * 0.5;
        float _1136 = dot(vec3(_1133, _1134, _1135), vec3(_1133, _1134, _1135));
        float _1141 = (_1136 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1136);
        float _1149 = (dot(vec3(0.0), vec3(_1141 * _1133, _1141 * _1134, _1141 * _1135)) + 1.0) * 0.5;
        float _3205 = isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0));
        float _1158 = sqrt(((_1134 * _1134) + (_1133 * _1133)) + (_1135 * _1135)) / (_1089 + 9.9999997473787516355514526367188e-06);
        float _3216 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1159 = isnan(1.0) ? _3216 : (isnan(_3216) ? 1.0 : min(_3216, 1.0));
        float _1160 = _1159 * 2.0;
        float _1164 = (1.0 - _1159) / (_1159 + 1.0);
        float _3227 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1165 = isnan(1.0) ? _3227 : (isnan(_3227) ? 1.0 : min(_3227, 1.0));
        float _1174 = ((((1.0 - _1165) * (_1160 + 2.0)) * exp2(log2(isnan(1.0) ? _3205 : (isnan(_3205) ? 1.0 : min(_3205, 1.0))) * (_1160 + 1.0))) + _1165) * _1089;
        float _1175 = _1057 * 0.5;
        float _1176 = _1067 * 0.5;
        float _1177 = _1077 * 0.5;
        float _1178 = dot(vec3(_1175, _1176, _1177), vec3(_1175, _1176, _1177));
        float _1183 = (_1178 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1178);
        float _1191 = (dot(vec3(0.0), vec3(_1183 * _1175, _1183 * _1176, _1183 * _1177)) + 1.0) * 0.5;
        float _3238 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1200 = sqrt(((_1176 * _1176) + (_1175 * _1175)) + (_1177 * _1177)) / (_1090 + 9.9999997473787516355514526367188e-06);
        float _3249 = isnan(0.0) ? _1200 : (isnan(_1200) ? 0.0 : max(_1200, 0.0));
        float _1201 = isnan(1.0) ? _3249 : (isnan(_3249) ? 1.0 : min(_3249, 1.0));
        float _1202 = _1201 * 2.0;
        float _1206 = (1.0 - _1201) / (_1201 + 1.0);
        float _3260 = isnan(0.0) ? _1206 : (isnan(_1206) ? 0.0 : max(_1206, 0.0));
        float _1207 = isnan(1.0) ? _3260 : (isnan(_3260) ? 1.0 : min(_3260, 1.0));
        float _1216 = ((((1.0 - _1207) * (_1202 + 2.0)) * exp2(log2(isnan(1.0) ? _3238 : (isnan(_3238) ? 1.0 : min(_3238, 1.0))) * (_1202 + 1.0))) + _1207) * _1090;
        _1224 = _1057;
        _1225 = _1056;
        _1226 = _1055;
        _1227 = _1067;
        _1228 = _1066;
        _1229 = _1065;
        _1230 = _1077;
        _1231 = _1076;
        _1232 = _1075;
        _1233 = _1090;
        _1234 = _1089;
        _1235 = _1088;
        _1236 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1132 : (isnan(_1132) ? 0.0 : max(_1132, 0.0)));
        _1237 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1174 : (isnan(_1174) ? 0.0 : max(_1174, 0.0)));
        _1238 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0)));
    }
    else
    {
        _1224 = _396;
        _1225 = _396;
        _1226 = _396;
        _1227 = _396;
        _1228 = _396;
        _1229 = _396;
        _1230 = _396;
        _1231 = _396;
        _1232 = _396;
        _1233 = _396;
        _1234 = _396;
        _1235 = _396;
        _1236 = 0.0;
        _1237 = 0.0;
        _1238 = 0.0;
    }
    float _1248 = (cbModelParam._m0[1u].x * (_1236 - _958)) + _958;
    float _1249 = (cbModelParam._m0[1u].x * (_1237 - _959)) + _959;
    float _1250 = (cbModelParam._m0[1u].x * (_1238 - _960)) + _960;
    float _1271 = fma(_1250, cbSceneParam._m0[89u].z, fma(_1249, cbSceneParam._m0[89u].y, _1248 * cbSceneParam._m0[89u].x));
    float _1274 = fma(_1250, cbSceneParam._m0[90u].z, fma(_1249, cbSceneParam._m0[90u].y, _1248 * cbSceneParam._m0[90u].x));
    float _1277 = fma(_1250, cbSceneParam._m0[91u].z, fma(_1249, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1248));
    float _1292 = _550 * (-0.5);
    float _1293 = _551 * (-0.5);
    float _1294 = _552 * (-0.5);
    float _1295 = dot(vec4(_1292, _1293, _1294, 1.0), vec4(_1226, _1229, _1232, _1235));
    float _1298 = dot(vec4(_1292, _1293, _1294, 1.0), vec4(_1225, _1228, _1231, _1234));
    float _1301 = dot(vec4(_1292, _1293, _1294, 1.0), vec4(_1224, _1227, _1230, _1233));
    float _1335;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1308 = dot(vec4(_1292, _1293, _1294, 1.0), vec4(_946, _949, _952, _955));
        float _1312 = dot(vec4(_1292, _1293, _1294, 1.0), vec4(_947, _950, _953, _956));
        float _1316 = dot(vec4(_1292, _1293, _1294, 1.0), vec4(_948, _951, _954, _957));
        float _1323 = dot(vec4(cbModelParam._m0[39u]), vec4(_1292, _1293, _1294, 1.0));
        _1335 = dot(vec3(isnan(0.0) ? _1316 : (isnan(_1316) ? 0.0 : max(_1316, 0.0)), isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)), isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1323) ? 0.0 : (isnan(0.0) ? _1323 : max(0.0, _1323))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1335 = 1.0;
    }
    float _1346;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1337 = dot(vec4(cbModelParam._m0[40u]), vec4(_1292, _1293, _1294, 1.0));
        _1346 = dot(vec3(isnan(0.0) ? _1295 : (isnan(_1295) ? 0.0 : max(_1295, 0.0)), isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0)), isnan(0.0) ? _1301 : (isnan(_1301) ? 0.0 : max(_1301, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1337) ? 0.0 : (isnan(0.0) ? _1337 : max(0.0, _1337))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1346 = 1.0;
    }
    float _1350 = (_1346 * cbModelParam._m0[1u].x) + (_1335 * (1.0 - cbModelParam._m0[1u].x));
    float _1359 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1441;
    float _1443;
    float _1445;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1408 = fma(_648, cbModelParam._m0[13u].z, fma(_644, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _640)) + cbModelParam._m0[13u].w;
        float _1412 = fma(_648, cbModelParam._m0[14u].z, fma(_644, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _640)) + cbModelParam._m0[14u].w;
        float _1416 = fma(_648, cbModelParam._m0[15u].z, fma(_644, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _640)) + cbModelParam._m0[15u].w;
        float _1419 = fma(_618, cbModelParam._m0[13u].z, fma(_617, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _616));
        float _1422 = fma(_618, cbModelParam._m0[14u].z, fma(_617, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _616));
        float _1425 = fma(_618, cbModelParam._m0[15u].z, fma(_617, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _616));
        float _1451;
        if (_1419 > 0.0)
        {
            _1451 = abs((1.0 - _1408) / _1419);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_1419 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_1408 + 1.0) / _1419);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1451 = frontier_phi_29_27_ladder;
        }
        float _1748;
        if (_1422 > 0.0)
        {
            _1748 = abs((1.0 - _1412) / _1422);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1422 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1412 + 1.0) / _1422);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _1748 = frontier_phi_38_34_ladder;
        }
        float _2058;
        if (_1425 > 0.0)
        {
            _2058 = abs((1.0 - _1416) / _1425);
        }
        else
        {
            float frontier_phi_52_45_ladder;
            if (_1425 < 0.0)
            {
                frontier_phi_52_45_ladder = abs((_1416 + 1.0) / _1425);
            }
            else
            {
                frontier_phi_52_45_ladder = 5000.0;
            }
            _2058 = frontier_phi_52_45_ladder;
        }
        float _2060 = isnan(_1748) ? _1451 : (isnan(_1451) ? _1748 : min(_1451, _1748));
        float _2061 = isnan(_2058) ? _2060 : (isnan(_2060) ? _2058 : min(_2060, _2058));
        float _2065 = (_2061 * _1419) + _1408;
        float _2066 = (_2061 * _1422) + _1412;
        float _2067 = (_2061 * _1425) + _1416;
        float _2068 = _2061 * 9.9999997473787516355514526367188e-05;
        float _2069 = (-1.0) - _2068;
        float _2071 = _2068 + 1.0;
        float frontier_phi_28_52_ladder;
        float frontier_phi_28_52_ladder_1;
        float frontier_phi_28_52_ladder_2;
        if ((_2067 > _2071) || ((_2067 < _2069) || ((_2066 > _2071) || ((_2066 < _2069) || ((_2065 < _2069) || (_2065 > _2071))))))
        {
            frontier_phi_28_52_ladder = 0.0;
            frontier_phi_28_52_ladder_1 = 0.0;
            frontier_phi_28_52_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2206 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2067, cbModelParam._m0[9u].z, fma(_2066, cbModelParam._m0[9u].y, _2065 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2067, cbModelParam._m0[10u].z, fma(_2066, cbModelParam._m0[10u].y, _2065 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2067, cbModelParam._m0[11u].z, fma(_2066, cbModelParam._m0[11u].y, _2065 * cbModelParam._m0[11u].x))), _1359);
            frontier_phi_28_52_ladder = _2206.z * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_1 = _2206.y * cbModelParam._m0[1u].y;
            frontier_phi_28_52_ladder_2 = _2206.x * cbModelParam._m0[1u].y;
        }
        _1441 = frontier_phi_28_52_ladder_2;
        _1443 = frontier_phi_28_52_ladder_1;
        _1445 = frontier_phi_28_52_ladder;
    }
    else
    {
        vec4 _1429 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_616, _617, _618), _1359);
        _1441 = _1429.x * cbModelParam._m0[1u].y;
        _1443 = _1429.y * cbModelParam._m0[1u].y;
        _1445 = _1429.z * cbModelParam._m0[1u].y;
    }
    float _1448 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1537;
    float _1539;
    float _1541;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1501 = fma(_648, cbModelParam._m0[21u].z, fma(_644, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _640)) + cbModelParam._m0[21u].w;
        float _1505 = fma(_648, cbModelParam._m0[22u].z, fma(_644, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _640)) + cbModelParam._m0[22u].w;
        float _1509 = fma(_648, cbModelParam._m0[23u].z, fma(_644, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _640)) + cbModelParam._m0[23u].w;
        float _1512 = fma(_618, cbModelParam._m0[21u].z, fma(_617, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _616));
        float _1515 = fma(_618, cbModelParam._m0[22u].z, fma(_617, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _616));
        float _1518 = fma(_618, cbModelParam._m0[23u].z, fma(_617, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _616));
        float _1753;
        if (_1512 > 0.0)
        {
            _1753 = abs((1.0 - _1501) / _1512);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1512 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1501 + 1.0) / _1512);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _1753 = frontier_phi_40_36_ladder;
        }
        float _2084;
        if (_1515 > 0.0)
        {
            _2084 = abs((1.0 - _1505) / _1515);
        }
        else
        {
            float frontier_phi_54_47_ladder;
            if (_1515 < 0.0)
            {
                frontier_phi_54_47_ladder = abs((_1505 + 1.0) / _1515);
            }
            else
            {
                frontier_phi_54_47_ladder = 5000.0;
            }
            _2084 = frontier_phi_54_47_ladder;
        }
        float _2271;
        if (_1518 > 0.0)
        {
            _2271 = abs((1.0 - _1509) / _1518);
        }
        else
        {
            float frontier_phi_72_65_ladder;
            if (_1518 < 0.0)
            {
                frontier_phi_72_65_ladder = abs((_1509 + 1.0) / _1518);
            }
            else
            {
                frontier_phi_72_65_ladder = 5000.0;
            }
            _2271 = frontier_phi_72_65_ladder;
        }
        float _2273 = isnan(_2084) ? _1753 : (isnan(_1753) ? _2084 : min(_1753, _2084));
        float _2274 = isnan(_2271) ? _2273 : (isnan(_2273) ? _2271 : min(_2273, _2271));
        float _2278 = (_2274 * _1512) + _1501;
        float _2279 = (_2274 * _1515) + _1505;
        float _2280 = (_2274 * _1518) + _1509;
        float _2281 = _2274 * 9.9999997473787516355514526367188e-05;
        float _2282 = (-1.0) - _2281;
        float _2284 = _2281 + 1.0;
        float frontier_phi_37_72_ladder;
        float frontier_phi_37_72_ladder_1;
        float frontier_phi_37_72_ladder_2;
        if ((_2280 > _2284) || ((_2280 < _2282) || ((_2279 > _2284) || ((_2279 < _2282) || ((_2278 < _2282) || (_2278 > _2284))))))
        {
            frontier_phi_37_72_ladder = 0.0;
            frontier_phi_37_72_ladder_1 = 0.0;
            frontier_phi_37_72_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2472 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2280, cbModelParam._m0[17u].z, fma(_2279, cbModelParam._m0[17u].y, _2278 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2280, cbModelParam._m0[18u].z, fma(_2279, cbModelParam._m0[18u].y, _2278 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2280, cbModelParam._m0[19u].z, fma(_2279, cbModelParam._m0[19u].y, _2278 * cbModelParam._m0[19u].x))), _1448);
            frontier_phi_37_72_ladder = _2472.z * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_1 = _2472.y * cbModelParam._m0[1u].z;
            frontier_phi_37_72_ladder_2 = _2472.x * cbModelParam._m0[1u].z;
        }
        _1537 = frontier_phi_37_72_ladder_2;
        _1539 = frontier_phi_37_72_ladder_1;
        _1541 = frontier_phi_37_72_ladder;
    }
    else
    {
        vec4 _1521 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_616, _617, _618), _1448);
        _1537 = _1521.x * cbModelParam._m0[1u].z;
        _1539 = _1521.y * cbModelParam._m0[1u].z;
        _1541 = _1521.z * cbModelParam._m0[1u].z;
    }
    float _1553 = _615 * 0.01200000010430812835693359375;
    float _1555 = _1553 * ((cbModelParam._m0[1u].w * (_1537 - _1441)) + _1441);
    float _1556 = _1553 * ((cbModelParam._m0[1u].w * (_1539 - _1443)) + _1443);
    float _1557 = _1553 * ((cbModelParam._m0[1u].w * (_1541 - _1445)) + _1445);
    float _1560 = fma(_1557, cbSceneParam._m0[89u].z, fma(_1556, cbSceneParam._m0[89u].y, _1555 * cbSceneParam._m0[89u].x));
    float _1563 = fma(_1557, cbSceneParam._m0[90u].z, fma(_1556, cbSceneParam._m0[90u].y, _1555 * cbSceneParam._m0[90u].x));
    float _1566 = fma(_1557, cbSceneParam._m0[91u].z, fma(_1556, cbSceneParam._m0[91u].y, _1555 * cbSceneParam._m0[91u].x));
    uvec4 _1576 = floatBitsToUint(cbInstanceData._m0[_590 + 5u]);
    uint _1578 = _1576.x * 14u;
    uint _1579 = _1578 + 13u;
    float _1584 = _615 + (-1.0);
    float _1587 = (cbLight._m0[_1579].x * _1584) + 1.0;
    float _1588 = (cbLight._m0[_1579].y * _1584) + 1.0;
    uint _1589 = _1578 + 5u;
    float _1595 = isnan(1.0) ? _1588 : (isnan(_1588) ? 1.0 : min(_1588, 1.0));
    uint _1599 = _1578 + 4u;
    float _1606 = isnan(1.0) ? _1587 : (isnan(_1587) ? 1.0 : min(_1587, 1.0));
    uint _1610 = _1578 | 1u;
    float _1621 = dot(vec3(cbLight._m0[_1578].xyz), vec3(0.0));
    float _1624 = dot(vec3(cbLight._m0[_1610].xyz), vec3(0.0));
    float _3396 = isnan(0.0) ? _1621 : (isnan(_1621) ? 0.0 : max(_1621, 0.0));
    float _3407 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
    float _1629 = (isnan(1.0) ? _3396 : (isnan(_3396) ? 1.0 : min(_3396, 1.0))) * 0.3183098733425140380859375;
    float _1631 = (isnan(1.0) ? _3407 : (isnan(_3407) ? 1.0 : min(_3407, 1.0))) * 0.3183098733425140380859375;
    float _1638 = ((cbLight._m0[_1589].x * _1595) * _1631) + ((cbLight._m0[_1599].x * _1606) * _1629);
    float _1639 = ((_1595 * cbLight._m0[_1589].y) * _1631) + ((_1606 * cbLight._m0[_1599].y) * _1629);
    float _1640 = ((_1595 * cbLight._m0[_1589].z) * _1631) + ((_1606 * cbLight._m0[_1599].z) * _1629);
    uint _1641 = _1578 + 8u;
    float _1647 = cbLight._m0[_1578].x + _550;
    float _1648 = cbLight._m0[_1578].y + _551;
    float _1649 = cbLight._m0[_1578].z + _552;
    float _1653 = inversesqrt(dot(vec3(_1647, _1648, _1649), vec3(_1647, _1648, _1649)));
    float _1657 = dot(vec3(0.0), vec3(cbLight._m0[_1578].xyz));
    float _3418 = isnan(0.0) ? _1657 : (isnan(_1657) ? 0.0 : max(_1657, 0.0));
    float _1660 = isnan(1.0) ? _3418 : (isnan(_3418) ? 1.0 : min(_3418, 1.0));
    float _1661 = dot(vec3(0.0), vec3(_550, _551, _552));
    float _3429 = isnan(0.0) ? _1661 : (isnan(_1661) ? 0.0 : max(_1661, 0.0));
    float _1664 = isnan(1.0) ? _3429 : (isnan(_3429) ? 1.0 : min(_3429, 1.0));
    float _1665 = dot(vec3(cbLight._m0[_1578].xyz), vec3(_1647 * _1653, _1648 * _1653, _1649 * _1653));
    float _3440 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
    float _1676 = (exp2(log2(1.0 - (isnan(1.0) ? _3440 : (isnan(_3440) ? 1.0 : min(_3440, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1682 = (0.5 / ((_1660 + 9.9999999392252902907785028219223e-09) + _1664)) * _1660;
    float _3451 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
    float _1684 = (isnan(1.0) ? _3451 : (isnan(_3451) ? 1.0 : min(_3451, 1.0))) * 0.31831014156341552734375;
    uint _1695 = _1578 + 9u;
    float _1701 = cbLight._m0[_1610].x + _550;
    float _1702 = cbLight._m0[_1610].y + _551;
    float _1703 = cbLight._m0[_1610].z + _552;
    float _1707 = inversesqrt(dot(vec3(_1701, _1702, _1703), vec3(_1701, _1702, _1703)));
    float _1711 = dot(vec3(0.0), vec3(cbLight._m0[_1610].xyz));
    float _3462 = isnan(0.0) ? _1711 : (isnan(_1711) ? 0.0 : max(_1711, 0.0));
    float _1714 = isnan(1.0) ? _3462 : (isnan(_3462) ? 1.0 : min(_3462, 1.0));
    float _1715 = dot(vec3(cbLight._m0[_1610].xyz), vec3(_1701 * _1707, _1702 * _1707, _1703 * _1707));
    float _3473 = isnan(0.0) ? _1715 : (isnan(_1715) ? 0.0 : max(_1715, 0.0));
    float _1724 = (exp2(log2(1.0 - (isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1728 = (0.5 / ((_1714 + 9.9999999392252902907785028219223e-09) + _1664)) * _1714;
    float _3484 = isnan(0.0) ? _1728 : (isnan(_1728) ? 0.0 : max(_1728, 0.0));
    float _1730 = (isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0))) * 0.31831014156341552734375;
    float _1740 = (((_1724 * cbLight._m0[_1695].x) * _1730) * _1595) + (((_1676 * cbLight._m0[_1641].x) * _1684) * _1606);
    float _1741 = (((_1724 * cbLight._m0[_1695].y) * _1730) * _1595) + (((_1676 * cbLight._m0[_1641].y) * _1684) * _1606);
    float _1742 = (((_1724 * cbLight._m0[_1695].z) * _1730) * _1595) + (((_1676 * cbLight._m0[_1641].z) * _1684) * _1606);
    float _1858;
    float _1860;
    float _1862;
    float _1864;
    float _1866;
    float _1868;
    if (_1576.y == 0u)
    {
        float _1798 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1799 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1798;
        float _1800 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1798;
        float _1801 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1798;
        uvec4 _1813 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1814 = _1813.x;
        uint _1825 = uint((float(_1813.y) * floor(float(uint(cbSceneParam._m0[85u].y * _577) / _1814))) + floor(float(uint(cbSceneParam._m0[85u].x * _576) / _1814)));
        float _1835 = (log2(_1801 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1836 = isnan(0.0) ? _1835 : (isnan(_1835) ? 0.0 : max(_1835, 0.0));
        uint _1839 = uint(isnan(14.0) ? _1836 : (isnan(_1836) ? 14.0 : min(_1836, 14.0)));
        uvec4 _1844 = texelFetch(g_lightClusterGridBuffer, int(((_1839 << 2u) + (_1825 << 6u)) >> 2u));
        uint _1845 = _1844.x;
        uint _1846 = _1813.z;
        float _1936;
        float _1938;
        float _1940;
        float _1942;
        float _1944;
        float _1946;
        if (((((1u << ((_1846 >> 4u) & 15u)) + 4294967295u) & _1845) == 0u) || ((_1846 & 240u) == 0u))
        {
            _1936 = 0.0;
            _1938 = 0.0;
            _1940 = 0.0;
            _1942 = 0.0;
            _1944 = 0.0;
            _1946 = 0.0;
        }
        else
        {
            float _1937;
            float _1939;
            float _1941;
            float _1943;
            float _1945;
            float _1947;
            float _2118 = 0.0;
            float _2119 = 0.0;
            float _2120 = 0.0;
            float _2121 = 0.0;
            float _2122 = 0.0;
            float _2123 = 0.0;
            uint _2124 = 0u;
            uint _2133;
            bool _2134;
            for (;;)
            {
                _2133 = texelFetch(g_lightClassification, int((((_1839 << 5u) + (_1825 << 9u)) + (_2124 << 2u)) >> 2u)).x;
                _2134 = _2133 == 0u;
                float frontier_phi_67_pred;
                float frontier_phi_67_pred_1;
                float frontier_phi_67_pred_2;
                float frontier_phi_67_pred_3;
                float frontier_phi_67_pred_4;
                float frontier_phi_67_pred_5;
                if (_2134)
                {
                    frontier_phi_67_pred = _2121;
                    frontier_phi_67_pred_1 = _2120;
                    frontier_phi_67_pred_2 = _2119;
                    frontier_phi_67_pred_3 = _2118;
                    frontier_phi_67_pred_4 = _2122;
                    frontier_phi_67_pred_5 = _2123;
                }
                else
                {
                    float _2314;
                    float _2315;
                    float _2316;
                    float _2317;
                    float _2318;
                    float _2319;
                    uint _2320;
                    _2314 = _2118;
                    _2315 = _2119;
                    _2316 = _2120;
                    _2317 = _2121;
                    _2318 = _2122;
                    _2319 = _2123;
                    _2320 = _2133;
                    float _2215;
                    float _2216;
                    float _2217;
                    float _2218;
                    float _2219;
                    float _2220;
                    for (;;)
                    {
                        uint _2324 = uint(findLSB(_2320)) + (_2124 << 5u);
                        uint _2321 = (_2320 + 4294967295u) & _2320;
                        uint _2326 = _2324 * 48u;
                        vec4 _2340 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2326)).x, texelFetch(g_PointLightRenderingBuffer, int(_2326 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2326 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2326 + 3u)).x));
                        uint _2346 = (_2324 * 48u) + 4u;
                        vec4 _2359 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2346)).x, texelFetch(g_PointLightRenderingBuffer, int(_2346 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2346 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2346 + 3u)).x));
                        uint _2365 = (_2324 * 48u) + 8u;
                        vec3 _2376 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2365)).x, texelFetch(g_PointLightRenderingBuffer, int(_2365 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2365 + 2u)).x));
                        float _2380 = _2340.x - _1799;
                        float _2381 = _2340.y - _1800;
                        float _2382 = _2340.z - _1801;
                        float _2383 = dot(vec3(_2380, _2381, _2382), vec3(_2380, _2381, _2382));
                        float _2386 = inversesqrt(_2383);
                        float _2395 = 1.0 - (_2383 * _2340.w);
                        float _3505 = isnan(0.0) ? _2395 : (isnan(_2395) ? 0.0 : max(_2395, 0.0));
                        float _2396 = isnan(1.0) ? _3505 : (isnan(_3505) ? 1.0 : min(_3505, 1.0));
                        float _2397 = sqrt(_2383) * _2359.w;
                        float _2400 = 1.39999997615814208984375 / (_2397 + 1.39999997615814208984375);
                        float _2401 = _2400 * _2400;
                        float _2404 = ((1.0 - _2401) * dot(vec3(0.0), vec3(_2386 * _2380, _2386 * _2381, _2386 * _2382))) + _2401;
                        float _2407 = _2397 * _2397;
                        float _2411 = ((isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0))) * _2396) / ((_2407 * 0.699999988079071044921875) + 1.0);
                        float _2415 = (-0.0) - _1799;
                        float _2416 = (-0.0) - _1800;
                        float _2417 = (-0.0) - _1801;
                        float _2421 = inversesqrt(dot(vec3(_2415, _2416, _2417), vec3(_2415, _2416, _2417)));
                        float _2425 = dot(vec3(0.0), vec3(_2421 * _2415, _2421 * _2416, _2421 * _2417));
                        float _3521 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
                        float _3532 = isnan(0.0) ? _2404 : (isnan(_2404) ? 0.0 : max(_2404, 0.0));
                        float _2429 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
                        float _2433 = (0.5 / (((isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0))) + 9.9999999392252902907785028219223e-09) + _2429)) * _2429;
                        float _3543 = isnan(0.0) ? _2433 : (isnan(_2433) ? 0.0 : max(_2433, 0.0));
                        float _2442 = (((isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0))) * 3.1415927410125732421875) / ((_2407 * 2.1991131305694580078125) + 3.141590118408203125)) * _2396;
                        _2218 = (_2411 * _2359.x) + _2317;
                        _2219 = (_2411 * _2359.y) + _2318;
                        _2220 = (_2411 * _2359.z) + _2319;
                        _2215 = (_2442 * _2376.x) + _2314;
                        _2216 = (_2442 * _2376.y) + _2315;
                        _2217 = (_2442 * _2376.z) + _2316;
                        if (_2321 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2314 = _2215;
                            _2315 = _2216;
                            _2316 = _2217;
                            _2317 = _2218;
                            _2318 = _2219;
                            _2319 = _2220;
                            _2320 = _2321;
                        }
                    }
                    frontier_phi_67_pred = _2218;
                    frontier_phi_67_pred_1 = _2217;
                    frontier_phi_67_pred_2 = _2216;
                    frontier_phi_67_pred_3 = _2215;
                    frontier_phi_67_pred_4 = _2219;
                    frontier_phi_67_pred_5 = _2220;
                }
                _1943 = frontier_phi_67_pred;
                _1941 = frontier_phi_67_pred_1;
                _1939 = frontier_phi_67_pred_2;
                _1937 = frontier_phi_67_pred_3;
                _1945 = frontier_phi_67_pred_4;
                _1947 = frontier_phi_67_pred_5;
                uint _2125 = _2124 + 1u;
                if (_2125 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2118 = _1937;
                    _2119 = _1939;
                    _2120 = _1941;
                    _2121 = _1943;
                    _2122 = _1945;
                    _2123 = _1947;
                    _2124 = _2125;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1936 = _1937;
            _1938 = _1939;
            _1940 = _1941;
            _1942 = _1943;
            _1944 = _1945;
            _1946 = _1947;
        }
        uvec4 _1950 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1951 = _1950.z;
        uint _1953 = (_1951 >> 8u) & 15u;
        float _2089;
        float _2091;
        float _2093;
        float _2095;
        float _2097;
        float _2099;
        if (((4294967295u << _1953) & _1845) == 0u)
        {
            _2089 = _1936;
            _2091 = _1938;
            _2093 = _1940;
            _2095 = _1942;
            _2097 = _1944;
            _2099 = _1946;
        }
        else
        {
            float _2114 = inversesqrt(dot(vec3(_1799, _1800, _1801), vec3(_1799, _1800, _1801)));
            float frontier_phi_56_57_ladder;
            float frontier_phi_56_57_ladder_1;
            float frontier_phi_56_57_ladder_2;
            float frontier_phi_56_57_ladder_3;
            float frontier_phi_56_57_ladder_4;
            float frontier_phi_56_57_ladder_5;
            if (_1953 < ((_1951 >> 12u) & 15u))
            {
                float _2090;
                float _2092;
                float _2094;
                float _2096;
                float _2098;
                float _2100;
                float _2297 = _1936;
                float _2298 = _1938;
                float _2299 = _1940;
                float _2300 = _1942;
                float _2301 = _1944;
                float _2302 = _1946;
                uint _2303 = _1953;
                uint _2312;
                bool _2313;
                for (;;)
                {
                    _2312 = texelFetch(g_lightClassification, int((((_1839 << 5u) + (_1825 << 9u)) + (_2303 << 2u)) >> 2u)).x;
                    _2313 = _2312 == 0u;
                    float frontier_phi_81_pred;
                    float frontier_phi_81_pred_1;
                    float frontier_phi_81_pred_2;
                    float frontier_phi_81_pred_3;
                    float frontier_phi_81_pred_4;
                    float frontier_phi_81_pred_5;
                    if (_2313)
                    {
                        frontier_phi_81_pred = _2300;
                        frontier_phi_81_pred_1 = _2299;
                        frontier_phi_81_pred_2 = _2298;
                        frontier_phi_81_pred_3 = _2297;
                        frontier_phi_81_pred_4 = _2302;
                        frontier_phi_81_pred_5 = _2301;
                    }
                    else
                    {
                        float _2477;
                        float _2478;
                        float _2479;
                        float _2480;
                        float _2481;
                        float _2482;
                        float _2728;
                        float _2729;
                        float _2730;
                        float _2731;
                        float _2732;
                        float _2733;
                        float _2490 = _2297;
                        float _2491 = _2298;
                        float _2492 = _2299;
                        float _2493 = _2300;
                        float _2494 = _2301;
                        float _2495 = _2302;
                        uint _2496 = _2312;
                        uint _2497;
                        vec4 _2522;
                        float _2523;
                        vec4 _2538;
                        vec3 _2550;
                        vec4 _2566;
                        vec4 _2582;
                        float _2628;
                        bool _2629;
                        for (;;)
                        {
                            uint _2507 = ((_2303 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2496));
                            _2497 = (_2496 + 4294967295u) & _2496;
                            uint _2509 = _2507 * 40u;
                            _2522 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2509)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2509 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2509 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2509 + 3u)).x));
                            _2523 = _2522.w;
                            uint _2525 = (_2507 * 40u) + 4u;
                            _2538 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2525)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2525 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2525 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2525 + 3u)).x));
                            uint _2540 = (_2507 * 40u) + 8u;
                            _2550 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2540)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2540 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2540 + 2u)).x));
                            uint _2553 = (_2507 * 40u) + 16u;
                            _2566 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2553)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2553 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2553 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2553 + 3u)).x));
                            uint _2569 = (_2507 * 40u) + 20u;
                            _2582 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2569)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2569 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2569 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2569 + 3u)).x));
                            uint _2584 = (_2507 * 40u) + 24u;
                            vec4 _2597 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2584)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2584 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2584 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2584 + 3u)).x));
                            uint _2603 = (_2507 * 40u) + 28u;
                            vec4 _2616 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2603)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2603 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2603 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2603 + 3u)).x));
                            _2628 = fma(_1801, _2616.z, fma(_1800, _2616.y, _2616.x * _1799)) + _2616.w;
                            _2629 = !((fma(_1801, _2597.z, fma(_1800, _2597.y, _2597.x * _1799)) + _2597.w) <= 0.0);
                            float frontier_phi_87_pred;
                            float frontier_phi_87_pred_1;
                            float frontier_phi_87_pred_2;
                            float frontier_phi_87_pred_3;
                            float frontier_phi_87_pred_4;
                            float frontier_phi_87_pred_5;
                            if (_2629)
                            {
                                float _2656 = _2522.x - _1799;
                                float _2657 = _2522.y - _1800;
                                float _2658 = _2522.z - _1801;
                                float _2659 = dot(vec3(_2656, _2657, _2658), vec3(_2656, _2657, _2658));
                                float _2662 = inversesqrt(_2659);
                                float _2663 = _2662 * _2656;
                                float _2664 = _2662 * _2657;
                                float _2665 = _2662 * _2658;
                                float _2669 = 1.0 - (_2659 / (_2523 * _2523));
                                float _3554 = isnan(0.0) ? _2669 : (isnan(_2669) ? 0.0 : max(_2669, 0.0));
                                float _2670 = isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0));
                                float _2674 = sqrt(_2659) * _2538.w;
                                float _2676 = 1.39999997615814208984375 / (_2674 + 1.39999997615814208984375);
                                float _2677 = _2676 * _2676;
                                float _2678 = 1.0 - _2677;
                                float _2680 = (_2678 * dot(vec3(_2663, _2664, _2665), vec3(0.0))) + _2677;
                                float _2683 = _2674 * _2674;
                                float _2687 = (fma(_1801, _2566.z, fma(_1800, _2566.y, _2566.x * _1799)) + _2566.w) / _2628;
                                float _2688 = (fma(_1801, _2582.z, fma(_1800, _2582.y, _2582.x * _1799)) + _2582.w) / _2628;
                                float _2692 = 1.0 - dot(vec2(_2687, _2688), vec2(_2687, _2688));
                                float _3570 = isnan(0.0) ? _2692 : (isnan(_2692) ? 0.0 : max(_2692, 0.0));
                                float _2693 = isnan(1.0) ? _3570 : (isnan(_3570) ? 1.0 : min(_3570, 1.0));
                                float _2694 = _2693 * (((isnan(0.0) ? _2680 : (isnan(_2680) ? 0.0 : max(_2680, 0.0))) * _2670) / ((_2683 * 0.699999988079071044921875) + 1.0));
                                float _2704 = dot(vec3(0.0), vec3((-0.0) - (_1799 * _2114), (-0.0) - (_1800 * _2114), (-0.0) - (_1801 * _2114)));
                                float _3581 = isnan(0.0) ? _2704 : (isnan(_2704) ? 0.0 : max(_2704, 0.0));
                                float _2712 = (_2678 * dot(vec3(0.0), vec3(_2663, _2664, _2665))) + _2677;
                                float _3592 = isnan(0.0) ? _2712 : (isnan(_2712) ? 0.0 : max(_2712, 0.0));
                                float _2713 = isnan(1.0) ? _3592 : (isnan(_3592) ? 1.0 : min(_3592, 1.0));
                                float _2717 = (0.5 / (((isnan(1.0) ? _3581 : (isnan(_3581) ? 1.0 : min(_3581, 1.0))) + 9.9999999392252902907785028219223e-09) + _2713)) * _2713;
                                float _3603 = isnan(0.0) ? _2717 : (isnan(_2717) ? 0.0 : max(_2717, 0.0));
                                float _2724 = (_2693 * _2670) * (((isnan(1.0) ? _3603 : (isnan(_3603) ? 1.0 : min(_3603, 1.0))) * 3.1415927410125732421875) / ((_2683 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_87_pred = _2694 * _2538.x;
                                frontier_phi_87_pred_1 = _2724 * _2550.z;
                                frontier_phi_87_pred_2 = _2724 * _2550.y;
                                frontier_phi_87_pred_3 = _2724 * _2550.x;
                                frontier_phi_87_pred_4 = _2694 * _2538.z;
                                frontier_phi_87_pred_5 = _2694 * _2538.y;
                            }
                            else
                            {
                                frontier_phi_87_pred = 0.0;
                                frontier_phi_87_pred_1 = 0.0;
                                frontier_phi_87_pred_2 = 0.0;
                                frontier_phi_87_pred_3 = 0.0;
                                frontier_phi_87_pred_4 = 0.0;
                                frontier_phi_87_pred_5 = 0.0;
                            }
                            _2731 = frontier_phi_87_pred;
                            _2730 = frontier_phi_87_pred_1;
                            _2729 = frontier_phi_87_pred_2;
                            _2728 = frontier_phi_87_pred_3;
                            _2733 = frontier_phi_87_pred_4;
                            _2732 = frontier_phi_87_pred_5;
                            _2480 = _2731 + _2493;
                            _2481 = _2732 + _2494;
                            _2482 = _2733 + _2495;
                            _2477 = _2728 + _2490;
                            _2478 = _2729 + _2491;
                            _2479 = _2730 + _2492;
                            if (_2497 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2490 = _2477;
                                _2491 = _2478;
                                _2492 = _2479;
                                _2493 = _2480;
                                _2494 = _2481;
                                _2495 = _2482;
                                _2496 = _2497;
                                continue;
                            }
                        }
                        frontier_phi_81_pred = _2480;
                        frontier_phi_81_pred_1 = _2479;
                        frontier_phi_81_pred_2 = _2478;
                        frontier_phi_81_pred_3 = _2477;
                        frontier_phi_81_pred_4 = _2482;
                        frontier_phi_81_pred_5 = _2481;
                    }
                    _2096 = frontier_phi_81_pred;
                    _2094 = frontier_phi_81_pred_1;
                    _2092 = frontier_phi_81_pred_2;
                    _2090 = frontier_phi_81_pred_3;
                    _2100 = frontier_phi_81_pred_4;
                    _2098 = frontier_phi_81_pred_5;
                    uint _2304 = _2303 + 1u;
                    if (_2304 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2297 = _2090;
                        _2298 = _2092;
                        _2299 = _2094;
                        _2300 = _2096;
                        _2301 = _2098;
                        _2302 = _2100;
                        _2303 = _2304;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_56_57_ladder = _2100;
                frontier_phi_56_57_ladder_1 = _2098;
                frontier_phi_56_57_ladder_2 = _2096;
                frontier_phi_56_57_ladder_3 = _2092;
                frontier_phi_56_57_ladder_4 = _2090;
                frontier_phi_56_57_ladder_5 = _2094;
            }
            else
            {
                frontier_phi_56_57_ladder = _1946;
                frontier_phi_56_57_ladder_1 = _1944;
                frontier_phi_56_57_ladder_2 = _1942;
                frontier_phi_56_57_ladder_3 = _1938;
                frontier_phi_56_57_ladder_4 = _1936;
                frontier_phi_56_57_ladder_5 = _1940;
            }
            _2089 = frontier_phi_56_57_ladder_4;
            _2091 = frontier_phi_56_57_ladder_3;
            _2093 = frontier_phi_56_57_ladder_5;
            _2095 = frontier_phi_56_57_ladder_2;
            _2097 = frontier_phi_56_57_ladder_1;
            _2099 = frontier_phi_56_57_ladder;
        }
        float _2104 = isnan(1.0) ? _615 : (isnan(_615) ? 1.0 : min(_615, 1.0));
        _1858 = (_2104 * _2095) + _1638;
        _1860 = (_2104 * _2097) + _1639;
        _1862 = (_2104 * _2099) + _1640;
        _1864 = ((_2089 * 0.039999999105930328369140625) * _2104) + _1740;
        _1866 = ((_2091 * 0.039999999105930328369140625) * _2104) + _1741;
        _1868 = ((_2093 * 0.039999999105930328369140625) * _2104) + _1742;
    }
    else
    {
        _1858 = _1638;
        _1860 = _1639;
        _1862 = _1640;
        _1864 = _1740;
        _1866 = _1741;
        _1868 = _1742;
    }
    float _3619 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _3630 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _3641 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _1885 = ((isnan(1.0) ? _3619 : (isnan(_3619) ? 1.0 : min(_3619, 1.0))) * (_1858 + ((isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0))) * _615))) + ((_1864 + ((isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0))) * _1350)) * cbPerFrame._m0[3u].x);
    float _1886 = ((isnan(1.0) ? _3630 : (isnan(_3630) ? 1.0 : min(_3630, 1.0))) * (_1860 + ((isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0))) * _615))) + ((_1866 + ((isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0))) * _1350)) * cbPerFrame._m0[3u].x);
    float _1887 = ((isnan(1.0) ? _3641 : (isnan(_3641) ? 1.0 : min(_3641, 1.0))) * (_1862 + ((isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0))) * _615))) + ((_1868 + ((isnan(0.0) ? _1566 : (isnan(_1566) ? 0.0 : max(_1566, 0.0))) * _1350)) * cbPerFrame._m0[3u].x);
    float _1888 = isnan(0.0) ? _1885 : (isnan(_1885) ? 0.0 : max(_1885, 0.0));
    float _1889 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
    float _1890 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
    uint _1891 = _590 + 6u;
    float _1899 = _576 / cbSceneParam._m0[86u].x;
    float _1900 = _577 / cbSceneParam._m0[86u].y;
    vec4 _1914 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1899, _1900, (log2((isnan(cbSceneParam._m0[77u].w) ? _545 : (isnan(_545) ? cbSceneParam._m0[77u].w : min(_545, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1916 = _1914.x;
    float _1917 = _1914.y;
    float _1918 = _1914.z;
    float _1919 = _1914.w;
    float _1999;
    float _2001;
    float _2003;
    float _2005;
    if (_545 > cbSceneParam._m0[78u].w)
    {
        float _1961 = isnan(_545) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _545 : min(cbSceneParam._m0[80u].w, _545));
        float _1962 = _1961 / _545;
        float _1973 = _1962 * _268;
        float _1974 = _269 * _1962;
        float _1975 = (-0.0) - _1974;
        float _1976 = _1962 * _270;
        float _1978 = (cbSceneParam._m0[77u].w * _1975) / _1961;
        float _1979 = _1978 + cbSceneParam._m0[79u].w;
        float _1980 = cbSceneParam._m0[79u].w - _1974;
        float _1986 = sqrt(((_1973 * _1973) + (_1974 * _1974)) + (_1976 * _1976));
        float _1989 = (1.0 - (cbSceneParam._m0[77u].w / _1961)) * _1986;
        float _1995 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1997 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2228;
        if (abs((_1975 - _1978) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2228 = ((((_1979 > 0.0) ? exp2(_1995 * _1979) : (2.0 - exp2(_1997 * _1979))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1989;
        }
        else
        {
            float _2147 = 1.0 / cbSceneParam._m0[80u].x;
            float _2148 = isnan(_1980) ? _1979 : (isnan(_1979) ? _1980 : max(_1979, _1980));
            float _2149 = isnan(_1980) ? _1979 : (isnan(_1979) ? _1980 : min(_1979, _1980));
            float _2158 = isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : min(_2148, 0.0));
            float _2159 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : min(_2149, 0.0));
            _2228 = ((abs(_1986 / _1975) * cbSceneParam._m0[80u].y) * ((((_2158 - _2159) * 2.0) - ((exp2(_1995 * (isnan(0.0) ? _2148 : (isnan(_2148) ? 0.0 : max(_2148, 0.0)))) - exp2(_1995 * (isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0))))) * _2147)) - ((exp2(_1997 * _2158) - exp2(_1997 * _2159)) * _2147))) + (_1989 * cbSceneParam._m0[80u].z);
        }
        vec4 _2230 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1899, _1900, 1.0), 0.0);
        float _2239 = exp2((_2228 * (-1.44269502162933349609375)) * (1.0 - _2230.w));
        float _2240 = log2(_2239);
        float _2256 = log2(_1919);
        _1999 = (exp2(_2256 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2240 * cbSceneParam._m0[78u].x)) * _2230.x) / cbSceneParam._m0[78u].x)) + _1916;
        _2001 = (exp2(_2256 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2240 * cbSceneParam._m0[78u].y)) * _2230.y) / cbSceneParam._m0[78u].y)) + _1917;
        _2003 = (exp2(_2256 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2240 * cbSceneParam._m0[78u].z)) * _2230.z) / cbSceneParam._m0[78u].z)) + _1918;
        _2005 = _2239 * _1919;
    }
    else
    {
        _1999 = _1916;
        _2001 = _1917;
        _2003 = _1918;
        _2005 = _1919;
    }
    bool _2266;
    vec4 _2015;
    vec4 _2037;
    float _2039;
    float _2043;
    float _2044;
    float _2045;
    float _2046;
    bool _2057;
    for (;;)
    {
        _2015 = cbMatDynParam._m0[0u];
        float _2017 = roundEven(_2015.y);
        bool _2018 = _2017 == 3.0;
        float _2019 = log2(_2005);
        float _2026 = exp2(_2019 * cbSceneParam._m0[78u].x) * _1888;
        float _2027 = exp2(_2019 * cbSceneParam._m0[78u].y) * _1889;
        float _2028 = exp2(_2019 * cbSceneParam._m0[78u].z) * _1890;
        float _2035 = _559 + (-0.5);
        _2037 = cbMtdParam._m0[1u];
        _2039 = _2037.y * _2035;
        float _2042 = (_2017 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2043 = _2042 * (_2018 ? _2026 : (_2026 + (cbSceneParam._m0[72u].w * _1999)));
        _2044 = _2042 * (_2018 ? _2027 : (_2027 + (cbSceneParam._m0[72u].w * _2001)));
        _2045 = _2042 * (_2018 ? _2028 : (_2028 + (cbSceneParam._m0[72u].w * _2003)));
        _2046 = _2035 * 0.999000012874603271484375;
        _2057 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2057)
        {
            if ((cbInstanceData._m0[_590 + 7u].x + _2046) < 0.5)
            {
                _2266 = true;
                break;
            }
        }
        uint _2182 = _591 + uint(_2015.w);
        if ((cbInstanceData._m0[_2182].w < 1.0) && ((cbInstanceData._m0[_2182].w + _2046) < 0.5))
        {
            _2266 = true;
            break;
        }
        if ((_2039 + 1.0) < _2037.x)
        {
            _2266 = true;
            break;
        }
        _2266 = false;
        break;
    }
    float _2447;
    if (_2266)
    {
        discard_state = true;
        _2447 = 0.0;
    }
    else
    {
        _2447 = cbInstanceData._m0[_1891].w;
    }
    SV_Target.x = _2043;
    SV_Target.y = _2044;
    SV_Target.z = _2045;
    SV_Target.w = _2447;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1891].w;
    discard_exit();
}


