#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _751;
uint _1894;
uint _1895;
uint _1896;
uint _2130;
uint _2131;
uint _2132;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _249 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _259 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _249);
    float _260 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _249);
    float _261 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _249);
    vec4 _280 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _315 = cbMtdParam._m0[24u].x + _259;
    float _316 = cbMtdParam._m0[24u].y + _260;
    float _317 = cbMtdParam._m0[24u].z + _261;
    float _331 = (-0.0) - dot(vec3(_315, _316, _317), vec3(_187 * _180, _187 * _181, _187 * _182));
    float _332 = (-0.0) - dot(vec3(_315, _316, _317), vec3(_201 * TANGENT.x, _201 * TANGENT.y, _201 * TANGENT.z));
    float _333 = (-0.0) - dot(vec3(_315, _316, _317), vec3((-0.0) - (_194 * NORMAL.x), (-0.0) - (_194 * NORMAL.y), (-0.0) - (_194 * NORMAL.z)));
    float _337 = inversesqrt(dot(vec3(_331, _332, _333), vec3(_331, _332, _333)));
    float _340 = _337 * _333;
    float _341 = (_337 * _331) + (((_280.x * 2.0) + (-1.0)) * cbMtdParam._m0[22u].x);
    float _342 = (_337 * _332) + (((_280.y * 2.0) + (-1.0)) * cbMtdParam._m0[22u].y);
    float _343 = _341 * cbMtdParam._m0[20u].w;
    float _344 = _342 * cbMtdParam._m0[20u].z;
    float _345 = fract(TEXCOORD.x);
    float _346 = fract(TEXCOORD.y);
    float _352;
    if (_343 > 0.0)
    {
        _352 = (1.0 - _345) / _343;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_343 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _345) / _343;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _352 = frontier_phi_3_2_ladder;
    }
    float _360;
    if (_344 > 0.0)
    {
        _360 = (1.0 - _346) / _344;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_344 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _346) / _344;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _360 = frontier_phi_7_6_ladder;
    }
    bool _362 = _340 > 0.0;
    float _364 = _362 ? (cbMtdParam._m0[16u].x / _340) : 5000.0;
    float _365 = isnan(_360) ? _352 : (isnan(_352) ? _360 : min(_352, _360));
    float _366 = isnan(_364) ? _365 : (isnan(_365) ? _364 : min(_365, _364));
    float _370 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _371 = _345 + (-0.5);
    float _374 = _346 + (-0.5);
    float _377 = ((_366 * _340) + _370) / _370;
    vec4 _402 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (((((_371 + (_366 * _343)) / _377) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (((((_374 + (_366 * _344)) / _377) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    float _412 = cbMtdParam._m0[9u].x * _402.x;
    float _413 = cbMtdParam._m0[9u].y * _402.y;
    float _414 = cbMtdParam._m0[9u].z * _402.z;
    float _433 = _341 * cbMtdParam._m0[22u].w;
    float _434 = _342 * cbMtdParam._m0[22u].z;
    bool _435 = _433 > 0.0;
    float _440;
    if (_435)
    {
        _440 = (1.0 - _345) / _433;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_433 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _345) / _433;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _440 = frontier_phi_11_10_ladder;
    }
    bool _442 = _434 > 0.0;
    float _447;
    if (_442)
    {
        _447 = (1.0 - _346) / _434;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_434 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _346) / _434;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _447 = frontier_phi_15_14_ladder;
    }
    float _450 = _362 ? (cbMtdParam._m0[18u].x / _340) : 5000.0;
    float _451 = isnan(_447) ? _440 : (isnan(_440) ? _447 : min(_440, _447));
    float _452 = isnan(_450) ? _451 : (isnan(_451) ? _450 : min(_451, _450));
    float _456 = cbMtdParam._m0[19u].y * cbMtdParam._m0[18u].x;
    float _460 = ((_452 * _340) + _456) / _456;
    float _465 = cbMtdParam._m0[19u].x - cbMtdParam._m0[20u].x * trunc(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    float _467 = floor(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    vec4 _483 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_371 + (_452 * _433)) / _460) + 0.5) + _465) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_374 + (_452 * _434)) / _460) + 0.5) + _467) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[0u].w));
    float _495;
    if (_435)
    {
        _495 = (1.0 - _345) / _433;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_433 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _345) / _433;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _495 = frontier_phi_19_18_ladder;
    }
    float _501;
    if (_442)
    {
        _501 = (1.0 - _346) / _434;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_434 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _346) / _434;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _501 = frontier_phi_23_22_ladder;
    }
    float _503 = isnan(_501) ? _495 : (isnan(_495) ? _501 : min(_495, _501));
    float _504 = isnan(_450) ? _503 : (isnan(_503) ? _450 : min(_503, _450));
    float _511 = ((_504 * _340) + _456) / _456;
    vec4 _531 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_371 + (_504 * _433)) / _511) + 0.5) + _465) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_374 + (_504 * _434)) / _511) + 0.5) + _467) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[8u].w));
    float _533 = _531.x;
    float _558 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _562 = inversesqrt(dot(vec3(_259, _260, _261), vec3(_259, _260, _261)));
    float _563 = _259 * _562;
    float _564 = _260 * _562;
    float _565 = _261 * _562;
    float _571 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _572 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _581 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_571 * cbSceneParam._m0[86u].x, _572 * cbSceneParam._m0[86u].y));
    float _584 = _581.x * TEXCOORD_4.z;
    float _585 = (-0.0) - _563;
    float _586 = (-0.0) - _564;
    float _587 = (-0.0) - _565;
    float _609 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _613 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _617 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _750;
    float _752;
    float _753;
    float _754;
    float _755;
    float _756;
    float _757;
    float _758;
    float _759;
    float _760;
    float _761;
    float _762;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _673 = (cbModelParam._m0[37u].x * ((((fma(_617, cbModelParam._m0[26u].z, fma(_613, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _609)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _675 = (cbModelParam._m0[37u].y * ((((fma(_617, cbModelParam._m0[27u].z, fma(_613, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _609)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _676 = (((((fma(_617, cbModelParam._m0[28u].z, fma(_613, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _609)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _679 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_673, _675, _676), 0.0);
        vec4 _686 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_673, _675, _676), 0.0);
        vec4 _693 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_673, _675, _676), 0.0);
        vec4 _700 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_673, _675, _676), 0.0);
        float _713 = exp2((_679.w + (-0.5)) * 20.0) * 2.0;
        float _723 = exp2((_686.w + (-0.5)) * 20.0) * 2.0;
        float _733 = exp2((_693.w + (-0.5)) * 20.0) * 2.0;
        float _743 = exp2((_700.w + (-0.5)) * 20.0) * 2.0;
        float _744 = _743 * (_700.x + (-0.5));
        float _745 = _743 * (_700.y + (-0.5));
        float _746 = _743 * (_700.z + (-0.5));
        _750 = _713 * (_679.z + (-0.5));
        _752 = _713 * (_679.y + (-0.5));
        _753 = _713 * (_679.x + (-0.5));
        _754 = _723 * (_686.z + (-0.5));
        _755 = _723 * (_686.y + (-0.5));
        _756 = _723 * (_686.x + (-0.5));
        _757 = _733 * (_693.z + (-0.5));
        _758 = _733 * (_693.y + (-0.5));
        _759 = _733 * (_693.x + (-0.5));
        _760 = isnan(0.0) ? _746 : (isnan(_746) ? 0.0 : max(_746, 0.0));
        _761 = isnan(0.0) ? _745 : (isnan(_745) ? 0.0 : max(_745, 0.0));
        _762 = isnan(0.0) ? _744 : (isnan(_744) ? 0.0 : max(_744, 0.0));
    }
    else
    {
        _750 = _751;
        _752 = _751;
        _753 = _751;
        _754 = _751;
        _755 = _751;
        _756 = _751;
        _757 = _751;
        _758 = _751;
        _759 = _751;
        _760 = _751;
        _761 = _751;
        _762 = _751;
    }
    float _890;
    float _891;
    float _892;
    float _893;
    float _894;
    float _895;
    float _896;
    float _897;
    float _898;
    float _899;
    float _900;
    float _901;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _816 = (cbModelParam._m0[38u].x * ((((fma(_617, cbModelParam._m0[30u].z, fma(_613, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _609)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _817 = (cbModelParam._m0[38u].y * ((((fma(_617, cbModelParam._m0[31u].z, fma(_613, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _609)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _818 = (((((fma(_617, cbModelParam._m0[32u].z, fma(_613, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _609)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _820 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_816, _817, _818), 0.0);
        vec4 _827 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_816, _817, _818), 0.0);
        vec4 _834 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_816, _817, _818), 0.0);
        vec4 _841 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_816, _817, _818), 0.0);
        float _853 = exp2((_820.w + (-0.5)) * 20.0) * 2.0;
        float _863 = exp2((_827.w + (-0.5)) * 20.0) * 2.0;
        float _873 = exp2((_834.w + (-0.5)) * 20.0) * 2.0;
        float _883 = exp2((_841.w + (-0.5)) * 20.0) * 2.0;
        float _884 = _883 * (_841.x + (-0.5));
        float _885 = _883 * (_841.y + (-0.5));
        float _886 = _883 * (_841.z + (-0.5));
        _890 = _853 * (_820.z + (-0.5));
        _891 = _853 * (_820.y + (-0.5));
        _892 = _853 * (_820.x + (-0.5));
        _893 = _863 * (_827.z + (-0.5));
        _894 = _863 * (_827.y + (-0.5));
        _895 = _863 * (_827.x + (-0.5));
        _896 = _873 * (_834.z + (-0.5));
        _897 = _873 * (_834.y + (-0.5));
        _898 = _873 * (_834.x + (-0.5));
        _899 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        _900 = isnan(0.0) ? _885 : (isnan(_885) ? 0.0 : max(_885, 0.0));
        _901 = isnan(0.0) ? _884 : (isnan(_884) ? 0.0 : max(_884, 0.0));
    }
    else
    {
        _890 = _751;
        _891 = _751;
        _892 = _751;
        _893 = _751;
        _894 = _751;
        _895 = _751;
        _896 = _751;
        _897 = _751;
        _898 = _751;
        _899 = _751;
        _900 = _751;
        _901 = _751;
    }
    float _916 = _563 * (-0.5);
    float _917 = _564 * (-0.5);
    float _918 = _565 * (-0.5);
    float _919 = dot(vec4(_916, _917, _918, 1.0), vec4(_892, _895, _898, _901));
    float _922 = dot(vec4(_916, _917, _918, 1.0), vec4(_891, _894, _897, _900));
    float _925 = dot(vec4(_916, _917, _918, 1.0), vec4(_890, _893, _896, _899));
    float _960;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _932 = dot(vec4(_916, _917, _918, 1.0), vec4(_750, _754, _757, _760));
        float _936 = dot(vec4(_916, _917, _918, 1.0), vec4(_752, _755, _758, _761));
        float _940 = dot(vec4(_916, _917, _918, 1.0), vec4(_753, _756, _759, _762));
        float _947 = dot(vec4(cbModelParam._m0[39u]), vec4(_916, _917, _918, 1.0));
        _960 = dot(vec3(isnan(0.0) ? _940 : (isnan(_940) ? 0.0 : max(_940, 0.0)), isnan(0.0) ? _936 : (isnan(_936) ? 0.0 : max(_936, 0.0)), isnan(0.0) ? _932 : (isnan(_932) ? 0.0 : max(_932, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_947) ? 0.0 : (isnan(0.0) ? _947 : max(0.0, _947))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _960 = 1.0;
    }
    float _971;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _962 = dot(vec4(cbModelParam._m0[40u]), vec4(_916, _917, _918, 1.0));
        _971 = dot(vec3(isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0)), isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0)), isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_962) ? 0.0 : (isnan(0.0) ? _962 : max(0.0, _962))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _971 = 1.0;
    }
    float _975 = (_971 * cbModelParam._m0[1u].x) + (_960 * (1.0 - cbModelParam._m0[1u].x));
    float _981 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1065;
    float _1067;
    float _1069;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1032 = fma(_617, cbModelParam._m0[13u].z, fma(_613, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _609)) + cbModelParam._m0[13u].w;
        float _1036 = fma(_617, cbModelParam._m0[14u].z, fma(_613, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _609)) + cbModelParam._m0[14u].w;
        float _1040 = fma(_617, cbModelParam._m0[15u].z, fma(_613, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _609)) + cbModelParam._m0[15u].w;
        float _1043 = fma(_587, cbModelParam._m0[13u].z, fma(_586, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _585));
        float _1046 = fma(_587, cbModelParam._m0[14u].z, fma(_586, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _585));
        float _1049 = fma(_587, cbModelParam._m0[15u].z, fma(_586, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _585));
        float _1075;
        if (_1043 > 0.0)
        {
            _1075 = abs((1.0 - _1032) / _1043);
        }
        else
        {
            float frontier_phi_38_36_ladder;
            if (_1043 < 0.0)
            {
                frontier_phi_38_36_ladder = abs((_1032 + 1.0) / _1043);
            }
            else
            {
                frontier_phi_38_36_ladder = 5000.0;
            }
            _1075 = frontier_phi_38_36_ladder;
        }
        float _1351;
        if (_1046 > 0.0)
        {
            _1351 = abs((1.0 - _1036) / _1046);
        }
        else
        {
            float frontier_phi_47_43_ladder;
            if (_1046 < 0.0)
            {
                frontier_phi_47_43_ladder = abs((_1036 + 1.0) / _1046);
            }
            else
            {
                frontier_phi_47_43_ladder = 5000.0;
            }
            _1351 = frontier_phi_47_43_ladder;
        }
        float _1647;
        if (_1049 > 0.0)
        {
            _1647 = abs((1.0 - _1040) / _1049);
        }
        else
        {
            float frontier_phi_61_54_ladder;
            if (_1049 < 0.0)
            {
                frontier_phi_61_54_ladder = abs((_1040 + 1.0) / _1049);
            }
            else
            {
                frontier_phi_61_54_ladder = 5000.0;
            }
            _1647 = frontier_phi_61_54_ladder;
        }
        float _1649 = isnan(_1351) ? _1075 : (isnan(_1075) ? _1351 : min(_1075, _1351));
        float _1650 = isnan(_1647) ? _1649 : (isnan(_1649) ? _1647 : min(_1649, _1647));
        float _1654 = (_1650 * _1043) + _1032;
        float _1655 = (_1650 * _1046) + _1036;
        float _1656 = (_1650 * _1049) + _1040;
        float _1657 = _1650 * 9.9999997473787516355514526367188e-05;
        float _1658 = (-1.0) - _1657;
        float _1660 = _1657 + 1.0;
        float frontier_phi_37_61_ladder;
        float frontier_phi_37_61_ladder_1;
        float frontier_phi_37_61_ladder_2;
        if ((_1656 > _1660) || ((_1656 < _1658) || ((_1655 > _1660) || ((_1655 < _1658) || ((_1654 < _1658) || (_1654 > _1660))))))
        {
            frontier_phi_37_61_ladder = 0.0;
            frontier_phi_37_61_ladder_1 = 0.0;
            frontier_phi_37_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1767 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1656, cbModelParam._m0[9u].z, fma(_1655, cbModelParam._m0[9u].y, _1654 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1656, cbModelParam._m0[10u].z, fma(_1655, cbModelParam._m0[10u].y, _1654 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1656, cbModelParam._m0[11u].z, fma(_1655, cbModelParam._m0[11u].y, _1654 * cbModelParam._m0[11u].x))), _981);
            frontier_phi_37_61_ladder = _1767.z * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_1 = _1767.y * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_2 = _1767.x * cbModelParam._m0[1u].y;
        }
        _1065 = frontier_phi_37_61_ladder_2;
        _1067 = frontier_phi_37_61_ladder_1;
        _1069 = frontier_phi_37_61_ladder;
    }
    else
    {
        vec4 _1053 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_585, _586, _587), _981);
        _1065 = _1053.x * cbModelParam._m0[1u].y;
        _1067 = _1053.y * cbModelParam._m0[1u].y;
        _1069 = _1053.z * cbModelParam._m0[1u].y;
    }
    float _1072 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1160;
    float _1162;
    float _1164;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1124 = fma(_617, cbModelParam._m0[21u].z, fma(_613, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _609)) + cbModelParam._m0[21u].w;
        float _1128 = fma(_617, cbModelParam._m0[22u].z, fma(_613, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _609)) + cbModelParam._m0[22u].w;
        float _1132 = fma(_617, cbModelParam._m0[23u].z, fma(_613, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _609)) + cbModelParam._m0[23u].w;
        float _1135 = fma(_587, cbModelParam._m0[21u].z, fma(_586, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _585));
        float _1138 = fma(_587, cbModelParam._m0[22u].z, fma(_586, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _585));
        float _1141 = fma(_587, cbModelParam._m0[23u].z, fma(_586, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _585));
        float _1356;
        if (_1135 > 0.0)
        {
            _1356 = abs((1.0 - _1124) / _1135);
        }
        else
        {
            float frontier_phi_49_45_ladder;
            if (_1135 < 0.0)
            {
                frontier_phi_49_45_ladder = abs((_1124 + 1.0) / _1135);
            }
            else
            {
                frontier_phi_49_45_ladder = 5000.0;
            }
            _1356 = frontier_phi_49_45_ladder;
        }
        float _1673;
        if (_1138 > 0.0)
        {
            _1673 = abs((1.0 - _1128) / _1138);
        }
        else
        {
            float frontier_phi_63_56_ladder;
            if (_1138 < 0.0)
            {
                frontier_phi_63_56_ladder = abs((_1128 + 1.0) / _1138);
            }
            else
            {
                frontier_phi_63_56_ladder = 5000.0;
            }
            _1673 = frontier_phi_63_56_ladder;
        }
        float _1824;
        if (_1141 > 0.0)
        {
            _1824 = abs((1.0 - _1132) / _1141);
        }
        else
        {
            float frontier_phi_77_72_ladder;
            if (_1141 < 0.0)
            {
                frontier_phi_77_72_ladder = abs((_1132 + 1.0) / _1141);
            }
            else
            {
                frontier_phi_77_72_ladder = 5000.0;
            }
            _1824 = frontier_phi_77_72_ladder;
        }
        float _1826 = isnan(_1673) ? _1356 : (isnan(_1356) ? _1673 : min(_1356, _1673));
        float _1827 = isnan(_1824) ? _1826 : (isnan(_1826) ? _1824 : min(_1826, _1824));
        float _1831 = (_1827 * _1135) + _1124;
        float _1832 = (_1827 * _1138) + _1128;
        float _1833 = (_1827 * _1141) + _1132;
        float _1834 = _1827 * 9.9999997473787516355514526367188e-05;
        float _1835 = (-1.0) - _1834;
        float _1837 = _1834 + 1.0;
        float frontier_phi_46_77_ladder;
        float frontier_phi_46_77_ladder_1;
        float frontier_phi_46_77_ladder_2;
        if ((_1833 > _1837) || ((_1833 < _1835) || ((_1832 > _1837) || ((_1832 < _1835) || ((_1831 < _1835) || (_1831 > _1837))))))
        {
            frontier_phi_46_77_ladder = 0.0;
            frontier_phi_46_77_ladder_1 = 0.0;
            frontier_phi_46_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1993 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1833, cbModelParam._m0[17u].z, fma(_1832, cbModelParam._m0[17u].y, _1831 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1833, cbModelParam._m0[18u].z, fma(_1832, cbModelParam._m0[18u].y, _1831 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1833, cbModelParam._m0[19u].z, fma(_1832, cbModelParam._m0[19u].y, _1831 * cbModelParam._m0[19u].x))), _1072);
            frontier_phi_46_77_ladder = _1993.z * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_1 = _1993.x * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_2 = _1993.y * cbModelParam._m0[1u].z;
        }
        _1160 = frontier_phi_46_77_ladder_1;
        _1162 = frontier_phi_46_77_ladder_2;
        _1164 = frontier_phi_46_77_ladder;
    }
    else
    {
        vec4 _1144 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_585, _586, _587), _1072);
        _1160 = _1144.x * cbModelParam._m0[1u].z;
        _1162 = _1144.y * cbModelParam._m0[1u].z;
        _1164 = _1144.z * cbModelParam._m0[1u].z;
    }
    float _1176 = _584 * 0.01200000010430812835693359375;
    float _1178 = _1176 * ((cbModelParam._m0[1u].w * (_1160 - _1065)) + _1065);
    float _1179 = _1176 * ((cbModelParam._m0[1u].w * (_1162 - _1067)) + _1067);
    float _1180 = _1176 * ((cbModelParam._m0[1u].w * (_1164 - _1069)) + _1069);
    float _1201 = fma(_1180, cbSceneParam._m0[89u].z, fma(_1179, cbSceneParam._m0[89u].y, _1178 * cbSceneParam._m0[89u].x));
    float _1204 = fma(_1180, cbSceneParam._m0[90u].z, fma(_1179, cbSceneParam._m0[90u].y, _1178 * cbSceneParam._m0[90u].x));
    float _1207 = fma(_1180, cbSceneParam._m0[91u].z, fma(_1179, cbSceneParam._m0[91u].y, _1178 * cbSceneParam._m0[91u].x));
    uint _1214 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1218 = floatBitsToUint(cbInstanceData._m0[_1214 + 5u]);
    uint _1220 = _1218.x * 14u;
    uint _1221 = _1220 + 13u;
    float _1226 = _584 + (-1.0);
    float _1229 = (cbLight._m0[_1221].x * _1226) + 1.0;
    float _1230 = (cbLight._m0[_1221].y * _1226) + 1.0;
    uint _1231 = _1220 + 8u;
    float _1242 = cbLight._m0[_1220].x + _563;
    float _1243 = cbLight._m0[_1220].y + _564;
    float _1244 = cbLight._m0[_1220].z + _565;
    float _1248 = inversesqrt(dot(vec3(_1242, _1243, _1244), vec3(_1242, _1243, _1244)));
    float _1252 = dot(vec3(0.0), vec3(cbLight._m0[_1220].xyz));
    float _2511 = isnan(0.0) ? _1252 : (isnan(_1252) ? 0.0 : max(_1252, 0.0));
    float _1255 = isnan(1.0) ? _2511 : (isnan(_2511) ? 1.0 : min(_2511, 1.0));
    float _1256 = dot(vec3(0.0), vec3(_563, _564, _565));
    float _2522 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
    float _1259 = isnan(1.0) ? _2522 : (isnan(_2522) ? 1.0 : min(_2522, 1.0));
    float _1260 = dot(vec3(cbLight._m0[_1220].xyz), vec3(_1242 * _1248, _1243 * _1248, _1244 * _1248));
    float _2533 = isnan(0.0) ? _1260 : (isnan(_1260) ? 0.0 : max(_1260, 0.0));
    float _1271 = (exp2(log2(1.0 - (isnan(1.0) ? _2533 : (isnan(_2533) ? 1.0 : min(_2533, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1277 = (0.5 / ((_1255 + 9.9999999392252902907785028219223e-09) + _1259)) * _1255;
    float _2544 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
    float _1279 = (isnan(1.0) ? _2544 : (isnan(_2544) ? 1.0 : min(_2544, 1.0))) * 0.31831014156341552734375;
    float _1281 = isnan(1.0) ? _1229 : (isnan(_1229) ? 1.0 : min(_1229, 1.0));
    uint _1291 = _1220 + 9u;
    uint _1297 = _1220 | 1u;
    float _1303 = cbLight._m0[_1297].x + _563;
    float _1304 = cbLight._m0[_1297].y + _564;
    float _1305 = cbLight._m0[_1297].z + _565;
    float _1309 = inversesqrt(dot(vec3(_1303, _1304, _1305), vec3(_1303, _1304, _1305)));
    float _1313 = dot(vec3(0.0), vec3(cbLight._m0[_1297].xyz));
    float _2560 = isnan(0.0) ? _1313 : (isnan(_1313) ? 0.0 : max(_1313, 0.0));
    float _1316 = isnan(1.0) ? _2560 : (isnan(_2560) ? 1.0 : min(_2560, 1.0));
    float _1317 = dot(vec3(cbLight._m0[_1297].xyz), vec3(_1303 * _1309, _1304 * _1309, _1305 * _1309));
    float _2571 = isnan(0.0) ? _1317 : (isnan(_1317) ? 0.0 : max(_1317, 0.0));
    float _1326 = (exp2(log2(1.0 - (isnan(1.0) ? _2571 : (isnan(_2571) ? 1.0 : min(_2571, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1330 = (0.5 / ((_1316 + 9.9999999392252902907785028219223e-09) + _1259)) * _1316;
    float _2582 = isnan(0.0) ? _1330 : (isnan(_1330) ? 0.0 : max(_1330, 0.0));
    float _1332 = (isnan(1.0) ? _2582 : (isnan(_2582) ? 1.0 : min(_2582, 1.0))) * 0.31831014156341552734375;
    float _1333 = isnan(1.0) ? _1230 : (isnan(_1230) ? 1.0 : min(_1230, 1.0));
    float _1343 = (((_1326 * cbLight._m0[_1291].x) * _1332) * _1333) + (((_1271 * cbLight._m0[_1231].x) * _1279) * _1281);
    float _1344 = (((_1326 * cbLight._m0[_1291].y) * _1332) * _1333) + (((_1271 * cbLight._m0[_1231].y) * _1279) * _1281);
    float _1345 = (((_1326 * cbLight._m0[_1291].z) * _1332) * _1333) + (((_1271 * cbLight._m0[_1231].z) * _1279) * _1281);
    float _1462;
    float _1464;
    float _1466;
    if (_1218.y == 0u)
    {
        float _1401 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1402 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1401;
        float _1403 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1401;
        float _1404 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1401;
        uvec4 _1416 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1417 = _1416.x;
        uint _1428 = uint((float(_1416.y) * floor(float(uint(cbSceneParam._m0[85u].y * _572) / _1417))) + floor(float(uint(cbSceneParam._m0[85u].x * _571) / _1417)));
        float _1438 = (log2(_1404 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1439 = isnan(0.0) ? _1438 : (isnan(_1438) ? 0.0 : max(_1438, 0.0));
        uint _1442 = uint(isnan(14.0) ? _1439 : (isnan(_1439) ? 14.0 : min(_1439, 14.0)));
        uvec4 _1447 = texelFetch(g_lightClusterGridBuffer, int(((_1442 << 2u) + (_1428 << 6u)) >> 2u));
        uint _1448 = _1447.x;
        uint _1449 = _1416.z;
        float _1539;
        float _1541;
        float _1543;
        if (((((1u << ((_1449 >> 4u) & 15u)) + 4294967295u) & _1448) == 0u) || ((_1449 & 240u) == 0u))
        {
            _1539 = 0.0;
            _1541 = 0.0;
            _1543 = 0.0;
        }
        else
        {
            float _1540;
            float _1542;
            float _1544;
            float _1698 = 0.0;
            float _1699 = 0.0;
            float _1700 = 0.0;
            uint _1701 = 0u;
            uint _1710;
            bool _1711;
            for (;;)
            {
                _1710 = texelFetch(g_lightClassification, int((((_1442 << 5u) + (_1428 << 9u)) + (_1701 << 2u)) >> 2u)).x;
                _1711 = _1710 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                if (_1711)
                {
                    frontier_phi_74_pred = _1700;
                    frontier_phi_74_pred_1 = _1699;
                    frontier_phi_74_pred_2 = _1698;
                }
                else
                {
                    float _1864;
                    float _1865;
                    float _1866;
                    uint _1867;
                    _1864 = _1698;
                    _1865 = _1699;
                    _1866 = _1700;
                    _1867 = _1710;
                    float _1776;
                    float _1777;
                    float _1778;
                    for (;;)
                    {
                        uint _1871 = uint(findLSB(_1867)) + (_1701 << 5u);
                        uint _1868 = (_1867 + 4294967295u) & _1867;
                        uint _1873 = _1871 * 48u;
                        vec4 _1887 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1873)).x, texelFetch(g_PointLightRenderingBuffer, int(_1873 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1873 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1873 + 3u)).x));
                        uint _1904 = (_1871 * 48u) + 8u;
                        vec3 _1915 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_1904)).x, texelFetch(g_PointLightRenderingBuffer, int(_1904 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1904 + 2u)).x));
                        float _1919 = _1887.x - _1402;
                        float _1920 = _1887.y - _1403;
                        float _1921 = _1887.z - _1404;
                        float _1922 = dot(vec3(_1919, _1920, _1921), vec3(_1919, _1920, _1921));
                        float _1925 = inversesqrt(_1922);
                        float _1934 = 1.0 - (_1922 * _1887.w);
                        float _2608 = isnan(0.0) ? _1934 : (isnan(_1934) ? 0.0 : max(_1934, 0.0));
                        float _1936 = sqrt(_1922) * uintBitsToFloat(uvec4(_1894, _1895, _1896, texelFetch(g_PointLightRenderingBuffer, int(((_1871 * 48u) + 4u) + 3u)).x)).w;
                        float _1939 = 1.39999997615814208984375 / (_1936 + 1.39999997615814208984375);
                        float _1940 = _1939 * _1939;
                        float _1943 = ((1.0 - _1940) * dot(vec3(0.0), vec3(_1925 * _1919, _1925 * _1920, _1925 * _1921))) + _1940;
                        float _1945 = (-0.0) - _1402;
                        float _1946 = (-0.0) - _1403;
                        float _1947 = (-0.0) - _1404;
                        float _1951 = inversesqrt(dot(vec3(_1945, _1946, _1947), vec3(_1945, _1946, _1947)));
                        float _1955 = dot(vec3(0.0), vec3(_1951 * _1945, _1951 * _1946, _1951 * _1947));
                        float _2619 = isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0));
                        float _2630 = isnan(0.0) ? _1943 : (isnan(_1943) ? 0.0 : max(_1943, 0.0));
                        float _1959 = isnan(1.0) ? _2630 : (isnan(_2630) ? 1.0 : min(_2630, 1.0));
                        float _1963 = (0.5 / (((isnan(1.0) ? _2619 : (isnan(_2619) ? 1.0 : min(_2619, 1.0))) + 9.9999999392252902907785028219223e-09) + _1959)) * _1959;
                        float _2641 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
                        float _1972 = (((isnan(1.0) ? _2641 : (isnan(_2641) ? 1.0 : min(_2641, 1.0))) * 3.1415927410125732421875) / (((_1936 * _1936) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2608 : (isnan(_2608) ? 1.0 : min(_2608, 1.0)));
                        _1776 = (_1972 * _1915.x) + _1864;
                        _1777 = (_1972 * _1915.y) + _1865;
                        _1778 = (_1972 * _1915.z) + _1866;
                        if (_1868 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _1864 = _1776;
                            _1865 = _1777;
                            _1866 = _1778;
                            _1867 = _1868;
                        }
                    }
                    frontier_phi_74_pred = _1778;
                    frontier_phi_74_pred_1 = _1777;
                    frontier_phi_74_pred_2 = _1776;
                }
                _1544 = frontier_phi_74_pred;
                _1542 = frontier_phi_74_pred_1;
                _1540 = frontier_phi_74_pred_2;
                uint _1702 = _1701 + 1u;
                if (_1702 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1698 = _1540;
                    _1699 = _1542;
                    _1700 = _1544;
                    _1701 = _1702;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1539 = _1540;
            _1541 = _1542;
            _1543 = _1544;
        }
        uvec4 _1547 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1548 = _1547.z;
        uint _1550 = (_1548 >> 8u) & 15u;
        float _1678;
        float _1680;
        float _1682;
        if (((4294967295u << _1550) & _1448) == 0u)
        {
            _1678 = _1539;
            _1680 = _1541;
            _1682 = _1543;
        }
        else
        {
            float _1694 = inversesqrt(dot(vec3(_1402, _1403, _1404), vec3(_1402, _1403, _1404)));
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            if (_1550 < ((_1548 >> 12u) & 15u))
            {
                float _1679;
                float _1681;
                float _1683;
                float _1850 = _1539;
                float _1851 = _1541;
                float _1852 = _1543;
                uint _1853 = _1550;
                uint _1862;
                bool _1863;
                for (;;)
                {
                    _1862 = texelFetch(g_lightClassification, int((((_1442 << 5u) + (_1428 << 9u)) + (_1853 << 2u)) >> 2u)).x;
                    _1863 = _1862 == 0u;
                    float frontier_phi_83_pred;
                    float frontier_phi_83_pred_1;
                    float frontier_phi_83_pred_2;
                    if (_1863)
                    {
                        frontier_phi_83_pred = _1852;
                        frontier_phi_83_pred_1 = _1851;
                        frontier_phi_83_pred_2 = _1850;
                    }
                    else
                    {
                        float _1998;
                        float _1999;
                        float _2000;
                        float _2219;
                        float _2220;
                        float _2221;
                        float _2008 = _1850;
                        float _2009 = _1851;
                        float _2010 = _1852;
                        uint _2011 = _1862;
                        uint _2012;
                        uint _2022;
                        vec4 _2037;
                        float _2038;
                        vec3 _2050;
                        vec4 _2065;
                        vec4 _2080;
                        float _2126;
                        bool _2127;
                        for (;;)
                        {
                            _2022 = ((_1853 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2011));
                            _2012 = (_2011 + 4294967295u) & _2011;
                            uint _2024 = _2022 * 40u;
                            _2037 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2024)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2024 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2024 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2024 + 3u)).x));
                            _2038 = _2037.w;
                            uint _2040 = (_2022 * 40u) + 8u;
                            _2050 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2040)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2040 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2040 + 2u)).x));
                            uint _2052 = (_2022 * 40u) + 16u;
                            _2065 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2052)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2052 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2052 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2052 + 3u)).x));
                            uint _2067 = (_2022 * 40u) + 20u;
                            _2080 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2067)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2067 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2067 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2067 + 3u)).x));
                            uint _2082 = (_2022 * 40u) + 24u;
                            vec4 _2095 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2082)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2082 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2082 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2082 + 3u)).x));
                            uint _2101 = (_2022 * 40u) + 28u;
                            vec4 _2114 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2101)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2101 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2101 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2101 + 3u)).x));
                            _2126 = fma(_1404, _2114.z, fma(_1403, _2114.y, _2114.x * _1402)) + _2114.w;
                            _2127 = !((fma(_1404, _2095.z, fma(_1403, _2095.y, _2095.x * _1402)) + _2095.w) <= 0.0);
                            float frontier_phi_89_pred;
                            float frontier_phi_89_pred_1;
                            float frontier_phi_89_pred_2;
                            if (_2127)
                            {
                                float _2161 = _2037.x - _1402;
                                float _2162 = _2037.y - _1403;
                                float _2163 = _2037.z - _1404;
                                float _2164 = dot(vec3(_2161, _2162, _2163), vec3(_2161, _2162, _2163));
                                float _2167 = inversesqrt(_2164);
                                float _2174 = 1.0 - (_2164 / (_2038 * _2038));
                                float _2652 = isnan(0.0) ? _2174 : (isnan(_2174) ? 0.0 : max(_2174, 0.0));
                                float _2176 = sqrt(_2164) * uintBitsToFloat(uvec4(_2130, _2131, _2132, texelFetch(g_SpotLightRenderingBuffer, int(((_2022 * 40u) + 4u) + 3u)).x)).w;
                                float _2178 = 1.39999997615814208984375 / (_2176 + 1.39999997615814208984375);
                                float _2179 = _2178 * _2178;
                                float _2182 = (fma(_1404, _2065.z, fma(_1403, _2065.y, _2065.x * _1402)) + _2065.w) / _2126;
                                float _2183 = (fma(_1404, _2080.z, fma(_1403, _2080.y, _2080.x * _1402)) + _2080.w) / _2126;
                                float _2187 = 1.0 - dot(vec2(_2182, _2183), vec2(_2182, _2183));
                                float _2663 = isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0));
                                float _2195 = dot(vec3(0.0), vec3((-0.0) - (_1402 * _1694), (-0.0) - (_1403 * _1694), (-0.0) - (_1404 * _1694)));
                                float _2674 = isnan(0.0) ? _2195 : (isnan(_2195) ? 0.0 : max(_2195, 0.0));
                                float _2203 = ((1.0 - _2179) * dot(vec3(0.0), vec3(_2167 * _2161, _2167 * _2162, _2167 * _2163))) + _2179;
                                float _2685 = isnan(0.0) ? _2203 : (isnan(_2203) ? 0.0 : max(_2203, 0.0));
                                float _2204 = isnan(1.0) ? _2685 : (isnan(_2685) ? 1.0 : min(_2685, 1.0));
                                float _2208 = (0.5 / (((isnan(1.0) ? _2674 : (isnan(_2674) ? 1.0 : min(_2674, 1.0))) + 9.9999999392252902907785028219223e-09) + _2204)) * _2204;
                                float _2696 = isnan(0.0) ? _2208 : (isnan(_2208) ? 0.0 : max(_2208, 0.0));
                                float _2215 = ((isnan(1.0) ? _2663 : (isnan(_2663) ? 1.0 : min(_2663, 1.0))) * (isnan(1.0) ? _2652 : (isnan(_2652) ? 1.0 : min(_2652, 1.0)))) * (((isnan(1.0) ? _2696 : (isnan(_2696) ? 1.0 : min(_2696, 1.0))) * 3.1415927410125732421875) / (((_2176 * _2176) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_89_pred = _2215 * _2050.x;
                                frontier_phi_89_pred_1 = _2215 * _2050.z;
                                frontier_phi_89_pred_2 = _2215 * _2050.y;
                            }
                            else
                            {
                                frontier_phi_89_pred = 0.0;
                                frontier_phi_89_pred_1 = 0.0;
                                frontier_phi_89_pred_2 = 0.0;
                            }
                            _2219 = frontier_phi_89_pred;
                            _2221 = frontier_phi_89_pred_1;
                            _2220 = frontier_phi_89_pred_2;
                            _1998 = _2219 + _2008;
                            _1999 = _2220 + _2009;
                            _2000 = _2221 + _2010;
                            if (_2012 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2008 = _1998;
                                _2009 = _1999;
                                _2010 = _2000;
                                _2011 = _2012;
                                continue;
                            }
                        }
                        frontier_phi_83_pred = _2000;
                        frontier_phi_83_pred_1 = _1999;
                        frontier_phi_83_pred_2 = _1998;
                    }
                    _1683 = frontier_phi_83_pred;
                    _1681 = frontier_phi_83_pred_1;
                    _1679 = frontier_phi_83_pred_2;
                    uint _1854 = _1853 + 1u;
                    if (_1854 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _1850 = _1679;
                        _1851 = _1681;
                        _1852 = _1683;
                        _1853 = _1854;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _1681;
                frontier_phi_65_66_ladder_1 = _1679;
                frontier_phi_65_66_ladder_2 = _1683;
            }
            else
            {
                frontier_phi_65_66_ladder = _1541;
                frontier_phi_65_66_ladder_1 = _1539;
                frontier_phi_65_66_ladder_2 = _1543;
            }
            _1678 = frontier_phi_65_66_ladder_1;
            _1680 = frontier_phi_65_66_ladder;
            _1682 = frontier_phi_65_66_ladder_2;
        }
        float _1687 = isnan(1.0) ? _584 : (isnan(_584) ? 1.0 : min(_584, 1.0));
        _1462 = ((_1678 * 0.039999999105930328369140625) * _1687) + _1343;
        _1464 = ((_1680 * 0.039999999105930328369140625) * _1687) + _1344;
        _1466 = ((_1682 * 0.039999999105930328369140625) * _1687) + _1345;
    }
    else
    {
        _1462 = _1343;
        _1464 = _1344;
        _1466 = _1345;
    }
    uint _1473 = (_1214 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1488 = (cbInstanceData._m0[_1473].x * ((_533 * ((_483.x * cbMtdParam._m0[10u].x) - _412)) + _412)) + ((_1462 + ((isnan(0.0) ? _1201 : (isnan(_1201) ? 0.0 : max(_1201, 0.0))) * _975)) * cbPerFrame._m0[3u].x);
    float _1489 = (cbInstanceData._m0[_1473].y * ((_533 * ((_483.y * cbMtdParam._m0[10u].y) - _413)) + _413)) + ((_1464 + ((isnan(0.0) ? _1204 : (isnan(_1204) ? 0.0 : max(_1204, 0.0))) * _975)) * cbPerFrame._m0[3u].x);
    float _1490 = (cbInstanceData._m0[_1473].z * ((_533 * ((_483.z * cbMtdParam._m0[10u].z) - _414)) + _414)) + ((_1466 + ((isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0))) * _975)) * cbPerFrame._m0[3u].x);
    uint _1494 = _1214 + 6u;
    float _1502 = _571 / cbSceneParam._m0[86u].x;
    float _1503 = _572 / cbSceneParam._m0[86u].y;
    vec4 _1517 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1502, _1503, (log2((isnan(cbSceneParam._m0[77u].w) ? _558 : (isnan(_558) ? cbSceneParam._m0[77u].w : min(_558, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1519 = _1517.x;
    float _1520 = _1517.y;
    float _1521 = _1517.z;
    float _1522 = _1517.w;
    float _1596;
    float _1598;
    float _1600;
    float _1602;
    if (_558 > cbSceneParam._m0[78u].w)
    {
        float _1558 = isnan(_558) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _558 : min(cbSceneParam._m0[80u].w, _558));
        float _1559 = _1558 / _558;
        float _1570 = _1559 * _259;
        float _1571 = _260 * _1559;
        float _1572 = (-0.0) - _1571;
        float _1573 = _1559 * _261;
        float _1575 = (cbSceneParam._m0[77u].w * _1572) / _1558;
        float _1576 = _1575 + cbSceneParam._m0[79u].w;
        float _1577 = cbSceneParam._m0[79u].w - _1571;
        float _1583 = sqrt(((_1570 * _1570) + (_1571 * _1571)) + (_1573 * _1573));
        float _1586 = (1.0 - (cbSceneParam._m0[77u].w / _1558)) * _1583;
        float _1592 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1594 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1786;
        if (abs((_1572 - _1575) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1786 = ((((_1576 > 0.0) ? exp2(_1592 * _1576) : (2.0 - exp2(_1594 * _1576))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1586;
        }
        else
        {
            float _1724 = 1.0 / cbSceneParam._m0[80u].x;
            float _1725 = isnan(_1577) ? _1576 : (isnan(_1576) ? _1577 : max(_1576, _1577));
            float _1726 = isnan(_1577) ? _1576 : (isnan(_1576) ? _1577 : min(_1576, _1577));
            float _1735 = isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : min(_1725, 0.0));
            float _1736 = isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : min(_1726, 0.0));
            _1786 = ((abs(_1583 / _1572) * cbSceneParam._m0[80u].y) * ((((_1735 - _1736) * 2.0) - ((exp2(_1592 * (isnan(0.0) ? _1725 : (isnan(_1725) ? 0.0 : max(_1725, 0.0)))) - exp2(_1592 * (isnan(0.0) ? _1726 : (isnan(_1726) ? 0.0 : max(_1726, 0.0))))) * _1724)) - ((exp2(_1594 * _1735) - exp2(_1594 * _1736)) * _1724))) + (_1586 * cbSceneParam._m0[80u].z);
        }
        vec4 _1788 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1502, _1503, 1.0), 0.0);
        float _1797 = exp2((_1786 * (-1.44269502162933349609375)) * (1.0 - _1788.w));
        float _1798 = log2(_1797);
        float _1814 = log2(_1522);
        _1596 = (exp2(_1814 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1798 * cbSceneParam._m0[78u].x)) * _1788.x) / cbSceneParam._m0[78u].x)) + _1519;
        _1598 = (exp2(_1814 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1798 * cbSceneParam._m0[78u].y)) * _1788.y) / cbSceneParam._m0[78u].y)) + _1520;
        _1600 = (exp2(_1814 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1798 * cbSceneParam._m0[78u].z)) * _1788.z) / cbSceneParam._m0[78u].z)) + _1521;
        _1602 = _1797 * _1522;
    }
    else
    {
        _1596 = _1519;
        _1598 = _1520;
        _1600 = _1521;
        _1602 = _1522;
    }
    float _1614 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1615 = _1614 == 3.0;
    float _1617 = log2(_1602);
    float _1624 = exp2(_1617 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0)));
    float _1625 = exp2(_1617 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0)));
    float _1626 = exp2(_1617 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _1490 : (isnan(_1490) ? 0.0 : max(_1490, 0.0)));
    float _1635 = (_1614 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _1635 * (_1615 ? _1624 : (_1624 + (cbSceneParam._m0[72u].w * _1596)));
    SV_Target.y = _1635 * (_1615 ? _1625 : (_1625 + (cbSceneParam._m0[72u].w * _1598)));
    SV_Target.z = _1635 * (_1615 ? _1626 : (_1626 + (cbSceneParam._m0[72u].w * _1600)));
    SV_Target.w = cbInstanceData._m0[_1494].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1494].w;
}


