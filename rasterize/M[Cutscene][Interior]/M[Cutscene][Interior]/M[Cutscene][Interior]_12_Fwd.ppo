#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _916;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _180 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _181 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _182 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _187 = inversesqrt(dot(vec3(_180, _181, _182), vec3(_180, _181, _182)));
    float _194 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _249 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _259 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _249);
    float _260 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _249);
    float _261 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _249);
    vec4 _280 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _315 = cbMtdParam._m0[24u].x + _259;
    float _316 = cbMtdParam._m0[24u].y + _260;
    float _317 = cbMtdParam._m0[24u].z + _261;
    float _331 = (-0.0) - dot(vec3(_315, _316, _317), vec3(_187 * _180, _187 * _181, _187 * _182));
    float _332 = (-0.0) - dot(vec3(_315, _316, _317), vec3(_201 * TANGENT.x, _201 * TANGENT.y, _201 * TANGENT.z));
    float _333 = (-0.0) - dot(vec3(_315, _316, _317), vec3((-0.0) - (_194 * NORMAL.x), (-0.0) - (_194 * NORMAL.y), (-0.0) - (_194 * NORMAL.z)));
    float _337 = inversesqrt(dot(vec3(_331, _332, _333), vec3(_331, _332, _333)));
    float _340 = _337 * _333;
    float _341 = (_337 * _331) + (((_280.x * 2.0) + (-1.0)) * cbMtdParam._m0[22u].x);
    float _342 = (_337 * _332) + (((_280.y * 2.0) + (-1.0)) * cbMtdParam._m0[22u].y);
    float _343 = _341 * cbMtdParam._m0[20u].w;
    float _344 = _342 * cbMtdParam._m0[20u].z;
    float _345 = fract(TEXCOORD.x);
    float _346 = fract(TEXCOORD.y);
    float _352;
    if (_343 > 0.0)
    {
        _352 = (1.0 - _345) / _343;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_343 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _345) / _343;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _352 = frontier_phi_3_2_ladder;
    }
    float _360;
    if (_344 > 0.0)
    {
        _360 = (1.0 - _346) / _344;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_344 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _346) / _344;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _360 = frontier_phi_7_6_ladder;
    }
    bool _362 = _340 > 0.0;
    float _364 = _362 ? (cbMtdParam._m0[16u].x / _340) : 5000.0;
    float _365 = isnan(_360) ? _352 : (isnan(_352) ? _360 : min(_352, _360));
    float _366 = isnan(_364) ? _365 : (isnan(_365) ? _364 : min(_365, _364));
    float _370 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _371 = _345 + (-0.5);
    float _374 = _346 + (-0.5);
    float _377 = ((_366 * _340) + _370) / _370;
    vec4 _402 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (((((_371 + (_366 * _343)) / _377) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (((((_374 + (_366 * _344)) / _377) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    float _412 = cbMtdParam._m0[9u].x * _402.x;
    float _413 = cbMtdParam._m0[9u].y * _402.y;
    float _414 = cbMtdParam._m0[9u].z * _402.z;
    float _433 = _341 * cbMtdParam._m0[22u].w;
    float _434 = _342 * cbMtdParam._m0[22u].z;
    bool _435 = _433 > 0.0;
    float _440;
    if (_435)
    {
        _440 = (1.0 - _345) / _433;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_433 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _345) / _433;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _440 = frontier_phi_11_10_ladder;
    }
    bool _442 = _434 > 0.0;
    float _447;
    if (_442)
    {
        _447 = (1.0 - _346) / _434;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_434 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _346) / _434;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _447 = frontier_phi_15_14_ladder;
    }
    float _450 = _362 ? (cbMtdParam._m0[18u].x / _340) : 5000.0;
    float _451 = isnan(_447) ? _440 : (isnan(_440) ? _447 : min(_440, _447));
    float _452 = isnan(_450) ? _451 : (isnan(_451) ? _450 : min(_451, _450));
    float _456 = cbMtdParam._m0[19u].y * cbMtdParam._m0[18u].x;
    float _460 = ((_452 * _340) + _456) / _456;
    float _465 = cbMtdParam._m0[19u].x - cbMtdParam._m0[20u].x * trunc(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    float _467 = floor(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    vec4 _483 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_371 + (_452 * _433)) / _460) + 0.5) + _465) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_374 + (_452 * _434)) / _460) + 0.5) + _467) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[0u].w));
    float _495;
    if (_435)
    {
        _495 = (1.0 - _345) / _433;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_433 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _345) / _433;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _495 = frontier_phi_19_18_ladder;
    }
    float _501;
    if (_442)
    {
        _501 = (1.0 - _346) / _434;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_434 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _346) / _434;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _501 = frontier_phi_23_22_ladder;
    }
    float _503 = isnan(_501) ? _495 : (isnan(_495) ? _501 : min(_495, _501));
    float _504 = isnan(_450) ? _503 : (isnan(_503) ? _450 : min(_503, _450));
    float _511 = ((_504 * _340) + _456) / _456;
    vec4 _531 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_371 + (_504 * _433)) / _511) + 0.5) + _465) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_374 + (_504 * _434)) / _511) + 0.5) + _467) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[8u].w));
    float _533 = _531.x;
    float _540 = (_533 * ((_483.x * cbMtdParam._m0[10u].x) - _412)) + _412;
    float _541 = (_533 * ((_483.y * cbMtdParam._m0[10u].y) - _413)) + _413;
    float _542 = (_533 * ((_483.z * cbMtdParam._m0[10u].z) - _414)) + _414;
    float _2847 = isnan(0.0) ? _540 : (isnan(_540) ? 0.0 : max(_540, 0.0));
    float _2858 = isnan(0.0) ? _541 : (isnan(_541) ? 0.0 : max(_541, 0.0));
    float _2869 = isnan(0.0) ? _542 : (isnan(_542) ? 0.0 : max(_542, 0.0));
    float _561 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _565 = inversesqrt(dot(vec3(_259, _260, _261), vec3(_259, _260, _261)));
    float _566 = _259 * _565;
    float _567 = _260 * _565;
    float _568 = _261 * _565;
    float _574 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _575 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _588 = uint(roundEven(NORMAL.w)) * 13u;
    uint _591 = (_588 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _597 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2847 : (isnan(_2847) ? 1.0 : min(_2847, 1.0)))) * cbInstanceData._m0[_591].x;
    float _598 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2858 : (isnan(_2858) ? 1.0 : min(_2858, 1.0)))) * cbInstanceData._m0[_591].y;
    float _599 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _2869 : (isnan(_2869) ? 1.0 : min(_2869, 1.0)))) * cbInstanceData._m0[_591].z;
    float _2880 = isnan(0.0) ? _597 : (isnan(_597) ? 0.0 : max(_597, 0.0));
    float _600 = isnan(1.0) ? _2880 : (isnan(_2880) ? 1.0 : min(_2880, 1.0));
    float _2891 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _601 = isnan(1.0) ? _2891 : (isnan(_2891) ? 1.0 : min(_2891, 1.0));
    float _2902 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _602 = isnan(1.0) ? _2902 : (isnan(_2902) ? 1.0 : min(_2902, 1.0));
    vec4 _611 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _574, cbSceneParam._m0[86u].y * _575));
    float _614 = _611.x * TEXCOORD_4.z;
    float _615 = (-0.0) - _566;
    float _616 = (-0.0) - _567;
    float _617 = (-0.0) - _568;
    float _639 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _643 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _647 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _915;
    float _917;
    float _918;
    float _919;
    float _920;
    float _921;
    float _922;
    float _923;
    float _924;
    float _925;
    float _926;
    float _927;
    float _928;
    float _929;
    float _930;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _703 = (cbModelParam._m0[37u].x * ((((fma(_647, cbModelParam._m0[26u].z, fma(_643, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _639)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _705 = (cbModelParam._m0[37u].y * ((((fma(_647, cbModelParam._m0[27u].z, fma(_643, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _639)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _706 = (((((fma(_647, cbModelParam._m0[28u].z, fma(_643, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _639)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _709 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_703, _705, _706), 0.0);
        vec4 _716 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_703, _705, _706), 0.0);
        vec4 _723 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_703, _705, _706), 0.0);
        vec4 _730 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_703, _705, _706), 0.0);
        float _743 = exp2((_709.w + (-0.5)) * 20.0) * 2.0;
        float _744 = _743 * (_709.x + (-0.5));
        float _745 = _743 * (_709.y + (-0.5));
        float _746 = _743 * (_709.z + (-0.5));
        float _753 = exp2((_716.w + (-0.5)) * 20.0) * 2.0;
        float _754 = _753 * (_716.x + (-0.5));
        float _755 = _753 * (_716.y + (-0.5));
        float _756 = _753 * (_716.z + (-0.5));
        float _763 = exp2((_723.w + (-0.5)) * 20.0) * 2.0;
        float _764 = _763 * (_723.x + (-0.5));
        float _765 = _763 * (_723.y + (-0.5));
        float _766 = _763 * (_723.z + (-0.5));
        float _773 = exp2((_730.w + (-0.5)) * 20.0) * 2.0;
        float _774 = _773 * (_730.x + (-0.5));
        float _775 = _773 * (_730.y + (-0.5));
        float _776 = _773 * (_730.z + (-0.5));
        float _777 = isnan(0.0) ? _774 : (isnan(_774) ? 0.0 : max(_774, 0.0));
        float _778 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
        float _779 = isnan(0.0) ? _776 : (isnan(_776) ? 0.0 : max(_776, 0.0));
        float _780 = _744 * 0.5;
        float _781 = _754 * 0.5;
        float _782 = _764 * 0.5;
        float _783 = dot(vec3(_780, _781, _782), vec3(_780, _781, _782));
        float _788 = (_783 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_783);
        float _797 = (dot(vec3(0.0), vec3(_788 * _780, _788 * _781, _788 * _782)) + 1.0) * 0.5;
        float _2928 = isnan(0.0) ? _797 : (isnan(_797) ? 0.0 : max(_797, 0.0));
        float _807 = sqrt(((_781 * _781) + (_780 * _780)) + (_782 * _782)) / (_777 + 9.9999997473787516355514526367188e-06);
        float _2939 = isnan(0.0) ? _807 : (isnan(_807) ? 0.0 : max(_807, 0.0));
        float _808 = isnan(1.0) ? _2939 : (isnan(_2939) ? 1.0 : min(_2939, 1.0));
        float _809 = _808 * 2.0;
        float _813 = (1.0 - _808) / (_808 + 1.0);
        float _2950 = isnan(0.0) ? _813 : (isnan(_813) ? 0.0 : max(_813, 0.0));
        float _814 = isnan(1.0) ? _2950 : (isnan(_2950) ? 1.0 : min(_2950, 1.0));
        float _823 = ((((1.0 - _814) * (_809 + 2.0)) * exp2(log2(isnan(1.0) ? _2928 : (isnan(_2928) ? 1.0 : min(_2928, 1.0))) * (_809 + 1.0))) + _814) * _777;
        float _824 = _745 * 0.5;
        float _825 = _755 * 0.5;
        float _826 = _765 * 0.5;
        float _827 = dot(vec3(_824, _825, _826), vec3(_824, _825, _826));
        float _832 = (_827 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_827);
        float _840 = (dot(vec3(0.0), vec3(_832 * _824, _832 * _825, _832 * _826)) + 1.0) * 0.5;
        float _2961 = isnan(0.0) ? _840 : (isnan(_840) ? 0.0 : max(_840, 0.0));
        float _849 = sqrt(((_825 * _825) + (_824 * _824)) + (_826 * _826)) / (_778 + 9.9999997473787516355514526367188e-06);
        float _2972 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _850 = isnan(1.0) ? _2972 : (isnan(_2972) ? 1.0 : min(_2972, 1.0));
        float _851 = _850 * 2.0;
        float _855 = (1.0 - _850) / (_850 + 1.0);
        float _2983 = isnan(0.0) ? _855 : (isnan(_855) ? 0.0 : max(_855, 0.0));
        float _856 = isnan(1.0) ? _2983 : (isnan(_2983) ? 1.0 : min(_2983, 1.0));
        float _865 = ((((1.0 - _856) * (_851 + 2.0)) * exp2(log2(isnan(1.0) ? _2961 : (isnan(_2961) ? 1.0 : min(_2961, 1.0))) * (_851 + 1.0))) + _856) * _778;
        float _866 = _746 * 0.5;
        float _867 = _756 * 0.5;
        float _868 = _766 * 0.5;
        float _869 = dot(vec3(_866, _867, _868), vec3(_866, _867, _868));
        float _874 = (_869 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_869);
        float _882 = (dot(vec3(0.0), vec3(_874 * _866, _874 * _867, _874 * _868)) + 1.0) * 0.5;
        float _2994 = isnan(0.0) ? _882 : (isnan(_882) ? 0.0 : max(_882, 0.0));
        float _891 = sqrt(((_867 * _867) + (_866 * _866)) + (_868 * _868)) / (_779 + 9.9999997473787516355514526367188e-06);
        float _3005 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
        float _892 = isnan(1.0) ? _3005 : (isnan(_3005) ? 1.0 : min(_3005, 1.0));
        float _893 = _892 * 2.0;
        float _897 = (1.0 - _892) / (_892 + 1.0);
        float _3016 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
        float _898 = isnan(1.0) ? _3016 : (isnan(_3016) ? 1.0 : min(_3016, 1.0));
        float _907 = ((((1.0 - _898) * (_893 + 2.0)) * exp2(log2(isnan(1.0) ? _2994 : (isnan(_2994) ? 1.0 : min(_2994, 1.0))) * (_893 + 1.0))) + _898) * _779;
        _915 = _746;
        _917 = _745;
        _918 = _744;
        _919 = _756;
        _920 = _755;
        _921 = _754;
        _922 = _766;
        _923 = _765;
        _924 = _764;
        _925 = _779;
        _926 = _778;
        _927 = _777;
        _928 = cbModelParam._m0[36u].z * (isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0)));
        _929 = cbModelParam._m0[36u].z * (isnan(0.0) ? _865 : (isnan(_865) ? 0.0 : max(_865, 0.0)));
        _930 = cbModelParam._m0[36u].z * (isnan(0.0) ? _907 : (isnan(_907) ? 0.0 : max(_907, 0.0)));
    }
    else
    {
        _915 = _916;
        _917 = _916;
        _918 = _916;
        _919 = _916;
        _920 = _916;
        _921 = _916;
        _922 = _916;
        _923 = _916;
        _924 = _916;
        _925 = _916;
        _926 = _916;
        _927 = _916;
        _928 = 0.0;
        _929 = 0.0;
        _930 = 0.0;
    }
    float _1191;
    float _1192;
    float _1193;
    float _1194;
    float _1195;
    float _1196;
    float _1197;
    float _1198;
    float _1199;
    float _1200;
    float _1201;
    float _1202;
    float _1203;
    float _1204;
    float _1205;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _984 = (cbModelParam._m0[38u].x * ((((fma(_647, cbModelParam._m0[30u].z, fma(_643, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _639)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _985 = (cbModelParam._m0[38u].y * ((((fma(_647, cbModelParam._m0[31u].z, fma(_643, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _639)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _986 = (((((fma(_647, cbModelParam._m0[32u].z, fma(_643, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _639)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _988 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        vec4 _995 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        vec4 _1002 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        vec4 _1009 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_984, _985, _986), 0.0);
        float _1021 = exp2((_988.w + (-0.5)) * 20.0) * 2.0;
        float _1022 = _1021 * (_988.x + (-0.5));
        float _1023 = _1021 * (_988.y + (-0.5));
        float _1024 = _1021 * (_988.z + (-0.5));
        float _1031 = exp2((_995.w + (-0.5)) * 20.0) * 2.0;
        float _1032 = _1031 * (_995.x + (-0.5));
        float _1033 = _1031 * (_995.y + (-0.5));
        float _1034 = _1031 * (_995.z + (-0.5));
        float _1041 = exp2((_1002.w + (-0.5)) * 20.0) * 2.0;
        float _1042 = _1041 * (_1002.x + (-0.5));
        float _1043 = _1041 * (_1002.y + (-0.5));
        float _1044 = _1041 * (_1002.z + (-0.5));
        float _1051 = exp2((_1009.w + (-0.5)) * 20.0) * 2.0;
        float _1052 = _1051 * (_1009.x + (-0.5));
        float _1053 = _1051 * (_1009.y + (-0.5));
        float _1054 = _1051 * (_1009.z + (-0.5));
        float _1055 = isnan(0.0) ? _1052 : (isnan(_1052) ? 0.0 : max(_1052, 0.0));
        float _1056 = isnan(0.0) ? _1053 : (isnan(_1053) ? 0.0 : max(_1053, 0.0));
        float _1057 = isnan(0.0) ? _1054 : (isnan(_1054) ? 0.0 : max(_1054, 0.0));
        float _1058 = _1022 * 0.5;
        float _1059 = _1032 * 0.5;
        float _1060 = _1042 * 0.5;
        float _1061 = dot(vec3(_1058, _1059, _1060), vec3(_1058, _1059, _1060));
        float _1066 = (_1061 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1061);
        float _1074 = (dot(vec3(0.0), vec3(_1066 * _1058, _1066 * _1059, _1066 * _1060)) + 1.0) * 0.5;
        float _3057 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1083 = sqrt(((_1059 * _1059) + (_1058 * _1058)) + (_1060 * _1060)) / (_1055 + 9.9999997473787516355514526367188e-06);
        float _3068 = isnan(0.0) ? _1083 : (isnan(_1083) ? 0.0 : max(_1083, 0.0));
        float _1084 = isnan(1.0) ? _3068 : (isnan(_3068) ? 1.0 : min(_3068, 1.0));
        float _1085 = _1084 * 2.0;
        float _1089 = (1.0 - _1084) / (_1084 + 1.0);
        float _3079 = isnan(0.0) ? _1089 : (isnan(_1089) ? 0.0 : max(_1089, 0.0));
        float _1090 = isnan(1.0) ? _3079 : (isnan(_3079) ? 1.0 : min(_3079, 1.0));
        float _1099 = ((((1.0 - _1090) * (_1085 + 2.0)) * exp2(log2(isnan(1.0) ? _3057 : (isnan(_3057) ? 1.0 : min(_3057, 1.0))) * (_1085 + 1.0))) + _1090) * _1055;
        float _1100 = _1023 * 0.5;
        float _1101 = _1033 * 0.5;
        float _1102 = _1043 * 0.5;
        float _1103 = dot(vec3(_1100, _1101, _1102), vec3(_1100, _1101, _1102));
        float _1108 = (_1103 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1103);
        float _1116 = (dot(vec3(0.0), vec3(_1108 * _1100, _1108 * _1101, _1108 * _1102)) + 1.0) * 0.5;
        float _3090 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1125 = sqrt(((_1101 * _1101) + (_1100 * _1100)) + (_1102 * _1102)) / (_1056 + 9.9999997473787516355514526367188e-06);
        float _3101 = isnan(0.0) ? _1125 : (isnan(_1125) ? 0.0 : max(_1125, 0.0));
        float _1126 = isnan(1.0) ? _3101 : (isnan(_3101) ? 1.0 : min(_3101, 1.0));
        float _1127 = _1126 * 2.0;
        float _1131 = (1.0 - _1126) / (_1126 + 1.0);
        float _3112 = isnan(0.0) ? _1131 : (isnan(_1131) ? 0.0 : max(_1131, 0.0));
        float _1132 = isnan(1.0) ? _3112 : (isnan(_3112) ? 1.0 : min(_3112, 1.0));
        float _1141 = ((((1.0 - _1132) * (_1127 + 2.0)) * exp2(log2(isnan(1.0) ? _3090 : (isnan(_3090) ? 1.0 : min(_3090, 1.0))) * (_1127 + 1.0))) + _1132) * _1056;
        float _1142 = _1024 * 0.5;
        float _1143 = _1034 * 0.5;
        float _1144 = _1044 * 0.5;
        float _1145 = dot(vec3(_1142, _1143, _1144), vec3(_1142, _1143, _1144));
        float _1150 = (_1145 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1145);
        float _1158 = (dot(vec3(0.0), vec3(_1150 * _1142, _1150 * _1143, _1150 * _1144)) + 1.0) * 0.5;
        float _3123 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1167 = sqrt(((_1143 * _1143) + (_1142 * _1142)) + (_1144 * _1144)) / (_1057 + 9.9999997473787516355514526367188e-06);
        float _3134 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1168 = isnan(1.0) ? _3134 : (isnan(_3134) ? 1.0 : min(_3134, 1.0));
        float _1169 = _1168 * 2.0;
        float _1173 = (1.0 - _1168) / (_1168 + 1.0);
        float _3145 = isnan(0.0) ? _1173 : (isnan(_1173) ? 0.0 : max(_1173, 0.0));
        float _1174 = isnan(1.0) ? _3145 : (isnan(_3145) ? 1.0 : min(_3145, 1.0));
        float _1183 = ((((1.0 - _1174) * (_1169 + 2.0)) * exp2(log2(isnan(1.0) ? _3123 : (isnan(_3123) ? 1.0 : min(_3123, 1.0))) * (_1169 + 1.0))) + _1174) * _1057;
        _1191 = _1024;
        _1192 = _1023;
        _1193 = _1022;
        _1194 = _1034;
        _1195 = _1033;
        _1196 = _1032;
        _1197 = _1044;
        _1198 = _1043;
        _1199 = _1042;
        _1200 = _1057;
        _1201 = _1056;
        _1202 = _1055;
        _1203 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0)));
        _1204 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1141 : (isnan(_1141) ? 0.0 : max(_1141, 0.0)));
        _1205 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0)));
    }
    else
    {
        _1191 = _916;
        _1192 = _916;
        _1193 = _916;
        _1194 = _916;
        _1195 = _916;
        _1196 = _916;
        _1197 = _916;
        _1198 = _916;
        _1199 = _916;
        _1200 = _916;
        _1201 = _916;
        _1202 = _916;
        _1203 = 0.0;
        _1204 = 0.0;
        _1205 = 0.0;
    }
    float _1215 = (cbModelParam._m0[1u].x * (_1203 - _928)) + _928;
    float _1216 = (cbModelParam._m0[1u].x * (_1204 - _929)) + _929;
    float _1217 = (cbModelParam._m0[1u].x * (_1205 - _930)) + _930;
    float _1238 = fma(_1217, cbSceneParam._m0[89u].z, fma(_1216, cbSceneParam._m0[89u].y, _1215 * cbSceneParam._m0[89u].x));
    float _1241 = fma(_1217, cbSceneParam._m0[90u].z, fma(_1216, cbSceneParam._m0[90u].y, _1215 * cbSceneParam._m0[90u].x));
    float _1244 = fma(_1217, cbSceneParam._m0[91u].z, fma(_1216, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1215));
    float _1259 = _566 * (-0.5);
    float _1260 = _567 * (-0.5);
    float _1261 = _568 * (-0.5);
    float _1262 = dot(vec4(_1259, _1260, _1261, 1.0), vec4(_1193, _1196, _1199, _1202));
    float _1265 = dot(vec4(_1259, _1260, _1261, 1.0), vec4(_1192, _1195, _1198, _1201));
    float _1268 = dot(vec4(_1259, _1260, _1261, 1.0), vec4(_1191, _1194, _1197, _1200));
    float _1302;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1275 = dot(vec4(_1259, _1260, _1261, 1.0), vec4(_915, _919, _922, _925));
        float _1279 = dot(vec4(_1259, _1260, _1261, 1.0), vec4(_917, _920, _923, _926));
        float _1283 = dot(vec4(_1259, _1260, _1261, 1.0), vec4(_918, _921, _924, _927));
        float _1290 = dot(vec4(cbModelParam._m0[39u]), vec4(_1259, _1260, _1261, 1.0));
        _1302 = dot(vec3(isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0)), isnan(0.0) ? _1279 : (isnan(_1279) ? 0.0 : max(_1279, 0.0)), isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1290) ? 0.0 : (isnan(0.0) ? _1290 : max(0.0, _1290))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1302 = 1.0;
    }
    float _1313;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1304 = dot(vec4(cbModelParam._m0[40u]), vec4(_1259, _1260, _1261, 1.0));
        _1313 = dot(vec3(isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0)), isnan(0.0) ? _1265 : (isnan(_1265) ? 0.0 : max(_1265, 0.0)), isnan(0.0) ? _1268 : (isnan(_1268) ? 0.0 : max(_1268, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1304) ? 0.0 : (isnan(0.0) ? _1304 : max(0.0, _1304))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1313 = 1.0;
    }
    float _1317 = (_1313 * cbModelParam._m0[1u].x) + (_1302 * (1.0 - cbModelParam._m0[1u].x));
    float _1326 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1409;
    float _1411;
    float _1413;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1376 = fma(_647, cbModelParam._m0[13u].z, fma(_643, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _639)) + cbModelParam._m0[13u].w;
        float _1380 = fma(_647, cbModelParam._m0[14u].z, fma(_643, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _639)) + cbModelParam._m0[14u].w;
        float _1384 = fma(_647, cbModelParam._m0[15u].z, fma(_643, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _639)) + cbModelParam._m0[15u].w;
        float _1387 = fma(_617, cbModelParam._m0[13u].z, fma(_616, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _615));
        float _1390 = fma(_617, cbModelParam._m0[14u].z, fma(_616, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _615));
        float _1393 = fma(_617, cbModelParam._m0[15u].z, fma(_616, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _615));
        float _1419;
        if (_1387 > 0.0)
        {
            _1419 = abs((1.0 - _1376) / _1387);
        }
        else
        {
            float frontier_phi_38_36_ladder;
            if (_1387 < 0.0)
            {
                frontier_phi_38_36_ladder = abs((_1376 + 1.0) / _1387);
            }
            else
            {
                frontier_phi_38_36_ladder = 5000.0;
            }
            _1419 = frontier_phi_38_36_ladder;
        }
        float _1715;
        if (_1390 > 0.0)
        {
            _1715 = abs((1.0 - _1380) / _1390);
        }
        else
        {
            float frontier_phi_47_43_ladder;
            if (_1390 < 0.0)
            {
                frontier_phi_47_43_ladder = abs((_1380 + 1.0) / _1390);
            }
            else
            {
                frontier_phi_47_43_ladder = 5000.0;
            }
            _1715 = frontier_phi_47_43_ladder;
        }
        float _2017;
        if (_1393 > 0.0)
        {
            _2017 = abs((1.0 - _1384) / _1393);
        }
        else
        {
            float frontier_phi_61_54_ladder;
            if (_1393 < 0.0)
            {
                frontier_phi_61_54_ladder = abs((_1384 + 1.0) / _1393);
            }
            else
            {
                frontier_phi_61_54_ladder = 5000.0;
            }
            _2017 = frontier_phi_61_54_ladder;
        }
        float _2019 = isnan(_1715) ? _1419 : (isnan(_1419) ? _1715 : min(_1419, _1715));
        float _2020 = isnan(_2017) ? _2019 : (isnan(_2019) ? _2017 : min(_2019, _2017));
        float _2024 = (_2020 * _1387) + _1376;
        float _2025 = (_2020 * _1390) + _1380;
        float _2026 = (_2020 * _1393) + _1384;
        float _2027 = _2020 * 9.9999997473787516355514526367188e-05;
        float _2028 = (-1.0) - _2027;
        float _2030 = _2027 + 1.0;
        float frontier_phi_37_61_ladder;
        float frontier_phi_37_61_ladder_1;
        float frontier_phi_37_61_ladder_2;
        if ((_2026 > _2030) || ((_2026 < _2028) || ((_2025 > _2030) || ((_2025 < _2028) || ((_2024 < _2028) || (_2024 > _2030))))))
        {
            frontier_phi_37_61_ladder = 0.0;
            frontier_phi_37_61_ladder_1 = 0.0;
            frontier_phi_37_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2149 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2026, cbModelParam._m0[9u].z, fma(_2025, cbModelParam._m0[9u].y, _2024 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2026, cbModelParam._m0[10u].z, fma(_2025, cbModelParam._m0[10u].y, _2024 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2026, cbModelParam._m0[11u].z, fma(_2025, cbModelParam._m0[11u].y, _2024 * cbModelParam._m0[11u].x))), _1326);
            frontier_phi_37_61_ladder = _2149.z * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_1 = _2149.y * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_2 = _2149.x * cbModelParam._m0[1u].y;
        }
        _1409 = frontier_phi_37_61_ladder_2;
        _1411 = frontier_phi_37_61_ladder_1;
        _1413 = frontier_phi_37_61_ladder;
    }
    else
    {
        vec4 _1397 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_615, _616, _617), _1326);
        _1409 = _1397.x * cbModelParam._m0[1u].y;
        _1411 = _1397.y * cbModelParam._m0[1u].y;
        _1413 = _1397.z * cbModelParam._m0[1u].y;
    }
    float _1416 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1504;
    float _1506;
    float _1508;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1468 = fma(_647, cbModelParam._m0[21u].z, fma(_643, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _639)) + cbModelParam._m0[21u].w;
        float _1472 = fma(_647, cbModelParam._m0[22u].z, fma(_643, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _639)) + cbModelParam._m0[22u].w;
        float _1476 = fma(_647, cbModelParam._m0[23u].z, fma(_643, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _639)) + cbModelParam._m0[23u].w;
        float _1479 = fma(_617, cbModelParam._m0[21u].z, fma(_616, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _615));
        float _1482 = fma(_617, cbModelParam._m0[22u].z, fma(_616, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _615));
        float _1485 = fma(_617, cbModelParam._m0[23u].z, fma(_616, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _615));
        float _1720;
        if (_1479 > 0.0)
        {
            _1720 = abs((1.0 - _1468) / _1479);
        }
        else
        {
            float frontier_phi_49_45_ladder;
            if (_1479 < 0.0)
            {
                frontier_phi_49_45_ladder = abs((_1468 + 1.0) / _1479);
            }
            else
            {
                frontier_phi_49_45_ladder = 5000.0;
            }
            _1720 = frontier_phi_49_45_ladder;
        }
        float _2043;
        if (_1482 > 0.0)
        {
            _2043 = abs((1.0 - _1472) / _1482);
        }
        else
        {
            float frontier_phi_63_56_ladder;
            if (_1482 < 0.0)
            {
                frontier_phi_63_56_ladder = abs((_1472 + 1.0) / _1482);
            }
            else
            {
                frontier_phi_63_56_ladder = 5000.0;
            }
            _2043 = frontier_phi_63_56_ladder;
        }
        float _2209;
        if (_1485 > 0.0)
        {
            _2209 = abs((1.0 - _1476) / _1485);
        }
        else
        {
            float frontier_phi_77_72_ladder;
            if (_1485 < 0.0)
            {
                frontier_phi_77_72_ladder = abs((_1476 + 1.0) / _1485);
            }
            else
            {
                frontier_phi_77_72_ladder = 5000.0;
            }
            _2209 = frontier_phi_77_72_ladder;
        }
        float _2211 = isnan(_2043) ? _1720 : (isnan(_1720) ? _2043 : min(_1720, _2043));
        float _2212 = isnan(_2209) ? _2211 : (isnan(_2211) ? _2209 : min(_2211, _2209));
        float _2216 = (_2212 * _1479) + _1468;
        float _2217 = (_2212 * _1482) + _1472;
        float _2218 = (_2212 * _1485) + _1476;
        float _2219 = _2212 * 9.9999997473787516355514526367188e-05;
        float _2220 = (-1.0) - _2219;
        float _2222 = _2219 + 1.0;
        float frontier_phi_46_77_ladder;
        float frontier_phi_46_77_ladder_1;
        float frontier_phi_46_77_ladder_2;
        if ((_2218 > _2222) || ((_2218 < _2220) || ((_2217 > _2222) || ((_2217 < _2220) || ((_2216 < _2220) || (_2216 > _2222))))))
        {
            frontier_phi_46_77_ladder = 0.0;
            frontier_phi_46_77_ladder_1 = 0.0;
            frontier_phi_46_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2401 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2218, cbModelParam._m0[17u].z, fma(_2217, cbModelParam._m0[17u].y, _2216 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2218, cbModelParam._m0[18u].z, fma(_2217, cbModelParam._m0[18u].y, _2216 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2218, cbModelParam._m0[19u].z, fma(_2217, cbModelParam._m0[19u].y, _2216 * cbModelParam._m0[19u].x))), _1416);
            frontier_phi_46_77_ladder = _2401.z * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_1 = _2401.y * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_2 = _2401.x * cbModelParam._m0[1u].z;
        }
        _1504 = frontier_phi_46_77_ladder_2;
        _1506 = frontier_phi_46_77_ladder_1;
        _1508 = frontier_phi_46_77_ladder;
    }
    else
    {
        vec4 _1488 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_615, _616, _617), _1416);
        _1504 = _1488.x * cbModelParam._m0[1u].z;
        _1506 = _1488.y * cbModelParam._m0[1u].z;
        _1508 = _1488.z * cbModelParam._m0[1u].z;
    }
    float _1520 = _614 * 0.01200000010430812835693359375;
    float _1522 = _1520 * ((cbModelParam._m0[1u].w * (_1504 - _1409)) + _1409);
    float _1523 = _1520 * ((cbModelParam._m0[1u].w * (_1506 - _1411)) + _1411);
    float _1524 = _1520 * ((cbModelParam._m0[1u].w * (_1508 - _1413)) + _1413);
    float _1527 = fma(_1524, cbSceneParam._m0[89u].z, fma(_1523, cbSceneParam._m0[89u].y, _1522 * cbSceneParam._m0[89u].x));
    float _1530 = fma(_1524, cbSceneParam._m0[90u].z, fma(_1523, cbSceneParam._m0[90u].y, _1522 * cbSceneParam._m0[90u].x));
    float _1533 = fma(_1524, cbSceneParam._m0[91u].z, fma(_1523, cbSceneParam._m0[91u].y, _1522 * cbSceneParam._m0[91u].x));
    uvec4 _1543 = floatBitsToUint(cbInstanceData._m0[_588 + 5u]);
    uint _1545 = _1543.x * 14u;
    uint _1546 = _1545 + 13u;
    float _1551 = _614 + (-1.0);
    float _1554 = (cbLight._m0[_1546].x * _1551) + 1.0;
    float _1555 = (cbLight._m0[_1546].y * _1551) + 1.0;
    uint _1556 = _1545 + 5u;
    float _1562 = isnan(1.0) ? _1555 : (isnan(_1555) ? 1.0 : min(_1555, 1.0));
    uint _1566 = _1545 + 4u;
    float _1573 = isnan(1.0) ? _1554 : (isnan(_1554) ? 1.0 : min(_1554, 1.0));
    uint _1577 = _1545 | 1u;
    float _1588 = dot(vec3(cbLight._m0[_1545].xyz), vec3(0.0));
    float _1591 = dot(vec3(cbLight._m0[_1577].xyz), vec3(0.0));
    float _3281 = isnan(0.0) ? _1588 : (isnan(_1588) ? 0.0 : max(_1588, 0.0));
    float _3292 = isnan(0.0) ? _1591 : (isnan(_1591) ? 0.0 : max(_1591, 0.0));
    float _1596 = (isnan(1.0) ? _3281 : (isnan(_3281) ? 1.0 : min(_3281, 1.0))) * 0.3183098733425140380859375;
    float _1598 = (isnan(1.0) ? _3292 : (isnan(_3292) ? 1.0 : min(_3292, 1.0))) * 0.3183098733425140380859375;
    float _1605 = ((cbLight._m0[_1556].x * _1562) * _1598) + ((cbLight._m0[_1566].x * _1573) * _1596);
    float _1606 = ((_1562 * cbLight._m0[_1556].y) * _1598) + ((_1573 * cbLight._m0[_1566].y) * _1596);
    float _1607 = ((_1562 * cbLight._m0[_1556].z) * _1598) + ((_1573 * cbLight._m0[_1566].z) * _1596);
    uint _1608 = _1545 + 8u;
    float _1614 = cbLight._m0[_1545].x + _566;
    float _1615 = cbLight._m0[_1545].y + _567;
    float _1616 = cbLight._m0[_1545].z + _568;
    float _1620 = inversesqrt(dot(vec3(_1614, _1615, _1616), vec3(_1614, _1615, _1616)));
    float _1624 = dot(vec3(0.0), vec3(cbLight._m0[_1545].xyz));
    float _3303 = isnan(0.0) ? _1624 : (isnan(_1624) ? 0.0 : max(_1624, 0.0));
    float _1627 = isnan(1.0) ? _3303 : (isnan(_3303) ? 1.0 : min(_3303, 1.0));
    float _1628 = dot(vec3(0.0), vec3(_566, _567, _568));
    float _3314 = isnan(0.0) ? _1628 : (isnan(_1628) ? 0.0 : max(_1628, 0.0));
    float _1631 = isnan(1.0) ? _3314 : (isnan(_3314) ? 1.0 : min(_3314, 1.0));
    float _1632 = dot(vec3(cbLight._m0[_1545].xyz), vec3(_1614 * _1620, _1615 * _1620, _1616 * _1620));
    float _3325 = isnan(0.0) ? _1632 : (isnan(_1632) ? 0.0 : max(_1632, 0.0));
    float _1643 = (exp2(log2(1.0 - (isnan(1.0) ? _3325 : (isnan(_3325) ? 1.0 : min(_3325, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1649 = (0.5 / ((_1627 + 9.9999999392252902907785028219223e-09) + _1631)) * _1627;
    float _3336 = isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0));
    float _1651 = (isnan(1.0) ? _3336 : (isnan(_3336) ? 1.0 : min(_3336, 1.0))) * 0.31831014156341552734375;
    uint _1662 = _1545 + 9u;
    float _1668 = cbLight._m0[_1577].x + _566;
    float _1669 = cbLight._m0[_1577].y + _567;
    float _1670 = cbLight._m0[_1577].z + _568;
    float _1674 = inversesqrt(dot(vec3(_1668, _1669, _1670), vec3(_1668, _1669, _1670)));
    float _1678 = dot(vec3(0.0), vec3(cbLight._m0[_1577].xyz));
    float _3347 = isnan(0.0) ? _1678 : (isnan(_1678) ? 0.0 : max(_1678, 0.0));
    float _1681 = isnan(1.0) ? _3347 : (isnan(_3347) ? 1.0 : min(_3347, 1.0));
    float _1682 = dot(vec3(cbLight._m0[_1577].xyz), vec3(_1668 * _1674, _1669 * _1674, _1670 * _1674));
    float _3358 = isnan(0.0) ? _1682 : (isnan(_1682) ? 0.0 : max(_1682, 0.0));
    float _1691 = (exp2(log2(1.0 - (isnan(1.0) ? _3358 : (isnan(_3358) ? 1.0 : min(_3358, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1695 = (0.5 / ((_1681 + 9.9999999392252902907785028219223e-09) + _1631)) * _1681;
    float _3369 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
    float _1697 = (isnan(1.0) ? _3369 : (isnan(_3369) ? 1.0 : min(_3369, 1.0))) * 0.31831014156341552734375;
    float _1707 = (((_1691 * cbLight._m0[_1662].x) * _1697) * _1562) + (((_1643 * cbLight._m0[_1608].x) * _1651) * _1573);
    float _1708 = (((_1691 * cbLight._m0[_1662].y) * _1697) * _1562) + (((_1643 * cbLight._m0[_1608].y) * _1651) * _1573);
    float _1709 = (((_1691 * cbLight._m0[_1662].z) * _1697) * _1562) + (((_1643 * cbLight._m0[_1608].z) * _1651) * _1573);
    float _1825;
    float _1827;
    float _1829;
    float _1831;
    float _1833;
    float _1835;
    if (_1543.y == 0u)
    {
        float _1765 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1766 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1765;
        float _1767 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1765;
        float _1768 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1765;
        uvec4 _1780 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1781 = _1780.x;
        uint _1792 = uint((float(_1780.y) * floor(float(uint(cbSceneParam._m0[85u].y * _575) / _1781))) + floor(float(uint(cbSceneParam._m0[85u].x * _574) / _1781)));
        float _1802 = (log2(_1768 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1803 = isnan(0.0) ? _1802 : (isnan(_1802) ? 0.0 : max(_1802, 0.0));
        uint _1806 = uint(isnan(14.0) ? _1803 : (isnan(_1803) ? 14.0 : min(_1803, 14.0)));
        uvec4 _1811 = texelFetch(g_lightClusterGridBuffer, int(((_1806 << 2u) + (_1792 << 6u)) >> 2u));
        uint _1812 = _1811.x;
        uint _1813 = _1780.z;
        float _1903;
        float _1905;
        float _1907;
        float _1909;
        float _1911;
        float _1913;
        if (((((1u << ((_1813 >> 4u) & 15u)) + 4294967295u) & _1812) == 0u) || ((_1813 & 240u) == 0u))
        {
            _1903 = 0.0;
            _1905 = 0.0;
            _1907 = 0.0;
            _1909 = 0.0;
            _1911 = 0.0;
            _1913 = 0.0;
        }
        else
        {
            float _1904;
            float _1906;
            float _1908;
            float _1910;
            float _1912;
            float _1914;
            float _2077 = 0.0;
            float _2078 = 0.0;
            float _2079 = 0.0;
            float _2080 = 0.0;
            float _2081 = 0.0;
            float _2082 = 0.0;
            uint _2083 = 0u;
            uint _2092;
            bool _2093;
            for (;;)
            {
                _2092 = texelFetch(g_lightClassification, int((((_1806 << 5u) + (_1792 << 9u)) + (_2083 << 2u)) >> 2u)).x;
                _2093 = _2092 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2093)
                {
                    frontier_phi_74_pred = _2080;
                    frontier_phi_74_pred_1 = _2079;
                    frontier_phi_74_pred_2 = _2078;
                    frontier_phi_74_pred_3 = _2077;
                    frontier_phi_74_pred_4 = _2081;
                    frontier_phi_74_pred_5 = _2082;
                }
                else
                {
                    float _2252;
                    float _2253;
                    float _2254;
                    float _2255;
                    float _2256;
                    float _2257;
                    uint _2258;
                    _2252 = _2077;
                    _2253 = _2078;
                    _2254 = _2079;
                    _2255 = _2080;
                    _2256 = _2081;
                    _2257 = _2082;
                    _2258 = _2092;
                    float _2158;
                    float _2159;
                    float _2160;
                    float _2161;
                    float _2162;
                    float _2163;
                    for (;;)
                    {
                        uint _2262 = uint(findLSB(_2258)) + (_2083 << 5u);
                        uint _2259 = (_2258 + 4294967295u) & _2258;
                        uint _2264 = _2262 * 48u;
                        vec4 _2278 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2264)).x, texelFetch(g_PointLightRenderingBuffer, int(_2264 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2264 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2264 + 3u)).x));
                        uint _2284 = (_2262 * 48u) + 4u;
                        vec4 _2297 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2284)).x, texelFetch(g_PointLightRenderingBuffer, int(_2284 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2284 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2284 + 3u)).x));
                        uint _2303 = (_2262 * 48u) + 8u;
                        vec3 _2314 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2303)).x, texelFetch(g_PointLightRenderingBuffer, int(_2303 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2303 + 2u)).x));
                        float _2318 = _2278.x - _1766;
                        float _2319 = _2278.y - _1767;
                        float _2320 = _2278.z - _1768;
                        float _2321 = dot(vec3(_2318, _2319, _2320), vec3(_2318, _2319, _2320));
                        float _2324 = inversesqrt(_2321);
                        float _2333 = 1.0 - (_2321 * _2278.w);
                        float _3390 = isnan(0.0) ? _2333 : (isnan(_2333) ? 0.0 : max(_2333, 0.0));
                        float _2334 = isnan(1.0) ? _3390 : (isnan(_3390) ? 1.0 : min(_3390, 1.0));
                        float _2335 = sqrt(_2321) * _2297.w;
                        float _2338 = 1.39999997615814208984375 / (_2335 + 1.39999997615814208984375);
                        float _2339 = _2338 * _2338;
                        float _2342 = ((1.0 - _2339) * dot(vec3(0.0), vec3(_2324 * _2318, _2324 * _2319, _2324 * _2320))) + _2339;
                        float _2345 = _2335 * _2335;
                        float _2349 = ((isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0))) * _2334) / ((_2345 * 0.699999988079071044921875) + 1.0);
                        float _2353 = (-0.0) - _1766;
                        float _2354 = (-0.0) - _1767;
                        float _2355 = (-0.0) - _1768;
                        float _2359 = inversesqrt(dot(vec3(_2353, _2354, _2355), vec3(_2353, _2354, _2355)));
                        float _2363 = dot(vec3(0.0), vec3(_2359 * _2353, _2359 * _2354, _2359 * _2355));
                        float _3406 = isnan(0.0) ? _2363 : (isnan(_2363) ? 0.0 : max(_2363, 0.0));
                        float _3417 = isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0));
                        float _2367 = isnan(1.0) ? _3417 : (isnan(_3417) ? 1.0 : min(_3417, 1.0));
                        float _2371 = (0.5 / (((isnan(1.0) ? _3406 : (isnan(_3406) ? 1.0 : min(_3406, 1.0))) + 9.9999999392252902907785028219223e-09) + _2367)) * _2367;
                        float _3428 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
                        float _2380 = (((isnan(1.0) ? _3428 : (isnan(_3428) ? 1.0 : min(_3428, 1.0))) * 3.1415927410125732421875) / ((_2345 * 2.1991131305694580078125) + 3.141590118408203125)) * _2334;
                        _2161 = (_2349 * _2297.x) + _2255;
                        _2162 = (_2349 * _2297.y) + _2256;
                        _2163 = (_2349 * _2297.z) + _2257;
                        _2158 = (_2380 * _2314.x) + _2252;
                        _2159 = (_2380 * _2314.y) + _2253;
                        _2160 = (_2380 * _2314.z) + _2254;
                        if (_2259 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2252 = _2158;
                            _2253 = _2159;
                            _2254 = _2160;
                            _2255 = _2161;
                            _2256 = _2162;
                            _2257 = _2163;
                            _2258 = _2259;
                        }
                    }
                    frontier_phi_74_pred = _2161;
                    frontier_phi_74_pred_1 = _2160;
                    frontier_phi_74_pred_2 = _2159;
                    frontier_phi_74_pred_3 = _2158;
                    frontier_phi_74_pred_4 = _2162;
                    frontier_phi_74_pred_5 = _2163;
                }
                _1910 = frontier_phi_74_pred;
                _1908 = frontier_phi_74_pred_1;
                _1906 = frontier_phi_74_pred_2;
                _1904 = frontier_phi_74_pred_3;
                _1912 = frontier_phi_74_pred_4;
                _1914 = frontier_phi_74_pred_5;
                uint _2084 = _2083 + 1u;
                if (_2084 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2077 = _1904;
                    _2078 = _1906;
                    _2079 = _1908;
                    _2080 = _1910;
                    _2081 = _1912;
                    _2082 = _1914;
                    _2083 = _2084;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1903 = _1904;
            _1905 = _1906;
            _1907 = _1908;
            _1909 = _1910;
            _1911 = _1912;
            _1913 = _1914;
        }
        uvec4 _1917 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1918 = _1917.z;
        uint _1920 = (_1918 >> 8u) & 15u;
        float _2048;
        float _2050;
        float _2052;
        float _2054;
        float _2056;
        float _2058;
        if (((4294967295u << _1920) & _1812) == 0u)
        {
            _2048 = _1903;
            _2050 = _1905;
            _2052 = _1907;
            _2054 = _1909;
            _2056 = _1911;
            _2058 = _1913;
        }
        else
        {
            float _2073 = inversesqrt(dot(vec3(_1766, _1767, _1768), vec3(_1766, _1767, _1768)));
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_1920 < ((_1918 >> 12u) & 15u))
            {
                float _2049;
                float _2051;
                float _2053;
                float _2055;
                float _2057;
                float _2059;
                float _2235 = _1903;
                float _2236 = _1905;
                float _2237 = _1907;
                float _2238 = _1909;
                float _2239 = _1911;
                float _2240 = _1913;
                uint _2241 = _1920;
                uint _2250;
                bool _2251;
                for (;;)
                {
                    _2250 = texelFetch(g_lightClassification, int((((_1806 << 5u) + (_1792 << 9u)) + (_2241 << 2u)) >> 2u)).x;
                    _2251 = _2250 == 0u;
                    float frontier_phi_83_pred;
                    float frontier_phi_83_pred_1;
                    float frontier_phi_83_pred_2;
                    float frontier_phi_83_pred_3;
                    float frontier_phi_83_pred_4;
                    float frontier_phi_83_pred_5;
                    if (_2251)
                    {
                        frontier_phi_83_pred = _2238;
                        frontier_phi_83_pred_1 = _2237;
                        frontier_phi_83_pred_2 = _2236;
                        frontier_phi_83_pred_3 = _2235;
                        frontier_phi_83_pred_4 = _2240;
                        frontier_phi_83_pred_5 = _2239;
                    }
                    else
                    {
                        float _2406;
                        float _2407;
                        float _2408;
                        float _2409;
                        float _2410;
                        float _2411;
                        float _2655;
                        float _2656;
                        float _2657;
                        float _2658;
                        float _2659;
                        float _2660;
                        float _2419 = _2235;
                        float _2420 = _2236;
                        float _2421 = _2237;
                        float _2422 = _2238;
                        float _2423 = _2239;
                        float _2424 = _2240;
                        uint _2425 = _2250;
                        uint _2426;
                        vec4 _2451;
                        float _2452;
                        vec4 _2467;
                        vec3 _2479;
                        vec4 _2494;
                        vec4 _2509;
                        float _2555;
                        bool _2556;
                        for (;;)
                        {
                            uint _2436 = ((_2241 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2425));
                            _2426 = (_2425 + 4294967295u) & _2425;
                            uint _2438 = _2436 * 40u;
                            _2451 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2438)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2438 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2438 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2438 + 3u)).x));
                            _2452 = _2451.w;
                            uint _2454 = (_2436 * 40u) + 4u;
                            _2467 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2454)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2454 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2454 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2454 + 3u)).x));
                            uint _2469 = (_2436 * 40u) + 8u;
                            _2479 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2469)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2469 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2469 + 2u)).x));
                            uint _2481 = (_2436 * 40u) + 16u;
                            _2494 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2481)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2481 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2481 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2481 + 3u)).x));
                            uint _2496 = (_2436 * 40u) + 20u;
                            _2509 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2496)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2496 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2496 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2496 + 3u)).x));
                            uint _2511 = (_2436 * 40u) + 24u;
                            vec4 _2524 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2511)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2511 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2511 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2511 + 3u)).x));
                            uint _2530 = (_2436 * 40u) + 28u;
                            vec4 _2543 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2530)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2530 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2530 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2530 + 3u)).x));
                            _2555 = fma(_1768, _2543.z, fma(_1767, _2543.y, _2543.x * _1766)) + _2543.w;
                            _2556 = !((fma(_1768, _2524.z, fma(_1767, _2524.y, _2524.x * _1766)) + _2524.w) <= 0.0);
                            float frontier_phi_89_pred;
                            float frontier_phi_89_pred_1;
                            float frontier_phi_89_pred_2;
                            float frontier_phi_89_pred_3;
                            float frontier_phi_89_pred_4;
                            float frontier_phi_89_pred_5;
                            if (_2556)
                            {
                                float _2583 = _2451.x - _1766;
                                float _2584 = _2451.y - _1767;
                                float _2585 = _2451.z - _1768;
                                float _2586 = dot(vec3(_2583, _2584, _2585), vec3(_2583, _2584, _2585));
                                float _2589 = inversesqrt(_2586);
                                float _2590 = _2589 * _2583;
                                float _2591 = _2589 * _2584;
                                float _2592 = _2589 * _2585;
                                float _2596 = 1.0 - (_2586 / (_2452 * _2452));
                                float _3439 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
                                float _2597 = isnan(1.0) ? _3439 : (isnan(_3439) ? 1.0 : min(_3439, 1.0));
                                float _2601 = sqrt(_2586) * _2467.w;
                                float _2603 = 1.39999997615814208984375 / (_2601 + 1.39999997615814208984375);
                                float _2604 = _2603 * _2603;
                                float _2605 = 1.0 - _2604;
                                float _2607 = (_2605 * dot(vec3(_2590, _2591, _2592), vec3(0.0))) + _2604;
                                float _2610 = _2601 * _2601;
                                float _2614 = (fma(_1768, _2494.z, fma(_1767, _2494.y, _2494.x * _1766)) + _2494.w) / _2555;
                                float _2615 = (fma(_1768, _2509.z, fma(_1767, _2509.y, _2509.x * _1766)) + _2509.w) / _2555;
                                float _2619 = 1.0 - dot(vec2(_2614, _2615), vec2(_2614, _2615));
                                float _3455 = isnan(0.0) ? _2619 : (isnan(_2619) ? 0.0 : max(_2619, 0.0));
                                float _2620 = isnan(1.0) ? _3455 : (isnan(_3455) ? 1.0 : min(_3455, 1.0));
                                float _2621 = _2620 * (((isnan(0.0) ? _2607 : (isnan(_2607) ? 0.0 : max(_2607, 0.0))) * _2597) / ((_2610 * 0.699999988079071044921875) + 1.0));
                                float _2631 = dot(vec3(0.0), vec3((-0.0) - (_1766 * _2073), (-0.0) - (_1767 * _2073), (-0.0) - (_1768 * _2073)));
                                float _3466 = isnan(0.0) ? _2631 : (isnan(_2631) ? 0.0 : max(_2631, 0.0));
                                float _2639 = (_2605 * dot(vec3(0.0), vec3(_2590, _2591, _2592))) + _2604;
                                float _3477 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
                                float _2640 = isnan(1.0) ? _3477 : (isnan(_3477) ? 1.0 : min(_3477, 1.0));
                                float _2644 = (0.5 / (((isnan(1.0) ? _3466 : (isnan(_3466) ? 1.0 : min(_3466, 1.0))) + 9.9999999392252902907785028219223e-09) + _2640)) * _2640;
                                float _3488 = isnan(0.0) ? _2644 : (isnan(_2644) ? 0.0 : max(_2644, 0.0));
                                float _2651 = (_2620 * _2597) * (((isnan(1.0) ? _3488 : (isnan(_3488) ? 1.0 : min(_3488, 1.0))) * 3.1415927410125732421875) / ((_2610 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_89_pred = _2621 * _2467.x;
                                frontier_phi_89_pred_1 = _2651 * _2479.z;
                                frontier_phi_89_pred_2 = _2651 * _2479.y;
                                frontier_phi_89_pred_3 = _2651 * _2479.x;
                                frontier_phi_89_pred_4 = _2621 * _2467.z;
                                frontier_phi_89_pred_5 = _2621 * _2467.y;
                            }
                            else
                            {
                                frontier_phi_89_pred = 0.0;
                                frontier_phi_89_pred_1 = 0.0;
                                frontier_phi_89_pred_2 = 0.0;
                                frontier_phi_89_pred_3 = 0.0;
                                frontier_phi_89_pred_4 = 0.0;
                                frontier_phi_89_pred_5 = 0.0;
                            }
                            _2658 = frontier_phi_89_pred;
                            _2657 = frontier_phi_89_pred_1;
                            _2656 = frontier_phi_89_pred_2;
                            _2655 = frontier_phi_89_pred_3;
                            _2660 = frontier_phi_89_pred_4;
                            _2659 = frontier_phi_89_pred_5;
                            _2409 = _2658 + _2422;
                            _2410 = _2659 + _2423;
                            _2411 = _2660 + _2424;
                            _2406 = _2655 + _2419;
                            _2407 = _2656 + _2420;
                            _2408 = _2657 + _2421;
                            if (_2426 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2419 = _2406;
                                _2420 = _2407;
                                _2421 = _2408;
                                _2422 = _2409;
                                _2423 = _2410;
                                _2424 = _2411;
                                _2425 = _2426;
                                continue;
                            }
                        }
                        frontier_phi_83_pred = _2409;
                        frontier_phi_83_pred_1 = _2408;
                        frontier_phi_83_pred_2 = _2407;
                        frontier_phi_83_pred_3 = _2406;
                        frontier_phi_83_pred_4 = _2411;
                        frontier_phi_83_pred_5 = _2410;
                    }
                    _2055 = frontier_phi_83_pred;
                    _2053 = frontier_phi_83_pred_1;
                    _2051 = frontier_phi_83_pred_2;
                    _2049 = frontier_phi_83_pred_3;
                    _2059 = frontier_phi_83_pred_4;
                    _2057 = frontier_phi_83_pred_5;
                    uint _2242 = _2241 + 1u;
                    if (_2242 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2235 = _2049;
                        _2236 = _2051;
                        _2237 = _2053;
                        _2238 = _2055;
                        _2239 = _2057;
                        _2240 = _2059;
                        _2241 = _2242;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2059;
                frontier_phi_65_66_ladder_1 = _2057;
                frontier_phi_65_66_ladder_2 = _2053;
                frontier_phi_65_66_ladder_3 = _2051;
                frontier_phi_65_66_ladder_4 = _2055;
                frontier_phi_65_66_ladder_5 = _2049;
            }
            else
            {
                frontier_phi_65_66_ladder = _1913;
                frontier_phi_65_66_ladder_1 = _1911;
                frontier_phi_65_66_ladder_2 = _1907;
                frontier_phi_65_66_ladder_3 = _1905;
                frontier_phi_65_66_ladder_4 = _1909;
                frontier_phi_65_66_ladder_5 = _1903;
            }
            _2048 = frontier_phi_65_66_ladder_5;
            _2050 = frontier_phi_65_66_ladder_3;
            _2052 = frontier_phi_65_66_ladder_2;
            _2054 = frontier_phi_65_66_ladder_4;
            _2056 = frontier_phi_65_66_ladder_1;
            _2058 = frontier_phi_65_66_ladder;
        }
        float _2063 = isnan(1.0) ? _614 : (isnan(_614) ? 1.0 : min(_614, 1.0));
        _1825 = (_2063 * _2054) + _1605;
        _1827 = (_2063 * _2056) + _1606;
        _1829 = (_2063 * _2058) + _1607;
        _1831 = ((_2048 * 0.039999999105930328369140625) * _2063) + _1707;
        _1833 = ((_2050 * 0.039999999105930328369140625) * _2063) + _1708;
        _1835 = ((_2052 * 0.039999999105930328369140625) * _2063) + _1709;
    }
    else
    {
        _1825 = _1605;
        _1827 = _1606;
        _1829 = _1607;
        _1831 = _1707;
        _1833 = _1708;
        _1835 = _1709;
    }
    float _3504 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _3515 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _3526 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _1852 = ((isnan(1.0) ? _3504 : (isnan(_3504) ? 1.0 : min(_3504, 1.0))) * (_1825 + ((isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0))) * _614))) + ((_1831 + ((isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0))) * _1317)) * cbPerFrame._m0[3u].x);
    float _1853 = ((isnan(1.0) ? _3515 : (isnan(_3515) ? 1.0 : min(_3515, 1.0))) * (_1827 + ((isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0))) * _614))) + ((_1833 + ((isnan(0.0) ? _1530 : (isnan(_1530) ? 0.0 : max(_1530, 0.0))) * _1317)) * cbPerFrame._m0[3u].x);
    float _1854 = ((isnan(1.0) ? _3526 : (isnan(_3526) ? 1.0 : min(_3526, 1.0))) * (_1829 + ((isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0))) * _614))) + ((_1835 + ((isnan(0.0) ? _1533 : (isnan(_1533) ? 0.0 : max(_1533, 0.0))) * _1317)) * cbPerFrame._m0[3u].x);
    uint _1858 = _588 + 6u;
    float _1866 = _574 / cbSceneParam._m0[86u].x;
    float _1867 = _575 / cbSceneParam._m0[86u].y;
    vec4 _1881 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1866, _1867, (log2((isnan(cbSceneParam._m0[77u].w) ? _561 : (isnan(_561) ? cbSceneParam._m0[77u].w : min(_561, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1883 = _1881.x;
    float _1884 = _1881.y;
    float _1885 = _1881.z;
    float _1886 = _1881.w;
    float _1966;
    float _1968;
    float _1970;
    float _1972;
    if (_561 > cbSceneParam._m0[78u].w)
    {
        float _1928 = isnan(_561) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _561 : min(cbSceneParam._m0[80u].w, _561));
        float _1929 = _1928 / _561;
        float _1940 = _1929 * _259;
        float _1941 = _260 * _1929;
        float _1942 = (-0.0) - _1941;
        float _1943 = _1929 * _261;
        float _1945 = (cbSceneParam._m0[77u].w * _1942) / _1928;
        float _1946 = _1945 + cbSceneParam._m0[79u].w;
        float _1947 = cbSceneParam._m0[79u].w - _1941;
        float _1953 = sqrt(((_1940 * _1940) + (_1941 * _1941)) + (_1943 * _1943));
        float _1956 = (1.0 - (cbSceneParam._m0[77u].w / _1928)) * _1953;
        float _1962 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1964 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2171;
        if (abs((_1942 - _1945) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2171 = ((((_1946 > 0.0) ? exp2(_1962 * _1946) : (2.0 - exp2(_1964 * _1946))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1956;
        }
        else
        {
            float _2106 = 1.0 / cbSceneParam._m0[80u].x;
            float _2107 = isnan(_1947) ? _1946 : (isnan(_1946) ? _1947 : max(_1946, _1947));
            float _2108 = isnan(_1947) ? _1946 : (isnan(_1946) ? _1947 : min(_1946, _1947));
            float _2117 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : min(_2107, 0.0));
            float _2118 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : min(_2108, 0.0));
            _2171 = ((abs(_1953 / _1942) * cbSceneParam._m0[80u].y) * ((((_2117 - _2118) * 2.0) - ((exp2(_1962 * (isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0)))) - exp2(_1962 * (isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0))))) * _2106)) - ((exp2(_1964 * _2117) - exp2(_1964 * _2118)) * _2106))) + (_1956 * cbSceneParam._m0[80u].z);
        }
        vec4 _2173 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1866, _1867, 1.0), 0.0);
        float _2182 = exp2((_2171 * (-1.44269502162933349609375)) * (1.0 - _2173.w));
        float _2183 = log2(_2182);
        float _2199 = log2(_1886);
        _1966 = (exp2(_2199 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2183 * cbSceneParam._m0[78u].x)) * _2173.x) / cbSceneParam._m0[78u].x)) + _1883;
        _1968 = (exp2(_2199 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2183 * cbSceneParam._m0[78u].y)) * _2173.y) / cbSceneParam._m0[78u].y)) + _1884;
        _1970 = (exp2(_2199 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2183 * cbSceneParam._m0[78u].z)) * _2173.z) / cbSceneParam._m0[78u].z)) + _1885;
        _1972 = _2182 * _1886;
    }
    else
    {
        _1966 = _1883;
        _1968 = _1884;
        _1970 = _1885;
        _1972 = _1886;
    }
    float _1984 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1985 = _1984 == 3.0;
    float _1987 = log2(_1972);
    float _1994 = exp2(_1987 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _1852 : (isnan(_1852) ? 0.0 : max(_1852, 0.0)));
    float _1995 = exp2(_1987 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0)));
    float _1996 = exp2(_1987 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0)));
    float _2005 = (_1984 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2005 * (_1985 ? _1994 : (_1994 + (cbSceneParam._m0[72u].w * _1966)));
    SV_Target.y = _2005 * (_1985 ? _1995 : (_1995 + (cbSceneParam._m0[72u].w * _1968)));
    SV_Target.z = _2005 * (_1985 ? _1996 : (_1996 + (cbSceneParam._m0[72u].w * _1970)));
    SV_Target.w = cbInstanceData._m0[_1858].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1858].w;
}


