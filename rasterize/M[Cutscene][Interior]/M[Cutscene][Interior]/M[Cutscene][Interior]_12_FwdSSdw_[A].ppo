#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _963;
float _2944;
float _2945;
float _2946;
float _2947;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _255 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _265 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _255);
    float _266 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _255);
    float _267 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _255);
    vec4 _286 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _321 = cbMtdParam._m0[24u].x + _265;
    float _322 = cbMtdParam._m0[24u].y + _266;
    float _323 = cbMtdParam._m0[24u].z + _267;
    float _337 = (-0.0) - dot(vec3(_321, _322, _323), vec3(_193 * _186, _193 * _187, _193 * _188));
    float _338 = (-0.0) - dot(vec3(_321, _322, _323), vec3(_207 * TANGENT.x, _207 * TANGENT.y, _207 * TANGENT.z));
    float _339 = (-0.0) - dot(vec3(_321, _322, _323), vec3((-0.0) - (_200 * NORMAL.x), (-0.0) - (_200 * NORMAL.y), (-0.0) - (_200 * NORMAL.z)));
    float _343 = inversesqrt(dot(vec3(_337, _338, _339), vec3(_337, _338, _339)));
    float _346 = _343 * _339;
    float _347 = (_343 * _337) + (((_286.x * 2.0) + (-1.0)) * cbMtdParam._m0[22u].x);
    float _348 = (_343 * _338) + (((_286.y * 2.0) + (-1.0)) * cbMtdParam._m0[22u].y);
    float _349 = _347 * cbMtdParam._m0[20u].w;
    float _350 = _348 * cbMtdParam._m0[20u].z;
    float _351 = fract(TEXCOORD.x);
    float _352 = fract(TEXCOORD.y);
    float _358;
    if (_349 > 0.0)
    {
        _358 = (1.0 - _351) / _349;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_349 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _351) / _349;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _358 = frontier_phi_3_2_ladder;
    }
    float _366;
    if (_350 > 0.0)
    {
        _366 = (1.0 - _352) / _350;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_350 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _352) / _350;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _366 = frontier_phi_7_6_ladder;
    }
    bool _368 = _346 > 0.0;
    float _370 = _368 ? (cbMtdParam._m0[16u].x / _346) : 5000.0;
    float _371 = isnan(_366) ? _358 : (isnan(_358) ? _366 : min(_358, _366));
    float _372 = isnan(_370) ? _371 : (isnan(_371) ? _370 : min(_371, _370));
    float _376 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _377 = _351 + (-0.5);
    float _380 = _352 + (-0.5);
    float _383 = ((_372 * _346) + _376) / _376;
    vec4 _408 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (((((_377 + (_372 * _349)) / _383) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (((((_380 + (_372 * _350)) / _383) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    float _418 = cbMtdParam._m0[9u].x * _408.x;
    float _419 = cbMtdParam._m0[9u].y * _408.y;
    float _420 = cbMtdParam._m0[9u].z * _408.z;
    float _439 = _347 * cbMtdParam._m0[22u].w;
    float _440 = _348 * cbMtdParam._m0[22u].z;
    bool _441 = _439 > 0.0;
    float _446;
    if (_441)
    {
        _446 = (1.0 - _351) / _439;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_439 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _351) / _439;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _446 = frontier_phi_11_10_ladder;
    }
    bool _448 = _440 > 0.0;
    float _453;
    if (_448)
    {
        _453 = (1.0 - _352) / _440;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_440 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _352) / _440;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _453 = frontier_phi_15_14_ladder;
    }
    float _456 = _368 ? (cbMtdParam._m0[18u].x / _346) : 5000.0;
    float _457 = isnan(_453) ? _446 : (isnan(_446) ? _453 : min(_446, _453));
    float _458 = isnan(_456) ? _457 : (isnan(_457) ? _456 : min(_457, _456));
    float _462 = cbMtdParam._m0[19u].y * cbMtdParam._m0[18u].x;
    float _466 = ((_458 * _346) + _462) / _462;
    float _471 = cbMtdParam._m0[19u].x - cbMtdParam._m0[20u].x * trunc(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    float _473 = floor(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    vec4 _489 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_377 + (_458 * _439)) / _466) + 0.5) + _471) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_380 + (_458 * _440)) / _466) + 0.5) + _473) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[0u].w));
    float _501;
    if (_441)
    {
        _501 = (1.0 - _351) / _439;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_439 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _351) / _439;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _501 = frontier_phi_19_18_ladder;
    }
    float _507;
    if (_448)
    {
        _507 = (1.0 - _352) / _440;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_440 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _352) / _440;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _507 = frontier_phi_23_22_ladder;
    }
    float _509 = isnan(_507) ? _501 : (isnan(_501) ? _507 : min(_501, _507));
    float _510 = isnan(_456) ? _509 : (isnan(_509) ? _456 : min(_509, _456));
    float _517 = ((_510 * _346) + _462) / _462;
    vec4 _537 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_377 + (_510 * _439)) / _517) + 0.5) + _471) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_380 + (_510 * _440)) / _517) + 0.5) + _473) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[8u].w));
    float _539 = _537.x;
    float _546 = (_539 * ((_489.x * cbMtdParam._m0[10u].x) - _418)) + _418;
    float _547 = (_539 * ((_489.y * cbMtdParam._m0[10u].y) - _419)) + _419;
    float _548 = (_539 * ((_489.z * cbMtdParam._m0[10u].z) - _420)) + _420;
    float _2986 = isnan(0.0) ? _546 : (isnan(_546) ? 0.0 : max(_546, 0.0));
    float _2997 = isnan(0.0) ? _547 : (isnan(_547) ? 0.0 : max(_547, 0.0));
    float _3008 = isnan(0.0) ? _548 : (isnan(_548) ? 0.0 : max(_548, 0.0));
    float _567 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _571 = inversesqrt(dot(vec3(_265, _266, _267), vec3(_265, _266, _267)));
    float _572 = _265 * _571;
    float _573 = _266 * _571;
    float _574 = _267 * _571;
    vec4 _579 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _581 = _579.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _677 = sqrt(((_265 * _265) + (_266 * _266)) + (_267 * _267));
        float _683 = (cbMatDynParam._m0[5u].x * _677) + cbMatDynParam._m0[5u].y;
        float _3019 = isnan(0.0) ? _683 : (isnan(_683) ? 0.0 : max(_683, 0.0));
        float _684 = isnan(1.0) ? _3019 : (isnan(_3019) ? 1.0 : min(_3019, 1.0));
        float _688 = (cbMatDynParam._m0[5u].z * _677) + cbMatDynParam._m0[5u].w;
        float _3030 = isnan(0.0) ? _688 : (isnan(_688) ? 0.0 : max(_688, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3030 : (isnan(_3030) ? 1.0 : min(_3030, 1.0))) - _684)) + _684) < ((_581 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _593 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _594 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _607 = uint(roundEven(NORMAL.w)) * 13u;
    uint _609 = _607 + 9u;
    uint _610 = _609 + uint(cbMatDynParam._m0[0u].w);
    float _616 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _2986 : (isnan(_2986) ? 1.0 : min(_2986, 1.0)))) * cbInstanceData._m0[_610].x;
    float _617 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _2997 : (isnan(_2997) ? 1.0 : min(_2997, 1.0)))) * cbInstanceData._m0[_610].y;
    float _618 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3008 : (isnan(_3008) ? 1.0 : min(_3008, 1.0)))) * cbInstanceData._m0[_610].z;
    float _3041 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _619 = isnan(1.0) ? _3041 : (isnan(_3041) ? 1.0 : min(_3041, 1.0));
    float _3052 = isnan(0.0) ? _617 : (isnan(_617) ? 0.0 : max(_617, 0.0));
    float _620 = isnan(1.0) ? _3052 : (isnan(_3052) ? 1.0 : min(_3052, 1.0));
    float _3063 = isnan(0.0) ? _618 : (isnan(_618) ? 0.0 : max(_618, 0.0));
    float _621 = isnan(1.0) ? _3063 : (isnan(_3063) ? 1.0 : min(_3063, 1.0));
    vec4 _630 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _593, cbSceneParam._m0[86u].y * _594));
    float _633 = _630.x * TEXCOORD_4.z;
    float _634 = (-0.0) - _572;
    float _635 = (-0.0) - _573;
    float _636 = (-0.0) - _574;
    float _658 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _662 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _666 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _962;
    float _964;
    float _965;
    float _966;
    float _967;
    float _968;
    float _969;
    float _970;
    float _971;
    float _972;
    float _973;
    float _974;
    float _975;
    float _976;
    float _977;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _750 = (cbModelParam._m0[37u].x * ((((fma(_666, cbModelParam._m0[26u].z, fma(_662, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _658)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _752 = (cbModelParam._m0[37u].y * ((((fma(_666, cbModelParam._m0[27u].z, fma(_662, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _658)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _753 = (((((fma(_666, cbModelParam._m0[28u].z, fma(_662, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _658)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _756 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_750, _752, _753), 0.0);
        vec4 _763 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_750, _752, _753), 0.0);
        vec4 _770 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_750, _752, _753), 0.0);
        vec4 _777 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_750, _752, _753), 0.0);
        float _790 = exp2((_756.w + (-0.5)) * 20.0) * 2.0;
        float _791 = _790 * (_756.x + (-0.5));
        float _792 = _790 * (_756.y + (-0.5));
        float _793 = _790 * (_756.z + (-0.5));
        float _800 = exp2((_763.w + (-0.5)) * 20.0) * 2.0;
        float _801 = _800 * (_763.x + (-0.5));
        float _802 = _800 * (_763.y + (-0.5));
        float _803 = _800 * (_763.z + (-0.5));
        float _810 = exp2((_770.w + (-0.5)) * 20.0) * 2.0;
        float _811 = _810 * (_770.x + (-0.5));
        float _812 = _810 * (_770.y + (-0.5));
        float _813 = _810 * (_770.z + (-0.5));
        float _820 = exp2((_777.w + (-0.5)) * 20.0) * 2.0;
        float _821 = _820 * (_777.x + (-0.5));
        float _822 = _820 * (_777.y + (-0.5));
        float _823 = _820 * (_777.z + (-0.5));
        float _824 = isnan(0.0) ? _821 : (isnan(_821) ? 0.0 : max(_821, 0.0));
        float _825 = isnan(0.0) ? _822 : (isnan(_822) ? 0.0 : max(_822, 0.0));
        float _826 = isnan(0.0) ? _823 : (isnan(_823) ? 0.0 : max(_823, 0.0));
        float _827 = _791 * 0.5;
        float _828 = _801 * 0.5;
        float _829 = _811 * 0.5;
        float _830 = dot(vec3(_827, _828, _829), vec3(_827, _828, _829));
        float _835 = (_830 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_830);
        float _844 = (dot(vec3(0.0), vec3(_835 * _827, _835 * _828, _835 * _829)) + 1.0) * 0.5;
        float _3089 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _854 = sqrt(((_828 * _828) + (_827 * _827)) + (_829 * _829)) / (_824 + 9.9999997473787516355514526367188e-06);
        float _3100 = isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0));
        float _855 = isnan(1.0) ? _3100 : (isnan(_3100) ? 1.0 : min(_3100, 1.0));
        float _856 = _855 * 2.0;
        float _860 = (1.0 - _855) / (_855 + 1.0);
        float _3111 = isnan(0.0) ? _860 : (isnan(_860) ? 0.0 : max(_860, 0.0));
        float _861 = isnan(1.0) ? _3111 : (isnan(_3111) ? 1.0 : min(_3111, 1.0));
        float _870 = ((((1.0 - _861) * (_856 + 2.0)) * exp2(log2(isnan(1.0) ? _3089 : (isnan(_3089) ? 1.0 : min(_3089, 1.0))) * (_856 + 1.0))) + _861) * _824;
        float _871 = _792 * 0.5;
        float _872 = _802 * 0.5;
        float _873 = _812 * 0.5;
        float _874 = dot(vec3(_871, _872, _873), vec3(_871, _872, _873));
        float _879 = (_874 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_874);
        float _887 = (dot(vec3(0.0), vec3(_879 * _871, _879 * _872, _879 * _873)) + 1.0) * 0.5;
        float _3122 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _896 = sqrt(((_872 * _872) + (_871 * _871)) + (_873 * _873)) / (_825 + 9.9999997473787516355514526367188e-06);
        float _3133 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
        float _897 = isnan(1.0) ? _3133 : (isnan(_3133) ? 1.0 : min(_3133, 1.0));
        float _898 = _897 * 2.0;
        float _902 = (1.0 - _897) / (_897 + 1.0);
        float _3144 = isnan(0.0) ? _902 : (isnan(_902) ? 0.0 : max(_902, 0.0));
        float _903 = isnan(1.0) ? _3144 : (isnan(_3144) ? 1.0 : min(_3144, 1.0));
        float _912 = ((((1.0 - _903) * (_898 + 2.0)) * exp2(log2(isnan(1.0) ? _3122 : (isnan(_3122) ? 1.0 : min(_3122, 1.0))) * (_898 + 1.0))) + _903) * _825;
        float _913 = _793 * 0.5;
        float _914 = _803 * 0.5;
        float _915 = _813 * 0.5;
        float _916 = dot(vec3(_913, _914, _915), vec3(_913, _914, _915));
        float _921 = (_916 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_916);
        float _929 = (dot(vec3(0.0), vec3(_921 * _913, _921 * _914, _921 * _915)) + 1.0) * 0.5;
        float _3155 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _938 = sqrt(((_914 * _914) + (_913 * _913)) + (_915 * _915)) / (_826 + 9.9999997473787516355514526367188e-06);
        float _3166 = isnan(0.0) ? _938 : (isnan(_938) ? 0.0 : max(_938, 0.0));
        float _939 = isnan(1.0) ? _3166 : (isnan(_3166) ? 1.0 : min(_3166, 1.0));
        float _940 = _939 * 2.0;
        float _944 = (1.0 - _939) / (_939 + 1.0);
        float _3177 = isnan(0.0) ? _944 : (isnan(_944) ? 0.0 : max(_944, 0.0));
        float _945 = isnan(1.0) ? _3177 : (isnan(_3177) ? 1.0 : min(_3177, 1.0));
        float _954 = ((((1.0 - _945) * (_940 + 2.0)) * exp2(log2(isnan(1.0) ? _3155 : (isnan(_3155) ? 1.0 : min(_3155, 1.0))) * (_940 + 1.0))) + _945) * _826;
        _962 = _793;
        _964 = _792;
        _965 = _791;
        _966 = _803;
        _967 = _802;
        _968 = _801;
        _969 = _813;
        _970 = _812;
        _971 = _811;
        _972 = _826;
        _973 = _825;
        _974 = _824;
        _975 = cbModelParam._m0[36u].z * (isnan(0.0) ? _870 : (isnan(_870) ? 0.0 : max(_870, 0.0)));
        _976 = cbModelParam._m0[36u].z * (isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0)));
        _977 = cbModelParam._m0[36u].z * (isnan(0.0) ? _954 : (isnan(_954) ? 0.0 : max(_954, 0.0)));
    }
    else
    {
        _962 = _963;
        _964 = _963;
        _965 = _963;
        _966 = _963;
        _967 = _963;
        _968 = _963;
        _969 = _963;
        _970 = _963;
        _971 = _963;
        _972 = _963;
        _973 = _963;
        _974 = _963;
        _975 = 0.0;
        _976 = 0.0;
        _977 = 0.0;
    }
    float _1241;
    float _1242;
    float _1243;
    float _1244;
    float _1245;
    float _1246;
    float _1247;
    float _1248;
    float _1249;
    float _1250;
    float _1251;
    float _1252;
    float _1253;
    float _1254;
    float _1255;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1034 = (cbModelParam._m0[38u].x * ((((fma(_666, cbModelParam._m0[30u].z, fma(_662, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _658)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1035 = (cbModelParam._m0[38u].y * ((((fma(_666, cbModelParam._m0[31u].z, fma(_662, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _658)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _1036 = (((((fma(_666, cbModelParam._m0[32u].z, fma(_662, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _658)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _1038 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1034, _1035, _1036), 0.0);
        vec4 _1045 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1034, _1035, _1036), 0.0);
        vec4 _1052 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1034, _1035, _1036), 0.0);
        vec4 _1059 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1034, _1035, _1036), 0.0);
        float _1071 = exp2((_1038.w + (-0.5)) * 20.0) * 2.0;
        float _1072 = _1071 * (_1038.x + (-0.5));
        float _1073 = _1071 * (_1038.y + (-0.5));
        float _1074 = _1071 * (_1038.z + (-0.5));
        float _1081 = exp2((_1045.w + (-0.5)) * 20.0) * 2.0;
        float _1082 = _1081 * (_1045.x + (-0.5));
        float _1083 = _1081 * (_1045.y + (-0.5));
        float _1084 = _1081 * (_1045.z + (-0.5));
        float _1091 = exp2((_1052.w + (-0.5)) * 20.0) * 2.0;
        float _1092 = _1091 * (_1052.x + (-0.5));
        float _1093 = _1091 * (_1052.y + (-0.5));
        float _1094 = _1091 * (_1052.z + (-0.5));
        float _1101 = exp2((_1059.w + (-0.5)) * 20.0) * 2.0;
        float _1102 = _1101 * (_1059.x + (-0.5));
        float _1103 = _1101 * (_1059.y + (-0.5));
        float _1104 = _1101 * (_1059.z + (-0.5));
        float _1105 = isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0));
        float _1106 = isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0));
        float _1107 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1108 = _1072 * 0.5;
        float _1109 = _1082 * 0.5;
        float _1110 = _1092 * 0.5;
        float _1111 = dot(vec3(_1108, _1109, _1110), vec3(_1108, _1109, _1110));
        float _1116 = (_1111 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1111);
        float _1124 = (dot(vec3(0.0), vec3(_1116 * _1108, _1116 * _1109, _1116 * _1110)) + 1.0) * 0.5;
        float _3218 = isnan(0.0) ? _1124 : (isnan(_1124) ? 0.0 : max(_1124, 0.0));
        float _1133 = sqrt(((_1109 * _1109) + (_1108 * _1108)) + (_1110 * _1110)) / (_1105 + 9.9999997473787516355514526367188e-06);
        float _3229 = isnan(0.0) ? _1133 : (isnan(_1133) ? 0.0 : max(_1133, 0.0));
        float _1134 = isnan(1.0) ? _3229 : (isnan(_3229) ? 1.0 : min(_3229, 1.0));
        float _1135 = _1134 * 2.0;
        float _1139 = (1.0 - _1134) / (_1134 + 1.0);
        float _3240 = isnan(0.0) ? _1139 : (isnan(_1139) ? 0.0 : max(_1139, 0.0));
        float _1140 = isnan(1.0) ? _3240 : (isnan(_3240) ? 1.0 : min(_3240, 1.0));
        float _1149 = ((((1.0 - _1140) * (_1135 + 2.0)) * exp2(log2(isnan(1.0) ? _3218 : (isnan(_3218) ? 1.0 : min(_3218, 1.0))) * (_1135 + 1.0))) + _1140) * _1105;
        float _1150 = _1073 * 0.5;
        float _1151 = _1083 * 0.5;
        float _1152 = _1093 * 0.5;
        float _1153 = dot(vec3(_1150, _1151, _1152), vec3(_1150, _1151, _1152));
        float _1158 = (_1153 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1153);
        float _1166 = (dot(vec3(0.0), vec3(_1158 * _1150, _1158 * _1151, _1158 * _1152)) + 1.0) * 0.5;
        float _3251 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1175 = sqrt(((_1151 * _1151) + (_1150 * _1150)) + (_1152 * _1152)) / (_1106 + 9.9999997473787516355514526367188e-06);
        float _3262 = isnan(0.0) ? _1175 : (isnan(_1175) ? 0.0 : max(_1175, 0.0));
        float _1176 = isnan(1.0) ? _3262 : (isnan(_3262) ? 1.0 : min(_3262, 1.0));
        float _1177 = _1176 * 2.0;
        float _1181 = (1.0 - _1176) / (_1176 + 1.0);
        float _3273 = isnan(0.0) ? _1181 : (isnan(_1181) ? 0.0 : max(_1181, 0.0));
        float _1182 = isnan(1.0) ? _3273 : (isnan(_3273) ? 1.0 : min(_3273, 1.0));
        float _1191 = ((((1.0 - _1182) * (_1177 + 2.0)) * exp2(log2(isnan(1.0) ? _3251 : (isnan(_3251) ? 1.0 : min(_3251, 1.0))) * (_1177 + 1.0))) + _1182) * _1106;
        float _1192 = _1074 * 0.5;
        float _1193 = _1084 * 0.5;
        float _1194 = _1094 * 0.5;
        float _1195 = dot(vec3(_1192, _1193, _1194), vec3(_1192, _1193, _1194));
        float _1200 = (_1195 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1195);
        float _1208 = (dot(vec3(0.0), vec3(_1200 * _1192, _1200 * _1193, _1200 * _1194)) + 1.0) * 0.5;
        float _3284 = isnan(0.0) ? _1208 : (isnan(_1208) ? 0.0 : max(_1208, 0.0));
        float _1217 = sqrt(((_1193 * _1193) + (_1192 * _1192)) + (_1194 * _1194)) / (_1107 + 9.9999997473787516355514526367188e-06);
        float _3295 = isnan(0.0) ? _1217 : (isnan(_1217) ? 0.0 : max(_1217, 0.0));
        float _1218 = isnan(1.0) ? _3295 : (isnan(_3295) ? 1.0 : min(_3295, 1.0));
        float _1219 = _1218 * 2.0;
        float _1223 = (1.0 - _1218) / (_1218 + 1.0);
        float _3306 = isnan(0.0) ? _1223 : (isnan(_1223) ? 0.0 : max(_1223, 0.0));
        float _1224 = isnan(1.0) ? _3306 : (isnan(_3306) ? 1.0 : min(_3306, 1.0));
        float _1233 = ((((1.0 - _1224) * (_1219 + 2.0)) * exp2(log2(isnan(1.0) ? _3284 : (isnan(_3284) ? 1.0 : min(_3284, 1.0))) * (_1219 + 1.0))) + _1224) * _1107;
        _1241 = _1074;
        _1242 = _1073;
        _1243 = _1072;
        _1244 = _1084;
        _1245 = _1083;
        _1246 = _1082;
        _1247 = _1094;
        _1248 = _1093;
        _1249 = _1092;
        _1250 = _1107;
        _1251 = _1106;
        _1252 = _1105;
        _1253 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1149 : (isnan(_1149) ? 0.0 : max(_1149, 0.0)));
        _1254 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0)));
        _1255 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0)));
    }
    else
    {
        _1241 = _963;
        _1242 = _963;
        _1243 = _963;
        _1244 = _963;
        _1245 = _963;
        _1246 = _963;
        _1247 = _963;
        _1248 = _963;
        _1249 = _963;
        _1250 = _963;
        _1251 = _963;
        _1252 = _963;
        _1253 = 0.0;
        _1254 = 0.0;
        _1255 = 0.0;
    }
    float _1265 = (cbModelParam._m0[1u].x * (_1253 - _975)) + _975;
    float _1266 = (cbModelParam._m0[1u].x * (_1254 - _976)) + _976;
    float _1267 = (cbModelParam._m0[1u].x * (_1255 - _977)) + _977;
    float _1288 = fma(_1267, cbSceneParam._m0[89u].z, fma(_1266, cbSceneParam._m0[89u].y, _1265 * cbSceneParam._m0[89u].x));
    float _1291 = fma(_1267, cbSceneParam._m0[90u].z, fma(_1266, cbSceneParam._m0[90u].y, _1265 * cbSceneParam._m0[90u].x));
    float _1294 = fma(_1267, cbSceneParam._m0[91u].z, fma(_1266, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1265));
    float _1309 = _572 * (-0.5);
    float _1310 = _573 * (-0.5);
    float _1311 = _574 * (-0.5);
    float _1312 = dot(vec4(_1309, _1310, _1311, 1.0), vec4(_1243, _1246, _1249, _1252));
    float _1315 = dot(vec4(_1309, _1310, _1311, 1.0), vec4(_1242, _1245, _1248, _1251));
    float _1318 = dot(vec4(_1309, _1310, _1311, 1.0), vec4(_1241, _1244, _1247, _1250));
    float _1352;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1325 = dot(vec4(_1309, _1310, _1311, 1.0), vec4(_962, _966, _969, _972));
        float _1329 = dot(vec4(_1309, _1310, _1311, 1.0), vec4(_964, _967, _970, _973));
        float _1333 = dot(vec4(_1309, _1310, _1311, 1.0), vec4(_965, _968, _971, _974));
        float _1340 = dot(vec4(cbModelParam._m0[39u]), vec4(_1309, _1310, _1311, 1.0));
        _1352 = dot(vec3(isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0)), isnan(0.0) ? _1329 : (isnan(_1329) ? 0.0 : max(_1329, 0.0)), isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1340) ? 0.0 : (isnan(0.0) ? _1340 : max(0.0, _1340))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1352 = 1.0;
    }
    float _1363;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1354 = dot(vec4(cbModelParam._m0[40u]), vec4(_1309, _1310, _1311, 1.0));
        _1363 = dot(vec3(isnan(0.0) ? _1312 : (isnan(_1312) ? 0.0 : max(_1312, 0.0)), isnan(0.0) ? _1315 : (isnan(_1315) ? 0.0 : max(_1315, 0.0)), isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1354) ? 0.0 : (isnan(0.0) ? _1354 : max(0.0, _1354))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1363 = 1.0;
    }
    float _1367 = (_1363 * cbModelParam._m0[1u].x) + (_1352 * (1.0 - cbModelParam._m0[1u].x));
    float _1376 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1459;
    float _1461;
    float _1463;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1426 = fma(_666, cbModelParam._m0[13u].z, fma(_662, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _658)) + cbModelParam._m0[13u].w;
        float _1430 = fma(_666, cbModelParam._m0[14u].z, fma(_662, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _658)) + cbModelParam._m0[14u].w;
        float _1434 = fma(_666, cbModelParam._m0[15u].z, fma(_662, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _658)) + cbModelParam._m0[15u].w;
        float _1437 = fma(_636, cbModelParam._m0[13u].z, fma(_635, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _634));
        float _1440 = fma(_636, cbModelParam._m0[14u].z, fma(_635, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _634));
        float _1443 = fma(_636, cbModelParam._m0[15u].z, fma(_635, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _634));
        float _1469;
        if (_1437 > 0.0)
        {
            _1469 = abs((1.0 - _1426) / _1437);
        }
        else
        {
            float frontier_phi_41_39_ladder;
            if (_1437 < 0.0)
            {
                frontier_phi_41_39_ladder = abs((_1426 + 1.0) / _1437);
            }
            else
            {
                frontier_phi_41_39_ladder = 5000.0;
            }
            _1469 = frontier_phi_41_39_ladder;
        }
        float _1790;
        if (_1440 > 0.0)
        {
            _1790 = abs((1.0 - _1430) / _1440);
        }
        else
        {
            float frontier_phi_50_46_ladder;
            if (_1440 < 0.0)
            {
                frontier_phi_50_46_ladder = abs((_1430 + 1.0) / _1440);
            }
            else
            {
                frontier_phi_50_46_ladder = 5000.0;
            }
            _1790 = frontier_phi_50_46_ladder;
        }
        float _2101;
        if (_1443 > 0.0)
        {
            _2101 = abs((1.0 - _1434) / _1443);
        }
        else
        {
            float frontier_phi_64_57_ladder;
            if (_1443 < 0.0)
            {
                frontier_phi_64_57_ladder = abs((_1434 + 1.0) / _1443);
            }
            else
            {
                frontier_phi_64_57_ladder = 5000.0;
            }
            _2101 = frontier_phi_64_57_ladder;
        }
        float _2103 = isnan(_1790) ? _1469 : (isnan(_1469) ? _1790 : min(_1469, _1790));
        float _2104 = isnan(_2101) ? _2103 : (isnan(_2103) ? _2101 : min(_2103, _2101));
        float _2108 = (_2104 * _1437) + _1426;
        float _2109 = (_2104 * _1440) + _1430;
        float _2110 = (_2104 * _1443) + _1434;
        float _2111 = _2104 * 9.9999997473787516355514526367188e-05;
        float _2112 = (-1.0) - _2111;
        float _2114 = _2111 + 1.0;
        float frontier_phi_40_64_ladder;
        float frontier_phi_40_64_ladder_1;
        float frontier_phi_40_64_ladder_2;
        if ((_2110 > _2114) || ((_2110 < _2112) || ((_2109 > _2114) || ((_2109 < _2112) || ((_2108 < _2112) || (_2108 > _2114))))))
        {
            frontier_phi_40_64_ladder = 0.0;
            frontier_phi_40_64_ladder_1 = 0.0;
            frontier_phi_40_64_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2249 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2110, cbModelParam._m0[9u].z, fma(_2109, cbModelParam._m0[9u].y, _2108 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2110, cbModelParam._m0[10u].z, fma(_2109, cbModelParam._m0[10u].y, _2108 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2110, cbModelParam._m0[11u].z, fma(_2109, cbModelParam._m0[11u].y, _2108 * cbModelParam._m0[11u].x))), _1376);
            frontier_phi_40_64_ladder = _2249.z * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_1 = _2249.y * cbModelParam._m0[1u].y;
            frontier_phi_40_64_ladder_2 = _2249.x * cbModelParam._m0[1u].y;
        }
        _1459 = frontier_phi_40_64_ladder_2;
        _1461 = frontier_phi_40_64_ladder_1;
        _1463 = frontier_phi_40_64_ladder;
    }
    else
    {
        vec4 _1447 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_634, _635, _636), _1376);
        _1459 = _1447.x * cbModelParam._m0[1u].y;
        _1461 = _1447.y * cbModelParam._m0[1u].y;
        _1463 = _1447.z * cbModelParam._m0[1u].y;
    }
    float _1466 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1554;
    float _1556;
    float _1558;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1518 = fma(_666, cbModelParam._m0[21u].z, fma(_662, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _658)) + cbModelParam._m0[21u].w;
        float _1522 = fma(_666, cbModelParam._m0[22u].z, fma(_662, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _658)) + cbModelParam._m0[22u].w;
        float _1526 = fma(_666, cbModelParam._m0[23u].z, fma(_662, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _658)) + cbModelParam._m0[23u].w;
        float _1529 = fma(_636, cbModelParam._m0[21u].z, fma(_635, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _634));
        float _1532 = fma(_636, cbModelParam._m0[22u].z, fma(_635, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _634));
        float _1535 = fma(_636, cbModelParam._m0[23u].z, fma(_635, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _634));
        float _1795;
        if (_1529 > 0.0)
        {
            _1795 = abs((1.0 - _1518) / _1529);
        }
        else
        {
            float frontier_phi_52_48_ladder;
            if (_1529 < 0.0)
            {
                frontier_phi_52_48_ladder = abs((_1518 + 1.0) / _1529);
            }
            else
            {
                frontier_phi_52_48_ladder = 5000.0;
            }
            _1795 = frontier_phi_52_48_ladder;
        }
        float _2127;
        if (_1532 > 0.0)
        {
            _2127 = abs((1.0 - _1522) / _1532);
        }
        else
        {
            float frontier_phi_66_59_ladder;
            if (_1532 < 0.0)
            {
                frontier_phi_66_59_ladder = abs((_1522 + 1.0) / _1532);
            }
            else
            {
                frontier_phi_66_59_ladder = 5000.0;
            }
            _2127 = frontier_phi_66_59_ladder;
        }
        float _2314;
        if (_1535 > 0.0)
        {
            _2314 = abs((1.0 - _1526) / _1535);
        }
        else
        {
            float frontier_phi_84_77_ladder;
            if (_1535 < 0.0)
            {
                frontier_phi_84_77_ladder = abs((_1526 + 1.0) / _1535);
            }
            else
            {
                frontier_phi_84_77_ladder = 5000.0;
            }
            _2314 = frontier_phi_84_77_ladder;
        }
        float _2316 = isnan(_2127) ? _1795 : (isnan(_1795) ? _2127 : min(_1795, _2127));
        float _2317 = isnan(_2314) ? _2316 : (isnan(_2316) ? _2314 : min(_2316, _2314));
        float _2321 = (_2317 * _1529) + _1518;
        float _2322 = (_2317 * _1532) + _1522;
        float _2323 = (_2317 * _1535) + _1526;
        float _2324 = _2317 * 9.9999997473787516355514526367188e-05;
        float _2325 = (-1.0) - _2324;
        float _2327 = _2324 + 1.0;
        float frontier_phi_49_84_ladder;
        float frontier_phi_49_84_ladder_1;
        float frontier_phi_49_84_ladder_2;
        if ((_2323 > _2327) || ((_2323 < _2325) || ((_2322 > _2327) || ((_2322 < _2325) || ((_2321 < _2325) || (_2321 > _2327))))))
        {
            frontier_phi_49_84_ladder = 0.0;
            frontier_phi_49_84_ladder_1 = 0.0;
            frontier_phi_49_84_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2515 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2323, cbModelParam._m0[17u].z, fma(_2322, cbModelParam._m0[17u].y, _2321 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2323, cbModelParam._m0[18u].z, fma(_2322, cbModelParam._m0[18u].y, _2321 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2323, cbModelParam._m0[19u].z, fma(_2322, cbModelParam._m0[19u].y, _2321 * cbModelParam._m0[19u].x))), _1466);
            frontier_phi_49_84_ladder = _2515.z * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_1 = _2515.y * cbModelParam._m0[1u].z;
            frontier_phi_49_84_ladder_2 = _2515.x * cbModelParam._m0[1u].z;
        }
        _1554 = frontier_phi_49_84_ladder_2;
        _1556 = frontier_phi_49_84_ladder_1;
        _1558 = frontier_phi_49_84_ladder;
    }
    else
    {
        vec4 _1538 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_634, _635, _636), _1466);
        _1554 = _1538.x * cbModelParam._m0[1u].z;
        _1556 = _1538.y * cbModelParam._m0[1u].z;
        _1558 = _1538.z * cbModelParam._m0[1u].z;
    }
    float _1570 = _633 * 0.01200000010430812835693359375;
    float _1572 = _1570 * ((cbModelParam._m0[1u].w * (_1554 - _1459)) + _1459);
    float _1573 = _1570 * ((cbModelParam._m0[1u].w * (_1556 - _1461)) + _1461);
    float _1574 = _1570 * ((cbModelParam._m0[1u].w * (_1558 - _1463)) + _1463);
    float _1577 = fma(_1574, cbSceneParam._m0[89u].z, fma(_1573, cbSceneParam._m0[89u].y, _1572 * cbSceneParam._m0[89u].x));
    float _1580 = fma(_1574, cbSceneParam._m0[90u].z, fma(_1573, cbSceneParam._m0[90u].y, _1572 * cbSceneParam._m0[90u].x));
    float _1583 = fma(_1574, cbSceneParam._m0[91u].z, fma(_1573, cbSceneParam._m0[91u].y, _1572 * cbSceneParam._m0[91u].x));
    vec4 _1591 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_593, _594));
    float _1593 = _1591.w;
    float _1606 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1593);
    float _1607 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1593);
    float _1608 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1593);
    uvec4 _1612 = floatBitsToUint(cbInstanceData._m0[_607 + 5u]);
    uint _1614 = _1612.x * 14u;
    uint _1615 = _1614 + 13u;
    float _1620 = _633 + (-1.0);
    float _1623 = (cbLight._m0[_1615].x * _1620) + 1.0;
    float _1624 = (cbLight._m0[_1615].y * _1620) + 1.0;
    uint _1625 = _1614 + 5u;
    float _1631 = isnan(1.0) ? _1624 : (isnan(_1624) ? 1.0 : min(_1624, 1.0));
    uint _1635 = _1614 + 4u;
    float _1645 = isnan(1.0) ? _1623 : (isnan(_1623) ? 1.0 : min(_1623, 1.0));
    uint _1649 = _1614 | 1u;
    float _1660 = dot(vec3(cbLight._m0[_1614].xyz), vec3(0.0));
    float _1663 = dot(vec3(cbLight._m0[_1649].xyz), vec3(0.0));
    float _3442 = isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0));
    float _3453 = isnan(0.0) ? _1663 : (isnan(_1663) ? 0.0 : max(_1663, 0.0));
    float _1668 = (isnan(1.0) ? _3442 : (isnan(_3442) ? 1.0 : min(_3442, 1.0))) * 0.3183098733425140380859375;
    float _1670 = (isnan(1.0) ? _3453 : (isnan(_3453) ? 1.0 : min(_3453, 1.0))) * 0.3183098733425140380859375;
    float _1677 = ((cbLight._m0[_1625].x * _1631) * _1670) + (((cbLight._m0[_1635].x * _1606) * _1645) * _1668);
    float _1678 = ((_1631 * cbLight._m0[_1625].y) * _1670) + (((cbLight._m0[_1635].y * _1607) * _1645) * _1668);
    float _1679 = ((_1631 * cbLight._m0[_1625].z) * _1670) + (((cbLight._m0[_1635].z * _1608) * _1645) * _1668);
    uint _1680 = _1614 + 8u;
    float _1686 = cbLight._m0[_1614].x + _572;
    float _1687 = cbLight._m0[_1614].y + _573;
    float _1688 = cbLight._m0[_1614].z + _574;
    float _1692 = inversesqrt(dot(vec3(_1686, _1687, _1688), vec3(_1686, _1687, _1688)));
    float _1696 = dot(vec3(0.0), vec3(cbLight._m0[_1614].xyz));
    float _3464 = isnan(0.0) ? _1696 : (isnan(_1696) ? 0.0 : max(_1696, 0.0));
    float _1699 = isnan(1.0) ? _3464 : (isnan(_3464) ? 1.0 : min(_3464, 1.0));
    float _1700 = dot(vec3(0.0), vec3(_572, _573, _574));
    float _3475 = isnan(0.0) ? _1700 : (isnan(_1700) ? 0.0 : max(_1700, 0.0));
    float _1703 = isnan(1.0) ? _3475 : (isnan(_3475) ? 1.0 : min(_3475, 1.0));
    float _1704 = dot(vec3(cbLight._m0[_1614].xyz), vec3(_1686 * _1692, _1687 * _1692, _1688 * _1692));
    float _3486 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
    float _1715 = (exp2(log2(1.0 - (isnan(1.0) ? _3486 : (isnan(_3486) ? 1.0 : min(_3486, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1721 = (0.5 / ((_1699 + 9.9999999392252902907785028219223e-09) + _1703)) * _1699;
    float _3497 = isnan(0.0) ? _1721 : (isnan(_1721) ? 0.0 : max(_1721, 0.0));
    float _1723 = (isnan(1.0) ? _3497 : (isnan(_3497) ? 1.0 : min(_3497, 1.0))) * 0.31831014156341552734375;
    uint _1737 = _1614 + 9u;
    float _1743 = cbLight._m0[_1649].x + _572;
    float _1744 = cbLight._m0[_1649].y + _573;
    float _1745 = cbLight._m0[_1649].z + _574;
    float _1749 = inversesqrt(dot(vec3(_1743, _1744, _1745), vec3(_1743, _1744, _1745)));
    float _1753 = dot(vec3(0.0), vec3(cbLight._m0[_1649].xyz));
    float _3508 = isnan(0.0) ? _1753 : (isnan(_1753) ? 0.0 : max(_1753, 0.0));
    float _1756 = isnan(1.0) ? _3508 : (isnan(_3508) ? 1.0 : min(_3508, 1.0));
    float _1757 = dot(vec3(cbLight._m0[_1649].xyz), vec3(_1743 * _1749, _1744 * _1749, _1745 * _1749));
    float _3519 = isnan(0.0) ? _1757 : (isnan(_1757) ? 0.0 : max(_1757, 0.0));
    float _1766 = (exp2(log2(1.0 - (isnan(1.0) ? _3519 : (isnan(_3519) ? 1.0 : min(_3519, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1770 = (0.5 / ((_1756 + 9.9999999392252902907785028219223e-09) + _1703)) * _1756;
    float _3530 = isnan(0.0) ? _1770 : (isnan(_1770) ? 0.0 : max(_1770, 0.0));
    float _1772 = (isnan(1.0) ? _3530 : (isnan(_3530) ? 1.0 : min(_3530, 1.0))) * 0.31831014156341552734375;
    float _1782 = (((_1766 * cbLight._m0[_1737].x) * _1772) * _1631) + ((((cbLight._m0[_1680].x * _1606) * _1715) * _1723) * _1645);
    float _1783 = (((_1766 * cbLight._m0[_1737].y) * _1772) * _1631) + ((((cbLight._m0[_1680].y * _1607) * _1715) * _1723) * _1645);
    float _1784 = (((_1766 * cbLight._m0[_1737].z) * _1772) * _1631) + ((((cbLight._m0[_1680].z * _1608) * _1715) * _1723) * _1645);
    float _1900;
    float _1902;
    float _1904;
    float _1906;
    float _1908;
    float _1910;
    if (_1612.y == 0u)
    {
        float _1840 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1841 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1840;
        float _1842 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1840;
        float _1843 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1840;
        uvec4 _1855 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1856 = _1855.x;
        uint _1867 = uint((float(_1855.y) * floor(float(uint(cbSceneParam._m0[85u].y * _594) / _1856))) + floor(float(uint(cbSceneParam._m0[85u].x * _593) / _1856)));
        float _1877 = (log2(_1843 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1878 = isnan(0.0) ? _1877 : (isnan(_1877) ? 0.0 : max(_1877, 0.0));
        uint _1881 = uint(isnan(14.0) ? _1878 : (isnan(_1878) ? 14.0 : min(_1878, 14.0)));
        uvec4 _1886 = texelFetch(g_lightClusterGridBuffer, int(((_1881 << 2u) + (_1867 << 6u)) >> 2u));
        uint _1887 = _1886.x;
        uint _1888 = _1855.z;
        float _1978;
        float _1980;
        float _1982;
        float _1984;
        float _1986;
        float _1988;
        if (((((1u << ((_1888 >> 4u) & 15u)) + 4294967295u) & _1887) == 0u) || ((_1888 & 240u) == 0u))
        {
            _1978 = 0.0;
            _1980 = 0.0;
            _1982 = 0.0;
            _1984 = 0.0;
            _1986 = 0.0;
            _1988 = 0.0;
        }
        else
        {
            float _1979;
            float _1981;
            float _1983;
            float _1985;
            float _1987;
            float _1989;
            float _2161 = 0.0;
            float _2162 = 0.0;
            float _2163 = 0.0;
            float _2164 = 0.0;
            float _2165 = 0.0;
            float _2166 = 0.0;
            uint _2167 = 0u;
            uint _2176;
            bool _2177;
            for (;;)
            {
                _2176 = texelFetch(g_lightClassification, int((((_1881 << 5u) + (_1867 << 9u)) + (_2167 << 2u)) >> 2u)).x;
                _2177 = _2176 == 0u;
                float frontier_phi_79_pred;
                float frontier_phi_79_pred_1;
                float frontier_phi_79_pred_2;
                float frontier_phi_79_pred_3;
                float frontier_phi_79_pred_4;
                float frontier_phi_79_pred_5;
                if (_2177)
                {
                    frontier_phi_79_pred = _2166;
                    frontier_phi_79_pred_1 = _2165;
                    frontier_phi_79_pred_2 = _2164;
                    frontier_phi_79_pred_3 = _2163;
                    frontier_phi_79_pred_4 = _2162;
                    frontier_phi_79_pred_5 = _2161;
                }
                else
                {
                    float _2357;
                    float _2358;
                    float _2359;
                    float _2360;
                    float _2361;
                    float _2362;
                    uint _2363;
                    _2357 = _2161;
                    _2358 = _2162;
                    _2359 = _2163;
                    _2360 = _2164;
                    _2361 = _2165;
                    _2362 = _2166;
                    _2363 = _2176;
                    float _2258;
                    float _2259;
                    float _2260;
                    float _2261;
                    float _2262;
                    float _2263;
                    for (;;)
                    {
                        uint _2367 = uint(findLSB(_2363)) + (_2167 << 5u);
                        uint _2364 = (_2363 + 4294967295u) & _2363;
                        uint _2369 = _2367 * 48u;
                        vec4 _2383 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2369)).x, texelFetch(g_PointLightRenderingBuffer, int(_2369 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2369 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2369 + 3u)).x));
                        uint _2389 = (_2367 * 48u) + 4u;
                        vec4 _2402 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2389)).x, texelFetch(g_PointLightRenderingBuffer, int(_2389 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2389 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2389 + 3u)).x));
                        uint _2408 = (_2367 * 48u) + 8u;
                        vec3 _2419 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2408)).x, texelFetch(g_PointLightRenderingBuffer, int(_2408 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2408 + 2u)).x));
                        float _2423 = _2383.x - _1841;
                        float _2424 = _2383.y - _1842;
                        float _2425 = _2383.z - _1843;
                        float _2426 = dot(vec3(_2423, _2424, _2425), vec3(_2423, _2424, _2425));
                        float _2429 = inversesqrt(_2426);
                        float _2438 = 1.0 - (_2426 * _2383.w);
                        float _3551 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
                        float _2439 = isnan(1.0) ? _3551 : (isnan(_3551) ? 1.0 : min(_3551, 1.0));
                        float _2440 = sqrt(_2426) * _2402.w;
                        float _2443 = 1.39999997615814208984375 / (_2440 + 1.39999997615814208984375);
                        float _2444 = _2443 * _2443;
                        float _2447 = ((1.0 - _2444) * dot(vec3(0.0), vec3(_2429 * _2423, _2429 * _2424, _2429 * _2425))) + _2444;
                        float _2450 = _2440 * _2440;
                        float _2454 = ((isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0))) * _2439) / ((_2450 * 0.699999988079071044921875) + 1.0);
                        float _2458 = (-0.0) - _1841;
                        float _2459 = (-0.0) - _1842;
                        float _2460 = (-0.0) - _1843;
                        float _2464 = inversesqrt(dot(vec3(_2458, _2459, _2460), vec3(_2458, _2459, _2460)));
                        float _2468 = dot(vec3(0.0), vec3(_2464 * _2458, _2464 * _2459, _2464 * _2460));
                        float _3567 = isnan(0.0) ? _2468 : (isnan(_2468) ? 0.0 : max(_2468, 0.0));
                        float _3578 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
                        float _2472 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
                        float _2476 = (0.5 / (((isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0))) + 9.9999999392252902907785028219223e-09) + _2472)) * _2472;
                        float _3589 = isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0));
                        float _2485 = (((isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0))) * 3.1415927410125732421875) / ((_2450 * 2.1991131305694580078125) + 3.141590118408203125)) * _2439;
                        _2261 = (_2454 * _2402.x) + _2360;
                        _2262 = (_2454 * _2402.y) + _2361;
                        _2263 = (_2454 * _2402.z) + _2362;
                        _2258 = (_2485 * _2419.x) + _2357;
                        _2259 = (_2485 * _2419.y) + _2358;
                        _2260 = (_2485 * _2419.z) + _2359;
                        if (_2364 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2357 = _2258;
                            _2358 = _2259;
                            _2359 = _2260;
                            _2360 = _2261;
                            _2361 = _2262;
                            _2362 = _2263;
                            _2363 = _2364;
                        }
                    }
                    frontier_phi_79_pred = _2263;
                    frontier_phi_79_pred_1 = _2262;
                    frontier_phi_79_pred_2 = _2261;
                    frontier_phi_79_pred_3 = _2260;
                    frontier_phi_79_pred_4 = _2259;
                    frontier_phi_79_pred_5 = _2258;
                }
                _1989 = frontier_phi_79_pred;
                _1987 = frontier_phi_79_pred_1;
                _1985 = frontier_phi_79_pred_2;
                _1983 = frontier_phi_79_pred_3;
                _1981 = frontier_phi_79_pred_4;
                _1979 = frontier_phi_79_pred_5;
                uint _2168 = _2167 + 1u;
                if (_2168 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2161 = _1979;
                    _2162 = _1981;
                    _2163 = _1983;
                    _2164 = _1985;
                    _2165 = _1987;
                    _2166 = _1989;
                    _2167 = _2168;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1978 = _1979;
            _1980 = _1981;
            _1982 = _1983;
            _1984 = _1985;
            _1986 = _1987;
            _1988 = _1989;
        }
        uvec4 _1992 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1993 = _1992.z;
        uint _1995 = (_1993 >> 8u) & 15u;
        float _2132;
        float _2134;
        float _2136;
        float _2138;
        float _2140;
        float _2142;
        if (((4294967295u << _1995) & _1887) == 0u)
        {
            _2132 = _1978;
            _2134 = _1980;
            _2136 = _1982;
            _2138 = _1984;
            _2140 = _1986;
            _2142 = _1988;
        }
        else
        {
            float _2157 = inversesqrt(dot(vec3(_1841, _1842, _1843), vec3(_1841, _1842, _1843)));
            float frontier_phi_68_69_ladder;
            float frontier_phi_68_69_ladder_1;
            float frontier_phi_68_69_ladder_2;
            float frontier_phi_68_69_ladder_3;
            float frontier_phi_68_69_ladder_4;
            float frontier_phi_68_69_ladder_5;
            if (_1995 < ((_1993 >> 12u) & 15u))
            {
                float _2133;
                float _2135;
                float _2137;
                float _2139;
                float _2141;
                float _2143;
                float _2340 = _1978;
                float _2341 = _1980;
                float _2342 = _1982;
                float _2343 = _1984;
                float _2344 = _1986;
                float _2345 = _1988;
                uint _2346 = _1995;
                uint _2355;
                bool _2356;
                for (;;)
                {
                    _2355 = texelFetch(g_lightClassification, int((((_1881 << 5u) + (_1867 << 9u)) + (_2346 << 2u)) >> 2u)).x;
                    _2356 = _2355 == 0u;
                    float frontier_phi_93_pred;
                    float frontier_phi_93_pred_1;
                    float frontier_phi_93_pred_2;
                    float frontier_phi_93_pred_3;
                    float frontier_phi_93_pred_4;
                    float frontier_phi_93_pred_5;
                    if (_2356)
                    {
                        frontier_phi_93_pred = _2344;
                        frontier_phi_93_pred_1 = _2343;
                        frontier_phi_93_pred_2 = _2342;
                        frontier_phi_93_pred_3 = _2341;
                        frontier_phi_93_pred_4 = _2340;
                        frontier_phi_93_pred_5 = _2345;
                    }
                    else
                    {
                        float _2520;
                        float _2521;
                        float _2522;
                        float _2523;
                        float _2524;
                        float _2525;
                        float _2769;
                        float _2770;
                        float _2771;
                        float _2772;
                        float _2773;
                        float _2774;
                        float _2533 = _2340;
                        float _2534 = _2341;
                        float _2535 = _2342;
                        float _2536 = _2343;
                        float _2537 = _2344;
                        float _2538 = _2345;
                        uint _2539 = _2355;
                        uint _2540;
                        vec4 _2565;
                        float _2566;
                        vec4 _2581;
                        vec3 _2593;
                        vec4 _2608;
                        vec4 _2623;
                        float _2669;
                        bool _2670;
                        for (;;)
                        {
                            uint _2550 = ((_2346 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2539));
                            _2540 = (_2539 + 4294967295u) & _2539;
                            uint _2552 = _2550 * 40u;
                            _2565 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2552)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2552 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2552 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2552 + 3u)).x));
                            _2566 = _2565.w;
                            uint _2568 = (_2550 * 40u) + 4u;
                            _2581 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2568)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2568 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2568 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2568 + 3u)).x));
                            uint _2583 = (_2550 * 40u) + 8u;
                            _2593 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2583)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2583 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2583 + 2u)).x));
                            uint _2595 = (_2550 * 40u) + 16u;
                            _2608 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2595)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2595 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2595 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2595 + 3u)).x));
                            uint _2610 = (_2550 * 40u) + 20u;
                            _2623 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2610)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2610 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2610 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2610 + 3u)).x));
                            uint _2625 = (_2550 * 40u) + 24u;
                            vec4 _2638 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2625)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2625 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2625 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2625 + 3u)).x));
                            uint _2644 = (_2550 * 40u) + 28u;
                            vec4 _2657 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2644)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2644 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2644 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2644 + 3u)).x));
                            _2669 = fma(_1843, _2657.z, fma(_1842, _2657.y, _2657.x * _1841)) + _2657.w;
                            _2670 = !((fma(_1843, _2638.z, fma(_1842, _2638.y, _2638.x * _1841)) + _2638.w) <= 0.0);
                            float frontier_phi_99_pred;
                            float frontier_phi_99_pred_1;
                            float frontier_phi_99_pred_2;
                            float frontier_phi_99_pred_3;
                            float frontier_phi_99_pred_4;
                            float frontier_phi_99_pred_5;
                            if (_2670)
                            {
                                float _2697 = _2565.x - _1841;
                                float _2698 = _2565.y - _1842;
                                float _2699 = _2565.z - _1843;
                                float _2700 = dot(vec3(_2697, _2698, _2699), vec3(_2697, _2698, _2699));
                                float _2703 = inversesqrt(_2700);
                                float _2704 = _2703 * _2697;
                                float _2705 = _2703 * _2698;
                                float _2706 = _2703 * _2699;
                                float _2710 = 1.0 - (_2700 / (_2566 * _2566));
                                float _3600 = isnan(0.0) ? _2710 : (isnan(_2710) ? 0.0 : max(_2710, 0.0));
                                float _2711 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
                                float _2715 = sqrt(_2700) * _2581.w;
                                float _2717 = 1.39999997615814208984375 / (_2715 + 1.39999997615814208984375);
                                float _2718 = _2717 * _2717;
                                float _2719 = 1.0 - _2718;
                                float _2721 = (_2719 * dot(vec3(_2704, _2705, _2706), vec3(0.0))) + _2718;
                                float _2724 = _2715 * _2715;
                                float _2728 = (fma(_1843, _2608.z, fma(_1842, _2608.y, _2608.x * _1841)) + _2608.w) / _2669;
                                float _2729 = (fma(_1843, _2623.z, fma(_1842, _2623.y, _2623.x * _1841)) + _2623.w) / _2669;
                                float _2733 = 1.0 - dot(vec2(_2728, _2729), vec2(_2728, _2729));
                                float _3616 = isnan(0.0) ? _2733 : (isnan(_2733) ? 0.0 : max(_2733, 0.0));
                                float _2734 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
                                float _2735 = _2734 * (((isnan(0.0) ? _2721 : (isnan(_2721) ? 0.0 : max(_2721, 0.0))) * _2711) / ((_2724 * 0.699999988079071044921875) + 1.0));
                                float _2745 = dot(vec3(0.0), vec3((-0.0) - (_1841 * _2157), (-0.0) - (_1842 * _2157), (-0.0) - (_1843 * _2157)));
                                float _3627 = isnan(0.0) ? _2745 : (isnan(_2745) ? 0.0 : max(_2745, 0.0));
                                float _2753 = (_2719 * dot(vec3(0.0), vec3(_2704, _2705, _2706))) + _2718;
                                float _3638 = isnan(0.0) ? _2753 : (isnan(_2753) ? 0.0 : max(_2753, 0.0));
                                float _2754 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
                                float _2758 = (0.5 / (((isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0))) + 9.9999999392252902907785028219223e-09) + _2754)) * _2754;
                                float _3649 = isnan(0.0) ? _2758 : (isnan(_2758) ? 0.0 : max(_2758, 0.0));
                                float _2765 = (_2734 * _2711) * (((isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0))) * 3.1415927410125732421875) / ((_2724 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_99_pred = _2735 * _2581.z;
                                frontier_phi_99_pred_1 = _2735 * _2581.y;
                                frontier_phi_99_pred_2 = _2735 * _2581.x;
                                frontier_phi_99_pred_3 = _2765 * _2593.z;
                                frontier_phi_99_pred_4 = _2765 * _2593.y;
                                frontier_phi_99_pred_5 = _2765 * _2593.x;
                            }
                            else
                            {
                                frontier_phi_99_pred = 0.0;
                                frontier_phi_99_pred_1 = 0.0;
                                frontier_phi_99_pred_2 = 0.0;
                                frontier_phi_99_pred_3 = 0.0;
                                frontier_phi_99_pred_4 = 0.0;
                                frontier_phi_99_pred_5 = 0.0;
                            }
                            _2774 = frontier_phi_99_pred;
                            _2773 = frontier_phi_99_pred_1;
                            _2772 = frontier_phi_99_pred_2;
                            _2771 = frontier_phi_99_pred_3;
                            _2770 = frontier_phi_99_pred_4;
                            _2769 = frontier_phi_99_pred_5;
                            _2523 = _2772 + _2536;
                            _2524 = _2773 + _2537;
                            _2525 = _2774 + _2538;
                            _2520 = _2769 + _2533;
                            _2521 = _2770 + _2534;
                            _2522 = _2771 + _2535;
                            if (_2540 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2533 = _2520;
                                _2534 = _2521;
                                _2535 = _2522;
                                _2536 = _2523;
                                _2537 = _2524;
                                _2538 = _2525;
                                _2539 = _2540;
                                continue;
                            }
                        }
                        frontier_phi_93_pred = _2524;
                        frontier_phi_93_pred_1 = _2523;
                        frontier_phi_93_pred_2 = _2522;
                        frontier_phi_93_pred_3 = _2521;
                        frontier_phi_93_pred_4 = _2520;
                        frontier_phi_93_pred_5 = _2525;
                    }
                    _2141 = frontier_phi_93_pred;
                    _2139 = frontier_phi_93_pred_1;
                    _2137 = frontier_phi_93_pred_2;
                    _2135 = frontier_phi_93_pred_3;
                    _2133 = frontier_phi_93_pred_4;
                    _2143 = frontier_phi_93_pred_5;
                    uint _2347 = _2346 + 1u;
                    if (_2347 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2340 = _2133;
                        _2341 = _2135;
                        _2342 = _2137;
                        _2343 = _2139;
                        _2344 = _2141;
                        _2345 = _2143;
                        _2346 = _2347;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_68_69_ladder = _2143;
                frontier_phi_68_69_ladder_1 = _2141;
                frontier_phi_68_69_ladder_2 = _2139;
                frontier_phi_68_69_ladder_3 = _2137;
                frontier_phi_68_69_ladder_4 = _2133;
                frontier_phi_68_69_ladder_5 = _2135;
            }
            else
            {
                frontier_phi_68_69_ladder = _1988;
                frontier_phi_68_69_ladder_1 = _1986;
                frontier_phi_68_69_ladder_2 = _1984;
                frontier_phi_68_69_ladder_3 = _1982;
                frontier_phi_68_69_ladder_4 = _1978;
                frontier_phi_68_69_ladder_5 = _1980;
            }
            _2132 = frontier_phi_68_69_ladder_4;
            _2134 = frontier_phi_68_69_ladder_5;
            _2136 = frontier_phi_68_69_ladder_3;
            _2138 = frontier_phi_68_69_ladder_2;
            _2140 = frontier_phi_68_69_ladder_1;
            _2142 = frontier_phi_68_69_ladder;
        }
        float _2147 = isnan(1.0) ? _633 : (isnan(_633) ? 1.0 : min(_633, 1.0));
        _1900 = (_2147 * _2138) + _1677;
        _1902 = (_2147 * _2140) + _1678;
        _1904 = (_2147 * _2142) + _1679;
        _1906 = ((_2132 * 0.039999999105930328369140625) * _2147) + _1782;
        _1908 = ((_2134 * 0.039999999105930328369140625) * _2147) + _1783;
        _1910 = ((_2136 * 0.039999999105930328369140625) * _2147) + _1784;
    }
    else
    {
        _1900 = _1677;
        _1902 = _1678;
        _1904 = _1679;
        _1906 = _1782;
        _1908 = _1783;
        _1910 = _1784;
    }
    float _3665 = isnan(0.0) ? _619 : (isnan(_619) ? 0.0 : max(_619, 0.0));
    float _3676 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _3687 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _1927 = ((isnan(1.0) ? _3665 : (isnan(_3665) ? 1.0 : min(_3665, 1.0))) * (_1900 + ((isnan(0.0) ? _1288 : (isnan(_1288) ? 0.0 : max(_1288, 0.0))) * _633))) + ((_1906 + ((isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0))) * _1367)) * cbPerFrame._m0[3u].x);
    float _1928 = ((isnan(1.0) ? _3676 : (isnan(_3676) ? 1.0 : min(_3676, 1.0))) * (_1902 + ((isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0))) * _633))) + ((_1908 + ((isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0))) * _1367)) * cbPerFrame._m0[3u].x);
    float _1929 = ((isnan(1.0) ? _3687 : (isnan(_3687) ? 1.0 : min(_3687, 1.0))) * (_1904 + ((isnan(0.0) ? _1294 : (isnan(_1294) ? 0.0 : max(_1294, 0.0))) * _633))) + ((_1910 + ((isnan(0.0) ? _1583 : (isnan(_1583) ? 0.0 : max(_1583, 0.0))) * _1367)) * cbPerFrame._m0[3u].x);
    float _1930 = isnan(0.0) ? _1927 : (isnan(_1927) ? 0.0 : max(_1927, 0.0));
    float _1931 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
    float _1932 = isnan(0.0) ? _1929 : (isnan(_1929) ? 0.0 : max(_1929, 0.0));
    uint _1933 = _607 + 6u;
    float _1941 = _593 / cbSceneParam._m0[86u].x;
    float _1942 = _594 / cbSceneParam._m0[86u].y;
    vec4 _1956 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1941, _1942, (log2((isnan(cbSceneParam._m0[77u].w) ? _567 : (isnan(_567) ? cbSceneParam._m0[77u].w : min(_567, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1958 = _1956.x;
    float _1959 = _1956.y;
    float _1960 = _1956.z;
    float _1961 = _1956.w;
    float _2041;
    float _2043;
    float _2045;
    float _2047;
    if (_567 > cbSceneParam._m0[78u].w)
    {
        float _2003 = isnan(_567) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _567 : min(cbSceneParam._m0[80u].w, _567));
        float _2004 = _2003 / _567;
        float _2015 = _2004 * _265;
        float _2016 = _266 * _2004;
        float _2017 = (-0.0) - _2016;
        float _2018 = _2004 * _267;
        float _2020 = (cbSceneParam._m0[77u].w * _2017) / _2003;
        float _2021 = _2020 + cbSceneParam._m0[79u].w;
        float _2022 = cbSceneParam._m0[79u].w - _2016;
        float _2028 = sqrt(((_2015 * _2015) + (_2016 * _2016)) + (_2018 * _2018));
        float _2031 = (1.0 - (cbSceneParam._m0[77u].w / _2003)) * _2028;
        float _2037 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2039 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2271;
        if (abs((_2017 - _2020) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2271 = ((((_2021 > 0.0) ? exp2(_2037 * _2021) : (2.0 - exp2(_2039 * _2021))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2031;
        }
        else
        {
            float _2190 = 1.0 / cbSceneParam._m0[80u].x;
            float _2191 = isnan(_2022) ? _2021 : (isnan(_2021) ? _2022 : max(_2021, _2022));
            float _2192 = isnan(_2022) ? _2021 : (isnan(_2021) ? _2022 : min(_2021, _2022));
            float _2201 = isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : min(_2191, 0.0));
            float _2202 = isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : min(_2192, 0.0));
            _2271 = ((abs(_2028 / _2017) * cbSceneParam._m0[80u].y) * ((((_2201 - _2202) * 2.0) - ((exp2(_2037 * (isnan(0.0) ? _2191 : (isnan(_2191) ? 0.0 : max(_2191, 0.0)))) - exp2(_2037 * (isnan(0.0) ? _2192 : (isnan(_2192) ? 0.0 : max(_2192, 0.0))))) * _2190)) - ((exp2(_2039 * _2201) - exp2(_2039 * _2202)) * _2190))) + (_2031 * cbSceneParam._m0[80u].z);
        }
        vec4 _2273 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1941, _1942, 1.0), 0.0);
        float _2282 = exp2((_2271 * (-1.44269502162933349609375)) * (1.0 - _2273.w));
        float _2283 = log2(_2282);
        float _2299 = log2(_1961);
        _2041 = (exp2(_2299 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2283 * cbSceneParam._m0[78u].x)) * _2273.x) / cbSceneParam._m0[78u].x)) + _1958;
        _2043 = (exp2(_2299 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2283 * cbSceneParam._m0[78u].y)) * _2273.y) / cbSceneParam._m0[78u].y)) + _1959;
        _2045 = (exp2(_2299 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2283 * cbSceneParam._m0[78u].z)) * _2273.z) / cbSceneParam._m0[78u].z)) + _1960;
        _2047 = _2282 * _1961;
    }
    else
    {
        _2041 = _1958;
        _2043 = _1959;
        _2045 = _1960;
        _2047 = _1961;
    }
    bool _2309;
    vec4 _2057;
    vec4 _2080;
    float _2082;
    float _2086;
    float _2087;
    float _2088;
    float _2089;
    bool _2100;
    for (;;)
    {
        _2057 = cbMatDynParam._m0[0u];
        float _2059 = roundEven(_2057.y);
        bool _2060 = _2059 == 3.0;
        float _2062 = log2(_2047);
        float _2069 = exp2(_2062 * cbSceneParam._m0[78u].x) * _1930;
        float _2070 = exp2(_2062 * cbSceneParam._m0[78u].y) * _1931;
        float _2071 = exp2(_2062 * cbSceneParam._m0[78u].z) * _1932;
        float _2078 = _581 + (-0.5);
        _2080 = cbMtdParam._m0[1u];
        _2082 = _2080.y * _2078;
        float _2085 = (_2059 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2086 = _2085 * (_2060 ? _2069 : (_2069 + (cbSceneParam._m0[72u].w * _2041)));
        _2087 = _2085 * (_2060 ? _2070 : (_2070 + (cbSceneParam._m0[72u].w * _2043)));
        _2088 = _2085 * (_2060 ? _2071 : (_2071 + (cbSceneParam._m0[72u].w * _2045)));
        _2089 = _2078 * 0.999000012874603271484375;
        _2100 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2100)
        {
            if ((cbInstanceData._m0[_607 + 7u].x + _2089) < 0.5)
            {
                _2309 = true;
                break;
            }
        }
        uint _2225 = _609 + uint(_2057.w);
        if ((cbInstanceData._m0[_2225].w < 1.0) && ((cbInstanceData._m0[_2225].w + _2089) < 0.5))
        {
            _2309 = true;
            break;
        }
        if ((_2082 + 1.0) < _2080.x)
        {
            _2309 = true;
            break;
        }
        _2309 = false;
        break;
    }
    float _2490;
    if (_2309)
    {
        discard_state = true;
        _2490 = 0.0;
    }
    else
    {
        _2490 = cbInstanceData._m0[_1933].w;
    }
    SV_Target.x = _2086;
    SV_Target.y = _2087;
    SV_Target.z = _2088;
    SV_Target.w = _2490;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1933].w;
    discard_exit();
}


