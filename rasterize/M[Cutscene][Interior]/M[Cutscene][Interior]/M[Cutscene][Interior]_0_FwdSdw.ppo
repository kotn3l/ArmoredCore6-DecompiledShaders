#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 2) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_12;
layout(set = 0, binding = 3) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _396;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _200 = _199 * _192;
    float _201 = _199 * _193;
    float _202 = _199 * _194;
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _211 = _210 * TANGENT.x;
    float _212 = _210 * TANGENT.y;
    float _213 = _210 * TANGENT.z;
    float _258 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _268 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _258);
    float _269 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _258);
    float _270 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _258);
    vec4 _305 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _321 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _328 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _340 = cbMtdParam._m0[24u].w + _268;
    float _341 = cbMtdParam._m0[25u].x + _269;
    float _342 = cbMtdParam._m0[25u].y + _270;
    float _359 = (-0.0) - dot(vec3(_340, _341, _342), vec3(_321 * _200, _321 * _201, _321 * _202));
    float _360 = (-0.0) - dot(vec3(_340, _341, _342), vec3(_328 * _211, _328 * _212, _328 * _213));
    float _361 = (-0.0) - dot(vec3(_340, _341, _342), vec3((-0.0) - (NORMAL.x * _206), (-0.0) - (NORMAL.y * _206), (-0.0) - (NORMAL.z * _206)));
    float _365 = inversesqrt(dot(vec3(_359, _360, _361), vec3(_359, _360, _361)));
    float _366 = _365 * _361;
    float _371 = ((cbMtdParam._m0[21u].z * _359) * _365) + (((_305.x * 2.0) + (-1.0)) * cbMtdParam._m0[22u].x);
    float _372 = ((cbMtdParam._m0[21u].w * _360) * _365) + (((_305.y * 2.0) + (-1.0)) * cbMtdParam._m0[22u].y);
    float _375 = fract(cbMtdParam._m0[21u].z * TEXCOORD.x);
    float _376 = fract(cbMtdParam._m0[21u].w * TEXCOORD.y);
    float _394;
    float _397;
    float _399;
    if (_371 > 0.0)
    {
        float _380 = (1.0 - _375) / _371;
        _394 = _380;
        _397 = ((cbMtdParam._m0[18u].w + 1.0) - fract(_380 * _366)) * 0.16666667163372039794921875;
        _399 = (fract((_380 * _372) + _376) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_371 < 0.0)
        {
            float _395 = ((-0.0) - _375) / _371;
            frontier_phi_3_2_ladder = (fract(_395 * _366) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
            frontier_phi_3_2_ladder_1 = _395;
            frontier_phi_3_2_ladder_2 = (fract((_395 * _372) + _376) * 0.16666667163372039794921875) + 0.666666686534881591796875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _396;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _394 = frontier_phi_3_2_ladder_1;
        _397 = frontier_phi_3_2_ladder;
        _399 = frontier_phi_3_2_ladder_2;
    }
    float _425;
    float _427;
    float _429;
    if (_372 > 0.0)
    {
        float _412 = (1.0 - _376) / _372;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_412 < _394)
        {
            frontier_phi_8_5_ladder = (fract(_412 * _366) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_412 * _371) + _375) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _412;
        }
        else
        {
            frontier_phi_8_5_ladder = _399;
            frontier_phi_8_5_ladder_1 = _397;
            frontier_phi_8_5_ladder_2 = _394;
        }
        _425 = frontier_phi_8_5_ladder_2;
        _427 = frontier_phi_8_5_ladder_1;
        _429 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_372 < 0.0)
        {
            float _426 = ((-0.0) - _376) / _372;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_426 < _394)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_426 * _366) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_426 * _371) + _375) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _426;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _399;
                frontier_phi_8_6_ladder_9_ladder_1 = _397;
                frontier_phi_8_6_ladder_9_ladder_2 = _394;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _399;
            frontier_phi_8_6_ladder_1 = _397;
            frontier_phi_8_6_ladder_2 = _394;
        }
        _425 = frontier_phi_8_6_ladder_2;
        _427 = frontier_phi_8_6_ladder_1;
        _429 = frontier_phi_8_6_ladder;
    }
    float _433 = (_366 > 0.0) ? (cbMtdParam._m0[18u].z / _366) : 5000.0;
    float _446;
    float _447;
    if (_433 < _425)
    {
        _446 = ((_375 + cbMtdParam._m0[18u].w) + (_433 * _371)) * 0.16666667163372039794921875;
        _447 = (((_433 * _372) + _376) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _446 = _427;
        _447 = _429;
    }
    vec4 _449 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_446, _447));
    float _3084 = isnan(0.0) ? cbMtdParam._m0[17u].z : (isnan(cbMtdParam._m0[17u].z) ? 0.0 : max(cbMtdParam._m0[17u].z, 0.0));
    float _463 = isnan(1.0) ? _3084 : (isnan(_3084) ? 1.0 : min(_3084, 1.0));
    float _3095 = isnan(0.0) ? cbMtdParam._m0[17u].y : (isnan(cbMtdParam._m0[17u].y) ? 0.0 : max(cbMtdParam._m0[17u].y, 0.0));
    float _506 = ((_463 - ((1.0 - (isnan(1.0) ? _3095 : (isnan(_3095) ? 1.0 : min(_3095, 1.0)))) * (_463 + 1.0))) + (((cbMtdParam._m0[18u].y * texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[3u].w)).x) + (cbMtdParam._m0[17u].x * texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w)).x)) / cbMtdParam._m0[17u].w)) / _463;
    float _3106 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _507 = isnan(1.0) ? _3106 : (isnan(_3106) ? 1.0 : min(_3106, 1.0));
    float _509 = 3.0 - (_507 * 2.0);
    float _514 = _507 * _507;
    float _522 = (((_514 * (cbMtdParam._m0[15u].x - cbMtdParam._m0[13u].x)) * _509) + cbMtdParam._m0[13u].x) * _449.x;
    float _524 = (((_514 * (cbMtdParam._m0[15u].y - cbMtdParam._m0[13u].y)) * _509) + cbMtdParam._m0[13u].y) * _449.y;
    float _526 = (((_514 * (cbMtdParam._m0[15u].z - cbMtdParam._m0[13u].z)) * _509) + cbMtdParam._m0[13u].z) * _449.z;
    float _3117 = isnan(0.0) ? _522 : (isnan(_522) ? 0.0 : max(_522, 0.0));
    float _3128 = isnan(0.0) ? _524 : (isnan(_524) ? 0.0 : max(_524, 0.0));
    float _3139 = isnan(0.0) ? _526 : (isnan(_526) ? 0.0 : max(_526, 0.0));
    float _545 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _549 = inversesqrt(dot(vec3(_268, _269, _270), vec3(_268, _269, _270)));
    float _550 = _268 * _549;
    float _551 = _269 * _549;
    float _552 = _270 * _549;
    float _558 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _559 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _572 = uint(roundEven(NORMAL.w)) * 13u;
    uint _574 = (_572 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _580 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3117 : (isnan(_3117) ? 1.0 : min(_3117, 1.0)))) * cbInstanceData._m0[_574].x;
    float _581 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3128 : (isnan(_3128) ? 1.0 : min(_3128, 1.0)))) * cbInstanceData._m0[_574].y;
    float _582 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3139 : (isnan(_3139) ? 1.0 : min(_3139, 1.0)))) * cbInstanceData._m0[_574].z;
    float _3150 = isnan(0.0) ? _580 : (isnan(_580) ? 0.0 : max(_580, 0.0));
    float _583 = isnan(1.0) ? _3150 : (isnan(_3150) ? 1.0 : min(_3150, 1.0));
    float _3161 = isnan(0.0) ? _581 : (isnan(_581) ? 0.0 : max(_581, 0.0));
    float _584 = isnan(1.0) ? _3161 : (isnan(_3161) ? 1.0 : min(_3161, 1.0));
    float _3172 = isnan(0.0) ? _582 : (isnan(_582) ? 0.0 : max(_582, 0.0));
    float _585 = isnan(1.0) ? _3172 : (isnan(_3172) ? 1.0 : min(_3172, 1.0));
    vec4 _594 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _558, cbSceneParam._m0[86u].y * _559));
    float _597 = _594.x * TEXCOORD_4.z;
    float _598 = (-0.0) - _550;
    float _599 = (-0.0) - _551;
    float _600 = (-0.0) - _552;
    float _622 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _626 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _630 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _904;
    float _905;
    float _906;
    float _907;
    float _908;
    float _909;
    float _910;
    float _911;
    float _912;
    float _913;
    float _914;
    float _915;
    float _916;
    float _917;
    float _918;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _692 = (cbModelParam._m0[37u].x * ((((fma(_630, cbModelParam._m0[26u].z, fma(_626, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _622)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _694 = (cbModelParam._m0[37u].y * ((((fma(_630, cbModelParam._m0[27u].z, fma(_626, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _622)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _695 = (((((fma(_630, cbModelParam._m0[28u].z, fma(_626, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _622)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _698 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_692, _694, _695), 0.0);
        vec4 _705 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_692, _694, _695), 0.0);
        vec4 _712 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_692, _694, _695), 0.0);
        vec4 _719 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_692, _694, _695), 0.0);
        float _732 = exp2((_698.w + (-0.5)) * 20.0) * 2.0;
        float _733 = _732 * (_698.x + (-0.5));
        float _734 = _732 * (_698.y + (-0.5));
        float _735 = _732 * (_698.z + (-0.5));
        float _742 = exp2((_705.w + (-0.5)) * 20.0) * 2.0;
        float _743 = _742 * (_705.x + (-0.5));
        float _744 = _742 * (_705.y + (-0.5));
        float _745 = _742 * (_705.z + (-0.5));
        float _752 = exp2((_712.w + (-0.5)) * 20.0) * 2.0;
        float _753 = _752 * (_712.x + (-0.5));
        float _754 = _752 * (_712.y + (-0.5));
        float _755 = _752 * (_712.z + (-0.5));
        float _762 = exp2((_719.w + (-0.5)) * 20.0) * 2.0;
        float _763 = _762 * (_719.x + (-0.5));
        float _764 = _762 * (_719.y + (-0.5));
        float _765 = _762 * (_719.z + (-0.5));
        float _766 = isnan(0.0) ? _763 : (isnan(_763) ? 0.0 : max(_763, 0.0));
        float _767 = isnan(0.0) ? _764 : (isnan(_764) ? 0.0 : max(_764, 0.0));
        float _768 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
        float _769 = _733 * 0.5;
        float _770 = _743 * 0.5;
        float _771 = _753 * 0.5;
        float _772 = dot(vec3(_769, _770, _771), vec3(_769, _770, _771));
        float _777 = (_772 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_772);
        float _786 = (dot(vec3(0.0), vec3(_777 * _769, _777 * _770, _777 * _771)) + 1.0) * 0.5;
        float _3198 = isnan(0.0) ? _786 : (isnan(_786) ? 0.0 : max(_786, 0.0));
        float _796 = sqrt(((_770 * _770) + (_769 * _769)) + (_771 * _771)) / (_766 + 9.9999997473787516355514526367188e-06);
        float _3209 = isnan(0.0) ? _796 : (isnan(_796) ? 0.0 : max(_796, 0.0));
        float _797 = isnan(1.0) ? _3209 : (isnan(_3209) ? 1.0 : min(_3209, 1.0));
        float _798 = _797 * 2.0;
        float _802 = (1.0 - _797) / (_797 + 1.0);
        float _3220 = isnan(0.0) ? _802 : (isnan(_802) ? 0.0 : max(_802, 0.0));
        float _803 = isnan(1.0) ? _3220 : (isnan(_3220) ? 1.0 : min(_3220, 1.0));
        float _812 = ((((1.0 - _803) * (_798 + 2.0)) * exp2(log2(isnan(1.0) ? _3198 : (isnan(_3198) ? 1.0 : min(_3198, 1.0))) * (_798 + 1.0))) + _803) * _766;
        float _813 = _734 * 0.5;
        float _814 = _744 * 0.5;
        float _815 = _754 * 0.5;
        float _816 = dot(vec3(_813, _814, _815), vec3(_813, _814, _815));
        float _821 = (_816 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_816);
        float _829 = (dot(vec3(0.0), vec3(_821 * _813, _821 * _814, _821 * _815)) + 1.0) * 0.5;
        float _3231 = isnan(0.0) ? _829 : (isnan(_829) ? 0.0 : max(_829, 0.0));
        float _838 = sqrt(((_814 * _814) + (_813 * _813)) + (_815 * _815)) / (_767 + 9.9999997473787516355514526367188e-06);
        float _3242 = isnan(0.0) ? _838 : (isnan(_838) ? 0.0 : max(_838, 0.0));
        float _839 = isnan(1.0) ? _3242 : (isnan(_3242) ? 1.0 : min(_3242, 1.0));
        float _840 = _839 * 2.0;
        float _844 = (1.0 - _839) / (_839 + 1.0);
        float _3253 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _845 = isnan(1.0) ? _3253 : (isnan(_3253) ? 1.0 : min(_3253, 1.0));
        float _854 = ((((1.0 - _845) * (_840 + 2.0)) * exp2(log2(isnan(1.0) ? _3231 : (isnan(_3231) ? 1.0 : min(_3231, 1.0))) * (_840 + 1.0))) + _845) * _767;
        float _855 = _735 * 0.5;
        float _856 = _745 * 0.5;
        float _857 = _755 * 0.5;
        float _858 = dot(vec3(_855, _856, _857), vec3(_855, _856, _857));
        float _863 = (_858 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_858);
        float _871 = (dot(vec3(0.0), vec3(_863 * _855, _863 * _856, _863 * _857)) + 1.0) * 0.5;
        float _3264 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _880 = sqrt(((_856 * _856) + (_855 * _855)) + (_857 * _857)) / (_768 + 9.9999997473787516355514526367188e-06);
        float _3275 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
        float _881 = isnan(1.0) ? _3275 : (isnan(_3275) ? 1.0 : min(_3275, 1.0));
        float _882 = _881 * 2.0;
        float _886 = (1.0 - _881) / (_881 + 1.0);
        float _3286 = isnan(0.0) ? _886 : (isnan(_886) ? 0.0 : max(_886, 0.0));
        float _887 = isnan(1.0) ? _3286 : (isnan(_3286) ? 1.0 : min(_3286, 1.0));
        float _896 = ((((1.0 - _887) * (_882 + 2.0)) * exp2(log2(isnan(1.0) ? _3264 : (isnan(_3264) ? 1.0 : min(_3264, 1.0))) * (_882 + 1.0))) + _887) * _768;
        _904 = _735;
        _905 = _734;
        _906 = _733;
        _907 = _745;
        _908 = _744;
        _909 = _743;
        _910 = _755;
        _911 = _754;
        _912 = _753;
        _913 = _768;
        _914 = _767;
        _915 = _766;
        _916 = cbModelParam._m0[36u].z * (isnan(0.0) ? _812 : (isnan(_812) ? 0.0 : max(_812, 0.0)));
        _917 = cbModelParam._m0[36u].z * (isnan(0.0) ? _854 : (isnan(_854) ? 0.0 : max(_854, 0.0)));
        _918 = cbModelParam._m0[36u].z * (isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0)));
    }
    else
    {
        _904 = _396;
        _905 = _396;
        _906 = _396;
        _907 = _396;
        _908 = _396;
        _909 = _396;
        _910 = _396;
        _911 = _396;
        _912 = _396;
        _913 = _396;
        _914 = _396;
        _915 = _396;
        _916 = 0.0;
        _917 = 0.0;
        _918 = 0.0;
    }
    float _1179;
    float _1180;
    float _1181;
    float _1182;
    float _1183;
    float _1184;
    float _1185;
    float _1186;
    float _1187;
    float _1188;
    float _1189;
    float _1190;
    float _1191;
    float _1192;
    float _1193;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _972 = (cbModelParam._m0[38u].x * ((((fma(_630, cbModelParam._m0[30u].z, fma(_626, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _622)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _973 = (cbModelParam._m0[38u].y * ((((fma(_630, cbModelParam._m0[31u].z, fma(_626, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _622)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _974 = (((((fma(_630, cbModelParam._m0[32u].z, fma(_626, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _622)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _976 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_972, _973, _974), 0.0);
        vec4 _983 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_972, _973, _974), 0.0);
        vec4 _990 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_972, _973, _974), 0.0);
        vec4 _997 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_972, _973, _974), 0.0);
        float _1009 = exp2((_976.w + (-0.5)) * 20.0) * 2.0;
        float _1010 = _1009 * (_976.x + (-0.5));
        float _1011 = _1009 * (_976.y + (-0.5));
        float _1012 = _1009 * (_976.z + (-0.5));
        float _1019 = exp2((_983.w + (-0.5)) * 20.0) * 2.0;
        float _1020 = _1019 * (_983.x + (-0.5));
        float _1021 = _1019 * (_983.y + (-0.5));
        float _1022 = _1019 * (_983.z + (-0.5));
        float _1029 = exp2((_990.w + (-0.5)) * 20.0) * 2.0;
        float _1030 = _1029 * (_990.x + (-0.5));
        float _1031 = _1029 * (_990.y + (-0.5));
        float _1032 = _1029 * (_990.z + (-0.5));
        float _1039 = exp2((_997.w + (-0.5)) * 20.0) * 2.0;
        float _1040 = _1039 * (_997.x + (-0.5));
        float _1041 = _1039 * (_997.y + (-0.5));
        float _1042 = _1039 * (_997.z + (-0.5));
        float _1043 = isnan(0.0) ? _1040 : (isnan(_1040) ? 0.0 : max(_1040, 0.0));
        float _1044 = isnan(0.0) ? _1041 : (isnan(_1041) ? 0.0 : max(_1041, 0.0));
        float _1045 = isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0));
        float _1046 = _1010 * 0.5;
        float _1047 = _1020 * 0.5;
        float _1048 = _1030 * 0.5;
        float _1049 = dot(vec3(_1046, _1047, _1048), vec3(_1046, _1047, _1048));
        float _1054 = (_1049 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1049);
        float _1062 = (dot(vec3(0.0), vec3(_1054 * _1046, _1054 * _1047, _1054 * _1048)) + 1.0) * 0.5;
        float _3327 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        float _1071 = sqrt(((_1047 * _1047) + (_1046 * _1046)) + (_1048 * _1048)) / (_1043 + 9.9999997473787516355514526367188e-06);
        float _3338 = isnan(0.0) ? _1071 : (isnan(_1071) ? 0.0 : max(_1071, 0.0));
        float _1072 = isnan(1.0) ? _3338 : (isnan(_3338) ? 1.0 : min(_3338, 1.0));
        float _1073 = _1072 * 2.0;
        float _1077 = (1.0 - _1072) / (_1072 + 1.0);
        float _3349 = isnan(0.0) ? _1077 : (isnan(_1077) ? 0.0 : max(_1077, 0.0));
        float _1078 = isnan(1.0) ? _3349 : (isnan(_3349) ? 1.0 : min(_3349, 1.0));
        float _1087 = ((((1.0 - _1078) * (_1073 + 2.0)) * exp2(log2(isnan(1.0) ? _3327 : (isnan(_3327) ? 1.0 : min(_3327, 1.0))) * (_1073 + 1.0))) + _1078) * _1043;
        float _1088 = _1011 * 0.5;
        float _1089 = _1021 * 0.5;
        float _1090 = _1031 * 0.5;
        float _1091 = dot(vec3(_1088, _1089, _1090), vec3(_1088, _1089, _1090));
        float _1096 = (_1091 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1091);
        float _1104 = (dot(vec3(0.0), vec3(_1096 * _1088, _1096 * _1089, _1096 * _1090)) + 1.0) * 0.5;
        float _3360 = isnan(0.0) ? _1104 : (isnan(_1104) ? 0.0 : max(_1104, 0.0));
        float _1113 = sqrt(((_1089 * _1089) + (_1088 * _1088)) + (_1090 * _1090)) / (_1044 + 9.9999997473787516355514526367188e-06);
        float _3371 = isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0));
        float _1114 = isnan(1.0) ? _3371 : (isnan(_3371) ? 1.0 : min(_3371, 1.0));
        float _1115 = _1114 * 2.0;
        float _1119 = (1.0 - _1114) / (_1114 + 1.0);
        float _3382 = isnan(0.0) ? _1119 : (isnan(_1119) ? 0.0 : max(_1119, 0.0));
        float _1120 = isnan(1.0) ? _3382 : (isnan(_3382) ? 1.0 : min(_3382, 1.0));
        float _1129 = ((((1.0 - _1120) * (_1115 + 2.0)) * exp2(log2(isnan(1.0) ? _3360 : (isnan(_3360) ? 1.0 : min(_3360, 1.0))) * (_1115 + 1.0))) + _1120) * _1044;
        float _1130 = _1012 * 0.5;
        float _1131 = _1022 * 0.5;
        float _1132 = _1032 * 0.5;
        float _1133 = dot(vec3(_1130, _1131, _1132), vec3(_1130, _1131, _1132));
        float _1138 = (_1133 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1133);
        float _1146 = (dot(vec3(0.0), vec3(_1138 * _1130, _1138 * _1131, _1138 * _1132)) + 1.0) * 0.5;
        float _3393 = isnan(0.0) ? _1146 : (isnan(_1146) ? 0.0 : max(_1146, 0.0));
        float _1155 = sqrt(((_1131 * _1131) + (_1130 * _1130)) + (_1132 * _1132)) / (_1045 + 9.9999997473787516355514526367188e-06);
        float _3404 = isnan(0.0) ? _1155 : (isnan(_1155) ? 0.0 : max(_1155, 0.0));
        float _1156 = isnan(1.0) ? _3404 : (isnan(_3404) ? 1.0 : min(_3404, 1.0));
        float _1157 = _1156 * 2.0;
        float _1161 = (1.0 - _1156) / (_1156 + 1.0);
        float _3415 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1162 = isnan(1.0) ? _3415 : (isnan(_3415) ? 1.0 : min(_3415, 1.0));
        float _1171 = ((((1.0 - _1162) * (_1157 + 2.0)) * exp2(log2(isnan(1.0) ? _3393 : (isnan(_3393) ? 1.0 : min(_3393, 1.0))) * (_1157 + 1.0))) + _1162) * _1045;
        _1179 = _1012;
        _1180 = _1011;
        _1181 = _1010;
        _1182 = _1022;
        _1183 = _1021;
        _1184 = _1020;
        _1185 = _1032;
        _1186 = _1031;
        _1187 = _1030;
        _1188 = _1045;
        _1189 = _1044;
        _1190 = _1043;
        _1191 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0)));
        _1192 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1129 : (isnan(_1129) ? 0.0 : max(_1129, 0.0)));
        _1193 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1171 : (isnan(_1171) ? 0.0 : max(_1171, 0.0)));
    }
    else
    {
        _1179 = _396;
        _1180 = _396;
        _1181 = _396;
        _1182 = _396;
        _1183 = _396;
        _1184 = _396;
        _1185 = _396;
        _1186 = _396;
        _1187 = _396;
        _1188 = _396;
        _1189 = _396;
        _1190 = _396;
        _1191 = 0.0;
        _1192 = 0.0;
        _1193 = 0.0;
    }
    float _1203 = (cbModelParam._m0[1u].x * (_1191 - _916)) + _916;
    float _1204 = (cbModelParam._m0[1u].x * (_1192 - _917)) + _917;
    float _1205 = (cbModelParam._m0[1u].x * (_1193 - _918)) + _918;
    float _1226 = fma(_1205, cbSceneParam._m0[89u].z, fma(_1204, cbSceneParam._m0[89u].y, _1203 * cbSceneParam._m0[89u].x));
    float _1229 = fma(_1205, cbSceneParam._m0[90u].z, fma(_1204, cbSceneParam._m0[90u].y, _1203 * cbSceneParam._m0[90u].x));
    float _1232 = fma(_1205, cbSceneParam._m0[91u].z, fma(_1204, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1203));
    float _1247 = _550 * (-0.5);
    float _1248 = _551 * (-0.5);
    float _1249 = _552 * (-0.5);
    float _1250 = dot(vec4(_1247, _1248, _1249, 1.0), vec4(_1181, _1184, _1187, _1190));
    float _1253 = dot(vec4(_1247, _1248, _1249, 1.0), vec4(_1180, _1183, _1186, _1189));
    float _1256 = dot(vec4(_1247, _1248, _1249, 1.0), vec4(_1179, _1182, _1185, _1188));
    float _1290;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1263 = dot(vec4(_1247, _1248, _1249, 1.0), vec4(_904, _907, _910, _913));
        float _1267 = dot(vec4(_1247, _1248, _1249, 1.0), vec4(_905, _908, _911, _914));
        float _1271 = dot(vec4(_1247, _1248, _1249, 1.0), vec4(_906, _909, _912, _915));
        float _1278 = dot(vec4(cbModelParam._m0[39u]), vec4(_1247, _1248, _1249, 1.0));
        _1290 = dot(vec3(isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0)), isnan(0.0) ? _1267 : (isnan(_1267) ? 0.0 : max(_1267, 0.0)), isnan(0.0) ? _1263 : (isnan(_1263) ? 0.0 : max(_1263, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1278) ? 0.0 : (isnan(0.0) ? _1278 : max(0.0, _1278))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1290 = 1.0;
    }
    float _1301;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1292 = dot(vec4(cbModelParam._m0[40u]), vec4(_1247, _1248, _1249, 1.0));
        _1301 = dot(vec3(isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0)), isnan(0.0) ? _1253 : (isnan(_1253) ? 0.0 : max(_1253, 0.0)), isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1292) ? 0.0 : (isnan(0.0) ? _1292 : max(0.0, _1292))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1301 = 1.0;
    }
    float _1305 = (_1301 * cbModelParam._m0[1u].x) + (_1290 * (1.0 - cbModelParam._m0[1u].x));
    float _1314 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1396;
    float _1398;
    float _1400;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1363 = fma(_630, cbModelParam._m0[13u].z, fma(_626, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _622)) + cbModelParam._m0[13u].w;
        float _1367 = fma(_630, cbModelParam._m0[14u].z, fma(_626, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _622)) + cbModelParam._m0[14u].w;
        float _1371 = fma(_630, cbModelParam._m0[15u].z, fma(_626, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _622)) + cbModelParam._m0[15u].w;
        float _1374 = fma(_600, cbModelParam._m0[13u].z, fma(_599, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _598));
        float _1377 = fma(_600, cbModelParam._m0[14u].z, fma(_599, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _598));
        float _1380 = fma(_600, cbModelParam._m0[15u].z, fma(_599, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _598));
        float _1406;
        if (_1374 > 0.0)
        {
            _1406 = abs((1.0 - _1363) / _1374);
        }
        else
        {
            float frontier_phi_26_24_ladder;
            if (_1374 < 0.0)
            {
                frontier_phi_26_24_ladder = abs((_1363 + 1.0) / _1374);
            }
            else
            {
                frontier_phi_26_24_ladder = 5000.0;
            }
            _1406 = frontier_phi_26_24_ladder;
        }
        float _1577;
        if (_1377 > 0.0)
        {
            _1577 = abs((1.0 - _1367) / _1377);
        }
        else
        {
            float frontier_phi_35_31_ladder;
            if (_1377 < 0.0)
            {
                frontier_phi_35_31_ladder = abs((_1367 + 1.0) / _1377);
            }
            else
            {
                frontier_phi_35_31_ladder = 5000.0;
            }
            _1577 = frontier_phi_35_31_ladder;
        }
        float _1973;
        if (_1380 > 0.0)
        {
            _1973 = abs((1.0 - _1371) / _1380);
        }
        else
        {
            float frontier_phi_47_42_ladder;
            if (_1380 < 0.0)
            {
                frontier_phi_47_42_ladder = abs((_1371 + 1.0) / _1380);
            }
            else
            {
                frontier_phi_47_42_ladder = 5000.0;
            }
            _1973 = frontier_phi_47_42_ladder;
        }
        float _1975 = isnan(_1577) ? _1406 : (isnan(_1406) ? _1577 : min(_1406, _1577));
        float _1976 = isnan(_1973) ? _1975 : (isnan(_1975) ? _1973 : min(_1975, _1973));
        float _1980 = (_1976 * _1374) + _1363;
        float _1981 = (_1976 * _1377) + _1367;
        float _1982 = (_1976 * _1380) + _1371;
        float _1983 = _1976 * 9.9999997473787516355514526367188e-05;
        float _1985 = (-1.0) - _1983;
        float _1987 = _1983 + 1.0;
        float frontier_phi_25_47_ladder;
        float frontier_phi_25_47_ladder_1;
        float frontier_phi_25_47_ladder_2;
        if ((_1982 > _1987) || ((_1982 < _1985) || ((_1981 > _1987) || ((_1981 < _1985) || ((_1980 < _1985) || (_1980 > _1987))))))
        {
            frontier_phi_25_47_ladder = 0.0;
            frontier_phi_25_47_ladder_1 = 0.0;
            frontier_phi_25_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2216 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1982, cbModelParam._m0[9u].z, fma(_1981, cbModelParam._m0[9u].y, _1980 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1982, cbModelParam._m0[10u].z, fma(_1981, cbModelParam._m0[10u].y, _1980 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1982, cbModelParam._m0[11u].z, fma(_1981, cbModelParam._m0[11u].y, _1980 * cbModelParam._m0[11u].x))), _1314);
            frontier_phi_25_47_ladder = _2216.z * cbModelParam._m0[1u].y;
            frontier_phi_25_47_ladder_1 = _2216.y * cbModelParam._m0[1u].y;
            frontier_phi_25_47_ladder_2 = _2216.x * cbModelParam._m0[1u].y;
        }
        _1396 = frontier_phi_25_47_ladder_2;
        _1398 = frontier_phi_25_47_ladder_1;
        _1400 = frontier_phi_25_47_ladder;
    }
    else
    {
        vec4 _1384 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_598, _599, _600), _1314);
        _1396 = _1384.x * cbModelParam._m0[1u].y;
        _1398 = _1384.y * cbModelParam._m0[1u].y;
        _1400 = _1384.z * cbModelParam._m0[1u].y;
    }
    float _1403 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1492;
    float _1494;
    float _1496;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1456 = fma(_630, cbModelParam._m0[21u].z, fma(_626, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _622)) + cbModelParam._m0[21u].w;
        float _1460 = fma(_630, cbModelParam._m0[22u].z, fma(_626, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _622)) + cbModelParam._m0[22u].w;
        float _1464 = fma(_630, cbModelParam._m0[23u].z, fma(_626, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _622)) + cbModelParam._m0[23u].w;
        float _1467 = fma(_600, cbModelParam._m0[21u].z, fma(_599, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _598));
        float _1470 = fma(_600, cbModelParam._m0[22u].z, fma(_599, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _598));
        float _1473 = fma(_600, cbModelParam._m0[23u].z, fma(_599, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _598));
        float _1582;
        if (_1467 > 0.0)
        {
            _1582 = abs((1.0 - _1456) / _1467);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1467 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1456 + 1.0) / _1467);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1582 = frontier_phi_37_33_ladder;
        }
        float _2000;
        if (_1470 > 0.0)
        {
            _2000 = abs((1.0 - _1460) / _1470);
        }
        else
        {
            float frontier_phi_49_44_ladder;
            if (_1470 < 0.0)
            {
                frontier_phi_49_44_ladder = abs((_1460 + 1.0) / _1470);
            }
            else
            {
                frontier_phi_49_44_ladder = 5000.0;
            }
            _2000 = frontier_phi_49_44_ladder;
        }
        float _2337;
        if (_1473 > 0.0)
        {
            _2337 = abs((1.0 - _1464) / _1473);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1473 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1464 + 1.0) / _1473);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2337 = frontier_phi_61_56_ladder;
        }
        float _2339 = isnan(_2000) ? _1582 : (isnan(_1582) ? _2000 : min(_1582, _2000));
        float _2340 = isnan(_2337) ? _2339 : (isnan(_2339) ? _2337 : min(_2339, _2337));
        float _2344 = (_2340 * _1467) + _1456;
        float _2345 = (_2340 * _1470) + _1460;
        float _2346 = (_2340 * _1473) + _1464;
        float _2347 = _2340 * 9.9999997473787516355514526367188e-05;
        float _2348 = (-1.0) - _2347;
        float _2350 = _2347 + 1.0;
        float frontier_phi_34_61_ladder;
        float frontier_phi_34_61_ladder_1;
        float frontier_phi_34_61_ladder_2;
        if ((_2346 > _2350) || ((_2346 < _2348) || ((_2345 > _2350) || ((_2345 < _2348) || ((_2344 < _2348) || (_2344 > _2350))))))
        {
            frontier_phi_34_61_ladder = 0.0;
            frontier_phi_34_61_ladder_1 = 0.0;
            frontier_phi_34_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2464 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2346, cbModelParam._m0[17u].z, fma(_2345, cbModelParam._m0[17u].y, _2344 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2346, cbModelParam._m0[18u].z, fma(_2345, cbModelParam._m0[18u].y, _2344 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2346, cbModelParam._m0[19u].z, fma(_2345, cbModelParam._m0[19u].y, _2344 * cbModelParam._m0[19u].x))), _1403);
            frontier_phi_34_61_ladder = _2464.z * cbModelParam._m0[1u].z;
            frontier_phi_34_61_ladder_1 = _2464.y * cbModelParam._m0[1u].z;
            frontier_phi_34_61_ladder_2 = _2464.x * cbModelParam._m0[1u].z;
        }
        _1492 = frontier_phi_34_61_ladder_2;
        _1494 = frontier_phi_34_61_ladder_1;
        _1496 = frontier_phi_34_61_ladder;
    }
    else
    {
        vec4 _1476 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_598, _599, _600), _1403);
        _1492 = _1476.x * cbModelParam._m0[1u].z;
        _1494 = _1476.y * cbModelParam._m0[1u].z;
        _1496 = _1476.z * cbModelParam._m0[1u].z;
    }
    float _1508 = _597 * 0.01200000010430812835693359375;
    float _1510 = _1508 * ((cbModelParam._m0[1u].w * (_1492 - _1396)) + _1396);
    float _1511 = _1508 * ((cbModelParam._m0[1u].w * (_1494 - _1398)) + _1398);
    float _1512 = _1508 * ((cbModelParam._m0[1u].w * (_1496 - _1400)) + _1400);
    float _1515 = fma(_1512, cbSceneParam._m0[89u].z, fma(_1511, cbSceneParam._m0[89u].y, _1510 * cbSceneParam._m0[89u].x));
    float _1518 = fma(_1512, cbSceneParam._m0[90u].z, fma(_1511, cbSceneParam._m0[90u].y, _1510 * cbSceneParam._m0[90u].x));
    float _1521 = fma(_1512, cbSceneParam._m0[91u].z, fma(_1511, cbSceneParam._m0[91u].y, _1510 * cbSceneParam._m0[91u].x));
    float _1556 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1560 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1564 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1568 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1569 = _1556 / _1568;
    float _1570 = _1560 / _1568;
    float _1571 = _1564 / _1568;
    float _1719;
    float _1720;
    float _1721;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1598 = ((uint(_1571 > cbSceneParam._m0[59u].y) + uint(_1571 > cbSceneParam._m0[59u].x)) + uint(_1571 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1599 = _1598 + 43u;
        uint _1607 = _1598 + 44u;
        uint _1615 = _1598 + 45u;
        uint _1623 = _1598 + 46u;
        float _1634 = fma(_1568, cbSceneParam._m0[_1599].w, fma(_1564, cbSceneParam._m0[_1599].z, fma(_1560, cbSceneParam._m0[_1599].y, _1556 * cbSceneParam._m0[_1599].x)));
        float _1638 = fma(_1568, cbSceneParam._m0[_1607].w, fma(_1564, cbSceneParam._m0[_1607].z, fma(_1560, cbSceneParam._m0[_1607].y, _1556 * cbSceneParam._m0[_1607].x)));
        float _1646 = fma(_1568, cbSceneParam._m0[_1623].w, fma(_1564, cbSceneParam._m0[_1623].z, fma(_1560, cbSceneParam._m0[_1623].y, _1556 * cbSceneParam._m0[_1623].x)));
        float _1651 = cbSceneParam._m0[33u].z * _1646;
        float _1653 = cbSceneParam._m0[33u].w * _1646;
        float _1656 = fma(_1568, cbSceneParam._m0[_1615].w, fma(_1564, cbSceneParam._m0[_1615].z, fma(_1560, cbSceneParam._m0[_1615].y, _1556 * cbSceneParam._m0[_1615].x))) / _1646;
        float _1704 = (cbSceneParam._m0[33u].x - sqrt(((_1570 * _1570) + (_1569 * _1569)) + (_1571 * _1571))) * cbSceneParam._m0[33u].y;
        float _3541 = isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0));
        float _1712 = (isnan(1.0) ? _3541 : (isnan(_3541) ? 1.0 : min(_3541, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1651 + _1634) / _1646, (_1653 + _1638) / _1646), _1656), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1653 + _1634) / _1646, (_1638 - _1651) / _1646), _1656), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1634 - _1651) / _1646, (_1638 - _1653) / _1646), _1656), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1634 - _1653) / _1646, (_1651 + _1638) / _1646), _1656), 0.0)).x), vec4(0.25)));
        _1719 = 1.0 - (_1712 * cbSceneParam._m0[34u].x);
        _1720 = 1.0 - (_1712 * cbSceneParam._m0[34u].y);
        _1721 = 1.0 - (_1712 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1719 = 1.0;
        _1720 = 1.0;
        _1721 = 1.0;
    }
    float _1785;
    float _1787;
    float _1789;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1773 = fma(_1568, cbSceneParam._m0[63u].w, fma(_1564, cbSceneParam._m0[63u].z, fma(_1560, cbSceneParam._m0[63u].y, _1556 * cbSceneParam._m0[63u].x)));
        float _1774 = fma(_1568, cbSceneParam._m0[60u].w, fma(_1564, cbSceneParam._m0[60u].z, fma(_1560, cbSceneParam._m0[60u].y, _1556 * cbSceneParam._m0[60u].x))) / _1773;
        float _1775 = fma(_1568, cbSceneParam._m0[61u].w, fma(_1564, cbSceneParam._m0[61u].z, fma(_1560, cbSceneParam._m0[61u].y, _1556 * cbSceneParam._m0[61u].x))) / _1773;
        float frontier_phi_46_45_ladder;
        float frontier_phi_46_45_ladder_1;
        float frontier_phi_46_45_ladder_2;
        if ((((_1774 >= cbSceneParam._m0[64u].x) && (_1775 >= cbSceneParam._m0[64u].y)) && (_1774 <= cbSceneParam._m0[64u].z)) && (_1775 <= cbSceneParam._m0[64u].w))
        {
            float _2013 = fma(_1568, cbSceneParam._m0[62u].w, fma(_1564, cbSceneParam._m0[62u].z, fma(_1560, cbSceneParam._m0[62u].y, _1556 * cbSceneParam._m0[62u].x))) / _1773;
            float _2017 = isnan(cbSceneParam._m0[41u].w) ? _2013 : (isnan(_2013) ? cbSceneParam._m0[41u].w : max(_2013, cbSceneParam._m0[41u].w));
            float _2060 = (cbSceneParam._m0[33u].x - sqrt(((_1570 * _1570) + (_1569 * _1569)) + (_1571 * _1571))) * cbSceneParam._m0[33u].y;
            float _3557 = isnan(0.0) ? _2060 : (isnan(_2060) ? 0.0 : max(_2060, 0.0));
            float _2067 = (isnan(1.0) ? _3557 : (isnan(_3557) ? 1.0 : min(_3557, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1774, cbSceneParam._m0[33u].w + _1775), _2017), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1774, _1775 - cbSceneParam._m0[33u].z), _2017), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1774 - cbSceneParam._m0[33u].z, _1775 - cbSceneParam._m0[33u].w), _2017), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1774 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1775), _2017), 0.0)).x), vec4(0.25)));
            float _2071 = 1.0 - (_2067 * cbSceneParam._m0[34u].x);
            float _2072 = 1.0 - (_2067 * cbSceneParam._m0[34u].y);
            float _2073 = 1.0 - (_2067 * cbSceneParam._m0[34u].z);
            frontier_phi_46_45_ladder = isnan(_2073) ? _1721 : (isnan(_1721) ? _2073 : min(_1721, _2073));
            frontier_phi_46_45_ladder_1 = isnan(_2072) ? _1720 : (isnan(_1720) ? _2072 : min(_1720, _2072));
            frontier_phi_46_45_ladder_2 = isnan(_2071) ? _1719 : (isnan(_1719) ? _2071 : min(_1719, _2071));
        }
        else
        {
            frontier_phi_46_45_ladder = _1721;
            frontier_phi_46_45_ladder_1 = _1720;
            frontier_phi_46_45_ladder_2 = _1719;
        }
        _1785 = frontier_phi_46_45_ladder_2;
        _1787 = frontier_phi_46_45_ladder_1;
        _1789 = frontier_phi_46_45_ladder;
    }
    else
    {
        _1785 = _1719;
        _1787 = _1720;
        _1789 = _1721;
    }
    uvec4 _1795 = floatBitsToUint(cbInstanceData._m0[_572 + 5u]);
    uint _1797 = _1795.x * 14u;
    uint _1798 = _1797 + 13u;
    float _1803 = _597 + (-1.0);
    float _1806 = (cbLight._m0[_1798].x * _1803) + 1.0;
    float _1807 = (cbLight._m0[_1798].y * _1803) + 1.0;
    uint _1808 = _1797 + 5u;
    float _1814 = isnan(1.0) ? _1807 : (isnan(_1807) ? 1.0 : min(_1807, 1.0));
    uint _1818 = _1797 + 4u;
    float _1828 = isnan(1.0) ? _1806 : (isnan(_1806) ? 1.0 : min(_1806, 1.0));
    uint _1832 = _1797 | 1u;
    float _1843 = dot(vec3(cbLight._m0[_1797].xyz), vec3(0.0));
    float _1846 = dot(vec3(cbLight._m0[_1832].xyz), vec3(0.0));
    float _3593 = isnan(0.0) ? _1843 : (isnan(_1843) ? 0.0 : max(_1843, 0.0));
    float _3604 = isnan(0.0) ? _1846 : (isnan(_1846) ? 0.0 : max(_1846, 0.0));
    float _1851 = (isnan(1.0) ? _3593 : (isnan(_3593) ? 1.0 : min(_3593, 1.0))) * 0.3183098733425140380859375;
    float _1853 = (isnan(1.0) ? _3604 : (isnan(_3604) ? 1.0 : min(_3604, 1.0))) * 0.3183098733425140380859375;
    float _1860 = ((cbLight._m0[_1808].x * _1814) * _1853) + (((cbLight._m0[_1818].x * _1785) * _1828) * _1851);
    float _1861 = ((_1814 * cbLight._m0[_1808].y) * _1853) + (((cbLight._m0[_1818].y * _1787) * _1828) * _1851);
    float _1862 = ((_1814 * cbLight._m0[_1808].z) * _1853) + (((cbLight._m0[_1818].z * _1789) * _1828) * _1851);
    uint _1863 = _1797 + 8u;
    float _1869 = cbLight._m0[_1797].x + _550;
    float _1870 = cbLight._m0[_1797].y + _551;
    float _1871 = cbLight._m0[_1797].z + _552;
    float _1875 = inversesqrt(dot(vec3(_1869, _1870, _1871), vec3(_1869, _1870, _1871)));
    float _1879 = dot(vec3(0.0), vec3(cbLight._m0[_1797].xyz));
    float _3615 = isnan(0.0) ? _1879 : (isnan(_1879) ? 0.0 : max(_1879, 0.0));
    float _1882 = isnan(1.0) ? _3615 : (isnan(_3615) ? 1.0 : min(_3615, 1.0));
    float _1883 = dot(vec3(0.0), vec3(_550, _551, _552));
    float _3626 = isnan(0.0) ? _1883 : (isnan(_1883) ? 0.0 : max(_1883, 0.0));
    float _1886 = isnan(1.0) ? _3626 : (isnan(_3626) ? 1.0 : min(_3626, 1.0));
    float _1887 = dot(vec3(cbLight._m0[_1797].xyz), vec3(_1869 * _1875, _1870 * _1875, _1871 * _1875));
    float _3637 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
    float _1898 = (exp2(log2(1.0 - (isnan(1.0) ? _3637 : (isnan(_3637) ? 1.0 : min(_3637, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1904 = (0.5 / ((_1882 + 9.9999999392252902907785028219223e-09) + _1886)) * _1882;
    float _3648 = isnan(0.0) ? _1904 : (isnan(_1904) ? 0.0 : max(_1904, 0.0));
    float _1906 = (isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0))) * 0.31831014156341552734375;
    uint _1920 = _1797 + 9u;
    float _1926 = cbLight._m0[_1832].x + _550;
    float _1927 = cbLight._m0[_1832].y + _551;
    float _1928 = cbLight._m0[_1832].z + _552;
    float _1932 = inversesqrt(dot(vec3(_1926, _1927, _1928), vec3(_1926, _1927, _1928)));
    float _1936 = dot(vec3(0.0), vec3(cbLight._m0[_1832].xyz));
    float _3659 = isnan(0.0) ? _1936 : (isnan(_1936) ? 0.0 : max(_1936, 0.0));
    float _1939 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
    float _1940 = dot(vec3(cbLight._m0[_1832].xyz), vec3(_1926 * _1932, _1927 * _1932, _1928 * _1932));
    float _3670 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
    float _1949 = (exp2(log2(1.0 - (isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1953 = (0.5 / ((_1939 + 9.9999999392252902907785028219223e-09) + _1886)) * _1939;
    float _3681 = isnan(0.0) ? _1953 : (isnan(_1953) ? 0.0 : max(_1953, 0.0));
    float _1955 = (isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0))) * 0.31831014156341552734375;
    float _1965 = (((_1949 * cbLight._m0[_1920].x) * _1955) * _1814) + ((((cbLight._m0[_1863].x * _1785) * _1898) * _1906) * _1828);
    float _1966 = (((_1949 * cbLight._m0[_1920].y) * _1955) * _1814) + ((((cbLight._m0[_1863].y * _1787) * _1898) * _1906) * _1828);
    float _1967 = (((_1949 * cbLight._m0[_1920].z) * _1955) * _1814) + ((((cbLight._m0[_1863].z * _1789) * _1898) * _1906) * _1828);
    float _2130;
    float _2132;
    float _2134;
    float _2136;
    float _2138;
    float _2140;
    if (_1795.y == 0u)
    {
        uvec4 _2085 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2086 = _2085.x;
        uint _2097 = uint((float(_2085.y) * floor(float(uint(cbSceneParam._m0[85u].y * _559) / _2086))) + floor(float(uint(cbSceneParam._m0[85u].x * _558) / _2086)));
        float _2107 = (log2(_1571 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2108 = isnan(0.0) ? _2107 : (isnan(_2107) ? 0.0 : max(_2107, 0.0));
        uint _2111 = uint(isnan(14.0) ? _2108 : (isnan(_2108) ? 14.0 : min(_2108, 14.0)));
        uvec4 _2116 = texelFetch(g_lightClusterGridBuffer, int(((_2111 << 2u) + (_2097 << 6u)) >> 2u));
        uint _2117 = _2116.x;
        uint _2118 = _2085.z;
        float _2225;
        float _2227;
        float _2229;
        float _2231;
        float _2233;
        float _2235;
        if (((((1u << ((_2118 >> 4u) & 15u)) + 4294967295u) & _2117) == 0u) || ((_2118 & 240u) == 0u))
        {
            _2225 = 0.0;
            _2227 = 0.0;
            _2229 = 0.0;
            _2231 = 0.0;
            _2233 = 0.0;
            _2235 = 0.0;
        }
        else
        {
            float _2226;
            float _2228;
            float _2230;
            float _2232;
            float _2234;
            float _2236;
            float _2392 = 0.0;
            float _2393 = 0.0;
            float _2394 = 0.0;
            float _2395 = 0.0;
            float _2396 = 0.0;
            float _2397 = 0.0;
            uint _2398 = 0u;
            uint _2407;
            bool _2408;
            for (;;)
            {
                _2407 = texelFetch(g_lightClassification, int((((_2111 << 5u) + (_2097 << 9u)) + (_2398 << 2u)) >> 2u)).x;
                _2408 = _2407 == 0u;
                float frontier_phi_70_pred;
                float frontier_phi_70_pred_1;
                float frontier_phi_70_pred_2;
                float frontier_phi_70_pred_3;
                float frontier_phi_70_pred_4;
                float frontier_phi_70_pred_5;
                if (_2408)
                {
                    frontier_phi_70_pred = _2395;
                    frontier_phi_70_pred_1 = _2397;
                    frontier_phi_70_pred_2 = _2396;
                    frontier_phi_70_pred_3 = _2394;
                    frontier_phi_70_pred_4 = _2393;
                    frontier_phi_70_pred_5 = _2392;
                }
                else
                {
                    float _2537;
                    float _2538;
                    float _2539;
                    float _2540;
                    float _2541;
                    float _2542;
                    uint _2543;
                    _2537 = _2392;
                    _2538 = _2393;
                    _2539 = _2394;
                    _2540 = _2395;
                    _2541 = _2396;
                    _2542 = _2397;
                    _2543 = _2407;
                    float _2469;
                    float _2470;
                    float _2471;
                    float _2472;
                    float _2473;
                    float _2474;
                    for (;;)
                    {
                        uint _2547 = uint(findLSB(_2543)) + (_2398 << 5u);
                        uint _2544 = (_2543 + 4294967295u) & _2543;
                        uint _2549 = _2547 * 48u;
                        vec4 _2563 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2549)).x, texelFetch(g_PointLightRenderingBuffer, int(_2549 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2549 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2549 + 3u)).x));
                        uint _2569 = (_2547 * 48u) + 4u;
                        vec4 _2582 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2569)).x, texelFetch(g_PointLightRenderingBuffer, int(_2569 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2569 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2569 + 3u)).x));
                        uint _2588 = (_2547 * 48u) + 8u;
                        vec3 _2599 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2588)).x, texelFetch(g_PointLightRenderingBuffer, int(_2588 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2588 + 2u)).x));
                        float _2603 = _2563.x - _1569;
                        float _2604 = _2563.y - _1570;
                        float _2605 = _2563.z - _1571;
                        float _2606 = dot(vec3(_2603, _2604, _2605), vec3(_2603, _2604, _2605));
                        float _2609 = inversesqrt(_2606);
                        float _2618 = 1.0 - (_2606 * _2563.w);
                        float _3702 = isnan(0.0) ? _2618 : (isnan(_2618) ? 0.0 : max(_2618, 0.0));
                        float _2619 = isnan(1.0) ? _3702 : (isnan(_3702) ? 1.0 : min(_3702, 1.0));
                        float _2620 = sqrt(_2606) * _2582.w;
                        float _2623 = 1.39999997615814208984375 / (_2620 + 1.39999997615814208984375);
                        float _2624 = _2623 * _2623;
                        float _2627 = ((1.0 - _2624) * dot(vec3(0.0), vec3(_2609 * _2603, _2609 * _2604, _2609 * _2605))) + _2624;
                        float _2630 = _2620 * _2620;
                        float _2634 = ((isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0))) * _2619) / ((_2630 * 0.699999988079071044921875) + 1.0);
                        float _2638 = (-0.0) - _1569;
                        float _2639 = (-0.0) - _1570;
                        float _2640 = (-0.0) - _1571;
                        float _2644 = inversesqrt(dot(vec3(_2638, _2639, _2640), vec3(_2638, _2639, _2640)));
                        float _2648 = dot(vec3(0.0), vec3(_2644 * _2638, _2644 * _2639, _2644 * _2640));
                        float _3718 = isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0));
                        float _3729 = isnan(0.0) ? _2627 : (isnan(_2627) ? 0.0 : max(_2627, 0.0));
                        float _2652 = isnan(1.0) ? _3729 : (isnan(_3729) ? 1.0 : min(_3729, 1.0));
                        float _2656 = (0.5 / (((isnan(1.0) ? _3718 : (isnan(_3718) ? 1.0 : min(_3718, 1.0))) + 9.9999999392252902907785028219223e-09) + _2652)) * _2652;
                        float _3740 = isnan(0.0) ? _2656 : (isnan(_2656) ? 0.0 : max(_2656, 0.0));
                        float _2665 = (((isnan(1.0) ? _3740 : (isnan(_3740) ? 1.0 : min(_3740, 1.0))) * 3.1415927410125732421875) / ((_2630 * 2.1991131305694580078125) + 3.141590118408203125)) * _2619;
                        _2472 = (_2634 * _2582.x) + _2540;
                        _2473 = (_2634 * _2582.y) + _2541;
                        _2474 = (_2634 * _2582.z) + _2542;
                        _2469 = (_2665 * _2599.x) + _2537;
                        _2470 = (_2665 * _2599.y) + _2538;
                        _2471 = (_2665 * _2599.z) + _2539;
                        if (_2544 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2537 = _2469;
                            _2538 = _2470;
                            _2539 = _2471;
                            _2540 = _2472;
                            _2541 = _2473;
                            _2542 = _2474;
                            _2543 = _2544;
                        }
                    }
                    frontier_phi_70_pred = _2472;
                    frontier_phi_70_pred_1 = _2474;
                    frontier_phi_70_pred_2 = _2473;
                    frontier_phi_70_pred_3 = _2471;
                    frontier_phi_70_pred_4 = _2470;
                    frontier_phi_70_pred_5 = _2469;
                }
                _2232 = frontier_phi_70_pred;
                _2236 = frontier_phi_70_pred_1;
                _2234 = frontier_phi_70_pred_2;
                _2230 = frontier_phi_70_pred_3;
                _2228 = frontier_phi_70_pred_4;
                _2226 = frontier_phi_70_pred_5;
                uint _2399 = _2398 + 1u;
                if (_2399 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2392 = _2226;
                    _2393 = _2228;
                    _2394 = _2230;
                    _2395 = _2232;
                    _2396 = _2234;
                    _2397 = _2236;
                    _2398 = _2399;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2225 = _2226;
            _2227 = _2228;
            _2229 = _2230;
            _2231 = _2232;
            _2233 = _2234;
            _2235 = _2236;
        }
        uvec4 _2239 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2240 = _2239.z;
        uint _2242 = (_2240 >> 8u) & 15u;
        float _2363;
        float _2365;
        float _2367;
        float _2369;
        float _2371;
        float _2373;
        if (((4294967295u << _2242) & _2117) == 0u)
        {
            _2363 = _2225;
            _2365 = _2227;
            _2367 = _2229;
            _2369 = _2231;
            _2371 = _2233;
            _2373 = _2235;
        }
        else
        {
            float _2388 = inversesqrt(dot(vec3(_1569, _1570, _1571), vec3(_1569, _1570, _1571)));
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            float frontier_phi_63_64_ladder_3;
            float frontier_phi_63_64_ladder_4;
            float frontier_phi_63_64_ladder_5;
            if (_2242 < ((_2240 >> 12u) & 15u))
            {
                float _2364;
                float _2366;
                float _2368;
                float _2370;
                float _2372;
                float _2374;
                float _2520 = _2225;
                float _2521 = _2227;
                float _2522 = _2229;
                float _2523 = _2231;
                float _2524 = _2233;
                float _2525 = _2235;
                uint _2526 = _2242;
                uint _2535;
                bool _2536;
                for (;;)
                {
                    _2535 = texelFetch(g_lightClassification, int((((_2111 << 5u) + (_2097 << 9u)) + (_2526 << 2u)) >> 2u)).x;
                    _2536 = _2535 == 0u;
                    float frontier_phi_76_pred;
                    float frontier_phi_76_pred_1;
                    float frontier_phi_76_pred_2;
                    float frontier_phi_76_pred_3;
                    float frontier_phi_76_pred_4;
                    float frontier_phi_76_pred_5;
                    if (_2536)
                    {
                        frontier_phi_76_pred = _2525;
                        frontier_phi_76_pred_1 = _2524;
                        frontier_phi_76_pred_2 = _2523;
                        frontier_phi_76_pred_3 = _2522;
                        frontier_phi_76_pred_4 = _2521;
                        frontier_phi_76_pred_5 = _2520;
                    }
                    else
                    {
                        float _2670;
                        float _2671;
                        float _2672;
                        float _2673;
                        float _2674;
                        float _2675;
                        float _2921;
                        float _2922;
                        float _2923;
                        float _2924;
                        float _2925;
                        float _2926;
                        float _2683 = _2520;
                        float _2684 = _2521;
                        float _2685 = _2522;
                        float _2686 = _2523;
                        float _2687 = _2524;
                        float _2688 = _2525;
                        uint _2689 = _2535;
                        uint _2690;
                        vec4 _2715;
                        float _2716;
                        vec4 _2731;
                        vec3 _2743;
                        vec4 _2759;
                        vec4 _2775;
                        float _2821;
                        bool _2822;
                        for (;;)
                        {
                            uint _2700 = ((_2526 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2689));
                            _2690 = (_2689 + 4294967295u) & _2689;
                            uint _2702 = _2700 * 40u;
                            _2715 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2702)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2702 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2702 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2702 + 3u)).x));
                            _2716 = _2715.w;
                            uint _2718 = (_2700 * 40u) + 4u;
                            _2731 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2718)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2718 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2718 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2718 + 3u)).x));
                            uint _2733 = (_2700 * 40u) + 8u;
                            _2743 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2733)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2733 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2733 + 2u)).x));
                            uint _2746 = (_2700 * 40u) + 16u;
                            _2759 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2746)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2746 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2746 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2746 + 3u)).x));
                            uint _2762 = (_2700 * 40u) + 20u;
                            _2775 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2762)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2762 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2762 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2762 + 3u)).x));
                            uint _2777 = (_2700 * 40u) + 24u;
                            vec4 _2790 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2777)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2777 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2777 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2777 + 3u)).x));
                            uint _2796 = (_2700 * 40u) + 28u;
                            vec4 _2809 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2796)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2796 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2796 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2796 + 3u)).x));
                            _2821 = fma(_1571, _2809.z, fma(_1570, _2809.y, _2809.x * _1569)) + _2809.w;
                            _2822 = !((fma(_1571, _2790.z, fma(_1570, _2790.y, _2790.x * _1569)) + _2790.w) <= 0.0);
                            float frontier_phi_82_pred;
                            float frontier_phi_82_pred_1;
                            float frontier_phi_82_pred_2;
                            float frontier_phi_82_pred_3;
                            float frontier_phi_82_pred_4;
                            float frontier_phi_82_pred_5;
                            if (_2822)
                            {
                                float _2849 = _2715.x - _1569;
                                float _2850 = _2715.y - _1570;
                                float _2851 = _2715.z - _1571;
                                float _2852 = dot(vec3(_2849, _2850, _2851), vec3(_2849, _2850, _2851));
                                float _2855 = inversesqrt(_2852);
                                float _2856 = _2855 * _2849;
                                float _2857 = _2855 * _2850;
                                float _2858 = _2855 * _2851;
                                float _2862 = 1.0 - (_2852 / (_2716 * _2716));
                                float _3751 = isnan(0.0) ? _2862 : (isnan(_2862) ? 0.0 : max(_2862, 0.0));
                                float _2863 = isnan(1.0) ? _3751 : (isnan(_3751) ? 1.0 : min(_3751, 1.0));
                                float _2867 = sqrt(_2852) * _2731.w;
                                float _2869 = 1.39999997615814208984375 / (_2867 + 1.39999997615814208984375);
                                float _2870 = _2869 * _2869;
                                float _2871 = 1.0 - _2870;
                                float _2873 = (_2871 * dot(vec3(_2856, _2857, _2858), vec3(0.0))) + _2870;
                                float _2876 = _2867 * _2867;
                                float _2880 = (fma(_1571, _2759.z, fma(_1570, _2759.y, _2759.x * _1569)) + _2759.w) / _2821;
                                float _2881 = (fma(_1571, _2775.z, fma(_1570, _2775.y, _2775.x * _1569)) + _2775.w) / _2821;
                                float _2885 = 1.0 - dot(vec2(_2880, _2881), vec2(_2880, _2881));
                                float _3767 = isnan(0.0) ? _2885 : (isnan(_2885) ? 0.0 : max(_2885, 0.0));
                                float _2886 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
                                float _2887 = _2886 * (((isnan(0.0) ? _2873 : (isnan(_2873) ? 0.0 : max(_2873, 0.0))) * _2863) / ((_2876 * 0.699999988079071044921875) + 1.0));
                                float _2897 = dot(vec3(0.0), vec3((-0.0) - (_1569 * _2388), (-0.0) - (_1570 * _2388), (-0.0) - (_1571 * _2388)));
                                float _3778 = isnan(0.0) ? _2897 : (isnan(_2897) ? 0.0 : max(_2897, 0.0));
                                float _2905 = (_2871 * dot(vec3(0.0), vec3(_2856, _2857, _2858))) + _2870;
                                float _3789 = isnan(0.0) ? _2905 : (isnan(_2905) ? 0.0 : max(_2905, 0.0));
                                float _2906 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
                                float _2910 = (0.5 / (((isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0))) + 9.9999999392252902907785028219223e-09) + _2906)) * _2906;
                                float _3800 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
                                float _2917 = (_2886 * _2863) * (((isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0))) * 3.1415927410125732421875) / ((_2876 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_82_pred = _2887 * _2731.z;
                                frontier_phi_82_pred_1 = _2887 * _2731.y;
                                frontier_phi_82_pred_2 = _2887 * _2731.x;
                                frontier_phi_82_pred_3 = _2917 * _2743.z;
                                frontier_phi_82_pred_4 = _2917 * _2743.y;
                                frontier_phi_82_pred_5 = _2917 * _2743.x;
                            }
                            else
                            {
                                frontier_phi_82_pred = 0.0;
                                frontier_phi_82_pred_1 = 0.0;
                                frontier_phi_82_pred_2 = 0.0;
                                frontier_phi_82_pred_3 = 0.0;
                                frontier_phi_82_pred_4 = 0.0;
                                frontier_phi_82_pred_5 = 0.0;
                            }
                            _2926 = frontier_phi_82_pred;
                            _2925 = frontier_phi_82_pred_1;
                            _2924 = frontier_phi_82_pred_2;
                            _2923 = frontier_phi_82_pred_3;
                            _2922 = frontier_phi_82_pred_4;
                            _2921 = frontier_phi_82_pred_5;
                            _2673 = _2924 + _2686;
                            _2674 = _2925 + _2687;
                            _2675 = _2926 + _2688;
                            _2670 = _2921 + _2683;
                            _2671 = _2922 + _2684;
                            _2672 = _2923 + _2685;
                            if (_2690 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2683 = _2670;
                                _2684 = _2671;
                                _2685 = _2672;
                                _2686 = _2673;
                                _2687 = _2674;
                                _2688 = _2675;
                                _2689 = _2690;
                                continue;
                            }
                        }
                        frontier_phi_76_pred = _2675;
                        frontier_phi_76_pred_1 = _2674;
                        frontier_phi_76_pred_2 = _2673;
                        frontier_phi_76_pred_3 = _2672;
                        frontier_phi_76_pred_4 = _2671;
                        frontier_phi_76_pred_5 = _2670;
                    }
                    _2374 = frontier_phi_76_pred;
                    _2372 = frontier_phi_76_pred_1;
                    _2370 = frontier_phi_76_pred_2;
                    _2368 = frontier_phi_76_pred_3;
                    _2366 = frontier_phi_76_pred_4;
                    _2364 = frontier_phi_76_pred_5;
                    uint _2527 = _2526 + 1u;
                    if (_2527 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2520 = _2364;
                        _2521 = _2366;
                        _2522 = _2368;
                        _2523 = _2370;
                        _2524 = _2372;
                        _2525 = _2374;
                        _2526 = _2527;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _2372;
                frontier_phi_63_64_ladder_1 = _2374;
                frontier_phi_63_64_ladder_2 = _2370;
                frontier_phi_63_64_ladder_3 = _2368;
                frontier_phi_63_64_ladder_4 = _2366;
                frontier_phi_63_64_ladder_5 = _2364;
            }
            else
            {
                frontier_phi_63_64_ladder = _2233;
                frontier_phi_63_64_ladder_1 = _2235;
                frontier_phi_63_64_ladder_2 = _2231;
                frontier_phi_63_64_ladder_3 = _2229;
                frontier_phi_63_64_ladder_4 = _2227;
                frontier_phi_63_64_ladder_5 = _2225;
            }
            _2363 = frontier_phi_63_64_ladder_5;
            _2365 = frontier_phi_63_64_ladder_4;
            _2367 = frontier_phi_63_64_ladder_3;
            _2369 = frontier_phi_63_64_ladder_2;
            _2371 = frontier_phi_63_64_ladder;
            _2373 = frontier_phi_63_64_ladder_1;
        }
        float _2378 = isnan(1.0) ? _597 : (isnan(_597) ? 1.0 : min(_597, 1.0));
        _2130 = (_2378 * _2369) + _1860;
        _2132 = (_2378 * _2371) + _1861;
        _2134 = (_2378 * _2373) + _1862;
        _2136 = ((_2363 * 0.039999999105930328369140625) * _2378) + _1965;
        _2138 = ((_2365 * 0.039999999105930328369140625) * _2378) + _1966;
        _2140 = ((_2367 * 0.039999999105930328369140625) * _2378) + _1967;
    }
    else
    {
        _2130 = _1860;
        _2132 = _1861;
        _2134 = _1862;
        _2136 = _1965;
        _2138 = _1966;
        _2140 = _1967;
    }
    float _3816 = isnan(0.0) ? _583 : (isnan(_583) ? 0.0 : max(_583, 0.0));
    float _3827 = isnan(0.0) ? _584 : (isnan(_584) ? 0.0 : max(_584, 0.0));
    float _3838 = isnan(0.0) ? _585 : (isnan(_585) ? 0.0 : max(_585, 0.0));
    float _2157 = ((isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * (_2130 + ((isnan(0.0) ? _1226 : (isnan(_1226) ? 0.0 : max(_1226, 0.0))) * _597))) + ((_2136 + ((isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0))) * _1305)) * cbPerFrame._m0[3u].x);
    float _2158 = ((isnan(1.0) ? _3827 : (isnan(_3827) ? 1.0 : min(_3827, 1.0))) * (_2132 + ((isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0))) * _597))) + ((_2138 + ((isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0))) * _1305)) * cbPerFrame._m0[3u].x);
    float _2159 = ((isnan(1.0) ? _3838 : (isnan(_3838) ? 1.0 : min(_3838, 1.0))) * (_2134 + ((isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0))) * _597))) + ((_2140 + ((isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0))) * _1305)) * cbPerFrame._m0[3u].x);
    uint _2163 = _572 + 6u;
    float _2171 = _558 / cbSceneParam._m0[86u].x;
    float _2172 = _559 / cbSceneParam._m0[86u].y;
    vec4 _2186 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2171, _2172, (log2((isnan(cbSceneParam._m0[77u].w) ? _545 : (isnan(_545) ? cbSceneParam._m0[77u].w : min(_545, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2188 = _2186.x;
    float _2189 = _2186.y;
    float _2190 = _2186.z;
    float _2191 = _2186.w;
    float _2287;
    float _2289;
    float _2291;
    float _2293;
    if (_545 > cbSceneParam._m0[78u].w)
    {
        float _2250 = isnan(_545) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _545 : min(cbSceneParam._m0[80u].w, _545));
        float _2251 = _2250 / _545;
        float _2262 = _2251 * _268;
        float _2263 = _269 * _2251;
        float _2264 = (-0.0) - _2263;
        float _2265 = _2251 * _270;
        float _2267 = (cbSceneParam._m0[77u].w * _2264) / _2250;
        float _2268 = _2267 + cbSceneParam._m0[79u].w;
        float _2269 = cbSceneParam._m0[79u].w - _2263;
        float _2275 = sqrt(((_2262 * _2262) + (_2263 * _2263)) + (_2265 * _2265));
        float _2278 = (1.0 - (cbSceneParam._m0[77u].w / _2250)) * _2275;
        float _2283 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2285 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2482;
        if (abs((_2264 - _2267) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2482 = ((((_2268 > 0.0) ? exp2(_2283 * _2268) : (2.0 - exp2(_2285 * _2268))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2278;
        }
        else
        {
            float _2421 = 1.0 / cbSceneParam._m0[80u].x;
            float _2422 = isnan(_2269) ? _2268 : (isnan(_2268) ? _2269 : max(_2268, _2269));
            float _2423 = isnan(_2269) ? _2268 : (isnan(_2268) ? _2269 : min(_2268, _2269));
            float _2432 = isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : min(_2422, 0.0));
            float _2433 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : min(_2423, 0.0));
            _2482 = ((abs(_2275 / _2264) * cbSceneParam._m0[80u].y) * ((((_2432 - _2433) * 2.0) - ((exp2(_2283 * (isnan(0.0) ? _2422 : (isnan(_2422) ? 0.0 : max(_2422, 0.0)))) - exp2(_2283 * (isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0))))) * _2421)) - ((exp2(_2285 * _2432) - exp2(_2285 * _2433)) * _2421))) + (_2278 * cbSceneParam._m0[80u].z);
        }
        vec4 _2484 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2171, _2172, 1.0), 0.0);
        float _2493 = exp2((_2482 * (-1.44269502162933349609375)) * (1.0 - _2484.w));
        float _2494 = log2(_2493);
        float _2510 = log2(_2191);
        _2287 = (exp2(_2510 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2494 * cbSceneParam._m0[78u].x)) * _2484.x) / cbSceneParam._m0[78u].x)) + _2188;
        _2289 = (exp2(_2510 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2494 * cbSceneParam._m0[78u].y)) * _2484.y) / cbSceneParam._m0[78u].y)) + _2189;
        _2291 = (exp2(_2510 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2494 * cbSceneParam._m0[78u].z)) * _2484.z) / cbSceneParam._m0[78u].z)) + _2190;
        _2293 = _2493 * _2191;
    }
    else
    {
        _2287 = _2188;
        _2289 = _2189;
        _2291 = _2190;
        _2293 = _2191;
    }
    float _2305 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2306 = _2305 == 3.0;
    float _2307 = log2(_2293);
    float _2314 = exp2(_2307 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0)));
    float _2315 = exp2(_2307 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0)));
    float _2316 = exp2(_2307 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2159 : (isnan(_2159) ? 0.0 : max(_2159, 0.0)));
    float _2325 = (_2305 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2325 * (_2306 ? _2314 : (_2314 + (cbSceneParam._m0[72u].w * _2287)));
    SV_Target.y = _2325 * (_2306 ? _2315 : (_2315 + (cbSceneParam._m0[72u].w * _2289)));
    SV_Target.z = _2325 * (_2306 ? _2316 : (_2316 + (cbSceneParam._m0[72u].w * _2291)));
    SV_Target.w = cbInstanceData._m0[_2163].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2163].w;
}


