#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _990;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _194 = _193 * _186;
    float _195 = _193 * _187;
    float _196 = _193 * _188;
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208 = _207 * TANGENT.x;
    float _209 = _207 * TANGENT.y;
    float _210 = _207 * TANGENT.z;
    float _255 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _265 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _255);
    float _266 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _255);
    float _267 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _255);
    vec4 _280 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _283 = _280.x;
    vec4 _301 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _318 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _283) + cbMtdParam._m0[12u].x) * _301.x;
    float _320 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _283) + cbMtdParam._m0[12u].y) * _301.y;
    float _322 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _283) + cbMtdParam._m0[12u].z) * _301.z;
    vec4 _340 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _376 = cbMtdParam._m0[24u].x + _265;
    float _377 = cbMtdParam._m0[24u].y + _266;
    float _378 = cbMtdParam._m0[24u].z + _267;
    float _392 = (-0.0) - dot(vec3(_376, _377, _378), vec3(_194, _195, _196));
    float _393 = (-0.0) - dot(vec3(_376, _377, _378), vec3(_208, _209, _210));
    float _394 = (-0.0) - dot(vec3(_376, _377, _378), vec3((-0.0) - _201, (-0.0) - _202, (-0.0) - _203));
    float _398 = inversesqrt(dot(vec3(_392, _393, _394), vec3(_392, _393, _394)));
    float _401 = _398 * _394;
    float _404 = ((_398 * _392) + ((cbMtdParam._m0[22u].x * _283) * ((_340.x * 2.0) + (-1.0)))) * cbMtdParam._m0[20u].w;
    float _405 = ((_398 * _393) + ((cbMtdParam._m0[22u].y * _283) * ((_340.y * 2.0) + (-1.0)))) * cbMtdParam._m0[20u].z;
    float _406 = fract(TEXCOORD.x);
    float _407 = fract(TEXCOORD.y);
    float _413;
    if (_404 > 0.0)
    {
        _413 = (1.0 - _406) / _404;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_404 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _406) / _404;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _413 = frontier_phi_3_2_ladder;
    }
    float _421;
    if (_405 > 0.0)
    {
        _421 = (1.0 - _407) / _405;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_405 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _407) / _405;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _421 = frontier_phi_7_6_ladder;
    }
    float _425 = (_401 > 0.0) ? (cbMtdParam._m0[16u].x / _401) : 5000.0;
    float _426 = isnan(_421) ? _413 : (isnan(_413) ? _421 : min(_413, _421));
    float _427 = isnan(_425) ? _426 : (isnan(_426) ? _425 : min(_426, _425));
    float _431 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _438 = ((_427 * _401) + _431) / _431;
    vec4 _463 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * ((((((_406 + (-0.5)) + (_427 * _404)) / _438) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * ((((((_407 + (-0.5)) + (_427 * _405)) / _438) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    vec4 _491 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _495 = _491.z;
    float _498 = (_491.x * 2.0) + (-1.0);
    float _499 = (_491.y * 2.0) + (-1.0);
    float _500 = dot(vec2(_498, _499), vec2(_498, _499));
    float _3359 = isnan(0.0) ? _500 : (isnan(_500) ? 0.0 : max(_500, 0.0));
    float _505 = sqrt(1.0 - (isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0))));
    float _508 = fma(_505, _201, fma(_499, _208, _498 * _194));
    float _511 = fma(_505, _202, fma(_499, _209, _498 * _195));
    float _514 = fma(_505, _203, fma(_499, _210, _498 * _196));
    float _518 = inversesqrt(dot(vec3(_508, _511, _514), vec3(_508, _511, _514)));
    float _519 = _518 * _508;
    float _520 = _518 * _511;
    float _521 = _518 * _514;
    float _3370 = isnan(0.0) ? _495 : (isnan(_495) ? 0.0 : max(_495, 0.0));
    float _522 = isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0));
    float _3381 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _3392 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _3403 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _541 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _545 = inversesqrt(dot(vec3(_265, _266, _267), vec3(_265, _266, _267)));
    float _546 = _265 * _545;
    float _547 = _266 * _545;
    float _548 = _267 * _545;
    float _554 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _555 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _574 = fma(_521, cbSceneParam._m0[5u].z, fma(_520, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _519));
    float _577 = fma(_521, cbSceneParam._m0[6u].z, fma(_520, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _519));
    float _580 = fma(_521, cbSceneParam._m0[7u].z, fma(_520, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _519));
    uint _593 = uint(roundEven(NORMAL.w)) * 13u;
    uint _595 = _593 + 9u;
    uint _596 = _595 + uint(cbMatDynParam._m0[0u].w);
    float _602 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0)))) * cbInstanceData._m0[_596].x;
    float _603 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0)))) * cbInstanceData._m0[_596].y;
    float _604 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0)))) * cbInstanceData._m0[_596].z;
    float _3414 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _605 = isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0));
    float _3425 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _606 = isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0));
    float _3436 = isnan(0.0) ? _604 : (isnan(_604) ? 0.0 : max(_604, 0.0));
    float _607 = isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0));
    vec4 _616 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _554, cbSceneParam._m0[86u].y * _555));
    float _619 = _616.x * TEXCOORD_4.z;
    float _620 = dot(vec3(_519, _520, _521), vec3(_546, _547, _548));
    float _623 = _620 * 2.0;
    float _627 = (_623 * _519) - _546;
    float _628 = (_623 * _520) - _547;
    float _629 = (_623 * _521) - _548;
    float _633 = abs(dot(vec3(_546, _547, _548), vec3(_519, _520, _521)));
    float _3447 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _635 = sqrt(_522);
    float _648 = exp2((_635 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_635 * 3.0));
    float _680 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _684 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _688 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _989;
    float _991;
    float _992;
    float _993;
    float _994;
    float _995;
    float _996;
    float _997;
    float _998;
    float _999;
    float _1000;
    float _1001;
    float _1002;
    float _1003;
    float _1004;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _716 = fma(_688, cbModelParam._m0[26u].z, fma(_684, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _680));
        float _720 = fma(_688, cbModelParam._m0[27u].z, fma(_684, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _680));
        float _724 = fma(_688, cbModelParam._m0[28u].z, fma(_684, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _680));
        float _747 = _680 + _519;
        float _748 = _684 + _520;
        float _749 = _688 + _521;
        float _759 = fma(_749, cbModelParam._m0[26u].z, fma(_748, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _747)) - _716;
        float _760 = fma(_749, cbModelParam._m0[27u].z, fma(_748, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _747)) - _720;
        float _761 = fma(_749, cbModelParam._m0[28u].z, fma(_748, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _747)) - _724;
        float _765 = inversesqrt(dot(vec3(_759, _760, _761), vec3(_759, _760, _761)));
        float _778 = ((_765 * _759) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_716 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _779 = ((_765 * _760) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_720 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _780 = ((_765 * _761) / cbModelParam._m0[34u].z) + ((((((_724 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _783 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_778, _779, _780), 0.0);
        vec4 _790 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_778, _779, _780), 0.0);
        vec4 _797 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_778, _779, _780), 0.0);
        vec4 _804 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_778, _779, _780), 0.0);
        float _817 = exp2((_783.w + (-0.5)) * 20.0) * 2.0;
        float _818 = _817 * (_783.x + (-0.5));
        float _819 = _817 * (_783.y + (-0.5));
        float _820 = _817 * (_783.z + (-0.5));
        float _827 = exp2((_790.w + (-0.5)) * 20.0) * 2.0;
        float _828 = _827 * (_790.x + (-0.5));
        float _829 = _827 * (_790.y + (-0.5));
        float _830 = _827 * (_790.z + (-0.5));
        float _837 = exp2((_797.w + (-0.5)) * 20.0) * 2.0;
        float _838 = _837 * (_797.x + (-0.5));
        float _839 = _837 * (_797.y + (-0.5));
        float _840 = _837 * (_797.z + (-0.5));
        float _847 = exp2((_804.w + (-0.5)) * 20.0) * 2.0;
        float _848 = _847 * (_804.x + (-0.5));
        float _849 = _847 * (_804.y + (-0.5));
        float _850 = _847 * (_804.z + (-0.5));
        float _851 = isnan(0.0) ? _848 : (isnan(_848) ? 0.0 : max(_848, 0.0));
        float _852 = isnan(0.0) ? _849 : (isnan(_849) ? 0.0 : max(_849, 0.0));
        float _853 = isnan(0.0) ? _850 : (isnan(_850) ? 0.0 : max(_850, 0.0));
        float _854 = _818 * 0.5;
        float _855 = _828 * 0.5;
        float _856 = _838 * 0.5;
        float _857 = dot(vec3(_854, _855, _856), vec3(_854, _855, _856));
        float _862 = (_857 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_857);
        float _871 = (dot(vec3(_519, _520, _521), vec3(_862 * _854, _862 * _855, _862 * _856)) + 1.0) * 0.5;
        float _3473 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
        float _881 = sqrt(((_855 * _855) + (_854 * _854)) + (_856 * _856)) / (_851 + 9.9999997473787516355514526367188e-06);
        float _3484 = isnan(0.0) ? _881 : (isnan(_881) ? 0.0 : max(_881, 0.0));
        float _882 = isnan(1.0) ? _3484 : (isnan(_3484) ? 1.0 : min(_3484, 1.0));
        float _883 = _882 * 2.0;
        float _887 = (1.0 - _882) / (_882 + 1.0);
        float _3495 = isnan(0.0) ? _887 : (isnan(_887) ? 0.0 : max(_887, 0.0));
        float _888 = isnan(1.0) ? _3495 : (isnan(_3495) ? 1.0 : min(_3495, 1.0));
        float _897 = ((((1.0 - _888) * (_883 + 2.0)) * exp2(log2(isnan(1.0) ? _3473 : (isnan(_3473) ? 1.0 : min(_3473, 1.0))) * (_883 + 1.0))) + _888) * _851;
        float _898 = _819 * 0.5;
        float _899 = _829 * 0.5;
        float _900 = _839 * 0.5;
        float _901 = dot(vec3(_898, _899, _900), vec3(_898, _899, _900));
        float _906 = (_901 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_901);
        float _914 = (dot(vec3(_519, _520, _521), vec3(_906 * _898, _906 * _899, _906 * _900)) + 1.0) * 0.5;
        float _3506 = isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0));
        float _923 = sqrt(((_899 * _899) + (_898 * _898)) + (_900 * _900)) / (_852 + 9.9999997473787516355514526367188e-06);
        float _3517 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        float _924 = isnan(1.0) ? _3517 : (isnan(_3517) ? 1.0 : min(_3517, 1.0));
        float _925 = _924 * 2.0;
        float _929 = (1.0 - _924) / (_924 + 1.0);
        float _3528 = isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0));
        float _930 = isnan(1.0) ? _3528 : (isnan(_3528) ? 1.0 : min(_3528, 1.0));
        float _939 = ((((1.0 - _930) * (_925 + 2.0)) * exp2(log2(isnan(1.0) ? _3506 : (isnan(_3506) ? 1.0 : min(_3506, 1.0))) * (_925 + 1.0))) + _930) * _852;
        float _940 = _820 * 0.5;
        float _941 = _830 * 0.5;
        float _942 = _840 * 0.5;
        float _943 = dot(vec3(_940, _941, _942), vec3(_940, _941, _942));
        float _948 = (_943 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_943);
        float _956 = (dot(vec3(_519, _520, _521), vec3(_948 * _940, _948 * _941, _948 * _942)) + 1.0) * 0.5;
        float _3539 = isnan(0.0) ? _956 : (isnan(_956) ? 0.0 : max(_956, 0.0));
        float _965 = sqrt(((_941 * _941) + (_940 * _940)) + (_942 * _942)) / (_853 + 9.9999997473787516355514526367188e-06);
        float _3550 = isnan(0.0) ? _965 : (isnan(_965) ? 0.0 : max(_965, 0.0));
        float _966 = isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0));
        float _967 = _966 * 2.0;
        float _971 = (1.0 - _966) / (_966 + 1.0);
        float _3561 = isnan(0.0) ? _971 : (isnan(_971) ? 0.0 : max(_971, 0.0));
        float _972 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
        float _981 = ((((1.0 - _972) * (_967 + 2.0)) * exp2(log2(isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0))) * (_967 + 1.0))) + _972) * _853;
        _989 = _820;
        _991 = _819;
        _992 = _818;
        _993 = _830;
        _994 = _829;
        _995 = _828;
        _996 = _840;
        _997 = _839;
        _998 = _838;
        _999 = _853;
        _1000 = _852;
        _1001 = _851;
        _1002 = cbModelParam._m0[36u].z * (isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0)));
        _1003 = cbModelParam._m0[36u].z * (isnan(0.0) ? _939 : (isnan(_939) ? 0.0 : max(_939, 0.0)));
        _1004 = cbModelParam._m0[36u].z * (isnan(0.0) ? _981 : (isnan(_981) ? 0.0 : max(_981, 0.0)));
    }
    else
    {
        _989 = _990;
        _991 = _990;
        _992 = _990;
        _993 = _990;
        _994 = _990;
        _995 = _990;
        _996 = _990;
        _997 = _990;
        _998 = _990;
        _999 = _990;
        _1000 = _990;
        _1001 = _990;
        _1002 = 0.0;
        _1003 = 0.0;
        _1004 = 0.0;
    }
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1030 = fma(_688, cbModelParam._m0[30u].z, fma(_684, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _680));
        float _1034 = fma(_688, cbModelParam._m0[31u].z, fma(_684, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _680));
        float _1038 = fma(_688, cbModelParam._m0[32u].z, fma(_684, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _680));
        float _1061 = _680 + _519;
        float _1062 = _684 + _520;
        float _1063 = _688 + _521;
        float _1073 = fma(_1063, cbModelParam._m0[30u].z, fma(_1062, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1061)) - _1030;
        float _1074 = fma(_1063, cbModelParam._m0[31u].z, fma(_1062, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1061)) - _1034;
        float _1075 = fma(_1063, cbModelParam._m0[32u].z, fma(_1062, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1061)) - _1038;
        float _1079 = inversesqrt(dot(vec3(_1073, _1074, _1075), vec3(_1073, _1074, _1075)));
        float _1092 = ((_1079 * _1073) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1030 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1093 = ((_1079 * _1074) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1034 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1094 = ((_1079 * _1075) / cbModelParam._m0[35u].z) + ((((((_1038 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1096 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1092, _1093, _1094), 0.0);
        vec4 _1103 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1092, _1093, _1094), 0.0);
        vec4 _1110 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1092, _1093, _1094), 0.0);
        vec4 _1117 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1092, _1093, _1094), 0.0);
        float _1129 = exp2((_1096.w + (-0.5)) * 20.0) * 2.0;
        float _1130 = _1129 * (_1096.x + (-0.5));
        float _1131 = _1129 * (_1096.y + (-0.5));
        float _1132 = _1129 * (_1096.z + (-0.5));
        float _1139 = exp2((_1103.w + (-0.5)) * 20.0) * 2.0;
        float _1140 = _1139 * (_1103.x + (-0.5));
        float _1141 = _1139 * (_1103.y + (-0.5));
        float _1142 = _1139 * (_1103.z + (-0.5));
        float _1149 = exp2((_1110.w + (-0.5)) * 20.0) * 2.0;
        float _1150 = _1149 * (_1110.x + (-0.5));
        float _1151 = _1149 * (_1110.y + (-0.5));
        float _1152 = _1149 * (_1110.z + (-0.5));
        float _1159 = exp2((_1117.w + (-0.5)) * 20.0) * 2.0;
        float _1160 = _1159 * (_1117.x + (-0.5));
        float _1161 = _1159 * (_1117.y + (-0.5));
        float _1162 = _1159 * (_1117.z + (-0.5));
        float _1163 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1164 = isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0));
        float _1165 = isnan(0.0) ? _1162 : (isnan(_1162) ? 0.0 : max(_1162, 0.0));
        float _1166 = _1130 * 0.5;
        float _1167 = _1140 * 0.5;
        float _1168 = _1150 * 0.5;
        float _1169 = dot(vec3(_1166, _1167, _1168), vec3(_1166, _1167, _1168));
        float _1174 = (_1169 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1169);
        float _1182 = (dot(vec3(_519, _520, _521), vec3(_1174 * _1166, _1174 * _1167, _1174 * _1168)) + 1.0) * 0.5;
        float _3602 = isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0));
        float _1191 = sqrt(((_1167 * _1167) + (_1166 * _1166)) + (_1168 * _1168)) / (_1163 + 9.9999997473787516355514526367188e-06);
        float _3613 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
        float _1192 = isnan(1.0) ? _3613 : (isnan(_3613) ? 1.0 : min(_3613, 1.0));
        float _1193 = _1192 * 2.0;
        float _1197 = (1.0 - _1192) / (_1192 + 1.0);
        float _3624 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3624 : (isnan(_3624) ? 1.0 : min(_3624, 1.0));
        float _1207 = ((((1.0 - _1198) * (_1193 + 2.0)) * exp2(log2(isnan(1.0) ? _3602 : (isnan(_3602) ? 1.0 : min(_3602, 1.0))) * (_1193 + 1.0))) + _1198) * _1163;
        float _1208 = _1131 * 0.5;
        float _1209 = _1141 * 0.5;
        float _1210 = _1151 * 0.5;
        float _1211 = dot(vec3(_1208, _1209, _1210), vec3(_1208, _1209, _1210));
        float _1216 = (_1211 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1211);
        float _1224 = (dot(vec3(_519, _520, _521), vec3(_1216 * _1208, _1216 * _1209, _1216 * _1210)) + 1.0) * 0.5;
        float _3635 = isnan(0.0) ? _1224 : (isnan(_1224) ? 0.0 : max(_1224, 0.0));
        float _1233 = sqrt(((_1209 * _1209) + (_1208 * _1208)) + (_1210 * _1210)) / (_1164 + 9.9999997473787516355514526367188e-06);
        float _3646 = isnan(0.0) ? _1233 : (isnan(_1233) ? 0.0 : max(_1233, 0.0));
        float _1234 = isnan(1.0) ? _3646 : (isnan(_3646) ? 1.0 : min(_3646, 1.0));
        float _1235 = _1234 * 2.0;
        float _1239 = (1.0 - _1234) / (_1234 + 1.0);
        float _3657 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3657 : (isnan(_3657) ? 1.0 : min(_3657, 1.0));
        float _1249 = ((((1.0 - _1240) * (_1235 + 2.0)) * exp2(log2(isnan(1.0) ? _3635 : (isnan(_3635) ? 1.0 : min(_3635, 1.0))) * (_1235 + 1.0))) + _1240) * _1164;
        float _1250 = _1132 * 0.5;
        float _1251 = _1142 * 0.5;
        float _1252 = _1152 * 0.5;
        float _1253 = dot(vec3(_1250, _1251, _1252), vec3(_1250, _1251, _1252));
        float _1258 = (_1253 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1253);
        float _1266 = (dot(vec3(_519, _520, _521), vec3(_1258 * _1250, _1258 * _1251, _1258 * _1252)) + 1.0) * 0.5;
        float _3668 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
        float _1275 = sqrt(((_1251 * _1251) + (_1250 * _1250)) + (_1252 * _1252)) / (_1165 + 9.9999997473787516355514526367188e-06);
        float _3679 = isnan(0.0) ? _1275 : (isnan(_1275) ? 0.0 : max(_1275, 0.0));
        float _1276 = isnan(1.0) ? _3679 : (isnan(_3679) ? 1.0 : min(_3679, 1.0));
        float _1277 = _1276 * 2.0;
        float _1281 = (1.0 - _1276) / (_1276 + 1.0);
        float _3690 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _3690 : (isnan(_3690) ? 1.0 : min(_3690, 1.0));
        float _1291 = ((((1.0 - _1282) * (_1277 + 2.0)) * exp2(log2(isnan(1.0) ? _3668 : (isnan(_3668) ? 1.0 : min(_3668, 1.0))) * (_1277 + 1.0))) + _1282) * _1165;
        _1299 = _1132;
        _1300 = _1131;
        _1301 = _1130;
        _1302 = _1142;
        _1303 = _1141;
        _1304 = _1140;
        _1305 = _1152;
        _1306 = _1151;
        _1307 = _1150;
        _1308 = _1165;
        _1309 = _1164;
        _1310 = _1163;
        _1311 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1207 : (isnan(_1207) ? 0.0 : max(_1207, 0.0)));
        _1312 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1249 : (isnan(_1249) ? 0.0 : max(_1249, 0.0)));
        _1313 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1291 : (isnan(_1291) ? 0.0 : max(_1291, 0.0)));
    }
    else
    {
        _1299 = _990;
        _1300 = _990;
        _1301 = _990;
        _1302 = _990;
        _1303 = _990;
        _1304 = _990;
        _1305 = _990;
        _1306 = _990;
        _1307 = _990;
        _1308 = _990;
        _1309 = _990;
        _1310 = _990;
        _1311 = 0.0;
        _1312 = 0.0;
        _1313 = 0.0;
    }
    float _1323 = (cbModelParam._m0[1u].x * (_1311 - _1002)) + _1002;
    float _1324 = (cbModelParam._m0[1u].x * (_1312 - _1003)) + _1003;
    float _1325 = (cbModelParam._m0[1u].x * (_1313 - _1004)) + _1004;
    float _1346 = fma(_1325, cbSceneParam._m0[89u].z, fma(_1324, cbSceneParam._m0[89u].y, _1323 * cbSceneParam._m0[89u].x));
    float _1349 = fma(_1325, cbSceneParam._m0[90u].z, fma(_1324, cbSceneParam._m0[90u].y, _1323 * cbSceneParam._m0[90u].x));
    float _1352 = fma(_1325, cbSceneParam._m0[91u].z, fma(_1324, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1323));
    float _1367 = _627 * 0.5;
    float _1368 = _628 * 0.5;
    float _1369 = _629 * 0.5;
    float _1370 = dot(vec4(_1367, _1368, _1369, 1.0), vec4(_1301, _1304, _1307, _1310));
    float _1373 = dot(vec4(_1367, _1368, _1369, 1.0), vec4(_1300, _1303, _1306, _1309));
    float _1376 = dot(vec4(_1367, _1368, _1369, 1.0), vec4(_1299, _1302, _1305, _1308));
    float _1410;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1383 = dot(vec4(_1367, _1368, _1369, 1.0), vec4(_989, _993, _996, _999));
        float _1387 = dot(vec4(_1367, _1368, _1369, 1.0), vec4(_991, _994, _997, _1000));
        float _1391 = dot(vec4(_1367, _1368, _1369, 1.0), vec4(_992, _995, _998, _1001));
        float _1398 = dot(vec4(cbModelParam._m0[39u]), vec4(_1367, _1368, _1369, 1.0));
        _1410 = dot(vec3(isnan(0.0) ? _1391 : (isnan(_1391) ? 0.0 : max(_1391, 0.0)), isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)), isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1398) ? 0.0 : (isnan(0.0) ? _1398 : max(0.0, _1398))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1410 = 1.0;
    }
    float _1421;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1412 = dot(vec4(cbModelParam._m0[40u]), vec4(_1367, _1368, _1369, 1.0));
        _1421 = dot(vec3(isnan(0.0) ? _1370 : (isnan(_1370) ? 0.0 : max(_1370, 0.0)), isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0)), isnan(0.0) ? _1376 : (isnan(_1376) ? 0.0 : max(_1376, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1412) ? 0.0 : (isnan(0.0) ? _1412 : max(0.0, _1412))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1421 = 1.0;
    }
    float _1425 = (_1421 * cbModelParam._m0[1u].x) + (_1410 * (1.0 - cbModelParam._m0[1u].x));
    float _1435 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _522);
    float _1436 = isnan(_1435) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1435 : min(cbModelParam._m0[25u].z, _1435));
    float _1518;
    float _1520;
    float _1522;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1485 = fma(_688, cbModelParam._m0[13u].z, fma(_684, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _680)) + cbModelParam._m0[13u].w;
        float _1489 = fma(_688, cbModelParam._m0[14u].z, fma(_684, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _680)) + cbModelParam._m0[14u].w;
        float _1493 = fma(_688, cbModelParam._m0[15u].z, fma(_684, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _680)) + cbModelParam._m0[15u].w;
        float _1496 = fma(_629, cbModelParam._m0[13u].z, fma(_628, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _627));
        float _1499 = fma(_629, cbModelParam._m0[14u].z, fma(_628, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _627));
        float _1502 = fma(_629, cbModelParam._m0[15u].z, fma(_628, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _627));
        float _1530;
        if (_1496 > 0.0)
        {
            _1530 = abs((1.0 - _1485) / _1496);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1496 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1485 + 1.0) / _1496);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1530 = frontier_phi_22_20_ladder;
        }
        float _1700;
        if (_1499 > 0.0)
        {
            _1700 = abs((1.0 - _1489) / _1499);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1499 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1489 + 1.0) / _1499);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1700 = frontier_phi_31_27_ladder;
        }
        float _2144;
        if (_1502 > 0.0)
        {
            _2144 = abs((1.0 - _1493) / _1502);
        }
        else
        {
            float frontier_phi_43_38_ladder;
            if (_1502 < 0.0)
            {
                frontier_phi_43_38_ladder = abs((_1493 + 1.0) / _1502);
            }
            else
            {
                frontier_phi_43_38_ladder = 5000.0;
            }
            _2144 = frontier_phi_43_38_ladder;
        }
        float _2146 = isnan(_1700) ? _1530 : (isnan(_1530) ? _1700 : min(_1530, _1700));
        float _2147 = isnan(_2144) ? _2146 : (isnan(_2146) ? _2144 : min(_2146, _2144));
        float _2151 = (_2147 * _1496) + _1485;
        float _2152 = (_2147 * _1499) + _1489;
        float _2153 = (_2147 * _1502) + _1493;
        float _2154 = _2147 * 9.9999997473787516355514526367188e-05;
        float _2156 = (-1.0) - _2154;
        float _2158 = _2154 + 1.0;
        float frontier_phi_21_43_ladder;
        float frontier_phi_21_43_ladder_1;
        float frontier_phi_21_43_ladder_2;
        if ((_2153 > _2158) || ((_2153 < _2156) || ((_2152 > _2158) || ((_2152 < _2156) || ((_2151 < _2156) || (_2151 > _2158))))))
        {
            frontier_phi_21_43_ladder = 0.0;
            frontier_phi_21_43_ladder_1 = 0.0;
            frontier_phi_21_43_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2403 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2153, cbModelParam._m0[9u].z, fma(_2152, cbModelParam._m0[9u].y, _2151 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2153, cbModelParam._m0[10u].z, fma(_2152, cbModelParam._m0[10u].y, _2151 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2153, cbModelParam._m0[11u].z, fma(_2152, cbModelParam._m0[11u].y, _2151 * cbModelParam._m0[11u].x))), _1436);
            frontier_phi_21_43_ladder = _2403.y * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_1 = _2403.x * cbModelParam._m0[1u].y;
            frontier_phi_21_43_ladder_2 = _2403.z * cbModelParam._m0[1u].y;
        }
        _1518 = frontier_phi_21_43_ladder_1;
        _1520 = frontier_phi_21_43_ladder;
        _1522 = frontier_phi_21_43_ladder_2;
    }
    else
    {
        vec4 _1506 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_627, _628, _629), _1436);
        _1518 = _1506.x * cbModelParam._m0[1u].y;
        _1520 = _1506.y * cbModelParam._m0[1u].y;
        _1522 = _1506.z * cbModelParam._m0[1u].y;
    }
    float _1526 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _522);
    float _1527 = isnan(_1526) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1526 : min(cbModelParam._m0[25u].w, _1526));
    float _1617;
    float _1619;
    float _1621;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1581 = fma(_688, cbModelParam._m0[21u].z, fma(_684, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _680)) + cbModelParam._m0[21u].w;
        float _1585 = fma(_688, cbModelParam._m0[22u].z, fma(_684, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _680)) + cbModelParam._m0[22u].w;
        float _1589 = fma(_688, cbModelParam._m0[23u].z, fma(_684, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _680)) + cbModelParam._m0[23u].w;
        float _1592 = fma(_629, cbModelParam._m0[21u].z, fma(_628, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _627));
        float _1595 = fma(_629, cbModelParam._m0[22u].z, fma(_628, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _627));
        float _1598 = fma(_629, cbModelParam._m0[23u].z, fma(_628, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _627));
        float _1705;
        if (_1592 > 0.0)
        {
            _1705 = abs((1.0 - _1581) / _1592);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1592 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1581 + 1.0) / _1592);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1705 = frontier_phi_33_29_ladder;
        }
        float _2171;
        if (_1595 > 0.0)
        {
            _2171 = abs((1.0 - _1585) / _1595);
        }
        else
        {
            float frontier_phi_45_40_ladder;
            if (_1595 < 0.0)
            {
                frontier_phi_45_40_ladder = abs((_1585 + 1.0) / _1595);
            }
            else
            {
                frontier_phi_45_40_ladder = 5000.0;
            }
            _2171 = frontier_phi_45_40_ladder;
        }
        float _2524;
        if (_1598 > 0.0)
        {
            _2524 = abs((1.0 - _1589) / _1598);
        }
        else
        {
            float frontier_phi_57_52_ladder;
            if (_1598 < 0.0)
            {
                frontier_phi_57_52_ladder = abs((_1589 + 1.0) / _1598);
            }
            else
            {
                frontier_phi_57_52_ladder = 5000.0;
            }
            _2524 = frontier_phi_57_52_ladder;
        }
        float _2526 = isnan(_2171) ? _1705 : (isnan(_1705) ? _2171 : min(_1705, _2171));
        float _2527 = isnan(_2524) ? _2526 : (isnan(_2526) ? _2524 : min(_2526, _2524));
        float _2531 = (_2527 * _1592) + _1581;
        float _2532 = (_2527 * _1595) + _1585;
        float _2533 = (_2527 * _1598) + _1589;
        float _2534 = _2527 * 9.9999997473787516355514526367188e-05;
        float _2535 = (-1.0) - _2534;
        float _2537 = _2534 + 1.0;
        float frontier_phi_30_57_ladder;
        float frontier_phi_30_57_ladder_1;
        float frontier_phi_30_57_ladder_2;
        if ((_2533 > _2537) || ((_2533 < _2535) || ((_2532 > _2537) || ((_2532 < _2535) || ((_2531 < _2535) || (_2531 > _2537))))))
        {
            frontier_phi_30_57_ladder = 0.0;
            frontier_phi_30_57_ladder_1 = 0.0;
            frontier_phi_30_57_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2654 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2533, cbModelParam._m0[17u].z, fma(_2532, cbModelParam._m0[17u].y, _2531 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2533, cbModelParam._m0[18u].z, fma(_2532, cbModelParam._m0[18u].y, _2531 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2533, cbModelParam._m0[19u].z, fma(_2532, cbModelParam._m0[19u].y, _2531 * cbModelParam._m0[19u].x))), _1527);
            frontier_phi_30_57_ladder = _2654.z * cbModelParam._m0[1u].z;
            frontier_phi_30_57_ladder_1 = _2654.y * cbModelParam._m0[1u].z;
            frontier_phi_30_57_ladder_2 = _2654.x * cbModelParam._m0[1u].z;
        }
        _1617 = frontier_phi_30_57_ladder_2;
        _1619 = frontier_phi_30_57_ladder_1;
        _1621 = frontier_phi_30_57_ladder;
    }
    else
    {
        vec4 _1601 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_627, _628, _629), _1527);
        _1617 = _1601.x * cbModelParam._m0[1u].z;
        _1619 = _1601.y * cbModelParam._m0[1u].z;
        _1621 = _1601.z * cbModelParam._m0[1u].z;
    }
    float _1633 = ((((1.0 - _648) * ((_635 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_648 * _635)) * _619;
    float _1634 = _1633 * ((cbModelParam._m0[1u].w * (_1617 - _1518)) + _1518);
    float _1635 = _1633 * ((cbModelParam._m0[1u].w * (_1619 - _1520)) + _1520);
    float _1636 = _1633 * ((cbModelParam._m0[1u].w * (_1621 - _1522)) + _1522);
    float _1639 = fma(_1636, cbSceneParam._m0[89u].z, fma(_1635, cbSceneParam._m0[89u].y, _1634 * cbSceneParam._m0[89u].x));
    float _1642 = fma(_1636, cbSceneParam._m0[90u].z, fma(_1635, cbSceneParam._m0[90u].y, _1634 * cbSceneParam._m0[90u].x));
    float _1645 = fma(_1636, cbSceneParam._m0[91u].z, fma(_1635, cbSceneParam._m0[91u].y, _1634 * cbSceneParam._m0[91u].x));
    float _1679 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1683 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1687 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1691 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1692 = _1679 / _1691;
    float _1693 = _1683 / _1691;
    float _1694 = _1687 / _1691;
    float _1841;
    float _1842;
    float _1843;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1721 = ((uint(_1694 > cbSceneParam._m0[59u].y) + uint(_1694 > cbSceneParam._m0[59u].x)) + uint(_1694 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1722 = _1721 + 43u;
        uint _1730 = _1721 + 44u;
        uint _1738 = _1721 + 45u;
        uint _1746 = _1721 + 46u;
        float _1757 = fma(_1691, cbSceneParam._m0[_1722].w, fma(_1687, cbSceneParam._m0[_1722].z, fma(_1683, cbSceneParam._m0[_1722].y, _1679 * cbSceneParam._m0[_1722].x)));
        float _1761 = fma(_1691, cbSceneParam._m0[_1730].w, fma(_1687, cbSceneParam._m0[_1730].z, fma(_1683, cbSceneParam._m0[_1730].y, _1679 * cbSceneParam._m0[_1730].x)));
        float _1769 = fma(_1691, cbSceneParam._m0[_1746].w, fma(_1687, cbSceneParam._m0[_1746].z, fma(_1683, cbSceneParam._m0[_1746].y, _1679 * cbSceneParam._m0[_1746].x)));
        float _1774 = cbSceneParam._m0[33u].z * _1769;
        float _1776 = cbSceneParam._m0[33u].w * _1769;
        float _1779 = fma(_1691, cbSceneParam._m0[_1738].w, fma(_1687, cbSceneParam._m0[_1738].z, fma(_1683, cbSceneParam._m0[_1738].y, _1679 * cbSceneParam._m0[_1738].x))) / _1769;
        float _1827 = (cbSceneParam._m0[33u].x - sqrt(((_1693 * _1693) + (_1692 * _1692)) + (_1694 * _1694))) * cbSceneParam._m0[33u].y;
        float _3816 = isnan(0.0) ? _1827 : (isnan(_1827) ? 0.0 : max(_1827, 0.0));
        float _1834 = (isnan(1.0) ? _3816 : (isnan(_3816) ? 1.0 : min(_3816, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1774 + _1757) / _1769, (_1776 + _1761) / _1769), _1779), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1776 + _1757) / _1769, (_1761 - _1774) / _1769), _1779), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1757 - _1774) / _1769, (_1761 - _1776) / _1769), _1779), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1757 - _1776) / _1769, (_1774 + _1761) / _1769), _1779), 0.0)).x), vec4(0.25)));
        _1841 = 1.0 - (_1834 * cbSceneParam._m0[34u].x);
        _1842 = 1.0 - (_1834 * cbSceneParam._m0[34u].y);
        _1843 = 1.0 - (_1834 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1841 = 1.0;
        _1842 = 1.0;
        _1843 = 1.0;
    }
    float _1907;
    float _1909;
    float _1911;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1895 = fma(_1691, cbSceneParam._m0[63u].w, fma(_1687, cbSceneParam._m0[63u].z, fma(_1683, cbSceneParam._m0[63u].y, _1679 * cbSceneParam._m0[63u].x)));
        float _1896 = fma(_1691, cbSceneParam._m0[60u].w, fma(_1687, cbSceneParam._m0[60u].z, fma(_1683, cbSceneParam._m0[60u].y, _1679 * cbSceneParam._m0[60u].x))) / _1895;
        float _1897 = fma(_1691, cbSceneParam._m0[61u].w, fma(_1687, cbSceneParam._m0[61u].z, fma(_1683, cbSceneParam._m0[61u].y, _1679 * cbSceneParam._m0[61u].x))) / _1895;
        float frontier_phi_42_41_ladder;
        float frontier_phi_42_41_ladder_1;
        float frontier_phi_42_41_ladder_2;
        if ((((_1896 >= cbSceneParam._m0[64u].x) && (_1897 >= cbSceneParam._m0[64u].y)) && (_1896 <= cbSceneParam._m0[64u].z)) && (_1897 <= cbSceneParam._m0[64u].w))
        {
            float _2184 = fma(_1691, cbSceneParam._m0[62u].w, fma(_1687, cbSceneParam._m0[62u].z, fma(_1683, cbSceneParam._m0[62u].y, _1679 * cbSceneParam._m0[62u].x))) / _1895;
            float _2188 = isnan(cbSceneParam._m0[41u].w) ? _2184 : (isnan(_2184) ? cbSceneParam._m0[41u].w : max(_2184, cbSceneParam._m0[41u].w));
            float _2231 = (cbSceneParam._m0[33u].x - sqrt(((_1693 * _1693) + (_1692 * _1692)) + (_1694 * _1694))) * cbSceneParam._m0[33u].y;
            float _3832 = isnan(0.0) ? _2231 : (isnan(_2231) ? 0.0 : max(_2231, 0.0));
            float _2238 = (isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1896, cbSceneParam._m0[33u].w + _1897), _2188), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1896, _1897 - cbSceneParam._m0[33u].z), _2188), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1896 - cbSceneParam._m0[33u].z, _1897 - cbSceneParam._m0[33u].w), _2188), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1896 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1897), _2188), 0.0)).x), vec4(0.25)));
            float _2242 = 1.0 - (_2238 * cbSceneParam._m0[34u].x);
            float _2243 = 1.0 - (_2238 * cbSceneParam._m0[34u].y);
            float _2244 = 1.0 - (_2238 * cbSceneParam._m0[34u].z);
            frontier_phi_42_41_ladder = isnan(_2243) ? _1842 : (isnan(_1842) ? _2243 : min(_1842, _2243));
            frontier_phi_42_41_ladder_1 = isnan(_2242) ? _1841 : (isnan(_1841) ? _2242 : min(_1841, _2242));
            frontier_phi_42_41_ladder_2 = isnan(_2244) ? _1843 : (isnan(_1843) ? _2244 : min(_1843, _2244));
        }
        else
        {
            frontier_phi_42_41_ladder = _1842;
            frontier_phi_42_41_ladder_1 = _1841;
            frontier_phi_42_41_ladder_2 = _1843;
        }
        _1907 = frontier_phi_42_41_ladder_1;
        _1909 = frontier_phi_42_41_ladder;
        _1911 = frontier_phi_42_41_ladder_2;
    }
    else
    {
        _1907 = _1841;
        _1909 = _1842;
        _1911 = _1843;
    }
    uvec4 _1916 = floatBitsToUint(cbInstanceData._m0[_593 + 5u]);
    uint _1918 = _1916.x * 14u;
    uint _1919 = _1918 + 13u;
    float _1924 = _619 + (-1.0);
    float _1927 = (cbLight._m0[_1919].x * _1924) + 1.0;
    float _1928 = (cbLight._m0[_1919].y * _1924) + 1.0;
    uint _1929 = _1918 + 5u;
    float _1935 = isnan(1.0) ? _1928 : (isnan(_1928) ? 1.0 : min(_1928, 1.0));
    uint _1939 = _1918 + 4u;
    float _1948 = isnan(1.0) ? _1927 : (isnan(_1927) ? 1.0 : min(_1927, 1.0));
    uint _1952 = _1918 | 1u;
    float _1963 = dot(vec3(cbLight._m0[_1918].xyz), vec3(_519, _520, _521));
    float _1966 = dot(vec3(cbLight._m0[_1952].xyz), vec3(_519, _520, _521));
    float _3868 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
    float _3879 = isnan(0.0) ? _1966 : (isnan(_1966) ? 0.0 : max(_1966, 0.0));
    float _1971 = (isnan(1.0) ? _3868 : (isnan(_3868) ? 1.0 : min(_3868, 1.0))) * 0.3183098733425140380859375;
    float _1973 = (isnan(1.0) ? _3879 : (isnan(_3879) ? 1.0 : min(_3879, 1.0))) * 0.3183098733425140380859375;
    float _1980 = ((cbLight._m0[_1929].x * _1935) * _1973) + (((cbLight._m0[_1939].x * _1907) * _1948) * _1971);
    float _1981 = ((_1935 * cbLight._m0[_1929].y) * _1973) + (((cbLight._m0[_1939].y * _1909) * _1948) * _1971);
    float _1982 = ((_1935 * cbLight._m0[_1929].z) * _1973) + (((cbLight._m0[_1939].z * _1911) * _1948) * _1971);
    uint _1984 = _1918 + 8u;
    float _1997 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1918].w)) * _522) * 0.949999988079071044921875);
    float _1998 = _1997 * _1997;
    float _1999 = cbLight._m0[_1918].x + _546;
    float _2000 = cbLight._m0[_1918].y + _547;
    float _2001 = cbLight._m0[_1918].z + _548;
    float _2005 = inversesqrt(dot(vec3(_1999, _2000, _2001), vec3(_1999, _2000, _2001)));
    float _2006 = _2005 * _1999;
    float _2007 = _2005 * _2000;
    float _2008 = _2005 * _2001;
    float _2009 = dot(vec3(_519, _520, _521), vec3(cbLight._m0[_1918].xyz));
    float _3890 = isnan(0.0) ? _2009 : (isnan(_2009) ? 0.0 : max(_2009, 0.0));
    float _2012 = isnan(1.0) ? _3890 : (isnan(_3890) ? 1.0 : min(_3890, 1.0));
    float _3901 = isnan(0.0) ? _620 : (isnan(_620) ? 0.0 : max(_620, 0.0));
    float _2013 = isnan(1.0) ? _3901 : (isnan(_3901) ? 1.0 : min(_3901, 1.0));
    float _2014 = dot(vec3(_519, _520, _521), vec3(_2006, _2007, _2008));
    float _3912 = isnan(0.0) ? _2014 : (isnan(_2014) ? 0.0 : max(_2014, 0.0));
    float _2017 = isnan(1.0) ? _3912 : (isnan(_3912) ? 1.0 : min(_3912, 1.0));
    float _2018 = dot(vec3(cbLight._m0[_1918].xyz), vec3(_2006, _2007, _2008));
    float _3923 = isnan(0.0) ? _2018 : (isnan(_2018) ? 0.0 : max(_2018, 0.0));
    float _2022 = _1998 * _1998;
    float _2026 = ((_2017 * _2017) * (_2022 + (-1.0))) + 1.0;
    float _2037 = (exp2(log2(1.0 - (isnan(1.0) ? _3923 : (isnan(_3923) ? 1.0 : min(_3923, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2038 = 1.0 - _1998;
    float _2049 = (0.5 / (((_2013 * ((_2012 * _2038) + _1998)) + 9.9999999392252902907785028219223e-09) + (((_2013 * _2038) + _1998) * _2012))) * _2012;
    float _3934 = isnan(0.0) ? _2049 : (isnan(_2049) ? 0.0 : max(_2049, 0.0));
    float _2051 = (isnan(1.0) ? _3934 : (isnan(_3934) ? 1.0 : min(_3934, 1.0))) * (_2022 / ((_2026 * _2026) * 3.141590118408203125));
    uint _2065 = _1918 + 9u;
    float _2076 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1952].w)) * _522) * 0.949999988079071044921875);
    float _2077 = _2076 * _2076;
    float _2078 = cbLight._m0[_1952].x + _546;
    float _2079 = cbLight._m0[_1952].y + _547;
    float _2080 = cbLight._m0[_1952].z + _548;
    float _2084 = inversesqrt(dot(vec3(_2078, _2079, _2080), vec3(_2078, _2079, _2080)));
    float _2085 = _2084 * _2078;
    float _2086 = _2084 * _2079;
    float _2087 = _2084 * _2080;
    float _2088 = dot(vec3(_519, _520, _521), vec3(cbLight._m0[_1952].xyz));
    float _3945 = isnan(0.0) ? _2088 : (isnan(_2088) ? 0.0 : max(_2088, 0.0));
    float _2091 = isnan(1.0) ? _3945 : (isnan(_3945) ? 1.0 : min(_3945, 1.0));
    float _2092 = dot(vec3(_519, _520, _521), vec3(_2085, _2086, _2087));
    float _3956 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    float _2095 = isnan(1.0) ? _3956 : (isnan(_3956) ? 1.0 : min(_3956, 1.0));
    float _2096 = dot(vec3(cbLight._m0[_1952].xyz), vec3(_2085, _2086, _2087));
    float _3967 = isnan(0.0) ? _2096 : (isnan(_2096) ? 0.0 : max(_2096, 0.0));
    float _2100 = _2077 * _2077;
    float _2104 = ((_2095 * _2095) * (_2100 + (-1.0))) + 1.0;
    float _2113 = (exp2(log2(1.0 - (isnan(1.0) ? _3967 : (isnan(_3967) ? 1.0 : min(_3967, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2114 = 1.0 - _2077;
    float _2124 = (0.5 / (((_2013 * ((_2091 * _2114) + _2077)) + 9.9999999392252902907785028219223e-09) + (((_2013 * _2114) + _2077) * _2091))) * _2091;
    float _3978 = isnan(0.0) ? _2124 : (isnan(_2124) ? 0.0 : max(_2124, 0.0));
    float _2126 = (isnan(1.0) ? _3978 : (isnan(_3978) ? 1.0 : min(_3978, 1.0))) * (_2100 / ((_2104 * _2104) * 3.141590118408203125));
    float _2136 = (((_2113 * cbLight._m0[_2065].x) * _2126) * _1935) + ((((cbLight._m0[_1984].x * _1907) * _2037) * _2051) * _1948);
    float _2137 = (((_2113 * cbLight._m0[_2065].y) * _2126) * _1935) + ((((cbLight._m0[_1984].y * _1909) * _2037) * _2051) * _1948);
    float _2138 = (((_2113 * cbLight._m0[_2065].z) * _2126) * _1935) + ((((cbLight._m0[_1984].z * _1911) * _2037) * _2051) * _1948);
    float _2301;
    float _2303;
    float _2305;
    float _2307;
    float _2309;
    float _2311;
    if (_1916.y == 0u)
    {
        uvec4 _2256 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2257 = _2256.x;
        uint _2268 = uint((float(_2256.y) * floor(float(uint(cbSceneParam._m0[85u].y * _555) / _2257))) + floor(float(uint(cbSceneParam._m0[85u].x * _554) / _2257)));
        float _2278 = (log2(_1694 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2279 = isnan(0.0) ? _2278 : (isnan(_2278) ? 0.0 : max(_2278, 0.0));
        uint _2282 = uint(isnan(14.0) ? _2279 : (isnan(_2279) ? 14.0 : min(_2279, 14.0)));
        uvec4 _2287 = texelFetch(g_lightClusterGridBuffer, int(((_2282 << 2u) + (_2268 << 6u)) >> 2u));
        uint _2288 = _2287.x;
        uint _2289 = _2256.z;
        float _2412;
        float _2414;
        float _2416;
        float _2418;
        float _2420;
        float _2422;
        if (((((1u << ((_2289 >> 4u) & 15u)) + 4294967295u) & _2288) == 0u) || ((_2289 & 240u) == 0u))
        {
            _2412 = 0.0;
            _2414 = 0.0;
            _2416 = 0.0;
            _2418 = 0.0;
            _2420 = 0.0;
            _2422 = 0.0;
        }
        else
        {
            float _2413;
            float _2415;
            float _2417;
            float _2419;
            float _2421;
            float _2423;
            float _2582 = 0.0;
            float _2583 = 0.0;
            float _2584 = 0.0;
            float _2585 = 0.0;
            float _2586 = 0.0;
            float _2587 = 0.0;
            uint _2588 = 0u;
            uint _2597;
            bool _2598;
            for (;;)
            {
                _2597 = texelFetch(g_lightClassification, int((((_2282 << 5u) + (_2268 << 9u)) + (_2588 << 2u)) >> 2u)).x;
                _2598 = _2597 == 0u;
                float frontier_phi_66_pred;
                float frontier_phi_66_pred_1;
                float frontier_phi_66_pred_2;
                float frontier_phi_66_pred_3;
                float frontier_phi_66_pred_4;
                float frontier_phi_66_pred_5;
                if (_2598)
                {
                    frontier_phi_66_pred = _2583;
                    frontier_phi_66_pred_1 = _2582;
                    frontier_phi_66_pred_2 = _2584;
                    frontier_phi_66_pred_3 = _2587;
                    frontier_phi_66_pred_4 = _2586;
                    frontier_phi_66_pred_5 = _2585;
                }
                else
                {
                    float _2727;
                    float _2728;
                    float _2729;
                    float _2730;
                    float _2731;
                    float _2732;
                    uint _2733;
                    _2727 = _2582;
                    _2728 = _2583;
                    _2729 = _2584;
                    _2730 = _2585;
                    _2731 = _2586;
                    _2732 = _2587;
                    _2733 = _2597;
                    float _2659;
                    float _2660;
                    float _2661;
                    float _2662;
                    float _2663;
                    float _2664;
                    for (;;)
                    {
                        uint _2737 = uint(findLSB(_2733)) + (_2588 << 5u);
                        uint _2734 = (_2733 + 4294967295u) & _2733;
                        uint _2739 = _2737 * 48u;
                        vec4 _2753 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2739)).x, texelFetch(g_PointLightRenderingBuffer, int(_2739 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2739 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2739 + 3u)).x));
                        uint _2759 = (_2737 * 48u) + 4u;
                        vec4 _2772 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2759)).x, texelFetch(g_PointLightRenderingBuffer, int(_2759 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2759 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2759 + 3u)).x));
                        uint _2778 = (_2737 * 48u) + 8u;
                        vec3 _2789 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2778)).x, texelFetch(g_PointLightRenderingBuffer, int(_2778 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2778 + 2u)).x));
                        float _2793 = _2753.x - _1692;
                        float _2794 = _2753.y - _1693;
                        float _2795 = _2753.z - _1694;
                        float _2796 = dot(vec3(_2793, _2794, _2795), vec3(_2793, _2794, _2795));
                        float _2799 = inversesqrt(_2796);
                        float _2800 = _2799 * _2793;
                        float _2801 = _2799 * _2794;
                        float _2802 = _2799 * _2795;
                        float _2803 = dot(vec3(_574, _577, _580), vec3(_2800, _2801, _2802));
                        float _2808 = 1.0 - (_2796 * _2753.w);
                        float _3999 = isnan(0.0) ? _2808 : (isnan(_2808) ? 0.0 : max(_2808, 0.0));
                        float _2809 = isnan(1.0) ? _3999 : (isnan(_3999) ? 1.0 : min(_3999, 1.0));
                        float _2810 = sqrt(_2796) * _2772.w;
                        float _2813 = 1.39999997615814208984375 / (_2810 + 1.39999997615814208984375);
                        float _2814 = _2813 * _2813;
                        float _2817 = ((1.0 - _2814) * _2803) + _2814;
                        float _2820 = _2810 * _2810;
                        float _2824 = ((isnan(0.0) ? _2817 : (isnan(_2817) ? 0.0 : max(_2817, 0.0))) * _2809) / ((_2820 * 0.699999988079071044921875) + 1.0);
                        float _2828 = (-0.0) - _1692;
                        float _2829 = (-0.0) - _1693;
                        float _2830 = (-0.0) - _1694;
                        float _2834 = inversesqrt(dot(vec3(_2828, _2829, _2830), vec3(_2828, _2829, _2830)));
                        float _2835 = _2834 * _2828;
                        float _2836 = _2834 * _2829;
                        float _2837 = _2834 * _2830;
                        float _2844 = exp2(log2(1.0 / ((_2820 * 3.5) + 5.0)) * 0.25);
                        float _2845 = 1.0 - _635;
                        float _2852 = sqrt(1.0 - ((1.0 - (_2845 * _2845)) * (1.0 - (_2844 * _2844))));
                        float _2853 = _2852 * _2852;
                        float _2854 = _2853 * _2853;
                        float _2855 = _2835 + _2800;
                        float _2856 = _2836 + _2801;
                        float _2857 = _2837 + _2802;
                        float _2861 = inversesqrt(dot(vec3(_2855, _2856, _2857), vec3(_2855, _2856, _2857)));
                        float _2865 = dot(vec3(_574, _577, _580), vec3(_2835, _2836, _2837));
                        float _4015 = isnan(0.0) ? _2865 : (isnan(_2865) ? 0.0 : max(_2865, 0.0));
                        float _2868 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
                        float _2869 = dot(vec3(_574, _577, _580), vec3(_2861 * _2855, _2861 * _2856, _2861 * _2857));
                        float _4026 = isnan(0.0) ? _2869 : (isnan(_2869) ? 0.0 : max(_2869, 0.0));
                        float _2872 = isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0));
                        float _2876 = ((_2872 * _2872) * (_2854 + (-1.0))) + 1.0;
                        float _2877 = _2813 * _2853;
                        float _2878 = _2877 * _2877;
                        float _2881 = ((1.0 - _2878) * _2803) + _2878;
                        float _4037 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
                        float _2882 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
                        float _2883 = 1.0 - _2853;
                        float _2893 = (0.5 / (((_2882 * ((_2868 * _2883) + _2853)) + 9.9999999392252902907785028219223e-09) + (((_2882 * _2883) + _2853) * _2868))) * _2882;
                        float _4048 = isnan(0.0) ? _2893 : (isnan(_2893) ? 0.0 : max(_2893, 0.0));
                        float _2904 = (((_2854 * 3.1415927410125732421875) * (isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0)))) / ((_2876 * _2876) * ((_2820 * 2.1991131305694580078125) + 3.141590118408203125))) * _2809;
                        _2662 = (_2824 * _2772.x) + _2730;
                        _2663 = (_2824 * _2772.y) + _2731;
                        _2664 = (_2824 * _2772.z) + _2732;
                        _2659 = (_2904 * _2789.x) + _2727;
                        _2660 = (_2904 * _2789.y) + _2728;
                        _2661 = (_2904 * _2789.z) + _2729;
                        if (_2734 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2727 = _2659;
                            _2728 = _2660;
                            _2729 = _2661;
                            _2730 = _2662;
                            _2731 = _2663;
                            _2732 = _2664;
                            _2733 = _2734;
                        }
                    }
                    frontier_phi_66_pred = _2660;
                    frontier_phi_66_pred_1 = _2659;
                    frontier_phi_66_pred_2 = _2661;
                    frontier_phi_66_pred_3 = _2664;
                    frontier_phi_66_pred_4 = _2663;
                    frontier_phi_66_pred_5 = _2662;
                }
                _2415 = frontier_phi_66_pred;
                _2413 = frontier_phi_66_pred_1;
                _2417 = frontier_phi_66_pred_2;
                _2423 = frontier_phi_66_pred_3;
                _2421 = frontier_phi_66_pred_4;
                _2419 = frontier_phi_66_pred_5;
                uint _2589 = _2588 + 1u;
                if (_2589 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2582 = _2413;
                    _2583 = _2415;
                    _2584 = _2417;
                    _2585 = _2419;
                    _2586 = _2421;
                    _2587 = _2423;
                    _2588 = _2589;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2412 = _2413;
            _2414 = _2415;
            _2416 = _2417;
            _2418 = _2419;
            _2420 = _2421;
            _2422 = _2423;
        }
        uvec4 _2426 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2427 = _2426.z;
        uint _2429 = (_2427 >> 8u) & 15u;
        float _2550;
        float _2552;
        float _2554;
        float _2556;
        float _2558;
        float _2560;
        if (((4294967295u << _2429) & _2288) == 0u)
        {
            _2550 = _2412;
            _2552 = _2414;
            _2554 = _2416;
            _2556 = _2418;
            _2558 = _2420;
            _2560 = _2422;
        }
        else
        {
            float _2575 = inversesqrt(dot(vec3(_1692, _1693, _1694), vec3(_1692, _1693, _1694)));
            float _2576 = _2575 * _1692;
            float _2577 = _2575 * _1693;
            float _2578 = _2575 * _1694;
            float frontier_phi_59_60_ladder;
            float frontier_phi_59_60_ladder_1;
            float frontier_phi_59_60_ladder_2;
            float frontier_phi_59_60_ladder_3;
            float frontier_phi_59_60_ladder_4;
            float frontier_phi_59_60_ladder_5;
            if (_2429 < ((_2427 >> 12u) & 15u))
            {
                float _2551;
                float _2553;
                float _2555;
                float _2557;
                float _2559;
                float _2561;
                float _2710 = _2412;
                float _2711 = _2414;
                float _2712 = _2416;
                float _2713 = _2418;
                float _2714 = _2420;
                float _2715 = _2422;
                uint _2716 = _2429;
                uint _2725;
                bool _2726;
                for (;;)
                {
                    _2725 = texelFetch(g_lightClassification, int((((_2282 << 5u) + (_2268 << 9u)) + (_2716 << 2u)) >> 2u)).x;
                    _2726 = _2725 == 0u;
                    float frontier_phi_72_pred;
                    float frontier_phi_72_pred_1;
                    float frontier_phi_72_pred_2;
                    float frontier_phi_72_pred_3;
                    float frontier_phi_72_pred_4;
                    float frontier_phi_72_pred_5;
                    if (_2726)
                    {
                        frontier_phi_72_pred = _2711;
                        frontier_phi_72_pred_1 = _2710;
                        frontier_phi_72_pred_2 = _2715;
                        frontier_phi_72_pred_3 = _2714;
                        frontier_phi_72_pred_4 = _2713;
                        frontier_phi_72_pred_5 = _2712;
                    }
                    else
                    {
                        float _2909;
                        float _2910;
                        float _2911;
                        float _2912;
                        float _2913;
                        float _2914;
                        float _3202;
                        float _3203;
                        float _3204;
                        float _3205;
                        float _3206;
                        float _3207;
                        float _2922 = _2710;
                        float _2923 = _2711;
                        float _2924 = _2712;
                        float _2925 = _2713;
                        float _2926 = _2714;
                        float _2927 = _2715;
                        uint _2928 = _2725;
                        uint _2929;
                        vec4 _2954;
                        float _2955;
                        vec4 _2970;
                        vec3 _2982;
                        vec4 _2997;
                        vec4 _3012;
                        float _3058;
                        bool _3059;
                        for (;;)
                        {
                            uint _2939 = ((_2716 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2928));
                            _2929 = (_2928 + 4294967295u) & _2928;
                            uint _2941 = _2939 * 40u;
                            _2954 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2941)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2941 + 3u)).x));
                            _2955 = _2954.w;
                            uint _2957 = (_2939 * 40u) + 4u;
                            _2970 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2957)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2957 + 3u)).x));
                            uint _2972 = (_2939 * 40u) + 8u;
                            _2982 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2972)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2972 + 2u)).x));
                            uint _2984 = (_2939 * 40u) + 16u;
                            _2997 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2984)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2984 + 3u)).x));
                            uint _2999 = (_2939 * 40u) + 20u;
                            _3012 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2999)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2999 + 3u)).x));
                            uint _3014 = (_2939 * 40u) + 24u;
                            vec4 _3027 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3014)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3014 + 3u)).x));
                            uint _3033 = (_2939 * 40u) + 28u;
                            vec4 _3046 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3033)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3033 + 3u)).x));
                            _3058 = fma(_1694, _3046.z, fma(_1693, _3046.y, _3046.x * _1692)) + _3046.w;
                            _3059 = !((fma(_1694, _3027.z, fma(_1693, _3027.y, _3027.x * _1692)) + _3027.w) <= 0.0);
                            float frontier_phi_78_pred;
                            float frontier_phi_78_pred_1;
                            float frontier_phi_78_pred_2;
                            float frontier_phi_78_pred_3;
                            float frontier_phi_78_pred_4;
                            float frontier_phi_78_pred_5;
                            if (_3059)
                            {
                                float _3086 = _2954.x - _1692;
                                float _3087 = _2954.y - _1693;
                                float _3088 = _2954.z - _1694;
                                float _3089 = dot(vec3(_3086, _3087, _3088), vec3(_3086, _3087, _3088));
                                float _3092 = inversesqrt(_3089);
                                float _3093 = _3092 * _3086;
                                float _3094 = _3092 * _3087;
                                float _3095 = _3092 * _3088;
                                float _3099 = 1.0 - (_3089 / (_2955 * _2955));
                                float _4059 = isnan(0.0) ? _3099 : (isnan(_3099) ? 0.0 : max(_3099, 0.0));
                                float _3100 = isnan(1.0) ? _4059 : (isnan(_4059) ? 1.0 : min(_4059, 1.0));
                                float _3104 = sqrt(_3089) * _2970.w;
                                float _3106 = 1.39999997615814208984375 / (_3104 + 1.39999997615814208984375);
                                float _3107 = _3106 * _3106;
                                float _3110 = ((1.0 - _3107) * dot(vec3(_3093, _3094, _3095), vec3(_574, _577, _580))) + _3107;
                                float _3113 = _3104 * _3104;
                                float _3117 = (fma(_1694, _2997.z, fma(_1693, _2997.y, _2997.x * _1692)) + _2997.w) / _3058;
                                float _3118 = (fma(_1694, _3012.z, fma(_1693, _3012.y, _3012.x * _1692)) + _3012.w) / _3058;
                                float _3122 = 1.0 - dot(vec2(_3117, _3118), vec2(_3117, _3118));
                                float _4075 = isnan(0.0) ? _3122 : (isnan(_3122) ? 0.0 : max(_3122, 0.0));
                                float _3123 = isnan(1.0) ? _4075 : (isnan(_4075) ? 1.0 : min(_4075, 1.0));
                                float _3124 = _3123 * (((isnan(0.0) ? _3110 : (isnan(_3110) ? 0.0 : max(_3110, 0.0))) * _3100) / ((_3113 * 0.699999988079071044921875) + 1.0));
                                float _3136 = exp2(log2(1.0 / ((_3113 * 3.5) + 5.0)) * 0.25);
                                float _3137 = 1.0 - _635;
                                float _3144 = sqrt(1.0 - ((1.0 - (_3137 * _3137)) * (1.0 - (_3136 * _3136))));
                                float _3145 = _3144 * _3144;
                                float _3146 = _3145 * _3145;
                                float _3147 = _3093 - _2576;
                                float _3148 = _3094 - _2577;
                                float _3149 = _3095 - _2578;
                                float _3153 = inversesqrt(dot(vec3(_3147, _3148, _3149), vec3(_3147, _3148, _3149)));
                                float _3157 = dot(vec3(_574, _577, _580), vec3((-0.0) - _2576, (-0.0) - _2577, (-0.0) - _2578));
                                float _4086 = isnan(0.0) ? _3157 : (isnan(_3157) ? 0.0 : max(_3157, 0.0));
                                float _3160 = isnan(1.0) ? _4086 : (isnan(_4086) ? 1.0 : min(_4086, 1.0));
                                float _3161 = dot(vec3(_574, _577, _580), vec3(_3153 * _3147, _3153 * _3148, _3153 * _3149));
                                float _4097 = isnan(0.0) ? _3161 : (isnan(_3161) ? 0.0 : max(_3161, 0.0));
                                float _3164 = isnan(1.0) ? _4097 : (isnan(_4097) ? 1.0 : min(_4097, 1.0));
                                float _3168 = ((_3164 * _3164) * (_3146 + (-1.0))) + 1.0;
                                float _3169 = _3106 * _3145;
                                float _3170 = _3169 * _3169;
                                float _3176 = ((1.0 - _3170) * dot(vec3(_574, _577, _580), vec3(_3093, _3094, _3095))) + _3170;
                                float _4108 = isnan(0.0) ? _3176 : (isnan(_3176) ? 0.0 : max(_3176, 0.0));
                                float _3177 = isnan(1.0) ? _4108 : (isnan(_4108) ? 1.0 : min(_4108, 1.0));
                                float _3178 = 1.0 - _3145;
                                float _3188 = (0.5 / (((_3177 * ((_3160 * _3178) + _3145)) + 9.9999999392252902907785028219223e-09) + (((_3177 * _3178) + _3145) * _3160))) * _3177;
                                float _4119 = isnan(0.0) ? _3188 : (isnan(_3188) ? 0.0 : max(_3188, 0.0));
                                float _3198 = (_3123 * _3100) * (((_3146 * 3.1415927410125732421875) * (isnan(1.0) ? _4119 : (isnan(_4119) ? 1.0 : min(_4119, 1.0)))) / ((_3168 * _3168) * ((_3113 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_78_pred = _3198 * _2982.y;
                                frontier_phi_78_pred_1 = _3198 * _2982.x;
                                frontier_phi_78_pred_2 = _3124 * _2970.z;
                                frontier_phi_78_pred_3 = _3124 * _2970.y;
                                frontier_phi_78_pred_4 = _3124 * _2970.x;
                                frontier_phi_78_pred_5 = _3198 * _2982.z;
                            }
                            else
                            {
                                frontier_phi_78_pred = 0.0;
                                frontier_phi_78_pred_1 = 0.0;
                                frontier_phi_78_pred_2 = 0.0;
                                frontier_phi_78_pred_3 = 0.0;
                                frontier_phi_78_pred_4 = 0.0;
                                frontier_phi_78_pred_5 = 0.0;
                            }
                            _3203 = frontier_phi_78_pred;
                            _3202 = frontier_phi_78_pred_1;
                            _3207 = frontier_phi_78_pred_2;
                            _3206 = frontier_phi_78_pred_3;
                            _3205 = frontier_phi_78_pred_4;
                            _3204 = frontier_phi_78_pred_5;
                            _2912 = _3205 + _2925;
                            _2913 = _3206 + _2926;
                            _2914 = _3207 + _2927;
                            _2909 = _3202 + _2922;
                            _2910 = _3203 + _2923;
                            _2911 = _3204 + _2924;
                            if (_2929 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2922 = _2909;
                                _2923 = _2910;
                                _2924 = _2911;
                                _2925 = _2912;
                                _2926 = _2913;
                                _2927 = _2914;
                                _2928 = _2929;
                                continue;
                            }
                        }
                        frontier_phi_72_pred = _2910;
                        frontier_phi_72_pred_1 = _2909;
                        frontier_phi_72_pred_2 = _2914;
                        frontier_phi_72_pred_3 = _2913;
                        frontier_phi_72_pred_4 = _2912;
                        frontier_phi_72_pred_5 = _2911;
                    }
                    _2553 = frontier_phi_72_pred;
                    _2551 = frontier_phi_72_pred_1;
                    _2561 = frontier_phi_72_pred_2;
                    _2559 = frontier_phi_72_pred_3;
                    _2557 = frontier_phi_72_pred_4;
                    _2555 = frontier_phi_72_pred_5;
                    uint _2717 = _2716 + 1u;
                    if (_2717 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2710 = _2551;
                        _2711 = _2553;
                        _2712 = _2555;
                        _2713 = _2557;
                        _2714 = _2559;
                        _2715 = _2561;
                        _2716 = _2717;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_59_60_ladder = _2561;
                frontier_phi_59_60_ladder_1 = _2557;
                frontier_phi_59_60_ladder_2 = _2555;
                frontier_phi_59_60_ladder_3 = _2553;
                frontier_phi_59_60_ladder_4 = _2551;
                frontier_phi_59_60_ladder_5 = _2559;
            }
            else
            {
                frontier_phi_59_60_ladder = _2422;
                frontier_phi_59_60_ladder_1 = _2418;
                frontier_phi_59_60_ladder_2 = _2416;
                frontier_phi_59_60_ladder_3 = _2414;
                frontier_phi_59_60_ladder_4 = _2412;
                frontier_phi_59_60_ladder_5 = _2420;
            }
            _2550 = frontier_phi_59_60_ladder_4;
            _2552 = frontier_phi_59_60_ladder_3;
            _2554 = frontier_phi_59_60_ladder_2;
            _2556 = frontier_phi_59_60_ladder_1;
            _2558 = frontier_phi_59_60_ladder_5;
            _2560 = frontier_phi_59_60_ladder;
        }
        float _2565 = isnan(1.0) ? _619 : (isnan(_619) ? 1.0 : min(_619, 1.0));
        _2301 = (_2565 * _2556) + _1980;
        _2303 = (_2565 * _2558) + _1981;
        _2305 = (_2565 * _2560) + _1982;
        _2307 = ((_2550 * 0.039999999105930328369140625) * _2565) + _2136;
        _2309 = ((_2552 * 0.039999999105930328369140625) * _2565) + _2137;
        _2311 = ((_2554 * 0.039999999105930328369140625) * _2565) + _2138;
    }
    else
    {
        _2301 = _1980;
        _2303 = _1981;
        _2305 = _1982;
        _2307 = _2136;
        _2309 = _2137;
        _2311 = _2138;
    }
    uint _2317 = _595 + uint(cbMatDynParam._m0[0u].w);
    float _4135 = isnan(0.0) ? _605 : (isnan(_605) ? 0.0 : max(_605, 0.0));
    float _4146 = isnan(0.0) ? _606 : (isnan(_606) ? 0.0 : max(_606, 0.0));
    float _4157 = isnan(0.0) ? _607 : (isnan(_607) ? 0.0 : max(_607, 0.0));
    float _2342 = (((isnan(1.0) ? _4135 : (isnan(_4135) ? 1.0 : min(_4135, 1.0))) * (_2301 + ((isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0))) * _619))) + ((_2307 + ((isnan(0.0) ? _1639 : (isnan(_1639) ? 0.0 : max(_1639, 0.0))) * _1425)) * cbPerFrame._m0[3u].x)) + (((_463.x * _283) * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_2317].x);
    float _2344 = ((((_463.y * _283) * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_2317].y) + ((_2309 + ((isnan(0.0) ? _1642 : (isnan(_1642) ? 0.0 : max(_1642, 0.0))) * _1425)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4146 : (isnan(_4146) ? 1.0 : min(_4146, 1.0))) * (_2303 + ((isnan(0.0) ? _1349 : (isnan(_1349) ? 0.0 : max(_1349, 0.0))) * _619)));
    float _2346 = ((((_463.z * _283) * cbMtdParam._m0[9u].z) * cbInstanceData._m0[_2317].z) + ((_2311 + ((isnan(0.0) ? _1645 : (isnan(_1645) ? 0.0 : max(_1645, 0.0))) * _1425)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4157 : (isnan(_4157) ? 1.0 : min(_4157, 1.0))) * (_2305 + ((isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0))) * _619)));
    uint _2350 = _593 + 6u;
    float _2358 = _554 / cbSceneParam._m0[86u].x;
    float _2359 = _555 / cbSceneParam._m0[86u].y;
    vec4 _2373 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2358, _2359, (log2((isnan(cbSceneParam._m0[77u].w) ? _541 : (isnan(_541) ? cbSceneParam._m0[77u].w : min(_541, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2375 = _2373.x;
    float _2376 = _2373.y;
    float _2377 = _2373.z;
    float _2378 = _2373.w;
    float _2474;
    float _2476;
    float _2478;
    float _2480;
    if (_541 > cbSceneParam._m0[78u].w)
    {
        float _2437 = isnan(_541) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _541 : min(cbSceneParam._m0[80u].w, _541));
        float _2438 = _2437 / _541;
        float _2449 = _2438 * _265;
        float _2450 = _266 * _2438;
        float _2451 = (-0.0) - _2450;
        float _2452 = _2438 * _267;
        float _2454 = (cbSceneParam._m0[77u].w * _2451) / _2437;
        float _2455 = _2454 + cbSceneParam._m0[79u].w;
        float _2456 = cbSceneParam._m0[79u].w - _2450;
        float _2462 = sqrt(((_2449 * _2449) + (_2450 * _2450)) + (_2452 * _2452));
        float _2465 = (1.0 - (cbSceneParam._m0[77u].w / _2437)) * _2462;
        float _2470 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2472 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2672;
        if (abs((_2451 - _2454) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2672 = ((((_2455 > 0.0) ? exp2(_2470 * _2455) : (2.0 - exp2(_2472 * _2455))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2465;
        }
        else
        {
            float _2611 = 1.0 / cbSceneParam._m0[80u].x;
            float _2612 = isnan(_2456) ? _2455 : (isnan(_2455) ? _2456 : max(_2455, _2456));
            float _2613 = isnan(_2456) ? _2455 : (isnan(_2455) ? _2456 : min(_2455, _2456));
            float _2622 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : min(_2612, 0.0));
            float _2623 = isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : min(_2613, 0.0));
            _2672 = ((abs(_2462 / _2451) * cbSceneParam._m0[80u].y) * ((((_2622 - _2623) * 2.0) - ((exp2(_2470 * (isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0)))) - exp2(_2470 * (isnan(0.0) ? _2613 : (isnan(_2613) ? 0.0 : max(_2613, 0.0))))) * _2611)) - ((exp2(_2472 * _2622) - exp2(_2472 * _2623)) * _2611))) + (_2465 * cbSceneParam._m0[80u].z);
        }
        vec4 _2674 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2358, _2359, 1.0), 0.0);
        float _2683 = exp2((_2672 * (-1.44269502162933349609375)) * (1.0 - _2674.w));
        float _2684 = log2(_2683);
        float _2700 = log2(_2378);
        _2474 = (exp2(_2700 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2684 * cbSceneParam._m0[78u].x)) * _2674.x) / cbSceneParam._m0[78u].x)) + _2375;
        _2476 = (exp2(_2700 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2684 * cbSceneParam._m0[78u].y)) * _2674.y) / cbSceneParam._m0[78u].y)) + _2376;
        _2478 = (exp2(_2700 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2684 * cbSceneParam._m0[78u].z)) * _2674.z) / cbSceneParam._m0[78u].z)) + _2377;
        _2480 = _2683 * _2378;
    }
    else
    {
        _2474 = _2375;
        _2476 = _2376;
        _2478 = _2377;
        _2480 = _2378;
    }
    float _2492 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2493 = _2492 == 3.0;
    float _2494 = log2(_2480);
    float _2501 = exp2(_2494 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2342 : (isnan(_2342) ? 0.0 : max(_2342, 0.0)));
    float _2502 = exp2(_2494 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2344 : (isnan(_2344) ? 0.0 : max(_2344, 0.0)));
    float _2503 = exp2(_2494 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2346 : (isnan(_2346) ? 0.0 : max(_2346, 0.0)));
    float _2512 = (_2492 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2512 * (_2493 ? _2501 : (_2501 + (cbSceneParam._m0[72u].w * _2474)));
    SV_Target.y = _2512 * (_2493 ? _2502 : (_2502 + (cbSceneParam._m0[72u].w * _2476)));
    SV_Target.z = _2512 * (_2493 ? _2503 : (_2503 + (cbSceneParam._m0[72u].w * _2478)));
    SV_Target.w = cbInstanceData._m0[_2350].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2350].w;
}


