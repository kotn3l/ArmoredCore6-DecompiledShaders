#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_8;
layout(set = 0, binding = 11) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1263;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _194 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _195 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _196 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _201 = inversesqrt(dot(vec3(_194, _195, _196), vec3(_194, _195, _196)));
    float _202 = _201 * _194;
    float _203 = _201 * _195;
    float _204 = _201 * _196;
    float _208 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _209 = _208 * NORMAL.x;
    float _210 = _208 * NORMAL.y;
    float _211 = _208 * NORMAL.z;
    float _215 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _216 = _215 * TANGENT.x;
    float _217 = _215 * TANGENT.y;
    float _218 = _215 * TANGENT.z;
    float _263 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _273 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _263);
    float _274 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _263);
    float _275 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _263);
    vec4 _288 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _291 = _288.x;
    vec4 _309 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _326 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _291) + cbMtdParam._m0[12u].x) * _309.x;
    float _328 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _291) + cbMtdParam._m0[12u].y) * _309.y;
    float _330 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _291) + cbMtdParam._m0[12u].z) * _309.z;
    vec4 _348 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _384 = cbMtdParam._m0[24u].x + _273;
    float _385 = cbMtdParam._m0[24u].y + _274;
    float _386 = cbMtdParam._m0[24u].z + _275;
    float _400 = (-0.0) - dot(vec3(_384, _385, _386), vec3(_202, _203, _204));
    float _401 = (-0.0) - dot(vec3(_384, _385, _386), vec3(_216, _217, _218));
    float _402 = (-0.0) - dot(vec3(_384, _385, _386), vec3((-0.0) - _209, (-0.0) - _210, (-0.0) - _211));
    float _406 = inversesqrt(dot(vec3(_400, _401, _402), vec3(_400, _401, _402)));
    float _409 = _406 * _402;
    float _410 = (_406 * _400) + ((cbMtdParam._m0[22u].x * _291) * ((_348.x * 2.0) + (-1.0)));
    float _411 = (_406 * _401) + ((cbMtdParam._m0[22u].y * _291) * ((_348.y * 2.0) + (-1.0)));
    float _412 = _410 * cbMtdParam._m0[20u].w;
    float _413 = _411 * cbMtdParam._m0[20u].z;
    float _414 = fract(TEXCOORD.x);
    float _415 = fract(TEXCOORD.y);
    float _421;
    if (_412 > 0.0)
    {
        _421 = (1.0 - _414) / _412;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_412 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _414) / _412;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _421 = frontier_phi_3_2_ladder;
    }
    float _429;
    if (_413 > 0.0)
    {
        _429 = (1.0 - _415) / _413;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_413 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _415) / _413;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _429 = frontier_phi_7_6_ladder;
    }
    bool _431 = _409 > 0.0;
    float _433 = _431 ? (cbMtdParam._m0[16u].x / _409) : 5000.0;
    float _434 = isnan(_429) ? _421 : (isnan(_421) ? _429 : min(_421, _429));
    float _435 = isnan(_433) ? _434 : (isnan(_434) ? _433 : min(_434, _433));
    float _439 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _440 = _414 + (-0.5);
    float _443 = _415 + (-0.5);
    float _446 = ((_435 * _409) + _439) / _439;
    vec4 _471 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (((((_440 + (_435 * _412)) / _446) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (((((_443 + (_435 * _413)) / _446) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    float _484 = (_471.x * _291) * cbMtdParam._m0[9u].x;
    float _485 = (_471.y * _291) * cbMtdParam._m0[9u].y;
    float _486 = (_471.z * _291) * cbMtdParam._m0[9u].z;
    float _505 = _410 * cbMtdParam._m0[22u].w;
    float _506 = _411 * cbMtdParam._m0[22u].z;
    bool _507 = _505 > 0.0;
    float _512;
    if (_507)
    {
        _512 = (1.0 - _414) / _505;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_505 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _414) / _505;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _512 = frontier_phi_11_10_ladder;
    }
    bool _514 = _506 > 0.0;
    float _519;
    if (_514)
    {
        _519 = (1.0 - _415) / _506;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_506 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _415) / _506;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _519 = frontier_phi_15_14_ladder;
    }
    float _522 = _431 ? (cbMtdParam._m0[18u].x / _409) : 5000.0;
    float _523 = isnan(_519) ? _512 : (isnan(_512) ? _519 : min(_512, _519));
    float _524 = isnan(_522) ? _523 : (isnan(_523) ? _522 : min(_523, _522));
    float _528 = cbMtdParam._m0[19u].y * cbMtdParam._m0[18u].x;
    float _532 = ((_524 * _409) + _528) / _528;
    float _537 = cbMtdParam._m0[19u].x - cbMtdParam._m0[20u].x * trunc(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    float _539 = floor(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    vec4 _555 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_440 + (_524 * _505)) / _532) + 0.5) + _537) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_443 + (_524 * _506)) / _532) + 0.5) + _539) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[0u].w));
    float _570;
    if (_507)
    {
        _570 = (1.0 - _414) / _505;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_505 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _414) / _505;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _570 = frontier_phi_19_18_ladder;
    }
    float _576;
    if (_514)
    {
        _576 = (1.0 - _415) / _506;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_506 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _415) / _506;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _576 = frontier_phi_23_22_ladder;
    }
    float _578 = isnan(_576) ? _570 : (isnan(_570) ? _576 : min(_570, _576));
    float _579 = isnan(_522) ? _578 : (isnan(_578) ? _522 : min(_578, _522));
    float _586 = ((_579 * _409) + _528) / _528;
    vec4 _606 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_440 + (_579 * _505)) / _586) + 0.5) + _537) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_443 + (_579 * _506)) / _586) + 0.5) + _539) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[8u].w));
    float _608 = _606.x;
    float _618 = (((((cbMtdParam._m0[10u].x * _291) * _555.x) - _484) * _291) * _608) + _484;
    float _619 = (((((cbMtdParam._m0[10u].y * _291) * _555.y) - _485) * _291) * _608) + _485;
    float _620 = (((((cbMtdParam._m0[10u].z * _291) * _555.z) - _486) * _291) * _608) + _486;
    float _636 = _410 * cbMtdParam._m0[23u].y;
    float _637 = _411 * cbMtdParam._m0[23u].x;
    bool _638 = _636 > 0.0;
    float _643;
    if (_638)
    {
        _643 = (1.0 - _414) / _636;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_636 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _414) / _636;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _643 = frontier_phi_27_26_ladder;
    }
    bool _645 = _637 > 0.0;
    float _650;
    if (_645)
    {
        _650 = (1.0 - _415) / _637;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_637 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _415) / _637;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _650 = frontier_phi_31_30_ladder;
    }
    float _653 = _431 ? (cbMtdParam._m0[19u].w / _409) : 5000.0;
    float _654 = isnan(_650) ? _643 : (isnan(_643) ? _650 : min(_643, _650));
    float _655 = isnan(_653) ? _654 : (isnan(_654) ? _653 : min(_654, _653));
    float _659 = cbMtdParam._m0[19u].w * cbMtdParam._m0[16u].z;
    float _663 = ((_655 * _409) + _659) / _659;
    float _668 = cbMtdParam._m0[19u].z - cbMtdParam._m0[23u].z * trunc(cbMtdParam._m0[19u].z / cbMtdParam._m0[23u].z);
    float _670 = floor(cbMtdParam._m0[19u].z / cbMtdParam._m0[23u].z);
    vec4 _686 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * (((((_440 + (_655 * _636)) / _663) + 0.5) + _668) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * (((((_443 + (_655 * _637)) / _663) + 0.5) + _670) / cbMtdParam._m0[23u].w)) + cbTextureTilingScale._m0[9u].w));
    float _701;
    if (_638)
    {
        _701 = (1.0 - _414) / _636;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_636 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _414) / _636;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _701 = frontier_phi_35_34_ladder;
    }
    float _707;
    if (_645)
    {
        _707 = (1.0 - _415) / _637;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_637 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _415) / _637;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _707 = frontier_phi_39_38_ladder;
    }
    float _709 = isnan(_707) ? _701 : (isnan(_701) ? _707 : min(_701, _707));
    float _710 = isnan(_653) ? _709 : (isnan(_709) ? _653 : min(_709, _653));
    float _717 = ((_710 * _409) + _659) / _659;
    vec4 _737 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_440 + (_710 * _636)) / _717) + 0.5) + _668) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_443 + (_710 * _637)) / _717) + 0.5) + _670) / cbMtdParam._m0[23u].w)) + cbTextureTilingScale._m0[10u].w));
    float _739 = _737.x;
    vec4 _764 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _768 = _764.z;
    float _771 = (_764.x * 2.0) + (-1.0);
    float _772 = (_764.y * 2.0) + (-1.0);
    float _773 = dot(vec2(_771, _772), vec2(_771, _772));
    float _3717 = isnan(0.0) ? _773 : (isnan(_773) ? 0.0 : max(_773, 0.0));
    float _778 = sqrt(1.0 - (isnan(1.0) ? _3717 : (isnan(_3717) ? 1.0 : min(_3717, 1.0))));
    float _781 = fma(_778, _209, fma(_772, _216, _771 * _202));
    float _784 = fma(_778, _210, fma(_772, _217, _771 * _203));
    float _787 = fma(_778, _211, fma(_772, _218, _771 * _204));
    float _791 = inversesqrt(dot(vec3(_781, _784, _787), vec3(_781, _784, _787)));
    float _792 = _791 * _781;
    float _793 = _791 * _784;
    float _794 = _791 * _787;
    float _3728 = isnan(0.0) ? _768 : (isnan(_768) ? 0.0 : max(_768, 0.0));
    float _795 = isnan(1.0) ? _3728 : (isnan(_3728) ? 1.0 : min(_3728, 1.0));
    float _3739 = isnan(0.0) ? _326 : (isnan(_326) ? 0.0 : max(_326, 0.0));
    float _3750 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _3761 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _814 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _818 = inversesqrt(dot(vec3(_273, _274, _275), vec3(_273, _274, _275)));
    float _819 = _273 * _818;
    float _820 = _274 * _818;
    float _821 = _275 * _818;
    float _827 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _828 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _847 = fma(_794, cbSceneParam._m0[5u].z, fma(_793, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _792));
    float _850 = fma(_794, cbSceneParam._m0[6u].z, fma(_793, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _792));
    float _853 = fma(_794, cbSceneParam._m0[7u].z, fma(_793, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _792));
    uint _866 = uint(roundEven(NORMAL.w)) * 13u;
    uint _868 = _866 + 9u;
    uint _869 = _868 + uint(cbMatDynParam._m0[0u].w);
    float _875 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3739 : (isnan(_3739) ? 1.0 : min(_3739, 1.0)))) * cbInstanceData._m0[_869].x;
    float _876 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3750 : (isnan(_3750) ? 1.0 : min(_3750, 1.0)))) * cbInstanceData._m0[_869].y;
    float _877 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3761 : (isnan(_3761) ? 1.0 : min(_3761, 1.0)))) * cbInstanceData._m0[_869].z;
    float _3772 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
    float _878 = isnan(1.0) ? _3772 : (isnan(_3772) ? 1.0 : min(_3772, 1.0));
    float _3783 = isnan(0.0) ? _876 : (isnan(_876) ? 0.0 : max(_876, 0.0));
    float _879 = isnan(1.0) ? _3783 : (isnan(_3783) ? 1.0 : min(_3783, 1.0));
    float _3794 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
    float _880 = isnan(1.0) ? _3794 : (isnan(_3794) ? 1.0 : min(_3794, 1.0));
    vec4 _889 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _827, cbSceneParam._m0[86u].y * _828));
    float _892 = _889.x * TEXCOORD_4.z;
    float _893 = dot(vec3(_792, _793, _794), vec3(_819, _820, _821));
    float _896 = _893 * 2.0;
    float _900 = (_896 * _792) - _819;
    float _901 = (_896 * _793) - _820;
    float _902 = (_896 * _794) - _821;
    float _906 = abs(dot(vec3(_819, _820, _821), vec3(_792, _793, _794)));
    float _3805 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
    float _908 = sqrt(_795);
    float _921 = exp2((_908 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3805 : (isnan(_3805) ? 1.0 : min(_3805, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_908 * 3.0));
    float _953 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _957 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _961 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1262;
    float _1264;
    float _1265;
    float _1266;
    float _1267;
    float _1268;
    float _1269;
    float _1270;
    float _1271;
    float _1272;
    float _1273;
    float _1274;
    float _1275;
    float _1276;
    float _1277;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _989 = fma(_961, cbModelParam._m0[26u].z, fma(_957, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _953));
        float _993 = fma(_961, cbModelParam._m0[27u].z, fma(_957, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _953));
        float _997 = fma(_961, cbModelParam._m0[28u].z, fma(_957, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _953));
        float _1020 = _953 + _792;
        float _1021 = _957 + _793;
        float _1022 = _961 + _794;
        float _1032 = fma(_1022, cbModelParam._m0[26u].z, fma(_1021, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1020)) - _989;
        float _1033 = fma(_1022, cbModelParam._m0[27u].z, fma(_1021, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1020)) - _993;
        float _1034 = fma(_1022, cbModelParam._m0[28u].z, fma(_1021, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1020)) - _997;
        float _1038 = inversesqrt(dot(vec3(_1032, _1033, _1034), vec3(_1032, _1033, _1034)));
        float _1051 = ((_1038 * _1032) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_989 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1052 = ((_1038 * _1033) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_993 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1053 = ((_1038 * _1034) / cbModelParam._m0[34u].z) + ((((((_997 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1056 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1051, _1052, _1053), 0.0);
        vec4 _1063 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1051, _1052, _1053), 0.0);
        vec4 _1070 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1051, _1052, _1053), 0.0);
        vec4 _1077 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1051, _1052, _1053), 0.0);
        float _1090 = exp2((_1056.w + (-0.5)) * 20.0) * 2.0;
        float _1091 = _1090 * (_1056.x + (-0.5));
        float _1092 = _1090 * (_1056.y + (-0.5));
        float _1093 = _1090 * (_1056.z + (-0.5));
        float _1100 = exp2((_1063.w + (-0.5)) * 20.0) * 2.0;
        float _1101 = _1100 * (_1063.x + (-0.5));
        float _1102 = _1100 * (_1063.y + (-0.5));
        float _1103 = _1100 * (_1063.z + (-0.5));
        float _1110 = exp2((_1070.w + (-0.5)) * 20.0) * 2.0;
        float _1111 = _1110 * (_1070.x + (-0.5));
        float _1112 = _1110 * (_1070.y + (-0.5));
        float _1113 = _1110 * (_1070.z + (-0.5));
        float _1120 = exp2((_1077.w + (-0.5)) * 20.0) * 2.0;
        float _1121 = _1120 * (_1077.x + (-0.5));
        float _1122 = _1120 * (_1077.y + (-0.5));
        float _1123 = _1120 * (_1077.z + (-0.5));
        float _1124 = isnan(0.0) ? _1121 : (isnan(_1121) ? 0.0 : max(_1121, 0.0));
        float _1125 = isnan(0.0) ? _1122 : (isnan(_1122) ? 0.0 : max(_1122, 0.0));
        float _1126 = isnan(0.0) ? _1123 : (isnan(_1123) ? 0.0 : max(_1123, 0.0));
        float _1127 = _1091 * 0.5;
        float _1128 = _1101 * 0.5;
        float _1129 = _1111 * 0.5;
        float _1130 = dot(vec3(_1127, _1128, _1129), vec3(_1127, _1128, _1129));
        float _1135 = (_1130 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1130);
        float _1144 = (dot(vec3(_792, _793, _794), vec3(_1135 * _1127, _1135 * _1128, _1135 * _1129)) + 1.0) * 0.5;
        float _3831 = isnan(0.0) ? _1144 : (isnan(_1144) ? 0.0 : max(_1144, 0.0));
        float _1154 = sqrt(((_1128 * _1128) + (_1127 * _1127)) + (_1129 * _1129)) / (_1124 + 9.9999997473787516355514526367188e-06);
        float _3842 = isnan(0.0) ? _1154 : (isnan(_1154) ? 0.0 : max(_1154, 0.0));
        float _1155 = isnan(1.0) ? _3842 : (isnan(_3842) ? 1.0 : min(_3842, 1.0));
        float _1156 = _1155 * 2.0;
        float _1160 = (1.0 - _1155) / (_1155 + 1.0);
        float _3853 = isnan(0.0) ? _1160 : (isnan(_1160) ? 0.0 : max(_1160, 0.0));
        float _1161 = isnan(1.0) ? _3853 : (isnan(_3853) ? 1.0 : min(_3853, 1.0));
        float _1170 = ((((1.0 - _1161) * (_1156 + 2.0)) * exp2(log2(isnan(1.0) ? _3831 : (isnan(_3831) ? 1.0 : min(_3831, 1.0))) * (_1156 + 1.0))) + _1161) * _1124;
        float _1171 = _1092 * 0.5;
        float _1172 = _1102 * 0.5;
        float _1173 = _1112 * 0.5;
        float _1174 = dot(vec3(_1171, _1172, _1173), vec3(_1171, _1172, _1173));
        float _1179 = (_1174 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1174);
        float _1187 = (dot(vec3(_792, _793, _794), vec3(_1179 * _1171, _1179 * _1172, _1179 * _1173)) + 1.0) * 0.5;
        float _3864 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1196 = sqrt(((_1172 * _1172) + (_1171 * _1171)) + (_1173 * _1173)) / (_1125 + 9.9999997473787516355514526367188e-06);
        float _3875 = isnan(0.0) ? _1196 : (isnan(_1196) ? 0.0 : max(_1196, 0.0));
        float _1197 = isnan(1.0) ? _3875 : (isnan(_3875) ? 1.0 : min(_3875, 1.0));
        float _1198 = _1197 * 2.0;
        float _1202 = (1.0 - _1197) / (_1197 + 1.0);
        float _3886 = isnan(0.0) ? _1202 : (isnan(_1202) ? 0.0 : max(_1202, 0.0));
        float _1203 = isnan(1.0) ? _3886 : (isnan(_3886) ? 1.0 : min(_3886, 1.0));
        float _1212 = ((((1.0 - _1203) * (_1198 + 2.0)) * exp2(log2(isnan(1.0) ? _3864 : (isnan(_3864) ? 1.0 : min(_3864, 1.0))) * (_1198 + 1.0))) + _1203) * _1125;
        float _1213 = _1093 * 0.5;
        float _1214 = _1103 * 0.5;
        float _1215 = _1113 * 0.5;
        float _1216 = dot(vec3(_1213, _1214, _1215), vec3(_1213, _1214, _1215));
        float _1221 = (_1216 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1216);
        float _1229 = (dot(vec3(_792, _793, _794), vec3(_1221 * _1213, _1221 * _1214, _1221 * _1215)) + 1.0) * 0.5;
        float _3897 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1238 = sqrt(((_1214 * _1214) + (_1213 * _1213)) + (_1215 * _1215)) / (_1126 + 9.9999997473787516355514526367188e-06);
        float _3908 = isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0));
        float _1239 = isnan(1.0) ? _3908 : (isnan(_3908) ? 1.0 : min(_3908, 1.0));
        float _1240 = _1239 * 2.0;
        float _1244 = (1.0 - _1239) / (_1239 + 1.0);
        float _3919 = isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0));
        float _1245 = isnan(1.0) ? _3919 : (isnan(_3919) ? 1.0 : min(_3919, 1.0));
        float _1254 = ((((1.0 - _1245) * (_1240 + 2.0)) * exp2(log2(isnan(1.0) ? _3897 : (isnan(_3897) ? 1.0 : min(_3897, 1.0))) * (_1240 + 1.0))) + _1245) * _1126;
        _1262 = _1093;
        _1264 = _1092;
        _1265 = _1091;
        _1266 = _1103;
        _1267 = _1102;
        _1268 = _1101;
        _1269 = _1113;
        _1270 = _1112;
        _1271 = _1111;
        _1272 = _1126;
        _1273 = _1125;
        _1274 = _1124;
        _1275 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1170 : (isnan(_1170) ? 0.0 : max(_1170, 0.0)));
        _1276 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1212 : (isnan(_1212) ? 0.0 : max(_1212, 0.0)));
        _1277 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1254 : (isnan(_1254) ? 0.0 : max(_1254, 0.0)));
    }
    else
    {
        _1262 = _1263;
        _1264 = _1263;
        _1265 = _1263;
        _1266 = _1263;
        _1267 = _1263;
        _1268 = _1263;
        _1269 = _1263;
        _1270 = _1263;
        _1271 = _1263;
        _1272 = _1263;
        _1273 = _1263;
        _1274 = _1263;
        _1275 = 0.0;
        _1276 = 0.0;
        _1277 = 0.0;
    }
    float _1572;
    float _1573;
    float _1574;
    float _1575;
    float _1576;
    float _1577;
    float _1578;
    float _1579;
    float _1580;
    float _1581;
    float _1582;
    float _1583;
    float _1584;
    float _1585;
    float _1586;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1303 = fma(_961, cbModelParam._m0[30u].z, fma(_957, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _953));
        float _1307 = fma(_961, cbModelParam._m0[31u].z, fma(_957, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _953));
        float _1311 = fma(_961, cbModelParam._m0[32u].z, fma(_957, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _953));
        float _1334 = _953 + _792;
        float _1335 = _957 + _793;
        float _1336 = _961 + _794;
        float _1346 = fma(_1336, cbModelParam._m0[30u].z, fma(_1335, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1334)) - _1303;
        float _1347 = fma(_1336, cbModelParam._m0[31u].z, fma(_1335, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1334)) - _1307;
        float _1348 = fma(_1336, cbModelParam._m0[32u].z, fma(_1335, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1334)) - _1311;
        float _1352 = inversesqrt(dot(vec3(_1346, _1347, _1348), vec3(_1346, _1347, _1348)));
        float _1365 = ((_1352 * _1346) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1303 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1366 = ((_1352 * _1347) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1307 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1367 = ((_1352 * _1348) / cbModelParam._m0[35u].z) + ((((((_1311 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1369 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1365, _1366, _1367), 0.0);
        vec4 _1376 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1365, _1366, _1367), 0.0);
        vec4 _1383 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1365, _1366, _1367), 0.0);
        vec4 _1390 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1365, _1366, _1367), 0.0);
        float _1402 = exp2((_1369.w + (-0.5)) * 20.0) * 2.0;
        float _1403 = _1402 * (_1369.x + (-0.5));
        float _1404 = _1402 * (_1369.y + (-0.5));
        float _1405 = _1402 * (_1369.z + (-0.5));
        float _1412 = exp2((_1376.w + (-0.5)) * 20.0) * 2.0;
        float _1413 = _1412 * (_1376.x + (-0.5));
        float _1414 = _1412 * (_1376.y + (-0.5));
        float _1415 = _1412 * (_1376.z + (-0.5));
        float _1422 = exp2((_1383.w + (-0.5)) * 20.0) * 2.0;
        float _1423 = _1422 * (_1383.x + (-0.5));
        float _1424 = _1422 * (_1383.y + (-0.5));
        float _1425 = _1422 * (_1383.z + (-0.5));
        float _1432 = exp2((_1390.w + (-0.5)) * 20.0) * 2.0;
        float _1433 = _1432 * (_1390.x + (-0.5));
        float _1434 = _1432 * (_1390.y + (-0.5));
        float _1435 = _1432 * (_1390.z + (-0.5));
        float _1436 = isnan(0.0) ? _1433 : (isnan(_1433) ? 0.0 : max(_1433, 0.0));
        float _1437 = isnan(0.0) ? _1434 : (isnan(_1434) ? 0.0 : max(_1434, 0.0));
        float _1438 = isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0));
        float _1439 = _1403 * 0.5;
        float _1440 = _1413 * 0.5;
        float _1441 = _1423 * 0.5;
        float _1442 = dot(vec3(_1439, _1440, _1441), vec3(_1439, _1440, _1441));
        float _1447 = (_1442 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1442);
        float _1455 = (dot(vec3(_792, _793, _794), vec3(_1447 * _1439, _1447 * _1440, _1447 * _1441)) + 1.0) * 0.5;
        float _3960 = isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0));
        float _1464 = sqrt(((_1440 * _1440) + (_1439 * _1439)) + (_1441 * _1441)) / (_1436 + 9.9999997473787516355514526367188e-06);
        float _3971 = isnan(0.0) ? _1464 : (isnan(_1464) ? 0.0 : max(_1464, 0.0));
        float _1465 = isnan(1.0) ? _3971 : (isnan(_3971) ? 1.0 : min(_3971, 1.0));
        float _1466 = _1465 * 2.0;
        float _1470 = (1.0 - _1465) / (_1465 + 1.0);
        float _3982 = isnan(0.0) ? _1470 : (isnan(_1470) ? 0.0 : max(_1470, 0.0));
        float _1471 = isnan(1.0) ? _3982 : (isnan(_3982) ? 1.0 : min(_3982, 1.0));
        float _1480 = ((((1.0 - _1471) * (_1466 + 2.0)) * exp2(log2(isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * (_1466 + 1.0))) + _1471) * _1436;
        float _1481 = _1404 * 0.5;
        float _1482 = _1414 * 0.5;
        float _1483 = _1424 * 0.5;
        float _1484 = dot(vec3(_1481, _1482, _1483), vec3(_1481, _1482, _1483));
        float _1489 = (_1484 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1484);
        float _1497 = (dot(vec3(_792, _793, _794), vec3(_1489 * _1481, _1489 * _1482, _1489 * _1483)) + 1.0) * 0.5;
        float _3993 = isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0));
        float _1506 = sqrt(((_1482 * _1482) + (_1481 * _1481)) + (_1483 * _1483)) / (_1437 + 9.9999997473787516355514526367188e-06);
        float _4004 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
        float _1507 = isnan(1.0) ? _4004 : (isnan(_4004) ? 1.0 : min(_4004, 1.0));
        float _1508 = _1507 * 2.0;
        float _1512 = (1.0 - _1507) / (_1507 + 1.0);
        float _4015 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1513 = isnan(1.0) ? _4015 : (isnan(_4015) ? 1.0 : min(_4015, 1.0));
        float _1522 = ((((1.0 - _1513) * (_1508 + 2.0)) * exp2(log2(isnan(1.0) ? _3993 : (isnan(_3993) ? 1.0 : min(_3993, 1.0))) * (_1508 + 1.0))) + _1513) * _1437;
        float _1523 = _1405 * 0.5;
        float _1524 = _1415 * 0.5;
        float _1525 = _1425 * 0.5;
        float _1526 = dot(vec3(_1523, _1524, _1525), vec3(_1523, _1524, _1525));
        float _1531 = (_1526 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1526);
        float _1539 = (dot(vec3(_792, _793, _794), vec3(_1531 * _1523, _1531 * _1524, _1531 * _1525)) + 1.0) * 0.5;
        float _4026 = isnan(0.0) ? _1539 : (isnan(_1539) ? 0.0 : max(_1539, 0.0));
        float _1548 = sqrt(((_1524 * _1524) + (_1523 * _1523)) + (_1525 * _1525)) / (_1438 + 9.9999997473787516355514526367188e-06);
        float _4037 = isnan(0.0) ? _1548 : (isnan(_1548) ? 0.0 : max(_1548, 0.0));
        float _1549 = isnan(1.0) ? _4037 : (isnan(_4037) ? 1.0 : min(_4037, 1.0));
        float _1550 = _1549 * 2.0;
        float _1554 = (1.0 - _1549) / (_1549 + 1.0);
        float _4048 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1555 = isnan(1.0) ? _4048 : (isnan(_4048) ? 1.0 : min(_4048, 1.0));
        float _1564 = ((((1.0 - _1555) * (_1550 + 2.0)) * exp2(log2(isnan(1.0) ? _4026 : (isnan(_4026) ? 1.0 : min(_4026, 1.0))) * (_1550 + 1.0))) + _1555) * _1438;
        _1572 = _1405;
        _1573 = _1404;
        _1574 = _1403;
        _1575 = _1415;
        _1576 = _1414;
        _1577 = _1413;
        _1578 = _1425;
        _1579 = _1424;
        _1580 = _1423;
        _1581 = _1438;
        _1582 = _1437;
        _1583 = _1436;
        _1584 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0)));
        _1585 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0)));
        _1586 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1564 : (isnan(_1564) ? 0.0 : max(_1564, 0.0)));
    }
    else
    {
        _1572 = _1263;
        _1573 = _1263;
        _1574 = _1263;
        _1575 = _1263;
        _1576 = _1263;
        _1577 = _1263;
        _1578 = _1263;
        _1579 = _1263;
        _1580 = _1263;
        _1581 = _1263;
        _1582 = _1263;
        _1583 = _1263;
        _1584 = 0.0;
        _1585 = 0.0;
        _1586 = 0.0;
    }
    float _1596 = (cbModelParam._m0[1u].x * (_1584 - _1275)) + _1275;
    float _1597 = (cbModelParam._m0[1u].x * (_1585 - _1276)) + _1276;
    float _1598 = (cbModelParam._m0[1u].x * (_1586 - _1277)) + _1277;
    float _1619 = fma(_1598, cbSceneParam._m0[89u].z, fma(_1597, cbSceneParam._m0[89u].y, _1596 * cbSceneParam._m0[89u].x));
    float _1622 = fma(_1598, cbSceneParam._m0[90u].z, fma(_1597, cbSceneParam._m0[90u].y, _1596 * cbSceneParam._m0[90u].x));
    float _1625 = fma(_1598, cbSceneParam._m0[91u].z, fma(_1597, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1596));
    float _1640 = _900 * 0.5;
    float _1641 = _901 * 0.5;
    float _1642 = _902 * 0.5;
    float _1643 = dot(vec4(_1640, _1641, _1642, 1.0), vec4(_1574, _1577, _1580, _1583));
    float _1646 = dot(vec4(_1640, _1641, _1642, 1.0), vec4(_1573, _1576, _1579, _1582));
    float _1649 = dot(vec4(_1640, _1641, _1642, 1.0), vec4(_1572, _1575, _1578, _1581));
    float _1683;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1656 = dot(vec4(_1640, _1641, _1642, 1.0), vec4(_1262, _1266, _1269, _1272));
        float _1660 = dot(vec4(_1640, _1641, _1642, 1.0), vec4(_1264, _1267, _1270, _1273));
        float _1664 = dot(vec4(_1640, _1641, _1642, 1.0), vec4(_1265, _1268, _1271, _1274));
        float _1671 = dot(vec4(cbModelParam._m0[39u]), vec4(_1640, _1641, _1642, 1.0));
        _1683 = dot(vec3(isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0)), isnan(0.0) ? _1660 : (isnan(_1660) ? 0.0 : max(_1660, 0.0)), isnan(0.0) ? _1656 : (isnan(_1656) ? 0.0 : max(_1656, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1671) ? 0.0 : (isnan(0.0) ? _1671 : max(0.0, _1671))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1683 = 1.0;
    }
    float _1694;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1685 = dot(vec4(cbModelParam._m0[40u]), vec4(_1640, _1641, _1642, 1.0));
        _1694 = dot(vec3(isnan(0.0) ? _1643 : (isnan(_1643) ? 0.0 : max(_1643, 0.0)), isnan(0.0) ? _1646 : (isnan(_1646) ? 0.0 : max(_1646, 0.0)), isnan(0.0) ? _1649 : (isnan(_1649) ? 0.0 : max(_1649, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1685) ? 0.0 : (isnan(0.0) ? _1685 : max(0.0, _1685))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1694 = 1.0;
    }
    float _1698 = (_1694 * cbModelParam._m0[1u].x) + (_1683 * (1.0 - cbModelParam._m0[1u].x));
    float _1708 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _795);
    float _1709 = isnan(_1708) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1708 : min(cbModelParam._m0[25u].z, _1708));
    float _1790;
    float _1792;
    float _1794;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1757 = fma(_961, cbModelParam._m0[13u].z, fma(_957, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _953)) + cbModelParam._m0[13u].w;
        float _1761 = fma(_961, cbModelParam._m0[14u].z, fma(_957, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _953)) + cbModelParam._m0[14u].w;
        float _1765 = fma(_961, cbModelParam._m0[15u].z, fma(_957, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _953)) + cbModelParam._m0[15u].w;
        float _1768 = fma(_902, cbModelParam._m0[13u].z, fma(_901, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _900));
        float _1771 = fma(_902, cbModelParam._m0[14u].z, fma(_901, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _900));
        float _1774 = fma(_902, cbModelParam._m0[15u].z, fma(_901, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _900));
        float _1802;
        if (_1768 > 0.0)
        {
            _1802 = abs((1.0 - _1757) / _1768);
        }
        else
        {
            float frontier_phi_54_52_ladder;
            if (_1768 < 0.0)
            {
                frontier_phi_54_52_ladder = abs((_1757 + 1.0) / _1768);
            }
            else
            {
                frontier_phi_54_52_ladder = 5000.0;
            }
            _1802 = frontier_phi_54_52_ladder;
        }
        float _1970;
        if (_1771 > 0.0)
        {
            _1970 = abs((1.0 - _1761) / _1771);
        }
        else
        {
            float frontier_phi_63_59_ladder;
            if (_1771 < 0.0)
            {
                frontier_phi_63_59_ladder = abs((_1761 + 1.0) / _1771);
            }
            else
            {
                frontier_phi_63_59_ladder = 5000.0;
            }
            _1970 = frontier_phi_63_59_ladder;
        }
        float _2414;
        if (_1774 > 0.0)
        {
            _2414 = abs((1.0 - _1765) / _1774);
        }
        else
        {
            float frontier_phi_75_70_ladder;
            if (_1774 < 0.0)
            {
                frontier_phi_75_70_ladder = abs((_1765 + 1.0) / _1774);
            }
            else
            {
                frontier_phi_75_70_ladder = 5000.0;
            }
            _2414 = frontier_phi_75_70_ladder;
        }
        float _2416 = isnan(_1970) ? _1802 : (isnan(_1802) ? _1970 : min(_1802, _1970));
        float _2417 = isnan(_2414) ? _2416 : (isnan(_2416) ? _2414 : min(_2416, _2414));
        float _2421 = (_2417 * _1768) + _1757;
        float _2422 = (_2417 * _1771) + _1761;
        float _2423 = (_2417 * _1774) + _1765;
        float _2424 = _2417 * 9.9999997473787516355514526367188e-05;
        float _2426 = (-1.0) - _2424;
        float _2428 = _2424 + 1.0;
        float frontier_phi_53_75_ladder;
        float frontier_phi_53_75_ladder_1;
        float frontier_phi_53_75_ladder_2;
        if ((_2423 > _2428) || ((_2423 < _2426) || ((_2422 > _2428) || ((_2422 < _2426) || ((_2421 < _2426) || (_2421 > _2428))))))
        {
            frontier_phi_53_75_ladder = 0.0;
            frontier_phi_53_75_ladder_1 = 0.0;
            frontier_phi_53_75_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2673 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2423, cbModelParam._m0[9u].z, fma(_2422, cbModelParam._m0[9u].y, _2421 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2423, cbModelParam._m0[10u].z, fma(_2422, cbModelParam._m0[10u].y, _2421 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2423, cbModelParam._m0[11u].z, fma(_2422, cbModelParam._m0[11u].y, _2421 * cbModelParam._m0[11u].x))), _1709);
            frontier_phi_53_75_ladder = _2673.z * cbModelParam._m0[1u].y;
            frontier_phi_53_75_ladder_1 = _2673.y * cbModelParam._m0[1u].y;
            frontier_phi_53_75_ladder_2 = _2673.x * cbModelParam._m0[1u].y;
        }
        _1790 = frontier_phi_53_75_ladder_2;
        _1792 = frontier_phi_53_75_ladder_1;
        _1794 = frontier_phi_53_75_ladder;
    }
    else
    {
        vec4 _1778 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_900, _901, _902), _1709);
        _1790 = _1778.x * cbModelParam._m0[1u].y;
        _1792 = _1778.y * cbModelParam._m0[1u].y;
        _1794 = _1778.z * cbModelParam._m0[1u].y;
    }
    float _1798 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _795);
    float _1799 = isnan(_1798) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1798 : min(cbModelParam._m0[25u].w, _1798));
    float _1887;
    float _1889;
    float _1891;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1851 = fma(_961, cbModelParam._m0[21u].z, fma(_957, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _953)) + cbModelParam._m0[21u].w;
        float _1855 = fma(_961, cbModelParam._m0[22u].z, fma(_957, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _953)) + cbModelParam._m0[22u].w;
        float _1859 = fma(_961, cbModelParam._m0[23u].z, fma(_957, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _953)) + cbModelParam._m0[23u].w;
        float _1862 = fma(_902, cbModelParam._m0[21u].z, fma(_901, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _900));
        float _1865 = fma(_902, cbModelParam._m0[22u].z, fma(_901, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _900));
        float _1868 = fma(_902, cbModelParam._m0[23u].z, fma(_901, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _900));
        float _1975;
        if (_1862 > 0.0)
        {
            _1975 = abs((1.0 - _1851) / _1862);
        }
        else
        {
            float frontier_phi_65_61_ladder;
            if (_1862 < 0.0)
            {
                frontier_phi_65_61_ladder = abs((_1851 + 1.0) / _1862);
            }
            else
            {
                frontier_phi_65_61_ladder = 5000.0;
            }
            _1975 = frontier_phi_65_61_ladder;
        }
        float _2441;
        if (_1865 > 0.0)
        {
            _2441 = abs((1.0 - _1855) / _1865);
        }
        else
        {
            float frontier_phi_77_72_ladder;
            if (_1865 < 0.0)
            {
                frontier_phi_77_72_ladder = abs((_1855 + 1.0) / _1865);
            }
            else
            {
                frontier_phi_77_72_ladder = 5000.0;
            }
            _2441 = frontier_phi_77_72_ladder;
        }
        float _2794;
        if (_1868 > 0.0)
        {
            _2794 = abs((1.0 - _1859) / _1868);
        }
        else
        {
            float frontier_phi_89_84_ladder;
            if (_1868 < 0.0)
            {
                frontier_phi_89_84_ladder = abs((_1859 + 1.0) / _1868);
            }
            else
            {
                frontier_phi_89_84_ladder = 5000.0;
            }
            _2794 = frontier_phi_89_84_ladder;
        }
        float _2796 = isnan(_2441) ? _1975 : (isnan(_1975) ? _2441 : min(_1975, _2441));
        float _2797 = isnan(_2794) ? _2796 : (isnan(_2796) ? _2794 : min(_2796, _2794));
        float _2801 = (_2797 * _1862) + _1851;
        float _2802 = (_2797 * _1865) + _1855;
        float _2803 = (_2797 * _1868) + _1859;
        float _2804 = _2797 * 9.9999997473787516355514526367188e-05;
        float _2805 = (-1.0) - _2804;
        float _2807 = _2804 + 1.0;
        float frontier_phi_62_89_ladder;
        float frontier_phi_62_89_ladder_1;
        float frontier_phi_62_89_ladder_2;
        if ((_2803 > _2807) || ((_2803 < _2805) || ((_2802 > _2807) || ((_2802 < _2805) || ((_2801 < _2805) || (_2801 > _2807))))))
        {
            frontier_phi_62_89_ladder = 0.0;
            frontier_phi_62_89_ladder_1 = 0.0;
            frontier_phi_62_89_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2924 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2803, cbModelParam._m0[17u].z, fma(_2802, cbModelParam._m0[17u].y, _2801 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2803, cbModelParam._m0[18u].z, fma(_2802, cbModelParam._m0[18u].y, _2801 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2803, cbModelParam._m0[19u].z, fma(_2802, cbModelParam._m0[19u].y, _2801 * cbModelParam._m0[19u].x))), _1799);
            frontier_phi_62_89_ladder = _2924.z * cbModelParam._m0[1u].z;
            frontier_phi_62_89_ladder_1 = _2924.y * cbModelParam._m0[1u].z;
            frontier_phi_62_89_ladder_2 = _2924.x * cbModelParam._m0[1u].z;
        }
        _1887 = frontier_phi_62_89_ladder_2;
        _1889 = frontier_phi_62_89_ladder_1;
        _1891 = frontier_phi_62_89_ladder;
    }
    else
    {
        vec4 _1871 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_900, _901, _902), _1799);
        _1887 = _1871.x * cbModelParam._m0[1u].z;
        _1889 = _1871.y * cbModelParam._m0[1u].z;
        _1891 = _1871.z * cbModelParam._m0[1u].z;
    }
    float _1903 = ((((1.0 - _921) * ((_908 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_921 * _908)) * _892;
    float _1904 = _1903 * ((cbModelParam._m0[1u].w * (_1887 - _1790)) + _1790);
    float _1905 = _1903 * ((cbModelParam._m0[1u].w * (_1889 - _1792)) + _1792);
    float _1906 = _1903 * ((cbModelParam._m0[1u].w * (_1891 - _1794)) + _1794);
    float _1909 = fma(_1906, cbSceneParam._m0[89u].z, fma(_1905, cbSceneParam._m0[89u].y, _1904 * cbSceneParam._m0[89u].x));
    float _1912 = fma(_1906, cbSceneParam._m0[90u].z, fma(_1905, cbSceneParam._m0[90u].y, _1904 * cbSceneParam._m0[90u].x));
    float _1915 = fma(_1906, cbSceneParam._m0[91u].z, fma(_1905, cbSceneParam._m0[91u].y, _1904 * cbSceneParam._m0[91u].x));
    float _1949 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1953 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1957 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1961 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1962 = _1949 / _1961;
    float _1963 = _1953 / _1961;
    float _1964 = _1957 / _1961;
    float _2111;
    float _2112;
    float _2113;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1991 = ((uint(_1964 > cbSceneParam._m0[59u].y) + uint(_1964 > cbSceneParam._m0[59u].x)) + uint(_1964 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1992 = _1991 + 43u;
        uint _2000 = _1991 + 44u;
        uint _2008 = _1991 + 45u;
        uint _2016 = _1991 + 46u;
        float _2027 = fma(_1961, cbSceneParam._m0[_1992].w, fma(_1957, cbSceneParam._m0[_1992].z, fma(_1953, cbSceneParam._m0[_1992].y, _1949 * cbSceneParam._m0[_1992].x)));
        float _2031 = fma(_1961, cbSceneParam._m0[_2000].w, fma(_1957, cbSceneParam._m0[_2000].z, fma(_1953, cbSceneParam._m0[_2000].y, _1949 * cbSceneParam._m0[_2000].x)));
        float _2039 = fma(_1961, cbSceneParam._m0[_2016].w, fma(_1957, cbSceneParam._m0[_2016].z, fma(_1953, cbSceneParam._m0[_2016].y, _1949 * cbSceneParam._m0[_2016].x)));
        float _2044 = cbSceneParam._m0[33u].z * _2039;
        float _2046 = cbSceneParam._m0[33u].w * _2039;
        float _2049 = fma(_1961, cbSceneParam._m0[_2008].w, fma(_1957, cbSceneParam._m0[_2008].z, fma(_1953, cbSceneParam._m0[_2008].y, _1949 * cbSceneParam._m0[_2008].x))) / _2039;
        float _2097 = (cbSceneParam._m0[33u].x - sqrt(((_1963 * _1963) + (_1962 * _1962)) + (_1964 * _1964))) * cbSceneParam._m0[33u].y;
        float _4174 = isnan(0.0) ? _2097 : (isnan(_2097) ? 0.0 : max(_2097, 0.0));
        float _2104 = (isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2044 + _2027) / _2039, (_2046 + _2031) / _2039), _2049), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2046 + _2027) / _2039, (_2031 - _2044) / _2039), _2049), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2027 - _2044) / _2039, (_2031 - _2046) / _2039), _2049), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2027 - _2046) / _2039, (_2044 + _2031) / _2039), _2049), 0.0)).x), vec4(0.25)));
        _2111 = 1.0 - (_2104 * cbSceneParam._m0[34u].x);
        _2112 = 1.0 - (_2104 * cbSceneParam._m0[34u].y);
        _2113 = 1.0 - (_2104 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2111 = 1.0;
        _2112 = 1.0;
        _2113 = 1.0;
    }
    float _2177;
    float _2179;
    float _2181;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2165 = fma(_1961, cbSceneParam._m0[63u].w, fma(_1957, cbSceneParam._m0[63u].z, fma(_1953, cbSceneParam._m0[63u].y, _1949 * cbSceneParam._m0[63u].x)));
        float _2166 = fma(_1961, cbSceneParam._m0[60u].w, fma(_1957, cbSceneParam._m0[60u].z, fma(_1953, cbSceneParam._m0[60u].y, _1949 * cbSceneParam._m0[60u].x))) / _2165;
        float _2167 = fma(_1961, cbSceneParam._m0[61u].w, fma(_1957, cbSceneParam._m0[61u].z, fma(_1953, cbSceneParam._m0[61u].y, _1949 * cbSceneParam._m0[61u].x))) / _2165;
        float frontier_phi_74_73_ladder;
        float frontier_phi_74_73_ladder_1;
        float frontier_phi_74_73_ladder_2;
        if ((((_2166 >= cbSceneParam._m0[64u].x) && (_2167 >= cbSceneParam._m0[64u].y)) && (_2166 <= cbSceneParam._m0[64u].z)) && (_2167 <= cbSceneParam._m0[64u].w))
        {
            float _2454 = fma(_1961, cbSceneParam._m0[62u].w, fma(_1957, cbSceneParam._m0[62u].z, fma(_1953, cbSceneParam._m0[62u].y, _1949 * cbSceneParam._m0[62u].x))) / _2165;
            float _2458 = isnan(cbSceneParam._m0[41u].w) ? _2454 : (isnan(_2454) ? cbSceneParam._m0[41u].w : max(_2454, cbSceneParam._m0[41u].w));
            float _2501 = (cbSceneParam._m0[33u].x - sqrt(((_1963 * _1963) + (_1962 * _1962)) + (_1964 * _1964))) * cbSceneParam._m0[33u].y;
            float _4190 = isnan(0.0) ? _2501 : (isnan(_2501) ? 0.0 : max(_2501, 0.0));
            float _2508 = (isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2166, cbSceneParam._m0[33u].w + _2167), _2458), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2166, _2167 - cbSceneParam._m0[33u].z), _2458), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2166 - cbSceneParam._m0[33u].z, _2167 - cbSceneParam._m0[33u].w), _2458), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2166 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2167), _2458), 0.0)).x), vec4(0.25)));
            float _2512 = 1.0 - (_2508 * cbSceneParam._m0[34u].x);
            float _2513 = 1.0 - (_2508 * cbSceneParam._m0[34u].y);
            float _2514 = 1.0 - (_2508 * cbSceneParam._m0[34u].z);
            frontier_phi_74_73_ladder = isnan(_2512) ? _2111 : (isnan(_2111) ? _2512 : min(_2111, _2512));
            frontier_phi_74_73_ladder_1 = isnan(_2513) ? _2112 : (isnan(_2112) ? _2513 : min(_2112, _2513));
            frontier_phi_74_73_ladder_2 = isnan(_2514) ? _2113 : (isnan(_2113) ? _2514 : min(_2113, _2514));
        }
        else
        {
            frontier_phi_74_73_ladder = _2111;
            frontier_phi_74_73_ladder_1 = _2112;
            frontier_phi_74_73_ladder_2 = _2113;
        }
        _2177 = frontier_phi_74_73_ladder;
        _2179 = frontier_phi_74_73_ladder_1;
        _2181 = frontier_phi_74_73_ladder_2;
    }
    else
    {
        _2177 = _2111;
        _2179 = _2112;
        _2181 = _2113;
    }
    uvec4 _2186 = floatBitsToUint(cbInstanceData._m0[_866 + 5u]);
    uint _2188 = _2186.x * 14u;
    uint _2189 = _2188 + 13u;
    float _2194 = _892 + (-1.0);
    float _2197 = (cbLight._m0[_2189].x * _2194) + 1.0;
    float _2198 = (cbLight._m0[_2189].y * _2194) + 1.0;
    uint _2199 = _2188 + 5u;
    float _2205 = isnan(1.0) ? _2198 : (isnan(_2198) ? 1.0 : min(_2198, 1.0));
    uint _2209 = _2188 + 4u;
    float _2218 = isnan(1.0) ? _2197 : (isnan(_2197) ? 1.0 : min(_2197, 1.0));
    uint _2222 = _2188 | 1u;
    float _2233 = dot(vec3(cbLight._m0[_2188].xyz), vec3(_792, _793, _794));
    float _2236 = dot(vec3(cbLight._m0[_2222].xyz), vec3(_792, _793, _794));
    float _4226 = isnan(0.0) ? _2233 : (isnan(_2233) ? 0.0 : max(_2233, 0.0));
    float _4237 = isnan(0.0) ? _2236 : (isnan(_2236) ? 0.0 : max(_2236, 0.0));
    float _2241 = (isnan(1.0) ? _4226 : (isnan(_4226) ? 1.0 : min(_4226, 1.0))) * 0.3183098733425140380859375;
    float _2243 = (isnan(1.0) ? _4237 : (isnan(_4237) ? 1.0 : min(_4237, 1.0))) * 0.3183098733425140380859375;
    float _2250 = ((cbLight._m0[_2199].x * _2205) * _2243) + (((cbLight._m0[_2209].x * _2177) * _2218) * _2241);
    float _2251 = ((_2205 * cbLight._m0[_2199].y) * _2243) + (((cbLight._m0[_2209].y * _2179) * _2218) * _2241);
    float _2252 = ((_2205 * cbLight._m0[_2199].z) * _2243) + (((cbLight._m0[_2209].z * _2181) * _2218) * _2241);
    uint _2254 = _2188 + 8u;
    float _2267 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2188].w)) * _795) * 0.949999988079071044921875);
    float _2268 = _2267 * _2267;
    float _2269 = cbLight._m0[_2188].x + _819;
    float _2270 = cbLight._m0[_2188].y + _820;
    float _2271 = cbLight._m0[_2188].z + _821;
    float _2275 = inversesqrt(dot(vec3(_2269, _2270, _2271), vec3(_2269, _2270, _2271)));
    float _2276 = _2275 * _2269;
    float _2277 = _2275 * _2270;
    float _2278 = _2275 * _2271;
    float _2279 = dot(vec3(_792, _793, _794), vec3(cbLight._m0[_2188].xyz));
    float _4248 = isnan(0.0) ? _2279 : (isnan(_2279) ? 0.0 : max(_2279, 0.0));
    float _2282 = isnan(1.0) ? _4248 : (isnan(_4248) ? 1.0 : min(_4248, 1.0));
    float _4259 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _2283 = isnan(1.0) ? _4259 : (isnan(_4259) ? 1.0 : min(_4259, 1.0));
    float _2284 = dot(vec3(_792, _793, _794), vec3(_2276, _2277, _2278));
    float _4270 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
    float _2287 = isnan(1.0) ? _4270 : (isnan(_4270) ? 1.0 : min(_4270, 1.0));
    float _2288 = dot(vec3(cbLight._m0[_2188].xyz), vec3(_2276, _2277, _2278));
    float _4281 = isnan(0.0) ? _2288 : (isnan(_2288) ? 0.0 : max(_2288, 0.0));
    float _2292 = _2268 * _2268;
    float _2296 = ((_2287 * _2287) * (_2292 + (-1.0))) + 1.0;
    float _2307 = (exp2(log2(1.0 - (isnan(1.0) ? _4281 : (isnan(_4281) ? 1.0 : min(_4281, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2308 = 1.0 - _2268;
    float _2319 = (0.5 / (((_2283 * ((_2282 * _2308) + _2268)) + 9.9999999392252902907785028219223e-09) + (((_2283 * _2308) + _2268) * _2282))) * _2282;
    float _4292 = isnan(0.0) ? _2319 : (isnan(_2319) ? 0.0 : max(_2319, 0.0));
    float _2321 = (isnan(1.0) ? _4292 : (isnan(_4292) ? 1.0 : min(_4292, 1.0))) * (_2292 / ((_2296 * _2296) * 3.141590118408203125));
    uint _2335 = _2188 + 9u;
    float _2346 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2222].w)) * _795) * 0.949999988079071044921875);
    float _2347 = _2346 * _2346;
    float _2348 = cbLight._m0[_2222].x + _819;
    float _2349 = cbLight._m0[_2222].y + _820;
    float _2350 = cbLight._m0[_2222].z + _821;
    float _2354 = inversesqrt(dot(vec3(_2348, _2349, _2350), vec3(_2348, _2349, _2350)));
    float _2355 = _2354 * _2348;
    float _2356 = _2354 * _2349;
    float _2357 = _2354 * _2350;
    float _2358 = dot(vec3(_792, _793, _794), vec3(cbLight._m0[_2222].xyz));
    float _4303 = isnan(0.0) ? _2358 : (isnan(_2358) ? 0.0 : max(_2358, 0.0));
    float _2361 = isnan(1.0) ? _4303 : (isnan(_4303) ? 1.0 : min(_4303, 1.0));
    float _2362 = dot(vec3(_792, _793, _794), vec3(_2355, _2356, _2357));
    float _4314 = isnan(0.0) ? _2362 : (isnan(_2362) ? 0.0 : max(_2362, 0.0));
    float _2365 = isnan(1.0) ? _4314 : (isnan(_4314) ? 1.0 : min(_4314, 1.0));
    float _2366 = dot(vec3(cbLight._m0[_2222].xyz), vec3(_2355, _2356, _2357));
    float _4325 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0));
    float _2370 = _2347 * _2347;
    float _2374 = ((_2365 * _2365) * (_2370 + (-1.0))) + 1.0;
    float _2383 = (exp2(log2(1.0 - (isnan(1.0) ? _4325 : (isnan(_4325) ? 1.0 : min(_4325, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2384 = 1.0 - _2347;
    float _2394 = (0.5 / (((_2283 * ((_2361 * _2384) + _2347)) + 9.9999999392252902907785028219223e-09) + (((_2283 * _2384) + _2347) * _2361))) * _2361;
    float _4336 = isnan(0.0) ? _2394 : (isnan(_2394) ? 0.0 : max(_2394, 0.0));
    float _2396 = (isnan(1.0) ? _4336 : (isnan(_4336) ? 1.0 : min(_4336, 1.0))) * (_2370 / ((_2374 * _2374) * 3.141590118408203125));
    float _2406 = (((_2383 * cbLight._m0[_2335].x) * _2396) * _2205) + ((((cbLight._m0[_2254].x * _2177) * _2307) * _2321) * _2218);
    float _2407 = (((_2383 * cbLight._m0[_2335].y) * _2396) * _2205) + ((((cbLight._m0[_2254].y * _2179) * _2307) * _2321) * _2218);
    float _2408 = (((_2383 * cbLight._m0[_2335].z) * _2396) * _2205) + ((((cbLight._m0[_2254].z * _2181) * _2307) * _2321) * _2218);
    float _2571;
    float _2573;
    float _2575;
    float _2577;
    float _2579;
    float _2581;
    if (_2186.y == 0u)
    {
        uvec4 _2526 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2527 = _2526.x;
        uint _2538 = uint((float(_2526.y) * floor(float(uint(cbSceneParam._m0[85u].y * _828) / _2527))) + floor(float(uint(cbSceneParam._m0[85u].x * _827) / _2527)));
        float _2548 = (log2(_1964 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2549 = isnan(0.0) ? _2548 : (isnan(_2548) ? 0.0 : max(_2548, 0.0));
        uint _2552 = uint(isnan(14.0) ? _2549 : (isnan(_2549) ? 14.0 : min(_2549, 14.0)));
        uvec4 _2557 = texelFetch(g_lightClusterGridBuffer, int(((_2552 << 2u) + (_2538 << 6u)) >> 2u));
        uint _2558 = _2557.x;
        uint _2559 = _2526.z;
        float _2682;
        float _2684;
        float _2686;
        float _2688;
        float _2690;
        float _2692;
        if (((((1u << ((_2559 >> 4u) & 15u)) + 4294967295u) & _2558) == 0u) || ((_2559 & 240u) == 0u))
        {
            _2682 = 0.0;
            _2684 = 0.0;
            _2686 = 0.0;
            _2688 = 0.0;
            _2690 = 0.0;
            _2692 = 0.0;
        }
        else
        {
            float _2683;
            float _2685;
            float _2687;
            float _2689;
            float _2691;
            float _2693;
            float _2852 = 0.0;
            float _2853 = 0.0;
            float _2854 = 0.0;
            float _2855 = 0.0;
            float _2856 = 0.0;
            float _2857 = 0.0;
            uint _2858 = 0u;
            uint _2867;
            bool _2868;
            for (;;)
            {
                _2867 = texelFetch(g_lightClassification, int((((_2552 << 5u) + (_2538 << 9u)) + (_2858 << 2u)) >> 2u)).x;
                _2868 = _2867 == 0u;
                float frontier_phi_98_pred;
                float frontier_phi_98_pred_1;
                float frontier_phi_98_pred_2;
                float frontier_phi_98_pred_3;
                float frontier_phi_98_pred_4;
                float frontier_phi_98_pred_5;
                if (_2868)
                {
                    frontier_phi_98_pred = _2852;
                    frontier_phi_98_pred_1 = _2853;
                    frontier_phi_98_pred_2 = _2857;
                    frontier_phi_98_pred_3 = _2856;
                    frontier_phi_98_pred_4 = _2855;
                    frontier_phi_98_pred_5 = _2854;
                }
                else
                {
                    float _2997;
                    float _2998;
                    float _2999;
                    float _3000;
                    float _3001;
                    float _3002;
                    uint _3003;
                    _2997 = _2852;
                    _2998 = _2853;
                    _2999 = _2854;
                    _3000 = _2855;
                    _3001 = _2856;
                    _3002 = _2857;
                    _3003 = _2867;
                    float _2929;
                    float _2930;
                    float _2931;
                    float _2932;
                    float _2933;
                    float _2934;
                    for (;;)
                    {
                        uint _3007 = uint(findLSB(_3003)) + (_2858 << 5u);
                        uint _3004 = (_3003 + 4294967295u) & _3003;
                        uint _3009 = _3007 * 48u;
                        vec4 _3023 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3009)).x, texelFetch(g_PointLightRenderingBuffer, int(_3009 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3009 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3009 + 3u)).x));
                        uint _3029 = (_3007 * 48u) + 4u;
                        vec4 _3042 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3029)).x, texelFetch(g_PointLightRenderingBuffer, int(_3029 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3029 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3029 + 3u)).x));
                        uint _3048 = (_3007 * 48u) + 8u;
                        vec3 _3059 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3048)).x, texelFetch(g_PointLightRenderingBuffer, int(_3048 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3048 + 2u)).x));
                        float _3063 = _3023.x - _1962;
                        float _3064 = _3023.y - _1963;
                        float _3065 = _3023.z - _1964;
                        float _3066 = dot(vec3(_3063, _3064, _3065), vec3(_3063, _3064, _3065));
                        float _3069 = inversesqrt(_3066);
                        float _3070 = _3069 * _3063;
                        float _3071 = _3069 * _3064;
                        float _3072 = _3069 * _3065;
                        float _3073 = dot(vec3(_847, _850, _853), vec3(_3070, _3071, _3072));
                        float _3078 = 1.0 - (_3066 * _3023.w);
                        float _4357 = isnan(0.0) ? _3078 : (isnan(_3078) ? 0.0 : max(_3078, 0.0));
                        float _3079 = isnan(1.0) ? _4357 : (isnan(_4357) ? 1.0 : min(_4357, 1.0));
                        float _3080 = sqrt(_3066) * _3042.w;
                        float _3083 = 1.39999997615814208984375 / (_3080 + 1.39999997615814208984375);
                        float _3084 = _3083 * _3083;
                        float _3087 = ((1.0 - _3084) * _3073) + _3084;
                        float _3090 = _3080 * _3080;
                        float _3094 = ((isnan(0.0) ? _3087 : (isnan(_3087) ? 0.0 : max(_3087, 0.0))) * _3079) / ((_3090 * 0.699999988079071044921875) + 1.0);
                        float _3098 = (-0.0) - _1962;
                        float _3099 = (-0.0) - _1963;
                        float _3100 = (-0.0) - _1964;
                        float _3104 = inversesqrt(dot(vec3(_3098, _3099, _3100), vec3(_3098, _3099, _3100)));
                        float _3105 = _3104 * _3098;
                        float _3106 = _3104 * _3099;
                        float _3107 = _3104 * _3100;
                        float _3114 = exp2(log2(1.0 / ((_3090 * 3.5) + 5.0)) * 0.25);
                        float _3115 = 1.0 - _908;
                        float _3122 = sqrt(1.0 - ((1.0 - (_3115 * _3115)) * (1.0 - (_3114 * _3114))));
                        float _3123 = _3122 * _3122;
                        float _3124 = _3123 * _3123;
                        float _3125 = _3105 + _3070;
                        float _3126 = _3106 + _3071;
                        float _3127 = _3107 + _3072;
                        float _3131 = inversesqrt(dot(vec3(_3125, _3126, _3127), vec3(_3125, _3126, _3127)));
                        float _3135 = dot(vec3(_847, _850, _853), vec3(_3105, _3106, _3107));
                        float _4373 = isnan(0.0) ? _3135 : (isnan(_3135) ? 0.0 : max(_3135, 0.0));
                        float _3138 = isnan(1.0) ? _4373 : (isnan(_4373) ? 1.0 : min(_4373, 1.0));
                        float _3139 = dot(vec3(_847, _850, _853), vec3(_3131 * _3125, _3131 * _3126, _3131 * _3127));
                        float _4384 = isnan(0.0) ? _3139 : (isnan(_3139) ? 0.0 : max(_3139, 0.0));
                        float _3142 = isnan(1.0) ? _4384 : (isnan(_4384) ? 1.0 : min(_4384, 1.0));
                        float _3146 = ((_3142 * _3142) * (_3124 + (-1.0))) + 1.0;
                        float _3147 = _3083 * _3123;
                        float _3148 = _3147 * _3147;
                        float _3151 = ((1.0 - _3148) * _3073) + _3148;
                        float _4395 = isnan(0.0) ? _3151 : (isnan(_3151) ? 0.0 : max(_3151, 0.0));
                        float _3152 = isnan(1.0) ? _4395 : (isnan(_4395) ? 1.0 : min(_4395, 1.0));
                        float _3153 = 1.0 - _3123;
                        float _3163 = (0.5 / (((_3152 * ((_3138 * _3153) + _3123)) + 9.9999999392252902907785028219223e-09) + (((_3152 * _3153) + _3123) * _3138))) * _3152;
                        float _4406 = isnan(0.0) ? _3163 : (isnan(_3163) ? 0.0 : max(_3163, 0.0));
                        float _3174 = (((_3124 * 3.1415927410125732421875) * (isnan(1.0) ? _4406 : (isnan(_4406) ? 1.0 : min(_4406, 1.0)))) / ((_3146 * _3146) * ((_3090 * 2.1991131305694580078125) + 3.141590118408203125))) * _3079;
                        _2932 = (_3094 * _3042.x) + _3000;
                        _2933 = (_3094 * _3042.y) + _3001;
                        _2934 = (_3094 * _3042.z) + _3002;
                        _2929 = (_3174 * _3059.x) + _2997;
                        _2930 = (_3174 * _3059.y) + _2998;
                        _2931 = (_3174 * _3059.z) + _2999;
                        if (_3004 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2997 = _2929;
                            _2998 = _2930;
                            _2999 = _2931;
                            _3000 = _2932;
                            _3001 = _2933;
                            _3002 = _2934;
                            _3003 = _3004;
                        }
                    }
                    frontier_phi_98_pred = _2929;
                    frontier_phi_98_pred_1 = _2930;
                    frontier_phi_98_pred_2 = _2934;
                    frontier_phi_98_pred_3 = _2933;
                    frontier_phi_98_pred_4 = _2932;
                    frontier_phi_98_pred_5 = _2931;
                }
                _2683 = frontier_phi_98_pred;
                _2685 = frontier_phi_98_pred_1;
                _2693 = frontier_phi_98_pred_2;
                _2691 = frontier_phi_98_pred_3;
                _2689 = frontier_phi_98_pred_4;
                _2687 = frontier_phi_98_pred_5;
                uint _2859 = _2858 + 1u;
                if (_2859 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2852 = _2683;
                    _2853 = _2685;
                    _2854 = _2687;
                    _2855 = _2689;
                    _2856 = _2691;
                    _2857 = _2693;
                    _2858 = _2859;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2682 = _2683;
            _2684 = _2685;
            _2686 = _2687;
            _2688 = _2689;
            _2690 = _2691;
            _2692 = _2693;
        }
        uvec4 _2696 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2697 = _2696.z;
        uint _2699 = (_2697 >> 8u) & 15u;
        float _2820;
        float _2822;
        float _2824;
        float _2826;
        float _2828;
        float _2830;
        if (((4294967295u << _2699) & _2558) == 0u)
        {
            _2820 = _2682;
            _2822 = _2684;
            _2824 = _2686;
            _2826 = _2688;
            _2828 = _2690;
            _2830 = _2692;
        }
        else
        {
            float _2845 = inversesqrt(dot(vec3(_1962, _1963, _1964), vec3(_1962, _1963, _1964)));
            float _2846 = _2845 * _1962;
            float _2847 = _2845 * _1963;
            float _2848 = _2845 * _1964;
            float frontier_phi_91_92_ladder;
            float frontier_phi_91_92_ladder_1;
            float frontier_phi_91_92_ladder_2;
            float frontier_phi_91_92_ladder_3;
            float frontier_phi_91_92_ladder_4;
            float frontier_phi_91_92_ladder_5;
            if (_2699 < ((_2697 >> 12u) & 15u))
            {
                float _2821;
                float _2823;
                float _2825;
                float _2827;
                float _2829;
                float _2831;
                float _2980 = _2682;
                float _2981 = _2684;
                float _2982 = _2686;
                float _2983 = _2688;
                float _2984 = _2690;
                float _2985 = _2692;
                uint _2986 = _2699;
                uint _2995;
                bool _2996;
                for (;;)
                {
                    _2995 = texelFetch(g_lightClassification, int((((_2552 << 5u) + (_2538 << 9u)) + (_2986 << 2u)) >> 2u)).x;
                    _2996 = _2995 == 0u;
                    float frontier_phi_104_pred;
                    float frontier_phi_104_pred_1;
                    float frontier_phi_104_pred_2;
                    float frontier_phi_104_pred_3;
                    float frontier_phi_104_pred_4;
                    float frontier_phi_104_pred_5;
                    if (_2996)
                    {
                        frontier_phi_104_pred = _2985;
                        frontier_phi_104_pred_1 = _2984;
                        frontier_phi_104_pred_2 = _2983;
                        frontier_phi_104_pred_3 = _2982;
                        frontier_phi_104_pred_4 = _2981;
                        frontier_phi_104_pred_5 = _2980;
                    }
                    else
                    {
                        float _3179;
                        float _3180;
                        float _3181;
                        float _3182;
                        float _3183;
                        float _3184;
                        float _3472;
                        float _3473;
                        float _3474;
                        float _3475;
                        float _3476;
                        float _3477;
                        float _3192 = _2980;
                        float _3193 = _2981;
                        float _3194 = _2982;
                        float _3195 = _2983;
                        float _3196 = _2984;
                        float _3197 = _2985;
                        uint _3198 = _2995;
                        uint _3199;
                        vec4 _3224;
                        float _3225;
                        vec4 _3240;
                        vec3 _3252;
                        vec4 _3267;
                        vec4 _3282;
                        float _3328;
                        bool _3329;
                        for (;;)
                        {
                            uint _3209 = ((_2986 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3198));
                            _3199 = (_3198 + 4294967295u) & _3198;
                            uint _3211 = _3209 * 40u;
                            _3224 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3211)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3211 + 3u)).x));
                            _3225 = _3224.w;
                            uint _3227 = (_3209 * 40u) + 4u;
                            _3240 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3227)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3227 + 3u)).x));
                            uint _3242 = (_3209 * 40u) + 8u;
                            _3252 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3242)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3242 + 2u)).x));
                            uint _3254 = (_3209 * 40u) + 16u;
                            _3267 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3254)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3254 + 3u)).x));
                            uint _3269 = (_3209 * 40u) + 20u;
                            _3282 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3269)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3269 + 3u)).x));
                            uint _3284 = (_3209 * 40u) + 24u;
                            vec4 _3297 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3284)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3284 + 3u)).x));
                            uint _3303 = (_3209 * 40u) + 28u;
                            vec4 _3316 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3303)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3303 + 3u)).x));
                            _3328 = fma(_1964, _3316.z, fma(_1963, _3316.y, _3316.x * _1962)) + _3316.w;
                            _3329 = !((fma(_1964, _3297.z, fma(_1963, _3297.y, _3297.x * _1962)) + _3297.w) <= 0.0);
                            float frontier_phi_110_pred;
                            float frontier_phi_110_pred_1;
                            float frontier_phi_110_pred_2;
                            float frontier_phi_110_pred_3;
                            float frontier_phi_110_pred_4;
                            float frontier_phi_110_pred_5;
                            if (_3329)
                            {
                                float _3356 = _3224.x - _1962;
                                float _3357 = _3224.y - _1963;
                                float _3358 = _3224.z - _1964;
                                float _3359 = dot(vec3(_3356, _3357, _3358), vec3(_3356, _3357, _3358));
                                float _3362 = inversesqrt(_3359);
                                float _3363 = _3362 * _3356;
                                float _3364 = _3362 * _3357;
                                float _3365 = _3362 * _3358;
                                float _3369 = 1.0 - (_3359 / (_3225 * _3225));
                                float _4417 = isnan(0.0) ? _3369 : (isnan(_3369) ? 0.0 : max(_3369, 0.0));
                                float _3370 = isnan(1.0) ? _4417 : (isnan(_4417) ? 1.0 : min(_4417, 1.0));
                                float _3374 = sqrt(_3359) * _3240.w;
                                float _3376 = 1.39999997615814208984375 / (_3374 + 1.39999997615814208984375);
                                float _3377 = _3376 * _3376;
                                float _3380 = ((1.0 - _3377) * dot(vec3(_3363, _3364, _3365), vec3(_847, _850, _853))) + _3377;
                                float _3383 = _3374 * _3374;
                                float _3387 = (fma(_1964, _3267.z, fma(_1963, _3267.y, _3267.x * _1962)) + _3267.w) / _3328;
                                float _3388 = (fma(_1964, _3282.z, fma(_1963, _3282.y, _3282.x * _1962)) + _3282.w) / _3328;
                                float _3392 = 1.0 - dot(vec2(_3387, _3388), vec2(_3387, _3388));
                                float _4433 = isnan(0.0) ? _3392 : (isnan(_3392) ? 0.0 : max(_3392, 0.0));
                                float _3393 = isnan(1.0) ? _4433 : (isnan(_4433) ? 1.0 : min(_4433, 1.0));
                                float _3394 = _3393 * (((isnan(0.0) ? _3380 : (isnan(_3380) ? 0.0 : max(_3380, 0.0))) * _3370) / ((_3383 * 0.699999988079071044921875) + 1.0));
                                float _3406 = exp2(log2(1.0 / ((_3383 * 3.5) + 5.0)) * 0.25);
                                float _3407 = 1.0 - _908;
                                float _3414 = sqrt(1.0 - ((1.0 - (_3407 * _3407)) * (1.0 - (_3406 * _3406))));
                                float _3415 = _3414 * _3414;
                                float _3416 = _3415 * _3415;
                                float _3417 = _3363 - _2846;
                                float _3418 = _3364 - _2847;
                                float _3419 = _3365 - _2848;
                                float _3423 = inversesqrt(dot(vec3(_3417, _3418, _3419), vec3(_3417, _3418, _3419)));
                                float _3427 = dot(vec3(_847, _850, _853), vec3((-0.0) - _2846, (-0.0) - _2847, (-0.0) - _2848));
                                float _4444 = isnan(0.0) ? _3427 : (isnan(_3427) ? 0.0 : max(_3427, 0.0));
                                float _3430 = isnan(1.0) ? _4444 : (isnan(_4444) ? 1.0 : min(_4444, 1.0));
                                float _3431 = dot(vec3(_847, _850, _853), vec3(_3423 * _3417, _3423 * _3418, _3423 * _3419));
                                float _4455 = isnan(0.0) ? _3431 : (isnan(_3431) ? 0.0 : max(_3431, 0.0));
                                float _3434 = isnan(1.0) ? _4455 : (isnan(_4455) ? 1.0 : min(_4455, 1.0));
                                float _3438 = ((_3434 * _3434) * (_3416 + (-1.0))) + 1.0;
                                float _3439 = _3376 * _3415;
                                float _3440 = _3439 * _3439;
                                float _3446 = ((1.0 - _3440) * dot(vec3(_847, _850, _853), vec3(_3363, _3364, _3365))) + _3440;
                                float _4466 = isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0));
                                float _3447 = isnan(1.0) ? _4466 : (isnan(_4466) ? 1.0 : min(_4466, 1.0));
                                float _3448 = 1.0 - _3415;
                                float _3458 = (0.5 / (((_3447 * ((_3430 * _3448) + _3415)) + 9.9999999392252902907785028219223e-09) + (((_3447 * _3448) + _3415) * _3430))) * _3447;
                                float _4477 = isnan(0.0) ? _3458 : (isnan(_3458) ? 0.0 : max(_3458, 0.0));
                                float _3468 = (_3393 * _3370) * (((_3416 * 3.1415927410125732421875) * (isnan(1.0) ? _4477 : (isnan(_4477) ? 1.0 : min(_4477, 1.0)))) / ((_3438 * _3438) * ((_3383 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_110_pred = _3468 * _3252.z;
                                frontier_phi_110_pred_1 = _3394 * _3240.z;
                                frontier_phi_110_pred_2 = _3394 * _3240.y;
                                frontier_phi_110_pred_3 = _3394 * _3240.x;
                                frontier_phi_110_pred_4 = _3468 * _3252.y;
                                frontier_phi_110_pred_5 = _3468 * _3252.x;
                            }
                            else
                            {
                                frontier_phi_110_pred = 0.0;
                                frontier_phi_110_pred_1 = 0.0;
                                frontier_phi_110_pred_2 = 0.0;
                                frontier_phi_110_pred_3 = 0.0;
                                frontier_phi_110_pred_4 = 0.0;
                                frontier_phi_110_pred_5 = 0.0;
                            }
                            _3474 = frontier_phi_110_pred;
                            _3477 = frontier_phi_110_pred_1;
                            _3476 = frontier_phi_110_pred_2;
                            _3475 = frontier_phi_110_pred_3;
                            _3473 = frontier_phi_110_pred_4;
                            _3472 = frontier_phi_110_pred_5;
                            _3182 = _3475 + _3195;
                            _3183 = _3476 + _3196;
                            _3184 = _3477 + _3197;
                            _3179 = _3472 + _3192;
                            _3180 = _3473 + _3193;
                            _3181 = _3474 + _3194;
                            if (_3199 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3192 = _3179;
                                _3193 = _3180;
                                _3194 = _3181;
                                _3195 = _3182;
                                _3196 = _3183;
                                _3197 = _3184;
                                _3198 = _3199;
                                continue;
                            }
                        }
                        frontier_phi_104_pred = _3184;
                        frontier_phi_104_pred_1 = _3183;
                        frontier_phi_104_pred_2 = _3182;
                        frontier_phi_104_pred_3 = _3181;
                        frontier_phi_104_pred_4 = _3180;
                        frontier_phi_104_pred_5 = _3179;
                    }
                    _2831 = frontier_phi_104_pred;
                    _2829 = frontier_phi_104_pred_1;
                    _2827 = frontier_phi_104_pred_2;
                    _2825 = frontier_phi_104_pred_3;
                    _2823 = frontier_phi_104_pred_4;
                    _2821 = frontier_phi_104_pred_5;
                    uint _2987 = _2986 + 1u;
                    if (_2987 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2980 = _2821;
                        _2981 = _2823;
                        _2982 = _2825;
                        _2983 = _2827;
                        _2984 = _2829;
                        _2985 = _2831;
                        _2986 = _2987;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_91_92_ladder = _2831;
                frontier_phi_91_92_ladder_1 = _2829;
                frontier_phi_91_92_ladder_2 = _2827;
                frontier_phi_91_92_ladder_3 = _2825;
                frontier_phi_91_92_ladder_4 = _2823;
                frontier_phi_91_92_ladder_5 = _2821;
            }
            else
            {
                frontier_phi_91_92_ladder = _2692;
                frontier_phi_91_92_ladder_1 = _2690;
                frontier_phi_91_92_ladder_2 = _2688;
                frontier_phi_91_92_ladder_3 = _2686;
                frontier_phi_91_92_ladder_4 = _2684;
                frontier_phi_91_92_ladder_5 = _2682;
            }
            _2820 = frontier_phi_91_92_ladder_5;
            _2822 = frontier_phi_91_92_ladder_4;
            _2824 = frontier_phi_91_92_ladder_3;
            _2826 = frontier_phi_91_92_ladder_2;
            _2828 = frontier_phi_91_92_ladder_1;
            _2830 = frontier_phi_91_92_ladder;
        }
        float _2835 = isnan(1.0) ? _892 : (isnan(_892) ? 1.0 : min(_892, 1.0));
        _2571 = (_2835 * _2826) + _2250;
        _2573 = (_2835 * _2828) + _2251;
        _2575 = (_2835 * _2830) + _2252;
        _2577 = ((_2820 * 0.039999999105930328369140625) * _2835) + _2406;
        _2579 = ((_2822 * 0.039999999105930328369140625) * _2835) + _2407;
        _2581 = ((_2824 * 0.039999999105930328369140625) * _2835) + _2408;
    }
    else
    {
        _2571 = _2250;
        _2573 = _2251;
        _2575 = _2252;
        _2577 = _2406;
        _2579 = _2407;
        _2581 = _2408;
    }
    uint _2587 = _868 + uint(cbMatDynParam._m0[0u].w);
    float _4493 = isnan(0.0) ? _878 : (isnan(_878) ? 0.0 : max(_878, 0.0));
    float _4504 = isnan(0.0) ? _879 : (isnan(_879) ? 0.0 : max(_879, 0.0));
    float _4515 = isnan(0.0) ? _880 : (isnan(_880) ? 0.0 : max(_880, 0.0));
    float _2612 = (((isnan(1.0) ? _4493 : (isnan(_4493) ? 1.0 : min(_4493, 1.0))) * (_2571 + ((isnan(0.0) ? _1619 : (isnan(_1619) ? 0.0 : max(_1619, 0.0))) * _892))) + ((_2577 + ((isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0))) * _1698)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2587].x * ((((((cbMtdParam._m0[14u].x * _291) * _686.x) - _618) * _291) * _739) + _618));
    float _2614 = ((cbInstanceData._m0[_2587].y * ((((((cbMtdParam._m0[14u].y * _291) * _686.y) - _619) * _291) * _739) + _619)) + ((_2579 + ((isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0))) * _1698)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4504 : (isnan(_4504) ? 1.0 : min(_4504, 1.0))) * (_2573 + ((isnan(0.0) ? _1622 : (isnan(_1622) ? 0.0 : max(_1622, 0.0))) * _892)));
    float _2616 = ((cbInstanceData._m0[_2587].z * ((((((cbMtdParam._m0[14u].z * _291) * _686.z) - _620) * _291) * _739) + _620)) + ((_2581 + ((isnan(0.0) ? _1915 : (isnan(_1915) ? 0.0 : max(_1915, 0.0))) * _1698)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4515 : (isnan(_4515) ? 1.0 : min(_4515, 1.0))) * (_2575 + ((isnan(0.0) ? _1625 : (isnan(_1625) ? 0.0 : max(_1625, 0.0))) * _892)));
    uint _2620 = _866 + 6u;
    float _2628 = _827 / cbSceneParam._m0[86u].x;
    float _2629 = _828 / cbSceneParam._m0[86u].y;
    vec4 _2643 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2628, _2629, (log2((isnan(cbSceneParam._m0[77u].w) ? _814 : (isnan(_814) ? cbSceneParam._m0[77u].w : min(_814, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2645 = _2643.x;
    float _2646 = _2643.y;
    float _2647 = _2643.z;
    float _2648 = _2643.w;
    float _2744;
    float _2746;
    float _2748;
    float _2750;
    if (_814 > cbSceneParam._m0[78u].w)
    {
        float _2707 = isnan(_814) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _814 : min(cbSceneParam._m0[80u].w, _814));
        float _2708 = _2707 / _814;
        float _2719 = _2708 * _273;
        float _2720 = _274 * _2708;
        float _2721 = (-0.0) - _2720;
        float _2722 = _2708 * _275;
        float _2724 = (cbSceneParam._m0[77u].w * _2721) / _2707;
        float _2725 = _2724 + cbSceneParam._m0[79u].w;
        float _2726 = cbSceneParam._m0[79u].w - _2720;
        float _2732 = sqrt(((_2719 * _2719) + (_2720 * _2720)) + (_2722 * _2722));
        float _2735 = (1.0 - (cbSceneParam._m0[77u].w / _2707)) * _2732;
        float _2740 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2742 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2942;
        if (abs((_2721 - _2724) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2942 = ((((_2725 > 0.0) ? exp2(_2740 * _2725) : (2.0 - exp2(_2742 * _2725))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2735;
        }
        else
        {
            float _2881 = 1.0 / cbSceneParam._m0[80u].x;
            float _2882 = isnan(_2726) ? _2725 : (isnan(_2725) ? _2726 : max(_2725, _2726));
            float _2883 = isnan(_2726) ? _2725 : (isnan(_2725) ? _2726 : min(_2725, _2726));
            float _2892 = isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : min(_2882, 0.0));
            float _2893 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : min(_2883, 0.0));
            _2942 = ((abs(_2732 / _2721) * cbSceneParam._m0[80u].y) * ((((_2892 - _2893) * 2.0) - ((exp2(_2740 * (isnan(0.0) ? _2882 : (isnan(_2882) ? 0.0 : max(_2882, 0.0)))) - exp2(_2740 * (isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0))))) * _2881)) - ((exp2(_2742 * _2892) - exp2(_2742 * _2893)) * _2881))) + (_2735 * cbSceneParam._m0[80u].z);
        }
        vec4 _2944 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2628, _2629, 1.0), 0.0);
        float _2953 = exp2((_2942 * (-1.44269502162933349609375)) * (1.0 - _2944.w));
        float _2954 = log2(_2953);
        float _2970 = log2(_2648);
        _2744 = (exp2(_2970 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2954 * cbSceneParam._m0[78u].x)) * _2944.x) / cbSceneParam._m0[78u].x)) + _2645;
        _2746 = (exp2(_2970 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2954 * cbSceneParam._m0[78u].y)) * _2944.y) / cbSceneParam._m0[78u].y)) + _2646;
        _2748 = (exp2(_2970 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2954 * cbSceneParam._m0[78u].z)) * _2944.z) / cbSceneParam._m0[78u].z)) + _2647;
        _2750 = _2953 * _2648;
    }
    else
    {
        _2744 = _2645;
        _2746 = _2646;
        _2748 = _2647;
        _2750 = _2648;
    }
    float _2762 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2763 = _2762 == 3.0;
    float _2764 = log2(_2750);
    float _2771 = exp2(_2764 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0)));
    float _2772 = exp2(_2764 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2614 : (isnan(_2614) ? 0.0 : max(_2614, 0.0)));
    float _2773 = exp2(_2764 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2616 : (isnan(_2616) ? 0.0 : max(_2616, 0.0)));
    float _2782 = (_2762 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2782 * (_2763 ? _2771 : (_2771 + (cbSceneParam._m0[72u].w * _2744)));
    SV_Target.y = _2782 * (_2763 ? _2772 : (_2772 + (cbSceneParam._m0[72u].w * _2746)));
    SV_Target.z = _2782 * (_2763 ? _2773 : (_2773 + (cbSceneParam._m0[72u].w * _2748)));
    SV_Target.w = cbInstanceData._m0[_2620].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2620].w;
}


