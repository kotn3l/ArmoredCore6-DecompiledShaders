#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1126;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _196 = _195 * _188;
    float _197 = _195 * _189;
    float _198 = _195 * _190;
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _203 = _202 * NORMAL.x;
    float _204 = _202 * NORMAL.y;
    float _205 = _202 * NORMAL.z;
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _210 = _209 * TANGENT.x;
    float _211 = _209 * TANGENT.y;
    float _212 = _209 * TANGENT.z;
    float _257 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _267 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _257);
    float _268 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _257);
    float _269 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _257);
    vec4 _282 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _285 = _282.x;
    vec4 _303 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _320 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _285) + cbMtdParam._m0[12u].x) * _303.x;
    float _322 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _285) + cbMtdParam._m0[12u].y) * _303.y;
    float _324 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _285) + cbMtdParam._m0[12u].z) * _303.z;
    vec4 _342 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _378 = cbMtdParam._m0[24u].x + _267;
    float _379 = cbMtdParam._m0[24u].y + _268;
    float _380 = cbMtdParam._m0[24u].z + _269;
    float _394 = (-0.0) - dot(vec3(_378, _379, _380), vec3(_196, _197, _198));
    float _395 = (-0.0) - dot(vec3(_378, _379, _380), vec3(_210, _211, _212));
    float _396 = (-0.0) - dot(vec3(_378, _379, _380), vec3((-0.0) - _203, (-0.0) - _204, (-0.0) - _205));
    float _400 = inversesqrt(dot(vec3(_394, _395, _396), vec3(_394, _395, _396)));
    float _403 = _400 * _396;
    float _404 = (_400 * _394) + ((cbMtdParam._m0[22u].x * _285) * ((_342.x * 2.0) + (-1.0)));
    float _405 = (_400 * _395) + ((cbMtdParam._m0[22u].y * _285) * ((_342.y * 2.0) + (-1.0)));
    float _406 = _404 * cbMtdParam._m0[20u].w;
    float _407 = _405 * cbMtdParam._m0[20u].z;
    float _408 = fract(TEXCOORD.x);
    float _409 = fract(TEXCOORD.y);
    float _415;
    if (_406 > 0.0)
    {
        _415 = (1.0 - _408) / _406;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_406 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _408) / _406;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _415 = frontier_phi_3_2_ladder;
    }
    float _423;
    if (_407 > 0.0)
    {
        _423 = (1.0 - _409) / _407;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_407 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _409) / _407;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _423 = frontier_phi_7_6_ladder;
    }
    bool _425 = _403 > 0.0;
    float _427 = _425 ? (cbMtdParam._m0[16u].x / _403) : 5000.0;
    float _428 = isnan(_423) ? _415 : (isnan(_415) ? _423 : min(_415, _423));
    float _429 = isnan(_427) ? _428 : (isnan(_428) ? _427 : min(_428, _427));
    float _433 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _434 = _408 + (-0.5);
    float _437 = _409 + (-0.5);
    float _440 = ((_429 * _403) + _433) / _433;
    vec4 _465 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (((((_434 + (_429 * _406)) / _440) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (((((_437 + (_429 * _407)) / _440) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    float _478 = (_465.x * _285) * cbMtdParam._m0[9u].x;
    float _479 = (_465.y * _285) * cbMtdParam._m0[9u].y;
    float _480 = (_465.z * _285) * cbMtdParam._m0[9u].z;
    float _499 = _404 * cbMtdParam._m0[22u].w;
    float _500 = _405 * cbMtdParam._m0[22u].z;
    bool _501 = _499 > 0.0;
    float _506;
    if (_501)
    {
        _506 = (1.0 - _408) / _499;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_499 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _408) / _499;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _506 = frontier_phi_11_10_ladder;
    }
    bool _508 = _500 > 0.0;
    float _513;
    if (_508)
    {
        _513 = (1.0 - _409) / _500;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_500 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _409) / _500;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _513 = frontier_phi_15_14_ladder;
    }
    float _516 = _425 ? (cbMtdParam._m0[18u].x / _403) : 5000.0;
    float _517 = isnan(_513) ? _506 : (isnan(_506) ? _513 : min(_506, _513));
    float _518 = isnan(_516) ? _517 : (isnan(_517) ? _516 : min(_517, _516));
    float _522 = cbMtdParam._m0[19u].y * cbMtdParam._m0[18u].x;
    float _526 = ((_518 * _403) + _522) / _522;
    float _531 = cbMtdParam._m0[19u].x - cbMtdParam._m0[20u].x * trunc(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    float _533 = floor(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    vec4 _549 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_434 + (_518 * _499)) / _526) + 0.5) + _531) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_437 + (_518 * _500)) / _526) + 0.5) + _533) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[0u].w));
    float _564;
    if (_501)
    {
        _564 = (1.0 - _408) / _499;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_499 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _408) / _499;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _564 = frontier_phi_19_18_ladder;
    }
    float _570;
    if (_508)
    {
        _570 = (1.0 - _409) / _500;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_500 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _409) / _500;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _570 = frontier_phi_23_22_ladder;
    }
    float _572 = isnan(_570) ? _564 : (isnan(_564) ? _570 : min(_564, _570));
    float _573 = isnan(_516) ? _572 : (isnan(_572) ? _516 : min(_572, _516));
    float _580 = ((_573 * _403) + _522) / _522;
    vec4 _600 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_434 + (_573 * _499)) / _580) + 0.5) + _531) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_437 + (_573 * _500)) / _580) + 0.5) + _533) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[8u].w));
    float _602 = _600.x;
    vec4 _627 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _631 = _627.z;
    float _634 = (_627.x * 2.0) + (-1.0);
    float _635 = (_627.y * 2.0) + (-1.0);
    float _636 = dot(vec2(_634, _635), vec2(_634, _635));
    float _3278 = isnan(0.0) ? _636 : (isnan(_636) ? 0.0 : max(_636, 0.0));
    float _641 = sqrt(1.0 - (isnan(1.0) ? _3278 : (isnan(_3278) ? 1.0 : min(_3278, 1.0))));
    float _644 = fma(_641, _203, fma(_635, _210, _634 * _196));
    float _647 = fma(_641, _204, fma(_635, _211, _634 * _197));
    float _650 = fma(_641, _205, fma(_635, _212, _634 * _198));
    float _654 = inversesqrt(dot(vec3(_644, _647, _650), vec3(_644, _647, _650)));
    float _655 = _654 * _644;
    float _656 = _654 * _647;
    float _657 = _654 * _650;
    float _3289 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _658 = isnan(1.0) ? _3289 : (isnan(_3289) ? 1.0 : min(_3289, 1.0));
    float _3300 = isnan(0.0) ? _320 : (isnan(_320) ? 0.0 : max(_320, 0.0));
    float _3311 = isnan(0.0) ? _322 : (isnan(_322) ? 0.0 : max(_322, 0.0));
    float _3322 = isnan(0.0) ? _324 : (isnan(_324) ? 0.0 : max(_324, 0.0));
    float _677 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _681 = inversesqrt(dot(vec3(_267, _268, _269), vec3(_267, _268, _269)));
    float _682 = _267 * _681;
    float _683 = _268 * _681;
    float _684 = _269 * _681;
    float _690 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _691 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _710 = fma(_657, cbSceneParam._m0[5u].z, fma(_656, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _655));
    float _713 = fma(_657, cbSceneParam._m0[6u].z, fma(_656, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _655));
    float _716 = fma(_657, cbSceneParam._m0[7u].z, fma(_656, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _655));
    uint _729 = uint(roundEven(NORMAL.w)) * 13u;
    uint _731 = _729 + 9u;
    uint _732 = _731 + uint(cbMatDynParam._m0[0u].w);
    float _738 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3300 : (isnan(_3300) ? 1.0 : min(_3300, 1.0)))) * cbInstanceData._m0[_732].x;
    float _739 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3311 : (isnan(_3311) ? 1.0 : min(_3311, 1.0)))) * cbInstanceData._m0[_732].y;
    float _740 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3322 : (isnan(_3322) ? 1.0 : min(_3322, 1.0)))) * cbInstanceData._m0[_732].z;
    float _3333 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
    float _741 = isnan(1.0) ? _3333 : (isnan(_3333) ? 1.0 : min(_3333, 1.0));
    float _3344 = isnan(0.0) ? _739 : (isnan(_739) ? 0.0 : max(_739, 0.0));
    float _742 = isnan(1.0) ? _3344 : (isnan(_3344) ? 1.0 : min(_3344, 1.0));
    float _3355 = isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0));
    float _743 = isnan(1.0) ? _3355 : (isnan(_3355) ? 1.0 : min(_3355, 1.0));
    vec4 _752 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _690, cbSceneParam._m0[86u].y * _691));
    float _755 = _752.x * TEXCOORD_4.z;
    float _756 = dot(vec3(_655, _656, _657), vec3(_682, _683, _684));
    float _759 = _756 * 2.0;
    float _763 = (_759 * _655) - _682;
    float _764 = (_759 * _656) - _683;
    float _765 = (_759 * _657) - _684;
    float _769 = abs(dot(vec3(_682, _683, _684), vec3(_655, _656, _657)));
    float _3366 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _771 = sqrt(_658);
    float _784 = exp2((_771 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3366 : (isnan(_3366) ? 1.0 : min(_3366, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_771 * 3.0));
    float _816 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _820 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _824 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1125;
    float _1127;
    float _1128;
    float _1129;
    float _1130;
    float _1131;
    float _1132;
    float _1133;
    float _1134;
    float _1135;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _852 = fma(_824, cbModelParam._m0[26u].z, fma(_820, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _816));
        float _856 = fma(_824, cbModelParam._m0[27u].z, fma(_820, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _816));
        float _860 = fma(_824, cbModelParam._m0[28u].z, fma(_820, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _816));
        float _883 = _816 + _655;
        float _884 = _820 + _656;
        float _885 = _824 + _657;
        float _895 = fma(_885, cbModelParam._m0[26u].z, fma(_884, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _883)) - _852;
        float _896 = fma(_885, cbModelParam._m0[27u].z, fma(_884, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _883)) - _856;
        float _897 = fma(_885, cbModelParam._m0[28u].z, fma(_884, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _883)) - _860;
        float _901 = inversesqrt(dot(vec3(_895, _896, _897), vec3(_895, _896, _897)));
        float _914 = ((_901 * _895) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_852 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _915 = ((_901 * _896) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_856 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _916 = ((_901 * _897) / cbModelParam._m0[34u].z) + ((((((_860 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _919 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_914, _915, _916), 0.0);
        vec4 _926 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_914, _915, _916), 0.0);
        vec4 _933 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_914, _915, _916), 0.0);
        vec4 _940 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_914, _915, _916), 0.0);
        float _953 = exp2((_919.w + (-0.5)) * 20.0) * 2.0;
        float _954 = _953 * (_919.x + (-0.5));
        float _955 = _953 * (_919.y + (-0.5));
        float _956 = _953 * (_919.z + (-0.5));
        float _963 = exp2((_926.w + (-0.5)) * 20.0) * 2.0;
        float _964 = _963 * (_926.x + (-0.5));
        float _965 = _963 * (_926.y + (-0.5));
        float _966 = _963 * (_926.z + (-0.5));
        float _973 = exp2((_933.w + (-0.5)) * 20.0) * 2.0;
        float _974 = _973 * (_933.x + (-0.5));
        float _975 = _973 * (_933.y + (-0.5));
        float _976 = _973 * (_933.z + (-0.5));
        float _983 = exp2((_940.w + (-0.5)) * 20.0) * 2.0;
        float _984 = _983 * (_940.x + (-0.5));
        float _985 = _983 * (_940.y + (-0.5));
        float _986 = _983 * (_940.z + (-0.5));
        float _987 = isnan(0.0) ? _984 : (isnan(_984) ? 0.0 : max(_984, 0.0));
        float _988 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _989 = isnan(0.0) ? _986 : (isnan(_986) ? 0.0 : max(_986, 0.0));
        float _990 = _954 * 0.5;
        float _991 = _964 * 0.5;
        float _992 = _974 * 0.5;
        float _993 = dot(vec3(_990, _991, _992), vec3(_990, _991, _992));
        float _998 = (_993 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_993);
        float _1007 = (dot(vec3(_655, _656, _657), vec3(_998 * _990, _998 * _991, _998 * _992)) + 1.0) * 0.5;
        float _3392 = isnan(0.0) ? _1007 : (isnan(_1007) ? 0.0 : max(_1007, 0.0));
        float _1017 = sqrt(((_991 * _991) + (_990 * _990)) + (_992 * _992)) / (_987 + 9.9999997473787516355514526367188e-06);
        float _3403 = isnan(0.0) ? _1017 : (isnan(_1017) ? 0.0 : max(_1017, 0.0));
        float _1018 = isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0));
        float _1019 = _1018 * 2.0;
        float _1023 = (1.0 - _1018) / (_1018 + 1.0);
        float _3414 = isnan(0.0) ? _1023 : (isnan(_1023) ? 0.0 : max(_1023, 0.0));
        float _1024 = isnan(1.0) ? _3414 : (isnan(_3414) ? 1.0 : min(_3414, 1.0));
        float _1033 = ((((1.0 - _1024) * (_1019 + 2.0)) * exp2(log2(isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0))) * (_1019 + 1.0))) + _1024) * _987;
        float _1034 = _955 * 0.5;
        float _1035 = _965 * 0.5;
        float _1036 = _975 * 0.5;
        float _1037 = dot(vec3(_1034, _1035, _1036), vec3(_1034, _1035, _1036));
        float _1042 = (_1037 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1037);
        float _1050 = (dot(vec3(_655, _656, _657), vec3(_1042 * _1034, _1042 * _1035, _1042 * _1036)) + 1.0) * 0.5;
        float _3425 = isnan(0.0) ? _1050 : (isnan(_1050) ? 0.0 : max(_1050, 0.0));
        float _1059 = sqrt(((_1035 * _1035) + (_1034 * _1034)) + (_1036 * _1036)) / (_988 + 9.9999997473787516355514526367188e-06);
        float _3436 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1060 = isnan(1.0) ? _3436 : (isnan(_3436) ? 1.0 : min(_3436, 1.0));
        float _1061 = _1060 * 2.0;
        float _1065 = (1.0 - _1060) / (_1060 + 1.0);
        float _3447 = isnan(0.0) ? _1065 : (isnan(_1065) ? 0.0 : max(_1065, 0.0));
        float _1066 = isnan(1.0) ? _3447 : (isnan(_3447) ? 1.0 : min(_3447, 1.0));
        float _1075 = ((((1.0 - _1066) * (_1061 + 2.0)) * exp2(log2(isnan(1.0) ? _3425 : (isnan(_3425) ? 1.0 : min(_3425, 1.0))) * (_1061 + 1.0))) + _1066) * _988;
        float _1076 = _956 * 0.5;
        float _1077 = _966 * 0.5;
        float _1078 = _976 * 0.5;
        float _1079 = dot(vec3(_1076, _1077, _1078), vec3(_1076, _1077, _1078));
        float _1084 = (_1079 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1079);
        float _1092 = (dot(vec3(_655, _656, _657), vec3(_1084 * _1076, _1084 * _1077, _1084 * _1078)) + 1.0) * 0.5;
        float _3458 = isnan(0.0) ? _1092 : (isnan(_1092) ? 0.0 : max(_1092, 0.0));
        float _1101 = sqrt(((_1077 * _1077) + (_1076 * _1076)) + (_1078 * _1078)) / (_989 + 9.9999997473787516355514526367188e-06);
        float _3469 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1102 = isnan(1.0) ? _3469 : (isnan(_3469) ? 1.0 : min(_3469, 1.0));
        float _1103 = _1102 * 2.0;
        float _1107 = (1.0 - _1102) / (_1102 + 1.0);
        float _3480 = isnan(0.0) ? _1107 : (isnan(_1107) ? 0.0 : max(_1107, 0.0));
        float _1108 = isnan(1.0) ? _3480 : (isnan(_3480) ? 1.0 : min(_3480, 1.0));
        float _1117 = ((((1.0 - _1108) * (_1103 + 2.0)) * exp2(log2(isnan(1.0) ? _3458 : (isnan(_3458) ? 1.0 : min(_3458, 1.0))) * (_1103 + 1.0))) + _1108) * _989;
        _1125 = _956;
        _1127 = _955;
        _1128 = _954;
        _1129 = _966;
        _1130 = _965;
        _1131 = _964;
        _1132 = _976;
        _1133 = _975;
        _1134 = _974;
        _1135 = _989;
        _1136 = _988;
        _1137 = _987;
        _1138 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1033 : (isnan(_1033) ? 0.0 : max(_1033, 0.0)));
        _1139 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1075 : (isnan(_1075) ? 0.0 : max(_1075, 0.0)));
        _1140 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0)));
    }
    else
    {
        _1125 = _1126;
        _1127 = _1126;
        _1128 = _1126;
        _1129 = _1126;
        _1130 = _1126;
        _1131 = _1126;
        _1132 = _1126;
        _1133 = _1126;
        _1134 = _1126;
        _1135 = _1126;
        _1136 = _1126;
        _1137 = _1126;
        _1138 = 0.0;
        _1139 = 0.0;
        _1140 = 0.0;
    }
    float _1435;
    float _1436;
    float _1437;
    float _1438;
    float _1439;
    float _1440;
    float _1441;
    float _1442;
    float _1443;
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1166 = fma(_824, cbModelParam._m0[30u].z, fma(_820, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _816));
        float _1170 = fma(_824, cbModelParam._m0[31u].z, fma(_820, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _816));
        float _1174 = fma(_824, cbModelParam._m0[32u].z, fma(_820, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _816));
        float _1197 = _816 + _655;
        float _1198 = _820 + _656;
        float _1199 = _824 + _657;
        float _1209 = fma(_1199, cbModelParam._m0[30u].z, fma(_1198, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1197)) - _1166;
        float _1210 = fma(_1199, cbModelParam._m0[31u].z, fma(_1198, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1197)) - _1170;
        float _1211 = fma(_1199, cbModelParam._m0[32u].z, fma(_1198, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1197)) - _1174;
        float _1215 = inversesqrt(dot(vec3(_1209, _1210, _1211), vec3(_1209, _1210, _1211)));
        float _1228 = ((_1215 * _1209) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1166 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1229 = ((_1215 * _1210) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1170 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1230 = ((_1215 * _1211) / cbModelParam._m0[35u].z) + ((((((_1174 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1232 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        vec4 _1239 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        vec4 _1246 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        vec4 _1253 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1228, _1229, _1230), 0.0);
        float _1265 = exp2((_1232.w + (-0.5)) * 20.0) * 2.0;
        float _1266 = _1265 * (_1232.x + (-0.5));
        float _1267 = _1265 * (_1232.y + (-0.5));
        float _1268 = _1265 * (_1232.z + (-0.5));
        float _1275 = exp2((_1239.w + (-0.5)) * 20.0) * 2.0;
        float _1276 = _1275 * (_1239.x + (-0.5));
        float _1277 = _1275 * (_1239.y + (-0.5));
        float _1278 = _1275 * (_1239.z + (-0.5));
        float _1285 = exp2((_1246.w + (-0.5)) * 20.0) * 2.0;
        float _1286 = _1285 * (_1246.x + (-0.5));
        float _1287 = _1285 * (_1246.y + (-0.5));
        float _1288 = _1285 * (_1246.z + (-0.5));
        float _1295 = exp2((_1253.w + (-0.5)) * 20.0) * 2.0;
        float _1296 = _1295 * (_1253.x + (-0.5));
        float _1297 = _1295 * (_1253.y + (-0.5));
        float _1298 = _1295 * (_1253.z + (-0.5));
        float _1299 = isnan(0.0) ? _1296 : (isnan(_1296) ? 0.0 : max(_1296, 0.0));
        float _1300 = isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0));
        float _1301 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1302 = _1266 * 0.5;
        float _1303 = _1276 * 0.5;
        float _1304 = _1286 * 0.5;
        float _1305 = dot(vec3(_1302, _1303, _1304), vec3(_1302, _1303, _1304));
        float _1310 = (_1305 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1305);
        float _1318 = (dot(vec3(_655, _656, _657), vec3(_1310 * _1302, _1310 * _1303, _1310 * _1304)) + 1.0) * 0.5;
        float _3521 = isnan(0.0) ? _1318 : (isnan(_1318) ? 0.0 : max(_1318, 0.0));
        float _1327 = sqrt(((_1303 * _1303) + (_1302 * _1302)) + (_1304 * _1304)) / (_1299 + 9.9999997473787516355514526367188e-06);
        float _3532 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1328 = isnan(1.0) ? _3532 : (isnan(_3532) ? 1.0 : min(_3532, 1.0));
        float _1329 = _1328 * 2.0;
        float _1333 = (1.0 - _1328) / (_1328 + 1.0);
        float _3543 = isnan(0.0) ? _1333 : (isnan(_1333) ? 0.0 : max(_1333, 0.0));
        float _1334 = isnan(1.0) ? _3543 : (isnan(_3543) ? 1.0 : min(_3543, 1.0));
        float _1343 = ((((1.0 - _1334) * (_1329 + 2.0)) * exp2(log2(isnan(1.0) ? _3521 : (isnan(_3521) ? 1.0 : min(_3521, 1.0))) * (_1329 + 1.0))) + _1334) * _1299;
        float _1344 = _1267 * 0.5;
        float _1345 = _1277 * 0.5;
        float _1346 = _1287 * 0.5;
        float _1347 = dot(vec3(_1344, _1345, _1346), vec3(_1344, _1345, _1346));
        float _1352 = (_1347 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1347);
        float _1360 = (dot(vec3(_655, _656, _657), vec3(_1352 * _1344, _1352 * _1345, _1352 * _1346)) + 1.0) * 0.5;
        float _3554 = isnan(0.0) ? _1360 : (isnan(_1360) ? 0.0 : max(_1360, 0.0));
        float _1369 = sqrt(((_1345 * _1345) + (_1344 * _1344)) + (_1346 * _1346)) / (_1300 + 9.9999997473787516355514526367188e-06);
        float _3565 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1370 = isnan(1.0) ? _3565 : (isnan(_3565) ? 1.0 : min(_3565, 1.0));
        float _1371 = _1370 * 2.0;
        float _1375 = (1.0 - _1370) / (_1370 + 1.0);
        float _3576 = isnan(0.0) ? _1375 : (isnan(_1375) ? 0.0 : max(_1375, 0.0));
        float _1376 = isnan(1.0) ? _3576 : (isnan(_3576) ? 1.0 : min(_3576, 1.0));
        float _1385 = ((((1.0 - _1376) * (_1371 + 2.0)) * exp2(log2(isnan(1.0) ? _3554 : (isnan(_3554) ? 1.0 : min(_3554, 1.0))) * (_1371 + 1.0))) + _1376) * _1300;
        float _1386 = _1268 * 0.5;
        float _1387 = _1278 * 0.5;
        float _1388 = _1288 * 0.5;
        float _1389 = dot(vec3(_1386, _1387, _1388), vec3(_1386, _1387, _1388));
        float _1394 = (_1389 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1389);
        float _1402 = (dot(vec3(_655, _656, _657), vec3(_1394 * _1386, _1394 * _1387, _1394 * _1388)) + 1.0) * 0.5;
        float _3587 = isnan(0.0) ? _1402 : (isnan(_1402) ? 0.0 : max(_1402, 0.0));
        float _1411 = sqrt(((_1387 * _1387) + (_1386 * _1386)) + (_1388 * _1388)) / (_1301 + 9.9999997473787516355514526367188e-06);
        float _3598 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1412 = isnan(1.0) ? _3598 : (isnan(_3598) ? 1.0 : min(_3598, 1.0));
        float _1413 = _1412 * 2.0;
        float _1417 = (1.0 - _1412) / (_1412 + 1.0);
        float _3609 = isnan(0.0) ? _1417 : (isnan(_1417) ? 0.0 : max(_1417, 0.0));
        float _1418 = isnan(1.0) ? _3609 : (isnan(_3609) ? 1.0 : min(_3609, 1.0));
        float _1427 = ((((1.0 - _1418) * (_1413 + 2.0)) * exp2(log2(isnan(1.0) ? _3587 : (isnan(_3587) ? 1.0 : min(_3587, 1.0))) * (_1413 + 1.0))) + _1418) * _1301;
        _1435 = _1268;
        _1436 = _1267;
        _1437 = _1266;
        _1438 = _1278;
        _1439 = _1277;
        _1440 = _1276;
        _1441 = _1288;
        _1442 = _1287;
        _1443 = _1286;
        _1444 = _1301;
        _1445 = _1300;
        _1446 = _1299;
        _1447 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1343 : (isnan(_1343) ? 0.0 : max(_1343, 0.0)));
        _1448 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1385 : (isnan(_1385) ? 0.0 : max(_1385, 0.0)));
        _1449 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0)));
    }
    else
    {
        _1435 = _1126;
        _1436 = _1126;
        _1437 = _1126;
        _1438 = _1126;
        _1439 = _1126;
        _1440 = _1126;
        _1441 = _1126;
        _1442 = _1126;
        _1443 = _1126;
        _1444 = _1126;
        _1445 = _1126;
        _1446 = _1126;
        _1447 = 0.0;
        _1448 = 0.0;
        _1449 = 0.0;
    }
    float _1459 = (cbModelParam._m0[1u].x * (_1447 - _1138)) + _1138;
    float _1460 = (cbModelParam._m0[1u].x * (_1448 - _1139)) + _1139;
    float _1461 = (cbModelParam._m0[1u].x * (_1449 - _1140)) + _1140;
    float _1482 = fma(_1461, cbSceneParam._m0[89u].z, fma(_1460, cbSceneParam._m0[89u].y, _1459 * cbSceneParam._m0[89u].x));
    float _1485 = fma(_1461, cbSceneParam._m0[90u].z, fma(_1460, cbSceneParam._m0[90u].y, _1459 * cbSceneParam._m0[90u].x));
    float _1488 = fma(_1461, cbSceneParam._m0[91u].z, fma(_1460, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1459));
    float _1503 = _763 * 0.5;
    float _1504 = _764 * 0.5;
    float _1505 = _765 * 0.5;
    float _1506 = dot(vec4(_1503, _1504, _1505, 1.0), vec4(_1437, _1440, _1443, _1446));
    float _1509 = dot(vec4(_1503, _1504, _1505, 1.0), vec4(_1436, _1439, _1442, _1445));
    float _1512 = dot(vec4(_1503, _1504, _1505, 1.0), vec4(_1435, _1438, _1441, _1444));
    float _1546;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1519 = dot(vec4(_1503, _1504, _1505, 1.0), vec4(_1125, _1129, _1132, _1135));
        float _1523 = dot(vec4(_1503, _1504, _1505, 1.0), vec4(_1127, _1130, _1133, _1136));
        float _1527 = dot(vec4(_1503, _1504, _1505, 1.0), vec4(_1128, _1131, _1134, _1137));
        float _1534 = dot(vec4(cbModelParam._m0[39u]), vec4(_1503, _1504, _1505, 1.0));
        _1546 = dot(vec3(isnan(0.0) ? _1527 : (isnan(_1527) ? 0.0 : max(_1527, 0.0)), isnan(0.0) ? _1523 : (isnan(_1523) ? 0.0 : max(_1523, 0.0)), isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1534) ? 0.0 : (isnan(0.0) ? _1534 : max(0.0, _1534))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1546 = 1.0;
    }
    float _1557;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1548 = dot(vec4(cbModelParam._m0[40u]), vec4(_1503, _1504, _1505, 1.0));
        _1557 = dot(vec3(isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0)), isnan(0.0) ? _1509 : (isnan(_1509) ? 0.0 : max(_1509, 0.0)), isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1548) ? 0.0 : (isnan(0.0) ? _1548 : max(0.0, _1548))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1557 = 1.0;
    }
    float _1561 = (_1557 * cbModelParam._m0[1u].x) + (_1546 * (1.0 - cbModelParam._m0[1u].x));
    float _1571 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _658);
    float _1572 = isnan(_1571) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1571 : min(cbModelParam._m0[25u].z, _1571));
    float _1654;
    float _1656;
    float _1658;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1621 = fma(_824, cbModelParam._m0[13u].z, fma(_820, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _816)) + cbModelParam._m0[13u].w;
        float _1625 = fma(_824, cbModelParam._m0[14u].z, fma(_820, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _816)) + cbModelParam._m0[14u].w;
        float _1629 = fma(_824, cbModelParam._m0[15u].z, fma(_820, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _816)) + cbModelParam._m0[15u].w;
        float _1632 = fma(_765, cbModelParam._m0[13u].z, fma(_764, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _763));
        float _1635 = fma(_765, cbModelParam._m0[14u].z, fma(_764, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _763));
        float _1638 = fma(_765, cbModelParam._m0[15u].z, fma(_764, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _763));
        float _1666;
        if (_1632 > 0.0)
        {
            _1666 = abs((1.0 - _1621) / _1632);
        }
        else
        {
            float frontier_phi_38_36_ladder;
            if (_1632 < 0.0)
            {
                frontier_phi_38_36_ladder = abs((_1621 + 1.0) / _1632);
            }
            else
            {
                frontier_phi_38_36_ladder = 5000.0;
            }
            _1666 = frontier_phi_38_36_ladder;
        }
        float _2035;
        if (_1635 > 0.0)
        {
            _2035 = abs((1.0 - _1625) / _1635);
        }
        else
        {
            float frontier_phi_47_43_ladder;
            if (_1635 < 0.0)
            {
                frontier_phi_47_43_ladder = abs((_1625 + 1.0) / _1635);
            }
            else
            {
                frontier_phi_47_43_ladder = 5000.0;
            }
            _2035 = frontier_phi_47_43_ladder;
        }
        float _2351;
        if (_1638 > 0.0)
        {
            _2351 = abs((1.0 - _1629) / _1638);
        }
        else
        {
            float frontier_phi_61_54_ladder;
            if (_1638 < 0.0)
            {
                frontier_phi_61_54_ladder = abs((_1629 + 1.0) / _1638);
            }
            else
            {
                frontier_phi_61_54_ladder = 5000.0;
            }
            _2351 = frontier_phi_61_54_ladder;
        }
        float _2353 = isnan(_2035) ? _1666 : (isnan(_1666) ? _2035 : min(_1666, _2035));
        float _2354 = isnan(_2351) ? _2353 : (isnan(_2353) ? _2351 : min(_2353, _2351));
        float _2358 = (_2354 * _1632) + _1621;
        float _2359 = (_2354 * _1635) + _1625;
        float _2360 = (_2354 * _1638) + _1629;
        float _2361 = _2354 * 9.9999997473787516355514526367188e-05;
        float _2362 = (-1.0) - _2361;
        float _2364 = _2361 + 1.0;
        float frontier_phi_37_61_ladder;
        float frontier_phi_37_61_ladder_1;
        float frontier_phi_37_61_ladder_2;
        if ((_2360 > _2364) || ((_2360 < _2362) || ((_2359 > _2364) || ((_2359 < _2362) || ((_2358 < _2362) || (_2358 > _2364))))))
        {
            frontier_phi_37_61_ladder = 0.0;
            frontier_phi_37_61_ladder_1 = 0.0;
            frontier_phi_37_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2486 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2360, cbModelParam._m0[9u].z, fma(_2359, cbModelParam._m0[9u].y, _2358 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2360, cbModelParam._m0[10u].z, fma(_2359, cbModelParam._m0[10u].y, _2358 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2360, cbModelParam._m0[11u].z, fma(_2359, cbModelParam._m0[11u].y, _2358 * cbModelParam._m0[11u].x))), _1572);
            frontier_phi_37_61_ladder = _2486.z * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_1 = _2486.y * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_2 = _2486.x * cbModelParam._m0[1u].y;
        }
        _1654 = frontier_phi_37_61_ladder_2;
        _1656 = frontier_phi_37_61_ladder_1;
        _1658 = frontier_phi_37_61_ladder;
    }
    else
    {
        vec4 _1642 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_763, _764, _765), _1572);
        _1654 = _1642.x * cbModelParam._m0[1u].y;
        _1656 = _1642.y * cbModelParam._m0[1u].y;
        _1658 = _1642.z * cbModelParam._m0[1u].y;
    }
    float _1662 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _658);
    float _1663 = isnan(_1662) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1662 : min(cbModelParam._m0[25u].w, _1662));
    float _1751;
    float _1753;
    float _1755;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1715 = fma(_824, cbModelParam._m0[21u].z, fma(_820, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _816)) + cbModelParam._m0[21u].w;
        float _1719 = fma(_824, cbModelParam._m0[22u].z, fma(_820, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _816)) + cbModelParam._m0[22u].w;
        float _1723 = fma(_824, cbModelParam._m0[23u].z, fma(_820, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _816)) + cbModelParam._m0[23u].w;
        float _1726 = fma(_765, cbModelParam._m0[21u].z, fma(_764, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _763));
        float _1729 = fma(_765, cbModelParam._m0[22u].z, fma(_764, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _763));
        float _1732 = fma(_765, cbModelParam._m0[23u].z, fma(_764, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _763));
        float _2040;
        if (_1726 > 0.0)
        {
            _2040 = abs((1.0 - _1715) / _1726);
        }
        else
        {
            float frontier_phi_49_45_ladder;
            if (_1726 < 0.0)
            {
                frontier_phi_49_45_ladder = abs((_1715 + 1.0) / _1726);
            }
            else
            {
                frontier_phi_49_45_ladder = 5000.0;
            }
            _2040 = frontier_phi_49_45_ladder;
        }
        float _2377;
        if (_1729 > 0.0)
        {
            _2377 = abs((1.0 - _1719) / _1729);
        }
        else
        {
            float frontier_phi_63_56_ladder;
            if (_1729 < 0.0)
            {
                frontier_phi_63_56_ladder = abs((_1719 + 1.0) / _1729);
            }
            else
            {
                frontier_phi_63_56_ladder = 5000.0;
            }
            _2377 = frontier_phi_63_56_ladder;
        }
        float _2546;
        if (_1732 > 0.0)
        {
            _2546 = abs((1.0 - _1723) / _1732);
        }
        else
        {
            float frontier_phi_77_72_ladder;
            if (_1732 < 0.0)
            {
                frontier_phi_77_72_ladder = abs((_1723 + 1.0) / _1732);
            }
            else
            {
                frontier_phi_77_72_ladder = 5000.0;
            }
            _2546 = frontier_phi_77_72_ladder;
        }
        float _2548 = isnan(_2377) ? _2040 : (isnan(_2040) ? _2377 : min(_2040, _2377));
        float _2549 = isnan(_2546) ? _2548 : (isnan(_2548) ? _2546 : min(_2548, _2546));
        float _2553 = (_2549 * _1726) + _1715;
        float _2554 = (_2549 * _1729) + _1719;
        float _2555 = (_2549 * _1732) + _1723;
        float _2556 = _2549 * 9.9999997473787516355514526367188e-05;
        float _2557 = (-1.0) - _2556;
        float _2559 = _2556 + 1.0;
        float frontier_phi_46_77_ladder;
        float frontier_phi_46_77_ladder_1;
        float frontier_phi_46_77_ladder_2;
        if ((_2555 > _2559) || ((_2555 < _2557) || ((_2554 > _2559) || ((_2554 < _2557) || ((_2553 < _2557) || (_2553 > _2559))))))
        {
            frontier_phi_46_77_ladder = 0.0;
            frontier_phi_46_77_ladder_1 = 0.0;
            frontier_phi_46_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2788 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2555, cbModelParam._m0[17u].z, fma(_2554, cbModelParam._m0[17u].y, _2553 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2555, cbModelParam._m0[18u].z, fma(_2554, cbModelParam._m0[18u].y, _2553 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2555, cbModelParam._m0[19u].z, fma(_2554, cbModelParam._m0[19u].y, _2553 * cbModelParam._m0[19u].x))), _1663);
            frontier_phi_46_77_ladder = _2788.z * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_1 = _2788.y * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_2 = _2788.x * cbModelParam._m0[1u].z;
        }
        _1751 = frontier_phi_46_77_ladder_2;
        _1753 = frontier_phi_46_77_ladder_1;
        _1755 = frontier_phi_46_77_ladder;
    }
    else
    {
        vec4 _1735 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_763, _764, _765), _1663);
        _1751 = _1735.x * cbModelParam._m0[1u].z;
        _1753 = _1735.y * cbModelParam._m0[1u].z;
        _1755 = _1735.z * cbModelParam._m0[1u].z;
    }
    float _1767 = ((((1.0 - _784) * ((_771 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_784 * _771)) * _755;
    float _1768 = _1767 * ((cbModelParam._m0[1u].w * (_1751 - _1654)) + _1654);
    float _1769 = _1767 * ((cbModelParam._m0[1u].w * (_1753 - _1656)) + _1656);
    float _1770 = _1767 * ((cbModelParam._m0[1u].w * (_1755 - _1658)) + _1658);
    float _1773 = fma(_1770, cbSceneParam._m0[89u].z, fma(_1769, cbSceneParam._m0[89u].y, _1768 * cbSceneParam._m0[89u].x));
    float _1776 = fma(_1770, cbSceneParam._m0[90u].z, fma(_1769, cbSceneParam._m0[90u].y, _1768 * cbSceneParam._m0[90u].x));
    float _1779 = fma(_1770, cbSceneParam._m0[91u].z, fma(_1769, cbSceneParam._m0[91u].y, _1768 * cbSceneParam._m0[91u].x));
    vec4 _1787 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_690, _691));
    float _1789 = _1787.w;
    float _1801 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1789);
    float _1802 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1789);
    float _1803 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1789);
    uvec4 _1807 = floatBitsToUint(cbInstanceData._m0[_729 + 5u]);
    uint _1809 = _1807.x * 14u;
    uint _1810 = _1809 + 13u;
    float _1815 = _755 + (-1.0);
    float _1818 = (cbLight._m0[_1810].x * _1815) + 1.0;
    float _1819 = (cbLight._m0[_1810].y * _1815) + 1.0;
    uint _1820 = _1809 + 5u;
    float _1826 = isnan(1.0) ? _1819 : (isnan(_1819) ? 1.0 : min(_1819, 1.0));
    uint _1830 = _1809 + 4u;
    float _1839 = isnan(1.0) ? _1818 : (isnan(_1818) ? 1.0 : min(_1818, 1.0));
    uint _1843 = _1809 | 1u;
    float _1854 = dot(vec3(cbLight._m0[_1809].xyz), vec3(_655, _656, _657));
    float _1857 = dot(vec3(cbLight._m0[_1843].xyz), vec3(_655, _656, _657));
    float _3745 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
    float _3756 = isnan(0.0) ? _1857 : (isnan(_1857) ? 0.0 : max(_1857, 0.0));
    float _1862 = (isnan(1.0) ? _3745 : (isnan(_3745) ? 1.0 : min(_3745, 1.0))) * 0.3183098733425140380859375;
    float _1864 = (isnan(1.0) ? _3756 : (isnan(_3756) ? 1.0 : min(_3756, 1.0))) * 0.3183098733425140380859375;
    float _1871 = ((cbLight._m0[_1820].x * _1826) * _1864) + (((cbLight._m0[_1830].x * _1801) * _1839) * _1862);
    float _1872 = ((_1826 * cbLight._m0[_1820].y) * _1864) + (((cbLight._m0[_1830].y * _1802) * _1839) * _1862);
    float _1873 = ((_1826 * cbLight._m0[_1820].z) * _1864) + (((cbLight._m0[_1830].z * _1803) * _1839) * _1862);
    uint _1875 = _1809 + 8u;
    float _1888 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1809].w)) * _658) * 0.949999988079071044921875);
    float _1889 = _1888 * _1888;
    float _1890 = cbLight._m0[_1809].x + _682;
    float _1891 = cbLight._m0[_1809].y + _683;
    float _1892 = cbLight._m0[_1809].z + _684;
    float _1896 = inversesqrt(dot(vec3(_1890, _1891, _1892), vec3(_1890, _1891, _1892)));
    float _1897 = _1896 * _1890;
    float _1898 = _1896 * _1891;
    float _1899 = _1896 * _1892;
    float _1900 = dot(vec3(_655, _656, _657), vec3(cbLight._m0[_1809].xyz));
    float _3767 = isnan(0.0) ? _1900 : (isnan(_1900) ? 0.0 : max(_1900, 0.0));
    float _1903 = isnan(1.0) ? _3767 : (isnan(_3767) ? 1.0 : min(_3767, 1.0));
    float _3778 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _1904 = isnan(1.0) ? _3778 : (isnan(_3778) ? 1.0 : min(_3778, 1.0));
    float _1905 = dot(vec3(_655, _656, _657), vec3(_1897, _1898, _1899));
    float _3789 = isnan(0.0) ? _1905 : (isnan(_1905) ? 0.0 : max(_1905, 0.0));
    float _1908 = isnan(1.0) ? _3789 : (isnan(_3789) ? 1.0 : min(_3789, 1.0));
    float _1909 = dot(vec3(cbLight._m0[_1809].xyz), vec3(_1897, _1898, _1899));
    float _3800 = isnan(0.0) ? _1909 : (isnan(_1909) ? 0.0 : max(_1909, 0.0));
    float _1913 = _1889 * _1889;
    float _1917 = ((_1908 * _1908) * (_1913 + (-1.0))) + 1.0;
    float _1928 = (exp2(log2(1.0 - (isnan(1.0) ? _3800 : (isnan(_3800) ? 1.0 : min(_3800, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1929 = 1.0 - _1889;
    float _1940 = (0.5 / (((_1904 * ((_1903 * _1929) + _1889)) + 9.9999999392252902907785028219223e-09) + (((_1904 * _1929) + _1889) * _1903))) * _1903;
    float _3811 = isnan(0.0) ? _1940 : (isnan(_1940) ? 0.0 : max(_1940, 0.0));
    float _1942 = (isnan(1.0) ? _3811 : (isnan(_3811) ? 1.0 : min(_3811, 1.0))) * (_1913 / ((_1917 * _1917) * 3.141590118408203125));
    uint _1956 = _1809 + 9u;
    float _1967 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1843].w)) * _658) * 0.949999988079071044921875);
    float _1968 = _1967 * _1967;
    float _1969 = cbLight._m0[_1843].x + _682;
    float _1970 = cbLight._m0[_1843].y + _683;
    float _1971 = cbLight._m0[_1843].z + _684;
    float _1975 = inversesqrt(dot(vec3(_1969, _1970, _1971), vec3(_1969, _1970, _1971)));
    float _1976 = _1975 * _1969;
    float _1977 = _1975 * _1970;
    float _1978 = _1975 * _1971;
    float _1979 = dot(vec3(_655, _656, _657), vec3(cbLight._m0[_1843].xyz));
    float _3822 = isnan(0.0) ? _1979 : (isnan(_1979) ? 0.0 : max(_1979, 0.0));
    float _1982 = isnan(1.0) ? _3822 : (isnan(_3822) ? 1.0 : min(_3822, 1.0));
    float _1983 = dot(vec3(_655, _656, _657), vec3(_1976, _1977, _1978));
    float _3833 = isnan(0.0) ? _1983 : (isnan(_1983) ? 0.0 : max(_1983, 0.0));
    float _1986 = isnan(1.0) ? _3833 : (isnan(_3833) ? 1.0 : min(_3833, 1.0));
    float _1987 = dot(vec3(cbLight._m0[_1843].xyz), vec3(_1976, _1977, _1978));
    float _3844 = isnan(0.0) ? _1987 : (isnan(_1987) ? 0.0 : max(_1987, 0.0));
    float _1991 = _1968 * _1968;
    float _1995 = ((_1986 * _1986) * (_1991 + (-1.0))) + 1.0;
    float _2004 = (exp2(log2(1.0 - (isnan(1.0) ? _3844 : (isnan(_3844) ? 1.0 : min(_3844, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2005 = 1.0 - _1968;
    float _2015 = (0.5 / (((_1904 * ((_1982 * _2005) + _1968)) + 9.9999999392252902907785028219223e-09) + (((_1904 * _2005) + _1968) * _1982))) * _1982;
    float _3855 = isnan(0.0) ? _2015 : (isnan(_2015) ? 0.0 : max(_2015, 0.0));
    float _2017 = (isnan(1.0) ? _3855 : (isnan(_3855) ? 1.0 : min(_3855, 1.0))) * (_1991 / ((_1995 * _1995) * 3.141590118408203125));
    float _2027 = (((_2004 * cbLight._m0[_1956].x) * _2017) * _1826) + ((((cbLight._m0[_1875].x * _1801) * _1928) * _1942) * _1839);
    float _2028 = (((_2004 * cbLight._m0[_1956].y) * _2017) * _1826) + ((((cbLight._m0[_1875].y * _1802) * _1928) * _1942) * _1839);
    float _2029 = (((_2004 * cbLight._m0[_1956].z) * _2017) * _1826) + ((((cbLight._m0[_1875].z * _1803) * _1928) * _1942) * _1839);
    float _2144;
    float _2146;
    float _2148;
    float _2150;
    float _2152;
    float _2154;
    if (_1807.y == 0u)
    {
        float _2084 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2085 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2084;
        float _2086 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2084;
        float _2087 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2084;
        uvec4 _2099 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2100 = _2099.x;
        uint _2111 = uint((float(_2099.y) * floor(float(uint(cbSceneParam._m0[85u].y * _691) / _2100))) + floor(float(uint(cbSceneParam._m0[85u].x * _690) / _2100)));
        float _2121 = (log2(_2087 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2122 = isnan(0.0) ? _2121 : (isnan(_2121) ? 0.0 : max(_2121, 0.0));
        uint _2125 = uint(isnan(14.0) ? _2122 : (isnan(_2122) ? 14.0 : min(_2122, 14.0)));
        uvec4 _2130 = texelFetch(g_lightClusterGridBuffer, int(((_2125 << 2u) + (_2111 << 6u)) >> 2u));
        uint _2131 = _2130.x;
        uint _2132 = _2099.z;
        float _2238;
        float _2240;
        float _2242;
        float _2244;
        float _2246;
        float _2248;
        if (((((1u << ((_2132 >> 4u) & 15u)) + 4294967295u) & _2131) == 0u) || ((_2132 & 240u) == 0u))
        {
            _2238 = 0.0;
            _2240 = 0.0;
            _2242 = 0.0;
            _2244 = 0.0;
            _2246 = 0.0;
            _2248 = 0.0;
        }
        else
        {
            float _2239;
            float _2241;
            float _2243;
            float _2245;
            float _2247;
            float _2249;
            float _2414 = 0.0;
            float _2415 = 0.0;
            float _2416 = 0.0;
            float _2417 = 0.0;
            float _2418 = 0.0;
            float _2419 = 0.0;
            uint _2420 = 0u;
            uint _2429;
            bool _2430;
            for (;;)
            {
                _2429 = texelFetch(g_lightClassification, int((((_2125 << 5u) + (_2111 << 9u)) + (_2420 << 2u)) >> 2u)).x;
                _2430 = _2429 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2430)
                {
                    frontier_phi_74_pred = _2417;
                    frontier_phi_74_pred_1 = _2416;
                    frontier_phi_74_pred_2 = _2415;
                    frontier_phi_74_pred_3 = _2414;
                    frontier_phi_74_pred_4 = _2418;
                    frontier_phi_74_pred_5 = _2419;
                }
                else
                {
                    float _2589;
                    float _2590;
                    float _2591;
                    float _2592;
                    float _2593;
                    float _2594;
                    uint _2595;
                    _2589 = _2414;
                    _2590 = _2415;
                    _2591 = _2416;
                    _2592 = _2417;
                    _2593 = _2418;
                    _2594 = _2419;
                    _2595 = _2429;
                    float _2495;
                    float _2496;
                    float _2497;
                    float _2498;
                    float _2499;
                    float _2500;
                    for (;;)
                    {
                        uint _2599 = uint(findLSB(_2595)) + (_2420 << 5u);
                        uint _2596 = (_2595 + 4294967295u) & _2595;
                        uint _2601 = _2599 * 48u;
                        vec4 _2615 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2601)).x, texelFetch(g_PointLightRenderingBuffer, int(_2601 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2601 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2601 + 3u)).x));
                        uint _2621 = (_2599 * 48u) + 4u;
                        vec4 _2634 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2621)).x, texelFetch(g_PointLightRenderingBuffer, int(_2621 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2621 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2621 + 3u)).x));
                        uint _2640 = (_2599 * 48u) + 8u;
                        vec3 _2651 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2640)).x, texelFetch(g_PointLightRenderingBuffer, int(_2640 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2640 + 2u)).x));
                        float _2655 = _2615.x - _2085;
                        float _2656 = _2615.y - _2086;
                        float _2657 = _2615.z - _2087;
                        float _2658 = dot(vec3(_2655, _2656, _2657), vec3(_2655, _2656, _2657));
                        float _2661 = inversesqrt(_2658);
                        float _2662 = _2661 * _2655;
                        float _2663 = _2661 * _2656;
                        float _2664 = _2661 * _2657;
                        float _2665 = dot(vec3(_710, _713, _716), vec3(_2662, _2663, _2664));
                        float _2670 = 1.0 - (_2658 * _2615.w);
                        float _3876 = isnan(0.0) ? _2670 : (isnan(_2670) ? 0.0 : max(_2670, 0.0));
                        float _2671 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
                        float _2672 = sqrt(_2658) * _2634.w;
                        float _2675 = 1.39999997615814208984375 / (_2672 + 1.39999997615814208984375);
                        float _2676 = _2675 * _2675;
                        float _2679 = ((1.0 - _2676) * _2665) + _2676;
                        float _2682 = _2672 * _2672;
                        float _2686 = ((isnan(0.0) ? _2679 : (isnan(_2679) ? 0.0 : max(_2679, 0.0))) * _2671) / ((_2682 * 0.699999988079071044921875) + 1.0);
                        float _2690 = (-0.0) - _2085;
                        float _2691 = (-0.0) - _2086;
                        float _2692 = (-0.0) - _2087;
                        float _2696 = inversesqrt(dot(vec3(_2690, _2691, _2692), vec3(_2690, _2691, _2692)));
                        float _2697 = _2696 * _2690;
                        float _2698 = _2696 * _2691;
                        float _2699 = _2696 * _2692;
                        float _2707 = exp2(log2(1.0 / ((_2682 * 3.5) + 5.0)) * 0.25);
                        float _2708 = 1.0 - _771;
                        float _2715 = sqrt(1.0 - ((1.0 - (_2708 * _2708)) * (1.0 - (_2707 * _2707))));
                        float _2716 = _2715 * _2715;
                        float _2717 = _2716 * _2716;
                        float _2718 = _2697 + _2662;
                        float _2719 = _2698 + _2663;
                        float _2720 = _2699 + _2664;
                        float _2724 = inversesqrt(dot(vec3(_2718, _2719, _2720), vec3(_2718, _2719, _2720)));
                        float _2728 = dot(vec3(_710, _713, _716), vec3(_2697, _2698, _2699));
                        float _3892 = isnan(0.0) ? _2728 : (isnan(_2728) ? 0.0 : max(_2728, 0.0));
                        float _2731 = isnan(1.0) ? _3892 : (isnan(_3892) ? 1.0 : min(_3892, 1.0));
                        float _2732 = dot(vec3(_710, _713, _716), vec3(_2724 * _2718, _2724 * _2719, _2724 * _2720));
                        float _3903 = isnan(0.0) ? _2732 : (isnan(_2732) ? 0.0 : max(_2732, 0.0));
                        float _2735 = isnan(1.0) ? _3903 : (isnan(_3903) ? 1.0 : min(_3903, 1.0));
                        float _2739 = ((_2735 * _2735) * (_2717 + (-1.0))) + 1.0;
                        float _2740 = _2675 * _2716;
                        float _2741 = _2740 * _2740;
                        float _2744 = ((1.0 - _2741) * _2665) + _2741;
                        float _3914 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0));
                        float _2745 = isnan(1.0) ? _3914 : (isnan(_3914) ? 1.0 : min(_3914, 1.0));
                        float _2746 = 1.0 - _2716;
                        float _2756 = (0.5 / (((_2745 * ((_2731 * _2746) + _2716)) + 9.9999999392252902907785028219223e-09) + (((_2745 * _2746) + _2716) * _2731))) * _2745;
                        float _3925 = isnan(0.0) ? _2756 : (isnan(_2756) ? 0.0 : max(_2756, 0.0));
                        float _2767 = (((_2717 * 3.1415927410125732421875) * (isnan(1.0) ? _3925 : (isnan(_3925) ? 1.0 : min(_3925, 1.0)))) / ((_2739 * _2739) * ((_2682 * 2.1991131305694580078125) + 3.141590118408203125))) * _2671;
                        _2498 = (_2686 * _2634.x) + _2592;
                        _2499 = (_2686 * _2634.y) + _2593;
                        _2500 = (_2686 * _2634.z) + _2594;
                        _2495 = (_2767 * _2651.x) + _2589;
                        _2496 = (_2767 * _2651.y) + _2590;
                        _2497 = (_2767 * _2651.z) + _2591;
                        if (_2596 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2589 = _2495;
                            _2590 = _2496;
                            _2591 = _2497;
                            _2592 = _2498;
                            _2593 = _2499;
                            _2594 = _2500;
                            _2595 = _2596;
                        }
                    }
                    frontier_phi_74_pred = _2498;
                    frontier_phi_74_pred_1 = _2497;
                    frontier_phi_74_pred_2 = _2496;
                    frontier_phi_74_pred_3 = _2495;
                    frontier_phi_74_pred_4 = _2499;
                    frontier_phi_74_pred_5 = _2500;
                }
                _2245 = frontier_phi_74_pred;
                _2243 = frontier_phi_74_pred_1;
                _2241 = frontier_phi_74_pred_2;
                _2239 = frontier_phi_74_pred_3;
                _2247 = frontier_phi_74_pred_4;
                _2249 = frontier_phi_74_pred_5;
                uint _2421 = _2420 + 1u;
                if (_2421 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2414 = _2239;
                    _2415 = _2241;
                    _2416 = _2243;
                    _2417 = _2245;
                    _2418 = _2247;
                    _2419 = _2249;
                    _2420 = _2421;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2238 = _2239;
            _2240 = _2241;
            _2242 = _2243;
            _2244 = _2245;
            _2246 = _2247;
            _2248 = _2249;
        }
        uvec4 _2252 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2253 = _2252.z;
        uint _2255 = (_2253 >> 8u) & 15u;
        float _2382;
        float _2384;
        float _2386;
        float _2388;
        float _2390;
        float _2392;
        if (((4294967295u << _2255) & _2131) == 0u)
        {
            _2382 = _2238;
            _2384 = _2240;
            _2386 = _2242;
            _2388 = _2244;
            _2390 = _2246;
            _2392 = _2248;
        }
        else
        {
            float _2407 = inversesqrt(dot(vec3(_2085, _2086, _2087), vec3(_2085, _2086, _2087)));
            float _2408 = _2407 * _2085;
            float _2409 = _2407 * _2086;
            float _2410 = _2407 * _2087;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2255 < ((_2253 >> 12u) & 15u))
            {
                float _2383;
                float _2385;
                float _2387;
                float _2389;
                float _2391;
                float _2393;
                float _2572 = _2238;
                float _2573 = _2240;
                float _2574 = _2242;
                float _2575 = _2244;
                float _2576 = _2246;
                float _2577 = _2248;
                uint _2578 = _2255;
                uint _2587;
                bool _2588;
                for (;;)
                {
                    _2587 = texelFetch(g_lightClassification, int((((_2125 << 5u) + (_2111 << 9u)) + (_2578 << 2u)) >> 2u)).x;
                    _2588 = _2587 == 0u;
                    float frontier_phi_83_pred;
                    float frontier_phi_83_pred_1;
                    float frontier_phi_83_pred_2;
                    float frontier_phi_83_pred_3;
                    float frontier_phi_83_pred_4;
                    float frontier_phi_83_pred_5;
                    if (_2588)
                    {
                        frontier_phi_83_pred = _2575;
                        frontier_phi_83_pred_1 = _2574;
                        frontier_phi_83_pred_2 = _2573;
                        frontier_phi_83_pred_3 = _2572;
                        frontier_phi_83_pred_4 = _2577;
                        frontier_phi_83_pred_5 = _2576;
                    }
                    else
                    {
                        float _2793;
                        float _2794;
                        float _2795;
                        float _2796;
                        float _2797;
                        float _2798;
                        float _3086;
                        float _3087;
                        float _3088;
                        float _3089;
                        float _3090;
                        float _3091;
                        float _2806 = _2572;
                        float _2807 = _2573;
                        float _2808 = _2574;
                        float _2809 = _2575;
                        float _2810 = _2576;
                        float _2811 = _2577;
                        uint _2812 = _2587;
                        uint _2813;
                        vec4 _2838;
                        float _2839;
                        vec4 _2854;
                        vec3 _2866;
                        vec4 _2881;
                        vec4 _2896;
                        float _2942;
                        bool _2943;
                        for (;;)
                        {
                            uint _2823 = ((_2578 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2812));
                            _2813 = (_2812 + 4294967295u) & _2812;
                            uint _2825 = _2823 * 40u;
                            _2838 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2825)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2825 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2825 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2825 + 3u)).x));
                            _2839 = _2838.w;
                            uint _2841 = (_2823 * 40u) + 4u;
                            _2854 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2841)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2841 + 3u)).x));
                            uint _2856 = (_2823 * 40u) + 8u;
                            _2866 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2856)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2856 + 2u)).x));
                            uint _2868 = (_2823 * 40u) + 16u;
                            _2881 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2868)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2868 + 3u)).x));
                            uint _2883 = (_2823 * 40u) + 20u;
                            _2896 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2883)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2883 + 3u)).x));
                            uint _2898 = (_2823 * 40u) + 24u;
                            vec4 _2911 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2898)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2898 + 3u)).x));
                            uint _2917 = (_2823 * 40u) + 28u;
                            vec4 _2930 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2917)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2917 + 3u)).x));
                            _2942 = fma(_2087, _2930.z, fma(_2086, _2930.y, _2930.x * _2085)) + _2930.w;
                            _2943 = !((fma(_2087, _2911.z, fma(_2086, _2911.y, _2911.x * _2085)) + _2911.w) <= 0.0);
                            float frontier_phi_89_pred;
                            float frontier_phi_89_pred_1;
                            float frontier_phi_89_pred_2;
                            float frontier_phi_89_pred_3;
                            float frontier_phi_89_pred_4;
                            float frontier_phi_89_pred_5;
                            if (_2943)
                            {
                                float _2970 = _2838.x - _2085;
                                float _2971 = _2838.y - _2086;
                                float _2972 = _2838.z - _2087;
                                float _2973 = dot(vec3(_2970, _2971, _2972), vec3(_2970, _2971, _2972));
                                float _2976 = inversesqrt(_2973);
                                float _2977 = _2976 * _2970;
                                float _2978 = _2976 * _2971;
                                float _2979 = _2976 * _2972;
                                float _2983 = 1.0 - (_2973 / (_2839 * _2839));
                                float _3936 = isnan(0.0) ? _2983 : (isnan(_2983) ? 0.0 : max(_2983, 0.0));
                                float _2984 = isnan(1.0) ? _3936 : (isnan(_3936) ? 1.0 : min(_3936, 1.0));
                                float _2988 = sqrt(_2973) * _2854.w;
                                float _2990 = 1.39999997615814208984375 / (_2988 + 1.39999997615814208984375);
                                float _2991 = _2990 * _2990;
                                float _2994 = ((1.0 - _2991) * dot(vec3(_2977, _2978, _2979), vec3(_710, _713, _716))) + _2991;
                                float _2997 = _2988 * _2988;
                                float _3001 = (fma(_2087, _2881.z, fma(_2086, _2881.y, _2881.x * _2085)) + _2881.w) / _2942;
                                float _3002 = (fma(_2087, _2896.z, fma(_2086, _2896.y, _2896.x * _2085)) + _2896.w) / _2942;
                                float _3006 = 1.0 - dot(vec2(_3001, _3002), vec2(_3001, _3002));
                                float _3952 = isnan(0.0) ? _3006 : (isnan(_3006) ? 0.0 : max(_3006, 0.0));
                                float _3007 = isnan(1.0) ? _3952 : (isnan(_3952) ? 1.0 : min(_3952, 1.0));
                                float _3008 = _3007 * (((isnan(0.0) ? _2994 : (isnan(_2994) ? 0.0 : max(_2994, 0.0))) * _2984) / ((_2997 * 0.699999988079071044921875) + 1.0));
                                float _3020 = exp2(log2(1.0 / ((_2997 * 3.5) + 5.0)) * 0.25);
                                float _3021 = 1.0 - _771;
                                float _3028 = sqrt(1.0 - ((1.0 - (_3021 * _3021)) * (1.0 - (_3020 * _3020))));
                                float _3029 = _3028 * _3028;
                                float _3030 = _3029 * _3029;
                                float _3031 = _2977 - _2408;
                                float _3032 = _2978 - _2409;
                                float _3033 = _2979 - _2410;
                                float _3037 = inversesqrt(dot(vec3(_3031, _3032, _3033), vec3(_3031, _3032, _3033)));
                                float _3041 = dot(vec3(_710, _713, _716), vec3((-0.0) - _2408, (-0.0) - _2409, (-0.0) - _2410));
                                float _3963 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
                                float _3044 = isnan(1.0) ? _3963 : (isnan(_3963) ? 1.0 : min(_3963, 1.0));
                                float _3045 = dot(vec3(_710, _713, _716), vec3(_3037 * _3031, _3037 * _3032, _3037 * _3033));
                                float _3974 = isnan(0.0) ? _3045 : (isnan(_3045) ? 0.0 : max(_3045, 0.0));
                                float _3048 = isnan(1.0) ? _3974 : (isnan(_3974) ? 1.0 : min(_3974, 1.0));
                                float _3052 = ((_3048 * _3048) * (_3030 + (-1.0))) + 1.0;
                                float _3053 = _2990 * _3029;
                                float _3054 = _3053 * _3053;
                                float _3060 = ((1.0 - _3054) * dot(vec3(_710, _713, _716), vec3(_2977, _2978, _2979))) + _3054;
                                float _3985 = isnan(0.0) ? _3060 : (isnan(_3060) ? 0.0 : max(_3060, 0.0));
                                float _3061 = isnan(1.0) ? _3985 : (isnan(_3985) ? 1.0 : min(_3985, 1.0));
                                float _3062 = 1.0 - _3029;
                                float _3072 = (0.5 / (((_3061 * ((_3044 * _3062) + _3029)) + 9.9999999392252902907785028219223e-09) + (((_3061 * _3062) + _3029) * _3044))) * _3061;
                                float _3996 = isnan(0.0) ? _3072 : (isnan(_3072) ? 0.0 : max(_3072, 0.0));
                                float _3082 = (_3007 * _2984) * (((_3030 * 3.1415927410125732421875) * (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0)))) / ((_3052 * _3052) * ((_2997 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_89_pred = _3008 * _2854.x;
                                frontier_phi_89_pred_1 = _3082 * _2866.z;
                                frontier_phi_89_pred_2 = _3082 * _2866.y;
                                frontier_phi_89_pred_3 = _3082 * _2866.x;
                                frontier_phi_89_pred_4 = _3008 * _2854.z;
                                frontier_phi_89_pred_5 = _3008 * _2854.y;
                            }
                            else
                            {
                                frontier_phi_89_pred = 0.0;
                                frontier_phi_89_pred_1 = 0.0;
                                frontier_phi_89_pred_2 = 0.0;
                                frontier_phi_89_pred_3 = 0.0;
                                frontier_phi_89_pred_4 = 0.0;
                                frontier_phi_89_pred_5 = 0.0;
                            }
                            _3089 = frontier_phi_89_pred;
                            _3088 = frontier_phi_89_pred_1;
                            _3087 = frontier_phi_89_pred_2;
                            _3086 = frontier_phi_89_pred_3;
                            _3091 = frontier_phi_89_pred_4;
                            _3090 = frontier_phi_89_pred_5;
                            _2796 = _3089 + _2809;
                            _2797 = _3090 + _2810;
                            _2798 = _3091 + _2811;
                            _2793 = _3086 + _2806;
                            _2794 = _3087 + _2807;
                            _2795 = _3088 + _2808;
                            if (_2813 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2806 = _2793;
                                _2807 = _2794;
                                _2808 = _2795;
                                _2809 = _2796;
                                _2810 = _2797;
                                _2811 = _2798;
                                _2812 = _2813;
                                continue;
                            }
                        }
                        frontier_phi_83_pred = _2796;
                        frontier_phi_83_pred_1 = _2795;
                        frontier_phi_83_pred_2 = _2794;
                        frontier_phi_83_pred_3 = _2793;
                        frontier_phi_83_pred_4 = _2798;
                        frontier_phi_83_pred_5 = _2797;
                    }
                    _2389 = frontier_phi_83_pred;
                    _2387 = frontier_phi_83_pred_1;
                    _2385 = frontier_phi_83_pred_2;
                    _2383 = frontier_phi_83_pred_3;
                    _2393 = frontier_phi_83_pred_4;
                    _2391 = frontier_phi_83_pred_5;
                    uint _2579 = _2578 + 1u;
                    if (_2579 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2572 = _2383;
                        _2573 = _2385;
                        _2574 = _2387;
                        _2575 = _2389;
                        _2576 = _2391;
                        _2577 = _2393;
                        _2578 = _2579;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2393;
                frontier_phi_65_66_ladder_1 = _2391;
                frontier_phi_65_66_ladder_2 = _2387;
                frontier_phi_65_66_ladder_3 = _2385;
                frontier_phi_65_66_ladder_4 = _2389;
                frontier_phi_65_66_ladder_5 = _2383;
            }
            else
            {
                frontier_phi_65_66_ladder = _2248;
                frontier_phi_65_66_ladder_1 = _2246;
                frontier_phi_65_66_ladder_2 = _2242;
                frontier_phi_65_66_ladder_3 = _2240;
                frontier_phi_65_66_ladder_4 = _2244;
                frontier_phi_65_66_ladder_5 = _2238;
            }
            _2382 = frontier_phi_65_66_ladder_5;
            _2384 = frontier_phi_65_66_ladder_3;
            _2386 = frontier_phi_65_66_ladder_2;
            _2388 = frontier_phi_65_66_ladder_4;
            _2390 = frontier_phi_65_66_ladder_1;
            _2392 = frontier_phi_65_66_ladder;
        }
        float _2397 = isnan(1.0) ? _755 : (isnan(_755) ? 1.0 : min(_755, 1.0));
        _2144 = (_2397 * _2388) + _1871;
        _2146 = (_2397 * _2390) + _1872;
        _2148 = (_2397 * _2392) + _1873;
        _2150 = ((_2382 * 0.039999999105930328369140625) * _2397) + _2027;
        _2152 = ((_2384 * 0.039999999105930328369140625) * _2397) + _2028;
        _2154 = ((_2386 * 0.039999999105930328369140625) * _2397) + _2029;
    }
    else
    {
        _2144 = _1871;
        _2146 = _1872;
        _2148 = _1873;
        _2150 = _2027;
        _2152 = _2028;
        _2154 = _2029;
    }
    uint _2160 = _731 + uint(cbMatDynParam._m0[0u].w);
    float _4012 = isnan(0.0) ? _741 : (isnan(_741) ? 0.0 : max(_741, 0.0));
    float _4023 = isnan(0.0) ? _742 : (isnan(_742) ? 0.0 : max(_742, 0.0));
    float _4034 = isnan(0.0) ? _743 : (isnan(_743) ? 0.0 : max(_743, 0.0));
    float _2185 = (((isnan(1.0) ? _4012 : (isnan(_4012) ? 1.0 : min(_4012, 1.0))) * (_2144 + ((isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0))) * _755))) + ((_2150 + ((isnan(0.0) ? _1773 : (isnan(_1773) ? 0.0 : max(_1773, 0.0))) * _1561)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2160].x * ((((((cbMtdParam._m0[10u].x * _285) * _549.x) - _478) * _285) * _602) + _478));
    float _2187 = ((cbInstanceData._m0[_2160].y * ((((((cbMtdParam._m0[10u].y * _285) * _549.y) - _479) * _285) * _602) + _479)) + ((_2152 + ((isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0))) * _1561)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4023 : (isnan(_4023) ? 1.0 : min(_4023, 1.0))) * (_2146 + ((isnan(0.0) ? _1485 : (isnan(_1485) ? 0.0 : max(_1485, 0.0))) * _755)));
    float _2189 = ((cbInstanceData._m0[_2160].z * ((((((cbMtdParam._m0[10u].z * _285) * _549.z) - _480) * _285) * _602) + _480)) + ((_2154 + ((isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0))) * _1561)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4034 : (isnan(_4034) ? 1.0 : min(_4034, 1.0))) * (_2148 + ((isnan(0.0) ? _1488 : (isnan(_1488) ? 0.0 : max(_1488, 0.0))) * _755)));
    uint _2193 = _729 + 6u;
    float _2201 = _690 / cbSceneParam._m0[86u].x;
    float _2202 = _691 / cbSceneParam._m0[86u].y;
    vec4 _2216 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2201, _2202, (log2((isnan(cbSceneParam._m0[77u].w) ? _677 : (isnan(_677) ? cbSceneParam._m0[77u].w : min(_677, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2218 = _2216.x;
    float _2219 = _2216.y;
    float _2220 = _2216.z;
    float _2221 = _2216.w;
    float _2301;
    float _2303;
    float _2305;
    float _2307;
    if (_677 > cbSceneParam._m0[78u].w)
    {
        float _2263 = isnan(_677) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _677 : min(cbSceneParam._m0[80u].w, _677));
        float _2264 = _2263 / _677;
        float _2275 = _2264 * _267;
        float _2276 = _268 * _2264;
        float _2277 = (-0.0) - _2276;
        float _2278 = _2264 * _269;
        float _2280 = (cbSceneParam._m0[77u].w * _2277) / _2263;
        float _2281 = _2280 + cbSceneParam._m0[79u].w;
        float _2282 = cbSceneParam._m0[79u].w - _2276;
        float _2288 = sqrt(((_2275 * _2275) + (_2276 * _2276)) + (_2278 * _2278));
        float _2291 = (1.0 - (cbSceneParam._m0[77u].w / _2263)) * _2288;
        float _2297 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2299 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2508;
        if (abs((_2277 - _2280) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2508 = ((((_2281 > 0.0) ? exp2(_2297 * _2281) : (2.0 - exp2(_2299 * _2281))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2291;
        }
        else
        {
            float _2443 = 1.0 / cbSceneParam._m0[80u].x;
            float _2444 = isnan(_2282) ? _2281 : (isnan(_2281) ? _2282 : max(_2281, _2282));
            float _2445 = isnan(_2282) ? _2281 : (isnan(_2281) ? _2282 : min(_2281, _2282));
            float _2454 = isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : min(_2444, 0.0));
            float _2455 = isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : min(_2445, 0.0));
            _2508 = ((abs(_2288 / _2277) * cbSceneParam._m0[80u].y) * ((((_2454 - _2455) * 2.0) - ((exp2(_2297 * (isnan(0.0) ? _2444 : (isnan(_2444) ? 0.0 : max(_2444, 0.0)))) - exp2(_2297 * (isnan(0.0) ? _2445 : (isnan(_2445) ? 0.0 : max(_2445, 0.0))))) * _2443)) - ((exp2(_2299 * _2454) - exp2(_2299 * _2455)) * _2443))) + (_2291 * cbSceneParam._m0[80u].z);
        }
        vec4 _2510 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2201, _2202, 1.0), 0.0);
        float _2519 = exp2((_2508 * (-1.44269502162933349609375)) * (1.0 - _2510.w));
        float _2520 = log2(_2519);
        float _2536 = log2(_2221);
        _2301 = (exp2(_2536 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2520 * cbSceneParam._m0[78u].x)) * _2510.x) / cbSceneParam._m0[78u].x)) + _2218;
        _2303 = (exp2(_2536 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2520 * cbSceneParam._m0[78u].y)) * _2510.y) / cbSceneParam._m0[78u].y)) + _2219;
        _2305 = (exp2(_2536 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2520 * cbSceneParam._m0[78u].z)) * _2510.z) / cbSceneParam._m0[78u].z)) + _2220;
        _2307 = _2519 * _2221;
    }
    else
    {
        _2301 = _2218;
        _2303 = _2219;
        _2305 = _2220;
        _2307 = _2221;
    }
    float _2319 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2320 = _2319 == 3.0;
    float _2321 = log2(_2307);
    float _2328 = exp2(_2321 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2185 : (isnan(_2185) ? 0.0 : max(_2185, 0.0)));
    float _2329 = exp2(_2321 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2187 : (isnan(_2187) ? 0.0 : max(_2187, 0.0)));
    float _2330 = exp2(_2321 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2189 : (isnan(_2189) ? 0.0 : max(_2189, 0.0)));
    float _2339 = (_2319 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2339 * (_2320 ? _2328 : (_2328 + (cbSceneParam._m0[72u].w * _2301)));
    SV_Target.y = _2339 * (_2320 ? _2329 : (_2329 + (cbSceneParam._m0[72u].w * _2303)));
    SV_Target.z = _2339 * (_2320 ? _2330 : (_2330 + (cbSceneParam._m0[72u].w * _2305)));
    SV_Target.w = cbInstanceData._m0[_2193].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2193].w;
}


