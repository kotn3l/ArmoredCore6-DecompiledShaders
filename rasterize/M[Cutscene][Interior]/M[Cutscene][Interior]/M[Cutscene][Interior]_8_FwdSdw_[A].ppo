#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 2) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_12;
layout(set = 0, binding = 3) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _400;
uint _2254;
uint _2255;
uint _2256;
uint _2480;
uint _2481;
uint _2482;
float _2730;
float _2731;
float _2732;
float _2733;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _203 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _204 = _203 * _196;
    float _205 = _203 * _197;
    float _206 = _203 * _198;
    float _210 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _214 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _215 = _214 * TANGENT.x;
    float _216 = _214 * TANGENT.y;
    float _217 = _214 * TANGENT.z;
    float _262 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _272 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _262);
    float _273 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _262);
    float _274 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _262);
    vec4 _309 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _325 = inversesqrt(dot(vec3(_204, _205, _206), vec3(_204, _205, _206)));
    float _332 = inversesqrt(dot(vec3(_215, _216, _217), vec3(_215, _216, _217)));
    float _344 = cbMtdParam._m0[24u].w + _272;
    float _345 = cbMtdParam._m0[25u].x + _273;
    float _346 = cbMtdParam._m0[25u].y + _274;
    float _363 = (-0.0) - dot(vec3(_344, _345, _346), vec3(_325 * _204, _325 * _205, _325 * _206));
    float _364 = (-0.0) - dot(vec3(_344, _345, _346), vec3(_332 * _215, _332 * _216, _332 * _217));
    float _365 = (-0.0) - dot(vec3(_344, _345, _346), vec3((-0.0) - (NORMAL.x * _210), (-0.0) - (NORMAL.y * _210), (-0.0) - (NORMAL.z * _210)));
    float _369 = inversesqrt(dot(vec3(_363, _364, _365), vec3(_363, _364, _365)));
    float _370 = _369 * _365;
    float _375 = ((cbMtdParam._m0[21u].z * _363) * _369) + (((_309.x * 2.0) + (-1.0)) * cbMtdParam._m0[22u].x);
    float _376 = ((cbMtdParam._m0[21u].w * _364) * _369) + (((_309.y * 2.0) + (-1.0)) * cbMtdParam._m0[22u].y);
    float _379 = fract(cbMtdParam._m0[21u].z * TEXCOORD.x);
    float _380 = fract(cbMtdParam._m0[21u].w * TEXCOORD.y);
    float _398;
    float _401;
    float _403;
    if (_375 > 0.0)
    {
        float _384 = (1.0 - _379) / _375;
        _398 = _384;
        _401 = ((cbMtdParam._m0[18u].w + 1.0) - fract(_384 * _370)) * 0.16666667163372039794921875;
        _403 = (fract((_384 * _376) + _380) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_375 < 0.0)
        {
            float _399 = ((-0.0) - _379) / _375;
            frontier_phi_3_2_ladder = _399;
            frontier_phi_3_2_ladder_1 = (fract((_399 * _376) + _380) * 0.16666667163372039794921875) + 0.666666686534881591796875;
            frontier_phi_3_2_ladder_2 = (fract(_399 * _370) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_3_2_ladder = _400;
            frontier_phi_3_2_ladder_1 = 0.0;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _398 = frontier_phi_3_2_ladder;
        _401 = frontier_phi_3_2_ladder_2;
        _403 = frontier_phi_3_2_ladder_1;
    }
    float _429;
    float _431;
    float _433;
    if (_376 > 0.0)
    {
        float _416 = (1.0 - _380) / _376;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_416 < _398)
        {
            frontier_phi_8_5_ladder = (fract(_416 * _370) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_416 * _375) + _379) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _416;
        }
        else
        {
            frontier_phi_8_5_ladder = _403;
            frontier_phi_8_5_ladder_1 = _401;
            frontier_phi_8_5_ladder_2 = _398;
        }
        _429 = frontier_phi_8_5_ladder_2;
        _431 = frontier_phi_8_5_ladder_1;
        _433 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_376 < 0.0)
        {
            float _430 = ((-0.0) - _380) / _376;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_430 < _398)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_430 * _370) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_430 * _375) + _379) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _430;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _403;
                frontier_phi_8_6_ladder_9_ladder_1 = _401;
                frontier_phi_8_6_ladder_9_ladder_2 = _398;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _403;
            frontier_phi_8_6_ladder_1 = _401;
            frontier_phi_8_6_ladder_2 = _398;
        }
        _429 = frontier_phi_8_6_ladder_2;
        _431 = frontier_phi_8_6_ladder_1;
        _433 = frontier_phi_8_6_ladder;
    }
    float _437 = (_370 > 0.0) ? (cbMtdParam._m0[18u].z / _370) : 5000.0;
    float _450;
    float _451;
    if (_437 < _429)
    {
        _450 = ((_379 + cbMtdParam._m0[18u].w) + (_437 * _375)) * 0.16666667163372039794921875;
        _451 = (((_437 * _376) + _380) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _450 = _431;
        _451 = _433;
    }
    vec4 _453 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_450, _451));
    float _2742 = isnan(0.0) ? cbMtdParam._m0[17u].z : (isnan(cbMtdParam._m0[17u].z) ? 0.0 : max(cbMtdParam._m0[17u].z, 0.0));
    float _467 = isnan(1.0) ? _2742 : (isnan(_2742) ? 1.0 : min(_2742, 1.0));
    float _2753 = isnan(0.0) ? cbMtdParam._m0[17u].y : (isnan(cbMtdParam._m0[17u].y) ? 0.0 : max(cbMtdParam._m0[17u].y, 0.0));
    float _510 = ((_467 - ((1.0 - (isnan(1.0) ? _2753 : (isnan(_2753) ? 1.0 : min(_2753, 1.0)))) * (_467 + 1.0))) + (((cbMtdParam._m0[18u].y * texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[3u].w)).x) + (cbMtdParam._m0[17u].x * texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w)).x)) / cbMtdParam._m0[17u].w)) / _467;
    float _2764 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _511 = isnan(1.0) ? _2764 : (isnan(_2764) ? 1.0 : min(_2764, 1.0));
    float _513 = 3.0 - (_511 * 2.0);
    float _518 = _511 * _511;
    float _546 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _550 = inversesqrt(dot(vec3(_272, _273, _274), vec3(_272, _273, _274)));
    float _551 = _272 * _550;
    float _552 = _273 * _550;
    float _553 = _274 * _550;
    vec4 _558 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _560 = _558.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _634 = sqrt(((_272 * _272) + (_273 * _273)) + (_274 * _274));
        float _641 = (cbMatDynParam._m0[5u].x * _634) + cbMatDynParam._m0[5u].y;
        float _2775 = isnan(0.0) ? _641 : (isnan(_641) ? 0.0 : max(_641, 0.0));
        float _642 = isnan(1.0) ? _2775 : (isnan(_2775) ? 1.0 : min(_2775, 1.0));
        float _646 = (cbMatDynParam._m0[5u].z * _634) + cbMatDynParam._m0[5u].w;
        float _2786 = isnan(0.0) ? _646 : (isnan(_646) ? 0.0 : max(_646, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2786 : (isnan(_2786) ? 1.0 : min(_2786, 1.0))) - _642)) + _642) < ((_560 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _577 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _578 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _587 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_577 * cbSceneParam._m0[86u].x, _578 * cbSceneParam._m0[86u].y));
    float _590 = _587.x * TEXCOORD_4.z;
    float _591 = (-0.0) - _551;
    float _592 = (-0.0) - _552;
    float _593 = (-0.0) - _553;
    float _615 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _619 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _623 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _786;
    float _787;
    float _788;
    float _789;
    float _790;
    float _791;
    float _792;
    float _793;
    float _794;
    float _795;
    float _796;
    float _797;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _709 = (cbModelParam._m0[37u].x * ((((fma(_623, cbModelParam._m0[26u].z, fma(_619, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _615)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _711 = (cbModelParam._m0[37u].y * ((((fma(_623, cbModelParam._m0[27u].z, fma(_619, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _615)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _712 = (((((fma(_623, cbModelParam._m0[28u].z, fma(_619, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _615)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _715 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_709, _711, _712), 0.0);
        vec4 _722 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_709, _711, _712), 0.0);
        vec4 _729 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_709, _711, _712), 0.0);
        vec4 _736 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_709, _711, _712), 0.0);
        float _749 = exp2((_715.w + (-0.5)) * 20.0) * 2.0;
        float _759 = exp2((_722.w + (-0.5)) * 20.0) * 2.0;
        float _769 = exp2((_729.w + (-0.5)) * 20.0) * 2.0;
        float _779 = exp2((_736.w + (-0.5)) * 20.0) * 2.0;
        float _780 = _779 * (_736.x + (-0.5));
        float _781 = _779 * (_736.y + (-0.5));
        float _782 = _779 * (_736.z + (-0.5));
        _786 = _749 * (_715.z + (-0.5));
        _787 = _749 * (_715.y + (-0.5));
        _788 = _749 * (_715.x + (-0.5));
        _789 = _759 * (_722.z + (-0.5));
        _790 = _759 * (_722.y + (-0.5));
        _791 = _759 * (_722.x + (-0.5));
        _792 = _769 * (_729.z + (-0.5));
        _793 = _769 * (_729.y + (-0.5));
        _794 = _769 * (_729.x + (-0.5));
        _795 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
        _796 = isnan(0.0) ? _781 : (isnan(_781) ? 0.0 : max(_781, 0.0));
        _797 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    }
    else
    {
        _786 = _400;
        _787 = _400;
        _788 = _400;
        _789 = _400;
        _790 = _400;
        _791 = _400;
        _792 = _400;
        _793 = _400;
        _794 = _400;
        _795 = _400;
        _796 = _400;
        _797 = _400;
    }
    float _928;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    float _936;
    float _937;
    float _938;
    float _939;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _854 = (cbModelParam._m0[38u].x * ((((fma(_623, cbModelParam._m0[30u].z, fma(_619, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _615)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _855 = (cbModelParam._m0[38u].y * ((((fma(_623, cbModelParam._m0[31u].z, fma(_619, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _615)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _856 = (((((fma(_623, cbModelParam._m0[32u].z, fma(_619, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _615)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _858 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_854, _855, _856), 0.0);
        vec4 _865 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_854, _855, _856), 0.0);
        vec4 _872 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_854, _855, _856), 0.0);
        vec4 _879 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_854, _855, _856), 0.0);
        float _891 = exp2((_858.w + (-0.5)) * 20.0) * 2.0;
        float _901 = exp2((_865.w + (-0.5)) * 20.0) * 2.0;
        float _911 = exp2((_872.w + (-0.5)) * 20.0) * 2.0;
        float _921 = exp2((_879.w + (-0.5)) * 20.0) * 2.0;
        float _922 = _921 * (_879.x + (-0.5));
        float _923 = _921 * (_879.y + (-0.5));
        float _924 = _921 * (_879.z + (-0.5));
        _928 = _891 * (_858.z + (-0.5));
        _929 = _891 * (_858.y + (-0.5));
        _930 = _891 * (_858.x + (-0.5));
        _931 = _901 * (_865.z + (-0.5));
        _932 = _901 * (_865.y + (-0.5));
        _933 = _901 * (_865.x + (-0.5));
        _934 = _911 * (_872.z + (-0.5));
        _935 = _911 * (_872.y + (-0.5));
        _936 = _911 * (_872.x + (-0.5));
        _937 = isnan(0.0) ? _924 : (isnan(_924) ? 0.0 : max(_924, 0.0));
        _938 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
        _939 = isnan(0.0) ? _922 : (isnan(_922) ? 0.0 : max(_922, 0.0));
    }
    else
    {
        _928 = _400;
        _929 = _400;
        _930 = _400;
        _931 = _400;
        _932 = _400;
        _933 = _400;
        _934 = _400;
        _935 = _400;
        _936 = _400;
        _937 = _400;
        _938 = _400;
        _939 = _400;
    }
    float _954 = _551 * (-0.5);
    float _955 = _552 * (-0.5);
    float _956 = _553 * (-0.5);
    float _957 = dot(vec4(_954, _955, _956, 1.0), vec4(_930, _933, _936, _939));
    float _960 = dot(vec4(_954, _955, _956, 1.0), vec4(_929, _932, _935, _938));
    float _963 = dot(vec4(_954, _955, _956, 1.0), vec4(_928, _931, _934, _937));
    float _998;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _970 = dot(vec4(_954, _955, _956, 1.0), vec4(_786, _789, _792, _795));
        float _974 = dot(vec4(_954, _955, _956, 1.0), vec4(_787, _790, _793, _796));
        float _978 = dot(vec4(_954, _955, _956, 1.0), vec4(_788, _791, _794, _797));
        float _985 = dot(vec4(cbModelParam._m0[39u]), vec4(_954, _955, _956, 1.0));
        _998 = dot(vec3(isnan(0.0) ? _978 : (isnan(_978) ? 0.0 : max(_978, 0.0)), isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0)), isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_985) ? 0.0 : (isnan(0.0) ? _985 : max(0.0, _985))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _998 = 1.0;
    }
    float _1009;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1000 = dot(vec4(cbModelParam._m0[40u]), vec4(_954, _955, _956, 1.0));
        _1009 = dot(vec3(isnan(0.0) ? _957 : (isnan(_957) ? 0.0 : max(_957, 0.0)), isnan(0.0) ? _960 : (isnan(_960) ? 0.0 : max(_960, 0.0)), isnan(0.0) ? _963 : (isnan(_963) ? 0.0 : max(_963, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1000) ? 0.0 : (isnan(0.0) ? _1000 : max(0.0, _1000))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1009 = 1.0;
    }
    float _1013 = (_1009 * cbModelParam._m0[1u].x) + (_998 * (1.0 - cbModelParam._m0[1u].x));
    float _1019 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1101;
    float _1103;
    float _1105;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1068 = fma(_623, cbModelParam._m0[13u].z, fma(_619, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _615)) + cbModelParam._m0[13u].w;
        float _1072 = fma(_623, cbModelParam._m0[14u].z, fma(_619, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _615)) + cbModelParam._m0[14u].w;
        float _1076 = fma(_623, cbModelParam._m0[15u].z, fma(_619, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _615)) + cbModelParam._m0[15u].w;
        float _1079 = fma(_593, cbModelParam._m0[13u].z, fma(_592, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _591));
        float _1082 = fma(_593, cbModelParam._m0[14u].z, fma(_592, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _591));
        float _1085 = fma(_593, cbModelParam._m0[15u].z, fma(_592, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _591));
        float _1111;
        if (_1079 > 0.0)
        {
            _1111 = abs((1.0 - _1068) / _1079);
        }
        else
        {
            float frontier_phi_29_27_ladder;
            if (_1079 < 0.0)
            {
                frontier_phi_29_27_ladder = abs((_1068 + 1.0) / _1079);
            }
            else
            {
                frontier_phi_29_27_ladder = 5000.0;
            }
            _1111 = frontier_phi_29_27_ladder;
        }
        float _1300;
        if (_1082 > 0.0)
        {
            _1300 = abs((1.0 - _1072) / _1082);
        }
        else
        {
            float frontier_phi_38_34_ladder;
            if (_1082 < 0.0)
            {
                frontier_phi_38_34_ladder = abs((_1072 + 1.0) / _1082);
            }
            else
            {
                frontier_phi_38_34_ladder = 5000.0;
            }
            _1300 = frontier_phi_38_34_ladder;
        }
        float _1654;
        if (_1085 > 0.0)
        {
            _1654 = abs((1.0 - _1076) / _1085);
        }
        else
        {
            float frontier_phi_50_45_ladder;
            if (_1085 < 0.0)
            {
                frontier_phi_50_45_ladder = abs((_1076 + 1.0) / _1085);
            }
            else
            {
                frontier_phi_50_45_ladder = 5000.0;
            }
            _1654 = frontier_phi_50_45_ladder;
        }
        float _1656 = isnan(_1300) ? _1111 : (isnan(_1111) ? _1300 : min(_1111, _1300));
        float _1657 = isnan(_1654) ? _1656 : (isnan(_1656) ? _1654 : min(_1656, _1654));
        float _1661 = (_1657 * _1079) + _1068;
        float _1662 = (_1657 * _1082) + _1072;
        float _1663 = (_1657 * _1085) + _1076;
        float _1664 = _1657 * 9.9999997473787516355514526367188e-05;
        float _1666 = (-1.0) - _1664;
        float _1668 = _1664 + 1.0;
        float frontier_phi_28_50_ladder;
        float frontier_phi_28_50_ladder_1;
        float frontier_phi_28_50_ladder_2;
        if ((_1663 > _1668) || ((_1663 < _1666) || ((_1662 > _1668) || ((_1662 < _1666) || ((_1661 < _1666) || (_1661 > _1668))))))
        {
            frontier_phi_28_50_ladder = 0.0;
            frontier_phi_28_50_ladder_1 = 0.0;
            frontier_phi_28_50_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1897 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1663, cbModelParam._m0[9u].z, fma(_1662, cbModelParam._m0[9u].y, _1661 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1663, cbModelParam._m0[10u].z, fma(_1662, cbModelParam._m0[10u].y, _1661 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1663, cbModelParam._m0[11u].z, fma(_1662, cbModelParam._m0[11u].y, _1661 * cbModelParam._m0[11u].x))), _1019);
            frontier_phi_28_50_ladder = _1897.z * cbModelParam._m0[1u].y;
            frontier_phi_28_50_ladder_1 = _1897.y * cbModelParam._m0[1u].y;
            frontier_phi_28_50_ladder_2 = _1897.x * cbModelParam._m0[1u].y;
        }
        _1101 = frontier_phi_28_50_ladder_2;
        _1103 = frontier_phi_28_50_ladder_1;
        _1105 = frontier_phi_28_50_ladder;
    }
    else
    {
        vec4 _1089 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_591, _592, _593), _1019);
        _1101 = _1089.x * cbModelParam._m0[1u].y;
        _1103 = _1089.y * cbModelParam._m0[1u].y;
        _1105 = _1089.z * cbModelParam._m0[1u].y;
    }
    float _1108 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1197;
    float _1199;
    float _1201;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1161 = fma(_623, cbModelParam._m0[21u].z, fma(_619, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _615)) + cbModelParam._m0[21u].w;
        float _1165 = fma(_623, cbModelParam._m0[22u].z, fma(_619, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _615)) + cbModelParam._m0[22u].w;
        float _1169 = fma(_623, cbModelParam._m0[23u].z, fma(_619, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _615)) + cbModelParam._m0[23u].w;
        float _1172 = fma(_593, cbModelParam._m0[21u].z, fma(_592, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _591));
        float _1175 = fma(_593, cbModelParam._m0[22u].z, fma(_592, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _591));
        float _1178 = fma(_593, cbModelParam._m0[23u].z, fma(_592, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _591));
        float _1305;
        if (_1172 > 0.0)
        {
            _1305 = abs((1.0 - _1161) / _1172);
        }
        else
        {
            float frontier_phi_40_36_ladder;
            if (_1172 < 0.0)
            {
                frontier_phi_40_36_ladder = abs((_1161 + 1.0) / _1172);
            }
            else
            {
                frontier_phi_40_36_ladder = 5000.0;
            }
            _1305 = frontier_phi_40_36_ladder;
        }
        float _1681;
        if (_1175 > 0.0)
        {
            _1681 = abs((1.0 - _1165) / _1175);
        }
        else
        {
            float frontier_phi_52_47_ladder;
            if (_1175 < 0.0)
            {
                frontier_phi_52_47_ladder = abs((_1165 + 1.0) / _1175);
            }
            else
            {
                frontier_phi_52_47_ladder = 5000.0;
            }
            _1681 = frontier_phi_52_47_ladder;
        }
        float _2021;
        if (_1178 > 0.0)
        {
            _2021 = abs((1.0 - _1169) / _1178);
        }
        else
        {
            float frontier_phi_64_59_ladder;
            if (_1178 < 0.0)
            {
                frontier_phi_64_59_ladder = abs((_1169 + 1.0) / _1178);
            }
            else
            {
                frontier_phi_64_59_ladder = 5000.0;
            }
            _2021 = frontier_phi_64_59_ladder;
        }
        float _2023 = isnan(_1681) ? _1305 : (isnan(_1305) ? _1681 : min(_1305, _1681));
        float _2024 = isnan(_2021) ? _2023 : (isnan(_2023) ? _2021 : min(_2023, _2021));
        float _2028 = (_2024 * _1172) + _1161;
        float _2029 = (_2024 * _1175) + _1165;
        float _2030 = (_2024 * _1178) + _1169;
        float _2031 = _2024 * 9.9999997473787516355514526367188e-05;
        float _2032 = (-1.0) - _2031;
        float _2034 = _2031 + 1.0;
        float frontier_phi_37_64_ladder;
        float frontier_phi_37_64_ladder_1;
        float frontier_phi_37_64_ladder_2;
        if ((_2030 > _2034) || ((_2030 < _2032) || ((_2029 > _2034) || ((_2029 < _2032) || ((_2028 < _2032) || (_2028 > _2034))))))
        {
            frontier_phi_37_64_ladder = 0.0;
            frontier_phi_37_64_ladder_1 = 0.0;
            frontier_phi_37_64_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2152 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2030, cbModelParam._m0[17u].z, fma(_2029, cbModelParam._m0[17u].y, _2028 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2030, cbModelParam._m0[18u].z, fma(_2029, cbModelParam._m0[18u].y, _2028 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2030, cbModelParam._m0[19u].z, fma(_2029, cbModelParam._m0[19u].y, _2028 * cbModelParam._m0[19u].x))), _1108);
            frontier_phi_37_64_ladder = _2152.z * cbModelParam._m0[1u].z;
            frontier_phi_37_64_ladder_1 = _2152.y * cbModelParam._m0[1u].z;
            frontier_phi_37_64_ladder_2 = _2152.x * cbModelParam._m0[1u].z;
        }
        _1197 = frontier_phi_37_64_ladder_2;
        _1199 = frontier_phi_37_64_ladder_1;
        _1201 = frontier_phi_37_64_ladder;
    }
    else
    {
        vec4 _1181 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_591, _592, _593), _1108);
        _1197 = _1181.x * cbModelParam._m0[1u].z;
        _1199 = _1181.y * cbModelParam._m0[1u].z;
        _1201 = _1181.z * cbModelParam._m0[1u].z;
    }
    float _1213 = _590 * 0.01200000010430812835693359375;
    float _1215 = _1213 * ((cbModelParam._m0[1u].w * (_1197 - _1101)) + _1101);
    float _1216 = _1213 * ((cbModelParam._m0[1u].w * (_1199 - _1103)) + _1103);
    float _1217 = _1213 * ((cbModelParam._m0[1u].w * (_1201 - _1105)) + _1105);
    float _1238 = fma(_1217, cbSceneParam._m0[89u].z, fma(_1216, cbSceneParam._m0[89u].y, _1215 * cbSceneParam._m0[89u].x));
    float _1241 = fma(_1217, cbSceneParam._m0[90u].z, fma(_1216, cbSceneParam._m0[90u].y, _1215 * cbSceneParam._m0[90u].x));
    float _1244 = fma(_1217, cbSceneParam._m0[91u].z, fma(_1216, cbSceneParam._m0[91u].y, _1215 * cbSceneParam._m0[91u].x));
    float _1279 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1283 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1287 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1291 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1292 = _1279 / _1291;
    float _1293 = _1283 / _1291;
    float _1294 = _1287 / _1291;
    float _1442;
    float _1443;
    float _1444;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1321 = ((uint(_1294 > cbSceneParam._m0[59u].y) + uint(_1294 > cbSceneParam._m0[59u].x)) + uint(_1294 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1322 = _1321 + 43u;
        uint _1330 = _1321 + 44u;
        uint _1338 = _1321 + 45u;
        uint _1346 = _1321 + 46u;
        float _1357 = fma(_1291, cbSceneParam._m0[_1322].w, fma(_1287, cbSceneParam._m0[_1322].z, fma(_1283, cbSceneParam._m0[_1322].y, _1279 * cbSceneParam._m0[_1322].x)));
        float _1361 = fma(_1291, cbSceneParam._m0[_1330].w, fma(_1287, cbSceneParam._m0[_1330].z, fma(_1283, cbSceneParam._m0[_1330].y, _1279 * cbSceneParam._m0[_1330].x)));
        float _1369 = fma(_1291, cbSceneParam._m0[_1346].w, fma(_1287, cbSceneParam._m0[_1346].z, fma(_1283, cbSceneParam._m0[_1346].y, _1279 * cbSceneParam._m0[_1346].x)));
        float _1374 = cbSceneParam._m0[33u].z * _1369;
        float _1376 = cbSceneParam._m0[33u].w * _1369;
        float _1379 = fma(_1291, cbSceneParam._m0[_1338].w, fma(_1287, cbSceneParam._m0[_1338].z, fma(_1283, cbSceneParam._m0[_1338].y, _1279 * cbSceneParam._m0[_1338].x))) / _1369;
        float _1427 = (cbSceneParam._m0[33u].x - sqrt(((_1293 * _1293) + (_1292 * _1292)) + (_1294 * _1294))) * cbSceneParam._m0[33u].y;
        float _2912 = isnan(0.0) ? _1427 : (isnan(_1427) ? 0.0 : max(_1427, 0.0));
        float _1435 = (isnan(1.0) ? _2912 : (isnan(_2912) ? 1.0 : min(_2912, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1374 + _1357) / _1369, (_1376 + _1361) / _1369), _1379), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1376 + _1357) / _1369, (_1361 - _1374) / _1369), _1379), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1357 - _1374) / _1369, (_1361 - _1376) / _1369), _1379), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1357 - _1376) / _1369, (_1374 + _1361) / _1369), _1379), 0.0)).x), vec4(0.25)));
        _1442 = 1.0 - (_1435 * cbSceneParam._m0[34u].x);
        _1443 = 1.0 - (_1435 * cbSceneParam._m0[34u].y);
        _1444 = 1.0 - (_1435 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1442 = 1.0;
        _1443 = 1.0;
        _1444 = 1.0;
    }
    float _1508;
    float _1510;
    float _1512;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1496 = fma(_1291, cbSceneParam._m0[63u].w, fma(_1287, cbSceneParam._m0[63u].z, fma(_1283, cbSceneParam._m0[63u].y, _1279 * cbSceneParam._m0[63u].x)));
        float _1497 = fma(_1291, cbSceneParam._m0[60u].w, fma(_1287, cbSceneParam._m0[60u].z, fma(_1283, cbSceneParam._m0[60u].y, _1279 * cbSceneParam._m0[60u].x))) / _1496;
        float _1498 = fma(_1291, cbSceneParam._m0[61u].w, fma(_1287, cbSceneParam._m0[61u].z, fma(_1283, cbSceneParam._m0[61u].y, _1279 * cbSceneParam._m0[61u].x))) / _1496;
        float frontier_phi_49_48_ladder;
        float frontier_phi_49_48_ladder_1;
        float frontier_phi_49_48_ladder_2;
        if ((((_1497 >= cbSceneParam._m0[64u].x) && (_1498 >= cbSceneParam._m0[64u].y)) && (_1497 <= cbSceneParam._m0[64u].z)) && (_1498 <= cbSceneParam._m0[64u].w))
        {
            float _1694 = fma(_1291, cbSceneParam._m0[62u].w, fma(_1287, cbSceneParam._m0[62u].z, fma(_1283, cbSceneParam._m0[62u].y, _1279 * cbSceneParam._m0[62u].x))) / _1496;
            float _1698 = isnan(cbSceneParam._m0[41u].w) ? _1694 : (isnan(_1694) ? cbSceneParam._m0[41u].w : max(_1694, cbSceneParam._m0[41u].w));
            float _1741 = (cbSceneParam._m0[33u].x - sqrt(((_1293 * _1293) + (_1292 * _1292)) + (_1294 * _1294))) * cbSceneParam._m0[33u].y;
            float _2928 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
            float _1748 = (isnan(1.0) ? _2928 : (isnan(_2928) ? 1.0 : min(_2928, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1497, cbSceneParam._m0[33u].w + _1498), _1698), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1497, _1498 - cbSceneParam._m0[33u].z), _1698), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1497 - cbSceneParam._m0[33u].z, _1498 - cbSceneParam._m0[33u].w), _1698), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1497 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1498), _1698), 0.0)).x), vec4(0.25)));
            float _1752 = 1.0 - (_1748 * cbSceneParam._m0[34u].x);
            float _1753 = 1.0 - (_1748 * cbSceneParam._m0[34u].y);
            float _1754 = 1.0 - (_1748 * cbSceneParam._m0[34u].z);
            frontier_phi_49_48_ladder = isnan(_1752) ? _1442 : (isnan(_1442) ? _1752 : min(_1442, _1752));
            frontier_phi_49_48_ladder_1 = isnan(_1753) ? _1443 : (isnan(_1443) ? _1753 : min(_1443, _1753));
            frontier_phi_49_48_ladder_2 = isnan(_1754) ? _1444 : (isnan(_1444) ? _1754 : min(_1444, _1754));
        }
        else
        {
            frontier_phi_49_48_ladder = _1442;
            frontier_phi_49_48_ladder_1 = _1443;
            frontier_phi_49_48_ladder_2 = _1444;
        }
        _1508 = frontier_phi_49_48_ladder;
        _1510 = frontier_phi_49_48_ladder_1;
        _1512 = frontier_phi_49_48_ladder_2;
    }
    else
    {
        _1508 = _1442;
        _1510 = _1443;
        _1512 = _1444;
    }
    uint _1514 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1518 = floatBitsToUint(cbInstanceData._m0[_1514 + 5u]);
    uint _1520 = _1518.x * 14u;
    uint _1521 = _1520 + 13u;
    float _1526 = _590 + (-1.0);
    float _1529 = (cbLight._m0[_1521].x * _1526) + 1.0;
    float _1530 = (cbLight._m0[_1521].y * _1526) + 1.0;
    uint _1531 = _1520 + 8u;
    float _1542 = cbLight._m0[_1520].x + _551;
    float _1543 = cbLight._m0[_1520].y + _552;
    float _1544 = cbLight._m0[_1520].z + _553;
    float _1548 = inversesqrt(dot(vec3(_1542, _1543, _1544), vec3(_1542, _1543, _1544)));
    float _1552 = dot(vec3(0.0), vec3(cbLight._m0[_1520].xyz));
    float _2954 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
    float _1555 = isnan(1.0) ? _2954 : (isnan(_2954) ? 1.0 : min(_2954, 1.0));
    float _1556 = dot(vec3(0.0), vec3(_551, _552, _553));
    float _2965 = isnan(0.0) ? _1556 : (isnan(_1556) ? 0.0 : max(_1556, 0.0));
    float _1559 = isnan(1.0) ? _2965 : (isnan(_2965) ? 1.0 : min(_2965, 1.0));
    float _1560 = dot(vec3(cbLight._m0[_1520].xyz), vec3(_1542 * _1548, _1543 * _1548, _1544 * _1548));
    float _2976 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
    float _1571 = (exp2(log2(1.0 - (isnan(1.0) ? _2976 : (isnan(_2976) ? 1.0 : min(_2976, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1577 = (0.5 / ((_1555 + 9.9999999392252902907785028219223e-09) + _1559)) * _1555;
    float _2987 = isnan(0.0) ? _1577 : (isnan(_1577) ? 0.0 : max(_1577, 0.0));
    float _1579 = (isnan(1.0) ? _2987 : (isnan(_2987) ? 1.0 : min(_2987, 1.0))) * 0.31831014156341552734375;
    float _1581 = isnan(1.0) ? _1529 : (isnan(_1529) ? 1.0 : min(_1529, 1.0));
    uint _1594 = _1520 + 9u;
    uint _1600 = _1520 | 1u;
    float _1606 = cbLight._m0[_1600].x + _551;
    float _1607 = cbLight._m0[_1600].y + _552;
    float _1608 = cbLight._m0[_1600].z + _553;
    float _1612 = inversesqrt(dot(vec3(_1606, _1607, _1608), vec3(_1606, _1607, _1608)));
    float _1616 = dot(vec3(0.0), vec3(cbLight._m0[_1600].xyz));
    float _3003 = isnan(0.0) ? _1616 : (isnan(_1616) ? 0.0 : max(_1616, 0.0));
    float _1619 = isnan(1.0) ? _3003 : (isnan(_3003) ? 1.0 : min(_3003, 1.0));
    float _1620 = dot(vec3(cbLight._m0[_1600].xyz), vec3(_1606 * _1612, _1607 * _1612, _1608 * _1612));
    float _3014 = isnan(0.0) ? _1620 : (isnan(_1620) ? 0.0 : max(_1620, 0.0));
    float _1629 = (exp2(log2(1.0 - (isnan(1.0) ? _3014 : (isnan(_3014) ? 1.0 : min(_3014, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1633 = (0.5 / ((_1619 + 9.9999999392252902907785028219223e-09) + _1559)) * _1619;
    float _3025 = isnan(0.0) ? _1633 : (isnan(_1633) ? 0.0 : max(_1633, 0.0));
    float _1635 = (isnan(1.0) ? _3025 : (isnan(_3025) ? 1.0 : min(_3025, 1.0))) * 0.31831014156341552734375;
    float _1636 = isnan(1.0) ? _1530 : (isnan(_1530) ? 1.0 : min(_1530, 1.0));
    float _1646 = (((_1629 * cbLight._m0[_1594].x) * _1635) * _1636) + ((((cbLight._m0[_1531].x * _1508) * _1571) * _1579) * _1581);
    float _1647 = (((_1629 * cbLight._m0[_1594].y) * _1635) * _1636) + ((((cbLight._m0[_1531].y * _1510) * _1571) * _1579) * _1581);
    float _1648 = (((_1629 * cbLight._m0[_1594].z) * _1635) * _1636) + ((((cbLight._m0[_1531].z * _1512) * _1571) * _1579) * _1581);
    float _1812;
    float _1814;
    float _1816;
    if (_1518.y == 0u)
    {
        uvec4 _1766 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1767 = _1766.x;
        uint _1778 = uint((float(_1766.y) * floor(float(uint(cbSceneParam._m0[85u].y * _578) / _1767))) + floor(float(uint(cbSceneParam._m0[85u].x * _577) / _1767)));
        float _1788 = (log2(_1294 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1789 = isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0));
        uint _1792 = uint(isnan(14.0) ? _1789 : (isnan(_1789) ? 14.0 : min(_1789, 14.0)));
        uvec4 _1797 = texelFetch(g_lightClusterGridBuffer, int(((_1792 << 2u) + (_1778 << 6u)) >> 2u));
        uint _1798 = _1797.x;
        uint _1799 = _1766.z;
        float _1906;
        float _1908;
        float _1910;
        if (((((1u << ((_1799 >> 4u) & 15u)) + 4294967295u) & _1798) == 0u) || ((_1799 & 240u) == 0u))
        {
            _1906 = 0.0;
            _1908 = 0.0;
            _1910 = 0.0;
        }
        else
        {
            float _1907;
            float _1909;
            float _1911;
            float _2067 = 0.0;
            float _2068 = 0.0;
            float _2069 = 0.0;
            uint _2070 = 0u;
            uint _2079;
            bool _2080;
            for (;;)
            {
                _2079 = texelFetch(g_lightClassification, int((((_1792 << 5u) + (_1778 << 9u)) + (_2070 << 2u)) >> 2u)).x;
                _2080 = _2079 == 0u;
                float frontier_phi_75_pred;
                float frontier_phi_75_pred_1;
                float frontier_phi_75_pred_2;
                if (_2080)
                {
                    frontier_phi_75_pred = _2069;
                    frontier_phi_75_pred_1 = _2068;
                    frontier_phi_75_pred_2 = _2067;
                }
                else
                {
                    float _2224;
                    float _2225;
                    float _2226;
                    uint _2227;
                    _2224 = _2067;
                    _2225 = _2068;
                    _2226 = _2069;
                    _2227 = _2079;
                    float _2157;
                    float _2158;
                    float _2159;
                    for (;;)
                    {
                        uint _2231 = uint(findLSB(_2227)) + (_2070 << 5u);
                        uint _2228 = (_2227 + 4294967295u) & _2227;
                        uint _2233 = _2231 * 48u;
                        vec4 _2247 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2233)).x, texelFetch(g_PointLightRenderingBuffer, int(_2233 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2233 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2233 + 3u)).x));
                        uint _2264 = (_2231 * 48u) + 8u;
                        vec3 _2275 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2264)).x, texelFetch(g_PointLightRenderingBuffer, int(_2264 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2264 + 2u)).x));
                        float _2279 = _2247.x - _1292;
                        float _2280 = _2247.y - _1293;
                        float _2281 = _2247.z - _1294;
                        float _2282 = dot(vec3(_2279, _2280, _2281), vec3(_2279, _2280, _2281));
                        float _2285 = inversesqrt(_2282);
                        float _2294 = 1.0 - (_2282 * _2247.w);
                        float _3051 = isnan(0.0) ? _2294 : (isnan(_2294) ? 0.0 : max(_2294, 0.0));
                        float _2296 = sqrt(_2282) * uintBitsToFloat(uvec4(_2254, _2255, _2256, texelFetch(g_PointLightRenderingBuffer, int(((_2231 * 48u) + 4u) + 3u)).x)).w;
                        float _2299 = 1.39999997615814208984375 / (_2296 + 1.39999997615814208984375);
                        float _2300 = _2299 * _2299;
                        float _2303 = ((1.0 - _2300) * dot(vec3(0.0), vec3(_2285 * _2279, _2285 * _2280, _2285 * _2281))) + _2300;
                        float _2305 = (-0.0) - _1292;
                        float _2306 = (-0.0) - _1293;
                        float _2307 = (-0.0) - _1294;
                        float _2311 = inversesqrt(dot(vec3(_2305, _2306, _2307), vec3(_2305, _2306, _2307)));
                        float _2315 = dot(vec3(0.0), vec3(_2311 * _2305, _2311 * _2306, _2311 * _2307));
                        float _3062 = isnan(0.0) ? _2315 : (isnan(_2315) ? 0.0 : max(_2315, 0.0));
                        float _3073 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
                        float _2319 = isnan(1.0) ? _3073 : (isnan(_3073) ? 1.0 : min(_3073, 1.0));
                        float _2323 = (0.5 / (((isnan(1.0) ? _3062 : (isnan(_3062) ? 1.0 : min(_3062, 1.0))) + 9.9999999392252902907785028219223e-09) + _2319)) * _2319;
                        float _3084 = isnan(0.0) ? _2323 : (isnan(_2323) ? 0.0 : max(_2323, 0.0));
                        float _2332 = (((isnan(1.0) ? _3084 : (isnan(_3084) ? 1.0 : min(_3084, 1.0))) * 3.1415927410125732421875) / (((_2296 * _2296) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _3051 : (isnan(_3051) ? 1.0 : min(_3051, 1.0)));
                        _2157 = (_2332 * _2275.x) + _2224;
                        _2158 = (_2332 * _2275.y) + _2225;
                        _2159 = (_2332 * _2275.z) + _2226;
                        if (_2228 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2224 = _2157;
                            _2225 = _2158;
                            _2226 = _2159;
                            _2227 = _2228;
                        }
                    }
                    frontier_phi_75_pred = _2159;
                    frontier_phi_75_pred_1 = _2158;
                    frontier_phi_75_pred_2 = _2157;
                }
                _1911 = frontier_phi_75_pred;
                _1909 = frontier_phi_75_pred_1;
                _1907 = frontier_phi_75_pred_2;
                uint _2071 = _2070 + 1u;
                if (_2071 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2067 = _1907;
                    _2068 = _1909;
                    _2069 = _1911;
                    _2070 = _2071;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1906 = _1907;
            _1908 = _1909;
            _1910 = _1911;
        }
        uvec4 _1914 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1915 = _1914.z;
        uint _1917 = (_1915 >> 8u) & 15u;
        float _2047;
        float _2049;
        float _2051;
        if (((4294967295u << _1917) & _1798) == 0u)
        {
            _2047 = _1906;
            _2049 = _1908;
            _2051 = _1910;
        }
        else
        {
            float _2063 = inversesqrt(dot(vec3(_1292, _1293, _1294), vec3(_1292, _1293, _1294)));
            float frontier_phi_66_67_ladder;
            float frontier_phi_66_67_ladder_1;
            float frontier_phi_66_67_ladder_2;
            if (_1917 < ((_1915 >> 12u) & 15u))
            {
                float _2048;
                float _2050;
                float _2052;
                float _2210 = _1906;
                float _2211 = _1908;
                float _2212 = _1910;
                uint _2213 = _1917;
                uint _2222;
                bool _2223;
                for (;;)
                {
                    _2222 = texelFetch(g_lightClassification, int((((_1792 << 5u) + (_1778 << 9u)) + (_2213 << 2u)) >> 2u)).x;
                    _2223 = _2222 == 0u;
                    float frontier_phi_86_pred;
                    float frontier_phi_86_pred_1;
                    float frontier_phi_86_pred_2;
                    if (_2223)
                    {
                        frontier_phi_86_pred = _2212;
                        frontier_phi_86_pred_1 = _2211;
                        frontier_phi_86_pred_2 = _2210;
                    }
                    else
                    {
                        float _2346;
                        float _2347;
                        float _2348;
                        float _2569;
                        float _2570;
                        float _2571;
                        float _2356 = _2210;
                        float _2357 = _2211;
                        float _2358 = _2212;
                        uint _2359 = _2222;
                        uint _2360;
                        uint _2370;
                        vec4 _2385;
                        float _2386;
                        vec3 _2398;
                        vec4 _2414;
                        vec4 _2430;
                        float _2476;
                        bool _2477;
                        for (;;)
                        {
                            _2370 = ((_2213 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2359));
                            _2360 = (_2359 + 4294967295u) & _2359;
                            uint _2372 = _2370 * 40u;
                            _2385 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2372)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2372 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2372 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2372 + 3u)).x));
                            _2386 = _2385.w;
                            uint _2388 = (_2370 * 40u) + 8u;
                            _2398 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2388)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2388 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2388 + 2u)).x));
                            uint _2401 = (_2370 * 40u) + 16u;
                            _2414 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2401)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2401 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2401 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2401 + 3u)).x));
                            uint _2417 = (_2370 * 40u) + 20u;
                            _2430 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2417)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2417 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2417 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2417 + 3u)).x));
                            uint _2432 = (_2370 * 40u) + 24u;
                            vec4 _2445 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2432)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2432 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2432 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2432 + 3u)).x));
                            uint _2451 = (_2370 * 40u) + 28u;
                            vec4 _2464 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2451)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2451 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2451 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2451 + 3u)).x));
                            _2476 = fma(_1294, _2464.z, fma(_1293, _2464.y, _2464.x * _1292)) + _2464.w;
                            _2477 = !((fma(_1294, _2445.z, fma(_1293, _2445.y, _2445.x * _1292)) + _2445.w) <= 0.0);
                            float frontier_phi_92_pred;
                            float frontier_phi_92_pred_1;
                            float frontier_phi_92_pred_2;
                            if (_2477)
                            {
                                float _2511 = _2385.x - _1292;
                                float _2512 = _2385.y - _1293;
                                float _2513 = _2385.z - _1294;
                                float _2514 = dot(vec3(_2511, _2512, _2513), vec3(_2511, _2512, _2513));
                                float _2517 = inversesqrt(_2514);
                                float _2524 = 1.0 - (_2514 / (_2386 * _2386));
                                float _3095 = isnan(0.0) ? _2524 : (isnan(_2524) ? 0.0 : max(_2524, 0.0));
                                float _2526 = sqrt(_2514) * uintBitsToFloat(uvec4(_2480, _2481, _2482, texelFetch(g_SpotLightRenderingBuffer, int(((_2370 * 40u) + 4u) + 3u)).x)).w;
                                float _2528 = 1.39999997615814208984375 / (_2526 + 1.39999997615814208984375);
                                float _2529 = _2528 * _2528;
                                float _2532 = (fma(_1294, _2414.z, fma(_1293, _2414.y, _2414.x * _1292)) + _2414.w) / _2476;
                                float _2533 = (fma(_1294, _2430.z, fma(_1293, _2430.y, _2430.x * _1292)) + _2430.w) / _2476;
                                float _2537 = 1.0 - dot(vec2(_2532, _2533), vec2(_2532, _2533));
                                float _3106 = isnan(0.0) ? _2537 : (isnan(_2537) ? 0.0 : max(_2537, 0.0));
                                float _2545 = dot(vec3(0.0), vec3((-0.0) - (_1292 * _2063), (-0.0) - (_1293 * _2063), (-0.0) - (_1294 * _2063)));
                                float _3117 = isnan(0.0) ? _2545 : (isnan(_2545) ? 0.0 : max(_2545, 0.0));
                                float _2553 = ((1.0 - _2529) * dot(vec3(0.0), vec3(_2517 * _2511, _2517 * _2512, _2517 * _2513))) + _2529;
                                float _3128 = isnan(0.0) ? _2553 : (isnan(_2553) ? 0.0 : max(_2553, 0.0));
                                float _2554 = isnan(1.0) ? _3128 : (isnan(_3128) ? 1.0 : min(_3128, 1.0));
                                float _2558 = (0.5 / (((isnan(1.0) ? _3117 : (isnan(_3117) ? 1.0 : min(_3117, 1.0))) + 9.9999999392252902907785028219223e-09) + _2554)) * _2554;
                                float _3139 = isnan(0.0) ? _2558 : (isnan(_2558) ? 0.0 : max(_2558, 0.0));
                                float _2565 = ((isnan(1.0) ? _3106 : (isnan(_3106) ? 1.0 : min(_3106, 1.0))) * (isnan(1.0) ? _3095 : (isnan(_3095) ? 1.0 : min(_3095, 1.0)))) * (((isnan(1.0) ? _3139 : (isnan(_3139) ? 1.0 : min(_3139, 1.0))) * 3.1415927410125732421875) / (((_2526 * _2526) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_92_pred = _2565 * _2398.x;
                                frontier_phi_92_pred_1 = _2565 * _2398.z;
                                frontier_phi_92_pred_2 = _2565 * _2398.y;
                            }
                            else
                            {
                                frontier_phi_92_pred = 0.0;
                                frontier_phi_92_pred_1 = 0.0;
                                frontier_phi_92_pred_2 = 0.0;
                            }
                            _2569 = frontier_phi_92_pred;
                            _2571 = frontier_phi_92_pred_1;
                            _2570 = frontier_phi_92_pred_2;
                            _2346 = _2569 + _2356;
                            _2347 = _2570 + _2357;
                            _2348 = _2571 + _2358;
                            if (_2360 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2356 = _2346;
                                _2357 = _2347;
                                _2358 = _2348;
                                _2359 = _2360;
                                continue;
                            }
                        }
                        frontier_phi_86_pred = _2348;
                        frontier_phi_86_pred_1 = _2347;
                        frontier_phi_86_pred_2 = _2346;
                    }
                    _2052 = frontier_phi_86_pred;
                    _2050 = frontier_phi_86_pred_1;
                    _2048 = frontier_phi_86_pred_2;
                    uint _2214 = _2213 + 1u;
                    if (_2214 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2210 = _2048;
                        _2211 = _2050;
                        _2212 = _2052;
                        _2213 = _2214;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_66_67_ladder = _2052;
                frontier_phi_66_67_ladder_1 = _2048;
                frontier_phi_66_67_ladder_2 = _2050;
            }
            else
            {
                frontier_phi_66_67_ladder = _1910;
                frontier_phi_66_67_ladder_1 = _1906;
                frontier_phi_66_67_ladder_2 = _1908;
            }
            _2047 = frontier_phi_66_67_ladder_1;
            _2049 = frontier_phi_66_67_ladder_2;
            _2051 = frontier_phi_66_67_ladder;
        }
        float _2056 = isnan(1.0) ? _590 : (isnan(_590) ? 1.0 : min(_590, 1.0));
        _1812 = ((_2047 * 0.039999999105930328369140625) * _2056) + _1646;
        _1814 = ((_2049 * 0.039999999105930328369140625) * _2056) + _1647;
        _1816 = ((_2051 * 0.039999999105930328369140625) * _2056) + _1648;
    }
    else
    {
        _1812 = _1646;
        _1814 = _1647;
        _1816 = _1648;
    }
    uint _1822 = _1514 + 9u;
    uint _1823 = _1822 + uint(cbMatDynParam._m0[0u].w);
    float _1838 = (((((_518 * (cbMtdParam._m0[15u].x - cbMtdParam._m0[13u].x)) * _513) + cbMtdParam._m0[13u].x) * _453.x) * cbInstanceData._m0[_1823].x) + ((_1812 + ((isnan(0.0) ? _1238 : (isnan(_1238) ? 0.0 : max(_1238, 0.0))) * _1013)) * cbPerFrame._m0[3u].x);
    float _1839 = (((((_518 * (cbMtdParam._m0[15u].y - cbMtdParam._m0[13u].y)) * _513) + cbMtdParam._m0[13u].y) * _453.y) * cbInstanceData._m0[_1823].y) + ((_1814 + ((isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0))) * _1013)) * cbPerFrame._m0[3u].x);
    float _1840 = (((((_518 * (cbMtdParam._m0[15u].z - cbMtdParam._m0[13u].z)) * _513) + cbMtdParam._m0[13u].z) * _453.z) * cbInstanceData._m0[_1823].z) + ((_1816 + ((isnan(0.0) ? _1244 : (isnan(_1244) ? 0.0 : max(_1244, 0.0))) * _1013)) * cbPerFrame._m0[3u].x);
    float _1841 = isnan(0.0) ? _1838 : (isnan(_1838) ? 0.0 : max(_1838, 0.0));
    float _1842 = isnan(0.0) ? _1839 : (isnan(_1839) ? 0.0 : max(_1839, 0.0));
    float _1843 = isnan(0.0) ? _1840 : (isnan(_1840) ? 0.0 : max(_1840, 0.0));
    uint _1844 = _1514 + 6u;
    float _1852 = _577 / cbSceneParam._m0[86u].x;
    float _1853 = _578 / cbSceneParam._m0[86u].y;
    vec4 _1867 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1852, _1853, (log2((isnan(cbSceneParam._m0[77u].w) ? _546 : (isnan(_546) ? cbSceneParam._m0[77u].w : min(_546, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1869 = _1867.x;
    float _1870 = _1867.y;
    float _1871 = _1867.z;
    float _1872 = _1867.w;
    float _1962;
    float _1964;
    float _1966;
    float _1968;
    if (_546 > cbSceneParam._m0[78u].w)
    {
        float _1925 = isnan(_546) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _546 : min(cbSceneParam._m0[80u].w, _546));
        float _1926 = _1925 / _546;
        float _1937 = _1926 * _272;
        float _1938 = _273 * _1926;
        float _1939 = (-0.0) - _1938;
        float _1940 = _1926 * _274;
        float _1942 = (cbSceneParam._m0[77u].w * _1939) / _1925;
        float _1943 = _1942 + cbSceneParam._m0[79u].w;
        float _1944 = cbSceneParam._m0[79u].w - _1938;
        float _1950 = sqrt(((_1937 * _1937) + (_1938 * _1938)) + (_1940 * _1940));
        float _1953 = (1.0 - (cbSceneParam._m0[77u].w / _1925)) * _1950;
        float _1958 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1960 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2167;
        if (abs((_1939 - _1942) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2167 = ((((_1943 > 0.0) ? exp2(_1958 * _1943) : (2.0 - exp2(_1960 * _1943))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1953;
        }
        else
        {
            float _2093 = 1.0 / cbSceneParam._m0[80u].x;
            float _2094 = isnan(_1944) ? _1943 : (isnan(_1943) ? _1944 : max(_1943, _1944));
            float _2095 = isnan(_1944) ? _1943 : (isnan(_1943) ? _1944 : min(_1943, _1944));
            float _2104 = isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : min(_2094, 0.0));
            float _2105 = isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : min(_2095, 0.0));
            _2167 = ((abs(_1950 / _1939) * cbSceneParam._m0[80u].y) * ((((_2104 - _2105) * 2.0) - ((exp2(_1958 * (isnan(0.0) ? _2094 : (isnan(_2094) ? 0.0 : max(_2094, 0.0)))) - exp2(_1958 * (isnan(0.0) ? _2095 : (isnan(_2095) ? 0.0 : max(_2095, 0.0))))) * _2093)) - ((exp2(_1960 * _2104) - exp2(_1960 * _2105)) * _2093))) + (_1953 * cbSceneParam._m0[80u].z);
        }
        vec4 _2169 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1852, _1853, 1.0), 0.0);
        float _2178 = exp2((_2167 * (-1.44269502162933349609375)) * (1.0 - _2169.w));
        float _2179 = log2(_2178);
        float _2195 = log2(_1872);
        _1962 = (exp2(_2195 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2179 * cbSceneParam._m0[78u].x)) * _2169.x) / cbSceneParam._m0[78u].x)) + _1869;
        _1964 = (exp2(_2195 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2179 * cbSceneParam._m0[78u].y)) * _2169.y) / cbSceneParam._m0[78u].y)) + _1870;
        _1966 = (exp2(_2195 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2179 * cbSceneParam._m0[78u].z)) * _2169.z) / cbSceneParam._m0[78u].z)) + _1871;
        _1968 = _2178 * _1872;
    }
    else
    {
        _1962 = _1869;
        _1964 = _1870;
        _1966 = _1871;
        _1968 = _1872;
    }
    bool _2205;
    vec4 _1978;
    vec4 _2000;
    float _2002;
    float _2006;
    float _2007;
    float _2008;
    float _2009;
    bool _2020;
    for (;;)
    {
        _1978 = cbMatDynParam._m0[0u];
        float _1980 = roundEven(_1978.y);
        bool _1981 = _1980 == 3.0;
        float _1982 = log2(_1968);
        float _1989 = exp2(_1982 * cbSceneParam._m0[78u].x) * _1841;
        float _1990 = exp2(_1982 * cbSceneParam._m0[78u].y) * _1842;
        float _1991 = exp2(_1982 * cbSceneParam._m0[78u].z) * _1843;
        float _1998 = _560 + (-0.5);
        _2000 = cbMtdParam._m0[1u];
        _2002 = _2000.y * _1998;
        float _2005 = (_1980 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2006 = _2005 * (_1981 ? _1989 : (_1989 + (cbSceneParam._m0[72u].w * _1962)));
        _2007 = _2005 * (_1981 ? _1990 : (_1990 + (cbSceneParam._m0[72u].w * _1964)));
        _2008 = _2005 * (_1981 ? _1991 : (_1991 + (cbSceneParam._m0[72u].w * _1966)));
        _2009 = _1998 * 0.999000012874603271484375;
        _2020 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2020)
        {
            if ((cbInstanceData._m0[_1514 + 7u].x + _2009) < 0.5)
            {
                _2205 = true;
                break;
            }
        }
        uint _2128 = _1822 + uint(_1978.w);
        if ((cbInstanceData._m0[_2128].w < 1.0) && ((cbInstanceData._m0[_2128].w + _2009) < 0.5))
        {
            _2205 = true;
            break;
        }
        if ((_2002 + 1.0) < _2000.x)
        {
            _2205 = true;
            break;
        }
        _2205 = false;
        break;
    }
    float _2337;
    if (_2205)
    {
        discard_state = true;
        _2337 = 0.0;
    }
    else
    {
        _2337 = cbInstanceData._m0[_1844].w;
    }
    SV_Target.x = _2006;
    SV_Target.y = _2007;
    SV_Target.z = _2008;
    SV_Target.w = _2337;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1844].w;
    discard_exit();
}


