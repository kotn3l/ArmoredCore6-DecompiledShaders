#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _986;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _182 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _183 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _184 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _189 = inversesqrt(dot(vec3(_182, _183, _184), vec3(_182, _183, _184)));
    float _190 = _189 * _182;
    float _191 = _189 * _183;
    float _192 = _189 * _184;
    float _196 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _197 = _196 * NORMAL.x;
    float _198 = _196 * NORMAL.y;
    float _199 = _196 * NORMAL.z;
    float _203 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _204 = _203 * TANGENT.x;
    float _205 = _203 * TANGENT.y;
    float _206 = _203 * TANGENT.z;
    float _251 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _261 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _251);
    float _262 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _251);
    float _263 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _251);
    vec4 _276 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _279 = _276.x;
    vec4 _297 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _314 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _279) + cbMtdParam._m0[12u].x) * _297.x;
    float _316 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _279) + cbMtdParam._m0[12u].y) * _297.y;
    float _318 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _279) + cbMtdParam._m0[12u].z) * _297.z;
    vec4 _336 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _372 = cbMtdParam._m0[24u].x + _261;
    float _373 = cbMtdParam._m0[24u].y + _262;
    float _374 = cbMtdParam._m0[24u].z + _263;
    float _388 = (-0.0) - dot(vec3(_372, _373, _374), vec3(_190, _191, _192));
    float _389 = (-0.0) - dot(vec3(_372, _373, _374), vec3(_204, _205, _206));
    float _390 = (-0.0) - dot(vec3(_372, _373, _374), vec3((-0.0) - _197, (-0.0) - _198, (-0.0) - _199));
    float _394 = inversesqrt(dot(vec3(_388, _389, _390), vec3(_388, _389, _390)));
    float _397 = _394 * _390;
    float _400 = ((_394 * _388) + ((cbMtdParam._m0[22u].x * _279) * ((_336.x * 2.0) + (-1.0)))) * cbMtdParam._m0[20u].w;
    float _401 = ((_394 * _389) + ((cbMtdParam._m0[22u].y * _279) * ((_336.y * 2.0) + (-1.0)))) * cbMtdParam._m0[20u].z;
    float _402 = fract(TEXCOORD.x);
    float _403 = fract(TEXCOORD.y);
    float _409;
    if (_400 > 0.0)
    {
        _409 = (1.0 - _402) / _400;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_400 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _402) / _400;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _409 = frontier_phi_3_2_ladder;
    }
    float _417;
    if (_401 > 0.0)
    {
        _417 = (1.0 - _403) / _401;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_401 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _403) / _401;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _417 = frontier_phi_7_6_ladder;
    }
    float _421 = (_397 > 0.0) ? (cbMtdParam._m0[16u].x / _397) : 5000.0;
    float _422 = isnan(_417) ? _409 : (isnan(_409) ? _417 : min(_409, _417));
    float _423 = isnan(_421) ? _422 : (isnan(_422) ? _421 : min(_422, _421));
    float _427 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _434 = ((_423 * _397) + _427) / _427;
    vec4 _459 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * ((((((_402 + (-0.5)) + (_423 * _400)) / _434) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * ((((((_403 + (-0.5)) + (_423 * _401)) / _434) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    vec4 _487 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _491 = _487.z;
    float _494 = (_487.x * 2.0) + (-1.0);
    float _495 = (_487.y * 2.0) + (-1.0);
    float _496 = dot(vec2(_494, _495), vec2(_494, _495));
    float _3072 = isnan(0.0) ? _496 : (isnan(_496) ? 0.0 : max(_496, 0.0));
    float _501 = sqrt(1.0 - (isnan(1.0) ? _3072 : (isnan(_3072) ? 1.0 : min(_3072, 1.0))));
    float _504 = fma(_501, _197, fma(_495, _204, _494 * _190));
    float _507 = fma(_501, _198, fma(_495, _205, _494 * _191));
    float _510 = fma(_501, _199, fma(_495, _206, _494 * _192));
    float _514 = inversesqrt(dot(vec3(_504, _507, _510), vec3(_504, _507, _510)));
    float _515 = _514 * _504;
    float _516 = _514 * _507;
    float _517 = _514 * _510;
    float _3083 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _518 = isnan(1.0) ? _3083 : (isnan(_3083) ? 1.0 : min(_3083, 1.0));
    float _3094 = isnan(0.0) ? _314 : (isnan(_314) ? 0.0 : max(_314, 0.0));
    float _3105 = isnan(0.0) ? _316 : (isnan(_316) ? 0.0 : max(_316, 0.0));
    float _3116 = isnan(0.0) ? _318 : (isnan(_318) ? 0.0 : max(_318, 0.0));
    float _537 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _541 = inversesqrt(dot(vec3(_261, _262, _263), vec3(_261, _262, _263)));
    float _542 = _261 * _541;
    float _543 = _262 * _541;
    float _544 = _263 * _541;
    float _550 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _551 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _570 = fma(_517, cbSceneParam._m0[5u].z, fma(_516, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _515));
    float _573 = fma(_517, cbSceneParam._m0[6u].z, fma(_516, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _515));
    float _576 = fma(_517, cbSceneParam._m0[7u].z, fma(_516, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _515));
    uint _589 = uint(roundEven(NORMAL.w)) * 13u;
    uint _591 = _589 + 9u;
    uint _592 = _591 + uint(cbMatDynParam._m0[0u].w);
    float _598 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3094 : (isnan(_3094) ? 1.0 : min(_3094, 1.0)))) * cbInstanceData._m0[_592].x;
    float _599 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3105 : (isnan(_3105) ? 1.0 : min(_3105, 1.0)))) * cbInstanceData._m0[_592].y;
    float _600 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3116 : (isnan(_3116) ? 1.0 : min(_3116, 1.0)))) * cbInstanceData._m0[_592].z;
    float _3127 = isnan(0.0) ? _598 : (isnan(_598) ? 0.0 : max(_598, 0.0));
    float _601 = isnan(1.0) ? _3127 : (isnan(_3127) ? 1.0 : min(_3127, 1.0));
    float _3138 = isnan(0.0) ? _599 : (isnan(_599) ? 0.0 : max(_599, 0.0));
    float _602 = isnan(1.0) ? _3138 : (isnan(_3138) ? 1.0 : min(_3138, 1.0));
    float _3149 = isnan(0.0) ? _600 : (isnan(_600) ? 0.0 : max(_600, 0.0));
    float _603 = isnan(1.0) ? _3149 : (isnan(_3149) ? 1.0 : min(_3149, 1.0));
    vec4 _612 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _550, cbSceneParam._m0[86u].y * _551));
    float _615 = _612.x * TEXCOORD_4.z;
    float _616 = dot(vec3(_515, _516, _517), vec3(_542, _543, _544));
    float _619 = _616 * 2.0;
    float _623 = (_619 * _515) - _542;
    float _624 = (_619 * _516) - _543;
    float _625 = (_619 * _517) - _544;
    float _629 = abs(dot(vec3(_542, _543, _544), vec3(_515, _516, _517)));
    float _3160 = isnan(0.0) ? _629 : (isnan(_629) ? 0.0 : max(_629, 0.0));
    float _631 = sqrt(_518);
    float _644 = exp2((_631 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3160 : (isnan(_3160) ? 1.0 : min(_3160, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_631 * 3.0));
    float _676 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _680 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _684 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _985;
    float _987;
    float _988;
    float _989;
    float _990;
    float _991;
    float _992;
    float _993;
    float _994;
    float _995;
    float _996;
    float _997;
    float _998;
    float _999;
    float _1000;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _712 = fma(_684, cbModelParam._m0[26u].z, fma(_680, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _676));
        float _716 = fma(_684, cbModelParam._m0[27u].z, fma(_680, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _676));
        float _720 = fma(_684, cbModelParam._m0[28u].z, fma(_680, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _676));
        float _743 = _676 + _515;
        float _744 = _680 + _516;
        float _745 = _684 + _517;
        float _755 = fma(_745, cbModelParam._m0[26u].z, fma(_744, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _743)) - _712;
        float _756 = fma(_745, cbModelParam._m0[27u].z, fma(_744, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _743)) - _716;
        float _757 = fma(_745, cbModelParam._m0[28u].z, fma(_744, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _743)) - _720;
        float _761 = inversesqrt(dot(vec3(_755, _756, _757), vec3(_755, _756, _757)));
        float _774 = ((_761 * _755) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_712 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _775 = ((_761 * _756) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_716 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _776 = ((_761 * _757) / cbModelParam._m0[34u].z) + ((((((_720 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _779 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_774, _775, _776), 0.0);
        vec4 _786 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_774, _775, _776), 0.0);
        vec4 _793 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_774, _775, _776), 0.0);
        vec4 _800 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_774, _775, _776), 0.0);
        float _813 = exp2((_779.w + (-0.5)) * 20.0) * 2.0;
        float _814 = _813 * (_779.x + (-0.5));
        float _815 = _813 * (_779.y + (-0.5));
        float _816 = _813 * (_779.z + (-0.5));
        float _823 = exp2((_786.w + (-0.5)) * 20.0) * 2.0;
        float _824 = _823 * (_786.x + (-0.5));
        float _825 = _823 * (_786.y + (-0.5));
        float _826 = _823 * (_786.z + (-0.5));
        float _833 = exp2((_793.w + (-0.5)) * 20.0) * 2.0;
        float _834 = _833 * (_793.x + (-0.5));
        float _835 = _833 * (_793.y + (-0.5));
        float _836 = _833 * (_793.z + (-0.5));
        float _843 = exp2((_800.w + (-0.5)) * 20.0) * 2.0;
        float _844 = _843 * (_800.x + (-0.5));
        float _845 = _843 * (_800.y + (-0.5));
        float _846 = _843 * (_800.z + (-0.5));
        float _847 = isnan(0.0) ? _844 : (isnan(_844) ? 0.0 : max(_844, 0.0));
        float _848 = isnan(0.0) ? _845 : (isnan(_845) ? 0.0 : max(_845, 0.0));
        float _849 = isnan(0.0) ? _846 : (isnan(_846) ? 0.0 : max(_846, 0.0));
        float _850 = _814 * 0.5;
        float _851 = _824 * 0.5;
        float _852 = _834 * 0.5;
        float _853 = dot(vec3(_850, _851, _852), vec3(_850, _851, _852));
        float _858 = (_853 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_853);
        float _867 = (dot(vec3(_515, _516, _517), vec3(_858 * _850, _858 * _851, _858 * _852)) + 1.0) * 0.5;
        float _3186 = isnan(0.0) ? _867 : (isnan(_867) ? 0.0 : max(_867, 0.0));
        float _877 = sqrt(((_851 * _851) + (_850 * _850)) + (_852 * _852)) / (_847 + 9.9999997473787516355514526367188e-06);
        float _3197 = isnan(0.0) ? _877 : (isnan(_877) ? 0.0 : max(_877, 0.0));
        float _878 = isnan(1.0) ? _3197 : (isnan(_3197) ? 1.0 : min(_3197, 1.0));
        float _879 = _878 * 2.0;
        float _883 = (1.0 - _878) / (_878 + 1.0);
        float _3208 = isnan(0.0) ? _883 : (isnan(_883) ? 0.0 : max(_883, 0.0));
        float _884 = isnan(1.0) ? _3208 : (isnan(_3208) ? 1.0 : min(_3208, 1.0));
        float _893 = ((((1.0 - _884) * (_879 + 2.0)) * exp2(log2(isnan(1.0) ? _3186 : (isnan(_3186) ? 1.0 : min(_3186, 1.0))) * (_879 + 1.0))) + _884) * _847;
        float _894 = _815 * 0.5;
        float _895 = _825 * 0.5;
        float _896 = _835 * 0.5;
        float _897 = dot(vec3(_894, _895, _896), vec3(_894, _895, _896));
        float _902 = (_897 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_897);
        float _910 = (dot(vec3(_515, _516, _517), vec3(_902 * _894, _902 * _895, _902 * _896)) + 1.0) * 0.5;
        float _3219 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
        float _919 = sqrt(((_895 * _895) + (_894 * _894)) + (_896 * _896)) / (_848 + 9.9999997473787516355514526367188e-06);
        float _3230 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        float _920 = isnan(1.0) ? _3230 : (isnan(_3230) ? 1.0 : min(_3230, 1.0));
        float _921 = _920 * 2.0;
        float _925 = (1.0 - _920) / (_920 + 1.0);
        float _3241 = isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0));
        float _926 = isnan(1.0) ? _3241 : (isnan(_3241) ? 1.0 : min(_3241, 1.0));
        float _935 = ((((1.0 - _926) * (_921 + 2.0)) * exp2(log2(isnan(1.0) ? _3219 : (isnan(_3219) ? 1.0 : min(_3219, 1.0))) * (_921 + 1.0))) + _926) * _848;
        float _936 = _816 * 0.5;
        float _937 = _826 * 0.5;
        float _938 = _836 * 0.5;
        float _939 = dot(vec3(_936, _937, _938), vec3(_936, _937, _938));
        float _944 = (_939 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_939);
        float _952 = (dot(vec3(_515, _516, _517), vec3(_944 * _936, _944 * _937, _944 * _938)) + 1.0) * 0.5;
        float _3252 = isnan(0.0) ? _952 : (isnan(_952) ? 0.0 : max(_952, 0.0));
        float _961 = sqrt(((_937 * _937) + (_936 * _936)) + (_938 * _938)) / (_849 + 9.9999997473787516355514526367188e-06);
        float _3263 = isnan(0.0) ? _961 : (isnan(_961) ? 0.0 : max(_961, 0.0));
        float _962 = isnan(1.0) ? _3263 : (isnan(_3263) ? 1.0 : min(_3263, 1.0));
        float _963 = _962 * 2.0;
        float _967 = (1.0 - _962) / (_962 + 1.0);
        float _3274 = isnan(0.0) ? _967 : (isnan(_967) ? 0.0 : max(_967, 0.0));
        float _968 = isnan(1.0) ? _3274 : (isnan(_3274) ? 1.0 : min(_3274, 1.0));
        float _977 = ((((1.0 - _968) * (_963 + 2.0)) * exp2(log2(isnan(1.0) ? _3252 : (isnan(_3252) ? 1.0 : min(_3252, 1.0))) * (_963 + 1.0))) + _968) * _849;
        _985 = _816;
        _987 = _815;
        _988 = _814;
        _989 = _826;
        _990 = _825;
        _991 = _824;
        _992 = _836;
        _993 = _835;
        _994 = _834;
        _995 = _849;
        _996 = _848;
        _997 = _847;
        _998 = cbModelParam._m0[36u].z * (isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0)));
        _999 = cbModelParam._m0[36u].z * (isnan(0.0) ? _935 : (isnan(_935) ? 0.0 : max(_935, 0.0)));
        _1000 = cbModelParam._m0[36u].z * (isnan(0.0) ? _977 : (isnan(_977) ? 0.0 : max(_977, 0.0)));
    }
    else
    {
        _985 = _986;
        _987 = _986;
        _988 = _986;
        _989 = _986;
        _990 = _986;
        _991 = _986;
        _992 = _986;
        _993 = _986;
        _994 = _986;
        _995 = _986;
        _996 = _986;
        _997 = _986;
        _998 = 0.0;
        _999 = 0.0;
        _1000 = 0.0;
    }
    float _1295;
    float _1296;
    float _1297;
    float _1298;
    float _1299;
    float _1300;
    float _1301;
    float _1302;
    float _1303;
    float _1304;
    float _1305;
    float _1306;
    float _1307;
    float _1308;
    float _1309;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1026 = fma(_684, cbModelParam._m0[30u].z, fma(_680, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _676));
        float _1030 = fma(_684, cbModelParam._m0[31u].z, fma(_680, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _676));
        float _1034 = fma(_684, cbModelParam._m0[32u].z, fma(_680, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _676));
        float _1057 = _676 + _515;
        float _1058 = _680 + _516;
        float _1059 = _684 + _517;
        float _1069 = fma(_1059, cbModelParam._m0[30u].z, fma(_1058, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1057)) - _1026;
        float _1070 = fma(_1059, cbModelParam._m0[31u].z, fma(_1058, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1057)) - _1030;
        float _1071 = fma(_1059, cbModelParam._m0[32u].z, fma(_1058, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1057)) - _1034;
        float _1075 = inversesqrt(dot(vec3(_1069, _1070, _1071), vec3(_1069, _1070, _1071)));
        float _1088 = ((_1075 * _1069) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1026 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1089 = ((_1075 * _1070) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1030 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1090 = ((_1075 * _1071) / cbModelParam._m0[35u].z) + ((((((_1034 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1092 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1088, _1089, _1090), 0.0);
        vec4 _1099 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1088, _1089, _1090), 0.0);
        vec4 _1106 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1088, _1089, _1090), 0.0);
        vec4 _1113 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1088, _1089, _1090), 0.0);
        float _1125 = exp2((_1092.w + (-0.5)) * 20.0) * 2.0;
        float _1126 = _1125 * (_1092.x + (-0.5));
        float _1127 = _1125 * (_1092.y + (-0.5));
        float _1128 = _1125 * (_1092.z + (-0.5));
        float _1135 = exp2((_1099.w + (-0.5)) * 20.0) * 2.0;
        float _1136 = _1135 * (_1099.x + (-0.5));
        float _1137 = _1135 * (_1099.y + (-0.5));
        float _1138 = _1135 * (_1099.z + (-0.5));
        float _1145 = exp2((_1106.w + (-0.5)) * 20.0) * 2.0;
        float _1146 = _1145 * (_1106.x + (-0.5));
        float _1147 = _1145 * (_1106.y + (-0.5));
        float _1148 = _1145 * (_1106.z + (-0.5));
        float _1155 = exp2((_1113.w + (-0.5)) * 20.0) * 2.0;
        float _1156 = _1155 * (_1113.x + (-0.5));
        float _1157 = _1155 * (_1113.y + (-0.5));
        float _1158 = _1155 * (_1113.z + (-0.5));
        float _1159 = isnan(0.0) ? _1156 : (isnan(_1156) ? 0.0 : max(_1156, 0.0));
        float _1160 = isnan(0.0) ? _1157 : (isnan(_1157) ? 0.0 : max(_1157, 0.0));
        float _1161 = isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0));
        float _1162 = _1126 * 0.5;
        float _1163 = _1136 * 0.5;
        float _1164 = _1146 * 0.5;
        float _1165 = dot(vec3(_1162, _1163, _1164), vec3(_1162, _1163, _1164));
        float _1170 = (_1165 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1165);
        float _1178 = (dot(vec3(_515, _516, _517), vec3(_1170 * _1162, _1170 * _1163, _1170 * _1164)) + 1.0) * 0.5;
        float _3315 = isnan(0.0) ? _1178 : (isnan(_1178) ? 0.0 : max(_1178, 0.0));
        float _1187 = sqrt(((_1163 * _1163) + (_1162 * _1162)) + (_1164 * _1164)) / (_1159 + 9.9999997473787516355514526367188e-06);
        float _3326 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1188 = isnan(1.0) ? _3326 : (isnan(_3326) ? 1.0 : min(_3326, 1.0));
        float _1189 = _1188 * 2.0;
        float _1193 = (1.0 - _1188) / (_1188 + 1.0);
        float _3337 = isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0));
        float _1194 = isnan(1.0) ? _3337 : (isnan(_3337) ? 1.0 : min(_3337, 1.0));
        float _1203 = ((((1.0 - _1194) * (_1189 + 2.0)) * exp2(log2(isnan(1.0) ? _3315 : (isnan(_3315) ? 1.0 : min(_3315, 1.0))) * (_1189 + 1.0))) + _1194) * _1159;
        float _1204 = _1127 * 0.5;
        float _1205 = _1137 * 0.5;
        float _1206 = _1147 * 0.5;
        float _1207 = dot(vec3(_1204, _1205, _1206), vec3(_1204, _1205, _1206));
        float _1212 = (_1207 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1207);
        float _1220 = (dot(vec3(_515, _516, _517), vec3(_1212 * _1204, _1212 * _1205, _1212 * _1206)) + 1.0) * 0.5;
        float _3348 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1229 = sqrt(((_1205 * _1205) + (_1204 * _1204)) + (_1206 * _1206)) / (_1160 + 9.9999997473787516355514526367188e-06);
        float _3359 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
        float _1230 = isnan(1.0) ? _3359 : (isnan(_3359) ? 1.0 : min(_3359, 1.0));
        float _1231 = _1230 * 2.0;
        float _1235 = (1.0 - _1230) / (_1230 + 1.0);
        float _3370 = isnan(0.0) ? _1235 : (isnan(_1235) ? 0.0 : max(_1235, 0.0));
        float _1236 = isnan(1.0) ? _3370 : (isnan(_3370) ? 1.0 : min(_3370, 1.0));
        float _1245 = ((((1.0 - _1236) * (_1231 + 2.0)) * exp2(log2(isnan(1.0) ? _3348 : (isnan(_3348) ? 1.0 : min(_3348, 1.0))) * (_1231 + 1.0))) + _1236) * _1160;
        float _1246 = _1128 * 0.5;
        float _1247 = _1138 * 0.5;
        float _1248 = _1148 * 0.5;
        float _1249 = dot(vec3(_1246, _1247, _1248), vec3(_1246, _1247, _1248));
        float _1254 = (_1249 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1249);
        float _1262 = (dot(vec3(_515, _516, _517), vec3(_1254 * _1246, _1254 * _1247, _1254 * _1248)) + 1.0) * 0.5;
        float _3381 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
        float _1271 = sqrt(((_1247 * _1247) + (_1246 * _1246)) + (_1248 * _1248)) / (_1161 + 9.9999997473787516355514526367188e-06);
        float _3392 = isnan(0.0) ? _1271 : (isnan(_1271) ? 0.0 : max(_1271, 0.0));
        float _1272 = isnan(1.0) ? _3392 : (isnan(_3392) ? 1.0 : min(_3392, 1.0));
        float _1273 = _1272 * 2.0;
        float _1277 = (1.0 - _1272) / (_1272 + 1.0);
        float _3403 = isnan(0.0) ? _1277 : (isnan(_1277) ? 0.0 : max(_1277, 0.0));
        float _1278 = isnan(1.0) ? _3403 : (isnan(_3403) ? 1.0 : min(_3403, 1.0));
        float _1287 = ((((1.0 - _1278) * (_1273 + 2.0)) * exp2(log2(isnan(1.0) ? _3381 : (isnan(_3381) ? 1.0 : min(_3381, 1.0))) * (_1273 + 1.0))) + _1278) * _1161;
        _1295 = _1128;
        _1296 = _1127;
        _1297 = _1126;
        _1298 = _1138;
        _1299 = _1137;
        _1300 = _1136;
        _1301 = _1148;
        _1302 = _1147;
        _1303 = _1146;
        _1304 = _1161;
        _1305 = _1160;
        _1306 = _1159;
        _1307 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0)));
        _1308 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0)));
        _1309 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0)));
    }
    else
    {
        _1295 = _986;
        _1296 = _986;
        _1297 = _986;
        _1298 = _986;
        _1299 = _986;
        _1300 = _986;
        _1301 = _986;
        _1302 = _986;
        _1303 = _986;
        _1304 = _986;
        _1305 = _986;
        _1306 = _986;
        _1307 = 0.0;
        _1308 = 0.0;
        _1309 = 0.0;
    }
    float _1319 = (cbModelParam._m0[1u].x * (_1307 - _998)) + _998;
    float _1320 = (cbModelParam._m0[1u].x * (_1308 - _999)) + _999;
    float _1321 = (cbModelParam._m0[1u].x * (_1309 - _1000)) + _1000;
    float _1342 = fma(_1321, cbSceneParam._m0[89u].z, fma(_1320, cbSceneParam._m0[89u].y, _1319 * cbSceneParam._m0[89u].x));
    float _1345 = fma(_1321, cbSceneParam._m0[90u].z, fma(_1320, cbSceneParam._m0[90u].y, _1319 * cbSceneParam._m0[90u].x));
    float _1348 = fma(_1321, cbSceneParam._m0[91u].z, fma(_1320, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1319));
    float _1363 = _623 * 0.5;
    float _1364 = _624 * 0.5;
    float _1365 = _625 * 0.5;
    float _1366 = dot(vec4(_1363, _1364, _1365, 1.0), vec4(_1297, _1300, _1303, _1306));
    float _1369 = dot(vec4(_1363, _1364, _1365, 1.0), vec4(_1296, _1299, _1302, _1305));
    float _1372 = dot(vec4(_1363, _1364, _1365, 1.0), vec4(_1295, _1298, _1301, _1304));
    float _1406;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1379 = dot(vec4(_1363, _1364, _1365, 1.0), vec4(_985, _989, _992, _995));
        float _1383 = dot(vec4(_1363, _1364, _1365, 1.0), vec4(_987, _990, _993, _996));
        float _1387 = dot(vec4(_1363, _1364, _1365, 1.0), vec4(_988, _991, _994, _997));
        float _1394 = dot(vec4(cbModelParam._m0[39u]), vec4(_1363, _1364, _1365, 1.0));
        _1406 = dot(vec3(isnan(0.0) ? _1387 : (isnan(_1387) ? 0.0 : max(_1387, 0.0)), isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0)), isnan(0.0) ? _1379 : (isnan(_1379) ? 0.0 : max(_1379, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1394) ? 0.0 : (isnan(0.0) ? _1394 : max(0.0, _1394))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1406 = 1.0;
    }
    float _1417;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1408 = dot(vec4(cbModelParam._m0[40u]), vec4(_1363, _1364, _1365, 1.0));
        _1417 = dot(vec3(isnan(0.0) ? _1366 : (isnan(_1366) ? 0.0 : max(_1366, 0.0)), isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0)), isnan(0.0) ? _1372 : (isnan(_1372) ? 0.0 : max(_1372, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1408) ? 0.0 : (isnan(0.0) ? _1408 : max(0.0, _1408))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1417 = 1.0;
    }
    float _1421 = (_1417 * cbModelParam._m0[1u].x) + (_1406 * (1.0 - cbModelParam._m0[1u].x));
    float _1431 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _518);
    float _1432 = isnan(_1431) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1431 : min(cbModelParam._m0[25u].z, _1431));
    float _1514;
    float _1516;
    float _1518;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1481 = fma(_684, cbModelParam._m0[13u].z, fma(_680, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _676)) + cbModelParam._m0[13u].w;
        float _1485 = fma(_684, cbModelParam._m0[14u].z, fma(_680, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _676)) + cbModelParam._m0[14u].w;
        float _1489 = fma(_684, cbModelParam._m0[15u].z, fma(_680, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _676)) + cbModelParam._m0[15u].w;
        float _1492 = fma(_625, cbModelParam._m0[13u].z, fma(_624, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _623));
        float _1495 = fma(_625, cbModelParam._m0[14u].z, fma(_624, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _623));
        float _1498 = fma(_625, cbModelParam._m0[15u].z, fma(_624, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _623));
        float _1526;
        if (_1492 > 0.0)
        {
            _1526 = abs((1.0 - _1481) / _1492);
        }
        else
        {
            float frontier_phi_22_20_ladder;
            if (_1492 < 0.0)
            {
                frontier_phi_22_20_ladder = abs((_1481 + 1.0) / _1492);
            }
            else
            {
                frontier_phi_22_20_ladder = 5000.0;
            }
            _1526 = frontier_phi_22_20_ladder;
        }
        float _1873;
        if (_1495 > 0.0)
        {
            _1873 = abs((1.0 - _1485) / _1495);
        }
        else
        {
            float frontier_phi_31_27_ladder;
            if (_1495 < 0.0)
            {
                frontier_phi_31_27_ladder = abs((_1485 + 1.0) / _1495);
            }
            else
            {
                frontier_phi_31_27_ladder = 5000.0;
            }
            _1873 = frontier_phi_31_27_ladder;
        }
        float _2189;
        if (_1498 > 0.0)
        {
            _2189 = abs((1.0 - _1489) / _1498);
        }
        else
        {
            float frontier_phi_45_38_ladder;
            if (_1498 < 0.0)
            {
                frontier_phi_45_38_ladder = abs((_1489 + 1.0) / _1498);
            }
            else
            {
                frontier_phi_45_38_ladder = 5000.0;
            }
            _2189 = frontier_phi_45_38_ladder;
        }
        float _2191 = isnan(_1873) ? _1526 : (isnan(_1526) ? _1873 : min(_1526, _1873));
        float _2192 = isnan(_2189) ? _2191 : (isnan(_2191) ? _2189 : min(_2191, _2189));
        float _2196 = (_2192 * _1492) + _1481;
        float _2197 = (_2192 * _1495) + _1485;
        float _2198 = (_2192 * _1498) + _1489;
        float _2199 = _2192 * 9.9999997473787516355514526367188e-05;
        float _2200 = (-1.0) - _2199;
        float _2202 = _2199 + 1.0;
        float frontier_phi_21_45_ladder;
        float frontier_phi_21_45_ladder_1;
        float frontier_phi_21_45_ladder_2;
        if ((_2198 > _2202) || ((_2198 < _2200) || ((_2197 > _2202) || ((_2197 < _2200) || ((_2196 < _2200) || (_2196 > _2202))))))
        {
            frontier_phi_21_45_ladder = 0.0;
            frontier_phi_21_45_ladder_1 = 0.0;
            frontier_phi_21_45_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2324 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2198, cbModelParam._m0[9u].z, fma(_2197, cbModelParam._m0[9u].y, _2196 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2198, cbModelParam._m0[10u].z, fma(_2197, cbModelParam._m0[10u].y, _2196 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2198, cbModelParam._m0[11u].z, fma(_2197, cbModelParam._m0[11u].y, _2196 * cbModelParam._m0[11u].x))), _1432);
            frontier_phi_21_45_ladder = _2324.z * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_1 = _2324.y * cbModelParam._m0[1u].y;
            frontier_phi_21_45_ladder_2 = _2324.x * cbModelParam._m0[1u].y;
        }
        _1514 = frontier_phi_21_45_ladder_2;
        _1516 = frontier_phi_21_45_ladder_1;
        _1518 = frontier_phi_21_45_ladder;
    }
    else
    {
        vec4 _1502 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_623, _624, _625), _1432);
        _1514 = _1502.x * cbModelParam._m0[1u].y;
        _1516 = _1502.y * cbModelParam._m0[1u].y;
        _1518 = _1502.z * cbModelParam._m0[1u].y;
    }
    float _1522 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _518);
    float _1523 = isnan(_1522) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1522 : min(cbModelParam._m0[25u].w, _1522));
    float _1613;
    float _1615;
    float _1617;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1577 = fma(_684, cbModelParam._m0[21u].z, fma(_680, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _676)) + cbModelParam._m0[21u].w;
        float _1581 = fma(_684, cbModelParam._m0[22u].z, fma(_680, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _676)) + cbModelParam._m0[22u].w;
        float _1585 = fma(_684, cbModelParam._m0[23u].z, fma(_680, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _676)) + cbModelParam._m0[23u].w;
        float _1588 = fma(_625, cbModelParam._m0[21u].z, fma(_624, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _623));
        float _1591 = fma(_625, cbModelParam._m0[22u].z, fma(_624, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _623));
        float _1594 = fma(_625, cbModelParam._m0[23u].z, fma(_624, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _623));
        float _1878;
        if (_1588 > 0.0)
        {
            _1878 = abs((1.0 - _1577) / _1588);
        }
        else
        {
            float frontier_phi_33_29_ladder;
            if (_1588 < 0.0)
            {
                frontier_phi_33_29_ladder = abs((_1577 + 1.0) / _1588);
            }
            else
            {
                frontier_phi_33_29_ladder = 5000.0;
            }
            _1878 = frontier_phi_33_29_ladder;
        }
        float _2215;
        if (_1591 > 0.0)
        {
            _2215 = abs((1.0 - _1581) / _1591);
        }
        else
        {
            float frontier_phi_47_40_ladder;
            if (_1591 < 0.0)
            {
                frontier_phi_47_40_ladder = abs((_1581 + 1.0) / _1591);
            }
            else
            {
                frontier_phi_47_40_ladder = 5000.0;
            }
            _2215 = frontier_phi_47_40_ladder;
        }
        float _2384;
        if (_1594 > 0.0)
        {
            _2384 = abs((1.0 - _1585) / _1594);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1594 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1585 + 1.0) / _1594);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2384 = frontier_phi_61_56_ladder;
        }
        float _2386 = isnan(_2215) ? _1878 : (isnan(_1878) ? _2215 : min(_1878, _2215));
        float _2387 = isnan(_2384) ? _2386 : (isnan(_2386) ? _2384 : min(_2386, _2384));
        float _2391 = (_2387 * _1588) + _1577;
        float _2392 = (_2387 * _1591) + _1581;
        float _2393 = (_2387 * _1594) + _1585;
        float _2394 = _2387 * 9.9999997473787516355514526367188e-05;
        float _2395 = (-1.0) - _2394;
        float _2397 = _2394 + 1.0;
        float frontier_phi_30_61_ladder;
        float frontier_phi_30_61_ladder_1;
        float frontier_phi_30_61_ladder_2;
        if ((_2393 > _2397) || ((_2393 < _2395) || ((_2392 > _2397) || ((_2392 < _2395) || ((_2391 < _2395) || (_2391 > _2397))))))
        {
            frontier_phi_30_61_ladder = 0.0;
            frontier_phi_30_61_ladder_1 = 0.0;
            frontier_phi_30_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2626 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2393, cbModelParam._m0[17u].z, fma(_2392, cbModelParam._m0[17u].y, _2391 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2393, cbModelParam._m0[18u].z, fma(_2392, cbModelParam._m0[18u].y, _2391 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2393, cbModelParam._m0[19u].z, fma(_2392, cbModelParam._m0[19u].y, _2391 * cbModelParam._m0[19u].x))), _1523);
            frontier_phi_30_61_ladder = _2626.z * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_1 = _2626.y * cbModelParam._m0[1u].z;
            frontier_phi_30_61_ladder_2 = _2626.x * cbModelParam._m0[1u].z;
        }
        _1613 = frontier_phi_30_61_ladder_2;
        _1615 = frontier_phi_30_61_ladder_1;
        _1617 = frontier_phi_30_61_ladder;
    }
    else
    {
        vec4 _1597 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_623, _624, _625), _1523);
        _1613 = _1597.x * cbModelParam._m0[1u].z;
        _1615 = _1597.y * cbModelParam._m0[1u].z;
        _1617 = _1597.z * cbModelParam._m0[1u].z;
    }
    float _1629 = ((((1.0 - _644) * ((_631 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_644 * _631)) * _615;
    float _1630 = _1629 * ((cbModelParam._m0[1u].w * (_1613 - _1514)) + _1514);
    float _1631 = _1629 * ((cbModelParam._m0[1u].w * (_1615 - _1516)) + _1516);
    float _1632 = _1629 * ((cbModelParam._m0[1u].w * (_1617 - _1518)) + _1518);
    float _1635 = fma(_1632, cbSceneParam._m0[89u].z, fma(_1631, cbSceneParam._m0[89u].y, _1630 * cbSceneParam._m0[89u].x));
    float _1638 = fma(_1632, cbSceneParam._m0[90u].z, fma(_1631, cbSceneParam._m0[90u].y, _1630 * cbSceneParam._m0[90u].x));
    float _1641 = fma(_1632, cbSceneParam._m0[91u].z, fma(_1631, cbSceneParam._m0[91u].y, _1630 * cbSceneParam._m0[91u].x));
    uvec4 _1651 = floatBitsToUint(cbInstanceData._m0[_589 + 5u]);
    uint _1653 = _1651.x * 14u;
    uint _1654 = _1653 + 13u;
    float _1659 = _615 + (-1.0);
    float _1662 = (cbLight._m0[_1654].x * _1659) + 1.0;
    float _1663 = (cbLight._m0[_1654].y * _1659) + 1.0;
    uint _1664 = _1653 + 5u;
    float _1670 = isnan(1.0) ? _1663 : (isnan(_1663) ? 1.0 : min(_1663, 1.0));
    uint _1674 = _1653 + 4u;
    float _1680 = isnan(1.0) ? _1662 : (isnan(_1662) ? 1.0 : min(_1662, 1.0));
    uint _1684 = _1653 | 1u;
    float _1695 = dot(vec3(cbLight._m0[_1653].xyz), vec3(_515, _516, _517));
    float _1698 = dot(vec3(cbLight._m0[_1684].xyz), vec3(_515, _516, _517));
    float _3539 = isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0));
    float _3550 = isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0));
    float _1703 = (isnan(1.0) ? _3539 : (isnan(_3539) ? 1.0 : min(_3539, 1.0))) * 0.3183098733425140380859375;
    float _1705 = (isnan(1.0) ? _3550 : (isnan(_3550) ? 1.0 : min(_3550, 1.0))) * 0.3183098733425140380859375;
    float _1712 = ((cbLight._m0[_1664].x * _1670) * _1705) + ((cbLight._m0[_1674].x * _1680) * _1703);
    float _1713 = ((_1670 * cbLight._m0[_1664].y) * _1705) + ((_1680 * cbLight._m0[_1674].y) * _1703);
    float _1714 = ((_1670 * cbLight._m0[_1664].z) * _1705) + ((_1680 * cbLight._m0[_1674].z) * _1703);
    uint _1716 = _1653 + 8u;
    float _1729 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1653].w)) * _518) * 0.949999988079071044921875);
    float _1730 = _1729 * _1729;
    float _1731 = cbLight._m0[_1653].x + _542;
    float _1732 = cbLight._m0[_1653].y + _543;
    float _1733 = cbLight._m0[_1653].z + _544;
    float _1737 = inversesqrt(dot(vec3(_1731, _1732, _1733), vec3(_1731, _1732, _1733)));
    float _1738 = _1737 * _1731;
    float _1739 = _1737 * _1732;
    float _1740 = _1737 * _1733;
    float _1741 = dot(vec3(_515, _516, _517), vec3(cbLight._m0[_1653].xyz));
    float _3561 = isnan(0.0) ? _1741 : (isnan(_1741) ? 0.0 : max(_1741, 0.0));
    float _1744 = isnan(1.0) ? _3561 : (isnan(_3561) ? 1.0 : min(_3561, 1.0));
    float _3572 = isnan(0.0) ? _616 : (isnan(_616) ? 0.0 : max(_616, 0.0));
    float _1745 = isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0));
    float _1746 = dot(vec3(_515, _516, _517), vec3(_1738, _1739, _1740));
    float _3583 = isnan(0.0) ? _1746 : (isnan(_1746) ? 0.0 : max(_1746, 0.0));
    float _1749 = isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0));
    float _1750 = dot(vec3(cbLight._m0[_1653].xyz), vec3(_1738, _1739, _1740));
    float _3594 = isnan(0.0) ? _1750 : (isnan(_1750) ? 0.0 : max(_1750, 0.0));
    float _1754 = _1730 * _1730;
    float _1758 = ((_1749 * _1749) * (_1754 + (-1.0))) + 1.0;
    float _1769 = (exp2(log2(1.0 - (isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1770 = 1.0 - _1730;
    float _1781 = (0.5 / (((_1745 * ((_1744 * _1770) + _1730)) + 9.9999999392252902907785028219223e-09) + (((_1745 * _1770) + _1730) * _1744))) * _1744;
    float _3605 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
    float _1783 = (isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0))) * (_1754 / ((_1758 * _1758) * 3.141590118408203125));
    uint _1794 = _1653 + 9u;
    float _1805 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1684].w)) * _518) * 0.949999988079071044921875);
    float _1806 = _1805 * _1805;
    float _1807 = cbLight._m0[_1684].x + _542;
    float _1808 = cbLight._m0[_1684].y + _543;
    float _1809 = cbLight._m0[_1684].z + _544;
    float _1813 = inversesqrt(dot(vec3(_1807, _1808, _1809), vec3(_1807, _1808, _1809)));
    float _1814 = _1813 * _1807;
    float _1815 = _1813 * _1808;
    float _1816 = _1813 * _1809;
    float _1817 = dot(vec3(_515, _516, _517), vec3(cbLight._m0[_1684].xyz));
    float _3616 = isnan(0.0) ? _1817 : (isnan(_1817) ? 0.0 : max(_1817, 0.0));
    float _1820 = isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0));
    float _1821 = dot(vec3(_515, _516, _517), vec3(_1814, _1815, _1816));
    float _3627 = isnan(0.0) ? _1821 : (isnan(_1821) ? 0.0 : max(_1821, 0.0));
    float _1824 = isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0));
    float _1825 = dot(vec3(cbLight._m0[_1684].xyz), vec3(_1814, _1815, _1816));
    float _3638 = isnan(0.0) ? _1825 : (isnan(_1825) ? 0.0 : max(_1825, 0.0));
    float _1829 = _1806 * _1806;
    float _1833 = ((_1824 * _1824) * (_1829 + (-1.0))) + 1.0;
    float _1842 = (exp2(log2(1.0 - (isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1843 = 1.0 - _1806;
    float _1853 = (0.5 / (((_1745 * ((_1820 * _1843) + _1806)) + 9.9999999392252902907785028219223e-09) + (((_1745 * _1843) + _1806) * _1820))) * _1820;
    float _3649 = isnan(0.0) ? _1853 : (isnan(_1853) ? 0.0 : max(_1853, 0.0));
    float _1855 = (isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0))) * (_1829 / ((_1833 * _1833) * 3.141590118408203125));
    float _1865 = (((_1842 * cbLight._m0[_1794].x) * _1855) * _1670) + (((_1769 * cbLight._m0[_1716].x) * _1783) * _1680);
    float _1866 = (((_1842 * cbLight._m0[_1794].y) * _1855) * _1670) + (((_1769 * cbLight._m0[_1716].y) * _1783) * _1680);
    float _1867 = (((_1842 * cbLight._m0[_1794].z) * _1855) * _1670) + (((_1769 * cbLight._m0[_1716].z) * _1783) * _1680);
    float _1982;
    float _1984;
    float _1986;
    float _1988;
    float _1990;
    float _1992;
    if (_1651.y == 0u)
    {
        float _1922 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1923 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1922;
        float _1924 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1922;
        float _1925 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1922;
        uvec4 _1937 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1938 = _1937.x;
        uint _1949 = uint((float(_1937.y) * floor(float(uint(cbSceneParam._m0[85u].y * _551) / _1938))) + floor(float(uint(cbSceneParam._m0[85u].x * _550) / _1938)));
        float _1959 = (log2(_1925 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1960 = isnan(0.0) ? _1959 : (isnan(_1959) ? 0.0 : max(_1959, 0.0));
        uint _1963 = uint(isnan(14.0) ? _1960 : (isnan(_1960) ? 14.0 : min(_1960, 14.0)));
        uvec4 _1968 = texelFetch(g_lightClusterGridBuffer, int(((_1963 << 2u) + (_1949 << 6u)) >> 2u));
        uint _1969 = _1968.x;
        uint _1970 = _1937.z;
        float _2076;
        float _2078;
        float _2080;
        float _2082;
        float _2084;
        float _2086;
        if (((((1u << ((_1970 >> 4u) & 15u)) + 4294967295u) & _1969) == 0u) || ((_1970 & 240u) == 0u))
        {
            _2076 = 0.0;
            _2078 = 0.0;
            _2080 = 0.0;
            _2082 = 0.0;
            _2084 = 0.0;
            _2086 = 0.0;
        }
        else
        {
            float _2077;
            float _2079;
            float _2081;
            float _2083;
            float _2085;
            float _2087;
            float _2252 = 0.0;
            float _2253 = 0.0;
            float _2254 = 0.0;
            float _2255 = 0.0;
            float _2256 = 0.0;
            float _2257 = 0.0;
            uint _2258 = 0u;
            uint _2267;
            bool _2268;
            for (;;)
            {
                _2267 = texelFetch(g_lightClassification, int((((_1963 << 5u) + (_1949 << 9u)) + (_2258 << 2u)) >> 2u)).x;
                _2268 = _2267 == 0u;
                float frontier_phi_58_pred;
                float frontier_phi_58_pred_1;
                float frontier_phi_58_pred_2;
                float frontier_phi_58_pred_3;
                float frontier_phi_58_pred_4;
                float frontier_phi_58_pred_5;
                if (_2268)
                {
                    frontier_phi_58_pred = _2253;
                    frontier_phi_58_pred_1 = _2257;
                    frontier_phi_58_pred_2 = _2256;
                    frontier_phi_58_pred_3 = _2255;
                    frontier_phi_58_pred_4 = _2254;
                    frontier_phi_58_pred_5 = _2252;
                }
                else
                {
                    float _2427;
                    float _2428;
                    float _2429;
                    float _2430;
                    float _2431;
                    float _2432;
                    uint _2433;
                    _2427 = _2252;
                    _2428 = _2253;
                    _2429 = _2254;
                    _2430 = _2255;
                    _2431 = _2256;
                    _2432 = _2257;
                    _2433 = _2267;
                    float _2333;
                    float _2334;
                    float _2335;
                    float _2336;
                    float _2337;
                    float _2338;
                    for (;;)
                    {
                        uint _2437 = uint(findLSB(_2433)) + (_2258 << 5u);
                        uint _2434 = (_2433 + 4294967295u) & _2433;
                        uint _2439 = _2437 * 48u;
                        vec4 _2453 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2439)).x, texelFetch(g_PointLightRenderingBuffer, int(_2439 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2439 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2439 + 3u)).x));
                        uint _2459 = (_2437 * 48u) + 4u;
                        vec4 _2472 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2459)).x, texelFetch(g_PointLightRenderingBuffer, int(_2459 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2459 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2459 + 3u)).x));
                        uint _2478 = (_2437 * 48u) + 8u;
                        vec3 _2489 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2478)).x, texelFetch(g_PointLightRenderingBuffer, int(_2478 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2478 + 2u)).x));
                        float _2493 = _2453.x - _1923;
                        float _2494 = _2453.y - _1924;
                        float _2495 = _2453.z - _1925;
                        float _2496 = dot(vec3(_2493, _2494, _2495), vec3(_2493, _2494, _2495));
                        float _2499 = inversesqrt(_2496);
                        float _2500 = _2499 * _2493;
                        float _2501 = _2499 * _2494;
                        float _2502 = _2499 * _2495;
                        float _2503 = dot(vec3(_570, _573, _576), vec3(_2500, _2501, _2502));
                        float _2508 = 1.0 - (_2496 * _2453.w);
                        float _3670 = isnan(0.0) ? _2508 : (isnan(_2508) ? 0.0 : max(_2508, 0.0));
                        float _2509 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
                        float _2510 = sqrt(_2496) * _2472.w;
                        float _2513 = 1.39999997615814208984375 / (_2510 + 1.39999997615814208984375);
                        float _2514 = _2513 * _2513;
                        float _2517 = ((1.0 - _2514) * _2503) + _2514;
                        float _2520 = _2510 * _2510;
                        float _2524 = ((isnan(0.0) ? _2517 : (isnan(_2517) ? 0.0 : max(_2517, 0.0))) * _2509) / ((_2520 * 0.699999988079071044921875) + 1.0);
                        float _2528 = (-0.0) - _1923;
                        float _2529 = (-0.0) - _1924;
                        float _2530 = (-0.0) - _1925;
                        float _2534 = inversesqrt(dot(vec3(_2528, _2529, _2530), vec3(_2528, _2529, _2530)));
                        float _2535 = _2534 * _2528;
                        float _2536 = _2534 * _2529;
                        float _2537 = _2534 * _2530;
                        float _2545 = exp2(log2(1.0 / ((_2520 * 3.5) + 5.0)) * 0.25);
                        float _2546 = 1.0 - _631;
                        float _2553 = sqrt(1.0 - ((1.0 - (_2546 * _2546)) * (1.0 - (_2545 * _2545))));
                        float _2554 = _2553 * _2553;
                        float _2555 = _2554 * _2554;
                        float _2556 = _2535 + _2500;
                        float _2557 = _2536 + _2501;
                        float _2558 = _2537 + _2502;
                        float _2562 = inversesqrt(dot(vec3(_2556, _2557, _2558), vec3(_2556, _2557, _2558)));
                        float _2566 = dot(vec3(_570, _573, _576), vec3(_2535, _2536, _2537));
                        float _3686 = isnan(0.0) ? _2566 : (isnan(_2566) ? 0.0 : max(_2566, 0.0));
                        float _2569 = isnan(1.0) ? _3686 : (isnan(_3686) ? 1.0 : min(_3686, 1.0));
                        float _2570 = dot(vec3(_570, _573, _576), vec3(_2562 * _2556, _2562 * _2557, _2562 * _2558));
                        float _3697 = isnan(0.0) ? _2570 : (isnan(_2570) ? 0.0 : max(_2570, 0.0));
                        float _2573 = isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0));
                        float _2577 = ((_2573 * _2573) * (_2555 + (-1.0))) + 1.0;
                        float _2578 = _2513 * _2554;
                        float _2579 = _2578 * _2578;
                        float _2582 = ((1.0 - _2579) * _2503) + _2579;
                        float _3708 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
                        float _2583 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
                        float _2584 = 1.0 - _2554;
                        float _2594 = (0.5 / (((_2583 * ((_2569 * _2584) + _2554)) + 9.9999999392252902907785028219223e-09) + (((_2583 * _2584) + _2554) * _2569))) * _2583;
                        float _3719 = isnan(0.0) ? _2594 : (isnan(_2594) ? 0.0 : max(_2594, 0.0));
                        float _2605 = (((_2555 * 3.1415927410125732421875) * (isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0)))) / ((_2577 * _2577) * ((_2520 * 2.1991131305694580078125) + 3.141590118408203125))) * _2509;
                        _2336 = (_2524 * _2472.x) + _2430;
                        _2337 = (_2524 * _2472.y) + _2431;
                        _2338 = (_2524 * _2472.z) + _2432;
                        _2333 = (_2605 * _2489.x) + _2427;
                        _2334 = (_2605 * _2489.y) + _2428;
                        _2335 = (_2605 * _2489.z) + _2429;
                        if (_2434 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2427 = _2333;
                            _2428 = _2334;
                            _2429 = _2335;
                            _2430 = _2336;
                            _2431 = _2337;
                            _2432 = _2338;
                            _2433 = _2434;
                        }
                    }
                    frontier_phi_58_pred = _2334;
                    frontier_phi_58_pred_1 = _2338;
                    frontier_phi_58_pred_2 = _2337;
                    frontier_phi_58_pred_3 = _2336;
                    frontier_phi_58_pred_4 = _2335;
                    frontier_phi_58_pred_5 = _2333;
                }
                _2079 = frontier_phi_58_pred;
                _2087 = frontier_phi_58_pred_1;
                _2085 = frontier_phi_58_pred_2;
                _2083 = frontier_phi_58_pred_3;
                _2081 = frontier_phi_58_pred_4;
                _2077 = frontier_phi_58_pred_5;
                uint _2259 = _2258 + 1u;
                if (_2259 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2252 = _2077;
                    _2253 = _2079;
                    _2254 = _2081;
                    _2255 = _2083;
                    _2256 = _2085;
                    _2257 = _2087;
                    _2258 = _2259;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2076 = _2077;
            _2078 = _2079;
            _2080 = _2081;
            _2082 = _2083;
            _2084 = _2085;
            _2086 = _2087;
        }
        uvec4 _2090 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2091 = _2090.z;
        uint _2093 = (_2091 >> 8u) & 15u;
        float _2220;
        float _2222;
        float _2224;
        float _2226;
        float _2228;
        float _2230;
        if (((4294967295u << _2093) & _1969) == 0u)
        {
            _2220 = _2076;
            _2222 = _2078;
            _2224 = _2080;
            _2226 = _2082;
            _2228 = _2084;
            _2230 = _2086;
        }
        else
        {
            float _2245 = inversesqrt(dot(vec3(_1923, _1924, _1925), vec3(_1923, _1924, _1925)));
            float _2246 = _2245 * _1923;
            float _2247 = _2245 * _1924;
            float _2248 = _2245 * _1925;
            float frontier_phi_49_50_ladder;
            float frontier_phi_49_50_ladder_1;
            float frontier_phi_49_50_ladder_2;
            float frontier_phi_49_50_ladder_3;
            float frontier_phi_49_50_ladder_4;
            float frontier_phi_49_50_ladder_5;
            if (_2093 < ((_2091 >> 12u) & 15u))
            {
                float _2221;
                float _2223;
                float _2225;
                float _2227;
                float _2229;
                float _2231;
                float _2410 = _2076;
                float _2411 = _2078;
                float _2412 = _2080;
                float _2413 = _2082;
                float _2414 = _2084;
                float _2415 = _2086;
                uint _2416 = _2093;
                uint _2425;
                bool _2426;
                for (;;)
                {
                    _2425 = texelFetch(g_lightClassification, int((((_1963 << 5u) + (_1949 << 9u)) + (_2416 << 2u)) >> 2u)).x;
                    _2426 = _2425 == 0u;
                    float frontier_phi_67_pred;
                    float frontier_phi_67_pred_1;
                    float frontier_phi_67_pred_2;
                    float frontier_phi_67_pred_3;
                    float frontier_phi_67_pred_4;
                    float frontier_phi_67_pred_5;
                    if (_2426)
                    {
                        frontier_phi_67_pred = _2415;
                        frontier_phi_67_pred_1 = _2414;
                        frontier_phi_67_pred_2 = _2413;
                        frontier_phi_67_pred_3 = _2412;
                        frontier_phi_67_pred_4 = _2411;
                        frontier_phi_67_pred_5 = _2410;
                    }
                    else
                    {
                        float _2631;
                        float _2632;
                        float _2633;
                        float _2634;
                        float _2635;
                        float _2636;
                        float _2924;
                        float _2925;
                        float _2926;
                        float _2927;
                        float _2928;
                        float _2929;
                        float _2644 = _2410;
                        float _2645 = _2411;
                        float _2646 = _2412;
                        float _2647 = _2413;
                        float _2648 = _2414;
                        float _2649 = _2415;
                        uint _2650 = _2425;
                        uint _2651;
                        vec4 _2676;
                        float _2677;
                        vec4 _2692;
                        vec3 _2704;
                        vec4 _2719;
                        vec4 _2734;
                        float _2780;
                        bool _2781;
                        for (;;)
                        {
                            uint _2661 = ((_2416 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2650));
                            _2651 = (_2650 + 4294967295u) & _2650;
                            uint _2663 = _2661 * 40u;
                            _2676 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2663)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2663 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2663 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2663 + 3u)).x));
                            _2677 = _2676.w;
                            uint _2679 = (_2661 * 40u) + 4u;
                            _2692 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2679)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2679 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2679 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2679 + 3u)).x));
                            uint _2694 = (_2661 * 40u) + 8u;
                            _2704 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2694)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2694 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2694 + 2u)).x));
                            uint _2706 = (_2661 * 40u) + 16u;
                            _2719 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2706)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2706 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2706 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2706 + 3u)).x));
                            uint _2721 = (_2661 * 40u) + 20u;
                            _2734 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2721)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2721 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2721 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2721 + 3u)).x));
                            uint _2736 = (_2661 * 40u) + 24u;
                            vec4 _2749 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2736)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2736 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2736 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2736 + 3u)).x));
                            uint _2755 = (_2661 * 40u) + 28u;
                            vec4 _2768 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2755)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2755 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2755 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2755 + 3u)).x));
                            _2780 = fma(_1925, _2768.z, fma(_1924, _2768.y, _2768.x * _1923)) + _2768.w;
                            _2781 = !((fma(_1925, _2749.z, fma(_1924, _2749.y, _2749.x * _1923)) + _2749.w) <= 0.0);
                            float frontier_phi_73_pred;
                            float frontier_phi_73_pred_1;
                            float frontier_phi_73_pred_2;
                            float frontier_phi_73_pred_3;
                            float frontier_phi_73_pred_4;
                            float frontier_phi_73_pred_5;
                            if (_2781)
                            {
                                float _2808 = _2676.x - _1923;
                                float _2809 = _2676.y - _1924;
                                float _2810 = _2676.z - _1925;
                                float _2811 = dot(vec3(_2808, _2809, _2810), vec3(_2808, _2809, _2810));
                                float _2814 = inversesqrt(_2811);
                                float _2815 = _2814 * _2808;
                                float _2816 = _2814 * _2809;
                                float _2817 = _2814 * _2810;
                                float _2821 = 1.0 - (_2811 / (_2677 * _2677));
                                float _3730 = isnan(0.0) ? _2821 : (isnan(_2821) ? 0.0 : max(_2821, 0.0));
                                float _2822 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
                                float _2826 = sqrt(_2811) * _2692.w;
                                float _2828 = 1.39999997615814208984375 / (_2826 + 1.39999997615814208984375);
                                float _2829 = _2828 * _2828;
                                float _2832 = ((1.0 - _2829) * dot(vec3(_2815, _2816, _2817), vec3(_570, _573, _576))) + _2829;
                                float _2835 = _2826 * _2826;
                                float _2839 = (fma(_1925, _2719.z, fma(_1924, _2719.y, _2719.x * _1923)) + _2719.w) / _2780;
                                float _2840 = (fma(_1925, _2734.z, fma(_1924, _2734.y, _2734.x * _1923)) + _2734.w) / _2780;
                                float _2844 = 1.0 - dot(vec2(_2839, _2840), vec2(_2839, _2840));
                                float _3746 = isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0));
                                float _2845 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
                                float _2846 = _2845 * (((isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0))) * _2822) / ((_2835 * 0.699999988079071044921875) + 1.0));
                                float _2858 = exp2(log2(1.0 / ((_2835 * 3.5) + 5.0)) * 0.25);
                                float _2859 = 1.0 - _631;
                                float _2866 = sqrt(1.0 - ((1.0 - (_2859 * _2859)) * (1.0 - (_2858 * _2858))));
                                float _2867 = _2866 * _2866;
                                float _2868 = _2867 * _2867;
                                float _2869 = _2815 - _2246;
                                float _2870 = _2816 - _2247;
                                float _2871 = _2817 - _2248;
                                float _2875 = inversesqrt(dot(vec3(_2869, _2870, _2871), vec3(_2869, _2870, _2871)));
                                float _2879 = dot(vec3(_570, _573, _576), vec3((-0.0) - _2246, (-0.0) - _2247, (-0.0) - _2248));
                                float _3757 = isnan(0.0) ? _2879 : (isnan(_2879) ? 0.0 : max(_2879, 0.0));
                                float _2882 = isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0));
                                float _2883 = dot(vec3(_570, _573, _576), vec3(_2875 * _2869, _2875 * _2870, _2875 * _2871));
                                float _3768 = isnan(0.0) ? _2883 : (isnan(_2883) ? 0.0 : max(_2883, 0.0));
                                float _2886 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
                                float _2890 = ((_2886 * _2886) * (_2868 + (-1.0))) + 1.0;
                                float _2891 = _2828 * _2867;
                                float _2892 = _2891 * _2891;
                                float _2898 = ((1.0 - _2892) * dot(vec3(_570, _573, _576), vec3(_2815, _2816, _2817))) + _2892;
                                float _3779 = isnan(0.0) ? _2898 : (isnan(_2898) ? 0.0 : max(_2898, 0.0));
                                float _2899 = isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0));
                                float _2900 = 1.0 - _2867;
                                float _2910 = (0.5 / (((_2899 * ((_2882 * _2900) + _2867)) + 9.9999999392252902907785028219223e-09) + (((_2899 * _2900) + _2867) * _2882))) * _2899;
                                float _3790 = isnan(0.0) ? _2910 : (isnan(_2910) ? 0.0 : max(_2910, 0.0));
                                float _2920 = (_2845 * _2822) * (((_2868 * 3.1415927410125732421875) * (isnan(1.0) ? _3790 : (isnan(_3790) ? 1.0 : min(_3790, 1.0)))) / ((_2890 * _2890) * ((_2835 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_73_pred = _2846 * _2692.z;
                                frontier_phi_73_pred_1 = _2846 * _2692.y;
                                frontier_phi_73_pred_2 = _2846 * _2692.x;
                                frontier_phi_73_pred_3 = _2920 * _2704.z;
                                frontier_phi_73_pred_4 = _2920 * _2704.y;
                                frontier_phi_73_pred_5 = _2920 * _2704.x;
                            }
                            else
                            {
                                frontier_phi_73_pred = 0.0;
                                frontier_phi_73_pred_1 = 0.0;
                                frontier_phi_73_pred_2 = 0.0;
                                frontier_phi_73_pred_3 = 0.0;
                                frontier_phi_73_pred_4 = 0.0;
                                frontier_phi_73_pred_5 = 0.0;
                            }
                            _2929 = frontier_phi_73_pred;
                            _2928 = frontier_phi_73_pred_1;
                            _2927 = frontier_phi_73_pred_2;
                            _2926 = frontier_phi_73_pred_3;
                            _2925 = frontier_phi_73_pred_4;
                            _2924 = frontier_phi_73_pred_5;
                            _2634 = _2927 + _2647;
                            _2635 = _2928 + _2648;
                            _2636 = _2929 + _2649;
                            _2631 = _2924 + _2644;
                            _2632 = _2925 + _2645;
                            _2633 = _2926 + _2646;
                            if (_2651 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2644 = _2631;
                                _2645 = _2632;
                                _2646 = _2633;
                                _2647 = _2634;
                                _2648 = _2635;
                                _2649 = _2636;
                                _2650 = _2651;
                                continue;
                            }
                        }
                        frontier_phi_67_pred = _2636;
                        frontier_phi_67_pred_1 = _2635;
                        frontier_phi_67_pred_2 = _2634;
                        frontier_phi_67_pred_3 = _2633;
                        frontier_phi_67_pred_4 = _2632;
                        frontier_phi_67_pred_5 = _2631;
                    }
                    _2231 = frontier_phi_67_pred;
                    _2229 = frontier_phi_67_pred_1;
                    _2227 = frontier_phi_67_pred_2;
                    _2225 = frontier_phi_67_pred_3;
                    _2223 = frontier_phi_67_pred_4;
                    _2221 = frontier_phi_67_pred_5;
                    uint _2417 = _2416 + 1u;
                    if (_2417 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2410 = _2221;
                        _2411 = _2223;
                        _2412 = _2225;
                        _2413 = _2227;
                        _2414 = _2229;
                        _2415 = _2231;
                        _2416 = _2417;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_49_50_ladder = _2227;
                frontier_phi_49_50_ladder_1 = _2231;
                frontier_phi_49_50_ladder_2 = _2229;
                frontier_phi_49_50_ladder_3 = _2225;
                frontier_phi_49_50_ladder_4 = _2223;
                frontier_phi_49_50_ladder_5 = _2221;
            }
            else
            {
                frontier_phi_49_50_ladder = _2082;
                frontier_phi_49_50_ladder_1 = _2086;
                frontier_phi_49_50_ladder_2 = _2084;
                frontier_phi_49_50_ladder_3 = _2080;
                frontier_phi_49_50_ladder_4 = _2078;
                frontier_phi_49_50_ladder_5 = _2076;
            }
            _2220 = frontier_phi_49_50_ladder_5;
            _2222 = frontier_phi_49_50_ladder_4;
            _2224 = frontier_phi_49_50_ladder_3;
            _2226 = frontier_phi_49_50_ladder;
            _2228 = frontier_phi_49_50_ladder_2;
            _2230 = frontier_phi_49_50_ladder_1;
        }
        float _2235 = isnan(1.0) ? _615 : (isnan(_615) ? 1.0 : min(_615, 1.0));
        _1982 = (_2235 * _2226) + _1712;
        _1984 = (_2235 * _2228) + _1713;
        _1986 = (_2235 * _2230) + _1714;
        _1988 = ((_2220 * 0.039999999105930328369140625) * _2235) + _1865;
        _1990 = ((_2222 * 0.039999999105930328369140625) * _2235) + _1866;
        _1992 = ((_2224 * 0.039999999105930328369140625) * _2235) + _1867;
    }
    else
    {
        _1982 = _1712;
        _1984 = _1713;
        _1986 = _1714;
        _1988 = _1865;
        _1990 = _1866;
        _1992 = _1867;
    }
    uint _1998 = _591 + uint(cbMatDynParam._m0[0u].w);
    float _3806 = isnan(0.0) ? _601 : (isnan(_601) ? 0.0 : max(_601, 0.0));
    float _3817 = isnan(0.0) ? _602 : (isnan(_602) ? 0.0 : max(_602, 0.0));
    float _3828 = isnan(0.0) ? _603 : (isnan(_603) ? 0.0 : max(_603, 0.0));
    float _2023 = (((isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0))) * (_1982 + ((isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0))) * _615))) + ((_1988 + ((isnan(0.0) ? _1635 : (isnan(_1635) ? 0.0 : max(_1635, 0.0))) * _1421)) * cbPerFrame._m0[3u].x)) + (((_459.x * _279) * cbMtdParam._m0[9u].x) * cbInstanceData._m0[_1998].x);
    float _2025 = ((((_459.y * _279) * cbMtdParam._m0[9u].y) * cbInstanceData._m0[_1998].y) + ((_1990 + ((isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0))) * _1421)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * (_1984 + ((isnan(0.0) ? _1345 : (isnan(_1345) ? 0.0 : max(_1345, 0.0))) * _615)));
    float _2027 = ((((_459.z * _279) * cbMtdParam._m0[9u].z) * cbInstanceData._m0[_1998].z) + ((_1992 + ((isnan(0.0) ? _1641 : (isnan(_1641) ? 0.0 : max(_1641, 0.0))) * _1421)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))) * (_1986 + ((isnan(0.0) ? _1348 : (isnan(_1348) ? 0.0 : max(_1348, 0.0))) * _615)));
    uint _2031 = _589 + 6u;
    float _2039 = _550 / cbSceneParam._m0[86u].x;
    float _2040 = _551 / cbSceneParam._m0[86u].y;
    vec4 _2054 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2039, _2040, (log2((isnan(cbSceneParam._m0[77u].w) ? _537 : (isnan(_537) ? cbSceneParam._m0[77u].w : min(_537, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2056 = _2054.x;
    float _2057 = _2054.y;
    float _2058 = _2054.z;
    float _2059 = _2054.w;
    float _2139;
    float _2141;
    float _2143;
    float _2145;
    if (_537 > cbSceneParam._m0[78u].w)
    {
        float _2101 = isnan(_537) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _537 : min(cbSceneParam._m0[80u].w, _537));
        float _2102 = _2101 / _537;
        float _2113 = _2102 * _261;
        float _2114 = _262 * _2102;
        float _2115 = (-0.0) - _2114;
        float _2116 = _2102 * _263;
        float _2118 = (cbSceneParam._m0[77u].w * _2115) / _2101;
        float _2119 = _2118 + cbSceneParam._m0[79u].w;
        float _2120 = cbSceneParam._m0[79u].w - _2114;
        float _2126 = sqrt(((_2113 * _2113) + (_2114 * _2114)) + (_2116 * _2116));
        float _2129 = (1.0 - (cbSceneParam._m0[77u].w / _2101)) * _2126;
        float _2135 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2137 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2346;
        if (abs((_2115 - _2118) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2346 = ((((_2119 > 0.0) ? exp2(_2135 * _2119) : (2.0 - exp2(_2137 * _2119))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2129;
        }
        else
        {
            float _2281 = 1.0 / cbSceneParam._m0[80u].x;
            float _2282 = isnan(_2120) ? _2119 : (isnan(_2119) ? _2120 : max(_2119, _2120));
            float _2283 = isnan(_2120) ? _2119 : (isnan(_2119) ? _2120 : min(_2119, _2120));
            float _2292 = isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : min(_2282, 0.0));
            float _2293 = isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : min(_2283, 0.0));
            _2346 = ((abs(_2126 / _2115) * cbSceneParam._m0[80u].y) * ((((_2292 - _2293) * 2.0) - ((exp2(_2135 * (isnan(0.0) ? _2282 : (isnan(_2282) ? 0.0 : max(_2282, 0.0)))) - exp2(_2135 * (isnan(0.0) ? _2283 : (isnan(_2283) ? 0.0 : max(_2283, 0.0))))) * _2281)) - ((exp2(_2137 * _2292) - exp2(_2137 * _2293)) * _2281))) + (_2129 * cbSceneParam._m0[80u].z);
        }
        vec4 _2348 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2039, _2040, 1.0), 0.0);
        float _2357 = exp2((_2346 * (-1.44269502162933349609375)) * (1.0 - _2348.w));
        float _2358 = log2(_2357);
        float _2374 = log2(_2059);
        _2139 = (exp2(_2374 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2358 * cbSceneParam._m0[78u].x)) * _2348.x) / cbSceneParam._m0[78u].x)) + _2056;
        _2141 = (exp2(_2374 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2358 * cbSceneParam._m0[78u].y)) * _2348.y) / cbSceneParam._m0[78u].y)) + _2057;
        _2143 = (exp2(_2374 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2358 * cbSceneParam._m0[78u].z)) * _2348.z) / cbSceneParam._m0[78u].z)) + _2058;
        _2145 = _2357 * _2059;
    }
    else
    {
        _2139 = _2056;
        _2141 = _2057;
        _2143 = _2058;
        _2145 = _2059;
    }
    float _2157 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2158 = _2157 == 3.0;
    float _2159 = log2(_2145);
    float _2166 = exp2(_2159 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2023 : (isnan(_2023) ? 0.0 : max(_2023, 0.0)));
    float _2167 = exp2(_2159 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0)));
    float _2168 = exp2(_2159 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2027 : (isnan(_2027) ? 0.0 : max(_2027, 0.0)));
    float _2177 = (_2157 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2177 * (_2158 ? _2166 : (_2166 + (cbSceneParam._m0[72u].w * _2139)));
    SV_Target.y = _2177 * (_2158 ? _2167 : (_2167 + (cbSceneParam._m0[72u].w * _2141)));
    SV_Target.z = _2177 * (_2158 ? _2168 : (_2168 + (cbSceneParam._m0[72u].w * _2143)));
    SV_Target.w = cbInstanceData._m0[_2031].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2031].w;
}


