#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1135;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _186 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _187 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _188 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _193 = inversesqrt(dot(vec3(_186, _187, _188), vec3(_186, _187, _188)));
    float _194 = _193 * _186;
    float _195 = _193 * _187;
    float _196 = _193 * _188;
    float _200 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _201 = _200 * NORMAL.x;
    float _202 = _200 * NORMAL.y;
    float _203 = _200 * NORMAL.z;
    float _207 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _208 = _207 * TANGENT.x;
    float _209 = _207 * TANGENT.y;
    float _210 = _207 * TANGENT.z;
    float _255 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _265 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _255);
    float _266 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _255);
    float _267 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _255);
    vec4 _280 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _283 = _280.x;
    vec4 _301 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _318 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _283) + cbMtdParam._m0[12u].x) * _301.x;
    float _320 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _283) + cbMtdParam._m0[12u].y) * _301.y;
    float _322 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _283) + cbMtdParam._m0[12u].z) * _301.z;
    vec4 _340 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _376 = cbMtdParam._m0[24u].x + _265;
    float _377 = cbMtdParam._m0[24u].y + _266;
    float _378 = cbMtdParam._m0[24u].z + _267;
    float _392 = (-0.0) - dot(vec3(_376, _377, _378), vec3(_194, _195, _196));
    float _393 = (-0.0) - dot(vec3(_376, _377, _378), vec3(_208, _209, _210));
    float _394 = (-0.0) - dot(vec3(_376, _377, _378), vec3((-0.0) - _201, (-0.0) - _202, (-0.0) - _203));
    float _398 = inversesqrt(dot(vec3(_392, _393, _394), vec3(_392, _393, _394)));
    float _401 = _398 * _394;
    float _402 = (_398 * _392) + ((cbMtdParam._m0[22u].x * _283) * ((_340.x * 2.0) + (-1.0)));
    float _403 = (_398 * _393) + ((cbMtdParam._m0[22u].y * _283) * ((_340.y * 2.0) + (-1.0)));
    float _404 = _402 * cbMtdParam._m0[20u].w;
    float _405 = _403 * cbMtdParam._m0[20u].z;
    float _406 = fract(TEXCOORD.x);
    float _407 = fract(TEXCOORD.y);
    float _413;
    if (_404 > 0.0)
    {
        _413 = (1.0 - _406) / _404;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_404 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _406) / _404;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _413 = frontier_phi_3_2_ladder;
    }
    float _421;
    if (_405 > 0.0)
    {
        _421 = (1.0 - _407) / _405;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_405 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _407) / _405;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _421 = frontier_phi_7_6_ladder;
    }
    bool _423 = _401 > 0.0;
    float _425 = _423 ? (cbMtdParam._m0[16u].x / _401) : 5000.0;
    float _426 = isnan(_421) ? _413 : (isnan(_413) ? _421 : min(_413, _421));
    float _427 = isnan(_425) ? _426 : (isnan(_426) ? _425 : min(_426, _425));
    float _431 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _432 = _406 + (-0.5);
    float _435 = _407 + (-0.5);
    float _438 = ((_427 * _401) + _431) / _431;
    vec4 _463 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (((((_432 + (_427 * _404)) / _438) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (((((_435 + (_427 * _405)) / _438) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    float _476 = (_463.x * _283) * cbMtdParam._m0[9u].x;
    float _477 = (_463.y * _283) * cbMtdParam._m0[9u].y;
    float _478 = (_463.z * _283) * cbMtdParam._m0[9u].z;
    float _497 = _402 * cbMtdParam._m0[22u].w;
    float _498 = _403 * cbMtdParam._m0[22u].z;
    bool _499 = _497 > 0.0;
    float _504;
    if (_499)
    {
        _504 = (1.0 - _406) / _497;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_497 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _406) / _497;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _504 = frontier_phi_11_10_ladder;
    }
    bool _506 = _498 > 0.0;
    float _511;
    if (_506)
    {
        _511 = (1.0 - _407) / _498;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_498 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _407) / _498;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _511 = frontier_phi_15_14_ladder;
    }
    float _514 = _423 ? (cbMtdParam._m0[18u].x / _401) : 5000.0;
    float _515 = isnan(_511) ? _504 : (isnan(_504) ? _511 : min(_504, _511));
    float _516 = isnan(_514) ? _515 : (isnan(_515) ? _514 : min(_515, _514));
    float _520 = cbMtdParam._m0[19u].y * cbMtdParam._m0[18u].x;
    float _524 = ((_516 * _401) + _520) / _520;
    float _529 = cbMtdParam._m0[19u].x - cbMtdParam._m0[20u].x * trunc(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    float _531 = floor(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    vec4 _547 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_432 + (_516 * _497)) / _524) + 0.5) + _529) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_435 + (_516 * _498)) / _524) + 0.5) + _531) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[0u].w));
    float _562;
    if (_499)
    {
        _562 = (1.0 - _406) / _497;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_497 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _406) / _497;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _562 = frontier_phi_19_18_ladder;
    }
    float _568;
    if (_506)
    {
        _568 = (1.0 - _407) / _498;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_498 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _407) / _498;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _568 = frontier_phi_23_22_ladder;
    }
    float _570 = isnan(_568) ? _562 : (isnan(_562) ? _568 : min(_562, _568));
    float _571 = isnan(_514) ? _570 : (isnan(_570) ? _514 : min(_570, _514));
    float _578 = ((_571 * _401) + _520) / _520;
    vec4 _598 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_432 + (_571 * _497)) / _578) + 0.5) + _529) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_435 + (_571 * _498)) / _578) + 0.5) + _531) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[8u].w));
    float _600 = _598.x;
    float _610 = _283 * 0.1500000059604644775390625;
    float _621 = (_610 * ((_476 - _318) + (((((cbMtdParam._m0[10u].x * _283) * _547.x) - _476) * _283) * _600))) + _318;
    float _622 = (_610 * ((_477 - _320) + (((((cbMtdParam._m0[10u].y * _283) * _547.y) - _477) * _283) * _600))) + _320;
    float _623 = (_610 * ((_478 - _322) + (((((cbMtdParam._m0[10u].z * _283) * _547.z) - _478) * _283) * _600))) + _322;
    vec4 _636 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _640 = _636.z;
    float _643 = (_636.x * 2.0) + (-1.0);
    float _644 = (_636.y * 2.0) + (-1.0);
    float _645 = dot(vec2(_643, _644), vec2(_643, _644));
    float _3247 = isnan(0.0) ? _645 : (isnan(_645) ? 0.0 : max(_645, 0.0));
    float _650 = sqrt(1.0 - (isnan(1.0) ? _3247 : (isnan(_3247) ? 1.0 : min(_3247, 1.0))));
    float _653 = fma(_650, _201, fma(_644, _208, _643 * _194));
    float _656 = fma(_650, _202, fma(_644, _209, _643 * _195));
    float _659 = fma(_650, _203, fma(_644, _210, _643 * _196));
    float _663 = inversesqrt(dot(vec3(_653, _656, _659), vec3(_653, _656, _659)));
    float _664 = _663 * _653;
    float _665 = _663 * _656;
    float _666 = _663 * _659;
    float _3258 = isnan(0.0) ? _640 : (isnan(_640) ? 0.0 : max(_640, 0.0));
    float _667 = isnan(1.0) ? _3258 : (isnan(_3258) ? 1.0 : min(_3258, 1.0));
    float _3269 = isnan(0.0) ? _621 : (isnan(_621) ? 0.0 : max(_621, 0.0));
    float _3280 = isnan(0.0) ? _622 : (isnan(_622) ? 0.0 : max(_622, 0.0));
    float _3291 = isnan(0.0) ? _623 : (isnan(_623) ? 0.0 : max(_623, 0.0));
    float _686 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _690 = inversesqrt(dot(vec3(_265, _266, _267), vec3(_265, _266, _267)));
    float _691 = _265 * _690;
    float _692 = _266 * _690;
    float _693 = _267 * _690;
    float _699 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _700 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _719 = fma(_666, cbSceneParam._m0[5u].z, fma(_665, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _664));
    float _722 = fma(_666, cbSceneParam._m0[6u].z, fma(_665, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _664));
    float _725 = fma(_666, cbSceneParam._m0[7u].z, fma(_665, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _664));
    uint _738 = uint(roundEven(NORMAL.w)) * 13u;
    uint _741 = (_738 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _747 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3269 : (isnan(_3269) ? 1.0 : min(_3269, 1.0)))) * cbInstanceData._m0[_741].x;
    float _748 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3280 : (isnan(_3280) ? 1.0 : min(_3280, 1.0)))) * cbInstanceData._m0[_741].y;
    float _749 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3291 : (isnan(_3291) ? 1.0 : min(_3291, 1.0)))) * cbInstanceData._m0[_741].z;
    float _3302 = isnan(0.0) ? _747 : (isnan(_747) ? 0.0 : max(_747, 0.0));
    float _750 = isnan(1.0) ? _3302 : (isnan(_3302) ? 1.0 : min(_3302, 1.0));
    float _3313 = isnan(0.0) ? _748 : (isnan(_748) ? 0.0 : max(_748, 0.0));
    float _751 = isnan(1.0) ? _3313 : (isnan(_3313) ? 1.0 : min(_3313, 1.0));
    float _3324 = isnan(0.0) ? _749 : (isnan(_749) ? 0.0 : max(_749, 0.0));
    float _752 = isnan(1.0) ? _3324 : (isnan(_3324) ? 1.0 : min(_3324, 1.0));
    vec4 _761 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _699, cbSceneParam._m0[86u].y * _700));
    float _764 = _761.x * TEXCOORD_4.z;
    float _765 = dot(vec3(_664, _665, _666), vec3(_691, _692, _693));
    float _768 = _765 * 2.0;
    float _772 = (_768 * _664) - _691;
    float _773 = (_768 * _665) - _692;
    float _774 = (_768 * _666) - _693;
    float _778 = abs(dot(vec3(_691, _692, _693), vec3(_664, _665, _666)));
    float _3335 = isnan(0.0) ? _778 : (isnan(_778) ? 0.0 : max(_778, 0.0));
    float _780 = sqrt(_667);
    float _793 = exp2((_780 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3335 : (isnan(_3335) ? 1.0 : min(_3335, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_780 * 3.0));
    float _825 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _829 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _833 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1134;
    float _1136;
    float _1137;
    float _1138;
    float _1139;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _861 = fma(_833, cbModelParam._m0[26u].z, fma(_829, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _825));
        float _865 = fma(_833, cbModelParam._m0[27u].z, fma(_829, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _825));
        float _869 = fma(_833, cbModelParam._m0[28u].z, fma(_829, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _825));
        float _892 = _825 + _664;
        float _893 = _829 + _665;
        float _894 = _833 + _666;
        float _904 = fma(_894, cbModelParam._m0[26u].z, fma(_893, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _892)) - _861;
        float _905 = fma(_894, cbModelParam._m0[27u].z, fma(_893, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _892)) - _865;
        float _906 = fma(_894, cbModelParam._m0[28u].z, fma(_893, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _892)) - _869;
        float _910 = inversesqrt(dot(vec3(_904, _905, _906), vec3(_904, _905, _906)));
        float _923 = ((_910 * _904) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_861 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _924 = ((_910 * _905) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_865 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _925 = ((_910 * _906) / cbModelParam._m0[34u].z) + ((((((_869 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _928 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_923, _924, _925), 0.0);
        vec4 _935 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_923, _924, _925), 0.0);
        vec4 _942 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_923, _924, _925), 0.0);
        vec4 _949 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_923, _924, _925), 0.0);
        float _962 = exp2((_928.w + (-0.5)) * 20.0) * 2.0;
        float _963 = _962 * (_928.x + (-0.5));
        float _964 = _962 * (_928.y + (-0.5));
        float _965 = _962 * (_928.z + (-0.5));
        float _972 = exp2((_935.w + (-0.5)) * 20.0) * 2.0;
        float _973 = _972 * (_935.x + (-0.5));
        float _974 = _972 * (_935.y + (-0.5));
        float _975 = _972 * (_935.z + (-0.5));
        float _982 = exp2((_942.w + (-0.5)) * 20.0) * 2.0;
        float _983 = _982 * (_942.x + (-0.5));
        float _984 = _982 * (_942.y + (-0.5));
        float _985 = _982 * (_942.z + (-0.5));
        float _992 = exp2((_949.w + (-0.5)) * 20.0) * 2.0;
        float _993 = _992 * (_949.x + (-0.5));
        float _994 = _992 * (_949.y + (-0.5));
        float _995 = _992 * (_949.z + (-0.5));
        float _996 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _997 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _998 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _999 = _963 * 0.5;
        float _1000 = _973 * 0.5;
        float _1001 = _983 * 0.5;
        float _1002 = dot(vec3(_999, _1000, _1001), vec3(_999, _1000, _1001));
        float _1007 = (_1002 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1002);
        float _1016 = (dot(vec3(_664, _665, _666), vec3(_1007 * _999, _1007 * _1000, _1007 * _1001)) + 1.0) * 0.5;
        float _3361 = isnan(0.0) ? _1016 : (isnan(_1016) ? 0.0 : max(_1016, 0.0));
        float _1026 = sqrt(((_1000 * _1000) + (_999 * _999)) + (_1001 * _1001)) / (_996 + 9.9999997473787516355514526367188e-06);
        float _3372 = isnan(0.0) ? _1026 : (isnan(_1026) ? 0.0 : max(_1026, 0.0));
        float _1027 = isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0));
        float _1028 = _1027 * 2.0;
        float _1032 = (1.0 - _1027) / (_1027 + 1.0);
        float _3383 = isnan(0.0) ? _1032 : (isnan(_1032) ? 0.0 : max(_1032, 0.0));
        float _1033 = isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0));
        float _1042 = ((((1.0 - _1033) * (_1028 + 2.0)) * exp2(log2(isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0))) * (_1028 + 1.0))) + _1033) * _996;
        float _1043 = _964 * 0.5;
        float _1044 = _974 * 0.5;
        float _1045 = _984 * 0.5;
        float _1046 = dot(vec3(_1043, _1044, _1045), vec3(_1043, _1044, _1045));
        float _1051 = (_1046 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1046);
        float _1059 = (dot(vec3(_664, _665, _666), vec3(_1051 * _1043, _1051 * _1044, _1051 * _1045)) + 1.0) * 0.5;
        float _3394 = isnan(0.0) ? _1059 : (isnan(_1059) ? 0.0 : max(_1059, 0.0));
        float _1068 = sqrt(((_1044 * _1044) + (_1043 * _1043)) + (_1045 * _1045)) / (_997 + 9.9999997473787516355514526367188e-06);
        float _3405 = isnan(0.0) ? _1068 : (isnan(_1068) ? 0.0 : max(_1068, 0.0));
        float _1069 = isnan(1.0) ? _3405 : (isnan(_3405) ? 1.0 : min(_3405, 1.0));
        float _1070 = _1069 * 2.0;
        float _1074 = (1.0 - _1069) / (_1069 + 1.0);
        float _3416 = isnan(0.0) ? _1074 : (isnan(_1074) ? 0.0 : max(_1074, 0.0));
        float _1075 = isnan(1.0) ? _3416 : (isnan(_3416) ? 1.0 : min(_3416, 1.0));
        float _1084 = ((((1.0 - _1075) * (_1070 + 2.0)) * exp2(log2(isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0))) * (_1070 + 1.0))) + _1075) * _997;
        float _1085 = _965 * 0.5;
        float _1086 = _975 * 0.5;
        float _1087 = _985 * 0.5;
        float _1088 = dot(vec3(_1085, _1086, _1087), vec3(_1085, _1086, _1087));
        float _1093 = (_1088 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1088);
        float _1101 = (dot(vec3(_664, _665, _666), vec3(_1093 * _1085, _1093 * _1086, _1093 * _1087)) + 1.0) * 0.5;
        float _3427 = isnan(0.0) ? _1101 : (isnan(_1101) ? 0.0 : max(_1101, 0.0));
        float _1110 = sqrt(((_1086 * _1086) + (_1085 * _1085)) + (_1087 * _1087)) / (_998 + 9.9999997473787516355514526367188e-06);
        float _3438 = isnan(0.0) ? _1110 : (isnan(_1110) ? 0.0 : max(_1110, 0.0));
        float _1111 = isnan(1.0) ? _3438 : (isnan(_3438) ? 1.0 : min(_3438, 1.0));
        float _1112 = _1111 * 2.0;
        float _1116 = (1.0 - _1111) / (_1111 + 1.0);
        float _3449 = isnan(0.0) ? _1116 : (isnan(_1116) ? 0.0 : max(_1116, 0.0));
        float _1117 = isnan(1.0) ? _3449 : (isnan(_3449) ? 1.0 : min(_3449, 1.0));
        float _1126 = ((((1.0 - _1117) * (_1112 + 2.0)) * exp2(log2(isnan(1.0) ? _3427 : (isnan(_3427) ? 1.0 : min(_3427, 1.0))) * (_1112 + 1.0))) + _1117) * _998;
        _1134 = _965;
        _1136 = _964;
        _1137 = _963;
        _1138 = _975;
        _1139 = _974;
        _1140 = _973;
        _1141 = _985;
        _1142 = _984;
        _1143 = _983;
        _1144 = _998;
        _1145 = _997;
        _1146 = _996;
        _1147 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1042 : (isnan(_1042) ? 0.0 : max(_1042, 0.0)));
        _1148 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1084 : (isnan(_1084) ? 0.0 : max(_1084, 0.0)));
        _1149 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1126 : (isnan(_1126) ? 0.0 : max(_1126, 0.0)));
    }
    else
    {
        _1134 = _1135;
        _1136 = _1135;
        _1137 = _1135;
        _1138 = _1135;
        _1139 = _1135;
        _1140 = _1135;
        _1141 = _1135;
        _1142 = _1135;
        _1143 = _1135;
        _1144 = _1135;
        _1145 = _1135;
        _1146 = _1135;
        _1147 = 0.0;
        _1148 = 0.0;
        _1149 = 0.0;
    }
    float _1444;
    float _1445;
    float _1446;
    float _1447;
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1175 = fma(_833, cbModelParam._m0[30u].z, fma(_829, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _825));
        float _1179 = fma(_833, cbModelParam._m0[31u].z, fma(_829, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _825));
        float _1183 = fma(_833, cbModelParam._m0[32u].z, fma(_829, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _825));
        float _1206 = _825 + _664;
        float _1207 = _829 + _665;
        float _1208 = _833 + _666;
        float _1218 = fma(_1208, cbModelParam._m0[30u].z, fma(_1207, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1206)) - _1175;
        float _1219 = fma(_1208, cbModelParam._m0[31u].z, fma(_1207, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1206)) - _1179;
        float _1220 = fma(_1208, cbModelParam._m0[32u].z, fma(_1207, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1206)) - _1183;
        float _1224 = inversesqrt(dot(vec3(_1218, _1219, _1220), vec3(_1218, _1219, _1220)));
        float _1237 = ((_1224 * _1218) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1175 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1238 = ((_1224 * _1219) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1179 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1239 = ((_1224 * _1220) / cbModelParam._m0[35u].z) + ((((((_1183 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1241 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1237, _1238, _1239), 0.0);
        vec4 _1248 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1237, _1238, _1239), 0.0);
        vec4 _1255 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1237, _1238, _1239), 0.0);
        vec4 _1262 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1237, _1238, _1239), 0.0);
        float _1274 = exp2((_1241.w + (-0.5)) * 20.0) * 2.0;
        float _1275 = _1274 * (_1241.x + (-0.5));
        float _1276 = _1274 * (_1241.y + (-0.5));
        float _1277 = _1274 * (_1241.z + (-0.5));
        float _1284 = exp2((_1248.w + (-0.5)) * 20.0) * 2.0;
        float _1285 = _1284 * (_1248.x + (-0.5));
        float _1286 = _1284 * (_1248.y + (-0.5));
        float _1287 = _1284 * (_1248.z + (-0.5));
        float _1294 = exp2((_1255.w + (-0.5)) * 20.0) * 2.0;
        float _1295 = _1294 * (_1255.x + (-0.5));
        float _1296 = _1294 * (_1255.y + (-0.5));
        float _1297 = _1294 * (_1255.z + (-0.5));
        float _1304 = exp2((_1262.w + (-0.5)) * 20.0) * 2.0;
        float _1305 = _1304 * (_1262.x + (-0.5));
        float _1306 = _1304 * (_1262.y + (-0.5));
        float _1307 = _1304 * (_1262.z + (-0.5));
        float _1308 = isnan(0.0) ? _1305 : (isnan(_1305) ? 0.0 : max(_1305, 0.0));
        float _1309 = isnan(0.0) ? _1306 : (isnan(_1306) ? 0.0 : max(_1306, 0.0));
        float _1310 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        float _1311 = _1275 * 0.5;
        float _1312 = _1285 * 0.5;
        float _1313 = _1295 * 0.5;
        float _1314 = dot(vec3(_1311, _1312, _1313), vec3(_1311, _1312, _1313));
        float _1319 = (_1314 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1314);
        float _1327 = (dot(vec3(_664, _665, _666), vec3(_1319 * _1311, _1319 * _1312, _1319 * _1313)) + 1.0) * 0.5;
        float _3490 = isnan(0.0) ? _1327 : (isnan(_1327) ? 0.0 : max(_1327, 0.0));
        float _1336 = sqrt(((_1312 * _1312) + (_1311 * _1311)) + (_1313 * _1313)) / (_1308 + 9.9999997473787516355514526367188e-06);
        float _3501 = isnan(0.0) ? _1336 : (isnan(_1336) ? 0.0 : max(_1336, 0.0));
        float _1337 = isnan(1.0) ? _3501 : (isnan(_3501) ? 1.0 : min(_3501, 1.0));
        float _1338 = _1337 * 2.0;
        float _1342 = (1.0 - _1337) / (_1337 + 1.0);
        float _3512 = isnan(0.0) ? _1342 : (isnan(_1342) ? 0.0 : max(_1342, 0.0));
        float _1343 = isnan(1.0) ? _3512 : (isnan(_3512) ? 1.0 : min(_3512, 1.0));
        float _1352 = ((((1.0 - _1343) * (_1338 + 2.0)) * exp2(log2(isnan(1.0) ? _3490 : (isnan(_3490) ? 1.0 : min(_3490, 1.0))) * (_1338 + 1.0))) + _1343) * _1308;
        float _1353 = _1276 * 0.5;
        float _1354 = _1286 * 0.5;
        float _1355 = _1296 * 0.5;
        float _1356 = dot(vec3(_1353, _1354, _1355), vec3(_1353, _1354, _1355));
        float _1361 = (_1356 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1356);
        float _1369 = (dot(vec3(_664, _665, _666), vec3(_1361 * _1353, _1361 * _1354, _1361 * _1355)) + 1.0) * 0.5;
        float _3523 = isnan(0.0) ? _1369 : (isnan(_1369) ? 0.0 : max(_1369, 0.0));
        float _1378 = sqrt(((_1354 * _1354) + (_1353 * _1353)) + (_1355 * _1355)) / (_1309 + 9.9999997473787516355514526367188e-06);
        float _3534 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1379 = isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0));
        float _1380 = _1379 * 2.0;
        float _1384 = (1.0 - _1379) / (_1379 + 1.0);
        float _3545 = isnan(0.0) ? _1384 : (isnan(_1384) ? 0.0 : max(_1384, 0.0));
        float _1385 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
        float _1394 = ((((1.0 - _1385) * (_1380 + 2.0)) * exp2(log2(isnan(1.0) ? _3523 : (isnan(_3523) ? 1.0 : min(_3523, 1.0))) * (_1380 + 1.0))) + _1385) * _1309;
        float _1395 = _1277 * 0.5;
        float _1396 = _1287 * 0.5;
        float _1397 = _1297 * 0.5;
        float _1398 = dot(vec3(_1395, _1396, _1397), vec3(_1395, _1396, _1397));
        float _1403 = (_1398 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1398);
        float _1411 = (dot(vec3(_664, _665, _666), vec3(_1403 * _1395, _1403 * _1396, _1403 * _1397)) + 1.0) * 0.5;
        float _3556 = isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0));
        float _1420 = sqrt(((_1396 * _1396) + (_1395 * _1395)) + (_1397 * _1397)) / (_1310 + 9.9999997473787516355514526367188e-06);
        float _3567 = isnan(0.0) ? _1420 : (isnan(_1420) ? 0.0 : max(_1420, 0.0));
        float _1421 = isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0));
        float _1422 = _1421 * 2.0;
        float _1426 = (1.0 - _1421) / (_1421 + 1.0);
        float _3578 = isnan(0.0) ? _1426 : (isnan(_1426) ? 0.0 : max(_1426, 0.0));
        float _1427 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
        float _1436 = ((((1.0 - _1427) * (_1422 + 2.0)) * exp2(log2(isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0))) * (_1422 + 1.0))) + _1427) * _1310;
        _1444 = _1277;
        _1445 = _1276;
        _1446 = _1275;
        _1447 = _1287;
        _1448 = _1286;
        _1449 = _1285;
        _1450 = _1297;
        _1451 = _1296;
        _1452 = _1295;
        _1453 = _1310;
        _1454 = _1309;
        _1455 = _1308;
        _1456 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1352 : (isnan(_1352) ? 0.0 : max(_1352, 0.0)));
        _1457 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1394 : (isnan(_1394) ? 0.0 : max(_1394, 0.0)));
        _1458 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0)));
    }
    else
    {
        _1444 = _1135;
        _1445 = _1135;
        _1446 = _1135;
        _1447 = _1135;
        _1448 = _1135;
        _1449 = _1135;
        _1450 = _1135;
        _1451 = _1135;
        _1452 = _1135;
        _1453 = _1135;
        _1454 = _1135;
        _1455 = _1135;
        _1456 = 0.0;
        _1457 = 0.0;
        _1458 = 0.0;
    }
    float _1468 = (cbModelParam._m0[1u].x * (_1456 - _1147)) + _1147;
    float _1469 = (cbModelParam._m0[1u].x * (_1457 - _1148)) + _1148;
    float _1470 = (cbModelParam._m0[1u].x * (_1458 - _1149)) + _1149;
    float _1491 = fma(_1470, cbSceneParam._m0[89u].z, fma(_1469, cbSceneParam._m0[89u].y, _1468 * cbSceneParam._m0[89u].x));
    float _1494 = fma(_1470, cbSceneParam._m0[90u].z, fma(_1469, cbSceneParam._m0[90u].y, _1468 * cbSceneParam._m0[90u].x));
    float _1497 = fma(_1470, cbSceneParam._m0[91u].z, fma(_1469, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1468));
    float _1512 = _772 * 0.5;
    float _1513 = _773 * 0.5;
    float _1514 = _774 * 0.5;
    float _1515 = dot(vec4(_1512, _1513, _1514, 1.0), vec4(_1446, _1449, _1452, _1455));
    float _1518 = dot(vec4(_1512, _1513, _1514, 1.0), vec4(_1445, _1448, _1451, _1454));
    float _1521 = dot(vec4(_1512, _1513, _1514, 1.0), vec4(_1444, _1447, _1450, _1453));
    float _1555;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1528 = dot(vec4(_1512, _1513, _1514, 1.0), vec4(_1134, _1138, _1141, _1144));
        float _1532 = dot(vec4(_1512, _1513, _1514, 1.0), vec4(_1136, _1139, _1142, _1145));
        float _1536 = dot(vec4(_1512, _1513, _1514, 1.0), vec4(_1137, _1140, _1143, _1146));
        float _1543 = dot(vec4(cbModelParam._m0[39u]), vec4(_1512, _1513, _1514, 1.0));
        _1555 = dot(vec3(isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0)), isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0)), isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1543) ? 0.0 : (isnan(0.0) ? _1543 : max(0.0, _1543))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1555 = 1.0;
    }
    float _1566;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1557 = dot(vec4(cbModelParam._m0[40u]), vec4(_1512, _1513, _1514, 1.0));
        _1566 = dot(vec3(isnan(0.0) ? _1515 : (isnan(_1515) ? 0.0 : max(_1515, 0.0)), isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0)), isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1557) ? 0.0 : (isnan(0.0) ? _1557 : max(0.0, _1557))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1566 = 1.0;
    }
    float _1570 = (_1566 * cbModelParam._m0[1u].x) + (_1555 * (1.0 - cbModelParam._m0[1u].x));
    float _1580 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _667);
    float _1581 = isnan(_1580) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1580 : min(cbModelParam._m0[25u].z, _1580));
    float _1663;
    float _1665;
    float _1667;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1630 = fma(_833, cbModelParam._m0[13u].z, fma(_829, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _825)) + cbModelParam._m0[13u].w;
        float _1634 = fma(_833, cbModelParam._m0[14u].z, fma(_829, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _825)) + cbModelParam._m0[14u].w;
        float _1638 = fma(_833, cbModelParam._m0[15u].z, fma(_829, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _825)) + cbModelParam._m0[15u].w;
        float _1641 = fma(_774, cbModelParam._m0[13u].z, fma(_773, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _772));
        float _1644 = fma(_774, cbModelParam._m0[14u].z, fma(_773, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _772));
        float _1647 = fma(_774, cbModelParam._m0[15u].z, fma(_773, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _772));
        float _1675;
        if (_1641 > 0.0)
        {
            _1675 = abs((1.0 - _1630) / _1641);
        }
        else
        {
            float frontier_phi_38_36_ladder;
            if (_1641 < 0.0)
            {
                frontier_phi_38_36_ladder = abs((_1630 + 1.0) / _1641);
            }
            else
            {
                frontier_phi_38_36_ladder = 5000.0;
            }
            _1675 = frontier_phi_38_36_ladder;
        }
        float _2020;
        if (_1644 > 0.0)
        {
            _2020 = abs((1.0 - _1634) / _1644);
        }
        else
        {
            float frontier_phi_47_43_ladder;
            if (_1644 < 0.0)
            {
                frontier_phi_47_43_ladder = abs((_1634 + 1.0) / _1644);
            }
            else
            {
                frontier_phi_47_43_ladder = 5000.0;
            }
            _2020 = frontier_phi_47_43_ladder;
        }
        float _2320;
        if (_1647 > 0.0)
        {
            _2320 = abs((1.0 - _1638) / _1647);
        }
        else
        {
            float frontier_phi_61_54_ladder;
            if (_1647 < 0.0)
            {
                frontier_phi_61_54_ladder = abs((_1638 + 1.0) / _1647);
            }
            else
            {
                frontier_phi_61_54_ladder = 5000.0;
            }
            _2320 = frontier_phi_61_54_ladder;
        }
        float _2322 = isnan(_2020) ? _1675 : (isnan(_1675) ? _2020 : min(_1675, _2020));
        float _2323 = isnan(_2320) ? _2322 : (isnan(_2322) ? _2320 : min(_2322, _2320));
        float _2327 = (_2323 * _1641) + _1630;
        float _2328 = (_2323 * _1644) + _1634;
        float _2329 = (_2323 * _1647) + _1638;
        float _2330 = _2323 * 9.9999997473787516355514526367188e-05;
        float _2331 = (-1.0) - _2330;
        float _2333 = _2330 + 1.0;
        float frontier_phi_37_61_ladder;
        float frontier_phi_37_61_ladder_1;
        float frontier_phi_37_61_ladder_2;
        if ((_2329 > _2333) || ((_2329 < _2331) || ((_2328 > _2333) || ((_2328 < _2331) || ((_2327 < _2331) || (_2327 > _2333))))))
        {
            frontier_phi_37_61_ladder = 0.0;
            frontier_phi_37_61_ladder_1 = 0.0;
            frontier_phi_37_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2455 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2329, cbModelParam._m0[9u].z, fma(_2328, cbModelParam._m0[9u].y, _2327 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2329, cbModelParam._m0[10u].z, fma(_2328, cbModelParam._m0[10u].y, _2327 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2329, cbModelParam._m0[11u].z, fma(_2328, cbModelParam._m0[11u].y, _2327 * cbModelParam._m0[11u].x))), _1581);
            frontier_phi_37_61_ladder = _2455.z * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_1 = _2455.y * cbModelParam._m0[1u].y;
            frontier_phi_37_61_ladder_2 = _2455.x * cbModelParam._m0[1u].y;
        }
        _1663 = frontier_phi_37_61_ladder_2;
        _1665 = frontier_phi_37_61_ladder_1;
        _1667 = frontier_phi_37_61_ladder;
    }
    else
    {
        vec4 _1651 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_772, _773, _774), _1581);
        _1663 = _1651.x * cbModelParam._m0[1u].y;
        _1665 = _1651.y * cbModelParam._m0[1u].y;
        _1667 = _1651.z * cbModelParam._m0[1u].y;
    }
    float _1671 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _667);
    float _1672 = isnan(_1671) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1671 : min(cbModelParam._m0[25u].w, _1671));
    float _1760;
    float _1762;
    float _1764;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1724 = fma(_833, cbModelParam._m0[21u].z, fma(_829, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _825)) + cbModelParam._m0[21u].w;
        float _1728 = fma(_833, cbModelParam._m0[22u].z, fma(_829, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _825)) + cbModelParam._m0[22u].w;
        float _1732 = fma(_833, cbModelParam._m0[23u].z, fma(_829, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _825)) + cbModelParam._m0[23u].w;
        float _1735 = fma(_774, cbModelParam._m0[21u].z, fma(_773, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _772));
        float _1738 = fma(_774, cbModelParam._m0[22u].z, fma(_773, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _772));
        float _1741 = fma(_774, cbModelParam._m0[23u].z, fma(_773, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _772));
        float _2025;
        if (_1735 > 0.0)
        {
            _2025 = abs((1.0 - _1724) / _1735);
        }
        else
        {
            float frontier_phi_49_45_ladder;
            if (_1735 < 0.0)
            {
                frontier_phi_49_45_ladder = abs((_1724 + 1.0) / _1735);
            }
            else
            {
                frontier_phi_49_45_ladder = 5000.0;
            }
            _2025 = frontier_phi_49_45_ladder;
        }
        float _2346;
        if (_1738 > 0.0)
        {
            _2346 = abs((1.0 - _1728) / _1738);
        }
        else
        {
            float frontier_phi_63_56_ladder;
            if (_1738 < 0.0)
            {
                frontier_phi_63_56_ladder = abs((_1728 + 1.0) / _1738);
            }
            else
            {
                frontier_phi_63_56_ladder = 5000.0;
            }
            _2346 = frontier_phi_63_56_ladder;
        }
        float _2515;
        if (_1741 > 0.0)
        {
            _2515 = abs((1.0 - _1732) / _1741);
        }
        else
        {
            float frontier_phi_77_72_ladder;
            if (_1741 < 0.0)
            {
                frontier_phi_77_72_ladder = abs((_1732 + 1.0) / _1741);
            }
            else
            {
                frontier_phi_77_72_ladder = 5000.0;
            }
            _2515 = frontier_phi_77_72_ladder;
        }
        float _2517 = isnan(_2346) ? _2025 : (isnan(_2025) ? _2346 : min(_2025, _2346));
        float _2518 = isnan(_2515) ? _2517 : (isnan(_2517) ? _2515 : min(_2517, _2515));
        float _2522 = (_2518 * _1735) + _1724;
        float _2523 = (_2518 * _1738) + _1728;
        float _2524 = (_2518 * _1741) + _1732;
        float _2525 = _2518 * 9.9999997473787516355514526367188e-05;
        float _2526 = (-1.0) - _2525;
        float _2528 = _2525 + 1.0;
        float frontier_phi_46_77_ladder;
        float frontier_phi_46_77_ladder_1;
        float frontier_phi_46_77_ladder_2;
        if ((_2524 > _2528) || ((_2524 < _2526) || ((_2523 > _2528) || ((_2523 < _2526) || ((_2522 < _2526) || (_2522 > _2528))))))
        {
            frontier_phi_46_77_ladder = 0.0;
            frontier_phi_46_77_ladder_1 = 0.0;
            frontier_phi_46_77_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2757 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2524, cbModelParam._m0[17u].z, fma(_2523, cbModelParam._m0[17u].y, _2522 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2524, cbModelParam._m0[18u].z, fma(_2523, cbModelParam._m0[18u].y, _2522 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2524, cbModelParam._m0[19u].z, fma(_2523, cbModelParam._m0[19u].y, _2522 * cbModelParam._m0[19u].x))), _1672);
            frontier_phi_46_77_ladder = _2757.z * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_1 = _2757.y * cbModelParam._m0[1u].z;
            frontier_phi_46_77_ladder_2 = _2757.x * cbModelParam._m0[1u].z;
        }
        _1760 = frontier_phi_46_77_ladder_2;
        _1762 = frontier_phi_46_77_ladder_1;
        _1764 = frontier_phi_46_77_ladder;
    }
    else
    {
        vec4 _1744 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_772, _773, _774), _1672);
        _1760 = _1744.x * cbModelParam._m0[1u].z;
        _1762 = _1744.y * cbModelParam._m0[1u].z;
        _1764 = _1744.z * cbModelParam._m0[1u].z;
    }
    float _1776 = ((((1.0 - _793) * ((_780 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_793 * _780)) * _764;
    float _1777 = _1776 * ((cbModelParam._m0[1u].w * (_1760 - _1663)) + _1663);
    float _1778 = _1776 * ((cbModelParam._m0[1u].w * (_1762 - _1665)) + _1665);
    float _1779 = _1776 * ((cbModelParam._m0[1u].w * (_1764 - _1667)) + _1667);
    float _1782 = fma(_1779, cbSceneParam._m0[89u].z, fma(_1778, cbSceneParam._m0[89u].y, _1777 * cbSceneParam._m0[89u].x));
    float _1785 = fma(_1779, cbSceneParam._m0[90u].z, fma(_1778, cbSceneParam._m0[90u].y, _1777 * cbSceneParam._m0[90u].x));
    float _1788 = fma(_1779, cbSceneParam._m0[91u].z, fma(_1778, cbSceneParam._m0[91u].y, _1777 * cbSceneParam._m0[91u].x));
    uvec4 _1798 = floatBitsToUint(cbInstanceData._m0[_738 + 5u]);
    uint _1800 = _1798.x * 14u;
    uint _1801 = _1800 + 13u;
    float _1806 = _764 + (-1.0);
    float _1809 = (cbLight._m0[_1801].x * _1806) + 1.0;
    float _1810 = (cbLight._m0[_1801].y * _1806) + 1.0;
    uint _1811 = _1800 + 5u;
    float _1817 = isnan(1.0) ? _1810 : (isnan(_1810) ? 1.0 : min(_1810, 1.0));
    uint _1821 = _1800 + 4u;
    float _1827 = isnan(1.0) ? _1809 : (isnan(_1809) ? 1.0 : min(_1809, 1.0));
    uint _1831 = _1800 | 1u;
    float _1842 = dot(vec3(cbLight._m0[_1800].xyz), vec3(_664, _665, _666));
    float _1845 = dot(vec3(cbLight._m0[_1831].xyz), vec3(_664, _665, _666));
    float _3714 = isnan(0.0) ? _1842 : (isnan(_1842) ? 0.0 : max(_1842, 0.0));
    float _3725 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
    float _1850 = (isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))) * 0.3183098733425140380859375;
    float _1852 = (isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0))) * 0.3183098733425140380859375;
    float _1859 = ((cbLight._m0[_1811].x * _1817) * _1852) + ((cbLight._m0[_1821].x * _1827) * _1850);
    float _1860 = ((_1817 * cbLight._m0[_1811].y) * _1852) + ((_1827 * cbLight._m0[_1821].y) * _1850);
    float _1861 = ((_1817 * cbLight._m0[_1811].z) * _1852) + ((_1827 * cbLight._m0[_1821].z) * _1850);
    uint _1863 = _1800 + 8u;
    float _1876 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1800].w)) * _667) * 0.949999988079071044921875);
    float _1877 = _1876 * _1876;
    float _1878 = cbLight._m0[_1800].x + _691;
    float _1879 = cbLight._m0[_1800].y + _692;
    float _1880 = cbLight._m0[_1800].z + _693;
    float _1884 = inversesqrt(dot(vec3(_1878, _1879, _1880), vec3(_1878, _1879, _1880)));
    float _1885 = _1884 * _1878;
    float _1886 = _1884 * _1879;
    float _1887 = _1884 * _1880;
    float _1888 = dot(vec3(_664, _665, _666), vec3(cbLight._m0[_1800].xyz));
    float _3736 = isnan(0.0) ? _1888 : (isnan(_1888) ? 0.0 : max(_1888, 0.0));
    float _1891 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
    float _3747 = isnan(0.0) ? _765 : (isnan(_765) ? 0.0 : max(_765, 0.0));
    float _1892 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
    float _1893 = dot(vec3(_664, _665, _666), vec3(_1885, _1886, _1887));
    float _3758 = isnan(0.0) ? _1893 : (isnan(_1893) ? 0.0 : max(_1893, 0.0));
    float _1896 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
    float _1897 = dot(vec3(cbLight._m0[_1800].xyz), vec3(_1885, _1886, _1887));
    float _3769 = isnan(0.0) ? _1897 : (isnan(_1897) ? 0.0 : max(_1897, 0.0));
    float _1901 = _1877 * _1877;
    float _1905 = ((_1896 * _1896) * (_1901 + (-1.0))) + 1.0;
    float _1916 = (exp2(log2(1.0 - (isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1917 = 1.0 - _1877;
    float _1928 = (0.5 / (((_1892 * ((_1891 * _1917) + _1877)) + 9.9999999392252902907785028219223e-09) + (((_1892 * _1917) + _1877) * _1891))) * _1891;
    float _3780 = isnan(0.0) ? _1928 : (isnan(_1928) ? 0.0 : max(_1928, 0.0));
    float _1930 = (isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0))) * (_1901 / ((_1905 * _1905) * 3.141590118408203125));
    uint _1941 = _1800 + 9u;
    float _1952 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1831].w)) * _667) * 0.949999988079071044921875);
    float _1953 = _1952 * _1952;
    float _1954 = cbLight._m0[_1831].x + _691;
    float _1955 = cbLight._m0[_1831].y + _692;
    float _1956 = cbLight._m0[_1831].z + _693;
    float _1960 = inversesqrt(dot(vec3(_1954, _1955, _1956), vec3(_1954, _1955, _1956)));
    float _1961 = _1960 * _1954;
    float _1962 = _1960 * _1955;
    float _1963 = _1960 * _1956;
    float _1964 = dot(vec3(_664, _665, _666), vec3(cbLight._m0[_1831].xyz));
    float _3791 = isnan(0.0) ? _1964 : (isnan(_1964) ? 0.0 : max(_1964, 0.0));
    float _1967 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
    float _1968 = dot(vec3(_664, _665, _666), vec3(_1961, _1962, _1963));
    float _3802 = isnan(0.0) ? _1968 : (isnan(_1968) ? 0.0 : max(_1968, 0.0));
    float _1971 = isnan(1.0) ? _3802 : (isnan(_3802) ? 1.0 : min(_3802, 1.0));
    float _1972 = dot(vec3(cbLight._m0[_1831].xyz), vec3(_1961, _1962, _1963));
    float _3813 = isnan(0.0) ? _1972 : (isnan(_1972) ? 0.0 : max(_1972, 0.0));
    float _1976 = _1953 * _1953;
    float _1980 = ((_1971 * _1971) * (_1976 + (-1.0))) + 1.0;
    float _1989 = (exp2(log2(1.0 - (isnan(1.0) ? _3813 : (isnan(_3813) ? 1.0 : min(_3813, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1990 = 1.0 - _1953;
    float _2000 = (0.5 / (((_1892 * ((_1967 * _1990) + _1953)) + 9.9999999392252902907785028219223e-09) + (((_1892 * _1990) + _1953) * _1967))) * _1967;
    float _3824 = isnan(0.0) ? _2000 : (isnan(_2000) ? 0.0 : max(_2000, 0.0));
    float _2002 = (isnan(1.0) ? _3824 : (isnan(_3824) ? 1.0 : min(_3824, 1.0))) * (_1976 / ((_1980 * _1980) * 3.141590118408203125));
    float _2012 = (((_1989 * cbLight._m0[_1941].x) * _2002) * _1817) + (((_1916 * cbLight._m0[_1863].x) * _1930) * _1827);
    float _2013 = (((_1989 * cbLight._m0[_1941].y) * _2002) * _1817) + (((_1916 * cbLight._m0[_1863].y) * _1930) * _1827);
    float _2014 = (((_1989 * cbLight._m0[_1941].z) * _2002) * _1817) + (((_1916 * cbLight._m0[_1863].z) * _1930) * _1827);
    float _2129;
    float _2131;
    float _2133;
    float _2135;
    float _2137;
    float _2139;
    if (_1798.y == 0u)
    {
        float _2069 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2070 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2069;
        float _2071 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2069;
        float _2072 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2069;
        uvec4 _2084 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2085 = _2084.x;
        uint _2096 = uint((float(_2084.y) * floor(float(uint(cbSceneParam._m0[85u].y * _700) / _2085))) + floor(float(uint(cbSceneParam._m0[85u].x * _699) / _2085)));
        float _2106 = (log2(_2072 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2107 = isnan(0.0) ? _2106 : (isnan(_2106) ? 0.0 : max(_2106, 0.0));
        uint _2110 = uint(isnan(14.0) ? _2107 : (isnan(_2107) ? 14.0 : min(_2107, 14.0)));
        uvec4 _2115 = texelFetch(g_lightClusterGridBuffer, int(((_2110 << 2u) + (_2096 << 6u)) >> 2u));
        uint _2116 = _2115.x;
        uint _2117 = _2084.z;
        float _2207;
        float _2209;
        float _2211;
        float _2213;
        float _2215;
        float _2217;
        if (((((1u << ((_2117 >> 4u) & 15u)) + 4294967295u) & _2116) == 0u) || ((_2117 & 240u) == 0u))
        {
            _2207 = 0.0;
            _2209 = 0.0;
            _2211 = 0.0;
            _2213 = 0.0;
            _2215 = 0.0;
            _2217 = 0.0;
        }
        else
        {
            float _2208;
            float _2210;
            float _2212;
            float _2214;
            float _2216;
            float _2218;
            float _2383 = 0.0;
            float _2384 = 0.0;
            float _2385 = 0.0;
            float _2386 = 0.0;
            float _2387 = 0.0;
            float _2388 = 0.0;
            uint _2389 = 0u;
            uint _2398;
            bool _2399;
            for (;;)
            {
                _2398 = texelFetch(g_lightClassification, int((((_2110 << 5u) + (_2096 << 9u)) + (_2389 << 2u)) >> 2u)).x;
                _2399 = _2398 == 0u;
                float frontier_phi_74_pred;
                float frontier_phi_74_pred_1;
                float frontier_phi_74_pred_2;
                float frontier_phi_74_pred_3;
                float frontier_phi_74_pred_4;
                float frontier_phi_74_pred_5;
                if (_2399)
                {
                    frontier_phi_74_pred = _2386;
                    frontier_phi_74_pred_1 = _2385;
                    frontier_phi_74_pred_2 = _2384;
                    frontier_phi_74_pred_3 = _2383;
                    frontier_phi_74_pred_4 = _2387;
                    frontier_phi_74_pred_5 = _2388;
                }
                else
                {
                    float _2558;
                    float _2559;
                    float _2560;
                    float _2561;
                    float _2562;
                    float _2563;
                    uint _2564;
                    _2558 = _2383;
                    _2559 = _2384;
                    _2560 = _2385;
                    _2561 = _2386;
                    _2562 = _2387;
                    _2563 = _2388;
                    _2564 = _2398;
                    float _2464;
                    float _2465;
                    float _2466;
                    float _2467;
                    float _2468;
                    float _2469;
                    for (;;)
                    {
                        uint _2568 = uint(findLSB(_2564)) + (_2389 << 5u);
                        uint _2565 = (_2564 + 4294967295u) & _2564;
                        uint _2570 = _2568 * 48u;
                        vec4 _2584 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2570)).x, texelFetch(g_PointLightRenderingBuffer, int(_2570 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2570 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2570 + 3u)).x));
                        uint _2590 = (_2568 * 48u) + 4u;
                        vec4 _2603 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2590)).x, texelFetch(g_PointLightRenderingBuffer, int(_2590 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2590 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2590 + 3u)).x));
                        uint _2609 = (_2568 * 48u) + 8u;
                        vec3 _2620 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2609)).x, texelFetch(g_PointLightRenderingBuffer, int(_2609 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2609 + 2u)).x));
                        float _2624 = _2584.x - _2070;
                        float _2625 = _2584.y - _2071;
                        float _2626 = _2584.z - _2072;
                        float _2627 = dot(vec3(_2624, _2625, _2626), vec3(_2624, _2625, _2626));
                        float _2630 = inversesqrt(_2627);
                        float _2631 = _2630 * _2624;
                        float _2632 = _2630 * _2625;
                        float _2633 = _2630 * _2626;
                        float _2634 = dot(vec3(_719, _722, _725), vec3(_2631, _2632, _2633));
                        float _2639 = 1.0 - (_2627 * _2584.w);
                        float _3845 = isnan(0.0) ? _2639 : (isnan(_2639) ? 0.0 : max(_2639, 0.0));
                        float _2640 = isnan(1.0) ? _3845 : (isnan(_3845) ? 1.0 : min(_3845, 1.0));
                        float _2641 = sqrt(_2627) * _2603.w;
                        float _2644 = 1.39999997615814208984375 / (_2641 + 1.39999997615814208984375);
                        float _2645 = _2644 * _2644;
                        float _2648 = ((1.0 - _2645) * _2634) + _2645;
                        float _2651 = _2641 * _2641;
                        float _2655 = ((isnan(0.0) ? _2648 : (isnan(_2648) ? 0.0 : max(_2648, 0.0))) * _2640) / ((_2651 * 0.699999988079071044921875) + 1.0);
                        float _2659 = (-0.0) - _2070;
                        float _2660 = (-0.0) - _2071;
                        float _2661 = (-0.0) - _2072;
                        float _2665 = inversesqrt(dot(vec3(_2659, _2660, _2661), vec3(_2659, _2660, _2661)));
                        float _2666 = _2665 * _2659;
                        float _2667 = _2665 * _2660;
                        float _2668 = _2665 * _2661;
                        float _2676 = exp2(log2(1.0 / ((_2651 * 3.5) + 5.0)) * 0.25);
                        float _2677 = 1.0 - _780;
                        float _2684 = sqrt(1.0 - ((1.0 - (_2677 * _2677)) * (1.0 - (_2676 * _2676))));
                        float _2685 = _2684 * _2684;
                        float _2686 = _2685 * _2685;
                        float _2687 = _2666 + _2631;
                        float _2688 = _2667 + _2632;
                        float _2689 = _2668 + _2633;
                        float _2693 = inversesqrt(dot(vec3(_2687, _2688, _2689), vec3(_2687, _2688, _2689)));
                        float _2697 = dot(vec3(_719, _722, _725), vec3(_2666, _2667, _2668));
                        float _3861 = isnan(0.0) ? _2697 : (isnan(_2697) ? 0.0 : max(_2697, 0.0));
                        float _2700 = isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0));
                        float _2701 = dot(vec3(_719, _722, _725), vec3(_2693 * _2687, _2693 * _2688, _2693 * _2689));
                        float _3872 = isnan(0.0) ? _2701 : (isnan(_2701) ? 0.0 : max(_2701, 0.0));
                        float _2704 = isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0));
                        float _2708 = ((_2704 * _2704) * (_2686 + (-1.0))) + 1.0;
                        float _2709 = _2644 * _2685;
                        float _2710 = _2709 * _2709;
                        float _2713 = ((1.0 - _2710) * _2634) + _2710;
                        float _3883 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
                        float _2714 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
                        float _2715 = 1.0 - _2685;
                        float _2725 = (0.5 / (((_2714 * ((_2700 * _2715) + _2685)) + 9.9999999392252902907785028219223e-09) + (((_2714 * _2715) + _2685) * _2700))) * _2714;
                        float _3894 = isnan(0.0) ? _2725 : (isnan(_2725) ? 0.0 : max(_2725, 0.0));
                        float _2736 = (((_2686 * 3.1415927410125732421875) * (isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0)))) / ((_2708 * _2708) * ((_2651 * 2.1991131305694580078125) + 3.141590118408203125))) * _2640;
                        _2467 = (_2655 * _2603.x) + _2561;
                        _2468 = (_2655 * _2603.y) + _2562;
                        _2469 = (_2655 * _2603.z) + _2563;
                        _2464 = (_2736 * _2620.x) + _2558;
                        _2465 = (_2736 * _2620.y) + _2559;
                        _2466 = (_2736 * _2620.z) + _2560;
                        if (_2565 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2558 = _2464;
                            _2559 = _2465;
                            _2560 = _2466;
                            _2561 = _2467;
                            _2562 = _2468;
                            _2563 = _2469;
                            _2564 = _2565;
                        }
                    }
                    frontier_phi_74_pred = _2467;
                    frontier_phi_74_pred_1 = _2466;
                    frontier_phi_74_pred_2 = _2465;
                    frontier_phi_74_pred_3 = _2464;
                    frontier_phi_74_pred_4 = _2468;
                    frontier_phi_74_pred_5 = _2469;
                }
                _2214 = frontier_phi_74_pred;
                _2212 = frontier_phi_74_pred_1;
                _2210 = frontier_phi_74_pred_2;
                _2208 = frontier_phi_74_pred_3;
                _2216 = frontier_phi_74_pred_4;
                _2218 = frontier_phi_74_pred_5;
                uint _2390 = _2389 + 1u;
                if (_2390 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2383 = _2208;
                    _2384 = _2210;
                    _2385 = _2212;
                    _2386 = _2214;
                    _2387 = _2216;
                    _2388 = _2218;
                    _2389 = _2390;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2207 = _2208;
            _2209 = _2210;
            _2211 = _2212;
            _2213 = _2214;
            _2215 = _2216;
            _2217 = _2218;
        }
        uvec4 _2221 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2222 = _2221.z;
        uint _2224 = (_2222 >> 8u) & 15u;
        float _2351;
        float _2353;
        float _2355;
        float _2357;
        float _2359;
        float _2361;
        if (((4294967295u << _2224) & _2116) == 0u)
        {
            _2351 = _2207;
            _2353 = _2209;
            _2355 = _2211;
            _2357 = _2213;
            _2359 = _2215;
            _2361 = _2217;
        }
        else
        {
            float _2376 = inversesqrt(dot(vec3(_2070, _2071, _2072), vec3(_2070, _2071, _2072)));
            float _2377 = _2376 * _2070;
            float _2378 = _2376 * _2071;
            float _2379 = _2376 * _2072;
            float frontier_phi_65_66_ladder;
            float frontier_phi_65_66_ladder_1;
            float frontier_phi_65_66_ladder_2;
            float frontier_phi_65_66_ladder_3;
            float frontier_phi_65_66_ladder_4;
            float frontier_phi_65_66_ladder_5;
            if (_2224 < ((_2222 >> 12u) & 15u))
            {
                float _2352;
                float _2354;
                float _2356;
                float _2358;
                float _2360;
                float _2362;
                float _2541 = _2207;
                float _2542 = _2209;
                float _2543 = _2211;
                float _2544 = _2213;
                float _2545 = _2215;
                float _2546 = _2217;
                uint _2547 = _2224;
                uint _2556;
                bool _2557;
                for (;;)
                {
                    _2556 = texelFetch(g_lightClassification, int((((_2110 << 5u) + (_2096 << 9u)) + (_2547 << 2u)) >> 2u)).x;
                    _2557 = _2556 == 0u;
                    float frontier_phi_83_pred;
                    float frontier_phi_83_pred_1;
                    float frontier_phi_83_pred_2;
                    float frontier_phi_83_pred_3;
                    float frontier_phi_83_pred_4;
                    float frontier_phi_83_pred_5;
                    if (_2557)
                    {
                        frontier_phi_83_pred = _2544;
                        frontier_phi_83_pred_1 = _2543;
                        frontier_phi_83_pred_2 = _2542;
                        frontier_phi_83_pred_3 = _2541;
                        frontier_phi_83_pred_4 = _2546;
                        frontier_phi_83_pred_5 = _2545;
                    }
                    else
                    {
                        float _2762;
                        float _2763;
                        float _2764;
                        float _2765;
                        float _2766;
                        float _2767;
                        float _3055;
                        float _3056;
                        float _3057;
                        float _3058;
                        float _3059;
                        float _3060;
                        float _2775 = _2541;
                        float _2776 = _2542;
                        float _2777 = _2543;
                        float _2778 = _2544;
                        float _2779 = _2545;
                        float _2780 = _2546;
                        uint _2781 = _2556;
                        uint _2782;
                        vec4 _2807;
                        float _2808;
                        vec4 _2823;
                        vec3 _2835;
                        vec4 _2850;
                        vec4 _2865;
                        float _2911;
                        bool _2912;
                        for (;;)
                        {
                            uint _2792 = ((_2547 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2781));
                            _2782 = (_2781 + 4294967295u) & _2781;
                            uint _2794 = _2792 * 40u;
                            _2807 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2794)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2794 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2794 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2794 + 3u)).x));
                            _2808 = _2807.w;
                            uint _2810 = (_2792 * 40u) + 4u;
                            _2823 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2810)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2810 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2810 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2810 + 3u)).x));
                            uint _2825 = (_2792 * 40u) + 8u;
                            _2835 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2825)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2825 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2825 + 2u)).x));
                            uint _2837 = (_2792 * 40u) + 16u;
                            _2850 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2837)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2837 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2837 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2837 + 3u)).x));
                            uint _2852 = (_2792 * 40u) + 20u;
                            _2865 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2852)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2852 + 3u)).x));
                            uint _2867 = (_2792 * 40u) + 24u;
                            vec4 _2880 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2867)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2867 + 3u)).x));
                            uint _2886 = (_2792 * 40u) + 28u;
                            vec4 _2899 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2886)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2886 + 3u)).x));
                            _2911 = fma(_2072, _2899.z, fma(_2071, _2899.y, _2899.x * _2070)) + _2899.w;
                            _2912 = !((fma(_2072, _2880.z, fma(_2071, _2880.y, _2880.x * _2070)) + _2880.w) <= 0.0);
                            float frontier_phi_89_pred;
                            float frontier_phi_89_pred_1;
                            float frontier_phi_89_pred_2;
                            float frontier_phi_89_pred_3;
                            float frontier_phi_89_pred_4;
                            float frontier_phi_89_pred_5;
                            if (_2912)
                            {
                                float _2939 = _2807.x - _2070;
                                float _2940 = _2807.y - _2071;
                                float _2941 = _2807.z - _2072;
                                float _2942 = dot(vec3(_2939, _2940, _2941), vec3(_2939, _2940, _2941));
                                float _2945 = inversesqrt(_2942);
                                float _2946 = _2945 * _2939;
                                float _2947 = _2945 * _2940;
                                float _2948 = _2945 * _2941;
                                float _2952 = 1.0 - (_2942 / (_2808 * _2808));
                                float _3905 = isnan(0.0) ? _2952 : (isnan(_2952) ? 0.0 : max(_2952, 0.0));
                                float _2953 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
                                float _2957 = sqrt(_2942) * _2823.w;
                                float _2959 = 1.39999997615814208984375 / (_2957 + 1.39999997615814208984375);
                                float _2960 = _2959 * _2959;
                                float _2963 = ((1.0 - _2960) * dot(vec3(_2946, _2947, _2948), vec3(_719, _722, _725))) + _2960;
                                float _2966 = _2957 * _2957;
                                float _2970 = (fma(_2072, _2850.z, fma(_2071, _2850.y, _2850.x * _2070)) + _2850.w) / _2911;
                                float _2971 = (fma(_2072, _2865.z, fma(_2071, _2865.y, _2865.x * _2070)) + _2865.w) / _2911;
                                float _2975 = 1.0 - dot(vec2(_2970, _2971), vec2(_2970, _2971));
                                float _3921 = isnan(0.0) ? _2975 : (isnan(_2975) ? 0.0 : max(_2975, 0.0));
                                float _2976 = isnan(1.0) ? _3921 : (isnan(_3921) ? 1.0 : min(_3921, 1.0));
                                float _2977 = _2976 * (((isnan(0.0) ? _2963 : (isnan(_2963) ? 0.0 : max(_2963, 0.0))) * _2953) / ((_2966 * 0.699999988079071044921875) + 1.0));
                                float _2989 = exp2(log2(1.0 / ((_2966 * 3.5) + 5.0)) * 0.25);
                                float _2990 = 1.0 - _780;
                                float _2997 = sqrt(1.0 - ((1.0 - (_2990 * _2990)) * (1.0 - (_2989 * _2989))));
                                float _2998 = _2997 * _2997;
                                float _2999 = _2998 * _2998;
                                float _3000 = _2946 - _2377;
                                float _3001 = _2947 - _2378;
                                float _3002 = _2948 - _2379;
                                float _3006 = inversesqrt(dot(vec3(_3000, _3001, _3002), vec3(_3000, _3001, _3002)));
                                float _3010 = dot(vec3(_719, _722, _725), vec3((-0.0) - _2377, (-0.0) - _2378, (-0.0) - _2379));
                                float _3932 = isnan(0.0) ? _3010 : (isnan(_3010) ? 0.0 : max(_3010, 0.0));
                                float _3013 = isnan(1.0) ? _3932 : (isnan(_3932) ? 1.0 : min(_3932, 1.0));
                                float _3014 = dot(vec3(_719, _722, _725), vec3(_3006 * _3000, _3006 * _3001, _3006 * _3002));
                                float _3943 = isnan(0.0) ? _3014 : (isnan(_3014) ? 0.0 : max(_3014, 0.0));
                                float _3017 = isnan(1.0) ? _3943 : (isnan(_3943) ? 1.0 : min(_3943, 1.0));
                                float _3021 = ((_3017 * _3017) * (_2999 + (-1.0))) + 1.0;
                                float _3022 = _2959 * _2998;
                                float _3023 = _3022 * _3022;
                                float _3029 = ((1.0 - _3023) * dot(vec3(_719, _722, _725), vec3(_2946, _2947, _2948))) + _3023;
                                float _3954 = isnan(0.0) ? _3029 : (isnan(_3029) ? 0.0 : max(_3029, 0.0));
                                float _3030 = isnan(1.0) ? _3954 : (isnan(_3954) ? 1.0 : min(_3954, 1.0));
                                float _3031 = 1.0 - _2998;
                                float _3041 = (0.5 / (((_3030 * ((_3013 * _3031) + _2998)) + 9.9999999392252902907785028219223e-09) + (((_3030 * _3031) + _2998) * _3013))) * _3030;
                                float _3965 = isnan(0.0) ? _3041 : (isnan(_3041) ? 0.0 : max(_3041, 0.0));
                                float _3051 = (_2976 * _2953) * (((_2999 * 3.1415927410125732421875) * (isnan(1.0) ? _3965 : (isnan(_3965) ? 1.0 : min(_3965, 1.0)))) / ((_3021 * _3021) * ((_2966 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_89_pred = _2977 * _2823.x;
                                frontier_phi_89_pred_1 = _3051 * _2835.z;
                                frontier_phi_89_pred_2 = _3051 * _2835.y;
                                frontier_phi_89_pred_3 = _3051 * _2835.x;
                                frontier_phi_89_pred_4 = _2977 * _2823.z;
                                frontier_phi_89_pred_5 = _2977 * _2823.y;
                            }
                            else
                            {
                                frontier_phi_89_pred = 0.0;
                                frontier_phi_89_pred_1 = 0.0;
                                frontier_phi_89_pred_2 = 0.0;
                                frontier_phi_89_pred_3 = 0.0;
                                frontier_phi_89_pred_4 = 0.0;
                                frontier_phi_89_pred_5 = 0.0;
                            }
                            _3058 = frontier_phi_89_pred;
                            _3057 = frontier_phi_89_pred_1;
                            _3056 = frontier_phi_89_pred_2;
                            _3055 = frontier_phi_89_pred_3;
                            _3060 = frontier_phi_89_pred_4;
                            _3059 = frontier_phi_89_pred_5;
                            _2765 = _3058 + _2778;
                            _2766 = _3059 + _2779;
                            _2767 = _3060 + _2780;
                            _2762 = _3055 + _2775;
                            _2763 = _3056 + _2776;
                            _2764 = _3057 + _2777;
                            if (_2782 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2775 = _2762;
                                _2776 = _2763;
                                _2777 = _2764;
                                _2778 = _2765;
                                _2779 = _2766;
                                _2780 = _2767;
                                _2781 = _2782;
                                continue;
                            }
                        }
                        frontier_phi_83_pred = _2765;
                        frontier_phi_83_pred_1 = _2764;
                        frontier_phi_83_pred_2 = _2763;
                        frontier_phi_83_pred_3 = _2762;
                        frontier_phi_83_pred_4 = _2767;
                        frontier_phi_83_pred_5 = _2766;
                    }
                    _2358 = frontier_phi_83_pred;
                    _2356 = frontier_phi_83_pred_1;
                    _2354 = frontier_phi_83_pred_2;
                    _2352 = frontier_phi_83_pred_3;
                    _2362 = frontier_phi_83_pred_4;
                    _2360 = frontier_phi_83_pred_5;
                    uint _2548 = _2547 + 1u;
                    if (_2548 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2541 = _2352;
                        _2542 = _2354;
                        _2543 = _2356;
                        _2544 = _2358;
                        _2545 = _2360;
                        _2546 = _2362;
                        _2547 = _2548;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_65_66_ladder = _2362;
                frontier_phi_65_66_ladder_1 = _2360;
                frontier_phi_65_66_ladder_2 = _2356;
                frontier_phi_65_66_ladder_3 = _2354;
                frontier_phi_65_66_ladder_4 = _2358;
                frontier_phi_65_66_ladder_5 = _2352;
            }
            else
            {
                frontier_phi_65_66_ladder = _2217;
                frontier_phi_65_66_ladder_1 = _2215;
                frontier_phi_65_66_ladder_2 = _2211;
                frontier_phi_65_66_ladder_3 = _2209;
                frontier_phi_65_66_ladder_4 = _2213;
                frontier_phi_65_66_ladder_5 = _2207;
            }
            _2351 = frontier_phi_65_66_ladder_5;
            _2353 = frontier_phi_65_66_ladder_3;
            _2355 = frontier_phi_65_66_ladder_2;
            _2357 = frontier_phi_65_66_ladder_4;
            _2359 = frontier_phi_65_66_ladder_1;
            _2361 = frontier_phi_65_66_ladder;
        }
        float _2366 = isnan(1.0) ? _764 : (isnan(_764) ? 1.0 : min(_764, 1.0));
        _2129 = (_2366 * _2357) + _1859;
        _2131 = (_2366 * _2359) + _1860;
        _2133 = (_2366 * _2361) + _1861;
        _2135 = ((_2351 * 0.039999999105930328369140625) * _2366) + _2012;
        _2137 = ((_2353 * 0.039999999105930328369140625) * _2366) + _2013;
        _2139 = ((_2355 * 0.039999999105930328369140625) * _2366) + _2014;
    }
    else
    {
        _2129 = _1859;
        _2131 = _1860;
        _2133 = _1861;
        _2135 = _2012;
        _2137 = _2013;
        _2139 = _2014;
    }
    float _3981 = isnan(0.0) ? _750 : (isnan(_750) ? 0.0 : max(_750, 0.0));
    float _3992 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _4003 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _2156 = ((isnan(1.0) ? _3981 : (isnan(_3981) ? 1.0 : min(_3981, 1.0))) * (_2129 + ((isnan(0.0) ? _1491 : (isnan(_1491) ? 0.0 : max(_1491, 0.0))) * _764))) + ((_2135 + ((isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0))) * _1570)) * cbPerFrame._m0[3u].x);
    float _2157 = ((isnan(1.0) ? _3992 : (isnan(_3992) ? 1.0 : min(_3992, 1.0))) * (_2131 + ((isnan(0.0) ? _1494 : (isnan(_1494) ? 0.0 : max(_1494, 0.0))) * _764))) + ((_2137 + ((isnan(0.0) ? _1785 : (isnan(_1785) ? 0.0 : max(_1785, 0.0))) * _1570)) * cbPerFrame._m0[3u].x);
    float _2158 = ((isnan(1.0) ? _4003 : (isnan(_4003) ? 1.0 : min(_4003, 1.0))) * (_2133 + ((isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0))) * _764))) + ((_2139 + ((isnan(0.0) ? _1788 : (isnan(_1788) ? 0.0 : max(_1788, 0.0))) * _1570)) * cbPerFrame._m0[3u].x);
    uint _2162 = _738 + 6u;
    float _2170 = _699 / cbSceneParam._m0[86u].x;
    float _2171 = _700 / cbSceneParam._m0[86u].y;
    vec4 _2185 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2170, _2171, (log2((isnan(cbSceneParam._m0[77u].w) ? _686 : (isnan(_686) ? cbSceneParam._m0[77u].w : min(_686, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2187 = _2185.x;
    float _2188 = _2185.y;
    float _2189 = _2185.z;
    float _2190 = _2185.w;
    float _2270;
    float _2272;
    float _2274;
    float _2276;
    if (_686 > cbSceneParam._m0[78u].w)
    {
        float _2232 = isnan(_686) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _686 : min(cbSceneParam._m0[80u].w, _686));
        float _2233 = _2232 / _686;
        float _2244 = _2233 * _265;
        float _2245 = _266 * _2233;
        float _2246 = (-0.0) - _2245;
        float _2247 = _2233 * _267;
        float _2249 = (cbSceneParam._m0[77u].w * _2246) / _2232;
        float _2250 = _2249 + cbSceneParam._m0[79u].w;
        float _2251 = cbSceneParam._m0[79u].w - _2245;
        float _2257 = sqrt(((_2244 * _2244) + (_2245 * _2245)) + (_2247 * _2247));
        float _2260 = (1.0 - (cbSceneParam._m0[77u].w / _2232)) * _2257;
        float _2266 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2268 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2477;
        if (abs((_2246 - _2249) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2477 = ((((_2250 > 0.0) ? exp2(_2266 * _2250) : (2.0 - exp2(_2268 * _2250))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2260;
        }
        else
        {
            float _2412 = 1.0 / cbSceneParam._m0[80u].x;
            float _2413 = isnan(_2251) ? _2250 : (isnan(_2250) ? _2251 : max(_2250, _2251));
            float _2414 = isnan(_2251) ? _2250 : (isnan(_2250) ? _2251 : min(_2250, _2251));
            float _2423 = isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : min(_2413, 0.0));
            float _2424 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : min(_2414, 0.0));
            _2477 = ((abs(_2257 / _2246) * cbSceneParam._m0[80u].y) * ((((_2423 - _2424) * 2.0) - ((exp2(_2266 * (isnan(0.0) ? _2413 : (isnan(_2413) ? 0.0 : max(_2413, 0.0)))) - exp2(_2266 * (isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0))))) * _2412)) - ((exp2(_2268 * _2423) - exp2(_2268 * _2424)) * _2412))) + (_2260 * cbSceneParam._m0[80u].z);
        }
        vec4 _2479 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2170, _2171, 1.0), 0.0);
        float _2488 = exp2((_2477 * (-1.44269502162933349609375)) * (1.0 - _2479.w));
        float _2489 = log2(_2488);
        float _2505 = log2(_2190);
        _2270 = (exp2(_2505 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2489 * cbSceneParam._m0[78u].x)) * _2479.x) / cbSceneParam._m0[78u].x)) + _2187;
        _2272 = (exp2(_2505 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2489 * cbSceneParam._m0[78u].y)) * _2479.y) / cbSceneParam._m0[78u].y)) + _2188;
        _2274 = (exp2(_2505 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2489 * cbSceneParam._m0[78u].z)) * _2479.z) / cbSceneParam._m0[78u].z)) + _2189;
        _2276 = _2488 * _2190;
    }
    else
    {
        _2270 = _2187;
        _2272 = _2188;
        _2274 = _2189;
        _2276 = _2190;
    }
    float _2288 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2289 = _2288 == 3.0;
    float _2290 = log2(_2276);
    float _2297 = exp2(_2290 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0)));
    float _2298 = exp2(_2290 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2157 : (isnan(_2157) ? 0.0 : max(_2157, 0.0)));
    float _2299 = exp2(_2290 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2158 : (isnan(_2158) ? 0.0 : max(_2158, 0.0)));
    float _2308 = (_2288 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2308 * (_2289 ? _2297 : (_2297 + (cbSceneParam._m0[72u].w * _2270)));
    SV_Target.y = _2308 * (_2289 ? _2298 : (_2298 + (cbSceneParam._m0[72u].w * _2272)));
    SV_Target.z = _2308 * (_2289 ? _2299 : (_2299 + (cbSceneParam._m0[72u].w * _2274)));
    SV_Target.w = cbInstanceData._m0[_2162].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2162].w;
}


