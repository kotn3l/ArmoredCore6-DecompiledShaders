#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 2) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_12;
layout(set = 0, binding = 3) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _394;
uint _1902;
uint _1903;
uint _1904;
uint _2140;
uint _2141;
uint _2142;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _198 = _197 * _190;
    float _199 = _197 * _191;
    float _200 = _197 * _192;
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _208 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _209 = _208 * TANGENT.x;
    float _210 = _208 * TANGENT.y;
    float _211 = _208 * TANGENT.z;
    float _256 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _266 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _256);
    float _267 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _256);
    float _268 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _256);
    vec4 _303 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _319 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _326 = inversesqrt(dot(vec3(_209, _210, _211), vec3(_209, _210, _211)));
    float _338 = cbMtdParam._m0[24u].w + _266;
    float _339 = cbMtdParam._m0[25u].x + _267;
    float _340 = cbMtdParam._m0[25u].y + _268;
    float _357 = (-0.0) - dot(vec3(_338, _339, _340), vec3(_319 * _198, _319 * _199, _319 * _200));
    float _358 = (-0.0) - dot(vec3(_338, _339, _340), vec3(_326 * _209, _326 * _210, _326 * _211));
    float _359 = (-0.0) - dot(vec3(_338, _339, _340), vec3((-0.0) - (NORMAL.x * _204), (-0.0) - (NORMAL.y * _204), (-0.0) - (NORMAL.z * _204)));
    float _363 = inversesqrt(dot(vec3(_357, _358, _359), vec3(_357, _358, _359)));
    float _364 = _363 * _359;
    float _369 = ((cbMtdParam._m0[21u].z * _357) * _363) + (((_303.x * 2.0) + (-1.0)) * cbMtdParam._m0[22u].x);
    float _370 = ((cbMtdParam._m0[21u].w * _358) * _363) + (((_303.y * 2.0) + (-1.0)) * cbMtdParam._m0[22u].y);
    float _373 = fract(cbMtdParam._m0[21u].z * TEXCOORD.x);
    float _374 = fract(cbMtdParam._m0[21u].w * TEXCOORD.y);
    float _392;
    float _395;
    float _397;
    if (_369 > 0.0)
    {
        float _378 = (1.0 - _373) / _369;
        _392 = _378;
        _395 = ((cbMtdParam._m0[18u].w + 1.0) - fract(_378 * _364)) * 0.16666667163372039794921875;
        _397 = (fract((_378 * _370) + _374) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_369 < 0.0)
        {
            float _393 = ((-0.0) - _373) / _369;
            frontier_phi_3_2_ladder = (fract(_393 * _364) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
            frontier_phi_3_2_ladder_1 = _393;
            frontier_phi_3_2_ladder_2 = (fract((_393 * _370) + _374) * 0.16666667163372039794921875) + 0.666666686534881591796875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _394;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _392 = frontier_phi_3_2_ladder_1;
        _395 = frontier_phi_3_2_ladder;
        _397 = frontier_phi_3_2_ladder_2;
    }
    float _423;
    float _425;
    float _427;
    if (_370 > 0.0)
    {
        float _410 = (1.0 - _374) / _370;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_410 < _392)
        {
            frontier_phi_8_5_ladder = _410;
            frontier_phi_8_5_ladder_1 = (fract(_410 * _364) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_2 = (fract((_410 * _369) + _373) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
        }
        else
        {
            frontier_phi_8_5_ladder = _392;
            frontier_phi_8_5_ladder_1 = _397;
            frontier_phi_8_5_ladder_2 = _395;
        }
        _423 = frontier_phi_8_5_ladder;
        _425 = frontier_phi_8_5_ladder_2;
        _427 = frontier_phi_8_5_ladder_1;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_370 < 0.0)
        {
            float _424 = ((-0.0) - _374) / _370;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_424 < _392)
            {
                frontier_phi_8_6_ladder_9_ladder = _424;
                frontier_phi_8_6_ladder_9_ladder_1 = fract(_424 * _364) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = (fract((_424 * _369) + _373) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _392;
                frontier_phi_8_6_ladder_9_ladder_1 = _397;
                frontier_phi_8_6_ladder_9_ladder_2 = _395;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _392;
            frontier_phi_8_6_ladder_1 = _397;
            frontier_phi_8_6_ladder_2 = _395;
        }
        _423 = frontier_phi_8_6_ladder;
        _425 = frontier_phi_8_6_ladder_2;
        _427 = frontier_phi_8_6_ladder_1;
    }
    float _431 = (_364 > 0.0) ? (cbMtdParam._m0[18u].z / _364) : 5000.0;
    float _444;
    float _445;
    if (_431 < _423)
    {
        _444 = ((_373 + cbMtdParam._m0[18u].w) + (_431 * _369)) * 0.16666667163372039794921875;
        _445 = (((_431 * _370) + _374) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _444 = _425;
        _445 = _427;
    }
    vec4 _447 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_444, _445));
    float _2368 = isnan(0.0) ? cbMtdParam._m0[17u].z : (isnan(cbMtdParam._m0[17u].z) ? 0.0 : max(cbMtdParam._m0[17u].z, 0.0));
    float _461 = isnan(1.0) ? _2368 : (isnan(_2368) ? 1.0 : min(_2368, 1.0));
    float _2379 = isnan(0.0) ? cbMtdParam._m0[17u].y : (isnan(cbMtdParam._m0[17u].y) ? 0.0 : max(cbMtdParam._m0[17u].y, 0.0));
    float _504 = ((_461 - ((1.0 - (isnan(1.0) ? _2379 : (isnan(_2379) ? 1.0 : min(_2379, 1.0)))) * (_461 + 1.0))) + (((cbMtdParam._m0[18u].y * texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[3u].w)).x) + (cbMtdParam._m0[17u].x * texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w)).x)) / cbMtdParam._m0[17u].w)) / _461;
    float _2390 = isnan(0.0) ? _504 : (isnan(_504) ? 0.0 : max(_504, 0.0));
    float _505 = isnan(1.0) ? _2390 : (isnan(_2390) ? 1.0 : min(_2390, 1.0));
    float _507 = 3.0 - (_505 * 2.0);
    float _512 = _505 * _505;
    float _540 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _544 = inversesqrt(dot(vec3(_266, _267, _268), vec3(_266, _267, _268)));
    float _545 = _266 * _544;
    float _546 = _267 * _544;
    float _547 = _268 * _544;
    float _553 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _554 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _563 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_553 * cbSceneParam._m0[86u].x, _554 * cbSceneParam._m0[86u].y));
    float _566 = _563.x * TEXCOORD_4.z;
    float _567 = (-0.0) - _545;
    float _568 = (-0.0) - _546;
    float _569 = (-0.0) - _547;
    float _591 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _595 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _599 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _738;
    float _739;
    float _740;
    float _741;
    float _742;
    float _743;
    float _744;
    float _745;
    float _746;
    float _747;
    float _748;
    float _749;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _661 = (cbModelParam._m0[37u].x * ((((fma(_599, cbModelParam._m0[26u].z, fma(_595, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _591)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _663 = (cbModelParam._m0[37u].y * ((((fma(_599, cbModelParam._m0[27u].z, fma(_595, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _591)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _664 = (((((fma(_599, cbModelParam._m0[28u].z, fma(_595, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _591)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _667 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_661, _663, _664), 0.0);
        vec4 _674 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_661, _663, _664), 0.0);
        vec4 _681 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_661, _663, _664), 0.0);
        vec4 _688 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_661, _663, _664), 0.0);
        float _701 = exp2((_667.w + (-0.5)) * 20.0) * 2.0;
        float _711 = exp2((_674.w + (-0.5)) * 20.0) * 2.0;
        float _721 = exp2((_681.w + (-0.5)) * 20.0) * 2.0;
        float _731 = exp2((_688.w + (-0.5)) * 20.0) * 2.0;
        float _732 = _731 * (_688.x + (-0.5));
        float _733 = _731 * (_688.y + (-0.5));
        float _734 = _731 * (_688.z + (-0.5));
        _738 = _701 * (_667.z + (-0.5));
        _739 = _701 * (_667.y + (-0.5));
        _740 = _701 * (_667.x + (-0.5));
        _741 = _711 * (_674.z + (-0.5));
        _742 = _711 * (_674.y + (-0.5));
        _743 = _711 * (_674.x + (-0.5));
        _744 = _721 * (_681.z + (-0.5));
        _745 = _721 * (_681.y + (-0.5));
        _746 = _721 * (_681.x + (-0.5));
        _747 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
        _748 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
        _749 = isnan(0.0) ? _732 : (isnan(_732) ? 0.0 : max(_732, 0.0));
    }
    else
    {
        _738 = _394;
        _739 = _394;
        _740 = _394;
        _741 = _394;
        _742 = _394;
        _743 = _394;
        _744 = _394;
        _745 = _394;
        _746 = _394;
        _747 = _394;
        _748 = _394;
        _749 = _394;
    }
    float _877;
    float _878;
    float _879;
    float _880;
    float _881;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _803 = (cbModelParam._m0[38u].x * ((((fma(_599, cbModelParam._m0[30u].z, fma(_595, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _591)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _804 = (cbModelParam._m0[38u].y * ((((fma(_599, cbModelParam._m0[31u].z, fma(_595, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _591)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _805 = (((((fma(_599, cbModelParam._m0[32u].z, fma(_595, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _591)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _807 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_803, _804, _805), 0.0);
        vec4 _814 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_803, _804, _805), 0.0);
        vec4 _821 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_803, _804, _805), 0.0);
        vec4 _828 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_803, _804, _805), 0.0);
        float _840 = exp2((_807.w + (-0.5)) * 20.0) * 2.0;
        float _850 = exp2((_814.w + (-0.5)) * 20.0) * 2.0;
        float _860 = exp2((_821.w + (-0.5)) * 20.0) * 2.0;
        float _870 = exp2((_828.w + (-0.5)) * 20.0) * 2.0;
        float _871 = _870 * (_828.x + (-0.5));
        float _872 = _870 * (_828.y + (-0.5));
        float _873 = _870 * (_828.z + (-0.5));
        _877 = _840 * (_807.z + (-0.5));
        _878 = _840 * (_807.y + (-0.5));
        _879 = _840 * (_807.x + (-0.5));
        _880 = _850 * (_814.z + (-0.5));
        _881 = _850 * (_814.y + (-0.5));
        _882 = _850 * (_814.x + (-0.5));
        _883 = _860 * (_821.z + (-0.5));
        _884 = _860 * (_821.y + (-0.5));
        _885 = _860 * (_821.x + (-0.5));
        _886 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
        _887 = isnan(0.0) ? _872 : (isnan(_872) ? 0.0 : max(_872, 0.0));
        _888 = isnan(0.0) ? _871 : (isnan(_871) ? 0.0 : max(_871, 0.0));
    }
    else
    {
        _877 = _394;
        _878 = _394;
        _879 = _394;
        _880 = _394;
        _881 = _394;
        _882 = _394;
        _883 = _394;
        _884 = _394;
        _885 = _394;
        _886 = _394;
        _887 = _394;
        _888 = _394;
    }
    float _903 = _545 * (-0.5);
    float _904 = _546 * (-0.5);
    float _905 = _547 * (-0.5);
    float _906 = dot(vec4(_903, _904, _905, 1.0), vec4(_879, _882, _885, _888));
    float _909 = dot(vec4(_903, _904, _905, 1.0), vec4(_878, _881, _884, _887));
    float _912 = dot(vec4(_903, _904, _905, 1.0), vec4(_877, _880, _883, _886));
    float _947;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _919 = dot(vec4(_903, _904, _905, 1.0), vec4(_738, _741, _744, _747));
        float _923 = dot(vec4(_903, _904, _905, 1.0), vec4(_739, _742, _745, _748));
        float _927 = dot(vec4(_903, _904, _905, 1.0), vec4(_740, _743, _746, _749));
        float _934 = dot(vec4(cbModelParam._m0[39u]), vec4(_903, _904, _905, 1.0));
        _947 = dot(vec3(isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0)), isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0)), isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_934) ? 0.0 : (isnan(0.0) ? _934 : max(0.0, _934))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _947 = 1.0;
    }
    float _958;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _949 = dot(vec4(cbModelParam._m0[40u]), vec4(_903, _904, _905, 1.0));
        _958 = dot(vec3(isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0)), isnan(0.0) ? _909 : (isnan(_909) ? 0.0 : max(_909, 0.0)), isnan(0.0) ? _912 : (isnan(_912) ? 0.0 : max(_912, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_949) ? 0.0 : (isnan(0.0) ? _949 : max(0.0, _949))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _958 = 1.0;
    }
    float _962 = (_958 * cbModelParam._m0[1u].x) + (_947 * (1.0 - cbModelParam._m0[1u].x));
    float _968 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1050;
    float _1052;
    float _1054;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1017 = fma(_599, cbModelParam._m0[13u].z, fma(_595, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _591)) + cbModelParam._m0[13u].w;
        float _1021 = fma(_599, cbModelParam._m0[14u].z, fma(_595, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _591)) + cbModelParam._m0[14u].w;
        float _1025 = fma(_599, cbModelParam._m0[15u].z, fma(_595, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _591)) + cbModelParam._m0[15u].w;
        float _1028 = fma(_569, cbModelParam._m0[13u].z, fma(_568, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _567));
        float _1031 = fma(_569, cbModelParam._m0[14u].z, fma(_568, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _567));
        float _1034 = fma(_569, cbModelParam._m0[15u].z, fma(_568, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _567));
        float _1060;
        if (_1028 > 0.0)
        {
            _1060 = abs((1.0 - _1017) / _1028);
        }
        else
        {
            float frontier_phi_26_24_ladder;
            if (_1028 < 0.0)
            {
                frontier_phi_26_24_ladder = abs((_1017 + 1.0) / _1028);
            }
            else
            {
                frontier_phi_26_24_ladder = 5000.0;
            }
            _1060 = frontier_phi_26_24_ladder;
        }
        float _1360;
        if (_1031 > 0.0)
        {
            _1360 = abs((1.0 - _1021) / _1031);
        }
        else
        {
            float frontier_phi_35_31_ladder;
            if (_1031 < 0.0)
            {
                frontier_phi_35_31_ladder = abs((_1021 + 1.0) / _1031);
            }
            else
            {
                frontier_phi_35_31_ladder = 5000.0;
            }
            _1360 = frontier_phi_35_31_ladder;
        }
        float _1655;
        if (_1034 > 0.0)
        {
            _1655 = abs((1.0 - _1025) / _1034);
        }
        else
        {
            float frontier_phi_49_42_ladder;
            if (_1034 < 0.0)
            {
                frontier_phi_49_42_ladder = abs((_1025 + 1.0) / _1034);
            }
            else
            {
                frontier_phi_49_42_ladder = 5000.0;
            }
            _1655 = frontier_phi_49_42_ladder;
        }
        float _1657 = isnan(_1360) ? _1060 : (isnan(_1060) ? _1360 : min(_1060, _1360));
        float _1658 = isnan(_1655) ? _1657 : (isnan(_1657) ? _1655 : min(_1657, _1655));
        float _1662 = (_1658 * _1028) + _1017;
        float _1663 = (_1658 * _1031) + _1021;
        float _1664 = (_1658 * _1034) + _1025;
        float _1665 = _1658 * 9.9999997473787516355514526367188e-05;
        float _1666 = (-1.0) - _1665;
        float _1668 = _1665 + 1.0;
        float frontier_phi_25_49_ladder;
        float frontier_phi_25_49_ladder_1;
        float frontier_phi_25_49_ladder_2;
        if ((_1664 > _1668) || ((_1664 < _1666) || ((_1663 > _1668) || ((_1663 < _1666) || ((_1662 < _1666) || (_1662 > _1668))))))
        {
            frontier_phi_25_49_ladder = 0.0;
            frontier_phi_25_49_ladder_1 = 0.0;
            frontier_phi_25_49_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1775 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1664, cbModelParam._m0[9u].z, fma(_1663, cbModelParam._m0[9u].y, _1662 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1664, cbModelParam._m0[10u].z, fma(_1663, cbModelParam._m0[10u].y, _1662 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1664, cbModelParam._m0[11u].z, fma(_1663, cbModelParam._m0[11u].y, _1662 * cbModelParam._m0[11u].x))), _968);
            frontier_phi_25_49_ladder = _1775.z * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_1 = _1775.y * cbModelParam._m0[1u].y;
            frontier_phi_25_49_ladder_2 = _1775.x * cbModelParam._m0[1u].y;
        }
        _1050 = frontier_phi_25_49_ladder_2;
        _1052 = frontier_phi_25_49_ladder_1;
        _1054 = frontier_phi_25_49_ladder;
    }
    else
    {
        vec4 _1038 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_567, _568, _569), _968);
        _1050 = _1038.x * cbModelParam._m0[1u].y;
        _1052 = _1038.y * cbModelParam._m0[1u].y;
        _1054 = _1038.z * cbModelParam._m0[1u].y;
    }
    float _1057 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1146;
    float _1148;
    float _1150;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1110 = fma(_599, cbModelParam._m0[21u].z, fma(_595, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _591)) + cbModelParam._m0[21u].w;
        float _1114 = fma(_599, cbModelParam._m0[22u].z, fma(_595, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _591)) + cbModelParam._m0[22u].w;
        float _1118 = fma(_599, cbModelParam._m0[23u].z, fma(_595, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _591)) + cbModelParam._m0[23u].w;
        float _1121 = fma(_569, cbModelParam._m0[21u].z, fma(_568, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _567));
        float _1124 = fma(_569, cbModelParam._m0[22u].z, fma(_568, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _567));
        float _1127 = fma(_569, cbModelParam._m0[23u].z, fma(_568, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _567));
        float _1365;
        if (_1121 > 0.0)
        {
            _1365 = abs((1.0 - _1110) / _1121);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1121 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1110 + 1.0) / _1121);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1365 = frontier_phi_37_33_ladder;
        }
        float _1681;
        if (_1124 > 0.0)
        {
            _1681 = abs((1.0 - _1114) / _1124);
        }
        else
        {
            float frontier_phi_51_44_ladder;
            if (_1124 < 0.0)
            {
                frontier_phi_51_44_ladder = abs((_1114 + 1.0) / _1124);
            }
            else
            {
                frontier_phi_51_44_ladder = 5000.0;
            }
            _1681 = frontier_phi_51_44_ladder;
        }
        float _1832;
        if (_1127 > 0.0)
        {
            _1832 = abs((1.0 - _1118) / _1127);
        }
        else
        {
            float frontier_phi_65_60_ladder;
            if (_1127 < 0.0)
            {
                frontier_phi_65_60_ladder = abs((_1118 + 1.0) / _1127);
            }
            else
            {
                frontier_phi_65_60_ladder = 5000.0;
            }
            _1832 = frontier_phi_65_60_ladder;
        }
        float _1834 = isnan(_1681) ? _1365 : (isnan(_1365) ? _1681 : min(_1365, _1681));
        float _1835 = isnan(_1832) ? _1834 : (isnan(_1834) ? _1832 : min(_1834, _1832));
        float _1839 = (_1835 * _1121) + _1110;
        float _1840 = (_1835 * _1124) + _1114;
        float _1841 = (_1835 * _1127) + _1118;
        float _1842 = _1835 * 9.9999997473787516355514526367188e-05;
        float _1843 = (-1.0) - _1842;
        float _1845 = _1842 + 1.0;
        float frontier_phi_34_65_ladder;
        float frontier_phi_34_65_ladder_1;
        float frontier_phi_34_65_ladder_2;
        if ((_1841 > _1845) || ((_1841 < _1843) || ((_1840 > _1845) || ((_1840 < _1843) || ((_1839 < _1843) || (_1839 > _1845))))))
        {
            frontier_phi_34_65_ladder = 0.0;
            frontier_phi_34_65_ladder_1 = 0.0;
            frontier_phi_34_65_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2001 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1841, cbModelParam._m0[17u].z, fma(_1840, cbModelParam._m0[17u].y, _1839 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1841, cbModelParam._m0[18u].z, fma(_1840, cbModelParam._m0[18u].y, _1839 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1841, cbModelParam._m0[19u].z, fma(_1840, cbModelParam._m0[19u].y, _1839 * cbModelParam._m0[19u].x))), _1057);
            frontier_phi_34_65_ladder = _2001.z * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_1 = _2001.y * cbModelParam._m0[1u].z;
            frontier_phi_34_65_ladder_2 = _2001.x * cbModelParam._m0[1u].z;
        }
        _1146 = frontier_phi_34_65_ladder_2;
        _1148 = frontier_phi_34_65_ladder_1;
        _1150 = frontier_phi_34_65_ladder;
    }
    else
    {
        vec4 _1130 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_567, _568, _569), _1057);
        _1146 = _1130.x * cbModelParam._m0[1u].z;
        _1148 = _1130.y * cbModelParam._m0[1u].z;
        _1150 = _1130.z * cbModelParam._m0[1u].z;
    }
    float _1162 = _566 * 0.01200000010430812835693359375;
    float _1164 = _1162 * ((cbModelParam._m0[1u].w * (_1146 - _1050)) + _1050);
    float _1165 = _1162 * ((cbModelParam._m0[1u].w * (_1148 - _1052)) + _1052);
    float _1166 = _1162 * ((cbModelParam._m0[1u].w * (_1150 - _1054)) + _1054);
    float _1187 = fma(_1166, cbSceneParam._m0[89u].z, fma(_1165, cbSceneParam._m0[89u].y, _1164 * cbSceneParam._m0[89u].x));
    float _1190 = fma(_1166, cbSceneParam._m0[90u].z, fma(_1165, cbSceneParam._m0[90u].y, _1164 * cbSceneParam._m0[90u].x));
    float _1193 = fma(_1166, cbSceneParam._m0[91u].z, fma(_1165, cbSceneParam._m0[91u].y, _1164 * cbSceneParam._m0[91u].x));
    vec4 _1201 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_553, _554));
    float _1203 = _1201.w;
    uint _1219 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1224 = floatBitsToUint(cbInstanceData._m0[_1219 + 5u]);
    uint _1226 = _1224.x * 14u;
    uint _1227 = _1226 + 13u;
    float _1232 = _566 + (-1.0);
    float _1235 = (cbLight._m0[_1227].x * _1232) + 1.0;
    float _1236 = (cbLight._m0[_1227].y * _1232) + 1.0;
    uint _1237 = _1226 + 8u;
    float _1248 = cbLight._m0[_1226].x + _545;
    float _1249 = cbLight._m0[_1226].y + _546;
    float _1250 = cbLight._m0[_1226].z + _547;
    float _1254 = inversesqrt(dot(vec3(_1248, _1249, _1250), vec3(_1248, _1249, _1250)));
    float _1258 = dot(vec3(0.0), vec3(cbLight._m0[_1226].xyz));
    float _2516 = isnan(0.0) ? _1258 : (isnan(_1258) ? 0.0 : max(_1258, 0.0));
    float _1261 = isnan(1.0) ? _2516 : (isnan(_2516) ? 1.0 : min(_2516, 1.0));
    float _1262 = dot(vec3(0.0), vec3(_545, _546, _547));
    float _2527 = isnan(0.0) ? _1262 : (isnan(_1262) ? 0.0 : max(_1262, 0.0));
    float _1265 = isnan(1.0) ? _2527 : (isnan(_2527) ? 1.0 : min(_2527, 1.0));
    float _1266 = dot(vec3(cbLight._m0[_1226].xyz), vec3(_1248 * _1254, _1249 * _1254, _1250 * _1254));
    float _2538 = isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0));
    float _1277 = (exp2(log2(1.0 - (isnan(1.0) ? _2538 : (isnan(_2538) ? 1.0 : min(_2538, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1283 = (0.5 / ((_1261 + 9.9999999392252902907785028219223e-09) + _1265)) * _1261;
    float _2549 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
    float _1285 = (isnan(1.0) ? _2549 : (isnan(_2549) ? 1.0 : min(_2549, 1.0))) * 0.31831014156341552734375;
    float _1287 = isnan(1.0) ? _1235 : (isnan(_1235) ? 1.0 : min(_1235, 1.0));
    uint _1300 = _1226 + 9u;
    uint _1306 = _1226 | 1u;
    float _1312 = cbLight._m0[_1306].x + _545;
    float _1313 = cbLight._m0[_1306].y + _546;
    float _1314 = cbLight._m0[_1306].z + _547;
    float _1318 = inversesqrt(dot(vec3(_1312, _1313, _1314), vec3(_1312, _1313, _1314)));
    float _1322 = dot(vec3(0.0), vec3(cbLight._m0[_1306].xyz));
    float _2565 = isnan(0.0) ? _1322 : (isnan(_1322) ? 0.0 : max(_1322, 0.0));
    float _1325 = isnan(1.0) ? _2565 : (isnan(_2565) ? 1.0 : min(_2565, 1.0));
    float _1326 = dot(vec3(cbLight._m0[_1306].xyz), vec3(_1312 * _1318, _1313 * _1318, _1314 * _1318));
    float _2576 = isnan(0.0) ? _1326 : (isnan(_1326) ? 0.0 : max(_1326, 0.0));
    float _1335 = (exp2(log2(1.0 - (isnan(1.0) ? _2576 : (isnan(_2576) ? 1.0 : min(_2576, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1339 = (0.5 / ((_1325 + 9.9999999392252902907785028219223e-09) + _1265)) * _1325;
    float _2587 = isnan(0.0) ? _1339 : (isnan(_1339) ? 0.0 : max(_1339, 0.0));
    float _1341 = (isnan(1.0) ? _2587 : (isnan(_2587) ? 1.0 : min(_2587, 1.0))) * 0.31831014156341552734375;
    float _1342 = isnan(1.0) ? _1236 : (isnan(_1236) ? 1.0 : min(_1236, 1.0));
    float _1352 = (((_1335 * cbLight._m0[_1300].x) * _1341) * _1342) + ((((cbLight._m0[_1237].x * ((1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1203))) * _1277) * _1285) * _1287);
    float _1353 = (((_1335 * cbLight._m0[_1300].y) * _1341) * _1342) + ((((cbLight._m0[_1237].y * ((1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1203))) * _1277) * _1285) * _1287);
    float _1354 = (((_1335 * cbLight._m0[_1300].z) * _1341) * _1342) + ((((cbLight._m0[_1237].z * ((1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1203))) * _1277) * _1285) * _1287);
    float _1471;
    float _1473;
    float _1475;
    if (_1224.y == 0u)
    {
        float _1410 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1411 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1410;
        float _1412 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1410;
        float _1413 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1410;
        uvec4 _1425 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1426 = _1425.x;
        uint _1437 = uint((float(_1425.y) * floor(float(uint(cbSceneParam._m0[85u].y * _554) / _1426))) + floor(float(uint(cbSceneParam._m0[85u].x * _553) / _1426)));
        float _1447 = (log2(_1413 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1448 = isnan(0.0) ? _1447 : (isnan(_1447) ? 0.0 : max(_1447, 0.0));
        uint _1451 = uint(isnan(14.0) ? _1448 : (isnan(_1448) ? 14.0 : min(_1448, 14.0)));
        uvec4 _1456 = texelFetch(g_lightClusterGridBuffer, int(((_1451 << 2u) + (_1437 << 6u)) >> 2u));
        uint _1457 = _1456.x;
        uint _1458 = _1425.z;
        float _1548;
        float _1550;
        float _1552;
        if (((((1u << ((_1458 >> 4u) & 15u)) + 4294967295u) & _1457) == 0u) || ((_1458 & 240u) == 0u))
        {
            _1548 = 0.0;
            _1550 = 0.0;
            _1552 = 0.0;
        }
        else
        {
            float _1549;
            float _1551;
            float _1553;
            float _1706 = 0.0;
            float _1707 = 0.0;
            float _1708 = 0.0;
            uint _1709 = 0u;
            uint _1718;
            bool _1719;
            for (;;)
            {
                _1718 = texelFetch(g_lightClassification, int((((_1451 << 5u) + (_1437 << 9u)) + (_1709 << 2u)) >> 2u)).x;
                _1719 = _1718 == 0u;
                float frontier_phi_62_pred;
                float frontier_phi_62_pred_1;
                float frontier_phi_62_pred_2;
                if (_1719)
                {
                    frontier_phi_62_pred = _1708;
                    frontier_phi_62_pred_1 = _1707;
                    frontier_phi_62_pred_2 = _1706;
                }
                else
                {
                    float _1872;
                    float _1873;
                    float _1874;
                    uint _1875;
                    _1872 = _1706;
                    _1873 = _1707;
                    _1874 = _1708;
                    _1875 = _1718;
                    float _1784;
                    float _1785;
                    float _1786;
                    for (;;)
                    {
                        uint _1879 = uint(findLSB(_1875)) + (_1709 << 5u);
                        uint _1876 = (_1875 + 4294967295u) & _1875;
                        uint _1881 = _1879 * 48u;
                        vec4 _1895 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_1881)).x, texelFetch(g_PointLightRenderingBuffer, int(_1881 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1881 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1881 + 3u)).x));
                        uint _1912 = (_1879 * 48u) + 8u;
                        vec3 _1923 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_1912)).x, texelFetch(g_PointLightRenderingBuffer, int(_1912 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_1912 + 2u)).x));
                        float _1927 = _1895.x - _1411;
                        float _1928 = _1895.y - _1412;
                        float _1929 = _1895.z - _1413;
                        float _1930 = dot(vec3(_1927, _1928, _1929), vec3(_1927, _1928, _1929));
                        float _1933 = inversesqrt(_1930);
                        float _1942 = 1.0 - (_1930 * _1895.w);
                        float _2613 = isnan(0.0) ? _1942 : (isnan(_1942) ? 0.0 : max(_1942, 0.0));
                        float _1944 = sqrt(_1930) * uintBitsToFloat(uvec4(_1902, _1903, _1904, texelFetch(g_PointLightRenderingBuffer, int(((_1879 * 48u) + 4u) + 3u)).x)).w;
                        float _1947 = 1.39999997615814208984375 / (_1944 + 1.39999997615814208984375);
                        float _1948 = _1947 * _1947;
                        float _1951 = ((1.0 - _1948) * dot(vec3(0.0), vec3(_1933 * _1927, _1933 * _1928, _1933 * _1929))) + _1948;
                        float _1953 = (-0.0) - _1411;
                        float _1954 = (-0.0) - _1412;
                        float _1955 = (-0.0) - _1413;
                        float _1959 = inversesqrt(dot(vec3(_1953, _1954, _1955), vec3(_1953, _1954, _1955)));
                        float _1963 = dot(vec3(0.0), vec3(_1959 * _1953, _1959 * _1954, _1959 * _1955));
                        float _2624 = isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0));
                        float _2635 = isnan(0.0) ? _1951 : (isnan(_1951) ? 0.0 : max(_1951, 0.0));
                        float _1967 = isnan(1.0) ? _2635 : (isnan(_2635) ? 1.0 : min(_2635, 1.0));
                        float _1971 = (0.5 / (((isnan(1.0) ? _2624 : (isnan(_2624) ? 1.0 : min(_2624, 1.0))) + 9.9999999392252902907785028219223e-09) + _1967)) * _1967;
                        float _2646 = isnan(0.0) ? _1971 : (isnan(_1971) ? 0.0 : max(_1971, 0.0));
                        float _1980 = (((isnan(1.0) ? _2646 : (isnan(_2646) ? 1.0 : min(_2646, 1.0))) * 3.1415927410125732421875) / (((_1944 * _1944) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2613 : (isnan(_2613) ? 1.0 : min(_2613, 1.0)));
                        _1784 = (_1980 * _1923.x) + _1872;
                        _1785 = (_1980 * _1923.y) + _1873;
                        _1786 = (_1980 * _1923.z) + _1874;
                        if (_1876 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _1872 = _1784;
                            _1873 = _1785;
                            _1874 = _1786;
                            _1875 = _1876;
                        }
                    }
                    frontier_phi_62_pred = _1786;
                    frontier_phi_62_pred_1 = _1785;
                    frontier_phi_62_pred_2 = _1784;
                }
                _1553 = frontier_phi_62_pred;
                _1551 = frontier_phi_62_pred_1;
                _1549 = frontier_phi_62_pred_2;
                uint _1710 = _1709 + 1u;
                if (_1710 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1706 = _1549;
                    _1707 = _1551;
                    _1708 = _1553;
                    _1709 = _1710;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1548 = _1549;
            _1550 = _1551;
            _1552 = _1553;
        }
        uvec4 _1556 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1557 = _1556.z;
        uint _1559 = (_1557 >> 8u) & 15u;
        float _1686;
        float _1688;
        float _1690;
        if (((4294967295u << _1559) & _1457) == 0u)
        {
            _1686 = _1548;
            _1688 = _1550;
            _1690 = _1552;
        }
        else
        {
            float _1702 = inversesqrt(dot(vec3(_1411, _1412, _1413), vec3(_1411, _1412, _1413)));
            float frontier_phi_53_54_ladder;
            float frontier_phi_53_54_ladder_1;
            float frontier_phi_53_54_ladder_2;
            if (_1559 < ((_1557 >> 12u) & 15u))
            {
                float _1687;
                float _1689;
                float _1691;
                float _1858 = _1548;
                float _1859 = _1550;
                float _1860 = _1552;
                uint _1861 = _1559;
                uint _1870;
                bool _1871;
                for (;;)
                {
                    _1870 = texelFetch(g_lightClassification, int((((_1451 << 5u) + (_1437 << 9u)) + (_1861 << 2u)) >> 2u)).x;
                    _1871 = _1870 == 0u;
                    float frontier_phi_71_pred;
                    float frontier_phi_71_pred_1;
                    float frontier_phi_71_pred_2;
                    if (_1871)
                    {
                        frontier_phi_71_pred = _1860;
                        frontier_phi_71_pred_1 = _1859;
                        frontier_phi_71_pred_2 = _1858;
                    }
                    else
                    {
                        float _2006;
                        float _2007;
                        float _2008;
                        float _2229;
                        float _2230;
                        float _2231;
                        float _2016 = _1858;
                        float _2017 = _1859;
                        float _2018 = _1860;
                        uint _2019 = _1870;
                        uint _2020;
                        uint _2030;
                        vec4 _2045;
                        float _2046;
                        vec3 _2058;
                        vec4 _2074;
                        vec4 _2090;
                        float _2136;
                        bool _2137;
                        for (;;)
                        {
                            _2030 = ((_1861 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2019));
                            _2020 = (_2019 + 4294967295u) & _2019;
                            uint _2032 = _2030 * 40u;
                            _2045 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2032)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2032 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2032 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2032 + 3u)).x));
                            _2046 = _2045.w;
                            uint _2048 = (_2030 * 40u) + 8u;
                            _2058 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2048)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2048 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2048 + 2u)).x));
                            uint _2061 = (_2030 * 40u) + 16u;
                            _2074 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2061)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2061 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2061 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2061 + 3u)).x));
                            uint _2077 = (_2030 * 40u) + 20u;
                            _2090 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2077)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2077 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2077 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2077 + 3u)).x));
                            uint _2092 = (_2030 * 40u) + 24u;
                            vec4 _2105 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2092)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2092 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2092 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2092 + 3u)).x));
                            uint _2111 = (_2030 * 40u) + 28u;
                            vec4 _2124 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2111)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2111 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2111 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2111 + 3u)).x));
                            _2136 = fma(_1413, _2124.z, fma(_1412, _2124.y, _2124.x * _1411)) + _2124.w;
                            _2137 = !((fma(_1413, _2105.z, fma(_1412, _2105.y, _2105.x * _1411)) + _2105.w) <= 0.0);
                            float frontier_phi_77_pred;
                            float frontier_phi_77_pred_1;
                            float frontier_phi_77_pred_2;
                            if (_2137)
                            {
                                float _2171 = _2045.x - _1411;
                                float _2172 = _2045.y - _1412;
                                float _2173 = _2045.z - _1413;
                                float _2174 = dot(vec3(_2171, _2172, _2173), vec3(_2171, _2172, _2173));
                                float _2177 = inversesqrt(_2174);
                                float _2184 = 1.0 - (_2174 / (_2046 * _2046));
                                float _2657 = isnan(0.0) ? _2184 : (isnan(_2184) ? 0.0 : max(_2184, 0.0));
                                float _2186 = sqrt(_2174) * uintBitsToFloat(uvec4(_2140, _2141, _2142, texelFetch(g_SpotLightRenderingBuffer, int(((_2030 * 40u) + 4u) + 3u)).x)).w;
                                float _2188 = 1.39999997615814208984375 / (_2186 + 1.39999997615814208984375);
                                float _2189 = _2188 * _2188;
                                float _2192 = (fma(_1413, _2074.z, fma(_1412, _2074.y, _2074.x * _1411)) + _2074.w) / _2136;
                                float _2193 = (fma(_1413, _2090.z, fma(_1412, _2090.y, _2090.x * _1411)) + _2090.w) / _2136;
                                float _2197 = 1.0 - dot(vec2(_2192, _2193), vec2(_2192, _2193));
                                float _2668 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
                                float _2205 = dot(vec3(0.0), vec3((-0.0) - (_1411 * _1702), (-0.0) - (_1412 * _1702), (-0.0) - (_1413 * _1702)));
                                float _2679 = isnan(0.0) ? _2205 : (isnan(_2205) ? 0.0 : max(_2205, 0.0));
                                float _2213 = ((1.0 - _2189) * dot(vec3(0.0), vec3(_2177 * _2171, _2177 * _2172, _2177 * _2173))) + _2189;
                                float _2690 = isnan(0.0) ? _2213 : (isnan(_2213) ? 0.0 : max(_2213, 0.0));
                                float _2214 = isnan(1.0) ? _2690 : (isnan(_2690) ? 1.0 : min(_2690, 1.0));
                                float _2218 = (0.5 / (((isnan(1.0) ? _2679 : (isnan(_2679) ? 1.0 : min(_2679, 1.0))) + 9.9999999392252902907785028219223e-09) + _2214)) * _2214;
                                float _2701 = isnan(0.0) ? _2218 : (isnan(_2218) ? 0.0 : max(_2218, 0.0));
                                float _2225 = ((isnan(1.0) ? _2668 : (isnan(_2668) ? 1.0 : min(_2668, 1.0))) * (isnan(1.0) ? _2657 : (isnan(_2657) ? 1.0 : min(_2657, 1.0)))) * (((isnan(1.0) ? _2701 : (isnan(_2701) ? 1.0 : min(_2701, 1.0))) * 3.1415927410125732421875) / (((_2186 * _2186) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_77_pred = _2225 * _2058.z;
                                frontier_phi_77_pred_1 = _2225 * _2058.x;
                                frontier_phi_77_pred_2 = _2225 * _2058.y;
                            }
                            else
                            {
                                frontier_phi_77_pred = 0.0;
                                frontier_phi_77_pred_1 = 0.0;
                                frontier_phi_77_pred_2 = 0.0;
                            }
                            _2231 = frontier_phi_77_pred;
                            _2229 = frontier_phi_77_pred_1;
                            _2230 = frontier_phi_77_pred_2;
                            _2006 = _2229 + _2016;
                            _2007 = _2230 + _2017;
                            _2008 = _2231 + _2018;
                            if (_2020 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2016 = _2006;
                                _2017 = _2007;
                                _2018 = _2008;
                                _2019 = _2020;
                                continue;
                            }
                        }
                        frontier_phi_71_pred = _2008;
                        frontier_phi_71_pred_1 = _2007;
                        frontier_phi_71_pred_2 = _2006;
                    }
                    _1691 = frontier_phi_71_pred;
                    _1689 = frontier_phi_71_pred_1;
                    _1687 = frontier_phi_71_pred_2;
                    uint _1862 = _1861 + 1u;
                    if (_1862 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _1858 = _1687;
                        _1859 = _1689;
                        _1860 = _1691;
                        _1861 = _1862;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_53_54_ladder = _1689;
                frontier_phi_53_54_ladder_1 = _1687;
                frontier_phi_53_54_ladder_2 = _1691;
            }
            else
            {
                frontier_phi_53_54_ladder = _1550;
                frontier_phi_53_54_ladder_1 = _1548;
                frontier_phi_53_54_ladder_2 = _1552;
            }
            _1686 = frontier_phi_53_54_ladder_1;
            _1688 = frontier_phi_53_54_ladder;
            _1690 = frontier_phi_53_54_ladder_2;
        }
        float _1695 = isnan(1.0) ? _566 : (isnan(_566) ? 1.0 : min(_566, 1.0));
        _1471 = ((_1686 * 0.039999999105930328369140625) * _1695) + _1352;
        _1473 = ((_1688 * 0.039999999105930328369140625) * _1695) + _1353;
        _1475 = ((_1690 * 0.039999999105930328369140625) * _1695) + _1354;
    }
    else
    {
        _1471 = _1352;
        _1473 = _1353;
        _1475 = _1354;
    }
    uint _1482 = (_1219 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1497 = (((((_512 * (cbMtdParam._m0[15u].x - cbMtdParam._m0[13u].x)) * _507) + cbMtdParam._m0[13u].x) * _447.x) * cbInstanceData._m0[_1482].x) + ((_1471 + ((isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0))) * _962)) * cbPerFrame._m0[3u].x);
    float _1498 = (((((_512 * (cbMtdParam._m0[15u].y - cbMtdParam._m0[13u].y)) * _507) + cbMtdParam._m0[13u].y) * _447.y) * cbInstanceData._m0[_1482].y) + ((_1473 + ((isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0))) * _962)) * cbPerFrame._m0[3u].x);
    float _1499 = (((((_512 * (cbMtdParam._m0[15u].z - cbMtdParam._m0[13u].z)) * _507) + cbMtdParam._m0[13u].z) * _447.z) * cbInstanceData._m0[_1482].z) + ((_1475 + ((isnan(0.0) ? _1193 : (isnan(_1193) ? 0.0 : max(_1193, 0.0))) * _962)) * cbPerFrame._m0[3u].x);
    uint _1503 = _1219 + 6u;
    float _1511 = _553 / cbSceneParam._m0[86u].x;
    float _1512 = _554 / cbSceneParam._m0[86u].y;
    vec4 _1526 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1511, _1512, (log2((isnan(cbSceneParam._m0[77u].w) ? _540 : (isnan(_540) ? cbSceneParam._m0[77u].w : min(_540, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1528 = _1526.x;
    float _1529 = _1526.y;
    float _1530 = _1526.z;
    float _1531 = _1526.w;
    float _1605;
    float _1607;
    float _1609;
    float _1611;
    if (_540 > cbSceneParam._m0[78u].w)
    {
        float _1567 = isnan(_540) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _540 : min(cbSceneParam._m0[80u].w, _540));
        float _1568 = _1567 / _540;
        float _1579 = _1568 * _266;
        float _1580 = _267 * _1568;
        float _1581 = (-0.0) - _1580;
        float _1582 = _1568 * _268;
        float _1584 = (cbSceneParam._m0[77u].w * _1581) / _1567;
        float _1585 = _1584 + cbSceneParam._m0[79u].w;
        float _1586 = cbSceneParam._m0[79u].w - _1580;
        float _1592 = sqrt(((_1579 * _1579) + (_1580 * _1580)) + (_1582 * _1582));
        float _1595 = (1.0 - (cbSceneParam._m0[77u].w / _1567)) * _1592;
        float _1601 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1603 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1794;
        if (abs((_1581 - _1584) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1794 = ((((_1585 > 0.0) ? exp2(_1601 * _1585) : (2.0 - exp2(_1603 * _1585))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1595;
        }
        else
        {
            float _1732 = 1.0 / cbSceneParam._m0[80u].x;
            float _1733 = isnan(_1586) ? _1585 : (isnan(_1585) ? _1586 : max(_1585, _1586));
            float _1734 = isnan(_1586) ? _1585 : (isnan(_1585) ? _1586 : min(_1585, _1586));
            float _1743 = isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : min(_1733, 0.0));
            float _1744 = isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : min(_1734, 0.0));
            _1794 = ((abs(_1592 / _1581) * cbSceneParam._m0[80u].y) * ((((_1743 - _1744) * 2.0) - ((exp2(_1601 * (isnan(0.0) ? _1733 : (isnan(_1733) ? 0.0 : max(_1733, 0.0)))) - exp2(_1601 * (isnan(0.0) ? _1734 : (isnan(_1734) ? 0.0 : max(_1734, 0.0))))) * _1732)) - ((exp2(_1603 * _1743) - exp2(_1603 * _1744)) * _1732))) + (_1595 * cbSceneParam._m0[80u].z);
        }
        vec4 _1796 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1511, _1512, 1.0), 0.0);
        float _1805 = exp2((_1794 * (-1.44269502162933349609375)) * (1.0 - _1796.w));
        float _1806 = log2(_1805);
        float _1822 = log2(_1531);
        _1605 = (exp2(_1822 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1806 * cbSceneParam._m0[78u].x)) * _1796.x) / cbSceneParam._m0[78u].x)) + _1528;
        _1607 = (exp2(_1822 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1806 * cbSceneParam._m0[78u].y)) * _1796.y) / cbSceneParam._m0[78u].y)) + _1529;
        _1609 = (exp2(_1822 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1806 * cbSceneParam._m0[78u].z)) * _1796.z) / cbSceneParam._m0[78u].z)) + _1530;
        _1611 = _1805 * _1531;
    }
    else
    {
        _1605 = _1528;
        _1607 = _1529;
        _1609 = _1530;
        _1611 = _1531;
    }
    float _1623 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1624 = _1623 == 3.0;
    float _1625 = log2(_1611);
    float _1632 = exp2(_1625 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _1497 : (isnan(_1497) ? 0.0 : max(_1497, 0.0)));
    float _1633 = exp2(_1625 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0)));
    float _1634 = exp2(_1625 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _1499 : (isnan(_1499) ? 0.0 : max(_1499, 0.0)));
    float _1643 = (_1623 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _1643 * (_1624 ? _1632 : (_1632 + (cbSceneParam._m0[72u].w * _1605)));
    SV_Target.y = _1643 * (_1624 ? _1633 : (_1633 + (cbSceneParam._m0[72u].w * _1607)));
    SV_Target.z = _1643 * (_1624 ? _1634 : (_1634 + (cbSceneParam._m0[72u].w * _1609)));
    SV_Target.w = cbInstanceData._m0[_1503].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1503].w;
}


