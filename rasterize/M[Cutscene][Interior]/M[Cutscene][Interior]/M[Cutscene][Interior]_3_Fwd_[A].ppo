#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 10) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_8;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _925;
uint _2100;
uint _2101;
uint _2102;
uint _2345;
uint _2346;
uint _2347;
float _2618;
float _2619;
float _2620;
float _2621;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _188 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _189 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _190 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _195 = inversesqrt(dot(vec3(_188, _189, _190), vec3(_188, _189, _190)));
    float _202 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _209 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _257 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _267 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _257);
    float _268 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _257);
    float _269 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _257);
    vec4 _288 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _323 = cbMtdParam._m0[24u].x + _267;
    float _324 = cbMtdParam._m0[24u].y + _268;
    float _325 = cbMtdParam._m0[24u].z + _269;
    float _339 = (-0.0) - dot(vec3(_323, _324, _325), vec3(_195 * _188, _195 * _189, _195 * _190));
    float _340 = (-0.0) - dot(vec3(_323, _324, _325), vec3(_209 * TANGENT.x, _209 * TANGENT.y, _209 * TANGENT.z));
    float _341 = (-0.0) - dot(vec3(_323, _324, _325), vec3((-0.0) - (_202 * NORMAL.x), (-0.0) - (_202 * NORMAL.y), (-0.0) - (_202 * NORMAL.z)));
    float _345 = inversesqrt(dot(vec3(_339, _340, _341), vec3(_339, _340, _341)));
    float _348 = _345 * _341;
    float _349 = (_345 * _339) + (((_288.x * 2.0) + (-1.0)) * cbMtdParam._m0[22u].x);
    float _350 = (_345 * _340) + (((_288.y * 2.0) + (-1.0)) * cbMtdParam._m0[22u].y);
    float _351 = _349 * cbMtdParam._m0[20u].w;
    float _352 = _350 * cbMtdParam._m0[20u].z;
    float _353 = fract(TEXCOORD.x);
    float _354 = fract(TEXCOORD.y);
    float _360;
    if (_351 > 0.0)
    {
        _360 = (1.0 - _353) / _351;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_351 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _353) / _351;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _360 = frontier_phi_3_2_ladder;
    }
    float _368;
    if (_352 > 0.0)
    {
        _368 = (1.0 - _354) / _352;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_352 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _354) / _352;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _368 = frontier_phi_7_6_ladder;
    }
    bool _370 = _348 > 0.0;
    float _372 = _370 ? (cbMtdParam._m0[16u].x / _348) : 5000.0;
    float _373 = isnan(_368) ? _360 : (isnan(_360) ? _368 : min(_360, _368));
    float _374 = isnan(_372) ? _373 : (isnan(_373) ? _372 : min(_373, _372));
    float _378 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _379 = _353 + (-0.5);
    float _382 = _354 + (-0.5);
    float _385 = ((_374 * _348) + _378) / _378;
    vec4 _410 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (((((_379 + (_374 * _351)) / _385) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (((((_382 + (_374 * _352)) / _385) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    float _420 = cbMtdParam._m0[9u].x * _410.x;
    float _421 = cbMtdParam._m0[9u].y * _410.y;
    float _422 = cbMtdParam._m0[9u].z * _410.z;
    float _441 = _349 * cbMtdParam._m0[22u].w;
    float _442 = _350 * cbMtdParam._m0[22u].z;
    bool _443 = _441 > 0.0;
    float _448;
    if (_443)
    {
        _448 = (1.0 - _353) / _441;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_441 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _353) / _441;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _448 = frontier_phi_11_10_ladder;
    }
    bool _450 = _442 > 0.0;
    float _455;
    if (_450)
    {
        _455 = (1.0 - _354) / _442;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_442 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _354) / _442;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _455 = frontier_phi_15_14_ladder;
    }
    float _458 = _370 ? (cbMtdParam._m0[18u].x / _348) : 5000.0;
    float _459 = isnan(_455) ? _448 : (isnan(_448) ? _455 : min(_448, _455));
    float _460 = isnan(_458) ? _459 : (isnan(_459) ? _458 : min(_459, _458));
    float _464 = cbMtdParam._m0[19u].y * cbMtdParam._m0[18u].x;
    float _468 = ((_460 * _348) + _464) / _464;
    float _473 = cbMtdParam._m0[19u].x - cbMtdParam._m0[20u].x * trunc(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    float _475 = floor(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    vec4 _491 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_379 + (_460 * _441)) / _468) + 0.5) + _473) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_382 + (_460 * _442)) / _468) + 0.5) + _475) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[0u].w));
    float _503;
    if (_443)
    {
        _503 = (1.0 - _353) / _441;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_441 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _353) / _441;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _503 = frontier_phi_19_18_ladder;
    }
    float _509;
    if (_450)
    {
        _509 = (1.0 - _354) / _442;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_442 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _354) / _442;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _509 = frontier_phi_23_22_ladder;
    }
    float _511 = isnan(_509) ? _503 : (isnan(_503) ? _509 : min(_503, _509));
    float _512 = isnan(_458) ? _511 : (isnan(_511) ? _458 : min(_511, _458));
    float _519 = ((_512 * _348) + _464) / _464;
    vec4 _539 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_379 + (_512 * _441)) / _519) + 0.5) + _473) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_382 + (_512 * _442)) / _519) + 0.5) + _475) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[8u].w));
    float _541 = _539.x;
    float _548 = (_541 * ((_491.x * cbMtdParam._m0[10u].x) - _420)) + _420;
    float _549 = (_541 * ((_491.y * cbMtdParam._m0[10u].y) - _421)) + _421;
    float _550 = (_541 * ((_491.z * cbMtdParam._m0[10u].z) - _422)) + _422;
    float _566 = _349 * cbMtdParam._m0[23u].y;
    float _567 = _350 * cbMtdParam._m0[23u].x;
    bool _568 = _566 > 0.0;
    float _573;
    if (_568)
    {
        _573 = (1.0 - _353) / _566;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_566 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _353) / _566;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _573 = frontier_phi_27_26_ladder;
    }
    bool _575 = _567 > 0.0;
    float _580;
    if (_575)
    {
        _580 = (1.0 - _354) / _567;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_567 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _354) / _567;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _580 = frontier_phi_31_30_ladder;
    }
    float _583 = _370 ? (cbMtdParam._m0[19u].w / _348) : 5000.0;
    float _584 = isnan(_580) ? _573 : (isnan(_573) ? _580 : min(_573, _580));
    float _585 = isnan(_583) ? _584 : (isnan(_584) ? _583 : min(_584, _583));
    float _589 = cbMtdParam._m0[19u].w * cbMtdParam._m0[16u].z;
    float _593 = ((_585 * _348) + _589) / _589;
    float _598 = cbMtdParam._m0[19u].z - cbMtdParam._m0[23u].z * trunc(cbMtdParam._m0[19u].z / cbMtdParam._m0[23u].z);
    float _600 = floor(cbMtdParam._m0[19u].z / cbMtdParam._m0[23u].z);
    vec4 _616 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * (((((_379 + (_585 * _566)) / _593) + 0.5) + _598) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * (((((_382 + (_585 * _567)) / _593) + 0.5) + _600) / cbMtdParam._m0[23u].w)) + cbTextureTilingScale._m0[9u].w));
    float _628;
    if (_568)
    {
        _628 = (1.0 - _353) / _566;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_566 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _353) / _566;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _628 = frontier_phi_35_34_ladder;
    }
    float _634;
    if (_575)
    {
        _634 = (1.0 - _354) / _567;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_567 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _354) / _567;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _634 = frontier_phi_39_38_ladder;
    }
    float _636 = isnan(_634) ? _628 : (isnan(_628) ? _634 : min(_628, _634));
    float _637 = isnan(_583) ? _636 : (isnan(_636) ? _583 : min(_636, _583));
    float _644 = ((_637 * _348) + _589) / _589;
    vec4 _664 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_379 + (_637 * _566)) / _644) + 0.5) + _598) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_382 + (_637 * _567)) / _644) + 0.5) + _600) / cbMtdParam._m0[23u].w)) + cbTextureTilingScale._m0[10u].w));
    float _666 = _664.x;
    float _691 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _695 = inversesqrt(dot(vec3(_267, _268, _269), vec3(_267, _268, _269)));
    float _696 = _267 * _695;
    float _697 = _268 * _695;
    float _698 = _269 * _695;
    vec4 _703 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _705 = _703.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _774 = sqrt(((_267 * _267) + (_268 * _268)) + (_269 * _269));
        float _780 = (cbMatDynParam._m0[5u].x * _774) + cbMatDynParam._m0[5u].y;
        float _2680 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
        float _781 = isnan(1.0) ? _2680 : (isnan(_2680) ? 1.0 : min(_2680, 1.0));
        float _785 = (cbMatDynParam._m0[5u].z * _774) + cbMatDynParam._m0[5u].w;
        float _2691 = isnan(0.0) ? _785 : (isnan(_785) ? 0.0 : max(_785, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _2691 : (isnan(_2691) ? 1.0 : min(_2691, 1.0))) - _781)) + _781) < ((_705 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _717 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _718 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _727 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_717 * cbSceneParam._m0[86u].x, _718 * cbSceneParam._m0[86u].y));
    float _730 = _727.x * TEXCOORD_4.z;
    float _731 = (-0.0) - _696;
    float _732 = (-0.0) - _697;
    float _733 = (-0.0) - _698;
    float _755 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _759 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _763 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _924;
    float _926;
    float _927;
    float _928;
    float _929;
    float _930;
    float _931;
    float _932;
    float _933;
    float _934;
    float _935;
    float _936;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _847 = (cbModelParam._m0[37u].x * ((((fma(_763, cbModelParam._m0[26u].z, fma(_759, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _755)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _849 = (cbModelParam._m0[37u].y * ((((fma(_763, cbModelParam._m0[27u].z, fma(_759, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _755)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _850 = (((((fma(_763, cbModelParam._m0[28u].z, fma(_759, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _755)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _853 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_847, _849, _850), 0.0);
        vec4 _860 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_847, _849, _850), 0.0);
        vec4 _867 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_847, _849, _850), 0.0);
        vec4 _874 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_847, _849, _850), 0.0);
        float _887 = exp2((_853.w + (-0.5)) * 20.0) * 2.0;
        float _897 = exp2((_860.w + (-0.5)) * 20.0) * 2.0;
        float _907 = exp2((_867.w + (-0.5)) * 20.0) * 2.0;
        float _917 = exp2((_874.w + (-0.5)) * 20.0) * 2.0;
        float _918 = _917 * (_874.x + (-0.5));
        float _919 = _917 * (_874.y + (-0.5));
        float _920 = _917 * (_874.z + (-0.5));
        _924 = _887 * (_853.z + (-0.5));
        _926 = _887 * (_853.y + (-0.5));
        _927 = _887 * (_853.x + (-0.5));
        _928 = _897 * (_860.z + (-0.5));
        _929 = _897 * (_860.y + (-0.5));
        _930 = _897 * (_860.x + (-0.5));
        _931 = _907 * (_867.z + (-0.5));
        _932 = _907 * (_867.y + (-0.5));
        _933 = _907 * (_867.x + (-0.5));
        _934 = isnan(0.0) ? _920 : (isnan(_920) ? 0.0 : max(_920, 0.0));
        _935 = isnan(0.0) ? _919 : (isnan(_919) ? 0.0 : max(_919, 0.0));
        _936 = isnan(0.0) ? _918 : (isnan(_918) ? 0.0 : max(_918, 0.0));
    }
    else
    {
        _924 = _925;
        _926 = _925;
        _927 = _925;
        _928 = _925;
        _929 = _925;
        _930 = _925;
        _931 = _925;
        _932 = _925;
        _933 = _925;
        _934 = _925;
        _935 = _925;
        _936 = _925;
    }
    float _1067;
    float _1068;
    float _1069;
    float _1070;
    float _1071;
    float _1072;
    float _1073;
    float _1074;
    float _1075;
    float _1076;
    float _1077;
    float _1078;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _993 = (cbModelParam._m0[38u].x * ((((fma(_763, cbModelParam._m0[30u].z, fma(_759, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _755)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _994 = (cbModelParam._m0[38u].y * ((((fma(_763, cbModelParam._m0[31u].z, fma(_759, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _755)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _995 = (((((fma(_763, cbModelParam._m0[32u].z, fma(_759, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _755)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _997 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_993, _994, _995), 0.0);
        vec4 _1004 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_993, _994, _995), 0.0);
        vec4 _1011 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_993, _994, _995), 0.0);
        vec4 _1018 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_993, _994, _995), 0.0);
        float _1030 = exp2((_997.w + (-0.5)) * 20.0) * 2.0;
        float _1040 = exp2((_1004.w + (-0.5)) * 20.0) * 2.0;
        float _1050 = exp2((_1011.w + (-0.5)) * 20.0) * 2.0;
        float _1060 = exp2((_1018.w + (-0.5)) * 20.0) * 2.0;
        float _1061 = _1060 * (_1018.x + (-0.5));
        float _1062 = _1060 * (_1018.y + (-0.5));
        float _1063 = _1060 * (_1018.z + (-0.5));
        _1067 = _1030 * (_997.z + (-0.5));
        _1068 = _1030 * (_997.y + (-0.5));
        _1069 = _1030 * (_997.x + (-0.5));
        _1070 = _1040 * (_1004.z + (-0.5));
        _1071 = _1040 * (_1004.y + (-0.5));
        _1072 = _1040 * (_1004.x + (-0.5));
        _1073 = _1050 * (_1011.z + (-0.5));
        _1074 = _1050 * (_1011.y + (-0.5));
        _1075 = _1050 * (_1011.x + (-0.5));
        _1076 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        _1077 = isnan(0.0) ? _1062 : (isnan(_1062) ? 0.0 : max(_1062, 0.0));
        _1078 = isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0));
    }
    else
    {
        _1067 = _925;
        _1068 = _925;
        _1069 = _925;
        _1070 = _925;
        _1071 = _925;
        _1072 = _925;
        _1073 = _925;
        _1074 = _925;
        _1075 = _925;
        _1076 = _925;
        _1077 = _925;
        _1078 = _925;
    }
    float _1093 = _696 * (-0.5);
    float _1094 = _697 * (-0.5);
    float _1095 = _698 * (-0.5);
    float _1096 = dot(vec4(_1093, _1094, _1095, 1.0), vec4(_1069, _1072, _1075, _1078));
    float _1099 = dot(vec4(_1093, _1094, _1095, 1.0), vec4(_1068, _1071, _1074, _1077));
    float _1102 = dot(vec4(_1093, _1094, _1095, 1.0), vec4(_1067, _1070, _1073, _1076));
    float _1137;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1109 = dot(vec4(_1093, _1094, _1095, 1.0), vec4(_924, _928, _931, _934));
        float _1113 = dot(vec4(_1093, _1094, _1095, 1.0), vec4(_926, _929, _932, _935));
        float _1117 = dot(vec4(_1093, _1094, _1095, 1.0), vec4(_927, _930, _933, _936));
        float _1124 = dot(vec4(cbModelParam._m0[39u]), vec4(_1093, _1094, _1095, 1.0));
        _1137 = dot(vec3(isnan(0.0) ? _1117 : (isnan(_1117) ? 0.0 : max(_1117, 0.0)), isnan(0.0) ? _1113 : (isnan(_1113) ? 0.0 : max(_1113, 0.0)), isnan(0.0) ? _1109 : (isnan(_1109) ? 0.0 : max(_1109, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1124) ? 0.0 : (isnan(0.0) ? _1124 : max(0.0, _1124))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1137 = 1.0;
    }
    float _1148;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1139 = dot(vec4(cbModelParam._m0[40u]), vec4(_1093, _1094, _1095, 1.0));
        _1148 = dot(vec3(isnan(0.0) ? _1096 : (isnan(_1096) ? 0.0 : max(_1096, 0.0)), isnan(0.0) ? _1099 : (isnan(_1099) ? 0.0 : max(_1099, 0.0)), isnan(0.0) ? _1102 : (isnan(_1102) ? 0.0 : max(_1102, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1139) ? 0.0 : (isnan(0.0) ? _1139 : max(0.0, _1139))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1148 = 1.0;
    }
    float _1152 = (_1148 * cbModelParam._m0[1u].x) + (_1137 * (1.0 - cbModelParam._m0[1u].x));
    float _1158 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1241;
    float _1243;
    float _1245;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1208 = fma(_763, cbModelParam._m0[13u].z, fma(_759, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _755)) + cbModelParam._m0[13u].w;
        float _1212 = fma(_763, cbModelParam._m0[14u].z, fma(_759, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _755)) + cbModelParam._m0[14u].w;
        float _1216 = fma(_763, cbModelParam._m0[15u].z, fma(_759, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _755)) + cbModelParam._m0[15u].w;
        float _1219 = fma(_733, cbModelParam._m0[13u].z, fma(_732, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _731));
        float _1222 = fma(_733, cbModelParam._m0[14u].z, fma(_732, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _731));
        float _1225 = fma(_733, cbModelParam._m0[15u].z, fma(_732, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _731));
        float _1251;
        if (_1219 > 0.0)
        {
            _1251 = abs((1.0 - _1208) / _1219);
        }
        else
        {
            float frontier_phi_57_55_ladder;
            if (_1219 < 0.0)
            {
                frontier_phi_57_55_ladder = abs((_1208 + 1.0) / _1219);
            }
            else
            {
                frontier_phi_57_55_ladder = 5000.0;
            }
            _1251 = frontier_phi_57_55_ladder;
        }
        float _1527;
        if (_1222 > 0.0)
        {
            _1527 = abs((1.0 - _1212) / _1222);
        }
        else
        {
            float frontier_phi_66_62_ladder;
            if (_1222 < 0.0)
            {
                frontier_phi_66_62_ladder = abs((_1212 + 1.0) / _1222);
            }
            else
            {
                frontier_phi_66_62_ladder = 5000.0;
            }
            _1527 = frontier_phi_66_62_ladder;
        }
        float _1832;
        if (_1225 > 0.0)
        {
            _1832 = abs((1.0 - _1216) / _1225);
        }
        else
        {
            float frontier_phi_80_73_ladder;
            if (_1225 < 0.0)
            {
                frontier_phi_80_73_ladder = abs((_1216 + 1.0) / _1225);
            }
            else
            {
                frontier_phi_80_73_ladder = 5000.0;
            }
            _1832 = frontier_phi_80_73_ladder;
        }
        float _1834 = isnan(_1527) ? _1251 : (isnan(_1251) ? _1527 : min(_1251, _1527));
        float _1835 = isnan(_1832) ? _1834 : (isnan(_1834) ? _1832 : min(_1834, _1832));
        float _1839 = (_1835 * _1219) + _1208;
        float _1840 = (_1835 * _1222) + _1212;
        float _1841 = (_1835 * _1225) + _1216;
        float _1842 = _1835 * 9.9999997473787516355514526367188e-05;
        float _1843 = (-1.0) - _1842;
        float _1845 = _1842 + 1.0;
        float frontier_phi_56_80_ladder;
        float frontier_phi_56_80_ladder_1;
        float frontier_phi_56_80_ladder_2;
        if ((_1841 > _1845) || ((_1841 < _1843) || ((_1840 > _1845) || ((_1840 < _1843) || ((_1839 < _1843) || (_1839 > _1845))))))
        {
            frontier_phi_56_80_ladder = 0.0;
            frontier_phi_56_80_ladder_1 = 0.0;
            frontier_phi_56_80_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1968 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1841, cbModelParam._m0[9u].z, fma(_1840, cbModelParam._m0[9u].y, _1839 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1841, cbModelParam._m0[10u].z, fma(_1840, cbModelParam._m0[10u].y, _1839 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1841, cbModelParam._m0[11u].z, fma(_1840, cbModelParam._m0[11u].y, _1839 * cbModelParam._m0[11u].x))), _1158);
            frontier_phi_56_80_ladder = _1968.z * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_1 = _1968.y * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_2 = _1968.x * cbModelParam._m0[1u].y;
        }
        _1241 = frontier_phi_56_80_ladder_2;
        _1243 = frontier_phi_56_80_ladder_1;
        _1245 = frontier_phi_56_80_ladder;
    }
    else
    {
        vec4 _1229 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_731, _732, _733), _1158);
        _1241 = _1229.x * cbModelParam._m0[1u].y;
        _1243 = _1229.y * cbModelParam._m0[1u].y;
        _1245 = _1229.z * cbModelParam._m0[1u].y;
    }
    float _1248 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1336;
    float _1338;
    float _1340;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1300 = fma(_763, cbModelParam._m0[21u].z, fma(_759, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _755)) + cbModelParam._m0[21u].w;
        float _1304 = fma(_763, cbModelParam._m0[22u].z, fma(_759, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _755)) + cbModelParam._m0[22u].w;
        float _1308 = fma(_763, cbModelParam._m0[23u].z, fma(_759, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _755)) + cbModelParam._m0[23u].w;
        float _1311 = fma(_733, cbModelParam._m0[21u].z, fma(_732, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _731));
        float _1314 = fma(_733, cbModelParam._m0[22u].z, fma(_732, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _731));
        float _1317 = fma(_733, cbModelParam._m0[23u].z, fma(_732, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _731));
        float _1532;
        if (_1311 > 0.0)
        {
            _1532 = abs((1.0 - _1300) / _1311);
        }
        else
        {
            float frontier_phi_68_64_ladder;
            if (_1311 < 0.0)
            {
                frontier_phi_68_64_ladder = abs((_1300 + 1.0) / _1311);
            }
            else
            {
                frontier_phi_68_64_ladder = 5000.0;
            }
            _1532 = frontier_phi_68_64_ladder;
        }
        float _1858;
        if (_1314 > 0.0)
        {
            _1858 = abs((1.0 - _1304) / _1314);
        }
        else
        {
            float frontier_phi_82_75_ladder;
            if (_1314 < 0.0)
            {
                frontier_phi_82_75_ladder = abs((_1304 + 1.0) / _1314);
            }
            else
            {
                frontier_phi_82_75_ladder = 5000.0;
            }
            _1858 = frontier_phi_82_75_ladder;
        }
        float _2030;
        if (_1317 > 0.0)
        {
            _2030 = abs((1.0 - _1308) / _1317);
        }
        else
        {
            float frontier_phi_100_93_ladder;
            if (_1317 < 0.0)
            {
                frontier_phi_100_93_ladder = abs((_1308 + 1.0) / _1317);
            }
            else
            {
                frontier_phi_100_93_ladder = 5000.0;
            }
            _2030 = frontier_phi_100_93_ladder;
        }
        float _2032 = isnan(_1858) ? _1532 : (isnan(_1532) ? _1858 : min(_1532, _1858));
        float _2033 = isnan(_2030) ? _2032 : (isnan(_2032) ? _2030 : min(_2032, _2030));
        float _2037 = (_2033 * _1311) + _1300;
        float _2038 = (_2033 * _1314) + _1304;
        float _2039 = (_2033 * _1317) + _1308;
        float _2040 = _2033 * 9.9999997473787516355514526367188e-05;
        float _2041 = (-1.0) - _2040;
        float _2043 = _2040 + 1.0;
        float frontier_phi_65_100_ladder;
        float frontier_phi_65_100_ladder_1;
        float frontier_phi_65_100_ladder_2;
        if ((_2039 > _2043) || ((_2039 < _2041) || ((_2038 > _2043) || ((_2038 < _2041) || ((_2037 < _2041) || (_2037 > _2043))))))
        {
            frontier_phi_65_100_ladder = 0.0;
            frontier_phi_65_100_ladder_1 = 0.0;
            frontier_phi_65_100_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2208 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2039, cbModelParam._m0[17u].z, fma(_2038, cbModelParam._m0[17u].y, _2037 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2039, cbModelParam._m0[18u].z, fma(_2038, cbModelParam._m0[18u].y, _2037 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2039, cbModelParam._m0[19u].z, fma(_2038, cbModelParam._m0[19u].y, _2037 * cbModelParam._m0[19u].x))), _1248);
            frontier_phi_65_100_ladder = _2208.z * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_1 = _2208.y * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_2 = _2208.x * cbModelParam._m0[1u].z;
        }
        _1336 = frontier_phi_65_100_ladder_2;
        _1338 = frontier_phi_65_100_ladder_1;
        _1340 = frontier_phi_65_100_ladder;
    }
    else
    {
        vec4 _1320 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_731, _732, _733), _1248);
        _1336 = _1320.x * cbModelParam._m0[1u].z;
        _1338 = _1320.y * cbModelParam._m0[1u].z;
        _1340 = _1320.z * cbModelParam._m0[1u].z;
    }
    float _1352 = _730 * 0.01200000010430812835693359375;
    float _1354 = _1352 * ((cbModelParam._m0[1u].w * (_1336 - _1241)) + _1241);
    float _1355 = _1352 * ((cbModelParam._m0[1u].w * (_1338 - _1243)) + _1243);
    float _1356 = _1352 * ((cbModelParam._m0[1u].w * (_1340 - _1245)) + _1245);
    float _1377 = fma(_1356, cbSceneParam._m0[89u].z, fma(_1355, cbSceneParam._m0[89u].y, _1354 * cbSceneParam._m0[89u].x));
    float _1380 = fma(_1356, cbSceneParam._m0[90u].z, fma(_1355, cbSceneParam._m0[90u].y, _1354 * cbSceneParam._m0[90u].x));
    float _1383 = fma(_1356, cbSceneParam._m0[91u].z, fma(_1355, cbSceneParam._m0[91u].y, _1354 * cbSceneParam._m0[91u].x));
    uint _1390 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1394 = floatBitsToUint(cbInstanceData._m0[_1390 + 5u]);
    uint _1396 = _1394.x * 14u;
    uint _1397 = _1396 + 13u;
    float _1402 = _730 + (-1.0);
    float _1405 = (cbLight._m0[_1397].x * _1402) + 1.0;
    float _1406 = (cbLight._m0[_1397].y * _1402) + 1.0;
    uint _1407 = _1396 + 8u;
    float _1418 = cbLight._m0[_1396].x + _696;
    float _1419 = cbLight._m0[_1396].y + _697;
    float _1420 = cbLight._m0[_1396].z + _698;
    float _1424 = inversesqrt(dot(vec3(_1418, _1419, _1420), vec3(_1418, _1419, _1420)));
    float _1428 = dot(vec3(0.0), vec3(cbLight._m0[_1396].xyz));
    float _2817 = isnan(0.0) ? _1428 : (isnan(_1428) ? 0.0 : max(_1428, 0.0));
    float _1431 = isnan(1.0) ? _2817 : (isnan(_2817) ? 1.0 : min(_2817, 1.0));
    float _1432 = dot(vec3(0.0), vec3(_696, _697, _698));
    float _2828 = isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0));
    float _1435 = isnan(1.0) ? _2828 : (isnan(_2828) ? 1.0 : min(_2828, 1.0));
    float _1436 = dot(vec3(cbLight._m0[_1396].xyz), vec3(_1418 * _1424, _1419 * _1424, _1420 * _1424));
    float _2839 = isnan(0.0) ? _1436 : (isnan(_1436) ? 0.0 : max(_1436, 0.0));
    float _1447 = (exp2(log2(1.0 - (isnan(1.0) ? _2839 : (isnan(_2839) ? 1.0 : min(_2839, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1453 = (0.5 / ((_1431 + 9.9999999392252902907785028219223e-09) + _1435)) * _1431;
    float _2850 = isnan(0.0) ? _1453 : (isnan(_1453) ? 0.0 : max(_1453, 0.0));
    float _1455 = (isnan(1.0) ? _2850 : (isnan(_2850) ? 1.0 : min(_2850, 1.0))) * 0.31831014156341552734375;
    float _1457 = isnan(1.0) ? _1405 : (isnan(_1405) ? 1.0 : min(_1405, 1.0));
    uint _1467 = _1396 + 9u;
    uint _1473 = _1396 | 1u;
    float _1479 = cbLight._m0[_1473].x + _696;
    float _1480 = cbLight._m0[_1473].y + _697;
    float _1481 = cbLight._m0[_1473].z + _698;
    float _1485 = inversesqrt(dot(vec3(_1479, _1480, _1481), vec3(_1479, _1480, _1481)));
    float _1489 = dot(vec3(0.0), vec3(cbLight._m0[_1473].xyz));
    float _2866 = isnan(0.0) ? _1489 : (isnan(_1489) ? 0.0 : max(_1489, 0.0));
    float _1492 = isnan(1.0) ? _2866 : (isnan(_2866) ? 1.0 : min(_2866, 1.0));
    float _1493 = dot(vec3(cbLight._m0[_1473].xyz), vec3(_1479 * _1485, _1480 * _1485, _1481 * _1485));
    float _2877 = isnan(0.0) ? _1493 : (isnan(_1493) ? 0.0 : max(_1493, 0.0));
    float _1502 = (exp2(log2(1.0 - (isnan(1.0) ? _2877 : (isnan(_2877) ? 1.0 : min(_2877, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1506 = (0.5 / ((_1492 + 9.9999999392252902907785028219223e-09) + _1435)) * _1492;
    float _2888 = isnan(0.0) ? _1506 : (isnan(_1506) ? 0.0 : max(_1506, 0.0));
    float _1508 = (isnan(1.0) ? _2888 : (isnan(_2888) ? 1.0 : min(_2888, 1.0))) * 0.31831014156341552734375;
    float _1509 = isnan(1.0) ? _1406 : (isnan(_1406) ? 1.0 : min(_1406, 1.0));
    float _1519 = (((_1502 * cbLight._m0[_1467].x) * _1508) * _1509) + (((_1447 * cbLight._m0[_1407].x) * _1455) * _1457);
    float _1520 = (((_1502 * cbLight._m0[_1467].y) * _1508) * _1509) + (((_1447 * cbLight._m0[_1407].y) * _1455) * _1457);
    float _1521 = (((_1502 * cbLight._m0[_1467].z) * _1508) * _1509) + (((_1447 * cbLight._m0[_1407].z) * _1455) * _1457);
    float _1638;
    float _1640;
    float _1642;
    if (_1394.y == 0u)
    {
        float _1577 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _1578 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _1577;
        float _1579 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _1577;
        float _1580 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _1577;
        uvec4 _1592 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1593 = _1592.x;
        uint _1604 = uint((float(_1592.y) * floor(float(uint(cbSceneParam._m0[85u].y * _718) / _1593))) + floor(float(uint(cbSceneParam._m0[85u].x * _717) / _1593)));
        float _1614 = (log2(_1580 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1615 = isnan(0.0) ? _1614 : (isnan(_1614) ? 0.0 : max(_1614, 0.0));
        uint _1618 = uint(isnan(14.0) ? _1615 : (isnan(_1615) ? 14.0 : min(_1615, 14.0)));
        uvec4 _1623 = texelFetch(g_lightClusterGridBuffer, int(((_1618 << 2u) + (_1604 << 6u)) >> 2u));
        uint _1624 = _1623.x;
        uint _1625 = _1592.z;
        float _1715;
        float _1717;
        float _1719;
        if (((((1u << ((_1625 >> 4u) & 15u)) + 4294967295u) & _1624) == 0u) || ((_1625 & 240u) == 0u))
        {
            _1715 = 0.0;
            _1717 = 0.0;
            _1719 = 0.0;
        }
        else
        {
            float _1716;
            float _1718;
            float _1720;
            float _1883 = 0.0;
            float _1884 = 0.0;
            float _1885 = 0.0;
            uint _1886 = 0u;
            uint _1895;
            bool _1896;
            for (;;)
            {
                _1895 = texelFetch(g_lightClassification, int((((_1618 << 5u) + (_1604 << 9u)) + (_1886 << 2u)) >> 2u)).x;
                _1896 = _1895 == 0u;
                float frontier_phi_95_pred;
                float frontier_phi_95_pred_1;
                float frontier_phi_95_pred_2;
                if (_1896)
                {
                    frontier_phi_95_pred = _1885;
                    frontier_phi_95_pred_1 = _1884;
                    frontier_phi_95_pred_2 = _1883;
                }
                else
                {
                    float _2070;
                    float _2071;
                    float _2072;
                    uint _2073;
                    _2070 = _1883;
                    _2071 = _1884;
                    _2072 = _1885;
                    _2073 = _1895;
                    float _1977;
                    float _1978;
                    float _1979;
                    for (;;)
                    {
                        uint _2077 = uint(findLSB(_2073)) + (_1886 << 5u);
                        uint _2074 = (_2073 + 4294967295u) & _2073;
                        uint _2079 = _2077 * 48u;
                        vec4 _2093 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2079)).x, texelFetch(g_PointLightRenderingBuffer, int(_2079 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2079 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2079 + 3u)).x));
                        uint _2110 = (_2077 * 48u) + 8u;
                        vec3 _2121 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2110)).x, texelFetch(g_PointLightRenderingBuffer, int(_2110 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2110 + 2u)).x));
                        float _2125 = _2093.x - _1578;
                        float _2126 = _2093.y - _1579;
                        float _2127 = _2093.z - _1580;
                        float _2128 = dot(vec3(_2125, _2126, _2127), vec3(_2125, _2126, _2127));
                        float _2131 = inversesqrt(_2128);
                        float _2140 = 1.0 - (_2128 * _2093.w);
                        float _2914 = isnan(0.0) ? _2140 : (isnan(_2140) ? 0.0 : max(_2140, 0.0));
                        float _2142 = sqrt(_2128) * uintBitsToFloat(uvec4(_2100, _2101, _2102, texelFetch(g_PointLightRenderingBuffer, int(((_2077 * 48u) + 4u) + 3u)).x)).w;
                        float _2145 = 1.39999997615814208984375 / (_2142 + 1.39999997615814208984375);
                        float _2146 = _2145 * _2145;
                        float _2149 = ((1.0 - _2146) * dot(vec3(0.0), vec3(_2131 * _2125, _2131 * _2126, _2131 * _2127))) + _2146;
                        float _2151 = (-0.0) - _1578;
                        float _2152 = (-0.0) - _1579;
                        float _2153 = (-0.0) - _1580;
                        float _2157 = inversesqrt(dot(vec3(_2151, _2152, _2153), vec3(_2151, _2152, _2153)));
                        float _2161 = dot(vec3(0.0), vec3(_2157 * _2151, _2157 * _2152, _2157 * _2153));
                        float _2925 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
                        float _2936 = isnan(0.0) ? _2149 : (isnan(_2149) ? 0.0 : max(_2149, 0.0));
                        float _2165 = isnan(1.0) ? _2936 : (isnan(_2936) ? 1.0 : min(_2936, 1.0));
                        float _2169 = (0.5 / (((isnan(1.0) ? _2925 : (isnan(_2925) ? 1.0 : min(_2925, 1.0))) + 9.9999999392252902907785028219223e-09) + _2165)) * _2165;
                        float _2947 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
                        float _2178 = (((isnan(1.0) ? _2947 : (isnan(_2947) ? 1.0 : min(_2947, 1.0))) * 3.1415927410125732421875) / (((_2142 * _2142) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2914 : (isnan(_2914) ? 1.0 : min(_2914, 1.0)));
                        _1977 = (_2178 * _2121.x) + _2070;
                        _1978 = (_2178 * _2121.y) + _2071;
                        _1979 = (_2178 * _2121.z) + _2072;
                        if (_2074 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2070 = _1977;
                            _2071 = _1978;
                            _2072 = _1979;
                            _2073 = _2074;
                        }
                    }
                    frontier_phi_95_pred = _1979;
                    frontier_phi_95_pred_1 = _1978;
                    frontier_phi_95_pred_2 = _1977;
                }
                _1720 = frontier_phi_95_pred;
                _1718 = frontier_phi_95_pred_1;
                _1716 = frontier_phi_95_pred_2;
                uint _1887 = _1886 + 1u;
                if (_1887 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _1883 = _1716;
                    _1884 = _1718;
                    _1885 = _1720;
                    _1886 = _1887;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1715 = _1716;
            _1717 = _1718;
            _1719 = _1720;
        }
        uvec4 _1723 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1724 = _1723.z;
        uint _1726 = (_1724 >> 8u) & 15u;
        float _1863;
        float _1865;
        float _1867;
        if (((4294967295u << _1726) & _1624) == 0u)
        {
            _1863 = _1715;
            _1865 = _1717;
            _1867 = _1719;
        }
        else
        {
            float _1879 = inversesqrt(dot(vec3(_1578, _1579, _1580), vec3(_1578, _1579, _1580)));
            float frontier_phi_84_85_ladder;
            float frontier_phi_84_85_ladder_1;
            float frontier_phi_84_85_ladder_2;
            if (_1726 < ((_1724 >> 12u) & 15u))
            {
                float _1864;
                float _1866;
                float _1868;
                float _2056 = _1715;
                float _2057 = _1717;
                float _2058 = _1719;
                uint _2059 = _1726;
                uint _2068;
                bool _2069;
                for (;;)
                {
                    _2068 = texelFetch(g_lightClassification, int((((_1618 << 5u) + (_1604 << 9u)) + (_2059 << 2u)) >> 2u)).x;
                    _2069 = _2068 == 0u;
                    float frontier_phi_109_pred;
                    float frontier_phi_109_pred_1;
                    float frontier_phi_109_pred_2;
                    if (_2069)
                    {
                        frontier_phi_109_pred = _2058;
                        frontier_phi_109_pred_1 = _2057;
                        frontier_phi_109_pred_2 = _2056;
                    }
                    else
                    {
                        float _2213;
                        float _2214;
                        float _2215;
                        float _2434;
                        float _2435;
                        float _2436;
                        float _2223 = _2056;
                        float _2224 = _2057;
                        float _2225 = _2058;
                        uint _2226 = _2068;
                        uint _2227;
                        uint _2237;
                        vec4 _2252;
                        float _2253;
                        vec3 _2265;
                        vec4 _2280;
                        vec4 _2295;
                        float _2341;
                        bool _2342;
                        for (;;)
                        {
                            _2237 = ((_2059 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2226));
                            _2227 = (_2226 + 4294967295u) & _2226;
                            uint _2239 = _2237 * 40u;
                            _2252 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2239)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2239 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2239 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2239 + 3u)).x));
                            _2253 = _2252.w;
                            uint _2255 = (_2237 * 40u) + 8u;
                            _2265 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2255)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2255 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2255 + 2u)).x));
                            uint _2267 = (_2237 * 40u) + 16u;
                            _2280 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2267)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2267 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2267 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2267 + 3u)).x));
                            uint _2282 = (_2237 * 40u) + 20u;
                            _2295 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2282)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2282 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2282 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2282 + 3u)).x));
                            uint _2297 = (_2237 * 40u) + 24u;
                            vec4 _2310 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2297)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2297 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2297 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2297 + 3u)).x));
                            uint _2316 = (_2237 * 40u) + 28u;
                            vec4 _2329 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2316)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2316 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2316 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2316 + 3u)).x));
                            _2341 = fma(_1580, _2329.z, fma(_1579, _2329.y, _2329.x * _1578)) + _2329.w;
                            _2342 = !((fma(_1580, _2310.z, fma(_1579, _2310.y, _2310.x * _1578)) + _2310.w) <= 0.0);
                            float frontier_phi_115_pred;
                            float frontier_phi_115_pred_1;
                            float frontier_phi_115_pred_2;
                            if (_2342)
                            {
                                float _2376 = _2252.x - _1578;
                                float _2377 = _2252.y - _1579;
                                float _2378 = _2252.z - _1580;
                                float _2379 = dot(vec3(_2376, _2377, _2378), vec3(_2376, _2377, _2378));
                                float _2382 = inversesqrt(_2379);
                                float _2389 = 1.0 - (_2379 / (_2253 * _2253));
                                float _2958 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
                                float _2391 = sqrt(_2379) * uintBitsToFloat(uvec4(_2345, _2346, _2347, texelFetch(g_SpotLightRenderingBuffer, int(((_2237 * 40u) + 4u) + 3u)).x)).w;
                                float _2393 = 1.39999997615814208984375 / (_2391 + 1.39999997615814208984375);
                                float _2394 = _2393 * _2393;
                                float _2397 = (fma(_1580, _2280.z, fma(_1579, _2280.y, _2280.x * _1578)) + _2280.w) / _2341;
                                float _2398 = (fma(_1580, _2295.z, fma(_1579, _2295.y, _2295.x * _1578)) + _2295.w) / _2341;
                                float _2402 = 1.0 - dot(vec2(_2397, _2398), vec2(_2397, _2398));
                                float _2969 = isnan(0.0) ? _2402 : (isnan(_2402) ? 0.0 : max(_2402, 0.0));
                                float _2410 = dot(vec3(0.0), vec3((-0.0) - (_1578 * _1879), (-0.0) - (_1579 * _1879), (-0.0) - (_1580 * _1879)));
                                float _2980 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
                                float _2418 = ((1.0 - _2394) * dot(vec3(0.0), vec3(_2382 * _2376, _2382 * _2377, _2382 * _2378))) + _2394;
                                float _2991 = isnan(0.0) ? _2418 : (isnan(_2418) ? 0.0 : max(_2418, 0.0));
                                float _2419 = isnan(1.0) ? _2991 : (isnan(_2991) ? 1.0 : min(_2991, 1.0));
                                float _2423 = (0.5 / (((isnan(1.0) ? _2980 : (isnan(_2980) ? 1.0 : min(_2980, 1.0))) + 9.9999999392252902907785028219223e-09) + _2419)) * _2419;
                                float _3002 = isnan(0.0) ? _2423 : (isnan(_2423) ? 0.0 : max(_2423, 0.0));
                                float _2430 = ((isnan(1.0) ? _2969 : (isnan(_2969) ? 1.0 : min(_2969, 1.0))) * (isnan(1.0) ? _2958 : (isnan(_2958) ? 1.0 : min(_2958, 1.0)))) * (((isnan(1.0) ? _3002 : (isnan(_3002) ? 1.0 : min(_3002, 1.0))) * 3.1415927410125732421875) / (((_2391 * _2391) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_115_pred = _2430 * _2265.y;
                                frontier_phi_115_pred_1 = _2430 * _2265.x;
                                frontier_phi_115_pred_2 = _2430 * _2265.z;
                            }
                            else
                            {
                                frontier_phi_115_pred = 0.0;
                                frontier_phi_115_pred_1 = 0.0;
                                frontier_phi_115_pred_2 = 0.0;
                            }
                            _2435 = frontier_phi_115_pred;
                            _2434 = frontier_phi_115_pred_1;
                            _2436 = frontier_phi_115_pred_2;
                            _2213 = _2434 + _2223;
                            _2214 = _2435 + _2224;
                            _2215 = _2436 + _2225;
                            if (_2227 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2223 = _2213;
                                _2224 = _2214;
                                _2225 = _2215;
                                _2226 = _2227;
                                continue;
                            }
                        }
                        frontier_phi_109_pred = _2215;
                        frontier_phi_109_pred_1 = _2214;
                        frontier_phi_109_pred_2 = _2213;
                    }
                    _1868 = frontier_phi_109_pred;
                    _1866 = frontier_phi_109_pred_1;
                    _1864 = frontier_phi_109_pred_2;
                    uint _2060 = _2059 + 1u;
                    if (_2060 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2056 = _1864;
                        _2057 = _1866;
                        _2058 = _1868;
                        _2059 = _2060;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_84_85_ladder = _1868;
                frontier_phi_84_85_ladder_1 = _1866;
                frontier_phi_84_85_ladder_2 = _1864;
            }
            else
            {
                frontier_phi_84_85_ladder = _1719;
                frontier_phi_84_85_ladder_1 = _1717;
                frontier_phi_84_85_ladder_2 = _1715;
            }
            _1863 = frontier_phi_84_85_ladder_2;
            _1865 = frontier_phi_84_85_ladder_1;
            _1867 = frontier_phi_84_85_ladder;
        }
        float _1872 = isnan(1.0) ? _730 : (isnan(_730) ? 1.0 : min(_730, 1.0));
        _1638 = ((_1863 * 0.039999999105930328369140625) * _1872) + _1519;
        _1640 = ((_1865 * 0.039999999105930328369140625) * _1872) + _1520;
        _1642 = ((_1867 * 0.039999999105930328369140625) * _1872) + _1521;
    }
    else
    {
        _1638 = _1519;
        _1640 = _1520;
        _1642 = _1521;
    }
    uint _1648 = _1390 + 9u;
    uint _1649 = _1648 + uint(cbMatDynParam._m0[0u].w);
    float _1664 = (cbInstanceData._m0[_1649].x * ((_666 * ((_616.x * cbMtdParam._m0[14u].x) - _548)) + _548)) + ((_1638 + ((isnan(0.0) ? _1377 : (isnan(_1377) ? 0.0 : max(_1377, 0.0))) * _1152)) * cbPerFrame._m0[3u].x);
    float _1665 = (cbInstanceData._m0[_1649].y * ((_666 * ((_616.y * cbMtdParam._m0[14u].y) - _549)) + _549)) + ((_1640 + ((isnan(0.0) ? _1380 : (isnan(_1380) ? 0.0 : max(_1380, 0.0))) * _1152)) * cbPerFrame._m0[3u].x);
    float _1666 = (cbInstanceData._m0[_1649].z * ((_666 * ((_616.z * cbMtdParam._m0[14u].z) - _550)) + _550)) + ((_1642 + ((isnan(0.0) ? _1383 : (isnan(_1383) ? 0.0 : max(_1383, 0.0))) * _1152)) * cbPerFrame._m0[3u].x);
    float _1667 = isnan(0.0) ? _1664 : (isnan(_1664) ? 0.0 : max(_1664, 0.0));
    float _1668 = isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0));
    float _1669 = isnan(0.0) ? _1666 : (isnan(_1666) ? 0.0 : max(_1666, 0.0));
    uint _1670 = _1390 + 6u;
    float _1678 = _717 / cbSceneParam._m0[86u].x;
    float _1679 = _718 / cbSceneParam._m0[86u].y;
    vec4 _1693 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1678, _1679, (log2((isnan(cbSceneParam._m0[77u].w) ? _691 : (isnan(_691) ? cbSceneParam._m0[77u].w : min(_691, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1695 = _1693.x;
    float _1696 = _1693.y;
    float _1697 = _1693.z;
    float _1698 = _1693.w;
    float _1772;
    float _1774;
    float _1776;
    float _1778;
    if (_691 > cbSceneParam._m0[78u].w)
    {
        float _1734 = isnan(_691) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _691 : min(cbSceneParam._m0[80u].w, _691));
        float _1735 = _1734 / _691;
        float _1746 = _1735 * _267;
        float _1747 = _268 * _1735;
        float _1748 = (-0.0) - _1747;
        float _1749 = _1735 * _269;
        float _1751 = (cbSceneParam._m0[77u].w * _1748) / _1734;
        float _1752 = _1751 + cbSceneParam._m0[79u].w;
        float _1753 = cbSceneParam._m0[79u].w - _1747;
        float _1759 = sqrt(((_1746 * _1746) + (_1747 * _1747)) + (_1749 * _1749));
        float _1762 = (1.0 - (cbSceneParam._m0[77u].w / _1734)) * _1759;
        float _1768 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1770 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _1987;
        if (abs((_1748 - _1751) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _1987 = ((((_1752 > 0.0) ? exp2(_1768 * _1752) : (2.0 - exp2(_1770 * _1752))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1762;
        }
        else
        {
            float _1909 = 1.0 / cbSceneParam._m0[80u].x;
            float _1910 = isnan(_1753) ? _1752 : (isnan(_1752) ? _1753 : max(_1752, _1753));
            float _1911 = isnan(_1753) ? _1752 : (isnan(_1752) ? _1753 : min(_1752, _1753));
            float _1920 = isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : min(_1910, 0.0));
            float _1921 = isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : min(_1911, 0.0));
            _1987 = ((abs(_1759 / _1748) * cbSceneParam._m0[80u].y) * ((((_1920 - _1921) * 2.0) - ((exp2(_1768 * (isnan(0.0) ? _1910 : (isnan(_1910) ? 0.0 : max(_1910, 0.0)))) - exp2(_1768 * (isnan(0.0) ? _1911 : (isnan(_1911) ? 0.0 : max(_1911, 0.0))))) * _1909)) - ((exp2(_1770 * _1920) - exp2(_1770 * _1921)) * _1909))) + (_1762 * cbSceneParam._m0[80u].z);
        }
        vec4 _1989 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1678, _1679, 1.0), 0.0);
        float _1998 = exp2((_1987 * (-1.44269502162933349609375)) * (1.0 - _1989.w));
        float _1999 = log2(_1998);
        float _2015 = log2(_1698);
        _1772 = (exp2(_2015 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_1999 * cbSceneParam._m0[78u].x)) * _1989.x) / cbSceneParam._m0[78u].x)) + _1695;
        _1774 = (exp2(_2015 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_1999 * cbSceneParam._m0[78u].y)) * _1989.y) / cbSceneParam._m0[78u].y)) + _1696;
        _1776 = (exp2(_2015 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_1999 * cbSceneParam._m0[78u].z)) * _1989.z) / cbSceneParam._m0[78u].z)) + _1697;
        _1778 = _1998 * _1698;
    }
    else
    {
        _1772 = _1695;
        _1774 = _1696;
        _1776 = _1697;
        _1778 = _1698;
    }
    bool _2025;
    vec4 _1788;
    vec4 _1811;
    float _1813;
    float _1817;
    float _1818;
    float _1819;
    float _1820;
    bool _1831;
    for (;;)
    {
        _1788 = cbMatDynParam._m0[0u];
        float _1790 = roundEven(_1788.y);
        bool _1791 = _1790 == 3.0;
        float _1793 = log2(_1778);
        float _1800 = exp2(_1793 * cbSceneParam._m0[78u].x) * _1667;
        float _1801 = exp2(_1793 * cbSceneParam._m0[78u].y) * _1668;
        float _1802 = exp2(_1793 * cbSceneParam._m0[78u].z) * _1669;
        float _1809 = _705 + (-0.5);
        _1811 = cbMtdParam._m0[1u];
        _1813 = _1811.y * _1809;
        float _1816 = (_1790 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _1817 = _1816 * (_1791 ? _1800 : (_1800 + (cbSceneParam._m0[72u].w * _1772)));
        _1818 = _1816 * (_1791 ? _1801 : (_1801 + (cbSceneParam._m0[72u].w * _1774)));
        _1819 = _1816 * (_1791 ? _1802 : (_1802 + (cbSceneParam._m0[72u].w * _1776)));
        _1820 = _1809 * 0.999000012874603271484375;
        _1831 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_1831)
        {
            if ((cbInstanceData._m0[_1390 + 7u].x + _1820) < 0.5)
            {
                _2025 = true;
                break;
            }
        }
        uint _1944 = _1648 + uint(_1788.w);
        if ((cbInstanceData._m0[_1944].w < 1.0) && ((cbInstanceData._m0[_1944].w + _1820) < 0.5))
        {
            _2025 = true;
            break;
        }
        if ((_1813 + 1.0) < _1811.x)
        {
            _2025 = true;
            break;
        }
        _2025 = false;
        break;
    }
    float _2183;
    if (_2025)
    {
        discard_state = true;
        _2183 = 0.0;
    }
    else
    {
        _2183 = cbInstanceData._m0[_1670].w;
    }
    SV_Target.x = _1817;
    SV_Target.y = _1818;
    SV_Target.z = _1819;
    SV_Target.w = _2183;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1670].w;
    discard_exit();
}


