#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1046;
float _3443;
float _3444;
float _3445;
float _3446;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _198 = _197 * _190;
    float _199 = _197 * _191;
    float _200 = _197 * _192;
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = _204 * NORMAL.x;
    float _206 = _204 * NORMAL.y;
    float _207 = _204 * NORMAL.z;
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _212 = _211 * TANGENT.x;
    float _213 = _211 * TANGENT.y;
    float _214 = _211 * TANGENT.z;
    float _259 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _269 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _259);
    float _270 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _259);
    float _271 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _259);
    vec4 _284 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _287 = _284.x;
    vec4 _305 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _322 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _287) + cbMtdParam._m0[12u].x) * _305.x;
    float _324 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _287) + cbMtdParam._m0[12u].y) * _305.y;
    float _326 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _287) + cbMtdParam._m0[12u].z) * _305.z;
    vec4 _344 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _380 = cbMtdParam._m0[24u].x + _269;
    float _381 = cbMtdParam._m0[24u].y + _270;
    float _382 = cbMtdParam._m0[24u].z + _271;
    float _396 = (-0.0) - dot(vec3(_380, _381, _382), vec3(_198, _199, _200));
    float _397 = (-0.0) - dot(vec3(_380, _381, _382), vec3(_212, _213, _214));
    float _398 = (-0.0) - dot(vec3(_380, _381, _382), vec3((-0.0) - _205, (-0.0) - _206, (-0.0) - _207));
    float _402 = inversesqrt(dot(vec3(_396, _397, _398), vec3(_396, _397, _398)));
    float _405 = _402 * _398;
    float _408 = ((_402 * _396) + ((cbMtdParam._m0[22u].x * _287) * ((_344.x * 2.0) + (-1.0)))) * cbMtdParam._m0[20u].w;
    float _409 = ((_402 * _397) + ((cbMtdParam._m0[22u].y * _287) * ((_344.y * 2.0) + (-1.0)))) * cbMtdParam._m0[20u].z;
    float _410 = fract(TEXCOORD.x);
    float _411 = fract(TEXCOORD.y);
    float _417;
    if (_408 > 0.0)
    {
        _417 = (1.0 - _410) / _408;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_408 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _410) / _408;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _417 = frontier_phi_3_2_ladder;
    }
    float _425;
    if (_409 > 0.0)
    {
        _425 = (1.0 - _411) / _409;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_409 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _411) / _409;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _425 = frontier_phi_7_6_ladder;
    }
    float _429 = (_405 > 0.0) ? (cbMtdParam._m0[16u].x / _405) : 5000.0;
    float _430 = isnan(_425) ? _417 : (isnan(_417) ? _425 : min(_417, _425));
    float _431 = isnan(_429) ? _430 : (isnan(_430) ? _429 : min(_430, _429));
    float _435 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _442 = ((_431 * _405) + _435) / _435;
    vec4 _467 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * ((((((_410 + (-0.5)) + (_431 * _408)) / _442) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * ((((((_411 + (-0.5)) + (_431 * _409)) / _442) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    float _483 = _287 * 0.1500000059604644775390625;
    float _491 = (_483 * (((_467.x * _287) * cbMtdParam._m0[9u].x) - _322)) + _322;
    float _492 = (_483 * (((_467.y * _287) * cbMtdParam._m0[9u].y) - _324)) + _324;
    float _493 = (_483 * (((_467.z * _287) * cbMtdParam._m0[9u].z) - _326)) + _326;
    vec4 _506 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _510 = _506.z;
    float _513 = (_506.x * 2.0) + (-1.0);
    float _514 = (_506.y * 2.0) + (-1.0);
    float _515 = dot(vec2(_513, _514), vec2(_513, _514));
    float _3465 = isnan(0.0) ? _515 : (isnan(_515) ? 0.0 : max(_515, 0.0));
    float _520 = sqrt(1.0 - (isnan(1.0) ? _3465 : (isnan(_3465) ? 1.0 : min(_3465, 1.0))));
    float _523 = fma(_520, _205, fma(_514, _212, _513 * _198));
    float _526 = fma(_520, _206, fma(_514, _213, _513 * _199));
    float _529 = fma(_520, _207, fma(_514, _214, _513 * _200));
    float _533 = inversesqrt(dot(vec3(_523, _526, _529), vec3(_523, _526, _529)));
    float _534 = _533 * _523;
    float _535 = _533 * _526;
    float _536 = _533 * _529;
    float _3476 = isnan(0.0) ? _510 : (isnan(_510) ? 0.0 : max(_510, 0.0));
    float _537 = isnan(1.0) ? _3476 : (isnan(_3476) ? 1.0 : min(_3476, 1.0));
    float _3487 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _3498 = isnan(0.0) ? _492 : (isnan(_492) ? 0.0 : max(_492, 0.0));
    float _3509 = isnan(0.0) ? _493 : (isnan(_493) ? 0.0 : max(_493, 0.0));
    float _556 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _560 = inversesqrt(dot(vec3(_269, _270, _271), vec3(_269, _270, _271)));
    float _561 = _269 * _560;
    float _562 = _270 * _560;
    float _563 = _271 * _560;
    vec4 _568 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _570 = _568.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _727 = sqrt(((_269 * _269) + (_270 * _270)) + (_271 * _271));
        float _733 = (cbMatDynParam._m0[5u].x * _727) + cbMatDynParam._m0[5u].y;
        float _3520 = isnan(0.0) ? _733 : (isnan(_733) ? 0.0 : max(_733, 0.0));
        float _734 = isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0));
        float _738 = (cbMatDynParam._m0[5u].z * _727) + cbMatDynParam._m0[5u].w;
        float _3531 = isnan(0.0) ? _738 : (isnan(_738) ? 0.0 : max(_738, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3531 : (isnan(_3531) ? 1.0 : min(_3531, 1.0))) - _734)) + _734) < ((_570 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _582 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _583 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _602 = fma(_536, cbSceneParam._m0[5u].z, fma(_535, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _534));
    float _605 = fma(_536, cbSceneParam._m0[6u].z, fma(_535, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _534));
    float _608 = fma(_536, cbSceneParam._m0[7u].z, fma(_535, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _534));
    uint _621 = uint(roundEven(NORMAL.w)) * 13u;
    uint _623 = _621 + 9u;
    uint _624 = _623 + uint(cbMatDynParam._m0[0u].w);
    float _630 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3487 : (isnan(_3487) ? 1.0 : min(_3487, 1.0)))) * cbInstanceData._m0[_624].x;
    float _631 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3498 : (isnan(_3498) ? 1.0 : min(_3498, 1.0)))) * cbInstanceData._m0[_624].y;
    float _632 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3509 : (isnan(_3509) ? 1.0 : min(_3509, 1.0)))) * cbInstanceData._m0[_624].z;
    float _3542 = isnan(0.0) ? _630 : (isnan(_630) ? 0.0 : max(_630, 0.0));
    float _633 = isnan(1.0) ? _3542 : (isnan(_3542) ? 1.0 : min(_3542, 1.0));
    float _3553 = isnan(0.0) ? _631 : (isnan(_631) ? 0.0 : max(_631, 0.0));
    float _634 = isnan(1.0) ? _3553 : (isnan(_3553) ? 1.0 : min(_3553, 1.0));
    float _3564 = isnan(0.0) ? _632 : (isnan(_632) ? 0.0 : max(_632, 0.0));
    float _635 = isnan(1.0) ? _3564 : (isnan(_3564) ? 1.0 : min(_3564, 1.0));
    vec4 _644 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _582, cbSceneParam._m0[86u].y * _583));
    float _647 = _644.x * TEXCOORD_4.z;
    float _648 = dot(vec3(_534, _535, _536), vec3(_561, _562, _563));
    float _651 = _648 * 2.0;
    float _655 = (_651 * _534) - _561;
    float _656 = (_651 * _535) - _562;
    float _657 = (_651 * _536) - _563;
    float _661 = abs(dot(vec3(_561, _562, _563), vec3(_534, _535, _536)));
    float _3575 = isnan(0.0) ? _661 : (isnan(_661) ? 0.0 : max(_661, 0.0));
    float _663 = sqrt(_537);
    float _676 = exp2((_663 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3575 : (isnan(_3575) ? 1.0 : min(_3575, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_663 * 3.0));
    float _708 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _712 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _716 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1045;
    float _1047;
    float _1048;
    float _1049;
    float _1050;
    float _1051;
    float _1052;
    float _1053;
    float _1054;
    float _1055;
    float _1056;
    float _1057;
    float _1058;
    float _1059;
    float _1060;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _772 = fma(_716, cbModelParam._m0[26u].z, fma(_712, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _708));
        float _776 = fma(_716, cbModelParam._m0[27u].z, fma(_712, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _708));
        float _780 = fma(_716, cbModelParam._m0[28u].z, fma(_712, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _708));
        float _803 = _708 + _534;
        float _804 = _712 + _535;
        float _805 = _716 + _536;
        float _815 = fma(_805, cbModelParam._m0[26u].z, fma(_804, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _803)) - _772;
        float _816 = fma(_805, cbModelParam._m0[27u].z, fma(_804, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _803)) - _776;
        float _817 = fma(_805, cbModelParam._m0[28u].z, fma(_804, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _803)) - _780;
        float _821 = inversesqrt(dot(vec3(_815, _816, _817), vec3(_815, _816, _817)));
        float _834 = ((_821 * _815) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_772 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _835 = ((_821 * _816) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_776 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _836 = ((_821 * _817) / cbModelParam._m0[34u].z) + ((((((_780 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _839 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_834, _835, _836), 0.0);
        vec4 _846 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_834, _835, _836), 0.0);
        vec4 _853 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_834, _835, _836), 0.0);
        vec4 _860 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_834, _835, _836), 0.0);
        float _873 = exp2((_839.w + (-0.5)) * 20.0) * 2.0;
        float _874 = _873 * (_839.x + (-0.5));
        float _875 = _873 * (_839.y + (-0.5));
        float _876 = _873 * (_839.z + (-0.5));
        float _883 = exp2((_846.w + (-0.5)) * 20.0) * 2.0;
        float _884 = _883 * (_846.x + (-0.5));
        float _885 = _883 * (_846.y + (-0.5));
        float _886 = _883 * (_846.z + (-0.5));
        float _893 = exp2((_853.w + (-0.5)) * 20.0) * 2.0;
        float _894 = _893 * (_853.x + (-0.5));
        float _895 = _893 * (_853.y + (-0.5));
        float _896 = _893 * (_853.z + (-0.5));
        float _903 = exp2((_860.w + (-0.5)) * 20.0) * 2.0;
        float _904 = _903 * (_860.x + (-0.5));
        float _905 = _903 * (_860.y + (-0.5));
        float _906 = _903 * (_860.z + (-0.5));
        float _907 = isnan(0.0) ? _904 : (isnan(_904) ? 0.0 : max(_904, 0.0));
        float _908 = isnan(0.0) ? _905 : (isnan(_905) ? 0.0 : max(_905, 0.0));
        float _909 = isnan(0.0) ? _906 : (isnan(_906) ? 0.0 : max(_906, 0.0));
        float _910 = _874 * 0.5;
        float _911 = _884 * 0.5;
        float _912 = _894 * 0.5;
        float _913 = dot(vec3(_910, _911, _912), vec3(_910, _911, _912));
        float _918 = (_913 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_913);
        float _927 = (dot(vec3(_534, _535, _536), vec3(_918 * _910, _918 * _911, _918 * _912)) + 1.0) * 0.5;
        float _3601 = isnan(0.0) ? _927 : (isnan(_927) ? 0.0 : max(_927, 0.0));
        float _937 = sqrt(((_911 * _911) + (_910 * _910)) + (_912 * _912)) / (_907 + 9.9999997473787516355514526367188e-06);
        float _3612 = isnan(0.0) ? _937 : (isnan(_937) ? 0.0 : max(_937, 0.0));
        float _938 = isnan(1.0) ? _3612 : (isnan(_3612) ? 1.0 : min(_3612, 1.0));
        float _939 = _938 * 2.0;
        float _943 = (1.0 - _938) / (_938 + 1.0);
        float _3623 = isnan(0.0) ? _943 : (isnan(_943) ? 0.0 : max(_943, 0.0));
        float _944 = isnan(1.0) ? _3623 : (isnan(_3623) ? 1.0 : min(_3623, 1.0));
        float _953 = ((((1.0 - _944) * (_939 + 2.0)) * exp2(log2(isnan(1.0) ? _3601 : (isnan(_3601) ? 1.0 : min(_3601, 1.0))) * (_939 + 1.0))) + _944) * _907;
        float _954 = _875 * 0.5;
        float _955 = _885 * 0.5;
        float _956 = _895 * 0.5;
        float _957 = dot(vec3(_954, _955, _956), vec3(_954, _955, _956));
        float _962 = (_957 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_957);
        float _970 = (dot(vec3(_534, _535, _536), vec3(_962 * _954, _962 * _955, _962 * _956)) + 1.0) * 0.5;
        float _3634 = isnan(0.0) ? _970 : (isnan(_970) ? 0.0 : max(_970, 0.0));
        float _979 = sqrt(((_955 * _955) + (_954 * _954)) + (_956 * _956)) / (_908 + 9.9999997473787516355514526367188e-06);
        float _3645 = isnan(0.0) ? _979 : (isnan(_979) ? 0.0 : max(_979, 0.0));
        float _980 = isnan(1.0) ? _3645 : (isnan(_3645) ? 1.0 : min(_3645, 1.0));
        float _981 = _980 * 2.0;
        float _985 = (1.0 - _980) / (_980 + 1.0);
        float _3656 = isnan(0.0) ? _985 : (isnan(_985) ? 0.0 : max(_985, 0.0));
        float _986 = isnan(1.0) ? _3656 : (isnan(_3656) ? 1.0 : min(_3656, 1.0));
        float _995 = ((((1.0 - _986) * (_981 + 2.0)) * exp2(log2(isnan(1.0) ? _3634 : (isnan(_3634) ? 1.0 : min(_3634, 1.0))) * (_981 + 1.0))) + _986) * _908;
        float _996 = _876 * 0.5;
        float _997 = _886 * 0.5;
        float _998 = _896 * 0.5;
        float _999 = dot(vec3(_996, _997, _998), vec3(_996, _997, _998));
        float _1004 = (_999 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_999);
        float _1012 = (dot(vec3(_534, _535, _536), vec3(_1004 * _996, _1004 * _997, _1004 * _998)) + 1.0) * 0.5;
        float _3667 = isnan(0.0) ? _1012 : (isnan(_1012) ? 0.0 : max(_1012, 0.0));
        float _1021 = sqrt(((_997 * _997) + (_996 * _996)) + (_998 * _998)) / (_909 + 9.9999997473787516355514526367188e-06);
        float _3678 = isnan(0.0) ? _1021 : (isnan(_1021) ? 0.0 : max(_1021, 0.0));
        float _1022 = isnan(1.0) ? _3678 : (isnan(_3678) ? 1.0 : min(_3678, 1.0));
        float _1023 = _1022 * 2.0;
        float _1027 = (1.0 - _1022) / (_1022 + 1.0);
        float _3689 = isnan(0.0) ? _1027 : (isnan(_1027) ? 0.0 : max(_1027, 0.0));
        float _1028 = isnan(1.0) ? _3689 : (isnan(_3689) ? 1.0 : min(_3689, 1.0));
        float _1037 = ((((1.0 - _1028) * (_1023 + 2.0)) * exp2(log2(isnan(1.0) ? _3667 : (isnan(_3667) ? 1.0 : min(_3667, 1.0))) * (_1023 + 1.0))) + _1028) * _909;
        _1045 = _876;
        _1047 = _875;
        _1048 = _874;
        _1049 = _886;
        _1050 = _885;
        _1051 = _884;
        _1052 = _896;
        _1053 = _895;
        _1054 = _894;
        _1055 = _909;
        _1056 = _908;
        _1057 = _907;
        _1058 = cbModelParam._m0[36u].z * (isnan(0.0) ? _953 : (isnan(_953) ? 0.0 : max(_953, 0.0)));
        _1059 = cbModelParam._m0[36u].z * (isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0)));
        _1060 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1037 : (isnan(_1037) ? 0.0 : max(_1037, 0.0)));
    }
    else
    {
        _1045 = _1046;
        _1047 = _1046;
        _1048 = _1046;
        _1049 = _1046;
        _1050 = _1046;
        _1051 = _1046;
        _1052 = _1046;
        _1053 = _1046;
        _1054 = _1046;
        _1055 = _1046;
        _1056 = _1046;
        _1057 = _1046;
        _1058 = 0.0;
        _1059 = 0.0;
        _1060 = 0.0;
    }
    float _1358;
    float _1359;
    float _1360;
    float _1361;
    float _1362;
    float _1363;
    float _1364;
    float _1365;
    float _1366;
    float _1367;
    float _1368;
    float _1369;
    float _1370;
    float _1371;
    float _1372;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1089 = fma(_716, cbModelParam._m0[30u].z, fma(_712, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _708));
        float _1093 = fma(_716, cbModelParam._m0[31u].z, fma(_712, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _708));
        float _1097 = fma(_716, cbModelParam._m0[32u].z, fma(_712, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _708));
        float _1120 = _708 + _534;
        float _1121 = _712 + _535;
        float _1122 = _716 + _536;
        float _1132 = fma(_1122, cbModelParam._m0[30u].z, fma(_1121, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1120)) - _1089;
        float _1133 = fma(_1122, cbModelParam._m0[31u].z, fma(_1121, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1120)) - _1093;
        float _1134 = fma(_1122, cbModelParam._m0[32u].z, fma(_1121, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1120)) - _1097;
        float _1138 = inversesqrt(dot(vec3(_1132, _1133, _1134), vec3(_1132, _1133, _1134)));
        float _1151 = ((_1138 * _1132) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1089 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1152 = ((_1138 * _1133) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1093 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1153 = ((_1138 * _1134) / cbModelParam._m0[35u].z) + ((((((_1097 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1155 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        vec4 _1162 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        vec4 _1169 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        vec4 _1176 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1151, _1152, _1153), 0.0);
        float _1188 = exp2((_1155.w + (-0.5)) * 20.0) * 2.0;
        float _1189 = _1188 * (_1155.x + (-0.5));
        float _1190 = _1188 * (_1155.y + (-0.5));
        float _1191 = _1188 * (_1155.z + (-0.5));
        float _1198 = exp2((_1162.w + (-0.5)) * 20.0) * 2.0;
        float _1199 = _1198 * (_1162.x + (-0.5));
        float _1200 = _1198 * (_1162.y + (-0.5));
        float _1201 = _1198 * (_1162.z + (-0.5));
        float _1208 = exp2((_1169.w + (-0.5)) * 20.0) * 2.0;
        float _1209 = _1208 * (_1169.x + (-0.5));
        float _1210 = _1208 * (_1169.y + (-0.5));
        float _1211 = _1208 * (_1169.z + (-0.5));
        float _1218 = exp2((_1176.w + (-0.5)) * 20.0) * 2.0;
        float _1219 = _1218 * (_1176.x + (-0.5));
        float _1220 = _1218 * (_1176.y + (-0.5));
        float _1221 = _1218 * (_1176.z + (-0.5));
        float _1222 = isnan(0.0) ? _1219 : (isnan(_1219) ? 0.0 : max(_1219, 0.0));
        float _1223 = isnan(0.0) ? _1220 : (isnan(_1220) ? 0.0 : max(_1220, 0.0));
        float _1224 = isnan(0.0) ? _1221 : (isnan(_1221) ? 0.0 : max(_1221, 0.0));
        float _1225 = _1189 * 0.5;
        float _1226 = _1199 * 0.5;
        float _1227 = _1209 * 0.5;
        float _1228 = dot(vec3(_1225, _1226, _1227), vec3(_1225, _1226, _1227));
        float _1233 = (_1228 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1228);
        float _1241 = (dot(vec3(_534, _535, _536), vec3(_1233 * _1225, _1233 * _1226, _1233 * _1227)) + 1.0) * 0.5;
        float _3730 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1250 = sqrt(((_1226 * _1226) + (_1225 * _1225)) + (_1227 * _1227)) / (_1222 + 9.9999997473787516355514526367188e-06);
        float _3741 = isnan(0.0) ? _1250 : (isnan(_1250) ? 0.0 : max(_1250, 0.0));
        float _1251 = isnan(1.0) ? _3741 : (isnan(_3741) ? 1.0 : min(_3741, 1.0));
        float _1252 = _1251 * 2.0;
        float _1256 = (1.0 - _1251) / (_1251 + 1.0);
        float _3752 = isnan(0.0) ? _1256 : (isnan(_1256) ? 0.0 : max(_1256, 0.0));
        float _1257 = isnan(1.0) ? _3752 : (isnan(_3752) ? 1.0 : min(_3752, 1.0));
        float _1266 = ((((1.0 - _1257) * (_1252 + 2.0)) * exp2(log2(isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0))) * (_1252 + 1.0))) + _1257) * _1222;
        float _1267 = _1190 * 0.5;
        float _1268 = _1200 * 0.5;
        float _1269 = _1210 * 0.5;
        float _1270 = dot(vec3(_1267, _1268, _1269), vec3(_1267, _1268, _1269));
        float _1275 = (_1270 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1270);
        float _1283 = (dot(vec3(_534, _535, _536), vec3(_1275 * _1267, _1275 * _1268, _1275 * _1269)) + 1.0) * 0.5;
        float _3763 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1292 = sqrt(((_1268 * _1268) + (_1267 * _1267)) + (_1269 * _1269)) / (_1223 + 9.9999997473787516355514526367188e-06);
        float _3774 = isnan(0.0) ? _1292 : (isnan(_1292) ? 0.0 : max(_1292, 0.0));
        float _1293 = isnan(1.0) ? _3774 : (isnan(_3774) ? 1.0 : min(_3774, 1.0));
        float _1294 = _1293 * 2.0;
        float _1298 = (1.0 - _1293) / (_1293 + 1.0);
        float _3785 = isnan(0.0) ? _1298 : (isnan(_1298) ? 0.0 : max(_1298, 0.0));
        float _1299 = isnan(1.0) ? _3785 : (isnan(_3785) ? 1.0 : min(_3785, 1.0));
        float _1308 = ((((1.0 - _1299) * (_1294 + 2.0)) * exp2(log2(isnan(1.0) ? _3763 : (isnan(_3763) ? 1.0 : min(_3763, 1.0))) * (_1294 + 1.0))) + _1299) * _1223;
        float _1309 = _1191 * 0.5;
        float _1310 = _1201 * 0.5;
        float _1311 = _1211 * 0.5;
        float _1312 = dot(vec3(_1309, _1310, _1311), vec3(_1309, _1310, _1311));
        float _1317 = (_1312 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1312);
        float _1325 = (dot(vec3(_534, _535, _536), vec3(_1317 * _1309, _1317 * _1310, _1317 * _1311)) + 1.0) * 0.5;
        float _3796 = isnan(0.0) ? _1325 : (isnan(_1325) ? 0.0 : max(_1325, 0.0));
        float _1334 = sqrt(((_1310 * _1310) + (_1309 * _1309)) + (_1311 * _1311)) / (_1224 + 9.9999997473787516355514526367188e-06);
        float _3807 = isnan(0.0) ? _1334 : (isnan(_1334) ? 0.0 : max(_1334, 0.0));
        float _1335 = isnan(1.0) ? _3807 : (isnan(_3807) ? 1.0 : min(_3807, 1.0));
        float _1336 = _1335 * 2.0;
        float _1340 = (1.0 - _1335) / (_1335 + 1.0);
        float _3818 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _3818 : (isnan(_3818) ? 1.0 : min(_3818, 1.0));
        float _1350 = ((((1.0 - _1341) * (_1336 + 2.0)) * exp2(log2(isnan(1.0) ? _3796 : (isnan(_3796) ? 1.0 : min(_3796, 1.0))) * (_1336 + 1.0))) + _1341) * _1224;
        _1358 = _1191;
        _1359 = _1190;
        _1360 = _1189;
        _1361 = _1201;
        _1362 = _1200;
        _1363 = _1199;
        _1364 = _1211;
        _1365 = _1210;
        _1366 = _1209;
        _1367 = _1224;
        _1368 = _1223;
        _1369 = _1222;
        _1370 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1266 : (isnan(_1266) ? 0.0 : max(_1266, 0.0)));
        _1371 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1308 : (isnan(_1308) ? 0.0 : max(_1308, 0.0)));
        _1372 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1350 : (isnan(_1350) ? 0.0 : max(_1350, 0.0)));
    }
    else
    {
        _1358 = _1046;
        _1359 = _1046;
        _1360 = _1046;
        _1361 = _1046;
        _1362 = _1046;
        _1363 = _1046;
        _1364 = _1046;
        _1365 = _1046;
        _1366 = _1046;
        _1367 = _1046;
        _1368 = _1046;
        _1369 = _1046;
        _1370 = 0.0;
        _1371 = 0.0;
        _1372 = 0.0;
    }
    float _1382 = (cbModelParam._m0[1u].x * (_1370 - _1058)) + _1058;
    float _1383 = (cbModelParam._m0[1u].x * (_1371 - _1059)) + _1059;
    float _1384 = (cbModelParam._m0[1u].x * (_1372 - _1060)) + _1060;
    float _1405 = fma(_1384, cbSceneParam._m0[89u].z, fma(_1383, cbSceneParam._m0[89u].y, _1382 * cbSceneParam._m0[89u].x));
    float _1408 = fma(_1384, cbSceneParam._m0[90u].z, fma(_1383, cbSceneParam._m0[90u].y, _1382 * cbSceneParam._m0[90u].x));
    float _1411 = fma(_1384, cbSceneParam._m0[91u].z, fma(_1383, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1382));
    float _1426 = _655 * 0.5;
    float _1427 = _656 * 0.5;
    float _1428 = _657 * 0.5;
    float _1429 = dot(vec4(_1426, _1427, _1428, 1.0), vec4(_1360, _1363, _1366, _1369));
    float _1432 = dot(vec4(_1426, _1427, _1428, 1.0), vec4(_1359, _1362, _1365, _1368));
    float _1435 = dot(vec4(_1426, _1427, _1428, 1.0), vec4(_1358, _1361, _1364, _1367));
    float _1469;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1442 = dot(vec4(_1426, _1427, _1428, 1.0), vec4(_1045, _1049, _1052, _1055));
        float _1446 = dot(vec4(_1426, _1427, _1428, 1.0), vec4(_1047, _1050, _1053, _1056));
        float _1450 = dot(vec4(_1426, _1427, _1428, 1.0), vec4(_1048, _1051, _1054, _1057));
        float _1457 = dot(vec4(cbModelParam._m0[39u]), vec4(_1426, _1427, _1428, 1.0));
        _1469 = dot(vec3(isnan(0.0) ? _1450 : (isnan(_1450) ? 0.0 : max(_1450, 0.0)), isnan(0.0) ? _1446 : (isnan(_1446) ? 0.0 : max(_1446, 0.0)), isnan(0.0) ? _1442 : (isnan(_1442) ? 0.0 : max(_1442, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1457) ? 0.0 : (isnan(0.0) ? _1457 : max(0.0, _1457))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1469 = 1.0;
    }
    float _1480;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1471 = dot(vec4(cbModelParam._m0[40u]), vec4(_1426, _1427, _1428, 1.0));
        _1480 = dot(vec3(isnan(0.0) ? _1429 : (isnan(_1429) ? 0.0 : max(_1429, 0.0)), isnan(0.0) ? _1432 : (isnan(_1432) ? 0.0 : max(_1432, 0.0)), isnan(0.0) ? _1435 : (isnan(_1435) ? 0.0 : max(_1435, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1471) ? 0.0 : (isnan(0.0) ? _1471 : max(0.0, _1471))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1480 = 1.0;
    }
    float _1484 = (_1480 * cbModelParam._m0[1u].x) + (_1469 * (1.0 - cbModelParam._m0[1u].x));
    float _1494 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _537);
    float _1495 = isnan(_1494) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1494 : min(cbModelParam._m0[25u].z, _1494));
    float _1577;
    float _1579;
    float _1581;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1544 = fma(_716, cbModelParam._m0[13u].z, fma(_712, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _708)) + cbModelParam._m0[13u].w;
        float _1548 = fma(_716, cbModelParam._m0[14u].z, fma(_712, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _708)) + cbModelParam._m0[14u].w;
        float _1552 = fma(_716, cbModelParam._m0[15u].z, fma(_712, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _708)) + cbModelParam._m0[15u].w;
        float _1555 = fma(_657, cbModelParam._m0[13u].z, fma(_656, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _655));
        float _1558 = fma(_657, cbModelParam._m0[14u].z, fma(_656, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _655));
        float _1561 = fma(_657, cbModelParam._m0[15u].z, fma(_656, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _655));
        float _1589;
        if (_1555 > 0.0)
        {
            _1589 = abs((1.0 - _1544) / _1555);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1555 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1544 + 1.0) / _1555);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1589 = frontier_phi_25_23_ladder;
        }
        float _1759;
        if (_1558 > 0.0)
        {
            _1759 = abs((1.0 - _1548) / _1558);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1558 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1548 + 1.0) / _1558);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1759 = frontier_phi_34_30_ladder;
        }
        float _2203;
        if (_1561 > 0.0)
        {
            _2203 = abs((1.0 - _1552) / _1561);
        }
        else
        {
            float frontier_phi_46_41_ladder;
            if (_1561 < 0.0)
            {
                frontier_phi_46_41_ladder = abs((_1552 + 1.0) / _1561);
            }
            else
            {
                frontier_phi_46_41_ladder = 5000.0;
            }
            _2203 = frontier_phi_46_41_ladder;
        }
        float _2205 = isnan(_1759) ? _1589 : (isnan(_1589) ? _1759 : min(_1589, _1759));
        float _2206 = isnan(_2203) ? _2205 : (isnan(_2205) ? _2203 : min(_2205, _2203));
        float _2210 = (_2206 * _1555) + _1544;
        float _2211 = (_2206 * _1558) + _1548;
        float _2212 = (_2206 * _1561) + _1552;
        float _2213 = _2206 * 9.9999997473787516355514526367188e-05;
        float _2215 = (-1.0) - _2213;
        float _2217 = _2213 + 1.0;
        float frontier_phi_24_46_ladder;
        float frontier_phi_24_46_ladder_1;
        float frontier_phi_24_46_ladder_2;
        if ((_2212 > _2217) || ((_2212 < _2215) || ((_2211 > _2217) || ((_2211 < _2215) || ((_2210 < _2215) || (_2210 > _2217))))))
        {
            frontier_phi_24_46_ladder = 0.0;
            frontier_phi_24_46_ladder_1 = 0.0;
            frontier_phi_24_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2446 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2212, cbModelParam._m0[9u].z, fma(_2211, cbModelParam._m0[9u].y, _2210 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2212, cbModelParam._m0[10u].z, fma(_2211, cbModelParam._m0[10u].y, _2210 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2212, cbModelParam._m0[11u].z, fma(_2211, cbModelParam._m0[11u].y, _2210 * cbModelParam._m0[11u].x))), _1495);
            frontier_phi_24_46_ladder = _2446.z * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_1 = _2446.y * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_2 = _2446.x * cbModelParam._m0[1u].y;
        }
        _1577 = frontier_phi_24_46_ladder_2;
        _1579 = frontier_phi_24_46_ladder_1;
        _1581 = frontier_phi_24_46_ladder;
    }
    else
    {
        vec4 _1565 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_655, _656, _657), _1495);
        _1577 = _1565.x * cbModelParam._m0[1u].y;
        _1579 = _1565.y * cbModelParam._m0[1u].y;
        _1581 = _1565.z * cbModelParam._m0[1u].y;
    }
    float _1585 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _537);
    float _1586 = isnan(_1585) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1585 : min(cbModelParam._m0[25u].w, _1585));
    float _1676;
    float _1678;
    float _1680;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1640 = fma(_716, cbModelParam._m0[21u].z, fma(_712, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _708)) + cbModelParam._m0[21u].w;
        float _1644 = fma(_716, cbModelParam._m0[22u].z, fma(_712, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _708)) + cbModelParam._m0[22u].w;
        float _1648 = fma(_716, cbModelParam._m0[23u].z, fma(_712, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _708)) + cbModelParam._m0[23u].w;
        float _1651 = fma(_657, cbModelParam._m0[21u].z, fma(_656, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _655));
        float _1654 = fma(_657, cbModelParam._m0[22u].z, fma(_656, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _655));
        float _1657 = fma(_657, cbModelParam._m0[23u].z, fma(_656, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _655));
        float _1764;
        if (_1651 > 0.0)
        {
            _1764 = abs((1.0 - _1640) / _1651);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1651 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1640 + 1.0) / _1651);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1764 = frontier_phi_36_32_ladder;
        }
        float _2230;
        if (_1654 > 0.0)
        {
            _2230 = abs((1.0 - _1644) / _1654);
        }
        else
        {
            float frontier_phi_48_43_ladder;
            if (_1654 < 0.0)
            {
                frontier_phi_48_43_ladder = abs((_1644 + 1.0) / _1654);
            }
            else
            {
                frontier_phi_48_43_ladder = 5000.0;
            }
            _2230 = frontier_phi_48_43_ladder;
        }
        float _2575;
        if (_1657 > 0.0)
        {
            _2575 = abs((1.0 - _1648) / _1657);
        }
        else
        {
            float frontier_phi_60_55_ladder;
            if (_1657 < 0.0)
            {
                frontier_phi_60_55_ladder = abs((_1648 + 1.0) / _1657);
            }
            else
            {
                frontier_phi_60_55_ladder = 5000.0;
            }
            _2575 = frontier_phi_60_55_ladder;
        }
        float _2577 = isnan(_2230) ? _1764 : (isnan(_1764) ? _2230 : min(_1764, _2230));
        float _2578 = isnan(_2575) ? _2577 : (isnan(_2577) ? _2575 : min(_2577, _2575));
        float _2582 = (_2578 * _1651) + _1640;
        float _2583 = (_2578 * _1654) + _1644;
        float _2584 = (_2578 * _1657) + _1648;
        float _2585 = _2578 * 9.9999997473787516355514526367188e-05;
        float _2586 = (-1.0) - _2585;
        float _2588 = _2585 + 1.0;
        float frontier_phi_33_60_ladder;
        float frontier_phi_33_60_ladder_1;
        float frontier_phi_33_60_ladder_2;
        if ((_2584 > _2588) || ((_2584 < _2586) || ((_2583 > _2588) || ((_2583 < _2586) || ((_2582 < _2586) || (_2582 > _2588))))))
        {
            frontier_phi_33_60_ladder = 0.0;
            frontier_phi_33_60_ladder_1 = 0.0;
            frontier_phi_33_60_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2721 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2584, cbModelParam._m0[17u].z, fma(_2583, cbModelParam._m0[17u].y, _2582 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2584, cbModelParam._m0[18u].z, fma(_2583, cbModelParam._m0[18u].y, _2582 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2584, cbModelParam._m0[19u].z, fma(_2583, cbModelParam._m0[19u].y, _2582 * cbModelParam._m0[19u].x))), _1586);
            frontier_phi_33_60_ladder = _2721.z * cbModelParam._m0[1u].z;
            frontier_phi_33_60_ladder_1 = _2721.y * cbModelParam._m0[1u].z;
            frontier_phi_33_60_ladder_2 = _2721.x * cbModelParam._m0[1u].z;
        }
        _1676 = frontier_phi_33_60_ladder_2;
        _1678 = frontier_phi_33_60_ladder_1;
        _1680 = frontier_phi_33_60_ladder;
    }
    else
    {
        vec4 _1660 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_655, _656, _657), _1586);
        _1676 = _1660.x * cbModelParam._m0[1u].z;
        _1678 = _1660.y * cbModelParam._m0[1u].z;
        _1680 = _1660.z * cbModelParam._m0[1u].z;
    }
    float _1692 = ((((1.0 - _676) * ((_663 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_676 * _663)) * _647;
    float _1693 = _1692 * ((cbModelParam._m0[1u].w * (_1676 - _1577)) + _1577);
    float _1694 = _1692 * ((cbModelParam._m0[1u].w * (_1678 - _1579)) + _1579);
    float _1695 = _1692 * ((cbModelParam._m0[1u].w * (_1680 - _1581)) + _1581);
    float _1698 = fma(_1695, cbSceneParam._m0[89u].z, fma(_1694, cbSceneParam._m0[89u].y, _1693 * cbSceneParam._m0[89u].x));
    float _1701 = fma(_1695, cbSceneParam._m0[90u].z, fma(_1694, cbSceneParam._m0[90u].y, _1693 * cbSceneParam._m0[90u].x));
    float _1704 = fma(_1695, cbSceneParam._m0[91u].z, fma(_1694, cbSceneParam._m0[91u].y, _1693 * cbSceneParam._m0[91u].x));
    float _1738 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1742 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1746 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1750 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1751 = _1738 / _1750;
    float _1752 = _1742 / _1750;
    float _1753 = _1746 / _1750;
    float _1900;
    float _1901;
    float _1902;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1780 = ((uint(_1753 > cbSceneParam._m0[59u].y) + uint(_1753 > cbSceneParam._m0[59u].x)) + uint(_1753 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1781 = _1780 + 43u;
        uint _1789 = _1780 + 44u;
        uint _1797 = _1780 + 45u;
        uint _1805 = _1780 + 46u;
        float _1816 = fma(_1750, cbSceneParam._m0[_1781].w, fma(_1746, cbSceneParam._m0[_1781].z, fma(_1742, cbSceneParam._m0[_1781].y, _1738 * cbSceneParam._m0[_1781].x)));
        float _1820 = fma(_1750, cbSceneParam._m0[_1789].w, fma(_1746, cbSceneParam._m0[_1789].z, fma(_1742, cbSceneParam._m0[_1789].y, _1738 * cbSceneParam._m0[_1789].x)));
        float _1828 = fma(_1750, cbSceneParam._m0[_1805].w, fma(_1746, cbSceneParam._m0[_1805].z, fma(_1742, cbSceneParam._m0[_1805].y, _1738 * cbSceneParam._m0[_1805].x)));
        float _1833 = cbSceneParam._m0[33u].z * _1828;
        float _1835 = cbSceneParam._m0[33u].w * _1828;
        float _1838 = fma(_1750, cbSceneParam._m0[_1797].w, fma(_1746, cbSceneParam._m0[_1797].z, fma(_1742, cbSceneParam._m0[_1797].y, _1738 * cbSceneParam._m0[_1797].x))) / _1828;
        float _1886 = (cbSceneParam._m0[33u].x - sqrt(((_1752 * _1752) + (_1751 * _1751)) + (_1753 * _1753))) * cbSceneParam._m0[33u].y;
        float _3944 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
        float _1893 = (isnan(1.0) ? _3944 : (isnan(_3944) ? 1.0 : min(_3944, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1833 + _1816) / _1828, (_1835 + _1820) / _1828), _1838), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1835 + _1816) / _1828, (_1820 - _1833) / _1828), _1838), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1816 - _1833) / _1828, (_1820 - _1835) / _1828), _1838), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1816 - _1835) / _1828, (_1833 + _1820) / _1828), _1838), 0.0)).x), vec4(0.25)));
        _1900 = 1.0 - (_1893 * cbSceneParam._m0[34u].x);
        _1901 = 1.0 - (_1893 * cbSceneParam._m0[34u].y);
        _1902 = 1.0 - (_1893 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1900 = 1.0;
        _1901 = 1.0;
        _1902 = 1.0;
    }
    float _1966;
    float _1968;
    float _1970;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1954 = fma(_1750, cbSceneParam._m0[63u].w, fma(_1746, cbSceneParam._m0[63u].z, fma(_1742, cbSceneParam._m0[63u].y, _1738 * cbSceneParam._m0[63u].x)));
        float _1955 = fma(_1750, cbSceneParam._m0[60u].w, fma(_1746, cbSceneParam._m0[60u].z, fma(_1742, cbSceneParam._m0[60u].y, _1738 * cbSceneParam._m0[60u].x))) / _1954;
        float _1956 = fma(_1750, cbSceneParam._m0[61u].w, fma(_1746, cbSceneParam._m0[61u].z, fma(_1742, cbSceneParam._m0[61u].y, _1738 * cbSceneParam._m0[61u].x))) / _1954;
        float frontier_phi_45_44_ladder;
        float frontier_phi_45_44_ladder_1;
        float frontier_phi_45_44_ladder_2;
        if ((((_1955 >= cbSceneParam._m0[64u].x) && (_1956 >= cbSceneParam._m0[64u].y)) && (_1955 <= cbSceneParam._m0[64u].z)) && (_1956 <= cbSceneParam._m0[64u].w))
        {
            float _2243 = fma(_1750, cbSceneParam._m0[62u].w, fma(_1746, cbSceneParam._m0[62u].z, fma(_1742, cbSceneParam._m0[62u].y, _1738 * cbSceneParam._m0[62u].x))) / _1954;
            float _2247 = isnan(cbSceneParam._m0[41u].w) ? _2243 : (isnan(_2243) ? cbSceneParam._m0[41u].w : max(_2243, cbSceneParam._m0[41u].w));
            float _2290 = (cbSceneParam._m0[33u].x - sqrt(((_1752 * _1752) + (_1751 * _1751)) + (_1753 * _1753))) * cbSceneParam._m0[33u].y;
            float _3960 = isnan(0.0) ? _2290 : (isnan(_2290) ? 0.0 : max(_2290, 0.0));
            float _2297 = (isnan(1.0) ? _3960 : (isnan(_3960) ? 1.0 : min(_3960, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1955, cbSceneParam._m0[33u].w + _1956), _2247), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1955, _1956 - cbSceneParam._m0[33u].z), _2247), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1955 - cbSceneParam._m0[33u].z, _1956 - cbSceneParam._m0[33u].w), _2247), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1955 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1956), _2247), 0.0)).x), vec4(0.25)));
            float _2301 = 1.0 - (_2297 * cbSceneParam._m0[34u].x);
            float _2302 = 1.0 - (_2297 * cbSceneParam._m0[34u].y);
            float _2303 = 1.0 - (_2297 * cbSceneParam._m0[34u].z);
            frontier_phi_45_44_ladder = isnan(_2303) ? _1902 : (isnan(_1902) ? _2303 : min(_1902, _2303));
            frontier_phi_45_44_ladder_1 = isnan(_2302) ? _1901 : (isnan(_1901) ? _2302 : min(_1901, _2302));
            frontier_phi_45_44_ladder_2 = isnan(_2301) ? _1900 : (isnan(_1900) ? _2301 : min(_1900, _2301));
        }
        else
        {
            frontier_phi_45_44_ladder = _1902;
            frontier_phi_45_44_ladder_1 = _1901;
            frontier_phi_45_44_ladder_2 = _1900;
        }
        _1966 = frontier_phi_45_44_ladder_2;
        _1968 = frontier_phi_45_44_ladder_1;
        _1970 = frontier_phi_45_44_ladder;
    }
    else
    {
        _1966 = _1900;
        _1968 = _1901;
        _1970 = _1902;
    }
    uvec4 _1975 = floatBitsToUint(cbInstanceData._m0[_621 + 5u]);
    uint _1977 = _1975.x * 14u;
    uint _1978 = _1977 + 13u;
    float _1983 = _647 + (-1.0);
    float _1986 = (cbLight._m0[_1978].x * _1983) + 1.0;
    float _1987 = (cbLight._m0[_1978].y * _1983) + 1.0;
    uint _1988 = _1977 + 5u;
    float _1994 = isnan(1.0) ? _1987 : (isnan(_1987) ? 1.0 : min(_1987, 1.0));
    uint _1998 = _1977 + 4u;
    float _2007 = isnan(1.0) ? _1986 : (isnan(_1986) ? 1.0 : min(_1986, 1.0));
    uint _2011 = _1977 | 1u;
    float _2022 = dot(vec3(cbLight._m0[_1977].xyz), vec3(_534, _535, _536));
    float _2025 = dot(vec3(cbLight._m0[_2011].xyz), vec3(_534, _535, _536));
    float _3996 = isnan(0.0) ? _2022 : (isnan(_2022) ? 0.0 : max(_2022, 0.0));
    float _4007 = isnan(0.0) ? _2025 : (isnan(_2025) ? 0.0 : max(_2025, 0.0));
    float _2030 = (isnan(1.0) ? _3996 : (isnan(_3996) ? 1.0 : min(_3996, 1.0))) * 0.3183098733425140380859375;
    float _2032 = (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * 0.3183098733425140380859375;
    float _2039 = ((cbLight._m0[_1988].x * _1994) * _2032) + (((cbLight._m0[_1998].x * _1966) * _2007) * _2030);
    float _2040 = ((_1994 * cbLight._m0[_1988].y) * _2032) + (((cbLight._m0[_1998].y * _1968) * _2007) * _2030);
    float _2041 = ((_1994 * cbLight._m0[_1988].z) * _2032) + (((cbLight._m0[_1998].z * _1970) * _2007) * _2030);
    uint _2043 = _1977 + 8u;
    float _2056 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1977].w)) * _537) * 0.949999988079071044921875);
    float _2057 = _2056 * _2056;
    float _2058 = cbLight._m0[_1977].x + _561;
    float _2059 = cbLight._m0[_1977].y + _562;
    float _2060 = cbLight._m0[_1977].z + _563;
    float _2064 = inversesqrt(dot(vec3(_2058, _2059, _2060), vec3(_2058, _2059, _2060)));
    float _2065 = _2064 * _2058;
    float _2066 = _2064 * _2059;
    float _2067 = _2064 * _2060;
    float _2068 = dot(vec3(_534, _535, _536), vec3(cbLight._m0[_1977].xyz));
    float _4018 = isnan(0.0) ? _2068 : (isnan(_2068) ? 0.0 : max(_2068, 0.0));
    float _2071 = isnan(1.0) ? _4018 : (isnan(_4018) ? 1.0 : min(_4018, 1.0));
    float _4029 = isnan(0.0) ? _648 : (isnan(_648) ? 0.0 : max(_648, 0.0));
    float _2072 = isnan(1.0) ? _4029 : (isnan(_4029) ? 1.0 : min(_4029, 1.0));
    float _2073 = dot(vec3(_534, _535, _536), vec3(_2065, _2066, _2067));
    float _4040 = isnan(0.0) ? _2073 : (isnan(_2073) ? 0.0 : max(_2073, 0.0));
    float _2076 = isnan(1.0) ? _4040 : (isnan(_4040) ? 1.0 : min(_4040, 1.0));
    float _2077 = dot(vec3(cbLight._m0[_1977].xyz), vec3(_2065, _2066, _2067));
    float _4051 = isnan(0.0) ? _2077 : (isnan(_2077) ? 0.0 : max(_2077, 0.0));
    float _2081 = _2057 * _2057;
    float _2085 = ((_2076 * _2076) * (_2081 + (-1.0))) + 1.0;
    float _2096 = (exp2(log2(1.0 - (isnan(1.0) ? _4051 : (isnan(_4051) ? 1.0 : min(_4051, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2097 = 1.0 - _2057;
    float _2108 = (0.5 / (((_2072 * ((_2071 * _2097) + _2057)) + 9.9999999392252902907785028219223e-09) + (((_2072 * _2097) + _2057) * _2071))) * _2071;
    float _4062 = isnan(0.0) ? _2108 : (isnan(_2108) ? 0.0 : max(_2108, 0.0));
    float _2110 = (isnan(1.0) ? _4062 : (isnan(_4062) ? 1.0 : min(_4062, 1.0))) * (_2081 / ((_2085 * _2085) * 3.141590118408203125));
    uint _2124 = _1977 + 9u;
    float _2135 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2011].w)) * _537) * 0.949999988079071044921875);
    float _2136 = _2135 * _2135;
    float _2137 = cbLight._m0[_2011].x + _561;
    float _2138 = cbLight._m0[_2011].y + _562;
    float _2139 = cbLight._m0[_2011].z + _563;
    float _2143 = inversesqrt(dot(vec3(_2137, _2138, _2139), vec3(_2137, _2138, _2139)));
    float _2144 = _2143 * _2137;
    float _2145 = _2143 * _2138;
    float _2146 = _2143 * _2139;
    float _2147 = dot(vec3(_534, _535, _536), vec3(cbLight._m0[_2011].xyz));
    float _4073 = isnan(0.0) ? _2147 : (isnan(_2147) ? 0.0 : max(_2147, 0.0));
    float _2150 = isnan(1.0) ? _4073 : (isnan(_4073) ? 1.0 : min(_4073, 1.0));
    float _2151 = dot(vec3(_534, _535, _536), vec3(_2144, _2145, _2146));
    float _4084 = isnan(0.0) ? _2151 : (isnan(_2151) ? 0.0 : max(_2151, 0.0));
    float _2154 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
    float _2155 = dot(vec3(cbLight._m0[_2011].xyz), vec3(_2144, _2145, _2146));
    float _4095 = isnan(0.0) ? _2155 : (isnan(_2155) ? 0.0 : max(_2155, 0.0));
    float _2159 = _2136 * _2136;
    float _2163 = ((_2154 * _2154) * (_2159 + (-1.0))) + 1.0;
    float _2172 = (exp2(log2(1.0 - (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2173 = 1.0 - _2136;
    float _2183 = (0.5 / (((_2072 * ((_2150 * _2173) + _2136)) + 9.9999999392252902907785028219223e-09) + (((_2072 * _2173) + _2136) * _2150))) * _2150;
    float _4106 = isnan(0.0) ? _2183 : (isnan(_2183) ? 0.0 : max(_2183, 0.0));
    float _2185 = (isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0))) * (_2159 / ((_2163 * _2163) * 3.141590118408203125));
    float _2195 = (((_2172 * cbLight._m0[_2124].x) * _2185) * _1994) + ((((cbLight._m0[_2043].x * _1966) * _2096) * _2110) * _2007);
    float _2196 = (((_2172 * cbLight._m0[_2124].y) * _2185) * _1994) + ((((cbLight._m0[_2043].y * _1968) * _2096) * _2110) * _2007);
    float _2197 = (((_2172 * cbLight._m0[_2124].z) * _2185) * _1994) + ((((cbLight._m0[_2043].z * _1970) * _2096) * _2110) * _2007);
    float _2360;
    float _2362;
    float _2364;
    float _2366;
    float _2368;
    float _2370;
    if (_1975.y == 0u)
    {
        uvec4 _2315 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2316 = _2315.x;
        uint _2327 = uint((float(_2315.y) * floor(float(uint(cbSceneParam._m0[85u].y * _583) / _2316))) + floor(float(uint(cbSceneParam._m0[85u].x * _582) / _2316)));
        float _2337 = (log2(_1753 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2338 = isnan(0.0) ? _2337 : (isnan(_2337) ? 0.0 : max(_2337, 0.0));
        uint _2341 = uint(isnan(14.0) ? _2338 : (isnan(_2338) ? 14.0 : min(_2338, 14.0)));
        uvec4 _2346 = texelFetch(g_lightClusterGridBuffer, int(((_2341 << 2u) + (_2327 << 6u)) >> 2u));
        uint _2347 = _2346.x;
        uint _2348 = _2315.z;
        float _2455;
        float _2457;
        float _2459;
        float _2461;
        float _2463;
        float _2465;
        if (((((1u << ((_2348 >> 4u) & 15u)) + 4294967295u) & _2347) == 0u) || ((_2348 & 240u) == 0u))
        {
            _2455 = 0.0;
            _2457 = 0.0;
            _2459 = 0.0;
            _2461 = 0.0;
            _2463 = 0.0;
            _2465 = 0.0;
        }
        else
        {
            float _2456;
            float _2458;
            float _2460;
            float _2462;
            float _2464;
            float _2466;
            float _2633 = 0.0;
            float _2634 = 0.0;
            float _2635 = 0.0;
            float _2636 = 0.0;
            float _2637 = 0.0;
            float _2638 = 0.0;
            uint _2639 = 0u;
            uint _2648;
            bool _2649;
            for (;;)
            {
                _2648 = texelFetch(g_lightClassification, int((((_2341 << 5u) + (_2327 << 9u)) + (_2639 << 2u)) >> 2u)).x;
                _2649 = _2648 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2649)
                {
                    frontier_phi_71_pred = _2636;
                    frontier_phi_71_pred_1 = _2635;
                    frontier_phi_71_pred_2 = _2634;
                    frontier_phi_71_pred_3 = _2633;
                    frontier_phi_71_pred_4 = _2637;
                    frontier_phi_71_pred_5 = _2638;
                }
                else
                {
                    float _2799;
                    float _2800;
                    float _2801;
                    float _2802;
                    float _2803;
                    float _2804;
                    uint _2805;
                    _2799 = _2633;
                    _2800 = _2634;
                    _2801 = _2635;
                    _2802 = _2636;
                    _2803 = _2637;
                    _2804 = _2638;
                    _2805 = _2648;
                    float _2726;
                    float _2727;
                    float _2728;
                    float _2729;
                    float _2730;
                    float _2731;
                    for (;;)
                    {
                        uint _2809 = uint(findLSB(_2805)) + (_2639 << 5u);
                        uint _2806 = (_2805 + 4294967295u) & _2805;
                        uint _2811 = _2809 * 48u;
                        vec4 _2825 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2811)).x, texelFetch(g_PointLightRenderingBuffer, int(_2811 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2811 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2811 + 3u)).x));
                        uint _2831 = (_2809 * 48u) + 4u;
                        vec4 _2844 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2831)).x, texelFetch(g_PointLightRenderingBuffer, int(_2831 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2831 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2831 + 3u)).x));
                        uint _2850 = (_2809 * 48u) + 8u;
                        vec3 _2861 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2850)).x, texelFetch(g_PointLightRenderingBuffer, int(_2850 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2850 + 2u)).x));
                        float _2865 = _2825.x - _1751;
                        float _2866 = _2825.y - _1752;
                        float _2867 = _2825.z - _1753;
                        float _2868 = dot(vec3(_2865, _2866, _2867), vec3(_2865, _2866, _2867));
                        float _2871 = inversesqrt(_2868);
                        float _2872 = _2871 * _2865;
                        float _2873 = _2871 * _2866;
                        float _2874 = _2871 * _2867;
                        float _2875 = dot(vec3(_602, _605, _608), vec3(_2872, _2873, _2874));
                        float _2880 = 1.0 - (_2868 * _2825.w);
                        float _4127 = isnan(0.0) ? _2880 : (isnan(_2880) ? 0.0 : max(_2880, 0.0));
                        float _2881 = isnan(1.0) ? _4127 : (isnan(_4127) ? 1.0 : min(_4127, 1.0));
                        float _2882 = sqrt(_2868) * _2844.w;
                        float _2885 = 1.39999997615814208984375 / (_2882 + 1.39999997615814208984375);
                        float _2886 = _2885 * _2885;
                        float _2889 = ((1.0 - _2886) * _2875) + _2886;
                        float _2892 = _2882 * _2882;
                        float _2896 = ((isnan(0.0) ? _2889 : (isnan(_2889) ? 0.0 : max(_2889, 0.0))) * _2881) / ((_2892 * 0.699999988079071044921875) + 1.0);
                        float _2900 = (-0.0) - _1751;
                        float _2901 = (-0.0) - _1752;
                        float _2902 = (-0.0) - _1753;
                        float _2906 = inversesqrt(dot(vec3(_2900, _2901, _2902), vec3(_2900, _2901, _2902)));
                        float _2907 = _2906 * _2900;
                        float _2908 = _2906 * _2901;
                        float _2909 = _2906 * _2902;
                        float _2916 = exp2(log2(1.0 / ((_2892 * 3.5) + 5.0)) * 0.25);
                        float _2917 = 1.0 - _663;
                        float _2924 = sqrt(1.0 - ((1.0 - (_2917 * _2917)) * (1.0 - (_2916 * _2916))));
                        float _2925 = _2924 * _2924;
                        float _2926 = _2925 * _2925;
                        float _2927 = _2907 + _2872;
                        float _2928 = _2908 + _2873;
                        float _2929 = _2909 + _2874;
                        float _2933 = inversesqrt(dot(vec3(_2927, _2928, _2929), vec3(_2927, _2928, _2929)));
                        float _2937 = dot(vec3(_602, _605, _608), vec3(_2907, _2908, _2909));
                        float _4143 = isnan(0.0) ? _2937 : (isnan(_2937) ? 0.0 : max(_2937, 0.0));
                        float _2940 = isnan(1.0) ? _4143 : (isnan(_4143) ? 1.0 : min(_4143, 1.0));
                        float _2941 = dot(vec3(_602, _605, _608), vec3(_2933 * _2927, _2933 * _2928, _2933 * _2929));
                        float _4154 = isnan(0.0) ? _2941 : (isnan(_2941) ? 0.0 : max(_2941, 0.0));
                        float _2944 = isnan(1.0) ? _4154 : (isnan(_4154) ? 1.0 : min(_4154, 1.0));
                        float _2948 = ((_2944 * _2944) * (_2926 + (-1.0))) + 1.0;
                        float _2949 = _2885 * _2925;
                        float _2950 = _2949 * _2949;
                        float _2953 = ((1.0 - _2950) * _2875) + _2950;
                        float _4165 = isnan(0.0) ? _2953 : (isnan(_2953) ? 0.0 : max(_2953, 0.0));
                        float _2954 = isnan(1.0) ? _4165 : (isnan(_4165) ? 1.0 : min(_4165, 1.0));
                        float _2955 = 1.0 - _2925;
                        float _2965 = (0.5 / (((_2954 * ((_2940 * _2955) + _2925)) + 9.9999999392252902907785028219223e-09) + (((_2954 * _2955) + _2925) * _2940))) * _2954;
                        float _4176 = isnan(0.0) ? _2965 : (isnan(_2965) ? 0.0 : max(_2965, 0.0));
                        float _2976 = (((_2926 * 3.1415927410125732421875) * (isnan(1.0) ? _4176 : (isnan(_4176) ? 1.0 : min(_4176, 1.0)))) / ((_2948 * _2948) * ((_2892 * 2.1991131305694580078125) + 3.141590118408203125))) * _2881;
                        _2729 = (_2896 * _2844.x) + _2802;
                        _2730 = (_2896 * _2844.y) + _2803;
                        _2731 = (_2896 * _2844.z) + _2804;
                        _2726 = (_2976 * _2861.x) + _2799;
                        _2727 = (_2976 * _2861.y) + _2800;
                        _2728 = (_2976 * _2861.z) + _2801;
                        if (_2806 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2799 = _2726;
                            _2800 = _2727;
                            _2801 = _2728;
                            _2802 = _2729;
                            _2803 = _2730;
                            _2804 = _2731;
                            _2805 = _2806;
                        }
                    }
                    frontier_phi_71_pred = _2729;
                    frontier_phi_71_pred_1 = _2728;
                    frontier_phi_71_pred_2 = _2727;
                    frontier_phi_71_pred_3 = _2726;
                    frontier_phi_71_pred_4 = _2730;
                    frontier_phi_71_pred_5 = _2731;
                }
                _2462 = frontier_phi_71_pred;
                _2460 = frontier_phi_71_pred_1;
                _2458 = frontier_phi_71_pred_2;
                _2456 = frontier_phi_71_pred_3;
                _2464 = frontier_phi_71_pred_4;
                _2466 = frontier_phi_71_pred_5;
                uint _2640 = _2639 + 1u;
                if (_2640 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2633 = _2456;
                    _2634 = _2458;
                    _2635 = _2460;
                    _2636 = _2462;
                    _2637 = _2464;
                    _2638 = _2466;
                    _2639 = _2640;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2455 = _2456;
            _2457 = _2458;
            _2459 = _2460;
            _2461 = _2462;
            _2463 = _2464;
            _2465 = _2466;
        }
        uvec4 _2469 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2470 = _2469.z;
        uint _2472 = (_2470 >> 8u) & 15u;
        float _2601;
        float _2603;
        float _2605;
        float _2607;
        float _2609;
        float _2611;
        if (((4294967295u << _2472) & _2347) == 0u)
        {
            _2601 = _2455;
            _2603 = _2457;
            _2605 = _2459;
            _2607 = _2461;
            _2609 = _2463;
            _2611 = _2465;
        }
        else
        {
            float _2626 = inversesqrt(dot(vec3(_1751, _1752, _1753), vec3(_1751, _1752, _1753)));
            float _2627 = _2626 * _1751;
            float _2628 = _2626 * _1752;
            float _2629 = _2626 * _1753;
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2472 < ((_2470 >> 12u) & 15u))
            {
                float _2602;
                float _2604;
                float _2606;
                float _2608;
                float _2610;
                float _2612;
                float _2782 = _2455;
                float _2783 = _2457;
                float _2784 = _2459;
                float _2785 = _2461;
                float _2786 = _2463;
                float _2787 = _2465;
                uint _2788 = _2472;
                uint _2797;
                bool _2798;
                for (;;)
                {
                    _2797 = texelFetch(g_lightClassification, int((((_2341 << 5u) + (_2327 << 9u)) + (_2788 << 2u)) >> 2u)).x;
                    _2798 = _2797 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2798)
                    {
                        frontier_phi_82_pred = _2785;
                        frontier_phi_82_pred_1 = _2784;
                        frontier_phi_82_pred_2 = _2783;
                        frontier_phi_82_pred_3 = _2782;
                        frontier_phi_82_pred_4 = _2787;
                        frontier_phi_82_pred_5 = _2786;
                    }
                    else
                    {
                        float _2990;
                        float _2991;
                        float _2992;
                        float _2993;
                        float _2994;
                        float _2995;
                        float _3283;
                        float _3284;
                        float _3285;
                        float _3286;
                        float _3287;
                        float _3288;
                        float _3003 = _2782;
                        float _3004 = _2783;
                        float _3005 = _2784;
                        float _3006 = _2785;
                        float _3007 = _2786;
                        float _3008 = _2787;
                        uint _3009 = _2797;
                        uint _3010;
                        vec4 _3035;
                        float _3036;
                        vec4 _3051;
                        vec3 _3063;
                        vec4 _3078;
                        vec4 _3093;
                        float _3139;
                        bool _3140;
                        for (;;)
                        {
                            uint _3020 = ((_2788 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3009));
                            _3010 = (_3009 + 4294967295u) & _3009;
                            uint _3022 = _3020 * 40u;
                            _3035 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3022)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3022 + 3u)).x));
                            _3036 = _3035.w;
                            uint _3038 = (_3020 * 40u) + 4u;
                            _3051 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3038)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3038 + 3u)).x));
                            uint _3053 = (_3020 * 40u) + 8u;
                            _3063 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3053)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3053 + 2u)).x));
                            uint _3065 = (_3020 * 40u) + 16u;
                            _3078 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3065)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3065 + 3u)).x));
                            uint _3080 = (_3020 * 40u) + 20u;
                            _3093 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3080)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3080 + 3u)).x));
                            uint _3095 = (_3020 * 40u) + 24u;
                            vec4 _3108 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3095)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3095 + 3u)).x));
                            uint _3114 = (_3020 * 40u) + 28u;
                            vec4 _3127 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3114)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3114 + 3u)).x));
                            _3139 = fma(_1753, _3127.z, fma(_1752, _3127.y, _3127.x * _1751)) + _3127.w;
                            _3140 = !((fma(_1753, _3108.z, fma(_1752, _3108.y, _3108.x * _1751)) + _3108.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_3140)
                            {
                                float _3167 = _3035.x - _1751;
                                float _3168 = _3035.y - _1752;
                                float _3169 = _3035.z - _1753;
                                float _3170 = dot(vec3(_3167, _3168, _3169), vec3(_3167, _3168, _3169));
                                float _3173 = inversesqrt(_3170);
                                float _3174 = _3173 * _3167;
                                float _3175 = _3173 * _3168;
                                float _3176 = _3173 * _3169;
                                float _3180 = 1.0 - (_3170 / (_3036 * _3036));
                                float _4187 = isnan(0.0) ? _3180 : (isnan(_3180) ? 0.0 : max(_3180, 0.0));
                                float _3181 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
                                float _3185 = sqrt(_3170) * _3051.w;
                                float _3187 = 1.39999997615814208984375 / (_3185 + 1.39999997615814208984375);
                                float _3188 = _3187 * _3187;
                                float _3191 = ((1.0 - _3188) * dot(vec3(_3174, _3175, _3176), vec3(_602, _605, _608))) + _3188;
                                float _3194 = _3185 * _3185;
                                float _3198 = (fma(_1753, _3078.z, fma(_1752, _3078.y, _3078.x * _1751)) + _3078.w) / _3139;
                                float _3199 = (fma(_1753, _3093.z, fma(_1752, _3093.y, _3093.x * _1751)) + _3093.w) / _3139;
                                float _3203 = 1.0 - dot(vec2(_3198, _3199), vec2(_3198, _3199));
                                float _4203 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0));
                                float _3204 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
                                float _3205 = _3204 * (((isnan(0.0) ? _3191 : (isnan(_3191) ? 0.0 : max(_3191, 0.0))) * _3181) / ((_3194 * 0.699999988079071044921875) + 1.0));
                                float _3217 = exp2(log2(1.0 / ((_3194 * 3.5) + 5.0)) * 0.25);
                                float _3218 = 1.0 - _663;
                                float _3225 = sqrt(1.0 - ((1.0 - (_3218 * _3218)) * (1.0 - (_3217 * _3217))));
                                float _3226 = _3225 * _3225;
                                float _3227 = _3226 * _3226;
                                float _3228 = _3174 - _2627;
                                float _3229 = _3175 - _2628;
                                float _3230 = _3176 - _2629;
                                float _3234 = inversesqrt(dot(vec3(_3228, _3229, _3230), vec3(_3228, _3229, _3230)));
                                float _3238 = dot(vec3(_602, _605, _608), vec3((-0.0) - _2627, (-0.0) - _2628, (-0.0) - _2629));
                                float _4214 = isnan(0.0) ? _3238 : (isnan(_3238) ? 0.0 : max(_3238, 0.0));
                                float _3241 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
                                float _3242 = dot(vec3(_602, _605, _608), vec3(_3234 * _3228, _3234 * _3229, _3234 * _3230));
                                float _4225 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0));
                                float _3245 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
                                float _3249 = ((_3245 * _3245) * (_3227 + (-1.0))) + 1.0;
                                float _3250 = _3187 * _3226;
                                float _3251 = _3250 * _3250;
                                float _3257 = ((1.0 - _3251) * dot(vec3(_602, _605, _608), vec3(_3174, _3175, _3176))) + _3251;
                                float _4236 = isnan(0.0) ? _3257 : (isnan(_3257) ? 0.0 : max(_3257, 0.0));
                                float _3258 = isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0));
                                float _3259 = 1.0 - _3226;
                                float _3269 = (0.5 / (((_3258 * ((_3241 * _3259) + _3226)) + 9.9999999392252902907785028219223e-09) + (((_3258 * _3259) + _3226) * _3241))) * _3258;
                                float _4247 = isnan(0.0) ? _3269 : (isnan(_3269) ? 0.0 : max(_3269, 0.0));
                                float _3279 = (_3204 * _3181) * (((_3227 * 3.1415927410125732421875) * (isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0)))) / ((_3249 * _3249) * ((_3194 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_88_pred = _3205 * _3051.x;
                                frontier_phi_88_pred_1 = _3279 * _3063.z;
                                frontier_phi_88_pred_2 = _3279 * _3063.y;
                                frontier_phi_88_pred_3 = _3279 * _3063.x;
                                frontier_phi_88_pred_4 = _3205 * _3051.z;
                                frontier_phi_88_pred_5 = _3205 * _3051.y;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _3286 = frontier_phi_88_pred;
                            _3285 = frontier_phi_88_pred_1;
                            _3284 = frontier_phi_88_pred_2;
                            _3283 = frontier_phi_88_pred_3;
                            _3288 = frontier_phi_88_pred_4;
                            _3287 = frontier_phi_88_pred_5;
                            _2993 = _3286 + _3006;
                            _2994 = _3287 + _3007;
                            _2995 = _3288 + _3008;
                            _2990 = _3283 + _3003;
                            _2991 = _3284 + _3004;
                            _2992 = _3285 + _3005;
                            if (_3010 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3003 = _2990;
                                _3004 = _2991;
                                _3005 = _2992;
                                _3006 = _2993;
                                _3007 = _2994;
                                _3008 = _2995;
                                _3009 = _3010;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _2993;
                        frontier_phi_82_pred_1 = _2992;
                        frontier_phi_82_pred_2 = _2991;
                        frontier_phi_82_pred_3 = _2990;
                        frontier_phi_82_pred_4 = _2995;
                        frontier_phi_82_pred_5 = _2994;
                    }
                    _2608 = frontier_phi_82_pred;
                    _2606 = frontier_phi_82_pred_1;
                    _2604 = frontier_phi_82_pred_2;
                    _2602 = frontier_phi_82_pred_3;
                    _2612 = frontier_phi_82_pred_4;
                    _2610 = frontier_phi_82_pred_5;
                    uint _2789 = _2788 + 1u;
                    if (_2789 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2782 = _2602;
                        _2783 = _2604;
                        _2784 = _2606;
                        _2785 = _2608;
                        _2786 = _2610;
                        _2787 = _2612;
                        _2788 = _2789;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2612;
                frontier_phi_62_63_ladder_1 = _2610;
                frontier_phi_62_63_ladder_2 = _2608;
                frontier_phi_62_63_ladder_3 = _2604;
                frontier_phi_62_63_ladder_4 = _2602;
                frontier_phi_62_63_ladder_5 = _2606;
            }
            else
            {
                frontier_phi_62_63_ladder = _2465;
                frontier_phi_62_63_ladder_1 = _2463;
                frontier_phi_62_63_ladder_2 = _2461;
                frontier_phi_62_63_ladder_3 = _2457;
                frontier_phi_62_63_ladder_4 = _2455;
                frontier_phi_62_63_ladder_5 = _2459;
            }
            _2601 = frontier_phi_62_63_ladder_4;
            _2603 = frontier_phi_62_63_ladder_3;
            _2605 = frontier_phi_62_63_ladder_5;
            _2607 = frontier_phi_62_63_ladder_2;
            _2609 = frontier_phi_62_63_ladder_1;
            _2611 = frontier_phi_62_63_ladder;
        }
        float _2616 = isnan(1.0) ? _647 : (isnan(_647) ? 1.0 : min(_647, 1.0));
        _2360 = (_2616 * _2607) + _2039;
        _2362 = (_2616 * _2609) + _2040;
        _2364 = (_2616 * _2611) + _2041;
        _2366 = ((_2601 * 0.039999999105930328369140625) * _2616) + _2195;
        _2368 = ((_2603 * 0.039999999105930328369140625) * _2616) + _2196;
        _2370 = ((_2605 * 0.039999999105930328369140625) * _2616) + _2197;
    }
    else
    {
        _2360 = _2039;
        _2362 = _2040;
        _2364 = _2041;
        _2366 = _2195;
        _2368 = _2196;
        _2370 = _2197;
    }
    float _4263 = isnan(0.0) ? _633 : (isnan(_633) ? 0.0 : max(_633, 0.0));
    float _4274 = isnan(0.0) ? _634 : (isnan(_634) ? 0.0 : max(_634, 0.0));
    float _4285 = isnan(0.0) ? _635 : (isnan(_635) ? 0.0 : max(_635, 0.0));
    float _2387 = ((isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0))) * (_2360 + ((isnan(0.0) ? _1405 : (isnan(_1405) ? 0.0 : max(_1405, 0.0))) * _647))) + ((_2366 + ((isnan(0.0) ? _1698 : (isnan(_1698) ? 0.0 : max(_1698, 0.0))) * _1484)) * cbPerFrame._m0[3u].x);
    float _2388 = ((isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0))) * (_2362 + ((isnan(0.0) ? _1408 : (isnan(_1408) ? 0.0 : max(_1408, 0.0))) * _647))) + ((_2368 + ((isnan(0.0) ? _1701 : (isnan(_1701) ? 0.0 : max(_1701, 0.0))) * _1484)) * cbPerFrame._m0[3u].x);
    float _2389 = ((isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0))) * (_2364 + ((isnan(0.0) ? _1411 : (isnan(_1411) ? 0.0 : max(_1411, 0.0))) * _647))) + ((_2370 + ((isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0))) * _1484)) * cbPerFrame._m0[3u].x);
    float _2390 = isnan(0.0) ? _2387 : (isnan(_2387) ? 0.0 : max(_2387, 0.0));
    float _2391 = isnan(0.0) ? _2388 : (isnan(_2388) ? 0.0 : max(_2388, 0.0));
    float _2392 = isnan(0.0) ? _2389 : (isnan(_2389) ? 0.0 : max(_2389, 0.0));
    uint _2393 = _621 + 6u;
    float _2401 = _582 / cbSceneParam._m0[86u].x;
    float _2402 = _583 / cbSceneParam._m0[86u].y;
    vec4 _2416 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2401, _2402, (log2((isnan(cbSceneParam._m0[77u].w) ? _556 : (isnan(_556) ? cbSceneParam._m0[77u].w : min(_556, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2418 = _2416.x;
    float _2419 = _2416.y;
    float _2420 = _2416.z;
    float _2421 = _2416.w;
    float _2517;
    float _2519;
    float _2521;
    float _2523;
    if (_556 > cbSceneParam._m0[78u].w)
    {
        float _2480 = isnan(_556) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _556 : min(cbSceneParam._m0[80u].w, _556));
        float _2481 = _2480 / _556;
        float _2492 = _2481 * _269;
        float _2493 = _270 * _2481;
        float _2494 = (-0.0) - _2493;
        float _2495 = _2481 * _271;
        float _2497 = (cbSceneParam._m0[77u].w * _2494) / _2480;
        float _2498 = _2497 + cbSceneParam._m0[79u].w;
        float _2499 = cbSceneParam._m0[79u].w - _2493;
        float _2505 = sqrt(((_2492 * _2492) + (_2493 * _2493)) + (_2495 * _2495));
        float _2508 = (1.0 - (cbSceneParam._m0[77u].w / _2480)) * _2505;
        float _2513 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2515 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2739;
        if (abs((_2494 - _2497) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2739 = ((((_2498 > 0.0) ? exp2(_2513 * _2498) : (2.0 - exp2(_2515 * _2498))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2508;
        }
        else
        {
            float _2662 = 1.0 / cbSceneParam._m0[80u].x;
            float _2663 = isnan(_2499) ? _2498 : (isnan(_2498) ? _2499 : max(_2498, _2499));
            float _2664 = isnan(_2499) ? _2498 : (isnan(_2498) ? _2499 : min(_2498, _2499));
            float _2673 = isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : min(_2663, 0.0));
            float _2674 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : min(_2664, 0.0));
            _2739 = ((abs(_2505 / _2494) * cbSceneParam._m0[80u].y) * ((((_2673 - _2674) * 2.0) - ((exp2(_2513 * (isnan(0.0) ? _2663 : (isnan(_2663) ? 0.0 : max(_2663, 0.0)))) - exp2(_2513 * (isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0))))) * _2662)) - ((exp2(_2515 * _2673) - exp2(_2515 * _2674)) * _2662))) + (_2508 * cbSceneParam._m0[80u].z);
        }
        vec4 _2741 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2401, _2402, 1.0), 0.0);
        float _2750 = exp2((_2739 * (-1.44269502162933349609375)) * (1.0 - _2741.w));
        float _2751 = log2(_2750);
        float _2767 = log2(_2421);
        _2517 = (exp2(_2767 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2751 * cbSceneParam._m0[78u].x)) * _2741.x) / cbSceneParam._m0[78u].x)) + _2418;
        _2519 = (exp2(_2767 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2751 * cbSceneParam._m0[78u].y)) * _2741.y) / cbSceneParam._m0[78u].y)) + _2419;
        _2521 = (exp2(_2767 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2751 * cbSceneParam._m0[78u].z)) * _2741.z) / cbSceneParam._m0[78u].z)) + _2420;
        _2523 = _2750 * _2421;
    }
    else
    {
        _2517 = _2418;
        _2519 = _2419;
        _2521 = _2420;
        _2523 = _2421;
    }
    bool _2777;
    vec4 _2533;
    vec4 _2555;
    float _2557;
    float _2561;
    float _2562;
    float _2563;
    float _2564;
    bool _2574;
    for (;;)
    {
        _2533 = cbMatDynParam._m0[0u];
        float _2535 = roundEven(_2533.y);
        bool _2536 = _2535 == 3.0;
        float _2537 = log2(_2523);
        float _2544 = exp2(_2537 * cbSceneParam._m0[78u].x) * _2390;
        float _2545 = exp2(_2537 * cbSceneParam._m0[78u].y) * _2391;
        float _2546 = exp2(_2537 * cbSceneParam._m0[78u].z) * _2392;
        float _2553 = _570 + (-0.5);
        _2555 = cbMtdParam._m0[1u];
        _2557 = _2555.y * _2553;
        float _2560 = (_2535 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2561 = _2560 * (_2536 ? _2544 : (_2544 + (cbSceneParam._m0[72u].w * _2517)));
        _2562 = _2560 * (_2536 ? _2545 : (_2545 + (cbSceneParam._m0[72u].w * _2519)));
        _2563 = _2560 * (_2536 ? _2546 : (_2546 + (cbSceneParam._m0[72u].w * _2521)));
        _2564 = _2553 * 0.999000012874603271484375;
        _2574 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2574)
        {
            if ((cbInstanceData._m0[_621 + 7u].x + _2564) < 0.5)
            {
                _2777 = true;
                break;
            }
        }
        uint _2697 = _623 + uint(_2533.w);
        if ((cbInstanceData._m0[_2697].w < 1.0) && ((cbInstanceData._m0[_2697].w + _2564) < 0.5))
        {
            _2777 = true;
            break;
        }
        if ((_2557 + 1.0) < _2555.x)
        {
            _2777 = true;
            break;
        }
        _2777 = false;
        break;
    }
    float _2981;
    if (_2777)
    {
        discard_state = true;
        _2981 = 0.0;
    }
    else
    {
        _2981 = cbInstanceData._m0[_2393].w;
    }
    SV_Target.x = _2561;
    SV_Target.y = _2562;
    SV_Target.z = _2563;
    SV_Target.w = _2981;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2393].w;
    discard_exit();
}


