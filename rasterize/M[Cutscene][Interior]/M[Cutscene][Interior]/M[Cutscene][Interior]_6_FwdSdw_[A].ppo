#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_8;
layout(set = 0, binding = 11) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1308;
float _3766;
float _3767;
float _3768;
float _3769;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _198 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _199 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _200 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _205 = inversesqrt(dot(vec3(_198, _199, _200), vec3(_198, _199, _200)));
    float _206 = _205 * _198;
    float _207 = _205 * _199;
    float _208 = _205 * _200;
    float _212 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _213 = _212 * NORMAL.x;
    float _214 = _212 * NORMAL.y;
    float _215 = _212 * NORMAL.z;
    float _219 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _220 = _219 * TANGENT.x;
    float _221 = _219 * TANGENT.y;
    float _222 = _219 * TANGENT.z;
    float _267 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _277 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _267);
    float _278 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _267);
    float _279 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _267);
    vec4 _292 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _295 = _292.x;
    vec4 _313 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _330 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _295) + cbMtdParam._m0[12u].x) * _313.x;
    float _332 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _295) + cbMtdParam._m0[12u].y) * _313.y;
    float _334 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _295) + cbMtdParam._m0[12u].z) * _313.z;
    vec4 _352 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _388 = cbMtdParam._m0[24u].x + _277;
    float _389 = cbMtdParam._m0[24u].y + _278;
    float _390 = cbMtdParam._m0[24u].z + _279;
    float _404 = (-0.0) - dot(vec3(_388, _389, _390), vec3(_206, _207, _208));
    float _405 = (-0.0) - dot(vec3(_388, _389, _390), vec3(_220, _221, _222));
    float _406 = (-0.0) - dot(vec3(_388, _389, _390), vec3((-0.0) - _213, (-0.0) - _214, (-0.0) - _215));
    float _410 = inversesqrt(dot(vec3(_404, _405, _406), vec3(_404, _405, _406)));
    float _413 = _410 * _406;
    float _414 = (_410 * _404) + ((cbMtdParam._m0[22u].x * _295) * ((_352.x * 2.0) + (-1.0)));
    float _415 = (_410 * _405) + ((cbMtdParam._m0[22u].y * _295) * ((_352.y * 2.0) + (-1.0)));
    float _416 = _414 * cbMtdParam._m0[20u].w;
    float _417 = _415 * cbMtdParam._m0[20u].z;
    float _418 = fract(TEXCOORD.x);
    float _419 = fract(TEXCOORD.y);
    float _425;
    if (_416 > 0.0)
    {
        _425 = (1.0 - _418) / _416;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_416 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _418) / _416;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _425 = frontier_phi_3_2_ladder;
    }
    float _433;
    if (_417 > 0.0)
    {
        _433 = (1.0 - _419) / _417;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_417 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _419) / _417;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _433 = frontier_phi_7_6_ladder;
    }
    bool _435 = _413 > 0.0;
    float _437 = _435 ? (cbMtdParam._m0[16u].x / _413) : 5000.0;
    float _438 = isnan(_433) ? _425 : (isnan(_425) ? _433 : min(_425, _433));
    float _439 = isnan(_437) ? _438 : (isnan(_438) ? _437 : min(_438, _437));
    float _443 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _444 = _418 + (-0.5);
    float _447 = _419 + (-0.5);
    float _450 = ((_439 * _413) + _443) / _443;
    vec4 _475 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (((((_444 + (_439 * _416)) / _450) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (((((_447 + (_439 * _417)) / _450) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    float _488 = (_475.x * _295) * cbMtdParam._m0[9u].x;
    float _489 = (_475.y * _295) * cbMtdParam._m0[9u].y;
    float _490 = (_475.z * _295) * cbMtdParam._m0[9u].z;
    float _509 = _414 * cbMtdParam._m0[22u].w;
    float _510 = _415 * cbMtdParam._m0[22u].z;
    bool _511 = _509 > 0.0;
    float _516;
    if (_511)
    {
        _516 = (1.0 - _418) / _509;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_509 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _418) / _509;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _516 = frontier_phi_11_10_ladder;
    }
    bool _518 = _510 > 0.0;
    float _523;
    if (_518)
    {
        _523 = (1.0 - _419) / _510;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_510 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _419) / _510;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _523 = frontier_phi_15_14_ladder;
    }
    float _526 = _435 ? (cbMtdParam._m0[18u].x / _413) : 5000.0;
    float _527 = isnan(_523) ? _516 : (isnan(_516) ? _523 : min(_516, _523));
    float _528 = isnan(_526) ? _527 : (isnan(_527) ? _526 : min(_527, _526));
    float _532 = cbMtdParam._m0[19u].y * cbMtdParam._m0[18u].x;
    float _536 = ((_528 * _413) + _532) / _532;
    float _541 = cbMtdParam._m0[19u].x - cbMtdParam._m0[20u].x * trunc(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    float _543 = floor(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    vec4 _559 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_444 + (_528 * _509)) / _536) + 0.5) + _541) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_447 + (_528 * _510)) / _536) + 0.5) + _543) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[0u].w));
    float _574;
    if (_511)
    {
        _574 = (1.0 - _418) / _509;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_509 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _418) / _509;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _574 = frontier_phi_19_18_ladder;
    }
    float _580;
    if (_518)
    {
        _580 = (1.0 - _419) / _510;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_510 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _419) / _510;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _580 = frontier_phi_23_22_ladder;
    }
    float _582 = isnan(_580) ? _574 : (isnan(_574) ? _580 : min(_574, _580));
    float _583 = isnan(_526) ? _582 : (isnan(_582) ? _526 : min(_582, _526));
    float _590 = ((_583 * _413) + _532) / _532;
    vec4 _610 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_444 + (_583 * _509)) / _590) + 0.5) + _541) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_447 + (_583 * _510)) / _590) + 0.5) + _543) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[8u].w));
    float _612 = _610.x;
    float _622 = (((((cbMtdParam._m0[10u].x * _295) * _559.x) - _488) * _295) * _612) + _488;
    float _623 = (((((cbMtdParam._m0[10u].y * _295) * _559.y) - _489) * _295) * _612) + _489;
    float _624 = (((((cbMtdParam._m0[10u].z * _295) * _559.z) - _490) * _295) * _612) + _490;
    float _640 = _414 * cbMtdParam._m0[23u].y;
    float _641 = _415 * cbMtdParam._m0[23u].x;
    bool _642 = _640 > 0.0;
    float _647;
    if (_642)
    {
        _647 = (1.0 - _418) / _640;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_640 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _418) / _640;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _647 = frontier_phi_27_26_ladder;
    }
    bool _649 = _641 > 0.0;
    float _654;
    if (_649)
    {
        _654 = (1.0 - _419) / _641;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_641 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _419) / _641;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _654 = frontier_phi_31_30_ladder;
    }
    float _657 = _435 ? (cbMtdParam._m0[19u].w / _413) : 5000.0;
    float _658 = isnan(_654) ? _647 : (isnan(_647) ? _654 : min(_647, _654));
    float _659 = isnan(_657) ? _658 : (isnan(_658) ? _657 : min(_658, _657));
    float _663 = cbMtdParam._m0[19u].w * cbMtdParam._m0[16u].z;
    float _667 = ((_659 * _413) + _663) / _663;
    float _672 = cbMtdParam._m0[19u].z - cbMtdParam._m0[23u].z * trunc(cbMtdParam._m0[19u].z / cbMtdParam._m0[23u].z);
    float _674 = floor(cbMtdParam._m0[19u].z / cbMtdParam._m0[23u].z);
    vec4 _690 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * (((((_444 + (_659 * _640)) / _667) + 0.5) + _672) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * (((((_447 + (_659 * _641)) / _667) + 0.5) + _674) / cbMtdParam._m0[23u].w)) + cbTextureTilingScale._m0[9u].w));
    float _705;
    if (_642)
    {
        _705 = (1.0 - _418) / _640;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_640 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _418) / _640;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _705 = frontier_phi_35_34_ladder;
    }
    float _711;
    if (_649)
    {
        _711 = (1.0 - _419) / _641;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_641 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _419) / _641;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _711 = frontier_phi_39_38_ladder;
    }
    float _713 = isnan(_711) ? _705 : (isnan(_705) ? _711 : min(_705, _711));
    float _714 = isnan(_657) ? _713 : (isnan(_713) ? _657 : min(_713, _657));
    float _721 = ((_714 * _413) + _663) / _663;
    vec4 _741 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_444 + (_714 * _640)) / _721) + 0.5) + _672) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_447 + (_714 * _641)) / _721) + 0.5) + _674) / cbMtdParam._m0[23u].w)) + cbTextureTilingScale._m0[10u].w));
    float _743 = _741.x;
    vec4 _768 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _772 = _768.z;
    float _775 = (_768.x * 2.0) + (-1.0);
    float _776 = (_768.y * 2.0) + (-1.0);
    float _777 = dot(vec2(_775, _776), vec2(_775, _776));
    float _3828 = isnan(0.0) ? _777 : (isnan(_777) ? 0.0 : max(_777, 0.0));
    float _782 = sqrt(1.0 - (isnan(1.0) ? _3828 : (isnan(_3828) ? 1.0 : min(_3828, 1.0))));
    float _785 = fma(_782, _213, fma(_776, _220, _775 * _206));
    float _788 = fma(_782, _214, fma(_776, _221, _775 * _207));
    float _791 = fma(_782, _215, fma(_776, _222, _775 * _208));
    float _795 = inversesqrt(dot(vec3(_785, _788, _791), vec3(_785, _788, _791)));
    float _796 = _795 * _785;
    float _797 = _795 * _788;
    float _798 = _795 * _791;
    float _3839 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
    float _799 = isnan(1.0) ? _3839 : (isnan(_3839) ? 1.0 : min(_3839, 1.0));
    float _3850 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _3861 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _3872 = isnan(0.0) ? _334 : (isnan(_334) ? 0.0 : max(_334, 0.0));
    float _818 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _822 = inversesqrt(dot(vec3(_277, _278, _279), vec3(_277, _278, _279)));
    float _823 = _277 * _822;
    float _824 = _278 * _822;
    float _825 = _279 * _822;
    vec4 _830 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _832 = _830.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _989 = sqrt(((_277 * _277) + (_278 * _278)) + (_279 * _279));
        float _995 = (cbMatDynParam._m0[5u].x * _989) + cbMatDynParam._m0[5u].y;
        float _3883 = isnan(0.0) ? _995 : (isnan(_995) ? 0.0 : max(_995, 0.0));
        float _996 = isnan(1.0) ? _3883 : (isnan(_3883) ? 1.0 : min(_3883, 1.0));
        float _1000 = (cbMatDynParam._m0[5u].z * _989) + cbMatDynParam._m0[5u].w;
        float _3894 = isnan(0.0) ? _1000 : (isnan(_1000) ? 0.0 : max(_1000, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3894 : (isnan(_3894) ? 1.0 : min(_3894, 1.0))) - _996)) + _996) < ((_832 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _844 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _845 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _864 = fma(_798, cbSceneParam._m0[5u].z, fma(_797, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _796));
    float _867 = fma(_798, cbSceneParam._m0[6u].z, fma(_797, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _796));
    float _870 = fma(_798, cbSceneParam._m0[7u].z, fma(_797, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _796));
    uint _883 = uint(roundEven(NORMAL.w)) * 13u;
    uint _885 = _883 + 9u;
    uint _886 = _885 + uint(cbMatDynParam._m0[0u].w);
    float _892 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3850 : (isnan(_3850) ? 1.0 : min(_3850, 1.0)))) * cbInstanceData._m0[_886].x;
    float _893 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3861 : (isnan(_3861) ? 1.0 : min(_3861, 1.0)))) * cbInstanceData._m0[_886].y;
    float _894 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3872 : (isnan(_3872) ? 1.0 : min(_3872, 1.0)))) * cbInstanceData._m0[_886].z;
    float _3905 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _895 = isnan(1.0) ? _3905 : (isnan(_3905) ? 1.0 : min(_3905, 1.0));
    float _3916 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _896 = isnan(1.0) ? _3916 : (isnan(_3916) ? 1.0 : min(_3916, 1.0));
    float _3927 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _897 = isnan(1.0) ? _3927 : (isnan(_3927) ? 1.0 : min(_3927, 1.0));
    vec4 _906 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _844, cbSceneParam._m0[86u].y * _845));
    float _909 = _906.x * TEXCOORD_4.z;
    float _910 = dot(vec3(_796, _797, _798), vec3(_823, _824, _825));
    float _913 = _910 * 2.0;
    float _917 = (_913 * _796) - _823;
    float _918 = (_913 * _797) - _824;
    float _919 = (_913 * _798) - _825;
    float _923 = abs(dot(vec3(_823, _824, _825), vec3(_796, _797, _798)));
    float _3938 = isnan(0.0) ? _923 : (isnan(_923) ? 0.0 : max(_923, 0.0));
    float _925 = sqrt(_799);
    float _938 = exp2((_925 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3938 : (isnan(_3938) ? 1.0 : min(_3938, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_925 * 3.0));
    float _970 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _974 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _978 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1307;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    float _1321;
    float _1322;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1034 = fma(_978, cbModelParam._m0[26u].z, fma(_974, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _970));
        float _1038 = fma(_978, cbModelParam._m0[27u].z, fma(_974, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _970));
        float _1042 = fma(_978, cbModelParam._m0[28u].z, fma(_974, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _970));
        float _1065 = _970 + _796;
        float _1066 = _974 + _797;
        float _1067 = _978 + _798;
        float _1077 = fma(_1067, cbModelParam._m0[26u].z, fma(_1066, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1065)) - _1034;
        float _1078 = fma(_1067, cbModelParam._m0[27u].z, fma(_1066, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1065)) - _1038;
        float _1079 = fma(_1067, cbModelParam._m0[28u].z, fma(_1066, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1065)) - _1042;
        float _1083 = inversesqrt(dot(vec3(_1077, _1078, _1079), vec3(_1077, _1078, _1079)));
        float _1096 = ((_1083 * _1077) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1034 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1097 = ((_1083 * _1078) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1038 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1098 = ((_1083 * _1079) / cbModelParam._m0[34u].z) + ((((((_1042 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1101 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1096, _1097, _1098), 0.0);
        vec4 _1108 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1096, _1097, _1098), 0.0);
        vec4 _1115 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1096, _1097, _1098), 0.0);
        vec4 _1122 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1096, _1097, _1098), 0.0);
        float _1135 = exp2((_1101.w + (-0.5)) * 20.0) * 2.0;
        float _1136 = _1135 * (_1101.x + (-0.5));
        float _1137 = _1135 * (_1101.y + (-0.5));
        float _1138 = _1135 * (_1101.z + (-0.5));
        float _1145 = exp2((_1108.w + (-0.5)) * 20.0) * 2.0;
        float _1146 = _1145 * (_1108.x + (-0.5));
        float _1147 = _1145 * (_1108.y + (-0.5));
        float _1148 = _1145 * (_1108.z + (-0.5));
        float _1155 = exp2((_1115.w + (-0.5)) * 20.0) * 2.0;
        float _1156 = _1155 * (_1115.x + (-0.5));
        float _1157 = _1155 * (_1115.y + (-0.5));
        float _1158 = _1155 * (_1115.z + (-0.5));
        float _1165 = exp2((_1122.w + (-0.5)) * 20.0) * 2.0;
        float _1166 = _1165 * (_1122.x + (-0.5));
        float _1167 = _1165 * (_1122.y + (-0.5));
        float _1168 = _1165 * (_1122.z + (-0.5));
        float _1169 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1170 = isnan(0.0) ? _1167 : (isnan(_1167) ? 0.0 : max(_1167, 0.0));
        float _1171 = isnan(0.0) ? _1168 : (isnan(_1168) ? 0.0 : max(_1168, 0.0));
        float _1172 = _1136 * 0.5;
        float _1173 = _1146 * 0.5;
        float _1174 = _1156 * 0.5;
        float _1175 = dot(vec3(_1172, _1173, _1174), vec3(_1172, _1173, _1174));
        float _1180 = (_1175 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1175);
        float _1189 = (dot(vec3(_796, _797, _798), vec3(_1180 * _1172, _1180 * _1173, _1180 * _1174)) + 1.0) * 0.5;
        float _3964 = isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0));
        float _1199 = sqrt(((_1173 * _1173) + (_1172 * _1172)) + (_1174 * _1174)) / (_1169 + 9.9999997473787516355514526367188e-06);
        float _3975 = isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0));
        float _1200 = isnan(1.0) ? _3975 : (isnan(_3975) ? 1.0 : min(_3975, 1.0));
        float _1201 = _1200 * 2.0;
        float _1205 = (1.0 - _1200) / (_1200 + 1.0);
        float _3986 = isnan(0.0) ? _1205 : (isnan(_1205) ? 0.0 : max(_1205, 0.0));
        float _1206 = isnan(1.0) ? _3986 : (isnan(_3986) ? 1.0 : min(_3986, 1.0));
        float _1215 = ((((1.0 - _1206) * (_1201 + 2.0)) * exp2(log2(isnan(1.0) ? _3964 : (isnan(_3964) ? 1.0 : min(_3964, 1.0))) * (_1201 + 1.0))) + _1206) * _1169;
        float _1216 = _1137 * 0.5;
        float _1217 = _1147 * 0.5;
        float _1218 = _1157 * 0.5;
        float _1219 = dot(vec3(_1216, _1217, _1218), vec3(_1216, _1217, _1218));
        float _1224 = (_1219 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1219);
        float _1232 = (dot(vec3(_796, _797, _798), vec3(_1224 * _1216, _1224 * _1217, _1224 * _1218)) + 1.0) * 0.5;
        float _3997 = isnan(0.0) ? _1232 : (isnan(_1232) ? 0.0 : max(_1232, 0.0));
        float _1241 = sqrt(((_1217 * _1217) + (_1216 * _1216)) + (_1218 * _1218)) / (_1170 + 9.9999997473787516355514526367188e-06);
        float _4008 = isnan(0.0) ? _1241 : (isnan(_1241) ? 0.0 : max(_1241, 0.0));
        float _1242 = isnan(1.0) ? _4008 : (isnan(_4008) ? 1.0 : min(_4008, 1.0));
        float _1243 = _1242 * 2.0;
        float _1247 = (1.0 - _1242) / (_1242 + 1.0);
        float _4019 = isnan(0.0) ? _1247 : (isnan(_1247) ? 0.0 : max(_1247, 0.0));
        float _1248 = isnan(1.0) ? _4019 : (isnan(_4019) ? 1.0 : min(_4019, 1.0));
        float _1257 = ((((1.0 - _1248) * (_1243 + 2.0)) * exp2(log2(isnan(1.0) ? _3997 : (isnan(_3997) ? 1.0 : min(_3997, 1.0))) * (_1243 + 1.0))) + _1248) * _1170;
        float _1258 = _1138 * 0.5;
        float _1259 = _1148 * 0.5;
        float _1260 = _1158 * 0.5;
        float _1261 = dot(vec3(_1258, _1259, _1260), vec3(_1258, _1259, _1260));
        float _1266 = (_1261 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1261);
        float _1274 = (dot(vec3(_796, _797, _798), vec3(_1266 * _1258, _1266 * _1259, _1266 * _1260)) + 1.0) * 0.5;
        float _4030 = isnan(0.0) ? _1274 : (isnan(_1274) ? 0.0 : max(_1274, 0.0));
        float _1283 = sqrt(((_1259 * _1259) + (_1258 * _1258)) + (_1260 * _1260)) / (_1171 + 9.9999997473787516355514526367188e-06);
        float _4041 = isnan(0.0) ? _1283 : (isnan(_1283) ? 0.0 : max(_1283, 0.0));
        float _1284 = isnan(1.0) ? _4041 : (isnan(_4041) ? 1.0 : min(_4041, 1.0));
        float _1285 = _1284 * 2.0;
        float _1289 = (1.0 - _1284) / (_1284 + 1.0);
        float _4052 = isnan(0.0) ? _1289 : (isnan(_1289) ? 0.0 : max(_1289, 0.0));
        float _1290 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
        float _1299 = ((((1.0 - _1290) * (_1285 + 2.0)) * exp2(log2(isnan(1.0) ? _4030 : (isnan(_4030) ? 1.0 : min(_4030, 1.0))) * (_1285 + 1.0))) + _1290) * _1171;
        _1307 = _1138;
        _1309 = _1137;
        _1310 = _1136;
        _1311 = _1148;
        _1312 = _1147;
        _1313 = _1146;
        _1314 = _1158;
        _1315 = _1157;
        _1316 = _1156;
        _1317 = _1171;
        _1318 = _1170;
        _1319 = _1169;
        _1320 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1215 : (isnan(_1215) ? 0.0 : max(_1215, 0.0)));
        _1321 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1257 : (isnan(_1257) ? 0.0 : max(_1257, 0.0)));
        _1322 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1299 : (isnan(_1299) ? 0.0 : max(_1299, 0.0)));
    }
    else
    {
        _1307 = _1308;
        _1309 = _1308;
        _1310 = _1308;
        _1311 = _1308;
        _1312 = _1308;
        _1313 = _1308;
        _1314 = _1308;
        _1315 = _1308;
        _1316 = _1308;
        _1317 = _1308;
        _1318 = _1308;
        _1319 = _1308;
        _1320 = 0.0;
        _1321 = 0.0;
        _1322 = 0.0;
    }
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    float _1633;
    float _1634;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1351 = fma(_978, cbModelParam._m0[30u].z, fma(_974, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _970));
        float _1355 = fma(_978, cbModelParam._m0[31u].z, fma(_974, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _970));
        float _1359 = fma(_978, cbModelParam._m0[32u].z, fma(_974, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _970));
        float _1382 = _970 + _796;
        float _1383 = _974 + _797;
        float _1384 = _978 + _798;
        float _1394 = fma(_1384, cbModelParam._m0[30u].z, fma(_1383, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1382)) - _1351;
        float _1395 = fma(_1384, cbModelParam._m0[31u].z, fma(_1383, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1382)) - _1355;
        float _1396 = fma(_1384, cbModelParam._m0[32u].z, fma(_1383, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1382)) - _1359;
        float _1400 = inversesqrt(dot(vec3(_1394, _1395, _1396), vec3(_1394, _1395, _1396)));
        float _1413 = ((_1400 * _1394) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1351 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1414 = ((_1400 * _1395) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1355 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1415 = ((_1400 * _1396) / cbModelParam._m0[35u].z) + ((((((_1359 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1417 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1413, _1414, _1415), 0.0);
        vec4 _1424 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1413, _1414, _1415), 0.0);
        vec4 _1431 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1413, _1414, _1415), 0.0);
        vec4 _1438 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1413, _1414, _1415), 0.0);
        float _1450 = exp2((_1417.w + (-0.5)) * 20.0) * 2.0;
        float _1451 = _1450 * (_1417.x + (-0.5));
        float _1452 = _1450 * (_1417.y + (-0.5));
        float _1453 = _1450 * (_1417.z + (-0.5));
        float _1460 = exp2((_1424.w + (-0.5)) * 20.0) * 2.0;
        float _1461 = _1460 * (_1424.x + (-0.5));
        float _1462 = _1460 * (_1424.y + (-0.5));
        float _1463 = _1460 * (_1424.z + (-0.5));
        float _1470 = exp2((_1431.w + (-0.5)) * 20.0) * 2.0;
        float _1471 = _1470 * (_1431.x + (-0.5));
        float _1472 = _1470 * (_1431.y + (-0.5));
        float _1473 = _1470 * (_1431.z + (-0.5));
        float _1480 = exp2((_1438.w + (-0.5)) * 20.0) * 2.0;
        float _1481 = _1480 * (_1438.x + (-0.5));
        float _1482 = _1480 * (_1438.y + (-0.5));
        float _1483 = _1480 * (_1438.z + (-0.5));
        float _1484 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1485 = isnan(0.0) ? _1482 : (isnan(_1482) ? 0.0 : max(_1482, 0.0));
        float _1486 = isnan(0.0) ? _1483 : (isnan(_1483) ? 0.0 : max(_1483, 0.0));
        float _1487 = _1451 * 0.5;
        float _1488 = _1461 * 0.5;
        float _1489 = _1471 * 0.5;
        float _1490 = dot(vec3(_1487, _1488, _1489), vec3(_1487, _1488, _1489));
        float _1495 = (_1490 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1490);
        float _1503 = (dot(vec3(_796, _797, _798), vec3(_1495 * _1487, _1495 * _1488, _1495 * _1489)) + 1.0) * 0.5;
        float _4093 = isnan(0.0) ? _1503 : (isnan(_1503) ? 0.0 : max(_1503, 0.0));
        float _1512 = sqrt(((_1488 * _1488) + (_1487 * _1487)) + (_1489 * _1489)) / (_1484 + 9.9999997473787516355514526367188e-06);
        float _4104 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
        float _1513 = isnan(1.0) ? _4104 : (isnan(_4104) ? 1.0 : min(_4104, 1.0));
        float _1514 = _1513 * 2.0;
        float _1518 = (1.0 - _1513) / (_1513 + 1.0);
        float _4115 = isnan(0.0) ? _1518 : (isnan(_1518) ? 0.0 : max(_1518, 0.0));
        float _1519 = isnan(1.0) ? _4115 : (isnan(_4115) ? 1.0 : min(_4115, 1.0));
        float _1528 = ((((1.0 - _1519) * (_1514 + 2.0)) * exp2(log2(isnan(1.0) ? _4093 : (isnan(_4093) ? 1.0 : min(_4093, 1.0))) * (_1514 + 1.0))) + _1519) * _1484;
        float _1529 = _1452 * 0.5;
        float _1530 = _1462 * 0.5;
        float _1531 = _1472 * 0.5;
        float _1532 = dot(vec3(_1529, _1530, _1531), vec3(_1529, _1530, _1531));
        float _1537 = (_1532 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1532);
        float _1545 = (dot(vec3(_796, _797, _798), vec3(_1537 * _1529, _1537 * _1530, _1537 * _1531)) + 1.0) * 0.5;
        float _4126 = isnan(0.0) ? _1545 : (isnan(_1545) ? 0.0 : max(_1545, 0.0));
        float _1554 = sqrt(((_1530 * _1530) + (_1529 * _1529)) + (_1531 * _1531)) / (_1485 + 9.9999997473787516355514526367188e-06);
        float _4137 = isnan(0.0) ? _1554 : (isnan(_1554) ? 0.0 : max(_1554, 0.0));
        float _1555 = isnan(1.0) ? _4137 : (isnan(_4137) ? 1.0 : min(_4137, 1.0));
        float _1556 = _1555 * 2.0;
        float _1560 = (1.0 - _1555) / (_1555 + 1.0);
        float _4148 = isnan(0.0) ? _1560 : (isnan(_1560) ? 0.0 : max(_1560, 0.0));
        float _1561 = isnan(1.0) ? _4148 : (isnan(_4148) ? 1.0 : min(_4148, 1.0));
        float _1570 = ((((1.0 - _1561) * (_1556 + 2.0)) * exp2(log2(isnan(1.0) ? _4126 : (isnan(_4126) ? 1.0 : min(_4126, 1.0))) * (_1556 + 1.0))) + _1561) * _1485;
        float _1571 = _1453 * 0.5;
        float _1572 = _1463 * 0.5;
        float _1573 = _1473 * 0.5;
        float _1574 = dot(vec3(_1571, _1572, _1573), vec3(_1571, _1572, _1573));
        float _1579 = (_1574 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1574);
        float _1587 = (dot(vec3(_796, _797, _798), vec3(_1579 * _1571, _1579 * _1572, _1579 * _1573)) + 1.0) * 0.5;
        float _4159 = isnan(0.0) ? _1587 : (isnan(_1587) ? 0.0 : max(_1587, 0.0));
        float _1596 = sqrt(((_1572 * _1572) + (_1571 * _1571)) + (_1573 * _1573)) / (_1486 + 9.9999997473787516355514526367188e-06);
        float _4170 = isnan(0.0) ? _1596 : (isnan(_1596) ? 0.0 : max(_1596, 0.0));
        float _1597 = isnan(1.0) ? _4170 : (isnan(_4170) ? 1.0 : min(_4170, 1.0));
        float _1598 = _1597 * 2.0;
        float _1602 = (1.0 - _1597) / (_1597 + 1.0);
        float _4181 = isnan(0.0) ? _1602 : (isnan(_1602) ? 0.0 : max(_1602, 0.0));
        float _1603 = isnan(1.0) ? _4181 : (isnan(_4181) ? 1.0 : min(_4181, 1.0));
        float _1612 = ((((1.0 - _1603) * (_1598 + 2.0)) * exp2(log2(isnan(1.0) ? _4159 : (isnan(_4159) ? 1.0 : min(_4159, 1.0))) * (_1598 + 1.0))) + _1603) * _1486;
        _1620 = _1453;
        _1621 = _1452;
        _1622 = _1451;
        _1623 = _1463;
        _1624 = _1462;
        _1625 = _1461;
        _1626 = _1473;
        _1627 = _1472;
        _1628 = _1471;
        _1629 = _1486;
        _1630 = _1485;
        _1631 = _1484;
        _1632 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1528 : (isnan(_1528) ? 0.0 : max(_1528, 0.0)));
        _1633 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1570 : (isnan(_1570) ? 0.0 : max(_1570, 0.0)));
        _1634 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1612 : (isnan(_1612) ? 0.0 : max(_1612, 0.0)));
    }
    else
    {
        _1620 = _1308;
        _1621 = _1308;
        _1622 = _1308;
        _1623 = _1308;
        _1624 = _1308;
        _1625 = _1308;
        _1626 = _1308;
        _1627 = _1308;
        _1628 = _1308;
        _1629 = _1308;
        _1630 = _1308;
        _1631 = _1308;
        _1632 = 0.0;
        _1633 = 0.0;
        _1634 = 0.0;
    }
    float _1644 = (cbModelParam._m0[1u].x * (_1632 - _1320)) + _1320;
    float _1645 = (cbModelParam._m0[1u].x * (_1633 - _1321)) + _1321;
    float _1646 = (cbModelParam._m0[1u].x * (_1634 - _1322)) + _1322;
    float _1667 = fma(_1646, cbSceneParam._m0[89u].z, fma(_1645, cbSceneParam._m0[89u].y, _1644 * cbSceneParam._m0[89u].x));
    float _1670 = fma(_1646, cbSceneParam._m0[90u].z, fma(_1645, cbSceneParam._m0[90u].y, _1644 * cbSceneParam._m0[90u].x));
    float _1673 = fma(_1646, cbSceneParam._m0[91u].z, fma(_1645, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1644));
    float _1688 = _917 * 0.5;
    float _1689 = _918 * 0.5;
    float _1690 = _919 * 0.5;
    float _1691 = dot(vec4(_1688, _1689, _1690, 1.0), vec4(_1622, _1625, _1628, _1631));
    float _1694 = dot(vec4(_1688, _1689, _1690, 1.0), vec4(_1621, _1624, _1627, _1630));
    float _1697 = dot(vec4(_1688, _1689, _1690, 1.0), vec4(_1620, _1623, _1626, _1629));
    float _1731;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1704 = dot(vec4(_1688, _1689, _1690, 1.0), vec4(_1307, _1311, _1314, _1317));
        float _1708 = dot(vec4(_1688, _1689, _1690, 1.0), vec4(_1309, _1312, _1315, _1318));
        float _1712 = dot(vec4(_1688, _1689, _1690, 1.0), vec4(_1310, _1313, _1316, _1319));
        float _1719 = dot(vec4(cbModelParam._m0[39u]), vec4(_1688, _1689, _1690, 1.0));
        _1731 = dot(vec3(isnan(0.0) ? _1712 : (isnan(_1712) ? 0.0 : max(_1712, 0.0)), isnan(0.0) ? _1708 : (isnan(_1708) ? 0.0 : max(_1708, 0.0)), isnan(0.0) ? _1704 : (isnan(_1704) ? 0.0 : max(_1704, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1719) ? 0.0 : (isnan(0.0) ? _1719 : max(0.0, _1719))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1731 = 1.0;
    }
    float _1742;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1733 = dot(vec4(cbModelParam._m0[40u]), vec4(_1688, _1689, _1690, 1.0));
        _1742 = dot(vec3(isnan(0.0) ? _1691 : (isnan(_1691) ? 0.0 : max(_1691, 0.0)), isnan(0.0) ? _1694 : (isnan(_1694) ? 0.0 : max(_1694, 0.0)), isnan(0.0) ? _1697 : (isnan(_1697) ? 0.0 : max(_1697, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1733) ? 0.0 : (isnan(0.0) ? _1733 : max(0.0, _1733))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1742 = 1.0;
    }
    float _1746 = (_1742 * cbModelParam._m0[1u].x) + (_1731 * (1.0 - cbModelParam._m0[1u].x));
    float _1756 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _799);
    float _1757 = isnan(_1756) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1756 : min(cbModelParam._m0[25u].z, _1756));
    float _1838;
    float _1840;
    float _1842;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1805 = fma(_978, cbModelParam._m0[13u].z, fma(_974, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _970)) + cbModelParam._m0[13u].w;
        float _1809 = fma(_978, cbModelParam._m0[14u].z, fma(_974, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _970)) + cbModelParam._m0[14u].w;
        float _1813 = fma(_978, cbModelParam._m0[15u].z, fma(_974, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _970)) + cbModelParam._m0[15u].w;
        float _1816 = fma(_919, cbModelParam._m0[13u].z, fma(_918, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _917));
        float _1819 = fma(_919, cbModelParam._m0[14u].z, fma(_918, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _917));
        float _1822 = fma(_919, cbModelParam._m0[15u].z, fma(_918, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _917));
        float _1850;
        if (_1816 > 0.0)
        {
            _1850 = abs((1.0 - _1805) / _1816);
        }
        else
        {
            float frontier_phi_57_55_ladder;
            if (_1816 < 0.0)
            {
                frontier_phi_57_55_ladder = abs((_1805 + 1.0) / _1816);
            }
            else
            {
                frontier_phi_57_55_ladder = 5000.0;
            }
            _1850 = frontier_phi_57_55_ladder;
        }
        float _2018;
        if (_1819 > 0.0)
        {
            _2018 = abs((1.0 - _1809) / _1819);
        }
        else
        {
            float frontier_phi_66_62_ladder;
            if (_1819 < 0.0)
            {
                frontier_phi_66_62_ladder = abs((_1809 + 1.0) / _1819);
            }
            else
            {
                frontier_phi_66_62_ladder = 5000.0;
            }
            _2018 = frontier_phi_66_62_ladder;
        }
        float _2462;
        if (_1822 > 0.0)
        {
            _2462 = abs((1.0 - _1813) / _1822);
        }
        else
        {
            float frontier_phi_78_73_ladder;
            if (_1822 < 0.0)
            {
                frontier_phi_78_73_ladder = abs((_1813 + 1.0) / _1822);
            }
            else
            {
                frontier_phi_78_73_ladder = 5000.0;
            }
            _2462 = frontier_phi_78_73_ladder;
        }
        float _2464 = isnan(_2018) ? _1850 : (isnan(_1850) ? _2018 : min(_1850, _2018));
        float _2465 = isnan(_2462) ? _2464 : (isnan(_2464) ? _2462 : min(_2464, _2462));
        float _2469 = (_2465 * _1816) + _1805;
        float _2470 = (_2465 * _1819) + _1809;
        float _2471 = (_2465 * _1822) + _1813;
        float _2472 = _2465 * 9.9999997473787516355514526367188e-05;
        float _2474 = (-1.0) - _2472;
        float _2476 = _2472 + 1.0;
        float frontier_phi_56_78_ladder;
        float frontier_phi_56_78_ladder_1;
        float frontier_phi_56_78_ladder_2;
        if ((_2471 > _2476) || ((_2471 < _2474) || ((_2470 > _2476) || ((_2470 < _2474) || ((_2469 < _2474) || (_2469 > _2476))))))
        {
            frontier_phi_56_78_ladder = 0.0;
            frontier_phi_56_78_ladder_1 = 0.0;
            frontier_phi_56_78_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2721 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2471, cbModelParam._m0[9u].z, fma(_2470, cbModelParam._m0[9u].y, _2469 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2471, cbModelParam._m0[10u].z, fma(_2470, cbModelParam._m0[10u].y, _2469 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2471, cbModelParam._m0[11u].z, fma(_2470, cbModelParam._m0[11u].y, _2469 * cbModelParam._m0[11u].x))), _1757);
            frontier_phi_56_78_ladder = _2721.z * cbModelParam._m0[1u].y;
            frontier_phi_56_78_ladder_1 = _2721.y * cbModelParam._m0[1u].y;
            frontier_phi_56_78_ladder_2 = _2721.x * cbModelParam._m0[1u].y;
        }
        _1838 = frontier_phi_56_78_ladder_2;
        _1840 = frontier_phi_56_78_ladder_1;
        _1842 = frontier_phi_56_78_ladder;
    }
    else
    {
        vec4 _1826 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_917, _918, _919), _1757);
        _1838 = _1826.x * cbModelParam._m0[1u].y;
        _1840 = _1826.y * cbModelParam._m0[1u].y;
        _1842 = _1826.z * cbModelParam._m0[1u].y;
    }
    float _1846 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _799);
    float _1847 = isnan(_1846) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1846 : min(cbModelParam._m0[25u].w, _1846));
    float _1935;
    float _1937;
    float _1939;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1899 = fma(_978, cbModelParam._m0[21u].z, fma(_974, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _970)) + cbModelParam._m0[21u].w;
        float _1903 = fma(_978, cbModelParam._m0[22u].z, fma(_974, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _970)) + cbModelParam._m0[22u].w;
        float _1907 = fma(_978, cbModelParam._m0[23u].z, fma(_974, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _970)) + cbModelParam._m0[23u].w;
        float _1910 = fma(_919, cbModelParam._m0[21u].z, fma(_918, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _917));
        float _1913 = fma(_919, cbModelParam._m0[22u].z, fma(_918, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _917));
        float _1916 = fma(_919, cbModelParam._m0[23u].z, fma(_918, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _917));
        float _2023;
        if (_1910 > 0.0)
        {
            _2023 = abs((1.0 - _1899) / _1910);
        }
        else
        {
            float frontier_phi_68_64_ladder;
            if (_1910 < 0.0)
            {
                frontier_phi_68_64_ladder = abs((_1899 + 1.0) / _1910);
            }
            else
            {
                frontier_phi_68_64_ladder = 5000.0;
            }
            _2023 = frontier_phi_68_64_ladder;
        }
        float _2489;
        if (_1913 > 0.0)
        {
            _2489 = abs((1.0 - _1903) / _1913);
        }
        else
        {
            float frontier_phi_80_75_ladder;
            if (_1913 < 0.0)
            {
                frontier_phi_80_75_ladder = abs((_1903 + 1.0) / _1913);
            }
            else
            {
                frontier_phi_80_75_ladder = 5000.0;
            }
            _2489 = frontier_phi_80_75_ladder;
        }
        float _2850;
        if (_1916 > 0.0)
        {
            _2850 = abs((1.0 - _1907) / _1916);
        }
        else
        {
            float frontier_phi_92_87_ladder;
            if (_1916 < 0.0)
            {
                frontier_phi_92_87_ladder = abs((_1907 + 1.0) / _1916);
            }
            else
            {
                frontier_phi_92_87_ladder = 5000.0;
            }
            _2850 = frontier_phi_92_87_ladder;
        }
        float _2852 = isnan(_2489) ? _2023 : (isnan(_2023) ? _2489 : min(_2023, _2489));
        float _2853 = isnan(_2850) ? _2852 : (isnan(_2852) ? _2850 : min(_2852, _2850));
        float _2857 = (_2853 * _1910) + _1899;
        float _2858 = (_2853 * _1913) + _1903;
        float _2859 = (_2853 * _1916) + _1907;
        float _2860 = _2853 * 9.9999997473787516355514526367188e-05;
        float _2861 = (-1.0) - _2860;
        float _2863 = _2860 + 1.0;
        float frontier_phi_65_92_ladder;
        float frontier_phi_65_92_ladder_1;
        float frontier_phi_65_92_ladder_2;
        if ((_2859 > _2863) || ((_2859 < _2861) || ((_2858 > _2863) || ((_2858 < _2861) || ((_2857 < _2861) || (_2857 > _2863))))))
        {
            frontier_phi_65_92_ladder = 0.0;
            frontier_phi_65_92_ladder_1 = 0.0;
            frontier_phi_65_92_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2996 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2859, cbModelParam._m0[17u].z, fma(_2858, cbModelParam._m0[17u].y, _2857 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2859, cbModelParam._m0[18u].z, fma(_2858, cbModelParam._m0[18u].y, _2857 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2859, cbModelParam._m0[19u].z, fma(_2858, cbModelParam._m0[19u].y, _2857 * cbModelParam._m0[19u].x))), _1847);
            frontier_phi_65_92_ladder = _2996.z * cbModelParam._m0[1u].z;
            frontier_phi_65_92_ladder_1 = _2996.y * cbModelParam._m0[1u].z;
            frontier_phi_65_92_ladder_2 = _2996.x * cbModelParam._m0[1u].z;
        }
        _1935 = frontier_phi_65_92_ladder_2;
        _1937 = frontier_phi_65_92_ladder_1;
        _1939 = frontier_phi_65_92_ladder;
    }
    else
    {
        vec4 _1919 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_917, _918, _919), _1847);
        _1935 = _1919.x * cbModelParam._m0[1u].z;
        _1937 = _1919.y * cbModelParam._m0[1u].z;
        _1939 = _1919.z * cbModelParam._m0[1u].z;
    }
    float _1951 = ((((1.0 - _938) * ((_925 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_938 * _925)) * _909;
    float _1952 = _1951 * ((cbModelParam._m0[1u].w * (_1935 - _1838)) + _1838);
    float _1953 = _1951 * ((cbModelParam._m0[1u].w * (_1937 - _1840)) + _1840);
    float _1954 = _1951 * ((cbModelParam._m0[1u].w * (_1939 - _1842)) + _1842);
    float _1957 = fma(_1954, cbSceneParam._m0[89u].z, fma(_1953, cbSceneParam._m0[89u].y, _1952 * cbSceneParam._m0[89u].x));
    float _1960 = fma(_1954, cbSceneParam._m0[90u].z, fma(_1953, cbSceneParam._m0[90u].y, _1952 * cbSceneParam._m0[90u].x));
    float _1963 = fma(_1954, cbSceneParam._m0[91u].z, fma(_1953, cbSceneParam._m0[91u].y, _1952 * cbSceneParam._m0[91u].x));
    float _1997 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _2001 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _2005 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _2009 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _2010 = _1997 / _2009;
    float _2011 = _2001 / _2009;
    float _2012 = _2005 / _2009;
    float _2159;
    float _2160;
    float _2161;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _2039 = ((uint(_2012 > cbSceneParam._m0[59u].y) + uint(_2012 > cbSceneParam._m0[59u].x)) + uint(_2012 > cbSceneParam._m0[59u].z)) << 2u;
        uint _2040 = _2039 + 43u;
        uint _2048 = _2039 + 44u;
        uint _2056 = _2039 + 45u;
        uint _2064 = _2039 + 46u;
        float _2075 = fma(_2009, cbSceneParam._m0[_2040].w, fma(_2005, cbSceneParam._m0[_2040].z, fma(_2001, cbSceneParam._m0[_2040].y, _1997 * cbSceneParam._m0[_2040].x)));
        float _2079 = fma(_2009, cbSceneParam._m0[_2048].w, fma(_2005, cbSceneParam._m0[_2048].z, fma(_2001, cbSceneParam._m0[_2048].y, _1997 * cbSceneParam._m0[_2048].x)));
        float _2087 = fma(_2009, cbSceneParam._m0[_2064].w, fma(_2005, cbSceneParam._m0[_2064].z, fma(_2001, cbSceneParam._m0[_2064].y, _1997 * cbSceneParam._m0[_2064].x)));
        float _2092 = cbSceneParam._m0[33u].z * _2087;
        float _2094 = cbSceneParam._m0[33u].w * _2087;
        float _2097 = fma(_2009, cbSceneParam._m0[_2056].w, fma(_2005, cbSceneParam._m0[_2056].z, fma(_2001, cbSceneParam._m0[_2056].y, _1997 * cbSceneParam._m0[_2056].x))) / _2087;
        float _2145 = (cbSceneParam._m0[33u].x - sqrt(((_2011 * _2011) + (_2010 * _2010)) + (_2012 * _2012))) * cbSceneParam._m0[33u].y;
        float _4307 = isnan(0.0) ? _2145 : (isnan(_2145) ? 0.0 : max(_2145, 0.0));
        float _2152 = (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2092 + _2075) / _2087, (_2094 + _2079) / _2087), _2097), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2094 + _2075) / _2087, (_2079 - _2092) / _2087), _2097), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2075 - _2092) / _2087, (_2079 - _2094) / _2087), _2097), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_2075 - _2094) / _2087, (_2092 + _2079) / _2087), _2097), 0.0)).x), vec4(0.25)));
        _2159 = 1.0 - (_2152 * cbSceneParam._m0[34u].x);
        _2160 = 1.0 - (_2152 * cbSceneParam._m0[34u].y);
        _2161 = 1.0 - (_2152 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _2159 = 1.0;
        _2160 = 1.0;
        _2161 = 1.0;
    }
    float _2225;
    float _2227;
    float _2229;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2213 = fma(_2009, cbSceneParam._m0[63u].w, fma(_2005, cbSceneParam._m0[63u].z, fma(_2001, cbSceneParam._m0[63u].y, _1997 * cbSceneParam._m0[63u].x)));
        float _2214 = fma(_2009, cbSceneParam._m0[60u].w, fma(_2005, cbSceneParam._m0[60u].z, fma(_2001, cbSceneParam._m0[60u].y, _1997 * cbSceneParam._m0[60u].x))) / _2213;
        float _2215 = fma(_2009, cbSceneParam._m0[61u].w, fma(_2005, cbSceneParam._m0[61u].z, fma(_2001, cbSceneParam._m0[61u].y, _1997 * cbSceneParam._m0[61u].x))) / _2213;
        float frontier_phi_77_76_ladder;
        float frontier_phi_77_76_ladder_1;
        float frontier_phi_77_76_ladder_2;
        if ((((_2214 >= cbSceneParam._m0[64u].x) && (_2215 >= cbSceneParam._m0[64u].y)) && (_2214 <= cbSceneParam._m0[64u].z)) && (_2215 <= cbSceneParam._m0[64u].w))
        {
            float _2502 = fma(_2009, cbSceneParam._m0[62u].w, fma(_2005, cbSceneParam._m0[62u].z, fma(_2001, cbSceneParam._m0[62u].y, _1997 * cbSceneParam._m0[62u].x))) / _2213;
            float _2506 = isnan(cbSceneParam._m0[41u].w) ? _2502 : (isnan(_2502) ? cbSceneParam._m0[41u].w : max(_2502, cbSceneParam._m0[41u].w));
            float _2549 = (cbSceneParam._m0[33u].x - sqrt(((_2011 * _2011) + (_2010 * _2010)) + (_2012 * _2012))) * cbSceneParam._m0[33u].y;
            float _4323 = isnan(0.0) ? _2549 : (isnan(_2549) ? 0.0 : max(_2549, 0.0));
            float _2556 = (isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2214, cbSceneParam._m0[33u].w + _2215), _2506), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2214, _2215 - cbSceneParam._m0[33u].z), _2506), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2214 - cbSceneParam._m0[33u].z, _2215 - cbSceneParam._m0[33u].w), _2506), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2214 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2215), _2506), 0.0)).x), vec4(0.25)));
            float _2560 = 1.0 - (_2556 * cbSceneParam._m0[34u].x);
            float _2561 = 1.0 - (_2556 * cbSceneParam._m0[34u].y);
            float _2562 = 1.0 - (_2556 * cbSceneParam._m0[34u].z);
            frontier_phi_77_76_ladder = isnan(_2562) ? _2161 : (isnan(_2161) ? _2562 : min(_2161, _2562));
            frontier_phi_77_76_ladder_1 = isnan(_2561) ? _2160 : (isnan(_2160) ? _2561 : min(_2160, _2561));
            frontier_phi_77_76_ladder_2 = isnan(_2560) ? _2159 : (isnan(_2159) ? _2560 : min(_2159, _2560));
        }
        else
        {
            frontier_phi_77_76_ladder = _2161;
            frontier_phi_77_76_ladder_1 = _2160;
            frontier_phi_77_76_ladder_2 = _2159;
        }
        _2225 = frontier_phi_77_76_ladder_2;
        _2227 = frontier_phi_77_76_ladder_1;
        _2229 = frontier_phi_77_76_ladder;
    }
    else
    {
        _2225 = _2159;
        _2227 = _2160;
        _2229 = _2161;
    }
    uvec4 _2234 = floatBitsToUint(cbInstanceData._m0[_883 + 5u]);
    uint _2236 = _2234.x * 14u;
    uint _2237 = _2236 + 13u;
    float _2242 = _909 + (-1.0);
    float _2245 = (cbLight._m0[_2237].x * _2242) + 1.0;
    float _2246 = (cbLight._m0[_2237].y * _2242) + 1.0;
    uint _2247 = _2236 + 5u;
    float _2253 = isnan(1.0) ? _2246 : (isnan(_2246) ? 1.0 : min(_2246, 1.0));
    uint _2257 = _2236 + 4u;
    float _2266 = isnan(1.0) ? _2245 : (isnan(_2245) ? 1.0 : min(_2245, 1.0));
    uint _2270 = _2236 | 1u;
    float _2281 = dot(vec3(cbLight._m0[_2236].xyz), vec3(_796, _797, _798));
    float _2284 = dot(vec3(cbLight._m0[_2270].xyz), vec3(_796, _797, _798));
    float _4359 = isnan(0.0) ? _2281 : (isnan(_2281) ? 0.0 : max(_2281, 0.0));
    float _4370 = isnan(0.0) ? _2284 : (isnan(_2284) ? 0.0 : max(_2284, 0.0));
    float _2289 = (isnan(1.0) ? _4359 : (isnan(_4359) ? 1.0 : min(_4359, 1.0))) * 0.3183098733425140380859375;
    float _2291 = (isnan(1.0) ? _4370 : (isnan(_4370) ? 1.0 : min(_4370, 1.0))) * 0.3183098733425140380859375;
    float _2298 = ((cbLight._m0[_2247].x * _2253) * _2291) + (((cbLight._m0[_2257].x * _2225) * _2266) * _2289);
    float _2299 = ((_2253 * cbLight._m0[_2247].y) * _2291) + (((cbLight._m0[_2257].y * _2227) * _2266) * _2289);
    float _2300 = ((_2253 * cbLight._m0[_2247].z) * _2291) + (((cbLight._m0[_2257].z * _2229) * _2266) * _2289);
    uint _2302 = _2236 + 8u;
    float _2315 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2236].w)) * _799) * 0.949999988079071044921875);
    float _2316 = _2315 * _2315;
    float _2317 = cbLight._m0[_2236].x + _823;
    float _2318 = cbLight._m0[_2236].y + _824;
    float _2319 = cbLight._m0[_2236].z + _825;
    float _2323 = inversesqrt(dot(vec3(_2317, _2318, _2319), vec3(_2317, _2318, _2319)));
    float _2324 = _2323 * _2317;
    float _2325 = _2323 * _2318;
    float _2326 = _2323 * _2319;
    float _2327 = dot(vec3(_796, _797, _798), vec3(cbLight._m0[_2236].xyz));
    float _4381 = isnan(0.0) ? _2327 : (isnan(_2327) ? 0.0 : max(_2327, 0.0));
    float _2330 = isnan(1.0) ? _4381 : (isnan(_4381) ? 1.0 : min(_4381, 1.0));
    float _4392 = isnan(0.0) ? _910 : (isnan(_910) ? 0.0 : max(_910, 0.0));
    float _2331 = isnan(1.0) ? _4392 : (isnan(_4392) ? 1.0 : min(_4392, 1.0));
    float _2332 = dot(vec3(_796, _797, _798), vec3(_2324, _2325, _2326));
    float _4403 = isnan(0.0) ? _2332 : (isnan(_2332) ? 0.0 : max(_2332, 0.0));
    float _2335 = isnan(1.0) ? _4403 : (isnan(_4403) ? 1.0 : min(_4403, 1.0));
    float _2336 = dot(vec3(cbLight._m0[_2236].xyz), vec3(_2324, _2325, _2326));
    float _4414 = isnan(0.0) ? _2336 : (isnan(_2336) ? 0.0 : max(_2336, 0.0));
    float _2340 = _2316 * _2316;
    float _2344 = ((_2335 * _2335) * (_2340 + (-1.0))) + 1.0;
    float _2355 = (exp2(log2(1.0 - (isnan(1.0) ? _4414 : (isnan(_4414) ? 1.0 : min(_4414, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2356 = 1.0 - _2316;
    float _2367 = (0.5 / (((_2331 * ((_2330 * _2356) + _2316)) + 9.9999999392252902907785028219223e-09) + (((_2331 * _2356) + _2316) * _2330))) * _2330;
    float _4425 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
    float _2369 = (isnan(1.0) ? _4425 : (isnan(_4425) ? 1.0 : min(_4425, 1.0))) * (_2340 / ((_2344 * _2344) * 3.141590118408203125));
    uint _2383 = _2236 + 9u;
    float _2394 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2270].w)) * _799) * 0.949999988079071044921875);
    float _2395 = _2394 * _2394;
    float _2396 = cbLight._m0[_2270].x + _823;
    float _2397 = cbLight._m0[_2270].y + _824;
    float _2398 = cbLight._m0[_2270].z + _825;
    float _2402 = inversesqrt(dot(vec3(_2396, _2397, _2398), vec3(_2396, _2397, _2398)));
    float _2403 = _2402 * _2396;
    float _2404 = _2402 * _2397;
    float _2405 = _2402 * _2398;
    float _2406 = dot(vec3(_796, _797, _798), vec3(cbLight._m0[_2270].xyz));
    float _4436 = isnan(0.0) ? _2406 : (isnan(_2406) ? 0.0 : max(_2406, 0.0));
    float _2409 = isnan(1.0) ? _4436 : (isnan(_4436) ? 1.0 : min(_4436, 1.0));
    float _2410 = dot(vec3(_796, _797, _798), vec3(_2403, _2404, _2405));
    float _4447 = isnan(0.0) ? _2410 : (isnan(_2410) ? 0.0 : max(_2410, 0.0));
    float _2413 = isnan(1.0) ? _4447 : (isnan(_4447) ? 1.0 : min(_4447, 1.0));
    float _2414 = dot(vec3(cbLight._m0[_2270].xyz), vec3(_2403, _2404, _2405));
    float _4458 = isnan(0.0) ? _2414 : (isnan(_2414) ? 0.0 : max(_2414, 0.0));
    float _2418 = _2395 * _2395;
    float _2422 = ((_2413 * _2413) * (_2418 + (-1.0))) + 1.0;
    float _2431 = (exp2(log2(1.0 - (isnan(1.0) ? _4458 : (isnan(_4458) ? 1.0 : min(_4458, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2432 = 1.0 - _2395;
    float _2442 = (0.5 / (((_2331 * ((_2409 * _2432) + _2395)) + 9.9999999392252902907785028219223e-09) + (((_2331 * _2432) + _2395) * _2409))) * _2409;
    float _4469 = isnan(0.0) ? _2442 : (isnan(_2442) ? 0.0 : max(_2442, 0.0));
    float _2444 = (isnan(1.0) ? _4469 : (isnan(_4469) ? 1.0 : min(_4469, 1.0))) * (_2418 / ((_2422 * _2422) * 3.141590118408203125));
    float _2454 = (((_2431 * cbLight._m0[_2383].x) * _2444) * _2253) + ((((cbLight._m0[_2302].x * _2225) * _2355) * _2369) * _2266);
    float _2455 = (((_2431 * cbLight._m0[_2383].y) * _2444) * _2253) + ((((cbLight._m0[_2302].y * _2227) * _2355) * _2369) * _2266);
    float _2456 = (((_2431 * cbLight._m0[_2383].z) * _2444) * _2253) + ((((cbLight._m0[_2302].z * _2229) * _2355) * _2369) * _2266);
    float _2619;
    float _2621;
    float _2623;
    float _2625;
    float _2627;
    float _2629;
    if (_2234.y == 0u)
    {
        uvec4 _2574 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2575 = _2574.x;
        uint _2586 = uint((float(_2574.y) * floor(float(uint(cbSceneParam._m0[85u].y * _845) / _2575))) + floor(float(uint(cbSceneParam._m0[85u].x * _844) / _2575)));
        float _2596 = (log2(_2012 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2597 = isnan(0.0) ? _2596 : (isnan(_2596) ? 0.0 : max(_2596, 0.0));
        uint _2600 = uint(isnan(14.0) ? _2597 : (isnan(_2597) ? 14.0 : min(_2597, 14.0)));
        uvec4 _2605 = texelFetch(g_lightClusterGridBuffer, int(((_2600 << 2u) + (_2586 << 6u)) >> 2u));
        uint _2606 = _2605.x;
        uint _2607 = _2574.z;
        float _2730;
        float _2732;
        float _2734;
        float _2736;
        float _2738;
        float _2740;
        if (((((1u << ((_2607 >> 4u) & 15u)) + 4294967295u) & _2606) == 0u) || ((_2607 & 240u) == 0u))
        {
            _2730 = 0.0;
            _2732 = 0.0;
            _2734 = 0.0;
            _2736 = 0.0;
            _2738 = 0.0;
            _2740 = 0.0;
        }
        else
        {
            float _2731;
            float _2733;
            float _2735;
            float _2737;
            float _2739;
            float _2741;
            float _2908 = 0.0;
            float _2909 = 0.0;
            float _2910 = 0.0;
            float _2911 = 0.0;
            float _2912 = 0.0;
            float _2913 = 0.0;
            uint _2914 = 0u;
            uint _2923;
            bool _2924;
            for (;;)
            {
                _2923 = texelFetch(g_lightClassification, int((((_2600 << 5u) + (_2586 << 9u)) + (_2914 << 2u)) >> 2u)).x;
                _2924 = _2923 == 0u;
                float frontier_phi_103_pred;
                float frontier_phi_103_pred_1;
                float frontier_phi_103_pred_2;
                float frontier_phi_103_pred_3;
                float frontier_phi_103_pred_4;
                float frontier_phi_103_pred_5;
                if (_2924)
                {
                    frontier_phi_103_pred = _2909;
                    frontier_phi_103_pred_1 = _2913;
                    frontier_phi_103_pred_2 = _2912;
                    frontier_phi_103_pred_3 = _2911;
                    frontier_phi_103_pred_4 = _2910;
                    frontier_phi_103_pred_5 = _2908;
                }
                else
                {
                    float _3074;
                    float _3075;
                    float _3076;
                    float _3077;
                    float _3078;
                    float _3079;
                    uint _3080;
                    _3074 = _2908;
                    _3075 = _2909;
                    _3076 = _2910;
                    _3077 = _2911;
                    _3078 = _2912;
                    _3079 = _2913;
                    _3080 = _2923;
                    float _3001;
                    float _3002;
                    float _3003;
                    float _3004;
                    float _3005;
                    float _3006;
                    for (;;)
                    {
                        uint _3084 = uint(findLSB(_3080)) + (_2914 << 5u);
                        uint _3081 = (_3080 + 4294967295u) & _3080;
                        uint _3086 = _3084 * 48u;
                        vec4 _3100 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3086)).x, texelFetch(g_PointLightRenderingBuffer, int(_3086 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3086 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3086 + 3u)).x));
                        uint _3106 = (_3084 * 48u) + 4u;
                        vec4 _3119 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3106)).x, texelFetch(g_PointLightRenderingBuffer, int(_3106 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3106 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3106 + 3u)).x));
                        uint _3125 = (_3084 * 48u) + 8u;
                        vec3 _3136 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3125)).x, texelFetch(g_PointLightRenderingBuffer, int(_3125 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3125 + 2u)).x));
                        float _3140 = _3100.x - _2010;
                        float _3141 = _3100.y - _2011;
                        float _3142 = _3100.z - _2012;
                        float _3143 = dot(vec3(_3140, _3141, _3142), vec3(_3140, _3141, _3142));
                        float _3146 = inversesqrt(_3143);
                        float _3147 = _3146 * _3140;
                        float _3148 = _3146 * _3141;
                        float _3149 = _3146 * _3142;
                        float _3150 = dot(vec3(_864, _867, _870), vec3(_3147, _3148, _3149));
                        float _3155 = 1.0 - (_3143 * _3100.w);
                        float _4490 = isnan(0.0) ? _3155 : (isnan(_3155) ? 0.0 : max(_3155, 0.0));
                        float _3156 = isnan(1.0) ? _4490 : (isnan(_4490) ? 1.0 : min(_4490, 1.0));
                        float _3157 = sqrt(_3143) * _3119.w;
                        float _3160 = 1.39999997615814208984375 / (_3157 + 1.39999997615814208984375);
                        float _3161 = _3160 * _3160;
                        float _3164 = ((1.0 - _3161) * _3150) + _3161;
                        float _3167 = _3157 * _3157;
                        float _3171 = ((isnan(0.0) ? _3164 : (isnan(_3164) ? 0.0 : max(_3164, 0.0))) * _3156) / ((_3167 * 0.699999988079071044921875) + 1.0);
                        float _3175 = (-0.0) - _2010;
                        float _3176 = (-0.0) - _2011;
                        float _3177 = (-0.0) - _2012;
                        float _3181 = inversesqrt(dot(vec3(_3175, _3176, _3177), vec3(_3175, _3176, _3177)));
                        float _3182 = _3181 * _3175;
                        float _3183 = _3181 * _3176;
                        float _3184 = _3181 * _3177;
                        float _3191 = exp2(log2(1.0 / ((_3167 * 3.5) + 5.0)) * 0.25);
                        float _3192 = 1.0 - _925;
                        float _3199 = sqrt(1.0 - ((1.0 - (_3192 * _3192)) * (1.0 - (_3191 * _3191))));
                        float _3200 = _3199 * _3199;
                        float _3201 = _3200 * _3200;
                        float _3202 = _3182 + _3147;
                        float _3203 = _3183 + _3148;
                        float _3204 = _3184 + _3149;
                        float _3208 = inversesqrt(dot(vec3(_3202, _3203, _3204), vec3(_3202, _3203, _3204)));
                        float _3212 = dot(vec3(_864, _867, _870), vec3(_3182, _3183, _3184));
                        float _4506 = isnan(0.0) ? _3212 : (isnan(_3212) ? 0.0 : max(_3212, 0.0));
                        float _3215 = isnan(1.0) ? _4506 : (isnan(_4506) ? 1.0 : min(_4506, 1.0));
                        float _3216 = dot(vec3(_864, _867, _870), vec3(_3208 * _3202, _3208 * _3203, _3208 * _3204));
                        float _4517 = isnan(0.0) ? _3216 : (isnan(_3216) ? 0.0 : max(_3216, 0.0));
                        float _3219 = isnan(1.0) ? _4517 : (isnan(_4517) ? 1.0 : min(_4517, 1.0));
                        float _3223 = ((_3219 * _3219) * (_3201 + (-1.0))) + 1.0;
                        float _3224 = _3160 * _3200;
                        float _3225 = _3224 * _3224;
                        float _3228 = ((1.0 - _3225) * _3150) + _3225;
                        float _4528 = isnan(0.0) ? _3228 : (isnan(_3228) ? 0.0 : max(_3228, 0.0));
                        float _3229 = isnan(1.0) ? _4528 : (isnan(_4528) ? 1.0 : min(_4528, 1.0));
                        float _3230 = 1.0 - _3200;
                        float _3240 = (0.5 / (((_3229 * ((_3215 * _3230) + _3200)) + 9.9999999392252902907785028219223e-09) + (((_3229 * _3230) + _3200) * _3215))) * _3229;
                        float _4539 = isnan(0.0) ? _3240 : (isnan(_3240) ? 0.0 : max(_3240, 0.0));
                        float _3251 = (((_3201 * 3.1415927410125732421875) * (isnan(1.0) ? _4539 : (isnan(_4539) ? 1.0 : min(_4539, 1.0)))) / ((_3223 * _3223) * ((_3167 * 2.1991131305694580078125) + 3.141590118408203125))) * _3156;
                        _3004 = (_3171 * _3119.x) + _3077;
                        _3005 = (_3171 * _3119.y) + _3078;
                        _3006 = (_3171 * _3119.z) + _3079;
                        _3001 = (_3251 * _3136.x) + _3074;
                        _3002 = (_3251 * _3136.y) + _3075;
                        _3003 = (_3251 * _3136.z) + _3076;
                        if (_3081 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3074 = _3001;
                            _3075 = _3002;
                            _3076 = _3003;
                            _3077 = _3004;
                            _3078 = _3005;
                            _3079 = _3006;
                            _3080 = _3081;
                        }
                    }
                    frontier_phi_103_pred = _3002;
                    frontier_phi_103_pred_1 = _3006;
                    frontier_phi_103_pred_2 = _3005;
                    frontier_phi_103_pred_3 = _3004;
                    frontier_phi_103_pred_4 = _3003;
                    frontier_phi_103_pred_5 = _3001;
                }
                _2733 = frontier_phi_103_pred;
                _2741 = frontier_phi_103_pred_1;
                _2739 = frontier_phi_103_pred_2;
                _2737 = frontier_phi_103_pred_3;
                _2735 = frontier_phi_103_pred_4;
                _2731 = frontier_phi_103_pred_5;
                uint _2915 = _2914 + 1u;
                if (_2915 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2908 = _2731;
                    _2909 = _2733;
                    _2910 = _2735;
                    _2911 = _2737;
                    _2912 = _2739;
                    _2913 = _2741;
                    _2914 = _2915;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2730 = _2731;
            _2732 = _2733;
            _2734 = _2735;
            _2736 = _2737;
            _2738 = _2739;
            _2740 = _2741;
        }
        uvec4 _2744 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2745 = _2744.z;
        uint _2747 = (_2745 >> 8u) & 15u;
        float _2876;
        float _2878;
        float _2880;
        float _2882;
        float _2884;
        float _2886;
        if (((4294967295u << _2747) & _2606) == 0u)
        {
            _2876 = _2730;
            _2878 = _2732;
            _2880 = _2734;
            _2882 = _2736;
            _2884 = _2738;
            _2886 = _2740;
        }
        else
        {
            float _2901 = inversesqrt(dot(vec3(_2010, _2011, _2012), vec3(_2010, _2011, _2012)));
            float _2902 = _2901 * _2010;
            float _2903 = _2901 * _2011;
            float _2904 = _2901 * _2012;
            float frontier_phi_94_95_ladder;
            float frontier_phi_94_95_ladder_1;
            float frontier_phi_94_95_ladder_2;
            float frontier_phi_94_95_ladder_3;
            float frontier_phi_94_95_ladder_4;
            float frontier_phi_94_95_ladder_5;
            if (_2747 < ((_2745 >> 12u) & 15u))
            {
                float _2877;
                float _2879;
                float _2881;
                float _2883;
                float _2885;
                float _2887;
                float _3057 = _2730;
                float _3058 = _2732;
                float _3059 = _2734;
                float _3060 = _2736;
                float _3061 = _2738;
                float _3062 = _2740;
                uint _3063 = _2747;
                uint _3072;
                bool _3073;
                for (;;)
                {
                    _3072 = texelFetch(g_lightClassification, int((((_2600 << 5u) + (_2586 << 9u)) + (_3063 << 2u)) >> 2u)).x;
                    _3073 = _3072 == 0u;
                    float frontier_phi_114_pred;
                    float frontier_phi_114_pred_1;
                    float frontier_phi_114_pred_2;
                    float frontier_phi_114_pred_3;
                    float frontier_phi_114_pred_4;
                    float frontier_phi_114_pred_5;
                    if (_3073)
                    {
                        frontier_phi_114_pred = _3062;
                        frontier_phi_114_pred_1 = _3061;
                        frontier_phi_114_pred_2 = _3060;
                        frontier_phi_114_pred_3 = _3059;
                        frontier_phi_114_pred_4 = _3058;
                        frontier_phi_114_pred_5 = _3057;
                    }
                    else
                    {
                        float _3265;
                        float _3266;
                        float _3267;
                        float _3268;
                        float _3269;
                        float _3270;
                        float _3558;
                        float _3559;
                        float _3560;
                        float _3561;
                        float _3562;
                        float _3563;
                        float _3278 = _3057;
                        float _3279 = _3058;
                        float _3280 = _3059;
                        float _3281 = _3060;
                        float _3282 = _3061;
                        float _3283 = _3062;
                        uint _3284 = _3072;
                        uint _3285;
                        vec4 _3310;
                        float _3311;
                        vec4 _3326;
                        vec3 _3338;
                        vec4 _3353;
                        vec4 _3368;
                        float _3414;
                        bool _3415;
                        for (;;)
                        {
                            uint _3295 = ((_3063 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3284));
                            _3285 = (_3284 + 4294967295u) & _3284;
                            uint _3297 = _3295 * 40u;
                            _3310 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3297)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3297 + 3u)).x));
                            _3311 = _3310.w;
                            uint _3313 = (_3295 * 40u) + 4u;
                            _3326 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3313)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3313 + 3u)).x));
                            uint _3328 = (_3295 * 40u) + 8u;
                            _3338 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3328)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3328 + 2u)).x));
                            uint _3340 = (_3295 * 40u) + 16u;
                            _3353 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3340)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3340 + 3u)).x));
                            uint _3355 = (_3295 * 40u) + 20u;
                            _3368 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3355)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3355 + 3u)).x));
                            uint _3370 = (_3295 * 40u) + 24u;
                            vec4 _3383 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3370)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3370 + 3u)).x));
                            uint _3389 = (_3295 * 40u) + 28u;
                            vec4 _3402 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3389)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3389 + 3u)).x));
                            _3414 = fma(_2012, _3402.z, fma(_2011, _3402.y, _3402.x * _2010)) + _3402.w;
                            _3415 = !((fma(_2012, _3383.z, fma(_2011, _3383.y, _3383.x * _2010)) + _3383.w) <= 0.0);
                            float frontier_phi_120_pred;
                            float frontier_phi_120_pred_1;
                            float frontier_phi_120_pred_2;
                            float frontier_phi_120_pred_3;
                            float frontier_phi_120_pred_4;
                            float frontier_phi_120_pred_5;
                            if (_3415)
                            {
                                float _3442 = _3310.x - _2010;
                                float _3443 = _3310.y - _2011;
                                float _3444 = _3310.z - _2012;
                                float _3445 = dot(vec3(_3442, _3443, _3444), vec3(_3442, _3443, _3444));
                                float _3448 = inversesqrt(_3445);
                                float _3449 = _3448 * _3442;
                                float _3450 = _3448 * _3443;
                                float _3451 = _3448 * _3444;
                                float _3455 = 1.0 - (_3445 / (_3311 * _3311));
                                float _4550 = isnan(0.0) ? _3455 : (isnan(_3455) ? 0.0 : max(_3455, 0.0));
                                float _3456 = isnan(1.0) ? _4550 : (isnan(_4550) ? 1.0 : min(_4550, 1.0));
                                float _3460 = sqrt(_3445) * _3326.w;
                                float _3462 = 1.39999997615814208984375 / (_3460 + 1.39999997615814208984375);
                                float _3463 = _3462 * _3462;
                                float _3466 = ((1.0 - _3463) * dot(vec3(_3449, _3450, _3451), vec3(_864, _867, _870))) + _3463;
                                float _3469 = _3460 * _3460;
                                float _3473 = (fma(_2012, _3353.z, fma(_2011, _3353.y, _3353.x * _2010)) + _3353.w) / _3414;
                                float _3474 = (fma(_2012, _3368.z, fma(_2011, _3368.y, _3368.x * _2010)) + _3368.w) / _3414;
                                float _3478 = 1.0 - dot(vec2(_3473, _3474), vec2(_3473, _3474));
                                float _4566 = isnan(0.0) ? _3478 : (isnan(_3478) ? 0.0 : max(_3478, 0.0));
                                float _3479 = isnan(1.0) ? _4566 : (isnan(_4566) ? 1.0 : min(_4566, 1.0));
                                float _3480 = _3479 * (((isnan(0.0) ? _3466 : (isnan(_3466) ? 0.0 : max(_3466, 0.0))) * _3456) / ((_3469 * 0.699999988079071044921875) + 1.0));
                                float _3492 = exp2(log2(1.0 / ((_3469 * 3.5) + 5.0)) * 0.25);
                                float _3493 = 1.0 - _925;
                                float _3500 = sqrt(1.0 - ((1.0 - (_3493 * _3493)) * (1.0 - (_3492 * _3492))));
                                float _3501 = _3500 * _3500;
                                float _3502 = _3501 * _3501;
                                float _3503 = _3449 - _2902;
                                float _3504 = _3450 - _2903;
                                float _3505 = _3451 - _2904;
                                float _3509 = inversesqrt(dot(vec3(_3503, _3504, _3505), vec3(_3503, _3504, _3505)));
                                float _3513 = dot(vec3(_864, _867, _870), vec3((-0.0) - _2902, (-0.0) - _2903, (-0.0) - _2904));
                                float _4577 = isnan(0.0) ? _3513 : (isnan(_3513) ? 0.0 : max(_3513, 0.0));
                                float _3516 = isnan(1.0) ? _4577 : (isnan(_4577) ? 1.0 : min(_4577, 1.0));
                                float _3517 = dot(vec3(_864, _867, _870), vec3(_3509 * _3503, _3509 * _3504, _3509 * _3505));
                                float _4588 = isnan(0.0) ? _3517 : (isnan(_3517) ? 0.0 : max(_3517, 0.0));
                                float _3520 = isnan(1.0) ? _4588 : (isnan(_4588) ? 1.0 : min(_4588, 1.0));
                                float _3524 = ((_3520 * _3520) * (_3502 + (-1.0))) + 1.0;
                                float _3525 = _3462 * _3501;
                                float _3526 = _3525 * _3525;
                                float _3532 = ((1.0 - _3526) * dot(vec3(_864, _867, _870), vec3(_3449, _3450, _3451))) + _3526;
                                float _4599 = isnan(0.0) ? _3532 : (isnan(_3532) ? 0.0 : max(_3532, 0.0));
                                float _3533 = isnan(1.0) ? _4599 : (isnan(_4599) ? 1.0 : min(_4599, 1.0));
                                float _3534 = 1.0 - _3501;
                                float _3544 = (0.5 / (((_3533 * ((_3516 * _3534) + _3501)) + 9.9999999392252902907785028219223e-09) + (((_3533 * _3534) + _3501) * _3516))) * _3533;
                                float _4610 = isnan(0.0) ? _3544 : (isnan(_3544) ? 0.0 : max(_3544, 0.0));
                                float _3554 = (_3479 * _3456) * (((_3502 * 3.1415927410125732421875) * (isnan(1.0) ? _4610 : (isnan(_4610) ? 1.0 : min(_4610, 1.0)))) / ((_3524 * _3524) * ((_3469 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_120_pred = _3480 * _3326.z;
                                frontier_phi_120_pred_1 = _3480 * _3326.y;
                                frontier_phi_120_pred_2 = _3480 * _3326.x;
                                frontier_phi_120_pred_3 = _3554 * _3338.z;
                                frontier_phi_120_pred_4 = _3554 * _3338.y;
                                frontier_phi_120_pred_5 = _3554 * _3338.x;
                            }
                            else
                            {
                                frontier_phi_120_pred = 0.0;
                                frontier_phi_120_pred_1 = 0.0;
                                frontier_phi_120_pred_2 = 0.0;
                                frontier_phi_120_pred_3 = 0.0;
                                frontier_phi_120_pred_4 = 0.0;
                                frontier_phi_120_pred_5 = 0.0;
                            }
                            _3563 = frontier_phi_120_pred;
                            _3562 = frontier_phi_120_pred_1;
                            _3561 = frontier_phi_120_pred_2;
                            _3560 = frontier_phi_120_pred_3;
                            _3559 = frontier_phi_120_pred_4;
                            _3558 = frontier_phi_120_pred_5;
                            _3268 = _3561 + _3281;
                            _3269 = _3562 + _3282;
                            _3270 = _3563 + _3283;
                            _3265 = _3558 + _3278;
                            _3266 = _3559 + _3279;
                            _3267 = _3560 + _3280;
                            if (_3285 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3278 = _3265;
                                _3279 = _3266;
                                _3280 = _3267;
                                _3281 = _3268;
                                _3282 = _3269;
                                _3283 = _3270;
                                _3284 = _3285;
                                continue;
                            }
                        }
                        frontier_phi_114_pred = _3270;
                        frontier_phi_114_pred_1 = _3269;
                        frontier_phi_114_pred_2 = _3268;
                        frontier_phi_114_pred_3 = _3267;
                        frontier_phi_114_pred_4 = _3266;
                        frontier_phi_114_pred_5 = _3265;
                    }
                    _2887 = frontier_phi_114_pred;
                    _2885 = frontier_phi_114_pred_1;
                    _2883 = frontier_phi_114_pred_2;
                    _2881 = frontier_phi_114_pred_3;
                    _2879 = frontier_phi_114_pred_4;
                    _2877 = frontier_phi_114_pred_5;
                    uint _3064 = _3063 + 1u;
                    if (_3064 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3057 = _2877;
                        _3058 = _2879;
                        _3059 = _2881;
                        _3060 = _2883;
                        _3061 = _2885;
                        _3062 = _2887;
                        _3063 = _3064;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_94_95_ladder = _2883;
                frontier_phi_94_95_ladder_1 = _2887;
                frontier_phi_94_95_ladder_2 = _2885;
                frontier_phi_94_95_ladder_3 = _2881;
                frontier_phi_94_95_ladder_4 = _2879;
                frontier_phi_94_95_ladder_5 = _2877;
            }
            else
            {
                frontier_phi_94_95_ladder = _2736;
                frontier_phi_94_95_ladder_1 = _2740;
                frontier_phi_94_95_ladder_2 = _2738;
                frontier_phi_94_95_ladder_3 = _2734;
                frontier_phi_94_95_ladder_4 = _2732;
                frontier_phi_94_95_ladder_5 = _2730;
            }
            _2876 = frontier_phi_94_95_ladder_5;
            _2878 = frontier_phi_94_95_ladder_4;
            _2880 = frontier_phi_94_95_ladder_3;
            _2882 = frontier_phi_94_95_ladder;
            _2884 = frontier_phi_94_95_ladder_2;
            _2886 = frontier_phi_94_95_ladder_1;
        }
        float _2891 = isnan(1.0) ? _909 : (isnan(_909) ? 1.0 : min(_909, 1.0));
        _2619 = (_2891 * _2882) + _2298;
        _2621 = (_2891 * _2884) + _2299;
        _2623 = (_2891 * _2886) + _2300;
        _2625 = ((_2876 * 0.039999999105930328369140625) * _2891) + _2454;
        _2627 = ((_2878 * 0.039999999105930328369140625) * _2891) + _2455;
        _2629 = ((_2880 * 0.039999999105930328369140625) * _2891) + _2456;
    }
    else
    {
        _2619 = _2298;
        _2621 = _2299;
        _2623 = _2300;
        _2625 = _2454;
        _2627 = _2455;
        _2629 = _2456;
    }
    uint _2635 = _885 + uint(cbMatDynParam._m0[0u].w);
    float _4626 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _4637 = isnan(0.0) ? _896 : (isnan(_896) ? 0.0 : max(_896, 0.0));
    float _4648 = isnan(0.0) ? _897 : (isnan(_897) ? 0.0 : max(_897, 0.0));
    float _2660 = (((isnan(1.0) ? _4626 : (isnan(_4626) ? 1.0 : min(_4626, 1.0))) * (_2619 + ((isnan(0.0) ? _1667 : (isnan(_1667) ? 0.0 : max(_1667, 0.0))) * _909))) + ((_2625 + ((isnan(0.0) ? _1957 : (isnan(_1957) ? 0.0 : max(_1957, 0.0))) * _1746)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2635].x * ((((((cbMtdParam._m0[14u].x * _295) * _690.x) - _622) * _295) * _743) + _622));
    float _2662 = ((cbInstanceData._m0[_2635].y * ((((((cbMtdParam._m0[14u].y * _295) * _690.y) - _623) * _295) * _743) + _623)) + ((_2627 + ((isnan(0.0) ? _1960 : (isnan(_1960) ? 0.0 : max(_1960, 0.0))) * _1746)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4637 : (isnan(_4637) ? 1.0 : min(_4637, 1.0))) * (_2621 + ((isnan(0.0) ? _1670 : (isnan(_1670) ? 0.0 : max(_1670, 0.0))) * _909)));
    float _2664 = ((cbInstanceData._m0[_2635].z * ((((((cbMtdParam._m0[14u].z * _295) * _690.z) - _624) * _295) * _743) + _624)) + ((_2629 + ((isnan(0.0) ? _1963 : (isnan(_1963) ? 0.0 : max(_1963, 0.0))) * _1746)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4648 : (isnan(_4648) ? 1.0 : min(_4648, 1.0))) * (_2623 + ((isnan(0.0) ? _1673 : (isnan(_1673) ? 0.0 : max(_1673, 0.0))) * _909)));
    float _2665 = isnan(0.0) ? _2660 : (isnan(_2660) ? 0.0 : max(_2660, 0.0));
    float _2666 = isnan(0.0) ? _2662 : (isnan(_2662) ? 0.0 : max(_2662, 0.0));
    float _2667 = isnan(0.0) ? _2664 : (isnan(_2664) ? 0.0 : max(_2664, 0.0));
    uint _2668 = _883 + 6u;
    float _2676 = _844 / cbSceneParam._m0[86u].x;
    float _2677 = _845 / cbSceneParam._m0[86u].y;
    vec4 _2691 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2676, _2677, (log2((isnan(cbSceneParam._m0[77u].w) ? _818 : (isnan(_818) ? cbSceneParam._m0[77u].w : min(_818, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2693 = _2691.x;
    float _2694 = _2691.y;
    float _2695 = _2691.z;
    float _2696 = _2691.w;
    float _2792;
    float _2794;
    float _2796;
    float _2798;
    if (_818 > cbSceneParam._m0[78u].w)
    {
        float _2755 = isnan(_818) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _818 : min(cbSceneParam._m0[80u].w, _818));
        float _2756 = _2755 / _818;
        float _2767 = _2756 * _277;
        float _2768 = _278 * _2756;
        float _2769 = (-0.0) - _2768;
        float _2770 = _2756 * _279;
        float _2772 = (cbSceneParam._m0[77u].w * _2769) / _2755;
        float _2773 = _2772 + cbSceneParam._m0[79u].w;
        float _2774 = cbSceneParam._m0[79u].w - _2768;
        float _2780 = sqrt(((_2767 * _2767) + (_2768 * _2768)) + (_2770 * _2770));
        float _2783 = (1.0 - (cbSceneParam._m0[77u].w / _2755)) * _2780;
        float _2788 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2790 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3014;
        if (abs((_2769 - _2772) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3014 = ((((_2773 > 0.0) ? exp2(_2788 * _2773) : (2.0 - exp2(_2790 * _2773))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2783;
        }
        else
        {
            float _2937 = 1.0 / cbSceneParam._m0[80u].x;
            float _2938 = isnan(_2774) ? _2773 : (isnan(_2773) ? _2774 : max(_2773, _2774));
            float _2939 = isnan(_2774) ? _2773 : (isnan(_2773) ? _2774 : min(_2773, _2774));
            float _2948 = isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : min(_2938, 0.0));
            float _2949 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : min(_2939, 0.0));
            _3014 = ((abs(_2780 / _2769) * cbSceneParam._m0[80u].y) * ((((_2948 - _2949) * 2.0) - ((exp2(_2788 * (isnan(0.0) ? _2938 : (isnan(_2938) ? 0.0 : max(_2938, 0.0)))) - exp2(_2788 * (isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0))))) * _2937)) - ((exp2(_2790 * _2948) - exp2(_2790 * _2949)) * _2937))) + (_2783 * cbSceneParam._m0[80u].z);
        }
        vec4 _3016 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2676, _2677, 1.0), 0.0);
        float _3025 = exp2((_3014 * (-1.44269502162933349609375)) * (1.0 - _3016.w));
        float _3026 = log2(_3025);
        float _3042 = log2(_2696);
        _2792 = (exp2(_3042 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3026 * cbSceneParam._m0[78u].x)) * _3016.x) / cbSceneParam._m0[78u].x)) + _2693;
        _2794 = (exp2(_3042 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3026 * cbSceneParam._m0[78u].y)) * _3016.y) / cbSceneParam._m0[78u].y)) + _2694;
        _2796 = (exp2(_3042 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3026 * cbSceneParam._m0[78u].z)) * _3016.z) / cbSceneParam._m0[78u].z)) + _2695;
        _2798 = _3025 * _2696;
    }
    else
    {
        _2792 = _2693;
        _2794 = _2694;
        _2796 = _2695;
        _2798 = _2696;
    }
    bool _3052;
    vec4 _2808;
    vec4 _2830;
    float _2832;
    float _2836;
    float _2837;
    float _2838;
    float _2839;
    bool _2849;
    for (;;)
    {
        _2808 = cbMatDynParam._m0[0u];
        float _2810 = roundEven(_2808.y);
        bool _2811 = _2810 == 3.0;
        float _2812 = log2(_2798);
        float _2819 = exp2(_2812 * cbSceneParam._m0[78u].x) * _2665;
        float _2820 = exp2(_2812 * cbSceneParam._m0[78u].y) * _2666;
        float _2821 = exp2(_2812 * cbSceneParam._m0[78u].z) * _2667;
        float _2828 = _832 + (-0.5);
        _2830 = cbMtdParam._m0[1u];
        _2832 = _2830.y * _2828;
        float _2835 = (_2810 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2836 = _2835 * (_2811 ? _2819 : (_2819 + (cbSceneParam._m0[72u].w * _2792)));
        _2837 = _2835 * (_2811 ? _2820 : (_2820 + (cbSceneParam._m0[72u].w * _2794)));
        _2838 = _2835 * (_2811 ? _2821 : (_2821 + (cbSceneParam._m0[72u].w * _2796)));
        _2839 = _2828 * 0.999000012874603271484375;
        _2849 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2849)
        {
            if ((cbInstanceData._m0[_883 + 7u].x + _2839) < 0.5)
            {
                _3052 = true;
                break;
            }
        }
        uint _2972 = _885 + uint(_2808.w);
        if ((cbInstanceData._m0[_2972].w < 1.0) && ((cbInstanceData._m0[_2972].w + _2839) < 0.5))
        {
            _3052 = true;
            break;
        }
        if ((_2832 + 1.0) < _2830.x)
        {
            _3052 = true;
            break;
        }
        _3052 = false;
        break;
    }
    float _3256;
    if (_3052)
    {
        discard_state = true;
        _3256 = 0.0;
    }
    else
    {
        _3256 = cbInstanceData._m0[_2668].w;
    }
    SV_Target.x = _2836;
    SV_Target.y = _2837;
    SV_Target.z = _2838;
    SV_Target.w = _3256;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2668].w;
    discard_exit();
}


