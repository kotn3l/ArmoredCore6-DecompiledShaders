#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_8;
layout(set = 0, binding = 11) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 9) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_7;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1306;
float _3505;
float _3506;
float _3507;
float _3508;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _196 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _197 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _198 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _203 = inversesqrt(dot(vec3(_196, _197, _198), vec3(_196, _197, _198)));
    float _204 = _203 * _196;
    float _205 = _203 * _197;
    float _206 = _203 * _198;
    float _210 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _211 = _210 * NORMAL.x;
    float _212 = _210 * NORMAL.y;
    float _213 = _210 * NORMAL.z;
    float _217 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _218 = _217 * TANGENT.x;
    float _219 = _217 * TANGENT.y;
    float _220 = _217 * TANGENT.z;
    float _265 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _275 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _265);
    float _276 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _265);
    float _277 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _265);
    vec4 _290 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _293 = _290.x;
    vec4 _311 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _328 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _293) + cbMtdParam._m0[12u].x) * _311.x;
    float _330 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _293) + cbMtdParam._m0[12u].y) * _311.y;
    float _332 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _293) + cbMtdParam._m0[12u].z) * _311.z;
    vec4 _350 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _386 = cbMtdParam._m0[24u].x + _275;
    float _387 = cbMtdParam._m0[24u].y + _276;
    float _388 = cbMtdParam._m0[24u].z + _277;
    float _402 = (-0.0) - dot(vec3(_386, _387, _388), vec3(_204, _205, _206));
    float _403 = (-0.0) - dot(vec3(_386, _387, _388), vec3(_218, _219, _220));
    float _404 = (-0.0) - dot(vec3(_386, _387, _388), vec3((-0.0) - _211, (-0.0) - _212, (-0.0) - _213));
    float _408 = inversesqrt(dot(vec3(_402, _403, _404), vec3(_402, _403, _404)));
    float _411 = _408 * _404;
    float _412 = (_408 * _402) + ((cbMtdParam._m0[22u].x * _293) * ((_350.x * 2.0) + (-1.0)));
    float _413 = (_408 * _403) + ((cbMtdParam._m0[22u].y * _293) * ((_350.y * 2.0) + (-1.0)));
    float _414 = _412 * cbMtdParam._m0[20u].w;
    float _415 = _413 * cbMtdParam._m0[20u].z;
    float _416 = fract(TEXCOORD.x);
    float _417 = fract(TEXCOORD.y);
    float _423;
    if (_414 > 0.0)
    {
        _423 = (1.0 - _416) / _414;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_414 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _416) / _414;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _423 = frontier_phi_3_2_ladder;
    }
    float _431;
    if (_415 > 0.0)
    {
        _431 = (1.0 - _417) / _415;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_415 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _417) / _415;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _431 = frontier_phi_7_6_ladder;
    }
    bool _433 = _411 > 0.0;
    float _435 = _433 ? (cbMtdParam._m0[16u].x / _411) : 5000.0;
    float _436 = isnan(_431) ? _423 : (isnan(_423) ? _431 : min(_423, _431));
    float _437 = isnan(_435) ? _436 : (isnan(_436) ? _435 : min(_436, _435));
    float _441 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _442 = _416 + (-0.5);
    float _445 = _417 + (-0.5);
    float _448 = ((_437 * _411) + _441) / _441;
    vec4 _473 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (((((_442 + (_437 * _414)) / _448) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (((((_445 + (_437 * _415)) / _448) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    float _486 = (_473.x * _293) * cbMtdParam._m0[9u].x;
    float _487 = (_473.y * _293) * cbMtdParam._m0[9u].y;
    float _488 = (_473.z * _293) * cbMtdParam._m0[9u].z;
    float _507 = _412 * cbMtdParam._m0[22u].w;
    float _508 = _413 * cbMtdParam._m0[22u].z;
    bool _509 = _507 > 0.0;
    float _514;
    if (_509)
    {
        _514 = (1.0 - _416) / _507;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_507 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _416) / _507;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _514 = frontier_phi_11_10_ladder;
    }
    bool _516 = _508 > 0.0;
    float _521;
    if (_516)
    {
        _521 = (1.0 - _417) / _508;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_508 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _417) / _508;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _521 = frontier_phi_15_14_ladder;
    }
    float _524 = _433 ? (cbMtdParam._m0[18u].x / _411) : 5000.0;
    float _525 = isnan(_521) ? _514 : (isnan(_514) ? _521 : min(_514, _521));
    float _526 = isnan(_524) ? _525 : (isnan(_525) ? _524 : min(_525, _524));
    float _530 = cbMtdParam._m0[19u].y * cbMtdParam._m0[18u].x;
    float _534 = ((_526 * _411) + _530) / _530;
    float _539 = cbMtdParam._m0[19u].x - cbMtdParam._m0[20u].x * trunc(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    float _541 = floor(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    vec4 _557 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_442 + (_526 * _507)) / _534) + 0.5) + _539) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_445 + (_526 * _508)) / _534) + 0.5) + _541) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[0u].w));
    float _572;
    if (_509)
    {
        _572 = (1.0 - _416) / _507;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_507 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _416) / _507;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _572 = frontier_phi_19_18_ladder;
    }
    float _578;
    if (_516)
    {
        _578 = (1.0 - _417) / _508;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_508 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _417) / _508;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _578 = frontier_phi_23_22_ladder;
    }
    float _580 = isnan(_578) ? _572 : (isnan(_572) ? _578 : min(_572, _578));
    float _581 = isnan(_524) ? _580 : (isnan(_580) ? _524 : min(_580, _524));
    float _588 = ((_581 * _411) + _530) / _530;
    vec4 _608 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_442 + (_581 * _507)) / _588) + 0.5) + _539) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_445 + (_581 * _508)) / _588) + 0.5) + _541) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[8u].w));
    float _610 = _608.x;
    float _620 = (((((cbMtdParam._m0[10u].x * _293) * _557.x) - _486) * _293) * _610) + _486;
    float _621 = (((((cbMtdParam._m0[10u].y * _293) * _557.y) - _487) * _293) * _610) + _487;
    float _622 = (((((cbMtdParam._m0[10u].z * _293) * _557.z) - _488) * _293) * _610) + _488;
    float _638 = _412 * cbMtdParam._m0[23u].y;
    float _639 = _413 * cbMtdParam._m0[23u].x;
    bool _640 = _638 > 0.0;
    float _645;
    if (_640)
    {
        _645 = (1.0 - _416) / _638;
    }
    else
    {
        float frontier_phi_27_26_ladder;
        if (_638 < 0.0)
        {
            frontier_phi_27_26_ladder = ((-0.0) - _416) / _638;
        }
        else
        {
            frontier_phi_27_26_ladder = 5000.0;
        }
        _645 = frontier_phi_27_26_ladder;
    }
    bool _647 = _639 > 0.0;
    float _652;
    if (_647)
    {
        _652 = (1.0 - _417) / _639;
    }
    else
    {
        float frontier_phi_31_30_ladder;
        if (_639 < 0.0)
        {
            frontier_phi_31_30_ladder = ((-0.0) - _417) / _639;
        }
        else
        {
            frontier_phi_31_30_ladder = 5000.0;
        }
        _652 = frontier_phi_31_30_ladder;
    }
    float _655 = _433 ? (cbMtdParam._m0[19u].w / _411) : 5000.0;
    float _656 = isnan(_652) ? _645 : (isnan(_645) ? _652 : min(_645, _652));
    float _657 = isnan(_655) ? _656 : (isnan(_656) ? _655 : min(_656, _655));
    float _661 = cbMtdParam._m0[19u].w * cbMtdParam._m0[16u].z;
    float _665 = ((_657 * _411) + _661) / _661;
    float _670 = cbMtdParam._m0[19u].z - cbMtdParam._m0[23u].z * trunc(cbMtdParam._m0[19u].z / cbMtdParam._m0[23u].z);
    float _672 = floor(cbMtdParam._m0[19u].z / cbMtdParam._m0[23u].z);
    vec4 _688 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[9u].x * (((((_442 + (_657 * _638)) / _665) + 0.5) + _670) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * (((((_445 + (_657 * _639)) / _665) + 0.5) + _672) / cbMtdParam._m0[23u].w)) + cbTextureTilingScale._m0[9u].w));
    float _703;
    if (_640)
    {
        _703 = (1.0 - _416) / _638;
    }
    else
    {
        float frontier_phi_35_34_ladder;
        if (_638 < 0.0)
        {
            frontier_phi_35_34_ladder = ((-0.0) - _416) / _638;
        }
        else
        {
            frontier_phi_35_34_ladder = 5000.0;
        }
        _703 = frontier_phi_35_34_ladder;
    }
    float _709;
    if (_647)
    {
        _709 = (1.0 - _417) / _639;
    }
    else
    {
        float frontier_phi_39_38_ladder;
        if (_639 < 0.0)
        {
            frontier_phi_39_38_ladder = ((-0.0) - _417) / _639;
        }
        else
        {
            frontier_phi_39_38_ladder = 5000.0;
        }
        _709 = frontier_phi_39_38_ladder;
    }
    float _711 = isnan(_709) ? _703 : (isnan(_703) ? _709 : min(_703, _709));
    float _712 = isnan(_655) ? _711 : (isnan(_711) ? _655 : min(_711, _655));
    float _719 = ((_712 * _411) + _661) / _661;
    vec4 _739 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_8, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * (((((_442 + (_712 * _638)) / _719) + 0.5) + _670) / cbMtdParam._m0[23u].z)) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * (((((_445 + (_712 * _639)) / _719) + 0.5) + _672) / cbMtdParam._m0[23u].w)) + cbTextureTilingScale._m0[10u].w));
    float _741 = _739.x;
    vec4 _766 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _770 = _766.z;
    float _773 = (_766.x * 2.0) + (-1.0);
    float _774 = (_766.y * 2.0) + (-1.0);
    float _775 = dot(vec2(_773, _774), vec2(_773, _774));
    float _3567 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _780 = sqrt(1.0 - (isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0))));
    float _783 = fma(_780, _211, fma(_774, _218, _773 * _204));
    float _786 = fma(_780, _212, fma(_774, _219, _773 * _205));
    float _789 = fma(_780, _213, fma(_774, _220, _773 * _206));
    float _793 = inversesqrt(dot(vec3(_783, _786, _789), vec3(_783, _786, _789)));
    float _794 = _793 * _783;
    float _795 = _793 * _786;
    float _796 = _793 * _789;
    float _3578 = isnan(0.0) ? _770 : (isnan(_770) ? 0.0 : max(_770, 0.0));
    float _797 = isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0));
    float _3589 = isnan(0.0) ? _328 : (isnan(_328) ? 0.0 : max(_328, 0.0));
    float _3600 = isnan(0.0) ? _330 : (isnan(_330) ? 0.0 : max(_330, 0.0));
    float _3611 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _816 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _820 = inversesqrt(dot(vec3(_275, _276, _277), vec3(_275, _276, _277)));
    float _821 = _275 * _820;
    float _822 = _276 * _820;
    float _823 = _277 * _820;
    vec4 _828 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _830 = _828.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _987 = sqrt(((_275 * _275) + (_276 * _276)) + (_277 * _277));
        float _993 = (cbMatDynParam._m0[5u].x * _987) + cbMatDynParam._m0[5u].y;
        float _3622 = isnan(0.0) ? _993 : (isnan(_993) ? 0.0 : max(_993, 0.0));
        float _994 = isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0));
        float _998 = (cbMatDynParam._m0[5u].z * _987) + cbMatDynParam._m0[5u].w;
        float _3633 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3633 : (isnan(_3633) ? 1.0 : min(_3633, 1.0))) - _994)) + _994) < ((_830 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _842 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _843 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _862 = fma(_796, cbSceneParam._m0[5u].z, fma(_795, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _794));
    float _865 = fma(_796, cbSceneParam._m0[6u].z, fma(_795, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _794));
    float _868 = fma(_796, cbSceneParam._m0[7u].z, fma(_795, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _794));
    uint _881 = uint(roundEven(NORMAL.w)) * 13u;
    uint _883 = _881 + 9u;
    uint _884 = _883 + uint(cbMatDynParam._m0[0u].w);
    float _890 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0)))) * cbInstanceData._m0[_884].x;
    float _891 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0)))) * cbInstanceData._m0[_884].y;
    float _892 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0)))) * cbInstanceData._m0[_884].z;
    float _3644 = isnan(0.0) ? _890 : (isnan(_890) ? 0.0 : max(_890, 0.0));
    float _893 = isnan(1.0) ? _3644 : (isnan(_3644) ? 1.0 : min(_3644, 1.0));
    float _3655 = isnan(0.0) ? _891 : (isnan(_891) ? 0.0 : max(_891, 0.0));
    float _894 = isnan(1.0) ? _3655 : (isnan(_3655) ? 1.0 : min(_3655, 1.0));
    float _3666 = isnan(0.0) ? _892 : (isnan(_892) ? 0.0 : max(_892, 0.0));
    float _895 = isnan(1.0) ? _3666 : (isnan(_3666) ? 1.0 : min(_3666, 1.0));
    vec4 _904 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _842, cbSceneParam._m0[86u].y * _843));
    float _907 = _904.x * TEXCOORD_4.z;
    float _908 = dot(vec3(_794, _795, _796), vec3(_821, _822, _823));
    float _911 = _908 * 2.0;
    float _915 = (_911 * _794) - _821;
    float _916 = (_911 * _795) - _822;
    float _917 = (_911 * _796) - _823;
    float _921 = abs(dot(vec3(_821, _822, _823), vec3(_794, _795, _796)));
    float _3677 = isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0));
    float _923 = sqrt(_797);
    float _936 = exp2((_923 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3677 : (isnan(_3677) ? 1.0 : min(_3677, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_923 * 3.0));
    float _968 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _972 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _976 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1305;
    float _1307;
    float _1308;
    float _1309;
    float _1310;
    float _1311;
    float _1312;
    float _1313;
    float _1314;
    float _1315;
    float _1316;
    float _1317;
    float _1318;
    float _1319;
    float _1320;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1032 = fma(_976, cbModelParam._m0[26u].z, fma(_972, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _968));
        float _1036 = fma(_976, cbModelParam._m0[27u].z, fma(_972, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _968));
        float _1040 = fma(_976, cbModelParam._m0[28u].z, fma(_972, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _968));
        float _1063 = _968 + _794;
        float _1064 = _972 + _795;
        float _1065 = _976 + _796;
        float _1075 = fma(_1065, cbModelParam._m0[26u].z, fma(_1064, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1063)) - _1032;
        float _1076 = fma(_1065, cbModelParam._m0[27u].z, fma(_1064, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1063)) - _1036;
        float _1077 = fma(_1065, cbModelParam._m0[28u].z, fma(_1064, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1063)) - _1040;
        float _1081 = inversesqrt(dot(vec3(_1075, _1076, _1077), vec3(_1075, _1076, _1077)));
        float _1094 = ((_1081 * _1075) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1032 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1095 = ((_1081 * _1076) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1036 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1096 = ((_1081 * _1077) / cbModelParam._m0[34u].z) + ((((((_1040 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1099 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1094, _1095, _1096), 0.0);
        vec4 _1106 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1094, _1095, _1096), 0.0);
        vec4 _1113 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1094, _1095, _1096), 0.0);
        vec4 _1120 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1094, _1095, _1096), 0.0);
        float _1133 = exp2((_1099.w + (-0.5)) * 20.0) * 2.0;
        float _1134 = _1133 * (_1099.x + (-0.5));
        float _1135 = _1133 * (_1099.y + (-0.5));
        float _1136 = _1133 * (_1099.z + (-0.5));
        float _1143 = exp2((_1106.w + (-0.5)) * 20.0) * 2.0;
        float _1144 = _1143 * (_1106.x + (-0.5));
        float _1145 = _1143 * (_1106.y + (-0.5));
        float _1146 = _1143 * (_1106.z + (-0.5));
        float _1153 = exp2((_1113.w + (-0.5)) * 20.0) * 2.0;
        float _1154 = _1153 * (_1113.x + (-0.5));
        float _1155 = _1153 * (_1113.y + (-0.5));
        float _1156 = _1153 * (_1113.z + (-0.5));
        float _1163 = exp2((_1120.w + (-0.5)) * 20.0) * 2.0;
        float _1164 = _1163 * (_1120.x + (-0.5));
        float _1165 = _1163 * (_1120.y + (-0.5));
        float _1166 = _1163 * (_1120.z + (-0.5));
        float _1167 = isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0));
        float _1168 = isnan(0.0) ? _1165 : (isnan(_1165) ? 0.0 : max(_1165, 0.0));
        float _1169 = isnan(0.0) ? _1166 : (isnan(_1166) ? 0.0 : max(_1166, 0.0));
        float _1170 = _1134 * 0.5;
        float _1171 = _1144 * 0.5;
        float _1172 = _1154 * 0.5;
        float _1173 = dot(vec3(_1170, _1171, _1172), vec3(_1170, _1171, _1172));
        float _1178 = (_1173 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1173);
        float _1187 = (dot(vec3(_794, _795, _796), vec3(_1178 * _1170, _1178 * _1171, _1178 * _1172)) + 1.0) * 0.5;
        float _3703 = isnan(0.0) ? _1187 : (isnan(_1187) ? 0.0 : max(_1187, 0.0));
        float _1197 = sqrt(((_1171 * _1171) + (_1170 * _1170)) + (_1172 * _1172)) / (_1167 + 9.9999997473787516355514526367188e-06);
        float _3714 = isnan(0.0) ? _1197 : (isnan(_1197) ? 0.0 : max(_1197, 0.0));
        float _1198 = isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0));
        float _1199 = _1198 * 2.0;
        float _1203 = (1.0 - _1198) / (_1198 + 1.0);
        float _3725 = isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0));
        float _1204 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _1213 = ((((1.0 - _1204) * (_1199 + 2.0)) * exp2(log2(isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0))) * (_1199 + 1.0))) + _1204) * _1167;
        float _1214 = _1135 * 0.5;
        float _1215 = _1145 * 0.5;
        float _1216 = _1155 * 0.5;
        float _1217 = dot(vec3(_1214, _1215, _1216), vec3(_1214, _1215, _1216));
        float _1222 = (_1217 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1217);
        float _1230 = (dot(vec3(_794, _795, _796), vec3(_1222 * _1214, _1222 * _1215, _1222 * _1216)) + 1.0) * 0.5;
        float _3736 = isnan(0.0) ? _1230 : (isnan(_1230) ? 0.0 : max(_1230, 0.0));
        float _1239 = sqrt(((_1215 * _1215) + (_1214 * _1214)) + (_1216 * _1216)) / (_1168 + 9.9999997473787516355514526367188e-06);
        float _3747 = isnan(0.0) ? _1239 : (isnan(_1239) ? 0.0 : max(_1239, 0.0));
        float _1240 = isnan(1.0) ? _3747 : (isnan(_3747) ? 1.0 : min(_3747, 1.0));
        float _1241 = _1240 * 2.0;
        float _1245 = (1.0 - _1240) / (_1240 + 1.0);
        float _3758 = isnan(0.0) ? _1245 : (isnan(_1245) ? 0.0 : max(_1245, 0.0));
        float _1246 = isnan(1.0) ? _3758 : (isnan(_3758) ? 1.0 : min(_3758, 1.0));
        float _1255 = ((((1.0 - _1246) * (_1241 + 2.0)) * exp2(log2(isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0))) * (_1241 + 1.0))) + _1246) * _1168;
        float _1256 = _1136 * 0.5;
        float _1257 = _1146 * 0.5;
        float _1258 = _1156 * 0.5;
        float _1259 = dot(vec3(_1256, _1257, _1258), vec3(_1256, _1257, _1258));
        float _1264 = (_1259 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1259);
        float _1272 = (dot(vec3(_794, _795, _796), vec3(_1264 * _1256, _1264 * _1257, _1264 * _1258)) + 1.0) * 0.5;
        float _3769 = isnan(0.0) ? _1272 : (isnan(_1272) ? 0.0 : max(_1272, 0.0));
        float _1281 = sqrt(((_1257 * _1257) + (_1256 * _1256)) + (_1258 * _1258)) / (_1169 + 9.9999997473787516355514526367188e-06);
        float _3780 = isnan(0.0) ? _1281 : (isnan(_1281) ? 0.0 : max(_1281, 0.0));
        float _1282 = isnan(1.0) ? _3780 : (isnan(_3780) ? 1.0 : min(_3780, 1.0));
        float _1283 = _1282 * 2.0;
        float _1287 = (1.0 - _1282) / (_1282 + 1.0);
        float _3791 = isnan(0.0) ? _1287 : (isnan(_1287) ? 0.0 : max(_1287, 0.0));
        float _1288 = isnan(1.0) ? _3791 : (isnan(_3791) ? 1.0 : min(_3791, 1.0));
        float _1297 = ((((1.0 - _1288) * (_1283 + 2.0)) * exp2(log2(isnan(1.0) ? _3769 : (isnan(_3769) ? 1.0 : min(_3769, 1.0))) * (_1283 + 1.0))) + _1288) * _1169;
        _1305 = _1136;
        _1307 = _1135;
        _1308 = _1134;
        _1309 = _1146;
        _1310 = _1145;
        _1311 = _1144;
        _1312 = _1156;
        _1313 = _1155;
        _1314 = _1154;
        _1315 = _1169;
        _1316 = _1168;
        _1317 = _1167;
        _1318 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1213 : (isnan(_1213) ? 0.0 : max(_1213, 0.0)));
        _1319 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1255 : (isnan(_1255) ? 0.0 : max(_1255, 0.0)));
        _1320 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1297 : (isnan(_1297) ? 0.0 : max(_1297, 0.0)));
    }
    else
    {
        _1305 = _1306;
        _1307 = _1306;
        _1308 = _1306;
        _1309 = _1306;
        _1310 = _1306;
        _1311 = _1306;
        _1312 = _1306;
        _1313 = _1306;
        _1314 = _1306;
        _1315 = _1306;
        _1316 = _1306;
        _1317 = _1306;
        _1318 = 0.0;
        _1319 = 0.0;
        _1320 = 0.0;
    }
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    float _1629;
    float _1630;
    float _1631;
    float _1632;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1349 = fma(_976, cbModelParam._m0[30u].z, fma(_972, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _968));
        float _1353 = fma(_976, cbModelParam._m0[31u].z, fma(_972, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _968));
        float _1357 = fma(_976, cbModelParam._m0[32u].z, fma(_972, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _968));
        float _1380 = _968 + _794;
        float _1381 = _972 + _795;
        float _1382 = _976 + _796;
        float _1392 = fma(_1382, cbModelParam._m0[30u].z, fma(_1381, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1380)) - _1349;
        float _1393 = fma(_1382, cbModelParam._m0[31u].z, fma(_1381, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1380)) - _1353;
        float _1394 = fma(_1382, cbModelParam._m0[32u].z, fma(_1381, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1380)) - _1357;
        float _1398 = inversesqrt(dot(vec3(_1392, _1393, _1394), vec3(_1392, _1393, _1394)));
        float _1411 = ((_1398 * _1392) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1349 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1412 = ((_1398 * _1393) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1353 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1413 = ((_1398 * _1394) / cbModelParam._m0[35u].z) + ((((((_1357 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1415 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1411, _1412, _1413), 0.0);
        vec4 _1422 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1411, _1412, _1413), 0.0);
        vec4 _1429 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1411, _1412, _1413), 0.0);
        vec4 _1436 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1411, _1412, _1413), 0.0);
        float _1448 = exp2((_1415.w + (-0.5)) * 20.0) * 2.0;
        float _1449 = _1448 * (_1415.x + (-0.5));
        float _1450 = _1448 * (_1415.y + (-0.5));
        float _1451 = _1448 * (_1415.z + (-0.5));
        float _1458 = exp2((_1422.w + (-0.5)) * 20.0) * 2.0;
        float _1459 = _1458 * (_1422.x + (-0.5));
        float _1460 = _1458 * (_1422.y + (-0.5));
        float _1461 = _1458 * (_1422.z + (-0.5));
        float _1468 = exp2((_1429.w + (-0.5)) * 20.0) * 2.0;
        float _1469 = _1468 * (_1429.x + (-0.5));
        float _1470 = _1468 * (_1429.y + (-0.5));
        float _1471 = _1468 * (_1429.z + (-0.5));
        float _1478 = exp2((_1436.w + (-0.5)) * 20.0) * 2.0;
        float _1479 = _1478 * (_1436.x + (-0.5));
        float _1480 = _1478 * (_1436.y + (-0.5));
        float _1481 = _1478 * (_1436.z + (-0.5));
        float _1482 = isnan(0.0) ? _1479 : (isnan(_1479) ? 0.0 : max(_1479, 0.0));
        float _1483 = isnan(0.0) ? _1480 : (isnan(_1480) ? 0.0 : max(_1480, 0.0));
        float _1484 = isnan(0.0) ? _1481 : (isnan(_1481) ? 0.0 : max(_1481, 0.0));
        float _1485 = _1449 * 0.5;
        float _1486 = _1459 * 0.5;
        float _1487 = _1469 * 0.5;
        float _1488 = dot(vec3(_1485, _1486, _1487), vec3(_1485, _1486, _1487));
        float _1493 = (_1488 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1488);
        float _1501 = (dot(vec3(_794, _795, _796), vec3(_1493 * _1485, _1493 * _1486, _1493 * _1487)) + 1.0) * 0.5;
        float _3832 = isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0));
        float _1510 = sqrt(((_1486 * _1486) + (_1485 * _1485)) + (_1487 * _1487)) / (_1482 + 9.9999997473787516355514526367188e-06);
        float _3843 = isnan(0.0) ? _1510 : (isnan(_1510) ? 0.0 : max(_1510, 0.0));
        float _1511 = isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0));
        float _1512 = _1511 * 2.0;
        float _1516 = (1.0 - _1511) / (_1511 + 1.0);
        float _3854 = isnan(0.0) ? _1516 : (isnan(_1516) ? 0.0 : max(_1516, 0.0));
        float _1517 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _1526 = ((((1.0 - _1517) * (_1512 + 2.0)) * exp2(log2(isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0))) * (_1512 + 1.0))) + _1517) * _1482;
        float _1527 = _1450 * 0.5;
        float _1528 = _1460 * 0.5;
        float _1529 = _1470 * 0.5;
        float _1530 = dot(vec3(_1527, _1528, _1529), vec3(_1527, _1528, _1529));
        float _1535 = (_1530 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1530);
        float _1543 = (dot(vec3(_794, _795, _796), vec3(_1535 * _1527, _1535 * _1528, _1535 * _1529)) + 1.0) * 0.5;
        float _3865 = isnan(0.0) ? _1543 : (isnan(_1543) ? 0.0 : max(_1543, 0.0));
        float _1552 = sqrt(((_1528 * _1528) + (_1527 * _1527)) + (_1529 * _1529)) / (_1483 + 9.9999997473787516355514526367188e-06);
        float _3876 = isnan(0.0) ? _1552 : (isnan(_1552) ? 0.0 : max(_1552, 0.0));
        float _1553 = isnan(1.0) ? _3876 : (isnan(_3876) ? 1.0 : min(_3876, 1.0));
        float _1554 = _1553 * 2.0;
        float _1558 = (1.0 - _1553) / (_1553 + 1.0);
        float _3887 = isnan(0.0) ? _1558 : (isnan(_1558) ? 0.0 : max(_1558, 0.0));
        float _1559 = isnan(1.0) ? _3887 : (isnan(_3887) ? 1.0 : min(_3887, 1.0));
        float _1568 = ((((1.0 - _1559) * (_1554 + 2.0)) * exp2(log2(isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0))) * (_1554 + 1.0))) + _1559) * _1483;
        float _1569 = _1451 * 0.5;
        float _1570 = _1461 * 0.5;
        float _1571 = _1471 * 0.5;
        float _1572 = dot(vec3(_1569, _1570, _1571), vec3(_1569, _1570, _1571));
        float _1577 = (_1572 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1572);
        float _1585 = (dot(vec3(_794, _795, _796), vec3(_1577 * _1569, _1577 * _1570, _1577 * _1571)) + 1.0) * 0.5;
        float _3898 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
        float _1594 = sqrt(((_1570 * _1570) + (_1569 * _1569)) + (_1571 * _1571)) / (_1484 + 9.9999997473787516355514526367188e-06);
        float _3909 = isnan(0.0) ? _1594 : (isnan(_1594) ? 0.0 : max(_1594, 0.0));
        float _1595 = isnan(1.0) ? _3909 : (isnan(_3909) ? 1.0 : min(_3909, 1.0));
        float _1596 = _1595 * 2.0;
        float _1600 = (1.0 - _1595) / (_1595 + 1.0);
        float _3920 = isnan(0.0) ? _1600 : (isnan(_1600) ? 0.0 : max(_1600, 0.0));
        float _1601 = isnan(1.0) ? _3920 : (isnan(_3920) ? 1.0 : min(_3920, 1.0));
        float _1610 = ((((1.0 - _1601) * (_1596 + 2.0)) * exp2(log2(isnan(1.0) ? _3898 : (isnan(_3898) ? 1.0 : min(_3898, 1.0))) * (_1596 + 1.0))) + _1601) * _1484;
        _1618 = _1451;
        _1619 = _1450;
        _1620 = _1449;
        _1621 = _1461;
        _1622 = _1460;
        _1623 = _1459;
        _1624 = _1471;
        _1625 = _1470;
        _1626 = _1469;
        _1627 = _1484;
        _1628 = _1483;
        _1629 = _1482;
        _1630 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1526 : (isnan(_1526) ? 0.0 : max(_1526, 0.0)));
        _1631 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0)));
        _1632 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1610 : (isnan(_1610) ? 0.0 : max(_1610, 0.0)));
    }
    else
    {
        _1618 = _1306;
        _1619 = _1306;
        _1620 = _1306;
        _1621 = _1306;
        _1622 = _1306;
        _1623 = _1306;
        _1624 = _1306;
        _1625 = _1306;
        _1626 = _1306;
        _1627 = _1306;
        _1628 = _1306;
        _1629 = _1306;
        _1630 = 0.0;
        _1631 = 0.0;
        _1632 = 0.0;
    }
    float _1642 = (cbModelParam._m0[1u].x * (_1630 - _1318)) + _1318;
    float _1643 = (cbModelParam._m0[1u].x * (_1631 - _1319)) + _1319;
    float _1644 = (cbModelParam._m0[1u].x * (_1632 - _1320)) + _1320;
    float _1665 = fma(_1644, cbSceneParam._m0[89u].z, fma(_1643, cbSceneParam._m0[89u].y, _1642 * cbSceneParam._m0[89u].x));
    float _1668 = fma(_1644, cbSceneParam._m0[90u].z, fma(_1643, cbSceneParam._m0[90u].y, _1642 * cbSceneParam._m0[90u].x));
    float _1671 = fma(_1644, cbSceneParam._m0[91u].z, fma(_1643, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1642));
    float _1686 = _915 * 0.5;
    float _1687 = _916 * 0.5;
    float _1688 = _917 * 0.5;
    float _1689 = dot(vec4(_1686, _1687, _1688, 1.0), vec4(_1620, _1623, _1626, _1629));
    float _1692 = dot(vec4(_1686, _1687, _1688, 1.0), vec4(_1619, _1622, _1625, _1628));
    float _1695 = dot(vec4(_1686, _1687, _1688, 1.0), vec4(_1618, _1621, _1624, _1627));
    float _1729;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1702 = dot(vec4(_1686, _1687, _1688, 1.0), vec4(_1305, _1309, _1312, _1315));
        float _1706 = dot(vec4(_1686, _1687, _1688, 1.0), vec4(_1307, _1310, _1313, _1316));
        float _1710 = dot(vec4(_1686, _1687, _1688, 1.0), vec4(_1308, _1311, _1314, _1317));
        float _1717 = dot(vec4(cbModelParam._m0[39u]), vec4(_1686, _1687, _1688, 1.0));
        _1729 = dot(vec3(isnan(0.0) ? _1710 : (isnan(_1710) ? 0.0 : max(_1710, 0.0)), isnan(0.0) ? _1706 : (isnan(_1706) ? 0.0 : max(_1706, 0.0)), isnan(0.0) ? _1702 : (isnan(_1702) ? 0.0 : max(_1702, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1717) ? 0.0 : (isnan(0.0) ? _1717 : max(0.0, _1717))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1729 = 1.0;
    }
    float _1740;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1731 = dot(vec4(cbModelParam._m0[40u]), vec4(_1686, _1687, _1688, 1.0));
        _1740 = dot(vec3(isnan(0.0) ? _1689 : (isnan(_1689) ? 0.0 : max(_1689, 0.0)), isnan(0.0) ? _1692 : (isnan(_1692) ? 0.0 : max(_1692, 0.0)), isnan(0.0) ? _1695 : (isnan(_1695) ? 0.0 : max(_1695, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1731) ? 0.0 : (isnan(0.0) ? _1731 : max(0.0, _1731))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1740 = 1.0;
    }
    float _1744 = (_1740 * cbModelParam._m0[1u].x) + (_1729 * (1.0 - cbModelParam._m0[1u].x));
    float _1754 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _797);
    float _1755 = isnan(_1754) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1754 : min(cbModelParam._m0[25u].z, _1754));
    float _1836;
    float _1838;
    float _1840;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1803 = fma(_976, cbModelParam._m0[13u].z, fma(_972, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _968)) + cbModelParam._m0[13u].w;
        float _1807 = fma(_976, cbModelParam._m0[14u].z, fma(_972, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _968)) + cbModelParam._m0[14u].w;
        float _1811 = fma(_976, cbModelParam._m0[15u].z, fma(_972, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _968)) + cbModelParam._m0[15u].w;
        float _1814 = fma(_917, cbModelParam._m0[13u].z, fma(_916, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _915));
        float _1817 = fma(_917, cbModelParam._m0[14u].z, fma(_916, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _915));
        float _1820 = fma(_917, cbModelParam._m0[15u].z, fma(_916, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _915));
        float _1848;
        if (_1814 > 0.0)
        {
            _1848 = abs((1.0 - _1803) / _1814);
        }
        else
        {
            float frontier_phi_57_55_ladder;
            if (_1814 < 0.0)
            {
                frontier_phi_57_55_ladder = abs((_1803 + 1.0) / _1814);
            }
            else
            {
                frontier_phi_57_55_ladder = 5000.0;
            }
            _1848 = frontier_phi_57_55_ladder;
        }
        float _2217;
        if (_1817 > 0.0)
        {
            _2217 = abs((1.0 - _1807) / _1817);
        }
        else
        {
            float frontier_phi_66_62_ladder;
            if (_1817 < 0.0)
            {
                frontier_phi_66_62_ladder = abs((_1807 + 1.0) / _1817);
            }
            else
            {
                frontier_phi_66_62_ladder = 5000.0;
            }
            _2217 = frontier_phi_66_62_ladder;
        }
        float _2541;
        if (_1820 > 0.0)
        {
            _2541 = abs((1.0 - _1811) / _1820);
        }
        else
        {
            float frontier_phi_80_73_ladder;
            if (_1820 < 0.0)
            {
                frontier_phi_80_73_ladder = abs((_1811 + 1.0) / _1820);
            }
            else
            {
                frontier_phi_80_73_ladder = 5000.0;
            }
            _2541 = frontier_phi_80_73_ladder;
        }
        float _2543 = isnan(_2217) ? _1848 : (isnan(_1848) ? _2217 : min(_1848, _2217));
        float _2544 = isnan(_2541) ? _2543 : (isnan(_2543) ? _2541 : min(_2543, _2541));
        float _2548 = (_2544 * _1814) + _1803;
        float _2549 = (_2544 * _1817) + _1807;
        float _2550 = (_2544 * _1820) + _1811;
        float _2551 = _2544 * 9.9999997473787516355514526367188e-05;
        float _2552 = (-1.0) - _2551;
        float _2554 = _2551 + 1.0;
        float frontier_phi_56_80_ladder;
        float frontier_phi_56_80_ladder_1;
        float frontier_phi_56_80_ladder_2;
        if ((_2550 > _2554) || ((_2550 < _2552) || ((_2549 > _2554) || ((_2549 < _2552) || ((_2548 < _2552) || (_2548 > _2554))))))
        {
            frontier_phi_56_80_ladder = 0.0;
            frontier_phi_56_80_ladder_1 = 0.0;
            frontier_phi_56_80_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2692 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2550, cbModelParam._m0[9u].z, fma(_2549, cbModelParam._m0[9u].y, _2548 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2550, cbModelParam._m0[10u].z, fma(_2549, cbModelParam._m0[10u].y, _2548 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2550, cbModelParam._m0[11u].z, fma(_2549, cbModelParam._m0[11u].y, _2548 * cbModelParam._m0[11u].x))), _1755);
            frontier_phi_56_80_ladder = _2692.z * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_1 = _2692.y * cbModelParam._m0[1u].y;
            frontier_phi_56_80_ladder_2 = _2692.x * cbModelParam._m0[1u].y;
        }
        _1836 = frontier_phi_56_80_ladder_2;
        _1838 = frontier_phi_56_80_ladder_1;
        _1840 = frontier_phi_56_80_ladder;
    }
    else
    {
        vec4 _1824 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_915, _916, _917), _1755);
        _1836 = _1824.x * cbModelParam._m0[1u].y;
        _1838 = _1824.y * cbModelParam._m0[1u].y;
        _1840 = _1824.z * cbModelParam._m0[1u].y;
    }
    float _1844 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _797);
    float _1845 = isnan(_1844) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1844 : min(cbModelParam._m0[25u].w, _1844));
    float _1933;
    float _1935;
    float _1937;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1897 = fma(_976, cbModelParam._m0[21u].z, fma(_972, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _968)) + cbModelParam._m0[21u].w;
        float _1901 = fma(_976, cbModelParam._m0[22u].z, fma(_972, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _968)) + cbModelParam._m0[22u].w;
        float _1905 = fma(_976, cbModelParam._m0[23u].z, fma(_972, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _968)) + cbModelParam._m0[23u].w;
        float _1908 = fma(_917, cbModelParam._m0[21u].z, fma(_916, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _915));
        float _1911 = fma(_917, cbModelParam._m0[22u].z, fma(_916, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _915));
        float _1914 = fma(_917, cbModelParam._m0[23u].z, fma(_916, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _915));
        float _2222;
        if (_1908 > 0.0)
        {
            _2222 = abs((1.0 - _1897) / _1908);
        }
        else
        {
            float frontier_phi_68_64_ladder;
            if (_1908 < 0.0)
            {
                frontier_phi_68_64_ladder = abs((_1897 + 1.0) / _1908);
            }
            else
            {
                frontier_phi_68_64_ladder = 5000.0;
            }
            _2222 = frontier_phi_68_64_ladder;
        }
        float _2567;
        if (_1911 > 0.0)
        {
            _2567 = abs((1.0 - _1901) / _1911);
        }
        else
        {
            float frontier_phi_82_75_ladder;
            if (_1911 < 0.0)
            {
                frontier_phi_82_75_ladder = abs((_1901 + 1.0) / _1911);
            }
            else
            {
                frontier_phi_82_75_ladder = 5000.0;
            }
            _2567 = frontier_phi_82_75_ladder;
        }
        float _2757;
        if (_1914 > 0.0)
        {
            _2757 = abs((1.0 - _1905) / _1914);
        }
        else
        {
            float frontier_phi_100_93_ladder;
            if (_1914 < 0.0)
            {
                frontier_phi_100_93_ladder = abs((_1905 + 1.0) / _1914);
            }
            else
            {
                frontier_phi_100_93_ladder = 5000.0;
            }
            _2757 = frontier_phi_100_93_ladder;
        }
        float _2759 = isnan(_2567) ? _2222 : (isnan(_2222) ? _2567 : min(_2222, _2567));
        float _2760 = isnan(_2757) ? _2759 : (isnan(_2759) ? _2757 : min(_2759, _2757));
        float _2764 = (_2760 * _1908) + _1897;
        float _2765 = (_2760 * _1911) + _1901;
        float _2766 = (_2760 * _1914) + _1905;
        float _2767 = _2760 * 9.9999997473787516355514526367188e-05;
        float _2768 = (-1.0) - _2767;
        float _2770 = _2767 + 1.0;
        float frontier_phi_65_100_ladder;
        float frontier_phi_65_100_ladder_1;
        float frontier_phi_65_100_ladder_2;
        if ((_2766 > _2770) || ((_2766 < _2768) || ((_2765 > _2770) || ((_2765 < _2768) || ((_2764 < _2768) || (_2764 > _2770))))))
        {
            frontier_phi_65_100_ladder = 0.0;
            frontier_phi_65_100_ladder_1 = 0.0;
            frontier_phi_65_100_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3008 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2766, cbModelParam._m0[17u].z, fma(_2765, cbModelParam._m0[17u].y, _2764 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2766, cbModelParam._m0[18u].z, fma(_2765, cbModelParam._m0[18u].y, _2764 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2766, cbModelParam._m0[19u].z, fma(_2765, cbModelParam._m0[19u].y, _2764 * cbModelParam._m0[19u].x))), _1845);
            frontier_phi_65_100_ladder = _3008.y * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_1 = _3008.x * cbModelParam._m0[1u].z;
            frontier_phi_65_100_ladder_2 = _3008.z * cbModelParam._m0[1u].z;
        }
        _1933 = frontier_phi_65_100_ladder_1;
        _1935 = frontier_phi_65_100_ladder;
        _1937 = frontier_phi_65_100_ladder_2;
    }
    else
    {
        vec4 _1917 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_915, _916, _917), _1845);
        _1933 = _1917.x * cbModelParam._m0[1u].z;
        _1935 = _1917.y * cbModelParam._m0[1u].z;
        _1937 = _1917.z * cbModelParam._m0[1u].z;
    }
    float _1949 = ((((1.0 - _936) * ((_923 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_936 * _923)) * _907;
    float _1950 = _1949 * ((cbModelParam._m0[1u].w * (_1933 - _1836)) + _1836);
    float _1951 = _1949 * ((cbModelParam._m0[1u].w * (_1935 - _1838)) + _1838);
    float _1952 = _1949 * ((cbModelParam._m0[1u].w * (_1937 - _1840)) + _1840);
    float _1955 = fma(_1952, cbSceneParam._m0[89u].z, fma(_1951, cbSceneParam._m0[89u].y, _1950 * cbSceneParam._m0[89u].x));
    float _1958 = fma(_1952, cbSceneParam._m0[90u].z, fma(_1951, cbSceneParam._m0[90u].y, _1950 * cbSceneParam._m0[90u].x));
    float _1961 = fma(_1952, cbSceneParam._m0[91u].z, fma(_1951, cbSceneParam._m0[91u].y, _1950 * cbSceneParam._m0[91u].x));
    vec4 _1969 = texture(sampler2D(g_ShadowTexture, SS_WrapLinear), vec2(_842, _843));
    float _1971 = _1969.w;
    float _1983 = (1.0 - cbSceneParam._m0[34u].x) + (cbSceneParam._m0[34u].x * _1971);
    float _1984 = (1.0 - cbSceneParam._m0[34u].y) + (cbSceneParam._m0[34u].y * _1971);
    float _1985 = (1.0 - cbSceneParam._m0[34u].z) + (cbSceneParam._m0[34u].z * _1971);
    uvec4 _1989 = floatBitsToUint(cbInstanceData._m0[_881 + 5u]);
    uint _1991 = _1989.x * 14u;
    uint _1992 = _1991 + 13u;
    float _1997 = _907 + (-1.0);
    float _2000 = (cbLight._m0[_1992].x * _1997) + 1.0;
    float _2001 = (cbLight._m0[_1992].y * _1997) + 1.0;
    uint _2002 = _1991 + 5u;
    float _2008 = isnan(1.0) ? _2001 : (isnan(_2001) ? 1.0 : min(_2001, 1.0));
    uint _2012 = _1991 + 4u;
    float _2021 = isnan(1.0) ? _2000 : (isnan(_2000) ? 1.0 : min(_2000, 1.0));
    uint _2025 = _1991 | 1u;
    float _2036 = dot(vec3(cbLight._m0[_1991].xyz), vec3(_794, _795, _796));
    float _2039 = dot(vec3(cbLight._m0[_2025].xyz), vec3(_794, _795, _796));
    float _4056 = isnan(0.0) ? _2036 : (isnan(_2036) ? 0.0 : max(_2036, 0.0));
    float _4067 = isnan(0.0) ? _2039 : (isnan(_2039) ? 0.0 : max(_2039, 0.0));
    float _2044 = (isnan(1.0) ? _4056 : (isnan(_4056) ? 1.0 : min(_4056, 1.0))) * 0.3183098733425140380859375;
    float _2046 = (isnan(1.0) ? _4067 : (isnan(_4067) ? 1.0 : min(_4067, 1.0))) * 0.3183098733425140380859375;
    float _2053 = ((cbLight._m0[_2002].x * _2008) * _2046) + (((cbLight._m0[_2012].x * _1983) * _2021) * _2044);
    float _2054 = ((_2008 * cbLight._m0[_2002].y) * _2046) + (((cbLight._m0[_2012].y * _1984) * _2021) * _2044);
    float _2055 = ((_2008 * cbLight._m0[_2002].z) * _2046) + (((cbLight._m0[_2012].z * _1985) * _2021) * _2044);
    uint _2057 = _1991 + 8u;
    float _2070 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_1991].w)) * _797) * 0.949999988079071044921875);
    float _2071 = _2070 * _2070;
    float _2072 = cbLight._m0[_1991].x + _821;
    float _2073 = cbLight._m0[_1991].y + _822;
    float _2074 = cbLight._m0[_1991].z + _823;
    float _2078 = inversesqrt(dot(vec3(_2072, _2073, _2074), vec3(_2072, _2073, _2074)));
    float _2079 = _2078 * _2072;
    float _2080 = _2078 * _2073;
    float _2081 = _2078 * _2074;
    float _2082 = dot(vec3(_794, _795, _796), vec3(cbLight._m0[_1991].xyz));
    float _4078 = isnan(0.0) ? _2082 : (isnan(_2082) ? 0.0 : max(_2082, 0.0));
    float _2085 = isnan(1.0) ? _4078 : (isnan(_4078) ? 1.0 : min(_4078, 1.0));
    float _4089 = isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0));
    float _2086 = isnan(1.0) ? _4089 : (isnan(_4089) ? 1.0 : min(_4089, 1.0));
    float _2087 = dot(vec3(_794, _795, _796), vec3(_2079, _2080, _2081));
    float _4100 = isnan(0.0) ? _2087 : (isnan(_2087) ? 0.0 : max(_2087, 0.0));
    float _2090 = isnan(1.0) ? _4100 : (isnan(_4100) ? 1.0 : min(_4100, 1.0));
    float _2091 = dot(vec3(cbLight._m0[_1991].xyz), vec3(_2079, _2080, _2081));
    float _4111 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _2095 = _2071 * _2071;
    float _2099 = ((_2090 * _2090) * (_2095 + (-1.0))) + 1.0;
    float _2110 = (exp2(log2(1.0 - (isnan(1.0) ? _4111 : (isnan(_4111) ? 1.0 : min(_4111, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2111 = 1.0 - _2071;
    float _2122 = (0.5 / (((_2086 * ((_2085 * _2111) + _2071)) + 9.9999999392252902907785028219223e-09) + (((_2086 * _2111) + _2071) * _2085))) * _2085;
    float _4122 = isnan(0.0) ? _2122 : (isnan(_2122) ? 0.0 : max(_2122, 0.0));
    float _2124 = (isnan(1.0) ? _4122 : (isnan(_4122) ? 1.0 : min(_4122, 1.0))) * (_2095 / ((_2099 * _2099) * 3.141590118408203125));
    uint _2138 = _1991 + 9u;
    float _2149 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2025].w)) * _797) * 0.949999988079071044921875);
    float _2150 = _2149 * _2149;
    float _2151 = cbLight._m0[_2025].x + _821;
    float _2152 = cbLight._m0[_2025].y + _822;
    float _2153 = cbLight._m0[_2025].z + _823;
    float _2157 = inversesqrt(dot(vec3(_2151, _2152, _2153), vec3(_2151, _2152, _2153)));
    float _2158 = _2157 * _2151;
    float _2159 = _2157 * _2152;
    float _2160 = _2157 * _2153;
    float _2161 = dot(vec3(_794, _795, _796), vec3(cbLight._m0[_2025].xyz));
    float _4133 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _2164 = isnan(1.0) ? _4133 : (isnan(_4133) ? 1.0 : min(_4133, 1.0));
    float _2165 = dot(vec3(_794, _795, _796), vec3(_2158, _2159, _2160));
    float _4144 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2168 = isnan(1.0) ? _4144 : (isnan(_4144) ? 1.0 : min(_4144, 1.0));
    float _2169 = dot(vec3(cbLight._m0[_2025].xyz), vec3(_2158, _2159, _2160));
    float _4155 = isnan(0.0) ? _2169 : (isnan(_2169) ? 0.0 : max(_2169, 0.0));
    float _2173 = _2150 * _2150;
    float _2177 = ((_2168 * _2168) * (_2173 + (-1.0))) + 1.0;
    float _2186 = (exp2(log2(1.0 - (isnan(1.0) ? _4155 : (isnan(_4155) ? 1.0 : min(_4155, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2187 = 1.0 - _2150;
    float _2197 = (0.5 / (((_2086 * ((_2164 * _2187) + _2150)) + 9.9999999392252902907785028219223e-09) + (((_2086 * _2187) + _2150) * _2164))) * _2164;
    float _4166 = isnan(0.0) ? _2197 : (isnan(_2197) ? 0.0 : max(_2197, 0.0));
    float _2199 = (isnan(1.0) ? _4166 : (isnan(_4166) ? 1.0 : min(_4166, 1.0))) * (_2173 / ((_2177 * _2177) * 3.141590118408203125));
    float _2209 = (((_2186 * cbLight._m0[_2138].x) * _2199) * _2008) + ((((cbLight._m0[_2057].x * _1983) * _2110) * _2124) * _2021);
    float _2210 = (((_2186 * cbLight._m0[_2138].y) * _2199) * _2008) + ((((cbLight._m0[_2057].y * _1984) * _2110) * _2124) * _2021);
    float _2211 = (((_2186 * cbLight._m0[_2138].z) * _2199) * _2008) + ((((cbLight._m0[_2057].z * _1985) * _2110) * _2124) * _2021);
    float _2326;
    float _2328;
    float _2330;
    float _2332;
    float _2334;
    float _2336;
    if (_1989.y == 0u)
    {
        float _2266 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2267 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2266;
        float _2268 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2266;
        float _2269 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2266;
        uvec4 _2281 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2282 = _2281.x;
        uint _2293 = uint((float(_2281.y) * floor(float(uint(cbSceneParam._m0[85u].y * _843) / _2282))) + floor(float(uint(cbSceneParam._m0[85u].x * _842) / _2282)));
        float _2303 = (log2(_2269 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2304 = isnan(0.0) ? _2303 : (isnan(_2303) ? 0.0 : max(_2303, 0.0));
        uint _2307 = uint(isnan(14.0) ? _2304 : (isnan(_2304) ? 14.0 : min(_2304, 14.0)));
        uvec4 _2312 = texelFetch(g_lightClusterGridBuffer, int(((_2307 << 2u) + (_2293 << 6u)) >> 2u));
        uint _2313 = _2312.x;
        uint _2314 = _2281.z;
        float _2420;
        float _2422;
        float _2424;
        float _2426;
        float _2428;
        float _2430;
        if (((((1u << ((_2314 >> 4u) & 15u)) + 4294967295u) & _2313) == 0u) || ((_2314 & 240u) == 0u))
        {
            _2420 = 0.0;
            _2422 = 0.0;
            _2424 = 0.0;
            _2426 = 0.0;
            _2428 = 0.0;
            _2430 = 0.0;
        }
        else
        {
            float _2421;
            float _2423;
            float _2425;
            float _2427;
            float _2429;
            float _2431;
            float _2604 = 0.0;
            float _2605 = 0.0;
            float _2606 = 0.0;
            float _2607 = 0.0;
            float _2608 = 0.0;
            float _2609 = 0.0;
            uint _2610 = 0u;
            uint _2619;
            bool _2620;
            for (;;)
            {
                _2619 = texelFetch(g_lightClassification, int((((_2307 << 5u) + (_2293 << 9u)) + (_2610 << 2u)) >> 2u)).x;
                _2620 = _2619 == 0u;
                float frontier_phi_95_pred;
                float frontier_phi_95_pred_1;
                float frontier_phi_95_pred_2;
                float frontier_phi_95_pred_3;
                float frontier_phi_95_pred_4;
                float frontier_phi_95_pred_5;
                if (_2620)
                {
                    frontier_phi_95_pred = _2605;
                    frontier_phi_95_pred_1 = _2604;
                    frontier_phi_95_pred_2 = _2606;
                    frontier_phi_95_pred_3 = _2609;
                    frontier_phi_95_pred_4 = _2608;
                    frontier_phi_95_pred_5 = _2607;
                }
                else
                {
                    float _2800;
                    float _2801;
                    float _2802;
                    float _2803;
                    float _2804;
                    float _2805;
                    uint _2806;
                    _2800 = _2604;
                    _2801 = _2605;
                    _2802 = _2606;
                    _2803 = _2607;
                    _2804 = _2608;
                    _2805 = _2609;
                    _2806 = _2619;
                    float _2701;
                    float _2702;
                    float _2703;
                    float _2704;
                    float _2705;
                    float _2706;
                    for (;;)
                    {
                        uint _2810 = uint(findLSB(_2806)) + (_2610 << 5u);
                        uint _2807 = (_2806 + 4294967295u) & _2806;
                        uint _2812 = _2810 * 48u;
                        vec4 _2826 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2812)).x, texelFetch(g_PointLightRenderingBuffer, int(_2812 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2812 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2812 + 3u)).x));
                        uint _2832 = (_2810 * 48u) + 4u;
                        vec4 _2845 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2832)).x, texelFetch(g_PointLightRenderingBuffer, int(_2832 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2832 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2832 + 3u)).x));
                        uint _2851 = (_2810 * 48u) + 8u;
                        vec3 _2862 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2851)).x, texelFetch(g_PointLightRenderingBuffer, int(_2851 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2851 + 2u)).x));
                        float _2866 = _2826.x - _2267;
                        float _2867 = _2826.y - _2268;
                        float _2868 = _2826.z - _2269;
                        float _2869 = dot(vec3(_2866, _2867, _2868), vec3(_2866, _2867, _2868));
                        float _2872 = inversesqrt(_2869);
                        float _2873 = _2872 * _2866;
                        float _2874 = _2872 * _2867;
                        float _2875 = _2872 * _2868;
                        float _2876 = dot(vec3(_862, _865, _868), vec3(_2873, _2874, _2875));
                        float _2881 = 1.0 - (_2869 * _2826.w);
                        float _4187 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
                        float _2882 = isnan(1.0) ? _4187 : (isnan(_4187) ? 1.0 : min(_4187, 1.0));
                        float _2883 = sqrt(_2869) * _2845.w;
                        float _2886 = 1.39999997615814208984375 / (_2883 + 1.39999997615814208984375);
                        float _2887 = _2886 * _2886;
                        float _2890 = ((1.0 - _2887) * _2876) + _2887;
                        float _2893 = _2883 * _2883;
                        float _2897 = ((isnan(0.0) ? _2890 : (isnan(_2890) ? 0.0 : max(_2890, 0.0))) * _2882) / ((_2893 * 0.699999988079071044921875) + 1.0);
                        float _2901 = (-0.0) - _2267;
                        float _2902 = (-0.0) - _2268;
                        float _2903 = (-0.0) - _2269;
                        float _2907 = inversesqrt(dot(vec3(_2901, _2902, _2903), vec3(_2901, _2902, _2903)));
                        float _2908 = _2907 * _2901;
                        float _2909 = _2907 * _2902;
                        float _2910 = _2907 * _2903;
                        float _2918 = exp2(log2(1.0 / ((_2893 * 3.5) + 5.0)) * 0.25);
                        float _2919 = 1.0 - _923;
                        float _2926 = sqrt(1.0 - ((1.0 - (_2919 * _2919)) * (1.0 - (_2918 * _2918))));
                        float _2927 = _2926 * _2926;
                        float _2928 = _2927 * _2927;
                        float _2929 = _2908 + _2873;
                        float _2930 = _2909 + _2874;
                        float _2931 = _2910 + _2875;
                        float _2935 = inversesqrt(dot(vec3(_2929, _2930, _2931), vec3(_2929, _2930, _2931)));
                        float _2939 = dot(vec3(_862, _865, _868), vec3(_2908, _2909, _2910));
                        float _4203 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
                        float _2942 = isnan(1.0) ? _4203 : (isnan(_4203) ? 1.0 : min(_4203, 1.0));
                        float _2943 = dot(vec3(_862, _865, _868), vec3(_2935 * _2929, _2935 * _2930, _2935 * _2931));
                        float _4214 = isnan(0.0) ? _2943 : (isnan(_2943) ? 0.0 : max(_2943, 0.0));
                        float _2946 = isnan(1.0) ? _4214 : (isnan(_4214) ? 1.0 : min(_4214, 1.0));
                        float _2950 = ((_2946 * _2946) * (_2928 + (-1.0))) + 1.0;
                        float _2951 = _2886 * _2927;
                        float _2952 = _2951 * _2951;
                        float _2955 = ((1.0 - _2952) * _2876) + _2952;
                        float _4225 = isnan(0.0) ? _2955 : (isnan(_2955) ? 0.0 : max(_2955, 0.0));
                        float _2956 = isnan(1.0) ? _4225 : (isnan(_4225) ? 1.0 : min(_4225, 1.0));
                        float _2957 = 1.0 - _2927;
                        float _2967 = (0.5 / (((_2956 * ((_2942 * _2957) + _2927)) + 9.9999999392252902907785028219223e-09) + (((_2956 * _2957) + _2927) * _2942))) * _2956;
                        float _4236 = isnan(0.0) ? _2967 : (isnan(_2967) ? 0.0 : max(_2967, 0.0));
                        float _2978 = (((_2928 * 3.1415927410125732421875) * (isnan(1.0) ? _4236 : (isnan(_4236) ? 1.0 : min(_4236, 1.0)))) / ((_2950 * _2950) * ((_2893 * 2.1991131305694580078125) + 3.141590118408203125))) * _2882;
                        _2704 = (_2897 * _2845.x) + _2803;
                        _2705 = (_2897 * _2845.y) + _2804;
                        _2706 = (_2897 * _2845.z) + _2805;
                        _2701 = (_2978 * _2862.x) + _2800;
                        _2702 = (_2978 * _2862.y) + _2801;
                        _2703 = (_2978 * _2862.z) + _2802;
                        if (_2807 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2800 = _2701;
                            _2801 = _2702;
                            _2802 = _2703;
                            _2803 = _2704;
                            _2804 = _2705;
                            _2805 = _2706;
                            _2806 = _2807;
                        }
                    }
                    frontier_phi_95_pred = _2702;
                    frontier_phi_95_pred_1 = _2701;
                    frontier_phi_95_pred_2 = _2703;
                    frontier_phi_95_pred_3 = _2706;
                    frontier_phi_95_pred_4 = _2705;
                    frontier_phi_95_pred_5 = _2704;
                }
                _2423 = frontier_phi_95_pred;
                _2421 = frontier_phi_95_pred_1;
                _2425 = frontier_phi_95_pred_2;
                _2431 = frontier_phi_95_pred_3;
                _2429 = frontier_phi_95_pred_4;
                _2427 = frontier_phi_95_pred_5;
                uint _2611 = _2610 + 1u;
                if (_2611 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2604 = _2421;
                    _2605 = _2423;
                    _2606 = _2425;
                    _2607 = _2427;
                    _2608 = _2429;
                    _2609 = _2431;
                    _2610 = _2611;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2420 = _2421;
            _2422 = _2423;
            _2424 = _2425;
            _2426 = _2427;
            _2428 = _2429;
            _2430 = _2431;
        }
        uvec4 _2434 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2435 = _2434.z;
        uint _2437 = (_2435 >> 8u) & 15u;
        float _2572;
        float _2574;
        float _2576;
        float _2578;
        float _2580;
        float _2582;
        if (((4294967295u << _2437) & _2313) == 0u)
        {
            _2572 = _2420;
            _2574 = _2422;
            _2576 = _2424;
            _2578 = _2426;
            _2580 = _2428;
            _2582 = _2430;
        }
        else
        {
            float _2597 = inversesqrt(dot(vec3(_2267, _2268, _2269), vec3(_2267, _2268, _2269)));
            float _2598 = _2597 * _2267;
            float _2599 = _2597 * _2268;
            float _2600 = _2597 * _2269;
            float frontier_phi_84_85_ladder;
            float frontier_phi_84_85_ladder_1;
            float frontier_phi_84_85_ladder_2;
            float frontier_phi_84_85_ladder_3;
            float frontier_phi_84_85_ladder_4;
            float frontier_phi_84_85_ladder_5;
            if (_2437 < ((_2435 >> 12u) & 15u))
            {
                float _2573;
                float _2575;
                float _2577;
                float _2579;
                float _2581;
                float _2583;
                float _2783 = _2420;
                float _2784 = _2422;
                float _2785 = _2424;
                float _2786 = _2426;
                float _2787 = _2428;
                float _2788 = _2430;
                uint _2789 = _2437;
                uint _2798;
                bool _2799;
                for (;;)
                {
                    _2798 = texelFetch(g_lightClassification, int((((_2307 << 5u) + (_2293 << 9u)) + (_2789 << 2u)) >> 2u)).x;
                    _2799 = _2798 == 0u;
                    float frontier_phi_109_pred;
                    float frontier_phi_109_pred_1;
                    float frontier_phi_109_pred_2;
                    float frontier_phi_109_pred_3;
                    float frontier_phi_109_pred_4;
                    float frontier_phi_109_pred_5;
                    if (_2799)
                    {
                        frontier_phi_109_pred = _2784;
                        frontier_phi_109_pred_1 = _2783;
                        frontier_phi_109_pred_2 = _2788;
                        frontier_phi_109_pred_3 = _2787;
                        frontier_phi_109_pred_4 = _2786;
                        frontier_phi_109_pred_5 = _2785;
                    }
                    else
                    {
                        float _3013;
                        float _3014;
                        float _3015;
                        float _3016;
                        float _3017;
                        float _3018;
                        float _3306;
                        float _3307;
                        float _3308;
                        float _3309;
                        float _3310;
                        float _3311;
                        float _3026 = _2783;
                        float _3027 = _2784;
                        float _3028 = _2785;
                        float _3029 = _2786;
                        float _3030 = _2787;
                        float _3031 = _2788;
                        uint _3032 = _2798;
                        uint _3033;
                        vec4 _3058;
                        float _3059;
                        vec4 _3074;
                        vec3 _3086;
                        vec4 _3101;
                        vec4 _3116;
                        float _3162;
                        bool _3163;
                        for (;;)
                        {
                            uint _3043 = ((_2789 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3032));
                            _3033 = (_3032 + 4294967295u) & _3032;
                            uint _3045 = _3043 * 40u;
                            _3058 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3045)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3045 + 3u)).x));
                            _3059 = _3058.w;
                            uint _3061 = (_3043 * 40u) + 4u;
                            _3074 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3061)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3061 + 3u)).x));
                            uint _3076 = (_3043 * 40u) + 8u;
                            _3086 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3076)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3076 + 2u)).x));
                            uint _3088 = (_3043 * 40u) + 16u;
                            _3101 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3088)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 3u)).x));
                            uint _3103 = (_3043 * 40u) + 20u;
                            _3116 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3103)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 3u)).x));
                            uint _3118 = (_3043 * 40u) + 24u;
                            vec4 _3131 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3118)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3118 + 3u)).x));
                            uint _3137 = (_3043 * 40u) + 28u;
                            vec4 _3150 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3137)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3137 + 3u)).x));
                            _3162 = fma(_2269, _3150.z, fma(_2268, _3150.y, _3150.x * _2267)) + _3150.w;
                            _3163 = !((fma(_2269, _3131.z, fma(_2268, _3131.y, _3131.x * _2267)) + _3131.w) <= 0.0);
                            float frontier_phi_115_pred;
                            float frontier_phi_115_pred_1;
                            float frontier_phi_115_pred_2;
                            float frontier_phi_115_pred_3;
                            float frontier_phi_115_pred_4;
                            float frontier_phi_115_pred_5;
                            if (_3163)
                            {
                                float _3190 = _3058.x - _2267;
                                float _3191 = _3058.y - _2268;
                                float _3192 = _3058.z - _2269;
                                float _3193 = dot(vec3(_3190, _3191, _3192), vec3(_3190, _3191, _3192));
                                float _3196 = inversesqrt(_3193);
                                float _3197 = _3196 * _3190;
                                float _3198 = _3196 * _3191;
                                float _3199 = _3196 * _3192;
                                float _3203 = 1.0 - (_3193 / (_3059 * _3059));
                                float _4247 = isnan(0.0) ? _3203 : (isnan(_3203) ? 0.0 : max(_3203, 0.0));
                                float _3204 = isnan(1.0) ? _4247 : (isnan(_4247) ? 1.0 : min(_4247, 1.0));
                                float _3208 = sqrt(_3193) * _3074.w;
                                float _3210 = 1.39999997615814208984375 / (_3208 + 1.39999997615814208984375);
                                float _3211 = _3210 * _3210;
                                float _3214 = ((1.0 - _3211) * dot(vec3(_3197, _3198, _3199), vec3(_862, _865, _868))) + _3211;
                                float _3217 = _3208 * _3208;
                                float _3221 = (fma(_2269, _3101.z, fma(_2268, _3101.y, _3101.x * _2267)) + _3101.w) / _3162;
                                float _3222 = (fma(_2269, _3116.z, fma(_2268, _3116.y, _3116.x * _2267)) + _3116.w) / _3162;
                                float _3226 = 1.0 - dot(vec2(_3221, _3222), vec2(_3221, _3222));
                                float _4263 = isnan(0.0) ? _3226 : (isnan(_3226) ? 0.0 : max(_3226, 0.0));
                                float _3227 = isnan(1.0) ? _4263 : (isnan(_4263) ? 1.0 : min(_4263, 1.0));
                                float _3228 = _3227 * (((isnan(0.0) ? _3214 : (isnan(_3214) ? 0.0 : max(_3214, 0.0))) * _3204) / ((_3217 * 0.699999988079071044921875) + 1.0));
                                float _3240 = exp2(log2(1.0 / ((_3217 * 3.5) + 5.0)) * 0.25);
                                float _3241 = 1.0 - _923;
                                float _3248 = sqrt(1.0 - ((1.0 - (_3241 * _3241)) * (1.0 - (_3240 * _3240))));
                                float _3249 = _3248 * _3248;
                                float _3250 = _3249 * _3249;
                                float _3251 = _3197 - _2598;
                                float _3252 = _3198 - _2599;
                                float _3253 = _3199 - _2600;
                                float _3257 = inversesqrt(dot(vec3(_3251, _3252, _3253), vec3(_3251, _3252, _3253)));
                                float _3261 = dot(vec3(_862, _865, _868), vec3((-0.0) - _2598, (-0.0) - _2599, (-0.0) - _2600));
                                float _4274 = isnan(0.0) ? _3261 : (isnan(_3261) ? 0.0 : max(_3261, 0.0));
                                float _3264 = isnan(1.0) ? _4274 : (isnan(_4274) ? 1.0 : min(_4274, 1.0));
                                float _3265 = dot(vec3(_862, _865, _868), vec3(_3257 * _3251, _3257 * _3252, _3257 * _3253));
                                float _4285 = isnan(0.0) ? _3265 : (isnan(_3265) ? 0.0 : max(_3265, 0.0));
                                float _3268 = isnan(1.0) ? _4285 : (isnan(_4285) ? 1.0 : min(_4285, 1.0));
                                float _3272 = ((_3268 * _3268) * (_3250 + (-1.0))) + 1.0;
                                float _3273 = _3210 * _3249;
                                float _3274 = _3273 * _3273;
                                float _3280 = ((1.0 - _3274) * dot(vec3(_862, _865, _868), vec3(_3197, _3198, _3199))) + _3274;
                                float _4296 = isnan(0.0) ? _3280 : (isnan(_3280) ? 0.0 : max(_3280, 0.0));
                                float _3281 = isnan(1.0) ? _4296 : (isnan(_4296) ? 1.0 : min(_4296, 1.0));
                                float _3282 = 1.0 - _3249;
                                float _3292 = (0.5 / (((_3281 * ((_3264 * _3282) + _3249)) + 9.9999999392252902907785028219223e-09) + (((_3281 * _3282) + _3249) * _3264))) * _3281;
                                float _4307 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                                float _3302 = (_3227 * _3204) * (((_3250 * 3.1415927410125732421875) * (isnan(1.0) ? _4307 : (isnan(_4307) ? 1.0 : min(_4307, 1.0)))) / ((_3272 * _3272) * ((_3217 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_115_pred = _3228 * _3074.y;
                                frontier_phi_115_pred_1 = _3228 * _3074.x;
                                frontier_phi_115_pred_2 = _3302 * _3086.z;
                                frontier_phi_115_pred_3 = _3302 * _3086.y;
                                frontier_phi_115_pred_4 = _3302 * _3086.x;
                                frontier_phi_115_pred_5 = _3228 * _3074.z;
                            }
                            else
                            {
                                frontier_phi_115_pred = 0.0;
                                frontier_phi_115_pred_1 = 0.0;
                                frontier_phi_115_pred_2 = 0.0;
                                frontier_phi_115_pred_3 = 0.0;
                                frontier_phi_115_pred_4 = 0.0;
                                frontier_phi_115_pred_5 = 0.0;
                            }
                            _3310 = frontier_phi_115_pred;
                            _3309 = frontier_phi_115_pred_1;
                            _3308 = frontier_phi_115_pred_2;
                            _3307 = frontier_phi_115_pred_3;
                            _3306 = frontier_phi_115_pred_4;
                            _3311 = frontier_phi_115_pred_5;
                            _3016 = _3309 + _3029;
                            _3017 = _3310 + _3030;
                            _3018 = _3311 + _3031;
                            _3013 = _3306 + _3026;
                            _3014 = _3307 + _3027;
                            _3015 = _3308 + _3028;
                            if (_3033 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3026 = _3013;
                                _3027 = _3014;
                                _3028 = _3015;
                                _3029 = _3016;
                                _3030 = _3017;
                                _3031 = _3018;
                                _3032 = _3033;
                                continue;
                            }
                        }
                        frontier_phi_109_pred = _3014;
                        frontier_phi_109_pred_1 = _3013;
                        frontier_phi_109_pred_2 = _3018;
                        frontier_phi_109_pred_3 = _3017;
                        frontier_phi_109_pred_4 = _3016;
                        frontier_phi_109_pred_5 = _3015;
                    }
                    _2575 = frontier_phi_109_pred;
                    _2573 = frontier_phi_109_pred_1;
                    _2583 = frontier_phi_109_pred_2;
                    _2581 = frontier_phi_109_pred_3;
                    _2579 = frontier_phi_109_pred_4;
                    _2577 = frontier_phi_109_pred_5;
                    uint _2790 = _2789 + 1u;
                    if (_2790 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2783 = _2573;
                        _2784 = _2575;
                        _2785 = _2577;
                        _2786 = _2579;
                        _2787 = _2581;
                        _2788 = _2583;
                        _2789 = _2790;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_84_85_ladder = _2573;
                frontier_phi_84_85_ladder_1 = _2577;
                frontier_phi_84_85_ladder_2 = _2583;
                frontier_phi_84_85_ladder_3 = _2581;
                frontier_phi_84_85_ladder_4 = _2579;
                frontier_phi_84_85_ladder_5 = _2575;
            }
            else
            {
                frontier_phi_84_85_ladder = _2420;
                frontier_phi_84_85_ladder_1 = _2424;
                frontier_phi_84_85_ladder_2 = _2430;
                frontier_phi_84_85_ladder_3 = _2428;
                frontier_phi_84_85_ladder_4 = _2426;
                frontier_phi_84_85_ladder_5 = _2422;
            }
            _2572 = frontier_phi_84_85_ladder;
            _2574 = frontier_phi_84_85_ladder_5;
            _2576 = frontier_phi_84_85_ladder_1;
            _2578 = frontier_phi_84_85_ladder_4;
            _2580 = frontier_phi_84_85_ladder_3;
            _2582 = frontier_phi_84_85_ladder_2;
        }
        float _2587 = isnan(1.0) ? _907 : (isnan(_907) ? 1.0 : min(_907, 1.0));
        _2326 = (_2587 * _2578) + _2053;
        _2328 = (_2587 * _2580) + _2054;
        _2330 = (_2587 * _2582) + _2055;
        _2332 = ((_2572 * 0.039999999105930328369140625) * _2587) + _2209;
        _2334 = ((_2574 * 0.039999999105930328369140625) * _2587) + _2210;
        _2336 = ((_2576 * 0.039999999105930328369140625) * _2587) + _2211;
    }
    else
    {
        _2326 = _2053;
        _2328 = _2054;
        _2330 = _2055;
        _2332 = _2209;
        _2334 = _2210;
        _2336 = _2211;
    }
    uint _2342 = _883 + uint(cbMatDynParam._m0[0u].w);
    float _4323 = isnan(0.0) ? _893 : (isnan(_893) ? 0.0 : max(_893, 0.0));
    float _4334 = isnan(0.0) ? _894 : (isnan(_894) ? 0.0 : max(_894, 0.0));
    float _4345 = isnan(0.0) ? _895 : (isnan(_895) ? 0.0 : max(_895, 0.0));
    float _2367 = (((isnan(1.0) ? _4323 : (isnan(_4323) ? 1.0 : min(_4323, 1.0))) * (_2326 + ((isnan(0.0) ? _1665 : (isnan(_1665) ? 0.0 : max(_1665, 0.0))) * _907))) + ((_2332 + ((isnan(0.0) ? _1955 : (isnan(_1955) ? 0.0 : max(_1955, 0.0))) * _1744)) * cbPerFrame._m0[3u].x)) + (cbInstanceData._m0[_2342].x * ((((((cbMtdParam._m0[14u].x * _293) * _688.x) - _620) * _293) * _741) + _620));
    float _2369 = ((cbInstanceData._m0[_2342].y * ((((((cbMtdParam._m0[14u].y * _293) * _688.y) - _621) * _293) * _741) + _621)) + ((_2334 + ((isnan(0.0) ? _1958 : (isnan(_1958) ? 0.0 : max(_1958, 0.0))) * _1744)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4334 : (isnan(_4334) ? 1.0 : min(_4334, 1.0))) * (_2328 + ((isnan(0.0) ? _1668 : (isnan(_1668) ? 0.0 : max(_1668, 0.0))) * _907)));
    float _2371 = ((cbInstanceData._m0[_2342].z * ((((((cbMtdParam._m0[14u].z * _293) * _688.z) - _622) * _293) * _741) + _622)) + ((_2336 + ((isnan(0.0) ? _1961 : (isnan(_1961) ? 0.0 : max(_1961, 0.0))) * _1744)) * cbPerFrame._m0[3u].x)) + ((isnan(1.0) ? _4345 : (isnan(_4345) ? 1.0 : min(_4345, 1.0))) * (_2330 + ((isnan(0.0) ? _1671 : (isnan(_1671) ? 0.0 : max(_1671, 0.0))) * _907)));
    float _2372 = isnan(0.0) ? _2367 : (isnan(_2367) ? 0.0 : max(_2367, 0.0));
    float _2373 = isnan(0.0) ? _2369 : (isnan(_2369) ? 0.0 : max(_2369, 0.0));
    float _2374 = isnan(0.0) ? _2371 : (isnan(_2371) ? 0.0 : max(_2371, 0.0));
    uint _2375 = _881 + 6u;
    float _2383 = _842 / cbSceneParam._m0[86u].x;
    float _2384 = _843 / cbSceneParam._m0[86u].y;
    vec4 _2398 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2383, _2384, (log2((isnan(cbSceneParam._m0[77u].w) ? _816 : (isnan(_816) ? cbSceneParam._m0[77u].w : min(_816, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2400 = _2398.x;
    float _2401 = _2398.y;
    float _2402 = _2398.z;
    float _2403 = _2398.w;
    float _2483;
    float _2485;
    float _2487;
    float _2489;
    if (_816 > cbSceneParam._m0[78u].w)
    {
        float _2445 = isnan(_816) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _816 : min(cbSceneParam._m0[80u].w, _816));
        float _2446 = _2445 / _816;
        float _2457 = _2446 * _275;
        float _2458 = _276 * _2446;
        float _2459 = (-0.0) - _2458;
        float _2460 = _2446 * _277;
        float _2462 = (cbSceneParam._m0[77u].w * _2459) / _2445;
        float _2463 = _2462 + cbSceneParam._m0[79u].w;
        float _2464 = cbSceneParam._m0[79u].w - _2458;
        float _2470 = sqrt(((_2457 * _2457) + (_2458 * _2458)) + (_2460 * _2460));
        float _2473 = (1.0 - (cbSceneParam._m0[77u].w / _2445)) * _2470;
        float _2479 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2481 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2714;
        if (abs((_2459 - _2462) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2714 = ((((_2463 > 0.0) ? exp2(_2479 * _2463) : (2.0 - exp2(_2481 * _2463))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2473;
        }
        else
        {
            float _2633 = 1.0 / cbSceneParam._m0[80u].x;
            float _2634 = isnan(_2464) ? _2463 : (isnan(_2463) ? _2464 : max(_2463, _2464));
            float _2635 = isnan(_2464) ? _2463 : (isnan(_2463) ? _2464 : min(_2463, _2464));
            float _2644 = isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : min(_2634, 0.0));
            float _2645 = isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : min(_2635, 0.0));
            _2714 = ((abs(_2470 / _2459) * cbSceneParam._m0[80u].y) * ((((_2644 - _2645) * 2.0) - ((exp2(_2479 * (isnan(0.0) ? _2634 : (isnan(_2634) ? 0.0 : max(_2634, 0.0)))) - exp2(_2479 * (isnan(0.0) ? _2635 : (isnan(_2635) ? 0.0 : max(_2635, 0.0))))) * _2633)) - ((exp2(_2481 * _2644) - exp2(_2481 * _2645)) * _2633))) + (_2473 * cbSceneParam._m0[80u].z);
        }
        vec4 _2716 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2383, _2384, 1.0), 0.0);
        float _2725 = exp2((_2714 * (-1.44269502162933349609375)) * (1.0 - _2716.w));
        float _2726 = log2(_2725);
        float _2742 = log2(_2403);
        _2483 = (exp2(_2742 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2726 * cbSceneParam._m0[78u].x)) * _2716.x) / cbSceneParam._m0[78u].x)) + _2400;
        _2485 = (exp2(_2742 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2726 * cbSceneParam._m0[78u].y)) * _2716.y) / cbSceneParam._m0[78u].y)) + _2401;
        _2487 = (exp2(_2742 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2726 * cbSceneParam._m0[78u].z)) * _2716.z) / cbSceneParam._m0[78u].z)) + _2402;
        _2489 = _2725 * _2403;
    }
    else
    {
        _2483 = _2400;
        _2485 = _2401;
        _2487 = _2402;
        _2489 = _2403;
    }
    bool _2752;
    vec4 _2499;
    vec4 _2521;
    float _2523;
    float _2527;
    float _2528;
    float _2529;
    float _2530;
    bool _2540;
    for (;;)
    {
        _2499 = cbMatDynParam._m0[0u];
        float _2501 = roundEven(_2499.y);
        bool _2502 = _2501 == 3.0;
        float _2503 = log2(_2489);
        float _2510 = exp2(_2503 * cbSceneParam._m0[78u].x) * _2372;
        float _2511 = exp2(_2503 * cbSceneParam._m0[78u].y) * _2373;
        float _2512 = exp2(_2503 * cbSceneParam._m0[78u].z) * _2374;
        float _2519 = _830 + (-0.5);
        _2521 = cbMtdParam._m0[1u];
        _2523 = _2521.y * _2519;
        float _2526 = (_2501 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2527 = _2526 * (_2502 ? _2510 : (_2510 + (cbSceneParam._m0[72u].w * _2483)));
        _2528 = _2526 * (_2502 ? _2511 : (_2511 + (cbSceneParam._m0[72u].w * _2485)));
        _2529 = _2526 * (_2502 ? _2512 : (_2512 + (cbSceneParam._m0[72u].w * _2487)));
        _2530 = _2519 * 0.999000012874603271484375;
        _2540 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2540)
        {
            if ((cbInstanceData._m0[_881 + 7u].x + _2530) < 0.5)
            {
                _2752 = true;
                break;
            }
        }
        uint _2668 = _883 + uint(_2499.w);
        if ((cbInstanceData._m0[_2668].w < 1.0) && ((cbInstanceData._m0[_2668].w + _2530) < 0.5))
        {
            _2752 = true;
            break;
        }
        if ((_2523 + 1.0) < _2521.x)
        {
            _2752 = true;
            break;
        }
        _2752 = false;
        break;
    }
    float _2983;
    if (_2752)
    {
        discard_state = true;
        _2983 = 0.0;
    }
    else
    {
        _2983 = cbInstanceData._m0[_2375].w;
    }
    SV_Target.x = _2527;
    SV_Target.y = _2528;
    SV_Target.z = _2529;
    SV_Target.w = _2983;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2375].w;
    discard_exit();
}


