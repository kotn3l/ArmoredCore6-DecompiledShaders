#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 2) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_12;
layout(set = 0, binding = 3) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_13;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 7) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_5;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _396;
uint _2176;
uint _2177;
uint _2178;
uint _2393;
uint _2394;
uint _2395;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _192 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _193 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _194 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _199 = inversesqrt(dot(vec3(_192, _193, _194), vec3(_192, _193, _194)));
    float _200 = _199 * _192;
    float _201 = _199 * _193;
    float _202 = _199 * _194;
    float _206 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _210 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _211 = _210 * TANGENT.x;
    float _212 = _210 * TANGENT.y;
    float _213 = _210 * TANGENT.z;
    float _258 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _268 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _258);
    float _269 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _258);
    float _270 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _258);
    vec4 _305 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _321 = inversesqrt(dot(vec3(_200, _201, _202), vec3(_200, _201, _202)));
    float _328 = inversesqrt(dot(vec3(_211, _212, _213), vec3(_211, _212, _213)));
    float _340 = cbMtdParam._m0[24u].w + _268;
    float _341 = cbMtdParam._m0[25u].x + _269;
    float _342 = cbMtdParam._m0[25u].y + _270;
    float _359 = (-0.0) - dot(vec3(_340, _341, _342), vec3(_321 * _200, _321 * _201, _321 * _202));
    float _360 = (-0.0) - dot(vec3(_340, _341, _342), vec3(_328 * _211, _328 * _212, _328 * _213));
    float _361 = (-0.0) - dot(vec3(_340, _341, _342), vec3((-0.0) - (NORMAL.x * _206), (-0.0) - (NORMAL.y * _206), (-0.0) - (NORMAL.z * _206)));
    float _365 = inversesqrt(dot(vec3(_359, _360, _361), vec3(_359, _360, _361)));
    float _366 = _365 * _361;
    float _371 = ((cbMtdParam._m0[21u].z * _359) * _365) + (((_305.x * 2.0) + (-1.0)) * cbMtdParam._m0[22u].x);
    float _372 = ((cbMtdParam._m0[21u].w * _360) * _365) + (((_305.y * 2.0) + (-1.0)) * cbMtdParam._m0[22u].y);
    float _375 = fract(cbMtdParam._m0[21u].z * TEXCOORD.x);
    float _376 = fract(cbMtdParam._m0[21u].w * TEXCOORD.y);
    float _394;
    float _397;
    float _399;
    if (_371 > 0.0)
    {
        float _380 = (1.0 - _375) / _371;
        _394 = _380;
        _397 = ((cbMtdParam._m0[18u].w + 1.0) - fract(_380 * _366)) * 0.16666667163372039794921875;
        _399 = (fract((_380 * _372) + _376) * 0.16666667163372039794921875) + 0.5;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        float frontier_phi_3_2_ladder_1;
        float frontier_phi_3_2_ladder_2;
        if (_371 < 0.0)
        {
            float _395 = ((-0.0) - _375) / _371;
            frontier_phi_3_2_ladder = (fract(_395 * _366) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
            frontier_phi_3_2_ladder_1 = _395;
            frontier_phi_3_2_ladder_2 = (fract((_395 * _372) + _376) * 0.16666667163372039794921875) + 0.666666686534881591796875;
        }
        else
        {
            frontier_phi_3_2_ladder = 0.0;
            frontier_phi_3_2_ladder_1 = _396;
            frontier_phi_3_2_ladder_2 = 0.0;
        }
        _394 = frontier_phi_3_2_ladder_1;
        _397 = frontier_phi_3_2_ladder;
        _399 = frontier_phi_3_2_ladder_2;
    }
    float _425;
    float _427;
    float _429;
    if (_372 > 0.0)
    {
        float _412 = (1.0 - _376) / _372;
        float frontier_phi_8_5_ladder;
        float frontier_phi_8_5_ladder_1;
        float frontier_phi_8_5_ladder_2;
        if (_412 < _394)
        {
            frontier_phi_8_5_ladder = (fract(_412 * _366) * 0.16666667163372039794921875) + 0.3333333432674407958984375;
            frontier_phi_8_5_ladder_1 = (fract((_412 * _371) + _375) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
            frontier_phi_8_5_ladder_2 = _412;
        }
        else
        {
            frontier_phi_8_5_ladder = _399;
            frontier_phi_8_5_ladder_1 = _397;
            frontier_phi_8_5_ladder_2 = _394;
        }
        _425 = frontier_phi_8_5_ladder_2;
        _427 = frontier_phi_8_5_ladder_1;
        _429 = frontier_phi_8_5_ladder;
    }
    else
    {
        float frontier_phi_8_6_ladder;
        float frontier_phi_8_6_ladder_1;
        float frontier_phi_8_6_ladder_2;
        if (_372 < 0.0)
        {
            float _426 = ((-0.0) - _376) / _372;
            float frontier_phi_8_6_ladder_9_ladder;
            float frontier_phi_8_6_ladder_9_ladder_1;
            float frontier_phi_8_6_ladder_9_ladder_2;
            if (_426 < _394)
            {
                frontier_phi_8_6_ladder_9_ladder = fract(_426 * _366) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_1 = (fract((_426 * _371) + _375) + cbMtdParam._m0[18u].w) * 0.16666667163372039794921875;
                frontier_phi_8_6_ladder_9_ladder_2 = _426;
            }
            else
            {
                frontier_phi_8_6_ladder_9_ladder = _399;
                frontier_phi_8_6_ladder_9_ladder_1 = _397;
                frontier_phi_8_6_ladder_9_ladder_2 = _394;
            }
            frontier_phi_8_6_ladder = frontier_phi_8_6_ladder_9_ladder;
            frontier_phi_8_6_ladder_1 = frontier_phi_8_6_ladder_9_ladder_1;
            frontier_phi_8_6_ladder_2 = frontier_phi_8_6_ladder_9_ladder_2;
        }
        else
        {
            frontier_phi_8_6_ladder = _399;
            frontier_phi_8_6_ladder_1 = _397;
            frontier_phi_8_6_ladder_2 = _394;
        }
        _425 = frontier_phi_8_6_ladder_2;
        _427 = frontier_phi_8_6_ladder_1;
        _429 = frontier_phi_8_6_ladder;
    }
    float _433 = (_366 > 0.0) ? (cbMtdParam._m0[18u].z / _366) : 5000.0;
    float _446;
    float _447;
    if (_433 < _425)
    {
        _446 = ((_375 + cbMtdParam._m0[18u].w) + (_433 * _371)) * 0.16666667163372039794921875;
        _447 = (((_433 * _372) + _376) * 0.16666667163372039794921875) + 0.16666667163372039794921875;
    }
    else
    {
        _446 = _427;
        _447 = _429;
    }
    vec4 _449 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_5, SS_DiffuseMap), vec2(_446, _447));
    float _2630 = isnan(0.0) ? cbMtdParam._m0[17u].z : (isnan(cbMtdParam._m0[17u].z) ? 0.0 : max(cbMtdParam._m0[17u].z, 0.0));
    float _463 = isnan(1.0) ? _2630 : (isnan(_2630) ? 1.0 : min(_2630, 1.0));
    float _2641 = isnan(0.0) ? cbMtdParam._m0[17u].y : (isnan(cbMtdParam._m0[17u].y) ? 0.0 : max(cbMtdParam._m0[17u].y, 0.0));
    float _506 = ((_463 - ((1.0 - (isnan(1.0) ? _2641 : (isnan(_2641) ? 1.0 : min(_2641, 1.0)))) * (_463 + 1.0))) + (((cbMtdParam._m0[18u].y * texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_13, SS_WrapLinear), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD_4.x) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_4.y) + cbTextureTilingScale._m0[3u].w)).x) + (cbMtdParam._m0[17u].x * texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_12, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD.z) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD.w) + cbTextureTilingScale._m0[2u].w)).x)) / cbMtdParam._m0[17u].w)) / _463;
    float _2652 = isnan(0.0) ? _506 : (isnan(_506) ? 0.0 : max(_506, 0.0));
    float _507 = isnan(1.0) ? _2652 : (isnan(_2652) ? 1.0 : min(_2652, 1.0));
    float _509 = 3.0 - (_507 * 2.0);
    float _514 = _507 * _507;
    float _542 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _546 = inversesqrt(dot(vec3(_268, _269, _270), vec3(_268, _269, _270)));
    float _547 = _268 * _546;
    float _548 = _269 * _546;
    float _549 = _270 * _546;
    float _555 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _556 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    vec4 _565 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(_555 * cbSceneParam._m0[86u].x, _556 * cbSceneParam._m0[86u].y));
    float _568 = _565.x * TEXCOORD_4.z;
    float _569 = (-0.0) - _547;
    float _570 = (-0.0) - _548;
    float _571 = (-0.0) - _549;
    float _593 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _597 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _601 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _740;
    float _741;
    float _742;
    float _743;
    float _744;
    float _745;
    float _746;
    float _747;
    float _748;
    float _749;
    float _750;
    float _751;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _663 = (cbModelParam._m0[37u].x * ((((fma(_601, cbModelParam._m0[26u].z, fma(_597, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _593)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _665 = (cbModelParam._m0[37u].y * ((((fma(_601, cbModelParam._m0[27u].z, fma(_597, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _593)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _666 = (((((fma(_601, cbModelParam._m0[28u].z, fma(_597, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _593)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _669 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_663, _665, _666), 0.0);
        vec4 _676 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_663, _665, _666), 0.0);
        vec4 _683 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_663, _665, _666), 0.0);
        vec4 _690 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_663, _665, _666), 0.0);
        float _703 = exp2((_669.w + (-0.5)) * 20.0) * 2.0;
        float _713 = exp2((_676.w + (-0.5)) * 20.0) * 2.0;
        float _723 = exp2((_683.w + (-0.5)) * 20.0) * 2.0;
        float _733 = exp2((_690.w + (-0.5)) * 20.0) * 2.0;
        float _734 = _733 * (_690.x + (-0.5));
        float _735 = _733 * (_690.y + (-0.5));
        float _736 = _733 * (_690.z + (-0.5));
        _740 = _703 * (_669.z + (-0.5));
        _741 = _703 * (_669.y + (-0.5));
        _742 = _703 * (_669.x + (-0.5));
        _743 = _713 * (_676.z + (-0.5));
        _744 = _713 * (_676.y + (-0.5));
        _745 = _713 * (_676.x + (-0.5));
        _746 = _723 * (_683.z + (-0.5));
        _747 = _723 * (_683.y + (-0.5));
        _748 = _723 * (_683.x + (-0.5));
        _749 = isnan(0.0) ? _736 : (isnan(_736) ? 0.0 : max(_736, 0.0));
        _750 = isnan(0.0) ? _735 : (isnan(_735) ? 0.0 : max(_735, 0.0));
        _751 = isnan(0.0) ? _734 : (isnan(_734) ? 0.0 : max(_734, 0.0));
    }
    else
    {
        _740 = _396;
        _741 = _396;
        _742 = _396;
        _743 = _396;
        _744 = _396;
        _745 = _396;
        _746 = _396;
        _747 = _396;
        _748 = _396;
        _749 = _396;
        _750 = _396;
        _751 = _396;
    }
    float _879;
    float _880;
    float _881;
    float _882;
    float _883;
    float _884;
    float _885;
    float _886;
    float _887;
    float _888;
    float _889;
    float _890;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _805 = (cbModelParam._m0[38u].x * ((((fma(_601, cbModelParam._m0[30u].z, fma(_597, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _593)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _806 = (cbModelParam._m0[38u].y * ((((fma(_601, cbModelParam._m0[31u].z, fma(_597, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _593)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _807 = (((((fma(_601, cbModelParam._m0[32u].z, fma(_597, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _593)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _809 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_805, _806, _807), 0.0);
        vec4 _816 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_805, _806, _807), 0.0);
        vec4 _823 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_805, _806, _807), 0.0);
        vec4 _830 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_805, _806, _807), 0.0);
        float _842 = exp2((_809.w + (-0.5)) * 20.0) * 2.0;
        float _852 = exp2((_816.w + (-0.5)) * 20.0) * 2.0;
        float _862 = exp2((_823.w + (-0.5)) * 20.0) * 2.0;
        float _872 = exp2((_830.w + (-0.5)) * 20.0) * 2.0;
        float _873 = _872 * (_830.x + (-0.5));
        float _874 = _872 * (_830.y + (-0.5));
        float _875 = _872 * (_830.z + (-0.5));
        _879 = _842 * (_809.z + (-0.5));
        _880 = _842 * (_809.y + (-0.5));
        _881 = _842 * (_809.x + (-0.5));
        _882 = _852 * (_816.z + (-0.5));
        _883 = _852 * (_816.y + (-0.5));
        _884 = _852 * (_816.x + (-0.5));
        _885 = _862 * (_823.z + (-0.5));
        _886 = _862 * (_823.y + (-0.5));
        _887 = _862 * (_823.x + (-0.5));
        _888 = isnan(0.0) ? _875 : (isnan(_875) ? 0.0 : max(_875, 0.0));
        _889 = isnan(0.0) ? _874 : (isnan(_874) ? 0.0 : max(_874, 0.0));
        _890 = isnan(0.0) ? _873 : (isnan(_873) ? 0.0 : max(_873, 0.0));
    }
    else
    {
        _879 = _396;
        _880 = _396;
        _881 = _396;
        _882 = _396;
        _883 = _396;
        _884 = _396;
        _885 = _396;
        _886 = _396;
        _887 = _396;
        _888 = _396;
        _889 = _396;
        _890 = _396;
    }
    float _905 = _547 * (-0.5);
    float _906 = _548 * (-0.5);
    float _907 = _549 * (-0.5);
    float _908 = dot(vec4(_905, _906, _907, 1.0), vec4(_881, _884, _887, _890));
    float _911 = dot(vec4(_905, _906, _907, 1.0), vec4(_880, _883, _886, _889));
    float _914 = dot(vec4(_905, _906, _907, 1.0), vec4(_879, _882, _885, _888));
    float _949;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _921 = dot(vec4(_905, _906, _907, 1.0), vec4(_740, _743, _746, _749));
        float _925 = dot(vec4(_905, _906, _907, 1.0), vec4(_741, _744, _747, _750));
        float _929 = dot(vec4(_905, _906, _907, 1.0), vec4(_742, _745, _748, _751));
        float _936 = dot(vec4(cbModelParam._m0[39u]), vec4(_905, _906, _907, 1.0));
        _949 = dot(vec3(isnan(0.0) ? _929 : (isnan(_929) ? 0.0 : max(_929, 0.0)), isnan(0.0) ? _925 : (isnan(_925) ? 0.0 : max(_925, 0.0)), isnan(0.0) ? _921 : (isnan(_921) ? 0.0 : max(_921, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_936) ? 0.0 : (isnan(0.0) ? _936 : max(0.0, _936))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _949 = 1.0;
    }
    float _960;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _951 = dot(vec4(cbModelParam._m0[40u]), vec4(_905, _906, _907, 1.0));
        _960 = dot(vec3(isnan(0.0) ? _908 : (isnan(_908) ? 0.0 : max(_908, 0.0)), isnan(0.0) ? _911 : (isnan(_911) ? 0.0 : max(_911, 0.0)), isnan(0.0) ? _914 : (isnan(_914) ? 0.0 : max(_914, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_951) ? 0.0 : (isnan(0.0) ? _951 : max(0.0, _951))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _960 = 1.0;
    }
    float _964 = (_960 * cbModelParam._m0[1u].x) + (_949 * (1.0 - cbModelParam._m0[1u].x));
    float _970 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1052;
    float _1054;
    float _1056;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1019 = fma(_601, cbModelParam._m0[13u].z, fma(_597, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _593)) + cbModelParam._m0[13u].w;
        float _1023 = fma(_601, cbModelParam._m0[14u].z, fma(_597, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _593)) + cbModelParam._m0[14u].w;
        float _1027 = fma(_601, cbModelParam._m0[15u].z, fma(_597, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _593)) + cbModelParam._m0[15u].w;
        float _1030 = fma(_571, cbModelParam._m0[13u].z, fma(_570, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _569));
        float _1033 = fma(_571, cbModelParam._m0[14u].z, fma(_570, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _569));
        float _1036 = fma(_571, cbModelParam._m0[15u].z, fma(_570, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _569));
        float _1062;
        if (_1030 > 0.0)
        {
            _1062 = abs((1.0 - _1019) / _1030);
        }
        else
        {
            float frontier_phi_26_24_ladder;
            if (_1030 < 0.0)
            {
                frontier_phi_26_24_ladder = abs((_1019 + 1.0) / _1030);
            }
            else
            {
                frontier_phi_26_24_ladder = 5000.0;
            }
            _1062 = frontier_phi_26_24_ladder;
        }
        float _1251;
        if (_1033 > 0.0)
        {
            _1251 = abs((1.0 - _1023) / _1033);
        }
        else
        {
            float frontier_phi_35_31_ladder;
            if (_1033 < 0.0)
            {
                frontier_phi_35_31_ladder = abs((_1023 + 1.0) / _1033);
            }
            else
            {
                frontier_phi_35_31_ladder = 5000.0;
            }
            _1251 = frontier_phi_35_31_ladder;
        }
        float _1606;
        if (_1036 > 0.0)
        {
            _1606 = abs((1.0 - _1027) / _1036);
        }
        else
        {
            float frontier_phi_47_42_ladder;
            if (_1036 < 0.0)
            {
                frontier_phi_47_42_ladder = abs((_1027 + 1.0) / _1036);
            }
            else
            {
                frontier_phi_47_42_ladder = 5000.0;
            }
            _1606 = frontier_phi_47_42_ladder;
        }
        float _1608 = isnan(_1251) ? _1062 : (isnan(_1062) ? _1251 : min(_1062, _1251));
        float _1609 = isnan(_1606) ? _1608 : (isnan(_1608) ? _1606 : min(_1608, _1606));
        float _1613 = (_1609 * _1030) + _1019;
        float _1614 = (_1609 * _1033) + _1023;
        float _1615 = (_1609 * _1036) + _1027;
        float _1616 = _1609 * 9.9999997473787516355514526367188e-05;
        float _1618 = (-1.0) - _1616;
        float _1620 = _1616 + 1.0;
        float frontier_phi_25_47_ladder;
        float frontier_phi_25_47_ladder_1;
        float frontier_phi_25_47_ladder_2;
        if ((_1615 > _1620) || ((_1615 < _1618) || ((_1614 > _1620) || ((_1614 < _1618) || ((_1613 < _1618) || (_1613 > _1620))))))
        {
            frontier_phi_25_47_ladder = 0.0;
            frontier_phi_25_47_ladder_1 = 0.0;
            frontier_phi_25_47_ladder_2 = 0.0;
        }
        else
        {
            vec4 _1849 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1615, cbModelParam._m0[9u].z, fma(_1614, cbModelParam._m0[9u].y, _1613 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1615, cbModelParam._m0[10u].z, fma(_1614, cbModelParam._m0[10u].y, _1613 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1615, cbModelParam._m0[11u].z, fma(_1614, cbModelParam._m0[11u].y, _1613 * cbModelParam._m0[11u].x))), _970);
            frontier_phi_25_47_ladder = _1849.z * cbModelParam._m0[1u].y;
            frontier_phi_25_47_ladder_1 = _1849.y * cbModelParam._m0[1u].y;
            frontier_phi_25_47_ladder_2 = _1849.x * cbModelParam._m0[1u].y;
        }
        _1052 = frontier_phi_25_47_ladder_2;
        _1054 = frontier_phi_25_47_ladder_1;
        _1056 = frontier_phi_25_47_ladder;
    }
    else
    {
        vec4 _1040 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_569, _570, _571), _970);
        _1052 = _1040.x * cbModelParam._m0[1u].y;
        _1054 = _1040.y * cbModelParam._m0[1u].y;
        _1056 = _1040.z * cbModelParam._m0[1u].y;
    }
    float _1059 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1148;
    float _1150;
    float _1152;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1112 = fma(_601, cbModelParam._m0[21u].z, fma(_597, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _593)) + cbModelParam._m0[21u].w;
        float _1116 = fma(_601, cbModelParam._m0[22u].z, fma(_597, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _593)) + cbModelParam._m0[22u].w;
        float _1120 = fma(_601, cbModelParam._m0[23u].z, fma(_597, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _593)) + cbModelParam._m0[23u].w;
        float _1123 = fma(_571, cbModelParam._m0[21u].z, fma(_570, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _569));
        float _1126 = fma(_571, cbModelParam._m0[22u].z, fma(_570, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _569));
        float _1129 = fma(_571, cbModelParam._m0[23u].z, fma(_570, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _569));
        float _1256;
        if (_1123 > 0.0)
        {
            _1256 = abs((1.0 - _1112) / _1123);
        }
        else
        {
            float frontier_phi_37_33_ladder;
            if (_1123 < 0.0)
            {
                frontier_phi_37_33_ladder = abs((_1112 + 1.0) / _1123);
            }
            else
            {
                frontier_phi_37_33_ladder = 5000.0;
            }
            _1256 = frontier_phi_37_33_ladder;
        }
        float _1633;
        if (_1126 > 0.0)
        {
            _1633 = abs((1.0 - _1116) / _1126);
        }
        else
        {
            float frontier_phi_49_44_ladder;
            if (_1126 < 0.0)
            {
                frontier_phi_49_44_ladder = abs((_1116 + 1.0) / _1126);
            }
            else
            {
                frontier_phi_49_44_ladder = 5000.0;
            }
            _1633 = frontier_phi_49_44_ladder;
        }
        float _1964;
        if (_1129 > 0.0)
        {
            _1964 = abs((1.0 - _1120) / _1129);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1129 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1120 + 1.0) / _1129);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _1964 = frontier_phi_61_56_ladder;
        }
        float _1966 = isnan(_1633) ? _1256 : (isnan(_1256) ? _1633 : min(_1256, _1633));
        float _1967 = isnan(_1964) ? _1966 : (isnan(_1966) ? _1964 : min(_1966, _1964));
        float _1971 = (_1967 * _1123) + _1112;
        float _1972 = (_1967 * _1126) + _1116;
        float _1973 = (_1967 * _1129) + _1120;
        float _1974 = _1967 * 9.9999997473787516355514526367188e-05;
        float _1975 = (-1.0) - _1974;
        float _1977 = _1974 + 1.0;
        float frontier_phi_34_61_ladder;
        float frontier_phi_34_61_ladder_1;
        float frontier_phi_34_61_ladder_2;
        if ((_1973 > _1977) || ((_1973 < _1975) || ((_1972 > _1977) || ((_1972 < _1975) || ((_1971 < _1975) || (_1971 > _1977))))))
        {
            frontier_phi_34_61_ladder = 0.0;
            frontier_phi_34_61_ladder_1 = 0.0;
            frontier_phi_34_61_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2079 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_1973, cbModelParam._m0[17u].z, fma(_1972, cbModelParam._m0[17u].y, _1971 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_1973, cbModelParam._m0[18u].z, fma(_1972, cbModelParam._m0[18u].y, _1971 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_1973, cbModelParam._m0[19u].z, fma(_1972, cbModelParam._m0[19u].y, _1971 * cbModelParam._m0[19u].x))), _1059);
            frontier_phi_34_61_ladder = _2079.y * cbModelParam._m0[1u].z;
            frontier_phi_34_61_ladder_1 = _2079.z * cbModelParam._m0[1u].z;
            frontier_phi_34_61_ladder_2 = _2079.x * cbModelParam._m0[1u].z;
        }
        _1148 = frontier_phi_34_61_ladder_2;
        _1150 = frontier_phi_34_61_ladder;
        _1152 = frontier_phi_34_61_ladder_1;
    }
    else
    {
        vec4 _1132 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_569, _570, _571), _1059);
        _1148 = _1132.x * cbModelParam._m0[1u].z;
        _1150 = _1132.y * cbModelParam._m0[1u].z;
        _1152 = _1132.z * cbModelParam._m0[1u].z;
    }
    float _1164 = _568 * 0.01200000010430812835693359375;
    float _1166 = _1164 * ((cbModelParam._m0[1u].w * (_1148 - _1052)) + _1052);
    float _1167 = _1164 * ((cbModelParam._m0[1u].w * (_1150 - _1054)) + _1054);
    float _1168 = _1164 * ((cbModelParam._m0[1u].w * (_1152 - _1056)) + _1056);
    float _1189 = fma(_1168, cbSceneParam._m0[89u].z, fma(_1167, cbSceneParam._m0[89u].y, _1166 * cbSceneParam._m0[89u].x));
    float _1192 = fma(_1168, cbSceneParam._m0[90u].z, fma(_1167, cbSceneParam._m0[90u].y, _1166 * cbSceneParam._m0[90u].x));
    float _1195 = fma(_1168, cbSceneParam._m0[91u].z, fma(_1167, cbSceneParam._m0[91u].y, _1166 * cbSceneParam._m0[91u].x));
    float _1230 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1234 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1238 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1242 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1243 = _1230 / _1242;
    float _1244 = _1234 / _1242;
    float _1245 = _1238 / _1242;
    float _1393;
    float _1394;
    float _1395;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1272 = ((uint(_1245 > cbSceneParam._m0[59u].y) + uint(_1245 > cbSceneParam._m0[59u].x)) + uint(_1245 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1273 = _1272 + 43u;
        uint _1281 = _1272 + 44u;
        uint _1289 = _1272 + 45u;
        uint _1297 = _1272 + 46u;
        float _1308 = fma(_1242, cbSceneParam._m0[_1273].w, fma(_1238, cbSceneParam._m0[_1273].z, fma(_1234, cbSceneParam._m0[_1273].y, _1230 * cbSceneParam._m0[_1273].x)));
        float _1312 = fma(_1242, cbSceneParam._m0[_1281].w, fma(_1238, cbSceneParam._m0[_1281].z, fma(_1234, cbSceneParam._m0[_1281].y, _1230 * cbSceneParam._m0[_1281].x)));
        float _1320 = fma(_1242, cbSceneParam._m0[_1297].w, fma(_1238, cbSceneParam._m0[_1297].z, fma(_1234, cbSceneParam._m0[_1297].y, _1230 * cbSceneParam._m0[_1297].x)));
        float _1325 = cbSceneParam._m0[33u].z * _1320;
        float _1327 = cbSceneParam._m0[33u].w * _1320;
        float _1330 = fma(_1242, cbSceneParam._m0[_1289].w, fma(_1238, cbSceneParam._m0[_1289].z, fma(_1234, cbSceneParam._m0[_1289].y, _1230 * cbSceneParam._m0[_1289].x))) / _1320;
        float _1378 = (cbSceneParam._m0[33u].x - sqrt(((_1244 * _1244) + (_1243 * _1243)) + (_1245 * _1245))) * cbSceneParam._m0[33u].y;
        float _2778 = isnan(0.0) ? _1378 : (isnan(_1378) ? 0.0 : max(_1378, 0.0));
        float _1386 = (isnan(1.0) ? _2778 : (isnan(_2778) ? 1.0 : min(_2778, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1325 + _1308) / _1320, (_1327 + _1312) / _1320), _1330), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1327 + _1308) / _1320, (_1312 - _1325) / _1320), _1330), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1308 - _1325) / _1320, (_1312 - _1327) / _1320), _1330), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1308 - _1327) / _1320, (_1325 + _1312) / _1320), _1330), 0.0)).x), vec4(0.25)));
        _1393 = 1.0 - (_1386 * cbSceneParam._m0[34u].x);
        _1394 = 1.0 - (_1386 * cbSceneParam._m0[34u].y);
        _1395 = 1.0 - (_1386 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1393 = 1.0;
        _1394 = 1.0;
        _1395 = 1.0;
    }
    float _1459;
    float _1461;
    float _1463;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1447 = fma(_1242, cbSceneParam._m0[63u].w, fma(_1238, cbSceneParam._m0[63u].z, fma(_1234, cbSceneParam._m0[63u].y, _1230 * cbSceneParam._m0[63u].x)));
        float _1448 = fma(_1242, cbSceneParam._m0[60u].w, fma(_1238, cbSceneParam._m0[60u].z, fma(_1234, cbSceneParam._m0[60u].y, _1230 * cbSceneParam._m0[60u].x))) / _1447;
        float _1449 = fma(_1242, cbSceneParam._m0[61u].w, fma(_1238, cbSceneParam._m0[61u].z, fma(_1234, cbSceneParam._m0[61u].y, _1230 * cbSceneParam._m0[61u].x))) / _1447;
        float frontier_phi_46_45_ladder;
        float frontier_phi_46_45_ladder_1;
        float frontier_phi_46_45_ladder_2;
        if ((((_1448 >= cbSceneParam._m0[64u].x) && (_1449 >= cbSceneParam._m0[64u].y)) && (_1448 <= cbSceneParam._m0[64u].z)) && (_1449 <= cbSceneParam._m0[64u].w))
        {
            float _1646 = fma(_1242, cbSceneParam._m0[62u].w, fma(_1238, cbSceneParam._m0[62u].z, fma(_1234, cbSceneParam._m0[62u].y, _1230 * cbSceneParam._m0[62u].x))) / _1447;
            float _1650 = isnan(cbSceneParam._m0[41u].w) ? _1646 : (isnan(_1646) ? cbSceneParam._m0[41u].w : max(_1646, cbSceneParam._m0[41u].w));
            float _1693 = (cbSceneParam._m0[33u].x - sqrt(((_1244 * _1244) + (_1243 * _1243)) + (_1245 * _1245))) * cbSceneParam._m0[33u].y;
            float _2794 = isnan(0.0) ? _1693 : (isnan(_1693) ? 0.0 : max(_1693, 0.0));
            float _1700 = (isnan(1.0) ? _2794 : (isnan(_2794) ? 1.0 : min(_2794, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1448, cbSceneParam._m0[33u].w + _1449), _1650), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1448, _1449 - cbSceneParam._m0[33u].z), _1650), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1448 - cbSceneParam._m0[33u].z, _1449 - cbSceneParam._m0[33u].w), _1650), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1448 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1449), _1650), 0.0)).x), vec4(0.25)));
            float _1704 = 1.0 - (_1700 * cbSceneParam._m0[34u].x);
            float _1705 = 1.0 - (_1700 * cbSceneParam._m0[34u].y);
            float _1706 = 1.0 - (_1700 * cbSceneParam._m0[34u].z);
            frontier_phi_46_45_ladder = isnan(_1706) ? _1395 : (isnan(_1395) ? _1706 : min(_1395, _1706));
            frontier_phi_46_45_ladder_1 = isnan(_1705) ? _1394 : (isnan(_1394) ? _1705 : min(_1394, _1705));
            frontier_phi_46_45_ladder_2 = isnan(_1704) ? _1393 : (isnan(_1393) ? _1704 : min(_1393, _1704));
        }
        else
        {
            frontier_phi_46_45_ladder = _1395;
            frontier_phi_46_45_ladder_1 = _1394;
            frontier_phi_46_45_ladder_2 = _1393;
        }
        _1459 = frontier_phi_46_45_ladder_2;
        _1461 = frontier_phi_46_45_ladder_1;
        _1463 = frontier_phi_46_45_ladder;
    }
    else
    {
        _1459 = _1393;
        _1461 = _1394;
        _1463 = _1395;
    }
    uint _1465 = uint(roundEven(NORMAL.w)) * 13u;
    uvec4 _1470 = floatBitsToUint(cbInstanceData._m0[_1465 + 5u]);
    uint _1472 = _1470.x * 14u;
    uint _1473 = _1472 + 13u;
    float _1478 = _568 + (-1.0);
    float _1481 = (cbLight._m0[_1473].x * _1478) + 1.0;
    float _1482 = (cbLight._m0[_1473].y * _1478) + 1.0;
    uint _1483 = _1472 + 8u;
    float _1494 = cbLight._m0[_1472].x + _547;
    float _1495 = cbLight._m0[_1472].y + _548;
    float _1496 = cbLight._m0[_1472].z + _549;
    float _1500 = inversesqrt(dot(vec3(_1494, _1495, _1496), vec3(_1494, _1495, _1496)));
    float _1504 = dot(vec3(0.0), vec3(cbLight._m0[_1472].xyz));
    float _2820 = isnan(0.0) ? _1504 : (isnan(_1504) ? 0.0 : max(_1504, 0.0));
    float _1507 = isnan(1.0) ? _2820 : (isnan(_2820) ? 1.0 : min(_2820, 1.0));
    float _1508 = dot(vec3(0.0), vec3(_547, _548, _549));
    float _2831 = isnan(0.0) ? _1508 : (isnan(_1508) ? 0.0 : max(_1508, 0.0));
    float _1511 = isnan(1.0) ? _2831 : (isnan(_2831) ? 1.0 : min(_2831, 1.0));
    float _1512 = dot(vec3(cbLight._m0[_1472].xyz), vec3(_1494 * _1500, _1495 * _1500, _1496 * _1500));
    float _2842 = isnan(0.0) ? _1512 : (isnan(_1512) ? 0.0 : max(_1512, 0.0));
    float _1523 = (exp2(log2(1.0 - (isnan(1.0) ? _2842 : (isnan(_2842) ? 1.0 : min(_2842, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1529 = (0.5 / ((_1507 + 9.9999999392252902907785028219223e-09) + _1511)) * _1507;
    float _2853 = isnan(0.0) ? _1529 : (isnan(_1529) ? 0.0 : max(_1529, 0.0));
    float _1531 = (isnan(1.0) ? _2853 : (isnan(_2853) ? 1.0 : min(_2853, 1.0))) * 0.31831014156341552734375;
    float _1533 = isnan(1.0) ? _1481 : (isnan(_1481) ? 1.0 : min(_1481, 1.0));
    uint _1546 = _1472 + 9u;
    uint _1552 = _1472 | 1u;
    float _1558 = cbLight._m0[_1552].x + _547;
    float _1559 = cbLight._m0[_1552].y + _548;
    float _1560 = cbLight._m0[_1552].z + _549;
    float _1564 = inversesqrt(dot(vec3(_1558, _1559, _1560), vec3(_1558, _1559, _1560)));
    float _1568 = dot(vec3(0.0), vec3(cbLight._m0[_1552].xyz));
    float _2869 = isnan(0.0) ? _1568 : (isnan(_1568) ? 0.0 : max(_1568, 0.0));
    float _1571 = isnan(1.0) ? _2869 : (isnan(_2869) ? 1.0 : min(_2869, 1.0));
    float _1572 = dot(vec3(cbLight._m0[_1552].xyz), vec3(_1558 * _1564, _1559 * _1564, _1560 * _1564));
    float _2880 = isnan(0.0) ? _1572 : (isnan(_1572) ? 0.0 : max(_1572, 0.0));
    float _1581 = (exp2(log2(1.0 - (isnan(1.0) ? _2880 : (isnan(_2880) ? 1.0 : min(_2880, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1585 = (0.5 / ((_1571 + 9.9999999392252902907785028219223e-09) + _1511)) * _1571;
    float _2891 = isnan(0.0) ? _1585 : (isnan(_1585) ? 0.0 : max(_1585, 0.0));
    float _1587 = (isnan(1.0) ? _2891 : (isnan(_2891) ? 1.0 : min(_2891, 1.0))) * 0.31831014156341552734375;
    float _1588 = isnan(1.0) ? _1482 : (isnan(_1482) ? 1.0 : min(_1482, 1.0));
    float _1598 = (((_1581 * cbLight._m0[_1546].x) * _1587) * _1588) + ((((cbLight._m0[_1483].x * _1459) * _1523) * _1531) * _1533);
    float _1599 = (((_1581 * cbLight._m0[_1546].y) * _1587) * _1588) + ((((cbLight._m0[_1483].y * _1461) * _1523) * _1531) * _1533);
    float _1600 = (((_1581 * cbLight._m0[_1546].z) * _1587) * _1588) + ((((cbLight._m0[_1483].z * _1463) * _1523) * _1531) * _1533);
    float _1764;
    float _1766;
    float _1768;
    if (_1470.y == 0u)
    {
        uvec4 _1718 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1719 = _1718.x;
        uint _1730 = uint((float(_1718.y) * floor(float(uint(cbSceneParam._m0[85u].y * _556) / _1719))) + floor(float(uint(cbSceneParam._m0[85u].x * _555) / _1719)));
        float _1740 = (log2(_1245 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _1741 = isnan(0.0) ? _1740 : (isnan(_1740) ? 0.0 : max(_1740, 0.0));
        uint _1744 = uint(isnan(14.0) ? _1741 : (isnan(_1741) ? 14.0 : min(_1741, 14.0)));
        uvec4 _1749 = texelFetch(g_lightClusterGridBuffer, int(((_1744 << 2u) + (_1730 << 6u)) >> 2u));
        uint _1750 = _1749.x;
        uint _1751 = _1718.z;
        float _1858;
        float _1860;
        float _1862;
        if (((((1u << ((_1751 >> 4u) & 15u)) + 4294967295u) & _1750) == 0u) || ((_1751 & 240u) == 0u))
        {
            _1858 = 0.0;
            _1860 = 0.0;
            _1862 = 0.0;
        }
        else
        {
            float _1859;
            float _1861;
            float _1863;
            float _2010 = 0.0;
            float _2011 = 0.0;
            float _2012 = 0.0;
            uint _2013 = 0u;
            uint _2022;
            bool _2023;
            for (;;)
            {
                _2022 = texelFetch(g_lightClassification, int((((_1744 << 5u) + (_1730 << 9u)) + (_2013 << 2u)) >> 2u)).x;
                _2023 = _2022 == 0u;
                float frontier_phi_70_pred;
                float frontier_phi_70_pred_1;
                float frontier_phi_70_pred_2;
                if (_2023)
                {
                    frontier_phi_70_pred = _2012;
                    frontier_phi_70_pred_1 = _2011;
                    frontier_phi_70_pred_2 = _2010;
                }
                else
                {
                    float _2146;
                    float _2147;
                    float _2148;
                    uint _2149;
                    _2146 = _2010;
                    _2147 = _2011;
                    _2148 = _2012;
                    _2149 = _2022;
                    float _2084;
                    float _2085;
                    float _2086;
                    for (;;)
                    {
                        uint _2153 = uint(findLSB(_2149)) + (_2013 << 5u);
                        uint _2150 = (_2149 + 4294967295u) & _2149;
                        uint _2155 = _2153 * 48u;
                        vec4 _2169 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2155)).x, texelFetch(g_PointLightRenderingBuffer, int(_2155 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2155 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2155 + 3u)).x));
                        uint _2186 = (_2153 * 48u) + 8u;
                        vec3 _2197 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2186)).x, texelFetch(g_PointLightRenderingBuffer, int(_2186 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2186 + 2u)).x));
                        float _2201 = _2169.x - _1243;
                        float _2202 = _2169.y - _1244;
                        float _2203 = _2169.z - _1245;
                        float _2204 = dot(vec3(_2201, _2202, _2203), vec3(_2201, _2202, _2203));
                        float _2207 = inversesqrt(_2204);
                        float _2216 = 1.0 - (_2204 * _2169.w);
                        float _2917 = isnan(0.0) ? _2216 : (isnan(_2216) ? 0.0 : max(_2216, 0.0));
                        float _2218 = sqrt(_2204) * uintBitsToFloat(uvec4(_2176, _2177, _2178, texelFetch(g_PointLightRenderingBuffer, int(((_2153 * 48u) + 4u) + 3u)).x)).w;
                        float _2221 = 1.39999997615814208984375 / (_2218 + 1.39999997615814208984375);
                        float _2222 = _2221 * _2221;
                        float _2225 = ((1.0 - _2222) * dot(vec3(0.0), vec3(_2207 * _2201, _2207 * _2202, _2207 * _2203))) + _2222;
                        float _2227 = (-0.0) - _1243;
                        float _2228 = (-0.0) - _1244;
                        float _2229 = (-0.0) - _1245;
                        float _2233 = inversesqrt(dot(vec3(_2227, _2228, _2229), vec3(_2227, _2228, _2229)));
                        float _2237 = dot(vec3(0.0), vec3(_2233 * _2227, _2233 * _2228, _2233 * _2229));
                        float _2928 = isnan(0.0) ? _2237 : (isnan(_2237) ? 0.0 : max(_2237, 0.0));
                        float _2939 = isnan(0.0) ? _2225 : (isnan(_2225) ? 0.0 : max(_2225, 0.0));
                        float _2241 = isnan(1.0) ? _2939 : (isnan(_2939) ? 1.0 : min(_2939, 1.0));
                        float _2245 = (0.5 / (((isnan(1.0) ? _2928 : (isnan(_2928) ? 1.0 : min(_2928, 1.0))) + 9.9999999392252902907785028219223e-09) + _2241)) * _2241;
                        float _2950 = isnan(0.0) ? _2245 : (isnan(_2245) ? 0.0 : max(_2245, 0.0));
                        float _2254 = (((isnan(1.0) ? _2950 : (isnan(_2950) ? 1.0 : min(_2950, 1.0))) * 3.1415927410125732421875) / (((_2218 * _2218) * 2.1991131305694580078125) + 3.141590118408203125)) * (isnan(1.0) ? _2917 : (isnan(_2917) ? 1.0 : min(_2917, 1.0)));
                        _2084 = (_2254 * _2197.x) + _2146;
                        _2085 = (_2254 * _2197.y) + _2147;
                        _2086 = (_2254 * _2197.z) + _2148;
                        if (_2150 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2146 = _2084;
                            _2147 = _2085;
                            _2148 = _2086;
                            _2149 = _2150;
                        }
                    }
                    frontier_phi_70_pred = _2086;
                    frontier_phi_70_pred_1 = _2085;
                    frontier_phi_70_pred_2 = _2084;
                }
                _1863 = frontier_phi_70_pred;
                _1861 = frontier_phi_70_pred_1;
                _1859 = frontier_phi_70_pred_2;
                uint _2014 = _2013 + 1u;
                if (_2014 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2010 = _1859;
                    _2011 = _1861;
                    _2012 = _1863;
                    _2013 = _2014;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _1858 = _1859;
            _1860 = _1861;
            _1862 = _1863;
        }
        uvec4 _1866 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _1867 = _1866.z;
        uint _1869 = (_1867 >> 8u) & 15u;
        float _1990;
        float _1992;
        float _1994;
        if (((4294967295u << _1869) & _1750) == 0u)
        {
            _1990 = _1858;
            _1992 = _1860;
            _1994 = _1862;
        }
        else
        {
            float _2006 = inversesqrt(dot(vec3(_1243, _1244, _1245), vec3(_1243, _1244, _1245)));
            float frontier_phi_63_64_ladder;
            float frontier_phi_63_64_ladder_1;
            float frontier_phi_63_64_ladder_2;
            if (_1869 < ((_1867 >> 12u) & 15u))
            {
                float _1991;
                float _1993;
                float _1995;
                float _2132 = _1858;
                float _2133 = _1860;
                float _2134 = _1862;
                uint _2135 = _1869;
                uint _2144;
                bool _2145;
                for (;;)
                {
                    _2144 = texelFetch(g_lightClassification, int((((_1744 << 5u) + (_1730 << 9u)) + (_2135 << 2u)) >> 2u)).x;
                    _2145 = _2144 == 0u;
                    float frontier_phi_76_pred;
                    float frontier_phi_76_pred_1;
                    float frontier_phi_76_pred_2;
                    if (_2145)
                    {
                        frontier_phi_76_pred = _2132;
                        frontier_phi_76_pred_1 = _2134;
                        frontier_phi_76_pred_2 = _2133;
                    }
                    else
                    {
                        float _2259;
                        float _2260;
                        float _2261;
                        float _2482;
                        float _2483;
                        float _2484;
                        float _2269 = _2132;
                        float _2270 = _2133;
                        float _2271 = _2134;
                        uint _2272 = _2144;
                        uint _2273;
                        uint _2283;
                        vec4 _2298;
                        float _2299;
                        vec3 _2311;
                        vec4 _2327;
                        vec4 _2343;
                        float _2389;
                        bool _2390;
                        for (;;)
                        {
                            _2283 = ((_2135 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2272));
                            _2273 = (_2272 + 4294967295u) & _2272;
                            uint _2285 = _2283 * 40u;
                            _2298 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2285)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2285 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2285 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2285 + 3u)).x));
                            _2299 = _2298.w;
                            uint _2301 = (_2283 * 40u) + 8u;
                            _2311 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2301)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2301 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2301 + 2u)).x));
                            uint _2314 = (_2283 * 40u) + 16u;
                            _2327 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2314)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2314 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2314 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2314 + 3u)).x));
                            uint _2330 = (_2283 * 40u) + 20u;
                            _2343 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2330)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2330 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2330 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2330 + 3u)).x));
                            uint _2345 = (_2283 * 40u) + 24u;
                            vec4 _2358 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2345)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2345 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2345 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2345 + 3u)).x));
                            uint _2364 = (_2283 * 40u) + 28u;
                            vec4 _2377 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2364)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2364 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2364 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2364 + 3u)).x));
                            _2389 = fma(_1245, _2377.z, fma(_1244, _2377.y, _2377.x * _1243)) + _2377.w;
                            _2390 = !((fma(_1245, _2358.z, fma(_1244, _2358.y, _2358.x * _1243)) + _2358.w) <= 0.0);
                            float frontier_phi_82_pred;
                            float frontier_phi_82_pred_1;
                            float frontier_phi_82_pred_2;
                            if (_2390)
                            {
                                float _2424 = _2298.x - _1243;
                                float _2425 = _2298.y - _1244;
                                float _2426 = _2298.z - _1245;
                                float _2427 = dot(vec3(_2424, _2425, _2426), vec3(_2424, _2425, _2426));
                                float _2430 = inversesqrt(_2427);
                                float _2437 = 1.0 - (_2427 / (_2299 * _2299));
                                float _2961 = isnan(0.0) ? _2437 : (isnan(_2437) ? 0.0 : max(_2437, 0.0));
                                float _2439 = sqrt(_2427) * uintBitsToFloat(uvec4(_2393, _2394, _2395, texelFetch(g_SpotLightRenderingBuffer, int(((_2283 * 40u) + 4u) + 3u)).x)).w;
                                float _2441 = 1.39999997615814208984375 / (_2439 + 1.39999997615814208984375);
                                float _2442 = _2441 * _2441;
                                float _2445 = (fma(_1245, _2327.z, fma(_1244, _2327.y, _2327.x * _1243)) + _2327.w) / _2389;
                                float _2446 = (fma(_1245, _2343.z, fma(_1244, _2343.y, _2343.x * _1243)) + _2343.w) / _2389;
                                float _2450 = 1.0 - dot(vec2(_2445, _2446), vec2(_2445, _2446));
                                float _2972 = isnan(0.0) ? _2450 : (isnan(_2450) ? 0.0 : max(_2450, 0.0));
                                float _2458 = dot(vec3(0.0), vec3((-0.0) - (_1243 * _2006), (-0.0) - (_1244 * _2006), (-0.0) - (_1245 * _2006)));
                                float _2983 = isnan(0.0) ? _2458 : (isnan(_2458) ? 0.0 : max(_2458, 0.0));
                                float _2466 = ((1.0 - _2442) * dot(vec3(0.0), vec3(_2430 * _2424, _2430 * _2425, _2430 * _2426))) + _2442;
                                float _2994 = isnan(0.0) ? _2466 : (isnan(_2466) ? 0.0 : max(_2466, 0.0));
                                float _2467 = isnan(1.0) ? _2994 : (isnan(_2994) ? 1.0 : min(_2994, 1.0));
                                float _2471 = (0.5 / (((isnan(1.0) ? _2983 : (isnan(_2983) ? 1.0 : min(_2983, 1.0))) + 9.9999999392252902907785028219223e-09) + _2467)) * _2467;
                                float _3005 = isnan(0.0) ? _2471 : (isnan(_2471) ? 0.0 : max(_2471, 0.0));
                                float _2478 = ((isnan(1.0) ? _2972 : (isnan(_2972) ? 1.0 : min(_2972, 1.0))) * (isnan(1.0) ? _2961 : (isnan(_2961) ? 1.0 : min(_2961, 1.0)))) * (((isnan(1.0) ? _3005 : (isnan(_3005) ? 1.0 : min(_3005, 1.0))) * 3.1415927410125732421875) / (((_2439 * _2439) * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_82_pred = _2478 * _2311.z;
                                frontier_phi_82_pred_1 = _2478 * _2311.y;
                                frontier_phi_82_pred_2 = _2478 * _2311.x;
                            }
                            else
                            {
                                frontier_phi_82_pred = 0.0;
                                frontier_phi_82_pred_1 = 0.0;
                                frontier_phi_82_pred_2 = 0.0;
                            }
                            _2484 = frontier_phi_82_pred;
                            _2483 = frontier_phi_82_pred_1;
                            _2482 = frontier_phi_82_pred_2;
                            _2259 = _2482 + _2269;
                            _2260 = _2483 + _2270;
                            _2261 = _2484 + _2271;
                            if (_2273 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2269 = _2259;
                                _2270 = _2260;
                                _2271 = _2261;
                                _2272 = _2273;
                                continue;
                            }
                        }
                        frontier_phi_76_pred = _2259;
                        frontier_phi_76_pred_1 = _2261;
                        frontier_phi_76_pred_2 = _2260;
                    }
                    _1991 = frontier_phi_76_pred;
                    _1995 = frontier_phi_76_pred_1;
                    _1993 = frontier_phi_76_pred_2;
                    uint _2136 = _2135 + 1u;
                    if (_2136 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2132 = _1991;
                        _2133 = _1993;
                        _2134 = _1995;
                        _2135 = _2136;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_63_64_ladder = _1995;
                frontier_phi_63_64_ladder_1 = _1993;
                frontier_phi_63_64_ladder_2 = _1991;
            }
            else
            {
                frontier_phi_63_64_ladder = _1862;
                frontier_phi_63_64_ladder_1 = _1860;
                frontier_phi_63_64_ladder_2 = _1858;
            }
            _1990 = frontier_phi_63_64_ladder_2;
            _1992 = frontier_phi_63_64_ladder_1;
            _1994 = frontier_phi_63_64_ladder;
        }
        float _1999 = isnan(1.0) ? _568 : (isnan(_568) ? 1.0 : min(_568, 1.0));
        _1764 = ((_1990 * 0.039999999105930328369140625) * _1999) + _1598;
        _1766 = ((_1992 * 0.039999999105930328369140625) * _1999) + _1599;
        _1768 = ((_1994 * 0.039999999105930328369140625) * _1999) + _1600;
    }
    else
    {
        _1764 = _1598;
        _1766 = _1599;
        _1768 = _1600;
    }
    uint _1775 = (_1465 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _1790 = (((((_514 * (cbMtdParam._m0[15u].x - cbMtdParam._m0[13u].x)) * _509) + cbMtdParam._m0[13u].x) * _449.x) * cbInstanceData._m0[_1775].x) + ((_1764 + ((isnan(0.0) ? _1189 : (isnan(_1189) ? 0.0 : max(_1189, 0.0))) * _964)) * cbPerFrame._m0[3u].x);
    float _1791 = (((((_514 * (cbMtdParam._m0[15u].y - cbMtdParam._m0[13u].y)) * _509) + cbMtdParam._m0[13u].y) * _449.y) * cbInstanceData._m0[_1775].y) + ((_1766 + ((isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0))) * _964)) * cbPerFrame._m0[3u].x);
    float _1792 = (((((_514 * (cbMtdParam._m0[15u].z - cbMtdParam._m0[13u].z)) * _509) + cbMtdParam._m0[13u].z) * _449.z) * cbInstanceData._m0[_1775].z) + ((_1768 + ((isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0))) * _964)) * cbPerFrame._m0[3u].x);
    uint _1796 = _1465 + 6u;
    float _1804 = _555 / cbSceneParam._m0[86u].x;
    float _1805 = _556 / cbSceneParam._m0[86u].y;
    vec4 _1819 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1804, _1805, (log2((isnan(cbSceneParam._m0[77u].w) ? _542 : (isnan(_542) ? cbSceneParam._m0[77u].w : min(_542, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _1821 = _1819.x;
    float _1822 = _1819.y;
    float _1823 = _1819.z;
    float _1824 = _1819.w;
    float _1914;
    float _1916;
    float _1918;
    float _1920;
    if (_542 > cbSceneParam._m0[78u].w)
    {
        float _1877 = isnan(_542) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _542 : min(cbSceneParam._m0[80u].w, _542));
        float _1878 = _1877 / _542;
        float _1889 = _1878 * _268;
        float _1890 = _269 * _1878;
        float _1891 = (-0.0) - _1890;
        float _1892 = _1878 * _270;
        float _1894 = (cbSceneParam._m0[77u].w * _1891) / _1877;
        float _1895 = _1894 + cbSceneParam._m0[79u].w;
        float _1896 = cbSceneParam._m0[79u].w - _1890;
        float _1902 = sqrt(((_1889 * _1889) + (_1890 * _1890)) + (_1892 * _1892));
        float _1905 = (1.0 - (cbSceneParam._m0[77u].w / _1877)) * _1902;
        float _1910 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _1912 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2094;
        if (abs((_1891 - _1894) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2094 = ((((_1895 > 0.0) ? exp2(_1910 * _1895) : (2.0 - exp2(_1912 * _1895))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _1905;
        }
        else
        {
            float _2036 = 1.0 / cbSceneParam._m0[80u].x;
            float _2037 = isnan(_1896) ? _1895 : (isnan(_1895) ? _1896 : max(_1895, _1896));
            float _2038 = isnan(_1896) ? _1895 : (isnan(_1895) ? _1896 : min(_1895, _1896));
            float _2047 = isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : min(_2037, 0.0));
            float _2048 = isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : min(_2038, 0.0));
            _2094 = ((abs(_1902 / _1891) * cbSceneParam._m0[80u].y) * ((((_2047 - _2048) * 2.0) - ((exp2(_1910 * (isnan(0.0) ? _2037 : (isnan(_2037) ? 0.0 : max(_2037, 0.0)))) - exp2(_1910 * (isnan(0.0) ? _2038 : (isnan(_2038) ? 0.0 : max(_2038, 0.0))))) * _2036)) - ((exp2(_1912 * _2047) - exp2(_1912 * _2048)) * _2036))) + (_1905 * cbSceneParam._m0[80u].z);
        }
        vec4 _2096 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_1804, _1805, 1.0), 0.0);
        float _2105 = exp2((_2094 * (-1.44269502162933349609375)) * (1.0 - _2096.w));
        float _2106 = log2(_2105);
        float _2122 = log2(_1824);
        _1914 = (exp2(_2122 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2106 * cbSceneParam._m0[78u].x)) * _2096.x) / cbSceneParam._m0[78u].x)) + _1821;
        _1916 = (exp2(_2122 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2106 * cbSceneParam._m0[78u].y)) * _2096.y) / cbSceneParam._m0[78u].y)) + _1822;
        _1918 = (exp2(_2122 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2106 * cbSceneParam._m0[78u].z)) * _2096.z) / cbSceneParam._m0[78u].z)) + _1823;
        _1920 = _2105 * _1824;
    }
    else
    {
        _1914 = _1821;
        _1916 = _1822;
        _1918 = _1823;
        _1920 = _1824;
    }
    float _1932 = roundEven(cbMatDynParam._m0[0u].y);
    bool _1933 = _1932 == 3.0;
    float _1934 = log2(_1920);
    float _1941 = exp2(_1934 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _1790 : (isnan(_1790) ? 0.0 : max(_1790, 0.0)));
    float _1942 = exp2(_1934 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _1791 : (isnan(_1791) ? 0.0 : max(_1791, 0.0)));
    float _1943 = exp2(_1934 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0)));
    float _1952 = (_1932 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _1952 * (_1933 ? _1941 : (_1941 + (cbSceneParam._m0[72u].w * _1914)));
    SV_Target.y = _1952 * (_1933 ? _1942 : (_1942 + (cbSceneParam._m0[72u].w * _1916)));
    SV_Target.z = _1952 * (_1933 ? _1943 : (_1943 + (cbSceneParam._m0[72u].w * _1918)));
    SV_Target.w = cbInstanceData._m0[_1796].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_1796].w;
}


