#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _833;
float _3052;
float _3053;
float _3054;
float _3055;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _184 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _185 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _186 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _191 = inversesqrt(dot(vec3(_184, _185, _186), vec3(_184, _185, _186)));
    float _198 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _202 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _250 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _260 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _250);
    float _261 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _250);
    float _262 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _250);
    vec4 _281 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _316 = cbMtdParam._m0[24u].x + _260;
    float _317 = cbMtdParam._m0[24u].y + _261;
    float _318 = cbMtdParam._m0[24u].z + _262;
    float _335 = (-0.0) - dot(vec3(_316, _317, _318), vec3(_191 * _184, _191 * _185, _191 * _186));
    float _336 = (-0.0) - dot(vec3(_316, _317, _318), vec3(_202 * TANGENT.x, _202 * TANGENT.y, _202 * TANGENT.z));
    float _337 = (-0.0) - dot(vec3(_316, _317, _318), vec3((-0.0) - (NORMAL.x * _198), (-0.0) - (NORMAL.y * _198), (-0.0) - (NORMAL.z * _198)));
    float _341 = inversesqrt(dot(vec3(_335, _336, _337), vec3(_335, _336, _337)));
    float _344 = _341 * _337;
    float _347 = ((_341 * _335) + (((_281.x * 2.0) + (-1.0)) * cbMtdParam._m0[22u].x)) * cbMtdParam._m0[20u].w;
    float _348 = ((_341 * _336) + (((_281.y * 2.0) + (-1.0)) * cbMtdParam._m0[22u].y)) * cbMtdParam._m0[20u].z;
    float _349 = fract(TEXCOORD.x);
    float _350 = fract(TEXCOORD.y);
    float _356;
    if (_347 > 0.0)
    {
        _356 = (1.0 - _349) / _347;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_347 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _349) / _347;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _356 = frontier_phi_3_2_ladder;
    }
    float _364;
    if (_348 > 0.0)
    {
        _364 = (1.0 - _350) / _348;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_348 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _350) / _348;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _364 = frontier_phi_7_6_ladder;
    }
    float _368 = (_344 > 0.0) ? (cbMtdParam._m0[16u].x / _344) : 5000.0;
    float _369 = isnan(_364) ? _356 : (isnan(_356) ? _364 : min(_356, _364));
    float _370 = isnan(_368) ? _369 : (isnan(_369) ? _368 : min(_369, _368));
    float _374 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _381 = ((_370 * _344) + _374) / _374;
    vec4 _406 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * ((((((_349 + (-0.5)) + (_370 * _347)) / _381) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * ((((((_350 + (-0.5)) + (_370 * _348)) / _381) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    float _416 = cbMtdParam._m0[9u].x * _406.x;
    float _417 = cbMtdParam._m0[9u].y * _406.y;
    float _418 = cbMtdParam._m0[9u].z * _406.z;
    float _3074 = isnan(0.0) ? _416 : (isnan(_416) ? 0.0 : max(_416, 0.0));
    float _3085 = isnan(0.0) ? _417 : (isnan(_417) ? 0.0 : max(_417, 0.0));
    float _3096 = isnan(0.0) ? _418 : (isnan(_418) ? 0.0 : max(_418, 0.0));
    float _437 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _441 = inversesqrt(dot(vec3(_260, _261, _262), vec3(_260, _261, _262)));
    float _442 = _260 * _441;
    float _443 = _261 * _441;
    float _444 = _262 * _441;
    vec4 _449 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(gl_FragCoord.x * 0.125, gl_FragCoord.y * 0.125));
    float _451 = _449.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _547 = sqrt(((_260 * _260) + (_261 * _261)) + (_262 * _262));
        float _553 = (cbMatDynParam._m0[5u].x * _547) + cbMatDynParam._m0[5u].y;
        float _3107 = isnan(0.0) ? _553 : (isnan(_553) ? 0.0 : max(_553, 0.0));
        float _554 = isnan(1.0) ? _3107 : (isnan(_3107) ? 1.0 : min(_3107, 1.0));
        float _558 = (cbMatDynParam._m0[5u].z * _547) + cbMatDynParam._m0[5u].w;
        float _3118 = isnan(0.0) ? _558 : (isnan(_558) ? 0.0 : max(_558, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _3118 : (isnan(_3118) ? 1.0 : min(_3118, 1.0))) - _554)) + _554) < ((_451 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _463 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _464 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    uint _477 = uint(roundEven(NORMAL.w)) * 13u;
    uint _479 = _477 + 9u;
    uint _480 = _479 + uint(cbMatDynParam._m0[0u].w);
    float _486 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3074 : (isnan(_3074) ? 1.0 : min(_3074, 1.0)))) * cbInstanceData._m0[_480].x;
    float _487 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3085 : (isnan(_3085) ? 1.0 : min(_3085, 1.0)))) * cbInstanceData._m0[_480].y;
    float _488 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3096 : (isnan(_3096) ? 1.0 : min(_3096, 1.0)))) * cbInstanceData._m0[_480].z;
    float _3129 = isnan(0.0) ? _486 : (isnan(_486) ? 0.0 : max(_486, 0.0));
    float _489 = isnan(1.0) ? _3129 : (isnan(_3129) ? 1.0 : min(_3129, 1.0));
    float _3140 = isnan(0.0) ? _487 : (isnan(_487) ? 0.0 : max(_487, 0.0));
    float _490 = isnan(1.0) ? _3140 : (isnan(_3140) ? 1.0 : min(_3140, 1.0));
    float _3151 = isnan(0.0) ? _488 : (isnan(_488) ? 0.0 : max(_488, 0.0));
    float _491 = isnan(1.0) ? _3151 : (isnan(_3151) ? 1.0 : min(_3151, 1.0));
    vec4 _500 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _463, cbSceneParam._m0[86u].y * _464));
    float _503 = _500.x * TEXCOORD_4.z;
    float _504 = (-0.0) - _442;
    float _505 = (-0.0) - _443;
    float _506 = (-0.0) - _444;
    float _528 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _532 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _536 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _832;
    float _834;
    float _835;
    float _836;
    float _837;
    float _838;
    float _839;
    float _840;
    float _841;
    float _842;
    float _843;
    float _844;
    float _845;
    float _846;
    float _847;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _620 = (cbModelParam._m0[37u].x * ((((fma(_536, cbModelParam._m0[26u].z, fma(_532, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _528)) + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _622 = (cbModelParam._m0[37u].y * ((((fma(_536, cbModelParam._m0[27u].z, fma(_532, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _528)) + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _623 = (((((fma(_536, cbModelParam._m0[28u].z, fma(_532, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _528)) + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _626 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_620, _622, _623), 0.0);
        vec4 _633 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_620, _622, _623), 0.0);
        vec4 _640 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_620, _622, _623), 0.0);
        vec4 _647 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_620, _622, _623), 0.0);
        float _660 = exp2((_626.w + (-0.5)) * 20.0) * 2.0;
        float _661 = _660 * (_626.x + (-0.5));
        float _662 = _660 * (_626.y + (-0.5));
        float _663 = _660 * (_626.z + (-0.5));
        float _670 = exp2((_633.w + (-0.5)) * 20.0) * 2.0;
        float _671 = _670 * (_633.x + (-0.5));
        float _672 = _670 * (_633.y + (-0.5));
        float _673 = _670 * (_633.z + (-0.5));
        float _680 = exp2((_640.w + (-0.5)) * 20.0) * 2.0;
        float _681 = _680 * (_640.x + (-0.5));
        float _682 = _680 * (_640.y + (-0.5));
        float _683 = _680 * (_640.z + (-0.5));
        float _690 = exp2((_647.w + (-0.5)) * 20.0) * 2.0;
        float _691 = _690 * (_647.x + (-0.5));
        float _692 = _690 * (_647.y + (-0.5));
        float _693 = _690 * (_647.z + (-0.5));
        float _694 = isnan(0.0) ? _691 : (isnan(_691) ? 0.0 : max(_691, 0.0));
        float _695 = isnan(0.0) ? _692 : (isnan(_692) ? 0.0 : max(_692, 0.0));
        float _696 = isnan(0.0) ? _693 : (isnan(_693) ? 0.0 : max(_693, 0.0));
        float _697 = _661 * 0.5;
        float _698 = _671 * 0.5;
        float _699 = _681 * 0.5;
        float _700 = dot(vec3(_697, _698, _699), vec3(_697, _698, _699));
        float _705 = (_700 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_700);
        float _714 = (dot(vec3(0.0), vec3(_705 * _697, _705 * _698, _705 * _699)) + 1.0) * 0.5;
        float _3177 = isnan(0.0) ? _714 : (isnan(_714) ? 0.0 : max(_714, 0.0));
        float _724 = sqrt(((_698 * _698) + (_697 * _697)) + (_699 * _699)) / (_694 + 9.9999997473787516355514526367188e-06);
        float _3188 = isnan(0.0) ? _724 : (isnan(_724) ? 0.0 : max(_724, 0.0));
        float _725 = isnan(1.0) ? _3188 : (isnan(_3188) ? 1.0 : min(_3188, 1.0));
        float _726 = _725 * 2.0;
        float _730 = (1.0 - _725) / (_725 + 1.0);
        float _3199 = isnan(0.0) ? _730 : (isnan(_730) ? 0.0 : max(_730, 0.0));
        float _731 = isnan(1.0) ? _3199 : (isnan(_3199) ? 1.0 : min(_3199, 1.0));
        float _740 = ((((1.0 - _731) * (_726 + 2.0)) * exp2(log2(isnan(1.0) ? _3177 : (isnan(_3177) ? 1.0 : min(_3177, 1.0))) * (_726 + 1.0))) + _731) * _694;
        float _741 = _662 * 0.5;
        float _742 = _672 * 0.5;
        float _743 = _682 * 0.5;
        float _744 = dot(vec3(_741, _742, _743), vec3(_741, _742, _743));
        float _749 = (_744 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_744);
        float _757 = (dot(vec3(0.0), vec3(_749 * _741, _749 * _742, _749 * _743)) + 1.0) * 0.5;
        float _3210 = isnan(0.0) ? _757 : (isnan(_757) ? 0.0 : max(_757, 0.0));
        float _766 = sqrt(((_742 * _742) + (_741 * _741)) + (_743 * _743)) / (_695 + 9.9999997473787516355514526367188e-06);
        float _3221 = isnan(0.0) ? _766 : (isnan(_766) ? 0.0 : max(_766, 0.0));
        float _767 = isnan(1.0) ? _3221 : (isnan(_3221) ? 1.0 : min(_3221, 1.0));
        float _768 = _767 * 2.0;
        float _772 = (1.0 - _767) / (_767 + 1.0);
        float _3232 = isnan(0.0) ? _772 : (isnan(_772) ? 0.0 : max(_772, 0.0));
        float _773 = isnan(1.0) ? _3232 : (isnan(_3232) ? 1.0 : min(_3232, 1.0));
        float _782 = ((((1.0 - _773) * (_768 + 2.0)) * exp2(log2(isnan(1.0) ? _3210 : (isnan(_3210) ? 1.0 : min(_3210, 1.0))) * (_768 + 1.0))) + _773) * _695;
        float _783 = _663 * 0.5;
        float _784 = _673 * 0.5;
        float _785 = _683 * 0.5;
        float _786 = dot(vec3(_783, _784, _785), vec3(_783, _784, _785));
        float _791 = (_786 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_786);
        float _799 = (dot(vec3(0.0), vec3(_791 * _783, _791 * _784, _791 * _785)) + 1.0) * 0.5;
        float _3243 = isnan(0.0) ? _799 : (isnan(_799) ? 0.0 : max(_799, 0.0));
        float _808 = sqrt(((_784 * _784) + (_783 * _783)) + (_785 * _785)) / (_696 + 9.9999997473787516355514526367188e-06);
        float _3254 = isnan(0.0) ? _808 : (isnan(_808) ? 0.0 : max(_808, 0.0));
        float _809 = isnan(1.0) ? _3254 : (isnan(_3254) ? 1.0 : min(_3254, 1.0));
        float _810 = _809 * 2.0;
        float _814 = (1.0 - _809) / (_809 + 1.0);
        float _3265 = isnan(0.0) ? _814 : (isnan(_814) ? 0.0 : max(_814, 0.0));
        float _815 = isnan(1.0) ? _3265 : (isnan(_3265) ? 1.0 : min(_3265, 1.0));
        float _824 = ((((1.0 - _815) * (_810 + 2.0)) * exp2(log2(isnan(1.0) ? _3243 : (isnan(_3243) ? 1.0 : min(_3243, 1.0))) * (_810 + 1.0))) + _815) * _696;
        _832 = _663;
        _834 = _662;
        _835 = _661;
        _836 = _673;
        _837 = _672;
        _838 = _671;
        _839 = _683;
        _840 = _682;
        _841 = _681;
        _842 = _696;
        _843 = _695;
        _844 = _694;
        _845 = cbModelParam._m0[36u].z * (isnan(0.0) ? _740 : (isnan(_740) ? 0.0 : max(_740, 0.0)));
        _846 = cbModelParam._m0[36u].z * (isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0)));
        _847 = cbModelParam._m0[36u].z * (isnan(0.0) ? _824 : (isnan(_824) ? 0.0 : max(_824, 0.0)));
    }
    else
    {
        _832 = _833;
        _834 = _833;
        _835 = _833;
        _836 = _833;
        _837 = _833;
        _838 = _833;
        _839 = _833;
        _840 = _833;
        _841 = _833;
        _842 = _833;
        _843 = _833;
        _844 = _833;
        _845 = 0.0;
        _846 = 0.0;
        _847 = 0.0;
    }
    float _1111;
    float _1112;
    float _1113;
    float _1114;
    float _1115;
    float _1116;
    float _1117;
    float _1118;
    float _1119;
    float _1120;
    float _1121;
    float _1122;
    float _1123;
    float _1124;
    float _1125;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _904 = (cbModelParam._m0[38u].x * ((((fma(_536, cbModelParam._m0[30u].z, fma(_532, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _528)) + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _905 = (cbModelParam._m0[38u].y * ((((fma(_536, cbModelParam._m0[31u].z, fma(_532, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _528)) + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + uintBitsToFloat(0x7fc00000u /* nan */);
        float _906 = (((((fma(_536, cbModelParam._m0[32u].z, fma(_532, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _528)) + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + uintBitsToFloat(0x7fc00000u /* nan */);
        vec4 _908 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_904, _905, _906), 0.0);
        vec4 _915 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_904, _905, _906), 0.0);
        vec4 _922 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_904, _905, _906), 0.0);
        vec4 _929 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_904, _905, _906), 0.0);
        float _941 = exp2((_908.w + (-0.5)) * 20.0) * 2.0;
        float _942 = _941 * (_908.x + (-0.5));
        float _943 = _941 * (_908.y + (-0.5));
        float _944 = _941 * (_908.z + (-0.5));
        float _951 = exp2((_915.w + (-0.5)) * 20.0) * 2.0;
        float _952 = _951 * (_915.x + (-0.5));
        float _953 = _951 * (_915.y + (-0.5));
        float _954 = _951 * (_915.z + (-0.5));
        float _961 = exp2((_922.w + (-0.5)) * 20.0) * 2.0;
        float _962 = _961 * (_922.x + (-0.5));
        float _963 = _961 * (_922.y + (-0.5));
        float _964 = _961 * (_922.z + (-0.5));
        float _971 = exp2((_929.w + (-0.5)) * 20.0) * 2.0;
        float _972 = _971 * (_929.x + (-0.5));
        float _973 = _971 * (_929.y + (-0.5));
        float _974 = _971 * (_929.z + (-0.5));
        float _975 = isnan(0.0) ? _972 : (isnan(_972) ? 0.0 : max(_972, 0.0));
        float _976 = isnan(0.0) ? _973 : (isnan(_973) ? 0.0 : max(_973, 0.0));
        float _977 = isnan(0.0) ? _974 : (isnan(_974) ? 0.0 : max(_974, 0.0));
        float _978 = _942 * 0.5;
        float _979 = _952 * 0.5;
        float _980 = _962 * 0.5;
        float _981 = dot(vec3(_978, _979, _980), vec3(_978, _979, _980));
        float _986 = (_981 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_981);
        float _994 = (dot(vec3(0.0), vec3(_986 * _978, _986 * _979, _986 * _980)) + 1.0) * 0.5;
        float _3306 = isnan(0.0) ? _994 : (isnan(_994) ? 0.0 : max(_994, 0.0));
        float _1003 = sqrt(((_979 * _979) + (_978 * _978)) + (_980 * _980)) / (_975 + 9.9999997473787516355514526367188e-06);
        float _3317 = isnan(0.0) ? _1003 : (isnan(_1003) ? 0.0 : max(_1003, 0.0));
        float _1004 = isnan(1.0) ? _3317 : (isnan(_3317) ? 1.0 : min(_3317, 1.0));
        float _1005 = _1004 * 2.0;
        float _1009 = (1.0 - _1004) / (_1004 + 1.0);
        float _3328 = isnan(0.0) ? _1009 : (isnan(_1009) ? 0.0 : max(_1009, 0.0));
        float _1010 = isnan(1.0) ? _3328 : (isnan(_3328) ? 1.0 : min(_3328, 1.0));
        float _1019 = ((((1.0 - _1010) * (_1005 + 2.0)) * exp2(log2(isnan(1.0) ? _3306 : (isnan(_3306) ? 1.0 : min(_3306, 1.0))) * (_1005 + 1.0))) + _1010) * _975;
        float _1020 = _943 * 0.5;
        float _1021 = _953 * 0.5;
        float _1022 = _963 * 0.5;
        float _1023 = dot(vec3(_1020, _1021, _1022), vec3(_1020, _1021, _1022));
        float _1028 = (_1023 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1023);
        float _1036 = (dot(vec3(0.0), vec3(_1028 * _1020, _1028 * _1021, _1028 * _1022)) + 1.0) * 0.5;
        float _3339 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1045 = sqrt(((_1021 * _1021) + (_1020 * _1020)) + (_1022 * _1022)) / (_976 + 9.9999997473787516355514526367188e-06);
        float _3350 = isnan(0.0) ? _1045 : (isnan(_1045) ? 0.0 : max(_1045, 0.0));
        float _1046 = isnan(1.0) ? _3350 : (isnan(_3350) ? 1.0 : min(_3350, 1.0));
        float _1047 = _1046 * 2.0;
        float _1051 = (1.0 - _1046) / (_1046 + 1.0);
        float _3361 = isnan(0.0) ? _1051 : (isnan(_1051) ? 0.0 : max(_1051, 0.0));
        float _1052 = isnan(1.0) ? _3361 : (isnan(_3361) ? 1.0 : min(_3361, 1.0));
        float _1061 = ((((1.0 - _1052) * (_1047 + 2.0)) * exp2(log2(isnan(1.0) ? _3339 : (isnan(_3339) ? 1.0 : min(_3339, 1.0))) * (_1047 + 1.0))) + _1052) * _976;
        float _1062 = _944 * 0.5;
        float _1063 = _954 * 0.5;
        float _1064 = _964 * 0.5;
        float _1065 = dot(vec3(_1062, _1063, _1064), vec3(_1062, _1063, _1064));
        float _1070 = (_1065 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1065);
        float _1078 = (dot(vec3(0.0), vec3(_1070 * _1062, _1070 * _1063, _1070 * _1064)) + 1.0) * 0.5;
        float _3372 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1087 = sqrt(((_1063 * _1063) + (_1062 * _1062)) + (_1064 * _1064)) / (_977 + 9.9999997473787516355514526367188e-06);
        float _3383 = isnan(0.0) ? _1087 : (isnan(_1087) ? 0.0 : max(_1087, 0.0));
        float _1088 = isnan(1.0) ? _3383 : (isnan(_3383) ? 1.0 : min(_3383, 1.0));
        float _1089 = _1088 * 2.0;
        float _1093 = (1.0 - _1088) / (_1088 + 1.0);
        float _3394 = isnan(0.0) ? _1093 : (isnan(_1093) ? 0.0 : max(_1093, 0.0));
        float _1094 = isnan(1.0) ? _3394 : (isnan(_3394) ? 1.0 : min(_3394, 1.0));
        float _1103 = ((((1.0 - _1094) * (_1089 + 2.0)) * exp2(log2(isnan(1.0) ? _3372 : (isnan(_3372) ? 1.0 : min(_3372, 1.0))) * (_1089 + 1.0))) + _1094) * _977;
        _1111 = _944;
        _1112 = _943;
        _1113 = _942;
        _1114 = _954;
        _1115 = _953;
        _1116 = _952;
        _1117 = _964;
        _1118 = _963;
        _1119 = _962;
        _1120 = _977;
        _1121 = _976;
        _1122 = _975;
        _1123 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1019 : (isnan(_1019) ? 0.0 : max(_1019, 0.0)));
        _1124 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1061 : (isnan(_1061) ? 0.0 : max(_1061, 0.0)));
        _1125 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1103 : (isnan(_1103) ? 0.0 : max(_1103, 0.0)));
    }
    else
    {
        _1111 = _833;
        _1112 = _833;
        _1113 = _833;
        _1114 = _833;
        _1115 = _833;
        _1116 = _833;
        _1117 = _833;
        _1118 = _833;
        _1119 = _833;
        _1120 = _833;
        _1121 = _833;
        _1122 = _833;
        _1123 = 0.0;
        _1124 = 0.0;
        _1125 = 0.0;
    }
    float _1135 = (cbModelParam._m0[1u].x * (_1123 - _845)) + _845;
    float _1136 = (cbModelParam._m0[1u].x * (_1124 - _846)) + _846;
    float _1137 = (cbModelParam._m0[1u].x * (_1125 - _847)) + _847;
    float _1158 = fma(_1137, cbSceneParam._m0[89u].z, fma(_1136, cbSceneParam._m0[89u].y, _1135 * cbSceneParam._m0[89u].x));
    float _1161 = fma(_1137, cbSceneParam._m0[90u].z, fma(_1136, cbSceneParam._m0[90u].y, _1135 * cbSceneParam._m0[90u].x));
    float _1164 = fma(_1137, cbSceneParam._m0[91u].z, fma(_1136, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1135));
    float _1179 = _442 * (-0.5);
    float _1180 = _443 * (-0.5);
    float _1181 = _444 * (-0.5);
    float _1182 = dot(vec4(_1179, _1180, _1181, 1.0), vec4(_1113, _1116, _1119, _1122));
    float _1185 = dot(vec4(_1179, _1180, _1181, 1.0), vec4(_1112, _1115, _1118, _1121));
    float _1188 = dot(vec4(_1179, _1180, _1181, 1.0), vec4(_1111, _1114, _1117, _1120));
    float _1222;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1195 = dot(vec4(_1179, _1180, _1181, 1.0), vec4(_832, _836, _839, _842));
        float _1199 = dot(vec4(_1179, _1180, _1181, 1.0), vec4(_834, _837, _840, _843));
        float _1203 = dot(vec4(_1179, _1180, _1181, 1.0), vec4(_835, _838, _841, _844));
        float _1210 = dot(vec4(cbModelParam._m0[39u]), vec4(_1179, _1180, _1181, 1.0));
        _1222 = dot(vec3(isnan(0.0) ? _1203 : (isnan(_1203) ? 0.0 : max(_1203, 0.0)), isnan(0.0) ? _1199 : (isnan(_1199) ? 0.0 : max(_1199, 0.0)), isnan(0.0) ? _1195 : (isnan(_1195) ? 0.0 : max(_1195, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1210) ? 0.0 : (isnan(0.0) ? _1210 : max(0.0, _1210))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1222 = 1.0;
    }
    float _1233;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1224 = dot(vec4(cbModelParam._m0[40u]), vec4(_1179, _1180, _1181, 1.0));
        _1233 = dot(vec3(isnan(0.0) ? _1182 : (isnan(_1182) ? 0.0 : max(_1182, 0.0)), isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0)), isnan(0.0) ? _1188 : (isnan(_1188) ? 0.0 : max(_1188, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1224) ? 0.0 : (isnan(0.0) ? _1224 : max(0.0, _1224))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1233 = 1.0;
    }
    float _1237 = (_1233 * cbModelParam._m0[1u].x) + (_1222 * (1.0 - cbModelParam._m0[1u].x));
    float _1246 = isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? cbModelParam._m0[25u].z : min(cbModelParam._m0[25u].z, cbModelParam._m0[25u].z));
    float _1329;
    float _1331;
    float _1333;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1296 = fma(_536, cbModelParam._m0[13u].z, fma(_532, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _528)) + cbModelParam._m0[13u].w;
        float _1300 = fma(_536, cbModelParam._m0[14u].z, fma(_532, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _528)) + cbModelParam._m0[14u].w;
        float _1304 = fma(_536, cbModelParam._m0[15u].z, fma(_532, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _528)) + cbModelParam._m0[15u].w;
        float _1307 = fma(_506, cbModelParam._m0[13u].z, fma(_505, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _504));
        float _1310 = fma(_506, cbModelParam._m0[14u].z, fma(_505, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _504));
        float _1313 = fma(_506, cbModelParam._m0[15u].z, fma(_505, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _504));
        float _1339;
        if (_1307 > 0.0)
        {
            _1339 = abs((1.0 - _1296) / _1307);
        }
        else
        {
            float frontier_phi_25_23_ladder;
            if (_1307 < 0.0)
            {
                frontier_phi_25_23_ladder = abs((_1296 + 1.0) / _1307);
            }
            else
            {
                frontier_phi_25_23_ladder = 5000.0;
            }
            _1339 = frontier_phi_25_23_ladder;
        }
        float _1511;
        if (_1310 > 0.0)
        {
            _1511 = abs((1.0 - _1300) / _1310);
        }
        else
        {
            float frontier_phi_34_30_ladder;
            if (_1310 < 0.0)
            {
                frontier_phi_34_30_ladder = abs((_1300 + 1.0) / _1310);
            }
            else
            {
                frontier_phi_34_30_ladder = 5000.0;
            }
            _1511 = frontier_phi_34_30_ladder;
        }
        float _1906;
        if (_1313 > 0.0)
        {
            _1906 = abs((1.0 - _1304) / _1313);
        }
        else
        {
            float frontier_phi_46_41_ladder;
            if (_1313 < 0.0)
            {
                frontier_phi_46_41_ladder = abs((_1304 + 1.0) / _1313);
            }
            else
            {
                frontier_phi_46_41_ladder = 5000.0;
            }
            _1906 = frontier_phi_46_41_ladder;
        }
        float _1908 = isnan(_1511) ? _1339 : (isnan(_1339) ? _1511 : min(_1339, _1511));
        float _1909 = isnan(_1906) ? _1908 : (isnan(_1908) ? _1906 : min(_1908, _1906));
        float _1913 = (_1909 * _1307) + _1296;
        float _1914 = (_1909 * _1310) + _1300;
        float _1915 = (_1909 * _1313) + _1304;
        float _1916 = _1909 * 9.9999997473787516355514526367188e-05;
        float _1918 = (-1.0) - _1916;
        float _1920 = _1916 + 1.0;
        float frontier_phi_24_46_ladder;
        float frontier_phi_24_46_ladder_1;
        float frontier_phi_24_46_ladder_2;
        if ((_1915 > _1920) || ((_1915 < _1918) || ((_1914 > _1920) || ((_1914 < _1918) || ((_1913 < _1918) || (_1913 > _1920))))))
        {
            frontier_phi_24_46_ladder = 0.0;
            frontier_phi_24_46_ladder_1 = 0.0;
            frontier_phi_24_46_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2149 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_1915, cbModelParam._m0[9u].z, fma(_1914, cbModelParam._m0[9u].y, _1913 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_1915, cbModelParam._m0[10u].z, fma(_1914, cbModelParam._m0[10u].y, _1913 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_1915, cbModelParam._m0[11u].z, fma(_1914, cbModelParam._m0[11u].y, _1913 * cbModelParam._m0[11u].x))), _1246);
            frontier_phi_24_46_ladder = _2149.z * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_1 = _2149.y * cbModelParam._m0[1u].y;
            frontier_phi_24_46_ladder_2 = _2149.x * cbModelParam._m0[1u].y;
        }
        _1329 = frontier_phi_24_46_ladder_2;
        _1331 = frontier_phi_24_46_ladder_1;
        _1333 = frontier_phi_24_46_ladder;
    }
    else
    {
        vec4 _1317 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_504, _505, _506), _1246);
        _1329 = _1317.x * cbModelParam._m0[1u].y;
        _1331 = _1317.y * cbModelParam._m0[1u].y;
        _1333 = _1317.z * cbModelParam._m0[1u].y;
    }
    float _1336 = isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? cbModelParam._m0[25u].w : min(cbModelParam._m0[25u].w, cbModelParam._m0[25u].w));
    float _1426;
    float _1428;
    float _1430;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1390 = fma(_536, cbModelParam._m0[21u].z, fma(_532, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _528)) + cbModelParam._m0[21u].w;
        float _1394 = fma(_536, cbModelParam._m0[22u].z, fma(_532, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _528)) + cbModelParam._m0[22u].w;
        float _1398 = fma(_536, cbModelParam._m0[23u].z, fma(_532, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _528)) + cbModelParam._m0[23u].w;
        float _1401 = fma(_506, cbModelParam._m0[21u].z, fma(_505, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _504));
        float _1404 = fma(_506, cbModelParam._m0[22u].z, fma(_505, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _504));
        float _1407 = fma(_506, cbModelParam._m0[23u].z, fma(_505, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _504));
        float _1516;
        if (_1401 > 0.0)
        {
            _1516 = abs((1.0 - _1390) / _1401);
        }
        else
        {
            float frontier_phi_36_32_ladder;
            if (_1401 < 0.0)
            {
                frontier_phi_36_32_ladder = abs((_1390 + 1.0) / _1401);
            }
            else
            {
                frontier_phi_36_32_ladder = 5000.0;
            }
            _1516 = frontier_phi_36_32_ladder;
        }
        float _1933;
        if (_1404 > 0.0)
        {
            _1933 = abs((1.0 - _1394) / _1404);
        }
        else
        {
            float frontier_phi_48_43_ladder;
            if (_1404 < 0.0)
            {
                frontier_phi_48_43_ladder = abs((_1394 + 1.0) / _1404);
            }
            else
            {
                frontier_phi_48_43_ladder = 5000.0;
            }
            _1933 = frontier_phi_48_43_ladder;
        }
        float _2280;
        if (_1407 > 0.0)
        {
            _2280 = abs((1.0 - _1398) / _1407);
        }
        else
        {
            float frontier_phi_60_55_ladder;
            if (_1407 < 0.0)
            {
                frontier_phi_60_55_ladder = abs((_1398 + 1.0) / _1407);
            }
            else
            {
                frontier_phi_60_55_ladder = 5000.0;
            }
            _2280 = frontier_phi_60_55_ladder;
        }
        float _2282 = isnan(_1933) ? _1516 : (isnan(_1516) ? _1933 : min(_1516, _1933));
        float _2283 = isnan(_2280) ? _2282 : (isnan(_2282) ? _2280 : min(_2282, _2280));
        float _2287 = (_2283 * _1401) + _1390;
        float _2288 = (_2283 * _1404) + _1394;
        float _2289 = (_2283 * _1407) + _1398;
        float _2290 = _2283 * 9.9999997473787516355514526367188e-05;
        float _2291 = (-1.0) - _2290;
        float _2293 = _2290 + 1.0;
        float frontier_phi_33_60_ladder;
        float frontier_phi_33_60_ladder_1;
        float frontier_phi_33_60_ladder_2;
        if ((_2289 > _2293) || ((_2289 < _2291) || ((_2288 > _2293) || ((_2288 < _2291) || ((_2287 < _2291) || (_2287 > _2293))))))
        {
            frontier_phi_33_60_ladder = 0.0;
            frontier_phi_33_60_ladder_1 = 0.0;
            frontier_phi_33_60_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2423 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2289, cbModelParam._m0[17u].z, fma(_2288, cbModelParam._m0[17u].y, _2287 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2289, cbModelParam._m0[18u].z, fma(_2288, cbModelParam._m0[18u].y, _2287 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2289, cbModelParam._m0[19u].z, fma(_2288, cbModelParam._m0[19u].y, _2287 * cbModelParam._m0[19u].x))), _1336);
            frontier_phi_33_60_ladder = _2423.z * cbModelParam._m0[1u].z;
            frontier_phi_33_60_ladder_1 = _2423.y * cbModelParam._m0[1u].z;
            frontier_phi_33_60_ladder_2 = _2423.x * cbModelParam._m0[1u].z;
        }
        _1426 = frontier_phi_33_60_ladder_2;
        _1428 = frontier_phi_33_60_ladder_1;
        _1430 = frontier_phi_33_60_ladder;
    }
    else
    {
        vec4 _1410 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_504, _505, _506), _1336);
        _1426 = _1410.x * cbModelParam._m0[1u].z;
        _1428 = _1410.y * cbModelParam._m0[1u].z;
        _1430 = _1410.z * cbModelParam._m0[1u].z;
    }
    float _1442 = _503 * 0.01200000010430812835693359375;
    float _1444 = _1442 * ((cbModelParam._m0[1u].w * (_1426 - _1329)) + _1329);
    float _1445 = _1442 * ((cbModelParam._m0[1u].w * (_1428 - _1331)) + _1331);
    float _1446 = _1442 * ((cbModelParam._m0[1u].w * (_1430 - _1333)) + _1333);
    float _1449 = fma(_1446, cbSceneParam._m0[89u].z, fma(_1445, cbSceneParam._m0[89u].y, _1444 * cbSceneParam._m0[89u].x));
    float _1452 = fma(_1446, cbSceneParam._m0[90u].z, fma(_1445, cbSceneParam._m0[90u].y, _1444 * cbSceneParam._m0[90u].x));
    float _1455 = fma(_1446, cbSceneParam._m0[91u].z, fma(_1445, cbSceneParam._m0[91u].y, _1444 * cbSceneParam._m0[91u].x));
    float _1490 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1494 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1498 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1502 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1503 = _1490 / _1502;
    float _1504 = _1494 / _1502;
    float _1505 = _1498 / _1502;
    float _1653;
    float _1654;
    float _1655;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1532 = ((uint(_1505 > cbSceneParam._m0[59u].y) + uint(_1505 > cbSceneParam._m0[59u].x)) + uint(_1505 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1533 = _1532 + 43u;
        uint _1541 = _1532 + 44u;
        uint _1549 = _1532 + 45u;
        uint _1557 = _1532 + 46u;
        float _1568 = fma(_1502, cbSceneParam._m0[_1533].w, fma(_1498, cbSceneParam._m0[_1533].z, fma(_1494, cbSceneParam._m0[_1533].y, _1490 * cbSceneParam._m0[_1533].x)));
        float _1572 = fma(_1502, cbSceneParam._m0[_1541].w, fma(_1498, cbSceneParam._m0[_1541].z, fma(_1494, cbSceneParam._m0[_1541].y, _1490 * cbSceneParam._m0[_1541].x)));
        float _1580 = fma(_1502, cbSceneParam._m0[_1557].w, fma(_1498, cbSceneParam._m0[_1557].z, fma(_1494, cbSceneParam._m0[_1557].y, _1490 * cbSceneParam._m0[_1557].x)));
        float _1585 = cbSceneParam._m0[33u].z * _1580;
        float _1587 = cbSceneParam._m0[33u].w * _1580;
        float _1590 = fma(_1502, cbSceneParam._m0[_1549].w, fma(_1498, cbSceneParam._m0[_1549].z, fma(_1494, cbSceneParam._m0[_1549].y, _1490 * cbSceneParam._m0[_1549].x))) / _1580;
        float _1638 = (cbSceneParam._m0[33u].x - sqrt(((_1504 * _1504) + (_1503 * _1503)) + (_1505 * _1505))) * cbSceneParam._m0[33u].y;
        float _3520 = isnan(0.0) ? _1638 : (isnan(_1638) ? 0.0 : max(_1638, 0.0));
        float _1646 = (isnan(1.0) ? _3520 : (isnan(_3520) ? 1.0 : min(_3520, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1585 + _1568) / _1580, (_1587 + _1572) / _1580), _1590), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1587 + _1568) / _1580, (_1572 - _1585) / _1580), _1590), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1568 - _1585) / _1580, (_1572 - _1587) / _1580), _1590), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1568 - _1587) / _1580, (_1585 + _1572) / _1580), _1590), 0.0)).x), vec4(0.25)));
        _1653 = 1.0 - (_1646 * cbSceneParam._m0[34u].x);
        _1654 = 1.0 - (_1646 * cbSceneParam._m0[34u].y);
        _1655 = 1.0 - (_1646 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1653 = 1.0;
        _1654 = 1.0;
        _1655 = 1.0;
    }
    float _1719;
    float _1721;
    float _1723;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _1707 = fma(_1502, cbSceneParam._m0[63u].w, fma(_1498, cbSceneParam._m0[63u].z, fma(_1494, cbSceneParam._m0[63u].y, _1490 * cbSceneParam._m0[63u].x)));
        float _1708 = fma(_1502, cbSceneParam._m0[60u].w, fma(_1498, cbSceneParam._m0[60u].z, fma(_1494, cbSceneParam._m0[60u].y, _1490 * cbSceneParam._m0[60u].x))) / _1707;
        float _1709 = fma(_1502, cbSceneParam._m0[61u].w, fma(_1498, cbSceneParam._m0[61u].z, fma(_1494, cbSceneParam._m0[61u].y, _1490 * cbSceneParam._m0[61u].x))) / _1707;
        float frontier_phi_45_44_ladder;
        float frontier_phi_45_44_ladder_1;
        float frontier_phi_45_44_ladder_2;
        if ((((_1708 >= cbSceneParam._m0[64u].x) && (_1709 >= cbSceneParam._m0[64u].y)) && (_1708 <= cbSceneParam._m0[64u].z)) && (_1709 <= cbSceneParam._m0[64u].w))
        {
            float _1946 = fma(_1502, cbSceneParam._m0[62u].w, fma(_1498, cbSceneParam._m0[62u].z, fma(_1494, cbSceneParam._m0[62u].y, _1490 * cbSceneParam._m0[62u].x))) / _1707;
            float _1950 = isnan(cbSceneParam._m0[41u].w) ? _1946 : (isnan(_1946) ? cbSceneParam._m0[41u].w : max(_1946, cbSceneParam._m0[41u].w));
            float _1993 = (cbSceneParam._m0[33u].x - sqrt(((_1504 * _1504) + (_1503 * _1503)) + (_1505 * _1505))) * cbSceneParam._m0[33u].y;
            float _3536 = isnan(0.0) ? _1993 : (isnan(_1993) ? 0.0 : max(_1993, 0.0));
            float _2000 = (isnan(1.0) ? _3536 : (isnan(_3536) ? 1.0 : min(_3536, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _1708, cbSceneParam._m0[33u].w + _1709), _1950), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _1708, _1709 - cbSceneParam._m0[33u].z), _1950), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1708 - cbSceneParam._m0[33u].z, _1709 - cbSceneParam._m0[33u].w), _1950), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_1708 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _1709), _1950), 0.0)).x), vec4(0.25)));
            float _2004 = 1.0 - (_2000 * cbSceneParam._m0[34u].x);
            float _2005 = 1.0 - (_2000 * cbSceneParam._m0[34u].y);
            float _2006 = 1.0 - (_2000 * cbSceneParam._m0[34u].z);
            frontier_phi_45_44_ladder = isnan(_2006) ? _1655 : (isnan(_1655) ? _2006 : min(_1655, _2006));
            frontier_phi_45_44_ladder_1 = isnan(_2005) ? _1654 : (isnan(_1654) ? _2005 : min(_1654, _2005));
            frontier_phi_45_44_ladder_2 = isnan(_2004) ? _1653 : (isnan(_1653) ? _2004 : min(_1653, _2004));
        }
        else
        {
            frontier_phi_45_44_ladder = _1655;
            frontier_phi_45_44_ladder_1 = _1654;
            frontier_phi_45_44_ladder_2 = _1653;
        }
        _1719 = frontier_phi_45_44_ladder_2;
        _1721 = frontier_phi_45_44_ladder_1;
        _1723 = frontier_phi_45_44_ladder;
    }
    else
    {
        _1719 = _1653;
        _1721 = _1654;
        _1723 = _1655;
    }
    uvec4 _1728 = floatBitsToUint(cbInstanceData._m0[_477 + 5u]);
    uint _1730 = _1728.x * 14u;
    uint _1731 = _1730 + 13u;
    float _1736 = _503 + (-1.0);
    float _1739 = (cbLight._m0[_1731].x * _1736) + 1.0;
    float _1740 = (cbLight._m0[_1731].y * _1736) + 1.0;
    uint _1741 = _1730 + 5u;
    float _1747 = isnan(1.0) ? _1740 : (isnan(_1740) ? 1.0 : min(_1740, 1.0));
    uint _1751 = _1730 + 4u;
    float _1761 = isnan(1.0) ? _1739 : (isnan(_1739) ? 1.0 : min(_1739, 1.0));
    uint _1765 = _1730 | 1u;
    float _1776 = dot(vec3(cbLight._m0[_1730].xyz), vec3(0.0));
    float _1779 = dot(vec3(cbLight._m0[_1765].xyz), vec3(0.0));
    float _3572 = isnan(0.0) ? _1776 : (isnan(_1776) ? 0.0 : max(_1776, 0.0));
    float _3583 = isnan(0.0) ? _1779 : (isnan(_1779) ? 0.0 : max(_1779, 0.0));
    float _1784 = (isnan(1.0) ? _3572 : (isnan(_3572) ? 1.0 : min(_3572, 1.0))) * 0.3183098733425140380859375;
    float _1786 = (isnan(1.0) ? _3583 : (isnan(_3583) ? 1.0 : min(_3583, 1.0))) * 0.3183098733425140380859375;
    float _1793 = ((cbLight._m0[_1741].x * _1747) * _1786) + (((cbLight._m0[_1751].x * _1719) * _1761) * _1784);
    float _1794 = ((_1747 * cbLight._m0[_1741].y) * _1786) + (((cbLight._m0[_1751].y * _1721) * _1761) * _1784);
    float _1795 = ((_1747 * cbLight._m0[_1741].z) * _1786) + (((cbLight._m0[_1751].z * _1723) * _1761) * _1784);
    uint _1796 = _1730 + 8u;
    float _1802 = cbLight._m0[_1730].x + _442;
    float _1803 = cbLight._m0[_1730].y + _443;
    float _1804 = cbLight._m0[_1730].z + _444;
    float _1808 = inversesqrt(dot(vec3(_1802, _1803, _1804), vec3(_1802, _1803, _1804)));
    float _1812 = dot(vec3(0.0), vec3(cbLight._m0[_1730].xyz));
    float _3594 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
    float _1815 = isnan(1.0) ? _3594 : (isnan(_3594) ? 1.0 : min(_3594, 1.0));
    float _1816 = dot(vec3(0.0), vec3(_442, _443, _444));
    float _3605 = isnan(0.0) ? _1816 : (isnan(_1816) ? 0.0 : max(_1816, 0.0));
    float _1819 = isnan(1.0) ? _3605 : (isnan(_3605) ? 1.0 : min(_3605, 1.0));
    float _1820 = dot(vec3(cbLight._m0[_1730].xyz), vec3(_1802 * _1808, _1803 * _1808, _1804 * _1808));
    float _3616 = isnan(0.0) ? _1820 : (isnan(_1820) ? 0.0 : max(_1820, 0.0));
    float _1831 = (exp2(log2(1.0 - (isnan(1.0) ? _3616 : (isnan(_3616) ? 1.0 : min(_3616, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1837 = (0.5 / ((_1815 + 9.9999999392252902907785028219223e-09) + _1819)) * _1815;
    float _3627 = isnan(0.0) ? _1837 : (isnan(_1837) ? 0.0 : max(_1837, 0.0));
    float _1839 = (isnan(1.0) ? _3627 : (isnan(_3627) ? 1.0 : min(_3627, 1.0))) * 0.31831014156341552734375;
    uint _1853 = _1730 + 9u;
    float _1859 = cbLight._m0[_1765].x + _442;
    float _1860 = cbLight._m0[_1765].y + _443;
    float _1861 = cbLight._m0[_1765].z + _444;
    float _1865 = inversesqrt(dot(vec3(_1859, _1860, _1861), vec3(_1859, _1860, _1861)));
    float _1869 = dot(vec3(0.0), vec3(cbLight._m0[_1765].xyz));
    float _3638 = isnan(0.0) ? _1869 : (isnan(_1869) ? 0.0 : max(_1869, 0.0));
    float _1872 = isnan(1.0) ? _3638 : (isnan(_3638) ? 1.0 : min(_3638, 1.0));
    float _1873 = dot(vec3(cbLight._m0[_1765].xyz), vec3(_1859 * _1865, _1860 * _1865, _1861 * _1865));
    float _3649 = isnan(0.0) ? _1873 : (isnan(_1873) ? 0.0 : max(_1873, 0.0));
    float _1882 = (exp2(log2(1.0 - (isnan(1.0) ? _3649 : (isnan(_3649) ? 1.0 : min(_3649, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _1886 = (0.5 / ((_1872 + 9.9999999392252902907785028219223e-09) + _1819)) * _1872;
    float _3660 = isnan(0.0) ? _1886 : (isnan(_1886) ? 0.0 : max(_1886, 0.0));
    float _1888 = (isnan(1.0) ? _3660 : (isnan(_3660) ? 1.0 : min(_3660, 1.0))) * 0.31831014156341552734375;
    float _1898 = (((_1882 * cbLight._m0[_1853].x) * _1888) * _1747) + ((((cbLight._m0[_1796].x * _1719) * _1831) * _1839) * _1761);
    float _1899 = (((_1882 * cbLight._m0[_1853].y) * _1888) * _1747) + ((((cbLight._m0[_1796].y * _1721) * _1831) * _1839) * _1761);
    float _1900 = (((_1882 * cbLight._m0[_1853].z) * _1888) * _1747) + ((((cbLight._m0[_1796].z * _1723) * _1831) * _1839) * _1761);
    float _2063;
    float _2065;
    float _2067;
    float _2069;
    float _2071;
    float _2073;
    if (_1728.y == 0u)
    {
        uvec4 _2018 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2019 = _2018.x;
        uint _2030 = uint((float(_2018.y) * floor(float(uint(cbSceneParam._m0[85u].y * _464) / _2019))) + floor(float(uint(cbSceneParam._m0[85u].x * _463) / _2019)));
        float _2040 = (log2(_1505 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2041 = isnan(0.0) ? _2040 : (isnan(_2040) ? 0.0 : max(_2040, 0.0));
        uint _2044 = uint(isnan(14.0) ? _2041 : (isnan(_2041) ? 14.0 : min(_2041, 14.0)));
        uvec4 _2049 = texelFetch(g_lightClusterGridBuffer, int(((_2044 << 2u) + (_2030 << 6u)) >> 2u));
        uint _2050 = _2049.x;
        uint _2051 = _2018.z;
        float _2158;
        float _2160;
        float _2162;
        float _2164;
        float _2166;
        float _2168;
        if (((((1u << ((_2051 >> 4u) & 15u)) + 4294967295u) & _2050) == 0u) || ((_2051 & 240u) == 0u))
        {
            _2158 = 0.0;
            _2160 = 0.0;
            _2162 = 0.0;
            _2164 = 0.0;
            _2166 = 0.0;
            _2168 = 0.0;
        }
        else
        {
            float _2159;
            float _2161;
            float _2163;
            float _2165;
            float _2167;
            float _2169;
            float _2335 = 0.0;
            float _2336 = 0.0;
            float _2337 = 0.0;
            float _2338 = 0.0;
            float _2339 = 0.0;
            float _2340 = 0.0;
            uint _2341 = 0u;
            uint _2350;
            bool _2351;
            for (;;)
            {
                _2350 = texelFetch(g_lightClassification, int((((_2044 << 5u) + (_2030 << 9u)) + (_2341 << 2u)) >> 2u)).x;
                _2351 = _2350 == 0u;
                float frontier_phi_71_pred;
                float frontier_phi_71_pred_1;
                float frontier_phi_71_pred_2;
                float frontier_phi_71_pred_3;
                float frontier_phi_71_pred_4;
                float frontier_phi_71_pred_5;
                if (_2351)
                {
                    frontier_phi_71_pred = _2338;
                    frontier_phi_71_pred_1 = _2337;
                    frontier_phi_71_pred_2 = _2336;
                    frontier_phi_71_pred_3 = _2335;
                    frontier_phi_71_pred_4 = _2339;
                    frontier_phi_71_pred_5 = _2340;
                }
                else
                {
                    float _2501;
                    float _2502;
                    float _2503;
                    float _2504;
                    float _2505;
                    float _2506;
                    uint _2507;
                    _2501 = _2335;
                    _2502 = _2336;
                    _2503 = _2337;
                    _2504 = _2338;
                    _2505 = _2339;
                    _2506 = _2340;
                    _2507 = _2350;
                    float _2428;
                    float _2429;
                    float _2430;
                    float _2431;
                    float _2432;
                    float _2433;
                    for (;;)
                    {
                        uint _2511 = uint(findLSB(_2507)) + (_2341 << 5u);
                        uint _2508 = (_2507 + 4294967295u) & _2507;
                        uint _2513 = _2511 * 48u;
                        vec4 _2527 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2513)).x, texelFetch(g_PointLightRenderingBuffer, int(_2513 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2513 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2513 + 3u)).x));
                        uint _2533 = (_2511 * 48u) + 4u;
                        vec4 _2546 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2533)).x, texelFetch(g_PointLightRenderingBuffer, int(_2533 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2533 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2533 + 3u)).x));
                        uint _2552 = (_2511 * 48u) + 8u;
                        vec3 _2563 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2552)).x, texelFetch(g_PointLightRenderingBuffer, int(_2552 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2552 + 2u)).x));
                        float _2567 = _2527.x - _1503;
                        float _2568 = _2527.y - _1504;
                        float _2569 = _2527.z - _1505;
                        float _2570 = dot(vec3(_2567, _2568, _2569), vec3(_2567, _2568, _2569));
                        float _2573 = inversesqrt(_2570);
                        float _2582 = 1.0 - (_2570 * _2527.w);
                        float _3681 = isnan(0.0) ? _2582 : (isnan(_2582) ? 0.0 : max(_2582, 0.0));
                        float _2583 = isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0));
                        float _2584 = sqrt(_2570) * _2546.w;
                        float _2587 = 1.39999997615814208984375 / (_2584 + 1.39999997615814208984375);
                        float _2588 = _2587 * _2587;
                        float _2591 = ((1.0 - _2588) * dot(vec3(0.0), vec3(_2573 * _2567, _2573 * _2568, _2573 * _2569))) + _2588;
                        float _2594 = _2584 * _2584;
                        float _2598 = ((isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0))) * _2583) / ((_2594 * 0.699999988079071044921875) + 1.0);
                        float _2602 = (-0.0) - _1503;
                        float _2603 = (-0.0) - _1504;
                        float _2604 = (-0.0) - _1505;
                        float _2608 = inversesqrt(dot(vec3(_2602, _2603, _2604), vec3(_2602, _2603, _2604)));
                        float _2612 = dot(vec3(0.0), vec3(_2608 * _2602, _2608 * _2603, _2608 * _2604));
                        float _3697 = isnan(0.0) ? _2612 : (isnan(_2612) ? 0.0 : max(_2612, 0.0));
                        float _3708 = isnan(0.0) ? _2591 : (isnan(_2591) ? 0.0 : max(_2591, 0.0));
                        float _2616 = isnan(1.0) ? _3708 : (isnan(_3708) ? 1.0 : min(_3708, 1.0));
                        float _2620 = (0.5 / (((isnan(1.0) ? _3697 : (isnan(_3697) ? 1.0 : min(_3697, 1.0))) + 9.9999999392252902907785028219223e-09) + _2616)) * _2616;
                        float _3719 = isnan(0.0) ? _2620 : (isnan(_2620) ? 0.0 : max(_2620, 0.0));
                        float _2629 = (((isnan(1.0) ? _3719 : (isnan(_3719) ? 1.0 : min(_3719, 1.0))) * 3.1415927410125732421875) / ((_2594 * 2.1991131305694580078125) + 3.141590118408203125)) * _2583;
                        _2431 = (_2598 * _2546.x) + _2504;
                        _2432 = (_2598 * _2546.y) + _2505;
                        _2433 = (_2598 * _2546.z) + _2506;
                        _2428 = (_2629 * _2563.x) + _2501;
                        _2429 = (_2629 * _2563.y) + _2502;
                        _2430 = (_2629 * _2563.z) + _2503;
                        if (_2508 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2501 = _2428;
                            _2502 = _2429;
                            _2503 = _2430;
                            _2504 = _2431;
                            _2505 = _2432;
                            _2506 = _2433;
                            _2507 = _2508;
                        }
                    }
                    frontier_phi_71_pred = _2431;
                    frontier_phi_71_pred_1 = _2430;
                    frontier_phi_71_pred_2 = _2429;
                    frontier_phi_71_pred_3 = _2428;
                    frontier_phi_71_pred_4 = _2432;
                    frontier_phi_71_pred_5 = _2433;
                }
                _2165 = frontier_phi_71_pred;
                _2163 = frontier_phi_71_pred_1;
                _2161 = frontier_phi_71_pred_2;
                _2159 = frontier_phi_71_pred_3;
                _2167 = frontier_phi_71_pred_4;
                _2169 = frontier_phi_71_pred_5;
                uint _2342 = _2341 + 1u;
                if (_2342 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2335 = _2159;
                    _2336 = _2161;
                    _2337 = _2163;
                    _2338 = _2165;
                    _2339 = _2167;
                    _2340 = _2169;
                    _2341 = _2342;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2158 = _2159;
            _2160 = _2161;
            _2162 = _2163;
            _2164 = _2165;
            _2166 = _2167;
            _2168 = _2169;
        }
        uvec4 _2172 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2173 = _2172.z;
        uint _2175 = (_2173 >> 8u) & 15u;
        float _2306;
        float _2308;
        float _2310;
        float _2312;
        float _2314;
        float _2316;
        if (((4294967295u << _2175) & _2050) == 0u)
        {
            _2306 = _2158;
            _2308 = _2160;
            _2310 = _2162;
            _2312 = _2164;
            _2314 = _2166;
            _2316 = _2168;
        }
        else
        {
            float _2331 = inversesqrt(dot(vec3(_1503, _1504, _1505), vec3(_1503, _1504, _1505)));
            float frontier_phi_62_63_ladder;
            float frontier_phi_62_63_ladder_1;
            float frontier_phi_62_63_ladder_2;
            float frontier_phi_62_63_ladder_3;
            float frontier_phi_62_63_ladder_4;
            float frontier_phi_62_63_ladder_5;
            if (_2175 < ((_2173 >> 12u) & 15u))
            {
                float _2307;
                float _2309;
                float _2311;
                float _2313;
                float _2315;
                float _2317;
                float _2484 = _2158;
                float _2485 = _2160;
                float _2486 = _2162;
                float _2487 = _2164;
                float _2488 = _2166;
                float _2489 = _2168;
                uint _2490 = _2175;
                uint _2499;
                bool _2500;
                for (;;)
                {
                    _2499 = texelFetch(g_lightClassification, int((((_2044 << 5u) + (_2030 << 9u)) + (_2490 << 2u)) >> 2u)).x;
                    _2500 = _2499 == 0u;
                    float frontier_phi_82_pred;
                    float frontier_phi_82_pred_1;
                    float frontier_phi_82_pred_2;
                    float frontier_phi_82_pred_3;
                    float frontier_phi_82_pred_4;
                    float frontier_phi_82_pred_5;
                    if (_2500)
                    {
                        frontier_phi_82_pred = _2487;
                        frontier_phi_82_pred_1 = _2486;
                        frontier_phi_82_pred_2 = _2485;
                        frontier_phi_82_pred_3 = _2484;
                        frontier_phi_82_pred_4 = _2489;
                        frontier_phi_82_pred_5 = _2488;
                    }
                    else
                    {
                        float _2643;
                        float _2644;
                        float _2645;
                        float _2646;
                        float _2647;
                        float _2648;
                        float _2892;
                        float _2893;
                        float _2894;
                        float _2895;
                        float _2896;
                        float _2897;
                        float _2656 = _2484;
                        float _2657 = _2485;
                        float _2658 = _2486;
                        float _2659 = _2487;
                        float _2660 = _2488;
                        float _2661 = _2489;
                        uint _2662 = _2499;
                        uint _2663;
                        vec4 _2688;
                        float _2689;
                        vec4 _2704;
                        vec3 _2716;
                        vec4 _2731;
                        vec4 _2746;
                        float _2792;
                        bool _2793;
                        for (;;)
                        {
                            uint _2673 = ((_2490 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_2662));
                            _2663 = (_2662 + 4294967295u) & _2662;
                            uint _2675 = _2673 * 40u;
                            _2688 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2675)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2675 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2675 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2675 + 3u)).x));
                            _2689 = _2688.w;
                            uint _2691 = (_2673 * 40u) + 4u;
                            _2704 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2691)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2691 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2691 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2691 + 3u)).x));
                            uint _2706 = (_2673 * 40u) + 8u;
                            _2716 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_2706)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2706 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2706 + 2u)).x));
                            uint _2718 = (_2673 * 40u) + 16u;
                            _2731 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2718)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2718 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2718 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2718 + 3u)).x));
                            uint _2733 = (_2673 * 40u) + 20u;
                            _2746 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2733)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2733 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2733 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2733 + 3u)).x));
                            uint _2748 = (_2673 * 40u) + 24u;
                            vec4 _2761 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2748)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2748 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2748 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2748 + 3u)).x));
                            uint _2767 = (_2673 * 40u) + 28u;
                            vec4 _2780 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_2767)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2767 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2767 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_2767 + 3u)).x));
                            _2792 = fma(_1505, _2780.z, fma(_1504, _2780.y, _2780.x * _1503)) + _2780.w;
                            _2793 = !((fma(_1505, _2761.z, fma(_1504, _2761.y, _2761.x * _1503)) + _2761.w) <= 0.0);
                            float frontier_phi_88_pred;
                            float frontier_phi_88_pred_1;
                            float frontier_phi_88_pred_2;
                            float frontier_phi_88_pred_3;
                            float frontier_phi_88_pred_4;
                            float frontier_phi_88_pred_5;
                            if (_2793)
                            {
                                float _2820 = _2688.x - _1503;
                                float _2821 = _2688.y - _1504;
                                float _2822 = _2688.z - _1505;
                                float _2823 = dot(vec3(_2820, _2821, _2822), vec3(_2820, _2821, _2822));
                                float _2826 = inversesqrt(_2823);
                                float _2827 = _2826 * _2820;
                                float _2828 = _2826 * _2821;
                                float _2829 = _2826 * _2822;
                                float _2833 = 1.0 - (_2823 / (_2689 * _2689));
                                float _3730 = isnan(0.0) ? _2833 : (isnan(_2833) ? 0.0 : max(_2833, 0.0));
                                float _2834 = isnan(1.0) ? _3730 : (isnan(_3730) ? 1.0 : min(_3730, 1.0));
                                float _2838 = sqrt(_2823) * _2704.w;
                                float _2840 = 1.39999997615814208984375 / (_2838 + 1.39999997615814208984375);
                                float _2841 = _2840 * _2840;
                                float _2842 = 1.0 - _2841;
                                float _2844 = (_2842 * dot(vec3(_2827, _2828, _2829), vec3(0.0))) + _2841;
                                float _2847 = _2838 * _2838;
                                float _2851 = (fma(_1505, _2731.z, fma(_1504, _2731.y, _2731.x * _1503)) + _2731.w) / _2792;
                                float _2852 = (fma(_1505, _2746.z, fma(_1504, _2746.y, _2746.x * _1503)) + _2746.w) / _2792;
                                float _2856 = 1.0 - dot(vec2(_2851, _2852), vec2(_2851, _2852));
                                float _3746 = isnan(0.0) ? _2856 : (isnan(_2856) ? 0.0 : max(_2856, 0.0));
                                float _2857 = isnan(1.0) ? _3746 : (isnan(_3746) ? 1.0 : min(_3746, 1.0));
                                float _2858 = _2857 * (((isnan(0.0) ? _2844 : (isnan(_2844) ? 0.0 : max(_2844, 0.0))) * _2834) / ((_2847 * 0.699999988079071044921875) + 1.0));
                                float _2868 = dot(vec3(0.0), vec3((-0.0) - (_1503 * _2331), (-0.0) - (_1504 * _2331), (-0.0) - (_1505 * _2331)));
                                float _3757 = isnan(0.0) ? _2868 : (isnan(_2868) ? 0.0 : max(_2868, 0.0));
                                float _2876 = (_2842 * dot(vec3(0.0), vec3(_2827, _2828, _2829))) + _2841;
                                float _3768 = isnan(0.0) ? _2876 : (isnan(_2876) ? 0.0 : max(_2876, 0.0));
                                float _2877 = isnan(1.0) ? _3768 : (isnan(_3768) ? 1.0 : min(_3768, 1.0));
                                float _2881 = (0.5 / (((isnan(1.0) ? _3757 : (isnan(_3757) ? 1.0 : min(_3757, 1.0))) + 9.9999999392252902907785028219223e-09) + _2877)) * _2877;
                                float _3779 = isnan(0.0) ? _2881 : (isnan(_2881) ? 0.0 : max(_2881, 0.0));
                                float _2888 = (_2857 * _2834) * (((isnan(1.0) ? _3779 : (isnan(_3779) ? 1.0 : min(_3779, 1.0))) * 3.1415927410125732421875) / ((_2847 * 2.1991131305694580078125) + 3.141590118408203125));
                                frontier_phi_88_pred = _2858 * _2704.x;
                                frontier_phi_88_pred_1 = _2888 * _2716.z;
                                frontier_phi_88_pred_2 = _2888 * _2716.y;
                                frontier_phi_88_pred_3 = _2888 * _2716.x;
                                frontier_phi_88_pred_4 = _2858 * _2704.z;
                                frontier_phi_88_pred_5 = _2858 * _2704.y;
                            }
                            else
                            {
                                frontier_phi_88_pred = 0.0;
                                frontier_phi_88_pred_1 = 0.0;
                                frontier_phi_88_pred_2 = 0.0;
                                frontier_phi_88_pred_3 = 0.0;
                                frontier_phi_88_pred_4 = 0.0;
                                frontier_phi_88_pred_5 = 0.0;
                            }
                            _2895 = frontier_phi_88_pred;
                            _2894 = frontier_phi_88_pred_1;
                            _2893 = frontier_phi_88_pred_2;
                            _2892 = frontier_phi_88_pred_3;
                            _2897 = frontier_phi_88_pred_4;
                            _2896 = frontier_phi_88_pred_5;
                            _2646 = _2895 + _2659;
                            _2647 = _2896 + _2660;
                            _2648 = _2897 + _2661;
                            _2643 = _2892 + _2656;
                            _2644 = _2893 + _2657;
                            _2645 = _2894 + _2658;
                            if (_2663 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _2656 = _2643;
                                _2657 = _2644;
                                _2658 = _2645;
                                _2659 = _2646;
                                _2660 = _2647;
                                _2661 = _2648;
                                _2662 = _2663;
                                continue;
                            }
                        }
                        frontier_phi_82_pred = _2646;
                        frontier_phi_82_pred_1 = _2645;
                        frontier_phi_82_pred_2 = _2644;
                        frontier_phi_82_pred_3 = _2643;
                        frontier_phi_82_pred_4 = _2648;
                        frontier_phi_82_pred_5 = _2647;
                    }
                    _2313 = frontier_phi_82_pred;
                    _2311 = frontier_phi_82_pred_1;
                    _2309 = frontier_phi_82_pred_2;
                    _2307 = frontier_phi_82_pred_3;
                    _2317 = frontier_phi_82_pred_4;
                    _2315 = frontier_phi_82_pred_5;
                    uint _2491 = _2490 + 1u;
                    if (_2491 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2484 = _2307;
                        _2485 = _2309;
                        _2486 = _2311;
                        _2487 = _2313;
                        _2488 = _2315;
                        _2489 = _2317;
                        _2490 = _2491;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_62_63_ladder = _2317;
                frontier_phi_62_63_ladder_1 = _2315;
                frontier_phi_62_63_ladder_2 = _2313;
                frontier_phi_62_63_ladder_3 = _2309;
                frontier_phi_62_63_ladder_4 = _2307;
                frontier_phi_62_63_ladder_5 = _2311;
            }
            else
            {
                frontier_phi_62_63_ladder = _2168;
                frontier_phi_62_63_ladder_1 = _2166;
                frontier_phi_62_63_ladder_2 = _2164;
                frontier_phi_62_63_ladder_3 = _2160;
                frontier_phi_62_63_ladder_4 = _2158;
                frontier_phi_62_63_ladder_5 = _2162;
            }
            _2306 = frontier_phi_62_63_ladder_4;
            _2308 = frontier_phi_62_63_ladder_3;
            _2310 = frontier_phi_62_63_ladder_5;
            _2312 = frontier_phi_62_63_ladder_2;
            _2314 = frontier_phi_62_63_ladder_1;
            _2316 = frontier_phi_62_63_ladder;
        }
        float _2321 = isnan(1.0) ? _503 : (isnan(_503) ? 1.0 : min(_503, 1.0));
        _2063 = (_2321 * _2312) + _1793;
        _2065 = (_2321 * _2314) + _1794;
        _2067 = (_2321 * _2316) + _1795;
        _2069 = ((_2306 * 0.039999999105930328369140625) * _2321) + _1898;
        _2071 = ((_2308 * 0.039999999105930328369140625) * _2321) + _1899;
        _2073 = ((_2310 * 0.039999999105930328369140625) * _2321) + _1900;
    }
    else
    {
        _2063 = _1793;
        _2065 = _1794;
        _2067 = _1795;
        _2069 = _1898;
        _2071 = _1899;
        _2073 = _1900;
    }
    float _3795 = isnan(0.0) ? _489 : (isnan(_489) ? 0.0 : max(_489, 0.0));
    float _3806 = isnan(0.0) ? _490 : (isnan(_490) ? 0.0 : max(_490, 0.0));
    float _3817 = isnan(0.0) ? _491 : (isnan(_491) ? 0.0 : max(_491, 0.0));
    float _2090 = ((isnan(1.0) ? _3795 : (isnan(_3795) ? 1.0 : min(_3795, 1.0))) * (_2063 + ((isnan(0.0) ? _1158 : (isnan(_1158) ? 0.0 : max(_1158, 0.0))) * _503))) + ((_2069 + ((isnan(0.0) ? _1449 : (isnan(_1449) ? 0.0 : max(_1449, 0.0))) * _1237)) * cbPerFrame._m0[3u].x);
    float _2091 = ((isnan(1.0) ? _3806 : (isnan(_3806) ? 1.0 : min(_3806, 1.0))) * (_2065 + ((isnan(0.0) ? _1161 : (isnan(_1161) ? 0.0 : max(_1161, 0.0))) * _503))) + ((_2071 + ((isnan(0.0) ? _1452 : (isnan(_1452) ? 0.0 : max(_1452, 0.0))) * _1237)) * cbPerFrame._m0[3u].x);
    float _2092 = ((isnan(1.0) ? _3817 : (isnan(_3817) ? 1.0 : min(_3817, 1.0))) * (_2067 + ((isnan(0.0) ? _1164 : (isnan(_1164) ? 0.0 : max(_1164, 0.0))) * _503))) + ((_2073 + ((isnan(0.0) ? _1455 : (isnan(_1455) ? 0.0 : max(_1455, 0.0))) * _1237)) * cbPerFrame._m0[3u].x);
    float _2093 = isnan(0.0) ? _2090 : (isnan(_2090) ? 0.0 : max(_2090, 0.0));
    float _2094 = isnan(0.0) ? _2091 : (isnan(_2091) ? 0.0 : max(_2091, 0.0));
    float _2095 = isnan(0.0) ? _2092 : (isnan(_2092) ? 0.0 : max(_2092, 0.0));
    uint _2096 = _477 + 6u;
    float _2104 = _463 / cbSceneParam._m0[86u].x;
    float _2105 = _464 / cbSceneParam._m0[86u].y;
    vec4 _2119 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2104, _2105, (log2((isnan(cbSceneParam._m0[77u].w) ? _437 : (isnan(_437) ? cbSceneParam._m0[77u].w : min(_437, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2121 = _2119.x;
    float _2122 = _2119.y;
    float _2123 = _2119.z;
    float _2124 = _2119.w;
    float _2220;
    float _2222;
    float _2224;
    float _2226;
    if (_437 > cbSceneParam._m0[78u].w)
    {
        float _2183 = isnan(_437) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _437 : min(cbSceneParam._m0[80u].w, _437));
        float _2184 = _2183 / _437;
        float _2195 = _2184 * _260;
        float _2196 = _261 * _2184;
        float _2197 = (-0.0) - _2196;
        float _2198 = _2184 * _262;
        float _2200 = (cbSceneParam._m0[77u].w * _2197) / _2183;
        float _2201 = _2200 + cbSceneParam._m0[79u].w;
        float _2202 = cbSceneParam._m0[79u].w - _2196;
        float _2208 = sqrt(((_2195 * _2195) + (_2196 * _2196)) + (_2198 * _2198));
        float _2211 = (1.0 - (cbSceneParam._m0[77u].w / _2183)) * _2208;
        float _2216 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2218 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2441;
        if (abs((_2197 - _2200) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2441 = ((((_2201 > 0.0) ? exp2(_2216 * _2201) : (2.0 - exp2(_2218 * _2201))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2211;
        }
        else
        {
            float _2364 = 1.0 / cbSceneParam._m0[80u].x;
            float _2365 = isnan(_2202) ? _2201 : (isnan(_2201) ? _2202 : max(_2201, _2202));
            float _2366 = isnan(_2202) ? _2201 : (isnan(_2201) ? _2202 : min(_2201, _2202));
            float _2375 = isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : min(_2365, 0.0));
            float _2376 = isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : min(_2366, 0.0));
            _2441 = ((abs(_2208 / _2197) * cbSceneParam._m0[80u].y) * ((((_2375 - _2376) * 2.0) - ((exp2(_2216 * (isnan(0.0) ? _2365 : (isnan(_2365) ? 0.0 : max(_2365, 0.0)))) - exp2(_2216 * (isnan(0.0) ? _2366 : (isnan(_2366) ? 0.0 : max(_2366, 0.0))))) * _2364)) - ((exp2(_2218 * _2375) - exp2(_2218 * _2376)) * _2364))) + (_2211 * cbSceneParam._m0[80u].z);
        }
        vec4 _2443 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2104, _2105, 1.0), 0.0);
        float _2452 = exp2((_2441 * (-1.44269502162933349609375)) * (1.0 - _2443.w));
        float _2453 = log2(_2452);
        float _2469 = log2(_2124);
        _2220 = (exp2(_2469 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2453 * cbSceneParam._m0[78u].x)) * _2443.x) / cbSceneParam._m0[78u].x)) + _2121;
        _2222 = (exp2(_2469 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2453 * cbSceneParam._m0[78u].y)) * _2443.y) / cbSceneParam._m0[78u].y)) + _2122;
        _2224 = (exp2(_2469 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2453 * cbSceneParam._m0[78u].z)) * _2443.z) / cbSceneParam._m0[78u].z)) + _2123;
        _2226 = _2452 * _2124;
    }
    else
    {
        _2220 = _2121;
        _2222 = _2122;
        _2224 = _2123;
        _2226 = _2124;
    }
    bool _2479;
    vec4 _2236;
    vec4 _2259;
    float _2261;
    float _2265;
    float _2266;
    float _2267;
    float _2268;
    bool _2279;
    for (;;)
    {
        _2236 = cbMatDynParam._m0[0u];
        float _2238 = roundEven(_2236.y);
        bool _2239 = _2238 == 3.0;
        float _2241 = log2(_2226);
        float _2248 = exp2(_2241 * cbSceneParam._m0[78u].x) * _2093;
        float _2249 = exp2(_2241 * cbSceneParam._m0[78u].y) * _2094;
        float _2250 = exp2(_2241 * cbSceneParam._m0[78u].z) * _2095;
        float _2257 = _451 + (-0.5);
        _2259 = cbMtdParam._m0[1u];
        _2261 = _2259.y * _2257;
        float _2264 = (_2238 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _2265 = _2264 * (_2239 ? _2248 : (_2248 + (cbSceneParam._m0[72u].w * _2220)));
        _2266 = _2264 * (_2239 ? _2249 : (_2249 + (cbSceneParam._m0[72u].w * _2222)));
        _2267 = _2264 * (_2239 ? _2250 : (_2250 + (cbSceneParam._m0[72u].w * _2224)));
        _2268 = _2257 * 0.999000012874603271484375;
        _2279 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_2279)
        {
            if ((cbInstanceData._m0[_477 + 7u].x + _2268) < 0.5)
            {
                _2479 = true;
                break;
            }
        }
        uint _2399 = _479 + uint(_2236.w);
        if ((cbInstanceData._m0[_2399].w < 1.0) && ((cbInstanceData._m0[_2399].w + _2268) < 0.5))
        {
            _2479 = true;
            break;
        }
        if ((_2261 + 1.0) < _2259.x)
        {
            _2479 = true;
            break;
        }
        _2479 = false;
        break;
    }
    float _2634;
    if (_2479)
    {
        discard_state = true;
        _2634 = 0.0;
    }
    else
    {
        _2634 = cbInstanceData._m0[_2096].w;
    }
    SV_Target.x = _2265;
    SV_Target.y = _2266;
    SV_Target.z = _2267;
    SV_Target.w = _2634;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2096].w;
    discard_exit();
}


