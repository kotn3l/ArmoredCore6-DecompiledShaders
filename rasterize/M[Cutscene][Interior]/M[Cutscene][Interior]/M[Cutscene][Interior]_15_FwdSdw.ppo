#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[26];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 32) uniform texture2D g_ShadowTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_1;
layout(set = 0, binding = 11) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_9;
layout(set = 0, binding = 4) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_2;
layout(set = 0, binding = 5) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_3;
layout(set = 0, binding = 6) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_4;
layout(set = 0, binding = 8) uniform texture2D M_Cutscene_Interior_snp_0_Texture2D_6;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;
layout(set = 0, binding = 12) uniform samplerShadow SS_Shadow;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in vec4 TANGENT_2;
layout(location = 5) in vec4 TANGENT_4;
layout(location = 6) in vec4 TEXCOORD;
layout(location = 7) in vec3 TEXCOORD_4;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;

float _1139;

void main()
{
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _190 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _191 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _192 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _197 = inversesqrt(dot(vec3(_190, _191, _192), vec3(_190, _191, _192)));
    float _198 = _197 * _190;
    float _199 = _197 * _191;
    float _200 = _197 * _192;
    float _204 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _205 = _204 * NORMAL.x;
    float _206 = _204 * NORMAL.y;
    float _207 = _204 * NORMAL.z;
    float _211 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    float _212 = _211 * TANGENT.x;
    float _213 = _211 * TANGENT.y;
    float _214 = _211 * TANGENT.z;
    float _259 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _269 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _259);
    float _270 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _259);
    float _271 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _259);
    vec4 _284 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_9, SS_WrapLinear), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD.x) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD.y) + cbTextureTilingScale._m0[11u].w));
    float _287 = _284.x;
    vec4 _305 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD.x) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD.y) + cbTextureTilingScale._m0[1u].w));
    float _322 = (((cbMtdParam._m0[11u].x - cbMtdParam._m0[12u].x) * _287) + cbMtdParam._m0[12u].x) * _305.x;
    float _324 = (((cbMtdParam._m0[11u].y - cbMtdParam._m0[12u].y) * _287) + cbMtdParam._m0[12u].y) * _305.y;
    float _326 = (((cbMtdParam._m0[11u].z - cbMtdParam._m0[12u].z) * _287) + cbMtdParam._m0[12u].z) * _305.z;
    vec4 _344 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_4, SS_BumpMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD.x) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD.y) + cbTextureTilingScale._m0[6u].w));
    float _380 = cbMtdParam._m0[24u].x + _269;
    float _381 = cbMtdParam._m0[24u].y + _270;
    float _382 = cbMtdParam._m0[24u].z + _271;
    float _396 = (-0.0) - dot(vec3(_380, _381, _382), vec3(_198, _199, _200));
    float _397 = (-0.0) - dot(vec3(_380, _381, _382), vec3(_212, _213, _214));
    float _398 = (-0.0) - dot(vec3(_380, _381, _382), vec3((-0.0) - _205, (-0.0) - _206, (-0.0) - _207));
    float _402 = inversesqrt(dot(vec3(_396, _397, _398), vec3(_396, _397, _398)));
    float _405 = _402 * _398;
    float _406 = (_402 * _396) + ((cbMtdParam._m0[22u].x * _287) * ((_344.x * 2.0) + (-1.0)));
    float _407 = (_402 * _397) + ((cbMtdParam._m0[22u].y * _287) * ((_344.y * 2.0) + (-1.0)));
    float _408 = _406 * cbMtdParam._m0[20u].w;
    float _409 = _407 * cbMtdParam._m0[20u].z;
    float _410 = fract(TEXCOORD.x);
    float _411 = fract(TEXCOORD.y);
    float _417;
    if (_408 > 0.0)
    {
        _417 = (1.0 - _410) / _408;
    }
    else
    {
        float frontier_phi_3_2_ladder;
        if (_408 < 0.0)
        {
            frontier_phi_3_2_ladder = ((-0.0) - _410) / _408;
        }
        else
        {
            frontier_phi_3_2_ladder = 5000.0;
        }
        _417 = frontier_phi_3_2_ladder;
    }
    float _425;
    if (_409 > 0.0)
    {
        _425 = (1.0 - _411) / _409;
    }
    else
    {
        float frontier_phi_7_6_ladder;
        if (_409 < 0.0)
        {
            frontier_phi_7_6_ladder = ((-0.0) - _411) / _409;
        }
        else
        {
            frontier_phi_7_6_ladder = 5000.0;
        }
        _425 = frontier_phi_7_6_ladder;
    }
    bool _427 = _405 > 0.0;
    float _429 = _427 ? (cbMtdParam._m0[16u].x / _405) : 5000.0;
    float _430 = isnan(_425) ? _417 : (isnan(_417) ? _425 : min(_417, _425));
    float _431 = isnan(_429) ? _430 : (isnan(_430) ? _429 : min(_430, _429));
    float _435 = cbMtdParam._m0[16u].y * cbMtdParam._m0[16u].x;
    float _436 = _410 + (-0.5);
    float _439 = _411 + (-0.5);
    float _442 = ((_431 * _405) + _435) / _435;
    vec4 _467 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_3, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[5u].x * (((((_436 + (_431 * _408)) / _442) + 0.5) + (cbMtdParam._m0[16u].w - cbMtdParam._m0[21u].x * trunc(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x))) / cbMtdParam._m0[21u].x)) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * (((((_439 + (_431 * _409)) / _442) + 0.5) + floor(cbMtdParam._m0[16u].w / cbMtdParam._m0[21u].x)) / cbMtdParam._m0[21u].y)) + cbTextureTilingScale._m0[5u].w));
    float _480 = (_467.x * _287) * cbMtdParam._m0[9u].x;
    float _481 = (_467.y * _287) * cbMtdParam._m0[9u].y;
    float _482 = (_467.z * _287) * cbMtdParam._m0[9u].z;
    float _501 = _406 * cbMtdParam._m0[22u].w;
    float _502 = _407 * cbMtdParam._m0[22u].z;
    bool _503 = _501 > 0.0;
    float _508;
    if (_503)
    {
        _508 = (1.0 - _410) / _501;
    }
    else
    {
        float frontier_phi_11_10_ladder;
        if (_501 < 0.0)
        {
            frontier_phi_11_10_ladder = ((-0.0) - _410) / _501;
        }
        else
        {
            frontier_phi_11_10_ladder = 5000.0;
        }
        _508 = frontier_phi_11_10_ladder;
    }
    bool _510 = _502 > 0.0;
    float _515;
    if (_510)
    {
        _515 = (1.0 - _411) / _502;
    }
    else
    {
        float frontier_phi_15_14_ladder;
        if (_502 < 0.0)
        {
            frontier_phi_15_14_ladder = ((-0.0) - _411) / _502;
        }
        else
        {
            frontier_phi_15_14_ladder = 5000.0;
        }
        _515 = frontier_phi_15_14_ladder;
    }
    float _518 = _427 ? (cbMtdParam._m0[18u].x / _405) : 5000.0;
    float _519 = isnan(_515) ? _508 : (isnan(_508) ? _515 : min(_508, _515));
    float _520 = isnan(_518) ? _519 : (isnan(_519) ? _518 : min(_519, _518));
    float _524 = cbMtdParam._m0[19u].y * cbMtdParam._m0[18u].x;
    float _528 = ((_520 * _405) + _524) / _524;
    float _533 = cbMtdParam._m0[19u].x - cbMtdParam._m0[20u].x * trunc(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    float _535 = floor(cbMtdParam._m0[19u].x / cbMtdParam._m0[20u].x);
    vec4 _551 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_0, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[0u].x * (((((_436 + (_520 * _501)) / _528) + 0.5) + _533) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * (((((_439 + (_520 * _502)) / _528) + 0.5) + _535) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[0u].w));
    float _566;
    if (_503)
    {
        _566 = (1.0 - _410) / _501;
    }
    else
    {
        float frontier_phi_19_18_ladder;
        if (_501 < 0.0)
        {
            frontier_phi_19_18_ladder = ((-0.0) - _410) / _501;
        }
        else
        {
            frontier_phi_19_18_ladder = 5000.0;
        }
        _566 = frontier_phi_19_18_ladder;
    }
    float _572;
    if (_510)
    {
        _572 = (1.0 - _411) / _502;
    }
    else
    {
        float frontier_phi_23_22_ladder;
        if (_502 < 0.0)
        {
            frontier_phi_23_22_ladder = ((-0.0) - _411) / _502;
        }
        else
        {
            frontier_phi_23_22_ladder = 5000.0;
        }
        _572 = frontier_phi_23_22_ladder;
    }
    float _574 = isnan(_572) ? _566 : (isnan(_566) ? _572 : min(_566, _572));
    float _575 = isnan(_518) ? _574 : (isnan(_574) ? _518 : min(_574, _518));
    float _582 = ((_575 * _405) + _524) / _524;
    vec4 _602 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_6, SS_WrapLinear), vec2((cbTextureTilingScale._m0[8u].x * (((((_436 + (_575 * _501)) / _582) + 0.5) + _533) / cbMtdParam._m0[20u].x)) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * (((((_439 + (_575 * _502)) / _582) + 0.5) + _535) / cbMtdParam._m0[20u].y)) + cbTextureTilingScale._m0[8u].w));
    float _604 = _602.x;
    float _614 = _287 * 0.1500000059604644775390625;
    float _625 = (_614 * ((_480 - _322) + (((((cbMtdParam._m0[10u].x * _287) * _551.x) - _480) * _287) * _604))) + _322;
    float _626 = (_614 * ((_481 - _324) + (((((cbMtdParam._m0[10u].y * _287) * _551.y) - _481) * _287) * _604))) + _324;
    float _627 = (_614 * ((_482 - _326) + (((((cbMtdParam._m0[10u].z * _287) * _551.z) - _482) * _287) * _604))) + _326;
    vec4 _640 = texture(sampler2D(M_Cutscene_Interior_snp_0_Texture2D_2, SS_BumpMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD.x) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD.y) + cbTextureTilingScale._m0[4u].w));
    float _644 = _640.z;
    float _647 = (_640.x * 2.0) + (-1.0);
    float _648 = (_640.y * 2.0) + (-1.0);
    float _649 = dot(vec2(_647, _648), vec2(_647, _648));
    float _3534 = isnan(0.0) ? _649 : (isnan(_649) ? 0.0 : max(_649, 0.0));
    float _654 = sqrt(1.0 - (isnan(1.0) ? _3534 : (isnan(_3534) ? 1.0 : min(_3534, 1.0))));
    float _657 = fma(_654, _205, fma(_648, _212, _647 * _198));
    float _660 = fma(_654, _206, fma(_648, _213, _647 * _199));
    float _663 = fma(_654, _207, fma(_648, _214, _647 * _200));
    float _667 = inversesqrt(dot(vec3(_657, _660, _663), vec3(_657, _660, _663)));
    float _668 = _667 * _657;
    float _669 = _667 * _660;
    float _670 = _667 * _663;
    float _3545 = isnan(0.0) ? _644 : (isnan(_644) ? 0.0 : max(_644, 0.0));
    float _671 = isnan(1.0) ? _3545 : (isnan(_3545) ? 1.0 : min(_3545, 1.0));
    float _3556 = isnan(0.0) ? _625 : (isnan(_625) ? 0.0 : max(_625, 0.0));
    float _3567 = isnan(0.0) ? _626 : (isnan(_626) ? 0.0 : max(_626, 0.0));
    float _3578 = isnan(0.0) ? _627 : (isnan(_627) ? 0.0 : max(_627, 0.0));
    float _690 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _694 = inversesqrt(dot(vec3(_269, _270, _271), vec3(_269, _270, _271)));
    float _695 = _269 * _694;
    float _696 = _270 * _694;
    float _697 = _271 * _694;
    float _703 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _704 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _723 = fma(_670, cbSceneParam._m0[5u].z, fma(_669, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _668));
    float _726 = fma(_670, cbSceneParam._m0[6u].z, fma(_669, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _668));
    float _729 = fma(_670, cbSceneParam._m0[7u].z, fma(_669, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _668));
    uint _742 = uint(roundEven(NORMAL.w)) * 13u;
    uint _745 = (_742 + 9u) + uint(cbMatDynParam._m0[0u].w);
    float _751 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _3556 : (isnan(_3556) ? 1.0 : min(_3556, 1.0)))) * cbInstanceData._m0[_745].x;
    float _752 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _3567 : (isnan(_3567) ? 1.0 : min(_3567, 1.0)))) * cbInstanceData._m0[_745].y;
    float _753 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _3578 : (isnan(_3578) ? 1.0 : min(_3578, 1.0)))) * cbInstanceData._m0[_745].z;
    float _3589 = isnan(0.0) ? _751 : (isnan(_751) ? 0.0 : max(_751, 0.0));
    float _754 = isnan(1.0) ? _3589 : (isnan(_3589) ? 1.0 : min(_3589, 1.0));
    float _3600 = isnan(0.0) ? _752 : (isnan(_752) ? 0.0 : max(_752, 0.0));
    float _755 = isnan(1.0) ? _3600 : (isnan(_3600) ? 1.0 : min(_3600, 1.0));
    float _3611 = isnan(0.0) ? _753 : (isnan(_753) ? 0.0 : max(_753, 0.0));
    float _756 = isnan(1.0) ? _3611 : (isnan(_3611) ? 1.0 : min(_3611, 1.0));
    vec4 _765 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _703, cbSceneParam._m0[86u].y * _704));
    float _768 = _765.x * TEXCOORD_4.z;
    float _769 = dot(vec3(_668, _669, _670), vec3(_695, _696, _697));
    float _772 = _769 * 2.0;
    float _776 = (_772 * _668) - _695;
    float _777 = (_772 * _669) - _696;
    float _778 = (_772 * _670) - _697;
    float _782 = abs(dot(vec3(_695, _696, _697), vec3(_668, _669, _670)));
    float _3622 = isnan(0.0) ? _782 : (isnan(_782) ? 0.0 : max(_782, 0.0));
    float _784 = sqrt(_671);
    float _797 = exp2((_784 * 5.0) * log2(1.0 - ((isnan(1.0) ? _3622 : (isnan(_3622) ? 1.0 : min(_3622, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_784 * 3.0));
    float _829 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _833 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _837 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1138;
    float _1140;
    float _1141;
    float _1142;
    float _1143;
    float _1144;
    float _1145;
    float _1146;
    float _1147;
    float _1148;
    float _1149;
    float _1150;
    float _1151;
    float _1152;
    float _1153;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _865 = fma(_837, cbModelParam._m0[26u].z, fma(_833, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _829));
        float _869 = fma(_837, cbModelParam._m0[27u].z, fma(_833, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _829));
        float _873 = fma(_837, cbModelParam._m0[28u].z, fma(_833, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _829));
        float _896 = _829 + _668;
        float _897 = _833 + _669;
        float _898 = _837 + _670;
        float _908 = fma(_898, cbModelParam._m0[26u].z, fma(_897, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _896)) - _865;
        float _909 = fma(_898, cbModelParam._m0[27u].z, fma(_897, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _896)) - _869;
        float _910 = fma(_898, cbModelParam._m0[28u].z, fma(_897, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _896)) - _873;
        float _914 = inversesqrt(dot(vec3(_908, _909, _910), vec3(_908, _909, _910)));
        float _927 = ((_914 * _908) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_865 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _928 = ((_914 * _909) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_869 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _929 = ((_914 * _910) / cbModelParam._m0[34u].z) + ((((((_873 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _932 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_927, _928, _929), 0.0);
        vec4 _939 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_927, _928, _929), 0.0);
        vec4 _946 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_927, _928, _929), 0.0);
        vec4 _953 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_927, _928, _929), 0.0);
        float _966 = exp2((_932.w + (-0.5)) * 20.0) * 2.0;
        float _967 = _966 * (_932.x + (-0.5));
        float _968 = _966 * (_932.y + (-0.5));
        float _969 = _966 * (_932.z + (-0.5));
        float _976 = exp2((_939.w + (-0.5)) * 20.0) * 2.0;
        float _977 = _976 * (_939.x + (-0.5));
        float _978 = _976 * (_939.y + (-0.5));
        float _979 = _976 * (_939.z + (-0.5));
        float _986 = exp2((_946.w + (-0.5)) * 20.0) * 2.0;
        float _987 = _986 * (_946.x + (-0.5));
        float _988 = _986 * (_946.y + (-0.5));
        float _989 = _986 * (_946.z + (-0.5));
        float _996 = exp2((_953.w + (-0.5)) * 20.0) * 2.0;
        float _997 = _996 * (_953.x + (-0.5));
        float _998 = _996 * (_953.y + (-0.5));
        float _999 = _996 * (_953.z + (-0.5));
        float _1000 = isnan(0.0) ? _997 : (isnan(_997) ? 0.0 : max(_997, 0.0));
        float _1001 = isnan(0.0) ? _998 : (isnan(_998) ? 0.0 : max(_998, 0.0));
        float _1002 = isnan(0.0) ? _999 : (isnan(_999) ? 0.0 : max(_999, 0.0));
        float _1003 = _967 * 0.5;
        float _1004 = _977 * 0.5;
        float _1005 = _987 * 0.5;
        float _1006 = dot(vec3(_1003, _1004, _1005), vec3(_1003, _1004, _1005));
        float _1011 = (_1006 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1006);
        float _1020 = (dot(vec3(_668, _669, _670), vec3(_1011 * _1003, _1011 * _1004, _1011 * _1005)) + 1.0) * 0.5;
        float _3648 = isnan(0.0) ? _1020 : (isnan(_1020) ? 0.0 : max(_1020, 0.0));
        float _1030 = sqrt(((_1004 * _1004) + (_1003 * _1003)) + (_1005 * _1005)) / (_1000 + 9.9999997473787516355514526367188e-06);
        float _3659 = isnan(0.0) ? _1030 : (isnan(_1030) ? 0.0 : max(_1030, 0.0));
        float _1031 = isnan(1.0) ? _3659 : (isnan(_3659) ? 1.0 : min(_3659, 1.0));
        float _1032 = _1031 * 2.0;
        float _1036 = (1.0 - _1031) / (_1031 + 1.0);
        float _3670 = isnan(0.0) ? _1036 : (isnan(_1036) ? 0.0 : max(_1036, 0.0));
        float _1037 = isnan(1.0) ? _3670 : (isnan(_3670) ? 1.0 : min(_3670, 1.0));
        float _1046 = ((((1.0 - _1037) * (_1032 + 2.0)) * exp2(log2(isnan(1.0) ? _3648 : (isnan(_3648) ? 1.0 : min(_3648, 1.0))) * (_1032 + 1.0))) + _1037) * _1000;
        float _1047 = _968 * 0.5;
        float _1048 = _978 * 0.5;
        float _1049 = _988 * 0.5;
        float _1050 = dot(vec3(_1047, _1048, _1049), vec3(_1047, _1048, _1049));
        float _1055 = (_1050 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1050);
        float _1063 = (dot(vec3(_668, _669, _670), vec3(_1055 * _1047, _1055 * _1048, _1055 * _1049)) + 1.0) * 0.5;
        float _3681 = isnan(0.0) ? _1063 : (isnan(_1063) ? 0.0 : max(_1063, 0.0));
        float _1072 = sqrt(((_1048 * _1048) + (_1047 * _1047)) + (_1049 * _1049)) / (_1001 + 9.9999997473787516355514526367188e-06);
        float _3692 = isnan(0.0) ? _1072 : (isnan(_1072) ? 0.0 : max(_1072, 0.0));
        float _1073 = isnan(1.0) ? _3692 : (isnan(_3692) ? 1.0 : min(_3692, 1.0));
        float _1074 = _1073 * 2.0;
        float _1078 = (1.0 - _1073) / (_1073 + 1.0);
        float _3703 = isnan(0.0) ? _1078 : (isnan(_1078) ? 0.0 : max(_1078, 0.0));
        float _1079 = isnan(1.0) ? _3703 : (isnan(_3703) ? 1.0 : min(_3703, 1.0));
        float _1088 = ((((1.0 - _1079) * (_1074 + 2.0)) * exp2(log2(isnan(1.0) ? _3681 : (isnan(_3681) ? 1.0 : min(_3681, 1.0))) * (_1074 + 1.0))) + _1079) * _1001;
        float _1089 = _969 * 0.5;
        float _1090 = _979 * 0.5;
        float _1091 = _989 * 0.5;
        float _1092 = dot(vec3(_1089, _1090, _1091), vec3(_1089, _1090, _1091));
        float _1097 = (_1092 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1092);
        float _1105 = (dot(vec3(_668, _669, _670), vec3(_1097 * _1089, _1097 * _1090, _1097 * _1091)) + 1.0) * 0.5;
        float _3714 = isnan(0.0) ? _1105 : (isnan(_1105) ? 0.0 : max(_1105, 0.0));
        float _1114 = sqrt(((_1090 * _1090) + (_1089 * _1089)) + (_1091 * _1091)) / (_1002 + 9.9999997473787516355514526367188e-06);
        float _3725 = isnan(0.0) ? _1114 : (isnan(_1114) ? 0.0 : max(_1114, 0.0));
        float _1115 = isnan(1.0) ? _3725 : (isnan(_3725) ? 1.0 : min(_3725, 1.0));
        float _1116 = _1115 * 2.0;
        float _1120 = (1.0 - _1115) / (_1115 + 1.0);
        float _3736 = isnan(0.0) ? _1120 : (isnan(_1120) ? 0.0 : max(_1120, 0.0));
        float _1121 = isnan(1.0) ? _3736 : (isnan(_3736) ? 1.0 : min(_3736, 1.0));
        float _1130 = ((((1.0 - _1121) * (_1116 + 2.0)) * exp2(log2(isnan(1.0) ? _3714 : (isnan(_3714) ? 1.0 : min(_3714, 1.0))) * (_1116 + 1.0))) + _1121) * _1002;
        _1138 = _969;
        _1140 = _968;
        _1141 = _967;
        _1142 = _979;
        _1143 = _978;
        _1144 = _977;
        _1145 = _989;
        _1146 = _988;
        _1147 = _987;
        _1148 = _1002;
        _1149 = _1001;
        _1150 = _1000;
        _1151 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1046 : (isnan(_1046) ? 0.0 : max(_1046, 0.0)));
        _1152 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1088 : (isnan(_1088) ? 0.0 : max(_1088, 0.0)));
        _1153 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1130 : (isnan(_1130) ? 0.0 : max(_1130, 0.0)));
    }
    else
    {
        _1138 = _1139;
        _1140 = _1139;
        _1141 = _1139;
        _1142 = _1139;
        _1143 = _1139;
        _1144 = _1139;
        _1145 = _1139;
        _1146 = _1139;
        _1147 = _1139;
        _1148 = _1139;
        _1149 = _1139;
        _1150 = _1139;
        _1151 = 0.0;
        _1152 = 0.0;
        _1153 = 0.0;
    }
    float _1448;
    float _1449;
    float _1450;
    float _1451;
    float _1452;
    float _1453;
    float _1454;
    float _1455;
    float _1456;
    float _1457;
    float _1458;
    float _1459;
    float _1460;
    float _1461;
    float _1462;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1179 = fma(_837, cbModelParam._m0[30u].z, fma(_833, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _829));
        float _1183 = fma(_837, cbModelParam._m0[31u].z, fma(_833, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _829));
        float _1187 = fma(_837, cbModelParam._m0[32u].z, fma(_833, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _829));
        float _1210 = _829 + _668;
        float _1211 = _833 + _669;
        float _1212 = _837 + _670;
        float _1222 = fma(_1212, cbModelParam._m0[30u].z, fma(_1211, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1210)) - _1179;
        float _1223 = fma(_1212, cbModelParam._m0[31u].z, fma(_1211, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1210)) - _1183;
        float _1224 = fma(_1212, cbModelParam._m0[32u].z, fma(_1211, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1210)) - _1187;
        float _1228 = inversesqrt(dot(vec3(_1222, _1223, _1224), vec3(_1222, _1223, _1224)));
        float _1241 = ((_1228 * _1222) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1179 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1242 = ((_1228 * _1223) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1183 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1243 = ((_1228 * _1224) / cbModelParam._m0[35u].z) + ((((((_1187 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1245 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1241, _1242, _1243), 0.0);
        vec4 _1252 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1241, _1242, _1243), 0.0);
        vec4 _1259 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1241, _1242, _1243), 0.0);
        vec4 _1266 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1241, _1242, _1243), 0.0);
        float _1278 = exp2((_1245.w + (-0.5)) * 20.0) * 2.0;
        float _1279 = _1278 * (_1245.x + (-0.5));
        float _1280 = _1278 * (_1245.y + (-0.5));
        float _1281 = _1278 * (_1245.z + (-0.5));
        float _1288 = exp2((_1252.w + (-0.5)) * 20.0) * 2.0;
        float _1289 = _1288 * (_1252.x + (-0.5));
        float _1290 = _1288 * (_1252.y + (-0.5));
        float _1291 = _1288 * (_1252.z + (-0.5));
        float _1298 = exp2((_1259.w + (-0.5)) * 20.0) * 2.0;
        float _1299 = _1298 * (_1259.x + (-0.5));
        float _1300 = _1298 * (_1259.y + (-0.5));
        float _1301 = _1298 * (_1259.z + (-0.5));
        float _1308 = exp2((_1266.w + (-0.5)) * 20.0) * 2.0;
        float _1309 = _1308 * (_1266.x + (-0.5));
        float _1310 = _1308 * (_1266.y + (-0.5));
        float _1311 = _1308 * (_1266.z + (-0.5));
        float _1312 = isnan(0.0) ? _1309 : (isnan(_1309) ? 0.0 : max(_1309, 0.0));
        float _1313 = isnan(0.0) ? _1310 : (isnan(_1310) ? 0.0 : max(_1310, 0.0));
        float _1314 = isnan(0.0) ? _1311 : (isnan(_1311) ? 0.0 : max(_1311, 0.0));
        float _1315 = _1279 * 0.5;
        float _1316 = _1289 * 0.5;
        float _1317 = _1299 * 0.5;
        float _1318 = dot(vec3(_1315, _1316, _1317), vec3(_1315, _1316, _1317));
        float _1323 = (_1318 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1318);
        float _1331 = (dot(vec3(_668, _669, _670), vec3(_1323 * _1315, _1323 * _1316, _1323 * _1317)) + 1.0) * 0.5;
        float _3777 = isnan(0.0) ? _1331 : (isnan(_1331) ? 0.0 : max(_1331, 0.0));
        float _1340 = sqrt(((_1316 * _1316) + (_1315 * _1315)) + (_1317 * _1317)) / (_1312 + 9.9999997473787516355514526367188e-06);
        float _3788 = isnan(0.0) ? _1340 : (isnan(_1340) ? 0.0 : max(_1340, 0.0));
        float _1341 = isnan(1.0) ? _3788 : (isnan(_3788) ? 1.0 : min(_3788, 1.0));
        float _1342 = _1341 * 2.0;
        float _1346 = (1.0 - _1341) / (_1341 + 1.0);
        float _3799 = isnan(0.0) ? _1346 : (isnan(_1346) ? 0.0 : max(_1346, 0.0));
        float _1347 = isnan(1.0) ? _3799 : (isnan(_3799) ? 1.0 : min(_3799, 1.0));
        float _1356 = ((((1.0 - _1347) * (_1342 + 2.0)) * exp2(log2(isnan(1.0) ? _3777 : (isnan(_3777) ? 1.0 : min(_3777, 1.0))) * (_1342 + 1.0))) + _1347) * _1312;
        float _1357 = _1280 * 0.5;
        float _1358 = _1290 * 0.5;
        float _1359 = _1300 * 0.5;
        float _1360 = dot(vec3(_1357, _1358, _1359), vec3(_1357, _1358, _1359));
        float _1365 = (_1360 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1360);
        float _1373 = (dot(vec3(_668, _669, _670), vec3(_1365 * _1357, _1365 * _1358, _1365 * _1359)) + 1.0) * 0.5;
        float _3810 = isnan(0.0) ? _1373 : (isnan(_1373) ? 0.0 : max(_1373, 0.0));
        float _1382 = sqrt(((_1358 * _1358) + (_1357 * _1357)) + (_1359 * _1359)) / (_1313 + 9.9999997473787516355514526367188e-06);
        float _3821 = isnan(0.0) ? _1382 : (isnan(_1382) ? 0.0 : max(_1382, 0.0));
        float _1383 = isnan(1.0) ? _3821 : (isnan(_3821) ? 1.0 : min(_3821, 1.0));
        float _1384 = _1383 * 2.0;
        float _1388 = (1.0 - _1383) / (_1383 + 1.0);
        float _3832 = isnan(0.0) ? _1388 : (isnan(_1388) ? 0.0 : max(_1388, 0.0));
        float _1389 = isnan(1.0) ? _3832 : (isnan(_3832) ? 1.0 : min(_3832, 1.0));
        float _1398 = ((((1.0 - _1389) * (_1384 + 2.0)) * exp2(log2(isnan(1.0) ? _3810 : (isnan(_3810) ? 1.0 : min(_3810, 1.0))) * (_1384 + 1.0))) + _1389) * _1313;
        float _1399 = _1281 * 0.5;
        float _1400 = _1291 * 0.5;
        float _1401 = _1301 * 0.5;
        float _1402 = dot(vec3(_1399, _1400, _1401), vec3(_1399, _1400, _1401));
        float _1407 = (_1402 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1402);
        float _1415 = (dot(vec3(_668, _669, _670), vec3(_1407 * _1399, _1407 * _1400, _1407 * _1401)) + 1.0) * 0.5;
        float _3843 = isnan(0.0) ? _1415 : (isnan(_1415) ? 0.0 : max(_1415, 0.0));
        float _1424 = sqrt(((_1400 * _1400) + (_1399 * _1399)) + (_1401 * _1401)) / (_1314 + 9.9999997473787516355514526367188e-06);
        float _3854 = isnan(0.0) ? _1424 : (isnan(_1424) ? 0.0 : max(_1424, 0.0));
        float _1425 = isnan(1.0) ? _3854 : (isnan(_3854) ? 1.0 : min(_3854, 1.0));
        float _1426 = _1425 * 2.0;
        float _1430 = (1.0 - _1425) / (_1425 + 1.0);
        float _3865 = isnan(0.0) ? _1430 : (isnan(_1430) ? 0.0 : max(_1430, 0.0));
        float _1431 = isnan(1.0) ? _3865 : (isnan(_3865) ? 1.0 : min(_3865, 1.0));
        float _1440 = ((((1.0 - _1431) * (_1426 + 2.0)) * exp2(log2(isnan(1.0) ? _3843 : (isnan(_3843) ? 1.0 : min(_3843, 1.0))) * (_1426 + 1.0))) + _1431) * _1314;
        _1448 = _1281;
        _1449 = _1280;
        _1450 = _1279;
        _1451 = _1291;
        _1452 = _1290;
        _1453 = _1289;
        _1454 = _1301;
        _1455 = _1300;
        _1456 = _1299;
        _1457 = _1314;
        _1458 = _1313;
        _1459 = _1312;
        _1460 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1356 : (isnan(_1356) ? 0.0 : max(_1356, 0.0)));
        _1461 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1398 : (isnan(_1398) ? 0.0 : max(_1398, 0.0)));
        _1462 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1440 : (isnan(_1440) ? 0.0 : max(_1440, 0.0)));
    }
    else
    {
        _1448 = _1139;
        _1449 = _1139;
        _1450 = _1139;
        _1451 = _1139;
        _1452 = _1139;
        _1453 = _1139;
        _1454 = _1139;
        _1455 = _1139;
        _1456 = _1139;
        _1457 = _1139;
        _1458 = _1139;
        _1459 = _1139;
        _1460 = 0.0;
        _1461 = 0.0;
        _1462 = 0.0;
    }
    float _1472 = (cbModelParam._m0[1u].x * (_1460 - _1151)) + _1151;
    float _1473 = (cbModelParam._m0[1u].x * (_1461 - _1152)) + _1152;
    float _1474 = (cbModelParam._m0[1u].x * (_1462 - _1153)) + _1153;
    float _1495 = fma(_1474, cbSceneParam._m0[89u].z, fma(_1473, cbSceneParam._m0[89u].y, _1472 * cbSceneParam._m0[89u].x));
    float _1498 = fma(_1474, cbSceneParam._m0[90u].z, fma(_1473, cbSceneParam._m0[90u].y, _1472 * cbSceneParam._m0[90u].x));
    float _1501 = fma(_1474, cbSceneParam._m0[91u].z, fma(_1473, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1472));
    float _1516 = _776 * 0.5;
    float _1517 = _777 * 0.5;
    float _1518 = _778 * 0.5;
    float _1519 = dot(vec4(_1516, _1517, _1518, 1.0), vec4(_1450, _1453, _1456, _1459));
    float _1522 = dot(vec4(_1516, _1517, _1518, 1.0), vec4(_1449, _1452, _1455, _1458));
    float _1525 = dot(vec4(_1516, _1517, _1518, 1.0), vec4(_1448, _1451, _1454, _1457));
    float _1559;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _1532 = dot(vec4(_1516, _1517, _1518, 1.0), vec4(_1138, _1142, _1145, _1148));
        float _1536 = dot(vec4(_1516, _1517, _1518, 1.0), vec4(_1140, _1143, _1146, _1149));
        float _1540 = dot(vec4(_1516, _1517, _1518, 1.0), vec4(_1141, _1144, _1147, _1150));
        float _1547 = dot(vec4(cbModelParam._m0[39u]), vec4(_1516, _1517, _1518, 1.0));
        _1559 = dot(vec3(isnan(0.0) ? _1540 : (isnan(_1540) ? 0.0 : max(_1540, 0.0)), isnan(0.0) ? _1536 : (isnan(_1536) ? 0.0 : max(_1536, 0.0)), isnan(0.0) ? _1532 : (isnan(_1532) ? 0.0 : max(_1532, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1547) ? 0.0 : (isnan(0.0) ? _1547 : max(0.0, _1547))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1559 = 1.0;
    }
    float _1570;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _1561 = dot(vec4(cbModelParam._m0[40u]), vec4(_1516, _1517, _1518, 1.0));
        _1570 = dot(vec3(isnan(0.0) ? _1519 : (isnan(_1519) ? 0.0 : max(_1519, 0.0)), isnan(0.0) ? _1522 : (isnan(_1522) ? 0.0 : max(_1522, 0.0)), isnan(0.0) ? _1525 : (isnan(_1525) ? 0.0 : max(_1525, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_1561) ? 0.0 : (isnan(0.0) ? _1561 : max(0.0, _1561))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _1570 = 1.0;
    }
    float _1574 = (_1570 * cbModelParam._m0[1u].x) + (_1559 * (1.0 - cbModelParam._m0[1u].x));
    float _1584 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _671);
    float _1585 = isnan(_1584) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _1584 : min(cbModelParam._m0[25u].z, _1584));
    float _1667;
    float _1669;
    float _1671;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _1634 = fma(_837, cbModelParam._m0[13u].z, fma(_833, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _829)) + cbModelParam._m0[13u].w;
        float _1638 = fma(_837, cbModelParam._m0[14u].z, fma(_833, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _829)) + cbModelParam._m0[14u].w;
        float _1642 = fma(_837, cbModelParam._m0[15u].z, fma(_833, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _829)) + cbModelParam._m0[15u].w;
        float _1645 = fma(_778, cbModelParam._m0[13u].z, fma(_777, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _776));
        float _1648 = fma(_778, cbModelParam._m0[14u].z, fma(_777, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _776));
        float _1651 = fma(_778, cbModelParam._m0[15u].z, fma(_777, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _776));
        float _1679;
        if (_1645 > 0.0)
        {
            _1679 = abs((1.0 - _1634) / _1645);
        }
        else
        {
            float frontier_phi_38_36_ladder;
            if (_1645 < 0.0)
            {
                frontier_phi_38_36_ladder = abs((_1634 + 1.0) / _1645);
            }
            else
            {
                frontier_phi_38_36_ladder = 5000.0;
            }
            _1679 = frontier_phi_38_36_ladder;
        }
        float _1847;
        if (_1648 > 0.0)
        {
            _1847 = abs((1.0 - _1638) / _1648);
        }
        else
        {
            float frontier_phi_47_43_ladder;
            if (_1648 < 0.0)
            {
                frontier_phi_47_43_ladder = abs((_1638 + 1.0) / _1648);
            }
            else
            {
                frontier_phi_47_43_ladder = 5000.0;
            }
            _1847 = frontier_phi_47_43_ladder;
        }
        float _2291;
        if (_1651 > 0.0)
        {
            _2291 = abs((1.0 - _1642) / _1651);
        }
        else
        {
            float frontier_phi_59_54_ladder;
            if (_1651 < 0.0)
            {
                frontier_phi_59_54_ladder = abs((_1642 + 1.0) / _1651);
            }
            else
            {
                frontier_phi_59_54_ladder = 5000.0;
            }
            _2291 = frontier_phi_59_54_ladder;
        }
        float _2293 = isnan(_1847) ? _1679 : (isnan(_1679) ? _1847 : min(_1679, _1847));
        float _2294 = isnan(_2291) ? _2293 : (isnan(_2293) ? _2291 : min(_2293, _2291));
        float _2298 = (_2294 * _1645) + _1634;
        float _2299 = (_2294 * _1648) + _1638;
        float _2300 = (_2294 * _1651) + _1642;
        float _2301 = _2294 * 9.9999997473787516355514526367188e-05;
        float _2303 = (-1.0) - _2301;
        float _2305 = _2301 + 1.0;
        float frontier_phi_37_59_ladder;
        float frontier_phi_37_59_ladder_1;
        float frontier_phi_37_59_ladder_2;
        if ((_2300 > _2305) || ((_2300 < _2303) || ((_2299 > _2305) || ((_2299 < _2303) || ((_2298 < _2303) || (_2298 > _2305))))))
        {
            frontier_phi_37_59_ladder = 0.0;
            frontier_phi_37_59_ladder_1 = 0.0;
            frontier_phi_37_59_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2534 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2300, cbModelParam._m0[9u].z, fma(_2299, cbModelParam._m0[9u].y, _2298 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2300, cbModelParam._m0[10u].z, fma(_2299, cbModelParam._m0[10u].y, _2298 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2300, cbModelParam._m0[11u].z, fma(_2299, cbModelParam._m0[11u].y, _2298 * cbModelParam._m0[11u].x))), _1585);
            frontier_phi_37_59_ladder = _2534.z * cbModelParam._m0[1u].y;
            frontier_phi_37_59_ladder_1 = _2534.y * cbModelParam._m0[1u].y;
            frontier_phi_37_59_ladder_2 = _2534.x * cbModelParam._m0[1u].y;
        }
        _1667 = frontier_phi_37_59_ladder_2;
        _1669 = frontier_phi_37_59_ladder_1;
        _1671 = frontier_phi_37_59_ladder;
    }
    else
    {
        vec4 _1655 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_776, _777, _778), _1585);
        _1667 = _1655.x * cbModelParam._m0[1u].y;
        _1669 = _1655.y * cbModelParam._m0[1u].y;
        _1671 = _1655.z * cbModelParam._m0[1u].y;
    }
    float _1675 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _671);
    float _1676 = isnan(_1675) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _1675 : min(cbModelParam._m0[25u].w, _1675));
    float _1764;
    float _1766;
    float _1768;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _1728 = fma(_837, cbModelParam._m0[21u].z, fma(_833, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _829)) + cbModelParam._m0[21u].w;
        float _1732 = fma(_837, cbModelParam._m0[22u].z, fma(_833, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _829)) + cbModelParam._m0[22u].w;
        float _1736 = fma(_837, cbModelParam._m0[23u].z, fma(_833, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _829)) + cbModelParam._m0[23u].w;
        float _1739 = fma(_778, cbModelParam._m0[21u].z, fma(_777, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _776));
        float _1742 = fma(_778, cbModelParam._m0[22u].z, fma(_777, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _776));
        float _1745 = fma(_778, cbModelParam._m0[23u].z, fma(_777, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _776));
        float _1852;
        if (_1739 > 0.0)
        {
            _1852 = abs((1.0 - _1728) / _1739);
        }
        else
        {
            float frontier_phi_49_45_ladder;
            if (_1739 < 0.0)
            {
                frontier_phi_49_45_ladder = abs((_1728 + 1.0) / _1739);
            }
            else
            {
                frontier_phi_49_45_ladder = 5000.0;
            }
            _1852 = frontier_phi_49_45_ladder;
        }
        float _2318;
        if (_1742 > 0.0)
        {
            _2318 = abs((1.0 - _1732) / _1742);
        }
        else
        {
            float frontier_phi_61_56_ladder;
            if (_1742 < 0.0)
            {
                frontier_phi_61_56_ladder = abs((_1732 + 1.0) / _1742);
            }
            else
            {
                frontier_phi_61_56_ladder = 5000.0;
            }
            _2318 = frontier_phi_61_56_ladder;
        }
        float _2655;
        if (_1745 > 0.0)
        {
            _2655 = abs((1.0 - _1736) / _1745);
        }
        else
        {
            float frontier_phi_73_68_ladder;
            if (_1745 < 0.0)
            {
                frontier_phi_73_68_ladder = abs((_1736 + 1.0) / _1745);
            }
            else
            {
                frontier_phi_73_68_ladder = 5000.0;
            }
            _2655 = frontier_phi_73_68_ladder;
        }
        float _2657 = isnan(_2318) ? _1852 : (isnan(_1852) ? _2318 : min(_1852, _2318));
        float _2658 = isnan(_2655) ? _2657 : (isnan(_2657) ? _2655 : min(_2657, _2655));
        float _2662 = (_2658 * _1739) + _1728;
        float _2663 = (_2658 * _1742) + _1732;
        float _2664 = (_2658 * _1745) + _1736;
        float _2665 = _2658 * 9.9999997473787516355514526367188e-05;
        float _2666 = (-1.0) - _2665;
        float _2668 = _2665 + 1.0;
        float frontier_phi_46_73_ladder;
        float frontier_phi_46_73_ladder_1;
        float frontier_phi_46_73_ladder_2;
        if ((_2664 > _2668) || ((_2664 < _2666) || ((_2663 > _2668) || ((_2663 < _2666) || ((_2662 < _2666) || (_2662 > _2668))))))
        {
            frontier_phi_46_73_ladder = 0.0;
            frontier_phi_46_73_ladder_1 = 0.0;
            frontier_phi_46_73_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2785 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2664, cbModelParam._m0[17u].z, fma(_2663, cbModelParam._m0[17u].y, _2662 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2664, cbModelParam._m0[18u].z, fma(_2663, cbModelParam._m0[18u].y, _2662 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2664, cbModelParam._m0[19u].z, fma(_2663, cbModelParam._m0[19u].y, _2662 * cbModelParam._m0[19u].x))), _1676);
            frontier_phi_46_73_ladder = _2785.z * cbModelParam._m0[1u].z;
            frontier_phi_46_73_ladder_1 = _2785.y * cbModelParam._m0[1u].z;
            frontier_phi_46_73_ladder_2 = _2785.x * cbModelParam._m0[1u].z;
        }
        _1764 = frontier_phi_46_73_ladder_2;
        _1766 = frontier_phi_46_73_ladder_1;
        _1768 = frontier_phi_46_73_ladder;
    }
    else
    {
        vec4 _1748 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_776, _777, _778), _1676);
        _1764 = _1748.x * cbModelParam._m0[1u].z;
        _1766 = _1748.y * cbModelParam._m0[1u].z;
        _1768 = _1748.z * cbModelParam._m0[1u].z;
    }
    float _1780 = ((((1.0 - _797) * ((_784 * 0.60000002384185791015625) + 0.4000000059604644775390625)) * 0.039999999105930328369140625) + (_797 * _784)) * _768;
    float _1781 = _1780 * ((cbModelParam._m0[1u].w * (_1764 - _1667)) + _1667);
    float _1782 = _1780 * ((cbModelParam._m0[1u].w * (_1766 - _1669)) + _1669);
    float _1783 = _1780 * ((cbModelParam._m0[1u].w * (_1768 - _1671)) + _1671);
    float _1786 = fma(_1783, cbSceneParam._m0[89u].z, fma(_1782, cbSceneParam._m0[89u].y, _1781 * cbSceneParam._m0[89u].x));
    float _1789 = fma(_1783, cbSceneParam._m0[90u].z, fma(_1782, cbSceneParam._m0[90u].y, _1781 * cbSceneParam._m0[90u].x));
    float _1792 = fma(_1783, cbSceneParam._m0[91u].z, fma(_1782, cbSceneParam._m0[91u].y, _1781 * cbSceneParam._m0[91u].x));
    float _1826 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x)));
    float _1830 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x)));
    float _1834 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x)));
    float _1838 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
    float _1839 = _1826 / _1838;
    float _1840 = _1830 / _1838;
    float _1841 = _1834 / _1838;
    float _1988;
    float _1989;
    float _1990;
    if (cbSceneParam._m0[59u].w != 0.0)
    {
        uint _1868 = ((uint(_1841 > cbSceneParam._m0[59u].y) + uint(_1841 > cbSceneParam._m0[59u].x)) + uint(_1841 > cbSceneParam._m0[59u].z)) << 2u;
        uint _1869 = _1868 + 43u;
        uint _1877 = _1868 + 44u;
        uint _1885 = _1868 + 45u;
        uint _1893 = _1868 + 46u;
        float _1904 = fma(_1838, cbSceneParam._m0[_1869].w, fma(_1834, cbSceneParam._m0[_1869].z, fma(_1830, cbSceneParam._m0[_1869].y, _1826 * cbSceneParam._m0[_1869].x)));
        float _1908 = fma(_1838, cbSceneParam._m0[_1877].w, fma(_1834, cbSceneParam._m0[_1877].z, fma(_1830, cbSceneParam._m0[_1877].y, _1826 * cbSceneParam._m0[_1877].x)));
        float _1916 = fma(_1838, cbSceneParam._m0[_1893].w, fma(_1834, cbSceneParam._m0[_1893].z, fma(_1830, cbSceneParam._m0[_1893].y, _1826 * cbSceneParam._m0[_1893].x)));
        float _1921 = cbSceneParam._m0[33u].z * _1916;
        float _1923 = cbSceneParam._m0[33u].w * _1916;
        float _1926 = fma(_1838, cbSceneParam._m0[_1885].w, fma(_1834, cbSceneParam._m0[_1885].z, fma(_1830, cbSceneParam._m0[_1885].y, _1826 * cbSceneParam._m0[_1885].x))) / _1916;
        float _1974 = (cbSceneParam._m0[33u].x - sqrt(((_1840 * _1840) + (_1839 * _1839)) + (_1841 * _1841))) * cbSceneParam._m0[33u].y;
        float _3991 = isnan(0.0) ? _1974 : (isnan(_1974) ? 0.0 : max(_1974, 0.0));
        float _1981 = (isnan(1.0) ? _3991 : (isnan(_3991) ? 1.0 : min(_3991, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1921 + _1904) / _1916, (_1923 + _1908) / _1916), _1926), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1923 + _1904) / _1916, (_1908 - _1921) / _1916), _1926), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1904 - _1921) / _1916, (_1908 - _1923) / _1916), _1926), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2((_1904 - _1923) / _1916, (_1921 + _1908) / _1916), _1926), 0.0)).x), vec4(0.25)));
        _1988 = 1.0 - (_1981 * cbSceneParam._m0[34u].x);
        _1989 = 1.0 - (_1981 * cbSceneParam._m0[34u].y);
        _1990 = 1.0 - (_1981 * cbSceneParam._m0[34u].z);
    }
    else
    {
        _1988 = 1.0;
        _1989 = 1.0;
        _1990 = 1.0;
    }
    float _2054;
    float _2056;
    float _2058;
    if ((cbSceneParam._m0[64u].z > 0.0) && (cbSceneParam._m0[64u].w > 0.0))
    {
        float _2042 = fma(_1838, cbSceneParam._m0[63u].w, fma(_1834, cbSceneParam._m0[63u].z, fma(_1830, cbSceneParam._m0[63u].y, _1826 * cbSceneParam._m0[63u].x)));
        float _2043 = fma(_1838, cbSceneParam._m0[60u].w, fma(_1834, cbSceneParam._m0[60u].z, fma(_1830, cbSceneParam._m0[60u].y, _1826 * cbSceneParam._m0[60u].x))) / _2042;
        float _2044 = fma(_1838, cbSceneParam._m0[61u].w, fma(_1834, cbSceneParam._m0[61u].z, fma(_1830, cbSceneParam._m0[61u].y, _1826 * cbSceneParam._m0[61u].x))) / _2042;
        float frontier_phi_58_57_ladder;
        float frontier_phi_58_57_ladder_1;
        float frontier_phi_58_57_ladder_2;
        if ((((_2043 >= cbSceneParam._m0[64u].x) && (_2044 >= cbSceneParam._m0[64u].y)) && (_2043 <= cbSceneParam._m0[64u].z)) && (_2044 <= cbSceneParam._m0[64u].w))
        {
            float _2331 = fma(_1838, cbSceneParam._m0[62u].w, fma(_1834, cbSceneParam._m0[62u].z, fma(_1830, cbSceneParam._m0[62u].y, _1826 * cbSceneParam._m0[62u].x))) / _2042;
            float _2335 = isnan(cbSceneParam._m0[41u].w) ? _2331 : (isnan(_2331) ? cbSceneParam._m0[41u].w : max(_2331, cbSceneParam._m0[41u].w));
            float _2378 = (cbSceneParam._m0[33u].x - sqrt(((_1840 * _1840) + (_1839 * _1839)) + (_1841 * _1841))) * cbSceneParam._m0[33u].y;
            float _4007 = isnan(0.0) ? _2378 : (isnan(_2378) ? 0.0 : max(_2378, 0.0));
            float _2385 = (isnan(1.0) ? _4007 : (isnan(_4007) ? 1.0 : min(_4007, 1.0))) * (1.0 - dot(vec4(vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].z + _2043, cbSceneParam._m0[33u].w + _2044), _2335), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(cbSceneParam._m0[33u].w + _2043, _2044 - cbSceneParam._m0[33u].z), _2335), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2043 - cbSceneParam._m0[33u].z, _2044 - cbSceneParam._m0[33u].w), _2335), 0.0)).x, vec4(textureLod(sampler2DShadow(g_ShadowTexture, SS_Shadow), vec3(vec2(_2043 - cbSceneParam._m0[33u].w, cbSceneParam._m0[33u].z + _2044), _2335), 0.0)).x), vec4(0.25)));
            float _2389 = 1.0 - (_2385 * cbSceneParam._m0[34u].x);
            float _2390 = 1.0 - (_2385 * cbSceneParam._m0[34u].y);
            float _2391 = 1.0 - (_2385 * cbSceneParam._m0[34u].z);
            frontier_phi_58_57_ladder = isnan(_2391) ? _1990 : (isnan(_1990) ? _2391 : min(_1990, _2391));
            frontier_phi_58_57_ladder_1 = isnan(_2390) ? _1989 : (isnan(_1989) ? _2390 : min(_1989, _2390));
            frontier_phi_58_57_ladder_2 = isnan(_2389) ? _1988 : (isnan(_1988) ? _2389 : min(_1988, _2389));
        }
        else
        {
            frontier_phi_58_57_ladder = _1990;
            frontier_phi_58_57_ladder_1 = _1989;
            frontier_phi_58_57_ladder_2 = _1988;
        }
        _2054 = frontier_phi_58_57_ladder_2;
        _2056 = frontier_phi_58_57_ladder_1;
        _2058 = frontier_phi_58_57_ladder;
    }
    else
    {
        _2054 = _1988;
        _2056 = _1989;
        _2058 = _1990;
    }
    uvec4 _2063 = floatBitsToUint(cbInstanceData._m0[_742 + 5u]);
    uint _2065 = _2063.x * 14u;
    uint _2066 = _2065 + 13u;
    float _2071 = _768 + (-1.0);
    float _2074 = (cbLight._m0[_2066].x * _2071) + 1.0;
    float _2075 = (cbLight._m0[_2066].y * _2071) + 1.0;
    uint _2076 = _2065 + 5u;
    float _2082 = isnan(1.0) ? _2075 : (isnan(_2075) ? 1.0 : min(_2075, 1.0));
    uint _2086 = _2065 + 4u;
    float _2095 = isnan(1.0) ? _2074 : (isnan(_2074) ? 1.0 : min(_2074, 1.0));
    uint _2099 = _2065 | 1u;
    float _2110 = dot(vec3(cbLight._m0[_2065].xyz), vec3(_668, _669, _670));
    float _2113 = dot(vec3(cbLight._m0[_2099].xyz), vec3(_668, _669, _670));
    float _4043 = isnan(0.0) ? _2110 : (isnan(_2110) ? 0.0 : max(_2110, 0.0));
    float _4054 = isnan(0.0) ? _2113 : (isnan(_2113) ? 0.0 : max(_2113, 0.0));
    float _2118 = (isnan(1.0) ? _4043 : (isnan(_4043) ? 1.0 : min(_4043, 1.0))) * 0.3183098733425140380859375;
    float _2120 = (isnan(1.0) ? _4054 : (isnan(_4054) ? 1.0 : min(_4054, 1.0))) * 0.3183098733425140380859375;
    float _2127 = ((cbLight._m0[_2076].x * _2082) * _2120) + (((cbLight._m0[_2086].x * _2054) * _2095) * _2118);
    float _2128 = ((_2082 * cbLight._m0[_2076].y) * _2120) + (((cbLight._m0[_2086].y * _2056) * _2095) * _2118);
    float _2129 = ((_2082 * cbLight._m0[_2076].z) * _2120) + (((cbLight._m0[_2086].z * _2058) * _2095) * _2118);
    uint _2131 = _2065 + 8u;
    float _2144 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2065].w)) * _671) * 0.949999988079071044921875);
    float _2145 = _2144 * _2144;
    float _2146 = cbLight._m0[_2065].x + _695;
    float _2147 = cbLight._m0[_2065].y + _696;
    float _2148 = cbLight._m0[_2065].z + _697;
    float _2152 = inversesqrt(dot(vec3(_2146, _2147, _2148), vec3(_2146, _2147, _2148)));
    float _2153 = _2152 * _2146;
    float _2154 = _2152 * _2147;
    float _2155 = _2152 * _2148;
    float _2156 = dot(vec3(_668, _669, _670), vec3(cbLight._m0[_2065].xyz));
    float _4065 = isnan(0.0) ? _2156 : (isnan(_2156) ? 0.0 : max(_2156, 0.0));
    float _2159 = isnan(1.0) ? _4065 : (isnan(_4065) ? 1.0 : min(_4065, 1.0));
    float _4076 = isnan(0.0) ? _769 : (isnan(_769) ? 0.0 : max(_769, 0.0));
    float _2160 = isnan(1.0) ? _4076 : (isnan(_4076) ? 1.0 : min(_4076, 1.0));
    float _2161 = dot(vec3(_668, _669, _670), vec3(_2153, _2154, _2155));
    float _4087 = isnan(0.0) ? _2161 : (isnan(_2161) ? 0.0 : max(_2161, 0.0));
    float _2164 = isnan(1.0) ? _4087 : (isnan(_4087) ? 1.0 : min(_4087, 1.0));
    float _2165 = dot(vec3(cbLight._m0[_2065].xyz), vec3(_2153, _2154, _2155));
    float _4098 = isnan(0.0) ? _2165 : (isnan(_2165) ? 0.0 : max(_2165, 0.0));
    float _2169 = _2145 * _2145;
    float _2173 = ((_2164 * _2164) * (_2169 + (-1.0))) + 1.0;
    float _2184 = (exp2(log2(1.0 - (isnan(1.0) ? _4098 : (isnan(_4098) ? 1.0 : min(_4098, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2185 = 1.0 - _2145;
    float _2196 = (0.5 / (((_2160 * ((_2159 * _2185) + _2145)) + 9.9999999392252902907785028219223e-09) + (((_2160 * _2185) + _2145) * _2159))) * _2159;
    float _4109 = isnan(0.0) ? _2196 : (isnan(_2196) ? 0.0 : max(_2196, 0.0));
    float _2198 = (isnan(1.0) ? _4109 : (isnan(_4109) ? 1.0 : min(_4109, 1.0))) * (_2169 / ((_2173 * _2173) * 3.141590118408203125));
    uint _2212 = _2065 + 9u;
    float _2223 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2099].w)) * _671) * 0.949999988079071044921875);
    float _2224 = _2223 * _2223;
    float _2225 = cbLight._m0[_2099].x + _695;
    float _2226 = cbLight._m0[_2099].y + _696;
    float _2227 = cbLight._m0[_2099].z + _697;
    float _2231 = inversesqrt(dot(vec3(_2225, _2226, _2227), vec3(_2225, _2226, _2227)));
    float _2232 = _2231 * _2225;
    float _2233 = _2231 * _2226;
    float _2234 = _2231 * _2227;
    float _2235 = dot(vec3(_668, _669, _670), vec3(cbLight._m0[_2099].xyz));
    float _4120 = isnan(0.0) ? _2235 : (isnan(_2235) ? 0.0 : max(_2235, 0.0));
    float _2238 = isnan(1.0) ? _4120 : (isnan(_4120) ? 1.0 : min(_4120, 1.0));
    float _2239 = dot(vec3(_668, _669, _670), vec3(_2232, _2233, _2234));
    float _4131 = isnan(0.0) ? _2239 : (isnan(_2239) ? 0.0 : max(_2239, 0.0));
    float _2242 = isnan(1.0) ? _4131 : (isnan(_4131) ? 1.0 : min(_4131, 1.0));
    float _2243 = dot(vec3(cbLight._m0[_2099].xyz), vec3(_2232, _2233, _2234));
    float _4142 = isnan(0.0) ? _2243 : (isnan(_2243) ? 0.0 : max(_2243, 0.0));
    float _2247 = _2224 * _2224;
    float _2251 = ((_2242 * _2242) * (_2247 + (-1.0))) + 1.0;
    float _2260 = (exp2(log2(1.0 - (isnan(1.0) ? _4142 : (isnan(_4142) ? 1.0 : min(_4142, 1.0)))) * 5.0) * 0.959999978542327880859375) + 0.039999999105930328369140625;
    float _2261 = 1.0 - _2224;
    float _2271 = (0.5 / (((_2160 * ((_2238 * _2261) + _2224)) + 9.9999999392252902907785028219223e-09) + (((_2160 * _2261) + _2224) * _2238))) * _2238;
    float _4153 = isnan(0.0) ? _2271 : (isnan(_2271) ? 0.0 : max(_2271, 0.0));
    float _2273 = (isnan(1.0) ? _4153 : (isnan(_4153) ? 1.0 : min(_4153, 1.0))) * (_2247 / ((_2251 * _2251) * 3.141590118408203125));
    float _2283 = (((_2260 * cbLight._m0[_2212].x) * _2273) * _2082) + ((((cbLight._m0[_2131].x * _2054) * _2184) * _2198) * _2095);
    float _2284 = (((_2260 * cbLight._m0[_2212].y) * _2273) * _2082) + ((((cbLight._m0[_2131].y * _2056) * _2184) * _2198) * _2095);
    float _2285 = (((_2260 * cbLight._m0[_2212].z) * _2273) * _2082) + ((((cbLight._m0[_2131].z * _2058) * _2184) * _2198) * _2095);
    float _2448;
    float _2450;
    float _2452;
    float _2454;
    float _2456;
    float _2458;
    if (_2063.y == 0u)
    {
        uvec4 _2403 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2404 = _2403.x;
        uint _2415 = uint((float(_2403.y) * floor(float(uint(cbSceneParam._m0[85u].y * _704) / _2404))) + floor(float(uint(cbSceneParam._m0[85u].x * _703) / _2404)));
        float _2425 = (log2(_1841 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2426 = isnan(0.0) ? _2425 : (isnan(_2425) ? 0.0 : max(_2425, 0.0));
        uint _2429 = uint(isnan(14.0) ? _2426 : (isnan(_2426) ? 14.0 : min(_2426, 14.0)));
        uvec4 _2434 = texelFetch(g_lightClusterGridBuffer, int(((_2429 << 2u) + (_2415 << 6u)) >> 2u));
        uint _2435 = _2434.x;
        uint _2436 = _2403.z;
        float _2543;
        float _2545;
        float _2547;
        float _2549;
        float _2551;
        float _2553;
        if (((((1u << ((_2436 >> 4u) & 15u)) + 4294967295u) & _2435) == 0u) || ((_2436 & 240u) == 0u))
        {
            _2543 = 0.0;
            _2545 = 0.0;
            _2547 = 0.0;
            _2549 = 0.0;
            _2551 = 0.0;
            _2553 = 0.0;
        }
        else
        {
            float _2544;
            float _2546;
            float _2548;
            float _2550;
            float _2552;
            float _2554;
            float _2713 = 0.0;
            float _2714 = 0.0;
            float _2715 = 0.0;
            float _2716 = 0.0;
            float _2717 = 0.0;
            float _2718 = 0.0;
            uint _2719 = 0u;
            uint _2728;
            bool _2729;
            for (;;)
            {
                _2728 = texelFetch(g_lightClassification, int((((_2429 << 5u) + (_2415 << 9u)) + (_2719 << 2u)) >> 2u)).x;
                _2729 = _2728 == 0u;
                float frontier_phi_82_pred;
                float frontier_phi_82_pred_1;
                float frontier_phi_82_pred_2;
                float frontier_phi_82_pred_3;
                float frontier_phi_82_pred_4;
                float frontier_phi_82_pred_5;
                if (_2729)
                {
                    frontier_phi_82_pred = _2713;
                    frontier_phi_82_pred_1 = _2718;
                    frontier_phi_82_pred_2 = _2717;
                    frontier_phi_82_pred_3 = _2716;
                    frontier_phi_82_pred_4 = _2715;
                    frontier_phi_82_pred_5 = _2714;
                }
                else
                {
                    float _2858;
                    float _2859;
                    float _2860;
                    float _2861;
                    float _2862;
                    float _2863;
                    uint _2864;
                    _2858 = _2713;
                    _2859 = _2714;
                    _2860 = _2715;
                    _2861 = _2716;
                    _2862 = _2717;
                    _2863 = _2718;
                    _2864 = _2728;
                    float _2790;
                    float _2791;
                    float _2792;
                    float _2793;
                    float _2794;
                    float _2795;
                    for (;;)
                    {
                        uint _2868 = uint(findLSB(_2864)) + (_2719 << 5u);
                        uint _2865 = (_2864 + 4294967295u) & _2864;
                        uint _2870 = _2868 * 48u;
                        vec4 _2884 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2870)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2870 + 3u)).x));
                        uint _2890 = (_2868 * 48u) + 4u;
                        vec4 _2903 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_2890)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2890 + 3u)).x));
                        uint _2909 = (_2868 * 48u) + 8u;
                        vec3 _2920 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_2909)).x, texelFetch(g_PointLightRenderingBuffer, int(_2909 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_2909 + 2u)).x));
                        float _2924 = _2884.x - _1839;
                        float _2925 = _2884.y - _1840;
                        float _2926 = _2884.z - _1841;
                        float _2927 = dot(vec3(_2924, _2925, _2926), vec3(_2924, _2925, _2926));
                        float _2930 = inversesqrt(_2927);
                        float _2931 = _2930 * _2924;
                        float _2932 = _2930 * _2925;
                        float _2933 = _2930 * _2926;
                        float _2934 = dot(vec3(_723, _726, _729), vec3(_2931, _2932, _2933));
                        float _2939 = 1.0 - (_2927 * _2884.w);
                        float _4174 = isnan(0.0) ? _2939 : (isnan(_2939) ? 0.0 : max(_2939, 0.0));
                        float _2940 = isnan(1.0) ? _4174 : (isnan(_4174) ? 1.0 : min(_4174, 1.0));
                        float _2941 = sqrt(_2927) * _2903.w;
                        float _2944 = 1.39999997615814208984375 / (_2941 + 1.39999997615814208984375);
                        float _2945 = _2944 * _2944;
                        float _2948 = ((1.0 - _2945) * _2934) + _2945;
                        float _2951 = _2941 * _2941;
                        float _2955 = ((isnan(0.0) ? _2948 : (isnan(_2948) ? 0.0 : max(_2948, 0.0))) * _2940) / ((_2951 * 0.699999988079071044921875) + 1.0);
                        float _2959 = (-0.0) - _1839;
                        float _2960 = (-0.0) - _1840;
                        float _2961 = (-0.0) - _1841;
                        float _2965 = inversesqrt(dot(vec3(_2959, _2960, _2961), vec3(_2959, _2960, _2961)));
                        float _2966 = _2965 * _2959;
                        float _2967 = _2965 * _2960;
                        float _2968 = _2965 * _2961;
                        float _2975 = exp2(log2(1.0 / ((_2951 * 3.5) + 5.0)) * 0.25);
                        float _2976 = 1.0 - _784;
                        float _2983 = sqrt(1.0 - ((1.0 - (_2976 * _2976)) * (1.0 - (_2975 * _2975))));
                        float _2984 = _2983 * _2983;
                        float _2985 = _2984 * _2984;
                        float _2986 = _2966 + _2931;
                        float _2987 = _2967 + _2932;
                        float _2988 = _2968 + _2933;
                        float _2992 = inversesqrt(dot(vec3(_2986, _2987, _2988), vec3(_2986, _2987, _2988)));
                        float _2996 = dot(vec3(_723, _726, _729), vec3(_2966, _2967, _2968));
                        float _4190 = isnan(0.0) ? _2996 : (isnan(_2996) ? 0.0 : max(_2996, 0.0));
                        float _2999 = isnan(1.0) ? _4190 : (isnan(_4190) ? 1.0 : min(_4190, 1.0));
                        float _3000 = dot(vec3(_723, _726, _729), vec3(_2992 * _2986, _2992 * _2987, _2992 * _2988));
                        float _4201 = isnan(0.0) ? _3000 : (isnan(_3000) ? 0.0 : max(_3000, 0.0));
                        float _3003 = isnan(1.0) ? _4201 : (isnan(_4201) ? 1.0 : min(_4201, 1.0));
                        float _3007 = ((_3003 * _3003) * (_2985 + (-1.0))) + 1.0;
                        float _3008 = _2944 * _2984;
                        float _3009 = _3008 * _3008;
                        float _3012 = ((1.0 - _3009) * _2934) + _3009;
                        float _4212 = isnan(0.0) ? _3012 : (isnan(_3012) ? 0.0 : max(_3012, 0.0));
                        float _3013 = isnan(1.0) ? _4212 : (isnan(_4212) ? 1.0 : min(_4212, 1.0));
                        float _3014 = 1.0 - _2984;
                        float _3024 = (0.5 / (((_3013 * ((_2999 * _3014) + _2984)) + 9.9999999392252902907785028219223e-09) + (((_3013 * _3014) + _2984) * _2999))) * _3013;
                        float _4223 = isnan(0.0) ? _3024 : (isnan(_3024) ? 0.0 : max(_3024, 0.0));
                        float _3035 = (((_2985 * 3.1415927410125732421875) * (isnan(1.0) ? _4223 : (isnan(_4223) ? 1.0 : min(_4223, 1.0)))) / ((_3007 * _3007) * ((_2951 * 2.1991131305694580078125) + 3.141590118408203125))) * _2940;
                        _2793 = (_2955 * _2903.x) + _2861;
                        _2794 = (_2955 * _2903.y) + _2862;
                        _2795 = (_2955 * _2903.z) + _2863;
                        _2790 = (_3035 * _2920.x) + _2858;
                        _2791 = (_3035 * _2920.y) + _2859;
                        _2792 = (_3035 * _2920.z) + _2860;
                        if (_2865 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _2858 = _2790;
                            _2859 = _2791;
                            _2860 = _2792;
                            _2861 = _2793;
                            _2862 = _2794;
                            _2863 = _2795;
                            _2864 = _2865;
                        }
                    }
                    frontier_phi_82_pred = _2790;
                    frontier_phi_82_pred_1 = _2795;
                    frontier_phi_82_pred_2 = _2794;
                    frontier_phi_82_pred_3 = _2793;
                    frontier_phi_82_pred_4 = _2792;
                    frontier_phi_82_pred_5 = _2791;
                }
                _2544 = frontier_phi_82_pred;
                _2554 = frontier_phi_82_pred_1;
                _2552 = frontier_phi_82_pred_2;
                _2550 = frontier_phi_82_pred_3;
                _2548 = frontier_phi_82_pred_4;
                _2546 = frontier_phi_82_pred_5;
                uint _2720 = _2719 + 1u;
                if (_2720 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _2713 = _2544;
                    _2714 = _2546;
                    _2715 = _2548;
                    _2716 = _2550;
                    _2717 = _2552;
                    _2718 = _2554;
                    _2719 = _2720;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _2543 = _2544;
            _2545 = _2546;
            _2547 = _2548;
            _2549 = _2550;
            _2551 = _2552;
            _2553 = _2554;
        }
        uvec4 _2557 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2558 = _2557.z;
        uint _2560 = (_2558 >> 8u) & 15u;
        float _2681;
        float _2683;
        float _2685;
        float _2687;
        float _2689;
        float _2691;
        if (((4294967295u << _2560) & _2435) == 0u)
        {
            _2681 = _2543;
            _2683 = _2545;
            _2685 = _2547;
            _2687 = _2549;
            _2689 = _2551;
            _2691 = _2553;
        }
        else
        {
            float _2706 = inversesqrt(dot(vec3(_1839, _1840, _1841), vec3(_1839, _1840, _1841)));
            float _2707 = _2706 * _1839;
            float _2708 = _2706 * _1840;
            float _2709 = _2706 * _1841;
            float frontier_phi_75_76_ladder;
            float frontier_phi_75_76_ladder_1;
            float frontier_phi_75_76_ladder_2;
            float frontier_phi_75_76_ladder_3;
            float frontier_phi_75_76_ladder_4;
            float frontier_phi_75_76_ladder_5;
            if (_2560 < ((_2558 >> 12u) & 15u))
            {
                float _2682;
                float _2684;
                float _2686;
                float _2688;
                float _2690;
                float _2692;
                float _2841 = _2543;
                float _2842 = _2545;
                float _2843 = _2547;
                float _2844 = _2549;
                float _2845 = _2551;
                float _2846 = _2553;
                uint _2847 = _2560;
                uint _2856;
                bool _2857;
                for (;;)
                {
                    _2856 = texelFetch(g_lightClassification, int((((_2429 << 5u) + (_2415 << 9u)) + (_2847 << 2u)) >> 2u)).x;
                    _2857 = _2856 == 0u;
                    float frontier_phi_88_pred;
                    float frontier_phi_88_pred_1;
                    float frontier_phi_88_pred_2;
                    float frontier_phi_88_pred_3;
                    float frontier_phi_88_pred_4;
                    float frontier_phi_88_pred_5;
                    if (_2857)
                    {
                        frontier_phi_88_pred = _2844;
                        frontier_phi_88_pred_1 = _2845;
                        frontier_phi_88_pred_2 = _2846;
                        frontier_phi_88_pred_3 = _2843;
                        frontier_phi_88_pred_4 = _2842;
                        frontier_phi_88_pred_5 = _2841;
                    }
                    else
                    {
                        float _3040;
                        float _3041;
                        float _3042;
                        float _3043;
                        float _3044;
                        float _3045;
                        float _3333;
                        float _3334;
                        float _3335;
                        float _3336;
                        float _3337;
                        float _3338;
                        float _3053 = _2841;
                        float _3054 = _2842;
                        float _3055 = _2843;
                        float _3056 = _2844;
                        float _3057 = _2845;
                        float _3058 = _2846;
                        uint _3059 = _2856;
                        uint _3060;
                        vec4 _3085;
                        float _3086;
                        vec4 _3101;
                        vec3 _3113;
                        vec4 _3128;
                        vec4 _3143;
                        float _3189;
                        bool _3190;
                        for (;;)
                        {
                            uint _3070 = ((_2847 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3059));
                            _3060 = (_3059 + 4294967295u) & _3059;
                            uint _3072 = _3070 * 40u;
                            _3085 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3072)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3072 + 3u)).x));
                            _3086 = _3085.w;
                            uint _3088 = (_3070 * 40u) + 4u;
                            _3101 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3088)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3088 + 3u)).x));
                            uint _3103 = (_3070 * 40u) + 8u;
                            _3113 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3103)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3103 + 2u)).x));
                            uint _3115 = (_3070 * 40u) + 16u;
                            _3128 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3115)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3115 + 3u)).x));
                            uint _3130 = (_3070 * 40u) + 20u;
                            _3143 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3130)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3130 + 3u)).x));
                            uint _3145 = (_3070 * 40u) + 24u;
                            vec4 _3158 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3145)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3145 + 3u)).x));
                            uint _3164 = (_3070 * 40u) + 28u;
                            vec4 _3177 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3164)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3164 + 3u)).x));
                            _3189 = fma(_1841, _3177.z, fma(_1840, _3177.y, _3177.x * _1839)) + _3177.w;
                            _3190 = !((fma(_1841, _3158.z, fma(_1840, _3158.y, _3158.x * _1839)) + _3158.w) <= 0.0);
                            float frontier_phi_94_pred;
                            float frontier_phi_94_pred_1;
                            float frontier_phi_94_pred_2;
                            float frontier_phi_94_pred_3;
                            float frontier_phi_94_pred_4;
                            float frontier_phi_94_pred_5;
                            if (_3190)
                            {
                                float _3217 = _3085.x - _1839;
                                float _3218 = _3085.y - _1840;
                                float _3219 = _3085.z - _1841;
                                float _3220 = dot(vec3(_3217, _3218, _3219), vec3(_3217, _3218, _3219));
                                float _3223 = inversesqrt(_3220);
                                float _3224 = _3223 * _3217;
                                float _3225 = _3223 * _3218;
                                float _3226 = _3223 * _3219;
                                float _3230 = 1.0 - (_3220 / (_3086 * _3086));
                                float _4234 = isnan(0.0) ? _3230 : (isnan(_3230) ? 0.0 : max(_3230, 0.0));
                                float _3231 = isnan(1.0) ? _4234 : (isnan(_4234) ? 1.0 : min(_4234, 1.0));
                                float _3235 = sqrt(_3220) * _3101.w;
                                float _3237 = 1.39999997615814208984375 / (_3235 + 1.39999997615814208984375);
                                float _3238 = _3237 * _3237;
                                float _3241 = ((1.0 - _3238) * dot(vec3(_3224, _3225, _3226), vec3(_723, _726, _729))) + _3238;
                                float _3244 = _3235 * _3235;
                                float _3248 = (fma(_1841, _3128.z, fma(_1840, _3128.y, _3128.x * _1839)) + _3128.w) / _3189;
                                float _3249 = (fma(_1841, _3143.z, fma(_1840, _3143.y, _3143.x * _1839)) + _3143.w) / _3189;
                                float _3253 = 1.0 - dot(vec2(_3248, _3249), vec2(_3248, _3249));
                                float _4250 = isnan(0.0) ? _3253 : (isnan(_3253) ? 0.0 : max(_3253, 0.0));
                                float _3254 = isnan(1.0) ? _4250 : (isnan(_4250) ? 1.0 : min(_4250, 1.0));
                                float _3255 = _3254 * (((isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0))) * _3231) / ((_3244 * 0.699999988079071044921875) + 1.0));
                                float _3267 = exp2(log2(1.0 / ((_3244 * 3.5) + 5.0)) * 0.25);
                                float _3268 = 1.0 - _784;
                                float _3275 = sqrt(1.0 - ((1.0 - (_3268 * _3268)) * (1.0 - (_3267 * _3267))));
                                float _3276 = _3275 * _3275;
                                float _3277 = _3276 * _3276;
                                float _3278 = _3224 - _2707;
                                float _3279 = _3225 - _2708;
                                float _3280 = _3226 - _2709;
                                float _3284 = inversesqrt(dot(vec3(_3278, _3279, _3280), vec3(_3278, _3279, _3280)));
                                float _3288 = dot(vec3(_723, _726, _729), vec3((-0.0) - _2707, (-0.0) - _2708, (-0.0) - _2709));
                                float _4261 = isnan(0.0) ? _3288 : (isnan(_3288) ? 0.0 : max(_3288, 0.0));
                                float _3291 = isnan(1.0) ? _4261 : (isnan(_4261) ? 1.0 : min(_4261, 1.0));
                                float _3292 = dot(vec3(_723, _726, _729), vec3(_3284 * _3278, _3284 * _3279, _3284 * _3280));
                                float _4272 = isnan(0.0) ? _3292 : (isnan(_3292) ? 0.0 : max(_3292, 0.0));
                                float _3295 = isnan(1.0) ? _4272 : (isnan(_4272) ? 1.0 : min(_4272, 1.0));
                                float _3299 = ((_3295 * _3295) * (_3277 + (-1.0))) + 1.0;
                                float _3300 = _3237 * _3276;
                                float _3301 = _3300 * _3300;
                                float _3307 = ((1.0 - _3301) * dot(vec3(_723, _726, _729), vec3(_3224, _3225, _3226))) + _3301;
                                float _4283 = isnan(0.0) ? _3307 : (isnan(_3307) ? 0.0 : max(_3307, 0.0));
                                float _3308 = isnan(1.0) ? _4283 : (isnan(_4283) ? 1.0 : min(_4283, 1.0));
                                float _3309 = 1.0 - _3276;
                                float _3319 = (0.5 / (((_3308 * ((_3291 * _3309) + _3276)) + 9.9999999392252902907785028219223e-09) + (((_3308 * _3309) + _3276) * _3291))) * _3308;
                                float _4294 = isnan(0.0) ? _3319 : (isnan(_3319) ? 0.0 : max(_3319, 0.0));
                                float _3329 = (_3254 * _3231) * (((_3277 * 3.1415927410125732421875) * (isnan(1.0) ? _4294 : (isnan(_4294) ? 1.0 : min(_4294, 1.0)))) / ((_3299 * _3299) * ((_3244 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_94_pred = _3329 * _3113.x;
                                frontier_phi_94_pred_1 = _3329 * _3113.y;
                                frontier_phi_94_pred_2 = _3255 * _3101.z;
                                frontier_phi_94_pred_3 = _3255 * _3101.y;
                                frontier_phi_94_pred_4 = _3255 * _3101.x;
                                frontier_phi_94_pred_5 = _3329 * _3113.z;
                            }
                            else
                            {
                                frontier_phi_94_pred = 0.0;
                                frontier_phi_94_pred_1 = 0.0;
                                frontier_phi_94_pred_2 = 0.0;
                                frontier_phi_94_pred_3 = 0.0;
                                frontier_phi_94_pred_4 = 0.0;
                                frontier_phi_94_pred_5 = 0.0;
                            }
                            _3333 = frontier_phi_94_pred;
                            _3334 = frontier_phi_94_pred_1;
                            _3338 = frontier_phi_94_pred_2;
                            _3337 = frontier_phi_94_pred_3;
                            _3336 = frontier_phi_94_pred_4;
                            _3335 = frontier_phi_94_pred_5;
                            _3043 = _3336 + _3056;
                            _3044 = _3337 + _3057;
                            _3045 = _3338 + _3058;
                            _3040 = _3333 + _3053;
                            _3041 = _3334 + _3054;
                            _3042 = _3335 + _3055;
                            if (_3060 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3053 = _3040;
                                _3054 = _3041;
                                _3055 = _3042;
                                _3056 = _3043;
                                _3057 = _3044;
                                _3058 = _3045;
                                _3059 = _3060;
                                continue;
                            }
                        }
                        frontier_phi_88_pred = _3043;
                        frontier_phi_88_pred_1 = _3044;
                        frontier_phi_88_pred_2 = _3045;
                        frontier_phi_88_pred_3 = _3042;
                        frontier_phi_88_pred_4 = _3041;
                        frontier_phi_88_pred_5 = _3040;
                    }
                    _2688 = frontier_phi_88_pred;
                    _2690 = frontier_phi_88_pred_1;
                    _2692 = frontier_phi_88_pred_2;
                    _2686 = frontier_phi_88_pred_3;
                    _2684 = frontier_phi_88_pred_4;
                    _2682 = frontier_phi_88_pred_5;
                    uint _2848 = _2847 + 1u;
                    if (_2848 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _2841 = _2682;
                        _2842 = _2684;
                        _2843 = _2686;
                        _2844 = _2688;
                        _2845 = _2690;
                        _2846 = _2692;
                        _2847 = _2848;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_75_76_ladder = _2690;
                frontier_phi_75_76_ladder_1 = _2692;
                frontier_phi_75_76_ladder_2 = _2688;
                frontier_phi_75_76_ladder_3 = _2686;
                frontier_phi_75_76_ladder_4 = _2684;
                frontier_phi_75_76_ladder_5 = _2682;
            }
            else
            {
                frontier_phi_75_76_ladder = _2551;
                frontier_phi_75_76_ladder_1 = _2553;
                frontier_phi_75_76_ladder_2 = _2549;
                frontier_phi_75_76_ladder_3 = _2547;
                frontier_phi_75_76_ladder_4 = _2545;
                frontier_phi_75_76_ladder_5 = _2543;
            }
            _2681 = frontier_phi_75_76_ladder_5;
            _2683 = frontier_phi_75_76_ladder_4;
            _2685 = frontier_phi_75_76_ladder_3;
            _2687 = frontier_phi_75_76_ladder_2;
            _2689 = frontier_phi_75_76_ladder;
            _2691 = frontier_phi_75_76_ladder_1;
        }
        float _2696 = isnan(1.0) ? _768 : (isnan(_768) ? 1.0 : min(_768, 1.0));
        _2448 = (_2696 * _2687) + _2127;
        _2450 = (_2696 * _2689) + _2128;
        _2452 = (_2696 * _2691) + _2129;
        _2454 = ((_2681 * 0.039999999105930328369140625) * _2696) + _2283;
        _2456 = ((_2683 * 0.039999999105930328369140625) * _2696) + _2284;
        _2458 = ((_2685 * 0.039999999105930328369140625) * _2696) + _2285;
    }
    else
    {
        _2448 = _2127;
        _2450 = _2128;
        _2452 = _2129;
        _2454 = _2283;
        _2456 = _2284;
        _2458 = _2285;
    }
    float _4310 = isnan(0.0) ? _754 : (isnan(_754) ? 0.0 : max(_754, 0.0));
    float _4321 = isnan(0.0) ? _755 : (isnan(_755) ? 0.0 : max(_755, 0.0));
    float _4332 = isnan(0.0) ? _756 : (isnan(_756) ? 0.0 : max(_756, 0.0));
    float _2475 = ((isnan(1.0) ? _4310 : (isnan(_4310) ? 1.0 : min(_4310, 1.0))) * (_2448 + ((isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0))) * _768))) + ((_2454 + ((isnan(0.0) ? _1786 : (isnan(_1786) ? 0.0 : max(_1786, 0.0))) * _1574)) * cbPerFrame._m0[3u].x);
    float _2476 = ((isnan(1.0) ? _4321 : (isnan(_4321) ? 1.0 : min(_4321, 1.0))) * (_2450 + ((isnan(0.0) ? _1498 : (isnan(_1498) ? 0.0 : max(_1498, 0.0))) * _768))) + ((_2456 + ((isnan(0.0) ? _1789 : (isnan(_1789) ? 0.0 : max(_1789, 0.0))) * _1574)) * cbPerFrame._m0[3u].x);
    float _2477 = ((isnan(1.0) ? _4332 : (isnan(_4332) ? 1.0 : min(_4332, 1.0))) * (_2452 + ((isnan(0.0) ? _1501 : (isnan(_1501) ? 0.0 : max(_1501, 0.0))) * _768))) + ((_2458 + ((isnan(0.0) ? _1792 : (isnan(_1792) ? 0.0 : max(_1792, 0.0))) * _1574)) * cbPerFrame._m0[3u].x);
    uint _2481 = _742 + 6u;
    float _2489 = _703 / cbSceneParam._m0[86u].x;
    float _2490 = _704 / cbSceneParam._m0[86u].y;
    vec4 _2504 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2489, _2490, (log2((isnan(cbSceneParam._m0[77u].w) ? _690 : (isnan(_690) ? cbSceneParam._m0[77u].w : min(_690, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _2506 = _2504.x;
    float _2507 = _2504.y;
    float _2508 = _2504.z;
    float _2509 = _2504.w;
    float _2605;
    float _2607;
    float _2609;
    float _2611;
    if (_690 > cbSceneParam._m0[78u].w)
    {
        float _2568 = isnan(_690) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _690 : min(cbSceneParam._m0[80u].w, _690));
        float _2569 = _2568 / _690;
        float _2580 = _2569 * _269;
        float _2581 = _270 * _2569;
        float _2582 = (-0.0) - _2581;
        float _2583 = _2569 * _271;
        float _2585 = (cbSceneParam._m0[77u].w * _2582) / _2568;
        float _2586 = _2585 + cbSceneParam._m0[79u].w;
        float _2587 = cbSceneParam._m0[79u].w - _2581;
        float _2593 = sqrt(((_2580 * _2580) + (_2581 * _2581)) + (_2583 * _2583));
        float _2596 = (1.0 - (cbSceneParam._m0[77u].w / _2568)) * _2593;
        float _2601 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _2603 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _2803;
        if (abs((_2582 - _2585) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _2803 = ((((_2586 > 0.0) ? exp2(_2601 * _2586) : (2.0 - exp2(_2603 * _2586))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _2596;
        }
        else
        {
            float _2742 = 1.0 / cbSceneParam._m0[80u].x;
            float _2743 = isnan(_2587) ? _2586 : (isnan(_2586) ? _2587 : max(_2586, _2587));
            float _2744 = isnan(_2587) ? _2586 : (isnan(_2586) ? _2587 : min(_2586, _2587));
            float _2753 = isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : min(_2743, 0.0));
            float _2754 = isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : min(_2744, 0.0));
            _2803 = ((abs(_2593 / _2582) * cbSceneParam._m0[80u].y) * ((((_2753 - _2754) * 2.0) - ((exp2(_2601 * (isnan(0.0) ? _2743 : (isnan(_2743) ? 0.0 : max(_2743, 0.0)))) - exp2(_2601 * (isnan(0.0) ? _2744 : (isnan(_2744) ? 0.0 : max(_2744, 0.0))))) * _2742)) - ((exp2(_2603 * _2753) - exp2(_2603 * _2754)) * _2742))) + (_2596 * cbSceneParam._m0[80u].z);
        }
        vec4 _2805 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_2489, _2490, 1.0), 0.0);
        float _2814 = exp2((_2803 * (-1.44269502162933349609375)) * (1.0 - _2805.w));
        float _2815 = log2(_2814);
        float _2831 = log2(_2509);
        _2605 = (exp2(_2831 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_2815 * cbSceneParam._m0[78u].x)) * _2805.x) / cbSceneParam._m0[78u].x)) + _2506;
        _2607 = (exp2(_2831 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_2815 * cbSceneParam._m0[78u].y)) * _2805.y) / cbSceneParam._m0[78u].y)) + _2507;
        _2609 = (exp2(_2831 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_2815 * cbSceneParam._m0[78u].z)) * _2805.z) / cbSceneParam._m0[78u].z)) + _2508;
        _2611 = _2814 * _2509;
    }
    else
    {
        _2605 = _2506;
        _2607 = _2507;
        _2609 = _2508;
        _2611 = _2509;
    }
    float _2623 = roundEven(cbMatDynParam._m0[0u].y);
    bool _2624 = _2623 == 3.0;
    float _2625 = log2(_2611);
    float _2632 = exp2(_2625 * cbSceneParam._m0[78u].x) * (isnan(0.0) ? _2475 : (isnan(_2475) ? 0.0 : max(_2475, 0.0)));
    float _2633 = exp2(_2625 * cbSceneParam._m0[78u].y) * (isnan(0.0) ? _2476 : (isnan(_2476) ? 0.0 : max(_2476, 0.0)));
    float _2634 = exp2(_2625 * cbSceneParam._m0[78u].z) * (isnan(0.0) ? _2477 : (isnan(_2477) ? 0.0 : max(_2477, 0.0)));
    float _2643 = (_2623 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
    SV_Target.x = _2643 * (_2624 ? _2632 : (_2632 + (cbSceneParam._m0[72u].w * _2605)));
    SV_Target.y = _2643 * (_2624 ? _2633 : (_2633 + (cbSceneParam._m0[72u].w * _2607)));
    SV_Target.z = _2643 * (_2624 ? _2634 : (_2634 + (cbSceneParam._m0[72u].w * _2609)));
    SV_Target.w = cbInstanceData._m0[_2481].w;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_2481].w;
}


