#version 460

layout(set = 0, binding = 1, std140) uniform cbTextureTilingScaleUBO
{
    vec4 _m0[25];
} cbTextureTilingScale;

layout(set = 0, binding = 3, std140) uniform cbMtdParamUBO
{
    vec4 _m0[32];
} cbMtdParam;

layout(set = 0, binding = 8, std140) uniform cbSceneParamUBO
{
    vec4 _m0[128];
} cbSceneParam;

layout(set = 0, binding = 9, std140) uniform cbPerFrameUBO
{
    vec4 _m0[23];
} cbPerFrame;

layout(set = 0, binding = 4, std140) uniform cbInstanceDataUBO
{
    vec4 _m0[26];
} cbInstanceData;

layout(set = 0, binding = 2, std140) uniform cbMatDynParamUBO
{
    vec4 _m0[17];
} cbMatDynParam;

layout(set = 0, binding = 5, std140) uniform cbLightUBO
{
    vec4 _m0[28];
} cbLight;

layout(set = 0, binding = 7, std140) uniform cbModelParamUBO
{
    vec4 _m0[41];
} cbModelParam;

layout(set = 0, binding = 30) uniform textureCube g_IBLTexture;
layout(set = 0, binding = 31) uniform textureCube g_IBLTexture2;
layout(set = 0, binding = 38) uniform texture2D g_DitherTexture;
layout(set = 0, binding = 33) uniform texture2D g_SSAOTexture;
layout(set = 0, binding = 47) uniform texture3D g_VolumeFog0;
layout(set = 0, binding = 26) uniform texture3D g_IrradianceVolumeX;
layout(set = 0, binding = 27) uniform texture3D g_IrradianceVolumeY;
layout(set = 0, binding = 28) uniform texture3D g_IrradianceVolumeZ;
layout(set = 0, binding = 29) uniform texture3D g_IrradianceVolumeW;
layout(set = 0, binding = 34) uniform texture3D g_IrradianceVolume2X;
layout(set = 0, binding = 35) uniform texture3D g_IrradianceVolume2Y;
layout(set = 0, binding = 36) uniform texture3D g_IrradianceVolume2Z;
layout(set = 0, binding = 37) uniform texture3D g_IrradianceVolume2W;
layout(set = 0, binding = 61) uniform usamplerBuffer g_PointLightRenderingBuffer;
layout(set = 0, binding = 62) uniform usamplerBuffer g_SpotLightRenderingBuffer;
layout(set = 0, binding = 59) uniform usamplerBuffer g_lightClassification;
layout(set = 0, binding = 60) uniform usamplerBuffer g_lightClusterGridBuffer;
layout(set = 0, binding = 0) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_0;
layout(set = 0, binding = 1) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_1;
layout(set = 0, binding = 10) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_23;
layout(set = 0, binding = 11) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_4;
layout(set = 0, binding = 12) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_6;
layout(set = 0, binding = 13) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_7;
layout(set = 0, binding = 14) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_8;
layout(set = 0, binding = 15) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_9;
layout(set = 0, binding = 2) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_14;
layout(set = 0, binding = 3) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_16;
layout(set = 0, binding = 4) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_17;
layout(set = 0, binding = 5) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_18;
layout(set = 0, binding = 6) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_19;
layout(set = 0, binding = 7) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_2;
layout(set = 0, binding = 8) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_20;
layout(set = 0, binding = 9) uniform texture2D C_Enemy_ColorMaterial_PF_snp_0_Texture2D_22;
layout(set = 0, binding = 16) uniform texture2DArray C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_0;
layout(set = 0, binding = 17) uniform texture2DArray C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_1;
layout(set = 0, binding = 0) uniform sampler SS_DiffuseMap;
layout(set = 0, binding = 2) uniform sampler SS_BumpMap;
layout(set = 0, binding = 6) uniform sampler SS_WrapPoint;
layout(set = 0, binding = 8) uniform sampler SS_WrapLinear;
layout(set = 0, binding = 9) uniform sampler SS_ClampLinear;

layout(location = 1) in vec4 POSITION_1;
layout(location = 2) in vec4 NORMAL;
layout(location = 3) in vec4 TANGENT;
layout(location = 4) in float TEXCOORD;
layout(location = 4, component = 1) in float TEXCOORD_1;
layout(location = 5) in vec4 TEXCOORD_3;
layout(location = 4, component = 2) in float TEXCOORD_6;
layout(location = 4, component = 3) in float TEXCOORD_7;
layout(location = 6) in float TEXCOORD_8;
layout(location = 0) out vec4 SV_Target;
layout(location = 1) out vec4 SV_Target_1;
bool discard_state;

float _1614;
float _3990;
float _3991;
float _3992;
float _3993;

void discard_exit()
{
    if (discard_state)
    {
        discard;
    }
}

void main()
{
    discard_state = false;
    SV_Target.x = 0.0;
    SV_Target.y = 0.0;
    SV_Target.z = 0.0;
    SV_Target.w = 0.0;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = 0.0;
    float _230 = ((NORMAL.y * TANGENT.z) - (NORMAL.z * TANGENT.y)) * TANGENT.w;
    float _231 = ((NORMAL.z * TANGENT.x) - (NORMAL.x * TANGENT.z)) * TANGENT.w;
    float _232 = ((NORMAL.x * TANGENT.y) - (NORMAL.y * TANGENT.x)) * TANGENT.w;
    float _238 = inversesqrt(dot(vec3(_230, _231, _232), vec3(_230, _231, _232)));
    float _245 = inversesqrt(dot(vec3(NORMAL.x, NORMAL.y, NORMAL.z), vec3(NORMAL.x, NORMAL.y, NORMAL.z)));
    float _252 = inversesqrt(dot(vec3(TANGENT.x, TANGENT.y, TANGENT.z), vec3(TANGENT.x, TANGENT.y, TANGENT.z)));
    vec4 _283 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_23, SS_WrapLinear), vec2((cbTextureTilingScale._m0[10u].x * TEXCOORD) + cbTextureTilingScale._m0[10u].z, (cbTextureTilingScale._m0[10u].y * TEXCOORD_1) + cbTextureTilingScale._m0[10u].w));
    vec4 _317 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_0, SS_BumpMap), vec2((cbTextureTilingScale._m0[0u].x * TEXCOORD) + cbTextureTilingScale._m0[0u].z, (cbTextureTilingScale._m0[0u].y * TEXCOORD_1) + cbTextureTilingScale._m0[0u].w));
    float _321 = _317.z;
    float _332 = exp2(log2((1.0 - _321) * cbMtdParam._m0[26u].w) * cbMtdParam._m0[26u].x);
    float _333 = isnan(0.0) ? _332 : (isnan(_332) ? 0.0 : max(_332, 0.0));
    float _334 = isnan(1.0) ? _333 : (isnan(_333) ? 1.0 : min(_333, 1.0));
    vec4 _348 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_7, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[13u].x * TEXCOORD) + cbTextureTilingScale._m0[13u].z, (cbTextureTilingScale._m0[13u].y * TEXCOORD_1) + cbTextureTilingScale._m0[13u].w));
    float _360 = exp2(log2(_348.w * cbMtdParam._m0[28u].w) * cbMtdParam._m0[23u].x);
    float _361 = isnan(0.0) ? _360 : (isnan(_360) ? 0.0 : max(_360, 0.0));
    float _362 = isnan(1.0) ? _361 : (isnan(_361) ? 1.0 : min(_361, 1.0));
    float _371 = exp2(log2(cbMtdParam._m0[23u].y * _321) * cbMtdParam._m0[22u].y);
    float _372 = isnan(0.0) ? _371 : (isnan(_371) ? 0.0 : max(_371, 0.0));
    float _373 = isnan(1.0) ? _372 : (isnan(_372) ? 1.0 : min(_372, 1.0));
    vec4 _385 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_14, SS_WrapLinear), vec2((cbTextureTilingScale._m0[2u].x * TEXCOORD) + cbTextureTilingScale._m0[2u].z, (cbTextureTilingScale._m0[2u].y * TEXCOORD_1) + cbTextureTilingScale._m0[2u].w));
    float _388 = _385.y;
    float _391 = (_385.x + (-0.02500000037252902984619140625)) * 8.0;
    float _395 = roundEven(5.0 - _391);
    float _396 = isnan(0.0) ? _395 : (isnan(_395) ? 0.0 : max(_395, 0.0));
    float _397 = isnan(4.0) ? _396 : (isnan(_396) ? 4.0 : min(_396, 4.0));
    float _410 = floor(_397);
    vec4 _413 = texture(sampler2DArray(C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_0, SS_DiffuseMap), vec3((cbTextureTilingScale._m0[16u].x * TEXCOORD) + cbTextureTilingScale._m0[16u].z, (cbTextureTilingScale._m0[16u].y * TEXCOORD_1) + cbTextureTilingScale._m0[16u].w, _410));
    float _208[6];
    float _209[6];
    float _210[6];
    _208[0u] = cbMtdParam._m0[17u].x;
    _209[0u] = cbMtdParam._m0[17u].y;
    _210[0u] = cbMtdParam._m0[17u].z;
    _208[1u] = cbMtdParam._m0[15u].x;
    _209[1u] = cbMtdParam._m0[15u].y;
    _210[1u] = cbMtdParam._m0[15u].z;
    _208[2u] = cbMtdParam._m0[14u].x;
    _209[2u] = cbMtdParam._m0[14u].y;
    _210[2u] = cbMtdParam._m0[14u].z;
    _208[3u] = cbMtdParam._m0[13u].x;
    _209[3u] = cbMtdParam._m0[13u].y;
    _210[3u] = cbMtdParam._m0[13u].z;
    _208[4u] = cbMtdParam._m0[12u].x;
    _209[4u] = cbMtdParam._m0[12u].y;
    _210[4u] = cbMtdParam._m0[12u].z;
    _208[5u] = cbMtdParam._m0[18u].x;
    _209[5u] = cbMtdParam._m0[18u].y;
    _210[5u] = cbMtdParam._m0[18u].z;
    float _477 = roundEven(_391);
    float _478 = isnan(0.0) ? _477 : (isnan(_477) ? 0.0 : max(_477, 0.0));
    uint _480 = uint(int(isnan(5.0) ? _478 : (isnan(_478) ? 5.0 : min(_478, 5.0))));
    vec4 _510 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_1, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[1u].x * TEXCOORD) + cbTextureTilingScale._m0[1u].z, (cbTextureTilingScale._m0[1u].y * TEXCOORD_1) + cbTextureTilingScale._m0[1u].w));
    float _521 = cbMtdParam._m0[9u].x * _510.x;
    float _522 = cbMtdParam._m0[9u].y * _510.y;
    float _523 = cbMtdParam._m0[9u].z * _510.z;
    float _530 = ((((((_208[_480] - cbMtdParam._m0[10u].x) * _388) + cbMtdParam._m0[10u].x) * _413.x) - _521) * _373) + _521;
    float _531 = ((((((_209[_480] - cbMtdParam._m0[10u].y) * _388) + cbMtdParam._m0[10u].y) * _413.y) - _522) * _373) + _522;
    float _532 = ((((((_210[_480] - cbMtdParam._m0[10u].z) * _388) + cbMtdParam._m0[10u].z) * _413.z) - _523) * _373) + _523;
    float _538 = exp2(log2(_317.w) * cbMtdParam._m0[23u].w);
    vec4 _551 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_2, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[7u].x * TEXCOORD) + cbTextureTilingScale._m0[7u].z, (cbTextureTilingScale._m0[7u].y * TEXCOORD_1) + cbTextureTilingScale._m0[7u].w));
    float _570 = (((cbMtdParam._m0[16u].x * _551.x) - _530) * _538) + _530;
    float _571 = (((cbMtdParam._m0[16u].y * _551.y) - _531) * _538) + _531;
    float _572 = (((cbMtdParam._m0[16u].z * _551.z) - _532) * _538) + _532;
    vec4 _585 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_4, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[11u].x * TEXCOORD) + cbTextureTilingScale._m0[11u].z, (cbTextureTilingScale._m0[11u].y * TEXCOORD_1) + cbTextureTilingScale._m0[11u].w));
    float _605 = (((cbMtdParam._m0[19u].x * _585.x) - _570) * _362) + _570;
    float _606 = (((cbMtdParam._m0[19u].y * _585.y) - _571) * _362) + _571;
    float _607 = (((cbMtdParam._m0[19u].z * _585.z) - _572) * _362) + _572;
    vec4 _619 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_19, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[6u].x * TEXCOORD) + cbTextureTilingScale._m0[6u].z, (cbTextureTilingScale._m0[6u].y * TEXCOORD_1) + cbTextureTilingScale._m0[6u].w));
    float _644 = (_348.x * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].x * _619.x) - _605) * _334) + _605);
    float _646 = (_348.y * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].y * _619.y) - _606) * _334) + _606);
    float _648 = (_348.z * 4.55000019073486328125) * ((((cbMtdParam._m0[20u].z * _619.z) - _607) * _334) + _607);
    vec4 _660 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_17, SS_DiffuseMap), vec2((cbTextureTilingScale._m0[4u].x * TEXCOORD) + cbTextureTilingScale._m0[4u].z, (cbTextureTilingScale._m0[4u].y * TEXCOORD_1) + cbTextureTilingScale._m0[4u].w));
    float _678 = TEXCOORD_3.x - ((cbMtdParam._m0[24u].x * (1.0 - TEXCOORD_3.x)) * (texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_18, SS_WrapLinear), vec2((cbTextureTilingScale._m0[5u].x * TEXCOORD) + cbTextureTilingScale._m0[5u].z, (cbTextureTilingScale._m0[5u].y * TEXCOORD_1) + cbTextureTilingScale._m0[5u].w)).x + 0.00999999977648258209228515625));
    float _680 = _678 * (cbMtdParam._m0[24u].z + 1.0);
    float _4052 = isnan(0.0) ? _680 : (isnan(_680) ? 0.0 : max(_680, 0.0));
    float _681 = isnan(1.0) ? _4052 : (isnan(_4052) ? 1.0 : min(_4052, 1.0));
    float _688 = (_681 * ((cbMtdParam._m0[11u].x * _660.x) - _644)) + _644;
    float _689 = (((cbMtdParam._m0[11u].y * _660.y) - _646) * _681) + _646;
    float _690 = (((cbMtdParam._m0[11u].z * _660.z) - _648) * _681) + _648;
    float _694 = cbMtdParam._m0[28u].y * TEXCOORD_6;
    float _702 = (_694 - (((_283.x + 0.00999999977648258209228515625) * cbMtdParam._m0[27u].w) * (1.0 - _694))) * (cbMtdParam._m0[28u].x + 1.0);
    float _4063 = isnan(0.0) ? _702 : (isnan(_702) ? 0.0 : max(_702, 0.0));
    float _703 = isnan(1.0) ? _4063 : (isnan(_4063) ? 1.0 : min(_4063, 1.0));
    float _710 = ((cbMtdParam._m0[21u].x - _688) * _703) + _688;
    float _711 = ((cbMtdParam._m0[21u].y - _689) * _703) + _689;
    float _712 = ((cbMtdParam._m0[21u].z - _690) * _703) + _690;
    float _203[5];
    float _204[5];
    _203[0u] = cbMtdParam._m0[29u].x;
    _204[0u] = cbMtdParam._m0[29u].y;
    _203[1u] = cbMtdParam._m0[31u].x;
    _204[1u] = cbMtdParam._m0[31u].y;
    _203[2u] = cbMtdParam._m0[30u].z;
    _204[2u] = cbMtdParam._m0[30u].w;
    _203[3u] = cbMtdParam._m0[30u].x;
    _204[3u] = cbMtdParam._m0[30u].y;
    _203[4u] = cbMtdParam._m0[29u].z;
    _204[4u] = cbMtdParam._m0[29u].w;
    float _752 = isnan(0.0) ? _397 : (isnan(_397) ? 0.0 : max(_397, 0.0));
    uint _754 = uint(int(isnan(4.0) ? _752 : (isnan(_752) ? 4.0 : min(_752, 4.0))));
    float _761 = ((_204[_754] - cbMtdParam._m0[22u].z) * _373) + cbMtdParam._m0[22u].z;
    float _764 = ((cbMtdParam._m0[22u].w - _761) * _538) + _761;
    float _767 = ((cbMtdParam._m0[25u].y - _764) * _362) + _764;
    float _770 = ((cbMtdParam._m0[26u].y - _767) * _334) + _767;
    float _775 = (cbMtdParam._m0[24u].y + 1.0) * _678;
    float _4084 = isnan(0.0) ? _775 : (isnan(_775) ? 0.0 : max(_775, 0.0));
    float _776 = isnan(1.0) ? _4084 : (isnan(_4084) ? 1.0 : min(_4084, 1.0));
    float _778 = _770 - (_770 * _776);
    float _780 = _778 - (_778 * _694);
    vec4 _793 = texture(sampler2DArray(C_Enemy_ColorMaterial_PF_snp_0_Texture2DArray_1, SS_BumpMap), vec3((cbTextureTilingScale._m0[17u].x * TEXCOORD) + cbTextureTilingScale._m0[17u].z, (cbTextureTilingScale._m0[17u].y * TEXCOORD_1) + cbTextureTilingScale._m0[17u].w, _410));
    vec4 _810 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_6, SS_BumpMap), vec2((cbTextureTilingScale._m0[12u].x * TEXCOORD) + cbTextureTilingScale._m0[12u].z, (cbTextureTilingScale._m0[12u].y * TEXCOORD_1) + cbTextureTilingScale._m0[12u].w));
    float _812 = _810.x;
    float _813 = _810.y;
    float _818 = cbMtdParam._m0[22u].x + _810.z;
    float _821 = (((_793.z + _203[_754]) - _818) * _373) + _818;
    vec4 _833 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_8, SS_BumpMap), vec2((cbTextureTilingScale._m0[14u].x * TEXCOORD) + cbTextureTilingScale._m0[14u].z, (cbTextureTilingScale._m0[14u].y * TEXCOORD_1) + cbTextureTilingScale._m0[14u].w));
    float _844 = (((_833.z - _821) + cbMtdParam._m0[28u].z) * _538) + _821;
    float _850 = ((((_321 * 2.0) * _844) - _844) * cbMtdParam._m0[24u].w) + _844;
    vec4 _862 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_9, SS_BumpMap), vec2((cbTextureTilingScale._m0[15u].x * TEXCOORD) + cbTextureTilingScale._m0[15u].z, (cbTextureTilingScale._m0[15u].y * TEXCOORD_1) + cbTextureTilingScale._m0[15u].w));
    float _873 = (((cbMtdParam._m0[23u].z + _862.z) - _850) * _362) + _850;
    vec4 _886 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_20, SS_BumpMap), vec2((cbTextureTilingScale._m0[8u].x * TEXCOORD) + cbTextureTilingScale._m0[8u].z, (cbTextureTilingScale._m0[8u].y * TEXCOORD_1) + cbTextureTilingScale._m0[8u].w));
    float _897 = (((_886.z - _873) + cbMtdParam._m0[26u].z) * _334) + _873;
    vec4 _909 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_16, SS_BumpMap), vec2((cbTextureTilingScale._m0[3u].x * TEXCOORD) + cbTextureTilingScale._m0[3u].z, (cbTextureTilingScale._m0[3u].y * TEXCOORD_1) + cbTextureTilingScale._m0[3u].w));
    float _921 = ((_909.z - _897) * _776) + _897;
    vec4 _936 = texture(sampler2D(C_Enemy_ColorMaterial_PF_snp_0_Texture2D_22, SS_BumpMap), vec2((cbTextureTilingScale._m0[9u].x * TEXCOORD) + cbTextureTilingScale._m0[9u].z, (cbTextureTilingScale._m0[9u].y * TEXCOORD_1) + cbTextureTilingScale._m0[9u].w));
    float _950 = ((cbMtdParam._m0[27u].z * _694) * ((_936.z * cbMtdParam._m0[27u].y) - _921)) + _921;
    float _965 = ((_793.x - _812) * _373) + _812;
    float _966 = ((_793.y - _813) * _373) + _813;
    float _971 = ((_833.x - _965) * _538) + _965;
    float _972 = ((_833.y - _966) * _538) + _966;
    float _977 = ((_862.x - _971) * _362) + _971;
    float _978 = ((_862.y - _972) * _362) + _972;
    float _987 = ((((_886.x - _977) * _334) + _977) * 2.0) + (-1.0);
    float _988 = ((((_886.y - _978) * _334) + _978) * 2.0) + (-1.0);
    float _989 = dot(vec2(_987, _988), vec2(_987, _988));
    float _4095 = isnan(0.0) ? _989 : (isnan(_989) ? 0.0 : max(_989, 0.0));
    float _994 = sqrt(1.0 - (isnan(1.0) ? _4095 : (isnan(_4095) ? 1.0 : min(_4095, 1.0))));
    float _1010 = (((cbMtdParam._m0[25u].z * ((_317.x * 2.0) + (-1.0))) + _987) + (((((_909.x * 2.0) + (-1.0)) * TEXCOORD_3.x) * cbMtdParam._m0[25u].w) * _776)) + ((((_936.x * 2.0) + (-1.0)) * _694) * cbMtdParam._m0[27u].x);
    float _1011 = (((cbMtdParam._m0[25u].z * ((_317.y * 2.0) + (-1.0))) + _988) + (((((_909.y * 2.0) + (-1.0)) * TEXCOORD_3.y) * cbMtdParam._m0[25u].w) * _776)) + (((cbMtdParam._m0[28u].y * TEXCOORD_7) * ((_936.y * 2.0) + (-1.0))) * cbMtdParam._m0[27u].x);
    float _1013 = gl_FragCoord.x * 0.125;
    float _1015 = gl_FragCoord.y * 0.125;
    float _1025 = fma(_994, _245 * NORMAL.x, fma(_1011, _252 * TANGENT.x, (_238 * _230) * _1010));
    float _1028 = fma(_994, _245 * NORMAL.y, fma(_1011, _252 * TANGENT.y, (_238 * _231) * _1010));
    float _1031 = fma(_994, _245 * NORMAL.z, fma(_1011, _252 * TANGENT.z, (_238 * _232) * _1010));
    float _1035 = inversesqrt(dot(vec3(_1025, _1028, _1031), vec3(_1025, _1028, _1031)));
    float _1036 = _1035 * _1025;
    float _1037 = _1035 * _1028;
    float _1038 = _1035 * _1031;
    float _4106 = isnan(0.0) ? _950 : (isnan(_950) ? 0.0 : max(_950, 0.0));
    float _1039 = isnan(1.0) ? _4106 : (isnan(_4106) ? 1.0 : min(_4106, 1.0));
    float _4117 = isnan(0.0) ? _710 : (isnan(_710) ? 0.0 : max(_710, 0.0));
    float _4128 = isnan(0.0) ? _711 : (isnan(_711) ? 0.0 : max(_711, 0.0));
    float _4139 = isnan(0.0) ? _712 : (isnan(_712) ? 0.0 : max(_712, 0.0));
    float _4150 = isnan(0.0) ? _780 : (isnan(_780) ? 0.0 : max(_780, 0.0));
    float _1043 = isnan(1.0) ? _4150 : (isnan(_4150) ? 1.0 : min(_4150, 1.0));
    if (!(cbMtdParam._m0[25u].x >= ((texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_1013, _1015)).w * 0.9900000095367431640625) + 0.00999999977648258209228515625)))
    {
        discard_state = true;
    }
    float _1063 = (floatBitsToUint(cbSceneParam._m0[88u]).x != 0u) ? POSITION_1.w : (cbSceneParam._m0[0u].x - (cbSceneParam._m0[0u].z * POSITION_1.z));
    float _1103 = fma(POSITION_1.w, cbSceneParam._m0[11u].w, fma(POSITION_1.z, cbSceneParam._m0[11u].z, fma(POSITION_1.y, cbSceneParam._m0[11u].y, cbSceneParam._m0[11u].x * POSITION_1.x)));
    float _1113 = cbSceneParam._m0[71u].x - (fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x))) / _1103);
    float _1114 = cbSceneParam._m0[71u].y - (fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x))) / _1103);
    float _1115 = cbSceneParam._m0[71u].z - (fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x))) / _1103);
    float _1119 = inversesqrt(dot(vec3(_1113, _1114, _1115), vec3(_1113, _1114, _1115)));
    float _1120 = _1113 * _1119;
    float _1121 = _1114 * _1119;
    float _1122 = _1115 * _1119;
    vec4 _1124 = texture(sampler2D(g_DitherTexture, SS_WrapPoint), vec2(_1013, _1015));
    float _1126 = _1124.w;
    if (!(floatBitsToUint(cbMatDynParam._m0[6u]).x == 0u))
    {
        float _1296 = sqrt(((_1113 * _1113) + (_1114 * _1114)) + (_1115 * _1115));
        float _1302 = (cbMatDynParam._m0[5u].x * _1296) + cbMatDynParam._m0[5u].y;
        float _4161 = isnan(0.0) ? _1302 : (isnan(_1302) ? 0.0 : max(_1302, 0.0));
        float _1303 = isnan(1.0) ? _4161 : (isnan(_4161) ? 1.0 : min(_4161, 1.0));
        float _1307 = (cbMatDynParam._m0[5u].z * _1296) + cbMatDynParam._m0[5u].w;
        float _4172 = isnan(0.0) ? _1307 : (isnan(_1307) ? 0.0 : max(_1307, 0.0));
        if (((cbMatDynParam._m0[6u].y * ((isnan(1.0) ? _4172 : (isnan(_4172) ? 1.0 : min(_4172, 1.0))) - _1303)) + _1303) < ((_1126 * 0.9900000095367431640625) + 0.00999999977648258209228515625))
        {
            discard_state = true;
        }
    }
    float _1137 = cbSceneParam._m0[85u].z * gl_FragCoord.x;
    float _1138 = cbSceneParam._m0[85u].w * gl_FragCoord.y;
    float _1156 = fma(_1038, cbSceneParam._m0[5u].z, fma(_1037, cbSceneParam._m0[5u].y, cbSceneParam._m0[5u].x * _1036));
    float _1159 = fma(_1038, cbSceneParam._m0[6u].z, fma(_1037, cbSceneParam._m0[6u].y, cbSceneParam._m0[6u].x * _1036));
    float _1162 = fma(_1038, cbSceneParam._m0[7u].z, fma(_1037, cbSceneParam._m0[7u].y, cbSceneParam._m0[7u].x * _1036));
    uint _1175 = uint(roundEven(NORMAL.w)) * 13u;
    uint _1176 = _1175 + 9u;
    uint _1177 = _1176 + uint(cbMatDynParam._m0[0u].w);
    float _1183 = (cbMtdParam._m0[0u].x * (isnan(1.0) ? _4117 : (isnan(_4117) ? 1.0 : min(_4117, 1.0)))) * cbInstanceData._m0[_1177].x;
    float _1184 = (cbMtdParam._m0[0u].y * (isnan(1.0) ? _4128 : (isnan(_4128) ? 1.0 : min(_4128, 1.0)))) * cbInstanceData._m0[_1177].y;
    float _1185 = (cbMtdParam._m0[0u].z * (isnan(1.0) ? _4139 : (isnan(_4139) ? 1.0 : min(_4139, 1.0)))) * cbInstanceData._m0[_1177].z;
    float _4183 = isnan(0.0) ? _1183 : (isnan(_1183) ? 0.0 : max(_1183, 0.0));
    float _1186 = isnan(1.0) ? _4183 : (isnan(_4183) ? 1.0 : min(_4183, 1.0));
    float _4194 = isnan(0.0) ? _1184 : (isnan(_1184) ? 0.0 : max(_1184, 0.0));
    float _1187 = isnan(1.0) ? _4194 : (isnan(_4194) ? 1.0 : min(_4194, 1.0));
    float _4205 = isnan(0.0) ? _1185 : (isnan(_1185) ? 0.0 : max(_1185, 0.0));
    float _1188 = isnan(1.0) ? _4205 : (isnan(_4205) ? 1.0 : min(_4205, 1.0));
    float _1189 = 1.0 - _1043;
    float _1190 = _1186 * _1189;
    float _1191 = _1187 * _1189;
    float _1192 = _1188 * _1189;
    float _1197 = (_1186 + (-0.039999999105930328369140625)) * _1043;
    float _1198 = (_1187 + (-0.039999999105930328369140625)) * _1043;
    float _1199 = (_1188 + (-0.039999999105930328369140625)) * _1043;
    float _1200 = _1197 + 0.039999999105930328369140625;
    float _1202 = _1198 + 0.039999999105930328369140625;
    float _1203 = _1199 + 0.039999999105930328369140625;
    vec4 _1212 = texture(sampler2D(g_SSAOTexture, SS_WrapLinear), vec2(cbSceneParam._m0[86u].x * _1137, cbSceneParam._m0[86u].y * _1138));
    float _1215 = _1212.x * TEXCOORD_3.w;
    float _1216 = dot(vec3(_1036, _1037, _1038), vec3(_1120, _1121, _1122));
    float _1219 = _1216 * 2.0;
    float _1223 = (_1219 * _1036) - _1120;
    float _1224 = (_1219 * _1037) - _1121;
    float _1225 = (_1219 * _1038) - _1122;
    float _1229 = abs(dot(vec3(_1120, _1121, _1122), vec3(_1036, _1037, _1038)));
    float _4216 = isnan(0.0) ? _1229 : (isnan(_1229) ? 0.0 : max(_1229, 0.0));
    float _1231 = sqrt(_1039);
    float _1242 = exp2((_1231 * 5.0) * log2(1.0 - ((isnan(1.0) ? _4216 : (isnan(_4216) ? 1.0 : min(_4216, 1.0))) * 0.999000012874603271484375))) / (4.0 - (_1231 * 3.0));
    float _1248 = (1.0 - _1242) * ((_1231 * 0.60000002384185791015625) + 0.4000000059604644775390625);
    float _1249 = _1242 * _1231;
    float _1277 = fma(POSITION_1.w, cbSceneParam._m0[8u].w, fma(POSITION_1.z, cbSceneParam._m0[8u].z, fma(POSITION_1.y, cbSceneParam._m0[8u].y, cbSceneParam._m0[8u].x * POSITION_1.x)));
    float _1281 = fma(POSITION_1.w, cbSceneParam._m0[9u].w, fma(POSITION_1.z, cbSceneParam._m0[9u].z, fma(POSITION_1.y, cbSceneParam._m0[9u].y, cbSceneParam._m0[9u].x * POSITION_1.x)));
    float _1285 = fma(POSITION_1.w, cbSceneParam._m0[10u].w, fma(POSITION_1.z, cbSceneParam._m0[10u].z, fma(POSITION_1.y, cbSceneParam._m0[10u].y, cbSceneParam._m0[10u].x * POSITION_1.x)));
    float _1613;
    float _1615;
    float _1616;
    float _1617;
    float _1618;
    float _1619;
    float _1620;
    float _1621;
    float _1622;
    float _1623;
    float _1624;
    float _1625;
    float _1626;
    float _1627;
    float _1628;
    if (cbModelParam._m0[36u].x > 0.0)
    {
        float _1338 = fma(_1285, cbModelParam._m0[26u].z, fma(_1281, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1277));
        float _1342 = fma(_1285, cbModelParam._m0[27u].z, fma(_1281, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1277));
        float _1346 = fma(_1285, cbModelParam._m0[28u].z, fma(_1281, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1277));
        float _1371 = _1277 + _1036;
        float _1372 = _1281 + _1037;
        float _1373 = _1285 + _1038;
        float _1383 = fma(_1373, cbModelParam._m0[26u].z, fma(_1372, cbModelParam._m0[26u].y, cbModelParam._m0[26u].x * _1371)) - _1338;
        float _1384 = fma(_1373, cbModelParam._m0[27u].z, fma(_1372, cbModelParam._m0[27u].y, cbModelParam._m0[27u].x * _1371)) - _1342;
        float _1385 = fma(_1373, cbModelParam._m0[28u].z, fma(_1372, cbModelParam._m0[28u].y, cbModelParam._m0[28u].x * _1371)) - _1346;
        float _1389 = inversesqrt(dot(vec3(_1383, _1384, _1385), vec3(_1383, _1384, _1385)));
        float _1402 = ((_1389 * _1383) / cbModelParam._m0[34u].x) + ((cbModelParam._m0[37u].x * ((((_1338 + cbModelParam._m0[26u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1403 = ((_1389 * _1384) / cbModelParam._m0[34u].y) + ((cbModelParam._m0[37u].y * ((((_1342 + cbModelParam._m0[27u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1404 = ((_1389 * _1385) / cbModelParam._m0[34u].z) + ((((((_1346 + cbModelParam._m0[28u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[37u].z) + 0.5);
        vec4 _1407 = textureLod(sampler3D(g_IrradianceVolumeX, SS_ClampLinear), vec3(_1402, _1403, _1404), 0.0);
        vec4 _1414 = textureLod(sampler3D(g_IrradianceVolumeY, SS_ClampLinear), vec3(_1402, _1403, _1404), 0.0);
        vec4 _1421 = textureLod(sampler3D(g_IrradianceVolumeZ, SS_ClampLinear), vec3(_1402, _1403, _1404), 0.0);
        vec4 _1428 = textureLod(sampler3D(g_IrradianceVolumeW, SS_ClampLinear), vec3(_1402, _1403, _1404), 0.0);
        float _1441 = exp2((_1407.w + (-0.5)) * 20.0) * 2.0;
        float _1442 = _1441 * (_1407.x + (-0.5));
        float _1443 = _1441 * (_1407.y + (-0.5));
        float _1444 = _1441 * (_1407.z + (-0.5));
        float _1451 = exp2((_1414.w + (-0.5)) * 20.0) * 2.0;
        float _1452 = _1451 * (_1414.x + (-0.5));
        float _1453 = _1451 * (_1414.y + (-0.5));
        float _1454 = _1451 * (_1414.z + (-0.5));
        float _1461 = exp2((_1421.w + (-0.5)) * 20.0) * 2.0;
        float _1462 = _1461 * (_1421.x + (-0.5));
        float _1463 = _1461 * (_1421.y + (-0.5));
        float _1464 = _1461 * (_1421.z + (-0.5));
        float _1471 = exp2((_1428.w + (-0.5)) * 20.0) * 2.0;
        float _1472 = _1471 * (_1428.x + (-0.5));
        float _1473 = _1471 * (_1428.y + (-0.5));
        float _1474 = _1471 * (_1428.z + (-0.5));
        float _1475 = isnan(0.0) ? _1472 : (isnan(_1472) ? 0.0 : max(_1472, 0.0));
        float _1476 = isnan(0.0) ? _1473 : (isnan(_1473) ? 0.0 : max(_1473, 0.0));
        float _1477 = isnan(0.0) ? _1474 : (isnan(_1474) ? 0.0 : max(_1474, 0.0));
        float _1478 = _1442 * 0.5;
        float _1479 = _1452 * 0.5;
        float _1480 = _1462 * 0.5;
        float _1481 = dot(vec3(_1478, _1479, _1480), vec3(_1478, _1479, _1480));
        float _1486 = (_1481 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1481);
        float _1495 = (dot(vec3(_1036, _1037, _1038), vec3(_1486 * _1478, _1486 * _1479, _1486 * _1480)) + 1.0) * 0.5;
        float _4242 = isnan(0.0) ? _1495 : (isnan(_1495) ? 0.0 : max(_1495, 0.0));
        float _1505 = sqrt(((_1479 * _1479) + (_1478 * _1478)) + (_1480 * _1480)) / (_1475 + 9.9999997473787516355514526367188e-06);
        float _4253 = isnan(0.0) ? _1505 : (isnan(_1505) ? 0.0 : max(_1505, 0.0));
        float _1506 = isnan(1.0) ? _4253 : (isnan(_4253) ? 1.0 : min(_4253, 1.0));
        float _1507 = _1506 * 2.0;
        float _1511 = (1.0 - _1506) / (_1506 + 1.0);
        float _4264 = isnan(0.0) ? _1511 : (isnan(_1511) ? 0.0 : max(_1511, 0.0));
        float _1512 = isnan(1.0) ? _4264 : (isnan(_4264) ? 1.0 : min(_4264, 1.0));
        float _1521 = ((((1.0 - _1512) * (_1507 + 2.0)) * exp2(log2(isnan(1.0) ? _4242 : (isnan(_4242) ? 1.0 : min(_4242, 1.0))) * (_1507 + 1.0))) + _1512) * _1475;
        float _1522 = _1443 * 0.5;
        float _1523 = _1453 * 0.5;
        float _1524 = _1463 * 0.5;
        float _1525 = dot(vec3(_1522, _1523, _1524), vec3(_1522, _1523, _1524));
        float _1530 = (_1525 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1525);
        float _1538 = (dot(vec3(_1036, _1037, _1038), vec3(_1530 * _1522, _1530 * _1523, _1530 * _1524)) + 1.0) * 0.5;
        float _4275 = isnan(0.0) ? _1538 : (isnan(_1538) ? 0.0 : max(_1538, 0.0));
        float _1547 = sqrt(((_1523 * _1523) + (_1522 * _1522)) + (_1524 * _1524)) / (_1476 + 9.9999997473787516355514526367188e-06);
        float _4286 = isnan(0.0) ? _1547 : (isnan(_1547) ? 0.0 : max(_1547, 0.0));
        float _1548 = isnan(1.0) ? _4286 : (isnan(_4286) ? 1.0 : min(_4286, 1.0));
        float _1549 = _1548 * 2.0;
        float _1553 = (1.0 - _1548) / (_1548 + 1.0);
        float _4297 = isnan(0.0) ? _1553 : (isnan(_1553) ? 0.0 : max(_1553, 0.0));
        float _1554 = isnan(1.0) ? _4297 : (isnan(_4297) ? 1.0 : min(_4297, 1.0));
        float _1563 = ((((1.0 - _1554) * (_1549 + 2.0)) * exp2(log2(isnan(1.0) ? _4275 : (isnan(_4275) ? 1.0 : min(_4275, 1.0))) * (_1549 + 1.0))) + _1554) * _1476;
        float _1564 = _1444 * 0.5;
        float _1565 = _1454 * 0.5;
        float _1566 = _1464 * 0.5;
        float _1567 = dot(vec3(_1564, _1565, _1566), vec3(_1564, _1565, _1566));
        float _1572 = (_1567 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1567);
        float _1580 = (dot(vec3(_1036, _1037, _1038), vec3(_1572 * _1564, _1572 * _1565, _1572 * _1566)) + 1.0) * 0.5;
        float _4308 = isnan(0.0) ? _1580 : (isnan(_1580) ? 0.0 : max(_1580, 0.0));
        float _1589 = sqrt(((_1565 * _1565) + (_1564 * _1564)) + (_1566 * _1566)) / (_1477 + 9.9999997473787516355514526367188e-06);
        float _4319 = isnan(0.0) ? _1589 : (isnan(_1589) ? 0.0 : max(_1589, 0.0));
        float _1590 = isnan(1.0) ? _4319 : (isnan(_4319) ? 1.0 : min(_4319, 1.0));
        float _1591 = _1590 * 2.0;
        float _1595 = (1.0 - _1590) / (_1590 + 1.0);
        float _4330 = isnan(0.0) ? _1595 : (isnan(_1595) ? 0.0 : max(_1595, 0.0));
        float _1596 = isnan(1.0) ? _4330 : (isnan(_4330) ? 1.0 : min(_4330, 1.0));
        float _1605 = ((((1.0 - _1596) * (_1591 + 2.0)) * exp2(log2(isnan(1.0) ? _4308 : (isnan(_4308) ? 1.0 : min(_4308, 1.0))) * (_1591 + 1.0))) + _1596) * _1477;
        _1613 = _1444;
        _1615 = _1443;
        _1616 = _1442;
        _1617 = _1454;
        _1618 = _1453;
        _1619 = _1452;
        _1620 = _1464;
        _1621 = _1463;
        _1622 = _1462;
        _1623 = _1477;
        _1624 = _1476;
        _1625 = _1475;
        _1626 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1521 : (isnan(_1521) ? 0.0 : max(_1521, 0.0)));
        _1627 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1563 : (isnan(_1563) ? 0.0 : max(_1563, 0.0)));
        _1628 = cbModelParam._m0[36u].z * (isnan(0.0) ? _1605 : (isnan(_1605) ? 0.0 : max(_1605, 0.0)));
    }
    else
    {
        _1613 = _1614;
        _1615 = _1614;
        _1616 = _1614;
        _1617 = _1614;
        _1618 = _1614;
        _1619 = _1614;
        _1620 = _1614;
        _1621 = _1614;
        _1622 = _1614;
        _1623 = _1614;
        _1624 = _1614;
        _1625 = _1614;
        _1626 = 0.0;
        _1627 = 0.0;
        _1628 = 0.0;
    }
    float _1920;
    float _1921;
    float _1922;
    float _1923;
    float _1924;
    float _1925;
    float _1926;
    float _1927;
    float _1928;
    float _1929;
    float _1930;
    float _1931;
    float _1932;
    float _1933;
    float _1934;
    if (cbModelParam._m0[36u].y > 0.0)
    {
        float _1651 = fma(_1285, cbModelParam._m0[30u].z, fma(_1281, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1277));
        float _1655 = fma(_1285, cbModelParam._m0[31u].z, fma(_1281, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1277));
        float _1659 = fma(_1285, cbModelParam._m0[32u].z, fma(_1281, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1277));
        float _1682 = _1277 + _1036;
        float _1683 = _1281 + _1037;
        float _1684 = _1285 + _1038;
        float _1694 = fma(_1684, cbModelParam._m0[30u].z, fma(_1683, cbModelParam._m0[30u].y, cbModelParam._m0[30u].x * _1682)) - _1651;
        float _1695 = fma(_1684, cbModelParam._m0[31u].z, fma(_1683, cbModelParam._m0[31u].y, cbModelParam._m0[31u].x * _1682)) - _1655;
        float _1696 = fma(_1684, cbModelParam._m0[32u].z, fma(_1683, cbModelParam._m0[32u].y, cbModelParam._m0[32u].x * _1682)) - _1659;
        float _1700 = inversesqrt(dot(vec3(_1694, _1695, _1696), vec3(_1694, _1695, _1696)));
        float _1713 = ((_1700 * _1694) / cbModelParam._m0[35u].x) + ((cbModelParam._m0[38u].x * ((((_1651 + cbModelParam._m0[30u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1714 = ((_1700 * _1695) / cbModelParam._m0[35u].y) + ((cbModelParam._m0[38u].y * ((((_1655 + cbModelParam._m0[31u].w) + 1.0) * 0.5) + (-0.5))) + 0.5);
        float _1715 = ((_1700 * _1696) / cbModelParam._m0[35u].z) + ((((((_1659 + cbModelParam._m0[32u].w) + 1.0) * 0.5) + (-0.5)) * cbModelParam._m0[38u].z) + 0.5);
        vec4 _1717 = textureLod(sampler3D(g_IrradianceVolume2X, SS_ClampLinear), vec3(_1713, _1714, _1715), 0.0);
        vec4 _1724 = textureLod(sampler3D(g_IrradianceVolume2Y, SS_ClampLinear), vec3(_1713, _1714, _1715), 0.0);
        vec4 _1731 = textureLod(sampler3D(g_IrradianceVolume2Z, SS_ClampLinear), vec3(_1713, _1714, _1715), 0.0);
        vec4 _1738 = textureLod(sampler3D(g_IrradianceVolume2W, SS_ClampLinear), vec3(_1713, _1714, _1715), 0.0);
        float _1750 = exp2((_1717.w + (-0.5)) * 20.0) * 2.0;
        float _1751 = _1750 * (_1717.x + (-0.5));
        float _1752 = _1750 * (_1717.y + (-0.5));
        float _1753 = _1750 * (_1717.z + (-0.5));
        float _1760 = exp2((_1724.w + (-0.5)) * 20.0) * 2.0;
        float _1761 = _1760 * (_1724.x + (-0.5));
        float _1762 = _1760 * (_1724.y + (-0.5));
        float _1763 = _1760 * (_1724.z + (-0.5));
        float _1770 = exp2((_1731.w + (-0.5)) * 20.0) * 2.0;
        float _1771 = _1770 * (_1731.x + (-0.5));
        float _1772 = _1770 * (_1731.y + (-0.5));
        float _1773 = _1770 * (_1731.z + (-0.5));
        float _1780 = exp2((_1738.w + (-0.5)) * 20.0) * 2.0;
        float _1781 = _1780 * (_1738.x + (-0.5));
        float _1782 = _1780 * (_1738.y + (-0.5));
        float _1783 = _1780 * (_1738.z + (-0.5));
        float _1784 = isnan(0.0) ? _1781 : (isnan(_1781) ? 0.0 : max(_1781, 0.0));
        float _1785 = isnan(0.0) ? _1782 : (isnan(_1782) ? 0.0 : max(_1782, 0.0));
        float _1786 = isnan(0.0) ? _1783 : (isnan(_1783) ? 0.0 : max(_1783, 0.0));
        float _1787 = _1751 * 0.5;
        float _1788 = _1761 * 0.5;
        float _1789 = _1771 * 0.5;
        float _1790 = dot(vec3(_1787, _1788, _1789), vec3(_1787, _1788, _1789));
        float _1795 = (_1790 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1790);
        float _1803 = (dot(vec3(_1036, _1037, _1038), vec3(_1795 * _1787, _1795 * _1788, _1795 * _1789)) + 1.0) * 0.5;
        float _4371 = isnan(0.0) ? _1803 : (isnan(_1803) ? 0.0 : max(_1803, 0.0));
        float _1812 = sqrt(((_1788 * _1788) + (_1787 * _1787)) + (_1789 * _1789)) / (_1784 + 9.9999997473787516355514526367188e-06);
        float _4382 = isnan(0.0) ? _1812 : (isnan(_1812) ? 0.0 : max(_1812, 0.0));
        float _1813 = isnan(1.0) ? _4382 : (isnan(_4382) ? 1.0 : min(_4382, 1.0));
        float _1814 = _1813 * 2.0;
        float _1818 = (1.0 - _1813) / (_1813 + 1.0);
        float _4393 = isnan(0.0) ? _1818 : (isnan(_1818) ? 0.0 : max(_1818, 0.0));
        float _1819 = isnan(1.0) ? _4393 : (isnan(_4393) ? 1.0 : min(_4393, 1.0));
        float _1828 = ((((1.0 - _1819) * (_1814 + 2.0)) * exp2(log2(isnan(1.0) ? _4371 : (isnan(_4371) ? 1.0 : min(_4371, 1.0))) * (_1814 + 1.0))) + _1819) * _1784;
        float _1829 = _1752 * 0.5;
        float _1830 = _1762 * 0.5;
        float _1831 = _1772 * 0.5;
        float _1832 = dot(vec3(_1829, _1830, _1831), vec3(_1829, _1830, _1831));
        float _1837 = (_1832 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1832);
        float _1845 = (dot(vec3(_1036, _1037, _1038), vec3(_1837 * _1829, _1837 * _1830, _1837 * _1831)) + 1.0) * 0.5;
        float _4404 = isnan(0.0) ? _1845 : (isnan(_1845) ? 0.0 : max(_1845, 0.0));
        float _1854 = sqrt(((_1830 * _1830) + (_1829 * _1829)) + (_1831 * _1831)) / (_1785 + 9.9999997473787516355514526367188e-06);
        float _4415 = isnan(0.0) ? _1854 : (isnan(_1854) ? 0.0 : max(_1854, 0.0));
        float _1855 = isnan(1.0) ? _4415 : (isnan(_4415) ? 1.0 : min(_4415, 1.0));
        float _1856 = _1855 * 2.0;
        float _1860 = (1.0 - _1855) / (_1855 + 1.0);
        float _4426 = isnan(0.0) ? _1860 : (isnan(_1860) ? 0.0 : max(_1860, 0.0));
        float _1861 = isnan(1.0) ? _4426 : (isnan(_4426) ? 1.0 : min(_4426, 1.0));
        float _1870 = ((((1.0 - _1861) * (_1856 + 2.0)) * exp2(log2(isnan(1.0) ? _4404 : (isnan(_4404) ? 1.0 : min(_4404, 1.0))) * (_1856 + 1.0))) + _1861) * _1785;
        float _1871 = _1753 * 0.5;
        float _1872 = _1763 * 0.5;
        float _1873 = _1773 * 0.5;
        float _1874 = dot(vec3(_1871, _1872, _1873), vec3(_1871, _1872, _1873));
        float _1879 = (_1874 == 0.0) ? 3.4028234663852885981170418348452e+38 : inversesqrt(_1874);
        float _1887 = (dot(vec3(_1036, _1037, _1038), vec3(_1879 * _1871, _1879 * _1872, _1879 * _1873)) + 1.0) * 0.5;
        float _4437 = isnan(0.0) ? _1887 : (isnan(_1887) ? 0.0 : max(_1887, 0.0));
        float _1896 = sqrt(((_1872 * _1872) + (_1871 * _1871)) + (_1873 * _1873)) / (_1786 + 9.9999997473787516355514526367188e-06);
        float _4448 = isnan(0.0) ? _1896 : (isnan(_1896) ? 0.0 : max(_1896, 0.0));
        float _1897 = isnan(1.0) ? _4448 : (isnan(_4448) ? 1.0 : min(_4448, 1.0));
        float _1898 = _1897 * 2.0;
        float _1902 = (1.0 - _1897) / (_1897 + 1.0);
        float _4459 = isnan(0.0) ? _1902 : (isnan(_1902) ? 0.0 : max(_1902, 0.0));
        float _1903 = isnan(1.0) ? _4459 : (isnan(_4459) ? 1.0 : min(_4459, 1.0));
        float _1912 = ((((1.0 - _1903) * (_1898 + 2.0)) * exp2(log2(isnan(1.0) ? _4437 : (isnan(_4437) ? 1.0 : min(_4437, 1.0))) * (_1898 + 1.0))) + _1903) * _1786;
        _1920 = _1753;
        _1921 = _1752;
        _1922 = _1751;
        _1923 = _1763;
        _1924 = _1762;
        _1925 = _1761;
        _1926 = _1773;
        _1927 = _1772;
        _1928 = _1771;
        _1929 = _1786;
        _1930 = _1785;
        _1931 = _1784;
        _1932 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1828 : (isnan(_1828) ? 0.0 : max(_1828, 0.0)));
        _1933 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1870 : (isnan(_1870) ? 0.0 : max(_1870, 0.0)));
        _1934 = cbModelParam._m0[36u].w * (isnan(0.0) ? _1912 : (isnan(_1912) ? 0.0 : max(_1912, 0.0)));
    }
    else
    {
        _1920 = _1614;
        _1921 = _1614;
        _1922 = _1614;
        _1923 = _1614;
        _1924 = _1614;
        _1925 = _1614;
        _1926 = _1614;
        _1927 = _1614;
        _1928 = _1614;
        _1929 = _1614;
        _1930 = _1614;
        _1931 = _1614;
        _1932 = 0.0;
        _1933 = 0.0;
        _1934 = 0.0;
    }
    float _1944 = (cbModelParam._m0[1u].x * (_1932 - _1626)) + _1626;
    float _1945 = (cbModelParam._m0[1u].x * (_1933 - _1627)) + _1627;
    float _1946 = (cbModelParam._m0[1u].x * (_1934 - _1628)) + _1628;
    float _1967 = fma(_1946, cbSceneParam._m0[89u].z, fma(_1945, cbSceneParam._m0[89u].y, _1944 * cbSceneParam._m0[89u].x));
    float _1970 = fma(_1946, cbSceneParam._m0[90u].z, fma(_1945, cbSceneParam._m0[90u].y, _1944 * cbSceneParam._m0[90u].x));
    float _1973 = fma(_1946, cbSceneParam._m0[91u].z, fma(_1945, cbSceneParam._m0[91u].y, cbSceneParam._m0[91u].x * _1944));
    float _1988 = _1223 * 0.5;
    float _1989 = _1224 * 0.5;
    float _1990 = _1225 * 0.5;
    float _1991 = dot(vec4(_1988, _1989, _1990, 1.0), vec4(_1922, _1925, _1928, _1931));
    float _1994 = dot(vec4(_1988, _1989, _1990, 1.0), vec4(_1921, _1924, _1927, _1930));
    float _1997 = dot(vec4(_1988, _1989, _1990, 1.0), vec4(_1920, _1923, _1926, _1929));
    float _2031;
    if (cbModelParam._m0[39u].w > 0.0)
    {
        float _2004 = dot(vec4(_1988, _1989, _1990, 1.0), vec4(_1613, _1617, _1620, _1623));
        float _2008 = dot(vec4(_1988, _1989, _1990, 1.0), vec4(_1615, _1618, _1621, _1624));
        float _2012 = dot(vec4(_1988, _1989, _1990, 1.0), vec4(_1616, _1619, _1622, _1625));
        float _2019 = dot(vec4(cbModelParam._m0[39u]), vec4(_1988, _1989, _1990, 1.0));
        _2031 = dot(vec3(isnan(0.0) ? _2012 : (isnan(_2012) ? 0.0 : max(_2012, 0.0)), isnan(0.0) ? _2008 : (isnan(_2008) ? 0.0 : max(_2008, 0.0)), isnan(0.0) ? _2004 : (isnan(_2004) ? 0.0 : max(_2004, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2019) ? 0.0 : (isnan(0.0) ? _2019 : max(0.0, _2019))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2031 = 1.0;
    }
    float _2042;
    if (cbModelParam._m0[40u].w > 0.0)
    {
        float _2033 = dot(vec4(cbModelParam._m0[40u]), vec4(_1988, _1989, _1990, 1.0));
        _2042 = dot(vec3(isnan(0.0) ? _1991 : (isnan(_1991) ? 0.0 : max(_1991, 0.0)), isnan(0.0) ? _1994 : (isnan(_1994) ? 0.0 : max(_1994, 0.0)), isnan(0.0) ? _1997 : (isnan(_1997) ? 0.0 : max(_1997, 0.0))), vec3(0.2989099919795989990234375, 0.586610019207000732421875, 0.11448000371456146240234375)) / ((isnan(_2033) ? 0.0 : (isnan(0.0) ? _2033 : max(0.0, _2033))) + 9.9999997473787516355514526367188e-06);
    }
    else
    {
        _2042 = 1.0;
    }
    float _2046 = (_2042 * cbModelParam._m0[1u].x) + (_2031 * (1.0 - cbModelParam._m0[1u].x));
    float _2056 = cbModelParam._m0[25u].z - (cbModelParam._m0[25u].z * _1039);
    float _2057 = isnan(_2056) ? cbModelParam._m0[25u].z : (isnan(cbModelParam._m0[25u].z) ? _2056 : min(cbModelParam._m0[25u].z, _2056));
    float _2137;
    float _2139;
    float _2141;
    if (cbModelParam._m0[25u].x > 0.0)
    {
        float _2104 = fma(_1285, cbModelParam._m0[13u].z, fma(_1281, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1277)) + cbModelParam._m0[13u].w;
        float _2108 = fma(_1285, cbModelParam._m0[14u].z, fma(_1281, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1277)) + cbModelParam._m0[14u].w;
        float _2112 = fma(_1285, cbModelParam._m0[15u].z, fma(_1281, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1277)) + cbModelParam._m0[15u].w;
        float _2115 = fma(_1225, cbModelParam._m0[13u].z, fma(_1224, cbModelParam._m0[13u].y, cbModelParam._m0[13u].x * _1223));
        float _2118 = fma(_1225, cbModelParam._m0[14u].z, fma(_1224, cbModelParam._m0[14u].y, cbModelParam._m0[14u].x * _1223));
        float _2121 = fma(_1225, cbModelParam._m0[15u].z, fma(_1224, cbModelParam._m0[15u].y, cbModelParam._m0[15u].x * _1223));
        float _2149;
        if (_2115 > 0.0)
        {
            _2149 = abs((1.0 - _2104) / _2115);
        }
        else
        {
            float frontier_phi_19_17_ladder;
            if (_2115 < 0.0)
            {
                frontier_phi_19_17_ladder = abs((_2104 + 1.0) / _2115);
            }
            else
            {
                frontier_phi_19_17_ladder = 5000.0;
            }
            _2149 = frontier_phi_19_17_ladder;
        }
        float _2351;
        if (_2118 > 0.0)
        {
            _2351 = abs((1.0 - _2108) / _2118);
        }
        else
        {
            float frontier_phi_28_24_ladder;
            if (_2118 < 0.0)
            {
                frontier_phi_28_24_ladder = abs((_2108 + 1.0) / _2118);
            }
            else
            {
                frontier_phi_28_24_ladder = 5000.0;
            }
            _2351 = frontier_phi_28_24_ladder;
        }
        float _2605;
        if (_2121 > 0.0)
        {
            _2605 = abs((1.0 - _2112) / _2121);
        }
        else
        {
            float frontier_phi_40_35_ladder;
            if (_2121 < 0.0)
            {
                frontier_phi_40_35_ladder = abs((_2112 + 1.0) / _2121);
            }
            else
            {
                frontier_phi_40_35_ladder = 5000.0;
            }
            _2605 = frontier_phi_40_35_ladder;
        }
        float _2607 = isnan(_2351) ? _2149 : (isnan(_2149) ? _2351 : min(_2149, _2351));
        float _2608 = isnan(_2605) ? _2607 : (isnan(_2607) ? _2605 : min(_2607, _2605));
        float _2612 = (_2608 * _2115) + _2104;
        float _2613 = (_2608 * _2118) + _2108;
        float _2614 = (_2608 * _2121) + _2112;
        float _2615 = _2608 * 9.9999997473787516355514526367188e-05;
        float _2617 = (-1.0) - _2615;
        float _2619 = _2615 + 1.0;
        float frontier_phi_18_40_ladder;
        float frontier_phi_18_40_ladder_1;
        float frontier_phi_18_40_ladder_2;
        if ((_2614 > _2619) || ((_2614 < _2617) || ((_2613 > _2619) || ((_2613 < _2617) || ((_2612 < _2617) || (_2612 > _2619))))))
        {
            frontier_phi_18_40_ladder = 0.0;
            frontier_phi_18_40_ladder_1 = 0.0;
            frontier_phi_18_40_ladder_2 = 0.0;
        }
        else
        {
            vec4 _2742 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3((cbModelParam._m0[9u].w - cbModelParam._m0[7u].x) + fma(_2614, cbModelParam._m0[9u].z, fma(_2613, cbModelParam._m0[9u].y, _2612 * cbModelParam._m0[9u].x)), (cbModelParam._m0[10u].w - cbModelParam._m0[7u].y) + fma(_2614, cbModelParam._m0[10u].z, fma(_2613, cbModelParam._m0[10u].y, _2612 * cbModelParam._m0[10u].x)), (cbModelParam._m0[11u].w - cbModelParam._m0[7u].z) + fma(_2614, cbModelParam._m0[11u].z, fma(_2613, cbModelParam._m0[11u].y, _2612 * cbModelParam._m0[11u].x))), _2057);
            frontier_phi_18_40_ladder = _2742.z * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_1 = _2742.y * cbModelParam._m0[1u].y;
            frontier_phi_18_40_ladder_2 = _2742.x * cbModelParam._m0[1u].y;
        }
        _2137 = frontier_phi_18_40_ladder_2;
        _2139 = frontier_phi_18_40_ladder_1;
        _2141 = frontier_phi_18_40_ladder;
    }
    else
    {
        vec4 _2125 = textureLod(samplerCube(g_IBLTexture, SS_WrapLinear), vec3(_1223, _1224, _1225), _2057);
        _2137 = _2125.x * cbModelParam._m0[1u].y;
        _2139 = _2125.y * cbModelParam._m0[1u].y;
        _2141 = _2125.z * cbModelParam._m0[1u].y;
    }
    float _2145 = cbModelParam._m0[25u].w - (cbModelParam._m0[25u].w * _1039);
    float _2146 = isnan(_2145) ? cbModelParam._m0[25u].w : (isnan(cbModelParam._m0[25u].w) ? _2145 : min(cbModelParam._m0[25u].w, _2145));
    float _2235;
    float _2237;
    float _2239;
    if (cbModelParam._m0[25u].y > 0.0)
    {
        float _2199 = fma(_1285, cbModelParam._m0[21u].z, fma(_1281, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1277)) + cbModelParam._m0[21u].w;
        float _2203 = fma(_1285, cbModelParam._m0[22u].z, fma(_1281, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1277)) + cbModelParam._m0[22u].w;
        float _2207 = fma(_1285, cbModelParam._m0[23u].z, fma(_1281, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1277)) + cbModelParam._m0[23u].w;
        float _2210 = fma(_1225, cbModelParam._m0[21u].z, fma(_1224, cbModelParam._m0[21u].y, cbModelParam._m0[21u].x * _1223));
        float _2213 = fma(_1225, cbModelParam._m0[22u].z, fma(_1224, cbModelParam._m0[22u].y, cbModelParam._m0[22u].x * _1223));
        float _2216 = fma(_1225, cbModelParam._m0[23u].z, fma(_1224, cbModelParam._m0[23u].y, cbModelParam._m0[23u].x * _1223));
        float _2356;
        if (_2210 > 0.0)
        {
            _2356 = abs((1.0 - _2199) / _2210);
        }
        else
        {
            float frontier_phi_30_26_ladder;
            if (_2210 < 0.0)
            {
                frontier_phi_30_26_ladder = abs((_2199 + 1.0) / _2210);
            }
            else
            {
                frontier_phi_30_26_ladder = 5000.0;
            }
            _2356 = frontier_phi_30_26_ladder;
        }
        float _2632;
        if (_2213 > 0.0)
        {
            _2632 = abs((1.0 - _2203) / _2213);
        }
        else
        {
            float frontier_phi_42_37_ladder;
            if (_2213 < 0.0)
            {
                frontier_phi_42_37_ladder = abs((_2203 + 1.0) / _2213);
            }
            else
            {
                frontier_phi_42_37_ladder = 5000.0;
            }
            _2632 = frontier_phi_42_37_ladder;
        }
        float _2845;
        if (_2216 > 0.0)
        {
            _2845 = abs((1.0 - _2207) / _2216);
        }
        else
        {
            float frontier_phi_51_48_ladder;
            if (_2216 < 0.0)
            {
                frontier_phi_51_48_ladder = abs((_2207 + 1.0) / _2216);
            }
            else
            {
                frontier_phi_51_48_ladder = 5000.0;
            }
            _2845 = frontier_phi_51_48_ladder;
        }
        float _2847 = isnan(_2632) ? _2356 : (isnan(_2356) ? _2632 : min(_2356, _2632));
        float _2848 = isnan(_2845) ? _2847 : (isnan(_2847) ? _2845 : min(_2847, _2845));
        float _2852 = (_2848 * _2210) + _2199;
        float _2853 = (_2848 * _2213) + _2203;
        float _2854 = (_2848 * _2216) + _2207;
        float _2855 = _2848 * 9.9999997473787516355514526367188e-05;
        float _2856 = (-1.0) - _2855;
        float _2858 = _2855 + 1.0;
        float frontier_phi_27_51_ladder;
        float frontier_phi_27_51_ladder_1;
        float frontier_phi_27_51_ladder_2;
        if ((_2854 > _2858) || ((_2854 < _2856) || ((_2853 > _2858) || ((_2853 < _2856) || ((_2852 < _2856) || (_2852 > _2858))))))
        {
            frontier_phi_27_51_ladder = 0.0;
            frontier_phi_27_51_ladder_1 = 0.0;
            frontier_phi_27_51_ladder_2 = 0.0;
        }
        else
        {
            vec4 _3053 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3((cbModelParam._m0[17u].w - cbModelParam._m0[8u].x) + fma(_2854, cbModelParam._m0[17u].z, fma(_2853, cbModelParam._m0[17u].y, _2852 * cbModelParam._m0[17u].x)), (cbModelParam._m0[18u].w - cbModelParam._m0[8u].y) + fma(_2854, cbModelParam._m0[18u].z, fma(_2853, cbModelParam._m0[18u].y, _2852 * cbModelParam._m0[18u].x)), (cbModelParam._m0[19u].w - cbModelParam._m0[8u].z) + fma(_2854, cbModelParam._m0[19u].z, fma(_2853, cbModelParam._m0[19u].y, _2852 * cbModelParam._m0[19u].x))), _2146);
            frontier_phi_27_51_ladder = _3053.z * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_1 = _3053.y * cbModelParam._m0[1u].z;
            frontier_phi_27_51_ladder_2 = _3053.x * cbModelParam._m0[1u].z;
        }
        _2235 = frontier_phi_27_51_ladder_2;
        _2237 = frontier_phi_27_51_ladder_1;
        _2239 = frontier_phi_27_51_ladder;
    }
    else
    {
        vec4 _2219 = textureLod(samplerCube(g_IBLTexture2, SS_WrapLinear), vec3(_1223, _1224, _1225), _2146);
        _2235 = _2219.x * cbModelParam._m0[1u].z;
        _2237 = _2219.y * cbModelParam._m0[1u].z;
        _2239 = _2219.z * cbModelParam._m0[1u].z;
    }
    float _2252 = (((_1248 * _1200) + _1249) * _1215) * ((cbModelParam._m0[1u].w * (_2235 - _2137)) + _2137);
    float _2254 = (((_1248 * _1202) + _1249) * _1215) * ((cbModelParam._m0[1u].w * (_2237 - _2139)) + _2139);
    float _2256 = (((_1248 * _1203) + _1249) * _1215) * ((cbModelParam._m0[1u].w * (_2239 - _2141)) + _2141);
    float _2259 = fma(_2256, cbSceneParam._m0[89u].z, fma(_2254, cbSceneParam._m0[89u].y, _2252 * cbSceneParam._m0[89u].x));
    float _2262 = fma(_2256, cbSceneParam._m0[90u].z, fma(_2254, cbSceneParam._m0[90u].y, _2252 * cbSceneParam._m0[90u].x));
    float _2265 = fma(_2256, cbSceneParam._m0[91u].z, fma(_2254, cbSceneParam._m0[91u].y, _2252 * cbSceneParam._m0[91u].x));
    uvec4 _2275 = floatBitsToUint(cbInstanceData._m0[_1175 + 5u]);
    uint _2277 = _2275.x * 14u;
    uint _2278 = _2277 + 13u;
    float _2285 = _1215 + (-1.0);
    float _2290 = (cbLight._m0[_2278].x * _2285) + 1.0;
    float _2291 = (cbLight._m0[_2278].y * _2285) + 1.0;
    float _2292 = (cbLight._m0[_2278].z * _2285) + 1.0;
    float _2293 = (cbLight._m0[_2278].w * _2285) + 1.0;
    uint _2294 = _2277 + 5u;
    float _2300 = isnan(1.0) ? _2291 : (isnan(_2291) ? 1.0 : min(_2291, 1.0));
    uint _2304 = _2277 + 4u;
    float _2310 = isnan(1.0) ? _2290 : (isnan(_2290) ? 1.0 : min(_2290, 1.0));
    uint _2314 = _2277 | 1u;
    float _2325 = dot(vec3(cbLight._m0[_2277].xyz), vec3(_1036, _1037, _1038));
    float _2328 = dot(vec3(cbLight._m0[_2314].xyz), vec3(_1036, _1037, _1038));
    float _4595 = isnan(0.0) ? _2325 : (isnan(_2325) ? 0.0 : max(_2325, 0.0));
    float _4606 = isnan(0.0) ? _2328 : (isnan(_2328) ? 0.0 : max(_2328, 0.0));
    float _2333 = (isnan(1.0) ? _4595 : (isnan(_4595) ? 1.0 : min(_4595, 1.0))) * 0.3183098733425140380859375;
    float _2335 = (isnan(1.0) ? _4606 : (isnan(_4606) ? 1.0 : min(_4606, 1.0))) * 0.3183098733425140380859375;
    float _2342 = ((cbLight._m0[_2294].x * _2300) * _2335) + ((cbLight._m0[_2304].x * _2310) * _2333);
    float _2343 = ((_2300 * cbLight._m0[_2294].y) * _2335) + ((_2310 * cbLight._m0[_2304].y) * _2333);
    float _2344 = ((_2300 * cbLight._m0[_2294].z) * _2335) + ((_2310 * cbLight._m0[_2304].z) * _2333);
    uvec4 _2348 = floatBitsToUint(cbLight._m0[_2277 + 12u]);
    bool _2350 = _2348.x == 0u;
    float _2361;
    float _2363;
    float _2365;
    if (_2350)
    {
        _2361 = _2342;
        _2363 = _2343;
        _2365 = _2344;
    }
    else
    {
        uint _2369 = _2277 + 6u;
        float _2385 = (dot(vec3(cbLight._m0[_2277 + 2u].xyz), vec3(_1036, _1037, _1038)) * 0.5) + 0.5;
        float _2386 = _2385 * _2385;
        float _4617 = isnan(0.0) ? _2386 : (isnan(_2386) ? 0.0 : max(_2386, 0.0));
        float _2387 = isnan(1.0) ? _4617 : (isnan(_4617) ? 1.0 : min(_4617, 1.0));
        float _2388 = isnan(1.0) ? _2292 : (isnan(_2292) ? 1.0 : min(_2292, 1.0));
        _2361 = (((cbLight._m0[_2369].x * 0.3183098733425140380859375) * _2387) * _2388) + _2342;
        _2363 = (((cbLight._m0[_2369].y * 0.3183098733425140380859375) * _2387) * _2388) + _2343;
        _2365 = (((cbLight._m0[_2369].z * 0.3183098733425140380859375) * _2387) * _2388) + _2344;
    }
    bool _2368 = _2348.y == 0u;
    float _2406;
    float _2408;
    float _2410;
    if (_2368)
    {
        _2406 = _2361;
        _2408 = _2363;
        _2410 = _2365;
    }
    else
    {
        uint _2576 = _2277 + 7u;
        float _2592 = (dot(vec3(cbLight._m0[_2277 + 3u].xyz), vec3(_1036, _1037, _1038)) * 0.5) + 0.5;
        float _2593 = _2592 * _2592;
        float _4633 = isnan(0.0) ? _2593 : (isnan(_2593) ? 0.0 : max(_2593, 0.0));
        float _2594 = isnan(1.0) ? _4633 : (isnan(_4633) ? 1.0 : min(_4633, 1.0));
        float _2595 = isnan(1.0) ? _2293 : (isnan(_2293) ? 1.0 : min(_2293, 1.0));
        _2406 = (((cbLight._m0[_2576].x * 0.3183098733425140380859375) * _2594) * _2595) + _2361;
        _2408 = (((cbLight._m0[_2576].y * 0.3183098733425140380859375) * _2594) * _2595) + _2363;
        _2410 = (((cbLight._m0[_2576].z * 0.3183098733425140380859375) * _2594) * _2595) + _2365;
    }
    uint _2413 = _2277 + 8u;
    float _2426 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2277].w)) * _1039) * 0.949999988079071044921875);
    float _2427 = _2426 * _2426;
    float _2428 = cbLight._m0[_2277].x + _1120;
    float _2429 = cbLight._m0[_2277].y + _1121;
    float _2430 = cbLight._m0[_2277].z + _1122;
    float _2434 = inversesqrt(dot(vec3(_2428, _2429, _2430), vec3(_2428, _2429, _2430)));
    float _2435 = _2434 * _2428;
    float _2436 = _2434 * _2429;
    float _2437 = _2434 * _2430;
    float _2438 = dot(vec3(_1036, _1037, _1038), vec3(cbLight._m0[_2277].xyz));
    float _4649 = isnan(0.0) ? _2438 : (isnan(_2438) ? 0.0 : max(_2438, 0.0));
    float _2441 = isnan(1.0) ? _4649 : (isnan(_4649) ? 1.0 : min(_4649, 1.0));
    float _4660 = isnan(0.0) ? _1216 : (isnan(_1216) ? 0.0 : max(_1216, 0.0));
    float _2442 = isnan(1.0) ? _4660 : (isnan(_4660) ? 1.0 : min(_4660, 1.0));
    float _2443 = dot(vec3(_1036, _1037, _1038), vec3(_2435, _2436, _2437));
    float _4671 = isnan(0.0) ? _2443 : (isnan(_2443) ? 0.0 : max(_2443, 0.0));
    float _2446 = isnan(1.0) ? _4671 : (isnan(_4671) ? 1.0 : min(_4671, 1.0));
    float _2447 = dot(vec3(cbLight._m0[_2277].xyz), vec3(_2435, _2436, _2437));
    float _4682 = isnan(0.0) ? _2447 : (isnan(_2447) ? 0.0 : max(_2447, 0.0));
    float _2451 = _2427 * _2427;
    float _2455 = ((_2446 * _2446) * (_2451 + (-1.0))) + 1.0;
    float _2463 = exp2(log2(1.0 - (isnan(1.0) ? _4682 : (isnan(_4682) ? 1.0 : min(_4682, 1.0)))) * 5.0);
    float _2464 = 0.959999978542327880859375 - _1197;
    float _2466 = 0.959999978542327880859375 - _1198;
    float _2467 = 0.959999978542327880859375 - _1199;
    float _2474 = 1.0 - _2427;
    float _2485 = (0.5 / (((_2442 * ((_2441 * _2474) + _2427)) + 9.9999999392252902907785028219223e-09) + (((_2442 * _2474) + _2427) * _2441))) * _2441;
    float _4693 = isnan(0.0) ? _2485 : (isnan(_2485) ? 0.0 : max(_2485, 0.0));
    float _2487 = (isnan(1.0) ? _4693 : (isnan(_4693) ? 1.0 : min(_4693, 1.0))) * (_2451 / ((_2455 * _2455) * 3.141590118408203125));
    uint _2498 = _2277 + 9u;
    float _2509 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2314].w)) * _1039) * 0.949999988079071044921875);
    float _2510 = _2509 * _2509;
    float _2511 = cbLight._m0[_2314].x + _1120;
    float _2512 = cbLight._m0[_2314].y + _1121;
    float _2513 = cbLight._m0[_2314].z + _1122;
    float _2517 = inversesqrt(dot(vec3(_2511, _2512, _2513), vec3(_2511, _2512, _2513)));
    float _2518 = _2517 * _2511;
    float _2519 = _2517 * _2512;
    float _2520 = _2517 * _2513;
    float _2521 = dot(vec3(_1036, _1037, _1038), vec3(cbLight._m0[_2314].xyz));
    float _4704 = isnan(0.0) ? _2521 : (isnan(_2521) ? 0.0 : max(_2521, 0.0));
    float _2524 = isnan(1.0) ? _4704 : (isnan(_4704) ? 1.0 : min(_4704, 1.0));
    float _2525 = dot(vec3(_1036, _1037, _1038), vec3(_2518, _2519, _2520));
    float _4715 = isnan(0.0) ? _2525 : (isnan(_2525) ? 0.0 : max(_2525, 0.0));
    float _2528 = isnan(1.0) ? _4715 : (isnan(_4715) ? 1.0 : min(_4715, 1.0));
    float _2529 = dot(vec3(cbLight._m0[_2314].xyz), vec3(_2518, _2519, _2520));
    float _4726 = isnan(0.0) ? _2529 : (isnan(_2529) ? 0.0 : max(_2529, 0.0));
    float _2533 = _2510 * _2510;
    float _2537 = ((_2528 * _2528) * (_2533 + (-1.0))) + 1.0;
    float _2544 = exp2(log2(1.0 - (isnan(1.0) ? _4726 : (isnan(_4726) ? 1.0 : min(_4726, 1.0)))) * 5.0);
    float _2551 = 1.0 - _2510;
    float _2561 = (0.5 / (((_2442 * ((_2524 * _2551) + _2510)) + 9.9999999392252902907785028219223e-09) + (((_2442 * _2551) + _2510) * _2524))) * _2524;
    float _4737 = isnan(0.0) ? _2561 : (isnan(_2561) ? 0.0 : max(_2561, 0.0));
    float _2563 = (isnan(1.0) ? _4737 : (isnan(_4737) ? 1.0 : min(_4737, 1.0))) * (_2533 / ((_2537 * _2537) * 3.141590118408203125));
    float _2573 = (((((_2544 * _2464) + _1200) * cbLight._m0[_2498].x) * _2563) * _2300) + (((((_2463 * _2464) + _1200) * cbLight._m0[_2413].x) * _2487) * _2310);
    float _2574 = (((((_2544 * _2466) + _1202) * cbLight._m0[_2498].y) * _2563) * _2300) + (((((_2463 * _2466) + _1202) * cbLight._m0[_2413].y) * _2487) * _2310);
    float _2575 = (((((_2544 * _2467) + _1203) * cbLight._m0[_2498].z) * _2563) * _2300) + (((((_2463 * _2467) + _1203) * cbLight._m0[_2413].z) * _2487) * _2310);
    float _2637;
    float _2639;
    float _2641;
    if (_2350)
    {
        _2637 = _2573;
        _2639 = _2574;
        _2641 = _2575;
    }
    else
    {
        uint _2643 = _2277 + 2u;
        uint _2647 = _2277 + 10u;
        float _2661 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2643].w)) * _1039) * 0.949999988079071044921875);
        float _2662 = _2661 * _2661;
        float _2663 = cbLight._m0[_2643].x + _1120;
        float _2664 = cbLight._m0[_2643].y + _1121;
        float _2665 = cbLight._m0[_2643].z + _1122;
        float _2669 = inversesqrt(dot(vec3(_2663, _2664, _2665), vec3(_2663, _2664, _2665)));
        float _2670 = _2669 * _2663;
        float _2671 = _2669 * _2664;
        float _2672 = _2669 * _2665;
        float _2673 = dot(vec3(_1036, _1037, _1038), vec3(cbLight._m0[_2643].xyz));
        float _4748 = isnan(0.0) ? _2673 : (isnan(_2673) ? 0.0 : max(_2673, 0.0));
        float _2676 = isnan(1.0) ? _4748 : (isnan(_4748) ? 1.0 : min(_4748, 1.0));
        float _2677 = dot(vec3(_1036, _1037, _1038), vec3(_2670, _2671, _2672));
        float _4759 = isnan(0.0) ? _2677 : (isnan(_2677) ? 0.0 : max(_2677, 0.0));
        float _2680 = isnan(1.0) ? _4759 : (isnan(_4759) ? 1.0 : min(_4759, 1.0));
        float _2681 = dot(vec3(cbLight._m0[_2643].xyz), vec3(_2670, _2671, _2672));
        float _4770 = isnan(0.0) ? _2681 : (isnan(_2681) ? 0.0 : max(_2681, 0.0));
        float _2685 = _2662 * _2662;
        float _2689 = ((_2680 * _2680) * (_2685 + (-1.0))) + 1.0;
        float _2696 = exp2(log2(1.0 - (isnan(1.0) ? _4770 : (isnan(_4770) ? 1.0 : min(_4770, 1.0)))) * 5.0);
        float _2703 = 1.0 - _2662;
        float _2713 = (0.5 / (((_2442 * ((_2676 * _2703) + _2662)) + 9.9999999392252902907785028219223e-09) + (((_2442 * _2703) + _2662) * _2676))) * _2676;
        float _4781 = isnan(0.0) ? _2713 : (isnan(_2713) ? 0.0 : max(_2713, 0.0));
        float _2715 = (isnan(1.0) ? _4781 : (isnan(_4781) ? 1.0 : min(_4781, 1.0))) * (_2685 / ((_2689 * _2689) * 3.141590118408203125));
        float _2716 = isnan(1.0) ? _2292 : (isnan(_2292) ? 1.0 : min(_2292, 1.0));
        _2637 = (((((_2696 * _2464) + _1200) * cbLight._m0[_2647].x) * _2715) * _2716) + _2573;
        _2639 = (((((_2696 * _2466) + _1202) * cbLight._m0[_2647].y) * _2715) * _2716) + _2574;
        _2641 = (((((_2696 * _2467) + _1203) * cbLight._m0[_2647].z) * _2715) * _2716) + _2575;
    }
    float _2751;
    float _2753;
    float _2755;
    if (_2368)
    {
        _2751 = _2637;
        _2753 = _2639;
        _2755 = _2641;
    }
    else
    {
        uint _2762 = _2277 + 3u;
        uint _2766 = _2277 + 11u;
        float _2780 = 1.0 - (sqrt((1.0 - (0.07500000298023223876953125 / cbLight._m0[_2762].w)) * _1039) * 0.949999988079071044921875);
        float _2781 = _2780 * _2780;
        float _2782 = cbLight._m0[_2762].x + _1120;
        float _2783 = cbLight._m0[_2762].y + _1121;
        float _2784 = cbLight._m0[_2762].z + _1122;
        float _2788 = inversesqrt(dot(vec3(_2782, _2783, _2784), vec3(_2782, _2783, _2784)));
        float _2789 = _2788 * _2782;
        float _2790 = _2788 * _2783;
        float _2791 = _2788 * _2784;
        float _2792 = dot(vec3(_1036, _1037, _1038), vec3(cbLight._m0[_2762].xyz));
        float _4797 = isnan(0.0) ? _2792 : (isnan(_2792) ? 0.0 : max(_2792, 0.0));
        float _2795 = isnan(1.0) ? _4797 : (isnan(_4797) ? 1.0 : min(_4797, 1.0));
        float _2796 = dot(vec3(_1036, _1037, _1038), vec3(_2789, _2790, _2791));
        float _4808 = isnan(0.0) ? _2796 : (isnan(_2796) ? 0.0 : max(_2796, 0.0));
        float _2799 = isnan(1.0) ? _4808 : (isnan(_4808) ? 1.0 : min(_4808, 1.0));
        float _2800 = dot(vec3(cbLight._m0[_2762].xyz), vec3(_2789, _2790, _2791));
        float _4819 = isnan(0.0) ? _2800 : (isnan(_2800) ? 0.0 : max(_2800, 0.0));
        float _2804 = _2781 * _2781;
        float _2808 = ((_2799 * _2799) * (_2804 + (-1.0))) + 1.0;
        float _2815 = exp2(log2(1.0 - (isnan(1.0) ? _4819 : (isnan(_4819) ? 1.0 : min(_4819, 1.0)))) * 5.0);
        float _2822 = 1.0 - _2781;
        float _2832 = (0.5 / (((_2442 * ((_2795 * _2822) + _2781)) + 9.9999999392252902907785028219223e-09) + (((_2442 * _2822) + _2781) * _2795))) * _2795;
        float _4830 = isnan(0.0) ? _2832 : (isnan(_2832) ? 0.0 : max(_2832, 0.0));
        float _2834 = (isnan(1.0) ? _4830 : (isnan(_4830) ? 1.0 : min(_4830, 1.0))) * (_2804 / ((_2808 * _2808) * 3.141590118408203125));
        float _2835 = isnan(1.0) ? _2293 : (isnan(_2293) ? 1.0 : min(_2293, 1.0));
        _2751 = (((((_2815 * _2464) + _1200) * cbLight._m0[_2766].x) * _2834) * _2835) + _2637;
        _2753 = (((((_2815 * _2466) + _1202) * cbLight._m0[_2766].y) * _2834) * _2835) + _2639;
        _2755 = (((((_2815 * _2467) + _1203) * cbLight._m0[_2766].z) * _2834) * _2835) + _2641;
    }
    float _2970;
    float _2972;
    float _2974;
    float _2976;
    float _2978;
    float _2980;
    if (_2275.y == 0u)
    {
        float _2910 = fma(POSITION_1.w, cbSceneParam._m0[15u].w, fma(POSITION_1.z, cbSceneParam._m0[15u].z, fma(POSITION_1.y, cbSceneParam._m0[15u].y, cbSceneParam._m0[15u].x * POSITION_1.x)));
        float _2911 = fma(POSITION_1.w, cbSceneParam._m0[12u].w, fma(POSITION_1.z, cbSceneParam._m0[12u].z, fma(POSITION_1.y, cbSceneParam._m0[12u].y, cbSceneParam._m0[12u].x * POSITION_1.x))) / _2910;
        float _2912 = fma(POSITION_1.w, cbSceneParam._m0[13u].w, fma(POSITION_1.z, cbSceneParam._m0[13u].z, fma(POSITION_1.y, cbSceneParam._m0[13u].y, cbSceneParam._m0[13u].x * POSITION_1.x))) / _2910;
        float _2913 = fma(POSITION_1.w, cbSceneParam._m0[14u].w, fma(POSITION_1.z, cbSceneParam._m0[14u].z, fma(POSITION_1.y, cbSceneParam._m0[14u].y, cbSceneParam._m0[14u].x * POSITION_1.x))) / _2910;
        uvec4 _2925 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _2926 = _2925.x;
        uint _2937 = uint((float(_2925.y) * floor(float(uint(cbSceneParam._m0[85u].y * _1138) / _2926))) + floor(float(uint(cbSceneParam._m0[85u].x * _1137) / _2926)));
        float _2947 = (log2(_2913 - cbSceneParam._m0[65u].x) - cbSceneParam._m0[65u].z) / cbSceneParam._m0[65u].y;
        float _2948 = isnan(0.0) ? _2947 : (isnan(_2947) ? 0.0 : max(_2947, 0.0));
        uint _2951 = uint(isnan(14.0) ? _2948 : (isnan(_2948) ? 14.0 : min(_2948, 14.0)));
        uvec4 _2956 = texelFetch(g_lightClusterGridBuffer, int(((_2951 << 2u) + (_2937 << 6u)) >> 2u));
        uint _2957 = _2956.x;
        uint _2958 = _2925.z;
        float _3058;
        float _3060;
        float _3062;
        float _3064;
        float _3066;
        float _3068;
        if (((((1u << ((_2958 >> 4u) & 15u)) + 4294967295u) & _2957) == 0u) || ((_2958 & 240u) == 0u))
        {
            _3058 = 0.0;
            _3060 = 0.0;
            _3062 = 0.0;
            _3064 = 0.0;
            _3066 = 0.0;
            _3068 = 0.0;
        }
        else
        {
            float _3059;
            float _3061;
            float _3063;
            float _3065;
            float _3067;
            float _3069;
            float _3211 = 0.0;
            float _3212 = 0.0;
            float _3213 = 0.0;
            float _3214 = 0.0;
            float _3215 = 0.0;
            float _3216 = 0.0;
            uint _3217 = 0u;
            uint _3226;
            bool _3227;
            for (;;)
            {
                _3226 = texelFetch(g_lightClassification, int((((_2951 << 5u) + (_2937 << 9u)) + (_3217 << 2u)) >> 2u)).x;
                _3227 = _3226 == 0u;
                float frontier_phi_68_pred;
                float frontier_phi_68_pred_1;
                float frontier_phi_68_pred_2;
                float frontier_phi_68_pred_3;
                float frontier_phi_68_pred_4;
                float frontier_phi_68_pred_5;
                if (_3227)
                {
                    frontier_phi_68_pred = _3211;
                    frontier_phi_68_pred_1 = _3216;
                    frontier_phi_68_pred_2 = _3215;
                    frontier_phi_68_pred_3 = _3214;
                    frontier_phi_68_pred_4 = _3213;
                    frontier_phi_68_pred_5 = _3212;
                }
                else
                {
                    float _3356;
                    float _3357;
                    float _3358;
                    float _3359;
                    float _3360;
                    float _3361;
                    uint _3362;
                    _3356 = _3211;
                    _3357 = _3212;
                    _3358 = _3213;
                    _3359 = _3214;
                    _3360 = _3215;
                    _3361 = _3216;
                    _3362 = _3226;
                    float _3283;
                    float _3284;
                    float _3285;
                    float _3286;
                    float _3287;
                    float _3288;
                    for (;;)
                    {
                        uint _3366 = uint(findLSB(_3362)) + (_3217 << 5u);
                        uint _3363 = (_3362 + 4294967295u) & _3362;
                        uint _3368 = _3366 * 48u;
                        vec4 _3382 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3368)).x, texelFetch(g_PointLightRenderingBuffer, int(_3368 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3368 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3368 + 3u)).x));
                        uint _3388 = (_3366 * 48u) + 4u;
                        vec4 _3401 = uintBitsToFloat(uvec4(texelFetch(g_PointLightRenderingBuffer, int(_3388)).x, texelFetch(g_PointLightRenderingBuffer, int(_3388 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3388 + 2u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3388 + 3u)).x));
                        uint _3407 = (_3366 * 48u) + 8u;
                        vec3 _3418 = uintBitsToFloat(uvec3(texelFetch(g_PointLightRenderingBuffer, int(_3407)).x, texelFetch(g_PointLightRenderingBuffer, int(_3407 + 1u)).x, texelFetch(g_PointLightRenderingBuffer, int(_3407 + 2u)).x));
                        float _3422 = _3382.x - _2911;
                        float _3423 = _3382.y - _2912;
                        float _3424 = _3382.z - _2913;
                        float _3425 = dot(vec3(_3422, _3423, _3424), vec3(_3422, _3423, _3424));
                        float _3428 = inversesqrt(_3425);
                        float _3429 = _3428 * _3422;
                        float _3430 = _3428 * _3423;
                        float _3431 = _3428 * _3424;
                        float _3432 = dot(vec3(_1156, _1159, _1162), vec3(_3429, _3430, _3431));
                        float _3437 = 1.0 - (_3425 * _3382.w);
                        float _4856 = isnan(0.0) ? _3437 : (isnan(_3437) ? 0.0 : max(_3437, 0.0));
                        float _3438 = isnan(1.0) ? _4856 : (isnan(_4856) ? 1.0 : min(_4856, 1.0));
                        float _3439 = sqrt(_3425) * _3401.w;
                        float _3442 = 1.39999997615814208984375 / (_3439 + 1.39999997615814208984375);
                        float _3443 = _3442 * _3442;
                        float _3446 = ((1.0 - _3443) * _3432) + _3443;
                        float _3449 = _3439 * _3439;
                        float _3453 = ((isnan(0.0) ? _3446 : (isnan(_3446) ? 0.0 : max(_3446, 0.0))) * _3438) / ((_3449 * 0.699999988079071044921875) + 1.0);
                        float _3457 = (-0.0) - _2911;
                        float _3458 = (-0.0) - _2912;
                        float _3459 = (-0.0) - _2913;
                        float _3463 = inversesqrt(dot(vec3(_3457, _3458, _3459), vec3(_3457, _3458, _3459)));
                        float _3464 = _3463 * _3457;
                        float _3465 = _3463 * _3458;
                        float _3466 = _3463 * _3459;
                        float _3474 = exp2(log2(1.0 / ((_3449 * 3.5) + 5.0)) * 0.25);
                        float _3475 = 1.0 - _1231;
                        float _3482 = sqrt(1.0 - ((1.0 - (_3475 * _3475)) * (1.0 - (_3474 * _3474))));
                        float _3483 = _3482 * _3482;
                        float _3484 = _3483 * _3483;
                        float _3485 = _3464 + _3429;
                        float _3486 = _3465 + _3430;
                        float _3487 = _3466 + _3431;
                        float _3491 = inversesqrt(dot(vec3(_3485, _3486, _3487), vec3(_3485, _3486, _3487)));
                        float _3495 = dot(vec3(_1156, _1159, _1162), vec3(_3464, _3465, _3466));
                        float _4872 = isnan(0.0) ? _3495 : (isnan(_3495) ? 0.0 : max(_3495, 0.0));
                        float _3498 = isnan(1.0) ? _4872 : (isnan(_4872) ? 1.0 : min(_4872, 1.0));
                        float _3499 = dot(vec3(_1156, _1159, _1162), vec3(_3491 * _3485, _3491 * _3486, _3491 * _3487));
                        float _4883 = isnan(0.0) ? _3499 : (isnan(_3499) ? 0.0 : max(_3499, 0.0));
                        float _3502 = isnan(1.0) ? _4883 : (isnan(_4883) ? 1.0 : min(_4883, 1.0));
                        float _3506 = ((_3502 * _3502) * (_3484 + (-1.0))) + 1.0;
                        float _3507 = _3442 * _3483;
                        float _3508 = _3507 * _3507;
                        float _3511 = ((1.0 - _3508) * _3432) + _3508;
                        float _4894 = isnan(0.0) ? _3511 : (isnan(_3511) ? 0.0 : max(_3511, 0.0));
                        float _3512 = isnan(1.0) ? _4894 : (isnan(_4894) ? 1.0 : min(_4894, 1.0));
                        float _3513 = 1.0 - _3483;
                        float _3523 = (0.5 / (((_3512 * ((_3498 * _3513) + _3483)) + 9.9999999392252902907785028219223e-09) + (((_3512 * _3513) + _3483) * _3498))) * _3512;
                        float _4905 = isnan(0.0) ? _3523 : (isnan(_3523) ? 0.0 : max(_3523, 0.0));
                        float _3534 = (((_3484 * 3.1415927410125732421875) * (isnan(1.0) ? _4905 : (isnan(_4905) ? 1.0 : min(_4905, 1.0)))) / ((_3506 * _3506) * ((_3449 * 2.1991131305694580078125) + 3.141590118408203125))) * _3438;
                        _3286 = (_3453 * _3401.x) + _3359;
                        _3287 = (_3453 * _3401.y) + _3360;
                        _3288 = (_3453 * _3401.z) + _3361;
                        _3283 = (_3534 * _3418.x) + _3356;
                        _3284 = (_3534 * _3418.y) + _3357;
                        _3285 = (_3534 * _3418.z) + _3358;
                        if (_3363 == 0u)
                        {
                            break;
                        }
                        else
                        {
                            _3356 = _3283;
                            _3357 = _3284;
                            _3358 = _3285;
                            _3359 = _3286;
                            _3360 = _3287;
                            _3361 = _3288;
                            _3362 = _3363;
                        }
                    }
                    frontier_phi_68_pred = _3283;
                    frontier_phi_68_pred_1 = _3288;
                    frontier_phi_68_pred_2 = _3287;
                    frontier_phi_68_pred_3 = _3286;
                    frontier_phi_68_pred_4 = _3285;
                    frontier_phi_68_pred_5 = _3284;
                }
                _3059 = frontier_phi_68_pred;
                _3069 = frontier_phi_68_pred_1;
                _3067 = frontier_phi_68_pred_2;
                _3065 = frontier_phi_68_pred_3;
                _3063 = frontier_phi_68_pred_4;
                _3061 = frontier_phi_68_pred_5;
                uint _3218 = _3217 + 1u;
                if (_3218 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 4u) & 15u))
                {
                    _3211 = _3059;
                    _3212 = _3061;
                    _3213 = _3063;
                    _3214 = _3065;
                    _3215 = _3067;
                    _3216 = _3069;
                    _3217 = _3218;
                    continue;
                }
                else
                {
                    break;
                }
            }
            _3058 = _3059;
            _3060 = _3061;
            _3062 = _3063;
            _3064 = _3065;
            _3066 = _3067;
            _3068 = _3069;
        }
        uvec4 _3072 = floatBitsToUint(cbSceneParam._m0[66u]);
        uint _3073 = _3072.z;
        uint _3075 = (_3073 >> 8u) & 15u;
        float _3179;
        float _3181;
        float _3183;
        float _3185;
        float _3187;
        float _3189;
        if (((4294967295u << _3075) & _2957) == 0u)
        {
            _3179 = _3058;
            _3181 = _3060;
            _3183 = _3062;
            _3185 = _3064;
            _3187 = _3066;
            _3189 = _3068;
        }
        else
        {
            float _3204 = inversesqrt(dot(vec3(_2911, _2912, _2913), vec3(_2911, _2912, _2913)));
            float _3205 = _3204 * _2911;
            float _3206 = _3204 * _2912;
            float _3207 = _3204 * _2913;
            float frontier_phi_60_61_ladder;
            float frontier_phi_60_61_ladder_1;
            float frontier_phi_60_61_ladder_2;
            float frontier_phi_60_61_ladder_3;
            float frontier_phi_60_61_ladder_4;
            float frontier_phi_60_61_ladder_5;
            if (_3075 < ((_3073 >> 12u) & 15u))
            {
                float _3180;
                float _3182;
                float _3184;
                float _3186;
                float _3188;
                float _3190;
                float _3339 = _3058;
                float _3340 = _3060;
                float _3341 = _3062;
                float _3342 = _3064;
                float _3343 = _3066;
                float _3344 = _3068;
                uint _3345 = _3075;
                uint _3354;
                bool _3355;
                for (;;)
                {
                    _3354 = texelFetch(g_lightClassification, int((((_2951 << 5u) + (_2937 << 9u)) + (_3345 << 2u)) >> 2u)).x;
                    _3355 = _3354 == 0u;
                    float frontier_phi_79_pred;
                    float frontier_phi_79_pred_1;
                    float frontier_phi_79_pred_2;
                    float frontier_phi_79_pred_3;
                    float frontier_phi_79_pred_4;
                    float frontier_phi_79_pred_5;
                    if (_3355)
                    {
                        frontier_phi_79_pred = _3344;
                        frontier_phi_79_pred_1 = _3343;
                        frontier_phi_79_pred_2 = _3342;
                        frontier_phi_79_pred_3 = _3341;
                        frontier_phi_79_pred_4 = _3340;
                        frontier_phi_79_pred_5 = _3339;
                    }
                    else
                    {
                        float _3548;
                        float _3549;
                        float _3550;
                        float _3551;
                        float _3552;
                        float _3553;
                        float _3841;
                        float _3842;
                        float _3843;
                        float _3844;
                        float _3845;
                        float _3846;
                        float _3561 = _3339;
                        float _3562 = _3340;
                        float _3563 = _3341;
                        float _3564 = _3342;
                        float _3565 = _3343;
                        float _3566 = _3344;
                        uint _3567 = _3354;
                        uint _3568;
                        vec4 _3593;
                        float _3594;
                        vec4 _3609;
                        vec3 _3621;
                        vec4 _3636;
                        vec4 _3651;
                        float _3697;
                        bool _3698;
                        for (;;)
                        {
                            uint _3578 = ((_3345 - ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 8u) & 15u)) << 5u) + uint(findLSB(_3567));
                            _3568 = (_3567 + 4294967295u) & _3567;
                            uint _3580 = _3578 * 40u;
                            _3593 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3580)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3580 + 3u)).x));
                            _3594 = _3593.w;
                            uint _3596 = (_3578 * 40u) + 4u;
                            _3609 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3596)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3596 + 3u)).x));
                            uint _3611 = (_3578 * 40u) + 8u;
                            _3621 = uintBitsToFloat(uvec3(texelFetch(g_SpotLightRenderingBuffer, int(_3611)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3611 + 2u)).x));
                            uint _3623 = (_3578 * 40u) + 16u;
                            _3636 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3623)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3623 + 3u)).x));
                            uint _3638 = (_3578 * 40u) + 20u;
                            _3651 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3638)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3638 + 3u)).x));
                            uint _3653 = (_3578 * 40u) + 24u;
                            vec4 _3666 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3653)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3653 + 3u)).x));
                            uint _3672 = (_3578 * 40u) + 28u;
                            vec4 _3685 = uintBitsToFloat(uvec4(texelFetch(g_SpotLightRenderingBuffer, int(_3672)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 1u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 2u)).x, texelFetch(g_SpotLightRenderingBuffer, int(_3672 + 3u)).x));
                            _3697 = fma(_2913, _3685.z, fma(_2912, _3685.y, _3685.x * _2911)) + _3685.w;
                            _3698 = !((fma(_2913, _3666.z, fma(_2912, _3666.y, _3666.x * _2911)) + _3666.w) <= 0.0);
                            float frontier_phi_85_pred;
                            float frontier_phi_85_pred_1;
                            float frontier_phi_85_pred_2;
                            float frontier_phi_85_pred_3;
                            float frontier_phi_85_pred_4;
                            float frontier_phi_85_pred_5;
                            if (_3698)
                            {
                                float _3725 = _3593.x - _2911;
                                float _3726 = _3593.y - _2912;
                                float _3727 = _3593.z - _2913;
                                float _3728 = dot(vec3(_3725, _3726, _3727), vec3(_3725, _3726, _3727));
                                float _3731 = inversesqrt(_3728);
                                float _3732 = _3731 * _3725;
                                float _3733 = _3731 * _3726;
                                float _3734 = _3731 * _3727;
                                float _3738 = 1.0 - (_3728 / (_3594 * _3594));
                                float _4916 = isnan(0.0) ? _3738 : (isnan(_3738) ? 0.0 : max(_3738, 0.0));
                                float _3739 = isnan(1.0) ? _4916 : (isnan(_4916) ? 1.0 : min(_4916, 1.0));
                                float _3743 = sqrt(_3728) * _3609.w;
                                float _3745 = 1.39999997615814208984375 / (_3743 + 1.39999997615814208984375);
                                float _3746 = _3745 * _3745;
                                float _3749 = ((1.0 - _3746) * dot(vec3(_3732, _3733, _3734), vec3(_1156, _1159, _1162))) + _3746;
                                float _3752 = _3743 * _3743;
                                float _3756 = (fma(_2913, _3636.z, fma(_2912, _3636.y, _3636.x * _2911)) + _3636.w) / _3697;
                                float _3757 = (fma(_2913, _3651.z, fma(_2912, _3651.y, _3651.x * _2911)) + _3651.w) / _3697;
                                float _3761 = 1.0 - dot(vec2(_3756, _3757), vec2(_3756, _3757));
                                float _4932 = isnan(0.0) ? _3761 : (isnan(_3761) ? 0.0 : max(_3761, 0.0));
                                float _3762 = isnan(1.0) ? _4932 : (isnan(_4932) ? 1.0 : min(_4932, 1.0));
                                float _3763 = _3762 * (((isnan(0.0) ? _3749 : (isnan(_3749) ? 0.0 : max(_3749, 0.0))) * _3739) / ((_3752 * 0.699999988079071044921875) + 1.0));
                                float _3775 = exp2(log2(1.0 / ((_3752 * 3.5) + 5.0)) * 0.25);
                                float _3776 = 1.0 - _1231;
                                float _3783 = sqrt(1.0 - ((1.0 - (_3776 * _3776)) * (1.0 - (_3775 * _3775))));
                                float _3784 = _3783 * _3783;
                                float _3785 = _3784 * _3784;
                                float _3786 = _3732 - _3205;
                                float _3787 = _3733 - _3206;
                                float _3788 = _3734 - _3207;
                                float _3792 = inversesqrt(dot(vec3(_3786, _3787, _3788), vec3(_3786, _3787, _3788)));
                                float _3796 = dot(vec3(_1156, _1159, _1162), vec3((-0.0) - _3205, (-0.0) - _3206, (-0.0) - _3207));
                                float _4943 = isnan(0.0) ? _3796 : (isnan(_3796) ? 0.0 : max(_3796, 0.0));
                                float _3799 = isnan(1.0) ? _4943 : (isnan(_4943) ? 1.0 : min(_4943, 1.0));
                                float _3800 = dot(vec3(_1156, _1159, _1162), vec3(_3792 * _3786, _3792 * _3787, _3792 * _3788));
                                float _4954 = isnan(0.0) ? _3800 : (isnan(_3800) ? 0.0 : max(_3800, 0.0));
                                float _3803 = isnan(1.0) ? _4954 : (isnan(_4954) ? 1.0 : min(_4954, 1.0));
                                float _3807 = ((_3803 * _3803) * (_3785 + (-1.0))) + 1.0;
                                float _3808 = _3745 * _3784;
                                float _3809 = _3808 * _3808;
                                float _3815 = ((1.0 - _3809) * dot(vec3(_1156, _1159, _1162), vec3(_3732, _3733, _3734))) + _3809;
                                float _4965 = isnan(0.0) ? _3815 : (isnan(_3815) ? 0.0 : max(_3815, 0.0));
                                float _3816 = isnan(1.0) ? _4965 : (isnan(_4965) ? 1.0 : min(_4965, 1.0));
                                float _3817 = 1.0 - _3784;
                                float _3827 = (0.5 / (((_3816 * ((_3799 * _3817) + _3784)) + 9.9999999392252902907785028219223e-09) + (((_3816 * _3817) + _3784) * _3799))) * _3816;
                                float _4976 = isnan(0.0) ? _3827 : (isnan(_3827) ? 0.0 : max(_3827, 0.0));
                                float _3837 = (_3762 * _3739) * (((_3785 * 3.1415927410125732421875) * (isnan(1.0) ? _4976 : (isnan(_4976) ? 1.0 : min(_4976, 1.0)))) / ((_3807 * _3807) * ((_3752 * 2.1991131305694580078125) + 3.141590118408203125)));
                                frontier_phi_85_pred = _3763 * _3609.y;
                                frontier_phi_85_pred_1 = _3763 * _3609.x;
                                frontier_phi_85_pred_2 = _3837 * _3621.z;
                                frontier_phi_85_pred_3 = _3837 * _3621.y;
                                frontier_phi_85_pred_4 = _3837 * _3621.x;
                                frontier_phi_85_pred_5 = _3763 * _3609.z;
                            }
                            else
                            {
                                frontier_phi_85_pred = 0.0;
                                frontier_phi_85_pred_1 = 0.0;
                                frontier_phi_85_pred_2 = 0.0;
                                frontier_phi_85_pred_3 = 0.0;
                                frontier_phi_85_pred_4 = 0.0;
                                frontier_phi_85_pred_5 = 0.0;
                            }
                            _3845 = frontier_phi_85_pred;
                            _3844 = frontier_phi_85_pred_1;
                            _3843 = frontier_phi_85_pred_2;
                            _3842 = frontier_phi_85_pred_3;
                            _3841 = frontier_phi_85_pred_4;
                            _3846 = frontier_phi_85_pred_5;
                            _3551 = _3844 + _3564;
                            _3552 = _3845 + _3565;
                            _3553 = _3846 + _3566;
                            _3548 = _3841 + _3561;
                            _3549 = _3842 + _3562;
                            _3550 = _3843 + _3563;
                            if (_3568 == 0u)
                            {
                                break;
                            }
                            else
                            {
                                _3561 = _3548;
                                _3562 = _3549;
                                _3563 = _3550;
                                _3564 = _3551;
                                _3565 = _3552;
                                _3566 = _3553;
                                _3567 = _3568;
                                continue;
                            }
                        }
                        frontier_phi_79_pred = _3553;
                        frontier_phi_79_pred_1 = _3552;
                        frontier_phi_79_pred_2 = _3551;
                        frontier_phi_79_pred_3 = _3550;
                        frontier_phi_79_pred_4 = _3549;
                        frontier_phi_79_pred_5 = _3548;
                    }
                    _3190 = frontier_phi_79_pred;
                    _3188 = frontier_phi_79_pred_1;
                    _3186 = frontier_phi_79_pred_2;
                    _3184 = frontier_phi_79_pred_3;
                    _3182 = frontier_phi_79_pred_4;
                    _3180 = frontier_phi_79_pred_5;
                    uint _3346 = _3345 + 1u;
                    if (_3346 < ((floatBitsToUint(cbSceneParam._m0[66u]).z >> 12u) & 15u))
                    {
                        _3339 = _3180;
                        _3340 = _3182;
                        _3341 = _3184;
                        _3342 = _3186;
                        _3343 = _3188;
                        _3344 = _3190;
                        _3345 = _3346;
                        continue;
                    }
                    else
                    {
                        break;
                    }
                }
                frontier_phi_60_61_ladder = _3184;
                frontier_phi_60_61_ladder_1 = _3190;
                frontier_phi_60_61_ladder_2 = _3188;
                frontier_phi_60_61_ladder_3 = _3186;
                frontier_phi_60_61_ladder_4 = _3182;
                frontier_phi_60_61_ladder_5 = _3180;
            }
            else
            {
                frontier_phi_60_61_ladder = _3062;
                frontier_phi_60_61_ladder_1 = _3068;
                frontier_phi_60_61_ladder_2 = _3066;
                frontier_phi_60_61_ladder_3 = _3064;
                frontier_phi_60_61_ladder_4 = _3060;
                frontier_phi_60_61_ladder_5 = _3058;
            }
            _3179 = frontier_phi_60_61_ladder_5;
            _3181 = frontier_phi_60_61_ladder_4;
            _3183 = frontier_phi_60_61_ladder;
            _3185 = frontier_phi_60_61_ladder_3;
            _3187 = frontier_phi_60_61_ladder_2;
            _3189 = frontier_phi_60_61_ladder_1;
        }
        float _3194 = isnan(1.0) ? _1215 : (isnan(_1215) ? 1.0 : min(_1215, 1.0));
        _2970 = (_3194 * _3185) + _2406;
        _2972 = (_3194 * _3187) + _2408;
        _2974 = (_3194 * _3189) + _2410;
        _2976 = ((_3179 * _1200) * _3194) + _2751;
        _2978 = ((_3181 * _1202) * _3194) + _2753;
        _2980 = ((_3183 * _1203) * _3194) + _2755;
    }
    else
    {
        _2970 = _2406;
        _2972 = _2408;
        _2974 = _2410;
        _2976 = _2751;
        _2978 = _2753;
        _2980 = _2755;
    }
    float _4992 = isnan(0.0) ? _1190 : (isnan(_1190) ? 0.0 : max(_1190, 0.0));
    float _5003 = isnan(0.0) ? _1191 : (isnan(_1191) ? 0.0 : max(_1191, 0.0));
    float _5014 = isnan(0.0) ? _1192 : (isnan(_1192) ? 0.0 : max(_1192, 0.0));
    float _2997 = ((isnan(1.0) ? _4992 : (isnan(_4992) ? 1.0 : min(_4992, 1.0))) * (_2970 + ((isnan(0.0) ? _1967 : (isnan(_1967) ? 0.0 : max(_1967, 0.0))) * _1215))) + ((_2976 + ((isnan(0.0) ? _2259 : (isnan(_2259) ? 0.0 : max(_2259, 0.0))) * _2046)) * cbPerFrame._m0[3u].x);
    float _2998 = ((isnan(1.0) ? _5003 : (isnan(_5003) ? 1.0 : min(_5003, 1.0))) * (_2972 + ((isnan(0.0) ? _1970 : (isnan(_1970) ? 0.0 : max(_1970, 0.0))) * _1215))) + ((_2978 + ((isnan(0.0) ? _2262 : (isnan(_2262) ? 0.0 : max(_2262, 0.0))) * _2046)) * cbPerFrame._m0[3u].x);
    float _2999 = ((isnan(1.0) ? _5014 : (isnan(_5014) ? 1.0 : min(_5014, 1.0))) * (_2974 + ((isnan(0.0) ? _1973 : (isnan(_1973) ? 0.0 : max(_1973, 0.0))) * _1215))) + ((_2980 + ((isnan(0.0) ? _2265 : (isnan(_2265) ? 0.0 : max(_2265, 0.0))) * _2046)) * cbPerFrame._m0[3u].x);
    uint _3000 = _1175 + 6u;
    float _3008 = _1137 / cbSceneParam._m0[86u].x;
    float _3009 = _1138 / cbSceneParam._m0[86u].y;
    vec4 _3023 = texture(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3008, _3009, (log2((isnan(cbSceneParam._m0[77u].w) ? _1063 : (isnan(_1063) ? cbSceneParam._m0[77u].w : min(_1063, cbSceneParam._m0[77u].w))) + cbSceneParam._m0[77u].x) * cbSceneParam._m0[77u].y) + cbSceneParam._m0[77u].z));
    float _3025 = _3023.x;
    float _3026 = _3023.y;
    float _3027 = _3023.z;
    float _3028 = _3023.w;
    float _3121;
    float _3123;
    float _3125;
    float _3127;
    if (_1063 > cbSceneParam._m0[78u].w)
    {
        float _3083 = isnan(_1063) ? cbSceneParam._m0[80u].w : (isnan(cbSceneParam._m0[80u].w) ? _1063 : min(cbSceneParam._m0[80u].w, _1063));
        float _3084 = _3083 / _1063;
        float _3095 = _3084 * _1113;
        float _3096 = _1114 * _3084;
        float _3097 = (-0.0) - _3096;
        float _3099 = _3084 * _1115;
        float _3101 = (cbSceneParam._m0[77u].w * _3097) / _3083;
        float _3102 = _3101 + cbSceneParam._m0[79u].w;
        float _3103 = cbSceneParam._m0[79u].w - _3096;
        float _3109 = sqrt(((_3095 * _3095) + (_3096 * _3096)) + (_3099 * _3099));
        float _3112 = (1.0 - (cbSceneParam._m0[77u].w / _3083)) * _3109;
        float _3117 = cbSceneParam._m0[80u].x * (-1.44269502162933349609375);
        float _3119 = cbSceneParam._m0[80u].x * 1.44269502162933349609375;
        float _3296;
        if (abs((_3097 - _3101) * cbSceneParam._m0[80u].x) < 9.9999997473787516355514526367188e-05)
        {
            _3296 = ((((_3102 > 0.0) ? exp2(_3117 * _3102) : (2.0 - exp2(_3119 * _3102))) * cbSceneParam._m0[80u].y) + cbSceneParam._m0[80u].z) * _3112;
        }
        else
        {
            float _3240 = 1.0 / cbSceneParam._m0[80u].x;
            float _3241 = isnan(_3103) ? _3102 : (isnan(_3102) ? _3103 : max(_3102, _3103));
            float _3242 = isnan(_3103) ? _3102 : (isnan(_3102) ? _3103 : min(_3102, _3103));
            float _3251 = isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : min(_3241, 0.0));
            float _3252 = isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : min(_3242, 0.0));
            _3296 = ((abs(_3109 / _3097) * cbSceneParam._m0[80u].y) * ((((_3251 - _3252) * 2.0) - ((exp2(_3117 * (isnan(0.0) ? _3241 : (isnan(_3241) ? 0.0 : max(_3241, 0.0)))) - exp2(_3117 * (isnan(0.0) ? _3242 : (isnan(_3242) ? 0.0 : max(_3242, 0.0))))) * _3240)) - ((exp2(_3119 * _3251) - exp2(_3119 * _3252)) * _3240))) + (_3112 * cbSceneParam._m0[80u].z);
        }
        vec4 _3298 = textureLod(sampler3D(g_VolumeFog0, SS_ClampLinear), vec3(_3008, _3009, 1.0), 0.0);
        float _3307 = exp2((_3296 * (-1.44269502162933349609375)) * (1.0 - _3298.w));
        float _3308 = log2(_3307);
        float _3324 = log2(_3028);
        _3121 = (exp2(_3324 * cbSceneParam._m0[78u].x) * (((1.0 - exp2(_3308 * cbSceneParam._m0[78u].x)) * _3298.x) / cbSceneParam._m0[78u].x)) + _3025;
        _3123 = (exp2(_3324 * cbSceneParam._m0[78u].y) * (((1.0 - exp2(_3308 * cbSceneParam._m0[78u].y)) * _3298.y) / cbSceneParam._m0[78u].y)) + _3026;
        _3125 = (exp2(_3324 * cbSceneParam._m0[78u].z) * (((1.0 - exp2(_3308 * cbSceneParam._m0[78u].z)) * _3298.z) / cbSceneParam._m0[78u].z)) + _3027;
        _3127 = _3307 * _3028;
    }
    else
    {
        _3121 = _3025;
        _3123 = _3026;
        _3125 = _3027;
        _3127 = _3028;
    }
    bool _3334;
    vec4 _3137;
    vec4 _3159;
    float _3161;
    float _3165;
    float _3166;
    float _3167;
    float _3168;
    bool _3178;
    for (;;)
    {
        _3137 = cbMatDynParam._m0[0u];
        float _3139 = roundEven(_3137.y);
        bool _3140 = _3139 == 3.0;
        float _3141 = log2(_3127);
        float _3148 = exp2(_3141 * cbSceneParam._m0[78u].x) * _2997;
        float _3149 = exp2(_3141 * cbSceneParam._m0[78u].y) * _2998;
        float _3150 = exp2(_3141 * cbSceneParam._m0[78u].z) * _2999;
        float _3157 = _1126 + (-0.5);
        _3159 = cbMtdParam._m0[1u];
        _3161 = _3159.y * _3157;
        float _3164 = (_3139 != 2.0) ? cbSceneParam._m0[72u].z : 1.0;
        _3165 = _3164 * (_3140 ? _3148 : (_3148 + (cbSceneParam._m0[72u].w * _3121)));
        _3166 = _3164 * (_3140 ? _3149 : (_3149 + (cbSceneParam._m0[72u].w * _3123)));
        _3167 = _3164 * (_3140 ? _3150 : (_3150 + (cbSceneParam._m0[72u].w * _3125)));
        _3168 = _3157 * 0.999000012874603271484375;
        _3178 = (cbModelParam._m0[2u].x > 0.0) && (floatBitsToUint(cbMatDynParam._m0[0u]).x != 0u);
        if (_3178)
        {
            if ((cbInstanceData._m0[_1175 + 7u].x + _3168) < 0.5)
            {
                _3334 = true;
                break;
            }
        }
        uint _3275 = _1176 + uint(_3137.w);
        if ((cbInstanceData._m0[_3275].w < 1.0) && ((cbInstanceData._m0[_3275].w + _3168) < 0.5))
        {
            _3334 = true;
            break;
        }
        if ((_3161 + 1.0) < _3159.x)
        {
            _3334 = true;
            break;
        }
        _3334 = false;
        break;
    }
    float _3539;
    if (_3334)
    {
        discard_state = true;
        _3539 = 0.0;
    }
    else
    {
        _3539 = cbInstanceData._m0[_3000].w;
    }
    SV_Target.x = _3165;
    SV_Target.y = _3166;
    SV_Target.z = _3167;
    SV_Target.w = _3539;
    SV_Target_1.x = 0.0;
    SV_Target_1.y = 0.0;
    SV_Target_1.z = 0.0;
    SV_Target_1.w = cbInstanceData._m0[_3000].w;
    discard_exit();
}


